
tdk_arm_microros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a46c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001298  0801a640  0801a640  0001b640  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b8d8  0801b8d8  0001d96c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801b8d8  0801b8d8  0001c8d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b8e0  0801b8e0  0001d96c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000018  0801b8e0  0801b8e0  0001c8e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801b8f8  0801b8f8  0001c8f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000096c  20000000  0801b8fc  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011168  20000970  0801c268  0001d970  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20011ad8  0801c268  0001dad8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001d96c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028267  00000000  00000000  0001d99c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005337  00000000  00000000  00045c03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b78  00000000  00000000  0004af40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001558  00000000  00000000  0004cab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cd39  00000000  00000000  0004e010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024e04  00000000  00000000  0007ad49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee73f  00000000  00000000  0009fb4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  0018e28c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000082e8  00000000  00000000  0018e304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001965ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000970 	.word	0x20000970
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801a624 	.word	0x0801a624

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000974 	.word	0x20000974
 800020c:	0801a624 	.word	0x0801a624

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2f>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b94:	bf24      	itt	cs
 8000b96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b9e:	d90d      	bls.n	8000bbc <__aeabi_d2f+0x30>
 8000ba0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ba4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bac:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bb0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb4:	bf08      	it	eq
 8000bb6:	f020 0001 	biceq.w	r0, r0, #1
 8000bba:	4770      	bx	lr
 8000bbc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bc0:	d121      	bne.n	8000c06 <__aeabi_d2f+0x7a>
 8000bc2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bc6:	bfbc      	itt	lt
 8000bc8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bcc:	4770      	bxlt	lr
 8000bce:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bd2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd6:	f1c2 0218 	rsb	r2, r2, #24
 8000bda:	f1c2 0c20 	rsb	ip, r2, #32
 8000bde:	fa10 f30c 	lsls.w	r3, r0, ip
 8000be2:	fa20 f002 	lsr.w	r0, r0, r2
 8000be6:	bf18      	it	ne
 8000be8:	f040 0001 	orrne.w	r0, r0, #1
 8000bec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf8:	ea40 000c 	orr.w	r0, r0, ip
 8000bfc:	fa23 f302 	lsr.w	r3, r3, r2
 8000c00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c04:	e7cc      	b.n	8000ba0 <__aeabi_d2f+0x14>
 8000c06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c0a:	d107      	bne.n	8000c1c <__aeabi_d2f+0x90>
 8000c0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c10:	bf1e      	ittt	ne
 8000c12:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c16:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c1a:	4770      	bxne	lr
 8000c1c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c20:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c24:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <__aeabi_ldivmod>:
 8000c2c:	b97b      	cbnz	r3, 8000c4e <__aeabi_ldivmod+0x22>
 8000c2e:	b972      	cbnz	r2, 8000c4e <__aeabi_ldivmod+0x22>
 8000c30:	2900      	cmp	r1, #0
 8000c32:	bfbe      	ittt	lt
 8000c34:	2000      	movlt	r0, #0
 8000c36:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c3a:	e006      	blt.n	8000c4a <__aeabi_ldivmod+0x1e>
 8000c3c:	bf08      	it	eq
 8000c3e:	2800      	cmpeq	r0, #0
 8000c40:	bf1c      	itt	ne
 8000c42:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c46:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c4a:	f000 b9d3 	b.w	8000ff4 <__aeabi_idiv0>
 8000c4e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c52:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c56:	2900      	cmp	r1, #0
 8000c58:	db09      	blt.n	8000c6e <__aeabi_ldivmod+0x42>
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	db1a      	blt.n	8000c94 <__aeabi_ldivmod+0x68>
 8000c5e:	f000 f84d 	bl	8000cfc <__udivmoddi4>
 8000c62:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c6a:	b004      	add	sp, #16
 8000c6c:	4770      	bx	lr
 8000c6e:	4240      	negs	r0, r0
 8000c70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	db1b      	blt.n	8000cb0 <__aeabi_ldivmod+0x84>
 8000c78:	f000 f840 	bl	8000cfc <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4240      	negs	r0, r0
 8000c88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8c:	4252      	negs	r2, r2
 8000c8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c92:	4770      	bx	lr
 8000c94:	4252      	negs	r2, r2
 8000c96:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c9a:	f000 f82f 	bl	8000cfc <__udivmoddi4>
 8000c9e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca6:	b004      	add	sp, #16
 8000ca8:	4240      	negs	r0, r0
 8000caa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cae:	4770      	bx	lr
 8000cb0:	4252      	negs	r2, r2
 8000cb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb6:	f000 f821 	bl	8000cfc <__udivmoddi4>
 8000cba:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc2:	b004      	add	sp, #16
 8000cc4:	4252      	negs	r2, r2
 8000cc6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_uldivmod>:
 8000ccc:	b953      	cbnz	r3, 8000ce4 <__aeabi_uldivmod+0x18>
 8000cce:	b94a      	cbnz	r2, 8000ce4 <__aeabi_uldivmod+0x18>
 8000cd0:	2900      	cmp	r1, #0
 8000cd2:	bf08      	it	eq
 8000cd4:	2800      	cmpeq	r0, #0
 8000cd6:	bf1c      	itt	ne
 8000cd8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cdc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ce0:	f000 b988 	b.w	8000ff4 <__aeabi_idiv0>
 8000ce4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cec:	f000 f806 	bl	8000cfc <__udivmoddi4>
 8000cf0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf8:	b004      	add	sp, #16
 8000cfa:	4770      	bx	lr

08000cfc <__udivmoddi4>:
 8000cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d00:	9d08      	ldr	r5, [sp, #32]
 8000d02:	468e      	mov	lr, r1
 8000d04:	4604      	mov	r4, r0
 8000d06:	4688      	mov	r8, r1
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d14a      	bne.n	8000da2 <__udivmoddi4+0xa6>
 8000d0c:	428a      	cmp	r2, r1
 8000d0e:	4617      	mov	r7, r2
 8000d10:	d962      	bls.n	8000dd8 <__udivmoddi4+0xdc>
 8000d12:	fab2 f682 	clz	r6, r2
 8000d16:	b14e      	cbz	r6, 8000d2c <__udivmoddi4+0x30>
 8000d18:	f1c6 0320 	rsb	r3, r6, #32
 8000d1c:	fa01 f806 	lsl.w	r8, r1, r6
 8000d20:	fa20 f303 	lsr.w	r3, r0, r3
 8000d24:	40b7      	lsls	r7, r6
 8000d26:	ea43 0808 	orr.w	r8, r3, r8
 8000d2a:	40b4      	lsls	r4, r6
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f fc87 	uxth.w	ip, r7
 8000d34:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d38:	0c23      	lsrs	r3, r4, #16
 8000d3a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d42:	fb01 f20c 	mul.w	r2, r1, ip
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d909      	bls.n	8000d5e <__udivmoddi4+0x62>
 8000d4a:	18fb      	adds	r3, r7, r3
 8000d4c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000d50:	f080 80ea 	bcs.w	8000f28 <__udivmoddi4+0x22c>
 8000d54:	429a      	cmp	r2, r3
 8000d56:	f240 80e7 	bls.w	8000f28 <__udivmoddi4+0x22c>
 8000d5a:	3902      	subs	r1, #2
 8000d5c:	443b      	add	r3, r7
 8000d5e:	1a9a      	subs	r2, r3, r2
 8000d60:	b2a3      	uxth	r3, r4
 8000d62:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d66:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d6e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d72:	459c      	cmp	ip, r3
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0x8e>
 8000d76:	18fb      	adds	r3, r7, r3
 8000d78:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000d7c:	f080 80d6 	bcs.w	8000f2c <__udivmoddi4+0x230>
 8000d80:	459c      	cmp	ip, r3
 8000d82:	f240 80d3 	bls.w	8000f2c <__udivmoddi4+0x230>
 8000d86:	443b      	add	r3, r7
 8000d88:	3802      	subs	r0, #2
 8000d8a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d8e:	eba3 030c 	sub.w	r3, r3, ip
 8000d92:	2100      	movs	r1, #0
 8000d94:	b11d      	cbz	r5, 8000d9e <__udivmoddi4+0xa2>
 8000d96:	40f3      	lsrs	r3, r6
 8000d98:	2200      	movs	r2, #0
 8000d9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d905      	bls.n	8000db2 <__udivmoddi4+0xb6>
 8000da6:	b10d      	cbz	r5, 8000dac <__udivmoddi4+0xb0>
 8000da8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dac:	2100      	movs	r1, #0
 8000dae:	4608      	mov	r0, r1
 8000db0:	e7f5      	b.n	8000d9e <__udivmoddi4+0xa2>
 8000db2:	fab3 f183 	clz	r1, r3
 8000db6:	2900      	cmp	r1, #0
 8000db8:	d146      	bne.n	8000e48 <__udivmoddi4+0x14c>
 8000dba:	4573      	cmp	r3, lr
 8000dbc:	d302      	bcc.n	8000dc4 <__udivmoddi4+0xc8>
 8000dbe:	4282      	cmp	r2, r0
 8000dc0:	f200 8105 	bhi.w	8000fce <__udivmoddi4+0x2d2>
 8000dc4:	1a84      	subs	r4, r0, r2
 8000dc6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000dca:	2001      	movs	r0, #1
 8000dcc:	4690      	mov	r8, r2
 8000dce:	2d00      	cmp	r5, #0
 8000dd0:	d0e5      	beq.n	8000d9e <__udivmoddi4+0xa2>
 8000dd2:	e9c5 4800 	strd	r4, r8, [r5]
 8000dd6:	e7e2      	b.n	8000d9e <__udivmoddi4+0xa2>
 8000dd8:	2a00      	cmp	r2, #0
 8000dda:	f000 8090 	beq.w	8000efe <__udivmoddi4+0x202>
 8000dde:	fab2 f682 	clz	r6, r2
 8000de2:	2e00      	cmp	r6, #0
 8000de4:	f040 80a4 	bne.w	8000f30 <__udivmoddi4+0x234>
 8000de8:	1a8a      	subs	r2, r1, r2
 8000dea:	0c03      	lsrs	r3, r0, #16
 8000dec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000df0:	b280      	uxth	r0, r0
 8000df2:	b2bc      	uxth	r4, r7
 8000df4:	2101      	movs	r1, #1
 8000df6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000dfa:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e02:	fb04 f20c 	mul.w	r2, r4, ip
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d907      	bls.n	8000e1a <__udivmoddi4+0x11e>
 8000e0a:	18fb      	adds	r3, r7, r3
 8000e0c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e10:	d202      	bcs.n	8000e18 <__udivmoddi4+0x11c>
 8000e12:	429a      	cmp	r2, r3
 8000e14:	f200 80e0 	bhi.w	8000fd8 <__udivmoddi4+0x2dc>
 8000e18:	46c4      	mov	ip, r8
 8000e1a:	1a9b      	subs	r3, r3, r2
 8000e1c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e20:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e24:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e28:	fb02 f404 	mul.w	r4, r2, r4
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x144>
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x142>
 8000e38:	429c      	cmp	r4, r3
 8000e3a:	f200 80ca 	bhi.w	8000fd2 <__udivmoddi4+0x2d6>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	1b1b      	subs	r3, r3, r4
 8000e42:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e46:	e7a5      	b.n	8000d94 <__udivmoddi4+0x98>
 8000e48:	f1c1 0620 	rsb	r6, r1, #32
 8000e4c:	408b      	lsls	r3, r1
 8000e4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e52:	431f      	orrs	r7, r3
 8000e54:	fa0e f401 	lsl.w	r4, lr, r1
 8000e58:	fa20 f306 	lsr.w	r3, r0, r6
 8000e5c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e60:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e64:	4323      	orrs	r3, r4
 8000e66:	fa00 f801 	lsl.w	r8, r0, r1
 8000e6a:	fa1f fc87 	uxth.w	ip, r7
 8000e6e:	fbbe f0f9 	udiv	r0, lr, r9
 8000e72:	0c1c      	lsrs	r4, r3, #16
 8000e74:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e78:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e7c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e80:	45a6      	cmp	lr, r4
 8000e82:	fa02 f201 	lsl.w	r2, r2, r1
 8000e86:	d909      	bls.n	8000e9c <__udivmoddi4+0x1a0>
 8000e88:	193c      	adds	r4, r7, r4
 8000e8a:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000e8e:	f080 809c 	bcs.w	8000fca <__udivmoddi4+0x2ce>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f240 8099 	bls.w	8000fca <__udivmoddi4+0x2ce>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	443c      	add	r4, r7
 8000e9c:	eba4 040e 	sub.w	r4, r4, lr
 8000ea0:	fa1f fe83 	uxth.w	lr, r3
 8000ea4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ea8:	fb09 4413 	mls	r4, r9, r3, r4
 8000eac:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000eb0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb4:	45a4      	cmp	ip, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x1ce>
 8000eb8:	193c      	adds	r4, r7, r4
 8000eba:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000ebe:	f080 8082 	bcs.w	8000fc6 <__udivmoddi4+0x2ca>
 8000ec2:	45a4      	cmp	ip, r4
 8000ec4:	d97f      	bls.n	8000fc6 <__udivmoddi4+0x2ca>
 8000ec6:	3b02      	subs	r3, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ece:	eba4 040c 	sub.w	r4, r4, ip
 8000ed2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ed6:	4564      	cmp	r4, ip
 8000ed8:	4673      	mov	r3, lr
 8000eda:	46e1      	mov	r9, ip
 8000edc:	d362      	bcc.n	8000fa4 <__udivmoddi4+0x2a8>
 8000ede:	d05f      	beq.n	8000fa0 <__udivmoddi4+0x2a4>
 8000ee0:	b15d      	cbz	r5, 8000efa <__udivmoddi4+0x1fe>
 8000ee2:	ebb8 0203 	subs.w	r2, r8, r3
 8000ee6:	eb64 0409 	sbc.w	r4, r4, r9
 8000eea:	fa04 f606 	lsl.w	r6, r4, r6
 8000eee:	fa22 f301 	lsr.w	r3, r2, r1
 8000ef2:	431e      	orrs	r6, r3
 8000ef4:	40cc      	lsrs	r4, r1
 8000ef6:	e9c5 6400 	strd	r6, r4, [r5]
 8000efa:	2100      	movs	r1, #0
 8000efc:	e74f      	b.n	8000d9e <__udivmoddi4+0xa2>
 8000efe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f02:	0c01      	lsrs	r1, r0, #16
 8000f04:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f08:	b280      	uxth	r0, r0
 8000f0a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f0e:	463b      	mov	r3, r7
 8000f10:	4638      	mov	r0, r7
 8000f12:	463c      	mov	r4, r7
 8000f14:	46b8      	mov	r8, r7
 8000f16:	46be      	mov	lr, r7
 8000f18:	2620      	movs	r6, #32
 8000f1a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f1e:	eba2 0208 	sub.w	r2, r2, r8
 8000f22:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f26:	e766      	b.n	8000df6 <__udivmoddi4+0xfa>
 8000f28:	4601      	mov	r1, r0
 8000f2a:	e718      	b.n	8000d5e <__udivmoddi4+0x62>
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	e72c      	b.n	8000d8a <__udivmoddi4+0x8e>
 8000f30:	f1c6 0220 	rsb	r2, r6, #32
 8000f34:	fa2e f302 	lsr.w	r3, lr, r2
 8000f38:	40b7      	lsls	r7, r6
 8000f3a:	40b1      	lsls	r1, r6
 8000f3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000f40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f44:	430a      	orrs	r2, r1
 8000f46:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f4a:	b2bc      	uxth	r4, r7
 8000f4c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f50:	0c11      	lsrs	r1, r2, #16
 8000f52:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f56:	fb08 f904 	mul.w	r9, r8, r4
 8000f5a:	40b0      	lsls	r0, r6
 8000f5c:	4589      	cmp	r9, r1
 8000f5e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f62:	b280      	uxth	r0, r0
 8000f64:	d93e      	bls.n	8000fe4 <__udivmoddi4+0x2e8>
 8000f66:	1879      	adds	r1, r7, r1
 8000f68:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000f6c:	d201      	bcs.n	8000f72 <__udivmoddi4+0x276>
 8000f6e:	4589      	cmp	r9, r1
 8000f70:	d81f      	bhi.n	8000fb2 <__udivmoddi4+0x2b6>
 8000f72:	eba1 0109 	sub.w	r1, r1, r9
 8000f76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7a:	fb09 f804 	mul.w	r8, r9, r4
 8000f7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f82:	b292      	uxth	r2, r2
 8000f84:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f88:	4542      	cmp	r2, r8
 8000f8a:	d229      	bcs.n	8000fe0 <__udivmoddi4+0x2e4>
 8000f8c:	18ba      	adds	r2, r7, r2
 8000f8e:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000f92:	d2c4      	bcs.n	8000f1e <__udivmoddi4+0x222>
 8000f94:	4542      	cmp	r2, r8
 8000f96:	d2c2      	bcs.n	8000f1e <__udivmoddi4+0x222>
 8000f98:	f1a9 0102 	sub.w	r1, r9, #2
 8000f9c:	443a      	add	r2, r7
 8000f9e:	e7be      	b.n	8000f1e <__udivmoddi4+0x222>
 8000fa0:	45f0      	cmp	r8, lr
 8000fa2:	d29d      	bcs.n	8000ee0 <__udivmoddi4+0x1e4>
 8000fa4:	ebbe 0302 	subs.w	r3, lr, r2
 8000fa8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fac:	3801      	subs	r0, #1
 8000fae:	46e1      	mov	r9, ip
 8000fb0:	e796      	b.n	8000ee0 <__udivmoddi4+0x1e4>
 8000fb2:	eba7 0909 	sub.w	r9, r7, r9
 8000fb6:	4449      	add	r1, r9
 8000fb8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fbc:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc0:	fb09 f804 	mul.w	r8, r9, r4
 8000fc4:	e7db      	b.n	8000f7e <__udivmoddi4+0x282>
 8000fc6:	4673      	mov	r3, lr
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1ce>
 8000fca:	4650      	mov	r0, sl
 8000fcc:	e766      	b.n	8000e9c <__udivmoddi4+0x1a0>
 8000fce:	4608      	mov	r0, r1
 8000fd0:	e6fd      	b.n	8000dce <__udivmoddi4+0xd2>
 8000fd2:	443b      	add	r3, r7
 8000fd4:	3a02      	subs	r2, #2
 8000fd6:	e733      	b.n	8000e40 <__udivmoddi4+0x144>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	443b      	add	r3, r7
 8000fde:	e71c      	b.n	8000e1a <__udivmoddi4+0x11e>
 8000fe0:	4649      	mov	r1, r9
 8000fe2:	e79c      	b.n	8000f1e <__udivmoddi4+0x222>
 8000fe4:	eba1 0109 	sub.w	r1, r1, r9
 8000fe8:	46c4      	mov	ip, r8
 8000fea:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fee:	fb09 f804 	mul.w	r8, r9, r4
 8000ff2:	e7c4      	b.n	8000f7e <__udivmoddi4+0x282>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <_ZN10UART_servo9UART_SendEh>:
//servo control variale
//declare struct
//servo control function
//servo control variale
//servo control function
void UART_servo::UART_Send(uint8_t u8_data) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	70fb      	strb	r3, [r7, #3]
	uint8_t *u8_pointer = &u8_data;
 8001004:	1cfb      	adds	r3, r7, #3
 8001006:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart3, u8_pointer, 1, 100);
 8001008:	2364      	movs	r3, #100	@ 0x64
 800100a:	2201      	movs	r2, #1
 800100c:	68f9      	ldr	r1, [r7, #12]
 800100e:	4807      	ldr	r0, [pc, #28]	@ (800102c <_ZN10UART_servo9UART_SendEh+0x34>)
 8001010:	f005 f92e 	bl	8006270 <HAL_UART_Transmit>
	Checksum_Calc += u8_data;
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	461a      	mov	r2, r3
 8001018:	4b05      	ldr	r3, [pc, #20]	@ (8001030 <_ZN10UART_servo9UART_SendEh+0x38>)
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	4413      	add	r3, r2
 800101e:	b29a      	uxth	r2, r3
 8001020:	4b03      	ldr	r3, [pc, #12]	@ (8001030 <_ZN10UART_servo9UART_SendEh+0x38>)
 8001022:	801a      	strh	r2, [r3, #0]
}
 8001024:	bf00      	nop
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	2000541c 	.word	0x2000541c
 8001030:	2000098c 	.word	0x2000098c

08001034 <_ZN10UART_servo26UART_Send_SetMotorPositionEttt>:
void UART_servo::UART_Send_SetMotorPosition(uint16_t motorId, uint16_t Position, uint16_t Time) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	4608      	mov	r0, r1
 800103e:	4611      	mov	r1, r2
 8001040:	461a      	mov	r2, r3
 8001042:	4603      	mov	r3, r0
 8001044:	817b      	strh	r3, [r7, #10]
 8001046:	460b      	mov	r3, r1
 8001048:	813b      	strh	r3, [r7, #8]
 800104a:	4613      	mov	r3, r2
 800104c:	80fb      	strh	r3, [r7, #6]
	Checksum_Calc = 0;
 800104e:	4b20      	ldr	r3, [pc, #128]	@ (80010d0 <_ZN10UART_servo26UART_Send_SetMotorPositionEttt+0x9c>)
 8001050:	2200      	movs	r2, #0
 8001052:	801a      	strh	r2, [r3, #0]
	UART_Send(0x80 + motorId);    //header mark & broadcast ID
 8001054:	897b      	ldrh	r3, [r7, #10]
 8001056:	b2db      	uxtb	r3, r3
 8001058:	3b80      	subs	r3, #128	@ 0x80
 800105a:	b2db      	uxtb	r3, r3
 800105c:	4619      	mov	r1, r3
 800105e:	68f8      	ldr	r0, [r7, #12]
 8001060:	f7ff ffca 	bl	8000ff8 <_ZN10UART_servo9UART_SendEh>
	UART_Send(0x83);              //header mark & command code
 8001064:	2183      	movs	r1, #131	@ 0x83
 8001066:	68f8      	ldr	r0, [r7, #12]
 8001068:	f7ff ffc6 	bl	8000ff8 <_ZN10UART_servo9UART_SendEh>
	UART_Send(0x05);              //total data length
 800106c:	2105      	movs	r1, #5
 800106e:	68f8      	ldr	r0, [r7, #12]
 8001070:	f7ff ffc2 	bl	8000ff8 <_ZN10UART_servo9UART_SendEh>
	UART_Send((Position / 256) & 0x7F);  //Servo Pos_H
 8001074:	893b      	ldrh	r3, [r7, #8]
 8001076:	0a1b      	lsrs	r3, r3, #8
 8001078:	b29b      	uxth	r3, r3
 800107a:	b2db      	uxtb	r3, r3
 800107c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001080:	b2db      	uxtb	r3, r3
 8001082:	4619      	mov	r1, r3
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f7ff ffb7 	bl	8000ff8 <_ZN10UART_servo9UART_SendEh>
	UART_Send(Position % 256);           //Servo Pos_L
 800108a:	893b      	ldrh	r3, [r7, #8]
 800108c:	b2db      	uxtb	r3, r3
 800108e:	4619      	mov	r1, r3
 8001090:	68f8      	ldr	r0, [r7, #12]
 8001092:	f7ff ffb1 	bl	8000ff8 <_ZN10UART_servo9UART_SendEh>
	UART_Send((Time / 256) & 0x7F); //Servo Time_H
 8001096:	88fb      	ldrh	r3, [r7, #6]
 8001098:	0a1b      	lsrs	r3, r3, #8
 800109a:	b29b      	uxth	r3, r3
 800109c:	b2db      	uxtb	r3, r3
 800109e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	4619      	mov	r1, r3
 80010a6:	68f8      	ldr	r0, [r7, #12]
 80010a8:	f7ff ffa6 	bl	8000ff8 <_ZN10UART_servo9UART_SendEh>
	UART_Send(Time % 256);          //Servo Time_L
 80010ac:	88fb      	ldrh	r3, [r7, #6]
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	4619      	mov	r1, r3
 80010b2:	68f8      	ldr	r0, [r7, #12]
 80010b4:	f7ff ffa0 	bl	8000ff8 <_ZN10UART_servo9UART_SendEh>
	UART_Send(Checksum_Calc);     //data length (one servo with time and speed)
 80010b8:	4b05      	ldr	r3, [pc, #20]	@ (80010d0 <_ZN10UART_servo26UART_Send_SetMotorPositionEttt+0x9c>)
 80010ba:	881b      	ldrh	r3, [r3, #0]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	4619      	mov	r1, r3
 80010c0:	68f8      	ldr	r0, [r7, #12]
 80010c2:	f7ff ff99 	bl	8000ff8 <_ZN10UART_servo9UART_SendEh>
}
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	2000098c 	.word	0x2000098c

080010d4 <_ZN10UART_servo3runEv>:
void UART_servo::run(){//put in timer IT
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	UART_Send_SetMotorPosition(motorId,(uint16_t)(800+7*pos),reflectime);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	8819      	ldrh	r1, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	461a      	mov	r2, r3
 80010e8:	00d2      	lsls	r2, r2, #3
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	891b      	ldrh	r3, [r3, #8]
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ff9b 	bl	8001034 <_ZN10UART_servo26UART_Send_SetMotorPositionEttt>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <_ZN10UART_servo10update_posEi>:
void UART_servo::update_pos(int _pos){
 8001106:	b480      	push	{r7}
 8001108:	b083      	sub	sp, #12
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
 800110e:	6039      	str	r1, [r7, #0]
	pos = _pos;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	683a      	ldr	r2, [r7, #0]
 8001114:	605a      	str	r2, [r3, #4]
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <_ZN10UART_servoC1EttP20__UART_HandleTypeDef>:
public:
	void UART_Send(uint8_t u8_data);
	void UART_Send_SetMotorPosition(uint16_t motorId, uint16_t Position, uint16_t Time);
	void update_pos(int pos);
	void run();
    UART_servo(uint16_t id, uint16_t _reflect_time, UART_HandleTypeDef* _servo_uart)
 8001122:	b480      	push	{r7}
 8001124:	b085      	sub	sp, #20
 8001126:	af00      	add	r7, sp, #0
 8001128:	60f8      	str	r0, [r7, #12]
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	460b      	mov	r3, r1
 800112e:	817b      	strh	r3, [r7, #10]
 8001130:	4613      	mov	r3, r2
 8001132:	813b      	strh	r3, [r7, #8]
        : motorId(id), reflectime(_reflect_time), servo_uart(_servo_uart) {
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	897a      	ldrh	r2, [r7, #10]
 8001138:	801a      	strh	r2, [r3, #0]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	893a      	ldrh	r2, [r7, #8]
 800113e:	811a      	strh	r2, [r3, #8]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	60da      	str	r2, [r3, #12]
        // 初始化其他成員變數
        Position = 0;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2200      	movs	r2, #0
 800114a:	805a      	strh	r2, [r3, #2]
        pos = 0;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2200      	movs	r2, #0
 8001150:	605a      	str	r2, [r3, #4]
    }
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	4618      	mov	r0, r3
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <arm_reset>:

int arm_status = 1;
int all_status =0;
static uint32_t last_command_time = 0;

void arm_reset(void) {
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	// 手臂重置邏輯
	HAL_Init();
 8001164:	f002 f934 	bl	80033d0 <HAL_Init>
	// 啟動 Encoder 與 PWM
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001168:	213c      	movs	r1, #60	@ 0x3c
 800116a:	481c      	ldr	r0, [pc, #112]	@ (80011dc <arm_reset+0x7c>)
 800116c:	f004 f95a 	bl	8005424 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8001170:	2108      	movs	r1, #8
 8001172:	481b      	ldr	r0, [pc, #108]	@ (80011e0 <arm_reset+0x80>)
 8001174:	f003 ffe8 	bl	8005148 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8001178:	2100      	movs	r1, #0
 800117a:	481a      	ldr	r0, [pc, #104]	@ (80011e4 <arm_reset+0x84>)
 800117c:	f003 ffe4 	bl	8005148 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001180:	2201      	movs	r2, #1
 8001182:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001186:	4818      	ldr	r0, [pc, #96]	@ (80011e8 <arm_reset+0x88>)
 8001188:	f002 ffdc 	bl	8004144 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 800118c:	2201      	movs	r2, #1
 800118e:	2110      	movs	r1, #16
 8001190:	4816      	ldr	r0, [pc, #88]	@ (80011ec <arm_reset+0x8c>)
 8001192:	f002 ffd7 	bl	8004144 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001196:	2100      	movs	r1, #0
 8001198:	4811      	ldr	r0, [pc, #68]	@ (80011e0 <arm_reset+0x80>)
 800119a:	f003 ffd5 	bl	8005148 <HAL_TIM_PWM_Start>

	servo1.update_pos(pos1+70);
 800119e:	4b14      	ldr	r3, [pc, #80]	@ (80011f0 <arm_reset+0x90>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	3346      	adds	r3, #70	@ 0x46
 80011a4:	4619      	mov	r1, r3
 80011a6:	4813      	ldr	r0, [pc, #76]	@ (80011f4 <arm_reset+0x94>)
 80011a8:	f7ff ffad 	bl	8001106 <_ZN10UART_servo10update_posEi>
	servo2.update_pos(pos2+100);
 80011ac:	4b12      	ldr	r3, [pc, #72]	@ (80011f8 <arm_reset+0x98>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	3364      	adds	r3, #100	@ 0x64
 80011b2:	4619      	mov	r1, r3
 80011b4:	4811      	ldr	r0, [pc, #68]	@ (80011fc <arm_reset+0x9c>)
 80011b6:	f7ff ffa6 	bl	8001106 <_ZN10UART_servo10update_posEi>
	servo3.update_pos(gripper_close);
 80011ba:	4b11      	ldr	r3, [pc, #68]	@ (8001200 <arm_reset+0xa0>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4619      	mov	r1, r3
 80011c0:	4810      	ldr	r0, [pc, #64]	@ (8001204 <arm_reset+0xa4>)
 80011c2:	f7ff ffa0 	bl	8001106 <_ZN10UART_servo10update_posEi>

	servo1.run();
 80011c6:	480b      	ldr	r0, [pc, #44]	@ (80011f4 <arm_reset+0x94>)
 80011c8:	f7ff ff84 	bl	80010d4 <_ZN10UART_servo3runEv>
	servo2.run();
 80011cc:	480b      	ldr	r0, [pc, #44]	@ (80011fc <arm_reset+0x9c>)
 80011ce:	f7ff ff81 	bl	80010d4 <_ZN10UART_servo3runEv>
	servo3.run();
 80011d2:	480c      	ldr	r0, [pc, #48]	@ (8001204 <arm_reset+0xa4>)
 80011d4:	f7ff ff7e 	bl	80010d4 <_ZN10UART_servo3runEv>
}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	200052b4 	.word	0x200052b4
 80011e0:	20005344 	.word	0x20005344
 80011e4:	2000538c 	.word	0x2000538c
 80011e8:	40020000 	.word	0x40020000
 80011ec:	40020800 	.word	0x40020800
 80011f0:	20000000 	.word	0x20000000
 80011f4:	20000990 	.word	0x20000990
 80011f8:	20000004 	.word	0x20000004
 80011fc:	200009a0 	.word	0x200009a0
 8001200:	2000000c 	.word	0x2000000c
 8001204:	200009b0 	.word	0x200009b0

08001208 <arm_test>:
		servo3.run();
		last_command_time = current_time;
	}
}

void arm_test(void) {
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
//	cascade_monitor(cascade_height);
//	if(cascade_complete()){
		servo1.update_pos(pos1+a);
 800120c:	4b16      	ldr	r3, [pc, #88]	@ (8001268 <arm_test+0x60>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b16      	ldr	r3, [pc, #88]	@ (800126c <arm_test+0x64>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4413      	add	r3, r2
 8001216:	4619      	mov	r1, r3
 8001218:	4815      	ldr	r0, [pc, #84]	@ (8001270 <arm_test+0x68>)
 800121a:	f7ff ff74 	bl	8001106 <_ZN10UART_servo10update_posEi>
		servo2.update_pos(pos2+b);
 800121e:	4b15      	ldr	r3, [pc, #84]	@ (8001274 <arm_test+0x6c>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	4b15      	ldr	r3, [pc, #84]	@ (8001278 <arm_test+0x70>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4413      	add	r3, r2
 8001228:	4619      	mov	r1, r3
 800122a:	4814      	ldr	r0, [pc, #80]	@ (800127c <arm_test+0x74>)
 800122c:	f7ff ff6b 	bl	8001106 <_ZN10UART_servo10update_posEi>
		servo3.update_pos(gripper_open);
 8001230:	4b13      	ldr	r3, [pc, #76]	@ (8001280 <arm_test+0x78>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4619      	mov	r1, r3
 8001236:	4813      	ldr	r0, [pc, #76]	@ (8001284 <arm_test+0x7c>)
 8001238:	f7ff ff65 	bl	8001106 <_ZN10UART_servo10update_posEi>
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 600+10*c);
 800123c:	4b12      	ldr	r3, [pc, #72]	@ (8001288 <arm_test+0x80>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4613      	mov	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	f503 7216 	add.w	r2, r3, #600	@ 0x258
 800124c:	4b0f      	ldr	r3, [pc, #60]	@ (800128c <arm_test+0x84>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	635a      	str	r2, [r3, #52]	@ 0x34
		servo1.run();
 8001252:	4807      	ldr	r0, [pc, #28]	@ (8001270 <arm_test+0x68>)
 8001254:	f7ff ff3e 	bl	80010d4 <_ZN10UART_servo3runEv>
		servo2.run();
 8001258:	4808      	ldr	r0, [pc, #32]	@ (800127c <arm_test+0x74>)
 800125a:	f7ff ff3b 	bl	80010d4 <_ZN10UART_servo3runEv>
		servo3.run();
 800125e:	4809      	ldr	r0, [pc, #36]	@ (8001284 <arm_test+0x7c>)
 8001260:	f7ff ff38 	bl	80010d4 <_ZN10UART_servo3runEv>
//	else{
//		servo1.run();
//		servo2.run();
//		servo3.run();
//	}
}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000000 	.word	0x20000000
 800126c:	200009c0 	.word	0x200009c0
 8001270:	20000990 	.word	0x20000990
 8001274:	20000004 	.word	0x20000004
 8001278:	200009c4 	.word	0x200009c4
 800127c:	200009a0 	.word	0x200009a0
 8001280:	20000008 	.word	0x20000008
 8001284:	200009b0 	.word	0x200009b0
 8001288:	200009c8 	.word	0x200009c8
 800128c:	20005344 	.word	0x20005344

08001290 <_Z41__static_initialization_and_destruction_0v>:
	}
	else
	{
		return 0;
	}
}
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
UART_servo servo1(1, 2000, &huart3);
 8001294:	4b0b      	ldr	r3, [pc, #44]	@ (80012c4 <_Z41__static_initialization_and_destruction_0v+0x34>)
 8001296:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800129a:	2101      	movs	r1, #1
 800129c:	480a      	ldr	r0, [pc, #40]	@ (80012c8 <_Z41__static_initialization_and_destruction_0v+0x38>)
 800129e:	f7ff ff40 	bl	8001122 <_ZN10UART_servoC1EttP20__UART_HandleTypeDef>
UART_servo servo2(3, 2000, &huart3);
 80012a2:	4b08      	ldr	r3, [pc, #32]	@ (80012c4 <_Z41__static_initialization_and_destruction_0v+0x34>)
 80012a4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80012a8:	2103      	movs	r1, #3
 80012aa:	4808      	ldr	r0, [pc, #32]	@ (80012cc <_Z41__static_initialization_and_destruction_0v+0x3c>)
 80012ac:	f7ff ff39 	bl	8001122 <_ZN10UART_servoC1EttP20__UART_HandleTypeDef>
UART_servo servo3(4, 2000, &huart3);
 80012b0:	4b04      	ldr	r3, [pc, #16]	@ (80012c4 <_Z41__static_initialization_and_destruction_0v+0x34>)
 80012b2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80012b6:	2104      	movs	r1, #4
 80012b8:	4805      	ldr	r0, [pc, #20]	@ (80012d0 <_Z41__static_initialization_and_destruction_0v+0x40>)
 80012ba:	f7ff ff32 	bl	8001122 <_ZN10UART_servoC1EttP20__UART_HandleTypeDef>
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	2000541c 	.word	0x2000541c
 80012c8:	20000990 	.word	0x20000990
 80012cc:	200009a0 	.word	0x200009a0
 80012d0:	200009b0 	.word	0x200009b0

080012d4 <_GLOBAL__sub_I_servo1>:
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	f7ff ffda 	bl	8001290 <_Z41__static_initialization_and_destruction_0v>
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftS3_tddd>:
#include "math.h"
#include "motor_config.h"

class MotorController{
public:
    MotorController(TIM_HandleTypeDef* enc, TIM_HandleTypeDef* pwm, uint32_t channel, GPIO_TypeDef* AGPIO, uint16_t APin, GPIO_TypeDef* BGPIO, uint16_t BPin, double kp, double ki, double kd):
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	@ 0x28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6278      	str	r0, [r7, #36]	@ 0x24
 80012e8:	6239      	str	r1, [r7, #32]
 80012ea:	61fa      	str	r2, [r7, #28]
 80012ec:	61bb      	str	r3, [r7, #24]
 80012ee:	ed87 0b04 	vstr	d0, [r7, #16]
 80012f2:	ed87 1b02 	vstr	d1, [r7, #8]
 80012f6:	ed87 2b00 	vstr	d2, [r7]
        _enc(enc), _pwm(pwm), _channel(channel), _AGPIO(AGPIO), _APin(APin), _BGPIO(BGPIO), _BPin(BPin), _kp(kp), _ki(ki), _kd(kd){}
 80012fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012fc:	6a3a      	ldr	r2, [r7, #32]
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001302:	69fa      	ldr	r2, [r7, #28]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001314:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001316:	821a      	strh	r2, [r3, #16]
 8001318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800131c:	615a      	str	r2, [r3, #20]
 800131e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001320:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8001322:	831a      	strh	r2, [r3, #24]
 8001324:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001328:	f7ff fc30 	bl	8000b8c <__aeabi_d2f>
 800132c:	4602      	mov	r2, r0
 800132e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001330:	61da      	str	r2, [r3, #28]
 8001332:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001336:	f7ff fc29 	bl	8000b8c <__aeabi_d2f>
 800133a:	4602      	mov	r2, r0
 800133c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800133e:	621a      	str	r2, [r3, #32]
 8001340:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001344:	f7ff fc22 	bl	8000b8c <__aeabi_d2f>
 8001348:	4602      	mov	r2, r0
 800134a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800134c:	625a      	str	r2, [r3, #36]	@ 0x24
 800134e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001350:	2200      	movs	r2, #0
 8001352:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800135c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800135e:	f04f 0200 	mov.w	r2, #0
 8001362:	631a      	str	r2, [r3, #48]	@ 0x30
 8001364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001366:	f04f 0200 	mov.w	r2, #0
 800136a:	635a      	str	r2, [r3, #52]	@ 0x34
 800136c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800136e:	4a12      	ldr	r2, [pc, #72]	@ (80013b8 <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftS3_tddd+0xd8>)
 8001370:	639a      	str	r2, [r3, #56]	@ 0x38
 8001372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001374:	2200      	movs	r2, #0
 8001376:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800137a:	2200      	movs	r2, #0
 800137c:	641a      	str	r2, [r3, #64]	@ 0x40
 800137e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001380:	4a0e      	ldr	r2, [pc, #56]	@ (80013bc <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftS3_tddd+0xdc>)
 8001382:	645a      	str	r2, [r3, #68]	@ 0x44
 8001384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001386:	2200      	movs	r2, #0
 8001388:	649a      	str	r2, [r3, #72]	@ 0x48
 800138a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800138c:	2200      	movs	r2, #0
 800138e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001392:	4a0a      	ldr	r2, [pc, #40]	@ (80013bc <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftS3_tddd+0xdc>)
 8001394:	651a      	str	r2, [r3, #80]	@ 0x50
 8001396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001398:	f04f 0200 	mov.w	r2, #0
 800139c:	659a      	str	r2, [r3, #88]	@ 0x58
 800139e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80013a4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80013a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a8:	2296      	movs	r2, #150	@ 0x96
 80013aa:	661a      	str	r2, [r3, #96]	@ 0x60
 80013ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ae:	4618      	mov	r0, r3
 80013b0:	3728      	adds	r7, #40	@ 0x28
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	42c80000 	.word	0x42c80000
 80013bc:	437a0000 	.word	0x437a0000

080013c0 <motor_init>:
float VgoalFL = 0.0;
float VgoalBR = 0.0;
float VgoalBL = 0.0;


void motor_init(){
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
	// Motor_FR.init(1,-1);
	// Motor_FL.init(1,1);
	// Motor_BR.init(1,1);
	// Motor_BL.init(1,1);
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
	...

080013d0 <_Z41__static_initialization_and_destruction_0v>:
	return Motor_cas.goal_reached();
}

void cascade_monitor(float target_height){
	Motor_cas.setgoal(target_height);
}
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af04      	add	r7, sp, #16
MotorController Motor_cas(&htim1, &htim12, TIM_CHANNEL_1, GPIOB, GPIO_PIN_13, GPIOB, GPIO_PIN_12, 0.005, 0, 0);
 80013d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013da:	9303      	str	r3, [sp, #12]
 80013dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001418 <_Z41__static_initialization_and_destruction_0v+0x48>)
 80013de:	9302      	str	r3, [sp, #8]
 80013e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013e4:	9301      	str	r3, [sp, #4]
 80013e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <_Z41__static_initialization_and_destruction_0v+0x48>)
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	ed9f 2b07 	vldr	d2, [pc, #28]	@ 8001408 <_Z41__static_initialization_and_destruction_0v+0x38>
 80013ee:	ed9f 1b06 	vldr	d1, [pc, #24]	@ 8001408 <_Z41__static_initialization_and_destruction_0v+0x38>
 80013f2:	ed9f 0b07 	vldr	d0, [pc, #28]	@ 8001410 <_Z41__static_initialization_and_destruction_0v+0x40>
 80013f6:	2300      	movs	r3, #0
 80013f8:	4a08      	ldr	r2, [pc, #32]	@ (800141c <_Z41__static_initialization_and_destruction_0v+0x4c>)
 80013fa:	4909      	ldr	r1, [pc, #36]	@ (8001420 <_Z41__static_initialization_and_destruction_0v+0x50>)
 80013fc:	4809      	ldr	r0, [pc, #36]	@ (8001424 <_Z41__static_initialization_and_destruction_0v+0x54>)
 80013fe:	f7ff ff6f 	bl	80012e0 <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftS3_tddd>
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
	...
 8001410:	47ae147b 	.word	0x47ae147b
 8001414:	3f747ae1 	.word	0x3f747ae1
 8001418:	40020400 	.word	0x40020400
 800141c:	2000538c 	.word	0x2000538c
 8001420:	200052b4 	.word	0x200052b4
 8001424:	200009cc 	.word	0x200009cc

08001428 <_GLOBAL__sub_I_Motor_cas>:
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
 800142c:	f7ff ffd0 	bl	80013d0 <_Z41__static_initialization_and_destruction_0v>
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <uros_init>:
#define MAX_PING_FAIL_COUNT 5


extern UART_HandleTypeDef USARTx;

void uros_init(void) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af02      	add	r7, sp, #8
  // Initialize micro-ROS
  rmw_uros_set_custom_transport(
 800143a:	4b14      	ldr	r3, [pc, #80]	@ (800148c <uros_init+0x58>)
 800143c:	9301      	str	r3, [sp, #4]
 800143e:	4b14      	ldr	r3, [pc, #80]	@ (8001490 <uros_init+0x5c>)
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	4b14      	ldr	r3, [pc, #80]	@ (8001494 <uros_init+0x60>)
 8001444:	4a14      	ldr	r2, [pc, #80]	@ (8001498 <uros_init+0x64>)
 8001446:	4915      	ldr	r1, [pc, #84]	@ (800149c <uros_init+0x68>)
 8001448:	2001      	movs	r0, #1
 800144a:	f00d fa33 	bl	800e8b4 <rmw_uros_set_custom_transport>
    cubemx_transport_open,
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);
  
  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	4618      	mov	r0, r3
 8001452:	f00c fe47 	bl	800e0e4 <rcutils_get_zero_initialized_allocator>

  freeRTOS_allocator.allocate = microros_allocate;
 8001456:	4b12      	ldr	r3, [pc, #72]	@ (80014a0 <uros_init+0x6c>)
 8001458:	607b      	str	r3, [r7, #4]
  freeRTOS_allocator.deallocate = microros_deallocate;
 800145a:	4b12      	ldr	r3, [pc, #72]	@ (80014a4 <uros_init+0x70>)
 800145c:	60bb      	str	r3, [r7, #8]
  freeRTOS_allocator.reallocate = microros_reallocate;
 800145e:	4b12      	ldr	r3, [pc, #72]	@ (80014a8 <uros_init+0x74>)
 8001460:	60fb      	str	r3, [r7, #12]
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001462:	4b12      	ldr	r3, [pc, #72]	@ (80014ac <uros_init+0x78>)
 8001464:	613b      	str	r3, [r7, #16]

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	4618      	mov	r0, r3
 800146a:	f00c fe49 	bl	800e100 <rcutils_set_default_allocator>
 800146e:	4603      	mov	r3, r0
 8001470:	f083 0301 	eor.w	r3, r3, #1
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <uros_init+0x4e>
  printf("Error on default allocators (line %d)\n", __LINE__); 
 800147a:	213f      	movs	r1, #63	@ 0x3f
 800147c:	480c      	ldr	r0, [pc, #48]	@ (80014b0 <uros_init+0x7c>)
 800147e:	f018 f843 	bl	8019508 <iprintf>
  }
}
 8001482:	bf00      	nop
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	08002121 	.word	0x08002121
 8001490:	080020b9 	.word	0x080020b9
 8001494:	08002099 	.word	0x08002099
 8001498:	0800206d 	.word	0x0800206d
 800149c:	200053d4 	.word	0x200053d4
 80014a0:	080027e9 	.word	0x080027e9
 80014a4:	0800282d 	.word	0x0800282d
 80014a8:	08002865 	.word	0x08002865
 80014ac:	080028d1 	.word	0x080028d1
 80014b0:	0801a640 	.word	0x0801a640

080014b4 <uros_agent_status_check>:

void uros_agent_status_check(void) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  switch (status) {
 80014b8:	4b11      	ldr	r3, [pc, #68]	@ (8001500 <uros_agent_status_check+0x4c>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b04      	cmp	r3, #4
 80014be:	d81c      	bhi.n	80014fa <uros_agent_status_check+0x46>
 80014c0:	a201      	add	r2, pc, #4	@ (adr r2, 80014c8 <uros_agent_status_check+0x14>)
 80014c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c6:	bf00      	nop
 80014c8:	080014dd 	.word	0x080014dd
 80014cc:	080014e3 	.word	0x080014e3
 80014d0:	080014e9 	.word	0x080014e9
 80014d4:	080014ef 	.word	0x080014ef
 80014d8:	080014f5 	.word	0x080014f5
    case AGENT_WAITING:
      handle_state_agent_waiting();
 80014dc:	f000 f812 	bl	8001504 <handle_state_agent_waiting>
      break;
 80014e0:	e00c      	b.n	80014fc <uros_agent_status_check+0x48>
    case AGENT_AVAILABLE:
      handle_state_agent_available();
 80014e2:	f000 f821 	bl	8001528 <handle_state_agent_available>
      break;
 80014e6:	e009      	b.n	80014fc <uros_agent_status_check+0x48>
    case AGENT_CONNECTED:
      handle_state_agent_connected();
 80014e8:	f000 f82a 	bl	8001540 <handle_state_agent_connected>
      break;
 80014ec:	e006      	b.n	80014fc <uros_agent_status_check+0x48>
    case AGENT_TRYING:
      handle_state_agent_trying();
 80014ee:	f000 f859 	bl	80015a4 <handle_state_agent_trying>
      break;
 80014f2:	e003      	b.n	80014fc <uros_agent_status_check+0x48>
    case AGENT_DISCONNECTED:
      handle_state_agent_disconnected();
 80014f4:	f000 f880 	bl	80015f8 <handle_state_agent_disconnected>
      break;
 80014f8:	e000      	b.n	80014fc <uros_agent_status_check+0x48>
    default:
      break;
 80014fa:	bf00      	nop
  }
}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000e38 	.word	0x20000e38

08001504 <handle_state_agent_waiting>:

void handle_state_agent_waiting(void) {
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  status = (rmw_uros_ping_agent(100, 10) == RMW_RET_OK) ? AGENT_AVAILABLE : AGENT_WAITING;
 8001508:	210a      	movs	r1, #10
 800150a:	2064      	movs	r0, #100	@ 0x64
 800150c:	f00d f9e8 	bl	800e8e0 <rmw_uros_ping_agent>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d101      	bne.n	800151a <handle_state_agent_waiting+0x16>
 8001516:	2201      	movs	r2, #1
 8001518:	e000      	b.n	800151c <handle_state_agent_waiting+0x18>
 800151a:	2200      	movs	r2, #0
 800151c:	4b01      	ldr	r3, [pc, #4]	@ (8001524 <handle_state_agent_waiting+0x20>)
 800151e:	701a      	strb	r2, [r3, #0]
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000e38 	.word	0x20000e38

08001528 <handle_state_agent_available>:
void handle_state_agent_available(void) {
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  uros_create_entities();
 800152c:	f000 f870 	bl	8001610 <uros_create_entities>
  status = AGENT_CONNECTED;
 8001530:	4b02      	ldr	r3, [pc, #8]	@ (800153c <handle_state_agent_available+0x14>)
 8001532:	2202      	movs	r2, #2
 8001534:	701a      	strb	r2, [r3, #0]
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000e38 	.word	0x20000e38

08001540 <handle_state_agent_connected>:
void handle_state_agent_connected(void) {
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  if(rmw_uros_ping_agent(20, 5) == RMW_RET_OK){
 8001544:	2105      	movs	r1, #5
 8001546:	2014      	movs	r0, #20
 8001548:	f00d f9ca 	bl	800e8e0 <rmw_uros_ping_agent>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	bf0c      	ite	eq
 8001552:	2301      	moveq	r3, #1
 8001554:	2300      	movne	r3, #0
 8001556:	b2db      	uxtb	r3, r3
 8001558:	2b00      	cmp	r3, #0
 800155a:	d009      	beq.n	8001570 <handle_state_agent_connected+0x30>
    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(50));
 800155c:	a30f      	add	r3, pc, #60	@ (adr r3, 800159c <handle_state_agent_connected+0x5c>)
 800155e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001562:	480b      	ldr	r0, [pc, #44]	@ (8001590 <handle_state_agent_connected+0x50>)
 8001564:	f00c fc4a 	bl	800ddfc <rclc_executor_spin_some>
    ping_fail_count = 0; // Reset ping fail count
 8001568:	4b0a      	ldr	r3, [pc, #40]	@ (8001594 <handle_state_agent_connected+0x54>)
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
    ping_fail_count++;
    if(ping_fail_count >= MAX_PING_FAIL_COUNT){
      status = AGENT_TRYING;
    }
  }
}
 800156e:	e00b      	b.n	8001588 <handle_state_agent_connected+0x48>
    ping_fail_count++;
 8001570:	4b08      	ldr	r3, [pc, #32]	@ (8001594 <handle_state_agent_connected+0x54>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	3301      	adds	r3, #1
 8001576:	4a07      	ldr	r2, [pc, #28]	@ (8001594 <handle_state_agent_connected+0x54>)
 8001578:	6013      	str	r3, [r2, #0]
    if(ping_fail_count >= MAX_PING_FAIL_COUNT){
 800157a:	4b06      	ldr	r3, [pc, #24]	@ (8001594 <handle_state_agent_connected+0x54>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2b04      	cmp	r3, #4
 8001580:	dd02      	ble.n	8001588 <handle_state_agent_connected+0x48>
      status = AGENT_TRYING;
 8001582:	4b05      	ldr	r3, [pc, #20]	@ (8001598 <handle_state_agent_connected+0x58>)
 8001584:	2203      	movs	r2, #3
 8001586:	701a      	strb	r2, [r3, #0]
}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}
 800158c:	f3af 8000 	nop.w
 8001590:	20000db0 	.word	0x20000db0
 8001594:	20000e3c 	.word	0x20000e3c
 8001598:	20000e38 	.word	0x20000e38
 800159c:	02faf080 	.word	0x02faf080
 80015a0:	00000000 	.word	0x00000000

080015a4 <handle_state_agent_trying>:
void handle_state_agent_trying(void) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  if(rmw_uros_ping_agent(50, 10) == RMW_RET_OK){
 80015a8:	210a      	movs	r1, #10
 80015aa:	2032      	movs	r0, #50	@ 0x32
 80015ac:	f00d f998 	bl	800e8e0 <rmw_uros_ping_agent>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	bf0c      	ite	eq
 80015b6:	2301      	moveq	r3, #1
 80015b8:	2300      	movne	r3, #0
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d006      	beq.n	80015ce <handle_state_agent_trying+0x2a>
    status = AGENT_CONNECTED;
 80015c0:	4b0b      	ldr	r3, [pc, #44]	@ (80015f0 <handle_state_agent_trying+0x4c>)
 80015c2:	2202      	movs	r2, #2
 80015c4:	701a      	strb	r2, [r3, #0]
    ping_fail_count = 0; // Reset ping fail count
 80015c6:	4b0b      	ldr	r3, [pc, #44]	@ (80015f4 <handle_state_agent_trying+0x50>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
    if(ping_fail_count >= MAX_PING_FAIL_COUNT){
      status = AGENT_DISCONNECTED;
      ping_fail_count = 0;
    }
  }
}
 80015cc:	e00e      	b.n	80015ec <handle_state_agent_trying+0x48>
    ping_fail_count++;
 80015ce:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <handle_state_agent_trying+0x50>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	3301      	adds	r3, #1
 80015d4:	4a07      	ldr	r2, [pc, #28]	@ (80015f4 <handle_state_agent_trying+0x50>)
 80015d6:	6013      	str	r3, [r2, #0]
    if(ping_fail_count >= MAX_PING_FAIL_COUNT){
 80015d8:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <handle_state_agent_trying+0x50>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b04      	cmp	r3, #4
 80015de:	dd05      	ble.n	80015ec <handle_state_agent_trying+0x48>
      status = AGENT_DISCONNECTED;
 80015e0:	4b03      	ldr	r3, [pc, #12]	@ (80015f0 <handle_state_agent_trying+0x4c>)
 80015e2:	2204      	movs	r2, #4
 80015e4:	701a      	strb	r2, [r3, #0]
      ping_fail_count = 0;
 80015e6:	4b03      	ldr	r3, [pc, #12]	@ (80015f4 <handle_state_agent_trying+0x50>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000e38 	.word	0x20000e38
 80015f4:	20000e3c 	.word	0x20000e3c

080015f8 <handle_state_agent_disconnected>:
void handle_state_agent_disconnected(void) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  uros_destroy_entities();
 80015fc:	f000 f93e 	bl	800187c <uros_destroy_entities>
  status = AGENT_WAITING;
 8001600:	4b02      	ldr	r3, [pc, #8]	@ (800160c <handle_state_agent_disconnected+0x14>)
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000e38 	.word	0x20000e38

08001610 <uros_create_entities>:


void uros_create_entities(void) {
 8001610:	b5b0      	push	{r4, r5, r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af02      	add	r7, sp, #8
  // 重置积分变量
  last_cmd_vel_time = 0;
 8001616:	4b7e      	ldr	r3, [pc, #504]	@ (8001810 <uros_create_entities+0x200>)
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
  last_cmd_arm_time = 0;
 800161c:	4b7d      	ldr	r3, [pc, #500]	@ (8001814 <uros_create_entities+0x204>)
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
  current_yaw = 0.0f;
 8001622:	4b7d      	ldr	r3, [pc, #500]	@ (8001818 <uros_create_entities+0x208>)
 8001624:	f04f 0200 	mov.w	r2, #0
 8001628:	601a      	str	r2, [r3, #0]

  allocator = rcl_get_default_allocator();
 800162a:	4c7c      	ldr	r4, [pc, #496]	@ (800181c <uros_create_entities+0x20c>)
 800162c:	463b      	mov	r3, r7
 800162e:	4618      	mov	r0, r3
 8001630:	f00c fd84 	bl	800e13c <rcutils_get_default_allocator>
 8001634:	4625      	mov	r5, r4
 8001636:	463c      	mov	r4, r7
 8001638:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800163a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800163c:	6823      	ldr	r3, [r4, #0]
 800163e:	602b      	str	r3, [r5, #0]

  init_options = rcl_get_zero_initialized_init_options();
 8001640:	f00a fd74 	bl	800c12c <rcl_get_zero_initialized_init_options>
 8001644:	4603      	mov	r3, r0
 8001646:	4a76      	ldr	r2, [pc, #472]	@ (8001820 <uros_create_entities+0x210>)
 8001648:	6013      	str	r3, [r2, #0]
  rcl_init_options_init(&init_options, allocator);
 800164a:	4b74      	ldr	r3, [pc, #464]	@ (800181c <uros_create_entities+0x20c>)
 800164c:	466c      	mov	r4, sp
 800164e:	f103 020c 	add.w	r2, r3, #12
 8001652:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001656:	e884 0003 	stmia.w	r4, {r0, r1}
 800165a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800165c:	4870      	ldr	r0, [pc, #448]	@ (8001820 <uros_create_entities+0x210>)
 800165e:	f00a fd67 	bl	800c130 <rcl_init_options_init>
  rcl_init_options_set_domain_id(&init_options, DOMAIN_ID);
 8001662:	2100      	movs	r1, #0
 8001664:	486e      	ldr	r0, [pc, #440]	@ (8001820 <uros_create_entities+0x210>)
 8001666:	f00a fe5f 	bl	800c328 <rcl_init_options_set_domain_id>

  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator); // Initialize support structure
 800166a:	4b6c      	ldr	r3, [pc, #432]	@ (800181c <uros_create_entities+0x20c>)
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	4b6c      	ldr	r3, [pc, #432]	@ (8001820 <uros_create_entities+0x210>)
 8001670:	2200      	movs	r2, #0
 8001672:	2100      	movs	r1, #0
 8001674:	486b      	ldr	r0, [pc, #428]	@ (8001824 <uros_create_entities+0x214>)
 8001676:	f00c fbfb 	bl	800de70 <rclc_support_init_with_options>

  rcl_init_options_fini(&init_options);
 800167a:	4869      	ldr	r0, [pc, #420]	@ (8001820 <uros_create_entities+0x210>)
 800167c:	f00a fdbe 	bl	800c1fc <rcl_init_options_fini>
  
  rclc_node_init_default(&node, NODE_NAME, "", &support);                       // Initialize node
 8001680:	4b68      	ldr	r3, [pc, #416]	@ (8001824 <uros_create_entities+0x214>)
 8001682:	4a69      	ldr	r2, [pc, #420]	@ (8001828 <uros_create_entities+0x218>)
 8001684:	4969      	ldr	r1, [pc, #420]	@ (800182c <uros_create_entities+0x21c>)
 8001686:	486a      	ldr	r0, [pc, #424]	@ (8001830 <uros_create_entities+0x220>)
 8001688:	f00c fc50 	bl	800df2c <rclc_node_init_default>

  rclc_publisher_init_default(                                                  // Initialize publisher for pose
 800168c:	f00a fbc6 	bl	800be1c <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>
 8001690:	4602      	mov	r2, r0
 8001692:	4b68      	ldr	r3, [pc, #416]	@ (8001834 <uros_create_entities+0x224>)
 8001694:	4966      	ldr	r1, [pc, #408]	@ (8001830 <uros_create_entities+0x220>)
 8001696:	4868      	ldr	r0, [pc, #416]	@ (8001838 <uros_create_entities+0x228>)
 8001698:	f00c fc84 	bl	800dfa4 <rclc_publisher_init_default>
    &pose_pub,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(nav_msgs, msg, Odometry),
    "robot/pose");
  pose_msg.pose.pose.position.x = 83.0;
 800169c:	4967      	ldr	r1, [pc, #412]	@ (800183c <uros_create_entities+0x22c>)
 800169e:	a358      	add	r3, pc, #352	@ (adr r3, 8001800 <uros_create_entities+0x1f0>)
 80016a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a4:	e9c1 2308 	strd	r2, r3, [r1, #32]
  pose_msg.pose.pose.position.y = 616.0;
 80016a8:	4964      	ldr	r1, [pc, #400]	@ (800183c <uros_create_entities+0x22c>)
 80016aa:	f04f 0200 	mov.w	r2, #0
 80016ae:	4b64      	ldr	r3, [pc, #400]	@ (8001840 <uros_create_entities+0x230>)
 80016b0:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
  pose_msg.pose.pose.position.z = 0.0;
 80016b4:	4961      	ldr	r1, [pc, #388]	@ (800183c <uros_create_entities+0x22c>)
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	f04f 0300 	mov.w	r3, #0
 80016be:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
  pose_msg.pose.pose.orientation.x = 0.0;
 80016c2:	495e      	ldr	r1, [pc, #376]	@ (800183c <uros_create_entities+0x22c>)
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	f04f 0300 	mov.w	r3, #0
 80016cc:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
  pose_msg.pose.pose.orientation.y = 0.0;
 80016d0:	495a      	ldr	r1, [pc, #360]	@ (800183c <uros_create_entities+0x22c>)
 80016d2:	f04f 0200 	mov.w	r2, #0
 80016d6:	f04f 0300 	mov.w	r3, #0
 80016da:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
  pose_msg.pose.pose.orientation.z = 0.0;
 80016de:	4957      	ldr	r1, [pc, #348]	@ (800183c <uros_create_entities+0x22c>)
 80016e0:	f04f 0200 	mov.w	r2, #0
 80016e4:	f04f 0300 	mov.w	r3, #0
 80016e8:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
  pose_msg.pose.pose.orientation.w = 0.0;
 80016ec:	4953      	ldr	r1, [pc, #332]	@ (800183c <uros_create_entities+0x22c>)
 80016ee:	f04f 0200 	mov.w	r2, #0
 80016f2:	f04f 0300 	mov.w	r3, #0
 80016f6:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50

  rclc_publisher_init_default(                                                  // Initialize publisher for pose
 80016fa:	f00e fc9b 	bl	8010034 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 80016fe:	4602      	mov	r2, r0
 8001700:	4b50      	ldr	r3, [pc, #320]	@ (8001844 <uros_create_entities+0x234>)
 8001702:	494b      	ldr	r1, [pc, #300]	@ (8001830 <uros_create_entities+0x220>)
 8001704:	4850      	ldr	r0, [pc, #320]	@ (8001848 <uros_create_entities+0x238>)
 8001706:	f00c fc4d 	bl	800dfa4 <rclc_publisher_init_default>
    &arm_pub,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
    "robot/arm_status");
  arm_msg.data = -1;
 800170a:	4b50      	ldr	r3, [pc, #320]	@ (800184c <uros_create_entities+0x23c>)
 800170c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001710:	601a      	str	r2, [r3, #0]

  rmw_uros_set_publisher_session_timeout(                                       // Set session timeout for publisher
 8001712:	4849      	ldr	r0, [pc, #292]	@ (8001838 <uros_create_entities+0x228>)
 8001714:	f00b f900 	bl	800c918 <rcl_publisher_get_rmw_handle>
 8001718:	4603      	mov	r3, r0
 800171a:	210a      	movs	r1, #10
 800171c:	4618      	mov	r0, r3
 800171e:	f00e f8d1 	bl	800f8c4 <rmw_uros_set_publisher_session_timeout>
    rcl_publisher_get_rmw_handle(&pose_pub),
    10);

  rmw_uros_set_publisher_session_timeout(                                       // Set session timeout for publisher
 8001722:	4849      	ldr	r0, [pc, #292]	@ (8001848 <uros_create_entities+0x238>)
 8001724:	f00b f8f8 	bl	800c918 <rcl_publisher_get_rmw_handle>
 8001728:	4603      	mov	r3, r0
 800172a:	210a      	movs	r1, #10
 800172c:	4618      	mov	r0, r3
 800172e:	f00e f8c9 	bl	800f8c4 <rmw_uros_set_publisher_session_timeout>
    rcl_publisher_get_rmw_handle(&arm_pub),
    10);

  rclc_subscription_init_default(                                               // Initialize subscriber for command velocity
 8001732:	f008 fea9 	bl	800a488 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8001736:	4602      	mov	r2, r0
 8001738:	4b45      	ldr	r3, [pc, #276]	@ (8001850 <uros_create_entities+0x240>)
 800173a:	493d      	ldr	r1, [pc, #244]	@ (8001830 <uros_create_entities+0x220>)
 800173c:	4845      	ldr	r0, [pc, #276]	@ (8001854 <uros_create_entities+0x244>)
 800173e:	f00c fc65 	bl	800e00c <rclc_subscription_init_default>
    &cmd_vel_sub,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist),
    "robot/cmd_vel");
  cmd_vel_msg.linear.x = 0.0;
 8001742:	4945      	ldr	r1, [pc, #276]	@ (8001858 <uros_create_entities+0x248>)
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	f04f 0300 	mov.w	r3, #0
 800174c:	e9c1 2300 	strd	r2, r3, [r1]
  cmd_vel_msg.linear.y = 0.0;
 8001750:	4941      	ldr	r1, [pc, #260]	@ (8001858 <uros_create_entities+0x248>)
 8001752:	f04f 0200 	mov.w	r2, #0
 8001756:	f04f 0300 	mov.w	r3, #0
 800175a:	e9c1 2302 	strd	r2, r3, [r1, #8]
  cmd_vel_msg.linear.z = 0.0;
 800175e:	493e      	ldr	r1, [pc, #248]	@ (8001858 <uros_create_entities+0x248>)
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	f04f 0300 	mov.w	r3, #0
 8001768:	e9c1 2304 	strd	r2, r3, [r1, #16]
  cmd_vel_msg.angular.x = 0.0;
 800176c:	493a      	ldr	r1, [pc, #232]	@ (8001858 <uros_create_entities+0x248>)
 800176e:	f04f 0200 	mov.w	r2, #0
 8001772:	f04f 0300 	mov.w	r3, #0
 8001776:	e9c1 2306 	strd	r2, r3, [r1, #24]
  cmd_vel_msg.angular.y = 0.0;
 800177a:	4937      	ldr	r1, [pc, #220]	@ (8001858 <uros_create_entities+0x248>)
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	f04f 0300 	mov.w	r3, #0
 8001784:	e9c1 2308 	strd	r2, r3, [r1, #32]
  cmd_vel_msg.angular.z = 0.0;
 8001788:	4933      	ldr	r1, [pc, #204]	@ (8001858 <uros_create_entities+0x248>)
 800178a:	f04f 0200 	mov.w	r2, #0
 800178e:	f04f 0300 	mov.w	r3, #0
 8001792:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

  rclc_subscription_init_default(                                               // Initialize subscriber for arm command
 8001796:	f00e fc4d 	bl	8010034 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 800179a:	4602      	mov	r2, r0
 800179c:	4b2f      	ldr	r3, [pc, #188]	@ (800185c <uros_create_entities+0x24c>)
 800179e:	4924      	ldr	r1, [pc, #144]	@ (8001830 <uros_create_entities+0x220>)
 80017a0:	482f      	ldr	r0, [pc, #188]	@ (8001860 <uros_create_entities+0x250>)
 80017a2:	f00c fc33 	bl	800e00c <rclc_subscription_init_default>
    &cmd_arm_sub,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
    "robot/cmd_arm");
  cmd_arm_msg.data = -1;
 80017a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001864 <uros_create_entities+0x254>)
 80017a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80017ac:	601a      	str	r2, [r3, #0]


  rclc_timer_init_default(&pose_pub_timer, &support, RCL_MS_TO_NS(50), pose_pub_timer_cb);
 80017ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001868 <uros_create_entities+0x258>)
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	a315      	add	r3, pc, #84	@ (adr r3, 8001808 <uros_create_entities+0x1f8>)
 80017b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b8:	491a      	ldr	r1, [pc, #104]	@ (8001824 <uros_create_entities+0x214>)
 80017ba:	482c      	ldr	r0, [pc, #176]	@ (800186c <uros_create_entities+0x25c>)
 80017bc:	f00c fc5a 	bl	800e074 <rclc_timer_init_default>

  
  rclc_executor_init(&executor, &support.context, 3, &allocator); // Create executor (1 timer + 2 subscriptions)
 80017c0:	4b16      	ldr	r3, [pc, #88]	@ (800181c <uros_create_entities+0x20c>)
 80017c2:	2203      	movs	r2, #3
 80017c4:	4917      	ldr	r1, [pc, #92]	@ (8001824 <uros_create_entities+0x214>)
 80017c6:	482a      	ldr	r0, [pc, #168]	@ (8001870 <uros_create_entities+0x260>)
 80017c8:	f00c f82a 	bl	800d820 <rclc_executor_init>

  rclc_executor_add_subscription(&executor, &cmd_vel_sub, &cmd_vel_msg, &cmd_vel_sub_cb, ON_NEW_DATA); // Add subscriber to executor
 80017cc:	2300      	movs	r3, #0
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	4b28      	ldr	r3, [pc, #160]	@ (8001874 <uros_create_entities+0x264>)
 80017d2:	4a21      	ldr	r2, [pc, #132]	@ (8001858 <uros_create_entities+0x248>)
 80017d4:	491f      	ldr	r1, [pc, #124]	@ (8001854 <uros_create_entities+0x244>)
 80017d6:	4826      	ldr	r0, [pc, #152]	@ (8001870 <uros_create_entities+0x260>)
 80017d8:	f00c f8c6 	bl	800d968 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &cmd_arm_sub, &cmd_arm_msg, &cmd_arm_sub_cb, ON_NEW_DATA); // Add arm subscriber to executor
 80017dc:	2300      	movs	r3, #0
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	4b25      	ldr	r3, [pc, #148]	@ (8001878 <uros_create_entities+0x268>)
 80017e2:	4a20      	ldr	r2, [pc, #128]	@ (8001864 <uros_create_entities+0x254>)
 80017e4:	491e      	ldr	r1, [pc, #120]	@ (8001860 <uros_create_entities+0x250>)
 80017e6:	4822      	ldr	r0, [pc, #136]	@ (8001870 <uros_create_entities+0x260>)
 80017e8:	f00c f8be 	bl	800d968 <rclc_executor_add_subscription>
  rclc_executor_add_timer(&executor, &pose_pub_timer); // Add timer to executor
 80017ec:	491f      	ldr	r1, [pc, #124]	@ (800186c <uros_create_entities+0x25c>)
 80017ee:	4820      	ldr	r0, [pc, #128]	@ (8001870 <uros_create_entities+0x260>)
 80017f0:	f00c f8ee 	bl	800d9d0 <rclc_executor_add_timer>
}
 80017f4:	bf00      	nop
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bdb0      	pop	{r4, r5, r7, pc}
 80017fc:	f3af 8000 	nop.w
 8001800:	00000000 	.word	0x00000000
 8001804:	4054c000 	.word	0x4054c000
 8001808:	02faf080 	.word	0x02faf080
 800180c:	00000000 	.word	0x00000000
 8001810:	20000d4c 	.word	0x20000d4c
 8001814:	20000d50 	.word	0x20000d50
 8001818:	20000d54 	.word	0x20000d54
 800181c:	20000d8c 	.word	0x20000d8c
 8001820:	20000da8 	.word	0x20000da8
 8001824:	20000d58 	.word	0x20000d58
 8001828:	0801a668 	.word	0x0801a668
 800182c:	0801a66c 	.word	0x0801a66c
 8001830:	20000da0 	.word	0x20000da0
 8001834:	0801a678 	.word	0x0801a678
 8001838:	20000a30 	.word	0x20000a30
 800183c:	20000a38 	.word	0x20000a38
 8001840:	40834000 	.word	0x40834000
 8001844:	0801a684 	.word	0x0801a684
 8001848:	20000d38 	.word	0x20000d38
 800184c:	20000d3c 	.word	0x20000d3c
 8001850:	0801a698 	.word	0x0801a698
 8001854:	20000d00 	.word	0x20000d00
 8001858:	20000d08 	.word	0x20000d08
 800185c:	0801a6a8 	.word	0x0801a6a8
 8001860:	20000d40 	.word	0x20000d40
 8001864:	20000d44 	.word	0x20000d44
 8001868:	08001b2d 	.word	0x08001b2d
 800186c:	20000d48 	.word	0x20000d48
 8001870:	20000db0 	.word	0x20000db0
 8001874:	080018f9 	.word	0x080018f9
 8001878:	08001b91 	.word	0x08001b91

0800187c <uros_destroy_entities>:
void uros_destroy_entities(void) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
  rmw_context_t* rmw_context = rcl_context_get_rmw_context(&support.context);
 8001882:	4814      	ldr	r0, [pc, #80]	@ (80018d4 <uros_destroy_entities+0x58>)
 8001884:	f00a fbd8 	bl	800c038 <rcl_context_get_rmw_context>
 8001888:	6078      	str	r0, [r7, #4]
  (void) rmw_uros_set_context_entity_destroy_session_timeout(rmw_context, 0);
 800188a:	2100      	movs	r1, #0
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f00e f821 	bl	800f8d4 <rmw_uros_set_context_entity_destroy_session_timeout>

  // Destroy publisher
  rcl_publisher_fini(&pose_pub, &node);
 8001892:	4911      	ldr	r1, [pc, #68]	@ (80018d8 <uros_destroy_entities+0x5c>)
 8001894:	4811      	ldr	r0, [pc, #68]	@ (80018dc <uros_destroy_entities+0x60>)
 8001896:	f00a ffc1 	bl	800c81c <rcl_publisher_fini>
  rcl_publisher_fini(&arm_pub, &node);
 800189a:	490f      	ldr	r1, [pc, #60]	@ (80018d8 <uros_destroy_entities+0x5c>)
 800189c:	4810      	ldr	r0, [pc, #64]	@ (80018e0 <uros_destroy_entities+0x64>)
 800189e:	f00a ffbd 	bl	800c81c <rcl_publisher_fini>

  // Destroy subscriber
  rcl_subscription_fini(&cmd_vel_sub, &node);
 80018a2:	490d      	ldr	r1, [pc, #52]	@ (80018d8 <uros_destroy_entities+0x5c>)
 80018a4:	480f      	ldr	r0, [pc, #60]	@ (80018e4 <uros_destroy_entities+0x68>)
 80018a6:	f00b f90d 	bl	800cac4 <rcl_subscription_fini>
  rcl_subscription_fini(&cmd_arm_sub, &node);
 80018aa:	490b      	ldr	r1, [pc, #44]	@ (80018d8 <uros_destroy_entities+0x5c>)
 80018ac:	480e      	ldr	r0, [pc, #56]	@ (80018e8 <uros_destroy_entities+0x6c>)
 80018ae:	f00b f909 	bl	800cac4 <rcl_subscription_fini>

  rcl_timer_fini(&pose_pub_timer);
 80018b2:	480e      	ldr	r0, [pc, #56]	@ (80018ec <uros_destroy_entities+0x70>)
 80018b4:	f00b fb3a 	bl	800cf2c <rcl_timer_fini>

  // Destroy executor
  rclc_executor_fini(&executor);
 80018b8:	480d      	ldr	r0, [pc, #52]	@ (80018f0 <uros_destroy_entities+0x74>)
 80018ba:	f00c f821 	bl	800d900 <rclc_executor_fini>

  // Destroy node
  rcl_node_fini(&node);
 80018be:	4806      	ldr	r0, [pc, #24]	@ (80018d8 <uros_destroy_entities+0x5c>)
 80018c0:	f00a fe8a 	bl	800c5d8 <rcl_node_fini>
  rclc_support_fini(&support);
 80018c4:	4803      	ldr	r0, [pc, #12]	@ (80018d4 <uros_destroy_entities+0x58>)
 80018c6:	f00c fb07 	bl	800ded8 <rclc_support_fini>
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000d58 	.word	0x20000d58
 80018d8:	20000da0 	.word	0x20000da0
 80018dc:	20000a30 	.word	0x20000a30
 80018e0:	20000d38 	.word	0x20000d38
 80018e4:	20000d00 	.word	0x20000d00
 80018e8:	20000d40 	.word	0x20000d40
 80018ec:	20000d48 	.word	0x20000d48
 80018f0:	20000db0 	.word	0x20000db0
 80018f4:	00000000 	.word	0x00000000

080018f8 <cmd_vel_sub_cb>:

void cmd_vel_sub_cb(const void* msgin) {
 80018f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018fc:	b088      	sub	sp, #32
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  const geometry_msgs__msg__Twist * msg = (const geometry_msgs__msg__Twist *)msgin;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	61fb      	str	r3, [r7, #28]
  
  // 检查消息指针是否有效
  if (msg == NULL) {
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	2b00      	cmp	r3, #0
 800190a:	f000 80f3 	beq.w	8001af4 <cmd_vel_sub_cb+0x1fc>
    return;
  }
  
  cmd_vel_msg = *msg;
 800190e:	4a82      	ldr	r2, [pc, #520]	@ (8001b18 <cmd_vel_sub_cb+0x220>)
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	4614      	mov	r4, r2
 8001914:	461d      	mov	r5, r3
 8001916:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001918:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800191a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800191c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800191e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001922:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  // 获取当前时间 (毫秒)
  uint32_t current_time = HAL_GetTick();
 8001926:	f001 fd89 	bl	800343c <HAL_GetTick>
 800192a:	61b8      	str	r0, [r7, #24]

  // 计算时间差 (秒)
  float dt = 0.0f;
 800192c:	f04f 0300 	mov.w	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
  if (last_cmd_vel_time != 0) {
 8001932:	4b7a      	ldr	r3, [pc, #488]	@ (8001b1c <cmd_vel_sub_cb+0x224>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	f000 80d8 	beq.w	8001aec <cmd_vel_sub_cb+0x1f4>
	dt = (current_time - last_cmd_vel_time) / 1000.0f;
 800193c:	4b77      	ldr	r3, [pc, #476]	@ (8001b1c <cmd_vel_sub_cb+0x224>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	ee07 3a90 	vmov	s15, r3
 8001948:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800194c:	eddf 6a74 	vldr	s13, [pc, #464]	@ 8001b20 <cmd_vel_sub_cb+0x228>
 8001950:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001954:	edc7 7a05 	vstr	s15, [r7, #20]
	float dx_robot = cmd_vel_msg.linear.x * dt;
 8001958:	4b6f      	ldr	r3, [pc, #444]	@ (8001b18 <cmd_vel_sub_cb+0x220>)
 800195a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800195e:	6978      	ldr	r0, [r7, #20]
 8001960:	f7fe fe22 	bl	80005a8 <__aeabi_f2d>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	4620      	mov	r0, r4
 800196a:	4629      	mov	r1, r5
 800196c:	f7fe fe74 	bl	8000658 <__aeabi_dmul>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4610      	mov	r0, r2
 8001976:	4619      	mov	r1, r3
 8001978:	f7ff f908 	bl	8000b8c <__aeabi_d2f>
 800197c:	4603      	mov	r3, r0
 800197e:	613b      	str	r3, [r7, #16]
	float dy_robot = cmd_vel_msg.linear.y * dt;
 8001980:	4b65      	ldr	r3, [pc, #404]	@ (8001b18 <cmd_vel_sub_cb+0x220>)
 8001982:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001986:	6978      	ldr	r0, [r7, #20]
 8001988:	f7fe fe0e 	bl	80005a8 <__aeabi_f2d>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4620      	mov	r0, r4
 8001992:	4629      	mov	r1, r5
 8001994:	f7fe fe60 	bl	8000658 <__aeabi_dmul>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4610      	mov	r0, r2
 800199e:	4619      	mov	r1, r3
 80019a0:	f7ff f8f4 	bl	8000b8c <__aeabi_d2f>
 80019a4:	4603      	mov	r3, r0
 80019a6:	60fb      	str	r3, [r7, #12]

	  // 更新位置
	//      pose_msg.pose.pose.position.x += dx_world;
	//      pose_msg.pose.pose.position.y += dy_world;
	  // pose_msg.pose.pose.position.z += cmd_vel_msg.linear.z * dt;
	  pose_msg.pose.pose.position.x += dx_robot;
 80019a8:	4b5e      	ldr	r3, [pc, #376]	@ (8001b24 <cmd_vel_sub_cb+0x22c>)
 80019aa:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80019ae:	6938      	ldr	r0, [r7, #16]
 80019b0:	f7fe fdfa 	bl	80005a8 <__aeabi_f2d>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	4620      	mov	r0, r4
 80019ba:	4629      	mov	r1, r5
 80019bc:	f7fe fc96 	bl	80002ec <__adddf3>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	4957      	ldr	r1, [pc, #348]	@ (8001b24 <cmd_vel_sub_cb+0x22c>)
 80019c6:	e9c1 2308 	strd	r2, r3, [r1, #32]
	  pose_msg.pose.pose.position.y += dy_robot;
 80019ca:	4b56      	ldr	r3, [pc, #344]	@ (8001b24 <cmd_vel_sub_cb+0x22c>)
 80019cc:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 80019d0:	68f8      	ldr	r0, [r7, #12]
 80019d2:	f7fe fde9 	bl	80005a8 <__aeabi_f2d>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	4620      	mov	r0, r4
 80019dc:	4629      	mov	r1, r5
 80019de:	f7fe fc85 	bl	80002ec <__adddf3>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	494f      	ldr	r1, [pc, #316]	@ (8001b24 <cmd_vel_sub_cb+0x22c>)
 80019e8:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

	  // 更新偏航角
	  current_yaw += cmd_vel_msg.angular.z * dt;
 80019ec:	4b4e      	ldr	r3, [pc, #312]	@ (8001b28 <cmd_vel_sub_cb+0x230>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7fe fdd9 	bl	80005a8 <__aeabi_f2d>
 80019f6:	4680      	mov	r8, r0
 80019f8:	4689      	mov	r9, r1
 80019fa:	4b47      	ldr	r3, [pc, #284]	@ (8001b18 <cmd_vel_sub_cb+0x220>)
 80019fc:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001a00:	6978      	ldr	r0, [r7, #20]
 8001a02:	f7fe fdd1 	bl	80005a8 <__aeabi_f2d>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	4629      	mov	r1, r5
 8001a0e:	f7fe fe23 	bl	8000658 <__aeabi_dmul>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4640      	mov	r0, r8
 8001a18:	4649      	mov	r1, r9
 8001a1a:	f7fe fc67 	bl	80002ec <__adddf3>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	4610      	mov	r0, r2
 8001a24:	4619      	mov	r1, r3
 8001a26:	f7ff f8b1 	bl	8000b8c <__aeabi_d2f>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	4a3e      	ldr	r2, [pc, #248]	@ (8001b28 <cmd_vel_sub_cb+0x230>)
 8001a2e:	6013      	str	r3, [r2, #0]

	  // 将偏航角限制在 [-π, π] 范围内
	  while (current_yaw > M_PI) current_yaw -= 2.0f * M_PI;
 8001a30:	e012      	b.n	8001a58 <cmd_vel_sub_cb+0x160>
 8001a32:	4b3d      	ldr	r3, [pc, #244]	@ (8001b28 <cmd_vel_sub_cb+0x230>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7fe fdb6 	bl	80005a8 <__aeabi_f2d>
 8001a3c:	a330      	add	r3, pc, #192	@ (adr r3, 8001b00 <cmd_vel_sub_cb+0x208>)
 8001a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a42:	f7fe fc51 	bl	80002e8 <__aeabi_dsub>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4610      	mov	r0, r2
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f7ff f89d 	bl	8000b8c <__aeabi_d2f>
 8001a52:	4603      	mov	r3, r0
 8001a54:	4a34      	ldr	r2, [pc, #208]	@ (8001b28 <cmd_vel_sub_cb+0x230>)
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	4b33      	ldr	r3, [pc, #204]	@ (8001b28 <cmd_vel_sub_cb+0x230>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7fe fda3 	bl	80005a8 <__aeabi_f2d>
 8001a62:	a329      	add	r3, pc, #164	@ (adr r3, 8001b08 <cmd_vel_sub_cb+0x210>)
 8001a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a68:	f7ff f886 	bl	8000b78 <__aeabi_dcmpgt>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1df      	bne.n	8001a32 <cmd_vel_sub_cb+0x13a>
	  while (current_yaw < -M_PI) current_yaw += 2.0f * M_PI;
 8001a72:	e012      	b.n	8001a9a <cmd_vel_sub_cb+0x1a2>
 8001a74:	4b2c      	ldr	r3, [pc, #176]	@ (8001b28 <cmd_vel_sub_cb+0x230>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7fe fd95 	bl	80005a8 <__aeabi_f2d>
 8001a7e:	a320      	add	r3, pc, #128	@ (adr r3, 8001b00 <cmd_vel_sub_cb+0x208>)
 8001a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a84:	f7fe fc32 	bl	80002ec <__adddf3>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	4619      	mov	r1, r3
 8001a90:	f7ff f87c 	bl	8000b8c <__aeabi_d2f>
 8001a94:	4603      	mov	r3, r0
 8001a96:	4a24      	ldr	r2, [pc, #144]	@ (8001b28 <cmd_vel_sub_cb+0x230>)
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	4b23      	ldr	r3, [pc, #140]	@ (8001b28 <cmd_vel_sub_cb+0x230>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7fe fd82 	bl	80005a8 <__aeabi_f2d>
 8001aa4:	a31a      	add	r3, pc, #104	@ (adr r3, 8001b10 <cmd_vel_sub_cb+0x218>)
 8001aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aaa:	f7ff f847 	bl	8000b3c <__aeabi_dcmplt>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1df      	bne.n	8001a74 <cmd_vel_sub_cb+0x17c>

	  pose_msg.pose.pose.orientation.z = current_yaw;
 8001ab4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b28 <cmd_vel_sub_cb+0x230>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7fe fd75 	bl	80005a8 <__aeabi_f2d>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4918      	ldr	r1, [pc, #96]	@ (8001b24 <cmd_vel_sub_cb+0x22c>)
 8001ac4:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

	  pose_msg.twist.twist.linear.x = cmd_vel_msg.linear.x;
 8001ac8:	4b13      	ldr	r3, [pc, #76]	@ (8001b18 <cmd_vel_sub_cb+0x220>)
 8001aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ace:	4915      	ldr	r1, [pc, #84]	@ (8001b24 <cmd_vel_sub_cb+0x22c>)
 8001ad0:	e9c1 235e 	strd	r2, r3, [r1, #376]	@ 0x178
	  pose_msg.twist.twist.linear.y = cmd_vel_msg.linear.y;
 8001ad4:	4b10      	ldr	r3, [pc, #64]	@ (8001b18 <cmd_vel_sub_cb+0x220>)
 8001ad6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ada:	4912      	ldr	r1, [pc, #72]	@ (8001b24 <cmd_vel_sub_cb+0x22c>)
 8001adc:	e9c1 2360 	strd	r2, r3, [r1, #384]	@ 0x180
	  pose_msg.twist.twist.angular.z = cmd_vel_msg.angular.z;
 8001ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8001b18 <cmd_vel_sub_cb+0x220>)
 8001ae2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001ae6:	490f      	ldr	r1, [pc, #60]	@ (8001b24 <cmd_vel_sub_cb+0x22c>)
 8001ae8:	e9c1 2368 	strd	r2, r3, [r1, #416]	@ 0x1a0

//	  rcl_publish(&pose_pub, &pose_msg, NULL);
  }

  last_cmd_vel_time = current_time;
 8001aec:	4a0b      	ldr	r2, [pc, #44]	@ (8001b1c <cmd_vel_sub_cb+0x224>)
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	e000      	b.n	8001af6 <cmd_vel_sub_cb+0x1fe>
    return;
 8001af4:	bf00      	nop
}
 8001af6:	3720      	adds	r7, #32
 8001af8:	46bd      	mov	sp, r7
 8001afa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001afe:	bf00      	nop
 8001b00:	54442d18 	.word	0x54442d18
 8001b04:	401921fb 	.word	0x401921fb
 8001b08:	54442d18 	.word	0x54442d18
 8001b0c:	400921fb 	.word	0x400921fb
 8001b10:	54442d18 	.word	0x54442d18
 8001b14:	c00921fb 	.word	0xc00921fb
 8001b18:	20000d08 	.word	0x20000d08
 8001b1c:	20000d4c 	.word	0x20000d4c
 8001b20:	447a0000 	.word	0x447a0000
 8001b24:	20000a38 	.word	0x20000a38
 8001b28:	20000d54 	.word	0x20000d54

08001b2c <pose_pub_timer_cb>:

void pose_pub_timer_cb(rcl_timer_t * timer, int64_t last_call_time) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	e9c7 2300 	strd	r2, r3, [r7]
  // 更新时间戳
  uint32_t current_tick = HAL_GetTick();
 8001b38:	f001 fc80 	bl	800343c <HAL_GetTick>
 8001b3c:	6178      	str	r0, [r7, #20]
  pose_msg.header.stamp.sec = current_tick / 1000;
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	4a0f      	ldr	r2, [pc, #60]	@ (8001b80 <pose_pub_timer_cb+0x54>)
 8001b42:	fba2 2303 	umull	r2, r3, r2, r3
 8001b46:	099b      	lsrs	r3, r3, #6
 8001b48:	461a      	mov	r2, r3
 8001b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b84 <pose_pub_timer_cb+0x58>)
 8001b4c:	601a      	str	r2, [r3, #0]
  pose_msg.header.stamp.nanosec = (current_tick % 1000) * 1000000;
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	4b0b      	ldr	r3, [pc, #44]	@ (8001b80 <pose_pub_timer_cb+0x54>)
 8001b52:	fba3 1302 	umull	r1, r3, r3, r2
 8001b56:	099b      	lsrs	r3, r3, #6
 8001b58:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001b5c:	fb01 f303 	mul.w	r3, r1, r3
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	4a09      	ldr	r2, [pc, #36]	@ (8001b88 <pose_pub_timer_cb+0x5c>)
 8001b64:	fb02 f303 	mul.w	r3, r2, r3
 8001b68:	4a06      	ldr	r2, [pc, #24]	@ (8001b84 <pose_pub_timer_cb+0x58>)
 8001b6a:	6053      	str	r3, [r2, #4]
  
  rcl_ret_t ret = rcl_publish(&pose_pub, &pose_msg, NULL);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	4905      	ldr	r1, [pc, #20]	@ (8001b84 <pose_pub_timer_cb+0x58>)
 8001b70:	4806      	ldr	r0, [pc, #24]	@ (8001b8c <pose_pub_timer_cb+0x60>)
 8001b72:	f00a fead 	bl	800c8d0 <rcl_publish>
 8001b76:	6138      	str	r0, [r7, #16]
  // 可选：添加调试信息（如果需要的话）
  // printf("Published pose: x=%.2f, y=%.2f, yaw=%.2f, ret=%d\n", 
  //        pose_msg.pose.pose.position.x, 
  //        pose_msg.pose.pose.position.y, 
  //        current_yaw, ret);
}
 8001b78:	bf00      	nop
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	10624dd3 	.word	0x10624dd3
 8001b84:	20000a38 	.word	0x20000a38
 8001b88:	000f4240 	.word	0x000f4240
 8001b8c:	20000a30 	.word	0x20000a30

08001b90 <cmd_arm_sub_cb>:

void cmd_arm_sub_cb(const void* msgin) {
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  const std_msgs__msg__Int32 * msg = (const std_msgs__msg__Int32 *)msgin;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	60fb      	str	r3, [r7, #12]
  cmd_arm_msg = *msg;
 8001b9c:	4a08      	ldr	r2, [pc, #32]	@ (8001bc0 <cmd_arm_sub_cb+0x30>)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6013      	str	r3, [r2, #0]
  code = cmd_arm_msg.data;
 8001ba4:	4b06      	ldr	r3, [pc, #24]	@ (8001bc0 <cmd_arm_sub_cb+0x30>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a06      	ldr	r2, [pc, #24]	@ (8001bc4 <cmd_arm_sub_cb+0x34>)
 8001baa:	6013      	str	r3, [r2, #0]
  arm_msg = cmd_arm_msg;
 8001bac:	4a06      	ldr	r2, [pc, #24]	@ (8001bc8 <cmd_arm_sub_cb+0x38>)
 8001bae:	4b04      	ldr	r3, [pc, #16]	@ (8001bc0 <cmd_arm_sub_cb+0x30>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6013      	str	r3, [r2, #0]
}
 8001bb4:	bf00      	nop
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	20000d44 	.word	0x20000d44
 8001bc4:	20000010 	.word	0x20000010
 8001bc8:	20000d3c 	.word	0x20000d3c

08001bcc <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08a      	sub	sp, #40	@ 0x28
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001bd8:	f006 ffce 	bl	8008b78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001bdc:	4b5a      	ldr	r3, [pc, #360]	@ (8001d48 <pvPortMallocMicroROS+0x17c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001be4:	f000 f986 	bl	8001ef4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001be8:	4b58      	ldr	r3, [pc, #352]	@ (8001d4c <pvPortMallocMicroROS+0x180>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f040 8090 	bne.w	8001d16 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d01e      	beq.n	8001c3a <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8001bfc:	2208      	movs	r2, #8
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d015      	beq.n	8001c3a <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f023 0307 	bic.w	r3, r3, #7
 8001c14:	3308      	adds	r3, #8
 8001c16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00b      	beq.n	8001c3a <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c26:	f383 8811 	msr	BASEPRI, r3
 8001c2a:	f3bf 8f6f 	isb	sy
 8001c2e:	f3bf 8f4f 	dsb	sy
 8001c32:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001c34:	bf00      	nop
 8001c36:	bf00      	nop
 8001c38:	e7fd      	b.n	8001c36 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d06a      	beq.n	8001d16 <pvPortMallocMicroROS+0x14a>
 8001c40:	4b43      	ldr	r3, [pc, #268]	@ (8001d50 <pvPortMallocMicroROS+0x184>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d865      	bhi.n	8001d16 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001c4a:	4b42      	ldr	r3, [pc, #264]	@ (8001d54 <pvPortMallocMicroROS+0x188>)
 8001c4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001c4e:	4b41      	ldr	r3, [pc, #260]	@ (8001d54 <pvPortMallocMicroROS+0x188>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001c54:	e004      	b.n	8001c60 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d903      	bls.n	8001c72 <pvPortMallocMicroROS+0xa6>
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f1      	bne.n	8001c56 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001c72:	4b35      	ldr	r3, [pc, #212]	@ (8001d48 <pvPortMallocMicroROS+0x17c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d04c      	beq.n	8001d16 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001c7c:	6a3b      	ldr	r3, [r7, #32]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2208      	movs	r2, #8
 8001c82:	4413      	add	r3, r2
 8001c84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	6a3b      	ldr	r3, [r7, #32]
 8001c8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	1ad2      	subs	r2, r2, r3
 8001c96:	2308      	movs	r3, #8
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d920      	bls.n	8001ce0 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00b      	beq.n	8001cc8 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8001cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cb4:	f383 8811 	msr	BASEPRI, r3
 8001cb8:	f3bf 8f6f 	isb	sy
 8001cbc:	f3bf 8f4f 	dsb	sy
 8001cc0:	613b      	str	r3, [r7, #16]
}
 8001cc2:	bf00      	nop
 8001cc4:	bf00      	nop
 8001cc6:	e7fd      	b.n	8001cc4 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	1ad2      	subs	r2, r2, r3
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001cda:	69b8      	ldr	r0, [r7, #24]
 8001cdc:	f000 f96c 	bl	8001fb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d50 <pvPortMallocMicroROS+0x184>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	4a19      	ldr	r2, [pc, #100]	@ (8001d50 <pvPortMallocMicroROS+0x184>)
 8001cec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001cee:	4b18      	ldr	r3, [pc, #96]	@ (8001d50 <pvPortMallocMicroROS+0x184>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	4b19      	ldr	r3, [pc, #100]	@ (8001d58 <pvPortMallocMicroROS+0x18c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d203      	bcs.n	8001d02 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001cfa:	4b15      	ldr	r3, [pc, #84]	@ (8001d50 <pvPortMallocMicroROS+0x184>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a16      	ldr	r2, [pc, #88]	@ (8001d58 <pvPortMallocMicroROS+0x18c>)
 8001d00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d04:	685a      	ldr	r2, [r3, #4]
 8001d06:	4b11      	ldr	r3, [pc, #68]	@ (8001d4c <pvPortMallocMicroROS+0x180>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001d16:	f006 ff3d 	bl	8008b94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d00b      	beq.n	8001d3c <pvPortMallocMicroROS+0x170>
	__asm volatile
 8001d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d28:	f383 8811 	msr	BASEPRI, r3
 8001d2c:	f3bf 8f6f 	isb	sy
 8001d30:	f3bf 8f4f 	dsb	sy
 8001d34:	60fb      	str	r3, [r7, #12]
}
 8001d36:	bf00      	nop
 8001d38:	bf00      	nop
 8001d3a:	e7fd      	b.n	8001d38 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8001d3c:	69fb      	ldr	r3, [r7, #28]
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3728      	adds	r7, #40	@ 0x28
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20004a48 	.word	0x20004a48
 8001d4c:	20004a54 	.word	0x20004a54
 8001d50:	20004a4c 	.word	0x20004a4c
 8001d54:	20004a40 	.word	0x20004a40
 8001d58:	20004a50 	.word	0x20004a50

08001d5c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d04a      	beq.n	8001e04 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001d6e:	2308      	movs	r3, #8
 8001d70:	425b      	negs	r3, r3
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	4413      	add	r3, r2
 8001d76:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	4b22      	ldr	r3, [pc, #136]	@ (8001e0c <vPortFreeMicroROS+0xb0>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4013      	ands	r3, r2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10b      	bne.n	8001da2 <vPortFreeMicroROS+0x46>
	__asm volatile
 8001d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d8e:	f383 8811 	msr	BASEPRI, r3
 8001d92:	f3bf 8f6f 	isb	sy
 8001d96:	f3bf 8f4f 	dsb	sy
 8001d9a:	60fb      	str	r3, [r7, #12]
}
 8001d9c:	bf00      	nop
 8001d9e:	bf00      	nop
 8001da0:	e7fd      	b.n	8001d9e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00b      	beq.n	8001dc2 <vPortFreeMicroROS+0x66>
	__asm volatile
 8001daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001dae:	f383 8811 	msr	BASEPRI, r3
 8001db2:	f3bf 8f6f 	isb	sy
 8001db6:	f3bf 8f4f 	dsb	sy
 8001dba:	60bb      	str	r3, [r7, #8]
}
 8001dbc:	bf00      	nop
 8001dbe:	bf00      	nop
 8001dc0:	e7fd      	b.n	8001dbe <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	685a      	ldr	r2, [r3, #4]
 8001dc6:	4b11      	ldr	r3, [pc, #68]	@ (8001e0c <vPortFreeMicroROS+0xb0>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d019      	beq.n	8001e04 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d115      	bne.n	8001e04 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8001e0c <vPortFreeMicroROS+0xb0>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	43db      	mvns	r3, r3
 8001de2:	401a      	ands	r2, r3
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001de8:	f006 fec6 	bl	8008b78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	4b07      	ldr	r3, [pc, #28]	@ (8001e10 <vPortFreeMicroROS+0xb4>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4413      	add	r3, r2
 8001df6:	4a06      	ldr	r2, [pc, #24]	@ (8001e10 <vPortFreeMicroROS+0xb4>)
 8001df8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001dfa:	6938      	ldr	r0, [r7, #16]
 8001dfc:	f000 f8dc 	bl	8001fb8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001e00:	f006 fec8 	bl	8008b94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001e04:	bf00      	nop
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20004a54 	.word	0x20004a54
 8001e10:	20004a4c 	.word	0x20004a4c

08001e14 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001e14:	b480      	push	{r7}
 8001e16:	b087      	sub	sp, #28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001e20:	2308      	movs	r3, #8
 8001e22:	425b      	negs	r3, r3
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	4413      	add	r3, r2
 8001e28:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	685a      	ldr	r2, [r3, #4]
 8001e32:	4b06      	ldr	r3, [pc, #24]	@ (8001e4c <getBlockSize+0x38>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	43db      	mvns	r3, r3
 8001e38:	4013      	ands	r3, r2
 8001e3a:	60fb      	str	r3, [r7, #12]

	return count;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	371c      	adds	r7, #28
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	20004a54 	.word	0x20004a54

08001e50 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001e5a:	f006 fe8d 	bl	8008b78 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001e5e:	6838      	ldr	r0, [r7, #0]
 8001e60:	f7ff feb4 	bl	8001bcc <pvPortMallocMicroROS>
 8001e64:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d017      	beq.n	8001e9c <pvPortReallocMicroROS+0x4c>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d014      	beq.n	8001e9c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff ffce 	bl	8001e14 <getBlockSize>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2208      	movs	r2, #8
 8001e7c:	1a9b      	subs	r3, r3, r2
 8001e7e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d201      	bcs.n	8001e8c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	6879      	ldr	r1, [r7, #4]
 8001e90:	68b8      	ldr	r0, [r7, #8]
 8001e92:	f017 fd88 	bl	80199a6 <memcpy>

		vPortFreeMicroROS(pv);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff ff60 	bl	8001d5c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001e9c:	f006 fe7a 	bl	8008b94 <xTaskResumeAll>

	return newmem;
 8001ea0:	68bb      	ldr	r3, [r7, #8]
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b086      	sub	sp, #24
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
 8001eb2:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001eb4:	f006 fe60 	bl	8008b78 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	fb02 f303 	mul.w	r3, r2, r3
 8001ec0:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001ec2:	6978      	ldr	r0, [r7, #20]
 8001ec4:	f7ff fe82 	bl	8001bcc <pvPortMallocMicroROS>
 8001ec8:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001ece:	e004      	b.n	8001eda <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1c5a      	adds	r2, r3, #1
 8001ed4:	613a      	str	r2, [r7, #16]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	1e5a      	subs	r2, r3, #1
 8001ede:	617a      	str	r2, [r7, #20]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1f5      	bne.n	8001ed0 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001ee4:	f006 fe56 	bl	8008b94 <xTaskResumeAll>
  	return mem;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001efa:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8001efe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001f00:	4b27      	ldr	r3, [pc, #156]	@ (8001fa0 <prvHeapInit+0xac>)
 8001f02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00c      	beq.n	8001f28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	3307      	adds	r3, #7
 8001f12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f023 0307 	bic.w	r3, r3, #7
 8001f1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001f1c:	68ba      	ldr	r2, [r7, #8]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	4a1f      	ldr	r2, [pc, #124]	@ (8001fa0 <prvHeapInit+0xac>)
 8001f24:	4413      	add	r3, r2
 8001f26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001f2c:	4a1d      	ldr	r2, [pc, #116]	@ (8001fa4 <prvHeapInit+0xb0>)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001f32:	4b1c      	ldr	r3, [pc, #112]	@ (8001fa4 <prvHeapInit+0xb0>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001f40:	2208      	movs	r2, #8
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	1a9b      	subs	r3, r3, r2
 8001f46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f023 0307 	bic.w	r3, r3, #7
 8001f4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4a15      	ldr	r2, [pc, #84]	@ (8001fa8 <prvHeapInit+0xb4>)
 8001f54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001f56:	4b14      	ldr	r3, [pc, #80]	@ (8001fa8 <prvHeapInit+0xb4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001f5e:	4b12      	ldr	r3, [pc, #72]	@ (8001fa8 <prvHeapInit+0xb4>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	1ad2      	subs	r2, r2, r3
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001f74:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa8 <prvHeapInit+0xb4>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	4a0a      	ldr	r2, [pc, #40]	@ (8001fac <prvHeapInit+0xb8>)
 8001f82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	4a09      	ldr	r2, [pc, #36]	@ (8001fb0 <prvHeapInit+0xbc>)
 8001f8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001f8c:	4b09      	ldr	r3, [pc, #36]	@ (8001fb4 <prvHeapInit+0xc0>)
 8001f8e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001f92:	601a      	str	r2, [r3, #0]
}
 8001f94:	bf00      	nop
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	20000e40 	.word	0x20000e40
 8001fa4:	20004a40 	.word	0x20004a40
 8001fa8:	20004a48 	.word	0x20004a48
 8001fac:	20004a50 	.word	0x20004a50
 8001fb0:	20004a4c 	.word	0x20004a4c
 8001fb4:	20004a54 	.word	0x20004a54

08001fb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001fc0:	4b28      	ldr	r3, [pc, #160]	@ (8002064 <prvInsertBlockIntoFreeList+0xac>)
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	e002      	b.n	8001fcc <prvInsertBlockIntoFreeList+0x14>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d8f7      	bhi.n	8001fc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d108      	bne.n	8001ffa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	441a      	add	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	441a      	add	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	429a      	cmp	r2, r3
 800200c:	d118      	bne.n	8002040 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	4b15      	ldr	r3, [pc, #84]	@ (8002068 <prvInsertBlockIntoFreeList+0xb0>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	429a      	cmp	r2, r3
 8002018:	d00d      	beq.n	8002036 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	441a      	add	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	e008      	b.n	8002048 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002036:	4b0c      	ldr	r3, [pc, #48]	@ (8002068 <prvInsertBlockIntoFreeList+0xb0>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	e003      	b.n	8002048 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	429a      	cmp	r2, r3
 800204e:	d002      	beq.n	8002056 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002056:	bf00      	nop
 8002058:	3714      	adds	r7, #20
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	20004a40 	.word	0x20004a40
 8002068:	20004a48 	.word	0x20004a48

0800206c <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800207a:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 800207c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002080:	4904      	ldr	r1, [pc, #16]	@ (8002094 <cubemx_transport_open+0x28>)
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f004 f9fc 	bl	8006480 <HAL_UART_Receive_DMA>
    return true;
 8002088:	2301      	movs	r3, #1
}
 800208a:	4618      	mov	r0, r3
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20004a58 	.word	0x20004a58

08002098 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80020a6:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80020a8:	68f8      	ldr	r0, [r7, #12]
 80020aa:	f004 fa0e 	bl	80064ca <HAL_UART_DMAStop>
    return true;
 80020ae:	2301      	movs	r3, #1
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
 80020c4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80020cc:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b20      	cmp	r3, #32
 80020d8:	d11c      	bne.n	8002114 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	b29b      	uxth	r3, r3
 80020de:	461a      	mov	r2, r3
 80020e0:	68b9      	ldr	r1, [r7, #8]
 80020e2:	6978      	ldr	r0, [r7, #20]
 80020e4:	f004 f950 	bl	8006388 <HAL_UART_Transmit_DMA>
 80020e8:	4603      	mov	r3, r0
 80020ea:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80020ec:	e002      	b.n	80020f4 <cubemx_transport_write+0x3c>
            osDelay(1);
 80020ee:	2001      	movs	r0, #1
 80020f0:	f005 fd00 	bl	8007af4 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80020f4:	7cfb      	ldrb	r3, [r7, #19]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d105      	bne.n	8002106 <cubemx_transport_write+0x4e>
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b20      	cmp	r3, #32
 8002104:	d1f3      	bne.n	80020ee <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8002106:	7cfb      	ldrb	r3, [r7, #19]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <cubemx_transport_write+0x58>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	e002      	b.n	8002116 <cubemx_transport_write+0x5e>
 8002110:	2300      	movs	r3, #0
 8002112:	e000      	b.n	8002116 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8002114:	2300      	movs	r3, #0
    }
}
 8002116:	4618      	mov	r0, r3
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
	...

08002120 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8002120:	b580      	push	{r7, lr}
 8002122:	b088      	sub	sp, #32
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
 800212c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002134:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800213a:	b672      	cpsid	i
}
 800213c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 800214a:	4a1c      	ldr	r2, [pc, #112]	@ (80021bc <cubemx_transport_read+0x9c>)
 800214c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800214e:	b662      	cpsie	i
}
 8002150:	bf00      	nop
        __enable_irq();
        ms_used++;
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	3301      	adds	r3, #1
 8002156:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8002158:	2001      	movs	r0, #1
 800215a:	f005 fccb 	bl	8007af4 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 800215e:	4b18      	ldr	r3, [pc, #96]	@ (80021c0 <cubemx_transport_read+0xa0>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	4b16      	ldr	r3, [pc, #88]	@ (80021bc <cubemx_transport_read+0x9c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d103      	bne.n	8002172 <cubemx_transport_read+0x52>
 800216a:	69fa      	ldr	r2, [r7, #28]
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	429a      	cmp	r2, r3
 8002170:	dbe3      	blt.n	800213a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8002172:	2300      	movs	r3, #0
 8002174:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002176:	e011      	b.n	800219c <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8002178:	4b11      	ldr	r3, [pc, #68]	@ (80021c0 <cubemx_transport_read+0xa0>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	68b9      	ldr	r1, [r7, #8]
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	440b      	add	r3, r1
 8002182:	4910      	ldr	r1, [pc, #64]	@ (80021c4 <cubemx_transport_read+0xa4>)
 8002184:	5c8a      	ldrb	r2, [r1, r2]
 8002186:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8002188:	4b0d      	ldr	r3, [pc, #52]	@ (80021c0 <cubemx_transport_read+0xa0>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	3301      	adds	r3, #1
 800218e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002192:	4a0b      	ldr	r2, [pc, #44]	@ (80021c0 <cubemx_transport_read+0xa0>)
 8002194:	6013      	str	r3, [r2, #0]
        wrote++;
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	3301      	adds	r3, #1
 800219a:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800219c:	4b08      	ldr	r3, [pc, #32]	@ (80021c0 <cubemx_transport_read+0xa0>)
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	4b06      	ldr	r3, [pc, #24]	@ (80021bc <cubemx_transport_read+0x9c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d003      	beq.n	80021b0 <cubemx_transport_read+0x90>
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d3e3      	bcc.n	8002178 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 80021b0:	69bb      	ldr	r3, [r7, #24]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3720      	adds	r7, #32
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	2000525c 	.word	0x2000525c
 80021c0:	20005258 	.word	0x20005258
 80021c4:	20004a58 	.word	0x20004a58

080021c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021cc:	f001 f900 	bl	80033d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021d0:	f000 f826 	bl	8002220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021d4:	f000 fa7e 	bl	80026d4 <MX_GPIO_Init>
  MX_DMA_Init();
 80021d8:	f000 fa54 	bl	8002684 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80021dc:	f000 f9fe 	bl	80025dc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80021e0:	f000 f8ac 	bl	800233c <MX_TIM1_Init>
  MX_TIM5_Init();
 80021e4:	f000 f950 	bl	8002488 <MX_TIM5_Init>
  MX_USART3_UART_Init();
 80021e8:	f000 fa22 	bl	8002630 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80021ec:	f000 f878 	bl	80022e0 <MX_I2C1_Init>
  MX_TIM4_Init();
 80021f0:	f000 f8fc 	bl	80023ec <MX_TIM4_Init>
  MX_TIM12_Init();
 80021f4:	f000 f9ac 	bl	8002550 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80021f8:	f005 fba0 	bl	800793c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80021fc:	4a05      	ldr	r2, [pc, #20]	@ (8002214 <main+0x4c>)
 80021fe:	2100      	movs	r1, #0
 8002200:	4805      	ldr	r0, [pc, #20]	@ (8002218 <main+0x50>)
 8002202:	f005 fbe5 	bl	80079d0 <osThreadNew>
 8002206:	4603      	mov	r3, r0
 8002208:	4a04      	ldr	r2, [pc, #16]	@ (800221c <main+0x54>)
 800220a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800220c:	f005 fbba 	bl	8007984 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002210:	bf00      	nop
 8002212:	e7fd      	b.n	8002210 <main+0x48>
 8002214:	0801a700 	.word	0x0801a700
 8002218:	0800330d 	.word	0x0800330d
 800221c:	20005524 	.word	0x20005524

08002220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b094      	sub	sp, #80	@ 0x50
 8002224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002226:	f107 031c 	add.w	r3, r7, #28
 800222a:	2234      	movs	r2, #52	@ 0x34
 800222c:	2100      	movs	r1, #0
 800222e:	4618      	mov	r0, r3
 8002230:	f017 faf0 	bl	8019814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002234:	f107 0308 	add.w	r3, r7, #8
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	60da      	str	r2, [r3, #12]
 8002242:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002244:	2300      	movs	r3, #0
 8002246:	607b      	str	r3, [r7, #4]
 8002248:	4b23      	ldr	r3, [pc, #140]	@ (80022d8 <SystemClock_Config+0xb8>)
 800224a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224c:	4a22      	ldr	r2, [pc, #136]	@ (80022d8 <SystemClock_Config+0xb8>)
 800224e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002252:	6413      	str	r3, [r2, #64]	@ 0x40
 8002254:	4b20      	ldr	r3, [pc, #128]	@ (80022d8 <SystemClock_Config+0xb8>)
 8002256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002258:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800225c:	607b      	str	r3, [r7, #4]
 800225e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002260:	2300      	movs	r3, #0
 8002262:	603b      	str	r3, [r7, #0]
 8002264:	4b1d      	ldr	r3, [pc, #116]	@ (80022dc <SystemClock_Config+0xbc>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800226c:	4a1b      	ldr	r2, [pc, #108]	@ (80022dc <SystemClock_Config+0xbc>)
 800226e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002272:	6013      	str	r3, [r2, #0]
 8002274:	4b19      	ldr	r3, [pc, #100]	@ (80022dc <SystemClock_Config+0xbc>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800227c:	603b      	str	r3, [r7, #0]
 800227e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002280:	2302      	movs	r3, #2
 8002282:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002284:	2301      	movs	r3, #1
 8002286:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002288:	2310      	movs	r3, #16
 800228a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800228c:	2300      	movs	r3, #0
 800228e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002290:	f107 031c 	add.w	r3, r7, #28
 8002294:	4618      	mov	r0, r3
 8002296:	f002 fba9 	bl	80049ec <HAL_RCC_OscConfig>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80022a0:	f000 fa9c 	bl	80027dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022a4:	230f      	movs	r3, #15
 80022a6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80022a8:	2300      	movs	r3, #0
 80022aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022ac:	2300      	movs	r3, #0
 80022ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022b4:	2300      	movs	r3, #0
 80022b6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80022b8:	f107 0308 	add.w	r3, r7, #8
 80022bc:	2100      	movs	r1, #0
 80022be:	4618      	mov	r0, r3
 80022c0:	f002 f89e 	bl	8004400 <HAL_RCC_ClockConfig>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <SystemClock_Config+0xae>
  {
    Error_Handler();
 80022ca:	f000 fa87 	bl	80027dc <Error_Handler>
  }
}
 80022ce:	bf00      	nop
 80022d0:	3750      	adds	r7, #80	@ 0x50
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40007000 	.word	0x40007000

080022e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80022e4:	4b12      	ldr	r3, [pc, #72]	@ (8002330 <MX_I2C1_Init+0x50>)
 80022e6:	4a13      	ldr	r2, [pc, #76]	@ (8002334 <MX_I2C1_Init+0x54>)
 80022e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80022ea:	4b11      	ldr	r3, [pc, #68]	@ (8002330 <MX_I2C1_Init+0x50>)
 80022ec:	4a12      	ldr	r2, [pc, #72]	@ (8002338 <MX_I2C1_Init+0x58>)
 80022ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002330 <MX_I2C1_Init+0x50>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80022f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002330 <MX_I2C1_Init+0x50>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002330 <MX_I2C1_Init+0x50>)
 80022fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002302:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002304:	4b0a      	ldr	r3, [pc, #40]	@ (8002330 <MX_I2C1_Init+0x50>)
 8002306:	2200      	movs	r2, #0
 8002308:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800230a:	4b09      	ldr	r3, [pc, #36]	@ (8002330 <MX_I2C1_Init+0x50>)
 800230c:	2200      	movs	r2, #0
 800230e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002310:	4b07      	ldr	r3, [pc, #28]	@ (8002330 <MX_I2C1_Init+0x50>)
 8002312:	2200      	movs	r2, #0
 8002314:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002316:	4b06      	ldr	r3, [pc, #24]	@ (8002330 <MX_I2C1_Init+0x50>)
 8002318:	2200      	movs	r2, #0
 800231a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800231c:	4804      	ldr	r0, [pc, #16]	@ (8002330 <MX_I2C1_Init+0x50>)
 800231e:	f001 ff2b 	bl	8004178 <HAL_I2C_Init>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002328:	f000 fa58 	bl	80027dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800232c:	bf00      	nop
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20005260 	.word	0x20005260
 8002334:	40005400 	.word	0x40005400
 8002338:	000186a0 	.word	0x000186a0

0800233c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08c      	sub	sp, #48	@ 0x30
 8002340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002342:	f107 030c 	add.w	r3, r7, #12
 8002346:	2224      	movs	r2, #36	@ 0x24
 8002348:	2100      	movs	r1, #0
 800234a:	4618      	mov	r0, r3
 800234c:	f017 fa62 	bl	8019814 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002350:	1d3b      	adds	r3, r7, #4
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002358:	4b22      	ldr	r3, [pc, #136]	@ (80023e4 <MX_TIM1_Init+0xa8>)
 800235a:	4a23      	ldr	r2, [pc, #140]	@ (80023e8 <MX_TIM1_Init+0xac>)
 800235c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800235e:	4b21      	ldr	r3, [pc, #132]	@ (80023e4 <MX_TIM1_Init+0xa8>)
 8002360:	2200      	movs	r2, #0
 8002362:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002364:	4b1f      	ldr	r3, [pc, #124]	@ (80023e4 <MX_TIM1_Init+0xa8>)
 8002366:	2200      	movs	r2, #0
 8002368:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800236a:	4b1e      	ldr	r3, [pc, #120]	@ (80023e4 <MX_TIM1_Init+0xa8>)
 800236c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002370:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002372:	4b1c      	ldr	r3, [pc, #112]	@ (80023e4 <MX_TIM1_Init+0xa8>)
 8002374:	2200      	movs	r2, #0
 8002376:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002378:	4b1a      	ldr	r3, [pc, #104]	@ (80023e4 <MX_TIM1_Init+0xa8>)
 800237a:	2200      	movs	r2, #0
 800237c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800237e:	4b19      	ldr	r3, [pc, #100]	@ (80023e4 <MX_TIM1_Init+0xa8>)
 8002380:	2200      	movs	r2, #0
 8002382:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002384:	2303      	movs	r3, #3
 8002386:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002388:	2300      	movs	r3, #0
 800238a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800238c:	2301      	movs	r3, #1
 800238e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002390:	2300      	movs	r3, #0
 8002392:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002394:	2300      	movs	r3, #0
 8002396:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002398:	2300      	movs	r3, #0
 800239a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800239c:	2301      	movs	r3, #1
 800239e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023a0:	2300      	movs	r3, #0
 80023a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80023a4:	2300      	movs	r3, #0
 80023a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80023a8:	f107 030c 	add.w	r3, r7, #12
 80023ac:	4619      	mov	r1, r3
 80023ae:	480d      	ldr	r0, [pc, #52]	@ (80023e4 <MX_TIM1_Init+0xa8>)
 80023b0:	f002 ff92 	bl	80052d8 <HAL_TIM_Encoder_Init>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80023ba:	f000 fa0f 	bl	80027dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023be:	2300      	movs	r3, #0
 80023c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023c2:	2300      	movs	r3, #0
 80023c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023c6:	1d3b      	adds	r3, r7, #4
 80023c8:	4619      	mov	r1, r3
 80023ca:	4806      	ldr	r0, [pc, #24]	@ (80023e4 <MX_TIM1_Init+0xa8>)
 80023cc:	f003 fe70 	bl	80060b0 <HAL_TIMEx_MasterConfigSynchronization>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80023d6:	f000 fa01 	bl	80027dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80023da:	bf00      	nop
 80023dc:	3730      	adds	r7, #48	@ 0x30
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	200052b4 	.word	0x200052b4
 80023e8:	40010000 	.word	0x40010000

080023ec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023f2:	f107 0308 	add.w	r3, r7, #8
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	605a      	str	r2, [r3, #4]
 80023fc:	609a      	str	r2, [r3, #8]
 80023fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002400:	463b      	mov	r3, r7
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002408:	4b1d      	ldr	r3, [pc, #116]	@ (8002480 <MX_TIM4_Init+0x94>)
 800240a:	4a1e      	ldr	r2, [pc, #120]	@ (8002484 <MX_TIM4_Init+0x98>)
 800240c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 800240e:	4b1c      	ldr	r3, [pc, #112]	@ (8002480 <MX_TIM4_Init+0x94>)
 8002410:	220f      	movs	r2, #15
 8002412:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002414:	4b1a      	ldr	r3, [pc, #104]	@ (8002480 <MX_TIM4_Init+0x94>)
 8002416:	2200      	movs	r2, #0
 8002418:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 800241a:	4b19      	ldr	r3, [pc, #100]	@ (8002480 <MX_TIM4_Init+0x94>)
 800241c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002420:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002422:	4b17      	ldr	r3, [pc, #92]	@ (8002480 <MX_TIM4_Init+0x94>)
 8002424:	2200      	movs	r2, #0
 8002426:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002428:	4b15      	ldr	r3, [pc, #84]	@ (8002480 <MX_TIM4_Init+0x94>)
 800242a:	2200      	movs	r2, #0
 800242c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800242e:	4814      	ldr	r0, [pc, #80]	@ (8002480 <MX_TIM4_Init+0x94>)
 8002430:	f002 fd7a 	bl	8004f28 <HAL_TIM_Base_Init>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800243a:	f000 f9cf 	bl	80027dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800243e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002442:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002444:	f107 0308 	add.w	r3, r7, #8
 8002448:	4619      	mov	r1, r3
 800244a:	480d      	ldr	r0, [pc, #52]	@ (8002480 <MX_TIM4_Init+0x94>)
 800244c:	f003 fa2a 	bl	80058a4 <HAL_TIM_ConfigClockSource>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002456:	f000 f9c1 	bl	80027dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800245a:	2300      	movs	r3, #0
 800245c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800245e:	2300      	movs	r3, #0
 8002460:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002462:	463b      	mov	r3, r7
 8002464:	4619      	mov	r1, r3
 8002466:	4806      	ldr	r0, [pc, #24]	@ (8002480 <MX_TIM4_Init+0x94>)
 8002468:	f003 fe22 	bl	80060b0 <HAL_TIMEx_MasterConfigSynchronization>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002472:	f000 f9b3 	bl	80027dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002476:	bf00      	nop
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	200052fc 	.word	0x200052fc
 8002484:	40000800 	.word	0x40000800

08002488 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08a      	sub	sp, #40	@ 0x28
 800248c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800248e:	f107 0320 	add.w	r3, r7, #32
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002498:	1d3b      	adds	r3, r7, #4
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	605a      	str	r2, [r3, #4]
 80024a0:	609a      	str	r2, [r3, #8]
 80024a2:	60da      	str	r2, [r3, #12]
 80024a4:	611a      	str	r2, [r3, #16]
 80024a6:	615a      	str	r2, [r3, #20]
 80024a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80024aa:	4b27      	ldr	r3, [pc, #156]	@ (8002548 <MX_TIM5_Init+0xc0>)
 80024ac:	4a27      	ldr	r2, [pc, #156]	@ (800254c <MX_TIM5_Init+0xc4>)
 80024ae:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16-1;
 80024b0:	4b25      	ldr	r3, [pc, #148]	@ (8002548 <MX_TIM5_Init+0xc0>)
 80024b2:	220f      	movs	r2, #15
 80024b4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b6:	4b24      	ldr	r3, [pc, #144]	@ (8002548 <MX_TIM5_Init+0xc0>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000-1;
 80024bc:	4b22      	ldr	r3, [pc, #136]	@ (8002548 <MX_TIM5_Init+0xc0>)
 80024be:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80024c2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024c4:	4b20      	ldr	r3, [pc, #128]	@ (8002548 <MX_TIM5_Init+0xc0>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024ca:	4b1f      	ldr	r3, [pc, #124]	@ (8002548 <MX_TIM5_Init+0xc0>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80024d0:	481d      	ldr	r0, [pc, #116]	@ (8002548 <MX_TIM5_Init+0xc0>)
 80024d2:	f002 fde9 	bl	80050a8 <HAL_TIM_PWM_Init>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80024dc:	f000 f97e 	bl	80027dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024e0:	2300      	movs	r3, #0
 80024e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024e4:	2300      	movs	r3, #0
 80024e6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80024e8:	f107 0320 	add.w	r3, r7, #32
 80024ec:	4619      	mov	r1, r3
 80024ee:	4816      	ldr	r0, [pc, #88]	@ (8002548 <MX_TIM5_Init+0xc0>)
 80024f0:	f003 fdde 	bl	80060b0 <HAL_TIMEx_MasterConfigSynchronization>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80024fa:	f000 f96f 	bl	80027dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024fe:	2360      	movs	r3, #96	@ 0x60
 8002500:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002506:	2300      	movs	r3, #0
 8002508:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800250a:	2300      	movs	r3, #0
 800250c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800250e:	1d3b      	adds	r3, r7, #4
 8002510:	2200      	movs	r2, #0
 8002512:	4619      	mov	r1, r3
 8002514:	480c      	ldr	r0, [pc, #48]	@ (8002548 <MX_TIM5_Init+0xc0>)
 8002516:	f003 f903 	bl	8005720 <HAL_TIM_PWM_ConfigChannel>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002520:	f000 f95c 	bl	80027dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002524:	1d3b      	adds	r3, r7, #4
 8002526:	2204      	movs	r2, #4
 8002528:	4619      	mov	r1, r3
 800252a:	4807      	ldr	r0, [pc, #28]	@ (8002548 <MX_TIM5_Init+0xc0>)
 800252c:	f003 f8f8 	bl	8005720 <HAL_TIM_PWM_ConfigChannel>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002536:	f000 f951 	bl	80027dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800253a:	4803      	ldr	r0, [pc, #12]	@ (8002548 <MX_TIM5_Init+0xc0>)
 800253c:	f000 fbd4 	bl	8002ce8 <HAL_TIM_MspPostInit>

}
 8002540:	bf00      	nop
 8002542:	3728      	adds	r7, #40	@ 0x28
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	20005344 	.word	0x20005344
 800254c:	40000c00 	.word	0x40000c00

08002550 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b088      	sub	sp, #32
 8002554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002556:	1d3b      	adds	r3, r7, #4
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	605a      	str	r2, [r3, #4]
 800255e:	609a      	str	r2, [r3, #8]
 8002560:	60da      	str	r2, [r3, #12]
 8002562:	611a      	str	r2, [r3, #16]
 8002564:	615a      	str	r2, [r3, #20]
 8002566:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002568:	4b1a      	ldr	r3, [pc, #104]	@ (80025d4 <MX_TIM12_Init+0x84>)
 800256a:	4a1b      	ldr	r2, [pc, #108]	@ (80025d8 <MX_TIM12_Init+0x88>)
 800256c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 16-1;
 800256e:	4b19      	ldr	r3, [pc, #100]	@ (80025d4 <MX_TIM12_Init+0x84>)
 8002570:	220f      	movs	r2, #15
 8002572:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002574:	4b17      	ldr	r3, [pc, #92]	@ (80025d4 <MX_TIM12_Init+0x84>)
 8002576:	2200      	movs	r2, #0
 8002578:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 800257a:	4b16      	ldr	r3, [pc, #88]	@ (80025d4 <MX_TIM12_Init+0x84>)
 800257c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002580:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002582:	4b14      	ldr	r3, [pc, #80]	@ (80025d4 <MX_TIM12_Init+0x84>)
 8002584:	2200      	movs	r2, #0
 8002586:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002588:	4b12      	ldr	r3, [pc, #72]	@ (80025d4 <MX_TIM12_Init+0x84>)
 800258a:	2200      	movs	r2, #0
 800258c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800258e:	4811      	ldr	r0, [pc, #68]	@ (80025d4 <MX_TIM12_Init+0x84>)
 8002590:	f002 fd8a 	bl	80050a8 <HAL_TIM_PWM_Init>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800259a:	f000 f91f 	bl	80027dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800259e:	2360      	movs	r3, #96	@ 0x60
 80025a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80025a2:	2300      	movs	r3, #0
 80025a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025a6:	2300      	movs	r3, #0
 80025a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025ae:	1d3b      	adds	r3, r7, #4
 80025b0:	2200      	movs	r2, #0
 80025b2:	4619      	mov	r1, r3
 80025b4:	4807      	ldr	r0, [pc, #28]	@ (80025d4 <MX_TIM12_Init+0x84>)
 80025b6:	f003 f8b3 	bl	8005720 <HAL_TIM_PWM_ConfigChannel>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80025c0:	f000 f90c 	bl	80027dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80025c4:	4803      	ldr	r0, [pc, #12]	@ (80025d4 <MX_TIM12_Init+0x84>)
 80025c6:	f000 fb8f 	bl	8002ce8 <HAL_TIM_MspPostInit>

}
 80025ca:	bf00      	nop
 80025cc:	3720      	adds	r7, #32
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	2000538c 	.word	0x2000538c
 80025d8:	40001800 	.word	0x40001800

080025dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80025e0:	4b11      	ldr	r3, [pc, #68]	@ (8002628 <MX_USART2_UART_Init+0x4c>)
 80025e2:	4a12      	ldr	r2, [pc, #72]	@ (800262c <MX_USART2_UART_Init+0x50>)
 80025e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80025e6:	4b10      	ldr	r3, [pc, #64]	@ (8002628 <MX_USART2_UART_Init+0x4c>)
 80025e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80025ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002628 <MX_USART2_UART_Init+0x4c>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002628 <MX_USART2_UART_Init+0x4c>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002628 <MX_USART2_UART_Init+0x4c>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002600:	4b09      	ldr	r3, [pc, #36]	@ (8002628 <MX_USART2_UART_Init+0x4c>)
 8002602:	220c      	movs	r2, #12
 8002604:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002606:	4b08      	ldr	r3, [pc, #32]	@ (8002628 <MX_USART2_UART_Init+0x4c>)
 8002608:	2200      	movs	r2, #0
 800260a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800260c:	4b06      	ldr	r3, [pc, #24]	@ (8002628 <MX_USART2_UART_Init+0x4c>)
 800260e:	2200      	movs	r2, #0
 8002610:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002612:	4805      	ldr	r0, [pc, #20]	@ (8002628 <MX_USART2_UART_Init+0x4c>)
 8002614:	f003 fddc 	bl	80061d0 <HAL_UART_Init>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800261e:	f000 f8dd 	bl	80027dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	200053d4 	.word	0x200053d4
 800262c:	40004400 	.word	0x40004400

08002630 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002634:	4b10      	ldr	r3, [pc, #64]	@ (8002678 <MX_USART3_UART_Init+0x48>)
 8002636:	4a11      	ldr	r2, [pc, #68]	@ (800267c <MX_USART3_UART_Init+0x4c>)
 8002638:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 500000;
 800263a:	4b0f      	ldr	r3, [pc, #60]	@ (8002678 <MX_USART3_UART_Init+0x48>)
 800263c:	4a10      	ldr	r2, [pc, #64]	@ (8002680 <MX_USART3_UART_Init+0x50>)
 800263e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002640:	4b0d      	ldr	r3, [pc, #52]	@ (8002678 <MX_USART3_UART_Init+0x48>)
 8002642:	2200      	movs	r2, #0
 8002644:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002646:	4b0c      	ldr	r3, [pc, #48]	@ (8002678 <MX_USART3_UART_Init+0x48>)
 8002648:	2200      	movs	r2, #0
 800264a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800264c:	4b0a      	ldr	r3, [pc, #40]	@ (8002678 <MX_USART3_UART_Init+0x48>)
 800264e:	2200      	movs	r2, #0
 8002650:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002652:	4b09      	ldr	r3, [pc, #36]	@ (8002678 <MX_USART3_UART_Init+0x48>)
 8002654:	220c      	movs	r2, #12
 8002656:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002658:	4b07      	ldr	r3, [pc, #28]	@ (8002678 <MX_USART3_UART_Init+0x48>)
 800265a:	2200      	movs	r2, #0
 800265c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800265e:	4b06      	ldr	r3, [pc, #24]	@ (8002678 <MX_USART3_UART_Init+0x48>)
 8002660:	2200      	movs	r2, #0
 8002662:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002664:	4804      	ldr	r0, [pc, #16]	@ (8002678 <MX_USART3_UART_Init+0x48>)
 8002666:	f003 fdb3 	bl	80061d0 <HAL_UART_Init>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8002670:	f000 f8b4 	bl	80027dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002674:	bf00      	nop
 8002676:	bd80      	pop	{r7, pc}
 8002678:	2000541c 	.word	0x2000541c
 800267c:	40004800 	.word	0x40004800
 8002680:	0007a120 	.word	0x0007a120

08002684 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	607b      	str	r3, [r7, #4]
 800268e:	4b10      	ldr	r3, [pc, #64]	@ (80026d0 <MX_DMA_Init+0x4c>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002692:	4a0f      	ldr	r2, [pc, #60]	@ (80026d0 <MX_DMA_Init+0x4c>)
 8002694:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002698:	6313      	str	r3, [r2, #48]	@ 0x30
 800269a:	4b0d      	ldr	r3, [pc, #52]	@ (80026d0 <MX_DMA_Init+0x4c>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026a2:	607b      	str	r3, [r7, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80026a6:	2200      	movs	r2, #0
 80026a8:	2105      	movs	r1, #5
 80026aa:	2010      	movs	r0, #16
 80026ac:	f000 ff8a 	bl	80035c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80026b0:	2010      	movs	r0, #16
 80026b2:	f000 ffa3 	bl	80035fc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80026b6:	2200      	movs	r2, #0
 80026b8:	2105      	movs	r1, #5
 80026ba:	2011      	movs	r0, #17
 80026bc:	f000 ff82 	bl	80035c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80026c0:	2011      	movs	r0, #17
 80026c2:	f000 ff9b 	bl	80035fc <HAL_NVIC_EnableIRQ>

}
 80026c6:	bf00      	nop
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40023800 	.word	0x40023800

080026d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b08a      	sub	sp, #40	@ 0x28
 80026d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026da:	f107 0314 	add.w	r3, r7, #20
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	605a      	str	r2, [r3, #4]
 80026e4:	609a      	str	r2, [r3, #8]
 80026e6:	60da      	str	r2, [r3, #12]
 80026e8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	613b      	str	r3, [r7, #16]
 80026ee:	4b37      	ldr	r3, [pc, #220]	@ (80027cc <MX_GPIO_Init+0xf8>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f2:	4a36      	ldr	r2, [pc, #216]	@ (80027cc <MX_GPIO_Init+0xf8>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026fa:	4b34      	ldr	r3, [pc, #208]	@ (80027cc <MX_GPIO_Init+0xf8>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	613b      	str	r3, [r7, #16]
 8002704:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	4b30      	ldr	r3, [pc, #192]	@ (80027cc <MX_GPIO_Init+0xf8>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270e:	4a2f      	ldr	r2, [pc, #188]	@ (80027cc <MX_GPIO_Init+0xf8>)
 8002710:	f043 0304 	orr.w	r3, r3, #4
 8002714:	6313      	str	r3, [r2, #48]	@ 0x30
 8002716:	4b2d      	ldr	r3, [pc, #180]	@ (80027cc <MX_GPIO_Init+0xf8>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271a:	f003 0304 	and.w	r3, r3, #4
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	4b29      	ldr	r3, [pc, #164]	@ (80027cc <MX_GPIO_Init+0xf8>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272a:	4a28      	ldr	r2, [pc, #160]	@ (80027cc <MX_GPIO_Init+0xf8>)
 800272c:	f043 0302 	orr.w	r3, r3, #2
 8002730:	6313      	str	r3, [r2, #48]	@ 0x30
 8002732:	4b26      	ldr	r3, [pc, #152]	@ (80027cc <MX_GPIO_Init+0xf8>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	60bb      	str	r3, [r7, #8]
 800273c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	607b      	str	r3, [r7, #4]
 8002742:	4b22      	ldr	r3, [pc, #136]	@ (80027cc <MX_GPIO_Init+0xf8>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002746:	4a21      	ldr	r2, [pc, #132]	@ (80027cc <MX_GPIO_Init+0xf8>)
 8002748:	f043 0308 	orr.w	r3, r3, #8
 800274c:	6313      	str	r3, [r2, #48]	@ 0x30
 800274e:	4b1f      	ldr	r3, [pc, #124]	@ (80027cc <MX_GPIO_Init+0xf8>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002752:	f003 0308 	and.w	r3, r3, #8
 8002756:	607b      	str	r3, [r7, #4]
 8002758:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 800275a:	2200      	movs	r2, #0
 800275c:	2110      	movs	r1, #16
 800275e:	481c      	ldr	r0, [pc, #112]	@ (80027d0 <MX_GPIO_Init+0xfc>)
 8002760:	f001 fcf0 	bl	8004144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8002764:	2200      	movs	r2, #0
 8002766:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 800276a:	481a      	ldr	r0, [pc, #104]	@ (80027d4 <MX_GPIO_Init+0x100>)
 800276c:	f001 fcea 	bl	8004144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002770:	2310      	movs	r3, #16
 8002772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002774:	2301      	movs	r3, #1
 8002776:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002778:	2300      	movs	r3, #0
 800277a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277c:	2300      	movs	r3, #0
 800277e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002780:	f107 0314 	add.w	r3, r7, #20
 8002784:	4619      	mov	r1, r3
 8002786:	4812      	ldr	r0, [pc, #72]	@ (80027d0 <MX_GPIO_Init+0xfc>)
 8002788:	f001 fb48 	bl	8003e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800278c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002792:	2301      	movs	r3, #1
 8002794:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002796:	2300      	movs	r3, #0
 8002798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279a:	2300      	movs	r3, #0
 800279c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800279e:	f107 0314 	add.w	r3, r7, #20
 80027a2:	4619      	mov	r1, r3
 80027a4:	480b      	ldr	r0, [pc, #44]	@ (80027d4 <MX_GPIO_Init+0x100>)
 80027a6:	f001 fb39 	bl	8003e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80027aa:	2304      	movs	r3, #4
 80027ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027ae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80027b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027b8:	f107 0314 	add.w	r3, r7, #20
 80027bc:	4619      	mov	r1, r3
 80027be:	4806      	ldr	r0, [pc, #24]	@ (80027d8 <MX_GPIO_Init+0x104>)
 80027c0:	f001 fb2c 	bl	8003e1c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80027c4:	bf00      	nop
 80027c6:	3728      	adds	r7, #40	@ 0x28
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40023800 	.word	0x40023800
 80027d0:	40020800 	.word	0x40020800
 80027d4:	40020400 	.word	0x40020400
 80027d8:	40020c00 	.word	0x40020c00

080027dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80027e0:	b672      	cpsid	i
}
 80027e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027e4:	bf00      	nop
 80027e6:	e7fd      	b.n	80027e4 <Error_Handler+0x8>

080027e8 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80027f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002824 <microros_allocate+0x3c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	461a      	mov	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4413      	add	r3, r2
 80027fc:	461a      	mov	r2, r3
 80027fe:	4b09      	ldr	r3, [pc, #36]	@ (8002824 <microros_allocate+0x3c>)
 8002800:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002802:	4b09      	ldr	r3, [pc, #36]	@ (8002828 <microros_allocate+0x40>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	461a      	mov	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4413      	add	r3, r2
 800280c:	461a      	mov	r2, r3
 800280e:	4b06      	ldr	r3, [pc, #24]	@ (8002828 <microros_allocate+0x40>)
 8002810:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7ff f9da 	bl	8001bcc <pvPortMallocMicroROS>
 8002818:	4603      	mov	r3, r0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	20008464 	.word	0x20008464
 8002828:	20008468 	.word	0x20008468

0800282c <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00c      	beq.n	8002856 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f7ff fae9 	bl	8001e14 <getBlockSize>
 8002842:	4603      	mov	r3, r0
 8002844:	4a06      	ldr	r2, [pc, #24]	@ (8002860 <microros_deallocate+0x34>)
 8002846:	6812      	ldr	r2, [r2, #0]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	461a      	mov	r2, r3
 800284c:	4b04      	ldr	r3, [pc, #16]	@ (8002860 <microros_deallocate+0x34>)
 800284e:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f7ff fa83 	bl	8001d5c <vPortFreeMicroROS>
  }
}
 8002856:	bf00      	nop
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	20008468 	.word	0x20008468

08002864 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002870:	4b15      	ldr	r3, [pc, #84]	@ (80028c8 <microros_reallocate+0x64>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	461a      	mov	r2, r3
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	4413      	add	r3, r2
 800287a:	461a      	mov	r2, r3
 800287c:	4b12      	ldr	r3, [pc, #72]	@ (80028c8 <microros_reallocate+0x64>)
 800287e:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002880:	4b12      	ldr	r3, [pc, #72]	@ (80028cc <microros_reallocate+0x68>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	461a      	mov	r2, r3
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	4413      	add	r3, r2
 800288a:	461a      	mov	r2, r3
 800288c:	4b0f      	ldr	r3, [pc, #60]	@ (80028cc <microros_reallocate+0x68>)
 800288e:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d104      	bne.n	80028a0 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8002896:	68b8      	ldr	r0, [r7, #8]
 8002898:	f7ff f998 	bl	8001bcc <pvPortMallocMicroROS>
 800289c:	4603      	mov	r3, r0
 800289e:	e00e      	b.n	80028be <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f7ff fab7 	bl	8001e14 <getBlockSize>
 80028a6:	4603      	mov	r3, r0
 80028a8:	4a08      	ldr	r2, [pc, #32]	@ (80028cc <microros_reallocate+0x68>)
 80028aa:	6812      	ldr	r2, [r2, #0]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	461a      	mov	r2, r3
 80028b0:	4b06      	ldr	r3, [pc, #24]	@ (80028cc <microros_reallocate+0x68>)
 80028b2:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80028b4:	68b9      	ldr	r1, [r7, #8]
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f7ff faca 	bl	8001e50 <pvPortReallocMicroROS>
 80028bc:	4603      	mov	r3, r0
  }
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	20008464 	.word	0x20008464
 80028cc:	20008468 	.word	0x20008468

080028d0 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	fb02 f303 	mul.w	r3, r2, r3
 80028e4:	4a0c      	ldr	r2, [pc, #48]	@ (8002918 <microros_zero_allocate+0x48>)
 80028e6:	6812      	ldr	r2, [r2, #0]
 80028e8:	4413      	add	r3, r2
 80028ea:	461a      	mov	r2, r3
 80028ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002918 <microros_zero_allocate+0x48>)
 80028ee:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	fb02 f303 	mul.w	r3, r2, r3
 80028f8:	4a08      	ldr	r2, [pc, #32]	@ (800291c <microros_zero_allocate+0x4c>)
 80028fa:	6812      	ldr	r2, [r2, #0]
 80028fc:	4413      	add	r3, r2
 80028fe:	461a      	mov	r2, r3
 8002900:	4b06      	ldr	r3, [pc, #24]	@ (800291c <microros_zero_allocate+0x4c>)
 8002902:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002904:	68b9      	ldr	r1, [r7, #8]
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f7ff facf 	bl	8001eaa <pvPortCallocMicroROS>
 800290c:	4603      	mov	r3, r0
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	20008464 	.word	0x20008464
 800291c:	20008468 	.word	0x20008468

08002920 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002920:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002924:	b086      	sub	sp, #24
 8002926:	af00      	add	r7, sp, #0
 8002928:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800292c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002932:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002936:	a320      	add	r3, pc, #128	@ (adr r3, 80029b8 <UTILS_NanosecondsToTimespec+0x98>)
 8002938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293c:	f7fe f976 	bl	8000c2c <__aeabi_ldivmod>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800294a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800294e:	a31a      	add	r3, pc, #104	@ (adr r3, 80029b8 <UTILS_NanosecondsToTimespec+0x98>)
 8002950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002954:	f7fe f96a 	bl	8000c2c <__aeabi_ldivmod>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	2b00      	cmp	r3, #0
 8002962:	da20      	bge.n	80029a6 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	4a11      	ldr	r2, [pc, #68]	@ (80029b0 <UTILS_NanosecondsToTimespec+0x90>)
 800296a:	fb82 1203 	smull	r1, r2, r2, r3
 800296e:	1712      	asrs	r2, r2, #28
 8002970:	17db      	asrs	r3, r3, #31
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	3301      	adds	r3, #1
 8002976:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297e:	6979      	ldr	r1, [r7, #20]
 8002980:	17c8      	asrs	r0, r1, #31
 8002982:	460c      	mov	r4, r1
 8002984:	4605      	mov	r5, r0
 8002986:	ebb2 0804 	subs.w	r8, r2, r4
 800298a:	eb63 0905 	sbc.w	r9, r3, r5
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	4906      	ldr	r1, [pc, #24]	@ (80029b4 <UTILS_NanosecondsToTimespec+0x94>)
 800299c:	fb01 f303 	mul.w	r3, r1, r3
 80029a0:	441a      	add	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	609a      	str	r2, [r3, #8]
    }
}
 80029a6:	bf00      	nop
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80029b0:	44b82fa1 	.word	0x44b82fa1
 80029b4:	3b9aca00 	.word	0x3b9aca00
 80029b8:	3b9aca00 	.word	0x3b9aca00
 80029bc:	00000000 	.word	0x00000000

080029c0 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80029c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029c4:	b08e      	sub	sp, #56	@ 0x38
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80029ca:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80029cc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80029d0:	2300      	movs	r3, #0
 80029d2:	6013      	str	r3, [r2, #0]
 80029d4:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80029e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80029e6:	4618      	mov	r0, r3
 80029e8:	f006 fb50 	bl	800908c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80029ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ee:	17da      	asrs	r2, r3, #31
 80029f0:	61bb      	str	r3, [r7, #24]
 80029f2:	61fa      	str	r2, [r7, #28]
 80029f4:	f04f 0200 	mov.w	r2, #0
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	69b9      	ldr	r1, [r7, #24]
 80029fe:	000b      	movs	r3, r1
 8002a00:	2200      	movs	r2, #0
 8002a02:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a08:	2200      	movs	r2, #0
 8002a0a:	461c      	mov	r4, r3
 8002a0c:	4615      	mov	r5, r2
 8002a0e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002a12:	1911      	adds	r1, r2, r4
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	416b      	adcs	r3, r5
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002a1e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002a22:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002a26:	4602      	mov	r2, r0
 8002a28:	460b      	mov	r3, r1
 8002a2a:	f04f 0400 	mov.w	r4, #0
 8002a2e:	f04f 0500 	mov.w	r5, #0
 8002a32:	015d      	lsls	r5, r3, #5
 8002a34:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002a38:	0154      	lsls	r4, r2, #5
 8002a3a:	4622      	mov	r2, r4
 8002a3c:	462b      	mov	r3, r5
 8002a3e:	ebb2 0800 	subs.w	r8, r2, r0
 8002a42:	eb63 0901 	sbc.w	r9, r3, r1
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002a52:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002a56:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002a5a:	4690      	mov	r8, r2
 8002a5c:	4699      	mov	r9, r3
 8002a5e:	eb18 0a00 	adds.w	sl, r8, r0
 8002a62:	eb49 0b01 	adc.w	fp, r9, r1
 8002a66:	f04f 0200 	mov.w	r2, #0
 8002a6a:	f04f 0300 	mov.w	r3, #0
 8002a6e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a72:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a76:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a7a:	ebb2 040a 	subs.w	r4, r2, sl
 8002a7e:	603c      	str	r4, [r7, #0]
 8002a80:	eb63 030b 	sbc.w	r3, r3, fp
 8002a84:	607b      	str	r3, [r7, #4]
 8002a86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a8a:	4623      	mov	r3, r4
 8002a8c:	181b      	adds	r3, r3, r0
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	462b      	mov	r3, r5
 8002a92:	eb41 0303 	adc.w	r3, r1, r3
 8002a96:	617b      	str	r3, [r7, #20]
 8002a98:	6a3a      	ldr	r2, [r7, #32]
 8002a9a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a9e:	f7ff ff3f 	bl	8002920 <UTILS_NanosecondsToTimespec>

    return 0;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3738      	adds	r7, #56	@ 0x38
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002ab0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	607b      	str	r3, [r7, #4]
 8002aba:	4b12      	ldr	r3, [pc, #72]	@ (8002b04 <HAL_MspInit+0x54>)
 8002abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002abe:	4a11      	ldr	r2, [pc, #68]	@ (8002b04 <HAL_MspInit+0x54>)
 8002ac0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ac4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8002b04 <HAL_MspInit+0x54>)
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ace:	607b      	str	r3, [r7, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	603b      	str	r3, [r7, #0]
 8002ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8002b04 <HAL_MspInit+0x54>)
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ada:	4a0a      	ldr	r2, [pc, #40]	@ (8002b04 <HAL_MspInit+0x54>)
 8002adc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ae0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ae2:	4b08      	ldr	r3, [pc, #32]	@ (8002b04 <HAL_MspInit+0x54>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aea:	603b      	str	r3, [r7, #0]
 8002aec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002aee:	2200      	movs	r2, #0
 8002af0:	210f      	movs	r1, #15
 8002af2:	f06f 0001 	mvn.w	r0, #1
 8002af6:	f000 fd65 	bl	80035c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002afa:	bf00      	nop
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40023800 	.word	0x40023800

08002b08 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b08a      	sub	sp, #40	@ 0x28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b10:	f107 0314 	add.w	r3, r7, #20
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	605a      	str	r2, [r3, #4]
 8002b1a:	609a      	str	r2, [r3, #8]
 8002b1c:	60da      	str	r2, [r3, #12]
 8002b1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a19      	ldr	r2, [pc, #100]	@ (8002b8c <HAL_I2C_MspInit+0x84>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d12b      	bne.n	8002b82 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	613b      	str	r3, [r7, #16]
 8002b2e:	4b18      	ldr	r3, [pc, #96]	@ (8002b90 <HAL_I2C_MspInit+0x88>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b32:	4a17      	ldr	r2, [pc, #92]	@ (8002b90 <HAL_I2C_MspInit+0x88>)
 8002b34:	f043 0302 	orr.w	r3, r3, #2
 8002b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b3a:	4b15      	ldr	r3, [pc, #84]	@ (8002b90 <HAL_I2C_MspInit+0x88>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	613b      	str	r3, [r7, #16]
 8002b44:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b46:	23c0      	movs	r3, #192	@ 0xc0
 8002b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b4a:	2312      	movs	r3, #18
 8002b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b52:	2303      	movs	r3, #3
 8002b54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b56:	2304      	movs	r3, #4
 8002b58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b5a:	f107 0314 	add.w	r3, r7, #20
 8002b5e:	4619      	mov	r1, r3
 8002b60:	480c      	ldr	r0, [pc, #48]	@ (8002b94 <HAL_I2C_MspInit+0x8c>)
 8002b62:	f001 f95b 	bl	8003e1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	4b09      	ldr	r3, [pc, #36]	@ (8002b90 <HAL_I2C_MspInit+0x88>)
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6e:	4a08      	ldr	r2, [pc, #32]	@ (8002b90 <HAL_I2C_MspInit+0x88>)
 8002b70:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002b74:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b76:	4b06      	ldr	r3, [pc, #24]	@ (8002b90 <HAL_I2C_MspInit+0x88>)
 8002b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002b82:	bf00      	nop
 8002b84:	3728      	adds	r7, #40	@ 0x28
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40005400 	.word	0x40005400
 8002b90:	40023800 	.word	0x40023800
 8002b94:	40020400 	.word	0x40020400

08002b98 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b08a      	sub	sp, #40	@ 0x28
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba0:	f107 0314 	add.w	r3, r7, #20
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	605a      	str	r2, [r3, #4]
 8002baa:	609a      	str	r2, [r3, #8]
 8002bac:	60da      	str	r2, [r3, #12]
 8002bae:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a19      	ldr	r2, [pc, #100]	@ (8002c1c <HAL_TIM_Encoder_MspInit+0x84>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d12c      	bne.n	8002c14 <HAL_TIM_Encoder_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	613b      	str	r3, [r7, #16]
 8002bbe:	4b18      	ldr	r3, [pc, #96]	@ (8002c20 <HAL_TIM_Encoder_MspInit+0x88>)
 8002bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc2:	4a17      	ldr	r2, [pc, #92]	@ (8002c20 <HAL_TIM_Encoder_MspInit+0x88>)
 8002bc4:	f043 0301 	orr.w	r3, r3, #1
 8002bc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bca:	4b15      	ldr	r3, [pc, #84]	@ (8002c20 <HAL_TIM_Encoder_MspInit+0x88>)
 8002bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	613b      	str	r3, [r7, #16]
 8002bd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	4b11      	ldr	r3, [pc, #68]	@ (8002c20 <HAL_TIM_Encoder_MspInit+0x88>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bde:	4a10      	ldr	r2, [pc, #64]	@ (8002c20 <HAL_TIM_Encoder_MspInit+0x88>)
 8002be0:	f043 0301 	orr.w	r3, r3, #1
 8002be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002be6:	4b0e      	ldr	r3, [pc, #56]	@ (8002c20 <HAL_TIM_Encoder_MspInit+0x88>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002bf2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c00:	2300      	movs	r3, #0
 8002c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c04:	2301      	movs	r3, #1
 8002c06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c08:	f107 0314 	add.w	r3, r7, #20
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4805      	ldr	r0, [pc, #20]	@ (8002c24 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002c10:	f001 f904 	bl	8003e1c <HAL_GPIO_Init>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002c14:	bf00      	nop
 8002c16:	3728      	adds	r7, #40	@ 0x28
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40010000 	.word	0x40010000
 8002c20:	40023800 	.word	0x40023800
 8002c24:	40020000 	.word	0x40020000

08002c28 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a0e      	ldr	r2, [pc, #56]	@ (8002c70 <HAL_TIM_Base_MspInit+0x48>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d115      	bne.n	8002c66 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60fb      	str	r3, [r7, #12]
 8002c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c74 <HAL_TIM_Base_MspInit+0x4c>)
 8002c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c42:	4a0c      	ldr	r2, [pc, #48]	@ (8002c74 <HAL_TIM_Base_MspInit+0x4c>)
 8002c44:	f043 0304 	orr.w	r3, r3, #4
 8002c48:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c74 <HAL_TIM_Base_MspInit+0x4c>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4e:	f003 0304 	and.w	r3, r3, #4
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002c56:	2200      	movs	r2, #0
 8002c58:	2105      	movs	r1, #5
 8002c5a:	201e      	movs	r0, #30
 8002c5c:	f000 fcb2 	bl	80035c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002c60:	201e      	movs	r0, #30
 8002c62:	f000 fccb 	bl	80035fc <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8002c66:	bf00      	nop
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40000800 	.word	0x40000800
 8002c74:	40023800 	.word	0x40023800

08002c78 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a15      	ldr	r2, [pc, #84]	@ (8002cdc <HAL_TIM_PWM_MspInit+0x64>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d10e      	bne.n	8002ca8 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	4b14      	ldr	r3, [pc, #80]	@ (8002ce0 <HAL_TIM_PWM_MspInit+0x68>)
 8002c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c92:	4a13      	ldr	r2, [pc, #76]	@ (8002ce0 <HAL_TIM_PWM_MspInit+0x68>)
 8002c94:	f043 0308 	orr.w	r3, r3, #8
 8002c98:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c9a:	4b11      	ldr	r3, [pc, #68]	@ (8002ce0 <HAL_TIM_PWM_MspInit+0x68>)
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9e:	f003 0308 	and.w	r3, r3, #8
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM12_MspInit 1 */

    /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002ca6:	e012      	b.n	8002cce <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM12)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a0d      	ldr	r2, [pc, #52]	@ (8002ce4 <HAL_TIM_PWM_MspInit+0x6c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d10d      	bne.n	8002cce <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60bb      	str	r3, [r7, #8]
 8002cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce0 <HAL_TIM_PWM_MspInit+0x68>)
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cba:	4a09      	ldr	r2, [pc, #36]	@ (8002ce0 <HAL_TIM_PWM_MspInit+0x68>)
 8002cbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002cc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cc2:	4b07      	ldr	r3, [pc, #28]	@ (8002ce0 <HAL_TIM_PWM_MspInit+0x68>)
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cca:	60bb      	str	r3, [r7, #8]
 8002ccc:	68bb      	ldr	r3, [r7, #8]
}
 8002cce:	bf00      	nop
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	40000c00 	.word	0x40000c00
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	40001800 	.word	0x40001800

08002ce8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08a      	sub	sp, #40	@ 0x28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf0:	f107 0314 	add.w	r3, r7, #20
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	605a      	str	r2, [r3, #4]
 8002cfa:	609a      	str	r2, [r3, #8]
 8002cfc:	60da      	str	r2, [r3, #12]
 8002cfe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a24      	ldr	r2, [pc, #144]	@ (8002d98 <HAL_TIM_MspPostInit+0xb0>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d11e      	bne.n	8002d48 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM5_MspPostInit 0 */

    /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	613b      	str	r3, [r7, #16]
 8002d0e:	4b23      	ldr	r3, [pc, #140]	@ (8002d9c <HAL_TIM_MspPostInit+0xb4>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d12:	4a22      	ldr	r2, [pc, #136]	@ (8002d9c <HAL_TIM_MspPostInit+0xb4>)
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d1a:	4b20      	ldr	r3, [pc, #128]	@ (8002d9c <HAL_TIM_MspPostInit+0xb4>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	613b      	str	r3, [r7, #16]
 8002d24:	693b      	ldr	r3, [r7, #16]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d26:	2303      	movs	r3, #3
 8002d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d32:	2300      	movs	r3, #0
 8002d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002d36:	2302      	movs	r3, #2
 8002d38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d3a:	f107 0314 	add.w	r3, r7, #20
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4817      	ldr	r0, [pc, #92]	@ (8002da0 <HAL_TIM_MspPostInit+0xb8>)
 8002d42:	f001 f86b 	bl	8003e1c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM12_MspPostInit 1 */

    /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002d46:	e023      	b.n	8002d90 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM12)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a15      	ldr	r2, [pc, #84]	@ (8002da4 <HAL_TIM_MspPostInit+0xbc>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d11e      	bne.n	8002d90 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	4b11      	ldr	r3, [pc, #68]	@ (8002d9c <HAL_TIM_MspPostInit+0xb4>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5a:	4a10      	ldr	r2, [pc, #64]	@ (8002d9c <HAL_TIM_MspPostInit+0xb4>)
 8002d5c:	f043 0302 	orr.w	r3, r3, #2
 8002d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d62:	4b0e      	ldr	r3, [pc, #56]	@ (8002d9c <HAL_TIM_MspPostInit+0xb4>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002d6e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d74:	2302      	movs	r3, #2
 8002d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002d80:	2309      	movs	r3, #9
 8002d82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d84:	f107 0314 	add.w	r3, r7, #20
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4807      	ldr	r0, [pc, #28]	@ (8002da8 <HAL_TIM_MspPostInit+0xc0>)
 8002d8c:	f001 f846 	bl	8003e1c <HAL_GPIO_Init>
}
 8002d90:	bf00      	nop
 8002d92:	3728      	adds	r7, #40	@ 0x28
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40000c00 	.word	0x40000c00
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	40020000 	.word	0x40020000
 8002da4:	40001800 	.word	0x40001800
 8002da8:	40020400 	.word	0x40020400

08002dac <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08c      	sub	sp, #48	@ 0x30
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db4:	f107 031c 	add.w	r3, r7, #28
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	605a      	str	r2, [r3, #4]
 8002dbe:	609a      	str	r2, [r3, #8]
 8002dc0:	60da      	str	r2, [r3, #12]
 8002dc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a75      	ldr	r2, [pc, #468]	@ (8002fa0 <HAL_UART_MspInit+0x1f4>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	f040 8094 	bne.w	8002ef8 <HAL_UART_MspInit+0x14c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	61bb      	str	r3, [r7, #24]
 8002dd4:	4b73      	ldr	r3, [pc, #460]	@ (8002fa4 <HAL_UART_MspInit+0x1f8>)
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd8:	4a72      	ldr	r2, [pc, #456]	@ (8002fa4 <HAL_UART_MspInit+0x1f8>)
 8002dda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dde:	6413      	str	r3, [r2, #64]	@ 0x40
 8002de0:	4b70      	ldr	r3, [pc, #448]	@ (8002fa4 <HAL_UART_MspInit+0x1f8>)
 8002de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002de8:	61bb      	str	r3, [r7, #24]
 8002dea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dec:	2300      	movs	r3, #0
 8002dee:	617b      	str	r3, [r7, #20]
 8002df0:	4b6c      	ldr	r3, [pc, #432]	@ (8002fa4 <HAL_UART_MspInit+0x1f8>)
 8002df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df4:	4a6b      	ldr	r2, [pc, #428]	@ (8002fa4 <HAL_UART_MspInit+0x1f8>)
 8002df6:	f043 0301 	orr.w	r3, r3, #1
 8002dfa:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dfc:	4b69      	ldr	r3, [pc, #420]	@ (8002fa4 <HAL_UART_MspInit+0x1f8>)
 8002dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	617b      	str	r3, [r7, #20]
 8002e06:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002e08:	230c      	movs	r3, #12
 8002e0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e10:	2300      	movs	r3, #0
 8002e12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e14:	2303      	movs	r3, #3
 8002e16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e18:	2307      	movs	r3, #7
 8002e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e1c:	f107 031c 	add.w	r3, r7, #28
 8002e20:	4619      	mov	r1, r3
 8002e22:	4861      	ldr	r0, [pc, #388]	@ (8002fa8 <HAL_UART_MspInit+0x1fc>)
 8002e24:	f000 fffa 	bl	8003e1c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002e28:	4b60      	ldr	r3, [pc, #384]	@ (8002fac <HAL_UART_MspInit+0x200>)
 8002e2a:	4a61      	ldr	r2, [pc, #388]	@ (8002fb0 <HAL_UART_MspInit+0x204>)
 8002e2c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002e2e:	4b5f      	ldr	r3, [pc, #380]	@ (8002fac <HAL_UART_MspInit+0x200>)
 8002e30:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002e34:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e36:	4b5d      	ldr	r3, [pc, #372]	@ (8002fac <HAL_UART_MspInit+0x200>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e3c:	4b5b      	ldr	r3, [pc, #364]	@ (8002fac <HAL_UART_MspInit+0x200>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e42:	4b5a      	ldr	r3, [pc, #360]	@ (8002fac <HAL_UART_MspInit+0x200>)
 8002e44:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e48:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e4a:	4b58      	ldr	r3, [pc, #352]	@ (8002fac <HAL_UART_MspInit+0x200>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e50:	4b56      	ldr	r3, [pc, #344]	@ (8002fac <HAL_UART_MspInit+0x200>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002e56:	4b55      	ldr	r3, [pc, #340]	@ (8002fac <HAL_UART_MspInit+0x200>)
 8002e58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e5c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002e5e:	4b53      	ldr	r3, [pc, #332]	@ (8002fac <HAL_UART_MspInit+0x200>)
 8002e60:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002e64:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e66:	4b51      	ldr	r3, [pc, #324]	@ (8002fac <HAL_UART_MspInit+0x200>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002e6c:	484f      	ldr	r0, [pc, #316]	@ (8002fac <HAL_UART_MspInit+0x200>)
 8002e6e:	f000 fbd3 	bl	8003618 <HAL_DMA_Init>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002e78:	f7ff fcb0 	bl	80027dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a4b      	ldr	r2, [pc, #300]	@ (8002fac <HAL_UART_MspInit+0x200>)
 8002e80:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002e82:	4a4a      	ldr	r2, [pc, #296]	@ (8002fac <HAL_UART_MspInit+0x200>)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002e88:	4b4a      	ldr	r3, [pc, #296]	@ (8002fb4 <HAL_UART_MspInit+0x208>)
 8002e8a:	4a4b      	ldr	r2, [pc, #300]	@ (8002fb8 <HAL_UART_MspInit+0x20c>)
 8002e8c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002e8e:	4b49      	ldr	r3, [pc, #292]	@ (8002fb4 <HAL_UART_MspInit+0x208>)
 8002e90:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002e94:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e96:	4b47      	ldr	r3, [pc, #284]	@ (8002fb4 <HAL_UART_MspInit+0x208>)
 8002e98:	2240      	movs	r2, #64	@ 0x40
 8002e9a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e9c:	4b45      	ldr	r3, [pc, #276]	@ (8002fb4 <HAL_UART_MspInit+0x208>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ea2:	4b44      	ldr	r3, [pc, #272]	@ (8002fb4 <HAL_UART_MspInit+0x208>)
 8002ea4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ea8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002eaa:	4b42      	ldr	r3, [pc, #264]	@ (8002fb4 <HAL_UART_MspInit+0x208>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002eb0:	4b40      	ldr	r3, [pc, #256]	@ (8002fb4 <HAL_UART_MspInit+0x208>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002eb6:	4b3f      	ldr	r3, [pc, #252]	@ (8002fb4 <HAL_UART_MspInit+0x208>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002ebc:	4b3d      	ldr	r3, [pc, #244]	@ (8002fb4 <HAL_UART_MspInit+0x208>)
 8002ebe:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002ec2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ec4:	4b3b      	ldr	r3, [pc, #236]	@ (8002fb4 <HAL_UART_MspInit+0x208>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002eca:	483a      	ldr	r0, [pc, #232]	@ (8002fb4 <HAL_UART_MspInit+0x208>)
 8002ecc:	f000 fba4 	bl	8003618 <HAL_DMA_Init>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8002ed6:	f7ff fc81 	bl	80027dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a35      	ldr	r2, [pc, #212]	@ (8002fb4 <HAL_UART_MspInit+0x208>)
 8002ede:	639a      	str	r2, [r3, #56]	@ 0x38
 8002ee0:	4a34      	ldr	r2, [pc, #208]	@ (8002fb4 <HAL_UART_MspInit+0x208>)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2105      	movs	r1, #5
 8002eea:	2026      	movs	r0, #38	@ 0x26
 8002eec:	f000 fb6a 	bl	80035c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002ef0:	2026      	movs	r0, #38	@ 0x26
 8002ef2:	f000 fb83 	bl	80035fc <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8002ef6:	e04f      	b.n	8002f98 <HAL_UART_MspInit+0x1ec>
  else if(huart->Instance==USART3)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a2f      	ldr	r2, [pc, #188]	@ (8002fbc <HAL_UART_MspInit+0x210>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d14a      	bne.n	8002f98 <HAL_UART_MspInit+0x1ec>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f02:	2300      	movs	r3, #0
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	4b27      	ldr	r3, [pc, #156]	@ (8002fa4 <HAL_UART_MspInit+0x1f8>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0a:	4a26      	ldr	r2, [pc, #152]	@ (8002fa4 <HAL_UART_MspInit+0x1f8>)
 8002f0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f10:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f12:	4b24      	ldr	r3, [pc, #144]	@ (8002fa4 <HAL_UART_MspInit+0x1f8>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f1a:	613b      	str	r3, [r7, #16]
 8002f1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	4b20      	ldr	r3, [pc, #128]	@ (8002fa4 <HAL_UART_MspInit+0x1f8>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f26:	4a1f      	ldr	r2, [pc, #124]	@ (8002fa4 <HAL_UART_MspInit+0x1f8>)
 8002f28:	f043 0304 	orr.w	r3, r3, #4
 8002f2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f2e:	4b1d      	ldr	r3, [pc, #116]	@ (8002fa4 <HAL_UART_MspInit+0x1f8>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f32:	f003 0304 	and.w	r3, r3, #4
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60bb      	str	r3, [r7, #8]
 8002f3e:	4b19      	ldr	r3, [pc, #100]	@ (8002fa4 <HAL_UART_MspInit+0x1f8>)
 8002f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f42:	4a18      	ldr	r2, [pc, #96]	@ (8002fa4 <HAL_UART_MspInit+0x1f8>)
 8002f44:	f043 0302 	orr.w	r3, r3, #2
 8002f48:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f4a:	4b16      	ldr	r3, [pc, #88]	@ (8002fa4 <HAL_UART_MspInit+0x1f8>)
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	60bb      	str	r3, [r7, #8]
 8002f54:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002f56:	2320      	movs	r3, #32
 8002f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f62:	2303      	movs	r3, #3
 8002f64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f66:	2307      	movs	r3, #7
 8002f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f6a:	f107 031c 	add.w	r3, r7, #28
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4813      	ldr	r0, [pc, #76]	@ (8002fc0 <HAL_UART_MspInit+0x214>)
 8002f72:	f000 ff53 	bl	8003e1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f80:	2300      	movs	r3, #0
 8002f82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f84:	2303      	movs	r3, #3
 8002f86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f88:	2307      	movs	r3, #7
 8002f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f8c:	f107 031c 	add.w	r3, r7, #28
 8002f90:	4619      	mov	r1, r3
 8002f92:	480c      	ldr	r0, [pc, #48]	@ (8002fc4 <HAL_UART_MspInit+0x218>)
 8002f94:	f000 ff42 	bl	8003e1c <HAL_GPIO_Init>
}
 8002f98:	bf00      	nop
 8002f9a:	3730      	adds	r7, #48	@ 0x30
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40004400 	.word	0x40004400
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	40020000 	.word	0x40020000
 8002fac:	20005464 	.word	0x20005464
 8002fb0:	40026088 	.word	0x40026088
 8002fb4:	200054c4 	.word	0x200054c4
 8002fb8:	400260a0 	.word	0x400260a0
 8002fbc:	40004800 	.word	0x40004800
 8002fc0:	40020800 	.word	0x40020800
 8002fc4:	40020400 	.word	0x40020400

08002fc8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08e      	sub	sp, #56	@ 0x38
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002fd8:	2300      	movs	r3, #0
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	4b33      	ldr	r3, [pc, #204]	@ (80030ac <HAL_InitTick+0xe4>)
 8002fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe0:	4a32      	ldr	r2, [pc, #200]	@ (80030ac <HAL_InitTick+0xe4>)
 8002fe2:	f043 0310 	orr.w	r3, r3, #16
 8002fe6:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fe8:	4b30      	ldr	r3, [pc, #192]	@ (80030ac <HAL_InitTick+0xe4>)
 8002fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fec:	f003 0310 	and.w	r3, r3, #16
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ff4:	f107 0210 	add.w	r2, r7, #16
 8002ff8:	f107 0314 	add.w	r3, r7, #20
 8002ffc:	4611      	mov	r1, r2
 8002ffe:	4618      	mov	r0, r3
 8003000:	f001 fb18 	bl	8004634 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003004:	6a3b      	ldr	r3, [r7, #32]
 8003006:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800300a:	2b00      	cmp	r3, #0
 800300c:	d103      	bne.n	8003016 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800300e:	f001 fae9 	bl	80045e4 <HAL_RCC_GetPCLK1Freq>
 8003012:	6378      	str	r0, [r7, #52]	@ 0x34
 8003014:	e004      	b.n	8003020 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003016:	f001 fae5 	bl	80045e4 <HAL_RCC_GetPCLK1Freq>
 800301a:	4603      	mov	r3, r0
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003022:	4a23      	ldr	r2, [pc, #140]	@ (80030b0 <HAL_InitTick+0xe8>)
 8003024:	fba2 2303 	umull	r2, r3, r2, r3
 8003028:	0c9b      	lsrs	r3, r3, #18
 800302a:	3b01      	subs	r3, #1
 800302c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800302e:	4b21      	ldr	r3, [pc, #132]	@ (80030b4 <HAL_InitTick+0xec>)
 8003030:	4a21      	ldr	r2, [pc, #132]	@ (80030b8 <HAL_InitTick+0xf0>)
 8003032:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003034:	4b1f      	ldr	r3, [pc, #124]	@ (80030b4 <HAL_InitTick+0xec>)
 8003036:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800303a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800303c:	4a1d      	ldr	r2, [pc, #116]	@ (80030b4 <HAL_InitTick+0xec>)
 800303e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003040:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003042:	4b1c      	ldr	r3, [pc, #112]	@ (80030b4 <HAL_InitTick+0xec>)
 8003044:	2200      	movs	r2, #0
 8003046:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003048:	4b1a      	ldr	r3, [pc, #104]	@ (80030b4 <HAL_InitTick+0xec>)
 800304a:	2200      	movs	r2, #0
 800304c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800304e:	4b19      	ldr	r3, [pc, #100]	@ (80030b4 <HAL_InitTick+0xec>)
 8003050:	2200      	movs	r2, #0
 8003052:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003054:	4817      	ldr	r0, [pc, #92]	@ (80030b4 <HAL_InitTick+0xec>)
 8003056:	f001 ff67 	bl	8004f28 <HAL_TIM_Base_Init>
 800305a:	4603      	mov	r3, r0
 800305c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003060:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003064:	2b00      	cmp	r3, #0
 8003066:	d11b      	bne.n	80030a0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003068:	4812      	ldr	r0, [pc, #72]	@ (80030b4 <HAL_InitTick+0xec>)
 800306a:	f001 ffad 	bl	8004fc8 <HAL_TIM_Base_Start_IT>
 800306e:	4603      	mov	r3, r0
 8003070:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003074:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003078:	2b00      	cmp	r3, #0
 800307a:	d111      	bne.n	80030a0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800307c:	2036      	movs	r0, #54	@ 0x36
 800307e:	f000 fabd 	bl	80035fc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b0f      	cmp	r3, #15
 8003086:	d808      	bhi.n	800309a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003088:	2200      	movs	r2, #0
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	2036      	movs	r0, #54	@ 0x36
 800308e:	f000 fa99 	bl	80035c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003092:	4a0a      	ldr	r2, [pc, #40]	@ (80030bc <HAL_InitTick+0xf4>)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6013      	str	r3, [r2, #0]
 8003098:	e002      	b.n	80030a0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80030a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3738      	adds	r7, #56	@ 0x38
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40023800 	.word	0x40023800
 80030b0:	431bde83 	.word	0x431bde83
 80030b4:	2000846c 	.word	0x2000846c
 80030b8:	40001000 	.word	0x40001000
 80030bc:	2000001c 	.word	0x2000001c

080030c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80030c4:	bf00      	nop
 80030c6:	e7fd      	b.n	80030c4 <NMI_Handler+0x4>

080030c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030cc:	bf00      	nop
 80030ce:	e7fd      	b.n	80030cc <HardFault_Handler+0x4>

080030d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030d4:	bf00      	nop
 80030d6:	e7fd      	b.n	80030d4 <MemManage_Handler+0x4>

080030d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030dc:	bf00      	nop
 80030de:	e7fd      	b.n	80030dc <BusFault_Handler+0x4>

080030e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030e4:	bf00      	nop
 80030e6:	e7fd      	b.n	80030e4 <UsageFault_Handler+0x4>

080030e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030ec:	bf00      	nop
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
	...

080030f8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80030fc:	4802      	ldr	r0, [pc, #8]	@ (8003108 <DMA1_Stream5_IRQHandler+0x10>)
 80030fe:	f000 fc23 	bl	8003948 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003102:	bf00      	nop
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	20005464 	.word	0x20005464

0800310c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003110:	4802      	ldr	r0, [pc, #8]	@ (800311c <DMA1_Stream6_IRQHandler+0x10>)
 8003112:	f000 fc19 	bl	8003948 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003116:	bf00      	nop
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	200054c4 	.word	0x200054c4

08003120 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003124:	4802      	ldr	r0, [pc, #8]	@ (8003130 <TIM4_IRQHandler+0x10>)
 8003126:	f002 fa0b 	bl	8005540 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800312a:	bf00      	nop
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	200052fc 	.word	0x200052fc

08003134 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003138:	4802      	ldr	r0, [pc, #8]	@ (8003144 <USART2_IRQHandler+0x10>)
 800313a:	f003 fa45 	bl	80065c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800313e:	bf00      	nop
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	200053d4 	.word	0x200053d4

08003148 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800314c:	4802      	ldr	r0, [pc, #8]	@ (8003158 <TIM6_DAC_IRQHandler+0x10>)
 800314e:	f002 f9f7 	bl	8005540 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003152:	bf00      	nop
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	2000846c 	.word	0x2000846c

0800315c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  return 1;
 8003160:	2301      	movs	r3, #1
}
 8003162:	4618      	mov	r0, r3
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <_kill>:

int _kill(int pid, int sig)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003176:	f016 fbe1 	bl	801993c <__errno>
 800317a:	4603      	mov	r3, r0
 800317c:	2216      	movs	r2, #22
 800317e:	601a      	str	r2, [r3, #0]
  return -1;
 8003180:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003184:	4618      	mov	r0, r3
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <_exit>:

void _exit (int status)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003194:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7ff ffe7 	bl	800316c <_kill>
  while (1) {}    /* Make sure we hang here */
 800319e:	bf00      	nop
 80031a0:	e7fd      	b.n	800319e <_exit+0x12>

080031a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b086      	sub	sp, #24
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	60f8      	str	r0, [r7, #12]
 80031aa:	60b9      	str	r1, [r7, #8]
 80031ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ae:	2300      	movs	r3, #0
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	e00a      	b.n	80031ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80031b4:	f3af 8000 	nop.w
 80031b8:	4601      	mov	r1, r0
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	1c5a      	adds	r2, r3, #1
 80031be:	60ba      	str	r2, [r7, #8]
 80031c0:	b2ca      	uxtb	r2, r1
 80031c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	3301      	adds	r3, #1
 80031c8:	617b      	str	r3, [r7, #20]
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	dbf0      	blt.n	80031b4 <_read+0x12>
  }

  return len;
 80031d2:	687b      	ldr	r3, [r7, #4]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3718      	adds	r7, #24
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031e8:	2300      	movs	r3, #0
 80031ea:	617b      	str	r3, [r7, #20]
 80031ec:	e009      	b.n	8003202 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	1c5a      	adds	r2, r3, #1
 80031f2:	60ba      	str	r2, [r7, #8]
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	3301      	adds	r3, #1
 8003200:	617b      	str	r3, [r7, #20]
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	429a      	cmp	r2, r3
 8003208:	dbf1      	blt.n	80031ee <_write+0x12>
  }
  return len;
 800320a:	687b      	ldr	r3, [r7, #4]
}
 800320c:	4618      	mov	r0, r3
 800320e:	3718      	adds	r7, #24
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <_close>:

int _close(int file)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800321c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003220:	4618      	mov	r0, r3
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800323c:	605a      	str	r2, [r3, #4]
  return 0;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <_isatty>:

int _isatty(int file)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003254:	2301      	movs	r3, #1
}
 8003256:	4618      	mov	r0, r3
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003262:	b480      	push	{r7}
 8003264:	b085      	sub	sp, #20
 8003266:	af00      	add	r7, sp, #0
 8003268:	60f8      	str	r0, [r7, #12]
 800326a:	60b9      	str	r1, [r7, #8]
 800326c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003284:	4a14      	ldr	r2, [pc, #80]	@ (80032d8 <_sbrk+0x5c>)
 8003286:	4b15      	ldr	r3, [pc, #84]	@ (80032dc <_sbrk+0x60>)
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003290:	4b13      	ldr	r3, [pc, #76]	@ (80032e0 <_sbrk+0x64>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d102      	bne.n	800329e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003298:	4b11      	ldr	r3, [pc, #68]	@ (80032e0 <_sbrk+0x64>)
 800329a:	4a12      	ldr	r2, [pc, #72]	@ (80032e4 <_sbrk+0x68>)
 800329c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800329e:	4b10      	ldr	r3, [pc, #64]	@ (80032e0 <_sbrk+0x64>)
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4413      	add	r3, r2
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d207      	bcs.n	80032bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032ac:	f016 fb46 	bl	801993c <__errno>
 80032b0:	4603      	mov	r3, r0
 80032b2:	220c      	movs	r2, #12
 80032b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80032ba:	e009      	b.n	80032d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032bc:	4b08      	ldr	r3, [pc, #32]	@ (80032e0 <_sbrk+0x64>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032c2:	4b07      	ldr	r3, [pc, #28]	@ (80032e0 <_sbrk+0x64>)
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4413      	add	r3, r2
 80032ca:	4a05      	ldr	r2, [pc, #20]	@ (80032e0 <_sbrk+0x64>)
 80032cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032ce:	68fb      	ldr	r3, [r7, #12]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3718      	adds	r7, #24
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	20020000 	.word	0x20020000
 80032dc:	00000400 	.word	0x00000400
 80032e0:	200084b8 	.word	0x200084b8
 80032e4:	20011ad8 	.word	0x20011ad8

080032e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032ec:	4b06      	ldr	r3, [pc, #24]	@ (8003308 <SystemInit+0x20>)
 80032ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032f2:	4a05      	ldr	r2, [pc, #20]	@ (8003308 <SystemInit+0x20>)
 80032f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80032f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032fc:	bf00      	nop
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	e000ed00 	.word	0xe000ed00

0800330c <StartDefaultTask>:
//TimerHandle_t xTimer;

//void motorTimerCallback(TimerHandle_t xTimer);

void StartDefaultTask(void *argument)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
//    xTimer = xTimerCreate("MotorTimer", pdMS_TO_TICKS(1), pdTRUE, (void *)0, motorTimerCallback);
//    xTimerStart(xTimer, 0);
//    HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
	HAL_TIM_Base_Start_IT(&htim4);
 8003314:	4807      	ldr	r0, [pc, #28]	@ (8003334 <StartDefaultTask+0x28>)
 8003316:	f001 fe57 	bl	8004fc8 <HAL_TIM_Base_Start_IT>
	uros_init();
 800331a:	f7fe f88b 	bl	8001434 <uros_init>
	arm_reset();
 800331e:	f7fd ff1f 	bl	8001160 <arm_reset>
    motor_init();
 8003322:	f7fe f84d 	bl	80013c0 <motor_init>
//    uros_init();
//    trace_init();

    for(;;)
    {
        uros_agent_status_check();
 8003326:	f7fe f8c5 	bl	80014b4 <uros_agent_status_check>
        osDelay(1000/FREQUENCY);
 800332a:	2032      	movs	r0, #50	@ 0x32
 800332c:	f004 fbe2 	bl	8007af4 <osDelay>
        uros_agent_status_check();
 8003330:	bf00      	nop
 8003332:	e7f8      	b.n	8003326 <StartDefaultTask+0x1a>
 8003334:	200052fc 	.word	0x200052fc

08003338 <HAL_TIM_PeriodElapsedCallback>:
    }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM4)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a0a      	ldr	r2, [pc, #40]	@ (8003370 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d106      	bne.n	8003358 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		sec++;
 800334a:	4b0a      	ldr	r3, [pc, #40]	@ (8003374 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	3301      	adds	r3, #1
 8003350:	4a08      	ldr	r2, [pc, #32]	@ (8003374 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003352:	6013      	str	r3, [r2, #0]
//		chassis_monitor();
//		pinpoint_monitor();
		arm_test();
 8003354:	f7fd ff58 	bl	8001208 <arm_test>
//				arm_mission(code);
//			}
//		}
	}
  /* USER CODE END Callback 0 */
	if (htim->Instance == TIM6)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a06      	ldr	r2, [pc, #24]	@ (8003378 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d101      	bne.n	8003366 <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		HAL_IncTick();
 8003362:	f000 f857 	bl	8003414 <HAL_IncTick>
	}
  /* USER CODE BEGIN Callback 1 */
//
  /* USER CODE END Callback 1 */
}
 8003366:	bf00      	nop
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40000800 	.word	0x40000800
 8003374:	200084bc 	.word	0x200084bc
 8003378:	40001000 	.word	0x40001000

0800337c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800337c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80033b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003380:	f7ff ffb2 	bl	80032e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003384:	480c      	ldr	r0, [pc, #48]	@ (80033b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003386:	490d      	ldr	r1, [pc, #52]	@ (80033bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003388:	4a0d      	ldr	r2, [pc, #52]	@ (80033c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800338a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800338c:	e002      	b.n	8003394 <LoopCopyDataInit>

0800338e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800338e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003392:	3304      	adds	r3, #4

08003394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003398:	d3f9      	bcc.n	800338e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800339a:	4a0a      	ldr	r2, [pc, #40]	@ (80033c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800339c:	4c0a      	ldr	r4, [pc, #40]	@ (80033c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800339e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033a0:	e001      	b.n	80033a6 <LoopFillZerobss>

080033a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033a4:	3204      	adds	r2, #4

080033a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033a8:	d3fb      	bcc.n	80033a2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80033aa:	f016 facd 	bl	8019948 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033ae:	f7fe ff0b 	bl	80021c8 <main>
  bx  lr    
 80033b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80033b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80033b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033bc:	2000096c 	.word	0x2000096c
  ldr r2, =_sidata
 80033c0:	0801b8fc 	.word	0x0801b8fc
  ldr r2, =_sbss
 80033c4:	20000970 	.word	0x20000970
  ldr r4, =_ebss
 80033c8:	20011ad8 	.word	0x20011ad8

080033cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033cc:	e7fe      	b.n	80033cc <ADC_IRQHandler>
	...

080033d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80033d4:	4b0e      	ldr	r3, [pc, #56]	@ (8003410 <HAL_Init+0x40>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a0d      	ldr	r2, [pc, #52]	@ (8003410 <HAL_Init+0x40>)
 80033da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003410 <HAL_Init+0x40>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a0a      	ldr	r2, [pc, #40]	@ (8003410 <HAL_Init+0x40>)
 80033e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80033ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033ec:	4b08      	ldr	r3, [pc, #32]	@ (8003410 <HAL_Init+0x40>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a07      	ldr	r2, [pc, #28]	@ (8003410 <HAL_Init+0x40>)
 80033f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033f8:	2003      	movs	r0, #3
 80033fa:	f000 f8d8 	bl	80035ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033fe:	200f      	movs	r0, #15
 8003400:	f7ff fde2 	bl	8002fc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003404:	f7ff fb54 	bl	8002ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	40023c00 	.word	0x40023c00

08003414 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003418:	4b06      	ldr	r3, [pc, #24]	@ (8003434 <HAL_IncTick+0x20>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	461a      	mov	r2, r3
 800341e:	4b06      	ldr	r3, [pc, #24]	@ (8003438 <HAL_IncTick+0x24>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4413      	add	r3, r2
 8003424:	4a04      	ldr	r2, [pc, #16]	@ (8003438 <HAL_IncTick+0x24>)
 8003426:	6013      	str	r3, [r2, #0]
}
 8003428:	bf00      	nop
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	20000020 	.word	0x20000020
 8003438:	200084c0 	.word	0x200084c0

0800343c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  return uwTick;
 8003440:	4b03      	ldr	r3, [pc, #12]	@ (8003450 <HAL_GetTick+0x14>)
 8003442:	681b      	ldr	r3, [r3, #0]
}
 8003444:	4618      	mov	r0, r3
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	200084c0 	.word	0x200084c0

08003454 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003464:	4b0c      	ldr	r3, [pc, #48]	@ (8003498 <__NVIC_SetPriorityGrouping+0x44>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800346a:	68ba      	ldr	r2, [r7, #8]
 800346c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003470:	4013      	ands	r3, r2
 8003472:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800347c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003480:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003484:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003486:	4a04      	ldr	r2, [pc, #16]	@ (8003498 <__NVIC_SetPriorityGrouping+0x44>)
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	60d3      	str	r3, [r2, #12]
}
 800348c:	bf00      	nop
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	e000ed00 	.word	0xe000ed00

0800349c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034a0:	4b04      	ldr	r3, [pc, #16]	@ (80034b4 <__NVIC_GetPriorityGrouping+0x18>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	0a1b      	lsrs	r3, r3, #8
 80034a6:	f003 0307 	and.w	r3, r3, #7
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	e000ed00 	.word	0xe000ed00

080034b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	4603      	mov	r3, r0
 80034c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	db0b      	blt.n	80034e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ca:	79fb      	ldrb	r3, [r7, #7]
 80034cc:	f003 021f 	and.w	r2, r3, #31
 80034d0:	4907      	ldr	r1, [pc, #28]	@ (80034f0 <__NVIC_EnableIRQ+0x38>)
 80034d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d6:	095b      	lsrs	r3, r3, #5
 80034d8:	2001      	movs	r0, #1
 80034da:	fa00 f202 	lsl.w	r2, r0, r2
 80034de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	e000e100 	.word	0xe000e100

080034f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	4603      	mov	r3, r0
 80034fc:	6039      	str	r1, [r7, #0]
 80034fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003504:	2b00      	cmp	r3, #0
 8003506:	db0a      	blt.n	800351e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	b2da      	uxtb	r2, r3
 800350c:	490c      	ldr	r1, [pc, #48]	@ (8003540 <__NVIC_SetPriority+0x4c>)
 800350e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003512:	0112      	lsls	r2, r2, #4
 8003514:	b2d2      	uxtb	r2, r2
 8003516:	440b      	add	r3, r1
 8003518:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800351c:	e00a      	b.n	8003534 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	b2da      	uxtb	r2, r3
 8003522:	4908      	ldr	r1, [pc, #32]	@ (8003544 <__NVIC_SetPriority+0x50>)
 8003524:	79fb      	ldrb	r3, [r7, #7]
 8003526:	f003 030f 	and.w	r3, r3, #15
 800352a:	3b04      	subs	r3, #4
 800352c:	0112      	lsls	r2, r2, #4
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	440b      	add	r3, r1
 8003532:	761a      	strb	r2, [r3, #24]
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	e000e100 	.word	0xe000e100
 8003544:	e000ed00 	.word	0xe000ed00

08003548 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003548:	b480      	push	{r7}
 800354a:	b089      	sub	sp, #36	@ 0x24
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	f1c3 0307 	rsb	r3, r3, #7
 8003562:	2b04      	cmp	r3, #4
 8003564:	bf28      	it	cs
 8003566:	2304      	movcs	r3, #4
 8003568:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	3304      	adds	r3, #4
 800356e:	2b06      	cmp	r3, #6
 8003570:	d902      	bls.n	8003578 <NVIC_EncodePriority+0x30>
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	3b03      	subs	r3, #3
 8003576:	e000      	b.n	800357a <NVIC_EncodePriority+0x32>
 8003578:	2300      	movs	r3, #0
 800357a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800357c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	fa02 f303 	lsl.w	r3, r2, r3
 8003586:	43da      	mvns	r2, r3
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	401a      	ands	r2, r3
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003590:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	fa01 f303 	lsl.w	r3, r1, r3
 800359a:	43d9      	mvns	r1, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035a0:	4313      	orrs	r3, r2
         );
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3724      	adds	r7, #36	@ 0x24
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b082      	sub	sp, #8
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7ff ff4c 	bl	8003454 <__NVIC_SetPriorityGrouping>
}
 80035bc:	bf00      	nop
 80035be:	3708      	adds	r7, #8
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	4603      	mov	r3, r0
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
 80035d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035d2:	2300      	movs	r3, #0
 80035d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035d6:	f7ff ff61 	bl	800349c <__NVIC_GetPriorityGrouping>
 80035da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	68b9      	ldr	r1, [r7, #8]
 80035e0:	6978      	ldr	r0, [r7, #20]
 80035e2:	f7ff ffb1 	bl	8003548 <NVIC_EncodePriority>
 80035e6:	4602      	mov	r2, r0
 80035e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ec:	4611      	mov	r1, r2
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7ff ff80 	bl	80034f4 <__NVIC_SetPriority>
}
 80035f4:	bf00      	nop
 80035f6:	3718      	adds	r7, #24
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	4603      	mov	r3, r0
 8003604:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360a:	4618      	mov	r0, r3
 800360c:	f7ff ff54 	bl	80034b8 <__NVIC_EnableIRQ>
}
 8003610:	bf00      	nop
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003620:	2300      	movs	r3, #0
 8003622:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003624:	f7ff ff0a 	bl	800343c <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e099      	b.n	8003768 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 0201 	bic.w	r2, r2, #1
 8003652:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003654:	e00f      	b.n	8003676 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003656:	f7ff fef1 	bl	800343c <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b05      	cmp	r3, #5
 8003662:	d908      	bls.n	8003676 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2220      	movs	r2, #32
 8003668:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2203      	movs	r2, #3
 800366e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e078      	b.n	8003768 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1e8      	bne.n	8003656 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	4b38      	ldr	r3, [pc, #224]	@ (8003770 <HAL_DMA_Init+0x158>)
 8003690:	4013      	ands	r3, r2
 8003692:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d107      	bne.n	80036e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d8:	4313      	orrs	r3, r2
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	4313      	orrs	r3, r2
 80036de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	f023 0307 	bic.w	r3, r3, #7
 80036f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	4313      	orrs	r3, r2
 8003700:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003706:	2b04      	cmp	r3, #4
 8003708:	d117      	bne.n	800373a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	4313      	orrs	r3, r2
 8003712:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00e      	beq.n	800373a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 fb01 	bl	8003d24 <DMA_CheckFifoParam>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d008      	beq.n	800373a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2240      	movs	r2, #64	@ 0x40
 800372c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003736:	2301      	movs	r3, #1
 8003738:	e016      	b.n	8003768 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 fab8 	bl	8003cb8 <DMA_CalcBaseAndBitshift>
 8003748:	4603      	mov	r3, r0
 800374a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003750:	223f      	movs	r2, #63	@ 0x3f
 8003752:	409a      	lsls	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	f010803f 	.word	0xf010803f

08003774 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
 8003780:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003782:	2300      	movs	r3, #0
 8003784:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800378a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003792:	2b01      	cmp	r3, #1
 8003794:	d101      	bne.n	800379a <HAL_DMA_Start_IT+0x26>
 8003796:	2302      	movs	r3, #2
 8003798:	e040      	b.n	800381c <HAL_DMA_Start_IT+0xa8>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d12f      	bne.n	800380e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2202      	movs	r2, #2
 80037b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	68b9      	ldr	r1, [r7, #8]
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 fa4a 	bl	8003c5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037cc:	223f      	movs	r2, #63	@ 0x3f
 80037ce:	409a      	lsls	r2, r3
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f042 0216 	orr.w	r2, r2, #22
 80037e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d007      	beq.n	80037fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 0208 	orr.w	r2, r2, #8
 80037fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0201 	orr.w	r2, r2, #1
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	e005      	b.n	800381a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003816:	2302      	movs	r3, #2
 8003818:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800381a:	7dfb      	ldrb	r3, [r7, #23]
}
 800381c:	4618      	mov	r0, r3
 800381e:	3718      	adds	r7, #24
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003830:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003832:	f7ff fe03 	bl	800343c <HAL_GetTick>
 8003836:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d008      	beq.n	8003856 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2280      	movs	r2, #128	@ 0x80
 8003848:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e052      	b.n	80038fc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0216 	bic.w	r2, r2, #22
 8003864:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	695a      	ldr	r2, [r3, #20]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003874:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387a:	2b00      	cmp	r3, #0
 800387c:	d103      	bne.n	8003886 <HAL_DMA_Abort+0x62>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003882:	2b00      	cmp	r3, #0
 8003884:	d007      	beq.n	8003896 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 0208 	bic.w	r2, r2, #8
 8003894:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0201 	bic.w	r2, r2, #1
 80038a4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038a6:	e013      	b.n	80038d0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038a8:	f7ff fdc8 	bl	800343c <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b05      	cmp	r3, #5
 80038b4:	d90c      	bls.n	80038d0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2220      	movs	r2, #32
 80038ba:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2203      	movs	r2, #3
 80038c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e015      	b.n	80038fc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1e4      	bne.n	80038a8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038e2:	223f      	movs	r2, #63	@ 0x3f
 80038e4:	409a      	lsls	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d004      	beq.n	8003922 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2280      	movs	r2, #128	@ 0x80
 800391c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e00c      	b.n	800393c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2205      	movs	r2, #5
 8003926:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0201 	bic.w	r2, r2, #1
 8003938:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003950:	2300      	movs	r3, #0
 8003952:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003954:	4b8e      	ldr	r3, [pc, #568]	@ (8003b90 <HAL_DMA_IRQHandler+0x248>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a8e      	ldr	r2, [pc, #568]	@ (8003b94 <HAL_DMA_IRQHandler+0x24c>)
 800395a:	fba2 2303 	umull	r2, r3, r2, r3
 800395e:	0a9b      	lsrs	r3, r3, #10
 8003960:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003966:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003972:	2208      	movs	r2, #8
 8003974:	409a      	lsls	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	4013      	ands	r3, r2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d01a      	beq.n	80039b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b00      	cmp	r3, #0
 800398a:	d013      	beq.n	80039b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 0204 	bic.w	r2, r2, #4
 800399a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a0:	2208      	movs	r2, #8
 80039a2:	409a      	lsls	r2, r3
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ac:	f043 0201 	orr.w	r2, r3, #1
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039b8:	2201      	movs	r2, #1
 80039ba:	409a      	lsls	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	4013      	ands	r3, r2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d012      	beq.n	80039ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00b      	beq.n	80039ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039d6:	2201      	movs	r2, #1
 80039d8:	409a      	lsls	r2, r3
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039e2:	f043 0202 	orr.w	r2, r3, #2
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ee:	2204      	movs	r2, #4
 80039f0:	409a      	lsls	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	4013      	ands	r3, r2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d012      	beq.n	8003a20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00b      	beq.n	8003a20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a0c:	2204      	movs	r2, #4
 8003a0e:	409a      	lsls	r2, r3
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a18:	f043 0204 	orr.w	r2, r3, #4
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a24:	2210      	movs	r2, #16
 8003a26:	409a      	lsls	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d043      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0308 	and.w	r3, r3, #8
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d03c      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a42:	2210      	movs	r2, #16
 8003a44:	409a      	lsls	r2, r3
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d018      	beq.n	8003a8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d108      	bne.n	8003a78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d024      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	4798      	blx	r3
 8003a76:	e01f      	b.n	8003ab8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d01b      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	4798      	blx	r3
 8003a88:	e016      	b.n	8003ab8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d107      	bne.n	8003aa8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0208 	bic.w	r2, r2, #8
 8003aa6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d003      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003abc:	2220      	movs	r2, #32
 8003abe:	409a      	lsls	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 808f 	beq.w	8003be8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0310 	and.w	r3, r3, #16
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 8087 	beq.w	8003be8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ade:	2220      	movs	r2, #32
 8003ae0:	409a      	lsls	r2, r3
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b05      	cmp	r3, #5
 8003af0:	d136      	bne.n	8003b60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 0216 	bic.w	r2, r2, #22
 8003b00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	695a      	ldr	r2, [r3, #20]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d103      	bne.n	8003b22 <HAL_DMA_IRQHandler+0x1da>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d007      	beq.n	8003b32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0208 	bic.w	r2, r2, #8
 8003b30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b36:	223f      	movs	r2, #63	@ 0x3f
 8003b38:	409a      	lsls	r2, r3
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d07e      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	4798      	blx	r3
        }
        return;
 8003b5e:	e079      	b.n	8003c54 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d01d      	beq.n	8003baa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10d      	bne.n	8003b98 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d031      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	4798      	blx	r3
 8003b8c:	e02c      	b.n	8003be8 <HAL_DMA_IRQHandler+0x2a0>
 8003b8e:	bf00      	nop
 8003b90:	20000018 	.word	0x20000018
 8003b94:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d023      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	4798      	blx	r3
 8003ba8:	e01e      	b.n	8003be8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10f      	bne.n	8003bd8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f022 0210 	bic.w	r2, r2, #16
 8003bc6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d032      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d022      	beq.n	8003c42 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2205      	movs	r2, #5
 8003c00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 0201 	bic.w	r2, r2, #1
 8003c12:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	3301      	adds	r3, #1
 8003c18:	60bb      	str	r3, [r7, #8]
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d307      	bcc.n	8003c30 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1f2      	bne.n	8003c14 <HAL_DMA_IRQHandler+0x2cc>
 8003c2e:	e000      	b.n	8003c32 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c30:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d005      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	4798      	blx	r3
 8003c52:	e000      	b.n	8003c56 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003c54:	bf00      	nop
    }
  }
}
 8003c56:	3718      	adds	r7, #24
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
 8003c68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003c78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	2b40      	cmp	r3, #64	@ 0x40
 8003c88:	d108      	bne.n	8003c9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c9a:	e007      	b.n	8003cac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	60da      	str	r2, [r3, #12]
}
 8003cac:	bf00      	nop
 8003cae:	3714      	adds	r7, #20
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	3b10      	subs	r3, #16
 8003cc8:	4a14      	ldr	r2, [pc, #80]	@ (8003d1c <DMA_CalcBaseAndBitshift+0x64>)
 8003cca:	fba2 2303 	umull	r2, r3, r2, r3
 8003cce:	091b      	lsrs	r3, r3, #4
 8003cd0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003cd2:	4a13      	ldr	r2, [pc, #76]	@ (8003d20 <DMA_CalcBaseAndBitshift+0x68>)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2b03      	cmp	r3, #3
 8003ce4:	d909      	bls.n	8003cfa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003cee:	f023 0303 	bic.w	r3, r3, #3
 8003cf2:	1d1a      	adds	r2, r3, #4
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	659a      	str	r2, [r3, #88]	@ 0x58
 8003cf8:	e007      	b.n	8003d0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003d02:	f023 0303 	bic.w	r3, r3, #3
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3714      	adds	r7, #20
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	aaaaaaab 	.word	0xaaaaaaab
 8003d20:	0801a73c 	.word	0x0801a73c

08003d24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d11f      	bne.n	8003d7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	2b03      	cmp	r3, #3
 8003d42:	d856      	bhi.n	8003df2 <DMA_CheckFifoParam+0xce>
 8003d44:	a201      	add	r2, pc, #4	@ (adr r2, 8003d4c <DMA_CheckFifoParam+0x28>)
 8003d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4a:	bf00      	nop
 8003d4c:	08003d5d 	.word	0x08003d5d
 8003d50:	08003d6f 	.word	0x08003d6f
 8003d54:	08003d5d 	.word	0x08003d5d
 8003d58:	08003df3 	.word	0x08003df3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d046      	beq.n	8003df6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d6c:	e043      	b.n	8003df6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d72:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003d76:	d140      	bne.n	8003dfa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d7c:	e03d      	b.n	8003dfa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d86:	d121      	bne.n	8003dcc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	2b03      	cmp	r3, #3
 8003d8c:	d837      	bhi.n	8003dfe <DMA_CheckFifoParam+0xda>
 8003d8e:	a201      	add	r2, pc, #4	@ (adr r2, 8003d94 <DMA_CheckFifoParam+0x70>)
 8003d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d94:	08003da5 	.word	0x08003da5
 8003d98:	08003dab 	.word	0x08003dab
 8003d9c:	08003da5 	.word	0x08003da5
 8003da0:	08003dbd 	.word	0x08003dbd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	73fb      	strb	r3, [r7, #15]
      break;
 8003da8:	e030      	b.n	8003e0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d025      	beq.n	8003e02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dba:	e022      	b.n	8003e02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003dc4:	d11f      	bne.n	8003e06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003dca:	e01c      	b.n	8003e06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d903      	bls.n	8003dda <DMA_CheckFifoParam+0xb6>
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	2b03      	cmp	r3, #3
 8003dd6:	d003      	beq.n	8003de0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003dd8:	e018      	b.n	8003e0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	73fb      	strb	r3, [r7, #15]
      break;
 8003dde:	e015      	b.n	8003e0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00e      	beq.n	8003e0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	73fb      	strb	r3, [r7, #15]
      break;
 8003df0:	e00b      	b.n	8003e0a <DMA_CheckFifoParam+0xe6>
      break;
 8003df2:	bf00      	nop
 8003df4:	e00a      	b.n	8003e0c <DMA_CheckFifoParam+0xe8>
      break;
 8003df6:	bf00      	nop
 8003df8:	e008      	b.n	8003e0c <DMA_CheckFifoParam+0xe8>
      break;
 8003dfa:	bf00      	nop
 8003dfc:	e006      	b.n	8003e0c <DMA_CheckFifoParam+0xe8>
      break;
 8003dfe:	bf00      	nop
 8003e00:	e004      	b.n	8003e0c <DMA_CheckFifoParam+0xe8>
      break;
 8003e02:	bf00      	nop
 8003e04:	e002      	b.n	8003e0c <DMA_CheckFifoParam+0xe8>
      break;   
 8003e06:	bf00      	nop
 8003e08:	e000      	b.n	8003e0c <DMA_CheckFifoParam+0xe8>
      break;
 8003e0a:	bf00      	nop
    }
  } 
  
  return status; 
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop

08003e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b089      	sub	sp, #36	@ 0x24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e26:	2300      	movs	r3, #0
 8003e28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e32:	2300      	movs	r3, #0
 8003e34:	61fb      	str	r3, [r7, #28]
 8003e36:	e165      	b.n	8004104 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e38:	2201      	movs	r2, #1
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	f040 8154 	bne.w	80040fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f003 0303 	and.w	r3, r3, #3
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d005      	beq.n	8003e6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d130      	bne.n	8003ed0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	2203      	movs	r2, #3
 8003e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7e:	43db      	mvns	r3, r3
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	4013      	ands	r3, r2
 8003e84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	68da      	ldr	r2, [r3, #12]
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	43db      	mvns	r3, r3
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	091b      	lsrs	r3, r3, #4
 8003eba:	f003 0201 	and.w	r2, r3, #1
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f003 0303 	and.w	r3, r3, #3
 8003ed8:	2b03      	cmp	r3, #3
 8003eda:	d017      	beq.n	8003f0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	2203      	movs	r2, #3
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	43db      	mvns	r3, r3
 8003eee:	69ba      	ldr	r2, [r7, #24]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	fa02 f303 	lsl.w	r3, r2, r3
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f003 0303 	and.w	r3, r3, #3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d123      	bne.n	8003f60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	08da      	lsrs	r2, r3, #3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	3208      	adds	r2, #8
 8003f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	f003 0307 	and.w	r3, r3, #7
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	220f      	movs	r2, #15
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	43db      	mvns	r3, r3
 8003f36:	69ba      	ldr	r2, [r7, #24]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	691a      	ldr	r2, [r3, #16]
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	f003 0307 	and.w	r3, r3, #7
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	08da      	lsrs	r2, r3, #3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	3208      	adds	r2, #8
 8003f5a:	69b9      	ldr	r1, [r7, #24]
 8003f5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	2203      	movs	r2, #3
 8003f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f70:	43db      	mvns	r3, r3
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	4013      	ands	r3, r2
 8003f76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f003 0203 	and.w	r2, r3, #3
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	fa02 f303 	lsl.w	r3, r2, r3
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 80ae 	beq.w	80040fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	60fb      	str	r3, [r7, #12]
 8003fa6:	4b5d      	ldr	r3, [pc, #372]	@ (800411c <HAL_GPIO_Init+0x300>)
 8003fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003faa:	4a5c      	ldr	r2, [pc, #368]	@ (800411c <HAL_GPIO_Init+0x300>)
 8003fac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003fb2:	4b5a      	ldr	r3, [pc, #360]	@ (800411c <HAL_GPIO_Init+0x300>)
 8003fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fbe:	4a58      	ldr	r2, [pc, #352]	@ (8004120 <HAL_GPIO_Init+0x304>)
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	089b      	lsrs	r3, r3, #2
 8003fc4:	3302      	adds	r3, #2
 8003fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	f003 0303 	and.w	r3, r3, #3
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	220f      	movs	r2, #15
 8003fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fda:	43db      	mvns	r3, r3
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a4f      	ldr	r2, [pc, #316]	@ (8004124 <HAL_GPIO_Init+0x308>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d025      	beq.n	8004036 <HAL_GPIO_Init+0x21a>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a4e      	ldr	r2, [pc, #312]	@ (8004128 <HAL_GPIO_Init+0x30c>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d01f      	beq.n	8004032 <HAL_GPIO_Init+0x216>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a4d      	ldr	r2, [pc, #308]	@ (800412c <HAL_GPIO_Init+0x310>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d019      	beq.n	800402e <HAL_GPIO_Init+0x212>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a4c      	ldr	r2, [pc, #304]	@ (8004130 <HAL_GPIO_Init+0x314>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d013      	beq.n	800402a <HAL_GPIO_Init+0x20e>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a4b      	ldr	r2, [pc, #300]	@ (8004134 <HAL_GPIO_Init+0x318>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d00d      	beq.n	8004026 <HAL_GPIO_Init+0x20a>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a4a      	ldr	r2, [pc, #296]	@ (8004138 <HAL_GPIO_Init+0x31c>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d007      	beq.n	8004022 <HAL_GPIO_Init+0x206>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a49      	ldr	r2, [pc, #292]	@ (800413c <HAL_GPIO_Init+0x320>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d101      	bne.n	800401e <HAL_GPIO_Init+0x202>
 800401a:	2306      	movs	r3, #6
 800401c:	e00c      	b.n	8004038 <HAL_GPIO_Init+0x21c>
 800401e:	2307      	movs	r3, #7
 8004020:	e00a      	b.n	8004038 <HAL_GPIO_Init+0x21c>
 8004022:	2305      	movs	r3, #5
 8004024:	e008      	b.n	8004038 <HAL_GPIO_Init+0x21c>
 8004026:	2304      	movs	r3, #4
 8004028:	e006      	b.n	8004038 <HAL_GPIO_Init+0x21c>
 800402a:	2303      	movs	r3, #3
 800402c:	e004      	b.n	8004038 <HAL_GPIO_Init+0x21c>
 800402e:	2302      	movs	r3, #2
 8004030:	e002      	b.n	8004038 <HAL_GPIO_Init+0x21c>
 8004032:	2301      	movs	r3, #1
 8004034:	e000      	b.n	8004038 <HAL_GPIO_Init+0x21c>
 8004036:	2300      	movs	r3, #0
 8004038:	69fa      	ldr	r2, [r7, #28]
 800403a:	f002 0203 	and.w	r2, r2, #3
 800403e:	0092      	lsls	r2, r2, #2
 8004040:	4093      	lsls	r3, r2
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	4313      	orrs	r3, r2
 8004046:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004048:	4935      	ldr	r1, [pc, #212]	@ (8004120 <HAL_GPIO_Init+0x304>)
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	089b      	lsrs	r3, r3, #2
 800404e:	3302      	adds	r3, #2
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004056:	4b3a      	ldr	r3, [pc, #232]	@ (8004140 <HAL_GPIO_Init+0x324>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	43db      	mvns	r3, r3
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	4013      	ands	r3, r2
 8004064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d003      	beq.n	800407a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	4313      	orrs	r3, r2
 8004078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800407a:	4a31      	ldr	r2, [pc, #196]	@ (8004140 <HAL_GPIO_Init+0x324>)
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004080:	4b2f      	ldr	r3, [pc, #188]	@ (8004140 <HAL_GPIO_Init+0x324>)
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	43db      	mvns	r3, r3
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	4013      	ands	r3, r2
 800408e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d003      	beq.n	80040a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040a4:	4a26      	ldr	r2, [pc, #152]	@ (8004140 <HAL_GPIO_Init+0x324>)
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040aa:	4b25      	ldr	r3, [pc, #148]	@ (8004140 <HAL_GPIO_Init+0x324>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	43db      	mvns	r3, r3
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	4013      	ands	r3, r2
 80040b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040ce:	4a1c      	ldr	r2, [pc, #112]	@ (8004140 <HAL_GPIO_Init+0x324>)
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040d4:	4b1a      	ldr	r3, [pc, #104]	@ (8004140 <HAL_GPIO_Init+0x324>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	43db      	mvns	r3, r3
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	4013      	ands	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d003      	beq.n	80040f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040f8:	4a11      	ldr	r2, [pc, #68]	@ (8004140 <HAL_GPIO_Init+0x324>)
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	3301      	adds	r3, #1
 8004102:	61fb      	str	r3, [r7, #28]
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	2b0f      	cmp	r3, #15
 8004108:	f67f ae96 	bls.w	8003e38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800410c:	bf00      	nop
 800410e:	bf00      	nop
 8004110:	3724      	adds	r7, #36	@ 0x24
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	40023800 	.word	0x40023800
 8004120:	40013800 	.word	0x40013800
 8004124:	40020000 	.word	0x40020000
 8004128:	40020400 	.word	0x40020400
 800412c:	40020800 	.word	0x40020800
 8004130:	40020c00 	.word	0x40020c00
 8004134:	40021000 	.word	0x40021000
 8004138:	40021400 	.word	0x40021400
 800413c:	40021800 	.word	0x40021800
 8004140:	40013c00 	.word	0x40013c00

08004144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	460b      	mov	r3, r1
 800414e:	807b      	strh	r3, [r7, #2]
 8004150:	4613      	mov	r3, r2
 8004152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004154:	787b      	ldrb	r3, [r7, #1]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800415a:	887a      	ldrh	r2, [r7, #2]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004160:	e003      	b.n	800416a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004162:	887b      	ldrh	r3, [r7, #2]
 8004164:	041a      	lsls	r2, r3, #16
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	619a      	str	r2, [r3, #24]
}
 800416a:	bf00      	nop
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
	...

08004178 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e12b      	b.n	80043e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d106      	bne.n	80041a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f7fe fcb2 	bl	8002b08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2224      	movs	r2, #36	@ 0x24
 80041a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 0201 	bic.w	r2, r2, #1
 80041ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80041ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80041dc:	f000 fa02 	bl	80045e4 <HAL_RCC_GetPCLK1Freq>
 80041e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	4a81      	ldr	r2, [pc, #516]	@ (80043ec <HAL_I2C_Init+0x274>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d807      	bhi.n	80041fc <HAL_I2C_Init+0x84>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	4a80      	ldr	r2, [pc, #512]	@ (80043f0 <HAL_I2C_Init+0x278>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	bf94      	ite	ls
 80041f4:	2301      	movls	r3, #1
 80041f6:	2300      	movhi	r3, #0
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	e006      	b.n	800420a <HAL_I2C_Init+0x92>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	4a7d      	ldr	r2, [pc, #500]	@ (80043f4 <HAL_I2C_Init+0x27c>)
 8004200:	4293      	cmp	r3, r2
 8004202:	bf94      	ite	ls
 8004204:	2301      	movls	r3, #1
 8004206:	2300      	movhi	r3, #0
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e0e7      	b.n	80043e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	4a78      	ldr	r2, [pc, #480]	@ (80043f8 <HAL_I2C_Init+0x280>)
 8004216:	fba2 2303 	umull	r2, r3, r2, r3
 800421a:	0c9b      	lsrs	r3, r3, #18
 800421c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	430a      	orrs	r2, r1
 8004230:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	4a6a      	ldr	r2, [pc, #424]	@ (80043ec <HAL_I2C_Init+0x274>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d802      	bhi.n	800424c <HAL_I2C_Init+0xd4>
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	3301      	adds	r3, #1
 800424a:	e009      	b.n	8004260 <HAL_I2C_Init+0xe8>
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004252:	fb02 f303 	mul.w	r3, r2, r3
 8004256:	4a69      	ldr	r2, [pc, #420]	@ (80043fc <HAL_I2C_Init+0x284>)
 8004258:	fba2 2303 	umull	r2, r3, r2, r3
 800425c:	099b      	lsrs	r3, r3, #6
 800425e:	3301      	adds	r3, #1
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	6812      	ldr	r2, [r2, #0]
 8004264:	430b      	orrs	r3, r1
 8004266:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004272:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	495c      	ldr	r1, [pc, #368]	@ (80043ec <HAL_I2C_Init+0x274>)
 800427c:	428b      	cmp	r3, r1
 800427e:	d819      	bhi.n	80042b4 <HAL_I2C_Init+0x13c>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	1e59      	subs	r1, r3, #1
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	005b      	lsls	r3, r3, #1
 800428a:	fbb1 f3f3 	udiv	r3, r1, r3
 800428e:	1c59      	adds	r1, r3, #1
 8004290:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004294:	400b      	ands	r3, r1
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00a      	beq.n	80042b0 <HAL_I2C_Init+0x138>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	1e59      	subs	r1, r3, #1
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80042a8:	3301      	adds	r3, #1
 80042aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042ae:	e051      	b.n	8004354 <HAL_I2C_Init+0x1dc>
 80042b0:	2304      	movs	r3, #4
 80042b2:	e04f      	b.n	8004354 <HAL_I2C_Init+0x1dc>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d111      	bne.n	80042e0 <HAL_I2C_Init+0x168>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	1e58      	subs	r0, r3, #1
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6859      	ldr	r1, [r3, #4]
 80042c4:	460b      	mov	r3, r1
 80042c6:	005b      	lsls	r3, r3, #1
 80042c8:	440b      	add	r3, r1
 80042ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80042ce:	3301      	adds	r3, #1
 80042d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	bf0c      	ite	eq
 80042d8:	2301      	moveq	r3, #1
 80042da:	2300      	movne	r3, #0
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	e012      	b.n	8004306 <HAL_I2C_Init+0x18e>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	1e58      	subs	r0, r3, #1
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6859      	ldr	r1, [r3, #4]
 80042e8:	460b      	mov	r3, r1
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	440b      	add	r3, r1
 80042ee:	0099      	lsls	r1, r3, #2
 80042f0:	440b      	add	r3, r1
 80042f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80042f6:	3301      	adds	r3, #1
 80042f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	bf0c      	ite	eq
 8004300:	2301      	moveq	r3, #1
 8004302:	2300      	movne	r3, #0
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <HAL_I2C_Init+0x196>
 800430a:	2301      	movs	r3, #1
 800430c:	e022      	b.n	8004354 <HAL_I2C_Init+0x1dc>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10e      	bne.n	8004334 <HAL_I2C_Init+0x1bc>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	1e58      	subs	r0, r3, #1
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6859      	ldr	r1, [r3, #4]
 800431e:	460b      	mov	r3, r1
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	440b      	add	r3, r1
 8004324:	fbb0 f3f3 	udiv	r3, r0, r3
 8004328:	3301      	adds	r3, #1
 800432a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800432e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004332:	e00f      	b.n	8004354 <HAL_I2C_Init+0x1dc>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	1e58      	subs	r0, r3, #1
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6859      	ldr	r1, [r3, #4]
 800433c:	460b      	mov	r3, r1
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	440b      	add	r3, r1
 8004342:	0099      	lsls	r1, r3, #2
 8004344:	440b      	add	r3, r1
 8004346:	fbb0 f3f3 	udiv	r3, r0, r3
 800434a:	3301      	adds	r3, #1
 800434c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004350:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004354:	6879      	ldr	r1, [r7, #4]
 8004356:	6809      	ldr	r1, [r1, #0]
 8004358:	4313      	orrs	r3, r2
 800435a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	69da      	ldr	r2, [r3, #28]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	431a      	orrs	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004382:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	6911      	ldr	r1, [r2, #16]
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	68d2      	ldr	r2, [r2, #12]
 800438e:	4311      	orrs	r1, r2
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	6812      	ldr	r2, [r2, #0]
 8004394:	430b      	orrs	r3, r1
 8004396:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	695a      	ldr	r2, [r3, #20]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	431a      	orrs	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	430a      	orrs	r2, r1
 80043b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f042 0201 	orr.w	r2, r2, #1
 80043c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2220      	movs	r2, #32
 80043ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	000186a0 	.word	0x000186a0
 80043f0:	001e847f 	.word	0x001e847f
 80043f4:	003d08ff 	.word	0x003d08ff
 80043f8:	431bde83 	.word	0x431bde83
 80043fc:	10624dd3 	.word	0x10624dd3

08004400 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d101      	bne.n	8004414 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e0cc      	b.n	80045ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004414:	4b68      	ldr	r3, [pc, #416]	@ (80045b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 030f 	and.w	r3, r3, #15
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	429a      	cmp	r2, r3
 8004420:	d90c      	bls.n	800443c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004422:	4b65      	ldr	r3, [pc, #404]	@ (80045b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	b2d2      	uxtb	r2, r2
 8004428:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800442a:	4b63      	ldr	r3, [pc, #396]	@ (80045b8 <HAL_RCC_ClockConfig+0x1b8>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 030f 	and.w	r3, r3, #15
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	429a      	cmp	r2, r3
 8004436:	d001      	beq.n	800443c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e0b8      	b.n	80045ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d020      	beq.n	800448a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0304 	and.w	r3, r3, #4
 8004450:	2b00      	cmp	r3, #0
 8004452:	d005      	beq.n	8004460 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004454:	4b59      	ldr	r3, [pc, #356]	@ (80045bc <HAL_RCC_ClockConfig+0x1bc>)
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	4a58      	ldr	r2, [pc, #352]	@ (80045bc <HAL_RCC_ClockConfig+0x1bc>)
 800445a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800445e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0308 	and.w	r3, r3, #8
 8004468:	2b00      	cmp	r3, #0
 800446a:	d005      	beq.n	8004478 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800446c:	4b53      	ldr	r3, [pc, #332]	@ (80045bc <HAL_RCC_ClockConfig+0x1bc>)
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	4a52      	ldr	r2, [pc, #328]	@ (80045bc <HAL_RCC_ClockConfig+0x1bc>)
 8004472:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004476:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004478:	4b50      	ldr	r3, [pc, #320]	@ (80045bc <HAL_RCC_ClockConfig+0x1bc>)
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	494d      	ldr	r1, [pc, #308]	@ (80045bc <HAL_RCC_ClockConfig+0x1bc>)
 8004486:	4313      	orrs	r3, r2
 8004488:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	2b00      	cmp	r3, #0
 8004494:	d044      	beq.n	8004520 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d107      	bne.n	80044ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800449e:	4b47      	ldr	r3, [pc, #284]	@ (80045bc <HAL_RCC_ClockConfig+0x1bc>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d119      	bne.n	80044de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e07f      	b.n	80045ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d003      	beq.n	80044be <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044ba:	2b03      	cmp	r3, #3
 80044bc:	d107      	bne.n	80044ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044be:	4b3f      	ldr	r3, [pc, #252]	@ (80045bc <HAL_RCC_ClockConfig+0x1bc>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d109      	bne.n	80044de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e06f      	b.n	80045ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ce:	4b3b      	ldr	r3, [pc, #236]	@ (80045bc <HAL_RCC_ClockConfig+0x1bc>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e067      	b.n	80045ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044de:	4b37      	ldr	r3, [pc, #220]	@ (80045bc <HAL_RCC_ClockConfig+0x1bc>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f023 0203 	bic.w	r2, r3, #3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	4934      	ldr	r1, [pc, #208]	@ (80045bc <HAL_RCC_ClockConfig+0x1bc>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044f0:	f7fe ffa4 	bl	800343c <HAL_GetTick>
 80044f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044f6:	e00a      	b.n	800450e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044f8:	f7fe ffa0 	bl	800343c <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004506:	4293      	cmp	r3, r2
 8004508:	d901      	bls.n	800450e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e04f      	b.n	80045ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800450e:	4b2b      	ldr	r3, [pc, #172]	@ (80045bc <HAL_RCC_ClockConfig+0x1bc>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f003 020c 	and.w	r2, r3, #12
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	429a      	cmp	r2, r3
 800451e:	d1eb      	bne.n	80044f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004520:	4b25      	ldr	r3, [pc, #148]	@ (80045b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 030f 	and.w	r3, r3, #15
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	429a      	cmp	r2, r3
 800452c:	d20c      	bcs.n	8004548 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800452e:	4b22      	ldr	r3, [pc, #136]	@ (80045b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004530:	683a      	ldr	r2, [r7, #0]
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004536:	4b20      	ldr	r3, [pc, #128]	@ (80045b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 030f 	and.w	r3, r3, #15
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	429a      	cmp	r2, r3
 8004542:	d001      	beq.n	8004548 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e032      	b.n	80045ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0304 	and.w	r3, r3, #4
 8004550:	2b00      	cmp	r3, #0
 8004552:	d008      	beq.n	8004566 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004554:	4b19      	ldr	r3, [pc, #100]	@ (80045bc <HAL_RCC_ClockConfig+0x1bc>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	4916      	ldr	r1, [pc, #88]	@ (80045bc <HAL_RCC_ClockConfig+0x1bc>)
 8004562:	4313      	orrs	r3, r2
 8004564:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	2b00      	cmp	r3, #0
 8004570:	d009      	beq.n	8004586 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004572:	4b12      	ldr	r3, [pc, #72]	@ (80045bc <HAL_RCC_ClockConfig+0x1bc>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	490e      	ldr	r1, [pc, #56]	@ (80045bc <HAL_RCC_ClockConfig+0x1bc>)
 8004582:	4313      	orrs	r3, r2
 8004584:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004586:	f000 f887 	bl	8004698 <HAL_RCC_GetSysClockFreq>
 800458a:	4602      	mov	r2, r0
 800458c:	4b0b      	ldr	r3, [pc, #44]	@ (80045bc <HAL_RCC_ClockConfig+0x1bc>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	091b      	lsrs	r3, r3, #4
 8004592:	f003 030f 	and.w	r3, r3, #15
 8004596:	490a      	ldr	r1, [pc, #40]	@ (80045c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004598:	5ccb      	ldrb	r3, [r1, r3]
 800459a:	fa22 f303 	lsr.w	r3, r2, r3
 800459e:	4a09      	ldr	r2, [pc, #36]	@ (80045c4 <HAL_RCC_ClockConfig+0x1c4>)
 80045a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80045a2:	4b09      	ldr	r3, [pc, #36]	@ (80045c8 <HAL_RCC_ClockConfig+0x1c8>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7fe fd0e 	bl	8002fc8 <HAL_InitTick>

  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	40023c00 	.word	0x40023c00
 80045bc:	40023800 	.word	0x40023800
 80045c0:	0801a724 	.word	0x0801a724
 80045c4:	20000018 	.word	0x20000018
 80045c8:	2000001c 	.word	0x2000001c

080045cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045cc:	b480      	push	{r7}
 80045ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045d0:	4b03      	ldr	r3, [pc, #12]	@ (80045e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80045d2:	681b      	ldr	r3, [r3, #0]
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	20000018 	.word	0x20000018

080045e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045e8:	f7ff fff0 	bl	80045cc <HAL_RCC_GetHCLKFreq>
 80045ec:	4602      	mov	r2, r0
 80045ee:	4b05      	ldr	r3, [pc, #20]	@ (8004604 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	0a9b      	lsrs	r3, r3, #10
 80045f4:	f003 0307 	and.w	r3, r3, #7
 80045f8:	4903      	ldr	r1, [pc, #12]	@ (8004608 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045fa:	5ccb      	ldrb	r3, [r1, r3]
 80045fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004600:	4618      	mov	r0, r3
 8004602:	bd80      	pop	{r7, pc}
 8004604:	40023800 	.word	0x40023800
 8004608:	0801a734 	.word	0x0801a734

0800460c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004610:	f7ff ffdc 	bl	80045cc <HAL_RCC_GetHCLKFreq>
 8004614:	4602      	mov	r2, r0
 8004616:	4b05      	ldr	r3, [pc, #20]	@ (800462c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	0b5b      	lsrs	r3, r3, #13
 800461c:	f003 0307 	and.w	r3, r3, #7
 8004620:	4903      	ldr	r1, [pc, #12]	@ (8004630 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004622:	5ccb      	ldrb	r3, [r1, r3]
 8004624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004628:	4618      	mov	r0, r3
 800462a:	bd80      	pop	{r7, pc}
 800462c:	40023800 	.word	0x40023800
 8004630:	0801a734 	.word	0x0801a734

08004634 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	220f      	movs	r2, #15
 8004642:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004644:	4b12      	ldr	r3, [pc, #72]	@ (8004690 <HAL_RCC_GetClockConfig+0x5c>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f003 0203 	and.w	r2, r3, #3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004650:	4b0f      	ldr	r3, [pc, #60]	@ (8004690 <HAL_RCC_GetClockConfig+0x5c>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800465c:	4b0c      	ldr	r3, [pc, #48]	@ (8004690 <HAL_RCC_GetClockConfig+0x5c>)
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004668:	4b09      	ldr	r3, [pc, #36]	@ (8004690 <HAL_RCC_GetClockConfig+0x5c>)
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	08db      	lsrs	r3, r3, #3
 800466e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004676:	4b07      	ldr	r3, [pc, #28]	@ (8004694 <HAL_RCC_GetClockConfig+0x60>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 020f 	and.w	r2, r3, #15
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	601a      	str	r2, [r3, #0]
}
 8004682:	bf00      	nop
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	40023800 	.word	0x40023800
 8004694:	40023c00 	.word	0x40023c00

08004698 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800469c:	b0a6      	sub	sp, #152	@ 0x98
 800469e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80046a0:	2300      	movs	r3, #0
 80046a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80046a6:	2300      	movs	r3, #0
 80046a8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80046ac:	2300      	movs	r3, #0
 80046ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80046b2:	2300      	movs	r3, #0
 80046b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046be:	4bc8      	ldr	r3, [pc, #800]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x348>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 030c 	and.w	r3, r3, #12
 80046c6:	2b0c      	cmp	r3, #12
 80046c8:	f200 817e 	bhi.w	80049c8 <HAL_RCC_GetSysClockFreq+0x330>
 80046cc:	a201      	add	r2, pc, #4	@ (adr r2, 80046d4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80046ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d2:	bf00      	nop
 80046d4:	08004709 	.word	0x08004709
 80046d8:	080049c9 	.word	0x080049c9
 80046dc:	080049c9 	.word	0x080049c9
 80046e0:	080049c9 	.word	0x080049c9
 80046e4:	08004711 	.word	0x08004711
 80046e8:	080049c9 	.word	0x080049c9
 80046ec:	080049c9 	.word	0x080049c9
 80046f0:	080049c9 	.word	0x080049c9
 80046f4:	08004719 	.word	0x08004719
 80046f8:	080049c9 	.word	0x080049c9
 80046fc:	080049c9 	.word	0x080049c9
 8004700:	080049c9 	.word	0x080049c9
 8004704:	08004883 	.word	0x08004883
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004708:	4bb6      	ldr	r3, [pc, #728]	@ (80049e4 <HAL_RCC_GetSysClockFreq+0x34c>)
 800470a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800470e:	e15f      	b.n	80049d0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004710:	4bb5      	ldr	r3, [pc, #724]	@ (80049e8 <HAL_RCC_GetSysClockFreq+0x350>)
 8004712:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004716:	e15b      	b.n	80049d0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004718:	4bb1      	ldr	r3, [pc, #708]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x348>)
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004720:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004724:	4bae      	ldr	r3, [pc, #696]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d031      	beq.n	8004794 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004730:	4bab      	ldr	r3, [pc, #684]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	099b      	lsrs	r3, r3, #6
 8004736:	2200      	movs	r2, #0
 8004738:	66bb      	str	r3, [r7, #104]	@ 0x68
 800473a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800473c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800473e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004742:	663b      	str	r3, [r7, #96]	@ 0x60
 8004744:	2300      	movs	r3, #0
 8004746:	667b      	str	r3, [r7, #100]	@ 0x64
 8004748:	4ba7      	ldr	r3, [pc, #668]	@ (80049e8 <HAL_RCC_GetSysClockFreq+0x350>)
 800474a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800474e:	462a      	mov	r2, r5
 8004750:	fb03 f202 	mul.w	r2, r3, r2
 8004754:	2300      	movs	r3, #0
 8004756:	4621      	mov	r1, r4
 8004758:	fb01 f303 	mul.w	r3, r1, r3
 800475c:	4413      	add	r3, r2
 800475e:	4aa2      	ldr	r2, [pc, #648]	@ (80049e8 <HAL_RCC_GetSysClockFreq+0x350>)
 8004760:	4621      	mov	r1, r4
 8004762:	fba1 1202 	umull	r1, r2, r1, r2
 8004766:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004768:	460a      	mov	r2, r1
 800476a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800476c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800476e:	4413      	add	r3, r2
 8004770:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004772:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004776:	2200      	movs	r2, #0
 8004778:	65bb      	str	r3, [r7, #88]	@ 0x58
 800477a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800477c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004780:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8004784:	f7fc faa2 	bl	8000ccc <__aeabi_uldivmod>
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	4613      	mov	r3, r2
 800478e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004792:	e064      	b.n	800485e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004794:	4b92      	ldr	r3, [pc, #584]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	099b      	lsrs	r3, r3, #6
 800479a:	2200      	movs	r2, #0
 800479c:	653b      	str	r3, [r7, #80]	@ 0x50
 800479e:	657a      	str	r2, [r7, #84]	@ 0x54
 80047a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047a8:	2300      	movs	r3, #0
 80047aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047ac:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80047b0:	4622      	mov	r2, r4
 80047b2:	462b      	mov	r3, r5
 80047b4:	f04f 0000 	mov.w	r0, #0
 80047b8:	f04f 0100 	mov.w	r1, #0
 80047bc:	0159      	lsls	r1, r3, #5
 80047be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047c2:	0150      	lsls	r0, r2, #5
 80047c4:	4602      	mov	r2, r0
 80047c6:	460b      	mov	r3, r1
 80047c8:	4621      	mov	r1, r4
 80047ca:	1a51      	subs	r1, r2, r1
 80047cc:	6139      	str	r1, [r7, #16]
 80047ce:	4629      	mov	r1, r5
 80047d0:	eb63 0301 	sbc.w	r3, r3, r1
 80047d4:	617b      	str	r3, [r7, #20]
 80047d6:	f04f 0200 	mov.w	r2, #0
 80047da:	f04f 0300 	mov.w	r3, #0
 80047de:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047e2:	4659      	mov	r1, fp
 80047e4:	018b      	lsls	r3, r1, #6
 80047e6:	4651      	mov	r1, sl
 80047e8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047ec:	4651      	mov	r1, sl
 80047ee:	018a      	lsls	r2, r1, #6
 80047f0:	4651      	mov	r1, sl
 80047f2:	ebb2 0801 	subs.w	r8, r2, r1
 80047f6:	4659      	mov	r1, fp
 80047f8:	eb63 0901 	sbc.w	r9, r3, r1
 80047fc:	f04f 0200 	mov.w	r2, #0
 8004800:	f04f 0300 	mov.w	r3, #0
 8004804:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004808:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800480c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004810:	4690      	mov	r8, r2
 8004812:	4699      	mov	r9, r3
 8004814:	4623      	mov	r3, r4
 8004816:	eb18 0303 	adds.w	r3, r8, r3
 800481a:	60bb      	str	r3, [r7, #8]
 800481c:	462b      	mov	r3, r5
 800481e:	eb49 0303 	adc.w	r3, r9, r3
 8004822:	60fb      	str	r3, [r7, #12]
 8004824:	f04f 0200 	mov.w	r2, #0
 8004828:	f04f 0300 	mov.w	r3, #0
 800482c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004830:	4629      	mov	r1, r5
 8004832:	028b      	lsls	r3, r1, #10
 8004834:	4621      	mov	r1, r4
 8004836:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800483a:	4621      	mov	r1, r4
 800483c:	028a      	lsls	r2, r1, #10
 800483e:	4610      	mov	r0, r2
 8004840:	4619      	mov	r1, r3
 8004842:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004846:	2200      	movs	r2, #0
 8004848:	643b      	str	r3, [r7, #64]	@ 0x40
 800484a:	647a      	str	r2, [r7, #68]	@ 0x44
 800484c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004850:	f7fc fa3c 	bl	8000ccc <__aeabi_uldivmod>
 8004854:	4602      	mov	r2, r0
 8004856:	460b      	mov	r3, r1
 8004858:	4613      	mov	r3, r2
 800485a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800485e:	4b60      	ldr	r3, [pc, #384]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	0c1b      	lsrs	r3, r3, #16
 8004864:	f003 0303 	and.w	r3, r3, #3
 8004868:	3301      	adds	r3, #1
 800486a:	005b      	lsls	r3, r3, #1
 800486c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8004870:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004874:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004878:	fbb2 f3f3 	udiv	r3, r2, r3
 800487c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004880:	e0a6      	b.n	80049d0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004882:	4b57      	ldr	r3, [pc, #348]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800488a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800488e:	4b54      	ldr	r3, [pc, #336]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d02a      	beq.n	80048f0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800489a:	4b51      	ldr	r3, [pc, #324]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x348>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	099b      	lsrs	r3, r3, #6
 80048a0:	2200      	movs	r2, #0
 80048a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80048a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80048a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80048ac:	2100      	movs	r1, #0
 80048ae:	4b4e      	ldr	r3, [pc, #312]	@ (80049e8 <HAL_RCC_GetSysClockFreq+0x350>)
 80048b0:	fb03 f201 	mul.w	r2, r3, r1
 80048b4:	2300      	movs	r3, #0
 80048b6:	fb00 f303 	mul.w	r3, r0, r3
 80048ba:	4413      	add	r3, r2
 80048bc:	4a4a      	ldr	r2, [pc, #296]	@ (80049e8 <HAL_RCC_GetSysClockFreq+0x350>)
 80048be:	fba0 1202 	umull	r1, r2, r0, r2
 80048c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80048c4:	460a      	mov	r2, r1
 80048c6:	673a      	str	r2, [r7, #112]	@ 0x70
 80048c8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80048ca:	4413      	add	r3, r2
 80048cc:	677b      	str	r3, [r7, #116]	@ 0x74
 80048ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048d2:	2200      	movs	r2, #0
 80048d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80048d6:	637a      	str	r2, [r7, #52]	@ 0x34
 80048d8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80048dc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80048e0:	f7fc f9f4 	bl	8000ccc <__aeabi_uldivmod>
 80048e4:	4602      	mov	r2, r0
 80048e6:	460b      	mov	r3, r1
 80048e8:	4613      	mov	r3, r2
 80048ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80048ee:	e05b      	b.n	80049a8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048f0:	4b3b      	ldr	r3, [pc, #236]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x348>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	099b      	lsrs	r3, r3, #6
 80048f6:	2200      	movs	r2, #0
 80048f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004902:	623b      	str	r3, [r7, #32]
 8004904:	2300      	movs	r3, #0
 8004906:	627b      	str	r3, [r7, #36]	@ 0x24
 8004908:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800490c:	4642      	mov	r2, r8
 800490e:	464b      	mov	r3, r9
 8004910:	f04f 0000 	mov.w	r0, #0
 8004914:	f04f 0100 	mov.w	r1, #0
 8004918:	0159      	lsls	r1, r3, #5
 800491a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800491e:	0150      	lsls	r0, r2, #5
 8004920:	4602      	mov	r2, r0
 8004922:	460b      	mov	r3, r1
 8004924:	4641      	mov	r1, r8
 8004926:	ebb2 0a01 	subs.w	sl, r2, r1
 800492a:	4649      	mov	r1, r9
 800492c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004930:	f04f 0200 	mov.w	r2, #0
 8004934:	f04f 0300 	mov.w	r3, #0
 8004938:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800493c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004940:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004944:	ebb2 040a 	subs.w	r4, r2, sl
 8004948:	eb63 050b 	sbc.w	r5, r3, fp
 800494c:	f04f 0200 	mov.w	r2, #0
 8004950:	f04f 0300 	mov.w	r3, #0
 8004954:	00eb      	lsls	r3, r5, #3
 8004956:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800495a:	00e2      	lsls	r2, r4, #3
 800495c:	4614      	mov	r4, r2
 800495e:	461d      	mov	r5, r3
 8004960:	4643      	mov	r3, r8
 8004962:	18e3      	adds	r3, r4, r3
 8004964:	603b      	str	r3, [r7, #0]
 8004966:	464b      	mov	r3, r9
 8004968:	eb45 0303 	adc.w	r3, r5, r3
 800496c:	607b      	str	r3, [r7, #4]
 800496e:	f04f 0200 	mov.w	r2, #0
 8004972:	f04f 0300 	mov.w	r3, #0
 8004976:	e9d7 4500 	ldrd	r4, r5, [r7]
 800497a:	4629      	mov	r1, r5
 800497c:	028b      	lsls	r3, r1, #10
 800497e:	4621      	mov	r1, r4
 8004980:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004984:	4621      	mov	r1, r4
 8004986:	028a      	lsls	r2, r1, #10
 8004988:	4610      	mov	r0, r2
 800498a:	4619      	mov	r1, r3
 800498c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004990:	2200      	movs	r2, #0
 8004992:	61bb      	str	r3, [r7, #24]
 8004994:	61fa      	str	r2, [r7, #28]
 8004996:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800499a:	f7fc f997 	bl	8000ccc <__aeabi_uldivmod>
 800499e:	4602      	mov	r2, r0
 80049a0:	460b      	mov	r3, r1
 80049a2:	4613      	mov	r3, r2
 80049a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80049a8:	4b0d      	ldr	r3, [pc, #52]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x348>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	0f1b      	lsrs	r3, r3, #28
 80049ae:	f003 0307 	and.w	r3, r3, #7
 80049b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80049b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80049ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80049be:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80049c6:	e003      	b.n	80049d0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049c8:	4b06      	ldr	r3, [pc, #24]	@ (80049e4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80049ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80049ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3798      	adds	r7, #152	@ 0x98
 80049d8:	46bd      	mov	sp, r7
 80049da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049de:	bf00      	nop
 80049e0:	40023800 	.word	0x40023800
 80049e4:	00f42400 	.word	0x00f42400
 80049e8:	017d7840 	.word	0x017d7840

080049ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e28d      	b.n	8004f1a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f000 8083 	beq.w	8004b12 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004a0c:	4b94      	ldr	r3, [pc, #592]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f003 030c 	and.w	r3, r3, #12
 8004a14:	2b04      	cmp	r3, #4
 8004a16:	d019      	beq.n	8004a4c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004a18:	4b91      	ldr	r3, [pc, #580]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f003 030c 	and.w	r3, r3, #12
        || \
 8004a20:	2b08      	cmp	r3, #8
 8004a22:	d106      	bne.n	8004a32 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004a24:	4b8e      	ldr	r3, [pc, #568]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a30:	d00c      	beq.n	8004a4c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a32:	4b8b      	ldr	r3, [pc, #556]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004a3a:	2b0c      	cmp	r3, #12
 8004a3c:	d112      	bne.n	8004a64 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a3e:	4b88      	ldr	r3, [pc, #544]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a4a:	d10b      	bne.n	8004a64 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a4c:	4b84      	ldr	r3, [pc, #528]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d05b      	beq.n	8004b10 <HAL_RCC_OscConfig+0x124>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d157      	bne.n	8004b10 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e25a      	b.n	8004f1a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a6c:	d106      	bne.n	8004a7c <HAL_RCC_OscConfig+0x90>
 8004a6e:	4b7c      	ldr	r3, [pc, #496]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a7b      	ldr	r2, [pc, #492]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004a74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a78:	6013      	str	r3, [r2, #0]
 8004a7a:	e01d      	b.n	8004ab8 <HAL_RCC_OscConfig+0xcc>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a84:	d10c      	bne.n	8004aa0 <HAL_RCC_OscConfig+0xb4>
 8004a86:	4b76      	ldr	r3, [pc, #472]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a75      	ldr	r2, [pc, #468]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004a8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a90:	6013      	str	r3, [r2, #0]
 8004a92:	4b73      	ldr	r3, [pc, #460]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a72      	ldr	r2, [pc, #456]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004a98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a9c:	6013      	str	r3, [r2, #0]
 8004a9e:	e00b      	b.n	8004ab8 <HAL_RCC_OscConfig+0xcc>
 8004aa0:	4b6f      	ldr	r3, [pc, #444]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a6e      	ldr	r2, [pc, #440]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004aa6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004aaa:	6013      	str	r3, [r2, #0]
 8004aac:	4b6c      	ldr	r3, [pc, #432]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a6b      	ldr	r2, [pc, #428]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004ab2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ab6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d013      	beq.n	8004ae8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac0:	f7fe fcbc 	bl	800343c <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ac8:	f7fe fcb8 	bl	800343c <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b64      	cmp	r3, #100	@ 0x64
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e21f      	b.n	8004f1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ada:	4b61      	ldr	r3, [pc, #388]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d0f0      	beq.n	8004ac8 <HAL_RCC_OscConfig+0xdc>
 8004ae6:	e014      	b.n	8004b12 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae8:	f7fe fca8 	bl	800343c <HAL_GetTick>
 8004aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aee:	e008      	b.n	8004b02 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004af0:	f7fe fca4 	bl	800343c <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b64      	cmp	r3, #100	@ 0x64
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e20b      	b.n	8004f1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b02:	4b57      	ldr	r3, [pc, #348]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1f0      	bne.n	8004af0 <HAL_RCC_OscConfig+0x104>
 8004b0e:	e000      	b.n	8004b12 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d06f      	beq.n	8004bfe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004b1e:	4b50      	ldr	r3, [pc, #320]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f003 030c 	and.w	r3, r3, #12
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d017      	beq.n	8004b5a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004b2a:	4b4d      	ldr	r3, [pc, #308]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f003 030c 	and.w	r3, r3, #12
        || \
 8004b32:	2b08      	cmp	r3, #8
 8004b34:	d105      	bne.n	8004b42 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004b36:	4b4a      	ldr	r3, [pc, #296]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00b      	beq.n	8004b5a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b42:	4b47      	ldr	r3, [pc, #284]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004b4a:	2b0c      	cmp	r3, #12
 8004b4c:	d11c      	bne.n	8004b88 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b4e:	4b44      	ldr	r3, [pc, #272]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d116      	bne.n	8004b88 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b5a:	4b41      	ldr	r3, [pc, #260]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d005      	beq.n	8004b72 <HAL_RCC_OscConfig+0x186>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d001      	beq.n	8004b72 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e1d3      	b.n	8004f1a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b72:	4b3b      	ldr	r3, [pc, #236]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	4937      	ldr	r1, [pc, #220]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b86:	e03a      	b.n	8004bfe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d020      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b90:	4b34      	ldr	r3, [pc, #208]	@ (8004c64 <HAL_RCC_OscConfig+0x278>)
 8004b92:	2201      	movs	r2, #1
 8004b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b96:	f7fe fc51 	bl	800343c <HAL_GetTick>
 8004b9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b9c:	e008      	b.n	8004bb0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b9e:	f7fe fc4d 	bl	800343c <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d901      	bls.n	8004bb0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e1b4      	b.n	8004f1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bb0:	4b2b      	ldr	r3, [pc, #172]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0302 	and.w	r3, r3, #2
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d0f0      	beq.n	8004b9e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bbc:	4b28      	ldr	r3, [pc, #160]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	00db      	lsls	r3, r3, #3
 8004bca:	4925      	ldr	r1, [pc, #148]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	600b      	str	r3, [r1, #0]
 8004bd0:	e015      	b.n	8004bfe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bd2:	4b24      	ldr	r3, [pc, #144]	@ (8004c64 <HAL_RCC_OscConfig+0x278>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd8:	f7fe fc30 	bl	800343c <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004be0:	f7fe fc2c 	bl	800343c <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e193      	b.n	8004f1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1f0      	bne.n	8004be0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0308 	and.w	r3, r3, #8
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d036      	beq.n	8004c78 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d016      	beq.n	8004c40 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c12:	4b15      	ldr	r3, [pc, #84]	@ (8004c68 <HAL_RCC_OscConfig+0x27c>)
 8004c14:	2201      	movs	r2, #1
 8004c16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c18:	f7fe fc10 	bl	800343c <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c20:	f7fe fc0c 	bl	800343c <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e173      	b.n	8004f1a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c32:	4b0b      	ldr	r3, [pc, #44]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004c34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0f0      	beq.n	8004c20 <HAL_RCC_OscConfig+0x234>
 8004c3e:	e01b      	b.n	8004c78 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c40:	4b09      	ldr	r3, [pc, #36]	@ (8004c68 <HAL_RCC_OscConfig+0x27c>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c46:	f7fe fbf9 	bl	800343c <HAL_GetTick>
 8004c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c4c:	e00e      	b.n	8004c6c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c4e:	f7fe fbf5 	bl	800343c <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d907      	bls.n	8004c6c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e15c      	b.n	8004f1a <HAL_RCC_OscConfig+0x52e>
 8004c60:	40023800 	.word	0x40023800
 8004c64:	42470000 	.word	0x42470000
 8004c68:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c6c:	4b8a      	ldr	r3, [pc, #552]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004c6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c70:	f003 0302 	and.w	r3, r3, #2
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1ea      	bne.n	8004c4e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0304 	and.w	r3, r3, #4
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f000 8097 	beq.w	8004db4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c86:	2300      	movs	r3, #0
 8004c88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c8a:	4b83      	ldr	r3, [pc, #524]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10f      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c96:	2300      	movs	r3, #0
 8004c98:	60bb      	str	r3, [r7, #8]
 8004c9a:	4b7f      	ldr	r3, [pc, #508]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9e:	4a7e      	ldr	r2, [pc, #504]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004ca0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ca4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ca6:	4b7c      	ldr	r3, [pc, #496]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cae:	60bb      	str	r3, [r7, #8]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb6:	4b79      	ldr	r3, [pc, #484]	@ (8004e9c <HAL_RCC_OscConfig+0x4b0>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d118      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cc2:	4b76      	ldr	r3, [pc, #472]	@ (8004e9c <HAL_RCC_OscConfig+0x4b0>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a75      	ldr	r2, [pc, #468]	@ (8004e9c <HAL_RCC_OscConfig+0x4b0>)
 8004cc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ccc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cce:	f7fe fbb5 	bl	800343c <HAL_GetTick>
 8004cd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cd4:	e008      	b.n	8004ce8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cd6:	f7fe fbb1 	bl	800343c <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e118      	b.n	8004f1a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ce8:	4b6c      	ldr	r3, [pc, #432]	@ (8004e9c <HAL_RCC_OscConfig+0x4b0>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0f0      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d106      	bne.n	8004d0a <HAL_RCC_OscConfig+0x31e>
 8004cfc:	4b66      	ldr	r3, [pc, #408]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d00:	4a65      	ldr	r2, [pc, #404]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004d02:	f043 0301 	orr.w	r3, r3, #1
 8004d06:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d08:	e01c      	b.n	8004d44 <HAL_RCC_OscConfig+0x358>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	2b05      	cmp	r3, #5
 8004d10:	d10c      	bne.n	8004d2c <HAL_RCC_OscConfig+0x340>
 8004d12:	4b61      	ldr	r3, [pc, #388]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d16:	4a60      	ldr	r2, [pc, #384]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004d18:	f043 0304 	orr.w	r3, r3, #4
 8004d1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d1e:	4b5e      	ldr	r3, [pc, #376]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d22:	4a5d      	ldr	r2, [pc, #372]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004d24:	f043 0301 	orr.w	r3, r3, #1
 8004d28:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d2a:	e00b      	b.n	8004d44 <HAL_RCC_OscConfig+0x358>
 8004d2c:	4b5a      	ldr	r3, [pc, #360]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004d2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d30:	4a59      	ldr	r2, [pc, #356]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004d32:	f023 0301 	bic.w	r3, r3, #1
 8004d36:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d38:	4b57      	ldr	r3, [pc, #348]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d3c:	4a56      	ldr	r2, [pc, #344]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004d3e:	f023 0304 	bic.w	r3, r3, #4
 8004d42:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d015      	beq.n	8004d78 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d4c:	f7fe fb76 	bl	800343c <HAL_GetTick>
 8004d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d52:	e00a      	b.n	8004d6a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d54:	f7fe fb72 	bl	800343c <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e0d7      	b.n	8004f1a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d6a:	4b4b      	ldr	r3, [pc, #300]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d0ee      	beq.n	8004d54 <HAL_RCC_OscConfig+0x368>
 8004d76:	e014      	b.n	8004da2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d78:	f7fe fb60 	bl	800343c <HAL_GetTick>
 8004d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d7e:	e00a      	b.n	8004d96 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d80:	f7fe fb5c 	bl	800343c <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e0c1      	b.n	8004f1a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d96:	4b40      	ldr	r3, [pc, #256]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1ee      	bne.n	8004d80 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004da2:	7dfb      	ldrb	r3, [r7, #23]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d105      	bne.n	8004db4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004da8:	4b3b      	ldr	r3, [pc, #236]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dac:	4a3a      	ldr	r2, [pc, #232]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004dae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004db2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 80ad 	beq.w	8004f18 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004dbe:	4b36      	ldr	r3, [pc, #216]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f003 030c 	and.w	r3, r3, #12
 8004dc6:	2b08      	cmp	r3, #8
 8004dc8:	d060      	beq.n	8004e8c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d145      	bne.n	8004e5e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dd2:	4b33      	ldr	r3, [pc, #204]	@ (8004ea0 <HAL_RCC_OscConfig+0x4b4>)
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd8:	f7fe fb30 	bl	800343c <HAL_GetTick>
 8004ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dde:	e008      	b.n	8004df2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004de0:	f7fe fb2c 	bl	800343c <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e093      	b.n	8004f1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004df2:	4b29      	ldr	r3, [pc, #164]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1f0      	bne.n	8004de0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	69da      	ldr	r2, [r3, #28]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	431a      	orrs	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e0c:	019b      	lsls	r3, r3, #6
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e14:	085b      	lsrs	r3, r3, #1
 8004e16:	3b01      	subs	r3, #1
 8004e18:	041b      	lsls	r3, r3, #16
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e20:	061b      	lsls	r3, r3, #24
 8004e22:	431a      	orrs	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e28:	071b      	lsls	r3, r3, #28
 8004e2a:	491b      	ldr	r1, [pc, #108]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e30:	4b1b      	ldr	r3, [pc, #108]	@ (8004ea0 <HAL_RCC_OscConfig+0x4b4>)
 8004e32:	2201      	movs	r2, #1
 8004e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e36:	f7fe fb01 	bl	800343c <HAL_GetTick>
 8004e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e3c:	e008      	b.n	8004e50 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e3e:	f7fe fafd 	bl	800343c <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d901      	bls.n	8004e50 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e064      	b.n	8004f1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e50:	4b11      	ldr	r3, [pc, #68]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d0f0      	beq.n	8004e3e <HAL_RCC_OscConfig+0x452>
 8004e5c:	e05c      	b.n	8004f18 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e5e:	4b10      	ldr	r3, [pc, #64]	@ (8004ea0 <HAL_RCC_OscConfig+0x4b4>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e64:	f7fe faea 	bl	800343c <HAL_GetTick>
 8004e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e6a:	e008      	b.n	8004e7e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e6c:	f7fe fae6 	bl	800343c <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e04d      	b.n	8004f1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e7e:	4b06      	ldr	r3, [pc, #24]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1f0      	bne.n	8004e6c <HAL_RCC_OscConfig+0x480>
 8004e8a:	e045      	b.n	8004f18 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d107      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e040      	b.n	8004f1a <HAL_RCC_OscConfig+0x52e>
 8004e98:	40023800 	.word	0x40023800
 8004e9c:	40007000 	.word	0x40007000
 8004ea0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ea4:	4b1f      	ldr	r3, [pc, #124]	@ (8004f24 <HAL_RCC_OscConfig+0x538>)
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d030      	beq.n	8004f14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d129      	bne.n	8004f14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d122      	bne.n	8004f14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004eda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d119      	bne.n	8004f14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eea:	085b      	lsrs	r3, r3, #1
 8004eec:	3b01      	subs	r3, #1
 8004eee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d10f      	bne.n	8004f14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d107      	bne.n	8004f14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f0e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d001      	beq.n	8004f18 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e000      	b.n	8004f1a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3718      	adds	r7, #24
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	40023800 	.word	0x40023800

08004f28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e041      	b.n	8004fbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d106      	bne.n	8004f54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7fd fe6a 	bl	8002c28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2202      	movs	r2, #2
 8004f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	3304      	adds	r3, #4
 8004f64:	4619      	mov	r1, r3
 8004f66:	4610      	mov	r0, r2
 8004f68:	f000 fd8c 	bl	8005a84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
	...

08004fc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d001      	beq.n	8004fe0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e04e      	b.n	800507e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68da      	ldr	r2, [r3, #12]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f042 0201 	orr.w	r2, r2, #1
 8004ff6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a23      	ldr	r2, [pc, #140]	@ (800508c <HAL_TIM_Base_Start_IT+0xc4>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d022      	beq.n	8005048 <HAL_TIM_Base_Start_IT+0x80>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800500a:	d01d      	beq.n	8005048 <HAL_TIM_Base_Start_IT+0x80>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a1f      	ldr	r2, [pc, #124]	@ (8005090 <HAL_TIM_Base_Start_IT+0xc8>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d018      	beq.n	8005048 <HAL_TIM_Base_Start_IT+0x80>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a1e      	ldr	r2, [pc, #120]	@ (8005094 <HAL_TIM_Base_Start_IT+0xcc>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d013      	beq.n	8005048 <HAL_TIM_Base_Start_IT+0x80>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a1c      	ldr	r2, [pc, #112]	@ (8005098 <HAL_TIM_Base_Start_IT+0xd0>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d00e      	beq.n	8005048 <HAL_TIM_Base_Start_IT+0x80>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a1b      	ldr	r2, [pc, #108]	@ (800509c <HAL_TIM_Base_Start_IT+0xd4>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d009      	beq.n	8005048 <HAL_TIM_Base_Start_IT+0x80>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a19      	ldr	r2, [pc, #100]	@ (80050a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d004      	beq.n	8005048 <HAL_TIM_Base_Start_IT+0x80>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a18      	ldr	r2, [pc, #96]	@ (80050a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d111      	bne.n	800506c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 0307 	and.w	r3, r3, #7
 8005052:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2b06      	cmp	r3, #6
 8005058:	d010      	beq.n	800507c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f042 0201 	orr.w	r2, r2, #1
 8005068:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800506a:	e007      	b.n	800507c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f042 0201 	orr.w	r2, r2, #1
 800507a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3714      	adds	r7, #20
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	40010000 	.word	0x40010000
 8005090:	40000400 	.word	0x40000400
 8005094:	40000800 	.word	0x40000800
 8005098:	40000c00 	.word	0x40000c00
 800509c:	40010400 	.word	0x40010400
 80050a0:	40014000 	.word	0x40014000
 80050a4:	40001800 	.word	0x40001800

080050a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e041      	b.n	800513e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d106      	bne.n	80050d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f7fd fdd2 	bl	8002c78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	3304      	adds	r3, #4
 80050e4:	4619      	mov	r1, r3
 80050e6:	4610      	mov	r0, r2
 80050e8:	f000 fccc 	bl	8005a84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3708      	adds	r7, #8
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
	...

08005148 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d109      	bne.n	800516c <HAL_TIM_PWM_Start+0x24>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b01      	cmp	r3, #1
 8005162:	bf14      	ite	ne
 8005164:	2301      	movne	r3, #1
 8005166:	2300      	moveq	r3, #0
 8005168:	b2db      	uxtb	r3, r3
 800516a:	e022      	b.n	80051b2 <HAL_TIM_PWM_Start+0x6a>
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	2b04      	cmp	r3, #4
 8005170:	d109      	bne.n	8005186 <HAL_TIM_PWM_Start+0x3e>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b01      	cmp	r3, #1
 800517c:	bf14      	ite	ne
 800517e:	2301      	movne	r3, #1
 8005180:	2300      	moveq	r3, #0
 8005182:	b2db      	uxtb	r3, r3
 8005184:	e015      	b.n	80051b2 <HAL_TIM_PWM_Start+0x6a>
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2b08      	cmp	r3, #8
 800518a:	d109      	bne.n	80051a0 <HAL_TIM_PWM_Start+0x58>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b01      	cmp	r3, #1
 8005196:	bf14      	ite	ne
 8005198:	2301      	movne	r3, #1
 800519a:	2300      	moveq	r3, #0
 800519c:	b2db      	uxtb	r3, r3
 800519e:	e008      	b.n	80051b2 <HAL_TIM_PWM_Start+0x6a>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	bf14      	ite	ne
 80051ac:	2301      	movne	r3, #1
 80051ae:	2300      	moveq	r3, #0
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e07c      	b.n	80052b4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d104      	bne.n	80051ca <HAL_TIM_PWM_Start+0x82>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2202      	movs	r2, #2
 80051c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051c8:	e013      	b.n	80051f2 <HAL_TIM_PWM_Start+0xaa>
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	2b04      	cmp	r3, #4
 80051ce:	d104      	bne.n	80051da <HAL_TIM_PWM_Start+0x92>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2202      	movs	r2, #2
 80051d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051d8:	e00b      	b.n	80051f2 <HAL_TIM_PWM_Start+0xaa>
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	2b08      	cmp	r3, #8
 80051de:	d104      	bne.n	80051ea <HAL_TIM_PWM_Start+0xa2>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051e8:	e003      	b.n	80051f2 <HAL_TIM_PWM_Start+0xaa>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2202      	movs	r2, #2
 80051ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2201      	movs	r2, #1
 80051f8:	6839      	ldr	r1, [r7, #0]
 80051fa:	4618      	mov	r0, r3
 80051fc:	f000 ff32 	bl	8006064 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a2d      	ldr	r2, [pc, #180]	@ (80052bc <HAL_TIM_PWM_Start+0x174>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d004      	beq.n	8005214 <HAL_TIM_PWM_Start+0xcc>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a2c      	ldr	r2, [pc, #176]	@ (80052c0 <HAL_TIM_PWM_Start+0x178>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d101      	bne.n	8005218 <HAL_TIM_PWM_Start+0xd0>
 8005214:	2301      	movs	r3, #1
 8005216:	e000      	b.n	800521a <HAL_TIM_PWM_Start+0xd2>
 8005218:	2300      	movs	r3, #0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d007      	beq.n	800522e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800522c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a22      	ldr	r2, [pc, #136]	@ (80052bc <HAL_TIM_PWM_Start+0x174>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d022      	beq.n	800527e <HAL_TIM_PWM_Start+0x136>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005240:	d01d      	beq.n	800527e <HAL_TIM_PWM_Start+0x136>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a1f      	ldr	r2, [pc, #124]	@ (80052c4 <HAL_TIM_PWM_Start+0x17c>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d018      	beq.n	800527e <HAL_TIM_PWM_Start+0x136>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a1d      	ldr	r2, [pc, #116]	@ (80052c8 <HAL_TIM_PWM_Start+0x180>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d013      	beq.n	800527e <HAL_TIM_PWM_Start+0x136>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a1c      	ldr	r2, [pc, #112]	@ (80052cc <HAL_TIM_PWM_Start+0x184>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d00e      	beq.n	800527e <HAL_TIM_PWM_Start+0x136>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a16      	ldr	r2, [pc, #88]	@ (80052c0 <HAL_TIM_PWM_Start+0x178>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d009      	beq.n	800527e <HAL_TIM_PWM_Start+0x136>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a18      	ldr	r2, [pc, #96]	@ (80052d0 <HAL_TIM_PWM_Start+0x188>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d004      	beq.n	800527e <HAL_TIM_PWM_Start+0x136>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a16      	ldr	r2, [pc, #88]	@ (80052d4 <HAL_TIM_PWM_Start+0x18c>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d111      	bne.n	80052a2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f003 0307 	and.w	r3, r3, #7
 8005288:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2b06      	cmp	r3, #6
 800528e:	d010      	beq.n	80052b2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f042 0201 	orr.w	r2, r2, #1
 800529e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a0:	e007      	b.n	80052b2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f042 0201 	orr.w	r2, r2, #1
 80052b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	40010000 	.word	0x40010000
 80052c0:	40010400 	.word	0x40010400
 80052c4:	40000400 	.word	0x40000400
 80052c8:	40000800 	.word	0x40000800
 80052cc:	40000c00 	.word	0x40000c00
 80052d0:	40014000 	.word	0x40014000
 80052d4:	40001800 	.word	0x40001800

080052d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d101      	bne.n	80052ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e097      	b.n	800541c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d106      	bne.n	8005306 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f7fd fc49 	bl	8002b98 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2202      	movs	r2, #2
 800530a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	6812      	ldr	r2, [r2, #0]
 8005318:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800531c:	f023 0307 	bic.w	r3, r3, #7
 8005320:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	3304      	adds	r3, #4
 800532a:	4619      	mov	r1, r3
 800532c:	4610      	mov	r0, r2
 800532e:	f000 fba9 	bl	8005a84 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	6a1b      	ldr	r3, [r3, #32]
 8005348:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	4313      	orrs	r3, r2
 8005352:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800535a:	f023 0303 	bic.w	r3, r3, #3
 800535e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	689a      	ldr	r2, [r3, #8]
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	021b      	lsls	r3, r3, #8
 800536a:	4313      	orrs	r3, r2
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	4313      	orrs	r3, r2
 8005370:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005378:	f023 030c 	bic.w	r3, r3, #12
 800537c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005384:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005388:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	68da      	ldr	r2, [r3, #12]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	69db      	ldr	r3, [r3, #28]
 8005392:	021b      	lsls	r3, r3, #8
 8005394:	4313      	orrs	r3, r2
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	4313      	orrs	r3, r2
 800539a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	011a      	lsls	r2, r3, #4
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	031b      	lsls	r3, r3, #12
 80053a8:	4313      	orrs	r3, r2
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80053b6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80053be:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	685a      	ldr	r2, [r3, #4]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	011b      	lsls	r3, r3, #4
 80053ca:	4313      	orrs	r3, r2
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3718      	adds	r7, #24
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005434:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800543c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005444:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800544c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d110      	bne.n	8005476 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005454:	7bfb      	ldrb	r3, [r7, #15]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d102      	bne.n	8005460 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800545a:	7b7b      	ldrb	r3, [r7, #13]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d001      	beq.n	8005464 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e069      	b.n	8005538 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2202      	movs	r2, #2
 8005468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2202      	movs	r2, #2
 8005470:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005474:	e031      	b.n	80054da <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	2b04      	cmp	r3, #4
 800547a:	d110      	bne.n	800549e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800547c:	7bbb      	ldrb	r3, [r7, #14]
 800547e:	2b01      	cmp	r3, #1
 8005480:	d102      	bne.n	8005488 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005482:	7b3b      	ldrb	r3, [r7, #12]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d001      	beq.n	800548c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e055      	b.n	8005538 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2202      	movs	r2, #2
 8005490:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2202      	movs	r2, #2
 8005498:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800549c:	e01d      	b.n	80054da <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800549e:	7bfb      	ldrb	r3, [r7, #15]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d108      	bne.n	80054b6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80054a4:	7bbb      	ldrb	r3, [r7, #14]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d105      	bne.n	80054b6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054aa:	7b7b      	ldrb	r3, [r7, #13]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d102      	bne.n	80054b6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80054b0:	7b3b      	ldrb	r3, [r7, #12]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d001      	beq.n	80054ba <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e03e      	b.n	8005538 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2202      	movs	r2, #2
 80054be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2202      	movs	r2, #2
 80054c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2202      	movs	r2, #2
 80054ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2202      	movs	r2, #2
 80054d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d003      	beq.n	80054e8 <HAL_TIM_Encoder_Start+0xc4>
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	d008      	beq.n	80054f8 <HAL_TIM_Encoder_Start+0xd4>
 80054e6:	e00f      	b.n	8005508 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2201      	movs	r2, #1
 80054ee:	2100      	movs	r1, #0
 80054f0:	4618      	mov	r0, r3
 80054f2:	f000 fdb7 	bl	8006064 <TIM_CCxChannelCmd>
      break;
 80054f6:	e016      	b.n	8005526 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2201      	movs	r2, #1
 80054fe:	2104      	movs	r1, #4
 8005500:	4618      	mov	r0, r3
 8005502:	f000 fdaf 	bl	8006064 <TIM_CCxChannelCmd>
      break;
 8005506:	e00e      	b.n	8005526 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2201      	movs	r2, #1
 800550e:	2100      	movs	r1, #0
 8005510:	4618      	mov	r0, r3
 8005512:	f000 fda7 	bl	8006064 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2201      	movs	r2, #1
 800551c:	2104      	movs	r1, #4
 800551e:	4618      	mov	r0, r3
 8005520:	f000 fda0 	bl	8006064 <TIM_CCxChannelCmd>
      break;
 8005524:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f042 0201 	orr.w	r2, r2, #1
 8005534:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	2b00      	cmp	r3, #0
 8005560:	d020      	beq.n	80055a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	2b00      	cmp	r3, #0
 800556a:	d01b      	beq.n	80055a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f06f 0202 	mvn.w	r2, #2
 8005574:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2201      	movs	r2, #1
 800557a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	f003 0303 	and.w	r3, r3, #3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 fa5b 	bl	8005a46 <HAL_TIM_IC_CaptureCallback>
 8005590:	e005      	b.n	800559e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 fa4d 	bl	8005a32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 fa5e 	bl	8005a5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f003 0304 	and.w	r3, r3, #4
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d020      	beq.n	80055f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f003 0304 	and.w	r3, r3, #4
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d01b      	beq.n	80055f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f06f 0204 	mvn.w	r2, #4
 80055c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2202      	movs	r2, #2
 80055c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d003      	beq.n	80055de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 fa35 	bl	8005a46 <HAL_TIM_IC_CaptureCallback>
 80055dc:	e005      	b.n	80055ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 fa27 	bl	8005a32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 fa38 	bl	8005a5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	f003 0308 	and.w	r3, r3, #8
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d020      	beq.n	800563c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f003 0308 	and.w	r3, r3, #8
 8005600:	2b00      	cmp	r3, #0
 8005602:	d01b      	beq.n	800563c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f06f 0208 	mvn.w	r2, #8
 800560c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2204      	movs	r2, #4
 8005612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	69db      	ldr	r3, [r3, #28]
 800561a:	f003 0303 	and.w	r3, r3, #3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 fa0f 	bl	8005a46 <HAL_TIM_IC_CaptureCallback>
 8005628:	e005      	b.n	8005636 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 fa01 	bl	8005a32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 fa12 	bl	8005a5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	f003 0310 	and.w	r3, r3, #16
 8005642:	2b00      	cmp	r3, #0
 8005644:	d020      	beq.n	8005688 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f003 0310 	and.w	r3, r3, #16
 800564c:	2b00      	cmp	r3, #0
 800564e:	d01b      	beq.n	8005688 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f06f 0210 	mvn.w	r2, #16
 8005658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2208      	movs	r2, #8
 800565e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f9e9 	bl	8005a46 <HAL_TIM_IC_CaptureCallback>
 8005674:	e005      	b.n	8005682 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f9db 	bl	8005a32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f9ec 	bl	8005a5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00c      	beq.n	80056ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f003 0301 	and.w	r3, r3, #1
 8005698:	2b00      	cmp	r3, #0
 800569a:	d007      	beq.n	80056ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f06f 0201 	mvn.w	r2, #1
 80056a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f7fd fe46 	bl	8003338 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00c      	beq.n	80056d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d007      	beq.n	80056d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80056c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 fd76 	bl	80061bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00c      	beq.n	80056f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d007      	beq.n	80056f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80056ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f9bd 	bl	8005a6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	f003 0320 	and.w	r3, r3, #32
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00c      	beq.n	8005718 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f003 0320 	and.w	r3, r3, #32
 8005704:	2b00      	cmp	r3, #0
 8005706:	d007      	beq.n	8005718 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f06f 0220 	mvn.w	r2, #32
 8005710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 fd48 	bl	80061a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005718:	bf00      	nop
 800571a:	3710      	adds	r7, #16
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b086      	sub	sp, #24
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800572c:	2300      	movs	r3, #0
 800572e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005736:	2b01      	cmp	r3, #1
 8005738:	d101      	bne.n	800573e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800573a:	2302      	movs	r3, #2
 800573c:	e0ae      	b.n	800589c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2b0c      	cmp	r3, #12
 800574a:	f200 809f 	bhi.w	800588c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800574e:	a201      	add	r2, pc, #4	@ (adr r2, 8005754 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005754:	08005789 	.word	0x08005789
 8005758:	0800588d 	.word	0x0800588d
 800575c:	0800588d 	.word	0x0800588d
 8005760:	0800588d 	.word	0x0800588d
 8005764:	080057c9 	.word	0x080057c9
 8005768:	0800588d 	.word	0x0800588d
 800576c:	0800588d 	.word	0x0800588d
 8005770:	0800588d 	.word	0x0800588d
 8005774:	0800580b 	.word	0x0800580b
 8005778:	0800588d 	.word	0x0800588d
 800577c:	0800588d 	.word	0x0800588d
 8005780:	0800588d 	.word	0x0800588d
 8005784:	0800584b 	.word	0x0800584b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68b9      	ldr	r1, [r7, #8]
 800578e:	4618      	mov	r0, r3
 8005790:	f000 fa1e 	bl	8005bd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	699a      	ldr	r2, [r3, #24]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f042 0208 	orr.w	r2, r2, #8
 80057a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	699a      	ldr	r2, [r3, #24]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f022 0204 	bic.w	r2, r2, #4
 80057b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6999      	ldr	r1, [r3, #24]
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	691a      	ldr	r2, [r3, #16]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	619a      	str	r2, [r3, #24]
      break;
 80057c6:	e064      	b.n	8005892 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68b9      	ldr	r1, [r7, #8]
 80057ce:	4618      	mov	r0, r3
 80057d0:	f000 fa6e 	bl	8005cb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	699a      	ldr	r2, [r3, #24]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	699a      	ldr	r2, [r3, #24]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6999      	ldr	r1, [r3, #24]
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	021a      	lsls	r2, r3, #8
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	430a      	orrs	r2, r1
 8005806:	619a      	str	r2, [r3, #24]
      break;
 8005808:	e043      	b.n	8005892 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68b9      	ldr	r1, [r7, #8]
 8005810:	4618      	mov	r0, r3
 8005812:	f000 fac3 	bl	8005d9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	69da      	ldr	r2, [r3, #28]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f042 0208 	orr.w	r2, r2, #8
 8005824:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	69da      	ldr	r2, [r3, #28]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f022 0204 	bic.w	r2, r2, #4
 8005834:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	69d9      	ldr	r1, [r3, #28]
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	691a      	ldr	r2, [r3, #16]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	430a      	orrs	r2, r1
 8005846:	61da      	str	r2, [r3, #28]
      break;
 8005848:	e023      	b.n	8005892 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68b9      	ldr	r1, [r7, #8]
 8005850:	4618      	mov	r0, r3
 8005852:	f000 fb17 	bl	8005e84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	69da      	ldr	r2, [r3, #28]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005864:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	69da      	ldr	r2, [r3, #28]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005874:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	69d9      	ldr	r1, [r3, #28]
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	021a      	lsls	r2, r3, #8
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	430a      	orrs	r2, r1
 8005888:	61da      	str	r2, [r3, #28]
      break;
 800588a:	e002      	b.n	8005892 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	75fb      	strb	r3, [r7, #23]
      break;
 8005890:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800589a:	7dfb      	ldrb	r3, [r7, #23]
}
 800589c:	4618      	mov	r0, r3
 800589e:	3718      	adds	r7, #24
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058ae:	2300      	movs	r3, #0
 80058b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d101      	bne.n	80058c0 <HAL_TIM_ConfigClockSource+0x1c>
 80058bc:	2302      	movs	r3, #2
 80058be:	e0b4      	b.n	8005a2a <HAL_TIM_ConfigClockSource+0x186>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2202      	movs	r2, #2
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80058de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058f8:	d03e      	beq.n	8005978 <HAL_TIM_ConfigClockSource+0xd4>
 80058fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058fe:	f200 8087 	bhi.w	8005a10 <HAL_TIM_ConfigClockSource+0x16c>
 8005902:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005906:	f000 8086 	beq.w	8005a16 <HAL_TIM_ConfigClockSource+0x172>
 800590a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800590e:	d87f      	bhi.n	8005a10 <HAL_TIM_ConfigClockSource+0x16c>
 8005910:	2b70      	cmp	r3, #112	@ 0x70
 8005912:	d01a      	beq.n	800594a <HAL_TIM_ConfigClockSource+0xa6>
 8005914:	2b70      	cmp	r3, #112	@ 0x70
 8005916:	d87b      	bhi.n	8005a10 <HAL_TIM_ConfigClockSource+0x16c>
 8005918:	2b60      	cmp	r3, #96	@ 0x60
 800591a:	d050      	beq.n	80059be <HAL_TIM_ConfigClockSource+0x11a>
 800591c:	2b60      	cmp	r3, #96	@ 0x60
 800591e:	d877      	bhi.n	8005a10 <HAL_TIM_ConfigClockSource+0x16c>
 8005920:	2b50      	cmp	r3, #80	@ 0x50
 8005922:	d03c      	beq.n	800599e <HAL_TIM_ConfigClockSource+0xfa>
 8005924:	2b50      	cmp	r3, #80	@ 0x50
 8005926:	d873      	bhi.n	8005a10 <HAL_TIM_ConfigClockSource+0x16c>
 8005928:	2b40      	cmp	r3, #64	@ 0x40
 800592a:	d058      	beq.n	80059de <HAL_TIM_ConfigClockSource+0x13a>
 800592c:	2b40      	cmp	r3, #64	@ 0x40
 800592e:	d86f      	bhi.n	8005a10 <HAL_TIM_ConfigClockSource+0x16c>
 8005930:	2b30      	cmp	r3, #48	@ 0x30
 8005932:	d064      	beq.n	80059fe <HAL_TIM_ConfigClockSource+0x15a>
 8005934:	2b30      	cmp	r3, #48	@ 0x30
 8005936:	d86b      	bhi.n	8005a10 <HAL_TIM_ConfigClockSource+0x16c>
 8005938:	2b20      	cmp	r3, #32
 800593a:	d060      	beq.n	80059fe <HAL_TIM_ConfigClockSource+0x15a>
 800593c:	2b20      	cmp	r3, #32
 800593e:	d867      	bhi.n	8005a10 <HAL_TIM_ConfigClockSource+0x16c>
 8005940:	2b00      	cmp	r3, #0
 8005942:	d05c      	beq.n	80059fe <HAL_TIM_ConfigClockSource+0x15a>
 8005944:	2b10      	cmp	r3, #16
 8005946:	d05a      	beq.n	80059fe <HAL_TIM_ConfigClockSource+0x15a>
 8005948:	e062      	b.n	8005a10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800595a:	f000 fb63 	bl	8006024 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800596c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68ba      	ldr	r2, [r7, #8]
 8005974:	609a      	str	r2, [r3, #8]
      break;
 8005976:	e04f      	b.n	8005a18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005988:	f000 fb4c 	bl	8006024 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	689a      	ldr	r2, [r3, #8]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800599a:	609a      	str	r2, [r3, #8]
      break;
 800599c:	e03c      	b.n	8005a18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059aa:	461a      	mov	r2, r3
 80059ac:	f000 fac0 	bl	8005f30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2150      	movs	r1, #80	@ 0x50
 80059b6:	4618      	mov	r0, r3
 80059b8:	f000 fb19 	bl	8005fee <TIM_ITRx_SetConfig>
      break;
 80059bc:	e02c      	b.n	8005a18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80059ca:	461a      	mov	r2, r3
 80059cc:	f000 fadf 	bl	8005f8e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2160      	movs	r1, #96	@ 0x60
 80059d6:	4618      	mov	r0, r3
 80059d8:	f000 fb09 	bl	8005fee <TIM_ITRx_SetConfig>
      break;
 80059dc:	e01c      	b.n	8005a18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ea:	461a      	mov	r2, r3
 80059ec:	f000 faa0 	bl	8005f30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2140      	movs	r1, #64	@ 0x40
 80059f6:	4618      	mov	r0, r3
 80059f8:	f000 faf9 	bl	8005fee <TIM_ITRx_SetConfig>
      break;
 80059fc:	e00c      	b.n	8005a18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4619      	mov	r1, r3
 8005a08:	4610      	mov	r0, r2
 8005a0a:	f000 faf0 	bl	8005fee <TIM_ITRx_SetConfig>
      break;
 8005a0e:	e003      	b.n	8005a18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	73fb      	strb	r3, [r7, #15]
      break;
 8005a14:	e000      	b.n	8005a18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3710      	adds	r7, #16
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a32:	b480      	push	{r7}
 8005a34:	b083      	sub	sp, #12
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a3a:	bf00      	nop
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a46:	b480      	push	{r7}
 8005a48:	b083      	sub	sp, #12
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a4e:	bf00      	nop
 8005a50:	370c      	adds	r7, #12
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b083      	sub	sp, #12
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a62:	bf00      	nop
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b083      	sub	sp, #12
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a76:	bf00      	nop
 8005a78:	370c      	adds	r7, #12
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
	...

08005a84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a43      	ldr	r2, [pc, #268]	@ (8005ba4 <TIM_Base_SetConfig+0x120>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d013      	beq.n	8005ac4 <TIM_Base_SetConfig+0x40>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aa2:	d00f      	beq.n	8005ac4 <TIM_Base_SetConfig+0x40>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a40      	ldr	r2, [pc, #256]	@ (8005ba8 <TIM_Base_SetConfig+0x124>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d00b      	beq.n	8005ac4 <TIM_Base_SetConfig+0x40>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a3f      	ldr	r2, [pc, #252]	@ (8005bac <TIM_Base_SetConfig+0x128>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d007      	beq.n	8005ac4 <TIM_Base_SetConfig+0x40>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a3e      	ldr	r2, [pc, #248]	@ (8005bb0 <TIM_Base_SetConfig+0x12c>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d003      	beq.n	8005ac4 <TIM_Base_SetConfig+0x40>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a3d      	ldr	r2, [pc, #244]	@ (8005bb4 <TIM_Base_SetConfig+0x130>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d108      	bne.n	8005ad6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a32      	ldr	r2, [pc, #200]	@ (8005ba4 <TIM_Base_SetConfig+0x120>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d02b      	beq.n	8005b36 <TIM_Base_SetConfig+0xb2>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ae4:	d027      	beq.n	8005b36 <TIM_Base_SetConfig+0xb2>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a2f      	ldr	r2, [pc, #188]	@ (8005ba8 <TIM_Base_SetConfig+0x124>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d023      	beq.n	8005b36 <TIM_Base_SetConfig+0xb2>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a2e      	ldr	r2, [pc, #184]	@ (8005bac <TIM_Base_SetConfig+0x128>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d01f      	beq.n	8005b36 <TIM_Base_SetConfig+0xb2>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a2d      	ldr	r2, [pc, #180]	@ (8005bb0 <TIM_Base_SetConfig+0x12c>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d01b      	beq.n	8005b36 <TIM_Base_SetConfig+0xb2>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a2c      	ldr	r2, [pc, #176]	@ (8005bb4 <TIM_Base_SetConfig+0x130>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d017      	beq.n	8005b36 <TIM_Base_SetConfig+0xb2>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a2b      	ldr	r2, [pc, #172]	@ (8005bb8 <TIM_Base_SetConfig+0x134>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d013      	beq.n	8005b36 <TIM_Base_SetConfig+0xb2>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a2a      	ldr	r2, [pc, #168]	@ (8005bbc <TIM_Base_SetConfig+0x138>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d00f      	beq.n	8005b36 <TIM_Base_SetConfig+0xb2>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a29      	ldr	r2, [pc, #164]	@ (8005bc0 <TIM_Base_SetConfig+0x13c>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d00b      	beq.n	8005b36 <TIM_Base_SetConfig+0xb2>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a28      	ldr	r2, [pc, #160]	@ (8005bc4 <TIM_Base_SetConfig+0x140>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d007      	beq.n	8005b36 <TIM_Base_SetConfig+0xb2>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a27      	ldr	r2, [pc, #156]	@ (8005bc8 <TIM_Base_SetConfig+0x144>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d003      	beq.n	8005b36 <TIM_Base_SetConfig+0xb2>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a26      	ldr	r2, [pc, #152]	@ (8005bcc <TIM_Base_SetConfig+0x148>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d108      	bne.n	8005b48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	689a      	ldr	r2, [r3, #8]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a0e      	ldr	r2, [pc, #56]	@ (8005ba4 <TIM_Base_SetConfig+0x120>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d003      	beq.n	8005b76 <TIM_Base_SetConfig+0xf2>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a10      	ldr	r2, [pc, #64]	@ (8005bb4 <TIM_Base_SetConfig+0x130>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d103      	bne.n	8005b7e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	691a      	ldr	r2, [r3, #16]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f043 0204 	orr.w	r2, r3, #4
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	601a      	str	r2, [r3, #0]
}
 8005b96:	bf00      	nop
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	40010000 	.word	0x40010000
 8005ba8:	40000400 	.word	0x40000400
 8005bac:	40000800 	.word	0x40000800
 8005bb0:	40000c00 	.word	0x40000c00
 8005bb4:	40010400 	.word	0x40010400
 8005bb8:	40014000 	.word	0x40014000
 8005bbc:	40014400 	.word	0x40014400
 8005bc0:	40014800 	.word	0x40014800
 8005bc4:	40001800 	.word	0x40001800
 8005bc8:	40001c00 	.word	0x40001c00
 8005bcc:	40002000 	.word	0x40002000

08005bd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a1b      	ldr	r3, [r3, #32]
 8005be4:	f023 0201 	bic.w	r2, r3, #1
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f023 0303 	bic.w	r3, r3, #3
 8005c06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f023 0302 	bic.w	r3, r3, #2
 8005c18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a20      	ldr	r2, [pc, #128]	@ (8005ca8 <TIM_OC1_SetConfig+0xd8>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d003      	beq.n	8005c34 <TIM_OC1_SetConfig+0x64>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a1f      	ldr	r2, [pc, #124]	@ (8005cac <TIM_OC1_SetConfig+0xdc>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d10c      	bne.n	8005c4e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f023 0308 	bic.w	r3, r3, #8
 8005c3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f023 0304 	bic.w	r3, r3, #4
 8005c4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a15      	ldr	r2, [pc, #84]	@ (8005ca8 <TIM_OC1_SetConfig+0xd8>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d003      	beq.n	8005c5e <TIM_OC1_SetConfig+0x8e>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a14      	ldr	r2, [pc, #80]	@ (8005cac <TIM_OC1_SetConfig+0xdc>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d111      	bne.n	8005c82 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	693a      	ldr	r2, [r7, #16]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	685a      	ldr	r2, [r3, #4]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	621a      	str	r2, [r3, #32]
}
 8005c9c:	bf00      	nop
 8005c9e:	371c      	adds	r7, #28
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr
 8005ca8:	40010000 	.word	0x40010000
 8005cac:	40010400 	.word	0x40010400

08005cb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b087      	sub	sp, #28
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a1b      	ldr	r3, [r3, #32]
 8005cc4:	f023 0210 	bic.w	r2, r3, #16
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	021b      	lsls	r3, r3, #8
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	f023 0320 	bic.w	r3, r3, #32
 8005cfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	011b      	lsls	r3, r3, #4
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a22      	ldr	r2, [pc, #136]	@ (8005d94 <TIM_OC2_SetConfig+0xe4>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d003      	beq.n	8005d18 <TIM_OC2_SetConfig+0x68>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a21      	ldr	r2, [pc, #132]	@ (8005d98 <TIM_OC2_SetConfig+0xe8>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d10d      	bne.n	8005d34 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	011b      	lsls	r3, r3, #4
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d32:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a17      	ldr	r2, [pc, #92]	@ (8005d94 <TIM_OC2_SetConfig+0xe4>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d003      	beq.n	8005d44 <TIM_OC2_SetConfig+0x94>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a16      	ldr	r2, [pc, #88]	@ (8005d98 <TIM_OC2_SetConfig+0xe8>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d113      	bne.n	8005d6c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	695b      	ldr	r3, [r3, #20]
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	699b      	ldr	r3, [r3, #24]
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	685a      	ldr	r2, [r3, #4]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	621a      	str	r2, [r3, #32]
}
 8005d86:	bf00      	nop
 8005d88:	371c      	adds	r7, #28
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	40010000 	.word	0x40010000
 8005d98:	40010400 	.word	0x40010400

08005d9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b087      	sub	sp, #28
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a1b      	ldr	r3, [r3, #32]
 8005db0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	69db      	ldr	r3, [r3, #28]
 8005dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f023 0303 	bic.w	r3, r3, #3
 8005dd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005de4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	021b      	lsls	r3, r3, #8
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a21      	ldr	r2, [pc, #132]	@ (8005e7c <TIM_OC3_SetConfig+0xe0>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d003      	beq.n	8005e02 <TIM_OC3_SetConfig+0x66>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a20      	ldr	r2, [pc, #128]	@ (8005e80 <TIM_OC3_SetConfig+0xe4>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d10d      	bne.n	8005e1e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	021b      	lsls	r3, r3, #8
 8005e10:	697a      	ldr	r2, [r7, #20]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a16      	ldr	r2, [pc, #88]	@ (8005e7c <TIM_OC3_SetConfig+0xe0>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d003      	beq.n	8005e2e <TIM_OC3_SetConfig+0x92>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a15      	ldr	r2, [pc, #84]	@ (8005e80 <TIM_OC3_SetConfig+0xe4>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d113      	bne.n	8005e56 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	011b      	lsls	r3, r3, #4
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	011b      	lsls	r3, r3, #4
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	621a      	str	r2, [r3, #32]
}
 8005e70:	bf00      	nop
 8005e72:	371c      	adds	r7, #28
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr
 8005e7c:	40010000 	.word	0x40010000
 8005e80:	40010400 	.word	0x40010400

08005e84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b087      	sub	sp, #28
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a1b      	ldr	r3, [r3, #32]
 8005e98:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	69db      	ldr	r3, [r3, #28]
 8005eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	021b      	lsls	r3, r3, #8
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ece:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	031b      	lsls	r3, r3, #12
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a12      	ldr	r2, [pc, #72]	@ (8005f28 <TIM_OC4_SetConfig+0xa4>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d003      	beq.n	8005eec <TIM_OC4_SetConfig+0x68>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a11      	ldr	r2, [pc, #68]	@ (8005f2c <TIM_OC4_SetConfig+0xa8>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d109      	bne.n	8005f00 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ef2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	019b      	lsls	r3, r3, #6
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	693a      	ldr	r2, [r7, #16]
 8005f18:	621a      	str	r2, [r3, #32]
}
 8005f1a:	bf00      	nop
 8005f1c:	371c      	adds	r7, #28
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	40010000 	.word	0x40010000
 8005f2c:	40010400 	.word	0x40010400

08005f30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b087      	sub	sp, #28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6a1b      	ldr	r3, [r3, #32]
 8005f40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6a1b      	ldr	r3, [r3, #32]
 8005f46:	f023 0201 	bic.w	r2, r3, #1
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	011b      	lsls	r3, r3, #4
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	f023 030a 	bic.w	r3, r3, #10
 8005f6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	621a      	str	r2, [r3, #32]
}
 8005f82:	bf00      	nop
 8005f84:	371c      	adds	r7, #28
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b087      	sub	sp, #28
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	60f8      	str	r0, [r7, #12]
 8005f96:	60b9      	str	r1, [r7, #8]
 8005f98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6a1b      	ldr	r3, [r3, #32]
 8005fa4:	f023 0210 	bic.w	r2, r3, #16
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005fb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	031b      	lsls	r3, r3, #12
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005fca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	011b      	lsls	r3, r3, #4
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	621a      	str	r2, [r3, #32]
}
 8005fe2:	bf00      	nop
 8005fe4:	371c      	adds	r7, #28
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr

08005fee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fee:	b480      	push	{r7}
 8005ff0:	b085      	sub	sp, #20
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
 8005ff6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006004:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006006:	683a      	ldr	r2, [r7, #0]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	4313      	orrs	r3, r2
 800600c:	f043 0307 	orr.w	r3, r3, #7
 8006010:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	609a      	str	r2, [r3, #8]
}
 8006018:	bf00      	nop
 800601a:	3714      	adds	r7, #20
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006024:	b480      	push	{r7}
 8006026:	b087      	sub	sp, #28
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	607a      	str	r2, [r7, #4]
 8006030:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800603e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	021a      	lsls	r2, r3, #8
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	431a      	orrs	r2, r3
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	4313      	orrs	r3, r2
 800604c:	697a      	ldr	r2, [r7, #20]
 800604e:	4313      	orrs	r3, r2
 8006050:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	609a      	str	r2, [r3, #8]
}
 8006058:	bf00      	nop
 800605a:	371c      	adds	r7, #28
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006064:	b480      	push	{r7}
 8006066:	b087      	sub	sp, #28
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	f003 031f 	and.w	r3, r3, #31
 8006076:	2201      	movs	r2, #1
 8006078:	fa02 f303 	lsl.w	r3, r2, r3
 800607c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6a1a      	ldr	r2, [r3, #32]
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	43db      	mvns	r3, r3
 8006086:	401a      	ands	r2, r3
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6a1a      	ldr	r2, [r3, #32]
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	f003 031f 	and.w	r3, r3, #31
 8006096:	6879      	ldr	r1, [r7, #4]
 8006098:	fa01 f303 	lsl.w	r3, r1, r3
 800609c:	431a      	orrs	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	621a      	str	r2, [r3, #32]
}
 80060a2:	bf00      	nop
 80060a4:	371c      	adds	r7, #28
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
	...

080060b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d101      	bne.n	80060c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060c4:	2302      	movs	r3, #2
 80060c6:	e05a      	b.n	800617e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2202      	movs	r2, #2
 80060d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a21      	ldr	r2, [pc, #132]	@ (800618c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d022      	beq.n	8006152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006114:	d01d      	beq.n	8006152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a1d      	ldr	r2, [pc, #116]	@ (8006190 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d018      	beq.n	8006152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a1b      	ldr	r2, [pc, #108]	@ (8006194 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d013      	beq.n	8006152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a1a      	ldr	r2, [pc, #104]	@ (8006198 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d00e      	beq.n	8006152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a18      	ldr	r2, [pc, #96]	@ (800619c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d009      	beq.n	8006152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a17      	ldr	r2, [pc, #92]	@ (80061a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d004      	beq.n	8006152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a15      	ldr	r2, [pc, #84]	@ (80061a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d10c      	bne.n	800616c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006158:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	4313      	orrs	r3, r2
 8006162:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68ba      	ldr	r2, [r7, #8]
 800616a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3714      	adds	r7, #20
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	40010000 	.word	0x40010000
 8006190:	40000400 	.word	0x40000400
 8006194:	40000800 	.word	0x40000800
 8006198:	40000c00 	.word	0x40000c00
 800619c:	40010400 	.word	0x40010400
 80061a0:	40014000 	.word	0x40014000
 80061a4:	40001800 	.word	0x40001800

080061a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e042      	b.n	8006268 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d106      	bne.n	80061fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f7fc fdd8 	bl	8002dac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2224      	movs	r2, #36	@ 0x24
 8006200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68da      	ldr	r2, [r3, #12]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006212:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f001 f8d9 	bl	80073cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	691a      	ldr	r2, [r3, #16]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006228:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	695a      	ldr	r2, [r3, #20]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006238:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68da      	ldr	r2, [r3, #12]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006248:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2220      	movs	r2, #32
 8006254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2220      	movs	r2, #32
 800625c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3708      	adds	r7, #8
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b08a      	sub	sp, #40	@ 0x28
 8006274:	af02      	add	r7, sp, #8
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	603b      	str	r3, [r7, #0]
 800627c:	4613      	mov	r3, r2
 800627e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006280:	2300      	movs	r3, #0
 8006282:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800628a:	b2db      	uxtb	r3, r3
 800628c:	2b20      	cmp	r3, #32
 800628e:	d175      	bne.n	800637c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d002      	beq.n	800629c <HAL_UART_Transmit+0x2c>
 8006296:	88fb      	ldrh	r3, [r7, #6]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d101      	bne.n	80062a0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	e06e      	b.n	800637e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2221      	movs	r2, #33	@ 0x21
 80062aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062ae:	f7fd f8c5 	bl	800343c <HAL_GetTick>
 80062b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	88fa      	ldrh	r2, [r7, #6]
 80062b8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	88fa      	ldrh	r2, [r7, #6]
 80062be:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062c8:	d108      	bne.n	80062dc <HAL_UART_Transmit+0x6c>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d104      	bne.n	80062dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80062d2:	2300      	movs	r3, #0
 80062d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	61bb      	str	r3, [r7, #24]
 80062da:	e003      	b.n	80062e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062e0:	2300      	movs	r3, #0
 80062e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80062e4:	e02e      	b.n	8006344 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	9300      	str	r3, [sp, #0]
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	2200      	movs	r2, #0
 80062ee:	2180      	movs	r1, #128	@ 0x80
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f000 fdaa 	bl	8006e4a <UART_WaitOnFlagUntilTimeout>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d005      	beq.n	8006308 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2220      	movs	r2, #32
 8006300:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e03a      	b.n	800637e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10b      	bne.n	8006326 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	881b      	ldrh	r3, [r3, #0]
 8006312:	461a      	mov	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800631c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	3302      	adds	r3, #2
 8006322:	61bb      	str	r3, [r7, #24]
 8006324:	e007      	b.n	8006336 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	781a      	ldrb	r2, [r3, #0]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	3301      	adds	r3, #1
 8006334:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800633a:	b29b      	uxth	r3, r3
 800633c:	3b01      	subs	r3, #1
 800633e:	b29a      	uxth	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006348:	b29b      	uxth	r3, r3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1cb      	bne.n	80062e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	9300      	str	r3, [sp, #0]
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	2200      	movs	r2, #0
 8006356:	2140      	movs	r1, #64	@ 0x40
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f000 fd76 	bl	8006e4a <UART_WaitOnFlagUntilTimeout>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d005      	beq.n	8006370 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2220      	movs	r2, #32
 8006368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800636c:	2303      	movs	r3, #3
 800636e:	e006      	b.n	800637e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2220      	movs	r2, #32
 8006374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006378:	2300      	movs	r3, #0
 800637a:	e000      	b.n	800637e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800637c:	2302      	movs	r3, #2
  }
}
 800637e:	4618      	mov	r0, r3
 8006380:	3720      	adds	r7, #32
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
	...

08006388 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b08c      	sub	sp, #48	@ 0x30
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	4613      	mov	r3, r2
 8006394:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b20      	cmp	r3, #32
 80063a0:	d162      	bne.n	8006468 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d002      	beq.n	80063ae <HAL_UART_Transmit_DMA+0x26>
 80063a8:	88fb      	ldrh	r3, [r7, #6]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e05b      	b.n	800646a <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 80063b2:	68ba      	ldr	r2, [r7, #8]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	88fa      	ldrh	r2, [r7, #6]
 80063bc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	88fa      	ldrh	r2, [r7, #6]
 80063c2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2221      	movs	r2, #33	@ 0x21
 80063ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063d6:	4a27      	ldr	r2, [pc, #156]	@ (8006474 <HAL_UART_Transmit_DMA+0xec>)
 80063d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063de:	4a26      	ldr	r2, [pc, #152]	@ (8006478 <HAL_UART_Transmit_DMA+0xf0>)
 80063e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063e6:	4a25      	ldr	r2, [pc, #148]	@ (800647c <HAL_UART_Transmit_DMA+0xf4>)
 80063e8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ee:	2200      	movs	r2, #0
 80063f0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80063f2:	f107 0308 	add.w	r3, r7, #8
 80063f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80063fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063fe:	6819      	ldr	r1, [r3, #0]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	3304      	adds	r3, #4
 8006406:	461a      	mov	r2, r3
 8006408:	88fb      	ldrh	r3, [r7, #6]
 800640a:	f7fd f9b3 	bl	8003774 <HAL_DMA_Start_IT>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d008      	beq.n	8006426 <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2210      	movs	r2, #16
 8006418:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2220      	movs	r2, #32
 800641e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e021      	b.n	800646a <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800642e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	3314      	adds	r3, #20
 8006436:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	e853 3f00 	ldrex	r3, [r3]
 800643e:	617b      	str	r3, [r7, #20]
   return(result);
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006446:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	3314      	adds	r3, #20
 800644e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006450:	627a      	str	r2, [r7, #36]	@ 0x24
 8006452:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006454:	6a39      	ldr	r1, [r7, #32]
 8006456:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006458:	e841 2300 	strex	r3, r2, [r1]
 800645c:	61fb      	str	r3, [r7, #28]
   return(result);
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1e5      	bne.n	8006430 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 8006464:	2300      	movs	r3, #0
 8006466:	e000      	b.n	800646a <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8006468:	2302      	movs	r3, #2
  }
}
 800646a:	4618      	mov	r0, r3
 800646c:	3730      	adds	r7, #48	@ 0x30
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	08006b99 	.word	0x08006b99
 8006478:	08006c33 	.word	0x08006c33
 800647c:	08006db7 	.word	0x08006db7

08006480 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	4613      	mov	r3, r2
 800648c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006494:	b2db      	uxtb	r3, r3
 8006496:	2b20      	cmp	r3, #32
 8006498:	d112      	bne.n	80064c0 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d002      	beq.n	80064a6 <HAL_UART_Receive_DMA+0x26>
 80064a0:	88fb      	ldrh	r3, [r7, #6]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d101      	bne.n	80064aa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e00b      	b.n	80064c2 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80064b0:	88fb      	ldrh	r3, [r7, #6]
 80064b2:	461a      	mov	r2, r3
 80064b4:	68b9      	ldr	r1, [r7, #8]
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	f000 fd20 	bl	8006efc <UART_Start_Receive_DMA>
 80064bc:	4603      	mov	r3, r0
 80064be:	e000      	b.n	80064c2 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80064c0:	2302      	movs	r3, #2
  }
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3710      	adds	r7, #16
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b090      	sub	sp, #64	@ 0x40
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80064d2:	2300      	movs	r3, #0
 80064d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	695b      	ldr	r3, [r3, #20]
 80064dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064e0:	2b80      	cmp	r3, #128	@ 0x80
 80064e2:	bf0c      	ite	eq
 80064e4:	2301      	moveq	r3, #1
 80064e6:	2300      	movne	r3, #0
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	2b21      	cmp	r3, #33	@ 0x21
 80064f6:	d128      	bne.n	800654a <HAL_UART_DMAStop+0x80>
 80064f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d025      	beq.n	800654a <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	3314      	adds	r3, #20
 8006504:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006508:	e853 3f00 	ldrex	r3, [r3]
 800650c:	623b      	str	r3, [r7, #32]
   return(result);
 800650e:	6a3b      	ldr	r3, [r7, #32]
 8006510:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006514:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	3314      	adds	r3, #20
 800651c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800651e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006520:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006522:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006524:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006526:	e841 2300 	strex	r3, r2, [r1]
 800652a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800652c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1e5      	bne.n	80064fe <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006536:	2b00      	cmp	r3, #0
 8006538:	d004      	beq.n	8006544 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800653e:	4618      	mov	r0, r3
 8006540:	f7fd f970 	bl	8003824 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 fd7f 	bl	8007048 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	695b      	ldr	r3, [r3, #20]
 8006550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006554:	2b40      	cmp	r3, #64	@ 0x40
 8006556:	bf0c      	ite	eq
 8006558:	2301      	moveq	r3, #1
 800655a:	2300      	movne	r3, #0
 800655c:	b2db      	uxtb	r3, r3
 800655e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006566:	b2db      	uxtb	r3, r3
 8006568:	2b22      	cmp	r3, #34	@ 0x22
 800656a:	d128      	bne.n	80065be <HAL_UART_DMAStop+0xf4>
 800656c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800656e:	2b00      	cmp	r3, #0
 8006570:	d025      	beq.n	80065be <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	3314      	adds	r3, #20
 8006578:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	e853 3f00 	ldrex	r3, [r3]
 8006580:	60fb      	str	r3, [r7, #12]
   return(result);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006588:	637b      	str	r3, [r7, #52]	@ 0x34
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	3314      	adds	r3, #20
 8006590:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006592:	61fa      	str	r2, [r7, #28]
 8006594:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006596:	69b9      	ldr	r1, [r7, #24]
 8006598:	69fa      	ldr	r2, [r7, #28]
 800659a:	e841 2300 	strex	r3, r2, [r1]
 800659e:	617b      	str	r3, [r7, #20]
   return(result);
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1e5      	bne.n	8006572 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d004      	beq.n	80065b8 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065b2:	4618      	mov	r0, r3
 80065b4:	f7fd f936 	bl	8003824 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 fd6d 	bl	8007098 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80065be:	2300      	movs	r3, #0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3740      	adds	r7, #64	@ 0x40
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b0ba      	sub	sp, #232	@ 0xe8
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80065ee:	2300      	movs	r3, #0
 80065f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80065f4:	2300      	movs	r3, #0
 80065f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80065fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065fe:	f003 030f 	and.w	r3, r3, #15
 8006602:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006606:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800660a:	2b00      	cmp	r3, #0
 800660c:	d10f      	bne.n	800662e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800660e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006612:	f003 0320 	and.w	r3, r3, #32
 8006616:	2b00      	cmp	r3, #0
 8006618:	d009      	beq.n	800662e <HAL_UART_IRQHandler+0x66>
 800661a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800661e:	f003 0320 	and.w	r3, r3, #32
 8006622:	2b00      	cmp	r3, #0
 8006624:	d003      	beq.n	800662e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 fe12 	bl	8007250 <UART_Receive_IT>
      return;
 800662c:	e273      	b.n	8006b16 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800662e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006632:	2b00      	cmp	r3, #0
 8006634:	f000 80de 	beq.w	80067f4 <HAL_UART_IRQHandler+0x22c>
 8006638:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800663c:	f003 0301 	and.w	r3, r3, #1
 8006640:	2b00      	cmp	r3, #0
 8006642:	d106      	bne.n	8006652 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006648:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800664c:	2b00      	cmp	r3, #0
 800664e:	f000 80d1 	beq.w	80067f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00b      	beq.n	8006676 <HAL_UART_IRQHandler+0xae>
 800665e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006666:	2b00      	cmp	r3, #0
 8006668:	d005      	beq.n	8006676 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800666e:	f043 0201 	orr.w	r2, r3, #1
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800667a:	f003 0304 	and.w	r3, r3, #4
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00b      	beq.n	800669a <HAL_UART_IRQHandler+0xd2>
 8006682:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006686:	f003 0301 	and.w	r3, r3, #1
 800668a:	2b00      	cmp	r3, #0
 800668c:	d005      	beq.n	800669a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006692:	f043 0202 	orr.w	r2, r3, #2
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800669a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800669e:	f003 0302 	and.w	r3, r3, #2
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00b      	beq.n	80066be <HAL_UART_IRQHandler+0xf6>
 80066a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d005      	beq.n	80066be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066b6:	f043 0204 	orr.w	r2, r3, #4
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80066be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066c2:	f003 0308 	and.w	r3, r3, #8
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d011      	beq.n	80066ee <HAL_UART_IRQHandler+0x126>
 80066ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066ce:	f003 0320 	and.w	r3, r3, #32
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d105      	bne.n	80066e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80066d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d005      	beq.n	80066ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066e6:	f043 0208 	orr.w	r2, r3, #8
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f000 820a 	beq.w	8006b0c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80066f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066fc:	f003 0320 	and.w	r3, r3, #32
 8006700:	2b00      	cmp	r3, #0
 8006702:	d008      	beq.n	8006716 <HAL_UART_IRQHandler+0x14e>
 8006704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006708:	f003 0320 	and.w	r3, r3, #32
 800670c:	2b00      	cmp	r3, #0
 800670e:	d002      	beq.n	8006716 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 fd9d 	bl	8007250 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	695b      	ldr	r3, [r3, #20]
 800671c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006720:	2b40      	cmp	r3, #64	@ 0x40
 8006722:	bf0c      	ite	eq
 8006724:	2301      	moveq	r3, #1
 8006726:	2300      	movne	r3, #0
 8006728:	b2db      	uxtb	r3, r3
 800672a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006732:	f003 0308 	and.w	r3, r3, #8
 8006736:	2b00      	cmp	r3, #0
 8006738:	d103      	bne.n	8006742 <HAL_UART_IRQHandler+0x17a>
 800673a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800673e:	2b00      	cmp	r3, #0
 8006740:	d04f      	beq.n	80067e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 fca8 	bl	8007098 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006752:	2b40      	cmp	r3, #64	@ 0x40
 8006754:	d141      	bne.n	80067da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	3314      	adds	r3, #20
 800675c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006760:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006764:	e853 3f00 	ldrex	r3, [r3]
 8006768:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800676c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006770:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006774:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	3314      	adds	r3, #20
 800677e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006782:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006786:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800678e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006792:	e841 2300 	strex	r3, r2, [r1]
 8006796:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800679a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d1d9      	bne.n	8006756 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d013      	beq.n	80067d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067ae:	4a8a      	ldr	r2, [pc, #552]	@ (80069d8 <HAL_UART_IRQHandler+0x410>)
 80067b0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7fd f8a4 	bl	8003904 <HAL_DMA_Abort_IT>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d016      	beq.n	80067f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80067cc:	4610      	mov	r0, r2
 80067ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067d0:	e00e      	b.n	80067f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 f9ca 	bl	8006b6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067d8:	e00a      	b.n	80067f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f9c6 	bl	8006b6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067e0:	e006      	b.n	80067f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 f9c2 	bl	8006b6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80067ee:	e18d      	b.n	8006b0c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067f0:	bf00      	nop
    return;
 80067f2:	e18b      	b.n	8006b0c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	f040 8167 	bne.w	8006acc <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80067fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006802:	f003 0310 	and.w	r3, r3, #16
 8006806:	2b00      	cmp	r3, #0
 8006808:	f000 8160 	beq.w	8006acc <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800680c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006810:	f003 0310 	and.w	r3, r3, #16
 8006814:	2b00      	cmp	r3, #0
 8006816:	f000 8159 	beq.w	8006acc <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800681a:	2300      	movs	r3, #0
 800681c:	60bb      	str	r3, [r7, #8]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	60bb      	str	r3, [r7, #8]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	60bb      	str	r3, [r7, #8]
 800682e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	695b      	ldr	r3, [r3, #20]
 8006836:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800683a:	2b40      	cmp	r3, #64	@ 0x40
 800683c:	f040 80ce 	bne.w	80069dc <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800684c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006850:	2b00      	cmp	r3, #0
 8006852:	f000 80a9 	beq.w	80069a8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800685a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800685e:	429a      	cmp	r2, r3
 8006860:	f080 80a2 	bcs.w	80069a8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800686a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006876:	f000 8088 	beq.w	800698a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	330c      	adds	r3, #12
 8006880:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006884:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006888:	e853 3f00 	ldrex	r3, [r3]
 800688c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006890:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006894:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006898:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	330c      	adds	r3, #12
 80068a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80068a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80068aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80068b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80068b6:	e841 2300 	strex	r3, r2, [r1]
 80068ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80068be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1d9      	bne.n	800687a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	3314      	adds	r3, #20
 80068cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80068d0:	e853 3f00 	ldrex	r3, [r3]
 80068d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80068d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80068d8:	f023 0301 	bic.w	r3, r3, #1
 80068dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	3314      	adds	r3, #20
 80068e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80068ea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80068ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80068f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80068f6:	e841 2300 	strex	r3, r2, [r1]
 80068fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80068fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d1e1      	bne.n	80068c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	3314      	adds	r3, #20
 8006908:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800690c:	e853 3f00 	ldrex	r3, [r3]
 8006910:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006912:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006914:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006918:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	3314      	adds	r3, #20
 8006922:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006926:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006928:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800692c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800692e:	e841 2300 	strex	r3, r2, [r1]
 8006932:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006934:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1e3      	bne.n	8006902 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2220      	movs	r2, #32
 800693e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	330c      	adds	r3, #12
 800694e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006950:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006952:	e853 3f00 	ldrex	r3, [r3]
 8006956:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006958:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800695a:	f023 0310 	bic.w	r3, r3, #16
 800695e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	330c      	adds	r3, #12
 8006968:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800696c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800696e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006970:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006972:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006974:	e841 2300 	strex	r3, r2, [r1]
 8006978:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800697a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1e3      	bne.n	8006948 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006984:	4618      	mov	r0, r3
 8006986:	f7fc ff4d 	bl	8003824 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2202      	movs	r2, #2
 800698e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006998:	b29b      	uxth	r3, r3
 800699a:	1ad3      	subs	r3, r2, r3
 800699c:	b29b      	uxth	r3, r3
 800699e:	4619      	mov	r1, r3
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 f8ed 	bl	8006b80 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80069a6:	e0b3      	b.n	8006b10 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80069ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80069b0:	429a      	cmp	r2, r3
 80069b2:	f040 80ad 	bne.w	8006b10 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069ba:	69db      	ldr	r3, [r3, #28]
 80069bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069c0:	f040 80a6 	bne.w	8006b10 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2202      	movs	r2, #2
 80069c8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80069ce:	4619      	mov	r1, r3
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 f8d5 	bl	8006b80 <HAL_UARTEx_RxEventCallback>
      return;
 80069d6:	e09b      	b.n	8006b10 <HAL_UART_IRQHandler+0x548>
 80069d8:	0800715f 	.word	0x0800715f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	1ad3      	subs	r3, r2, r3
 80069e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	f000 808e 	beq.w	8006b14 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80069f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f000 8089 	beq.w	8006b14 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	330c      	adds	r3, #12
 8006a08:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a0c:	e853 3f00 	ldrex	r3, [r3]
 8006a10:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	330c      	adds	r3, #12
 8006a22:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006a26:	647a      	str	r2, [r7, #68]	@ 0x44
 8006a28:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a2e:	e841 2300 	strex	r3, r2, [r1]
 8006a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1e3      	bne.n	8006a02 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	3314      	adds	r3, #20
 8006a40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a44:	e853 3f00 	ldrex	r3, [r3]
 8006a48:	623b      	str	r3, [r7, #32]
   return(result);
 8006a4a:	6a3b      	ldr	r3, [r7, #32]
 8006a4c:	f023 0301 	bic.w	r3, r3, #1
 8006a50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	3314      	adds	r3, #20
 8006a5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006a5e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a66:	e841 2300 	strex	r3, r2, [r1]
 8006a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1e3      	bne.n	8006a3a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2220      	movs	r2, #32
 8006a76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	330c      	adds	r3, #12
 8006a86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	e853 3f00 	ldrex	r3, [r3]
 8006a8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f023 0310 	bic.w	r3, r3, #16
 8006a96:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	330c      	adds	r3, #12
 8006aa0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006aa4:	61fa      	str	r2, [r7, #28]
 8006aa6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa8:	69b9      	ldr	r1, [r7, #24]
 8006aaa:	69fa      	ldr	r2, [r7, #28]
 8006aac:	e841 2300 	strex	r3, r2, [r1]
 8006ab0:	617b      	str	r3, [r7, #20]
   return(result);
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d1e3      	bne.n	8006a80 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2202      	movs	r2, #2
 8006abc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006abe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 f85b 	bl	8006b80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006aca:	e023      	b.n	8006b14 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ad0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d009      	beq.n	8006aec <HAL_UART_IRQHandler+0x524>
 8006ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006adc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d003      	beq.n	8006aec <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 fb4b 	bl	8007180 <UART_Transmit_IT>
    return;
 8006aea:	e014      	b.n	8006b16 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d00e      	beq.n	8006b16 <HAL_UART_IRQHandler+0x54e>
 8006af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d008      	beq.n	8006b16 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 fb8b 	bl	8007220 <UART_EndTransmit_IT>
    return;
 8006b0a:	e004      	b.n	8006b16 <HAL_UART_IRQHandler+0x54e>
    return;
 8006b0c:	bf00      	nop
 8006b0e:	e002      	b.n	8006b16 <HAL_UART_IRQHandler+0x54e>
      return;
 8006b10:	bf00      	nop
 8006b12:	e000      	b.n	8006b16 <HAL_UART_IRQHandler+0x54e>
      return;
 8006b14:	bf00      	nop
  }
}
 8006b16:	37e8      	adds	r7, #232	@ 0xe8
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	460b      	mov	r3, r1
 8006b8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b8c:	bf00      	nop
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b090      	sub	sp, #64	@ 0x40
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d137      	bne.n	8006c24 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006bb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006bba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	3314      	adds	r3, #20
 8006bc0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc4:	e853 3f00 	ldrex	r3, [r3]
 8006bc8:	623b      	str	r3, [r7, #32]
   return(result);
 8006bca:	6a3b      	ldr	r3, [r7, #32]
 8006bcc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bd0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006bd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	3314      	adds	r3, #20
 8006bd8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006bda:	633a      	str	r2, [r7, #48]	@ 0x30
 8006bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006be0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006be2:	e841 2300 	strex	r3, r2, [r1]
 8006be6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1e5      	bne.n	8006bba <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006bee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	330c      	adds	r3, #12
 8006bf4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	e853 3f00 	ldrex	r3, [r3]
 8006bfc:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c04:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	330c      	adds	r3, #12
 8006c0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006c0e:	61fa      	str	r2, [r7, #28]
 8006c10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c12:	69b9      	ldr	r1, [r7, #24]
 8006c14:	69fa      	ldr	r2, [r7, #28]
 8006c16:	e841 2300 	strex	r3, r2, [r1]
 8006c1a:	617b      	str	r3, [r7, #20]
   return(result);
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1e5      	bne.n	8006bee <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c22:	e002      	b.n	8006c2a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006c24:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006c26:	f7ff ff79 	bl	8006b1c <HAL_UART_TxCpltCallback>
}
 8006c2a:	bf00      	nop
 8006c2c:	3740      	adds	r7, #64	@ 0x40
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b084      	sub	sp, #16
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c3e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f7ff ff75 	bl	8006b30 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c46:	bf00      	nop
 8006c48:	3710      	adds	r7, #16
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b09c      	sub	sp, #112	@ 0x70
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c5a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d172      	bne.n	8006d50 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006c6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	330c      	adds	r3, #12
 8006c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c7a:	e853 3f00 	ldrex	r3, [r3]
 8006c7e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006c80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c82:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c86:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	330c      	adds	r3, #12
 8006c8e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006c90:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006c92:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c94:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006c96:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006c98:	e841 2300 	strex	r3, r2, [r1]
 8006c9c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006c9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d1e5      	bne.n	8006c70 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ca4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	3314      	adds	r3, #20
 8006caa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cae:	e853 3f00 	ldrex	r3, [r3]
 8006cb2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cb6:	f023 0301 	bic.w	r3, r3, #1
 8006cba:	667b      	str	r3, [r7, #100]	@ 0x64
 8006cbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	3314      	adds	r3, #20
 8006cc2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006cc4:	647a      	str	r2, [r7, #68]	@ 0x44
 8006cc6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006cca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ccc:	e841 2300 	strex	r3, r2, [r1]
 8006cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006cd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1e5      	bne.n	8006ca4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	3314      	adds	r3, #20
 8006cde:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce2:	e853 3f00 	ldrex	r3, [r3]
 8006ce6:	623b      	str	r3, [r7, #32]
   return(result);
 8006ce8:	6a3b      	ldr	r3, [r7, #32]
 8006cea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cee:	663b      	str	r3, [r7, #96]	@ 0x60
 8006cf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	3314      	adds	r3, #20
 8006cf6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006cf8:	633a      	str	r2, [r7, #48]	@ 0x30
 8006cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006cfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d00:	e841 2300 	strex	r3, r2, [r1]
 8006d04:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d1e5      	bne.n	8006cd8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006d0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d0e:	2220      	movs	r2, #32
 8006d10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d119      	bne.n	8006d50 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	330c      	adds	r3, #12
 8006d22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	e853 3f00 	ldrex	r3, [r3]
 8006d2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f023 0310 	bic.w	r3, r3, #16
 8006d32:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	330c      	adds	r3, #12
 8006d3a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006d3c:	61fa      	str	r2, [r7, #28]
 8006d3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d40:	69b9      	ldr	r1, [r7, #24]
 8006d42:	69fa      	ldr	r2, [r7, #28]
 8006d44:	e841 2300 	strex	r3, r2, [r1]
 8006d48:	617b      	str	r3, [r7, #20]
   return(result);
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1e5      	bne.n	8006d1c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d52:	2200      	movs	r2, #0
 8006d54:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d106      	bne.n	8006d6c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d60:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006d62:	4619      	mov	r1, r3
 8006d64:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006d66:	f7ff ff0b 	bl	8006b80 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d6a:	e002      	b.n	8006d72 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006d6c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006d6e:	f7ff fee9 	bl	8006b44 <HAL_UART_RxCpltCallback>
}
 8006d72:	bf00      	nop
 8006d74:	3770      	adds	r7, #112	@ 0x70
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b084      	sub	sp, #16
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d86:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d108      	bne.n	8006da8 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006d9a:	085b      	lsrs	r3, r3, #1
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	4619      	mov	r1, r3
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f7ff feed 	bl	8006b80 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006da6:	e002      	b.n	8006dae <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006da8:	68f8      	ldr	r0, [r7, #12]
 8006daa:	f7ff fed5 	bl	8006b58 <HAL_UART_RxHalfCpltCallback>
}
 8006dae:	bf00      	nop
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b084      	sub	sp, #16
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dc6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	695b      	ldr	r3, [r3, #20]
 8006dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dd2:	2b80      	cmp	r3, #128	@ 0x80
 8006dd4:	bf0c      	ite	eq
 8006dd6:	2301      	moveq	r3, #1
 8006dd8:	2300      	movne	r3, #0
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	2b21      	cmp	r3, #33	@ 0x21
 8006de8:	d108      	bne.n	8006dfc <UART_DMAError+0x46>
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d005      	beq.n	8006dfc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	2200      	movs	r2, #0
 8006df4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006df6:	68b8      	ldr	r0, [r7, #8]
 8006df8:	f000 f926 	bl	8007048 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	695b      	ldr	r3, [r3, #20]
 8006e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e06:	2b40      	cmp	r3, #64	@ 0x40
 8006e08:	bf0c      	ite	eq
 8006e0a:	2301      	moveq	r3, #1
 8006e0c:	2300      	movne	r3, #0
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	2b22      	cmp	r3, #34	@ 0x22
 8006e1c:	d108      	bne.n	8006e30 <UART_DMAError+0x7a>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d005      	beq.n	8006e30 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	2200      	movs	r2, #0
 8006e28:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006e2a:	68b8      	ldr	r0, [r7, #8]
 8006e2c:	f000 f934 	bl	8007098 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e34:	f043 0210 	orr.w	r2, r3, #16
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e3c:	68b8      	ldr	r0, [r7, #8]
 8006e3e:	f7ff fe95 	bl	8006b6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e42:	bf00      	nop
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b086      	sub	sp, #24
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	60f8      	str	r0, [r7, #12]
 8006e52:	60b9      	str	r1, [r7, #8]
 8006e54:	603b      	str	r3, [r7, #0]
 8006e56:	4613      	mov	r3, r2
 8006e58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e5a:	e03b      	b.n	8006ed4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e5c:	6a3b      	ldr	r3, [r7, #32]
 8006e5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e62:	d037      	beq.n	8006ed4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e64:	f7fc faea 	bl	800343c <HAL_GetTick>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	6a3a      	ldr	r2, [r7, #32]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d302      	bcc.n	8006e7a <UART_WaitOnFlagUntilTimeout+0x30>
 8006e74:	6a3b      	ldr	r3, [r7, #32]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d101      	bne.n	8006e7e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e03a      	b.n	8006ef4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	f003 0304 	and.w	r3, r3, #4
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d023      	beq.n	8006ed4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	2b80      	cmp	r3, #128	@ 0x80
 8006e90:	d020      	beq.n	8006ed4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	2b40      	cmp	r3, #64	@ 0x40
 8006e96:	d01d      	beq.n	8006ed4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0308 	and.w	r3, r3, #8
 8006ea2:	2b08      	cmp	r3, #8
 8006ea4:	d116      	bne.n	8006ed4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	617b      	str	r3, [r7, #20]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	617b      	str	r3, [r7, #20]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	617b      	str	r3, [r7, #20]
 8006eba:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f000 f8eb 	bl	8007098 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2208      	movs	r2, #8
 8006ec6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e00f      	b.n	8006ef4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	4013      	ands	r3, r2
 8006ede:	68ba      	ldr	r2, [r7, #8]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	bf0c      	ite	eq
 8006ee4:	2301      	moveq	r3, #1
 8006ee6:	2300      	movne	r3, #0
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	461a      	mov	r2, r3
 8006eec:	79fb      	ldrb	r3, [r7, #7]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d0b4      	beq.n	8006e5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3718      	adds	r7, #24
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b098      	sub	sp, #96	@ 0x60
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	4613      	mov	r3, r2
 8006f08:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006f0a:	68ba      	ldr	r2, [r7, #8]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	88fa      	ldrh	r2, [r7, #6]
 8006f14:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2222      	movs	r2, #34	@ 0x22
 8006f20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f28:	4a44      	ldr	r2, [pc, #272]	@ (800703c <UART_Start_Receive_DMA+0x140>)
 8006f2a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f30:	4a43      	ldr	r2, [pc, #268]	@ (8007040 <UART_Start_Receive_DMA+0x144>)
 8006f32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f38:	4a42      	ldr	r2, [pc, #264]	@ (8007044 <UART_Start_Receive_DMA+0x148>)
 8006f3a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f40:	2200      	movs	r2, #0
 8006f42:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006f44:	f107 0308 	add.w	r3, r7, #8
 8006f48:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	3304      	adds	r3, #4
 8006f54:	4619      	mov	r1, r3
 8006f56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	88fb      	ldrh	r3, [r7, #6]
 8006f5c:	f7fc fc0a 	bl	8003774 <HAL_DMA_Start_IT>
 8006f60:	4603      	mov	r3, r0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d008      	beq.n	8006f78 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2210      	movs	r2, #16
 8006f6a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2220      	movs	r2, #32
 8006f70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e05d      	b.n	8007034 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006f78:	2300      	movs	r3, #0
 8006f7a:	613b      	str	r3, [r7, #16]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	613b      	str	r3, [r7, #16]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	613b      	str	r3, [r7, #16]
 8006f8c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d019      	beq.n	8006fca <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	330c      	adds	r3, #12
 8006f9c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fa0:	e853 3f00 	ldrex	r3, [r3]
 8006fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006fa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fac:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	330c      	adds	r3, #12
 8006fb4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006fb6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006fb8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fba:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006fbc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006fbe:	e841 2300 	strex	r3, r2, [r1]
 8006fc2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006fc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d1e5      	bne.n	8006f96 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	3314      	adds	r3, #20
 8006fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fd4:	e853 3f00 	ldrex	r3, [r3]
 8006fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fdc:	f043 0301 	orr.w	r3, r3, #1
 8006fe0:	657b      	str	r3, [r7, #84]	@ 0x54
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	3314      	adds	r3, #20
 8006fe8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006fea:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006fec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006ff0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ff2:	e841 2300 	strex	r3, r2, [r1]
 8006ff6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d1e5      	bne.n	8006fca <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	3314      	adds	r3, #20
 8007004:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	e853 3f00 	ldrex	r3, [r3]
 800700c:	617b      	str	r3, [r7, #20]
   return(result);
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007014:	653b      	str	r3, [r7, #80]	@ 0x50
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	3314      	adds	r3, #20
 800701c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800701e:	627a      	str	r2, [r7, #36]	@ 0x24
 8007020:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007022:	6a39      	ldr	r1, [r7, #32]
 8007024:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007026:	e841 2300 	strex	r3, r2, [r1]
 800702a:	61fb      	str	r3, [r7, #28]
   return(result);
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1e5      	bne.n	8006ffe <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3760      	adds	r7, #96	@ 0x60
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}
 800703c:	08006c4f 	.word	0x08006c4f
 8007040:	08006d7b 	.word	0x08006d7b
 8007044:	08006db7 	.word	0x08006db7

08007048 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007048:	b480      	push	{r7}
 800704a:	b089      	sub	sp, #36	@ 0x24
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	330c      	adds	r3, #12
 8007056:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	e853 3f00 	ldrex	r3, [r3]
 800705e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007066:	61fb      	str	r3, [r7, #28]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	330c      	adds	r3, #12
 800706e:	69fa      	ldr	r2, [r7, #28]
 8007070:	61ba      	str	r2, [r7, #24]
 8007072:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007074:	6979      	ldr	r1, [r7, #20]
 8007076:	69ba      	ldr	r2, [r7, #24]
 8007078:	e841 2300 	strex	r3, r2, [r1]
 800707c:	613b      	str	r3, [r7, #16]
   return(result);
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1e5      	bne.n	8007050 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2220      	movs	r2, #32
 8007088:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800708c:	bf00      	nop
 800708e:	3724      	adds	r7, #36	@ 0x24
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007098:	b480      	push	{r7}
 800709a:	b095      	sub	sp, #84	@ 0x54
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	330c      	adds	r3, #12
 80070a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070aa:	e853 3f00 	ldrex	r3, [r3]
 80070ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80070b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	330c      	adds	r3, #12
 80070be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80070c0:	643a      	str	r2, [r7, #64]	@ 0x40
 80070c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80070c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80070c8:	e841 2300 	strex	r3, r2, [r1]
 80070cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80070ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1e5      	bne.n	80070a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	3314      	adds	r3, #20
 80070da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070dc:	6a3b      	ldr	r3, [r7, #32]
 80070de:	e853 3f00 	ldrex	r3, [r3]
 80070e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	f023 0301 	bic.w	r3, r3, #1
 80070ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	3314      	adds	r3, #20
 80070f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070fc:	e841 2300 	strex	r3, r2, [r1]
 8007100:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007104:	2b00      	cmp	r3, #0
 8007106:	d1e5      	bne.n	80070d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800710c:	2b01      	cmp	r3, #1
 800710e:	d119      	bne.n	8007144 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	330c      	adds	r3, #12
 8007116:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	e853 3f00 	ldrex	r3, [r3]
 800711e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	f023 0310 	bic.w	r3, r3, #16
 8007126:	647b      	str	r3, [r7, #68]	@ 0x44
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	330c      	adds	r3, #12
 800712e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007130:	61ba      	str	r2, [r7, #24]
 8007132:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007134:	6979      	ldr	r1, [r7, #20]
 8007136:	69ba      	ldr	r2, [r7, #24]
 8007138:	e841 2300 	strex	r3, r2, [r1]
 800713c:	613b      	str	r3, [r7, #16]
   return(result);
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d1e5      	bne.n	8007110 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2220      	movs	r2, #32
 8007148:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007152:	bf00      	nop
 8007154:	3754      	adds	r7, #84	@ 0x54
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr

0800715e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b084      	sub	sp, #16
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800716a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2200      	movs	r2, #0
 8007170:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007172:	68f8      	ldr	r0, [r7, #12]
 8007174:	f7ff fcfa 	bl	8006b6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007178:	bf00      	nop
 800717a:	3710      	adds	r7, #16
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007180:	b480      	push	{r7}
 8007182:	b085      	sub	sp, #20
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800718e:	b2db      	uxtb	r3, r3
 8007190:	2b21      	cmp	r3, #33	@ 0x21
 8007192:	d13e      	bne.n	8007212 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800719c:	d114      	bne.n	80071c8 <UART_Transmit_IT+0x48>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d110      	bne.n	80071c8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6a1b      	ldr	r3, [r3, #32]
 80071aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	881b      	ldrh	r3, [r3, #0]
 80071b0:	461a      	mov	r2, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071ba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6a1b      	ldr	r3, [r3, #32]
 80071c0:	1c9a      	adds	r2, r3, #2
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	621a      	str	r2, [r3, #32]
 80071c6:	e008      	b.n	80071da <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6a1b      	ldr	r3, [r3, #32]
 80071cc:	1c59      	adds	r1, r3, #1
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	6211      	str	r1, [r2, #32]
 80071d2:	781a      	ldrb	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80071de:	b29b      	uxth	r3, r3
 80071e0:	3b01      	subs	r3, #1
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	4619      	mov	r1, r3
 80071e8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d10f      	bne.n	800720e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68da      	ldr	r2, [r3, #12]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80071fc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68da      	ldr	r2, [r3, #12]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800720c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800720e:	2300      	movs	r3, #0
 8007210:	e000      	b.n	8007214 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007212:	2302      	movs	r3, #2
  }
}
 8007214:	4618      	mov	r0, r3
 8007216:	3714      	adds	r7, #20
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68da      	ldr	r2, [r3, #12]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007236:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2220      	movs	r2, #32
 800723c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f7ff fc6b 	bl	8006b1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3708      	adds	r7, #8
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b08c      	sub	sp, #48	@ 0x30
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8007258:	2300      	movs	r3, #0
 800725a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800725c:	2300      	movs	r3, #0
 800725e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007266:	b2db      	uxtb	r3, r3
 8007268:	2b22      	cmp	r3, #34	@ 0x22
 800726a:	f040 80aa 	bne.w	80073c2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007276:	d115      	bne.n	80072a4 <UART_Receive_IT+0x54>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d111      	bne.n	80072a4 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007284:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	b29b      	uxth	r3, r3
 800728e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007292:	b29a      	uxth	r2, r3
 8007294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007296:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800729c:	1c9a      	adds	r2, r3, #2
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80072a2:	e024      	b.n	80072ee <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072b2:	d007      	beq.n	80072c4 <UART_Receive_IT+0x74>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d10a      	bne.n	80072d2 <UART_Receive_IT+0x82>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d106      	bne.n	80072d2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	b2da      	uxtb	r2, r3
 80072cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ce:	701a      	strb	r2, [r3, #0]
 80072d0:	e008      	b.n	80072e4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072de:	b2da      	uxtb	r2, r3
 80072e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072e2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072e8:	1c5a      	adds	r2, r3, #1
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	3b01      	subs	r3, #1
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	4619      	mov	r1, r3
 80072fc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d15d      	bne.n	80073be <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68da      	ldr	r2, [r3, #12]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f022 0220 	bic.w	r2, r2, #32
 8007310:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68da      	ldr	r2, [r3, #12]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007320:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	695a      	ldr	r2, [r3, #20]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f022 0201 	bic.w	r2, r2, #1
 8007330:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2220      	movs	r2, #32
 8007336:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007344:	2b01      	cmp	r3, #1
 8007346:	d135      	bne.n	80073b4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	330c      	adds	r3, #12
 8007354:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	e853 3f00 	ldrex	r3, [r3]
 800735c:	613b      	str	r3, [r7, #16]
   return(result);
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	f023 0310 	bic.w	r3, r3, #16
 8007364:	627b      	str	r3, [r7, #36]	@ 0x24
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	330c      	adds	r3, #12
 800736c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800736e:	623a      	str	r2, [r7, #32]
 8007370:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007372:	69f9      	ldr	r1, [r7, #28]
 8007374:	6a3a      	ldr	r2, [r7, #32]
 8007376:	e841 2300 	strex	r3, r2, [r1]
 800737a:	61bb      	str	r3, [r7, #24]
   return(result);
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1e5      	bne.n	800734e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0310 	and.w	r3, r3, #16
 800738c:	2b10      	cmp	r3, #16
 800738e:	d10a      	bne.n	80073a6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007390:	2300      	movs	r3, #0
 8007392:	60fb      	str	r3, [r7, #12]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	60fb      	str	r3, [r7, #12]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	60fb      	str	r3, [r7, #12]
 80073a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80073aa:	4619      	mov	r1, r3
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f7ff fbe7 	bl	8006b80 <HAL_UARTEx_RxEventCallback>
 80073b2:	e002      	b.n	80073ba <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f7ff fbc5 	bl	8006b44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80073ba:	2300      	movs	r3, #0
 80073bc:	e002      	b.n	80073c4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80073be:	2300      	movs	r3, #0
 80073c0:	e000      	b.n	80073c4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80073c2:	2302      	movs	r3, #2
  }
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3730      	adds	r7, #48	@ 0x30
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073d0:	b0c0      	sub	sp, #256	@ 0x100
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	691b      	ldr	r3, [r3, #16]
 80073e0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80073e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073e8:	68d9      	ldr	r1, [r3, #12]
 80073ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	ea40 0301 	orr.w	r3, r0, r1
 80073f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80073f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073fa:	689a      	ldr	r2, [r3, #8]
 80073fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007400:	691b      	ldr	r3, [r3, #16]
 8007402:	431a      	orrs	r2, r3
 8007404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007408:	695b      	ldr	r3, [r3, #20]
 800740a:	431a      	orrs	r2, r3
 800740c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007410:	69db      	ldr	r3, [r3, #28]
 8007412:	4313      	orrs	r3, r2
 8007414:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007424:	f021 010c 	bic.w	r1, r1, #12
 8007428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007432:	430b      	orrs	r3, r1
 8007434:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	695b      	ldr	r3, [r3, #20]
 800743e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007446:	6999      	ldr	r1, [r3, #24]
 8007448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	ea40 0301 	orr.w	r3, r0, r1
 8007452:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	4b8f      	ldr	r3, [pc, #572]	@ (8007698 <UART_SetConfig+0x2cc>)
 800745c:	429a      	cmp	r2, r3
 800745e:	d005      	beq.n	800746c <UART_SetConfig+0xa0>
 8007460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	4b8d      	ldr	r3, [pc, #564]	@ (800769c <UART_SetConfig+0x2d0>)
 8007468:	429a      	cmp	r2, r3
 800746a:	d104      	bne.n	8007476 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800746c:	f7fd f8ce 	bl	800460c <HAL_RCC_GetPCLK2Freq>
 8007470:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007474:	e003      	b.n	800747e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007476:	f7fd f8b5 	bl	80045e4 <HAL_RCC_GetPCLK1Freq>
 800747a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800747e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007482:	69db      	ldr	r3, [r3, #28]
 8007484:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007488:	f040 810c 	bne.w	80076a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800748c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007490:	2200      	movs	r2, #0
 8007492:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007496:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800749a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800749e:	4622      	mov	r2, r4
 80074a0:	462b      	mov	r3, r5
 80074a2:	1891      	adds	r1, r2, r2
 80074a4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80074a6:	415b      	adcs	r3, r3
 80074a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80074aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80074ae:	4621      	mov	r1, r4
 80074b0:	eb12 0801 	adds.w	r8, r2, r1
 80074b4:	4629      	mov	r1, r5
 80074b6:	eb43 0901 	adc.w	r9, r3, r1
 80074ba:	f04f 0200 	mov.w	r2, #0
 80074be:	f04f 0300 	mov.w	r3, #0
 80074c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80074c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80074ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80074ce:	4690      	mov	r8, r2
 80074d0:	4699      	mov	r9, r3
 80074d2:	4623      	mov	r3, r4
 80074d4:	eb18 0303 	adds.w	r3, r8, r3
 80074d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80074dc:	462b      	mov	r3, r5
 80074de:	eb49 0303 	adc.w	r3, r9, r3
 80074e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80074e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80074f2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80074f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80074fa:	460b      	mov	r3, r1
 80074fc:	18db      	adds	r3, r3, r3
 80074fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8007500:	4613      	mov	r3, r2
 8007502:	eb42 0303 	adc.w	r3, r2, r3
 8007506:	657b      	str	r3, [r7, #84]	@ 0x54
 8007508:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800750c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007510:	f7f9 fbdc 	bl	8000ccc <__aeabi_uldivmod>
 8007514:	4602      	mov	r2, r0
 8007516:	460b      	mov	r3, r1
 8007518:	4b61      	ldr	r3, [pc, #388]	@ (80076a0 <UART_SetConfig+0x2d4>)
 800751a:	fba3 2302 	umull	r2, r3, r3, r2
 800751e:	095b      	lsrs	r3, r3, #5
 8007520:	011c      	lsls	r4, r3, #4
 8007522:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007526:	2200      	movs	r2, #0
 8007528:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800752c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007530:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007534:	4642      	mov	r2, r8
 8007536:	464b      	mov	r3, r9
 8007538:	1891      	adds	r1, r2, r2
 800753a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800753c:	415b      	adcs	r3, r3
 800753e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007540:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007544:	4641      	mov	r1, r8
 8007546:	eb12 0a01 	adds.w	sl, r2, r1
 800754a:	4649      	mov	r1, r9
 800754c:	eb43 0b01 	adc.w	fp, r3, r1
 8007550:	f04f 0200 	mov.w	r2, #0
 8007554:	f04f 0300 	mov.w	r3, #0
 8007558:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800755c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007560:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007564:	4692      	mov	sl, r2
 8007566:	469b      	mov	fp, r3
 8007568:	4643      	mov	r3, r8
 800756a:	eb1a 0303 	adds.w	r3, sl, r3
 800756e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007572:	464b      	mov	r3, r9
 8007574:	eb4b 0303 	adc.w	r3, fp, r3
 8007578:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800757c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007588:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800758c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007590:	460b      	mov	r3, r1
 8007592:	18db      	adds	r3, r3, r3
 8007594:	643b      	str	r3, [r7, #64]	@ 0x40
 8007596:	4613      	mov	r3, r2
 8007598:	eb42 0303 	adc.w	r3, r2, r3
 800759c:	647b      	str	r3, [r7, #68]	@ 0x44
 800759e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80075a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80075a6:	f7f9 fb91 	bl	8000ccc <__aeabi_uldivmod>
 80075aa:	4602      	mov	r2, r0
 80075ac:	460b      	mov	r3, r1
 80075ae:	4611      	mov	r1, r2
 80075b0:	4b3b      	ldr	r3, [pc, #236]	@ (80076a0 <UART_SetConfig+0x2d4>)
 80075b2:	fba3 2301 	umull	r2, r3, r3, r1
 80075b6:	095b      	lsrs	r3, r3, #5
 80075b8:	2264      	movs	r2, #100	@ 0x64
 80075ba:	fb02 f303 	mul.w	r3, r2, r3
 80075be:	1acb      	subs	r3, r1, r3
 80075c0:	00db      	lsls	r3, r3, #3
 80075c2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80075c6:	4b36      	ldr	r3, [pc, #216]	@ (80076a0 <UART_SetConfig+0x2d4>)
 80075c8:	fba3 2302 	umull	r2, r3, r3, r2
 80075cc:	095b      	lsrs	r3, r3, #5
 80075ce:	005b      	lsls	r3, r3, #1
 80075d0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80075d4:	441c      	add	r4, r3
 80075d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075da:	2200      	movs	r2, #0
 80075dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80075e0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80075e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80075e8:	4642      	mov	r2, r8
 80075ea:	464b      	mov	r3, r9
 80075ec:	1891      	adds	r1, r2, r2
 80075ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80075f0:	415b      	adcs	r3, r3
 80075f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80075f8:	4641      	mov	r1, r8
 80075fa:	1851      	adds	r1, r2, r1
 80075fc:	6339      	str	r1, [r7, #48]	@ 0x30
 80075fe:	4649      	mov	r1, r9
 8007600:	414b      	adcs	r3, r1
 8007602:	637b      	str	r3, [r7, #52]	@ 0x34
 8007604:	f04f 0200 	mov.w	r2, #0
 8007608:	f04f 0300 	mov.w	r3, #0
 800760c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007610:	4659      	mov	r1, fp
 8007612:	00cb      	lsls	r3, r1, #3
 8007614:	4651      	mov	r1, sl
 8007616:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800761a:	4651      	mov	r1, sl
 800761c:	00ca      	lsls	r2, r1, #3
 800761e:	4610      	mov	r0, r2
 8007620:	4619      	mov	r1, r3
 8007622:	4603      	mov	r3, r0
 8007624:	4642      	mov	r2, r8
 8007626:	189b      	adds	r3, r3, r2
 8007628:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800762c:	464b      	mov	r3, r9
 800762e:	460a      	mov	r2, r1
 8007630:	eb42 0303 	adc.w	r3, r2, r3
 8007634:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007644:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007648:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800764c:	460b      	mov	r3, r1
 800764e:	18db      	adds	r3, r3, r3
 8007650:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007652:	4613      	mov	r3, r2
 8007654:	eb42 0303 	adc.w	r3, r2, r3
 8007658:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800765a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800765e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007662:	f7f9 fb33 	bl	8000ccc <__aeabi_uldivmod>
 8007666:	4602      	mov	r2, r0
 8007668:	460b      	mov	r3, r1
 800766a:	4b0d      	ldr	r3, [pc, #52]	@ (80076a0 <UART_SetConfig+0x2d4>)
 800766c:	fba3 1302 	umull	r1, r3, r3, r2
 8007670:	095b      	lsrs	r3, r3, #5
 8007672:	2164      	movs	r1, #100	@ 0x64
 8007674:	fb01 f303 	mul.w	r3, r1, r3
 8007678:	1ad3      	subs	r3, r2, r3
 800767a:	00db      	lsls	r3, r3, #3
 800767c:	3332      	adds	r3, #50	@ 0x32
 800767e:	4a08      	ldr	r2, [pc, #32]	@ (80076a0 <UART_SetConfig+0x2d4>)
 8007680:	fba2 2303 	umull	r2, r3, r2, r3
 8007684:	095b      	lsrs	r3, r3, #5
 8007686:	f003 0207 	and.w	r2, r3, #7
 800768a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4422      	add	r2, r4
 8007692:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007694:	e106      	b.n	80078a4 <UART_SetConfig+0x4d8>
 8007696:	bf00      	nop
 8007698:	40011000 	.word	0x40011000
 800769c:	40011400 	.word	0x40011400
 80076a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80076a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076a8:	2200      	movs	r2, #0
 80076aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80076ae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80076b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80076b6:	4642      	mov	r2, r8
 80076b8:	464b      	mov	r3, r9
 80076ba:	1891      	adds	r1, r2, r2
 80076bc:	6239      	str	r1, [r7, #32]
 80076be:	415b      	adcs	r3, r3
 80076c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80076c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80076c6:	4641      	mov	r1, r8
 80076c8:	1854      	adds	r4, r2, r1
 80076ca:	4649      	mov	r1, r9
 80076cc:	eb43 0501 	adc.w	r5, r3, r1
 80076d0:	f04f 0200 	mov.w	r2, #0
 80076d4:	f04f 0300 	mov.w	r3, #0
 80076d8:	00eb      	lsls	r3, r5, #3
 80076da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80076de:	00e2      	lsls	r2, r4, #3
 80076e0:	4614      	mov	r4, r2
 80076e2:	461d      	mov	r5, r3
 80076e4:	4643      	mov	r3, r8
 80076e6:	18e3      	adds	r3, r4, r3
 80076e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80076ec:	464b      	mov	r3, r9
 80076ee:	eb45 0303 	adc.w	r3, r5, r3
 80076f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80076f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007702:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007706:	f04f 0200 	mov.w	r2, #0
 800770a:	f04f 0300 	mov.w	r3, #0
 800770e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007712:	4629      	mov	r1, r5
 8007714:	008b      	lsls	r3, r1, #2
 8007716:	4621      	mov	r1, r4
 8007718:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800771c:	4621      	mov	r1, r4
 800771e:	008a      	lsls	r2, r1, #2
 8007720:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007724:	f7f9 fad2 	bl	8000ccc <__aeabi_uldivmod>
 8007728:	4602      	mov	r2, r0
 800772a:	460b      	mov	r3, r1
 800772c:	4b60      	ldr	r3, [pc, #384]	@ (80078b0 <UART_SetConfig+0x4e4>)
 800772e:	fba3 2302 	umull	r2, r3, r3, r2
 8007732:	095b      	lsrs	r3, r3, #5
 8007734:	011c      	lsls	r4, r3, #4
 8007736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800773a:	2200      	movs	r2, #0
 800773c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007740:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007744:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007748:	4642      	mov	r2, r8
 800774a:	464b      	mov	r3, r9
 800774c:	1891      	adds	r1, r2, r2
 800774e:	61b9      	str	r1, [r7, #24]
 8007750:	415b      	adcs	r3, r3
 8007752:	61fb      	str	r3, [r7, #28]
 8007754:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007758:	4641      	mov	r1, r8
 800775a:	1851      	adds	r1, r2, r1
 800775c:	6139      	str	r1, [r7, #16]
 800775e:	4649      	mov	r1, r9
 8007760:	414b      	adcs	r3, r1
 8007762:	617b      	str	r3, [r7, #20]
 8007764:	f04f 0200 	mov.w	r2, #0
 8007768:	f04f 0300 	mov.w	r3, #0
 800776c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007770:	4659      	mov	r1, fp
 8007772:	00cb      	lsls	r3, r1, #3
 8007774:	4651      	mov	r1, sl
 8007776:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800777a:	4651      	mov	r1, sl
 800777c:	00ca      	lsls	r2, r1, #3
 800777e:	4610      	mov	r0, r2
 8007780:	4619      	mov	r1, r3
 8007782:	4603      	mov	r3, r0
 8007784:	4642      	mov	r2, r8
 8007786:	189b      	adds	r3, r3, r2
 8007788:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800778c:	464b      	mov	r3, r9
 800778e:	460a      	mov	r2, r1
 8007790:	eb42 0303 	adc.w	r3, r2, r3
 8007794:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80077a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80077a4:	f04f 0200 	mov.w	r2, #0
 80077a8:	f04f 0300 	mov.w	r3, #0
 80077ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80077b0:	4649      	mov	r1, r9
 80077b2:	008b      	lsls	r3, r1, #2
 80077b4:	4641      	mov	r1, r8
 80077b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077ba:	4641      	mov	r1, r8
 80077bc:	008a      	lsls	r2, r1, #2
 80077be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80077c2:	f7f9 fa83 	bl	8000ccc <__aeabi_uldivmod>
 80077c6:	4602      	mov	r2, r0
 80077c8:	460b      	mov	r3, r1
 80077ca:	4611      	mov	r1, r2
 80077cc:	4b38      	ldr	r3, [pc, #224]	@ (80078b0 <UART_SetConfig+0x4e4>)
 80077ce:	fba3 2301 	umull	r2, r3, r3, r1
 80077d2:	095b      	lsrs	r3, r3, #5
 80077d4:	2264      	movs	r2, #100	@ 0x64
 80077d6:	fb02 f303 	mul.w	r3, r2, r3
 80077da:	1acb      	subs	r3, r1, r3
 80077dc:	011b      	lsls	r3, r3, #4
 80077de:	3332      	adds	r3, #50	@ 0x32
 80077e0:	4a33      	ldr	r2, [pc, #204]	@ (80078b0 <UART_SetConfig+0x4e4>)
 80077e2:	fba2 2303 	umull	r2, r3, r2, r3
 80077e6:	095b      	lsrs	r3, r3, #5
 80077e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80077ec:	441c      	add	r4, r3
 80077ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077f2:	2200      	movs	r2, #0
 80077f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80077f6:	677a      	str	r2, [r7, #116]	@ 0x74
 80077f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80077fc:	4642      	mov	r2, r8
 80077fe:	464b      	mov	r3, r9
 8007800:	1891      	adds	r1, r2, r2
 8007802:	60b9      	str	r1, [r7, #8]
 8007804:	415b      	adcs	r3, r3
 8007806:	60fb      	str	r3, [r7, #12]
 8007808:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800780c:	4641      	mov	r1, r8
 800780e:	1851      	adds	r1, r2, r1
 8007810:	6039      	str	r1, [r7, #0]
 8007812:	4649      	mov	r1, r9
 8007814:	414b      	adcs	r3, r1
 8007816:	607b      	str	r3, [r7, #4]
 8007818:	f04f 0200 	mov.w	r2, #0
 800781c:	f04f 0300 	mov.w	r3, #0
 8007820:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007824:	4659      	mov	r1, fp
 8007826:	00cb      	lsls	r3, r1, #3
 8007828:	4651      	mov	r1, sl
 800782a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800782e:	4651      	mov	r1, sl
 8007830:	00ca      	lsls	r2, r1, #3
 8007832:	4610      	mov	r0, r2
 8007834:	4619      	mov	r1, r3
 8007836:	4603      	mov	r3, r0
 8007838:	4642      	mov	r2, r8
 800783a:	189b      	adds	r3, r3, r2
 800783c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800783e:	464b      	mov	r3, r9
 8007840:	460a      	mov	r2, r1
 8007842:	eb42 0303 	adc.w	r3, r2, r3
 8007846:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	663b      	str	r3, [r7, #96]	@ 0x60
 8007852:	667a      	str	r2, [r7, #100]	@ 0x64
 8007854:	f04f 0200 	mov.w	r2, #0
 8007858:	f04f 0300 	mov.w	r3, #0
 800785c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007860:	4649      	mov	r1, r9
 8007862:	008b      	lsls	r3, r1, #2
 8007864:	4641      	mov	r1, r8
 8007866:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800786a:	4641      	mov	r1, r8
 800786c:	008a      	lsls	r2, r1, #2
 800786e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007872:	f7f9 fa2b 	bl	8000ccc <__aeabi_uldivmod>
 8007876:	4602      	mov	r2, r0
 8007878:	460b      	mov	r3, r1
 800787a:	4b0d      	ldr	r3, [pc, #52]	@ (80078b0 <UART_SetConfig+0x4e4>)
 800787c:	fba3 1302 	umull	r1, r3, r3, r2
 8007880:	095b      	lsrs	r3, r3, #5
 8007882:	2164      	movs	r1, #100	@ 0x64
 8007884:	fb01 f303 	mul.w	r3, r1, r3
 8007888:	1ad3      	subs	r3, r2, r3
 800788a:	011b      	lsls	r3, r3, #4
 800788c:	3332      	adds	r3, #50	@ 0x32
 800788e:	4a08      	ldr	r2, [pc, #32]	@ (80078b0 <UART_SetConfig+0x4e4>)
 8007890:	fba2 2303 	umull	r2, r3, r2, r3
 8007894:	095b      	lsrs	r3, r3, #5
 8007896:	f003 020f 	and.w	r2, r3, #15
 800789a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4422      	add	r2, r4
 80078a2:	609a      	str	r2, [r3, #8]
}
 80078a4:	bf00      	nop
 80078a6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80078aa:	46bd      	mov	sp, r7
 80078ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078b0:	51eb851f 	.word	0x51eb851f

080078b4 <__NVIC_SetPriority>:
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	4603      	mov	r3, r0
 80078bc:	6039      	str	r1, [r7, #0]
 80078be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80078c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	db0a      	blt.n	80078de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	b2da      	uxtb	r2, r3
 80078cc:	490c      	ldr	r1, [pc, #48]	@ (8007900 <__NVIC_SetPriority+0x4c>)
 80078ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078d2:	0112      	lsls	r2, r2, #4
 80078d4:	b2d2      	uxtb	r2, r2
 80078d6:	440b      	add	r3, r1
 80078d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80078dc:	e00a      	b.n	80078f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	b2da      	uxtb	r2, r3
 80078e2:	4908      	ldr	r1, [pc, #32]	@ (8007904 <__NVIC_SetPriority+0x50>)
 80078e4:	79fb      	ldrb	r3, [r7, #7]
 80078e6:	f003 030f 	and.w	r3, r3, #15
 80078ea:	3b04      	subs	r3, #4
 80078ec:	0112      	lsls	r2, r2, #4
 80078ee:	b2d2      	uxtb	r2, r2
 80078f0:	440b      	add	r3, r1
 80078f2:	761a      	strb	r2, [r3, #24]
}
 80078f4:	bf00      	nop
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr
 8007900:	e000e100 	.word	0xe000e100
 8007904:	e000ed00 	.word	0xe000ed00

08007908 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007908:	b580      	push	{r7, lr}
 800790a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800790c:	4b05      	ldr	r3, [pc, #20]	@ (8007924 <SysTick_Handler+0x1c>)
 800790e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007910:	f001 fd40 	bl	8009394 <xTaskGetSchedulerState>
 8007914:	4603      	mov	r3, r0
 8007916:	2b01      	cmp	r3, #1
 8007918:	d001      	beq.n	800791e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800791a:	f002 fb35 	bl	8009f88 <xPortSysTickHandler>
  }
}
 800791e:	bf00      	nop
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop
 8007924:	e000e010 	.word	0xe000e010

08007928 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007928:	b580      	push	{r7, lr}
 800792a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800792c:	2100      	movs	r1, #0
 800792e:	f06f 0004 	mvn.w	r0, #4
 8007932:	f7ff ffbf 	bl	80078b4 <__NVIC_SetPriority>
#endif
}
 8007936:	bf00      	nop
 8007938:	bd80      	pop	{r7, pc}
	...

0800793c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007942:	f3ef 8305 	mrs	r3, IPSR
 8007946:	603b      	str	r3, [r7, #0]
  return(result);
 8007948:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800794a:	2b00      	cmp	r3, #0
 800794c:	d003      	beq.n	8007956 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800794e:	f06f 0305 	mvn.w	r3, #5
 8007952:	607b      	str	r3, [r7, #4]
 8007954:	e00c      	b.n	8007970 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007956:	4b0a      	ldr	r3, [pc, #40]	@ (8007980 <osKernelInitialize+0x44>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d105      	bne.n	800796a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800795e:	4b08      	ldr	r3, [pc, #32]	@ (8007980 <osKernelInitialize+0x44>)
 8007960:	2201      	movs	r2, #1
 8007962:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007964:	2300      	movs	r3, #0
 8007966:	607b      	str	r3, [r7, #4]
 8007968:	e002      	b.n	8007970 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800796a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800796e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007970:	687b      	ldr	r3, [r7, #4]
}
 8007972:	4618      	mov	r0, r3
 8007974:	370c      	adds	r7, #12
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	200084c4 	.word	0x200084c4

08007984 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800798a:	f3ef 8305 	mrs	r3, IPSR
 800798e:	603b      	str	r3, [r7, #0]
  return(result);
 8007990:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007992:	2b00      	cmp	r3, #0
 8007994:	d003      	beq.n	800799e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007996:	f06f 0305 	mvn.w	r3, #5
 800799a:	607b      	str	r3, [r7, #4]
 800799c:	e010      	b.n	80079c0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800799e:	4b0b      	ldr	r3, [pc, #44]	@ (80079cc <osKernelStart+0x48>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d109      	bne.n	80079ba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80079a6:	f7ff ffbf 	bl	8007928 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80079aa:	4b08      	ldr	r3, [pc, #32]	@ (80079cc <osKernelStart+0x48>)
 80079ac:	2202      	movs	r2, #2
 80079ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80079b0:	f001 f87a 	bl	8008aa8 <vTaskStartScheduler>
      stat = osOK;
 80079b4:	2300      	movs	r3, #0
 80079b6:	607b      	str	r3, [r7, #4]
 80079b8:	e002      	b.n	80079c0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80079ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80079be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80079c0:	687b      	ldr	r3, [r7, #4]
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3708      	adds	r7, #8
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	200084c4 	.word	0x200084c4

080079d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b08e      	sub	sp, #56	@ 0x38
 80079d4:	af04      	add	r7, sp, #16
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	60b9      	str	r1, [r7, #8]
 80079da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80079dc:	2300      	movs	r3, #0
 80079de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079e0:	f3ef 8305 	mrs	r3, IPSR
 80079e4:	617b      	str	r3, [r7, #20]
  return(result);
 80079e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d17e      	bne.n	8007aea <osThreadNew+0x11a>
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d07b      	beq.n	8007aea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80079f2:	2380      	movs	r3, #128	@ 0x80
 80079f4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80079f6:	2318      	movs	r3, #24
 80079f8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80079fa:	2300      	movs	r3, #0
 80079fc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80079fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007a02:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d045      	beq.n	8007a96 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d002      	beq.n	8007a18 <osThreadNew+0x48>
        name = attr->name;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	699b      	ldr	r3, [r3, #24]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d002      	beq.n	8007a26 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	699b      	ldr	r3, [r3, #24]
 8007a24:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d008      	beq.n	8007a3e <osThreadNew+0x6e>
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	2b38      	cmp	r3, #56	@ 0x38
 8007a30:	d805      	bhi.n	8007a3e <osThreadNew+0x6e>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	f003 0301 	and.w	r3, r3, #1
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d001      	beq.n	8007a42 <osThreadNew+0x72>
        return (NULL);
 8007a3e:	2300      	movs	r3, #0
 8007a40:	e054      	b.n	8007aec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	695b      	ldr	r3, [r3, #20]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d003      	beq.n	8007a52 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	695b      	ldr	r3, [r3, #20]
 8007a4e:	089b      	lsrs	r3, r3, #2
 8007a50:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00e      	beq.n	8007a78 <osThreadNew+0xa8>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	2b5b      	cmp	r3, #91	@ 0x5b
 8007a60:	d90a      	bls.n	8007a78 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d006      	beq.n	8007a78 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	695b      	ldr	r3, [r3, #20]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d002      	beq.n	8007a78 <osThreadNew+0xa8>
        mem = 1;
 8007a72:	2301      	movs	r3, #1
 8007a74:	61bb      	str	r3, [r7, #24]
 8007a76:	e010      	b.n	8007a9a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d10c      	bne.n	8007a9a <osThreadNew+0xca>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	68db      	ldr	r3, [r3, #12]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d108      	bne.n	8007a9a <osThreadNew+0xca>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	691b      	ldr	r3, [r3, #16]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d104      	bne.n	8007a9a <osThreadNew+0xca>
          mem = 0;
 8007a90:	2300      	movs	r3, #0
 8007a92:	61bb      	str	r3, [r7, #24]
 8007a94:	e001      	b.n	8007a9a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007a96:	2300      	movs	r3, #0
 8007a98:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007a9a:	69bb      	ldr	r3, [r7, #24]
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d110      	bne.n	8007ac2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007aa8:	9202      	str	r2, [sp, #8]
 8007aaa:	9301      	str	r3, [sp, #4]
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	9300      	str	r3, [sp, #0]
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	6a3a      	ldr	r2, [r7, #32]
 8007ab4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f000 fe1a 	bl	80086f0 <xTaskCreateStatic>
 8007abc:	4603      	mov	r3, r0
 8007abe:	613b      	str	r3, [r7, #16]
 8007ac0:	e013      	b.n	8007aea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007ac2:	69bb      	ldr	r3, [r7, #24]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d110      	bne.n	8007aea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007ac8:	6a3b      	ldr	r3, [r7, #32]
 8007aca:	b29a      	uxth	r2, r3
 8007acc:	f107 0310 	add.w	r3, r7, #16
 8007ad0:	9301      	str	r3, [sp, #4]
 8007ad2:	69fb      	ldr	r3, [r7, #28]
 8007ad4:	9300      	str	r3, [sp, #0]
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007ada:	68f8      	ldr	r0, [r7, #12]
 8007adc:	f000 fe68 	bl	80087b0 <xTaskCreate>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d001      	beq.n	8007aea <osThreadNew+0x11a>
            hTask = NULL;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007aea:	693b      	ldr	r3, [r7, #16]
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3728      	adds	r7, #40	@ 0x28
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007afc:	f3ef 8305 	mrs	r3, IPSR
 8007b00:	60bb      	str	r3, [r7, #8]
  return(result);
 8007b02:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d003      	beq.n	8007b10 <osDelay+0x1c>
    stat = osErrorISR;
 8007b08:	f06f 0305 	mvn.w	r3, #5
 8007b0c:	60fb      	str	r3, [r7, #12]
 8007b0e:	e007      	b.n	8007b20 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007b10:	2300      	movs	r3, #0
 8007b12:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d002      	beq.n	8007b20 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 ff8e 	bl	8008a3c <vTaskDelay>
    }
  }

  return (stat);
 8007b20:	68fb      	ldr	r3, [r7, #12]
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3710      	adds	r7, #16
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
	...

08007b2c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007b2c:	b480      	push	{r7}
 8007b2e:	b085      	sub	sp, #20
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	4a07      	ldr	r2, [pc, #28]	@ (8007b58 <vApplicationGetIdleTaskMemory+0x2c>)
 8007b3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	4a06      	ldr	r2, [pc, #24]	@ (8007b5c <vApplicationGetIdleTaskMemory+0x30>)
 8007b42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2280      	movs	r2, #128	@ 0x80
 8007b48:	601a      	str	r2, [r3, #0]
}
 8007b4a:	bf00      	nop
 8007b4c:	3714      	adds	r7, #20
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop
 8007b58:	200084c8 	.word	0x200084c8
 8007b5c:	20008524 	.word	0x20008524

08007b60 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007b60:	b480      	push	{r7}
 8007b62:	b085      	sub	sp, #20
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	4a07      	ldr	r2, [pc, #28]	@ (8007b8c <vApplicationGetTimerTaskMemory+0x2c>)
 8007b70:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	4a06      	ldr	r2, [pc, #24]	@ (8007b90 <vApplicationGetTimerTaskMemory+0x30>)
 8007b76:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007b7e:	601a      	str	r2, [r3, #0]
}
 8007b80:	bf00      	nop
 8007b82:	3714      	adds	r7, #20
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr
 8007b8c:	20008724 	.word	0x20008724
 8007b90:	20008780 	.word	0x20008780

08007b94 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f103 0208 	add.w	r2, r3, #8
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007bac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f103 0208 	add.w	r2, r3, #8
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f103 0208 	add.w	r2, r3, #8
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007bc8:	bf00      	nop
 8007bca:	370c      	adds	r7, #12
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr

08007bd4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007be2:	bf00      	nop
 8007be4:	370c      	adds	r7, #12
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr

08007bee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007bee:	b480      	push	{r7}
 8007bf0:	b085      	sub	sp, #20
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
 8007bf6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	689a      	ldr	r2, [r3, #8]
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	683a      	ldr	r2, [r7, #0]
 8007c12:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	683a      	ldr	r2, [r7, #0]
 8007c18:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	1c5a      	adds	r2, r3, #1
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	601a      	str	r2, [r3, #0]
}
 8007c2a:	bf00      	nop
 8007c2c:	3714      	adds	r7, #20
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr

08007c36 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c36:	b480      	push	{r7}
 8007c38:	b085      	sub	sp, #20
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
 8007c3e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c4c:	d103      	bne.n	8007c56 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	691b      	ldr	r3, [r3, #16]
 8007c52:	60fb      	str	r3, [r7, #12]
 8007c54:	e00c      	b.n	8007c70 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	3308      	adds	r3, #8
 8007c5a:	60fb      	str	r3, [r7, #12]
 8007c5c:	e002      	b.n	8007c64 <vListInsert+0x2e>
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	60fb      	str	r3, [r7, #12]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	68ba      	ldr	r2, [r7, #8]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d2f6      	bcs.n	8007c5e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	685a      	ldr	r2, [r3, #4]
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	683a      	ldr	r2, [r7, #0]
 8007c7e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	68fa      	ldr	r2, [r7, #12]
 8007c84:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	683a      	ldr	r2, [r7, #0]
 8007c8a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	1c5a      	adds	r2, r3, #1
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	601a      	str	r2, [r3, #0]
}
 8007c9c:	bf00      	nop
 8007c9e:	3714      	adds	r7, #20
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b085      	sub	sp, #20
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	691b      	ldr	r3, [r3, #16]
 8007cb4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	6892      	ldr	r2, [r2, #8]
 8007cbe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	6852      	ldr	r2, [r2, #4]
 8007cc8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d103      	bne.n	8007cdc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	689a      	ldr	r2, [r3, #8]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	1e5a      	subs	r2, r3, #1
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3714      	adds	r7, #20
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d10b      	bne.n	8007d28 <xQueueGenericReset+0x2c>
	__asm volatile
 8007d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d14:	f383 8811 	msr	BASEPRI, r3
 8007d18:	f3bf 8f6f 	isb	sy
 8007d1c:	f3bf 8f4f 	dsb	sy
 8007d20:	60bb      	str	r3, [r7, #8]
}
 8007d22:	bf00      	nop
 8007d24:	bf00      	nop
 8007d26:	e7fd      	b.n	8007d24 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007d28:	f002 f89e 	bl	8009e68 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d34:	68f9      	ldr	r1, [r7, #12]
 8007d36:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007d38:	fb01 f303 	mul.w	r3, r1, r3
 8007d3c:	441a      	add	r2, r3
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2200      	movs	r2, #0
 8007d46:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d58:	3b01      	subs	r3, #1
 8007d5a:	68f9      	ldr	r1, [r7, #12]
 8007d5c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007d5e:	fb01 f303 	mul.w	r3, r1, r3
 8007d62:	441a      	add	r2, r3
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	22ff      	movs	r2, #255	@ 0xff
 8007d6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	22ff      	movs	r2, #255	@ 0xff
 8007d74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d114      	bne.n	8007da8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d01a      	beq.n	8007dbc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	3310      	adds	r3, #16
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f001 f91a 	bl	8008fc4 <xTaskRemoveFromEventList>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d012      	beq.n	8007dbc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007d96:	4b0d      	ldr	r3, [pc, #52]	@ (8007dcc <xQueueGenericReset+0xd0>)
 8007d98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d9c:	601a      	str	r2, [r3, #0]
 8007d9e:	f3bf 8f4f 	dsb	sy
 8007da2:	f3bf 8f6f 	isb	sy
 8007da6:	e009      	b.n	8007dbc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	3310      	adds	r3, #16
 8007dac:	4618      	mov	r0, r3
 8007dae:	f7ff fef1 	bl	8007b94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	3324      	adds	r3, #36	@ 0x24
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7ff feec 	bl	8007b94 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007dbc:	f002 f886 	bl	8009ecc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007dc0:	2301      	movs	r3, #1
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	e000ed04 	.word	0xe000ed04

08007dd0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b08e      	sub	sp, #56	@ 0x38
 8007dd4:	af02      	add	r7, sp, #8
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]
 8007ddc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d10b      	bne.n	8007dfc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de8:	f383 8811 	msr	BASEPRI, r3
 8007dec:	f3bf 8f6f 	isb	sy
 8007df0:	f3bf 8f4f 	dsb	sy
 8007df4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007df6:	bf00      	nop
 8007df8:	bf00      	nop
 8007dfa:	e7fd      	b.n	8007df8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d10b      	bne.n	8007e1a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e06:	f383 8811 	msr	BASEPRI, r3
 8007e0a:	f3bf 8f6f 	isb	sy
 8007e0e:	f3bf 8f4f 	dsb	sy
 8007e12:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007e14:	bf00      	nop
 8007e16:	bf00      	nop
 8007e18:	e7fd      	b.n	8007e16 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d002      	beq.n	8007e26 <xQueueGenericCreateStatic+0x56>
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d001      	beq.n	8007e2a <xQueueGenericCreateStatic+0x5a>
 8007e26:	2301      	movs	r3, #1
 8007e28:	e000      	b.n	8007e2c <xQueueGenericCreateStatic+0x5c>
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d10b      	bne.n	8007e48 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e34:	f383 8811 	msr	BASEPRI, r3
 8007e38:	f3bf 8f6f 	isb	sy
 8007e3c:	f3bf 8f4f 	dsb	sy
 8007e40:	623b      	str	r3, [r7, #32]
}
 8007e42:	bf00      	nop
 8007e44:	bf00      	nop
 8007e46:	e7fd      	b.n	8007e44 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d102      	bne.n	8007e54 <xQueueGenericCreateStatic+0x84>
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d101      	bne.n	8007e58 <xQueueGenericCreateStatic+0x88>
 8007e54:	2301      	movs	r3, #1
 8007e56:	e000      	b.n	8007e5a <xQueueGenericCreateStatic+0x8a>
 8007e58:	2300      	movs	r3, #0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d10b      	bne.n	8007e76 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e62:	f383 8811 	msr	BASEPRI, r3
 8007e66:	f3bf 8f6f 	isb	sy
 8007e6a:	f3bf 8f4f 	dsb	sy
 8007e6e:	61fb      	str	r3, [r7, #28]
}
 8007e70:	bf00      	nop
 8007e72:	bf00      	nop
 8007e74:	e7fd      	b.n	8007e72 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007e76:	2350      	movs	r3, #80	@ 0x50
 8007e78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	2b50      	cmp	r3, #80	@ 0x50
 8007e7e:	d00b      	beq.n	8007e98 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e84:	f383 8811 	msr	BASEPRI, r3
 8007e88:	f3bf 8f6f 	isb	sy
 8007e8c:	f3bf 8f4f 	dsb	sy
 8007e90:	61bb      	str	r3, [r7, #24]
}
 8007e92:	bf00      	nop
 8007e94:	bf00      	nop
 8007e96:	e7fd      	b.n	8007e94 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007e98:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00d      	beq.n	8007ec0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007eac:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eb2:	9300      	str	r3, [sp, #0]
 8007eb4:	4613      	mov	r3, r2
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	68b9      	ldr	r1, [r7, #8]
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f000 f805 	bl	8007eca <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3730      	adds	r7, #48	@ 0x30
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b084      	sub	sp, #16
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	60f8      	str	r0, [r7, #12]
 8007ed2:	60b9      	str	r1, [r7, #8]
 8007ed4:	607a      	str	r2, [r7, #4]
 8007ed6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d103      	bne.n	8007ee6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	69ba      	ldr	r2, [r7, #24]
 8007ee2:	601a      	str	r2, [r3, #0]
 8007ee4:	e002      	b.n	8007eec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	68ba      	ldr	r2, [r7, #8]
 8007ef6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007ef8:	2101      	movs	r1, #1
 8007efa:	69b8      	ldr	r0, [r7, #24]
 8007efc:	f7ff fefe 	bl	8007cfc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007f00:	69bb      	ldr	r3, [r7, #24]
 8007f02:	78fa      	ldrb	r2, [r7, #3]
 8007f04:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007f08:	bf00      	nop
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b08e      	sub	sp, #56	@ 0x38
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	607a      	str	r2, [r7, #4]
 8007f1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d10b      	bne.n	8007f44 <xQueueGenericSend+0x34>
	__asm volatile
 8007f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f30:	f383 8811 	msr	BASEPRI, r3
 8007f34:	f3bf 8f6f 	isb	sy
 8007f38:	f3bf 8f4f 	dsb	sy
 8007f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007f3e:	bf00      	nop
 8007f40:	bf00      	nop
 8007f42:	e7fd      	b.n	8007f40 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d103      	bne.n	8007f52 <xQueueGenericSend+0x42>
 8007f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d101      	bne.n	8007f56 <xQueueGenericSend+0x46>
 8007f52:	2301      	movs	r3, #1
 8007f54:	e000      	b.n	8007f58 <xQueueGenericSend+0x48>
 8007f56:	2300      	movs	r3, #0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d10b      	bne.n	8007f74 <xQueueGenericSend+0x64>
	__asm volatile
 8007f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f60:	f383 8811 	msr	BASEPRI, r3
 8007f64:	f3bf 8f6f 	isb	sy
 8007f68:	f3bf 8f4f 	dsb	sy
 8007f6c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007f6e:	bf00      	nop
 8007f70:	bf00      	nop
 8007f72:	e7fd      	b.n	8007f70 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	d103      	bne.n	8007f82 <xQueueGenericSend+0x72>
 8007f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d101      	bne.n	8007f86 <xQueueGenericSend+0x76>
 8007f82:	2301      	movs	r3, #1
 8007f84:	e000      	b.n	8007f88 <xQueueGenericSend+0x78>
 8007f86:	2300      	movs	r3, #0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d10b      	bne.n	8007fa4 <xQueueGenericSend+0x94>
	__asm volatile
 8007f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f90:	f383 8811 	msr	BASEPRI, r3
 8007f94:	f3bf 8f6f 	isb	sy
 8007f98:	f3bf 8f4f 	dsb	sy
 8007f9c:	623b      	str	r3, [r7, #32]
}
 8007f9e:	bf00      	nop
 8007fa0:	bf00      	nop
 8007fa2:	e7fd      	b.n	8007fa0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007fa4:	f001 f9f6 	bl	8009394 <xTaskGetSchedulerState>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d102      	bne.n	8007fb4 <xQueueGenericSend+0xa4>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d101      	bne.n	8007fb8 <xQueueGenericSend+0xa8>
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e000      	b.n	8007fba <xQueueGenericSend+0xaa>
 8007fb8:	2300      	movs	r3, #0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d10b      	bne.n	8007fd6 <xQueueGenericSend+0xc6>
	__asm volatile
 8007fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc2:	f383 8811 	msr	BASEPRI, r3
 8007fc6:	f3bf 8f6f 	isb	sy
 8007fca:	f3bf 8f4f 	dsb	sy
 8007fce:	61fb      	str	r3, [r7, #28]
}
 8007fd0:	bf00      	nop
 8007fd2:	bf00      	nop
 8007fd4:	e7fd      	b.n	8007fd2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007fd6:	f001 ff47 	bl	8009e68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d302      	bcc.n	8007fec <xQueueGenericSend+0xdc>
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	2b02      	cmp	r3, #2
 8007fea:	d129      	bne.n	8008040 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007fec:	683a      	ldr	r2, [r7, #0]
 8007fee:	68b9      	ldr	r1, [r7, #8]
 8007ff0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007ff2:	f000 fa0f 	bl	8008414 <prvCopyDataToQueue>
 8007ff6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d010      	beq.n	8008022 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008002:	3324      	adds	r3, #36	@ 0x24
 8008004:	4618      	mov	r0, r3
 8008006:	f000 ffdd 	bl	8008fc4 <xTaskRemoveFromEventList>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d013      	beq.n	8008038 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008010:	4b3f      	ldr	r3, [pc, #252]	@ (8008110 <xQueueGenericSend+0x200>)
 8008012:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008016:	601a      	str	r2, [r3, #0]
 8008018:	f3bf 8f4f 	dsb	sy
 800801c:	f3bf 8f6f 	isb	sy
 8008020:	e00a      	b.n	8008038 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008024:	2b00      	cmp	r3, #0
 8008026:	d007      	beq.n	8008038 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008028:	4b39      	ldr	r3, [pc, #228]	@ (8008110 <xQueueGenericSend+0x200>)
 800802a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800802e:	601a      	str	r2, [r3, #0]
 8008030:	f3bf 8f4f 	dsb	sy
 8008034:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008038:	f001 ff48 	bl	8009ecc <vPortExitCritical>
				return pdPASS;
 800803c:	2301      	movs	r3, #1
 800803e:	e063      	b.n	8008108 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d103      	bne.n	800804e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008046:	f001 ff41 	bl	8009ecc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800804a:	2300      	movs	r3, #0
 800804c:	e05c      	b.n	8008108 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800804e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008050:	2b00      	cmp	r3, #0
 8008052:	d106      	bne.n	8008062 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008054:	f107 0314 	add.w	r3, r7, #20
 8008058:	4618      	mov	r0, r3
 800805a:	f001 f83f 	bl	80090dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800805e:	2301      	movs	r3, #1
 8008060:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008062:	f001 ff33 	bl	8009ecc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008066:	f000 fd87 	bl	8008b78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800806a:	f001 fefd 	bl	8009e68 <vPortEnterCritical>
 800806e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008070:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008074:	b25b      	sxtb	r3, r3
 8008076:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800807a:	d103      	bne.n	8008084 <xQueueGenericSend+0x174>
 800807c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800807e:	2200      	movs	r2, #0
 8008080:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008086:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800808a:	b25b      	sxtb	r3, r3
 800808c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008090:	d103      	bne.n	800809a <xQueueGenericSend+0x18a>
 8008092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008094:	2200      	movs	r2, #0
 8008096:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800809a:	f001 ff17 	bl	8009ecc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800809e:	1d3a      	adds	r2, r7, #4
 80080a0:	f107 0314 	add.w	r3, r7, #20
 80080a4:	4611      	mov	r1, r2
 80080a6:	4618      	mov	r0, r3
 80080a8:	f001 f82e 	bl	8009108 <xTaskCheckForTimeOut>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d124      	bne.n	80080fc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80080b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80080b4:	f000 faa6 	bl	8008604 <prvIsQueueFull>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d018      	beq.n	80080f0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80080be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080c0:	3310      	adds	r3, #16
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	4611      	mov	r1, r2
 80080c6:	4618      	mov	r0, r3
 80080c8:	f000 ff2a 	bl	8008f20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80080cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80080ce:	f000 fa31 	bl	8008534 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80080d2:	f000 fd5f 	bl	8008b94 <xTaskResumeAll>
 80080d6:	4603      	mov	r3, r0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	f47f af7c 	bne.w	8007fd6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80080de:	4b0c      	ldr	r3, [pc, #48]	@ (8008110 <xQueueGenericSend+0x200>)
 80080e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080e4:	601a      	str	r2, [r3, #0]
 80080e6:	f3bf 8f4f 	dsb	sy
 80080ea:	f3bf 8f6f 	isb	sy
 80080ee:	e772      	b.n	8007fd6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80080f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80080f2:	f000 fa1f 	bl	8008534 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80080f6:	f000 fd4d 	bl	8008b94 <xTaskResumeAll>
 80080fa:	e76c      	b.n	8007fd6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80080fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80080fe:	f000 fa19 	bl	8008534 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008102:	f000 fd47 	bl	8008b94 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008106:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008108:	4618      	mov	r0, r3
 800810a:	3738      	adds	r7, #56	@ 0x38
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	e000ed04 	.word	0xe000ed04

08008114 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b090      	sub	sp, #64	@ 0x40
 8008118:	af00      	add	r7, sp, #0
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	607a      	str	r2, [r7, #4]
 8008120:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008128:	2b00      	cmp	r3, #0
 800812a:	d10b      	bne.n	8008144 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800812c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008130:	f383 8811 	msr	BASEPRI, r3
 8008134:	f3bf 8f6f 	isb	sy
 8008138:	f3bf 8f4f 	dsb	sy
 800813c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800813e:	bf00      	nop
 8008140:	bf00      	nop
 8008142:	e7fd      	b.n	8008140 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d103      	bne.n	8008152 <xQueueGenericSendFromISR+0x3e>
 800814a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800814c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800814e:	2b00      	cmp	r3, #0
 8008150:	d101      	bne.n	8008156 <xQueueGenericSendFromISR+0x42>
 8008152:	2301      	movs	r3, #1
 8008154:	e000      	b.n	8008158 <xQueueGenericSendFromISR+0x44>
 8008156:	2300      	movs	r3, #0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d10b      	bne.n	8008174 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800815c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008160:	f383 8811 	msr	BASEPRI, r3
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	f3bf 8f4f 	dsb	sy
 800816c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800816e:	bf00      	nop
 8008170:	bf00      	nop
 8008172:	e7fd      	b.n	8008170 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	2b02      	cmp	r3, #2
 8008178:	d103      	bne.n	8008182 <xQueueGenericSendFromISR+0x6e>
 800817a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800817c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800817e:	2b01      	cmp	r3, #1
 8008180:	d101      	bne.n	8008186 <xQueueGenericSendFromISR+0x72>
 8008182:	2301      	movs	r3, #1
 8008184:	e000      	b.n	8008188 <xQueueGenericSendFromISR+0x74>
 8008186:	2300      	movs	r3, #0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d10b      	bne.n	80081a4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800818c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008190:	f383 8811 	msr	BASEPRI, r3
 8008194:	f3bf 8f6f 	isb	sy
 8008198:	f3bf 8f4f 	dsb	sy
 800819c:	623b      	str	r3, [r7, #32]
}
 800819e:	bf00      	nop
 80081a0:	bf00      	nop
 80081a2:	e7fd      	b.n	80081a0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80081a4:	f001 ff40 	bl	800a028 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80081a8:	f3ef 8211 	mrs	r2, BASEPRI
 80081ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081b0:	f383 8811 	msr	BASEPRI, r3
 80081b4:	f3bf 8f6f 	isb	sy
 80081b8:	f3bf 8f4f 	dsb	sy
 80081bc:	61fa      	str	r2, [r7, #28]
 80081be:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80081c0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80081c2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80081c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d302      	bcc.n	80081d6 <xQueueGenericSendFromISR+0xc2>
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	2b02      	cmp	r3, #2
 80081d4:	d12f      	bne.n	8008236 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80081d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80081dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80081e6:	683a      	ldr	r2, [r7, #0]
 80081e8:	68b9      	ldr	r1, [r7, #8]
 80081ea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80081ec:	f000 f912 	bl	8008414 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80081f0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80081f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80081f8:	d112      	bne.n	8008220 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d016      	beq.n	8008230 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008204:	3324      	adds	r3, #36	@ 0x24
 8008206:	4618      	mov	r0, r3
 8008208:	f000 fedc 	bl	8008fc4 <xTaskRemoveFromEventList>
 800820c:	4603      	mov	r3, r0
 800820e:	2b00      	cmp	r3, #0
 8008210:	d00e      	beq.n	8008230 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d00b      	beq.n	8008230 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	601a      	str	r2, [r3, #0]
 800821e:	e007      	b.n	8008230 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008220:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008224:	3301      	adds	r3, #1
 8008226:	b2db      	uxtb	r3, r3
 8008228:	b25a      	sxtb	r2, r3
 800822a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800822c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008230:	2301      	movs	r3, #1
 8008232:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008234:	e001      	b.n	800823a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008236:	2300      	movs	r3, #0
 8008238:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800823a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800823c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008244:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008246:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008248:	4618      	mov	r0, r3
 800824a:	3740      	adds	r7, #64	@ 0x40
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b08c      	sub	sp, #48	@ 0x30
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800825c:	2300      	movs	r3, #0
 800825e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008266:	2b00      	cmp	r3, #0
 8008268:	d10b      	bne.n	8008282 <xQueueReceive+0x32>
	__asm volatile
 800826a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800826e:	f383 8811 	msr	BASEPRI, r3
 8008272:	f3bf 8f6f 	isb	sy
 8008276:	f3bf 8f4f 	dsb	sy
 800827a:	623b      	str	r3, [r7, #32]
}
 800827c:	bf00      	nop
 800827e:	bf00      	nop
 8008280:	e7fd      	b.n	800827e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d103      	bne.n	8008290 <xQueueReceive+0x40>
 8008288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800828a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800828c:	2b00      	cmp	r3, #0
 800828e:	d101      	bne.n	8008294 <xQueueReceive+0x44>
 8008290:	2301      	movs	r3, #1
 8008292:	e000      	b.n	8008296 <xQueueReceive+0x46>
 8008294:	2300      	movs	r3, #0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d10b      	bne.n	80082b2 <xQueueReceive+0x62>
	__asm volatile
 800829a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800829e:	f383 8811 	msr	BASEPRI, r3
 80082a2:	f3bf 8f6f 	isb	sy
 80082a6:	f3bf 8f4f 	dsb	sy
 80082aa:	61fb      	str	r3, [r7, #28]
}
 80082ac:	bf00      	nop
 80082ae:	bf00      	nop
 80082b0:	e7fd      	b.n	80082ae <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80082b2:	f001 f86f 	bl	8009394 <xTaskGetSchedulerState>
 80082b6:	4603      	mov	r3, r0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d102      	bne.n	80082c2 <xQueueReceive+0x72>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d101      	bne.n	80082c6 <xQueueReceive+0x76>
 80082c2:	2301      	movs	r3, #1
 80082c4:	e000      	b.n	80082c8 <xQueueReceive+0x78>
 80082c6:	2300      	movs	r3, #0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d10b      	bne.n	80082e4 <xQueueReceive+0x94>
	__asm volatile
 80082cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082d0:	f383 8811 	msr	BASEPRI, r3
 80082d4:	f3bf 8f6f 	isb	sy
 80082d8:	f3bf 8f4f 	dsb	sy
 80082dc:	61bb      	str	r3, [r7, #24]
}
 80082de:	bf00      	nop
 80082e0:	bf00      	nop
 80082e2:	e7fd      	b.n	80082e0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80082e4:	f001 fdc0 	bl	8009e68 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ec:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80082ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d01f      	beq.n	8008334 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80082f4:	68b9      	ldr	r1, [r7, #8]
 80082f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082f8:	f000 f8f6 	bl	80084e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80082fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082fe:	1e5a      	subs	r2, r3, #1
 8008300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008302:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008306:	691b      	ldr	r3, [r3, #16]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00f      	beq.n	800832c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800830c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800830e:	3310      	adds	r3, #16
 8008310:	4618      	mov	r0, r3
 8008312:	f000 fe57 	bl	8008fc4 <xTaskRemoveFromEventList>
 8008316:	4603      	mov	r3, r0
 8008318:	2b00      	cmp	r3, #0
 800831a:	d007      	beq.n	800832c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800831c:	4b3c      	ldr	r3, [pc, #240]	@ (8008410 <xQueueReceive+0x1c0>)
 800831e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008322:	601a      	str	r2, [r3, #0]
 8008324:	f3bf 8f4f 	dsb	sy
 8008328:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800832c:	f001 fdce 	bl	8009ecc <vPortExitCritical>
				return pdPASS;
 8008330:	2301      	movs	r3, #1
 8008332:	e069      	b.n	8008408 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d103      	bne.n	8008342 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800833a:	f001 fdc7 	bl	8009ecc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800833e:	2300      	movs	r3, #0
 8008340:	e062      	b.n	8008408 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008344:	2b00      	cmp	r3, #0
 8008346:	d106      	bne.n	8008356 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008348:	f107 0310 	add.w	r3, r7, #16
 800834c:	4618      	mov	r0, r3
 800834e:	f000 fec5 	bl	80090dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008352:	2301      	movs	r3, #1
 8008354:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008356:	f001 fdb9 	bl	8009ecc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800835a:	f000 fc0d 	bl	8008b78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800835e:	f001 fd83 	bl	8009e68 <vPortEnterCritical>
 8008362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008364:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008368:	b25b      	sxtb	r3, r3
 800836a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800836e:	d103      	bne.n	8008378 <xQueueReceive+0x128>
 8008370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008372:	2200      	movs	r2, #0
 8008374:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800837a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800837e:	b25b      	sxtb	r3, r3
 8008380:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008384:	d103      	bne.n	800838e <xQueueReceive+0x13e>
 8008386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008388:	2200      	movs	r2, #0
 800838a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800838e:	f001 fd9d 	bl	8009ecc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008392:	1d3a      	adds	r2, r7, #4
 8008394:	f107 0310 	add.w	r3, r7, #16
 8008398:	4611      	mov	r1, r2
 800839a:	4618      	mov	r0, r3
 800839c:	f000 feb4 	bl	8009108 <xTaskCheckForTimeOut>
 80083a0:	4603      	mov	r3, r0
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d123      	bne.n	80083ee <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083a8:	f000 f916 	bl	80085d8 <prvIsQueueEmpty>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d017      	beq.n	80083e2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80083b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083b4:	3324      	adds	r3, #36	@ 0x24
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	4611      	mov	r1, r2
 80083ba:	4618      	mov	r0, r3
 80083bc:	f000 fdb0 	bl	8008f20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80083c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083c2:	f000 f8b7 	bl	8008534 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80083c6:	f000 fbe5 	bl	8008b94 <xTaskResumeAll>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d189      	bne.n	80082e4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80083d0:	4b0f      	ldr	r3, [pc, #60]	@ (8008410 <xQueueReceive+0x1c0>)
 80083d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083d6:	601a      	str	r2, [r3, #0]
 80083d8:	f3bf 8f4f 	dsb	sy
 80083dc:	f3bf 8f6f 	isb	sy
 80083e0:	e780      	b.n	80082e4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80083e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083e4:	f000 f8a6 	bl	8008534 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083e8:	f000 fbd4 	bl	8008b94 <xTaskResumeAll>
 80083ec:	e77a      	b.n	80082e4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80083ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083f0:	f000 f8a0 	bl	8008534 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083f4:	f000 fbce 	bl	8008b94 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083fa:	f000 f8ed 	bl	80085d8 <prvIsQueueEmpty>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	f43f af6f 	beq.w	80082e4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008406:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008408:	4618      	mov	r0, r3
 800840a:	3730      	adds	r7, #48	@ 0x30
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}
 8008410:	e000ed04 	.word	0xe000ed04

08008414 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b086      	sub	sp, #24
 8008418:	af00      	add	r7, sp, #0
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008420:	2300      	movs	r3, #0
 8008422:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008428:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800842e:	2b00      	cmp	r3, #0
 8008430:	d10d      	bne.n	800844e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d14d      	bne.n	80084d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	4618      	mov	r0, r3
 8008440:	f000 ffc6 	bl	80093d0 <xTaskPriorityDisinherit>
 8008444:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2200      	movs	r2, #0
 800844a:	609a      	str	r2, [r3, #8]
 800844c:	e043      	b.n	80084d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d119      	bne.n	8008488 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6858      	ldr	r0, [r3, #4]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800845c:	461a      	mov	r2, r3
 800845e:	68b9      	ldr	r1, [r7, #8]
 8008460:	f011 faa1 	bl	80199a6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	685a      	ldr	r2, [r3, #4]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800846c:	441a      	add	r2, r3
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	685a      	ldr	r2, [r3, #4]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	429a      	cmp	r2, r3
 800847c:	d32b      	bcc.n	80084d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	605a      	str	r2, [r3, #4]
 8008486:	e026      	b.n	80084d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	68d8      	ldr	r0, [r3, #12]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008490:	461a      	mov	r2, r3
 8008492:	68b9      	ldr	r1, [r7, #8]
 8008494:	f011 fa87 	bl	80199a6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	68da      	ldr	r2, [r3, #12]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084a0:	425b      	negs	r3, r3
 80084a2:	441a      	add	r2, r3
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	68da      	ldr	r2, [r3, #12]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d207      	bcs.n	80084c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	689a      	ldr	r2, [r3, #8]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084bc:	425b      	negs	r3, r3
 80084be:	441a      	add	r2, r3
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2b02      	cmp	r3, #2
 80084c8:	d105      	bne.n	80084d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d002      	beq.n	80084d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	3b01      	subs	r3, #1
 80084d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	1c5a      	adds	r2, r3, #1
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80084de:	697b      	ldr	r3, [r7, #20]
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3718      	adds	r7, #24
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d018      	beq.n	800852c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	68da      	ldr	r2, [r3, #12]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008502:	441a      	add	r2, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	68da      	ldr	r2, [r3, #12]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	429a      	cmp	r2, r3
 8008512:	d303      	bcc.n	800851c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	68d9      	ldr	r1, [r3, #12]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008524:	461a      	mov	r2, r3
 8008526:	6838      	ldr	r0, [r7, #0]
 8008528:	f011 fa3d 	bl	80199a6 <memcpy>
	}
}
 800852c:	bf00      	nop
 800852e:	3708      	adds	r7, #8
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800853c:	f001 fc94 	bl	8009e68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008546:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008548:	e011      	b.n	800856e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800854e:	2b00      	cmp	r3, #0
 8008550:	d012      	beq.n	8008578 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	3324      	adds	r3, #36	@ 0x24
 8008556:	4618      	mov	r0, r3
 8008558:	f000 fd34 	bl	8008fc4 <xTaskRemoveFromEventList>
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d001      	beq.n	8008566 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008562:	f000 fe35 	bl	80091d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008566:	7bfb      	ldrb	r3, [r7, #15]
 8008568:	3b01      	subs	r3, #1
 800856a:	b2db      	uxtb	r3, r3
 800856c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800856e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008572:	2b00      	cmp	r3, #0
 8008574:	dce9      	bgt.n	800854a <prvUnlockQueue+0x16>
 8008576:	e000      	b.n	800857a <prvUnlockQueue+0x46>
					break;
 8008578:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	22ff      	movs	r2, #255	@ 0xff
 800857e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008582:	f001 fca3 	bl	8009ecc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008586:	f001 fc6f 	bl	8009e68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008590:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008592:	e011      	b.n	80085b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	691b      	ldr	r3, [r3, #16]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d012      	beq.n	80085c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	3310      	adds	r3, #16
 80085a0:	4618      	mov	r0, r3
 80085a2:	f000 fd0f 	bl	8008fc4 <xTaskRemoveFromEventList>
 80085a6:	4603      	mov	r3, r0
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d001      	beq.n	80085b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80085ac:	f000 fe10 	bl	80091d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80085b0:	7bbb      	ldrb	r3, [r7, #14]
 80085b2:	3b01      	subs	r3, #1
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80085b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	dce9      	bgt.n	8008594 <prvUnlockQueue+0x60>
 80085c0:	e000      	b.n	80085c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80085c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	22ff      	movs	r2, #255	@ 0xff
 80085c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80085cc:	f001 fc7e 	bl	8009ecc <vPortExitCritical>
}
 80085d0:	bf00      	nop
 80085d2:	3710      	adds	r7, #16
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80085e0:	f001 fc42 	bl	8009e68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d102      	bne.n	80085f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80085ec:	2301      	movs	r3, #1
 80085ee:	60fb      	str	r3, [r7, #12]
 80085f0:	e001      	b.n	80085f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80085f2:	2300      	movs	r3, #0
 80085f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80085f6:	f001 fc69 	bl	8009ecc <vPortExitCritical>

	return xReturn;
 80085fa:	68fb      	ldr	r3, [r7, #12]
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3710      	adds	r7, #16
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b084      	sub	sp, #16
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800860c:	f001 fc2c 	bl	8009e68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008618:	429a      	cmp	r2, r3
 800861a:	d102      	bne.n	8008622 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800861c:	2301      	movs	r3, #1
 800861e:	60fb      	str	r3, [r7, #12]
 8008620:	e001      	b.n	8008626 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008622:	2300      	movs	r3, #0
 8008624:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008626:	f001 fc51 	bl	8009ecc <vPortExitCritical>

	return xReturn;
 800862a:	68fb      	ldr	r3, [r7, #12]
}
 800862c:	4618      	mov	r0, r3
 800862e:	3710      	adds	r7, #16
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008634:	b480      	push	{r7}
 8008636:	b085      	sub	sp, #20
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800863e:	2300      	movs	r3, #0
 8008640:	60fb      	str	r3, [r7, #12]
 8008642:	e014      	b.n	800866e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008644:	4a0f      	ldr	r2, [pc, #60]	@ (8008684 <vQueueAddToRegistry+0x50>)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d10b      	bne.n	8008668 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008650:	490c      	ldr	r1, [pc, #48]	@ (8008684 <vQueueAddToRegistry+0x50>)
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	683a      	ldr	r2, [r7, #0]
 8008656:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800865a:	4a0a      	ldr	r2, [pc, #40]	@ (8008684 <vQueueAddToRegistry+0x50>)
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	00db      	lsls	r3, r3, #3
 8008660:	4413      	add	r3, r2
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008666:	e006      	b.n	8008676 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	3301      	adds	r3, #1
 800866c:	60fb      	str	r3, [r7, #12]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2b07      	cmp	r3, #7
 8008672:	d9e7      	bls.n	8008644 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008674:	bf00      	nop
 8008676:	bf00      	nop
 8008678:	3714      	adds	r7, #20
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr
 8008682:	bf00      	nop
 8008684:	20008b80 	.word	0x20008b80

08008688 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008688:	b580      	push	{r7, lr}
 800868a:	b086      	sub	sp, #24
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008698:	f001 fbe6 	bl	8009e68 <vPortEnterCritical>
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80086a2:	b25b      	sxtb	r3, r3
 80086a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80086a8:	d103      	bne.n	80086b2 <vQueueWaitForMessageRestricted+0x2a>
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	2200      	movs	r2, #0
 80086ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80086b8:	b25b      	sxtb	r3, r3
 80086ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80086be:	d103      	bne.n	80086c8 <vQueueWaitForMessageRestricted+0x40>
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80086c8:	f001 fc00 	bl	8009ecc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d106      	bne.n	80086e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	3324      	adds	r3, #36	@ 0x24
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	68b9      	ldr	r1, [r7, #8]
 80086dc:	4618      	mov	r0, r3
 80086de:	f000 fc45 	bl	8008f6c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80086e2:	6978      	ldr	r0, [r7, #20]
 80086e4:	f7ff ff26 	bl	8008534 <prvUnlockQueue>
	}
 80086e8:	bf00      	nop
 80086ea:	3718      	adds	r7, #24
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b08e      	sub	sp, #56	@ 0x38
 80086f4:	af04      	add	r7, sp, #16
 80086f6:	60f8      	str	r0, [r7, #12]
 80086f8:	60b9      	str	r1, [r7, #8]
 80086fa:	607a      	str	r2, [r7, #4]
 80086fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80086fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008700:	2b00      	cmp	r3, #0
 8008702:	d10b      	bne.n	800871c <xTaskCreateStatic+0x2c>
	__asm volatile
 8008704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008708:	f383 8811 	msr	BASEPRI, r3
 800870c:	f3bf 8f6f 	isb	sy
 8008710:	f3bf 8f4f 	dsb	sy
 8008714:	623b      	str	r3, [r7, #32]
}
 8008716:	bf00      	nop
 8008718:	bf00      	nop
 800871a:	e7fd      	b.n	8008718 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800871c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800871e:	2b00      	cmp	r3, #0
 8008720:	d10b      	bne.n	800873a <xTaskCreateStatic+0x4a>
	__asm volatile
 8008722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008726:	f383 8811 	msr	BASEPRI, r3
 800872a:	f3bf 8f6f 	isb	sy
 800872e:	f3bf 8f4f 	dsb	sy
 8008732:	61fb      	str	r3, [r7, #28]
}
 8008734:	bf00      	nop
 8008736:	bf00      	nop
 8008738:	e7fd      	b.n	8008736 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800873a:	235c      	movs	r3, #92	@ 0x5c
 800873c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	2b5c      	cmp	r3, #92	@ 0x5c
 8008742:	d00b      	beq.n	800875c <xTaskCreateStatic+0x6c>
	__asm volatile
 8008744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008748:	f383 8811 	msr	BASEPRI, r3
 800874c:	f3bf 8f6f 	isb	sy
 8008750:	f3bf 8f4f 	dsb	sy
 8008754:	61bb      	str	r3, [r7, #24]
}
 8008756:	bf00      	nop
 8008758:	bf00      	nop
 800875a:	e7fd      	b.n	8008758 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800875c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800875e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008760:	2b00      	cmp	r3, #0
 8008762:	d01e      	beq.n	80087a2 <xTaskCreateStatic+0xb2>
 8008764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008766:	2b00      	cmp	r3, #0
 8008768:	d01b      	beq.n	80087a2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800876a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800876c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800876e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008770:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008772:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008776:	2202      	movs	r2, #2
 8008778:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800877c:	2300      	movs	r3, #0
 800877e:	9303      	str	r3, [sp, #12]
 8008780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008782:	9302      	str	r3, [sp, #8]
 8008784:	f107 0314 	add.w	r3, r7, #20
 8008788:	9301      	str	r3, [sp, #4]
 800878a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800878c:	9300      	str	r3, [sp, #0]
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	68b9      	ldr	r1, [r7, #8]
 8008794:	68f8      	ldr	r0, [r7, #12]
 8008796:	f000 f850 	bl	800883a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800879a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800879c:	f000 f8de 	bl	800895c <prvAddNewTaskToReadyList>
 80087a0:	e001      	b.n	80087a6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80087a2:	2300      	movs	r3, #0
 80087a4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80087a6:	697b      	ldr	r3, [r7, #20]
	}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3728      	adds	r7, #40	@ 0x28
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b08c      	sub	sp, #48	@ 0x30
 80087b4:	af04      	add	r7, sp, #16
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	603b      	str	r3, [r7, #0]
 80087bc:	4613      	mov	r3, r2
 80087be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80087c0:	88fb      	ldrh	r3, [r7, #6]
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	4618      	mov	r0, r3
 80087c6:	f001 fc71 	bl	800a0ac <pvPortMalloc>
 80087ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d00e      	beq.n	80087f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80087d2:	205c      	movs	r0, #92	@ 0x5c
 80087d4:	f001 fc6a 	bl	800a0ac <pvPortMalloc>
 80087d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80087da:	69fb      	ldr	r3, [r7, #28]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d003      	beq.n	80087e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	697a      	ldr	r2, [r7, #20]
 80087e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80087e6:	e005      	b.n	80087f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80087e8:	6978      	ldr	r0, [r7, #20]
 80087ea:	f001 fd2d 	bl	800a248 <vPortFree>
 80087ee:	e001      	b.n	80087f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80087f0:	2300      	movs	r3, #0
 80087f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80087f4:	69fb      	ldr	r3, [r7, #28]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d017      	beq.n	800882a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	2200      	movs	r2, #0
 80087fe:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008802:	88fa      	ldrh	r2, [r7, #6]
 8008804:	2300      	movs	r3, #0
 8008806:	9303      	str	r3, [sp, #12]
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	9302      	str	r3, [sp, #8]
 800880c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800880e:	9301      	str	r3, [sp, #4]
 8008810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008812:	9300      	str	r3, [sp, #0]
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	68b9      	ldr	r1, [r7, #8]
 8008818:	68f8      	ldr	r0, [r7, #12]
 800881a:	f000 f80e 	bl	800883a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800881e:	69f8      	ldr	r0, [r7, #28]
 8008820:	f000 f89c 	bl	800895c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008824:	2301      	movs	r3, #1
 8008826:	61bb      	str	r3, [r7, #24]
 8008828:	e002      	b.n	8008830 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800882a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800882e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008830:	69bb      	ldr	r3, [r7, #24]
	}
 8008832:	4618      	mov	r0, r3
 8008834:	3720      	adds	r7, #32
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b088      	sub	sp, #32
 800883e:	af00      	add	r7, sp, #0
 8008840:	60f8      	str	r0, [r7, #12]
 8008842:	60b9      	str	r1, [r7, #8]
 8008844:	607a      	str	r2, [r7, #4]
 8008846:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800884a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	461a      	mov	r2, r3
 8008852:	21a5      	movs	r1, #165	@ 0xa5
 8008854:	f010 ffde 	bl	8019814 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800885a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008862:	3b01      	subs	r3, #1
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	4413      	add	r3, r2
 8008868:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	f023 0307 	bic.w	r3, r3, #7
 8008870:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008872:	69bb      	ldr	r3, [r7, #24]
 8008874:	f003 0307 	and.w	r3, r3, #7
 8008878:	2b00      	cmp	r3, #0
 800887a:	d00b      	beq.n	8008894 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800887c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008880:	f383 8811 	msr	BASEPRI, r3
 8008884:	f3bf 8f6f 	isb	sy
 8008888:	f3bf 8f4f 	dsb	sy
 800888c:	617b      	str	r3, [r7, #20]
}
 800888e:	bf00      	nop
 8008890:	bf00      	nop
 8008892:	e7fd      	b.n	8008890 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d01f      	beq.n	80088da <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800889a:	2300      	movs	r3, #0
 800889c:	61fb      	str	r3, [r7, #28]
 800889e:	e012      	b.n	80088c6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80088a0:	68ba      	ldr	r2, [r7, #8]
 80088a2:	69fb      	ldr	r3, [r7, #28]
 80088a4:	4413      	add	r3, r2
 80088a6:	7819      	ldrb	r1, [r3, #0]
 80088a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088aa:	69fb      	ldr	r3, [r7, #28]
 80088ac:	4413      	add	r3, r2
 80088ae:	3334      	adds	r3, #52	@ 0x34
 80088b0:	460a      	mov	r2, r1
 80088b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80088b4:	68ba      	ldr	r2, [r7, #8]
 80088b6:	69fb      	ldr	r3, [r7, #28]
 80088b8:	4413      	add	r3, r2
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d006      	beq.n	80088ce <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80088c0:	69fb      	ldr	r3, [r7, #28]
 80088c2:	3301      	adds	r3, #1
 80088c4:	61fb      	str	r3, [r7, #28]
 80088c6:	69fb      	ldr	r3, [r7, #28]
 80088c8:	2b0f      	cmp	r3, #15
 80088ca:	d9e9      	bls.n	80088a0 <prvInitialiseNewTask+0x66>
 80088cc:	e000      	b.n	80088d0 <prvInitialiseNewTask+0x96>
			{
				break;
 80088ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80088d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d2:	2200      	movs	r2, #0
 80088d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80088d8:	e003      	b.n	80088e2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80088da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088dc:	2200      	movs	r2, #0
 80088de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80088e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088e4:	2b37      	cmp	r3, #55	@ 0x37
 80088e6:	d901      	bls.n	80088ec <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80088e8:	2337      	movs	r3, #55	@ 0x37
 80088ea:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80088ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80088f0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80088f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80088f6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80088f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088fa:	2200      	movs	r2, #0
 80088fc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80088fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008900:	3304      	adds	r3, #4
 8008902:	4618      	mov	r0, r3
 8008904:	f7ff f966 	bl	8007bd4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800890a:	3318      	adds	r3, #24
 800890c:	4618      	mov	r0, r3
 800890e:	f7ff f961 	bl	8007bd4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008914:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008916:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800891a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800891e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008920:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008924:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008926:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800892a:	2200      	movs	r2, #0
 800892c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800892e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008930:	2200      	movs	r2, #0
 8008932:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008936:	683a      	ldr	r2, [r7, #0]
 8008938:	68f9      	ldr	r1, [r7, #12]
 800893a:	69b8      	ldr	r0, [r7, #24]
 800893c:	f001 f966 	bl	8009c0c <pxPortInitialiseStack>
 8008940:	4602      	mov	r2, r0
 8008942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008944:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008948:	2b00      	cmp	r3, #0
 800894a:	d002      	beq.n	8008952 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800894c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800894e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008950:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008952:	bf00      	nop
 8008954:	3720      	adds	r7, #32
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
	...

0800895c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008964:	f001 fa80 	bl	8009e68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008968:	4b2d      	ldr	r3, [pc, #180]	@ (8008a20 <prvAddNewTaskToReadyList+0xc4>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	3301      	adds	r3, #1
 800896e:	4a2c      	ldr	r2, [pc, #176]	@ (8008a20 <prvAddNewTaskToReadyList+0xc4>)
 8008970:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008972:	4b2c      	ldr	r3, [pc, #176]	@ (8008a24 <prvAddNewTaskToReadyList+0xc8>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d109      	bne.n	800898e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800897a:	4a2a      	ldr	r2, [pc, #168]	@ (8008a24 <prvAddNewTaskToReadyList+0xc8>)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008980:	4b27      	ldr	r3, [pc, #156]	@ (8008a20 <prvAddNewTaskToReadyList+0xc4>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	2b01      	cmp	r3, #1
 8008986:	d110      	bne.n	80089aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008988:	f000 fc46 	bl	8009218 <prvInitialiseTaskLists>
 800898c:	e00d      	b.n	80089aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800898e:	4b26      	ldr	r3, [pc, #152]	@ (8008a28 <prvAddNewTaskToReadyList+0xcc>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d109      	bne.n	80089aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008996:	4b23      	ldr	r3, [pc, #140]	@ (8008a24 <prvAddNewTaskToReadyList+0xc8>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d802      	bhi.n	80089aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80089a4:	4a1f      	ldr	r2, [pc, #124]	@ (8008a24 <prvAddNewTaskToReadyList+0xc8>)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80089aa:	4b20      	ldr	r3, [pc, #128]	@ (8008a2c <prvAddNewTaskToReadyList+0xd0>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	3301      	adds	r3, #1
 80089b0:	4a1e      	ldr	r2, [pc, #120]	@ (8008a2c <prvAddNewTaskToReadyList+0xd0>)
 80089b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80089b4:	4b1d      	ldr	r3, [pc, #116]	@ (8008a2c <prvAddNewTaskToReadyList+0xd0>)
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089c0:	4b1b      	ldr	r3, [pc, #108]	@ (8008a30 <prvAddNewTaskToReadyList+0xd4>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d903      	bls.n	80089d0 <prvAddNewTaskToReadyList+0x74>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089cc:	4a18      	ldr	r2, [pc, #96]	@ (8008a30 <prvAddNewTaskToReadyList+0xd4>)
 80089ce:	6013      	str	r3, [r2, #0]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089d4:	4613      	mov	r3, r2
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	4413      	add	r3, r2
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	4a15      	ldr	r2, [pc, #84]	@ (8008a34 <prvAddNewTaskToReadyList+0xd8>)
 80089de:	441a      	add	r2, r3
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	3304      	adds	r3, #4
 80089e4:	4619      	mov	r1, r3
 80089e6:	4610      	mov	r0, r2
 80089e8:	f7ff f901 	bl	8007bee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80089ec:	f001 fa6e 	bl	8009ecc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80089f0:	4b0d      	ldr	r3, [pc, #52]	@ (8008a28 <prvAddNewTaskToReadyList+0xcc>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d00e      	beq.n	8008a16 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80089f8:	4b0a      	ldr	r3, [pc, #40]	@ (8008a24 <prvAddNewTaskToReadyList+0xc8>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d207      	bcs.n	8008a16 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008a06:	4b0c      	ldr	r3, [pc, #48]	@ (8008a38 <prvAddNewTaskToReadyList+0xdc>)
 8008a08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a0c:	601a      	str	r2, [r3, #0]
 8008a0e:	f3bf 8f4f 	dsb	sy
 8008a12:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a16:	bf00      	nop
 8008a18:	3708      	adds	r7, #8
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	bf00      	nop
 8008a20:	20009094 	.word	0x20009094
 8008a24:	20008bc0 	.word	0x20008bc0
 8008a28:	200090a0 	.word	0x200090a0
 8008a2c:	200090b0 	.word	0x200090b0
 8008a30:	2000909c 	.word	0x2000909c
 8008a34:	20008bc4 	.word	0x20008bc4
 8008a38:	e000ed04 	.word	0xe000ed04

08008a3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008a44:	2300      	movs	r3, #0
 8008a46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d018      	beq.n	8008a80 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008a4e:	4b14      	ldr	r3, [pc, #80]	@ (8008aa0 <vTaskDelay+0x64>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d00b      	beq.n	8008a6e <vTaskDelay+0x32>
	__asm volatile
 8008a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a5a:	f383 8811 	msr	BASEPRI, r3
 8008a5e:	f3bf 8f6f 	isb	sy
 8008a62:	f3bf 8f4f 	dsb	sy
 8008a66:	60bb      	str	r3, [r7, #8]
}
 8008a68:	bf00      	nop
 8008a6a:	bf00      	nop
 8008a6c:	e7fd      	b.n	8008a6a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008a6e:	f000 f883 	bl	8008b78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008a72:	2100      	movs	r1, #0
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 fd1b 	bl	80094b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008a7a:	f000 f88b 	bl	8008b94 <xTaskResumeAll>
 8008a7e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d107      	bne.n	8008a96 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008a86:	4b07      	ldr	r3, [pc, #28]	@ (8008aa4 <vTaskDelay+0x68>)
 8008a88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a8c:	601a      	str	r2, [r3, #0]
 8008a8e:	f3bf 8f4f 	dsb	sy
 8008a92:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a96:	bf00      	nop
 8008a98:	3710      	adds	r7, #16
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	200090bc 	.word	0x200090bc
 8008aa4:	e000ed04 	.word	0xe000ed04

08008aa8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b08a      	sub	sp, #40	@ 0x28
 8008aac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008ab6:	463a      	mov	r2, r7
 8008ab8:	1d39      	adds	r1, r7, #4
 8008aba:	f107 0308 	add.w	r3, r7, #8
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7ff f834 	bl	8007b2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008ac4:	6839      	ldr	r1, [r7, #0]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	68ba      	ldr	r2, [r7, #8]
 8008aca:	9202      	str	r2, [sp, #8]
 8008acc:	9301      	str	r3, [sp, #4]
 8008ace:	2300      	movs	r3, #0
 8008ad0:	9300      	str	r3, [sp, #0]
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	460a      	mov	r2, r1
 8008ad6:	4922      	ldr	r1, [pc, #136]	@ (8008b60 <vTaskStartScheduler+0xb8>)
 8008ad8:	4822      	ldr	r0, [pc, #136]	@ (8008b64 <vTaskStartScheduler+0xbc>)
 8008ada:	f7ff fe09 	bl	80086f0 <xTaskCreateStatic>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	4a21      	ldr	r2, [pc, #132]	@ (8008b68 <vTaskStartScheduler+0xc0>)
 8008ae2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008ae4:	4b20      	ldr	r3, [pc, #128]	@ (8008b68 <vTaskStartScheduler+0xc0>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d002      	beq.n	8008af2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008aec:	2301      	movs	r3, #1
 8008aee:	617b      	str	r3, [r7, #20]
 8008af0:	e001      	b.n	8008af6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008af2:	2300      	movs	r3, #0
 8008af4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d102      	bne.n	8008b02 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008afc:	f000 fd2c 	bl	8009558 <xTimerCreateTimerTask>
 8008b00:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d116      	bne.n	8008b36 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b0c:	f383 8811 	msr	BASEPRI, r3
 8008b10:	f3bf 8f6f 	isb	sy
 8008b14:	f3bf 8f4f 	dsb	sy
 8008b18:	613b      	str	r3, [r7, #16]
}
 8008b1a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008b1c:	4b13      	ldr	r3, [pc, #76]	@ (8008b6c <vTaskStartScheduler+0xc4>)
 8008b1e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008b22:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008b24:	4b12      	ldr	r3, [pc, #72]	@ (8008b70 <vTaskStartScheduler+0xc8>)
 8008b26:	2201      	movs	r2, #1
 8008b28:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008b2a:	4b12      	ldr	r3, [pc, #72]	@ (8008b74 <vTaskStartScheduler+0xcc>)
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008b30:	f001 f8f6 	bl	8009d20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008b34:	e00f      	b.n	8008b56 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b3c:	d10b      	bne.n	8008b56 <vTaskStartScheduler+0xae>
	__asm volatile
 8008b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b42:	f383 8811 	msr	BASEPRI, r3
 8008b46:	f3bf 8f6f 	isb	sy
 8008b4a:	f3bf 8f4f 	dsb	sy
 8008b4e:	60fb      	str	r3, [r7, #12]
}
 8008b50:	bf00      	nop
 8008b52:	bf00      	nop
 8008b54:	e7fd      	b.n	8008b52 <vTaskStartScheduler+0xaa>
}
 8008b56:	bf00      	nop
 8008b58:	3718      	adds	r7, #24
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	bf00      	nop
 8008b60:	0801a6c4 	.word	0x0801a6c4
 8008b64:	080091e9 	.word	0x080091e9
 8008b68:	200090b8 	.word	0x200090b8
 8008b6c:	200090b4 	.word	0x200090b4
 8008b70:	200090a0 	.word	0x200090a0
 8008b74:	20009098 	.word	0x20009098

08008b78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008b78:	b480      	push	{r7}
 8008b7a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008b7c:	4b04      	ldr	r3, [pc, #16]	@ (8008b90 <vTaskSuspendAll+0x18>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	3301      	adds	r3, #1
 8008b82:	4a03      	ldr	r2, [pc, #12]	@ (8008b90 <vTaskSuspendAll+0x18>)
 8008b84:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008b86:	bf00      	nop
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr
 8008b90:	200090bc 	.word	0x200090bc

08008b94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008ba2:	4b42      	ldr	r3, [pc, #264]	@ (8008cac <xTaskResumeAll+0x118>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d10b      	bne.n	8008bc2 <xTaskResumeAll+0x2e>
	__asm volatile
 8008baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bae:	f383 8811 	msr	BASEPRI, r3
 8008bb2:	f3bf 8f6f 	isb	sy
 8008bb6:	f3bf 8f4f 	dsb	sy
 8008bba:	603b      	str	r3, [r7, #0]
}
 8008bbc:	bf00      	nop
 8008bbe:	bf00      	nop
 8008bc0:	e7fd      	b.n	8008bbe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008bc2:	f001 f951 	bl	8009e68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008bc6:	4b39      	ldr	r3, [pc, #228]	@ (8008cac <xTaskResumeAll+0x118>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	3b01      	subs	r3, #1
 8008bcc:	4a37      	ldr	r2, [pc, #220]	@ (8008cac <xTaskResumeAll+0x118>)
 8008bce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bd0:	4b36      	ldr	r3, [pc, #216]	@ (8008cac <xTaskResumeAll+0x118>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d162      	bne.n	8008c9e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008bd8:	4b35      	ldr	r3, [pc, #212]	@ (8008cb0 <xTaskResumeAll+0x11c>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d05e      	beq.n	8008c9e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008be0:	e02f      	b.n	8008c42 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008be2:	4b34      	ldr	r3, [pc, #208]	@ (8008cb4 <xTaskResumeAll+0x120>)
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	68db      	ldr	r3, [r3, #12]
 8008be8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	3318      	adds	r3, #24
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7ff f85a 	bl	8007ca8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	3304      	adds	r3, #4
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f7ff f855 	bl	8007ca8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c02:	4b2d      	ldr	r3, [pc, #180]	@ (8008cb8 <xTaskResumeAll+0x124>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d903      	bls.n	8008c12 <xTaskResumeAll+0x7e>
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c0e:	4a2a      	ldr	r2, [pc, #168]	@ (8008cb8 <xTaskResumeAll+0x124>)
 8008c10:	6013      	str	r3, [r2, #0]
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c16:	4613      	mov	r3, r2
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	4413      	add	r3, r2
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	4a27      	ldr	r2, [pc, #156]	@ (8008cbc <xTaskResumeAll+0x128>)
 8008c20:	441a      	add	r2, r3
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	3304      	adds	r3, #4
 8008c26:	4619      	mov	r1, r3
 8008c28:	4610      	mov	r0, r2
 8008c2a:	f7fe ffe0 	bl	8007bee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c32:	4b23      	ldr	r3, [pc, #140]	@ (8008cc0 <xTaskResumeAll+0x12c>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d302      	bcc.n	8008c42 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008c3c:	4b21      	ldr	r3, [pc, #132]	@ (8008cc4 <xTaskResumeAll+0x130>)
 8008c3e:	2201      	movs	r2, #1
 8008c40:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c42:	4b1c      	ldr	r3, [pc, #112]	@ (8008cb4 <xTaskResumeAll+0x120>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d1cb      	bne.n	8008be2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d001      	beq.n	8008c54 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008c50:	f000 fb80 	bl	8009354 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008c54:	4b1c      	ldr	r3, [pc, #112]	@ (8008cc8 <xTaskResumeAll+0x134>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d010      	beq.n	8008c82 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008c60:	f000 f846 	bl	8008cf0 <xTaskIncrementTick>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d002      	beq.n	8008c70 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008c6a:	4b16      	ldr	r3, [pc, #88]	@ (8008cc4 <xTaskResumeAll+0x130>)
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	3b01      	subs	r3, #1
 8008c74:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d1f1      	bne.n	8008c60 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008c7c:	4b12      	ldr	r3, [pc, #72]	@ (8008cc8 <xTaskResumeAll+0x134>)
 8008c7e:	2200      	movs	r2, #0
 8008c80:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008c82:	4b10      	ldr	r3, [pc, #64]	@ (8008cc4 <xTaskResumeAll+0x130>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d009      	beq.n	8008c9e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8008ccc <xTaskResumeAll+0x138>)
 8008c90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c94:	601a      	str	r2, [r3, #0]
 8008c96:	f3bf 8f4f 	dsb	sy
 8008c9a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c9e:	f001 f915 	bl	8009ecc <vPortExitCritical>

	return xAlreadyYielded;
 8008ca2:	68bb      	ldr	r3, [r7, #8]
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3710      	adds	r7, #16
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	200090bc 	.word	0x200090bc
 8008cb0:	20009094 	.word	0x20009094
 8008cb4:	20009054 	.word	0x20009054
 8008cb8:	2000909c 	.word	0x2000909c
 8008cbc:	20008bc4 	.word	0x20008bc4
 8008cc0:	20008bc0 	.word	0x20008bc0
 8008cc4:	200090a8 	.word	0x200090a8
 8008cc8:	200090a4 	.word	0x200090a4
 8008ccc:	e000ed04 	.word	0xe000ed04

08008cd0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b083      	sub	sp, #12
 8008cd4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008cd6:	4b05      	ldr	r3, [pc, #20]	@ (8008cec <xTaskGetTickCount+0x1c>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008cdc:	687b      	ldr	r3, [r7, #4]
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	370c      	adds	r7, #12
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr
 8008cea:	bf00      	nop
 8008cec:	20009098 	.word	0x20009098

08008cf0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b086      	sub	sp, #24
 8008cf4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cfa:	4b4f      	ldr	r3, [pc, #316]	@ (8008e38 <xTaskIncrementTick+0x148>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	f040 8090 	bne.w	8008e24 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008d04:	4b4d      	ldr	r3, [pc, #308]	@ (8008e3c <xTaskIncrementTick+0x14c>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	3301      	adds	r3, #1
 8008d0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008d0c:	4a4b      	ldr	r2, [pc, #300]	@ (8008e3c <xTaskIncrementTick+0x14c>)
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d121      	bne.n	8008d5c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008d18:	4b49      	ldr	r3, [pc, #292]	@ (8008e40 <xTaskIncrementTick+0x150>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d00b      	beq.n	8008d3a <xTaskIncrementTick+0x4a>
	__asm volatile
 8008d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d26:	f383 8811 	msr	BASEPRI, r3
 8008d2a:	f3bf 8f6f 	isb	sy
 8008d2e:	f3bf 8f4f 	dsb	sy
 8008d32:	603b      	str	r3, [r7, #0]
}
 8008d34:	bf00      	nop
 8008d36:	bf00      	nop
 8008d38:	e7fd      	b.n	8008d36 <xTaskIncrementTick+0x46>
 8008d3a:	4b41      	ldr	r3, [pc, #260]	@ (8008e40 <xTaskIncrementTick+0x150>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	60fb      	str	r3, [r7, #12]
 8008d40:	4b40      	ldr	r3, [pc, #256]	@ (8008e44 <xTaskIncrementTick+0x154>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a3e      	ldr	r2, [pc, #248]	@ (8008e40 <xTaskIncrementTick+0x150>)
 8008d46:	6013      	str	r3, [r2, #0]
 8008d48:	4a3e      	ldr	r2, [pc, #248]	@ (8008e44 <xTaskIncrementTick+0x154>)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	6013      	str	r3, [r2, #0]
 8008d4e:	4b3e      	ldr	r3, [pc, #248]	@ (8008e48 <xTaskIncrementTick+0x158>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	3301      	adds	r3, #1
 8008d54:	4a3c      	ldr	r2, [pc, #240]	@ (8008e48 <xTaskIncrementTick+0x158>)
 8008d56:	6013      	str	r3, [r2, #0]
 8008d58:	f000 fafc 	bl	8009354 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008d5c:	4b3b      	ldr	r3, [pc, #236]	@ (8008e4c <xTaskIncrementTick+0x15c>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	693a      	ldr	r2, [r7, #16]
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d349      	bcc.n	8008dfa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d66:	4b36      	ldr	r3, [pc, #216]	@ (8008e40 <xTaskIncrementTick+0x150>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d104      	bne.n	8008d7a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d70:	4b36      	ldr	r3, [pc, #216]	@ (8008e4c <xTaskIncrementTick+0x15c>)
 8008d72:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008d76:	601a      	str	r2, [r3, #0]
					break;
 8008d78:	e03f      	b.n	8008dfa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d7a:	4b31      	ldr	r3, [pc, #196]	@ (8008e40 <xTaskIncrementTick+0x150>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	68db      	ldr	r3, [r3, #12]
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008d8a:	693a      	ldr	r2, [r7, #16]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d203      	bcs.n	8008d9a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008d92:	4a2e      	ldr	r2, [pc, #184]	@ (8008e4c <xTaskIncrementTick+0x15c>)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008d98:	e02f      	b.n	8008dfa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	3304      	adds	r3, #4
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7fe ff82 	bl	8007ca8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d004      	beq.n	8008db6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	3318      	adds	r3, #24
 8008db0:	4618      	mov	r0, r3
 8008db2:	f7fe ff79 	bl	8007ca8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dba:	4b25      	ldr	r3, [pc, #148]	@ (8008e50 <xTaskIncrementTick+0x160>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d903      	bls.n	8008dca <xTaskIncrementTick+0xda>
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dc6:	4a22      	ldr	r2, [pc, #136]	@ (8008e50 <xTaskIncrementTick+0x160>)
 8008dc8:	6013      	str	r3, [r2, #0]
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dce:	4613      	mov	r3, r2
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	4413      	add	r3, r2
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	4a1f      	ldr	r2, [pc, #124]	@ (8008e54 <xTaskIncrementTick+0x164>)
 8008dd8:	441a      	add	r2, r3
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	3304      	adds	r3, #4
 8008dde:	4619      	mov	r1, r3
 8008de0:	4610      	mov	r0, r2
 8008de2:	f7fe ff04 	bl	8007bee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dea:	4b1b      	ldr	r3, [pc, #108]	@ (8008e58 <xTaskIncrementTick+0x168>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d3b8      	bcc.n	8008d66 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008df4:	2301      	movs	r3, #1
 8008df6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008df8:	e7b5      	b.n	8008d66 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008dfa:	4b17      	ldr	r3, [pc, #92]	@ (8008e58 <xTaskIncrementTick+0x168>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e00:	4914      	ldr	r1, [pc, #80]	@ (8008e54 <xTaskIncrementTick+0x164>)
 8008e02:	4613      	mov	r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	4413      	add	r3, r2
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	440b      	add	r3, r1
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d901      	bls.n	8008e16 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008e12:	2301      	movs	r3, #1
 8008e14:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008e16:	4b11      	ldr	r3, [pc, #68]	@ (8008e5c <xTaskIncrementTick+0x16c>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d007      	beq.n	8008e2e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	617b      	str	r3, [r7, #20]
 8008e22:	e004      	b.n	8008e2e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008e24:	4b0e      	ldr	r3, [pc, #56]	@ (8008e60 <xTaskIncrementTick+0x170>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	3301      	adds	r3, #1
 8008e2a:	4a0d      	ldr	r2, [pc, #52]	@ (8008e60 <xTaskIncrementTick+0x170>)
 8008e2c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008e2e:	697b      	ldr	r3, [r7, #20]
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3718      	adds	r7, #24
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	200090bc 	.word	0x200090bc
 8008e3c:	20009098 	.word	0x20009098
 8008e40:	2000904c 	.word	0x2000904c
 8008e44:	20009050 	.word	0x20009050
 8008e48:	200090ac 	.word	0x200090ac
 8008e4c:	200090b4 	.word	0x200090b4
 8008e50:	2000909c 	.word	0x2000909c
 8008e54:	20008bc4 	.word	0x20008bc4
 8008e58:	20008bc0 	.word	0x20008bc0
 8008e5c:	200090a8 	.word	0x200090a8
 8008e60:	200090a4 	.word	0x200090a4

08008e64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008e64:	b480      	push	{r7}
 8008e66:	b085      	sub	sp, #20
 8008e68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008e6a:	4b28      	ldr	r3, [pc, #160]	@ (8008f0c <vTaskSwitchContext+0xa8>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d003      	beq.n	8008e7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008e72:	4b27      	ldr	r3, [pc, #156]	@ (8008f10 <vTaskSwitchContext+0xac>)
 8008e74:	2201      	movs	r2, #1
 8008e76:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008e78:	e042      	b.n	8008f00 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008e7a:	4b25      	ldr	r3, [pc, #148]	@ (8008f10 <vTaskSwitchContext+0xac>)
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e80:	4b24      	ldr	r3, [pc, #144]	@ (8008f14 <vTaskSwitchContext+0xb0>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	60fb      	str	r3, [r7, #12]
 8008e86:	e011      	b.n	8008eac <vTaskSwitchContext+0x48>
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d10b      	bne.n	8008ea6 <vTaskSwitchContext+0x42>
	__asm volatile
 8008e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e92:	f383 8811 	msr	BASEPRI, r3
 8008e96:	f3bf 8f6f 	isb	sy
 8008e9a:	f3bf 8f4f 	dsb	sy
 8008e9e:	607b      	str	r3, [r7, #4]
}
 8008ea0:	bf00      	nop
 8008ea2:	bf00      	nop
 8008ea4:	e7fd      	b.n	8008ea2 <vTaskSwitchContext+0x3e>
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	3b01      	subs	r3, #1
 8008eaa:	60fb      	str	r3, [r7, #12]
 8008eac:	491a      	ldr	r1, [pc, #104]	@ (8008f18 <vTaskSwitchContext+0xb4>)
 8008eae:	68fa      	ldr	r2, [r7, #12]
 8008eb0:	4613      	mov	r3, r2
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	4413      	add	r3, r2
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	440b      	add	r3, r1
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d0e3      	beq.n	8008e88 <vTaskSwitchContext+0x24>
 8008ec0:	68fa      	ldr	r2, [r7, #12]
 8008ec2:	4613      	mov	r3, r2
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	4413      	add	r3, r2
 8008ec8:	009b      	lsls	r3, r3, #2
 8008eca:	4a13      	ldr	r2, [pc, #76]	@ (8008f18 <vTaskSwitchContext+0xb4>)
 8008ecc:	4413      	add	r3, r2
 8008ece:	60bb      	str	r3, [r7, #8]
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	685a      	ldr	r2, [r3, #4]
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	605a      	str	r2, [r3, #4]
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	685a      	ldr	r2, [r3, #4]
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	3308      	adds	r3, #8
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d104      	bne.n	8008ef0 <vTaskSwitchContext+0x8c>
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	685a      	ldr	r2, [r3, #4]
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	605a      	str	r2, [r3, #4]
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	4a09      	ldr	r2, [pc, #36]	@ (8008f1c <vTaskSwitchContext+0xb8>)
 8008ef8:	6013      	str	r3, [r2, #0]
 8008efa:	4a06      	ldr	r2, [pc, #24]	@ (8008f14 <vTaskSwitchContext+0xb0>)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6013      	str	r3, [r2, #0]
}
 8008f00:	bf00      	nop
 8008f02:	3714      	adds	r7, #20
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr
 8008f0c:	200090bc 	.word	0x200090bc
 8008f10:	200090a8 	.word	0x200090a8
 8008f14:	2000909c 	.word	0x2000909c
 8008f18:	20008bc4 	.word	0x20008bc4
 8008f1c:	20008bc0 	.word	0x20008bc0

08008f20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b084      	sub	sp, #16
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d10b      	bne.n	8008f48 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f34:	f383 8811 	msr	BASEPRI, r3
 8008f38:	f3bf 8f6f 	isb	sy
 8008f3c:	f3bf 8f4f 	dsb	sy
 8008f40:	60fb      	str	r3, [r7, #12]
}
 8008f42:	bf00      	nop
 8008f44:	bf00      	nop
 8008f46:	e7fd      	b.n	8008f44 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f48:	4b07      	ldr	r3, [pc, #28]	@ (8008f68 <vTaskPlaceOnEventList+0x48>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	3318      	adds	r3, #24
 8008f4e:	4619      	mov	r1, r3
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f7fe fe70 	bl	8007c36 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008f56:	2101      	movs	r1, #1
 8008f58:	6838      	ldr	r0, [r7, #0]
 8008f5a:	f000 faa9 	bl	80094b0 <prvAddCurrentTaskToDelayedList>
}
 8008f5e:	bf00      	nop
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	20008bc0 	.word	0x20008bc0

08008f6c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b086      	sub	sp, #24
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d10b      	bne.n	8008f96 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f82:	f383 8811 	msr	BASEPRI, r3
 8008f86:	f3bf 8f6f 	isb	sy
 8008f8a:	f3bf 8f4f 	dsb	sy
 8008f8e:	617b      	str	r3, [r7, #20]
}
 8008f90:	bf00      	nop
 8008f92:	bf00      	nop
 8008f94:	e7fd      	b.n	8008f92 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f96:	4b0a      	ldr	r3, [pc, #40]	@ (8008fc0 <vTaskPlaceOnEventListRestricted+0x54>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	3318      	adds	r3, #24
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	68f8      	ldr	r0, [r7, #12]
 8008fa0:	f7fe fe25 	bl	8007bee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d002      	beq.n	8008fb0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008faa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008fae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008fb0:	6879      	ldr	r1, [r7, #4]
 8008fb2:	68b8      	ldr	r0, [r7, #8]
 8008fb4:	f000 fa7c 	bl	80094b0 <prvAddCurrentTaskToDelayedList>
	}
 8008fb8:	bf00      	nop
 8008fba:	3718      	adds	r7, #24
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}
 8008fc0:	20008bc0 	.word	0x20008bc0

08008fc4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b086      	sub	sp, #24
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d10b      	bne.n	8008ff2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fde:	f383 8811 	msr	BASEPRI, r3
 8008fe2:	f3bf 8f6f 	isb	sy
 8008fe6:	f3bf 8f4f 	dsb	sy
 8008fea:	60fb      	str	r3, [r7, #12]
}
 8008fec:	bf00      	nop
 8008fee:	bf00      	nop
 8008ff0:	e7fd      	b.n	8008fee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	3318      	adds	r3, #24
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7fe fe56 	bl	8007ca8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ffc:	4b1d      	ldr	r3, [pc, #116]	@ (8009074 <xTaskRemoveFromEventList+0xb0>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d11d      	bne.n	8009040 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	3304      	adds	r3, #4
 8009008:	4618      	mov	r0, r3
 800900a:	f7fe fe4d 	bl	8007ca8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009012:	4b19      	ldr	r3, [pc, #100]	@ (8009078 <xTaskRemoveFromEventList+0xb4>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	429a      	cmp	r2, r3
 8009018:	d903      	bls.n	8009022 <xTaskRemoveFromEventList+0x5e>
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800901e:	4a16      	ldr	r2, [pc, #88]	@ (8009078 <xTaskRemoveFromEventList+0xb4>)
 8009020:	6013      	str	r3, [r2, #0]
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009026:	4613      	mov	r3, r2
 8009028:	009b      	lsls	r3, r3, #2
 800902a:	4413      	add	r3, r2
 800902c:	009b      	lsls	r3, r3, #2
 800902e:	4a13      	ldr	r2, [pc, #76]	@ (800907c <xTaskRemoveFromEventList+0xb8>)
 8009030:	441a      	add	r2, r3
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	3304      	adds	r3, #4
 8009036:	4619      	mov	r1, r3
 8009038:	4610      	mov	r0, r2
 800903a:	f7fe fdd8 	bl	8007bee <vListInsertEnd>
 800903e:	e005      	b.n	800904c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	3318      	adds	r3, #24
 8009044:	4619      	mov	r1, r3
 8009046:	480e      	ldr	r0, [pc, #56]	@ (8009080 <xTaskRemoveFromEventList+0xbc>)
 8009048:	f7fe fdd1 	bl	8007bee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009050:	4b0c      	ldr	r3, [pc, #48]	@ (8009084 <xTaskRemoveFromEventList+0xc0>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009056:	429a      	cmp	r2, r3
 8009058:	d905      	bls.n	8009066 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800905a:	2301      	movs	r3, #1
 800905c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800905e:	4b0a      	ldr	r3, [pc, #40]	@ (8009088 <xTaskRemoveFromEventList+0xc4>)
 8009060:	2201      	movs	r2, #1
 8009062:	601a      	str	r2, [r3, #0]
 8009064:	e001      	b.n	800906a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009066:	2300      	movs	r3, #0
 8009068:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800906a:	697b      	ldr	r3, [r7, #20]
}
 800906c:	4618      	mov	r0, r3
 800906e:	3718      	adds	r7, #24
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}
 8009074:	200090bc 	.word	0x200090bc
 8009078:	2000909c 	.word	0x2000909c
 800907c:	20008bc4 	.word	0x20008bc4
 8009080:	20009054 	.word	0x20009054
 8009084:	20008bc0 	.word	0x20008bc0
 8009088:	200090a8 	.word	0x200090a8

0800908c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b084      	sub	sp, #16
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d10b      	bne.n	80090b2 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800909a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800909e:	f383 8811 	msr	BASEPRI, r3
 80090a2:	f3bf 8f6f 	isb	sy
 80090a6:	f3bf 8f4f 	dsb	sy
 80090aa:	60fb      	str	r3, [r7, #12]
}
 80090ac:	bf00      	nop
 80090ae:	bf00      	nop
 80090b0:	e7fd      	b.n	80090ae <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 80090b2:	f000 fed9 	bl	8009e68 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 80090b6:	4b07      	ldr	r3, [pc, #28]	@ (80090d4 <vTaskSetTimeOutState+0x48>)
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 80090be:	4b06      	ldr	r3, [pc, #24]	@ (80090d8 <vTaskSetTimeOutState+0x4c>)
 80090c0:	681a      	ldr	r2, [r3, #0]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 80090c6:	f000 ff01 	bl	8009ecc <vPortExitCritical>
}
 80090ca:	bf00      	nop
 80090cc:	3710      	adds	r7, #16
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
 80090d2:	bf00      	nop
 80090d4:	200090ac 	.word	0x200090ac
 80090d8:	20009098 	.word	0x20009098

080090dc <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80090dc:	b480      	push	{r7}
 80090de:	b083      	sub	sp, #12
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80090e4:	4b06      	ldr	r3, [pc, #24]	@ (8009100 <vTaskInternalSetTimeOutState+0x24>)
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80090ec:	4b05      	ldr	r3, [pc, #20]	@ (8009104 <vTaskInternalSetTimeOutState+0x28>)
 80090ee:	681a      	ldr	r2, [r3, #0]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	605a      	str	r2, [r3, #4]
}
 80090f4:	bf00      	nop
 80090f6:	370c      	adds	r7, #12
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr
 8009100:	200090ac 	.word	0x200090ac
 8009104:	20009098 	.word	0x20009098

08009108 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b088      	sub	sp, #32
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d10b      	bne.n	8009130 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800911c:	f383 8811 	msr	BASEPRI, r3
 8009120:	f3bf 8f6f 	isb	sy
 8009124:	f3bf 8f4f 	dsb	sy
 8009128:	613b      	str	r3, [r7, #16]
}
 800912a:	bf00      	nop
 800912c:	bf00      	nop
 800912e:	e7fd      	b.n	800912c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d10b      	bne.n	800914e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800913a:	f383 8811 	msr	BASEPRI, r3
 800913e:	f3bf 8f6f 	isb	sy
 8009142:	f3bf 8f4f 	dsb	sy
 8009146:	60fb      	str	r3, [r7, #12]
}
 8009148:	bf00      	nop
 800914a:	bf00      	nop
 800914c:	e7fd      	b.n	800914a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800914e:	f000 fe8b 	bl	8009e68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009152:	4b1d      	ldr	r3, [pc, #116]	@ (80091c8 <xTaskCheckForTimeOut+0xc0>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	69ba      	ldr	r2, [r7, #24]
 800915e:	1ad3      	subs	r3, r2, r3
 8009160:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800916a:	d102      	bne.n	8009172 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800916c:	2300      	movs	r3, #0
 800916e:	61fb      	str	r3, [r7, #28]
 8009170:	e023      	b.n	80091ba <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	4b15      	ldr	r3, [pc, #84]	@ (80091cc <xTaskCheckForTimeOut+0xc4>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	429a      	cmp	r2, r3
 800917c:	d007      	beq.n	800918e <xTaskCheckForTimeOut+0x86>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	69ba      	ldr	r2, [r7, #24]
 8009184:	429a      	cmp	r2, r3
 8009186:	d302      	bcc.n	800918e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009188:	2301      	movs	r3, #1
 800918a:	61fb      	str	r3, [r7, #28]
 800918c:	e015      	b.n	80091ba <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	697a      	ldr	r2, [r7, #20]
 8009194:	429a      	cmp	r2, r3
 8009196:	d20b      	bcs.n	80091b0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	1ad2      	subs	r2, r2, r3
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f7ff ff99 	bl	80090dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80091aa:	2300      	movs	r3, #0
 80091ac:	61fb      	str	r3, [r7, #28]
 80091ae:	e004      	b.n	80091ba <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	2200      	movs	r2, #0
 80091b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80091b6:	2301      	movs	r3, #1
 80091b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80091ba:	f000 fe87 	bl	8009ecc <vPortExitCritical>

	return xReturn;
 80091be:	69fb      	ldr	r3, [r7, #28]
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3720      	adds	r7, #32
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	20009098 	.word	0x20009098
 80091cc:	200090ac 	.word	0x200090ac

080091d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80091d0:	b480      	push	{r7}
 80091d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80091d4:	4b03      	ldr	r3, [pc, #12]	@ (80091e4 <vTaskMissedYield+0x14>)
 80091d6:	2201      	movs	r2, #1
 80091d8:	601a      	str	r2, [r3, #0]
}
 80091da:	bf00      	nop
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr
 80091e4:	200090a8 	.word	0x200090a8

080091e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80091f0:	f000 f852 	bl	8009298 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80091f4:	4b06      	ldr	r3, [pc, #24]	@ (8009210 <prvIdleTask+0x28>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d9f9      	bls.n	80091f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80091fc:	4b05      	ldr	r3, [pc, #20]	@ (8009214 <prvIdleTask+0x2c>)
 80091fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009202:	601a      	str	r2, [r3, #0]
 8009204:	f3bf 8f4f 	dsb	sy
 8009208:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800920c:	e7f0      	b.n	80091f0 <prvIdleTask+0x8>
 800920e:	bf00      	nop
 8009210:	20008bc4 	.word	0x20008bc4
 8009214:	e000ed04 	.word	0xe000ed04

08009218 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b082      	sub	sp, #8
 800921c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800921e:	2300      	movs	r3, #0
 8009220:	607b      	str	r3, [r7, #4]
 8009222:	e00c      	b.n	800923e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	4613      	mov	r3, r2
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	4413      	add	r3, r2
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	4a12      	ldr	r2, [pc, #72]	@ (8009278 <prvInitialiseTaskLists+0x60>)
 8009230:	4413      	add	r3, r2
 8009232:	4618      	mov	r0, r3
 8009234:	f7fe fcae 	bl	8007b94 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	3301      	adds	r3, #1
 800923c:	607b      	str	r3, [r7, #4]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2b37      	cmp	r3, #55	@ 0x37
 8009242:	d9ef      	bls.n	8009224 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009244:	480d      	ldr	r0, [pc, #52]	@ (800927c <prvInitialiseTaskLists+0x64>)
 8009246:	f7fe fca5 	bl	8007b94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800924a:	480d      	ldr	r0, [pc, #52]	@ (8009280 <prvInitialiseTaskLists+0x68>)
 800924c:	f7fe fca2 	bl	8007b94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009250:	480c      	ldr	r0, [pc, #48]	@ (8009284 <prvInitialiseTaskLists+0x6c>)
 8009252:	f7fe fc9f 	bl	8007b94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009256:	480c      	ldr	r0, [pc, #48]	@ (8009288 <prvInitialiseTaskLists+0x70>)
 8009258:	f7fe fc9c 	bl	8007b94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800925c:	480b      	ldr	r0, [pc, #44]	@ (800928c <prvInitialiseTaskLists+0x74>)
 800925e:	f7fe fc99 	bl	8007b94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009262:	4b0b      	ldr	r3, [pc, #44]	@ (8009290 <prvInitialiseTaskLists+0x78>)
 8009264:	4a05      	ldr	r2, [pc, #20]	@ (800927c <prvInitialiseTaskLists+0x64>)
 8009266:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009268:	4b0a      	ldr	r3, [pc, #40]	@ (8009294 <prvInitialiseTaskLists+0x7c>)
 800926a:	4a05      	ldr	r2, [pc, #20]	@ (8009280 <prvInitialiseTaskLists+0x68>)
 800926c:	601a      	str	r2, [r3, #0]
}
 800926e:	bf00      	nop
 8009270:	3708      	adds	r7, #8
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
 8009276:	bf00      	nop
 8009278:	20008bc4 	.word	0x20008bc4
 800927c:	20009024 	.word	0x20009024
 8009280:	20009038 	.word	0x20009038
 8009284:	20009054 	.word	0x20009054
 8009288:	20009068 	.word	0x20009068
 800928c:	20009080 	.word	0x20009080
 8009290:	2000904c 	.word	0x2000904c
 8009294:	20009050 	.word	0x20009050

08009298 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b082      	sub	sp, #8
 800929c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800929e:	e019      	b.n	80092d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80092a0:	f000 fde2 	bl	8009e68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092a4:	4b10      	ldr	r3, [pc, #64]	@ (80092e8 <prvCheckTasksWaitingTermination+0x50>)
 80092a6:	68db      	ldr	r3, [r3, #12]
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	3304      	adds	r3, #4
 80092b0:	4618      	mov	r0, r3
 80092b2:	f7fe fcf9 	bl	8007ca8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80092b6:	4b0d      	ldr	r3, [pc, #52]	@ (80092ec <prvCheckTasksWaitingTermination+0x54>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	3b01      	subs	r3, #1
 80092bc:	4a0b      	ldr	r2, [pc, #44]	@ (80092ec <prvCheckTasksWaitingTermination+0x54>)
 80092be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80092c0:	4b0b      	ldr	r3, [pc, #44]	@ (80092f0 <prvCheckTasksWaitingTermination+0x58>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	3b01      	subs	r3, #1
 80092c6:	4a0a      	ldr	r2, [pc, #40]	@ (80092f0 <prvCheckTasksWaitingTermination+0x58>)
 80092c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80092ca:	f000 fdff 	bl	8009ecc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 f810 	bl	80092f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80092d4:	4b06      	ldr	r3, [pc, #24]	@ (80092f0 <prvCheckTasksWaitingTermination+0x58>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d1e1      	bne.n	80092a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80092dc:	bf00      	nop
 80092de:	bf00      	nop
 80092e0:	3708      	adds	r7, #8
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	20009068 	.word	0x20009068
 80092ec:	20009094 	.word	0x20009094
 80092f0:	2000907c 	.word	0x2000907c

080092f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009302:	2b00      	cmp	r3, #0
 8009304:	d108      	bne.n	8009318 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800930a:	4618      	mov	r0, r3
 800930c:	f000 ff9c 	bl	800a248 <vPortFree>
				vPortFree( pxTCB );
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 ff99 	bl	800a248 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009316:	e019      	b.n	800934c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800931e:	2b01      	cmp	r3, #1
 8009320:	d103      	bne.n	800932a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 ff90 	bl	800a248 <vPortFree>
	}
 8009328:	e010      	b.n	800934c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009330:	2b02      	cmp	r3, #2
 8009332:	d00b      	beq.n	800934c <prvDeleteTCB+0x58>
	__asm volatile
 8009334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009338:	f383 8811 	msr	BASEPRI, r3
 800933c:	f3bf 8f6f 	isb	sy
 8009340:	f3bf 8f4f 	dsb	sy
 8009344:	60fb      	str	r3, [r7, #12]
}
 8009346:	bf00      	nop
 8009348:	bf00      	nop
 800934a:	e7fd      	b.n	8009348 <prvDeleteTCB+0x54>
	}
 800934c:	bf00      	nop
 800934e:	3710      	adds	r7, #16
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800935a:	4b0c      	ldr	r3, [pc, #48]	@ (800938c <prvResetNextTaskUnblockTime+0x38>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d104      	bne.n	800936e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009364:	4b0a      	ldr	r3, [pc, #40]	@ (8009390 <prvResetNextTaskUnblockTime+0x3c>)
 8009366:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800936a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800936c:	e008      	b.n	8009380 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800936e:	4b07      	ldr	r3, [pc, #28]	@ (800938c <prvResetNextTaskUnblockTime+0x38>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	68db      	ldr	r3, [r3, #12]
 8009376:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	4a04      	ldr	r2, [pc, #16]	@ (8009390 <prvResetNextTaskUnblockTime+0x3c>)
 800937e:	6013      	str	r3, [r2, #0]
}
 8009380:	bf00      	nop
 8009382:	370c      	adds	r7, #12
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr
 800938c:	2000904c 	.word	0x2000904c
 8009390:	200090b4 	.word	0x200090b4

08009394 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800939a:	4b0b      	ldr	r3, [pc, #44]	@ (80093c8 <xTaskGetSchedulerState+0x34>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d102      	bne.n	80093a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80093a2:	2301      	movs	r3, #1
 80093a4:	607b      	str	r3, [r7, #4]
 80093a6:	e008      	b.n	80093ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093a8:	4b08      	ldr	r3, [pc, #32]	@ (80093cc <xTaskGetSchedulerState+0x38>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d102      	bne.n	80093b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80093b0:	2302      	movs	r3, #2
 80093b2:	607b      	str	r3, [r7, #4]
 80093b4:	e001      	b.n	80093ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80093b6:	2300      	movs	r3, #0
 80093b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80093ba:	687b      	ldr	r3, [r7, #4]
	}
 80093bc:	4618      	mov	r0, r3
 80093be:	370c      	adds	r7, #12
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr
 80093c8:	200090a0 	.word	0x200090a0
 80093cc:	200090bc 	.word	0x200090bc

080093d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b086      	sub	sp, #24
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80093dc:	2300      	movs	r3, #0
 80093de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d058      	beq.n	8009498 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80093e6:	4b2f      	ldr	r3, [pc, #188]	@ (80094a4 <xTaskPriorityDisinherit+0xd4>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	693a      	ldr	r2, [r7, #16]
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d00b      	beq.n	8009408 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80093f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093f4:	f383 8811 	msr	BASEPRI, r3
 80093f8:	f3bf 8f6f 	isb	sy
 80093fc:	f3bf 8f4f 	dsb	sy
 8009400:	60fb      	str	r3, [r7, #12]
}
 8009402:	bf00      	nop
 8009404:	bf00      	nop
 8009406:	e7fd      	b.n	8009404 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800940c:	2b00      	cmp	r3, #0
 800940e:	d10b      	bne.n	8009428 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009414:	f383 8811 	msr	BASEPRI, r3
 8009418:	f3bf 8f6f 	isb	sy
 800941c:	f3bf 8f4f 	dsb	sy
 8009420:	60bb      	str	r3, [r7, #8]
}
 8009422:	bf00      	nop
 8009424:	bf00      	nop
 8009426:	e7fd      	b.n	8009424 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800942c:	1e5a      	subs	r2, r3, #1
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800943a:	429a      	cmp	r2, r3
 800943c:	d02c      	beq.n	8009498 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009442:	2b00      	cmp	r3, #0
 8009444:	d128      	bne.n	8009498 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	3304      	adds	r3, #4
 800944a:	4618      	mov	r0, r3
 800944c:	f7fe fc2c 	bl	8007ca8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800945c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009468:	4b0f      	ldr	r3, [pc, #60]	@ (80094a8 <xTaskPriorityDisinherit+0xd8>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	429a      	cmp	r2, r3
 800946e:	d903      	bls.n	8009478 <xTaskPriorityDisinherit+0xa8>
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009474:	4a0c      	ldr	r2, [pc, #48]	@ (80094a8 <xTaskPriorityDisinherit+0xd8>)
 8009476:	6013      	str	r3, [r2, #0]
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800947c:	4613      	mov	r3, r2
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	4413      	add	r3, r2
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	4a09      	ldr	r2, [pc, #36]	@ (80094ac <xTaskPriorityDisinherit+0xdc>)
 8009486:	441a      	add	r2, r3
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	3304      	adds	r3, #4
 800948c:	4619      	mov	r1, r3
 800948e:	4610      	mov	r0, r2
 8009490:	f7fe fbad 	bl	8007bee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009494:	2301      	movs	r3, #1
 8009496:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009498:	697b      	ldr	r3, [r7, #20]
	}
 800949a:	4618      	mov	r0, r3
 800949c:	3718      	adds	r7, #24
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	20008bc0 	.word	0x20008bc0
 80094a8:	2000909c 	.word	0x2000909c
 80094ac:	20008bc4 	.word	0x20008bc4

080094b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b084      	sub	sp, #16
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80094ba:	4b21      	ldr	r3, [pc, #132]	@ (8009540 <prvAddCurrentTaskToDelayedList+0x90>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094c0:	4b20      	ldr	r3, [pc, #128]	@ (8009544 <prvAddCurrentTaskToDelayedList+0x94>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	3304      	adds	r3, #4
 80094c6:	4618      	mov	r0, r3
 80094c8:	f7fe fbee 	bl	8007ca8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80094d2:	d10a      	bne.n	80094ea <prvAddCurrentTaskToDelayedList+0x3a>
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d007      	beq.n	80094ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094da:	4b1a      	ldr	r3, [pc, #104]	@ (8009544 <prvAddCurrentTaskToDelayedList+0x94>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	3304      	adds	r3, #4
 80094e0:	4619      	mov	r1, r3
 80094e2:	4819      	ldr	r0, [pc, #100]	@ (8009548 <prvAddCurrentTaskToDelayedList+0x98>)
 80094e4:	f7fe fb83 	bl	8007bee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80094e8:	e026      	b.n	8009538 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80094ea:	68fa      	ldr	r2, [r7, #12]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	4413      	add	r3, r2
 80094f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80094f2:	4b14      	ldr	r3, [pc, #80]	@ (8009544 <prvAddCurrentTaskToDelayedList+0x94>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	68ba      	ldr	r2, [r7, #8]
 80094f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80094fa:	68ba      	ldr	r2, [r7, #8]
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	429a      	cmp	r2, r3
 8009500:	d209      	bcs.n	8009516 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009502:	4b12      	ldr	r3, [pc, #72]	@ (800954c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	4b0f      	ldr	r3, [pc, #60]	@ (8009544 <prvAddCurrentTaskToDelayedList+0x94>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	3304      	adds	r3, #4
 800950c:	4619      	mov	r1, r3
 800950e:	4610      	mov	r0, r2
 8009510:	f7fe fb91 	bl	8007c36 <vListInsert>
}
 8009514:	e010      	b.n	8009538 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009516:	4b0e      	ldr	r3, [pc, #56]	@ (8009550 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	4b0a      	ldr	r3, [pc, #40]	@ (8009544 <prvAddCurrentTaskToDelayedList+0x94>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	3304      	adds	r3, #4
 8009520:	4619      	mov	r1, r3
 8009522:	4610      	mov	r0, r2
 8009524:	f7fe fb87 	bl	8007c36 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009528:	4b0a      	ldr	r3, [pc, #40]	@ (8009554 <prvAddCurrentTaskToDelayedList+0xa4>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	68ba      	ldr	r2, [r7, #8]
 800952e:	429a      	cmp	r2, r3
 8009530:	d202      	bcs.n	8009538 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009532:	4a08      	ldr	r2, [pc, #32]	@ (8009554 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	6013      	str	r3, [r2, #0]
}
 8009538:	bf00      	nop
 800953a:	3710      	adds	r7, #16
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}
 8009540:	20009098 	.word	0x20009098
 8009544:	20008bc0 	.word	0x20008bc0
 8009548:	20009080 	.word	0x20009080
 800954c:	20009050 	.word	0x20009050
 8009550:	2000904c 	.word	0x2000904c
 8009554:	200090b4 	.word	0x200090b4

08009558 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b08a      	sub	sp, #40	@ 0x28
 800955c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800955e:	2300      	movs	r3, #0
 8009560:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009562:	f000 fb13 	bl	8009b8c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009566:	4b1d      	ldr	r3, [pc, #116]	@ (80095dc <xTimerCreateTimerTask+0x84>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d021      	beq.n	80095b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800956e:	2300      	movs	r3, #0
 8009570:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009572:	2300      	movs	r3, #0
 8009574:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009576:	1d3a      	adds	r2, r7, #4
 8009578:	f107 0108 	add.w	r1, r7, #8
 800957c:	f107 030c 	add.w	r3, r7, #12
 8009580:	4618      	mov	r0, r3
 8009582:	f7fe faed 	bl	8007b60 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009586:	6879      	ldr	r1, [r7, #4]
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	68fa      	ldr	r2, [r7, #12]
 800958c:	9202      	str	r2, [sp, #8]
 800958e:	9301      	str	r3, [sp, #4]
 8009590:	2302      	movs	r3, #2
 8009592:	9300      	str	r3, [sp, #0]
 8009594:	2300      	movs	r3, #0
 8009596:	460a      	mov	r2, r1
 8009598:	4911      	ldr	r1, [pc, #68]	@ (80095e0 <xTimerCreateTimerTask+0x88>)
 800959a:	4812      	ldr	r0, [pc, #72]	@ (80095e4 <xTimerCreateTimerTask+0x8c>)
 800959c:	f7ff f8a8 	bl	80086f0 <xTaskCreateStatic>
 80095a0:	4603      	mov	r3, r0
 80095a2:	4a11      	ldr	r2, [pc, #68]	@ (80095e8 <xTimerCreateTimerTask+0x90>)
 80095a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80095a6:	4b10      	ldr	r3, [pc, #64]	@ (80095e8 <xTimerCreateTimerTask+0x90>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d001      	beq.n	80095b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80095ae:	2301      	movs	r3, #1
 80095b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d10b      	bne.n	80095d0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80095b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095bc:	f383 8811 	msr	BASEPRI, r3
 80095c0:	f3bf 8f6f 	isb	sy
 80095c4:	f3bf 8f4f 	dsb	sy
 80095c8:	613b      	str	r3, [r7, #16]
}
 80095ca:	bf00      	nop
 80095cc:	bf00      	nop
 80095ce:	e7fd      	b.n	80095cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80095d0:	697b      	ldr	r3, [r7, #20]
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3718      	adds	r7, #24
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}
 80095da:	bf00      	nop
 80095dc:	200090f0 	.word	0x200090f0
 80095e0:	0801a6cc 	.word	0x0801a6cc
 80095e4:	08009725 	.word	0x08009725
 80095e8:	200090f4 	.word	0x200090f4

080095ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b08a      	sub	sp, #40	@ 0x28
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	60b9      	str	r1, [r7, #8]
 80095f6:	607a      	str	r2, [r7, #4]
 80095f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80095fa:	2300      	movs	r3, #0
 80095fc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d10b      	bne.n	800961c <xTimerGenericCommand+0x30>
	__asm volatile
 8009604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009608:	f383 8811 	msr	BASEPRI, r3
 800960c:	f3bf 8f6f 	isb	sy
 8009610:	f3bf 8f4f 	dsb	sy
 8009614:	623b      	str	r3, [r7, #32]
}
 8009616:	bf00      	nop
 8009618:	bf00      	nop
 800961a:	e7fd      	b.n	8009618 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800961c:	4b19      	ldr	r3, [pc, #100]	@ (8009684 <xTimerGenericCommand+0x98>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d02a      	beq.n	800967a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	2b05      	cmp	r3, #5
 8009634:	dc18      	bgt.n	8009668 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009636:	f7ff fead 	bl	8009394 <xTaskGetSchedulerState>
 800963a:	4603      	mov	r3, r0
 800963c:	2b02      	cmp	r3, #2
 800963e:	d109      	bne.n	8009654 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009640:	4b10      	ldr	r3, [pc, #64]	@ (8009684 <xTimerGenericCommand+0x98>)
 8009642:	6818      	ldr	r0, [r3, #0]
 8009644:	f107 0110 	add.w	r1, r7, #16
 8009648:	2300      	movs	r3, #0
 800964a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800964c:	f7fe fc60 	bl	8007f10 <xQueueGenericSend>
 8009650:	6278      	str	r0, [r7, #36]	@ 0x24
 8009652:	e012      	b.n	800967a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009654:	4b0b      	ldr	r3, [pc, #44]	@ (8009684 <xTimerGenericCommand+0x98>)
 8009656:	6818      	ldr	r0, [r3, #0]
 8009658:	f107 0110 	add.w	r1, r7, #16
 800965c:	2300      	movs	r3, #0
 800965e:	2200      	movs	r2, #0
 8009660:	f7fe fc56 	bl	8007f10 <xQueueGenericSend>
 8009664:	6278      	str	r0, [r7, #36]	@ 0x24
 8009666:	e008      	b.n	800967a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009668:	4b06      	ldr	r3, [pc, #24]	@ (8009684 <xTimerGenericCommand+0x98>)
 800966a:	6818      	ldr	r0, [r3, #0]
 800966c:	f107 0110 	add.w	r1, r7, #16
 8009670:	2300      	movs	r3, #0
 8009672:	683a      	ldr	r2, [r7, #0]
 8009674:	f7fe fd4e 	bl	8008114 <xQueueGenericSendFromISR>
 8009678:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800967a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800967c:	4618      	mov	r0, r3
 800967e:	3728      	adds	r7, #40	@ 0x28
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}
 8009684:	200090f0 	.word	0x200090f0

08009688 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b088      	sub	sp, #32
 800968c:	af02      	add	r7, sp, #8
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009692:	4b23      	ldr	r3, [pc, #140]	@ (8009720 <prvProcessExpiredTimer+0x98>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	68db      	ldr	r3, [r3, #12]
 800969a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	3304      	adds	r3, #4
 80096a0:	4618      	mov	r0, r3
 80096a2:	f7fe fb01 	bl	8007ca8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80096ac:	f003 0304 	and.w	r3, r3, #4
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d023      	beq.n	80096fc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	699a      	ldr	r2, [r3, #24]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	18d1      	adds	r1, r2, r3
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	683a      	ldr	r2, [r7, #0]
 80096c0:	6978      	ldr	r0, [r7, #20]
 80096c2:	f000 f8d5 	bl	8009870 <prvInsertTimerInActiveList>
 80096c6:	4603      	mov	r3, r0
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d020      	beq.n	800970e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80096cc:	2300      	movs	r3, #0
 80096ce:	9300      	str	r3, [sp, #0]
 80096d0:	2300      	movs	r3, #0
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	2100      	movs	r1, #0
 80096d6:	6978      	ldr	r0, [r7, #20]
 80096d8:	f7ff ff88 	bl	80095ec <xTimerGenericCommand>
 80096dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d114      	bne.n	800970e <prvProcessExpiredTimer+0x86>
	__asm volatile
 80096e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096e8:	f383 8811 	msr	BASEPRI, r3
 80096ec:	f3bf 8f6f 	isb	sy
 80096f0:	f3bf 8f4f 	dsb	sy
 80096f4:	60fb      	str	r3, [r7, #12]
}
 80096f6:	bf00      	nop
 80096f8:	bf00      	nop
 80096fa:	e7fd      	b.n	80096f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009702:	f023 0301 	bic.w	r3, r3, #1
 8009706:	b2da      	uxtb	r2, r3
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	6a1b      	ldr	r3, [r3, #32]
 8009712:	6978      	ldr	r0, [r7, #20]
 8009714:	4798      	blx	r3
}
 8009716:	bf00      	nop
 8009718:	3718      	adds	r7, #24
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	200090e8 	.word	0x200090e8

08009724 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b084      	sub	sp, #16
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800972c:	f107 0308 	add.w	r3, r7, #8
 8009730:	4618      	mov	r0, r3
 8009732:	f000 f859 	bl	80097e8 <prvGetNextExpireTime>
 8009736:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	4619      	mov	r1, r3
 800973c:	68f8      	ldr	r0, [r7, #12]
 800973e:	f000 f805 	bl	800974c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009742:	f000 f8d7 	bl	80098f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009746:	bf00      	nop
 8009748:	e7f0      	b.n	800972c <prvTimerTask+0x8>
	...

0800974c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009756:	f7ff fa0f 	bl	8008b78 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800975a:	f107 0308 	add.w	r3, r7, #8
 800975e:	4618      	mov	r0, r3
 8009760:	f000 f866 	bl	8009830 <prvSampleTimeNow>
 8009764:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d130      	bne.n	80097ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d10a      	bne.n	8009788 <prvProcessTimerOrBlockTask+0x3c>
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	429a      	cmp	r2, r3
 8009778:	d806      	bhi.n	8009788 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800977a:	f7ff fa0b 	bl	8008b94 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800977e:	68f9      	ldr	r1, [r7, #12]
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f7ff ff81 	bl	8009688 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009786:	e024      	b.n	80097d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d008      	beq.n	80097a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800978e:	4b13      	ldr	r3, [pc, #76]	@ (80097dc <prvProcessTimerOrBlockTask+0x90>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d101      	bne.n	800979c <prvProcessTimerOrBlockTask+0x50>
 8009798:	2301      	movs	r3, #1
 800979a:	e000      	b.n	800979e <prvProcessTimerOrBlockTask+0x52>
 800979c:	2300      	movs	r3, #0
 800979e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80097a0:	4b0f      	ldr	r3, [pc, #60]	@ (80097e0 <prvProcessTimerOrBlockTask+0x94>)
 80097a2:	6818      	ldr	r0, [r3, #0]
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	1ad3      	subs	r3, r2, r3
 80097aa:	683a      	ldr	r2, [r7, #0]
 80097ac:	4619      	mov	r1, r3
 80097ae:	f7fe ff6b 	bl	8008688 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80097b2:	f7ff f9ef 	bl	8008b94 <xTaskResumeAll>
 80097b6:	4603      	mov	r3, r0
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d10a      	bne.n	80097d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80097bc:	4b09      	ldr	r3, [pc, #36]	@ (80097e4 <prvProcessTimerOrBlockTask+0x98>)
 80097be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097c2:	601a      	str	r2, [r3, #0]
 80097c4:	f3bf 8f4f 	dsb	sy
 80097c8:	f3bf 8f6f 	isb	sy
}
 80097cc:	e001      	b.n	80097d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80097ce:	f7ff f9e1 	bl	8008b94 <xTaskResumeAll>
}
 80097d2:	bf00      	nop
 80097d4:	3710      	adds	r7, #16
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop
 80097dc:	200090ec 	.word	0x200090ec
 80097e0:	200090f0 	.word	0x200090f0
 80097e4:	e000ed04 	.word	0xe000ed04

080097e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80097e8:	b480      	push	{r7}
 80097ea:	b085      	sub	sp, #20
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80097f0:	4b0e      	ldr	r3, [pc, #56]	@ (800982c <prvGetNextExpireTime+0x44>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d101      	bne.n	80097fe <prvGetNextExpireTime+0x16>
 80097fa:	2201      	movs	r2, #1
 80097fc:	e000      	b.n	8009800 <prvGetNextExpireTime+0x18>
 80097fe:	2200      	movs	r2, #0
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d105      	bne.n	8009818 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800980c:	4b07      	ldr	r3, [pc, #28]	@ (800982c <prvGetNextExpireTime+0x44>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	60fb      	str	r3, [r7, #12]
 8009816:	e001      	b.n	800981c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009818:	2300      	movs	r3, #0
 800981a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800981c:	68fb      	ldr	r3, [r7, #12]
}
 800981e:	4618      	mov	r0, r3
 8009820:	3714      	adds	r7, #20
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr
 800982a:	bf00      	nop
 800982c:	200090e8 	.word	0x200090e8

08009830 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009838:	f7ff fa4a 	bl	8008cd0 <xTaskGetTickCount>
 800983c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800983e:	4b0b      	ldr	r3, [pc, #44]	@ (800986c <prvSampleTimeNow+0x3c>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	68fa      	ldr	r2, [r7, #12]
 8009844:	429a      	cmp	r2, r3
 8009846:	d205      	bcs.n	8009854 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009848:	f000 f93a 	bl	8009ac0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2201      	movs	r2, #1
 8009850:	601a      	str	r2, [r3, #0]
 8009852:	e002      	b.n	800985a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2200      	movs	r2, #0
 8009858:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800985a:	4a04      	ldr	r2, [pc, #16]	@ (800986c <prvSampleTimeNow+0x3c>)
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009860:	68fb      	ldr	r3, [r7, #12]
}
 8009862:	4618      	mov	r0, r3
 8009864:	3710      	adds	r7, #16
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	200090f8 	.word	0x200090f8

08009870 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b086      	sub	sp, #24
 8009874:	af00      	add	r7, sp, #0
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	60b9      	str	r1, [r7, #8]
 800987a:	607a      	str	r2, [r7, #4]
 800987c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800987e:	2300      	movs	r3, #0
 8009880:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	68ba      	ldr	r2, [r7, #8]
 8009886:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	68fa      	ldr	r2, [r7, #12]
 800988c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800988e:	68ba      	ldr	r2, [r7, #8]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	429a      	cmp	r2, r3
 8009894:	d812      	bhi.n	80098bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009896:	687a      	ldr	r2, [r7, #4]
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	1ad2      	subs	r2, r2, r3
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	699b      	ldr	r3, [r3, #24]
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d302      	bcc.n	80098aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80098a4:	2301      	movs	r3, #1
 80098a6:	617b      	str	r3, [r7, #20]
 80098a8:	e01b      	b.n	80098e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80098aa:	4b10      	ldr	r3, [pc, #64]	@ (80098ec <prvInsertTimerInActiveList+0x7c>)
 80098ac:	681a      	ldr	r2, [r3, #0]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	3304      	adds	r3, #4
 80098b2:	4619      	mov	r1, r3
 80098b4:	4610      	mov	r0, r2
 80098b6:	f7fe f9be 	bl	8007c36 <vListInsert>
 80098ba:	e012      	b.n	80098e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d206      	bcs.n	80098d2 <prvInsertTimerInActiveList+0x62>
 80098c4:	68ba      	ldr	r2, [r7, #8]
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d302      	bcc.n	80098d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80098cc:	2301      	movs	r3, #1
 80098ce:	617b      	str	r3, [r7, #20]
 80098d0:	e007      	b.n	80098e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80098d2:	4b07      	ldr	r3, [pc, #28]	@ (80098f0 <prvInsertTimerInActiveList+0x80>)
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	3304      	adds	r3, #4
 80098da:	4619      	mov	r1, r3
 80098dc:	4610      	mov	r0, r2
 80098de:	f7fe f9aa 	bl	8007c36 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80098e2:	697b      	ldr	r3, [r7, #20]
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3718      	adds	r7, #24
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}
 80098ec:	200090ec 	.word	0x200090ec
 80098f0:	200090e8 	.word	0x200090e8

080098f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b08e      	sub	sp, #56	@ 0x38
 80098f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80098fa:	e0ce      	b.n	8009a9a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	da19      	bge.n	8009936 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009902:	1d3b      	adds	r3, r7, #4
 8009904:	3304      	adds	r3, #4
 8009906:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800990a:	2b00      	cmp	r3, #0
 800990c:	d10b      	bne.n	8009926 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800990e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009912:	f383 8811 	msr	BASEPRI, r3
 8009916:	f3bf 8f6f 	isb	sy
 800991a:	f3bf 8f4f 	dsb	sy
 800991e:	61fb      	str	r3, [r7, #28]
}
 8009920:	bf00      	nop
 8009922:	bf00      	nop
 8009924:	e7fd      	b.n	8009922 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800992c:	6850      	ldr	r0, [r2, #4]
 800992e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009930:	6892      	ldr	r2, [r2, #8]
 8009932:	4611      	mov	r1, r2
 8009934:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2b00      	cmp	r3, #0
 800993a:	f2c0 80ae 	blt.w	8009a9a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009944:	695b      	ldr	r3, [r3, #20]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d004      	beq.n	8009954 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800994a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800994c:	3304      	adds	r3, #4
 800994e:	4618      	mov	r0, r3
 8009950:	f7fe f9aa 	bl	8007ca8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009954:	463b      	mov	r3, r7
 8009956:	4618      	mov	r0, r3
 8009958:	f7ff ff6a 	bl	8009830 <prvSampleTimeNow>
 800995c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2b09      	cmp	r3, #9
 8009962:	f200 8097 	bhi.w	8009a94 <prvProcessReceivedCommands+0x1a0>
 8009966:	a201      	add	r2, pc, #4	@ (adr r2, 800996c <prvProcessReceivedCommands+0x78>)
 8009968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800996c:	08009995 	.word	0x08009995
 8009970:	08009995 	.word	0x08009995
 8009974:	08009995 	.word	0x08009995
 8009978:	08009a0b 	.word	0x08009a0b
 800997c:	08009a1f 	.word	0x08009a1f
 8009980:	08009a6b 	.word	0x08009a6b
 8009984:	08009995 	.word	0x08009995
 8009988:	08009995 	.word	0x08009995
 800998c:	08009a0b 	.word	0x08009a0b
 8009990:	08009a1f 	.word	0x08009a1f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009996:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800999a:	f043 0301 	orr.w	r3, r3, #1
 800999e:	b2da      	uxtb	r2, r3
 80099a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80099a6:	68ba      	ldr	r2, [r7, #8]
 80099a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099aa:	699b      	ldr	r3, [r3, #24]
 80099ac:	18d1      	adds	r1, r2, r3
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099b4:	f7ff ff5c 	bl	8009870 <prvInsertTimerInActiveList>
 80099b8:	4603      	mov	r3, r0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d06c      	beq.n	8009a98 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80099be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099c0:	6a1b      	ldr	r3, [r3, #32]
 80099c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80099c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099cc:	f003 0304 	and.w	r3, r3, #4
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d061      	beq.n	8009a98 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80099d4:	68ba      	ldr	r2, [r7, #8]
 80099d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099d8:	699b      	ldr	r3, [r3, #24]
 80099da:	441a      	add	r2, r3
 80099dc:	2300      	movs	r3, #0
 80099de:	9300      	str	r3, [sp, #0]
 80099e0:	2300      	movs	r3, #0
 80099e2:	2100      	movs	r1, #0
 80099e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099e6:	f7ff fe01 	bl	80095ec <xTimerGenericCommand>
 80099ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80099ec:	6a3b      	ldr	r3, [r7, #32]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d152      	bne.n	8009a98 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80099f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099f6:	f383 8811 	msr	BASEPRI, r3
 80099fa:	f3bf 8f6f 	isb	sy
 80099fe:	f3bf 8f4f 	dsb	sy
 8009a02:	61bb      	str	r3, [r7, #24]
}
 8009a04:	bf00      	nop
 8009a06:	bf00      	nop
 8009a08:	e7fd      	b.n	8009a06 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a10:	f023 0301 	bic.w	r3, r3, #1
 8009a14:	b2da      	uxtb	r2, r3
 8009a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a18:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009a1c:	e03d      	b.n	8009a9a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a24:	f043 0301 	orr.w	r3, r3, #1
 8009a28:	b2da      	uxtb	r2, r3
 8009a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a2c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009a30:	68ba      	ldr	r2, [r7, #8]
 8009a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a34:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a38:	699b      	ldr	r3, [r3, #24]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d10b      	bne.n	8009a56 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a42:	f383 8811 	msr	BASEPRI, r3
 8009a46:	f3bf 8f6f 	isb	sy
 8009a4a:	f3bf 8f4f 	dsb	sy
 8009a4e:	617b      	str	r3, [r7, #20]
}
 8009a50:	bf00      	nop
 8009a52:	bf00      	nop
 8009a54:	e7fd      	b.n	8009a52 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a58:	699a      	ldr	r2, [r3, #24]
 8009a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a5c:	18d1      	adds	r1, r2, r3
 8009a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a64:	f7ff ff04 	bl	8009870 <prvInsertTimerInActiveList>
					break;
 8009a68:	e017      	b.n	8009a9a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a70:	f003 0302 	and.w	r3, r3, #2
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d103      	bne.n	8009a80 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009a78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a7a:	f000 fbe5 	bl	800a248 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009a7e:	e00c      	b.n	8009a9a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a86:	f023 0301 	bic.w	r3, r3, #1
 8009a8a:	b2da      	uxtb	r2, r3
 8009a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009a92:	e002      	b.n	8009a9a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009a94:	bf00      	nop
 8009a96:	e000      	b.n	8009a9a <prvProcessReceivedCommands+0x1a6>
					break;
 8009a98:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a9a:	4b08      	ldr	r3, [pc, #32]	@ (8009abc <prvProcessReceivedCommands+0x1c8>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	1d39      	adds	r1, r7, #4
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f7fe fbd4 	bl	8008250 <xQueueReceive>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	f47f af26 	bne.w	80098fc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009ab0:	bf00      	nop
 8009ab2:	bf00      	nop
 8009ab4:	3730      	adds	r7, #48	@ 0x30
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
 8009aba:	bf00      	nop
 8009abc:	200090f0 	.word	0x200090f0

08009ac0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b088      	sub	sp, #32
 8009ac4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009ac6:	e049      	b.n	8009b5c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ac8:	4b2e      	ldr	r3, [pc, #184]	@ (8009b84 <prvSwitchTimerLists+0xc4>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	68db      	ldr	r3, [r3, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ad2:	4b2c      	ldr	r3, [pc, #176]	@ (8009b84 <prvSwitchTimerLists+0xc4>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	68db      	ldr	r3, [r3, #12]
 8009ad8:	68db      	ldr	r3, [r3, #12]
 8009ada:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	3304      	adds	r3, #4
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f7fe f8e1 	bl	8007ca8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	6a1b      	ldr	r3, [r3, #32]
 8009aea:	68f8      	ldr	r0, [r7, #12]
 8009aec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009af4:	f003 0304 	and.w	r3, r3, #4
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d02f      	beq.n	8009b5c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	699b      	ldr	r3, [r3, #24]
 8009b00:	693a      	ldr	r2, [r7, #16]
 8009b02:	4413      	add	r3, r2
 8009b04:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009b06:	68ba      	ldr	r2, [r7, #8]
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d90e      	bls.n	8009b2c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	68ba      	ldr	r2, [r7, #8]
 8009b12:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	68fa      	ldr	r2, [r7, #12]
 8009b18:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009b1a:	4b1a      	ldr	r3, [pc, #104]	@ (8009b84 <prvSwitchTimerLists+0xc4>)
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	3304      	adds	r3, #4
 8009b22:	4619      	mov	r1, r3
 8009b24:	4610      	mov	r0, r2
 8009b26:	f7fe f886 	bl	8007c36 <vListInsert>
 8009b2a:	e017      	b.n	8009b5c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	9300      	str	r3, [sp, #0]
 8009b30:	2300      	movs	r3, #0
 8009b32:	693a      	ldr	r2, [r7, #16]
 8009b34:	2100      	movs	r1, #0
 8009b36:	68f8      	ldr	r0, [r7, #12]
 8009b38:	f7ff fd58 	bl	80095ec <xTimerGenericCommand>
 8009b3c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d10b      	bne.n	8009b5c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b48:	f383 8811 	msr	BASEPRI, r3
 8009b4c:	f3bf 8f6f 	isb	sy
 8009b50:	f3bf 8f4f 	dsb	sy
 8009b54:	603b      	str	r3, [r7, #0]
}
 8009b56:	bf00      	nop
 8009b58:	bf00      	nop
 8009b5a:	e7fd      	b.n	8009b58 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b5c:	4b09      	ldr	r3, [pc, #36]	@ (8009b84 <prvSwitchTimerLists+0xc4>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d1b0      	bne.n	8009ac8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009b66:	4b07      	ldr	r3, [pc, #28]	@ (8009b84 <prvSwitchTimerLists+0xc4>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009b6c:	4b06      	ldr	r3, [pc, #24]	@ (8009b88 <prvSwitchTimerLists+0xc8>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a04      	ldr	r2, [pc, #16]	@ (8009b84 <prvSwitchTimerLists+0xc4>)
 8009b72:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009b74:	4a04      	ldr	r2, [pc, #16]	@ (8009b88 <prvSwitchTimerLists+0xc8>)
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	6013      	str	r3, [r2, #0]
}
 8009b7a:	bf00      	nop
 8009b7c:	3718      	adds	r7, #24
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	200090e8 	.word	0x200090e8
 8009b88:	200090ec 	.word	0x200090ec

08009b8c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b082      	sub	sp, #8
 8009b90:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009b92:	f000 f969 	bl	8009e68 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009b96:	4b15      	ldr	r3, [pc, #84]	@ (8009bec <prvCheckForValidListAndQueue+0x60>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d120      	bne.n	8009be0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009b9e:	4814      	ldr	r0, [pc, #80]	@ (8009bf0 <prvCheckForValidListAndQueue+0x64>)
 8009ba0:	f7fd fff8 	bl	8007b94 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009ba4:	4813      	ldr	r0, [pc, #76]	@ (8009bf4 <prvCheckForValidListAndQueue+0x68>)
 8009ba6:	f7fd fff5 	bl	8007b94 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009baa:	4b13      	ldr	r3, [pc, #76]	@ (8009bf8 <prvCheckForValidListAndQueue+0x6c>)
 8009bac:	4a10      	ldr	r2, [pc, #64]	@ (8009bf0 <prvCheckForValidListAndQueue+0x64>)
 8009bae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009bb0:	4b12      	ldr	r3, [pc, #72]	@ (8009bfc <prvCheckForValidListAndQueue+0x70>)
 8009bb2:	4a10      	ldr	r2, [pc, #64]	@ (8009bf4 <prvCheckForValidListAndQueue+0x68>)
 8009bb4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	9300      	str	r3, [sp, #0]
 8009bba:	4b11      	ldr	r3, [pc, #68]	@ (8009c00 <prvCheckForValidListAndQueue+0x74>)
 8009bbc:	4a11      	ldr	r2, [pc, #68]	@ (8009c04 <prvCheckForValidListAndQueue+0x78>)
 8009bbe:	2110      	movs	r1, #16
 8009bc0:	200a      	movs	r0, #10
 8009bc2:	f7fe f905 	bl	8007dd0 <xQueueGenericCreateStatic>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	4a08      	ldr	r2, [pc, #32]	@ (8009bec <prvCheckForValidListAndQueue+0x60>)
 8009bca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009bcc:	4b07      	ldr	r3, [pc, #28]	@ (8009bec <prvCheckForValidListAndQueue+0x60>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d005      	beq.n	8009be0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009bd4:	4b05      	ldr	r3, [pc, #20]	@ (8009bec <prvCheckForValidListAndQueue+0x60>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	490b      	ldr	r1, [pc, #44]	@ (8009c08 <prvCheckForValidListAndQueue+0x7c>)
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7fe fd2a 	bl	8008634 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009be0:	f000 f974 	bl	8009ecc <vPortExitCritical>
}
 8009be4:	bf00      	nop
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
 8009bea:	bf00      	nop
 8009bec:	200090f0 	.word	0x200090f0
 8009bf0:	200090c0 	.word	0x200090c0
 8009bf4:	200090d4 	.word	0x200090d4
 8009bf8:	200090e8 	.word	0x200090e8
 8009bfc:	200090ec 	.word	0x200090ec
 8009c00:	2000919c 	.word	0x2000919c
 8009c04:	200090fc 	.word	0x200090fc
 8009c08:	0801a6d4 	.word	0x0801a6d4

08009c0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b085      	sub	sp, #20
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	60f8      	str	r0, [r7, #12]
 8009c14:	60b9      	str	r1, [r7, #8]
 8009c16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	3b04      	subs	r3, #4
 8009c1c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009c24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	3b04      	subs	r3, #4
 8009c2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	f023 0201 	bic.w	r2, r3, #1
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	3b04      	subs	r3, #4
 8009c3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009c3c:	4a0c      	ldr	r2, [pc, #48]	@ (8009c70 <pxPortInitialiseStack+0x64>)
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	3b14      	subs	r3, #20
 8009c46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	3b04      	subs	r3, #4
 8009c52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f06f 0202 	mvn.w	r2, #2
 8009c5a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	3b20      	subs	r3, #32
 8009c60:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009c62:	68fb      	ldr	r3, [r7, #12]
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3714      	adds	r7, #20
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr
 8009c70:	08009c75 	.word	0x08009c75

08009c74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009c74:	b480      	push	{r7}
 8009c76:	b085      	sub	sp, #20
 8009c78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009c7e:	4b13      	ldr	r3, [pc, #76]	@ (8009ccc <prvTaskExitError+0x58>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009c86:	d00b      	beq.n	8009ca0 <prvTaskExitError+0x2c>
	__asm volatile
 8009c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c8c:	f383 8811 	msr	BASEPRI, r3
 8009c90:	f3bf 8f6f 	isb	sy
 8009c94:	f3bf 8f4f 	dsb	sy
 8009c98:	60fb      	str	r3, [r7, #12]
}
 8009c9a:	bf00      	nop
 8009c9c:	bf00      	nop
 8009c9e:	e7fd      	b.n	8009c9c <prvTaskExitError+0x28>
	__asm volatile
 8009ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ca4:	f383 8811 	msr	BASEPRI, r3
 8009ca8:	f3bf 8f6f 	isb	sy
 8009cac:	f3bf 8f4f 	dsb	sy
 8009cb0:	60bb      	str	r3, [r7, #8]
}
 8009cb2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009cb4:	bf00      	nop
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d0fc      	beq.n	8009cb6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009cbc:	bf00      	nop
 8009cbe:	bf00      	nop
 8009cc0:	3714      	adds	r7, #20
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc8:	4770      	bx	lr
 8009cca:	bf00      	nop
 8009ccc:	20000024 	.word	0x20000024

08009cd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009cd0:	4b07      	ldr	r3, [pc, #28]	@ (8009cf0 <pxCurrentTCBConst2>)
 8009cd2:	6819      	ldr	r1, [r3, #0]
 8009cd4:	6808      	ldr	r0, [r1, #0]
 8009cd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cda:	f380 8809 	msr	PSP, r0
 8009cde:	f3bf 8f6f 	isb	sy
 8009ce2:	f04f 0000 	mov.w	r0, #0
 8009ce6:	f380 8811 	msr	BASEPRI, r0
 8009cea:	4770      	bx	lr
 8009cec:	f3af 8000 	nop.w

08009cf0 <pxCurrentTCBConst2>:
 8009cf0:	20008bc0 	.word	0x20008bc0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009cf4:	bf00      	nop
 8009cf6:	bf00      	nop

08009cf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009cf8:	4808      	ldr	r0, [pc, #32]	@ (8009d1c <prvPortStartFirstTask+0x24>)
 8009cfa:	6800      	ldr	r0, [r0, #0]
 8009cfc:	6800      	ldr	r0, [r0, #0]
 8009cfe:	f380 8808 	msr	MSP, r0
 8009d02:	f04f 0000 	mov.w	r0, #0
 8009d06:	f380 8814 	msr	CONTROL, r0
 8009d0a:	b662      	cpsie	i
 8009d0c:	b661      	cpsie	f
 8009d0e:	f3bf 8f4f 	dsb	sy
 8009d12:	f3bf 8f6f 	isb	sy
 8009d16:	df00      	svc	0
 8009d18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009d1a:	bf00      	nop
 8009d1c:	e000ed08 	.word	0xe000ed08

08009d20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b086      	sub	sp, #24
 8009d24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009d26:	4b47      	ldr	r3, [pc, #284]	@ (8009e44 <xPortStartScheduler+0x124>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a47      	ldr	r2, [pc, #284]	@ (8009e48 <xPortStartScheduler+0x128>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d10b      	bne.n	8009d48 <xPortStartScheduler+0x28>
	__asm volatile
 8009d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d34:	f383 8811 	msr	BASEPRI, r3
 8009d38:	f3bf 8f6f 	isb	sy
 8009d3c:	f3bf 8f4f 	dsb	sy
 8009d40:	60fb      	str	r3, [r7, #12]
}
 8009d42:	bf00      	nop
 8009d44:	bf00      	nop
 8009d46:	e7fd      	b.n	8009d44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009d48:	4b3e      	ldr	r3, [pc, #248]	@ (8009e44 <xPortStartScheduler+0x124>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a3f      	ldr	r2, [pc, #252]	@ (8009e4c <xPortStartScheduler+0x12c>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d10b      	bne.n	8009d6a <xPortStartScheduler+0x4a>
	__asm volatile
 8009d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d56:	f383 8811 	msr	BASEPRI, r3
 8009d5a:	f3bf 8f6f 	isb	sy
 8009d5e:	f3bf 8f4f 	dsb	sy
 8009d62:	613b      	str	r3, [r7, #16]
}
 8009d64:	bf00      	nop
 8009d66:	bf00      	nop
 8009d68:	e7fd      	b.n	8009d66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009d6a:	4b39      	ldr	r3, [pc, #228]	@ (8009e50 <xPortStartScheduler+0x130>)
 8009d6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	781b      	ldrb	r3, [r3, #0]
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	22ff      	movs	r2, #255	@ 0xff
 8009d7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009d84:	78fb      	ldrb	r3, [r7, #3]
 8009d86:	b2db      	uxtb	r3, r3
 8009d88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009d8c:	b2da      	uxtb	r2, r3
 8009d8e:	4b31      	ldr	r3, [pc, #196]	@ (8009e54 <xPortStartScheduler+0x134>)
 8009d90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009d92:	4b31      	ldr	r3, [pc, #196]	@ (8009e58 <xPortStartScheduler+0x138>)
 8009d94:	2207      	movs	r2, #7
 8009d96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d98:	e009      	b.n	8009dae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009d9a:	4b2f      	ldr	r3, [pc, #188]	@ (8009e58 <xPortStartScheduler+0x138>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	3b01      	subs	r3, #1
 8009da0:	4a2d      	ldr	r2, [pc, #180]	@ (8009e58 <xPortStartScheduler+0x138>)
 8009da2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009da4:	78fb      	ldrb	r3, [r7, #3]
 8009da6:	b2db      	uxtb	r3, r3
 8009da8:	005b      	lsls	r3, r3, #1
 8009daa:	b2db      	uxtb	r3, r3
 8009dac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009dae:	78fb      	ldrb	r3, [r7, #3]
 8009db0:	b2db      	uxtb	r3, r3
 8009db2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009db6:	2b80      	cmp	r3, #128	@ 0x80
 8009db8:	d0ef      	beq.n	8009d9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009dba:	4b27      	ldr	r3, [pc, #156]	@ (8009e58 <xPortStartScheduler+0x138>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f1c3 0307 	rsb	r3, r3, #7
 8009dc2:	2b04      	cmp	r3, #4
 8009dc4:	d00b      	beq.n	8009dde <xPortStartScheduler+0xbe>
	__asm volatile
 8009dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dca:	f383 8811 	msr	BASEPRI, r3
 8009dce:	f3bf 8f6f 	isb	sy
 8009dd2:	f3bf 8f4f 	dsb	sy
 8009dd6:	60bb      	str	r3, [r7, #8]
}
 8009dd8:	bf00      	nop
 8009dda:	bf00      	nop
 8009ddc:	e7fd      	b.n	8009dda <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009dde:	4b1e      	ldr	r3, [pc, #120]	@ (8009e58 <xPortStartScheduler+0x138>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	021b      	lsls	r3, r3, #8
 8009de4:	4a1c      	ldr	r2, [pc, #112]	@ (8009e58 <xPortStartScheduler+0x138>)
 8009de6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009de8:	4b1b      	ldr	r3, [pc, #108]	@ (8009e58 <xPortStartScheduler+0x138>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009df0:	4a19      	ldr	r2, [pc, #100]	@ (8009e58 <xPortStartScheduler+0x138>)
 8009df2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	b2da      	uxtb	r2, r3
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009dfc:	4b17      	ldr	r3, [pc, #92]	@ (8009e5c <xPortStartScheduler+0x13c>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4a16      	ldr	r2, [pc, #88]	@ (8009e5c <xPortStartScheduler+0x13c>)
 8009e02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009e06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009e08:	4b14      	ldr	r3, [pc, #80]	@ (8009e5c <xPortStartScheduler+0x13c>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a13      	ldr	r2, [pc, #76]	@ (8009e5c <xPortStartScheduler+0x13c>)
 8009e0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009e12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009e14:	f000 f8da 	bl	8009fcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009e18:	4b11      	ldr	r3, [pc, #68]	@ (8009e60 <xPortStartScheduler+0x140>)
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009e1e:	f000 f8f9 	bl	800a014 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009e22:	4b10      	ldr	r3, [pc, #64]	@ (8009e64 <xPortStartScheduler+0x144>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4a0f      	ldr	r2, [pc, #60]	@ (8009e64 <xPortStartScheduler+0x144>)
 8009e28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009e2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009e2e:	f7ff ff63 	bl	8009cf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009e32:	f7ff f817 	bl	8008e64 <vTaskSwitchContext>
	prvTaskExitError();
 8009e36:	f7ff ff1d 	bl	8009c74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009e3a:	2300      	movs	r3, #0
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3718      	adds	r7, #24
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}
 8009e44:	e000ed00 	.word	0xe000ed00
 8009e48:	410fc271 	.word	0x410fc271
 8009e4c:	410fc270 	.word	0x410fc270
 8009e50:	e000e400 	.word	0xe000e400
 8009e54:	200091ec 	.word	0x200091ec
 8009e58:	200091f0 	.word	0x200091f0
 8009e5c:	e000ed20 	.word	0xe000ed20
 8009e60:	20000024 	.word	0x20000024
 8009e64:	e000ef34 	.word	0xe000ef34

08009e68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b083      	sub	sp, #12
 8009e6c:	af00      	add	r7, sp, #0
	__asm volatile
 8009e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e72:	f383 8811 	msr	BASEPRI, r3
 8009e76:	f3bf 8f6f 	isb	sy
 8009e7a:	f3bf 8f4f 	dsb	sy
 8009e7e:	607b      	str	r3, [r7, #4]
}
 8009e80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009e82:	4b10      	ldr	r3, [pc, #64]	@ (8009ec4 <vPortEnterCritical+0x5c>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	3301      	adds	r3, #1
 8009e88:	4a0e      	ldr	r2, [pc, #56]	@ (8009ec4 <vPortEnterCritical+0x5c>)
 8009e8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8009ec4 <vPortEnterCritical+0x5c>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	2b01      	cmp	r3, #1
 8009e92:	d110      	bne.n	8009eb6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009e94:	4b0c      	ldr	r3, [pc, #48]	@ (8009ec8 <vPortEnterCritical+0x60>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	b2db      	uxtb	r3, r3
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d00b      	beq.n	8009eb6 <vPortEnterCritical+0x4e>
	__asm volatile
 8009e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ea2:	f383 8811 	msr	BASEPRI, r3
 8009ea6:	f3bf 8f6f 	isb	sy
 8009eaa:	f3bf 8f4f 	dsb	sy
 8009eae:	603b      	str	r3, [r7, #0]
}
 8009eb0:	bf00      	nop
 8009eb2:	bf00      	nop
 8009eb4:	e7fd      	b.n	8009eb2 <vPortEnterCritical+0x4a>
	}
}
 8009eb6:	bf00      	nop
 8009eb8:	370c      	adds	r7, #12
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr
 8009ec2:	bf00      	nop
 8009ec4:	20000024 	.word	0x20000024
 8009ec8:	e000ed04 	.word	0xe000ed04

08009ecc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b083      	sub	sp, #12
 8009ed0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009ed2:	4b12      	ldr	r3, [pc, #72]	@ (8009f1c <vPortExitCritical+0x50>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d10b      	bne.n	8009ef2 <vPortExitCritical+0x26>
	__asm volatile
 8009eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ede:	f383 8811 	msr	BASEPRI, r3
 8009ee2:	f3bf 8f6f 	isb	sy
 8009ee6:	f3bf 8f4f 	dsb	sy
 8009eea:	607b      	str	r3, [r7, #4]
}
 8009eec:	bf00      	nop
 8009eee:	bf00      	nop
 8009ef0:	e7fd      	b.n	8009eee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8009f1c <vPortExitCritical+0x50>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	3b01      	subs	r3, #1
 8009ef8:	4a08      	ldr	r2, [pc, #32]	@ (8009f1c <vPortExitCritical+0x50>)
 8009efa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009efc:	4b07      	ldr	r3, [pc, #28]	@ (8009f1c <vPortExitCritical+0x50>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d105      	bne.n	8009f10 <vPortExitCritical+0x44>
 8009f04:	2300      	movs	r3, #0
 8009f06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	f383 8811 	msr	BASEPRI, r3
}
 8009f0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009f10:	bf00      	nop
 8009f12:	370c      	adds	r7, #12
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr
 8009f1c:	20000024 	.word	0x20000024

08009f20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009f20:	f3ef 8009 	mrs	r0, PSP
 8009f24:	f3bf 8f6f 	isb	sy
 8009f28:	4b15      	ldr	r3, [pc, #84]	@ (8009f80 <pxCurrentTCBConst>)
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	f01e 0f10 	tst.w	lr, #16
 8009f30:	bf08      	it	eq
 8009f32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009f36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f3a:	6010      	str	r0, [r2, #0]
 8009f3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009f40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009f44:	f380 8811 	msr	BASEPRI, r0
 8009f48:	f3bf 8f4f 	dsb	sy
 8009f4c:	f3bf 8f6f 	isb	sy
 8009f50:	f7fe ff88 	bl	8008e64 <vTaskSwitchContext>
 8009f54:	f04f 0000 	mov.w	r0, #0
 8009f58:	f380 8811 	msr	BASEPRI, r0
 8009f5c:	bc09      	pop	{r0, r3}
 8009f5e:	6819      	ldr	r1, [r3, #0]
 8009f60:	6808      	ldr	r0, [r1, #0]
 8009f62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f66:	f01e 0f10 	tst.w	lr, #16
 8009f6a:	bf08      	it	eq
 8009f6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009f70:	f380 8809 	msr	PSP, r0
 8009f74:	f3bf 8f6f 	isb	sy
 8009f78:	4770      	bx	lr
 8009f7a:	bf00      	nop
 8009f7c:	f3af 8000 	nop.w

08009f80 <pxCurrentTCBConst>:
 8009f80:	20008bc0 	.word	0x20008bc0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009f84:	bf00      	nop
 8009f86:	bf00      	nop

08009f88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b082      	sub	sp, #8
 8009f8c:	af00      	add	r7, sp, #0
	__asm volatile
 8009f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f92:	f383 8811 	msr	BASEPRI, r3
 8009f96:	f3bf 8f6f 	isb	sy
 8009f9a:	f3bf 8f4f 	dsb	sy
 8009f9e:	607b      	str	r3, [r7, #4]
}
 8009fa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009fa2:	f7fe fea5 	bl	8008cf0 <xTaskIncrementTick>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d003      	beq.n	8009fb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009fac:	4b06      	ldr	r3, [pc, #24]	@ (8009fc8 <xPortSysTickHandler+0x40>)
 8009fae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fb2:	601a      	str	r2, [r3, #0]
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	f383 8811 	msr	BASEPRI, r3
}
 8009fbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009fc0:	bf00      	nop
 8009fc2:	3708      	adds	r7, #8
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}
 8009fc8:	e000ed04 	.word	0xe000ed04

08009fcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009fcc:	b480      	push	{r7}
 8009fce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009fd0:	4b0b      	ldr	r3, [pc, #44]	@ (800a000 <vPortSetupTimerInterrupt+0x34>)
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009fd6:	4b0b      	ldr	r3, [pc, #44]	@ (800a004 <vPortSetupTimerInterrupt+0x38>)
 8009fd8:	2200      	movs	r2, #0
 8009fda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009fdc:	4b0a      	ldr	r3, [pc, #40]	@ (800a008 <vPortSetupTimerInterrupt+0x3c>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4a0a      	ldr	r2, [pc, #40]	@ (800a00c <vPortSetupTimerInterrupt+0x40>)
 8009fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8009fe6:	099b      	lsrs	r3, r3, #6
 8009fe8:	4a09      	ldr	r2, [pc, #36]	@ (800a010 <vPortSetupTimerInterrupt+0x44>)
 8009fea:	3b01      	subs	r3, #1
 8009fec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009fee:	4b04      	ldr	r3, [pc, #16]	@ (800a000 <vPortSetupTimerInterrupt+0x34>)
 8009ff0:	2207      	movs	r2, #7
 8009ff2:	601a      	str	r2, [r3, #0]
}
 8009ff4:	bf00      	nop
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffc:	4770      	bx	lr
 8009ffe:	bf00      	nop
 800a000:	e000e010 	.word	0xe000e010
 800a004:	e000e018 	.word	0xe000e018
 800a008:	20000018 	.word	0x20000018
 800a00c:	10624dd3 	.word	0x10624dd3
 800a010:	e000e014 	.word	0xe000e014

0800a014 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a014:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a024 <vPortEnableVFP+0x10>
 800a018:	6801      	ldr	r1, [r0, #0]
 800a01a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a01e:	6001      	str	r1, [r0, #0]
 800a020:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a022:	bf00      	nop
 800a024:	e000ed88 	.word	0xe000ed88

0800a028 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a028:	b480      	push	{r7}
 800a02a:	b085      	sub	sp, #20
 800a02c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a02e:	f3ef 8305 	mrs	r3, IPSR
 800a032:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2b0f      	cmp	r3, #15
 800a038:	d915      	bls.n	800a066 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a03a:	4a18      	ldr	r2, [pc, #96]	@ (800a09c <vPortValidateInterruptPriority+0x74>)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	4413      	add	r3, r2
 800a040:	781b      	ldrb	r3, [r3, #0]
 800a042:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a044:	4b16      	ldr	r3, [pc, #88]	@ (800a0a0 <vPortValidateInterruptPriority+0x78>)
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	7afa      	ldrb	r2, [r7, #11]
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d20b      	bcs.n	800a066 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a052:	f383 8811 	msr	BASEPRI, r3
 800a056:	f3bf 8f6f 	isb	sy
 800a05a:	f3bf 8f4f 	dsb	sy
 800a05e:	607b      	str	r3, [r7, #4]
}
 800a060:	bf00      	nop
 800a062:	bf00      	nop
 800a064:	e7fd      	b.n	800a062 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a066:	4b0f      	ldr	r3, [pc, #60]	@ (800a0a4 <vPortValidateInterruptPriority+0x7c>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a06e:	4b0e      	ldr	r3, [pc, #56]	@ (800a0a8 <vPortValidateInterruptPriority+0x80>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	429a      	cmp	r2, r3
 800a074:	d90b      	bls.n	800a08e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a07a:	f383 8811 	msr	BASEPRI, r3
 800a07e:	f3bf 8f6f 	isb	sy
 800a082:	f3bf 8f4f 	dsb	sy
 800a086:	603b      	str	r3, [r7, #0]
}
 800a088:	bf00      	nop
 800a08a:	bf00      	nop
 800a08c:	e7fd      	b.n	800a08a <vPortValidateInterruptPriority+0x62>
	}
 800a08e:	bf00      	nop
 800a090:	3714      	adds	r7, #20
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr
 800a09a:	bf00      	nop
 800a09c:	e000e3f0 	.word	0xe000e3f0
 800a0a0:	200091ec 	.word	0x200091ec
 800a0a4:	e000ed0c 	.word	0xe000ed0c
 800a0a8:	200091f0 	.word	0x200091f0

0800a0ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b08a      	sub	sp, #40	@ 0x28
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a0b8:	f7fe fd5e 	bl	8008b78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a0bc:	4b5c      	ldr	r3, [pc, #368]	@ (800a230 <pvPortMalloc+0x184>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d101      	bne.n	800a0c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a0c4:	f000 f924 	bl	800a310 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a0c8:	4b5a      	ldr	r3, [pc, #360]	@ (800a234 <pvPortMalloc+0x188>)
 800a0ca:	681a      	ldr	r2, [r3, #0]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	4013      	ands	r3, r2
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	f040 8095 	bne.w	800a200 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d01e      	beq.n	800a11a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a0dc:	2208      	movs	r2, #8
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	4413      	add	r3, r2
 800a0e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f003 0307 	and.w	r3, r3, #7
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d015      	beq.n	800a11a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f023 0307 	bic.w	r3, r3, #7
 800a0f4:	3308      	adds	r3, #8
 800a0f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f003 0307 	and.w	r3, r3, #7
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d00b      	beq.n	800a11a <pvPortMalloc+0x6e>
	__asm volatile
 800a102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a106:	f383 8811 	msr	BASEPRI, r3
 800a10a:	f3bf 8f6f 	isb	sy
 800a10e:	f3bf 8f4f 	dsb	sy
 800a112:	617b      	str	r3, [r7, #20]
}
 800a114:	bf00      	nop
 800a116:	bf00      	nop
 800a118:	e7fd      	b.n	800a116 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d06f      	beq.n	800a200 <pvPortMalloc+0x154>
 800a120:	4b45      	ldr	r3, [pc, #276]	@ (800a238 <pvPortMalloc+0x18c>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	687a      	ldr	r2, [r7, #4]
 800a126:	429a      	cmp	r2, r3
 800a128:	d86a      	bhi.n	800a200 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a12a:	4b44      	ldr	r3, [pc, #272]	@ (800a23c <pvPortMalloc+0x190>)
 800a12c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a12e:	4b43      	ldr	r3, [pc, #268]	@ (800a23c <pvPortMalloc+0x190>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a134:	e004      	b.n	800a140 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a138:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a13a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	687a      	ldr	r2, [r7, #4]
 800a146:	429a      	cmp	r2, r3
 800a148:	d903      	bls.n	800a152 <pvPortMalloc+0xa6>
 800a14a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d1f1      	bne.n	800a136 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a152:	4b37      	ldr	r3, [pc, #220]	@ (800a230 <pvPortMalloc+0x184>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a158:	429a      	cmp	r2, r3
 800a15a:	d051      	beq.n	800a200 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a15c:	6a3b      	ldr	r3, [r7, #32]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	2208      	movs	r2, #8
 800a162:	4413      	add	r3, r2
 800a164:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	6a3b      	ldr	r3, [r7, #32]
 800a16c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a16e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a170:	685a      	ldr	r2, [r3, #4]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	1ad2      	subs	r2, r2, r3
 800a176:	2308      	movs	r3, #8
 800a178:	005b      	lsls	r3, r3, #1
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d920      	bls.n	800a1c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a17e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	4413      	add	r3, r2
 800a184:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a186:	69bb      	ldr	r3, [r7, #24]
 800a188:	f003 0307 	and.w	r3, r3, #7
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d00b      	beq.n	800a1a8 <pvPortMalloc+0xfc>
	__asm volatile
 800a190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a194:	f383 8811 	msr	BASEPRI, r3
 800a198:	f3bf 8f6f 	isb	sy
 800a19c:	f3bf 8f4f 	dsb	sy
 800a1a0:	613b      	str	r3, [r7, #16]
}
 800a1a2:	bf00      	nop
 800a1a4:	bf00      	nop
 800a1a6:	e7fd      	b.n	800a1a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a1a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1aa:	685a      	ldr	r2, [r3, #4]
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	1ad2      	subs	r2, r2, r3
 800a1b0:	69bb      	ldr	r3, [r7, #24]
 800a1b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a1b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a1ba:	69b8      	ldr	r0, [r7, #24]
 800a1bc:	f000 f90a 	bl	800a3d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a1c0:	4b1d      	ldr	r3, [pc, #116]	@ (800a238 <pvPortMalloc+0x18c>)
 800a1c2:	681a      	ldr	r2, [r3, #0]
 800a1c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	1ad3      	subs	r3, r2, r3
 800a1ca:	4a1b      	ldr	r2, [pc, #108]	@ (800a238 <pvPortMalloc+0x18c>)
 800a1cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a1ce:	4b1a      	ldr	r3, [pc, #104]	@ (800a238 <pvPortMalloc+0x18c>)
 800a1d0:	681a      	ldr	r2, [r3, #0]
 800a1d2:	4b1b      	ldr	r3, [pc, #108]	@ (800a240 <pvPortMalloc+0x194>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d203      	bcs.n	800a1e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a1da:	4b17      	ldr	r3, [pc, #92]	@ (800a238 <pvPortMalloc+0x18c>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4a18      	ldr	r2, [pc, #96]	@ (800a240 <pvPortMalloc+0x194>)
 800a1e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a1e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1e4:	685a      	ldr	r2, [r3, #4]
 800a1e6:	4b13      	ldr	r3, [pc, #76]	@ (800a234 <pvPortMalloc+0x188>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	431a      	orrs	r2, r3
 800a1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a1f6:	4b13      	ldr	r3, [pc, #76]	@ (800a244 <pvPortMalloc+0x198>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	4a11      	ldr	r2, [pc, #68]	@ (800a244 <pvPortMalloc+0x198>)
 800a1fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a200:	f7fe fcc8 	bl	8008b94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a204:	69fb      	ldr	r3, [r7, #28]
 800a206:	f003 0307 	and.w	r3, r3, #7
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d00b      	beq.n	800a226 <pvPortMalloc+0x17a>
	__asm volatile
 800a20e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a212:	f383 8811 	msr	BASEPRI, r3
 800a216:	f3bf 8f6f 	isb	sy
 800a21a:	f3bf 8f4f 	dsb	sy
 800a21e:	60fb      	str	r3, [r7, #12]
}
 800a220:	bf00      	nop
 800a222:	bf00      	nop
 800a224:	e7fd      	b.n	800a222 <pvPortMalloc+0x176>
	return pvReturn;
 800a226:	69fb      	ldr	r3, [r7, #28]
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3728      	adds	r7, #40	@ 0x28
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}
 800a230:	2000cdfc 	.word	0x2000cdfc
 800a234:	2000ce10 	.word	0x2000ce10
 800a238:	2000ce00 	.word	0x2000ce00
 800a23c:	2000cdf4 	.word	0x2000cdf4
 800a240:	2000ce04 	.word	0x2000ce04
 800a244:	2000ce08 	.word	0x2000ce08

0800a248 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b086      	sub	sp, #24
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d04f      	beq.n	800a2fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a25a:	2308      	movs	r3, #8
 800a25c:	425b      	negs	r3, r3
 800a25e:	697a      	ldr	r2, [r7, #20]
 800a260:	4413      	add	r3, r2
 800a262:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	685a      	ldr	r2, [r3, #4]
 800a26c:	4b25      	ldr	r3, [pc, #148]	@ (800a304 <vPortFree+0xbc>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4013      	ands	r3, r2
 800a272:	2b00      	cmp	r3, #0
 800a274:	d10b      	bne.n	800a28e <vPortFree+0x46>
	__asm volatile
 800a276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a27a:	f383 8811 	msr	BASEPRI, r3
 800a27e:	f3bf 8f6f 	isb	sy
 800a282:	f3bf 8f4f 	dsb	sy
 800a286:	60fb      	str	r3, [r7, #12]
}
 800a288:	bf00      	nop
 800a28a:	bf00      	nop
 800a28c:	e7fd      	b.n	800a28a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d00b      	beq.n	800a2ae <vPortFree+0x66>
	__asm volatile
 800a296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a29a:	f383 8811 	msr	BASEPRI, r3
 800a29e:	f3bf 8f6f 	isb	sy
 800a2a2:	f3bf 8f4f 	dsb	sy
 800a2a6:	60bb      	str	r3, [r7, #8]
}
 800a2a8:	bf00      	nop
 800a2aa:	bf00      	nop
 800a2ac:	e7fd      	b.n	800a2aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	685a      	ldr	r2, [r3, #4]
 800a2b2:	4b14      	ldr	r3, [pc, #80]	@ (800a304 <vPortFree+0xbc>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4013      	ands	r3, r2
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d01e      	beq.n	800a2fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d11a      	bne.n	800a2fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	685a      	ldr	r2, [r3, #4]
 800a2c8:	4b0e      	ldr	r3, [pc, #56]	@ (800a304 <vPortFree+0xbc>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	43db      	mvns	r3, r3
 800a2ce:	401a      	ands	r2, r3
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a2d4:	f7fe fc50 	bl	8008b78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	685a      	ldr	r2, [r3, #4]
 800a2dc:	4b0a      	ldr	r3, [pc, #40]	@ (800a308 <vPortFree+0xc0>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4413      	add	r3, r2
 800a2e2:	4a09      	ldr	r2, [pc, #36]	@ (800a308 <vPortFree+0xc0>)
 800a2e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a2e6:	6938      	ldr	r0, [r7, #16]
 800a2e8:	f000 f874 	bl	800a3d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a2ec:	4b07      	ldr	r3, [pc, #28]	@ (800a30c <vPortFree+0xc4>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	3301      	adds	r3, #1
 800a2f2:	4a06      	ldr	r2, [pc, #24]	@ (800a30c <vPortFree+0xc4>)
 800a2f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a2f6:	f7fe fc4d 	bl	8008b94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a2fa:	bf00      	nop
 800a2fc:	3718      	adds	r7, #24
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}
 800a302:	bf00      	nop
 800a304:	2000ce10 	.word	0x2000ce10
 800a308:	2000ce00 	.word	0x2000ce00
 800a30c:	2000ce0c 	.word	0x2000ce0c

0800a310 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a310:	b480      	push	{r7}
 800a312:	b085      	sub	sp, #20
 800a314:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a316:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a31a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a31c:	4b27      	ldr	r3, [pc, #156]	@ (800a3bc <prvHeapInit+0xac>)
 800a31e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f003 0307 	and.w	r3, r3, #7
 800a326:	2b00      	cmp	r3, #0
 800a328:	d00c      	beq.n	800a344 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	3307      	adds	r3, #7
 800a32e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	f023 0307 	bic.w	r3, r3, #7
 800a336:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a338:	68ba      	ldr	r2, [r7, #8]
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	1ad3      	subs	r3, r2, r3
 800a33e:	4a1f      	ldr	r2, [pc, #124]	@ (800a3bc <prvHeapInit+0xac>)
 800a340:	4413      	add	r3, r2
 800a342:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a348:	4a1d      	ldr	r2, [pc, #116]	@ (800a3c0 <prvHeapInit+0xb0>)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a34e:	4b1c      	ldr	r3, [pc, #112]	@ (800a3c0 <prvHeapInit+0xb0>)
 800a350:	2200      	movs	r2, #0
 800a352:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	68ba      	ldr	r2, [r7, #8]
 800a358:	4413      	add	r3, r2
 800a35a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a35c:	2208      	movs	r2, #8
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	1a9b      	subs	r3, r3, r2
 800a362:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f023 0307 	bic.w	r3, r3, #7
 800a36a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	4a15      	ldr	r2, [pc, #84]	@ (800a3c4 <prvHeapInit+0xb4>)
 800a370:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a372:	4b14      	ldr	r3, [pc, #80]	@ (800a3c4 <prvHeapInit+0xb4>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	2200      	movs	r2, #0
 800a378:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a37a:	4b12      	ldr	r3, [pc, #72]	@ (800a3c4 <prvHeapInit+0xb4>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	2200      	movs	r2, #0
 800a380:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	68fa      	ldr	r2, [r7, #12]
 800a38a:	1ad2      	subs	r2, r2, r3
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a390:	4b0c      	ldr	r3, [pc, #48]	@ (800a3c4 <prvHeapInit+0xb4>)
 800a392:	681a      	ldr	r2, [r3, #0]
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	685b      	ldr	r3, [r3, #4]
 800a39c:	4a0a      	ldr	r2, [pc, #40]	@ (800a3c8 <prvHeapInit+0xb8>)
 800a39e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	4a09      	ldr	r2, [pc, #36]	@ (800a3cc <prvHeapInit+0xbc>)
 800a3a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a3a8:	4b09      	ldr	r3, [pc, #36]	@ (800a3d0 <prvHeapInit+0xc0>)
 800a3aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a3ae:	601a      	str	r2, [r3, #0]
}
 800a3b0:	bf00      	nop
 800a3b2:	3714      	adds	r7, #20
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr
 800a3bc:	200091f4 	.word	0x200091f4
 800a3c0:	2000cdf4 	.word	0x2000cdf4
 800a3c4:	2000cdfc 	.word	0x2000cdfc
 800a3c8:	2000ce04 	.word	0x2000ce04
 800a3cc:	2000ce00 	.word	0x2000ce00
 800a3d0:	2000ce10 	.word	0x2000ce10

0800a3d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b085      	sub	sp, #20
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a3dc:	4b28      	ldr	r3, [pc, #160]	@ (800a480 <prvInsertBlockIntoFreeList+0xac>)
 800a3de:	60fb      	str	r3, [r7, #12]
 800a3e0:	e002      	b.n	800a3e8 <prvInsertBlockIntoFreeList+0x14>
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	60fb      	str	r3, [r7, #12]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	687a      	ldr	r2, [r7, #4]
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d8f7      	bhi.n	800a3e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	68ba      	ldr	r2, [r7, #8]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	429a      	cmp	r2, r3
 800a402:	d108      	bne.n	800a416 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	685a      	ldr	r2, [r3, #4]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	441a      	add	r2, r3
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	68ba      	ldr	r2, [r7, #8]
 800a420:	441a      	add	r2, r3
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	429a      	cmp	r2, r3
 800a428:	d118      	bne.n	800a45c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681a      	ldr	r2, [r3, #0]
 800a42e:	4b15      	ldr	r3, [pc, #84]	@ (800a484 <prvInsertBlockIntoFreeList+0xb0>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	429a      	cmp	r2, r3
 800a434:	d00d      	beq.n	800a452 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	685a      	ldr	r2, [r3, #4]
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	441a      	add	r2, r3
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	681a      	ldr	r2, [r3, #0]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	601a      	str	r2, [r3, #0]
 800a450:	e008      	b.n	800a464 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a452:	4b0c      	ldr	r3, [pc, #48]	@ (800a484 <prvInsertBlockIntoFreeList+0xb0>)
 800a454:	681a      	ldr	r2, [r3, #0]
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	601a      	str	r2, [r3, #0]
 800a45a:	e003      	b.n	800a464 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681a      	ldr	r2, [r3, #0]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a464:	68fa      	ldr	r2, [r7, #12]
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	429a      	cmp	r2, r3
 800a46a:	d002      	beq.n	800a472 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	687a      	ldr	r2, [r7, #4]
 800a470:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a472:	bf00      	nop
 800a474:	3714      	adds	r7, #20
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr
 800a47e:	bf00      	nop
 800a480:	2000cdf4 	.word	0x2000cdf4
 800a484:	2000cdfc 	.word	0x2000cdfc

0800a488 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a488:	4b04      	ldr	r3, [pc, #16]	@ (800a49c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	b10a      	cbz	r2, 800a492 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800a48e:	4803      	ldr	r0, [pc, #12]	@ (800a49c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800a490:	4770      	bx	lr
 800a492:	4a03      	ldr	r2, [pc, #12]	@ (800a4a0 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800a494:	4801      	ldr	r0, [pc, #4]	@ (800a49c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800a496:	6812      	ldr	r2, [r2, #0]
 800a498:	601a      	str	r2, [r3, #0]
 800a49a:	4770      	bx	lr
 800a49c:	20000030 	.word	0x20000030
 800a4a0:	2000031c 	.word	0x2000031c

0800a4a4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a4a4:	4a02      	ldr	r2, [pc, #8]	@ (800a4b0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800a4a6:	4b03      	ldr	r3, [pc, #12]	@ (800a4b4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800a4a8:	6812      	ldr	r2, [r2, #0]
 800a4aa:	601a      	str	r2, [r3, #0]
 800a4ac:	4770      	bx	lr
 800a4ae:	bf00      	nop
 800a4b0:	2000031c 	.word	0x2000031c
 800a4b4:	20000030 	.word	0x20000030

0800a4b8 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800a4b8:	f005 bf3c 	b.w	8010334 <geometry_msgs__msg__Twist__init>

0800a4bc <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800a4bc:	f005 bf5e 	b.w	801037c <geometry_msgs__msg__Twist__fini>

0800a4c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a4c0:	b510      	push	{r4, lr}
 800a4c2:	f000 f819 	bl	800a4f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a4c6:	4c07      	ldr	r4, [pc, #28]	@ (800a4e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800a4c8:	60e0      	str	r0, [r4, #12]
 800a4ca:	f000 f815 	bl	800a4f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a4ce:	4b06      	ldr	r3, [pc, #24]	@ (800a4e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800a4d0:	64a0      	str	r0, [r4, #72]	@ 0x48
 800a4d2:	681a      	ldr	r2, [r3, #0]
 800a4d4:	b10a      	cbz	r2, 800a4da <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800a4d6:	4804      	ldr	r0, [pc, #16]	@ (800a4e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800a4d8:	bd10      	pop	{r4, pc}
 800a4da:	4a04      	ldr	r2, [pc, #16]	@ (800a4ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800a4dc:	4802      	ldr	r0, [pc, #8]	@ (800a4e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800a4de:	6812      	ldr	r2, [r2, #0]
 800a4e0:	601a      	str	r2, [r3, #0]
 800a4e2:	bd10      	pop	{r4, pc}
 800a4e4:	2000003c 	.word	0x2000003c
 800a4e8:	200000b4 	.word	0x200000b4
 800a4ec:	20000320 	.word	0x20000320

0800a4f0 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800a4f0:	f005 bf50 	b.w	8010394 <geometry_msgs__msg__Vector3__init>

0800a4f4 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800a4f4:	f005 bf52 	b.w	801039c <geometry_msgs__msg__Vector3__fini>

0800a4f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800a4f8:	4b04      	ldr	r3, [pc, #16]	@ (800a50c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800a4fa:	681a      	ldr	r2, [r3, #0]
 800a4fc:	b10a      	cbz	r2, 800a502 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800a4fe:	4803      	ldr	r0, [pc, #12]	@ (800a50c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800a500:	4770      	bx	lr
 800a502:	4a03      	ldr	r2, [pc, #12]	@ (800a510 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800a504:	4801      	ldr	r0, [pc, #4]	@ (800a50c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800a506:	6812      	ldr	r2, [r2, #0]
 800a508:	601a      	str	r2, [r3, #0]
 800a50a:	4770      	bx	lr
 800a50c:	20000174 	.word	0x20000174
 800a510:	20000320 	.word	0x20000320

0800a514 <get_serialized_size_geometry_msgs__msg__Twist>:
 800a514:	b570      	push	{r4, r5, r6, lr}
 800a516:	4604      	mov	r4, r0
 800a518:	b148      	cbz	r0, 800a52e <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800a51a:	460d      	mov	r5, r1
 800a51c:	f000 f86e 	bl	800a5fc <get_serialized_size_geometry_msgs__msg__Vector3>
 800a520:	4606      	mov	r6, r0
 800a522:	1829      	adds	r1, r5, r0
 800a524:	f104 0018 	add.w	r0, r4, #24
 800a528:	f000 f868 	bl	800a5fc <get_serialized_size_geometry_msgs__msg__Vector3>
 800a52c:	4430      	add	r0, r6
 800a52e:	bd70      	pop	{r4, r5, r6, pc}

0800a530 <_Twist__cdr_deserialize>:
 800a530:	b570      	push	{r4, r5, r6, lr}
 800a532:	460c      	mov	r4, r1
 800a534:	b189      	cbz	r1, 800a55a <_Twist__cdr_deserialize+0x2a>
 800a536:	4605      	mov	r5, r0
 800a538:	f000 f8ec 	bl	800a714 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a53c:	6843      	ldr	r3, [r0, #4]
 800a53e:	4621      	mov	r1, r4
 800a540:	68db      	ldr	r3, [r3, #12]
 800a542:	4628      	mov	r0, r5
 800a544:	4798      	blx	r3
 800a546:	f000 f8e5 	bl	800a714 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a54a:	6843      	ldr	r3, [r0, #4]
 800a54c:	f104 0118 	add.w	r1, r4, #24
 800a550:	4628      	mov	r0, r5
 800a552:	68db      	ldr	r3, [r3, #12]
 800a554:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a558:	4718      	bx	r3
 800a55a:	4608      	mov	r0, r1
 800a55c:	bd70      	pop	{r4, r5, r6, pc}
 800a55e:	bf00      	nop

0800a560 <_Twist__cdr_serialize>:
 800a560:	b510      	push	{r4, lr}
 800a562:	b082      	sub	sp, #8
 800a564:	9101      	str	r1, [sp, #4]
 800a566:	b190      	cbz	r0, 800a58e <_Twist__cdr_serialize+0x2e>
 800a568:	4604      	mov	r4, r0
 800a56a:	f000 f8d3 	bl	800a714 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a56e:	6843      	ldr	r3, [r0, #4]
 800a570:	9901      	ldr	r1, [sp, #4]
 800a572:	689b      	ldr	r3, [r3, #8]
 800a574:	4620      	mov	r0, r4
 800a576:	4798      	blx	r3
 800a578:	f000 f8cc 	bl	800a714 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a57c:	6843      	ldr	r3, [r0, #4]
 800a57e:	9901      	ldr	r1, [sp, #4]
 800a580:	689b      	ldr	r3, [r3, #8]
 800a582:	f104 0018 	add.w	r0, r4, #24
 800a586:	b002      	add	sp, #8
 800a588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a58c:	4718      	bx	r3
 800a58e:	b002      	add	sp, #8
 800a590:	bd10      	pop	{r4, pc}
 800a592:	bf00      	nop

0800a594 <_Twist__get_serialized_size>:
 800a594:	b538      	push	{r3, r4, r5, lr}
 800a596:	4604      	mov	r4, r0
 800a598:	b148      	cbz	r0, 800a5ae <_Twist__get_serialized_size+0x1a>
 800a59a:	2100      	movs	r1, #0
 800a59c:	f000 f82e 	bl	800a5fc <get_serialized_size_geometry_msgs__msg__Vector3>
 800a5a0:	4605      	mov	r5, r0
 800a5a2:	4601      	mov	r1, r0
 800a5a4:	f104 0018 	add.w	r0, r4, #24
 800a5a8:	f000 f828 	bl	800a5fc <get_serialized_size_geometry_msgs__msg__Vector3>
 800a5ac:	4428      	add	r0, r5
 800a5ae:	bd38      	pop	{r3, r4, r5, pc}

0800a5b0 <_Twist__max_serialized_size>:
 800a5b0:	b510      	push	{r4, lr}
 800a5b2:	b082      	sub	sp, #8
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	2100      	movs	r1, #0
 800a5b8:	f10d 0007 	add.w	r0, sp, #7
 800a5bc:	f88d 3007 	strb.w	r3, [sp, #7]
 800a5c0:	f000 f88c 	bl	800a6dc <max_serialized_size_geometry_msgs__msg__Vector3>
 800a5c4:	4604      	mov	r4, r0
 800a5c6:	4601      	mov	r1, r0
 800a5c8:	f10d 0007 	add.w	r0, sp, #7
 800a5cc:	f000 f886 	bl	800a6dc <max_serialized_size_geometry_msgs__msg__Vector3>
 800a5d0:	4420      	add	r0, r4
 800a5d2:	b002      	add	sp, #8
 800a5d4:	bd10      	pop	{r4, pc}
 800a5d6:	bf00      	nop

0800a5d8 <max_serialized_size_geometry_msgs__msg__Twist>:
 800a5d8:	2301      	movs	r3, #1
 800a5da:	b570      	push	{r4, r5, r6, lr}
 800a5dc:	7003      	strb	r3, [r0, #0]
 800a5de:	4605      	mov	r5, r0
 800a5e0:	460e      	mov	r6, r1
 800a5e2:	f000 f87b 	bl	800a6dc <max_serialized_size_geometry_msgs__msg__Vector3>
 800a5e6:	4604      	mov	r4, r0
 800a5e8:	1831      	adds	r1, r6, r0
 800a5ea:	4628      	mov	r0, r5
 800a5ec:	f000 f876 	bl	800a6dc <max_serialized_size_geometry_msgs__msg__Vector3>
 800a5f0:	4420      	add	r0, r4
 800a5f2:	bd70      	pop	{r4, r5, r6, pc}

0800a5f4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a5f4:	4800      	ldr	r0, [pc, #0]	@ (800a5f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800a5f6:	4770      	bx	lr
 800a5f8:	20000180 	.word	0x20000180

0800a5fc <get_serialized_size_geometry_msgs__msg__Vector3>:
 800a5fc:	b1b8      	cbz	r0, 800a62e <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800a5fe:	b538      	push	{r3, r4, r5, lr}
 800a600:	460d      	mov	r5, r1
 800a602:	4628      	mov	r0, r5
 800a604:	2108      	movs	r1, #8
 800a606:	f001 fb9d 	bl	800bd44 <ucdr_alignment>
 800a60a:	f105 0308 	add.w	r3, r5, #8
 800a60e:	181c      	adds	r4, r3, r0
 800a610:	2108      	movs	r1, #8
 800a612:	4620      	mov	r0, r4
 800a614:	f001 fb96 	bl	800bd44 <ucdr_alignment>
 800a618:	3008      	adds	r0, #8
 800a61a:	4404      	add	r4, r0
 800a61c:	2108      	movs	r1, #8
 800a61e:	4620      	mov	r0, r4
 800a620:	f001 fb90 	bl	800bd44 <ucdr_alignment>
 800a624:	f1c5 0508 	rsb	r5, r5, #8
 800a628:	4428      	add	r0, r5
 800a62a:	4420      	add	r0, r4
 800a62c:	bd38      	pop	{r3, r4, r5, pc}
 800a62e:	4770      	bx	lr

0800a630 <_Vector3__cdr_deserialize>:
 800a630:	b538      	push	{r3, r4, r5, lr}
 800a632:	460c      	mov	r4, r1
 800a634:	b171      	cbz	r1, 800a654 <_Vector3__cdr_deserialize+0x24>
 800a636:	4605      	mov	r5, r0
 800a638:	f001 f998 	bl	800b96c <ucdr_deserialize_double>
 800a63c:	f104 0108 	add.w	r1, r4, #8
 800a640:	4628      	mov	r0, r5
 800a642:	f001 f993 	bl	800b96c <ucdr_deserialize_double>
 800a646:	f104 0110 	add.w	r1, r4, #16
 800a64a:	4628      	mov	r0, r5
 800a64c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a650:	f001 b98c 	b.w	800b96c <ucdr_deserialize_double>
 800a654:	4608      	mov	r0, r1
 800a656:	bd38      	pop	{r3, r4, r5, pc}

0800a658 <_Vector3__cdr_serialize>:
 800a658:	b198      	cbz	r0, 800a682 <_Vector3__cdr_serialize+0x2a>
 800a65a:	b538      	push	{r3, r4, r5, lr}
 800a65c:	ed90 0b00 	vldr	d0, [r0]
 800a660:	460d      	mov	r5, r1
 800a662:	4604      	mov	r4, r0
 800a664:	4608      	mov	r0, r1
 800a666:	f000 ffdf 	bl	800b628 <ucdr_serialize_double>
 800a66a:	ed94 0b02 	vldr	d0, [r4, #8]
 800a66e:	4628      	mov	r0, r5
 800a670:	f000 ffda 	bl	800b628 <ucdr_serialize_double>
 800a674:	ed94 0b04 	vldr	d0, [r4, #16]
 800a678:	4628      	mov	r0, r5
 800a67a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a67e:	f000 bfd3 	b.w	800b628 <ucdr_serialize_double>
 800a682:	4770      	bx	lr

0800a684 <_Vector3__get_serialized_size>:
 800a684:	b198      	cbz	r0, 800a6ae <_Vector3__get_serialized_size+0x2a>
 800a686:	b510      	push	{r4, lr}
 800a688:	2108      	movs	r1, #8
 800a68a:	2000      	movs	r0, #0
 800a68c:	f001 fb5a 	bl	800bd44 <ucdr_alignment>
 800a690:	f100 0408 	add.w	r4, r0, #8
 800a694:	2108      	movs	r1, #8
 800a696:	4620      	mov	r0, r4
 800a698:	f001 fb54 	bl	800bd44 <ucdr_alignment>
 800a69c:	3008      	adds	r0, #8
 800a69e:	4404      	add	r4, r0
 800a6a0:	2108      	movs	r1, #8
 800a6a2:	4620      	mov	r0, r4
 800a6a4:	f001 fb4e 	bl	800bd44 <ucdr_alignment>
 800a6a8:	3008      	adds	r0, #8
 800a6aa:	4420      	add	r0, r4
 800a6ac:	bd10      	pop	{r4, pc}
 800a6ae:	4770      	bx	lr

0800a6b0 <_Vector3__max_serialized_size>:
 800a6b0:	b538      	push	{r3, r4, r5, lr}
 800a6b2:	2108      	movs	r1, #8
 800a6b4:	2000      	movs	r0, #0
 800a6b6:	f001 fb45 	bl	800bd44 <ucdr_alignment>
 800a6ba:	f100 0508 	add.w	r5, r0, #8
 800a6be:	2108      	movs	r1, #8
 800a6c0:	4628      	mov	r0, r5
 800a6c2:	f001 fb3f 	bl	800bd44 <ucdr_alignment>
 800a6c6:	f100 0408 	add.w	r4, r0, #8
 800a6ca:	442c      	add	r4, r5
 800a6cc:	2108      	movs	r1, #8
 800a6ce:	4620      	mov	r0, r4
 800a6d0:	f001 fb38 	bl	800bd44 <ucdr_alignment>
 800a6d4:	3008      	adds	r0, #8
 800a6d6:	4420      	add	r0, r4
 800a6d8:	bd38      	pop	{r3, r4, r5, pc}
 800a6da:	bf00      	nop

0800a6dc <max_serialized_size_geometry_msgs__msg__Vector3>:
 800a6dc:	b570      	push	{r4, r5, r6, lr}
 800a6de:	2301      	movs	r3, #1
 800a6e0:	460c      	mov	r4, r1
 800a6e2:	7003      	strb	r3, [r0, #0]
 800a6e4:	2108      	movs	r1, #8
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	f001 fb2c 	bl	800bd44 <ucdr_alignment>
 800a6ec:	f104 0508 	add.w	r5, r4, #8
 800a6f0:	1946      	adds	r6, r0, r5
 800a6f2:	2108      	movs	r1, #8
 800a6f4:	4630      	mov	r0, r6
 800a6f6:	f001 fb25 	bl	800bd44 <ucdr_alignment>
 800a6fa:	f100 0508 	add.w	r5, r0, #8
 800a6fe:	4435      	add	r5, r6
 800a700:	2108      	movs	r1, #8
 800a702:	4628      	mov	r0, r5
 800a704:	f001 fb1e 	bl	800bd44 <ucdr_alignment>
 800a708:	f1c4 0408 	rsb	r4, r4, #8
 800a70c:	4420      	add	r0, r4
 800a70e:	4428      	add	r0, r5
 800a710:	bd70      	pop	{r4, r5, r6, pc}
 800a712:	bf00      	nop

0800a714 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800a714:	4800      	ldr	r0, [pc, #0]	@ (800a718 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800a716:	4770      	bx	lr
 800a718:	200001a8 	.word	0x200001a8

0800a71c <ucdr_serialize_bool>:
 800a71c:	b538      	push	{r3, r4, r5, lr}
 800a71e:	460d      	mov	r5, r1
 800a720:	2101      	movs	r1, #1
 800a722:	4604      	mov	r4, r0
 800a724:	f001 fac2 	bl	800bcac <ucdr_check_final_buffer_behavior>
 800a728:	b148      	cbz	r0, 800a73e <ucdr_serialize_bool+0x22>
 800a72a:	68a3      	ldr	r3, [r4, #8]
 800a72c:	701d      	strb	r5, [r3, #0]
 800a72e:	68a2      	ldr	r2, [r4, #8]
 800a730:	6923      	ldr	r3, [r4, #16]
 800a732:	2101      	movs	r1, #1
 800a734:	440a      	add	r2, r1
 800a736:	440b      	add	r3, r1
 800a738:	60a2      	str	r2, [r4, #8]
 800a73a:	6123      	str	r3, [r4, #16]
 800a73c:	7561      	strb	r1, [r4, #21]
 800a73e:	7da0      	ldrb	r0, [r4, #22]
 800a740:	f080 0001 	eor.w	r0, r0, #1
 800a744:	bd38      	pop	{r3, r4, r5, pc}
 800a746:	bf00      	nop

0800a748 <ucdr_deserialize_bool>:
 800a748:	b538      	push	{r3, r4, r5, lr}
 800a74a:	460d      	mov	r5, r1
 800a74c:	2101      	movs	r1, #1
 800a74e:	4604      	mov	r4, r0
 800a750:	f001 faac 	bl	800bcac <ucdr_check_final_buffer_behavior>
 800a754:	b160      	cbz	r0, 800a770 <ucdr_deserialize_bool+0x28>
 800a756:	68a2      	ldr	r2, [r4, #8]
 800a758:	6923      	ldr	r3, [r4, #16]
 800a75a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800a75e:	3900      	subs	r1, #0
 800a760:	bf18      	it	ne
 800a762:	2101      	movne	r1, #1
 800a764:	7029      	strb	r1, [r5, #0]
 800a766:	3301      	adds	r3, #1
 800a768:	2101      	movs	r1, #1
 800a76a:	60a2      	str	r2, [r4, #8]
 800a76c:	6123      	str	r3, [r4, #16]
 800a76e:	7561      	strb	r1, [r4, #21]
 800a770:	7da0      	ldrb	r0, [r4, #22]
 800a772:	f080 0001 	eor.w	r0, r0, #1
 800a776:	bd38      	pop	{r3, r4, r5, pc}

0800a778 <ucdr_serialize_uint8_t>:
 800a778:	b538      	push	{r3, r4, r5, lr}
 800a77a:	460d      	mov	r5, r1
 800a77c:	2101      	movs	r1, #1
 800a77e:	4604      	mov	r4, r0
 800a780:	f001 fa94 	bl	800bcac <ucdr_check_final_buffer_behavior>
 800a784:	b148      	cbz	r0, 800a79a <ucdr_serialize_uint8_t+0x22>
 800a786:	68a3      	ldr	r3, [r4, #8]
 800a788:	701d      	strb	r5, [r3, #0]
 800a78a:	68a2      	ldr	r2, [r4, #8]
 800a78c:	6923      	ldr	r3, [r4, #16]
 800a78e:	2101      	movs	r1, #1
 800a790:	440a      	add	r2, r1
 800a792:	440b      	add	r3, r1
 800a794:	60a2      	str	r2, [r4, #8]
 800a796:	6123      	str	r3, [r4, #16]
 800a798:	7561      	strb	r1, [r4, #21]
 800a79a:	7da0      	ldrb	r0, [r4, #22]
 800a79c:	f080 0001 	eor.w	r0, r0, #1
 800a7a0:	bd38      	pop	{r3, r4, r5, pc}
 800a7a2:	bf00      	nop

0800a7a4 <ucdr_deserialize_uint8_t>:
 800a7a4:	b538      	push	{r3, r4, r5, lr}
 800a7a6:	460d      	mov	r5, r1
 800a7a8:	2101      	movs	r1, #1
 800a7aa:	4604      	mov	r4, r0
 800a7ac:	f001 fa7e 	bl	800bcac <ucdr_check_final_buffer_behavior>
 800a7b0:	b150      	cbz	r0, 800a7c8 <ucdr_deserialize_uint8_t+0x24>
 800a7b2:	68a3      	ldr	r3, [r4, #8]
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	702b      	strb	r3, [r5, #0]
 800a7b8:	68a2      	ldr	r2, [r4, #8]
 800a7ba:	6923      	ldr	r3, [r4, #16]
 800a7bc:	2101      	movs	r1, #1
 800a7be:	440a      	add	r2, r1
 800a7c0:	440b      	add	r3, r1
 800a7c2:	60a2      	str	r2, [r4, #8]
 800a7c4:	6123      	str	r3, [r4, #16]
 800a7c6:	7561      	strb	r1, [r4, #21]
 800a7c8:	7da0      	ldrb	r0, [r4, #22]
 800a7ca:	f080 0001 	eor.w	r0, r0, #1
 800a7ce:	bd38      	pop	{r3, r4, r5, pc}

0800a7d0 <ucdr_serialize_uint16_t>:
 800a7d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7d4:	b082      	sub	sp, #8
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	2102      	movs	r1, #2
 800a7da:	4604      	mov	r4, r0
 800a7dc:	f8ad 3006 	strh.w	r3, [sp, #6]
 800a7e0:	f001 fab8 	bl	800bd54 <ucdr_buffer_alignment>
 800a7e4:	4601      	mov	r1, r0
 800a7e6:	4620      	mov	r0, r4
 800a7e8:	7d67      	ldrb	r7, [r4, #21]
 800a7ea:	f001 faf7 	bl	800bddc <ucdr_advance_buffer>
 800a7ee:	2102      	movs	r1, #2
 800a7f0:	4620      	mov	r0, r4
 800a7f2:	f001 fa4f 	bl	800bc94 <ucdr_check_buffer_available_for>
 800a7f6:	bb78      	cbnz	r0, 800a858 <ucdr_serialize_uint16_t+0x88>
 800a7f8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800a7fc:	42ab      	cmp	r3, r5
 800a7fe:	d926      	bls.n	800a84e <ucdr_serialize_uint16_t+0x7e>
 800a800:	1b5e      	subs	r6, r3, r5
 800a802:	60a3      	str	r3, [r4, #8]
 800a804:	6923      	ldr	r3, [r4, #16]
 800a806:	f1c6 0802 	rsb	r8, r6, #2
 800a80a:	4433      	add	r3, r6
 800a80c:	6123      	str	r3, [r4, #16]
 800a80e:	4641      	mov	r1, r8
 800a810:	4620      	mov	r0, r4
 800a812:	f001 fa4b 	bl	800bcac <ucdr_check_final_buffer_behavior>
 800a816:	2800      	cmp	r0, #0
 800a818:	d03b      	beq.n	800a892 <ucdr_serialize_uint16_t+0xc2>
 800a81a:	7d23      	ldrb	r3, [r4, #20]
 800a81c:	2b01      	cmp	r3, #1
 800a81e:	d04a      	beq.n	800a8b6 <ucdr_serialize_uint16_t+0xe6>
 800a820:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a824:	702b      	strb	r3, [r5, #0]
 800a826:	2e00      	cmp	r6, #0
 800a828:	d040      	beq.n	800a8ac <ucdr_serialize_uint16_t+0xdc>
 800a82a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a82e:	706b      	strb	r3, [r5, #1]
 800a830:	6923      	ldr	r3, [r4, #16]
 800a832:	68a2      	ldr	r2, [r4, #8]
 800a834:	7da0      	ldrb	r0, [r4, #22]
 800a836:	3302      	adds	r3, #2
 800a838:	1b9e      	subs	r6, r3, r6
 800a83a:	4442      	add	r2, r8
 800a83c:	2302      	movs	r3, #2
 800a83e:	f080 0001 	eor.w	r0, r0, #1
 800a842:	60a2      	str	r2, [r4, #8]
 800a844:	6126      	str	r6, [r4, #16]
 800a846:	7563      	strb	r3, [r4, #21]
 800a848:	b002      	add	sp, #8
 800a84a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a84e:	2102      	movs	r1, #2
 800a850:	4620      	mov	r0, r4
 800a852:	f001 fa2b 	bl	800bcac <ucdr_check_final_buffer_behavior>
 800a856:	b190      	cbz	r0, 800a87e <ucdr_serialize_uint16_t+0xae>
 800a858:	7d23      	ldrb	r3, [r4, #20]
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	68a3      	ldr	r3, [r4, #8]
 800a85e:	d014      	beq.n	800a88a <ucdr_serialize_uint16_t+0xba>
 800a860:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a864:	701a      	strb	r2, [r3, #0]
 800a866:	68a3      	ldr	r3, [r4, #8]
 800a868:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a86c:	705a      	strb	r2, [r3, #1]
 800a86e:	68a2      	ldr	r2, [r4, #8]
 800a870:	6923      	ldr	r3, [r4, #16]
 800a872:	3202      	adds	r2, #2
 800a874:	3302      	adds	r3, #2
 800a876:	2102      	movs	r1, #2
 800a878:	60a2      	str	r2, [r4, #8]
 800a87a:	6123      	str	r3, [r4, #16]
 800a87c:	7561      	strb	r1, [r4, #21]
 800a87e:	7da0      	ldrb	r0, [r4, #22]
 800a880:	f080 0001 	eor.w	r0, r0, #1
 800a884:	b002      	add	sp, #8
 800a886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a88a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a88e:	801a      	strh	r2, [r3, #0]
 800a890:	e7ed      	b.n	800a86e <ucdr_serialize_uint16_t+0x9e>
 800a892:	68a2      	ldr	r2, [r4, #8]
 800a894:	6923      	ldr	r3, [r4, #16]
 800a896:	7da0      	ldrb	r0, [r4, #22]
 800a898:	7567      	strb	r7, [r4, #21]
 800a89a:	1b92      	subs	r2, r2, r6
 800a89c:	1b9b      	subs	r3, r3, r6
 800a89e:	f080 0001 	eor.w	r0, r0, #1
 800a8a2:	60a2      	str	r2, [r4, #8]
 800a8a4:	6123      	str	r3, [r4, #16]
 800a8a6:	b002      	add	sp, #8
 800a8a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8ac:	68a3      	ldr	r3, [r4, #8]
 800a8ae:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a8b2:	701a      	strb	r2, [r3, #0]
 800a8b4:	e7bc      	b.n	800a830 <ucdr_serialize_uint16_t+0x60>
 800a8b6:	4628      	mov	r0, r5
 800a8b8:	f10d 0506 	add.w	r5, sp, #6
 800a8bc:	4629      	mov	r1, r5
 800a8be:	4632      	mov	r2, r6
 800a8c0:	f00f f871 	bl	80199a6 <memcpy>
 800a8c4:	68a0      	ldr	r0, [r4, #8]
 800a8c6:	4642      	mov	r2, r8
 800a8c8:	19a9      	adds	r1, r5, r6
 800a8ca:	f00f f86c 	bl	80199a6 <memcpy>
 800a8ce:	e7af      	b.n	800a830 <ucdr_serialize_uint16_t+0x60>

0800a8d0 <ucdr_serialize_endian_uint16_t>:
 800a8d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a8d4:	b083      	sub	sp, #12
 800a8d6:	460d      	mov	r5, r1
 800a8d8:	2102      	movs	r1, #2
 800a8da:	4604      	mov	r4, r0
 800a8dc:	f8ad 2006 	strh.w	r2, [sp, #6]
 800a8e0:	f001 fa38 	bl	800bd54 <ucdr_buffer_alignment>
 800a8e4:	4601      	mov	r1, r0
 800a8e6:	4620      	mov	r0, r4
 800a8e8:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a8ec:	f001 fa76 	bl	800bddc <ucdr_advance_buffer>
 800a8f0:	2102      	movs	r1, #2
 800a8f2:	4620      	mov	r0, r4
 800a8f4:	f001 f9ce 	bl	800bc94 <ucdr_check_buffer_available_for>
 800a8f8:	bb70      	cbnz	r0, 800a958 <ucdr_serialize_endian_uint16_t+0x88>
 800a8fa:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800a8fe:	42be      	cmp	r6, r7
 800a900:	d925      	bls.n	800a94e <ucdr_serialize_endian_uint16_t+0x7e>
 800a902:	6923      	ldr	r3, [r4, #16]
 800a904:	60a6      	str	r6, [r4, #8]
 800a906:	1bf6      	subs	r6, r6, r7
 800a908:	4433      	add	r3, r6
 800a90a:	f1c6 0902 	rsb	r9, r6, #2
 800a90e:	6123      	str	r3, [r4, #16]
 800a910:	4649      	mov	r1, r9
 800a912:	4620      	mov	r0, r4
 800a914:	f001 f9ca 	bl	800bcac <ucdr_check_final_buffer_behavior>
 800a918:	2800      	cmp	r0, #0
 800a91a:	d039      	beq.n	800a990 <ucdr_serialize_endian_uint16_t+0xc0>
 800a91c:	2d01      	cmp	r5, #1
 800a91e:	d04a      	beq.n	800a9b6 <ucdr_serialize_endian_uint16_t+0xe6>
 800a920:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a924:	703b      	strb	r3, [r7, #0]
 800a926:	2e00      	cmp	r6, #0
 800a928:	d040      	beq.n	800a9ac <ucdr_serialize_endian_uint16_t+0xdc>
 800a92a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a92e:	707b      	strb	r3, [r7, #1]
 800a930:	6923      	ldr	r3, [r4, #16]
 800a932:	68a2      	ldr	r2, [r4, #8]
 800a934:	7da0      	ldrb	r0, [r4, #22]
 800a936:	3302      	adds	r3, #2
 800a938:	444a      	add	r2, r9
 800a93a:	1b9b      	subs	r3, r3, r6
 800a93c:	2102      	movs	r1, #2
 800a93e:	f080 0001 	eor.w	r0, r0, #1
 800a942:	60a2      	str	r2, [r4, #8]
 800a944:	6123      	str	r3, [r4, #16]
 800a946:	7561      	strb	r1, [r4, #21]
 800a948:	b003      	add	sp, #12
 800a94a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a94e:	2102      	movs	r1, #2
 800a950:	4620      	mov	r0, r4
 800a952:	f001 f9ab 	bl	800bcac <ucdr_check_final_buffer_behavior>
 800a956:	b188      	cbz	r0, 800a97c <ucdr_serialize_endian_uint16_t+0xac>
 800a958:	2d01      	cmp	r5, #1
 800a95a:	68a3      	ldr	r3, [r4, #8]
 800a95c:	d014      	beq.n	800a988 <ucdr_serialize_endian_uint16_t+0xb8>
 800a95e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a962:	701a      	strb	r2, [r3, #0]
 800a964:	68a3      	ldr	r3, [r4, #8]
 800a966:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a96a:	705a      	strb	r2, [r3, #1]
 800a96c:	68a2      	ldr	r2, [r4, #8]
 800a96e:	6923      	ldr	r3, [r4, #16]
 800a970:	3202      	adds	r2, #2
 800a972:	3302      	adds	r3, #2
 800a974:	2102      	movs	r1, #2
 800a976:	60a2      	str	r2, [r4, #8]
 800a978:	6123      	str	r3, [r4, #16]
 800a97a:	7561      	strb	r1, [r4, #21]
 800a97c:	7da0      	ldrb	r0, [r4, #22]
 800a97e:	f080 0001 	eor.w	r0, r0, #1
 800a982:	b003      	add	sp, #12
 800a984:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a988:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a98c:	801a      	strh	r2, [r3, #0]
 800a98e:	e7ed      	b.n	800a96c <ucdr_serialize_endian_uint16_t+0x9c>
 800a990:	68a2      	ldr	r2, [r4, #8]
 800a992:	6923      	ldr	r3, [r4, #16]
 800a994:	7da0      	ldrb	r0, [r4, #22]
 800a996:	f884 8015 	strb.w	r8, [r4, #21]
 800a99a:	1b92      	subs	r2, r2, r6
 800a99c:	1b9b      	subs	r3, r3, r6
 800a99e:	f080 0001 	eor.w	r0, r0, #1
 800a9a2:	60a2      	str	r2, [r4, #8]
 800a9a4:	6123      	str	r3, [r4, #16]
 800a9a6:	b003      	add	sp, #12
 800a9a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9ac:	68a3      	ldr	r3, [r4, #8]
 800a9ae:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a9b2:	701a      	strb	r2, [r3, #0]
 800a9b4:	e7bc      	b.n	800a930 <ucdr_serialize_endian_uint16_t+0x60>
 800a9b6:	f10d 0506 	add.w	r5, sp, #6
 800a9ba:	4629      	mov	r1, r5
 800a9bc:	4632      	mov	r2, r6
 800a9be:	4638      	mov	r0, r7
 800a9c0:	f00e fff1 	bl	80199a6 <memcpy>
 800a9c4:	68a0      	ldr	r0, [r4, #8]
 800a9c6:	464a      	mov	r2, r9
 800a9c8:	19a9      	adds	r1, r5, r6
 800a9ca:	f00e ffec 	bl	80199a6 <memcpy>
 800a9ce:	e7af      	b.n	800a930 <ucdr_serialize_endian_uint16_t+0x60>

0800a9d0 <ucdr_deserialize_uint16_t>:
 800a9d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9d4:	460d      	mov	r5, r1
 800a9d6:	2102      	movs	r1, #2
 800a9d8:	4604      	mov	r4, r0
 800a9da:	f001 f9bb 	bl	800bd54 <ucdr_buffer_alignment>
 800a9de:	4601      	mov	r1, r0
 800a9e0:	4620      	mov	r0, r4
 800a9e2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a9e6:	f001 f9f9 	bl	800bddc <ucdr_advance_buffer>
 800a9ea:	2102      	movs	r1, #2
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	f001 f951 	bl	800bc94 <ucdr_check_buffer_available_for>
 800a9f2:	bb60      	cbnz	r0, 800aa4e <ucdr_deserialize_uint16_t+0x7e>
 800a9f4:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800a9f8:	42be      	cmp	r6, r7
 800a9fa:	d923      	bls.n	800aa44 <ucdr_deserialize_uint16_t+0x74>
 800a9fc:	6923      	ldr	r3, [r4, #16]
 800a9fe:	60a6      	str	r6, [r4, #8]
 800aa00:	1bf6      	subs	r6, r6, r7
 800aa02:	4433      	add	r3, r6
 800aa04:	f1c6 0902 	rsb	r9, r6, #2
 800aa08:	6123      	str	r3, [r4, #16]
 800aa0a:	4649      	mov	r1, r9
 800aa0c:	4620      	mov	r0, r4
 800aa0e:	f001 f94d 	bl	800bcac <ucdr_check_final_buffer_behavior>
 800aa12:	2800      	cmp	r0, #0
 800aa14:	d034      	beq.n	800aa80 <ucdr_deserialize_uint16_t+0xb0>
 800aa16:	7d23      	ldrb	r3, [r4, #20]
 800aa18:	2b01      	cmp	r3, #1
 800aa1a:	d042      	beq.n	800aaa2 <ucdr_deserialize_uint16_t+0xd2>
 800aa1c:	787b      	ldrb	r3, [r7, #1]
 800aa1e:	702b      	strb	r3, [r5, #0]
 800aa20:	2e00      	cmp	r6, #0
 800aa22:	d03a      	beq.n	800aa9a <ucdr_deserialize_uint16_t+0xca>
 800aa24:	783b      	ldrb	r3, [r7, #0]
 800aa26:	706b      	strb	r3, [r5, #1]
 800aa28:	6923      	ldr	r3, [r4, #16]
 800aa2a:	68a2      	ldr	r2, [r4, #8]
 800aa2c:	7da0      	ldrb	r0, [r4, #22]
 800aa2e:	2102      	movs	r1, #2
 800aa30:	3302      	adds	r3, #2
 800aa32:	444a      	add	r2, r9
 800aa34:	1b9b      	subs	r3, r3, r6
 800aa36:	7561      	strb	r1, [r4, #21]
 800aa38:	60a2      	str	r2, [r4, #8]
 800aa3a:	6123      	str	r3, [r4, #16]
 800aa3c:	f080 0001 	eor.w	r0, r0, #1
 800aa40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa44:	2102      	movs	r1, #2
 800aa46:	4620      	mov	r0, r4
 800aa48:	f001 f930 	bl	800bcac <ucdr_check_final_buffer_behavior>
 800aa4c:	b180      	cbz	r0, 800aa70 <ucdr_deserialize_uint16_t+0xa0>
 800aa4e:	7d23      	ldrb	r3, [r4, #20]
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	68a3      	ldr	r3, [r4, #8]
 800aa54:	d011      	beq.n	800aa7a <ucdr_deserialize_uint16_t+0xaa>
 800aa56:	785b      	ldrb	r3, [r3, #1]
 800aa58:	702b      	strb	r3, [r5, #0]
 800aa5a:	68a3      	ldr	r3, [r4, #8]
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	706b      	strb	r3, [r5, #1]
 800aa60:	68a2      	ldr	r2, [r4, #8]
 800aa62:	6923      	ldr	r3, [r4, #16]
 800aa64:	3202      	adds	r2, #2
 800aa66:	3302      	adds	r3, #2
 800aa68:	2102      	movs	r1, #2
 800aa6a:	60a2      	str	r2, [r4, #8]
 800aa6c:	6123      	str	r3, [r4, #16]
 800aa6e:	7561      	strb	r1, [r4, #21]
 800aa70:	7da0      	ldrb	r0, [r4, #22]
 800aa72:	f080 0001 	eor.w	r0, r0, #1
 800aa76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa7a:	881b      	ldrh	r3, [r3, #0]
 800aa7c:	802b      	strh	r3, [r5, #0]
 800aa7e:	e7ef      	b.n	800aa60 <ucdr_deserialize_uint16_t+0x90>
 800aa80:	68a2      	ldr	r2, [r4, #8]
 800aa82:	6923      	ldr	r3, [r4, #16]
 800aa84:	7da0      	ldrb	r0, [r4, #22]
 800aa86:	f884 8015 	strb.w	r8, [r4, #21]
 800aa8a:	1b92      	subs	r2, r2, r6
 800aa8c:	1b9b      	subs	r3, r3, r6
 800aa8e:	60a2      	str	r2, [r4, #8]
 800aa90:	6123      	str	r3, [r4, #16]
 800aa92:	f080 0001 	eor.w	r0, r0, #1
 800aa96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa9a:	68a3      	ldr	r3, [r4, #8]
 800aa9c:	781b      	ldrb	r3, [r3, #0]
 800aa9e:	706b      	strb	r3, [r5, #1]
 800aaa0:	e7c2      	b.n	800aa28 <ucdr_deserialize_uint16_t+0x58>
 800aaa2:	4639      	mov	r1, r7
 800aaa4:	4632      	mov	r2, r6
 800aaa6:	4628      	mov	r0, r5
 800aaa8:	f00e ff7d 	bl	80199a6 <memcpy>
 800aaac:	68a1      	ldr	r1, [r4, #8]
 800aaae:	464a      	mov	r2, r9
 800aab0:	19a8      	adds	r0, r5, r6
 800aab2:	f00e ff78 	bl	80199a6 <memcpy>
 800aab6:	e7b7      	b.n	800aa28 <ucdr_deserialize_uint16_t+0x58>

0800aab8 <ucdr_deserialize_endian_uint16_t>:
 800aab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aabc:	460e      	mov	r6, r1
 800aabe:	2102      	movs	r1, #2
 800aac0:	4604      	mov	r4, r0
 800aac2:	4615      	mov	r5, r2
 800aac4:	f001 f946 	bl	800bd54 <ucdr_buffer_alignment>
 800aac8:	4601      	mov	r1, r0
 800aaca:	4620      	mov	r0, r4
 800aacc:	f894 9015 	ldrb.w	r9, [r4, #21]
 800aad0:	f001 f984 	bl	800bddc <ucdr_advance_buffer>
 800aad4:	2102      	movs	r1, #2
 800aad6:	4620      	mov	r0, r4
 800aad8:	f001 f8dc 	bl	800bc94 <ucdr_check_buffer_available_for>
 800aadc:	bb70      	cbnz	r0, 800ab3c <ucdr_deserialize_endian_uint16_t+0x84>
 800aade:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800aae2:	4547      	cmp	r7, r8
 800aae4:	d925      	bls.n	800ab32 <ucdr_deserialize_endian_uint16_t+0x7a>
 800aae6:	6923      	ldr	r3, [r4, #16]
 800aae8:	60a7      	str	r7, [r4, #8]
 800aaea:	eba7 0708 	sub.w	r7, r7, r8
 800aaee:	443b      	add	r3, r7
 800aaf0:	f1c7 0a02 	rsb	sl, r7, #2
 800aaf4:	6123      	str	r3, [r4, #16]
 800aaf6:	4651      	mov	r1, sl
 800aaf8:	4620      	mov	r0, r4
 800aafa:	f001 f8d7 	bl	800bcac <ucdr_check_final_buffer_behavior>
 800aafe:	2800      	cmp	r0, #0
 800ab00:	d034      	beq.n	800ab6c <ucdr_deserialize_endian_uint16_t+0xb4>
 800ab02:	2e01      	cmp	r6, #1
 800ab04:	d043      	beq.n	800ab8e <ucdr_deserialize_endian_uint16_t+0xd6>
 800ab06:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ab0a:	702b      	strb	r3, [r5, #0]
 800ab0c:	2f00      	cmp	r7, #0
 800ab0e:	d03a      	beq.n	800ab86 <ucdr_deserialize_endian_uint16_t+0xce>
 800ab10:	f898 3000 	ldrb.w	r3, [r8]
 800ab14:	706b      	strb	r3, [r5, #1]
 800ab16:	6923      	ldr	r3, [r4, #16]
 800ab18:	68a2      	ldr	r2, [r4, #8]
 800ab1a:	7da0      	ldrb	r0, [r4, #22]
 800ab1c:	2102      	movs	r1, #2
 800ab1e:	3302      	adds	r3, #2
 800ab20:	4452      	add	r2, sl
 800ab22:	1bdb      	subs	r3, r3, r7
 800ab24:	7561      	strb	r1, [r4, #21]
 800ab26:	60a2      	str	r2, [r4, #8]
 800ab28:	6123      	str	r3, [r4, #16]
 800ab2a:	f080 0001 	eor.w	r0, r0, #1
 800ab2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab32:	2102      	movs	r1, #2
 800ab34:	4620      	mov	r0, r4
 800ab36:	f001 f8b9 	bl	800bcac <ucdr_check_final_buffer_behavior>
 800ab3a:	b178      	cbz	r0, 800ab5c <ucdr_deserialize_endian_uint16_t+0xa4>
 800ab3c:	2e01      	cmp	r6, #1
 800ab3e:	68a3      	ldr	r3, [r4, #8]
 800ab40:	d011      	beq.n	800ab66 <ucdr_deserialize_endian_uint16_t+0xae>
 800ab42:	785b      	ldrb	r3, [r3, #1]
 800ab44:	702b      	strb	r3, [r5, #0]
 800ab46:	68a3      	ldr	r3, [r4, #8]
 800ab48:	781b      	ldrb	r3, [r3, #0]
 800ab4a:	706b      	strb	r3, [r5, #1]
 800ab4c:	68a2      	ldr	r2, [r4, #8]
 800ab4e:	6923      	ldr	r3, [r4, #16]
 800ab50:	3202      	adds	r2, #2
 800ab52:	3302      	adds	r3, #2
 800ab54:	2102      	movs	r1, #2
 800ab56:	60a2      	str	r2, [r4, #8]
 800ab58:	6123      	str	r3, [r4, #16]
 800ab5a:	7561      	strb	r1, [r4, #21]
 800ab5c:	7da0      	ldrb	r0, [r4, #22]
 800ab5e:	f080 0001 	eor.w	r0, r0, #1
 800ab62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab66:	881b      	ldrh	r3, [r3, #0]
 800ab68:	802b      	strh	r3, [r5, #0]
 800ab6a:	e7ef      	b.n	800ab4c <ucdr_deserialize_endian_uint16_t+0x94>
 800ab6c:	68a2      	ldr	r2, [r4, #8]
 800ab6e:	6923      	ldr	r3, [r4, #16]
 800ab70:	7da0      	ldrb	r0, [r4, #22]
 800ab72:	f884 9015 	strb.w	r9, [r4, #21]
 800ab76:	1bd2      	subs	r2, r2, r7
 800ab78:	1bdb      	subs	r3, r3, r7
 800ab7a:	60a2      	str	r2, [r4, #8]
 800ab7c:	6123      	str	r3, [r4, #16]
 800ab7e:	f080 0001 	eor.w	r0, r0, #1
 800ab82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab86:	68a3      	ldr	r3, [r4, #8]
 800ab88:	781b      	ldrb	r3, [r3, #0]
 800ab8a:	706b      	strb	r3, [r5, #1]
 800ab8c:	e7c3      	b.n	800ab16 <ucdr_deserialize_endian_uint16_t+0x5e>
 800ab8e:	4641      	mov	r1, r8
 800ab90:	463a      	mov	r2, r7
 800ab92:	4628      	mov	r0, r5
 800ab94:	f00e ff07 	bl	80199a6 <memcpy>
 800ab98:	68a1      	ldr	r1, [r4, #8]
 800ab9a:	4652      	mov	r2, sl
 800ab9c:	19e8      	adds	r0, r5, r7
 800ab9e:	f00e ff02 	bl	80199a6 <memcpy>
 800aba2:	e7b8      	b.n	800ab16 <ucdr_deserialize_endian_uint16_t+0x5e>

0800aba4 <ucdr_serialize_uint32_t>:
 800aba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aba8:	b082      	sub	sp, #8
 800abaa:	4604      	mov	r4, r0
 800abac:	9101      	str	r1, [sp, #4]
 800abae:	2104      	movs	r1, #4
 800abb0:	f001 f8d0 	bl	800bd54 <ucdr_buffer_alignment>
 800abb4:	4601      	mov	r1, r0
 800abb6:	4620      	mov	r0, r4
 800abb8:	7d67      	ldrb	r7, [r4, #21]
 800abba:	f001 f90f 	bl	800bddc <ucdr_advance_buffer>
 800abbe:	2104      	movs	r1, #4
 800abc0:	4620      	mov	r0, r4
 800abc2:	f001 f867 	bl	800bc94 <ucdr_check_buffer_available_for>
 800abc6:	2800      	cmp	r0, #0
 800abc8:	d139      	bne.n	800ac3e <ucdr_serialize_uint32_t+0x9a>
 800abca:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800abce:	42ab      	cmp	r3, r5
 800abd0:	d930      	bls.n	800ac34 <ucdr_serialize_uint32_t+0x90>
 800abd2:	1b5e      	subs	r6, r3, r5
 800abd4:	60a3      	str	r3, [r4, #8]
 800abd6:	6923      	ldr	r3, [r4, #16]
 800abd8:	f1c6 0804 	rsb	r8, r6, #4
 800abdc:	4433      	add	r3, r6
 800abde:	6123      	str	r3, [r4, #16]
 800abe0:	4641      	mov	r1, r8
 800abe2:	4620      	mov	r0, r4
 800abe4:	f001 f862 	bl	800bcac <ucdr_check_final_buffer_behavior>
 800abe8:	2800      	cmp	r0, #0
 800abea:	d04c      	beq.n	800ac86 <ucdr_serialize_uint32_t+0xe2>
 800abec:	7d23      	ldrb	r3, [r4, #20]
 800abee:	2b01      	cmp	r3, #1
 800abf0:	d063      	beq.n	800acba <ucdr_serialize_uint32_t+0x116>
 800abf2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800abf6:	702b      	strb	r3, [r5, #0]
 800abf8:	2e00      	cmp	r6, #0
 800abfa:	d051      	beq.n	800aca0 <ucdr_serialize_uint32_t+0xfc>
 800abfc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ac00:	706b      	strb	r3, [r5, #1]
 800ac02:	2e01      	cmp	r6, #1
 800ac04:	d050      	beq.n	800aca8 <ucdr_serialize_uint32_t+0x104>
 800ac06:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ac0a:	70ab      	strb	r3, [r5, #2]
 800ac0c:	2e02      	cmp	r6, #2
 800ac0e:	d04f      	beq.n	800acb0 <ucdr_serialize_uint32_t+0x10c>
 800ac10:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ac14:	70eb      	strb	r3, [r5, #3]
 800ac16:	6923      	ldr	r3, [r4, #16]
 800ac18:	68a2      	ldr	r2, [r4, #8]
 800ac1a:	7da0      	ldrb	r0, [r4, #22]
 800ac1c:	3304      	adds	r3, #4
 800ac1e:	1b9e      	subs	r6, r3, r6
 800ac20:	4442      	add	r2, r8
 800ac22:	2304      	movs	r3, #4
 800ac24:	f080 0001 	eor.w	r0, r0, #1
 800ac28:	60a2      	str	r2, [r4, #8]
 800ac2a:	6126      	str	r6, [r4, #16]
 800ac2c:	7563      	strb	r3, [r4, #21]
 800ac2e:	b002      	add	sp, #8
 800ac30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac34:	2104      	movs	r1, #4
 800ac36:	4620      	mov	r0, r4
 800ac38:	f001 f838 	bl	800bcac <ucdr_check_final_buffer_behavior>
 800ac3c:	b1d0      	cbz	r0, 800ac74 <ucdr_serialize_uint32_t+0xd0>
 800ac3e:	7d23      	ldrb	r3, [r4, #20]
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	68a3      	ldr	r3, [r4, #8]
 800ac44:	d01c      	beq.n	800ac80 <ucdr_serialize_uint32_t+0xdc>
 800ac46:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ac4a:	701a      	strb	r2, [r3, #0]
 800ac4c:	68a3      	ldr	r3, [r4, #8]
 800ac4e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ac52:	705a      	strb	r2, [r3, #1]
 800ac54:	68a3      	ldr	r3, [r4, #8]
 800ac56:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ac5a:	709a      	strb	r2, [r3, #2]
 800ac5c:	68a3      	ldr	r3, [r4, #8]
 800ac5e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ac62:	70da      	strb	r2, [r3, #3]
 800ac64:	68a2      	ldr	r2, [r4, #8]
 800ac66:	6923      	ldr	r3, [r4, #16]
 800ac68:	3204      	adds	r2, #4
 800ac6a:	3304      	adds	r3, #4
 800ac6c:	2104      	movs	r1, #4
 800ac6e:	60a2      	str	r2, [r4, #8]
 800ac70:	6123      	str	r3, [r4, #16]
 800ac72:	7561      	strb	r1, [r4, #21]
 800ac74:	7da0      	ldrb	r0, [r4, #22]
 800ac76:	f080 0001 	eor.w	r0, r0, #1
 800ac7a:	b002      	add	sp, #8
 800ac7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac80:	9a01      	ldr	r2, [sp, #4]
 800ac82:	601a      	str	r2, [r3, #0]
 800ac84:	e7ee      	b.n	800ac64 <ucdr_serialize_uint32_t+0xc0>
 800ac86:	68a2      	ldr	r2, [r4, #8]
 800ac88:	6923      	ldr	r3, [r4, #16]
 800ac8a:	7da0      	ldrb	r0, [r4, #22]
 800ac8c:	7567      	strb	r7, [r4, #21]
 800ac8e:	1b92      	subs	r2, r2, r6
 800ac90:	1b9b      	subs	r3, r3, r6
 800ac92:	f080 0001 	eor.w	r0, r0, #1
 800ac96:	60a2      	str	r2, [r4, #8]
 800ac98:	6123      	str	r3, [r4, #16]
 800ac9a:	b002      	add	sp, #8
 800ac9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aca0:	68a3      	ldr	r3, [r4, #8]
 800aca2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800aca6:	701a      	strb	r2, [r3, #0]
 800aca8:	68a3      	ldr	r3, [r4, #8]
 800acaa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800acae:	701a      	strb	r2, [r3, #0]
 800acb0:	68a3      	ldr	r3, [r4, #8]
 800acb2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800acb6:	701a      	strb	r2, [r3, #0]
 800acb8:	e7ad      	b.n	800ac16 <ucdr_serialize_uint32_t+0x72>
 800acba:	4628      	mov	r0, r5
 800acbc:	ad01      	add	r5, sp, #4
 800acbe:	4629      	mov	r1, r5
 800acc0:	4632      	mov	r2, r6
 800acc2:	f00e fe70 	bl	80199a6 <memcpy>
 800acc6:	68a0      	ldr	r0, [r4, #8]
 800acc8:	4642      	mov	r2, r8
 800acca:	19a9      	adds	r1, r5, r6
 800accc:	f00e fe6b 	bl	80199a6 <memcpy>
 800acd0:	e7a1      	b.n	800ac16 <ucdr_serialize_uint32_t+0x72>
 800acd2:	bf00      	nop

0800acd4 <ucdr_serialize_endian_uint32_t>:
 800acd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800acd8:	b083      	sub	sp, #12
 800acda:	460d      	mov	r5, r1
 800acdc:	2104      	movs	r1, #4
 800acde:	4604      	mov	r4, r0
 800ace0:	9201      	str	r2, [sp, #4]
 800ace2:	f001 f837 	bl	800bd54 <ucdr_buffer_alignment>
 800ace6:	4601      	mov	r1, r0
 800ace8:	4620      	mov	r0, r4
 800acea:	f894 8015 	ldrb.w	r8, [r4, #21]
 800acee:	f001 f875 	bl	800bddc <ucdr_advance_buffer>
 800acf2:	2104      	movs	r1, #4
 800acf4:	4620      	mov	r0, r4
 800acf6:	f000 ffcd 	bl	800bc94 <ucdr_check_buffer_available_for>
 800acfa:	2800      	cmp	r0, #0
 800acfc:	d138      	bne.n	800ad70 <ucdr_serialize_endian_uint32_t+0x9c>
 800acfe:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ad02:	42b7      	cmp	r7, r6
 800ad04:	d92f      	bls.n	800ad66 <ucdr_serialize_endian_uint32_t+0x92>
 800ad06:	6923      	ldr	r3, [r4, #16]
 800ad08:	60a7      	str	r7, [r4, #8]
 800ad0a:	1bbf      	subs	r7, r7, r6
 800ad0c:	443b      	add	r3, r7
 800ad0e:	f1c7 0904 	rsb	r9, r7, #4
 800ad12:	6123      	str	r3, [r4, #16]
 800ad14:	4649      	mov	r1, r9
 800ad16:	4620      	mov	r0, r4
 800ad18:	f000 ffc8 	bl	800bcac <ucdr_check_final_buffer_behavior>
 800ad1c:	2800      	cmp	r0, #0
 800ad1e:	d04a      	beq.n	800adb6 <ucdr_serialize_endian_uint32_t+0xe2>
 800ad20:	2d01      	cmp	r5, #1
 800ad22:	d063      	beq.n	800adec <ucdr_serialize_endian_uint32_t+0x118>
 800ad24:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ad28:	7033      	strb	r3, [r6, #0]
 800ad2a:	2f00      	cmp	r7, #0
 800ad2c:	d051      	beq.n	800add2 <ucdr_serialize_endian_uint32_t+0xfe>
 800ad2e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ad32:	7073      	strb	r3, [r6, #1]
 800ad34:	2f01      	cmp	r7, #1
 800ad36:	d050      	beq.n	800adda <ucdr_serialize_endian_uint32_t+0x106>
 800ad38:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ad3c:	70b3      	strb	r3, [r6, #2]
 800ad3e:	2f02      	cmp	r7, #2
 800ad40:	d04f      	beq.n	800ade2 <ucdr_serialize_endian_uint32_t+0x10e>
 800ad42:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ad46:	70f3      	strb	r3, [r6, #3]
 800ad48:	6923      	ldr	r3, [r4, #16]
 800ad4a:	68a2      	ldr	r2, [r4, #8]
 800ad4c:	7da0      	ldrb	r0, [r4, #22]
 800ad4e:	3304      	adds	r3, #4
 800ad50:	444a      	add	r2, r9
 800ad52:	1bdb      	subs	r3, r3, r7
 800ad54:	2104      	movs	r1, #4
 800ad56:	f080 0001 	eor.w	r0, r0, #1
 800ad5a:	60a2      	str	r2, [r4, #8]
 800ad5c:	6123      	str	r3, [r4, #16]
 800ad5e:	7561      	strb	r1, [r4, #21]
 800ad60:	b003      	add	sp, #12
 800ad62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad66:	2104      	movs	r1, #4
 800ad68:	4620      	mov	r0, r4
 800ad6a:	f000 ff9f 	bl	800bcac <ucdr_check_final_buffer_behavior>
 800ad6e:	b1c8      	cbz	r0, 800ada4 <ucdr_serialize_endian_uint32_t+0xd0>
 800ad70:	2d01      	cmp	r5, #1
 800ad72:	68a3      	ldr	r3, [r4, #8]
 800ad74:	d01c      	beq.n	800adb0 <ucdr_serialize_endian_uint32_t+0xdc>
 800ad76:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ad7a:	701a      	strb	r2, [r3, #0]
 800ad7c:	68a3      	ldr	r3, [r4, #8]
 800ad7e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ad82:	705a      	strb	r2, [r3, #1]
 800ad84:	68a3      	ldr	r3, [r4, #8]
 800ad86:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ad8a:	709a      	strb	r2, [r3, #2]
 800ad8c:	68a3      	ldr	r3, [r4, #8]
 800ad8e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ad92:	70da      	strb	r2, [r3, #3]
 800ad94:	68a2      	ldr	r2, [r4, #8]
 800ad96:	6923      	ldr	r3, [r4, #16]
 800ad98:	3204      	adds	r2, #4
 800ad9a:	3304      	adds	r3, #4
 800ad9c:	2104      	movs	r1, #4
 800ad9e:	60a2      	str	r2, [r4, #8]
 800ada0:	6123      	str	r3, [r4, #16]
 800ada2:	7561      	strb	r1, [r4, #21]
 800ada4:	7da0      	ldrb	r0, [r4, #22]
 800ada6:	f080 0001 	eor.w	r0, r0, #1
 800adaa:	b003      	add	sp, #12
 800adac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800adb0:	9a01      	ldr	r2, [sp, #4]
 800adb2:	601a      	str	r2, [r3, #0]
 800adb4:	e7ee      	b.n	800ad94 <ucdr_serialize_endian_uint32_t+0xc0>
 800adb6:	68a2      	ldr	r2, [r4, #8]
 800adb8:	6923      	ldr	r3, [r4, #16]
 800adba:	7da0      	ldrb	r0, [r4, #22]
 800adbc:	f884 8015 	strb.w	r8, [r4, #21]
 800adc0:	1bd2      	subs	r2, r2, r7
 800adc2:	1bdb      	subs	r3, r3, r7
 800adc4:	f080 0001 	eor.w	r0, r0, #1
 800adc8:	60a2      	str	r2, [r4, #8]
 800adca:	6123      	str	r3, [r4, #16]
 800adcc:	b003      	add	sp, #12
 800adce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800add2:	68a3      	ldr	r3, [r4, #8]
 800add4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800add8:	701a      	strb	r2, [r3, #0]
 800adda:	68a3      	ldr	r3, [r4, #8]
 800addc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ade0:	701a      	strb	r2, [r3, #0]
 800ade2:	68a3      	ldr	r3, [r4, #8]
 800ade4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ade8:	701a      	strb	r2, [r3, #0]
 800adea:	e7ad      	b.n	800ad48 <ucdr_serialize_endian_uint32_t+0x74>
 800adec:	ad01      	add	r5, sp, #4
 800adee:	4629      	mov	r1, r5
 800adf0:	463a      	mov	r2, r7
 800adf2:	4630      	mov	r0, r6
 800adf4:	f00e fdd7 	bl	80199a6 <memcpy>
 800adf8:	68a0      	ldr	r0, [r4, #8]
 800adfa:	464a      	mov	r2, r9
 800adfc:	19e9      	adds	r1, r5, r7
 800adfe:	f00e fdd2 	bl	80199a6 <memcpy>
 800ae02:	e7a1      	b.n	800ad48 <ucdr_serialize_endian_uint32_t+0x74>

0800ae04 <ucdr_deserialize_uint32_t>:
 800ae04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae08:	460d      	mov	r5, r1
 800ae0a:	2104      	movs	r1, #4
 800ae0c:	4604      	mov	r4, r0
 800ae0e:	f000 ffa1 	bl	800bd54 <ucdr_buffer_alignment>
 800ae12:	4601      	mov	r1, r0
 800ae14:	4620      	mov	r0, r4
 800ae16:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ae1a:	f000 ffdf 	bl	800bddc <ucdr_advance_buffer>
 800ae1e:	2104      	movs	r1, #4
 800ae20:	4620      	mov	r0, r4
 800ae22:	f000 ff37 	bl	800bc94 <ucdr_check_buffer_available_for>
 800ae26:	2800      	cmp	r0, #0
 800ae28:	d138      	bne.n	800ae9c <ucdr_deserialize_uint32_t+0x98>
 800ae2a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ae2e:	42b7      	cmp	r7, r6
 800ae30:	d92f      	bls.n	800ae92 <ucdr_deserialize_uint32_t+0x8e>
 800ae32:	6923      	ldr	r3, [r4, #16]
 800ae34:	60a7      	str	r7, [r4, #8]
 800ae36:	1bbf      	subs	r7, r7, r6
 800ae38:	443b      	add	r3, r7
 800ae3a:	f1c7 0904 	rsb	r9, r7, #4
 800ae3e:	6123      	str	r3, [r4, #16]
 800ae40:	4649      	mov	r1, r9
 800ae42:	4620      	mov	r0, r4
 800ae44:	f000 ff32 	bl	800bcac <ucdr_check_final_buffer_behavior>
 800ae48:	2800      	cmp	r0, #0
 800ae4a:	d046      	beq.n	800aeda <ucdr_deserialize_uint32_t+0xd6>
 800ae4c:	7d23      	ldrb	r3, [r4, #20]
 800ae4e:	2b01      	cmp	r3, #1
 800ae50:	d05c      	beq.n	800af0c <ucdr_deserialize_uint32_t+0x108>
 800ae52:	78f3      	ldrb	r3, [r6, #3]
 800ae54:	702b      	strb	r3, [r5, #0]
 800ae56:	2f00      	cmp	r7, #0
 800ae58:	d04c      	beq.n	800aef4 <ucdr_deserialize_uint32_t+0xf0>
 800ae5a:	78b3      	ldrb	r3, [r6, #2]
 800ae5c:	706b      	strb	r3, [r5, #1]
 800ae5e:	2f01      	cmp	r7, #1
 800ae60:	f105 0302 	add.w	r3, r5, #2
 800ae64:	d04a      	beq.n	800aefc <ucdr_deserialize_uint32_t+0xf8>
 800ae66:	7873      	ldrb	r3, [r6, #1]
 800ae68:	70ab      	strb	r3, [r5, #2]
 800ae6a:	2f02      	cmp	r7, #2
 800ae6c:	f105 0303 	add.w	r3, r5, #3
 800ae70:	d048      	beq.n	800af04 <ucdr_deserialize_uint32_t+0x100>
 800ae72:	7833      	ldrb	r3, [r6, #0]
 800ae74:	70eb      	strb	r3, [r5, #3]
 800ae76:	6923      	ldr	r3, [r4, #16]
 800ae78:	68a2      	ldr	r2, [r4, #8]
 800ae7a:	7da0      	ldrb	r0, [r4, #22]
 800ae7c:	2104      	movs	r1, #4
 800ae7e:	3304      	adds	r3, #4
 800ae80:	444a      	add	r2, r9
 800ae82:	1bdb      	subs	r3, r3, r7
 800ae84:	7561      	strb	r1, [r4, #21]
 800ae86:	60a2      	str	r2, [r4, #8]
 800ae88:	6123      	str	r3, [r4, #16]
 800ae8a:	f080 0001 	eor.w	r0, r0, #1
 800ae8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae92:	2104      	movs	r1, #4
 800ae94:	4620      	mov	r0, r4
 800ae96:	f000 ff09 	bl	800bcac <ucdr_check_final_buffer_behavior>
 800ae9a:	b1b0      	cbz	r0, 800aeca <ucdr_deserialize_uint32_t+0xc6>
 800ae9c:	7d23      	ldrb	r3, [r4, #20]
 800ae9e:	2b01      	cmp	r3, #1
 800aea0:	68a3      	ldr	r3, [r4, #8]
 800aea2:	d017      	beq.n	800aed4 <ucdr_deserialize_uint32_t+0xd0>
 800aea4:	78db      	ldrb	r3, [r3, #3]
 800aea6:	702b      	strb	r3, [r5, #0]
 800aea8:	68a3      	ldr	r3, [r4, #8]
 800aeaa:	789b      	ldrb	r3, [r3, #2]
 800aeac:	706b      	strb	r3, [r5, #1]
 800aeae:	68a3      	ldr	r3, [r4, #8]
 800aeb0:	785b      	ldrb	r3, [r3, #1]
 800aeb2:	70ab      	strb	r3, [r5, #2]
 800aeb4:	68a3      	ldr	r3, [r4, #8]
 800aeb6:	781b      	ldrb	r3, [r3, #0]
 800aeb8:	70eb      	strb	r3, [r5, #3]
 800aeba:	68a2      	ldr	r2, [r4, #8]
 800aebc:	6923      	ldr	r3, [r4, #16]
 800aebe:	3204      	adds	r2, #4
 800aec0:	3304      	adds	r3, #4
 800aec2:	2104      	movs	r1, #4
 800aec4:	60a2      	str	r2, [r4, #8]
 800aec6:	6123      	str	r3, [r4, #16]
 800aec8:	7561      	strb	r1, [r4, #21]
 800aeca:	7da0      	ldrb	r0, [r4, #22]
 800aecc:	f080 0001 	eor.w	r0, r0, #1
 800aed0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	602b      	str	r3, [r5, #0]
 800aed8:	e7ef      	b.n	800aeba <ucdr_deserialize_uint32_t+0xb6>
 800aeda:	68a2      	ldr	r2, [r4, #8]
 800aedc:	6923      	ldr	r3, [r4, #16]
 800aede:	7da0      	ldrb	r0, [r4, #22]
 800aee0:	f884 8015 	strb.w	r8, [r4, #21]
 800aee4:	1bd2      	subs	r2, r2, r7
 800aee6:	1bdb      	subs	r3, r3, r7
 800aee8:	60a2      	str	r2, [r4, #8]
 800aeea:	6123      	str	r3, [r4, #16]
 800aeec:	f080 0001 	eor.w	r0, r0, #1
 800aef0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aef4:	68a3      	ldr	r3, [r4, #8]
 800aef6:	789b      	ldrb	r3, [r3, #2]
 800aef8:	706b      	strb	r3, [r5, #1]
 800aefa:	1cab      	adds	r3, r5, #2
 800aefc:	68a2      	ldr	r2, [r4, #8]
 800aefe:	7852      	ldrb	r2, [r2, #1]
 800af00:	f803 2b01 	strb.w	r2, [r3], #1
 800af04:	68a2      	ldr	r2, [r4, #8]
 800af06:	7812      	ldrb	r2, [r2, #0]
 800af08:	701a      	strb	r2, [r3, #0]
 800af0a:	e7b4      	b.n	800ae76 <ucdr_deserialize_uint32_t+0x72>
 800af0c:	4631      	mov	r1, r6
 800af0e:	463a      	mov	r2, r7
 800af10:	4628      	mov	r0, r5
 800af12:	f00e fd48 	bl	80199a6 <memcpy>
 800af16:	68a1      	ldr	r1, [r4, #8]
 800af18:	464a      	mov	r2, r9
 800af1a:	19e8      	adds	r0, r5, r7
 800af1c:	f00e fd43 	bl	80199a6 <memcpy>
 800af20:	e7a9      	b.n	800ae76 <ucdr_deserialize_uint32_t+0x72>
 800af22:	bf00      	nop

0800af24 <ucdr_deserialize_endian_uint32_t>:
 800af24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af28:	460e      	mov	r6, r1
 800af2a:	2104      	movs	r1, #4
 800af2c:	4604      	mov	r4, r0
 800af2e:	4615      	mov	r5, r2
 800af30:	f000 ff10 	bl	800bd54 <ucdr_buffer_alignment>
 800af34:	4601      	mov	r1, r0
 800af36:	4620      	mov	r0, r4
 800af38:	f894 9015 	ldrb.w	r9, [r4, #21]
 800af3c:	f000 ff4e 	bl	800bddc <ucdr_advance_buffer>
 800af40:	2104      	movs	r1, #4
 800af42:	4620      	mov	r0, r4
 800af44:	f000 fea6 	bl	800bc94 <ucdr_check_buffer_available_for>
 800af48:	2800      	cmp	r0, #0
 800af4a:	d13c      	bne.n	800afc6 <ucdr_deserialize_endian_uint32_t+0xa2>
 800af4c:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800af50:	42bb      	cmp	r3, r7
 800af52:	d933      	bls.n	800afbc <ucdr_deserialize_endian_uint32_t+0x98>
 800af54:	eba3 0807 	sub.w	r8, r3, r7
 800af58:	60a3      	str	r3, [r4, #8]
 800af5a:	6923      	ldr	r3, [r4, #16]
 800af5c:	f1c8 0a04 	rsb	sl, r8, #4
 800af60:	4443      	add	r3, r8
 800af62:	6123      	str	r3, [r4, #16]
 800af64:	4651      	mov	r1, sl
 800af66:	4620      	mov	r0, r4
 800af68:	f000 fea0 	bl	800bcac <ucdr_check_final_buffer_behavior>
 800af6c:	2800      	cmp	r0, #0
 800af6e:	d048      	beq.n	800b002 <ucdr_deserialize_endian_uint32_t+0xde>
 800af70:	2e01      	cmp	r6, #1
 800af72:	d061      	beq.n	800b038 <ucdr_deserialize_endian_uint32_t+0x114>
 800af74:	78fb      	ldrb	r3, [r7, #3]
 800af76:	702b      	strb	r3, [r5, #0]
 800af78:	f1b8 0f00 	cmp.w	r8, #0
 800af7c:	d050      	beq.n	800b020 <ucdr_deserialize_endian_uint32_t+0xfc>
 800af7e:	78bb      	ldrb	r3, [r7, #2]
 800af80:	706b      	strb	r3, [r5, #1]
 800af82:	f1b8 0f01 	cmp.w	r8, #1
 800af86:	f105 0302 	add.w	r3, r5, #2
 800af8a:	d04d      	beq.n	800b028 <ucdr_deserialize_endian_uint32_t+0x104>
 800af8c:	787b      	ldrb	r3, [r7, #1]
 800af8e:	70ab      	strb	r3, [r5, #2]
 800af90:	f1b8 0f02 	cmp.w	r8, #2
 800af94:	f105 0303 	add.w	r3, r5, #3
 800af98:	d04a      	beq.n	800b030 <ucdr_deserialize_endian_uint32_t+0x10c>
 800af9a:	783b      	ldrb	r3, [r7, #0]
 800af9c:	70eb      	strb	r3, [r5, #3]
 800af9e:	6923      	ldr	r3, [r4, #16]
 800afa0:	68a2      	ldr	r2, [r4, #8]
 800afa2:	7da0      	ldrb	r0, [r4, #22]
 800afa4:	2104      	movs	r1, #4
 800afa6:	3304      	adds	r3, #4
 800afa8:	4452      	add	r2, sl
 800afaa:	eba3 0308 	sub.w	r3, r3, r8
 800afae:	7561      	strb	r1, [r4, #21]
 800afb0:	60a2      	str	r2, [r4, #8]
 800afb2:	6123      	str	r3, [r4, #16]
 800afb4:	f080 0001 	eor.w	r0, r0, #1
 800afb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afbc:	2104      	movs	r1, #4
 800afbe:	4620      	mov	r0, r4
 800afc0:	f000 fe74 	bl	800bcac <ucdr_check_final_buffer_behavior>
 800afc4:	b1a8      	cbz	r0, 800aff2 <ucdr_deserialize_endian_uint32_t+0xce>
 800afc6:	2e01      	cmp	r6, #1
 800afc8:	68a3      	ldr	r3, [r4, #8]
 800afca:	d017      	beq.n	800affc <ucdr_deserialize_endian_uint32_t+0xd8>
 800afcc:	78db      	ldrb	r3, [r3, #3]
 800afce:	702b      	strb	r3, [r5, #0]
 800afd0:	68a3      	ldr	r3, [r4, #8]
 800afd2:	789b      	ldrb	r3, [r3, #2]
 800afd4:	706b      	strb	r3, [r5, #1]
 800afd6:	68a3      	ldr	r3, [r4, #8]
 800afd8:	785b      	ldrb	r3, [r3, #1]
 800afda:	70ab      	strb	r3, [r5, #2]
 800afdc:	68a3      	ldr	r3, [r4, #8]
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	70eb      	strb	r3, [r5, #3]
 800afe2:	68a2      	ldr	r2, [r4, #8]
 800afe4:	6923      	ldr	r3, [r4, #16]
 800afe6:	3204      	adds	r2, #4
 800afe8:	3304      	adds	r3, #4
 800afea:	2104      	movs	r1, #4
 800afec:	60a2      	str	r2, [r4, #8]
 800afee:	6123      	str	r3, [r4, #16]
 800aff0:	7561      	strb	r1, [r4, #21]
 800aff2:	7da0      	ldrb	r0, [r4, #22]
 800aff4:	f080 0001 	eor.w	r0, r0, #1
 800aff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	602b      	str	r3, [r5, #0]
 800b000:	e7ef      	b.n	800afe2 <ucdr_deserialize_endian_uint32_t+0xbe>
 800b002:	68a2      	ldr	r2, [r4, #8]
 800b004:	6923      	ldr	r3, [r4, #16]
 800b006:	7da0      	ldrb	r0, [r4, #22]
 800b008:	f884 9015 	strb.w	r9, [r4, #21]
 800b00c:	eba2 0208 	sub.w	r2, r2, r8
 800b010:	eba3 0308 	sub.w	r3, r3, r8
 800b014:	60a2      	str	r2, [r4, #8]
 800b016:	6123      	str	r3, [r4, #16]
 800b018:	f080 0001 	eor.w	r0, r0, #1
 800b01c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b020:	68a3      	ldr	r3, [r4, #8]
 800b022:	789b      	ldrb	r3, [r3, #2]
 800b024:	706b      	strb	r3, [r5, #1]
 800b026:	1cab      	adds	r3, r5, #2
 800b028:	68a2      	ldr	r2, [r4, #8]
 800b02a:	7852      	ldrb	r2, [r2, #1]
 800b02c:	f803 2b01 	strb.w	r2, [r3], #1
 800b030:	68a2      	ldr	r2, [r4, #8]
 800b032:	7812      	ldrb	r2, [r2, #0]
 800b034:	701a      	strb	r2, [r3, #0]
 800b036:	e7b2      	b.n	800af9e <ucdr_deserialize_endian_uint32_t+0x7a>
 800b038:	4639      	mov	r1, r7
 800b03a:	4642      	mov	r2, r8
 800b03c:	4628      	mov	r0, r5
 800b03e:	f00e fcb2 	bl	80199a6 <memcpy>
 800b042:	68a1      	ldr	r1, [r4, #8]
 800b044:	4652      	mov	r2, sl
 800b046:	eb05 0008 	add.w	r0, r5, r8
 800b04a:	f00e fcac 	bl	80199a6 <memcpy>
 800b04e:	e7a6      	b.n	800af9e <ucdr_deserialize_endian_uint32_t+0x7a>

0800b050 <ucdr_serialize_uint64_t>:
 800b050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b054:	2108      	movs	r1, #8
 800b056:	b082      	sub	sp, #8
 800b058:	4604      	mov	r4, r0
 800b05a:	e9cd 2300 	strd	r2, r3, [sp]
 800b05e:	f000 fe79 	bl	800bd54 <ucdr_buffer_alignment>
 800b062:	4601      	mov	r1, r0
 800b064:	4620      	mov	r0, r4
 800b066:	7d67      	ldrb	r7, [r4, #21]
 800b068:	f000 feb8 	bl	800bddc <ucdr_advance_buffer>
 800b06c:	2108      	movs	r1, #8
 800b06e:	4620      	mov	r0, r4
 800b070:	f000 fe10 	bl	800bc94 <ucdr_check_buffer_available_for>
 800b074:	2800      	cmp	r0, #0
 800b076:	d14e      	bne.n	800b116 <ucdr_serialize_uint64_t+0xc6>
 800b078:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b07c:	42ab      	cmp	r3, r5
 800b07e:	d945      	bls.n	800b10c <ucdr_serialize_uint64_t+0xbc>
 800b080:	1b5e      	subs	r6, r3, r5
 800b082:	60a3      	str	r3, [r4, #8]
 800b084:	6923      	ldr	r3, [r4, #16]
 800b086:	f1c6 0808 	rsb	r8, r6, #8
 800b08a:	4433      	add	r3, r6
 800b08c:	6123      	str	r3, [r4, #16]
 800b08e:	4641      	mov	r1, r8
 800b090:	4620      	mov	r0, r4
 800b092:	f000 fe0b 	bl	800bcac <ucdr_check_final_buffer_behavior>
 800b096:	2800      	cmp	r0, #0
 800b098:	d074      	beq.n	800b184 <ucdr_serialize_uint64_t+0x134>
 800b09a:	7d23      	ldrb	r3, [r4, #20]
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	f000 809b 	beq.w	800b1d8 <ucdr_serialize_uint64_t+0x188>
 800b0a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b0a6:	702b      	strb	r3, [r5, #0]
 800b0a8:	2e00      	cmp	r6, #0
 800b0aa:	d078      	beq.n	800b19e <ucdr_serialize_uint64_t+0x14e>
 800b0ac:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b0b0:	706b      	strb	r3, [r5, #1]
 800b0b2:	2e01      	cmp	r6, #1
 800b0b4:	d077      	beq.n	800b1a6 <ucdr_serialize_uint64_t+0x156>
 800b0b6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b0ba:	70ab      	strb	r3, [r5, #2]
 800b0bc:	2e02      	cmp	r6, #2
 800b0be:	d076      	beq.n	800b1ae <ucdr_serialize_uint64_t+0x15e>
 800b0c0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b0c4:	70eb      	strb	r3, [r5, #3]
 800b0c6:	2e03      	cmp	r6, #3
 800b0c8:	d075      	beq.n	800b1b6 <ucdr_serialize_uint64_t+0x166>
 800b0ca:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b0ce:	712b      	strb	r3, [r5, #4]
 800b0d0:	2e04      	cmp	r6, #4
 800b0d2:	d074      	beq.n	800b1be <ucdr_serialize_uint64_t+0x16e>
 800b0d4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b0d8:	716b      	strb	r3, [r5, #5]
 800b0da:	2e05      	cmp	r6, #5
 800b0dc:	d073      	beq.n	800b1c6 <ucdr_serialize_uint64_t+0x176>
 800b0de:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b0e2:	71ab      	strb	r3, [r5, #6]
 800b0e4:	2e06      	cmp	r6, #6
 800b0e6:	d072      	beq.n	800b1ce <ucdr_serialize_uint64_t+0x17e>
 800b0e8:	f89d 3000 	ldrb.w	r3, [sp]
 800b0ec:	71eb      	strb	r3, [r5, #7]
 800b0ee:	6923      	ldr	r3, [r4, #16]
 800b0f0:	68a2      	ldr	r2, [r4, #8]
 800b0f2:	7da0      	ldrb	r0, [r4, #22]
 800b0f4:	3308      	adds	r3, #8
 800b0f6:	1b9e      	subs	r6, r3, r6
 800b0f8:	4442      	add	r2, r8
 800b0fa:	2308      	movs	r3, #8
 800b0fc:	f080 0001 	eor.w	r0, r0, #1
 800b100:	60a2      	str	r2, [r4, #8]
 800b102:	6126      	str	r6, [r4, #16]
 800b104:	7563      	strb	r3, [r4, #21]
 800b106:	b002      	add	sp, #8
 800b108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b10c:	2108      	movs	r1, #8
 800b10e:	4620      	mov	r0, r4
 800b110:	f000 fdcc 	bl	800bcac <ucdr_check_final_buffer_behavior>
 800b114:	b350      	cbz	r0, 800b16c <ucdr_serialize_uint64_t+0x11c>
 800b116:	7d23      	ldrb	r3, [r4, #20]
 800b118:	2b01      	cmp	r3, #1
 800b11a:	d02d      	beq.n	800b178 <ucdr_serialize_uint64_t+0x128>
 800b11c:	68a3      	ldr	r3, [r4, #8]
 800b11e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b122:	701a      	strb	r2, [r3, #0]
 800b124:	68a3      	ldr	r3, [r4, #8]
 800b126:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b12a:	705a      	strb	r2, [r3, #1]
 800b12c:	68a3      	ldr	r3, [r4, #8]
 800b12e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b132:	709a      	strb	r2, [r3, #2]
 800b134:	68a3      	ldr	r3, [r4, #8]
 800b136:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b13a:	70da      	strb	r2, [r3, #3]
 800b13c:	68a3      	ldr	r3, [r4, #8]
 800b13e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b142:	711a      	strb	r2, [r3, #4]
 800b144:	68a3      	ldr	r3, [r4, #8]
 800b146:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b14a:	715a      	strb	r2, [r3, #5]
 800b14c:	68a3      	ldr	r3, [r4, #8]
 800b14e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b152:	719a      	strb	r2, [r3, #6]
 800b154:	68a3      	ldr	r3, [r4, #8]
 800b156:	f89d 2000 	ldrb.w	r2, [sp]
 800b15a:	71da      	strb	r2, [r3, #7]
 800b15c:	68a2      	ldr	r2, [r4, #8]
 800b15e:	6923      	ldr	r3, [r4, #16]
 800b160:	3208      	adds	r2, #8
 800b162:	3308      	adds	r3, #8
 800b164:	2108      	movs	r1, #8
 800b166:	60a2      	str	r2, [r4, #8]
 800b168:	6123      	str	r3, [r4, #16]
 800b16a:	7561      	strb	r1, [r4, #21]
 800b16c:	7da0      	ldrb	r0, [r4, #22]
 800b16e:	f080 0001 	eor.w	r0, r0, #1
 800b172:	b002      	add	sp, #8
 800b174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b178:	466b      	mov	r3, sp
 800b17a:	cb03      	ldmia	r3!, {r0, r1}
 800b17c:	68a3      	ldr	r3, [r4, #8]
 800b17e:	6018      	str	r0, [r3, #0]
 800b180:	6059      	str	r1, [r3, #4]
 800b182:	e7eb      	b.n	800b15c <ucdr_serialize_uint64_t+0x10c>
 800b184:	68a2      	ldr	r2, [r4, #8]
 800b186:	6923      	ldr	r3, [r4, #16]
 800b188:	7da0      	ldrb	r0, [r4, #22]
 800b18a:	7567      	strb	r7, [r4, #21]
 800b18c:	1b92      	subs	r2, r2, r6
 800b18e:	1b9b      	subs	r3, r3, r6
 800b190:	f080 0001 	eor.w	r0, r0, #1
 800b194:	60a2      	str	r2, [r4, #8]
 800b196:	6123      	str	r3, [r4, #16]
 800b198:	b002      	add	sp, #8
 800b19a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b19e:	68a3      	ldr	r3, [r4, #8]
 800b1a0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b1a4:	701a      	strb	r2, [r3, #0]
 800b1a6:	68a3      	ldr	r3, [r4, #8]
 800b1a8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b1ac:	701a      	strb	r2, [r3, #0]
 800b1ae:	68a3      	ldr	r3, [r4, #8]
 800b1b0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b1b4:	701a      	strb	r2, [r3, #0]
 800b1b6:	68a3      	ldr	r3, [r4, #8]
 800b1b8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b1bc:	701a      	strb	r2, [r3, #0]
 800b1be:	68a3      	ldr	r3, [r4, #8]
 800b1c0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b1c4:	701a      	strb	r2, [r3, #0]
 800b1c6:	68a3      	ldr	r3, [r4, #8]
 800b1c8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b1cc:	701a      	strb	r2, [r3, #0]
 800b1ce:	68a3      	ldr	r3, [r4, #8]
 800b1d0:	f89d 2000 	ldrb.w	r2, [sp]
 800b1d4:	701a      	strb	r2, [r3, #0]
 800b1d6:	e78a      	b.n	800b0ee <ucdr_serialize_uint64_t+0x9e>
 800b1d8:	4628      	mov	r0, r5
 800b1da:	466d      	mov	r5, sp
 800b1dc:	4629      	mov	r1, r5
 800b1de:	4632      	mov	r2, r6
 800b1e0:	f00e fbe1 	bl	80199a6 <memcpy>
 800b1e4:	68a0      	ldr	r0, [r4, #8]
 800b1e6:	4642      	mov	r2, r8
 800b1e8:	19a9      	adds	r1, r5, r6
 800b1ea:	f00e fbdc 	bl	80199a6 <memcpy>
 800b1ee:	e77e      	b.n	800b0ee <ucdr_serialize_uint64_t+0x9e>

0800b1f0 <ucdr_serialize_int16_t>:
 800b1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1f4:	b082      	sub	sp, #8
 800b1f6:	460b      	mov	r3, r1
 800b1f8:	2102      	movs	r1, #2
 800b1fa:	4604      	mov	r4, r0
 800b1fc:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b200:	f000 fda8 	bl	800bd54 <ucdr_buffer_alignment>
 800b204:	4601      	mov	r1, r0
 800b206:	4620      	mov	r0, r4
 800b208:	7d67      	ldrb	r7, [r4, #21]
 800b20a:	f000 fde7 	bl	800bddc <ucdr_advance_buffer>
 800b20e:	2102      	movs	r1, #2
 800b210:	4620      	mov	r0, r4
 800b212:	f000 fd3f 	bl	800bc94 <ucdr_check_buffer_available_for>
 800b216:	bb78      	cbnz	r0, 800b278 <ucdr_serialize_int16_t+0x88>
 800b218:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b21c:	42ab      	cmp	r3, r5
 800b21e:	d926      	bls.n	800b26e <ucdr_serialize_int16_t+0x7e>
 800b220:	1b5e      	subs	r6, r3, r5
 800b222:	60a3      	str	r3, [r4, #8]
 800b224:	6923      	ldr	r3, [r4, #16]
 800b226:	f1c6 0802 	rsb	r8, r6, #2
 800b22a:	4433      	add	r3, r6
 800b22c:	6123      	str	r3, [r4, #16]
 800b22e:	4641      	mov	r1, r8
 800b230:	4620      	mov	r0, r4
 800b232:	f000 fd3b 	bl	800bcac <ucdr_check_final_buffer_behavior>
 800b236:	2800      	cmp	r0, #0
 800b238:	d03b      	beq.n	800b2b2 <ucdr_serialize_int16_t+0xc2>
 800b23a:	7d23      	ldrb	r3, [r4, #20]
 800b23c:	2b01      	cmp	r3, #1
 800b23e:	d04a      	beq.n	800b2d6 <ucdr_serialize_int16_t+0xe6>
 800b240:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b244:	702b      	strb	r3, [r5, #0]
 800b246:	2e00      	cmp	r6, #0
 800b248:	d040      	beq.n	800b2cc <ucdr_serialize_int16_t+0xdc>
 800b24a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b24e:	706b      	strb	r3, [r5, #1]
 800b250:	6923      	ldr	r3, [r4, #16]
 800b252:	68a2      	ldr	r2, [r4, #8]
 800b254:	7da0      	ldrb	r0, [r4, #22]
 800b256:	3302      	adds	r3, #2
 800b258:	1b9e      	subs	r6, r3, r6
 800b25a:	4442      	add	r2, r8
 800b25c:	2302      	movs	r3, #2
 800b25e:	f080 0001 	eor.w	r0, r0, #1
 800b262:	60a2      	str	r2, [r4, #8]
 800b264:	6126      	str	r6, [r4, #16]
 800b266:	7563      	strb	r3, [r4, #21]
 800b268:	b002      	add	sp, #8
 800b26a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b26e:	2102      	movs	r1, #2
 800b270:	4620      	mov	r0, r4
 800b272:	f000 fd1b 	bl	800bcac <ucdr_check_final_buffer_behavior>
 800b276:	b190      	cbz	r0, 800b29e <ucdr_serialize_int16_t+0xae>
 800b278:	7d23      	ldrb	r3, [r4, #20]
 800b27a:	2b01      	cmp	r3, #1
 800b27c:	68a3      	ldr	r3, [r4, #8]
 800b27e:	d014      	beq.n	800b2aa <ucdr_serialize_int16_t+0xba>
 800b280:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b284:	701a      	strb	r2, [r3, #0]
 800b286:	68a3      	ldr	r3, [r4, #8]
 800b288:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b28c:	705a      	strb	r2, [r3, #1]
 800b28e:	68a2      	ldr	r2, [r4, #8]
 800b290:	6923      	ldr	r3, [r4, #16]
 800b292:	3202      	adds	r2, #2
 800b294:	3302      	adds	r3, #2
 800b296:	2102      	movs	r1, #2
 800b298:	60a2      	str	r2, [r4, #8]
 800b29a:	6123      	str	r3, [r4, #16]
 800b29c:	7561      	strb	r1, [r4, #21]
 800b29e:	7da0      	ldrb	r0, [r4, #22]
 800b2a0:	f080 0001 	eor.w	r0, r0, #1
 800b2a4:	b002      	add	sp, #8
 800b2a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2aa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b2ae:	801a      	strh	r2, [r3, #0]
 800b2b0:	e7ed      	b.n	800b28e <ucdr_serialize_int16_t+0x9e>
 800b2b2:	68a2      	ldr	r2, [r4, #8]
 800b2b4:	6923      	ldr	r3, [r4, #16]
 800b2b6:	7da0      	ldrb	r0, [r4, #22]
 800b2b8:	7567      	strb	r7, [r4, #21]
 800b2ba:	1b92      	subs	r2, r2, r6
 800b2bc:	1b9b      	subs	r3, r3, r6
 800b2be:	f080 0001 	eor.w	r0, r0, #1
 800b2c2:	60a2      	str	r2, [r4, #8]
 800b2c4:	6123      	str	r3, [r4, #16]
 800b2c6:	b002      	add	sp, #8
 800b2c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2cc:	68a3      	ldr	r3, [r4, #8]
 800b2ce:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b2d2:	701a      	strb	r2, [r3, #0]
 800b2d4:	e7bc      	b.n	800b250 <ucdr_serialize_int16_t+0x60>
 800b2d6:	4628      	mov	r0, r5
 800b2d8:	f10d 0506 	add.w	r5, sp, #6
 800b2dc:	4629      	mov	r1, r5
 800b2de:	4632      	mov	r2, r6
 800b2e0:	f00e fb61 	bl	80199a6 <memcpy>
 800b2e4:	68a0      	ldr	r0, [r4, #8]
 800b2e6:	4642      	mov	r2, r8
 800b2e8:	19a9      	adds	r1, r5, r6
 800b2ea:	f00e fb5c 	bl	80199a6 <memcpy>
 800b2ee:	e7af      	b.n	800b250 <ucdr_serialize_int16_t+0x60>

0800b2f0 <ucdr_deserialize_int16_t>:
 800b2f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2f4:	460d      	mov	r5, r1
 800b2f6:	2102      	movs	r1, #2
 800b2f8:	4604      	mov	r4, r0
 800b2fa:	f000 fd2b 	bl	800bd54 <ucdr_buffer_alignment>
 800b2fe:	4601      	mov	r1, r0
 800b300:	4620      	mov	r0, r4
 800b302:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b306:	f000 fd69 	bl	800bddc <ucdr_advance_buffer>
 800b30a:	2102      	movs	r1, #2
 800b30c:	4620      	mov	r0, r4
 800b30e:	f000 fcc1 	bl	800bc94 <ucdr_check_buffer_available_for>
 800b312:	bb60      	cbnz	r0, 800b36e <ucdr_deserialize_int16_t+0x7e>
 800b314:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b318:	42be      	cmp	r6, r7
 800b31a:	d923      	bls.n	800b364 <ucdr_deserialize_int16_t+0x74>
 800b31c:	6923      	ldr	r3, [r4, #16]
 800b31e:	60a6      	str	r6, [r4, #8]
 800b320:	1bf6      	subs	r6, r6, r7
 800b322:	4433      	add	r3, r6
 800b324:	f1c6 0902 	rsb	r9, r6, #2
 800b328:	6123      	str	r3, [r4, #16]
 800b32a:	4649      	mov	r1, r9
 800b32c:	4620      	mov	r0, r4
 800b32e:	f000 fcbd 	bl	800bcac <ucdr_check_final_buffer_behavior>
 800b332:	2800      	cmp	r0, #0
 800b334:	d034      	beq.n	800b3a0 <ucdr_deserialize_int16_t+0xb0>
 800b336:	7d23      	ldrb	r3, [r4, #20]
 800b338:	2b01      	cmp	r3, #1
 800b33a:	d042      	beq.n	800b3c2 <ucdr_deserialize_int16_t+0xd2>
 800b33c:	787b      	ldrb	r3, [r7, #1]
 800b33e:	702b      	strb	r3, [r5, #0]
 800b340:	2e00      	cmp	r6, #0
 800b342:	d03a      	beq.n	800b3ba <ucdr_deserialize_int16_t+0xca>
 800b344:	783b      	ldrb	r3, [r7, #0]
 800b346:	706b      	strb	r3, [r5, #1]
 800b348:	6923      	ldr	r3, [r4, #16]
 800b34a:	68a2      	ldr	r2, [r4, #8]
 800b34c:	7da0      	ldrb	r0, [r4, #22]
 800b34e:	2102      	movs	r1, #2
 800b350:	3302      	adds	r3, #2
 800b352:	444a      	add	r2, r9
 800b354:	1b9b      	subs	r3, r3, r6
 800b356:	7561      	strb	r1, [r4, #21]
 800b358:	60a2      	str	r2, [r4, #8]
 800b35a:	6123      	str	r3, [r4, #16]
 800b35c:	f080 0001 	eor.w	r0, r0, #1
 800b360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b364:	2102      	movs	r1, #2
 800b366:	4620      	mov	r0, r4
 800b368:	f000 fca0 	bl	800bcac <ucdr_check_final_buffer_behavior>
 800b36c:	b180      	cbz	r0, 800b390 <ucdr_deserialize_int16_t+0xa0>
 800b36e:	7d23      	ldrb	r3, [r4, #20]
 800b370:	2b01      	cmp	r3, #1
 800b372:	68a3      	ldr	r3, [r4, #8]
 800b374:	d011      	beq.n	800b39a <ucdr_deserialize_int16_t+0xaa>
 800b376:	785b      	ldrb	r3, [r3, #1]
 800b378:	702b      	strb	r3, [r5, #0]
 800b37a:	68a3      	ldr	r3, [r4, #8]
 800b37c:	781b      	ldrb	r3, [r3, #0]
 800b37e:	706b      	strb	r3, [r5, #1]
 800b380:	68a2      	ldr	r2, [r4, #8]
 800b382:	6923      	ldr	r3, [r4, #16]
 800b384:	3202      	adds	r2, #2
 800b386:	3302      	adds	r3, #2
 800b388:	2102      	movs	r1, #2
 800b38a:	60a2      	str	r2, [r4, #8]
 800b38c:	6123      	str	r3, [r4, #16]
 800b38e:	7561      	strb	r1, [r4, #21]
 800b390:	7da0      	ldrb	r0, [r4, #22]
 800b392:	f080 0001 	eor.w	r0, r0, #1
 800b396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b39a:	881b      	ldrh	r3, [r3, #0]
 800b39c:	802b      	strh	r3, [r5, #0]
 800b39e:	e7ef      	b.n	800b380 <ucdr_deserialize_int16_t+0x90>
 800b3a0:	68a2      	ldr	r2, [r4, #8]
 800b3a2:	6923      	ldr	r3, [r4, #16]
 800b3a4:	7da0      	ldrb	r0, [r4, #22]
 800b3a6:	f884 8015 	strb.w	r8, [r4, #21]
 800b3aa:	1b92      	subs	r2, r2, r6
 800b3ac:	1b9b      	subs	r3, r3, r6
 800b3ae:	60a2      	str	r2, [r4, #8]
 800b3b0:	6123      	str	r3, [r4, #16]
 800b3b2:	f080 0001 	eor.w	r0, r0, #1
 800b3b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3ba:	68a3      	ldr	r3, [r4, #8]
 800b3bc:	781b      	ldrb	r3, [r3, #0]
 800b3be:	706b      	strb	r3, [r5, #1]
 800b3c0:	e7c2      	b.n	800b348 <ucdr_deserialize_int16_t+0x58>
 800b3c2:	4639      	mov	r1, r7
 800b3c4:	4632      	mov	r2, r6
 800b3c6:	4628      	mov	r0, r5
 800b3c8:	f00e faed 	bl	80199a6 <memcpy>
 800b3cc:	68a1      	ldr	r1, [r4, #8]
 800b3ce:	464a      	mov	r2, r9
 800b3d0:	19a8      	adds	r0, r5, r6
 800b3d2:	f00e fae8 	bl	80199a6 <memcpy>
 800b3d6:	e7b7      	b.n	800b348 <ucdr_deserialize_int16_t+0x58>

0800b3d8 <ucdr_serialize_int32_t>:
 800b3d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3dc:	b082      	sub	sp, #8
 800b3de:	4604      	mov	r4, r0
 800b3e0:	9101      	str	r1, [sp, #4]
 800b3e2:	2104      	movs	r1, #4
 800b3e4:	f000 fcb6 	bl	800bd54 <ucdr_buffer_alignment>
 800b3e8:	4601      	mov	r1, r0
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	7d67      	ldrb	r7, [r4, #21]
 800b3ee:	f000 fcf5 	bl	800bddc <ucdr_advance_buffer>
 800b3f2:	2104      	movs	r1, #4
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	f000 fc4d 	bl	800bc94 <ucdr_check_buffer_available_for>
 800b3fa:	2800      	cmp	r0, #0
 800b3fc:	d139      	bne.n	800b472 <ucdr_serialize_int32_t+0x9a>
 800b3fe:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b402:	42ab      	cmp	r3, r5
 800b404:	d930      	bls.n	800b468 <ucdr_serialize_int32_t+0x90>
 800b406:	1b5e      	subs	r6, r3, r5
 800b408:	60a3      	str	r3, [r4, #8]
 800b40a:	6923      	ldr	r3, [r4, #16]
 800b40c:	f1c6 0804 	rsb	r8, r6, #4
 800b410:	4433      	add	r3, r6
 800b412:	6123      	str	r3, [r4, #16]
 800b414:	4641      	mov	r1, r8
 800b416:	4620      	mov	r0, r4
 800b418:	f000 fc48 	bl	800bcac <ucdr_check_final_buffer_behavior>
 800b41c:	2800      	cmp	r0, #0
 800b41e:	d04c      	beq.n	800b4ba <ucdr_serialize_int32_t+0xe2>
 800b420:	7d23      	ldrb	r3, [r4, #20]
 800b422:	2b01      	cmp	r3, #1
 800b424:	d063      	beq.n	800b4ee <ucdr_serialize_int32_t+0x116>
 800b426:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b42a:	702b      	strb	r3, [r5, #0]
 800b42c:	2e00      	cmp	r6, #0
 800b42e:	d051      	beq.n	800b4d4 <ucdr_serialize_int32_t+0xfc>
 800b430:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b434:	706b      	strb	r3, [r5, #1]
 800b436:	2e01      	cmp	r6, #1
 800b438:	d050      	beq.n	800b4dc <ucdr_serialize_int32_t+0x104>
 800b43a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b43e:	70ab      	strb	r3, [r5, #2]
 800b440:	2e02      	cmp	r6, #2
 800b442:	d04f      	beq.n	800b4e4 <ucdr_serialize_int32_t+0x10c>
 800b444:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b448:	70eb      	strb	r3, [r5, #3]
 800b44a:	6923      	ldr	r3, [r4, #16]
 800b44c:	68a2      	ldr	r2, [r4, #8]
 800b44e:	7da0      	ldrb	r0, [r4, #22]
 800b450:	3304      	adds	r3, #4
 800b452:	1b9e      	subs	r6, r3, r6
 800b454:	4442      	add	r2, r8
 800b456:	2304      	movs	r3, #4
 800b458:	f080 0001 	eor.w	r0, r0, #1
 800b45c:	60a2      	str	r2, [r4, #8]
 800b45e:	6126      	str	r6, [r4, #16]
 800b460:	7563      	strb	r3, [r4, #21]
 800b462:	b002      	add	sp, #8
 800b464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b468:	2104      	movs	r1, #4
 800b46a:	4620      	mov	r0, r4
 800b46c:	f000 fc1e 	bl	800bcac <ucdr_check_final_buffer_behavior>
 800b470:	b1d0      	cbz	r0, 800b4a8 <ucdr_serialize_int32_t+0xd0>
 800b472:	7d23      	ldrb	r3, [r4, #20]
 800b474:	2b01      	cmp	r3, #1
 800b476:	68a3      	ldr	r3, [r4, #8]
 800b478:	d01c      	beq.n	800b4b4 <ucdr_serialize_int32_t+0xdc>
 800b47a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b47e:	701a      	strb	r2, [r3, #0]
 800b480:	68a3      	ldr	r3, [r4, #8]
 800b482:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b486:	705a      	strb	r2, [r3, #1]
 800b488:	68a3      	ldr	r3, [r4, #8]
 800b48a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b48e:	709a      	strb	r2, [r3, #2]
 800b490:	68a3      	ldr	r3, [r4, #8]
 800b492:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b496:	70da      	strb	r2, [r3, #3]
 800b498:	68a2      	ldr	r2, [r4, #8]
 800b49a:	6923      	ldr	r3, [r4, #16]
 800b49c:	3204      	adds	r2, #4
 800b49e:	3304      	adds	r3, #4
 800b4a0:	2104      	movs	r1, #4
 800b4a2:	60a2      	str	r2, [r4, #8]
 800b4a4:	6123      	str	r3, [r4, #16]
 800b4a6:	7561      	strb	r1, [r4, #21]
 800b4a8:	7da0      	ldrb	r0, [r4, #22]
 800b4aa:	f080 0001 	eor.w	r0, r0, #1
 800b4ae:	b002      	add	sp, #8
 800b4b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4b4:	9a01      	ldr	r2, [sp, #4]
 800b4b6:	601a      	str	r2, [r3, #0]
 800b4b8:	e7ee      	b.n	800b498 <ucdr_serialize_int32_t+0xc0>
 800b4ba:	68a2      	ldr	r2, [r4, #8]
 800b4bc:	6923      	ldr	r3, [r4, #16]
 800b4be:	7da0      	ldrb	r0, [r4, #22]
 800b4c0:	7567      	strb	r7, [r4, #21]
 800b4c2:	1b92      	subs	r2, r2, r6
 800b4c4:	1b9b      	subs	r3, r3, r6
 800b4c6:	f080 0001 	eor.w	r0, r0, #1
 800b4ca:	60a2      	str	r2, [r4, #8]
 800b4cc:	6123      	str	r3, [r4, #16]
 800b4ce:	b002      	add	sp, #8
 800b4d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4d4:	68a3      	ldr	r3, [r4, #8]
 800b4d6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b4da:	701a      	strb	r2, [r3, #0]
 800b4dc:	68a3      	ldr	r3, [r4, #8]
 800b4de:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b4e2:	701a      	strb	r2, [r3, #0]
 800b4e4:	68a3      	ldr	r3, [r4, #8]
 800b4e6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b4ea:	701a      	strb	r2, [r3, #0]
 800b4ec:	e7ad      	b.n	800b44a <ucdr_serialize_int32_t+0x72>
 800b4ee:	4628      	mov	r0, r5
 800b4f0:	ad01      	add	r5, sp, #4
 800b4f2:	4629      	mov	r1, r5
 800b4f4:	4632      	mov	r2, r6
 800b4f6:	f00e fa56 	bl	80199a6 <memcpy>
 800b4fa:	68a0      	ldr	r0, [r4, #8]
 800b4fc:	4642      	mov	r2, r8
 800b4fe:	19a9      	adds	r1, r5, r6
 800b500:	f00e fa51 	bl	80199a6 <memcpy>
 800b504:	e7a1      	b.n	800b44a <ucdr_serialize_int32_t+0x72>
 800b506:	bf00      	nop

0800b508 <ucdr_deserialize_int32_t>:
 800b508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b50c:	460d      	mov	r5, r1
 800b50e:	2104      	movs	r1, #4
 800b510:	4604      	mov	r4, r0
 800b512:	f000 fc1f 	bl	800bd54 <ucdr_buffer_alignment>
 800b516:	4601      	mov	r1, r0
 800b518:	4620      	mov	r0, r4
 800b51a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b51e:	f000 fc5d 	bl	800bddc <ucdr_advance_buffer>
 800b522:	2104      	movs	r1, #4
 800b524:	4620      	mov	r0, r4
 800b526:	f000 fbb5 	bl	800bc94 <ucdr_check_buffer_available_for>
 800b52a:	2800      	cmp	r0, #0
 800b52c:	d138      	bne.n	800b5a0 <ucdr_deserialize_int32_t+0x98>
 800b52e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b532:	42b7      	cmp	r7, r6
 800b534:	d92f      	bls.n	800b596 <ucdr_deserialize_int32_t+0x8e>
 800b536:	6923      	ldr	r3, [r4, #16]
 800b538:	60a7      	str	r7, [r4, #8]
 800b53a:	1bbf      	subs	r7, r7, r6
 800b53c:	443b      	add	r3, r7
 800b53e:	f1c7 0904 	rsb	r9, r7, #4
 800b542:	6123      	str	r3, [r4, #16]
 800b544:	4649      	mov	r1, r9
 800b546:	4620      	mov	r0, r4
 800b548:	f000 fbb0 	bl	800bcac <ucdr_check_final_buffer_behavior>
 800b54c:	2800      	cmp	r0, #0
 800b54e:	d046      	beq.n	800b5de <ucdr_deserialize_int32_t+0xd6>
 800b550:	7d23      	ldrb	r3, [r4, #20]
 800b552:	2b01      	cmp	r3, #1
 800b554:	d05c      	beq.n	800b610 <ucdr_deserialize_int32_t+0x108>
 800b556:	78f3      	ldrb	r3, [r6, #3]
 800b558:	702b      	strb	r3, [r5, #0]
 800b55a:	2f00      	cmp	r7, #0
 800b55c:	d04c      	beq.n	800b5f8 <ucdr_deserialize_int32_t+0xf0>
 800b55e:	78b3      	ldrb	r3, [r6, #2]
 800b560:	706b      	strb	r3, [r5, #1]
 800b562:	2f01      	cmp	r7, #1
 800b564:	f105 0302 	add.w	r3, r5, #2
 800b568:	d04a      	beq.n	800b600 <ucdr_deserialize_int32_t+0xf8>
 800b56a:	7873      	ldrb	r3, [r6, #1]
 800b56c:	70ab      	strb	r3, [r5, #2]
 800b56e:	2f02      	cmp	r7, #2
 800b570:	f105 0303 	add.w	r3, r5, #3
 800b574:	d048      	beq.n	800b608 <ucdr_deserialize_int32_t+0x100>
 800b576:	7833      	ldrb	r3, [r6, #0]
 800b578:	70eb      	strb	r3, [r5, #3]
 800b57a:	6923      	ldr	r3, [r4, #16]
 800b57c:	68a2      	ldr	r2, [r4, #8]
 800b57e:	7da0      	ldrb	r0, [r4, #22]
 800b580:	2104      	movs	r1, #4
 800b582:	3304      	adds	r3, #4
 800b584:	444a      	add	r2, r9
 800b586:	1bdb      	subs	r3, r3, r7
 800b588:	7561      	strb	r1, [r4, #21]
 800b58a:	60a2      	str	r2, [r4, #8]
 800b58c:	6123      	str	r3, [r4, #16]
 800b58e:	f080 0001 	eor.w	r0, r0, #1
 800b592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b596:	2104      	movs	r1, #4
 800b598:	4620      	mov	r0, r4
 800b59a:	f000 fb87 	bl	800bcac <ucdr_check_final_buffer_behavior>
 800b59e:	b1b0      	cbz	r0, 800b5ce <ucdr_deserialize_int32_t+0xc6>
 800b5a0:	7d23      	ldrb	r3, [r4, #20]
 800b5a2:	2b01      	cmp	r3, #1
 800b5a4:	68a3      	ldr	r3, [r4, #8]
 800b5a6:	d017      	beq.n	800b5d8 <ucdr_deserialize_int32_t+0xd0>
 800b5a8:	78db      	ldrb	r3, [r3, #3]
 800b5aa:	702b      	strb	r3, [r5, #0]
 800b5ac:	68a3      	ldr	r3, [r4, #8]
 800b5ae:	789b      	ldrb	r3, [r3, #2]
 800b5b0:	706b      	strb	r3, [r5, #1]
 800b5b2:	68a3      	ldr	r3, [r4, #8]
 800b5b4:	785b      	ldrb	r3, [r3, #1]
 800b5b6:	70ab      	strb	r3, [r5, #2]
 800b5b8:	68a3      	ldr	r3, [r4, #8]
 800b5ba:	781b      	ldrb	r3, [r3, #0]
 800b5bc:	70eb      	strb	r3, [r5, #3]
 800b5be:	68a2      	ldr	r2, [r4, #8]
 800b5c0:	6923      	ldr	r3, [r4, #16]
 800b5c2:	3204      	adds	r2, #4
 800b5c4:	3304      	adds	r3, #4
 800b5c6:	2104      	movs	r1, #4
 800b5c8:	60a2      	str	r2, [r4, #8]
 800b5ca:	6123      	str	r3, [r4, #16]
 800b5cc:	7561      	strb	r1, [r4, #21]
 800b5ce:	7da0      	ldrb	r0, [r4, #22]
 800b5d0:	f080 0001 	eor.w	r0, r0, #1
 800b5d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	602b      	str	r3, [r5, #0]
 800b5dc:	e7ef      	b.n	800b5be <ucdr_deserialize_int32_t+0xb6>
 800b5de:	68a2      	ldr	r2, [r4, #8]
 800b5e0:	6923      	ldr	r3, [r4, #16]
 800b5e2:	7da0      	ldrb	r0, [r4, #22]
 800b5e4:	f884 8015 	strb.w	r8, [r4, #21]
 800b5e8:	1bd2      	subs	r2, r2, r7
 800b5ea:	1bdb      	subs	r3, r3, r7
 800b5ec:	60a2      	str	r2, [r4, #8]
 800b5ee:	6123      	str	r3, [r4, #16]
 800b5f0:	f080 0001 	eor.w	r0, r0, #1
 800b5f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5f8:	68a3      	ldr	r3, [r4, #8]
 800b5fa:	789b      	ldrb	r3, [r3, #2]
 800b5fc:	706b      	strb	r3, [r5, #1]
 800b5fe:	1cab      	adds	r3, r5, #2
 800b600:	68a2      	ldr	r2, [r4, #8]
 800b602:	7852      	ldrb	r2, [r2, #1]
 800b604:	f803 2b01 	strb.w	r2, [r3], #1
 800b608:	68a2      	ldr	r2, [r4, #8]
 800b60a:	7812      	ldrb	r2, [r2, #0]
 800b60c:	701a      	strb	r2, [r3, #0]
 800b60e:	e7b4      	b.n	800b57a <ucdr_deserialize_int32_t+0x72>
 800b610:	4631      	mov	r1, r6
 800b612:	463a      	mov	r2, r7
 800b614:	4628      	mov	r0, r5
 800b616:	f00e f9c6 	bl	80199a6 <memcpy>
 800b61a:	68a1      	ldr	r1, [r4, #8]
 800b61c:	464a      	mov	r2, r9
 800b61e:	19e8      	adds	r0, r5, r7
 800b620:	f00e f9c1 	bl	80199a6 <memcpy>
 800b624:	e7a9      	b.n	800b57a <ucdr_deserialize_int32_t+0x72>
 800b626:	bf00      	nop

0800b628 <ucdr_serialize_double>:
 800b628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b62c:	2108      	movs	r1, #8
 800b62e:	b082      	sub	sp, #8
 800b630:	4604      	mov	r4, r0
 800b632:	ed8d 0b00 	vstr	d0, [sp]
 800b636:	f000 fb8d 	bl	800bd54 <ucdr_buffer_alignment>
 800b63a:	4601      	mov	r1, r0
 800b63c:	4620      	mov	r0, r4
 800b63e:	7d67      	ldrb	r7, [r4, #21]
 800b640:	f000 fbcc 	bl	800bddc <ucdr_advance_buffer>
 800b644:	2108      	movs	r1, #8
 800b646:	4620      	mov	r0, r4
 800b648:	f000 fb24 	bl	800bc94 <ucdr_check_buffer_available_for>
 800b64c:	2800      	cmp	r0, #0
 800b64e:	d14e      	bne.n	800b6ee <ucdr_serialize_double+0xc6>
 800b650:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b654:	42ab      	cmp	r3, r5
 800b656:	d945      	bls.n	800b6e4 <ucdr_serialize_double+0xbc>
 800b658:	1b5e      	subs	r6, r3, r5
 800b65a:	60a3      	str	r3, [r4, #8]
 800b65c:	6923      	ldr	r3, [r4, #16]
 800b65e:	f1c6 0808 	rsb	r8, r6, #8
 800b662:	4433      	add	r3, r6
 800b664:	6123      	str	r3, [r4, #16]
 800b666:	4641      	mov	r1, r8
 800b668:	4620      	mov	r0, r4
 800b66a:	f000 fb1f 	bl	800bcac <ucdr_check_final_buffer_behavior>
 800b66e:	2800      	cmp	r0, #0
 800b670:	d074      	beq.n	800b75c <ucdr_serialize_double+0x134>
 800b672:	7d23      	ldrb	r3, [r4, #20]
 800b674:	2b01      	cmp	r3, #1
 800b676:	f000 809b 	beq.w	800b7b0 <ucdr_serialize_double+0x188>
 800b67a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b67e:	702b      	strb	r3, [r5, #0]
 800b680:	2e00      	cmp	r6, #0
 800b682:	d078      	beq.n	800b776 <ucdr_serialize_double+0x14e>
 800b684:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b688:	706b      	strb	r3, [r5, #1]
 800b68a:	2e01      	cmp	r6, #1
 800b68c:	d077      	beq.n	800b77e <ucdr_serialize_double+0x156>
 800b68e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b692:	70ab      	strb	r3, [r5, #2]
 800b694:	2e02      	cmp	r6, #2
 800b696:	d076      	beq.n	800b786 <ucdr_serialize_double+0x15e>
 800b698:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b69c:	70eb      	strb	r3, [r5, #3]
 800b69e:	2e03      	cmp	r6, #3
 800b6a0:	d075      	beq.n	800b78e <ucdr_serialize_double+0x166>
 800b6a2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b6a6:	712b      	strb	r3, [r5, #4]
 800b6a8:	2e04      	cmp	r6, #4
 800b6aa:	d074      	beq.n	800b796 <ucdr_serialize_double+0x16e>
 800b6ac:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b6b0:	716b      	strb	r3, [r5, #5]
 800b6b2:	2e05      	cmp	r6, #5
 800b6b4:	d073      	beq.n	800b79e <ucdr_serialize_double+0x176>
 800b6b6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b6ba:	71ab      	strb	r3, [r5, #6]
 800b6bc:	2e06      	cmp	r6, #6
 800b6be:	d072      	beq.n	800b7a6 <ucdr_serialize_double+0x17e>
 800b6c0:	f89d 3000 	ldrb.w	r3, [sp]
 800b6c4:	71eb      	strb	r3, [r5, #7]
 800b6c6:	6923      	ldr	r3, [r4, #16]
 800b6c8:	68a2      	ldr	r2, [r4, #8]
 800b6ca:	7da0      	ldrb	r0, [r4, #22]
 800b6cc:	3308      	adds	r3, #8
 800b6ce:	1b9e      	subs	r6, r3, r6
 800b6d0:	4442      	add	r2, r8
 800b6d2:	2308      	movs	r3, #8
 800b6d4:	f080 0001 	eor.w	r0, r0, #1
 800b6d8:	60a2      	str	r2, [r4, #8]
 800b6da:	6126      	str	r6, [r4, #16]
 800b6dc:	7563      	strb	r3, [r4, #21]
 800b6de:	b002      	add	sp, #8
 800b6e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6e4:	2108      	movs	r1, #8
 800b6e6:	4620      	mov	r0, r4
 800b6e8:	f000 fae0 	bl	800bcac <ucdr_check_final_buffer_behavior>
 800b6ec:	b350      	cbz	r0, 800b744 <ucdr_serialize_double+0x11c>
 800b6ee:	7d23      	ldrb	r3, [r4, #20]
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	d02d      	beq.n	800b750 <ucdr_serialize_double+0x128>
 800b6f4:	68a3      	ldr	r3, [r4, #8]
 800b6f6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b6fa:	701a      	strb	r2, [r3, #0]
 800b6fc:	68a3      	ldr	r3, [r4, #8]
 800b6fe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b702:	705a      	strb	r2, [r3, #1]
 800b704:	68a3      	ldr	r3, [r4, #8]
 800b706:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b70a:	709a      	strb	r2, [r3, #2]
 800b70c:	68a3      	ldr	r3, [r4, #8]
 800b70e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b712:	70da      	strb	r2, [r3, #3]
 800b714:	68a3      	ldr	r3, [r4, #8]
 800b716:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b71a:	711a      	strb	r2, [r3, #4]
 800b71c:	68a3      	ldr	r3, [r4, #8]
 800b71e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b722:	715a      	strb	r2, [r3, #5]
 800b724:	68a3      	ldr	r3, [r4, #8]
 800b726:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b72a:	719a      	strb	r2, [r3, #6]
 800b72c:	68a3      	ldr	r3, [r4, #8]
 800b72e:	f89d 2000 	ldrb.w	r2, [sp]
 800b732:	71da      	strb	r2, [r3, #7]
 800b734:	68a2      	ldr	r2, [r4, #8]
 800b736:	6923      	ldr	r3, [r4, #16]
 800b738:	3208      	adds	r2, #8
 800b73a:	3308      	adds	r3, #8
 800b73c:	2108      	movs	r1, #8
 800b73e:	60a2      	str	r2, [r4, #8]
 800b740:	6123      	str	r3, [r4, #16]
 800b742:	7561      	strb	r1, [r4, #21]
 800b744:	7da0      	ldrb	r0, [r4, #22]
 800b746:	f080 0001 	eor.w	r0, r0, #1
 800b74a:	b002      	add	sp, #8
 800b74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b750:	466b      	mov	r3, sp
 800b752:	cb03      	ldmia	r3!, {r0, r1}
 800b754:	68a3      	ldr	r3, [r4, #8]
 800b756:	6018      	str	r0, [r3, #0]
 800b758:	6059      	str	r1, [r3, #4]
 800b75a:	e7eb      	b.n	800b734 <ucdr_serialize_double+0x10c>
 800b75c:	68a2      	ldr	r2, [r4, #8]
 800b75e:	6923      	ldr	r3, [r4, #16]
 800b760:	7da0      	ldrb	r0, [r4, #22]
 800b762:	7567      	strb	r7, [r4, #21]
 800b764:	1b92      	subs	r2, r2, r6
 800b766:	1b9b      	subs	r3, r3, r6
 800b768:	f080 0001 	eor.w	r0, r0, #1
 800b76c:	60a2      	str	r2, [r4, #8]
 800b76e:	6123      	str	r3, [r4, #16]
 800b770:	b002      	add	sp, #8
 800b772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b776:	68a3      	ldr	r3, [r4, #8]
 800b778:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b77c:	701a      	strb	r2, [r3, #0]
 800b77e:	68a3      	ldr	r3, [r4, #8]
 800b780:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b784:	701a      	strb	r2, [r3, #0]
 800b786:	68a3      	ldr	r3, [r4, #8]
 800b788:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b78c:	701a      	strb	r2, [r3, #0]
 800b78e:	68a3      	ldr	r3, [r4, #8]
 800b790:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b794:	701a      	strb	r2, [r3, #0]
 800b796:	68a3      	ldr	r3, [r4, #8]
 800b798:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b79c:	701a      	strb	r2, [r3, #0]
 800b79e:	68a3      	ldr	r3, [r4, #8]
 800b7a0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b7a4:	701a      	strb	r2, [r3, #0]
 800b7a6:	68a3      	ldr	r3, [r4, #8]
 800b7a8:	f89d 2000 	ldrb.w	r2, [sp]
 800b7ac:	701a      	strb	r2, [r3, #0]
 800b7ae:	e78a      	b.n	800b6c6 <ucdr_serialize_double+0x9e>
 800b7b0:	4628      	mov	r0, r5
 800b7b2:	466d      	mov	r5, sp
 800b7b4:	4629      	mov	r1, r5
 800b7b6:	4632      	mov	r2, r6
 800b7b8:	f00e f8f5 	bl	80199a6 <memcpy>
 800b7bc:	68a0      	ldr	r0, [r4, #8]
 800b7be:	4642      	mov	r2, r8
 800b7c0:	19a9      	adds	r1, r5, r6
 800b7c2:	f00e f8f0 	bl	80199a6 <memcpy>
 800b7c6:	e77e      	b.n	800b6c6 <ucdr_serialize_double+0x9e>

0800b7c8 <ucdr_serialize_endian_double>:
 800b7c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b7cc:	460e      	mov	r6, r1
 800b7ce:	b083      	sub	sp, #12
 800b7d0:	2108      	movs	r1, #8
 800b7d2:	4604      	mov	r4, r0
 800b7d4:	ed8d 0b00 	vstr	d0, [sp]
 800b7d8:	f000 fabc 	bl	800bd54 <ucdr_buffer_alignment>
 800b7dc:	4601      	mov	r1, r0
 800b7de:	4620      	mov	r0, r4
 800b7e0:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b7e4:	f000 fafa 	bl	800bddc <ucdr_advance_buffer>
 800b7e8:	2108      	movs	r1, #8
 800b7ea:	4620      	mov	r0, r4
 800b7ec:	f000 fa52 	bl	800bc94 <ucdr_check_buffer_available_for>
 800b7f0:	2800      	cmp	r0, #0
 800b7f2:	d14d      	bne.n	800b890 <ucdr_serialize_endian_double+0xc8>
 800b7f4:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800b7f8:	42bd      	cmp	r5, r7
 800b7fa:	d944      	bls.n	800b886 <ucdr_serialize_endian_double+0xbe>
 800b7fc:	6923      	ldr	r3, [r4, #16]
 800b7fe:	60a5      	str	r5, [r4, #8]
 800b800:	1bed      	subs	r5, r5, r7
 800b802:	442b      	add	r3, r5
 800b804:	f1c5 0908 	rsb	r9, r5, #8
 800b808:	6123      	str	r3, [r4, #16]
 800b80a:	4649      	mov	r1, r9
 800b80c:	4620      	mov	r0, r4
 800b80e:	f000 fa4d 	bl	800bcac <ucdr_check_final_buffer_behavior>
 800b812:	2800      	cmp	r0, #0
 800b814:	d072      	beq.n	800b8fc <ucdr_serialize_endian_double+0x134>
 800b816:	2e01      	cmp	r6, #1
 800b818:	f000 809b 	beq.w	800b952 <ucdr_serialize_endian_double+0x18a>
 800b81c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b820:	703b      	strb	r3, [r7, #0]
 800b822:	2d00      	cmp	r5, #0
 800b824:	d078      	beq.n	800b918 <ucdr_serialize_endian_double+0x150>
 800b826:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b82a:	707b      	strb	r3, [r7, #1]
 800b82c:	2d01      	cmp	r5, #1
 800b82e:	d077      	beq.n	800b920 <ucdr_serialize_endian_double+0x158>
 800b830:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b834:	70bb      	strb	r3, [r7, #2]
 800b836:	2d02      	cmp	r5, #2
 800b838:	d076      	beq.n	800b928 <ucdr_serialize_endian_double+0x160>
 800b83a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b83e:	70fb      	strb	r3, [r7, #3]
 800b840:	2d03      	cmp	r5, #3
 800b842:	d075      	beq.n	800b930 <ucdr_serialize_endian_double+0x168>
 800b844:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b848:	713b      	strb	r3, [r7, #4]
 800b84a:	2d04      	cmp	r5, #4
 800b84c:	d074      	beq.n	800b938 <ucdr_serialize_endian_double+0x170>
 800b84e:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b852:	717b      	strb	r3, [r7, #5]
 800b854:	2d05      	cmp	r5, #5
 800b856:	d073      	beq.n	800b940 <ucdr_serialize_endian_double+0x178>
 800b858:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b85c:	71bb      	strb	r3, [r7, #6]
 800b85e:	2d06      	cmp	r5, #6
 800b860:	d072      	beq.n	800b948 <ucdr_serialize_endian_double+0x180>
 800b862:	f89d 3000 	ldrb.w	r3, [sp]
 800b866:	71fb      	strb	r3, [r7, #7]
 800b868:	6923      	ldr	r3, [r4, #16]
 800b86a:	68a2      	ldr	r2, [r4, #8]
 800b86c:	7da0      	ldrb	r0, [r4, #22]
 800b86e:	3308      	adds	r3, #8
 800b870:	1b5d      	subs	r5, r3, r5
 800b872:	444a      	add	r2, r9
 800b874:	2308      	movs	r3, #8
 800b876:	f080 0001 	eor.w	r0, r0, #1
 800b87a:	60a2      	str	r2, [r4, #8]
 800b87c:	6125      	str	r5, [r4, #16]
 800b87e:	7563      	strb	r3, [r4, #21]
 800b880:	b003      	add	sp, #12
 800b882:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b886:	2108      	movs	r1, #8
 800b888:	4620      	mov	r0, r4
 800b88a:	f000 fa0f 	bl	800bcac <ucdr_check_final_buffer_behavior>
 800b88e:	b348      	cbz	r0, 800b8e4 <ucdr_serialize_endian_double+0x11c>
 800b890:	2e01      	cmp	r6, #1
 800b892:	d02d      	beq.n	800b8f0 <ucdr_serialize_endian_double+0x128>
 800b894:	68a3      	ldr	r3, [r4, #8]
 800b896:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b89a:	701a      	strb	r2, [r3, #0]
 800b89c:	68a3      	ldr	r3, [r4, #8]
 800b89e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b8a2:	705a      	strb	r2, [r3, #1]
 800b8a4:	68a3      	ldr	r3, [r4, #8]
 800b8a6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b8aa:	709a      	strb	r2, [r3, #2]
 800b8ac:	68a3      	ldr	r3, [r4, #8]
 800b8ae:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b8b2:	70da      	strb	r2, [r3, #3]
 800b8b4:	68a3      	ldr	r3, [r4, #8]
 800b8b6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b8ba:	711a      	strb	r2, [r3, #4]
 800b8bc:	68a3      	ldr	r3, [r4, #8]
 800b8be:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b8c2:	715a      	strb	r2, [r3, #5]
 800b8c4:	68a3      	ldr	r3, [r4, #8]
 800b8c6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b8ca:	719a      	strb	r2, [r3, #6]
 800b8cc:	68a3      	ldr	r3, [r4, #8]
 800b8ce:	f89d 2000 	ldrb.w	r2, [sp]
 800b8d2:	71da      	strb	r2, [r3, #7]
 800b8d4:	68a2      	ldr	r2, [r4, #8]
 800b8d6:	6923      	ldr	r3, [r4, #16]
 800b8d8:	3208      	adds	r2, #8
 800b8da:	3308      	adds	r3, #8
 800b8dc:	2108      	movs	r1, #8
 800b8de:	60a2      	str	r2, [r4, #8]
 800b8e0:	6123      	str	r3, [r4, #16]
 800b8e2:	7561      	strb	r1, [r4, #21]
 800b8e4:	7da0      	ldrb	r0, [r4, #22]
 800b8e6:	f080 0001 	eor.w	r0, r0, #1
 800b8ea:	b003      	add	sp, #12
 800b8ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8f0:	466b      	mov	r3, sp
 800b8f2:	cb03      	ldmia	r3!, {r0, r1}
 800b8f4:	68a3      	ldr	r3, [r4, #8]
 800b8f6:	6018      	str	r0, [r3, #0]
 800b8f8:	6059      	str	r1, [r3, #4]
 800b8fa:	e7eb      	b.n	800b8d4 <ucdr_serialize_endian_double+0x10c>
 800b8fc:	68a2      	ldr	r2, [r4, #8]
 800b8fe:	6923      	ldr	r3, [r4, #16]
 800b900:	7da0      	ldrb	r0, [r4, #22]
 800b902:	f884 8015 	strb.w	r8, [r4, #21]
 800b906:	1b52      	subs	r2, r2, r5
 800b908:	1b5b      	subs	r3, r3, r5
 800b90a:	f080 0001 	eor.w	r0, r0, #1
 800b90e:	60a2      	str	r2, [r4, #8]
 800b910:	6123      	str	r3, [r4, #16]
 800b912:	b003      	add	sp, #12
 800b914:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b918:	68a3      	ldr	r3, [r4, #8]
 800b91a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b91e:	701a      	strb	r2, [r3, #0]
 800b920:	68a3      	ldr	r3, [r4, #8]
 800b922:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b926:	701a      	strb	r2, [r3, #0]
 800b928:	68a3      	ldr	r3, [r4, #8]
 800b92a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b92e:	701a      	strb	r2, [r3, #0]
 800b930:	68a3      	ldr	r3, [r4, #8]
 800b932:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b936:	701a      	strb	r2, [r3, #0]
 800b938:	68a3      	ldr	r3, [r4, #8]
 800b93a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b93e:	701a      	strb	r2, [r3, #0]
 800b940:	68a3      	ldr	r3, [r4, #8]
 800b942:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b946:	701a      	strb	r2, [r3, #0]
 800b948:	68a3      	ldr	r3, [r4, #8]
 800b94a:	f89d 2000 	ldrb.w	r2, [sp]
 800b94e:	701a      	strb	r2, [r3, #0]
 800b950:	e78a      	b.n	800b868 <ucdr_serialize_endian_double+0xa0>
 800b952:	466e      	mov	r6, sp
 800b954:	4631      	mov	r1, r6
 800b956:	462a      	mov	r2, r5
 800b958:	4638      	mov	r0, r7
 800b95a:	f00e f824 	bl	80199a6 <memcpy>
 800b95e:	68a0      	ldr	r0, [r4, #8]
 800b960:	464a      	mov	r2, r9
 800b962:	1971      	adds	r1, r6, r5
 800b964:	f00e f81f 	bl	80199a6 <memcpy>
 800b968:	e77e      	b.n	800b868 <ucdr_serialize_endian_double+0xa0>
 800b96a:	bf00      	nop

0800b96c <ucdr_deserialize_double>:
 800b96c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b970:	460d      	mov	r5, r1
 800b972:	2108      	movs	r1, #8
 800b974:	4604      	mov	r4, r0
 800b976:	f000 f9ed 	bl	800bd54 <ucdr_buffer_alignment>
 800b97a:	4601      	mov	r1, r0
 800b97c:	4620      	mov	r0, r4
 800b97e:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b982:	f000 fa2b 	bl	800bddc <ucdr_advance_buffer>
 800b986:	2108      	movs	r1, #8
 800b988:	4620      	mov	r0, r4
 800b98a:	f000 f983 	bl	800bc94 <ucdr_check_buffer_available_for>
 800b98e:	2800      	cmp	r0, #0
 800b990:	d151      	bne.n	800ba36 <ucdr_deserialize_double+0xca>
 800b992:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b996:	42be      	cmp	r6, r7
 800b998:	d948      	bls.n	800ba2c <ucdr_deserialize_double+0xc0>
 800b99a:	6923      	ldr	r3, [r4, #16]
 800b99c:	60a6      	str	r6, [r4, #8]
 800b99e:	1bf6      	subs	r6, r6, r7
 800b9a0:	4433      	add	r3, r6
 800b9a2:	f1c6 0808 	rsb	r8, r6, #8
 800b9a6:	6123      	str	r3, [r4, #16]
 800b9a8:	4641      	mov	r1, r8
 800b9aa:	4620      	mov	r0, r4
 800b9ac:	f000 f97e 	bl	800bcac <ucdr_check_final_buffer_behavior>
 800b9b0:	2800      	cmp	r0, #0
 800b9b2:	d06d      	beq.n	800ba90 <ucdr_deserialize_double+0x124>
 800b9b4:	7d23      	ldrb	r3, [r4, #20]
 800b9b6:	2b01      	cmp	r3, #1
 800b9b8:	f000 8093 	beq.w	800bae2 <ucdr_deserialize_double+0x176>
 800b9bc:	79fb      	ldrb	r3, [r7, #7]
 800b9be:	702b      	strb	r3, [r5, #0]
 800b9c0:	2e00      	cmp	r6, #0
 800b9c2:	d072      	beq.n	800baaa <ucdr_deserialize_double+0x13e>
 800b9c4:	79bb      	ldrb	r3, [r7, #6]
 800b9c6:	706b      	strb	r3, [r5, #1]
 800b9c8:	2e01      	cmp	r6, #1
 800b9ca:	f105 0302 	add.w	r3, r5, #2
 800b9ce:	d070      	beq.n	800bab2 <ucdr_deserialize_double+0x146>
 800b9d0:	797b      	ldrb	r3, [r7, #5]
 800b9d2:	70ab      	strb	r3, [r5, #2]
 800b9d4:	2e02      	cmp	r6, #2
 800b9d6:	f105 0303 	add.w	r3, r5, #3
 800b9da:	d06e      	beq.n	800baba <ucdr_deserialize_double+0x14e>
 800b9dc:	793b      	ldrb	r3, [r7, #4]
 800b9de:	70eb      	strb	r3, [r5, #3]
 800b9e0:	2e03      	cmp	r6, #3
 800b9e2:	f105 0304 	add.w	r3, r5, #4
 800b9e6:	d06c      	beq.n	800bac2 <ucdr_deserialize_double+0x156>
 800b9e8:	78fb      	ldrb	r3, [r7, #3]
 800b9ea:	712b      	strb	r3, [r5, #4]
 800b9ec:	2e04      	cmp	r6, #4
 800b9ee:	f105 0305 	add.w	r3, r5, #5
 800b9f2:	d06a      	beq.n	800baca <ucdr_deserialize_double+0x15e>
 800b9f4:	78bb      	ldrb	r3, [r7, #2]
 800b9f6:	716b      	strb	r3, [r5, #5]
 800b9f8:	2e05      	cmp	r6, #5
 800b9fa:	f105 0306 	add.w	r3, r5, #6
 800b9fe:	d068      	beq.n	800bad2 <ucdr_deserialize_double+0x166>
 800ba00:	787b      	ldrb	r3, [r7, #1]
 800ba02:	71ab      	strb	r3, [r5, #6]
 800ba04:	2e06      	cmp	r6, #6
 800ba06:	f105 0307 	add.w	r3, r5, #7
 800ba0a:	d066      	beq.n	800bada <ucdr_deserialize_double+0x16e>
 800ba0c:	783b      	ldrb	r3, [r7, #0]
 800ba0e:	71eb      	strb	r3, [r5, #7]
 800ba10:	6923      	ldr	r3, [r4, #16]
 800ba12:	68a2      	ldr	r2, [r4, #8]
 800ba14:	7da0      	ldrb	r0, [r4, #22]
 800ba16:	3308      	adds	r3, #8
 800ba18:	1b9e      	subs	r6, r3, r6
 800ba1a:	2308      	movs	r3, #8
 800ba1c:	4442      	add	r2, r8
 800ba1e:	7563      	strb	r3, [r4, #21]
 800ba20:	60a2      	str	r2, [r4, #8]
 800ba22:	6126      	str	r6, [r4, #16]
 800ba24:	f080 0001 	eor.w	r0, r0, #1
 800ba28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba2c:	2108      	movs	r1, #8
 800ba2e:	4620      	mov	r0, r4
 800ba30:	f000 f93c 	bl	800bcac <ucdr_check_final_buffer_behavior>
 800ba34:	b310      	cbz	r0, 800ba7c <ucdr_deserialize_double+0x110>
 800ba36:	7d23      	ldrb	r3, [r4, #20]
 800ba38:	2b01      	cmp	r3, #1
 800ba3a:	68a3      	ldr	r3, [r4, #8]
 800ba3c:	d023      	beq.n	800ba86 <ucdr_deserialize_double+0x11a>
 800ba3e:	79db      	ldrb	r3, [r3, #7]
 800ba40:	702b      	strb	r3, [r5, #0]
 800ba42:	68a3      	ldr	r3, [r4, #8]
 800ba44:	799b      	ldrb	r3, [r3, #6]
 800ba46:	706b      	strb	r3, [r5, #1]
 800ba48:	68a3      	ldr	r3, [r4, #8]
 800ba4a:	795b      	ldrb	r3, [r3, #5]
 800ba4c:	70ab      	strb	r3, [r5, #2]
 800ba4e:	68a3      	ldr	r3, [r4, #8]
 800ba50:	791b      	ldrb	r3, [r3, #4]
 800ba52:	70eb      	strb	r3, [r5, #3]
 800ba54:	68a3      	ldr	r3, [r4, #8]
 800ba56:	78db      	ldrb	r3, [r3, #3]
 800ba58:	712b      	strb	r3, [r5, #4]
 800ba5a:	68a3      	ldr	r3, [r4, #8]
 800ba5c:	789b      	ldrb	r3, [r3, #2]
 800ba5e:	716b      	strb	r3, [r5, #5]
 800ba60:	68a3      	ldr	r3, [r4, #8]
 800ba62:	785b      	ldrb	r3, [r3, #1]
 800ba64:	71ab      	strb	r3, [r5, #6]
 800ba66:	68a3      	ldr	r3, [r4, #8]
 800ba68:	781b      	ldrb	r3, [r3, #0]
 800ba6a:	71eb      	strb	r3, [r5, #7]
 800ba6c:	68a2      	ldr	r2, [r4, #8]
 800ba6e:	6923      	ldr	r3, [r4, #16]
 800ba70:	3208      	adds	r2, #8
 800ba72:	3308      	adds	r3, #8
 800ba74:	2108      	movs	r1, #8
 800ba76:	60a2      	str	r2, [r4, #8]
 800ba78:	6123      	str	r3, [r4, #16]
 800ba7a:	7561      	strb	r1, [r4, #21]
 800ba7c:	7da0      	ldrb	r0, [r4, #22]
 800ba7e:	f080 0001 	eor.w	r0, r0, #1
 800ba82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba86:	681a      	ldr	r2, [r3, #0]
 800ba88:	685b      	ldr	r3, [r3, #4]
 800ba8a:	606b      	str	r3, [r5, #4]
 800ba8c:	602a      	str	r2, [r5, #0]
 800ba8e:	e7ed      	b.n	800ba6c <ucdr_deserialize_double+0x100>
 800ba90:	68a2      	ldr	r2, [r4, #8]
 800ba92:	6923      	ldr	r3, [r4, #16]
 800ba94:	7da0      	ldrb	r0, [r4, #22]
 800ba96:	f884 9015 	strb.w	r9, [r4, #21]
 800ba9a:	1b92      	subs	r2, r2, r6
 800ba9c:	1b9b      	subs	r3, r3, r6
 800ba9e:	60a2      	str	r2, [r4, #8]
 800baa0:	6123      	str	r3, [r4, #16]
 800baa2:	f080 0001 	eor.w	r0, r0, #1
 800baa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baaa:	68a3      	ldr	r3, [r4, #8]
 800baac:	799b      	ldrb	r3, [r3, #6]
 800baae:	706b      	strb	r3, [r5, #1]
 800bab0:	1cab      	adds	r3, r5, #2
 800bab2:	68a2      	ldr	r2, [r4, #8]
 800bab4:	7952      	ldrb	r2, [r2, #5]
 800bab6:	f803 2b01 	strb.w	r2, [r3], #1
 800baba:	68a2      	ldr	r2, [r4, #8]
 800babc:	7912      	ldrb	r2, [r2, #4]
 800babe:	f803 2b01 	strb.w	r2, [r3], #1
 800bac2:	68a2      	ldr	r2, [r4, #8]
 800bac4:	78d2      	ldrb	r2, [r2, #3]
 800bac6:	f803 2b01 	strb.w	r2, [r3], #1
 800baca:	68a2      	ldr	r2, [r4, #8]
 800bacc:	7892      	ldrb	r2, [r2, #2]
 800bace:	f803 2b01 	strb.w	r2, [r3], #1
 800bad2:	68a2      	ldr	r2, [r4, #8]
 800bad4:	7852      	ldrb	r2, [r2, #1]
 800bad6:	f803 2b01 	strb.w	r2, [r3], #1
 800bada:	68a2      	ldr	r2, [r4, #8]
 800badc:	7812      	ldrb	r2, [r2, #0]
 800bade:	701a      	strb	r2, [r3, #0]
 800bae0:	e796      	b.n	800ba10 <ucdr_deserialize_double+0xa4>
 800bae2:	4639      	mov	r1, r7
 800bae4:	4632      	mov	r2, r6
 800bae6:	4628      	mov	r0, r5
 800bae8:	f00d ff5d 	bl	80199a6 <memcpy>
 800baec:	68a1      	ldr	r1, [r4, #8]
 800baee:	4642      	mov	r2, r8
 800baf0:	19a8      	adds	r0, r5, r6
 800baf2:	f00d ff58 	bl	80199a6 <memcpy>
 800baf6:	e78b      	b.n	800ba10 <ucdr_deserialize_double+0xa4>

0800baf8 <ucdr_deserialize_endian_double>:
 800baf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bafc:	460f      	mov	r7, r1
 800bafe:	2108      	movs	r1, #8
 800bb00:	4604      	mov	r4, r0
 800bb02:	4615      	mov	r5, r2
 800bb04:	f000 f926 	bl	800bd54 <ucdr_buffer_alignment>
 800bb08:	4601      	mov	r1, r0
 800bb0a:	4620      	mov	r0, r4
 800bb0c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800bb10:	f000 f964 	bl	800bddc <ucdr_advance_buffer>
 800bb14:	2108      	movs	r1, #8
 800bb16:	4620      	mov	r0, r4
 800bb18:	f000 f8bc 	bl	800bc94 <ucdr_check_buffer_available_for>
 800bb1c:	2800      	cmp	r0, #0
 800bb1e:	d159      	bne.n	800bbd4 <ucdr_deserialize_endian_double+0xdc>
 800bb20:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 800bb24:	4546      	cmp	r6, r8
 800bb26:	d950      	bls.n	800bbca <ucdr_deserialize_endian_double+0xd2>
 800bb28:	6923      	ldr	r3, [r4, #16]
 800bb2a:	60a6      	str	r6, [r4, #8]
 800bb2c:	eba6 0608 	sub.w	r6, r6, r8
 800bb30:	4433      	add	r3, r6
 800bb32:	f1c6 0a08 	rsb	sl, r6, #8
 800bb36:	6123      	str	r3, [r4, #16]
 800bb38:	4651      	mov	r1, sl
 800bb3a:	4620      	mov	r0, r4
 800bb3c:	f000 f8b6 	bl	800bcac <ucdr_check_final_buffer_behavior>
 800bb40:	2800      	cmp	r0, #0
 800bb42:	d073      	beq.n	800bc2c <ucdr_deserialize_endian_double+0x134>
 800bb44:	2f01      	cmp	r7, #1
 800bb46:	f000 809a 	beq.w	800bc7e <ucdr_deserialize_endian_double+0x186>
 800bb4a:	f898 3007 	ldrb.w	r3, [r8, #7]
 800bb4e:	702b      	strb	r3, [r5, #0]
 800bb50:	2e00      	cmp	r6, #0
 800bb52:	d078      	beq.n	800bc46 <ucdr_deserialize_endian_double+0x14e>
 800bb54:	f898 3006 	ldrb.w	r3, [r8, #6]
 800bb58:	706b      	strb	r3, [r5, #1]
 800bb5a:	2e01      	cmp	r6, #1
 800bb5c:	f105 0302 	add.w	r3, r5, #2
 800bb60:	d075      	beq.n	800bc4e <ucdr_deserialize_endian_double+0x156>
 800bb62:	f898 3005 	ldrb.w	r3, [r8, #5]
 800bb66:	70ab      	strb	r3, [r5, #2]
 800bb68:	2e02      	cmp	r6, #2
 800bb6a:	f105 0303 	add.w	r3, r5, #3
 800bb6e:	d072      	beq.n	800bc56 <ucdr_deserialize_endian_double+0x15e>
 800bb70:	f898 3004 	ldrb.w	r3, [r8, #4]
 800bb74:	70eb      	strb	r3, [r5, #3]
 800bb76:	2e03      	cmp	r6, #3
 800bb78:	f105 0304 	add.w	r3, r5, #4
 800bb7c:	d06f      	beq.n	800bc5e <ucdr_deserialize_endian_double+0x166>
 800bb7e:	f898 3003 	ldrb.w	r3, [r8, #3]
 800bb82:	712b      	strb	r3, [r5, #4]
 800bb84:	2e04      	cmp	r6, #4
 800bb86:	f105 0305 	add.w	r3, r5, #5
 800bb8a:	d06c      	beq.n	800bc66 <ucdr_deserialize_endian_double+0x16e>
 800bb8c:	f898 3002 	ldrb.w	r3, [r8, #2]
 800bb90:	716b      	strb	r3, [r5, #5]
 800bb92:	2e05      	cmp	r6, #5
 800bb94:	f105 0306 	add.w	r3, r5, #6
 800bb98:	d069      	beq.n	800bc6e <ucdr_deserialize_endian_double+0x176>
 800bb9a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800bb9e:	71ab      	strb	r3, [r5, #6]
 800bba0:	2e06      	cmp	r6, #6
 800bba2:	f105 0307 	add.w	r3, r5, #7
 800bba6:	d066      	beq.n	800bc76 <ucdr_deserialize_endian_double+0x17e>
 800bba8:	f898 3000 	ldrb.w	r3, [r8]
 800bbac:	71eb      	strb	r3, [r5, #7]
 800bbae:	6923      	ldr	r3, [r4, #16]
 800bbb0:	68a2      	ldr	r2, [r4, #8]
 800bbb2:	7da0      	ldrb	r0, [r4, #22]
 800bbb4:	3308      	adds	r3, #8
 800bbb6:	1b9e      	subs	r6, r3, r6
 800bbb8:	2308      	movs	r3, #8
 800bbba:	4452      	add	r2, sl
 800bbbc:	7563      	strb	r3, [r4, #21]
 800bbbe:	60a2      	str	r2, [r4, #8]
 800bbc0:	6126      	str	r6, [r4, #16]
 800bbc2:	f080 0001 	eor.w	r0, r0, #1
 800bbc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbca:	2108      	movs	r1, #8
 800bbcc:	4620      	mov	r0, r4
 800bbce:	f000 f86d 	bl	800bcac <ucdr_check_final_buffer_behavior>
 800bbd2:	b308      	cbz	r0, 800bc18 <ucdr_deserialize_endian_double+0x120>
 800bbd4:	2f01      	cmp	r7, #1
 800bbd6:	68a3      	ldr	r3, [r4, #8]
 800bbd8:	d023      	beq.n	800bc22 <ucdr_deserialize_endian_double+0x12a>
 800bbda:	79db      	ldrb	r3, [r3, #7]
 800bbdc:	702b      	strb	r3, [r5, #0]
 800bbde:	68a3      	ldr	r3, [r4, #8]
 800bbe0:	799b      	ldrb	r3, [r3, #6]
 800bbe2:	706b      	strb	r3, [r5, #1]
 800bbe4:	68a3      	ldr	r3, [r4, #8]
 800bbe6:	795b      	ldrb	r3, [r3, #5]
 800bbe8:	70ab      	strb	r3, [r5, #2]
 800bbea:	68a3      	ldr	r3, [r4, #8]
 800bbec:	791b      	ldrb	r3, [r3, #4]
 800bbee:	70eb      	strb	r3, [r5, #3]
 800bbf0:	68a3      	ldr	r3, [r4, #8]
 800bbf2:	78db      	ldrb	r3, [r3, #3]
 800bbf4:	712b      	strb	r3, [r5, #4]
 800bbf6:	68a3      	ldr	r3, [r4, #8]
 800bbf8:	789b      	ldrb	r3, [r3, #2]
 800bbfa:	716b      	strb	r3, [r5, #5]
 800bbfc:	68a3      	ldr	r3, [r4, #8]
 800bbfe:	785b      	ldrb	r3, [r3, #1]
 800bc00:	71ab      	strb	r3, [r5, #6]
 800bc02:	68a3      	ldr	r3, [r4, #8]
 800bc04:	781b      	ldrb	r3, [r3, #0]
 800bc06:	71eb      	strb	r3, [r5, #7]
 800bc08:	68a2      	ldr	r2, [r4, #8]
 800bc0a:	6923      	ldr	r3, [r4, #16]
 800bc0c:	3208      	adds	r2, #8
 800bc0e:	3308      	adds	r3, #8
 800bc10:	2108      	movs	r1, #8
 800bc12:	60a2      	str	r2, [r4, #8]
 800bc14:	6123      	str	r3, [r4, #16]
 800bc16:	7561      	strb	r1, [r4, #21]
 800bc18:	7da0      	ldrb	r0, [r4, #22]
 800bc1a:	f080 0001 	eor.w	r0, r0, #1
 800bc1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc22:	681a      	ldr	r2, [r3, #0]
 800bc24:	685b      	ldr	r3, [r3, #4]
 800bc26:	606b      	str	r3, [r5, #4]
 800bc28:	602a      	str	r2, [r5, #0]
 800bc2a:	e7ed      	b.n	800bc08 <ucdr_deserialize_endian_double+0x110>
 800bc2c:	68a2      	ldr	r2, [r4, #8]
 800bc2e:	6923      	ldr	r3, [r4, #16]
 800bc30:	7da0      	ldrb	r0, [r4, #22]
 800bc32:	f884 9015 	strb.w	r9, [r4, #21]
 800bc36:	1b92      	subs	r2, r2, r6
 800bc38:	1b9b      	subs	r3, r3, r6
 800bc3a:	60a2      	str	r2, [r4, #8]
 800bc3c:	6123      	str	r3, [r4, #16]
 800bc3e:	f080 0001 	eor.w	r0, r0, #1
 800bc42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc46:	68a3      	ldr	r3, [r4, #8]
 800bc48:	799b      	ldrb	r3, [r3, #6]
 800bc4a:	706b      	strb	r3, [r5, #1]
 800bc4c:	1cab      	adds	r3, r5, #2
 800bc4e:	68a2      	ldr	r2, [r4, #8]
 800bc50:	7952      	ldrb	r2, [r2, #5]
 800bc52:	f803 2b01 	strb.w	r2, [r3], #1
 800bc56:	68a2      	ldr	r2, [r4, #8]
 800bc58:	7912      	ldrb	r2, [r2, #4]
 800bc5a:	f803 2b01 	strb.w	r2, [r3], #1
 800bc5e:	68a2      	ldr	r2, [r4, #8]
 800bc60:	78d2      	ldrb	r2, [r2, #3]
 800bc62:	f803 2b01 	strb.w	r2, [r3], #1
 800bc66:	68a2      	ldr	r2, [r4, #8]
 800bc68:	7892      	ldrb	r2, [r2, #2]
 800bc6a:	f803 2b01 	strb.w	r2, [r3], #1
 800bc6e:	68a2      	ldr	r2, [r4, #8]
 800bc70:	7852      	ldrb	r2, [r2, #1]
 800bc72:	f803 2b01 	strb.w	r2, [r3], #1
 800bc76:	68a2      	ldr	r2, [r4, #8]
 800bc78:	7812      	ldrb	r2, [r2, #0]
 800bc7a:	701a      	strb	r2, [r3, #0]
 800bc7c:	e797      	b.n	800bbae <ucdr_deserialize_endian_double+0xb6>
 800bc7e:	4641      	mov	r1, r8
 800bc80:	4632      	mov	r2, r6
 800bc82:	4628      	mov	r0, r5
 800bc84:	f00d fe8f 	bl	80199a6 <memcpy>
 800bc88:	68a1      	ldr	r1, [r4, #8]
 800bc8a:	4652      	mov	r2, sl
 800bc8c:	19a8      	adds	r0, r5, r6
 800bc8e:	f00d fe8a 	bl	80199a6 <memcpy>
 800bc92:	e78c      	b.n	800bbae <ucdr_deserialize_endian_double+0xb6>

0800bc94 <ucdr_check_buffer_available_for>:
 800bc94:	7d83      	ldrb	r3, [r0, #22]
 800bc96:	b93b      	cbnz	r3, 800bca8 <ucdr_check_buffer_available_for+0x14>
 800bc98:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800bc9c:	4419      	add	r1, r3
 800bc9e:	4288      	cmp	r0, r1
 800bca0:	bf34      	ite	cc
 800bca2:	2000      	movcc	r0, #0
 800bca4:	2001      	movcs	r0, #1
 800bca6:	4770      	bx	lr
 800bca8:	2000      	movs	r0, #0
 800bcaa:	4770      	bx	lr

0800bcac <ucdr_check_final_buffer_behavior>:
 800bcac:	7d83      	ldrb	r3, [r0, #22]
 800bcae:	b943      	cbnz	r3, 800bcc2 <ucdr_check_final_buffer_behavior+0x16>
 800bcb0:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800bcb4:	4291      	cmp	r1, r2
 800bcb6:	b510      	push	{r4, lr}
 800bcb8:	4604      	mov	r4, r0
 800bcba:	d205      	bcs.n	800bcc8 <ucdr_check_final_buffer_behavior+0x1c>
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	bd10      	pop	{r4, pc}
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	4770      	bx	lr
 800bcc8:	6982      	ldr	r2, [r0, #24]
 800bcca:	b13a      	cbz	r2, 800bcdc <ucdr_check_final_buffer_behavior+0x30>
 800bccc:	69c1      	ldr	r1, [r0, #28]
 800bcce:	4790      	blx	r2
 800bcd0:	f080 0301 	eor.w	r3, r0, #1
 800bcd4:	b2db      	uxtb	r3, r3
 800bcd6:	75a0      	strb	r0, [r4, #22]
 800bcd8:	4618      	mov	r0, r3
 800bcda:	bd10      	pop	{r4, pc}
 800bcdc:	2001      	movs	r0, #1
 800bcde:	75a0      	strb	r0, [r4, #22]
 800bce0:	e7fa      	b.n	800bcd8 <ucdr_check_final_buffer_behavior+0x2c>
 800bce2:	bf00      	nop

0800bce4 <ucdr_set_on_full_buffer_callback>:
 800bce4:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800bce8:	4770      	bx	lr
 800bcea:	bf00      	nop

0800bcec <ucdr_init_buffer_origin_offset_endian>:
 800bcec:	b410      	push	{r4}
 800bcee:	9c01      	ldr	r4, [sp, #4]
 800bcf0:	6001      	str	r1, [r0, #0]
 800bcf2:	440a      	add	r2, r1
 800bcf4:	6042      	str	r2, [r0, #4]
 800bcf6:	190a      	adds	r2, r1, r4
 800bcf8:	441c      	add	r4, r3
 800bcfa:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800bcfe:	6082      	str	r2, [r0, #8]
 800bd00:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800bd04:	7503      	strb	r3, [r0, #20]
 800bd06:	2200      	movs	r2, #0
 800bd08:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800bd0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd10:	7542      	strb	r2, [r0, #21]
 800bd12:	7582      	strb	r2, [r0, #22]
 800bd14:	4770      	bx	lr
 800bd16:	bf00      	nop

0800bd18 <ucdr_init_buffer_origin_offset>:
 800bd18:	b510      	push	{r4, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	9c04      	ldr	r4, [sp, #16]
 800bd1e:	9400      	str	r4, [sp, #0]
 800bd20:	2401      	movs	r4, #1
 800bd22:	9401      	str	r4, [sp, #4]
 800bd24:	f7ff ffe2 	bl	800bcec <ucdr_init_buffer_origin_offset_endian>
 800bd28:	b002      	add	sp, #8
 800bd2a:	bd10      	pop	{r4, pc}

0800bd2c <ucdr_init_buffer_origin>:
 800bd2c:	b510      	push	{r4, lr}
 800bd2e:	b082      	sub	sp, #8
 800bd30:	2400      	movs	r4, #0
 800bd32:	9400      	str	r4, [sp, #0]
 800bd34:	f7ff fff0 	bl	800bd18 <ucdr_init_buffer_origin_offset>
 800bd38:	b002      	add	sp, #8
 800bd3a:	bd10      	pop	{r4, pc}

0800bd3c <ucdr_init_buffer>:
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	f7ff bff5 	b.w	800bd2c <ucdr_init_buffer_origin>
 800bd42:	bf00      	nop

0800bd44 <ucdr_alignment>:
 800bd44:	fbb0 f3f1 	udiv	r3, r0, r1
 800bd48:	fb03 0011 	mls	r0, r3, r1, r0
 800bd4c:	1a08      	subs	r0, r1, r0
 800bd4e:	3901      	subs	r1, #1
 800bd50:	4008      	ands	r0, r1
 800bd52:	4770      	bx	lr

0800bd54 <ucdr_buffer_alignment>:
 800bd54:	7d43      	ldrb	r3, [r0, #21]
 800bd56:	428b      	cmp	r3, r1
 800bd58:	d208      	bcs.n	800bd6c <ucdr_buffer_alignment+0x18>
 800bd5a:	6900      	ldr	r0, [r0, #16]
 800bd5c:	fbb0 f3f1 	udiv	r3, r0, r1
 800bd60:	fb01 0013 	mls	r0, r1, r3, r0
 800bd64:	1a08      	subs	r0, r1, r0
 800bd66:	3901      	subs	r1, #1
 800bd68:	4008      	ands	r0, r1
 800bd6a:	4770      	bx	lr
 800bd6c:	2000      	movs	r0, #0
 800bd6e:	4770      	bx	lr

0800bd70 <ucdr_align_to>:
 800bd70:	b538      	push	{r3, r4, r5, lr}
 800bd72:	4604      	mov	r4, r0
 800bd74:	460d      	mov	r5, r1
 800bd76:	f7ff ffed 	bl	800bd54 <ucdr_buffer_alignment>
 800bd7a:	68a3      	ldr	r3, [r4, #8]
 800bd7c:	6921      	ldr	r1, [r4, #16]
 800bd7e:	7565      	strb	r5, [r4, #21]
 800bd80:	181a      	adds	r2, r3, r0
 800bd82:	6863      	ldr	r3, [r4, #4]
 800bd84:	4293      	cmp	r3, r2
 800bd86:	4408      	add	r0, r1
 800bd88:	bf28      	it	cs
 800bd8a:	4613      	movcs	r3, r2
 800bd8c:	6120      	str	r0, [r4, #16]
 800bd8e:	60a3      	str	r3, [r4, #8]
 800bd90:	bd38      	pop	{r3, r4, r5, pc}
 800bd92:	bf00      	nop

0800bd94 <ucdr_buffer_length>:
 800bd94:	6882      	ldr	r2, [r0, #8]
 800bd96:	6800      	ldr	r0, [r0, #0]
 800bd98:	1a10      	subs	r0, r2, r0
 800bd9a:	4770      	bx	lr

0800bd9c <ucdr_buffer_remaining>:
 800bd9c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800bda0:	1a10      	subs	r0, r2, r0
 800bda2:	4770      	bx	lr

0800bda4 <ucdr_check_final_buffer_behavior_array>:
 800bda4:	b538      	push	{r3, r4, r5, lr}
 800bda6:	7d83      	ldrb	r3, [r0, #22]
 800bda8:	b963      	cbnz	r3, 800bdc4 <ucdr_check_final_buffer_behavior_array+0x20>
 800bdaa:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	4604      	mov	r4, r0
 800bdb2:	460d      	mov	r5, r1
 800bdb4:	d308      	bcc.n	800bdc8 <ucdr_check_final_buffer_behavior_array+0x24>
 800bdb6:	b139      	cbz	r1, 800bdc8 <ucdr_check_final_buffer_behavior_array+0x24>
 800bdb8:	6983      	ldr	r3, [r0, #24]
 800bdba:	b163      	cbz	r3, 800bdd6 <ucdr_check_final_buffer_behavior_array+0x32>
 800bdbc:	69c1      	ldr	r1, [r0, #28]
 800bdbe:	4798      	blx	r3
 800bdc0:	75a0      	strb	r0, [r4, #22]
 800bdc2:	b108      	cbz	r0, 800bdc8 <ucdr_check_final_buffer_behavior_array+0x24>
 800bdc4:	2000      	movs	r0, #0
 800bdc6:	bd38      	pop	{r3, r4, r5, pc}
 800bdc8:	4620      	mov	r0, r4
 800bdca:	f7ff ffe7 	bl	800bd9c <ucdr_buffer_remaining>
 800bdce:	42a8      	cmp	r0, r5
 800bdd0:	bf28      	it	cs
 800bdd2:	4628      	movcs	r0, r5
 800bdd4:	bd38      	pop	{r3, r4, r5, pc}
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	7583      	strb	r3, [r0, #22]
 800bdda:	e7f3      	b.n	800bdc4 <ucdr_check_final_buffer_behavior_array+0x20>

0800bddc <ucdr_advance_buffer>:
 800bddc:	b538      	push	{r3, r4, r5, lr}
 800bdde:	4604      	mov	r4, r0
 800bde0:	460d      	mov	r5, r1
 800bde2:	f7ff ff57 	bl	800bc94 <ucdr_check_buffer_available_for>
 800bde6:	b178      	cbz	r0, 800be08 <ucdr_advance_buffer+0x2c>
 800bde8:	6923      	ldr	r3, [r4, #16]
 800bdea:	68a2      	ldr	r2, [r4, #8]
 800bdec:	442b      	add	r3, r5
 800bdee:	6123      	str	r3, [r4, #16]
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	442a      	add	r2, r5
 800bdf4:	7563      	strb	r3, [r4, #21]
 800bdf6:	60a2      	str	r2, [r4, #8]
 800bdf8:	bd38      	pop	{r3, r4, r5, pc}
 800bdfa:	68a2      	ldr	r2, [r4, #8]
 800bdfc:	6923      	ldr	r3, [r4, #16]
 800bdfe:	4402      	add	r2, r0
 800be00:	4403      	add	r3, r0
 800be02:	1a2d      	subs	r5, r5, r0
 800be04:	60a2      	str	r2, [r4, #8]
 800be06:	6123      	str	r3, [r4, #16]
 800be08:	4629      	mov	r1, r5
 800be0a:	2201      	movs	r2, #1
 800be0c:	4620      	mov	r0, r4
 800be0e:	f7ff ffc9 	bl	800bda4 <ucdr_check_final_buffer_behavior_array>
 800be12:	2800      	cmp	r0, #0
 800be14:	d1f1      	bne.n	800bdfa <ucdr_advance_buffer+0x1e>
 800be16:	2301      	movs	r3, #1
 800be18:	7563      	strb	r3, [r4, #21]
 800be1a:	bd38      	pop	{r3, r4, r5, pc}

0800be1c <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800be1c:	4b04      	ldr	r3, [pc, #16]	@ (800be30 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x14>)
 800be1e:	681a      	ldr	r2, [r3, #0]
 800be20:	b10a      	cbz	r2, 800be26 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0xa>
 800be22:	4803      	ldr	r0, [pc, #12]	@ (800be30 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x14>)
 800be24:	4770      	bx	lr
 800be26:	4a03      	ldr	r2, [pc, #12]	@ (800be34 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x18>)
 800be28:	4801      	ldr	r0, [pc, #4]	@ (800be30 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x14>)
 800be2a:	6812      	ldr	r2, [r2, #0]
 800be2c:	601a      	str	r2, [r3, #0]
 800be2e:	4770      	bx	lr
 800be30:	200001d8 	.word	0x200001d8
 800be34:	2000031c 	.word	0x2000031c

0800be38 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800be38:	4a02      	ldr	r2, [pc, #8]	@ (800be44 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0xc>)
 800be3a:	4b03      	ldr	r3, [pc, #12]	@ (800be48 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x10>)
 800be3c:	6812      	ldr	r2, [r2, #0]
 800be3e:	601a      	str	r2, [r3, #0]
 800be40:	4770      	bx	lr
 800be42:	bf00      	nop
 800be44:	2000031c 	.word	0x2000031c
 800be48:	200001d8 	.word	0x200001d8

0800be4c <nav_msgs__msg__Odometry__rosidl_typesupport_introspection_c__Odometry_init_function>:
 800be4c:	f008 bc68 	b.w	8014720 <nav_msgs__msg__Odometry__init>

0800be50 <nav_msgs__msg__Odometry__rosidl_typesupport_introspection_c__Odometry_fini_function>:
 800be50:	f008 bcbc 	b.w	80147cc <nav_msgs__msg__Odometry__fini>

0800be54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800be54:	b510      	push	{r4, lr}
 800be56:	f004 f909 	bl	801006c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800be5a:	4c0a      	ldr	r4, [pc, #40]	@ (800be84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x30>)
 800be5c:	60e0      	str	r0, [r4, #12]
 800be5e:	f004 fabd 	bl	80103dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 800be62:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800be66:	f004 faed 	bl	8010444 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 800be6a:	4b07      	ldr	r3, [pc, #28]	@ (800be88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x34>)
 800be6c:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800be70:	681a      	ldr	r2, [r3, #0]
 800be72:	b10a      	cbz	r2, 800be78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x24>
 800be74:	4804      	ldr	r0, [pc, #16]	@ (800be88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x34>)
 800be76:	bd10      	pop	{r4, pc}
 800be78:	4a04      	ldr	r2, [pc, #16]	@ (800be8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x38>)
 800be7a:	4803      	ldr	r0, [pc, #12]	@ (800be88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x34>)
 800be7c:	6812      	ldr	r2, [r2, #0]
 800be7e:	601a      	str	r2, [r3, #0]
 800be80:	bd10      	pop	{r4, pc}
 800be82:	bf00      	nop
 800be84:	200001e4 	.word	0x200001e4
 800be88:	200002d4 	.word	0x200002d4
 800be8c:	20000320 	.word	0x20000320

0800be90 <get_serialized_size_nav_msgs__msg__Odometry>:
 800be90:	b5d0      	push	{r4, r6, r7, lr}
 800be92:	4604      	mov	r4, r0
 800be94:	b1c0      	cbz	r0, 800bec8 <get_serialized_size_nav_msgs__msg__Odometry+0x38>
 800be96:	460f      	mov	r7, r1
 800be98:	f004 f91e 	bl	80100d8 <get_serialized_size_std_msgs__msg__Header>
 800be9c:	183e      	adds	r6, r7, r0
 800be9e:	2104      	movs	r1, #4
 800bea0:	4630      	mov	r0, r6
 800bea2:	f7ff ff4f 	bl	800bd44 <ucdr_alignment>
 800bea6:	69a3      	ldr	r3, [r4, #24]
 800bea8:	3305      	adds	r3, #5
 800beaa:	4403      	add	r3, r0
 800beac:	441e      	add	r6, r3
 800beae:	4631      	mov	r1, r6
 800beb0:	f104 0020 	add.w	r0, r4, #32
 800beb4:	f004 fadc 	bl	8010470 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 800beb8:	4406      	add	r6, r0
 800beba:	4631      	mov	r1, r6
 800bebc:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 800bec0:	f004 fb46 	bl	8010550 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 800bec4:	1bc0      	subs	r0, r0, r7
 800bec6:	4430      	add	r0, r6
 800bec8:	bdd0      	pop	{r4, r6, r7, pc}
 800beca:	bf00      	nop

0800becc <_Odometry__cdr_deserialize>:
 800becc:	b570      	push	{r4, r5, r6, lr}
 800bece:	460c      	mov	r4, r1
 800bed0:	b082      	sub	sp, #8
 800bed2:	b351      	cbz	r1, 800bf2a <_Odometry__cdr_deserialize+0x5e>
 800bed4:	4605      	mov	r5, r0
 800bed6:	f004 f981 	bl	80101dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800beda:	6843      	ldr	r3, [r0, #4]
 800bedc:	4621      	mov	r1, r4
 800bede:	68db      	ldr	r3, [r3, #12]
 800bee0:	4628      	mov	r0, r5
 800bee2:	4798      	blx	r3
 800bee4:	69e6      	ldr	r6, [r4, #28]
 800bee6:	6961      	ldr	r1, [r4, #20]
 800bee8:	ab01      	add	r3, sp, #4
 800beea:	4632      	mov	r2, r6
 800beec:	4628      	mov	r0, r5
 800beee:	f004 fd87 	bl	8010a00 <ucdr_deserialize_sequence_char>
 800bef2:	b9a8      	cbnz	r0, 800bf20 <_Odometry__cdr_deserialize+0x54>
 800bef4:	9a01      	ldr	r2, [sp, #4]
 800bef6:	4296      	cmp	r6, r2
 800bef8:	d31a      	bcc.n	800bf30 <_Odometry__cdr_deserialize+0x64>
 800befa:	f004 fb25 	bl	8010548 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 800befe:	6843      	ldr	r3, [r0, #4]
 800bf00:	f104 0120 	add.w	r1, r4, #32
 800bf04:	68db      	ldr	r3, [r3, #12]
 800bf06:	4628      	mov	r0, r5
 800bf08:	4798      	blx	r3
 800bf0a:	f004 fb8d 	bl	8010628 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 800bf0e:	6843      	ldr	r3, [r0, #4]
 800bf10:	68db      	ldr	r3, [r3, #12]
 800bf12:	f504 71bc 	add.w	r1, r4, #376	@ 0x178
 800bf16:	4628      	mov	r0, r5
 800bf18:	b002      	add	sp, #8
 800bf1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bf1e:	4718      	bx	r3
 800bf20:	9b01      	ldr	r3, [sp, #4]
 800bf22:	b103      	cbz	r3, 800bf26 <_Odometry__cdr_deserialize+0x5a>
 800bf24:	3b01      	subs	r3, #1
 800bf26:	61a3      	str	r3, [r4, #24]
 800bf28:	e7e7      	b.n	800befa <_Odometry__cdr_deserialize+0x2e>
 800bf2a:	4608      	mov	r0, r1
 800bf2c:	b002      	add	sp, #8
 800bf2e:	bd70      	pop	{r4, r5, r6, pc}
 800bf30:	2101      	movs	r1, #1
 800bf32:	75a8      	strb	r0, [r5, #22]
 800bf34:	7569      	strb	r1, [r5, #21]
 800bf36:	61a0      	str	r0, [r4, #24]
 800bf38:	4628      	mov	r0, r5
 800bf3a:	f7ff ff19 	bl	800bd70 <ucdr_align_to>
 800bf3e:	9901      	ldr	r1, [sp, #4]
 800bf40:	4628      	mov	r0, r5
 800bf42:	f7ff ff4b 	bl	800bddc <ucdr_advance_buffer>
 800bf46:	e7d8      	b.n	800befa <_Odometry__cdr_deserialize+0x2e>

0800bf48 <_Odometry__cdr_serialize>:
 800bf48:	b348      	cbz	r0, 800bf9e <_Odometry__cdr_serialize+0x56>
 800bf4a:	b570      	push	{r4, r5, r6, lr}
 800bf4c:	4604      	mov	r4, r0
 800bf4e:	460e      	mov	r6, r1
 800bf50:	f004 f944 	bl	80101dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800bf54:	6843      	ldr	r3, [r0, #4]
 800bf56:	4631      	mov	r1, r6
 800bf58:	689b      	ldr	r3, [r3, #8]
 800bf5a:	4620      	mov	r0, r4
 800bf5c:	4798      	blx	r3
 800bf5e:	6965      	ldr	r5, [r4, #20]
 800bf60:	b1d5      	cbz	r5, 800bf98 <_Odometry__cdr_serialize+0x50>
 800bf62:	4628      	mov	r0, r5
 800bf64:	f7f4 f95e 	bl	8000224 <strlen>
 800bf68:	1c42      	adds	r2, r0, #1
 800bf6a:	4629      	mov	r1, r5
 800bf6c:	61a0      	str	r0, [r4, #24]
 800bf6e:	4630      	mov	r0, r6
 800bf70:	f004 fd34 	bl	80109dc <ucdr_serialize_sequence_char>
 800bf74:	f004 fae8 	bl	8010548 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 800bf78:	6843      	ldr	r3, [r0, #4]
 800bf7a:	4631      	mov	r1, r6
 800bf7c:	689b      	ldr	r3, [r3, #8]
 800bf7e:	f104 0020 	add.w	r0, r4, #32
 800bf82:	4798      	blx	r3
 800bf84:	f004 fb50 	bl	8010628 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 800bf88:	6843      	ldr	r3, [r0, #4]
 800bf8a:	4631      	mov	r1, r6
 800bf8c:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 800bf90:	689b      	ldr	r3, [r3, #8]
 800bf92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bf96:	4718      	bx	r3
 800bf98:	462a      	mov	r2, r5
 800bf9a:	4628      	mov	r0, r5
 800bf9c:	e7e5      	b.n	800bf6a <_Odometry__cdr_serialize+0x22>
 800bf9e:	4770      	bx	lr

0800bfa0 <_Odometry__max_serialized_size>:
 800bfa0:	b510      	push	{r4, lr}
 800bfa2:	b082      	sub	sp, #8
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	2100      	movs	r1, #0
 800bfa8:	f10d 0007 	add.w	r0, sp, #7
 800bfac:	f88d 3007 	strb.w	r3, [sp, #7]
 800bfb0:	f004 f90a 	bl	80101c8 <max_serialized_size_std_msgs__msg__Header>
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	4601      	mov	r1, r0
 800bfb8:	4604      	mov	r4, r0
 800bfba:	f10d 0007 	add.w	r0, sp, #7
 800bfbe:	f88d 3007 	strb.w	r3, [sp, #7]
 800bfc2:	f004 fab1 	bl	8010528 <max_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 800bfc6:	4404      	add	r4, r0
 800bfc8:	4621      	mov	r1, r4
 800bfca:	f10d 0007 	add.w	r0, sp, #7
 800bfce:	f004 fb1b 	bl	8010608 <max_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 800bfd2:	4420      	add	r0, r4
 800bfd4:	b002      	add	sp, #8
 800bfd6:	bd10      	pop	{r4, pc}

0800bfd8 <_Odometry__get_serialized_size>:
 800bfd8:	b5d0      	push	{r4, r6, r7, lr}
 800bfda:	4604      	mov	r4, r0
 800bfdc:	b1b8      	cbz	r0, 800c00e <_Odometry__get_serialized_size+0x36>
 800bfde:	2100      	movs	r1, #0
 800bfe0:	f004 f87a 	bl	80100d8 <get_serialized_size_std_msgs__msg__Header>
 800bfe4:	2104      	movs	r1, #4
 800bfe6:	4607      	mov	r7, r0
 800bfe8:	f7ff feac 	bl	800bd44 <ucdr_alignment>
 800bfec:	69a3      	ldr	r3, [r4, #24]
 800bfee:	1d5a      	adds	r2, r3, #5
 800bff0:	19d3      	adds	r3, r2, r7
 800bff2:	4606      	mov	r6, r0
 800bff4:	441e      	add	r6, r3
 800bff6:	4631      	mov	r1, r6
 800bff8:	f104 0020 	add.w	r0, r4, #32
 800bffc:	f004 fa38 	bl	8010470 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 800c000:	4406      	add	r6, r0
 800c002:	4631      	mov	r1, r6
 800c004:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 800c008:	f004 faa2 	bl	8010550 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 800c00c:	4430      	add	r0, r6
 800c00e:	bdd0      	pop	{r4, r6, r7, pc}

0800c010 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800c010:	4800      	ldr	r0, [pc, #0]	@ (800c014 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x4>)
 800c012:	4770      	bx	lr
 800c014:	200002e0 	.word	0x200002e0

0800c018 <rcl_get_zero_initialized_context>:
 800c018:	4a03      	ldr	r2, [pc, #12]	@ (800c028 <rcl_get_zero_initialized_context+0x10>)
 800c01a:	4603      	mov	r3, r0
 800c01c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c020:	e883 0003 	stmia.w	r3, {r0, r1}
 800c024:	4618      	mov	r0, r3
 800c026:	4770      	bx	lr
 800c028:	0801b0cc 	.word	0x0801b0cc

0800c02c <rcl_context_is_valid>:
 800c02c:	b118      	cbz	r0, 800c036 <rcl_context_is_valid+0xa>
 800c02e:	6840      	ldr	r0, [r0, #4]
 800c030:	3800      	subs	r0, #0
 800c032:	bf18      	it	ne
 800c034:	2001      	movne	r0, #1
 800c036:	4770      	bx	lr

0800c038 <rcl_context_get_rmw_context>:
 800c038:	b110      	cbz	r0, 800c040 <rcl_context_get_rmw_context+0x8>
 800c03a:	6800      	ldr	r0, [r0, #0]
 800c03c:	b100      	cbz	r0, 800c040 <rcl_context_get_rmw_context+0x8>
 800c03e:	3028      	adds	r0, #40	@ 0x28
 800c040:	4770      	bx	lr
 800c042:	bf00      	nop

0800c044 <__cleanup_context>:
 800c044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c048:	4606      	mov	r6, r0
 800c04a:	6800      	ldr	r0, [r0, #0]
 800c04c:	2300      	movs	r3, #0
 800c04e:	6073      	str	r3, [r6, #4]
 800c050:	2800      	cmp	r0, #0
 800c052:	d049      	beq.n	800c0e8 <__cleanup_context+0xa4>
 800c054:	6947      	ldr	r7, [r0, #20]
 800c056:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800c05a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800c05e:	b137      	cbz	r7, 800c06e <__cleanup_context+0x2a>
 800c060:	3014      	adds	r0, #20
 800c062:	f000 f8cb 	bl	800c1fc <rcl_init_options_fini>
 800c066:	4607      	mov	r7, r0
 800c068:	2800      	cmp	r0, #0
 800c06a:	d144      	bne.n	800c0f6 <__cleanup_context+0xb2>
 800c06c:	6830      	ldr	r0, [r6, #0]
 800c06e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c070:	b143      	cbz	r3, 800c084 <__cleanup_context+0x40>
 800c072:	3028      	adds	r0, #40	@ 0x28
 800c074:	f002 ff3a 	bl	800eeec <rmw_context_fini>
 800c078:	b118      	cbz	r0, 800c082 <__cleanup_context+0x3e>
 800c07a:	2f00      	cmp	r7, #0
 800c07c:	d03e      	beq.n	800c0fc <__cleanup_context+0xb8>
 800c07e:	f002 f94b 	bl	800e318 <rcutils_reset_error>
 800c082:	6830      	ldr	r0, [r6, #0]
 800c084:	6a03      	ldr	r3, [r0, #32]
 800c086:	b1db      	cbz	r3, 800c0c0 <__cleanup_context+0x7c>
 800c088:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800c08c:	2a01      	cmp	r2, #1
 800c08e:	f17c 0100 	sbcs.w	r1, ip, #0
 800c092:	db11      	blt.n	800c0b8 <__cleanup_context+0x74>
 800c094:	2400      	movs	r4, #0
 800c096:	4625      	mov	r5, r4
 800c098:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c09c:	4649      	mov	r1, r9
 800c09e:	b1b8      	cbz	r0, 800c0d0 <__cleanup_context+0x8c>
 800c0a0:	47c0      	blx	r8
 800c0a2:	6833      	ldr	r3, [r6, #0]
 800c0a4:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800c0a8:	3401      	adds	r4, #1
 800c0aa:	f145 0500 	adc.w	r5, r5, #0
 800c0ae:	4294      	cmp	r4, r2
 800c0b0:	eb75 010c 	sbcs.w	r1, r5, ip
 800c0b4:	6a1b      	ldr	r3, [r3, #32]
 800c0b6:	dbef      	blt.n	800c098 <__cleanup_context+0x54>
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	4649      	mov	r1, r9
 800c0bc:	47c0      	blx	r8
 800c0be:	6830      	ldr	r0, [r6, #0]
 800c0c0:	4649      	mov	r1, r9
 800c0c2:	47c0      	blx	r8
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	e9c6 3300 	strd	r3, r3, [r6]
 800c0ca:	4638      	mov	r0, r7
 800c0cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0d0:	3401      	adds	r4, #1
 800c0d2:	f145 0500 	adc.w	r5, r5, #0
 800c0d6:	4294      	cmp	r4, r2
 800c0d8:	eb75 010c 	sbcs.w	r1, r5, ip
 800c0dc:	dbdc      	blt.n	800c098 <__cleanup_context+0x54>
 800c0de:	4618      	mov	r0, r3
 800c0e0:	4649      	mov	r1, r9
 800c0e2:	47c0      	blx	r8
 800c0e4:	6830      	ldr	r0, [r6, #0]
 800c0e6:	e7eb      	b.n	800c0c0 <__cleanup_context+0x7c>
 800c0e8:	4607      	mov	r7, r0
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	e9c6 3300 	strd	r3, r3, [r6]
 800c0f0:	4638      	mov	r0, r7
 800c0f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0f6:	f002 f90f 	bl	800e318 <rcutils_reset_error>
 800c0fa:	e7b7      	b.n	800c06c <__cleanup_context+0x28>
 800c0fc:	f008 fc0a 	bl	8014914 <rcl_convert_rmw_ret_to_rcl_ret>
 800c100:	4607      	mov	r7, r0
 800c102:	e7bc      	b.n	800c07e <__cleanup_context+0x3a>

0800c104 <rcl_context_fini>:
 800c104:	b178      	cbz	r0, 800c126 <rcl_context_fini+0x22>
 800c106:	b510      	push	{r4, lr}
 800c108:	4604      	mov	r4, r0
 800c10a:	6800      	ldr	r0, [r0, #0]
 800c10c:	b150      	cbz	r0, 800c124 <rcl_context_fini+0x20>
 800c10e:	6863      	ldr	r3, [r4, #4]
 800c110:	b93b      	cbnz	r3, 800c122 <rcl_context_fini+0x1e>
 800c112:	f002 f821 	bl	800e158 <rcutils_allocator_is_valid>
 800c116:	b120      	cbz	r0, 800c122 <rcl_context_fini+0x1e>
 800c118:	4620      	mov	r0, r4
 800c11a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c11e:	f7ff bf91 	b.w	800c044 <__cleanup_context>
 800c122:	200b      	movs	r0, #11
 800c124:	bd10      	pop	{r4, pc}
 800c126:	200b      	movs	r0, #11
 800c128:	4770      	bx	lr
 800c12a:	bf00      	nop

0800c12c <rcl_get_zero_initialized_init_options>:
 800c12c:	2000      	movs	r0, #0
 800c12e:	4770      	bx	lr

0800c130 <rcl_init_options_init>:
 800c130:	b084      	sub	sp, #16
 800c132:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c134:	b097      	sub	sp, #92	@ 0x5c
 800c136:	ae1d      	add	r6, sp, #116	@ 0x74
 800c138:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800c13c:	2800      	cmp	r0, #0
 800c13e:	d058      	beq.n	800c1f2 <rcl_init_options_init+0xc2>
 800c140:	6803      	ldr	r3, [r0, #0]
 800c142:	4605      	mov	r5, r0
 800c144:	b133      	cbz	r3, 800c154 <rcl_init_options_init+0x24>
 800c146:	2464      	movs	r4, #100	@ 0x64
 800c148:	4620      	mov	r0, r4
 800c14a:	b017      	add	sp, #92	@ 0x5c
 800c14c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c150:	b004      	add	sp, #16
 800c152:	4770      	bx	lr
 800c154:	4630      	mov	r0, r6
 800c156:	f001 ffff 	bl	800e158 <rcutils_allocator_is_valid>
 800c15a:	2800      	cmp	r0, #0
 800c15c:	d049      	beq.n	800c1f2 <rcl_init_options_init+0xc2>
 800c15e:	46b4      	mov	ip, r6
 800c160:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c164:	ac11      	add	r4, sp, #68	@ 0x44
 800c166:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c168:	f8dc 3000 	ldr.w	r3, [ip]
 800c16c:	6023      	str	r3, [r4, #0]
 800c16e:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800c170:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c172:	2050      	movs	r0, #80	@ 0x50
 800c174:	4798      	blx	r3
 800c176:	4604      	mov	r4, r0
 800c178:	6028      	str	r0, [r5, #0]
 800c17a:	2800      	cmp	r0, #0
 800c17c:	d03b      	beq.n	800c1f6 <rcl_init_options_init+0xc6>
 800c17e:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800c182:	4686      	mov	lr, r0
 800c184:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c188:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c18c:	f8dc 3000 	ldr.w	r3, [ip]
 800c190:	f8ce 3000 	str.w	r3, [lr]
 800c194:	a802      	add	r0, sp, #8
 800c196:	f002 fa83 	bl	800e6a0 <rmw_get_zero_initialized_init_options>
 800c19a:	f10d 0e08 	add.w	lr, sp, #8
 800c19e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c1a2:	f104 0c18 	add.w	ip, r4, #24
 800c1a6:	682f      	ldr	r7, [r5, #0]
 800c1a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c1ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c1b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c1b4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c1b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c1bc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800c1c0:	ac20      	add	r4, sp, #128	@ 0x80
 800c1c2:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c1c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c1ca:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c1ce:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800c1d2:	f107 0018 	add.w	r0, r7, #24
 800c1d6:	f002 fbcd 	bl	800e974 <rmw_init_options_init>
 800c1da:	4604      	mov	r4, r0
 800c1dc:	2800      	cmp	r0, #0
 800c1de:	d0b3      	beq.n	800c148 <rcl_init_options_init+0x18>
 800c1e0:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800c1e2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800c1e4:	6828      	ldr	r0, [r5, #0]
 800c1e6:	4798      	blx	r3
 800c1e8:	4620      	mov	r0, r4
 800c1ea:	f008 fb93 	bl	8014914 <rcl_convert_rmw_ret_to_rcl_ret>
 800c1ee:	4604      	mov	r4, r0
 800c1f0:	e7aa      	b.n	800c148 <rcl_init_options_init+0x18>
 800c1f2:	240b      	movs	r4, #11
 800c1f4:	e7a8      	b.n	800c148 <rcl_init_options_init+0x18>
 800c1f6:	240a      	movs	r4, #10
 800c1f8:	e7a6      	b.n	800c148 <rcl_init_options_init+0x18>
 800c1fa:	bf00      	nop

0800c1fc <rcl_init_options_fini>:
 800c1fc:	b530      	push	{r4, r5, lr}
 800c1fe:	b087      	sub	sp, #28
 800c200:	b1f0      	cbz	r0, 800c240 <rcl_init_options_fini+0x44>
 800c202:	6803      	ldr	r3, [r0, #0]
 800c204:	4604      	mov	r4, r0
 800c206:	b1db      	cbz	r3, 800c240 <rcl_init_options_fini+0x44>
 800c208:	469c      	mov	ip, r3
 800c20a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c20e:	f10d 0e04 	add.w	lr, sp, #4
 800c212:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c216:	f8dc 3000 	ldr.w	r3, [ip]
 800c21a:	f8ce 3000 	str.w	r3, [lr]
 800c21e:	a801      	add	r0, sp, #4
 800c220:	f001 ff9a 	bl	800e158 <rcutils_allocator_is_valid>
 800c224:	b160      	cbz	r0, 800c240 <rcl_init_options_fini+0x44>
 800c226:	6820      	ldr	r0, [r4, #0]
 800c228:	3018      	adds	r0, #24
 800c22a:	f002 fc79 	bl	800eb20 <rmw_init_options_fini>
 800c22e:	4605      	mov	r5, r0
 800c230:	b950      	cbnz	r0, 800c248 <rcl_init_options_fini+0x4c>
 800c232:	6820      	ldr	r0, [r4, #0]
 800c234:	9b02      	ldr	r3, [sp, #8]
 800c236:	9905      	ldr	r1, [sp, #20]
 800c238:	4798      	blx	r3
 800c23a:	4628      	mov	r0, r5
 800c23c:	b007      	add	sp, #28
 800c23e:	bd30      	pop	{r4, r5, pc}
 800c240:	250b      	movs	r5, #11
 800c242:	4628      	mov	r0, r5
 800c244:	b007      	add	sp, #28
 800c246:	bd30      	pop	{r4, r5, pc}
 800c248:	f008 fb64 	bl	8014914 <rcl_convert_rmw_ret_to_rcl_ret>
 800c24c:	4605      	mov	r5, r0
 800c24e:	e7f8      	b.n	800c242 <rcl_init_options_fini+0x46>

0800c250 <rcl_init_options_copy>:
 800c250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c254:	b094      	sub	sp, #80	@ 0x50
 800c256:	2800      	cmp	r0, #0
 800c258:	d058      	beq.n	800c30c <rcl_init_options_copy+0xbc>
 800c25a:	4604      	mov	r4, r0
 800c25c:	6800      	ldr	r0, [r0, #0]
 800c25e:	2800      	cmp	r0, #0
 800c260:	d054      	beq.n	800c30c <rcl_init_options_copy+0xbc>
 800c262:	460e      	mov	r6, r1
 800c264:	f001 ff78 	bl	800e158 <rcutils_allocator_is_valid>
 800c268:	2800      	cmp	r0, #0
 800c26a:	d04f      	beq.n	800c30c <rcl_init_options_copy+0xbc>
 800c26c:	2e00      	cmp	r6, #0
 800c26e:	d04d      	beq.n	800c30c <rcl_init_options_copy+0xbc>
 800c270:	6833      	ldr	r3, [r6, #0]
 800c272:	b123      	cbz	r3, 800c27e <rcl_init_options_copy+0x2e>
 800c274:	2464      	movs	r4, #100	@ 0x64
 800c276:	4620      	mov	r0, r4
 800c278:	b014      	add	sp, #80	@ 0x50
 800c27a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c27e:	6827      	ldr	r7, [r4, #0]
 800c280:	46bc      	mov	ip, r7
 800c282:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c286:	ad0f      	add	r5, sp, #60	@ 0x3c
 800c288:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c28a:	f8dc 3000 	ldr.w	r3, [ip]
 800c28e:	f8d7 8000 	ldr.w	r8, [r7]
 800c292:	602b      	str	r3, [r5, #0]
 800c294:	4619      	mov	r1, r3
 800c296:	2050      	movs	r0, #80	@ 0x50
 800c298:	47c0      	blx	r8
 800c29a:	4605      	mov	r5, r0
 800c29c:	6030      	str	r0, [r6, #0]
 800c29e:	b3d0      	cbz	r0, 800c316 <rcl_init_options_copy+0xc6>
 800c2a0:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800c2a4:	4686      	mov	lr, r0
 800c2a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c2aa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c2ae:	f8dc 3000 	ldr.w	r3, [ip]
 800c2b2:	f8ce 3000 	str.w	r3, [lr]
 800c2b6:	4668      	mov	r0, sp
 800c2b8:	f002 f9f2 	bl	800e6a0 <rmw_get_zero_initialized_init_options>
 800c2bc:	46ee      	mov	lr, sp
 800c2be:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c2c2:	f105 0c18 	add.w	ip, r5, #24
 800c2c6:	6824      	ldr	r4, [r4, #0]
 800c2c8:	6835      	ldr	r5, [r6, #0]
 800c2ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c2ce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c2d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c2d6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c2da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c2de:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800c2e2:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c2e6:	f104 0018 	add.w	r0, r4, #24
 800c2ea:	f105 0118 	add.w	r1, r5, #24
 800c2ee:	f002 fba3 	bl	800ea38 <rmw_init_options_copy>
 800c2f2:	4604      	mov	r4, r0
 800c2f4:	2800      	cmp	r0, #0
 800c2f6:	d0be      	beq.n	800c276 <rcl_init_options_copy+0x26>
 800c2f8:	f001 fff8 	bl	800e2ec <rcutils_get_error_string>
 800c2fc:	f002 f80c 	bl	800e318 <rcutils_reset_error>
 800c300:	4630      	mov	r0, r6
 800c302:	f7ff ff7b 	bl	800c1fc <rcl_init_options_fini>
 800c306:	b140      	cbz	r0, 800c31a <rcl_init_options_copy+0xca>
 800c308:	4604      	mov	r4, r0
 800c30a:	e7b4      	b.n	800c276 <rcl_init_options_copy+0x26>
 800c30c:	240b      	movs	r4, #11
 800c30e:	4620      	mov	r0, r4
 800c310:	b014      	add	sp, #80	@ 0x50
 800c312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c316:	240a      	movs	r4, #10
 800c318:	e7ad      	b.n	800c276 <rcl_init_options_copy+0x26>
 800c31a:	4620      	mov	r0, r4
 800c31c:	b014      	add	sp, #80	@ 0x50
 800c31e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c322:	f008 baf7 	b.w	8014914 <rcl_convert_rmw_ret_to_rcl_ret>
 800c326:	bf00      	nop

0800c328 <rcl_init_options_set_domain_id>:
 800c328:	b120      	cbz	r0, 800c334 <rcl_init_options_set_domain_id+0xc>
 800c32a:	6803      	ldr	r3, [r0, #0]
 800c32c:	b113      	cbz	r3, 800c334 <rcl_init_options_set_domain_id+0xc>
 800c32e:	6259      	str	r1, [r3, #36]	@ 0x24
 800c330:	2000      	movs	r0, #0
 800c332:	4770      	bx	lr
 800c334:	200b      	movs	r0, #11
 800c336:	4770      	bx	lr

0800c338 <rcl_get_zero_initialized_node>:
 800c338:	4a03      	ldr	r2, [pc, #12]	@ (800c348 <rcl_get_zero_initialized_node+0x10>)
 800c33a:	4603      	mov	r3, r0
 800c33c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c340:	e883 0003 	stmia.w	r3, {r0, r1}
 800c344:	4618      	mov	r0, r3
 800c346:	4770      	bx	lr
 800c348:	0801b0d4 	.word	0x0801b0d4

0800c34c <rcl_node_init>:
 800c34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c350:	b0a9      	sub	sp, #164	@ 0xa4
 800c352:	4604      	mov	r4, r0
 800c354:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 800c358:	a823      	add	r0, sp, #140	@ 0x8c
 800c35a:	460e      	mov	r6, r1
 800c35c:	4615      	mov	r5, r2
 800c35e:	461f      	mov	r7, r3
 800c360:	f008 fbc8 	bl	8014af4 <rcl_guard_condition_get_default_options>
 800c364:	f1b8 0f00 	cmp.w	r8, #0
 800c368:	f000 80e6 	beq.w	800c538 <rcl_node_init+0x1ec>
 800c36c:	4640      	mov	r0, r8
 800c36e:	f001 fef3 	bl	800e158 <rcutils_allocator_is_valid>
 800c372:	2800      	cmp	r0, #0
 800c374:	f000 80e0 	beq.w	800c538 <rcl_node_init+0x1ec>
 800c378:	2e00      	cmp	r6, #0
 800c37a:	f000 80dd 	beq.w	800c538 <rcl_node_init+0x1ec>
 800c37e:	2d00      	cmp	r5, #0
 800c380:	f000 80da 	beq.w	800c538 <rcl_node_init+0x1ec>
 800c384:	2c00      	cmp	r4, #0
 800c386:	f000 80d7 	beq.w	800c538 <rcl_node_init+0x1ec>
 800c38a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c38e:	f1b9 0f00 	cmp.w	r9, #0
 800c392:	f040 80fd 	bne.w	800c590 <rcl_node_init+0x244>
 800c396:	2f00      	cmp	r7, #0
 800c398:	f000 80ce 	beq.w	800c538 <rcl_node_init+0x1ec>
 800c39c:	4638      	mov	r0, r7
 800c39e:	f7ff fe45 	bl	800c02c <rcl_context_is_valid>
 800c3a2:	4682      	mov	sl, r0
 800c3a4:	2800      	cmp	r0, #0
 800c3a6:	f000 80cd 	beq.w	800c544 <rcl_node_init+0x1f8>
 800c3aa:	464a      	mov	r2, r9
 800c3ac:	a922      	add	r1, sp, #136	@ 0x88
 800c3ae:	4630      	mov	r0, r6
 800c3b0:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 800c3b4:	f002 fa20 	bl	800e7f8 <rmw_validate_node_name>
 800c3b8:	4681      	mov	r9, r0
 800c3ba:	2800      	cmp	r0, #0
 800c3bc:	f040 80be 	bne.w	800c53c <rcl_node_init+0x1f0>
 800c3c0:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800c3c2:	2800      	cmp	r0, #0
 800c3c4:	f040 80f0 	bne.w	800c5a8 <rcl_node_init+0x25c>
 800c3c8:	4628      	mov	r0, r5
 800c3ca:	f7f3 ff2b 	bl	8000224 <strlen>
 800c3ce:	2800      	cmp	r0, #0
 800c3d0:	f040 80bb 	bne.w	800c54a <rcl_node_init+0x1fe>
 800c3d4:	4d7c      	ldr	r5, [pc, #496]	@ (800c5c8 <rcl_node_init+0x27c>)
 800c3d6:	a922      	add	r1, sp, #136	@ 0x88
 800c3d8:	2200      	movs	r2, #0
 800c3da:	4628      	mov	r0, r5
 800c3dc:	f002 f9ee 	bl	800e7bc <rmw_validate_namespace>
 800c3e0:	4681      	mov	r9, r0
 800c3e2:	2800      	cmp	r0, #0
 800c3e4:	f040 80aa 	bne.w	800c53c <rcl_node_init+0x1f0>
 800c3e8:	4682      	mov	sl, r0
 800c3ea:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800c3ec:	2800      	cmp	r0, #0
 800c3ee:	f040 80e0 	bne.w	800c5b2 <rcl_node_init+0x266>
 800c3f2:	f8d8 3000 	ldr.w	r3, [r8]
 800c3f6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c3fa:	2078      	movs	r0, #120	@ 0x78
 800c3fc:	4798      	blx	r3
 800c3fe:	4681      	mov	r9, r0
 800c400:	6060      	str	r0, [r4, #4]
 800c402:	2800      	cmp	r0, #0
 800c404:	f000 80ca 	beq.w	800c59c <rcl_node_init+0x250>
 800c408:	2200      	movs	r2, #0
 800c40a:	2300      	movs	r3, #0
 800c40c:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 800c410:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 800c414:	a808      	add	r0, sp, #32
 800c416:	f000 f939 	bl	800c68c <rcl_node_get_default_options>
 800c41a:	a908      	add	r1, sp, #32
 800c41c:	4648      	mov	r0, r9
 800c41e:	2268      	movs	r2, #104	@ 0x68
 800c420:	f00d fac1 	bl	80199a6 <memcpy>
 800c424:	6861      	ldr	r1, [r4, #4]
 800c426:	6027      	str	r7, [r4, #0]
 800c428:	4640      	mov	r0, r8
 800c42a:	f000 f93d 	bl	800c6a8 <rcl_node_options_copy>
 800c42e:	2800      	cmp	r0, #0
 800c430:	d158      	bne.n	800c4e4 <rcl_node_init+0x198>
 800c432:	4628      	mov	r0, r5
 800c434:	f7f3 fef6 	bl	8000224 <strlen>
 800c438:	4428      	add	r0, r5
 800c43a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800c43e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800c442:	2b2f      	cmp	r3, #47	@ 0x2f
 800c444:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c448:	9300      	str	r3, [sp, #0]
 800c44a:	bf0c      	ite	eq
 800c44c:	4b5f      	ldreq	r3, [pc, #380]	@ (800c5cc <rcl_node_init+0x280>)
 800c44e:	4b60      	ldrne	r3, [pc, #384]	@ (800c5d0 <rcl_node_init+0x284>)
 800c450:	9302      	str	r3, [sp, #8]
 800c452:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c456:	9301      	str	r3, [sp, #4]
 800c458:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800c45c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c460:	f001 ff76 	bl	800e350 <rcutils_format_string_limit>
 800c464:	6823      	ldr	r3, [r4, #0]
 800c466:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 800c46a:	6818      	ldr	r0, [r3, #0]
 800c46c:	4631      	mov	r1, r6
 800c46e:	3028      	adds	r0, #40	@ 0x28
 800c470:	462a      	mov	r2, r5
 800c472:	6866      	ldr	r6, [r4, #4]
 800c474:	f002 fde6 	bl	800f044 <rmw_create_node>
 800c478:	6863      	ldr	r3, [r4, #4]
 800c47a:	66b0      	str	r0, [r6, #104]	@ 0x68
 800c47c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800c47e:	2800      	cmp	r0, #0
 800c480:	d032      	beq.n	800c4e8 <rcl_node_init+0x19c>
 800c482:	f002 fe73 	bl	800f16c <rmw_node_get_graph_guard_condition>
 800c486:	4681      	mov	r9, r0
 800c488:	b360      	cbz	r0, 800c4e4 <rcl_node_init+0x198>
 800c48a:	f8d8 3000 	ldr.w	r3, [r8]
 800c48e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c492:	6866      	ldr	r6, [r4, #4]
 800c494:	2008      	movs	r0, #8
 800c496:	4798      	blx	r3
 800c498:	6863      	ldr	r3, [r4, #4]
 800c49a:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800c49c:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 800c4a0:	f1bb 0f00 	cmp.w	fp, #0
 800c4a4:	d020      	beq.n	800c4e8 <rcl_node_init+0x19c>
 800c4a6:	a806      	add	r0, sp, #24
 800c4a8:	f008 fa48 	bl	801493c <rcl_get_zero_initialized_guard_condition>
 800c4ac:	a806      	add	r0, sp, #24
 800c4ae:	c803      	ldmia	r0, {r0, r1}
 800c4b0:	6863      	ldr	r3, [r4, #4]
 800c4b2:	46c4      	mov	ip, r8
 800c4b4:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800c4b8:	e88b 0003 	stmia.w	fp, {r0, r1}
 800c4bc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c4c0:	ae23      	add	r6, sp, #140	@ 0x8c
 800c4c2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c4c4:	f8dc 3000 	ldr.w	r3, [ip]
 800c4c8:	6033      	str	r3, [r6, #0]
 800c4ca:	ab28      	add	r3, sp, #160	@ 0xa0
 800c4cc:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800c4d0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c4d4:	4649      	mov	r1, r9
 800c4d6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c4d8:	463a      	mov	r2, r7
 800c4da:	4670      	mov	r0, lr
 800c4dc:	f008 fa84 	bl	80149e8 <rcl_guard_condition_init_from_rmw>
 800c4e0:	4681      	mov	r9, r0
 800c4e2:	b328      	cbz	r0, 800c530 <rcl_node_init+0x1e4>
 800c4e4:	6863      	ldr	r3, [r4, #4]
 800c4e6:	b1f3      	cbz	r3, 800c526 <rcl_node_init+0x1da>
 800c4e8:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800c4ea:	b128      	cbz	r0, 800c4f8 <rcl_node_init+0x1ac>
 800c4ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c4f0:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c4f4:	4798      	blx	r3
 800c4f6:	6863      	ldr	r3, [r4, #4]
 800c4f8:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800c4fa:	b110      	cbz	r0, 800c502 <rcl_node_init+0x1b6>
 800c4fc:	f002 fdba 	bl	800f074 <rmw_destroy_node>
 800c500:	6863      	ldr	r3, [r4, #4]
 800c502:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800c504:	b148      	cbz	r0, 800c51a <rcl_node_init+0x1ce>
 800c506:	f008 facf 	bl	8014aa8 <rcl_guard_condition_fini>
 800c50a:	6863      	ldr	r3, [r4, #4]
 800c50c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c510:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800c512:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c516:	4798      	blx	r3
 800c518:	6863      	ldr	r3, [r4, #4]
 800c51a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c51e:	4618      	mov	r0, r3
 800c520:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c524:	4798      	blx	r3
 800c526:	2300      	movs	r3, #0
 800c528:	e9c4 3300 	strd	r3, r3, [r4]
 800c52c:	f04f 0901 	mov.w	r9, #1
 800c530:	f1ba 0f00 	cmp.w	sl, #0
 800c534:	d125      	bne.n	800c582 <rcl_node_init+0x236>
 800c536:	e001      	b.n	800c53c <rcl_node_init+0x1f0>
 800c538:	f04f 090b 	mov.w	r9, #11
 800c53c:	4648      	mov	r0, r9
 800c53e:	b029      	add	sp, #164	@ 0xa4
 800c540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c544:	f04f 0965 	mov.w	r9, #101	@ 0x65
 800c548:	e7f8      	b.n	800c53c <rcl_node_init+0x1f0>
 800c54a:	782b      	ldrb	r3, [r5, #0]
 800c54c:	2b2f      	cmp	r3, #47	@ 0x2f
 800c54e:	f43f af42 	beq.w	800c3d6 <rcl_node_init+0x8a>
 800c552:	9503      	str	r5, [sp, #12]
 800c554:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c558:	9300      	str	r3, [sp, #0]
 800c55a:	4b1e      	ldr	r3, [pc, #120]	@ (800c5d4 <rcl_node_init+0x288>)
 800c55c:	9302      	str	r3, [sp, #8]
 800c55e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c562:	9301      	str	r3, [sp, #4]
 800c564:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800c568:	f001 fef2 	bl	800e350 <rcutils_format_string_limit>
 800c56c:	4605      	mov	r5, r0
 800c56e:	b340      	cbz	r0, 800c5c2 <rcl_node_init+0x276>
 800c570:	2200      	movs	r2, #0
 800c572:	a922      	add	r1, sp, #136	@ 0x88
 800c574:	9222      	str	r2, [sp, #136]	@ 0x88
 800c576:	f002 f921 	bl	800e7bc <rmw_validate_namespace>
 800c57a:	4681      	mov	r9, r0
 800c57c:	2800      	cmp	r0, #0
 800c57e:	f43f af34 	beq.w	800c3ea <rcl_node_init+0x9e>
 800c582:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c586:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c58a:	4628      	mov	r0, r5
 800c58c:	4798      	blx	r3
 800c58e:	e7d5      	b.n	800c53c <rcl_node_init+0x1f0>
 800c590:	f04f 0964 	mov.w	r9, #100	@ 0x64
 800c594:	4648      	mov	r0, r9
 800c596:	b029      	add	sp, #164	@ 0xa4
 800c598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c59c:	f04f 090a 	mov.w	r9, #10
 800c5a0:	f1ba 0f00 	cmp.w	sl, #0
 800c5a4:	d1ed      	bne.n	800c582 <rcl_node_init+0x236>
 800c5a6:	e7c9      	b.n	800c53c <rcl_node_init+0x1f0>
 800c5a8:	f002 f978 	bl	800e89c <rmw_node_name_validation_result_string>
 800c5ac:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 800c5b0:	e7c4      	b.n	800c53c <rcl_node_init+0x1f0>
 800c5b2:	f002 f915 	bl	800e7e0 <rmw_namespace_validation_result_string>
 800c5b6:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 800c5ba:	f1ba 0f00 	cmp.w	sl, #0
 800c5be:	d1e0      	bne.n	800c582 <rcl_node_init+0x236>
 800c5c0:	e7bc      	b.n	800c53c <rcl_node_init+0x1f0>
 800c5c2:	f04f 090a 	mov.w	r9, #10
 800c5c6:	e7b9      	b.n	800c53c <rcl_node_init+0x1f0>
 800c5c8:	0801a9bc 	.word	0x0801a9bc
 800c5cc:	0801a9c4 	.word	0x0801a9c4
 800c5d0:	0801a9cc 	.word	0x0801a9cc
 800c5d4:	0801a9c0 	.word	0x0801a9c0

0800c5d8 <rcl_node_fini>:
 800c5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5da:	b320      	cbz	r0, 800c626 <rcl_node_fini+0x4e>
 800c5dc:	6845      	ldr	r5, [r0, #4]
 800c5de:	4604      	mov	r4, r0
 800c5e0:	b1fd      	cbz	r5, 800c622 <rcl_node_fini+0x4a>
 800c5e2:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 800c5e4:	686f      	ldr	r7, [r5, #4]
 800c5e6:	692e      	ldr	r6, [r5, #16]
 800c5e8:	f002 fd44 	bl	800f074 <rmw_destroy_node>
 800c5ec:	6863      	ldr	r3, [r4, #4]
 800c5ee:	4605      	mov	r5, r0
 800c5f0:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800c5f2:	f008 fa59 	bl	8014aa8 <rcl_guard_condition_fini>
 800c5f6:	ea55 0300 	orrs.w	r3, r5, r0
 800c5fa:	6863      	ldr	r3, [r4, #4]
 800c5fc:	4631      	mov	r1, r6
 800c5fe:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800c600:	bf14      	ite	ne
 800c602:	2501      	movne	r5, #1
 800c604:	2500      	moveq	r5, #0
 800c606:	47b8      	blx	r7
 800c608:	6863      	ldr	r3, [r4, #4]
 800c60a:	4631      	mov	r1, r6
 800c60c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800c60e:	47b8      	blx	r7
 800c610:	6863      	ldr	r3, [r4, #4]
 800c612:	4631      	mov	r1, r6
 800c614:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800c616:	47b8      	blx	r7
 800c618:	6860      	ldr	r0, [r4, #4]
 800c61a:	4631      	mov	r1, r6
 800c61c:	47b8      	blx	r7
 800c61e:	2300      	movs	r3, #0
 800c620:	6063      	str	r3, [r4, #4]
 800c622:	4628      	mov	r0, r5
 800c624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c626:	25c8      	movs	r5, #200	@ 0xc8
 800c628:	4628      	mov	r0, r5
 800c62a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c62c <rcl_node_is_valid_except_context>:
 800c62c:	b128      	cbz	r0, 800c63a <rcl_node_is_valid_except_context+0xe>
 800c62e:	6840      	ldr	r0, [r0, #4]
 800c630:	b118      	cbz	r0, 800c63a <rcl_node_is_valid_except_context+0xe>
 800c632:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800c634:	3800      	subs	r0, #0
 800c636:	bf18      	it	ne
 800c638:	2001      	movne	r0, #1
 800c63a:	4770      	bx	lr

0800c63c <rcl_node_is_valid>:
 800c63c:	b130      	cbz	r0, 800c64c <rcl_node_is_valid+0x10>
 800c63e:	6843      	ldr	r3, [r0, #4]
 800c640:	b123      	cbz	r3, 800c64c <rcl_node_is_valid+0x10>
 800c642:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c644:	b113      	cbz	r3, 800c64c <rcl_node_is_valid+0x10>
 800c646:	6800      	ldr	r0, [r0, #0]
 800c648:	f7ff bcf0 	b.w	800c02c <rcl_context_is_valid>
 800c64c:	2000      	movs	r0, #0
 800c64e:	4770      	bx	lr

0800c650 <rcl_node_get_name>:
 800c650:	b120      	cbz	r0, 800c65c <rcl_node_get_name+0xc>
 800c652:	6840      	ldr	r0, [r0, #4]
 800c654:	b110      	cbz	r0, 800c65c <rcl_node_get_name+0xc>
 800c656:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800c658:	b100      	cbz	r0, 800c65c <rcl_node_get_name+0xc>
 800c65a:	6880      	ldr	r0, [r0, #8]
 800c65c:	4770      	bx	lr
 800c65e:	bf00      	nop

0800c660 <rcl_node_get_namespace>:
 800c660:	b120      	cbz	r0, 800c66c <rcl_node_get_namespace+0xc>
 800c662:	6840      	ldr	r0, [r0, #4]
 800c664:	b110      	cbz	r0, 800c66c <rcl_node_get_namespace+0xc>
 800c666:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800c668:	b100      	cbz	r0, 800c66c <rcl_node_get_namespace+0xc>
 800c66a:	68c0      	ldr	r0, [r0, #12]
 800c66c:	4770      	bx	lr
 800c66e:	bf00      	nop

0800c670 <rcl_node_get_options>:
 800c670:	b128      	cbz	r0, 800c67e <rcl_node_get_options+0xe>
 800c672:	6840      	ldr	r0, [r0, #4]
 800c674:	b118      	cbz	r0, 800c67e <rcl_node_get_options+0xe>
 800c676:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800c678:	2b00      	cmp	r3, #0
 800c67a:	bf08      	it	eq
 800c67c:	2000      	moveq	r0, #0
 800c67e:	4770      	bx	lr

0800c680 <rcl_node_get_rmw_handle>:
 800c680:	b110      	cbz	r0, 800c688 <rcl_node_get_rmw_handle+0x8>
 800c682:	6840      	ldr	r0, [r0, #4]
 800c684:	b100      	cbz	r0, 800c688 <rcl_node_get_rmw_handle+0x8>
 800c686:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800c688:	4770      	bx	lr
 800c68a:	bf00      	nop

0800c68c <rcl_node_get_default_options>:
 800c68c:	b510      	push	{r4, lr}
 800c68e:	2268      	movs	r2, #104	@ 0x68
 800c690:	4604      	mov	r4, r0
 800c692:	2100      	movs	r1, #0
 800c694:	f00d f8be 	bl	8019814 <memset>
 800c698:	4620      	mov	r0, r4
 800c69a:	f001 fd4f 	bl	800e13c <rcutils_get_default_allocator>
 800c69e:	2301      	movs	r3, #1
 800c6a0:	7523      	strb	r3, [r4, #20]
 800c6a2:	4620      	mov	r0, r4
 800c6a4:	bd10      	pop	{r4, pc}
 800c6a6:	bf00      	nop

0800c6a8 <rcl_node_options_copy>:
 800c6a8:	b1d0      	cbz	r0, 800c6e0 <rcl_node_options_copy+0x38>
 800c6aa:	b570      	push	{r4, r5, r6, lr}
 800c6ac:	460c      	mov	r4, r1
 800c6ae:	b1a9      	cbz	r1, 800c6dc <rcl_node_options_copy+0x34>
 800c6b0:	4288      	cmp	r0, r1
 800c6b2:	4684      	mov	ip, r0
 800c6b4:	d012      	beq.n	800c6dc <rcl_node_options_copy+0x34>
 800c6b6:	4605      	mov	r5, r0
 800c6b8:	8a86      	ldrh	r6, [r0, #20]
 800c6ba:	468e      	mov	lr, r1
 800c6bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c6be:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c6c2:	682b      	ldr	r3, [r5, #0]
 800c6c4:	f8ce 3000 	str.w	r3, [lr]
 800c6c8:	f10c 0118 	add.w	r1, ip, #24
 800c6cc:	2250      	movs	r2, #80	@ 0x50
 800c6ce:	82a6      	strh	r6, [r4, #20]
 800c6d0:	f104 0018 	add.w	r0, r4, #24
 800c6d4:	f00d f967 	bl	80199a6 <memcpy>
 800c6d8:	2000      	movs	r0, #0
 800c6da:	bd70      	pop	{r4, r5, r6, pc}
 800c6dc:	200b      	movs	r0, #11
 800c6de:	bd70      	pop	{r4, r5, r6, pc}
 800c6e0:	200b      	movs	r0, #11
 800c6e2:	4770      	bx	lr

0800c6e4 <rcl_get_zero_initialized_publisher>:
 800c6e4:	4b01      	ldr	r3, [pc, #4]	@ (800c6ec <rcl_get_zero_initialized_publisher+0x8>)
 800c6e6:	6818      	ldr	r0, [r3, #0]
 800c6e8:	4770      	bx	lr
 800c6ea:	bf00      	nop
 800c6ec:	0801b0dc 	.word	0x0801b0dc

0800c6f0 <rcl_publisher_init>:
 800c6f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6f4:	b088      	sub	sp, #32
 800c6f6:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800c6f8:	2d00      	cmp	r5, #0
 800c6fa:	d069      	beq.n	800c7d0 <rcl_publisher_init+0xe0>
 800c6fc:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800c700:	4604      	mov	r4, r0
 800c702:	4648      	mov	r0, r9
 800c704:	460e      	mov	r6, r1
 800c706:	4690      	mov	r8, r2
 800c708:	461f      	mov	r7, r3
 800c70a:	f001 fd25 	bl	800e158 <rcutils_allocator_is_valid>
 800c70e:	2800      	cmp	r0, #0
 800c710:	d05e      	beq.n	800c7d0 <rcl_publisher_init+0xe0>
 800c712:	2c00      	cmp	r4, #0
 800c714:	d05c      	beq.n	800c7d0 <rcl_publisher_init+0xe0>
 800c716:	f8d4 a000 	ldr.w	sl, [r4]
 800c71a:	f1ba 0f00 	cmp.w	sl, #0
 800c71e:	d004      	beq.n	800c72a <rcl_publisher_init+0x3a>
 800c720:	2764      	movs	r7, #100	@ 0x64
 800c722:	4638      	mov	r0, r7
 800c724:	b008      	add	sp, #32
 800c726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c72a:	4630      	mov	r0, r6
 800c72c:	f7ff ff86 	bl	800c63c <rcl_node_is_valid>
 800c730:	2800      	cmp	r0, #0
 800c732:	d052      	beq.n	800c7da <rcl_publisher_init+0xea>
 800c734:	f1b8 0f00 	cmp.w	r8, #0
 800c738:	d04a      	beq.n	800c7d0 <rcl_publisher_init+0xe0>
 800c73a:	2f00      	cmp	r7, #0
 800c73c:	d048      	beq.n	800c7d0 <rcl_publisher_init+0xe0>
 800c73e:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800c742:	aa07      	add	r2, sp, #28
 800c744:	9205      	str	r2, [sp, #20]
 800c746:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800c74a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c74e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c752:	f8cd a01c 	str.w	sl, [sp, #28]
 800c756:	4639      	mov	r1, r7
 800c758:	e899 000c 	ldmia.w	r9, {r2, r3}
 800c75c:	4630      	mov	r0, r6
 800c75e:	f008 fb29 	bl	8014db4 <rcl_node_resolve_name>
 800c762:	4607      	mov	r7, r0
 800c764:	2800      	cmp	r0, #0
 800c766:	d14f      	bne.n	800c808 <rcl_publisher_init+0x118>
 800c768:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800c76a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c76c:	20c8      	movs	r0, #200	@ 0xc8
 800c76e:	4798      	blx	r3
 800c770:	6020      	str	r0, [r4, #0]
 800c772:	2800      	cmp	r0, #0
 800c774:	d04e      	beq.n	800c814 <rcl_publisher_init+0x124>
 800c776:	4630      	mov	r0, r6
 800c778:	f7ff ff82 	bl	800c680 <rcl_node_get_rmw_handle>
 800c77c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800c780:	9300      	str	r3, [sp, #0]
 800c782:	9a07      	ldr	r2, [sp, #28]
 800c784:	6827      	ldr	r7, [r4, #0]
 800c786:	462b      	mov	r3, r5
 800c788:	4641      	mov	r1, r8
 800c78a:	f002 fd59 	bl	800f240 <rmw_create_publisher>
 800c78e:	6823      	ldr	r3, [r4, #0]
 800c790:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800c794:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c798:	b370      	cbz	r0, 800c7f8 <rcl_publisher_init+0x108>
 800c79a:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800c79e:	f002 fe2d 	bl	800f3fc <rmw_publisher_get_actual_qos>
 800c7a2:	6823      	ldr	r3, [r4, #0]
 800c7a4:	4607      	mov	r7, r0
 800c7a6:	b9d0      	cbnz	r0, 800c7de <rcl_publisher_init+0xee>
 800c7a8:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800c7ac:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800c7b0:	4629      	mov	r1, r5
 800c7b2:	2270      	movs	r2, #112	@ 0x70
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f00d f8f6 	bl	80199a6 <memcpy>
 800c7ba:	6832      	ldr	r2, [r6, #0]
 800c7bc:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800c7c0:	9807      	ldr	r0, [sp, #28]
 800c7c2:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800c7c4:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c7c6:	4798      	blx	r3
 800c7c8:	4638      	mov	r0, r7
 800c7ca:	b008      	add	sp, #32
 800c7cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7d0:	270b      	movs	r7, #11
 800c7d2:	4638      	mov	r0, r7
 800c7d4:	b008      	add	sp, #32
 800c7d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7da:	27c8      	movs	r7, #200	@ 0xc8
 800c7dc:	e7a1      	b.n	800c722 <rcl_publisher_init+0x32>
 800c7de:	b18b      	cbz	r3, 800c804 <rcl_publisher_init+0x114>
 800c7e0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c7e4:	b142      	cbz	r2, 800c7f8 <rcl_publisher_init+0x108>
 800c7e6:	4630      	mov	r0, r6
 800c7e8:	f7ff ff4a 	bl	800c680 <rcl_node_get_rmw_handle>
 800c7ec:	6823      	ldr	r3, [r4, #0]
 800c7ee:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800c7f2:	f002 fe13 	bl	800f41c <rmw_destroy_publisher>
 800c7f6:	6823      	ldr	r3, [r4, #0]
 800c7f8:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800c7fa:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	4790      	blx	r2
 800c800:	2300      	movs	r3, #0
 800c802:	6023      	str	r3, [r4, #0]
 800c804:	2701      	movs	r7, #1
 800c806:	e7db      	b.n	800c7c0 <rcl_publisher_init+0xd0>
 800c808:	2867      	cmp	r0, #103	@ 0x67
 800c80a:	d0d9      	beq.n	800c7c0 <rcl_publisher_init+0xd0>
 800c80c:	2869      	cmp	r0, #105	@ 0x69
 800c80e:	d003      	beq.n	800c818 <rcl_publisher_init+0x128>
 800c810:	280a      	cmp	r0, #10
 800c812:	d1f7      	bne.n	800c804 <rcl_publisher_init+0x114>
 800c814:	270a      	movs	r7, #10
 800c816:	e7d3      	b.n	800c7c0 <rcl_publisher_init+0xd0>
 800c818:	2767      	movs	r7, #103	@ 0x67
 800c81a:	e7d1      	b.n	800c7c0 <rcl_publisher_init+0xd0>

0800c81c <rcl_publisher_fini>:
 800c81c:	b570      	push	{r4, r5, r6, lr}
 800c81e:	b300      	cbz	r0, 800c862 <rcl_publisher_fini+0x46>
 800c820:	4604      	mov	r4, r0
 800c822:	4608      	mov	r0, r1
 800c824:	460d      	mov	r5, r1
 800c826:	f7ff ff01 	bl	800c62c <rcl_node_is_valid_except_context>
 800c82a:	b1f0      	cbz	r0, 800c86a <rcl_publisher_fini+0x4e>
 800c82c:	6823      	ldr	r3, [r4, #0]
 800c82e:	b1ab      	cbz	r3, 800c85c <rcl_publisher_fini+0x40>
 800c830:	4628      	mov	r0, r5
 800c832:	6d5e      	ldr	r6, [r3, #84]	@ 0x54
 800c834:	6e1d      	ldr	r5, [r3, #96]	@ 0x60
 800c836:	f7ff ff23 	bl	800c680 <rcl_node_get_rmw_handle>
 800c83a:	b1c8      	cbz	r0, 800c870 <rcl_publisher_fini+0x54>
 800c83c:	6823      	ldr	r3, [r4, #0]
 800c83e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800c842:	f002 fdeb 	bl	800f41c <rmw_destroy_publisher>
 800c846:	4603      	mov	r3, r0
 800c848:	4629      	mov	r1, r5
 800c84a:	6820      	ldr	r0, [r4, #0]
 800c84c:	1e1d      	subs	r5, r3, #0
 800c84e:	bf18      	it	ne
 800c850:	2501      	movne	r5, #1
 800c852:	47b0      	blx	r6
 800c854:	2300      	movs	r3, #0
 800c856:	6023      	str	r3, [r4, #0]
 800c858:	4628      	mov	r0, r5
 800c85a:	bd70      	pop	{r4, r5, r6, pc}
 800c85c:	461d      	mov	r5, r3
 800c85e:	4628      	mov	r0, r5
 800c860:	bd70      	pop	{r4, r5, r6, pc}
 800c862:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 800c866:	4628      	mov	r0, r5
 800c868:	bd70      	pop	{r4, r5, r6, pc}
 800c86a:	25c8      	movs	r5, #200	@ 0xc8
 800c86c:	4628      	mov	r0, r5
 800c86e:	bd70      	pop	{r4, r5, r6, pc}
 800c870:	250b      	movs	r5, #11
 800c872:	e7f1      	b.n	800c858 <rcl_publisher_fini+0x3c>

0800c874 <rcl_publisher_get_default_options>:
 800c874:	b570      	push	{r4, r5, r6, lr}
 800c876:	4d14      	ldr	r5, [pc, #80]	@ (800c8c8 <rcl_publisher_get_default_options+0x54>)
 800c878:	4914      	ldr	r1, [pc, #80]	@ (800c8cc <rcl_publisher_get_default_options+0x58>)
 800c87a:	b088      	sub	sp, #32
 800c87c:	4604      	mov	r4, r0
 800c87e:	2250      	movs	r2, #80	@ 0x50
 800c880:	4628      	mov	r0, r5
 800c882:	f00d f890 	bl	80199a6 <memcpy>
 800c886:	a802      	add	r0, sp, #8
 800c888:	f001 fc58 	bl	800e13c <rcutils_get_default_allocator>
 800c88c:	f10d 0c08 	add.w	ip, sp, #8
 800c890:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c894:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800c898:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c89c:	466e      	mov	r6, sp
 800c89e:	f8dc 3000 	ldr.w	r3, [ip]
 800c8a2:	f8ce 3000 	str.w	r3, [lr]
 800c8a6:	4630      	mov	r0, r6
 800c8a8:	f001 ff0a 	bl	800e6c0 <rmw_get_default_publisher_options>
 800c8ac:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c8b0:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800c8b4:	e883 0003 	stmia.w	r3, {r0, r1}
 800c8b8:	2270      	movs	r2, #112	@ 0x70
 800c8ba:	4629      	mov	r1, r5
 800c8bc:	4620      	mov	r0, r4
 800c8be:	f00d f872 	bl	80199a6 <memcpy>
 800c8c2:	4620      	mov	r0, r4
 800c8c4:	b008      	add	sp, #32
 800c8c6:	bd70      	pop	{r4, r5, r6, pc}
 800c8c8:	2000ce18 	.word	0x2000ce18
 800c8cc:	0801b0e0 	.word	0x0801b0e0

0800c8d0 <rcl_publish>:
 800c8d0:	b1f8      	cbz	r0, 800c912 <rcl_publish+0x42>
 800c8d2:	6803      	ldr	r3, [r0, #0]
 800c8d4:	b570      	push	{r4, r5, r6, lr}
 800c8d6:	4604      	mov	r4, r0
 800c8d8:	b1b3      	cbz	r3, 800c908 <rcl_publish+0x38>
 800c8da:	4616      	mov	r6, r2
 800c8dc:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c8e0:	b192      	cbz	r2, 800c908 <rcl_publish+0x38>
 800c8e2:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800c8e6:	460d      	mov	r5, r1
 800c8e8:	f7ff fba0 	bl	800c02c <rcl_context_is_valid>
 800c8ec:	b160      	cbz	r0, 800c908 <rcl_publish+0x38>
 800c8ee:	6823      	ldr	r3, [r4, #0]
 800c8f0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c8f4:	b140      	cbz	r0, 800c908 <rcl_publish+0x38>
 800c8f6:	b155      	cbz	r5, 800c90e <rcl_publish+0x3e>
 800c8f8:	4632      	mov	r2, r6
 800c8fa:	4629      	mov	r1, r5
 800c8fc:	f002 fc40 	bl	800f180 <rmw_publish>
 800c900:	3800      	subs	r0, #0
 800c902:	bf18      	it	ne
 800c904:	2001      	movne	r0, #1
 800c906:	bd70      	pop	{r4, r5, r6, pc}
 800c908:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800c90c:	bd70      	pop	{r4, r5, r6, pc}
 800c90e:	200b      	movs	r0, #11
 800c910:	bd70      	pop	{r4, r5, r6, pc}
 800c912:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800c916:	4770      	bx	lr

0800c918 <rcl_publisher_get_rmw_handle>:
 800c918:	b118      	cbz	r0, 800c922 <rcl_publisher_get_rmw_handle+0xa>
 800c91a:	6800      	ldr	r0, [r0, #0]
 800c91c:	b108      	cbz	r0, 800c922 <rcl_publisher_get_rmw_handle+0xa>
 800c91e:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800c922:	4770      	bx	lr

0800c924 <rcl_publisher_is_valid>:
 800c924:	b1a0      	cbz	r0, 800c950 <rcl_publisher_is_valid+0x2c>
 800c926:	6803      	ldr	r3, [r0, #0]
 800c928:	b510      	push	{r4, lr}
 800c92a:	4604      	mov	r4, r0
 800c92c:	b173      	cbz	r3, 800c94c <rcl_publisher_is_valid+0x28>
 800c92e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c932:	b15a      	cbz	r2, 800c94c <rcl_publisher_is_valid+0x28>
 800c934:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800c938:	f7ff fb78 	bl	800c02c <rcl_context_is_valid>
 800c93c:	b130      	cbz	r0, 800c94c <rcl_publisher_is_valid+0x28>
 800c93e:	6823      	ldr	r3, [r4, #0]
 800c940:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c944:	3800      	subs	r0, #0
 800c946:	bf18      	it	ne
 800c948:	2001      	movne	r0, #1
 800c94a:	bd10      	pop	{r4, pc}
 800c94c:	2000      	movs	r0, #0
 800c94e:	bd10      	pop	{r4, pc}
 800c950:	2000      	movs	r0, #0
 800c952:	4770      	bx	lr

0800c954 <rcl_publisher_is_valid_except_context>:
 800c954:	b130      	cbz	r0, 800c964 <rcl_publisher_is_valid_except_context+0x10>
 800c956:	6800      	ldr	r0, [r0, #0]
 800c958:	b120      	cbz	r0, 800c964 <rcl_publisher_is_valid_except_context+0x10>
 800c95a:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800c95e:	3800      	subs	r0, #0
 800c960:	bf18      	it	ne
 800c962:	2001      	movne	r0, #1
 800c964:	4770      	bx	lr
 800c966:	bf00      	nop

0800c968 <rcl_get_zero_initialized_subscription>:
 800c968:	4b01      	ldr	r3, [pc, #4]	@ (800c970 <rcl_get_zero_initialized_subscription+0x8>)
 800c96a:	6818      	ldr	r0, [r3, #0]
 800c96c:	4770      	bx	lr
 800c96e:	bf00      	nop
 800c970:	0801b130 	.word	0x0801b130

0800c974 <rcl_subscription_init>:
 800c974:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c978:	b089      	sub	sp, #36	@ 0x24
 800c97a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800c97c:	b1d6      	cbz	r6, 800c9b4 <rcl_subscription_init+0x40>
 800c97e:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 800c982:	4604      	mov	r4, r0
 800c984:	4648      	mov	r0, r9
 800c986:	460d      	mov	r5, r1
 800c988:	4690      	mov	r8, r2
 800c98a:	461f      	mov	r7, r3
 800c98c:	f001 fbe4 	bl	800e158 <rcutils_allocator_is_valid>
 800c990:	b180      	cbz	r0, 800c9b4 <rcl_subscription_init+0x40>
 800c992:	b17c      	cbz	r4, 800c9b4 <rcl_subscription_init+0x40>
 800c994:	4628      	mov	r0, r5
 800c996:	f7ff fe51 	bl	800c63c <rcl_node_is_valid>
 800c99a:	2800      	cmp	r0, #0
 800c99c:	d054      	beq.n	800ca48 <rcl_subscription_init+0xd4>
 800c99e:	f1b8 0f00 	cmp.w	r8, #0
 800c9a2:	d007      	beq.n	800c9b4 <rcl_subscription_init+0x40>
 800c9a4:	b137      	cbz	r7, 800c9b4 <rcl_subscription_init+0x40>
 800c9a6:	6823      	ldr	r3, [r4, #0]
 800c9a8:	b14b      	cbz	r3, 800c9be <rcl_subscription_init+0x4a>
 800c9aa:	2764      	movs	r7, #100	@ 0x64
 800c9ac:	4638      	mov	r0, r7
 800c9ae:	b009      	add	sp, #36	@ 0x24
 800c9b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c9b4:	270b      	movs	r7, #11
 800c9b6:	4638      	mov	r0, r7
 800c9b8:	b009      	add	sp, #36	@ 0x24
 800c9ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c9be:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800c9c2:	aa07      	add	r2, sp, #28
 800c9c4:	9205      	str	r2, [sp, #20]
 800c9c6:	9307      	str	r3, [sp, #28]
 800c9c8:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 800c9cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c9d0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c9d4:	4639      	mov	r1, r7
 800c9d6:	e899 000c 	ldmia.w	r9, {r2, r3}
 800c9da:	4628      	mov	r0, r5
 800c9dc:	f008 f9ea 	bl	8014db4 <rcl_node_resolve_name>
 800c9e0:	4607      	mov	r7, r0
 800c9e2:	2800      	cmp	r0, #0
 800c9e4:	d15f      	bne.n	800caa6 <rcl_subscription_init+0x132>
 800c9e6:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 800c9ea:	21c8      	movs	r1, #200	@ 0xc8
 800c9ec:	2001      	movs	r0, #1
 800c9ee:	4798      	blx	r3
 800c9f0:	6020      	str	r0, [r4, #0]
 800c9f2:	2800      	cmp	r0, #0
 800c9f4:	d05d      	beq.n	800cab2 <rcl_subscription_init+0x13e>
 800c9f6:	4628      	mov	r0, r5
 800c9f8:	f7ff fe42 	bl	800c680 <rcl_node_get_rmw_handle>
 800c9fc:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 800ca00:	9300      	str	r3, [sp, #0]
 800ca02:	9a07      	ldr	r2, [sp, #28]
 800ca04:	6827      	ldr	r7, [r4, #0]
 800ca06:	4641      	mov	r1, r8
 800ca08:	4633      	mov	r3, r6
 800ca0a:	f002 fd9d 	bl	800f548 <rmw_create_subscription>
 800ca0e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 800ca12:	6827      	ldr	r7, [r4, #0]
 800ca14:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 800ca18:	b348      	cbz	r0, 800ca6e <rcl_subscription_init+0xfa>
 800ca1a:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 800ca1e:	f002 fe75 	bl	800f70c <rmw_subscription_get_actual_qos>
 800ca22:	4607      	mov	r7, r0
 800ca24:	b9a8      	cbnz	r0, 800ca52 <rcl_subscription_init+0xde>
 800ca26:	6820      	ldr	r0, [r4, #0]
 800ca28:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800ca2c:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 800ca30:	2270      	movs	r2, #112	@ 0x70
 800ca32:	4631      	mov	r1, r6
 800ca34:	f00c ffb7 	bl	80199a6 <memcpy>
 800ca38:	9807      	ldr	r0, [sp, #28]
 800ca3a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800ca3c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800ca3e:	4798      	blx	r3
 800ca40:	4638      	mov	r0, r7
 800ca42:	b009      	add	sp, #36	@ 0x24
 800ca44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca48:	27c8      	movs	r7, #200	@ 0xc8
 800ca4a:	4638      	mov	r0, r7
 800ca4c:	b009      	add	sp, #36	@ 0x24
 800ca4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca52:	6827      	ldr	r7, [r4, #0]
 800ca54:	b32f      	cbz	r7, 800caa2 <rcl_subscription_init+0x12e>
 800ca56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ca5a:	b14b      	cbz	r3, 800ca70 <rcl_subscription_init+0xfc>
 800ca5c:	4628      	mov	r0, r5
 800ca5e:	f7ff fe0f 	bl	800c680 <rcl_node_get_rmw_handle>
 800ca62:	6823      	ldr	r3, [r4, #0]
 800ca64:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800ca68:	f002 fe60 	bl	800f72c <rmw_destroy_subscription>
 800ca6c:	6827      	ldr	r7, [r4, #0]
 800ca6e:	b197      	cbz	r7, 800ca96 <rcl_subscription_init+0x122>
 800ca70:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 800ca74:	4628      	mov	r0, r5
 800ca76:	f001 fb6f 	bl	800e158 <rcutils_allocator_is_valid>
 800ca7a:	b158      	cbz	r0, 800ca94 <rcl_subscription_init+0x120>
 800ca7c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ca7e:	b148      	cbz	r0, 800ca94 <rcl_subscription_init+0x120>
 800ca80:	4629      	mov	r1, r5
 800ca82:	f001 fe25 	bl	800e6d0 <rmw_subscription_content_filter_options_fini>
 800ca86:	4605      	mov	r5, r0
 800ca88:	b9b8      	cbnz	r0, 800caba <rcl_subscription_init+0x146>
 800ca8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca8c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800ca8e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ca90:	4798      	blx	r3
 800ca92:	66fd      	str	r5, [r7, #108]	@ 0x6c
 800ca94:	6827      	ldr	r7, [r4, #0]
 800ca96:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800ca98:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800ca9a:	4638      	mov	r0, r7
 800ca9c:	4798      	blx	r3
 800ca9e:	2300      	movs	r3, #0
 800caa0:	6023      	str	r3, [r4, #0]
 800caa2:	2701      	movs	r7, #1
 800caa4:	e7c8      	b.n	800ca38 <rcl_subscription_init+0xc4>
 800caa6:	2867      	cmp	r0, #103	@ 0x67
 800caa8:	d0c6      	beq.n	800ca38 <rcl_subscription_init+0xc4>
 800caaa:	2869      	cmp	r0, #105	@ 0x69
 800caac:	d003      	beq.n	800cab6 <rcl_subscription_init+0x142>
 800caae:	280a      	cmp	r0, #10
 800cab0:	d1f7      	bne.n	800caa2 <rcl_subscription_init+0x12e>
 800cab2:	270a      	movs	r7, #10
 800cab4:	e7c0      	b.n	800ca38 <rcl_subscription_init+0xc4>
 800cab6:	2767      	movs	r7, #103	@ 0x67
 800cab8:	e7be      	b.n	800ca38 <rcl_subscription_init+0xc4>
 800caba:	f007 ff2b 	bl	8014914 <rcl_convert_rmw_ret_to_rcl_ret>
 800cabe:	6827      	ldr	r7, [r4, #0]
 800cac0:	e7e9      	b.n	800ca96 <rcl_subscription_init+0x122>
 800cac2:	bf00      	nop

0800cac4 <rcl_subscription_fini>:
 800cac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cac8:	2800      	cmp	r0, #0
 800caca:	d039      	beq.n	800cb40 <rcl_subscription_fini+0x7c>
 800cacc:	4604      	mov	r4, r0
 800cace:	4608      	mov	r0, r1
 800cad0:	460d      	mov	r5, r1
 800cad2:	f7ff fdab 	bl	800c62c <rcl_node_is_valid_except_context>
 800cad6:	2800      	cmp	r0, #0
 800cad8:	d037      	beq.n	800cb4a <rcl_subscription_fini+0x86>
 800cada:	6823      	ldr	r3, [r4, #0]
 800cadc:	b363      	cbz	r3, 800cb38 <rcl_subscription_fini+0x74>
 800cade:	4628      	mov	r0, r5
 800cae0:	6d5f      	ldr	r7, [r3, #84]	@ 0x54
 800cae2:	f8d3 8060 	ldr.w	r8, [r3, #96]	@ 0x60
 800cae6:	f7ff fdcb 	bl	800c680 <rcl_node_get_rmw_handle>
 800caea:	b390      	cbz	r0, 800cb52 <rcl_subscription_fini+0x8e>
 800caec:	6823      	ldr	r3, [r4, #0]
 800caee:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800caf2:	f002 fe1b 	bl	800f72c <rmw_destroy_subscription>
 800caf6:	6826      	ldr	r6, [r4, #0]
 800caf8:	1e05      	subs	r5, r0, #0
 800cafa:	bf18      	it	ne
 800cafc:	2501      	movne	r5, #1
 800cafe:	b37e      	cbz	r6, 800cb60 <rcl_subscription_fini+0x9c>
 800cb00:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 800cb04:	4648      	mov	r0, r9
 800cb06:	f001 fb27 	bl	800e158 <rcutils_allocator_is_valid>
 800cb0a:	b358      	cbz	r0, 800cb64 <rcl_subscription_fini+0xa0>
 800cb0c:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 800cb0e:	b150      	cbz	r0, 800cb26 <rcl_subscription_fini+0x62>
 800cb10:	4649      	mov	r1, r9
 800cb12:	f001 fddd 	bl	800e6d0 <rmw_subscription_content_filter_options_fini>
 800cb16:	4681      	mov	r9, r0
 800cb18:	b9e8      	cbnz	r0, 800cb56 <rcl_subscription_fini+0x92>
 800cb1a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800cb1c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800cb1e:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 800cb20:	4798      	blx	r3
 800cb22:	f8c6 906c 	str.w	r9, [r6, #108]	@ 0x6c
 800cb26:	6826      	ldr	r6, [r4, #0]
 800cb28:	4630      	mov	r0, r6
 800cb2a:	4641      	mov	r1, r8
 800cb2c:	47b8      	blx	r7
 800cb2e:	2300      	movs	r3, #0
 800cb30:	6023      	str	r3, [r4, #0]
 800cb32:	4628      	mov	r0, r5
 800cb34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb38:	461d      	mov	r5, r3
 800cb3a:	4628      	mov	r0, r5
 800cb3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb40:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 800cb44:	4628      	mov	r0, r5
 800cb46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb4a:	25c8      	movs	r5, #200	@ 0xc8
 800cb4c:	4628      	mov	r0, r5
 800cb4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb52:	250b      	movs	r5, #11
 800cb54:	e7f1      	b.n	800cb3a <rcl_subscription_fini+0x76>
 800cb56:	f007 fedd 	bl	8014914 <rcl_convert_rmw_ret_to_rcl_ret>
 800cb5a:	6826      	ldr	r6, [r4, #0]
 800cb5c:	2800      	cmp	r0, #0
 800cb5e:	d0e3      	beq.n	800cb28 <rcl_subscription_fini+0x64>
 800cb60:	2501      	movs	r5, #1
 800cb62:	e7e1      	b.n	800cb28 <rcl_subscription_fini+0x64>
 800cb64:	6826      	ldr	r6, [r4, #0]
 800cb66:	2501      	movs	r5, #1
 800cb68:	e7de      	b.n	800cb28 <rcl_subscription_fini+0x64>
 800cb6a:	bf00      	nop

0800cb6c <rcl_subscription_get_default_options>:
 800cb6c:	b570      	push	{r4, r5, r6, lr}
 800cb6e:	4d14      	ldr	r5, [pc, #80]	@ (800cbc0 <rcl_subscription_get_default_options+0x54>)
 800cb70:	4914      	ldr	r1, [pc, #80]	@ (800cbc4 <rcl_subscription_get_default_options+0x58>)
 800cb72:	b08a      	sub	sp, #40	@ 0x28
 800cb74:	4604      	mov	r4, r0
 800cb76:	2250      	movs	r2, #80	@ 0x50
 800cb78:	4628      	mov	r0, r5
 800cb7a:	f00c ff14 	bl	80199a6 <memcpy>
 800cb7e:	a804      	add	r0, sp, #16
 800cb80:	f001 fadc 	bl	800e13c <rcutils_get_default_allocator>
 800cb84:	f10d 0c10 	add.w	ip, sp, #16
 800cb88:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cb8c:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800cb90:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cb94:	466e      	mov	r6, sp
 800cb96:	f8dc 3000 	ldr.w	r3, [ip]
 800cb9a:	f8ce 3000 	str.w	r3, [lr]
 800cb9e:	4630      	mov	r0, r6
 800cba0:	f001 fdb0 	bl	800e704 <rmw_get_default_subscription_options>
 800cba4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800cba8:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800cbac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cbb0:	2270      	movs	r2, #112	@ 0x70
 800cbb2:	4629      	mov	r1, r5
 800cbb4:	4620      	mov	r0, r4
 800cbb6:	f00c fef6 	bl	80199a6 <memcpy>
 800cbba:	4620      	mov	r0, r4
 800cbbc:	b00a      	add	sp, #40	@ 0x28
 800cbbe:	bd70      	pop	{r4, r5, r6, pc}
 800cbc0:	2000ce88 	.word	0x2000ce88
 800cbc4:	0801b138 	.word	0x0801b138

0800cbc8 <rcl_take>:
 800cbc8:	2800      	cmp	r0, #0
 800cbca:	d04a      	beq.n	800cc62 <rcl_take+0x9a>
 800cbcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbd0:	4604      	mov	r4, r0
 800cbd2:	6800      	ldr	r0, [r0, #0]
 800cbd4:	b0a4      	sub	sp, #144	@ 0x90
 800cbd6:	2800      	cmp	r0, #0
 800cbd8:	d03b      	beq.n	800cc52 <rcl_take+0x8a>
 800cbda:	461f      	mov	r7, r3
 800cbdc:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d036      	beq.n	800cc52 <rcl_take+0x8a>
 800cbe4:	460e      	mov	r6, r1
 800cbe6:	2900      	cmp	r1, #0
 800cbe8:	d039      	beq.n	800cc5e <rcl_take+0x96>
 800cbea:	4615      	mov	r5, r2
 800cbec:	2a00      	cmp	r2, #0
 800cbee:	d03c      	beq.n	800cc6a <rcl_take+0xa2>
 800cbf0:	a802      	add	r0, sp, #8
 800cbf2:	f001 fd8d 	bl	800e710 <rmw_get_zero_initialized_message_info>
 800cbf6:	f10d 0c08 	add.w	ip, sp, #8
 800cbfa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cbfe:	46ae      	mov	lr, r5
 800cc00:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cc04:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cc08:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cc0c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cc10:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cc14:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800cc18:	f04f 0800 	mov.w	r8, #0
 800cc1c:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 800cc20:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 800cc24:	6822      	ldr	r2, [r4, #0]
 800cc26:	462b      	mov	r3, r5
 800cc28:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 800cc2c:	9700      	str	r7, [sp, #0]
 800cc2e:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 800cc32:	4631      	mov	r1, r6
 800cc34:	f002 fdda 	bl	800f7ec <rmw_take_with_info>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	b9c0      	cbnz	r0, 800cc6e <rcl_take+0xa6>
 800cc3c:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 800cc40:	f240 1291 	movw	r2, #401	@ 0x191
 800cc44:	2900      	cmp	r1, #0
 800cc46:	bf08      	it	eq
 800cc48:	4613      	moveq	r3, r2
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	b024      	add	sp, #144	@ 0x90
 800cc4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc52:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800cc56:	4618      	mov	r0, r3
 800cc58:	b024      	add	sp, #144	@ 0x90
 800cc5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc5e:	230b      	movs	r3, #11
 800cc60:	e7f3      	b.n	800cc4a <rcl_take+0x82>
 800cc62:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800cc66:	4618      	mov	r0, r3
 800cc68:	4770      	bx	lr
 800cc6a:	ad14      	add	r5, sp, #80	@ 0x50
 800cc6c:	e7c0      	b.n	800cbf0 <rcl_take+0x28>
 800cc6e:	f007 fe51 	bl	8014914 <rcl_convert_rmw_ret_to_rcl_ret>
 800cc72:	4603      	mov	r3, r0
 800cc74:	e7e9      	b.n	800cc4a <rcl_take+0x82>
 800cc76:	bf00      	nop

0800cc78 <rcl_subscription_get_rmw_handle>:
 800cc78:	b118      	cbz	r0, 800cc82 <rcl_subscription_get_rmw_handle+0xa>
 800cc7a:	6800      	ldr	r0, [r0, #0]
 800cc7c:	b108      	cbz	r0, 800cc82 <rcl_subscription_get_rmw_handle+0xa>
 800cc7e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800cc82:	4770      	bx	lr

0800cc84 <rcl_subscription_is_valid>:
 800cc84:	b130      	cbz	r0, 800cc94 <rcl_subscription_is_valid+0x10>
 800cc86:	6800      	ldr	r0, [r0, #0]
 800cc88:	b120      	cbz	r0, 800cc94 <rcl_subscription_is_valid+0x10>
 800cc8a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800cc8e:	3800      	subs	r0, #0
 800cc90:	bf18      	it	ne
 800cc92:	2001      	movne	r0, #1
 800cc94:	4770      	bx	lr
 800cc96:	bf00      	nop

0800cc98 <_rcl_timer_time_jump>:
 800cc98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc9c:	4605      	mov	r5, r0
 800cc9e:	b084      	sub	sp, #16
 800cca0:	4614      	mov	r4, r2
 800cca2:	b131      	cbz	r1, 800ccb2 <_rcl_timer_time_jump+0x1a>
 800cca4:	7803      	ldrb	r3, [r0, #0]
 800cca6:	3b02      	subs	r3, #2
 800cca8:	2b01      	cmp	r3, #1
 800ccaa:	d93f      	bls.n	800cd2c <_rcl_timer_time_jump+0x94>
 800ccac:	b004      	add	sp, #16
 800ccae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccb2:	6813      	ldr	r3, [r2, #0]
 800ccb4:	a902      	add	r1, sp, #8
 800ccb6:	6818      	ldr	r0, [r3, #0]
 800ccb8:	f008 fa4e 	bl	8015158 <rcl_clock_get_now>
 800ccbc:	2800      	cmp	r0, #0
 800ccbe:	d1f5      	bne.n	800ccac <_rcl_timer_time_jump+0x14>
 800ccc0:	6820      	ldr	r0, [r4, #0]
 800ccc2:	2105      	movs	r1, #5
 800ccc4:	3020      	adds	r0, #32
 800ccc6:	f001 fa55 	bl	800e174 <__atomic_load_8>
 800ccca:	6823      	ldr	r3, [r4, #0]
 800cccc:	4681      	mov	r9, r0
 800ccce:	4688      	mov	r8, r1
 800ccd0:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800ccd4:	2105      	movs	r1, #5
 800ccd6:	f001 fa4d 	bl	800e174 <__atomic_load_8>
 800ccda:	4607      	mov	r7, r0
 800ccdc:	6820      	ldr	r0, [r4, #0]
 800ccde:	460e      	mov	r6, r1
 800cce0:	3018      	adds	r0, #24
 800cce2:	2105      	movs	r1, #5
 800cce4:	f001 fa46 	bl	800e174 <__atomic_load_8>
 800cce8:	782b      	ldrb	r3, [r5, #0]
 800ccea:	9a02      	ldr	r2, [sp, #8]
 800ccec:	3b02      	subs	r3, #2
 800ccee:	2b01      	cmp	r3, #1
 800ccf0:	460d      	mov	r5, r1
 800ccf2:	9b03      	ldr	r3, [sp, #12]
 800ccf4:	4682      	mov	sl, r0
 800ccf6:	d937      	bls.n	800cd68 <_rcl_timer_time_jump+0xd0>
 800ccf8:	42ba      	cmp	r2, r7
 800ccfa:	eb73 0106 	sbcs.w	r1, r3, r6
 800ccfe:	da5f      	bge.n	800cdc0 <_rcl_timer_time_jump+0x128>
 800cd00:	454a      	cmp	r2, r9
 800cd02:	eb73 0108 	sbcs.w	r1, r3, r8
 800cd06:	dad1      	bge.n	800ccac <_rcl_timer_time_jump+0x14>
 800cd08:	6820      	ldr	r0, [r4, #0]
 800cd0a:	eb1a 0202 	adds.w	r2, sl, r2
 800cd0e:	eb43 0305 	adc.w	r3, r3, r5
 800cd12:	2505      	movs	r5, #5
 800cd14:	3028      	adds	r0, #40	@ 0x28
 800cd16:	9500      	str	r5, [sp, #0]
 800cd18:	f001 fa62 	bl	800e1e0 <__atomic_store_8>
 800cd1c:	6820      	ldr	r0, [r4, #0]
 800cd1e:	9500      	str	r5, [sp, #0]
 800cd20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd24:	3020      	adds	r0, #32
 800cd26:	f001 fa5b 	bl	800e1e0 <__atomic_store_8>
 800cd2a:	e7bf      	b.n	800ccac <_rcl_timer_time_jump+0x14>
 800cd2c:	6813      	ldr	r3, [r2, #0]
 800cd2e:	a902      	add	r1, sp, #8
 800cd30:	6818      	ldr	r0, [r3, #0]
 800cd32:	f008 fa11 	bl	8015158 <rcl_clock_get_now>
 800cd36:	2800      	cmp	r0, #0
 800cd38:	d1b8      	bne.n	800ccac <_rcl_timer_time_jump+0x14>
 800cd3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd3e:	4313      	orrs	r3, r2
 800cd40:	d0b4      	beq.n	800ccac <_rcl_timer_time_jump+0x14>
 800cd42:	6820      	ldr	r0, [r4, #0]
 800cd44:	2105      	movs	r1, #5
 800cd46:	3028      	adds	r0, #40	@ 0x28
 800cd48:	f001 fa14 	bl	800e174 <__atomic_load_8>
 800cd4c:	9d02      	ldr	r5, [sp, #8]
 800cd4e:	9b03      	ldr	r3, [sp, #12]
 800cd50:	4602      	mov	r2, r0
 800cd52:	6820      	ldr	r0, [r4, #0]
 800cd54:	1b52      	subs	r2, r2, r5
 800cd56:	f04f 0405 	mov.w	r4, #5
 800cd5a:	9400      	str	r4, [sp, #0]
 800cd5c:	eb61 0303 	sbc.w	r3, r1, r3
 800cd60:	3030      	adds	r0, #48	@ 0x30
 800cd62:	f001 fa3d 	bl	800e1e0 <__atomic_store_8>
 800cd66:	e7a1      	b.n	800ccac <_rcl_timer_time_jump+0x14>
 800cd68:	4313      	orrs	r3, r2
 800cd6a:	d09f      	beq.n	800ccac <_rcl_timer_time_jump+0x14>
 800cd6c:	6820      	ldr	r0, [r4, #0]
 800cd6e:	f04f 0805 	mov.w	r8, #5
 800cd72:	2300      	movs	r3, #0
 800cd74:	f8cd 8000 	str.w	r8, [sp]
 800cd78:	3030      	adds	r0, #48	@ 0x30
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	f001 fa66 	bl	800e24c <__atomic_exchange_8>
 800cd80:	ea51 0300 	orrs.w	r3, r1, r0
 800cd84:	4606      	mov	r6, r0
 800cd86:	460f      	mov	r7, r1
 800cd88:	d090      	beq.n	800ccac <_rcl_timer_time_jump+0x14>
 800cd8a:	9a02      	ldr	r2, [sp, #8]
 800cd8c:	9b03      	ldr	r3, [sp, #12]
 800cd8e:	f8cd 8000 	str.w	r8, [sp]
 800cd92:	1a12      	subs	r2, r2, r0
 800cd94:	6820      	ldr	r0, [r4, #0]
 800cd96:	eb63 0301 	sbc.w	r3, r3, r1
 800cd9a:	eb12 020a 	adds.w	r2, r2, sl
 800cd9e:	eb43 0305 	adc.w	r3, r3, r5
 800cda2:	3028      	adds	r0, #40	@ 0x28
 800cda4:	f001 fa1c 	bl	800e1e0 <__atomic_store_8>
 800cda8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cdac:	f8cd 8000 	str.w	r8, [sp]
 800cdb0:	6820      	ldr	r0, [r4, #0]
 800cdb2:	1b92      	subs	r2, r2, r6
 800cdb4:	eb63 0307 	sbc.w	r3, r3, r7
 800cdb8:	3020      	adds	r0, #32
 800cdba:	f001 fa11 	bl	800e1e0 <__atomic_store_8>
 800cdbe:	e775      	b.n	800ccac <_rcl_timer_time_jump+0x14>
 800cdc0:	6820      	ldr	r0, [r4, #0]
 800cdc2:	3008      	adds	r0, #8
 800cdc4:	f007 feb2 	bl	8014b2c <rcl_trigger_guard_condition>
 800cdc8:	e770      	b.n	800ccac <_rcl_timer_time_jump+0x14>
 800cdca:	bf00      	nop

0800cdcc <rcl_get_zero_initialized_timer>:
 800cdcc:	4b01      	ldr	r3, [pc, #4]	@ (800cdd4 <rcl_get_zero_initialized_timer+0x8>)
 800cdce:	6818      	ldr	r0, [r3, #0]
 800cdd0:	4770      	bx	lr
 800cdd2:	bf00      	nop
 800cdd4:	0801b188 	.word	0x0801b188

0800cdd8 <rcl_timer_init>:
 800cdd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cddc:	b0aa      	sub	sp, #168	@ 0xa8
 800cdde:	4604      	mov	r4, r0
 800cde0:	a835      	add	r0, sp, #212	@ 0xd4
 800cde2:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 800cde6:	460d      	mov	r5, r1
 800cde8:	4692      	mov	sl, r2
 800cdea:	f001 f9b5 	bl	800e158 <rcutils_allocator_is_valid>
 800cdee:	2800      	cmp	r0, #0
 800cdf0:	d064      	beq.n	800cebc <rcl_timer_init+0xe4>
 800cdf2:	2c00      	cmp	r4, #0
 800cdf4:	d062      	beq.n	800cebc <rcl_timer_init+0xe4>
 800cdf6:	2d00      	cmp	r5, #0
 800cdf8:	d060      	beq.n	800cebc <rcl_timer_init+0xe4>
 800cdfa:	2f00      	cmp	r7, #0
 800cdfc:	db5e      	blt.n	800cebc <rcl_timer_init+0xe4>
 800cdfe:	6823      	ldr	r3, [r4, #0]
 800ce00:	b123      	cbz	r3, 800ce0c <rcl_timer_init+0x34>
 800ce02:	2664      	movs	r6, #100	@ 0x64
 800ce04:	4630      	mov	r0, r6
 800ce06:	b02a      	add	sp, #168	@ 0xa8
 800ce08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce0c:	a908      	add	r1, sp, #32
 800ce0e:	4628      	mov	r0, r5
 800ce10:	f008 f9a2 	bl	8015158 <rcl_clock_get_now>
 800ce14:	4606      	mov	r6, r0
 800ce16:	2800      	cmp	r0, #0
 800ce18:	d1f4      	bne.n	800ce04 <rcl_timer_init+0x2c>
 800ce1a:	ae06      	add	r6, sp, #24
 800ce1c:	4630      	mov	r0, r6
 800ce1e:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 800ce22:	f007 fd8b 	bl	801493c <rcl_get_zero_initialized_guard_condition>
 800ce26:	e896 0003 	ldmia.w	r6, {r0, r1}
 800ce2a:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 800ce2e:	ae0b      	add	r6, sp, #44	@ 0x2c
 800ce30:	e889 0003 	stmia.w	r9, {r0, r1}
 800ce34:	4630      	mov	r0, r6
 800ce36:	f007 fe5d 	bl	8014af4 <rcl_guard_condition_get_default_options>
 800ce3a:	ab0d      	add	r3, sp, #52	@ 0x34
 800ce3c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ce40:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ce44:	4651      	mov	r1, sl
 800ce46:	e896 000c 	ldmia.w	r6, {r2, r3}
 800ce4a:	4648      	mov	r0, r9
 800ce4c:	f007 fd80 	bl	8014950 <rcl_guard_condition_init>
 800ce50:	4606      	mov	r6, r0
 800ce52:	2800      	cmp	r0, #0
 800ce54:	d1d6      	bne.n	800ce04 <rcl_timer_init+0x2c>
 800ce56:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ce58:	781b      	ldrb	r3, [r3, #0]
 800ce5a:	2b01      	cmp	r3, #1
 800ce5c:	d033      	beq.n	800cec6 <rcl_timer_init+0xee>
 800ce5e:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 800ce60:	911a      	str	r1, [sp, #104]	@ 0x68
 800ce62:	4642      	mov	r2, r8
 800ce64:	463b      	mov	r3, r7
 800ce66:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 800ce6a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ce6e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800cf20 <rcl_timer_init+0x148>
 800ce72:	eb12 0008 	adds.w	r0, r2, r8
 800ce76:	eb47 0103 	adc.w	r1, r7, r3
 800ce7a:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 800ce7e:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 800ce82:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 800ce86:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 800ce8a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ce8e:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 800ce92:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ce96:	f8de 3000 	ldr.w	r3, [lr]
 800ce9a:	f8cc 3000 	str.w	r3, [ip]
 800ce9e:	f04f 0a00 	mov.w	sl, #0
 800cea2:	4619      	mov	r1, r3
 800cea4:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 800cea8:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800ceaa:	2050      	movs	r0, #80	@ 0x50
 800ceac:	4798      	blx	r3
 800ceae:	6020      	str	r0, [r4, #0]
 800ceb0:	b358      	cbz	r0, 800cf0a <rcl_timer_init+0x132>
 800ceb2:	2250      	movs	r2, #80	@ 0x50
 800ceb4:	a916      	add	r1, sp, #88	@ 0x58
 800ceb6:	f00c fd76 	bl	80199a6 <memcpy>
 800ceba:	e7a3      	b.n	800ce04 <rcl_timer_init+0x2c>
 800cebc:	260b      	movs	r6, #11
 800cebe:	4630      	mov	r0, r6
 800cec0:	b02a      	add	sp, #168	@ 0xa8
 800cec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cec6:	2001      	movs	r0, #1
 800cec8:	2100      	movs	r1, #0
 800ceca:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 800cece:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ced2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800ced6:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 800ceda:	4a13      	ldr	r2, [pc, #76]	@ (800cf28 <rcl_timer_init+0x150>)
 800cedc:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800cee0:	9405      	str	r4, [sp, #20]
 800cee2:	9204      	str	r2, [sp, #16]
 800cee4:	ab12      	add	r3, sp, #72	@ 0x48
 800cee6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cee8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ceec:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 800cef0:	e89c 000c 	ldmia.w	ip, {r2, r3}
 800cef4:	4628      	mov	r0, r5
 800cef6:	f008 f93b 	bl	8015170 <rcl_clock_add_jump_callback>
 800cefa:	4682      	mov	sl, r0
 800cefc:	2800      	cmp	r0, #0
 800cefe:	d0ae      	beq.n	800ce5e <rcl_timer_init+0x86>
 800cf00:	4648      	mov	r0, r9
 800cf02:	f007 fdd1 	bl	8014aa8 <rcl_guard_condition_fini>
 800cf06:	4656      	mov	r6, sl
 800cf08:	e77c      	b.n	800ce04 <rcl_timer_init+0x2c>
 800cf0a:	4648      	mov	r0, r9
 800cf0c:	f007 fdcc 	bl	8014aa8 <rcl_guard_condition_fini>
 800cf10:	4905      	ldr	r1, [pc, #20]	@ (800cf28 <rcl_timer_init+0x150>)
 800cf12:	4622      	mov	r2, r4
 800cf14:	4628      	mov	r0, r5
 800cf16:	f008 f98d 	bl	8015234 <rcl_clock_remove_jump_callback>
 800cf1a:	260a      	movs	r6, #10
 800cf1c:	e772      	b.n	800ce04 <rcl_timer_init+0x2c>
 800cf1e:	bf00      	nop
	...
 800cf28:	0800cc99 	.word	0x0800cc99

0800cf2c <rcl_timer_fini>:
 800cf2c:	b310      	cbz	r0, 800cf74 <rcl_timer_fini+0x48>
 800cf2e:	6803      	ldr	r3, [r0, #0]
 800cf30:	b570      	push	{r4, r5, r6, lr}
 800cf32:	4604      	mov	r4, r0
 800cf34:	b1b3      	cbz	r3, 800cf64 <rcl_timer_fini+0x38>
 800cf36:	f3bf 8f5b 	dmb	ish
 800cf3a:	2201      	movs	r2, #1
 800cf3c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800cf40:	f3bf 8f5b 	dmb	ish
 800cf44:	6803      	ldr	r3, [r0, #0]
 800cf46:	6818      	ldr	r0, [r3, #0]
 800cf48:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 800cf4a:	7802      	ldrb	r2, [r0, #0]
 800cf4c:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 800cf4e:	2a01      	cmp	r2, #1
 800cf50:	d00a      	beq.n	800cf68 <rcl_timer_fini+0x3c>
 800cf52:	f103 0008 	add.w	r0, r3, #8
 800cf56:	f007 fda7 	bl	8014aa8 <rcl_guard_condition_fini>
 800cf5a:	6820      	ldr	r0, [r4, #0]
 800cf5c:	4631      	mov	r1, r6
 800cf5e:	47a8      	blx	r5
 800cf60:	2300      	movs	r3, #0
 800cf62:	6023      	str	r3, [r4, #0]
 800cf64:	2000      	movs	r0, #0
 800cf66:	bd70      	pop	{r4, r5, r6, pc}
 800cf68:	4903      	ldr	r1, [pc, #12]	@ (800cf78 <rcl_timer_fini+0x4c>)
 800cf6a:	4622      	mov	r2, r4
 800cf6c:	f008 f962 	bl	8015234 <rcl_clock_remove_jump_callback>
 800cf70:	6823      	ldr	r3, [r4, #0]
 800cf72:	e7ee      	b.n	800cf52 <rcl_timer_fini+0x26>
 800cf74:	2000      	movs	r0, #0
 800cf76:	4770      	bx	lr
 800cf78:	0800cc99 	.word	0x0800cc99

0800cf7c <rcl_timer_call>:
 800cf7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf80:	b087      	sub	sp, #28
 800cf82:	2800      	cmp	r0, #0
 800cf84:	d06d      	beq.n	800d062 <rcl_timer_call+0xe6>
 800cf86:	6803      	ldr	r3, [r0, #0]
 800cf88:	4604      	mov	r4, r0
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d063      	beq.n	800d056 <rcl_timer_call+0xda>
 800cf8e:	f3bf 8f5b 	dmb	ish
 800cf92:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800cf96:	f3bf 8f5b 	dmb	ish
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d150      	bne.n	800d040 <rcl_timer_call+0xc4>
 800cf9e:	6803      	ldr	r3, [r0, #0]
 800cfa0:	a904      	add	r1, sp, #16
 800cfa2:	6818      	ldr	r0, [r3, #0]
 800cfa4:	f008 f8d8 	bl	8015158 <rcl_clock_get_now>
 800cfa8:	4605      	mov	r5, r0
 800cfaa:	2800      	cmp	r0, #0
 800cfac:	d14a      	bne.n	800d044 <rcl_timer_call+0xc8>
 800cfae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	db4a      	blt.n	800d04c <rcl_timer_call+0xd0>
 800cfb6:	6820      	ldr	r0, [r4, #0]
 800cfb8:	f04f 0a05 	mov.w	sl, #5
 800cfbc:	f8cd a000 	str.w	sl, [sp]
 800cfc0:	3020      	adds	r0, #32
 800cfc2:	f001 f943 	bl	800e24c <__atomic_exchange_8>
 800cfc6:	6823      	ldr	r3, [r4, #0]
 800cfc8:	f3bf 8f5b 	dmb	ish
 800cfcc:	4680      	mov	r8, r0
 800cfce:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800cfd2:	f3bf 8f5b 	dmb	ish
 800cfd6:	6820      	ldr	r0, [r4, #0]
 800cfd8:	4689      	mov	r9, r1
 800cfda:	3028      	adds	r0, #40	@ 0x28
 800cfdc:	4651      	mov	r1, sl
 800cfde:	f001 f8c9 	bl	800e174 <__atomic_load_8>
 800cfe2:	4606      	mov	r6, r0
 800cfe4:	6820      	ldr	r0, [r4, #0]
 800cfe6:	460f      	mov	r7, r1
 800cfe8:	3018      	adds	r0, #24
 800cfea:	4651      	mov	r1, sl
 800cfec:	f001 f8c2 	bl	800e174 <__atomic_load_8>
 800cff0:	1836      	adds	r6, r6, r0
 800cff2:	4602      	mov	r2, r0
 800cff4:	4682      	mov	sl, r0
 800cff6:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 800cffa:	eb47 0701 	adc.w	r7, r7, r1
 800cffe:	4286      	cmp	r6, r0
 800d000:	460b      	mov	r3, r1
 800d002:	eb77 010c 	sbcs.w	r1, r7, ip
 800d006:	da04      	bge.n	800d012 <rcl_timer_call+0x96>
 800d008:	ea53 0102 	orrs.w	r1, r3, r2
 800d00c:	d12e      	bne.n	800d06c <rcl_timer_call+0xf0>
 800d00e:	4606      	mov	r6, r0
 800d010:	4667      	mov	r7, ip
 800d012:	6820      	ldr	r0, [r4, #0]
 800d014:	2105      	movs	r1, #5
 800d016:	4632      	mov	r2, r6
 800d018:	463b      	mov	r3, r7
 800d01a:	3028      	adds	r0, #40	@ 0x28
 800d01c:	9100      	str	r1, [sp, #0]
 800d01e:	f001 f8df 	bl	800e1e0 <__atomic_store_8>
 800d022:	f1bb 0f00 	cmp.w	fp, #0
 800d026:	d00d      	beq.n	800d044 <rcl_timer_call+0xc8>
 800d028:	9a04      	ldr	r2, [sp, #16]
 800d02a:	9b05      	ldr	r3, [sp, #20]
 800d02c:	ebb2 0208 	subs.w	r2, r2, r8
 800d030:	4620      	mov	r0, r4
 800d032:	eb63 0309 	sbc.w	r3, r3, r9
 800d036:	47d8      	blx	fp
 800d038:	4628      	mov	r0, r5
 800d03a:	b007      	add	sp, #28
 800d03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d040:	f240 3521 	movw	r5, #801	@ 0x321
 800d044:	4628      	mov	r0, r5
 800d046:	b007      	add	sp, #28
 800d048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d04c:	2501      	movs	r5, #1
 800d04e:	4628      	mov	r0, r5
 800d050:	b007      	add	sp, #28
 800d052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d056:	f44f 7548 	mov.w	r5, #800	@ 0x320
 800d05a:	4628      	mov	r0, r5
 800d05c:	b007      	add	sp, #28
 800d05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d062:	250b      	movs	r5, #11
 800d064:	4628      	mov	r0, r5
 800d066:	b007      	add	sp, #28
 800d068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d06c:	1b80      	subs	r0, r0, r6
 800d06e:	eb6c 0107 	sbc.w	r1, ip, r7
 800d072:	3801      	subs	r0, #1
 800d074:	f161 0100 	sbc.w	r1, r1, #0
 800d078:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800d07c:	f7f3 fdd6 	bl	8000c2c <__aeabi_ldivmod>
 800d080:	9b02      	ldr	r3, [sp, #8]
 800d082:	3001      	adds	r0, #1
 800d084:	f141 0100 	adc.w	r1, r1, #0
 800d088:	fb00 f303 	mul.w	r3, r0, r3
 800d08c:	fb01 330a 	mla	r3, r1, sl, r3
 800d090:	fba0 0a0a 	umull	r0, sl, r0, sl
 800d094:	1986      	adds	r6, r0, r6
 800d096:	4453      	add	r3, sl
 800d098:	eb43 0707 	adc.w	r7, r3, r7
 800d09c:	e7b9      	b.n	800d012 <rcl_timer_call+0x96>
 800d09e:	bf00      	nop

0800d0a0 <rcl_timer_is_ready>:
 800d0a0:	b570      	push	{r4, r5, r6, lr}
 800d0a2:	b082      	sub	sp, #8
 800d0a4:	b378      	cbz	r0, 800d106 <rcl_timer_is_ready+0x66>
 800d0a6:	6803      	ldr	r3, [r0, #0]
 800d0a8:	4604      	mov	r4, r0
 800d0aa:	b383      	cbz	r3, 800d10e <rcl_timer_is_ready+0x6e>
 800d0ac:	460d      	mov	r5, r1
 800d0ae:	b351      	cbz	r1, 800d106 <rcl_timer_is_ready+0x66>
 800d0b0:	f3bf 8f5b 	dmb	ish
 800d0b4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d0b8:	f3bf 8f5b 	dmb	ish
 800d0bc:	b953      	cbnz	r3, 800d0d4 <rcl_timer_is_ready+0x34>
 800d0be:	6803      	ldr	r3, [r0, #0]
 800d0c0:	4669      	mov	r1, sp
 800d0c2:	6818      	ldr	r0, [r3, #0]
 800d0c4:	f008 f848 	bl	8015158 <rcl_clock_get_now>
 800d0c8:	4606      	mov	r6, r0
 800d0ca:	b140      	cbz	r0, 800d0de <rcl_timer_is_ready+0x3e>
 800d0cc:	f240 3321 	movw	r3, #801	@ 0x321
 800d0d0:	4298      	cmp	r0, r3
 800d0d2:	d101      	bne.n	800d0d8 <rcl_timer_is_ready+0x38>
 800d0d4:	2600      	movs	r6, #0
 800d0d6:	702e      	strb	r6, [r5, #0]
 800d0d8:	4630      	mov	r0, r6
 800d0da:	b002      	add	sp, #8
 800d0dc:	bd70      	pop	{r4, r5, r6, pc}
 800d0de:	6820      	ldr	r0, [r4, #0]
 800d0e0:	2105      	movs	r1, #5
 800d0e2:	3028      	adds	r0, #40	@ 0x28
 800d0e4:	f001 f846 	bl	800e174 <__atomic_load_8>
 800d0e8:	9b00      	ldr	r3, [sp, #0]
 800d0ea:	1ac0      	subs	r0, r0, r3
 800d0ec:	9b01      	ldr	r3, [sp, #4]
 800d0ee:	eb61 0103 	sbc.w	r1, r1, r3
 800d0f2:	2801      	cmp	r0, #1
 800d0f4:	f171 0300 	sbcs.w	r3, r1, #0
 800d0f8:	bfb4      	ite	lt
 800d0fa:	2301      	movlt	r3, #1
 800d0fc:	2300      	movge	r3, #0
 800d0fe:	4630      	mov	r0, r6
 800d100:	702b      	strb	r3, [r5, #0]
 800d102:	b002      	add	sp, #8
 800d104:	bd70      	pop	{r4, r5, r6, pc}
 800d106:	260b      	movs	r6, #11
 800d108:	4630      	mov	r0, r6
 800d10a:	b002      	add	sp, #8
 800d10c:	bd70      	pop	{r4, r5, r6, pc}
 800d10e:	f44f 7648 	mov.w	r6, #800	@ 0x320
 800d112:	e7e1      	b.n	800d0d8 <rcl_timer_is_ready+0x38>

0800d114 <rcl_timer_get_time_until_next_call>:
 800d114:	b570      	push	{r4, r5, r6, lr}
 800d116:	b082      	sub	sp, #8
 800d118:	b330      	cbz	r0, 800d168 <rcl_timer_get_time_until_next_call+0x54>
 800d11a:	6803      	ldr	r3, [r0, #0]
 800d11c:	4604      	mov	r4, r0
 800d11e:	b33b      	cbz	r3, 800d170 <rcl_timer_get_time_until_next_call+0x5c>
 800d120:	460d      	mov	r5, r1
 800d122:	b309      	cbz	r1, 800d168 <rcl_timer_get_time_until_next_call+0x54>
 800d124:	f3bf 8f5b 	dmb	ish
 800d128:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d12c:	f3bf 8f5b 	dmb	ish
 800d130:	b9ab      	cbnz	r3, 800d15e <rcl_timer_get_time_until_next_call+0x4a>
 800d132:	6803      	ldr	r3, [r0, #0]
 800d134:	4669      	mov	r1, sp
 800d136:	6818      	ldr	r0, [r3, #0]
 800d138:	f008 f80e 	bl	8015158 <rcl_clock_get_now>
 800d13c:	4606      	mov	r6, r0
 800d13e:	b958      	cbnz	r0, 800d158 <rcl_timer_get_time_until_next_call+0x44>
 800d140:	6820      	ldr	r0, [r4, #0]
 800d142:	2105      	movs	r1, #5
 800d144:	3028      	adds	r0, #40	@ 0x28
 800d146:	f001 f815 	bl	800e174 <__atomic_load_8>
 800d14a:	9b00      	ldr	r3, [sp, #0]
 800d14c:	1ac0      	subs	r0, r0, r3
 800d14e:	9b01      	ldr	r3, [sp, #4]
 800d150:	6028      	str	r0, [r5, #0]
 800d152:	eb61 0103 	sbc.w	r1, r1, r3
 800d156:	6069      	str	r1, [r5, #4]
 800d158:	4630      	mov	r0, r6
 800d15a:	b002      	add	sp, #8
 800d15c:	bd70      	pop	{r4, r5, r6, pc}
 800d15e:	f240 3621 	movw	r6, #801	@ 0x321
 800d162:	4630      	mov	r0, r6
 800d164:	b002      	add	sp, #8
 800d166:	bd70      	pop	{r4, r5, r6, pc}
 800d168:	260b      	movs	r6, #11
 800d16a:	4630      	mov	r0, r6
 800d16c:	b002      	add	sp, #8
 800d16e:	bd70      	pop	{r4, r5, r6, pc}
 800d170:	f44f 7648 	mov.w	r6, #800	@ 0x320
 800d174:	e7f0      	b.n	800d158 <rcl_timer_get_time_until_next_call+0x44>
 800d176:	bf00      	nop

0800d178 <rcl_timer_get_guard_condition>:
 800d178:	b130      	cbz	r0, 800d188 <rcl_timer_get_guard_condition+0x10>
 800d17a:	6800      	ldr	r0, [r0, #0]
 800d17c:	b120      	cbz	r0, 800d188 <rcl_timer_get_guard_condition+0x10>
 800d17e:	68c3      	ldr	r3, [r0, #12]
 800d180:	b10b      	cbz	r3, 800d186 <rcl_timer_get_guard_condition+0xe>
 800d182:	3008      	adds	r0, #8
 800d184:	4770      	bx	lr
 800d186:	4618      	mov	r0, r3
 800d188:	4770      	bx	lr
 800d18a:	bf00      	nop

0800d18c <_rclc_check_for_new_data>:
 800d18c:	2800      	cmp	r0, #0
 800d18e:	d046      	beq.n	800d21e <_rclc_check_for_new_data+0x92>
 800d190:	b510      	push	{r4, lr}
 800d192:	7802      	ldrb	r2, [r0, #0]
 800d194:	b084      	sub	sp, #16
 800d196:	4603      	mov	r3, r0
 800d198:	2a0a      	cmp	r2, #10
 800d19a:	d842      	bhi.n	800d222 <_rclc_check_for_new_data+0x96>
 800d19c:	e8df f002 	tbb	[pc, r2]
 800d1a0:	14181212 	.word	0x14181212
 800d1a4:	06060614 	.word	0x06060614
 800d1a8:	2e1a      	.short	0x2e1a
 800d1aa:	16          	.byte	0x16
 800d1ab:	00          	.byte	0x00
 800d1ac:	6a0a      	ldr	r2, [r1, #32]
 800d1ae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800d1b0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800d1b4:	2000      	movs	r0, #0
 800d1b6:	1a12      	subs	r2, r2, r0
 800d1b8:	bf18      	it	ne
 800d1ba:	2201      	movne	r2, #1
 800d1bc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800d1c0:	b004      	add	sp, #16
 800d1c2:	bd10      	pop	{r4, pc}
 800d1c4:	680a      	ldr	r2, [r1, #0]
 800d1c6:	e7f2      	b.n	800d1ae <_rclc_check_for_new_data+0x22>
 800d1c8:	698a      	ldr	r2, [r1, #24]
 800d1ca:	e7f0      	b.n	800d1ae <_rclc_check_for_new_data+0x22>
 800d1cc:	688a      	ldr	r2, [r1, #8]
 800d1ce:	e7ee      	b.n	800d1ae <_rclc_check_for_new_data+0x22>
 800d1d0:	690a      	ldr	r2, [r1, #16]
 800d1d2:	e7ec      	b.n	800d1ae <_rclc_check_for_new_data+0x22>
 800d1d4:	685c      	ldr	r4, [r3, #4]
 800d1d6:	4608      	mov	r0, r1
 800d1d8:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800d1dc:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800d1e0:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800d1e4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800d1e8:	9300      	str	r3, [sp, #0]
 800d1ea:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800d1ee:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800d1f2:	f104 0110 	add.w	r1, r4, #16
 800d1f6:	f008 ffeb 	bl	80161d0 <rcl_action_client_wait_set_get_entities_ready>
 800d1fa:	e7e1      	b.n	800d1c0 <_rclc_check_for_new_data+0x34>
 800d1fc:	685c      	ldr	r4, [r3, #4]
 800d1fe:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800d202:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800d206:	e9cd 3200 	strd	r3, r2, [sp]
 800d20a:	4608      	mov	r0, r1
 800d20c:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800d210:	f104 0220 	add.w	r2, r4, #32
 800d214:	f104 0110 	add.w	r1, r4, #16
 800d218:	f009 f9f2 	bl	8016600 <rcl_action_server_wait_set_get_entities_ready>
 800d21c:	e7d0      	b.n	800d1c0 <_rclc_check_for_new_data+0x34>
 800d21e:	200b      	movs	r0, #11
 800d220:	4770      	bx	lr
 800d222:	2001      	movs	r0, #1
 800d224:	e7cc      	b.n	800d1c0 <_rclc_check_for_new_data+0x34>
 800d226:	bf00      	nop

0800d228 <_rclc_take_new_data>:
 800d228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d22a:	b09b      	sub	sp, #108	@ 0x6c
 800d22c:	2800      	cmp	r0, #0
 800d22e:	f000 8088 	beq.w	800d342 <_rclc_take_new_data+0x11a>
 800d232:	7803      	ldrb	r3, [r0, #0]
 800d234:	4604      	mov	r4, r0
 800d236:	2b0a      	cmp	r3, #10
 800d238:	f200 8167 	bhi.w	800d50a <_rclc_take_new_data+0x2e2>
 800d23c:	e8df f003 	tbb	[pc, r3]
 800d240:	44152d2d 	.word	0x44152d2d
 800d244:	19191944 	.word	0x19191944
 800d248:	065a      	.short	0x065a
 800d24a:	15          	.byte	0x15
 800d24b:	00          	.byte	0x00
 800d24c:	6840      	ldr	r0, [r0, #4]
 800d24e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800d252:	2b00      	cmp	r3, #0
 800d254:	f040 80b2 	bne.w	800d3bc <_rclc_take_new_data+0x194>
 800d258:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	f040 80e4 	bne.w	800d42a <_rclc_take_new_data+0x202>
 800d262:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800d266:	2b00      	cmp	r3, #0
 800d268:	d16f      	bne.n	800d34a <_rclc_take_new_data+0x122>
 800d26a:	2500      	movs	r5, #0
 800d26c:	4628      	mov	r0, r5
 800d26e:	b01b      	add	sp, #108	@ 0x6c
 800d270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d272:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800d274:	6a0b      	ldr	r3, [r1, #32]
 800d276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d0f5      	beq.n	800d26a <_rclc_take_new_data+0x42>
 800d27e:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800d282:	f104 0110 	add.w	r1, r4, #16
 800d286:	f007 fe43 	bl	8014f10 <rcl_take_request>
 800d28a:	4605      	mov	r5, r0
 800d28c:	2800      	cmp	r0, #0
 800d28e:	d0ec      	beq.n	800d26a <_rclc_take_new_data+0x42>
 800d290:	f240 2359 	movw	r3, #601	@ 0x259
 800d294:	4298      	cmp	r0, r3
 800d296:	d013      	beq.n	800d2c0 <_rclc_take_new_data+0x98>
 800d298:	e029      	b.n	800d2ee <_rclc_take_new_data+0xc6>
 800d29a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800d29c:	680b      	ldr	r3, [r1, #0]
 800d29e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d0e1      	beq.n	800d26a <_rclc_take_new_data+0x42>
 800d2a6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	aa0a      	add	r2, sp, #40	@ 0x28
 800d2ae:	f7ff fc8b 	bl	800cbc8 <rcl_take>
 800d2b2:	4605      	mov	r5, r0
 800d2b4:	2800      	cmp	r0, #0
 800d2b6:	d0d9      	beq.n	800d26c <_rclc_take_new_data+0x44>
 800d2b8:	f240 1391 	movw	r3, #401	@ 0x191
 800d2bc:	4298      	cmp	r0, r3
 800d2be:	d116      	bne.n	800d2ee <_rclc_take_new_data+0xc6>
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800d2c6:	e7d1      	b.n	800d26c <_rclc_take_new_data+0x44>
 800d2c8:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800d2ca:	698b      	ldr	r3, [r1, #24]
 800d2cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d0ca      	beq.n	800d26a <_rclc_take_new_data+0x42>
 800d2d4:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800d2d8:	f104 0110 	add.w	r1, r4, #16
 800d2dc:	f007 fac8 	bl	8014870 <rcl_take_response>
 800d2e0:	4605      	mov	r5, r0
 800d2e2:	2800      	cmp	r0, #0
 800d2e4:	d0c1      	beq.n	800d26a <_rclc_take_new_data+0x42>
 800d2e6:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800d2ea:	4298      	cmp	r0, r3
 800d2ec:	d0be      	beq.n	800d26c <_rclc_take_new_data+0x44>
 800d2ee:	f001 f813 	bl	800e318 <rcutils_reset_error>
 800d2f2:	e7bb      	b.n	800d26c <_rclc_take_new_data+0x44>
 800d2f4:	6840      	ldr	r0, [r0, #4]
 800d2f6:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d17d      	bne.n	800d3fa <_rclc_take_new_data+0x1d2>
 800d2fe:	69c3      	ldr	r3, [r0, #28]
 800d300:	b11b      	cbz	r3, 800d30a <_rclc_take_new_data+0xe2>
 800d302:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800d306:	2b00      	cmp	r3, #0
 800d308:	d144      	bne.n	800d394 <_rclc_take_new_data+0x16c>
 800d30a:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800d30e:	2b00      	cmp	r3, #0
 800d310:	f040 80ac 	bne.w	800d46c <_rclc_take_new_data+0x244>
 800d314:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d0a6      	beq.n	800d26a <_rclc_take_new_data+0x42>
 800d31c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800d31e:	a90a      	add	r1, sp, #40	@ 0x28
 800d320:	3010      	adds	r0, #16
 800d322:	f008 fe2d 	bl	8015f80 <rcl_action_take_result_response>
 800d326:	4605      	mov	r5, r0
 800d328:	2800      	cmp	r0, #0
 800d32a:	d1e0      	bne.n	800d2ee <_rclc_take_new_data+0xc6>
 800d32c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d330:	6860      	ldr	r0, [r4, #4]
 800d332:	f009 fa89 	bl	8016848 <rclc_action_find_handle_by_result_request_sequence_number>
 800d336:	2800      	cmp	r0, #0
 800d338:	d098      	beq.n	800d26c <_rclc_take_new_data+0x44>
 800d33a:	2301      	movs	r3, #1
 800d33c:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800d340:	e794      	b.n	800d26c <_rclc_take_new_data+0x44>
 800d342:	250b      	movs	r5, #11
 800d344:	4628      	mov	r0, r5
 800d346:	b01b      	add	sp, #108	@ 0x6c
 800d348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d34a:	ae04      	add	r6, sp, #16
 800d34c:	aa0a      	add	r2, sp, #40	@ 0x28
 800d34e:	3010      	adds	r0, #16
 800d350:	4631      	mov	r1, r6
 800d352:	f009 f889 	bl	8016468 <rcl_action_take_cancel_request>
 800d356:	4605      	mov	r5, r0
 800d358:	2800      	cmp	r0, #0
 800d35a:	d1c8      	bne.n	800d2ee <_rclc_take_new_data+0xc6>
 800d35c:	6860      	ldr	r0, [r4, #4]
 800d35e:	a90a      	add	r1, sp, #40	@ 0x28
 800d360:	f009 fa30 	bl	80167c4 <rclc_action_find_goal_handle_by_uuid>
 800d364:	4607      	mov	r7, r0
 800d366:	2800      	cmp	r0, #0
 800d368:	f000 80bb 	beq.w	800d4e2 <_rclc_take_new_data+0x2ba>
 800d36c:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800d370:	2101      	movs	r1, #1
 800d372:	f009 f9b1 	bl	80166d8 <rcl_action_transition_goal_state>
 800d376:	2803      	cmp	r0, #3
 800d378:	4684      	mov	ip, r0
 800d37a:	f040 80a7 	bne.w	800d4cc <_rclc_take_new_data+0x2a4>
 800d37e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d380:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800d384:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d386:	e896 0003 	ldmia.w	r6, {r0, r1}
 800d38a:	e884 0003 	stmia.w	r4, {r0, r1}
 800d38e:	f887 c008 	strb.w	ip, [r7, #8]
 800d392:	e76b      	b.n	800d26c <_rclc_take_new_data+0x44>
 800d394:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d396:	3010      	adds	r0, #16
 800d398:	f008 fe72 	bl	8016080 <rcl_action_take_feedback>
 800d39c:	4605      	mov	r5, r0
 800d39e:	2800      	cmp	r0, #0
 800d3a0:	d1a5      	bne.n	800d2ee <_rclc_take_new_data+0xc6>
 800d3a2:	6860      	ldr	r0, [r4, #4]
 800d3a4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d3a6:	f009 fa0d 	bl	80167c4 <rclc_action_find_goal_handle_by_uuid>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	2800      	cmp	r0, #0
 800d3ae:	f000 80a3 	beq.w	800d4f8 <_rclc_take_new_data+0x2d0>
 800d3b2:	2201      	movs	r2, #1
 800d3b4:	6860      	ldr	r0, [r4, #4]
 800d3b6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800d3ba:	e7a6      	b.n	800d30a <_rclc_take_new_data+0xe2>
 800d3bc:	f009 f9dc 	bl	8016778 <rclc_action_take_goal_handle>
 800d3c0:	4606      	mov	r6, r0
 800d3c2:	6860      	ldr	r0, [r4, #4]
 800d3c4:	2e00      	cmp	r6, #0
 800d3c6:	f43f af47 	beq.w	800d258 <_rclc_take_new_data+0x30>
 800d3ca:	6070      	str	r0, [r6, #4]
 800d3cc:	69f2      	ldr	r2, [r6, #28]
 800d3ce:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800d3d2:	3010      	adds	r0, #16
 800d3d4:	f008 ff90 	bl	80162f8 <rcl_action_take_goal_request>
 800d3d8:	4605      	mov	r5, r0
 800d3da:	2800      	cmp	r0, #0
 800d3dc:	f040 808e 	bne.w	800d4fc <_rclc_take_new_data+0x2d4>
 800d3e0:	69f7      	ldr	r7, [r6, #28]
 800d3e2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d3e4:	7235      	strb	r5, [r6, #8]
 800d3e6:	f8c6 0009 	str.w	r0, [r6, #9]
 800d3ea:	f8c6 100d 	str.w	r1, [r6, #13]
 800d3ee:	6860      	ldr	r0, [r4, #4]
 800d3f0:	f8c6 2011 	str.w	r2, [r6, #17]
 800d3f4:	f8c6 3015 	str.w	r3, [r6, #21]
 800d3f8:	e72e      	b.n	800d258 <_rclc_take_new_data+0x30>
 800d3fa:	aa04      	add	r2, sp, #16
 800d3fc:	a90a      	add	r1, sp, #40	@ 0x28
 800d3fe:	3010      	adds	r0, #16
 800d400:	f008 fd46 	bl	8015e90 <rcl_action_take_goal_response>
 800d404:	4605      	mov	r5, r0
 800d406:	2800      	cmp	r0, #0
 800d408:	f47f af71 	bne.w	800d2ee <_rclc_take_new_data+0xc6>
 800d40c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d410:	6860      	ldr	r0, [r4, #4]
 800d412:	f009 fa07 	bl	8016824 <rclc_action_find_handle_by_goal_request_sequence_number>
 800d416:	b130      	cbz	r0, 800d426 <_rclc_take_new_data+0x1fe>
 800d418:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800d41c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800d420:	2201      	movs	r2, #1
 800d422:	f880 2020 	strb.w	r2, [r0, #32]
 800d426:	6860      	ldr	r0, [r4, #4]
 800d428:	e769      	b.n	800d2fe <_rclc_take_new_data+0xd6>
 800d42a:	aa04      	add	r2, sp, #16
 800d42c:	3010      	adds	r0, #16
 800d42e:	a90a      	add	r1, sp, #40	@ 0x28
 800d430:	f008 ffda 	bl	80163e8 <rcl_action_take_result_request>
 800d434:	4605      	mov	r5, r0
 800d436:	2800      	cmp	r0, #0
 800d438:	f47f af59 	bne.w	800d2ee <_rclc_take_new_data+0xc6>
 800d43c:	6860      	ldr	r0, [r4, #4]
 800d43e:	a904      	add	r1, sp, #16
 800d440:	f009 f9c0 	bl	80167c4 <rclc_action_find_goal_handle_by_uuid>
 800d444:	4607      	mov	r7, r0
 800d446:	b160      	cbz	r0, 800d462 <_rclc_take_new_data+0x23a>
 800d448:	ad0a      	add	r5, sp, #40	@ 0x28
 800d44a:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800d44e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d450:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d452:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d456:	f04f 0c02 	mov.w	ip, #2
 800d45a:	e886 0003 	stmia.w	r6, {r0, r1}
 800d45e:	f887 c008 	strb.w	ip, [r7, #8]
 800d462:	6860      	ldr	r0, [r4, #4]
 800d464:	2300      	movs	r3, #0
 800d466:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800d46a:	e6fa      	b.n	800d262 <_rclc_take_new_data+0x3a>
 800d46c:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800d470:	a90a      	add	r1, sp, #40	@ 0x28
 800d472:	3010      	adds	r0, #16
 800d474:	f008 fdc4 	bl	8016000 <rcl_action_take_cancel_response>
 800d478:	4605      	mov	r5, r0
 800d47a:	2800      	cmp	r0, #0
 800d47c:	f47f af37 	bne.w	800d2ee <_rclc_take_new_data+0xc6>
 800d480:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d484:	6860      	ldr	r0, [r4, #4]
 800d486:	f009 f9f1 	bl	801686c <rclc_action_find_handle_by_cancel_request_sequence_number>
 800d48a:	4606      	mov	r6, r0
 800d48c:	6860      	ldr	r0, [r4, #4]
 800d48e:	2e00      	cmp	r6, #0
 800d490:	f43f af40 	beq.w	800d314 <_rclc_take_new_data+0xec>
 800d494:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800d496:	2701      	movs	r7, #1
 800d498:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	f43f af3a 	beq.w	800d314 <_rclc_take_new_data+0xec>
 800d4a0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d4a2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800d4a6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800d4aa:	f009 f98b 	bl	80167c4 <rclc_action_find_goal_handle_by_uuid>
 800d4ae:	b138      	cbz	r0, 800d4c0 <_rclc_take_new_data+0x298>
 800d4b0:	6860      	ldr	r0, [r4, #4]
 800d4b2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800d4b4:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800d4b8:	3501      	adds	r5, #1
 800d4ba:	42ab      	cmp	r3, r5
 800d4bc:	d8f0      	bhi.n	800d4a0 <_rclc_take_new_data+0x278>
 800d4be:	e729      	b.n	800d314 <_rclc_take_new_data+0xec>
 800d4c0:	6860      	ldr	r0, [r4, #4]
 800d4c2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800d4c4:	3501      	adds	r5, #1
 800d4c6:	42ab      	cmp	r3, r5
 800d4c8:	d8ea      	bhi.n	800d4a0 <_rclc_take_new_data+0x278>
 800d4ca:	e723      	b.n	800d314 <_rclc_take_new_data+0xec>
 800d4cc:	ab06      	add	r3, sp, #24
 800d4ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d4d0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d4d4:	2103      	movs	r1, #3
 800d4d6:	e896 000c 	ldmia.w	r6, {r2, r3}
 800d4da:	6860      	ldr	r0, [r4, #4]
 800d4dc:	f009 fa3c 	bl	8016958 <rclc_action_server_goal_cancel_reject>
 800d4e0:	e6c4      	b.n	800d26c <_rclc_take_new_data+0x44>
 800d4e2:	ab06      	add	r3, sp, #24
 800d4e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d4e6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d4ea:	2102      	movs	r1, #2
 800d4ec:	e896 000c 	ldmia.w	r6, {r2, r3}
 800d4f0:	6860      	ldr	r0, [r4, #4]
 800d4f2:	f009 fa31 	bl	8016958 <rclc_action_server_goal_cancel_reject>
 800d4f6:	e6b9      	b.n	800d26c <_rclc_take_new_data+0x44>
 800d4f8:	6860      	ldr	r0, [r4, #4]
 800d4fa:	e706      	b.n	800d30a <_rclc_take_new_data+0xe2>
 800d4fc:	6860      	ldr	r0, [r4, #4]
 800d4fe:	4631      	mov	r1, r6
 800d500:	f009 f94a 	bl	8016798 <rclc_action_remove_used_goal_handle>
 800d504:	f000 ff08 	bl	800e318 <rcutils_reset_error>
 800d508:	e6b0      	b.n	800d26c <_rclc_take_new_data+0x44>
 800d50a:	2501      	movs	r5, #1
 800d50c:	e6ae      	b.n	800d26c <_rclc_take_new_data+0x44>
 800d50e:	bf00      	nop

0800d510 <_rclc_execute.part.0>:
 800d510:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d512:	7803      	ldrb	r3, [r0, #0]
 800d514:	b087      	sub	sp, #28
 800d516:	4604      	mov	r4, r0
 800d518:	2b0a      	cmp	r3, #10
 800d51a:	f200 8136 	bhi.w	800d78a <_rclc_execute.part.0+0x27a>
 800d51e:	e8df f003 	tbb	[pc, r3]
 800d522:	435e      	.short	0x435e
 800d524:	06a1664f 	.word	0x06a1664f
 800d528:	6c1e0606 	.word	0x6c1e0606
 800d52c:	59          	.byte	0x59
 800d52d:	00          	.byte	0x00
 800d52e:	2b06      	cmp	r3, #6
 800d530:	f000 8122 	beq.w	800d778 <_rclc_execute.part.0+0x268>
 800d534:	2b07      	cmp	r3, #7
 800d536:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d538:	f040 8118 	bne.w	800d76c <_rclc_execute.part.0+0x25c>
 800d53c:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800d540:	6880      	ldr	r0, [r0, #8]
 800d542:	4798      	blx	r3
 800d544:	f104 0110 	add.w	r1, r4, #16
 800d548:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800d54a:	6860      	ldr	r0, [r4, #4]
 800d54c:	f007 fd20 	bl	8014f90 <rcl_send_response>
 800d550:	2800      	cmp	r0, #0
 800d552:	d033      	beq.n	800d5bc <_rclc_execute.part.0+0xac>
 800d554:	9005      	str	r0, [sp, #20]
 800d556:	f000 fedf 	bl	800e318 <rcutils_reset_error>
 800d55a:	9805      	ldr	r0, [sp, #20]
 800d55c:	e02e      	b.n	800d5bc <_rclc_execute.part.0+0xac>
 800d55e:	6840      	ldr	r0, [r0, #4]
 800d560:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800d564:	2b00      	cmp	r3, #0
 800d566:	f000 8086 	beq.w	800d676 <_rclc_execute.part.0+0x166>
 800d56a:	2600      	movs	r6, #0
 800d56c:	2701      	movs	r7, #1
 800d56e:	e004      	b.n	800d57a <_rclc_execute.part.0+0x6a>
 800d570:	f009 f8dc 	bl	801672c <rclc_action_send_result_request>
 800d574:	b998      	cbnz	r0, 800d59e <_rclc_execute.part.0+0x8e>
 800d576:	722f      	strb	r7, [r5, #8]
 800d578:	6860      	ldr	r0, [r4, #4]
 800d57a:	f009 f989 	bl	8016890 <rclc_action_find_first_handle_with_goal_response>
 800d57e:	4605      	mov	r5, r0
 800d580:	2800      	cmp	r0, #0
 800d582:	d077      	beq.n	800d674 <_rclc_execute.part.0+0x164>
 800d584:	6863      	ldr	r3, [r4, #4]
 800d586:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d588:	699b      	ldr	r3, [r3, #24]
 800d58a:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800d58e:	f885 6020 	strb.w	r6, [r5, #32]
 800d592:	4798      	blx	r3
 800d594:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800d598:	4628      	mov	r0, r5
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d1e8      	bne.n	800d570 <_rclc_execute.part.0+0x60>
 800d59e:	6860      	ldr	r0, [r4, #4]
 800d5a0:	4629      	mov	r1, r5
 800d5a2:	f009 f8f9 	bl	8016798 <rclc_action_remove_used_goal_handle>
 800d5a6:	e7e7      	b.n	800d578 <_rclc_execute.part.0+0x68>
 800d5a8:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800d5ac:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800d5b0:	2d00      	cmp	r5, #0
 800d5b2:	f000 80c9 	beq.w	800d748 <_rclc_execute.part.0+0x238>
 800d5b6:	6880      	ldr	r0, [r0, #8]
 800d5b8:	4798      	blx	r3
 800d5ba:	2000      	movs	r0, #0
 800d5bc:	b007      	add	sp, #28
 800d5be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5c0:	6840      	ldr	r0, [r0, #4]
 800d5c2:	f7ff fcdb 	bl	800cf7c <rcl_timer_call>
 800d5c6:	f240 3321 	movw	r3, #801	@ 0x321
 800d5ca:	4298      	cmp	r0, r3
 800d5cc:	d004      	beq.n	800d5d8 <_rclc_execute.part.0+0xc8>
 800d5ce:	2800      	cmp	r0, #0
 800d5d0:	d0f4      	beq.n	800d5bc <_rclc_execute.part.0+0xac>
 800d5d2:	e7bf      	b.n	800d554 <_rclc_execute.part.0+0x44>
 800d5d4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d5d6:	4798      	blx	r3
 800d5d8:	2000      	movs	r0, #0
 800d5da:	b007      	add	sp, #28
 800d5dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5de:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800d5e2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d5e4:	b925      	cbnz	r5, 800d5f0 <_rclc_execute.part.0+0xe0>
 800d5e6:	4628      	mov	r0, r5
 800d5e8:	4798      	blx	r3
 800d5ea:	4628      	mov	r0, r5
 800d5ec:	e7e6      	b.n	800d5bc <_rclc_execute.part.0+0xac>
 800d5ee:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d5f0:	68a0      	ldr	r0, [r4, #8]
 800d5f2:	4798      	blx	r3
 800d5f4:	2000      	movs	r0, #0
 800d5f6:	b007      	add	sp, #28
 800d5f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5fa:	6840      	ldr	r0, [r0, #4]
 800d5fc:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800d600:	bb3b      	cbnz	r3, 800d652 <_rclc_execute.part.0+0x142>
 800d602:	f890 3020 	ldrb.w	r3, [r0, #32]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d07b      	beq.n	800d702 <_rclc_execute.part.0+0x1f2>
 800d60a:	f640 0634 	movw	r6, #2100	@ 0x834
 800d60e:	2701      	movs	r7, #1
 800d610:	e007      	b.n	800d622 <_rclc_execute.part.0+0x112>
 800d612:	4628      	mov	r0, r5
 800d614:	f009 f954 	bl	80168c0 <rclc_action_server_response_goal_request>
 800d618:	6860      	ldr	r0, [r4, #4]
 800d61a:	4629      	mov	r1, r5
 800d61c:	f009 f8bc 	bl	8016798 <rclc_action_remove_used_goal_handle>
 800d620:	6860      	ldr	r0, [r4, #4]
 800d622:	2100      	movs	r1, #0
 800d624:	f009 f8e6 	bl	80167f4 <rclc_action_find_first_handle_by_status>
 800d628:	4605      	mov	r5, r0
 800d62a:	2800      	cmp	r0, #0
 800d62c:	d066      	beq.n	800d6fc <_rclc_execute.part.0+0x1ec>
 800d62e:	6863      	ldr	r3, [r4, #4]
 800d630:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d632:	699b      	ldr	r3, [r3, #24]
 800d634:	4798      	blx	r3
 800d636:	42b0      	cmp	r0, r6
 800d638:	f04f 0100 	mov.w	r1, #0
 800d63c:	d1e9      	bne.n	800d612 <_rclc_execute.part.0+0x102>
 800d63e:	2101      	movs	r1, #1
 800d640:	4628      	mov	r0, r5
 800d642:	f009 f93d 	bl	80168c0 <rclc_action_server_response_goal_request>
 800d646:	722f      	strb	r7, [r5, #8]
 800d648:	e7ea      	b.n	800d620 <_rclc_execute.part.0+0x110>
 800d64a:	6848      	ldr	r0, [r1, #4]
 800d64c:	f009 f8a4 	bl	8016798 <rclc_action_remove_used_goal_handle>
 800d650:	6860      	ldr	r0, [r4, #4]
 800d652:	f009 f8db 	bl	801680c <rclc_action_find_first_terminated_handle>
 800d656:	4601      	mov	r1, r0
 800d658:	2800      	cmp	r0, #0
 800d65a:	d1f6      	bne.n	800d64a <_rclc_execute.part.0+0x13a>
 800d65c:	6860      	ldr	r0, [r4, #4]
 800d65e:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800d662:	e7ce      	b.n	800d602 <_rclc_execute.part.0+0xf2>
 800d664:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d666:	6880      	ldr	r0, [r0, #8]
 800d668:	f104 0110 	add.w	r1, r4, #16
 800d66c:	4798      	blx	r3
 800d66e:	2000      	movs	r0, #0
 800d670:	b007      	add	sp, #28
 800d672:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d674:	6860      	ldr	r0, [r4, #4]
 800d676:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800d67a:	b18b      	cbz	r3, 800d6a0 <_rclc_execute.part.0+0x190>
 800d67c:	68c5      	ldr	r5, [r0, #12]
 800d67e:	b32d      	cbz	r5, 800d6cc <_rclc_execute.part.0+0x1bc>
 800d680:	2600      	movs	r6, #0
 800d682:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800d686:	b143      	cbz	r3, 800d69a <_rclc_execute.part.0+0x18a>
 800d688:	69c3      	ldr	r3, [r0, #28]
 800d68a:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800d68e:	b123      	cbz	r3, 800d69a <_rclc_execute.part.0+0x18a>
 800d690:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d692:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d694:	4628      	mov	r0, r5
 800d696:	4798      	blx	r3
 800d698:	6860      	ldr	r0, [r4, #4]
 800d69a:	682d      	ldr	r5, [r5, #0]
 800d69c:	2d00      	cmp	r5, #0
 800d69e:	d1f0      	bne.n	800d682 <_rclc_execute.part.0+0x172>
 800d6a0:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800d6a4:	b193      	cbz	r3, 800d6cc <_rclc_execute.part.0+0x1bc>
 800d6a6:	68c5      	ldr	r5, [r0, #12]
 800d6a8:	b185      	cbz	r5, 800d6cc <_rclc_execute.part.0+0x1bc>
 800d6aa:	2600      	movs	r6, #0
 800d6ac:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800d6b0:	b14b      	cbz	r3, 800d6c6 <_rclc_execute.part.0+0x1b6>
 800d6b2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800d6b4:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800d6b8:	b12b      	cbz	r3, 800d6c6 <_rclc_execute.part.0+0x1b6>
 800d6ba:	4628      	mov	r0, r5
 800d6bc:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800d6c0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d6c2:	4798      	blx	r3
 800d6c4:	6860      	ldr	r0, [r4, #4]
 800d6c6:	682d      	ldr	r5, [r5, #0]
 800d6c8:	2d00      	cmp	r5, #0
 800d6ca:	d1ef      	bne.n	800d6ac <_rclc_execute.part.0+0x19c>
 800d6cc:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d081      	beq.n	800d5d8 <_rclc_execute.part.0+0xc8>
 800d6d4:	2700      	movs	r7, #0
 800d6d6:	e00b      	b.n	800d6f0 <_rclc_execute.part.0+0x1e0>
 800d6d8:	6863      	ldr	r3, [r4, #4]
 800d6da:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d6dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800d6de:	6a1e      	ldr	r6, [r3, #32]
 800d6e0:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800d6e4:	47b0      	blx	r6
 800d6e6:	6860      	ldr	r0, [r4, #4]
 800d6e8:	4629      	mov	r1, r5
 800d6ea:	f009 f855 	bl	8016798 <rclc_action_remove_used_goal_handle>
 800d6ee:	6860      	ldr	r0, [r4, #4]
 800d6f0:	f009 f8da 	bl	80168a8 <rclc_action_find_first_handle_with_result_response>
 800d6f4:	4605      	mov	r5, r0
 800d6f6:	2800      	cmp	r0, #0
 800d6f8:	d1ee      	bne.n	800d6d8 <_rclc_execute.part.0+0x1c8>
 800d6fa:	e76d      	b.n	800d5d8 <_rclc_execute.part.0+0xc8>
 800d6fc:	6860      	ldr	r0, [r4, #4]
 800d6fe:	f880 5020 	strb.w	r5, [r0, #32]
 800d702:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800d706:	2b00      	cmp	r3, #0
 800d708:	f43f af66 	beq.w	800d5d8 <_rclc_execute.part.0+0xc8>
 800d70c:	68c5      	ldr	r5, [r0, #12]
 800d70e:	b1b5      	cbz	r5, 800d73e <_rclc_execute.part.0+0x22e>
 800d710:	2602      	movs	r6, #2
 800d712:	e001      	b.n	800d718 <_rclc_execute.part.0+0x208>
 800d714:	682d      	ldr	r5, [r5, #0]
 800d716:	b195      	cbz	r5, 800d73e <_rclc_execute.part.0+0x22e>
 800d718:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800d71c:	2b03      	cmp	r3, #3
 800d71e:	d1f9      	bne.n	800d714 <_rclc_execute.part.0+0x204>
 800d720:	69c3      	ldr	r3, [r0, #28]
 800d722:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d724:	4628      	mov	r0, r5
 800d726:	4798      	blx	r3
 800d728:	4603      	mov	r3, r0
 800d72a:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800d72e:	4628      	mov	r0, r5
 800d730:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800d734:	b163      	cbz	r3, 800d750 <_rclc_execute.part.0+0x240>
 800d736:	f009 f8e3 	bl	8016900 <rclc_action_server_goal_cancel_accept>
 800d73a:	6860      	ldr	r0, [r4, #4]
 800d73c:	e7ea      	b.n	800d714 <_rclc_execute.part.0+0x204>
 800d73e:	2300      	movs	r3, #0
 800d740:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800d744:	4618      	mov	r0, r3
 800d746:	e739      	b.n	800d5bc <_rclc_execute.part.0+0xac>
 800d748:	4628      	mov	r0, r5
 800d74a:	4798      	blx	r3
 800d74c:	4628      	mov	r0, r5
 800d74e:	e735      	b.n	800d5bc <_rclc_execute.part.0+0xac>
 800d750:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800d752:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d756:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800d75a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d75e:	6860      	ldr	r0, [r4, #4]
 800d760:	2101      	movs	r1, #1
 800d762:	f009 f8f9 	bl	8016958 <rclc_action_server_goal_cancel_reject>
 800d766:	722e      	strb	r6, [r5, #8]
 800d768:	6860      	ldr	r0, [r4, #4]
 800d76a:	e7d3      	b.n	800d714 <_rclc_execute.part.0+0x204>
 800d76c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d76e:	6880      	ldr	r0, [r0, #8]
 800d770:	4798      	blx	r3
 800d772:	f104 0110 	add.w	r1, r4, #16
 800d776:	e6e7      	b.n	800d548 <_rclc_execute.part.0+0x38>
 800d778:	f100 0110 	add.w	r1, r0, #16
 800d77c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d77e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800d780:	6880      	ldr	r0, [r0, #8]
 800d782:	9105      	str	r1, [sp, #20]
 800d784:	4798      	blx	r3
 800d786:	9905      	ldr	r1, [sp, #20]
 800d788:	e6de      	b.n	800d548 <_rclc_execute.part.0+0x38>
 800d78a:	2001      	movs	r0, #1
 800d78c:	e716      	b.n	800d5bc <_rclc_execute.part.0+0xac>
 800d78e:	bf00      	nop

0800d790 <rclc_executor_trigger_any>:
 800d790:	2800      	cmp	r0, #0
 800d792:	d03f      	beq.n	800d814 <rclc_executor_trigger_any+0x84>
 800d794:	2900      	cmp	r1, #0
 800d796:	d03e      	beq.n	800d816 <rclc_executor_trigger_any+0x86>
 800d798:	4603      	mov	r3, r0
 800d79a:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800d79e:	2200      	movs	r2, #0
 800d7a0:	2800      	cmp	r0, #0
 800d7a2:	d037      	beq.n	800d814 <rclc_executor_trigger_any+0x84>
 800d7a4:	b430      	push	{r4, r5}
 800d7a6:	f893 c000 	ldrb.w	ip, [r3]
 800d7aa:	f1bc 0f08 	cmp.w	ip, #8
 800d7ae:	d11e      	bne.n	800d7ee <rclc_executor_trigger_any+0x5e>
 800d7b0:	685c      	ldr	r4, [r3, #4]
 800d7b2:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800d7b4:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800d7b8:	d105      	bne.n	800d7c6 <rclc_executor_trigger_any+0x36>
 800d7ba:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800d7be:	b910      	cbnz	r0, 800d7c6 <rclc_executor_trigger_any+0x36>
 800d7c0:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800d7c4:	b128      	cbz	r0, 800d7d2 <rclc_executor_trigger_any+0x42>
 800d7c6:	bc30      	pop	{r4, r5}
 800d7c8:	4770      	bx	lr
 800d7ca:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800d7ce:	2800      	cmp	r0, #0
 800d7d0:	d1f9      	bne.n	800d7c6 <rclc_executor_trigger_any+0x36>
 800d7d2:	3201      	adds	r2, #1
 800d7d4:	4291      	cmp	r1, r2
 800d7d6:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800d7da:	d018      	beq.n	800d80e <rclc_executor_trigger_any+0x7e>
 800d7dc:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800d7e0:	2800      	cmp	r0, #0
 800d7e2:	d0f0      	beq.n	800d7c6 <rclc_executor_trigger_any+0x36>
 800d7e4:	f893 c000 	ldrb.w	ip, [r3]
 800d7e8:	f1bc 0f08 	cmp.w	ip, #8
 800d7ec:	d0e0      	beq.n	800d7b0 <rclc_executor_trigger_any+0x20>
 800d7ee:	f1bc 0f09 	cmp.w	ip, #9
 800d7f2:	d1ea      	bne.n	800d7ca <rclc_executor_trigger_any+0x3a>
 800d7f4:	685c      	ldr	r4, [r3, #4]
 800d7f6:	6a25      	ldr	r5, [r4, #32]
 800d7f8:	2d00      	cmp	r5, #0
 800d7fa:	d1e4      	bne.n	800d7c6 <rclc_executor_trigger_any+0x36>
 800d7fc:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800d800:	2800      	cmp	r0, #0
 800d802:	d1e0      	bne.n	800d7c6 <rclc_executor_trigger_any+0x36>
 800d804:	3201      	adds	r2, #1
 800d806:	4291      	cmp	r1, r2
 800d808:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800d80c:	d1e6      	bne.n	800d7dc <rclc_executor_trigger_any+0x4c>
 800d80e:	2000      	movs	r0, #0
 800d810:	bc30      	pop	{r4, r5}
 800d812:	4770      	bx	lr
 800d814:	4770      	bx	lr
 800d816:	4608      	mov	r0, r1
 800d818:	4770      	bx	lr
 800d81a:	bf00      	nop
 800d81c:	0000      	movs	r0, r0
	...

0800d820 <rclc_executor_init>:
 800d820:	2800      	cmp	r0, #0
 800d822:	d05f      	beq.n	800d8e4 <rclc_executor_init+0xc4>
 800d824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d828:	460c      	mov	r4, r1
 800d82a:	b0b0      	sub	sp, #192	@ 0xc0
 800d82c:	2900      	cmp	r1, #0
 800d82e:	d051      	beq.n	800d8d4 <rclc_executor_init+0xb4>
 800d830:	4605      	mov	r5, r0
 800d832:	4618      	mov	r0, r3
 800d834:	4616      	mov	r6, r2
 800d836:	461f      	mov	r7, r3
 800d838:	f000 fc8e 	bl	800e158 <rcutils_allocator_is_valid>
 800d83c:	2800      	cmp	r0, #0
 800d83e:	d049      	beq.n	800d8d4 <rclc_executor_init+0xb4>
 800d840:	2e00      	cmp	r6, #0
 800d842:	d047      	beq.n	800d8d4 <rclc_executor_init+0xb4>
 800d844:	492c      	ldr	r1, [pc, #176]	@ (800d8f8 <rclc_executor_init+0xd8>)
 800d846:	2288      	movs	r2, #136	@ 0x88
 800d848:	a80e      	add	r0, sp, #56	@ 0x38
 800d84a:	f00c f8ac 	bl	80199a6 <memcpy>
 800d84e:	a90e      	add	r1, sp, #56	@ 0x38
 800d850:	2288      	movs	r2, #136	@ 0x88
 800d852:	4628      	mov	r0, r5
 800d854:	f00c f8a7 	bl	80199a6 <memcpy>
 800d858:	602c      	str	r4, [r5, #0]
 800d85a:	4668      	mov	r0, sp
 800d85c:	60ae      	str	r6, [r5, #8]
 800d85e:	466c      	mov	r4, sp
 800d860:	f007 fd46 	bl	80152f0 <rcl_get_zero_initialized_wait_set>
 800d864:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d866:	f105 0c14 	add.w	ip, r5, #20
 800d86a:	f8d7 8000 	ldr.w	r8, [r7]
 800d86e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d872:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d874:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d878:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d87a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d87e:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800d8f0 <rclc_executor_init+0xd0>
 800d882:	6823      	ldr	r3, [r4, #0]
 800d884:	f8cc 3000 	str.w	r3, [ip]
 800d888:	6939      	ldr	r1, [r7, #16]
 800d88a:	612f      	str	r7, [r5, #16]
 800d88c:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800d890:	01b0      	lsls	r0, r6, #6
 800d892:	47c0      	blx	r8
 800d894:	6068      	str	r0, [r5, #4]
 800d896:	b338      	cbz	r0, 800d8e8 <rclc_executor_init+0xc8>
 800d898:	2400      	movs	r4, #0
 800d89a:	e000      	b.n	800d89e <rclc_executor_init+0x7e>
 800d89c:	6868      	ldr	r0, [r5, #4]
 800d89e:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800d8a2:	4631      	mov	r1, r6
 800d8a4:	3401      	adds	r4, #1
 800d8a6:	f000 facb 	bl	800de40 <rclc_executor_handle_init>
 800d8aa:	42a6      	cmp	r6, r4
 800d8ac:	d1f6      	bne.n	800d89c <rclc_executor_init+0x7c>
 800d8ae:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800d8b2:	f000 fab9 	bl	800de28 <rclc_executor_handle_counters_zero_init>
 800d8b6:	4a11      	ldr	r2, [pc, #68]	@ (800d8fc <rclc_executor_init+0xdc>)
 800d8b8:	686b      	ldr	r3, [r5, #4]
 800d8ba:	2000      	movs	r0, #0
 800d8bc:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800d8c0:	b163      	cbz	r3, 800d8dc <rclc_executor_init+0xbc>
 800d8c2:	692b      	ldr	r3, [r5, #16]
 800d8c4:	b153      	cbz	r3, 800d8dc <rclc_executor_init+0xbc>
 800d8c6:	68ab      	ldr	r3, [r5, #8]
 800d8c8:	b143      	cbz	r3, 800d8dc <rclc_executor_init+0xbc>
 800d8ca:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800d8ce:	b030      	add	sp, #192	@ 0xc0
 800d8d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8d4:	200b      	movs	r0, #11
 800d8d6:	b030      	add	sp, #192	@ 0xc0
 800d8d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	b030      	add	sp, #192	@ 0xc0
 800d8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8e4:	200b      	movs	r0, #11
 800d8e6:	4770      	bx	lr
 800d8e8:	200a      	movs	r0, #10
 800d8ea:	e7f4      	b.n	800d8d6 <rclc_executor_init+0xb6>
 800d8ec:	f3af 8000 	nop.w
 800d8f0:	3b9aca00 	.word	0x3b9aca00
 800d8f4:	00000000 	.word	0x00000000
 800d8f8:	0801b190 	.word	0x0801b190
 800d8fc:	0800d791 	.word	0x0800d791

0800d900 <rclc_executor_fini>:
 800d900:	b308      	cbz	r0, 800d946 <rclc_executor_fini+0x46>
 800d902:	b538      	push	{r3, r4, r5, lr}
 800d904:	4604      	mov	r4, r0
 800d906:	6840      	ldr	r0, [r0, #4]
 800d908:	b1d8      	cbz	r0, 800d942 <rclc_executor_fini+0x42>
 800d90a:	6923      	ldr	r3, [r4, #16]
 800d90c:	b1cb      	cbz	r3, 800d942 <rclc_executor_fini+0x42>
 800d90e:	68a2      	ldr	r2, [r4, #8]
 800d910:	b1ba      	cbz	r2, 800d942 <rclc_executor_fini+0x42>
 800d912:	6919      	ldr	r1, [r3, #16]
 800d914:	685b      	ldr	r3, [r3, #4]
 800d916:	4798      	blx	r3
 800d918:	2300      	movs	r3, #0
 800d91a:	2000      	movs	r0, #0
 800d91c:	2100      	movs	r1, #0
 800d91e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d922:	6063      	str	r3, [r4, #4]
 800d924:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 800d928:	f104 0514 	add.w	r5, r4, #20
 800d92c:	f000 fa7c 	bl	800de28 <rclc_executor_handle_counters_zero_init>
 800d930:	4628      	mov	r0, r5
 800d932:	f007 fcf1 	bl	8015318 <rcl_wait_set_is_valid>
 800d936:	b940      	cbnz	r0, 800d94a <rclc_executor_fini+0x4a>
 800d938:	a309      	add	r3, pc, #36	@ (adr r3, 800d960 <rclc_executor_fini+0x60>)
 800d93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d93e:	e9c4 231a 	strd	r2, r3, [r4, #104]	@ 0x68
 800d942:	2000      	movs	r0, #0
 800d944:	bd38      	pop	{r3, r4, r5, pc}
 800d946:	2000      	movs	r0, #0
 800d948:	4770      	bx	lr
 800d94a:	4628      	mov	r0, r5
 800d94c:	f007 fcea 	bl	8015324 <rcl_wait_set_fini>
 800d950:	2800      	cmp	r0, #0
 800d952:	d0f1      	beq.n	800d938 <rclc_executor_fini+0x38>
 800d954:	f000 fce0 	bl	800e318 <rcutils_reset_error>
 800d958:	e7ee      	b.n	800d938 <rclc_executor_fini+0x38>
 800d95a:	bf00      	nop
 800d95c:	f3af 8000 	nop.w
 800d960:	3b9aca00 	.word	0x3b9aca00
 800d964:	00000000 	.word	0x00000000

0800d968 <rclc_executor_add_subscription>:
 800d968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d96a:	f89d e018 	ldrb.w	lr, [sp, #24]
 800d96e:	b338      	cbz	r0, 800d9c0 <rclc_executor_add_subscription+0x58>
 800d970:	b331      	cbz	r1, 800d9c0 <rclc_executor_add_subscription+0x58>
 800d972:	b32a      	cbz	r2, 800d9c0 <rclc_executor_add_subscription+0x58>
 800d974:	b323      	cbz	r3, 800d9c0 <rclc_executor_add_subscription+0x58>
 800d976:	4604      	mov	r4, r0
 800d978:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800d97c:	42a8      	cmp	r0, r5
 800d97e:	d301      	bcc.n	800d984 <rclc_executor_add_subscription+0x1c>
 800d980:	2001      	movs	r0, #1
 800d982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d984:	6866      	ldr	r6, [r4, #4]
 800d986:	0187      	lsls	r7, r0, #6
 800d988:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800d98c:	2500      	movs	r5, #0
 800d98e:	55f5      	strb	r5, [r6, r7]
 800d990:	3001      	adds	r0, #1
 800d992:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800d996:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800d99a:	2301      	movs	r3, #1
 800d99c:	f104 0514 	add.w	r5, r4, #20
 800d9a0:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800d9a4:	f88c e001 	strb.w	lr, [ip, #1]
 800d9a8:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800d9ac:	60e0      	str	r0, [r4, #12]
 800d9ae:	4628      	mov	r0, r5
 800d9b0:	f007 fcb2 	bl	8015318 <rcl_wait_set_is_valid>
 800d9b4:	b930      	cbnz	r0, 800d9c4 <rclc_executor_add_subscription+0x5c>
 800d9b6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800d9b8:	3301      	adds	r3, #1
 800d9ba:	2000      	movs	r0, #0
 800d9bc:	64a3      	str	r3, [r4, #72]	@ 0x48
 800d9be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9c0:	200b      	movs	r0, #11
 800d9c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9c4:	4628      	mov	r0, r5
 800d9c6:	f007 fcad 	bl	8015324 <rcl_wait_set_fini>
 800d9ca:	2800      	cmp	r0, #0
 800d9cc:	d0f3      	beq.n	800d9b6 <rclc_executor_add_subscription+0x4e>
 800d9ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d9d0 <rclc_executor_add_timer>:
 800d9d0:	b300      	cbz	r0, 800da14 <rclc_executor_add_timer+0x44>
 800d9d2:	b1f9      	cbz	r1, 800da14 <rclc_executor_add_timer+0x44>
 800d9d4:	b538      	push	{r3, r4, r5, lr}
 800d9d6:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800d9da:	4293      	cmp	r3, r2
 800d9dc:	4604      	mov	r4, r0
 800d9de:	d301      	bcc.n	800d9e4 <rclc_executor_add_timer+0x14>
 800d9e0:	2001      	movs	r0, #1
 800d9e2:	bd38      	pop	{r3, r4, r5, pc}
 800d9e4:	6840      	ldr	r0, [r0, #4]
 800d9e6:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800d9ea:	019d      	lsls	r5, r3, #6
 800d9ec:	6051      	str	r1, [r2, #4]
 800d9ee:	2102      	movs	r1, #2
 800d9f0:	5341      	strh	r1, [r0, r5]
 800d9f2:	3301      	adds	r3, #1
 800d9f4:	2000      	movs	r0, #0
 800d9f6:	2101      	movs	r1, #1
 800d9f8:	f104 0514 	add.w	r5, r4, #20
 800d9fc:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800d9fe:	8711      	strh	r1, [r2, #56]	@ 0x38
 800da00:	4628      	mov	r0, r5
 800da02:	60e3      	str	r3, [r4, #12]
 800da04:	f007 fc88 	bl	8015318 <rcl_wait_set_is_valid>
 800da08:	b930      	cbnz	r0, 800da18 <rclc_executor_add_timer+0x48>
 800da0a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800da0c:	3301      	adds	r3, #1
 800da0e:	2000      	movs	r0, #0
 800da10:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800da12:	bd38      	pop	{r3, r4, r5, pc}
 800da14:	200b      	movs	r0, #11
 800da16:	4770      	bx	lr
 800da18:	4628      	mov	r0, r5
 800da1a:	f007 fc83 	bl	8015324 <rcl_wait_set_fini>
 800da1e:	2800      	cmp	r0, #0
 800da20:	d0f3      	beq.n	800da0a <rclc_executor_add_timer+0x3a>
 800da22:	bd38      	pop	{r3, r4, r5, pc}

0800da24 <rclc_executor_prepare>:
 800da24:	2800      	cmp	r0, #0
 800da26:	d044      	beq.n	800dab2 <rclc_executor_prepare+0x8e>
 800da28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da2a:	f100 0514 	add.w	r5, r0, #20
 800da2e:	b09b      	sub	sp, #108	@ 0x6c
 800da30:	4604      	mov	r4, r0
 800da32:	4628      	mov	r0, r5
 800da34:	f007 fc70 	bl	8015318 <rcl_wait_set_is_valid>
 800da38:	b110      	cbz	r0, 800da40 <rclc_executor_prepare+0x1c>
 800da3a:	2000      	movs	r0, #0
 800da3c:	b01b      	add	sp, #108	@ 0x6c
 800da3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da40:	4628      	mov	r0, r5
 800da42:	f007 fc6f 	bl	8015324 <rcl_wait_set_fini>
 800da46:	2800      	cmp	r0, #0
 800da48:	d130      	bne.n	800daac <rclc_executor_prepare+0x88>
 800da4a:	a80c      	add	r0, sp, #48	@ 0x30
 800da4c:	f007 fc50 	bl	80152f0 <rcl_get_zero_initialized_wait_set>
 800da50:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800da54:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800da58:	46ae      	mov	lr, r5
 800da5a:	6927      	ldr	r7, [r4, #16]
 800da5c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800da60:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800da64:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800da68:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800da6c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800da70:	f8dc 3000 	ldr.w	r3, [ip]
 800da74:	f8ce 3000 	str.w	r3, [lr]
 800da78:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800da7a:	ae04      	add	r6, sp, #16
 800da7c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	6822      	ldr	r2, [r4, #0]
 800da82:	6033      	str	r3, [r6, #0]
 800da84:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800da86:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800da88:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800da8c:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800da90:	e9cd 2100 	strd	r2, r1, [sp]
 800da94:	4628      	mov	r0, r5
 800da96:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800da98:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800da9a:	f007 ff41 	bl	8015920 <rcl_wait_set_init>
 800da9e:	2800      	cmp	r0, #0
 800daa0:	d0cc      	beq.n	800da3c <rclc_executor_prepare+0x18>
 800daa2:	900b      	str	r0, [sp, #44]	@ 0x2c
 800daa4:	f000 fc38 	bl	800e318 <rcutils_reset_error>
 800daa8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800daaa:	e7c7      	b.n	800da3c <rclc_executor_prepare+0x18>
 800daac:	f000 fc34 	bl	800e318 <rcutils_reset_error>
 800dab0:	e7cb      	b.n	800da4a <rclc_executor_prepare+0x26>
 800dab2:	200b      	movs	r0, #11
 800dab4:	4770      	bx	lr
 800dab6:	bf00      	nop

0800dab8 <rclc_executor_spin_some.part.0>:
 800dab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dabc:	f100 0614 	add.w	r6, r0, #20
 800dac0:	b083      	sub	sp, #12
 800dac2:	4691      	mov	r9, r2
 800dac4:	4698      	mov	r8, r3
 800dac6:	4605      	mov	r5, r0
 800dac8:	f7ff ffac 	bl	800da24 <rclc_executor_prepare>
 800dacc:	4630      	mov	r0, r6
 800dace:	f007 fcf5 	bl	80154bc <rcl_wait_set_clear>
 800dad2:	4607      	mov	r7, r0
 800dad4:	2800      	cmp	r0, #0
 800dad6:	f040 80ed 	bne.w	800dcb4 <rclc_executor_spin_some.part.0+0x1fc>
 800dada:	68ab      	ldr	r3, [r5, #8]
 800dadc:	4604      	mov	r4, r0
 800dade:	b303      	cbz	r3, 800db22 <rclc_executor_spin_some.part.0+0x6a>
 800dae0:	6869      	ldr	r1, [r5, #4]
 800dae2:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800dae6:	01a2      	lsls	r2, r4, #6
 800dae8:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800daec:	b1cb      	cbz	r3, 800db22 <rclc_executor_spin_some.part.0+0x6a>
 800daee:	5c8b      	ldrb	r3, [r1, r2]
 800daf0:	2b0a      	cmp	r3, #10
 800daf2:	f200 80d8 	bhi.w	800dca6 <rclc_executor_spin_some.part.0+0x1ee>
 800daf6:	e8df f003 	tbb	[pc, r3]
 800dafa:	9c9c      	.short	0x9c9c
 800dafc:	068c8ca7 	.word	0x068c8ca7
 800db00:	bdc90606 	.word	0xbdc90606
 800db04:	b2          	.byte	0xb2
 800db05:	00          	.byte	0x00
 800db06:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800db0a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800db0e:	4630      	mov	r0, r6
 800db10:	f008 f81c 	bl	8015b4c <rcl_wait_set_add_service>
 800db14:	2800      	cmp	r0, #0
 800db16:	f040 8086 	bne.w	800dc26 <rclc_executor_spin_some.part.0+0x16e>
 800db1a:	68ab      	ldr	r3, [r5, #8]
 800db1c:	3401      	adds	r4, #1
 800db1e:	429c      	cmp	r4, r3
 800db20:	d3de      	bcc.n	800dae0 <rclc_executor_spin_some.part.0+0x28>
 800db22:	4643      	mov	r3, r8
 800db24:	464a      	mov	r2, r9
 800db26:	4630      	mov	r0, r6
 800db28:	f008 f83e 	bl	8015ba8 <rcl_wait>
 800db2c:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800db30:	2b00      	cmp	r3, #0
 800db32:	f000 80c7 	beq.w	800dcc4 <rclc_executor_spin_some.part.0+0x20c>
 800db36:	2b01      	cmp	r3, #1
 800db38:	f040 80b5 	bne.w	800dca6 <rclc_executor_spin_some.part.0+0x1ee>
 800db3c:	68ab      	ldr	r3, [r5, #8]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	f000 8159 	beq.w	800ddf6 <rclc_executor_spin_some.part.0+0x33e>
 800db44:	2400      	movs	r4, #0
 800db46:	46a0      	mov	r8, r4
 800db48:	f240 1991 	movw	r9, #401	@ 0x191
 800db4c:	e00a      	b.n	800db64 <rclc_executor_spin_some.part.0+0xac>
 800db4e:	f7ff fb1d 	bl	800d18c <_rclc_check_for_new_data>
 800db52:	4604      	mov	r4, r0
 800db54:	b110      	cbz	r0, 800db5c <rclc_executor_spin_some.part.0+0xa4>
 800db56:	4548      	cmp	r0, r9
 800db58:	f040 80b2 	bne.w	800dcc0 <rclc_executor_spin_some.part.0+0x208>
 800db5c:	68ab      	ldr	r3, [r5, #8]
 800db5e:	4598      	cmp	r8, r3
 800db60:	f080 8126 	bcs.w	800ddb0 <rclc_executor_spin_some.part.0+0x2f8>
 800db64:	686a      	ldr	r2, [r5, #4]
 800db66:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800db6a:	4631      	mov	r1, r6
 800db6c:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800db70:	f108 0801 	add.w	r8, r8, #1
 800db74:	f1bc 0f00 	cmp.w	ip, #0
 800db78:	d1e9      	bne.n	800db4e <rclc_executor_spin_some.part.0+0x96>
 800db7a:	4619      	mov	r1, r3
 800db7c:	4610      	mov	r0, r2
 800db7e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800db82:	4798      	blx	r3
 800db84:	2800      	cmp	r0, #0
 800db86:	f000 809b 	beq.w	800dcc0 <rclc_executor_spin_some.part.0+0x208>
 800db8a:	68ab      	ldr	r3, [r5, #8]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	f000 8097 	beq.w	800dcc0 <rclc_executor_spin_some.part.0+0x208>
 800db92:	f04f 0800 	mov.w	r8, #0
 800db96:	f240 1991 	movw	r9, #401	@ 0x191
 800db9a:	e009      	b.n	800dbb0 <rclc_executor_spin_some.part.0+0xf8>
 800db9c:	f7ff fb44 	bl	800d228 <_rclc_take_new_data>
 800dba0:	4604      	mov	r4, r0
 800dba2:	b110      	cbz	r0, 800dbaa <rclc_executor_spin_some.part.0+0xf2>
 800dba4:	4548      	cmp	r0, r9
 800dba6:	f040 808b 	bne.w	800dcc0 <rclc_executor_spin_some.part.0+0x208>
 800dbaa:	68ab      	ldr	r3, [r5, #8]
 800dbac:	4598      	cmp	r8, r3
 800dbae:	d209      	bcs.n	800dbc4 <rclc_executor_spin_some.part.0+0x10c>
 800dbb0:	6868      	ldr	r0, [r5, #4]
 800dbb2:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800dbb6:	4631      	mov	r1, r6
 800dbb8:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800dbbc:	f108 0801 	add.w	r8, r8, #1
 800dbc0:	2a00      	cmp	r2, #0
 800dbc2:	d1eb      	bne.n	800db9c <rclc_executor_spin_some.part.0+0xe4>
 800dbc4:	2600      	movs	r6, #0
 800dbc6:	b97b      	cbnz	r3, 800dbe8 <rclc_executor_spin_some.part.0+0x130>
 800dbc8:	e07a      	b.n	800dcc0 <rclc_executor_spin_some.part.0+0x208>
 800dbca:	f812 200c 	ldrb.w	r2, [r2, ip]
 800dbce:	2a08      	cmp	r2, #8
 800dbd0:	f000 80fd 	beq.w	800ddce <rclc_executor_spin_some.part.0+0x316>
 800dbd4:	2a09      	cmp	r2, #9
 800dbd6:	f000 80ef 	beq.w	800ddb8 <rclc_executor_spin_some.part.0+0x300>
 800dbda:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800dbde:	b98a      	cbnz	r2, 800dc04 <rclc_executor_spin_some.part.0+0x14c>
 800dbe0:	3601      	adds	r6, #1
 800dbe2:	429e      	cmp	r6, r3
 800dbe4:	d262      	bcs.n	800dcac <rclc_executor_spin_some.part.0+0x1f4>
 800dbe6:	2400      	movs	r4, #0
 800dbe8:	686a      	ldr	r2, [r5, #4]
 800dbea:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800dbee:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800dbf2:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800dbf6:	2900      	cmp	r1, #0
 800dbf8:	d062      	beq.n	800dcc0 <rclc_executor_spin_some.part.0+0x208>
 800dbfa:	7841      	ldrb	r1, [r0, #1]
 800dbfc:	2900      	cmp	r1, #0
 800dbfe:	d0e4      	beq.n	800dbca <rclc_executor_spin_some.part.0+0x112>
 800dc00:	2901      	cmp	r1, #1
 800dc02:	d1ed      	bne.n	800dbe0 <rclc_executor_spin_some.part.0+0x128>
 800dc04:	f7ff fc84 	bl	800d510 <_rclc_execute.part.0>
 800dc08:	2800      	cmp	r0, #0
 800dc0a:	f040 80b6 	bne.w	800dd7a <rclc_executor_spin_some.part.0+0x2c2>
 800dc0e:	68ab      	ldr	r3, [r5, #8]
 800dc10:	e7e6      	b.n	800dbe0 <rclc_executor_spin_some.part.0+0x128>
 800dc12:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800dc16:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800dc1a:	4630      	mov	r0, r6
 800dc1c:	f007 ff6a 	bl	8015af4 <rcl_wait_set_add_client>
 800dc20:	2800      	cmp	r0, #0
 800dc22:	f43f af7a 	beq.w	800db1a <rclc_executor_spin_some.part.0+0x62>
 800dc26:	9001      	str	r0, [sp, #4]
 800dc28:	f000 fb76 	bl	800e318 <rcutils_reset_error>
 800dc2c:	9801      	ldr	r0, [sp, #4]
 800dc2e:	4607      	mov	r7, r0
 800dc30:	e03c      	b.n	800dcac <rclc_executor_spin_some.part.0+0x1f4>
 800dc32:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800dc36:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800dc3a:	4630      	mov	r0, r6
 800dc3c:	f007 fc12 	bl	8015464 <rcl_wait_set_add_subscription>
 800dc40:	2800      	cmp	r0, #0
 800dc42:	f43f af6a 	beq.w	800db1a <rclc_executor_spin_some.part.0+0x62>
 800dc46:	e7ee      	b.n	800dc26 <rclc_executor_spin_some.part.0+0x16e>
 800dc48:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800dc4c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800dc50:	4630      	mov	r0, r6
 800dc52:	f007 ff1f 	bl	8015a94 <rcl_wait_set_add_timer>
 800dc56:	2800      	cmp	r0, #0
 800dc58:	f43f af5f 	beq.w	800db1a <rclc_executor_spin_some.part.0+0x62>
 800dc5c:	e7e3      	b.n	800dc26 <rclc_executor_spin_some.part.0+0x16e>
 800dc5e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800dc62:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800dc66:	4630      	mov	r0, r6
 800dc68:	f007 fee8 	bl	8015a3c <rcl_wait_set_add_guard_condition>
 800dc6c:	2800      	cmp	r0, #0
 800dc6e:	f43f af54 	beq.w	800db1a <rclc_executor_spin_some.part.0+0x62>
 800dc72:	e7d8      	b.n	800dc26 <rclc_executor_spin_some.part.0+0x16e>
 800dc74:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800dc78:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800dc7c:	3110      	adds	r1, #16
 800dc7e:	4630      	mov	r0, r6
 800dc80:	f008 fc6a 	bl	8016558 <rcl_action_wait_set_add_action_server>
 800dc84:	2800      	cmp	r0, #0
 800dc86:	f43f af48 	beq.w	800db1a <rclc_executor_spin_some.part.0+0x62>
 800dc8a:	e7cc      	b.n	800dc26 <rclc_executor_spin_some.part.0+0x16e>
 800dc8c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800dc90:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800dc94:	3110      	adds	r1, #16
 800dc96:	2300      	movs	r3, #0
 800dc98:	4630      	mov	r0, r6
 800dc9a:	f008 fa35 	bl	8016108 <rcl_action_wait_set_add_action_client>
 800dc9e:	2800      	cmp	r0, #0
 800dca0:	f43f af3b 	beq.w	800db1a <rclc_executor_spin_some.part.0+0x62>
 800dca4:	e7bf      	b.n	800dc26 <rclc_executor_spin_some.part.0+0x16e>
 800dca6:	f000 fb37 	bl	800e318 <rcutils_reset_error>
 800dcaa:	2701      	movs	r7, #1
 800dcac:	4638      	mov	r0, r7
 800dcae:	b003      	add	sp, #12
 800dcb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcb4:	f000 fb30 	bl	800e318 <rcutils_reset_error>
 800dcb8:	4638      	mov	r0, r7
 800dcba:	b003      	add	sp, #12
 800dcbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcc0:	4627      	mov	r7, r4
 800dcc2:	e7f3      	b.n	800dcac <rclc_executor_spin_some.part.0+0x1f4>
 800dcc4:	68ab      	ldr	r3, [r5, #8]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	f000 8092 	beq.w	800ddf0 <rclc_executor_spin_some.part.0+0x338>
 800dccc:	2400      	movs	r4, #0
 800dcce:	46a0      	mov	r8, r4
 800dcd0:	f240 1991 	movw	r9, #401	@ 0x191
 800dcd4:	e008      	b.n	800dce8 <rclc_executor_spin_some.part.0+0x230>
 800dcd6:	f7ff fa59 	bl	800d18c <_rclc_check_for_new_data>
 800dcda:	4604      	mov	r4, r0
 800dcdc:	b108      	cbz	r0, 800dce2 <rclc_executor_spin_some.part.0+0x22a>
 800dcde:	4548      	cmp	r0, r9
 800dce0:	d1ee      	bne.n	800dcc0 <rclc_executor_spin_some.part.0+0x208>
 800dce2:	68ab      	ldr	r3, [r5, #8]
 800dce4:	4598      	cmp	r8, r3
 800dce6:	d265      	bcs.n	800ddb4 <rclc_executor_spin_some.part.0+0x2fc>
 800dce8:	686a      	ldr	r2, [r5, #4]
 800dcea:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800dcee:	4631      	mov	r1, r6
 800dcf0:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800dcf4:	f108 0801 	add.w	r8, r8, #1
 800dcf8:	f1bc 0f00 	cmp.w	ip, #0
 800dcfc:	d1eb      	bne.n	800dcd6 <rclc_executor_spin_some.part.0+0x21e>
 800dcfe:	4619      	mov	r1, r3
 800dd00:	4610      	mov	r0, r2
 800dd02:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800dd06:	4798      	blx	r3
 800dd08:	2800      	cmp	r0, #0
 800dd0a:	d0d9      	beq.n	800dcc0 <rclc_executor_spin_some.part.0+0x208>
 800dd0c:	68ab      	ldr	r3, [r5, #8]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d0d6      	beq.n	800dcc0 <rclc_executor_spin_some.part.0+0x208>
 800dd12:	f04f 0800 	mov.w	r8, #0
 800dd16:	f240 1991 	movw	r9, #401	@ 0x191
 800dd1a:	f240 2a59 	movw	sl, #601	@ 0x259
 800dd1e:	e00e      	b.n	800dd3e <rclc_executor_spin_some.part.0+0x286>
 800dd20:	f813 300b 	ldrb.w	r3, [r3, fp]
 800dd24:	2b08      	cmp	r3, #8
 800dd26:	d033      	beq.n	800dd90 <rclc_executor_spin_some.part.0+0x2d8>
 800dd28:	2b09      	cmp	r3, #9
 800dd2a:	d028      	beq.n	800dd7e <rclc_executor_spin_some.part.0+0x2c6>
 800dd2c:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800dd30:	b9fb      	cbnz	r3, 800dd72 <rclc_executor_spin_some.part.0+0x2ba>
 800dd32:	68ab      	ldr	r3, [r5, #8]
 800dd34:	f108 0801 	add.w	r8, r8, #1
 800dd38:	4598      	cmp	r8, r3
 800dd3a:	d2b7      	bcs.n	800dcac <rclc_executor_spin_some.part.0+0x1f4>
 800dd3c:	2400      	movs	r4, #0
 800dd3e:	6868      	ldr	r0, [r5, #4]
 800dd40:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800dd44:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800dd48:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d0b7      	beq.n	800dcc0 <rclc_executor_spin_some.part.0+0x208>
 800dd50:	4631      	mov	r1, r6
 800dd52:	f7ff fa69 	bl	800d228 <_rclc_take_new_data>
 800dd56:	b118      	cbz	r0, 800dd60 <rclc_executor_spin_some.part.0+0x2a8>
 800dd58:	4548      	cmp	r0, r9
 800dd5a:	d001      	beq.n	800dd60 <rclc_executor_spin_some.part.0+0x2a8>
 800dd5c:	4550      	cmp	r0, sl
 800dd5e:	d10c      	bne.n	800dd7a <rclc_executor_spin_some.part.0+0x2c2>
 800dd60:	686b      	ldr	r3, [r5, #4]
 800dd62:	eb13 000b 	adds.w	r0, r3, fp
 800dd66:	d021      	beq.n	800ddac <rclc_executor_spin_some.part.0+0x2f4>
 800dd68:	7842      	ldrb	r2, [r0, #1]
 800dd6a:	2a00      	cmp	r2, #0
 800dd6c:	d0d8      	beq.n	800dd20 <rclc_executor_spin_some.part.0+0x268>
 800dd6e:	2a01      	cmp	r2, #1
 800dd70:	d1df      	bne.n	800dd32 <rclc_executor_spin_some.part.0+0x27a>
 800dd72:	f7ff fbcd 	bl	800d510 <_rclc_execute.part.0>
 800dd76:	2800      	cmp	r0, #0
 800dd78:	d0db      	beq.n	800dd32 <rclc_executor_spin_some.part.0+0x27a>
 800dd7a:	4607      	mov	r7, r0
 800dd7c:	e796      	b.n	800dcac <rclc_executor_spin_some.part.0+0x1f4>
 800dd7e:	6843      	ldr	r3, [r0, #4]
 800dd80:	6a1a      	ldr	r2, [r3, #32]
 800dd82:	2a00      	cmp	r2, #0
 800dd84:	d1f5      	bne.n	800dd72 <rclc_executor_spin_some.part.0+0x2ba>
 800dd86:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d0d1      	beq.n	800dd32 <rclc_executor_spin_some.part.0+0x27a>
 800dd8e:	e7f0      	b.n	800dd72 <rclc_executor_spin_some.part.0+0x2ba>
 800dd90:	6843      	ldr	r3, [r0, #4]
 800dd92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dd94:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800dd98:	d1eb      	bne.n	800dd72 <rclc_executor_spin_some.part.0+0x2ba>
 800dd9a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800dd9e:	2a00      	cmp	r2, #0
 800dda0:	d1e7      	bne.n	800dd72 <rclc_executor_spin_some.part.0+0x2ba>
 800dda2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d0c3      	beq.n	800dd32 <rclc_executor_spin_some.part.0+0x27a>
 800ddaa:	e7e2      	b.n	800dd72 <rclc_executor_spin_some.part.0+0x2ba>
 800ddac:	270b      	movs	r7, #11
 800ddae:	e77d      	b.n	800dcac <rclc_executor_spin_some.part.0+0x1f4>
 800ddb0:	686a      	ldr	r2, [r5, #4]
 800ddb2:	e6e2      	b.n	800db7a <rclc_executor_spin_some.part.0+0xc2>
 800ddb4:	686a      	ldr	r2, [r5, #4]
 800ddb6:	e7a2      	b.n	800dcfe <rclc_executor_spin_some.part.0+0x246>
 800ddb8:	6842      	ldr	r2, [r0, #4]
 800ddba:	6a11      	ldr	r1, [r2, #32]
 800ddbc:	2900      	cmp	r1, #0
 800ddbe:	f47f af21 	bne.w	800dc04 <rclc_executor_spin_some.part.0+0x14c>
 800ddc2:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800ddc6:	2a00      	cmp	r2, #0
 800ddc8:	f43f af0a 	beq.w	800dbe0 <rclc_executor_spin_some.part.0+0x128>
 800ddcc:	e71a      	b.n	800dc04 <rclc_executor_spin_some.part.0+0x14c>
 800ddce:	6842      	ldr	r2, [r0, #4]
 800ddd0:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800ddd2:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800ddd6:	f47f af15 	bne.w	800dc04 <rclc_executor_spin_some.part.0+0x14c>
 800ddda:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800ddde:	2900      	cmp	r1, #0
 800dde0:	f47f af10 	bne.w	800dc04 <rclc_executor_spin_some.part.0+0x14c>
 800dde4:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800dde8:	2a00      	cmp	r2, #0
 800ddea:	f43f aef9 	beq.w	800dbe0 <rclc_executor_spin_some.part.0+0x128>
 800ddee:	e709      	b.n	800dc04 <rclc_executor_spin_some.part.0+0x14c>
 800ddf0:	686a      	ldr	r2, [r5, #4]
 800ddf2:	461c      	mov	r4, r3
 800ddf4:	e783      	b.n	800dcfe <rclc_executor_spin_some.part.0+0x246>
 800ddf6:	686a      	ldr	r2, [r5, #4]
 800ddf8:	461c      	mov	r4, r3
 800ddfa:	e6be      	b.n	800db7a <rclc_executor_spin_some.part.0+0xc2>

0800ddfc <rclc_executor_spin_some>:
 800ddfc:	b190      	cbz	r0, 800de24 <rclc_executor_spin_some+0x28>
 800ddfe:	b570      	push	{r4, r5, r6, lr}
 800de00:	4604      	mov	r4, r0
 800de02:	6800      	ldr	r0, [r0, #0]
 800de04:	4616      	mov	r6, r2
 800de06:	461d      	mov	r5, r3
 800de08:	f7fe f910 	bl	800c02c <rcl_context_is_valid>
 800de0c:	b130      	cbz	r0, 800de1c <rclc_executor_spin_some+0x20>
 800de0e:	4632      	mov	r2, r6
 800de10:	462b      	mov	r3, r5
 800de12:	4620      	mov	r0, r4
 800de14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800de18:	f7ff be4e 	b.w	800dab8 <rclc_executor_spin_some.part.0>
 800de1c:	f000 fa7c 	bl	800e318 <rcutils_reset_error>
 800de20:	2001      	movs	r0, #1
 800de22:	bd70      	pop	{r4, r5, r6, pc}
 800de24:	200b      	movs	r0, #11
 800de26:	4770      	bx	lr

0800de28 <rclc_executor_handle_counters_zero_init>:
 800de28:	b130      	cbz	r0, 800de38 <rclc_executor_handle_counters_zero_init+0x10>
 800de2a:	b508      	push	{r3, lr}
 800de2c:	2220      	movs	r2, #32
 800de2e:	2100      	movs	r1, #0
 800de30:	f00b fcf0 	bl	8019814 <memset>
 800de34:	2000      	movs	r0, #0
 800de36:	bd08      	pop	{r3, pc}
 800de38:	200b      	movs	r0, #11
 800de3a:	4770      	bx	lr
 800de3c:	0000      	movs	r0, r0
	...

0800de40 <rclc_executor_handle_init>:
 800de40:	b168      	cbz	r0, 800de5e <rclc_executor_handle_init+0x1e>
 800de42:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800de68 <rclc_executor_handle_init+0x28>
 800de46:	2300      	movs	r3, #0
 800de48:	220b      	movs	r2, #11
 800de4a:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800de4e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800de52:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800de56:	8002      	strh	r2, [r0, #0]
 800de58:	8703      	strh	r3, [r0, #56]	@ 0x38
 800de5a:	4618      	mov	r0, r3
 800de5c:	4770      	bx	lr
 800de5e:	200b      	movs	r0, #11
 800de60:	4770      	bx	lr
 800de62:	bf00      	nop
 800de64:	f3af 8000 	nop.w
	...

0800de70 <rclc_support_init_with_options>:
 800de70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800de74:	b083      	sub	sp, #12
 800de76:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800de78:	b340      	cbz	r0, 800decc <rclc_support_init_with_options+0x5c>
 800de7a:	461d      	mov	r5, r3
 800de7c:	b333      	cbz	r3, 800decc <rclc_support_init_with_options+0x5c>
 800de7e:	b32e      	cbz	r6, 800decc <rclc_support_init_with_options+0x5c>
 800de80:	46e9      	mov	r9, sp
 800de82:	4604      	mov	r4, r0
 800de84:	4648      	mov	r0, r9
 800de86:	460f      	mov	r7, r1
 800de88:	4690      	mov	r8, r2
 800de8a:	f7fe f8c5 	bl	800c018 <rcl_get_zero_initialized_context>
 800de8e:	e899 0003 	ldmia.w	r9, {r0, r1}
 800de92:	462a      	mov	r2, r5
 800de94:	e884 0003 	stmia.w	r4, {r0, r1}
 800de98:	4623      	mov	r3, r4
 800de9a:	4641      	mov	r1, r8
 800de9c:	4638      	mov	r0, r7
 800de9e:	f006 fe5b 	bl	8014b58 <rcl_init>
 800dea2:	4605      	mov	r5, r0
 800dea4:	b960      	cbnz	r0, 800dec0 <rclc_support_init_with_options+0x50>
 800dea6:	60a6      	str	r6, [r4, #8]
 800dea8:	4632      	mov	r2, r6
 800deaa:	f104 010c 	add.w	r1, r4, #12
 800deae:	2003      	movs	r0, #3
 800deb0:	f007 f8a8 	bl	8015004 <rcl_clock_init>
 800deb4:	4605      	mov	r5, r0
 800deb6:	b918      	cbnz	r0, 800dec0 <rclc_support_init_with_options+0x50>
 800deb8:	4628      	mov	r0, r5
 800deba:	b003      	add	sp, #12
 800debc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dec0:	f000 fa2a 	bl	800e318 <rcutils_reset_error>
 800dec4:	4628      	mov	r0, r5
 800dec6:	b003      	add	sp, #12
 800dec8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800decc:	250b      	movs	r5, #11
 800dece:	4628      	mov	r0, r5
 800ded0:	b003      	add	sp, #12
 800ded2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ded6:	bf00      	nop

0800ded8 <rclc_support_fini>:
 800ded8:	b538      	push	{r3, r4, r5, lr}
 800deda:	b320      	cbz	r0, 800df26 <rclc_support_fini+0x4e>
 800dedc:	4604      	mov	r4, r0
 800dede:	300c      	adds	r0, #12
 800dee0:	f007 f908 	bl	80150f4 <rcl_clock_fini>
 800dee4:	4605      	mov	r5, r0
 800dee6:	b948      	cbnz	r0, 800defc <rclc_support_fini+0x24>
 800dee8:	4620      	mov	r0, r4
 800deea:	f006 ff23 	bl	8014d34 <rcl_shutdown>
 800deee:	b968      	cbnz	r0, 800df0c <rclc_support_fini+0x34>
 800def0:	4620      	mov	r0, r4
 800def2:	f7fe f907 	bl	800c104 <rcl_context_fini>
 800def6:	b988      	cbnz	r0, 800df1c <rclc_support_fini+0x44>
 800def8:	4628      	mov	r0, r5
 800defa:	bd38      	pop	{r3, r4, r5, pc}
 800defc:	f000 fa0c 	bl	800e318 <rcutils_reset_error>
 800df00:	4620      	mov	r0, r4
 800df02:	2501      	movs	r5, #1
 800df04:	f006 ff16 	bl	8014d34 <rcl_shutdown>
 800df08:	2800      	cmp	r0, #0
 800df0a:	d0f1      	beq.n	800def0 <rclc_support_fini+0x18>
 800df0c:	f000 fa04 	bl	800e318 <rcutils_reset_error>
 800df10:	4620      	mov	r0, r4
 800df12:	2501      	movs	r5, #1
 800df14:	f7fe f8f6 	bl	800c104 <rcl_context_fini>
 800df18:	2800      	cmp	r0, #0
 800df1a:	d0ed      	beq.n	800def8 <rclc_support_fini+0x20>
 800df1c:	2501      	movs	r5, #1
 800df1e:	f000 f9fb 	bl	800e318 <rcutils_reset_error>
 800df22:	4628      	mov	r0, r5
 800df24:	bd38      	pop	{r3, r4, r5, pc}
 800df26:	250b      	movs	r5, #11
 800df28:	4628      	mov	r0, r5
 800df2a:	bd38      	pop	{r3, r4, r5, pc}

0800df2c <rclc_node_init_default>:
 800df2c:	b3b8      	cbz	r0, 800df9e <rclc_node_init_default+0x72>
 800df2e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800df32:	460d      	mov	r5, r1
 800df34:	b0a1      	sub	sp, #132	@ 0x84
 800df36:	b329      	cbz	r1, 800df84 <rclc_node_init_default+0x58>
 800df38:	4616      	mov	r6, r2
 800df3a:	b31a      	cbz	r2, 800df84 <rclc_node_init_default+0x58>
 800df3c:	461f      	mov	r7, r3
 800df3e:	b30b      	cbz	r3, 800df84 <rclc_node_init_default+0x58>
 800df40:	f10d 0810 	add.w	r8, sp, #16
 800df44:	4604      	mov	r4, r0
 800df46:	4640      	mov	r0, r8
 800df48:	f7fe f9f6 	bl	800c338 <rcl_get_zero_initialized_node>
 800df4c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800df50:	f10d 0918 	add.w	r9, sp, #24
 800df54:	e884 0003 	stmia.w	r4, {r0, r1}
 800df58:	4648      	mov	r0, r9
 800df5a:	f7fe fb97 	bl	800c68c <rcl_node_get_default_options>
 800df5e:	4640      	mov	r0, r8
 800df60:	f7fe f9ea 	bl	800c338 <rcl_get_zero_initialized_node>
 800df64:	f8cd 9000 	str.w	r9, [sp]
 800df68:	e898 0003 	ldmia.w	r8, {r0, r1}
 800df6c:	463b      	mov	r3, r7
 800df6e:	e884 0003 	stmia.w	r4, {r0, r1}
 800df72:	4632      	mov	r2, r6
 800df74:	4629      	mov	r1, r5
 800df76:	4620      	mov	r0, r4
 800df78:	f7fe f9e8 	bl	800c34c <rcl_node_init>
 800df7c:	b930      	cbnz	r0, 800df8c <rclc_node_init_default+0x60>
 800df7e:	b021      	add	sp, #132	@ 0x84
 800df80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df84:	200b      	movs	r0, #11
 800df86:	b021      	add	sp, #132	@ 0x84
 800df88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df8c:	9003      	str	r0, [sp, #12]
 800df8e:	f000 f9c3 	bl	800e318 <rcutils_reset_error>
 800df92:	f000 f9c1 	bl	800e318 <rcutils_reset_error>
 800df96:	9803      	ldr	r0, [sp, #12]
 800df98:	b021      	add	sp, #132	@ 0x84
 800df9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df9e:	200b      	movs	r0, #11
 800dfa0:	4770      	bx	lr
 800dfa2:	bf00      	nop

0800dfa4 <rclc_publisher_init_default>:
 800dfa4:	b368      	cbz	r0, 800e002 <rclc_publisher_init_default+0x5e>
 800dfa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfaa:	460d      	mov	r5, r1
 800dfac:	b0a0      	sub	sp, #128	@ 0x80
 800dfae:	b321      	cbz	r1, 800dffa <rclc_publisher_init_default+0x56>
 800dfb0:	4616      	mov	r6, r2
 800dfb2:	b312      	cbz	r2, 800dffa <rclc_publisher_init_default+0x56>
 800dfb4:	461f      	mov	r7, r3
 800dfb6:	b303      	cbz	r3, 800dffa <rclc_publisher_init_default+0x56>
 800dfb8:	4604      	mov	r4, r0
 800dfba:	f7fe fb93 	bl	800c6e4 <rcl_get_zero_initialized_publisher>
 800dfbe:	f10d 0810 	add.w	r8, sp, #16
 800dfc2:	6020      	str	r0, [r4, #0]
 800dfc4:	4640      	mov	r0, r8
 800dfc6:	f7fe fc55 	bl	800c874 <rcl_publisher_get_default_options>
 800dfca:	490f      	ldr	r1, [pc, #60]	@ (800e008 <rclc_publisher_init_default+0x64>)
 800dfcc:	2250      	movs	r2, #80	@ 0x50
 800dfce:	4640      	mov	r0, r8
 800dfd0:	f00b fce9 	bl	80199a6 <memcpy>
 800dfd4:	f8cd 8000 	str.w	r8, [sp]
 800dfd8:	463b      	mov	r3, r7
 800dfda:	4632      	mov	r2, r6
 800dfdc:	4629      	mov	r1, r5
 800dfde:	4620      	mov	r0, r4
 800dfe0:	f7fe fb86 	bl	800c6f0 <rcl_publisher_init>
 800dfe4:	b910      	cbnz	r0, 800dfec <rclc_publisher_init_default+0x48>
 800dfe6:	b020      	add	sp, #128	@ 0x80
 800dfe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfec:	9003      	str	r0, [sp, #12]
 800dfee:	f000 f993 	bl	800e318 <rcutils_reset_error>
 800dff2:	9803      	ldr	r0, [sp, #12]
 800dff4:	b020      	add	sp, #128	@ 0x80
 800dff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dffa:	200b      	movs	r0, #11
 800dffc:	b020      	add	sp, #128	@ 0x80
 800dffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e002:	200b      	movs	r0, #11
 800e004:	4770      	bx	lr
 800e006:	bf00      	nop
 800e008:	0801b218 	.word	0x0801b218

0800e00c <rclc_subscription_init_default>:
 800e00c:	b368      	cbz	r0, 800e06a <rclc_subscription_init_default+0x5e>
 800e00e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e012:	460d      	mov	r5, r1
 800e014:	b0a0      	sub	sp, #128	@ 0x80
 800e016:	b321      	cbz	r1, 800e062 <rclc_subscription_init_default+0x56>
 800e018:	4616      	mov	r6, r2
 800e01a:	b312      	cbz	r2, 800e062 <rclc_subscription_init_default+0x56>
 800e01c:	461f      	mov	r7, r3
 800e01e:	b303      	cbz	r3, 800e062 <rclc_subscription_init_default+0x56>
 800e020:	4604      	mov	r4, r0
 800e022:	f7fe fca1 	bl	800c968 <rcl_get_zero_initialized_subscription>
 800e026:	f10d 0810 	add.w	r8, sp, #16
 800e02a:	6020      	str	r0, [r4, #0]
 800e02c:	4640      	mov	r0, r8
 800e02e:	f7fe fd9d 	bl	800cb6c <rcl_subscription_get_default_options>
 800e032:	490f      	ldr	r1, [pc, #60]	@ (800e070 <rclc_subscription_init_default+0x64>)
 800e034:	2250      	movs	r2, #80	@ 0x50
 800e036:	4640      	mov	r0, r8
 800e038:	f00b fcb5 	bl	80199a6 <memcpy>
 800e03c:	f8cd 8000 	str.w	r8, [sp]
 800e040:	463b      	mov	r3, r7
 800e042:	4632      	mov	r2, r6
 800e044:	4629      	mov	r1, r5
 800e046:	4620      	mov	r0, r4
 800e048:	f7fe fc94 	bl	800c974 <rcl_subscription_init>
 800e04c:	b910      	cbnz	r0, 800e054 <rclc_subscription_init_default+0x48>
 800e04e:	b020      	add	sp, #128	@ 0x80
 800e050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e054:	9003      	str	r0, [sp, #12]
 800e056:	f000 f95f 	bl	800e318 <rcutils_reset_error>
 800e05a:	9803      	ldr	r0, [sp, #12]
 800e05c:	b020      	add	sp, #128	@ 0x80
 800e05e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e062:	200b      	movs	r0, #11
 800e064:	b020      	add	sp, #128	@ 0x80
 800e066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e06a:	200b      	movs	r0, #11
 800e06c:	4770      	bx	lr
 800e06e:	bf00      	nop
 800e070:	0801b268 	.word	0x0801b268

0800e074 <rclc_timer_init_default>:
 800e074:	b360      	cbz	r0, 800e0d0 <rclc_timer_init_default+0x5c>
 800e076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e07a:	460e      	mov	r6, r1
 800e07c:	b08a      	sub	sp, #40	@ 0x28
 800e07e:	b319      	cbz	r1, 800e0c8 <rclc_timer_init_default+0x54>
 800e080:	4690      	mov	r8, r2
 800e082:	461f      	mov	r7, r3
 800e084:	4605      	mov	r5, r0
 800e086:	f7fe fea1 	bl	800cdcc <rcl_get_zero_initialized_timer>
 800e08a:	68b4      	ldr	r4, [r6, #8]
 800e08c:	6028      	str	r0, [r5, #0]
 800e08e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e090:	f10d 0c0c 	add.w	ip, sp, #12
 800e094:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e098:	6823      	ldr	r3, [r4, #0]
 800e09a:	f8cc 3000 	str.w	r3, [ip]
 800e09e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e0a0:	9302      	str	r3, [sp, #8]
 800e0a2:	e9cd 8700 	strd	r8, r7, [sp]
 800e0a6:	4628      	mov	r0, r5
 800e0a8:	4632      	mov	r2, r6
 800e0aa:	f106 010c 	add.w	r1, r6, #12
 800e0ae:	f7fe fe93 	bl	800cdd8 <rcl_timer_init>
 800e0b2:	b910      	cbnz	r0, 800e0ba <rclc_timer_init_default+0x46>
 800e0b4:	b00a      	add	sp, #40	@ 0x28
 800e0b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0ba:	9009      	str	r0, [sp, #36]	@ 0x24
 800e0bc:	f000 f92c 	bl	800e318 <rcutils_reset_error>
 800e0c0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e0c2:	b00a      	add	sp, #40	@ 0x28
 800e0c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0c8:	200b      	movs	r0, #11
 800e0ca:	b00a      	add	sp, #40	@ 0x28
 800e0cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0d0:	200b      	movs	r0, #11
 800e0d2:	4770      	bx	lr

0800e0d4 <__default_zero_allocate>:
 800e0d4:	f00a beae 	b.w	8018e34 <calloc>

0800e0d8 <__default_reallocate>:
 800e0d8:	f00b b84c 	b.w	8019174 <realloc>

0800e0dc <__default_deallocate>:
 800e0dc:	f00a bf28 	b.w	8018f30 <free>

0800e0e0 <__default_allocate>:
 800e0e0:	f00a bf1e 	b.w	8018f20 <malloc>

0800e0e4 <rcutils_get_zero_initialized_allocator>:
 800e0e4:	b510      	push	{r4, lr}
 800e0e6:	4c05      	ldr	r4, [pc, #20]	@ (800e0fc <rcutils_get_zero_initialized_allocator+0x18>)
 800e0e8:	4686      	mov	lr, r0
 800e0ea:	4684      	mov	ip, r0
 800e0ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e0ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e0f2:	6823      	ldr	r3, [r4, #0]
 800e0f4:	f8cc 3000 	str.w	r3, [ip]
 800e0f8:	4670      	mov	r0, lr
 800e0fa:	bd10      	pop	{r4, pc}
 800e0fc:	0801b2b8 	.word	0x0801b2b8

0800e100 <rcutils_set_default_allocator>:
 800e100:	b1a8      	cbz	r0, 800e12e <rcutils_set_default_allocator+0x2e>
 800e102:	6802      	ldr	r2, [r0, #0]
 800e104:	b1a2      	cbz	r2, 800e130 <rcutils_set_default_allocator+0x30>
 800e106:	6841      	ldr	r1, [r0, #4]
 800e108:	b1a1      	cbz	r1, 800e134 <rcutils_set_default_allocator+0x34>
 800e10a:	b410      	push	{r4}
 800e10c:	68c4      	ldr	r4, [r0, #12]
 800e10e:	b164      	cbz	r4, 800e12a <rcutils_set_default_allocator+0x2a>
 800e110:	6880      	ldr	r0, [r0, #8]
 800e112:	b138      	cbz	r0, 800e124 <rcutils_set_default_allocator+0x24>
 800e114:	4b08      	ldr	r3, [pc, #32]	@ (800e138 <rcutils_set_default_allocator+0x38>)
 800e116:	601a      	str	r2, [r3, #0]
 800e118:	2200      	movs	r2, #0
 800e11a:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800e11e:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800e122:	2001      	movs	r0, #1
 800e124:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e128:	4770      	bx	lr
 800e12a:	4620      	mov	r0, r4
 800e12c:	e7fa      	b.n	800e124 <rcutils_set_default_allocator+0x24>
 800e12e:	4770      	bx	lr
 800e130:	4610      	mov	r0, r2
 800e132:	4770      	bx	lr
 800e134:	4608      	mov	r0, r1
 800e136:	4770      	bx	lr
 800e138:	20000308 	.word	0x20000308

0800e13c <rcutils_get_default_allocator>:
 800e13c:	b510      	push	{r4, lr}
 800e13e:	4c05      	ldr	r4, [pc, #20]	@ (800e154 <rcutils_get_default_allocator+0x18>)
 800e140:	4686      	mov	lr, r0
 800e142:	4684      	mov	ip, r0
 800e144:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e146:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e14a:	6823      	ldr	r3, [r4, #0]
 800e14c:	f8cc 3000 	str.w	r3, [ip]
 800e150:	4670      	mov	r0, lr
 800e152:	bd10      	pop	{r4, pc}
 800e154:	20000308 	.word	0x20000308

0800e158 <rcutils_allocator_is_valid>:
 800e158:	b158      	cbz	r0, 800e172 <rcutils_allocator_is_valid+0x1a>
 800e15a:	6803      	ldr	r3, [r0, #0]
 800e15c:	b143      	cbz	r3, 800e170 <rcutils_allocator_is_valid+0x18>
 800e15e:	6843      	ldr	r3, [r0, #4]
 800e160:	b133      	cbz	r3, 800e170 <rcutils_allocator_is_valid+0x18>
 800e162:	68c3      	ldr	r3, [r0, #12]
 800e164:	b123      	cbz	r3, 800e170 <rcutils_allocator_is_valid+0x18>
 800e166:	6880      	ldr	r0, [r0, #8]
 800e168:	3800      	subs	r0, #0
 800e16a:	bf18      	it	ne
 800e16c:	2001      	movne	r0, #1
 800e16e:	4770      	bx	lr
 800e170:	4618      	mov	r0, r3
 800e172:	4770      	bx	lr

0800e174 <__atomic_load_8>:
 800e174:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800e178:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800e17c:	4a15      	ldr	r2, [pc, #84]	@ (800e1d4 <__atomic_load_8+0x60>)
 800e17e:	4b16      	ldr	r3, [pc, #88]	@ (800e1d8 <__atomic_load_8+0x64>)
 800e180:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800e184:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800e188:	fb02 f101 	mul.w	r1, r2, r1
 800e18c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800e190:	fba3 2301 	umull	r2, r3, r3, r1
 800e194:	091b      	lsrs	r3, r3, #4
 800e196:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800e19a:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 800e19e:	b4d0      	push	{r4, r6, r7}
 800e1a0:	4c0e      	ldr	r4, [pc, #56]	@ (800e1dc <__atomic_load_8+0x68>)
 800e1a2:	1ac9      	subs	r1, r1, r3
 800e1a4:	1862      	adds	r2, r4, r1
 800e1a6:	f04f 0c01 	mov.w	ip, #1
 800e1aa:	e8d2 3f4f 	ldrexb	r3, [r2]
 800e1ae:	e8c2 cf46 	strexb	r6, ip, [r2]
 800e1b2:	2e00      	cmp	r6, #0
 800e1b4:	d1f9      	bne.n	800e1aa <__atomic_load_8+0x36>
 800e1b6:	f3bf 8f5b 	dmb	ish
 800e1ba:	b2db      	uxtb	r3, r3
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d1f4      	bne.n	800e1aa <__atomic_load_8+0x36>
 800e1c0:	e9d0 6700 	ldrd	r6, r7, [r0]
 800e1c4:	f3bf 8f5b 	dmb	ish
 800e1c8:	5463      	strb	r3, [r4, r1]
 800e1ca:	4630      	mov	r0, r6
 800e1cc:	4639      	mov	r1, r7
 800e1ce:	bcd0      	pop	{r4, r6, r7}
 800e1d0:	4770      	bx	lr
 800e1d2:	bf00      	nop
 800e1d4:	27d4eb2d 	.word	0x27d4eb2d
 800e1d8:	b21642c9 	.word	0xb21642c9
 800e1dc:	2000cef8 	.word	0x2000cef8

0800e1e0 <__atomic_store_8>:
 800e1e0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800e1e4:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800e1e8:	b570      	push	{r4, r5, r6, lr}
 800e1ea:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800e1ee:	4c14      	ldr	r4, [pc, #80]	@ (800e240 <__atomic_store_8+0x60>)
 800e1f0:	4d14      	ldr	r5, [pc, #80]	@ (800e244 <__atomic_store_8+0x64>)
 800e1f2:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800e1f6:	fb04 f101 	mul.w	r1, r4, r1
 800e1fa:	4c13      	ldr	r4, [pc, #76]	@ (800e248 <__atomic_store_8+0x68>)
 800e1fc:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800e200:	fba4 4e01 	umull	r4, lr, r4, r1
 800e204:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 800e208:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 800e20c:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 800e210:	eba1 0e0e 	sub.w	lr, r1, lr
 800e214:	eb05 0c0e 	add.w	ip, r5, lr
 800e218:	f04f 0401 	mov.w	r4, #1
 800e21c:	e8dc 1f4f 	ldrexb	r1, [ip]
 800e220:	e8cc 4f46 	strexb	r6, r4, [ip]
 800e224:	2e00      	cmp	r6, #0
 800e226:	d1f9      	bne.n	800e21c <__atomic_store_8+0x3c>
 800e228:	f3bf 8f5b 	dmb	ish
 800e22c:	b2c9      	uxtb	r1, r1
 800e22e:	2900      	cmp	r1, #0
 800e230:	d1f4      	bne.n	800e21c <__atomic_store_8+0x3c>
 800e232:	e9c0 2300 	strd	r2, r3, [r0]
 800e236:	f3bf 8f5b 	dmb	ish
 800e23a:	f805 100e 	strb.w	r1, [r5, lr]
 800e23e:	bd70      	pop	{r4, r5, r6, pc}
 800e240:	27d4eb2d 	.word	0x27d4eb2d
 800e244:	2000cef8 	.word	0x2000cef8
 800e248:	b21642c9 	.word	0xb21642c9

0800e24c <__atomic_exchange_8>:
 800e24c:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 800e250:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 800e254:	4916      	ldr	r1, [pc, #88]	@ (800e2b0 <__atomic_exchange_8+0x64>)
 800e256:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 800e25a:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 800e25e:	fb01 fc0c 	mul.w	ip, r1, ip
 800e262:	4914      	ldr	r1, [pc, #80]	@ (800e2b4 <__atomic_exchange_8+0x68>)
 800e264:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 800e268:	b570      	push	{r4, r5, r6, lr}
 800e26a:	4605      	mov	r5, r0
 800e26c:	fba1 010c 	umull	r0, r1, r1, ip
 800e270:	0909      	lsrs	r1, r1, #4
 800e272:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 800e276:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 800e27a:	4e0f      	ldr	r6, [pc, #60]	@ (800e2b8 <__atomic_exchange_8+0x6c>)
 800e27c:	ebac 0c01 	sub.w	ip, ip, r1
 800e280:	eb06 010c 	add.w	r1, r6, ip
 800e284:	f04f 0e01 	mov.w	lr, #1
 800e288:	e8d1 4f4f 	ldrexb	r4, [r1]
 800e28c:	e8c1 ef40 	strexb	r0, lr, [r1]
 800e290:	2800      	cmp	r0, #0
 800e292:	d1f9      	bne.n	800e288 <__atomic_exchange_8+0x3c>
 800e294:	f3bf 8f5b 	dmb	ish
 800e298:	b2e4      	uxtb	r4, r4
 800e29a:	2c00      	cmp	r4, #0
 800e29c:	d1f4      	bne.n	800e288 <__atomic_exchange_8+0x3c>
 800e29e:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e2a2:	e9c5 2300 	strd	r2, r3, [r5]
 800e2a6:	f3bf 8f5b 	dmb	ish
 800e2aa:	f806 400c 	strb.w	r4, [r6, ip]
 800e2ae:	bd70      	pop	{r4, r5, r6, pc}
 800e2b0:	27d4eb2d 	.word	0x27d4eb2d
 800e2b4:	b21642c9 	.word	0xb21642c9
 800e2b8:	2000cef8 	.word	0x2000cef8

0800e2bc <rcutils_get_env>:
 800e2bc:	b168      	cbz	r0, 800e2da <rcutils_get_env+0x1e>
 800e2be:	b510      	push	{r4, lr}
 800e2c0:	460c      	mov	r4, r1
 800e2c2:	b129      	cbz	r1, 800e2d0 <rcutils_get_env+0x14>
 800e2c4:	f00a fde4 	bl	8018e90 <getenv>
 800e2c8:	b120      	cbz	r0, 800e2d4 <rcutils_get_env+0x18>
 800e2ca:	6020      	str	r0, [r4, #0]
 800e2cc:	2000      	movs	r0, #0
 800e2ce:	bd10      	pop	{r4, pc}
 800e2d0:	4803      	ldr	r0, [pc, #12]	@ (800e2e0 <rcutils_get_env+0x24>)
 800e2d2:	bd10      	pop	{r4, pc}
 800e2d4:	4b03      	ldr	r3, [pc, #12]	@ (800e2e4 <rcutils_get_env+0x28>)
 800e2d6:	6023      	str	r3, [r4, #0]
 800e2d8:	bd10      	pop	{r4, pc}
 800e2da:	4803      	ldr	r0, [pc, #12]	@ (800e2e8 <rcutils_get_env+0x2c>)
 800e2dc:	4770      	bx	lr
 800e2de:	bf00      	nop
 800e2e0:	0801a9f0 	.word	0x0801a9f0
 800e2e4:	0801af1c 	.word	0x0801af1c
 800e2e8:	0801a9d4 	.word	0x0801a9d4

0800e2ec <rcutils_get_error_string>:
 800e2ec:	4b06      	ldr	r3, [pc, #24]	@ (800e308 <rcutils_get_error_string+0x1c>)
 800e2ee:	781b      	ldrb	r3, [r3, #0]
 800e2f0:	b13b      	cbz	r3, 800e302 <rcutils_get_error_string+0x16>
 800e2f2:	4b06      	ldr	r3, [pc, #24]	@ (800e30c <rcutils_get_error_string+0x20>)
 800e2f4:	781a      	ldrb	r2, [r3, #0]
 800e2f6:	b90a      	cbnz	r2, 800e2fc <rcutils_get_error_string+0x10>
 800e2f8:	2201      	movs	r2, #1
 800e2fa:	701a      	strb	r2, [r3, #0]
 800e2fc:	4b04      	ldr	r3, [pc, #16]	@ (800e310 <rcutils_get_error_string+0x24>)
 800e2fe:	7818      	ldrb	r0, [r3, #0]
 800e300:	4770      	bx	lr
 800e302:	4b04      	ldr	r3, [pc, #16]	@ (800e314 <rcutils_get_error_string+0x28>)
 800e304:	7818      	ldrb	r0, [r3, #0]
 800e306:	4770      	bx	lr
 800e308:	2000cf0f 	.word	0x2000cf0f
 800e30c:	2000cf21 	.word	0x2000cf21
 800e310:	2000cf20 	.word	0x2000cf20
 800e314:	0801aa0c 	.word	0x0801aa0c

0800e318 <rcutils_reset_error>:
 800e318:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800e338 <rcutils_reset_error+0x20>
 800e31c:	4a08      	ldr	r2, [pc, #32]	@ (800e340 <rcutils_reset_error+0x28>)
 800e31e:	4809      	ldr	r0, [pc, #36]	@ (800e344 <rcutils_reset_error+0x2c>)
 800e320:	4909      	ldr	r1, [pc, #36]	@ (800e348 <rcutils_reset_error+0x30>)
 800e322:	2300      	movs	r3, #0
 800e324:	8013      	strh	r3, [r2, #0]
 800e326:	ed82 7b02 	vstr	d7, [r2, #8]
 800e32a:	4a08      	ldr	r2, [pc, #32]	@ (800e34c <rcutils_reset_error+0x34>)
 800e32c:	7003      	strb	r3, [r0, #0]
 800e32e:	700b      	strb	r3, [r1, #0]
 800e330:	7013      	strb	r3, [r2, #0]
 800e332:	4770      	bx	lr
 800e334:	f3af 8000 	nop.w
	...
 800e340:	2000cf10 	.word	0x2000cf10
 800e344:	2000cf21 	.word	0x2000cf21
 800e348:	2000cf20 	.word	0x2000cf20
 800e34c:	2000cf0f 	.word	0x2000cf0f

0800e350 <rcutils_format_string_limit>:
 800e350:	b40f      	push	{r0, r1, r2, r3}
 800e352:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e354:	b083      	sub	sp, #12
 800e356:	ac08      	add	r4, sp, #32
 800e358:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800e35a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e35e:	b34e      	cbz	r6, 800e3b4 <rcutils_format_string_limit+0x64>
 800e360:	a808      	add	r0, sp, #32
 800e362:	f7ff fef9 	bl	800e158 <rcutils_allocator_is_valid>
 800e366:	b328      	cbz	r0, 800e3b4 <rcutils_format_string_limit+0x64>
 800e368:	2100      	movs	r1, #0
 800e36a:	ab0f      	add	r3, sp, #60	@ 0x3c
 800e36c:	4632      	mov	r2, r6
 800e36e:	4608      	mov	r0, r1
 800e370:	e9cd 3300 	strd	r3, r3, [sp]
 800e374:	f000 f8f4 	bl	800e560 <rcutils_vsnprintf>
 800e378:	1c43      	adds	r3, r0, #1
 800e37a:	4605      	mov	r5, r0
 800e37c:	d01a      	beq.n	800e3b4 <rcutils_format_string_limit+0x64>
 800e37e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e380:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e382:	1c47      	adds	r7, r0, #1
 800e384:	429f      	cmp	r7, r3
 800e386:	bf84      	itt	hi
 800e388:	461f      	movhi	r7, r3
 800e38a:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 800e38e:	4638      	mov	r0, r7
 800e390:	9b08      	ldr	r3, [sp, #32]
 800e392:	4798      	blx	r3
 800e394:	4604      	mov	r4, r0
 800e396:	b168      	cbz	r0, 800e3b4 <rcutils_format_string_limit+0x64>
 800e398:	9b01      	ldr	r3, [sp, #4]
 800e39a:	4632      	mov	r2, r6
 800e39c:	4639      	mov	r1, r7
 800e39e:	f000 f8df 	bl	800e560 <rcutils_vsnprintf>
 800e3a2:	2800      	cmp	r0, #0
 800e3a4:	db02      	blt.n	800e3ac <rcutils_format_string_limit+0x5c>
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	5563      	strb	r3, [r4, r5]
 800e3aa:	e004      	b.n	800e3b6 <rcutils_format_string_limit+0x66>
 800e3ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3ae:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e3b0:	4620      	mov	r0, r4
 800e3b2:	4798      	blx	r3
 800e3b4:	2400      	movs	r4, #0
 800e3b6:	4620      	mov	r0, r4
 800e3b8:	b003      	add	sp, #12
 800e3ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e3be:	b004      	add	sp, #16
 800e3c0:	4770      	bx	lr
 800e3c2:	bf00      	nop

0800e3c4 <rcutils_repl_str>:
 800e3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3c8:	ed2d 8b02 	vpush	{d8}
 800e3cc:	b087      	sub	sp, #28
 800e3ce:	4680      	mov	r8, r0
 800e3d0:	4608      	mov	r0, r1
 800e3d2:	f8cd 8004 	str.w	r8, [sp, #4]
 800e3d6:	ee08 2a10 	vmov	s16, r2
 800e3da:	468a      	mov	sl, r1
 800e3dc:	4699      	mov	r9, r3
 800e3de:	f7f1 ff21 	bl	8000224 <strlen>
 800e3e2:	2600      	movs	r6, #0
 800e3e4:	4647      	mov	r7, r8
 800e3e6:	9002      	str	r0, [sp, #8]
 800e3e8:	46b3      	mov	fp, r6
 800e3ea:	2510      	movs	r5, #16
 800e3ec:	46b0      	mov	r8, r6
 800e3ee:	e01d      	b.n	800e42c <rcutils_repl_str+0x68>
 800e3f0:	f10b 0b01 	add.w	fp, fp, #1
 800e3f4:	455e      	cmp	r6, fp
 800e3f6:	d211      	bcs.n	800e41c <rcutils_repl_str+0x58>
 800e3f8:	442e      	add	r6, r5
 800e3fa:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800e3fe:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800e402:	00b1      	lsls	r1, r6, #2
 800e404:	4798      	blx	r3
 800e406:	2800      	cmp	r0, #0
 800e408:	f000 8088 	beq.w	800e51c <rcutils_repl_str+0x158>
 800e40c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e410:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800e414:	4680      	mov	r8, r0
 800e416:	bf28      	it	cs
 800e418:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 800e41c:	9a01      	ldr	r2, [sp, #4]
 800e41e:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800e422:	1aa2      	subs	r2, r4, r2
 800e424:	f843 2c04 	str.w	r2, [r3, #-4]
 800e428:	9b02      	ldr	r3, [sp, #8]
 800e42a:	18e7      	adds	r7, r4, r3
 800e42c:	4651      	mov	r1, sl
 800e42e:	4638      	mov	r0, r7
 800e430:	f00b fa17 	bl	8019862 <strstr>
 800e434:	4604      	mov	r4, r0
 800e436:	4640      	mov	r0, r8
 800e438:	2c00      	cmp	r4, #0
 800e43a:	d1d9      	bne.n	800e3f0 <rcutils_repl_str+0x2c>
 800e43c:	46b8      	mov	r8, r7
 800e43e:	4607      	mov	r7, r0
 800e440:	4640      	mov	r0, r8
 800e442:	f7f1 feef 	bl	8000224 <strlen>
 800e446:	9b01      	ldr	r3, [sp, #4]
 800e448:	eba8 0303 	sub.w	r3, r8, r3
 800e44c:	181c      	adds	r4, r3, r0
 800e44e:	9404      	str	r4, [sp, #16]
 800e450:	f1bb 0f00 	cmp.w	fp, #0
 800e454:	d04a      	beq.n	800e4ec <rcutils_repl_str+0x128>
 800e456:	ee18 0a10 	vmov	r0, s16
 800e45a:	f7f1 fee3 	bl	8000224 <strlen>
 800e45e:	9b02      	ldr	r3, [sp, #8]
 800e460:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800e464:	1ac3      	subs	r3, r0, r3
 800e466:	fb0b 4303 	mla	r3, fp, r3, r4
 800e46a:	461a      	mov	r2, r3
 800e46c:	9305      	str	r3, [sp, #20]
 800e46e:	4606      	mov	r6, r0
 800e470:	f8d9 3000 	ldr.w	r3, [r9]
 800e474:	1c50      	adds	r0, r2, #1
 800e476:	4798      	blx	r3
 800e478:	9003      	str	r0, [sp, #12]
 800e47a:	2800      	cmp	r0, #0
 800e47c:	d04f      	beq.n	800e51e <rcutils_repl_str+0x15a>
 800e47e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e482:	683a      	ldr	r2, [r7, #0]
 800e484:	4641      	mov	r1, r8
 800e486:	f00b fa8e 	bl	80199a6 <memcpy>
 800e48a:	683d      	ldr	r5, [r7, #0]
 800e48c:	9b03      	ldr	r3, [sp, #12]
 800e48e:	9701      	str	r7, [sp, #4]
 800e490:	46ba      	mov	sl, r7
 800e492:	441d      	add	r5, r3
 800e494:	9f02      	ldr	r7, [sp, #8]
 800e496:	f8cd 9008 	str.w	r9, [sp, #8]
 800e49a:	2401      	movs	r4, #1
 800e49c:	46d1      	mov	r9, sl
 800e49e:	ee18 aa10 	vmov	sl, s16
 800e4a2:	e00a      	b.n	800e4ba <rcutils_repl_str+0xf6>
 800e4a4:	f8d9 5000 	ldr.w	r5, [r9]
 800e4a8:	1aaa      	subs	r2, r5, r2
 800e4aa:	1885      	adds	r5, r0, r2
 800e4ac:	f00b fa7b 	bl	80199a6 <memcpy>
 800e4b0:	45a3      	cmp	fp, r4
 800e4b2:	f104 0201 	add.w	r2, r4, #1
 800e4b6:	d935      	bls.n	800e524 <rcutils_repl_str+0x160>
 800e4b8:	4614      	mov	r4, r2
 800e4ba:	4632      	mov	r2, r6
 800e4bc:	4651      	mov	r1, sl
 800e4be:	4628      	mov	r0, r5
 800e4c0:	f00b fa71 	bl	80199a6 <memcpy>
 800e4c4:	f859 2b04 	ldr.w	r2, [r9], #4
 800e4c8:	45a3      	cmp	fp, r4
 800e4ca:	443a      	add	r2, r7
 800e4cc:	eb05 0006 	add.w	r0, r5, r6
 800e4d0:	eb08 0102 	add.w	r1, r8, r2
 800e4d4:	d1e6      	bne.n	800e4a4 <rcutils_repl_str+0xe0>
 800e4d6:	9b04      	ldr	r3, [sp, #16]
 800e4d8:	1a9a      	subs	r2, r3, r2
 800e4da:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800e4de:	f00b fa62 	bl	80199a6 <memcpy>
 800e4e2:	9a03      	ldr	r2, [sp, #12]
 800e4e4:	9905      	ldr	r1, [sp, #20]
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	5453      	strb	r3, [r2, r1]
 800e4ea:	e00b      	b.n	800e504 <rcutils_repl_str+0x140>
 800e4ec:	4620      	mov	r0, r4
 800e4ee:	f8d9 3000 	ldr.w	r3, [r9]
 800e4f2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800e4f6:	3001      	adds	r0, #1
 800e4f8:	4798      	blx	r3
 800e4fa:	9003      	str	r0, [sp, #12]
 800e4fc:	b110      	cbz	r0, 800e504 <rcutils_repl_str+0x140>
 800e4fe:	9901      	ldr	r1, [sp, #4]
 800e500:	f00b fa49 	bl	8019996 <strcpy>
 800e504:	4638      	mov	r0, r7
 800e506:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e50a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800e50e:	4798      	blx	r3
 800e510:	9803      	ldr	r0, [sp, #12]
 800e512:	b007      	add	sp, #28
 800e514:	ecbd 8b02 	vpop	{d8}
 800e518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e51c:	4647      	mov	r7, r8
 800e51e:	2300      	movs	r3, #0
 800e520:	9303      	str	r3, [sp, #12]
 800e522:	e7ef      	b.n	800e504 <rcutils_repl_str+0x140>
 800e524:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800e528:	e7db      	b.n	800e4e2 <rcutils_repl_str+0x11e>
 800e52a:	bf00      	nop

0800e52c <rcutils_snprintf>:
 800e52c:	b40c      	push	{r2, r3}
 800e52e:	b530      	push	{r4, r5, lr}
 800e530:	b083      	sub	sp, #12
 800e532:	ab06      	add	r3, sp, #24
 800e534:	f853 2b04 	ldr.w	r2, [r3], #4
 800e538:	9301      	str	r3, [sp, #4]
 800e53a:	b152      	cbz	r2, 800e552 <rcutils_snprintf+0x26>
 800e53c:	b138      	cbz	r0, 800e54e <rcutils_snprintf+0x22>
 800e53e:	b141      	cbz	r1, 800e552 <rcutils_snprintf+0x26>
 800e540:	f00b f89c 	bl	801967c <vsniprintf>
 800e544:	b003      	add	sp, #12
 800e546:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e54a:	b002      	add	sp, #8
 800e54c:	4770      	bx	lr
 800e54e:	2900      	cmp	r1, #0
 800e550:	d0f6      	beq.n	800e540 <rcutils_snprintf+0x14>
 800e552:	f00b f9f3 	bl	801993c <__errno>
 800e556:	2316      	movs	r3, #22
 800e558:	6003      	str	r3, [r0, #0]
 800e55a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e55e:	e7f1      	b.n	800e544 <rcutils_snprintf+0x18>

0800e560 <rcutils_vsnprintf>:
 800e560:	b570      	push	{r4, r5, r6, lr}
 800e562:	b13a      	cbz	r2, 800e574 <rcutils_vsnprintf+0x14>
 800e564:	b120      	cbz	r0, 800e570 <rcutils_vsnprintf+0x10>
 800e566:	b129      	cbz	r1, 800e574 <rcutils_vsnprintf+0x14>
 800e568:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e56c:	f00b b886 	b.w	801967c <vsniprintf>
 800e570:	2900      	cmp	r1, #0
 800e572:	d0f9      	beq.n	800e568 <rcutils_vsnprintf+0x8>
 800e574:	f00b f9e2 	bl	801993c <__errno>
 800e578:	2316      	movs	r3, #22
 800e57a:	6003      	str	r3, [r0, #0]
 800e57c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e580:	bd70      	pop	{r4, r5, r6, pc}
 800e582:	bf00      	nop

0800e584 <rcutils_strdup>:
 800e584:	b084      	sub	sp, #16
 800e586:	b570      	push	{r4, r5, r6, lr}
 800e588:	b082      	sub	sp, #8
 800e58a:	ac07      	add	r4, sp, #28
 800e58c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800e590:	4605      	mov	r5, r0
 800e592:	b1b0      	cbz	r0, 800e5c2 <rcutils_strdup+0x3e>
 800e594:	f7f1 fe46 	bl	8000224 <strlen>
 800e598:	1c42      	adds	r2, r0, #1
 800e59a:	9b07      	ldr	r3, [sp, #28]
 800e59c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e59e:	9201      	str	r2, [sp, #4]
 800e5a0:	4606      	mov	r6, r0
 800e5a2:	4610      	mov	r0, r2
 800e5a4:	4798      	blx	r3
 800e5a6:	4604      	mov	r4, r0
 800e5a8:	b128      	cbz	r0, 800e5b6 <rcutils_strdup+0x32>
 800e5aa:	9a01      	ldr	r2, [sp, #4]
 800e5ac:	4629      	mov	r1, r5
 800e5ae:	f00b f9fa 	bl	80199a6 <memcpy>
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	55a3      	strb	r3, [r4, r6]
 800e5b6:	4620      	mov	r0, r4
 800e5b8:	b002      	add	sp, #8
 800e5ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e5be:	b004      	add	sp, #16
 800e5c0:	4770      	bx	lr
 800e5c2:	4604      	mov	r4, r0
 800e5c4:	e7f7      	b.n	800e5b6 <rcutils_strdup+0x32>
 800e5c6:	bf00      	nop

0800e5c8 <rcutils_strndup>:
 800e5c8:	b082      	sub	sp, #8
 800e5ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5cc:	ac06      	add	r4, sp, #24
 800e5ce:	e884 000c 	stmia.w	r4, {r2, r3}
 800e5d2:	4605      	mov	r5, r0
 800e5d4:	b188      	cbz	r0, 800e5fa <rcutils_strndup+0x32>
 800e5d6:	1c4f      	adds	r7, r1, #1
 800e5d8:	460e      	mov	r6, r1
 800e5da:	4638      	mov	r0, r7
 800e5dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e5de:	4790      	blx	r2
 800e5e0:	4604      	mov	r4, r0
 800e5e2:	b128      	cbz	r0, 800e5f0 <rcutils_strndup+0x28>
 800e5e4:	463a      	mov	r2, r7
 800e5e6:	4629      	mov	r1, r5
 800e5e8:	f00b f9dd 	bl	80199a6 <memcpy>
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	55a3      	strb	r3, [r4, r6]
 800e5f0:	4620      	mov	r0, r4
 800e5f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e5f6:	b002      	add	sp, #8
 800e5f8:	4770      	bx	lr
 800e5fa:	4604      	mov	r4, r0
 800e5fc:	e7f8      	b.n	800e5f0 <rcutils_strndup+0x28>
 800e5fe:	bf00      	nop

0800e600 <rcutils_system_time_now>:
 800e600:	b308      	cbz	r0, 800e646 <rcutils_system_time_now+0x46>
 800e602:	b570      	push	{r4, r5, r6, lr}
 800e604:	b084      	sub	sp, #16
 800e606:	4604      	mov	r4, r0
 800e608:	4669      	mov	r1, sp
 800e60a:	2001      	movs	r0, #1
 800e60c:	f7f4 f9d8 	bl	80029c0 <clock_gettime>
 800e610:	e9dd 3500 	ldrd	r3, r5, [sp]
 800e614:	2d00      	cmp	r5, #0
 800e616:	db13      	blt.n	800e640 <rcutils_system_time_now+0x40>
 800e618:	9902      	ldr	r1, [sp, #8]
 800e61a:	2900      	cmp	r1, #0
 800e61c:	db0d      	blt.n	800e63a <rcutils_system_time_now+0x3a>
 800e61e:	4e0b      	ldr	r6, [pc, #44]	@ (800e64c <rcutils_system_time_now+0x4c>)
 800e620:	fba3 3206 	umull	r3, r2, r3, r6
 800e624:	185b      	adds	r3, r3, r1
 800e626:	fb06 2205 	mla	r2, r6, r5, r2
 800e62a:	f04f 0000 	mov.w	r0, #0
 800e62e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800e632:	e9c4 3200 	strd	r3, r2, [r4]
 800e636:	b004      	add	sp, #16
 800e638:	bd70      	pop	{r4, r5, r6, pc}
 800e63a:	ea53 0205 	orrs.w	r2, r3, r5
 800e63e:	d1ee      	bne.n	800e61e <rcutils_system_time_now+0x1e>
 800e640:	2002      	movs	r0, #2
 800e642:	b004      	add	sp, #16
 800e644:	bd70      	pop	{r4, r5, r6, pc}
 800e646:	200b      	movs	r0, #11
 800e648:	4770      	bx	lr
 800e64a:	bf00      	nop
 800e64c:	3b9aca00 	.word	0x3b9aca00

0800e650 <rcutils_steady_time_now>:
 800e650:	b308      	cbz	r0, 800e696 <rcutils_steady_time_now+0x46>
 800e652:	b570      	push	{r4, r5, r6, lr}
 800e654:	b084      	sub	sp, #16
 800e656:	4604      	mov	r4, r0
 800e658:	4669      	mov	r1, sp
 800e65a:	2000      	movs	r0, #0
 800e65c:	f7f4 f9b0 	bl	80029c0 <clock_gettime>
 800e660:	e9dd 3500 	ldrd	r3, r5, [sp]
 800e664:	2d00      	cmp	r5, #0
 800e666:	db13      	blt.n	800e690 <rcutils_steady_time_now+0x40>
 800e668:	9902      	ldr	r1, [sp, #8]
 800e66a:	2900      	cmp	r1, #0
 800e66c:	db0d      	blt.n	800e68a <rcutils_steady_time_now+0x3a>
 800e66e:	4e0b      	ldr	r6, [pc, #44]	@ (800e69c <rcutils_steady_time_now+0x4c>)
 800e670:	fba3 3206 	umull	r3, r2, r3, r6
 800e674:	185b      	adds	r3, r3, r1
 800e676:	fb06 2205 	mla	r2, r6, r5, r2
 800e67a:	f04f 0000 	mov.w	r0, #0
 800e67e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800e682:	e9c4 3200 	strd	r3, r2, [r4]
 800e686:	b004      	add	sp, #16
 800e688:	bd70      	pop	{r4, r5, r6, pc}
 800e68a:	ea53 0205 	orrs.w	r2, r3, r5
 800e68e:	d1ee      	bne.n	800e66e <rcutils_steady_time_now+0x1e>
 800e690:	2002      	movs	r0, #2
 800e692:	b004      	add	sp, #16
 800e694:	bd70      	pop	{r4, r5, r6, pc}
 800e696:	200b      	movs	r0, #11
 800e698:	4770      	bx	lr
 800e69a:	bf00      	nop
 800e69c:	3b9aca00 	.word	0x3b9aca00

0800e6a0 <rmw_get_zero_initialized_init_options>:
 800e6a0:	b510      	push	{r4, lr}
 800e6a2:	2238      	movs	r2, #56	@ 0x38
 800e6a4:	4604      	mov	r4, r0
 800e6a6:	2100      	movs	r1, #0
 800e6a8:	f00b f8b4 	bl	8019814 <memset>
 800e6ac:	f104 0010 	add.w	r0, r4, #16
 800e6b0:	f000 f80a 	bl	800e6c8 <rmw_get_default_security_options>
 800e6b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e6b8:	60e3      	str	r3, [r4, #12]
 800e6ba:	4620      	mov	r0, r4
 800e6bc:	bd10      	pop	{r4, pc}
 800e6be:	bf00      	nop

0800e6c0 <rmw_get_default_publisher_options>:
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	6002      	str	r2, [r0, #0]
 800e6c4:	7102      	strb	r2, [r0, #4]
 800e6c6:	4770      	bx	lr

0800e6c8 <rmw_get_default_security_options>:
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	7002      	strb	r2, [r0, #0]
 800e6cc:	6042      	str	r2, [r0, #4]
 800e6ce:	4770      	bx	lr

0800e6d0 <rmw_subscription_content_filter_options_fini>:
 800e6d0:	b1b0      	cbz	r0, 800e700 <rmw_subscription_content_filter_options_fini+0x30>
 800e6d2:	b538      	push	{r3, r4, r5, lr}
 800e6d4:	4604      	mov	r4, r0
 800e6d6:	4608      	mov	r0, r1
 800e6d8:	460d      	mov	r5, r1
 800e6da:	f7ff fd3d 	bl	800e158 <rcutils_allocator_is_valid>
 800e6de:	b168      	cbz	r0, 800e6fc <rmw_subscription_content_filter_options_fini+0x2c>
 800e6e0:	6820      	ldr	r0, [r4, #0]
 800e6e2:	b120      	cbz	r0, 800e6ee <rmw_subscription_content_filter_options_fini+0x1e>
 800e6e4:	686b      	ldr	r3, [r5, #4]
 800e6e6:	6929      	ldr	r1, [r5, #16]
 800e6e8:	4798      	blx	r3
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	6023      	str	r3, [r4, #0]
 800e6ee:	1d20      	adds	r0, r4, #4
 800e6f0:	f008 f952 	bl	8016998 <rcutils_string_array_fini>
 800e6f4:	3800      	subs	r0, #0
 800e6f6:	bf18      	it	ne
 800e6f8:	2001      	movne	r0, #1
 800e6fa:	bd38      	pop	{r3, r4, r5, pc}
 800e6fc:	200b      	movs	r0, #11
 800e6fe:	bd38      	pop	{r3, r4, r5, pc}
 800e700:	200b      	movs	r0, #11
 800e702:	4770      	bx	lr

0800e704 <rmw_get_default_subscription_options>:
 800e704:	2200      	movs	r2, #0
 800e706:	e9c0 2200 	strd	r2, r2, [r0]
 800e70a:	6082      	str	r2, [r0, #8]
 800e70c:	4770      	bx	lr
 800e70e:	bf00      	nop

0800e710 <rmw_get_zero_initialized_message_info>:
 800e710:	b510      	push	{r4, lr}
 800e712:	2240      	movs	r2, #64	@ 0x40
 800e714:	4604      	mov	r4, r0
 800e716:	2100      	movs	r1, #0
 800e718:	f00b f87c 	bl	8019814 <memset>
 800e71c:	4620      	mov	r0, r4
 800e71e:	bd10      	pop	{r4, pc}

0800e720 <rmw_validate_namespace_with_size>:
 800e720:	b340      	cbz	r0, 800e774 <rmw_validate_namespace_with_size+0x54>
 800e722:	b570      	push	{r4, r5, r6, lr}
 800e724:	4614      	mov	r4, r2
 800e726:	b0c2      	sub	sp, #264	@ 0x108
 800e728:	b332      	cbz	r2, 800e778 <rmw_validate_namespace_with_size+0x58>
 800e72a:	2901      	cmp	r1, #1
 800e72c:	460d      	mov	r5, r1
 800e72e:	461e      	mov	r6, r3
 800e730:	d102      	bne.n	800e738 <rmw_validate_namespace_with_size+0x18>
 800e732:	7803      	ldrb	r3, [r0, #0]
 800e734:	2b2f      	cmp	r3, #47	@ 0x2f
 800e736:	d012      	beq.n	800e75e <rmw_validate_namespace_with_size+0x3e>
 800e738:	aa01      	add	r2, sp, #4
 800e73a:	4669      	mov	r1, sp
 800e73c:	f008 fb14 	bl	8016d68 <rmw_validate_full_topic_name>
 800e740:	b978      	cbnz	r0, 800e762 <rmw_validate_namespace_with_size+0x42>
 800e742:	9b00      	ldr	r3, [sp, #0]
 800e744:	b14b      	cbz	r3, 800e75a <rmw_validate_namespace_with_size+0x3a>
 800e746:	2b07      	cmp	r3, #7
 800e748:	d007      	beq.n	800e75a <rmw_validate_namespace_with_size+0x3a>
 800e74a:	1e5a      	subs	r2, r3, #1
 800e74c:	2a05      	cmp	r2, #5
 800e74e:	d82b      	bhi.n	800e7a8 <rmw_validate_namespace_with_size+0x88>
 800e750:	e8df f002 	tbb	[pc, r2]
 800e754:	1e212427 	.word	0x1e212427
 800e758:	141b      	.short	0x141b
 800e75a:	2df5      	cmp	r5, #245	@ 0xf5
 800e75c:	d803      	bhi.n	800e766 <rmw_validate_namespace_with_size+0x46>
 800e75e:	2000      	movs	r0, #0
 800e760:	6020      	str	r0, [r4, #0]
 800e762:	b042      	add	sp, #264	@ 0x108
 800e764:	bd70      	pop	{r4, r5, r6, pc}
 800e766:	2307      	movs	r3, #7
 800e768:	6023      	str	r3, [r4, #0]
 800e76a:	2e00      	cmp	r6, #0
 800e76c:	d0f9      	beq.n	800e762 <rmw_validate_namespace_with_size+0x42>
 800e76e:	23f4      	movs	r3, #244	@ 0xf4
 800e770:	6033      	str	r3, [r6, #0]
 800e772:	e7f6      	b.n	800e762 <rmw_validate_namespace_with_size+0x42>
 800e774:	200b      	movs	r0, #11
 800e776:	4770      	bx	lr
 800e778:	200b      	movs	r0, #11
 800e77a:	e7f2      	b.n	800e762 <rmw_validate_namespace_with_size+0x42>
 800e77c:	2306      	movs	r3, #6
 800e77e:	6023      	str	r3, [r4, #0]
 800e780:	2e00      	cmp	r6, #0
 800e782:	d0ee      	beq.n	800e762 <rmw_validate_namespace_with_size+0x42>
 800e784:	9b01      	ldr	r3, [sp, #4]
 800e786:	6033      	str	r3, [r6, #0]
 800e788:	e7eb      	b.n	800e762 <rmw_validate_namespace_with_size+0x42>
 800e78a:	2305      	movs	r3, #5
 800e78c:	6023      	str	r3, [r4, #0]
 800e78e:	e7f7      	b.n	800e780 <rmw_validate_namespace_with_size+0x60>
 800e790:	2304      	movs	r3, #4
 800e792:	6023      	str	r3, [r4, #0]
 800e794:	e7f4      	b.n	800e780 <rmw_validate_namespace_with_size+0x60>
 800e796:	2303      	movs	r3, #3
 800e798:	6023      	str	r3, [r4, #0]
 800e79a:	e7f1      	b.n	800e780 <rmw_validate_namespace_with_size+0x60>
 800e79c:	2302      	movs	r3, #2
 800e79e:	6023      	str	r3, [r4, #0]
 800e7a0:	e7ee      	b.n	800e780 <rmw_validate_namespace_with_size+0x60>
 800e7a2:	2301      	movs	r3, #1
 800e7a4:	6023      	str	r3, [r4, #0]
 800e7a6:	e7eb      	b.n	800e780 <rmw_validate_namespace_with_size+0x60>
 800e7a8:	4a03      	ldr	r2, [pc, #12]	@ (800e7b8 <rmw_validate_namespace_with_size+0x98>)
 800e7aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800e7ae:	a802      	add	r0, sp, #8
 800e7b0:	f7ff febc 	bl	800e52c <rcutils_snprintf>
 800e7b4:	2001      	movs	r0, #1
 800e7b6:	e7d4      	b.n	800e762 <rmw_validate_namespace_with_size+0x42>
 800e7b8:	0801aa10 	.word	0x0801aa10

0800e7bc <rmw_validate_namespace>:
 800e7bc:	b168      	cbz	r0, 800e7da <rmw_validate_namespace+0x1e>
 800e7be:	b570      	push	{r4, r5, r6, lr}
 800e7c0:	460d      	mov	r5, r1
 800e7c2:	4616      	mov	r6, r2
 800e7c4:	4604      	mov	r4, r0
 800e7c6:	f7f1 fd2d 	bl	8000224 <strlen>
 800e7ca:	4633      	mov	r3, r6
 800e7cc:	4601      	mov	r1, r0
 800e7ce:	462a      	mov	r2, r5
 800e7d0:	4620      	mov	r0, r4
 800e7d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e7d6:	f7ff bfa3 	b.w	800e720 <rmw_validate_namespace_with_size>
 800e7da:	200b      	movs	r0, #11
 800e7dc:	4770      	bx	lr
 800e7de:	bf00      	nop

0800e7e0 <rmw_namespace_validation_result_string>:
 800e7e0:	2807      	cmp	r0, #7
 800e7e2:	bf9a      	itte	ls
 800e7e4:	4b02      	ldrls	r3, [pc, #8]	@ (800e7f0 <rmw_namespace_validation_result_string+0x10>)
 800e7e6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800e7ea:	4802      	ldrhi	r0, [pc, #8]	@ (800e7f4 <rmw_namespace_validation_result_string+0x14>)
 800e7ec:	4770      	bx	lr
 800e7ee:	bf00      	nop
 800e7f0:	0801b2cc 	.word	0x0801b2cc
 800e7f4:	0801aa60 	.word	0x0801aa60

0800e7f8 <rmw_validate_node_name>:
 800e7f8:	2800      	cmp	r0, #0
 800e7fa:	d03b      	beq.n	800e874 <rmw_validate_node_name+0x7c>
 800e7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e800:	460d      	mov	r5, r1
 800e802:	2900      	cmp	r1, #0
 800e804:	d038      	beq.n	800e878 <rmw_validate_node_name+0x80>
 800e806:	4616      	mov	r6, r2
 800e808:	4604      	mov	r4, r0
 800e80a:	f7f1 fd0b 	bl	8000224 <strlen>
 800e80e:	b1e0      	cbz	r0, 800e84a <rmw_validate_node_name+0x52>
 800e810:	1e63      	subs	r3, r4, #1
 800e812:	eb03 0800 	add.w	r8, r3, r0
 800e816:	f1c4 0101 	rsb	r1, r4, #1
 800e81a:	18cf      	adds	r7, r1, r3
 800e81c:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800e820:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 800e824:	f02e 0c20 	bic.w	ip, lr, #32
 800e828:	2a09      	cmp	r2, #9
 800e82a:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 800e82e:	d914      	bls.n	800e85a <rmw_validate_node_name+0x62>
 800e830:	f1bc 0f19 	cmp.w	ip, #25
 800e834:	d911      	bls.n	800e85a <rmw_validate_node_name+0x62>
 800e836:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800e83a:	d00e      	beq.n	800e85a <rmw_validate_node_name+0x62>
 800e83c:	2302      	movs	r3, #2
 800e83e:	602b      	str	r3, [r5, #0]
 800e840:	b106      	cbz	r6, 800e844 <rmw_validate_node_name+0x4c>
 800e842:	6037      	str	r7, [r6, #0]
 800e844:	2000      	movs	r0, #0
 800e846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e84a:	2301      	movs	r3, #1
 800e84c:	602b      	str	r3, [r5, #0]
 800e84e:	2e00      	cmp	r6, #0
 800e850:	d0f8      	beq.n	800e844 <rmw_validate_node_name+0x4c>
 800e852:	2000      	movs	r0, #0
 800e854:	6030      	str	r0, [r6, #0]
 800e856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e85a:	4543      	cmp	r3, r8
 800e85c:	d1dd      	bne.n	800e81a <rmw_validate_node_name+0x22>
 800e85e:	7822      	ldrb	r2, [r4, #0]
 800e860:	4b0d      	ldr	r3, [pc, #52]	@ (800e898 <rmw_validate_node_name+0xa0>)
 800e862:	5cd3      	ldrb	r3, [r2, r3]
 800e864:	f013 0304 	ands.w	r3, r3, #4
 800e868:	d110      	bne.n	800e88c <rmw_validate_node_name+0x94>
 800e86a:	28ff      	cmp	r0, #255	@ 0xff
 800e86c:	d806      	bhi.n	800e87c <rmw_validate_node_name+0x84>
 800e86e:	602b      	str	r3, [r5, #0]
 800e870:	4618      	mov	r0, r3
 800e872:	e7e8      	b.n	800e846 <rmw_validate_node_name+0x4e>
 800e874:	200b      	movs	r0, #11
 800e876:	4770      	bx	lr
 800e878:	200b      	movs	r0, #11
 800e87a:	e7e4      	b.n	800e846 <rmw_validate_node_name+0x4e>
 800e87c:	2204      	movs	r2, #4
 800e87e:	602a      	str	r2, [r5, #0]
 800e880:	2e00      	cmp	r6, #0
 800e882:	d0df      	beq.n	800e844 <rmw_validate_node_name+0x4c>
 800e884:	22fe      	movs	r2, #254	@ 0xfe
 800e886:	6032      	str	r2, [r6, #0]
 800e888:	4618      	mov	r0, r3
 800e88a:	e7dc      	b.n	800e846 <rmw_validate_node_name+0x4e>
 800e88c:	2303      	movs	r3, #3
 800e88e:	602b      	str	r3, [r5, #0]
 800e890:	2e00      	cmp	r6, #0
 800e892:	d1de      	bne.n	800e852 <rmw_validate_node_name+0x5a>
 800e894:	e7d6      	b.n	800e844 <rmw_validate_node_name+0x4c>
 800e896:	bf00      	nop
 800e898:	0801b7d7 	.word	0x0801b7d7

0800e89c <rmw_node_name_validation_result_string>:
 800e89c:	2804      	cmp	r0, #4
 800e89e:	bf9a      	itte	ls
 800e8a0:	4b02      	ldrls	r3, [pc, #8]	@ (800e8ac <rmw_node_name_validation_result_string+0x10>)
 800e8a2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800e8a6:	4802      	ldrhi	r0, [pc, #8]	@ (800e8b0 <rmw_node_name_validation_result_string+0x14>)
 800e8a8:	4770      	bx	lr
 800e8aa:	bf00      	nop
 800e8ac:	0801b2ec 	.word	0x0801b2ec
 800e8b0:	0801ac08 	.word	0x0801ac08

0800e8b4 <rmw_uros_set_custom_transport>:
 800e8b4:	b470      	push	{r4, r5, r6}
 800e8b6:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800e8ba:	b162      	cbz	r2, 800e8d6 <rmw_uros_set_custom_transport+0x22>
 800e8bc:	b15b      	cbz	r3, 800e8d6 <rmw_uros_set_custom_transport+0x22>
 800e8be:	b155      	cbz	r5, 800e8d6 <rmw_uros_set_custom_transport+0x22>
 800e8c0:	b14e      	cbz	r6, 800e8d6 <rmw_uros_set_custom_transport+0x22>
 800e8c2:	4c06      	ldr	r4, [pc, #24]	@ (800e8dc <rmw_uros_set_custom_transport+0x28>)
 800e8c4:	7020      	strb	r0, [r4, #0]
 800e8c6:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800e8ca:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e8ce:	6166      	str	r6, [r4, #20]
 800e8d0:	2000      	movs	r0, #0
 800e8d2:	bc70      	pop	{r4, r5, r6}
 800e8d4:	4770      	bx	lr
 800e8d6:	200b      	movs	r0, #11
 800e8d8:	bc70      	pop	{r4, r5, r6}
 800e8da:	4770      	bx	lr
 800e8dc:	2000cf24 	.word	0x2000cf24

0800e8e0 <rmw_uros_ping_agent>:
 800e8e0:	b570      	push	{r4, r5, r6, lr}
 800e8e2:	4b22      	ldr	r3, [pc, #136]	@ (800e96c <rmw_uros_ping_agent+0x8c>)
 800e8e4:	7b1a      	ldrb	r2, [r3, #12]
 800e8e6:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800e8ea:	4605      	mov	r5, r0
 800e8ec:	460e      	mov	r6, r1
 800e8ee:	b10a      	cbz	r2, 800e8f4 <rmw_uros_ping_agent+0x14>
 800e8f0:	681c      	ldr	r4, [r3, #0]
 800e8f2:	b9bc      	cbnz	r4, 800e924 <rmw_uros_ping_agent+0x44>
 800e8f4:	4b1e      	ldr	r3, [pc, #120]	@ (800e970 <rmw_uros_ping_agent+0x90>)
 800e8f6:	781a      	ldrb	r2, [r3, #0]
 800e8f8:	6918      	ldr	r0, [r3, #16]
 800e8fa:	f88d 2200 	strb.w	r2, [sp, #512]	@ 0x200
 800e8fe:	685a      	ldr	r2, [r3, #4]
 800e900:	92a3      	str	r2, [sp, #652]	@ 0x28c
 800e902:	2100      	movs	r1, #0
 800e904:	68da      	ldr	r2, [r3, #12]
 800e906:	909c      	str	r0, [sp, #624]	@ 0x270
 800e908:	6958      	ldr	r0, [r3, #20]
 800e90a:	929b      	str	r2, [sp, #620]	@ 0x26c
 800e90c:	689b      	ldr	r3, [r3, #8]
 800e90e:	909d      	str	r0, [sp, #628]	@ 0x274
 800e910:	466a      	mov	r2, sp
 800e912:	4608      	mov	r0, r1
 800e914:	939a      	str	r3, [sp, #616]	@ 0x268
 800e916:	f000 ffbd 	bl	800f894 <rmw_uxrce_transport_init>
 800e91a:	b198      	cbz	r0, 800e944 <rmw_uros_ping_agent+0x64>
 800e91c:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800e920:	bd70      	pop	{r4, r5, r6, pc}
 800e922:	b9f0      	cbnz	r0, 800e962 <rmw_uros_ping_agent+0x82>
 800e924:	68a0      	ldr	r0, [r4, #8]
 800e926:	4632      	mov	r2, r6
 800e928:	4629      	mov	r1, r5
 800e92a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e92e:	f002 fba1 	bl	8011074 <uxr_ping_agent_session>
 800e932:	6864      	ldr	r4, [r4, #4]
 800e934:	2c00      	cmp	r4, #0
 800e936:	d1f4      	bne.n	800e922 <rmw_uros_ping_agent+0x42>
 800e938:	f080 0001 	eor.w	r0, r0, #1
 800e93c:	b2c0      	uxtb	r0, r0
 800e93e:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800e942:	bd70      	pop	{r4, r5, r6, pc}
 800e944:	4632      	mov	r2, r6
 800e946:	4629      	mov	r1, r5
 800e948:	a89e      	add	r0, sp, #632	@ 0x278
 800e94a:	f002 fbdf 	bl	801110c <uxr_ping_agent_attempts>
 800e94e:	4604      	mov	r4, r0
 800e950:	4668      	mov	r0, sp
 800e952:	f002 fb5b 	bl	801100c <uxr_close_custom_transport>
 800e956:	f084 0001 	eor.w	r0, r4, #1
 800e95a:	b2c0      	uxtb	r0, r0
 800e95c:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800e960:	bd70      	pop	{r4, r5, r6, pc}
 800e962:	2000      	movs	r0, #0
 800e964:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800e968:	bd70      	pop	{r4, r5, r6, pc}
 800e96a:	bf00      	nop
 800e96c:	2001187c 	.word	0x2001187c
 800e970:	2000cf24 	.word	0x2000cf24

0800e974 <rmw_init_options_init>:
 800e974:	b084      	sub	sp, #16
 800e976:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e978:	b083      	sub	sp, #12
 800e97a:	ad09      	add	r5, sp, #36	@ 0x24
 800e97c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800e980:	b130      	cbz	r0, 800e990 <rmw_init_options_init+0x1c>
 800e982:	4604      	mov	r4, r0
 800e984:	4628      	mov	r0, r5
 800e986:	f7ff fbe7 	bl	800e158 <rcutils_allocator_is_valid>
 800e98a:	b108      	cbz	r0, 800e990 <rmw_init_options_init+0x1c>
 800e98c:	68a6      	ldr	r6, [r4, #8]
 800e98e:	b12e      	cbz	r6, 800e99c <rmw_init_options_init+0x28>
 800e990:	200b      	movs	r0, #11
 800e992:	b003      	add	sp, #12
 800e994:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e998:	b004      	add	sp, #16
 800e99a:	4770      	bx	lr
 800e99c:	2200      	movs	r2, #0
 800e99e:	2300      	movs	r3, #0
 800e9a0:	e9c4 2300 	strd	r2, r3, [r4]
 800e9a4:	4b20      	ldr	r3, [pc, #128]	@ (800ea28 <rmw_init_options_init+0xb4>)
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	60a3      	str	r3, [r4, #8]
 800e9aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e9ac:	f104 0c20 	add.w	ip, r4, #32
 800e9b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e9b4:	466f      	mov	r7, sp
 800e9b6:	682b      	ldr	r3, [r5, #0]
 800e9b8:	f8cc 3000 	str.w	r3, [ip]
 800e9bc:	4638      	mov	r0, r7
 800e9be:	61e6      	str	r6, [r4, #28]
 800e9c0:	60e6      	str	r6, [r4, #12]
 800e9c2:	f7ff fe81 	bl	800e6c8 <rmw_get_default_security_options>
 800e9c6:	e897 0003 	ldmia.w	r7, {r0, r1}
 800e9ca:	f104 0310 	add.w	r3, r4, #16
 800e9ce:	e883 0003 	stmia.w	r3, {r0, r1}
 800e9d2:	2203      	movs	r2, #3
 800e9d4:	4815      	ldr	r0, [pc, #84]	@ (800ea2c <rmw_init_options_init+0xb8>)
 800e9d6:	4916      	ldr	r1, [pc, #88]	@ (800ea30 <rmw_init_options_init+0xbc>)
 800e9d8:	7626      	strb	r6, [r4, #24]
 800e9da:	f001 f88b 	bl	800faf4 <rmw_uxrce_init_init_options_impl_memory>
 800e9de:	4813      	ldr	r0, [pc, #76]	@ (800ea2c <rmw_init_options_init+0xb8>)
 800e9e0:	f008 fb20 	bl	8017024 <get_memory>
 800e9e4:	b1f0      	cbz	r0, 800ea24 <rmw_init_options_init+0xb0>
 800e9e6:	4a13      	ldr	r2, [pc, #76]	@ (800ea34 <rmw_init_options_init+0xc0>)
 800e9e8:	6883      	ldr	r3, [r0, #8]
 800e9ea:	6851      	ldr	r1, [r2, #4]
 800e9ec:	7810      	ldrb	r0, [r2, #0]
 800e9ee:	6363      	str	r3, [r4, #52]	@ 0x34
 800e9f0:	7418      	strb	r0, [r3, #16]
 800e9f2:	6159      	str	r1, [r3, #20]
 800e9f4:	68d1      	ldr	r1, [r2, #12]
 800e9f6:	61d9      	str	r1, [r3, #28]
 800e9f8:	6911      	ldr	r1, [r2, #16]
 800e9fa:	6219      	str	r1, [r3, #32]
 800e9fc:	6951      	ldr	r1, [r2, #20]
 800e9fe:	6892      	ldr	r2, [r2, #8]
 800ea00:	619a      	str	r2, [r3, #24]
 800ea02:	6259      	str	r1, [r3, #36]	@ 0x24
 800ea04:	f004 fc50 	bl	80132a8 <uxr_nanos>
 800ea08:	f00a fb48 	bl	801909c <srand>
 800ea0c:	f00a fb74 	bl	80190f8 <rand>
 800ea10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ea12:	6298      	str	r0, [r3, #40]	@ 0x28
 800ea14:	2800      	cmp	r0, #0
 800ea16:	d0f9      	beq.n	800ea0c <rmw_init_options_init+0x98>
 800ea18:	2000      	movs	r0, #0
 800ea1a:	b003      	add	sp, #12
 800ea1c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ea20:	b004      	add	sp, #16
 800ea22:	4770      	bx	lr
 800ea24:	2001      	movs	r0, #1
 800ea26:	e7b4      	b.n	800e992 <rmw_init_options_init+0x1e>
 800ea28:	0801b6a0 	.word	0x0801b6a0
 800ea2c:	2001183c 	.word	0x2001183c
 800ea30:	2000d0d8 	.word	0x2000d0d8
 800ea34:	2000cf24 	.word	0x2000cf24

0800ea38 <rmw_init_options_copy>:
 800ea38:	b570      	push	{r4, r5, r6, lr}
 800ea3a:	b088      	sub	sp, #32
 800ea3c:	b160      	cbz	r0, 800ea58 <rmw_init_options_copy+0x20>
 800ea3e:	460d      	mov	r5, r1
 800ea40:	b151      	cbz	r1, 800ea58 <rmw_init_options_copy+0x20>
 800ea42:	4604      	mov	r4, r0
 800ea44:	6880      	ldr	r0, [r0, #8]
 800ea46:	b128      	cbz	r0, 800ea54 <rmw_init_options_copy+0x1c>
 800ea48:	4b33      	ldr	r3, [pc, #204]	@ (800eb18 <rmw_init_options_copy+0xe0>)
 800ea4a:	6819      	ldr	r1, [r3, #0]
 800ea4c:	f7f1 fbe0 	bl	8000210 <strcmp>
 800ea50:	2800      	cmp	r0, #0
 800ea52:	d154      	bne.n	800eafe <rmw_init_options_copy+0xc6>
 800ea54:	68ab      	ldr	r3, [r5, #8]
 800ea56:	b11b      	cbz	r3, 800ea60 <rmw_init_options_copy+0x28>
 800ea58:	240b      	movs	r4, #11
 800ea5a:	4620      	mov	r0, r4
 800ea5c:	b008      	add	sp, #32
 800ea5e:	bd70      	pop	{r4, r5, r6, pc}
 800ea60:	4623      	mov	r3, r4
 800ea62:	462a      	mov	r2, r5
 800ea64:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800ea68:	f8d3 c000 	ldr.w	ip, [r3]
 800ea6c:	6858      	ldr	r0, [r3, #4]
 800ea6e:	6899      	ldr	r1, [r3, #8]
 800ea70:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800ea74:	f8c2 e00c 	str.w	lr, [r2, #12]
 800ea78:	3310      	adds	r3, #16
 800ea7a:	42b3      	cmp	r3, r6
 800ea7c:	f8c2 c000 	str.w	ip, [r2]
 800ea80:	6050      	str	r0, [r2, #4]
 800ea82:	6091      	str	r1, [r2, #8]
 800ea84:	f102 0210 	add.w	r2, r2, #16
 800ea88:	d1ee      	bne.n	800ea68 <rmw_init_options_copy+0x30>
 800ea8a:	6819      	ldr	r1, [r3, #0]
 800ea8c:	685b      	ldr	r3, [r3, #4]
 800ea8e:	6053      	str	r3, [r2, #4]
 800ea90:	6011      	str	r1, [r2, #0]
 800ea92:	f104 0e20 	add.w	lr, r4, #32
 800ea96:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ea9a:	f10d 0c0c 	add.w	ip, sp, #12
 800ea9e:	4666      	mov	r6, ip
 800eaa0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eaa4:	f8de 3000 	ldr.w	r3, [lr]
 800eaa8:	f8cc 3000 	str.w	r3, [ip]
 800eaac:	4630      	mov	r0, r6
 800eaae:	f7ff fb53 	bl	800e158 <rcutils_allocator_is_valid>
 800eab2:	2800      	cmp	r0, #0
 800eab4:	d0d0      	beq.n	800ea58 <rmw_init_options_copy+0x20>
 800eab6:	ab08      	add	r3, sp, #32
 800eab8:	e913 0003 	ldmdb	r3, {r0, r1}
 800eabc:	e88d 0003 	stmia.w	sp, {r0, r1}
 800eac0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800eac4:	69e0      	ldr	r0, [r4, #28]
 800eac6:	f7ff fd5d 	bl	800e584 <rcutils_strdup>
 800eaca:	61e8      	str	r0, [r5, #28]
 800eacc:	69e3      	ldr	r3, [r4, #28]
 800eace:	b103      	cbz	r3, 800ead2 <rmw_init_options_copy+0x9a>
 800ead0:	b1f8      	cbz	r0, 800eb12 <rmw_init_options_copy+0xda>
 800ead2:	4812      	ldr	r0, [pc, #72]	@ (800eb1c <rmw_init_options_copy+0xe4>)
 800ead4:	f008 faa6 	bl	8017024 <get_memory>
 800ead8:	b1a8      	cbz	r0, 800eb06 <rmw_init_options_copy+0xce>
 800eada:	6883      	ldr	r3, [r0, #8]
 800eadc:	636b      	str	r3, [r5, #52]	@ 0x34
 800eade:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800eae0:	f102 0c10 	add.w	ip, r2, #16
 800eae4:	f103 0510 	add.w	r5, r3, #16
 800eae8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800eaec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800eaee:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800eaf2:	2400      	movs	r4, #0
 800eaf4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800eaf8:	4620      	mov	r0, r4
 800eafa:	b008      	add	sp, #32
 800eafc:	bd70      	pop	{r4, r5, r6, pc}
 800eafe:	240c      	movs	r4, #12
 800eb00:	4620      	mov	r0, r4
 800eb02:	b008      	add	sp, #32
 800eb04:	bd70      	pop	{r4, r5, r6, pc}
 800eb06:	9b04      	ldr	r3, [sp, #16]
 800eb08:	9907      	ldr	r1, [sp, #28]
 800eb0a:	69e8      	ldr	r0, [r5, #28]
 800eb0c:	4798      	blx	r3
 800eb0e:	2401      	movs	r4, #1
 800eb10:	e7a3      	b.n	800ea5a <rmw_init_options_copy+0x22>
 800eb12:	240a      	movs	r4, #10
 800eb14:	e7a1      	b.n	800ea5a <rmw_init_options_copy+0x22>
 800eb16:	bf00      	nop
 800eb18:	0801b6a0 	.word	0x0801b6a0
 800eb1c:	2001183c 	.word	0x2001183c

0800eb20 <rmw_init_options_fini>:
 800eb20:	2800      	cmp	r0, #0
 800eb22:	d041      	beq.n	800eba8 <rmw_init_options_fini+0x88>
 800eb24:	b510      	push	{r4, lr}
 800eb26:	4604      	mov	r4, r0
 800eb28:	b08e      	sub	sp, #56	@ 0x38
 800eb2a:	3020      	adds	r0, #32
 800eb2c:	f7ff fb14 	bl	800e158 <rcutils_allocator_is_valid>
 800eb30:	b380      	cbz	r0, 800eb94 <rmw_init_options_fini+0x74>
 800eb32:	68a0      	ldr	r0, [r4, #8]
 800eb34:	b120      	cbz	r0, 800eb40 <rmw_init_options_fini+0x20>
 800eb36:	4b1e      	ldr	r3, [pc, #120]	@ (800ebb0 <rmw_init_options_fini+0x90>)
 800eb38:	6819      	ldr	r1, [r3, #0]
 800eb3a:	f7f1 fb69 	bl	8000210 <strcmp>
 800eb3e:	bb88      	cbnz	r0, 800eba4 <rmw_init_options_fini+0x84>
 800eb40:	4b1c      	ldr	r3, [pc, #112]	@ (800ebb4 <rmw_init_options_fini+0x94>)
 800eb42:	6819      	ldr	r1, [r3, #0]
 800eb44:	b351      	cbz	r1, 800eb9c <rmw_init_options_fini+0x7c>
 800eb46:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800eb48:	e001      	b.n	800eb4e <rmw_init_options_fini+0x2e>
 800eb4a:	6849      	ldr	r1, [r1, #4]
 800eb4c:	b331      	cbz	r1, 800eb9c <rmw_init_options_fini+0x7c>
 800eb4e:	688b      	ldr	r3, [r1, #8]
 800eb50:	429a      	cmp	r2, r3
 800eb52:	d1fa      	bne.n	800eb4a <rmw_init_options_fini+0x2a>
 800eb54:	4817      	ldr	r0, [pc, #92]	@ (800ebb4 <rmw_init_options_fini+0x94>)
 800eb56:	f008 fa75 	bl	8017044 <put_memory>
 800eb5a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800eb5c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800eb5e:	69e0      	ldr	r0, [r4, #28]
 800eb60:	4798      	blx	r3
 800eb62:	4668      	mov	r0, sp
 800eb64:	f7ff fd9c 	bl	800e6a0 <rmw_get_zero_initialized_init_options>
 800eb68:	46ee      	mov	lr, sp
 800eb6a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800eb6e:	46a4      	mov	ip, r4
 800eb70:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eb74:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800eb78:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eb7c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800eb80:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eb84:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800eb88:	e88c 0003 	stmia.w	ip, {r0, r1}
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	4618      	mov	r0, r3
 800eb90:	b00e      	add	sp, #56	@ 0x38
 800eb92:	bd10      	pop	{r4, pc}
 800eb94:	230b      	movs	r3, #11
 800eb96:	4618      	mov	r0, r3
 800eb98:	b00e      	add	sp, #56	@ 0x38
 800eb9a:	bd10      	pop	{r4, pc}
 800eb9c:	2301      	movs	r3, #1
 800eb9e:	4618      	mov	r0, r3
 800eba0:	b00e      	add	sp, #56	@ 0x38
 800eba2:	bd10      	pop	{r4, pc}
 800eba4:	230c      	movs	r3, #12
 800eba6:	e7f2      	b.n	800eb8e <rmw_init_options_fini+0x6e>
 800eba8:	230b      	movs	r3, #11
 800ebaa:	4618      	mov	r0, r3
 800ebac:	4770      	bx	lr
 800ebae:	bf00      	nop
 800ebb0:	0801b6a0 	.word	0x0801b6a0
 800ebb4:	2001183c 	.word	0x2001183c

0800ebb8 <rmw_init>:
 800ebb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ebbc:	b083      	sub	sp, #12
 800ebbe:	2800      	cmp	r0, #0
 800ebc0:	f000 80d3 	beq.w	800ed6a <rmw_init+0x1b2>
 800ebc4:	460e      	mov	r6, r1
 800ebc6:	2900      	cmp	r1, #0
 800ebc8:	f000 80cf 	beq.w	800ed6a <rmw_init+0x1b2>
 800ebcc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800ebce:	4605      	mov	r5, r0
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	f000 80ca 	beq.w	800ed6a <rmw_init+0x1b2>
 800ebd6:	4b78      	ldr	r3, [pc, #480]	@ (800edb8 <rmw_init+0x200>)
 800ebd8:	6880      	ldr	r0, [r0, #8]
 800ebda:	681f      	ldr	r7, [r3, #0]
 800ebdc:	b128      	cbz	r0, 800ebea <rmw_init+0x32>
 800ebde:	4639      	mov	r1, r7
 800ebe0:	f7f1 fb16 	bl	8000210 <strcmp>
 800ebe4:	2800      	cmp	r0, #0
 800ebe6:	f040 80ca 	bne.w	800ed7e <rmw_init+0x1c6>
 800ebea:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ebee:	4c73      	ldr	r4, [pc, #460]	@ (800edbc <rmw_init+0x204>)
 800ebf0:	4973      	ldr	r1, [pc, #460]	@ (800edc0 <rmw_init+0x208>)
 800ebf2:	4874      	ldr	r0, [pc, #464]	@ (800edc4 <rmw_init+0x20c>)
 800ebf4:	60b7      	str	r7, [r6, #8]
 800ebf6:	e9c6 2300 	strd	r2, r3, [r6]
 800ebfa:	68eb      	ldr	r3, [r5, #12]
 800ebfc:	64b3      	str	r3, [r6, #72]	@ 0x48
 800ebfe:	2201      	movs	r2, #1
 800ec00:	f000 ff18 	bl	800fa34 <rmw_uxrce_init_session_memory>
 800ec04:	4620      	mov	r0, r4
 800ec06:	4970      	ldr	r1, [pc, #448]	@ (800edc8 <rmw_init+0x210>)
 800ec08:	2204      	movs	r2, #4
 800ec0a:	f000 ff53 	bl	800fab4 <rmw_uxrce_init_static_input_buffer_memory>
 800ec0e:	f04f 0800 	mov.w	r8, #0
 800ec12:	486c      	ldr	r0, [pc, #432]	@ (800edc4 <rmw_init+0x20c>)
 800ec14:	f884 800d 	strb.w	r8, [r4, #13]
 800ec18:	f008 fa04 	bl	8017024 <get_memory>
 800ec1c:	2800      	cmp	r0, #0
 800ec1e:	f000 80a9 	beq.w	800ed74 <rmw_init+0x1bc>
 800ec22:	6884      	ldr	r4, [r0, #8]
 800ec24:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800ec26:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800ec28:	f890 c010 	ldrb.w	ip, [r0, #16]
 800ec2c:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800ec30:	9101      	str	r1, [sp, #4]
 800ec32:	6a00      	ldr	r0, [r0, #32]
 800ec34:	9000      	str	r0, [sp, #0]
 800ec36:	f104 0910 	add.w	r9, r4, #16
 800ec3a:	4661      	mov	r1, ip
 800ec3c:	4648      	mov	r0, r9
 800ec3e:	f002 f9a3 	bl	8010f88 <uxr_set_custom_transport_callbacks>
 800ec42:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800ec46:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ec4a:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800ec4e:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800ec52:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800ec56:	495d      	ldr	r1, [pc, #372]	@ (800edcc <rmw_init+0x214>)
 800ec58:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800ec5c:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800ec60:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800ec64:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800ec68:	4859      	ldr	r0, [pc, #356]	@ (800edd0 <rmw_init+0x218>)
 800ec6a:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800ec6e:	2201      	movs	r2, #1
 800ec70:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800ec72:	f000 febf 	bl	800f9f4 <rmw_uxrce_init_node_memory>
 800ec76:	4957      	ldr	r1, [pc, #348]	@ (800edd4 <rmw_init+0x21c>)
 800ec78:	4857      	ldr	r0, [pc, #348]	@ (800edd8 <rmw_init+0x220>)
 800ec7a:	2205      	movs	r2, #5
 800ec7c:	f000 fe9a 	bl	800f9b4 <rmw_uxrce_init_subscription_memory>
 800ec80:	4956      	ldr	r1, [pc, #344]	@ (800eddc <rmw_init+0x224>)
 800ec82:	4857      	ldr	r0, [pc, #348]	@ (800ede0 <rmw_init+0x228>)
 800ec84:	220a      	movs	r2, #10
 800ec86:	f000 fe75 	bl	800f974 <rmw_uxrce_init_publisher_memory>
 800ec8a:	4956      	ldr	r1, [pc, #344]	@ (800ede4 <rmw_init+0x22c>)
 800ec8c:	4856      	ldr	r0, [pc, #344]	@ (800ede8 <rmw_init+0x230>)
 800ec8e:	2201      	movs	r2, #1
 800ec90:	f000 fe30 	bl	800f8f4 <rmw_uxrce_init_service_memory>
 800ec94:	4955      	ldr	r1, [pc, #340]	@ (800edec <rmw_init+0x234>)
 800ec96:	4856      	ldr	r0, [pc, #344]	@ (800edf0 <rmw_init+0x238>)
 800ec98:	2201      	movs	r2, #1
 800ec9a:	f000 fe4b 	bl	800f934 <rmw_uxrce_init_client_memory>
 800ec9e:	4955      	ldr	r1, [pc, #340]	@ (800edf4 <rmw_init+0x23c>)
 800eca0:	4855      	ldr	r0, [pc, #340]	@ (800edf8 <rmw_init+0x240>)
 800eca2:	220f      	movs	r2, #15
 800eca4:	f000 fee6 	bl	800fa74 <rmw_uxrce_init_topic_memory>
 800eca8:	4954      	ldr	r1, [pc, #336]	@ (800edfc <rmw_init+0x244>)
 800ecaa:	4855      	ldr	r0, [pc, #340]	@ (800ee00 <rmw_init+0x248>)
 800ecac:	2203      	movs	r2, #3
 800ecae:	f000 ff21 	bl	800faf4 <rmw_uxrce_init_init_options_impl_memory>
 800ecb2:	4954      	ldr	r1, [pc, #336]	@ (800ee04 <rmw_init+0x24c>)
 800ecb4:	4854      	ldr	r0, [pc, #336]	@ (800ee08 <rmw_init+0x250>)
 800ecb6:	2204      	movs	r2, #4
 800ecb8:	f000 ff3c 	bl	800fb34 <rmw_uxrce_init_wait_set_memory>
 800ecbc:	4953      	ldr	r1, [pc, #332]	@ (800ee0c <rmw_init+0x254>)
 800ecbe:	4854      	ldr	r0, [pc, #336]	@ (800ee10 <rmw_init+0x258>)
 800ecc0:	2204      	movs	r2, #4
 800ecc2:	f000 ff57 	bl	800fb74 <rmw_uxrce_init_guard_condition_memory>
 800ecc6:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800ecc8:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800ecca:	4642      	mov	r2, r8
 800eccc:	f000 fde2 	bl	800f894 <rmw_uxrce_transport_init>
 800ecd0:	4607      	mov	r7, r0
 800ecd2:	2800      	cmp	r0, #0
 800ecd4:	d158      	bne.n	800ed88 <rmw_init+0x1d0>
 800ecd6:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800ecd8:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800ecdc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ecde:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800ece2:	4628      	mov	r0, r5
 800ece4:	f002 fc88 	bl	80115f8 <uxr_init_session>
 800ece8:	494a      	ldr	r1, [pc, #296]	@ (800ee14 <rmw_init+0x25c>)
 800ecea:	4622      	mov	r2, r4
 800ecec:	4628      	mov	r0, r5
 800ecee:	f002 fca7 	bl	8011640 <uxr_set_topic_callback>
 800ecf2:	4949      	ldr	r1, [pc, #292]	@ (800ee18 <rmw_init+0x260>)
 800ecf4:	463a      	mov	r2, r7
 800ecf6:	4628      	mov	r0, r5
 800ecf8:	f002 fc9e 	bl	8011638 <uxr_set_status_callback>
 800ecfc:	4947      	ldr	r1, [pc, #284]	@ (800ee1c <rmw_init+0x264>)
 800ecfe:	463a      	mov	r2, r7
 800ed00:	4628      	mov	r0, r5
 800ed02:	f002 fca1 	bl	8011648 <uxr_set_request_callback>
 800ed06:	4946      	ldr	r1, [pc, #280]	@ (800ee20 <rmw_init+0x268>)
 800ed08:	463a      	mov	r2, r7
 800ed0a:	4628      	mov	r0, r5
 800ed0c:	f002 fca0 	bl	8011650 <uxr_set_reply_callback>
 800ed10:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800ed14:	2304      	movs	r3, #4
 800ed16:	0092      	lsls	r2, r2, #2
 800ed18:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800ed1c:	4628      	mov	r0, r5
 800ed1e:	f002 fcd5 	bl	80116cc <uxr_create_input_reliable_stream>
 800ed22:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800ed26:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800ed2a:	0092      	lsls	r2, r2, #2
 800ed2c:	2304      	movs	r3, #4
 800ed2e:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800ed32:	4628      	mov	r0, r5
 800ed34:	f002 fca2 	bl	801167c <uxr_create_output_reliable_stream>
 800ed38:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800ed3c:	4628      	mov	r0, r5
 800ed3e:	f002 fcbf 	bl	80116c0 <uxr_create_input_best_effort_stream>
 800ed42:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800ed46:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800ed4a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800ed4e:	3114      	adds	r1, #20
 800ed50:	4628      	mov	r0, r5
 800ed52:	f002 fc81 	bl	8011658 <uxr_create_output_best_effort_stream>
 800ed56:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800ed5a:	4628      	mov	r0, r5
 800ed5c:	f003 fa36 	bl	80121cc <uxr_create_session>
 800ed60:	b1f8      	cbz	r0, 800eda2 <rmw_init+0x1ea>
 800ed62:	4638      	mov	r0, r7
 800ed64:	b003      	add	sp, #12
 800ed66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed6a:	270b      	movs	r7, #11
 800ed6c:	4638      	mov	r0, r7
 800ed6e:	b003      	add	sp, #12
 800ed70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed74:	2701      	movs	r7, #1
 800ed76:	4638      	mov	r0, r7
 800ed78:	b003      	add	sp, #12
 800ed7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed7e:	270c      	movs	r7, #12
 800ed80:	4638      	mov	r0, r7
 800ed82:	b003      	add	sp, #12
 800ed84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed88:	4648      	mov	r0, r9
 800ed8a:	f002 f93f 	bl	801100c <uxr_close_custom_transport>
 800ed8e:	480d      	ldr	r0, [pc, #52]	@ (800edc4 <rmw_init+0x20c>)
 800ed90:	4621      	mov	r1, r4
 800ed92:	f008 f957 	bl	8017044 <put_memory>
 800ed96:	4638      	mov	r0, r7
 800ed98:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800ed9c:	b003      	add	sp, #12
 800ed9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eda2:	4648      	mov	r0, r9
 800eda4:	f002 f932 	bl	801100c <uxr_close_custom_transport>
 800eda8:	4806      	ldr	r0, [pc, #24]	@ (800edc4 <rmw_init+0x20c>)
 800edaa:	4621      	mov	r1, r4
 800edac:	f008 f94a 	bl	8017044 <put_memory>
 800edb0:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800edb2:	2701      	movs	r7, #1
 800edb4:	e7d5      	b.n	800ed62 <rmw_init+0x1aa>
 800edb6:	bf00      	nop
 800edb8:	0801b6a0 	.word	0x0801b6a0
 800edbc:	2001188c 	.word	0x2001188c
 800edc0:	2000db38 	.word	0x2000db38
 800edc4:	2001187c 	.word	0x2001187c
 800edc8:	2000f0e0 	.word	0x2000f0e0
 800edcc:	2000d15c 	.word	0x2000d15c
 800edd0:	2001184c 	.word	0x2001184c
 800edd4:	200111e0 	.word	0x200111e0
 800edd8:	2001189c 	.word	0x2001189c
 800eddc:	2000d200 	.word	0x2000d200
 800ede0:	2001185c 	.word	0x2001185c
 800ede4:	2000da70 	.word	0x2000da70
 800ede8:	2001186c 	.word	0x2001186c
 800edec:	2000cf90 	.word	0x2000cf90
 800edf0:	2000cf7c 	.word	0x2000cf7c
 800edf4:	20011618 	.word	0x20011618
 800edf8:	200118ac 	.word	0x200118ac
 800edfc:	2000d0d8 	.word	0x2000d0d8
 800ee00:	2001183c 	.word	0x2001183c
 800ee04:	200117bc 	.word	0x200117bc
 800ee08:	200118bc 	.word	0x200118bc
 800ee0c:	2000d058 	.word	0x2000d058
 800ee10:	2001182c 	.word	0x2001182c
 800ee14:	08016e5d 	.word	0x08016e5d
 800ee18:	08016e55 	.word	0x08016e55
 800ee1c:	08016ef5 	.word	0x08016ef5
 800ee20:	08016f91 	.word	0x08016f91

0800ee24 <rmw_shutdown>:
 800ee24:	b570      	push	{r4, r5, r6, lr}
 800ee26:	b094      	sub	sp, #80	@ 0x50
 800ee28:	2800      	cmp	r0, #0
 800ee2a:	d050      	beq.n	800eece <rmw_shutdown+0xaa>
 800ee2c:	4605      	mov	r5, r0
 800ee2e:	6880      	ldr	r0, [r0, #8]
 800ee30:	b128      	cbz	r0, 800ee3e <rmw_shutdown+0x1a>
 800ee32:	4b2b      	ldr	r3, [pc, #172]	@ (800eee0 <rmw_shutdown+0xbc>)
 800ee34:	6819      	ldr	r1, [r3, #0]
 800ee36:	f7f1 f9eb 	bl	8000210 <strcmp>
 800ee3a:	2800      	cmp	r0, #0
 800ee3c:	d143      	bne.n	800eec6 <rmw_shutdown+0xa2>
 800ee3e:	4b29      	ldr	r3, [pc, #164]	@ (800eee4 <rmw_shutdown+0xc0>)
 800ee40:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800ee42:	681c      	ldr	r4, [r3, #0]
 800ee44:	2c00      	cmp	r4, #0
 800ee46:	d046      	beq.n	800eed6 <rmw_shutdown+0xb2>
 800ee48:	2600      	movs	r6, #0
 800ee4a:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800ee4e:	6902      	ldr	r2, [r0, #16]
 800ee50:	428a      	cmp	r2, r1
 800ee52:	d024      	beq.n	800ee9e <rmw_shutdown+0x7a>
 800ee54:	2c00      	cmp	r4, #0
 800ee56:	d1f8      	bne.n	800ee4a <rmw_shutdown+0x26>
 800ee58:	b189      	cbz	r1, 800ee7e <rmw_shutdown+0x5a>
 800ee5a:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800ee5e:	789b      	ldrb	r3, [r3, #2]
 800ee60:	2b01      	cmp	r3, #1
 800ee62:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800ee66:	bf14      	ite	ne
 800ee68:	210a      	movne	r1, #10
 800ee6a:	2100      	moveq	r1, #0
 800ee6c:	f003 f986 	bl	801217c <uxr_delete_session_retries>
 800ee70:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800ee72:	f000 fe9f 	bl	800fbb4 <rmw_uxrce_fini_session_memory>
 800ee76:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800ee78:	3010      	adds	r0, #16
 800ee7a:	f002 f8c7 	bl	801100c <uxr_close_custom_transport>
 800ee7e:	2300      	movs	r3, #0
 800ee80:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800ee82:	b1b6      	cbz	r6, 800eeb2 <rmw_shutdown+0x8e>
 800ee84:	4d18      	ldr	r5, [pc, #96]	@ (800eee8 <rmw_shutdown+0xc4>)
 800ee86:	682c      	ldr	r4, [r5, #0]
 800ee88:	b134      	cbz	r4, 800ee98 <rmw_shutdown+0x74>
 800ee8a:	4621      	mov	r1, r4
 800ee8c:	6864      	ldr	r4, [r4, #4]
 800ee8e:	4628      	mov	r0, r5
 800ee90:	f008 f8d8 	bl	8017044 <put_memory>
 800ee94:	2c00      	cmp	r4, #0
 800ee96:	d1f8      	bne.n	800ee8a <rmw_shutdown+0x66>
 800ee98:	4630      	mov	r0, r6
 800ee9a:	b014      	add	sp, #80	@ 0x50
 800ee9c:	bd70      	pop	{r4, r5, r6, pc}
 800ee9e:	3018      	adds	r0, #24
 800eea0:	f000 f8e8 	bl	800f074 <rmw_destroy_node>
 800eea4:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800eea6:	4606      	mov	r6, r0
 800eea8:	2c00      	cmp	r4, #0
 800eeaa:	d1ce      	bne.n	800ee4a <rmw_shutdown+0x26>
 800eeac:	2900      	cmp	r1, #0
 800eeae:	d1d4      	bne.n	800ee5a <rmw_shutdown+0x36>
 800eeb0:	e7e5      	b.n	800ee7e <rmw_shutdown+0x5a>
 800eeb2:	4668      	mov	r0, sp
 800eeb4:	f007 fec4 	bl	8016c40 <rmw_get_zero_initialized_context>
 800eeb8:	2250      	movs	r2, #80	@ 0x50
 800eeba:	4669      	mov	r1, sp
 800eebc:	4628      	mov	r0, r5
 800eebe:	f00a fd72 	bl	80199a6 <memcpy>
 800eec2:	2600      	movs	r6, #0
 800eec4:	e7de      	b.n	800ee84 <rmw_shutdown+0x60>
 800eec6:	260c      	movs	r6, #12
 800eec8:	4630      	mov	r0, r6
 800eeca:	b014      	add	sp, #80	@ 0x50
 800eecc:	bd70      	pop	{r4, r5, r6, pc}
 800eece:	260b      	movs	r6, #11
 800eed0:	4630      	mov	r0, r6
 800eed2:	b014      	add	sp, #80	@ 0x50
 800eed4:	bd70      	pop	{r4, r5, r6, pc}
 800eed6:	2900      	cmp	r1, #0
 800eed8:	d0eb      	beq.n	800eeb2 <rmw_shutdown+0x8e>
 800eeda:	4626      	mov	r6, r4
 800eedc:	e7bd      	b.n	800ee5a <rmw_shutdown+0x36>
 800eede:	bf00      	nop
 800eee0:	0801b6a0 	.word	0x0801b6a0
 800eee4:	2001184c 	.word	0x2001184c
 800eee8:	2001188c 	.word	0x2001188c

0800eeec <rmw_context_fini>:
 800eeec:	4b17      	ldr	r3, [pc, #92]	@ (800ef4c <rmw_context_fini+0x60>)
 800eeee:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800eef0:	b570      	push	{r4, r5, r6, lr}
 800eef2:	681c      	ldr	r4, [r3, #0]
 800eef4:	4605      	mov	r5, r0
 800eef6:	b334      	cbz	r4, 800ef46 <rmw_context_fini+0x5a>
 800eef8:	2600      	movs	r6, #0
 800eefa:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800eefe:	6902      	ldr	r2, [r0, #16]
 800ef00:	428a      	cmp	r2, r1
 800ef02:	d018      	beq.n	800ef36 <rmw_context_fini+0x4a>
 800ef04:	2c00      	cmp	r4, #0
 800ef06:	d1f8      	bne.n	800eefa <rmw_context_fini+0xe>
 800ef08:	b189      	cbz	r1, 800ef2e <rmw_context_fini+0x42>
 800ef0a:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800ef0e:	789b      	ldrb	r3, [r3, #2]
 800ef10:	2b01      	cmp	r3, #1
 800ef12:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800ef16:	bf14      	ite	ne
 800ef18:	210a      	movne	r1, #10
 800ef1a:	2100      	moveq	r1, #0
 800ef1c:	f003 f92e 	bl	801217c <uxr_delete_session_retries>
 800ef20:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800ef22:	f000 fe47 	bl	800fbb4 <rmw_uxrce_fini_session_memory>
 800ef26:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800ef28:	3010      	adds	r0, #16
 800ef2a:	f002 f86f 	bl	801100c <uxr_close_custom_transport>
 800ef2e:	2300      	movs	r3, #0
 800ef30:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800ef32:	4630      	mov	r0, r6
 800ef34:	bd70      	pop	{r4, r5, r6, pc}
 800ef36:	3018      	adds	r0, #24
 800ef38:	f000 f89c 	bl	800f074 <rmw_destroy_node>
 800ef3c:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800ef3e:	4606      	mov	r6, r0
 800ef40:	2c00      	cmp	r4, #0
 800ef42:	d1da      	bne.n	800eefa <rmw_context_fini+0xe>
 800ef44:	e7e0      	b.n	800ef08 <rmw_context_fini+0x1c>
 800ef46:	4626      	mov	r6, r4
 800ef48:	e7de      	b.n	800ef08 <rmw_context_fini+0x1c>
 800ef4a:	bf00      	nop
 800ef4c:	2001184c 	.word	0x2001184c

0800ef50 <create_node>:
 800ef50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ef54:	b083      	sub	sp, #12
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d05f      	beq.n	800f01a <create_node+0xca>
 800ef5a:	4606      	mov	r6, r0
 800ef5c:	4835      	ldr	r0, [pc, #212]	@ (800f034 <create_node+0xe4>)
 800ef5e:	460f      	mov	r7, r1
 800ef60:	4690      	mov	r8, r2
 800ef62:	461d      	mov	r5, r3
 800ef64:	f008 f85e 	bl	8017024 <get_memory>
 800ef68:	2800      	cmp	r0, #0
 800ef6a:	d056      	beq.n	800f01a <create_node+0xca>
 800ef6c:	6884      	ldr	r4, [r0, #8]
 800ef6e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800ef70:	6123      	str	r3, [r4, #16]
 800ef72:	f008 f8bf 	bl	80170f4 <rmw_get_implementation_identifier>
 800ef76:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800ef7a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800ef7e:	f8c4 9020 	str.w	r9, [r4, #32]
 800ef82:	4630      	mov	r0, r6
 800ef84:	f7f1 f94e 	bl	8000224 <strlen>
 800ef88:	1c42      	adds	r2, r0, #1
 800ef8a:	2a3c      	cmp	r2, #60	@ 0x3c
 800ef8c:	f104 0518 	add.w	r5, r4, #24
 800ef90:	d840      	bhi.n	800f014 <create_node+0xc4>
 800ef92:	4648      	mov	r0, r9
 800ef94:	4631      	mov	r1, r6
 800ef96:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800ef9a:	f00a fd04 	bl	80199a6 <memcpy>
 800ef9e:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800efa2:	4638      	mov	r0, r7
 800efa4:	f7f1 f93e 	bl	8000224 <strlen>
 800efa8:	1c42      	adds	r2, r0, #1
 800efaa:	2a3c      	cmp	r2, #60	@ 0x3c
 800efac:	d832      	bhi.n	800f014 <create_node+0xc4>
 800efae:	4639      	mov	r1, r7
 800efb0:	4648      	mov	r0, r9
 800efb2:	f00a fcf8 	bl	80199a6 <memcpy>
 800efb6:	6923      	ldr	r3, [r4, #16]
 800efb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800efbc:	2101      	movs	r1, #1
 800efbe:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800efc2:	1842      	adds	r2, r0, r1
 800efc4:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800efc8:	f002 f824 	bl	8011014 <uxr_object_id>
 800efcc:	6160      	str	r0, [r4, #20]
 800efce:	783b      	ldrb	r3, [r7, #0]
 800efd0:	2b2f      	cmp	r3, #47	@ 0x2f
 800efd2:	d127      	bne.n	800f024 <create_node+0xd4>
 800efd4:	787b      	ldrb	r3, [r7, #1]
 800efd6:	bb2b      	cbnz	r3, 800f024 <create_node+0xd4>
 800efd8:	4a17      	ldr	r2, [pc, #92]	@ (800f038 <create_node+0xe8>)
 800efda:	4818      	ldr	r0, [pc, #96]	@ (800f03c <create_node+0xec>)
 800efdc:	4633      	mov	r3, r6
 800efde:	213c      	movs	r1, #60	@ 0x3c
 800efe0:	f00a faa4 	bl	801952c <sniprintf>
 800efe4:	6920      	ldr	r0, [r4, #16]
 800efe6:	4915      	ldr	r1, [pc, #84]	@ (800f03c <create_node+0xec>)
 800efe8:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800efec:	9100      	str	r1, [sp, #0]
 800efee:	2106      	movs	r1, #6
 800eff0:	9101      	str	r1, [sp, #4]
 800eff2:	6811      	ldr	r1, [r2, #0]
 800eff4:	6962      	ldr	r2, [r4, #20]
 800eff6:	fa1f f388 	uxth.w	r3, r8
 800effa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800effe:	f001 fd91 	bl	8010b24 <uxr_buffer_create_participant_bin>
 800f002:	4602      	mov	r2, r0
 800f004:	6920      	ldr	r0, [r4, #16]
 800f006:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800f00a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800f00e:	f000 ff49 	bl	800fea4 <run_xrce_session>
 800f012:	b918      	cbnz	r0, 800f01c <create_node+0xcc>
 800f014:	4628      	mov	r0, r5
 800f016:	f000 fdd3 	bl	800fbc0 <rmw_uxrce_fini_node_memory>
 800f01a:	2500      	movs	r5, #0
 800f01c:	4628      	mov	r0, r5
 800f01e:	b003      	add	sp, #12
 800f020:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f024:	4a06      	ldr	r2, [pc, #24]	@ (800f040 <create_node+0xf0>)
 800f026:	9600      	str	r6, [sp, #0]
 800f028:	463b      	mov	r3, r7
 800f02a:	213c      	movs	r1, #60	@ 0x3c
 800f02c:	4803      	ldr	r0, [pc, #12]	@ (800f03c <create_node+0xec>)
 800f02e:	f00a fa7d 	bl	801952c <sniprintf>
 800f032:	e7d7      	b.n	800efe4 <create_node+0x94>
 800f034:	2001184c 	.word	0x2001184c
 800f038:	0801ad04 	.word	0x0801ad04
 800f03c:	2000cf40 	.word	0x2000cf40
 800f040:	0801a9cc 	.word	0x0801a9cc

0800f044 <rmw_create_node>:
 800f044:	b199      	cbz	r1, 800f06e <rmw_create_node+0x2a>
 800f046:	780b      	ldrb	r3, [r1, #0]
 800f048:	468c      	mov	ip, r1
 800f04a:	b183      	cbz	r3, 800f06e <rmw_create_node+0x2a>
 800f04c:	b410      	push	{r4}
 800f04e:	4614      	mov	r4, r2
 800f050:	b14a      	cbz	r2, 800f066 <rmw_create_node+0x22>
 800f052:	7813      	ldrb	r3, [r2, #0]
 800f054:	b13b      	cbz	r3, 800f066 <rmw_create_node+0x22>
 800f056:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800f058:	4603      	mov	r3, r0
 800f05a:	4621      	mov	r1, r4
 800f05c:	4660      	mov	r0, ip
 800f05e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f062:	f7ff bf75 	b.w	800ef50 <create_node>
 800f066:	2000      	movs	r0, #0
 800f068:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f06c:	4770      	bx	lr
 800f06e:	2000      	movs	r0, #0
 800f070:	4770      	bx	lr
 800f072:	bf00      	nop

0800f074 <rmw_destroy_node>:
 800f074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f076:	b328      	cbz	r0, 800f0c4 <rmw_destroy_node+0x50>
 800f078:	4607      	mov	r7, r0
 800f07a:	6800      	ldr	r0, [r0, #0]
 800f07c:	b120      	cbz	r0, 800f088 <rmw_destroy_node+0x14>
 800f07e:	4b36      	ldr	r3, [pc, #216]	@ (800f158 <rmw_destroy_node+0xe4>)
 800f080:	6819      	ldr	r1, [r3, #0]
 800f082:	f7f1 f8c5 	bl	8000210 <strcmp>
 800f086:	b9e8      	cbnz	r0, 800f0c4 <rmw_destroy_node+0x50>
 800f088:	687d      	ldr	r5, [r7, #4]
 800f08a:	b1dd      	cbz	r5, 800f0c4 <rmw_destroy_node+0x50>
 800f08c:	4b33      	ldr	r3, [pc, #204]	@ (800f15c <rmw_destroy_node+0xe8>)
 800f08e:	681c      	ldr	r4, [r3, #0]
 800f090:	2c00      	cmp	r4, #0
 800f092:	d05f      	beq.n	800f154 <rmw_destroy_node+0xe0>
 800f094:	2600      	movs	r6, #0
 800f096:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800f09a:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800f09e:	429d      	cmp	r5, r3
 800f0a0:	d013      	beq.n	800f0ca <rmw_destroy_node+0x56>
 800f0a2:	2c00      	cmp	r4, #0
 800f0a4:	d1f7      	bne.n	800f096 <rmw_destroy_node+0x22>
 800f0a6:	4b2e      	ldr	r3, [pc, #184]	@ (800f160 <rmw_destroy_node+0xec>)
 800f0a8:	681c      	ldr	r4, [r3, #0]
 800f0aa:	b1c4      	cbz	r4, 800f0de <rmw_destroy_node+0x6a>
 800f0ac:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800f0b0:	6a0b      	ldr	r3, [r1, #32]
 800f0b2:	429d      	cmp	r5, r3
 800f0b4:	d1f9      	bne.n	800f0aa <rmw_destroy_node+0x36>
 800f0b6:	317c      	adds	r1, #124	@ 0x7c
 800f0b8:	4638      	mov	r0, r7
 800f0ba:	f000 fb37 	bl	800f72c <rmw_destroy_subscription>
 800f0be:	2801      	cmp	r0, #1
 800f0c0:	4606      	mov	r6, r0
 800f0c2:	d1f2      	bne.n	800f0aa <rmw_destroy_node+0x36>
 800f0c4:	2601      	movs	r6, #1
 800f0c6:	4630      	mov	r0, r6
 800f0c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0ca:	3184      	adds	r1, #132	@ 0x84
 800f0cc:	4638      	mov	r0, r7
 800f0ce:	f000 f9a5 	bl	800f41c <rmw_destroy_publisher>
 800f0d2:	2801      	cmp	r0, #1
 800f0d4:	4606      	mov	r6, r0
 800f0d6:	d0f5      	beq.n	800f0c4 <rmw_destroy_node+0x50>
 800f0d8:	2c00      	cmp	r4, #0
 800f0da:	d1dc      	bne.n	800f096 <rmw_destroy_node+0x22>
 800f0dc:	e7e3      	b.n	800f0a6 <rmw_destroy_node+0x32>
 800f0de:	4b21      	ldr	r3, [pc, #132]	@ (800f164 <rmw_destroy_node+0xf0>)
 800f0e0:	681c      	ldr	r4, [r3, #0]
 800f0e2:	b16c      	cbz	r4, 800f100 <rmw_destroy_node+0x8c>
 800f0e4:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800f0e8:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800f0ea:	429d      	cmp	r5, r3
 800f0ec:	d1f9      	bne.n	800f0e2 <rmw_destroy_node+0x6e>
 800f0ee:	317c      	adds	r1, #124	@ 0x7c
 800f0f0:	4638      	mov	r0, r7
 800f0f2:	f000 f9e5 	bl	800f4c0 <rmw_destroy_service>
 800f0f6:	2801      	cmp	r0, #1
 800f0f8:	4606      	mov	r6, r0
 800f0fa:	d0e3      	beq.n	800f0c4 <rmw_destroy_node+0x50>
 800f0fc:	2c00      	cmp	r4, #0
 800f0fe:	d1f1      	bne.n	800f0e4 <rmw_destroy_node+0x70>
 800f100:	4b19      	ldr	r3, [pc, #100]	@ (800f168 <rmw_destroy_node+0xf4>)
 800f102:	681c      	ldr	r4, [r3, #0]
 800f104:	b16c      	cbz	r4, 800f122 <rmw_destroy_node+0xae>
 800f106:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800f10a:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800f10c:	429d      	cmp	r5, r3
 800f10e:	d1f9      	bne.n	800f104 <rmw_destroy_node+0x90>
 800f110:	317c      	adds	r1, #124	@ 0x7c
 800f112:	4638      	mov	r0, r7
 800f114:	f007 ffaa 	bl	801706c <rmw_destroy_client>
 800f118:	2801      	cmp	r0, #1
 800f11a:	4606      	mov	r6, r0
 800f11c:	d0d2      	beq.n	800f0c4 <rmw_destroy_node+0x50>
 800f11e:	2c00      	cmp	r4, #0
 800f120:	d1f1      	bne.n	800f106 <rmw_destroy_node+0x92>
 800f122:	6928      	ldr	r0, [r5, #16]
 800f124:	696a      	ldr	r2, [r5, #20]
 800f126:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f12a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f12e:	6819      	ldr	r1, [r3, #0]
 800f130:	f001 fcac 	bl	8010a8c <uxr_buffer_delete_entity>
 800f134:	4602      	mov	r2, r0
 800f136:	6928      	ldr	r0, [r5, #16]
 800f138:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f13c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f140:	f000 feb0 	bl	800fea4 <run_xrce_session>
 800f144:	2800      	cmp	r0, #0
 800f146:	bf08      	it	eq
 800f148:	2602      	moveq	r6, #2
 800f14a:	4638      	mov	r0, r7
 800f14c:	f000 fd38 	bl	800fbc0 <rmw_uxrce_fini_node_memory>
 800f150:	4630      	mov	r0, r6
 800f152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f154:	4626      	mov	r6, r4
 800f156:	e7a6      	b.n	800f0a6 <rmw_destroy_node+0x32>
 800f158:	0801b6a0 	.word	0x0801b6a0
 800f15c:	2001185c 	.word	0x2001185c
 800f160:	2001189c 	.word	0x2001189c
 800f164:	2001186c 	.word	0x2001186c
 800f168:	2000cf7c 	.word	0x2000cf7c

0800f16c <rmw_node_get_graph_guard_condition>:
 800f16c:	6843      	ldr	r3, [r0, #4]
 800f16e:	6918      	ldr	r0, [r3, #16]
 800f170:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800f174:	4770      	bx	lr
 800f176:	bf00      	nop

0800f178 <flush_session>:
 800f178:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800f17a:	f002 be8d 	b.w	8011e98 <uxr_run_session_until_confirm_delivery>
 800f17e:	bf00      	nop

0800f180 <rmw_publish>:
 800f180:	2800      	cmp	r0, #0
 800f182:	d053      	beq.n	800f22c <rmw_publish+0xac>
 800f184:	b570      	push	{r4, r5, r6, lr}
 800f186:	460d      	mov	r5, r1
 800f188:	b08e      	sub	sp, #56	@ 0x38
 800f18a:	2900      	cmp	r1, #0
 800f18c:	d04b      	beq.n	800f226 <rmw_publish+0xa6>
 800f18e:	4604      	mov	r4, r0
 800f190:	6800      	ldr	r0, [r0, #0]
 800f192:	f000 ff07 	bl	800ffa4 <is_uxrce_rmw_identifier_valid>
 800f196:	2800      	cmp	r0, #0
 800f198:	d045      	beq.n	800f226 <rmw_publish+0xa6>
 800f19a:	6866      	ldr	r6, [r4, #4]
 800f19c:	2e00      	cmp	r6, #0
 800f19e:	d042      	beq.n	800f226 <rmw_publish+0xa6>
 800f1a0:	69b4      	ldr	r4, [r6, #24]
 800f1a2:	4628      	mov	r0, r5
 800f1a4:	6923      	ldr	r3, [r4, #16]
 800f1a6:	4798      	blx	r3
 800f1a8:	69f3      	ldr	r3, [r6, #28]
 800f1aa:	9005      	str	r0, [sp, #20]
 800f1ac:	b113      	cbz	r3, 800f1b4 <rmw_publish+0x34>
 800f1ae:	a805      	add	r0, sp, #20
 800f1b0:	4798      	blx	r3
 800f1b2:	9805      	ldr	r0, [sp, #20]
 800f1b4:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800f1b8:	691b      	ldr	r3, [r3, #16]
 800f1ba:	9000      	str	r0, [sp, #0]
 800f1bc:	6972      	ldr	r2, [r6, #20]
 800f1be:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800f1c0:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800f1c4:	ab06      	add	r3, sp, #24
 800f1c6:	f004 f90f 	bl	80133e8 <uxr_prepare_output_stream>
 800f1ca:	b1d8      	cbz	r0, 800f204 <rmw_publish+0x84>
 800f1cc:	68a3      	ldr	r3, [r4, #8]
 800f1ce:	a906      	add	r1, sp, #24
 800f1d0:	4628      	mov	r0, r5
 800f1d2:	4798      	blx	r3
 800f1d4:	6a33      	ldr	r3, [r6, #32]
 800f1d6:	4604      	mov	r4, r0
 800f1d8:	b10b      	cbz	r3, 800f1de <rmw_publish+0x5e>
 800f1da:	a806      	add	r0, sp, #24
 800f1dc:	4798      	blx	r3
 800f1de:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800f1e2:	2b01      	cmp	r3, #1
 800f1e4:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800f1e8:	d022      	beq.n	800f230 <rmw_publish+0xb0>
 800f1ea:	6918      	ldr	r0, [r3, #16]
 800f1ec:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800f1ee:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f1f2:	f002 fe51 	bl	8011e98 <uxr_run_session_until_confirm_delivery>
 800f1f6:	4020      	ands	r0, r4
 800f1f8:	b2c4      	uxtb	r4, r0
 800f1fa:	f084 0001 	eor.w	r0, r4, #1
 800f1fe:	b2c0      	uxtb	r0, r0
 800f200:	b00e      	add	sp, #56	@ 0x38
 800f202:	bd70      	pop	{r4, r5, r6, pc}
 800f204:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800f208:	6918      	ldr	r0, [r3, #16]
 800f20a:	9b05      	ldr	r3, [sp, #20]
 800f20c:	9300      	str	r3, [sp, #0]
 800f20e:	4b0b      	ldr	r3, [pc, #44]	@ (800f23c <rmw_publish+0xbc>)
 800f210:	9301      	str	r3, [sp, #4]
 800f212:	9602      	str	r6, [sp, #8]
 800f214:	6972      	ldr	r2, [r6, #20]
 800f216:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800f218:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f21c:	ab06      	add	r3, sp, #24
 800f21e:	f004 f913 	bl	8013448 <uxr_prepare_output_stream_fragmented>
 800f222:	2800      	cmp	r0, #0
 800f224:	d1d2      	bne.n	800f1cc <rmw_publish+0x4c>
 800f226:	2001      	movs	r0, #1
 800f228:	b00e      	add	sp, #56	@ 0x38
 800f22a:	bd70      	pop	{r4, r5, r6, pc}
 800f22c:	2001      	movs	r0, #1
 800f22e:	4770      	bx	lr
 800f230:	6918      	ldr	r0, [r3, #16]
 800f232:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f236:	f002 fa6f 	bl	8011718 <uxr_flash_output_streams>
 800f23a:	e7de      	b.n	800f1fa <rmw_publish+0x7a>
 800f23c:	0800f179 	.word	0x0800f179

0800f240 <rmw_create_publisher>:
 800f240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f244:	b087      	sub	sp, #28
 800f246:	2800      	cmp	r0, #0
 800f248:	f000 80cc 	beq.w	800f3e4 <rmw_create_publisher+0x1a4>
 800f24c:	460e      	mov	r6, r1
 800f24e:	2900      	cmp	r1, #0
 800f250:	f000 80c8 	beq.w	800f3e4 <rmw_create_publisher+0x1a4>
 800f254:	4604      	mov	r4, r0
 800f256:	6800      	ldr	r0, [r0, #0]
 800f258:	4615      	mov	r5, r2
 800f25a:	4698      	mov	r8, r3
 800f25c:	f000 fea2 	bl	800ffa4 <is_uxrce_rmw_identifier_valid>
 800f260:	2800      	cmp	r0, #0
 800f262:	f000 80bf 	beq.w	800f3e4 <rmw_create_publisher+0x1a4>
 800f266:	2d00      	cmp	r5, #0
 800f268:	f000 80bc 	beq.w	800f3e4 <rmw_create_publisher+0x1a4>
 800f26c:	782b      	ldrb	r3, [r5, #0]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	f000 80b8 	beq.w	800f3e4 <rmw_create_publisher+0x1a4>
 800f274:	f1b8 0f00 	cmp.w	r8, #0
 800f278:	f000 80b4 	beq.w	800f3e4 <rmw_create_publisher+0x1a4>
 800f27c:	485c      	ldr	r0, [pc, #368]	@ (800f3f0 <rmw_create_publisher+0x1b0>)
 800f27e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800f282:	f007 fecf 	bl	8017024 <get_memory>
 800f286:	2800      	cmp	r0, #0
 800f288:	f000 80ac 	beq.w	800f3e4 <rmw_create_publisher+0x1a4>
 800f28c:	6884      	ldr	r4, [r0, #8]
 800f28e:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800f292:	f007 ff2f 	bl	80170f4 <rmw_get_implementation_identifier>
 800f296:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800f29a:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800f29e:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800f2a2:	4628      	mov	r0, r5
 800f2a4:	f7f0 ffbe 	bl	8000224 <strlen>
 800f2a8:	3001      	adds	r0, #1
 800f2aa:	283c      	cmp	r0, #60	@ 0x3c
 800f2ac:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800f2b0:	f200 8091 	bhi.w	800f3d6 <rmw_create_publisher+0x196>
 800f2b4:	4a4f      	ldr	r2, [pc, #316]	@ (800f3f4 <rmw_create_publisher+0x1b4>)
 800f2b6:	462b      	mov	r3, r5
 800f2b8:	213c      	movs	r1, #60	@ 0x3c
 800f2ba:	4650      	mov	r0, sl
 800f2bc:	f00a f936 	bl	801952c <sniprintf>
 800f2c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f2c4:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800f2c6:	4641      	mov	r1, r8
 800f2c8:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800f2cc:	2250      	movs	r2, #80	@ 0x50
 800f2ce:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800f2d2:	f00a fb68 	bl	80199a6 <memcpy>
 800f2d6:	f898 3008 	ldrb.w	r3, [r8, #8]
 800f2da:	4947      	ldr	r1, [pc, #284]	@ (800f3f8 <rmw_create_publisher+0x1b8>)
 800f2dc:	2b02      	cmp	r3, #2
 800f2de:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f2e2:	bf0c      	ite	eq
 800f2e4:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800f2e8:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800f2ec:	67a3      	str	r3, [r4, #120]	@ 0x78
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800f2f4:	4630      	mov	r0, r6
 800f2f6:	f000 fe63 	bl	800ffc0 <get_message_typesupport_handle>
 800f2fa:	2800      	cmp	r0, #0
 800f2fc:	d06b      	beq.n	800f3d6 <rmw_create_publisher+0x196>
 800f2fe:	6842      	ldr	r2, [r0, #4]
 800f300:	61a2      	str	r2, [r4, #24]
 800f302:	2a00      	cmp	r2, #0
 800f304:	d067      	beq.n	800f3d6 <rmw_create_publisher+0x196>
 800f306:	4629      	mov	r1, r5
 800f308:	4643      	mov	r3, r8
 800f30a:	4648      	mov	r0, r9
 800f30c:	f007 ff20 	bl	8017150 <create_topic>
 800f310:	6260      	str	r0, [r4, #36]	@ 0x24
 800f312:	2800      	cmp	r0, #0
 800f314:	d063      	beq.n	800f3de <rmw_create_publisher+0x19e>
 800f316:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f31a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f31e:	2103      	movs	r1, #3
 800f320:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800f324:	1c42      	adds	r2, r0, #1
 800f326:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800f32a:	f001 fe73 	bl	8011014 <uxr_object_id>
 800f32e:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800f332:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f336:	6120      	str	r0, [r4, #16]
 800f338:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800f33c:	6910      	ldr	r0, [r2, #16]
 800f33e:	2506      	movs	r5, #6
 800f340:	9500      	str	r5, [sp, #0]
 800f342:	6819      	ldr	r1, [r3, #0]
 800f344:	6922      	ldr	r2, [r4, #16]
 800f346:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f34a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f34e:	f001 fc51 	bl	8010bf4 <uxr_buffer_create_publisher_bin>
 800f352:	4602      	mov	r2, r0
 800f354:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f358:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800f35c:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800f360:	f000 fda0 	bl	800fea4 <run_xrce_session>
 800f364:	b3b8      	cbz	r0, 800f3d6 <rmw_create_publisher+0x196>
 800f366:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f36a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f36e:	2105      	movs	r1, #5
 800f370:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800f374:	1c42      	adds	r2, r0, #1
 800f376:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800f37a:	f001 fe4b 	bl	8011014 <uxr_object_id>
 800f37e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800f382:	6160      	str	r0, [r4, #20]
 800f384:	691e      	ldr	r6, [r3, #16]
 800f386:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f38a:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800f38e:	f10d 0a10 	add.w	sl, sp, #16
 800f392:	4641      	mov	r1, r8
 800f394:	4650      	mov	r0, sl
 800f396:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800f39a:	f000 fd9f 	bl	800fedc <convert_qos_profile>
 800f39e:	9503      	str	r5, [sp, #12]
 800f3a0:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800f3a4:	9001      	str	r0, [sp, #4]
 800f3a6:	f8ad 1008 	strh.w	r1, [sp, #8]
 800f3aa:	f8db 3010 	ldr.w	r3, [fp, #16]
 800f3ae:	9300      	str	r3, [sp, #0]
 800f3b0:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800f3b4:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800f3b8:	f8d8 1000 	ldr.w	r1, [r8]
 800f3bc:	4630      	mov	r0, r6
 800f3be:	f001 fc79 	bl	8010cb4 <uxr_buffer_create_datawriter_bin>
 800f3c2:	4602      	mov	r2, r0
 800f3c4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f3c8:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800f3cc:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800f3d0:	f000 fd68 	bl	800fea4 <run_xrce_session>
 800f3d4:	b938      	cbnz	r0, 800f3e6 <rmw_create_publisher+0x1a6>
 800f3d6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800f3d8:	b108      	cbz	r0, 800f3de <rmw_create_publisher+0x19e>
 800f3da:	f000 fc61 	bl	800fca0 <rmw_uxrce_fini_topic_memory>
 800f3de:	4638      	mov	r0, r7
 800f3e0:	f000 fc06 	bl	800fbf0 <rmw_uxrce_fini_publisher_memory>
 800f3e4:	2700      	movs	r7, #0
 800f3e6:	4638      	mov	r0, r7
 800f3e8:	b007      	add	sp, #28
 800f3ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3ee:	bf00      	nop
 800f3f0:	2001185c 	.word	0x2001185c
 800f3f4:	0801ad04 	.word	0x0801ad04
 800f3f8:	0801a838 	.word	0x0801a838

0800f3fc <rmw_publisher_get_actual_qos>:
 800f3fc:	b150      	cbz	r0, 800f414 <rmw_publisher_get_actual_qos+0x18>
 800f3fe:	b508      	push	{r3, lr}
 800f400:	460b      	mov	r3, r1
 800f402:	b149      	cbz	r1, 800f418 <rmw_publisher_get_actual_qos+0x1c>
 800f404:	6841      	ldr	r1, [r0, #4]
 800f406:	2250      	movs	r2, #80	@ 0x50
 800f408:	3128      	adds	r1, #40	@ 0x28
 800f40a:	4618      	mov	r0, r3
 800f40c:	f00a facb 	bl	80199a6 <memcpy>
 800f410:	2000      	movs	r0, #0
 800f412:	bd08      	pop	{r3, pc}
 800f414:	200b      	movs	r0, #11
 800f416:	4770      	bx	lr
 800f418:	200b      	movs	r0, #11
 800f41a:	bd08      	pop	{r3, pc}

0800f41c <rmw_destroy_publisher>:
 800f41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f41e:	b128      	cbz	r0, 800f42c <rmw_destroy_publisher+0x10>
 800f420:	4604      	mov	r4, r0
 800f422:	6800      	ldr	r0, [r0, #0]
 800f424:	460d      	mov	r5, r1
 800f426:	f000 fdbd 	bl	800ffa4 <is_uxrce_rmw_identifier_valid>
 800f42a:	b910      	cbnz	r0, 800f432 <rmw_destroy_publisher+0x16>
 800f42c:	2401      	movs	r4, #1
 800f42e:	4620      	mov	r0, r4
 800f430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f432:	6863      	ldr	r3, [r4, #4]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d0f9      	beq.n	800f42c <rmw_destroy_publisher+0x10>
 800f438:	2d00      	cmp	r5, #0
 800f43a:	d0f7      	beq.n	800f42c <rmw_destroy_publisher+0x10>
 800f43c:	6828      	ldr	r0, [r5, #0]
 800f43e:	f000 fdb1 	bl	800ffa4 <is_uxrce_rmw_identifier_valid>
 800f442:	2800      	cmp	r0, #0
 800f444:	d0f2      	beq.n	800f42c <rmw_destroy_publisher+0x10>
 800f446:	686c      	ldr	r4, [r5, #4]
 800f448:	2c00      	cmp	r4, #0
 800f44a:	d0ef      	beq.n	800f42c <rmw_destroy_publisher+0x10>
 800f44c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800f44e:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800f452:	f007 fecd 	bl	80171f0 <destroy_topic>
 800f456:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800f45a:	6962      	ldr	r2, [r4, #20]
 800f45c:	6918      	ldr	r0, [r3, #16]
 800f45e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f462:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f466:	6819      	ldr	r1, [r3, #0]
 800f468:	f001 fb10 	bl	8010a8c <uxr_buffer_delete_entity>
 800f46c:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800f470:	6922      	ldr	r2, [r4, #16]
 800f472:	691b      	ldr	r3, [r3, #16]
 800f474:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800f478:	4604      	mov	r4, r0
 800f47a:	6809      	ldr	r1, [r1, #0]
 800f47c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800f480:	f001 fb04 	bl	8010a8c <uxr_buffer_delete_entity>
 800f484:	693e      	ldr	r6, [r7, #16]
 800f486:	4622      	mov	r2, r4
 800f488:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800f48c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800f490:	4604      	mov	r4, r0
 800f492:	4630      	mov	r0, r6
 800f494:	f000 fd06 	bl	800fea4 <run_xrce_session>
 800f498:	693e      	ldr	r6, [r7, #16]
 800f49a:	4622      	mov	r2, r4
 800f49c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800f4a0:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800f4a4:	4604      	mov	r4, r0
 800f4a6:	4630      	mov	r0, r6
 800f4a8:	f000 fcfc 	bl	800fea4 <run_xrce_session>
 800f4ac:	b12c      	cbz	r4, 800f4ba <rmw_destroy_publisher+0x9e>
 800f4ae:	b120      	cbz	r0, 800f4ba <rmw_destroy_publisher+0x9e>
 800f4b0:	2400      	movs	r4, #0
 800f4b2:	4628      	mov	r0, r5
 800f4b4:	f000 fb9c 	bl	800fbf0 <rmw_uxrce_fini_publisher_memory>
 800f4b8:	e7b9      	b.n	800f42e <rmw_destroy_publisher+0x12>
 800f4ba:	2402      	movs	r4, #2
 800f4bc:	e7f9      	b.n	800f4b2 <rmw_destroy_publisher+0x96>
 800f4be:	bf00      	nop

0800f4c0 <rmw_destroy_service>:
 800f4c0:	b570      	push	{r4, r5, r6, lr}
 800f4c2:	b128      	cbz	r0, 800f4d0 <rmw_destroy_service+0x10>
 800f4c4:	4604      	mov	r4, r0
 800f4c6:	6800      	ldr	r0, [r0, #0]
 800f4c8:	460d      	mov	r5, r1
 800f4ca:	f000 fd6b 	bl	800ffa4 <is_uxrce_rmw_identifier_valid>
 800f4ce:	b910      	cbnz	r0, 800f4d6 <rmw_destroy_service+0x16>
 800f4d0:	2401      	movs	r4, #1
 800f4d2:	4620      	mov	r0, r4
 800f4d4:	bd70      	pop	{r4, r5, r6, pc}
 800f4d6:	6863      	ldr	r3, [r4, #4]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d0f9      	beq.n	800f4d0 <rmw_destroy_service+0x10>
 800f4dc:	2d00      	cmp	r5, #0
 800f4de:	d0f7      	beq.n	800f4d0 <rmw_destroy_service+0x10>
 800f4e0:	6828      	ldr	r0, [r5, #0]
 800f4e2:	f000 fd5f 	bl	800ffa4 <is_uxrce_rmw_identifier_valid>
 800f4e6:	2800      	cmp	r0, #0
 800f4e8:	d0f2      	beq.n	800f4d0 <rmw_destroy_service+0x10>
 800f4ea:	686e      	ldr	r6, [r5, #4]
 800f4ec:	2e00      	cmp	r6, #0
 800f4ee:	d0ef      	beq.n	800f4d0 <rmw_destroy_service+0x10>
 800f4f0:	6864      	ldr	r4, [r4, #4]
 800f4f2:	6932      	ldr	r2, [r6, #16]
 800f4f4:	6920      	ldr	r0, [r4, #16]
 800f4f6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f4fa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f4fe:	6819      	ldr	r1, [r3, #0]
 800f500:	f001 fef6 	bl	80112f0 <uxr_buffer_cancel_data>
 800f504:	4602      	mov	r2, r0
 800f506:	6920      	ldr	r0, [r4, #16]
 800f508:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f50c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f510:	f000 fcc8 	bl	800fea4 <run_xrce_session>
 800f514:	6920      	ldr	r0, [r4, #16]
 800f516:	6932      	ldr	r2, [r6, #16]
 800f518:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f51c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f520:	6819      	ldr	r1, [r3, #0]
 800f522:	f001 fab3 	bl	8010a8c <uxr_buffer_delete_entity>
 800f526:	4602      	mov	r2, r0
 800f528:	6920      	ldr	r0, [r4, #16]
 800f52a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f52e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f532:	f000 fcb7 	bl	800fea4 <run_xrce_session>
 800f536:	2800      	cmp	r0, #0
 800f538:	4628      	mov	r0, r5
 800f53a:	bf14      	ite	ne
 800f53c:	2400      	movne	r4, #0
 800f53e:	2402      	moveq	r4, #2
 800f540:	f000 fb82 	bl	800fc48 <rmw_uxrce_fini_service_memory>
 800f544:	e7c5      	b.n	800f4d2 <rmw_destroy_service+0x12>
 800f546:	bf00      	nop

0800f548 <rmw_create_subscription>:
 800f548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f54c:	b08d      	sub	sp, #52	@ 0x34
 800f54e:	2800      	cmp	r0, #0
 800f550:	f000 80d1 	beq.w	800f6f6 <rmw_create_subscription+0x1ae>
 800f554:	460e      	mov	r6, r1
 800f556:	2900      	cmp	r1, #0
 800f558:	f000 80cd 	beq.w	800f6f6 <rmw_create_subscription+0x1ae>
 800f55c:	4604      	mov	r4, r0
 800f55e:	6800      	ldr	r0, [r0, #0]
 800f560:	4615      	mov	r5, r2
 800f562:	4698      	mov	r8, r3
 800f564:	f000 fd1e 	bl	800ffa4 <is_uxrce_rmw_identifier_valid>
 800f568:	2800      	cmp	r0, #0
 800f56a:	f000 80c4 	beq.w	800f6f6 <rmw_create_subscription+0x1ae>
 800f56e:	2d00      	cmp	r5, #0
 800f570:	f000 80c1 	beq.w	800f6f6 <rmw_create_subscription+0x1ae>
 800f574:	782b      	ldrb	r3, [r5, #0]
 800f576:	2b00      	cmp	r3, #0
 800f578:	f000 80bd 	beq.w	800f6f6 <rmw_create_subscription+0x1ae>
 800f57c:	f1b8 0f00 	cmp.w	r8, #0
 800f580:	f000 80b9 	beq.w	800f6f6 <rmw_create_subscription+0x1ae>
 800f584:	485e      	ldr	r0, [pc, #376]	@ (800f700 <rmw_create_subscription+0x1b8>)
 800f586:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800f58a:	f007 fd4b 	bl	8017024 <get_memory>
 800f58e:	4604      	mov	r4, r0
 800f590:	2800      	cmp	r0, #0
 800f592:	f000 80b1 	beq.w	800f6f8 <rmw_create_subscription+0x1b0>
 800f596:	6887      	ldr	r7, [r0, #8]
 800f598:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800f59c:	f007 fdaa 	bl	80170f4 <rmw_get_implementation_identifier>
 800f5a0:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 800f5a4:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800f5a6:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800f5aa:	4628      	mov	r0, r5
 800f5ac:	f7f0 fe3a 	bl	8000224 <strlen>
 800f5b0:	3001      	adds	r0, #1
 800f5b2:	283c      	cmp	r0, #60	@ 0x3c
 800f5b4:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 800f5b8:	f200 8096 	bhi.w	800f6e8 <rmw_create_subscription+0x1a0>
 800f5bc:	4a51      	ldr	r2, [pc, #324]	@ (800f704 <rmw_create_subscription+0x1bc>)
 800f5be:	462b      	mov	r3, r5
 800f5c0:	213c      	movs	r1, #60	@ 0x3c
 800f5c2:	4650      	mov	r0, sl
 800f5c4:	f009 ffb2 	bl	801952c <sniprintf>
 800f5c8:	4641      	mov	r1, r8
 800f5ca:	f8c7 9020 	str.w	r9, [r7, #32]
 800f5ce:	2250      	movs	r2, #80	@ 0x50
 800f5d0:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800f5d4:	f00a f9e7 	bl	80199a6 <memcpy>
 800f5d8:	494b      	ldr	r1, [pc, #300]	@ (800f708 <rmw_create_subscription+0x1c0>)
 800f5da:	4630      	mov	r0, r6
 800f5dc:	f000 fcf0 	bl	800ffc0 <get_message_typesupport_handle>
 800f5e0:	2800      	cmp	r0, #0
 800f5e2:	f000 8081 	beq.w	800f6e8 <rmw_create_subscription+0x1a0>
 800f5e6:	6842      	ldr	r2, [r0, #4]
 800f5e8:	61ba      	str	r2, [r7, #24]
 800f5ea:	2a00      	cmp	r2, #0
 800f5ec:	d07c      	beq.n	800f6e8 <rmw_create_subscription+0x1a0>
 800f5ee:	4629      	mov	r1, r5
 800f5f0:	4643      	mov	r3, r8
 800f5f2:	4648      	mov	r0, r9
 800f5f4:	f007 fdac 	bl	8017150 <create_topic>
 800f5f8:	61f8      	str	r0, [r7, #28]
 800f5fa:	2800      	cmp	r0, #0
 800f5fc:	d078      	beq.n	800f6f0 <rmw_create_subscription+0x1a8>
 800f5fe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f602:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f606:	2104      	movs	r1, #4
 800f608:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 800f60c:	1c42      	adds	r2, r0, #1
 800f60e:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 800f612:	f001 fcff 	bl	8011014 <uxr_object_id>
 800f616:	6138      	str	r0, [r7, #16]
 800f618:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f61c:	2506      	movs	r5, #6
 800f61e:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 800f622:	9500      	str	r5, [sp, #0]
 800f624:	6819      	ldr	r1, [r3, #0]
 800f626:	693a      	ldr	r2, [r7, #16]
 800f628:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f62c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f630:	f001 fb10 	bl	8010c54 <uxr_buffer_create_subscriber_bin>
 800f634:	4602      	mov	r2, r0
 800f636:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f63a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800f63e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800f642:	f000 fc2f 	bl	800fea4 <run_xrce_session>
 800f646:	2800      	cmp	r0, #0
 800f648:	d04e      	beq.n	800f6e8 <rmw_create_subscription+0x1a0>
 800f64a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f64e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f652:	4629      	mov	r1, r5
 800f654:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 800f658:	1c42      	adds	r2, r0, #1
 800f65a:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 800f65e:	f001 fcd9 	bl	8011014 <uxr_object_id>
 800f662:	ae08      	add	r6, sp, #32
 800f664:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f668:	69fb      	ldr	r3, [r7, #28]
 800f66a:	6178      	str	r0, [r7, #20]
 800f66c:	4641      	mov	r1, r8
 800f66e:	4630      	mov	r0, r6
 800f670:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 800f674:	9305      	str	r3, [sp, #20]
 800f676:	f000 fc31 	bl	800fedc <convert_qos_profile>
 800f67a:	9503      	str	r5, [sp, #12]
 800f67c:	e896 0003 	ldmia.w	r6, {r0, r1}
 800f680:	9b05      	ldr	r3, [sp, #20]
 800f682:	9001      	str	r0, [sp, #4]
 800f684:	f8ad 1008 	strh.w	r1, [sp, #8]
 800f688:	691b      	ldr	r3, [r3, #16]
 800f68a:	9300      	str	r3, [sp, #0]
 800f68c:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800f690:	f8db 1000 	ldr.w	r1, [fp]
 800f694:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 800f698:	f001 fb82 	bl	8010da0 <uxr_buffer_create_datareader_bin>
 800f69c:	4602      	mov	r2, r0
 800f69e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f6a2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800f6a6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800f6aa:	f000 fbfb 	bl	800fea4 <run_xrce_session>
 800f6ae:	b1d8      	cbz	r0, 800f6e8 <rmw_create_subscription+0x1a0>
 800f6b0:	f898 3008 	ldrb.w	r3, [r8, #8]
 800f6b4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f6b8:	2b02      	cmp	r3, #2
 800f6ba:	bf0c      	ite	eq
 800f6bc:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 800f6c0:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 800f6c4:	9307      	str	r3, [sp, #28]
 800f6c6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 800f6d0:	ab0a      	add	r3, sp, #40	@ 0x28
 800f6d2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800f6d6:	9300      	str	r3, [sp, #0]
 800f6d8:	697a      	ldr	r2, [r7, #20]
 800f6da:	9b07      	ldr	r3, [sp, #28]
 800f6dc:	6809      	ldr	r1, [r1, #0]
 800f6de:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f6e2:	f001 fdcb 	bl	801127c <uxr_buffer_request_data>
 800f6e6:	e007      	b.n	800f6f8 <rmw_create_subscription+0x1b0>
 800f6e8:	69f8      	ldr	r0, [r7, #28]
 800f6ea:	b108      	cbz	r0, 800f6f0 <rmw_create_subscription+0x1a8>
 800f6ec:	f000 fad8 	bl	800fca0 <rmw_uxrce_fini_topic_memory>
 800f6f0:	4620      	mov	r0, r4
 800f6f2:	f000 fa93 	bl	800fc1c <rmw_uxrce_fini_subscription_memory>
 800f6f6:	2400      	movs	r4, #0
 800f6f8:	4620      	mov	r0, r4
 800f6fa:	b00d      	add	sp, #52	@ 0x34
 800f6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f700:	2001189c 	.word	0x2001189c
 800f704:	0801ad04 	.word	0x0801ad04
 800f708:	0801a838 	.word	0x0801a838

0800f70c <rmw_subscription_get_actual_qos>:
 800f70c:	b150      	cbz	r0, 800f724 <rmw_subscription_get_actual_qos+0x18>
 800f70e:	b508      	push	{r3, lr}
 800f710:	460b      	mov	r3, r1
 800f712:	b149      	cbz	r1, 800f728 <rmw_subscription_get_actual_qos+0x1c>
 800f714:	6841      	ldr	r1, [r0, #4]
 800f716:	2250      	movs	r2, #80	@ 0x50
 800f718:	3128      	adds	r1, #40	@ 0x28
 800f71a:	4618      	mov	r0, r3
 800f71c:	f00a f943 	bl	80199a6 <memcpy>
 800f720:	2000      	movs	r0, #0
 800f722:	bd08      	pop	{r3, pc}
 800f724:	200b      	movs	r0, #11
 800f726:	4770      	bx	lr
 800f728:	200b      	movs	r0, #11
 800f72a:	bd08      	pop	{r3, pc}

0800f72c <rmw_destroy_subscription>:
 800f72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f72e:	b128      	cbz	r0, 800f73c <rmw_destroy_subscription+0x10>
 800f730:	4604      	mov	r4, r0
 800f732:	6800      	ldr	r0, [r0, #0]
 800f734:	460d      	mov	r5, r1
 800f736:	f000 fc35 	bl	800ffa4 <is_uxrce_rmw_identifier_valid>
 800f73a:	b910      	cbnz	r0, 800f742 <rmw_destroy_subscription+0x16>
 800f73c:	2401      	movs	r4, #1
 800f73e:	4620      	mov	r0, r4
 800f740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f742:	6863      	ldr	r3, [r4, #4]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d0f9      	beq.n	800f73c <rmw_destroy_subscription+0x10>
 800f748:	2d00      	cmp	r5, #0
 800f74a:	d0f7      	beq.n	800f73c <rmw_destroy_subscription+0x10>
 800f74c:	6828      	ldr	r0, [r5, #0]
 800f74e:	f000 fc29 	bl	800ffa4 <is_uxrce_rmw_identifier_valid>
 800f752:	2800      	cmp	r0, #0
 800f754:	d0f2      	beq.n	800f73c <rmw_destroy_subscription+0x10>
 800f756:	686c      	ldr	r4, [r5, #4]
 800f758:	2c00      	cmp	r4, #0
 800f75a:	d0ef      	beq.n	800f73c <rmw_destroy_subscription+0x10>
 800f75c:	6a26      	ldr	r6, [r4, #32]
 800f75e:	6962      	ldr	r2, [r4, #20]
 800f760:	6930      	ldr	r0, [r6, #16]
 800f762:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f766:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f76a:	6819      	ldr	r1, [r3, #0]
 800f76c:	f001 fdc0 	bl	80112f0 <uxr_buffer_cancel_data>
 800f770:	4602      	mov	r2, r0
 800f772:	6930      	ldr	r0, [r6, #16]
 800f774:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f778:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f77c:	f000 fb92 	bl	800fea4 <run_xrce_session>
 800f780:	69e0      	ldr	r0, [r4, #28]
 800f782:	f007 fd35 	bl	80171f0 <destroy_topic>
 800f786:	6a23      	ldr	r3, [r4, #32]
 800f788:	6962      	ldr	r2, [r4, #20]
 800f78a:	6918      	ldr	r0, [r3, #16]
 800f78c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f790:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f794:	6819      	ldr	r1, [r3, #0]
 800f796:	f001 f979 	bl	8010a8c <uxr_buffer_delete_entity>
 800f79a:	6a23      	ldr	r3, [r4, #32]
 800f79c:	6922      	ldr	r2, [r4, #16]
 800f79e:	691b      	ldr	r3, [r3, #16]
 800f7a0:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800f7a4:	4604      	mov	r4, r0
 800f7a6:	6809      	ldr	r1, [r1, #0]
 800f7a8:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800f7ac:	f001 f96e 	bl	8010a8c <uxr_buffer_delete_entity>
 800f7b0:	6937      	ldr	r7, [r6, #16]
 800f7b2:	4622      	mov	r2, r4
 800f7b4:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800f7b8:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800f7bc:	4604      	mov	r4, r0
 800f7be:	4638      	mov	r0, r7
 800f7c0:	f000 fb70 	bl	800fea4 <run_xrce_session>
 800f7c4:	6936      	ldr	r6, [r6, #16]
 800f7c6:	4622      	mov	r2, r4
 800f7c8:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800f7cc:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800f7d0:	4604      	mov	r4, r0
 800f7d2:	4630      	mov	r0, r6
 800f7d4:	f000 fb66 	bl	800fea4 <run_xrce_session>
 800f7d8:	b12c      	cbz	r4, 800f7e6 <rmw_destroy_subscription+0xba>
 800f7da:	b120      	cbz	r0, 800f7e6 <rmw_destroy_subscription+0xba>
 800f7dc:	2400      	movs	r4, #0
 800f7de:	4628      	mov	r0, r5
 800f7e0:	f000 fa1c 	bl	800fc1c <rmw_uxrce_fini_subscription_memory>
 800f7e4:	e7ab      	b.n	800f73e <rmw_destroy_subscription+0x12>
 800f7e6:	2402      	movs	r4, #2
 800f7e8:	e7f9      	b.n	800f7de <rmw_destroy_subscription+0xb2>
 800f7ea:	bf00      	nop

0800f7ec <rmw_take_with_info>:
 800f7ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7ee:	4604      	mov	r4, r0
 800f7f0:	6800      	ldr	r0, [r0, #0]
 800f7f2:	b089      	sub	sp, #36	@ 0x24
 800f7f4:	460f      	mov	r7, r1
 800f7f6:	4615      	mov	r5, r2
 800f7f8:	b128      	cbz	r0, 800f806 <rmw_take_with_info+0x1a>
 800f7fa:	4b24      	ldr	r3, [pc, #144]	@ (800f88c <rmw_take_with_info+0xa0>)
 800f7fc:	6819      	ldr	r1, [r3, #0]
 800f7fe:	f7f0 fd07 	bl	8000210 <strcmp>
 800f802:	2800      	cmp	r0, #0
 800f804:	d13e      	bne.n	800f884 <rmw_take_with_info+0x98>
 800f806:	b305      	cbz	r5, 800f84a <rmw_take_with_info+0x5e>
 800f808:	6864      	ldr	r4, [r4, #4]
 800f80a:	2300      	movs	r3, #0
 800f80c:	702b      	strb	r3, [r5, #0]
 800f80e:	f000 facb 	bl	800fda8 <rmw_uxrce_clean_expired_static_input_buffer>
 800f812:	4620      	mov	r0, r4
 800f814:	f000 faa0 	bl	800fd58 <rmw_uxrce_find_static_input_buffer_by_owner>
 800f818:	4606      	mov	r6, r0
 800f81a:	b1f0      	cbz	r0, 800f85a <rmw_take_with_info+0x6e>
 800f81c:	6881      	ldr	r1, [r0, #8]
 800f81e:	4668      	mov	r0, sp
 800f820:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 800f824:	3110      	adds	r1, #16
 800f826:	f7fc fa89 	bl	800bd3c <ucdr_init_buffer>
 800f82a:	69a3      	ldr	r3, [r4, #24]
 800f82c:	4639      	mov	r1, r7
 800f82e:	68db      	ldr	r3, [r3, #12]
 800f830:	4668      	mov	r0, sp
 800f832:	4798      	blx	r3
 800f834:	4631      	mov	r1, r6
 800f836:	4604      	mov	r4, r0
 800f838:	4815      	ldr	r0, [pc, #84]	@ (800f890 <rmw_take_with_info+0xa4>)
 800f83a:	f007 fc03 	bl	8017044 <put_memory>
 800f83e:	702c      	strb	r4, [r5, #0]
 800f840:	f084 0001 	eor.w	r0, r4, #1
 800f844:	b2c0      	uxtb	r0, r0
 800f846:	b009      	add	sp, #36	@ 0x24
 800f848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f84a:	6864      	ldr	r4, [r4, #4]
 800f84c:	f000 faac 	bl	800fda8 <rmw_uxrce_clean_expired_static_input_buffer>
 800f850:	4620      	mov	r0, r4
 800f852:	f000 fa81 	bl	800fd58 <rmw_uxrce_find_static_input_buffer_by_owner>
 800f856:	4605      	mov	r5, r0
 800f858:	b910      	cbnz	r0, 800f860 <rmw_take_with_info+0x74>
 800f85a:	2001      	movs	r0, #1
 800f85c:	b009      	add	sp, #36	@ 0x24
 800f85e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f860:	68a9      	ldr	r1, [r5, #8]
 800f862:	4668      	mov	r0, sp
 800f864:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 800f868:	3110      	adds	r1, #16
 800f86a:	f7fc fa67 	bl	800bd3c <ucdr_init_buffer>
 800f86e:	69a3      	ldr	r3, [r4, #24]
 800f870:	4639      	mov	r1, r7
 800f872:	68db      	ldr	r3, [r3, #12]
 800f874:	4668      	mov	r0, sp
 800f876:	4798      	blx	r3
 800f878:	4629      	mov	r1, r5
 800f87a:	4604      	mov	r4, r0
 800f87c:	4804      	ldr	r0, [pc, #16]	@ (800f890 <rmw_take_with_info+0xa4>)
 800f87e:	f007 fbe1 	bl	8017044 <put_memory>
 800f882:	e7dd      	b.n	800f840 <rmw_take_with_info+0x54>
 800f884:	200c      	movs	r0, #12
 800f886:	b009      	add	sp, #36	@ 0x24
 800f888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f88a:	bf00      	nop
 800f88c:	0801b6a0 	.word	0x0801b6a0
 800f890:	2001188c 	.word	0x2001188c

0800f894 <rmw_uxrce_transport_init>:
 800f894:	b508      	push	{r3, lr}
 800f896:	b108      	cbz	r0, 800f89c <rmw_uxrce_transport_init+0x8>
 800f898:	f100 0210 	add.w	r2, r0, #16
 800f89c:	b139      	cbz	r1, 800f8ae <rmw_uxrce_transport_init+0x1a>
 800f89e:	6949      	ldr	r1, [r1, #20]
 800f8a0:	4610      	mov	r0, r2
 800f8a2:	f001 fb7f 	bl	8010fa4 <uxr_init_custom_transport>
 800f8a6:	f080 0001 	eor.w	r0, r0, #1
 800f8aa:	b2c0      	uxtb	r0, r0
 800f8ac:	bd08      	pop	{r3, pc}
 800f8ae:	4b04      	ldr	r3, [pc, #16]	@ (800f8c0 <rmw_uxrce_transport_init+0x2c>)
 800f8b0:	4610      	mov	r0, r2
 800f8b2:	6859      	ldr	r1, [r3, #4]
 800f8b4:	f001 fb76 	bl	8010fa4 <uxr_init_custom_transport>
 800f8b8:	f080 0001 	eor.w	r0, r0, #1
 800f8bc:	b2c0      	uxtb	r0, r0
 800f8be:	bd08      	pop	{r3, pc}
 800f8c0:	2000cf24 	.word	0x2000cf24

0800f8c4 <rmw_uros_set_publisher_session_timeout>:
 800f8c4:	b118      	cbz	r0, 800f8ce <rmw_uros_set_publisher_session_timeout+0xa>
 800f8c6:	6843      	ldr	r3, [r0, #4]
 800f8c8:	2000      	movs	r0, #0
 800f8ca:	67d9      	str	r1, [r3, #124]	@ 0x7c
 800f8cc:	4770      	bx	lr
 800f8ce:	200b      	movs	r0, #11
 800f8d0:	4770      	bx	lr
 800f8d2:	bf00      	nop

0800f8d4 <rmw_uros_set_context_entity_destroy_session_timeout>:
 800f8d4:	b160      	cbz	r0, 800f8f0 <rmw_uros_set_context_entity_destroy_session_timeout+0x1c>
 800f8d6:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800f8d8:	2900      	cmp	r1, #0
 800f8da:	bfd4      	ite	le
 800f8dc:	f503 725f 	addle.w	r2, r3, #892	@ 0x37c
 800f8e0:	f503 725e 	addgt.w	r2, r3, #888	@ 0x378
 800f8e4:	f8c3 2388 	str.w	r2, [r3, #904]	@ 0x388
 800f8e8:	f8c3 1390 	str.w	r1, [r3, #912]	@ 0x390
 800f8ec:	2000      	movs	r0, #0
 800f8ee:	4770      	bx	lr
 800f8f0:	200b      	movs	r0, #11
 800f8f2:	4770      	bx	lr

0800f8f4 <rmw_uxrce_init_service_memory>:
 800f8f4:	b1e2      	cbz	r2, 800f930 <rmw_uxrce_init_service_memory+0x3c>
 800f8f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8fa:	7b05      	ldrb	r5, [r0, #12]
 800f8fc:	4606      	mov	r6, r0
 800f8fe:	b9ad      	cbnz	r5, 800f92c <rmw_uxrce_init_service_memory+0x38>
 800f900:	23c8      	movs	r3, #200	@ 0xc8
 800f902:	e9c0 5500 	strd	r5, r5, [r0]
 800f906:	6083      	str	r3, [r0, #8]
 800f908:	f240 1301 	movw	r3, #257	@ 0x101
 800f90c:	4617      	mov	r7, r2
 800f90e:	8183      	strh	r3, [r0, #12]
 800f910:	460c      	mov	r4, r1
 800f912:	46a8      	mov	r8, r5
 800f914:	4621      	mov	r1, r4
 800f916:	4630      	mov	r0, r6
 800f918:	3501      	adds	r5, #1
 800f91a:	f007 fb93 	bl	8017044 <put_memory>
 800f91e:	42af      	cmp	r7, r5
 800f920:	60a4      	str	r4, [r4, #8]
 800f922:	f884 800c 	strb.w	r8, [r4, #12]
 800f926:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800f92a:	d1f3      	bne.n	800f914 <rmw_uxrce_init_service_memory+0x20>
 800f92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f930:	4770      	bx	lr
 800f932:	bf00      	nop

0800f934 <rmw_uxrce_init_client_memory>:
 800f934:	b1e2      	cbz	r2, 800f970 <rmw_uxrce_init_client_memory+0x3c>
 800f936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f93a:	7b05      	ldrb	r5, [r0, #12]
 800f93c:	4606      	mov	r6, r0
 800f93e:	b9ad      	cbnz	r5, 800f96c <rmw_uxrce_init_client_memory+0x38>
 800f940:	23c8      	movs	r3, #200	@ 0xc8
 800f942:	e9c0 5500 	strd	r5, r5, [r0]
 800f946:	6083      	str	r3, [r0, #8]
 800f948:	f240 1301 	movw	r3, #257	@ 0x101
 800f94c:	4617      	mov	r7, r2
 800f94e:	8183      	strh	r3, [r0, #12]
 800f950:	460c      	mov	r4, r1
 800f952:	46a8      	mov	r8, r5
 800f954:	4621      	mov	r1, r4
 800f956:	4630      	mov	r0, r6
 800f958:	3501      	adds	r5, #1
 800f95a:	f007 fb73 	bl	8017044 <put_memory>
 800f95e:	42af      	cmp	r7, r5
 800f960:	60a4      	str	r4, [r4, #8]
 800f962:	f884 800c 	strb.w	r8, [r4, #12]
 800f966:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800f96a:	d1f3      	bne.n	800f954 <rmw_uxrce_init_client_memory+0x20>
 800f96c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f970:	4770      	bx	lr
 800f972:	bf00      	nop

0800f974 <rmw_uxrce_init_publisher_memory>:
 800f974:	b1e2      	cbz	r2, 800f9b0 <rmw_uxrce_init_publisher_memory+0x3c>
 800f976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f97a:	7b05      	ldrb	r5, [r0, #12]
 800f97c:	4606      	mov	r6, r0
 800f97e:	b9ad      	cbnz	r5, 800f9ac <rmw_uxrce_init_publisher_memory+0x38>
 800f980:	23d8      	movs	r3, #216	@ 0xd8
 800f982:	e9c0 5500 	strd	r5, r5, [r0]
 800f986:	6083      	str	r3, [r0, #8]
 800f988:	f240 1301 	movw	r3, #257	@ 0x101
 800f98c:	4617      	mov	r7, r2
 800f98e:	8183      	strh	r3, [r0, #12]
 800f990:	460c      	mov	r4, r1
 800f992:	46a8      	mov	r8, r5
 800f994:	4621      	mov	r1, r4
 800f996:	4630      	mov	r0, r6
 800f998:	3501      	adds	r5, #1
 800f99a:	f007 fb53 	bl	8017044 <put_memory>
 800f99e:	42af      	cmp	r7, r5
 800f9a0:	60a4      	str	r4, [r4, #8]
 800f9a2:	f884 800c 	strb.w	r8, [r4, #12]
 800f9a6:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800f9aa:	d1f3      	bne.n	800f994 <rmw_uxrce_init_publisher_memory+0x20>
 800f9ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9b0:	4770      	bx	lr
 800f9b2:	bf00      	nop

0800f9b4 <rmw_uxrce_init_subscription_memory>:
 800f9b4:	b1e2      	cbz	r2, 800f9f0 <rmw_uxrce_init_subscription_memory+0x3c>
 800f9b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9ba:	7b05      	ldrb	r5, [r0, #12]
 800f9bc:	4606      	mov	r6, r0
 800f9be:	b9ad      	cbnz	r5, 800f9ec <rmw_uxrce_init_subscription_memory+0x38>
 800f9c0:	23d8      	movs	r3, #216	@ 0xd8
 800f9c2:	e9c0 5500 	strd	r5, r5, [r0]
 800f9c6:	6083      	str	r3, [r0, #8]
 800f9c8:	f240 1301 	movw	r3, #257	@ 0x101
 800f9cc:	4617      	mov	r7, r2
 800f9ce:	8183      	strh	r3, [r0, #12]
 800f9d0:	460c      	mov	r4, r1
 800f9d2:	46a8      	mov	r8, r5
 800f9d4:	4621      	mov	r1, r4
 800f9d6:	4630      	mov	r0, r6
 800f9d8:	3501      	adds	r5, #1
 800f9da:	f007 fb33 	bl	8017044 <put_memory>
 800f9de:	42af      	cmp	r7, r5
 800f9e0:	60a4      	str	r4, [r4, #8]
 800f9e2:	f884 800c 	strb.w	r8, [r4, #12]
 800f9e6:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800f9ea:	d1f3      	bne.n	800f9d4 <rmw_uxrce_init_subscription_memory+0x20>
 800f9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9f0:	4770      	bx	lr
 800f9f2:	bf00      	nop

0800f9f4 <rmw_uxrce_init_node_memory>:
 800f9f4:	b1e2      	cbz	r2, 800fa30 <rmw_uxrce_init_node_memory+0x3c>
 800f9f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9fa:	7b05      	ldrb	r5, [r0, #12]
 800f9fc:	4606      	mov	r6, r0
 800f9fe:	b9ad      	cbnz	r5, 800fa2c <rmw_uxrce_init_node_memory+0x38>
 800fa00:	23a4      	movs	r3, #164	@ 0xa4
 800fa02:	e9c0 5500 	strd	r5, r5, [r0]
 800fa06:	6083      	str	r3, [r0, #8]
 800fa08:	f240 1301 	movw	r3, #257	@ 0x101
 800fa0c:	4617      	mov	r7, r2
 800fa0e:	8183      	strh	r3, [r0, #12]
 800fa10:	460c      	mov	r4, r1
 800fa12:	46a8      	mov	r8, r5
 800fa14:	4621      	mov	r1, r4
 800fa16:	4630      	mov	r0, r6
 800fa18:	3501      	adds	r5, #1
 800fa1a:	f007 fb13 	bl	8017044 <put_memory>
 800fa1e:	42af      	cmp	r7, r5
 800fa20:	60a4      	str	r4, [r4, #8]
 800fa22:	f884 800c 	strb.w	r8, [r4, #12]
 800fa26:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800fa2a:	d1f3      	bne.n	800fa14 <rmw_uxrce_init_node_memory+0x20>
 800fa2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa30:	4770      	bx	lr
 800fa32:	bf00      	nop

0800fa34 <rmw_uxrce_init_session_memory>:
 800fa34:	b1ea      	cbz	r2, 800fa72 <rmw_uxrce_init_session_memory+0x3e>
 800fa36:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa3a:	7b05      	ldrb	r5, [r0, #12]
 800fa3c:	4606      	mov	r6, r0
 800fa3e:	b9b5      	cbnz	r5, 800fa6e <rmw_uxrce_init_session_memory+0x3a>
 800fa40:	e9c0 5500 	strd	r5, r5, [r0]
 800fa44:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800fa48:	f240 1301 	movw	r3, #257	@ 0x101
 800fa4c:	4617      	mov	r7, r2
 800fa4e:	f8c0 8008 	str.w	r8, [r0, #8]
 800fa52:	460c      	mov	r4, r1
 800fa54:	8183      	strh	r3, [r0, #12]
 800fa56:	46a9      	mov	r9, r5
 800fa58:	4621      	mov	r1, r4
 800fa5a:	4630      	mov	r0, r6
 800fa5c:	3501      	adds	r5, #1
 800fa5e:	f007 faf1 	bl	8017044 <put_memory>
 800fa62:	42af      	cmp	r7, r5
 800fa64:	60a4      	str	r4, [r4, #8]
 800fa66:	f884 900c 	strb.w	r9, [r4, #12]
 800fa6a:	4444      	add	r4, r8
 800fa6c:	d1f4      	bne.n	800fa58 <rmw_uxrce_init_session_memory+0x24>
 800fa6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa72:	4770      	bx	lr

0800fa74 <rmw_uxrce_init_topic_memory>:
 800fa74:	b1e2      	cbz	r2, 800fab0 <rmw_uxrce_init_topic_memory+0x3c>
 800fa76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa7a:	7b05      	ldrb	r5, [r0, #12]
 800fa7c:	4606      	mov	r6, r0
 800fa7e:	b9ad      	cbnz	r5, 800faac <rmw_uxrce_init_topic_memory+0x38>
 800fa80:	231c      	movs	r3, #28
 800fa82:	e9c0 5500 	strd	r5, r5, [r0]
 800fa86:	6083      	str	r3, [r0, #8]
 800fa88:	f240 1301 	movw	r3, #257	@ 0x101
 800fa8c:	4617      	mov	r7, r2
 800fa8e:	8183      	strh	r3, [r0, #12]
 800fa90:	460c      	mov	r4, r1
 800fa92:	46a8      	mov	r8, r5
 800fa94:	4621      	mov	r1, r4
 800fa96:	4630      	mov	r0, r6
 800fa98:	3501      	adds	r5, #1
 800fa9a:	f007 fad3 	bl	8017044 <put_memory>
 800fa9e:	42af      	cmp	r7, r5
 800faa0:	60a4      	str	r4, [r4, #8]
 800faa2:	f884 800c 	strb.w	r8, [r4, #12]
 800faa6:	f104 041c 	add.w	r4, r4, #28
 800faaa:	d1f3      	bne.n	800fa94 <rmw_uxrce_init_topic_memory+0x20>
 800faac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fab0:	4770      	bx	lr
 800fab2:	bf00      	nop

0800fab4 <rmw_uxrce_init_static_input_buffer_memory>:
 800fab4:	b1ea      	cbz	r2, 800faf2 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800fab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800faba:	7b05      	ldrb	r5, [r0, #12]
 800fabc:	4606      	mov	r6, r0
 800fabe:	b9b5      	cbnz	r5, 800faee <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800fac0:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800fac4:	e9c0 5500 	strd	r5, r5, [r0]
 800fac8:	6083      	str	r3, [r0, #8]
 800faca:	f240 1301 	movw	r3, #257	@ 0x101
 800face:	4617      	mov	r7, r2
 800fad0:	8183      	strh	r3, [r0, #12]
 800fad2:	460c      	mov	r4, r1
 800fad4:	46a8      	mov	r8, r5
 800fad6:	4621      	mov	r1, r4
 800fad8:	4630      	mov	r0, r6
 800fada:	3501      	adds	r5, #1
 800fadc:	f007 fab2 	bl	8017044 <put_memory>
 800fae0:	42af      	cmp	r7, r5
 800fae2:	60a4      	str	r4, [r4, #8]
 800fae4:	f884 800c 	strb.w	r8, [r4, #12]
 800fae8:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800faec:	d1f3      	bne.n	800fad6 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800faee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800faf2:	4770      	bx	lr

0800faf4 <rmw_uxrce_init_init_options_impl_memory>:
 800faf4:	b1e2      	cbz	r2, 800fb30 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800faf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fafa:	7b05      	ldrb	r5, [r0, #12]
 800fafc:	4606      	mov	r6, r0
 800fafe:	b9ad      	cbnz	r5, 800fb2c <rmw_uxrce_init_init_options_impl_memory+0x38>
 800fb00:	232c      	movs	r3, #44	@ 0x2c
 800fb02:	e9c0 5500 	strd	r5, r5, [r0]
 800fb06:	6083      	str	r3, [r0, #8]
 800fb08:	f240 1301 	movw	r3, #257	@ 0x101
 800fb0c:	4617      	mov	r7, r2
 800fb0e:	8183      	strh	r3, [r0, #12]
 800fb10:	460c      	mov	r4, r1
 800fb12:	46a8      	mov	r8, r5
 800fb14:	4621      	mov	r1, r4
 800fb16:	4630      	mov	r0, r6
 800fb18:	3501      	adds	r5, #1
 800fb1a:	f007 fa93 	bl	8017044 <put_memory>
 800fb1e:	42af      	cmp	r7, r5
 800fb20:	60a4      	str	r4, [r4, #8]
 800fb22:	f884 800c 	strb.w	r8, [r4, #12]
 800fb26:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800fb2a:	d1f3      	bne.n	800fb14 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800fb2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb30:	4770      	bx	lr
 800fb32:	bf00      	nop

0800fb34 <rmw_uxrce_init_wait_set_memory>:
 800fb34:	b1e2      	cbz	r2, 800fb70 <rmw_uxrce_init_wait_set_memory+0x3c>
 800fb36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb3a:	7b05      	ldrb	r5, [r0, #12]
 800fb3c:	4606      	mov	r6, r0
 800fb3e:	b9ad      	cbnz	r5, 800fb6c <rmw_uxrce_init_wait_set_memory+0x38>
 800fb40:	231c      	movs	r3, #28
 800fb42:	e9c0 5500 	strd	r5, r5, [r0]
 800fb46:	6083      	str	r3, [r0, #8]
 800fb48:	f240 1301 	movw	r3, #257	@ 0x101
 800fb4c:	4617      	mov	r7, r2
 800fb4e:	8183      	strh	r3, [r0, #12]
 800fb50:	460c      	mov	r4, r1
 800fb52:	46a8      	mov	r8, r5
 800fb54:	4621      	mov	r1, r4
 800fb56:	4630      	mov	r0, r6
 800fb58:	3501      	adds	r5, #1
 800fb5a:	f007 fa73 	bl	8017044 <put_memory>
 800fb5e:	42af      	cmp	r7, r5
 800fb60:	60a4      	str	r4, [r4, #8]
 800fb62:	f884 800c 	strb.w	r8, [r4, #12]
 800fb66:	f104 041c 	add.w	r4, r4, #28
 800fb6a:	d1f3      	bne.n	800fb54 <rmw_uxrce_init_wait_set_memory+0x20>
 800fb6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb70:	4770      	bx	lr
 800fb72:	bf00      	nop

0800fb74 <rmw_uxrce_init_guard_condition_memory>:
 800fb74:	b1e2      	cbz	r2, 800fbb0 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800fb76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb7a:	7b05      	ldrb	r5, [r0, #12]
 800fb7c:	4606      	mov	r6, r0
 800fb7e:	b9ad      	cbnz	r5, 800fbac <rmw_uxrce_init_guard_condition_memory+0x38>
 800fb80:	2320      	movs	r3, #32
 800fb82:	e9c0 5500 	strd	r5, r5, [r0]
 800fb86:	6083      	str	r3, [r0, #8]
 800fb88:	f240 1301 	movw	r3, #257	@ 0x101
 800fb8c:	4617      	mov	r7, r2
 800fb8e:	8183      	strh	r3, [r0, #12]
 800fb90:	460c      	mov	r4, r1
 800fb92:	46a8      	mov	r8, r5
 800fb94:	4621      	mov	r1, r4
 800fb96:	4630      	mov	r0, r6
 800fb98:	3501      	adds	r5, #1
 800fb9a:	f007 fa53 	bl	8017044 <put_memory>
 800fb9e:	42af      	cmp	r7, r5
 800fba0:	60a4      	str	r4, [r4, #8]
 800fba2:	f884 800c 	strb.w	r8, [r4, #12]
 800fba6:	f104 0420 	add.w	r4, r4, #32
 800fbaa:	d1f3      	bne.n	800fb94 <rmw_uxrce_init_guard_condition_memory+0x20>
 800fbac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbb0:	4770      	bx	lr
 800fbb2:	bf00      	nop

0800fbb4 <rmw_uxrce_fini_session_memory>:
 800fbb4:	4601      	mov	r1, r0
 800fbb6:	4801      	ldr	r0, [pc, #4]	@ (800fbbc <rmw_uxrce_fini_session_memory+0x8>)
 800fbb8:	f007 ba44 	b.w	8017044 <put_memory>
 800fbbc:	2001187c 	.word	0x2001187c

0800fbc0 <rmw_uxrce_fini_node_memory>:
 800fbc0:	b538      	push	{r3, r4, r5, lr}
 800fbc2:	4604      	mov	r4, r0
 800fbc4:	6800      	ldr	r0, [r0, #0]
 800fbc6:	b128      	cbz	r0, 800fbd4 <rmw_uxrce_fini_node_memory+0x14>
 800fbc8:	4b07      	ldr	r3, [pc, #28]	@ (800fbe8 <rmw_uxrce_fini_node_memory+0x28>)
 800fbca:	6819      	ldr	r1, [r3, #0]
 800fbcc:	f7f0 fb20 	bl	8000210 <strcmp>
 800fbd0:	b940      	cbnz	r0, 800fbe4 <rmw_uxrce_fini_node_memory+0x24>
 800fbd2:	6020      	str	r0, [r4, #0]
 800fbd4:	6861      	ldr	r1, [r4, #4]
 800fbd6:	b129      	cbz	r1, 800fbe4 <rmw_uxrce_fini_node_memory+0x24>
 800fbd8:	2500      	movs	r5, #0
 800fbda:	4804      	ldr	r0, [pc, #16]	@ (800fbec <rmw_uxrce_fini_node_memory+0x2c>)
 800fbdc:	610d      	str	r5, [r1, #16]
 800fbde:	f007 fa31 	bl	8017044 <put_memory>
 800fbe2:	6065      	str	r5, [r4, #4]
 800fbe4:	bd38      	pop	{r3, r4, r5, pc}
 800fbe6:	bf00      	nop
 800fbe8:	0801b6a0 	.word	0x0801b6a0
 800fbec:	2001184c 	.word	0x2001184c

0800fbf0 <rmw_uxrce_fini_publisher_memory>:
 800fbf0:	b510      	push	{r4, lr}
 800fbf2:	4604      	mov	r4, r0
 800fbf4:	6800      	ldr	r0, [r0, #0]
 800fbf6:	b128      	cbz	r0, 800fc04 <rmw_uxrce_fini_publisher_memory+0x14>
 800fbf8:	4b06      	ldr	r3, [pc, #24]	@ (800fc14 <rmw_uxrce_fini_publisher_memory+0x24>)
 800fbfa:	6819      	ldr	r1, [r3, #0]
 800fbfc:	f7f0 fb08 	bl	8000210 <strcmp>
 800fc00:	b938      	cbnz	r0, 800fc12 <rmw_uxrce_fini_publisher_memory+0x22>
 800fc02:	6020      	str	r0, [r4, #0]
 800fc04:	6861      	ldr	r1, [r4, #4]
 800fc06:	b121      	cbz	r1, 800fc12 <rmw_uxrce_fini_publisher_memory+0x22>
 800fc08:	4803      	ldr	r0, [pc, #12]	@ (800fc18 <rmw_uxrce_fini_publisher_memory+0x28>)
 800fc0a:	f007 fa1b 	bl	8017044 <put_memory>
 800fc0e:	2300      	movs	r3, #0
 800fc10:	6063      	str	r3, [r4, #4]
 800fc12:	bd10      	pop	{r4, pc}
 800fc14:	0801b6a0 	.word	0x0801b6a0
 800fc18:	2001185c 	.word	0x2001185c

0800fc1c <rmw_uxrce_fini_subscription_memory>:
 800fc1c:	b510      	push	{r4, lr}
 800fc1e:	4604      	mov	r4, r0
 800fc20:	6800      	ldr	r0, [r0, #0]
 800fc22:	b128      	cbz	r0, 800fc30 <rmw_uxrce_fini_subscription_memory+0x14>
 800fc24:	4b06      	ldr	r3, [pc, #24]	@ (800fc40 <rmw_uxrce_fini_subscription_memory+0x24>)
 800fc26:	6819      	ldr	r1, [r3, #0]
 800fc28:	f7f0 faf2 	bl	8000210 <strcmp>
 800fc2c:	b938      	cbnz	r0, 800fc3e <rmw_uxrce_fini_subscription_memory+0x22>
 800fc2e:	6020      	str	r0, [r4, #0]
 800fc30:	6861      	ldr	r1, [r4, #4]
 800fc32:	b121      	cbz	r1, 800fc3e <rmw_uxrce_fini_subscription_memory+0x22>
 800fc34:	4803      	ldr	r0, [pc, #12]	@ (800fc44 <rmw_uxrce_fini_subscription_memory+0x28>)
 800fc36:	f007 fa05 	bl	8017044 <put_memory>
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	6063      	str	r3, [r4, #4]
 800fc3e:	bd10      	pop	{r4, pc}
 800fc40:	0801b6a0 	.word	0x0801b6a0
 800fc44:	2001189c 	.word	0x2001189c

0800fc48 <rmw_uxrce_fini_service_memory>:
 800fc48:	b510      	push	{r4, lr}
 800fc4a:	4604      	mov	r4, r0
 800fc4c:	6800      	ldr	r0, [r0, #0]
 800fc4e:	b128      	cbz	r0, 800fc5c <rmw_uxrce_fini_service_memory+0x14>
 800fc50:	4b06      	ldr	r3, [pc, #24]	@ (800fc6c <rmw_uxrce_fini_service_memory+0x24>)
 800fc52:	6819      	ldr	r1, [r3, #0]
 800fc54:	f7f0 fadc 	bl	8000210 <strcmp>
 800fc58:	b938      	cbnz	r0, 800fc6a <rmw_uxrce_fini_service_memory+0x22>
 800fc5a:	6020      	str	r0, [r4, #0]
 800fc5c:	6861      	ldr	r1, [r4, #4]
 800fc5e:	b121      	cbz	r1, 800fc6a <rmw_uxrce_fini_service_memory+0x22>
 800fc60:	4803      	ldr	r0, [pc, #12]	@ (800fc70 <rmw_uxrce_fini_service_memory+0x28>)
 800fc62:	f007 f9ef 	bl	8017044 <put_memory>
 800fc66:	2300      	movs	r3, #0
 800fc68:	6063      	str	r3, [r4, #4]
 800fc6a:	bd10      	pop	{r4, pc}
 800fc6c:	0801b6a0 	.word	0x0801b6a0
 800fc70:	2001186c 	.word	0x2001186c

0800fc74 <rmw_uxrce_fini_client_memory>:
 800fc74:	b510      	push	{r4, lr}
 800fc76:	4604      	mov	r4, r0
 800fc78:	6800      	ldr	r0, [r0, #0]
 800fc7a:	b128      	cbz	r0, 800fc88 <rmw_uxrce_fini_client_memory+0x14>
 800fc7c:	4b06      	ldr	r3, [pc, #24]	@ (800fc98 <rmw_uxrce_fini_client_memory+0x24>)
 800fc7e:	6819      	ldr	r1, [r3, #0]
 800fc80:	f7f0 fac6 	bl	8000210 <strcmp>
 800fc84:	b938      	cbnz	r0, 800fc96 <rmw_uxrce_fini_client_memory+0x22>
 800fc86:	6020      	str	r0, [r4, #0]
 800fc88:	6861      	ldr	r1, [r4, #4]
 800fc8a:	b121      	cbz	r1, 800fc96 <rmw_uxrce_fini_client_memory+0x22>
 800fc8c:	4803      	ldr	r0, [pc, #12]	@ (800fc9c <rmw_uxrce_fini_client_memory+0x28>)
 800fc8e:	f007 f9d9 	bl	8017044 <put_memory>
 800fc92:	2300      	movs	r3, #0
 800fc94:	6063      	str	r3, [r4, #4]
 800fc96:	bd10      	pop	{r4, pc}
 800fc98:	0801b6a0 	.word	0x0801b6a0
 800fc9c:	2000cf7c 	.word	0x2000cf7c

0800fca0 <rmw_uxrce_fini_topic_memory>:
 800fca0:	b510      	push	{r4, lr}
 800fca2:	4604      	mov	r4, r0
 800fca4:	4621      	mov	r1, r4
 800fca6:	4803      	ldr	r0, [pc, #12]	@ (800fcb4 <rmw_uxrce_fini_topic_memory+0x14>)
 800fca8:	f007 f9cc 	bl	8017044 <put_memory>
 800fcac:	2300      	movs	r3, #0
 800fcae:	61a3      	str	r3, [r4, #24]
 800fcb0:	bd10      	pop	{r4, pc}
 800fcb2:	bf00      	nop
 800fcb4:	200118ac 	.word	0x200118ac

0800fcb8 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800fcb8:	b082      	sub	sp, #8
 800fcba:	b530      	push	{r4, r5, lr}
 800fcbc:	4925      	ldr	r1, [pc, #148]	@ (800fd54 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800fcbe:	680d      	ldr	r5, [r1, #0]
 800fcc0:	ac03      	add	r4, sp, #12
 800fcc2:	e884 000c 	stmia.w	r4, {r2, r3}
 800fcc6:	461c      	mov	r4, r3
 800fcc8:	2d00      	cmp	r5, #0
 800fcca:	d041      	beq.n	800fd50 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800fccc:	462b      	mov	r3, r5
 800fcce:	2100      	movs	r1, #0
 800fcd0:	689a      	ldr	r2, [r3, #8]
 800fcd2:	685b      	ldr	r3, [r3, #4]
 800fcd4:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800fcd8:	4290      	cmp	r0, r2
 800fcda:	bf08      	it	eq
 800fcdc:	3101      	addeq	r1, #1
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d1f6      	bne.n	800fcd0 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800fce2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800fce6:	2b02      	cmp	r3, #2
 800fce8:	d029      	beq.n	800fd3e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800fcea:	d907      	bls.n	800fcfc <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800fcec:	2b03      	cmp	r3, #3
 800fcee:	d005      	beq.n	800fcfc <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800fcf0:	2100      	movs	r1, #0
 800fcf2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fcf6:	4608      	mov	r0, r1
 800fcf8:	b002      	add	sp, #8
 800fcfa:	4770      	bx	lr
 800fcfc:	b314      	cbz	r4, 800fd44 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800fcfe:	428c      	cmp	r4, r1
 800fd00:	d820      	bhi.n	800fd44 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800fd02:	2d00      	cmp	r5, #0
 800fd04:	d0f4      	beq.n	800fcf0 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800fd06:	2100      	movs	r1, #0
 800fd08:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800fd0c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800fd10:	e002      	b.n	800fd18 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800fd12:	686d      	ldr	r5, [r5, #4]
 800fd14:	2d00      	cmp	r5, #0
 800fd16:	d0ec      	beq.n	800fcf2 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800fd18:	68ab      	ldr	r3, [r5, #8]
 800fd1a:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800fd1e:	4290      	cmp	r0, r2
 800fd20:	d1f7      	bne.n	800fd12 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800fd22:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800fd26:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800fd2a:	4562      	cmp	r2, ip
 800fd2c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800fd30:	eb73 0e04 	sbcs.w	lr, r3, r4
 800fd34:	daed      	bge.n	800fd12 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800fd36:	4694      	mov	ip, r2
 800fd38:	461c      	mov	r4, r3
 800fd3a:	4629      	mov	r1, r5
 800fd3c:	e7e9      	b.n	800fd12 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800fd3e:	b10c      	cbz	r4, 800fd44 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800fd40:	428c      	cmp	r4, r1
 800fd42:	d9d5      	bls.n	800fcf0 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800fd44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fd48:	4802      	ldr	r0, [pc, #8]	@ (800fd54 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800fd4a:	b002      	add	sp, #8
 800fd4c:	f007 b96a 	b.w	8017024 <get_memory>
 800fd50:	4629      	mov	r1, r5
 800fd52:	e7c6      	b.n	800fce2 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800fd54:	2001188c 	.word	0x2001188c

0800fd58 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800fd58:	4b11      	ldr	r3, [pc, #68]	@ (800fda0 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	b530      	push	{r4, r5, lr}
 800fd5e:	b1e3      	cbz	r3, 800fd9a <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800fd60:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800fd64:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800fd68:	2400      	movs	r4, #0
 800fd6a:	e001      	b.n	800fd70 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800fd6c:	685b      	ldr	r3, [r3, #4]
 800fd6e:	b193      	cbz	r3, 800fd96 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800fd70:	689a      	ldr	r2, [r3, #8]
 800fd72:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800fd76:	4288      	cmp	r0, r1
 800fd78:	d1f8      	bne.n	800fd6c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800fd7a:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800fd7e:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800fd82:	4571      	cmp	r1, lr
 800fd84:	eb72 050c 	sbcs.w	r5, r2, ip
 800fd88:	daf0      	bge.n	800fd6c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800fd8a:	461c      	mov	r4, r3
 800fd8c:	685b      	ldr	r3, [r3, #4]
 800fd8e:	468e      	mov	lr, r1
 800fd90:	4694      	mov	ip, r2
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d1ec      	bne.n	800fd70 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800fd96:	4620      	mov	r0, r4
 800fd98:	bd30      	pop	{r4, r5, pc}
 800fd9a:	461c      	mov	r4, r3
 800fd9c:	4620      	mov	r0, r4
 800fd9e:	bd30      	pop	{r4, r5, pc}
 800fda0:	2001188c 	.word	0x2001188c
 800fda4:	00000000 	.word	0x00000000

0800fda8 <rmw_uxrce_clean_expired_static_input_buffer>:
 800fda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdac:	4b3c      	ldr	r3, [pc, #240]	@ (800fea0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800fdae:	ed2d 8b06 	vpush	{d8-d10}
 800fdb2:	681f      	ldr	r7, [r3, #0]
 800fdb4:	b08d      	sub	sp, #52	@ 0x34
 800fdb6:	f007 fd35 	bl	8017824 <rmw_uros_epoch_nanos>
 800fdba:	2f00      	cmp	r7, #0
 800fdbc:	d05d      	beq.n	800fe7a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800fdbe:	46b8      	mov	r8, r7
 800fdc0:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800fe88 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800fdc4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800fdc8:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800fdcc:	2b04      	cmp	r3, #4
 800fdce:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800fe90 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800fdd2:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800fe98 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800fdd6:	4681      	mov	r9, r0
 800fdd8:	468a      	mov	sl, r1
 800fdda:	ac04      	add	r4, sp, #16
 800fddc:	d03f      	beq.n	800fe5e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800fdde:	2b05      	cmp	r3, #5
 800fde0:	d044      	beq.n	800fe6c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800fde2:	2b03      	cmp	r3, #3
 800fde4:	d03b      	beq.n	800fe5e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800fde6:	ed8d 8b04 	vstr	d8, [sp, #16]
 800fdea:	ed8d ab06 	vstr	d10, [sp, #24]
 800fdee:	ed8d 8b08 	vstr	d8, [sp, #32]
 800fdf2:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800fdf6:	ab08      	add	r3, sp, #32
 800fdf8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fdfa:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800fdfe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800fe02:	f006 ff2d 	bl	8016c60 <rmw_time_equal>
 800fe06:	b118      	cbz	r0, 800fe10 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800fe08:	ed8d 9b04 	vstr	d9, [sp, #16]
 800fe0c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800fe10:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800fe14:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800fe18:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800fe1c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800fe20:	f006 ff72 	bl	8016d08 <rmw_time_total_nsec>
 800fe24:	1830      	adds	r0, r6, r0
 800fe26:	eb47 0101 	adc.w	r1, r7, r1
 800fe2a:	4548      	cmp	r0, r9
 800fe2c:	eb71 030a 	sbcs.w	r3, r1, sl
 800fe30:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800fe34:	db05      	blt.n	800fe42 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800fe36:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800fe3a:	4591      	cmp	r9, r2
 800fe3c:	eb7a 0303 	sbcs.w	r3, sl, r3
 800fe40:	da03      	bge.n	800fe4a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800fe42:	4817      	ldr	r0, [pc, #92]	@ (800fea0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800fe44:	4641      	mov	r1, r8
 800fe46:	f007 f8fd 	bl	8017044 <put_memory>
 800fe4a:	f1bb 0f00 	cmp.w	fp, #0
 800fe4e:	d014      	beq.n	800fe7a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800fe50:	46d8      	mov	r8, fp
 800fe52:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800fe56:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800fe5a:	2b04      	cmp	r3, #4
 800fe5c:	d1bf      	bne.n	800fdde <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800fe5e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800fe62:	3340      	adds	r3, #64	@ 0x40
 800fe64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fe66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800fe6a:	e7c0      	b.n	800fdee <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800fe6c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800fe70:	3348      	adds	r3, #72	@ 0x48
 800fe72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fe74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800fe78:	e7b9      	b.n	800fdee <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800fe7a:	b00d      	add	sp, #52	@ 0x34
 800fe7c:	ecbd 8b06 	vpop	{d8-d10}
 800fe80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe84:	f3af 8000 	nop.w
	...
 800fe90:	00000001 	.word	0x00000001
 800fe94:	00000000 	.word	0x00000000
 800fe98:	0000001e 	.word	0x0000001e
 800fe9c:	00000000 	.word	0x00000000
 800fea0:	2001188c 	.word	0x2001188c

0800fea4 <run_xrce_session>:
 800fea4:	b510      	push	{r4, lr}
 800fea6:	788c      	ldrb	r4, [r1, #2]
 800fea8:	b086      	sub	sp, #24
 800feaa:	2c01      	cmp	r4, #1
 800feac:	f8ad 200e 	strh.w	r2, [sp, #14]
 800feb0:	d00c      	beq.n	800fecc <run_xrce_session+0x28>
 800feb2:	4619      	mov	r1, r3
 800feb4:	2301      	movs	r3, #1
 800feb6:	9300      	str	r3, [sp, #0]
 800feb8:	f10d 020e 	add.w	r2, sp, #14
 800febc:	f10d 0317 	add.w	r3, sp, #23
 800fec0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fec4:	f002 f80e 	bl	8011ee4 <uxr_run_session_until_all_status>
 800fec8:	b006      	add	sp, #24
 800feca:	bd10      	pop	{r4, pc}
 800fecc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fed0:	f001 fc22 	bl	8011718 <uxr_flash_output_streams>
 800fed4:	4620      	mov	r0, r4
 800fed6:	b006      	add	sp, #24
 800fed8:	bd10      	pop	{r4, pc}
 800feda:	bf00      	nop

0800fedc <convert_qos_profile>:
 800fedc:	7a4a      	ldrb	r2, [r1, #9]
 800fede:	f891 c008 	ldrb.w	ip, [r1, #8]
 800fee2:	2a02      	cmp	r2, #2
 800fee4:	bf18      	it	ne
 800fee6:	2200      	movne	r2, #0
 800fee8:	7002      	strb	r2, [r0, #0]
 800feea:	780a      	ldrb	r2, [r1, #0]
 800feec:	8889      	ldrh	r1, [r1, #4]
 800feee:	8081      	strh	r1, [r0, #4]
 800fef0:	f1ac 0c02 	sub.w	ip, ip, #2
 800fef4:	f1a2 0202 	sub.w	r2, r2, #2
 800fef8:	fabc fc8c 	clz	ip, ip
 800fefc:	fab2 f282 	clz	r2, r2
 800ff00:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800ff04:	0952      	lsrs	r2, r2, #5
 800ff06:	f880 c001 	strb.w	ip, [r0, #1]
 800ff0a:	7082      	strb	r2, [r0, #2]
 800ff0c:	4770      	bx	lr
 800ff0e:	bf00      	nop

0800ff10 <generate_type_name>:
 800ff10:	b530      	push	{r4, r5, lr}
 800ff12:	2300      	movs	r3, #0
 800ff14:	700b      	strb	r3, [r1, #0]
 800ff16:	6803      	ldr	r3, [r0, #0]
 800ff18:	b087      	sub	sp, #28
 800ff1a:	4614      	mov	r4, r2
 800ff1c:	b1d3      	cbz	r3, 800ff54 <generate_type_name+0x44>
 800ff1e:	4a0f      	ldr	r2, [pc, #60]	@ (800ff5c <generate_type_name+0x4c>)
 800ff20:	4615      	mov	r5, r2
 800ff22:	9203      	str	r2, [sp, #12]
 800ff24:	9500      	str	r5, [sp, #0]
 800ff26:	6842      	ldr	r2, [r0, #4]
 800ff28:	480d      	ldr	r0, [pc, #52]	@ (800ff60 <generate_type_name+0x50>)
 800ff2a:	9001      	str	r0, [sp, #4]
 800ff2c:	4608      	mov	r0, r1
 800ff2e:	490d      	ldr	r1, [pc, #52]	@ (800ff64 <generate_type_name+0x54>)
 800ff30:	9204      	str	r2, [sp, #16]
 800ff32:	9105      	str	r1, [sp, #20]
 800ff34:	9102      	str	r1, [sp, #8]
 800ff36:	4a0c      	ldr	r2, [pc, #48]	@ (800ff68 <generate_type_name+0x58>)
 800ff38:	4621      	mov	r1, r4
 800ff3a:	f009 faf7 	bl	801952c <sniprintf>
 800ff3e:	2800      	cmp	r0, #0
 800ff40:	db05      	blt.n	800ff4e <generate_type_name+0x3e>
 800ff42:	4284      	cmp	r4, r0
 800ff44:	bfd4      	ite	le
 800ff46:	2000      	movle	r0, #0
 800ff48:	2001      	movgt	r0, #1
 800ff4a:	b007      	add	sp, #28
 800ff4c:	bd30      	pop	{r4, r5, pc}
 800ff4e:	2000      	movs	r0, #0
 800ff50:	b007      	add	sp, #28
 800ff52:	bd30      	pop	{r4, r5, pc}
 800ff54:	4b05      	ldr	r3, [pc, #20]	@ (800ff6c <generate_type_name+0x5c>)
 800ff56:	4a01      	ldr	r2, [pc, #4]	@ (800ff5c <generate_type_name+0x4c>)
 800ff58:	461d      	mov	r5, r3
 800ff5a:	e7e2      	b.n	800ff22 <generate_type_name+0x12>
 800ff5c:	0801acf4 	.word	0x0801acf4
 800ff60:	0801ad0c 	.word	0x0801ad0c
 800ff64:	0801ad08 	.word	0x0801ad08
 800ff68:	0801acf8 	.word	0x0801acf8
 800ff6c:	0801af1c 	.word	0x0801af1c

0800ff70 <generate_topic_name>:
 800ff70:	b510      	push	{r4, lr}
 800ff72:	b082      	sub	sp, #8
 800ff74:	4614      	mov	r4, r2
 800ff76:	9000      	str	r0, [sp, #0]
 800ff78:	4b08      	ldr	r3, [pc, #32]	@ (800ff9c <generate_topic_name+0x2c>)
 800ff7a:	4a09      	ldr	r2, [pc, #36]	@ (800ffa0 <generate_topic_name+0x30>)
 800ff7c:	4608      	mov	r0, r1
 800ff7e:	4621      	mov	r1, r4
 800ff80:	f009 fad4 	bl	801952c <sniprintf>
 800ff84:	2800      	cmp	r0, #0
 800ff86:	db05      	blt.n	800ff94 <generate_topic_name+0x24>
 800ff88:	4284      	cmp	r4, r0
 800ff8a:	bfd4      	ite	le
 800ff8c:	2000      	movle	r0, #0
 800ff8e:	2001      	movgt	r0, #1
 800ff90:	b002      	add	sp, #8
 800ff92:	bd10      	pop	{r4, pc}
 800ff94:	2000      	movs	r0, #0
 800ff96:	b002      	add	sp, #8
 800ff98:	bd10      	pop	{r4, pc}
 800ff9a:	bf00      	nop
 800ff9c:	0801b300 	.word	0x0801b300
 800ffa0:	0801a9c4 	.word	0x0801a9c4

0800ffa4 <is_uxrce_rmw_identifier_valid>:
 800ffa4:	b510      	push	{r4, lr}
 800ffa6:	4604      	mov	r4, r0
 800ffa8:	b140      	cbz	r0, 800ffbc <is_uxrce_rmw_identifier_valid+0x18>
 800ffaa:	f007 f8a3 	bl	80170f4 <rmw_get_implementation_identifier>
 800ffae:	4601      	mov	r1, r0
 800ffb0:	4620      	mov	r0, r4
 800ffb2:	f7f0 f92d 	bl	8000210 <strcmp>
 800ffb6:	fab0 f080 	clz	r0, r0
 800ffba:	0940      	lsrs	r0, r0, #5
 800ffbc:	bd10      	pop	{r4, pc}
 800ffbe:	bf00      	nop

0800ffc0 <get_message_typesupport_handle>:
 800ffc0:	6883      	ldr	r3, [r0, #8]
 800ffc2:	4718      	bx	r3

0800ffc4 <get_message_typesupport_handle_function>:
 800ffc4:	b510      	push	{r4, lr}
 800ffc6:	4604      	mov	r4, r0
 800ffc8:	6800      	ldr	r0, [r0, #0]
 800ffca:	f7f0 f921 	bl	8000210 <strcmp>
 800ffce:	2800      	cmp	r0, #0
 800ffd0:	bf0c      	ite	eq
 800ffd2:	4620      	moveq	r0, r4
 800ffd4:	2000      	movne	r0, #0
 800ffd6:	bd10      	pop	{r4, pc}

0800ffd8 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800ffd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffdc:	6805      	ldr	r5, [r0, #0]
 800ffde:	4604      	mov	r4, r0
 800ffe0:	4628      	mov	r0, r5
 800ffe2:	460e      	mov	r6, r1
 800ffe4:	f7f0 f914 	bl	8000210 <strcmp>
 800ffe8:	b1c8      	cbz	r0, 801001e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800ffea:	4b11      	ldr	r3, [pc, #68]	@ (8010030 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	429d      	cmp	r5, r3
 800fff0:	d112      	bne.n	8010018 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800fff2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800fff6:	f8d8 4000 	ldr.w	r4, [r8]
 800fffa:	b16c      	cbz	r4, 8010018 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800fffc:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8010000:	2700      	movs	r7, #0
 8010002:	3d04      	subs	r5, #4
 8010004:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8010008:	4631      	mov	r1, r6
 801000a:	f7f0 f901 	bl	8000210 <strcmp>
 801000e:	00bb      	lsls	r3, r7, #2
 8010010:	b140      	cbz	r0, 8010024 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8010012:	3701      	adds	r7, #1
 8010014:	42bc      	cmp	r4, r7
 8010016:	d1f5      	bne.n	8010004 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8010018:	2000      	movs	r0, #0
 801001a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801001e:	4620      	mov	r0, r4
 8010020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010024:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010028:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801002c:	58d3      	ldr	r3, [r2, r3]
 801002e:	4718      	bx	r3
 8010030:	2000031c 	.word	0x2000031c

08010034 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8010034:	4b04      	ldr	r3, [pc, #16]	@ (8010048 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8010036:	681a      	ldr	r2, [r3, #0]
 8010038:	b10a      	cbz	r2, 801003e <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 801003a:	4803      	ldr	r0, [pc, #12]	@ (8010048 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 801003c:	4770      	bx	lr
 801003e:	4a03      	ldr	r2, [pc, #12]	@ (801004c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8010040:	4801      	ldr	r0, [pc, #4]	@ (8010048 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8010042:	6812      	ldr	r2, [r2, #0]
 8010044:	601a      	str	r2, [r3, #0]
 8010046:	4770      	bx	lr
 8010048:	2000032c 	.word	0x2000032c
 801004c:	2000031c 	.word	0x2000031c

08010050 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8010050:	4a02      	ldr	r2, [pc, #8]	@ (801005c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 8010052:	4b03      	ldr	r3, [pc, #12]	@ (8010060 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 8010054:	6812      	ldr	r2, [r2, #0]
 8010056:	601a      	str	r2, [r3, #0]
 8010058:	4770      	bx	lr
 801005a:	bf00      	nop
 801005c:	2000031c 	.word	0x2000031c
 8010060:	2000032c 	.word	0x2000032c

08010064 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 8010064:	f007 bc4a 	b.w	80178fc <std_msgs__msg__Header__init>

08010068 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 8010068:	f007 bc6c 	b.w	8017944 <std_msgs__msg__Header__fini>

0801006c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 801006c:	b508      	push	{r3, lr}
 801006e:	f000 f8eb 	bl	8010248 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010072:	4b06      	ldr	r3, [pc, #24]	@ (801008c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8010074:	4906      	ldr	r1, [pc, #24]	@ (8010090 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 8010076:	681a      	ldr	r2, [r3, #0]
 8010078:	60c8      	str	r0, [r1, #12]
 801007a:	b10a      	cbz	r2, 8010080 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 801007c:	4803      	ldr	r0, [pc, #12]	@ (801008c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 801007e:	bd08      	pop	{r3, pc}
 8010080:	4a04      	ldr	r2, [pc, #16]	@ (8010094 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 8010082:	4802      	ldr	r0, [pc, #8]	@ (801008c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8010084:	6812      	ldr	r2, [r2, #0]
 8010086:	601a      	str	r2, [r3, #0]
 8010088:	bd08      	pop	{r3, pc}
 801008a:	bf00      	nop
 801008c:	200003b0 	.word	0x200003b0
 8010090:	20000338 	.word	0x20000338
 8010094:	20000320 	.word	0x20000320

08010098 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 8010098:	f007 bc60 	b.w	801795c <std_msgs__msg__Int32__init>

0801009c <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 801009c:	f007 bc62 	b.w	8017964 <std_msgs__msg__Int32__fini>

080100a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 80100a0:	4b04      	ldr	r3, [pc, #16]	@ (80100b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 80100a2:	681a      	ldr	r2, [r3, #0]
 80100a4:	b10a      	cbz	r2, 80100aa <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 80100a6:	4803      	ldr	r0, [pc, #12]	@ (80100b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 80100a8:	4770      	bx	lr
 80100aa:	4a03      	ldr	r2, [pc, #12]	@ (80100b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 80100ac:	4801      	ldr	r0, [pc, #4]	@ (80100b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 80100ae:	6812      	ldr	r2, [r2, #0]
 80100b0:	601a      	str	r2, [r3, #0]
 80100b2:	4770      	bx	lr
 80100b4:	200003f8 	.word	0x200003f8
 80100b8:	20000320 	.word	0x20000320

080100bc <_Header__max_serialized_size>:
 80100bc:	b500      	push	{lr}
 80100be:	b083      	sub	sp, #12
 80100c0:	2301      	movs	r3, #1
 80100c2:	2100      	movs	r1, #0
 80100c4:	f10d 0007 	add.w	r0, sp, #7
 80100c8:	f88d 3007 	strb.w	r3, [sp, #7]
 80100cc:	f000 f91a 	bl	8010304 <max_serialized_size_builtin_interfaces__msg__Time>
 80100d0:	b003      	add	sp, #12
 80100d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80100d6:	bf00      	nop

080100d8 <get_serialized_size_std_msgs__msg__Header>:
 80100d8:	b570      	push	{r4, r5, r6, lr}
 80100da:	4605      	mov	r5, r0
 80100dc:	b168      	cbz	r0, 80100fa <get_serialized_size_std_msgs__msg__Header+0x22>
 80100de:	460c      	mov	r4, r1
 80100e0:	f000 f8c0 	bl	8010264 <get_serialized_size_builtin_interfaces__msg__Time>
 80100e4:	1826      	adds	r6, r4, r0
 80100e6:	2104      	movs	r1, #4
 80100e8:	4630      	mov	r0, r6
 80100ea:	f7fb fe2b 	bl	800bd44 <ucdr_alignment>
 80100ee:	68e9      	ldr	r1, [r5, #12]
 80100f0:	f1c4 0405 	rsb	r4, r4, #5
 80100f4:	440c      	add	r4, r1
 80100f6:	4404      	add	r4, r0
 80100f8:	19a0      	adds	r0, r4, r6
 80100fa:	bd70      	pop	{r4, r5, r6, pc}

080100fc <_Header__cdr_deserialize>:
 80100fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100fe:	460c      	mov	r4, r1
 8010100:	b083      	sub	sp, #12
 8010102:	b1e1      	cbz	r1, 801013e <_Header__cdr_deserialize+0x42>
 8010104:	4606      	mov	r6, r0
 8010106:	f000 f911 	bl	801032c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801010a:	6843      	ldr	r3, [r0, #4]
 801010c:	4621      	mov	r1, r4
 801010e:	68db      	ldr	r3, [r3, #12]
 8010110:	4630      	mov	r0, r6
 8010112:	4798      	blx	r3
 8010114:	6927      	ldr	r7, [r4, #16]
 8010116:	68a1      	ldr	r1, [r4, #8]
 8010118:	ab01      	add	r3, sp, #4
 801011a:	463a      	mov	r2, r7
 801011c:	4630      	mov	r0, r6
 801011e:	f000 fc6f 	bl	8010a00 <ucdr_deserialize_sequence_char>
 8010122:	9b01      	ldr	r3, [sp, #4]
 8010124:	4605      	mov	r5, r0
 8010126:	b920      	cbnz	r0, 8010132 <_Header__cdr_deserialize+0x36>
 8010128:	429f      	cmp	r7, r3
 801012a:	d30c      	bcc.n	8010146 <_Header__cdr_deserialize+0x4a>
 801012c:	4628      	mov	r0, r5
 801012e:	b003      	add	sp, #12
 8010130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010132:	b103      	cbz	r3, 8010136 <_Header__cdr_deserialize+0x3a>
 8010134:	3b01      	subs	r3, #1
 8010136:	4628      	mov	r0, r5
 8010138:	60e3      	str	r3, [r4, #12]
 801013a:	b003      	add	sp, #12
 801013c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801013e:	460d      	mov	r5, r1
 8010140:	4628      	mov	r0, r5
 8010142:	b003      	add	sp, #12
 8010144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010146:	2101      	movs	r1, #1
 8010148:	75b0      	strb	r0, [r6, #22]
 801014a:	7571      	strb	r1, [r6, #21]
 801014c:	4630      	mov	r0, r6
 801014e:	60e5      	str	r5, [r4, #12]
 8010150:	f7fb fe0e 	bl	800bd70 <ucdr_align_to>
 8010154:	4630      	mov	r0, r6
 8010156:	9901      	ldr	r1, [sp, #4]
 8010158:	f7fb fe40 	bl	800bddc <ucdr_advance_buffer>
 801015c:	4628      	mov	r0, r5
 801015e:	b003      	add	sp, #12
 8010160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010162:	bf00      	nop

08010164 <_Header__cdr_serialize>:
 8010164:	b1f8      	cbz	r0, 80101a6 <_Header__cdr_serialize+0x42>
 8010166:	b570      	push	{r4, r5, r6, lr}
 8010168:	4604      	mov	r4, r0
 801016a:	460d      	mov	r5, r1
 801016c:	f000 f8de 	bl	801032c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010170:	6843      	ldr	r3, [r0, #4]
 8010172:	4629      	mov	r1, r5
 8010174:	689b      	ldr	r3, [r3, #8]
 8010176:	4620      	mov	r0, r4
 8010178:	4798      	blx	r3
 801017a:	68a6      	ldr	r6, [r4, #8]
 801017c:	b156      	cbz	r6, 8010194 <_Header__cdr_serialize+0x30>
 801017e:	4630      	mov	r0, r6
 8010180:	f7f0 f850 	bl	8000224 <strlen>
 8010184:	4631      	mov	r1, r6
 8010186:	60e0      	str	r0, [r4, #12]
 8010188:	1c42      	adds	r2, r0, #1
 801018a:	4628      	mov	r0, r5
 801018c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010190:	f000 bc24 	b.w	80109dc <ucdr_serialize_sequence_char>
 8010194:	4630      	mov	r0, r6
 8010196:	60e0      	str	r0, [r4, #12]
 8010198:	4632      	mov	r2, r6
 801019a:	4631      	mov	r1, r6
 801019c:	4628      	mov	r0, r5
 801019e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80101a2:	f000 bc1b 	b.w	80109dc <ucdr_serialize_sequence_char>
 80101a6:	4770      	bx	lr

080101a8 <_Header__get_serialized_size>:
 80101a8:	b538      	push	{r3, r4, r5, lr}
 80101aa:	4604      	mov	r4, r0
 80101ac:	b150      	cbz	r0, 80101c4 <_Header__get_serialized_size+0x1c>
 80101ae:	2100      	movs	r1, #0
 80101b0:	f000 f858 	bl	8010264 <get_serialized_size_builtin_interfaces__msg__Time>
 80101b4:	2104      	movs	r1, #4
 80101b6:	4605      	mov	r5, r0
 80101b8:	f7fb fdc4 	bl	800bd44 <ucdr_alignment>
 80101bc:	68e2      	ldr	r2, [r4, #12]
 80101be:	3205      	adds	r2, #5
 80101c0:	1953      	adds	r3, r2, r5
 80101c2:	4418      	add	r0, r3
 80101c4:	bd38      	pop	{r3, r4, r5, pc}
 80101c6:	bf00      	nop

080101c8 <max_serialized_size_std_msgs__msg__Header>:
 80101c8:	b510      	push	{r4, lr}
 80101ca:	2301      	movs	r3, #1
 80101cc:	4604      	mov	r4, r0
 80101ce:	7003      	strb	r3, [r0, #0]
 80101d0:	f000 f898 	bl	8010304 <max_serialized_size_builtin_interfaces__msg__Time>
 80101d4:	2300      	movs	r3, #0
 80101d6:	7023      	strb	r3, [r4, #0]
 80101d8:	bd10      	pop	{r4, pc}
 80101da:	bf00      	nop

080101dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 80101dc:	4800      	ldr	r0, [pc, #0]	@ (80101e0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 80101de:	4770      	bx	lr
 80101e0:	20000404 	.word	0x20000404

080101e4 <_Int32__max_serialized_size>:
 80101e4:	b508      	push	{r3, lr}
 80101e6:	2104      	movs	r1, #4
 80101e8:	2000      	movs	r0, #0
 80101ea:	f7fb fdab 	bl	800bd44 <ucdr_alignment>
 80101ee:	3004      	adds	r0, #4
 80101f0:	bd08      	pop	{r3, pc}
 80101f2:	bf00      	nop

080101f4 <_Int32__cdr_deserialize>:
 80101f4:	b109      	cbz	r1, 80101fa <_Int32__cdr_deserialize+0x6>
 80101f6:	f7fb b987 	b.w	800b508 <ucdr_deserialize_int32_t>
 80101fa:	4608      	mov	r0, r1
 80101fc:	4770      	bx	lr
 80101fe:	bf00      	nop

08010200 <get_serialized_size_std_msgs__msg__Int32>:
 8010200:	b138      	cbz	r0, 8010212 <get_serialized_size_std_msgs__msg__Int32+0x12>
 8010202:	b508      	push	{r3, lr}
 8010204:	460b      	mov	r3, r1
 8010206:	4618      	mov	r0, r3
 8010208:	2104      	movs	r1, #4
 801020a:	f7fb fd9b 	bl	800bd44 <ucdr_alignment>
 801020e:	3004      	adds	r0, #4
 8010210:	bd08      	pop	{r3, pc}
 8010212:	4770      	bx	lr

08010214 <_Int32__cdr_serialize>:
 8010214:	460a      	mov	r2, r1
 8010216:	b118      	cbz	r0, 8010220 <_Int32__cdr_serialize+0xc>
 8010218:	6801      	ldr	r1, [r0, #0]
 801021a:	4610      	mov	r0, r2
 801021c:	f7fb b8dc 	b.w	800b3d8 <ucdr_serialize_int32_t>
 8010220:	4770      	bx	lr
 8010222:	bf00      	nop

08010224 <_Int32__get_serialized_size>:
 8010224:	b130      	cbz	r0, 8010234 <_Int32__get_serialized_size+0x10>
 8010226:	b508      	push	{r3, lr}
 8010228:	2104      	movs	r1, #4
 801022a:	2000      	movs	r0, #0
 801022c:	f7fb fd8a 	bl	800bd44 <ucdr_alignment>
 8010230:	3004      	adds	r0, #4
 8010232:	bd08      	pop	{r3, pc}
 8010234:	4770      	bx	lr
 8010236:	bf00      	nop

08010238 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8010238:	4800      	ldr	r0, [pc, #0]	@ (801023c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 801023a:	4770      	bx	lr
 801023c:	2000042c 	.word	0x2000042c

08010240 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 8010240:	f007 bb92 	b.w	8017968 <builtin_interfaces__msg__Time__init>

08010244 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 8010244:	f007 bb94 	b.w	8017970 <builtin_interfaces__msg__Time__fini>

08010248 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8010248:	4b04      	ldr	r3, [pc, #16]	@ (801025c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 801024a:	681a      	ldr	r2, [r3, #0]
 801024c:	b10a      	cbz	r2, 8010252 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 801024e:	4803      	ldr	r0, [pc, #12]	@ (801025c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8010250:	4770      	bx	lr
 8010252:	4a03      	ldr	r2, [pc, #12]	@ (8010260 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 8010254:	4801      	ldr	r0, [pc, #4]	@ (801025c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8010256:	6812      	ldr	r2, [r2, #0]
 8010258:	601a      	str	r2, [r3, #0]
 801025a:	4770      	bx	lr
 801025c:	200004cc 	.word	0x200004cc
 8010260:	20000320 	.word	0x20000320

08010264 <get_serialized_size_builtin_interfaces__msg__Time>:
 8010264:	b180      	cbz	r0, 8010288 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 8010266:	b538      	push	{r3, r4, r5, lr}
 8010268:	460d      	mov	r5, r1
 801026a:	4628      	mov	r0, r5
 801026c:	2104      	movs	r1, #4
 801026e:	f7fb fd69 	bl	800bd44 <ucdr_alignment>
 8010272:	1d2b      	adds	r3, r5, #4
 8010274:	181c      	adds	r4, r3, r0
 8010276:	2104      	movs	r1, #4
 8010278:	4620      	mov	r0, r4
 801027a:	f7fb fd63 	bl	800bd44 <ucdr_alignment>
 801027e:	f1c5 0504 	rsb	r5, r5, #4
 8010282:	4428      	add	r0, r5
 8010284:	4420      	add	r0, r4
 8010286:	bd38      	pop	{r3, r4, r5, pc}
 8010288:	4770      	bx	lr
 801028a:	bf00      	nop

0801028c <_Time__cdr_deserialize>:
 801028c:	b538      	push	{r3, r4, r5, lr}
 801028e:	460c      	mov	r4, r1
 8010290:	b141      	cbz	r1, 80102a4 <_Time__cdr_deserialize+0x18>
 8010292:	4605      	mov	r5, r0
 8010294:	f7fb f938 	bl	800b508 <ucdr_deserialize_int32_t>
 8010298:	1d21      	adds	r1, r4, #4
 801029a:	4628      	mov	r0, r5
 801029c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80102a0:	f7fa bdb0 	b.w	800ae04 <ucdr_deserialize_uint32_t>
 80102a4:	4608      	mov	r0, r1
 80102a6:	bd38      	pop	{r3, r4, r5, pc}

080102a8 <_Time__cdr_serialize>:
 80102a8:	b160      	cbz	r0, 80102c4 <_Time__cdr_serialize+0x1c>
 80102aa:	b538      	push	{r3, r4, r5, lr}
 80102ac:	460d      	mov	r5, r1
 80102ae:	4604      	mov	r4, r0
 80102b0:	6801      	ldr	r1, [r0, #0]
 80102b2:	4628      	mov	r0, r5
 80102b4:	f7fb f890 	bl	800b3d8 <ucdr_serialize_int32_t>
 80102b8:	6861      	ldr	r1, [r4, #4]
 80102ba:	4628      	mov	r0, r5
 80102bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80102c0:	f7fa bc70 	b.w	800aba4 <ucdr_serialize_uint32_t>
 80102c4:	4770      	bx	lr
 80102c6:	bf00      	nop

080102c8 <_Time__get_serialized_size>:
 80102c8:	b160      	cbz	r0, 80102e4 <_Time__get_serialized_size+0x1c>
 80102ca:	b510      	push	{r4, lr}
 80102cc:	2104      	movs	r1, #4
 80102ce:	2000      	movs	r0, #0
 80102d0:	f7fb fd38 	bl	800bd44 <ucdr_alignment>
 80102d4:	1d04      	adds	r4, r0, #4
 80102d6:	2104      	movs	r1, #4
 80102d8:	4620      	mov	r0, r4
 80102da:	f7fb fd33 	bl	800bd44 <ucdr_alignment>
 80102de:	3004      	adds	r0, #4
 80102e0:	4420      	add	r0, r4
 80102e2:	bd10      	pop	{r4, pc}
 80102e4:	4770      	bx	lr
 80102e6:	bf00      	nop

080102e8 <_Time__max_serialized_size>:
 80102e8:	b510      	push	{r4, lr}
 80102ea:	2104      	movs	r1, #4
 80102ec:	2000      	movs	r0, #0
 80102ee:	f7fb fd29 	bl	800bd44 <ucdr_alignment>
 80102f2:	1d04      	adds	r4, r0, #4
 80102f4:	2104      	movs	r1, #4
 80102f6:	4620      	mov	r0, r4
 80102f8:	f7fb fd24 	bl	800bd44 <ucdr_alignment>
 80102fc:	3004      	adds	r0, #4
 80102fe:	4420      	add	r0, r4
 8010300:	bd10      	pop	{r4, pc}
 8010302:	bf00      	nop

08010304 <max_serialized_size_builtin_interfaces__msg__Time>:
 8010304:	b538      	push	{r3, r4, r5, lr}
 8010306:	460c      	mov	r4, r1
 8010308:	2301      	movs	r3, #1
 801030a:	7003      	strb	r3, [r0, #0]
 801030c:	2104      	movs	r1, #4
 801030e:	4620      	mov	r0, r4
 8010310:	f7fb fd18 	bl	800bd44 <ucdr_alignment>
 8010314:	1d25      	adds	r5, r4, #4
 8010316:	4405      	add	r5, r0
 8010318:	2104      	movs	r1, #4
 801031a:	4628      	mov	r0, r5
 801031c:	f7fb fd12 	bl	800bd44 <ucdr_alignment>
 8010320:	f1c4 0404 	rsb	r4, r4, #4
 8010324:	4420      	add	r0, r4
 8010326:	4428      	add	r0, r5
 8010328:	bd38      	pop	{r3, r4, r5, pc}
 801032a:	bf00      	nop

0801032c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 801032c:	4800      	ldr	r0, [pc, #0]	@ (8010330 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 801032e:	4770      	bx	lr
 8010330:	200004d8 	.word	0x200004d8

08010334 <geometry_msgs__msg__Twist__init>:
 8010334:	b570      	push	{r4, r5, r6, lr}
 8010336:	4605      	mov	r5, r0
 8010338:	b1a8      	cbz	r0, 8010366 <geometry_msgs__msg__Twist__init+0x32>
 801033a:	f000 f82b 	bl	8010394 <geometry_msgs__msg__Vector3__init>
 801033e:	4604      	mov	r4, r0
 8010340:	b140      	cbz	r0, 8010354 <geometry_msgs__msg__Twist__init+0x20>
 8010342:	f105 0618 	add.w	r6, r5, #24
 8010346:	4630      	mov	r0, r6
 8010348:	f000 f824 	bl	8010394 <geometry_msgs__msg__Vector3__init>
 801034c:	4604      	mov	r4, r0
 801034e:	b168      	cbz	r0, 801036c <geometry_msgs__msg__Twist__init+0x38>
 8010350:	4620      	mov	r0, r4
 8010352:	bd70      	pop	{r4, r5, r6, pc}
 8010354:	4628      	mov	r0, r5
 8010356:	f000 f821 	bl	801039c <geometry_msgs__msg__Vector3__fini>
 801035a:	f105 0018 	add.w	r0, r5, #24
 801035e:	f000 f81d 	bl	801039c <geometry_msgs__msg__Vector3__fini>
 8010362:	4620      	mov	r0, r4
 8010364:	bd70      	pop	{r4, r5, r6, pc}
 8010366:	4604      	mov	r4, r0
 8010368:	4620      	mov	r0, r4
 801036a:	bd70      	pop	{r4, r5, r6, pc}
 801036c:	4628      	mov	r0, r5
 801036e:	f000 f815 	bl	801039c <geometry_msgs__msg__Vector3__fini>
 8010372:	4630      	mov	r0, r6
 8010374:	f000 f812 	bl	801039c <geometry_msgs__msg__Vector3__fini>
 8010378:	e7ea      	b.n	8010350 <geometry_msgs__msg__Twist__init+0x1c>
 801037a:	bf00      	nop

0801037c <geometry_msgs__msg__Twist__fini>:
 801037c:	b148      	cbz	r0, 8010392 <geometry_msgs__msg__Twist__fini+0x16>
 801037e:	b510      	push	{r4, lr}
 8010380:	4604      	mov	r4, r0
 8010382:	f000 f80b 	bl	801039c <geometry_msgs__msg__Vector3__fini>
 8010386:	f104 0018 	add.w	r0, r4, #24
 801038a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801038e:	f000 b805 	b.w	801039c <geometry_msgs__msg__Vector3__fini>
 8010392:	4770      	bx	lr

08010394 <geometry_msgs__msg__Vector3__init>:
 8010394:	3800      	subs	r0, #0
 8010396:	bf18      	it	ne
 8010398:	2001      	movne	r0, #1
 801039a:	4770      	bx	lr

0801039c <geometry_msgs__msg__Vector3__fini>:
 801039c:	4770      	bx	lr
 801039e:	bf00      	nop

080103a0 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__size_function__PoseWithCovariance__covariance>:
 80103a0:	2024      	movs	r0, #36	@ 0x24
 80103a2:	4770      	bx	lr

080103a4 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__get_const_function__PoseWithCovariance__covariance>:
 80103a4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80103a8:	4770      	bx	lr
 80103aa:	bf00      	nop

080103ac <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__fetch_function__PoseWithCovariance__covariance>:
 80103ac:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80103b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80103b4:	e9c2 0100 	strd	r0, r1, [r2]
 80103b8:	4770      	bx	lr
 80103ba:	bf00      	nop

080103bc <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__assign_function__PoseWithCovariance__covariance>:
 80103bc:	e9d2 2300 	ldrd	r2, r3, [r2]
 80103c0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80103c4:	e9c1 2300 	strd	r2, r3, [r1]
 80103c8:	4770      	bx	lr
 80103ca:	bf00      	nop

080103cc <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__PoseWithCovariance_init_function>:
 80103cc:	f007 bad2 	b.w	8017974 <geometry_msgs__msg__PoseWithCovariance__init>

080103d0 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__PoseWithCovariance_fini_function>:
 80103d0:	f007 bae2 	b.w	8017998 <geometry_msgs__msg__PoseWithCovariance__fini>

080103d4 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__get_function__PoseWithCovariance__covariance>:
 80103d4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80103d8:	4770      	bx	lr
 80103da:	bf00      	nop

080103dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>:
 80103dc:	b508      	push	{r3, lr}
 80103de:	f007 faf9 	bl	80179d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 80103e2:	4b06      	ldr	r3, [pc, #24]	@ (80103fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x20>)
 80103e4:	4906      	ldr	r1, [pc, #24]	@ (8010400 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x24>)
 80103e6:	681a      	ldr	r2, [r3, #0]
 80103e8:	60c8      	str	r0, [r1, #12]
 80103ea:	b10a      	cbz	r2, 80103f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x14>
 80103ec:	4803      	ldr	r0, [pc, #12]	@ (80103fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x20>)
 80103ee:	bd08      	pop	{r3, pc}
 80103f0:	4a04      	ldr	r2, [pc, #16]	@ (8010404 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x28>)
 80103f2:	4802      	ldr	r0, [pc, #8]	@ (80103fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x20>)
 80103f4:	6812      	ldr	r2, [r2, #0]
 80103f6:	601a      	str	r2, [r3, #0]
 80103f8:	bd08      	pop	{r3, pc}
 80103fa:	bf00      	nop
 80103fc:	20000578 	.word	0x20000578
 8010400:	20000500 	.word	0x20000500
 8010404:	20000320 	.word	0x20000320

08010408 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__size_function__TwistWithCovariance__covariance>:
 8010408:	2024      	movs	r0, #36	@ 0x24
 801040a:	4770      	bx	lr

0801040c <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__get_const_function__TwistWithCovariance__covariance>:
 801040c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8010410:	4770      	bx	lr
 8010412:	bf00      	nop

08010414 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__fetch_function__TwistWithCovariance__covariance>:
 8010414:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8010418:	e9d1 0100 	ldrd	r0, r1, [r1]
 801041c:	e9c2 0100 	strd	r0, r1, [r2]
 8010420:	4770      	bx	lr
 8010422:	bf00      	nop

08010424 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__assign_function__TwistWithCovariance__covariance>:
 8010424:	e9d2 2300 	ldrd	r2, r3, [r2]
 8010428:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801042c:	e9c1 2300 	strd	r2, r3, [r1]
 8010430:	4770      	bx	lr
 8010432:	bf00      	nop

08010434 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__TwistWithCovariance_init_function>:
 8010434:	f007 bab4 	b.w	80179a0 <geometry_msgs__msg__TwistWithCovariance__init>

08010438 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__TwistWithCovariance_fini_function>:
 8010438:	f007 bac4 	b.w	80179c4 <geometry_msgs__msg__TwistWithCovariance__fini>

0801043c <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__get_function__TwistWithCovariance__covariance>:
 801043c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8010440:	4770      	bx	lr
 8010442:	bf00      	nop

08010444 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>:
 8010444:	b508      	push	{r3, lr}
 8010446:	f7fa f83b 	bl	800a4c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 801044a:	4b06      	ldr	r3, [pc, #24]	@ (8010464 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x20>)
 801044c:	4906      	ldr	r1, [pc, #24]	@ (8010468 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x24>)
 801044e:	681a      	ldr	r2, [r3, #0]
 8010450:	60c8      	str	r0, [r1, #12]
 8010452:	b10a      	cbz	r2, 8010458 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x14>
 8010454:	4803      	ldr	r0, [pc, #12]	@ (8010464 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x20>)
 8010456:	bd08      	pop	{r3, pc}
 8010458:	4a04      	ldr	r2, [pc, #16]	@ (801046c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x28>)
 801045a:	4802      	ldr	r0, [pc, #8]	@ (8010464 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x20>)
 801045c:	6812      	ldr	r2, [r2, #0]
 801045e:	601a      	str	r2, [r3, #0]
 8010460:	bd08      	pop	{r3, pc}
 8010462:	bf00      	nop
 8010464:	200005fc 	.word	0x200005fc
 8010468:	20000584 	.word	0x20000584
 801046c:	20000320 	.word	0x20000320

08010470 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>:
 8010470:	b538      	push	{r3, r4, r5, lr}
 8010472:	b158      	cbz	r0, 801048c <get_serialized_size_geometry_msgs__msg__PoseWithCovariance+0x1c>
 8010474:	460d      	mov	r5, r1
 8010476:	f007 fad7 	bl	8017a28 <get_serialized_size_geometry_msgs__msg__Pose>
 801047a:	182c      	adds	r4, r5, r0
 801047c:	2108      	movs	r1, #8
 801047e:	4620      	mov	r0, r4
 8010480:	f7fb fc60 	bl	800bd44 <ucdr_alignment>
 8010484:	f5c5 7590 	rsb	r5, r5, #288	@ 0x120
 8010488:	4428      	add	r0, r5
 801048a:	4420      	add	r0, r4
 801048c:	bd38      	pop	{r3, r4, r5, pc}
 801048e:	bf00      	nop

08010490 <_PoseWithCovariance__cdr_deserialize>:
 8010490:	b538      	push	{r3, r4, r5, lr}
 8010492:	460c      	mov	r4, r1
 8010494:	b179      	cbz	r1, 80104b6 <_PoseWithCovariance__cdr_deserialize+0x26>
 8010496:	4605      	mov	r5, r0
 8010498:	f007 fb36 	bl	8017b08 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 801049c:	6843      	ldr	r3, [r0, #4]
 801049e:	4621      	mov	r1, r4
 80104a0:	68db      	ldr	r3, [r3, #12]
 80104a2:	4628      	mov	r0, r5
 80104a4:	4798      	blx	r3
 80104a6:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 80104aa:	4628      	mov	r0, r5
 80104ac:	2224      	movs	r2, #36	@ 0x24
 80104ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80104b2:	f000 ba3d 	b.w	8010930 <ucdr_deserialize_array_double>
 80104b6:	4608      	mov	r0, r1
 80104b8:	bd38      	pop	{r3, r4, r5, pc}
 80104ba:	bf00      	nop

080104bc <_PoseWithCovariance__cdr_serialize>:
 80104bc:	b188      	cbz	r0, 80104e2 <_PoseWithCovariance__cdr_serialize+0x26>
 80104be:	b538      	push	{r3, r4, r5, lr}
 80104c0:	460d      	mov	r5, r1
 80104c2:	4604      	mov	r4, r0
 80104c4:	f007 fb20 	bl	8017b08 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 80104c8:	6843      	ldr	r3, [r0, #4]
 80104ca:	4629      	mov	r1, r5
 80104cc:	689b      	ldr	r3, [r3, #8]
 80104ce:	4620      	mov	r0, r4
 80104d0:	4798      	blx	r3
 80104d2:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 80104d6:	4628      	mov	r0, r5
 80104d8:	2224      	movs	r2, #36	@ 0x24
 80104da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80104de:	f000 b9d3 	b.w	8010888 <ucdr_serialize_array_double>
 80104e2:	4770      	bx	lr

080104e4 <_PoseWithCovariance__get_serialized_size>:
 80104e4:	b158      	cbz	r0, 80104fe <_PoseWithCovariance__get_serialized_size+0x1a>
 80104e6:	b510      	push	{r4, lr}
 80104e8:	2100      	movs	r1, #0
 80104ea:	f007 fa9d 	bl	8017a28 <get_serialized_size_geometry_msgs__msg__Pose>
 80104ee:	2108      	movs	r1, #8
 80104f0:	4604      	mov	r4, r0
 80104f2:	f7fb fc27 	bl	800bd44 <ucdr_alignment>
 80104f6:	4420      	add	r0, r4
 80104f8:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 80104fc:	bd10      	pop	{r4, pc}
 80104fe:	4770      	bx	lr

08010500 <_PoseWithCovariance__max_serialized_size>:
 8010500:	b510      	push	{r4, lr}
 8010502:	b082      	sub	sp, #8
 8010504:	2301      	movs	r3, #1
 8010506:	2100      	movs	r1, #0
 8010508:	f10d 0007 	add.w	r0, sp, #7
 801050c:	f88d 3007 	strb.w	r3, [sp, #7]
 8010510:	f007 faec 	bl	8017aec <max_serialized_size_geometry_msgs__msg__Pose>
 8010514:	2108      	movs	r1, #8
 8010516:	4604      	mov	r4, r0
 8010518:	f7fb fc14 	bl	800bd44 <ucdr_alignment>
 801051c:	4420      	add	r0, r4
 801051e:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 8010522:	b002      	add	sp, #8
 8010524:	bd10      	pop	{r4, pc}
 8010526:	bf00      	nop

08010528 <max_serialized_size_geometry_msgs__msg__PoseWithCovariance>:
 8010528:	b538      	push	{r3, r4, r5, lr}
 801052a:	2301      	movs	r3, #1
 801052c:	7003      	strb	r3, [r0, #0]
 801052e:	460c      	mov	r4, r1
 8010530:	f007 fadc 	bl	8017aec <max_serialized_size_geometry_msgs__msg__Pose>
 8010534:	1825      	adds	r5, r4, r0
 8010536:	2108      	movs	r1, #8
 8010538:	4628      	mov	r0, r5
 801053a:	f7fb fc03 	bl	800bd44 <ucdr_alignment>
 801053e:	f5c4 7490 	rsb	r4, r4, #288	@ 0x120
 8010542:	4420      	add	r0, r4
 8010544:	4428      	add	r0, r5
 8010546:	bd38      	pop	{r3, r4, r5, pc}

08010548 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>:
 8010548:	4800      	ldr	r0, [pc, #0]	@ (801054c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x4>)
 801054a:	4770      	bx	lr
 801054c:	20000608 	.word	0x20000608

08010550 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>:
 8010550:	b538      	push	{r3, r4, r5, lr}
 8010552:	b158      	cbz	r0, 801056c <get_serialized_size_geometry_msgs__msg__TwistWithCovariance+0x1c>
 8010554:	460d      	mov	r5, r1
 8010556:	f7f9 ffdd 	bl	800a514 <get_serialized_size_geometry_msgs__msg__Twist>
 801055a:	182c      	adds	r4, r5, r0
 801055c:	2108      	movs	r1, #8
 801055e:	4620      	mov	r0, r4
 8010560:	f7fb fbf0 	bl	800bd44 <ucdr_alignment>
 8010564:	f5c5 7590 	rsb	r5, r5, #288	@ 0x120
 8010568:	4428      	add	r0, r5
 801056a:	4420      	add	r0, r4
 801056c:	bd38      	pop	{r3, r4, r5, pc}
 801056e:	bf00      	nop

08010570 <_TwistWithCovariance__cdr_deserialize>:
 8010570:	b538      	push	{r3, r4, r5, lr}
 8010572:	460c      	mov	r4, r1
 8010574:	b179      	cbz	r1, 8010596 <_TwistWithCovariance__cdr_deserialize+0x26>
 8010576:	4605      	mov	r5, r0
 8010578:	f7fa f83c 	bl	800a5f4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 801057c:	6843      	ldr	r3, [r0, #4]
 801057e:	4621      	mov	r1, r4
 8010580:	68db      	ldr	r3, [r3, #12]
 8010582:	4628      	mov	r0, r5
 8010584:	4798      	blx	r3
 8010586:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801058a:	4628      	mov	r0, r5
 801058c:	2224      	movs	r2, #36	@ 0x24
 801058e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010592:	f000 b9cd 	b.w	8010930 <ucdr_deserialize_array_double>
 8010596:	4608      	mov	r0, r1
 8010598:	bd38      	pop	{r3, r4, r5, pc}
 801059a:	bf00      	nop

0801059c <_TwistWithCovariance__cdr_serialize>:
 801059c:	b188      	cbz	r0, 80105c2 <_TwistWithCovariance__cdr_serialize+0x26>
 801059e:	b538      	push	{r3, r4, r5, lr}
 80105a0:	460d      	mov	r5, r1
 80105a2:	4604      	mov	r4, r0
 80105a4:	f7fa f826 	bl	800a5f4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 80105a8:	6843      	ldr	r3, [r0, #4]
 80105aa:	4629      	mov	r1, r5
 80105ac:	689b      	ldr	r3, [r3, #8]
 80105ae:	4620      	mov	r0, r4
 80105b0:	4798      	blx	r3
 80105b2:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80105b6:	4628      	mov	r0, r5
 80105b8:	2224      	movs	r2, #36	@ 0x24
 80105ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80105be:	f000 b963 	b.w	8010888 <ucdr_serialize_array_double>
 80105c2:	4770      	bx	lr

080105c4 <_TwistWithCovariance__get_serialized_size>:
 80105c4:	b158      	cbz	r0, 80105de <_TwistWithCovariance__get_serialized_size+0x1a>
 80105c6:	b510      	push	{r4, lr}
 80105c8:	2100      	movs	r1, #0
 80105ca:	f7f9 ffa3 	bl	800a514 <get_serialized_size_geometry_msgs__msg__Twist>
 80105ce:	2108      	movs	r1, #8
 80105d0:	4604      	mov	r4, r0
 80105d2:	f7fb fbb7 	bl	800bd44 <ucdr_alignment>
 80105d6:	4420      	add	r0, r4
 80105d8:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 80105dc:	bd10      	pop	{r4, pc}
 80105de:	4770      	bx	lr

080105e0 <_TwistWithCovariance__max_serialized_size>:
 80105e0:	b510      	push	{r4, lr}
 80105e2:	b082      	sub	sp, #8
 80105e4:	2301      	movs	r3, #1
 80105e6:	2100      	movs	r1, #0
 80105e8:	f10d 0007 	add.w	r0, sp, #7
 80105ec:	f88d 3007 	strb.w	r3, [sp, #7]
 80105f0:	f7f9 fff2 	bl	800a5d8 <max_serialized_size_geometry_msgs__msg__Twist>
 80105f4:	2108      	movs	r1, #8
 80105f6:	4604      	mov	r4, r0
 80105f8:	f7fb fba4 	bl	800bd44 <ucdr_alignment>
 80105fc:	4420      	add	r0, r4
 80105fe:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 8010602:	b002      	add	sp, #8
 8010604:	bd10      	pop	{r4, pc}
 8010606:	bf00      	nop

08010608 <max_serialized_size_geometry_msgs__msg__TwistWithCovariance>:
 8010608:	b538      	push	{r3, r4, r5, lr}
 801060a:	2301      	movs	r3, #1
 801060c:	7003      	strb	r3, [r0, #0]
 801060e:	460c      	mov	r4, r1
 8010610:	f7f9 ffe2 	bl	800a5d8 <max_serialized_size_geometry_msgs__msg__Twist>
 8010614:	1825      	adds	r5, r4, r0
 8010616:	2108      	movs	r1, #8
 8010618:	4628      	mov	r0, r5
 801061a:	f7fb fb93 	bl	800bd44 <ucdr_alignment>
 801061e:	f5c4 7490 	rsb	r4, r4, #288	@ 0x120
 8010622:	4420      	add	r0, r4
 8010624:	4428      	add	r0, r5
 8010626:	bd38      	pop	{r3, r4, r5, pc}

08010628 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>:
 8010628:	4800      	ldr	r0, [pc, #0]	@ (801062c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x4>)
 801062a:	4770      	bx	lr
 801062c:	20000630 	.word	0x20000630

08010630 <ucdr_serialize_endian_array_char>:
 8010630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010634:	4619      	mov	r1, r3
 8010636:	461f      	mov	r7, r3
 8010638:	4605      	mov	r5, r0
 801063a:	4690      	mov	r8, r2
 801063c:	f7fb fb2a 	bl	800bc94 <ucdr_check_buffer_available_for>
 8010640:	b9e0      	cbnz	r0, 801067c <ucdr_serialize_endian_array_char+0x4c>
 8010642:	463e      	mov	r6, r7
 8010644:	e009      	b.n	801065a <ucdr_serialize_endian_array_char+0x2a>
 8010646:	68a8      	ldr	r0, [r5, #8]
 8010648:	f009 f9ad 	bl	80199a6 <memcpy>
 801064c:	68ab      	ldr	r3, [r5, #8]
 801064e:	6928      	ldr	r0, [r5, #16]
 8010650:	4423      	add	r3, r4
 8010652:	4420      	add	r0, r4
 8010654:	1b36      	subs	r6, r6, r4
 8010656:	60ab      	str	r3, [r5, #8]
 8010658:	6128      	str	r0, [r5, #16]
 801065a:	4631      	mov	r1, r6
 801065c:	2201      	movs	r2, #1
 801065e:	4628      	mov	r0, r5
 8010660:	f7fb fba0 	bl	800bda4 <ucdr_check_final_buffer_behavior_array>
 8010664:	1bb9      	subs	r1, r7, r6
 8010666:	4441      	add	r1, r8
 8010668:	4604      	mov	r4, r0
 801066a:	4602      	mov	r2, r0
 801066c:	2800      	cmp	r0, #0
 801066e:	d1ea      	bne.n	8010646 <ucdr_serialize_endian_array_char+0x16>
 8010670:	2301      	movs	r3, #1
 8010672:	7da8      	ldrb	r0, [r5, #22]
 8010674:	756b      	strb	r3, [r5, #21]
 8010676:	4058      	eors	r0, r3
 8010678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801067c:	463a      	mov	r2, r7
 801067e:	68a8      	ldr	r0, [r5, #8]
 8010680:	4641      	mov	r1, r8
 8010682:	f009 f990 	bl	80199a6 <memcpy>
 8010686:	68aa      	ldr	r2, [r5, #8]
 8010688:	692b      	ldr	r3, [r5, #16]
 801068a:	443a      	add	r2, r7
 801068c:	443b      	add	r3, r7
 801068e:	60aa      	str	r2, [r5, #8]
 8010690:	612b      	str	r3, [r5, #16]
 8010692:	e7ed      	b.n	8010670 <ucdr_serialize_endian_array_char+0x40>

08010694 <ucdr_deserialize_endian_array_char>:
 8010694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010698:	4619      	mov	r1, r3
 801069a:	461f      	mov	r7, r3
 801069c:	4605      	mov	r5, r0
 801069e:	4690      	mov	r8, r2
 80106a0:	f7fb faf8 	bl	800bc94 <ucdr_check_buffer_available_for>
 80106a4:	b9e0      	cbnz	r0, 80106e0 <ucdr_deserialize_endian_array_char+0x4c>
 80106a6:	463e      	mov	r6, r7
 80106a8:	e009      	b.n	80106be <ucdr_deserialize_endian_array_char+0x2a>
 80106aa:	68a9      	ldr	r1, [r5, #8]
 80106ac:	f009 f97b 	bl	80199a6 <memcpy>
 80106b0:	68ab      	ldr	r3, [r5, #8]
 80106b2:	6928      	ldr	r0, [r5, #16]
 80106b4:	4423      	add	r3, r4
 80106b6:	4420      	add	r0, r4
 80106b8:	1b36      	subs	r6, r6, r4
 80106ba:	60ab      	str	r3, [r5, #8]
 80106bc:	6128      	str	r0, [r5, #16]
 80106be:	2201      	movs	r2, #1
 80106c0:	4631      	mov	r1, r6
 80106c2:	4628      	mov	r0, r5
 80106c4:	f7fb fb6e 	bl	800bda4 <ucdr_check_final_buffer_behavior_array>
 80106c8:	4604      	mov	r4, r0
 80106ca:	1bb8      	subs	r0, r7, r6
 80106cc:	4440      	add	r0, r8
 80106ce:	4622      	mov	r2, r4
 80106d0:	2c00      	cmp	r4, #0
 80106d2:	d1ea      	bne.n	80106aa <ucdr_deserialize_endian_array_char+0x16>
 80106d4:	2301      	movs	r3, #1
 80106d6:	7da8      	ldrb	r0, [r5, #22]
 80106d8:	756b      	strb	r3, [r5, #21]
 80106da:	4058      	eors	r0, r3
 80106dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106e0:	463a      	mov	r2, r7
 80106e2:	68a9      	ldr	r1, [r5, #8]
 80106e4:	4640      	mov	r0, r8
 80106e6:	f009 f95e 	bl	80199a6 <memcpy>
 80106ea:	68aa      	ldr	r2, [r5, #8]
 80106ec:	692b      	ldr	r3, [r5, #16]
 80106ee:	443a      	add	r2, r7
 80106f0:	443b      	add	r3, r7
 80106f2:	60aa      	str	r2, [r5, #8]
 80106f4:	612b      	str	r3, [r5, #16]
 80106f6:	e7ed      	b.n	80106d4 <ucdr_deserialize_endian_array_char+0x40>

080106f8 <ucdr_serialize_array_uint8_t>:
 80106f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106fc:	4688      	mov	r8, r1
 80106fe:	4611      	mov	r1, r2
 8010700:	4617      	mov	r7, r2
 8010702:	4605      	mov	r5, r0
 8010704:	f7fb fac6 	bl	800bc94 <ucdr_check_buffer_available_for>
 8010708:	b9e0      	cbnz	r0, 8010744 <ucdr_serialize_array_uint8_t+0x4c>
 801070a:	463e      	mov	r6, r7
 801070c:	e009      	b.n	8010722 <ucdr_serialize_array_uint8_t+0x2a>
 801070e:	68a8      	ldr	r0, [r5, #8]
 8010710:	f009 f949 	bl	80199a6 <memcpy>
 8010714:	68aa      	ldr	r2, [r5, #8]
 8010716:	692b      	ldr	r3, [r5, #16]
 8010718:	4422      	add	r2, r4
 801071a:	4423      	add	r3, r4
 801071c:	1b36      	subs	r6, r6, r4
 801071e:	60aa      	str	r2, [r5, #8]
 8010720:	612b      	str	r3, [r5, #16]
 8010722:	4631      	mov	r1, r6
 8010724:	2201      	movs	r2, #1
 8010726:	4628      	mov	r0, r5
 8010728:	f7fb fb3c 	bl	800bda4 <ucdr_check_final_buffer_behavior_array>
 801072c:	1bb9      	subs	r1, r7, r6
 801072e:	4441      	add	r1, r8
 8010730:	4604      	mov	r4, r0
 8010732:	4602      	mov	r2, r0
 8010734:	2800      	cmp	r0, #0
 8010736:	d1ea      	bne.n	801070e <ucdr_serialize_array_uint8_t+0x16>
 8010738:	2301      	movs	r3, #1
 801073a:	7da8      	ldrb	r0, [r5, #22]
 801073c:	756b      	strb	r3, [r5, #21]
 801073e:	4058      	eors	r0, r3
 8010740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010744:	463a      	mov	r2, r7
 8010746:	68a8      	ldr	r0, [r5, #8]
 8010748:	4641      	mov	r1, r8
 801074a:	f009 f92c 	bl	80199a6 <memcpy>
 801074e:	68aa      	ldr	r2, [r5, #8]
 8010750:	692b      	ldr	r3, [r5, #16]
 8010752:	443a      	add	r2, r7
 8010754:	443b      	add	r3, r7
 8010756:	60aa      	str	r2, [r5, #8]
 8010758:	612b      	str	r3, [r5, #16]
 801075a:	e7ed      	b.n	8010738 <ucdr_serialize_array_uint8_t+0x40>

0801075c <ucdr_serialize_endian_array_uint8_t>:
 801075c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010760:	4619      	mov	r1, r3
 8010762:	461f      	mov	r7, r3
 8010764:	4605      	mov	r5, r0
 8010766:	4690      	mov	r8, r2
 8010768:	f7fb fa94 	bl	800bc94 <ucdr_check_buffer_available_for>
 801076c:	b9e0      	cbnz	r0, 80107a8 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801076e:	463e      	mov	r6, r7
 8010770:	e009      	b.n	8010786 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8010772:	68a8      	ldr	r0, [r5, #8]
 8010774:	f009 f917 	bl	80199a6 <memcpy>
 8010778:	68ab      	ldr	r3, [r5, #8]
 801077a:	6928      	ldr	r0, [r5, #16]
 801077c:	4423      	add	r3, r4
 801077e:	4420      	add	r0, r4
 8010780:	1b36      	subs	r6, r6, r4
 8010782:	60ab      	str	r3, [r5, #8]
 8010784:	6128      	str	r0, [r5, #16]
 8010786:	4631      	mov	r1, r6
 8010788:	2201      	movs	r2, #1
 801078a:	4628      	mov	r0, r5
 801078c:	f7fb fb0a 	bl	800bda4 <ucdr_check_final_buffer_behavior_array>
 8010790:	1bb9      	subs	r1, r7, r6
 8010792:	4441      	add	r1, r8
 8010794:	4604      	mov	r4, r0
 8010796:	4602      	mov	r2, r0
 8010798:	2800      	cmp	r0, #0
 801079a:	d1ea      	bne.n	8010772 <ucdr_serialize_endian_array_uint8_t+0x16>
 801079c:	2301      	movs	r3, #1
 801079e:	7da8      	ldrb	r0, [r5, #22]
 80107a0:	756b      	strb	r3, [r5, #21]
 80107a2:	4058      	eors	r0, r3
 80107a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107a8:	463a      	mov	r2, r7
 80107aa:	68a8      	ldr	r0, [r5, #8]
 80107ac:	4641      	mov	r1, r8
 80107ae:	f009 f8fa 	bl	80199a6 <memcpy>
 80107b2:	68aa      	ldr	r2, [r5, #8]
 80107b4:	692b      	ldr	r3, [r5, #16]
 80107b6:	443a      	add	r2, r7
 80107b8:	443b      	add	r3, r7
 80107ba:	60aa      	str	r2, [r5, #8]
 80107bc:	612b      	str	r3, [r5, #16]
 80107be:	e7ed      	b.n	801079c <ucdr_serialize_endian_array_uint8_t+0x40>

080107c0 <ucdr_deserialize_array_uint8_t>:
 80107c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107c4:	4688      	mov	r8, r1
 80107c6:	4611      	mov	r1, r2
 80107c8:	4617      	mov	r7, r2
 80107ca:	4605      	mov	r5, r0
 80107cc:	f7fb fa62 	bl	800bc94 <ucdr_check_buffer_available_for>
 80107d0:	b9e0      	cbnz	r0, 801080c <ucdr_deserialize_array_uint8_t+0x4c>
 80107d2:	463e      	mov	r6, r7
 80107d4:	e009      	b.n	80107ea <ucdr_deserialize_array_uint8_t+0x2a>
 80107d6:	68a9      	ldr	r1, [r5, #8]
 80107d8:	f009 f8e5 	bl	80199a6 <memcpy>
 80107dc:	68aa      	ldr	r2, [r5, #8]
 80107de:	692b      	ldr	r3, [r5, #16]
 80107e0:	4422      	add	r2, r4
 80107e2:	4423      	add	r3, r4
 80107e4:	1b36      	subs	r6, r6, r4
 80107e6:	60aa      	str	r2, [r5, #8]
 80107e8:	612b      	str	r3, [r5, #16]
 80107ea:	2201      	movs	r2, #1
 80107ec:	4631      	mov	r1, r6
 80107ee:	4628      	mov	r0, r5
 80107f0:	f7fb fad8 	bl	800bda4 <ucdr_check_final_buffer_behavior_array>
 80107f4:	4604      	mov	r4, r0
 80107f6:	1bb8      	subs	r0, r7, r6
 80107f8:	4440      	add	r0, r8
 80107fa:	4622      	mov	r2, r4
 80107fc:	2c00      	cmp	r4, #0
 80107fe:	d1ea      	bne.n	80107d6 <ucdr_deserialize_array_uint8_t+0x16>
 8010800:	2301      	movs	r3, #1
 8010802:	7da8      	ldrb	r0, [r5, #22]
 8010804:	756b      	strb	r3, [r5, #21]
 8010806:	4058      	eors	r0, r3
 8010808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801080c:	463a      	mov	r2, r7
 801080e:	68a9      	ldr	r1, [r5, #8]
 8010810:	4640      	mov	r0, r8
 8010812:	f009 f8c8 	bl	80199a6 <memcpy>
 8010816:	68aa      	ldr	r2, [r5, #8]
 8010818:	692b      	ldr	r3, [r5, #16]
 801081a:	443a      	add	r2, r7
 801081c:	443b      	add	r3, r7
 801081e:	60aa      	str	r2, [r5, #8]
 8010820:	612b      	str	r3, [r5, #16]
 8010822:	e7ed      	b.n	8010800 <ucdr_deserialize_array_uint8_t+0x40>

08010824 <ucdr_deserialize_endian_array_uint8_t>:
 8010824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010828:	4619      	mov	r1, r3
 801082a:	461f      	mov	r7, r3
 801082c:	4605      	mov	r5, r0
 801082e:	4690      	mov	r8, r2
 8010830:	f7fb fa30 	bl	800bc94 <ucdr_check_buffer_available_for>
 8010834:	b9e0      	cbnz	r0, 8010870 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8010836:	463e      	mov	r6, r7
 8010838:	e009      	b.n	801084e <ucdr_deserialize_endian_array_uint8_t+0x2a>
 801083a:	68a9      	ldr	r1, [r5, #8]
 801083c:	f009 f8b3 	bl	80199a6 <memcpy>
 8010840:	68ab      	ldr	r3, [r5, #8]
 8010842:	6928      	ldr	r0, [r5, #16]
 8010844:	4423      	add	r3, r4
 8010846:	4420      	add	r0, r4
 8010848:	1b36      	subs	r6, r6, r4
 801084a:	60ab      	str	r3, [r5, #8]
 801084c:	6128      	str	r0, [r5, #16]
 801084e:	2201      	movs	r2, #1
 8010850:	4631      	mov	r1, r6
 8010852:	4628      	mov	r0, r5
 8010854:	f7fb faa6 	bl	800bda4 <ucdr_check_final_buffer_behavior_array>
 8010858:	4604      	mov	r4, r0
 801085a:	1bb8      	subs	r0, r7, r6
 801085c:	4440      	add	r0, r8
 801085e:	4622      	mov	r2, r4
 8010860:	2c00      	cmp	r4, #0
 8010862:	d1ea      	bne.n	801083a <ucdr_deserialize_endian_array_uint8_t+0x16>
 8010864:	2301      	movs	r3, #1
 8010866:	7da8      	ldrb	r0, [r5, #22]
 8010868:	756b      	strb	r3, [r5, #21]
 801086a:	4058      	eors	r0, r3
 801086c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010870:	463a      	mov	r2, r7
 8010872:	68a9      	ldr	r1, [r5, #8]
 8010874:	4640      	mov	r0, r8
 8010876:	f009 f896 	bl	80199a6 <memcpy>
 801087a:	68aa      	ldr	r2, [r5, #8]
 801087c:	692b      	ldr	r3, [r5, #16]
 801087e:	443a      	add	r2, r7
 8010880:	443b      	add	r3, r7
 8010882:	60aa      	str	r2, [r5, #8]
 8010884:	612b      	str	r3, [r5, #16]
 8010886:	e7ed      	b.n	8010864 <ucdr_deserialize_endian_array_uint8_t+0x40>

08010888 <ucdr_serialize_array_double>:
 8010888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801088c:	460e      	mov	r6, r1
 801088e:	2108      	movs	r1, #8
 8010890:	4604      	mov	r4, r0
 8010892:	4617      	mov	r7, r2
 8010894:	f7fb fa5e 	bl	800bd54 <ucdr_buffer_alignment>
 8010898:	4601      	mov	r1, r0
 801089a:	4620      	mov	r0, r4
 801089c:	7d65      	ldrb	r5, [r4, #21]
 801089e:	f7fb fa9d 	bl	800bddc <ucdr_advance_buffer>
 80108a2:	7d21      	ldrb	r1, [r4, #20]
 80108a4:	7565      	strb	r5, [r4, #21]
 80108a6:	2901      	cmp	r1, #1
 80108a8:	d010      	beq.n	80108cc <ucdr_serialize_array_double+0x44>
 80108aa:	b157      	cbz	r7, 80108c2 <ucdr_serialize_array_double+0x3a>
 80108ac:	2500      	movs	r5, #0
 80108ae:	e000      	b.n	80108b2 <ucdr_serialize_array_double+0x2a>
 80108b0:	7d21      	ldrb	r1, [r4, #20]
 80108b2:	ecb6 0b02 	vldmia	r6!, {d0}
 80108b6:	4620      	mov	r0, r4
 80108b8:	3501      	adds	r5, #1
 80108ba:	f7fa ff85 	bl	800b7c8 <ucdr_serialize_endian_double>
 80108be:	42af      	cmp	r7, r5
 80108c0:	d1f6      	bne.n	80108b0 <ucdr_serialize_array_double+0x28>
 80108c2:	7da0      	ldrb	r0, [r4, #22]
 80108c4:	f080 0001 	eor.w	r0, r0, #1
 80108c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108cc:	00ff      	lsls	r7, r7, #3
 80108ce:	4639      	mov	r1, r7
 80108d0:	4620      	mov	r0, r4
 80108d2:	f7fb f9df 	bl	800bc94 <ucdr_check_buffer_available_for>
 80108d6:	b9f8      	cbnz	r0, 8010918 <ucdr_serialize_array_double+0x90>
 80108d8:	46b8      	mov	r8, r7
 80108da:	e00a      	b.n	80108f2 <ucdr_serialize_array_double+0x6a>
 80108dc:	68a0      	ldr	r0, [r4, #8]
 80108de:	f009 f862 	bl	80199a6 <memcpy>
 80108e2:	68a2      	ldr	r2, [r4, #8]
 80108e4:	6923      	ldr	r3, [r4, #16]
 80108e6:	442a      	add	r2, r5
 80108e8:	442b      	add	r3, r5
 80108ea:	eba8 0805 	sub.w	r8, r8, r5
 80108ee:	60a2      	str	r2, [r4, #8]
 80108f0:	6123      	str	r3, [r4, #16]
 80108f2:	4641      	mov	r1, r8
 80108f4:	2208      	movs	r2, #8
 80108f6:	4620      	mov	r0, r4
 80108f8:	f7fb fa54 	bl	800bda4 <ucdr_check_final_buffer_behavior_array>
 80108fc:	eba7 0108 	sub.w	r1, r7, r8
 8010900:	4431      	add	r1, r6
 8010902:	4605      	mov	r5, r0
 8010904:	4602      	mov	r2, r0
 8010906:	2800      	cmp	r0, #0
 8010908:	d1e8      	bne.n	80108dc <ucdr_serialize_array_double+0x54>
 801090a:	7da0      	ldrb	r0, [r4, #22]
 801090c:	2308      	movs	r3, #8
 801090e:	7563      	strb	r3, [r4, #21]
 8010910:	f080 0001 	eor.w	r0, r0, #1
 8010914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010918:	463a      	mov	r2, r7
 801091a:	68a0      	ldr	r0, [r4, #8]
 801091c:	4631      	mov	r1, r6
 801091e:	f009 f842 	bl	80199a6 <memcpy>
 8010922:	68a2      	ldr	r2, [r4, #8]
 8010924:	6923      	ldr	r3, [r4, #16]
 8010926:	443a      	add	r2, r7
 8010928:	441f      	add	r7, r3
 801092a:	60a2      	str	r2, [r4, #8]
 801092c:	6127      	str	r7, [r4, #16]
 801092e:	e7ec      	b.n	801090a <ucdr_serialize_array_double+0x82>

08010930 <ucdr_deserialize_array_double>:
 8010930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010934:	460e      	mov	r6, r1
 8010936:	2108      	movs	r1, #8
 8010938:	4604      	mov	r4, r0
 801093a:	4617      	mov	r7, r2
 801093c:	f7fb fa0a 	bl	800bd54 <ucdr_buffer_alignment>
 8010940:	4601      	mov	r1, r0
 8010942:	4620      	mov	r0, r4
 8010944:	7d65      	ldrb	r5, [r4, #21]
 8010946:	f7fb fa49 	bl	800bddc <ucdr_advance_buffer>
 801094a:	7d21      	ldrb	r1, [r4, #20]
 801094c:	7565      	strb	r5, [r4, #21]
 801094e:	2901      	cmp	r1, #1
 8010950:	d011      	beq.n	8010976 <ucdr_deserialize_array_double+0x46>
 8010952:	b15f      	cbz	r7, 801096c <ucdr_deserialize_array_double+0x3c>
 8010954:	2500      	movs	r5, #0
 8010956:	e000      	b.n	801095a <ucdr_deserialize_array_double+0x2a>
 8010958:	7d21      	ldrb	r1, [r4, #20]
 801095a:	4632      	mov	r2, r6
 801095c:	4620      	mov	r0, r4
 801095e:	3501      	adds	r5, #1
 8010960:	f7fb f8ca 	bl	800baf8 <ucdr_deserialize_endian_double>
 8010964:	42af      	cmp	r7, r5
 8010966:	f106 0608 	add.w	r6, r6, #8
 801096a:	d1f5      	bne.n	8010958 <ucdr_deserialize_array_double+0x28>
 801096c:	7da0      	ldrb	r0, [r4, #22]
 801096e:	f080 0001 	eor.w	r0, r0, #1
 8010972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010976:	00ff      	lsls	r7, r7, #3
 8010978:	4639      	mov	r1, r7
 801097a:	4620      	mov	r0, r4
 801097c:	f7fb f98a 	bl	800bc94 <ucdr_check_buffer_available_for>
 8010980:	b9f8      	cbnz	r0, 80109c2 <ucdr_deserialize_array_double+0x92>
 8010982:	46b8      	mov	r8, r7
 8010984:	e00a      	b.n	801099c <ucdr_deserialize_array_double+0x6c>
 8010986:	68a1      	ldr	r1, [r4, #8]
 8010988:	f009 f80d 	bl	80199a6 <memcpy>
 801098c:	68a2      	ldr	r2, [r4, #8]
 801098e:	6923      	ldr	r3, [r4, #16]
 8010990:	442a      	add	r2, r5
 8010992:	442b      	add	r3, r5
 8010994:	eba8 0805 	sub.w	r8, r8, r5
 8010998:	60a2      	str	r2, [r4, #8]
 801099a:	6123      	str	r3, [r4, #16]
 801099c:	2208      	movs	r2, #8
 801099e:	4641      	mov	r1, r8
 80109a0:	4620      	mov	r0, r4
 80109a2:	f7fb f9ff 	bl	800bda4 <ucdr_check_final_buffer_behavior_array>
 80109a6:	4605      	mov	r5, r0
 80109a8:	eba7 0008 	sub.w	r0, r7, r8
 80109ac:	4430      	add	r0, r6
 80109ae:	462a      	mov	r2, r5
 80109b0:	2d00      	cmp	r5, #0
 80109b2:	d1e8      	bne.n	8010986 <ucdr_deserialize_array_double+0x56>
 80109b4:	7da0      	ldrb	r0, [r4, #22]
 80109b6:	2308      	movs	r3, #8
 80109b8:	7563      	strb	r3, [r4, #21]
 80109ba:	f080 0001 	eor.w	r0, r0, #1
 80109be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109c2:	463a      	mov	r2, r7
 80109c4:	68a1      	ldr	r1, [r4, #8]
 80109c6:	4630      	mov	r0, r6
 80109c8:	f008 ffed 	bl	80199a6 <memcpy>
 80109cc:	68a2      	ldr	r2, [r4, #8]
 80109ce:	6923      	ldr	r3, [r4, #16]
 80109d0:	443a      	add	r2, r7
 80109d2:	441f      	add	r7, r3
 80109d4:	60a2      	str	r2, [r4, #8]
 80109d6:	6127      	str	r7, [r4, #16]
 80109d8:	e7ec      	b.n	80109b4 <ucdr_deserialize_array_double+0x84>
 80109da:	bf00      	nop

080109dc <ucdr_serialize_sequence_char>:
 80109dc:	b570      	push	{r4, r5, r6, lr}
 80109de:	4615      	mov	r5, r2
 80109e0:	460e      	mov	r6, r1
 80109e2:	7d01      	ldrb	r1, [r0, #20]
 80109e4:	4604      	mov	r4, r0
 80109e6:	f7fa f975 	bl	800acd4 <ucdr_serialize_endian_uint32_t>
 80109ea:	b90d      	cbnz	r5, 80109f0 <ucdr_serialize_sequence_char+0x14>
 80109ec:	2001      	movs	r0, #1
 80109ee:	bd70      	pop	{r4, r5, r6, pc}
 80109f0:	7d21      	ldrb	r1, [r4, #20]
 80109f2:	462b      	mov	r3, r5
 80109f4:	4632      	mov	r2, r6
 80109f6:	4620      	mov	r0, r4
 80109f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80109fc:	f7ff be18 	b.w	8010630 <ucdr_serialize_endian_array_char>

08010a00 <ucdr_deserialize_sequence_char>:
 8010a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a04:	461d      	mov	r5, r3
 8010a06:	4616      	mov	r6, r2
 8010a08:	460f      	mov	r7, r1
 8010a0a:	461a      	mov	r2, r3
 8010a0c:	7d01      	ldrb	r1, [r0, #20]
 8010a0e:	4604      	mov	r4, r0
 8010a10:	f7fa fa88 	bl	800af24 <ucdr_deserialize_endian_uint32_t>
 8010a14:	682b      	ldr	r3, [r5, #0]
 8010a16:	429e      	cmp	r6, r3
 8010a18:	bf3c      	itt	cc
 8010a1a:	2201      	movcc	r2, #1
 8010a1c:	75a2      	strbcc	r2, [r4, #22]
 8010a1e:	b913      	cbnz	r3, 8010a26 <ucdr_deserialize_sequence_char+0x26>
 8010a20:	2001      	movs	r0, #1
 8010a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a26:	7d21      	ldrb	r1, [r4, #20]
 8010a28:	463a      	mov	r2, r7
 8010a2a:	4620      	mov	r0, r4
 8010a2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010a30:	f7ff be30 	b.w	8010694 <ucdr_deserialize_endian_array_char>

08010a34 <ucdr_serialize_sequence_uint8_t>:
 8010a34:	b570      	push	{r4, r5, r6, lr}
 8010a36:	4615      	mov	r5, r2
 8010a38:	460e      	mov	r6, r1
 8010a3a:	7d01      	ldrb	r1, [r0, #20]
 8010a3c:	4604      	mov	r4, r0
 8010a3e:	f7fa f949 	bl	800acd4 <ucdr_serialize_endian_uint32_t>
 8010a42:	b90d      	cbnz	r5, 8010a48 <ucdr_serialize_sequence_uint8_t+0x14>
 8010a44:	2001      	movs	r0, #1
 8010a46:	bd70      	pop	{r4, r5, r6, pc}
 8010a48:	7d21      	ldrb	r1, [r4, #20]
 8010a4a:	462b      	mov	r3, r5
 8010a4c:	4632      	mov	r2, r6
 8010a4e:	4620      	mov	r0, r4
 8010a50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010a54:	f7ff be82 	b.w	801075c <ucdr_serialize_endian_array_uint8_t>

08010a58 <ucdr_deserialize_sequence_uint8_t>:
 8010a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a5c:	461d      	mov	r5, r3
 8010a5e:	4616      	mov	r6, r2
 8010a60:	460f      	mov	r7, r1
 8010a62:	461a      	mov	r2, r3
 8010a64:	7d01      	ldrb	r1, [r0, #20]
 8010a66:	4604      	mov	r4, r0
 8010a68:	f7fa fa5c 	bl	800af24 <ucdr_deserialize_endian_uint32_t>
 8010a6c:	682b      	ldr	r3, [r5, #0]
 8010a6e:	429e      	cmp	r6, r3
 8010a70:	bf3c      	itt	cc
 8010a72:	2201      	movcc	r2, #1
 8010a74:	75a2      	strbcc	r2, [r4, #22]
 8010a76:	b913      	cbnz	r3, 8010a7e <ucdr_deserialize_sequence_uint8_t+0x26>
 8010a78:	2001      	movs	r0, #1
 8010a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a7e:	7d21      	ldrb	r1, [r4, #20]
 8010a80:	463a      	mov	r2, r7
 8010a82:	4620      	mov	r0, r4
 8010a84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010a88:	f7ff becc 	b.w	8010824 <ucdr_deserialize_endian_array_uint8_t>

08010a8c <uxr_buffer_delete_entity>:
 8010a8c:	b510      	push	{r4, lr}
 8010a8e:	2300      	movs	r3, #0
 8010a90:	b08e      	sub	sp, #56	@ 0x38
 8010a92:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8010a96:	2303      	movs	r3, #3
 8010a98:	9300      	str	r3, [sp, #0]
 8010a9a:	2204      	movs	r2, #4
 8010a9c:	ab06      	add	r3, sp, #24
 8010a9e:	4604      	mov	r4, r0
 8010aa0:	9103      	str	r1, [sp, #12]
 8010aa2:	f001 fc71 	bl	8012388 <uxr_prepare_stream_to_write_submessage>
 8010aa6:	b918      	cbnz	r0, 8010ab0 <uxr_buffer_delete_entity+0x24>
 8010aa8:	4604      	mov	r4, r0
 8010aaa:	4620      	mov	r0, r4
 8010aac:	b00e      	add	sp, #56	@ 0x38
 8010aae:	bd10      	pop	{r4, pc}
 8010ab0:	9902      	ldr	r1, [sp, #8]
 8010ab2:	aa05      	add	r2, sp, #20
 8010ab4:	4620      	mov	r0, r4
 8010ab6:	f001 fd9d 	bl	80125f4 <uxr_init_base_object_request>
 8010aba:	a905      	add	r1, sp, #20
 8010abc:	4604      	mov	r4, r0
 8010abe:	a806      	add	r0, sp, #24
 8010ac0:	f003 fc94 	bl	80143ec <uxr_serialize_DELETE_Payload>
 8010ac4:	4620      	mov	r0, r4
 8010ac6:	b00e      	add	sp, #56	@ 0x38
 8010ac8:	bd10      	pop	{r4, pc}
 8010aca:	bf00      	nop

08010acc <uxr_common_create_entity>:
 8010acc:	b510      	push	{r4, lr}
 8010ace:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8010ad2:	b08c      	sub	sp, #48	@ 0x30
 8010ad4:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8010ad8:	f1bc 0f01 	cmp.w	ip, #1
 8010adc:	bf0c      	ite	eq
 8010ade:	f003 0201 	andeq.w	r2, r3, #1
 8010ae2:	2200      	movne	r2, #0
 8010ae4:	330e      	adds	r3, #14
 8010ae6:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8010aea:	9101      	str	r1, [sp, #4]
 8010aec:	441a      	add	r2, r3
 8010aee:	2301      	movs	r3, #1
 8010af0:	9300      	str	r3, [sp, #0]
 8010af2:	9903      	ldr	r1, [sp, #12]
 8010af4:	ab04      	add	r3, sp, #16
 8010af6:	b292      	uxth	r2, r2
 8010af8:	4604      	mov	r4, r0
 8010afa:	f001 fc45 	bl	8012388 <uxr_prepare_stream_to_write_submessage>
 8010afe:	b918      	cbnz	r0, 8010b08 <uxr_common_create_entity+0x3c>
 8010b00:	4604      	mov	r4, r0
 8010b02:	4620      	mov	r0, r4
 8010b04:	b00c      	add	sp, #48	@ 0x30
 8010b06:	bd10      	pop	{r4, pc}
 8010b08:	9902      	ldr	r1, [sp, #8]
 8010b0a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010b0c:	4620      	mov	r0, r4
 8010b0e:	f001 fd71 	bl	80125f4 <uxr_init_base_object_request>
 8010b12:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010b14:	4604      	mov	r4, r0
 8010b16:	a804      	add	r0, sp, #16
 8010b18:	f003 fbb0 	bl	801427c <uxr_serialize_CREATE_Payload>
 8010b1c:	4620      	mov	r0, r4
 8010b1e:	b00c      	add	sp, #48	@ 0x30
 8010b20:	bd10      	pop	{r4, pc}
 8010b22:	bf00      	nop

08010b24 <uxr_buffer_create_participant_bin>:
 8010b24:	b570      	push	{r4, r5, r6, lr}
 8010b26:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8010b2a:	ac11      	add	r4, sp, #68	@ 0x44
 8010b2c:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8010b30:	2303      	movs	r3, #3
 8010b32:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8010b36:	7223      	strb	r3, [r4, #8]
 8010b38:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8010b3a:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8010b3e:	2201      	movs	r2, #1
 8010b40:	2100      	movs	r1, #0
 8010b42:	4605      	mov	r5, r0
 8010b44:	7122      	strb	r2, [r4, #4]
 8010b46:	f88d 1014 	strb.w	r1, [sp, #20]
 8010b4a:	b1cb      	cbz	r3, 8010b80 <uxr_buffer_create_participant_bin+0x5c>
 8010b4c:	f88d 201c 	strb.w	r2, [sp, #28]
 8010b50:	9308      	str	r3, [sp, #32]
 8010b52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010b56:	a915      	add	r1, sp, #84	@ 0x54
 8010b58:	a809      	add	r0, sp, #36	@ 0x24
 8010b5a:	f7fb f8ef 	bl	800bd3c <ucdr_init_buffer>
 8010b5e:	a905      	add	r1, sp, #20
 8010b60:	a809      	add	r0, sp, #36	@ 0x24
 8010b62:	f002 ff6d 	bl	8013a40 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8010b66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010b68:	9600      	str	r6, [sp, #0]
 8010b6a:	9401      	str	r4, [sp, #4]
 8010b6c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010b70:	60e3      	str	r3, [r4, #12]
 8010b72:	4628      	mov	r0, r5
 8010b74:	b29b      	uxth	r3, r3
 8010b76:	f7ff ffa9 	bl	8010acc <uxr_common_create_entity>
 8010b7a:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8010b7e:	bd70      	pop	{r4, r5, r6, pc}
 8010b80:	f88d 301c 	strb.w	r3, [sp, #28]
 8010b84:	e7e5      	b.n	8010b52 <uxr_buffer_create_participant_bin+0x2e>
 8010b86:	bf00      	nop

08010b88 <uxr_buffer_create_topic_bin>:
 8010b88:	b570      	push	{r4, r5, r6, lr}
 8010b8a:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8010b8e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010b92:	9105      	str	r1, [sp, #20]
 8010b94:	4605      	mov	r5, r0
 8010b96:	a997      	add	r1, sp, #604	@ 0x25c
 8010b98:	4618      	mov	r0, r3
 8010b9a:	2302      	movs	r3, #2
 8010b9c:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8010ba0:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8010ba4:	f000 fa58 	bl	8011058 <uxr_object_id_to_raw>
 8010ba8:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8010baa:	9306      	str	r3, [sp, #24]
 8010bac:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8010bae:	930a      	str	r3, [sp, #40]	@ 0x28
 8010bb0:	2303      	movs	r3, #3
 8010bb2:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8010bb6:	2301      	movs	r3, #1
 8010bb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010bbc:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8010bc0:	a917      	add	r1, sp, #92	@ 0x5c
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	a80b      	add	r0, sp, #44	@ 0x2c
 8010bc6:	f88d 301c 	strb.w	r3, [sp, #28]
 8010bca:	f7fb f8b7 	bl	800bd3c <ucdr_init_buffer>
 8010bce:	a906      	add	r1, sp, #24
 8010bd0:	a80b      	add	r0, sp, #44	@ 0x2c
 8010bd2:	f002 ff57 	bl	8013a84 <uxr_serialize_OBJK_Topic_Binary>
 8010bd6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010bd8:	9316      	str	r3, [sp, #88]	@ 0x58
 8010bda:	ac13      	add	r4, sp, #76	@ 0x4c
 8010bdc:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010be0:	9600      	str	r6, [sp, #0]
 8010be2:	9401      	str	r4, [sp, #4]
 8010be4:	b29b      	uxth	r3, r3
 8010be6:	4628      	mov	r0, r5
 8010be8:	f7ff ff70 	bl	8010acc <uxr_common_create_entity>
 8010bec:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8010bf0:	bd70      	pop	{r4, r5, r6, pc}
 8010bf2:	bf00      	nop

08010bf4 <uxr_buffer_create_publisher_bin>:
 8010bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010bf6:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8010bfa:	4605      	mov	r5, r0
 8010bfc:	9105      	str	r1, [sp, #20]
 8010bfe:	4618      	mov	r0, r3
 8010c00:	2603      	movs	r6, #3
 8010c02:	a992      	add	r1, sp, #584	@ 0x248
 8010c04:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010c08:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8010c0c:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8010c10:	f000 fa22 	bl	8011058 <uxr_object_id_to_raw>
 8010c14:	2300      	movs	r3, #0
 8010c16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010c1a:	a912      	add	r1, sp, #72	@ 0x48
 8010c1c:	a806      	add	r0, sp, #24
 8010c1e:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8010c22:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8010c26:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8010c2a:	f7fb f887 	bl	800bd3c <ucdr_init_buffer>
 8010c2e:	a993      	add	r1, sp, #588	@ 0x24c
 8010c30:	a806      	add	r0, sp, #24
 8010c32:	f002 ffdb 	bl	8013bec <uxr_serialize_OBJK_Publisher_Binary>
 8010c36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010c38:	9311      	str	r3, [sp, #68]	@ 0x44
 8010c3a:	ac0e      	add	r4, sp, #56	@ 0x38
 8010c3c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010c40:	9700      	str	r7, [sp, #0]
 8010c42:	9401      	str	r4, [sp, #4]
 8010c44:	b29b      	uxth	r3, r3
 8010c46:	4628      	mov	r0, r5
 8010c48:	f7ff ff40 	bl	8010acc <uxr_common_create_entity>
 8010c4c:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8010c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c52:	bf00      	nop

08010c54 <uxr_buffer_create_subscriber_bin>:
 8010c54:	b570      	push	{r4, r5, r6, lr}
 8010c56:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 8010c5a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010c5e:	9105      	str	r1, [sp, #20]
 8010c60:	4605      	mov	r5, r0
 8010c62:	a992      	add	r1, sp, #584	@ 0x248
 8010c64:	4618      	mov	r0, r3
 8010c66:	2304      	movs	r3, #4
 8010c68:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 8010c6c:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 8010c70:	f000 f9f2 	bl	8011058 <uxr_object_id_to_raw>
 8010c74:	2300      	movs	r3, #0
 8010c76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010c7a:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8010c7e:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8010c82:	a912      	add	r1, sp, #72	@ 0x48
 8010c84:	2303      	movs	r3, #3
 8010c86:	a806      	add	r0, sp, #24
 8010c88:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8010c8c:	f7fb f856 	bl	800bd3c <ucdr_init_buffer>
 8010c90:	a993      	add	r1, sp, #588	@ 0x24c
 8010c92:	a806      	add	r0, sp, #24
 8010c94:	f003 f85a 	bl	8013d4c <uxr_serialize_OBJK_Subscriber_Binary>
 8010c98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010c9a:	9311      	str	r3, [sp, #68]	@ 0x44
 8010c9c:	ac0e      	add	r4, sp, #56	@ 0x38
 8010c9e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010ca2:	9600      	str	r6, [sp, #0]
 8010ca4:	9401      	str	r4, [sp, #4]
 8010ca6:	b29b      	uxth	r3, r3
 8010ca8:	4628      	mov	r0, r5
 8010caa:	f7ff ff0f 	bl	8010acc <uxr_common_create_entity>
 8010cae:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 8010cb2:	bd70      	pop	{r4, r5, r6, pc}

08010cb4 <uxr_buffer_create_datawriter_bin>:
 8010cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cb8:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8010cbc:	ac1d      	add	r4, sp, #116	@ 0x74
 8010cbe:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010cc2:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 8010cc6:	9105      	str	r1, [sp, #20]
 8010cc8:	4606      	mov	r6, r0
 8010cca:	a9a1      	add	r1, sp, #644	@ 0x284
 8010ccc:	4618      	mov	r0, r3
 8010cce:	2305      	movs	r3, #5
 8010cd0:	7123      	strb	r3, [r4, #4]
 8010cd2:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 8010cd6:	2703      	movs	r7, #3
 8010cd8:	f000 f9be 	bl	8011058 <uxr_object_id_to_raw>
 8010cdc:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8010cde:	7227      	strb	r7, [r4, #8]
 8010ce0:	a90e      	add	r1, sp, #56	@ 0x38
 8010ce2:	f000 f9b9 	bl	8011058 <uxr_object_id_to_raw>
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8010cec:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 8010cf0:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8010cf4:	3d00      	subs	r5, #0
 8010cf6:	bf18      	it	ne
 8010cf8:	2501      	movne	r5, #1
 8010cfa:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8010cfe:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8010d02:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8010d06:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010d0a:	2301      	movs	r3, #1
 8010d0c:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8010d10:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8010d14:	bb8a      	cbnz	r2, 8010d7a <uxr_buffer_create_datawriter_bin+0xc6>
 8010d16:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010d1a:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8010d1e:	f04f 0c13 	mov.w	ip, #19
 8010d22:	250b      	movs	r5, #11
 8010d24:	2221      	movs	r2, #33	@ 0x21
 8010d26:	2111      	movs	r1, #17
 8010d28:	2009      	movs	r0, #9
 8010d2a:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 8010d2e:	b923      	cbnz	r3, 8010d3a <uxr_buffer_create_datawriter_bin+0x86>
 8010d30:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8010d34:	4672      	mov	r2, lr
 8010d36:	4661      	mov	r1, ip
 8010d38:	4628      	mov	r0, r5
 8010d3a:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 8010d3e:	2b01      	cmp	r3, #1
 8010d40:	d025      	beq.n	8010d8e <uxr_buffer_create_datawriter_bin+0xda>
 8010d42:	2b03      	cmp	r3, #3
 8010d44:	d029      	beq.n	8010d9a <uxr_buffer_create_datawriter_bin+0xe6>
 8010d46:	b32b      	cbz	r3, 8010d94 <uxr_buffer_create_datawriter_bin+0xe0>
 8010d48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010d4c:	a921      	add	r1, sp, #132	@ 0x84
 8010d4e:	a806      	add	r0, sp, #24
 8010d50:	f7fa fff4 	bl	800bd3c <ucdr_init_buffer>
 8010d54:	a90e      	add	r1, sp, #56	@ 0x38
 8010d56:	a806      	add	r0, sp, #24
 8010d58:	f003 f8aa 	bl	8013eb0 <uxr_serialize_OBJK_DataWriter_Binary>
 8010d5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010d5e:	f8cd 8000 	str.w	r8, [sp]
 8010d62:	9401      	str	r4, [sp, #4]
 8010d64:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010d68:	60e3      	str	r3, [r4, #12]
 8010d6a:	4630      	mov	r0, r6
 8010d6c:	b29b      	uxth	r3, r3
 8010d6e:	f7ff fead 	bl	8010acc <uxr_common_create_entity>
 8010d72:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8010d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d7a:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8010d7e:	f04f 0c12 	mov.w	ip, #18
 8010d82:	250a      	movs	r5, #10
 8010d84:	2220      	movs	r2, #32
 8010d86:	2110      	movs	r1, #16
 8010d88:	2008      	movs	r0, #8
 8010d8a:	2702      	movs	r7, #2
 8010d8c:	e7cd      	b.n	8010d2a <uxr_buffer_create_datawriter_bin+0x76>
 8010d8e:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8010d92:	e7d9      	b.n	8010d48 <uxr_buffer_create_datawriter_bin+0x94>
 8010d94:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8010d98:	e7d6      	b.n	8010d48 <uxr_buffer_create_datawriter_bin+0x94>
 8010d9a:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8010d9e:	e7d3      	b.n	8010d48 <uxr_buffer_create_datawriter_bin+0x94>

08010da0 <uxr_buffer_create_datareader_bin>:
 8010da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010da4:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8010da8:	ac1f      	add	r4, sp, #124	@ 0x7c
 8010daa:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010dae:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 8010db2:	9105      	str	r1, [sp, #20]
 8010db4:	4606      	mov	r6, r0
 8010db6:	a9a3      	add	r1, sp, #652	@ 0x28c
 8010db8:	4618      	mov	r0, r3
 8010dba:	2306      	movs	r3, #6
 8010dbc:	7123      	strb	r3, [r4, #4]
 8010dbe:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 8010dc2:	2703      	movs	r7, #3
 8010dc4:	f000 f948 	bl	8011058 <uxr_object_id_to_raw>
 8010dc8:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 8010dca:	7227      	strb	r7, [r4, #8]
 8010dcc:	a90e      	add	r1, sp, #56	@ 0x38
 8010dce:	f000 f943 	bl	8011058 <uxr_object_id_to_raw>
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8010dd8:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 8010ddc:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 8010de0:	3d00      	subs	r5, #0
 8010de2:	bf18      	it	ne
 8010de4:	2501      	movne	r5, #1
 8010de6:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8010dea:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8010dee:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8010df2:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8010df6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010dfa:	2301      	movs	r3, #1
 8010dfc:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8010e00:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8010e04:	bb8a      	cbnz	r2, 8010e6a <uxr_buffer_create_datareader_bin+0xca>
 8010e06:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010e0a:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8010e0e:	f04f 0c13 	mov.w	ip, #19
 8010e12:	250b      	movs	r5, #11
 8010e14:	2221      	movs	r2, #33	@ 0x21
 8010e16:	2111      	movs	r1, #17
 8010e18:	2009      	movs	r0, #9
 8010e1a:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 8010e1e:	b923      	cbnz	r3, 8010e2a <uxr_buffer_create_datareader_bin+0x8a>
 8010e20:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8010e24:	4672      	mov	r2, lr
 8010e26:	4661      	mov	r1, ip
 8010e28:	4628      	mov	r0, r5
 8010e2a:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 8010e2e:	2b01      	cmp	r3, #1
 8010e30:	d025      	beq.n	8010e7e <uxr_buffer_create_datareader_bin+0xde>
 8010e32:	2b03      	cmp	r3, #3
 8010e34:	d029      	beq.n	8010e8a <uxr_buffer_create_datareader_bin+0xea>
 8010e36:	b32b      	cbz	r3, 8010e84 <uxr_buffer_create_datareader_bin+0xe4>
 8010e38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010e3c:	a923      	add	r1, sp, #140	@ 0x8c
 8010e3e:	a806      	add	r0, sp, #24
 8010e40:	f7fa ff7c 	bl	800bd3c <ucdr_init_buffer>
 8010e44:	a90e      	add	r1, sp, #56	@ 0x38
 8010e46:	a806      	add	r0, sp, #24
 8010e48:	f002 fff6 	bl	8013e38 <uxr_serialize_OBJK_DataReader_Binary>
 8010e4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010e4e:	f8cd 8000 	str.w	r8, [sp]
 8010e52:	9401      	str	r4, [sp, #4]
 8010e54:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010e58:	60e3      	str	r3, [r4, #12]
 8010e5a:	4630      	mov	r0, r6
 8010e5c:	b29b      	uxth	r3, r3
 8010e5e:	f7ff fe35 	bl	8010acc <uxr_common_create_entity>
 8010e62:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8010e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e6a:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8010e6e:	f04f 0c12 	mov.w	ip, #18
 8010e72:	250a      	movs	r5, #10
 8010e74:	2220      	movs	r2, #32
 8010e76:	2110      	movs	r1, #16
 8010e78:	2008      	movs	r0, #8
 8010e7a:	2702      	movs	r7, #2
 8010e7c:	e7cd      	b.n	8010e1a <uxr_buffer_create_datareader_bin+0x7a>
 8010e7e:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8010e82:	e7d9      	b.n	8010e38 <uxr_buffer_create_datareader_bin+0x98>
 8010e84:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8010e88:	e7d6      	b.n	8010e38 <uxr_buffer_create_datareader_bin+0x98>
 8010e8a:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8010e8e:	e7d3      	b.n	8010e38 <uxr_buffer_create_datareader_bin+0x98>

08010e90 <get_custom_error>:
 8010e90:	4b01      	ldr	r3, [pc, #4]	@ (8010e98 <get_custom_error+0x8>)
 8010e92:	7818      	ldrb	r0, [r3, #0]
 8010e94:	4770      	bx	lr
 8010e96:	bf00      	nop
 8010e98:	200118cc 	.word	0x200118cc

08010e9c <recv_custom_msg>:
 8010e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ea0:	4693      	mov	fp, r2
 8010ea2:	b089      	sub	sp, #36	@ 0x24
 8010ea4:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8010ea8:	9305      	str	r3, [sp, #20]
 8010eaa:	468a      	mov	sl, r1
 8010eac:	2100      	movs	r1, #0
 8010eae:	4604      	mov	r4, r0
 8010eb0:	f88d 101e 	strb.w	r1, [sp, #30]
 8010eb4:	b322      	cbz	r2, 8010f00 <recv_custom_msg+0x64>
 8010eb6:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8010eba:	f10d 081f 	add.w	r8, sp, #31
 8010ebe:	af05      	add	r7, sp, #20
 8010ec0:	f10d 061e 	add.w	r6, sp, #30
 8010ec4:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8010ec8:	e002      	b.n	8010ed0 <recv_custom_msg+0x34>
 8010eca:	9b05      	ldr	r3, [sp, #20]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	dd0f      	ble.n	8010ef0 <recv_custom_msg+0x54>
 8010ed0:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8010ed4:	4623      	mov	r3, r4
 8010ed6:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8010eda:	e9cd 5600 	strd	r5, r6, [sp]
 8010ede:	4622      	mov	r2, r4
 8010ee0:	4648      	mov	r0, r9
 8010ee2:	f001 fdb5 	bl	8012a50 <uxr_read_framed_msg>
 8010ee6:	2800      	cmp	r0, #0
 8010ee8:	d0ef      	beq.n	8010eca <recv_custom_msg+0x2e>
 8010eea:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8010eee:	b1b3      	cbz	r3, 8010f1e <recv_custom_msg+0x82>
 8010ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8010f30 <recv_custom_msg+0x94>)
 8010ef2:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8010ef6:	701a      	strb	r2, [r3, #0]
 8010ef8:	2000      	movs	r0, #0
 8010efa:	b009      	add	sp, #36	@ 0x24
 8010efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f00:	f10d 021f 	add.w	r2, sp, #31
 8010f04:	9200      	str	r2, [sp, #0]
 8010f06:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8010f0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010f0e:	4601      	mov	r1, r0
 8010f10:	47a8      	blx	r5
 8010f12:	2800      	cmp	r0, #0
 8010f14:	d0ec      	beq.n	8010ef0 <recv_custom_msg+0x54>
 8010f16:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d1e8      	bne.n	8010ef0 <recv_custom_msg+0x54>
 8010f1e:	f8cb 0000 	str.w	r0, [fp]
 8010f22:	2001      	movs	r0, #1
 8010f24:	f8ca 4000 	str.w	r4, [sl]
 8010f28:	b009      	add	sp, #36	@ 0x24
 8010f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f2e:	bf00      	nop
 8010f30:	200118cc 	.word	0x200118cc

08010f34 <send_custom_msg>:
 8010f34:	b530      	push	{r4, r5, lr}
 8010f36:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 8010f3a:	b087      	sub	sp, #28
 8010f3c:	4615      	mov	r5, r2
 8010f3e:	b974      	cbnz	r4, 8010f5e <send_custom_msg+0x2a>
 8010f40:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8010f44:	f10d 0317 	add.w	r3, sp, #23
 8010f48:	47a0      	blx	r4
 8010f4a:	b108      	cbz	r0, 8010f50 <send_custom_msg+0x1c>
 8010f4c:	42a8      	cmp	r0, r5
 8010f4e:	d015      	beq.n	8010f7c <send_custom_msg+0x48>
 8010f50:	4b0c      	ldr	r3, [pc, #48]	@ (8010f84 <send_custom_msg+0x50>)
 8010f52:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8010f56:	701a      	strb	r2, [r3, #0]
 8010f58:	2000      	movs	r0, #0
 8010f5a:	b007      	add	sp, #28
 8010f5c:	bd30      	pop	{r4, r5, pc}
 8010f5e:	460b      	mov	r3, r1
 8010f60:	2200      	movs	r2, #0
 8010f62:	f10d 0117 	add.w	r1, sp, #23
 8010f66:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8010f6a:	4602      	mov	r2, r0
 8010f6c:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8010f70:	9500      	str	r5, [sp, #0]
 8010f72:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8010f76:	f001 fb73 	bl	8012660 <uxr_write_framed_msg>
 8010f7a:	e7e6      	b.n	8010f4a <send_custom_msg+0x16>
 8010f7c:	2001      	movs	r0, #1
 8010f7e:	b007      	add	sp, #28
 8010f80:	bd30      	pop	{r4, r5, pc}
 8010f82:	bf00      	nop
 8010f84:	200118cc 	.word	0x200118cc

08010f88 <uxr_set_custom_transport_callbacks>:
 8010f88:	b410      	push	{r4}
 8010f8a:	9c01      	ldr	r4, [sp, #4]
 8010f8c:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8010f90:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8010f94:	9b02      	ldr	r3, [sp, #8]
 8010f96:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8010f9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f9e:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8010fa2:	4770      	bx	lr

08010fa4 <uxr_init_custom_transport>:
 8010fa4:	b538      	push	{r3, r4, r5, lr}
 8010fa6:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8010faa:	b303      	cbz	r3, 8010fee <uxr_init_custom_transport+0x4a>
 8010fac:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8010fb0:	4604      	mov	r4, r0
 8010fb2:	b1e2      	cbz	r2, 8010fee <uxr_init_custom_transport+0x4a>
 8010fb4:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8010fb8:	b1ca      	cbz	r2, 8010fee <uxr_init_custom_transport+0x4a>
 8010fba:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8010fbe:	b1b2      	cbz	r2, 8010fee <uxr_init_custom_transport+0x4a>
 8010fc0:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8010fc4:	4798      	blx	r3
 8010fc6:	4605      	mov	r5, r0
 8010fc8:	b188      	cbz	r0, 8010fee <uxr_init_custom_transport+0x4a>
 8010fca:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8010fce:	b98b      	cbnz	r3, 8010ff4 <uxr_init_custom_transport+0x50>
 8010fd0:	490b      	ldr	r1, [pc, #44]	@ (8011000 <uxr_init_custom_transport+0x5c>)
 8010fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8011004 <uxr_init_custom_transport+0x60>)
 8010fd4:	4a0c      	ldr	r2, [pc, #48]	@ (8011008 <uxr_init_custom_transport+0x64>)
 8010fd6:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8010fda:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010fde:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8010fe2:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8010fe6:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8010fea:	4628      	mov	r0, r5
 8010fec:	bd38      	pop	{r3, r4, r5, pc}
 8010fee:	2500      	movs	r5, #0
 8010ff0:	4628      	mov	r0, r5
 8010ff2:	bd38      	pop	{r3, r4, r5, pc}
 8010ff4:	2100      	movs	r1, #0
 8010ff6:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8010ffa:	f001 fb2b 	bl	8012654 <uxr_init_framing_io>
 8010ffe:	e7e7      	b.n	8010fd0 <uxr_init_custom_transport+0x2c>
 8011000:	08010f35 	.word	0x08010f35
 8011004:	08010e9d 	.word	0x08010e9d
 8011008:	08010e91 	.word	0x08010e91

0801100c <uxr_close_custom_transport>:
 801100c:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8011010:	4718      	bx	r3
 8011012:	bf00      	nop

08011014 <uxr_object_id>:
 8011014:	b082      	sub	sp, #8
 8011016:	2300      	movs	r3, #0
 8011018:	f88d 1006 	strb.w	r1, [sp, #6]
 801101c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011020:	f360 030f 	bfi	r3, r0, #0, #16
 8011024:	f362 431f 	bfi	r3, r2, #16, #16
 8011028:	4618      	mov	r0, r3
 801102a:	b002      	add	sp, #8
 801102c:	4770      	bx	lr
 801102e:	bf00      	nop

08011030 <uxr_object_id_from_raw>:
 8011030:	7843      	ldrb	r3, [r0, #1]
 8011032:	7801      	ldrb	r1, [r0, #0]
 8011034:	b082      	sub	sp, #8
 8011036:	f003 020f 	and.w	r2, r3, #15
 801103a:	f88d 2006 	strb.w	r2, [sp, #6]
 801103e:	091b      	lsrs	r3, r3, #4
 8011040:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011044:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8011048:	2000      	movs	r0, #0
 801104a:	f363 000f 	bfi	r0, r3, #0, #16
 801104e:	f362 401f 	bfi	r0, r2, #16, #16
 8011052:	b002      	add	sp, #8
 8011054:	4770      	bx	lr
 8011056:	bf00      	nop

08011058 <uxr_object_id_to_raw>:
 8011058:	4602      	mov	r2, r0
 801105a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 801105e:	b082      	sub	sp, #8
 8011060:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8011064:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8011068:	f881 c000 	strb.w	ip, [r1]
 801106c:	7048      	strb	r0, [r1, #1]
 801106e:	b002      	add	sp, #8
 8011070:	4770      	bx	lr
 8011072:	bf00      	nop

08011074 <uxr_ping_agent_session>:
 8011074:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011078:	4617      	mov	r7, r2
 801107a:	b091      	sub	sp, #68	@ 0x44
 801107c:	2210      	movs	r2, #16
 801107e:	4606      	mov	r6, r0
 8011080:	4688      	mov	r8, r1
 8011082:	a808      	add	r0, sp, #32
 8011084:	eb0d 0102 	add.w	r1, sp, r2
 8011088:	f7fa fe58 	bl	800bd3c <ucdr_init_buffer>
 801108c:	4b1e      	ldr	r3, [pc, #120]	@ (8011108 <uxr_ping_agent_session+0x94>)
 801108e:	2500      	movs	r5, #0
 8011090:	881b      	ldrh	r3, [r3, #0]
 8011092:	f8ad 300a 	strh.w	r3, [sp, #10]
 8011096:	9500      	str	r5, [sp, #0]
 8011098:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 801109c:	2402      	movs	r4, #2
 801109e:	7831      	ldrb	r1, [r6, #0]
 80110a0:	f8ad 3008 	strh.w	r3, [sp, #8]
 80110a4:	462a      	mov	r2, r5
 80110a6:	a808      	add	r0, sp, #32
 80110a8:	462b      	mov	r3, r5
 80110aa:	9403      	str	r4, [sp, #12]
 80110ac:	f002 fa96 	bl	80135dc <uxr_serialize_message_header>
 80110b0:	4621      	mov	r1, r4
 80110b2:	462b      	mov	r3, r5
 80110b4:	2208      	movs	r2, #8
 80110b6:	a808      	add	r0, sp, #32
 80110b8:	f002 f896 	bl	80131e8 <uxr_buffer_submessage_header>
 80110bc:	a902      	add	r1, sp, #8
 80110be:	4604      	mov	r4, r0
 80110c0:	a808      	add	r0, sp, #32
 80110c2:	f003 f96b 	bl	801439c <uxr_serialize_GET_INFO_Payload>
 80110c6:	b104      	cbz	r4, 80110ca <uxr_ping_agent_session+0x56>
 80110c8:	b918      	cbnz	r0, 80110d2 <uxr_ping_agent_session+0x5e>
 80110ca:	2000      	movs	r0, #0
 80110cc:	b011      	add	sp, #68	@ 0x44
 80110ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80110d2:	a808      	add	r0, sp, #32
 80110d4:	f7fa fe5e 	bl	800bd94 <ucdr_buffer_length>
 80110d8:	4681      	mov	r9, r0
 80110da:	e00d      	b.n	80110f8 <uxr_ping_agent_session+0x84>
 80110dc:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80110de:	e9d3 0400 	ldrd	r0, r4, [r3]
 80110e2:	47a0      	blx	r4
 80110e4:	4641      	mov	r1, r8
 80110e6:	4604      	mov	r4, r0
 80110e8:	4630      	mov	r0, r6
 80110ea:	f000 ff4d 	bl	8011f88 <uxr_run_session_until_pong>
 80110ee:	ea04 0c00 	and.w	ip, r4, r0
 80110f2:	f01c 00ff 	ands.w	r0, ip, #255	@ 0xff
 80110f6:	d1e9      	bne.n	80110cc <uxr_ping_agent_session+0x58>
 80110f8:	42af      	cmp	r7, r5
 80110fa:	464a      	mov	r2, r9
 80110fc:	a904      	add	r1, sp, #16
 80110fe:	f105 0501 	add.w	r5, r5, #1
 8011102:	d1eb      	bne.n	80110dc <uxr_ping_agent_session+0x68>
 8011104:	e7e1      	b.n	80110ca <uxr_ping_agent_session+0x56>
 8011106:	bf00      	nop
 8011108:	0801a6dc 	.word	0x0801a6dc

0801110c <uxr_ping_agent_attempts>:
 801110c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011110:	ed2d 8b02 	vpush	{d8}
 8011114:	b0d1      	sub	sp, #324	@ 0x144
 8011116:	4606      	mov	r6, r0
 8011118:	4688      	mov	r8, r1
 801111a:	a80e      	add	r0, sp, #56	@ 0x38
 801111c:	a90a      	add	r1, sp, #40	@ 0x28
 801111e:	4615      	mov	r5, r2
 8011120:	2210      	movs	r2, #16
 8011122:	f7fa fe0b 	bl	800bd3c <ucdr_init_buffer>
 8011126:	4b54      	ldr	r3, [pc, #336]	@ (8011278 <uxr_ping_agent_attempts+0x16c>)
 8011128:	881b      	ldrh	r3, [r3, #0]
 801112a:	f8ad 307a 	strh.w	r3, [sp, #122]	@ 0x7a
 801112e:	2300      	movs	r3, #0
 8011130:	2402      	movs	r4, #2
 8011132:	461a      	mov	r2, r3
 8011134:	9300      	str	r3, [sp, #0]
 8011136:	2180      	movs	r1, #128	@ 0x80
 8011138:	a80e      	add	r0, sp, #56	@ 0x38
 801113a:	f44f 6720 	mov.w	r7, #2560	@ 0xa00
 801113e:	941f      	str	r4, [sp, #124]	@ 0x7c
 8011140:	f8ad 7078 	strh.w	r7, [sp, #120]	@ 0x78
 8011144:	f002 fa4a 	bl	80135dc <uxr_serialize_message_header>
 8011148:	4621      	mov	r1, r4
 801114a:	2300      	movs	r3, #0
 801114c:	2208      	movs	r2, #8
 801114e:	a80e      	add	r0, sp, #56	@ 0x38
 8011150:	f002 f84a 	bl	80131e8 <uxr_buffer_submessage_header>
 8011154:	a91e      	add	r1, sp, #120	@ 0x78
 8011156:	4604      	mov	r4, r0
 8011158:	a80e      	add	r0, sp, #56	@ 0x38
 801115a:	f003 f91f 	bl	801439c <uxr_serialize_GET_INFO_Payload>
 801115e:	b104      	cbz	r4, 8011162 <uxr_ping_agent_attempts+0x56>
 8011160:	b938      	cbnz	r0, 8011172 <uxr_ping_agent_attempts+0x66>
 8011162:	f04f 0b00 	mov.w	fp, #0
 8011166:	4658      	mov	r0, fp
 8011168:	b051      	add	sp, #324	@ 0x144
 801116a:	ecbd 8b02 	vpop	{d8}
 801116e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011172:	a80e      	add	r0, sp, #56	@ 0x38
 8011174:	f7fa fe0e 	bl	800bd94 <ucdr_buffer_length>
 8011178:	1c6b      	adds	r3, r5, #1
 801117a:	ee08 0a10 	vmov	s16, r0
 801117e:	9303      	str	r3, [sp, #12]
 8011180:	f04f 0901 	mov.w	r9, #1
 8011184:	9b03      	ldr	r3, [sp, #12]
 8011186:	454b      	cmp	r3, r9
 8011188:	d0eb      	beq.n	8011162 <uxr_ping_agent_attempts+0x56>
 801118a:	e9d6 0300 	ldrd	r0, r3, [r6]
 801118e:	ee18 2a10 	vmov	r2, s16
 8011192:	a90a      	add	r1, sp, #40	@ 0x28
 8011194:	4798      	blx	r3
 8011196:	f002 f86d 	bl	8013274 <uxr_millis>
 801119a:	4645      	mov	r5, r8
 801119c:	4604      	mov	r4, r0
 801119e:	f04f 0a00 	mov.w	sl, #0
 80111a2:	68b7      	ldr	r7, [r6, #8]
 80111a4:	6830      	ldr	r0, [r6, #0]
 80111a6:	f8cd a018 	str.w	sl, [sp, #24]
 80111aa:	4643      	mov	r3, r8
 80111ac:	aa07      	add	r2, sp, #28
 80111ae:	a906      	add	r1, sp, #24
 80111b0:	47b8      	blx	r7
 80111b2:	4607      	mov	r7, r0
 80111b4:	b958      	cbnz	r0, 80111ce <uxr_ping_agent_attempts+0xc2>
 80111b6:	f002 f85d 	bl	8013274 <uxr_millis>
 80111ba:	1b00      	subs	r0, r0, r4
 80111bc:	1a2d      	subs	r5, r5, r0
 80111be:	f002 f859 	bl	8013274 <uxr_millis>
 80111c2:	2d00      	cmp	r5, #0
 80111c4:	4604      	mov	r4, r0
 80111c6:	dcec      	bgt.n	80111a2 <uxr_ping_agent_attempts+0x96>
 80111c8:	f109 0901 	add.w	r9, r9, #1
 80111cc:	e7da      	b.n	8011184 <uxr_ping_agent_attempts+0x78>
 80111ce:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80111d2:	a816      	add	r0, sp, #88	@ 0x58
 80111d4:	f7fa fdb2 	bl	800bd3c <ucdr_init_buffer>
 80111d8:	ab05      	add	r3, sp, #20
 80111da:	f10d 0211 	add.w	r2, sp, #17
 80111de:	a916      	add	r1, sp, #88	@ 0x58
 80111e0:	a808      	add	r0, sp, #32
 80111e2:	e9cd aa08 	strd	sl, sl, [sp, #32]
 80111e6:	f001 f9bb 	bl	8012560 <uxr_read_session_header>
 80111ea:	22c8      	movs	r2, #200	@ 0xc8
 80111ec:	2100      	movs	r1, #0
 80111ee:	a81e      	add	r0, sp, #120	@ 0x78
 80111f0:	f008 fb10 	bl	8019814 <memset>
 80111f4:	a816      	add	r0, sp, #88	@ 0x58
 80111f6:	f7fa fdd1 	bl	800bd9c <ucdr_buffer_remaining>
 80111fa:	2804      	cmp	r0, #4
 80111fc:	d814      	bhi.n	8011228 <uxr_ping_agent_attempts+0x11c>
 80111fe:	f89d b12d 	ldrb.w	fp, [sp, #301]	@ 0x12d
 8011202:	f002 f837 	bl	8013274 <uxr_millis>
 8011206:	1b00      	subs	r0, r0, r4
 8011208:	1a2d      	subs	r5, r5, r0
 801120a:	f002 f833 	bl	8013274 <uxr_millis>
 801120e:	2d00      	cmp	r5, #0
 8011210:	4604      	mov	r4, r0
 8011212:	dd2a      	ble.n	801126a <uxr_ping_agent_attempts+0x15e>
 8011214:	f1bb 0f00 	cmp.w	fp, #0
 8011218:	d0c3      	beq.n	80111a2 <uxr_ping_agent_attempts+0x96>
 801121a:	46bb      	mov	fp, r7
 801121c:	4658      	mov	r0, fp
 801121e:	b051      	add	sp, #324	@ 0x144
 8011220:	ecbd 8b02 	vpop	{d8}
 8011224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011228:	f10d 0316 	add.w	r3, sp, #22
 801122c:	f10d 0213 	add.w	r2, sp, #19
 8011230:	f10d 0112 	add.w	r1, sp, #18
 8011234:	a816      	add	r0, sp, #88	@ 0x58
 8011236:	f88d a012 	strb.w	sl, [sp, #18]
 801123a:	f8ad a016 	strh.w	sl, [sp, #22]
 801123e:	f88d a013 	strb.w	sl, [sp, #19]
 8011242:	f002 fa1d 	bl	8013680 <uxr_deserialize_submessage_header>
 8011246:	a816      	add	r0, sp, #88	@ 0x58
 8011248:	f7fa fda8 	bl	800bd9c <ucdr_buffer_remaining>
 801124c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8011250:	4298      	cmp	r0, r3
 8011252:	d3d4      	bcc.n	80111fe <uxr_ping_agent_attempts+0xf2>
 8011254:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8011258:	2b06      	cmp	r3, #6
 801125a:	d1d0      	bne.n	80111fe <uxr_ping_agent_attempts+0xf2>
 801125c:	a916      	add	r1, sp, #88	@ 0x58
 801125e:	a81e      	add	r0, sp, #120	@ 0x78
 8011260:	f88d a12d 	strb.w	sl, [sp, #301]	@ 0x12d
 8011264:	f000 face 	bl	8011804 <read_submessage_info>
 8011268:	e7c9      	b.n	80111fe <uxr_ping_agent_attempts+0xf2>
 801126a:	f1bb 0f00 	cmp.w	fp, #0
 801126e:	d1d4      	bne.n	801121a <uxr_ping_agent_attempts+0x10e>
 8011270:	f109 0901 	add.w	r9, r9, #1
 8011274:	e786      	b.n	8011184 <uxr_ping_agent_attempts+0x78>
 8011276:	bf00      	nop
 8011278:	0801a6dc 	.word	0x0801a6dc

0801127c <uxr_buffer_request_data>:
 801127c:	b530      	push	{r4, r5, lr}
 801127e:	b095      	sub	sp, #84	@ 0x54
 8011280:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8011284:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8011286:	9303      	str	r3, [sp, #12]
 8011288:	2200      	movs	r2, #0
 801128a:	2d00      	cmp	r5, #0
 801128c:	bf14      	ite	ne
 801128e:	2101      	movne	r1, #1
 8011290:	4611      	moveq	r1, r2
 8011292:	4604      	mov	r4, r0
 8011294:	f88d 301c 	strb.w	r3, [sp, #28]
 8011298:	f88d 201d 	strb.w	r2, [sp, #29]
 801129c:	f88d 201e 	strb.w	r2, [sp, #30]
 80112a0:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 80112a4:	d021      	beq.n	80112ea <uxr_buffer_request_data+0x6e>
 80112a6:	682a      	ldr	r2, [r5, #0]
 80112a8:	686b      	ldr	r3, [r5, #4]
 80112aa:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 80112ae:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 80112b2:	2210      	movs	r2, #16
 80112b4:	2308      	movs	r3, #8
 80112b6:	2100      	movs	r1, #0
 80112b8:	e9cd 3100 	strd	r3, r1, [sp]
 80112bc:	4620      	mov	r0, r4
 80112be:	9905      	ldr	r1, [sp, #20]
 80112c0:	ab0c      	add	r3, sp, #48	@ 0x30
 80112c2:	f001 f861 	bl	8012388 <uxr_prepare_stream_to_write_submessage>
 80112c6:	b918      	cbnz	r0, 80112d0 <uxr_buffer_request_data+0x54>
 80112c8:	4604      	mov	r4, r0
 80112ca:	4620      	mov	r0, r4
 80112cc:	b015      	add	sp, #84	@ 0x54
 80112ce:	bd30      	pop	{r4, r5, pc}
 80112d0:	9904      	ldr	r1, [sp, #16]
 80112d2:	aa06      	add	r2, sp, #24
 80112d4:	4620      	mov	r0, r4
 80112d6:	f001 f98d 	bl	80125f4 <uxr_init_base_object_request>
 80112da:	a906      	add	r1, sp, #24
 80112dc:	4604      	mov	r4, r0
 80112de:	a80c      	add	r0, sp, #48	@ 0x30
 80112e0:	f003 f92e 	bl	8014540 <uxr_serialize_READ_DATA_Payload>
 80112e4:	4620      	mov	r0, r4
 80112e6:	b015      	add	sp, #84	@ 0x54
 80112e8:	bd30      	pop	{r4, r5, pc}
 80112ea:	2208      	movs	r2, #8
 80112ec:	e7e2      	b.n	80112b4 <uxr_buffer_request_data+0x38>
 80112ee:	bf00      	nop

080112f0 <uxr_buffer_cancel_data>:
 80112f0:	b510      	push	{r4, lr}
 80112f2:	b094      	sub	sp, #80	@ 0x50
 80112f4:	2300      	movs	r3, #0
 80112f6:	9202      	str	r2, [sp, #8]
 80112f8:	9205      	str	r2, [sp, #20]
 80112fa:	9301      	str	r3, [sp, #4]
 80112fc:	2201      	movs	r2, #1
 80112fe:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011302:	f88d 301e 	strb.w	r3, [sp, #30]
 8011306:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 801130a:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801130e:	2308      	movs	r3, #8
 8011310:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8011314:	9300      	str	r3, [sp, #0]
 8011316:	2210      	movs	r2, #16
 8011318:	ab0c      	add	r3, sp, #48	@ 0x30
 801131a:	4604      	mov	r4, r0
 801131c:	9103      	str	r1, [sp, #12]
 801131e:	f001 f833 	bl	8012388 <uxr_prepare_stream_to_write_submessage>
 8011322:	b918      	cbnz	r0, 801132c <uxr_buffer_cancel_data+0x3c>
 8011324:	4604      	mov	r4, r0
 8011326:	4620      	mov	r0, r4
 8011328:	b014      	add	sp, #80	@ 0x50
 801132a:	bd10      	pop	{r4, pc}
 801132c:	9905      	ldr	r1, [sp, #20]
 801132e:	aa06      	add	r2, sp, #24
 8011330:	4620      	mov	r0, r4
 8011332:	f001 f95f 	bl	80125f4 <uxr_init_base_object_request>
 8011336:	a906      	add	r1, sp, #24
 8011338:	4604      	mov	r4, r0
 801133a:	a80c      	add	r0, sp, #48	@ 0x30
 801133c:	f003 f900 	bl	8014540 <uxr_serialize_READ_DATA_Payload>
 8011340:	4620      	mov	r0, r4
 8011342:	b014      	add	sp, #80	@ 0x50
 8011344:	bd10      	pop	{r4, pc}
 8011346:	bf00      	nop

08011348 <read_submessage_format>:
 8011348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801134c:	b095      	sub	sp, #84	@ 0x54
 801134e:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 8011352:	b113      	cbz	r3, 801135a <read_submessage_format+0x12>
 8011354:	b015      	add	sp, #84	@ 0x54
 8011356:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801135a:	460c      	mov	r4, r1
 801135c:	4615      	mov	r5, r2
 801135e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8011362:	4607      	mov	r7, r0
 8011364:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8011366:	9004      	str	r0, [sp, #16]
 8011368:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801136a:	9005      	str	r0, [sp, #20]
 801136c:	1a52      	subs	r2, r2, r1
 801136e:	a80c      	add	r0, sp, #48	@ 0x30
 8011370:	4699      	mov	r9, r3
 8011372:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8011376:	f7fa fce1 	bl	800bd3c <ucdr_init_buffer>
 801137a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801137e:	a80c      	add	r0, sp, #48	@ 0x30
 8011380:	f7fa fcb0 	bl	800bce4 <ucdr_set_on_full_buffer_callback>
 8011384:	69e2      	ldr	r2, [r4, #28]
 8011386:	b19a      	cbz	r2, 80113b0 <read_submessage_format+0x68>
 8011388:	f1b8 0f07 	cmp.w	r8, #7
 801138c:	f882 9014 	strb.w	r9, [r2, #20]
 8011390:	d040      	beq.n	8011414 <read_submessage_format+0xcc>
 8011392:	f1b8 0f08 	cmp.w	r8, #8
 8011396:	d02e      	beq.n	80113f6 <read_submessage_format+0xae>
 8011398:	f1b8 0f06 	cmp.w	r8, #6
 801139c:	d011      	beq.n	80113c2 <read_submessage_format+0x7a>
 801139e:	2301      	movs	r3, #1
 80113a0:	7513      	strb	r3, [r2, #20]
 80113a2:	4629      	mov	r1, r5
 80113a4:	4620      	mov	r0, r4
 80113a6:	f7fa fd19 	bl	800bddc <ucdr_advance_buffer>
 80113aa:	b015      	add	sp, #84	@ 0x54
 80113ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80113b0:	f1b8 0f07 	cmp.w	r8, #7
 80113b4:	d02e      	beq.n	8011414 <read_submessage_format+0xcc>
 80113b6:	f1b8 0f08 	cmp.w	r8, #8
 80113ba:	d01c      	beq.n	80113f6 <read_submessage_format+0xae>
 80113bc:	f1b8 0f06 	cmp.w	r8, #6
 80113c0:	d1ef      	bne.n	80113a2 <read_submessage_format+0x5a>
 80113c2:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 80113c6:	f1b8 0f00 	cmp.w	r8, #0
 80113ca:	d011      	beq.n	80113f0 <read_submessage_format+0xa8>
 80113cc:	ab0c      	add	r3, sp, #48	@ 0x30
 80113ce:	e9cd 3500 	strd	r3, r5, [sp]
 80113d2:	2306      	movs	r3, #6
 80113d4:	f88d 3016 	strb.w	r3, [sp, #22]
 80113d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80113dc:	9302      	str	r3, [sp, #8]
 80113de:	4632      	mov	r2, r6
 80113e0:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80113e4:	4638      	mov	r0, r7
 80113e6:	47c0      	blx	r8
 80113e8:	2301      	movs	r3, #1
 80113ea:	69e2      	ldr	r2, [r4, #28]
 80113ec:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 80113f0:	2a00      	cmp	r2, #0
 80113f2:	d1d4      	bne.n	801139e <read_submessage_format+0x56>
 80113f4:	e7d5      	b.n	80113a2 <read_submessage_format+0x5a>
 80113f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d0f8      	beq.n	80113f0 <read_submessage_format+0xa8>
 80113fe:	a906      	add	r1, sp, #24
 8011400:	a80c      	add	r0, sp, #48	@ 0x30
 8011402:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8011406:	f003 f961 	bl	80146cc <uxr_deserialize_SampleIdentity>
 801140a:	b9a0      	cbnz	r0, 8011436 <read_submessage_format+0xee>
 801140c:	69e2      	ldr	r2, [r4, #28]
 801140e:	2a00      	cmp	r2, #0
 8011410:	d1c5      	bne.n	801139e <read_submessage_format+0x56>
 8011412:	e7c6      	b.n	80113a2 <read_submessage_format+0x5a>
 8011414:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011418:	b13b      	cbz	r3, 801142a <read_submessage_format+0xe2>
 801141a:	a906      	add	r1, sp, #24
 801141c:	a80c      	add	r0, sp, #48	@ 0x30
 801141e:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8011422:	f002 fe13 	bl	801404c <uxr_deserialize_BaseObjectRequest>
 8011426:	bb60      	cbnz	r0, 8011482 <read_submessage_format+0x13a>
 8011428:	69e2      	ldr	r2, [r4, #28]
 801142a:	68a3      	ldr	r3, [r4, #8]
 801142c:	442b      	add	r3, r5
 801142e:	60a3      	str	r3, [r4, #8]
 8011430:	2a00      	cmp	r2, #0
 8011432:	d1b4      	bne.n	801139e <read_submessage_format+0x56>
 8011434:	e7b5      	b.n	80113a2 <read_submessage_format+0x5a>
 8011436:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801143a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801143c:	1a52      	subs	r2, r2, r1
 801143e:	eba8 0803 	sub.w	r8, r8, r3
 8011442:	a80c      	add	r0, sp, #48	@ 0x30
 8011444:	f7fa fc7a 	bl	800bd3c <ucdr_init_buffer>
 8011448:	44a8      	add	r8, r5
 801144a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801144e:	a80c      	add	r0, sp, #48	@ 0x30
 8011450:	f7fa fc48 	bl	800bce4 <ucdr_set_on_full_buffer_callback>
 8011454:	fa1f f888 	uxth.w	r8, r8
 8011458:	ab0c      	add	r3, sp, #48	@ 0x30
 801145a:	9300      	str	r3, [sp, #0]
 801145c:	f8cd 8004 	str.w	r8, [sp, #4]
 8011460:	2108      	movs	r1, #8
 8011462:	f88d 1016 	strb.w	r1, [sp, #22]
 8011466:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 801146a:	9102      	str	r1, [sp, #8]
 801146c:	ab06      	add	r3, sp, #24
 801146e:	4632      	mov	r2, r6
 8011470:	9905      	ldr	r1, [sp, #20]
 8011472:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 8011476:	4638      	mov	r0, r7
 8011478:	47b0      	blx	r6
 801147a:	2301      	movs	r3, #1
 801147c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8011480:	e7c4      	b.n	801140c <read_submessage_format+0xc4>
 8011482:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8011486:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011488:	1a52      	subs	r2, r2, r1
 801148a:	a80c      	add	r0, sp, #48	@ 0x30
 801148c:	eba8 0803 	sub.w	r8, r8, r3
 8011490:	f7fa fc54 	bl	800bd3c <ucdr_init_buffer>
 8011494:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8011498:	a80c      	add	r0, sp, #48	@ 0x30
 801149a:	f7fa fc23 	bl	800bce4 <ucdr_set_on_full_buffer_callback>
 801149e:	ab0c      	add	r3, sp, #48	@ 0x30
 80114a0:	9300      	str	r3, [sp, #0]
 80114a2:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80114a6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80114aa:	44a8      	add	r8, r5
 80114ac:	fa1f f888 	uxth.w	r8, r8
 80114b0:	f8cd 8004 	str.w	r8, [sp, #4]
 80114b4:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80114b8:	2107      	movs	r1, #7
 80114ba:	f88d 1016 	strb.w	r1, [sp, #22]
 80114be:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 80114c2:	9102      	str	r1, [sp, #8]
 80114c4:	4632      	mov	r2, r6
 80114c6:	b29b      	uxth	r3, r3
 80114c8:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 80114cc:	9905      	ldr	r1, [sp, #20]
 80114ce:	4638      	mov	r0, r7
 80114d0:	47b0      	blx	r6
 80114d2:	2301      	movs	r3, #1
 80114d4:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 80114d8:	e7a6      	b.n	8011428 <read_submessage_format+0xe0>
 80114da:	bf00      	nop

080114dc <on_get_fragmentation_info>:
 80114dc:	b500      	push	{lr}
 80114de:	b08b      	sub	sp, #44	@ 0x2c
 80114e0:	4601      	mov	r1, r0
 80114e2:	2204      	movs	r2, #4
 80114e4:	a802      	add	r0, sp, #8
 80114e6:	f7fa fc29 	bl	800bd3c <ucdr_init_buffer>
 80114ea:	f10d 0305 	add.w	r3, sp, #5
 80114ee:	f10d 0206 	add.w	r2, sp, #6
 80114f2:	a901      	add	r1, sp, #4
 80114f4:	a802      	add	r0, sp, #8
 80114f6:	f001 fe91 	bl	801321c <uxr_read_submessage_header>
 80114fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80114fe:	2b0d      	cmp	r3, #13
 8011500:	d003      	beq.n	801150a <on_get_fragmentation_info+0x2e>
 8011502:	2000      	movs	r0, #0
 8011504:	b00b      	add	sp, #44	@ 0x2c
 8011506:	f85d fb04 	ldr.w	pc, [sp], #4
 801150a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801150e:	f013 0f02 	tst.w	r3, #2
 8011512:	bf14      	ite	ne
 8011514:	2002      	movne	r0, #2
 8011516:	2001      	moveq	r0, #1
 8011518:	b00b      	add	sp, #44	@ 0x2c
 801151a:	f85d fb04 	ldr.w	pc, [sp], #4
 801151e:	bf00      	nop

08011520 <read_submessage_get_info>:
 8011520:	b570      	push	{r4, r5, r6, lr}
 8011522:	2500      	movs	r5, #0
 8011524:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8011528:	4604      	mov	r4, r0
 801152a:	f44f 7224 	mov.w	r2, #656	@ 0x290
 801152e:	460e      	mov	r6, r1
 8011530:	a810      	add	r0, sp, #64	@ 0x40
 8011532:	4629      	mov	r1, r5
 8011534:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8011538:	f008 f96c 	bl	8019814 <memset>
 801153c:	a903      	add	r1, sp, #12
 801153e:	4630      	mov	r0, r6
 8011540:	f002 ff40 	bl	80143c4 <uxr_deserialize_GET_INFO_Payload>
 8011544:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8011548:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801154c:	4620      	mov	r0, r4
 801154e:	f001 f849 	bl	80125e4 <uxr_session_header_offset>
 8011552:	462b      	mov	r3, r5
 8011554:	9000      	str	r0, [sp, #0]
 8011556:	220c      	movs	r2, #12
 8011558:	a905      	add	r1, sp, #20
 801155a:	a808      	add	r0, sp, #32
 801155c:	f7fa fbdc 	bl	800bd18 <ucdr_init_buffer_origin_offset>
 8011560:	a910      	add	r1, sp, #64	@ 0x40
 8011562:	a808      	add	r0, sp, #32
 8011564:	f002 ffa0 	bl	80144a8 <uxr_serialize_INFO_Payload>
 8011568:	9b08      	ldr	r3, [sp, #32]
 801156a:	462a      	mov	r2, r5
 801156c:	4629      	mov	r1, r5
 801156e:	4620      	mov	r0, r4
 8011570:	f000 ffe2 	bl	8012538 <uxr_stamp_session_header>
 8011574:	a808      	add	r0, sp, #32
 8011576:	f7fa fc0d 	bl	800bd94 <ucdr_buffer_length>
 801157a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801157c:	4602      	mov	r2, r0
 801157e:	a905      	add	r1, sp, #20
 8011580:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011584:	47a0      	blx	r4
 8011586:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 801158a:	bd70      	pop	{r4, r5, r6, pc}

0801158c <write_submessage_acknack.isra.0>:
 801158c:	b570      	push	{r4, r5, r6, lr}
 801158e:	b092      	sub	sp, #72	@ 0x48
 8011590:	4605      	mov	r5, r0
 8011592:	460e      	mov	r6, r1
 8011594:	4614      	mov	r4, r2
 8011596:	f001 f825 	bl	80125e4 <uxr_session_header_offset>
 801159a:	a905      	add	r1, sp, #20
 801159c:	9000      	str	r0, [sp, #0]
 801159e:	2300      	movs	r3, #0
 80115a0:	a80a      	add	r0, sp, #40	@ 0x28
 80115a2:	2211      	movs	r2, #17
 80115a4:	f7fa fbb8 	bl	800bd18 <ucdr_init_buffer_origin_offset>
 80115a8:	2218      	movs	r2, #24
 80115aa:	fb02 5404 	mla	r4, r2, r4, r5
 80115ae:	2300      	movs	r3, #0
 80115b0:	2205      	movs	r2, #5
 80115b2:	3450      	adds	r4, #80	@ 0x50
 80115b4:	210a      	movs	r1, #10
 80115b6:	a80a      	add	r0, sp, #40	@ 0x28
 80115b8:	f001 fe16 	bl	80131e8 <uxr_buffer_submessage_header>
 80115bc:	a903      	add	r1, sp, #12
 80115be:	4620      	mov	r0, r4
 80115c0:	f006 fd18 	bl	8017ff4 <uxr_compute_acknack>
 80115c4:	ba40      	rev16	r0, r0
 80115c6:	f8ad 000e 	strh.w	r0, [sp, #14]
 80115ca:	a903      	add	r1, sp, #12
 80115cc:	a80a      	add	r0, sp, #40	@ 0x28
 80115ce:	f88d 6010 	strb.w	r6, [sp, #16]
 80115d2:	f002 ffd9 	bl	8014588 <uxr_serialize_ACKNACK_Payload>
 80115d6:	2200      	movs	r2, #0
 80115d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80115da:	4611      	mov	r1, r2
 80115dc:	4628      	mov	r0, r5
 80115de:	f000 ffab 	bl	8012538 <uxr_stamp_session_header>
 80115e2:	a80a      	add	r0, sp, #40	@ 0x28
 80115e4:	f7fa fbd6 	bl	800bd94 <ucdr_buffer_length>
 80115e8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80115ea:	4602      	mov	r2, r0
 80115ec:	a905      	add	r1, sp, #20
 80115ee:	e9d3 0400 	ldrd	r0, r4, [r3]
 80115f2:	47a0      	blx	r4
 80115f4:	b012      	add	sp, #72	@ 0x48
 80115f6:	bd70      	pop	{r4, r5, r6, pc}

080115f8 <uxr_init_session>:
 80115f8:	b510      	push	{r4, lr}
 80115fa:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8011630 <uxr_init_session+0x38>
 80115fe:	2300      	movs	r3, #0
 8011600:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8011604:	4604      	mov	r4, r0
 8011606:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 801160a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 801160e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8011612:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8011616:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 801161a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 801161e:	2181      	movs	r1, #129	@ 0x81
 8011620:	f000 fef6 	bl	8012410 <uxr_init_session_info>
 8011624:	f104 0008 	add.w	r0, r4, #8
 8011628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801162c:	f001 bcf8 	b.w	8013020 <uxr_init_stream_storage>
	...

08011638 <uxr_set_status_callback>:
 8011638:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 801163c:	4770      	bx	lr
 801163e:	bf00      	nop

08011640 <uxr_set_topic_callback>:
 8011640:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8011644:	4770      	bx	lr
 8011646:	bf00      	nop

08011648 <uxr_set_request_callback>:
 8011648:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 801164c:	4770      	bx	lr
 801164e:	bf00      	nop

08011650 <uxr_set_reply_callback>:
 8011650:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8011654:	4770      	bx	lr
 8011656:	bf00      	nop

08011658 <uxr_create_output_best_effort_stream>:
 8011658:	b510      	push	{r4, lr}
 801165a:	b084      	sub	sp, #16
 801165c:	e9cd 2100 	strd	r2, r1, [sp]
 8011660:	4604      	mov	r4, r0
 8011662:	f000 ffbf 	bl	80125e4 <uxr_session_header_offset>
 8011666:	e9dd 2100 	ldrd	r2, r1, [sp]
 801166a:	4603      	mov	r3, r0
 801166c:	f104 0008 	add.w	r0, r4, #8
 8011670:	b004      	add	sp, #16
 8011672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011676:	f001 bd1d 	b.w	80130b4 <uxr_add_output_best_effort_buffer>
 801167a:	bf00      	nop

0801167c <uxr_create_output_reliable_stream>:
 801167c:	b510      	push	{r4, lr}
 801167e:	b088      	sub	sp, #32
 8011680:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8011684:	4604      	mov	r4, r0
 8011686:	9303      	str	r3, [sp, #12]
 8011688:	f000 ffac 	bl	80125e4 <uxr_session_header_offset>
 801168c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8011690:	9000      	str	r0, [sp, #0]
 8011692:	9905      	ldr	r1, [sp, #20]
 8011694:	f104 0008 	add.w	r0, r4, #8
 8011698:	f001 fd20 	bl	80130dc <uxr_add_output_reliable_buffer>
 801169c:	2200      	movs	r2, #0
 801169e:	b2c3      	uxtb	r3, r0
 80116a0:	f363 0207 	bfi	r2, r3, #0, #8
 80116a4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80116a8:	f363 220f 	bfi	r2, r3, #8, #8
 80116ac:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80116b0:	f363 4217 	bfi	r2, r3, #16, #8
 80116b4:	0e03      	lsrs	r3, r0, #24
 80116b6:	f363 621f 	bfi	r2, r3, #24, #8
 80116ba:	4610      	mov	r0, r2
 80116bc:	b008      	add	sp, #32
 80116be:	bd10      	pop	{r4, pc}

080116c0 <uxr_create_input_best_effort_stream>:
 80116c0:	b082      	sub	sp, #8
 80116c2:	3008      	adds	r0, #8
 80116c4:	b002      	add	sp, #8
 80116c6:	f001 bd23 	b.w	8013110 <uxr_add_input_best_effort_buffer>
 80116ca:	bf00      	nop

080116cc <uxr_create_input_reliable_stream>:
 80116cc:	b510      	push	{r4, lr}
 80116ce:	b084      	sub	sp, #16
 80116d0:	4c0b      	ldr	r4, [pc, #44]	@ (8011700 <uxr_create_input_reliable_stream+0x34>)
 80116d2:	9400      	str	r4, [sp, #0]
 80116d4:	3008      	adds	r0, #8
 80116d6:	f001 fd31 	bl	801313c <uxr_add_input_reliable_buffer>
 80116da:	2200      	movs	r2, #0
 80116dc:	b2c3      	uxtb	r3, r0
 80116de:	f363 0207 	bfi	r2, r3, #0, #8
 80116e2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80116e6:	f363 220f 	bfi	r2, r3, #8, #8
 80116ea:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80116ee:	f363 4217 	bfi	r2, r3, #16, #8
 80116f2:	0e03      	lsrs	r3, r0, #24
 80116f4:	f363 621f 	bfi	r2, r3, #24, #8
 80116f8:	4610      	mov	r0, r2
 80116fa:	b004      	add	sp, #16
 80116fc:	bd10      	pop	{r4, pc}
 80116fe:	bf00      	nop
 8011700:	080114dd 	.word	0x080114dd

08011704 <uxr_epoch_nanos>:
 8011704:	b510      	push	{r4, lr}
 8011706:	4604      	mov	r4, r0
 8011708:	f001 fdce 	bl	80132a8 <uxr_nanos>
 801170c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8011710:	1ac0      	subs	r0, r0, r3
 8011712:	eb61 0102 	sbc.w	r1, r1, r2
 8011716:	bd10      	pop	{r4, pc}

08011718 <uxr_flash_output_streams>:
 8011718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801171c:	7e03      	ldrb	r3, [r0, #24]
 801171e:	b084      	sub	sp, #16
 8011720:	4604      	mov	r4, r0
 8011722:	2b00      	cmp	r3, #0
 8011724:	d035      	beq.n	8011792 <uxr_flash_output_streams+0x7a>
 8011726:	f04f 0900 	mov.w	r9, #0
 801172a:	4648      	mov	r0, r9
 801172c:	f10d 0802 	add.w	r8, sp, #2
 8011730:	af03      	add	r7, sp, #12
 8011732:	ae02      	add	r6, sp, #8
 8011734:	e006      	b.n	8011744 <uxr_flash_output_streams+0x2c>
 8011736:	7e23      	ldrb	r3, [r4, #24]
 8011738:	f109 0901 	add.w	r9, r9, #1
 801173c:	fa5f f089 	uxtb.w	r0, r9
 8011740:	4283      	cmp	r3, r0
 8011742:	d926      	bls.n	8011792 <uxr_flash_output_streams+0x7a>
 8011744:	2201      	movs	r2, #1
 8011746:	4611      	mov	r1, r2
 8011748:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 801174c:	f001 fc14 	bl	8012f78 <uxr_stream_id>
 8011750:	3508      	adds	r5, #8
 8011752:	4684      	mov	ip, r0
 8011754:	4643      	mov	r3, r8
 8011756:	463a      	mov	r2, r7
 8011758:	4631      	mov	r1, r6
 801175a:	4628      	mov	r0, r5
 801175c:	f8cd c004 	str.w	ip, [sp, #4]
 8011760:	f006 fcce 	bl	8018100 <uxr_prepare_best_effort_buffer_to_send>
 8011764:	2800      	cmp	r0, #0
 8011766:	d0e6      	beq.n	8011736 <uxr_flash_output_streams+0x1e>
 8011768:	9b02      	ldr	r3, [sp, #8]
 801176a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801176e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8011772:	4620      	mov	r0, r4
 8011774:	f000 fee0 	bl	8012538 <uxr_stamp_session_header>
 8011778:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801177a:	9a03      	ldr	r2, [sp, #12]
 801177c:	685d      	ldr	r5, [r3, #4]
 801177e:	6818      	ldr	r0, [r3, #0]
 8011780:	9902      	ldr	r1, [sp, #8]
 8011782:	47a8      	blx	r5
 8011784:	f109 0901 	add.w	r9, r9, #1
 8011788:	7e23      	ldrb	r3, [r4, #24]
 801178a:	fa5f f089 	uxtb.w	r0, r9
 801178e:	4283      	cmp	r3, r0
 8011790:	d8d8      	bhi.n	8011744 <uxr_flash_output_streams+0x2c>
 8011792:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8011796:	b38b      	cbz	r3, 80117fc <uxr_flash_output_streams+0xe4>
 8011798:	f04f 0900 	mov.w	r9, #0
 801179c:	f10d 0802 	add.w	r8, sp, #2
 80117a0:	af03      	add	r7, sp, #12
 80117a2:	ae02      	add	r6, sp, #8
 80117a4:	4648      	mov	r0, r9
 80117a6:	2201      	movs	r2, #1
 80117a8:	2102      	movs	r1, #2
 80117aa:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 80117ae:	f001 fbe3 	bl	8012f78 <uxr_stream_id>
 80117b2:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80117b6:	3520      	adds	r5, #32
 80117b8:	9001      	str	r0, [sp, #4]
 80117ba:	e00d      	b.n	80117d8 <uxr_flash_output_streams+0xc0>
 80117bc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80117c0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80117c4:	9b02      	ldr	r3, [sp, #8]
 80117c6:	f000 feb7 	bl	8012538 <uxr_stamp_session_header>
 80117ca:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80117cc:	9a03      	ldr	r2, [sp, #12]
 80117ce:	f8d3 a004 	ldr.w	sl, [r3, #4]
 80117d2:	9902      	ldr	r1, [sp, #8]
 80117d4:	6818      	ldr	r0, [r3, #0]
 80117d6:	47d0      	blx	sl
 80117d8:	4643      	mov	r3, r8
 80117da:	463a      	mov	r2, r7
 80117dc:	4631      	mov	r1, r6
 80117de:	4628      	mov	r0, r5
 80117e0:	f006 feac 	bl	801853c <uxr_prepare_next_reliable_buffer_to_send>
 80117e4:	4603      	mov	r3, r0
 80117e6:	4620      	mov	r0, r4
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d1e7      	bne.n	80117bc <uxr_flash_output_streams+0xa4>
 80117ec:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80117f0:	f109 0901 	add.w	r9, r9, #1
 80117f4:	fa5f f089 	uxtb.w	r0, r9
 80117f8:	4283      	cmp	r3, r0
 80117fa:	d8d4      	bhi.n	80117a6 <uxr_flash_output_streams+0x8e>
 80117fc:	b004      	add	sp, #16
 80117fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011802:	bf00      	nop

08011804 <read_submessage_info>:
 8011804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011808:	460d      	mov	r5, r1
 801180a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 801180e:	4669      	mov	r1, sp
 8011810:	4607      	mov	r7, r0
 8011812:	4628      	mov	r0, r5
 8011814:	f002 fcd0 	bl	80141b8 <uxr_deserialize_BaseObjectReply>
 8011818:	a902      	add	r1, sp, #8
 801181a:	4604      	mov	r4, r0
 801181c:	4628      	mov	r0, r5
 801181e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8011822:	f7f8 ff91 	bl	800a748 <ucdr_deserialize_bool>
 8011826:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801182a:	4004      	ands	r4, r0
 801182c:	b2e4      	uxtb	r4, r4
 801182e:	b95b      	cbnz	r3, 8011848 <read_submessage_info+0x44>
 8011830:	a987      	add	r1, sp, #540	@ 0x21c
 8011832:	4628      	mov	r0, r5
 8011834:	f7f8 ff88 	bl	800a748 <ucdr_deserialize_bool>
 8011838:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 801183c:	4606      	mov	r6, r0
 801183e:	b94b      	cbnz	r3, 8011854 <read_submessage_info+0x50>
 8011840:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8011844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011848:	a903      	add	r1, sp, #12
 801184a:	4628      	mov	r0, r5
 801184c:	f002 fb5c 	bl	8013f08 <uxr_deserialize_ObjectVariant>
 8011850:	4004      	ands	r4, r0
 8011852:	e7ed      	b.n	8011830 <read_submessage_info+0x2c>
 8011854:	a988      	add	r1, sp, #544	@ 0x220
 8011856:	4628      	mov	r0, r5
 8011858:	f7f8 ffa4 	bl	800a7a4 <ucdr_deserialize_uint8_t>
 801185c:	4234      	tst	r4, r6
 801185e:	d0ef      	beq.n	8011840 <read_submessage_info+0x3c>
 8011860:	2800      	cmp	r0, #0
 8011862:	d0ed      	beq.n	8011840 <read_submessage_info+0x3c>
 8011864:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8011868:	2b0d      	cmp	r3, #13
 801186a:	d1e9      	bne.n	8011840 <read_submessage_info+0x3c>
 801186c:	a98a      	add	r1, sp, #552	@ 0x228
 801186e:	4628      	mov	r0, r5
 8011870:	f7f9 fd3e 	bl	800b2f0 <ucdr_deserialize_int16_t>
 8011874:	b140      	cbz	r0, 8011888 <read_submessage_info+0x84>
 8011876:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 801187a:	2b00      	cmp	r3, #0
 801187c:	dd07      	ble.n	801188e <read_submessage_info+0x8a>
 801187e:	f1b8 0f00 	cmp.w	r8, #0
 8011882:	bf14      	ite	ne
 8011884:	2001      	movne	r0, #1
 8011886:	2002      	moveq	r0, #2
 8011888:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 801188c:	e7d8      	b.n	8011840 <read_submessage_info+0x3c>
 801188e:	2000      	movs	r0, #0
 8011890:	e7fa      	b.n	8011888 <read_submessage_info+0x84>
 8011892:	bf00      	nop

08011894 <read_submessage_list>:
 8011894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011898:	b097      	sub	sp, #92	@ 0x5c
 801189a:	4ec1      	ldr	r6, [pc, #772]	@ (8011ba0 <read_submessage_list+0x30c>)
 801189c:	9209      	str	r2, [sp, #36]	@ 0x24
 801189e:	4604      	mov	r4, r0
 80118a0:	460d      	mov	r5, r1
 80118a2:	f04f 0801 	mov.w	r8, #1
 80118a6:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 80118aa:	aa0c      	add	r2, sp, #48	@ 0x30
 80118ac:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 80118b0:	4628      	mov	r0, r5
 80118b2:	f001 fcb3 	bl	801321c <uxr_read_submessage_header>
 80118b6:	2800      	cmp	r0, #0
 80118b8:	f000 813e 	beq.w	8011b38 <read_submessage_list+0x2a4>
 80118bc:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 80118c0:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 80118c4:	3b02      	subs	r3, #2
 80118c6:	2b0d      	cmp	r3, #13
 80118c8:	d8ed      	bhi.n	80118a6 <read_submessage_list+0x12>
 80118ca:	a101      	add	r1, pc, #4	@ (adr r1, 80118d0 <read_submessage_list+0x3c>)
 80118cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80118d0:	08011b2f 	.word	0x08011b2f
 80118d4:	080118a7 	.word	0x080118a7
 80118d8:	08011b1f 	.word	0x08011b1f
 80118dc:	08011abd 	.word	0x08011abd
 80118e0:	08011ab3 	.word	0x08011ab3
 80118e4:	080118a7 	.word	0x080118a7
 80118e8:	080118a7 	.word	0x080118a7
 80118ec:	08011a13 	.word	0x08011a13
 80118f0:	080119a3 	.word	0x080119a3
 80118f4:	08011963 	.word	0x08011963
 80118f8:	080118a7 	.word	0x080118a7
 80118fc:	080118a7 	.word	0x080118a7
 8011900:	080118a7 	.word	0x080118a7
 8011904:	08011909 	.word	0x08011909
 8011908:	a910      	add	r1, sp, #64	@ 0x40
 801190a:	4628      	mov	r0, r5
 801190c:	f002 fe8c 	bl	8014628 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8011910:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 8011914:	f1b9 0f00 	cmp.w	r9, #0
 8011918:	f000 8116 	beq.w	8011b48 <read_submessage_list+0x2b4>
 801191c:	f001 fcc4 	bl	80132a8 <uxr_nanos>
 8011920:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8011922:	4602      	mov	r2, r0
 8011924:	460b      	mov	r3, r1
 8011926:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8011928:	2100      	movs	r1, #0
 801192a:	468c      	mov	ip, r1
 801192c:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8011930:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8011934:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8011936:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8011938:	468c      	mov	ip, r1
 801193a:	fbc0 7c06 	smlal	r7, ip, r0, r6
 801193e:	46e2      	mov	sl, ip
 8011940:	46bc      	mov	ip, r7
 8011942:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 8011946:	fbc0 7106 	smlal	r7, r1, r0, r6
 801194a:	e9cd ca02 	strd	ip, sl, [sp, #8]
 801194e:	e9cd 7100 	strd	r7, r1, [sp]
 8011952:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8011956:	9106      	str	r1, [sp, #24]
 8011958:	4620      	mov	r0, r4
 801195a:	47c8      	blx	r9
 801195c:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 8011960:	e7a1      	b.n	80118a6 <read_submessage_list+0x12>
 8011962:	a910      	add	r1, sp, #64	@ 0x40
 8011964:	4628      	mov	r0, r5
 8011966:	f002 fe4d 	bl	8014604 <uxr_deserialize_HEARTBEAT_Payload>
 801196a:	2100      	movs	r1, #0
 801196c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8011970:	f001 fb2c 	bl	8012fcc <uxr_stream_id_from_raw>
 8011974:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8011978:	900f      	str	r0, [sp, #60]	@ 0x3c
 801197a:	4639      	mov	r1, r7
 801197c:	f104 0008 	add.w	r0, r4, #8
 8011980:	f001 fc12 	bl	80131a8 <uxr_get_input_reliable_stream>
 8011984:	2800      	cmp	r0, #0
 8011986:	d08e      	beq.n	80118a6 <read_submessage_list+0x12>
 8011988:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 801198c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8011990:	f006 fb24 	bl	8017fdc <uxr_process_heartbeat>
 8011994:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8011998:	463a      	mov	r2, r7
 801199a:	4620      	mov	r0, r4
 801199c:	f7ff fdf6 	bl	801158c <write_submessage_acknack.isra.0>
 80119a0:	e781      	b.n	80118a6 <read_submessage_list+0x12>
 80119a2:	a910      	add	r1, sp, #64	@ 0x40
 80119a4:	4628      	mov	r0, r5
 80119a6:	f002 fe05 	bl	80145b4 <uxr_deserialize_ACKNACK_Payload>
 80119aa:	2100      	movs	r1, #0
 80119ac:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 80119b0:	f001 fb0c 	bl	8012fcc <uxr_stream_id_from_raw>
 80119b4:	900d      	str	r0, [sp, #52]	@ 0x34
 80119b6:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80119ba:	f104 0008 	add.w	r0, r4, #8
 80119be:	f001 fbdf 	bl	8013180 <uxr_get_output_reliable_stream>
 80119c2:	4607      	mov	r7, r0
 80119c4:	2800      	cmp	r0, #0
 80119c6:	f43f af6e 	beq.w	80118a6 <read_submessage_list+0x12>
 80119ca:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 80119ce:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 80119d2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 80119d6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80119da:	b289      	uxth	r1, r1
 80119dc:	f006 fe58 	bl	8018690 <uxr_process_acknack>
 80119e0:	4638      	mov	r0, r7
 80119e2:	f006 fe15 	bl	8018610 <uxr_begin_output_nack_buffer_it>
 80119e6:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 80119ea:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 80119ee:	e006      	b.n	80119fe <read_submessage_list+0x16a>
 80119f0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80119f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80119f4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80119f8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80119fa:	6818      	ldr	r0, [r3, #0]
 80119fc:	47c8      	blx	r9
 80119fe:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8011a02:	aa0f      	add	r2, sp, #60	@ 0x3c
 8011a04:	4651      	mov	r1, sl
 8011a06:	4638      	mov	r0, r7
 8011a08:	f006 fe04 	bl	8018614 <uxr_next_reliable_nack_buffer_to_send>
 8011a0c:	2800      	cmp	r0, #0
 8011a0e:	d1ef      	bne.n	80119f0 <read_submessage_list+0x15c>
 8011a10:	e749      	b.n	80118a6 <read_submessage_list+0x12>
 8011a12:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8011a16:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8011a1a:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8011a1e:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8011a22:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8011a26:	4651      	mov	r1, sl
 8011a28:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8011a2c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 8011a30:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8011a34:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8011a38:	4628      	mov	r0, r5
 8011a3a:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8011a3e:	f002 fb05 	bl	801404c <uxr_deserialize_BaseObjectRequest>
 8011a42:	4650      	mov	r0, sl
 8011a44:	a90f      	add	r1, sp, #60	@ 0x3c
 8011a46:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8011a4a:	f000 fdf1 	bl	8012630 <uxr_parse_base_object_request>
 8011a4e:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8011a52:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011a54:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8011a58:	9110      	str	r1, [sp, #64]	@ 0x40
 8011a5a:	3f04      	subs	r7, #4
 8011a5c:	f009 090e 	and.w	r9, r9, #14
 8011a60:	b2bf      	uxth	r7, r7
 8011a62:	f1bb 0f00 	cmp.w	fp, #0
 8011a66:	d006      	beq.n	8011a76 <read_submessage_list+0x1e2>
 8011a68:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8011a6c:	9300      	str	r3, [sp, #0]
 8011a6e:	4652      	mov	r2, sl
 8011a70:	2300      	movs	r3, #0
 8011a72:	4620      	mov	r0, r4
 8011a74:	47d8      	blx	fp
 8011a76:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8011a78:	b16a      	cbz	r2, 8011a96 <read_submessage_list+0x202>
 8011a7a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8011a7c:	2100      	movs	r1, #0
 8011a7e:	3802      	subs	r0, #2
 8011a80:	e002      	b.n	8011a88 <read_submessage_list+0x1f4>
 8011a82:	3101      	adds	r1, #1
 8011a84:	4291      	cmp	r1, r2
 8011a86:	d006      	beq.n	8011a96 <read_submessage_list+0x202>
 8011a88:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8011a8c:	4553      	cmp	r3, sl
 8011a8e:	d1f8      	bne.n	8011a82 <read_submessage_list+0x1ee>
 8011a90:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8011a92:	2200      	movs	r2, #0
 8011a94:	545a      	strb	r2, [r3, r1]
 8011a96:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8011a9a:	9102      	str	r1, [sp, #8]
 8011a9c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011a9e:	9101      	str	r1, [sp, #4]
 8011aa0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8011aa2:	9100      	str	r1, [sp, #0]
 8011aa4:	464b      	mov	r3, r9
 8011aa6:	463a      	mov	r2, r7
 8011aa8:	4629      	mov	r1, r5
 8011aaa:	4620      	mov	r0, r4
 8011aac:	f7ff fc4c 	bl	8011348 <read_submessage_format>
 8011ab0:	e6f9      	b.n	80118a6 <read_submessage_list+0x12>
 8011ab2:	4629      	mov	r1, r5
 8011ab4:	4620      	mov	r0, r4
 8011ab6:	f7ff fea5 	bl	8011804 <read_submessage_info>
 8011aba:	e6f4      	b.n	80118a6 <read_submessage_list+0x12>
 8011abc:	2a00      	cmp	r2, #0
 8011abe:	d03e      	beq.n	8011b3e <read_submessage_list+0x2aa>
 8011ac0:	a910      	add	r1, sp, #64	@ 0x40
 8011ac2:	4628      	mov	r0, r5
 8011ac4:	f002 fcd2 	bl	801446c <uxr_deserialize_STATUS_Payload>
 8011ac8:	a90e      	add	r1, sp, #56	@ 0x38
 8011aca:	aa0d      	add	r2, sp, #52	@ 0x34
 8011acc:	a810      	add	r0, sp, #64	@ 0x40
 8011ace:	f000 fdaf 	bl	8012630 <uxr_parse_base_object_request>
 8011ad2:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8011ad6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011ad8:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8011adc:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8011ae0:	910f      	str	r1, [sp, #60]	@ 0x3c
 8011ae2:	f1ba 0f00 	cmp.w	sl, #0
 8011ae6:	d006      	beq.n	8011af6 <read_submessage_list+0x262>
 8011ae8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8011aec:	9300      	str	r3, [sp, #0]
 8011aee:	463a      	mov	r2, r7
 8011af0:	464b      	mov	r3, r9
 8011af2:	4620      	mov	r0, r4
 8011af4:	47d0      	blx	sl
 8011af6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8011af8:	2a00      	cmp	r2, #0
 8011afa:	f43f aed4 	beq.w	80118a6 <read_submessage_list+0x12>
 8011afe:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8011b00:	2100      	movs	r1, #0
 8011b02:	3802      	subs	r0, #2
 8011b04:	e003      	b.n	8011b0e <read_submessage_list+0x27a>
 8011b06:	3101      	adds	r1, #1
 8011b08:	4291      	cmp	r1, r2
 8011b0a:	f43f aecc 	beq.w	80118a6 <read_submessage_list+0x12>
 8011b0e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8011b12:	42bb      	cmp	r3, r7
 8011b14:	d1f7      	bne.n	8011b06 <read_submessage_list+0x272>
 8011b16:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8011b18:	f803 9001 	strb.w	r9, [r3, r1]
 8011b1c:	e6c3      	b.n	80118a6 <read_submessage_list+0x12>
 8011b1e:	2a00      	cmp	r2, #0
 8011b20:	f47f aec1 	bne.w	80118a6 <read_submessage_list+0x12>
 8011b24:	4629      	mov	r1, r5
 8011b26:	4620      	mov	r0, r4
 8011b28:	f000 fcc8 	bl	80124bc <uxr_read_create_session_status>
 8011b2c:	e6bb      	b.n	80118a6 <read_submessage_list+0x12>
 8011b2e:	4629      	mov	r1, r5
 8011b30:	4620      	mov	r0, r4
 8011b32:	f7ff fcf5 	bl	8011520 <read_submessage_get_info>
 8011b36:	e6b6      	b.n	80118a6 <read_submessage_list+0x12>
 8011b38:	b017      	add	sp, #92	@ 0x5c
 8011b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b3e:	4629      	mov	r1, r5
 8011b40:	4620      	mov	r0, r4
 8011b42:	f000 fcc7 	bl	80124d4 <uxr_read_delete_session_status>
 8011b46:	e6ae      	b.n	80118a6 <read_submessage_list+0x12>
 8011b48:	f001 fbae 	bl	80132a8 <uxr_nanos>
 8011b4c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011b4e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8011b50:	464f      	mov	r7, r9
 8011b52:	fbc3 2706 	smlal	r2, r7, r3, r6
 8011b56:	1812      	adds	r2, r2, r0
 8011b58:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011b5a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8011b5c:	eb47 0101 	adc.w	r1, r7, r1
 8011b60:	464f      	mov	r7, r9
 8011b62:	fbc3 0706 	smlal	r0, r7, r3, r6
 8011b66:	463b      	mov	r3, r7
 8011b68:	4684      	mov	ip, r0
 8011b6a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 8011b6e:	fbc7 0906 	smlal	r0, r9, r7, r6
 8011b72:	eb1c 0c00 	adds.w	ip, ip, r0
 8011b76:	464f      	mov	r7, r9
 8011b78:	eb43 0307 	adc.w	r3, r3, r7
 8011b7c:	ebb2 0c0c 	subs.w	ip, r2, ip
 8011b80:	eb61 0303 	sbc.w	r3, r1, r3
 8011b84:	0fda      	lsrs	r2, r3, #31
 8011b86:	eb12 020c 	adds.w	r2, r2, ip
 8011b8a:	f143 0300 	adc.w	r3, r3, #0
 8011b8e:	0852      	lsrs	r2, r2, #1
 8011b90:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8011b94:	105b      	asrs	r3, r3, #1
 8011b96:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 8011b9a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8011b9e:	e6dd      	b.n	801195c <read_submessage_list+0xc8>
 8011ba0:	3b9aca00 	.word	0x3b9aca00

08011ba4 <listen_message_reliably>:
 8011ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ba8:	1e0b      	subs	r3, r1, #0
 8011baa:	b09d      	sub	sp, #116	@ 0x74
 8011bac:	bfb8      	it	lt
 8011bae:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8011bb2:	4680      	mov	r8, r0
 8011bb4:	9305      	str	r3, [sp, #20]
 8011bb6:	f001 fb5d 	bl	8013274 <uxr_millis>
 8011bba:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 8011bbe:	4681      	mov	r9, r0
 8011bc0:	2a00      	cmp	r2, #0
 8011bc2:	f000 80a1 	beq.w	8011d08 <listen_message_reliably+0x164>
 8011bc6:	2600      	movs	r6, #0
 8011bc8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011bcc:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8011bd0:	9303      	str	r3, [sp, #12]
 8011bd2:	4630      	mov	r0, r6
 8011bd4:	460f      	mov	r7, r1
 8011bd6:	e00f      	b.n	8011bf8 <listen_message_reliably+0x54>
 8011bd8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8011bdc:	9903      	ldr	r1, [sp, #12]
 8011bde:	455a      	cmp	r2, fp
 8011be0:	f106 0601 	add.w	r6, r6, #1
 8011be4:	eb73 0101 	sbcs.w	r1, r3, r1
 8011be8:	b2f0      	uxtb	r0, r6
 8011bea:	da01      	bge.n	8011bf0 <listen_message_reliably+0x4c>
 8011bec:	4693      	mov	fp, r2
 8011bee:	9303      	str	r3, [sp, #12]
 8011bf0:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8011bf4:	4283      	cmp	r3, r0
 8011bf6:	d960      	bls.n	8011cba <listen_message_reliably+0x116>
 8011bf8:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8011bfc:	2102      	movs	r1, #2
 8011bfe:	2201      	movs	r2, #1
 8011c00:	f001 f9ba 	bl	8012f78 <uxr_stream_id>
 8011c04:	00e4      	lsls	r4, r4, #3
 8011c06:	f104 0520 	add.w	r5, r4, #32
 8011c0a:	4445      	add	r5, r8
 8011c0c:	4601      	mov	r1, r0
 8011c0e:	463b      	mov	r3, r7
 8011c10:	464a      	mov	r2, r9
 8011c12:	4628      	mov	r0, r5
 8011c14:	9109      	str	r1, [sp, #36]	@ 0x24
 8011c16:	f006 fcd1 	bl	80185bc <uxr_update_output_stream_heartbeat_timestamp>
 8011c1a:	eb08 0304 	add.w	r3, r8, r4
 8011c1e:	2800      	cmp	r0, #0
 8011c20:	d0da      	beq.n	8011bd8 <listen_message_reliably+0x34>
 8011c22:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8011c26:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8011c2a:	9304      	str	r3, [sp, #16]
 8011c2c:	4640      	mov	r0, r8
 8011c2e:	f000 fcd9 	bl	80125e4 <uxr_session_header_offset>
 8011c32:	3501      	adds	r5, #1
 8011c34:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8011c38:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8011c3c:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8011c40:	2300      	movs	r3, #0
 8011c42:	2211      	movs	r2, #17
 8011c44:	9000      	str	r0, [sp, #0]
 8011c46:	a90c      	add	r1, sp, #48	@ 0x30
 8011c48:	4650      	mov	r0, sl
 8011c4a:	f7fa f865 	bl	800bd18 <ucdr_init_buffer_origin_offset>
 8011c4e:	2300      	movs	r3, #0
 8011c50:	2205      	movs	r2, #5
 8011c52:	210b      	movs	r1, #11
 8011c54:	4650      	mov	r0, sl
 8011c56:	f001 fac7 	bl	80131e8 <uxr_buffer_submessage_header>
 8011c5a:	8968      	ldrh	r0, [r5, #10]
 8011c5c:	2101      	movs	r1, #1
 8011c5e:	f006 fd6f 	bl	8018740 <uxr_seq_num_add>
 8011c62:	892b      	ldrh	r3, [r5, #8]
 8011c64:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8011c68:	4602      	mov	r2, r0
 8011c6a:	9b04      	ldr	r3, [sp, #16]
 8011c6c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8011c70:	a90a      	add	r1, sp, #40	@ 0x28
 8011c72:	4650      	mov	r0, sl
 8011c74:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8011c78:	f002 fcb0 	bl	80145dc <uxr_serialize_HEARTBEAT_Payload>
 8011c7c:	2200      	movs	r2, #0
 8011c7e:	4611      	mov	r1, r2
 8011c80:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011c82:	4640      	mov	r0, r8
 8011c84:	f000 fc58 	bl	8012538 <uxr_stamp_session_header>
 8011c88:	4650      	mov	r0, sl
 8011c8a:	f7fa f883 	bl	800bd94 <ucdr_buffer_length>
 8011c8e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8011c92:	4602      	mov	r2, r0
 8011c94:	a90c      	add	r1, sp, #48	@ 0x30
 8011c96:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011c9a:	4444      	add	r4, r8
 8011c9c:	47a8      	blx	r5
 8011c9e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8011ca2:	9903      	ldr	r1, [sp, #12]
 8011ca4:	455a      	cmp	r2, fp
 8011ca6:	f106 0601 	add.w	r6, r6, #1
 8011caa:	eb73 0101 	sbcs.w	r1, r3, r1
 8011cae:	b2f0      	uxtb	r0, r6
 8011cb0:	db9c      	blt.n	8011bec <listen_message_reliably+0x48>
 8011cb2:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8011cb6:	4283      	cmp	r3, r0
 8011cb8:	d89e      	bhi.n	8011bf8 <listen_message_reliably+0x54>
 8011cba:	9a03      	ldr	r2, [sp, #12]
 8011cbc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011cc0:	429a      	cmp	r2, r3
 8011cc2:	bf08      	it	eq
 8011cc4:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8011cc8:	d01e      	beq.n	8011d08 <listen_message_reliably+0x164>
 8011cca:	ebab 0309 	sub.w	r3, fp, r9
 8011cce:	9905      	ldr	r1, [sp, #20]
 8011cd0:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	bf08      	it	eq
 8011cd8:	2301      	moveq	r3, #1
 8011cda:	4299      	cmp	r1, r3
 8011cdc:	bfa8      	it	ge
 8011cde:	4619      	movge	r1, r3
 8011ce0:	6894      	ldr	r4, [r2, #8]
 8011ce2:	6810      	ldr	r0, [r2, #0]
 8011ce4:	4689      	mov	r9, r1
 8011ce6:	460b      	mov	r3, r1
 8011ce8:	aa08      	add	r2, sp, #32
 8011cea:	a907      	add	r1, sp, #28
 8011cec:	47a0      	blx	r4
 8011cee:	b968      	cbnz	r0, 8011d0c <listen_message_reliably+0x168>
 8011cf0:	9b05      	ldr	r3, [sp, #20]
 8011cf2:	eba3 0309 	sub.w	r3, r3, r9
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	9305      	str	r3, [sp, #20]
 8011cfa:	f73f af5c 	bgt.w	8011bb6 <listen_message_reliably+0x12>
 8011cfe:	4604      	mov	r4, r0
 8011d00:	4620      	mov	r0, r4
 8011d02:	b01d      	add	sp, #116	@ 0x74
 8011d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d08:	9b05      	ldr	r3, [sp, #20]
 8011d0a:	e7e0      	b.n	8011cce <listen_message_reliably+0x12a>
 8011d0c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8011d10:	4604      	mov	r4, r0
 8011d12:	a80c      	add	r0, sp, #48	@ 0x30
 8011d14:	f7fa f812 	bl	800bd3c <ucdr_init_buffer>
 8011d18:	2500      	movs	r5, #0
 8011d1a:	f10d 031a 	add.w	r3, sp, #26
 8011d1e:	aa06      	add	r2, sp, #24
 8011d20:	a90c      	add	r1, sp, #48	@ 0x30
 8011d22:	4640      	mov	r0, r8
 8011d24:	f88d 5018 	strb.w	r5, [sp, #24]
 8011d28:	f000 fc1a 	bl	8012560 <uxr_read_session_header>
 8011d2c:	b918      	cbnz	r0, 8011d36 <listen_message_reliably+0x192>
 8011d2e:	4620      	mov	r0, r4
 8011d30:	b01d      	add	sp, #116	@ 0x74
 8011d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d36:	4629      	mov	r1, r5
 8011d38:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011d3c:	f001 f946 	bl	8012fcc <uxr_stream_id_from_raw>
 8011d40:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8011d44:	2d01      	cmp	r5, #1
 8011d46:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8011d4a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8011d4e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8011d52:	d04b      	beq.n	8011dec <listen_message_reliably+0x248>
 8011d54:	2d02      	cmp	r5, #2
 8011d56:	d00f      	beq.n	8011d78 <listen_message_reliably+0x1d4>
 8011d58:	2d00      	cmp	r5, #0
 8011d5a:	d1e8      	bne.n	8011d2e <listen_message_reliably+0x18a>
 8011d5c:	4629      	mov	r1, r5
 8011d5e:	4628      	mov	r0, r5
 8011d60:	f001 f934 	bl	8012fcc <uxr_stream_id_from_raw>
 8011d64:	a90c      	add	r1, sp, #48	@ 0x30
 8011d66:	4602      	mov	r2, r0
 8011d68:	4640      	mov	r0, r8
 8011d6a:	920a      	str	r2, [sp, #40]	@ 0x28
 8011d6c:	f7ff fd92 	bl	8011894 <read_submessage_list>
 8011d70:	4620      	mov	r0, r4
 8011d72:	b01d      	add	sp, #116	@ 0x74
 8011d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d78:	4631      	mov	r1, r6
 8011d7a:	f108 0008 	add.w	r0, r8, #8
 8011d7e:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8011d82:	f001 fa11 	bl	80131a8 <uxr_get_input_reliable_stream>
 8011d86:	4607      	mov	r7, r0
 8011d88:	b338      	cbz	r0, 8011dda <listen_message_reliably+0x236>
 8011d8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011d8c:	9203      	str	r2, [sp, #12]
 8011d8e:	a80c      	add	r0, sp, #48	@ 0x30
 8011d90:	f7fa f804 	bl	800bd9c <ucdr_buffer_remaining>
 8011d94:	4603      	mov	r3, r0
 8011d96:	f10d 0019 	add.w	r0, sp, #25
 8011d9a:	9000      	str	r0, [sp, #0]
 8011d9c:	9a03      	ldr	r2, [sp, #12]
 8011d9e:	4651      	mov	r1, sl
 8011da0:	4638      	mov	r0, r7
 8011da2:	f006 f821 	bl	8017de8 <uxr_receive_reliable_message>
 8011da6:	b1c0      	cbz	r0, 8011dda <listen_message_reliably+0x236>
 8011da8:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011dac:	b393      	cbz	r3, 8011e14 <listen_message_reliably+0x270>
 8011dae:	ad14      	add	r5, sp, #80	@ 0x50
 8011db0:	f04f 0a02 	mov.w	sl, #2
 8011db4:	e00a      	b.n	8011dcc <listen_message_reliably+0x228>
 8011db6:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8011dba:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8011dbe:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8011dc2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011dc4:	4629      	mov	r1, r5
 8011dc6:	4640      	mov	r0, r8
 8011dc8:	f7ff fd64 	bl	8011894 <read_submessage_list>
 8011dcc:	2204      	movs	r2, #4
 8011dce:	4629      	mov	r1, r5
 8011dd0:	4638      	mov	r0, r7
 8011dd2:	f006 f889 	bl	8017ee8 <uxr_next_input_reliable_buffer_available>
 8011dd6:	2800      	cmp	r0, #0
 8011dd8:	d1ed      	bne.n	8011db6 <listen_message_reliably+0x212>
 8011dda:	4640      	mov	r0, r8
 8011ddc:	4632      	mov	r2, r6
 8011dde:	4649      	mov	r1, r9
 8011de0:	f7ff fbd4 	bl	801158c <write_submessage_acknack.isra.0>
 8011de4:	4620      	mov	r0, r4
 8011de6:	b01d      	add	sp, #116	@ 0x74
 8011de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dec:	4631      	mov	r1, r6
 8011dee:	f108 0008 	add.w	r0, r8, #8
 8011df2:	f001 f9cf 	bl	8013194 <uxr_get_input_best_effort_stream>
 8011df6:	2800      	cmp	r0, #0
 8011df8:	d099      	beq.n	8011d2e <listen_message_reliably+0x18a>
 8011dfa:	4651      	mov	r1, sl
 8011dfc:	f005 ff60 	bl	8017cc0 <uxr_receive_best_effort_message>
 8011e00:	2800      	cmp	r0, #0
 8011e02:	d094      	beq.n	8011d2e <listen_message_reliably+0x18a>
 8011e04:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8011e08:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011e0a:	a90c      	add	r1, sp, #48	@ 0x30
 8011e0c:	4640      	mov	r0, r8
 8011e0e:	f7ff fd41 	bl	8011894 <read_submessage_list>
 8011e12:	e78c      	b.n	8011d2e <listen_message_reliably+0x18a>
 8011e14:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8011e18:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011e1a:	a90c      	add	r1, sp, #48	@ 0x30
 8011e1c:	4640      	mov	r0, r8
 8011e1e:	f7ff fd39 	bl	8011894 <read_submessage_list>
 8011e22:	e7c4      	b.n	8011dae <listen_message_reliably+0x20a>

08011e24 <uxr_run_session_timeout>:
 8011e24:	b570      	push	{r4, r5, r6, lr}
 8011e26:	4604      	mov	r4, r0
 8011e28:	460d      	mov	r5, r1
 8011e2a:	f001 fa23 	bl	8013274 <uxr_millis>
 8011e2e:	4606      	mov	r6, r0
 8011e30:	4620      	mov	r0, r4
 8011e32:	f7ff fc71 	bl	8011718 <uxr_flash_output_streams>
 8011e36:	4629      	mov	r1, r5
 8011e38:	4620      	mov	r0, r4
 8011e3a:	f7ff feb3 	bl	8011ba4 <listen_message_reliably>
 8011e3e:	f001 fa19 	bl	8013274 <uxr_millis>
 8011e42:	1b83      	subs	r3, r0, r6
 8011e44:	1ae9      	subs	r1, r5, r3
 8011e46:	2900      	cmp	r1, #0
 8011e48:	dcf6      	bgt.n	8011e38 <uxr_run_session_timeout+0x14>
 8011e4a:	f104 0008 	add.w	r0, r4, #8
 8011e4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011e52:	f001 b9b3 	b.w	80131bc <uxr_output_streams_confirmed>
 8011e56:	bf00      	nop

08011e58 <uxr_run_session_until_data>:
 8011e58:	b570      	push	{r4, r5, r6, lr}
 8011e5a:	4604      	mov	r4, r0
 8011e5c:	460d      	mov	r5, r1
 8011e5e:	f001 fa09 	bl	8013274 <uxr_millis>
 8011e62:	4606      	mov	r6, r0
 8011e64:	4620      	mov	r0, r4
 8011e66:	f7ff fc57 	bl	8011718 <uxr_flash_output_streams>
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8011e70:	4629      	mov	r1, r5
 8011e72:	e005      	b.n	8011e80 <uxr_run_session_until_data+0x28>
 8011e74:	f001 f9fe 	bl	8013274 <uxr_millis>
 8011e78:	1b83      	subs	r3, r0, r6
 8011e7a:	1ae9      	subs	r1, r5, r3
 8011e7c:	2900      	cmp	r1, #0
 8011e7e:	dd07      	ble.n	8011e90 <uxr_run_session_until_data+0x38>
 8011e80:	4620      	mov	r0, r4
 8011e82:	f7ff fe8f 	bl	8011ba4 <listen_message_reliably>
 8011e86:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8011e8a:	2800      	cmp	r0, #0
 8011e8c:	d0f2      	beq.n	8011e74 <uxr_run_session_until_data+0x1c>
 8011e8e:	bd70      	pop	{r4, r5, r6, pc}
 8011e90:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8011e94:	bd70      	pop	{r4, r5, r6, pc}
 8011e96:	bf00      	nop

08011e98 <uxr_run_session_until_confirm_delivery>:
 8011e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e9c:	4606      	mov	r6, r0
 8011e9e:	460d      	mov	r5, r1
 8011ea0:	f001 f9e8 	bl	8013274 <uxr_millis>
 8011ea4:	4607      	mov	r7, r0
 8011ea6:	4630      	mov	r0, r6
 8011ea8:	f7ff fc36 	bl	8011718 <uxr_flash_output_streams>
 8011eac:	2d00      	cmp	r5, #0
 8011eae:	f106 0808 	add.w	r8, r6, #8
 8011eb2:	bfa8      	it	ge
 8011eb4:	462c      	movge	r4, r5
 8011eb6:	da07      	bge.n	8011ec8 <uxr_run_session_until_confirm_delivery+0x30>
 8011eb8:	e00e      	b.n	8011ed8 <uxr_run_session_until_confirm_delivery+0x40>
 8011eba:	f7ff fe73 	bl	8011ba4 <listen_message_reliably>
 8011ebe:	f001 f9d9 	bl	8013274 <uxr_millis>
 8011ec2:	1bc3      	subs	r3, r0, r7
 8011ec4:	1aec      	subs	r4, r5, r3
 8011ec6:	d407      	bmi.n	8011ed8 <uxr_run_session_until_confirm_delivery+0x40>
 8011ec8:	4640      	mov	r0, r8
 8011eca:	f001 f977 	bl	80131bc <uxr_output_streams_confirmed>
 8011ece:	4603      	mov	r3, r0
 8011ed0:	4621      	mov	r1, r4
 8011ed2:	4630      	mov	r0, r6
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d0f0      	beq.n	8011eba <uxr_run_session_until_confirm_delivery+0x22>
 8011ed8:	4640      	mov	r0, r8
 8011eda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ede:	f001 b96d 	b.w	80131bc <uxr_output_streams_confirmed>
 8011ee2:	bf00      	nop

08011ee4 <uxr_run_session_until_all_status>:
 8011ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ee8:	9c08      	ldr	r4, [sp, #32]
 8011eea:	4606      	mov	r6, r0
 8011eec:	460f      	mov	r7, r1
 8011eee:	4691      	mov	r9, r2
 8011ef0:	461d      	mov	r5, r3
 8011ef2:	f7ff fc11 	bl	8011718 <uxr_flash_output_streams>
 8011ef6:	b124      	cbz	r4, 8011f02 <uxr_run_session_until_all_status+0x1e>
 8011ef8:	4622      	mov	r2, r4
 8011efa:	21ff      	movs	r1, #255	@ 0xff
 8011efc:	4628      	mov	r0, r5
 8011efe:	f007 fc89 	bl	8019814 <memset>
 8011f02:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 8011f06:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8011f08:	f001 f9b4 	bl	8013274 <uxr_millis>
 8011f0c:	3d01      	subs	r5, #1
 8011f0e:	f1a9 0902 	sub.w	r9, r9, #2
 8011f12:	4680      	mov	r8, r0
 8011f14:	4639      	mov	r1, r7
 8011f16:	4630      	mov	r0, r6
 8011f18:	f7ff fe44 	bl	8011ba4 <listen_message_reliably>
 8011f1c:	f001 f9aa 	bl	8013274 <uxr_millis>
 8011f20:	eba0 0008 	sub.w	r0, r0, r8
 8011f24:	1a39      	subs	r1, r7, r0
 8011f26:	b344      	cbz	r4, 8011f7a <uxr_run_session_until_all_status+0x96>
 8011f28:	4628      	mov	r0, r5
 8011f2a:	46ac      	mov	ip, r5
 8011f2c:	2301      	movs	r3, #1
 8011f2e:	e002      	b.n	8011f36 <uxr_run_session_until_all_status+0x52>
 8011f30:	42a3      	cmp	r3, r4
 8011f32:	d20d      	bcs.n	8011f50 <uxr_run_session_until_all_status+0x6c>
 8011f34:	3301      	adds	r3, #1
 8011f36:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 8011f3a:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8011f3e:	d1f7      	bne.n	8011f30 <uxr_run_session_until_all_status+0x4c>
 8011f40:	42a3      	cmp	r3, r4
 8011f42:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 8011f46:	d213      	bcs.n	8011f70 <uxr_run_session_until_all_status+0x8c>
 8011f48:	2a00      	cmp	r2, #0
 8011f4a:	d0f3      	beq.n	8011f34 <uxr_run_session_until_all_status+0x50>
 8011f4c:	2900      	cmp	r1, #0
 8011f4e:	dce2      	bgt.n	8011f16 <uxr_run_session_until_all_status+0x32>
 8011f50:	2300      	movs	r3, #0
 8011f52:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8011f54:	442c      	add	r4, r5
 8011f56:	e001      	b.n	8011f5c <uxr_run_session_until_all_status+0x78>
 8011f58:	2b01      	cmp	r3, #1
 8011f5a:	d812      	bhi.n	8011f82 <uxr_run_session_until_all_status+0x9e>
 8011f5c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8011f60:	4284      	cmp	r4, r0
 8011f62:	d1f9      	bne.n	8011f58 <uxr_run_session_until_all_status+0x74>
 8011f64:	2b01      	cmp	r3, #1
 8011f66:	bf8c      	ite	hi
 8011f68:	2000      	movhi	r0, #0
 8011f6a:	2001      	movls	r0, #1
 8011f6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f70:	2900      	cmp	r1, #0
 8011f72:	dded      	ble.n	8011f50 <uxr_run_session_until_all_status+0x6c>
 8011f74:	2a00      	cmp	r2, #0
 8011f76:	d1ce      	bne.n	8011f16 <uxr_run_session_until_all_status+0x32>
 8011f78:	e7ea      	b.n	8011f50 <uxr_run_session_until_all_status+0x6c>
 8011f7a:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8011f7c:	2001      	movs	r0, #1
 8011f7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f82:	2000      	movs	r0, #0
 8011f84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08011f88 <uxr_run_session_until_pong>:
 8011f88:	b570      	push	{r4, r5, r6, lr}
 8011f8a:	4604      	mov	r4, r0
 8011f8c:	460d      	mov	r5, r1
 8011f8e:	f001 f971 	bl	8013274 <uxr_millis>
 8011f92:	4606      	mov	r6, r0
 8011f94:	4620      	mov	r0, r4
 8011f96:	f7ff fbbf 	bl	8011718 <uxr_flash_output_streams>
 8011f9a:	2300      	movs	r3, #0
 8011f9c:	f884 30b5 	strb.w	r3, [r4, #181]	@ 0xb5
 8011fa0:	4629      	mov	r1, r5
 8011fa2:	e005      	b.n	8011fb0 <uxr_run_session_until_pong+0x28>
 8011fa4:	f001 f966 	bl	8013274 <uxr_millis>
 8011fa8:	1b83      	subs	r3, r0, r6
 8011faa:	1ae9      	subs	r1, r5, r3
 8011fac:	2900      	cmp	r1, #0
 8011fae:	dd0c      	ble.n	8011fca <uxr_run_session_until_pong+0x42>
 8011fb0:	4620      	mov	r0, r4
 8011fb2:	f7ff fdf7 	bl	8011ba4 <listen_message_reliably>
 8011fb6:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 8011fba:	2800      	cmp	r0, #0
 8011fbc:	d0f2      	beq.n	8011fa4 <uxr_run_session_until_pong+0x1c>
 8011fbe:	f1a0 0001 	sub.w	r0, r0, #1
 8011fc2:	fab0 f080 	clz	r0, r0
 8011fc6:	0940      	lsrs	r0, r0, #5
 8011fc8:	bd70      	pop	{r4, r5, r6, pc}
 8011fca:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 8011fce:	f1a0 0001 	sub.w	r0, r0, #1
 8011fd2:	fab0 f080 	clz	r0, r0
 8011fd6:	0940      	lsrs	r0, r0, #5
 8011fd8:	bd70      	pop	{r4, r5, r6, pc}
 8011fda:	bf00      	nop

08011fdc <wait_session_status>:
 8011fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fe0:	4604      	mov	r4, r0
 8011fe2:	b09d      	sub	sp, #116	@ 0x74
 8011fe4:	20ff      	movs	r0, #255	@ 0xff
 8011fe6:	7160      	strb	r0, [r4, #5]
 8011fe8:	9303      	str	r3, [sp, #12]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	f000 80b6 	beq.w	801215c <wait_session_status+0x180>
 8011ff0:	468a      	mov	sl, r1
 8011ff2:	4691      	mov	r9, r2
 8011ff4:	f04f 0b00 	mov.w	fp, #0
 8011ff8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011ffa:	464a      	mov	r2, r9
 8011ffc:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012000:	4651      	mov	r1, sl
 8012002:	47a8      	blx	r5
 8012004:	f001 f936 	bl	8013274 <uxr_millis>
 8012008:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801200c:	4605      	mov	r5, r0
 801200e:	e009      	b.n	8012024 <wait_session_status+0x48>
 8012010:	f001 f930 	bl	8013274 <uxr_millis>
 8012014:	1b40      	subs	r0, r0, r5
 8012016:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801201a:	2b00      	cmp	r3, #0
 801201c:	dd40      	ble.n	80120a0 <wait_session_status+0xc4>
 801201e:	7960      	ldrb	r0, [r4, #5]
 8012020:	28ff      	cmp	r0, #255	@ 0xff
 8012022:	d145      	bne.n	80120b0 <wait_session_status+0xd4>
 8012024:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8012026:	a908      	add	r1, sp, #32
 8012028:	6896      	ldr	r6, [r2, #8]
 801202a:	6810      	ldr	r0, [r2, #0]
 801202c:	aa09      	add	r2, sp, #36	@ 0x24
 801202e:	47b0      	blx	r6
 8012030:	2800      	cmp	r0, #0
 8012032:	d0ed      	beq.n	8012010 <wait_session_status+0x34>
 8012034:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8012038:	a80c      	add	r0, sp, #48	@ 0x30
 801203a:	f7f9 fe7f 	bl	800bd3c <ucdr_init_buffer>
 801203e:	2600      	movs	r6, #0
 8012040:	f10d 031e 	add.w	r3, sp, #30
 8012044:	aa07      	add	r2, sp, #28
 8012046:	a90c      	add	r1, sp, #48	@ 0x30
 8012048:	4620      	mov	r0, r4
 801204a:	f88d 601c 	strb.w	r6, [sp, #28]
 801204e:	f000 fa87 	bl	8012560 <uxr_read_session_header>
 8012052:	2800      	cmp	r0, #0
 8012054:	d0dc      	beq.n	8012010 <wait_session_status+0x34>
 8012056:	4631      	mov	r1, r6
 8012058:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801205c:	f000 ffb6 	bl	8012fcc <uxr_stream_id_from_raw>
 8012060:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8012064:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8012068:	9302      	str	r3, [sp, #8]
 801206a:	2f01      	cmp	r7, #1
 801206c:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8012070:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8012074:	d05c      	beq.n	8012130 <wait_session_status+0x154>
 8012076:	2f02      	cmp	r7, #2
 8012078:	d020      	beq.n	80120bc <wait_session_status+0xe0>
 801207a:	2f00      	cmp	r7, #0
 801207c:	d1c8      	bne.n	8012010 <wait_session_status+0x34>
 801207e:	4639      	mov	r1, r7
 8012080:	4638      	mov	r0, r7
 8012082:	f000 ffa3 	bl	8012fcc <uxr_stream_id_from_raw>
 8012086:	a90c      	add	r1, sp, #48	@ 0x30
 8012088:	4602      	mov	r2, r0
 801208a:	900b      	str	r0, [sp, #44]	@ 0x2c
 801208c:	4620      	mov	r0, r4
 801208e:	f7ff fc01 	bl	8011894 <read_submessage_list>
 8012092:	f001 f8ef 	bl	8013274 <uxr_millis>
 8012096:	1b40      	subs	r0, r0, r5
 8012098:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801209c:	2b00      	cmp	r3, #0
 801209e:	dcbe      	bgt.n	801201e <wait_session_status+0x42>
 80120a0:	9b03      	ldr	r3, [sp, #12]
 80120a2:	7960      	ldrb	r0, [r4, #5]
 80120a4:	f10b 0b01 	add.w	fp, fp, #1
 80120a8:	455b      	cmp	r3, fp
 80120aa:	d001      	beq.n	80120b0 <wait_session_status+0xd4>
 80120ac:	28ff      	cmp	r0, #255	@ 0xff
 80120ae:	d0a3      	beq.n	8011ff8 <wait_session_status+0x1c>
 80120b0:	38ff      	subs	r0, #255	@ 0xff
 80120b2:	bf18      	it	ne
 80120b4:	2001      	movne	r0, #1
 80120b6:	b01d      	add	sp, #116	@ 0x74
 80120b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120bc:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 80120c0:	9304      	str	r3, [sp, #16]
 80120c2:	4631      	mov	r1, r6
 80120c4:	f104 0008 	add.w	r0, r4, #8
 80120c8:	f001 f86e 	bl	80131a8 <uxr_get_input_reliable_stream>
 80120cc:	4680      	mov	r8, r0
 80120ce:	b348      	cbz	r0, 8012124 <wait_session_status+0x148>
 80120d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80120d2:	9205      	str	r2, [sp, #20]
 80120d4:	a80c      	add	r0, sp, #48	@ 0x30
 80120d6:	f7f9 fe61 	bl	800bd9c <ucdr_buffer_remaining>
 80120da:	4603      	mov	r3, r0
 80120dc:	f10d 001d 	add.w	r0, sp, #29
 80120e0:	9000      	str	r0, [sp, #0]
 80120e2:	9a05      	ldr	r2, [sp, #20]
 80120e4:	9902      	ldr	r1, [sp, #8]
 80120e6:	4640      	mov	r0, r8
 80120e8:	f005 fe7e 	bl	8017de8 <uxr_receive_reliable_message>
 80120ec:	b1d0      	cbz	r0, 8012124 <wait_session_status+0x148>
 80120ee:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d03a      	beq.n	801216c <wait_session_status+0x190>
 80120f6:	9f04      	ldr	r7, [sp, #16]
 80120f8:	e00a      	b.n	8012110 <wait_session_status+0x134>
 80120fa:	f04f 0302 	mov.w	r3, #2
 80120fe:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 8012102:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8012106:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 801210a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801210c:	f7ff fbc2 	bl	8011894 <read_submessage_list>
 8012110:	a914      	add	r1, sp, #80	@ 0x50
 8012112:	2204      	movs	r2, #4
 8012114:	4640      	mov	r0, r8
 8012116:	f005 fee7 	bl	8017ee8 <uxr_next_input_reliable_buffer_available>
 801211a:	4603      	mov	r3, r0
 801211c:	a914      	add	r1, sp, #80	@ 0x50
 801211e:	4620      	mov	r0, r4
 8012120:	2b00      	cmp	r3, #0
 8012122:	d1ea      	bne.n	80120fa <wait_session_status+0x11e>
 8012124:	9904      	ldr	r1, [sp, #16]
 8012126:	4632      	mov	r2, r6
 8012128:	4620      	mov	r0, r4
 801212a:	f7ff fa2f 	bl	801158c <write_submessage_acknack.isra.0>
 801212e:	e76f      	b.n	8012010 <wait_session_status+0x34>
 8012130:	4631      	mov	r1, r6
 8012132:	f104 0008 	add.w	r0, r4, #8
 8012136:	f001 f82d 	bl	8013194 <uxr_get_input_best_effort_stream>
 801213a:	2800      	cmp	r0, #0
 801213c:	f43f af68 	beq.w	8012010 <wait_session_status+0x34>
 8012140:	9902      	ldr	r1, [sp, #8]
 8012142:	f005 fdbd 	bl	8017cc0 <uxr_receive_best_effort_message>
 8012146:	2800      	cmp	r0, #0
 8012148:	f43f af62 	beq.w	8012010 <wait_session_status+0x34>
 801214c:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8012150:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012152:	a90c      	add	r1, sp, #48	@ 0x30
 8012154:	4620      	mov	r0, r4
 8012156:	f7ff fb9d 	bl	8011894 <read_submessage_list>
 801215a:	e759      	b.n	8012010 <wait_session_status+0x34>
 801215c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801215e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8012162:	47a0      	blx	r4
 8012164:	2001      	movs	r0, #1
 8012166:	b01d      	add	sp, #116	@ 0x74
 8012168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801216c:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8012170:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012172:	a90c      	add	r1, sp, #48	@ 0x30
 8012174:	4620      	mov	r0, r4
 8012176:	f7ff fb8d 	bl	8011894 <read_submessage_list>
 801217a:	e7bc      	b.n	80120f6 <wait_session_status+0x11a>

0801217c <uxr_delete_session_retries>:
 801217c:	b530      	push	{r4, r5, lr}
 801217e:	b08f      	sub	sp, #60	@ 0x3c
 8012180:	4604      	mov	r4, r0
 8012182:	460d      	mov	r5, r1
 8012184:	f000 fa2e 	bl	80125e4 <uxr_session_header_offset>
 8012188:	2300      	movs	r3, #0
 801218a:	2210      	movs	r2, #16
 801218c:	9000      	str	r0, [sp, #0]
 801218e:	a902      	add	r1, sp, #8
 8012190:	a806      	add	r0, sp, #24
 8012192:	f7f9 fdc1 	bl	800bd18 <ucdr_init_buffer_origin_offset>
 8012196:	a906      	add	r1, sp, #24
 8012198:	4620      	mov	r0, r4
 801219a:	f000 f973 	bl	8012484 <uxr_buffer_delete_session>
 801219e:	2200      	movs	r2, #0
 80121a0:	4611      	mov	r1, r2
 80121a2:	9b06      	ldr	r3, [sp, #24]
 80121a4:	4620      	mov	r0, r4
 80121a6:	f000 f9c7 	bl	8012538 <uxr_stamp_session_header>
 80121aa:	a806      	add	r0, sp, #24
 80121ac:	f7f9 fdf2 	bl	800bd94 <ucdr_buffer_length>
 80121b0:	462b      	mov	r3, r5
 80121b2:	4602      	mov	r2, r0
 80121b4:	a902      	add	r1, sp, #8
 80121b6:	4620      	mov	r0, r4
 80121b8:	f7ff ff10 	bl	8011fdc <wait_session_status>
 80121bc:	b118      	cbz	r0, 80121c6 <uxr_delete_session_retries+0x4a>
 80121be:	7960      	ldrb	r0, [r4, #5]
 80121c0:	fab0 f080 	clz	r0, r0
 80121c4:	0940      	lsrs	r0, r0, #5
 80121c6:	b00f      	add	sp, #60	@ 0x3c
 80121c8:	bd30      	pop	{r4, r5, pc}
 80121ca:	bf00      	nop

080121cc <uxr_create_session>:
 80121cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121d0:	f100 0b08 	add.w	fp, r0, #8
 80121d4:	b0ab      	sub	sp, #172	@ 0xac
 80121d6:	4604      	mov	r4, r0
 80121d8:	4658      	mov	r0, fp
 80121da:	f000 ff2b 	bl	8013034 <uxr_reset_stream_storage>
 80121de:	4620      	mov	r0, r4
 80121e0:	f000 fa00 	bl	80125e4 <uxr_session_header_offset>
 80121e4:	2300      	movs	r3, #0
 80121e6:	9000      	str	r0, [sp, #0]
 80121e8:	221c      	movs	r2, #28
 80121ea:	a90b      	add	r1, sp, #44	@ 0x2c
 80121ec:	a812      	add	r0, sp, #72	@ 0x48
 80121ee:	f7f9 fd93 	bl	800bd18 <ucdr_init_buffer_origin_offset>
 80121f2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80121f4:	8a1a      	ldrh	r2, [r3, #16]
 80121f6:	3a04      	subs	r2, #4
 80121f8:	b292      	uxth	r2, r2
 80121fa:	a912      	add	r1, sp, #72	@ 0x48
 80121fc:	4620      	mov	r0, r4
 80121fe:	f000 f917 	bl	8012430 <uxr_buffer_create_session>
 8012202:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8012204:	4620      	mov	r0, r4
 8012206:	f000 f983 	bl	8012510 <uxr_stamp_create_session_header>
 801220a:	a812      	add	r0, sp, #72	@ 0x48
 801220c:	f7f9 fdc2 	bl	800bd94 <ucdr_buffer_length>
 8012210:	23ff      	movs	r3, #255	@ 0xff
 8012212:	7163      	strb	r3, [r4, #5]
 8012214:	230a      	movs	r3, #10
 8012216:	46da      	mov	sl, fp
 8012218:	9303      	str	r3, [sp, #12]
 801221a:	4683      	mov	fp, r0
 801221c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801221e:	465a      	mov	r2, fp
 8012220:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012224:	a90b      	add	r1, sp, #44	@ 0x2c
 8012226:	47a8      	blx	r5
 8012228:	f001 f824 	bl	8013274 <uxr_millis>
 801222c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8012230:	4605      	mov	r5, r0
 8012232:	e009      	b.n	8012248 <uxr_create_session+0x7c>
 8012234:	f001 f81e 	bl	8013274 <uxr_millis>
 8012238:	1b40      	subs	r0, r0, r5
 801223a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801223e:	2b00      	cmp	r3, #0
 8012240:	7962      	ldrb	r2, [r4, #5]
 8012242:	dd38      	ble.n	80122b6 <uxr_create_session+0xea>
 8012244:	2aff      	cmp	r2, #255	@ 0xff
 8012246:	d13c      	bne.n	80122c2 <uxr_create_session+0xf6>
 8012248:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801224a:	a907      	add	r1, sp, #28
 801224c:	6896      	ldr	r6, [r2, #8]
 801224e:	6810      	ldr	r0, [r2, #0]
 8012250:	aa08      	add	r2, sp, #32
 8012252:	47b0      	blx	r6
 8012254:	2800      	cmp	r0, #0
 8012256:	d0ed      	beq.n	8012234 <uxr_create_session+0x68>
 8012258:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801225c:	a81a      	add	r0, sp, #104	@ 0x68
 801225e:	f7f9 fd6d 	bl	800bd3c <ucdr_init_buffer>
 8012262:	2600      	movs	r6, #0
 8012264:	f10d 031a 	add.w	r3, sp, #26
 8012268:	aa06      	add	r2, sp, #24
 801226a:	a91a      	add	r1, sp, #104	@ 0x68
 801226c:	4620      	mov	r0, r4
 801226e:	f88d 6018 	strb.w	r6, [sp, #24]
 8012272:	f000 f975 	bl	8012560 <uxr_read_session_header>
 8012276:	2800      	cmp	r0, #0
 8012278:	d0dc      	beq.n	8012234 <uxr_create_session+0x68>
 801227a:	4631      	mov	r1, r6
 801227c:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8012280:	f000 fea4 	bl	8012fcc <uxr_stream_id_from_raw>
 8012284:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8012288:	2e01      	cmp	r6, #1
 801228a:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 801228e:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 8012292:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8012296:	d053      	beq.n	8012340 <uxr_create_session+0x174>
 8012298:	2e02      	cmp	r6, #2
 801229a:	d018      	beq.n	80122ce <uxr_create_session+0x102>
 801229c:	2e00      	cmp	r6, #0
 801229e:	d1c9      	bne.n	8012234 <uxr_create_session+0x68>
 80122a0:	4631      	mov	r1, r6
 80122a2:	4630      	mov	r0, r6
 80122a4:	f000 fe92 	bl	8012fcc <uxr_stream_id_from_raw>
 80122a8:	a91a      	add	r1, sp, #104	@ 0x68
 80122aa:	4602      	mov	r2, r0
 80122ac:	900a      	str	r0, [sp, #40]	@ 0x28
 80122ae:	4620      	mov	r0, r4
 80122b0:	f7ff faf0 	bl	8011894 <read_submessage_list>
 80122b4:	e7be      	b.n	8012234 <uxr_create_session+0x68>
 80122b6:	9b03      	ldr	r3, [sp, #12]
 80122b8:	3b01      	subs	r3, #1
 80122ba:	9303      	str	r3, [sp, #12]
 80122bc:	d001      	beq.n	80122c2 <uxr_create_session+0xf6>
 80122be:	2aff      	cmp	r2, #255	@ 0xff
 80122c0:	d0ac      	beq.n	801221c <uxr_create_session+0x50>
 80122c2:	2a00      	cmp	r2, #0
 80122c4:	d051      	beq.n	801236a <uxr_create_session+0x19e>
 80122c6:	2000      	movs	r0, #0
 80122c8:	b02b      	add	sp, #172	@ 0xac
 80122ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122ce:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80122d2:	9304      	str	r3, [sp, #16]
 80122d4:	4639      	mov	r1, r7
 80122d6:	4650      	mov	r0, sl
 80122d8:	f000 ff66 	bl	80131a8 <uxr_get_input_reliable_stream>
 80122dc:	4680      	mov	r8, r0
 80122de:	b348      	cbz	r0, 8012334 <uxr_create_session+0x168>
 80122e0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80122e2:	9205      	str	r2, [sp, #20]
 80122e4:	a81a      	add	r0, sp, #104	@ 0x68
 80122e6:	f7f9 fd59 	bl	800bd9c <ucdr_buffer_remaining>
 80122ea:	4603      	mov	r3, r0
 80122ec:	f10d 0019 	add.w	r0, sp, #25
 80122f0:	9000      	str	r0, [sp, #0]
 80122f2:	9a05      	ldr	r2, [sp, #20]
 80122f4:	4649      	mov	r1, r9
 80122f6:	4640      	mov	r0, r8
 80122f8:	f005 fd76 	bl	8017de8 <uxr_receive_reliable_message>
 80122fc:	b1d0      	cbz	r0, 8012334 <uxr_create_session+0x168>
 80122fe:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8012302:	2b00      	cmp	r3, #0
 8012304:	d038      	beq.n	8012378 <uxr_create_session+0x1ac>
 8012306:	9e04      	ldr	r6, [sp, #16]
 8012308:	e00a      	b.n	8012320 <uxr_create_session+0x154>
 801230a:	f04f 0302 	mov.w	r3, #2
 801230e:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 8012312:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 8012316:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801231a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801231c:	f7ff faba 	bl	8011894 <read_submessage_list>
 8012320:	a922      	add	r1, sp, #136	@ 0x88
 8012322:	2204      	movs	r2, #4
 8012324:	4640      	mov	r0, r8
 8012326:	f005 fddf 	bl	8017ee8 <uxr_next_input_reliable_buffer_available>
 801232a:	4603      	mov	r3, r0
 801232c:	a922      	add	r1, sp, #136	@ 0x88
 801232e:	4620      	mov	r0, r4
 8012330:	2b00      	cmp	r3, #0
 8012332:	d1ea      	bne.n	801230a <uxr_create_session+0x13e>
 8012334:	9904      	ldr	r1, [sp, #16]
 8012336:	463a      	mov	r2, r7
 8012338:	4620      	mov	r0, r4
 801233a:	f7ff f927 	bl	801158c <write_submessage_acknack.isra.0>
 801233e:	e779      	b.n	8012234 <uxr_create_session+0x68>
 8012340:	4639      	mov	r1, r7
 8012342:	4650      	mov	r0, sl
 8012344:	f000 ff26 	bl	8013194 <uxr_get_input_best_effort_stream>
 8012348:	2800      	cmp	r0, #0
 801234a:	f43f af73 	beq.w	8012234 <uxr_create_session+0x68>
 801234e:	4649      	mov	r1, r9
 8012350:	f005 fcb6 	bl	8017cc0 <uxr_receive_best_effort_message>
 8012354:	2800      	cmp	r0, #0
 8012356:	f43f af6d 	beq.w	8012234 <uxr_create_session+0x68>
 801235a:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 801235e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012360:	a91a      	add	r1, sp, #104	@ 0x68
 8012362:	4620      	mov	r0, r4
 8012364:	f7ff fa96 	bl	8011894 <read_submessage_list>
 8012368:	e764      	b.n	8012234 <uxr_create_session+0x68>
 801236a:	4650      	mov	r0, sl
 801236c:	f000 fe62 	bl	8013034 <uxr_reset_stream_storage>
 8012370:	2001      	movs	r0, #1
 8012372:	b02b      	add	sp, #172	@ 0xac
 8012374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012378:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 801237c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801237e:	a91a      	add	r1, sp, #104	@ 0x68
 8012380:	4620      	mov	r0, r4
 8012382:	f7ff fa87 	bl	8011894 <read_submessage_list>
 8012386:	e7be      	b.n	8012306 <uxr_create_session+0x13a>

08012388 <uxr_prepare_stream_to_write_submessage>:
 8012388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801238c:	b082      	sub	sp, #8
 801238e:	4682      	mov	sl, r0
 8012390:	4610      	mov	r0, r2
 8012392:	4615      	mov	r5, r2
 8012394:	461e      	mov	r6, r3
 8012396:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 801239a:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 801239e:	9101      	str	r1, [sp, #4]
 80123a0:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80123a4:	f000 ff60 	bl	8013268 <uxr_submessage_padding>
 80123a8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80123ac:	f105 0904 	add.w	r9, r5, #4
 80123b0:	2b01      	cmp	r3, #1
 80123b2:	4481      	add	r9, r0
 80123b4:	d01d      	beq.n	80123f2 <uxr_prepare_stream_to_write_submessage+0x6a>
 80123b6:	2b02      	cmp	r3, #2
 80123b8:	d116      	bne.n	80123e8 <uxr_prepare_stream_to_write_submessage+0x60>
 80123ba:	4621      	mov	r1, r4
 80123bc:	f10a 0008 	add.w	r0, sl, #8
 80123c0:	f000 fede 	bl	8013180 <uxr_get_output_reliable_stream>
 80123c4:	4604      	mov	r4, r0
 80123c6:	b158      	cbz	r0, 80123e0 <uxr_prepare_stream_to_write_submessage+0x58>
 80123c8:	4649      	mov	r1, r9
 80123ca:	4632      	mov	r2, r6
 80123cc:	f005 ff48 	bl	8018260 <uxr_prepare_reliable_buffer_to_write>
 80123d0:	4604      	mov	r4, r0
 80123d2:	b12c      	cbz	r4, 80123e0 <uxr_prepare_stream_to_write_submessage+0x58>
 80123d4:	4643      	mov	r3, r8
 80123d6:	b2aa      	uxth	r2, r5
 80123d8:	4639      	mov	r1, r7
 80123da:	4630      	mov	r0, r6
 80123dc:	f000 ff04 	bl	80131e8 <uxr_buffer_submessage_header>
 80123e0:	4620      	mov	r0, r4
 80123e2:	b002      	add	sp, #8
 80123e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123e8:	2400      	movs	r4, #0
 80123ea:	4620      	mov	r0, r4
 80123ec:	b002      	add	sp, #8
 80123ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123f2:	4621      	mov	r1, r4
 80123f4:	f10a 0008 	add.w	r0, sl, #8
 80123f8:	f000 feba 	bl	8013170 <uxr_get_output_best_effort_stream>
 80123fc:	4604      	mov	r4, r0
 80123fe:	2800      	cmp	r0, #0
 8012400:	d0ee      	beq.n	80123e0 <uxr_prepare_stream_to_write_submessage+0x58>
 8012402:	4649      	mov	r1, r9
 8012404:	4632      	mov	r2, r6
 8012406:	f005 fe5b 	bl	80180c0 <uxr_prepare_best_effort_buffer_to_write>
 801240a:	4604      	mov	r4, r0
 801240c:	e7e1      	b.n	80123d2 <uxr_prepare_stream_to_write_submessage+0x4a>
 801240e:	bf00      	nop

08012410 <uxr_init_session_info>:
 8012410:	0e13      	lsrs	r3, r2, #24
 8012412:	7043      	strb	r3, [r0, #1]
 8012414:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8012418:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801241c:	7001      	strb	r1, [r0, #0]
 801241e:	70c3      	strb	r3, [r0, #3]
 8012420:	2109      	movs	r1, #9
 8012422:	23ff      	movs	r3, #255	@ 0xff
 8012424:	f880 c002 	strb.w	ip, [r0, #2]
 8012428:	7102      	strb	r2, [r0, #4]
 801242a:	80c1      	strh	r1, [r0, #6]
 801242c:	7143      	strb	r3, [r0, #5]
 801242e:	4770      	bx	lr

08012430 <uxr_buffer_create_session>:
 8012430:	b530      	push	{r4, r5, lr}
 8012432:	b089      	sub	sp, #36	@ 0x24
 8012434:	2300      	movs	r3, #0
 8012436:	4d12      	ldr	r5, [pc, #72]	@ (8012480 <uxr_buffer_create_session+0x50>)
 8012438:	9307      	str	r3, [sp, #28]
 801243a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801243e:	2201      	movs	r2, #1
 8012440:	9301      	str	r3, [sp, #4]
 8012442:	80c2      	strh	r2, [r0, #6]
 8012444:	f88d 2004 	strb.w	r2, [sp, #4]
 8012448:	682a      	ldr	r2, [r5, #0]
 801244a:	9200      	str	r2, [sp, #0]
 801244c:	88aa      	ldrh	r2, [r5, #4]
 801244e:	f8ad 2006 	strh.w	r2, [sp, #6]
 8012452:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8012456:	9202      	str	r2, [sp, #8]
 8012458:	460c      	mov	r4, r1
 801245a:	7802      	ldrb	r2, [r0, #0]
 801245c:	9303      	str	r3, [sp, #12]
 801245e:	4619      	mov	r1, r3
 8012460:	f88d 200c 	strb.w	r2, [sp, #12]
 8012464:	4620      	mov	r0, r4
 8012466:	2210      	movs	r2, #16
 8012468:	e9cd 3304 	strd	r3, r3, [sp, #16]
 801246c:	9306      	str	r3, [sp, #24]
 801246e:	f000 febb 	bl	80131e8 <uxr_buffer_submessage_header>
 8012472:	4669      	mov	r1, sp
 8012474:	4620      	mov	r0, r4
 8012476:	f001 feff 	bl	8014278 <uxr_serialize_CREATE_CLIENT_Payload>
 801247a:	b009      	add	sp, #36	@ 0x24
 801247c:	bd30      	pop	{r4, r5, pc}
 801247e:	bf00      	nop
 8012480:	0801a6e0 	.word	0x0801a6e0

08012484 <uxr_buffer_delete_session>:
 8012484:	b510      	push	{r4, lr}
 8012486:	4b0c      	ldr	r3, [pc, #48]	@ (80124b8 <uxr_buffer_delete_session+0x34>)
 8012488:	b082      	sub	sp, #8
 801248a:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 801248e:	f8ad c006 	strh.w	ip, [sp, #6]
 8012492:	460c      	mov	r4, r1
 8012494:	2202      	movs	r2, #2
 8012496:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801249a:	80c2      	strh	r2, [r0, #6]
 801249c:	f8ad 3004 	strh.w	r3, [sp, #4]
 80124a0:	2204      	movs	r2, #4
 80124a2:	2300      	movs	r3, #0
 80124a4:	2103      	movs	r1, #3
 80124a6:	4620      	mov	r0, r4
 80124a8:	f000 fe9e 	bl	80131e8 <uxr_buffer_submessage_header>
 80124ac:	a901      	add	r1, sp, #4
 80124ae:	4620      	mov	r0, r4
 80124b0:	f001 ff9c 	bl	80143ec <uxr_serialize_DELETE_Payload>
 80124b4:	b002      	add	sp, #8
 80124b6:	bd10      	pop	{r4, pc}
 80124b8:	0801a6e0 	.word	0x0801a6e0

080124bc <uxr_read_create_session_status>:
 80124bc:	b510      	push	{r4, lr}
 80124be:	b088      	sub	sp, #32
 80124c0:	4604      	mov	r4, r0
 80124c2:	4608      	mov	r0, r1
 80124c4:	a901      	add	r1, sp, #4
 80124c6:	f001 ffa1 	bl	801440c <uxr_deserialize_STATUS_AGENT_Payload>
 80124ca:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80124ce:	7163      	strb	r3, [r4, #5]
 80124d0:	b008      	add	sp, #32
 80124d2:	bd10      	pop	{r4, pc}

080124d4 <uxr_read_delete_session_status>:
 80124d4:	b510      	push	{r4, lr}
 80124d6:	4604      	mov	r4, r0
 80124d8:	b084      	sub	sp, #16
 80124da:	4608      	mov	r0, r1
 80124dc:	a902      	add	r1, sp, #8
 80124de:	f001 ffc5 	bl	801446c <uxr_deserialize_STATUS_Payload>
 80124e2:	88e3      	ldrh	r3, [r4, #6]
 80124e4:	2b02      	cmp	r3, #2
 80124e6:	d001      	beq.n	80124ec <uxr_read_delete_session_status+0x18>
 80124e8:	b004      	add	sp, #16
 80124ea:	bd10      	pop	{r4, pc}
 80124ec:	f10d 000a 	add.w	r0, sp, #10
 80124f0:	f7fe fd9e 	bl	8011030 <uxr_object_id_from_raw>
 80124f4:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80124f8:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80124fc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8012500:	b29b      	uxth	r3, r3
 8012502:	2b02      	cmp	r3, #2
 8012504:	bf04      	itt	eq
 8012506:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 801250a:	7163      	strbeq	r3, [r4, #5]
 801250c:	b004      	add	sp, #16
 801250e:	bd10      	pop	{r4, pc}

08012510 <uxr_stamp_create_session_header>:
 8012510:	b510      	push	{r4, lr}
 8012512:	2208      	movs	r2, #8
 8012514:	b08a      	sub	sp, #40	@ 0x28
 8012516:	4604      	mov	r4, r0
 8012518:	eb0d 0002 	add.w	r0, sp, r2
 801251c:	f7f9 fc0e 	bl	800bd3c <ucdr_init_buffer>
 8012520:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012524:	9400      	str	r4, [sp, #0]
 8012526:	2300      	movs	r3, #0
 8012528:	461a      	mov	r2, r3
 801252a:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 801252e:	a802      	add	r0, sp, #8
 8012530:	f001 f854 	bl	80135dc <uxr_serialize_message_header>
 8012534:	b00a      	add	sp, #40	@ 0x28
 8012536:	bd10      	pop	{r4, pc}

08012538 <uxr_stamp_session_header>:
 8012538:	b530      	push	{r4, r5, lr}
 801253a:	b08d      	sub	sp, #52	@ 0x34
 801253c:	4604      	mov	r4, r0
 801253e:	460d      	mov	r5, r1
 8012540:	9203      	str	r2, [sp, #12]
 8012542:	4619      	mov	r1, r3
 8012544:	a804      	add	r0, sp, #16
 8012546:	2208      	movs	r2, #8
 8012548:	f7f9 fbf8 	bl	800bd3c <ucdr_init_buffer>
 801254c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012550:	9b03      	ldr	r3, [sp, #12]
 8012552:	9400      	str	r4, [sp, #0]
 8012554:	462a      	mov	r2, r5
 8012556:	a804      	add	r0, sp, #16
 8012558:	f001 f840 	bl	80135dc <uxr_serialize_message_header>
 801255c:	b00d      	add	sp, #52	@ 0x34
 801255e:	bd30      	pop	{r4, r5, pc}

08012560 <uxr_read_session_header>:
 8012560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012564:	4607      	mov	r7, r0
 8012566:	b084      	sub	sp, #16
 8012568:	4608      	mov	r0, r1
 801256a:	460c      	mov	r4, r1
 801256c:	4615      	mov	r5, r2
 801256e:	461e      	mov	r6, r3
 8012570:	f7f9 fc14 	bl	800bd9c <ucdr_buffer_remaining>
 8012574:	2808      	cmp	r0, #8
 8012576:	d803      	bhi.n	8012580 <uxr_read_session_header+0x20>
 8012578:	2000      	movs	r0, #0
 801257a:	b004      	add	sp, #16
 801257c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012580:	f10d 080c 	add.w	r8, sp, #12
 8012584:	4633      	mov	r3, r6
 8012586:	462a      	mov	r2, r5
 8012588:	f8cd 8000 	str.w	r8, [sp]
 801258c:	4620      	mov	r0, r4
 801258e:	f10d 010b 	add.w	r1, sp, #11
 8012592:	f001 f841 	bl	8013618 <uxr_deserialize_message_header>
 8012596:	783a      	ldrb	r2, [r7, #0]
 8012598:	f89d 300b 	ldrb.w	r3, [sp, #11]
 801259c:	4293      	cmp	r3, r2
 801259e:	d1eb      	bne.n	8012578 <uxr_read_session_header+0x18>
 80125a0:	061b      	lsls	r3, r3, #24
 80125a2:	d41c      	bmi.n	80125de <uxr_read_session_header+0x7e>
 80125a4:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80125a8:	787b      	ldrb	r3, [r7, #1]
 80125aa:	429a      	cmp	r2, r3
 80125ac:	d003      	beq.n	80125b6 <uxr_read_session_header+0x56>
 80125ae:	2001      	movs	r0, #1
 80125b0:	f080 0001 	eor.w	r0, r0, #1
 80125b4:	e7e1      	b.n	801257a <uxr_read_session_header+0x1a>
 80125b6:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80125ba:	78bb      	ldrb	r3, [r7, #2]
 80125bc:	429a      	cmp	r2, r3
 80125be:	f107 0102 	add.w	r1, r7, #2
 80125c2:	d1f4      	bne.n	80125ae <uxr_read_session_header+0x4e>
 80125c4:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80125c8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80125cc:	429a      	cmp	r2, r3
 80125ce:	d1ee      	bne.n	80125ae <uxr_read_session_header+0x4e>
 80125d0:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80125d4:	784b      	ldrb	r3, [r1, #1]
 80125d6:	429a      	cmp	r2, r3
 80125d8:	d1e9      	bne.n	80125ae <uxr_read_session_header+0x4e>
 80125da:	2000      	movs	r0, #0
 80125dc:	e7e8      	b.n	80125b0 <uxr_read_session_header+0x50>
 80125de:	2001      	movs	r0, #1
 80125e0:	e7cb      	b.n	801257a <uxr_read_session_header+0x1a>
 80125e2:	bf00      	nop

080125e4 <uxr_session_header_offset>:
 80125e4:	f990 3000 	ldrsb.w	r3, [r0]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	bfac      	ite	ge
 80125ec:	2008      	movge	r0, #8
 80125ee:	2004      	movlt	r0, #4
 80125f0:	4770      	bx	lr
 80125f2:	bf00      	nop

080125f4 <uxr_init_base_object_request>:
 80125f4:	b510      	push	{r4, lr}
 80125f6:	88c3      	ldrh	r3, [r0, #6]
 80125f8:	b082      	sub	sp, #8
 80125fa:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 80125fe:	9101      	str	r1, [sp, #4]
 8012600:	f1a3 010a 	sub.w	r1, r3, #10
 8012604:	b289      	uxth	r1, r1
 8012606:	42a1      	cmp	r1, r4
 8012608:	d80e      	bhi.n	8012628 <uxr_init_base_object_request+0x34>
 801260a:	3301      	adds	r3, #1
 801260c:	b29c      	uxth	r4, r3
 801260e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8012612:	b2db      	uxtb	r3, r3
 8012614:	80c4      	strh	r4, [r0, #6]
 8012616:	9801      	ldr	r0, [sp, #4]
 8012618:	7011      	strb	r1, [r2, #0]
 801261a:	7053      	strb	r3, [r2, #1]
 801261c:	1c91      	adds	r1, r2, #2
 801261e:	f7fe fd1b 	bl	8011058 <uxr_object_id_to_raw>
 8012622:	4620      	mov	r0, r4
 8012624:	b002      	add	sp, #8
 8012626:	bd10      	pop	{r4, pc}
 8012628:	230a      	movs	r3, #10
 801262a:	2100      	movs	r1, #0
 801262c:	461c      	mov	r4, r3
 801262e:	e7f1      	b.n	8012614 <uxr_init_base_object_request+0x20>

08012630 <uxr_parse_base_object_request>:
 8012630:	b570      	push	{r4, r5, r6, lr}
 8012632:	4604      	mov	r4, r0
 8012634:	3002      	adds	r0, #2
 8012636:	460d      	mov	r5, r1
 8012638:	4616      	mov	r6, r2
 801263a:	f7fe fcf9 	bl	8011030 <uxr_object_id_from_raw>
 801263e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8012642:	8028      	strh	r0, [r5, #0]
 8012644:	806b      	strh	r3, [r5, #2]
 8012646:	7822      	ldrb	r2, [r4, #0]
 8012648:	7863      	ldrb	r3, [r4, #1]
 801264a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801264e:	8033      	strh	r3, [r6, #0]
 8012650:	bd70      	pop	{r4, r5, r6, pc}
 8012652:	bf00      	nop

08012654 <uxr_init_framing_io>:
 8012654:	2300      	movs	r3, #0
 8012656:	7041      	strb	r1, [r0, #1]
 8012658:	7003      	strb	r3, [r0, #0]
 801265a:	8583      	strh	r3, [r0, #44]	@ 0x2c
 801265c:	4770      	bx	lr
 801265e:	bf00      	nop

08012660 <uxr_write_framed_msg>:
 8012660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012664:	4617      	mov	r7, r2
 8012666:	7842      	ldrb	r2, [r0, #1]
 8012668:	b083      	sub	sp, #12
 801266a:	460e      	mov	r6, r1
 801266c:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8012670:	469a      	mov	sl, r3
 8012672:	2901      	cmp	r1, #1
 8012674:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8012678:	4604      	mov	r4, r0
 801267a:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801267e:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8012682:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8012686:	f240 8137 	bls.w	80128f8 <uxr_write_framed_msg+0x298>
 801268a:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801268e:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8012692:	2901      	cmp	r1, #1
 8012694:	f04f 0202 	mov.w	r2, #2
 8012698:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801269c:	f240 808f 	bls.w	80127be <uxr_write_framed_msg+0x15e>
 80126a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80126a2:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 80126a6:	b2dd      	uxtb	r5, r3
 80126a8:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 80126ac:	2203      	movs	r2, #3
 80126ae:	2901      	cmp	r1, #1
 80126b0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80126b4:	f240 809a 	bls.w	80127ec <uxr_write_framed_msg+0x18c>
 80126b8:	18a1      	adds	r1, r4, r2
 80126ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80126bc:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 80126c0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80126c4:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 80126c8:	3201      	adds	r2, #1
 80126ca:	2801      	cmp	r0, #1
 80126cc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80126d0:	f240 80a0 	bls.w	8012814 <uxr_write_framed_msg+0x1b4>
 80126d4:	18a0      	adds	r0, r4, r2
 80126d6:	3201      	adds	r2, #1
 80126d8:	b2d2      	uxtb	r2, r2
 80126da:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 80126de:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	f000 80a9 	beq.w	801283a <uxr_write_framed_msg+0x1da>
 80126e8:	f04f 0900 	mov.w	r9, #0
 80126ec:	46c8      	mov	r8, r9
 80126ee:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80126f2:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80126f6:	2901      	cmp	r1, #1
 80126f8:	f240 80c3 	bls.w	8012882 <uxr_write_framed_msg+0x222>
 80126fc:	2a29      	cmp	r2, #41	@ 0x29
 80126fe:	f200 809f 	bhi.w	8012840 <uxr_write_framed_msg+0x1e0>
 8012702:	18a1      	adds	r1, r4, r2
 8012704:	3201      	adds	r2, #1
 8012706:	b2d2      	uxtb	r2, r2
 8012708:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 801270c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012710:	ea89 0303 	eor.w	r3, r9, r3
 8012714:	498c      	ldr	r1, [pc, #560]	@ (8012948 <uxr_write_framed_msg+0x2e8>)
 8012716:	b2db      	uxtb	r3, r3
 8012718:	f108 0801 	add.w	r8, r8, #1
 801271c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8012720:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8012724:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012726:	4543      	cmp	r3, r8
 8012728:	d8e1      	bhi.n	80126ee <uxr_write_framed_msg+0x8e>
 801272a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801272e:	fa5f f889 	uxtb.w	r8, r9
 8012732:	9301      	str	r3, [sp, #4]
 8012734:	f04f 0900 	mov.w	r9, #0
 8012738:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 801273c:	fa5f f18a 	uxtb.w	r1, sl
 8012740:	2901      	cmp	r1, #1
 8012742:	d921      	bls.n	8012788 <uxr_write_framed_msg+0x128>
 8012744:	2a29      	cmp	r2, #41	@ 0x29
 8012746:	f240 80af 	bls.w	80128a8 <uxr_write_framed_msg+0x248>
 801274a:	2500      	movs	r5, #0
 801274c:	e000      	b.n	8012750 <uxr_write_framed_msg+0xf0>
 801274e:	b160      	cbz	r0, 801276a <uxr_write_framed_msg+0x10a>
 8012750:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8012754:	1b52      	subs	r2, r2, r5
 8012756:	465b      	mov	r3, fp
 8012758:	4421      	add	r1, r4
 801275a:	4638      	mov	r0, r7
 801275c:	47b0      	blx	r6
 801275e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8012762:	4405      	add	r5, r0
 8012764:	4295      	cmp	r5, r2
 8012766:	d3f2      	bcc.n	801274e <uxr_write_framed_msg+0xee>
 8012768:	d003      	beq.n	8012772 <uxr_write_framed_msg+0x112>
 801276a:	2000      	movs	r0, #0
 801276c:	b003      	add	sp, #12
 801276e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012772:	fa5f f18a 	uxtb.w	r1, sl
 8012776:	f04f 0300 	mov.w	r3, #0
 801277a:	2901      	cmp	r1, #1
 801277c:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8012780:	f04f 0200 	mov.w	r2, #0
 8012784:	f200 8090 	bhi.w	80128a8 <uxr_write_framed_msg+0x248>
 8012788:	1c51      	adds	r1, r2, #1
 801278a:	b2c9      	uxtb	r1, r1
 801278c:	2929      	cmp	r1, #41	@ 0x29
 801278e:	d8dc      	bhi.n	801274a <uxr_write_framed_msg+0xea>
 8012790:	18a5      	adds	r5, r4, r2
 8012792:	4421      	add	r1, r4
 8012794:	3202      	adds	r2, #2
 8012796:	f088 0820 	eor.w	r8, r8, #32
 801279a:	4648      	mov	r0, r9
 801279c:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 80127a0:	b2d2      	uxtb	r2, r2
 80127a2:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 80127a6:	f04f 0901 	mov.w	r9, #1
 80127aa:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 80127ae:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80127b2:	2800      	cmp	r0, #0
 80127b4:	f040 8085 	bne.w	80128c2 <uxr_write_framed_msg+0x262>
 80127b8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80127bc:	e7bc      	b.n	8012738 <uxr_write_framed_msg+0xd8>
 80127be:	4611      	mov	r1, r2
 80127c0:	f04f 0c03 	mov.w	ip, #3
 80127c4:	2204      	movs	r2, #4
 80127c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80127c8:	4421      	add	r1, r4
 80127ca:	b2dd      	uxtb	r5, r3
 80127cc:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 80127d0:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 80127d4:	44a4      	add	ip, r4
 80127d6:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 80127da:	f080 0020 	eor.w	r0, r0, #32
 80127de:	2901      	cmp	r1, #1
 80127e0:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 80127e4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80127e8:	f63f af66 	bhi.w	80126b8 <uxr_write_framed_msg+0x58>
 80127ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80127ee:	18a0      	adds	r0, r4, r2
 80127f0:	f085 0520 	eor.w	r5, r5, #32
 80127f4:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80127f8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80127fc:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8012800:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8012804:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8012808:	3202      	adds	r2, #2
 801280a:	2801      	cmp	r0, #1
 801280c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012810:	f63f af60 	bhi.w	80126d4 <uxr_write_framed_msg+0x74>
 8012814:	1c50      	adds	r0, r2, #1
 8012816:	18a5      	adds	r5, r4, r2
 8012818:	fa54 f080 	uxtab	r0, r4, r0
 801281c:	3202      	adds	r2, #2
 801281e:	f081 0120 	eor.w	r1, r1, #32
 8012822:	b2d2      	uxtb	r2, r2
 8012824:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8012828:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 801282c:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8012830:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012834:	2b00      	cmp	r3, #0
 8012836:	f47f af57 	bne.w	80126e8 <uxr_write_framed_msg+0x88>
 801283a:	9301      	str	r3, [sp, #4]
 801283c:	4698      	mov	r8, r3
 801283e:	e779      	b.n	8012734 <uxr_write_framed_msg+0xd4>
 8012840:	2500      	movs	r5, #0
 8012842:	e001      	b.n	8012848 <uxr_write_framed_msg+0x1e8>
 8012844:	2800      	cmp	r0, #0
 8012846:	d090      	beq.n	801276a <uxr_write_framed_msg+0x10a>
 8012848:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801284c:	1b52      	subs	r2, r2, r5
 801284e:	465b      	mov	r3, fp
 8012850:	4421      	add	r1, r4
 8012852:	4638      	mov	r0, r7
 8012854:	47b0      	blx	r6
 8012856:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801285a:	4405      	add	r5, r0
 801285c:	4295      	cmp	r5, r2
 801285e:	d3f1      	bcc.n	8012844 <uxr_write_framed_msg+0x1e4>
 8012860:	d183      	bne.n	801276a <uxr_write_framed_msg+0x10a>
 8012862:	f04f 0300 	mov.w	r3, #0
 8012866:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801286a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801286c:	4543      	cmp	r3, r8
 801286e:	d964      	bls.n	801293a <uxr_write_framed_msg+0x2da>
 8012870:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8012874:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8012878:	2901      	cmp	r1, #1
 801287a:	f04f 0200 	mov.w	r2, #0
 801287e:	f63f af3d 	bhi.w	80126fc <uxr_write_framed_msg+0x9c>
 8012882:	1c51      	adds	r1, r2, #1
 8012884:	b2c9      	uxtb	r1, r1
 8012886:	2929      	cmp	r1, #41	@ 0x29
 8012888:	d8da      	bhi.n	8012840 <uxr_write_framed_msg+0x1e0>
 801288a:	18a0      	adds	r0, r4, r2
 801288c:	4421      	add	r1, r4
 801288e:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8012892:	3202      	adds	r2, #2
 8012894:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8012898:	b2d2      	uxtb	r2, r2
 801289a:	f083 0020 	eor.w	r0, r3, #32
 801289e:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 80128a2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80128a6:	e733      	b.n	8012710 <uxr_write_framed_msg+0xb0>
 80128a8:	18a1      	adds	r1, r4, r2
 80128aa:	3201      	adds	r2, #1
 80128ac:	4648      	mov	r0, r9
 80128ae:	b2d2      	uxtb	r2, r2
 80128b0:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 80128b4:	f04f 0901 	mov.w	r9, #1
 80128b8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80128bc:	2800      	cmp	r0, #0
 80128be:	f43f af7b 	beq.w	80127b8 <uxr_write_framed_msg+0x158>
 80128c2:	2500      	movs	r5, #0
 80128c4:	e002      	b.n	80128cc <uxr_write_framed_msg+0x26c>
 80128c6:	2800      	cmp	r0, #0
 80128c8:	f43f af4f 	beq.w	801276a <uxr_write_framed_msg+0x10a>
 80128cc:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80128d0:	1b52      	subs	r2, r2, r5
 80128d2:	465b      	mov	r3, fp
 80128d4:	4421      	add	r1, r4
 80128d6:	4638      	mov	r0, r7
 80128d8:	47b0      	blx	r6
 80128da:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80128de:	4405      	add	r5, r0
 80128e0:	4295      	cmp	r5, r2
 80128e2:	d3f0      	bcc.n	80128c6 <uxr_write_framed_msg+0x266>
 80128e4:	f47f af41 	bne.w	801276a <uxr_write_framed_msg+0x10a>
 80128e8:	2300      	movs	r3, #0
 80128ea:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80128ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80128f0:	b298      	uxth	r0, r3
 80128f2:	b003      	add	sp, #12
 80128f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128f8:	217d      	movs	r1, #125	@ 0x7d
 80128fa:	f082 0220 	eor.w	r2, r2, #32
 80128fe:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8012902:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8012906:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 801290a:	2901      	cmp	r1, #1
 801290c:	f04f 0203 	mov.w	r2, #3
 8012910:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012914:	d804      	bhi.n	8012920 <uxr_write_framed_msg+0x2c0>
 8012916:	4611      	mov	r1, r2
 8012918:	f04f 0c04 	mov.w	ip, #4
 801291c:	2205      	movs	r2, #5
 801291e:	e752      	b.n	80127c6 <uxr_write_framed_msg+0x166>
 8012920:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012922:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8012926:	b2dd      	uxtb	r5, r3
 8012928:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801292c:	2204      	movs	r2, #4
 801292e:	2901      	cmp	r1, #1
 8012930:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012934:	f63f aec0 	bhi.w	80126b8 <uxr_write_framed_msg+0x58>
 8012938:	e758      	b.n	80127ec <uxr_write_framed_msg+0x18c>
 801293a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801293e:	fa5f f889 	uxtb.w	r8, r9
 8012942:	9301      	str	r3, [sp, #4]
 8012944:	2200      	movs	r2, #0
 8012946:	e6f5      	b.n	8012734 <uxr_write_framed_msg+0xd4>
 8012948:	0801b3b4 	.word	0x0801b3b4

0801294c <uxr_framing_read_transport>:
 801294c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012950:	4604      	mov	r4, r0
 8012952:	b083      	sub	sp, #12
 8012954:	461f      	mov	r7, r3
 8012956:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 801295a:	4689      	mov	r9, r1
 801295c:	4692      	mov	sl, r2
 801295e:	f000 fc89 	bl	8013274 <uxr_millis>
 8012962:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012966:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 801296a:	42b3      	cmp	r3, r6
 801296c:	4680      	mov	r8, r0
 801296e:	d061      	beq.n	8012a34 <uxr_framing_read_transport+0xe8>
 8012970:	d81c      	bhi.n	80129ac <uxr_framing_read_transport+0x60>
 8012972:	1e75      	subs	r5, r6, #1
 8012974:	1aed      	subs	r5, r5, r3
 8012976:	b2ed      	uxtb	r5, r5
 8012978:	2600      	movs	r6, #0
 801297a:	455d      	cmp	r5, fp
 801297c:	d81f      	bhi.n	80129be <uxr_framing_read_transport+0x72>
 801297e:	19ab      	adds	r3, r5, r6
 8012980:	455b      	cmp	r3, fp
 8012982:	bf84      	itt	hi
 8012984:	ebab 0605 	subhi.w	r6, fp, r5
 8012988:	b2f6      	uxtbhi	r6, r6
 801298a:	b9ed      	cbnz	r5, 80129c8 <uxr_framing_read_transport+0x7c>
 801298c:	f04f 0b00 	mov.w	fp, #0
 8012990:	f000 fc70 	bl	8013274 <uxr_millis>
 8012994:	683b      	ldr	r3, [r7, #0]
 8012996:	eba0 0808 	sub.w	r8, r0, r8
 801299a:	eba3 0308 	sub.w	r3, r3, r8
 801299e:	4658      	mov	r0, fp
 80129a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80129a4:	603b      	str	r3, [r7, #0]
 80129a6:	b003      	add	sp, #12
 80129a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129ac:	2e00      	cmp	r6, #0
 80129ae:	d049      	beq.n	8012a44 <uxr_framing_read_transport+0xf8>
 80129b0:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 80129b4:	b2ed      	uxtb	r5, r5
 80129b6:	3e01      	subs	r6, #1
 80129b8:	455d      	cmp	r5, fp
 80129ba:	b2f6      	uxtb	r6, r6
 80129bc:	d9df      	bls.n	801297e <uxr_framing_read_transport+0x32>
 80129be:	fa5f f58b 	uxtb.w	r5, fp
 80129c2:	2600      	movs	r6, #0
 80129c4:	2d00      	cmp	r5, #0
 80129c6:	d0e1      	beq.n	801298c <uxr_framing_read_transport+0x40>
 80129c8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80129cc:	3102      	adds	r1, #2
 80129ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80129d0:	9300      	str	r3, [sp, #0]
 80129d2:	683b      	ldr	r3, [r7, #0]
 80129d4:	4421      	add	r1, r4
 80129d6:	462a      	mov	r2, r5
 80129d8:	4650      	mov	r0, sl
 80129da:	47c8      	blx	r9
 80129dc:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80129e0:	4a1a      	ldr	r2, [pc, #104]	@ (8012a4c <uxr_framing_read_transport+0x100>)
 80129e2:	4403      	add	r3, r0
 80129e4:	0859      	lsrs	r1, r3, #1
 80129e6:	fba2 2101 	umull	r2, r1, r2, r1
 80129ea:	0889      	lsrs	r1, r1, #2
 80129ec:	222a      	movs	r2, #42	@ 0x2a
 80129ee:	fb02 3111 	mls	r1, r2, r1, r3
 80129f2:	4683      	mov	fp, r0
 80129f4:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 80129f8:	2800      	cmp	r0, #0
 80129fa:	d0c7      	beq.n	801298c <uxr_framing_read_transport+0x40>
 80129fc:	42a8      	cmp	r0, r5
 80129fe:	d1c7      	bne.n	8012990 <uxr_framing_read_transport+0x44>
 8012a00:	2e00      	cmp	r6, #0
 8012a02:	d0c5      	beq.n	8012990 <uxr_framing_read_transport+0x44>
 8012a04:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012a06:	9300      	str	r3, [sp, #0]
 8012a08:	3102      	adds	r1, #2
 8012a0a:	4632      	mov	r2, r6
 8012a0c:	4421      	add	r1, r4
 8012a0e:	2300      	movs	r3, #0
 8012a10:	4650      	mov	r0, sl
 8012a12:	47c8      	blx	r9
 8012a14:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012a18:	4a0c      	ldr	r2, [pc, #48]	@ (8012a4c <uxr_framing_read_transport+0x100>)
 8012a1a:	180b      	adds	r3, r1, r0
 8012a1c:	0859      	lsrs	r1, r3, #1
 8012a1e:	fba2 1201 	umull	r1, r2, r2, r1
 8012a22:	0892      	lsrs	r2, r2, #2
 8012a24:	212a      	movs	r1, #42	@ 0x2a
 8012a26:	fb01 3312 	mls	r3, r1, r2, r3
 8012a2a:	eb00 0b05 	add.w	fp, r0, r5
 8012a2e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8012a32:	e7ad      	b.n	8012990 <uxr_framing_read_transport+0x44>
 8012a34:	2600      	movs	r6, #0
 8012a36:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8012a3a:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8012a3c:	d9bf      	bls.n	80129be <uxr_framing_read_transport+0x72>
 8012a3e:	2102      	movs	r1, #2
 8012a40:	2529      	movs	r5, #41	@ 0x29
 8012a42:	e7c4      	b.n	80129ce <uxr_framing_read_transport+0x82>
 8012a44:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8012a48:	b2ed      	uxtb	r5, r5
 8012a4a:	e796      	b.n	801297a <uxr_framing_read_transport+0x2e>
 8012a4c:	30c30c31 	.word	0x30c30c31

08012a50 <uxr_read_framed_msg>:
 8012a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a54:	461e      	mov	r6, r3
 8012a56:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8012a5a:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8012a5e:	429d      	cmp	r5, r3
 8012a60:	b083      	sub	sp, #12
 8012a62:	4604      	mov	r4, r0
 8012a64:	4688      	mov	r8, r1
 8012a66:	4691      	mov	r9, r2
 8012a68:	f000 8188 	beq.w	8012d7c <uxr_read_framed_msg+0x32c>
 8012a6c:	7823      	ldrb	r3, [r4, #0]
 8012a6e:	4dc1      	ldr	r5, [pc, #772]	@ (8012d74 <uxr_read_framed_msg+0x324>)
 8012a70:	4fc1      	ldr	r7, [pc, #772]	@ (8012d78 <uxr_read_framed_msg+0x328>)
 8012a72:	2b07      	cmp	r3, #7
 8012a74:	d8fd      	bhi.n	8012a72 <uxr_read_framed_msg+0x22>
 8012a76:	e8df f013 	tbh	[pc, r3, lsl #1]
 8012a7a:	0115      	.short	0x0115
 8012a7c:	00d600f6 	.word	0x00d600f6
 8012a80:	009000b9 	.word	0x009000b9
 8012a84:	0030004d 	.word	0x0030004d
 8012a88:	0008      	.short	0x0008
 8012a8a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012a8e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012a92:	4299      	cmp	r1, r3
 8012a94:	f000 814a 	beq.w	8012d2c <uxr_read_framed_msg+0x2dc>
 8012a98:	18e2      	adds	r2, r4, r3
 8012a9a:	7892      	ldrb	r2, [r2, #2]
 8012a9c:	2a7d      	cmp	r2, #125	@ 0x7d
 8012a9e:	f000 8199 	beq.w	8012dd4 <uxr_read_framed_msg+0x384>
 8012aa2:	3301      	adds	r3, #1
 8012aa4:	0858      	lsrs	r0, r3, #1
 8012aa6:	fba5 1000 	umull	r1, r0, r5, r0
 8012aaa:	0880      	lsrs	r0, r0, #2
 8012aac:	212a      	movs	r1, #42	@ 0x2a
 8012aae:	fb01 3310 	mls	r3, r1, r0, r3
 8012ab2:	2a7e      	cmp	r2, #126	@ 0x7e
 8012ab4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012ab8:	f000 8252 	beq.w	8012f60 <uxr_read_framed_msg+0x510>
 8012abc:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8012abe:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8012ac0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8012ac4:	b29b      	uxth	r3, r3
 8012ac6:	2200      	movs	r2, #0
 8012ac8:	4299      	cmp	r1, r3
 8012aca:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8012acc:	7022      	strb	r2, [r4, #0]
 8012ace:	f000 8179 	beq.w	8012dc4 <uxr_read_framed_msg+0x374>
 8012ad2:	2000      	movs	r0, #0
 8012ad4:	b003      	add	sp, #12
 8012ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ada:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012ade:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012ae2:	4299      	cmp	r1, r3
 8012ae4:	f000 8131 	beq.w	8012d4a <uxr_read_framed_msg+0x2fa>
 8012ae8:	18e2      	adds	r2, r4, r3
 8012aea:	7890      	ldrb	r0, [r2, #2]
 8012aec:	287d      	cmp	r0, #125	@ 0x7d
 8012aee:	f000 8190 	beq.w	8012e12 <uxr_read_framed_msg+0x3c2>
 8012af2:	3301      	adds	r3, #1
 8012af4:	085a      	lsrs	r2, r3, #1
 8012af6:	fba5 1202 	umull	r1, r2, r5, r2
 8012afa:	0892      	lsrs	r2, r2, #2
 8012afc:	212a      	movs	r1, #42	@ 0x2a
 8012afe:	fb01 3312 	mls	r3, r1, r2, r3
 8012b02:	287e      	cmp	r0, #126	@ 0x7e
 8012b04:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012b08:	f000 821a 	beq.w	8012f40 <uxr_read_framed_msg+0x4f0>
 8012b0c:	2307      	movs	r3, #7
 8012b0e:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8012b10:	7023      	strb	r3, [r4, #0]
 8012b12:	e7ae      	b.n	8012a72 <uxr_read_framed_msg+0x22>
 8012b14:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8012b16:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8012b1a:	459e      	cmp	lr, r3
 8012b1c:	d938      	bls.n	8012b90 <uxr_read_framed_msg+0x140>
 8012b1e:	ee07 8a90 	vmov	s15, r8
 8012b22:	212a      	movs	r1, #42	@ 0x2a
 8012b24:	e020      	b.n	8012b68 <uxr_read_framed_msg+0x118>
 8012b26:	f89b c002 	ldrb.w	ip, [fp, #2]
 8012b2a:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8012b2e:	f000 80d4 	beq.w	8012cda <uxr_read_framed_msg+0x28a>
 8012b32:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8012b36:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012b3a:	f000 8219 	beq.w	8012f70 <uxr_read_framed_msg+0x520>
 8012b3e:	f806 c003 	strb.w	ip, [r6, r3]
 8012b42:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8012b46:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8012b48:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8012b4c:	ea8a 000c 	eor.w	r0, sl, ip
 8012b50:	b2c0      	uxtb	r0, r0
 8012b52:	3301      	adds	r3, #1
 8012b54:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8012b58:	b29b      	uxth	r3, r3
 8012b5a:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8012b5e:	4573      	cmp	r3, lr
 8012b60:	8663      	strh	r3, [r4, #50]	@ 0x32
 8012b62:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8012b64:	f080 8120 	bcs.w	8012da8 <uxr_read_framed_msg+0x358>
 8012b68:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8012b6c:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8012b70:	f100 0c01 	add.w	ip, r0, #1
 8012b74:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012b78:	fba5 8202 	umull	r8, r2, r5, r2
 8012b7c:	0892      	lsrs	r2, r2, #2
 8012b7e:	4582      	cmp	sl, r0
 8012b80:	eb04 0b00 	add.w	fp, r4, r0
 8012b84:	fb01 c212 	mls	r2, r1, r2, ip
 8012b88:	d1cd      	bne.n	8012b26 <uxr_read_framed_msg+0xd6>
 8012b8a:	ee17 8a90 	vmov	r8, s15
 8012b8e:	459e      	cmp	lr, r3
 8012b90:	f040 8111 	bne.w	8012db6 <uxr_read_framed_msg+0x366>
 8012b94:	2306      	movs	r3, #6
 8012b96:	7023      	strb	r3, [r4, #0]
 8012b98:	e76b      	b.n	8012a72 <uxr_read_framed_msg+0x22>
 8012b9a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8012b9e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012ba2:	4298      	cmp	r0, r3
 8012ba4:	f000 80c2 	beq.w	8012d2c <uxr_read_framed_msg+0x2dc>
 8012ba8:	18e2      	adds	r2, r4, r3
 8012baa:	7891      	ldrb	r1, [r2, #2]
 8012bac:	297d      	cmp	r1, #125	@ 0x7d
 8012bae:	f000 814c 	beq.w	8012e4a <uxr_read_framed_msg+0x3fa>
 8012bb2:	3301      	adds	r3, #1
 8012bb4:	085a      	lsrs	r2, r3, #1
 8012bb6:	fba5 0202 	umull	r0, r2, r5, r2
 8012bba:	0892      	lsrs	r2, r2, #2
 8012bbc:	202a      	movs	r0, #42	@ 0x2a
 8012bbe:	fb00 3312 	mls	r3, r0, r2, r3
 8012bc2:	297e      	cmp	r1, #126	@ 0x7e
 8012bc4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012bc8:	f000 81ca 	beq.w	8012f60 <uxr_read_framed_msg+0x510>
 8012bcc:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8012bce:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8012bd2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012bd4:	b29b      	uxth	r3, r3
 8012bd6:	2000      	movs	r0, #0
 8012bd8:	428b      	cmp	r3, r1
 8012bda:	8623      	strh	r3, [r4, #48]	@ 0x30
 8012bdc:	8660      	strh	r0, [r4, #50]	@ 0x32
 8012bde:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8012be0:	f240 80df 	bls.w	8012da2 <uxr_read_framed_msg+0x352>
 8012be4:	7020      	strb	r0, [r4, #0]
 8012be6:	b003      	add	sp, #12
 8012be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bec:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012bf0:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012bf4:	4299      	cmp	r1, r3
 8012bf6:	f000 80a8 	beq.w	8012d4a <uxr_read_framed_msg+0x2fa>
 8012bfa:	18e2      	adds	r2, r4, r3
 8012bfc:	7890      	ldrb	r0, [r2, #2]
 8012bfe:	287d      	cmp	r0, #125	@ 0x7d
 8012c00:	f000 8164 	beq.w	8012ecc <uxr_read_framed_msg+0x47c>
 8012c04:	3301      	adds	r3, #1
 8012c06:	085a      	lsrs	r2, r3, #1
 8012c08:	fba5 1202 	umull	r1, r2, r5, r2
 8012c0c:	0892      	lsrs	r2, r2, #2
 8012c0e:	212a      	movs	r1, #42	@ 0x2a
 8012c10:	fb01 3312 	mls	r3, r1, r2, r3
 8012c14:	287e      	cmp	r0, #126	@ 0x7e
 8012c16:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012c1a:	f000 8191 	beq.w	8012f40 <uxr_read_framed_msg+0x4f0>
 8012c1e:	2304      	movs	r3, #4
 8012c20:	8620      	strh	r0, [r4, #48]	@ 0x30
 8012c22:	7023      	strb	r3, [r4, #0]
 8012c24:	e725      	b.n	8012a72 <uxr_read_framed_msg+0x22>
 8012c26:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8012c2a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8012c2e:	4290      	cmp	r0, r2
 8012c30:	f000 80b3 	beq.w	8012d9a <uxr_read_framed_msg+0x34a>
 8012c34:	18a3      	adds	r3, r4, r2
 8012c36:	7899      	ldrb	r1, [r3, #2]
 8012c38:	297d      	cmp	r1, #125	@ 0x7d
 8012c3a:	f000 8164 	beq.w	8012f06 <uxr_read_framed_msg+0x4b6>
 8012c3e:	3201      	adds	r2, #1
 8012c40:	0850      	lsrs	r0, r2, #1
 8012c42:	fba5 3000 	umull	r3, r0, r5, r0
 8012c46:	0880      	lsrs	r0, r0, #2
 8012c48:	232a      	movs	r3, #42	@ 0x2a
 8012c4a:	fb03 2210 	mls	r2, r3, r0, r2
 8012c4e:	297e      	cmp	r1, #126	@ 0x7e
 8012c50:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012c54:	f000 8188 	beq.w	8012f68 <uxr_read_framed_msg+0x518>
 8012c58:	7863      	ldrb	r3, [r4, #1]
 8012c5a:	428b      	cmp	r3, r1
 8012c5c:	bf0c      	ite	eq
 8012c5e:	2303      	moveq	r3, #3
 8012c60:	2300      	movne	r3, #0
 8012c62:	7023      	strb	r3, [r4, #0]
 8012c64:	e705      	b.n	8012a72 <uxr_read_framed_msg+0x22>
 8012c66:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012c6a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012c6e:	2200      	movs	r2, #0
 8012c70:	4299      	cmp	r1, r3
 8012c72:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8012c76:	d06c      	beq.n	8012d52 <uxr_read_framed_msg+0x302>
 8012c78:	18e2      	adds	r2, r4, r3
 8012c7a:	7890      	ldrb	r0, [r2, #2]
 8012c7c:	287d      	cmp	r0, #125	@ 0x7d
 8012c7e:	f000 8101 	beq.w	8012e84 <uxr_read_framed_msg+0x434>
 8012c82:	3301      	adds	r3, #1
 8012c84:	085a      	lsrs	r2, r3, #1
 8012c86:	fba5 1202 	umull	r1, r2, r5, r2
 8012c8a:	0892      	lsrs	r2, r2, #2
 8012c8c:	212a      	movs	r1, #42	@ 0x2a
 8012c8e:	fb01 3312 	mls	r3, r1, r2, r3
 8012c92:	287e      	cmp	r0, #126	@ 0x7e
 8012c94:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8012c98:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012c9c:	d059      	beq.n	8012d52 <uxr_read_framed_msg+0x302>
 8012c9e:	2302      	movs	r3, #2
 8012ca0:	7023      	strb	r3, [r4, #0]
 8012ca2:	e6e6      	b.n	8012a72 <uxr_read_framed_msg+0x22>
 8012ca4:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8012ca8:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8012cac:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8012cb0:	1c51      	adds	r1, r2, #1
 8012cb2:	084b      	lsrs	r3, r1, #1
 8012cb4:	fba5 c303 	umull	ip, r3, r5, r3
 8012cb8:	089b      	lsrs	r3, r3, #2
 8012cba:	fb0e 1313 	mls	r3, lr, r3, r1
 8012cbe:	4592      	cmp	sl, r2
 8012cc0:	eb04 0002 	add.w	r0, r4, r2
 8012cc4:	b2da      	uxtb	r2, r3
 8012cc6:	f43f af04 	beq.w	8012ad2 <uxr_read_framed_msg+0x82>
 8012cca:	7883      	ldrb	r3, [r0, #2]
 8012ccc:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012cd0:	2b7e      	cmp	r3, #126	@ 0x7e
 8012cd2:	d1ed      	bne.n	8012cb0 <uxr_read_framed_msg+0x260>
 8012cd4:	2301      	movs	r3, #1
 8012cd6:	7023      	strb	r3, [r4, #0]
 8012cd8:	e6cb      	b.n	8012a72 <uxr_read_framed_msg+0x22>
 8012cda:	f100 0c01 	add.w	ip, r0, #1
 8012cde:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012ce2:	fba5 8202 	umull	r8, r2, r5, r2
 8012ce6:	0892      	lsrs	r2, r2, #2
 8012ce8:	fb01 c212 	mls	r2, r1, r2, ip
 8012cec:	eb04 0c02 	add.w	ip, r4, r2
 8012cf0:	b2d2      	uxtb	r2, r2
 8012cf2:	4592      	cmp	sl, r2
 8012cf4:	f100 0002 	add.w	r0, r0, #2
 8012cf8:	f43f af47 	beq.w	8012b8a <uxr_read_framed_msg+0x13a>
 8012cfc:	0842      	lsrs	r2, r0, #1
 8012cfe:	f89c a002 	ldrb.w	sl, [ip, #2]
 8012d02:	fba5 8202 	umull	r8, r2, r5, r2
 8012d06:	0892      	lsrs	r2, r2, #2
 8012d08:	fb01 0012 	mls	r0, r1, r2, r0
 8012d0c:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8012d10:	f08a 0c20 	eor.w	ip, sl, #32
 8012d14:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8012d18:	f47f af11 	bne.w	8012b3e <uxr_read_framed_msg+0xee>
 8012d1c:	459e      	cmp	lr, r3
 8012d1e:	ee17 8a90 	vmov	r8, s15
 8012d22:	f43f af37 	beq.w	8012b94 <uxr_read_framed_msg+0x144>
 8012d26:	2301      	movs	r3, #1
 8012d28:	7023      	strb	r3, [r4, #0]
 8012d2a:	e6a2      	b.n	8012a72 <uxr_read_framed_msg+0x22>
 8012d2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012d2e:	9300      	str	r3, [sp, #0]
 8012d30:	2301      	movs	r3, #1
 8012d32:	9301      	str	r3, [sp, #4]
 8012d34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012d36:	464a      	mov	r2, r9
 8012d38:	4641      	mov	r1, r8
 8012d3a:	4620      	mov	r0, r4
 8012d3c:	f7ff fe06 	bl	801294c <uxr_framing_read_transport>
 8012d40:	2800      	cmp	r0, #0
 8012d42:	f43f aec6 	beq.w	8012ad2 <uxr_read_framed_msg+0x82>
 8012d46:	7823      	ldrb	r3, [r4, #0]
 8012d48:	e693      	b.n	8012a72 <uxr_read_framed_msg+0x22>
 8012d4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012d4c:	9300      	str	r3, [sp, #0]
 8012d4e:	2302      	movs	r3, #2
 8012d50:	e7ef      	b.n	8012d32 <uxr_read_framed_msg+0x2e2>
 8012d52:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012d54:	9300      	str	r3, [sp, #0]
 8012d56:	2304      	movs	r3, #4
 8012d58:	9301      	str	r3, [sp, #4]
 8012d5a:	464a      	mov	r2, r9
 8012d5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012d5e:	4641      	mov	r1, r8
 8012d60:	4620      	mov	r0, r4
 8012d62:	f7ff fdf3 	bl	801294c <uxr_framing_read_transport>
 8012d66:	2800      	cmp	r0, #0
 8012d68:	d1ed      	bne.n	8012d46 <uxr_read_framed_msg+0x2f6>
 8012d6a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8012d6e:	2b7e      	cmp	r3, #126	@ 0x7e
 8012d70:	d0e9      	beq.n	8012d46 <uxr_read_framed_msg+0x2f6>
 8012d72:	e6ae      	b.n	8012ad2 <uxr_read_framed_msg+0x82>
 8012d74:	30c30c31 	.word	0x30c30c31
 8012d78:	0801b3b4 	.word	0x0801b3b4
 8012d7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012d7e:	9300      	str	r3, [sp, #0]
 8012d80:	2305      	movs	r3, #5
 8012d82:	9301      	str	r3, [sp, #4]
 8012d84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012d86:	f7ff fde1 	bl	801294c <uxr_framing_read_transport>
 8012d8a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8012d8e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012d92:	429a      	cmp	r2, r3
 8012d94:	f43f ae9d 	beq.w	8012ad2 <uxr_read_framed_msg+0x82>
 8012d98:	e668      	b.n	8012a6c <uxr_read_framed_msg+0x1c>
 8012d9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012d9c:	9300      	str	r3, [sp, #0]
 8012d9e:	2303      	movs	r3, #3
 8012da0:	e7c7      	b.n	8012d32 <uxr_read_framed_msg+0x2e2>
 8012da2:	2305      	movs	r3, #5
 8012da4:	7023      	strb	r3, [r4, #0]
 8012da6:	e664      	b.n	8012a72 <uxr_read_framed_msg+0x22>
 8012da8:	ee17 8a90 	vmov	r8, s15
 8012dac:	f43f aef2 	beq.w	8012b94 <uxr_read_framed_msg+0x144>
 8012db0:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8012db4:	d08e      	beq.n	8012cd4 <uxr_read_framed_msg+0x284>
 8012db6:	ebae 0303 	sub.w	r3, lr, r3
 8012dba:	3302      	adds	r3, #2
 8012dbc:	9301      	str	r3, [sp, #4]
 8012dbe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012dc0:	9300      	str	r3, [sp, #0]
 8012dc2:	e7b7      	b.n	8012d34 <uxr_read_framed_msg+0x2e4>
 8012dc4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012dc6:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8012dca:	7013      	strb	r3, [r2, #0]
 8012dcc:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8012dce:	b003      	add	sp, #12
 8012dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012dd4:	f103 0c01 	add.w	ip, r3, #1
 8012dd8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012ddc:	fba5 0202 	umull	r0, r2, r5, r2
 8012de0:	0892      	lsrs	r2, r2, #2
 8012de2:	202a      	movs	r0, #42	@ 0x2a
 8012de4:	fb00 c212 	mls	r2, r0, r2, ip
 8012de8:	fa5f fc82 	uxtb.w	ip, r2
 8012dec:	4561      	cmp	r1, ip
 8012dee:	d09d      	beq.n	8012d2c <uxr_read_framed_msg+0x2dc>
 8012df0:	3302      	adds	r3, #2
 8012df2:	4422      	add	r2, r4
 8012df4:	0859      	lsrs	r1, r3, #1
 8012df6:	7892      	ldrb	r2, [r2, #2]
 8012df8:	fba5 c101 	umull	ip, r1, r5, r1
 8012dfc:	0889      	lsrs	r1, r1, #2
 8012dfe:	fb00 3311 	mls	r3, r0, r1, r3
 8012e02:	2a7e      	cmp	r2, #126	@ 0x7e
 8012e04:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012e08:	f000 80aa 	beq.w	8012f60 <uxr_read_framed_msg+0x510>
 8012e0c:	f082 0220 	eor.w	r2, r2, #32
 8012e10:	e654      	b.n	8012abc <uxr_read_framed_msg+0x6c>
 8012e12:	1c58      	adds	r0, r3, #1
 8012e14:	0842      	lsrs	r2, r0, #1
 8012e16:	fba5 c202 	umull	ip, r2, r5, r2
 8012e1a:	0892      	lsrs	r2, r2, #2
 8012e1c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012e20:	fb0c 0212 	mls	r2, ip, r2, r0
 8012e24:	b2d0      	uxtb	r0, r2
 8012e26:	4281      	cmp	r1, r0
 8012e28:	d08f      	beq.n	8012d4a <uxr_read_framed_msg+0x2fa>
 8012e2a:	4422      	add	r2, r4
 8012e2c:	3302      	adds	r3, #2
 8012e2e:	7890      	ldrb	r0, [r2, #2]
 8012e30:	085a      	lsrs	r2, r3, #1
 8012e32:	fba5 1202 	umull	r1, r2, r5, r2
 8012e36:	0892      	lsrs	r2, r2, #2
 8012e38:	fb0c 3312 	mls	r3, ip, r2, r3
 8012e3c:	287e      	cmp	r0, #126	@ 0x7e
 8012e3e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012e42:	d07d      	beq.n	8012f40 <uxr_read_framed_msg+0x4f0>
 8012e44:	f080 0020 	eor.w	r0, r0, #32
 8012e48:	e660      	b.n	8012b0c <uxr_read_framed_msg+0xbc>
 8012e4a:	1c59      	adds	r1, r3, #1
 8012e4c:	084a      	lsrs	r2, r1, #1
 8012e4e:	fba5 c202 	umull	ip, r2, r5, r2
 8012e52:	0892      	lsrs	r2, r2, #2
 8012e54:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012e58:	fb0c 1212 	mls	r2, ip, r2, r1
 8012e5c:	b2d1      	uxtb	r1, r2
 8012e5e:	4288      	cmp	r0, r1
 8012e60:	f43f af64 	beq.w	8012d2c <uxr_read_framed_msg+0x2dc>
 8012e64:	4422      	add	r2, r4
 8012e66:	3302      	adds	r3, #2
 8012e68:	7891      	ldrb	r1, [r2, #2]
 8012e6a:	085a      	lsrs	r2, r3, #1
 8012e6c:	fba5 0202 	umull	r0, r2, r5, r2
 8012e70:	0892      	lsrs	r2, r2, #2
 8012e72:	fb0c 3312 	mls	r3, ip, r2, r3
 8012e76:	297e      	cmp	r1, #126	@ 0x7e
 8012e78:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012e7c:	d070      	beq.n	8012f60 <uxr_read_framed_msg+0x510>
 8012e7e:	f081 0120 	eor.w	r1, r1, #32
 8012e82:	e6a3      	b.n	8012bcc <uxr_read_framed_msg+0x17c>
 8012e84:	f103 0c01 	add.w	ip, r3, #1
 8012e88:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012e8c:	fba5 0202 	umull	r0, r2, r5, r2
 8012e90:	0892      	lsrs	r2, r2, #2
 8012e92:	202a      	movs	r0, #42	@ 0x2a
 8012e94:	fb00 c212 	mls	r2, r0, r2, ip
 8012e98:	fa5f fc82 	uxtb.w	ip, r2
 8012e9c:	4561      	cmp	r1, ip
 8012e9e:	f43f af58 	beq.w	8012d52 <uxr_read_framed_msg+0x302>
 8012ea2:	4422      	add	r2, r4
 8012ea4:	3302      	adds	r3, #2
 8012ea6:	7891      	ldrb	r1, [r2, #2]
 8012ea8:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8012eac:	085a      	lsrs	r2, r3, #1
 8012eae:	fba5 c202 	umull	ip, r2, r5, r2
 8012eb2:	0892      	lsrs	r2, r2, #2
 8012eb4:	fb00 3312 	mls	r3, r0, r2, r3
 8012eb8:	297e      	cmp	r1, #126	@ 0x7e
 8012eba:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012ebe:	f43f af48 	beq.w	8012d52 <uxr_read_framed_msg+0x302>
 8012ec2:	f081 0120 	eor.w	r1, r1, #32
 8012ec6:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8012eca:	e6e8      	b.n	8012c9e <uxr_read_framed_msg+0x24e>
 8012ecc:	1c58      	adds	r0, r3, #1
 8012ece:	0842      	lsrs	r2, r0, #1
 8012ed0:	fba5 c202 	umull	ip, r2, r5, r2
 8012ed4:	0892      	lsrs	r2, r2, #2
 8012ed6:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012eda:	fb0c 0212 	mls	r2, ip, r2, r0
 8012ede:	b2d0      	uxtb	r0, r2
 8012ee0:	4281      	cmp	r1, r0
 8012ee2:	f43f af32 	beq.w	8012d4a <uxr_read_framed_msg+0x2fa>
 8012ee6:	4422      	add	r2, r4
 8012ee8:	3302      	adds	r3, #2
 8012eea:	7890      	ldrb	r0, [r2, #2]
 8012eec:	085a      	lsrs	r2, r3, #1
 8012eee:	fba5 1202 	umull	r1, r2, r5, r2
 8012ef2:	0892      	lsrs	r2, r2, #2
 8012ef4:	fb0c 3312 	mls	r3, ip, r2, r3
 8012ef8:	287e      	cmp	r0, #126	@ 0x7e
 8012efa:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012efe:	d01f      	beq.n	8012f40 <uxr_read_framed_msg+0x4f0>
 8012f00:	f080 0020 	eor.w	r0, r0, #32
 8012f04:	e68b      	b.n	8012c1e <uxr_read_framed_msg+0x1ce>
 8012f06:	1c51      	adds	r1, r2, #1
 8012f08:	084b      	lsrs	r3, r1, #1
 8012f0a:	fba5 c303 	umull	ip, r3, r5, r3
 8012f0e:	089b      	lsrs	r3, r3, #2
 8012f10:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012f14:	fb0c 1313 	mls	r3, ip, r3, r1
 8012f18:	b2d9      	uxtb	r1, r3
 8012f1a:	4288      	cmp	r0, r1
 8012f1c:	f43f af3d 	beq.w	8012d9a <uxr_read_framed_msg+0x34a>
 8012f20:	3202      	adds	r2, #2
 8012f22:	4423      	add	r3, r4
 8012f24:	0850      	lsrs	r0, r2, #1
 8012f26:	789b      	ldrb	r3, [r3, #2]
 8012f28:	fba5 1000 	umull	r1, r0, r5, r0
 8012f2c:	0880      	lsrs	r0, r0, #2
 8012f2e:	fb0c 2210 	mls	r2, ip, r0, r2
 8012f32:	2b7e      	cmp	r3, #126	@ 0x7e
 8012f34:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012f38:	d016      	beq.n	8012f68 <uxr_read_framed_msg+0x518>
 8012f3a:	f083 0120 	eor.w	r1, r3, #32
 8012f3e:	e68b      	b.n	8012c58 <uxr_read_framed_msg+0x208>
 8012f40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012f42:	9300      	str	r3, [sp, #0]
 8012f44:	2302      	movs	r3, #2
 8012f46:	9301      	str	r3, [sp, #4]
 8012f48:	464a      	mov	r2, r9
 8012f4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012f4c:	4641      	mov	r1, r8
 8012f4e:	4620      	mov	r0, r4
 8012f50:	f7ff fcfc 	bl	801294c <uxr_framing_read_transport>
 8012f54:	2800      	cmp	r0, #0
 8012f56:	f47f aef6 	bne.w	8012d46 <uxr_read_framed_msg+0x2f6>
 8012f5a:	2301      	movs	r3, #1
 8012f5c:	7023      	strb	r3, [r4, #0]
 8012f5e:	e588      	b.n	8012a72 <uxr_read_framed_msg+0x22>
 8012f60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012f62:	9300      	str	r3, [sp, #0]
 8012f64:	2301      	movs	r3, #1
 8012f66:	e7ee      	b.n	8012f46 <uxr_read_framed_msg+0x4f6>
 8012f68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012f6a:	9300      	str	r3, [sp, #0]
 8012f6c:	2303      	movs	r3, #3
 8012f6e:	e7ea      	b.n	8012f46 <uxr_read_framed_msg+0x4f6>
 8012f70:	ee17 8a90 	vmov	r8, s15
 8012f74:	e6ae      	b.n	8012cd4 <uxr_read_framed_msg+0x284>
 8012f76:	bf00      	nop

08012f78 <uxr_stream_id>:
 8012f78:	2901      	cmp	r1, #1
 8012f7a:	b082      	sub	sp, #8
 8012f7c:	d01d      	beq.n	8012fba <uxr_stream_id+0x42>
 8012f7e:	2902      	cmp	r1, #2
 8012f80:	f04f 0c00 	mov.w	ip, #0
 8012f84:	d01e      	beq.n	8012fc4 <uxr_stream_id+0x4c>
 8012f86:	2300      	movs	r3, #0
 8012f88:	f36c 0307 	bfi	r3, ip, #0, #8
 8012f8c:	f360 230f 	bfi	r3, r0, #8, #8
 8012f90:	f361 4317 	bfi	r3, r1, #16, #8
 8012f94:	f362 631f 	bfi	r3, r2, #24, #8
 8012f98:	b2da      	uxtb	r2, r3
 8012f9a:	2000      	movs	r0, #0
 8012f9c:	f362 0007 	bfi	r0, r2, #0, #8
 8012fa0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8012fa4:	f362 200f 	bfi	r0, r2, #8, #8
 8012fa8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8012fac:	f362 4017 	bfi	r0, r2, #16, #8
 8012fb0:	0e1b      	lsrs	r3, r3, #24
 8012fb2:	f363 601f 	bfi	r0, r3, #24, #8
 8012fb6:	b002      	add	sp, #8
 8012fb8:	4770      	bx	lr
 8012fba:	f100 0c01 	add.w	ip, r0, #1
 8012fbe:	fa5f fc8c 	uxtb.w	ip, ip
 8012fc2:	e7e0      	b.n	8012f86 <uxr_stream_id+0xe>
 8012fc4:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8012fc8:	e7dd      	b.n	8012f86 <uxr_stream_id+0xe>
 8012fca:	bf00      	nop

08012fcc <uxr_stream_id_from_raw>:
 8012fcc:	b082      	sub	sp, #8
 8012fce:	b130      	cbz	r0, 8012fde <uxr_stream_id_from_raw+0x12>
 8012fd0:	0603      	lsls	r3, r0, #24
 8012fd2:	d420      	bmi.n	8013016 <uxr_stream_id_from_raw+0x4a>
 8012fd4:	1e42      	subs	r2, r0, #1
 8012fd6:	b2d2      	uxtb	r2, r2
 8012fd8:	f04f 0c01 	mov.w	ip, #1
 8012fdc:	e001      	b.n	8012fe2 <uxr_stream_id_from_raw+0x16>
 8012fde:	4684      	mov	ip, r0
 8012fe0:	4602      	mov	r2, r0
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	f360 0307 	bfi	r3, r0, #0, #8
 8012fe8:	f362 230f 	bfi	r3, r2, #8, #8
 8012fec:	f36c 4317 	bfi	r3, ip, #16, #8
 8012ff0:	f361 631f 	bfi	r3, r1, #24, #8
 8012ff4:	b2da      	uxtb	r2, r3
 8012ff6:	2000      	movs	r0, #0
 8012ff8:	f362 0007 	bfi	r0, r2, #0, #8
 8012ffc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8013000:	f362 200f 	bfi	r0, r2, #8, #8
 8013004:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8013008:	f362 4017 	bfi	r0, r2, #16, #8
 801300c:	0e1b      	lsrs	r3, r3, #24
 801300e:	f363 601f 	bfi	r0, r3, #24, #8
 8013012:	b002      	add	sp, #8
 8013014:	4770      	bx	lr
 8013016:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 801301a:	f04f 0c02 	mov.w	ip, #2
 801301e:	e7e0      	b.n	8012fe2 <uxr_stream_id_from_raw+0x16>

08013020 <uxr_init_stream_storage>:
 8013020:	2300      	movs	r3, #0
 8013022:	7403      	strb	r3, [r0, #16]
 8013024:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8013028:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 801302c:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8013030:	4770      	bx	lr
 8013032:	bf00      	nop

08013034 <uxr_reset_stream_storage>:
 8013034:	b570      	push	{r4, r5, r6, lr}
 8013036:	7c03      	ldrb	r3, [r0, #16]
 8013038:	4604      	mov	r4, r0
 801303a:	b153      	cbz	r3, 8013052 <uxr_reset_stream_storage+0x1e>
 801303c:	4606      	mov	r6, r0
 801303e:	2500      	movs	r5, #0
 8013040:	4630      	mov	r0, r6
 8013042:	f005 f837 	bl	80180b4 <uxr_reset_output_best_effort_stream>
 8013046:	7c23      	ldrb	r3, [r4, #16]
 8013048:	3501      	adds	r5, #1
 801304a:	42ab      	cmp	r3, r5
 801304c:	f106 0610 	add.w	r6, r6, #16
 8013050:	d8f6      	bhi.n	8013040 <uxr_reset_stream_storage+0xc>
 8013052:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8013056:	b163      	cbz	r3, 8013072 <uxr_reset_stream_storage+0x3e>
 8013058:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801305c:	2500      	movs	r5, #0
 801305e:	4630      	mov	r0, r6
 8013060:	f004 fe2a 	bl	8017cb8 <uxr_reset_input_best_effort_stream>
 8013064:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8013068:	3501      	adds	r5, #1
 801306a:	42ab      	cmp	r3, r5
 801306c:	f106 0602 	add.w	r6, r6, #2
 8013070:	d8f5      	bhi.n	801305e <uxr_reset_stream_storage+0x2a>
 8013072:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8013076:	b163      	cbz	r3, 8013092 <uxr_reset_stream_storage+0x5e>
 8013078:	f104 0618 	add.w	r6, r4, #24
 801307c:	2500      	movs	r5, #0
 801307e:	4630      	mov	r0, r6
 8013080:	f005 f8c4 	bl	801820c <uxr_reset_output_reliable_stream>
 8013084:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8013088:	3501      	adds	r5, #1
 801308a:	42ab      	cmp	r3, r5
 801308c:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8013090:	d8f5      	bhi.n	801307e <uxr_reset_stream_storage+0x4a>
 8013092:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8013096:	b163      	cbz	r3, 80130b2 <uxr_reset_stream_storage+0x7e>
 8013098:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 801309c:	2500      	movs	r5, #0
 801309e:	4630      	mov	r0, r6
 80130a0:	f004 fe7e 	bl	8017da0 <uxr_reset_input_reliable_stream>
 80130a4:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80130a8:	3501      	adds	r5, #1
 80130aa:	42ab      	cmp	r3, r5
 80130ac:	f106 0618 	add.w	r6, r6, #24
 80130b0:	d8f5      	bhi.n	801309e <uxr_reset_stream_storage+0x6a>
 80130b2:	bd70      	pop	{r4, r5, r6, pc}

080130b4 <uxr_add_output_best_effort_buffer>:
 80130b4:	b510      	push	{r4, lr}
 80130b6:	7c04      	ldrb	r4, [r0, #16]
 80130b8:	f104 0c01 	add.w	ip, r4, #1
 80130bc:	b082      	sub	sp, #8
 80130be:	f880 c010 	strb.w	ip, [r0, #16]
 80130c2:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80130c6:	f004 ffeb 	bl	80180a0 <uxr_init_output_best_effort_stream>
 80130ca:	2201      	movs	r2, #1
 80130cc:	4611      	mov	r1, r2
 80130ce:	4620      	mov	r0, r4
 80130d0:	b002      	add	sp, #8
 80130d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80130d6:	f7ff bf4f 	b.w	8012f78 <uxr_stream_id>
 80130da:	bf00      	nop

080130dc <uxr_add_output_reliable_buffer>:
 80130dc:	b510      	push	{r4, lr}
 80130de:	b084      	sub	sp, #16
 80130e0:	4684      	mov	ip, r0
 80130e2:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80130e6:	9000      	str	r0, [sp, #0]
 80130e8:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 80130ec:	2028      	movs	r0, #40	@ 0x28
 80130ee:	fb00 c004 	mla	r0, r0, r4, ip
 80130f2:	f104 0e01 	add.w	lr, r4, #1
 80130f6:	3018      	adds	r0, #24
 80130f8:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 80130fc:	f005 f84e 	bl	801819c <uxr_init_output_reliable_stream>
 8013100:	2201      	movs	r2, #1
 8013102:	2102      	movs	r1, #2
 8013104:	4620      	mov	r0, r4
 8013106:	b004      	add	sp, #16
 8013108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801310c:	f7ff bf34 	b.w	8012f78 <uxr_stream_id>

08013110 <uxr_add_input_best_effort_buffer>:
 8013110:	b510      	push	{r4, lr}
 8013112:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8013116:	4603      	mov	r3, r0
 8013118:	1c62      	adds	r2, r4, #1
 801311a:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 801311e:	b082      	sub	sp, #8
 8013120:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8013124:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013128:	f004 fdc2 	bl	8017cb0 <uxr_init_input_best_effort_stream>
 801312c:	2200      	movs	r2, #0
 801312e:	2101      	movs	r1, #1
 8013130:	4620      	mov	r0, r4
 8013132:	b002      	add	sp, #8
 8013134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013138:	f7ff bf1e 	b.w	8012f78 <uxr_stream_id>

0801313c <uxr_add_input_reliable_buffer>:
 801313c:	b510      	push	{r4, lr}
 801313e:	b084      	sub	sp, #16
 8013140:	4684      	mov	ip, r0
 8013142:	9806      	ldr	r0, [sp, #24]
 8013144:	9000      	str	r0, [sp, #0]
 8013146:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 801314a:	2018      	movs	r0, #24
 801314c:	fb00 c004 	mla	r0, r0, r4, ip
 8013150:	f104 0e01 	add.w	lr, r4, #1
 8013154:	3048      	adds	r0, #72	@ 0x48
 8013156:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 801315a:	f004 fdf5 	bl	8017d48 <uxr_init_input_reliable_stream>
 801315e:	2200      	movs	r2, #0
 8013160:	2102      	movs	r1, #2
 8013162:	4620      	mov	r0, r4
 8013164:	b004      	add	sp, #16
 8013166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801316a:	f7ff bf05 	b.w	8012f78 <uxr_stream_id>
 801316e:	bf00      	nop

08013170 <uxr_get_output_best_effort_stream>:
 8013170:	7c03      	ldrb	r3, [r0, #16]
 8013172:	428b      	cmp	r3, r1
 8013174:	bf8c      	ite	hi
 8013176:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801317a:	2000      	movls	r0, #0
 801317c:	4770      	bx	lr
 801317e:	bf00      	nop

08013180 <uxr_get_output_reliable_stream>:
 8013180:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8013184:	428b      	cmp	r3, r1
 8013186:	bf83      	ittte	hi
 8013188:	2328      	movhi	r3, #40	@ 0x28
 801318a:	fb03 0001 	mlahi	r0, r3, r1, r0
 801318e:	3018      	addhi	r0, #24
 8013190:	2000      	movls	r0, #0
 8013192:	4770      	bx	lr

08013194 <uxr_get_input_best_effort_stream>:
 8013194:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8013198:	428b      	cmp	r3, r1
 801319a:	bf86      	itte	hi
 801319c:	3121      	addhi	r1, #33	@ 0x21
 801319e:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 80131a2:	2000      	movls	r0, #0
 80131a4:	4770      	bx	lr
 80131a6:	bf00      	nop

080131a8 <uxr_get_input_reliable_stream>:
 80131a8:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 80131ac:	428b      	cmp	r3, r1
 80131ae:	bf83      	ittte	hi
 80131b0:	2318      	movhi	r3, #24
 80131b2:	fb03 0001 	mlahi	r0, r3, r1, r0
 80131b6:	3048      	addhi	r0, #72	@ 0x48
 80131b8:	2000      	movls	r0, #0
 80131ba:	4770      	bx	lr

080131bc <uxr_output_streams_confirmed>:
 80131bc:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80131c0:	b183      	cbz	r3, 80131e4 <uxr_output_streams_confirmed+0x28>
 80131c2:	b570      	push	{r4, r5, r6, lr}
 80131c4:	4606      	mov	r6, r0
 80131c6:	f100 0518 	add.w	r5, r0, #24
 80131ca:	2400      	movs	r4, #0
 80131cc:	e001      	b.n	80131d2 <uxr_output_streams_confirmed+0x16>
 80131ce:	3528      	adds	r5, #40	@ 0x28
 80131d0:	b138      	cbz	r0, 80131e2 <uxr_output_streams_confirmed+0x26>
 80131d2:	4628      	mov	r0, r5
 80131d4:	f005 fa8a 	bl	80186ec <uxr_is_output_up_to_date>
 80131d8:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 80131dc:	3401      	adds	r4, #1
 80131de:	42a3      	cmp	r3, r4
 80131e0:	d8f5      	bhi.n	80131ce <uxr_output_streams_confirmed+0x12>
 80131e2:	bd70      	pop	{r4, r5, r6, pc}
 80131e4:	2001      	movs	r0, #1
 80131e6:	4770      	bx	lr

080131e8 <uxr_buffer_submessage_header>:
 80131e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131ea:	4604      	mov	r4, r0
 80131ec:	460e      	mov	r6, r1
 80131ee:	2104      	movs	r1, #4
 80131f0:	4615      	mov	r5, r2
 80131f2:	461f      	mov	r7, r3
 80131f4:	f7f8 fdbc 	bl	800bd70 <ucdr_align_to>
 80131f8:	2301      	movs	r3, #1
 80131fa:	ea47 0203 	orr.w	r2, r7, r3
 80131fe:	4631      	mov	r1, r6
 8013200:	7523      	strb	r3, [r4, #20]
 8013202:	4620      	mov	r0, r4
 8013204:	462b      	mov	r3, r5
 8013206:	f000 fa27 	bl	8013658 <uxr_serialize_submessage_header>
 801320a:	4620      	mov	r0, r4
 801320c:	f7f8 fdc6 	bl	800bd9c <ucdr_buffer_remaining>
 8013210:	42a8      	cmp	r0, r5
 8013212:	bf34      	ite	cc
 8013214:	2000      	movcc	r0, #0
 8013216:	2001      	movcs	r0, #1
 8013218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801321a:	bf00      	nop

0801321c <uxr_read_submessage_header>:
 801321c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013220:	4604      	mov	r4, r0
 8013222:	460d      	mov	r5, r1
 8013224:	2104      	movs	r1, #4
 8013226:	4616      	mov	r6, r2
 8013228:	4698      	mov	r8, r3
 801322a:	f7f8 fda1 	bl	800bd70 <ucdr_align_to>
 801322e:	4620      	mov	r0, r4
 8013230:	f7f8 fdb4 	bl	800bd9c <ucdr_buffer_remaining>
 8013234:	2803      	cmp	r0, #3
 8013236:	bf8c      	ite	hi
 8013238:	2701      	movhi	r7, #1
 801323a:	2700      	movls	r7, #0
 801323c:	d802      	bhi.n	8013244 <uxr_read_submessage_header+0x28>
 801323e:	4638      	mov	r0, r7
 8013240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013244:	4633      	mov	r3, r6
 8013246:	4642      	mov	r2, r8
 8013248:	4620      	mov	r0, r4
 801324a:	4629      	mov	r1, r5
 801324c:	f000 fa18 	bl	8013680 <uxr_deserialize_submessage_header>
 8013250:	f898 3000 	ldrb.w	r3, [r8]
 8013254:	f003 0201 	and.w	r2, r3, #1
 8013258:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 801325c:	f888 3000 	strb.w	r3, [r8]
 8013260:	7522      	strb	r2, [r4, #20]
 8013262:	4638      	mov	r0, r7
 8013264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013268 <uxr_submessage_padding>:
 8013268:	f010 0003 	ands.w	r0, r0, #3
 801326c:	bf18      	it	ne
 801326e:	f1c0 0004 	rsbne	r0, r0, #4
 8013272:	4770      	bx	lr

08013274 <uxr_millis>:
 8013274:	b510      	push	{r4, lr}
 8013276:	b084      	sub	sp, #16
 8013278:	4669      	mov	r1, sp
 801327a:	2001      	movs	r0, #1
 801327c:	f7ef fba0 	bl	80029c0 <clock_gettime>
 8013280:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8013284:	4906      	ldr	r1, [pc, #24]	@ (80132a0 <uxr_millis+0x2c>)
 8013286:	fba0 0301 	umull	r0, r3, r0, r1
 801328a:	1900      	adds	r0, r0, r4
 801328c:	fb01 3102 	mla	r1, r1, r2, r3
 8013290:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8013294:	4a03      	ldr	r2, [pc, #12]	@ (80132a4 <uxr_millis+0x30>)
 8013296:	2300      	movs	r3, #0
 8013298:	f7ed fcc8 	bl	8000c2c <__aeabi_ldivmod>
 801329c:	b004      	add	sp, #16
 801329e:	bd10      	pop	{r4, pc}
 80132a0:	3b9aca00 	.word	0x3b9aca00
 80132a4:	000f4240 	.word	0x000f4240

080132a8 <uxr_nanos>:
 80132a8:	b510      	push	{r4, lr}
 80132aa:	b084      	sub	sp, #16
 80132ac:	4669      	mov	r1, sp
 80132ae:	2001      	movs	r0, #1
 80132b0:	f7ef fb86 	bl	80029c0 <clock_gettime>
 80132b4:	4a06      	ldr	r2, [pc, #24]	@ (80132d0 <uxr_nanos+0x28>)
 80132b6:	9800      	ldr	r0, [sp, #0]
 80132b8:	9902      	ldr	r1, [sp, #8]
 80132ba:	9c01      	ldr	r4, [sp, #4]
 80132bc:	fba0 0302 	umull	r0, r3, r0, r2
 80132c0:	1840      	adds	r0, r0, r1
 80132c2:	fb02 3304 	mla	r3, r2, r4, r3
 80132c6:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 80132ca:	b004      	add	sp, #16
 80132cc:	bd10      	pop	{r4, pc}
 80132ce:	bf00      	nop
 80132d0:	3b9aca00 	.word	0x3b9aca00

080132d4 <on_full_output_buffer_fragmented>:
 80132d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132d8:	460c      	mov	r4, r1
 80132da:	b08a      	sub	sp, #40	@ 0x28
 80132dc:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 80132e0:	4606      	mov	r6, r0
 80132e2:	f104 0008 	add.w	r0, r4, #8
 80132e6:	f7ff ff4b 	bl	8013180 <uxr_get_output_reliable_stream>
 80132ea:	4605      	mov	r5, r0
 80132ec:	f005 fa08 	bl	8018700 <get_available_free_slots>
 80132f0:	b968      	cbnz	r0, 801330e <on_full_output_buffer_fragmented+0x3a>
 80132f2:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 80132f6:	4620      	mov	r0, r4
 80132f8:	4798      	blx	r3
 80132fa:	b918      	cbnz	r0, 8013304 <on_full_output_buffer_fragmented+0x30>
 80132fc:	2001      	movs	r0, #1
 80132fe:	b00a      	add	sp, #40	@ 0x28
 8013300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013304:	4628      	mov	r0, r5
 8013306:	f005 f9fb 	bl	8018700 <get_available_free_slots>
 801330a:	2800      	cmp	r0, #0
 801330c:	d0f6      	beq.n	80132fc <on_full_output_buffer_fragmented+0x28>
 801330e:	8929      	ldrh	r1, [r5, #8]
 8013310:	89eb      	ldrh	r3, [r5, #14]
 8013312:	7b28      	ldrb	r0, [r5, #12]
 8013314:	686a      	ldr	r2, [r5, #4]
 8013316:	fbb2 f8f1 	udiv	r8, r2, r1
 801331a:	fbb3 f2f1 	udiv	r2, r3, r1
 801331e:	fb01 3112 	mls	r1, r1, r2, r3
 8013322:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 8013326:	b289      	uxth	r1, r1
 8013328:	fb08 f101 	mul.w	r1, r8, r1
 801332c:	30fc      	adds	r0, #252	@ 0xfc
 801332e:	f1a8 0804 	sub.w	r8, r8, #4
 8013332:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8013336:	4440      	add	r0, r8
 8013338:	b287      	uxth	r7, r0
 801333a:	1bdb      	subs	r3, r3, r7
 801333c:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8013340:	682b      	ldr	r3, [r5, #0]
 8013342:	3104      	adds	r1, #4
 8013344:	4419      	add	r1, r3
 8013346:	4642      	mov	r2, r8
 8013348:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801334c:	9300      	str	r3, [sp, #0]
 801334e:	a802      	add	r0, sp, #8
 8013350:	2300      	movs	r3, #0
 8013352:	f7f8 fce1 	bl	800bd18 <ucdr_init_buffer_origin_offset>
 8013356:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 801335a:	f102 0308 	add.w	r3, r2, #8
 801335e:	4543      	cmp	r3, r8
 8013360:	d928      	bls.n	80133b4 <on_full_output_buffer_fragmented+0xe0>
 8013362:	463a      	mov	r2, r7
 8013364:	2300      	movs	r3, #0
 8013366:	210d      	movs	r1, #13
 8013368:	a802      	add	r0, sp, #8
 801336a:	f7ff ff3d 	bl	80131e8 <uxr_buffer_submessage_header>
 801336e:	8929      	ldrh	r1, [r5, #8]
 8013370:	89eb      	ldrh	r3, [r5, #14]
 8013372:	fbb3 f2f1 	udiv	r2, r3, r1
 8013376:	fb01 3312 	mls	r3, r1, r2, r3
 801337a:	b29b      	uxth	r3, r3
 801337c:	686a      	ldr	r2, [r5, #4]
 801337e:	fbb2 f2f1 	udiv	r2, r2, r1
 8013382:	fb02 f303 	mul.w	r3, r2, r3
 8013386:	682a      	ldr	r2, [r5, #0]
 8013388:	f842 8003 	str.w	r8, [r2, r3]
 801338c:	89e8      	ldrh	r0, [r5, #14]
 801338e:	2101      	movs	r1, #1
 8013390:	f005 f9d6 	bl	8018740 <uxr_seq_num_add>
 8013394:	9904      	ldr	r1, [sp, #16]
 8013396:	9a03      	ldr	r2, [sp, #12]
 8013398:	81e8      	strh	r0, [r5, #14]
 801339a:	1a52      	subs	r2, r2, r1
 801339c:	4630      	mov	r0, r6
 801339e:	f7f8 fccd 	bl	800bd3c <ucdr_init_buffer>
 80133a2:	4630      	mov	r0, r6
 80133a4:	490f      	ldr	r1, [pc, #60]	@ (80133e4 <on_full_output_buffer_fragmented+0x110>)
 80133a6:	4622      	mov	r2, r4
 80133a8:	f7f8 fc9c 	bl	800bce4 <ucdr_set_on_full_buffer_callback>
 80133ac:	2000      	movs	r0, #0
 80133ae:	b00a      	add	sp, #40	@ 0x28
 80133b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133b4:	b292      	uxth	r2, r2
 80133b6:	2302      	movs	r3, #2
 80133b8:	210d      	movs	r1, #13
 80133ba:	a802      	add	r0, sp, #8
 80133bc:	f7ff ff14 	bl	80131e8 <uxr_buffer_submessage_header>
 80133c0:	8928      	ldrh	r0, [r5, #8]
 80133c2:	89eb      	ldrh	r3, [r5, #14]
 80133c4:	fbb3 f1f0 	udiv	r1, r3, r0
 80133c8:	fb00 3311 	mls	r3, r0, r1, r3
 80133cc:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 80133d0:	6869      	ldr	r1, [r5, #4]
 80133d2:	fbb1 f1f0 	udiv	r1, r1, r0
 80133d6:	b29b      	uxth	r3, r3
 80133d8:	fb01 f303 	mul.w	r3, r1, r3
 80133dc:	6829      	ldr	r1, [r5, #0]
 80133de:	3208      	adds	r2, #8
 80133e0:	50ca      	str	r2, [r1, r3]
 80133e2:	e7d3      	b.n	801338c <on_full_output_buffer_fragmented+0xb8>
 80133e4:	080132d5 	.word	0x080132d5

080133e8 <uxr_prepare_output_stream>:
 80133e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80133ea:	b087      	sub	sp, #28
 80133ec:	2707      	movs	r7, #7
 80133ee:	9202      	str	r2, [sp, #8]
 80133f0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80133f2:	9103      	str	r1, [sp, #12]
 80133f4:	2500      	movs	r5, #0
 80133f6:	3204      	adds	r2, #4
 80133f8:	e9cd 7500 	strd	r7, r5, [sp]
 80133fc:	461c      	mov	r4, r3
 80133fe:	4606      	mov	r6, r0
 8013400:	f7fe ffc2 	bl	8012388 <uxr_prepare_stream_to_write_submessage>
 8013404:	f080 0201 	eor.w	r2, r0, #1
 8013408:	b2d2      	uxtb	r2, r2
 801340a:	75a2      	strb	r2, [r4, #22]
 801340c:	b112      	cbz	r2, 8013414 <uxr_prepare_output_stream+0x2c>
 801340e:	4628      	mov	r0, r5
 8013410:	b007      	add	sp, #28
 8013412:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013414:	aa05      	add	r2, sp, #20
 8013416:	9902      	ldr	r1, [sp, #8]
 8013418:	4630      	mov	r0, r6
 801341a:	f7ff f8eb 	bl	80125f4 <uxr_init_base_object_request>
 801341e:	a905      	add	r1, sp, #20
 8013420:	4605      	mov	r5, r0
 8013422:	4620      	mov	r0, r4
 8013424:	f001 f8a0 	bl	8014568 <uxr_serialize_WRITE_DATA_Payload_Data>
 8013428:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801342c:	69a6      	ldr	r6, [r4, #24]
 801342e:	69e7      	ldr	r7, [r4, #28]
 8013430:	1a52      	subs	r2, r2, r1
 8013432:	4620      	mov	r0, r4
 8013434:	f7f8 fc82 	bl	800bd3c <ucdr_init_buffer>
 8013438:	4620      	mov	r0, r4
 801343a:	463a      	mov	r2, r7
 801343c:	4631      	mov	r1, r6
 801343e:	f7f8 fc51 	bl	800bce4 <ucdr_set_on_full_buffer_callback>
 8013442:	4628      	mov	r0, r5
 8013444:	b007      	add	sp, #28
 8013446:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013448 <uxr_prepare_output_stream_fragmented>:
 8013448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801344c:	b091      	sub	sp, #68	@ 0x44
 801344e:	4605      	mov	r5, r0
 8013450:	9105      	str	r1, [sp, #20]
 8013452:	3008      	adds	r0, #8
 8013454:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8013458:	461e      	mov	r6, r3
 801345a:	9204      	str	r2, [sp, #16]
 801345c:	f7ff fe90 	bl	8013180 <uxr_get_output_reliable_stream>
 8013460:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8013464:	2b01      	cmp	r3, #1
 8013466:	f000 8091 	beq.w	801358c <uxr_prepare_output_stream_fragmented+0x144>
 801346a:	4604      	mov	r4, r0
 801346c:	2800      	cmp	r0, #0
 801346e:	f000 808d 	beq.w	801358c <uxr_prepare_output_stream_fragmented+0x144>
 8013472:	f005 f945 	bl	8018700 <get_available_free_slots>
 8013476:	2800      	cmp	r0, #0
 8013478:	f000 8083 	beq.w	8013582 <uxr_prepare_output_stream_fragmented+0x13a>
 801347c:	8922      	ldrh	r2, [r4, #8]
 801347e:	89e7      	ldrh	r7, [r4, #14]
 8013480:	fbb7 f9f2 	udiv	r9, r7, r2
 8013484:	fb02 7919 	mls	r9, r2, r9, r7
 8013488:	fa1f f989 	uxth.w	r9, r9
 801348c:	6863      	ldr	r3, [r4, #4]
 801348e:	fbb3 f2f2 	udiv	r2, r3, r2
 8013492:	6823      	ldr	r3, [r4, #0]
 8013494:	9203      	str	r2, [sp, #12]
 8013496:	fb02 f909 	mul.w	r9, r2, r9
 801349a:	f109 0904 	add.w	r9, r9, #4
 801349e:	4499      	add	r9, r3
 80134a0:	7b23      	ldrb	r3, [r4, #12]
 80134a2:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80134a6:	4543      	cmp	r3, r8
 80134a8:	f1a2 0b04 	sub.w	fp, r2, #4
 80134ac:	d37a      	bcc.n	80135a4 <uxr_prepare_output_stream_fragmented+0x15c>
 80134ae:	f1ab 0a04 	sub.w	sl, fp, #4
 80134b2:	ebaa 0a03 	sub.w	sl, sl, r3
 80134b6:	465a      	mov	r2, fp
 80134b8:	2300      	movs	r3, #0
 80134ba:	4649      	mov	r1, r9
 80134bc:	a808      	add	r0, sp, #32
 80134be:	f8cd 8000 	str.w	r8, [sp]
 80134c2:	f7f8 fc29 	bl	800bd18 <ucdr_init_buffer_origin_offset>
 80134c6:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80134c8:	fa1f fa8a 	uxth.w	sl, sl
 80134cc:	4652      	mov	r2, sl
 80134ce:	f103 0a08 	add.w	sl, r3, #8
 80134d2:	45da      	cmp	sl, fp
 80134d4:	bf34      	ite	cc
 80134d6:	2302      	movcc	r3, #2
 80134d8:	2300      	movcs	r3, #0
 80134da:	210d      	movs	r1, #13
 80134dc:	a808      	add	r0, sp, #32
 80134de:	f7ff fe83 	bl	80131e8 <uxr_buffer_submessage_header>
 80134e2:	8921      	ldrh	r1, [r4, #8]
 80134e4:	fbb7 f2f1 	udiv	r2, r7, r1
 80134e8:	fb01 7212 	mls	r2, r1, r2, r7
 80134ec:	b292      	uxth	r2, r2
 80134ee:	6863      	ldr	r3, [r4, #4]
 80134f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80134f4:	fb02 f303 	mul.w	r3, r2, r3
 80134f8:	6822      	ldr	r2, [r4, #0]
 80134fa:	4638      	mov	r0, r7
 80134fc:	f842 b003 	str.w	fp, [r2, r3]
 8013500:	2101      	movs	r1, #1
 8013502:	f005 f91d 	bl	8018740 <uxr_seq_num_add>
 8013506:	9b03      	ldr	r3, [sp, #12]
 8013508:	f108 0104 	add.w	r1, r8, #4
 801350c:	f1a3 0208 	sub.w	r2, r3, #8
 8013510:	eba2 0208 	sub.w	r2, r2, r8
 8013514:	4449      	add	r1, r9
 8013516:	4607      	mov	r7, r0
 8013518:	4630      	mov	r0, r6
 801351a:	f7f8 fc0f 	bl	800bd3c <ucdr_init_buffer>
 801351e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8013520:	81e7      	strh	r7, [r4, #14]
 8013522:	1d1a      	adds	r2, r3, #4
 8013524:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8013528:	bf28      	it	cs
 801352a:	2200      	movcs	r2, #0
 801352c:	2300      	movs	r3, #0
 801352e:	b292      	uxth	r2, r2
 8013530:	2107      	movs	r1, #7
 8013532:	4630      	mov	r0, r6
 8013534:	f7ff fe58 	bl	80131e8 <uxr_buffer_submessage_header>
 8013538:	9904      	ldr	r1, [sp, #16]
 801353a:	aa07      	add	r2, sp, #28
 801353c:	4628      	mov	r0, r5
 801353e:	f7ff f859 	bl	80125f4 <uxr_init_base_object_request>
 8013542:	4604      	mov	r4, r0
 8013544:	b318      	cbz	r0, 801358e <uxr_prepare_output_stream_fragmented+0x146>
 8013546:	a907      	add	r1, sp, #28
 8013548:	4630      	mov	r0, r6
 801354a:	f001 f80d 	bl	8014568 <uxr_serialize_WRITE_DATA_Payload_Data>
 801354e:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8013552:	4630      	mov	r0, r6
 8013554:	1a52      	subs	r2, r2, r1
 8013556:	f7f8 fbf1 	bl	800bd3c <ucdr_init_buffer>
 801355a:	9b05      	ldr	r3, [sp, #20]
 801355c:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8013560:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8013562:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8013566:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8013568:	491b      	ldr	r1, [pc, #108]	@ (80135d8 <uxr_prepare_output_stream_fragmented+0x190>)
 801356a:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 801356e:	4630      	mov	r0, r6
 8013570:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8013574:	462a      	mov	r2, r5
 8013576:	f7f8 fbb5 	bl	800bce4 <ucdr_set_on_full_buffer_callback>
 801357a:	4620      	mov	r0, r4
 801357c:	b011      	add	sp, #68	@ 0x44
 801357e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013582:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8013584:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8013586:	4628      	mov	r0, r5
 8013588:	4798      	blx	r3
 801358a:	b920      	cbnz	r0, 8013596 <uxr_prepare_output_stream_fragmented+0x14e>
 801358c:	2400      	movs	r4, #0
 801358e:	4620      	mov	r0, r4
 8013590:	b011      	add	sp, #68	@ 0x44
 8013592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013596:	4620      	mov	r0, r4
 8013598:	f005 f8b2 	bl	8018700 <get_available_free_slots>
 801359c:	2800      	cmp	r0, #0
 801359e:	f47f af6d 	bne.w	801347c <uxr_prepare_output_stream_fragmented+0x34>
 80135a2:	e7f3      	b.n	801358c <uxr_prepare_output_stream_fragmented+0x144>
 80135a4:	4638      	mov	r0, r7
 80135a6:	2101      	movs	r1, #1
 80135a8:	f005 f8ca 	bl	8018740 <uxr_seq_num_add>
 80135ac:	8921      	ldrh	r1, [r4, #8]
 80135ae:	fbb0 f2f1 	udiv	r2, r0, r1
 80135b2:	fb01 0912 	mls	r9, r1, r2, r0
 80135b6:	fa1f f289 	uxth.w	r2, r9
 80135ba:	6863      	ldr	r3, [r4, #4]
 80135bc:	fbb3 f9f1 	udiv	r9, r3, r1
 80135c0:	6823      	ldr	r3, [r4, #0]
 80135c2:	fb02 f909 	mul.w	r9, r2, r9
 80135c6:	f109 0904 	add.w	r9, r9, #4
 80135ca:	4499      	add	r9, r3
 80135cc:	4607      	mov	r7, r0
 80135ce:	7b23      	ldrb	r3, [r4, #12]
 80135d0:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80135d4:	e76b      	b.n	80134ae <uxr_prepare_output_stream_fragmented+0x66>
 80135d6:	bf00      	nop
 80135d8:	080132d5 	.word	0x080132d5

080135dc <uxr_serialize_message_header>:
 80135dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135de:	b083      	sub	sp, #12
 80135e0:	4616      	mov	r6, r2
 80135e2:	4604      	mov	r4, r0
 80135e4:	9301      	str	r3, [sp, #4]
 80135e6:	460d      	mov	r5, r1
 80135e8:	9f08      	ldr	r7, [sp, #32]
 80135ea:	f7f7 f8c5 	bl	800a778 <ucdr_serialize_uint8_t>
 80135ee:	4631      	mov	r1, r6
 80135f0:	4620      	mov	r0, r4
 80135f2:	f7f7 f8c1 	bl	800a778 <ucdr_serialize_uint8_t>
 80135f6:	9a01      	ldr	r2, [sp, #4]
 80135f8:	2101      	movs	r1, #1
 80135fa:	4620      	mov	r0, r4
 80135fc:	f7f7 f968 	bl	800a8d0 <ucdr_serialize_endian_uint16_t>
 8013600:	062b      	lsls	r3, r5, #24
 8013602:	d501      	bpl.n	8013608 <uxr_serialize_message_header+0x2c>
 8013604:	b003      	add	sp, #12
 8013606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013608:	2204      	movs	r2, #4
 801360a:	4639      	mov	r1, r7
 801360c:	4620      	mov	r0, r4
 801360e:	b003      	add	sp, #12
 8013610:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013614:	f7fd b870 	b.w	80106f8 <ucdr_serialize_array_uint8_t>

08013618 <uxr_deserialize_message_header>:
 8013618:	b5f0      	push	{r4, r5, r6, r7, lr}
 801361a:	b083      	sub	sp, #12
 801361c:	4616      	mov	r6, r2
 801361e:	4604      	mov	r4, r0
 8013620:	9301      	str	r3, [sp, #4]
 8013622:	460d      	mov	r5, r1
 8013624:	9f08      	ldr	r7, [sp, #32]
 8013626:	f7f7 f8bd 	bl	800a7a4 <ucdr_deserialize_uint8_t>
 801362a:	4631      	mov	r1, r6
 801362c:	4620      	mov	r0, r4
 801362e:	f7f7 f8b9 	bl	800a7a4 <ucdr_deserialize_uint8_t>
 8013632:	9a01      	ldr	r2, [sp, #4]
 8013634:	2101      	movs	r1, #1
 8013636:	4620      	mov	r0, r4
 8013638:	f7f7 fa3e 	bl	800aab8 <ucdr_deserialize_endian_uint16_t>
 801363c:	f995 3000 	ldrsb.w	r3, [r5]
 8013640:	2b00      	cmp	r3, #0
 8013642:	da01      	bge.n	8013648 <uxr_deserialize_message_header+0x30>
 8013644:	b003      	add	sp, #12
 8013646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013648:	2204      	movs	r2, #4
 801364a:	4639      	mov	r1, r7
 801364c:	4620      	mov	r0, r4
 801364e:	b003      	add	sp, #12
 8013650:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013654:	f7fd b8b4 	b.w	80107c0 <ucdr_deserialize_array_uint8_t>

08013658 <uxr_serialize_submessage_header>:
 8013658:	b530      	push	{r4, r5, lr}
 801365a:	b083      	sub	sp, #12
 801365c:	4615      	mov	r5, r2
 801365e:	4604      	mov	r4, r0
 8013660:	9301      	str	r3, [sp, #4]
 8013662:	f7f7 f889 	bl	800a778 <ucdr_serialize_uint8_t>
 8013666:	4629      	mov	r1, r5
 8013668:	4620      	mov	r0, r4
 801366a:	f7f7 f885 	bl	800a778 <ucdr_serialize_uint8_t>
 801366e:	9a01      	ldr	r2, [sp, #4]
 8013670:	2101      	movs	r1, #1
 8013672:	4620      	mov	r0, r4
 8013674:	b003      	add	sp, #12
 8013676:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801367a:	f7f7 b929 	b.w	800a8d0 <ucdr_serialize_endian_uint16_t>
 801367e:	bf00      	nop

08013680 <uxr_deserialize_submessage_header>:
 8013680:	b530      	push	{r4, r5, lr}
 8013682:	b083      	sub	sp, #12
 8013684:	4615      	mov	r5, r2
 8013686:	4604      	mov	r4, r0
 8013688:	9301      	str	r3, [sp, #4]
 801368a:	f7f7 f88b 	bl	800a7a4 <ucdr_deserialize_uint8_t>
 801368e:	4629      	mov	r1, r5
 8013690:	4620      	mov	r0, r4
 8013692:	f7f7 f887 	bl	800a7a4 <ucdr_deserialize_uint8_t>
 8013696:	9a01      	ldr	r2, [sp, #4]
 8013698:	2101      	movs	r1, #1
 801369a:	4620      	mov	r0, r4
 801369c:	b003      	add	sp, #12
 801369e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80136a2:	f7f7 ba09 	b.w	800aab8 <ucdr_deserialize_endian_uint16_t>
 80136a6:	bf00      	nop

080136a8 <uxr_serialize_CLIENT_Representation>:
 80136a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80136ac:	2204      	movs	r2, #4
 80136ae:	460e      	mov	r6, r1
 80136b0:	4605      	mov	r5, r0
 80136b2:	f7fd f821 	bl	80106f8 <ucdr_serialize_array_uint8_t>
 80136b6:	2202      	movs	r2, #2
 80136b8:	4607      	mov	r7, r0
 80136ba:	1d31      	adds	r1, r6, #4
 80136bc:	4628      	mov	r0, r5
 80136be:	f7fd f81b 	bl	80106f8 <ucdr_serialize_array_uint8_t>
 80136c2:	4038      	ands	r0, r7
 80136c4:	2202      	movs	r2, #2
 80136c6:	1db1      	adds	r1, r6, #6
 80136c8:	b2c7      	uxtb	r7, r0
 80136ca:	4628      	mov	r0, r5
 80136cc:	f7fd f814 	bl	80106f8 <ucdr_serialize_array_uint8_t>
 80136d0:	2204      	movs	r2, #4
 80136d2:	4007      	ands	r7, r0
 80136d4:	f106 0108 	add.w	r1, r6, #8
 80136d8:	4628      	mov	r0, r5
 80136da:	f7fd f80d 	bl	80106f8 <ucdr_serialize_array_uint8_t>
 80136de:	7b31      	ldrb	r1, [r6, #12]
 80136e0:	4007      	ands	r7, r0
 80136e2:	4628      	mov	r0, r5
 80136e4:	f7f7 f848 	bl	800a778 <ucdr_serialize_uint8_t>
 80136e8:	7b71      	ldrb	r1, [r6, #13]
 80136ea:	4007      	ands	r7, r0
 80136ec:	4628      	mov	r0, r5
 80136ee:	f7f7 f815 	bl	800a71c <ucdr_serialize_bool>
 80136f2:	7b73      	ldrb	r3, [r6, #13]
 80136f4:	ea07 0800 	and.w	r8, r7, r0
 80136f8:	b93b      	cbnz	r3, 801370a <uxr_serialize_CLIENT_Representation+0x62>
 80136fa:	8bb1      	ldrh	r1, [r6, #28]
 80136fc:	4628      	mov	r0, r5
 80136fe:	f7f7 f867 	bl	800a7d0 <ucdr_serialize_uint16_t>
 8013702:	ea08 0000 	and.w	r0, r8, r0
 8013706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801370a:	6931      	ldr	r1, [r6, #16]
 801370c:	4628      	mov	r0, r5
 801370e:	f7f7 fa49 	bl	800aba4 <ucdr_serialize_uint32_t>
 8013712:	6933      	ldr	r3, [r6, #16]
 8013714:	b1e3      	cbz	r3, 8013750 <uxr_serialize_CLIENT_Representation+0xa8>
 8013716:	b1c0      	cbz	r0, 801374a <uxr_serialize_CLIENT_Representation+0xa2>
 8013718:	4637      	mov	r7, r6
 801371a:	f04f 0900 	mov.w	r9, #0
 801371e:	e001      	b.n	8013724 <uxr_serialize_CLIENT_Representation+0x7c>
 8013720:	3708      	adds	r7, #8
 8013722:	b194      	cbz	r4, 801374a <uxr_serialize_CLIENT_Representation+0xa2>
 8013724:	6979      	ldr	r1, [r7, #20]
 8013726:	4628      	mov	r0, r5
 8013728:	f004 faaa 	bl	8017c80 <ucdr_serialize_string>
 801372c:	69b9      	ldr	r1, [r7, #24]
 801372e:	4604      	mov	r4, r0
 8013730:	4628      	mov	r0, r5
 8013732:	f004 faa5 	bl	8017c80 <ucdr_serialize_string>
 8013736:	6933      	ldr	r3, [r6, #16]
 8013738:	f109 0901 	add.w	r9, r9, #1
 801373c:	4004      	ands	r4, r0
 801373e:	4599      	cmp	r9, r3
 8013740:	b2e4      	uxtb	r4, r4
 8013742:	d3ed      	bcc.n	8013720 <uxr_serialize_CLIENT_Representation+0x78>
 8013744:	ea08 0804 	and.w	r8, r8, r4
 8013748:	e7d7      	b.n	80136fa <uxr_serialize_CLIENT_Representation+0x52>
 801374a:	f04f 0800 	mov.w	r8, #0
 801374e:	e7d4      	b.n	80136fa <uxr_serialize_CLIENT_Representation+0x52>
 8013750:	ea08 0800 	and.w	r8, r8, r0
 8013754:	e7d1      	b.n	80136fa <uxr_serialize_CLIENT_Representation+0x52>
 8013756:	bf00      	nop

08013758 <uxr_deserialize_CLIENT_Representation>:
 8013758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801375c:	2204      	movs	r2, #4
 801375e:	460c      	mov	r4, r1
 8013760:	4605      	mov	r5, r0
 8013762:	f7fd f82d 	bl	80107c0 <ucdr_deserialize_array_uint8_t>
 8013766:	2202      	movs	r2, #2
 8013768:	4607      	mov	r7, r0
 801376a:	1d21      	adds	r1, r4, #4
 801376c:	4628      	mov	r0, r5
 801376e:	f7fd f827 	bl	80107c0 <ucdr_deserialize_array_uint8_t>
 8013772:	4038      	ands	r0, r7
 8013774:	2202      	movs	r2, #2
 8013776:	1da1      	adds	r1, r4, #6
 8013778:	b2c6      	uxtb	r6, r0
 801377a:	4628      	mov	r0, r5
 801377c:	f7fd f820 	bl	80107c0 <ucdr_deserialize_array_uint8_t>
 8013780:	2204      	movs	r2, #4
 8013782:	4006      	ands	r6, r0
 8013784:	f104 0108 	add.w	r1, r4, #8
 8013788:	4628      	mov	r0, r5
 801378a:	f7fd f819 	bl	80107c0 <ucdr_deserialize_array_uint8_t>
 801378e:	f104 010c 	add.w	r1, r4, #12
 8013792:	4006      	ands	r6, r0
 8013794:	4628      	mov	r0, r5
 8013796:	f7f7 f805 	bl	800a7a4 <ucdr_deserialize_uint8_t>
 801379a:	f104 010d 	add.w	r1, r4, #13
 801379e:	ea06 0700 	and.w	r7, r6, r0
 80137a2:	4628      	mov	r0, r5
 80137a4:	f7f6 ffd0 	bl	800a748 <ucdr_deserialize_bool>
 80137a8:	7b63      	ldrb	r3, [r4, #13]
 80137aa:	4007      	ands	r7, r0
 80137ac:	b93b      	cbnz	r3, 80137be <uxr_deserialize_CLIENT_Representation+0x66>
 80137ae:	f104 011c 	add.w	r1, r4, #28
 80137b2:	4628      	mov	r0, r5
 80137b4:	f7f7 f90c 	bl	800a9d0 <ucdr_deserialize_uint16_t>
 80137b8:	4038      	ands	r0, r7
 80137ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80137be:	f104 0110 	add.w	r1, r4, #16
 80137c2:	4628      	mov	r0, r5
 80137c4:	f7f7 fb1e 	bl	800ae04 <ucdr_deserialize_uint32_t>
 80137c8:	6923      	ldr	r3, [r4, #16]
 80137ca:	2b01      	cmp	r3, #1
 80137cc:	d903      	bls.n	80137d6 <uxr_deserialize_CLIENT_Representation+0x7e>
 80137ce:	2301      	movs	r3, #1
 80137d0:	75ab      	strb	r3, [r5, #22]
 80137d2:	2700      	movs	r7, #0
 80137d4:	e7eb      	b.n	80137ae <uxr_deserialize_CLIENT_Representation+0x56>
 80137d6:	b30b      	cbz	r3, 801381c <uxr_deserialize_CLIENT_Representation+0xc4>
 80137d8:	2800      	cmp	r0, #0
 80137da:	d0fa      	beq.n	80137d2 <uxr_deserialize_CLIENT_Representation+0x7a>
 80137dc:	46a0      	mov	r8, r4
 80137de:	f04f 0900 	mov.w	r9, #0
 80137e2:	e001      	b.n	80137e8 <uxr_deserialize_CLIENT_Representation+0x90>
 80137e4:	2e00      	cmp	r6, #0
 80137e6:	d0f4      	beq.n	80137d2 <uxr_deserialize_CLIENT_Representation+0x7a>
 80137e8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80137ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80137f0:	4628      	mov	r0, r5
 80137f2:	f004 fa55 	bl	8017ca0 <ucdr_deserialize_string>
 80137f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80137fa:	4606      	mov	r6, r0
 80137fc:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8013800:	4628      	mov	r0, r5
 8013802:	f004 fa4d 	bl	8017ca0 <ucdr_deserialize_string>
 8013806:	6923      	ldr	r3, [r4, #16]
 8013808:	f109 0901 	add.w	r9, r9, #1
 801380c:	4006      	ands	r6, r0
 801380e:	4599      	cmp	r9, r3
 8013810:	f108 0808 	add.w	r8, r8, #8
 8013814:	b2f6      	uxtb	r6, r6
 8013816:	d3e5      	bcc.n	80137e4 <uxr_deserialize_CLIENT_Representation+0x8c>
 8013818:	4037      	ands	r7, r6
 801381a:	e7c8      	b.n	80137ae <uxr_deserialize_CLIENT_Representation+0x56>
 801381c:	4007      	ands	r7, r0
 801381e:	e7c6      	b.n	80137ae <uxr_deserialize_CLIENT_Representation+0x56>

08013820 <uxr_serialize_AGENT_Representation>:
 8013820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013824:	2204      	movs	r2, #4
 8013826:	460f      	mov	r7, r1
 8013828:	4605      	mov	r5, r0
 801382a:	f7fc ff65 	bl	80106f8 <ucdr_serialize_array_uint8_t>
 801382e:	2202      	movs	r2, #2
 8013830:	4604      	mov	r4, r0
 8013832:	1d39      	adds	r1, r7, #4
 8013834:	4628      	mov	r0, r5
 8013836:	f7fc ff5f 	bl	80106f8 <ucdr_serialize_array_uint8_t>
 801383a:	4020      	ands	r0, r4
 801383c:	2202      	movs	r2, #2
 801383e:	1db9      	adds	r1, r7, #6
 8013840:	b2c4      	uxtb	r4, r0
 8013842:	4628      	mov	r0, r5
 8013844:	f7fc ff58 	bl	80106f8 <ucdr_serialize_array_uint8_t>
 8013848:	7a39      	ldrb	r1, [r7, #8]
 801384a:	4004      	ands	r4, r0
 801384c:	4628      	mov	r0, r5
 801384e:	f7f6 ff65 	bl	800a71c <ucdr_serialize_bool>
 8013852:	7a3b      	ldrb	r3, [r7, #8]
 8013854:	ea00 0804 	and.w	r8, r0, r4
 8013858:	b913      	cbnz	r3, 8013860 <uxr_serialize_AGENT_Representation+0x40>
 801385a:	4640      	mov	r0, r8
 801385c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013860:	68f9      	ldr	r1, [r7, #12]
 8013862:	4628      	mov	r0, r5
 8013864:	f7f7 f99e 	bl	800aba4 <ucdr_serialize_uint32_t>
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	b303      	cbz	r3, 80138ae <uxr_serialize_AGENT_Representation+0x8e>
 801386c:	b1d0      	cbz	r0, 80138a4 <uxr_serialize_AGENT_Representation+0x84>
 801386e:	463e      	mov	r6, r7
 8013870:	f04f 0900 	mov.w	r9, #0
 8013874:	e001      	b.n	801387a <uxr_serialize_AGENT_Representation+0x5a>
 8013876:	3608      	adds	r6, #8
 8013878:	b1a4      	cbz	r4, 80138a4 <uxr_serialize_AGENT_Representation+0x84>
 801387a:	6931      	ldr	r1, [r6, #16]
 801387c:	4628      	mov	r0, r5
 801387e:	f004 f9ff 	bl	8017c80 <ucdr_serialize_string>
 8013882:	6971      	ldr	r1, [r6, #20]
 8013884:	4604      	mov	r4, r0
 8013886:	4628      	mov	r0, r5
 8013888:	f004 f9fa 	bl	8017c80 <ucdr_serialize_string>
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	f109 0901 	add.w	r9, r9, #1
 8013892:	4004      	ands	r4, r0
 8013894:	4599      	cmp	r9, r3
 8013896:	b2e4      	uxtb	r4, r4
 8013898:	d3ed      	bcc.n	8013876 <uxr_serialize_AGENT_Representation+0x56>
 801389a:	ea08 0804 	and.w	r8, r8, r4
 801389e:	4640      	mov	r0, r8
 80138a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138a4:	f04f 0800 	mov.w	r8, #0
 80138a8:	4640      	mov	r0, r8
 80138aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138ae:	ea08 0800 	and.w	r8, r8, r0
 80138b2:	e7d2      	b.n	801385a <uxr_serialize_AGENT_Representation+0x3a>

080138b4 <uxr_serialize_DATAWRITER_Representation>:
 80138b4:	b570      	push	{r4, r5, r6, lr}
 80138b6:	460d      	mov	r5, r1
 80138b8:	7809      	ldrb	r1, [r1, #0]
 80138ba:	4606      	mov	r6, r0
 80138bc:	f7f6 ff5c 	bl	800a778 <ucdr_serialize_uint8_t>
 80138c0:	4604      	mov	r4, r0
 80138c2:	b130      	cbz	r0, 80138d2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80138c4:	782b      	ldrb	r3, [r5, #0]
 80138c6:	2b02      	cmp	r3, #2
 80138c8:	d00c      	beq.n	80138e4 <uxr_serialize_DATAWRITER_Representation+0x30>
 80138ca:	2b03      	cmp	r3, #3
 80138cc:	d010      	beq.n	80138f0 <uxr_serialize_DATAWRITER_Representation+0x3c>
 80138ce:	2b01      	cmp	r3, #1
 80138d0:	d008      	beq.n	80138e4 <uxr_serialize_DATAWRITER_Representation+0x30>
 80138d2:	2202      	movs	r2, #2
 80138d4:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80138d8:	4630      	mov	r0, r6
 80138da:	f7fc ff0d 	bl	80106f8 <ucdr_serialize_array_uint8_t>
 80138de:	4020      	ands	r0, r4
 80138e0:	b2c0      	uxtb	r0, r0
 80138e2:	bd70      	pop	{r4, r5, r6, pc}
 80138e4:	6869      	ldr	r1, [r5, #4]
 80138e6:	4630      	mov	r0, r6
 80138e8:	f004 f9ca 	bl	8017c80 <ucdr_serialize_string>
 80138ec:	4604      	mov	r4, r0
 80138ee:	e7f0      	b.n	80138d2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80138f0:	4629      	mov	r1, r5
 80138f2:	4630      	mov	r0, r6
 80138f4:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80138f8:	3104      	adds	r1, #4
 80138fa:	f7fd f89b 	bl	8010a34 <ucdr_serialize_sequence_uint8_t>
 80138fe:	4604      	mov	r4, r0
 8013900:	e7e7      	b.n	80138d2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8013902:	bf00      	nop

08013904 <uxr_serialize_ObjectVariant.part.0>:
 8013904:	b570      	push	{r4, r5, r6, lr}
 8013906:	780b      	ldrb	r3, [r1, #0]
 8013908:	3b01      	subs	r3, #1
 801390a:	460c      	mov	r4, r1
 801390c:	4605      	mov	r5, r0
 801390e:	2b0d      	cmp	r3, #13
 8013910:	d854      	bhi.n	80139bc <uxr_serialize_ObjectVariant.part.0+0xb8>
 8013912:	e8df f003 	tbb	[pc, r3]
 8013916:	0730      	.short	0x0730
 8013918:	07071b1b 	.word	0x07071b1b
 801391c:	0c530707 	.word	0x0c530707
 8013920:	494e0c0c 	.word	0x494e0c0c
 8013924:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013928:	3104      	adds	r1, #4
 801392a:	f7ff bfc3 	b.w	80138b4 <uxr_serialize_DATAWRITER_Representation>
 801392e:	7909      	ldrb	r1, [r1, #4]
 8013930:	f7f6 ff22 	bl	800a778 <ucdr_serialize_uint8_t>
 8013934:	b1e8      	cbz	r0, 8013972 <uxr_serialize_ObjectVariant.part.0+0x6e>
 8013936:	7923      	ldrb	r3, [r4, #4]
 8013938:	2b01      	cmp	r3, #1
 801393a:	d001      	beq.n	8013940 <uxr_serialize_ObjectVariant.part.0+0x3c>
 801393c:	2b02      	cmp	r3, #2
 801393e:	d13d      	bne.n	80139bc <uxr_serialize_ObjectVariant.part.0+0xb8>
 8013940:	68a1      	ldr	r1, [r4, #8]
 8013942:	4628      	mov	r0, r5
 8013944:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013948:	f004 b99a 	b.w	8017c80 <ucdr_serialize_string>
 801394c:	7909      	ldrb	r1, [r1, #4]
 801394e:	f7f6 ff13 	bl	800a778 <ucdr_serialize_uint8_t>
 8013952:	4606      	mov	r6, r0
 8013954:	b120      	cbz	r0, 8013960 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8013956:	7923      	ldrb	r3, [r4, #4]
 8013958:	2b02      	cmp	r3, #2
 801395a:	d039      	beq.n	80139d0 <uxr_serialize_ObjectVariant.part.0+0xcc>
 801395c:	2b03      	cmp	r3, #3
 801395e:	d02f      	beq.n	80139c0 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8013960:	2202      	movs	r2, #2
 8013962:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8013966:	4628      	mov	r0, r5
 8013968:	f7fc fec6 	bl	80106f8 <ucdr_serialize_array_uint8_t>
 801396c:	4030      	ands	r0, r6
 801396e:	b2c0      	uxtb	r0, r0
 8013970:	bd70      	pop	{r4, r5, r6, pc}
 8013972:	2000      	movs	r0, #0
 8013974:	bd70      	pop	{r4, r5, r6, pc}
 8013976:	7909      	ldrb	r1, [r1, #4]
 8013978:	f7f6 fefe 	bl	800a778 <ucdr_serialize_uint8_t>
 801397c:	4606      	mov	r6, r0
 801397e:	b158      	cbz	r0, 8013998 <uxr_serialize_ObjectVariant.part.0+0x94>
 8013980:	7923      	ldrb	r3, [r4, #4]
 8013982:	2b02      	cmp	r3, #2
 8013984:	d003      	beq.n	801398e <uxr_serialize_ObjectVariant.part.0+0x8a>
 8013986:	2b03      	cmp	r3, #3
 8013988:	d028      	beq.n	80139dc <uxr_serialize_ObjectVariant.part.0+0xd8>
 801398a:	2b01      	cmp	r3, #1
 801398c:	d104      	bne.n	8013998 <uxr_serialize_ObjectVariant.part.0+0x94>
 801398e:	68a1      	ldr	r1, [r4, #8]
 8013990:	4628      	mov	r0, r5
 8013992:	f004 f975 	bl	8017c80 <ucdr_serialize_string>
 8013996:	4606      	mov	r6, r0
 8013998:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 801399c:	4628      	mov	r0, r5
 801399e:	f7f7 fc27 	bl	800b1f0 <ucdr_serialize_int16_t>
 80139a2:	4030      	ands	r0, r6
 80139a4:	b2c0      	uxtb	r0, r0
 80139a6:	bd70      	pop	{r4, r5, r6, pc}
 80139a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80139ac:	3104      	adds	r1, #4
 80139ae:	f7ff be7b 	b.w	80136a8 <uxr_serialize_CLIENT_Representation>
 80139b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80139b6:	3104      	adds	r1, #4
 80139b8:	f7ff bf32 	b.w	8013820 <uxr_serialize_AGENT_Representation>
 80139bc:	2001      	movs	r0, #1
 80139be:	bd70      	pop	{r4, r5, r6, pc}
 80139c0:	68a2      	ldr	r2, [r4, #8]
 80139c2:	f104 010c 	add.w	r1, r4, #12
 80139c6:	4628      	mov	r0, r5
 80139c8:	f7fd f834 	bl	8010a34 <ucdr_serialize_sequence_uint8_t>
 80139cc:	4606      	mov	r6, r0
 80139ce:	e7c7      	b.n	8013960 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80139d0:	68a1      	ldr	r1, [r4, #8]
 80139d2:	4628      	mov	r0, r5
 80139d4:	f004 f954 	bl	8017c80 <ucdr_serialize_string>
 80139d8:	4606      	mov	r6, r0
 80139da:	e7c1      	b.n	8013960 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80139dc:	68a2      	ldr	r2, [r4, #8]
 80139de:	f104 010c 	add.w	r1, r4, #12
 80139e2:	4628      	mov	r0, r5
 80139e4:	f7fd f826 	bl	8010a34 <ucdr_serialize_sequence_uint8_t>
 80139e8:	4606      	mov	r6, r0
 80139ea:	e7d5      	b.n	8013998 <uxr_serialize_ObjectVariant.part.0+0x94>

080139ec <uxr_deserialize_DATAWRITER_Representation>:
 80139ec:	b570      	push	{r4, r5, r6, lr}
 80139ee:	4606      	mov	r6, r0
 80139f0:	460d      	mov	r5, r1
 80139f2:	f7f6 fed7 	bl	800a7a4 <ucdr_deserialize_uint8_t>
 80139f6:	4604      	mov	r4, r0
 80139f8:	b130      	cbz	r0, 8013a08 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80139fa:	782b      	ldrb	r3, [r5, #0]
 80139fc:	2b02      	cmp	r3, #2
 80139fe:	d00c      	beq.n	8013a1a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8013a00:	2b03      	cmp	r3, #3
 8013a02:	d012      	beq.n	8013a2a <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8013a04:	2b01      	cmp	r3, #1
 8013a06:	d008      	beq.n	8013a1a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8013a08:	2202      	movs	r2, #2
 8013a0a:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8013a0e:	4630      	mov	r0, r6
 8013a10:	f7fc fed6 	bl	80107c0 <ucdr_deserialize_array_uint8_t>
 8013a14:	4020      	ands	r0, r4
 8013a16:	b2c0      	uxtb	r0, r0
 8013a18:	bd70      	pop	{r4, r5, r6, pc}
 8013a1a:	6869      	ldr	r1, [r5, #4]
 8013a1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013a20:	4630      	mov	r0, r6
 8013a22:	f004 f93d 	bl	8017ca0 <ucdr_deserialize_string>
 8013a26:	4604      	mov	r4, r0
 8013a28:	e7ee      	b.n	8013a08 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8013a2a:	1d2b      	adds	r3, r5, #4
 8013a2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013a30:	f105 0108 	add.w	r1, r5, #8
 8013a34:	4630      	mov	r0, r6
 8013a36:	f7fd f80f 	bl	8010a58 <ucdr_deserialize_sequence_uint8_t>
 8013a3a:	4604      	mov	r4, r0
 8013a3c:	e7e4      	b.n	8013a08 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8013a3e:	bf00      	nop

08013a40 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8013a40:	b570      	push	{r4, r5, r6, lr}
 8013a42:	460d      	mov	r5, r1
 8013a44:	7809      	ldrb	r1, [r1, #0]
 8013a46:	4606      	mov	r6, r0
 8013a48:	f7f6 fe68 	bl	800a71c <ucdr_serialize_bool>
 8013a4c:	782b      	ldrb	r3, [r5, #0]
 8013a4e:	4604      	mov	r4, r0
 8013a50:	b94b      	cbnz	r3, 8013a66 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8013a52:	7a29      	ldrb	r1, [r5, #8]
 8013a54:	4630      	mov	r0, r6
 8013a56:	f7f6 fe61 	bl	800a71c <ucdr_serialize_bool>
 8013a5a:	7a2b      	ldrb	r3, [r5, #8]
 8013a5c:	4004      	ands	r4, r0
 8013a5e:	b2e4      	uxtb	r4, r4
 8013a60:	b943      	cbnz	r3, 8013a74 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8013a62:	4620      	mov	r0, r4
 8013a64:	bd70      	pop	{r4, r5, r6, pc}
 8013a66:	6869      	ldr	r1, [r5, #4]
 8013a68:	4630      	mov	r0, r6
 8013a6a:	f004 f909 	bl	8017c80 <ucdr_serialize_string>
 8013a6e:	4004      	ands	r4, r0
 8013a70:	b2e4      	uxtb	r4, r4
 8013a72:	e7ee      	b.n	8013a52 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8013a74:	68e9      	ldr	r1, [r5, #12]
 8013a76:	4630      	mov	r0, r6
 8013a78:	f004 f902 	bl	8017c80 <ucdr_serialize_string>
 8013a7c:	4004      	ands	r4, r0
 8013a7e:	4620      	mov	r0, r4
 8013a80:	bd70      	pop	{r4, r5, r6, pc}
 8013a82:	bf00      	nop

08013a84 <uxr_serialize_OBJK_Topic_Binary>:
 8013a84:	b570      	push	{r4, r5, r6, lr}
 8013a86:	460d      	mov	r5, r1
 8013a88:	6809      	ldr	r1, [r1, #0]
 8013a8a:	4606      	mov	r6, r0
 8013a8c:	f004 f8f8 	bl	8017c80 <ucdr_serialize_string>
 8013a90:	7929      	ldrb	r1, [r5, #4]
 8013a92:	4604      	mov	r4, r0
 8013a94:	4630      	mov	r0, r6
 8013a96:	f7f6 fe41 	bl	800a71c <ucdr_serialize_bool>
 8013a9a:	792b      	ldrb	r3, [r5, #4]
 8013a9c:	4004      	ands	r4, r0
 8013a9e:	b2e4      	uxtb	r4, r4
 8013aa0:	b943      	cbnz	r3, 8013ab4 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8013aa2:	7b29      	ldrb	r1, [r5, #12]
 8013aa4:	4630      	mov	r0, r6
 8013aa6:	f7f6 fe39 	bl	800a71c <ucdr_serialize_bool>
 8013aaa:	7b2b      	ldrb	r3, [r5, #12]
 8013aac:	4004      	ands	r4, r0
 8013aae:	b93b      	cbnz	r3, 8013ac0 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8013ab0:	4620      	mov	r0, r4
 8013ab2:	bd70      	pop	{r4, r5, r6, pc}
 8013ab4:	68a9      	ldr	r1, [r5, #8]
 8013ab6:	4630      	mov	r0, r6
 8013ab8:	f004 f8e2 	bl	8017c80 <ucdr_serialize_string>
 8013abc:	4004      	ands	r4, r0
 8013abe:	e7f0      	b.n	8013aa2 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8013ac0:	6929      	ldr	r1, [r5, #16]
 8013ac2:	4630      	mov	r0, r6
 8013ac4:	f004 f8dc 	bl	8017c80 <ucdr_serialize_string>
 8013ac8:	4004      	ands	r4, r0
 8013aca:	b2e4      	uxtb	r4, r4
 8013acc:	4620      	mov	r0, r4
 8013ace:	bd70      	pop	{r4, r5, r6, pc}

08013ad0 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8013ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ad4:	460c      	mov	r4, r1
 8013ad6:	7809      	ldrb	r1, [r1, #0]
 8013ad8:	4606      	mov	r6, r0
 8013ada:	f7f6 fe1f 	bl	800a71c <ucdr_serialize_bool>
 8013ade:	7823      	ldrb	r3, [r4, #0]
 8013ae0:	4605      	mov	r5, r0
 8013ae2:	b96b      	cbnz	r3, 8013b00 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8013ae4:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8013ae8:	4630      	mov	r0, r6
 8013aea:	f7f6 fe17 	bl	800a71c <ucdr_serialize_bool>
 8013aee:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8013af2:	4005      	ands	r5, r0
 8013af4:	b2ed      	uxtb	r5, r5
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d169      	bne.n	8013bce <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8013afa:	4628      	mov	r0, r5
 8013afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b00:	6861      	ldr	r1, [r4, #4]
 8013b02:	4630      	mov	r0, r6
 8013b04:	f7f7 f84e 	bl	800aba4 <ucdr_serialize_uint32_t>
 8013b08:	6863      	ldr	r3, [r4, #4]
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d06b      	beq.n	8013be6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8013b0e:	2800      	cmp	r0, #0
 8013b10:	d067      	beq.n	8013be2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013b12:	68a1      	ldr	r1, [r4, #8]
 8013b14:	4630      	mov	r0, r6
 8013b16:	f004 f8b3 	bl	8017c80 <ucdr_serialize_string>
 8013b1a:	6863      	ldr	r3, [r4, #4]
 8013b1c:	2b01      	cmp	r3, #1
 8013b1e:	d953      	bls.n	8013bc8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013b20:	2800      	cmp	r0, #0
 8013b22:	d05e      	beq.n	8013be2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013b24:	68e1      	ldr	r1, [r4, #12]
 8013b26:	4630      	mov	r0, r6
 8013b28:	f004 f8aa 	bl	8017c80 <ucdr_serialize_string>
 8013b2c:	6863      	ldr	r3, [r4, #4]
 8013b2e:	2b02      	cmp	r3, #2
 8013b30:	d94a      	bls.n	8013bc8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013b32:	2800      	cmp	r0, #0
 8013b34:	d055      	beq.n	8013be2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013b36:	6921      	ldr	r1, [r4, #16]
 8013b38:	4630      	mov	r0, r6
 8013b3a:	f004 f8a1 	bl	8017c80 <ucdr_serialize_string>
 8013b3e:	6863      	ldr	r3, [r4, #4]
 8013b40:	2b03      	cmp	r3, #3
 8013b42:	d941      	bls.n	8013bc8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013b44:	2800      	cmp	r0, #0
 8013b46:	d04c      	beq.n	8013be2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013b48:	6961      	ldr	r1, [r4, #20]
 8013b4a:	4630      	mov	r0, r6
 8013b4c:	f004 f898 	bl	8017c80 <ucdr_serialize_string>
 8013b50:	6863      	ldr	r3, [r4, #4]
 8013b52:	2b04      	cmp	r3, #4
 8013b54:	d938      	bls.n	8013bc8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013b56:	2800      	cmp	r0, #0
 8013b58:	d043      	beq.n	8013be2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013b5a:	69a1      	ldr	r1, [r4, #24]
 8013b5c:	4630      	mov	r0, r6
 8013b5e:	f004 f88f 	bl	8017c80 <ucdr_serialize_string>
 8013b62:	6863      	ldr	r3, [r4, #4]
 8013b64:	2b05      	cmp	r3, #5
 8013b66:	d92f      	bls.n	8013bc8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013b68:	2800      	cmp	r0, #0
 8013b6a:	d03a      	beq.n	8013be2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013b6c:	69e1      	ldr	r1, [r4, #28]
 8013b6e:	4630      	mov	r0, r6
 8013b70:	f004 f886 	bl	8017c80 <ucdr_serialize_string>
 8013b74:	6863      	ldr	r3, [r4, #4]
 8013b76:	2b06      	cmp	r3, #6
 8013b78:	d926      	bls.n	8013bc8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013b7a:	b390      	cbz	r0, 8013be2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013b7c:	6a21      	ldr	r1, [r4, #32]
 8013b7e:	4630      	mov	r0, r6
 8013b80:	f004 f87e 	bl	8017c80 <ucdr_serialize_string>
 8013b84:	6863      	ldr	r3, [r4, #4]
 8013b86:	2b07      	cmp	r3, #7
 8013b88:	d91e      	bls.n	8013bc8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013b8a:	b350      	cbz	r0, 8013be2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013b8c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8013b8e:	4630      	mov	r0, r6
 8013b90:	f004 f876 	bl	8017c80 <ucdr_serialize_string>
 8013b94:	6863      	ldr	r3, [r4, #4]
 8013b96:	2b08      	cmp	r3, #8
 8013b98:	d916      	bls.n	8013bc8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013b9a:	b310      	cbz	r0, 8013be2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013b9c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8013b9e:	4630      	mov	r0, r6
 8013ba0:	f004 f86e 	bl	8017c80 <ucdr_serialize_string>
 8013ba4:	6863      	ldr	r3, [r4, #4]
 8013ba6:	2b09      	cmp	r3, #9
 8013ba8:	d90e      	bls.n	8013bc8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013baa:	b1d0      	cbz	r0, 8013be2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013bac:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8013bb0:	2709      	movs	r7, #9
 8013bb2:	e000      	b.n	8013bb6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8013bb4:	b1a8      	cbz	r0, 8013be2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013bb6:	f858 1b04 	ldr.w	r1, [r8], #4
 8013bba:	4630      	mov	r0, r6
 8013bbc:	f004 f860 	bl	8017c80 <ucdr_serialize_string>
 8013bc0:	6862      	ldr	r2, [r4, #4]
 8013bc2:	3701      	adds	r7, #1
 8013bc4:	4297      	cmp	r7, r2
 8013bc6:	d3f5      	bcc.n	8013bb4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8013bc8:	4005      	ands	r5, r0
 8013bca:	b2ed      	uxtb	r5, r5
 8013bcc:	e78a      	b.n	8013ae4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8013bce:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013bd0:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8013bd4:	4630      	mov	r0, r6
 8013bd6:	f7fc ff2d 	bl	8010a34 <ucdr_serialize_sequence_uint8_t>
 8013bda:	4005      	ands	r5, r0
 8013bdc:	4628      	mov	r0, r5
 8013bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013be2:	2500      	movs	r5, #0
 8013be4:	e77e      	b.n	8013ae4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8013be6:	4028      	ands	r0, r5
 8013be8:	b2c5      	uxtb	r5, r0
 8013bea:	e77b      	b.n	8013ae4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08013bec <uxr_serialize_OBJK_Publisher_Binary>:
 8013bec:	b570      	push	{r4, r5, r6, lr}
 8013bee:	460d      	mov	r5, r1
 8013bf0:	7809      	ldrb	r1, [r1, #0]
 8013bf2:	4606      	mov	r6, r0
 8013bf4:	f7f6 fd92 	bl	800a71c <ucdr_serialize_bool>
 8013bf8:	782b      	ldrb	r3, [r5, #0]
 8013bfa:	4604      	mov	r4, r0
 8013bfc:	b94b      	cbnz	r3, 8013c12 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8013bfe:	7a29      	ldrb	r1, [r5, #8]
 8013c00:	4630      	mov	r0, r6
 8013c02:	f7f6 fd8b 	bl	800a71c <ucdr_serialize_bool>
 8013c06:	7a2b      	ldrb	r3, [r5, #8]
 8013c08:	4004      	ands	r4, r0
 8013c0a:	b2e4      	uxtb	r4, r4
 8013c0c:	b943      	cbnz	r3, 8013c20 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8013c0e:	4620      	mov	r0, r4
 8013c10:	bd70      	pop	{r4, r5, r6, pc}
 8013c12:	6869      	ldr	r1, [r5, #4]
 8013c14:	4630      	mov	r0, r6
 8013c16:	f004 f833 	bl	8017c80 <ucdr_serialize_string>
 8013c1a:	4004      	ands	r4, r0
 8013c1c:	b2e4      	uxtb	r4, r4
 8013c1e:	e7ee      	b.n	8013bfe <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8013c20:	f105 010c 	add.w	r1, r5, #12
 8013c24:	4630      	mov	r0, r6
 8013c26:	f7ff ff53 	bl	8013ad0 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8013c2a:	4004      	ands	r4, r0
 8013c2c:	4620      	mov	r0, r4
 8013c2e:	bd70      	pop	{r4, r5, r6, pc}

08013c30 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8013c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c34:	460c      	mov	r4, r1
 8013c36:	7809      	ldrb	r1, [r1, #0]
 8013c38:	4606      	mov	r6, r0
 8013c3a:	f7f6 fd6f 	bl	800a71c <ucdr_serialize_bool>
 8013c3e:	7823      	ldrb	r3, [r4, #0]
 8013c40:	4605      	mov	r5, r0
 8013c42:	b96b      	cbnz	r3, 8013c60 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8013c44:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8013c48:	4630      	mov	r0, r6
 8013c4a:	f7f6 fd67 	bl	800a71c <ucdr_serialize_bool>
 8013c4e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8013c52:	4005      	ands	r5, r0
 8013c54:	b2ed      	uxtb	r5, r5
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d169      	bne.n	8013d2e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8013c5a:	4628      	mov	r0, r5
 8013c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c60:	6861      	ldr	r1, [r4, #4]
 8013c62:	4630      	mov	r0, r6
 8013c64:	f7f6 ff9e 	bl	800aba4 <ucdr_serialize_uint32_t>
 8013c68:	6863      	ldr	r3, [r4, #4]
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d06b      	beq.n	8013d46 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8013c6e:	2800      	cmp	r0, #0
 8013c70:	d067      	beq.n	8013d42 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013c72:	68a1      	ldr	r1, [r4, #8]
 8013c74:	4630      	mov	r0, r6
 8013c76:	f004 f803 	bl	8017c80 <ucdr_serialize_string>
 8013c7a:	6863      	ldr	r3, [r4, #4]
 8013c7c:	2b01      	cmp	r3, #1
 8013c7e:	d953      	bls.n	8013d28 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013c80:	2800      	cmp	r0, #0
 8013c82:	d05e      	beq.n	8013d42 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013c84:	68e1      	ldr	r1, [r4, #12]
 8013c86:	4630      	mov	r0, r6
 8013c88:	f003 fffa 	bl	8017c80 <ucdr_serialize_string>
 8013c8c:	6863      	ldr	r3, [r4, #4]
 8013c8e:	2b02      	cmp	r3, #2
 8013c90:	d94a      	bls.n	8013d28 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013c92:	2800      	cmp	r0, #0
 8013c94:	d055      	beq.n	8013d42 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013c96:	6921      	ldr	r1, [r4, #16]
 8013c98:	4630      	mov	r0, r6
 8013c9a:	f003 fff1 	bl	8017c80 <ucdr_serialize_string>
 8013c9e:	6863      	ldr	r3, [r4, #4]
 8013ca0:	2b03      	cmp	r3, #3
 8013ca2:	d941      	bls.n	8013d28 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013ca4:	2800      	cmp	r0, #0
 8013ca6:	d04c      	beq.n	8013d42 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013ca8:	6961      	ldr	r1, [r4, #20]
 8013caa:	4630      	mov	r0, r6
 8013cac:	f003 ffe8 	bl	8017c80 <ucdr_serialize_string>
 8013cb0:	6863      	ldr	r3, [r4, #4]
 8013cb2:	2b04      	cmp	r3, #4
 8013cb4:	d938      	bls.n	8013d28 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013cb6:	2800      	cmp	r0, #0
 8013cb8:	d043      	beq.n	8013d42 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013cba:	69a1      	ldr	r1, [r4, #24]
 8013cbc:	4630      	mov	r0, r6
 8013cbe:	f003 ffdf 	bl	8017c80 <ucdr_serialize_string>
 8013cc2:	6863      	ldr	r3, [r4, #4]
 8013cc4:	2b05      	cmp	r3, #5
 8013cc6:	d92f      	bls.n	8013d28 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013cc8:	2800      	cmp	r0, #0
 8013cca:	d03a      	beq.n	8013d42 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013ccc:	69e1      	ldr	r1, [r4, #28]
 8013cce:	4630      	mov	r0, r6
 8013cd0:	f003 ffd6 	bl	8017c80 <ucdr_serialize_string>
 8013cd4:	6863      	ldr	r3, [r4, #4]
 8013cd6:	2b06      	cmp	r3, #6
 8013cd8:	d926      	bls.n	8013d28 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013cda:	b390      	cbz	r0, 8013d42 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013cdc:	6a21      	ldr	r1, [r4, #32]
 8013cde:	4630      	mov	r0, r6
 8013ce0:	f003 ffce 	bl	8017c80 <ucdr_serialize_string>
 8013ce4:	6863      	ldr	r3, [r4, #4]
 8013ce6:	2b07      	cmp	r3, #7
 8013ce8:	d91e      	bls.n	8013d28 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013cea:	b350      	cbz	r0, 8013d42 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013cec:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8013cee:	4630      	mov	r0, r6
 8013cf0:	f003 ffc6 	bl	8017c80 <ucdr_serialize_string>
 8013cf4:	6863      	ldr	r3, [r4, #4]
 8013cf6:	2b08      	cmp	r3, #8
 8013cf8:	d916      	bls.n	8013d28 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013cfa:	b310      	cbz	r0, 8013d42 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013cfc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8013cfe:	4630      	mov	r0, r6
 8013d00:	f003 ffbe 	bl	8017c80 <ucdr_serialize_string>
 8013d04:	6863      	ldr	r3, [r4, #4]
 8013d06:	2b09      	cmp	r3, #9
 8013d08:	d90e      	bls.n	8013d28 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013d0a:	b1d0      	cbz	r0, 8013d42 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013d0c:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8013d10:	2709      	movs	r7, #9
 8013d12:	e000      	b.n	8013d16 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8013d14:	b1a8      	cbz	r0, 8013d42 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013d16:	f858 1b04 	ldr.w	r1, [r8], #4
 8013d1a:	4630      	mov	r0, r6
 8013d1c:	f003 ffb0 	bl	8017c80 <ucdr_serialize_string>
 8013d20:	6862      	ldr	r2, [r4, #4]
 8013d22:	3701      	adds	r7, #1
 8013d24:	4297      	cmp	r7, r2
 8013d26:	d3f5      	bcc.n	8013d14 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8013d28:	4005      	ands	r5, r0
 8013d2a:	b2ed      	uxtb	r5, r5
 8013d2c:	e78a      	b.n	8013c44 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8013d2e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013d30:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8013d34:	4630      	mov	r0, r6
 8013d36:	f7fc fe7d 	bl	8010a34 <ucdr_serialize_sequence_uint8_t>
 8013d3a:	4005      	ands	r5, r0
 8013d3c:	4628      	mov	r0, r5
 8013d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d42:	2500      	movs	r5, #0
 8013d44:	e77e      	b.n	8013c44 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8013d46:	4028      	ands	r0, r5
 8013d48:	b2c5      	uxtb	r5, r0
 8013d4a:	e77b      	b.n	8013c44 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08013d4c <uxr_serialize_OBJK_Subscriber_Binary>:
 8013d4c:	b570      	push	{r4, r5, r6, lr}
 8013d4e:	460d      	mov	r5, r1
 8013d50:	7809      	ldrb	r1, [r1, #0]
 8013d52:	4606      	mov	r6, r0
 8013d54:	f7f6 fce2 	bl	800a71c <ucdr_serialize_bool>
 8013d58:	782b      	ldrb	r3, [r5, #0]
 8013d5a:	4604      	mov	r4, r0
 8013d5c:	b94b      	cbnz	r3, 8013d72 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8013d5e:	7a29      	ldrb	r1, [r5, #8]
 8013d60:	4630      	mov	r0, r6
 8013d62:	f7f6 fcdb 	bl	800a71c <ucdr_serialize_bool>
 8013d66:	7a2b      	ldrb	r3, [r5, #8]
 8013d68:	4004      	ands	r4, r0
 8013d6a:	b2e4      	uxtb	r4, r4
 8013d6c:	b943      	cbnz	r3, 8013d80 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8013d6e:	4620      	mov	r0, r4
 8013d70:	bd70      	pop	{r4, r5, r6, pc}
 8013d72:	6869      	ldr	r1, [r5, #4]
 8013d74:	4630      	mov	r0, r6
 8013d76:	f003 ff83 	bl	8017c80 <ucdr_serialize_string>
 8013d7a:	4004      	ands	r4, r0
 8013d7c:	b2e4      	uxtb	r4, r4
 8013d7e:	e7ee      	b.n	8013d5e <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8013d80:	f105 010c 	add.w	r1, r5, #12
 8013d84:	4630      	mov	r0, r6
 8013d86:	f7ff ff53 	bl	8013c30 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8013d8a:	4004      	ands	r4, r0
 8013d8c:	4620      	mov	r0, r4
 8013d8e:	bd70      	pop	{r4, r5, r6, pc}

08013d90 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8013d90:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8013d94:	4688      	mov	r8, r1
 8013d96:	8809      	ldrh	r1, [r1, #0]
 8013d98:	4681      	mov	r9, r0
 8013d9a:	f7f6 fd19 	bl	800a7d0 <ucdr_serialize_uint16_t>
 8013d9e:	f898 1002 	ldrb.w	r1, [r8, #2]
 8013da2:	4606      	mov	r6, r0
 8013da4:	4648      	mov	r0, r9
 8013da6:	f7f6 fcb9 	bl	800a71c <ucdr_serialize_bool>
 8013daa:	f898 3002 	ldrb.w	r3, [r8, #2]
 8013dae:	4006      	ands	r6, r0
 8013db0:	b2f5      	uxtb	r5, r6
 8013db2:	b9eb      	cbnz	r3, 8013df0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8013db4:	f898 1006 	ldrb.w	r1, [r8, #6]
 8013db8:	4648      	mov	r0, r9
 8013dba:	f7f6 fcaf 	bl	800a71c <ucdr_serialize_bool>
 8013dbe:	f898 3006 	ldrb.w	r3, [r8, #6]
 8013dc2:	4005      	ands	r5, r0
 8013dc4:	bb7b      	cbnz	r3, 8013e26 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8013dc6:	f898 100c 	ldrb.w	r1, [r8, #12]
 8013dca:	4648      	mov	r0, r9
 8013dcc:	f7f6 fca6 	bl	800a71c <ucdr_serialize_bool>
 8013dd0:	f898 300c 	ldrb.w	r3, [r8, #12]
 8013dd4:	4005      	ands	r5, r0
 8013dd6:	b9f3      	cbnz	r3, 8013e16 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8013dd8:	f898 1014 	ldrb.w	r1, [r8, #20]
 8013ddc:	4648      	mov	r0, r9
 8013dde:	f7f6 fc9d 	bl	800a71c <ucdr_serialize_bool>
 8013de2:	f898 3014 	ldrb.w	r3, [r8, #20]
 8013de6:	4005      	ands	r5, r0
 8013de8:	b94b      	cbnz	r3, 8013dfe <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8013dea:	4628      	mov	r0, r5
 8013dec:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8013df0:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8013df4:	4648      	mov	r0, r9
 8013df6:	f7f6 fceb 	bl	800a7d0 <ucdr_serialize_uint16_t>
 8013dfa:	4005      	ands	r5, r0
 8013dfc:	e7da      	b.n	8013db4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8013dfe:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8013e02:	f108 011c 	add.w	r1, r8, #28
 8013e06:	4648      	mov	r0, r9
 8013e08:	f7fc fe14 	bl	8010a34 <ucdr_serialize_sequence_uint8_t>
 8013e0c:	4028      	ands	r0, r5
 8013e0e:	b2c5      	uxtb	r5, r0
 8013e10:	4628      	mov	r0, r5
 8013e12:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8013e16:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013e1a:	4648      	mov	r0, r9
 8013e1c:	f7f6 fec2 	bl	800aba4 <ucdr_serialize_uint32_t>
 8013e20:	4028      	ands	r0, r5
 8013e22:	b2c5      	uxtb	r5, r0
 8013e24:	e7d8      	b.n	8013dd8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8013e26:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8013e2a:	4648      	mov	r0, r9
 8013e2c:	f7f6 feba 	bl	800aba4 <ucdr_serialize_uint32_t>
 8013e30:	4028      	ands	r0, r5
 8013e32:	b2c5      	uxtb	r5, r0
 8013e34:	e7c7      	b.n	8013dc6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8013e36:	bf00      	nop

08013e38 <uxr_serialize_OBJK_DataReader_Binary>:
 8013e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e3a:	2202      	movs	r2, #2
 8013e3c:	460c      	mov	r4, r1
 8013e3e:	4606      	mov	r6, r0
 8013e40:	f7fc fc5a 	bl	80106f8 <ucdr_serialize_array_uint8_t>
 8013e44:	78a1      	ldrb	r1, [r4, #2]
 8013e46:	4605      	mov	r5, r0
 8013e48:	4630      	mov	r0, r6
 8013e4a:	f7f6 fc67 	bl	800a71c <ucdr_serialize_bool>
 8013e4e:	78a3      	ldrb	r3, [r4, #2]
 8013e50:	4005      	ands	r5, r0
 8013e52:	b2ed      	uxtb	r5, r5
 8013e54:	b90b      	cbnz	r3, 8013e5a <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8013e56:	4628      	mov	r0, r5
 8013e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e5a:	f104 0108 	add.w	r1, r4, #8
 8013e5e:	4630      	mov	r0, r6
 8013e60:	f7ff ff96 	bl	8013d90 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8013e64:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8013e68:	4607      	mov	r7, r0
 8013e6a:	4630      	mov	r0, r6
 8013e6c:	f7f6 fc56 	bl	800a71c <ucdr_serialize_bool>
 8013e70:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8013e74:	4038      	ands	r0, r7
 8013e76:	b2c7      	uxtb	r7, r0
 8013e78:	b95b      	cbnz	r3, 8013e92 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8013e7a:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8013e7e:	4630      	mov	r0, r6
 8013e80:	f7f6 fc4c 	bl	800a71c <ucdr_serialize_bool>
 8013e84:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8013e88:	4007      	ands	r7, r0
 8013e8a:	b94b      	cbnz	r3, 8013ea0 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8013e8c:	403d      	ands	r5, r7
 8013e8e:	4628      	mov	r0, r5
 8013e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e92:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 8013e96:	4630      	mov	r0, r6
 8013e98:	f7f7 f8da 	bl	800b050 <ucdr_serialize_uint64_t>
 8013e9c:	4007      	ands	r7, r0
 8013e9e:	e7ec      	b.n	8013e7a <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8013ea0:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8013ea2:	4630      	mov	r0, r6
 8013ea4:	f003 feec 	bl	8017c80 <ucdr_serialize_string>
 8013ea8:	4007      	ands	r7, r0
 8013eaa:	b2ff      	uxtb	r7, r7
 8013eac:	e7ee      	b.n	8013e8c <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8013eae:	bf00      	nop

08013eb0 <uxr_serialize_OBJK_DataWriter_Binary>:
 8013eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013eb2:	2202      	movs	r2, #2
 8013eb4:	460d      	mov	r5, r1
 8013eb6:	4606      	mov	r6, r0
 8013eb8:	f7fc fc1e 	bl	80106f8 <ucdr_serialize_array_uint8_t>
 8013ebc:	78a9      	ldrb	r1, [r5, #2]
 8013ebe:	4604      	mov	r4, r0
 8013ec0:	4630      	mov	r0, r6
 8013ec2:	f7f6 fc2b 	bl	800a71c <ucdr_serialize_bool>
 8013ec6:	78ab      	ldrb	r3, [r5, #2]
 8013ec8:	4004      	ands	r4, r0
 8013eca:	b2e4      	uxtb	r4, r4
 8013ecc:	b90b      	cbnz	r3, 8013ed2 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8013ece:	4620      	mov	r0, r4
 8013ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ed2:	f105 0108 	add.w	r1, r5, #8
 8013ed6:	4630      	mov	r0, r6
 8013ed8:	f7ff ff5a 	bl	8013d90 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8013edc:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8013ee0:	4607      	mov	r7, r0
 8013ee2:	4630      	mov	r0, r6
 8013ee4:	f7f6 fc1a 	bl	800a71c <ucdr_serialize_bool>
 8013ee8:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8013eec:	4038      	ands	r0, r7
 8013eee:	b2c7      	uxtb	r7, r0
 8013ef0:	b913      	cbnz	r3, 8013ef8 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8013ef2:	403c      	ands	r4, r7
 8013ef4:	4620      	mov	r0, r4
 8013ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ef8:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8013efc:	4630      	mov	r0, r6
 8013efe:	f7f7 f8a7 	bl	800b050 <ucdr_serialize_uint64_t>
 8013f02:	4007      	ands	r7, r0
 8013f04:	e7f5      	b.n	8013ef2 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8013f06:	bf00      	nop

08013f08 <uxr_deserialize_ObjectVariant>:
 8013f08:	b570      	push	{r4, r5, r6, lr}
 8013f0a:	4605      	mov	r5, r0
 8013f0c:	460e      	mov	r6, r1
 8013f0e:	f7f6 fc49 	bl	800a7a4 <ucdr_deserialize_uint8_t>
 8013f12:	b168      	cbz	r0, 8013f30 <uxr_deserialize_ObjectVariant+0x28>
 8013f14:	7833      	ldrb	r3, [r6, #0]
 8013f16:	3b01      	subs	r3, #1
 8013f18:	4604      	mov	r4, r0
 8013f1a:	2b0d      	cmp	r3, #13
 8013f1c:	d809      	bhi.n	8013f32 <uxr_deserialize_ObjectVariant+0x2a>
 8013f1e:	e8df f003 	tbb	[pc, r3]
 8013f22:	0a41      	.short	0x0a41
 8013f24:	0a0a2323 	.word	0x0a0a2323
 8013f28:	10080a0a 	.word	0x10080a0a
 8013f2c:	565c1010 	.word	0x565c1010
 8013f30:	2400      	movs	r4, #0
 8013f32:	4620      	mov	r0, r4
 8013f34:	bd70      	pop	{r4, r5, r6, pc}
 8013f36:	1d31      	adds	r1, r6, #4
 8013f38:	4628      	mov	r0, r5
 8013f3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013f3e:	f7ff bd55 	b.w	80139ec <uxr_deserialize_DATAWRITER_Representation>
 8013f42:	1d31      	adds	r1, r6, #4
 8013f44:	4628      	mov	r0, r5
 8013f46:	f7f6 fc2d 	bl	800a7a4 <ucdr_deserialize_uint8_t>
 8013f4a:	2800      	cmp	r0, #0
 8013f4c:	d0f0      	beq.n	8013f30 <uxr_deserialize_ObjectVariant+0x28>
 8013f4e:	7933      	ldrb	r3, [r6, #4]
 8013f50:	2b01      	cmp	r3, #1
 8013f52:	d001      	beq.n	8013f58 <uxr_deserialize_ObjectVariant+0x50>
 8013f54:	2b02      	cmp	r3, #2
 8013f56:	d1ec      	bne.n	8013f32 <uxr_deserialize_ObjectVariant+0x2a>
 8013f58:	68b1      	ldr	r1, [r6, #8]
 8013f5a:	4628      	mov	r0, r5
 8013f5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013f60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013f64:	f003 be9c 	b.w	8017ca0 <ucdr_deserialize_string>
 8013f68:	1d31      	adds	r1, r6, #4
 8013f6a:	4628      	mov	r0, r5
 8013f6c:	f7f6 fc1a 	bl	800a7a4 <ucdr_deserialize_uint8_t>
 8013f70:	4604      	mov	r4, r0
 8013f72:	b170      	cbz	r0, 8013f92 <uxr_deserialize_ObjectVariant+0x8a>
 8013f74:	7933      	ldrb	r3, [r6, #4]
 8013f76:	2b02      	cmp	r3, #2
 8013f78:	d04c      	beq.n	8014014 <uxr_deserialize_ObjectVariant+0x10c>
 8013f7a:	2b03      	cmp	r3, #3
 8013f7c:	d109      	bne.n	8013f92 <uxr_deserialize_ObjectVariant+0x8a>
 8013f7e:	f106 0308 	add.w	r3, r6, #8
 8013f82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013f86:	f106 010c 	add.w	r1, r6, #12
 8013f8a:	4628      	mov	r0, r5
 8013f8c:	f7fc fd64 	bl	8010a58 <ucdr_deserialize_sequence_uint8_t>
 8013f90:	4604      	mov	r4, r0
 8013f92:	2202      	movs	r2, #2
 8013f94:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8013f98:	4628      	mov	r0, r5
 8013f9a:	f7fc fc11 	bl	80107c0 <ucdr_deserialize_array_uint8_t>
 8013f9e:	4020      	ands	r0, r4
 8013fa0:	b2c4      	uxtb	r4, r0
 8013fa2:	e7c6      	b.n	8013f32 <uxr_deserialize_ObjectVariant+0x2a>
 8013fa4:	1d31      	adds	r1, r6, #4
 8013fa6:	4628      	mov	r0, r5
 8013fa8:	f7f6 fbfc 	bl	800a7a4 <ucdr_deserialize_uint8_t>
 8013fac:	4604      	mov	r4, r0
 8013fae:	b130      	cbz	r0, 8013fbe <uxr_deserialize_ObjectVariant+0xb6>
 8013fb0:	7933      	ldrb	r3, [r6, #4]
 8013fb2:	2b02      	cmp	r3, #2
 8013fb4:	d036      	beq.n	8014024 <uxr_deserialize_ObjectVariant+0x11c>
 8013fb6:	2b03      	cmp	r3, #3
 8013fb8:	d03c      	beq.n	8014034 <uxr_deserialize_ObjectVariant+0x12c>
 8013fba:	2b01      	cmp	r3, #1
 8013fbc:	d032      	beq.n	8014024 <uxr_deserialize_ObjectVariant+0x11c>
 8013fbe:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8013fc2:	4628      	mov	r0, r5
 8013fc4:	f7f7 f994 	bl	800b2f0 <ucdr_deserialize_int16_t>
 8013fc8:	4020      	ands	r0, r4
 8013fca:	b2c4      	uxtb	r4, r0
 8013fcc:	e7b1      	b.n	8013f32 <uxr_deserialize_ObjectVariant+0x2a>
 8013fce:	1d31      	adds	r1, r6, #4
 8013fd0:	4628      	mov	r0, r5
 8013fd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013fd6:	f7ff bbbf 	b.w	8013758 <uxr_deserialize_CLIENT_Representation>
 8013fda:	2204      	movs	r2, #4
 8013fdc:	18b1      	adds	r1, r6, r2
 8013fde:	4628      	mov	r0, r5
 8013fe0:	f7fc fbee 	bl	80107c0 <ucdr_deserialize_array_uint8_t>
 8013fe4:	2202      	movs	r2, #2
 8013fe6:	f106 0108 	add.w	r1, r6, #8
 8013fea:	4604      	mov	r4, r0
 8013fec:	4628      	mov	r0, r5
 8013fee:	f7fc fbe7 	bl	80107c0 <ucdr_deserialize_array_uint8_t>
 8013ff2:	2202      	movs	r2, #2
 8013ff4:	4004      	ands	r4, r0
 8013ff6:	f106 010a 	add.w	r1, r6, #10
 8013ffa:	4628      	mov	r0, r5
 8013ffc:	f7fc fbe0 	bl	80107c0 <ucdr_deserialize_array_uint8_t>
 8014000:	b2e4      	uxtb	r4, r4
 8014002:	4603      	mov	r3, r0
 8014004:	f106 010c 	add.w	r1, r6, #12
 8014008:	4628      	mov	r0, r5
 801400a:	401c      	ands	r4, r3
 801400c:	f7f6 fb9c 	bl	800a748 <ucdr_deserialize_bool>
 8014010:	4004      	ands	r4, r0
 8014012:	e78e      	b.n	8013f32 <uxr_deserialize_ObjectVariant+0x2a>
 8014014:	68b1      	ldr	r1, [r6, #8]
 8014016:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801401a:	4628      	mov	r0, r5
 801401c:	f003 fe40 	bl	8017ca0 <ucdr_deserialize_string>
 8014020:	4604      	mov	r4, r0
 8014022:	e7b6      	b.n	8013f92 <uxr_deserialize_ObjectVariant+0x8a>
 8014024:	68b1      	ldr	r1, [r6, #8]
 8014026:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801402a:	4628      	mov	r0, r5
 801402c:	f003 fe38 	bl	8017ca0 <ucdr_deserialize_string>
 8014030:	4604      	mov	r4, r0
 8014032:	e7c4      	b.n	8013fbe <uxr_deserialize_ObjectVariant+0xb6>
 8014034:	f106 0308 	add.w	r3, r6, #8
 8014038:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801403c:	f106 010c 	add.w	r1, r6, #12
 8014040:	4628      	mov	r0, r5
 8014042:	f7fc fd09 	bl	8010a58 <ucdr_deserialize_sequence_uint8_t>
 8014046:	4604      	mov	r4, r0
 8014048:	e7b9      	b.n	8013fbe <uxr_deserialize_ObjectVariant+0xb6>
 801404a:	bf00      	nop

0801404c <uxr_deserialize_BaseObjectRequest>:
 801404c:	b570      	push	{r4, r5, r6, lr}
 801404e:	2202      	movs	r2, #2
 8014050:	4605      	mov	r5, r0
 8014052:	460e      	mov	r6, r1
 8014054:	f7fc fbb4 	bl	80107c0 <ucdr_deserialize_array_uint8_t>
 8014058:	2202      	movs	r2, #2
 801405a:	4604      	mov	r4, r0
 801405c:	18b1      	adds	r1, r6, r2
 801405e:	4628      	mov	r0, r5
 8014060:	f7fc fbae 	bl	80107c0 <ucdr_deserialize_array_uint8_t>
 8014064:	4020      	ands	r0, r4
 8014066:	b2c0      	uxtb	r0, r0
 8014068:	bd70      	pop	{r4, r5, r6, pc}
 801406a:	bf00      	nop

0801406c <uxr_serialize_ActivityInfoVariant>:
 801406c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014070:	460d      	mov	r5, r1
 8014072:	7809      	ldrb	r1, [r1, #0]
 8014074:	4607      	mov	r7, r0
 8014076:	f7f6 fb7f 	bl	800a778 <ucdr_serialize_uint8_t>
 801407a:	4681      	mov	r9, r0
 801407c:	b138      	cbz	r0, 801408e <uxr_serialize_ActivityInfoVariant+0x22>
 801407e:	782b      	ldrb	r3, [r5, #0]
 8014080:	2b06      	cmp	r3, #6
 8014082:	f000 8082 	beq.w	801418a <uxr_serialize_ActivityInfoVariant+0x11e>
 8014086:	2b0d      	cmp	r3, #13
 8014088:	d016      	beq.n	80140b8 <uxr_serialize_ActivityInfoVariant+0x4c>
 801408a:	2b05      	cmp	r3, #5
 801408c:	d002      	beq.n	8014094 <uxr_serialize_ActivityInfoVariant+0x28>
 801408e:	4648      	mov	r0, r9
 8014090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014094:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8014098:	4638      	mov	r0, r7
 801409a:	f7f7 f8a9 	bl	800b1f0 <ucdr_serialize_int16_t>
 801409e:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 80140a2:	4681      	mov	r9, r0
 80140a4:	4638      	mov	r0, r7
 80140a6:	f7f6 ffd3 	bl	800b050 <ucdr_serialize_uint64_t>
 80140aa:	ea09 0000 	and.w	r0, r9, r0
 80140ae:	fa5f f980 	uxtb.w	r9, r0
 80140b2:	4648      	mov	r0, r9
 80140b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140b8:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80140bc:	4638      	mov	r0, r7
 80140be:	f7f7 f897 	bl	800b1f0 <ucdr_serialize_int16_t>
 80140c2:	68e9      	ldr	r1, [r5, #12]
 80140c4:	4681      	mov	r9, r0
 80140c6:	4638      	mov	r0, r7
 80140c8:	f7f6 fd6c 	bl	800aba4 <ucdr_serialize_uint32_t>
 80140cc:	68eb      	ldr	r3, [r5, #12]
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d0eb      	beq.n	80140aa <uxr_serialize_ActivityInfoVariant+0x3e>
 80140d2:	b320      	cbz	r0, 801411e <uxr_serialize_ActivityInfoVariant+0xb2>
 80140d4:	f105 080c 	add.w	r8, r5, #12
 80140d8:	2600      	movs	r6, #0
 80140da:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 80140de:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 80140e2:	f89a 1010 	ldrb.w	r1, [sl, #16]
 80140e6:	4638      	mov	r0, r7
 80140e8:	f7f6 fb46 	bl	800a778 <ucdr_serialize_uint8_t>
 80140ec:	2800      	cmp	r0, #0
 80140ee:	d053      	beq.n	8014198 <uxr_serialize_ActivityInfoVariant+0x12c>
 80140f0:	f89a 3010 	ldrb.w	r3, [sl, #16]
 80140f4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80140f8:	0074      	lsls	r4, r6, #1
 80140fa:	00c9      	lsls	r1, r1, #3
 80140fc:	2b03      	cmp	r3, #3
 80140fe:	d854      	bhi.n	80141aa <uxr_serialize_ActivityInfoVariant+0x13e>
 8014100:	e8df f003 	tbb	[pc, r3]
 8014104:	02102132 	.word	0x02102132
 8014108:	4441      	add	r1, r8
 801410a:	4638      	mov	r0, r7
 801410c:	6889      	ldr	r1, [r1, #8]
 801410e:	f003 fdb7 	bl	8017c80 <ucdr_serialize_string>
 8014112:	68ea      	ldr	r2, [r5, #12]
 8014114:	3601      	adds	r6, #1
 8014116:	4296      	cmp	r6, r2
 8014118:	d242      	bcs.n	80141a0 <uxr_serialize_ActivityInfoVariant+0x134>
 801411a:	2800      	cmp	r0, #0
 801411c:	d1dd      	bne.n	80140da <uxr_serialize_ActivityInfoVariant+0x6e>
 801411e:	f04f 0900 	mov.w	r9, #0
 8014122:	e7b4      	b.n	801408e <uxr_serialize_ActivityInfoVariant+0x22>
 8014124:	3108      	adds	r1, #8
 8014126:	4441      	add	r1, r8
 8014128:	2210      	movs	r2, #16
 801412a:	4638      	mov	r0, r7
 801412c:	f7fc fae4 	bl	80106f8 <ucdr_serialize_array_uint8_t>
 8014130:	4434      	add	r4, r6
 8014132:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8014136:	4604      	mov	r4, r0
 8014138:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801413a:	4638      	mov	r0, r7
 801413c:	f7f6 fd32 	bl	800aba4 <ucdr_serialize_uint32_t>
 8014140:	4020      	ands	r0, r4
 8014142:	b2c0      	uxtb	r0, r0
 8014144:	e7e5      	b.n	8014112 <uxr_serialize_ActivityInfoVariant+0xa6>
 8014146:	3108      	adds	r1, #8
 8014148:	4441      	add	r1, r8
 801414a:	2204      	movs	r2, #4
 801414c:	4638      	mov	r0, r7
 801414e:	f7fc fad3 	bl	80106f8 <ucdr_serialize_array_uint8_t>
 8014152:	4434      	add	r4, r6
 8014154:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8014158:	4604      	mov	r4, r0
 801415a:	8b19      	ldrh	r1, [r3, #24]
 801415c:	4638      	mov	r0, r7
 801415e:	f7f6 fb37 	bl	800a7d0 <ucdr_serialize_uint16_t>
 8014162:	4020      	ands	r0, r4
 8014164:	b2c0      	uxtb	r0, r0
 8014166:	e7d4      	b.n	8014112 <uxr_serialize_ActivityInfoVariant+0xa6>
 8014168:	3108      	adds	r1, #8
 801416a:	4441      	add	r1, r8
 801416c:	2202      	movs	r2, #2
 801416e:	4638      	mov	r0, r7
 8014170:	f7fc fac2 	bl	80106f8 <ucdr_serialize_array_uint8_t>
 8014174:	4434      	add	r4, r6
 8014176:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801417a:	4604      	mov	r4, r0
 801417c:	7d99      	ldrb	r1, [r3, #22]
 801417e:	4638      	mov	r0, r7
 8014180:	f7f6 fafa 	bl	800a778 <ucdr_serialize_uint8_t>
 8014184:	4020      	ands	r0, r4
 8014186:	b2c0      	uxtb	r0, r0
 8014188:	e7c3      	b.n	8014112 <uxr_serialize_ActivityInfoVariant+0xa6>
 801418a:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801418e:	4638      	mov	r0, r7
 8014190:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014194:	f7f7 b82c 	b.w	800b1f0 <ucdr_serialize_int16_t>
 8014198:	68ea      	ldr	r2, [r5, #12]
 801419a:	3601      	adds	r6, #1
 801419c:	42b2      	cmp	r2, r6
 801419e:	d8be      	bhi.n	801411e <uxr_serialize_ActivityInfoVariant+0xb2>
 80141a0:	ea09 0900 	and.w	r9, r9, r0
 80141a4:	fa5f f989 	uxtb.w	r9, r9
 80141a8:	e771      	b.n	801408e <uxr_serialize_ActivityInfoVariant+0x22>
 80141aa:	68eb      	ldr	r3, [r5, #12]
 80141ac:	3601      	adds	r6, #1
 80141ae:	429e      	cmp	r6, r3
 80141b0:	f10a 0a18 	add.w	sl, sl, #24
 80141b4:	d395      	bcc.n	80140e2 <uxr_serialize_ActivityInfoVariant+0x76>
 80141b6:	e76a      	b.n	801408e <uxr_serialize_ActivityInfoVariant+0x22>

080141b8 <uxr_deserialize_BaseObjectReply>:
 80141b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141bc:	2202      	movs	r2, #2
 80141be:	4606      	mov	r6, r0
 80141c0:	460f      	mov	r7, r1
 80141c2:	f7fc fafd 	bl	80107c0 <ucdr_deserialize_array_uint8_t>
 80141c6:	2202      	movs	r2, #2
 80141c8:	18b9      	adds	r1, r7, r2
 80141ca:	4605      	mov	r5, r0
 80141cc:	4630      	mov	r0, r6
 80141ce:	f7fc faf7 	bl	80107c0 <ucdr_deserialize_array_uint8_t>
 80141d2:	1d39      	adds	r1, r7, #4
 80141d4:	4680      	mov	r8, r0
 80141d6:	4630      	mov	r0, r6
 80141d8:	f7f6 fae4 	bl	800a7a4 <ucdr_deserialize_uint8_t>
 80141dc:	1d79      	adds	r1, r7, #5
 80141de:	4604      	mov	r4, r0
 80141e0:	4630      	mov	r0, r6
 80141e2:	f7f6 fadf 	bl	800a7a4 <ucdr_deserialize_uint8_t>
 80141e6:	ea05 0508 	and.w	r5, r5, r8
 80141ea:	402c      	ands	r4, r5
 80141ec:	4020      	ands	r0, r4
 80141ee:	b2c0      	uxtb	r0, r0
 80141f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080141f4 <uxr_serialize_ReadSpecification>:
 80141f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141f8:	460e      	mov	r6, r1
 80141fa:	7809      	ldrb	r1, [r1, #0]
 80141fc:	4607      	mov	r7, r0
 80141fe:	f7f6 fabb 	bl	800a778 <ucdr_serialize_uint8_t>
 8014202:	7871      	ldrb	r1, [r6, #1]
 8014204:	4604      	mov	r4, r0
 8014206:	4638      	mov	r0, r7
 8014208:	f7f6 fab6 	bl	800a778 <ucdr_serialize_uint8_t>
 801420c:	78b1      	ldrb	r1, [r6, #2]
 801420e:	4004      	ands	r4, r0
 8014210:	4638      	mov	r0, r7
 8014212:	f7f6 fa83 	bl	800a71c <ucdr_serialize_bool>
 8014216:	78b3      	ldrb	r3, [r6, #2]
 8014218:	b2e4      	uxtb	r4, r4
 801421a:	4004      	ands	r4, r0
 801421c:	b94b      	cbnz	r3, 8014232 <uxr_serialize_ReadSpecification+0x3e>
 801421e:	7a31      	ldrb	r1, [r6, #8]
 8014220:	4638      	mov	r0, r7
 8014222:	f7f6 fa7b 	bl	800a71c <ucdr_serialize_bool>
 8014226:	7a33      	ldrb	r3, [r6, #8]
 8014228:	4004      	ands	r4, r0
 801422a:	b943      	cbnz	r3, 801423e <uxr_serialize_ReadSpecification+0x4a>
 801422c:	4620      	mov	r0, r4
 801422e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014232:	6871      	ldr	r1, [r6, #4]
 8014234:	4638      	mov	r0, r7
 8014236:	f003 fd23 	bl	8017c80 <ucdr_serialize_string>
 801423a:	4004      	ands	r4, r0
 801423c:	e7ef      	b.n	801421e <uxr_serialize_ReadSpecification+0x2a>
 801423e:	8971      	ldrh	r1, [r6, #10]
 8014240:	4638      	mov	r0, r7
 8014242:	f7f6 fac5 	bl	800a7d0 <ucdr_serialize_uint16_t>
 8014246:	89b1      	ldrh	r1, [r6, #12]
 8014248:	4605      	mov	r5, r0
 801424a:	4638      	mov	r0, r7
 801424c:	f7f6 fac0 	bl	800a7d0 <ucdr_serialize_uint16_t>
 8014250:	89f1      	ldrh	r1, [r6, #14]
 8014252:	4005      	ands	r5, r0
 8014254:	4638      	mov	r0, r7
 8014256:	f7f6 fabb 	bl	800a7d0 <ucdr_serialize_uint16_t>
 801425a:	8a31      	ldrh	r1, [r6, #16]
 801425c:	4680      	mov	r8, r0
 801425e:	4638      	mov	r0, r7
 8014260:	f7f6 fab6 	bl	800a7d0 <ucdr_serialize_uint16_t>
 8014264:	b2ed      	uxtb	r5, r5
 8014266:	4025      	ands	r5, r4
 8014268:	ea08 0505 	and.w	r5, r8, r5
 801426c:	ea00 0405 	and.w	r4, r0, r5
 8014270:	4620      	mov	r0, r4
 8014272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014276:	bf00      	nop

08014278 <uxr_serialize_CREATE_CLIENT_Payload>:
 8014278:	f7ff ba16 	b.w	80136a8 <uxr_serialize_CLIENT_Representation>

0801427c <uxr_serialize_CREATE_Payload>:
 801427c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801427e:	2202      	movs	r2, #2
 8014280:	4607      	mov	r7, r0
 8014282:	460e      	mov	r6, r1
 8014284:	f7fc fa38 	bl	80106f8 <ucdr_serialize_array_uint8_t>
 8014288:	2202      	movs	r2, #2
 801428a:	18b1      	adds	r1, r6, r2
 801428c:	4605      	mov	r5, r0
 801428e:	4638      	mov	r0, r7
 8014290:	f7fc fa32 	bl	80106f8 <ucdr_serialize_array_uint8_t>
 8014294:	7931      	ldrb	r1, [r6, #4]
 8014296:	4604      	mov	r4, r0
 8014298:	4638      	mov	r0, r7
 801429a:	f7f6 fa6d 	bl	800a778 <ucdr_serialize_uint8_t>
 801429e:	b170      	cbz	r0, 80142be <uxr_serialize_CREATE_Payload+0x42>
 80142a0:	7933      	ldrb	r3, [r6, #4]
 80142a2:	402c      	ands	r4, r5
 80142a4:	3b01      	subs	r3, #1
 80142a6:	b2e4      	uxtb	r4, r4
 80142a8:	2b0d      	cmp	r3, #13
 80142aa:	d809      	bhi.n	80142c0 <uxr_serialize_CREATE_Payload+0x44>
 80142ac:	e8df f003 	tbb	[pc, r3]
 80142b0:	23230a4c 	.word	0x23230a4c
 80142b4:	0a0a0a0a 	.word	0x0a0a0a0a
 80142b8:	12121208 	.word	0x12121208
 80142bc:	3e45      	.short	0x3e45
 80142be:	2400      	movs	r4, #0
 80142c0:	4620      	mov	r0, r4
 80142c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80142c4:	f106 0108 	add.w	r1, r6, #8
 80142c8:	4638      	mov	r0, r7
 80142ca:	f7ff faf3 	bl	80138b4 <uxr_serialize_DATAWRITER_Representation>
 80142ce:	4004      	ands	r4, r0
 80142d0:	4620      	mov	r0, r4
 80142d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80142d4:	7a31      	ldrb	r1, [r6, #8]
 80142d6:	4638      	mov	r0, r7
 80142d8:	f7f6 fa4e 	bl	800a778 <ucdr_serialize_uint8_t>
 80142dc:	2800      	cmp	r0, #0
 80142de:	d0ee      	beq.n	80142be <uxr_serialize_CREATE_Payload+0x42>
 80142e0:	7a33      	ldrb	r3, [r6, #8]
 80142e2:	2b01      	cmp	r3, #1
 80142e4:	d001      	beq.n	80142ea <uxr_serialize_CREATE_Payload+0x6e>
 80142e6:	2b02      	cmp	r3, #2
 80142e8:	d1ea      	bne.n	80142c0 <uxr_serialize_CREATE_Payload+0x44>
 80142ea:	68f1      	ldr	r1, [r6, #12]
 80142ec:	4638      	mov	r0, r7
 80142ee:	f003 fcc7 	bl	8017c80 <ucdr_serialize_string>
 80142f2:	4004      	ands	r4, r0
 80142f4:	e7e4      	b.n	80142c0 <uxr_serialize_CREATE_Payload+0x44>
 80142f6:	7a31      	ldrb	r1, [r6, #8]
 80142f8:	4638      	mov	r0, r7
 80142fa:	f7f6 fa3d 	bl	800a778 <ucdr_serialize_uint8_t>
 80142fe:	4605      	mov	r5, r0
 8014300:	b158      	cbz	r0, 801431a <uxr_serialize_CREATE_Payload+0x9e>
 8014302:	7a33      	ldrb	r3, [r6, #8]
 8014304:	2b02      	cmp	r3, #2
 8014306:	d034      	beq.n	8014372 <uxr_serialize_CREATE_Payload+0xf6>
 8014308:	2b03      	cmp	r3, #3
 801430a:	d106      	bne.n	801431a <uxr_serialize_CREATE_Payload+0x9e>
 801430c:	68f2      	ldr	r2, [r6, #12]
 801430e:	f106 0110 	add.w	r1, r6, #16
 8014312:	4638      	mov	r0, r7
 8014314:	f7fc fb8e 	bl	8010a34 <ucdr_serialize_sequence_uint8_t>
 8014318:	4605      	mov	r5, r0
 801431a:	2202      	movs	r2, #2
 801431c:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8014320:	4638      	mov	r0, r7
 8014322:	f7fc f9e9 	bl	80106f8 <ucdr_serialize_array_uint8_t>
 8014326:	4028      	ands	r0, r5
 8014328:	4004      	ands	r4, r0
 801432a:	e7c9      	b.n	80142c0 <uxr_serialize_CREATE_Payload+0x44>
 801432c:	f106 0108 	add.w	r1, r6, #8
 8014330:	4638      	mov	r0, r7
 8014332:	f7ff f9b9 	bl	80136a8 <uxr_serialize_CLIENT_Representation>
 8014336:	4004      	ands	r4, r0
 8014338:	e7c2      	b.n	80142c0 <uxr_serialize_CREATE_Payload+0x44>
 801433a:	f106 0108 	add.w	r1, r6, #8
 801433e:	4638      	mov	r0, r7
 8014340:	f7ff fa6e 	bl	8013820 <uxr_serialize_AGENT_Representation>
 8014344:	4004      	ands	r4, r0
 8014346:	e7bb      	b.n	80142c0 <uxr_serialize_CREATE_Payload+0x44>
 8014348:	7a31      	ldrb	r1, [r6, #8]
 801434a:	4638      	mov	r0, r7
 801434c:	f7f6 fa14 	bl	800a778 <ucdr_serialize_uint8_t>
 8014350:	4605      	mov	r5, r0
 8014352:	b130      	cbz	r0, 8014362 <uxr_serialize_CREATE_Payload+0xe6>
 8014354:	7a33      	ldrb	r3, [r6, #8]
 8014356:	2b02      	cmp	r3, #2
 8014358:	d011      	beq.n	801437e <uxr_serialize_CREATE_Payload+0x102>
 801435a:	2b03      	cmp	r3, #3
 801435c:	d015      	beq.n	801438a <uxr_serialize_CREATE_Payload+0x10e>
 801435e:	2b01      	cmp	r3, #1
 8014360:	d00d      	beq.n	801437e <uxr_serialize_CREATE_Payload+0x102>
 8014362:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8014366:	4638      	mov	r0, r7
 8014368:	f7f6 ff42 	bl	800b1f0 <ucdr_serialize_int16_t>
 801436c:	4028      	ands	r0, r5
 801436e:	4004      	ands	r4, r0
 8014370:	e7a6      	b.n	80142c0 <uxr_serialize_CREATE_Payload+0x44>
 8014372:	68f1      	ldr	r1, [r6, #12]
 8014374:	4638      	mov	r0, r7
 8014376:	f003 fc83 	bl	8017c80 <ucdr_serialize_string>
 801437a:	4605      	mov	r5, r0
 801437c:	e7cd      	b.n	801431a <uxr_serialize_CREATE_Payload+0x9e>
 801437e:	68f1      	ldr	r1, [r6, #12]
 8014380:	4638      	mov	r0, r7
 8014382:	f003 fc7d 	bl	8017c80 <ucdr_serialize_string>
 8014386:	4605      	mov	r5, r0
 8014388:	e7eb      	b.n	8014362 <uxr_serialize_CREATE_Payload+0xe6>
 801438a:	68f2      	ldr	r2, [r6, #12]
 801438c:	f106 0110 	add.w	r1, r6, #16
 8014390:	4638      	mov	r0, r7
 8014392:	f7fc fb4f 	bl	8010a34 <ucdr_serialize_sequence_uint8_t>
 8014396:	4605      	mov	r5, r0
 8014398:	e7e3      	b.n	8014362 <uxr_serialize_CREATE_Payload+0xe6>
 801439a:	bf00      	nop

0801439c <uxr_serialize_GET_INFO_Payload>:
 801439c:	b570      	push	{r4, r5, r6, lr}
 801439e:	2202      	movs	r2, #2
 80143a0:	4605      	mov	r5, r0
 80143a2:	460e      	mov	r6, r1
 80143a4:	f7fc f9a8 	bl	80106f8 <ucdr_serialize_array_uint8_t>
 80143a8:	2202      	movs	r2, #2
 80143aa:	18b1      	adds	r1, r6, r2
 80143ac:	4604      	mov	r4, r0
 80143ae:	4628      	mov	r0, r5
 80143b0:	f7fc f9a2 	bl	80106f8 <ucdr_serialize_array_uint8_t>
 80143b4:	6871      	ldr	r1, [r6, #4]
 80143b6:	4004      	ands	r4, r0
 80143b8:	4628      	mov	r0, r5
 80143ba:	f7f6 fbf3 	bl	800aba4 <ucdr_serialize_uint32_t>
 80143be:	b2e4      	uxtb	r4, r4
 80143c0:	4020      	ands	r0, r4
 80143c2:	bd70      	pop	{r4, r5, r6, pc}

080143c4 <uxr_deserialize_GET_INFO_Payload>:
 80143c4:	b570      	push	{r4, r5, r6, lr}
 80143c6:	2202      	movs	r2, #2
 80143c8:	4605      	mov	r5, r0
 80143ca:	460e      	mov	r6, r1
 80143cc:	f7fc f9f8 	bl	80107c0 <ucdr_deserialize_array_uint8_t>
 80143d0:	2202      	movs	r2, #2
 80143d2:	18b1      	adds	r1, r6, r2
 80143d4:	4604      	mov	r4, r0
 80143d6:	4628      	mov	r0, r5
 80143d8:	f7fc f9f2 	bl	80107c0 <ucdr_deserialize_array_uint8_t>
 80143dc:	1d31      	adds	r1, r6, #4
 80143de:	4004      	ands	r4, r0
 80143e0:	4628      	mov	r0, r5
 80143e2:	f7f6 fd0f 	bl	800ae04 <ucdr_deserialize_uint32_t>
 80143e6:	b2e4      	uxtb	r4, r4
 80143e8:	4020      	ands	r0, r4
 80143ea:	bd70      	pop	{r4, r5, r6, pc}

080143ec <uxr_serialize_DELETE_Payload>:
 80143ec:	b570      	push	{r4, r5, r6, lr}
 80143ee:	2202      	movs	r2, #2
 80143f0:	4605      	mov	r5, r0
 80143f2:	460e      	mov	r6, r1
 80143f4:	f7fc f980 	bl	80106f8 <ucdr_serialize_array_uint8_t>
 80143f8:	2202      	movs	r2, #2
 80143fa:	4604      	mov	r4, r0
 80143fc:	18b1      	adds	r1, r6, r2
 80143fe:	4628      	mov	r0, r5
 8014400:	f7fc f97a 	bl	80106f8 <ucdr_serialize_array_uint8_t>
 8014404:	4020      	ands	r0, r4
 8014406:	b2c0      	uxtb	r0, r0
 8014408:	bd70      	pop	{r4, r5, r6, pc}
 801440a:	bf00      	nop

0801440c <uxr_deserialize_STATUS_AGENT_Payload>:
 801440c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014410:	4605      	mov	r5, r0
 8014412:	460e      	mov	r6, r1
 8014414:	f7f6 f9c6 	bl	800a7a4 <ucdr_deserialize_uint8_t>
 8014418:	1c71      	adds	r1, r6, #1
 801441a:	4604      	mov	r4, r0
 801441c:	4628      	mov	r0, r5
 801441e:	f7f6 f9c1 	bl	800a7a4 <ucdr_deserialize_uint8_t>
 8014422:	2204      	movs	r2, #4
 8014424:	18b1      	adds	r1, r6, r2
 8014426:	4680      	mov	r8, r0
 8014428:	4628      	mov	r0, r5
 801442a:	f7fc f9c9 	bl	80107c0 <ucdr_deserialize_array_uint8_t>
 801442e:	f106 0108 	add.w	r1, r6, #8
 8014432:	4607      	mov	r7, r0
 8014434:	2202      	movs	r2, #2
 8014436:	4628      	mov	r0, r5
 8014438:	f7fc f9c2 	bl	80107c0 <ucdr_deserialize_array_uint8_t>
 801443c:	ea04 0308 	and.w	r3, r4, r8
 8014440:	b2db      	uxtb	r3, r3
 8014442:	ea03 0407 	and.w	r4, r3, r7
 8014446:	2202      	movs	r2, #2
 8014448:	4607      	mov	r7, r0
 801444a:	f106 010a 	add.w	r1, r6, #10
 801444e:	4628      	mov	r0, r5
 8014450:	f7fc f9b6 	bl	80107c0 <ucdr_deserialize_array_uint8_t>
 8014454:	f106 010c 	add.w	r1, r6, #12
 8014458:	4603      	mov	r3, r0
 801445a:	4628      	mov	r0, r5
 801445c:	461d      	mov	r5, r3
 801445e:	f7f6 f973 	bl	800a748 <ucdr_deserialize_bool>
 8014462:	403c      	ands	r4, r7
 8014464:	4025      	ands	r5, r4
 8014466:	4028      	ands	r0, r5
 8014468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801446c <uxr_deserialize_STATUS_Payload>:
 801446c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014470:	2202      	movs	r2, #2
 8014472:	4606      	mov	r6, r0
 8014474:	460f      	mov	r7, r1
 8014476:	f7fc f9a3 	bl	80107c0 <ucdr_deserialize_array_uint8_t>
 801447a:	2202      	movs	r2, #2
 801447c:	18b9      	adds	r1, r7, r2
 801447e:	4605      	mov	r5, r0
 8014480:	4630      	mov	r0, r6
 8014482:	f7fc f99d 	bl	80107c0 <ucdr_deserialize_array_uint8_t>
 8014486:	1d39      	adds	r1, r7, #4
 8014488:	4680      	mov	r8, r0
 801448a:	4630      	mov	r0, r6
 801448c:	f7f6 f98a 	bl	800a7a4 <ucdr_deserialize_uint8_t>
 8014490:	1d79      	adds	r1, r7, #5
 8014492:	4604      	mov	r4, r0
 8014494:	4630      	mov	r0, r6
 8014496:	f7f6 f985 	bl	800a7a4 <ucdr_deserialize_uint8_t>
 801449a:	ea05 0508 	and.w	r5, r5, r8
 801449e:	402c      	ands	r4, r5
 80144a0:	4020      	ands	r0, r4
 80144a2:	b2c0      	uxtb	r0, r0
 80144a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080144a8 <uxr_serialize_INFO_Payload>:
 80144a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144ac:	2202      	movs	r2, #2
 80144ae:	460c      	mov	r4, r1
 80144b0:	4605      	mov	r5, r0
 80144b2:	f7fc f921 	bl	80106f8 <ucdr_serialize_array_uint8_t>
 80144b6:	2202      	movs	r2, #2
 80144b8:	18a1      	adds	r1, r4, r2
 80144ba:	4680      	mov	r8, r0
 80144bc:	4628      	mov	r0, r5
 80144be:	f7fc f91b 	bl	80106f8 <ucdr_serialize_array_uint8_t>
 80144c2:	7921      	ldrb	r1, [r4, #4]
 80144c4:	4607      	mov	r7, r0
 80144c6:	4628      	mov	r0, r5
 80144c8:	f7f6 f956 	bl	800a778 <ucdr_serialize_uint8_t>
 80144cc:	7961      	ldrb	r1, [r4, #5]
 80144ce:	4606      	mov	r6, r0
 80144d0:	4628      	mov	r0, r5
 80144d2:	f7f6 f951 	bl	800a778 <ucdr_serialize_uint8_t>
 80144d6:	ea08 0807 	and.w	r8, r8, r7
 80144da:	ea06 0608 	and.w	r6, r6, r8
 80144de:	4006      	ands	r6, r0
 80144e0:	7a21      	ldrb	r1, [r4, #8]
 80144e2:	4628      	mov	r0, r5
 80144e4:	f7f6 f91a 	bl	800a71c <ucdr_serialize_bool>
 80144e8:	7a23      	ldrb	r3, [r4, #8]
 80144ea:	b2f7      	uxtb	r7, r6
 80144ec:	4606      	mov	r6, r0
 80144ee:	b96b      	cbnz	r3, 801450c <uxr_serialize_INFO_Payload+0x64>
 80144f0:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 80144f4:	4628      	mov	r0, r5
 80144f6:	f7f6 f911 	bl	800a71c <ucdr_serialize_bool>
 80144fa:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 80144fe:	4030      	ands	r0, r6
 8014500:	b2c6      	uxtb	r6, r0
 8014502:	b983      	cbnz	r3, 8014526 <uxr_serialize_INFO_Payload+0x7e>
 8014504:	ea06 0007 	and.w	r0, r6, r7
 8014508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801450c:	7b21      	ldrb	r1, [r4, #12]
 801450e:	4628      	mov	r0, r5
 8014510:	f7f6 f932 	bl	800a778 <ucdr_serialize_uint8_t>
 8014514:	b188      	cbz	r0, 801453a <uxr_serialize_INFO_Payload+0x92>
 8014516:	f104 010c 	add.w	r1, r4, #12
 801451a:	4628      	mov	r0, r5
 801451c:	f7ff f9f2 	bl	8013904 <uxr_serialize_ObjectVariant.part.0>
 8014520:	4030      	ands	r0, r6
 8014522:	b2c6      	uxtb	r6, r0
 8014524:	e7e4      	b.n	80144f0 <uxr_serialize_INFO_Payload+0x48>
 8014526:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 801452a:	4628      	mov	r0, r5
 801452c:	f7ff fd9e 	bl	801406c <uxr_serialize_ActivityInfoVariant>
 8014530:	4006      	ands	r6, r0
 8014532:	ea06 0007 	and.w	r0, r6, r7
 8014536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801453a:	4606      	mov	r6, r0
 801453c:	e7d8      	b.n	80144f0 <uxr_serialize_INFO_Payload+0x48>
 801453e:	bf00      	nop

08014540 <uxr_serialize_READ_DATA_Payload>:
 8014540:	b570      	push	{r4, r5, r6, lr}
 8014542:	2202      	movs	r2, #2
 8014544:	4605      	mov	r5, r0
 8014546:	460e      	mov	r6, r1
 8014548:	f7fc f8d6 	bl	80106f8 <ucdr_serialize_array_uint8_t>
 801454c:	2202      	movs	r2, #2
 801454e:	18b1      	adds	r1, r6, r2
 8014550:	4604      	mov	r4, r0
 8014552:	4628      	mov	r0, r5
 8014554:	f7fc f8d0 	bl	80106f8 <ucdr_serialize_array_uint8_t>
 8014558:	1d31      	adds	r1, r6, #4
 801455a:	4004      	ands	r4, r0
 801455c:	4628      	mov	r0, r5
 801455e:	f7ff fe49 	bl	80141f4 <uxr_serialize_ReadSpecification>
 8014562:	b2e4      	uxtb	r4, r4
 8014564:	4020      	ands	r0, r4
 8014566:	bd70      	pop	{r4, r5, r6, pc}

08014568 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8014568:	b570      	push	{r4, r5, r6, lr}
 801456a:	2202      	movs	r2, #2
 801456c:	4605      	mov	r5, r0
 801456e:	460e      	mov	r6, r1
 8014570:	f7fc f8c2 	bl	80106f8 <ucdr_serialize_array_uint8_t>
 8014574:	2202      	movs	r2, #2
 8014576:	4604      	mov	r4, r0
 8014578:	18b1      	adds	r1, r6, r2
 801457a:	4628      	mov	r0, r5
 801457c:	f7fc f8bc 	bl	80106f8 <ucdr_serialize_array_uint8_t>
 8014580:	4020      	ands	r0, r4
 8014582:	b2c0      	uxtb	r0, r0
 8014584:	bd70      	pop	{r4, r5, r6, pc}
 8014586:	bf00      	nop

08014588 <uxr_serialize_ACKNACK_Payload>:
 8014588:	b570      	push	{r4, r5, r6, lr}
 801458a:	460c      	mov	r4, r1
 801458c:	460e      	mov	r6, r1
 801458e:	f834 1b02 	ldrh.w	r1, [r4], #2
 8014592:	4605      	mov	r5, r0
 8014594:	f7f6 f91c 	bl	800a7d0 <ucdr_serialize_uint16_t>
 8014598:	2202      	movs	r2, #2
 801459a:	4621      	mov	r1, r4
 801459c:	4604      	mov	r4, r0
 801459e:	4628      	mov	r0, r5
 80145a0:	f7fc f8aa 	bl	80106f8 <ucdr_serialize_array_uint8_t>
 80145a4:	7931      	ldrb	r1, [r6, #4]
 80145a6:	4004      	ands	r4, r0
 80145a8:	4628      	mov	r0, r5
 80145aa:	f7f6 f8e5 	bl	800a778 <ucdr_serialize_uint8_t>
 80145ae:	b2e4      	uxtb	r4, r4
 80145b0:	4020      	ands	r0, r4
 80145b2:	bd70      	pop	{r4, r5, r6, pc}

080145b4 <uxr_deserialize_ACKNACK_Payload>:
 80145b4:	b570      	push	{r4, r5, r6, lr}
 80145b6:	4605      	mov	r5, r0
 80145b8:	460e      	mov	r6, r1
 80145ba:	f7f6 fa09 	bl	800a9d0 <ucdr_deserialize_uint16_t>
 80145be:	2202      	movs	r2, #2
 80145c0:	18b1      	adds	r1, r6, r2
 80145c2:	4604      	mov	r4, r0
 80145c4:	4628      	mov	r0, r5
 80145c6:	f7fc f8fb 	bl	80107c0 <ucdr_deserialize_array_uint8_t>
 80145ca:	1d31      	adds	r1, r6, #4
 80145cc:	4004      	ands	r4, r0
 80145ce:	4628      	mov	r0, r5
 80145d0:	f7f6 f8e8 	bl	800a7a4 <ucdr_deserialize_uint8_t>
 80145d4:	b2e4      	uxtb	r4, r4
 80145d6:	4020      	ands	r0, r4
 80145d8:	bd70      	pop	{r4, r5, r6, pc}
 80145da:	bf00      	nop

080145dc <uxr_serialize_HEARTBEAT_Payload>:
 80145dc:	b570      	push	{r4, r5, r6, lr}
 80145de:	460d      	mov	r5, r1
 80145e0:	8809      	ldrh	r1, [r1, #0]
 80145e2:	4606      	mov	r6, r0
 80145e4:	f7f6 f8f4 	bl	800a7d0 <ucdr_serialize_uint16_t>
 80145e8:	8869      	ldrh	r1, [r5, #2]
 80145ea:	4604      	mov	r4, r0
 80145ec:	4630      	mov	r0, r6
 80145ee:	f7f6 f8ef 	bl	800a7d0 <ucdr_serialize_uint16_t>
 80145f2:	7929      	ldrb	r1, [r5, #4]
 80145f4:	4004      	ands	r4, r0
 80145f6:	4630      	mov	r0, r6
 80145f8:	f7f6 f8be 	bl	800a778 <ucdr_serialize_uint8_t>
 80145fc:	b2e4      	uxtb	r4, r4
 80145fe:	4020      	ands	r0, r4
 8014600:	bd70      	pop	{r4, r5, r6, pc}
 8014602:	bf00      	nop

08014604 <uxr_deserialize_HEARTBEAT_Payload>:
 8014604:	b570      	push	{r4, r5, r6, lr}
 8014606:	4605      	mov	r5, r0
 8014608:	460e      	mov	r6, r1
 801460a:	f7f6 f9e1 	bl	800a9d0 <ucdr_deserialize_uint16_t>
 801460e:	1cb1      	adds	r1, r6, #2
 8014610:	4604      	mov	r4, r0
 8014612:	4628      	mov	r0, r5
 8014614:	f7f6 f9dc 	bl	800a9d0 <ucdr_deserialize_uint16_t>
 8014618:	1d31      	adds	r1, r6, #4
 801461a:	4004      	ands	r4, r0
 801461c:	4628      	mov	r0, r5
 801461e:	f7f6 f8c1 	bl	800a7a4 <ucdr_deserialize_uint8_t>
 8014622:	b2e4      	uxtb	r4, r4
 8014624:	4020      	ands	r0, r4
 8014626:	bd70      	pop	{r4, r5, r6, pc}

08014628 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8014628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801462c:	4605      	mov	r5, r0
 801462e:	460e      	mov	r6, r1
 8014630:	f7f6 ff6a 	bl	800b508 <ucdr_deserialize_int32_t>
 8014634:	1d31      	adds	r1, r6, #4
 8014636:	4607      	mov	r7, r0
 8014638:	4628      	mov	r0, r5
 801463a:	f7f6 fbe3 	bl	800ae04 <ucdr_deserialize_uint32_t>
 801463e:	f106 0108 	add.w	r1, r6, #8
 8014642:	4680      	mov	r8, r0
 8014644:	4628      	mov	r0, r5
 8014646:	f7f6 ff5f 	bl	800b508 <ucdr_deserialize_int32_t>
 801464a:	f106 010c 	add.w	r1, r6, #12
 801464e:	4604      	mov	r4, r0
 8014650:	4628      	mov	r0, r5
 8014652:	f7f6 fbd7 	bl	800ae04 <ucdr_deserialize_uint32_t>
 8014656:	ea07 0708 	and.w	r7, r7, r8
 801465a:	403c      	ands	r4, r7
 801465c:	f106 0110 	add.w	r1, r6, #16
 8014660:	4004      	ands	r4, r0
 8014662:	4628      	mov	r0, r5
 8014664:	f7f6 ff50 	bl	800b508 <ucdr_deserialize_int32_t>
 8014668:	f106 0114 	add.w	r1, r6, #20
 801466c:	4607      	mov	r7, r0
 801466e:	4628      	mov	r0, r5
 8014670:	f7f6 fbc8 	bl	800ae04 <ucdr_deserialize_uint32_t>
 8014674:	b2e4      	uxtb	r4, r4
 8014676:	403c      	ands	r4, r7
 8014678:	4020      	ands	r0, r4
 801467a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801467e:	bf00      	nop

08014680 <uxr_serialize_SampleIdentity>:
 8014680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014684:	220c      	movs	r2, #12
 8014686:	4604      	mov	r4, r0
 8014688:	460d      	mov	r5, r1
 801468a:	f7fc f835 	bl	80106f8 <ucdr_serialize_array_uint8_t>
 801468e:	2203      	movs	r2, #3
 8014690:	f105 010c 	add.w	r1, r5, #12
 8014694:	4607      	mov	r7, r0
 8014696:	4620      	mov	r0, r4
 8014698:	f7fc f82e 	bl	80106f8 <ucdr_serialize_array_uint8_t>
 801469c:	7be9      	ldrb	r1, [r5, #15]
 801469e:	4680      	mov	r8, r0
 80146a0:	4620      	mov	r0, r4
 80146a2:	f7f6 f869 	bl	800a778 <ucdr_serialize_uint8_t>
 80146a6:	6929      	ldr	r1, [r5, #16]
 80146a8:	4606      	mov	r6, r0
 80146aa:	4620      	mov	r0, r4
 80146ac:	f7f6 fe94 	bl	800b3d8 <ucdr_serialize_int32_t>
 80146b0:	6969      	ldr	r1, [r5, #20]
 80146b2:	4603      	mov	r3, r0
 80146b4:	4620      	mov	r0, r4
 80146b6:	ea07 0708 	and.w	r7, r7, r8
 80146ba:	461c      	mov	r4, r3
 80146bc:	f7f6 fa72 	bl	800aba4 <ucdr_serialize_uint32_t>
 80146c0:	403e      	ands	r6, r7
 80146c2:	4034      	ands	r4, r6
 80146c4:	4020      	ands	r0, r4
 80146c6:	b2c0      	uxtb	r0, r0
 80146c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080146cc <uxr_deserialize_SampleIdentity>:
 80146cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146d0:	220c      	movs	r2, #12
 80146d2:	4604      	mov	r4, r0
 80146d4:	460d      	mov	r5, r1
 80146d6:	f7fc f873 	bl	80107c0 <ucdr_deserialize_array_uint8_t>
 80146da:	2203      	movs	r2, #3
 80146dc:	f105 010c 	add.w	r1, r5, #12
 80146e0:	4607      	mov	r7, r0
 80146e2:	4620      	mov	r0, r4
 80146e4:	f7fc f86c 	bl	80107c0 <ucdr_deserialize_array_uint8_t>
 80146e8:	f105 010f 	add.w	r1, r5, #15
 80146ec:	4680      	mov	r8, r0
 80146ee:	4620      	mov	r0, r4
 80146f0:	f7f6 f858 	bl	800a7a4 <ucdr_deserialize_uint8_t>
 80146f4:	f105 0110 	add.w	r1, r5, #16
 80146f8:	4606      	mov	r6, r0
 80146fa:	4620      	mov	r0, r4
 80146fc:	f7f6 ff04 	bl	800b508 <ucdr_deserialize_int32_t>
 8014700:	f105 0114 	add.w	r1, r5, #20
 8014704:	4603      	mov	r3, r0
 8014706:	4620      	mov	r0, r4
 8014708:	ea07 0708 	and.w	r7, r7, r8
 801470c:	461c      	mov	r4, r3
 801470e:	f7f6 fb79 	bl	800ae04 <ucdr_deserialize_uint32_t>
 8014712:	403e      	ands	r6, r7
 8014714:	4034      	ands	r4, r6
 8014716:	4020      	ands	r0, r4
 8014718:	b2c0      	uxtb	r0, r0
 801471a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801471e:	bf00      	nop

08014720 <nav_msgs__msg__Odometry__init>:
 8014720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014724:	4605      	mov	r5, r0
 8014726:	b3c0      	cbz	r0, 801479a <nav_msgs__msg__Odometry__init+0x7a>
 8014728:	f003 f8e8 	bl	80178fc <std_msgs__msg__Header__init>
 801472c:	4604      	mov	r4, r0
 801472e:	b310      	cbz	r0, 8014776 <nav_msgs__msg__Odometry__init+0x56>
 8014730:	f105 0614 	add.w	r6, r5, #20
 8014734:	4630      	mov	r0, r6
 8014736:	f003 f883 	bl	8017840 <rosidl_runtime_c__String__init>
 801473a:	4604      	mov	r4, r0
 801473c:	2800      	cmp	r0, #0
 801473e:	d040      	beq.n	80147c2 <nav_msgs__msg__Odometry__init+0xa2>
 8014740:	f105 0720 	add.w	r7, r5, #32
 8014744:	4638      	mov	r0, r7
 8014746:	f003 f915 	bl	8017974 <geometry_msgs__msg__PoseWithCovariance__init>
 801474a:	4604      	mov	r4, r0
 801474c:	b348      	cbz	r0, 80147a2 <nav_msgs__msg__Odometry__init+0x82>
 801474e:	f505 78bc 	add.w	r8, r5, #376	@ 0x178
 8014752:	4640      	mov	r0, r8
 8014754:	f003 f924 	bl	80179a0 <geometry_msgs__msg__TwistWithCovariance__init>
 8014758:	4604      	mov	r4, r0
 801475a:	b9d8      	cbnz	r0, 8014794 <nav_msgs__msg__Odometry__init+0x74>
 801475c:	4628      	mov	r0, r5
 801475e:	f003 f8f1 	bl	8017944 <std_msgs__msg__Header__fini>
 8014762:	4630      	mov	r0, r6
 8014764:	f003 f882 	bl	801786c <rosidl_runtime_c__String__fini>
 8014768:	4638      	mov	r0, r7
 801476a:	f003 f915 	bl	8017998 <geometry_msgs__msg__PoseWithCovariance__fini>
 801476e:	4640      	mov	r0, r8
 8014770:	f003 f928 	bl	80179c4 <geometry_msgs__msg__TwistWithCovariance__fini>
 8014774:	e00e      	b.n	8014794 <nav_msgs__msg__Odometry__init+0x74>
 8014776:	4628      	mov	r0, r5
 8014778:	f003 f8e4 	bl	8017944 <std_msgs__msg__Header__fini>
 801477c:	f105 0014 	add.w	r0, r5, #20
 8014780:	f003 f874 	bl	801786c <rosidl_runtime_c__String__fini>
 8014784:	f105 0020 	add.w	r0, r5, #32
 8014788:	f003 f906 	bl	8017998 <geometry_msgs__msg__PoseWithCovariance__fini>
 801478c:	f505 70bc 	add.w	r0, r5, #376	@ 0x178
 8014790:	f003 f918 	bl	80179c4 <geometry_msgs__msg__TwistWithCovariance__fini>
 8014794:	4620      	mov	r0, r4
 8014796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801479a:	4604      	mov	r4, r0
 801479c:	4620      	mov	r0, r4
 801479e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147a2:	4628      	mov	r0, r5
 80147a4:	f003 f8ce 	bl	8017944 <std_msgs__msg__Header__fini>
 80147a8:	4630      	mov	r0, r6
 80147aa:	f003 f85f 	bl	801786c <rosidl_runtime_c__String__fini>
 80147ae:	4638      	mov	r0, r7
 80147b0:	f003 f8f2 	bl	8017998 <geometry_msgs__msg__PoseWithCovariance__fini>
 80147b4:	f505 70bc 	add.w	r0, r5, #376	@ 0x178
 80147b8:	f003 f904 	bl	80179c4 <geometry_msgs__msg__TwistWithCovariance__fini>
 80147bc:	4620      	mov	r0, r4
 80147be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147c2:	4628      	mov	r0, r5
 80147c4:	f003 f8be 	bl	8017944 <std_msgs__msg__Header__fini>
 80147c8:	4630      	mov	r0, r6
 80147ca:	e7d9      	b.n	8014780 <nav_msgs__msg__Odometry__init+0x60>

080147cc <nav_msgs__msg__Odometry__fini>:
 80147cc:	b188      	cbz	r0, 80147f2 <nav_msgs__msg__Odometry__fini+0x26>
 80147ce:	b510      	push	{r4, lr}
 80147d0:	4604      	mov	r4, r0
 80147d2:	f003 f8b7 	bl	8017944 <std_msgs__msg__Header__fini>
 80147d6:	f104 0014 	add.w	r0, r4, #20
 80147da:	f003 f847 	bl	801786c <rosidl_runtime_c__String__fini>
 80147de:	f104 0020 	add.w	r0, r4, #32
 80147e2:	f003 f8d9 	bl	8017998 <geometry_msgs__msg__PoseWithCovariance__fini>
 80147e6:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 80147ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80147ee:	f003 b8e9 	b.w	80179c4 <geometry_msgs__msg__TwistWithCovariance__fini>
 80147f2:	4770      	bx	lr

080147f4 <rcl_client_get_rmw_handle>:
 80147f4:	b118      	cbz	r0, 80147fe <rcl_client_get_rmw_handle+0xa>
 80147f6:	6800      	ldr	r0, [r0, #0]
 80147f8:	b108      	cbz	r0, 80147fe <rcl_client_get_rmw_handle+0xa>
 80147fa:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80147fe:	4770      	bx	lr

08014800 <rcl_send_request>:
 8014800:	b570      	push	{r4, r5, r6, lr}
 8014802:	b082      	sub	sp, #8
 8014804:	b1e8      	cbz	r0, 8014842 <rcl_send_request+0x42>
 8014806:	4604      	mov	r4, r0
 8014808:	6800      	ldr	r0, [r0, #0]
 801480a:	b1d0      	cbz	r0, 8014842 <rcl_send_request+0x42>
 801480c:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8014810:	b1bb      	cbz	r3, 8014842 <rcl_send_request+0x42>
 8014812:	460e      	mov	r6, r1
 8014814:	b1d1      	cbz	r1, 801484c <rcl_send_request+0x4c>
 8014816:	4615      	mov	r5, r2
 8014818:	b1c2      	cbz	r2, 801484c <rcl_send_request+0x4c>
 801481a:	2105      	movs	r1, #5
 801481c:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8014820:	f7f9 fca8 	bl	800e174 <__atomic_load_8>
 8014824:	6823      	ldr	r3, [r4, #0]
 8014826:	e9c5 0100 	strd	r0, r1, [r5]
 801482a:	462a      	mov	r2, r5
 801482c:	4631      	mov	r1, r6
 801482e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8014832:	f002 fcff 	bl	8017234 <rmw_send_request>
 8014836:	4606      	mov	r6, r0
 8014838:	b160      	cbz	r0, 8014854 <rcl_send_request+0x54>
 801483a:	2601      	movs	r6, #1
 801483c:	4630      	mov	r0, r6
 801483e:	b002      	add	sp, #8
 8014840:	bd70      	pop	{r4, r5, r6, pc}
 8014842:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8014846:	4630      	mov	r0, r6
 8014848:	b002      	add	sp, #8
 801484a:	bd70      	pop	{r4, r5, r6, pc}
 801484c:	260b      	movs	r6, #11
 801484e:	4630      	mov	r0, r6
 8014850:	b002      	add	sp, #8
 8014852:	bd70      	pop	{r4, r5, r6, pc}
 8014854:	6820      	ldr	r0, [r4, #0]
 8014856:	2105      	movs	r1, #5
 8014858:	e9d5 2300 	ldrd	r2, r3, [r5]
 801485c:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8014860:	9100      	str	r1, [sp, #0]
 8014862:	f7f9 fcf3 	bl	800e24c <__atomic_exchange_8>
 8014866:	4630      	mov	r0, r6
 8014868:	b002      	add	sp, #8
 801486a:	bd70      	pop	{r4, r5, r6, pc}
 801486c:	0000      	movs	r0, r0
	...

08014870 <rcl_take_response>:
 8014870:	b570      	push	{r4, r5, r6, lr}
 8014872:	468e      	mov	lr, r1
 8014874:	460c      	mov	r4, r1
 8014876:	4616      	mov	r6, r2
 8014878:	4605      	mov	r5, r0
 801487a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801487e:	b08c      	sub	sp, #48	@ 0x30
 8014880:	f10d 0c18 	add.w	ip, sp, #24
 8014884:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014888:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801488c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014890:	b35d      	cbz	r5, 80148ea <rcl_take_response+0x7a>
 8014892:	682b      	ldr	r3, [r5, #0]
 8014894:	b34b      	cbz	r3, 80148ea <rcl_take_response+0x7a>
 8014896:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801489a:	b330      	cbz	r0, 80148ea <rcl_take_response+0x7a>
 801489c:	b346      	cbz	r6, 80148f0 <rcl_take_response+0x80>
 801489e:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80148f8 <rcl_take_response+0x88>
 80148a2:	2300      	movs	r3, #0
 80148a4:	f88d 3007 	strb.w	r3, [sp, #7]
 80148a8:	4632      	mov	r2, r6
 80148aa:	f10d 0307 	add.w	r3, sp, #7
 80148ae:	a902      	add	r1, sp, #8
 80148b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80148b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80148b8:	f002 fdc4 	bl	8017444 <rmw_take_response>
 80148bc:	4605      	mov	r5, r0
 80148be:	b9c8      	cbnz	r0, 80148f4 <rcl_take_response+0x84>
 80148c0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80148c4:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80148c8:	2a00      	cmp	r2, #0
 80148ca:	bf08      	it	eq
 80148cc:	461d      	moveq	r5, r3
 80148ce:	f10d 0e18 	add.w	lr, sp, #24
 80148d2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80148d6:	46a4      	mov	ip, r4
 80148d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80148dc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80148e0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80148e4:	4628      	mov	r0, r5
 80148e6:	b00c      	add	sp, #48	@ 0x30
 80148e8:	bd70      	pop	{r4, r5, r6, pc}
 80148ea:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 80148ee:	e7ee      	b.n	80148ce <rcl_take_response+0x5e>
 80148f0:	250b      	movs	r5, #11
 80148f2:	e7ec      	b.n	80148ce <rcl_take_response+0x5e>
 80148f4:	2501      	movs	r5, #1
 80148f6:	e7ea      	b.n	80148ce <rcl_take_response+0x5e>
	...

08014900 <rcl_client_is_valid>:
 8014900:	b130      	cbz	r0, 8014910 <rcl_client_is_valid+0x10>
 8014902:	6800      	ldr	r0, [r0, #0]
 8014904:	b120      	cbz	r0, 8014910 <rcl_client_is_valid+0x10>
 8014906:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801490a:	3800      	subs	r0, #0
 801490c:	bf18      	it	ne
 801490e:	2001      	movne	r0, #1
 8014910:	4770      	bx	lr
 8014912:	bf00      	nop

08014914 <rcl_convert_rmw_ret_to_rcl_ret>:
 8014914:	280b      	cmp	r0, #11
 8014916:	dc0d      	bgt.n	8014934 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8014918:	2800      	cmp	r0, #0
 801491a:	db09      	blt.n	8014930 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801491c:	280b      	cmp	r0, #11
 801491e:	d807      	bhi.n	8014930 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8014920:	e8df f000 	tbb	[pc, r0]
 8014924:	07060607 	.word	0x07060607
 8014928:	06060606 	.word	0x06060606
 801492c:	07070606 	.word	0x07070606
 8014930:	2001      	movs	r0, #1
 8014932:	4770      	bx	lr
 8014934:	28cb      	cmp	r0, #203	@ 0xcb
 8014936:	bf18      	it	ne
 8014938:	2001      	movne	r0, #1
 801493a:	4770      	bx	lr

0801493c <rcl_get_zero_initialized_guard_condition>:
 801493c:	4a03      	ldr	r2, [pc, #12]	@ (801494c <rcl_get_zero_initialized_guard_condition+0x10>)
 801493e:	4603      	mov	r3, r0
 8014940:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014944:	e883 0003 	stmia.w	r3, {r0, r1}
 8014948:	4618      	mov	r0, r3
 801494a:	4770      	bx	lr
 801494c:	0801b5b4 	.word	0x0801b5b4

08014950 <rcl_guard_condition_init>:
 8014950:	b082      	sub	sp, #8
 8014952:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014954:	b087      	sub	sp, #28
 8014956:	ac0c      	add	r4, sp, #48	@ 0x30
 8014958:	e884 000c 	stmia.w	r4, {r2, r3}
 801495c:	46a6      	mov	lr, r4
 801495e:	460d      	mov	r5, r1
 8014960:	4604      	mov	r4, r0
 8014962:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014966:	f10d 0c04 	add.w	ip, sp, #4
 801496a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801496e:	f8de 3000 	ldr.w	r3, [lr]
 8014972:	f8cc 3000 	str.w	r3, [ip]
 8014976:	a801      	add	r0, sp, #4
 8014978:	f7f9 fbee 	bl	800e158 <rcutils_allocator_is_valid>
 801497c:	b338      	cbz	r0, 80149ce <rcl_guard_condition_init+0x7e>
 801497e:	b334      	cbz	r4, 80149ce <rcl_guard_condition_init+0x7e>
 8014980:	6866      	ldr	r6, [r4, #4]
 8014982:	b9ee      	cbnz	r6, 80149c0 <rcl_guard_condition_init+0x70>
 8014984:	b31d      	cbz	r5, 80149ce <rcl_guard_condition_init+0x7e>
 8014986:	4628      	mov	r0, r5
 8014988:	f7f7 fb50 	bl	800c02c <rcl_context_is_valid>
 801498c:	b308      	cbz	r0, 80149d2 <rcl_guard_condition_init+0x82>
 801498e:	9b01      	ldr	r3, [sp, #4]
 8014990:	9905      	ldr	r1, [sp, #20]
 8014992:	201c      	movs	r0, #28
 8014994:	4798      	blx	r3
 8014996:	4607      	mov	r7, r0
 8014998:	6060      	str	r0, [r4, #4]
 801499a:	b310      	cbz	r0, 80149e2 <rcl_guard_condition_init+0x92>
 801499c:	6828      	ldr	r0, [r5, #0]
 801499e:	3028      	adds	r0, #40	@ 0x28
 80149a0:	f002 fbae 	bl	8017100 <rmw_create_guard_condition>
 80149a4:	6038      	str	r0, [r7, #0]
 80149a6:	6860      	ldr	r0, [r4, #4]
 80149a8:	6805      	ldr	r5, [r0, #0]
 80149aa:	b1a5      	cbz	r5, 80149d6 <rcl_guard_condition_init+0x86>
 80149ac:	2301      	movs	r3, #1
 80149ae:	ac01      	add	r4, sp, #4
 80149b0:	7103      	strb	r3, [r0, #4]
 80149b2:	f100 0708 	add.w	r7, r0, #8
 80149b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80149b8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80149ba:	6823      	ldr	r3, [r4, #0]
 80149bc:	603b      	str	r3, [r7, #0]
 80149be:	e000      	b.n	80149c2 <rcl_guard_condition_init+0x72>
 80149c0:	2664      	movs	r6, #100	@ 0x64
 80149c2:	4630      	mov	r0, r6
 80149c4:	b007      	add	sp, #28
 80149c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80149ca:	b002      	add	sp, #8
 80149cc:	4770      	bx	lr
 80149ce:	260b      	movs	r6, #11
 80149d0:	e7f7      	b.n	80149c2 <rcl_guard_condition_init+0x72>
 80149d2:	2665      	movs	r6, #101	@ 0x65
 80149d4:	e7f5      	b.n	80149c2 <rcl_guard_condition_init+0x72>
 80149d6:	9b02      	ldr	r3, [sp, #8]
 80149d8:	9905      	ldr	r1, [sp, #20]
 80149da:	4798      	blx	r3
 80149dc:	2601      	movs	r6, #1
 80149de:	6065      	str	r5, [r4, #4]
 80149e0:	e7ef      	b.n	80149c2 <rcl_guard_condition_init+0x72>
 80149e2:	260a      	movs	r6, #10
 80149e4:	e7ed      	b.n	80149c2 <rcl_guard_condition_init+0x72>
 80149e6:	bf00      	nop

080149e8 <rcl_guard_condition_init_from_rmw>:
 80149e8:	b082      	sub	sp, #8
 80149ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149ee:	b086      	sub	sp, #24
 80149f0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80149f4:	4604      	mov	r4, r0
 80149f6:	f84c 3f04 	str.w	r3, [ip, #4]!
 80149fa:	460e      	mov	r6, r1
 80149fc:	4617      	mov	r7, r2
 80149fe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014a02:	f10d 0e04 	add.w	lr, sp, #4
 8014a06:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014a0a:	f8dc 3000 	ldr.w	r3, [ip]
 8014a0e:	f8ce 3000 	str.w	r3, [lr]
 8014a12:	a801      	add	r0, sp, #4
 8014a14:	f7f9 fba0 	bl	800e158 <rcutils_allocator_is_valid>
 8014a18:	b350      	cbz	r0, 8014a70 <rcl_guard_condition_init_from_rmw+0x88>
 8014a1a:	b34c      	cbz	r4, 8014a70 <rcl_guard_condition_init_from_rmw+0x88>
 8014a1c:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8014a20:	f1b8 0f00 	cmp.w	r8, #0
 8014a24:	d11e      	bne.n	8014a64 <rcl_guard_condition_init_from_rmw+0x7c>
 8014a26:	b31f      	cbz	r7, 8014a70 <rcl_guard_condition_init_from_rmw+0x88>
 8014a28:	4638      	mov	r0, r7
 8014a2a:	f7f7 faff 	bl	800c02c <rcl_context_is_valid>
 8014a2e:	b328      	cbz	r0, 8014a7c <rcl_guard_condition_init_from_rmw+0x94>
 8014a30:	9b01      	ldr	r3, [sp, #4]
 8014a32:	9905      	ldr	r1, [sp, #20]
 8014a34:	201c      	movs	r0, #28
 8014a36:	4798      	blx	r3
 8014a38:	4605      	mov	r5, r0
 8014a3a:	6060      	str	r0, [r4, #4]
 8014a3c:	b358      	cbz	r0, 8014a96 <rcl_guard_condition_init_from_rmw+0xae>
 8014a3e:	b1fe      	cbz	r6, 8014a80 <rcl_guard_condition_init_from_rmw+0x98>
 8014a40:	6006      	str	r6, [r0, #0]
 8014a42:	f880 8004 	strb.w	r8, [r0, #4]
 8014a46:	ac01      	add	r4, sp, #4
 8014a48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014a4a:	f105 0c08 	add.w	ip, r5, #8
 8014a4e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014a52:	6823      	ldr	r3, [r4, #0]
 8014a54:	f8cc 3000 	str.w	r3, [ip]
 8014a58:	2000      	movs	r0, #0
 8014a5a:	b006      	add	sp, #24
 8014a5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014a60:	b002      	add	sp, #8
 8014a62:	4770      	bx	lr
 8014a64:	2064      	movs	r0, #100	@ 0x64
 8014a66:	b006      	add	sp, #24
 8014a68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014a6c:	b002      	add	sp, #8
 8014a6e:	4770      	bx	lr
 8014a70:	200b      	movs	r0, #11
 8014a72:	b006      	add	sp, #24
 8014a74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014a78:	b002      	add	sp, #8
 8014a7a:	4770      	bx	lr
 8014a7c:	2065      	movs	r0, #101	@ 0x65
 8014a7e:	e7f2      	b.n	8014a66 <rcl_guard_condition_init_from_rmw+0x7e>
 8014a80:	6838      	ldr	r0, [r7, #0]
 8014a82:	3028      	adds	r0, #40	@ 0x28
 8014a84:	f002 fb3c 	bl	8017100 <rmw_create_guard_condition>
 8014a88:	6028      	str	r0, [r5, #0]
 8014a8a:	6865      	ldr	r5, [r4, #4]
 8014a8c:	682e      	ldr	r6, [r5, #0]
 8014a8e:	b126      	cbz	r6, 8014a9a <rcl_guard_condition_init_from_rmw+0xb2>
 8014a90:	2301      	movs	r3, #1
 8014a92:	712b      	strb	r3, [r5, #4]
 8014a94:	e7d7      	b.n	8014a46 <rcl_guard_condition_init_from_rmw+0x5e>
 8014a96:	200a      	movs	r0, #10
 8014a98:	e7e5      	b.n	8014a66 <rcl_guard_condition_init_from_rmw+0x7e>
 8014a9a:	4628      	mov	r0, r5
 8014a9c:	9b02      	ldr	r3, [sp, #8]
 8014a9e:	9905      	ldr	r1, [sp, #20]
 8014aa0:	4798      	blx	r3
 8014aa2:	6066      	str	r6, [r4, #4]
 8014aa4:	2001      	movs	r0, #1
 8014aa6:	e7de      	b.n	8014a66 <rcl_guard_condition_init_from_rmw+0x7e>

08014aa8 <rcl_guard_condition_fini>:
 8014aa8:	b570      	push	{r4, r5, r6, lr}
 8014aaa:	b082      	sub	sp, #8
 8014aac:	b1f0      	cbz	r0, 8014aec <rcl_guard_condition_fini+0x44>
 8014aae:	6843      	ldr	r3, [r0, #4]
 8014ab0:	4604      	mov	r4, r0
 8014ab2:	b163      	cbz	r3, 8014ace <rcl_guard_condition_fini+0x26>
 8014ab4:	6818      	ldr	r0, [r3, #0]
 8014ab6:	68de      	ldr	r6, [r3, #12]
 8014ab8:	6999      	ldr	r1, [r3, #24]
 8014aba:	b160      	cbz	r0, 8014ad6 <rcl_guard_condition_fini+0x2e>
 8014abc:	791d      	ldrb	r5, [r3, #4]
 8014abe:	b965      	cbnz	r5, 8014ada <rcl_guard_condition_fini+0x32>
 8014ac0:	4618      	mov	r0, r3
 8014ac2:	47b0      	blx	r6
 8014ac4:	2300      	movs	r3, #0
 8014ac6:	4628      	mov	r0, r5
 8014ac8:	6063      	str	r3, [r4, #4]
 8014aca:	b002      	add	sp, #8
 8014acc:	bd70      	pop	{r4, r5, r6, pc}
 8014ace:	461d      	mov	r5, r3
 8014ad0:	4628      	mov	r0, r5
 8014ad2:	b002      	add	sp, #8
 8014ad4:	bd70      	pop	{r4, r5, r6, pc}
 8014ad6:	4605      	mov	r5, r0
 8014ad8:	e7f2      	b.n	8014ac0 <rcl_guard_condition_fini+0x18>
 8014ada:	9101      	str	r1, [sp, #4]
 8014adc:	f002 fb24 	bl	8017128 <rmw_destroy_guard_condition>
 8014ae0:	1e05      	subs	r5, r0, #0
 8014ae2:	6863      	ldr	r3, [r4, #4]
 8014ae4:	9901      	ldr	r1, [sp, #4]
 8014ae6:	bf18      	it	ne
 8014ae8:	2501      	movne	r5, #1
 8014aea:	e7e9      	b.n	8014ac0 <rcl_guard_condition_fini+0x18>
 8014aec:	250b      	movs	r5, #11
 8014aee:	4628      	mov	r0, r5
 8014af0:	b002      	add	sp, #8
 8014af2:	bd70      	pop	{r4, r5, r6, pc}

08014af4 <rcl_guard_condition_get_default_options>:
 8014af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014af6:	b087      	sub	sp, #28
 8014af8:	4606      	mov	r6, r0
 8014afa:	4668      	mov	r0, sp
 8014afc:	f7f9 fb1e 	bl	800e13c <rcutils_get_default_allocator>
 8014b00:	4b09      	ldr	r3, [pc, #36]	@ (8014b28 <rcl_guard_condition_get_default_options+0x34>)
 8014b02:	46ee      	mov	lr, sp
 8014b04:	469c      	mov	ip, r3
 8014b06:	461d      	mov	r5, r3
 8014b08:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014b0c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014b10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014b12:	4634      	mov	r4, r6
 8014b14:	f8de 7000 	ldr.w	r7, [lr]
 8014b18:	f8cc 7000 	str.w	r7, [ip]
 8014b1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014b1e:	4630      	mov	r0, r6
 8014b20:	6027      	str	r7, [r4, #0]
 8014b22:	b007      	add	sp, #28
 8014b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b26:	bf00      	nop
 8014b28:	200118d0 	.word	0x200118d0

08014b2c <rcl_trigger_guard_condition>:
 8014b2c:	b148      	cbz	r0, 8014b42 <rcl_trigger_guard_condition+0x16>
 8014b2e:	b508      	push	{r3, lr}
 8014b30:	6843      	ldr	r3, [r0, #4]
 8014b32:	b143      	cbz	r3, 8014b46 <rcl_trigger_guard_condition+0x1a>
 8014b34:	6818      	ldr	r0, [r3, #0]
 8014b36:	f002 fccf 	bl	80174d8 <rmw_trigger_guard_condition>
 8014b3a:	3800      	subs	r0, #0
 8014b3c:	bf18      	it	ne
 8014b3e:	2001      	movne	r0, #1
 8014b40:	bd08      	pop	{r3, pc}
 8014b42:	200b      	movs	r0, #11
 8014b44:	4770      	bx	lr
 8014b46:	200b      	movs	r0, #11
 8014b48:	bd08      	pop	{r3, pc}
 8014b4a:	bf00      	nop

08014b4c <rcl_guard_condition_get_rmw_handle>:
 8014b4c:	b110      	cbz	r0, 8014b54 <rcl_guard_condition_get_rmw_handle+0x8>
 8014b4e:	6840      	ldr	r0, [r0, #4]
 8014b50:	b100      	cbz	r0, 8014b54 <rcl_guard_condition_get_rmw_handle+0x8>
 8014b52:	6800      	ldr	r0, [r0, #0]
 8014b54:	4770      	bx	lr
 8014b56:	bf00      	nop

08014b58 <rcl_init>:
 8014b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b5c:	1e05      	subs	r5, r0, #0
 8014b5e:	b09c      	sub	sp, #112	@ 0x70
 8014b60:	460e      	mov	r6, r1
 8014b62:	4690      	mov	r8, r2
 8014b64:	461f      	mov	r7, r3
 8014b66:	f340 8099 	ble.w	8014c9c <rcl_init+0x144>
 8014b6a:	2900      	cmp	r1, #0
 8014b6c:	f000 8099 	beq.w	8014ca2 <rcl_init+0x14a>
 8014b70:	f1a1 0e04 	sub.w	lr, r1, #4
 8014b74:	f04f 0c00 	mov.w	ip, #0
 8014b78:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8014b7c:	f10c 0c01 	add.w	ip, ip, #1
 8014b80:	2c00      	cmp	r4, #0
 8014b82:	f000 808e 	beq.w	8014ca2 <rcl_init+0x14a>
 8014b86:	4565      	cmp	r5, ip
 8014b88:	d1f6      	bne.n	8014b78 <rcl_init+0x20>
 8014b8a:	f1b8 0f00 	cmp.w	r8, #0
 8014b8e:	f000 8088 	beq.w	8014ca2 <rcl_init+0x14a>
 8014b92:	f8d8 4000 	ldr.w	r4, [r8]
 8014b96:	2c00      	cmp	r4, #0
 8014b98:	f000 8083 	beq.w	8014ca2 <rcl_init+0x14a>
 8014b9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014b9e:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 8014ba2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014ba6:	6823      	ldr	r3, [r4, #0]
 8014ba8:	f8cc 3000 	str.w	r3, [ip]
 8014bac:	a817      	add	r0, sp, #92	@ 0x5c
 8014bae:	f7f9 fad3 	bl	800e158 <rcutils_allocator_is_valid>
 8014bb2:	2800      	cmp	r0, #0
 8014bb4:	d075      	beq.n	8014ca2 <rcl_init+0x14a>
 8014bb6:	2f00      	cmp	r7, #0
 8014bb8:	d073      	beq.n	8014ca2 <rcl_init+0x14a>
 8014bba:	683b      	ldr	r3, [r7, #0]
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d175      	bne.n	8014cac <rcl_init+0x154>
 8014bc0:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 8014bc4:	2178      	movs	r1, #120	@ 0x78
 8014bc6:	2001      	movs	r0, #1
 8014bc8:	4798      	blx	r3
 8014bca:	4604      	mov	r4, r0
 8014bcc:	6038      	str	r0, [r7, #0]
 8014bce:	2800      	cmp	r0, #0
 8014bd0:	f000 80a0 	beq.w	8014d14 <rcl_init+0x1bc>
 8014bd4:	a802      	add	r0, sp, #8
 8014bd6:	f002 f833 	bl	8016c40 <rmw_get_zero_initialized_context>
 8014bda:	a902      	add	r1, sp, #8
 8014bdc:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8014be0:	2250      	movs	r2, #80	@ 0x50
 8014be2:	ac17      	add	r4, sp, #92	@ 0x5c
 8014be4:	f004 fedf 	bl	80199a6 <memcpy>
 8014be8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014bea:	f8d7 e000 	ldr.w	lr, [r7]
 8014bee:	46f4      	mov	ip, lr
 8014bf0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014bf4:	6823      	ldr	r3, [r4, #0]
 8014bf6:	f8cc 3000 	str.w	r3, [ip]
 8014bfa:	f10e 0114 	add.w	r1, lr, #20
 8014bfe:	4640      	mov	r0, r8
 8014c00:	f7f7 fb26 	bl	800c250 <rcl_init_options_copy>
 8014c04:	4604      	mov	r4, r0
 8014c06:	2800      	cmp	r0, #0
 8014c08:	d144      	bne.n	8014c94 <rcl_init+0x13c>
 8014c0a:	f8d7 9000 	ldr.w	r9, [r7]
 8014c0e:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8014c12:	f8c9 0020 	str.w	r0, [r9, #32]
 8014c16:	f8c9 5018 	str.w	r5, [r9, #24]
 8014c1a:	f8c9 801c 	str.w	r8, [r9, #28]
 8014c1e:	2d00      	cmp	r5, #0
 8014c20:	d04b      	beq.n	8014cba <rcl_init+0x162>
 8014c22:	2e00      	cmp	r6, #0
 8014c24:	d049      	beq.n	8014cba <rcl_init+0x162>
 8014c26:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 8014c2a:	2104      	movs	r1, #4
 8014c2c:	4628      	mov	r0, r5
 8014c2e:	4798      	blx	r3
 8014c30:	f8c9 0020 	str.w	r0, [r9, #32]
 8014c34:	f8d7 9000 	ldr.w	r9, [r7]
 8014c38:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8014c3c:	46ca      	mov	sl, r9
 8014c3e:	b343      	cbz	r3, 8014c92 <rcl_init+0x13a>
 8014c40:	2d01      	cmp	r5, #1
 8014c42:	f178 0300 	sbcs.w	r3, r8, #0
 8014c46:	db38      	blt.n	8014cba <rcl_init+0x162>
 8014c48:	2400      	movs	r4, #0
 8014c4a:	3e04      	subs	r6, #4
 8014c4c:	46a1      	mov	r9, r4
 8014c4e:	e00b      	b.n	8014c68 <rcl_init+0x110>
 8014c50:	6831      	ldr	r1, [r6, #0]
 8014c52:	f004 fea8 	bl	80199a6 <memcpy>
 8014c56:	3401      	adds	r4, #1
 8014c58:	f149 0900 	adc.w	r9, r9, #0
 8014c5c:	45c8      	cmp	r8, r9
 8014c5e:	bf08      	it	eq
 8014c60:	42a5      	cmpeq	r5, r4
 8014c62:	d028      	beq.n	8014cb6 <rcl_init+0x15e>
 8014c64:	f8d7 a000 	ldr.w	sl, [r7]
 8014c68:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8014c6c:	f7eb fada 	bl	8000224 <strlen>
 8014c70:	1c42      	adds	r2, r0, #1
 8014c72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8014c74:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8014c76:	f8da a020 	ldr.w	sl, [sl, #32]
 8014c7a:	9201      	str	r2, [sp, #4]
 8014c7c:	4610      	mov	r0, r2
 8014c7e:	4798      	blx	r3
 8014c80:	683b      	ldr	r3, [r7, #0]
 8014c82:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8014c86:	6a1b      	ldr	r3, [r3, #32]
 8014c88:	9a01      	ldr	r2, [sp, #4]
 8014c8a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014c8e:	2800      	cmp	r0, #0
 8014c90:	d1de      	bne.n	8014c50 <rcl_init+0xf8>
 8014c92:	240a      	movs	r4, #10
 8014c94:	4638      	mov	r0, r7
 8014c96:	f7f7 f9d5 	bl	800c044 <__cleanup_context>
 8014c9a:	e003      	b.n	8014ca4 <rcl_init+0x14c>
 8014c9c:	2900      	cmp	r1, #0
 8014c9e:	f43f af74 	beq.w	8014b8a <rcl_init+0x32>
 8014ca2:	240b      	movs	r4, #11
 8014ca4:	4620      	mov	r0, r4
 8014ca6:	b01c      	add	sp, #112	@ 0x70
 8014ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014cac:	2464      	movs	r4, #100	@ 0x64
 8014cae:	4620      	mov	r0, r4
 8014cb0:	b01c      	add	sp, #112	@ 0x70
 8014cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014cb6:	f8d7 9000 	ldr.w	r9, [r7]
 8014cba:	491d      	ldr	r1, [pc, #116]	@ (8014d30 <rcl_init+0x1d8>)
 8014cbc:	680b      	ldr	r3, [r1, #0]
 8014cbe:	3301      	adds	r3, #1
 8014cc0:	d023      	beq.n	8014d0a <rcl_init+0x1b2>
 8014cc2:	600b      	str	r3, [r1, #0]
 8014cc4:	461a      	mov	r2, r3
 8014cc6:	2400      	movs	r4, #0
 8014cc8:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8014ccc:	607b      	str	r3, [r7, #4]
 8014cce:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8014cd0:	6182      	str	r2, [r0, #24]
 8014cd2:	3301      	adds	r3, #1
 8014cd4:	61c4      	str	r4, [r0, #28]
 8014cd6:	d01f      	beq.n	8014d18 <rcl_init+0x1c0>
 8014cd8:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8014cdc:	b94b      	cbnz	r3, 8014cf2 <rcl_init+0x19a>
 8014cde:	3030      	adds	r0, #48	@ 0x30
 8014ce0:	f000 f846 	bl	8014d70 <rcl_get_localhost_only>
 8014ce4:	4604      	mov	r4, r0
 8014ce6:	2800      	cmp	r0, #0
 8014ce8:	d1d4      	bne.n	8014c94 <rcl_init+0x13c>
 8014cea:	f8d7 9000 	ldr.w	r9, [r7]
 8014cee:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8014cf2:	f109 0128 	add.w	r1, r9, #40	@ 0x28
 8014cf6:	3018      	adds	r0, #24
 8014cf8:	f7f9 ff5e 	bl	800ebb8 <rmw_init>
 8014cfc:	4604      	mov	r4, r0
 8014cfe:	2800      	cmp	r0, #0
 8014d00:	d0d0      	beq.n	8014ca4 <rcl_init+0x14c>
 8014d02:	f7ff fe07 	bl	8014914 <rcl_convert_rmw_ret_to_rcl_ret>
 8014d06:	4604      	mov	r4, r0
 8014d08:	e7c4      	b.n	8014c94 <rcl_init+0x13c>
 8014d0a:	2201      	movs	r2, #1
 8014d0c:	461c      	mov	r4, r3
 8014d0e:	600a      	str	r2, [r1, #0]
 8014d10:	4613      	mov	r3, r2
 8014d12:	e7d9      	b.n	8014cc8 <rcl_init+0x170>
 8014d14:	240a      	movs	r4, #10
 8014d16:	e7c5      	b.n	8014ca4 <rcl_init+0x14c>
 8014d18:	3024      	adds	r0, #36	@ 0x24
 8014d1a:	f003 fd31 	bl	8018780 <rcl_get_default_domain_id>
 8014d1e:	4604      	mov	r4, r0
 8014d20:	2800      	cmp	r0, #0
 8014d22:	d1b7      	bne.n	8014c94 <rcl_init+0x13c>
 8014d24:	f8d7 9000 	ldr.w	r9, [r7]
 8014d28:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8014d2c:	e7d4      	b.n	8014cd8 <rcl_init+0x180>
 8014d2e:	bf00      	nop
 8014d30:	200118e4 	.word	0x200118e4

08014d34 <rcl_shutdown>:
 8014d34:	b1a8      	cbz	r0, 8014d62 <rcl_shutdown+0x2e>
 8014d36:	6803      	ldr	r3, [r0, #0]
 8014d38:	b510      	push	{r4, lr}
 8014d3a:	4604      	mov	r4, r0
 8014d3c:	b173      	cbz	r3, 8014d5c <rcl_shutdown+0x28>
 8014d3e:	f7f7 f975 	bl	800c02c <rcl_context_is_valid>
 8014d42:	b140      	cbz	r0, 8014d56 <rcl_shutdown+0x22>
 8014d44:	6820      	ldr	r0, [r4, #0]
 8014d46:	3028      	adds	r0, #40	@ 0x28
 8014d48:	f7fa f86c 	bl	800ee24 <rmw_shutdown>
 8014d4c:	4603      	mov	r3, r0
 8014d4e:	b958      	cbnz	r0, 8014d68 <rcl_shutdown+0x34>
 8014d50:	6060      	str	r0, [r4, #4]
 8014d52:	4618      	mov	r0, r3
 8014d54:	bd10      	pop	{r4, pc}
 8014d56:	236a      	movs	r3, #106	@ 0x6a
 8014d58:	4618      	mov	r0, r3
 8014d5a:	bd10      	pop	{r4, pc}
 8014d5c:	230b      	movs	r3, #11
 8014d5e:	4618      	mov	r0, r3
 8014d60:	bd10      	pop	{r4, pc}
 8014d62:	230b      	movs	r3, #11
 8014d64:	4618      	mov	r0, r3
 8014d66:	4770      	bx	lr
 8014d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014d6c:	f7ff bdd2 	b.w	8014914 <rcl_convert_rmw_ret_to_rcl_ret>

08014d70 <rcl_get_localhost_only>:
 8014d70:	b510      	push	{r4, lr}
 8014d72:	b082      	sub	sp, #8
 8014d74:	2300      	movs	r3, #0
 8014d76:	9301      	str	r3, [sp, #4]
 8014d78:	b1b8      	cbz	r0, 8014daa <rcl_get_localhost_only+0x3a>
 8014d7a:	4604      	mov	r4, r0
 8014d7c:	a901      	add	r1, sp, #4
 8014d7e:	480c      	ldr	r0, [pc, #48]	@ (8014db0 <rcl_get_localhost_only+0x40>)
 8014d80:	f7f9 fa9c 	bl	800e2bc <rcutils_get_env>
 8014d84:	b110      	cbz	r0, 8014d8c <rcl_get_localhost_only+0x1c>
 8014d86:	2001      	movs	r0, #1
 8014d88:	b002      	add	sp, #8
 8014d8a:	bd10      	pop	{r4, pc}
 8014d8c:	9b01      	ldr	r3, [sp, #4]
 8014d8e:	b113      	cbz	r3, 8014d96 <rcl_get_localhost_only+0x26>
 8014d90:	781a      	ldrb	r2, [r3, #0]
 8014d92:	2a31      	cmp	r2, #49	@ 0x31
 8014d94:	d004      	beq.n	8014da0 <rcl_get_localhost_only+0x30>
 8014d96:	2302      	movs	r3, #2
 8014d98:	2000      	movs	r0, #0
 8014d9a:	7023      	strb	r3, [r4, #0]
 8014d9c:	b002      	add	sp, #8
 8014d9e:	bd10      	pop	{r4, pc}
 8014da0:	785b      	ldrb	r3, [r3, #1]
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d1f7      	bne.n	8014d96 <rcl_get_localhost_only+0x26>
 8014da6:	2301      	movs	r3, #1
 8014da8:	e7f6      	b.n	8014d98 <rcl_get_localhost_only+0x28>
 8014daa:	200b      	movs	r0, #11
 8014dac:	b002      	add	sp, #8
 8014dae:	bd10      	pop	{r4, pc}
 8014db0:	0801aea4 	.word	0x0801aea4

08014db4 <rcl_node_resolve_name>:
 8014db4:	b082      	sub	sp, #8
 8014db6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dba:	b091      	sub	sp, #68	@ 0x44
 8014dbc:	ac1a      	add	r4, sp, #104	@ 0x68
 8014dbe:	e884 000c 	stmia.w	r4, {r2, r3}
 8014dc2:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8014dc6:	2800      	cmp	r0, #0
 8014dc8:	d03b      	beq.n	8014e42 <rcl_node_resolve_name+0x8e>
 8014dca:	460c      	mov	r4, r1
 8014dcc:	4605      	mov	r5, r0
 8014dce:	f7f7 fc4f 	bl	800c670 <rcl_node_get_options>
 8014dd2:	2800      	cmp	r0, #0
 8014dd4:	d037      	beq.n	8014e46 <rcl_node_resolve_name+0x92>
 8014dd6:	4628      	mov	r0, r5
 8014dd8:	f7f7 fc3a 	bl	800c650 <rcl_node_get_name>
 8014ddc:	4606      	mov	r6, r0
 8014dde:	4628      	mov	r0, r5
 8014de0:	f7f7 fc3e 	bl	800c660 <rcl_node_get_namespace>
 8014de4:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8014de8:	4681      	mov	r9, r0
 8014dea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014dee:	ad0b      	add	r5, sp, #44	@ 0x2c
 8014df0:	46ac      	mov	ip, r5
 8014df2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014df6:	f8de 3000 	ldr.w	r3, [lr]
 8014dfa:	f8cc 3000 	str.w	r3, [ip]
 8014dfe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014e00:	b1fb      	cbz	r3, 8014e42 <rcl_node_resolve_name+0x8e>
 8014e02:	468a      	mov	sl, r1
 8014e04:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8014e08:	f001 fdee 	bl	80169e8 <rcutils_get_zero_initialized_string_map>
 8014e0c:	ab10      	add	r3, sp, #64	@ 0x40
 8014e0e:	9008      	str	r0, [sp, #32]
 8014e10:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8014e14:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014e18:	2100      	movs	r1, #0
 8014e1a:	e895 000c 	ldmia.w	r5, {r2, r3}
 8014e1e:	a808      	add	r0, sp, #32
 8014e20:	f001 fe5a 	bl	8016ad8 <rcutils_string_map_init>
 8014e24:	4607      	mov	r7, r0
 8014e26:	b180      	cbz	r0, 8014e4a <rcl_node_resolve_name+0x96>
 8014e28:	f7f9 fa60 	bl	800e2ec <rcutils_get_error_string>
 8014e2c:	f7f9 fa74 	bl	800e318 <rcutils_reset_error>
 8014e30:	2f0a      	cmp	r7, #10
 8014e32:	bf18      	it	ne
 8014e34:	2701      	movne	r7, #1
 8014e36:	4638      	mov	r0, r7
 8014e38:	b011      	add	sp, #68	@ 0x44
 8014e3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e3e:	b002      	add	sp, #8
 8014e40:	4770      	bx	lr
 8014e42:	270b      	movs	r7, #11
 8014e44:	e7f7      	b.n	8014e36 <rcl_node_resolve_name+0x82>
 8014e46:	2701      	movs	r7, #1
 8014e48:	e7f5      	b.n	8014e36 <rcl_node_resolve_name+0x82>
 8014e4a:	9009      	str	r0, [sp, #36]	@ 0x24
 8014e4c:	9007      	str	r0, [sp, #28]
 8014e4e:	a808      	add	r0, sp, #32
 8014e50:	f003 fe28 	bl	8018aa4 <rcl_get_default_topic_name_substitutions>
 8014e54:	4607      	mov	r7, r0
 8014e56:	b1a8      	cbz	r0, 8014e84 <rcl_node_resolve_name+0xd0>
 8014e58:	280a      	cmp	r0, #10
 8014e5a:	9c07      	ldr	r4, [sp, #28]
 8014e5c:	d000      	beq.n	8014e60 <rcl_node_resolve_name+0xac>
 8014e5e:	2701      	movs	r7, #1
 8014e60:	a808      	add	r0, sp, #32
 8014e62:	f001 fe79 	bl	8016b58 <rcutils_string_map_fini>
 8014e66:	2800      	cmp	r0, #0
 8014e68:	d13d      	bne.n	8014ee6 <rcl_node_resolve_name+0x132>
 8014e6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014e6c:	4659      	mov	r1, fp
 8014e6e:	47d0      	blx	sl
 8014e70:	4659      	mov	r1, fp
 8014e72:	4620      	mov	r0, r4
 8014e74:	47d0      	blx	sl
 8014e76:	f1b8 0f00 	cmp.w	r8, #0
 8014e7a:	d0dc      	beq.n	8014e36 <rcl_node_resolve_name+0x82>
 8014e7c:	2f67      	cmp	r7, #103	@ 0x67
 8014e7e:	bf08      	it	eq
 8014e80:	2768      	moveq	r7, #104	@ 0x68
 8014e82:	e7d8      	b.n	8014e36 <rcl_node_resolve_name+0x82>
 8014e84:	ab09      	add	r3, sp, #36	@ 0x24
 8014e86:	9305      	str	r3, [sp, #20]
 8014e88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014e8a:	46ec      	mov	ip, sp
 8014e8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014e90:	682b      	ldr	r3, [r5, #0]
 8014e92:	f8cc 3000 	str.w	r3, [ip]
 8014e96:	464a      	mov	r2, r9
 8014e98:	4631      	mov	r1, r6
 8014e9a:	4620      	mov	r0, r4
 8014e9c:	ab08      	add	r3, sp, #32
 8014e9e:	f003 fca3 	bl	80187e8 <rcl_expand_topic_name>
 8014ea2:	4607      	mov	r7, r0
 8014ea4:	b9b8      	cbnz	r0, 8014ed6 <rcl_node_resolve_name+0x122>
 8014ea6:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8014ea8:	9009      	str	r0, [sp, #36]	@ 0x24
 8014eaa:	4602      	mov	r2, r0
 8014eac:	a90a      	add	r1, sp, #40	@ 0x28
 8014eae:	4620      	mov	r0, r4
 8014eb0:	f001 ff5a 	bl	8016d68 <rmw_validate_full_topic_name>
 8014eb4:	b988      	cbnz	r0, 8014eda <rcl_node_resolve_name+0x126>
 8014eb6:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8014eb8:	b9d5      	cbnz	r5, 8014ef0 <rcl_node_resolve_name+0x13c>
 8014eba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014ebc:	a808      	add	r0, sp, #32
 8014ebe:	601c      	str	r4, [r3, #0]
 8014ec0:	f001 fe4a 	bl	8016b58 <rcutils_string_map_fini>
 8014ec4:	4607      	mov	r7, r0
 8014ec6:	b1a8      	cbz	r0, 8014ef4 <rcl_node_resolve_name+0x140>
 8014ec8:	f7f9 fa10 	bl	800e2ec <rcutils_get_error_string>
 8014ecc:	462c      	mov	r4, r5
 8014ece:	f7f9 fa23 	bl	800e318 <rcutils_reset_error>
 8014ed2:	2701      	movs	r7, #1
 8014ed4:	e7c9      	b.n	8014e6a <rcl_node_resolve_name+0xb6>
 8014ed6:	9c07      	ldr	r4, [sp, #28]
 8014ed8:	e7c2      	b.n	8014e60 <rcl_node_resolve_name+0xac>
 8014eda:	f7f9 fa07 	bl	800e2ec <rcutils_get_error_string>
 8014ede:	2701      	movs	r7, #1
 8014ee0:	f7f9 fa1a 	bl	800e318 <rcutils_reset_error>
 8014ee4:	e7bc      	b.n	8014e60 <rcl_node_resolve_name+0xac>
 8014ee6:	f7f9 fa01 	bl	800e2ec <rcutils_get_error_string>
 8014eea:	f7f9 fa15 	bl	800e318 <rcutils_reset_error>
 8014eee:	e7bc      	b.n	8014e6a <rcl_node_resolve_name+0xb6>
 8014ef0:	2767      	movs	r7, #103	@ 0x67
 8014ef2:	e7b5      	b.n	8014e60 <rcl_node_resolve_name+0xac>
 8014ef4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014ef6:	4659      	mov	r1, fp
 8014ef8:	47d0      	blx	sl
 8014efa:	4659      	mov	r1, fp
 8014efc:	4638      	mov	r0, r7
 8014efe:	47d0      	blx	sl
 8014f00:	e799      	b.n	8014e36 <rcl_node_resolve_name+0x82>
 8014f02:	bf00      	nop

08014f04 <rcl_service_get_rmw_handle>:
 8014f04:	b118      	cbz	r0, 8014f0e <rcl_service_get_rmw_handle+0xa>
 8014f06:	6800      	ldr	r0, [r0, #0]
 8014f08:	b108      	cbz	r0, 8014f0e <rcl_service_get_rmw_handle+0xa>
 8014f0a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8014f0e:	4770      	bx	lr

08014f10 <rcl_take_request>:
 8014f10:	b570      	push	{r4, r5, r6, lr}
 8014f12:	468e      	mov	lr, r1
 8014f14:	460c      	mov	r4, r1
 8014f16:	4616      	mov	r6, r2
 8014f18:	4605      	mov	r5, r0
 8014f1a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014f1e:	b08c      	sub	sp, #48	@ 0x30
 8014f20:	f10d 0c18 	add.w	ip, sp, #24
 8014f24:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014f28:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014f2c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014f30:	b30d      	cbz	r5, 8014f76 <rcl_take_request+0x66>
 8014f32:	682b      	ldr	r3, [r5, #0]
 8014f34:	b1fb      	cbz	r3, 8014f76 <rcl_take_request+0x66>
 8014f36:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8014f3a:	b1e0      	cbz	r0, 8014f76 <rcl_take_request+0x66>
 8014f3c:	b336      	cbz	r6, 8014f8c <rcl_take_request+0x7c>
 8014f3e:	2300      	movs	r3, #0
 8014f40:	f88d 3007 	strb.w	r3, [sp, #7]
 8014f44:	4632      	mov	r2, r6
 8014f46:	f10d 0307 	add.w	r3, sp, #7
 8014f4a:	a902      	add	r1, sp, #8
 8014f4c:	f002 f9c0 	bl	80172d0 <rmw_take_request>
 8014f50:	4605      	mov	r5, r0
 8014f52:	b198      	cbz	r0, 8014f7c <rcl_take_request+0x6c>
 8014f54:	280a      	cmp	r0, #10
 8014f56:	bf18      	it	ne
 8014f58:	2501      	movne	r5, #1
 8014f5a:	f10d 0e18 	add.w	lr, sp, #24
 8014f5e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014f62:	46a4      	mov	ip, r4
 8014f64:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014f68:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014f6c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014f70:	4628      	mov	r0, r5
 8014f72:	b00c      	add	sp, #48	@ 0x30
 8014f74:	bd70      	pop	{r4, r5, r6, pc}
 8014f76:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8014f7a:	e7ee      	b.n	8014f5a <rcl_take_request+0x4a>
 8014f7c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014f80:	f240 2359 	movw	r3, #601	@ 0x259
 8014f84:	2a00      	cmp	r2, #0
 8014f86:	bf08      	it	eq
 8014f88:	461d      	moveq	r5, r3
 8014f8a:	e7e6      	b.n	8014f5a <rcl_take_request+0x4a>
 8014f8c:	250b      	movs	r5, #11
 8014f8e:	e7e4      	b.n	8014f5a <rcl_take_request+0x4a>

08014f90 <rcl_send_response>:
 8014f90:	b170      	cbz	r0, 8014fb0 <rcl_send_response+0x20>
 8014f92:	6800      	ldr	r0, [r0, #0]
 8014f94:	b160      	cbz	r0, 8014fb0 <rcl_send_response+0x20>
 8014f96:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8014f9a:	b148      	cbz	r0, 8014fb0 <rcl_send_response+0x20>
 8014f9c:	b159      	cbz	r1, 8014fb6 <rcl_send_response+0x26>
 8014f9e:	b510      	push	{r4, lr}
 8014fa0:	b15a      	cbz	r2, 8014fba <rcl_send_response+0x2a>
 8014fa2:	f002 f9f3 	bl	801738c <rmw_send_response>
 8014fa6:	b110      	cbz	r0, 8014fae <rcl_send_response+0x1e>
 8014fa8:	2802      	cmp	r0, #2
 8014faa:	bf18      	it	ne
 8014fac:	2001      	movne	r0, #1
 8014fae:	bd10      	pop	{r4, pc}
 8014fb0:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8014fb4:	4770      	bx	lr
 8014fb6:	200b      	movs	r0, #11
 8014fb8:	4770      	bx	lr
 8014fba:	200b      	movs	r0, #11
 8014fbc:	bd10      	pop	{r4, pc}
 8014fbe:	bf00      	nop

08014fc0 <rcl_service_is_valid>:
 8014fc0:	b130      	cbz	r0, 8014fd0 <rcl_service_is_valid+0x10>
 8014fc2:	6800      	ldr	r0, [r0, #0]
 8014fc4:	b120      	cbz	r0, 8014fd0 <rcl_service_is_valid+0x10>
 8014fc6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8014fca:	3800      	subs	r0, #0
 8014fcc:	bf18      	it	ne
 8014fce:	2001      	movne	r0, #1
 8014fd0:	4770      	bx	lr
 8014fd2:	bf00      	nop

08014fd4 <rcl_get_system_time>:
 8014fd4:	4608      	mov	r0, r1
 8014fd6:	f7f9 bb13 	b.w	800e600 <rcutils_system_time_now>
 8014fda:	bf00      	nop

08014fdc <rcl_get_steady_time>:
 8014fdc:	4608      	mov	r0, r1
 8014fde:	f7f9 bb37 	b.w	800e650 <rcutils_steady_time_now>
 8014fe2:	bf00      	nop

08014fe4 <rcl_get_ros_time>:
 8014fe4:	7a03      	ldrb	r3, [r0, #8]
 8014fe6:	b510      	push	{r4, lr}
 8014fe8:	460c      	mov	r4, r1
 8014fea:	b133      	cbz	r3, 8014ffa <rcl_get_ros_time+0x16>
 8014fec:	2105      	movs	r1, #5
 8014fee:	f7f9 f8c1 	bl	800e174 <__atomic_load_8>
 8014ff2:	e9c4 0100 	strd	r0, r1, [r4]
 8014ff6:	2000      	movs	r0, #0
 8014ff8:	bd10      	pop	{r4, pc}
 8014ffa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ffe:	4608      	mov	r0, r1
 8015000:	f7f9 bafe 	b.w	800e600 <rcutils_system_time_now>

08015004 <rcl_clock_init>:
 8015004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015006:	4605      	mov	r5, r0
 8015008:	4610      	mov	r0, r2
 801500a:	4614      	mov	r4, r2
 801500c:	460e      	mov	r6, r1
 801500e:	f7f9 f8a3 	bl	800e158 <rcutils_allocator_is_valid>
 8015012:	b128      	cbz	r0, 8015020 <rcl_clock_init+0x1c>
 8015014:	2d03      	cmp	r5, #3
 8015016:	d803      	bhi.n	8015020 <rcl_clock_init+0x1c>
 8015018:	e8df f005 	tbb	[pc, r5]
 801501c:	06532e1d 	.word	0x06532e1d
 8015020:	f04f 0c0b 	mov.w	ip, #11
 8015024:	4660      	mov	r0, ip
 8015026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015028:	2e00      	cmp	r6, #0
 801502a:	d0f9      	beq.n	8015020 <rcl_clock_init+0x1c>
 801502c:	2c00      	cmp	r4, #0
 801502e:	d0f7      	beq.n	8015020 <rcl_clock_init+0x1c>
 8015030:	2300      	movs	r3, #0
 8015032:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8015036:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 80150ec <rcl_clock_init+0xe8>
 801503a:	6133      	str	r3, [r6, #16]
 801503c:	f106 0514 	add.w	r5, r6, #20
 8015040:	469c      	mov	ip, r3
 8015042:	2703      	movs	r7, #3
 8015044:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015046:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015048:	6823      	ldr	r3, [r4, #0]
 801504a:	602b      	str	r3, [r5, #0]
 801504c:	7037      	strb	r7, [r6, #0]
 801504e:	f8c6 e00c 	str.w	lr, [r6, #12]
 8015052:	4660      	mov	r0, ip
 8015054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015056:	2e00      	cmp	r6, #0
 8015058:	d0e2      	beq.n	8015020 <rcl_clock_init+0x1c>
 801505a:	2300      	movs	r3, #0
 801505c:	7033      	strb	r3, [r6, #0]
 801505e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8015062:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8015066:	469c      	mov	ip, r3
 8015068:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801506a:	f106 0514 	add.w	r5, r6, #20
 801506e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015070:	6823      	ldr	r3, [r4, #0]
 8015072:	602b      	str	r3, [r5, #0]
 8015074:	4660      	mov	r0, ip
 8015076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015078:	2e00      	cmp	r6, #0
 801507a:	d0d1      	beq.n	8015020 <rcl_clock_init+0x1c>
 801507c:	2c00      	cmp	r4, #0
 801507e:	d0cf      	beq.n	8015020 <rcl_clock_init+0x1c>
 8015080:	2700      	movs	r7, #0
 8015082:	7037      	strb	r7, [r6, #0]
 8015084:	46a4      	mov	ip, r4
 8015086:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801508a:	f106 0514 	add.w	r5, r6, #20
 801508e:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8015092:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8015096:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015098:	f8dc 3000 	ldr.w	r3, [ip]
 801509c:	602b      	str	r3, [r5, #0]
 801509e:	6921      	ldr	r1, [r4, #16]
 80150a0:	6823      	ldr	r3, [r4, #0]
 80150a2:	2010      	movs	r0, #16
 80150a4:	4798      	blx	r3
 80150a6:	6130      	str	r0, [r6, #16]
 80150a8:	b1d0      	cbz	r0, 80150e0 <rcl_clock_init+0xdc>
 80150aa:	2200      	movs	r2, #0
 80150ac:	2300      	movs	r3, #0
 80150ae:	e9c0 2300 	strd	r2, r3, [r0]
 80150b2:	2301      	movs	r3, #1
 80150b4:	7207      	strb	r7, [r0, #8]
 80150b6:	4a0c      	ldr	r2, [pc, #48]	@ (80150e8 <rcl_clock_init+0xe4>)
 80150b8:	7033      	strb	r3, [r6, #0]
 80150ba:	46bc      	mov	ip, r7
 80150bc:	60f2      	str	r2, [r6, #12]
 80150be:	4660      	mov	r0, ip
 80150c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80150c2:	2e00      	cmp	r6, #0
 80150c4:	d0ac      	beq.n	8015020 <rcl_clock_init+0x1c>
 80150c6:	2c00      	cmp	r4, #0
 80150c8:	d0aa      	beq.n	8015020 <rcl_clock_init+0x1c>
 80150ca:	2300      	movs	r3, #0
 80150cc:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80150d0:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 80150f0 <rcl_clock_init+0xec>
 80150d4:	6133      	str	r3, [r6, #16]
 80150d6:	f106 0514 	add.w	r5, r6, #20
 80150da:	469c      	mov	ip, r3
 80150dc:	2702      	movs	r7, #2
 80150de:	e7b1      	b.n	8015044 <rcl_clock_init+0x40>
 80150e0:	f04f 0c0a 	mov.w	ip, #10
 80150e4:	e79e      	b.n	8015024 <rcl_clock_init+0x20>
 80150e6:	bf00      	nop
 80150e8:	08014fe5 	.word	0x08014fe5
 80150ec:	08014fdd 	.word	0x08014fdd
 80150f0:	08014fd5 	.word	0x08014fd5

080150f4 <rcl_clock_fini>:
 80150f4:	2800      	cmp	r0, #0
 80150f6:	d02c      	beq.n	8015152 <rcl_clock_fini+0x5e>
 80150f8:	b538      	push	{r3, r4, r5, lr}
 80150fa:	4604      	mov	r4, r0
 80150fc:	3014      	adds	r0, #20
 80150fe:	f7f9 f82b 	bl	800e158 <rcutils_allocator_is_valid>
 8015102:	b140      	cbz	r0, 8015116 <rcl_clock_fini+0x22>
 8015104:	7823      	ldrb	r3, [r4, #0]
 8015106:	2b02      	cmp	r3, #2
 8015108:	d007      	beq.n	801511a <rcl_clock_fini+0x26>
 801510a:	2b03      	cmp	r3, #3
 801510c:	d005      	beq.n	801511a <rcl_clock_fini+0x26>
 801510e:	2b01      	cmp	r3, #1
 8015110:	d00f      	beq.n	8015132 <rcl_clock_fini+0x3e>
 8015112:	200b      	movs	r0, #11
 8015114:	bd38      	pop	{r3, r4, r5, pc}
 8015116:	2001      	movs	r0, #1
 8015118:	bd38      	pop	{r3, r4, r5, pc}
 801511a:	68a0      	ldr	r0, [r4, #8]
 801511c:	2800      	cmp	r0, #0
 801511e:	d0f9      	beq.n	8015114 <rcl_clock_fini+0x20>
 8015120:	2500      	movs	r5, #0
 8015122:	6860      	ldr	r0, [r4, #4]
 8015124:	69a3      	ldr	r3, [r4, #24]
 8015126:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8015128:	60a5      	str	r5, [r4, #8]
 801512a:	4798      	blx	r3
 801512c:	6065      	str	r5, [r4, #4]
 801512e:	4628      	mov	r0, r5
 8015130:	bd38      	pop	{r3, r4, r5, pc}
 8015132:	68a3      	ldr	r3, [r4, #8]
 8015134:	b133      	cbz	r3, 8015144 <rcl_clock_fini+0x50>
 8015136:	2500      	movs	r5, #0
 8015138:	69a3      	ldr	r3, [r4, #24]
 801513a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801513c:	6860      	ldr	r0, [r4, #4]
 801513e:	60a5      	str	r5, [r4, #8]
 8015140:	4798      	blx	r3
 8015142:	6065      	str	r5, [r4, #4]
 8015144:	6920      	ldr	r0, [r4, #16]
 8015146:	69a3      	ldr	r3, [r4, #24]
 8015148:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801514a:	4798      	blx	r3
 801514c:	2000      	movs	r0, #0
 801514e:	6120      	str	r0, [r4, #16]
 8015150:	bd38      	pop	{r3, r4, r5, pc}
 8015152:	200b      	movs	r0, #11
 8015154:	4770      	bx	lr
 8015156:	bf00      	nop

08015158 <rcl_clock_get_now>:
 8015158:	b140      	cbz	r0, 801516c <rcl_clock_get_now+0x14>
 801515a:	b139      	cbz	r1, 801516c <rcl_clock_get_now+0x14>
 801515c:	7803      	ldrb	r3, [r0, #0]
 801515e:	b11b      	cbz	r3, 8015168 <rcl_clock_get_now+0x10>
 8015160:	68c3      	ldr	r3, [r0, #12]
 8015162:	b10b      	cbz	r3, 8015168 <rcl_clock_get_now+0x10>
 8015164:	6900      	ldr	r0, [r0, #16]
 8015166:	4718      	bx	r3
 8015168:	2001      	movs	r0, #1
 801516a:	4770      	bx	lr
 801516c:	200b      	movs	r0, #11
 801516e:	4770      	bx	lr

08015170 <rcl_clock_add_jump_callback>:
 8015170:	b082      	sub	sp, #8
 8015172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015176:	a906      	add	r1, sp, #24
 8015178:	e881 000c 	stmia.w	r1, {r2, r3}
 801517c:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 8015180:	b320      	cbz	r0, 80151cc <rcl_clock_add_jump_callback+0x5c>
 8015182:	4604      	mov	r4, r0
 8015184:	3014      	adds	r0, #20
 8015186:	f7f8 ffe7 	bl	800e158 <rcutils_allocator_is_valid>
 801518a:	b1f8      	cbz	r0, 80151cc <rcl_clock_add_jump_callback+0x5c>
 801518c:	b1f6      	cbz	r6, 80151cc <rcl_clock_add_jump_callback+0x5c>
 801518e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015190:	2b00      	cmp	r3, #0
 8015192:	db1b      	blt.n	80151cc <rcl_clock_add_jump_callback+0x5c>
 8015194:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8015198:	2a01      	cmp	r2, #1
 801519a:	f173 0300 	sbcs.w	r3, r3, #0
 801519e:	da15      	bge.n	80151cc <rcl_clock_add_jump_callback+0x5c>
 80151a0:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 80151a4:	2f00      	cmp	r7, #0
 80151a6:	d042      	beq.n	801522e <rcl_clock_add_jump_callback+0xbe>
 80151a8:	2300      	movs	r3, #0
 80151aa:	4602      	mov	r2, r0
 80151ac:	e003      	b.n	80151b6 <rcl_clock_add_jump_callback+0x46>
 80151ae:	42bb      	cmp	r3, r7
 80151b0:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80151b4:	d011      	beq.n	80151da <rcl_clock_add_jump_callback+0x6a>
 80151b6:	6811      	ldr	r1, [r2, #0]
 80151b8:	42b1      	cmp	r1, r6
 80151ba:	f103 0301 	add.w	r3, r3, #1
 80151be:	d1f6      	bne.n	80151ae <rcl_clock_add_jump_callback+0x3e>
 80151c0:	6a11      	ldr	r1, [r2, #32]
 80151c2:	42a9      	cmp	r1, r5
 80151c4:	d1f3      	bne.n	80151ae <rcl_clock_add_jump_callback+0x3e>
 80151c6:	f04f 0e01 	mov.w	lr, #1
 80151ca:	e001      	b.n	80151d0 <rcl_clock_add_jump_callback+0x60>
 80151cc:	f04f 0e0b 	mov.w	lr, #11
 80151d0:	4670      	mov	r0, lr
 80151d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80151d6:	b002      	add	sp, #8
 80151d8:	4770      	bx	lr
 80151da:	3301      	adds	r3, #1
 80151dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80151e0:	00d9      	lsls	r1, r3, #3
 80151e2:	69e3      	ldr	r3, [r4, #28]
 80151e4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80151e6:	4798      	blx	r3
 80151e8:	b1f0      	cbz	r0, 8015228 <rcl_clock_add_jump_callback+0xb8>
 80151ea:	68a3      	ldr	r3, [r4, #8]
 80151ec:	6060      	str	r0, [r4, #4]
 80151ee:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80151f2:	f10d 0c18 	add.w	ip, sp, #24
 80151f6:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 80151fa:	f103 0801 	add.w	r8, r3, #1
 80151fe:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8015202:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015206:	f106 0708 	add.w	r7, r6, #8
 801520a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801520c:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8015210:	f04f 0e00 	mov.w	lr, #0
 8015214:	e887 0003 	stmia.w	r7, {r0, r1}
 8015218:	6235      	str	r5, [r6, #32]
 801521a:	4670      	mov	r0, lr
 801521c:	f8c4 8008 	str.w	r8, [r4, #8]
 8015220:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015224:	b002      	add	sp, #8
 8015226:	4770      	bx	lr
 8015228:	f04f 0e0a 	mov.w	lr, #10
 801522c:	e7d0      	b.n	80151d0 <rcl_clock_add_jump_callback+0x60>
 801522e:	2128      	movs	r1, #40	@ 0x28
 8015230:	e7d7      	b.n	80151e2 <rcl_clock_add_jump_callback+0x72>
 8015232:	bf00      	nop

08015234 <rcl_clock_remove_jump_callback>:
 8015234:	2800      	cmp	r0, #0
 8015236:	d057      	beq.n	80152e8 <rcl_clock_remove_jump_callback+0xb4>
 8015238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801523c:	4605      	mov	r5, r0
 801523e:	3014      	adds	r0, #20
 8015240:	4688      	mov	r8, r1
 8015242:	4692      	mov	sl, r2
 8015244:	f7f8 ff88 	bl	800e158 <rcutils_allocator_is_valid>
 8015248:	2800      	cmp	r0, #0
 801524a:	d03b      	beq.n	80152c4 <rcl_clock_remove_jump_callback+0x90>
 801524c:	f1b8 0f00 	cmp.w	r8, #0
 8015250:	d038      	beq.n	80152c4 <rcl_clock_remove_jump_callback+0x90>
 8015252:	68ae      	ldr	r6, [r5, #8]
 8015254:	b166      	cbz	r6, 8015270 <rcl_clock_remove_jump_callback+0x3c>
 8015256:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801525a:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 801525e:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 8015262:	464c      	mov	r4, r9
 8015264:	6823      	ldr	r3, [r4, #0]
 8015266:	4543      	cmp	r3, r8
 8015268:	d005      	beq.n	8015276 <rcl_clock_remove_jump_callback+0x42>
 801526a:	3428      	adds	r4, #40	@ 0x28
 801526c:	42a7      	cmp	r7, r4
 801526e:	d1f9      	bne.n	8015264 <rcl_clock_remove_jump_callback+0x30>
 8015270:	2001      	movs	r0, #1
 8015272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015276:	6a23      	ldr	r3, [r4, #32]
 8015278:	3428      	adds	r4, #40	@ 0x28
 801527a:	42bc      	cmp	r4, r7
 801527c:	d02d      	beq.n	80152da <rcl_clock_remove_jump_callback+0xa6>
 801527e:	4553      	cmp	r3, sl
 8015280:	d1f0      	bne.n	8015264 <rcl_clock_remove_jump_callback+0x30>
 8015282:	46a6      	mov	lr, r4
 8015284:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015288:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 801528c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015290:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015294:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015298:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801529c:	3428      	adds	r4, #40	@ 0x28
 801529e:	42a7      	cmp	r7, r4
 80152a0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80152a4:	d1ed      	bne.n	8015282 <rcl_clock_remove_jump_callback+0x4e>
 80152a6:	3e01      	subs	r6, #1
 80152a8:	60ae      	str	r6, [r5, #8]
 80152aa:	b176      	cbz	r6, 80152ca <rcl_clock_remove_jump_callback+0x96>
 80152ac:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80152b0:	69eb      	ldr	r3, [r5, #28]
 80152b2:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 80152b4:	00f1      	lsls	r1, r6, #3
 80152b6:	4648      	mov	r0, r9
 80152b8:	4798      	blx	r3
 80152ba:	b1b8      	cbz	r0, 80152ec <rcl_clock_remove_jump_callback+0xb8>
 80152bc:	6068      	str	r0, [r5, #4]
 80152be:	2000      	movs	r0, #0
 80152c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152c4:	200b      	movs	r0, #11
 80152c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152ca:	4648      	mov	r0, r9
 80152cc:	69ab      	ldr	r3, [r5, #24]
 80152ce:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 80152d0:	4798      	blx	r3
 80152d2:	606e      	str	r6, [r5, #4]
 80152d4:	4630      	mov	r0, r6
 80152d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152da:	4553      	cmp	r3, sl
 80152dc:	d1c8      	bne.n	8015270 <rcl_clock_remove_jump_callback+0x3c>
 80152de:	3e01      	subs	r6, #1
 80152e0:	60ae      	str	r6, [r5, #8]
 80152e2:	2e00      	cmp	r6, #0
 80152e4:	d1e2      	bne.n	80152ac <rcl_clock_remove_jump_callback+0x78>
 80152e6:	e7f0      	b.n	80152ca <rcl_clock_remove_jump_callback+0x96>
 80152e8:	200b      	movs	r0, #11
 80152ea:	4770      	bx	lr
 80152ec:	200a      	movs	r0, #10
 80152ee:	e7ea      	b.n	80152c6 <rcl_clock_remove_jump_callback+0x92>

080152f0 <rcl_get_zero_initialized_wait_set>:
 80152f0:	b510      	push	{r4, lr}
 80152f2:	4c08      	ldr	r4, [pc, #32]	@ (8015314 <rcl_get_zero_initialized_wait_set+0x24>)
 80152f4:	4686      	mov	lr, r0
 80152f6:	4684      	mov	ip, r0
 80152f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80152fa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80152fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015300:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015304:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015306:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801530a:	6823      	ldr	r3, [r4, #0]
 801530c:	f8cc 3000 	str.w	r3, [ip]
 8015310:	4670      	mov	r0, lr
 8015312:	bd10      	pop	{r4, pc}
 8015314:	0801b5bc 	.word	0x0801b5bc

08015318 <rcl_wait_set_is_valid>:
 8015318:	b118      	cbz	r0, 8015322 <rcl_wait_set_is_valid+0xa>
 801531a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801531c:	3800      	subs	r0, #0
 801531e:	bf18      	it	ne
 8015320:	2001      	movne	r0, #1
 8015322:	4770      	bx	lr

08015324 <rcl_wait_set_fini>:
 8015324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015328:	b082      	sub	sp, #8
 801532a:	2800      	cmp	r0, #0
 801532c:	f000 8095 	beq.w	801545a <rcl_wait_set_fini+0x136>
 8015330:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8015332:	4604      	mov	r4, r0
 8015334:	2e00      	cmp	r6, #0
 8015336:	f000 808c 	beq.w	8015452 <rcl_wait_set_fini+0x12e>
 801533a:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 801533c:	f002 fa5e 	bl	80177fc <rmw_destroy_wait_set>
 8015340:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015342:	1e06      	subs	r6, r0, #0
 8015344:	bf18      	it	ne
 8015346:	f44f 7661 	movne.w	r6, #900	@ 0x384
 801534a:	2d00      	cmp	r5, #0
 801534c:	f000 8081 	beq.w	8015452 <rcl_wait_set_fini+0x12e>
 8015350:	6820      	ldr	r0, [r4, #0]
 8015352:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8015356:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015358:	2700      	movs	r7, #0
 801535a:	6067      	str	r7, [r4, #4]
 801535c:	602f      	str	r7, [r5, #0]
 801535e:	b120      	cbz	r0, 801536a <rcl_wait_set_fini+0x46>
 8015360:	9101      	str	r1, [sp, #4]
 8015362:	47c0      	blx	r8
 8015364:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015366:	9901      	ldr	r1, [sp, #4]
 8015368:	6027      	str	r7, [r4, #0]
 801536a:	68a8      	ldr	r0, [r5, #8]
 801536c:	b120      	cbz	r0, 8015378 <rcl_wait_set_fini+0x54>
 801536e:	47c0      	blx	r8
 8015370:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015372:	2300      	movs	r3, #0
 8015374:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8015378:	68a0      	ldr	r0, [r4, #8]
 801537a:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801537c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801537e:	f04f 0800 	mov.w	r8, #0
 8015382:	f8c4 800c 	str.w	r8, [r4, #12]
 8015386:	f8c5 800c 	str.w	r8, [r5, #12]
 801538a:	b128      	cbz	r0, 8015398 <rcl_wait_set_fini+0x74>
 801538c:	47b8      	blx	r7
 801538e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015390:	f8c4 8008 	str.w	r8, [r4, #8]
 8015394:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8015396:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015398:	6968      	ldr	r0, [r5, #20]
 801539a:	f04f 0800 	mov.w	r8, #0
 801539e:	f8c5 8010 	str.w	r8, [r5, #16]
 80153a2:	b128      	cbz	r0, 80153b0 <rcl_wait_set_fini+0x8c>
 80153a4:	47b8      	blx	r7
 80153a6:	f8c5 8014 	str.w	r8, [r5, #20]
 80153aa:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80153ac:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80153ae:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80153b0:	6920      	ldr	r0, [r4, #16]
 80153b2:	f04f 0800 	mov.w	r8, #0
 80153b6:	f8c4 8014 	str.w	r8, [r4, #20]
 80153ba:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 80153be:	b128      	cbz	r0, 80153cc <rcl_wait_set_fini+0xa8>
 80153c0:	47b8      	blx	r7
 80153c2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80153c4:	f8c4 8010 	str.w	r8, [r4, #16]
 80153c8:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80153ca:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80153cc:	69a0      	ldr	r0, [r4, #24]
 80153ce:	f04f 0800 	mov.w	r8, #0
 80153d2:	f8c4 801c 	str.w	r8, [r4, #28]
 80153d6:	f8c5 8018 	str.w	r8, [r5, #24]
 80153da:	b128      	cbz	r0, 80153e8 <rcl_wait_set_fini+0xc4>
 80153dc:	9101      	str	r1, [sp, #4]
 80153de:	47b8      	blx	r7
 80153e0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80153e2:	9901      	ldr	r1, [sp, #4]
 80153e4:	f8c4 8018 	str.w	r8, [r4, #24]
 80153e8:	6a28      	ldr	r0, [r5, #32]
 80153ea:	b120      	cbz	r0, 80153f6 <rcl_wait_set_fini+0xd2>
 80153ec:	47b8      	blx	r7
 80153ee:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80153f0:	2300      	movs	r3, #0
 80153f2:	e9c5 3307 	strd	r3, r3, [r5, #28]
 80153f6:	6a20      	ldr	r0, [r4, #32]
 80153f8:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80153fc:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80153fe:	2700      	movs	r7, #0
 8015400:	6267      	str	r7, [r4, #36]	@ 0x24
 8015402:	626f      	str	r7, [r5, #36]	@ 0x24
 8015404:	b120      	cbz	r0, 8015410 <rcl_wait_set_fini+0xec>
 8015406:	9101      	str	r1, [sp, #4]
 8015408:	47c0      	blx	r8
 801540a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801540c:	9901      	ldr	r1, [sp, #4]
 801540e:	6227      	str	r7, [r4, #32]
 8015410:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8015412:	b120      	cbz	r0, 801541e <rcl_wait_set_fini+0xfa>
 8015414:	47c0      	blx	r8
 8015416:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015418:	2300      	movs	r3, #0
 801541a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801541e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8015420:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8015424:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015426:	2700      	movs	r7, #0
 8015428:	62e7      	str	r7, [r4, #44]	@ 0x2c
 801542a:	632f      	str	r7, [r5, #48]	@ 0x30
 801542c:	b120      	cbz	r0, 8015438 <rcl_wait_set_fini+0x114>
 801542e:	9101      	str	r1, [sp, #4]
 8015430:	47c0      	blx	r8
 8015432:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015434:	9901      	ldr	r1, [sp, #4]
 8015436:	62a7      	str	r7, [r4, #40]	@ 0x28
 8015438:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 801543a:	b120      	cbz	r0, 8015446 <rcl_wait_set_fini+0x122>
 801543c:	47c0      	blx	r8
 801543e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015440:	2300      	movs	r3, #0
 8015442:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8015446:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8015448:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801544a:	4628      	mov	r0, r5
 801544c:	4798      	blx	r3
 801544e:	2300      	movs	r3, #0
 8015450:	6323      	str	r3, [r4, #48]	@ 0x30
 8015452:	4630      	mov	r0, r6
 8015454:	b002      	add	sp, #8
 8015456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801545a:	260b      	movs	r6, #11
 801545c:	4630      	mov	r0, r6
 801545e:	b002      	add	sp, #8
 8015460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015464 <rcl_wait_set_add_subscription>:
 8015464:	b318      	cbz	r0, 80154ae <rcl_wait_set_add_subscription+0x4a>
 8015466:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015468:	b570      	push	{r4, r5, r6, lr}
 801546a:	4604      	mov	r4, r0
 801546c:	b30b      	cbz	r3, 80154b2 <rcl_wait_set_add_subscription+0x4e>
 801546e:	b319      	cbz	r1, 80154b8 <rcl_wait_set_add_subscription+0x54>
 8015470:	681d      	ldr	r5, [r3, #0]
 8015472:	6840      	ldr	r0, [r0, #4]
 8015474:	4285      	cmp	r5, r0
 8015476:	d217      	bcs.n	80154a8 <rcl_wait_set_add_subscription+0x44>
 8015478:	6820      	ldr	r0, [r4, #0]
 801547a:	1c6e      	adds	r6, r5, #1
 801547c:	601e      	str	r6, [r3, #0]
 801547e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015482:	b102      	cbz	r2, 8015486 <rcl_wait_set_add_subscription+0x22>
 8015484:	6015      	str	r5, [r2, #0]
 8015486:	4608      	mov	r0, r1
 8015488:	f7f7 fbf6 	bl	800cc78 <rcl_subscription_get_rmw_handle>
 801548c:	b150      	cbz	r0, 80154a4 <rcl_wait_set_add_subscription+0x40>
 801548e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015490:	6842      	ldr	r2, [r0, #4]
 8015492:	689b      	ldr	r3, [r3, #8]
 8015494:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015498:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801549a:	6853      	ldr	r3, [r2, #4]
 801549c:	3301      	adds	r3, #1
 801549e:	2000      	movs	r0, #0
 80154a0:	6053      	str	r3, [r2, #4]
 80154a2:	bd70      	pop	{r4, r5, r6, pc}
 80154a4:	2001      	movs	r0, #1
 80154a6:	bd70      	pop	{r4, r5, r6, pc}
 80154a8:	f240 3086 	movw	r0, #902	@ 0x386
 80154ac:	bd70      	pop	{r4, r5, r6, pc}
 80154ae:	200b      	movs	r0, #11
 80154b0:	4770      	bx	lr
 80154b2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80154b6:	bd70      	pop	{r4, r5, r6, pc}
 80154b8:	200b      	movs	r0, #11
 80154ba:	bd70      	pop	{r4, r5, r6, pc}

080154bc <rcl_wait_set_clear>:
 80154bc:	2800      	cmp	r0, #0
 80154be:	d073      	beq.n	80155a8 <rcl_wait_set_clear+0xec>
 80154c0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80154c2:	b510      	push	{r4, lr}
 80154c4:	4604      	mov	r4, r0
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d070      	beq.n	80155ac <rcl_wait_set_clear+0xf0>
 80154ca:	6800      	ldr	r0, [r0, #0]
 80154cc:	b138      	cbz	r0, 80154de <rcl_wait_set_clear+0x22>
 80154ce:	6862      	ldr	r2, [r4, #4]
 80154d0:	2100      	movs	r1, #0
 80154d2:	0092      	lsls	r2, r2, #2
 80154d4:	f004 f99e 	bl	8019814 <memset>
 80154d8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80154da:	2200      	movs	r2, #0
 80154dc:	601a      	str	r2, [r3, #0]
 80154de:	68a0      	ldr	r0, [r4, #8]
 80154e0:	b138      	cbz	r0, 80154f2 <rcl_wait_set_clear+0x36>
 80154e2:	68e2      	ldr	r2, [r4, #12]
 80154e4:	2100      	movs	r1, #0
 80154e6:	0092      	lsls	r2, r2, #2
 80154e8:	f004 f994 	bl	8019814 <memset>
 80154ec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80154ee:	2200      	movs	r2, #0
 80154f0:	60da      	str	r2, [r3, #12]
 80154f2:	69a0      	ldr	r0, [r4, #24]
 80154f4:	b138      	cbz	r0, 8015506 <rcl_wait_set_clear+0x4a>
 80154f6:	69e2      	ldr	r2, [r4, #28]
 80154f8:	2100      	movs	r1, #0
 80154fa:	0092      	lsls	r2, r2, #2
 80154fc:	f004 f98a 	bl	8019814 <memset>
 8015500:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015502:	2200      	movs	r2, #0
 8015504:	619a      	str	r2, [r3, #24]
 8015506:	6a20      	ldr	r0, [r4, #32]
 8015508:	b138      	cbz	r0, 801551a <rcl_wait_set_clear+0x5e>
 801550a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801550c:	2100      	movs	r1, #0
 801550e:	0092      	lsls	r2, r2, #2
 8015510:	f004 f980 	bl	8019814 <memset>
 8015514:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015516:	2200      	movs	r2, #0
 8015518:	625a      	str	r2, [r3, #36]	@ 0x24
 801551a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801551c:	b138      	cbz	r0, 801552e <rcl_wait_set_clear+0x72>
 801551e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8015520:	2100      	movs	r1, #0
 8015522:	0092      	lsls	r2, r2, #2
 8015524:	f004 f976 	bl	8019814 <memset>
 8015528:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801552a:	2200      	movs	r2, #0
 801552c:	631a      	str	r2, [r3, #48]	@ 0x30
 801552e:	6920      	ldr	r0, [r4, #16]
 8015530:	b138      	cbz	r0, 8015542 <rcl_wait_set_clear+0x86>
 8015532:	6962      	ldr	r2, [r4, #20]
 8015534:	2100      	movs	r1, #0
 8015536:	0092      	lsls	r2, r2, #2
 8015538:	f004 f96c 	bl	8019814 <memset>
 801553c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801553e:	2200      	movs	r2, #0
 8015540:	641a      	str	r2, [r3, #64]	@ 0x40
 8015542:	6898      	ldr	r0, [r3, #8]
 8015544:	b138      	cbz	r0, 8015556 <rcl_wait_set_clear+0x9a>
 8015546:	685a      	ldr	r2, [r3, #4]
 8015548:	2100      	movs	r1, #0
 801554a:	0092      	lsls	r2, r2, #2
 801554c:	f004 f962 	bl	8019814 <memset>
 8015550:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015552:	2200      	movs	r2, #0
 8015554:	605a      	str	r2, [r3, #4]
 8015556:	6958      	ldr	r0, [r3, #20]
 8015558:	b138      	cbz	r0, 801556a <rcl_wait_set_clear+0xae>
 801555a:	691a      	ldr	r2, [r3, #16]
 801555c:	2100      	movs	r1, #0
 801555e:	0092      	lsls	r2, r2, #2
 8015560:	f004 f958 	bl	8019814 <memset>
 8015564:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015566:	2200      	movs	r2, #0
 8015568:	611a      	str	r2, [r3, #16]
 801556a:	6a18      	ldr	r0, [r3, #32]
 801556c:	b138      	cbz	r0, 801557e <rcl_wait_set_clear+0xc2>
 801556e:	69da      	ldr	r2, [r3, #28]
 8015570:	2100      	movs	r1, #0
 8015572:	0092      	lsls	r2, r2, #2
 8015574:	f004 f94e 	bl	8019814 <memset>
 8015578:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801557a:	2200      	movs	r2, #0
 801557c:	61da      	str	r2, [r3, #28]
 801557e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8015580:	b138      	cbz	r0, 8015592 <rcl_wait_set_clear+0xd6>
 8015582:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015584:	2100      	movs	r1, #0
 8015586:	0092      	lsls	r2, r2, #2
 8015588:	f004 f944 	bl	8019814 <memset>
 801558c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801558e:	2200      	movs	r2, #0
 8015590:	629a      	str	r2, [r3, #40]	@ 0x28
 8015592:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8015594:	b138      	cbz	r0, 80155a6 <rcl_wait_set_clear+0xea>
 8015596:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015598:	2100      	movs	r1, #0
 801559a:	0092      	lsls	r2, r2, #2
 801559c:	f004 f93a 	bl	8019814 <memset>
 80155a0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80155a2:	2000      	movs	r0, #0
 80155a4:	6358      	str	r0, [r3, #52]	@ 0x34
 80155a6:	bd10      	pop	{r4, pc}
 80155a8:	200b      	movs	r0, #11
 80155aa:	4770      	bx	lr
 80155ac:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80155b0:	bd10      	pop	{r4, pc}
 80155b2:	bf00      	nop

080155b4 <rcl_wait_set_resize>:
 80155b4:	2800      	cmp	r0, #0
 80155b6:	f000 8185 	beq.w	80158c4 <rcl_wait_set_resize+0x310>
 80155ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155be:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80155c0:	b083      	sub	sp, #12
 80155c2:	4605      	mov	r5, r0
 80155c4:	2c00      	cmp	r4, #0
 80155c6:	f000 817f 	beq.w	80158c8 <rcl_wait_set_resize+0x314>
 80155ca:	f04f 0900 	mov.w	r9, #0
 80155ce:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 80155d2:	461f      	mov	r7, r3
 80155d4:	4688      	mov	r8, r1
 80155d6:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 80155da:	4616      	mov	r6, r2
 80155dc:	f8c0 9004 	str.w	r9, [r0, #4]
 80155e0:	f8c4 9000 	str.w	r9, [r4]
 80155e4:	2900      	cmp	r1, #0
 80155e6:	f000 80bd 	beq.w	8015764 <rcl_wait_set_resize+0x1b0>
 80155ea:	008c      	lsls	r4, r1, #2
 80155ec:	6800      	ldr	r0, [r0, #0]
 80155ee:	9301      	str	r3, [sp, #4]
 80155f0:	4652      	mov	r2, sl
 80155f2:	4621      	mov	r1, r4
 80155f4:	4798      	blx	r3
 80155f6:	9b01      	ldr	r3, [sp, #4]
 80155f8:	6028      	str	r0, [r5, #0]
 80155fa:	2800      	cmp	r0, #0
 80155fc:	f000 80cb 	beq.w	8015796 <rcl_wait_set_resize+0x1e2>
 8015600:	4622      	mov	r2, r4
 8015602:	4649      	mov	r1, r9
 8015604:	9301      	str	r3, [sp, #4]
 8015606:	f004 f905 	bl	8019814 <memset>
 801560a:	f8c5 8004 	str.w	r8, [r5, #4]
 801560e:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8015612:	9b01      	ldr	r3, [sp, #4]
 8015614:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8015618:	f8c8 9004 	str.w	r9, [r8, #4]
 801561c:	4652      	mov	r2, sl
 801561e:	4621      	mov	r1, r4
 8015620:	4798      	blx	r3
 8015622:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015624:	f8c8 0008 	str.w	r0, [r8, #8]
 8015628:	689b      	ldr	r3, [r3, #8]
 801562a:	2b00      	cmp	r3, #0
 801562c:	f000 80ac 	beq.w	8015788 <rcl_wait_set_resize+0x1d4>
 8015630:	4622      	mov	r2, r4
 8015632:	4649      	mov	r1, r9
 8015634:	4618      	mov	r0, r3
 8015636:	f004 f8ed 	bl	8019814 <memset>
 801563a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801563c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015640:	f04f 0800 	mov.w	r8, #0
 8015644:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8015648:	f8c5 800c 	str.w	r8, [r5, #12]
 801564c:	f8c4 800c 	str.w	r8, [r4, #12]
 8015650:	2e00      	cmp	r6, #0
 8015652:	f040 80a4 	bne.w	801579e <rcl_wait_set_resize+0x1ea>
 8015656:	68a8      	ldr	r0, [r5, #8]
 8015658:	b128      	cbz	r0, 8015666 <rcl_wait_set_resize+0xb2>
 801565a:	4649      	mov	r1, r9
 801565c:	4790      	blx	r2
 801565e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015660:	60ae      	str	r6, [r5, #8]
 8015662:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015666:	f04f 0800 	mov.w	r8, #0
 801566a:	19f6      	adds	r6, r6, r7
 801566c:	f8c4 8010 	str.w	r8, [r4, #16]
 8015670:	f040 80ac 	bne.w	80157cc <rcl_wait_set_resize+0x218>
 8015674:	6960      	ldr	r0, [r4, #20]
 8015676:	b130      	cbz	r0, 8015686 <rcl_wait_set_resize+0xd2>
 8015678:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801567a:	4649      	mov	r1, r9
 801567c:	4798      	blx	r3
 801567e:	6166      	str	r6, [r4, #20]
 8015680:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015682:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015686:	2600      	movs	r6, #0
 8015688:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801568c:	616e      	str	r6, [r5, #20]
 801568e:	6426      	str	r6, [r4, #64]	@ 0x40
 8015690:	2f00      	cmp	r7, #0
 8015692:	f040 80ad 	bne.w	80157f0 <rcl_wait_set_resize+0x23c>
 8015696:	6928      	ldr	r0, [r5, #16]
 8015698:	b138      	cbz	r0, 80156aa <rcl_wait_set_resize+0xf6>
 801569a:	4649      	mov	r1, r9
 801569c:	47d0      	blx	sl
 801569e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80156a0:	612f      	str	r7, [r5, #16]
 80156a2:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80156a6:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80156aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80156ac:	2600      	movs	r6, #0
 80156ae:	61ee      	str	r6, [r5, #28]
 80156b0:	61a6      	str	r6, [r4, #24]
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	f040 80af 	bne.w	8015816 <rcl_wait_set_resize+0x262>
 80156b8:	69a8      	ldr	r0, [r5, #24]
 80156ba:	b120      	cbz	r0, 80156c6 <rcl_wait_set_resize+0x112>
 80156bc:	4649      	mov	r1, r9
 80156be:	47d0      	blx	sl
 80156c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80156c2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80156c4:	61ab      	str	r3, [r5, #24]
 80156c6:	6a20      	ldr	r0, [r4, #32]
 80156c8:	b128      	cbz	r0, 80156d6 <rcl_wait_set_resize+0x122>
 80156ca:	4649      	mov	r1, r9
 80156cc:	47d0      	blx	sl
 80156ce:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80156d0:	2300      	movs	r3, #0
 80156d2:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80156d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80156d8:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80156da:	2600      	movs	r6, #0
 80156dc:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80156e0:	626e      	str	r6, [r5, #36]	@ 0x24
 80156e2:	6266      	str	r6, [r4, #36]	@ 0x24
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	f000 80b6 	beq.w	8015856 <rcl_wait_set_resize+0x2a2>
 80156ea:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80156ee:	6a28      	ldr	r0, [r5, #32]
 80156f0:	463a      	mov	r2, r7
 80156f2:	4651      	mov	r1, sl
 80156f4:	47c8      	blx	r9
 80156f6:	6228      	str	r0, [r5, #32]
 80156f8:	2800      	cmp	r0, #0
 80156fa:	d04c      	beq.n	8015796 <rcl_wait_set_resize+0x1e2>
 80156fc:	4652      	mov	r2, sl
 80156fe:	4631      	mov	r1, r6
 8015700:	f004 f888 	bl	8019814 <memset>
 8015704:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015706:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015708:	626b      	str	r3, [r5, #36]	@ 0x24
 801570a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801570c:	62a6      	str	r6, [r4, #40]	@ 0x28
 801570e:	463a      	mov	r2, r7
 8015710:	4651      	mov	r1, sl
 8015712:	47c8      	blx	r9
 8015714:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015716:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8015718:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 801571a:	2c00      	cmp	r4, #0
 801571c:	f000 80f0 	beq.w	8015900 <rcl_wait_set_resize+0x34c>
 8015720:	4620      	mov	r0, r4
 8015722:	4652      	mov	r2, sl
 8015724:	4631      	mov	r1, r6
 8015726:	f004 f875 	bl	8019814 <memset>
 801572a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801572c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801572e:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8015730:	2600      	movs	r6, #0
 8015732:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8015736:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8015738:	6326      	str	r6, [r4, #48]	@ 0x30
 801573a:	2b00      	cmp	r3, #0
 801573c:	f040 809d 	bne.w	801587a <rcl_wait_set_resize+0x2c6>
 8015740:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8015742:	b120      	cbz	r0, 801574e <rcl_wait_set_resize+0x19a>
 8015744:	4639      	mov	r1, r7
 8015746:	47c0      	blx	r8
 8015748:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801574a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801574c:	62ab      	str	r3, [r5, #40]	@ 0x28
 801574e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015750:	b310      	cbz	r0, 8015798 <rcl_wait_set_resize+0x1e4>
 8015752:	4639      	mov	r1, r7
 8015754:	47c0      	blx	r8
 8015756:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015758:	2000      	movs	r0, #0
 801575a:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 801575e:	b003      	add	sp, #12
 8015760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015764:	6800      	ldr	r0, [r0, #0]
 8015766:	b120      	cbz	r0, 8015772 <rcl_wait_set_resize+0x1be>
 8015768:	4651      	mov	r1, sl
 801576a:	47d8      	blx	fp
 801576c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801576e:	f8c5 8000 	str.w	r8, [r5]
 8015772:	68a0      	ldr	r0, [r4, #8]
 8015774:	2800      	cmp	r0, #0
 8015776:	f43f af61 	beq.w	801563c <rcl_wait_set_resize+0x88>
 801577a:	4651      	mov	r1, sl
 801577c:	47d8      	blx	fp
 801577e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015780:	2300      	movs	r3, #0
 8015782:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8015786:	e759      	b.n	801563c <rcl_wait_set_resize+0x88>
 8015788:	6828      	ldr	r0, [r5, #0]
 801578a:	9301      	str	r3, [sp, #4]
 801578c:	4651      	mov	r1, sl
 801578e:	47d8      	blx	fp
 8015790:	9b01      	ldr	r3, [sp, #4]
 8015792:	e9c5 3300 	strd	r3, r3, [r5]
 8015796:	200a      	movs	r0, #10
 8015798:	b003      	add	sp, #12
 801579a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801579e:	00b4      	lsls	r4, r6, #2
 80157a0:	68a8      	ldr	r0, [r5, #8]
 80157a2:	464a      	mov	r2, r9
 80157a4:	4621      	mov	r1, r4
 80157a6:	4798      	blx	r3
 80157a8:	60a8      	str	r0, [r5, #8]
 80157aa:	2800      	cmp	r0, #0
 80157ac:	d0f3      	beq.n	8015796 <rcl_wait_set_resize+0x1e2>
 80157ae:	4622      	mov	r2, r4
 80157b0:	4641      	mov	r1, r8
 80157b2:	f004 f82f 	bl	8019814 <memset>
 80157b6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80157b8:	60ee      	str	r6, [r5, #12]
 80157ba:	f04f 0800 	mov.w	r8, #0
 80157be:	19f6      	adds	r6, r6, r7
 80157c0:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80157c4:	f8c4 8010 	str.w	r8, [r4, #16]
 80157c8:	f43f af54 	beq.w	8015674 <rcl_wait_set_resize+0xc0>
 80157cc:	00b6      	lsls	r6, r6, #2
 80157ce:	464a      	mov	r2, r9
 80157d0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80157d2:	6960      	ldr	r0, [r4, #20]
 80157d4:	4631      	mov	r1, r6
 80157d6:	4798      	blx	r3
 80157d8:	4681      	mov	r9, r0
 80157da:	6160      	str	r0, [r4, #20]
 80157dc:	2800      	cmp	r0, #0
 80157de:	d076      	beq.n	80158ce <rcl_wait_set_resize+0x31a>
 80157e0:	4632      	mov	r2, r6
 80157e2:	4641      	mov	r1, r8
 80157e4:	f004 f816 	bl	8019814 <memset>
 80157e8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80157ea:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80157ee:	e74a      	b.n	8015686 <rcl_wait_set_resize+0xd2>
 80157f0:	00bc      	lsls	r4, r7, #2
 80157f2:	6928      	ldr	r0, [r5, #16]
 80157f4:	464a      	mov	r2, r9
 80157f6:	4621      	mov	r1, r4
 80157f8:	47c0      	blx	r8
 80157fa:	6128      	str	r0, [r5, #16]
 80157fc:	2800      	cmp	r0, #0
 80157fe:	d0ca      	beq.n	8015796 <rcl_wait_set_resize+0x1e2>
 8015800:	4622      	mov	r2, r4
 8015802:	4631      	mov	r1, r6
 8015804:	f004 f806 	bl	8019814 <memset>
 8015808:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801580a:	616f      	str	r7, [r5, #20]
 801580c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8015810:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015814:	e749      	b.n	80156aa <rcl_wait_set_resize+0xf6>
 8015816:	009c      	lsls	r4, r3, #2
 8015818:	69a8      	ldr	r0, [r5, #24]
 801581a:	464a      	mov	r2, r9
 801581c:	4621      	mov	r1, r4
 801581e:	47c0      	blx	r8
 8015820:	61a8      	str	r0, [r5, #24]
 8015822:	2800      	cmp	r0, #0
 8015824:	d0b7      	beq.n	8015796 <rcl_wait_set_resize+0x1e2>
 8015826:	4622      	mov	r2, r4
 8015828:	4631      	mov	r1, r6
 801582a:	f003 fff3 	bl	8019814 <memset>
 801582e:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8015830:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015832:	61eb      	str	r3, [r5, #28]
 8015834:	6a38      	ldr	r0, [r7, #32]
 8015836:	61fe      	str	r6, [r7, #28]
 8015838:	464a      	mov	r2, r9
 801583a:	4621      	mov	r1, r4
 801583c:	47c0      	blx	r8
 801583e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015840:	6238      	str	r0, [r7, #32]
 8015842:	6a1f      	ldr	r7, [r3, #32]
 8015844:	2f00      	cmp	r7, #0
 8015846:	d054      	beq.n	80158f2 <rcl_wait_set_resize+0x33e>
 8015848:	4622      	mov	r2, r4
 801584a:	4631      	mov	r1, r6
 801584c:	4638      	mov	r0, r7
 801584e:	f003 ffe1 	bl	8019814 <memset>
 8015852:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015854:	e73f      	b.n	80156d6 <rcl_wait_set_resize+0x122>
 8015856:	6a28      	ldr	r0, [r5, #32]
 8015858:	b120      	cbz	r0, 8015864 <rcl_wait_set_resize+0x2b0>
 801585a:	4639      	mov	r1, r7
 801585c:	47c0      	blx	r8
 801585e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015860:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015862:	622b      	str	r3, [r5, #32]
 8015864:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8015866:	2800      	cmp	r0, #0
 8015868:	f43f af60 	beq.w	801572c <rcl_wait_set_resize+0x178>
 801586c:	4639      	mov	r1, r7
 801586e:	47c0      	blx	r8
 8015870:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015872:	2300      	movs	r3, #0
 8015874:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8015878:	e758      	b.n	801572c <rcl_wait_set_resize+0x178>
 801587a:	009c      	lsls	r4, r3, #2
 801587c:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801587e:	463a      	mov	r2, r7
 8015880:	4621      	mov	r1, r4
 8015882:	47c8      	blx	r9
 8015884:	62a8      	str	r0, [r5, #40]	@ 0x28
 8015886:	2800      	cmp	r0, #0
 8015888:	d085      	beq.n	8015796 <rcl_wait_set_resize+0x1e2>
 801588a:	4622      	mov	r2, r4
 801588c:	4631      	mov	r1, r6
 801588e:	f003 ffc1 	bl	8019814 <memset>
 8015892:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8015896:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015898:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801589a:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 801589e:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 80158a2:	463a      	mov	r2, r7
 80158a4:	4621      	mov	r1, r4
 80158a6:	47c8      	blx	r9
 80158a8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80158aa:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 80158ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80158b0:	b36b      	cbz	r3, 801590e <rcl_wait_set_resize+0x35a>
 80158b2:	4622      	mov	r2, r4
 80158b4:	4631      	mov	r1, r6
 80158b6:	4618      	mov	r0, r3
 80158b8:	f003 ffac 	bl	8019814 <memset>
 80158bc:	4630      	mov	r0, r6
 80158be:	b003      	add	sp, #12
 80158c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158c4:	200b      	movs	r0, #11
 80158c6:	4770      	bx	lr
 80158c8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80158cc:	e764      	b.n	8015798 <rcl_wait_set_resize+0x1e4>
 80158ce:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80158d0:	68a8      	ldr	r0, [r5, #8]
 80158d2:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80158d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80158d6:	4798      	blx	r3
 80158d8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80158da:	6928      	ldr	r0, [r5, #16]
 80158dc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80158de:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80158e0:	f8c5 900c 	str.w	r9, [r5, #12]
 80158e4:	f8c5 9008 	str.w	r9, [r5, #8]
 80158e8:	4790      	blx	r2
 80158ea:	e9c5 9904 	strd	r9, r9, [r5, #16]
 80158ee:	200a      	movs	r0, #10
 80158f0:	e752      	b.n	8015798 <rcl_wait_set_resize+0x1e4>
 80158f2:	69a8      	ldr	r0, [r5, #24]
 80158f4:	4649      	mov	r1, r9
 80158f6:	47d0      	blx	sl
 80158f8:	e9c5 7706 	strd	r7, r7, [r5, #24]
 80158fc:	200a      	movs	r0, #10
 80158fe:	e74b      	b.n	8015798 <rcl_wait_set_resize+0x1e4>
 8015900:	6a28      	ldr	r0, [r5, #32]
 8015902:	4639      	mov	r1, r7
 8015904:	47c0      	blx	r8
 8015906:	e9c5 4408 	strd	r4, r4, [r5, #32]
 801590a:	200a      	movs	r0, #10
 801590c:	e744      	b.n	8015798 <rcl_wait_set_resize+0x1e4>
 801590e:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8015910:	9301      	str	r3, [sp, #4]
 8015912:	4639      	mov	r1, r7
 8015914:	47c0      	blx	r8
 8015916:	9b01      	ldr	r3, [sp, #4]
 8015918:	200a      	movs	r0, #10
 801591a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801591e:	e73b      	b.n	8015798 <rcl_wait_set_resize+0x1e4>

08015920 <rcl_wait_set_init>:
 8015920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015924:	b084      	sub	sp, #16
 8015926:	4604      	mov	r4, r0
 8015928:	a810      	add	r0, sp, #64	@ 0x40
 801592a:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 801592e:	460f      	mov	r7, r1
 8015930:	4690      	mov	r8, r2
 8015932:	4699      	mov	r9, r3
 8015934:	f7f8 fc10 	bl	800e158 <rcutils_allocator_is_valid>
 8015938:	2800      	cmp	r0, #0
 801593a:	d06b      	beq.n	8015a14 <rcl_wait_set_init+0xf4>
 801593c:	2c00      	cmp	r4, #0
 801593e:	d069      	beq.n	8015a14 <rcl_wait_set_init+0xf4>
 8015940:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015942:	b125      	cbz	r5, 801594e <rcl_wait_set_init+0x2e>
 8015944:	2564      	movs	r5, #100	@ 0x64
 8015946:	4628      	mov	r0, r5
 8015948:	b004      	add	sp, #16
 801594a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801594e:	f1ba 0f00 	cmp.w	sl, #0
 8015952:	d05f      	beq.n	8015a14 <rcl_wait_set_init+0xf4>
 8015954:	4650      	mov	r0, sl
 8015956:	f7f6 fb69 	bl	800c02c <rcl_context_is_valid>
 801595a:	2800      	cmp	r0, #0
 801595c:	d067      	beq.n	8015a2e <rcl_wait_set_init+0x10e>
 801595e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015960:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8015962:	205c      	movs	r0, #92	@ 0x5c
 8015964:	4798      	blx	r3
 8015966:	6320      	str	r0, [r4, #48]	@ 0x30
 8015968:	2800      	cmp	r0, #0
 801596a:	d062      	beq.n	8015a32 <rcl_wait_set_init+0x112>
 801596c:	4629      	mov	r1, r5
 801596e:	225c      	movs	r2, #92	@ 0x5c
 8015970:	f003 ff50 	bl	8019814 <memset>
 8015974:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8015978:	eb03 0e02 	add.w	lr, r3, r2
 801597c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801597e:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8015980:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8015984:	449e      	add	lr, r3
 8015986:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801598a:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801598e:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8015992:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8015996:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 801599a:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 801599e:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 80159a2:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 80159a6:	f8da a000 	ldr.w	sl, [sl]
 80159aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80159ac:	44c6      	add	lr, r8
 80159ae:	f8dc 3000 	ldr.w	r3, [ip]
 80159b2:	602b      	str	r3, [r5, #0]
 80159b4:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 80159b8:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 80159bc:	f001 ff14 	bl	80177e8 <rmw_create_wait_set>
 80159c0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80159c2:	63f0      	str	r0, [r6, #60]	@ 0x3c
 80159c4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80159c6:	b350      	cbz	r0, 8015a1e <rcl_wait_set_init+0xfe>
 80159c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80159ca:	9302      	str	r3, [sp, #8]
 80159cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80159ce:	9301      	str	r3, [sp, #4]
 80159d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80159d2:	9300      	str	r3, [sp, #0]
 80159d4:	4642      	mov	r2, r8
 80159d6:	464b      	mov	r3, r9
 80159d8:	4639      	mov	r1, r7
 80159da:	4620      	mov	r0, r4
 80159dc:	f7ff fdea 	bl	80155b4 <rcl_wait_set_resize>
 80159e0:	4605      	mov	r5, r0
 80159e2:	2800      	cmp	r0, #0
 80159e4:	d0af      	beq.n	8015946 <rcl_wait_set_init+0x26>
 80159e6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80159e8:	bb2b      	cbnz	r3, 8015a36 <rcl_wait_set_init+0x116>
 80159ea:	2600      	movs	r6, #0
 80159ec:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80159f0:	9600      	str	r6, [sp, #0]
 80159f2:	4633      	mov	r3, r6
 80159f4:	4632      	mov	r2, r6
 80159f6:	4631      	mov	r1, r6
 80159f8:	4620      	mov	r0, r4
 80159fa:	f7ff fddb 	bl	80155b4 <rcl_wait_set_resize>
 80159fe:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8015a00:	2800      	cmp	r0, #0
 8015a02:	d0a0      	beq.n	8015946 <rcl_wait_set_init+0x26>
 8015a04:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8015a06:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8015a08:	4798      	blx	r3
 8015a0a:	4628      	mov	r0, r5
 8015a0c:	6326      	str	r6, [r4, #48]	@ 0x30
 8015a0e:	b004      	add	sp, #16
 8015a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a14:	250b      	movs	r5, #11
 8015a16:	4628      	mov	r0, r5
 8015a18:	b004      	add	sp, #16
 8015a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a1e:	2501      	movs	r5, #1
 8015a20:	f001 feec 	bl	80177fc <rmw_destroy_wait_set>
 8015a24:	2800      	cmp	r0, #0
 8015a26:	bf18      	it	ne
 8015a28:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8015a2c:	e7dd      	b.n	80159ea <rcl_wait_set_init+0xca>
 8015a2e:	2565      	movs	r5, #101	@ 0x65
 8015a30:	e789      	b.n	8015946 <rcl_wait_set_init+0x26>
 8015a32:	250a      	movs	r5, #10
 8015a34:	e787      	b.n	8015946 <rcl_wait_set_init+0x26>
 8015a36:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8015a38:	e7f2      	b.n	8015a20 <rcl_wait_set_init+0x100>
 8015a3a:	bf00      	nop

08015a3c <rcl_wait_set_add_guard_condition>:
 8015a3c:	b318      	cbz	r0, 8015a86 <rcl_wait_set_add_guard_condition+0x4a>
 8015a3e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015a40:	b570      	push	{r4, r5, r6, lr}
 8015a42:	4604      	mov	r4, r0
 8015a44:	b30b      	cbz	r3, 8015a8a <rcl_wait_set_add_guard_condition+0x4e>
 8015a46:	b319      	cbz	r1, 8015a90 <rcl_wait_set_add_guard_condition+0x54>
 8015a48:	68dd      	ldr	r5, [r3, #12]
 8015a4a:	68c0      	ldr	r0, [r0, #12]
 8015a4c:	4285      	cmp	r5, r0
 8015a4e:	d217      	bcs.n	8015a80 <rcl_wait_set_add_guard_condition+0x44>
 8015a50:	68a0      	ldr	r0, [r4, #8]
 8015a52:	1c6e      	adds	r6, r5, #1
 8015a54:	60de      	str	r6, [r3, #12]
 8015a56:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015a5a:	b102      	cbz	r2, 8015a5e <rcl_wait_set_add_guard_condition+0x22>
 8015a5c:	6015      	str	r5, [r2, #0]
 8015a5e:	4608      	mov	r0, r1
 8015a60:	f7ff f874 	bl	8014b4c <rcl_guard_condition_get_rmw_handle>
 8015a64:	b150      	cbz	r0, 8015a7c <rcl_wait_set_add_guard_condition+0x40>
 8015a66:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015a68:	6842      	ldr	r2, [r0, #4]
 8015a6a:	695b      	ldr	r3, [r3, #20]
 8015a6c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015a70:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015a72:	6913      	ldr	r3, [r2, #16]
 8015a74:	3301      	adds	r3, #1
 8015a76:	2000      	movs	r0, #0
 8015a78:	6113      	str	r3, [r2, #16]
 8015a7a:	bd70      	pop	{r4, r5, r6, pc}
 8015a7c:	2001      	movs	r0, #1
 8015a7e:	bd70      	pop	{r4, r5, r6, pc}
 8015a80:	f240 3086 	movw	r0, #902	@ 0x386
 8015a84:	bd70      	pop	{r4, r5, r6, pc}
 8015a86:	200b      	movs	r0, #11
 8015a88:	4770      	bx	lr
 8015a8a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015a8e:	bd70      	pop	{r4, r5, r6, pc}
 8015a90:	200b      	movs	r0, #11
 8015a92:	bd70      	pop	{r4, r5, r6, pc}

08015a94 <rcl_wait_set_add_timer>:
 8015a94:	b328      	cbz	r0, 8015ae2 <rcl_wait_set_add_timer+0x4e>
 8015a96:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015a98:	b570      	push	{r4, r5, r6, lr}
 8015a9a:	4604      	mov	r4, r0
 8015a9c:	b31b      	cbz	r3, 8015ae6 <rcl_wait_set_add_timer+0x52>
 8015a9e:	b329      	cbz	r1, 8015aec <rcl_wait_set_add_timer+0x58>
 8015aa0:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8015aa2:	6965      	ldr	r5, [r4, #20]
 8015aa4:	42a8      	cmp	r0, r5
 8015aa6:	d219      	bcs.n	8015adc <rcl_wait_set_add_timer+0x48>
 8015aa8:	6925      	ldr	r5, [r4, #16]
 8015aaa:	1c46      	adds	r6, r0, #1
 8015aac:	641e      	str	r6, [r3, #64]	@ 0x40
 8015aae:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8015ab2:	b102      	cbz	r2, 8015ab6 <rcl_wait_set_add_timer+0x22>
 8015ab4:	6010      	str	r0, [r2, #0]
 8015ab6:	4608      	mov	r0, r1
 8015ab8:	f7f7 fb5e 	bl	800d178 <rcl_timer_get_guard_condition>
 8015abc:	b168      	cbz	r0, 8015ada <rcl_wait_set_add_timer+0x46>
 8015abe:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015ac0:	68e3      	ldr	r3, [r4, #12]
 8015ac2:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8015ac4:	3b01      	subs	r3, #1
 8015ac6:	441d      	add	r5, r3
 8015ac8:	f7ff f840 	bl	8014b4c <rcl_guard_condition_get_rmw_handle>
 8015acc:	b180      	cbz	r0, 8015af0 <rcl_wait_set_add_timer+0x5c>
 8015ace:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015ad0:	6842      	ldr	r2, [r0, #4]
 8015ad2:	695b      	ldr	r3, [r3, #20]
 8015ad4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015ad8:	2000      	movs	r0, #0
 8015ada:	bd70      	pop	{r4, r5, r6, pc}
 8015adc:	f240 3086 	movw	r0, #902	@ 0x386
 8015ae0:	bd70      	pop	{r4, r5, r6, pc}
 8015ae2:	200b      	movs	r0, #11
 8015ae4:	4770      	bx	lr
 8015ae6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015aea:	bd70      	pop	{r4, r5, r6, pc}
 8015aec:	200b      	movs	r0, #11
 8015aee:	bd70      	pop	{r4, r5, r6, pc}
 8015af0:	2001      	movs	r0, #1
 8015af2:	bd70      	pop	{r4, r5, r6, pc}

08015af4 <rcl_wait_set_add_client>:
 8015af4:	b318      	cbz	r0, 8015b3e <rcl_wait_set_add_client+0x4a>
 8015af6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015af8:	b570      	push	{r4, r5, r6, lr}
 8015afa:	4604      	mov	r4, r0
 8015afc:	b30b      	cbz	r3, 8015b42 <rcl_wait_set_add_client+0x4e>
 8015afe:	b319      	cbz	r1, 8015b48 <rcl_wait_set_add_client+0x54>
 8015b00:	699d      	ldr	r5, [r3, #24]
 8015b02:	69c0      	ldr	r0, [r0, #28]
 8015b04:	4285      	cmp	r5, r0
 8015b06:	d217      	bcs.n	8015b38 <rcl_wait_set_add_client+0x44>
 8015b08:	69a0      	ldr	r0, [r4, #24]
 8015b0a:	1c6e      	adds	r6, r5, #1
 8015b0c:	619e      	str	r6, [r3, #24]
 8015b0e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015b12:	b102      	cbz	r2, 8015b16 <rcl_wait_set_add_client+0x22>
 8015b14:	6015      	str	r5, [r2, #0]
 8015b16:	4608      	mov	r0, r1
 8015b18:	f7fe fe6c 	bl	80147f4 <rcl_client_get_rmw_handle>
 8015b1c:	b150      	cbz	r0, 8015b34 <rcl_wait_set_add_client+0x40>
 8015b1e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015b20:	6842      	ldr	r2, [r0, #4]
 8015b22:	6a1b      	ldr	r3, [r3, #32]
 8015b24:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015b28:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015b2a:	69d3      	ldr	r3, [r2, #28]
 8015b2c:	3301      	adds	r3, #1
 8015b2e:	2000      	movs	r0, #0
 8015b30:	61d3      	str	r3, [r2, #28]
 8015b32:	bd70      	pop	{r4, r5, r6, pc}
 8015b34:	2001      	movs	r0, #1
 8015b36:	bd70      	pop	{r4, r5, r6, pc}
 8015b38:	f240 3086 	movw	r0, #902	@ 0x386
 8015b3c:	bd70      	pop	{r4, r5, r6, pc}
 8015b3e:	200b      	movs	r0, #11
 8015b40:	4770      	bx	lr
 8015b42:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015b46:	bd70      	pop	{r4, r5, r6, pc}
 8015b48:	200b      	movs	r0, #11
 8015b4a:	bd70      	pop	{r4, r5, r6, pc}

08015b4c <rcl_wait_set_add_service>:
 8015b4c:	b318      	cbz	r0, 8015b96 <rcl_wait_set_add_service+0x4a>
 8015b4e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015b50:	b570      	push	{r4, r5, r6, lr}
 8015b52:	4604      	mov	r4, r0
 8015b54:	b30b      	cbz	r3, 8015b9a <rcl_wait_set_add_service+0x4e>
 8015b56:	b319      	cbz	r1, 8015ba0 <rcl_wait_set_add_service+0x54>
 8015b58:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8015b5a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8015b5c:	4285      	cmp	r5, r0
 8015b5e:	d217      	bcs.n	8015b90 <rcl_wait_set_add_service+0x44>
 8015b60:	6a20      	ldr	r0, [r4, #32]
 8015b62:	1c6e      	adds	r6, r5, #1
 8015b64:	625e      	str	r6, [r3, #36]	@ 0x24
 8015b66:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015b6a:	b102      	cbz	r2, 8015b6e <rcl_wait_set_add_service+0x22>
 8015b6c:	6015      	str	r5, [r2, #0]
 8015b6e:	4608      	mov	r0, r1
 8015b70:	f7ff f9c8 	bl	8014f04 <rcl_service_get_rmw_handle>
 8015b74:	b150      	cbz	r0, 8015b8c <rcl_wait_set_add_service+0x40>
 8015b76:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015b78:	6842      	ldr	r2, [r0, #4]
 8015b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b7c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015b80:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015b82:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8015b84:	3301      	adds	r3, #1
 8015b86:	2000      	movs	r0, #0
 8015b88:	6293      	str	r3, [r2, #40]	@ 0x28
 8015b8a:	bd70      	pop	{r4, r5, r6, pc}
 8015b8c:	2001      	movs	r0, #1
 8015b8e:	bd70      	pop	{r4, r5, r6, pc}
 8015b90:	f240 3086 	movw	r0, #902	@ 0x386
 8015b94:	bd70      	pop	{r4, r5, r6, pc}
 8015b96:	200b      	movs	r0, #11
 8015b98:	4770      	bx	lr
 8015b9a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015b9e:	bd70      	pop	{r4, r5, r6, pc}
 8015ba0:	200b      	movs	r0, #11
 8015ba2:	bd70      	pop	{r4, r5, r6, pc}
 8015ba4:	0000      	movs	r0, r0
	...

08015ba8 <rcl_wait>:
 8015ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bac:	ed2d 8b02 	vpush	{d8}
 8015bb0:	b08d      	sub	sp, #52	@ 0x34
 8015bb2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015bb6:	2800      	cmp	r0, #0
 8015bb8:	f000 8143 	beq.w	8015e42 <rcl_wait+0x29a>
 8015bbc:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8015bbe:	4605      	mov	r5, r0
 8015bc0:	2e00      	cmp	r6, #0
 8015bc2:	f000 8112 	beq.w	8015dea <rcl_wait+0x242>
 8015bc6:	6843      	ldr	r3, [r0, #4]
 8015bc8:	b983      	cbnz	r3, 8015bec <rcl_wait+0x44>
 8015bca:	68eb      	ldr	r3, [r5, #12]
 8015bcc:	b973      	cbnz	r3, 8015bec <rcl_wait+0x44>
 8015bce:	696b      	ldr	r3, [r5, #20]
 8015bd0:	b963      	cbnz	r3, 8015bec <rcl_wait+0x44>
 8015bd2:	69eb      	ldr	r3, [r5, #28]
 8015bd4:	b953      	cbnz	r3, 8015bec <rcl_wait+0x44>
 8015bd6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8015bd8:	b943      	cbnz	r3, 8015bec <rcl_wait+0x44>
 8015bda:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8015bdc:	b933      	cbnz	r3, 8015bec <rcl_wait+0x44>
 8015bde:	f240 3085 	movw	r0, #901	@ 0x385
 8015be2:	b00d      	add	sp, #52	@ 0x34
 8015be4:	ecbd 8b02 	vpop	{d8}
 8015be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bec:	9b04      	ldr	r3, [sp, #16]
 8015bee:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8015bf0:	2b01      	cmp	r3, #1
 8015bf2:	9b05      	ldr	r3, [sp, #20]
 8015bf4:	f173 0300 	sbcs.w	r3, r3, #0
 8015bf8:	f2c0 80f0 	blt.w	8015ddc <rcl_wait+0x234>
 8015bfc:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8015c00:	4643      	mov	r3, r8
 8015c02:	2a00      	cmp	r2, #0
 8015c04:	f000 8133 	beq.w	8015e6e <rcl_wait+0x2c6>
 8015c08:	2400      	movs	r4, #0
 8015c0a:	4613      	mov	r3, r2
 8015c0c:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8015e80 <rcl_wait+0x2d8>
 8015c10:	46a2      	mov	sl, r4
 8015c12:	46a3      	mov	fp, r4
 8015c14:	f240 3921 	movw	r9, #801	@ 0x321
 8015c18:	4632      	mov	r2, r6
 8015c1a:	e014      	b.n	8015c46 <rcl_wait+0x9e>
 8015c1c:	2800      	cmp	r0, #0
 8015c1e:	d1e0      	bne.n	8015be2 <rcl_wait+0x3a>
 8015c20:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015c24:	4542      	cmp	r2, r8
 8015c26:	eb73 0107 	sbcs.w	r1, r3, r7
 8015c2a:	da03      	bge.n	8015c34 <rcl_wait+0x8c>
 8015c2c:	4690      	mov	r8, r2
 8015c2e:	461f      	mov	r7, r3
 8015c30:	f04f 0b01 	mov.w	fp, #1
 8015c34:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8015c36:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8015c38:	3401      	adds	r4, #1
 8015c3a:	f14a 0a00 	adc.w	sl, sl, #0
 8015c3e:	429c      	cmp	r4, r3
 8015c40:	f17a 0100 	sbcs.w	r1, sl, #0
 8015c44:	d228      	bcs.n	8015c98 <rcl_wait+0xf0>
 8015c46:	6928      	ldr	r0, [r5, #16]
 8015c48:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8015c4c:	a908      	add	r1, sp, #32
 8015c4e:	00a6      	lsls	r6, r4, #2
 8015c50:	2800      	cmp	r0, #0
 8015c52:	d0f1      	beq.n	8015c38 <rcl_wait+0x90>
 8015c54:	68eb      	ldr	r3, [r5, #12]
 8015c56:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8015c5a:	4423      	add	r3, r4
 8015c5c:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8015c60:	f1be 0f00 	cmp.w	lr, #0
 8015c64:	d006      	beq.n	8015c74 <rcl_wait+0xcc>
 8015c66:	6913      	ldr	r3, [r2, #16]
 8015c68:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8015c6c:	3301      	adds	r3, #1
 8015c6e:	6113      	str	r3, [r2, #16]
 8015c70:	692b      	ldr	r3, [r5, #16]
 8015c72:	5998      	ldr	r0, [r3, r6]
 8015c74:	ed8d 8b08 	vstr	d8, [sp, #32]
 8015c78:	f7f7 fa4c 	bl	800d114 <rcl_timer_get_time_until_next_call>
 8015c7c:	4548      	cmp	r0, r9
 8015c7e:	d1cd      	bne.n	8015c1c <rcl_wait+0x74>
 8015c80:	692b      	ldr	r3, [r5, #16]
 8015c82:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8015c84:	2100      	movs	r1, #0
 8015c86:	5199      	str	r1, [r3, r6]
 8015c88:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8015c8a:	3401      	adds	r4, #1
 8015c8c:	f14a 0a00 	adc.w	sl, sl, #0
 8015c90:	429c      	cmp	r4, r3
 8015c92:	f17a 0100 	sbcs.w	r1, sl, #0
 8015c96:	d3d6      	bcc.n	8015c46 <rcl_wait+0x9e>
 8015c98:	4616      	mov	r6, r2
 8015c9a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8015c9e:	4313      	orrs	r3, r2
 8015ca0:	46d9      	mov	r9, fp
 8015ca2:	f040 80a9 	bne.w	8015df8 <rcl_wait+0x250>
 8015ca6:	2300      	movs	r3, #0
 8015ca8:	2200      	movs	r2, #0
 8015caa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015cae:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8015cb2:	ab08      	add	r3, sp, #32
 8015cb4:	9302      	str	r3, [sp, #8]
 8015cb6:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8015cb8:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8015cbc:	e9cd 3200 	strd	r3, r2, [sp]
 8015cc0:	f106 0110 	add.w	r1, r6, #16
 8015cc4:	f106 031c 	add.w	r3, r6, #28
 8015cc8:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8015ccc:	1d30      	adds	r0, r6, #4
 8015cce:	f001 fc13 	bl	80174f8 <rmw_wait>
 8015cd2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015cd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015cd6:	4680      	mov	r8, r0
 8015cd8:	b1ca      	cbz	r2, 8015d0e <rcl_wait+0x166>
 8015cda:	2400      	movs	r4, #0
 8015cdc:	4627      	mov	r7, r4
 8015cde:	692a      	ldr	r2, [r5, #16]
 8015ce0:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8015ce4:	f10d 011f 	add.w	r1, sp, #31
 8015ce8:	00a6      	lsls	r6, r4, #2
 8015cea:	b160      	cbz	r0, 8015d06 <rcl_wait+0x15e>
 8015cec:	f88d 701f 	strb.w	r7, [sp, #31]
 8015cf0:	f7f7 f9d6 	bl	800d0a0 <rcl_timer_is_ready>
 8015cf4:	2800      	cmp	r0, #0
 8015cf6:	f47f af74 	bne.w	8015be2 <rcl_wait+0x3a>
 8015cfa:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8015cfe:	b90b      	cbnz	r3, 8015d04 <rcl_wait+0x15c>
 8015d00:	692a      	ldr	r2, [r5, #16]
 8015d02:	5193      	str	r3, [r2, r6]
 8015d04:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015d06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015d08:	3401      	adds	r4, #1
 8015d0a:	42a2      	cmp	r2, r4
 8015d0c:	d8e7      	bhi.n	8015cde <rcl_wait+0x136>
 8015d0e:	f038 0002 	bics.w	r0, r8, #2
 8015d12:	f040 8090 	bne.w	8015e36 <rcl_wait+0x28e>
 8015d16:	686e      	ldr	r6, [r5, #4]
 8015d18:	4602      	mov	r2, r0
 8015d1a:	b91e      	cbnz	r6, 8015d24 <rcl_wait+0x17c>
 8015d1c:	e00d      	b.n	8015d3a <rcl_wait+0x192>
 8015d1e:	3201      	adds	r2, #1
 8015d20:	42b2      	cmp	r2, r6
 8015d22:	d00a      	beq.n	8015d3a <rcl_wait+0x192>
 8015d24:	6899      	ldr	r1, [r3, #8]
 8015d26:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015d2a:	2900      	cmp	r1, #0
 8015d2c:	d1f7      	bne.n	8015d1e <rcl_wait+0x176>
 8015d2e:	682c      	ldr	r4, [r5, #0]
 8015d30:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015d34:	3201      	adds	r2, #1
 8015d36:	42b2      	cmp	r2, r6
 8015d38:	d1f4      	bne.n	8015d24 <rcl_wait+0x17c>
 8015d3a:	68ee      	ldr	r6, [r5, #12]
 8015d3c:	2200      	movs	r2, #0
 8015d3e:	b91e      	cbnz	r6, 8015d48 <rcl_wait+0x1a0>
 8015d40:	e00d      	b.n	8015d5e <rcl_wait+0x1b6>
 8015d42:	3201      	adds	r2, #1
 8015d44:	42b2      	cmp	r2, r6
 8015d46:	d00a      	beq.n	8015d5e <rcl_wait+0x1b6>
 8015d48:	6959      	ldr	r1, [r3, #20]
 8015d4a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015d4e:	2900      	cmp	r1, #0
 8015d50:	d1f7      	bne.n	8015d42 <rcl_wait+0x19a>
 8015d52:	68ac      	ldr	r4, [r5, #8]
 8015d54:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015d58:	3201      	adds	r2, #1
 8015d5a:	42b2      	cmp	r2, r6
 8015d5c:	d1f4      	bne.n	8015d48 <rcl_wait+0x1a0>
 8015d5e:	69ee      	ldr	r6, [r5, #28]
 8015d60:	2200      	movs	r2, #0
 8015d62:	b91e      	cbnz	r6, 8015d6c <rcl_wait+0x1c4>
 8015d64:	e00d      	b.n	8015d82 <rcl_wait+0x1da>
 8015d66:	3201      	adds	r2, #1
 8015d68:	42b2      	cmp	r2, r6
 8015d6a:	d00a      	beq.n	8015d82 <rcl_wait+0x1da>
 8015d6c:	6a19      	ldr	r1, [r3, #32]
 8015d6e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015d72:	2900      	cmp	r1, #0
 8015d74:	d1f7      	bne.n	8015d66 <rcl_wait+0x1be>
 8015d76:	69ac      	ldr	r4, [r5, #24]
 8015d78:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015d7c:	3201      	adds	r2, #1
 8015d7e:	42b2      	cmp	r2, r6
 8015d80:	d1f4      	bne.n	8015d6c <rcl_wait+0x1c4>
 8015d82:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8015d84:	2200      	movs	r2, #0
 8015d86:	b91e      	cbnz	r6, 8015d90 <rcl_wait+0x1e8>
 8015d88:	e00d      	b.n	8015da6 <rcl_wait+0x1fe>
 8015d8a:	3201      	adds	r2, #1
 8015d8c:	4296      	cmp	r6, r2
 8015d8e:	d00a      	beq.n	8015da6 <rcl_wait+0x1fe>
 8015d90:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8015d92:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015d96:	2900      	cmp	r1, #0
 8015d98:	d1f7      	bne.n	8015d8a <rcl_wait+0x1e2>
 8015d9a:	6a2c      	ldr	r4, [r5, #32]
 8015d9c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015da0:	3201      	adds	r2, #1
 8015da2:	4296      	cmp	r6, r2
 8015da4:	d1f4      	bne.n	8015d90 <rcl_wait+0x1e8>
 8015da6:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8015da8:	2200      	movs	r2, #0
 8015daa:	b91e      	cbnz	r6, 8015db4 <rcl_wait+0x20c>
 8015dac:	e00d      	b.n	8015dca <rcl_wait+0x222>
 8015dae:	3201      	adds	r2, #1
 8015db0:	42b2      	cmp	r2, r6
 8015db2:	d00a      	beq.n	8015dca <rcl_wait+0x222>
 8015db4:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8015db6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015dba:	2900      	cmp	r1, #0
 8015dbc:	d1f7      	bne.n	8015dae <rcl_wait+0x206>
 8015dbe:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8015dc0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015dc4:	3201      	adds	r2, #1
 8015dc6:	42b2      	cmp	r2, r6
 8015dc8:	d1f4      	bne.n	8015db4 <rcl_wait+0x20c>
 8015dca:	f1b8 0f02 	cmp.w	r8, #2
 8015dce:	f47f af08 	bne.w	8015be2 <rcl_wait+0x3a>
 8015dd2:	464b      	mov	r3, r9
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	bf08      	it	eq
 8015dd8:	2002      	moveq	r0, #2
 8015dda:	e702      	b.n	8015be2 <rcl_wait+0x3a>
 8015ddc:	2a00      	cmp	r2, #0
 8015dde:	d03a      	beq.n	8015e56 <rcl_wait+0x2ae>
 8015de0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8015de4:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8015de8:	e70e      	b.n	8015c08 <rcl_wait+0x60>
 8015dea:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015dee:	b00d      	add	sp, #52	@ 0x34
 8015df0:	ecbd 8b02 	vpop	{d8}
 8015df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015df8:	9b04      	ldr	r3, [sp, #16]
 8015dfa:	2b01      	cmp	r3, #1
 8015dfc:	9b05      	ldr	r3, [sp, #20]
 8015dfe:	f173 0300 	sbcs.w	r3, r3, #0
 8015e02:	db24      	blt.n	8015e4e <rcl_wait+0x2a6>
 8015e04:	2f00      	cmp	r7, #0
 8015e06:	bfbc      	itt	lt
 8015e08:	f04f 0800 	movlt.w	r8, #0
 8015e0c:	4647      	movlt	r7, r8
 8015e0e:	a31e      	add	r3, pc, #120	@ (adr r3, 8015e88 <rcl_wait+0x2e0>)
 8015e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e14:	4640      	mov	r0, r8
 8015e16:	4639      	mov	r1, r7
 8015e18:	f7ea ff08 	bl	8000c2c <__aeabi_ldivmod>
 8015e1c:	a31a      	add	r3, pc, #104	@ (adr r3, 8015e88 <rcl_wait+0x2e0>)
 8015e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e22:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015e26:	4640      	mov	r0, r8
 8015e28:	4639      	mov	r1, r7
 8015e2a:	f7ea feff 	bl	8000c2c <__aeabi_ldivmod>
 8015e2e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8015e32:	ab08      	add	r3, sp, #32
 8015e34:	e73e      	b.n	8015cb4 <rcl_wait+0x10c>
 8015e36:	2001      	movs	r0, #1
 8015e38:	b00d      	add	sp, #52	@ 0x34
 8015e3a:	ecbd 8b02 	vpop	{d8}
 8015e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e42:	200b      	movs	r0, #11
 8015e44:	b00d      	add	sp, #52	@ 0x34
 8015e46:	ecbd 8b02 	vpop	{d8}
 8015e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e4e:	465b      	mov	r3, fp
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d1d7      	bne.n	8015e04 <rcl_wait+0x25c>
 8015e54:	e72e      	b.n	8015cb4 <rcl_wait+0x10c>
 8015e56:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8015e5a:	430b      	orrs	r3, r1
 8015e5c:	bf08      	it	eq
 8015e5e:	4691      	moveq	r9, r2
 8015e60:	f43f af21 	beq.w	8015ca6 <rcl_wait+0xfe>
 8015e64:	9b04      	ldr	r3, [sp, #16]
 8015e66:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8015e6a:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8015e6e:	2b01      	cmp	r3, #1
 8015e70:	9b05      	ldr	r3, [sp, #20]
 8015e72:	f173 0300 	sbcs.w	r3, r3, #0
 8015e76:	f04f 0300 	mov.w	r3, #0
 8015e7a:	4699      	mov	r9, r3
 8015e7c:	dac2      	bge.n	8015e04 <rcl_wait+0x25c>
 8015e7e:	e719      	b.n	8015cb4 <rcl_wait+0x10c>
 8015e80:	ffffffff 	.word	0xffffffff
 8015e84:	7fffffff 	.word	0x7fffffff
 8015e88:	3b9aca00 	.word	0x3b9aca00
 8015e8c:	00000000 	.word	0x00000000

08015e90 <rcl_action_take_goal_response>:
 8015e90:	2800      	cmp	r0, #0
 8015e92:	d039      	beq.n	8015f08 <rcl_action_take_goal_response+0x78>
 8015e94:	b570      	push	{r4, r5, r6, lr}
 8015e96:	4604      	mov	r4, r0
 8015e98:	6800      	ldr	r0, [r0, #0]
 8015e9a:	b380      	cbz	r0, 8015efe <rcl_action_take_goal_response+0x6e>
 8015e9c:	460d      	mov	r5, r1
 8015e9e:	4616      	mov	r6, r2
 8015ea0:	f7fe fd2e 	bl	8014900 <rcl_client_is_valid>
 8015ea4:	b330      	cbz	r0, 8015ef4 <rcl_action_take_goal_response+0x64>
 8015ea6:	6820      	ldr	r0, [r4, #0]
 8015ea8:	3004      	adds	r0, #4
 8015eaa:	f7fe fd29 	bl	8014900 <rcl_client_is_valid>
 8015eae:	b308      	cbz	r0, 8015ef4 <rcl_action_take_goal_response+0x64>
 8015eb0:	6820      	ldr	r0, [r4, #0]
 8015eb2:	3008      	adds	r0, #8
 8015eb4:	f7fe fd24 	bl	8014900 <rcl_client_is_valid>
 8015eb8:	b1e0      	cbz	r0, 8015ef4 <rcl_action_take_goal_response+0x64>
 8015eba:	6820      	ldr	r0, [r4, #0]
 8015ebc:	300c      	adds	r0, #12
 8015ebe:	f7f6 fee1 	bl	800cc84 <rcl_subscription_is_valid>
 8015ec2:	b1b8      	cbz	r0, 8015ef4 <rcl_action_take_goal_response+0x64>
 8015ec4:	6820      	ldr	r0, [r4, #0]
 8015ec6:	3010      	adds	r0, #16
 8015ec8:	f7f6 fedc 	bl	800cc84 <rcl_subscription_is_valid>
 8015ecc:	b190      	cbz	r0, 8015ef4 <rcl_action_take_goal_response+0x64>
 8015ece:	b1cd      	cbz	r5, 8015f04 <rcl_action_take_goal_response+0x74>
 8015ed0:	b1c6      	cbz	r6, 8015f04 <rcl_action_take_goal_response+0x74>
 8015ed2:	6820      	ldr	r0, [r4, #0]
 8015ed4:	4632      	mov	r2, r6
 8015ed6:	4629      	mov	r1, r5
 8015ed8:	f7fe fcca 	bl	8014870 <rcl_take_response>
 8015edc:	b148      	cbz	r0, 8015ef2 <rcl_action_take_goal_response+0x62>
 8015ede:	280a      	cmp	r0, #10
 8015ee0:	d007      	beq.n	8015ef2 <rcl_action_take_goal_response+0x62>
 8015ee2:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8015ee6:	f640 0337 	movw	r3, #2103	@ 0x837
 8015eea:	4290      	cmp	r0, r2
 8015eec:	bf0c      	ite	eq
 8015eee:	4618      	moveq	r0, r3
 8015ef0:	2001      	movne	r0, #1
 8015ef2:	bd70      	pop	{r4, r5, r6, pc}
 8015ef4:	f7f8 fa10 	bl	800e318 <rcutils_reset_error>
 8015ef8:	f640 0036 	movw	r0, #2102	@ 0x836
 8015efc:	bd70      	pop	{r4, r5, r6, pc}
 8015efe:	f640 0036 	movw	r0, #2102	@ 0x836
 8015f02:	bd70      	pop	{r4, r5, r6, pc}
 8015f04:	200b      	movs	r0, #11
 8015f06:	bd70      	pop	{r4, r5, r6, pc}
 8015f08:	f640 0036 	movw	r0, #2102	@ 0x836
 8015f0c:	4770      	bx	lr
 8015f0e:	bf00      	nop

08015f10 <rcl_action_send_result_request>:
 8015f10:	b390      	cbz	r0, 8015f78 <rcl_action_send_result_request+0x68>
 8015f12:	b570      	push	{r4, r5, r6, lr}
 8015f14:	4604      	mov	r4, r0
 8015f16:	6800      	ldr	r0, [r0, #0]
 8015f18:	b348      	cbz	r0, 8015f6e <rcl_action_send_result_request+0x5e>
 8015f1a:	460d      	mov	r5, r1
 8015f1c:	4616      	mov	r6, r2
 8015f1e:	f7fe fcef 	bl	8014900 <rcl_client_is_valid>
 8015f22:	b1f8      	cbz	r0, 8015f64 <rcl_action_send_result_request+0x54>
 8015f24:	6820      	ldr	r0, [r4, #0]
 8015f26:	3004      	adds	r0, #4
 8015f28:	f7fe fcea 	bl	8014900 <rcl_client_is_valid>
 8015f2c:	b1d0      	cbz	r0, 8015f64 <rcl_action_send_result_request+0x54>
 8015f2e:	6820      	ldr	r0, [r4, #0]
 8015f30:	3008      	adds	r0, #8
 8015f32:	f7fe fce5 	bl	8014900 <rcl_client_is_valid>
 8015f36:	b1a8      	cbz	r0, 8015f64 <rcl_action_send_result_request+0x54>
 8015f38:	6820      	ldr	r0, [r4, #0]
 8015f3a:	300c      	adds	r0, #12
 8015f3c:	f7f6 fea2 	bl	800cc84 <rcl_subscription_is_valid>
 8015f40:	b180      	cbz	r0, 8015f64 <rcl_action_send_result_request+0x54>
 8015f42:	6820      	ldr	r0, [r4, #0]
 8015f44:	3010      	adds	r0, #16
 8015f46:	f7f6 fe9d 	bl	800cc84 <rcl_subscription_is_valid>
 8015f4a:	b158      	cbz	r0, 8015f64 <rcl_action_send_result_request+0x54>
 8015f4c:	b195      	cbz	r5, 8015f74 <rcl_action_send_result_request+0x64>
 8015f4e:	b18e      	cbz	r6, 8015f74 <rcl_action_send_result_request+0x64>
 8015f50:	6820      	ldr	r0, [r4, #0]
 8015f52:	4632      	mov	r2, r6
 8015f54:	4629      	mov	r1, r5
 8015f56:	3008      	adds	r0, #8
 8015f58:	f7fe fc52 	bl	8014800 <rcl_send_request>
 8015f5c:	3800      	subs	r0, #0
 8015f5e:	bf18      	it	ne
 8015f60:	2001      	movne	r0, #1
 8015f62:	bd70      	pop	{r4, r5, r6, pc}
 8015f64:	f7f8 f9d8 	bl	800e318 <rcutils_reset_error>
 8015f68:	f640 0036 	movw	r0, #2102	@ 0x836
 8015f6c:	bd70      	pop	{r4, r5, r6, pc}
 8015f6e:	f640 0036 	movw	r0, #2102	@ 0x836
 8015f72:	bd70      	pop	{r4, r5, r6, pc}
 8015f74:	200b      	movs	r0, #11
 8015f76:	bd70      	pop	{r4, r5, r6, pc}
 8015f78:	f640 0036 	movw	r0, #2102	@ 0x836
 8015f7c:	4770      	bx	lr
 8015f7e:	bf00      	nop

08015f80 <rcl_action_take_result_response>:
 8015f80:	2800      	cmp	r0, #0
 8015f82:	d03a      	beq.n	8015ffa <rcl_action_take_result_response+0x7a>
 8015f84:	b570      	push	{r4, r5, r6, lr}
 8015f86:	4604      	mov	r4, r0
 8015f88:	6800      	ldr	r0, [r0, #0]
 8015f8a:	b388      	cbz	r0, 8015ff0 <rcl_action_take_result_response+0x70>
 8015f8c:	460d      	mov	r5, r1
 8015f8e:	4616      	mov	r6, r2
 8015f90:	f7fe fcb6 	bl	8014900 <rcl_client_is_valid>
 8015f94:	b338      	cbz	r0, 8015fe6 <rcl_action_take_result_response+0x66>
 8015f96:	6820      	ldr	r0, [r4, #0]
 8015f98:	3004      	adds	r0, #4
 8015f9a:	f7fe fcb1 	bl	8014900 <rcl_client_is_valid>
 8015f9e:	b310      	cbz	r0, 8015fe6 <rcl_action_take_result_response+0x66>
 8015fa0:	6820      	ldr	r0, [r4, #0]
 8015fa2:	3008      	adds	r0, #8
 8015fa4:	f7fe fcac 	bl	8014900 <rcl_client_is_valid>
 8015fa8:	b1e8      	cbz	r0, 8015fe6 <rcl_action_take_result_response+0x66>
 8015faa:	6820      	ldr	r0, [r4, #0]
 8015fac:	300c      	adds	r0, #12
 8015fae:	f7f6 fe69 	bl	800cc84 <rcl_subscription_is_valid>
 8015fb2:	b1c0      	cbz	r0, 8015fe6 <rcl_action_take_result_response+0x66>
 8015fb4:	6820      	ldr	r0, [r4, #0]
 8015fb6:	3010      	adds	r0, #16
 8015fb8:	f7f6 fe64 	bl	800cc84 <rcl_subscription_is_valid>
 8015fbc:	b198      	cbz	r0, 8015fe6 <rcl_action_take_result_response+0x66>
 8015fbe:	b1d5      	cbz	r5, 8015ff6 <rcl_action_take_result_response+0x76>
 8015fc0:	b1ce      	cbz	r6, 8015ff6 <rcl_action_take_result_response+0x76>
 8015fc2:	6820      	ldr	r0, [r4, #0]
 8015fc4:	4632      	mov	r2, r6
 8015fc6:	4629      	mov	r1, r5
 8015fc8:	3008      	adds	r0, #8
 8015fca:	f7fe fc51 	bl	8014870 <rcl_take_response>
 8015fce:	b148      	cbz	r0, 8015fe4 <rcl_action_take_result_response+0x64>
 8015fd0:	280a      	cmp	r0, #10
 8015fd2:	d007      	beq.n	8015fe4 <rcl_action_take_result_response+0x64>
 8015fd4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8015fd8:	f640 0337 	movw	r3, #2103	@ 0x837
 8015fdc:	4290      	cmp	r0, r2
 8015fde:	bf0c      	ite	eq
 8015fe0:	4618      	moveq	r0, r3
 8015fe2:	2001      	movne	r0, #1
 8015fe4:	bd70      	pop	{r4, r5, r6, pc}
 8015fe6:	f7f8 f997 	bl	800e318 <rcutils_reset_error>
 8015fea:	f640 0036 	movw	r0, #2102	@ 0x836
 8015fee:	bd70      	pop	{r4, r5, r6, pc}
 8015ff0:	f640 0036 	movw	r0, #2102	@ 0x836
 8015ff4:	bd70      	pop	{r4, r5, r6, pc}
 8015ff6:	200b      	movs	r0, #11
 8015ff8:	bd70      	pop	{r4, r5, r6, pc}
 8015ffa:	f640 0036 	movw	r0, #2102	@ 0x836
 8015ffe:	4770      	bx	lr

08016000 <rcl_action_take_cancel_response>:
 8016000:	2800      	cmp	r0, #0
 8016002:	d03a      	beq.n	801607a <rcl_action_take_cancel_response+0x7a>
 8016004:	b570      	push	{r4, r5, r6, lr}
 8016006:	4604      	mov	r4, r0
 8016008:	6800      	ldr	r0, [r0, #0]
 801600a:	b388      	cbz	r0, 8016070 <rcl_action_take_cancel_response+0x70>
 801600c:	460d      	mov	r5, r1
 801600e:	4616      	mov	r6, r2
 8016010:	f7fe fc76 	bl	8014900 <rcl_client_is_valid>
 8016014:	b338      	cbz	r0, 8016066 <rcl_action_take_cancel_response+0x66>
 8016016:	6820      	ldr	r0, [r4, #0]
 8016018:	3004      	adds	r0, #4
 801601a:	f7fe fc71 	bl	8014900 <rcl_client_is_valid>
 801601e:	b310      	cbz	r0, 8016066 <rcl_action_take_cancel_response+0x66>
 8016020:	6820      	ldr	r0, [r4, #0]
 8016022:	3008      	adds	r0, #8
 8016024:	f7fe fc6c 	bl	8014900 <rcl_client_is_valid>
 8016028:	b1e8      	cbz	r0, 8016066 <rcl_action_take_cancel_response+0x66>
 801602a:	6820      	ldr	r0, [r4, #0]
 801602c:	300c      	adds	r0, #12
 801602e:	f7f6 fe29 	bl	800cc84 <rcl_subscription_is_valid>
 8016032:	b1c0      	cbz	r0, 8016066 <rcl_action_take_cancel_response+0x66>
 8016034:	6820      	ldr	r0, [r4, #0]
 8016036:	3010      	adds	r0, #16
 8016038:	f7f6 fe24 	bl	800cc84 <rcl_subscription_is_valid>
 801603c:	b198      	cbz	r0, 8016066 <rcl_action_take_cancel_response+0x66>
 801603e:	b1d5      	cbz	r5, 8016076 <rcl_action_take_cancel_response+0x76>
 8016040:	b1ce      	cbz	r6, 8016076 <rcl_action_take_cancel_response+0x76>
 8016042:	6820      	ldr	r0, [r4, #0]
 8016044:	4632      	mov	r2, r6
 8016046:	4629      	mov	r1, r5
 8016048:	3004      	adds	r0, #4
 801604a:	f7fe fc11 	bl	8014870 <rcl_take_response>
 801604e:	b148      	cbz	r0, 8016064 <rcl_action_take_cancel_response+0x64>
 8016050:	280a      	cmp	r0, #10
 8016052:	d007      	beq.n	8016064 <rcl_action_take_cancel_response+0x64>
 8016054:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8016058:	f640 0337 	movw	r3, #2103	@ 0x837
 801605c:	4290      	cmp	r0, r2
 801605e:	bf0c      	ite	eq
 8016060:	4618      	moveq	r0, r3
 8016062:	2001      	movne	r0, #1
 8016064:	bd70      	pop	{r4, r5, r6, pc}
 8016066:	f7f8 f957 	bl	800e318 <rcutils_reset_error>
 801606a:	f640 0036 	movw	r0, #2102	@ 0x836
 801606e:	bd70      	pop	{r4, r5, r6, pc}
 8016070:	f640 0036 	movw	r0, #2102	@ 0x836
 8016074:	bd70      	pop	{r4, r5, r6, pc}
 8016076:	200b      	movs	r0, #11
 8016078:	bd70      	pop	{r4, r5, r6, pc}
 801607a:	f640 0036 	movw	r0, #2102	@ 0x836
 801607e:	4770      	bx	lr

08016080 <rcl_action_take_feedback>:
 8016080:	2800      	cmp	r0, #0
 8016082:	d038      	beq.n	80160f6 <rcl_action_take_feedback+0x76>
 8016084:	b530      	push	{r4, r5, lr}
 8016086:	4604      	mov	r4, r0
 8016088:	6800      	ldr	r0, [r0, #0]
 801608a:	b091      	sub	sp, #68	@ 0x44
 801608c:	b378      	cbz	r0, 80160ee <rcl_action_take_feedback+0x6e>
 801608e:	460d      	mov	r5, r1
 8016090:	f7fe fc36 	bl	8014900 <rcl_client_is_valid>
 8016094:	b328      	cbz	r0, 80160e2 <rcl_action_take_feedback+0x62>
 8016096:	6820      	ldr	r0, [r4, #0]
 8016098:	3004      	adds	r0, #4
 801609a:	f7fe fc31 	bl	8014900 <rcl_client_is_valid>
 801609e:	b300      	cbz	r0, 80160e2 <rcl_action_take_feedback+0x62>
 80160a0:	6820      	ldr	r0, [r4, #0]
 80160a2:	3008      	adds	r0, #8
 80160a4:	f7fe fc2c 	bl	8014900 <rcl_client_is_valid>
 80160a8:	b1d8      	cbz	r0, 80160e2 <rcl_action_take_feedback+0x62>
 80160aa:	6820      	ldr	r0, [r4, #0]
 80160ac:	300c      	adds	r0, #12
 80160ae:	f7f6 fde9 	bl	800cc84 <rcl_subscription_is_valid>
 80160b2:	b1b0      	cbz	r0, 80160e2 <rcl_action_take_feedback+0x62>
 80160b4:	6820      	ldr	r0, [r4, #0]
 80160b6:	3010      	adds	r0, #16
 80160b8:	f7f6 fde4 	bl	800cc84 <rcl_subscription_is_valid>
 80160bc:	b188      	cbz	r0, 80160e2 <rcl_action_take_feedback+0x62>
 80160be:	b1ed      	cbz	r5, 80160fc <rcl_action_take_feedback+0x7c>
 80160c0:	6820      	ldr	r0, [r4, #0]
 80160c2:	2300      	movs	r3, #0
 80160c4:	466a      	mov	r2, sp
 80160c6:	4629      	mov	r1, r5
 80160c8:	300c      	adds	r0, #12
 80160ca:	f7f6 fd7d 	bl	800cbc8 <rcl_take>
 80160ce:	b160      	cbz	r0, 80160ea <rcl_action_take_feedback+0x6a>
 80160d0:	f240 1391 	movw	r3, #401	@ 0x191
 80160d4:	4298      	cmp	r0, r3
 80160d6:	d014      	beq.n	8016102 <rcl_action_take_feedback+0x82>
 80160d8:	280a      	cmp	r0, #10
 80160da:	bf18      	it	ne
 80160dc:	2001      	movne	r0, #1
 80160de:	b011      	add	sp, #68	@ 0x44
 80160e0:	bd30      	pop	{r4, r5, pc}
 80160e2:	f7f8 f919 	bl	800e318 <rcutils_reset_error>
 80160e6:	f640 0036 	movw	r0, #2102	@ 0x836
 80160ea:	b011      	add	sp, #68	@ 0x44
 80160ec:	bd30      	pop	{r4, r5, pc}
 80160ee:	f640 0036 	movw	r0, #2102	@ 0x836
 80160f2:	b011      	add	sp, #68	@ 0x44
 80160f4:	bd30      	pop	{r4, r5, pc}
 80160f6:	f640 0036 	movw	r0, #2102	@ 0x836
 80160fa:	4770      	bx	lr
 80160fc:	200b      	movs	r0, #11
 80160fe:	b011      	add	sp, #68	@ 0x44
 8016100:	bd30      	pop	{r4, r5, pc}
 8016102:	f640 0037 	movw	r0, #2103	@ 0x837
 8016106:	e7f0      	b.n	80160ea <rcl_action_take_feedback+0x6a>

08016108 <rcl_action_wait_set_add_action_client>:
 8016108:	2800      	cmp	r0, #0
 801610a:	d048      	beq.n	801619e <rcl_action_wait_set_add_action_client+0x96>
 801610c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801610e:	460c      	mov	r4, r1
 8016110:	2900      	cmp	r1, #0
 8016112:	d03c      	beq.n	801618e <rcl_action_wait_set_add_action_client+0x86>
 8016114:	4605      	mov	r5, r0
 8016116:	6808      	ldr	r0, [r1, #0]
 8016118:	2800      	cmp	r0, #0
 801611a:	d038      	beq.n	801618e <rcl_action_wait_set_add_action_client+0x86>
 801611c:	4617      	mov	r7, r2
 801611e:	461e      	mov	r6, r3
 8016120:	f7fe fbee 	bl	8014900 <rcl_client_is_valid>
 8016124:	b3b0      	cbz	r0, 8016194 <rcl_action_wait_set_add_action_client+0x8c>
 8016126:	6820      	ldr	r0, [r4, #0]
 8016128:	3004      	adds	r0, #4
 801612a:	f7fe fbe9 	bl	8014900 <rcl_client_is_valid>
 801612e:	b388      	cbz	r0, 8016194 <rcl_action_wait_set_add_action_client+0x8c>
 8016130:	6820      	ldr	r0, [r4, #0]
 8016132:	3008      	adds	r0, #8
 8016134:	f7fe fbe4 	bl	8014900 <rcl_client_is_valid>
 8016138:	b360      	cbz	r0, 8016194 <rcl_action_wait_set_add_action_client+0x8c>
 801613a:	6820      	ldr	r0, [r4, #0]
 801613c:	300c      	adds	r0, #12
 801613e:	f7f6 fda1 	bl	800cc84 <rcl_subscription_is_valid>
 8016142:	b338      	cbz	r0, 8016194 <rcl_action_wait_set_add_action_client+0x8c>
 8016144:	6820      	ldr	r0, [r4, #0]
 8016146:	3010      	adds	r0, #16
 8016148:	f7f6 fd9c 	bl	800cc84 <rcl_subscription_is_valid>
 801614c:	b310      	cbz	r0, 8016194 <rcl_action_wait_set_add_action_client+0x8c>
 801614e:	6821      	ldr	r1, [r4, #0]
 8016150:	4628      	mov	r0, r5
 8016152:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8016156:	f7ff fccd 	bl	8015af4 <rcl_wait_set_add_client>
 801615a:	b9b8      	cbnz	r0, 801618c <rcl_action_wait_set_add_action_client+0x84>
 801615c:	6821      	ldr	r1, [r4, #0]
 801615e:	4628      	mov	r0, r5
 8016160:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8016164:	3104      	adds	r1, #4
 8016166:	f7ff fcc5 	bl	8015af4 <rcl_wait_set_add_client>
 801616a:	b978      	cbnz	r0, 801618c <rcl_action_wait_set_add_action_client+0x84>
 801616c:	6821      	ldr	r1, [r4, #0]
 801616e:	4628      	mov	r0, r5
 8016170:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8016174:	3108      	adds	r1, #8
 8016176:	f7ff fcbd 	bl	8015af4 <rcl_wait_set_add_client>
 801617a:	b938      	cbnz	r0, 801618c <rcl_action_wait_set_add_action_client+0x84>
 801617c:	6821      	ldr	r1, [r4, #0]
 801617e:	4628      	mov	r0, r5
 8016180:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8016184:	310c      	adds	r1, #12
 8016186:	f7ff f96d 	bl	8015464 <rcl_wait_set_add_subscription>
 801618a:	b158      	cbz	r0, 80161a4 <rcl_action_wait_set_add_action_client+0x9c>
 801618c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801618e:	f640 0036 	movw	r0, #2102	@ 0x836
 8016192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016194:	f7f8 f8c0 	bl	800e318 <rcutils_reset_error>
 8016198:	f640 0036 	movw	r0, #2102	@ 0x836
 801619c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801619e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80161a2:	4770      	bx	lr
 80161a4:	6821      	ldr	r1, [r4, #0]
 80161a6:	4628      	mov	r0, r5
 80161a8:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 80161ac:	3110      	adds	r1, #16
 80161ae:	f7ff f959 	bl	8015464 <rcl_wait_set_add_subscription>
 80161b2:	2800      	cmp	r0, #0
 80161b4:	d1ea      	bne.n	801618c <rcl_action_wait_set_add_action_client+0x84>
 80161b6:	b11f      	cbz	r7, 80161c0 <rcl_action_wait_set_add_action_client+0xb8>
 80161b8:	6823      	ldr	r3, [r4, #0]
 80161ba:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80161be:	603b      	str	r3, [r7, #0]
 80161c0:	2e00      	cmp	r6, #0
 80161c2:	d0e3      	beq.n	801618c <rcl_action_wait_set_add_action_client+0x84>
 80161c4:	6823      	ldr	r3, [r4, #0]
 80161c6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 80161ca:	6033      	str	r3, [r6, #0]
 80161cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80161ce:	bf00      	nop

080161d0 <rcl_action_client_wait_set_get_entities_ready>:
 80161d0:	2800      	cmp	r0, #0
 80161d2:	f000 808d 	beq.w	80162f0 <rcl_action_client_wait_set_get_entities_ready+0x120>
 80161d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161da:	460c      	mov	r4, r1
 80161dc:	2900      	cmp	r1, #0
 80161de:	d077      	beq.n	80162d0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80161e0:	4605      	mov	r5, r0
 80161e2:	6808      	ldr	r0, [r1, #0]
 80161e4:	2800      	cmp	r0, #0
 80161e6:	d073      	beq.n	80162d0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80161e8:	4616      	mov	r6, r2
 80161ea:	461f      	mov	r7, r3
 80161ec:	f7fe fb88 	bl	8014900 <rcl_client_is_valid>
 80161f0:	2800      	cmp	r0, #0
 80161f2:	d071      	beq.n	80162d8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80161f4:	6820      	ldr	r0, [r4, #0]
 80161f6:	3004      	adds	r0, #4
 80161f8:	f7fe fb82 	bl	8014900 <rcl_client_is_valid>
 80161fc:	2800      	cmp	r0, #0
 80161fe:	d06b      	beq.n	80162d8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8016200:	6820      	ldr	r0, [r4, #0]
 8016202:	3008      	adds	r0, #8
 8016204:	f7fe fb7c 	bl	8014900 <rcl_client_is_valid>
 8016208:	2800      	cmp	r0, #0
 801620a:	d065      	beq.n	80162d8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801620c:	6820      	ldr	r0, [r4, #0]
 801620e:	300c      	adds	r0, #12
 8016210:	f7f6 fd38 	bl	800cc84 <rcl_subscription_is_valid>
 8016214:	2800      	cmp	r0, #0
 8016216:	d05f      	beq.n	80162d8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8016218:	6820      	ldr	r0, [r4, #0]
 801621a:	3010      	adds	r0, #16
 801621c:	f7f6 fd32 	bl	800cc84 <rcl_subscription_is_valid>
 8016220:	2800      	cmp	r0, #0
 8016222:	d059      	beq.n	80162d8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8016224:	2e00      	cmp	r6, #0
 8016226:	d060      	beq.n	80162ea <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8016228:	2f00      	cmp	r7, #0
 801622a:	d05e      	beq.n	80162ea <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801622c:	9b06      	ldr	r3, [sp, #24]
 801622e:	2b00      	cmp	r3, #0
 8016230:	d05b      	beq.n	80162ea <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8016232:	9b07      	ldr	r3, [sp, #28]
 8016234:	2b00      	cmp	r3, #0
 8016236:	d058      	beq.n	80162ea <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8016238:	9b08      	ldr	r3, [sp, #32]
 801623a:	2b00      	cmp	r3, #0
 801623c:	d055      	beq.n	80162ea <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801623e:	6823      	ldr	r3, [r4, #0]
 8016240:	686a      	ldr	r2, [r5, #4]
 8016242:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8016246:	428a      	cmp	r2, r1
 8016248:	d94c      	bls.n	80162e4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801624a:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 801624e:	4282      	cmp	r2, r0
 8016250:	d948      	bls.n	80162e4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8016252:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8016256:	69ea      	ldr	r2, [r5, #28]
 8016258:	42a2      	cmp	r2, r4
 801625a:	d943      	bls.n	80162e4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801625c:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8016260:	4562      	cmp	r2, ip
 8016262:	d93f      	bls.n	80162e4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8016264:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8016268:	4572      	cmp	r2, lr
 801626a:	d93b      	bls.n	80162e4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801626c:	69aa      	ldr	r2, [r5, #24]
 801626e:	682d      	ldr	r5, [r5, #0]
 8016270:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8016274:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8016278:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 801627c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8016280:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8016284:	f103 0c0c 	add.w	ip, r3, #12
 8016288:	eba5 050c 	sub.w	r5, r5, ip
 801628c:	fab5 f585 	clz	r5, r5
 8016290:	096d      	lsrs	r5, r5, #5
 8016292:	7035      	strb	r5, [r6, #0]
 8016294:	f103 0510 	add.w	r5, r3, #16
 8016298:	1b64      	subs	r4, r4, r5
 801629a:	fab4 f484 	clz	r4, r4
 801629e:	0964      	lsrs	r4, r4, #5
 80162a0:	703c      	strb	r4, [r7, #0]
 80162a2:	eba3 0008 	sub.w	r0, r3, r8
 80162a6:	1d1c      	adds	r4, r3, #4
 80162a8:	3308      	adds	r3, #8
 80162aa:	1ad3      	subs	r3, r2, r3
 80162ac:	fab0 f080 	clz	r0, r0
 80162b0:	9a06      	ldr	r2, [sp, #24]
 80162b2:	0940      	lsrs	r0, r0, #5
 80162b4:	1b09      	subs	r1, r1, r4
 80162b6:	7010      	strb	r0, [r2, #0]
 80162b8:	fab1 f181 	clz	r1, r1
 80162bc:	9a07      	ldr	r2, [sp, #28]
 80162be:	0949      	lsrs	r1, r1, #5
 80162c0:	7011      	strb	r1, [r2, #0]
 80162c2:	fab3 f383 	clz	r3, r3
 80162c6:	9a08      	ldr	r2, [sp, #32]
 80162c8:	095b      	lsrs	r3, r3, #5
 80162ca:	2000      	movs	r0, #0
 80162cc:	7013      	strb	r3, [r2, #0]
 80162ce:	e001      	b.n	80162d4 <rcl_action_client_wait_set_get_entities_ready+0x104>
 80162d0:	f640 0036 	movw	r0, #2102	@ 0x836
 80162d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162d8:	f7f8 f81e 	bl	800e318 <rcutils_reset_error>
 80162dc:	f640 0036 	movw	r0, #2102	@ 0x836
 80162e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162e4:	2001      	movs	r0, #1
 80162e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162ea:	200b      	movs	r0, #11
 80162ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162f0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80162f4:	4770      	bx	lr
 80162f6:	bf00      	nop

080162f8 <rcl_action_take_goal_request>:
 80162f8:	2800      	cmp	r0, #0
 80162fa:	d039      	beq.n	8016370 <rcl_action_take_goal_request+0x78>
 80162fc:	b570      	push	{r4, r5, r6, lr}
 80162fe:	4604      	mov	r4, r0
 8016300:	6800      	ldr	r0, [r0, #0]
 8016302:	b380      	cbz	r0, 8016366 <rcl_action_take_goal_request+0x6e>
 8016304:	460d      	mov	r5, r1
 8016306:	4616      	mov	r6, r2
 8016308:	f7fe fe5a 	bl	8014fc0 <rcl_service_is_valid>
 801630c:	b330      	cbz	r0, 801635c <rcl_action_take_goal_request+0x64>
 801630e:	6820      	ldr	r0, [r4, #0]
 8016310:	3004      	adds	r0, #4
 8016312:	f7fe fe55 	bl	8014fc0 <rcl_service_is_valid>
 8016316:	b308      	cbz	r0, 801635c <rcl_action_take_goal_request+0x64>
 8016318:	6820      	ldr	r0, [r4, #0]
 801631a:	3008      	adds	r0, #8
 801631c:	f7fe fe50 	bl	8014fc0 <rcl_service_is_valid>
 8016320:	b1e0      	cbz	r0, 801635c <rcl_action_take_goal_request+0x64>
 8016322:	6820      	ldr	r0, [r4, #0]
 8016324:	300c      	adds	r0, #12
 8016326:	f7f6 fafd 	bl	800c924 <rcl_publisher_is_valid>
 801632a:	b1b8      	cbz	r0, 801635c <rcl_action_take_goal_request+0x64>
 801632c:	6820      	ldr	r0, [r4, #0]
 801632e:	3010      	adds	r0, #16
 8016330:	f7f6 faf8 	bl	800c924 <rcl_publisher_is_valid>
 8016334:	b190      	cbz	r0, 801635c <rcl_action_take_goal_request+0x64>
 8016336:	b1cd      	cbz	r5, 801636c <rcl_action_take_goal_request+0x74>
 8016338:	b1c6      	cbz	r6, 801636c <rcl_action_take_goal_request+0x74>
 801633a:	6820      	ldr	r0, [r4, #0]
 801633c:	4632      	mov	r2, r6
 801633e:	4629      	mov	r1, r5
 8016340:	f7fe fde6 	bl	8014f10 <rcl_take_request>
 8016344:	b148      	cbz	r0, 801635a <rcl_action_take_goal_request+0x62>
 8016346:	280a      	cmp	r0, #10
 8016348:	d007      	beq.n	801635a <rcl_action_take_goal_request+0x62>
 801634a:	f240 2259 	movw	r2, #601	@ 0x259
 801634e:	f640 0399 	movw	r3, #2201	@ 0x899
 8016352:	4290      	cmp	r0, r2
 8016354:	bf0c      	ite	eq
 8016356:	4618      	moveq	r0, r3
 8016358:	2001      	movne	r0, #1
 801635a:	bd70      	pop	{r4, r5, r6, pc}
 801635c:	f7f7 ffdc 	bl	800e318 <rcutils_reset_error>
 8016360:	f640 0098 	movw	r0, #2200	@ 0x898
 8016364:	bd70      	pop	{r4, r5, r6, pc}
 8016366:	f640 0098 	movw	r0, #2200	@ 0x898
 801636a:	bd70      	pop	{r4, r5, r6, pc}
 801636c:	200b      	movs	r0, #11
 801636e:	bd70      	pop	{r4, r5, r6, pc}
 8016370:	f640 0098 	movw	r0, #2200	@ 0x898
 8016374:	4770      	bx	lr
 8016376:	bf00      	nop

08016378 <rcl_action_send_goal_response>:
 8016378:	b390      	cbz	r0, 80163e0 <rcl_action_send_goal_response+0x68>
 801637a:	b570      	push	{r4, r5, r6, lr}
 801637c:	4604      	mov	r4, r0
 801637e:	6800      	ldr	r0, [r0, #0]
 8016380:	b348      	cbz	r0, 80163d6 <rcl_action_send_goal_response+0x5e>
 8016382:	460d      	mov	r5, r1
 8016384:	4616      	mov	r6, r2
 8016386:	f7fe fe1b 	bl	8014fc0 <rcl_service_is_valid>
 801638a:	b1f8      	cbz	r0, 80163cc <rcl_action_send_goal_response+0x54>
 801638c:	6820      	ldr	r0, [r4, #0]
 801638e:	3004      	adds	r0, #4
 8016390:	f7fe fe16 	bl	8014fc0 <rcl_service_is_valid>
 8016394:	b1d0      	cbz	r0, 80163cc <rcl_action_send_goal_response+0x54>
 8016396:	6820      	ldr	r0, [r4, #0]
 8016398:	3008      	adds	r0, #8
 801639a:	f7fe fe11 	bl	8014fc0 <rcl_service_is_valid>
 801639e:	b1a8      	cbz	r0, 80163cc <rcl_action_send_goal_response+0x54>
 80163a0:	6820      	ldr	r0, [r4, #0]
 80163a2:	300c      	adds	r0, #12
 80163a4:	f7f6 fabe 	bl	800c924 <rcl_publisher_is_valid>
 80163a8:	b180      	cbz	r0, 80163cc <rcl_action_send_goal_response+0x54>
 80163aa:	6820      	ldr	r0, [r4, #0]
 80163ac:	3010      	adds	r0, #16
 80163ae:	f7f6 fab9 	bl	800c924 <rcl_publisher_is_valid>
 80163b2:	b158      	cbz	r0, 80163cc <rcl_action_send_goal_response+0x54>
 80163b4:	b195      	cbz	r5, 80163dc <rcl_action_send_goal_response+0x64>
 80163b6:	b18e      	cbz	r6, 80163dc <rcl_action_send_goal_response+0x64>
 80163b8:	6820      	ldr	r0, [r4, #0]
 80163ba:	4632      	mov	r2, r6
 80163bc:	4629      	mov	r1, r5
 80163be:	f7fe fde7 	bl	8014f90 <rcl_send_response>
 80163c2:	b110      	cbz	r0, 80163ca <rcl_action_send_goal_response+0x52>
 80163c4:	2802      	cmp	r0, #2
 80163c6:	bf18      	it	ne
 80163c8:	2001      	movne	r0, #1
 80163ca:	bd70      	pop	{r4, r5, r6, pc}
 80163cc:	f7f7 ffa4 	bl	800e318 <rcutils_reset_error>
 80163d0:	f640 0098 	movw	r0, #2200	@ 0x898
 80163d4:	bd70      	pop	{r4, r5, r6, pc}
 80163d6:	f640 0098 	movw	r0, #2200	@ 0x898
 80163da:	bd70      	pop	{r4, r5, r6, pc}
 80163dc:	200b      	movs	r0, #11
 80163de:	bd70      	pop	{r4, r5, r6, pc}
 80163e0:	f640 0098 	movw	r0, #2200	@ 0x898
 80163e4:	4770      	bx	lr
 80163e6:	bf00      	nop

080163e8 <rcl_action_take_result_request>:
 80163e8:	2800      	cmp	r0, #0
 80163ea:	d03a      	beq.n	8016462 <rcl_action_take_result_request+0x7a>
 80163ec:	b570      	push	{r4, r5, r6, lr}
 80163ee:	4604      	mov	r4, r0
 80163f0:	6800      	ldr	r0, [r0, #0]
 80163f2:	b388      	cbz	r0, 8016458 <rcl_action_take_result_request+0x70>
 80163f4:	460d      	mov	r5, r1
 80163f6:	4616      	mov	r6, r2
 80163f8:	f7fe fde2 	bl	8014fc0 <rcl_service_is_valid>
 80163fc:	b338      	cbz	r0, 801644e <rcl_action_take_result_request+0x66>
 80163fe:	6820      	ldr	r0, [r4, #0]
 8016400:	3004      	adds	r0, #4
 8016402:	f7fe fddd 	bl	8014fc0 <rcl_service_is_valid>
 8016406:	b310      	cbz	r0, 801644e <rcl_action_take_result_request+0x66>
 8016408:	6820      	ldr	r0, [r4, #0]
 801640a:	3008      	adds	r0, #8
 801640c:	f7fe fdd8 	bl	8014fc0 <rcl_service_is_valid>
 8016410:	b1e8      	cbz	r0, 801644e <rcl_action_take_result_request+0x66>
 8016412:	6820      	ldr	r0, [r4, #0]
 8016414:	300c      	adds	r0, #12
 8016416:	f7f6 fa85 	bl	800c924 <rcl_publisher_is_valid>
 801641a:	b1c0      	cbz	r0, 801644e <rcl_action_take_result_request+0x66>
 801641c:	6820      	ldr	r0, [r4, #0]
 801641e:	3010      	adds	r0, #16
 8016420:	f7f6 fa80 	bl	800c924 <rcl_publisher_is_valid>
 8016424:	b198      	cbz	r0, 801644e <rcl_action_take_result_request+0x66>
 8016426:	b1d5      	cbz	r5, 801645e <rcl_action_take_result_request+0x76>
 8016428:	b1ce      	cbz	r6, 801645e <rcl_action_take_result_request+0x76>
 801642a:	6820      	ldr	r0, [r4, #0]
 801642c:	4632      	mov	r2, r6
 801642e:	4629      	mov	r1, r5
 8016430:	3008      	adds	r0, #8
 8016432:	f7fe fd6d 	bl	8014f10 <rcl_take_request>
 8016436:	b148      	cbz	r0, 801644c <rcl_action_take_result_request+0x64>
 8016438:	280a      	cmp	r0, #10
 801643a:	d007      	beq.n	801644c <rcl_action_take_result_request+0x64>
 801643c:	f240 2259 	movw	r2, #601	@ 0x259
 8016440:	f640 0399 	movw	r3, #2201	@ 0x899
 8016444:	4290      	cmp	r0, r2
 8016446:	bf0c      	ite	eq
 8016448:	4618      	moveq	r0, r3
 801644a:	2001      	movne	r0, #1
 801644c:	bd70      	pop	{r4, r5, r6, pc}
 801644e:	f7f7 ff63 	bl	800e318 <rcutils_reset_error>
 8016452:	f640 0098 	movw	r0, #2200	@ 0x898
 8016456:	bd70      	pop	{r4, r5, r6, pc}
 8016458:	f640 0098 	movw	r0, #2200	@ 0x898
 801645c:	bd70      	pop	{r4, r5, r6, pc}
 801645e:	200b      	movs	r0, #11
 8016460:	bd70      	pop	{r4, r5, r6, pc}
 8016462:	f640 0098 	movw	r0, #2200	@ 0x898
 8016466:	4770      	bx	lr

08016468 <rcl_action_take_cancel_request>:
 8016468:	2800      	cmp	r0, #0
 801646a:	d03a      	beq.n	80164e2 <rcl_action_take_cancel_request+0x7a>
 801646c:	b570      	push	{r4, r5, r6, lr}
 801646e:	4604      	mov	r4, r0
 8016470:	6800      	ldr	r0, [r0, #0]
 8016472:	b388      	cbz	r0, 80164d8 <rcl_action_take_cancel_request+0x70>
 8016474:	460d      	mov	r5, r1
 8016476:	4616      	mov	r6, r2
 8016478:	f7fe fda2 	bl	8014fc0 <rcl_service_is_valid>
 801647c:	b338      	cbz	r0, 80164ce <rcl_action_take_cancel_request+0x66>
 801647e:	6820      	ldr	r0, [r4, #0]
 8016480:	3004      	adds	r0, #4
 8016482:	f7fe fd9d 	bl	8014fc0 <rcl_service_is_valid>
 8016486:	b310      	cbz	r0, 80164ce <rcl_action_take_cancel_request+0x66>
 8016488:	6820      	ldr	r0, [r4, #0]
 801648a:	3008      	adds	r0, #8
 801648c:	f7fe fd98 	bl	8014fc0 <rcl_service_is_valid>
 8016490:	b1e8      	cbz	r0, 80164ce <rcl_action_take_cancel_request+0x66>
 8016492:	6820      	ldr	r0, [r4, #0]
 8016494:	300c      	adds	r0, #12
 8016496:	f7f6 fa45 	bl	800c924 <rcl_publisher_is_valid>
 801649a:	b1c0      	cbz	r0, 80164ce <rcl_action_take_cancel_request+0x66>
 801649c:	6820      	ldr	r0, [r4, #0]
 801649e:	3010      	adds	r0, #16
 80164a0:	f7f6 fa40 	bl	800c924 <rcl_publisher_is_valid>
 80164a4:	b198      	cbz	r0, 80164ce <rcl_action_take_cancel_request+0x66>
 80164a6:	b1d5      	cbz	r5, 80164de <rcl_action_take_cancel_request+0x76>
 80164a8:	b1ce      	cbz	r6, 80164de <rcl_action_take_cancel_request+0x76>
 80164aa:	6820      	ldr	r0, [r4, #0]
 80164ac:	4632      	mov	r2, r6
 80164ae:	4629      	mov	r1, r5
 80164b0:	3004      	adds	r0, #4
 80164b2:	f7fe fd2d 	bl	8014f10 <rcl_take_request>
 80164b6:	b148      	cbz	r0, 80164cc <rcl_action_take_cancel_request+0x64>
 80164b8:	280a      	cmp	r0, #10
 80164ba:	d007      	beq.n	80164cc <rcl_action_take_cancel_request+0x64>
 80164bc:	f240 2259 	movw	r2, #601	@ 0x259
 80164c0:	f640 0399 	movw	r3, #2201	@ 0x899
 80164c4:	4290      	cmp	r0, r2
 80164c6:	bf0c      	ite	eq
 80164c8:	4618      	moveq	r0, r3
 80164ca:	2001      	movne	r0, #1
 80164cc:	bd70      	pop	{r4, r5, r6, pc}
 80164ce:	f7f7 ff23 	bl	800e318 <rcutils_reset_error>
 80164d2:	f640 0098 	movw	r0, #2200	@ 0x898
 80164d6:	bd70      	pop	{r4, r5, r6, pc}
 80164d8:	f640 0098 	movw	r0, #2200	@ 0x898
 80164dc:	bd70      	pop	{r4, r5, r6, pc}
 80164de:	200b      	movs	r0, #11
 80164e0:	bd70      	pop	{r4, r5, r6, pc}
 80164e2:	f640 0098 	movw	r0, #2200	@ 0x898
 80164e6:	4770      	bx	lr

080164e8 <rcl_action_send_cancel_response>:
 80164e8:	b398      	cbz	r0, 8016552 <rcl_action_send_cancel_response+0x6a>
 80164ea:	b570      	push	{r4, r5, r6, lr}
 80164ec:	4604      	mov	r4, r0
 80164ee:	6800      	ldr	r0, [r0, #0]
 80164f0:	b350      	cbz	r0, 8016548 <rcl_action_send_cancel_response+0x60>
 80164f2:	460d      	mov	r5, r1
 80164f4:	4616      	mov	r6, r2
 80164f6:	f7fe fd63 	bl	8014fc0 <rcl_service_is_valid>
 80164fa:	b300      	cbz	r0, 801653e <rcl_action_send_cancel_response+0x56>
 80164fc:	6820      	ldr	r0, [r4, #0]
 80164fe:	3004      	adds	r0, #4
 8016500:	f7fe fd5e 	bl	8014fc0 <rcl_service_is_valid>
 8016504:	b1d8      	cbz	r0, 801653e <rcl_action_send_cancel_response+0x56>
 8016506:	6820      	ldr	r0, [r4, #0]
 8016508:	3008      	adds	r0, #8
 801650a:	f7fe fd59 	bl	8014fc0 <rcl_service_is_valid>
 801650e:	b1b0      	cbz	r0, 801653e <rcl_action_send_cancel_response+0x56>
 8016510:	6820      	ldr	r0, [r4, #0]
 8016512:	300c      	adds	r0, #12
 8016514:	f7f6 fa06 	bl	800c924 <rcl_publisher_is_valid>
 8016518:	b188      	cbz	r0, 801653e <rcl_action_send_cancel_response+0x56>
 801651a:	6820      	ldr	r0, [r4, #0]
 801651c:	3010      	adds	r0, #16
 801651e:	f7f6 fa01 	bl	800c924 <rcl_publisher_is_valid>
 8016522:	b160      	cbz	r0, 801653e <rcl_action_send_cancel_response+0x56>
 8016524:	b19d      	cbz	r5, 801654e <rcl_action_send_cancel_response+0x66>
 8016526:	b196      	cbz	r6, 801654e <rcl_action_send_cancel_response+0x66>
 8016528:	6820      	ldr	r0, [r4, #0]
 801652a:	4632      	mov	r2, r6
 801652c:	4629      	mov	r1, r5
 801652e:	3004      	adds	r0, #4
 8016530:	f7fe fd2e 	bl	8014f90 <rcl_send_response>
 8016534:	b110      	cbz	r0, 801653c <rcl_action_send_cancel_response+0x54>
 8016536:	2802      	cmp	r0, #2
 8016538:	bf18      	it	ne
 801653a:	2001      	movne	r0, #1
 801653c:	bd70      	pop	{r4, r5, r6, pc}
 801653e:	f7f7 feeb 	bl	800e318 <rcutils_reset_error>
 8016542:	f640 0098 	movw	r0, #2200	@ 0x898
 8016546:	bd70      	pop	{r4, r5, r6, pc}
 8016548:	f640 0098 	movw	r0, #2200	@ 0x898
 801654c:	bd70      	pop	{r4, r5, r6, pc}
 801654e:	200b      	movs	r0, #11
 8016550:	bd70      	pop	{r4, r5, r6, pc}
 8016552:	f640 0098 	movw	r0, #2200	@ 0x898
 8016556:	4770      	bx	lr

08016558 <rcl_action_wait_set_add_action_server>:
 8016558:	2800      	cmp	r0, #0
 801655a:	d04d      	beq.n	80165f8 <rcl_action_wait_set_add_action_server+0xa0>
 801655c:	b570      	push	{r4, r5, r6, lr}
 801655e:	460c      	mov	r4, r1
 8016560:	b159      	cbz	r1, 801657a <rcl_action_wait_set_add_action_server+0x22>
 8016562:	4605      	mov	r5, r0
 8016564:	6808      	ldr	r0, [r1, #0]
 8016566:	b140      	cbz	r0, 801657a <rcl_action_wait_set_add_action_server+0x22>
 8016568:	4616      	mov	r6, r2
 801656a:	f7fe fd29 	bl	8014fc0 <rcl_service_is_valid>
 801656e:	b120      	cbz	r0, 801657a <rcl_action_wait_set_add_action_server+0x22>
 8016570:	6820      	ldr	r0, [r4, #0]
 8016572:	3004      	adds	r0, #4
 8016574:	f7fe fd24 	bl	8014fc0 <rcl_service_is_valid>
 8016578:	b910      	cbnz	r0, 8016580 <rcl_action_wait_set_add_action_server+0x28>
 801657a:	f640 0098 	movw	r0, #2200	@ 0x898
 801657e:	bd70      	pop	{r4, r5, r6, pc}
 8016580:	6820      	ldr	r0, [r4, #0]
 8016582:	3008      	adds	r0, #8
 8016584:	f7fe fd1c 	bl	8014fc0 <rcl_service_is_valid>
 8016588:	2800      	cmp	r0, #0
 801658a:	d0f6      	beq.n	801657a <rcl_action_wait_set_add_action_server+0x22>
 801658c:	6820      	ldr	r0, [r4, #0]
 801658e:	300c      	adds	r0, #12
 8016590:	f7f6 f9e0 	bl	800c954 <rcl_publisher_is_valid_except_context>
 8016594:	2800      	cmp	r0, #0
 8016596:	d0f0      	beq.n	801657a <rcl_action_wait_set_add_action_server+0x22>
 8016598:	6820      	ldr	r0, [r4, #0]
 801659a:	3010      	adds	r0, #16
 801659c:	f7f6 f9da 	bl	800c954 <rcl_publisher_is_valid_except_context>
 80165a0:	2800      	cmp	r0, #0
 80165a2:	d0ea      	beq.n	801657a <rcl_action_wait_set_add_action_server+0x22>
 80165a4:	6821      	ldr	r1, [r4, #0]
 80165a6:	4628      	mov	r0, r5
 80165a8:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 80165ac:	f7ff face 	bl	8015b4c <rcl_wait_set_add_service>
 80165b0:	2800      	cmp	r0, #0
 80165b2:	d1e4      	bne.n	801657e <rcl_action_wait_set_add_action_server+0x26>
 80165b4:	6821      	ldr	r1, [r4, #0]
 80165b6:	4628      	mov	r0, r5
 80165b8:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 80165bc:	3104      	adds	r1, #4
 80165be:	f7ff fac5 	bl	8015b4c <rcl_wait_set_add_service>
 80165c2:	2800      	cmp	r0, #0
 80165c4:	d1db      	bne.n	801657e <rcl_action_wait_set_add_action_server+0x26>
 80165c6:	6821      	ldr	r1, [r4, #0]
 80165c8:	4628      	mov	r0, r5
 80165ca:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 80165ce:	3108      	adds	r1, #8
 80165d0:	f7ff fabc 	bl	8015b4c <rcl_wait_set_add_service>
 80165d4:	2800      	cmp	r0, #0
 80165d6:	d1d2      	bne.n	801657e <rcl_action_wait_set_add_action_server+0x26>
 80165d8:	6821      	ldr	r1, [r4, #0]
 80165da:	4628      	mov	r0, r5
 80165dc:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 80165e0:	3114      	adds	r1, #20
 80165e2:	f7ff fa57 	bl	8015a94 <rcl_wait_set_add_timer>
 80165e6:	2800      	cmp	r0, #0
 80165e8:	d1c9      	bne.n	801657e <rcl_action_wait_set_add_action_server+0x26>
 80165ea:	2e00      	cmp	r6, #0
 80165ec:	d0c7      	beq.n	801657e <rcl_action_wait_set_add_action_server+0x26>
 80165ee:	6823      	ldr	r3, [r4, #0]
 80165f0:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 80165f4:	6033      	str	r3, [r6, #0]
 80165f6:	bd70      	pop	{r4, r5, r6, pc}
 80165f8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80165fc:	4770      	bx	lr
 80165fe:	bf00      	nop

08016600 <rcl_action_server_wait_set_get_entities_ready>:
 8016600:	2800      	cmp	r0, #0
 8016602:	d05a      	beq.n	80166ba <rcl_action_server_wait_set_get_entities_ready+0xba>
 8016604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016606:	460c      	mov	r4, r1
 8016608:	b161      	cbz	r1, 8016624 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801660a:	4605      	mov	r5, r0
 801660c:	6808      	ldr	r0, [r1, #0]
 801660e:	b148      	cbz	r0, 8016624 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8016610:	4616      	mov	r6, r2
 8016612:	461f      	mov	r7, r3
 8016614:	f7fe fcd4 	bl	8014fc0 <rcl_service_is_valid>
 8016618:	b120      	cbz	r0, 8016624 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801661a:	6820      	ldr	r0, [r4, #0]
 801661c:	3004      	adds	r0, #4
 801661e:	f7fe fccf 	bl	8014fc0 <rcl_service_is_valid>
 8016622:	b910      	cbnz	r0, 801662a <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8016624:	f640 0098 	movw	r0, #2200	@ 0x898
 8016628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801662a:	6820      	ldr	r0, [r4, #0]
 801662c:	3008      	adds	r0, #8
 801662e:	f7fe fcc7 	bl	8014fc0 <rcl_service_is_valid>
 8016632:	2800      	cmp	r0, #0
 8016634:	d0f6      	beq.n	8016624 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8016636:	6820      	ldr	r0, [r4, #0]
 8016638:	300c      	adds	r0, #12
 801663a:	f7f6 f98b 	bl	800c954 <rcl_publisher_is_valid_except_context>
 801663e:	2800      	cmp	r0, #0
 8016640:	d0f0      	beq.n	8016624 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8016642:	6820      	ldr	r0, [r4, #0]
 8016644:	3010      	adds	r0, #16
 8016646:	f7f6 f985 	bl	800c954 <rcl_publisher_is_valid_except_context>
 801664a:	2800      	cmp	r0, #0
 801664c:	d0ea      	beq.n	8016624 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801664e:	b3be      	cbz	r6, 80166c0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8016650:	b3b7      	cbz	r7, 80166c0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8016652:	9b06      	ldr	r3, [sp, #24]
 8016654:	b3a3      	cbz	r3, 80166c0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8016656:	9b07      	ldr	r3, [sp, #28]
 8016658:	b393      	cbz	r3, 80166c0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801665a:	6821      	ldr	r1, [r4, #0]
 801665c:	692a      	ldr	r2, [r5, #16]
 801665e:	6a2c      	ldr	r4, [r5, #32]
 8016660:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8016664:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8016668:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 801666c:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8016670:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8016674:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8016678:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801667c:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8016680:	1a64      	subs	r4, r4, r1
 8016682:	fab4 f484 	clz	r4, r4
 8016686:	0964      	lsrs	r4, r4, #5
 8016688:	7034      	strb	r4, [r6, #0]
 801668a:	1d0c      	adds	r4, r1, #4
 801668c:	1b1b      	subs	r3, r3, r4
 801668e:	fab3 f383 	clz	r3, r3
 8016692:	095b      	lsrs	r3, r3, #5
 8016694:	f101 0408 	add.w	r4, r1, #8
 8016698:	703b      	strb	r3, [r7, #0]
 801669a:	f101 0314 	add.w	r3, r1, #20
 801669e:	1b01      	subs	r1, r0, r4
 80166a0:	1ad3      	subs	r3, r2, r3
 80166a2:	fab1 f181 	clz	r1, r1
 80166a6:	9a06      	ldr	r2, [sp, #24]
 80166a8:	0949      	lsrs	r1, r1, #5
 80166aa:	7011      	strb	r1, [r2, #0]
 80166ac:	fab3 f383 	clz	r3, r3
 80166b0:	9a07      	ldr	r2, [sp, #28]
 80166b2:	095b      	lsrs	r3, r3, #5
 80166b4:	2000      	movs	r0, #0
 80166b6:	7013      	strb	r3, [r2, #0]
 80166b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80166ba:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80166be:	4770      	bx	lr
 80166c0:	200b      	movs	r0, #11
 80166c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080166c4 <_execute_event_handler>:
 80166c4:	2002      	movs	r0, #2
 80166c6:	4770      	bx	lr

080166c8 <_cancel_goal_event_handler>:
 80166c8:	2003      	movs	r0, #3
 80166ca:	4770      	bx	lr

080166cc <_succeed_event_handler>:
 80166cc:	2004      	movs	r0, #4
 80166ce:	4770      	bx	lr

080166d0 <_abort_event_handler>:
 80166d0:	2006      	movs	r0, #6
 80166d2:	4770      	bx	lr

080166d4 <_canceled_event_handler>:
 80166d4:	2005      	movs	r0, #5
 80166d6:	4770      	bx	lr

080166d8 <rcl_action_transition_goal_state>:
 80166d8:	b2c2      	uxtb	r2, r0
 80166da:	2a06      	cmp	r2, #6
 80166dc:	d80c      	bhi.n	80166f8 <rcl_action_transition_goal_state+0x20>
 80166de:	2904      	cmp	r1, #4
 80166e0:	d80a      	bhi.n	80166f8 <rcl_action_transition_goal_state+0x20>
 80166e2:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80166e6:	b410      	push	{r4}
 80166e8:	1853      	adds	r3, r2, r1
 80166ea:	4c06      	ldr	r4, [pc, #24]	@ (8016704 <rcl_action_transition_goal_state+0x2c>)
 80166ec:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80166f0:	b123      	cbz	r3, 80166fc <rcl_action_transition_goal_state+0x24>
 80166f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80166f6:	4718      	bx	r3
 80166f8:	2000      	movs	r0, #0
 80166fa:	4770      	bx	lr
 80166fc:	2000      	movs	r0, #0
 80166fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016702:	4770      	bx	lr
 8016704:	0801b5f0 	.word	0x0801b5f0

08016708 <rcl_action_get_zero_initialized_cancel_response>:
 8016708:	b510      	push	{r4, lr}
 801670a:	4c07      	ldr	r4, [pc, #28]	@ (8016728 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801670c:	4686      	mov	lr, r0
 801670e:	4684      	mov	ip, r0
 8016710:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016712:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016716:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016718:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801671c:	6823      	ldr	r3, [r4, #0]
 801671e:	f8cc 3000 	str.w	r3, [ip]
 8016722:	4670      	mov	r0, lr
 8016724:	bd10      	pop	{r4, pc}
 8016726:	bf00      	nop
 8016728:	0801b67c 	.word	0x0801b67c

0801672c <rclc_action_send_result_request>:
 801672c:	b1d0      	cbz	r0, 8016764 <rclc_action_send_result_request+0x38>
 801672e:	b500      	push	{lr}
 8016730:	4684      	mov	ip, r0
 8016732:	b087      	sub	sp, #28
 8016734:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8016738:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801673c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8016740:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8016744:	f10d 0e08 	add.w	lr, sp, #8
 8016748:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801674c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8016750:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8016754:	a902      	add	r1, sp, #8
 8016756:	3010      	adds	r0, #16
 8016758:	f7ff fbda 	bl	8015f10 <rcl_action_send_result_request>
 801675c:	b920      	cbnz	r0, 8016768 <rclc_action_send_result_request+0x3c>
 801675e:	b007      	add	sp, #28
 8016760:	f85d fb04 	ldr.w	pc, [sp], #4
 8016764:	200b      	movs	r0, #11
 8016766:	4770      	bx	lr
 8016768:	9001      	str	r0, [sp, #4]
 801676a:	f7f7 fdd5 	bl	800e318 <rcutils_reset_error>
 801676e:	9801      	ldr	r0, [sp, #4]
 8016770:	b007      	add	sp, #28
 8016772:	f85d fb04 	ldr.w	pc, [sp], #4
 8016776:	bf00      	nop

08016778 <rclc_action_take_goal_handle>:
 8016778:	b160      	cbz	r0, 8016794 <rclc_action_take_goal_handle+0x1c>
 801677a:	6883      	ldr	r3, [r0, #8]
 801677c:	b143      	cbz	r3, 8016790 <rclc_action_take_goal_handle+0x18>
 801677e:	6819      	ldr	r1, [r3, #0]
 8016780:	6081      	str	r1, [r0, #8]
 8016782:	2200      	movs	r2, #0
 8016784:	721a      	strb	r2, [r3, #8]
 8016786:	68c1      	ldr	r1, [r0, #12]
 8016788:	6019      	str	r1, [r3, #0]
 801678a:	621a      	str	r2, [r3, #32]
 801678c:	849a      	strh	r2, [r3, #36]	@ 0x24
 801678e:	60c3      	str	r3, [r0, #12]
 8016790:	4618      	mov	r0, r3
 8016792:	4770      	bx	lr
 8016794:	4603      	mov	r3, r0
 8016796:	e7fb      	b.n	8016790 <rclc_action_take_goal_handle+0x18>

08016798 <rclc_action_remove_used_goal_handle>:
 8016798:	b180      	cbz	r0, 80167bc <rclc_action_remove_used_goal_handle+0x24>
 801679a:	b179      	cbz	r1, 80167bc <rclc_action_remove_used_goal_handle+0x24>
 801679c:	68c3      	ldr	r3, [r0, #12]
 801679e:	4299      	cmp	r1, r3
 80167a0:	d00d      	beq.n	80167be <rclc_action_remove_used_goal_handle+0x26>
 80167a2:	b12b      	cbz	r3, 80167b0 <rclc_action_remove_used_goal_handle+0x18>
 80167a4:	681a      	ldr	r2, [r3, #0]
 80167a6:	4291      	cmp	r1, r2
 80167a8:	d003      	beq.n	80167b2 <rclc_action_remove_used_goal_handle+0x1a>
 80167aa:	4613      	mov	r3, r2
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	d1f9      	bne.n	80167a4 <rclc_action_remove_used_goal_handle+0xc>
 80167b0:	4770      	bx	lr
 80167b2:	680a      	ldr	r2, [r1, #0]
 80167b4:	601a      	str	r2, [r3, #0]
 80167b6:	6883      	ldr	r3, [r0, #8]
 80167b8:	600b      	str	r3, [r1, #0]
 80167ba:	6081      	str	r1, [r0, #8]
 80167bc:	4770      	bx	lr
 80167be:	680b      	ldr	r3, [r1, #0]
 80167c0:	60c3      	str	r3, [r0, #12]
 80167c2:	e7f8      	b.n	80167b6 <rclc_action_remove_used_goal_handle+0x1e>

080167c4 <rclc_action_find_goal_handle_by_uuid>:
 80167c4:	b538      	push	{r3, r4, r5, lr}
 80167c6:	b180      	cbz	r0, 80167ea <rclc_action_find_goal_handle_by_uuid+0x26>
 80167c8:	460d      	mov	r5, r1
 80167ca:	b181      	cbz	r1, 80167ee <rclc_action_find_goal_handle_by_uuid+0x2a>
 80167cc:	68c4      	ldr	r4, [r0, #12]
 80167ce:	b914      	cbnz	r4, 80167d6 <rclc_action_find_goal_handle_by_uuid+0x12>
 80167d0:	e009      	b.n	80167e6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80167d2:	6824      	ldr	r4, [r4, #0]
 80167d4:	b13c      	cbz	r4, 80167e6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80167d6:	f104 0009 	add.w	r0, r4, #9
 80167da:	2210      	movs	r2, #16
 80167dc:	4629      	mov	r1, r5
 80167de:	f002 ffef 	bl	80197c0 <memcmp>
 80167e2:	2800      	cmp	r0, #0
 80167e4:	d1f5      	bne.n	80167d2 <rclc_action_find_goal_handle_by_uuid+0xe>
 80167e6:	4620      	mov	r0, r4
 80167e8:	bd38      	pop	{r3, r4, r5, pc}
 80167ea:	4604      	mov	r4, r0
 80167ec:	e7fb      	b.n	80167e6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80167ee:	460c      	mov	r4, r1
 80167f0:	e7f9      	b.n	80167e6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80167f2:	bf00      	nop

080167f4 <rclc_action_find_first_handle_by_status>:
 80167f4:	b140      	cbz	r0, 8016808 <rclc_action_find_first_handle_by_status+0x14>
 80167f6:	68c0      	ldr	r0, [r0, #12]
 80167f8:	b910      	cbnz	r0, 8016800 <rclc_action_find_first_handle_by_status+0xc>
 80167fa:	e005      	b.n	8016808 <rclc_action_find_first_handle_by_status+0x14>
 80167fc:	6800      	ldr	r0, [r0, #0]
 80167fe:	b118      	cbz	r0, 8016808 <rclc_action_find_first_handle_by_status+0x14>
 8016800:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8016804:	428b      	cmp	r3, r1
 8016806:	d1f9      	bne.n	80167fc <rclc_action_find_first_handle_by_status+0x8>
 8016808:	4770      	bx	lr
 801680a:	bf00      	nop

0801680c <rclc_action_find_first_terminated_handle>:
 801680c:	b140      	cbz	r0, 8016820 <rclc_action_find_first_terminated_handle+0x14>
 801680e:	68c0      	ldr	r0, [r0, #12]
 8016810:	b910      	cbnz	r0, 8016818 <rclc_action_find_first_terminated_handle+0xc>
 8016812:	e005      	b.n	8016820 <rclc_action_find_first_terminated_handle+0x14>
 8016814:	6800      	ldr	r0, [r0, #0]
 8016816:	b118      	cbz	r0, 8016820 <rclc_action_find_first_terminated_handle+0x14>
 8016818:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801681c:	2b03      	cmp	r3, #3
 801681e:	ddf9      	ble.n	8016814 <rclc_action_find_first_terminated_handle+0x8>
 8016820:	4770      	bx	lr
 8016822:	bf00      	nop

08016824 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8016824:	b170      	cbz	r0, 8016844 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8016826:	68c0      	ldr	r0, [r0, #12]
 8016828:	b160      	cbz	r0, 8016844 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801682a:	b410      	push	{r4}
 801682c:	e001      	b.n	8016832 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801682e:	6800      	ldr	r0, [r0, #0]
 8016830:	b128      	cbz	r0, 801683e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8016832:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8016836:	4299      	cmp	r1, r3
 8016838:	bf08      	it	eq
 801683a:	4294      	cmpeq	r4, r2
 801683c:	d1f7      	bne.n	801682e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801683e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016842:	4770      	bx	lr
 8016844:	4770      	bx	lr
 8016846:	bf00      	nop

08016848 <rclc_action_find_handle_by_result_request_sequence_number>:
 8016848:	b170      	cbz	r0, 8016868 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801684a:	68c0      	ldr	r0, [r0, #12]
 801684c:	b160      	cbz	r0, 8016868 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801684e:	b410      	push	{r4}
 8016850:	e001      	b.n	8016856 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8016852:	6800      	ldr	r0, [r0, #0]
 8016854:	b128      	cbz	r0, 8016862 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8016856:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 801685a:	4299      	cmp	r1, r3
 801685c:	bf08      	it	eq
 801685e:	4294      	cmpeq	r4, r2
 8016860:	d1f7      	bne.n	8016852 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8016862:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016866:	4770      	bx	lr
 8016868:	4770      	bx	lr
 801686a:	bf00      	nop

0801686c <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801686c:	b170      	cbz	r0, 801688c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801686e:	68c0      	ldr	r0, [r0, #12]
 8016870:	b160      	cbz	r0, 801688c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8016872:	b410      	push	{r4}
 8016874:	e001      	b.n	801687a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8016876:	6800      	ldr	r0, [r0, #0]
 8016878:	b128      	cbz	r0, 8016886 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801687a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 801687e:	4299      	cmp	r1, r3
 8016880:	bf08      	it	eq
 8016882:	4294      	cmpeq	r4, r2
 8016884:	d1f7      	bne.n	8016876 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8016886:	f85d 4b04 	ldr.w	r4, [sp], #4
 801688a:	4770      	bx	lr
 801688c:	4770      	bx	lr
 801688e:	bf00      	nop

08016890 <rclc_action_find_first_handle_with_goal_response>:
 8016890:	b140      	cbz	r0, 80168a4 <rclc_action_find_first_handle_with_goal_response+0x14>
 8016892:	68c0      	ldr	r0, [r0, #12]
 8016894:	b910      	cbnz	r0, 801689c <rclc_action_find_first_handle_with_goal_response+0xc>
 8016896:	e005      	b.n	80168a4 <rclc_action_find_first_handle_with_goal_response+0x14>
 8016898:	6800      	ldr	r0, [r0, #0]
 801689a:	b118      	cbz	r0, 80168a4 <rclc_action_find_first_handle_with_goal_response+0x14>
 801689c:	f890 3020 	ldrb.w	r3, [r0, #32]
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	d0f9      	beq.n	8016898 <rclc_action_find_first_handle_with_goal_response+0x8>
 80168a4:	4770      	bx	lr
 80168a6:	bf00      	nop

080168a8 <rclc_action_find_first_handle_with_result_response>:
 80168a8:	b140      	cbz	r0, 80168bc <rclc_action_find_first_handle_with_result_response+0x14>
 80168aa:	68c0      	ldr	r0, [r0, #12]
 80168ac:	b910      	cbnz	r0, 80168b4 <rclc_action_find_first_handle_with_result_response+0xc>
 80168ae:	e005      	b.n	80168bc <rclc_action_find_first_handle_with_result_response+0x14>
 80168b0:	6800      	ldr	r0, [r0, #0]
 80168b2:	b118      	cbz	r0, 80168bc <rclc_action_find_first_handle_with_result_response+0x14>
 80168b4:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d0f9      	beq.n	80168b0 <rclc_action_find_first_handle_with_result_response+0x8>
 80168bc:	4770      	bx	lr
 80168be:	bf00      	nop

080168c0 <rclc_action_server_response_goal_request>:
 80168c0:	b198      	cbz	r0, 80168ea <rclc_action_server_response_goal_request+0x2a>
 80168c2:	b510      	push	{r4, lr}
 80168c4:	6844      	ldr	r4, [r0, #4]
 80168c6:	b086      	sub	sp, #24
 80168c8:	2200      	movs	r2, #0
 80168ca:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80168ce:	460b      	mov	r3, r1
 80168d0:	9205      	str	r2, [sp, #20]
 80168d2:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 80168d6:	aa03      	add	r2, sp, #12
 80168d8:	f104 0010 	add.w	r0, r4, #16
 80168dc:	f88d 300c 	strb.w	r3, [sp, #12]
 80168e0:	f7ff fd4a 	bl	8016378 <rcl_action_send_goal_response>
 80168e4:	b918      	cbnz	r0, 80168ee <rclc_action_server_response_goal_request+0x2e>
 80168e6:	b006      	add	sp, #24
 80168e8:	bd10      	pop	{r4, pc}
 80168ea:	200b      	movs	r0, #11
 80168ec:	4770      	bx	lr
 80168ee:	9001      	str	r0, [sp, #4]
 80168f0:	f7f7 fd12 	bl	800e318 <rcutils_reset_error>
 80168f4:	9801      	ldr	r0, [sp, #4]
 80168f6:	b006      	add	sp, #24
 80168f8:	bd10      	pop	{r4, pc}
 80168fa:	bf00      	nop
 80168fc:	0000      	movs	r0, r0
	...

08016900 <rclc_action_server_goal_cancel_accept>:
 8016900:	b310      	cbz	r0, 8016948 <rclc_action_server_goal_cancel_accept+0x48>
 8016902:	b510      	push	{r4, lr}
 8016904:	b090      	sub	sp, #64	@ 0x40
 8016906:	4604      	mov	r4, r0
 8016908:	a806      	add	r0, sp, #24
 801690a:	f7ff fefd 	bl	8016708 <rcl_action_get_zero_initialized_cancel_response>
 801690e:	2300      	movs	r3, #0
 8016910:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8016914:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8016918:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801691c:	f88d 3018 	strb.w	r3, [sp, #24]
 8016920:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8016924:	f8cd d01c 	str.w	sp, [sp, #28]
 8016928:	46ec      	mov	ip, sp
 801692a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801692e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8016950 <rclc_action_server_goal_cancel_accept+0x50>
 8016932:	6860      	ldr	r0, [r4, #4]
 8016934:	aa06      	add	r2, sp, #24
 8016936:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 801693a:	3010      	adds	r0, #16
 801693c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8016940:	f7ff fdd2 	bl	80164e8 <rcl_action_send_cancel_response>
 8016944:	b010      	add	sp, #64	@ 0x40
 8016946:	bd10      	pop	{r4, pc}
 8016948:	200b      	movs	r0, #11
 801694a:	4770      	bx	lr
 801694c:	f3af 8000 	nop.w
 8016950:	00000001 	.word	0x00000001
 8016954:	00000001 	.word	0x00000001

08016958 <rclc_action_server_goal_cancel_reject>:
 8016958:	b082      	sub	sp, #8
 801695a:	b530      	push	{r4, r5, lr}
 801695c:	b08b      	sub	sp, #44	@ 0x2c
 801695e:	ac0e      	add	r4, sp, #56	@ 0x38
 8016960:	e884 000c 	stmia.w	r4, {r2, r3}
 8016964:	b188      	cbz	r0, 801698a <rclc_action_server_goal_cancel_reject+0x32>
 8016966:	4604      	mov	r4, r0
 8016968:	a801      	add	r0, sp, #4
 801696a:	460d      	mov	r5, r1
 801696c:	f7ff fecc 	bl	8016708 <rcl_action_get_zero_initialized_cancel_response>
 8016970:	aa01      	add	r2, sp, #4
 8016972:	a90e      	add	r1, sp, #56	@ 0x38
 8016974:	f104 0010 	add.w	r0, r4, #16
 8016978:	f88d 5004 	strb.w	r5, [sp, #4]
 801697c:	f7ff fdb4 	bl	80164e8 <rcl_action_send_cancel_response>
 8016980:	b00b      	add	sp, #44	@ 0x2c
 8016982:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016986:	b002      	add	sp, #8
 8016988:	4770      	bx	lr
 801698a:	200b      	movs	r0, #11
 801698c:	b00b      	add	sp, #44	@ 0x2c
 801698e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016992:	b002      	add	sp, #8
 8016994:	4770      	bx	lr
 8016996:	bf00      	nop

08016998 <rcutils_string_array_fini>:
 8016998:	b320      	cbz	r0, 80169e4 <rcutils_string_array_fini+0x4c>
 801699a:	b570      	push	{r4, r5, r6, lr}
 801699c:	4604      	mov	r4, r0
 801699e:	6840      	ldr	r0, [r0, #4]
 80169a0:	b1d8      	cbz	r0, 80169da <rcutils_string_array_fini+0x42>
 80169a2:	f104 0008 	add.w	r0, r4, #8
 80169a6:	f7f7 fbd7 	bl	800e158 <rcutils_allocator_is_valid>
 80169aa:	b1b8      	cbz	r0, 80169dc <rcutils_string_array_fini+0x44>
 80169ac:	6823      	ldr	r3, [r4, #0]
 80169ae:	b1bb      	cbz	r3, 80169e0 <rcutils_string_array_fini+0x48>
 80169b0:	2500      	movs	r5, #0
 80169b2:	6860      	ldr	r0, [r4, #4]
 80169b4:	462e      	mov	r6, r5
 80169b6:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80169ba:	68e3      	ldr	r3, [r4, #12]
 80169bc:	69a1      	ldr	r1, [r4, #24]
 80169be:	4798      	blx	r3
 80169c0:	e9d4 3000 	ldrd	r3, r0, [r4]
 80169c4:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 80169c8:	3501      	adds	r5, #1
 80169ca:	429d      	cmp	r5, r3
 80169cc:	d3f3      	bcc.n	80169b6 <rcutils_string_array_fini+0x1e>
 80169ce:	68e3      	ldr	r3, [r4, #12]
 80169d0:	69a1      	ldr	r1, [r4, #24]
 80169d2:	4798      	blx	r3
 80169d4:	2000      	movs	r0, #0
 80169d6:	e9c4 0000 	strd	r0, r0, [r4]
 80169da:	bd70      	pop	{r4, r5, r6, pc}
 80169dc:	200b      	movs	r0, #11
 80169de:	bd70      	pop	{r4, r5, r6, pc}
 80169e0:	6860      	ldr	r0, [r4, #4]
 80169e2:	e7f4      	b.n	80169ce <rcutils_string_array_fini+0x36>
 80169e4:	200b      	movs	r0, #11
 80169e6:	4770      	bx	lr

080169e8 <rcutils_get_zero_initialized_string_map>:
 80169e8:	4b01      	ldr	r3, [pc, #4]	@ (80169f0 <rcutils_get_zero_initialized_string_map+0x8>)
 80169ea:	2000      	movs	r0, #0
 80169ec:	6018      	str	r0, [r3, #0]
 80169ee:	4770      	bx	lr
 80169f0:	200118e8 	.word	0x200118e8

080169f4 <rcutils_string_map_reserve>:
 80169f4:	2800      	cmp	r0, #0
 80169f6:	d05f      	beq.n	8016ab8 <rcutils_string_map_reserve+0xc4>
 80169f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169fc:	460c      	mov	r4, r1
 80169fe:	6801      	ldr	r1, [r0, #0]
 8016a00:	b082      	sub	sp, #8
 8016a02:	4605      	mov	r5, r0
 8016a04:	b129      	cbz	r1, 8016a12 <rcutils_string_map_reserve+0x1e>
 8016a06:	68cb      	ldr	r3, [r1, #12]
 8016a08:	42a3      	cmp	r3, r4
 8016a0a:	d906      	bls.n	8016a1a <rcutils_string_map_reserve+0x26>
 8016a0c:	461c      	mov	r4, r3
 8016a0e:	2900      	cmp	r1, #0
 8016a10:	d1f9      	bne.n	8016a06 <rcutils_string_map_reserve+0x12>
 8016a12:	201f      	movs	r0, #31
 8016a14:	b002      	add	sp, #8
 8016a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a1a:	688b      	ldr	r3, [r1, #8]
 8016a1c:	42a3      	cmp	r3, r4
 8016a1e:	d047      	beq.n	8016ab0 <rcutils_string_map_reserve+0xbc>
 8016a20:	6a0e      	ldr	r6, [r1, #32]
 8016a22:	2c00      	cmp	r4, #0
 8016a24:	d034      	beq.n	8016a90 <rcutils_string_map_reserve+0x9c>
 8016a26:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8016a2a:	d243      	bcs.n	8016ab4 <rcutils_string_map_reserve+0xc0>
 8016a2c:	00a7      	lsls	r7, r4, #2
 8016a2e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8016a32:	6808      	ldr	r0, [r1, #0]
 8016a34:	4632      	mov	r2, r6
 8016a36:	4639      	mov	r1, r7
 8016a38:	47c0      	blx	r8
 8016a3a:	2800      	cmp	r0, #0
 8016a3c:	d03a      	beq.n	8016ab4 <rcutils_string_map_reserve+0xc0>
 8016a3e:	682b      	ldr	r3, [r5, #0]
 8016a40:	4632      	mov	r2, r6
 8016a42:	6018      	str	r0, [r3, #0]
 8016a44:	4639      	mov	r1, r7
 8016a46:	6858      	ldr	r0, [r3, #4]
 8016a48:	47c0      	blx	r8
 8016a4a:	2800      	cmp	r0, #0
 8016a4c:	d032      	beq.n	8016ab4 <rcutils_string_map_reserve+0xc0>
 8016a4e:	682d      	ldr	r5, [r5, #0]
 8016a50:	68ab      	ldr	r3, [r5, #8]
 8016a52:	6068      	str	r0, [r5, #4]
 8016a54:	42a3      	cmp	r3, r4
 8016a56:	d226      	bcs.n	8016aa6 <rcutils_string_map_reserve+0xb2>
 8016a58:	682a      	ldr	r2, [r5, #0]
 8016a5a:	eb00 0c07 	add.w	ip, r0, r7
 8016a5e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8016a62:	45e6      	cmp	lr, ip
 8016a64:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8016a68:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8016a6c:	d203      	bcs.n	8016a76 <rcutils_string_map_reserve+0x82>
 8016a6e:	eb02 0c07 	add.w	ip, r2, r7
 8016a72:	4566      	cmp	r6, ip
 8016a74:	d322      	bcc.n	8016abc <rcutils_string_map_reserve+0xc8>
 8016a76:	1ae3      	subs	r3, r4, r3
 8016a78:	009a      	lsls	r2, r3, #2
 8016a7a:	4670      	mov	r0, lr
 8016a7c:	2100      	movs	r1, #0
 8016a7e:	9201      	str	r2, [sp, #4]
 8016a80:	f002 fec8 	bl	8019814 <memset>
 8016a84:	9a01      	ldr	r2, [sp, #4]
 8016a86:	2100      	movs	r1, #0
 8016a88:	4630      	mov	r0, r6
 8016a8a:	f002 fec3 	bl	8019814 <memset>
 8016a8e:	e00a      	b.n	8016aa6 <rcutils_string_map_reserve+0xb2>
 8016a90:	694f      	ldr	r7, [r1, #20]
 8016a92:	6808      	ldr	r0, [r1, #0]
 8016a94:	4631      	mov	r1, r6
 8016a96:	47b8      	blx	r7
 8016a98:	682b      	ldr	r3, [r5, #0]
 8016a9a:	4631      	mov	r1, r6
 8016a9c:	6858      	ldr	r0, [r3, #4]
 8016a9e:	601c      	str	r4, [r3, #0]
 8016aa0:	47b8      	blx	r7
 8016aa2:	682d      	ldr	r5, [r5, #0]
 8016aa4:	606c      	str	r4, [r5, #4]
 8016aa6:	2000      	movs	r0, #0
 8016aa8:	60ac      	str	r4, [r5, #8]
 8016aaa:	b002      	add	sp, #8
 8016aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ab0:	2000      	movs	r0, #0
 8016ab2:	e7af      	b.n	8016a14 <rcutils_string_map_reserve+0x20>
 8016ab4:	200a      	movs	r0, #10
 8016ab6:	e7ad      	b.n	8016a14 <rcutils_string_map_reserve+0x20>
 8016ab8:	200b      	movs	r0, #11
 8016aba:	4770      	bx	lr
 8016abc:	1f0b      	subs	r3, r1, #4
 8016abe:	4418      	add	r0, r3
 8016ac0:	4413      	add	r3, r2
 8016ac2:	3a04      	subs	r2, #4
 8016ac4:	4417      	add	r7, r2
 8016ac6:	2200      	movs	r2, #0
 8016ac8:	f843 2f04 	str.w	r2, [r3, #4]!
 8016acc:	42bb      	cmp	r3, r7
 8016ace:	f840 2f04 	str.w	r2, [r0, #4]!
 8016ad2:	d1f9      	bne.n	8016ac8 <rcutils_string_map_reserve+0xd4>
 8016ad4:	e7e7      	b.n	8016aa6 <rcutils_string_map_reserve+0xb2>
 8016ad6:	bf00      	nop

08016ad8 <rcutils_string_map_init>:
 8016ad8:	b082      	sub	sp, #8
 8016ada:	b570      	push	{r4, r5, r6, lr}
 8016adc:	ac04      	add	r4, sp, #16
 8016ade:	e884 000c 	stmia.w	r4, {r2, r3}
 8016ae2:	b380      	cbz	r0, 8016b46 <rcutils_string_map_init+0x6e>
 8016ae4:	6806      	ldr	r6, [r0, #0]
 8016ae6:	4604      	mov	r4, r0
 8016ae8:	b12e      	cbz	r6, 8016af6 <rcutils_string_map_init+0x1e>
 8016aea:	251e      	movs	r5, #30
 8016aec:	4628      	mov	r0, r5
 8016aee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016af2:	b002      	add	sp, #8
 8016af4:	4770      	bx	lr
 8016af6:	a804      	add	r0, sp, #16
 8016af8:	460d      	mov	r5, r1
 8016afa:	f7f7 fb2d 	bl	800e158 <rcutils_allocator_is_valid>
 8016afe:	b310      	cbz	r0, 8016b46 <rcutils_string_map_init+0x6e>
 8016b00:	9b04      	ldr	r3, [sp, #16]
 8016b02:	9908      	ldr	r1, [sp, #32]
 8016b04:	2024      	movs	r0, #36	@ 0x24
 8016b06:	4798      	blx	r3
 8016b08:	6020      	str	r0, [r4, #0]
 8016b0a:	b310      	cbz	r0, 8016b52 <rcutils_string_map_init+0x7a>
 8016b0c:	f10d 0e10 	add.w	lr, sp, #16
 8016b10:	e9c0 6600 	strd	r6, r6, [r0]
 8016b14:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8016b18:	f100 0c10 	add.w	ip, r0, #16
 8016b1c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016b20:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016b24:	f8de 3000 	ldr.w	r3, [lr]
 8016b28:	f8cc 3000 	str.w	r3, [ip]
 8016b2c:	4629      	mov	r1, r5
 8016b2e:	4620      	mov	r0, r4
 8016b30:	f7ff ff60 	bl	80169f4 <rcutils_string_map_reserve>
 8016b34:	4605      	mov	r5, r0
 8016b36:	2800      	cmp	r0, #0
 8016b38:	d0d8      	beq.n	8016aec <rcutils_string_map_init+0x14>
 8016b3a:	9b05      	ldr	r3, [sp, #20]
 8016b3c:	9908      	ldr	r1, [sp, #32]
 8016b3e:	6820      	ldr	r0, [r4, #0]
 8016b40:	4798      	blx	r3
 8016b42:	6026      	str	r6, [r4, #0]
 8016b44:	e7d2      	b.n	8016aec <rcutils_string_map_init+0x14>
 8016b46:	250b      	movs	r5, #11
 8016b48:	4628      	mov	r0, r5
 8016b4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016b4e:	b002      	add	sp, #8
 8016b50:	4770      	bx	lr
 8016b52:	250a      	movs	r5, #10
 8016b54:	e7ca      	b.n	8016aec <rcutils_string_map_init+0x14>
 8016b56:	bf00      	nop

08016b58 <rcutils_string_map_fini>:
 8016b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b5c:	b082      	sub	sp, #8
 8016b5e:	2800      	cmp	r0, #0
 8016b60:	d03a      	beq.n	8016bd8 <rcutils_string_map_fini+0x80>
 8016b62:	6804      	ldr	r4, [r0, #0]
 8016b64:	4606      	mov	r6, r0
 8016b66:	2c00      	cmp	r4, #0
 8016b68:	d032      	beq.n	8016bd0 <rcutils_string_map_fini+0x78>
 8016b6a:	68a3      	ldr	r3, [r4, #8]
 8016b6c:	b32b      	cbz	r3, 8016bba <rcutils_string_map_fini+0x62>
 8016b6e:	2500      	movs	r5, #0
 8016b70:	6822      	ldr	r2, [r4, #0]
 8016b72:	462f      	mov	r7, r5
 8016b74:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8016b78:	b1e0      	cbz	r0, 8016bb4 <rcutils_string_map_fini+0x5c>
 8016b7a:	6a21      	ldr	r1, [r4, #32]
 8016b7c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8016b80:	9101      	str	r1, [sp, #4]
 8016b82:	47c0      	blx	r8
 8016b84:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016b88:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8016b8c:	9901      	ldr	r1, [sp, #4]
 8016b8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016b92:	47c0      	blx	r8
 8016b94:	68e3      	ldr	r3, [r4, #12]
 8016b96:	6862      	ldr	r2, [r4, #4]
 8016b98:	3b01      	subs	r3, #1
 8016b9a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8016b9e:	60e3      	str	r3, [r4, #12]
 8016ba0:	6834      	ldr	r4, [r6, #0]
 8016ba2:	68a3      	ldr	r3, [r4, #8]
 8016ba4:	3501      	adds	r5, #1
 8016ba6:	429d      	cmp	r5, r3
 8016ba8:	d207      	bcs.n	8016bba <rcutils_string_map_fini+0x62>
 8016baa:	6822      	ldr	r2, [r4, #0]
 8016bac:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8016bb0:	2800      	cmp	r0, #0
 8016bb2:	d1e2      	bne.n	8016b7a <rcutils_string_map_fini+0x22>
 8016bb4:	3501      	adds	r5, #1
 8016bb6:	429d      	cmp	r5, r3
 8016bb8:	d3dc      	bcc.n	8016b74 <rcutils_string_map_fini+0x1c>
 8016bba:	2100      	movs	r1, #0
 8016bbc:	4630      	mov	r0, r6
 8016bbe:	f7ff ff19 	bl	80169f4 <rcutils_string_map_reserve>
 8016bc2:	4604      	mov	r4, r0
 8016bc4:	b920      	cbnz	r0, 8016bd0 <rcutils_string_map_fini+0x78>
 8016bc6:	6830      	ldr	r0, [r6, #0]
 8016bc8:	6943      	ldr	r3, [r0, #20]
 8016bca:	6a01      	ldr	r1, [r0, #32]
 8016bcc:	4798      	blx	r3
 8016bce:	6034      	str	r4, [r6, #0]
 8016bd0:	4620      	mov	r0, r4
 8016bd2:	b002      	add	sp, #8
 8016bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bd8:	240b      	movs	r4, #11
 8016bda:	4620      	mov	r0, r4
 8016bdc:	b002      	add	sp, #8
 8016bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016be2:	bf00      	nop

08016be4 <rcutils_string_map_getn>:
 8016be4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016be8:	b300      	cbz	r0, 8016c2c <rcutils_string_map_getn+0x48>
 8016bea:	6807      	ldr	r7, [r0, #0]
 8016bec:	b1ff      	cbz	r7, 8016c2e <rcutils_string_map_getn+0x4a>
 8016bee:	4688      	mov	r8, r1
 8016bf0:	b1e1      	cbz	r1, 8016c2c <rcutils_string_map_getn+0x48>
 8016bf2:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8016bf6:	683e      	ldr	r6, [r7, #0]
 8016bf8:	f1ba 0f00 	cmp.w	sl, #0
 8016bfc:	d016      	beq.n	8016c2c <rcutils_string_map_getn+0x48>
 8016bfe:	4691      	mov	r9, r2
 8016c00:	3e04      	subs	r6, #4
 8016c02:	2400      	movs	r4, #0
 8016c04:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8016c08:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8016c0c:	4628      	mov	r0, r5
 8016c0e:	3401      	adds	r4, #1
 8016c10:	b155      	cbz	r5, 8016c28 <rcutils_string_map_getn+0x44>
 8016c12:	f7e9 fb07 	bl	8000224 <strlen>
 8016c16:	4548      	cmp	r0, r9
 8016c18:	4602      	mov	r2, r0
 8016c1a:	4629      	mov	r1, r5
 8016c1c:	bf38      	it	cc
 8016c1e:	464a      	movcc	r2, r9
 8016c20:	4640      	mov	r0, r8
 8016c22:	f002 fe0c 	bl	801983e <strncmp>
 8016c26:	b128      	cbz	r0, 8016c34 <rcutils_string_map_getn+0x50>
 8016c28:	45a2      	cmp	sl, r4
 8016c2a:	d1eb      	bne.n	8016c04 <rcutils_string_map_getn+0x20>
 8016c2c:	2700      	movs	r7, #0
 8016c2e:	4638      	mov	r0, r7
 8016c30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	f853 700b 	ldr.w	r7, [r3, fp]
 8016c3a:	4638      	mov	r0, r7
 8016c3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016c40 <rmw_get_zero_initialized_context>:
 8016c40:	b510      	push	{r4, lr}
 8016c42:	4604      	mov	r4, r0
 8016c44:	3010      	adds	r0, #16
 8016c46:	f7f7 fd2b 	bl	800e6a0 <rmw_get_zero_initialized_init_options>
 8016c4a:	2300      	movs	r3, #0
 8016c4c:	2000      	movs	r0, #0
 8016c4e:	2100      	movs	r1, #0
 8016c50:	e9c4 0100 	strd	r0, r1, [r4]
 8016c54:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8016c58:	60a3      	str	r3, [r4, #8]
 8016c5a:	4620      	mov	r0, r4
 8016c5c:	bd10      	pop	{r4, pc}
 8016c5e:	bf00      	nop

08016c60 <rmw_time_equal>:
 8016c60:	b4f0      	push	{r4, r5, r6, r7}
 8016c62:	b084      	sub	sp, #16
 8016c64:	ac04      	add	r4, sp, #16
 8016c66:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8016c6a:	4603      	mov	r3, r0
 8016c6c:	4924      	ldr	r1, [pc, #144]	@ (8016d00 <rmw_time_equal+0xa0>)
 8016c6e:	9e03      	ldr	r6, [sp, #12]
 8016c70:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8016c74:	2202      	movs	r2, #2
 8016c76:	4299      	cmp	r1, r3
 8016c78:	41aa      	sbcs	r2, r5
 8016c7a:	d330      	bcc.n	8016cde <rmw_time_equal+0x7e>
 8016c7c:	4c21      	ldr	r4, [pc, #132]	@ (8016d04 <rmw_time_equal+0xa4>)
 8016c7e:	fba3 3204 	umull	r3, r2, r3, r4
 8016c82:	fb04 2205 	mla	r2, r4, r5, r2
 8016c86:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016c8a:	43dd      	mvns	r5, r3
 8016c8c:	1a8c      	subs	r4, r1, r2
 8016c8e:	4285      	cmp	r5, r0
 8016c90:	41b4      	sbcs	r4, r6
 8016c92:	d332      	bcc.n	8016cfa <rmw_time_equal+0x9a>
 8016c94:	eb10 0c03 	adds.w	ip, r0, r3
 8016c98:	eb42 0106 	adc.w	r1, r2, r6
 8016c9c:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8016ca0:	4817      	ldr	r0, [pc, #92]	@ (8016d00 <rmw_time_equal+0xa0>)
 8016ca2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8016ca4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8016ca6:	2202      	movs	r2, #2
 8016ca8:	4298      	cmp	r0, r3
 8016caa:	41b2      	sbcs	r2, r6
 8016cac:	d31c      	bcc.n	8016ce8 <rmw_time_equal+0x88>
 8016cae:	4c15      	ldr	r4, [pc, #84]	@ (8016d04 <rmw_time_equal+0xa4>)
 8016cb0:	fba3 3204 	umull	r3, r2, r3, r4
 8016cb4:	fb04 2206 	mla	r2, r4, r6, r2
 8016cb8:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8016cbc:	43de      	mvns	r6, r3
 8016cbe:	1a84      	subs	r4, r0, r2
 8016cc0:	42ae      	cmp	r6, r5
 8016cc2:	41bc      	sbcs	r4, r7
 8016cc4:	d315      	bcc.n	8016cf2 <rmw_time_equal+0x92>
 8016cc6:	195b      	adds	r3, r3, r5
 8016cc8:	eb42 0207 	adc.w	r2, r2, r7
 8016ccc:	428a      	cmp	r2, r1
 8016cce:	bf08      	it	eq
 8016cd0:	4563      	cmpeq	r3, ip
 8016cd2:	bf0c      	ite	eq
 8016cd4:	2001      	moveq	r0, #1
 8016cd6:	2000      	movne	r0, #0
 8016cd8:	b004      	add	sp, #16
 8016cda:	bcf0      	pop	{r4, r5, r6, r7}
 8016cdc:	4770      	bx	lr
 8016cde:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8016ce2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016ce6:	e7d9      	b.n	8016c9c <rmw_time_equal+0x3c>
 8016ce8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016cec:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8016cf0:	e7ec      	b.n	8016ccc <rmw_time_equal+0x6c>
 8016cf2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016cf6:	4602      	mov	r2, r0
 8016cf8:	e7e8      	b.n	8016ccc <rmw_time_equal+0x6c>
 8016cfa:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8016cfe:	e7cd      	b.n	8016c9c <rmw_time_equal+0x3c>
 8016d00:	25c17d04 	.word	0x25c17d04
 8016d04:	3b9aca00 	.word	0x3b9aca00

08016d08 <rmw_time_total_nsec>:
 8016d08:	b470      	push	{r4, r5, r6}
 8016d0a:	b085      	sub	sp, #20
 8016d0c:	ac04      	add	r4, sp, #16
 8016d0e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8016d12:	4603      	mov	r3, r0
 8016d14:	4912      	ldr	r1, [pc, #72]	@ (8016d60 <rmw_time_total_nsec+0x58>)
 8016d16:	9e03      	ldr	r6, [sp, #12]
 8016d18:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8016d1c:	2202      	movs	r2, #2
 8016d1e:	4299      	cmp	r1, r3
 8016d20:	41aa      	sbcs	r2, r5
 8016d22:	d311      	bcc.n	8016d48 <rmw_time_total_nsec+0x40>
 8016d24:	4c0f      	ldr	r4, [pc, #60]	@ (8016d64 <rmw_time_total_nsec+0x5c>)
 8016d26:	fba3 3204 	umull	r3, r2, r3, r4
 8016d2a:	fb04 2205 	mla	r2, r4, r5, r2
 8016d2e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016d32:	43dd      	mvns	r5, r3
 8016d34:	1a8c      	subs	r4, r1, r2
 8016d36:	4285      	cmp	r5, r0
 8016d38:	41b4      	sbcs	r4, r6
 8016d3a:	d30c      	bcc.n	8016d56 <rmw_time_total_nsec+0x4e>
 8016d3c:	1818      	adds	r0, r3, r0
 8016d3e:	eb42 0106 	adc.w	r1, r2, r6
 8016d42:	b005      	add	sp, #20
 8016d44:	bc70      	pop	{r4, r5, r6}
 8016d46:	4770      	bx	lr
 8016d48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016d4c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016d50:	b005      	add	sp, #20
 8016d52:	bc70      	pop	{r4, r5, r6}
 8016d54:	4770      	bx	lr
 8016d56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016d5a:	b005      	add	sp, #20
 8016d5c:	bc70      	pop	{r4, r5, r6}
 8016d5e:	4770      	bx	lr
 8016d60:	25c17d04 	.word	0x25c17d04
 8016d64:	3b9aca00 	.word	0x3b9aca00

08016d68 <rmw_validate_full_topic_name>:
 8016d68:	2800      	cmp	r0, #0
 8016d6a:	d057      	beq.n	8016e1c <rmw_validate_full_topic_name+0xb4>
 8016d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d70:	460d      	mov	r5, r1
 8016d72:	2900      	cmp	r1, #0
 8016d74:	d054      	beq.n	8016e20 <rmw_validate_full_topic_name+0xb8>
 8016d76:	4616      	mov	r6, r2
 8016d78:	4604      	mov	r4, r0
 8016d7a:	f7e9 fa53 	bl	8000224 <strlen>
 8016d7e:	b148      	cbz	r0, 8016d94 <rmw_validate_full_topic_name+0x2c>
 8016d80:	7823      	ldrb	r3, [r4, #0]
 8016d82:	2b2f      	cmp	r3, #47	@ 0x2f
 8016d84:	d00d      	beq.n	8016da2 <rmw_validate_full_topic_name+0x3a>
 8016d86:	2302      	movs	r3, #2
 8016d88:	602b      	str	r3, [r5, #0]
 8016d8a:	b13e      	cbz	r6, 8016d9c <rmw_validate_full_topic_name+0x34>
 8016d8c:	2000      	movs	r0, #0
 8016d8e:	6030      	str	r0, [r6, #0]
 8016d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d94:	2301      	movs	r3, #1
 8016d96:	602b      	str	r3, [r5, #0]
 8016d98:	2e00      	cmp	r6, #0
 8016d9a:	d1f7      	bne.n	8016d8c <rmw_validate_full_topic_name+0x24>
 8016d9c:	2000      	movs	r0, #0
 8016d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016da2:	1e43      	subs	r3, r0, #1
 8016da4:	5ce2      	ldrb	r2, [r4, r3]
 8016da6:	2a2f      	cmp	r2, #47	@ 0x2f
 8016da8:	d03c      	beq.n	8016e24 <rmw_validate_full_topic_name+0xbc>
 8016daa:	1e63      	subs	r3, r4, #1
 8016dac:	eb03 0800 	add.w	r8, r3, r0
 8016db0:	f1c4 0e01 	rsb	lr, r4, #1
 8016db4:	eb0e 0703 	add.w	r7, lr, r3
 8016db8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8016dbc:	f021 0220 	bic.w	r2, r1, #32
 8016dc0:	3a41      	subs	r2, #65	@ 0x41
 8016dc2:	2a19      	cmp	r2, #25
 8016dc4:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8016dc8:	d90b      	bls.n	8016de2 <rmw_validate_full_topic_name+0x7a>
 8016dca:	295f      	cmp	r1, #95	@ 0x5f
 8016dcc:	d009      	beq.n	8016de2 <rmw_validate_full_topic_name+0x7a>
 8016dce:	f1bc 0f0a 	cmp.w	ip, #10
 8016dd2:	d906      	bls.n	8016de2 <rmw_validate_full_topic_name+0x7a>
 8016dd4:	2304      	movs	r3, #4
 8016dd6:	602b      	str	r3, [r5, #0]
 8016dd8:	2e00      	cmp	r6, #0
 8016dda:	d0df      	beq.n	8016d9c <rmw_validate_full_topic_name+0x34>
 8016ddc:	6037      	str	r7, [r6, #0]
 8016dde:	2000      	movs	r0, #0
 8016de0:	e7d6      	b.n	8016d90 <rmw_validate_full_topic_name+0x28>
 8016de2:	4543      	cmp	r3, r8
 8016de4:	d1e6      	bne.n	8016db4 <rmw_validate_full_topic_name+0x4c>
 8016de6:	4f1a      	ldr	r7, [pc, #104]	@ (8016e50 <rmw_validate_full_topic_name+0xe8>)
 8016de8:	2301      	movs	r3, #1
 8016dea:	e004      	b.n	8016df6 <rmw_validate_full_topic_name+0x8e>
 8016dec:	4298      	cmp	r0, r3
 8016dee:	f104 0401 	add.w	r4, r4, #1
 8016df2:	d91c      	bls.n	8016e2e <rmw_validate_full_topic_name+0xc6>
 8016df4:	4613      	mov	r3, r2
 8016df6:	4298      	cmp	r0, r3
 8016df8:	f103 0201 	add.w	r2, r3, #1
 8016dfc:	d0f6      	beq.n	8016dec <rmw_validate_full_topic_name+0x84>
 8016dfe:	7821      	ldrb	r1, [r4, #0]
 8016e00:	292f      	cmp	r1, #47	@ 0x2f
 8016e02:	d1f3      	bne.n	8016dec <rmw_validate_full_topic_name+0x84>
 8016e04:	7861      	ldrb	r1, [r4, #1]
 8016e06:	292f      	cmp	r1, #47	@ 0x2f
 8016e08:	d01c      	beq.n	8016e44 <rmw_validate_full_topic_name+0xdc>
 8016e0a:	5dc9      	ldrb	r1, [r1, r7]
 8016e0c:	0749      	lsls	r1, r1, #29
 8016e0e:	d5ed      	bpl.n	8016dec <rmw_validate_full_topic_name+0x84>
 8016e10:	2206      	movs	r2, #6
 8016e12:	602a      	str	r2, [r5, #0]
 8016e14:	2e00      	cmp	r6, #0
 8016e16:	d0c1      	beq.n	8016d9c <rmw_validate_full_topic_name+0x34>
 8016e18:	6033      	str	r3, [r6, #0]
 8016e1a:	e7bf      	b.n	8016d9c <rmw_validate_full_topic_name+0x34>
 8016e1c:	200b      	movs	r0, #11
 8016e1e:	4770      	bx	lr
 8016e20:	200b      	movs	r0, #11
 8016e22:	e7b5      	b.n	8016d90 <rmw_validate_full_topic_name+0x28>
 8016e24:	2203      	movs	r2, #3
 8016e26:	602a      	str	r2, [r5, #0]
 8016e28:	2e00      	cmp	r6, #0
 8016e2a:	d1f5      	bne.n	8016e18 <rmw_validate_full_topic_name+0xb0>
 8016e2c:	e7b6      	b.n	8016d9c <rmw_validate_full_topic_name+0x34>
 8016e2e:	28f7      	cmp	r0, #247	@ 0xf7
 8016e30:	d802      	bhi.n	8016e38 <rmw_validate_full_topic_name+0xd0>
 8016e32:	2000      	movs	r0, #0
 8016e34:	6028      	str	r0, [r5, #0]
 8016e36:	e7ab      	b.n	8016d90 <rmw_validate_full_topic_name+0x28>
 8016e38:	2307      	movs	r3, #7
 8016e3a:	602b      	str	r3, [r5, #0]
 8016e3c:	2e00      	cmp	r6, #0
 8016e3e:	d0ad      	beq.n	8016d9c <rmw_validate_full_topic_name+0x34>
 8016e40:	23f6      	movs	r3, #246	@ 0xf6
 8016e42:	e7e9      	b.n	8016e18 <rmw_validate_full_topic_name+0xb0>
 8016e44:	2205      	movs	r2, #5
 8016e46:	602a      	str	r2, [r5, #0]
 8016e48:	2e00      	cmp	r6, #0
 8016e4a:	d1e5      	bne.n	8016e18 <rmw_validate_full_topic_name+0xb0>
 8016e4c:	e7a6      	b.n	8016d9c <rmw_validate_full_topic_name+0x34>
 8016e4e:	bf00      	nop
 8016e50:	0801b7d7 	.word	0x0801b7d7

08016e54 <on_status>:
 8016e54:	b082      	sub	sp, #8
 8016e56:	b002      	add	sp, #8
 8016e58:	4770      	bx	lr
 8016e5a:	bf00      	nop

08016e5c <on_topic>:
 8016e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e60:	4a22      	ldr	r2, [pc, #136]	@ (8016eec <on_topic+0x90>)
 8016e62:	b094      	sub	sp, #80	@ 0x50
 8016e64:	6812      	ldr	r2, [r2, #0]
 8016e66:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8016e68:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8016e6c:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8016e70:	b3c2      	cbz	r2, 8016ee4 <on_topic+0x88>
 8016e72:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8016e76:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8016e7a:	e001      	b.n	8016e80 <on_topic+0x24>
 8016e7c:	6852      	ldr	r2, [r2, #4]
 8016e7e:	b38a      	cbz	r2, 8016ee4 <on_topic+0x88>
 8016e80:	6894      	ldr	r4, [r2, #8]
 8016e82:	8aa3      	ldrh	r3, [r4, #20]
 8016e84:	428b      	cmp	r3, r1
 8016e86:	d1f9      	bne.n	8016e7c <on_topic+0x20>
 8016e88:	7da3      	ldrb	r3, [r4, #22]
 8016e8a:	4283      	cmp	r3, r0
 8016e8c:	d1f6      	bne.n	8016e7c <on_topic+0x20>
 8016e8e:	2248      	movs	r2, #72	@ 0x48
 8016e90:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8016e94:	4668      	mov	r0, sp
 8016e96:	f002 fd86 	bl	80199a6 <memcpy>
 8016e9a:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8016e9e:	cb0c      	ldmia	r3, {r2, r3}
 8016ea0:	4620      	mov	r0, r4
 8016ea2:	f7f8 ff09 	bl	800fcb8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016ea6:	4607      	mov	r7, r0
 8016ea8:	b1e0      	cbz	r0, 8016ee4 <on_topic+0x88>
 8016eaa:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8016eae:	4632      	mov	r2, r6
 8016eb0:	4628      	mov	r0, r5
 8016eb2:	f108 0110 	add.w	r1, r8, #16
 8016eb6:	f7f9 fc83 	bl	80107c0 <ucdr_deserialize_array_uint8_t>
 8016eba:	b930      	cbnz	r0, 8016eca <on_topic+0x6e>
 8016ebc:	480c      	ldr	r0, [pc, #48]	@ (8016ef0 <on_topic+0x94>)
 8016ebe:	4639      	mov	r1, r7
 8016ec0:	b014      	add	sp, #80	@ 0x50
 8016ec2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016ec6:	f000 b8bd 	b.w	8017044 <put_memory>
 8016eca:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8016ece:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8016ed2:	f000 fca7 	bl	8017824 <rmw_uros_epoch_nanos>
 8016ed6:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8016eda:	2305      	movs	r3, #5
 8016edc:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016ee0:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8016ee4:	b014      	add	sp, #80	@ 0x50
 8016ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016eea:	bf00      	nop
 8016eec:	2001189c 	.word	0x2001189c
 8016ef0:	2001188c 	.word	0x2001188c

08016ef4 <on_request>:
 8016ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ef8:	4823      	ldr	r0, [pc, #140]	@ (8016f88 <on_request+0x94>)
 8016efa:	b094      	sub	sp, #80	@ 0x50
 8016efc:	6800      	ldr	r0, [r0, #0]
 8016efe:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8016f00:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8016f04:	9113      	str	r1, [sp, #76]	@ 0x4c
 8016f06:	2800      	cmp	r0, #0
 8016f08:	d03b      	beq.n	8016f82 <on_request+0x8e>
 8016f0a:	461d      	mov	r5, r3
 8016f0c:	e001      	b.n	8016f12 <on_request+0x1e>
 8016f0e:	6840      	ldr	r0, [r0, #4]
 8016f10:	b3b8      	cbz	r0, 8016f82 <on_request+0x8e>
 8016f12:	6884      	ldr	r4, [r0, #8]
 8016f14:	8b21      	ldrh	r1, [r4, #24]
 8016f16:	4291      	cmp	r1, r2
 8016f18:	d1f9      	bne.n	8016f0e <on_request+0x1a>
 8016f1a:	2248      	movs	r2, #72	@ 0x48
 8016f1c:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8016f20:	4668      	mov	r0, sp
 8016f22:	f002 fd40 	bl	80199a6 <memcpy>
 8016f26:	f104 0320 	add.w	r3, r4, #32
 8016f2a:	cb0c      	ldmia	r3, {r2, r3}
 8016f2c:	4620      	mov	r0, r4
 8016f2e:	f7f8 fec3 	bl	800fcb8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016f32:	4680      	mov	r8, r0
 8016f34:	b328      	cbz	r0, 8016f82 <on_request+0x8e>
 8016f36:	4638      	mov	r0, r7
 8016f38:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8016f3c:	4632      	mov	r2, r6
 8016f3e:	f107 0110 	add.w	r1, r7, #16
 8016f42:	f7f9 fc3d 	bl	80107c0 <ucdr_deserialize_array_uint8_t>
 8016f46:	b930      	cbnz	r0, 8016f56 <on_request+0x62>
 8016f48:	4810      	ldr	r0, [pc, #64]	@ (8016f8c <on_request+0x98>)
 8016f4a:	4641      	mov	r1, r8
 8016f4c:	b014      	add	sp, #80	@ 0x50
 8016f4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016f52:	f000 b877 	b.w	8017044 <put_memory>
 8016f56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016f58:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8016f5c:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8016f60:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8016f64:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016f68:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016f6c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016f70:	f000 fc58 	bl	8017824 <rmw_uros_epoch_nanos>
 8016f74:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8016f78:	2303      	movs	r3, #3
 8016f7a:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016f7e:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8016f82:	b014      	add	sp, #80	@ 0x50
 8016f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f88:	2001186c 	.word	0x2001186c
 8016f8c:	2001188c 	.word	0x2001188c

08016f90 <on_reply>:
 8016f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f94:	4821      	ldr	r0, [pc, #132]	@ (801701c <on_reply+0x8c>)
 8016f96:	b094      	sub	sp, #80	@ 0x50
 8016f98:	6800      	ldr	r0, [r0, #0]
 8016f9a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8016f9c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8016fa0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8016fa2:	b3b8      	cbz	r0, 8017014 <on_reply+0x84>
 8016fa4:	461d      	mov	r5, r3
 8016fa6:	e001      	b.n	8016fac <on_reply+0x1c>
 8016fa8:	6840      	ldr	r0, [r0, #4]
 8016faa:	b398      	cbz	r0, 8017014 <on_reply+0x84>
 8016fac:	6884      	ldr	r4, [r0, #8]
 8016fae:	8b21      	ldrh	r1, [r4, #24]
 8016fb0:	4291      	cmp	r1, r2
 8016fb2:	d1f9      	bne.n	8016fa8 <on_reply+0x18>
 8016fb4:	2248      	movs	r2, #72	@ 0x48
 8016fb6:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8016fba:	4668      	mov	r0, sp
 8016fbc:	f002 fcf3 	bl	80199a6 <memcpy>
 8016fc0:	f104 0320 	add.w	r3, r4, #32
 8016fc4:	cb0c      	ldmia	r3, {r2, r3}
 8016fc6:	4620      	mov	r0, r4
 8016fc8:	f7f8 fe76 	bl	800fcb8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016fcc:	4680      	mov	r8, r0
 8016fce:	b308      	cbz	r0, 8017014 <on_reply+0x84>
 8016fd0:	4638      	mov	r0, r7
 8016fd2:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8016fd6:	4632      	mov	r2, r6
 8016fd8:	f107 0110 	add.w	r1, r7, #16
 8016fdc:	f7f9 fbf0 	bl	80107c0 <ucdr_deserialize_array_uint8_t>
 8016fe0:	b930      	cbnz	r0, 8016ff0 <on_reply+0x60>
 8016fe2:	480f      	ldr	r0, [pc, #60]	@ (8017020 <on_reply+0x90>)
 8016fe4:	4641      	mov	r1, r8
 8016fe6:	b014      	add	sp, #80	@ 0x50
 8016fe8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016fec:	f000 b82a 	b.w	8017044 <put_memory>
 8016ff0:	2200      	movs	r2, #0
 8016ff2:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8016ff6:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8016ffa:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8016ffe:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8017002:	f000 fc0f 	bl	8017824 <rmw_uros_epoch_nanos>
 8017006:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801700a:	2304      	movs	r3, #4
 801700c:	e942 0102 	strd	r0, r1, [r2, #-8]
 8017010:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8017014:	b014      	add	sp, #80	@ 0x50
 8017016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801701a:	bf00      	nop
 801701c:	2000cf7c 	.word	0x2000cf7c
 8017020:	2001188c 	.word	0x2001188c

08017024 <get_memory>:
 8017024:	4603      	mov	r3, r0
 8017026:	6840      	ldr	r0, [r0, #4]
 8017028:	b158      	cbz	r0, 8017042 <get_memory+0x1e>
 801702a:	6842      	ldr	r2, [r0, #4]
 801702c:	605a      	str	r2, [r3, #4]
 801702e:	b10a      	cbz	r2, 8017034 <get_memory+0x10>
 8017030:	2100      	movs	r1, #0
 8017032:	6011      	str	r1, [r2, #0]
 8017034:	681a      	ldr	r2, [r3, #0]
 8017036:	6042      	str	r2, [r0, #4]
 8017038:	b102      	cbz	r2, 801703c <get_memory+0x18>
 801703a:	6010      	str	r0, [r2, #0]
 801703c:	2200      	movs	r2, #0
 801703e:	6002      	str	r2, [r0, #0]
 8017040:	6018      	str	r0, [r3, #0]
 8017042:	4770      	bx	lr

08017044 <put_memory>:
 8017044:	680b      	ldr	r3, [r1, #0]
 8017046:	b10b      	cbz	r3, 801704c <put_memory+0x8>
 8017048:	684a      	ldr	r2, [r1, #4]
 801704a:	605a      	str	r2, [r3, #4]
 801704c:	684a      	ldr	r2, [r1, #4]
 801704e:	b102      	cbz	r2, 8017052 <put_memory+0xe>
 8017050:	6013      	str	r3, [r2, #0]
 8017052:	6803      	ldr	r3, [r0, #0]
 8017054:	428b      	cmp	r3, r1
 8017056:	6843      	ldr	r3, [r0, #4]
 8017058:	bf08      	it	eq
 801705a:	6002      	streq	r2, [r0, #0]
 801705c:	604b      	str	r3, [r1, #4]
 801705e:	b103      	cbz	r3, 8017062 <put_memory+0x1e>
 8017060:	6019      	str	r1, [r3, #0]
 8017062:	2300      	movs	r3, #0
 8017064:	600b      	str	r3, [r1, #0]
 8017066:	6041      	str	r1, [r0, #4]
 8017068:	4770      	bx	lr
 801706a:	bf00      	nop

0801706c <rmw_destroy_client>:
 801706c:	b570      	push	{r4, r5, r6, lr}
 801706e:	b128      	cbz	r0, 801707c <rmw_destroy_client+0x10>
 8017070:	4604      	mov	r4, r0
 8017072:	6800      	ldr	r0, [r0, #0]
 8017074:	460d      	mov	r5, r1
 8017076:	f7f8 ff95 	bl	800ffa4 <is_uxrce_rmw_identifier_valid>
 801707a:	b910      	cbnz	r0, 8017082 <rmw_destroy_client+0x16>
 801707c:	2401      	movs	r4, #1
 801707e:	4620      	mov	r0, r4
 8017080:	bd70      	pop	{r4, r5, r6, pc}
 8017082:	6863      	ldr	r3, [r4, #4]
 8017084:	2b00      	cmp	r3, #0
 8017086:	d0f9      	beq.n	801707c <rmw_destroy_client+0x10>
 8017088:	2d00      	cmp	r5, #0
 801708a:	d0f7      	beq.n	801707c <rmw_destroy_client+0x10>
 801708c:	6828      	ldr	r0, [r5, #0]
 801708e:	f7f8 ff89 	bl	800ffa4 <is_uxrce_rmw_identifier_valid>
 8017092:	2800      	cmp	r0, #0
 8017094:	d0f2      	beq.n	801707c <rmw_destroy_client+0x10>
 8017096:	686e      	ldr	r6, [r5, #4]
 8017098:	2e00      	cmp	r6, #0
 801709a:	d0ef      	beq.n	801707c <rmw_destroy_client+0x10>
 801709c:	6864      	ldr	r4, [r4, #4]
 801709e:	6932      	ldr	r2, [r6, #16]
 80170a0:	6920      	ldr	r0, [r4, #16]
 80170a2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80170a6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80170aa:	6819      	ldr	r1, [r3, #0]
 80170ac:	f7fa f920 	bl	80112f0 <uxr_buffer_cancel_data>
 80170b0:	4602      	mov	r2, r0
 80170b2:	6920      	ldr	r0, [r4, #16]
 80170b4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80170b8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80170bc:	f7f8 fef2 	bl	800fea4 <run_xrce_session>
 80170c0:	6920      	ldr	r0, [r4, #16]
 80170c2:	6932      	ldr	r2, [r6, #16]
 80170c4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80170c8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80170cc:	6819      	ldr	r1, [r3, #0]
 80170ce:	f7f9 fcdd 	bl	8010a8c <uxr_buffer_delete_entity>
 80170d2:	4602      	mov	r2, r0
 80170d4:	6920      	ldr	r0, [r4, #16]
 80170d6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80170da:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80170de:	f7f8 fee1 	bl	800fea4 <run_xrce_session>
 80170e2:	2800      	cmp	r0, #0
 80170e4:	4628      	mov	r0, r5
 80170e6:	bf14      	ite	ne
 80170e8:	2400      	movne	r4, #0
 80170ea:	2402      	moveq	r4, #2
 80170ec:	f7f8 fdc2 	bl	800fc74 <rmw_uxrce_fini_client_memory>
 80170f0:	e7c5      	b.n	801707e <rmw_destroy_client+0x12>
 80170f2:	bf00      	nop

080170f4 <rmw_get_implementation_identifier>:
 80170f4:	4b01      	ldr	r3, [pc, #4]	@ (80170fc <rmw_get_implementation_identifier+0x8>)
 80170f6:	6818      	ldr	r0, [r3, #0]
 80170f8:	4770      	bx	lr
 80170fa:	bf00      	nop
 80170fc:	0801b6a0 	.word	0x0801b6a0

08017100 <rmw_create_guard_condition>:
 8017100:	b538      	push	{r3, r4, r5, lr}
 8017102:	4605      	mov	r5, r0
 8017104:	4807      	ldr	r0, [pc, #28]	@ (8017124 <rmw_create_guard_condition+0x24>)
 8017106:	f7ff ff8d 	bl	8017024 <get_memory>
 801710a:	b148      	cbz	r0, 8017120 <rmw_create_guard_condition+0x20>
 801710c:	6884      	ldr	r4, [r0, #8]
 801710e:	2300      	movs	r3, #0
 8017110:	7423      	strb	r3, [r4, #16]
 8017112:	61e5      	str	r5, [r4, #28]
 8017114:	f7ff ffee 	bl	80170f4 <rmw_get_implementation_identifier>
 8017118:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801711c:	f104 0014 	add.w	r0, r4, #20
 8017120:	bd38      	pop	{r3, r4, r5, pc}
 8017122:	bf00      	nop
 8017124:	2001182c 	.word	0x2001182c

08017128 <rmw_destroy_guard_condition>:
 8017128:	b508      	push	{r3, lr}
 801712a:	4b08      	ldr	r3, [pc, #32]	@ (801714c <rmw_destroy_guard_condition+0x24>)
 801712c:	6819      	ldr	r1, [r3, #0]
 801712e:	b911      	cbnz	r1, 8017136 <rmw_destroy_guard_condition+0xe>
 8017130:	e00a      	b.n	8017148 <rmw_destroy_guard_condition+0x20>
 8017132:	6849      	ldr	r1, [r1, #4]
 8017134:	b141      	cbz	r1, 8017148 <rmw_destroy_guard_condition+0x20>
 8017136:	688b      	ldr	r3, [r1, #8]
 8017138:	3314      	adds	r3, #20
 801713a:	4298      	cmp	r0, r3
 801713c:	d1f9      	bne.n	8017132 <rmw_destroy_guard_condition+0xa>
 801713e:	4803      	ldr	r0, [pc, #12]	@ (801714c <rmw_destroy_guard_condition+0x24>)
 8017140:	f7ff ff80 	bl	8017044 <put_memory>
 8017144:	2000      	movs	r0, #0
 8017146:	bd08      	pop	{r3, pc}
 8017148:	2001      	movs	r0, #1
 801714a:	bd08      	pop	{r3, pc}
 801714c:	2001182c 	.word	0x2001182c

08017150 <create_topic>:
 8017150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017154:	4605      	mov	r5, r0
 8017156:	b084      	sub	sp, #16
 8017158:	4822      	ldr	r0, [pc, #136]	@ (80171e4 <create_topic+0x94>)
 801715a:	460f      	mov	r7, r1
 801715c:	4616      	mov	r6, r2
 801715e:	f7ff ff61 	bl	8017024 <get_memory>
 8017162:	4604      	mov	r4, r0
 8017164:	2800      	cmp	r0, #0
 8017166:	d039      	beq.n	80171dc <create_topic+0x8c>
 8017168:	692b      	ldr	r3, [r5, #16]
 801716a:	6884      	ldr	r4, [r0, #8]
 801716c:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 80171ec <create_topic+0x9c>
 8017170:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017174:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8017178:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 801717c:	1c42      	adds	r2, r0, #1
 801717e:	2102      	movs	r1, #2
 8017180:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8017184:	f7f9 ff46 	bl	8011014 <uxr_object_id>
 8017188:	223c      	movs	r2, #60	@ 0x3c
 801718a:	6120      	str	r0, [r4, #16]
 801718c:	4641      	mov	r1, r8
 801718e:	4638      	mov	r0, r7
 8017190:	f7f8 feee 	bl	800ff70 <generate_topic_name>
 8017194:	b1f0      	cbz	r0, 80171d4 <create_topic+0x84>
 8017196:	4f14      	ldr	r7, [pc, #80]	@ (80171e8 <create_topic+0x98>)
 8017198:	4630      	mov	r0, r6
 801719a:	2264      	movs	r2, #100	@ 0x64
 801719c:	4639      	mov	r1, r7
 801719e:	f7f8 feb7 	bl	800ff10 <generate_type_name>
 80171a2:	b1b8      	cbz	r0, 80171d4 <create_topic+0x84>
 80171a4:	6928      	ldr	r0, [r5, #16]
 80171a6:	2306      	movs	r3, #6
 80171a8:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80171ac:	f8cd 8000 	str.w	r8, [sp]
 80171b0:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80171b4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80171b8:	6811      	ldr	r1, [r2, #0]
 80171ba:	696b      	ldr	r3, [r5, #20]
 80171bc:	6922      	ldr	r2, [r4, #16]
 80171be:	f7f9 fce3 	bl	8010b88 <uxr_buffer_create_topic_bin>
 80171c2:	4602      	mov	r2, r0
 80171c4:	6928      	ldr	r0, [r5, #16]
 80171c6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80171ca:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80171ce:	f7f8 fe69 	bl	800fea4 <run_xrce_session>
 80171d2:	b918      	cbnz	r0, 80171dc <create_topic+0x8c>
 80171d4:	4620      	mov	r0, r4
 80171d6:	f7f8 fd63 	bl	800fca0 <rmw_uxrce_fini_topic_memory>
 80171da:	2400      	movs	r4, #0
 80171dc:	4620      	mov	r0, r4
 80171de:	b004      	add	sp, #16
 80171e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80171e4:	200118ac 	.word	0x200118ac
 80171e8:	20011928 	.word	0x20011928
 80171ec:	200118ec 	.word	0x200118ec

080171f0 <destroy_topic>:
 80171f0:	b538      	push	{r3, r4, r5, lr}
 80171f2:	6985      	ldr	r5, [r0, #24]
 80171f4:	b1d5      	cbz	r5, 801722c <destroy_topic+0x3c>
 80171f6:	4604      	mov	r4, r0
 80171f8:	6928      	ldr	r0, [r5, #16]
 80171fa:	6922      	ldr	r2, [r4, #16]
 80171fc:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017200:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017204:	6819      	ldr	r1, [r3, #0]
 8017206:	f7f9 fc41 	bl	8010a8c <uxr_buffer_delete_entity>
 801720a:	4602      	mov	r2, r0
 801720c:	6928      	ldr	r0, [r5, #16]
 801720e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017212:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017216:	f7f8 fe45 	bl	800fea4 <run_xrce_session>
 801721a:	2800      	cmp	r0, #0
 801721c:	4620      	mov	r0, r4
 801721e:	bf14      	ite	ne
 8017220:	2400      	movne	r4, #0
 8017222:	2402      	moveq	r4, #2
 8017224:	f7f8 fd3c 	bl	800fca0 <rmw_uxrce_fini_topic_memory>
 8017228:	4620      	mov	r0, r4
 801722a:	bd38      	pop	{r3, r4, r5, pc}
 801722c:	2401      	movs	r4, #1
 801722e:	4620      	mov	r0, r4
 8017230:	bd38      	pop	{r3, r4, r5, pc}
 8017232:	bf00      	nop

08017234 <rmw_send_request>:
 8017234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017238:	4604      	mov	r4, r0
 801723a:	6800      	ldr	r0, [r0, #0]
 801723c:	b08b      	sub	sp, #44	@ 0x2c
 801723e:	460e      	mov	r6, r1
 8017240:	4615      	mov	r5, r2
 8017242:	b128      	cbz	r0, 8017250 <rmw_send_request+0x1c>
 8017244:	4b21      	ldr	r3, [pc, #132]	@ (80172cc <rmw_send_request+0x98>)
 8017246:	6819      	ldr	r1, [r3, #0]
 8017248:	f7e8 ffe2 	bl	8000210 <strcmp>
 801724c:	2800      	cmp	r0, #0
 801724e:	d139      	bne.n	80172c4 <rmw_send_request+0x90>
 8017250:	6864      	ldr	r4, [r4, #4]
 8017252:	6963      	ldr	r3, [r4, #20]
 8017254:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8017258:	689b      	ldr	r3, [r3, #8]
 801725a:	4798      	blx	r3
 801725c:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8017260:	4630      	mov	r0, r6
 8017262:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017266:	4798      	blx	r3
 8017268:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801726c:	9000      	str	r0, [sp, #0]
 801726e:	6922      	ldr	r2, [r4, #16]
 8017270:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8017272:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8017276:	ab02      	add	r3, sp, #8
 8017278:	f7fc f8b6 	bl	80133e8 <uxr_prepare_output_stream>
 801727c:	2700      	movs	r7, #0
 801727e:	6028      	str	r0, [r5, #0]
 8017280:	606f      	str	r7, [r5, #4]
 8017282:	b198      	cbz	r0, 80172ac <rmw_send_request+0x78>
 8017284:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8017288:	a902      	add	r1, sp, #8
 801728a:	4630      	mov	r0, r6
 801728c:	4798      	blx	r3
 801728e:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8017292:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8017296:	2b01      	cmp	r3, #1
 8017298:	d00c      	beq.n	80172b4 <rmw_send_request+0x80>
 801729a:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801729c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80172a0:	f7fa fdfa 	bl	8011e98 <uxr_run_session_until_confirm_delivery>
 80172a4:	4638      	mov	r0, r7
 80172a6:	b00b      	add	sp, #44	@ 0x2c
 80172a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80172ac:	2001      	movs	r0, #1
 80172ae:	b00b      	add	sp, #44	@ 0x2c
 80172b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80172b4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80172b8:	f7fa fa2e 	bl	8011718 <uxr_flash_output_streams>
 80172bc:	4638      	mov	r0, r7
 80172be:	b00b      	add	sp, #44	@ 0x2c
 80172c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80172c4:	200c      	movs	r0, #12
 80172c6:	b00b      	add	sp, #44	@ 0x2c
 80172c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80172cc:	0801b6a0 	.word	0x0801b6a0

080172d0 <rmw_take_request>:
 80172d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80172d4:	4605      	mov	r5, r0
 80172d6:	6800      	ldr	r0, [r0, #0]
 80172d8:	b089      	sub	sp, #36	@ 0x24
 80172da:	460c      	mov	r4, r1
 80172dc:	4690      	mov	r8, r2
 80172de:	461e      	mov	r6, r3
 80172e0:	b128      	cbz	r0, 80172ee <rmw_take_request+0x1e>
 80172e2:	4b28      	ldr	r3, [pc, #160]	@ (8017384 <rmw_take_request+0xb4>)
 80172e4:	6819      	ldr	r1, [r3, #0]
 80172e6:	f7e8 ff93 	bl	8000210 <strcmp>
 80172ea:	2800      	cmp	r0, #0
 80172ec:	d146      	bne.n	801737c <rmw_take_request+0xac>
 80172ee:	b10e      	cbz	r6, 80172f4 <rmw_take_request+0x24>
 80172f0:	2300      	movs	r3, #0
 80172f2:	7033      	strb	r3, [r6, #0]
 80172f4:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80172f8:	f7f8 fd56 	bl	800fda8 <rmw_uxrce_clean_expired_static_input_buffer>
 80172fc:	4648      	mov	r0, r9
 80172fe:	f7f8 fd2b 	bl	800fd58 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017302:	4607      	mov	r7, r0
 8017304:	b3b0      	cbz	r0, 8017374 <rmw_take_request+0xa4>
 8017306:	6885      	ldr	r5, [r0, #8]
 8017308:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 801730c:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8017310:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8017314:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8017318:	7423      	strb	r3, [r4, #16]
 801731a:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 801731e:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8017322:	74e2      	strb	r2, [r4, #19]
 8017324:	f8a4 3011 	strh.w	r3, [r4, #17]
 8017328:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 801732c:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8017330:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8017334:	61e1      	str	r1, [r4, #28]
 8017336:	6162      	str	r2, [r4, #20]
 8017338:	61a3      	str	r3, [r4, #24]
 801733a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801733e:	689b      	ldr	r3, [r3, #8]
 8017340:	4798      	blx	r3
 8017342:	6844      	ldr	r4, [r0, #4]
 8017344:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8017348:	f105 0110 	add.w	r1, r5, #16
 801734c:	4668      	mov	r0, sp
 801734e:	f7f4 fcf5 	bl	800bd3c <ucdr_init_buffer>
 8017352:	68e3      	ldr	r3, [r4, #12]
 8017354:	4641      	mov	r1, r8
 8017356:	4668      	mov	r0, sp
 8017358:	4798      	blx	r3
 801735a:	4639      	mov	r1, r7
 801735c:	4604      	mov	r4, r0
 801735e:	480a      	ldr	r0, [pc, #40]	@ (8017388 <rmw_take_request+0xb8>)
 8017360:	f7ff fe70 	bl	8017044 <put_memory>
 8017364:	b106      	cbz	r6, 8017368 <rmw_take_request+0x98>
 8017366:	7034      	strb	r4, [r6, #0]
 8017368:	f084 0001 	eor.w	r0, r4, #1
 801736c:	b2c0      	uxtb	r0, r0
 801736e:	b009      	add	sp, #36	@ 0x24
 8017370:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017374:	2001      	movs	r0, #1
 8017376:	b009      	add	sp, #36	@ 0x24
 8017378:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801737c:	200c      	movs	r0, #12
 801737e:	b009      	add	sp, #36	@ 0x24
 8017380:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017384:	0801b6a0 	.word	0x0801b6a0
 8017388:	2001188c 	.word	0x2001188c

0801738c <rmw_send_response>:
 801738c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801738e:	4605      	mov	r5, r0
 8017390:	6800      	ldr	r0, [r0, #0]
 8017392:	b091      	sub	sp, #68	@ 0x44
 8017394:	460c      	mov	r4, r1
 8017396:	4616      	mov	r6, r2
 8017398:	b128      	cbz	r0, 80173a6 <rmw_send_response+0x1a>
 801739a:	4b29      	ldr	r3, [pc, #164]	@ (8017440 <rmw_send_response+0xb4>)
 801739c:	6819      	ldr	r1, [r3, #0]
 801739e:	f7e8 ff37 	bl	8000210 <strcmp>
 80173a2:	2800      	cmp	r0, #0
 80173a4:	d141      	bne.n	801742a <rmw_send_response+0x9e>
 80173a6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80173aa:	9306      	str	r3, [sp, #24]
 80173ac:	4623      	mov	r3, r4
 80173ae:	9207      	str	r2, [sp, #28]
 80173b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80173b4:	686d      	ldr	r5, [r5, #4]
 80173b6:	789b      	ldrb	r3, [r3, #2]
 80173b8:	68a1      	ldr	r1, [r4, #8]
 80173ba:	f88d 2017 	strb.w	r2, [sp, #23]
 80173be:	f88d 3016 	strb.w	r3, [sp, #22]
 80173c2:	68e2      	ldr	r2, [r4, #12]
 80173c4:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 80173c8:	6860      	ldr	r0, [r4, #4]
 80173ca:	f8ad 3014 	strh.w	r3, [sp, #20]
 80173ce:	ab02      	add	r3, sp, #8
 80173d0:	c307      	stmia	r3!, {r0, r1, r2}
 80173d2:	696b      	ldr	r3, [r5, #20]
 80173d4:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 80173d6:	68db      	ldr	r3, [r3, #12]
 80173d8:	4798      	blx	r3
 80173da:	6844      	ldr	r4, [r0, #4]
 80173dc:	4630      	mov	r0, r6
 80173de:	6923      	ldr	r3, [r4, #16]
 80173e0:	4798      	blx	r3
 80173e2:	f100 0318 	add.w	r3, r0, #24
 80173e6:	6938      	ldr	r0, [r7, #16]
 80173e8:	9300      	str	r3, [sp, #0]
 80173ea:	692a      	ldr	r2, [r5, #16]
 80173ec:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 80173ee:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80173f2:	ab08      	add	r3, sp, #32
 80173f4:	f7fb fff8 	bl	80133e8 <uxr_prepare_output_stream>
 80173f8:	b910      	cbnz	r0, 8017400 <rmw_send_response+0x74>
 80173fa:	2001      	movs	r0, #1
 80173fc:	b011      	add	sp, #68	@ 0x44
 80173fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017400:	a902      	add	r1, sp, #8
 8017402:	a808      	add	r0, sp, #32
 8017404:	f7fd f93c 	bl	8014680 <uxr_serialize_SampleIdentity>
 8017408:	68a3      	ldr	r3, [r4, #8]
 801740a:	a908      	add	r1, sp, #32
 801740c:	4630      	mov	r0, r6
 801740e:	4798      	blx	r3
 8017410:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8017414:	6938      	ldr	r0, [r7, #16]
 8017416:	2b01      	cmp	r3, #1
 8017418:	d00a      	beq.n	8017430 <rmw_send_response+0xa4>
 801741a:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 801741c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017420:	f7fa fd3a 	bl	8011e98 <uxr_run_session_until_confirm_delivery>
 8017424:	2000      	movs	r0, #0
 8017426:	b011      	add	sp, #68	@ 0x44
 8017428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801742a:	200c      	movs	r0, #12
 801742c:	b011      	add	sp, #68	@ 0x44
 801742e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017430:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017434:	f7fa f970 	bl	8011718 <uxr_flash_output_streams>
 8017438:	2000      	movs	r0, #0
 801743a:	b011      	add	sp, #68	@ 0x44
 801743c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801743e:	bf00      	nop
 8017440:	0801b6a0 	.word	0x0801b6a0

08017444 <rmw_take_response>:
 8017444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017448:	4604      	mov	r4, r0
 801744a:	6800      	ldr	r0, [r0, #0]
 801744c:	b088      	sub	sp, #32
 801744e:	4688      	mov	r8, r1
 8017450:	4617      	mov	r7, r2
 8017452:	461d      	mov	r5, r3
 8017454:	b120      	cbz	r0, 8017460 <rmw_take_response+0x1c>
 8017456:	4b1e      	ldr	r3, [pc, #120]	@ (80174d0 <rmw_take_response+0x8c>)
 8017458:	6819      	ldr	r1, [r3, #0]
 801745a:	f7e8 fed9 	bl	8000210 <strcmp>
 801745e:	bb78      	cbnz	r0, 80174c0 <rmw_take_response+0x7c>
 8017460:	b10d      	cbz	r5, 8017466 <rmw_take_response+0x22>
 8017462:	2300      	movs	r3, #0
 8017464:	702b      	strb	r3, [r5, #0]
 8017466:	6864      	ldr	r4, [r4, #4]
 8017468:	f7f8 fc9e 	bl	800fda8 <rmw_uxrce_clean_expired_static_input_buffer>
 801746c:	4620      	mov	r0, r4
 801746e:	f7f8 fc73 	bl	800fd58 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017472:	4606      	mov	r6, r0
 8017474:	b340      	cbz	r0, 80174c8 <rmw_take_response+0x84>
 8017476:	6963      	ldr	r3, [r4, #20]
 8017478:	6884      	ldr	r4, [r0, #8]
 801747a:	68db      	ldr	r3, [r3, #12]
 801747c:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8017480:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8017484:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8017488:	4798      	blx	r3
 801748a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801748e:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8017492:	f104 0110 	add.w	r1, r4, #16
 8017496:	4668      	mov	r0, sp
 8017498:	f7f4 fc50 	bl	800bd3c <ucdr_init_buffer>
 801749c:	4639      	mov	r1, r7
 801749e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80174a2:	4668      	mov	r0, sp
 80174a4:	4798      	blx	r3
 80174a6:	4631      	mov	r1, r6
 80174a8:	4604      	mov	r4, r0
 80174aa:	480a      	ldr	r0, [pc, #40]	@ (80174d4 <rmw_take_response+0x90>)
 80174ac:	f7ff fdca 	bl	8017044 <put_memory>
 80174b0:	b105      	cbz	r5, 80174b4 <rmw_take_response+0x70>
 80174b2:	702c      	strb	r4, [r5, #0]
 80174b4:	f084 0001 	eor.w	r0, r4, #1
 80174b8:	b2c0      	uxtb	r0, r0
 80174ba:	b008      	add	sp, #32
 80174bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174c0:	200c      	movs	r0, #12
 80174c2:	b008      	add	sp, #32
 80174c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174c8:	2001      	movs	r0, #1
 80174ca:	b008      	add	sp, #32
 80174cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174d0:	0801b6a0 	.word	0x0801b6a0
 80174d4:	2001188c 	.word	0x2001188c

080174d8 <rmw_trigger_guard_condition>:
 80174d8:	b160      	cbz	r0, 80174f4 <rmw_trigger_guard_condition+0x1c>
 80174da:	b510      	push	{r4, lr}
 80174dc:	4604      	mov	r4, r0
 80174de:	6800      	ldr	r0, [r0, #0]
 80174e0:	f7f8 fd60 	bl	800ffa4 <is_uxrce_rmw_identifier_valid>
 80174e4:	b908      	cbnz	r0, 80174ea <rmw_trigger_guard_condition+0x12>
 80174e6:	2001      	movs	r0, #1
 80174e8:	bd10      	pop	{r4, pc}
 80174ea:	6863      	ldr	r3, [r4, #4]
 80174ec:	2201      	movs	r2, #1
 80174ee:	741a      	strb	r2, [r3, #16]
 80174f0:	2000      	movs	r0, #0
 80174f2:	bd10      	pop	{r4, pc}
 80174f4:	2001      	movs	r0, #1
 80174f6:	4770      	bx	lr

080174f8 <rmw_wait>:
 80174f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80174fc:	b089      	sub	sp, #36	@ 0x24
 80174fe:	4605      	mov	r5, r0
 8017500:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8017502:	460e      	mov	r6, r1
 8017504:	4698      	mov	r8, r3
 8017506:	4691      	mov	r9, r2
 8017508:	2a00      	cmp	r2, #0
 801750a:	f000 810a 	beq.w	8017722 <rmw_wait+0x22a>
 801750e:	b16c      	cbz	r4, 801752c <rmw_wait+0x34>
 8017510:	4bae      	ldr	r3, [pc, #696]	@ (80177cc <rmw_wait+0x2d4>)
 8017512:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017514:	af04      	add	r7, sp, #16
 8017516:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801751a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801751e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8017522:	f7ff fb9d 	bl	8016c60 <rmw_time_equal>
 8017526:	2800      	cmp	r0, #0
 8017528:	f000 8127 	beq.w	801777a <rmw_wait+0x282>
 801752c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8017530:	f7f8 fc3a 	bl	800fda8 <rmw_uxrce_clean_expired_static_input_buffer>
 8017534:	4ba6      	ldr	r3, [pc, #664]	@ (80177d0 <rmw_wait+0x2d8>)
 8017536:	681c      	ldr	r4, [r3, #0]
 8017538:	b14c      	cbz	r4, 801754e <rmw_wait+0x56>
 801753a:	4623      	mov	r3, r4
 801753c:	2100      	movs	r1, #0
 801753e:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8017542:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017546:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801754a:	2b00      	cmp	r3, #0
 801754c:	d1f7      	bne.n	801753e <rmw_wait+0x46>
 801754e:	f1b9 0f00 	cmp.w	r9, #0
 8017552:	d011      	beq.n	8017578 <rmw_wait+0x80>
 8017554:	f8d9 1000 	ldr.w	r1, [r9]
 8017558:	b171      	cbz	r1, 8017578 <rmw_wait+0x80>
 801755a:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801755e:	2300      	movs	r3, #0
 8017560:	2001      	movs	r0, #1
 8017562:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017566:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8017568:	6912      	ldr	r2, [r2, #16]
 801756a:	3301      	adds	r3, #1
 801756c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017570:	4299      	cmp	r1, r3
 8017572:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8017576:	d1f4      	bne.n	8017562 <rmw_wait+0x6a>
 8017578:	f1b8 0f00 	cmp.w	r8, #0
 801757c:	d011      	beq.n	80175a2 <rmw_wait+0xaa>
 801757e:	f8d8 1000 	ldr.w	r1, [r8]
 8017582:	b171      	cbz	r1, 80175a2 <rmw_wait+0xaa>
 8017584:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8017588:	2300      	movs	r3, #0
 801758a:	2001      	movs	r0, #1
 801758c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017590:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8017592:	6912      	ldr	r2, [r2, #16]
 8017594:	3301      	adds	r3, #1
 8017596:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801759a:	4299      	cmp	r1, r3
 801759c:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80175a0:	d1f4      	bne.n	801758c <rmw_wait+0x94>
 80175a2:	b185      	cbz	r5, 80175c6 <rmw_wait+0xce>
 80175a4:	6829      	ldr	r1, [r5, #0]
 80175a6:	b171      	cbz	r1, 80175c6 <rmw_wait+0xce>
 80175a8:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80175ac:	2300      	movs	r3, #0
 80175ae:	2001      	movs	r0, #1
 80175b0:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80175b4:	6a12      	ldr	r2, [r2, #32]
 80175b6:	6912      	ldr	r2, [r2, #16]
 80175b8:	3301      	adds	r3, #1
 80175ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80175be:	4299      	cmp	r1, r3
 80175c0:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80175c4:	d1f4      	bne.n	80175b0 <rmw_wait+0xb8>
 80175c6:	b34c      	cbz	r4, 801761c <rmw_wait+0x124>
 80175c8:	4622      	mov	r2, r4
 80175ca:	2300      	movs	r3, #0
 80175cc:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 80175d0:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80175d4:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 80175d8:	440b      	add	r3, r1
 80175da:	b2db      	uxtb	r3, r3
 80175dc:	2a00      	cmp	r2, #0
 80175de:	d1f5      	bne.n	80175cc <rmw_wait+0xd4>
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	f000 8084 	beq.w	80176ee <rmw_wait+0x1f6>
 80175e6:	1c7a      	adds	r2, r7, #1
 80175e8:	d00d      	beq.n	8017606 <rmw_wait+0x10e>
 80175ea:	ee07 7a90 	vmov	s15, r7
 80175ee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80175f2:	ee07 3a90 	vmov	s15, r3
 80175f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80175fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80175fe:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8017602:	ee17 7a90 	vmov	r7, s15
 8017606:	68a0      	ldr	r0, [r4, #8]
 8017608:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 801760c:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8017610:	2b00      	cmp	r3, #0
 8017612:	f040 8090 	bne.w	8017736 <rmw_wait+0x23e>
 8017616:	6864      	ldr	r4, [r4, #4]
 8017618:	2c00      	cmp	r4, #0
 801761a:	d1f4      	bne.n	8017606 <rmw_wait+0x10e>
 801761c:	f1b9 0f00 	cmp.w	r9, #0
 8017620:	f000 80bc 	beq.w	801779c <rmw_wait+0x2a4>
 8017624:	f8d9 7000 	ldr.w	r7, [r9]
 8017628:	2f00      	cmp	r7, #0
 801762a:	f000 808e 	beq.w	801774a <rmw_wait+0x252>
 801762e:	2400      	movs	r4, #0
 8017630:	4627      	mov	r7, r4
 8017632:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8017636:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801763a:	f7f8 fb8d 	bl	800fd58 <rmw_uxrce_find_static_input_buffer_by_owner>
 801763e:	2800      	cmp	r0, #0
 8017640:	d05f      	beq.n	8017702 <rmw_wait+0x20a>
 8017642:	f8d9 3000 	ldr.w	r3, [r9]
 8017646:	3401      	adds	r4, #1
 8017648:	42a3      	cmp	r3, r4
 801764a:	f04f 0701 	mov.w	r7, #1
 801764e:	d8f0      	bhi.n	8017632 <rmw_wait+0x13a>
 8017650:	f1b8 0f00 	cmp.w	r8, #0
 8017654:	d012      	beq.n	801767c <rmw_wait+0x184>
 8017656:	f8d8 3000 	ldr.w	r3, [r8]
 801765a:	b17b      	cbz	r3, 801767c <rmw_wait+0x184>
 801765c:	2400      	movs	r4, #0
 801765e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017662:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017666:	f7f8 fb77 	bl	800fd58 <rmw_uxrce_find_static_input_buffer_by_owner>
 801766a:	2800      	cmp	r0, #0
 801766c:	d051      	beq.n	8017712 <rmw_wait+0x21a>
 801766e:	f8d8 3000 	ldr.w	r3, [r8]
 8017672:	3401      	adds	r4, #1
 8017674:	42a3      	cmp	r3, r4
 8017676:	f04f 0701 	mov.w	r7, #1
 801767a:	d8f0      	bhi.n	801765e <rmw_wait+0x166>
 801767c:	b1dd      	cbz	r5, 80176b6 <rmw_wait+0x1be>
 801767e:	682b      	ldr	r3, [r5, #0]
 8017680:	b1cb      	cbz	r3, 80176b6 <rmw_wait+0x1be>
 8017682:	2400      	movs	r4, #0
 8017684:	686b      	ldr	r3, [r5, #4]
 8017686:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801768a:	f7f8 fb65 	bl	800fd58 <rmw_uxrce_find_static_input_buffer_by_owner>
 801768e:	b158      	cbz	r0, 80176a8 <rmw_wait+0x1b0>
 8017690:	682b      	ldr	r3, [r5, #0]
 8017692:	3401      	adds	r4, #1
 8017694:	42a3      	cmp	r3, r4
 8017696:	d969      	bls.n	801776c <rmw_wait+0x274>
 8017698:	686b      	ldr	r3, [r5, #4]
 801769a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801769e:	2701      	movs	r7, #1
 80176a0:	f7f8 fb5a 	bl	800fd58 <rmw_uxrce_find_static_input_buffer_by_owner>
 80176a4:	2800      	cmp	r0, #0
 80176a6:	d1f3      	bne.n	8017690 <rmw_wait+0x198>
 80176a8:	e9d5 3200 	ldrd	r3, r2, [r5]
 80176ac:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80176b0:	3401      	adds	r4, #1
 80176b2:	42a3      	cmp	r3, r4
 80176b4:	d8e6      	bhi.n	8017684 <rmw_wait+0x18c>
 80176b6:	b1a6      	cbz	r6, 80176e2 <rmw_wait+0x1ea>
 80176b8:	6834      	ldr	r4, [r6, #0]
 80176ba:	b194      	cbz	r4, 80176e2 <rmw_wait+0x1ea>
 80176bc:	2300      	movs	r3, #0
 80176be:	461d      	mov	r5, r3
 80176c0:	e004      	b.n	80176cc <rmw_wait+0x1d4>
 80176c2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80176c6:	3301      	adds	r3, #1
 80176c8:	42a3      	cmp	r3, r4
 80176ca:	d00a      	beq.n	80176e2 <rmw_wait+0x1ea>
 80176cc:	6870      	ldr	r0, [r6, #4]
 80176ce:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80176d2:	7c0a      	ldrb	r2, [r1, #16]
 80176d4:	2a00      	cmp	r2, #0
 80176d6:	d0f4      	beq.n	80176c2 <rmw_wait+0x1ca>
 80176d8:	3301      	adds	r3, #1
 80176da:	42a3      	cmp	r3, r4
 80176dc:	740d      	strb	r5, [r1, #16]
 80176de:	4617      	mov	r7, r2
 80176e0:	d1f4      	bne.n	80176cc <rmw_wait+0x1d4>
 80176e2:	2f00      	cmp	r7, #0
 80176e4:	d03e      	beq.n	8017764 <rmw_wait+0x26c>
 80176e6:	2000      	movs	r0, #0
 80176e8:	b009      	add	sp, #36	@ 0x24
 80176ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80176ee:	68a0      	ldr	r0, [r4, #8]
 80176f0:	2100      	movs	r1, #0
 80176f2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80176f6:	f7fa fb95 	bl	8011e24 <uxr_run_session_timeout>
 80176fa:	6864      	ldr	r4, [r4, #4]
 80176fc:	2c00      	cmp	r4, #0
 80176fe:	d1f6      	bne.n	80176ee <rmw_wait+0x1f6>
 8017700:	e78c      	b.n	801761c <rmw_wait+0x124>
 8017702:	e9d9 3200 	ldrd	r3, r2, [r9]
 8017706:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801770a:	3401      	adds	r4, #1
 801770c:	42a3      	cmp	r3, r4
 801770e:	d890      	bhi.n	8017632 <rmw_wait+0x13a>
 8017710:	e79e      	b.n	8017650 <rmw_wait+0x158>
 8017712:	e9d8 3200 	ldrd	r3, r2, [r8]
 8017716:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801771a:	3401      	adds	r4, #1
 801771c:	429c      	cmp	r4, r3
 801771e:	d39e      	bcc.n	801765e <rmw_wait+0x166>
 8017720:	e7ac      	b.n	801767c <rmw_wait+0x184>
 8017722:	2b00      	cmp	r3, #0
 8017724:	f47f aef3 	bne.w	801750e <rmw_wait+0x16>
 8017728:	2800      	cmp	r0, #0
 801772a:	f47f aef0 	bne.w	801750e <rmw_wait+0x16>
 801772e:	2900      	cmp	r1, #0
 8017730:	f47f aeed 	bne.w	801750e <rmw_wait+0x16>
 8017734:	e7d7      	b.n	80176e6 <rmw_wait+0x1ee>
 8017736:	4639      	mov	r1, r7
 8017738:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801773c:	f7fa fb8c 	bl	8011e58 <uxr_run_session_until_data>
 8017740:	6864      	ldr	r4, [r4, #4]
 8017742:	2c00      	cmp	r4, #0
 8017744:	f47f af5f 	bne.w	8017606 <rmw_wait+0x10e>
 8017748:	e768      	b.n	801761c <rmw_wait+0x124>
 801774a:	f1b8 0f00 	cmp.w	r8, #0
 801774e:	d032      	beq.n	80177b6 <rmw_wait+0x2be>
 8017750:	f8d8 3000 	ldr.w	r3, [r8]
 8017754:	2b00      	cmp	r3, #0
 8017756:	d181      	bne.n	801765c <rmw_wait+0x164>
 8017758:	461f      	mov	r7, r3
 801775a:	2d00      	cmp	r5, #0
 801775c:	d18f      	bne.n	801767e <rmw_wait+0x186>
 801775e:	462f      	mov	r7, r5
 8017760:	2e00      	cmp	r6, #0
 8017762:	d1a9      	bne.n	80176b8 <rmw_wait+0x1c0>
 8017764:	2002      	movs	r0, #2
 8017766:	b009      	add	sp, #36	@ 0x24
 8017768:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801776c:	2e00      	cmp	r6, #0
 801776e:	d0ba      	beq.n	80176e6 <rmw_wait+0x1ee>
 8017770:	6834      	ldr	r4, [r6, #0]
 8017772:	2701      	movs	r7, #1
 8017774:	2c00      	cmp	r4, #0
 8017776:	d1a1      	bne.n	80176bc <rmw_wait+0x1c4>
 8017778:	e7b5      	b.n	80176e6 <rmw_wait+0x1ee>
 801777a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801777e:	f7ff fac3 	bl	8016d08 <rmw_time_total_nsec>
 8017782:	2300      	movs	r3, #0
 8017784:	4a13      	ldr	r2, [pc, #76]	@ (80177d4 <rmw_wait+0x2dc>)
 8017786:	f7e9 faa1 	bl	8000ccc <__aeabi_uldivmod>
 801778a:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 801778e:	f171 0300 	sbcs.w	r3, r1, #0
 8017792:	4607      	mov	r7, r0
 8017794:	bfa8      	it	ge
 8017796:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 801779a:	e6c9      	b.n	8017530 <rmw_wait+0x38>
 801779c:	f1b8 0f00 	cmp.w	r8, #0
 80177a0:	d009      	beq.n	80177b6 <rmw_wait+0x2be>
 80177a2:	f8d8 3000 	ldr.w	r3, [r8]
 80177a6:	464f      	mov	r7, r9
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	f47f af57 	bne.w	801765c <rmw_wait+0x164>
 80177ae:	2d00      	cmp	r5, #0
 80177b0:	f47f af65 	bne.w	801767e <rmw_wait+0x186>
 80177b4:	e7d3      	b.n	801775e <rmw_wait+0x266>
 80177b6:	b17d      	cbz	r5, 80177d8 <rmw_wait+0x2e0>
 80177b8:	682b      	ldr	r3, [r5, #0]
 80177ba:	4647      	mov	r7, r8
 80177bc:	2b00      	cmp	r3, #0
 80177be:	f47f af60 	bne.w	8017682 <rmw_wait+0x18a>
 80177c2:	2e00      	cmp	r6, #0
 80177c4:	f47f af78 	bne.w	80176b8 <rmw_wait+0x1c0>
 80177c8:	e7cc      	b.n	8017764 <rmw_wait+0x26c>
 80177ca:	bf00      	nop
 80177cc:	0801a6f0 	.word	0x0801a6f0
 80177d0:	2001187c 	.word	0x2001187c
 80177d4:	000f4240 	.word	0x000f4240
 80177d8:	2e00      	cmp	r6, #0
 80177da:	d0c3      	beq.n	8017764 <rmw_wait+0x26c>
 80177dc:	6834      	ldr	r4, [r6, #0]
 80177de:	462f      	mov	r7, r5
 80177e0:	2c00      	cmp	r4, #0
 80177e2:	f47f af6b 	bne.w	80176bc <rmw_wait+0x1c4>
 80177e6:	e7bd      	b.n	8017764 <rmw_wait+0x26c>

080177e8 <rmw_create_wait_set>:
 80177e8:	b508      	push	{r3, lr}
 80177ea:	4803      	ldr	r0, [pc, #12]	@ (80177f8 <rmw_create_wait_set+0x10>)
 80177ec:	f7ff fc1a 	bl	8017024 <get_memory>
 80177f0:	b108      	cbz	r0, 80177f6 <rmw_create_wait_set+0xe>
 80177f2:	6880      	ldr	r0, [r0, #8]
 80177f4:	3010      	adds	r0, #16
 80177f6:	bd08      	pop	{r3, pc}
 80177f8:	200118bc 	.word	0x200118bc

080177fc <rmw_destroy_wait_set>:
 80177fc:	b508      	push	{r3, lr}
 80177fe:	4b08      	ldr	r3, [pc, #32]	@ (8017820 <rmw_destroy_wait_set+0x24>)
 8017800:	6819      	ldr	r1, [r3, #0]
 8017802:	b911      	cbnz	r1, 801780a <rmw_destroy_wait_set+0xe>
 8017804:	e00a      	b.n	801781c <rmw_destroy_wait_set+0x20>
 8017806:	6849      	ldr	r1, [r1, #4]
 8017808:	b141      	cbz	r1, 801781c <rmw_destroy_wait_set+0x20>
 801780a:	688b      	ldr	r3, [r1, #8]
 801780c:	3310      	adds	r3, #16
 801780e:	4298      	cmp	r0, r3
 8017810:	d1f9      	bne.n	8017806 <rmw_destroy_wait_set+0xa>
 8017812:	4803      	ldr	r0, [pc, #12]	@ (8017820 <rmw_destroy_wait_set+0x24>)
 8017814:	f7ff fc16 	bl	8017044 <put_memory>
 8017818:	2000      	movs	r0, #0
 801781a:	bd08      	pop	{r3, pc}
 801781c:	2001      	movs	r0, #1
 801781e:	bd08      	pop	{r3, pc}
 8017820:	200118bc 	.word	0x200118bc

08017824 <rmw_uros_epoch_nanos>:
 8017824:	4b05      	ldr	r3, [pc, #20]	@ (801783c <rmw_uros_epoch_nanos+0x18>)
 8017826:	681b      	ldr	r3, [r3, #0]
 8017828:	b123      	cbz	r3, 8017834 <rmw_uros_epoch_nanos+0x10>
 801782a:	6898      	ldr	r0, [r3, #8]
 801782c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017830:	f7f9 bf68 	b.w	8011704 <uxr_epoch_nanos>
 8017834:	2000      	movs	r0, #0
 8017836:	2100      	movs	r1, #0
 8017838:	4770      	bx	lr
 801783a:	bf00      	nop
 801783c:	2001187c 	.word	0x2001187c

08017840 <rosidl_runtime_c__String__init>:
 8017840:	b510      	push	{r4, lr}
 8017842:	4604      	mov	r4, r0
 8017844:	b086      	sub	sp, #24
 8017846:	b170      	cbz	r0, 8017866 <rosidl_runtime_c__String__init+0x26>
 8017848:	a801      	add	r0, sp, #4
 801784a:	f7f6 fc77 	bl	800e13c <rcutils_get_default_allocator>
 801784e:	9b01      	ldr	r3, [sp, #4]
 8017850:	9905      	ldr	r1, [sp, #20]
 8017852:	2001      	movs	r0, #1
 8017854:	4798      	blx	r3
 8017856:	6020      	str	r0, [r4, #0]
 8017858:	b128      	cbz	r0, 8017866 <rosidl_runtime_c__String__init+0x26>
 801785a:	2100      	movs	r1, #0
 801785c:	2201      	movs	r2, #1
 801785e:	7001      	strb	r1, [r0, #0]
 8017860:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8017864:	4610      	mov	r0, r2
 8017866:	b006      	add	sp, #24
 8017868:	bd10      	pop	{r4, pc}
 801786a:	bf00      	nop

0801786c <rosidl_runtime_c__String__fini>:
 801786c:	b320      	cbz	r0, 80178b8 <rosidl_runtime_c__String__fini+0x4c>
 801786e:	b510      	push	{r4, lr}
 8017870:	6803      	ldr	r3, [r0, #0]
 8017872:	b086      	sub	sp, #24
 8017874:	4604      	mov	r4, r0
 8017876:	b173      	cbz	r3, 8017896 <rosidl_runtime_c__String__fini+0x2a>
 8017878:	6883      	ldr	r3, [r0, #8]
 801787a:	b1f3      	cbz	r3, 80178ba <rosidl_runtime_c__String__fini+0x4e>
 801787c:	a801      	add	r0, sp, #4
 801787e:	f7f6 fc5d 	bl	800e13c <rcutils_get_default_allocator>
 8017882:	9b02      	ldr	r3, [sp, #8]
 8017884:	9905      	ldr	r1, [sp, #20]
 8017886:	6820      	ldr	r0, [r4, #0]
 8017888:	4798      	blx	r3
 801788a:	2300      	movs	r3, #0
 801788c:	e9c4 3300 	strd	r3, r3, [r4]
 8017890:	60a3      	str	r3, [r4, #8]
 8017892:	b006      	add	sp, #24
 8017894:	bd10      	pop	{r4, pc}
 8017896:	6843      	ldr	r3, [r0, #4]
 8017898:	b9db      	cbnz	r3, 80178d2 <rosidl_runtime_c__String__fini+0x66>
 801789a:	6883      	ldr	r3, [r0, #8]
 801789c:	2b00      	cmp	r3, #0
 801789e:	d0f8      	beq.n	8017892 <rosidl_runtime_c__String__fini+0x26>
 80178a0:	4b12      	ldr	r3, [pc, #72]	@ (80178ec <rosidl_runtime_c__String__fini+0x80>)
 80178a2:	4813      	ldr	r0, [pc, #76]	@ (80178f0 <rosidl_runtime_c__String__fini+0x84>)
 80178a4:	681b      	ldr	r3, [r3, #0]
 80178a6:	2251      	movs	r2, #81	@ 0x51
 80178a8:	68db      	ldr	r3, [r3, #12]
 80178aa:	2101      	movs	r1, #1
 80178ac:	f001 fe1e 	bl	80194ec <fwrite>
 80178b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80178b4:	f001 fada 	bl	8018e6c <exit>
 80178b8:	4770      	bx	lr
 80178ba:	4b0c      	ldr	r3, [pc, #48]	@ (80178ec <rosidl_runtime_c__String__fini+0x80>)
 80178bc:	480d      	ldr	r0, [pc, #52]	@ (80178f4 <rosidl_runtime_c__String__fini+0x88>)
 80178be:	681b      	ldr	r3, [r3, #0]
 80178c0:	224c      	movs	r2, #76	@ 0x4c
 80178c2:	68db      	ldr	r3, [r3, #12]
 80178c4:	2101      	movs	r1, #1
 80178c6:	f001 fe11 	bl	80194ec <fwrite>
 80178ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80178ce:	f001 facd 	bl	8018e6c <exit>
 80178d2:	4b06      	ldr	r3, [pc, #24]	@ (80178ec <rosidl_runtime_c__String__fini+0x80>)
 80178d4:	4808      	ldr	r0, [pc, #32]	@ (80178f8 <rosidl_runtime_c__String__fini+0x8c>)
 80178d6:	681b      	ldr	r3, [r3, #0]
 80178d8:	224e      	movs	r2, #78	@ 0x4e
 80178da:	68db      	ldr	r3, [r3, #12]
 80178dc:	2101      	movs	r1, #1
 80178de:	f001 fe05 	bl	80194ec <fwrite>
 80178e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80178e6:	f001 fac1 	bl	8018e6c <exit>
 80178ea:	bf00      	nop
 80178ec:	2000091c 	.word	0x2000091c
 80178f0:	0801af70 	.word	0x0801af70
 80178f4:	0801aed0 	.word	0x0801aed0
 80178f8:	0801af20 	.word	0x0801af20

080178fc <std_msgs__msg__Header__init>:
 80178fc:	b570      	push	{r4, r5, r6, lr}
 80178fe:	4605      	mov	r5, r0
 8017900:	b1a8      	cbz	r0, 801792e <std_msgs__msg__Header__init+0x32>
 8017902:	f000 f831 	bl	8017968 <builtin_interfaces__msg__Time__init>
 8017906:	4604      	mov	r4, r0
 8017908:	b140      	cbz	r0, 801791c <std_msgs__msg__Header__init+0x20>
 801790a:	f105 0608 	add.w	r6, r5, #8
 801790e:	4630      	mov	r0, r6
 8017910:	f7ff ff96 	bl	8017840 <rosidl_runtime_c__String__init>
 8017914:	4604      	mov	r4, r0
 8017916:	b168      	cbz	r0, 8017934 <std_msgs__msg__Header__init+0x38>
 8017918:	4620      	mov	r0, r4
 801791a:	bd70      	pop	{r4, r5, r6, pc}
 801791c:	4628      	mov	r0, r5
 801791e:	f000 f827 	bl	8017970 <builtin_interfaces__msg__Time__fini>
 8017922:	f105 0008 	add.w	r0, r5, #8
 8017926:	f7ff ffa1 	bl	801786c <rosidl_runtime_c__String__fini>
 801792a:	4620      	mov	r0, r4
 801792c:	bd70      	pop	{r4, r5, r6, pc}
 801792e:	4604      	mov	r4, r0
 8017930:	4620      	mov	r0, r4
 8017932:	bd70      	pop	{r4, r5, r6, pc}
 8017934:	4628      	mov	r0, r5
 8017936:	f000 f81b 	bl	8017970 <builtin_interfaces__msg__Time__fini>
 801793a:	4630      	mov	r0, r6
 801793c:	f7ff ff96 	bl	801786c <rosidl_runtime_c__String__fini>
 8017940:	e7ea      	b.n	8017918 <std_msgs__msg__Header__init+0x1c>
 8017942:	bf00      	nop

08017944 <std_msgs__msg__Header__fini>:
 8017944:	b148      	cbz	r0, 801795a <std_msgs__msg__Header__fini+0x16>
 8017946:	b510      	push	{r4, lr}
 8017948:	4604      	mov	r4, r0
 801794a:	f000 f811 	bl	8017970 <builtin_interfaces__msg__Time__fini>
 801794e:	f104 0008 	add.w	r0, r4, #8
 8017952:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017956:	f7ff bf89 	b.w	801786c <rosidl_runtime_c__String__fini>
 801795a:	4770      	bx	lr

0801795c <std_msgs__msg__Int32__init>:
 801795c:	3800      	subs	r0, #0
 801795e:	bf18      	it	ne
 8017960:	2001      	movne	r0, #1
 8017962:	4770      	bx	lr

08017964 <std_msgs__msg__Int32__fini>:
 8017964:	4770      	bx	lr
 8017966:	bf00      	nop

08017968 <builtin_interfaces__msg__Time__init>:
 8017968:	3800      	subs	r0, #0
 801796a:	bf18      	it	ne
 801796c:	2001      	movne	r0, #1
 801796e:	4770      	bx	lr

08017970 <builtin_interfaces__msg__Time__fini>:
 8017970:	4770      	bx	lr
 8017972:	bf00      	nop

08017974 <geometry_msgs__msg__PoseWithCovariance__init>:
 8017974:	b538      	push	{r3, r4, r5, lr}
 8017976:	4604      	mov	r4, r0
 8017978:	b128      	cbz	r0, 8017986 <geometry_msgs__msg__PoseWithCovariance__init+0x12>
 801797a:	f001 f96b 	bl	8018c54 <geometry_msgs__msg__Pose__init>
 801797e:	4605      	mov	r5, r0
 8017980:	b120      	cbz	r0, 801798c <geometry_msgs__msg__PoseWithCovariance__init+0x18>
 8017982:	4628      	mov	r0, r5
 8017984:	bd38      	pop	{r3, r4, r5, pc}
 8017986:	4605      	mov	r5, r0
 8017988:	4628      	mov	r0, r5
 801798a:	bd38      	pop	{r3, r4, r5, pc}
 801798c:	4620      	mov	r0, r4
 801798e:	f001 f985 	bl	8018c9c <geometry_msgs__msg__Pose__fini>
 8017992:	4628      	mov	r0, r5
 8017994:	bd38      	pop	{r3, r4, r5, pc}
 8017996:	bf00      	nop

08017998 <geometry_msgs__msg__PoseWithCovariance__fini>:
 8017998:	b108      	cbz	r0, 801799e <geometry_msgs__msg__PoseWithCovariance__fini+0x6>
 801799a:	f001 b97f 	b.w	8018c9c <geometry_msgs__msg__Pose__fini>
 801799e:	4770      	bx	lr

080179a0 <geometry_msgs__msg__TwistWithCovariance__init>:
 80179a0:	b538      	push	{r3, r4, r5, lr}
 80179a2:	4604      	mov	r4, r0
 80179a4:	b128      	cbz	r0, 80179b2 <geometry_msgs__msg__TwistWithCovariance__init+0x12>
 80179a6:	f7f8 fcc5 	bl	8010334 <geometry_msgs__msg__Twist__init>
 80179aa:	4605      	mov	r5, r0
 80179ac:	b120      	cbz	r0, 80179b8 <geometry_msgs__msg__TwistWithCovariance__init+0x18>
 80179ae:	4628      	mov	r0, r5
 80179b0:	bd38      	pop	{r3, r4, r5, pc}
 80179b2:	4605      	mov	r5, r0
 80179b4:	4628      	mov	r0, r5
 80179b6:	bd38      	pop	{r3, r4, r5, pc}
 80179b8:	4620      	mov	r0, r4
 80179ba:	f7f8 fcdf 	bl	801037c <geometry_msgs__msg__Twist__fini>
 80179be:	4628      	mov	r0, r5
 80179c0:	bd38      	pop	{r3, r4, r5, pc}
 80179c2:	bf00      	nop

080179c4 <geometry_msgs__msg__TwistWithCovariance__fini>:
 80179c4:	b108      	cbz	r0, 80179ca <geometry_msgs__msg__TwistWithCovariance__fini+0x6>
 80179c6:	f7f8 bcd9 	b.w	801037c <geometry_msgs__msg__Twist__fini>
 80179ca:	4770      	bx	lr

080179cc <geometry_msgs__msg__Pose__rosidl_typesupport_introspection_c__Pose_init_function>:
 80179cc:	f001 b942 	b.w	8018c54 <geometry_msgs__msg__Pose__init>

080179d0 <geometry_msgs__msg__Pose__rosidl_typesupport_introspection_c__Pose_fini_function>:
 80179d0:	f001 b964 	b.w	8018c9c <geometry_msgs__msg__Pose__fini>

080179d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose>:
 80179d4:	b510      	push	{r4, lr}
 80179d6:	f001 f989 	bl	8018cec <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 80179da:	4c07      	ldr	r4, [pc, #28]	@ (80179f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x24>)
 80179dc:	60e0      	str	r0, [r4, #12]
 80179de:	f000 f815 	bl	8017a0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 80179e2:	4b06      	ldr	r3, [pc, #24]	@ (80179fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x28>)
 80179e4:	64a0      	str	r0, [r4, #72]	@ 0x48
 80179e6:	681a      	ldr	r2, [r3, #0]
 80179e8:	b10a      	cbz	r2, 80179ee <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x1a>
 80179ea:	4804      	ldr	r0, [pc, #16]	@ (80179fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x28>)
 80179ec:	bd10      	pop	{r4, pc}
 80179ee:	4a04      	ldr	r2, [pc, #16]	@ (8017a00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x2c>)
 80179f0:	4802      	ldr	r0, [pc, #8]	@ (80179fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x28>)
 80179f2:	6812      	ldr	r2, [r2, #0]
 80179f4:	601a      	str	r2, [r3, #0]
 80179f6:	bd10      	pop	{r4, pc}
 80179f8:	20000658 	.word	0x20000658
 80179fc:	200006d0 	.word	0x200006d0
 8017a00:	20000320 	.word	0x20000320

08017a04 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 8017a04:	f001 b958 	b.w	8018cb8 <geometry_msgs__msg__Quaternion__init>

08017a08 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 8017a08:	f001 b96a 	b.w	8018ce0 <geometry_msgs__msg__Quaternion__fini>

08017a0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 8017a0c:	4b04      	ldr	r3, [pc, #16]	@ (8017a20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8017a0e:	681a      	ldr	r2, [r3, #0]
 8017a10:	b10a      	cbz	r2, 8017a16 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 8017a12:	4803      	ldr	r0, [pc, #12]	@ (8017a20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8017a14:	4770      	bx	lr
 8017a16:	4a03      	ldr	r2, [pc, #12]	@ (8017a24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 8017a18:	4801      	ldr	r0, [pc, #4]	@ (8017a20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8017a1a:	6812      	ldr	r2, [r2, #0]
 8017a1c:	601a      	str	r2, [r3, #0]
 8017a1e:	4770      	bx	lr
 8017a20:	200007cc 	.word	0x200007cc
 8017a24:	20000320 	.word	0x20000320

08017a28 <get_serialized_size_geometry_msgs__msg__Pose>:
 8017a28:	b570      	push	{r4, r5, r6, lr}
 8017a2a:	4604      	mov	r4, r0
 8017a2c:	b148      	cbz	r0, 8017a42 <get_serialized_size_geometry_msgs__msg__Pose+0x1a>
 8017a2e:	460d      	mov	r5, r1
 8017a30:	f001 f96a 	bl	8018d08 <get_serialized_size_geometry_msgs__msg__Point>
 8017a34:	4606      	mov	r6, r0
 8017a36:	1829      	adds	r1, r5, r0
 8017a38:	f104 0018 	add.w	r0, r4, #24
 8017a3c:	f000 f868 	bl	8017b10 <get_serialized_size_geometry_msgs__msg__Quaternion>
 8017a40:	4430      	add	r0, r6
 8017a42:	bd70      	pop	{r4, r5, r6, pc}

08017a44 <_Pose__cdr_deserialize>:
 8017a44:	b570      	push	{r4, r5, r6, lr}
 8017a46:	460c      	mov	r4, r1
 8017a48:	b189      	cbz	r1, 8017a6e <_Pose__cdr_deserialize+0x2a>
 8017a4a:	4605      	mov	r5, r0
 8017a4c:	f001 f9e8 	bl	8018e20 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 8017a50:	6843      	ldr	r3, [r0, #4]
 8017a52:	4621      	mov	r1, r4
 8017a54:	68db      	ldr	r3, [r3, #12]
 8017a56:	4628      	mov	r0, r5
 8017a58:	4798      	blx	r3
 8017a5a:	f000 f90d 	bl	8017c78 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8017a5e:	6843      	ldr	r3, [r0, #4]
 8017a60:	f104 0118 	add.w	r1, r4, #24
 8017a64:	4628      	mov	r0, r5
 8017a66:	68db      	ldr	r3, [r3, #12]
 8017a68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017a6c:	4718      	bx	r3
 8017a6e:	4608      	mov	r0, r1
 8017a70:	bd70      	pop	{r4, r5, r6, pc}
 8017a72:	bf00      	nop

08017a74 <_Pose__cdr_serialize>:
 8017a74:	b510      	push	{r4, lr}
 8017a76:	b082      	sub	sp, #8
 8017a78:	9101      	str	r1, [sp, #4]
 8017a7a:	b190      	cbz	r0, 8017aa2 <_Pose__cdr_serialize+0x2e>
 8017a7c:	4604      	mov	r4, r0
 8017a7e:	f001 f9cf 	bl	8018e20 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 8017a82:	6843      	ldr	r3, [r0, #4]
 8017a84:	9901      	ldr	r1, [sp, #4]
 8017a86:	689b      	ldr	r3, [r3, #8]
 8017a88:	4620      	mov	r0, r4
 8017a8a:	4798      	blx	r3
 8017a8c:	f000 f8f4 	bl	8017c78 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8017a90:	6843      	ldr	r3, [r0, #4]
 8017a92:	9901      	ldr	r1, [sp, #4]
 8017a94:	689b      	ldr	r3, [r3, #8]
 8017a96:	f104 0018 	add.w	r0, r4, #24
 8017a9a:	b002      	add	sp, #8
 8017a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017aa0:	4718      	bx	r3
 8017aa2:	b002      	add	sp, #8
 8017aa4:	bd10      	pop	{r4, pc}
 8017aa6:	bf00      	nop

08017aa8 <_Pose__get_serialized_size>:
 8017aa8:	b538      	push	{r3, r4, r5, lr}
 8017aaa:	4604      	mov	r4, r0
 8017aac:	b148      	cbz	r0, 8017ac2 <_Pose__get_serialized_size+0x1a>
 8017aae:	2100      	movs	r1, #0
 8017ab0:	f001 f92a 	bl	8018d08 <get_serialized_size_geometry_msgs__msg__Point>
 8017ab4:	4605      	mov	r5, r0
 8017ab6:	4601      	mov	r1, r0
 8017ab8:	f104 0018 	add.w	r0, r4, #24
 8017abc:	f000 f828 	bl	8017b10 <get_serialized_size_geometry_msgs__msg__Quaternion>
 8017ac0:	4428      	add	r0, r5
 8017ac2:	bd38      	pop	{r3, r4, r5, pc}

08017ac4 <_Pose__max_serialized_size>:
 8017ac4:	b510      	push	{r4, lr}
 8017ac6:	b082      	sub	sp, #8
 8017ac8:	2301      	movs	r3, #1
 8017aca:	2100      	movs	r1, #0
 8017acc:	f10d 0007 	add.w	r0, sp, #7
 8017ad0:	f88d 3007 	strb.w	r3, [sp, #7]
 8017ad4:	f001 f988 	bl	8018de8 <max_serialized_size_geometry_msgs__msg__Point>
 8017ad8:	4604      	mov	r4, r0
 8017ada:	4601      	mov	r1, r0
 8017adc:	f10d 0007 	add.w	r0, sp, #7
 8017ae0:	f000 f8a8 	bl	8017c34 <max_serialized_size_geometry_msgs__msg__Quaternion>
 8017ae4:	4420      	add	r0, r4
 8017ae6:	b002      	add	sp, #8
 8017ae8:	bd10      	pop	{r4, pc}
 8017aea:	bf00      	nop

08017aec <max_serialized_size_geometry_msgs__msg__Pose>:
 8017aec:	2301      	movs	r3, #1
 8017aee:	b570      	push	{r4, r5, r6, lr}
 8017af0:	7003      	strb	r3, [r0, #0]
 8017af2:	4605      	mov	r5, r0
 8017af4:	460e      	mov	r6, r1
 8017af6:	f001 f977 	bl	8018de8 <max_serialized_size_geometry_msgs__msg__Point>
 8017afa:	4604      	mov	r4, r0
 8017afc:	1831      	adds	r1, r6, r0
 8017afe:	4628      	mov	r0, r5
 8017b00:	f000 f898 	bl	8017c34 <max_serialized_size_geometry_msgs__msg__Quaternion>
 8017b04:	4420      	add	r0, r4
 8017b06:	bd70      	pop	{r4, r5, r6, pc}

08017b08 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>:
 8017b08:	4800      	ldr	r0, [pc, #0]	@ (8017b0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x4>)
 8017b0a:	4770      	bx	lr
 8017b0c:	200007d8 	.word	0x200007d8

08017b10 <get_serialized_size_geometry_msgs__msg__Quaternion>:
 8017b10:	b1f0      	cbz	r0, 8017b50 <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 8017b12:	b570      	push	{r4, r5, r6, lr}
 8017b14:	460d      	mov	r5, r1
 8017b16:	4628      	mov	r0, r5
 8017b18:	2108      	movs	r1, #8
 8017b1a:	f7f4 f913 	bl	800bd44 <ucdr_alignment>
 8017b1e:	f105 0308 	add.w	r3, r5, #8
 8017b22:	181e      	adds	r6, r3, r0
 8017b24:	2108      	movs	r1, #8
 8017b26:	4630      	mov	r0, r6
 8017b28:	f7f4 f90c 	bl	800bd44 <ucdr_alignment>
 8017b2c:	f100 0408 	add.w	r4, r0, #8
 8017b30:	4434      	add	r4, r6
 8017b32:	2108      	movs	r1, #8
 8017b34:	4620      	mov	r0, r4
 8017b36:	f7f4 f905 	bl	800bd44 <ucdr_alignment>
 8017b3a:	3008      	adds	r0, #8
 8017b3c:	4404      	add	r4, r0
 8017b3e:	2108      	movs	r1, #8
 8017b40:	4620      	mov	r0, r4
 8017b42:	f7f4 f8ff 	bl	800bd44 <ucdr_alignment>
 8017b46:	f1c5 0508 	rsb	r5, r5, #8
 8017b4a:	4428      	add	r0, r5
 8017b4c:	4420      	add	r0, r4
 8017b4e:	bd70      	pop	{r4, r5, r6, pc}
 8017b50:	4770      	bx	lr
 8017b52:	bf00      	nop

08017b54 <_Quaternion__cdr_deserialize>:
 8017b54:	b538      	push	{r3, r4, r5, lr}
 8017b56:	460c      	mov	r4, r1
 8017b58:	b199      	cbz	r1, 8017b82 <_Quaternion__cdr_deserialize+0x2e>
 8017b5a:	4605      	mov	r5, r0
 8017b5c:	f7f3 ff06 	bl	800b96c <ucdr_deserialize_double>
 8017b60:	f104 0108 	add.w	r1, r4, #8
 8017b64:	4628      	mov	r0, r5
 8017b66:	f7f3 ff01 	bl	800b96c <ucdr_deserialize_double>
 8017b6a:	f104 0110 	add.w	r1, r4, #16
 8017b6e:	4628      	mov	r0, r5
 8017b70:	f7f3 fefc 	bl	800b96c <ucdr_deserialize_double>
 8017b74:	f104 0118 	add.w	r1, r4, #24
 8017b78:	4628      	mov	r0, r5
 8017b7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017b7e:	f7f3 bef5 	b.w	800b96c <ucdr_deserialize_double>
 8017b82:	4608      	mov	r0, r1
 8017b84:	bd38      	pop	{r3, r4, r5, pc}
 8017b86:	bf00      	nop

08017b88 <_Quaternion__cdr_serialize>:
 8017b88:	b1c0      	cbz	r0, 8017bbc <_Quaternion__cdr_serialize+0x34>
 8017b8a:	b538      	push	{r3, r4, r5, lr}
 8017b8c:	ed90 0b00 	vldr	d0, [r0]
 8017b90:	460d      	mov	r5, r1
 8017b92:	4604      	mov	r4, r0
 8017b94:	4608      	mov	r0, r1
 8017b96:	f7f3 fd47 	bl	800b628 <ucdr_serialize_double>
 8017b9a:	ed94 0b02 	vldr	d0, [r4, #8]
 8017b9e:	4628      	mov	r0, r5
 8017ba0:	f7f3 fd42 	bl	800b628 <ucdr_serialize_double>
 8017ba4:	ed94 0b04 	vldr	d0, [r4, #16]
 8017ba8:	4628      	mov	r0, r5
 8017baa:	f7f3 fd3d 	bl	800b628 <ucdr_serialize_double>
 8017bae:	ed94 0b06 	vldr	d0, [r4, #24]
 8017bb2:	4628      	mov	r0, r5
 8017bb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017bb8:	f7f3 bd36 	b.w	800b628 <ucdr_serialize_double>
 8017bbc:	4770      	bx	lr
 8017bbe:	bf00      	nop

08017bc0 <_Quaternion__get_serialized_size>:
 8017bc0:	b1d0      	cbz	r0, 8017bf8 <_Quaternion__get_serialized_size+0x38>
 8017bc2:	b538      	push	{r3, r4, r5, lr}
 8017bc4:	2108      	movs	r1, #8
 8017bc6:	2000      	movs	r0, #0
 8017bc8:	f7f4 f8bc 	bl	800bd44 <ucdr_alignment>
 8017bcc:	f100 0508 	add.w	r5, r0, #8
 8017bd0:	2108      	movs	r1, #8
 8017bd2:	4628      	mov	r0, r5
 8017bd4:	f7f4 f8b6 	bl	800bd44 <ucdr_alignment>
 8017bd8:	f100 0408 	add.w	r4, r0, #8
 8017bdc:	442c      	add	r4, r5
 8017bde:	2108      	movs	r1, #8
 8017be0:	4620      	mov	r0, r4
 8017be2:	f7f4 f8af 	bl	800bd44 <ucdr_alignment>
 8017be6:	3008      	adds	r0, #8
 8017be8:	4404      	add	r4, r0
 8017bea:	2108      	movs	r1, #8
 8017bec:	4620      	mov	r0, r4
 8017bee:	f7f4 f8a9 	bl	800bd44 <ucdr_alignment>
 8017bf2:	3008      	adds	r0, #8
 8017bf4:	4420      	add	r0, r4
 8017bf6:	bd38      	pop	{r3, r4, r5, pc}
 8017bf8:	4770      	bx	lr
 8017bfa:	bf00      	nop

08017bfc <_Quaternion__max_serialized_size>:
 8017bfc:	b538      	push	{r3, r4, r5, lr}
 8017bfe:	2108      	movs	r1, #8
 8017c00:	2000      	movs	r0, #0
 8017c02:	f7f4 f89f 	bl	800bd44 <ucdr_alignment>
 8017c06:	f100 0508 	add.w	r5, r0, #8
 8017c0a:	2108      	movs	r1, #8
 8017c0c:	4628      	mov	r0, r5
 8017c0e:	f7f4 f899 	bl	800bd44 <ucdr_alignment>
 8017c12:	f100 0408 	add.w	r4, r0, #8
 8017c16:	442c      	add	r4, r5
 8017c18:	2108      	movs	r1, #8
 8017c1a:	4620      	mov	r0, r4
 8017c1c:	f7f4 f892 	bl	800bd44 <ucdr_alignment>
 8017c20:	3008      	adds	r0, #8
 8017c22:	4404      	add	r4, r0
 8017c24:	2108      	movs	r1, #8
 8017c26:	4620      	mov	r0, r4
 8017c28:	f7f4 f88c 	bl	800bd44 <ucdr_alignment>
 8017c2c:	3008      	adds	r0, #8
 8017c2e:	4420      	add	r0, r4
 8017c30:	bd38      	pop	{r3, r4, r5, pc}
 8017c32:	bf00      	nop

08017c34 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 8017c34:	b570      	push	{r4, r5, r6, lr}
 8017c36:	2301      	movs	r3, #1
 8017c38:	460c      	mov	r4, r1
 8017c3a:	7003      	strb	r3, [r0, #0]
 8017c3c:	2108      	movs	r1, #8
 8017c3e:	4620      	mov	r0, r4
 8017c40:	f7f4 f880 	bl	800bd44 <ucdr_alignment>
 8017c44:	f104 0508 	add.w	r5, r4, #8
 8017c48:	1946      	adds	r6, r0, r5
 8017c4a:	2108      	movs	r1, #8
 8017c4c:	4630      	mov	r0, r6
 8017c4e:	f7f4 f879 	bl	800bd44 <ucdr_alignment>
 8017c52:	f100 0508 	add.w	r5, r0, #8
 8017c56:	4435      	add	r5, r6
 8017c58:	2108      	movs	r1, #8
 8017c5a:	4628      	mov	r0, r5
 8017c5c:	f7f4 f872 	bl	800bd44 <ucdr_alignment>
 8017c60:	3008      	adds	r0, #8
 8017c62:	4405      	add	r5, r0
 8017c64:	2108      	movs	r1, #8
 8017c66:	4628      	mov	r0, r5
 8017c68:	f7f4 f86c 	bl	800bd44 <ucdr_alignment>
 8017c6c:	f1c4 0408 	rsb	r4, r4, #8
 8017c70:	4420      	add	r0, r4
 8017c72:	4428      	add	r0, r5
 8017c74:	bd70      	pop	{r4, r5, r6, pc}
 8017c76:	bf00      	nop

08017c78 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 8017c78:	4800      	ldr	r0, [pc, #0]	@ (8017c7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 8017c7a:	4770      	bx	lr
 8017c7c:	20000800 	.word	0x20000800

08017c80 <ucdr_serialize_string>:
 8017c80:	b510      	push	{r4, lr}
 8017c82:	b082      	sub	sp, #8
 8017c84:	4604      	mov	r4, r0
 8017c86:	4608      	mov	r0, r1
 8017c88:	9101      	str	r1, [sp, #4]
 8017c8a:	f7e8 facb 	bl	8000224 <strlen>
 8017c8e:	9901      	ldr	r1, [sp, #4]
 8017c90:	1c42      	adds	r2, r0, #1
 8017c92:	4620      	mov	r0, r4
 8017c94:	b002      	add	sp, #8
 8017c96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017c9a:	f7f8 be9f 	b.w	80109dc <ucdr_serialize_sequence_char>
 8017c9e:	bf00      	nop

08017ca0 <ucdr_deserialize_string>:
 8017ca0:	b500      	push	{lr}
 8017ca2:	b083      	sub	sp, #12
 8017ca4:	ab01      	add	r3, sp, #4
 8017ca6:	f7f8 feab 	bl	8010a00 <ucdr_deserialize_sequence_char>
 8017caa:	b003      	add	sp, #12
 8017cac:	f85d fb04 	ldr.w	pc, [sp], #4

08017cb0 <uxr_init_input_best_effort_stream>:
 8017cb0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017cb4:	8003      	strh	r3, [r0, #0]
 8017cb6:	4770      	bx	lr

08017cb8 <uxr_reset_input_best_effort_stream>:
 8017cb8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017cbc:	8003      	strh	r3, [r0, #0]
 8017cbe:	4770      	bx	lr

08017cc0 <uxr_receive_best_effort_message>:
 8017cc0:	b538      	push	{r3, r4, r5, lr}
 8017cc2:	4604      	mov	r4, r0
 8017cc4:	8800      	ldrh	r0, [r0, #0]
 8017cc6:	460d      	mov	r5, r1
 8017cc8:	f000 fd42 	bl	8018750 <uxr_seq_num_cmp>
 8017ccc:	4603      	mov	r3, r0
 8017cce:	2b00      	cmp	r3, #0
 8017cd0:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8017cd4:	bfb8      	it	lt
 8017cd6:	8025      	strhlt	r5, [r4, #0]
 8017cd8:	bd38      	pop	{r3, r4, r5, pc}
 8017cda:	bf00      	nop

08017cdc <on_full_input_buffer>:
 8017cdc:	b570      	push	{r4, r5, r6, lr}
 8017cde:	4605      	mov	r5, r0
 8017ce0:	460c      	mov	r4, r1
 8017ce2:	682b      	ldr	r3, [r5, #0]
 8017ce4:	6809      	ldr	r1, [r1, #0]
 8017ce6:	8920      	ldrh	r0, [r4, #8]
 8017ce8:	6862      	ldr	r2, [r4, #4]
 8017cea:	fbb2 f2f0 	udiv	r2, r2, r0
 8017cee:	eba3 0c01 	sub.w	ip, r3, r1
 8017cf2:	fbbc fcf2 	udiv	ip, ip, r2
 8017cf6:	f10c 0c01 	add.w	ip, ip, #1
 8017cfa:	fa1f f38c 	uxth.w	r3, ip
 8017cfe:	fbb3 f6f0 	udiv	r6, r3, r0
 8017d02:	fb00 3316 	mls	r3, r0, r6, r3
 8017d06:	b29b      	uxth	r3, r3
 8017d08:	fb02 f303 	mul.w	r3, r2, r3
 8017d0c:	1d18      	adds	r0, r3, #4
 8017d0e:	4408      	add	r0, r1
 8017d10:	7d26      	ldrb	r6, [r4, #20]
 8017d12:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8017d16:	b116      	cbz	r6, 8017d1e <on_full_input_buffer+0x42>
 8017d18:	2600      	movs	r6, #0
 8017d1a:	f840 6c04 	str.w	r6, [r0, #-4]
 8017d1e:	2a03      	cmp	r2, #3
 8017d20:	d801      	bhi.n	8017d26 <on_full_input_buffer+0x4a>
 8017d22:	2001      	movs	r0, #1
 8017d24:	bd70      	pop	{r4, r5, r6, pc}
 8017d26:	3308      	adds	r3, #8
 8017d28:	4419      	add	r1, r3
 8017d2a:	4628      	mov	r0, r5
 8017d2c:	692b      	ldr	r3, [r5, #16]
 8017d2e:	3a04      	subs	r2, #4
 8017d30:	f7f3 fffc 	bl	800bd2c <ucdr_init_buffer_origin>
 8017d34:	4628      	mov	r0, r5
 8017d36:	4903      	ldr	r1, [pc, #12]	@ (8017d44 <on_full_input_buffer+0x68>)
 8017d38:	4622      	mov	r2, r4
 8017d3a:	f7f3 ffd3 	bl	800bce4 <ucdr_set_on_full_buffer_callback>
 8017d3e:	2000      	movs	r0, #0
 8017d40:	bd70      	pop	{r4, r5, r6, pc}
 8017d42:	bf00      	nop
 8017d44:	08017cdd 	.word	0x08017cdd

08017d48 <uxr_init_input_reliable_stream>:
 8017d48:	b500      	push	{lr}
 8017d4a:	e9c0 1200 	strd	r1, r2, [r0]
 8017d4e:	f04f 0e00 	mov.w	lr, #0
 8017d52:	9a01      	ldr	r2, [sp, #4]
 8017d54:	8103      	strh	r3, [r0, #8]
 8017d56:	6102      	str	r2, [r0, #16]
 8017d58:	f880 e014 	strb.w	lr, [r0, #20]
 8017d5c:	b1d3      	cbz	r3, 8017d94 <uxr_init_input_reliable_stream+0x4c>
 8017d5e:	f8c1 e000 	str.w	lr, [r1]
 8017d62:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8017d66:	f1bc 0f01 	cmp.w	ip, #1
 8017d6a:	d913      	bls.n	8017d94 <uxr_init_input_reliable_stream+0x4c>
 8017d6c:	2301      	movs	r3, #1
 8017d6e:	fbb3 f1fc 	udiv	r1, r3, ip
 8017d72:	fb0c 3111 	mls	r1, ip, r1, r3
 8017d76:	b289      	uxth	r1, r1
 8017d78:	6842      	ldr	r2, [r0, #4]
 8017d7a:	fbb2 f2fc 	udiv	r2, r2, ip
 8017d7e:	fb01 f202 	mul.w	r2, r1, r2
 8017d82:	6801      	ldr	r1, [r0, #0]
 8017d84:	f841 e002 	str.w	lr, [r1, r2]
 8017d88:	3301      	adds	r3, #1
 8017d8a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8017d8e:	b29b      	uxth	r3, r3
 8017d90:	459c      	cmp	ip, r3
 8017d92:	d8ec      	bhi.n	8017d6e <uxr_init_input_reliable_stream+0x26>
 8017d94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017d98:	60c3      	str	r3, [r0, #12]
 8017d9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8017d9e:	bf00      	nop

08017da0 <uxr_reset_input_reliable_stream>:
 8017da0:	8901      	ldrh	r1, [r0, #8]
 8017da2:	b1e9      	cbz	r1, 8017de0 <uxr_reset_input_reliable_stream+0x40>
 8017da4:	f04f 0c00 	mov.w	ip, #0
 8017da8:	b500      	push	{lr}
 8017daa:	4663      	mov	r3, ip
 8017dac:	46e6      	mov	lr, ip
 8017dae:	fbb3 f2f1 	udiv	r2, r3, r1
 8017db2:	fb01 3312 	mls	r3, r1, r2, r3
 8017db6:	b29b      	uxth	r3, r3
 8017db8:	6842      	ldr	r2, [r0, #4]
 8017dba:	fbb2 f2f1 	udiv	r2, r2, r1
 8017dbe:	fb02 f303 	mul.w	r3, r2, r3
 8017dc2:	6802      	ldr	r2, [r0, #0]
 8017dc4:	f842 e003 	str.w	lr, [r2, r3]
 8017dc8:	f10c 0c01 	add.w	ip, ip, #1
 8017dcc:	8901      	ldrh	r1, [r0, #8]
 8017dce:	fa1f f38c 	uxth.w	r3, ip
 8017dd2:	4299      	cmp	r1, r3
 8017dd4:	d8eb      	bhi.n	8017dae <uxr_reset_input_reliable_stream+0xe>
 8017dd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017dda:	60c3      	str	r3, [r0, #12]
 8017ddc:	f85d fb04 	ldr.w	pc, [sp], #4
 8017de0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017de4:	60c3      	str	r3, [r0, #12]
 8017de6:	4770      	bx	lr

08017de8 <uxr_receive_reliable_message>:
 8017de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017dec:	4604      	mov	r4, r0
 8017dee:	460d      	mov	r5, r1
 8017df0:	8901      	ldrh	r1, [r0, #8]
 8017df2:	8980      	ldrh	r0, [r0, #12]
 8017df4:	4690      	mov	r8, r2
 8017df6:	461f      	mov	r7, r3
 8017df8:	f000 fca2 	bl	8018740 <uxr_seq_num_add>
 8017dfc:	4629      	mov	r1, r5
 8017dfe:	4606      	mov	r6, r0
 8017e00:	89a0      	ldrh	r0, [r4, #12]
 8017e02:	f000 fca5 	bl	8018750 <uxr_seq_num_cmp>
 8017e06:	2800      	cmp	r0, #0
 8017e08:	db0a      	blt.n	8017e20 <uxr_receive_reliable_message+0x38>
 8017e0a:	2600      	movs	r6, #0
 8017e0c:	89e0      	ldrh	r0, [r4, #14]
 8017e0e:	4629      	mov	r1, r5
 8017e10:	f000 fc9e 	bl	8018750 <uxr_seq_num_cmp>
 8017e14:	2800      	cmp	r0, #0
 8017e16:	da00      	bge.n	8017e1a <uxr_receive_reliable_message+0x32>
 8017e18:	81e5      	strh	r5, [r4, #14]
 8017e1a:	4630      	mov	r0, r6
 8017e1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017e20:	4630      	mov	r0, r6
 8017e22:	4629      	mov	r1, r5
 8017e24:	f000 fc94 	bl	8018750 <uxr_seq_num_cmp>
 8017e28:	2800      	cmp	r0, #0
 8017e2a:	dbee      	blt.n	8017e0a <uxr_receive_reliable_message+0x22>
 8017e2c:	6923      	ldr	r3, [r4, #16]
 8017e2e:	4640      	mov	r0, r8
 8017e30:	4798      	blx	r3
 8017e32:	2101      	movs	r1, #1
 8017e34:	4681      	mov	r9, r0
 8017e36:	89a0      	ldrh	r0, [r4, #12]
 8017e38:	f000 fc82 	bl	8018740 <uxr_seq_num_add>
 8017e3c:	f1b9 0f00 	cmp.w	r9, #0
 8017e40:	d101      	bne.n	8017e46 <uxr_receive_reliable_message+0x5e>
 8017e42:	4285      	cmp	r5, r0
 8017e44:	d047      	beq.n	8017ed6 <uxr_receive_reliable_message+0xee>
 8017e46:	8922      	ldrh	r2, [r4, #8]
 8017e48:	fbb5 f0f2 	udiv	r0, r5, r2
 8017e4c:	fb02 5010 	mls	r0, r2, r0, r5
 8017e50:	b280      	uxth	r0, r0
 8017e52:	6863      	ldr	r3, [r4, #4]
 8017e54:	fbb3 f3f2 	udiv	r3, r3, r2
 8017e58:	fb00 f303 	mul.w	r3, r0, r3
 8017e5c:	6820      	ldr	r0, [r4, #0]
 8017e5e:	3304      	adds	r3, #4
 8017e60:	4418      	add	r0, r3
 8017e62:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017e66:	2b00      	cmp	r3, #0
 8017e68:	d1cf      	bne.n	8017e0a <uxr_receive_reliable_message+0x22>
 8017e6a:	4641      	mov	r1, r8
 8017e6c:	463a      	mov	r2, r7
 8017e6e:	f001 fd9a 	bl	80199a6 <memcpy>
 8017e72:	8921      	ldrh	r1, [r4, #8]
 8017e74:	fbb5 f2f1 	udiv	r2, r5, r1
 8017e78:	fb01 5212 	mls	r2, r1, r2, r5
 8017e7c:	b292      	uxth	r2, r2
 8017e7e:	6863      	ldr	r3, [r4, #4]
 8017e80:	fbb3 f3f1 	udiv	r3, r3, r1
 8017e84:	fb02 f303 	mul.w	r3, r2, r3
 8017e88:	6822      	ldr	r2, [r4, #0]
 8017e8a:	50d7      	str	r7, [r2, r3]
 8017e8c:	9a08      	ldr	r2, [sp, #32]
 8017e8e:	2301      	movs	r3, #1
 8017e90:	7013      	strb	r3, [r2, #0]
 8017e92:	f1b9 0f00 	cmp.w	r9, #0
 8017e96:	d0b8      	beq.n	8017e0a <uxr_receive_reliable_message+0x22>
 8017e98:	89a6      	ldrh	r6, [r4, #12]
 8017e9a:	4630      	mov	r0, r6
 8017e9c:	2101      	movs	r1, #1
 8017e9e:	f000 fc4f 	bl	8018740 <uxr_seq_num_add>
 8017ea2:	8922      	ldrh	r2, [r4, #8]
 8017ea4:	6863      	ldr	r3, [r4, #4]
 8017ea6:	fbb3 f3f2 	udiv	r3, r3, r2
 8017eaa:	4606      	mov	r6, r0
 8017eac:	fbb0 f0f2 	udiv	r0, r0, r2
 8017eb0:	fb02 6010 	mls	r0, r2, r0, r6
 8017eb4:	b280      	uxth	r0, r0
 8017eb6:	fb00 f303 	mul.w	r3, r0, r3
 8017eba:	6820      	ldr	r0, [r4, #0]
 8017ebc:	3304      	adds	r3, #4
 8017ebe:	4418      	add	r0, r3
 8017ec0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	d0a0      	beq.n	8017e0a <uxr_receive_reliable_message+0x22>
 8017ec8:	6923      	ldr	r3, [r4, #16]
 8017eca:	4798      	blx	r3
 8017ecc:	2802      	cmp	r0, #2
 8017ece:	d008      	beq.n	8017ee2 <uxr_receive_reliable_message+0xfa>
 8017ed0:	2801      	cmp	r0, #1
 8017ed2:	d0e2      	beq.n	8017e9a <uxr_receive_reliable_message+0xb2>
 8017ed4:	e799      	b.n	8017e0a <uxr_receive_reliable_message+0x22>
 8017ed6:	9b08      	ldr	r3, [sp, #32]
 8017ed8:	81a5      	strh	r5, [r4, #12]
 8017eda:	2601      	movs	r6, #1
 8017edc:	f883 9000 	strb.w	r9, [r3]
 8017ee0:	e794      	b.n	8017e0c <uxr_receive_reliable_message+0x24>
 8017ee2:	2601      	movs	r6, #1
 8017ee4:	e792      	b.n	8017e0c <uxr_receive_reliable_message+0x24>
 8017ee6:	bf00      	nop

08017ee8 <uxr_next_input_reliable_buffer_available>:
 8017ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017eec:	4604      	mov	r4, r0
 8017eee:	460f      	mov	r7, r1
 8017ef0:	8980      	ldrh	r0, [r0, #12]
 8017ef2:	2101      	movs	r1, #1
 8017ef4:	4690      	mov	r8, r2
 8017ef6:	f000 fc23 	bl	8018740 <uxr_seq_num_add>
 8017efa:	8922      	ldrh	r2, [r4, #8]
 8017efc:	fbb0 f6f2 	udiv	r6, r0, r2
 8017f00:	fb02 0616 	mls	r6, r2, r6, r0
 8017f04:	b2b6      	uxth	r6, r6
 8017f06:	6863      	ldr	r3, [r4, #4]
 8017f08:	fbb3 f3f2 	udiv	r3, r3, r2
 8017f0c:	fb06 f303 	mul.w	r3, r6, r3
 8017f10:	6826      	ldr	r6, [r4, #0]
 8017f12:	3304      	adds	r3, #4
 8017f14:	441e      	add	r6, r3
 8017f16:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8017f1a:	f1b9 0f00 	cmp.w	r9, #0
 8017f1e:	d023      	beq.n	8017f68 <uxr_next_input_reliable_buffer_available+0x80>
 8017f20:	6923      	ldr	r3, [r4, #16]
 8017f22:	4605      	mov	r5, r0
 8017f24:	4630      	mov	r0, r6
 8017f26:	4798      	blx	r3
 8017f28:	4682      	mov	sl, r0
 8017f2a:	b300      	cbz	r0, 8017f6e <uxr_next_input_reliable_buffer_available+0x86>
 8017f2c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8017f30:	2101      	movs	r1, #1
 8017f32:	4650      	mov	r0, sl
 8017f34:	f000 fc04 	bl	8018740 <uxr_seq_num_add>
 8017f38:	8921      	ldrh	r1, [r4, #8]
 8017f3a:	fbb0 f2f1 	udiv	r2, r0, r1
 8017f3e:	4682      	mov	sl, r0
 8017f40:	fb01 0212 	mls	r2, r1, r2, r0
 8017f44:	e9d4 0300 	ldrd	r0, r3, [r4]
 8017f48:	b292      	uxth	r2, r2
 8017f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8017f4e:	fb02 f303 	mul.w	r3, r2, r3
 8017f52:	3304      	adds	r3, #4
 8017f54:	4418      	add	r0, r3
 8017f56:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017f5a:	b12b      	cbz	r3, 8017f68 <uxr_next_input_reliable_buffer_available+0x80>
 8017f5c:	6923      	ldr	r3, [r4, #16]
 8017f5e:	4798      	blx	r3
 8017f60:	2802      	cmp	r0, #2
 8017f62:	d01b      	beq.n	8017f9c <uxr_next_input_reliable_buffer_available+0xb4>
 8017f64:	2801      	cmp	r0, #1
 8017f66:	d0e3      	beq.n	8017f30 <uxr_next_input_reliable_buffer_available+0x48>
 8017f68:	2000      	movs	r0, #0
 8017f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f6e:	464a      	mov	r2, r9
 8017f70:	4631      	mov	r1, r6
 8017f72:	4638      	mov	r0, r7
 8017f74:	f7f3 fee2 	bl	800bd3c <ucdr_init_buffer>
 8017f78:	8921      	ldrh	r1, [r4, #8]
 8017f7a:	fbb5 f2f1 	udiv	r2, r5, r1
 8017f7e:	fb01 5212 	mls	r2, r1, r2, r5
 8017f82:	b292      	uxth	r2, r2
 8017f84:	6863      	ldr	r3, [r4, #4]
 8017f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8017f8a:	fb02 f303 	mul.w	r3, r2, r3
 8017f8e:	6822      	ldr	r2, [r4, #0]
 8017f90:	f842 a003 	str.w	sl, [r2, r3]
 8017f94:	2001      	movs	r0, #1
 8017f96:	81a5      	strh	r5, [r4, #12]
 8017f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f9c:	8920      	ldrh	r0, [r4, #8]
 8017f9e:	fbb5 f3f0 	udiv	r3, r5, r0
 8017fa2:	fb00 5513 	mls	r5, r0, r3, r5
 8017fa6:	b2ad      	uxth	r5, r5
 8017fa8:	6863      	ldr	r3, [r4, #4]
 8017faa:	fbb3 f3f0 	udiv	r3, r3, r0
 8017fae:	fb03 f505 	mul.w	r5, r3, r5
 8017fb2:	6823      	ldr	r3, [r4, #0]
 8017fb4:	2000      	movs	r0, #0
 8017fb6:	5158      	str	r0, [r3, r5]
 8017fb8:	eb06 0108 	add.w	r1, r6, r8
 8017fbc:	eba9 0208 	sub.w	r2, r9, r8
 8017fc0:	4638      	mov	r0, r7
 8017fc2:	f7f3 febb 	bl	800bd3c <ucdr_init_buffer>
 8017fc6:	4638      	mov	r0, r7
 8017fc8:	4903      	ldr	r1, [pc, #12]	@ (8017fd8 <uxr_next_input_reliable_buffer_available+0xf0>)
 8017fca:	4622      	mov	r2, r4
 8017fcc:	f7f3 fe8a 	bl	800bce4 <ucdr_set_on_full_buffer_callback>
 8017fd0:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8017fd4:	2001      	movs	r0, #1
 8017fd6:	e7c8      	b.n	8017f6a <uxr_next_input_reliable_buffer_available+0x82>
 8017fd8:	08017cdd 	.word	0x08017cdd

08017fdc <uxr_process_heartbeat>:
 8017fdc:	b538      	push	{r3, r4, r5, lr}
 8017fde:	4611      	mov	r1, r2
 8017fe0:	4604      	mov	r4, r0
 8017fe2:	89c0      	ldrh	r0, [r0, #14]
 8017fe4:	4615      	mov	r5, r2
 8017fe6:	f000 fbb3 	bl	8018750 <uxr_seq_num_cmp>
 8017fea:	2800      	cmp	r0, #0
 8017fec:	bfb8      	it	lt
 8017fee:	81e5      	strhlt	r5, [r4, #14]
 8017ff0:	bd38      	pop	{r3, r4, r5, pc}
 8017ff2:	bf00      	nop

08017ff4 <uxr_compute_acknack>:
 8017ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017ff8:	8903      	ldrh	r3, [r0, #8]
 8017ffa:	8985      	ldrh	r5, [r0, #12]
 8017ffc:	4604      	mov	r4, r0
 8017ffe:	460e      	mov	r6, r1
 8018000:	b1d3      	cbz	r3, 8018038 <uxr_compute_acknack+0x44>
 8018002:	4628      	mov	r0, r5
 8018004:	2701      	movs	r7, #1
 8018006:	e003      	b.n	8018010 <uxr_compute_acknack+0x1c>
 8018008:	4567      	cmp	r7, ip
 801800a:	d215      	bcs.n	8018038 <uxr_compute_acknack+0x44>
 801800c:	89a0      	ldrh	r0, [r4, #12]
 801800e:	3701      	adds	r7, #1
 8018010:	b2b9      	uxth	r1, r7
 8018012:	f000 fb95 	bl	8018740 <uxr_seq_num_add>
 8018016:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801801a:	fbb0 f3fc 	udiv	r3, r0, ip
 801801e:	fb0c 0313 	mls	r3, ip, r3, r0
 8018022:	b29a      	uxth	r2, r3
 8018024:	e9d4 1300 	ldrd	r1, r3, [r4]
 8018028:	fbb3 f3fc 	udiv	r3, r3, ip
 801802c:	fb02 f303 	mul.w	r3, r2, r3
 8018030:	58cb      	ldr	r3, [r1, r3]
 8018032:	2b00      	cmp	r3, #0
 8018034:	d1e8      	bne.n	8018008 <uxr_compute_acknack+0x14>
 8018036:	4605      	mov	r5, r0
 8018038:	8035      	strh	r5, [r6, #0]
 801803a:	2101      	movs	r1, #1
 801803c:	4628      	mov	r0, r5
 801803e:	89e7      	ldrh	r7, [r4, #14]
 8018040:	f000 fb82 	bl	8018748 <uxr_seq_num_sub>
 8018044:	4601      	mov	r1, r0
 8018046:	4638      	mov	r0, r7
 8018048:	f000 fb7e 	bl	8018748 <uxr_seq_num_sub>
 801804c:	4605      	mov	r5, r0
 801804e:	b318      	cbz	r0, 8018098 <uxr_compute_acknack+0xa4>
 8018050:	f04f 0900 	mov.w	r9, #0
 8018054:	464f      	mov	r7, r9
 8018056:	f04f 0801 	mov.w	r8, #1
 801805a:	fa1f f189 	uxth.w	r1, r9
 801805e:	8830      	ldrh	r0, [r6, #0]
 8018060:	f000 fb6e 	bl	8018740 <uxr_seq_num_add>
 8018064:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018068:	fbb0 f3fc 	udiv	r3, r0, ip
 801806c:	e9d4 1200 	ldrd	r1, r2, [r4]
 8018070:	fb03 001c 	mls	r0, r3, ip, r0
 8018074:	b283      	uxth	r3, r0
 8018076:	fbb2 f2fc 	udiv	r2, r2, ip
 801807a:	fb02 f303 	mul.w	r3, r2, r3
 801807e:	fa08 f209 	lsl.w	r2, r8, r9
 8018082:	58cb      	ldr	r3, [r1, r3]
 8018084:	f109 0901 	add.w	r9, r9, #1
 8018088:	b90b      	cbnz	r3, 801808e <uxr_compute_acknack+0x9a>
 801808a:	4317      	orrs	r7, r2
 801808c:	b2bf      	uxth	r7, r7
 801808e:	454d      	cmp	r5, r9
 8018090:	d1e3      	bne.n	801805a <uxr_compute_acknack+0x66>
 8018092:	4638      	mov	r0, r7
 8018094:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018098:	4607      	mov	r7, r0
 801809a:	4638      	mov	r0, r7
 801809c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080180a0 <uxr_init_output_best_effort_stream>:
 80180a0:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 80180a4:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80180a8:	6001      	str	r1, [r0, #0]
 80180aa:	7303      	strb	r3, [r0, #12]
 80180ac:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80180b0:	4770      	bx	lr
 80180b2:	bf00      	nop

080180b4 <uxr_reset_output_best_effort_stream>:
 80180b4:	7b02      	ldrb	r2, [r0, #12]
 80180b6:	6042      	str	r2, [r0, #4]
 80180b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80180bc:	81c3      	strh	r3, [r0, #14]
 80180be:	4770      	bx	lr

080180c0 <uxr_prepare_best_effort_buffer_to_write>:
 80180c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80180c2:	4604      	mov	r4, r0
 80180c4:	b083      	sub	sp, #12
 80180c6:	6840      	ldr	r0, [r0, #4]
 80180c8:	460d      	mov	r5, r1
 80180ca:	4616      	mov	r6, r2
 80180cc:	f7fb f8cc 	bl	8013268 <uxr_submessage_padding>
 80180d0:	6863      	ldr	r3, [r4, #4]
 80180d2:	4418      	add	r0, r3
 80180d4:	68a3      	ldr	r3, [r4, #8]
 80180d6:	1942      	adds	r2, r0, r5
 80180d8:	4293      	cmp	r3, r2
 80180da:	bf2c      	ite	cs
 80180dc:	2701      	movcs	r7, #1
 80180de:	2700      	movcc	r7, #0
 80180e0:	d202      	bcs.n	80180e8 <uxr_prepare_best_effort_buffer_to_write+0x28>
 80180e2:	4638      	mov	r0, r7
 80180e4:	b003      	add	sp, #12
 80180e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80180e8:	9000      	str	r0, [sp, #0]
 80180ea:	6821      	ldr	r1, [r4, #0]
 80180ec:	4630      	mov	r0, r6
 80180ee:	2300      	movs	r3, #0
 80180f0:	f7f3 fe12 	bl	800bd18 <ucdr_init_buffer_origin_offset>
 80180f4:	6861      	ldr	r1, [r4, #4]
 80180f6:	4638      	mov	r0, r7
 80180f8:	4429      	add	r1, r5
 80180fa:	6061      	str	r1, [r4, #4]
 80180fc:	b003      	add	sp, #12
 80180fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018100 <uxr_prepare_best_effort_buffer_to_send>:
 8018100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018104:	4604      	mov	r4, r0
 8018106:	461d      	mov	r5, r3
 8018108:	6840      	ldr	r0, [r0, #4]
 801810a:	7b23      	ldrb	r3, [r4, #12]
 801810c:	4298      	cmp	r0, r3
 801810e:	bf8c      	ite	hi
 8018110:	2601      	movhi	r6, #1
 8018112:	2600      	movls	r6, #0
 8018114:	d802      	bhi.n	801811c <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8018116:	4630      	mov	r0, r6
 8018118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801811c:	4688      	mov	r8, r1
 801811e:	89e0      	ldrh	r0, [r4, #14]
 8018120:	2101      	movs	r1, #1
 8018122:	4617      	mov	r7, r2
 8018124:	f000 fb0c 	bl	8018740 <uxr_seq_num_add>
 8018128:	6823      	ldr	r3, [r4, #0]
 801812a:	81e0      	strh	r0, [r4, #14]
 801812c:	8028      	strh	r0, [r5, #0]
 801812e:	f8c8 3000 	str.w	r3, [r8]
 8018132:	6863      	ldr	r3, [r4, #4]
 8018134:	603b      	str	r3, [r7, #0]
 8018136:	7b23      	ldrb	r3, [r4, #12]
 8018138:	6063      	str	r3, [r4, #4]
 801813a:	4630      	mov	r0, r6
 801813c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018140 <on_full_output_buffer>:
 8018140:	b538      	push	{r3, r4, r5, lr}
 8018142:	6802      	ldr	r2, [r0, #0]
 8018144:	460c      	mov	r4, r1
 8018146:	6809      	ldr	r1, [r1, #0]
 8018148:	8923      	ldrh	r3, [r4, #8]
 801814a:	eba2 0c01 	sub.w	ip, r2, r1
 801814e:	6862      	ldr	r2, [r4, #4]
 8018150:	fbb2 f2f3 	udiv	r2, r2, r3
 8018154:	fbbc fcf2 	udiv	ip, ip, r2
 8018158:	f10c 0c01 	add.w	ip, ip, #1
 801815c:	fa1f fc8c 	uxth.w	ip, ip
 8018160:	fbbc fef3 	udiv	lr, ip, r3
 8018164:	fb03 c31e 	mls	r3, r3, lr, ip
 8018168:	b29b      	uxth	r3, r3
 801816a:	fb02 f303 	mul.w	r3, r2, r3
 801816e:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8018172:	58ca      	ldr	r2, [r1, r3]
 8018174:	4463      	add	r3, ip
 8018176:	eba2 020c 	sub.w	r2, r2, ip
 801817a:	3308      	adds	r3, #8
 801817c:	4605      	mov	r5, r0
 801817e:	4419      	add	r1, r3
 8018180:	3a04      	subs	r2, #4
 8018182:	6903      	ldr	r3, [r0, #16]
 8018184:	f7f3 fdd2 	bl	800bd2c <ucdr_init_buffer_origin>
 8018188:	4628      	mov	r0, r5
 801818a:	4903      	ldr	r1, [pc, #12]	@ (8018198 <on_full_output_buffer+0x58>)
 801818c:	4622      	mov	r2, r4
 801818e:	f7f3 fda9 	bl	800bce4 <ucdr_set_on_full_buffer_callback>
 8018192:	2000      	movs	r0, #0
 8018194:	bd38      	pop	{r3, r4, r5, pc}
 8018196:	bf00      	nop
 8018198:	08018141 	.word	0x08018141

0801819c <uxr_init_output_reliable_stream>:
 801819c:	b410      	push	{r4}
 801819e:	f89d c004 	ldrb.w	ip, [sp, #4]
 80181a2:	8103      	strh	r3, [r0, #8]
 80181a4:	e9c0 1200 	strd	r1, r2, [r0]
 80181a8:	f880 c00c 	strb.w	ip, [r0, #12]
 80181ac:	b1d3      	cbz	r3, 80181e4 <uxr_init_output_reliable_stream+0x48>
 80181ae:	f8c1 c000 	str.w	ip, [r1]
 80181b2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80181b6:	f1bc 0f01 	cmp.w	ip, #1
 80181ba:	d913      	bls.n	80181e4 <uxr_init_output_reliable_stream+0x48>
 80181bc:	2301      	movs	r3, #1
 80181be:	fbb3 f1fc 	udiv	r1, r3, ip
 80181c2:	fb0c 3111 	mls	r1, ip, r1, r3
 80181c6:	b289      	uxth	r1, r1
 80181c8:	6842      	ldr	r2, [r0, #4]
 80181ca:	6804      	ldr	r4, [r0, #0]
 80181cc:	fbb2 f2fc 	udiv	r2, r2, ip
 80181d0:	fb01 f202 	mul.w	r2, r1, r2
 80181d4:	7b01      	ldrb	r1, [r0, #12]
 80181d6:	50a1      	str	r1, [r4, r2]
 80181d8:	3301      	adds	r3, #1
 80181da:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80181de:	b29b      	uxth	r3, r3
 80181e0:	459c      	cmp	ip, r3
 80181e2:	d8ec      	bhi.n	80181be <uxr_init_output_reliable_stream+0x22>
 80181e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80181e8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80181ec:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80181f0:	4905      	ldr	r1, [pc, #20]	@ (8018208 <uxr_init_output_reliable_stream+0x6c>)
 80181f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80181f6:	f8c0 100e 	str.w	r1, [r0, #14]
 80181fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80181fe:	2300      	movs	r3, #0
 8018200:	8242      	strh	r2, [r0, #18]
 8018202:	8403      	strh	r3, [r0, #32]
 8018204:	4770      	bx	lr
 8018206:	bf00      	nop
 8018208:	ffff0000 	.word	0xffff0000

0801820c <uxr_reset_output_reliable_stream>:
 801820c:	8901      	ldrh	r1, [r0, #8]
 801820e:	b1b1      	cbz	r1, 801823e <uxr_reset_output_reliable_stream+0x32>
 8018210:	f04f 0c00 	mov.w	ip, #0
 8018214:	4663      	mov	r3, ip
 8018216:	fbb3 f2f1 	udiv	r2, r3, r1
 801821a:	fb01 3312 	mls	r3, r1, r2, r3
 801821e:	b29b      	uxth	r3, r3
 8018220:	6842      	ldr	r2, [r0, #4]
 8018222:	fbb2 f2f1 	udiv	r2, r2, r1
 8018226:	6801      	ldr	r1, [r0, #0]
 8018228:	fb02 f303 	mul.w	r3, r2, r3
 801822c:	7b02      	ldrb	r2, [r0, #12]
 801822e:	50ca      	str	r2, [r1, r3]
 8018230:	f10c 0c01 	add.w	ip, ip, #1
 8018234:	8901      	ldrh	r1, [r0, #8]
 8018236:	fa1f f38c 	uxth.w	r3, ip
 801823a:	4299      	cmp	r1, r3
 801823c:	d8eb      	bhi.n	8018216 <uxr_reset_output_reliable_stream+0xa>
 801823e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018242:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8018246:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801824a:	4904      	ldr	r1, [pc, #16]	@ (801825c <uxr_reset_output_reliable_stream+0x50>)
 801824c:	f8c0 100e 	str.w	r1, [r0, #14]
 8018250:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018254:	2300      	movs	r3, #0
 8018256:	8242      	strh	r2, [r0, #18]
 8018258:	8403      	strh	r3, [r0, #32]
 801825a:	4770      	bx	lr
 801825c:	ffff0000 	.word	0xffff0000

08018260 <uxr_prepare_reliable_buffer_to_write>:
 8018260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018264:	4604      	mov	r4, r0
 8018266:	b091      	sub	sp, #68	@ 0x44
 8018268:	8900      	ldrh	r0, [r0, #8]
 801826a:	89e6      	ldrh	r6, [r4, #14]
 801826c:	6823      	ldr	r3, [r4, #0]
 801826e:	9204      	str	r2, [sp, #16]
 8018270:	fbb6 f2f0 	udiv	r2, r6, r0
 8018274:	fb00 6212 	mls	r2, r0, r2, r6
 8018278:	b292      	uxth	r2, r2
 801827a:	6865      	ldr	r5, [r4, #4]
 801827c:	fbb5 f5f0 	udiv	r5, r5, r0
 8018280:	fb05 3202 	mla	r2, r5, r2, r3
 8018284:	3204      	adds	r2, #4
 8018286:	f852 8c04 	ldr.w	r8, [r2, #-4]
 801828a:	f894 900c 	ldrb.w	r9, [r4, #12]
 801828e:	9203      	str	r2, [sp, #12]
 8018290:	468b      	mov	fp, r1
 8018292:	1f2f      	subs	r7, r5, #4
 8018294:	2800      	cmp	r0, #0
 8018296:	f000 814c 	beq.w	8018532 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801829a:	f04f 0c00 	mov.w	ip, #0
 801829e:	46e2      	mov	sl, ip
 80182a0:	4661      	mov	r1, ip
 80182a2:	fbb1 f2f0 	udiv	r2, r1, r0
 80182a6:	fb00 1212 	mls	r2, r0, r2, r1
 80182aa:	b292      	uxth	r2, r2
 80182ac:	fb05 f202 	mul.w	r2, r5, r2
 80182b0:	f10c 0c01 	add.w	ip, ip, #1
 80182b4:	589a      	ldr	r2, [r3, r2]
 80182b6:	454a      	cmp	r2, r9
 80182b8:	bf08      	it	eq
 80182ba:	f10a 0a01 	addeq.w	sl, sl, #1
 80182be:	fa1f f18c 	uxth.w	r1, ip
 80182c2:	bf08      	it	eq
 80182c4:	fa1f fa8a 	uxtheq.w	sl, sl
 80182c8:	4281      	cmp	r1, r0
 80182ca:	d3ea      	bcc.n	80182a2 <uxr_prepare_reliable_buffer_to_write+0x42>
 80182cc:	4640      	mov	r0, r8
 80182ce:	2104      	movs	r1, #4
 80182d0:	f8cd a014 	str.w	sl, [sp, #20]
 80182d4:	f7f3 fd36 	bl	800bd44 <ucdr_alignment>
 80182d8:	4480      	add	r8, r0
 80182da:	eb08 020b 	add.w	r2, r8, fp
 80182de:	42ba      	cmp	r2, r7
 80182e0:	f240 80cd 	bls.w	801847e <uxr_prepare_reliable_buffer_to_write+0x21e>
 80182e4:	7b22      	ldrb	r2, [r4, #12]
 80182e6:	445a      	add	r2, fp
 80182e8:	42ba      	cmp	r2, r7
 80182ea:	f240 80b5 	bls.w	8018458 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 80182ee:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 80182f2:	33fc      	adds	r3, #252	@ 0xfc
 80182f4:	b2ba      	uxth	r2, r7
 80182f6:	4413      	add	r3, r2
 80182f8:	b29b      	uxth	r3, r3
 80182fa:	fb0a f903 	mul.w	r9, sl, r3
 80182fe:	45d9      	cmp	r9, fp
 8018300:	9305      	str	r3, [sp, #20]
 8018302:	9306      	str	r3, [sp, #24]
 8018304:	f0c0 80b7 	bcc.w	8018476 <uxr_prepare_reliable_buffer_to_write+0x216>
 8018308:	f108 0304 	add.w	r3, r8, #4
 801830c:	42bb      	cmp	r3, r7
 801830e:	f080 80db 	bcs.w	80184c8 <uxr_prepare_reliable_buffer_to_write+0x268>
 8018312:	f1a2 0904 	sub.w	r9, r2, #4
 8018316:	eba9 0908 	sub.w	r9, r9, r8
 801831a:	9b05      	ldr	r3, [sp, #20]
 801831c:	fa1f f989 	uxth.w	r9, r9
 8018320:	ebab 0b09 	sub.w	fp, fp, r9
 8018324:	fbbb f2f3 	udiv	r2, fp, r3
 8018328:	fb03 b312 	mls	r3, r3, r2, fp
 801832c:	2b00      	cmp	r3, #0
 801832e:	f000 80c8 	beq.w	80184c2 <uxr_prepare_reliable_buffer_to_write+0x262>
 8018332:	3201      	adds	r2, #1
 8018334:	b292      	uxth	r2, r2
 8018336:	9306      	str	r3, [sp, #24]
 8018338:	4552      	cmp	r2, sl
 801833a:	f200 809c 	bhi.w	8018476 <uxr_prepare_reliable_buffer_to_write+0x216>
 801833e:	f10d 0b20 	add.w	fp, sp, #32
 8018342:	2a00      	cmp	r2, #0
 8018344:	d042      	beq.n	80183cc <uxr_prepare_reliable_buffer_to_write+0x16c>
 8018346:	f8cd 801c 	str.w	r8, [sp, #28]
 801834a:	f04f 0a00 	mov.w	sl, #0
 801834e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8018352:	9505      	str	r5, [sp, #20]
 8018354:	f10d 0b20 	add.w	fp, sp, #32
 8018358:	4615      	mov	r5, r2
 801835a:	e000      	b.n	801835e <uxr_prepare_reliable_buffer_to_write+0xfe>
 801835c:	46c1      	mov	r9, r8
 801835e:	8920      	ldrh	r0, [r4, #8]
 8018360:	fbb6 f2f0 	udiv	r2, r6, r0
 8018364:	fb00 6112 	mls	r1, r0, r2, r6
 8018368:	b28a      	uxth	r2, r1
 801836a:	6863      	ldr	r3, [r4, #4]
 801836c:	fbb3 f1f0 	udiv	r1, r3, r0
 8018370:	6823      	ldr	r3, [r4, #0]
 8018372:	fb02 f101 	mul.w	r1, r2, r1
 8018376:	3104      	adds	r1, #4
 8018378:	4419      	add	r1, r3
 801837a:	4658      	mov	r0, fp
 801837c:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8018380:	9200      	str	r2, [sp, #0]
 8018382:	2300      	movs	r3, #0
 8018384:	463a      	mov	r2, r7
 8018386:	f7f3 fcc7 	bl	800bd18 <ucdr_init_buffer_origin_offset>
 801838a:	464a      	mov	r2, r9
 801838c:	2300      	movs	r3, #0
 801838e:	210d      	movs	r1, #13
 8018390:	4658      	mov	r0, fp
 8018392:	f7fa ff29 	bl	80131e8 <uxr_buffer_submessage_header>
 8018396:	8921      	ldrh	r1, [r4, #8]
 8018398:	fbb6 f2f1 	udiv	r2, r6, r1
 801839c:	fb01 6212 	mls	r2, r1, r2, r6
 80183a0:	b292      	uxth	r2, r2
 80183a2:	6863      	ldr	r3, [r4, #4]
 80183a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80183a8:	fb02 f303 	mul.w	r3, r2, r3
 80183ac:	6822      	ldr	r2, [r4, #0]
 80183ae:	4630      	mov	r0, r6
 80183b0:	50d7      	str	r7, [r2, r3]
 80183b2:	2101      	movs	r1, #1
 80183b4:	f000 f9c4 	bl	8018740 <uxr_seq_num_add>
 80183b8:	f10a 0a01 	add.w	sl, sl, #1
 80183bc:	fa1f f38a 	uxth.w	r3, sl
 80183c0:	429d      	cmp	r5, r3
 80183c2:	4606      	mov	r6, r0
 80183c4:	d8ca      	bhi.n	801835c <uxr_prepare_reliable_buffer_to_write+0xfc>
 80183c6:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80183ca:	9d05      	ldr	r5, [sp, #20]
 80183cc:	8920      	ldrh	r0, [r4, #8]
 80183ce:	fbb6 f3f0 	udiv	r3, r6, r0
 80183d2:	fb00 6313 	mls	r3, r0, r3, r6
 80183d6:	b299      	uxth	r1, r3
 80183d8:	6863      	ldr	r3, [r4, #4]
 80183da:	fbb3 f3f0 	udiv	r3, r3, r0
 80183de:	fb01 f303 	mul.w	r3, r1, r3
 80183e2:	6821      	ldr	r1, [r4, #0]
 80183e4:	3304      	adds	r3, #4
 80183e6:	4419      	add	r1, r3
 80183e8:	463a      	mov	r2, r7
 80183ea:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80183ee:	9000      	str	r0, [sp, #0]
 80183f0:	2300      	movs	r3, #0
 80183f2:	4658      	mov	r0, fp
 80183f4:	f7f3 fc90 	bl	800bd18 <ucdr_init_buffer_origin_offset>
 80183f8:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80183fc:	4658      	mov	r0, fp
 80183fe:	fa1f f289 	uxth.w	r2, r9
 8018402:	2302      	movs	r3, #2
 8018404:	210d      	movs	r1, #13
 8018406:	f7fa feef 	bl	80131e8 <uxr_buffer_submessage_header>
 801840a:	9b03      	ldr	r3, [sp, #12]
 801840c:	8927      	ldrh	r7, [r4, #8]
 801840e:	7b20      	ldrb	r0, [r4, #12]
 8018410:	f108 0104 	add.w	r1, r8, #4
 8018414:	440b      	add	r3, r1
 8018416:	4619      	mov	r1, r3
 8018418:	fbb6 f3f7 	udiv	r3, r6, r7
 801841c:	fb07 6313 	mls	r3, r7, r3, r6
 8018420:	f1a5 0208 	sub.w	r2, r5, #8
 8018424:	b29d      	uxth	r5, r3
 8018426:	3004      	adds	r0, #4
 8018428:	6863      	ldr	r3, [r4, #4]
 801842a:	fbb3 f3f7 	udiv	r3, r3, r7
 801842e:	fb05 f303 	mul.w	r3, r5, r3
 8018432:	6825      	ldr	r5, [r4, #0]
 8018434:	4448      	add	r0, r9
 8018436:	50e8      	str	r0, [r5, r3]
 8018438:	9d04      	ldr	r5, [sp, #16]
 801843a:	eba2 0208 	sub.w	r2, r2, r8
 801843e:	4628      	mov	r0, r5
 8018440:	f7f3 fc7c 	bl	800bd3c <ucdr_init_buffer>
 8018444:	4628      	mov	r0, r5
 8018446:	493c      	ldr	r1, [pc, #240]	@ (8018538 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8018448:	4622      	mov	r2, r4
 801844a:	f7f3 fc4b 	bl	800bce4 <ucdr_set_on_full_buffer_callback>
 801844e:	2001      	movs	r0, #1
 8018450:	81e6      	strh	r6, [r4, #14]
 8018452:	b011      	add	sp, #68	@ 0x44
 8018454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018458:	2101      	movs	r1, #1
 801845a:	89e0      	ldrh	r0, [r4, #14]
 801845c:	f000 f970 	bl	8018740 <uxr_seq_num_add>
 8018460:	8921      	ldrh	r1, [r4, #8]
 8018462:	4605      	mov	r5, r0
 8018464:	8a60      	ldrh	r0, [r4, #18]
 8018466:	f000 f96b 	bl	8018740 <uxr_seq_num_add>
 801846a:	4601      	mov	r1, r0
 801846c:	4628      	mov	r0, r5
 801846e:	f000 f96f 	bl	8018750 <uxr_seq_num_cmp>
 8018472:	2800      	cmp	r0, #0
 8018474:	dd42      	ble.n	80184fc <uxr_prepare_reliable_buffer_to_write+0x29c>
 8018476:	2000      	movs	r0, #0
 8018478:	b011      	add	sp, #68	@ 0x44
 801847a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801847e:	8921      	ldrh	r1, [r4, #8]
 8018480:	8a60      	ldrh	r0, [r4, #18]
 8018482:	9205      	str	r2, [sp, #20]
 8018484:	f000 f95c 	bl	8018740 <uxr_seq_num_add>
 8018488:	4601      	mov	r1, r0
 801848a:	4630      	mov	r0, r6
 801848c:	f000 f960 	bl	8018750 <uxr_seq_num_cmp>
 8018490:	2800      	cmp	r0, #0
 8018492:	9a05      	ldr	r2, [sp, #20]
 8018494:	dcef      	bgt.n	8018476 <uxr_prepare_reliable_buffer_to_write+0x216>
 8018496:	8927      	ldrh	r7, [r4, #8]
 8018498:	fbb6 f3f7 	udiv	r3, r6, r7
 801849c:	fb07 6313 	mls	r3, r7, r3, r6
 80184a0:	b29d      	uxth	r5, r3
 80184a2:	6863      	ldr	r3, [r4, #4]
 80184a4:	6824      	ldr	r4, [r4, #0]
 80184a6:	fbb3 f3f7 	udiv	r3, r3, r7
 80184aa:	fb05 f303 	mul.w	r3, r5, r3
 80184ae:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80184b2:	50e2      	str	r2, [r4, r3]
 80184b4:	2300      	movs	r3, #0
 80184b6:	f8cd 8000 	str.w	r8, [sp]
 80184ba:	f7f3 fc2d 	bl	800bd18 <ucdr_init_buffer_origin_offset>
 80184be:	2001      	movs	r0, #1
 80184c0:	e7da      	b.n	8018478 <uxr_prepare_reliable_buffer_to_write+0x218>
 80184c2:	b293      	uxth	r3, r2
 80184c4:	461a      	mov	r2, r3
 80184c6:	e737      	b.n	8018338 <uxr_prepare_reliable_buffer_to_write+0xd8>
 80184c8:	4630      	mov	r0, r6
 80184ca:	2101      	movs	r1, #1
 80184cc:	9207      	str	r2, [sp, #28]
 80184ce:	f000 f937 	bl	8018740 <uxr_seq_num_add>
 80184d2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80184d6:	fbb0 f1fc 	udiv	r1, r0, ip
 80184da:	fb0c 0111 	mls	r1, ip, r1, r0
 80184de:	4606      	mov	r6, r0
 80184e0:	b288      	uxth	r0, r1
 80184e2:	6863      	ldr	r3, [r4, #4]
 80184e4:	fbb3 f1fc 	udiv	r1, r3, ip
 80184e8:	6823      	ldr	r3, [r4, #0]
 80184ea:	9a07      	ldr	r2, [sp, #28]
 80184ec:	fb00 f101 	mul.w	r1, r0, r1
 80184f0:	3104      	adds	r1, #4
 80184f2:	440b      	add	r3, r1
 80184f4:	9303      	str	r3, [sp, #12]
 80184f6:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80184fa:	e70a      	b.n	8018312 <uxr_prepare_reliable_buffer_to_write+0xb2>
 80184fc:	8921      	ldrh	r1, [r4, #8]
 80184fe:	fbb5 f3f1 	udiv	r3, r5, r1
 8018502:	fb01 5313 	mls	r3, r1, r3, r5
 8018506:	b29a      	uxth	r2, r3
 8018508:	6863      	ldr	r3, [r4, #4]
 801850a:	fbb3 f3f1 	udiv	r3, r3, r1
 801850e:	6821      	ldr	r1, [r4, #0]
 8018510:	9804      	ldr	r0, [sp, #16]
 8018512:	fb02 f303 	mul.w	r3, r2, r3
 8018516:	3304      	adds	r3, #4
 8018518:	7b22      	ldrb	r2, [r4, #12]
 801851a:	4419      	add	r1, r3
 801851c:	445a      	add	r2, fp
 801851e:	f841 2c04 	str.w	r2, [r1, #-4]
 8018522:	7b23      	ldrb	r3, [r4, #12]
 8018524:	9300      	str	r3, [sp, #0]
 8018526:	2300      	movs	r3, #0
 8018528:	f7f3 fbf6 	bl	800bd18 <ucdr_init_buffer_origin_offset>
 801852c:	81e5      	strh	r5, [r4, #14]
 801852e:	2001      	movs	r0, #1
 8018530:	e7a2      	b.n	8018478 <uxr_prepare_reliable_buffer_to_write+0x218>
 8018532:	4682      	mov	sl, r0
 8018534:	e6ca      	b.n	80182cc <uxr_prepare_reliable_buffer_to_write+0x6c>
 8018536:	bf00      	nop
 8018538:	08018141 	.word	0x08018141

0801853c <uxr_prepare_next_reliable_buffer_to_send>:
 801853c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801853e:	4604      	mov	r4, r0
 8018540:	460f      	mov	r7, r1
 8018542:	8a00      	ldrh	r0, [r0, #16]
 8018544:	2101      	movs	r1, #1
 8018546:	4616      	mov	r6, r2
 8018548:	461d      	mov	r5, r3
 801854a:	f000 f8f9 	bl	8018740 <uxr_seq_num_add>
 801854e:	8028      	strh	r0, [r5, #0]
 8018550:	8922      	ldrh	r2, [r4, #8]
 8018552:	fbb0 f3f2 	udiv	r3, r0, r2
 8018556:	fb02 0c13 	mls	ip, r2, r3, r0
 801855a:	fa1f fc8c 	uxth.w	ip, ip
 801855e:	6863      	ldr	r3, [r4, #4]
 8018560:	fbb3 f3f2 	udiv	r3, r3, r2
 8018564:	fb0c fc03 	mul.w	ip, ip, r3
 8018568:	6823      	ldr	r3, [r4, #0]
 801856a:	89e1      	ldrh	r1, [r4, #14]
 801856c:	f10c 0c04 	add.w	ip, ip, #4
 8018570:	4463      	add	r3, ip
 8018572:	603b      	str	r3, [r7, #0]
 8018574:	6823      	ldr	r3, [r4, #0]
 8018576:	449c      	add	ip, r3
 8018578:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801857c:	6033      	str	r3, [r6, #0]
 801857e:	f000 f8e7 	bl	8018750 <uxr_seq_num_cmp>
 8018582:	2800      	cmp	r0, #0
 8018584:	dd01      	ble.n	801858a <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8018586:	2000      	movs	r0, #0
 8018588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801858a:	7b23      	ldrb	r3, [r4, #12]
 801858c:	6832      	ldr	r2, [r6, #0]
 801858e:	429a      	cmp	r2, r3
 8018590:	d9f9      	bls.n	8018586 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018592:	8a61      	ldrh	r1, [r4, #18]
 8018594:	8a20      	ldrh	r0, [r4, #16]
 8018596:	f000 f8d7 	bl	8018748 <uxr_seq_num_sub>
 801859a:	8923      	ldrh	r3, [r4, #8]
 801859c:	4283      	cmp	r3, r0
 801859e:	d0f2      	beq.n	8018586 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80185a0:	8828      	ldrh	r0, [r5, #0]
 80185a2:	89e3      	ldrh	r3, [r4, #14]
 80185a4:	8220      	strh	r0, [r4, #16]
 80185a6:	4298      	cmp	r0, r3
 80185a8:	d001      	beq.n	80185ae <uxr_prepare_next_reliable_buffer_to_send+0x72>
 80185aa:	2001      	movs	r0, #1
 80185ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80185ae:	2101      	movs	r1, #1
 80185b0:	f000 f8c6 	bl	8018740 <uxr_seq_num_add>
 80185b4:	81e0      	strh	r0, [r4, #14]
 80185b6:	2001      	movs	r0, #1
 80185b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80185ba:	bf00      	nop

080185bc <uxr_update_output_stream_heartbeat_timestamp>:
 80185bc:	b570      	push	{r4, r5, r6, lr}
 80185be:	8a01      	ldrh	r1, [r0, #16]
 80185c0:	4604      	mov	r4, r0
 80185c2:	8a40      	ldrh	r0, [r0, #18]
 80185c4:	4615      	mov	r5, r2
 80185c6:	461e      	mov	r6, r3
 80185c8:	f000 f8c2 	bl	8018750 <uxr_seq_num_cmp>
 80185cc:	2800      	cmp	r0, #0
 80185ce:	db07      	blt.n	80185e0 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80185d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80185d4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80185d8:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80185dc:	2000      	movs	r0, #0
 80185de:	bd70      	pop	{r4, r5, r6, pc}
 80185e0:	f894 0020 	ldrb.w	r0, [r4, #32]
 80185e4:	b940      	cbnz	r0, 80185f8 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 80185e6:	2301      	movs	r3, #1
 80185e8:	f884 3020 	strb.w	r3, [r4, #32]
 80185ec:	3564      	adds	r5, #100	@ 0x64
 80185ee:	f146 0600 	adc.w	r6, r6, #0
 80185f2:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80185f6:	bd70      	pop	{r4, r5, r6, pc}
 80185f8:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80185fc:	4295      	cmp	r5, r2
 80185fe:	eb76 0303 	sbcs.w	r3, r6, r3
 8018602:	bfa5      	ittet	ge
 8018604:	3001      	addge	r0, #1
 8018606:	f884 0020 	strbge.w	r0, [r4, #32]
 801860a:	2000      	movlt	r0, #0
 801860c:	2001      	movge	r0, #1
 801860e:	e7ed      	b.n	80185ec <uxr_update_output_stream_heartbeat_timestamp+0x30>

08018610 <uxr_begin_output_nack_buffer_it>:
 8018610:	8a40      	ldrh	r0, [r0, #18]
 8018612:	4770      	bx	lr

08018614 <uxr_next_reliable_nack_buffer_to_send>:
 8018614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018618:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 801861c:	b082      	sub	sp, #8
 801861e:	f1b8 0f00 	cmp.w	r8, #0
 8018622:	d011      	beq.n	8018648 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8018624:	4604      	mov	r4, r0
 8018626:	8818      	ldrh	r0, [r3, #0]
 8018628:	460e      	mov	r6, r1
 801862a:	4617      	mov	r7, r2
 801862c:	461d      	mov	r5, r3
 801862e:	2101      	movs	r1, #1
 8018630:	f000 f886 	bl	8018740 <uxr_seq_num_add>
 8018634:	8028      	strh	r0, [r5, #0]
 8018636:	8a21      	ldrh	r1, [r4, #16]
 8018638:	f000 f88a 	bl	8018750 <uxr_seq_num_cmp>
 801863c:	2800      	cmp	r0, #0
 801863e:	dd07      	ble.n	8018650 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8018640:	f04f 0800 	mov.w	r8, #0
 8018644:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8018648:	4640      	mov	r0, r8
 801864a:	b002      	add	sp, #8
 801864c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018650:	8921      	ldrh	r1, [r4, #8]
 8018652:	8828      	ldrh	r0, [r5, #0]
 8018654:	6823      	ldr	r3, [r4, #0]
 8018656:	fbb0 f2f1 	udiv	r2, r0, r1
 801865a:	fb01 0c12 	mls	ip, r1, r2, r0
 801865e:	fa1f f28c 	uxth.w	r2, ip
 8018662:	9301      	str	r3, [sp, #4]
 8018664:	6863      	ldr	r3, [r4, #4]
 8018666:	fbb3 fcf1 	udiv	ip, r3, r1
 801866a:	9b01      	ldr	r3, [sp, #4]
 801866c:	fb02 fc0c 	mul.w	ip, r2, ip
 8018670:	f10c 0c04 	add.w	ip, ip, #4
 8018674:	4463      	add	r3, ip
 8018676:	6033      	str	r3, [r6, #0]
 8018678:	6823      	ldr	r3, [r4, #0]
 801867a:	4463      	add	r3, ip
 801867c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8018680:	603b      	str	r3, [r7, #0]
 8018682:	7b22      	ldrb	r2, [r4, #12]
 8018684:	429a      	cmp	r2, r3
 8018686:	d0d2      	beq.n	801862e <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8018688:	4640      	mov	r0, r8
 801868a:	b002      	add	sp, #8
 801868c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018690 <uxr_process_acknack>:
 8018690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018692:	4604      	mov	r4, r0
 8018694:	460e      	mov	r6, r1
 8018696:	4610      	mov	r0, r2
 8018698:	2101      	movs	r1, #1
 801869a:	f000 f855 	bl	8018748 <uxr_seq_num_sub>
 801869e:	8a61      	ldrh	r1, [r4, #18]
 80186a0:	f000 f852 	bl	8018748 <uxr_seq_num_sub>
 80186a4:	b1c0      	cbz	r0, 80186d8 <uxr_process_acknack+0x48>
 80186a6:	4605      	mov	r5, r0
 80186a8:	2700      	movs	r7, #0
 80186aa:	2101      	movs	r1, #1
 80186ac:	8a60      	ldrh	r0, [r4, #18]
 80186ae:	f000 f847 	bl	8018740 <uxr_seq_num_add>
 80186b2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80186b6:	fbb0 f1fc 	udiv	r1, r0, ip
 80186ba:	e9d4 2300 	ldrd	r2, r3, [r4]
 80186be:	fb0c 0111 	mls	r1, ip, r1, r0
 80186c2:	b289      	uxth	r1, r1
 80186c4:	3701      	adds	r7, #1
 80186c6:	fbb3 f3fc 	udiv	r3, r3, ip
 80186ca:	fb01 f303 	mul.w	r3, r1, r3
 80186ce:	42bd      	cmp	r5, r7
 80186d0:	7b21      	ldrb	r1, [r4, #12]
 80186d2:	8260      	strh	r0, [r4, #18]
 80186d4:	50d1      	str	r1, [r2, r3]
 80186d6:	d1e8      	bne.n	80186aa <uxr_process_acknack+0x1a>
 80186d8:	3e00      	subs	r6, #0
 80186da:	f04f 0300 	mov.w	r3, #0
 80186de:	bf18      	it	ne
 80186e0:	2601      	movne	r6, #1
 80186e2:	f884 3020 	strb.w	r3, [r4, #32]
 80186e6:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 80186ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080186ec <uxr_is_output_up_to_date>:
 80186ec:	8a01      	ldrh	r1, [r0, #16]
 80186ee:	8a40      	ldrh	r0, [r0, #18]
 80186f0:	b508      	push	{r3, lr}
 80186f2:	f000 f82d 	bl	8018750 <uxr_seq_num_cmp>
 80186f6:	fab0 f080 	clz	r0, r0
 80186fa:	0940      	lsrs	r0, r0, #5
 80186fc:	bd08      	pop	{r3, pc}
 80186fe:	bf00      	nop

08018700 <get_available_free_slots>:
 8018700:	8902      	ldrh	r2, [r0, #8]
 8018702:	b1da      	cbz	r2, 801873c <get_available_free_slots+0x3c>
 8018704:	b530      	push	{r4, r5, lr}
 8018706:	2100      	movs	r1, #0
 8018708:	6843      	ldr	r3, [r0, #4]
 801870a:	6805      	ldr	r5, [r0, #0]
 801870c:	7b04      	ldrb	r4, [r0, #12]
 801870e:	fbb3 fef2 	udiv	lr, r3, r2
 8018712:	4608      	mov	r0, r1
 8018714:	460b      	mov	r3, r1
 8018716:	fbb3 fcf2 	udiv	ip, r3, r2
 801871a:	fb02 331c 	mls	r3, r2, ip, r3
 801871e:	b29b      	uxth	r3, r3
 8018720:	fb0e f303 	mul.w	r3, lr, r3
 8018724:	3101      	adds	r1, #1
 8018726:	f855 c003 	ldr.w	ip, [r5, r3]
 801872a:	4564      	cmp	r4, ip
 801872c:	bf08      	it	eq
 801872e:	3001      	addeq	r0, #1
 8018730:	b28b      	uxth	r3, r1
 8018732:	bf08      	it	eq
 8018734:	b280      	uxtheq	r0, r0
 8018736:	4293      	cmp	r3, r2
 8018738:	d3ed      	bcc.n	8018716 <get_available_free_slots+0x16>
 801873a:	bd30      	pop	{r4, r5, pc}
 801873c:	4610      	mov	r0, r2
 801873e:	4770      	bx	lr

08018740 <uxr_seq_num_add>:
 8018740:	4408      	add	r0, r1
 8018742:	b280      	uxth	r0, r0
 8018744:	4770      	bx	lr
 8018746:	bf00      	nop

08018748 <uxr_seq_num_sub>:
 8018748:	1a40      	subs	r0, r0, r1
 801874a:	b280      	uxth	r0, r0
 801874c:	4770      	bx	lr
 801874e:	bf00      	nop

08018750 <uxr_seq_num_cmp>:
 8018750:	4288      	cmp	r0, r1
 8018752:	d011      	beq.n	8018778 <uxr_seq_num_cmp+0x28>
 8018754:	d309      	bcc.n	801876a <uxr_seq_num_cmp+0x1a>
 8018756:	4288      	cmp	r0, r1
 8018758:	d910      	bls.n	801877c <uxr_seq_num_cmp+0x2c>
 801875a:	1a40      	subs	r0, r0, r1
 801875c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8018760:	bfd4      	ite	le
 8018762:	2001      	movle	r0, #1
 8018764:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8018768:	4770      	bx	lr
 801876a:	1a0b      	subs	r3, r1, r0
 801876c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8018770:	daf1      	bge.n	8018756 <uxr_seq_num_cmp+0x6>
 8018772:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018776:	4770      	bx	lr
 8018778:	2000      	movs	r0, #0
 801877a:	4770      	bx	lr
 801877c:	2001      	movs	r0, #1
 801877e:	4770      	bx	lr

08018780 <rcl_get_default_domain_id>:
 8018780:	b530      	push	{r4, r5, lr}
 8018782:	b083      	sub	sp, #12
 8018784:	2300      	movs	r3, #0
 8018786:	9300      	str	r3, [sp, #0]
 8018788:	b1d0      	cbz	r0, 80187c0 <rcl_get_default_domain_id+0x40>
 801878a:	4604      	mov	r4, r0
 801878c:	4669      	mov	r1, sp
 801878e:	4815      	ldr	r0, [pc, #84]	@ (80187e4 <rcl_get_default_domain_id+0x64>)
 8018790:	f7f5 fd94 	bl	800e2bc <rcutils_get_env>
 8018794:	4602      	mov	r2, r0
 8018796:	b110      	cbz	r0, 801879e <rcl_get_default_domain_id+0x1e>
 8018798:	2001      	movs	r0, #1
 801879a:	b003      	add	sp, #12
 801879c:	bd30      	pop	{r4, r5, pc}
 801879e:	9b00      	ldr	r3, [sp, #0]
 80187a0:	b18b      	cbz	r3, 80187c6 <rcl_get_default_domain_id+0x46>
 80187a2:	7818      	ldrb	r0, [r3, #0]
 80187a4:	2800      	cmp	r0, #0
 80187a6:	d0f8      	beq.n	801879a <rcl_get_default_domain_id+0x1a>
 80187a8:	a901      	add	r1, sp, #4
 80187aa:	4618      	mov	r0, r3
 80187ac:	9201      	str	r2, [sp, #4]
 80187ae:	f000 fd85 	bl	80192bc <strtoul>
 80187b2:	4605      	mov	r5, r0
 80187b4:	b150      	cbz	r0, 80187cc <rcl_get_default_domain_id+0x4c>
 80187b6:	1c43      	adds	r3, r0, #1
 80187b8:	d00d      	beq.n	80187d6 <rcl_get_default_domain_id+0x56>
 80187ba:	6025      	str	r5, [r4, #0]
 80187bc:	2000      	movs	r0, #0
 80187be:	e7ec      	b.n	801879a <rcl_get_default_domain_id+0x1a>
 80187c0:	200b      	movs	r0, #11
 80187c2:	b003      	add	sp, #12
 80187c4:	bd30      	pop	{r4, r5, pc}
 80187c6:	4618      	mov	r0, r3
 80187c8:	b003      	add	sp, #12
 80187ca:	bd30      	pop	{r4, r5, pc}
 80187cc:	9b01      	ldr	r3, [sp, #4]
 80187ce:	781b      	ldrb	r3, [r3, #0]
 80187d0:	2b00      	cmp	r3, #0
 80187d2:	d0f2      	beq.n	80187ba <rcl_get_default_domain_id+0x3a>
 80187d4:	e7e0      	b.n	8018798 <rcl_get_default_domain_id+0x18>
 80187d6:	f001 f8b1 	bl	801993c <__errno>
 80187da:	6803      	ldr	r3, [r0, #0]
 80187dc:	2b22      	cmp	r3, #34	@ 0x22
 80187de:	d1ec      	bne.n	80187ba <rcl_get_default_domain_id+0x3a>
 80187e0:	e7da      	b.n	8018798 <rcl_get_default_domain_id+0x18>
 80187e2:	bf00      	nop
 80187e4:	0801aff4 	.word	0x0801aff4

080187e8 <rcl_expand_topic_name>:
 80187e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187ec:	b08b      	sub	sp, #44	@ 0x2c
 80187ee:	9306      	str	r3, [sp, #24]
 80187f0:	2800      	cmp	r0, #0
 80187f2:	f000 80ad 	beq.w	8018950 <rcl_expand_topic_name+0x168>
 80187f6:	460e      	mov	r6, r1
 80187f8:	2900      	cmp	r1, #0
 80187fa:	f000 80a9 	beq.w	8018950 <rcl_expand_topic_name+0x168>
 80187fe:	4617      	mov	r7, r2
 8018800:	2a00      	cmp	r2, #0
 8018802:	f000 80a5 	beq.w	8018950 <rcl_expand_topic_name+0x168>
 8018806:	2b00      	cmp	r3, #0
 8018808:	f000 80a2 	beq.w	8018950 <rcl_expand_topic_name+0x168>
 801880c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801880e:	2b00      	cmp	r3, #0
 8018810:	f000 809e 	beq.w	8018950 <rcl_expand_topic_name+0x168>
 8018814:	2200      	movs	r2, #0
 8018816:	a909      	add	r1, sp, #36	@ 0x24
 8018818:	4680      	mov	r8, r0
 801881a:	f000 f949 	bl	8018ab0 <rcl_validate_topic_name>
 801881e:	4604      	mov	r4, r0
 8018820:	2800      	cmp	r0, #0
 8018822:	f040 8096 	bne.w	8018952 <rcl_expand_topic_name+0x16a>
 8018826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018828:	2b00      	cmp	r3, #0
 801882a:	f040 809a 	bne.w	8018962 <rcl_expand_topic_name+0x17a>
 801882e:	4602      	mov	r2, r0
 8018830:	a909      	add	r1, sp, #36	@ 0x24
 8018832:	4630      	mov	r0, r6
 8018834:	f7f5 ffe0 	bl	800e7f8 <rmw_validate_node_name>
 8018838:	2800      	cmp	r0, #0
 801883a:	f040 808e 	bne.w	801895a <rcl_expand_topic_name+0x172>
 801883e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018840:	2a00      	cmp	r2, #0
 8018842:	f040 8093 	bne.w	801896c <rcl_expand_topic_name+0x184>
 8018846:	a909      	add	r1, sp, #36	@ 0x24
 8018848:	4638      	mov	r0, r7
 801884a:	f7f5 ffb7 	bl	800e7bc <rmw_validate_namespace>
 801884e:	2800      	cmp	r0, #0
 8018850:	f040 8083 	bne.w	801895a <rcl_expand_topic_name+0x172>
 8018854:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8018856:	2c00      	cmp	r4, #0
 8018858:	f040 80ed 	bne.w	8018a36 <rcl_expand_topic_name+0x24e>
 801885c:	217b      	movs	r1, #123	@ 0x7b
 801885e:	4640      	mov	r0, r8
 8018860:	f000 ffe0 	bl	8019824 <strchr>
 8018864:	f898 3000 	ldrb.w	r3, [r8]
 8018868:	2b2f      	cmp	r3, #47	@ 0x2f
 801886a:	4605      	mov	r5, r0
 801886c:	f000 809e 	beq.w	80189ac <rcl_expand_topic_name+0x1c4>
 8018870:	2b7e      	cmp	r3, #126	@ 0x7e
 8018872:	f040 80a2 	bne.w	80189ba <rcl_expand_topic_name+0x1d2>
 8018876:	4638      	mov	r0, r7
 8018878:	f7e7 fcd4 	bl	8000224 <strlen>
 801887c:	4a82      	ldr	r2, [pc, #520]	@ (8018a88 <rcl_expand_topic_name+0x2a0>)
 801887e:	4b83      	ldr	r3, [pc, #524]	@ (8018a8c <rcl_expand_topic_name+0x2a4>)
 8018880:	2801      	cmp	r0, #1
 8018882:	bf18      	it	ne
 8018884:	4613      	movne	r3, r2
 8018886:	9302      	str	r3, [sp, #8]
 8018888:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801888a:	9300      	str	r3, [sp, #0]
 801888c:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8018890:	f108 0301 	add.w	r3, r8, #1
 8018894:	9305      	str	r3, [sp, #20]
 8018896:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801889a:	9301      	str	r3, [sp, #4]
 801889c:	ab14      	add	r3, sp, #80	@ 0x50
 801889e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80188a0:	f7f5 fd56 	bl	800e350 <rcutils_format_string_limit>
 80188a4:	4682      	mov	sl, r0
 80188a6:	2800      	cmp	r0, #0
 80188a8:	f000 80c7 	beq.w	8018a3a <rcl_expand_topic_name+0x252>
 80188ac:	2d00      	cmp	r5, #0
 80188ae:	f000 80a2 	beq.w	80189f6 <rcl_expand_topic_name+0x20e>
 80188b2:	217b      	movs	r1, #123	@ 0x7b
 80188b4:	f000 ffb6 	bl	8019824 <strchr>
 80188b8:	46d1      	mov	r9, sl
 80188ba:	4605      	mov	r5, r0
 80188bc:	9407      	str	r4, [sp, #28]
 80188be:	46d3      	mov	fp, sl
 80188c0:	464c      	mov	r4, r9
 80188c2:	2d00      	cmp	r5, #0
 80188c4:	f000 80be 	beq.w	8018a44 <rcl_expand_topic_name+0x25c>
 80188c8:	217d      	movs	r1, #125	@ 0x7d
 80188ca:	4620      	mov	r0, r4
 80188cc:	f000 ffaa 	bl	8019824 <strchr>
 80188d0:	eba0 0905 	sub.w	r9, r0, r5
 80188d4:	f109 0a01 	add.w	sl, r9, #1
 80188d8:	486d      	ldr	r0, [pc, #436]	@ (8018a90 <rcl_expand_topic_name+0x2a8>)
 80188da:	4652      	mov	r2, sl
 80188dc:	4629      	mov	r1, r5
 80188de:	f000 ffae 	bl	801983e <strncmp>
 80188e2:	2800      	cmp	r0, #0
 80188e4:	d067      	beq.n	80189b6 <rcl_expand_topic_name+0x1ce>
 80188e6:	486b      	ldr	r0, [pc, #428]	@ (8018a94 <rcl_expand_topic_name+0x2ac>)
 80188e8:	4652      	mov	r2, sl
 80188ea:	4629      	mov	r1, r5
 80188ec:	f000 ffa7 	bl	801983e <strncmp>
 80188f0:	b130      	cbz	r0, 8018900 <rcl_expand_topic_name+0x118>
 80188f2:	4869      	ldr	r0, [pc, #420]	@ (8018a98 <rcl_expand_topic_name+0x2b0>)
 80188f4:	4652      	mov	r2, sl
 80188f6:	4629      	mov	r1, r5
 80188f8:	f000 ffa1 	bl	801983e <strncmp>
 80188fc:	2800      	cmp	r0, #0
 80188fe:	d137      	bne.n	8018970 <rcl_expand_topic_name+0x188>
 8018900:	46b9      	mov	r9, r7
 8018902:	ab16      	add	r3, sp, #88	@ 0x58
 8018904:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018908:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801890c:	ab14      	add	r3, sp, #80	@ 0x50
 801890e:	4628      	mov	r0, r5
 8018910:	cb0c      	ldmia	r3, {r2, r3}
 8018912:	4651      	mov	r1, sl
 8018914:	f7f5 fe58 	bl	800e5c8 <rcutils_strndup>
 8018918:	4605      	mov	r5, r0
 801891a:	2800      	cmp	r0, #0
 801891c:	f000 809c 	beq.w	8018a58 <rcl_expand_topic_name+0x270>
 8018920:	464a      	mov	r2, r9
 8018922:	4620      	mov	r0, r4
 8018924:	ab14      	add	r3, sp, #80	@ 0x50
 8018926:	4629      	mov	r1, r5
 8018928:	f7f5 fd4c 	bl	800e3c4 <rcutils_repl_str>
 801892c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801892e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018930:	4604      	mov	r4, r0
 8018932:	4628      	mov	r0, r5
 8018934:	4798      	blx	r3
 8018936:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018938:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801893a:	4658      	mov	r0, fp
 801893c:	4798      	blx	r3
 801893e:	2c00      	cmp	r4, #0
 8018940:	d07b      	beq.n	8018a3a <rcl_expand_topic_name+0x252>
 8018942:	217b      	movs	r1, #123	@ 0x7b
 8018944:	4620      	mov	r0, r4
 8018946:	f000 ff6d 	bl	8019824 <strchr>
 801894a:	46a3      	mov	fp, r4
 801894c:	4605      	mov	r5, r0
 801894e:	e7b8      	b.n	80188c2 <rcl_expand_topic_name+0xda>
 8018950:	240b      	movs	r4, #11
 8018952:	4620      	mov	r0, r4
 8018954:	b00b      	add	sp, #44	@ 0x2c
 8018956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801895a:	f7fb ffdb 	bl	8014914 <rcl_convert_rmw_ret_to_rcl_ret>
 801895e:	4604      	mov	r4, r0
 8018960:	e7f7      	b.n	8018952 <rcl_expand_topic_name+0x16a>
 8018962:	2467      	movs	r4, #103	@ 0x67
 8018964:	4620      	mov	r0, r4
 8018966:	b00b      	add	sp, #44	@ 0x2c
 8018968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801896c:	24c9      	movs	r4, #201	@ 0xc9
 801896e:	e7f0      	b.n	8018952 <rcl_expand_topic_name+0x16a>
 8018970:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8018974:	9806      	ldr	r0, [sp, #24]
 8018976:	1c69      	adds	r1, r5, #1
 8018978:	f7fe f934 	bl	8016be4 <rcutils_string_map_getn>
 801897c:	4681      	mov	r9, r0
 801897e:	2800      	cmp	r0, #0
 8018980:	d1bf      	bne.n	8018902 <rcl_expand_topic_name+0x11a>
 8018982:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018984:	aa16      	add	r2, sp, #88	@ 0x58
 8018986:	6018      	str	r0, [r3, #0]
 8018988:	ca07      	ldmia	r2, {r0, r1, r2}
 801898a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801898e:	ab14      	add	r3, sp, #80	@ 0x50
 8018990:	cb0c      	ldmia	r3, {r2, r3}
 8018992:	4651      	mov	r1, sl
 8018994:	4628      	mov	r0, r5
 8018996:	f7f5 fe17 	bl	800e5c8 <rcutils_strndup>
 801899a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801899c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801899e:	4798      	blx	r3
 80189a0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80189a2:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80189a4:	4658      	mov	r0, fp
 80189a6:	2469      	movs	r4, #105	@ 0x69
 80189a8:	4798      	blx	r3
 80189aa:	e7d2      	b.n	8018952 <rcl_expand_topic_name+0x16a>
 80189ac:	2800      	cmp	r0, #0
 80189ae:	d05b      	beq.n	8018a68 <rcl_expand_topic_name+0x280>
 80189b0:	46c1      	mov	r9, r8
 80189b2:	46a2      	mov	sl, r4
 80189b4:	e782      	b.n	80188bc <rcl_expand_topic_name+0xd4>
 80189b6:	46b1      	mov	r9, r6
 80189b8:	e7a3      	b.n	8018902 <rcl_expand_topic_name+0x11a>
 80189ba:	2800      	cmp	r0, #0
 80189bc:	d1f8      	bne.n	80189b0 <rcl_expand_topic_name+0x1c8>
 80189be:	4638      	mov	r0, r7
 80189c0:	f7e7 fc30 	bl	8000224 <strlen>
 80189c4:	4a35      	ldr	r2, [pc, #212]	@ (8018a9c <rcl_expand_topic_name+0x2b4>)
 80189c6:	4b36      	ldr	r3, [pc, #216]	@ (8018aa0 <rcl_expand_topic_name+0x2b8>)
 80189c8:	f8cd 8010 	str.w	r8, [sp, #16]
 80189cc:	2801      	cmp	r0, #1
 80189ce:	bf18      	it	ne
 80189d0:	4613      	movne	r3, r2
 80189d2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80189d6:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80189da:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80189dc:	9703      	str	r7, [sp, #12]
 80189de:	9200      	str	r2, [sp, #0]
 80189e0:	ab14      	add	r3, sp, #80	@ 0x50
 80189e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80189e4:	f7f5 fcb4 	bl	800e350 <rcutils_format_string_limit>
 80189e8:	4682      	mov	sl, r0
 80189ea:	4653      	mov	r3, sl
 80189ec:	b32b      	cbz	r3, 8018a3a <rcl_expand_topic_name+0x252>
 80189ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80189f0:	f8c3 a000 	str.w	sl, [r3]
 80189f4:	e7ad      	b.n	8018952 <rcl_expand_topic_name+0x16a>
 80189f6:	f89a 3000 	ldrb.w	r3, [sl]
 80189fa:	2b2f      	cmp	r3, #47	@ 0x2f
 80189fc:	d0f7      	beq.n	80189ee <rcl_expand_topic_name+0x206>
 80189fe:	4638      	mov	r0, r7
 8018a00:	f7e7 fc10 	bl	8000224 <strlen>
 8018a04:	4a25      	ldr	r2, [pc, #148]	@ (8018a9c <rcl_expand_topic_name+0x2b4>)
 8018a06:	4b26      	ldr	r3, [pc, #152]	@ (8018aa0 <rcl_expand_topic_name+0x2b8>)
 8018a08:	f8cd a010 	str.w	sl, [sp, #16]
 8018a0c:	2801      	cmp	r0, #1
 8018a0e:	bf18      	it	ne
 8018a10:	4613      	movne	r3, r2
 8018a12:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8018a16:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8018a1a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8018a1c:	9703      	str	r7, [sp, #12]
 8018a1e:	9200      	str	r2, [sp, #0]
 8018a20:	ab14      	add	r3, sp, #80	@ 0x50
 8018a22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018a24:	f7f5 fc94 	bl	800e350 <rcutils_format_string_limit>
 8018a28:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018a2a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018a2c:	4605      	mov	r5, r0
 8018a2e:	4650      	mov	r0, sl
 8018a30:	4798      	blx	r3
 8018a32:	46aa      	mov	sl, r5
 8018a34:	e7d9      	b.n	80189ea <rcl_expand_topic_name+0x202>
 8018a36:	24ca      	movs	r4, #202	@ 0xca
 8018a38:	e78b      	b.n	8018952 <rcl_expand_topic_name+0x16a>
 8018a3a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8018a3c:	2300      	movs	r3, #0
 8018a3e:	6013      	str	r3, [r2, #0]
 8018a40:	240a      	movs	r4, #10
 8018a42:	e786      	b.n	8018952 <rcl_expand_topic_name+0x16a>
 8018a44:	465b      	mov	r3, fp
 8018a46:	9c07      	ldr	r4, [sp, #28]
 8018a48:	46da      	mov	sl, fp
 8018a4a:	2b00      	cmp	r3, #0
 8018a4c:	d1d3      	bne.n	80189f6 <rcl_expand_topic_name+0x20e>
 8018a4e:	f898 3000 	ldrb.w	r3, [r8]
 8018a52:	2b2f      	cmp	r3, #47	@ 0x2f
 8018a54:	d0cb      	beq.n	80189ee <rcl_expand_topic_name+0x206>
 8018a56:	e7b2      	b.n	80189be <rcl_expand_topic_name+0x1d6>
 8018a58:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8018a5c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018a5e:	6015      	str	r5, [r2, #0]
 8018a60:	4658      	mov	r0, fp
 8018a62:	4798      	blx	r3
 8018a64:	240a      	movs	r4, #10
 8018a66:	e774      	b.n	8018952 <rcl_expand_topic_name+0x16a>
 8018a68:	ab17      	add	r3, sp, #92	@ 0x5c
 8018a6a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018a6e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8018a72:	ab14      	add	r3, sp, #80	@ 0x50
 8018a74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8018a76:	4640      	mov	r0, r8
 8018a78:	f7f5 fd84 	bl	800e584 <rcutils_strdup>
 8018a7c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018a7e:	2800      	cmp	r0, #0
 8018a80:	6018      	str	r0, [r3, #0]
 8018a82:	bf08      	it	eq
 8018a84:	240a      	moveq	r4, #10
 8018a86:	e764      	b.n	8018952 <rcl_expand_topic_name+0x16a>
 8018a88:	0801b004 	.word	0x0801b004
 8018a8c:	0801ad00 	.word	0x0801ad00
 8018a90:	0801b00c 	.word	0x0801b00c
 8018a94:	0801b014 	.word	0x0801b014
 8018a98:	0801b01c 	.word	0x0801b01c
 8018a9c:	0801a9cc 	.word	0x0801a9cc
 8018aa0:	0801a9c4 	.word	0x0801a9c4

08018aa4 <rcl_get_default_topic_name_substitutions>:
 8018aa4:	2800      	cmp	r0, #0
 8018aa6:	bf0c      	ite	eq
 8018aa8:	200b      	moveq	r0, #11
 8018aaa:	2000      	movne	r0, #0
 8018aac:	4770      	bx	lr
 8018aae:	bf00      	nop

08018ab0 <rcl_validate_topic_name>:
 8018ab0:	2800      	cmp	r0, #0
 8018ab2:	d07a      	beq.n	8018baa <rcl_validate_topic_name+0xfa>
 8018ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018ab8:	460e      	mov	r6, r1
 8018aba:	2900      	cmp	r1, #0
 8018abc:	d07c      	beq.n	8018bb8 <rcl_validate_topic_name+0x108>
 8018abe:	4617      	mov	r7, r2
 8018ac0:	4605      	mov	r5, r0
 8018ac2:	f7e7 fbaf 	bl	8000224 <strlen>
 8018ac6:	b1b0      	cbz	r0, 8018af6 <rcl_validate_topic_name+0x46>
 8018ac8:	f895 9000 	ldrb.w	r9, [r5]
 8018acc:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8018c50 <rcl_validate_topic_name+0x1a0>
 8018ad0:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8018ad4:	f013 0304 	ands.w	r3, r3, #4
 8018ad8:	d169      	bne.n	8018bae <rcl_validate_topic_name+0xfe>
 8018ada:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8018ade:	f815 2008 	ldrb.w	r2, [r5, r8]
 8018ae2:	2a2f      	cmp	r2, #47	@ 0x2f
 8018ae4:	d10e      	bne.n	8018b04 <rcl_validate_topic_name+0x54>
 8018ae6:	2202      	movs	r2, #2
 8018ae8:	6032      	str	r2, [r6, #0]
 8018aea:	b36f      	cbz	r7, 8018b48 <rcl_validate_topic_name+0x98>
 8018aec:	f8c7 8000 	str.w	r8, [r7]
 8018af0:	4618      	mov	r0, r3
 8018af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018af6:	2301      	movs	r3, #1
 8018af8:	6033      	str	r3, [r6, #0]
 8018afa:	b32f      	cbz	r7, 8018b48 <rcl_validate_topic_name+0x98>
 8018afc:	2000      	movs	r0, #0
 8018afe:	6038      	str	r0, [r7, #0]
 8018b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b04:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8018b08:	461c      	mov	r4, r3
 8018b0a:	4619      	mov	r1, r3
 8018b0c:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8018b10:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8018b14:	f1be 0f09 	cmp.w	lr, #9
 8018b18:	d919      	bls.n	8018b4e <rcl_validate_topic_name+0x9e>
 8018b1a:	f022 0e20 	bic.w	lr, r2, #32
 8018b1e:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8018b22:	f1be 0f19 	cmp.w	lr, #25
 8018b26:	d912      	bls.n	8018b4e <rcl_validate_topic_name+0x9e>
 8018b28:	2a5f      	cmp	r2, #95	@ 0x5f
 8018b2a:	d019      	beq.n	8018b60 <rcl_validate_topic_name+0xb0>
 8018b2c:	2a2f      	cmp	r2, #47	@ 0x2f
 8018b2e:	d051      	beq.n	8018bd4 <rcl_validate_topic_name+0x124>
 8018b30:	2a7e      	cmp	r2, #126	@ 0x7e
 8018b32:	d048      	beq.n	8018bc6 <rcl_validate_topic_name+0x116>
 8018b34:	2a7b      	cmp	r2, #123	@ 0x7b
 8018b36:	d054      	beq.n	8018be2 <rcl_validate_topic_name+0x132>
 8018b38:	2a7d      	cmp	r2, #125	@ 0x7d
 8018b3a:	d161      	bne.n	8018c00 <rcl_validate_topic_name+0x150>
 8018b3c:	2c00      	cmp	r4, #0
 8018b3e:	d155      	bne.n	8018bec <rcl_validate_topic_name+0x13c>
 8018b40:	2305      	movs	r3, #5
 8018b42:	6033      	str	r3, [r6, #0]
 8018b44:	b107      	cbz	r7, 8018b48 <rcl_validate_topic_name+0x98>
 8018b46:	6039      	str	r1, [r7, #0]
 8018b48:	2000      	movs	r0, #0
 8018b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b4e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8018b52:	0752      	lsls	r2, r2, #29
 8018b54:	d504      	bpl.n	8018b60 <rcl_validate_topic_name+0xb0>
 8018b56:	b11c      	cbz	r4, 8018b60 <rcl_validate_topic_name+0xb0>
 8018b58:	b111      	cbz	r1, 8018b60 <rcl_validate_topic_name+0xb0>
 8018b5a:	1e4a      	subs	r2, r1, #1
 8018b5c:	429a      	cmp	r2, r3
 8018b5e:	d02d      	beq.n	8018bbc <rcl_validate_topic_name+0x10c>
 8018b60:	3101      	adds	r1, #1
 8018b62:	4288      	cmp	r0, r1
 8018b64:	d1d2      	bne.n	8018b0c <rcl_validate_topic_name+0x5c>
 8018b66:	2c00      	cmp	r4, #0
 8018b68:	d145      	bne.n	8018bf6 <rcl_validate_topic_name+0x146>
 8018b6a:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8018b6e:	d04f      	beq.n	8018c10 <rcl_validate_topic_name+0x160>
 8018b70:	4620      	mov	r0, r4
 8018b72:	2301      	movs	r3, #1
 8018b74:	e006      	b.n	8018b84 <rcl_validate_topic_name+0xd4>
 8018b76:	428b      	cmp	r3, r1
 8018b78:	f105 0501 	add.w	r5, r5, #1
 8018b7c:	f103 0201 	add.w	r2, r3, #1
 8018b80:	d236      	bcs.n	8018bf0 <rcl_validate_topic_name+0x140>
 8018b82:	4613      	mov	r3, r2
 8018b84:	4580      	cmp	r8, r0
 8018b86:	f100 0001 	add.w	r0, r0, #1
 8018b8a:	d0f4      	beq.n	8018b76 <rcl_validate_topic_name+0xc6>
 8018b8c:	782a      	ldrb	r2, [r5, #0]
 8018b8e:	2a2f      	cmp	r2, #47	@ 0x2f
 8018b90:	d1f1      	bne.n	8018b76 <rcl_validate_topic_name+0xc6>
 8018b92:	786a      	ldrb	r2, [r5, #1]
 8018b94:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8018b98:	0754      	lsls	r4, r2, #29
 8018b9a:	d5ec      	bpl.n	8018b76 <rcl_validate_topic_name+0xc6>
 8018b9c:	2204      	movs	r2, #4
 8018b9e:	6032      	str	r2, [r6, #0]
 8018ba0:	2f00      	cmp	r7, #0
 8018ba2:	d0d1      	beq.n	8018b48 <rcl_validate_topic_name+0x98>
 8018ba4:	603b      	str	r3, [r7, #0]
 8018ba6:	2000      	movs	r0, #0
 8018ba8:	e7aa      	b.n	8018b00 <rcl_validate_topic_name+0x50>
 8018baa:	200b      	movs	r0, #11
 8018bac:	4770      	bx	lr
 8018bae:	2304      	movs	r3, #4
 8018bb0:	6033      	str	r3, [r6, #0]
 8018bb2:	2f00      	cmp	r7, #0
 8018bb4:	d1a2      	bne.n	8018afc <rcl_validate_topic_name+0x4c>
 8018bb6:	e7c7      	b.n	8018b48 <rcl_validate_topic_name+0x98>
 8018bb8:	200b      	movs	r0, #11
 8018bba:	e7a1      	b.n	8018b00 <rcl_validate_topic_name+0x50>
 8018bbc:	2309      	movs	r3, #9
 8018bbe:	6033      	str	r3, [r6, #0]
 8018bc0:	2f00      	cmp	r7, #0
 8018bc2:	d1c0      	bne.n	8018b46 <rcl_validate_topic_name+0x96>
 8018bc4:	e7c0      	b.n	8018b48 <rcl_validate_topic_name+0x98>
 8018bc6:	2900      	cmp	r1, #0
 8018bc8:	d0ca      	beq.n	8018b60 <rcl_validate_topic_name+0xb0>
 8018bca:	2306      	movs	r3, #6
 8018bcc:	6033      	str	r3, [r6, #0]
 8018bce:	2f00      	cmp	r7, #0
 8018bd0:	d1b9      	bne.n	8018b46 <rcl_validate_topic_name+0x96>
 8018bd2:	e7b9      	b.n	8018b48 <rcl_validate_topic_name+0x98>
 8018bd4:	2c00      	cmp	r4, #0
 8018bd6:	d0c3      	beq.n	8018b60 <rcl_validate_topic_name+0xb0>
 8018bd8:	2308      	movs	r3, #8
 8018bda:	6033      	str	r3, [r6, #0]
 8018bdc:	2f00      	cmp	r7, #0
 8018bde:	d1b2      	bne.n	8018b46 <rcl_validate_topic_name+0x96>
 8018be0:	e7b2      	b.n	8018b48 <rcl_validate_topic_name+0x98>
 8018be2:	2c00      	cmp	r4, #0
 8018be4:	d1f8      	bne.n	8018bd8 <rcl_validate_topic_name+0x128>
 8018be6:	460b      	mov	r3, r1
 8018be8:	2401      	movs	r4, #1
 8018bea:	e7b9      	b.n	8018b60 <rcl_validate_topic_name+0xb0>
 8018bec:	2400      	movs	r4, #0
 8018bee:	e7b7      	b.n	8018b60 <rcl_validate_topic_name+0xb0>
 8018bf0:	2000      	movs	r0, #0
 8018bf2:	6030      	str	r0, [r6, #0]
 8018bf4:	e784      	b.n	8018b00 <rcl_validate_topic_name+0x50>
 8018bf6:	2205      	movs	r2, #5
 8018bf8:	6032      	str	r2, [r6, #0]
 8018bfa:	2f00      	cmp	r7, #0
 8018bfc:	d1d2      	bne.n	8018ba4 <rcl_validate_topic_name+0xf4>
 8018bfe:	e7a3      	b.n	8018b48 <rcl_validate_topic_name+0x98>
 8018c00:	2c00      	cmp	r4, #0
 8018c02:	bf14      	ite	ne
 8018c04:	2308      	movne	r3, #8
 8018c06:	2303      	moveq	r3, #3
 8018c08:	6033      	str	r3, [r6, #0]
 8018c0a:	2f00      	cmp	r7, #0
 8018c0c:	d19b      	bne.n	8018b46 <rcl_validate_topic_name+0x96>
 8018c0e:	e79b      	b.n	8018b48 <rcl_validate_topic_name+0x98>
 8018c10:	2301      	movs	r3, #1
 8018c12:	e00a      	b.n	8018c2a <rcl_validate_topic_name+0x17a>
 8018c14:	2c01      	cmp	r4, #1
 8018c16:	d013      	beq.n	8018c40 <rcl_validate_topic_name+0x190>
 8018c18:	4299      	cmp	r1, r3
 8018c1a:	f104 0401 	add.w	r4, r4, #1
 8018c1e:	f105 0501 	add.w	r5, r5, #1
 8018c22:	f103 0201 	add.w	r2, r3, #1
 8018c26:	d9e3      	bls.n	8018bf0 <rcl_validate_topic_name+0x140>
 8018c28:	4613      	mov	r3, r2
 8018c2a:	45a0      	cmp	r8, r4
 8018c2c:	d0f4      	beq.n	8018c18 <rcl_validate_topic_name+0x168>
 8018c2e:	782a      	ldrb	r2, [r5, #0]
 8018c30:	2a2f      	cmp	r2, #47	@ 0x2f
 8018c32:	d1ef      	bne.n	8018c14 <rcl_validate_topic_name+0x164>
 8018c34:	786a      	ldrb	r2, [r5, #1]
 8018c36:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8018c3a:	0752      	lsls	r2, r2, #29
 8018c3c:	d5ec      	bpl.n	8018c18 <rcl_validate_topic_name+0x168>
 8018c3e:	e7ad      	b.n	8018b9c <rcl_validate_topic_name+0xec>
 8018c40:	2307      	movs	r3, #7
 8018c42:	6033      	str	r3, [r6, #0]
 8018c44:	2f00      	cmp	r7, #0
 8018c46:	f43f af7f 	beq.w	8018b48 <rcl_validate_topic_name+0x98>
 8018c4a:	603c      	str	r4, [r7, #0]
 8018c4c:	2000      	movs	r0, #0
 8018c4e:	e757      	b.n	8018b00 <rcl_validate_topic_name+0x50>
 8018c50:	0801b7d7 	.word	0x0801b7d7

08018c54 <geometry_msgs__msg__Pose__init>:
 8018c54:	b570      	push	{r4, r5, r6, lr}
 8018c56:	4605      	mov	r5, r0
 8018c58:	b1a8      	cbz	r0, 8018c86 <geometry_msgs__msg__Pose__init+0x32>
 8018c5a:	f000 f8e5 	bl	8018e28 <geometry_msgs__msg__Point__init>
 8018c5e:	4604      	mov	r4, r0
 8018c60:	b140      	cbz	r0, 8018c74 <geometry_msgs__msg__Pose__init+0x20>
 8018c62:	f105 0618 	add.w	r6, r5, #24
 8018c66:	4630      	mov	r0, r6
 8018c68:	f000 f826 	bl	8018cb8 <geometry_msgs__msg__Quaternion__init>
 8018c6c:	4604      	mov	r4, r0
 8018c6e:	b168      	cbz	r0, 8018c8c <geometry_msgs__msg__Pose__init+0x38>
 8018c70:	4620      	mov	r0, r4
 8018c72:	bd70      	pop	{r4, r5, r6, pc}
 8018c74:	4628      	mov	r0, r5
 8018c76:	f000 f8db 	bl	8018e30 <geometry_msgs__msg__Point__fini>
 8018c7a:	f105 0018 	add.w	r0, r5, #24
 8018c7e:	f000 f82f 	bl	8018ce0 <geometry_msgs__msg__Quaternion__fini>
 8018c82:	4620      	mov	r0, r4
 8018c84:	bd70      	pop	{r4, r5, r6, pc}
 8018c86:	4604      	mov	r4, r0
 8018c88:	4620      	mov	r0, r4
 8018c8a:	bd70      	pop	{r4, r5, r6, pc}
 8018c8c:	4628      	mov	r0, r5
 8018c8e:	f000 f8cf 	bl	8018e30 <geometry_msgs__msg__Point__fini>
 8018c92:	4630      	mov	r0, r6
 8018c94:	f000 f824 	bl	8018ce0 <geometry_msgs__msg__Quaternion__fini>
 8018c98:	e7ea      	b.n	8018c70 <geometry_msgs__msg__Pose__init+0x1c>
 8018c9a:	bf00      	nop

08018c9c <geometry_msgs__msg__Pose__fini>:
 8018c9c:	b148      	cbz	r0, 8018cb2 <geometry_msgs__msg__Pose__fini+0x16>
 8018c9e:	b510      	push	{r4, lr}
 8018ca0:	4604      	mov	r4, r0
 8018ca2:	f000 f8c5 	bl	8018e30 <geometry_msgs__msg__Point__fini>
 8018ca6:	f104 0018 	add.w	r0, r4, #24
 8018caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018cae:	f000 b817 	b.w	8018ce0 <geometry_msgs__msg__Quaternion__fini>
 8018cb2:	4770      	bx	lr
 8018cb4:	0000      	movs	r0, r0
	...

08018cb8 <geometry_msgs__msg__Quaternion__init>:
 8018cb8:	b160      	cbz	r0, 8018cd4 <geometry_msgs__msg__Quaternion__init+0x1c>
 8018cba:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8018cd8 <geometry_msgs__msg__Quaternion__init+0x20>
 8018cbe:	2200      	movs	r2, #0
 8018cc0:	2300      	movs	r3, #0
 8018cc2:	e9c0 2300 	strd	r2, r3, [r0]
 8018cc6:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8018cca:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8018cce:	ed80 7b06 	vstr	d7, [r0, #24]
 8018cd2:	2001      	movs	r0, #1
 8018cd4:	4770      	bx	lr
 8018cd6:	bf00      	nop
 8018cd8:	00000000 	.word	0x00000000
 8018cdc:	3ff00000 	.word	0x3ff00000

08018ce0 <geometry_msgs__msg__Quaternion__fini>:
 8018ce0:	4770      	bx	lr
 8018ce2:	bf00      	nop

08018ce4 <geometry_msgs__msg__Point__rosidl_typesupport_introspection_c__Point_init_function>:
 8018ce4:	f000 b8a0 	b.w	8018e28 <geometry_msgs__msg__Point__init>

08018ce8 <geometry_msgs__msg__Point__rosidl_typesupport_introspection_c__Point_fini_function>:
 8018ce8:	f000 b8a2 	b.w	8018e30 <geometry_msgs__msg__Point__fini>

08018cec <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point>:
 8018cec:	4b04      	ldr	r3, [pc, #16]	@ (8018d00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x14>)
 8018cee:	681a      	ldr	r2, [r3, #0]
 8018cf0:	b10a      	cbz	r2, 8018cf6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0xa>
 8018cf2:	4803      	ldr	r0, [pc, #12]	@ (8018d00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x14>)
 8018cf4:	4770      	bx	lr
 8018cf6:	4a03      	ldr	r2, [pc, #12]	@ (8018d04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x18>)
 8018cf8:	4801      	ldr	r0, [pc, #4]	@ (8018d00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x14>)
 8018cfa:	6812      	ldr	r2, [r2, #0]
 8018cfc:	601a      	str	r2, [r3, #0]
 8018cfe:	4770      	bx	lr
 8018d00:	200008dc 	.word	0x200008dc
 8018d04:	20000320 	.word	0x20000320

08018d08 <get_serialized_size_geometry_msgs__msg__Point>:
 8018d08:	b1b8      	cbz	r0, 8018d3a <get_serialized_size_geometry_msgs__msg__Point+0x32>
 8018d0a:	b538      	push	{r3, r4, r5, lr}
 8018d0c:	460d      	mov	r5, r1
 8018d0e:	4628      	mov	r0, r5
 8018d10:	2108      	movs	r1, #8
 8018d12:	f7f3 f817 	bl	800bd44 <ucdr_alignment>
 8018d16:	f105 0308 	add.w	r3, r5, #8
 8018d1a:	181c      	adds	r4, r3, r0
 8018d1c:	2108      	movs	r1, #8
 8018d1e:	4620      	mov	r0, r4
 8018d20:	f7f3 f810 	bl	800bd44 <ucdr_alignment>
 8018d24:	3008      	adds	r0, #8
 8018d26:	4404      	add	r4, r0
 8018d28:	2108      	movs	r1, #8
 8018d2a:	4620      	mov	r0, r4
 8018d2c:	f7f3 f80a 	bl	800bd44 <ucdr_alignment>
 8018d30:	f1c5 0508 	rsb	r5, r5, #8
 8018d34:	4428      	add	r0, r5
 8018d36:	4420      	add	r0, r4
 8018d38:	bd38      	pop	{r3, r4, r5, pc}
 8018d3a:	4770      	bx	lr

08018d3c <_Point__cdr_deserialize>:
 8018d3c:	b538      	push	{r3, r4, r5, lr}
 8018d3e:	460c      	mov	r4, r1
 8018d40:	b171      	cbz	r1, 8018d60 <_Point__cdr_deserialize+0x24>
 8018d42:	4605      	mov	r5, r0
 8018d44:	f7f2 fe12 	bl	800b96c <ucdr_deserialize_double>
 8018d48:	f104 0108 	add.w	r1, r4, #8
 8018d4c:	4628      	mov	r0, r5
 8018d4e:	f7f2 fe0d 	bl	800b96c <ucdr_deserialize_double>
 8018d52:	f104 0110 	add.w	r1, r4, #16
 8018d56:	4628      	mov	r0, r5
 8018d58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018d5c:	f7f2 be06 	b.w	800b96c <ucdr_deserialize_double>
 8018d60:	4608      	mov	r0, r1
 8018d62:	bd38      	pop	{r3, r4, r5, pc}

08018d64 <_Point__cdr_serialize>:
 8018d64:	b198      	cbz	r0, 8018d8e <_Point__cdr_serialize+0x2a>
 8018d66:	b538      	push	{r3, r4, r5, lr}
 8018d68:	ed90 0b00 	vldr	d0, [r0]
 8018d6c:	460d      	mov	r5, r1
 8018d6e:	4604      	mov	r4, r0
 8018d70:	4608      	mov	r0, r1
 8018d72:	f7f2 fc59 	bl	800b628 <ucdr_serialize_double>
 8018d76:	ed94 0b02 	vldr	d0, [r4, #8]
 8018d7a:	4628      	mov	r0, r5
 8018d7c:	f7f2 fc54 	bl	800b628 <ucdr_serialize_double>
 8018d80:	ed94 0b04 	vldr	d0, [r4, #16]
 8018d84:	4628      	mov	r0, r5
 8018d86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018d8a:	f7f2 bc4d 	b.w	800b628 <ucdr_serialize_double>
 8018d8e:	4770      	bx	lr

08018d90 <_Point__get_serialized_size>:
 8018d90:	b198      	cbz	r0, 8018dba <_Point__get_serialized_size+0x2a>
 8018d92:	b510      	push	{r4, lr}
 8018d94:	2108      	movs	r1, #8
 8018d96:	2000      	movs	r0, #0
 8018d98:	f7f2 ffd4 	bl	800bd44 <ucdr_alignment>
 8018d9c:	f100 0408 	add.w	r4, r0, #8
 8018da0:	2108      	movs	r1, #8
 8018da2:	4620      	mov	r0, r4
 8018da4:	f7f2 ffce 	bl	800bd44 <ucdr_alignment>
 8018da8:	3008      	adds	r0, #8
 8018daa:	4404      	add	r4, r0
 8018dac:	2108      	movs	r1, #8
 8018dae:	4620      	mov	r0, r4
 8018db0:	f7f2 ffc8 	bl	800bd44 <ucdr_alignment>
 8018db4:	3008      	adds	r0, #8
 8018db6:	4420      	add	r0, r4
 8018db8:	bd10      	pop	{r4, pc}
 8018dba:	4770      	bx	lr

08018dbc <_Point__max_serialized_size>:
 8018dbc:	b538      	push	{r3, r4, r5, lr}
 8018dbe:	2108      	movs	r1, #8
 8018dc0:	2000      	movs	r0, #0
 8018dc2:	f7f2 ffbf 	bl	800bd44 <ucdr_alignment>
 8018dc6:	f100 0508 	add.w	r5, r0, #8
 8018dca:	2108      	movs	r1, #8
 8018dcc:	4628      	mov	r0, r5
 8018dce:	f7f2 ffb9 	bl	800bd44 <ucdr_alignment>
 8018dd2:	f100 0408 	add.w	r4, r0, #8
 8018dd6:	442c      	add	r4, r5
 8018dd8:	2108      	movs	r1, #8
 8018dda:	4620      	mov	r0, r4
 8018ddc:	f7f2 ffb2 	bl	800bd44 <ucdr_alignment>
 8018de0:	3008      	adds	r0, #8
 8018de2:	4420      	add	r0, r4
 8018de4:	bd38      	pop	{r3, r4, r5, pc}
 8018de6:	bf00      	nop

08018de8 <max_serialized_size_geometry_msgs__msg__Point>:
 8018de8:	b570      	push	{r4, r5, r6, lr}
 8018dea:	2301      	movs	r3, #1
 8018dec:	460c      	mov	r4, r1
 8018dee:	7003      	strb	r3, [r0, #0]
 8018df0:	2108      	movs	r1, #8
 8018df2:	4620      	mov	r0, r4
 8018df4:	f7f2 ffa6 	bl	800bd44 <ucdr_alignment>
 8018df8:	f104 0508 	add.w	r5, r4, #8
 8018dfc:	1946      	adds	r6, r0, r5
 8018dfe:	2108      	movs	r1, #8
 8018e00:	4630      	mov	r0, r6
 8018e02:	f7f2 ff9f 	bl	800bd44 <ucdr_alignment>
 8018e06:	f100 0508 	add.w	r5, r0, #8
 8018e0a:	4435      	add	r5, r6
 8018e0c:	2108      	movs	r1, #8
 8018e0e:	4628      	mov	r0, r5
 8018e10:	f7f2 ff98 	bl	800bd44 <ucdr_alignment>
 8018e14:	f1c4 0408 	rsb	r4, r4, #8
 8018e18:	4420      	add	r0, r4
 8018e1a:	4428      	add	r0, r5
 8018e1c:	bd70      	pop	{r4, r5, r6, pc}
 8018e1e:	bf00      	nop

08018e20 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>:
 8018e20:	4800      	ldr	r0, [pc, #0]	@ (8018e24 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x4>)
 8018e22:	4770      	bx	lr
 8018e24:	200008e8 	.word	0x200008e8

08018e28 <geometry_msgs__msg__Point__init>:
 8018e28:	3800      	subs	r0, #0
 8018e2a:	bf18      	it	ne
 8018e2c:	2001      	movne	r0, #1
 8018e2e:	4770      	bx	lr

08018e30 <geometry_msgs__msg__Point__fini>:
 8018e30:	4770      	bx	lr
 8018e32:	bf00      	nop

08018e34 <calloc>:
 8018e34:	4b02      	ldr	r3, [pc, #8]	@ (8018e40 <calloc+0xc>)
 8018e36:	460a      	mov	r2, r1
 8018e38:	4601      	mov	r1, r0
 8018e3a:	6818      	ldr	r0, [r3, #0]
 8018e3c:	f000 b802 	b.w	8018e44 <_calloc_r>
 8018e40:	2000091c 	.word	0x2000091c

08018e44 <_calloc_r>:
 8018e44:	b570      	push	{r4, r5, r6, lr}
 8018e46:	fba1 5402 	umull	r5, r4, r1, r2
 8018e4a:	b934      	cbnz	r4, 8018e5a <_calloc_r+0x16>
 8018e4c:	4629      	mov	r1, r5
 8018e4e:	f000 f899 	bl	8018f84 <_malloc_r>
 8018e52:	4606      	mov	r6, r0
 8018e54:	b928      	cbnz	r0, 8018e62 <_calloc_r+0x1e>
 8018e56:	4630      	mov	r0, r6
 8018e58:	bd70      	pop	{r4, r5, r6, pc}
 8018e5a:	220c      	movs	r2, #12
 8018e5c:	6002      	str	r2, [r0, #0]
 8018e5e:	2600      	movs	r6, #0
 8018e60:	e7f9      	b.n	8018e56 <_calloc_r+0x12>
 8018e62:	462a      	mov	r2, r5
 8018e64:	4621      	mov	r1, r4
 8018e66:	f000 fcd5 	bl	8019814 <memset>
 8018e6a:	e7f4      	b.n	8018e56 <_calloc_r+0x12>

08018e6c <exit>:
 8018e6c:	b508      	push	{r3, lr}
 8018e6e:	4b06      	ldr	r3, [pc, #24]	@ (8018e88 <exit+0x1c>)
 8018e70:	4604      	mov	r4, r0
 8018e72:	b113      	cbz	r3, 8018e7a <exit+0xe>
 8018e74:	2100      	movs	r1, #0
 8018e76:	f3af 8000 	nop.w
 8018e7a:	4b04      	ldr	r3, [pc, #16]	@ (8018e8c <exit+0x20>)
 8018e7c:	681b      	ldr	r3, [r3, #0]
 8018e7e:	b103      	cbz	r3, 8018e82 <exit+0x16>
 8018e80:	4798      	blx	r3
 8018e82:	4620      	mov	r0, r4
 8018e84:	f7ea f982 	bl	800318c <_exit>
 8018e88:	00000000 	.word	0x00000000
 8018e8c:	20011acc 	.word	0x20011acc

08018e90 <getenv>:
 8018e90:	b507      	push	{r0, r1, r2, lr}
 8018e92:	4b04      	ldr	r3, [pc, #16]	@ (8018ea4 <getenv+0x14>)
 8018e94:	4601      	mov	r1, r0
 8018e96:	aa01      	add	r2, sp, #4
 8018e98:	6818      	ldr	r0, [r3, #0]
 8018e9a:	f000 f805 	bl	8018ea8 <_findenv_r>
 8018e9e:	b003      	add	sp, #12
 8018ea0:	f85d fb04 	ldr.w	pc, [sp], #4
 8018ea4:	2000091c 	.word	0x2000091c

08018ea8 <_findenv_r>:
 8018ea8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018eac:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8018f1c <_findenv_r+0x74>
 8018eb0:	4606      	mov	r6, r0
 8018eb2:	4689      	mov	r9, r1
 8018eb4:	4617      	mov	r7, r2
 8018eb6:	f000 fda3 	bl	8019a00 <__env_lock>
 8018eba:	f8da 4000 	ldr.w	r4, [sl]
 8018ebe:	b134      	cbz	r4, 8018ece <_findenv_r+0x26>
 8018ec0:	464b      	mov	r3, r9
 8018ec2:	4698      	mov	r8, r3
 8018ec4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018ec8:	b13a      	cbz	r2, 8018eda <_findenv_r+0x32>
 8018eca:	2a3d      	cmp	r2, #61	@ 0x3d
 8018ecc:	d1f9      	bne.n	8018ec2 <_findenv_r+0x1a>
 8018ece:	4630      	mov	r0, r6
 8018ed0:	f000 fd9c 	bl	8019a0c <__env_unlock>
 8018ed4:	2000      	movs	r0, #0
 8018ed6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018eda:	eba8 0809 	sub.w	r8, r8, r9
 8018ede:	46a3      	mov	fp, r4
 8018ee0:	f854 0b04 	ldr.w	r0, [r4], #4
 8018ee4:	2800      	cmp	r0, #0
 8018ee6:	d0f2      	beq.n	8018ece <_findenv_r+0x26>
 8018ee8:	4642      	mov	r2, r8
 8018eea:	4649      	mov	r1, r9
 8018eec:	f000 fca7 	bl	801983e <strncmp>
 8018ef0:	2800      	cmp	r0, #0
 8018ef2:	d1f4      	bne.n	8018ede <_findenv_r+0x36>
 8018ef4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018ef8:	eb03 0508 	add.w	r5, r3, r8
 8018efc:	f813 3008 	ldrb.w	r3, [r3, r8]
 8018f00:	2b3d      	cmp	r3, #61	@ 0x3d
 8018f02:	d1ec      	bne.n	8018ede <_findenv_r+0x36>
 8018f04:	f8da 3000 	ldr.w	r3, [sl]
 8018f08:	ebab 0303 	sub.w	r3, fp, r3
 8018f0c:	109b      	asrs	r3, r3, #2
 8018f0e:	4630      	mov	r0, r6
 8018f10:	603b      	str	r3, [r7, #0]
 8018f12:	f000 fd7b 	bl	8019a0c <__env_unlock>
 8018f16:	1c68      	adds	r0, r5, #1
 8018f18:	e7dd      	b.n	8018ed6 <_findenv_r+0x2e>
 8018f1a:	bf00      	nop
 8018f1c:	20000014 	.word	0x20000014

08018f20 <malloc>:
 8018f20:	4b02      	ldr	r3, [pc, #8]	@ (8018f2c <malloc+0xc>)
 8018f22:	4601      	mov	r1, r0
 8018f24:	6818      	ldr	r0, [r3, #0]
 8018f26:	f000 b82d 	b.w	8018f84 <_malloc_r>
 8018f2a:	bf00      	nop
 8018f2c:	2000091c 	.word	0x2000091c

08018f30 <free>:
 8018f30:	4b02      	ldr	r3, [pc, #8]	@ (8018f3c <free+0xc>)
 8018f32:	4601      	mov	r1, r0
 8018f34:	6818      	ldr	r0, [r3, #0]
 8018f36:	f000 bd6f 	b.w	8019a18 <_free_r>
 8018f3a:	bf00      	nop
 8018f3c:	2000091c 	.word	0x2000091c

08018f40 <sbrk_aligned>:
 8018f40:	b570      	push	{r4, r5, r6, lr}
 8018f42:	4e0f      	ldr	r6, [pc, #60]	@ (8018f80 <sbrk_aligned+0x40>)
 8018f44:	460c      	mov	r4, r1
 8018f46:	6831      	ldr	r1, [r6, #0]
 8018f48:	4605      	mov	r5, r0
 8018f4a:	b911      	cbnz	r1, 8018f52 <sbrk_aligned+0x12>
 8018f4c:	f000 fcd4 	bl	80198f8 <_sbrk_r>
 8018f50:	6030      	str	r0, [r6, #0]
 8018f52:	4621      	mov	r1, r4
 8018f54:	4628      	mov	r0, r5
 8018f56:	f000 fccf 	bl	80198f8 <_sbrk_r>
 8018f5a:	1c43      	adds	r3, r0, #1
 8018f5c:	d103      	bne.n	8018f66 <sbrk_aligned+0x26>
 8018f5e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8018f62:	4620      	mov	r0, r4
 8018f64:	bd70      	pop	{r4, r5, r6, pc}
 8018f66:	1cc4      	adds	r4, r0, #3
 8018f68:	f024 0403 	bic.w	r4, r4, #3
 8018f6c:	42a0      	cmp	r0, r4
 8018f6e:	d0f8      	beq.n	8018f62 <sbrk_aligned+0x22>
 8018f70:	1a21      	subs	r1, r4, r0
 8018f72:	4628      	mov	r0, r5
 8018f74:	f000 fcc0 	bl	80198f8 <_sbrk_r>
 8018f78:	3001      	adds	r0, #1
 8018f7a:	d1f2      	bne.n	8018f62 <sbrk_aligned+0x22>
 8018f7c:	e7ef      	b.n	8018f5e <sbrk_aligned+0x1e>
 8018f7e:	bf00      	nop
 8018f80:	2001198c 	.word	0x2001198c

08018f84 <_malloc_r>:
 8018f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018f88:	1ccd      	adds	r5, r1, #3
 8018f8a:	f025 0503 	bic.w	r5, r5, #3
 8018f8e:	3508      	adds	r5, #8
 8018f90:	2d0c      	cmp	r5, #12
 8018f92:	bf38      	it	cc
 8018f94:	250c      	movcc	r5, #12
 8018f96:	2d00      	cmp	r5, #0
 8018f98:	4606      	mov	r6, r0
 8018f9a:	db01      	blt.n	8018fa0 <_malloc_r+0x1c>
 8018f9c:	42a9      	cmp	r1, r5
 8018f9e:	d904      	bls.n	8018faa <_malloc_r+0x26>
 8018fa0:	230c      	movs	r3, #12
 8018fa2:	6033      	str	r3, [r6, #0]
 8018fa4:	2000      	movs	r0, #0
 8018fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018faa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8019080 <_malloc_r+0xfc>
 8018fae:	f000 f869 	bl	8019084 <__malloc_lock>
 8018fb2:	f8d8 3000 	ldr.w	r3, [r8]
 8018fb6:	461c      	mov	r4, r3
 8018fb8:	bb44      	cbnz	r4, 801900c <_malloc_r+0x88>
 8018fba:	4629      	mov	r1, r5
 8018fbc:	4630      	mov	r0, r6
 8018fbe:	f7ff ffbf 	bl	8018f40 <sbrk_aligned>
 8018fc2:	1c43      	adds	r3, r0, #1
 8018fc4:	4604      	mov	r4, r0
 8018fc6:	d158      	bne.n	801907a <_malloc_r+0xf6>
 8018fc8:	f8d8 4000 	ldr.w	r4, [r8]
 8018fcc:	4627      	mov	r7, r4
 8018fce:	2f00      	cmp	r7, #0
 8018fd0:	d143      	bne.n	801905a <_malloc_r+0xd6>
 8018fd2:	2c00      	cmp	r4, #0
 8018fd4:	d04b      	beq.n	801906e <_malloc_r+0xea>
 8018fd6:	6823      	ldr	r3, [r4, #0]
 8018fd8:	4639      	mov	r1, r7
 8018fda:	4630      	mov	r0, r6
 8018fdc:	eb04 0903 	add.w	r9, r4, r3
 8018fe0:	f000 fc8a 	bl	80198f8 <_sbrk_r>
 8018fe4:	4581      	cmp	r9, r0
 8018fe6:	d142      	bne.n	801906e <_malloc_r+0xea>
 8018fe8:	6821      	ldr	r1, [r4, #0]
 8018fea:	1a6d      	subs	r5, r5, r1
 8018fec:	4629      	mov	r1, r5
 8018fee:	4630      	mov	r0, r6
 8018ff0:	f7ff ffa6 	bl	8018f40 <sbrk_aligned>
 8018ff4:	3001      	adds	r0, #1
 8018ff6:	d03a      	beq.n	801906e <_malloc_r+0xea>
 8018ff8:	6823      	ldr	r3, [r4, #0]
 8018ffa:	442b      	add	r3, r5
 8018ffc:	6023      	str	r3, [r4, #0]
 8018ffe:	f8d8 3000 	ldr.w	r3, [r8]
 8019002:	685a      	ldr	r2, [r3, #4]
 8019004:	bb62      	cbnz	r2, 8019060 <_malloc_r+0xdc>
 8019006:	f8c8 7000 	str.w	r7, [r8]
 801900a:	e00f      	b.n	801902c <_malloc_r+0xa8>
 801900c:	6822      	ldr	r2, [r4, #0]
 801900e:	1b52      	subs	r2, r2, r5
 8019010:	d420      	bmi.n	8019054 <_malloc_r+0xd0>
 8019012:	2a0b      	cmp	r2, #11
 8019014:	d917      	bls.n	8019046 <_malloc_r+0xc2>
 8019016:	1961      	adds	r1, r4, r5
 8019018:	42a3      	cmp	r3, r4
 801901a:	6025      	str	r5, [r4, #0]
 801901c:	bf18      	it	ne
 801901e:	6059      	strne	r1, [r3, #4]
 8019020:	6863      	ldr	r3, [r4, #4]
 8019022:	bf08      	it	eq
 8019024:	f8c8 1000 	streq.w	r1, [r8]
 8019028:	5162      	str	r2, [r4, r5]
 801902a:	604b      	str	r3, [r1, #4]
 801902c:	4630      	mov	r0, r6
 801902e:	f000 f82f 	bl	8019090 <__malloc_unlock>
 8019032:	f104 000b 	add.w	r0, r4, #11
 8019036:	1d23      	adds	r3, r4, #4
 8019038:	f020 0007 	bic.w	r0, r0, #7
 801903c:	1ac2      	subs	r2, r0, r3
 801903e:	bf1c      	itt	ne
 8019040:	1a1b      	subne	r3, r3, r0
 8019042:	50a3      	strne	r3, [r4, r2]
 8019044:	e7af      	b.n	8018fa6 <_malloc_r+0x22>
 8019046:	6862      	ldr	r2, [r4, #4]
 8019048:	42a3      	cmp	r3, r4
 801904a:	bf0c      	ite	eq
 801904c:	f8c8 2000 	streq.w	r2, [r8]
 8019050:	605a      	strne	r2, [r3, #4]
 8019052:	e7eb      	b.n	801902c <_malloc_r+0xa8>
 8019054:	4623      	mov	r3, r4
 8019056:	6864      	ldr	r4, [r4, #4]
 8019058:	e7ae      	b.n	8018fb8 <_malloc_r+0x34>
 801905a:	463c      	mov	r4, r7
 801905c:	687f      	ldr	r7, [r7, #4]
 801905e:	e7b6      	b.n	8018fce <_malloc_r+0x4a>
 8019060:	461a      	mov	r2, r3
 8019062:	685b      	ldr	r3, [r3, #4]
 8019064:	42a3      	cmp	r3, r4
 8019066:	d1fb      	bne.n	8019060 <_malloc_r+0xdc>
 8019068:	2300      	movs	r3, #0
 801906a:	6053      	str	r3, [r2, #4]
 801906c:	e7de      	b.n	801902c <_malloc_r+0xa8>
 801906e:	230c      	movs	r3, #12
 8019070:	6033      	str	r3, [r6, #0]
 8019072:	4630      	mov	r0, r6
 8019074:	f000 f80c 	bl	8019090 <__malloc_unlock>
 8019078:	e794      	b.n	8018fa4 <_malloc_r+0x20>
 801907a:	6005      	str	r5, [r0, #0]
 801907c:	e7d6      	b.n	801902c <_malloc_r+0xa8>
 801907e:	bf00      	nop
 8019080:	20011990 	.word	0x20011990

08019084 <__malloc_lock>:
 8019084:	4801      	ldr	r0, [pc, #4]	@ (801908c <__malloc_lock+0x8>)
 8019086:	f000 bc84 	b.w	8019992 <__retarget_lock_acquire_recursive>
 801908a:	bf00      	nop
 801908c:	20011ad5 	.word	0x20011ad5

08019090 <__malloc_unlock>:
 8019090:	4801      	ldr	r0, [pc, #4]	@ (8019098 <__malloc_unlock+0x8>)
 8019092:	f000 bc7f 	b.w	8019994 <__retarget_lock_release_recursive>
 8019096:	bf00      	nop
 8019098:	20011ad5 	.word	0x20011ad5

0801909c <srand>:
 801909c:	b538      	push	{r3, r4, r5, lr}
 801909e:	4b10      	ldr	r3, [pc, #64]	@ (80190e0 <srand+0x44>)
 80190a0:	681d      	ldr	r5, [r3, #0]
 80190a2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80190a4:	4604      	mov	r4, r0
 80190a6:	b9b3      	cbnz	r3, 80190d6 <srand+0x3a>
 80190a8:	2018      	movs	r0, #24
 80190aa:	f7ff ff39 	bl	8018f20 <malloc>
 80190ae:	4602      	mov	r2, r0
 80190b0:	6328      	str	r0, [r5, #48]	@ 0x30
 80190b2:	b920      	cbnz	r0, 80190be <srand+0x22>
 80190b4:	4b0b      	ldr	r3, [pc, #44]	@ (80190e4 <srand+0x48>)
 80190b6:	480c      	ldr	r0, [pc, #48]	@ (80190e8 <srand+0x4c>)
 80190b8:	2146      	movs	r1, #70	@ 0x46
 80190ba:	f000 fc83 	bl	80199c4 <__assert_func>
 80190be:	490b      	ldr	r1, [pc, #44]	@ (80190ec <srand+0x50>)
 80190c0:	4b0b      	ldr	r3, [pc, #44]	@ (80190f0 <srand+0x54>)
 80190c2:	e9c0 1300 	strd	r1, r3, [r0]
 80190c6:	4b0b      	ldr	r3, [pc, #44]	@ (80190f4 <srand+0x58>)
 80190c8:	6083      	str	r3, [r0, #8]
 80190ca:	230b      	movs	r3, #11
 80190cc:	8183      	strh	r3, [r0, #12]
 80190ce:	2100      	movs	r1, #0
 80190d0:	2001      	movs	r0, #1
 80190d2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80190d6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80190d8:	2200      	movs	r2, #0
 80190da:	611c      	str	r4, [r3, #16]
 80190dc:	615a      	str	r2, [r3, #20]
 80190de:	bd38      	pop	{r3, r4, r5, pc}
 80190e0:	2000091c 	.word	0x2000091c
 80190e4:	0801b6f8 	.word	0x0801b6f8
 80190e8:	0801b70f 	.word	0x0801b70f
 80190ec:	abcd330e 	.word	0xabcd330e
 80190f0:	e66d1234 	.word	0xe66d1234
 80190f4:	0005deec 	.word	0x0005deec

080190f8 <rand>:
 80190f8:	4b16      	ldr	r3, [pc, #88]	@ (8019154 <rand+0x5c>)
 80190fa:	b510      	push	{r4, lr}
 80190fc:	681c      	ldr	r4, [r3, #0]
 80190fe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019100:	b9b3      	cbnz	r3, 8019130 <rand+0x38>
 8019102:	2018      	movs	r0, #24
 8019104:	f7ff ff0c 	bl	8018f20 <malloc>
 8019108:	4602      	mov	r2, r0
 801910a:	6320      	str	r0, [r4, #48]	@ 0x30
 801910c:	b920      	cbnz	r0, 8019118 <rand+0x20>
 801910e:	4b12      	ldr	r3, [pc, #72]	@ (8019158 <rand+0x60>)
 8019110:	4812      	ldr	r0, [pc, #72]	@ (801915c <rand+0x64>)
 8019112:	2152      	movs	r1, #82	@ 0x52
 8019114:	f000 fc56 	bl	80199c4 <__assert_func>
 8019118:	4911      	ldr	r1, [pc, #68]	@ (8019160 <rand+0x68>)
 801911a:	4b12      	ldr	r3, [pc, #72]	@ (8019164 <rand+0x6c>)
 801911c:	e9c0 1300 	strd	r1, r3, [r0]
 8019120:	4b11      	ldr	r3, [pc, #68]	@ (8019168 <rand+0x70>)
 8019122:	6083      	str	r3, [r0, #8]
 8019124:	230b      	movs	r3, #11
 8019126:	8183      	strh	r3, [r0, #12]
 8019128:	2100      	movs	r1, #0
 801912a:	2001      	movs	r0, #1
 801912c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019130:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8019132:	480e      	ldr	r0, [pc, #56]	@ (801916c <rand+0x74>)
 8019134:	690b      	ldr	r3, [r1, #16]
 8019136:	694c      	ldr	r4, [r1, #20]
 8019138:	4a0d      	ldr	r2, [pc, #52]	@ (8019170 <rand+0x78>)
 801913a:	4358      	muls	r0, r3
 801913c:	fb02 0004 	mla	r0, r2, r4, r0
 8019140:	fba3 3202 	umull	r3, r2, r3, r2
 8019144:	3301      	adds	r3, #1
 8019146:	eb40 0002 	adc.w	r0, r0, r2
 801914a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801914e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8019152:	bd10      	pop	{r4, pc}
 8019154:	2000091c 	.word	0x2000091c
 8019158:	0801b6f8 	.word	0x0801b6f8
 801915c:	0801b70f 	.word	0x0801b70f
 8019160:	abcd330e 	.word	0xabcd330e
 8019164:	e66d1234 	.word	0xe66d1234
 8019168:	0005deec 	.word	0x0005deec
 801916c:	5851f42d 	.word	0x5851f42d
 8019170:	4c957f2d 	.word	0x4c957f2d

08019174 <realloc>:
 8019174:	4b02      	ldr	r3, [pc, #8]	@ (8019180 <realloc+0xc>)
 8019176:	460a      	mov	r2, r1
 8019178:	4601      	mov	r1, r0
 801917a:	6818      	ldr	r0, [r3, #0]
 801917c:	f000 b802 	b.w	8019184 <_realloc_r>
 8019180:	2000091c 	.word	0x2000091c

08019184 <_realloc_r>:
 8019184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019188:	4607      	mov	r7, r0
 801918a:	4614      	mov	r4, r2
 801918c:	460d      	mov	r5, r1
 801918e:	b921      	cbnz	r1, 801919a <_realloc_r+0x16>
 8019190:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019194:	4611      	mov	r1, r2
 8019196:	f7ff bef5 	b.w	8018f84 <_malloc_r>
 801919a:	b92a      	cbnz	r2, 80191a8 <_realloc_r+0x24>
 801919c:	f000 fc3c 	bl	8019a18 <_free_r>
 80191a0:	4625      	mov	r5, r4
 80191a2:	4628      	mov	r0, r5
 80191a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80191a8:	f000 fc80 	bl	8019aac <_malloc_usable_size_r>
 80191ac:	4284      	cmp	r4, r0
 80191ae:	4606      	mov	r6, r0
 80191b0:	d802      	bhi.n	80191b8 <_realloc_r+0x34>
 80191b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80191b6:	d8f4      	bhi.n	80191a2 <_realloc_r+0x1e>
 80191b8:	4621      	mov	r1, r4
 80191ba:	4638      	mov	r0, r7
 80191bc:	f7ff fee2 	bl	8018f84 <_malloc_r>
 80191c0:	4680      	mov	r8, r0
 80191c2:	b908      	cbnz	r0, 80191c8 <_realloc_r+0x44>
 80191c4:	4645      	mov	r5, r8
 80191c6:	e7ec      	b.n	80191a2 <_realloc_r+0x1e>
 80191c8:	42b4      	cmp	r4, r6
 80191ca:	4622      	mov	r2, r4
 80191cc:	4629      	mov	r1, r5
 80191ce:	bf28      	it	cs
 80191d0:	4632      	movcs	r2, r6
 80191d2:	f000 fbe8 	bl	80199a6 <memcpy>
 80191d6:	4629      	mov	r1, r5
 80191d8:	4638      	mov	r0, r7
 80191da:	f000 fc1d 	bl	8019a18 <_free_r>
 80191de:	e7f1      	b.n	80191c4 <_realloc_r+0x40>

080191e0 <_strtoul_l.isra.0>:
 80191e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80191e4:	4e34      	ldr	r6, [pc, #208]	@ (80192b8 <_strtoul_l.isra.0+0xd8>)
 80191e6:	4686      	mov	lr, r0
 80191e8:	460d      	mov	r5, r1
 80191ea:	4628      	mov	r0, r5
 80191ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80191f0:	5d37      	ldrb	r7, [r6, r4]
 80191f2:	f017 0708 	ands.w	r7, r7, #8
 80191f6:	d1f8      	bne.n	80191ea <_strtoul_l.isra.0+0xa>
 80191f8:	2c2d      	cmp	r4, #45	@ 0x2d
 80191fa:	d110      	bne.n	801921e <_strtoul_l.isra.0+0x3e>
 80191fc:	782c      	ldrb	r4, [r5, #0]
 80191fe:	2701      	movs	r7, #1
 8019200:	1c85      	adds	r5, r0, #2
 8019202:	f033 0010 	bics.w	r0, r3, #16
 8019206:	d115      	bne.n	8019234 <_strtoul_l.isra.0+0x54>
 8019208:	2c30      	cmp	r4, #48	@ 0x30
 801920a:	d10d      	bne.n	8019228 <_strtoul_l.isra.0+0x48>
 801920c:	7828      	ldrb	r0, [r5, #0]
 801920e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8019212:	2858      	cmp	r0, #88	@ 0x58
 8019214:	d108      	bne.n	8019228 <_strtoul_l.isra.0+0x48>
 8019216:	786c      	ldrb	r4, [r5, #1]
 8019218:	3502      	adds	r5, #2
 801921a:	2310      	movs	r3, #16
 801921c:	e00a      	b.n	8019234 <_strtoul_l.isra.0+0x54>
 801921e:	2c2b      	cmp	r4, #43	@ 0x2b
 8019220:	bf04      	itt	eq
 8019222:	782c      	ldrbeq	r4, [r5, #0]
 8019224:	1c85      	addeq	r5, r0, #2
 8019226:	e7ec      	b.n	8019202 <_strtoul_l.isra.0+0x22>
 8019228:	2b00      	cmp	r3, #0
 801922a:	d1f6      	bne.n	801921a <_strtoul_l.isra.0+0x3a>
 801922c:	2c30      	cmp	r4, #48	@ 0x30
 801922e:	bf14      	ite	ne
 8019230:	230a      	movne	r3, #10
 8019232:	2308      	moveq	r3, #8
 8019234:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8019238:	2600      	movs	r6, #0
 801923a:	fbb8 f8f3 	udiv	r8, r8, r3
 801923e:	fb03 f908 	mul.w	r9, r3, r8
 8019242:	ea6f 0909 	mvn.w	r9, r9
 8019246:	4630      	mov	r0, r6
 8019248:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801924c:	f1bc 0f09 	cmp.w	ip, #9
 8019250:	d810      	bhi.n	8019274 <_strtoul_l.isra.0+0x94>
 8019252:	4664      	mov	r4, ip
 8019254:	42a3      	cmp	r3, r4
 8019256:	dd1e      	ble.n	8019296 <_strtoul_l.isra.0+0xb6>
 8019258:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801925c:	d007      	beq.n	801926e <_strtoul_l.isra.0+0x8e>
 801925e:	4580      	cmp	r8, r0
 8019260:	d316      	bcc.n	8019290 <_strtoul_l.isra.0+0xb0>
 8019262:	d101      	bne.n	8019268 <_strtoul_l.isra.0+0x88>
 8019264:	45a1      	cmp	r9, r4
 8019266:	db13      	blt.n	8019290 <_strtoul_l.isra.0+0xb0>
 8019268:	fb00 4003 	mla	r0, r0, r3, r4
 801926c:	2601      	movs	r6, #1
 801926e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019272:	e7e9      	b.n	8019248 <_strtoul_l.isra.0+0x68>
 8019274:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8019278:	f1bc 0f19 	cmp.w	ip, #25
 801927c:	d801      	bhi.n	8019282 <_strtoul_l.isra.0+0xa2>
 801927e:	3c37      	subs	r4, #55	@ 0x37
 8019280:	e7e8      	b.n	8019254 <_strtoul_l.isra.0+0x74>
 8019282:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8019286:	f1bc 0f19 	cmp.w	ip, #25
 801928a:	d804      	bhi.n	8019296 <_strtoul_l.isra.0+0xb6>
 801928c:	3c57      	subs	r4, #87	@ 0x57
 801928e:	e7e1      	b.n	8019254 <_strtoul_l.isra.0+0x74>
 8019290:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8019294:	e7eb      	b.n	801926e <_strtoul_l.isra.0+0x8e>
 8019296:	1c73      	adds	r3, r6, #1
 8019298:	d106      	bne.n	80192a8 <_strtoul_l.isra.0+0xc8>
 801929a:	2322      	movs	r3, #34	@ 0x22
 801929c:	f8ce 3000 	str.w	r3, [lr]
 80192a0:	4630      	mov	r0, r6
 80192a2:	b932      	cbnz	r2, 80192b2 <_strtoul_l.isra.0+0xd2>
 80192a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80192a8:	b107      	cbz	r7, 80192ac <_strtoul_l.isra.0+0xcc>
 80192aa:	4240      	negs	r0, r0
 80192ac:	2a00      	cmp	r2, #0
 80192ae:	d0f9      	beq.n	80192a4 <_strtoul_l.isra.0+0xc4>
 80192b0:	b106      	cbz	r6, 80192b4 <_strtoul_l.isra.0+0xd4>
 80192b2:	1e69      	subs	r1, r5, #1
 80192b4:	6011      	str	r1, [r2, #0]
 80192b6:	e7f5      	b.n	80192a4 <_strtoul_l.isra.0+0xc4>
 80192b8:	0801b7d7 	.word	0x0801b7d7

080192bc <strtoul>:
 80192bc:	4613      	mov	r3, r2
 80192be:	460a      	mov	r2, r1
 80192c0:	4601      	mov	r1, r0
 80192c2:	4802      	ldr	r0, [pc, #8]	@ (80192cc <strtoul+0x10>)
 80192c4:	6800      	ldr	r0, [r0, #0]
 80192c6:	f7ff bf8b 	b.w	80191e0 <_strtoul_l.isra.0>
 80192ca:	bf00      	nop
 80192cc:	2000091c 	.word	0x2000091c

080192d0 <std>:
 80192d0:	2300      	movs	r3, #0
 80192d2:	b510      	push	{r4, lr}
 80192d4:	4604      	mov	r4, r0
 80192d6:	e9c0 3300 	strd	r3, r3, [r0]
 80192da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80192de:	6083      	str	r3, [r0, #8]
 80192e0:	8181      	strh	r1, [r0, #12]
 80192e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80192e4:	81c2      	strh	r2, [r0, #14]
 80192e6:	6183      	str	r3, [r0, #24]
 80192e8:	4619      	mov	r1, r3
 80192ea:	2208      	movs	r2, #8
 80192ec:	305c      	adds	r0, #92	@ 0x5c
 80192ee:	f000 fa91 	bl	8019814 <memset>
 80192f2:	4b0d      	ldr	r3, [pc, #52]	@ (8019328 <std+0x58>)
 80192f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80192f6:	4b0d      	ldr	r3, [pc, #52]	@ (801932c <std+0x5c>)
 80192f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80192fa:	4b0d      	ldr	r3, [pc, #52]	@ (8019330 <std+0x60>)
 80192fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80192fe:	4b0d      	ldr	r3, [pc, #52]	@ (8019334 <std+0x64>)
 8019300:	6323      	str	r3, [r4, #48]	@ 0x30
 8019302:	4b0d      	ldr	r3, [pc, #52]	@ (8019338 <std+0x68>)
 8019304:	6224      	str	r4, [r4, #32]
 8019306:	429c      	cmp	r4, r3
 8019308:	d006      	beq.n	8019318 <std+0x48>
 801930a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801930e:	4294      	cmp	r4, r2
 8019310:	d002      	beq.n	8019318 <std+0x48>
 8019312:	33d0      	adds	r3, #208	@ 0xd0
 8019314:	429c      	cmp	r4, r3
 8019316:	d105      	bne.n	8019324 <std+0x54>
 8019318:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801931c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019320:	f000 bb36 	b.w	8019990 <__retarget_lock_init_recursive>
 8019324:	bd10      	pop	{r4, pc}
 8019326:	bf00      	nop
 8019328:	08019599 	.word	0x08019599
 801932c:	080195bb 	.word	0x080195bb
 8019330:	080195f3 	.word	0x080195f3
 8019334:	08019617 	.word	0x08019617
 8019338:	20011994 	.word	0x20011994

0801933c <stdio_exit_handler>:
 801933c:	4a02      	ldr	r2, [pc, #8]	@ (8019348 <stdio_exit_handler+0xc>)
 801933e:	4903      	ldr	r1, [pc, #12]	@ (801934c <stdio_exit_handler+0x10>)
 8019340:	4803      	ldr	r0, [pc, #12]	@ (8019350 <stdio_exit_handler+0x14>)
 8019342:	f000 b869 	b.w	8019418 <_fwalk_sglue>
 8019346:	bf00      	nop
 8019348:	20000910 	.word	0x20000910
 801934c:	0801a411 	.word	0x0801a411
 8019350:	20000920 	.word	0x20000920

08019354 <cleanup_stdio>:
 8019354:	6841      	ldr	r1, [r0, #4]
 8019356:	4b0c      	ldr	r3, [pc, #48]	@ (8019388 <cleanup_stdio+0x34>)
 8019358:	4299      	cmp	r1, r3
 801935a:	b510      	push	{r4, lr}
 801935c:	4604      	mov	r4, r0
 801935e:	d001      	beq.n	8019364 <cleanup_stdio+0x10>
 8019360:	f001 f856 	bl	801a410 <_fflush_r>
 8019364:	68a1      	ldr	r1, [r4, #8]
 8019366:	4b09      	ldr	r3, [pc, #36]	@ (801938c <cleanup_stdio+0x38>)
 8019368:	4299      	cmp	r1, r3
 801936a:	d002      	beq.n	8019372 <cleanup_stdio+0x1e>
 801936c:	4620      	mov	r0, r4
 801936e:	f001 f84f 	bl	801a410 <_fflush_r>
 8019372:	68e1      	ldr	r1, [r4, #12]
 8019374:	4b06      	ldr	r3, [pc, #24]	@ (8019390 <cleanup_stdio+0x3c>)
 8019376:	4299      	cmp	r1, r3
 8019378:	d004      	beq.n	8019384 <cleanup_stdio+0x30>
 801937a:	4620      	mov	r0, r4
 801937c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019380:	f001 b846 	b.w	801a410 <_fflush_r>
 8019384:	bd10      	pop	{r4, pc}
 8019386:	bf00      	nop
 8019388:	20011994 	.word	0x20011994
 801938c:	200119fc 	.word	0x200119fc
 8019390:	20011a64 	.word	0x20011a64

08019394 <global_stdio_init.part.0>:
 8019394:	b510      	push	{r4, lr}
 8019396:	4b0b      	ldr	r3, [pc, #44]	@ (80193c4 <global_stdio_init.part.0+0x30>)
 8019398:	4c0b      	ldr	r4, [pc, #44]	@ (80193c8 <global_stdio_init.part.0+0x34>)
 801939a:	4a0c      	ldr	r2, [pc, #48]	@ (80193cc <global_stdio_init.part.0+0x38>)
 801939c:	601a      	str	r2, [r3, #0]
 801939e:	4620      	mov	r0, r4
 80193a0:	2200      	movs	r2, #0
 80193a2:	2104      	movs	r1, #4
 80193a4:	f7ff ff94 	bl	80192d0 <std>
 80193a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80193ac:	2201      	movs	r2, #1
 80193ae:	2109      	movs	r1, #9
 80193b0:	f7ff ff8e 	bl	80192d0 <std>
 80193b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80193b8:	2202      	movs	r2, #2
 80193ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80193be:	2112      	movs	r1, #18
 80193c0:	f7ff bf86 	b.w	80192d0 <std>
 80193c4:	20011acc 	.word	0x20011acc
 80193c8:	20011994 	.word	0x20011994
 80193cc:	0801933d 	.word	0x0801933d

080193d0 <__sfp_lock_acquire>:
 80193d0:	4801      	ldr	r0, [pc, #4]	@ (80193d8 <__sfp_lock_acquire+0x8>)
 80193d2:	f000 bade 	b.w	8019992 <__retarget_lock_acquire_recursive>
 80193d6:	bf00      	nop
 80193d8:	20011ad6 	.word	0x20011ad6

080193dc <__sfp_lock_release>:
 80193dc:	4801      	ldr	r0, [pc, #4]	@ (80193e4 <__sfp_lock_release+0x8>)
 80193de:	f000 bad9 	b.w	8019994 <__retarget_lock_release_recursive>
 80193e2:	bf00      	nop
 80193e4:	20011ad6 	.word	0x20011ad6

080193e8 <__sinit>:
 80193e8:	b510      	push	{r4, lr}
 80193ea:	4604      	mov	r4, r0
 80193ec:	f7ff fff0 	bl	80193d0 <__sfp_lock_acquire>
 80193f0:	6a23      	ldr	r3, [r4, #32]
 80193f2:	b11b      	cbz	r3, 80193fc <__sinit+0x14>
 80193f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80193f8:	f7ff bff0 	b.w	80193dc <__sfp_lock_release>
 80193fc:	4b04      	ldr	r3, [pc, #16]	@ (8019410 <__sinit+0x28>)
 80193fe:	6223      	str	r3, [r4, #32]
 8019400:	4b04      	ldr	r3, [pc, #16]	@ (8019414 <__sinit+0x2c>)
 8019402:	681b      	ldr	r3, [r3, #0]
 8019404:	2b00      	cmp	r3, #0
 8019406:	d1f5      	bne.n	80193f4 <__sinit+0xc>
 8019408:	f7ff ffc4 	bl	8019394 <global_stdio_init.part.0>
 801940c:	e7f2      	b.n	80193f4 <__sinit+0xc>
 801940e:	bf00      	nop
 8019410:	08019355 	.word	0x08019355
 8019414:	20011acc 	.word	0x20011acc

08019418 <_fwalk_sglue>:
 8019418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801941c:	4607      	mov	r7, r0
 801941e:	4688      	mov	r8, r1
 8019420:	4614      	mov	r4, r2
 8019422:	2600      	movs	r6, #0
 8019424:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019428:	f1b9 0901 	subs.w	r9, r9, #1
 801942c:	d505      	bpl.n	801943a <_fwalk_sglue+0x22>
 801942e:	6824      	ldr	r4, [r4, #0]
 8019430:	2c00      	cmp	r4, #0
 8019432:	d1f7      	bne.n	8019424 <_fwalk_sglue+0xc>
 8019434:	4630      	mov	r0, r6
 8019436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801943a:	89ab      	ldrh	r3, [r5, #12]
 801943c:	2b01      	cmp	r3, #1
 801943e:	d907      	bls.n	8019450 <_fwalk_sglue+0x38>
 8019440:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019444:	3301      	adds	r3, #1
 8019446:	d003      	beq.n	8019450 <_fwalk_sglue+0x38>
 8019448:	4629      	mov	r1, r5
 801944a:	4638      	mov	r0, r7
 801944c:	47c0      	blx	r8
 801944e:	4306      	orrs	r6, r0
 8019450:	3568      	adds	r5, #104	@ 0x68
 8019452:	e7e9      	b.n	8019428 <_fwalk_sglue+0x10>

08019454 <_fwrite_r>:
 8019454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019458:	9c08      	ldr	r4, [sp, #32]
 801945a:	468a      	mov	sl, r1
 801945c:	4690      	mov	r8, r2
 801945e:	fb02 f903 	mul.w	r9, r2, r3
 8019462:	4606      	mov	r6, r0
 8019464:	b118      	cbz	r0, 801946e <_fwrite_r+0x1a>
 8019466:	6a03      	ldr	r3, [r0, #32]
 8019468:	b90b      	cbnz	r3, 801946e <_fwrite_r+0x1a>
 801946a:	f7ff ffbd 	bl	80193e8 <__sinit>
 801946e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019470:	07dd      	lsls	r5, r3, #31
 8019472:	d405      	bmi.n	8019480 <_fwrite_r+0x2c>
 8019474:	89a3      	ldrh	r3, [r4, #12]
 8019476:	0598      	lsls	r0, r3, #22
 8019478:	d402      	bmi.n	8019480 <_fwrite_r+0x2c>
 801947a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801947c:	f000 fa89 	bl	8019992 <__retarget_lock_acquire_recursive>
 8019480:	89a3      	ldrh	r3, [r4, #12]
 8019482:	0719      	lsls	r1, r3, #28
 8019484:	d516      	bpl.n	80194b4 <_fwrite_r+0x60>
 8019486:	6923      	ldr	r3, [r4, #16]
 8019488:	b1a3      	cbz	r3, 80194b4 <_fwrite_r+0x60>
 801948a:	2500      	movs	r5, #0
 801948c:	454d      	cmp	r5, r9
 801948e:	d01f      	beq.n	80194d0 <_fwrite_r+0x7c>
 8019490:	68a7      	ldr	r7, [r4, #8]
 8019492:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8019496:	3f01      	subs	r7, #1
 8019498:	2f00      	cmp	r7, #0
 801949a:	60a7      	str	r7, [r4, #8]
 801949c:	da04      	bge.n	80194a8 <_fwrite_r+0x54>
 801949e:	69a3      	ldr	r3, [r4, #24]
 80194a0:	429f      	cmp	r7, r3
 80194a2:	db0f      	blt.n	80194c4 <_fwrite_r+0x70>
 80194a4:	290a      	cmp	r1, #10
 80194a6:	d00d      	beq.n	80194c4 <_fwrite_r+0x70>
 80194a8:	6823      	ldr	r3, [r4, #0]
 80194aa:	1c5a      	adds	r2, r3, #1
 80194ac:	6022      	str	r2, [r4, #0]
 80194ae:	7019      	strb	r1, [r3, #0]
 80194b0:	3501      	adds	r5, #1
 80194b2:	e7eb      	b.n	801948c <_fwrite_r+0x38>
 80194b4:	4621      	mov	r1, r4
 80194b6:	4630      	mov	r0, r6
 80194b8:	f000 f92c 	bl	8019714 <__swsetup_r>
 80194bc:	2800      	cmp	r0, #0
 80194be:	d0e4      	beq.n	801948a <_fwrite_r+0x36>
 80194c0:	2500      	movs	r5, #0
 80194c2:	e005      	b.n	80194d0 <_fwrite_r+0x7c>
 80194c4:	4622      	mov	r2, r4
 80194c6:	4630      	mov	r0, r6
 80194c8:	f000 f8e6 	bl	8019698 <__swbuf_r>
 80194cc:	3001      	adds	r0, #1
 80194ce:	d1ef      	bne.n	80194b0 <_fwrite_r+0x5c>
 80194d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80194d2:	07da      	lsls	r2, r3, #31
 80194d4:	d405      	bmi.n	80194e2 <_fwrite_r+0x8e>
 80194d6:	89a3      	ldrh	r3, [r4, #12]
 80194d8:	059b      	lsls	r3, r3, #22
 80194da:	d402      	bmi.n	80194e2 <_fwrite_r+0x8e>
 80194dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80194de:	f000 fa59 	bl	8019994 <__retarget_lock_release_recursive>
 80194e2:	fbb5 f0f8 	udiv	r0, r5, r8
 80194e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080194ec <fwrite>:
 80194ec:	b507      	push	{r0, r1, r2, lr}
 80194ee:	9300      	str	r3, [sp, #0]
 80194f0:	4613      	mov	r3, r2
 80194f2:	460a      	mov	r2, r1
 80194f4:	4601      	mov	r1, r0
 80194f6:	4803      	ldr	r0, [pc, #12]	@ (8019504 <fwrite+0x18>)
 80194f8:	6800      	ldr	r0, [r0, #0]
 80194fa:	f7ff ffab 	bl	8019454 <_fwrite_r>
 80194fe:	b003      	add	sp, #12
 8019500:	f85d fb04 	ldr.w	pc, [sp], #4
 8019504:	2000091c 	.word	0x2000091c

08019508 <iprintf>:
 8019508:	b40f      	push	{r0, r1, r2, r3}
 801950a:	b507      	push	{r0, r1, r2, lr}
 801950c:	4906      	ldr	r1, [pc, #24]	@ (8019528 <iprintf+0x20>)
 801950e:	ab04      	add	r3, sp, #16
 8019510:	6808      	ldr	r0, [r1, #0]
 8019512:	f853 2b04 	ldr.w	r2, [r3], #4
 8019516:	6881      	ldr	r1, [r0, #8]
 8019518:	9301      	str	r3, [sp, #4]
 801951a:	f000 fc51 	bl	8019dc0 <_vfiprintf_r>
 801951e:	b003      	add	sp, #12
 8019520:	f85d eb04 	ldr.w	lr, [sp], #4
 8019524:	b004      	add	sp, #16
 8019526:	4770      	bx	lr
 8019528:	2000091c 	.word	0x2000091c

0801952c <sniprintf>:
 801952c:	b40c      	push	{r2, r3}
 801952e:	b530      	push	{r4, r5, lr}
 8019530:	4b18      	ldr	r3, [pc, #96]	@ (8019594 <sniprintf+0x68>)
 8019532:	1e0c      	subs	r4, r1, #0
 8019534:	681d      	ldr	r5, [r3, #0]
 8019536:	b09d      	sub	sp, #116	@ 0x74
 8019538:	da08      	bge.n	801954c <sniprintf+0x20>
 801953a:	238b      	movs	r3, #139	@ 0x8b
 801953c:	602b      	str	r3, [r5, #0]
 801953e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019542:	b01d      	add	sp, #116	@ 0x74
 8019544:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019548:	b002      	add	sp, #8
 801954a:	4770      	bx	lr
 801954c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8019550:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019554:	f04f 0300 	mov.w	r3, #0
 8019558:	931b      	str	r3, [sp, #108]	@ 0x6c
 801955a:	bf14      	ite	ne
 801955c:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8019560:	4623      	moveq	r3, r4
 8019562:	9304      	str	r3, [sp, #16]
 8019564:	9307      	str	r3, [sp, #28]
 8019566:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801956a:	9002      	str	r0, [sp, #8]
 801956c:	9006      	str	r0, [sp, #24]
 801956e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019572:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8019574:	ab21      	add	r3, sp, #132	@ 0x84
 8019576:	a902      	add	r1, sp, #8
 8019578:	4628      	mov	r0, r5
 801957a:	9301      	str	r3, [sp, #4]
 801957c:	f000 fafa 	bl	8019b74 <_svfiprintf_r>
 8019580:	1c43      	adds	r3, r0, #1
 8019582:	bfbc      	itt	lt
 8019584:	238b      	movlt	r3, #139	@ 0x8b
 8019586:	602b      	strlt	r3, [r5, #0]
 8019588:	2c00      	cmp	r4, #0
 801958a:	d0da      	beq.n	8019542 <sniprintf+0x16>
 801958c:	9b02      	ldr	r3, [sp, #8]
 801958e:	2200      	movs	r2, #0
 8019590:	701a      	strb	r2, [r3, #0]
 8019592:	e7d6      	b.n	8019542 <sniprintf+0x16>
 8019594:	2000091c 	.word	0x2000091c

08019598 <__sread>:
 8019598:	b510      	push	{r4, lr}
 801959a:	460c      	mov	r4, r1
 801959c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80195a0:	f000 f998 	bl	80198d4 <_read_r>
 80195a4:	2800      	cmp	r0, #0
 80195a6:	bfab      	itete	ge
 80195a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80195aa:	89a3      	ldrhlt	r3, [r4, #12]
 80195ac:	181b      	addge	r3, r3, r0
 80195ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80195b2:	bfac      	ite	ge
 80195b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80195b6:	81a3      	strhlt	r3, [r4, #12]
 80195b8:	bd10      	pop	{r4, pc}

080195ba <__swrite>:
 80195ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80195be:	461f      	mov	r7, r3
 80195c0:	898b      	ldrh	r3, [r1, #12]
 80195c2:	05db      	lsls	r3, r3, #23
 80195c4:	4605      	mov	r5, r0
 80195c6:	460c      	mov	r4, r1
 80195c8:	4616      	mov	r6, r2
 80195ca:	d505      	bpl.n	80195d8 <__swrite+0x1e>
 80195cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80195d0:	2302      	movs	r3, #2
 80195d2:	2200      	movs	r2, #0
 80195d4:	f000 f96c 	bl	80198b0 <_lseek_r>
 80195d8:	89a3      	ldrh	r3, [r4, #12]
 80195da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80195de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80195e2:	81a3      	strh	r3, [r4, #12]
 80195e4:	4632      	mov	r2, r6
 80195e6:	463b      	mov	r3, r7
 80195e8:	4628      	mov	r0, r5
 80195ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80195ee:	f000 b993 	b.w	8019918 <_write_r>

080195f2 <__sseek>:
 80195f2:	b510      	push	{r4, lr}
 80195f4:	460c      	mov	r4, r1
 80195f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80195fa:	f000 f959 	bl	80198b0 <_lseek_r>
 80195fe:	1c43      	adds	r3, r0, #1
 8019600:	89a3      	ldrh	r3, [r4, #12]
 8019602:	bf15      	itete	ne
 8019604:	6560      	strne	r0, [r4, #84]	@ 0x54
 8019606:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801960a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801960e:	81a3      	strheq	r3, [r4, #12]
 8019610:	bf18      	it	ne
 8019612:	81a3      	strhne	r3, [r4, #12]
 8019614:	bd10      	pop	{r4, pc}

08019616 <__sclose>:
 8019616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801961a:	f000 b939 	b.w	8019890 <_close_r>

0801961e <_vsniprintf_r>:
 801961e:	b530      	push	{r4, r5, lr}
 8019620:	4614      	mov	r4, r2
 8019622:	2c00      	cmp	r4, #0
 8019624:	b09b      	sub	sp, #108	@ 0x6c
 8019626:	4605      	mov	r5, r0
 8019628:	461a      	mov	r2, r3
 801962a:	da05      	bge.n	8019638 <_vsniprintf_r+0x1a>
 801962c:	238b      	movs	r3, #139	@ 0x8b
 801962e:	6003      	str	r3, [r0, #0]
 8019630:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019634:	b01b      	add	sp, #108	@ 0x6c
 8019636:	bd30      	pop	{r4, r5, pc}
 8019638:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801963c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8019640:	f04f 0300 	mov.w	r3, #0
 8019644:	9319      	str	r3, [sp, #100]	@ 0x64
 8019646:	bf14      	ite	ne
 8019648:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801964c:	4623      	moveq	r3, r4
 801964e:	9302      	str	r3, [sp, #8]
 8019650:	9305      	str	r3, [sp, #20]
 8019652:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019656:	9100      	str	r1, [sp, #0]
 8019658:	9104      	str	r1, [sp, #16]
 801965a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801965e:	4669      	mov	r1, sp
 8019660:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8019662:	f000 fa87 	bl	8019b74 <_svfiprintf_r>
 8019666:	1c43      	adds	r3, r0, #1
 8019668:	bfbc      	itt	lt
 801966a:	238b      	movlt	r3, #139	@ 0x8b
 801966c:	602b      	strlt	r3, [r5, #0]
 801966e:	2c00      	cmp	r4, #0
 8019670:	d0e0      	beq.n	8019634 <_vsniprintf_r+0x16>
 8019672:	9b00      	ldr	r3, [sp, #0]
 8019674:	2200      	movs	r2, #0
 8019676:	701a      	strb	r2, [r3, #0]
 8019678:	e7dc      	b.n	8019634 <_vsniprintf_r+0x16>
	...

0801967c <vsniprintf>:
 801967c:	b507      	push	{r0, r1, r2, lr}
 801967e:	9300      	str	r3, [sp, #0]
 8019680:	4613      	mov	r3, r2
 8019682:	460a      	mov	r2, r1
 8019684:	4601      	mov	r1, r0
 8019686:	4803      	ldr	r0, [pc, #12]	@ (8019694 <vsniprintf+0x18>)
 8019688:	6800      	ldr	r0, [r0, #0]
 801968a:	f7ff ffc8 	bl	801961e <_vsniprintf_r>
 801968e:	b003      	add	sp, #12
 8019690:	f85d fb04 	ldr.w	pc, [sp], #4
 8019694:	2000091c 	.word	0x2000091c

08019698 <__swbuf_r>:
 8019698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801969a:	460e      	mov	r6, r1
 801969c:	4614      	mov	r4, r2
 801969e:	4605      	mov	r5, r0
 80196a0:	b118      	cbz	r0, 80196aa <__swbuf_r+0x12>
 80196a2:	6a03      	ldr	r3, [r0, #32]
 80196a4:	b90b      	cbnz	r3, 80196aa <__swbuf_r+0x12>
 80196a6:	f7ff fe9f 	bl	80193e8 <__sinit>
 80196aa:	69a3      	ldr	r3, [r4, #24]
 80196ac:	60a3      	str	r3, [r4, #8]
 80196ae:	89a3      	ldrh	r3, [r4, #12]
 80196b0:	071a      	lsls	r2, r3, #28
 80196b2:	d501      	bpl.n	80196b8 <__swbuf_r+0x20>
 80196b4:	6923      	ldr	r3, [r4, #16]
 80196b6:	b943      	cbnz	r3, 80196ca <__swbuf_r+0x32>
 80196b8:	4621      	mov	r1, r4
 80196ba:	4628      	mov	r0, r5
 80196bc:	f000 f82a 	bl	8019714 <__swsetup_r>
 80196c0:	b118      	cbz	r0, 80196ca <__swbuf_r+0x32>
 80196c2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80196c6:	4638      	mov	r0, r7
 80196c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80196ca:	6823      	ldr	r3, [r4, #0]
 80196cc:	6922      	ldr	r2, [r4, #16]
 80196ce:	1a98      	subs	r0, r3, r2
 80196d0:	6963      	ldr	r3, [r4, #20]
 80196d2:	b2f6      	uxtb	r6, r6
 80196d4:	4283      	cmp	r3, r0
 80196d6:	4637      	mov	r7, r6
 80196d8:	dc05      	bgt.n	80196e6 <__swbuf_r+0x4e>
 80196da:	4621      	mov	r1, r4
 80196dc:	4628      	mov	r0, r5
 80196de:	f000 fe97 	bl	801a410 <_fflush_r>
 80196e2:	2800      	cmp	r0, #0
 80196e4:	d1ed      	bne.n	80196c2 <__swbuf_r+0x2a>
 80196e6:	68a3      	ldr	r3, [r4, #8]
 80196e8:	3b01      	subs	r3, #1
 80196ea:	60a3      	str	r3, [r4, #8]
 80196ec:	6823      	ldr	r3, [r4, #0]
 80196ee:	1c5a      	adds	r2, r3, #1
 80196f0:	6022      	str	r2, [r4, #0]
 80196f2:	701e      	strb	r6, [r3, #0]
 80196f4:	6962      	ldr	r2, [r4, #20]
 80196f6:	1c43      	adds	r3, r0, #1
 80196f8:	429a      	cmp	r2, r3
 80196fa:	d004      	beq.n	8019706 <__swbuf_r+0x6e>
 80196fc:	89a3      	ldrh	r3, [r4, #12]
 80196fe:	07db      	lsls	r3, r3, #31
 8019700:	d5e1      	bpl.n	80196c6 <__swbuf_r+0x2e>
 8019702:	2e0a      	cmp	r6, #10
 8019704:	d1df      	bne.n	80196c6 <__swbuf_r+0x2e>
 8019706:	4621      	mov	r1, r4
 8019708:	4628      	mov	r0, r5
 801970a:	f000 fe81 	bl	801a410 <_fflush_r>
 801970e:	2800      	cmp	r0, #0
 8019710:	d0d9      	beq.n	80196c6 <__swbuf_r+0x2e>
 8019712:	e7d6      	b.n	80196c2 <__swbuf_r+0x2a>

08019714 <__swsetup_r>:
 8019714:	b538      	push	{r3, r4, r5, lr}
 8019716:	4b29      	ldr	r3, [pc, #164]	@ (80197bc <__swsetup_r+0xa8>)
 8019718:	4605      	mov	r5, r0
 801971a:	6818      	ldr	r0, [r3, #0]
 801971c:	460c      	mov	r4, r1
 801971e:	b118      	cbz	r0, 8019728 <__swsetup_r+0x14>
 8019720:	6a03      	ldr	r3, [r0, #32]
 8019722:	b90b      	cbnz	r3, 8019728 <__swsetup_r+0x14>
 8019724:	f7ff fe60 	bl	80193e8 <__sinit>
 8019728:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801972c:	0719      	lsls	r1, r3, #28
 801972e:	d422      	bmi.n	8019776 <__swsetup_r+0x62>
 8019730:	06da      	lsls	r2, r3, #27
 8019732:	d407      	bmi.n	8019744 <__swsetup_r+0x30>
 8019734:	2209      	movs	r2, #9
 8019736:	602a      	str	r2, [r5, #0]
 8019738:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801973c:	81a3      	strh	r3, [r4, #12]
 801973e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019742:	e033      	b.n	80197ac <__swsetup_r+0x98>
 8019744:	0758      	lsls	r0, r3, #29
 8019746:	d512      	bpl.n	801976e <__swsetup_r+0x5a>
 8019748:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801974a:	b141      	cbz	r1, 801975e <__swsetup_r+0x4a>
 801974c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019750:	4299      	cmp	r1, r3
 8019752:	d002      	beq.n	801975a <__swsetup_r+0x46>
 8019754:	4628      	mov	r0, r5
 8019756:	f000 f95f 	bl	8019a18 <_free_r>
 801975a:	2300      	movs	r3, #0
 801975c:	6363      	str	r3, [r4, #52]	@ 0x34
 801975e:	89a3      	ldrh	r3, [r4, #12]
 8019760:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8019764:	81a3      	strh	r3, [r4, #12]
 8019766:	2300      	movs	r3, #0
 8019768:	6063      	str	r3, [r4, #4]
 801976a:	6923      	ldr	r3, [r4, #16]
 801976c:	6023      	str	r3, [r4, #0]
 801976e:	89a3      	ldrh	r3, [r4, #12]
 8019770:	f043 0308 	orr.w	r3, r3, #8
 8019774:	81a3      	strh	r3, [r4, #12]
 8019776:	6923      	ldr	r3, [r4, #16]
 8019778:	b94b      	cbnz	r3, 801978e <__swsetup_r+0x7a>
 801977a:	89a3      	ldrh	r3, [r4, #12]
 801977c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8019780:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019784:	d003      	beq.n	801978e <__swsetup_r+0x7a>
 8019786:	4621      	mov	r1, r4
 8019788:	4628      	mov	r0, r5
 801978a:	f000 fea1 	bl	801a4d0 <__smakebuf_r>
 801978e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019792:	f013 0201 	ands.w	r2, r3, #1
 8019796:	d00a      	beq.n	80197ae <__swsetup_r+0x9a>
 8019798:	2200      	movs	r2, #0
 801979a:	60a2      	str	r2, [r4, #8]
 801979c:	6962      	ldr	r2, [r4, #20]
 801979e:	4252      	negs	r2, r2
 80197a0:	61a2      	str	r2, [r4, #24]
 80197a2:	6922      	ldr	r2, [r4, #16]
 80197a4:	b942      	cbnz	r2, 80197b8 <__swsetup_r+0xa4>
 80197a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80197aa:	d1c5      	bne.n	8019738 <__swsetup_r+0x24>
 80197ac:	bd38      	pop	{r3, r4, r5, pc}
 80197ae:	0799      	lsls	r1, r3, #30
 80197b0:	bf58      	it	pl
 80197b2:	6962      	ldrpl	r2, [r4, #20]
 80197b4:	60a2      	str	r2, [r4, #8]
 80197b6:	e7f4      	b.n	80197a2 <__swsetup_r+0x8e>
 80197b8:	2000      	movs	r0, #0
 80197ba:	e7f7      	b.n	80197ac <__swsetup_r+0x98>
 80197bc:	2000091c 	.word	0x2000091c

080197c0 <memcmp>:
 80197c0:	b510      	push	{r4, lr}
 80197c2:	3901      	subs	r1, #1
 80197c4:	4402      	add	r2, r0
 80197c6:	4290      	cmp	r0, r2
 80197c8:	d101      	bne.n	80197ce <memcmp+0xe>
 80197ca:	2000      	movs	r0, #0
 80197cc:	e005      	b.n	80197da <memcmp+0x1a>
 80197ce:	7803      	ldrb	r3, [r0, #0]
 80197d0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80197d4:	42a3      	cmp	r3, r4
 80197d6:	d001      	beq.n	80197dc <memcmp+0x1c>
 80197d8:	1b18      	subs	r0, r3, r4
 80197da:	bd10      	pop	{r4, pc}
 80197dc:	3001      	adds	r0, #1
 80197de:	e7f2      	b.n	80197c6 <memcmp+0x6>

080197e0 <memmove>:
 80197e0:	4288      	cmp	r0, r1
 80197e2:	b510      	push	{r4, lr}
 80197e4:	eb01 0402 	add.w	r4, r1, r2
 80197e8:	d902      	bls.n	80197f0 <memmove+0x10>
 80197ea:	4284      	cmp	r4, r0
 80197ec:	4623      	mov	r3, r4
 80197ee:	d807      	bhi.n	8019800 <memmove+0x20>
 80197f0:	1e43      	subs	r3, r0, #1
 80197f2:	42a1      	cmp	r1, r4
 80197f4:	d008      	beq.n	8019808 <memmove+0x28>
 80197f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80197fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80197fe:	e7f8      	b.n	80197f2 <memmove+0x12>
 8019800:	4402      	add	r2, r0
 8019802:	4601      	mov	r1, r0
 8019804:	428a      	cmp	r2, r1
 8019806:	d100      	bne.n	801980a <memmove+0x2a>
 8019808:	bd10      	pop	{r4, pc}
 801980a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801980e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019812:	e7f7      	b.n	8019804 <memmove+0x24>

08019814 <memset>:
 8019814:	4402      	add	r2, r0
 8019816:	4603      	mov	r3, r0
 8019818:	4293      	cmp	r3, r2
 801981a:	d100      	bne.n	801981e <memset+0xa>
 801981c:	4770      	bx	lr
 801981e:	f803 1b01 	strb.w	r1, [r3], #1
 8019822:	e7f9      	b.n	8019818 <memset+0x4>

08019824 <strchr>:
 8019824:	b2c9      	uxtb	r1, r1
 8019826:	4603      	mov	r3, r0
 8019828:	4618      	mov	r0, r3
 801982a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801982e:	b112      	cbz	r2, 8019836 <strchr+0x12>
 8019830:	428a      	cmp	r2, r1
 8019832:	d1f9      	bne.n	8019828 <strchr+0x4>
 8019834:	4770      	bx	lr
 8019836:	2900      	cmp	r1, #0
 8019838:	bf18      	it	ne
 801983a:	2000      	movne	r0, #0
 801983c:	4770      	bx	lr

0801983e <strncmp>:
 801983e:	b510      	push	{r4, lr}
 8019840:	b16a      	cbz	r2, 801985e <strncmp+0x20>
 8019842:	3901      	subs	r1, #1
 8019844:	1884      	adds	r4, r0, r2
 8019846:	f810 2b01 	ldrb.w	r2, [r0], #1
 801984a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801984e:	429a      	cmp	r2, r3
 8019850:	d103      	bne.n	801985a <strncmp+0x1c>
 8019852:	42a0      	cmp	r0, r4
 8019854:	d001      	beq.n	801985a <strncmp+0x1c>
 8019856:	2a00      	cmp	r2, #0
 8019858:	d1f5      	bne.n	8019846 <strncmp+0x8>
 801985a:	1ad0      	subs	r0, r2, r3
 801985c:	bd10      	pop	{r4, pc}
 801985e:	4610      	mov	r0, r2
 8019860:	e7fc      	b.n	801985c <strncmp+0x1e>

08019862 <strstr>:
 8019862:	780a      	ldrb	r2, [r1, #0]
 8019864:	b570      	push	{r4, r5, r6, lr}
 8019866:	b96a      	cbnz	r2, 8019884 <strstr+0x22>
 8019868:	bd70      	pop	{r4, r5, r6, pc}
 801986a:	429a      	cmp	r2, r3
 801986c:	d109      	bne.n	8019882 <strstr+0x20>
 801986e:	460c      	mov	r4, r1
 8019870:	4605      	mov	r5, r0
 8019872:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8019876:	2b00      	cmp	r3, #0
 8019878:	d0f6      	beq.n	8019868 <strstr+0x6>
 801987a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801987e:	429e      	cmp	r6, r3
 8019880:	d0f7      	beq.n	8019872 <strstr+0x10>
 8019882:	3001      	adds	r0, #1
 8019884:	7803      	ldrb	r3, [r0, #0]
 8019886:	2b00      	cmp	r3, #0
 8019888:	d1ef      	bne.n	801986a <strstr+0x8>
 801988a:	4618      	mov	r0, r3
 801988c:	e7ec      	b.n	8019868 <strstr+0x6>
	...

08019890 <_close_r>:
 8019890:	b538      	push	{r3, r4, r5, lr}
 8019892:	4d06      	ldr	r5, [pc, #24]	@ (80198ac <_close_r+0x1c>)
 8019894:	2300      	movs	r3, #0
 8019896:	4604      	mov	r4, r0
 8019898:	4608      	mov	r0, r1
 801989a:	602b      	str	r3, [r5, #0]
 801989c:	f7e9 fcba 	bl	8003214 <_close>
 80198a0:	1c43      	adds	r3, r0, #1
 80198a2:	d102      	bne.n	80198aa <_close_r+0x1a>
 80198a4:	682b      	ldr	r3, [r5, #0]
 80198a6:	b103      	cbz	r3, 80198aa <_close_r+0x1a>
 80198a8:	6023      	str	r3, [r4, #0]
 80198aa:	bd38      	pop	{r3, r4, r5, pc}
 80198ac:	20011ad0 	.word	0x20011ad0

080198b0 <_lseek_r>:
 80198b0:	b538      	push	{r3, r4, r5, lr}
 80198b2:	4d07      	ldr	r5, [pc, #28]	@ (80198d0 <_lseek_r+0x20>)
 80198b4:	4604      	mov	r4, r0
 80198b6:	4608      	mov	r0, r1
 80198b8:	4611      	mov	r1, r2
 80198ba:	2200      	movs	r2, #0
 80198bc:	602a      	str	r2, [r5, #0]
 80198be:	461a      	mov	r2, r3
 80198c0:	f7e9 fccf 	bl	8003262 <_lseek>
 80198c4:	1c43      	adds	r3, r0, #1
 80198c6:	d102      	bne.n	80198ce <_lseek_r+0x1e>
 80198c8:	682b      	ldr	r3, [r5, #0]
 80198ca:	b103      	cbz	r3, 80198ce <_lseek_r+0x1e>
 80198cc:	6023      	str	r3, [r4, #0]
 80198ce:	bd38      	pop	{r3, r4, r5, pc}
 80198d0:	20011ad0 	.word	0x20011ad0

080198d4 <_read_r>:
 80198d4:	b538      	push	{r3, r4, r5, lr}
 80198d6:	4d07      	ldr	r5, [pc, #28]	@ (80198f4 <_read_r+0x20>)
 80198d8:	4604      	mov	r4, r0
 80198da:	4608      	mov	r0, r1
 80198dc:	4611      	mov	r1, r2
 80198de:	2200      	movs	r2, #0
 80198e0:	602a      	str	r2, [r5, #0]
 80198e2:	461a      	mov	r2, r3
 80198e4:	f7e9 fc5d 	bl	80031a2 <_read>
 80198e8:	1c43      	adds	r3, r0, #1
 80198ea:	d102      	bne.n	80198f2 <_read_r+0x1e>
 80198ec:	682b      	ldr	r3, [r5, #0]
 80198ee:	b103      	cbz	r3, 80198f2 <_read_r+0x1e>
 80198f0:	6023      	str	r3, [r4, #0]
 80198f2:	bd38      	pop	{r3, r4, r5, pc}
 80198f4:	20011ad0 	.word	0x20011ad0

080198f8 <_sbrk_r>:
 80198f8:	b538      	push	{r3, r4, r5, lr}
 80198fa:	4d06      	ldr	r5, [pc, #24]	@ (8019914 <_sbrk_r+0x1c>)
 80198fc:	2300      	movs	r3, #0
 80198fe:	4604      	mov	r4, r0
 8019900:	4608      	mov	r0, r1
 8019902:	602b      	str	r3, [r5, #0]
 8019904:	f7e9 fcba 	bl	800327c <_sbrk>
 8019908:	1c43      	adds	r3, r0, #1
 801990a:	d102      	bne.n	8019912 <_sbrk_r+0x1a>
 801990c:	682b      	ldr	r3, [r5, #0]
 801990e:	b103      	cbz	r3, 8019912 <_sbrk_r+0x1a>
 8019910:	6023      	str	r3, [r4, #0]
 8019912:	bd38      	pop	{r3, r4, r5, pc}
 8019914:	20011ad0 	.word	0x20011ad0

08019918 <_write_r>:
 8019918:	b538      	push	{r3, r4, r5, lr}
 801991a:	4d07      	ldr	r5, [pc, #28]	@ (8019938 <_write_r+0x20>)
 801991c:	4604      	mov	r4, r0
 801991e:	4608      	mov	r0, r1
 8019920:	4611      	mov	r1, r2
 8019922:	2200      	movs	r2, #0
 8019924:	602a      	str	r2, [r5, #0]
 8019926:	461a      	mov	r2, r3
 8019928:	f7e9 fc58 	bl	80031dc <_write>
 801992c:	1c43      	adds	r3, r0, #1
 801992e:	d102      	bne.n	8019936 <_write_r+0x1e>
 8019930:	682b      	ldr	r3, [r5, #0]
 8019932:	b103      	cbz	r3, 8019936 <_write_r+0x1e>
 8019934:	6023      	str	r3, [r4, #0]
 8019936:	bd38      	pop	{r3, r4, r5, pc}
 8019938:	20011ad0 	.word	0x20011ad0

0801993c <__errno>:
 801993c:	4b01      	ldr	r3, [pc, #4]	@ (8019944 <__errno+0x8>)
 801993e:	6818      	ldr	r0, [r3, #0]
 8019940:	4770      	bx	lr
 8019942:	bf00      	nop
 8019944:	2000091c 	.word	0x2000091c

08019948 <__libc_init_array>:
 8019948:	b570      	push	{r4, r5, r6, lr}
 801994a:	4d0d      	ldr	r5, [pc, #52]	@ (8019980 <__libc_init_array+0x38>)
 801994c:	4c0d      	ldr	r4, [pc, #52]	@ (8019984 <__libc_init_array+0x3c>)
 801994e:	1b64      	subs	r4, r4, r5
 8019950:	10a4      	asrs	r4, r4, #2
 8019952:	2600      	movs	r6, #0
 8019954:	42a6      	cmp	r6, r4
 8019956:	d109      	bne.n	801996c <__libc_init_array+0x24>
 8019958:	4d0b      	ldr	r5, [pc, #44]	@ (8019988 <__libc_init_array+0x40>)
 801995a:	4c0c      	ldr	r4, [pc, #48]	@ (801998c <__libc_init_array+0x44>)
 801995c:	f000 fe62 	bl	801a624 <_init>
 8019960:	1b64      	subs	r4, r4, r5
 8019962:	10a4      	asrs	r4, r4, #2
 8019964:	2600      	movs	r6, #0
 8019966:	42a6      	cmp	r6, r4
 8019968:	d105      	bne.n	8019976 <__libc_init_array+0x2e>
 801996a:	bd70      	pop	{r4, r5, r6, pc}
 801996c:	f855 3b04 	ldr.w	r3, [r5], #4
 8019970:	4798      	blx	r3
 8019972:	3601      	adds	r6, #1
 8019974:	e7ee      	b.n	8019954 <__libc_init_array+0xc>
 8019976:	f855 3b04 	ldr.w	r3, [r5], #4
 801997a:	4798      	blx	r3
 801997c:	3601      	adds	r6, #1
 801997e:	e7f2      	b.n	8019966 <__libc_init_array+0x1e>
 8019980:	0801b8e0 	.word	0x0801b8e0
 8019984:	0801b8e0 	.word	0x0801b8e0
 8019988:	0801b8e0 	.word	0x0801b8e0
 801998c:	0801b8f8 	.word	0x0801b8f8

08019990 <__retarget_lock_init_recursive>:
 8019990:	4770      	bx	lr

08019992 <__retarget_lock_acquire_recursive>:
 8019992:	4770      	bx	lr

08019994 <__retarget_lock_release_recursive>:
 8019994:	4770      	bx	lr

08019996 <strcpy>:
 8019996:	4603      	mov	r3, r0
 8019998:	f811 2b01 	ldrb.w	r2, [r1], #1
 801999c:	f803 2b01 	strb.w	r2, [r3], #1
 80199a0:	2a00      	cmp	r2, #0
 80199a2:	d1f9      	bne.n	8019998 <strcpy+0x2>
 80199a4:	4770      	bx	lr

080199a6 <memcpy>:
 80199a6:	440a      	add	r2, r1
 80199a8:	4291      	cmp	r1, r2
 80199aa:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80199ae:	d100      	bne.n	80199b2 <memcpy+0xc>
 80199b0:	4770      	bx	lr
 80199b2:	b510      	push	{r4, lr}
 80199b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80199b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80199bc:	4291      	cmp	r1, r2
 80199be:	d1f9      	bne.n	80199b4 <memcpy+0xe>
 80199c0:	bd10      	pop	{r4, pc}
	...

080199c4 <__assert_func>:
 80199c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80199c6:	4614      	mov	r4, r2
 80199c8:	461a      	mov	r2, r3
 80199ca:	4b09      	ldr	r3, [pc, #36]	@ (80199f0 <__assert_func+0x2c>)
 80199cc:	681b      	ldr	r3, [r3, #0]
 80199ce:	4605      	mov	r5, r0
 80199d0:	68d8      	ldr	r0, [r3, #12]
 80199d2:	b14c      	cbz	r4, 80199e8 <__assert_func+0x24>
 80199d4:	4b07      	ldr	r3, [pc, #28]	@ (80199f4 <__assert_func+0x30>)
 80199d6:	9100      	str	r1, [sp, #0]
 80199d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80199dc:	4906      	ldr	r1, [pc, #24]	@ (80199f8 <__assert_func+0x34>)
 80199de:	462b      	mov	r3, r5
 80199e0:	f000 fd3e 	bl	801a460 <fiprintf>
 80199e4:	f000 fdd2 	bl	801a58c <abort>
 80199e8:	4b04      	ldr	r3, [pc, #16]	@ (80199fc <__assert_func+0x38>)
 80199ea:	461c      	mov	r4, r3
 80199ec:	e7f3      	b.n	80199d6 <__assert_func+0x12>
 80199ee:	bf00      	nop
 80199f0:	2000091c 	.word	0x2000091c
 80199f4:	0801b767 	.word	0x0801b767
 80199f8:	0801b774 	.word	0x0801b774
 80199fc:	0801b7a2 	.word	0x0801b7a2

08019a00 <__env_lock>:
 8019a00:	4801      	ldr	r0, [pc, #4]	@ (8019a08 <__env_lock+0x8>)
 8019a02:	f7ff bfc6 	b.w	8019992 <__retarget_lock_acquire_recursive>
 8019a06:	bf00      	nop
 8019a08:	20011ad4 	.word	0x20011ad4

08019a0c <__env_unlock>:
 8019a0c:	4801      	ldr	r0, [pc, #4]	@ (8019a14 <__env_unlock+0x8>)
 8019a0e:	f7ff bfc1 	b.w	8019994 <__retarget_lock_release_recursive>
 8019a12:	bf00      	nop
 8019a14:	20011ad4 	.word	0x20011ad4

08019a18 <_free_r>:
 8019a18:	b538      	push	{r3, r4, r5, lr}
 8019a1a:	4605      	mov	r5, r0
 8019a1c:	2900      	cmp	r1, #0
 8019a1e:	d041      	beq.n	8019aa4 <_free_r+0x8c>
 8019a20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019a24:	1f0c      	subs	r4, r1, #4
 8019a26:	2b00      	cmp	r3, #0
 8019a28:	bfb8      	it	lt
 8019a2a:	18e4      	addlt	r4, r4, r3
 8019a2c:	f7ff fb2a 	bl	8019084 <__malloc_lock>
 8019a30:	4a1d      	ldr	r2, [pc, #116]	@ (8019aa8 <_free_r+0x90>)
 8019a32:	6813      	ldr	r3, [r2, #0]
 8019a34:	b933      	cbnz	r3, 8019a44 <_free_r+0x2c>
 8019a36:	6063      	str	r3, [r4, #4]
 8019a38:	6014      	str	r4, [r2, #0]
 8019a3a:	4628      	mov	r0, r5
 8019a3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019a40:	f7ff bb26 	b.w	8019090 <__malloc_unlock>
 8019a44:	42a3      	cmp	r3, r4
 8019a46:	d908      	bls.n	8019a5a <_free_r+0x42>
 8019a48:	6820      	ldr	r0, [r4, #0]
 8019a4a:	1821      	adds	r1, r4, r0
 8019a4c:	428b      	cmp	r3, r1
 8019a4e:	bf01      	itttt	eq
 8019a50:	6819      	ldreq	r1, [r3, #0]
 8019a52:	685b      	ldreq	r3, [r3, #4]
 8019a54:	1809      	addeq	r1, r1, r0
 8019a56:	6021      	streq	r1, [r4, #0]
 8019a58:	e7ed      	b.n	8019a36 <_free_r+0x1e>
 8019a5a:	461a      	mov	r2, r3
 8019a5c:	685b      	ldr	r3, [r3, #4]
 8019a5e:	b10b      	cbz	r3, 8019a64 <_free_r+0x4c>
 8019a60:	42a3      	cmp	r3, r4
 8019a62:	d9fa      	bls.n	8019a5a <_free_r+0x42>
 8019a64:	6811      	ldr	r1, [r2, #0]
 8019a66:	1850      	adds	r0, r2, r1
 8019a68:	42a0      	cmp	r0, r4
 8019a6a:	d10b      	bne.n	8019a84 <_free_r+0x6c>
 8019a6c:	6820      	ldr	r0, [r4, #0]
 8019a6e:	4401      	add	r1, r0
 8019a70:	1850      	adds	r0, r2, r1
 8019a72:	4283      	cmp	r3, r0
 8019a74:	6011      	str	r1, [r2, #0]
 8019a76:	d1e0      	bne.n	8019a3a <_free_r+0x22>
 8019a78:	6818      	ldr	r0, [r3, #0]
 8019a7a:	685b      	ldr	r3, [r3, #4]
 8019a7c:	6053      	str	r3, [r2, #4]
 8019a7e:	4408      	add	r0, r1
 8019a80:	6010      	str	r0, [r2, #0]
 8019a82:	e7da      	b.n	8019a3a <_free_r+0x22>
 8019a84:	d902      	bls.n	8019a8c <_free_r+0x74>
 8019a86:	230c      	movs	r3, #12
 8019a88:	602b      	str	r3, [r5, #0]
 8019a8a:	e7d6      	b.n	8019a3a <_free_r+0x22>
 8019a8c:	6820      	ldr	r0, [r4, #0]
 8019a8e:	1821      	adds	r1, r4, r0
 8019a90:	428b      	cmp	r3, r1
 8019a92:	bf04      	itt	eq
 8019a94:	6819      	ldreq	r1, [r3, #0]
 8019a96:	685b      	ldreq	r3, [r3, #4]
 8019a98:	6063      	str	r3, [r4, #4]
 8019a9a:	bf04      	itt	eq
 8019a9c:	1809      	addeq	r1, r1, r0
 8019a9e:	6021      	streq	r1, [r4, #0]
 8019aa0:	6054      	str	r4, [r2, #4]
 8019aa2:	e7ca      	b.n	8019a3a <_free_r+0x22>
 8019aa4:	bd38      	pop	{r3, r4, r5, pc}
 8019aa6:	bf00      	nop
 8019aa8:	20011990 	.word	0x20011990

08019aac <_malloc_usable_size_r>:
 8019aac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019ab0:	1f18      	subs	r0, r3, #4
 8019ab2:	2b00      	cmp	r3, #0
 8019ab4:	bfbc      	itt	lt
 8019ab6:	580b      	ldrlt	r3, [r1, r0]
 8019ab8:	18c0      	addlt	r0, r0, r3
 8019aba:	4770      	bx	lr

08019abc <__ssputs_r>:
 8019abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ac0:	688e      	ldr	r6, [r1, #8]
 8019ac2:	461f      	mov	r7, r3
 8019ac4:	42be      	cmp	r6, r7
 8019ac6:	680b      	ldr	r3, [r1, #0]
 8019ac8:	4682      	mov	sl, r0
 8019aca:	460c      	mov	r4, r1
 8019acc:	4690      	mov	r8, r2
 8019ace:	d82d      	bhi.n	8019b2c <__ssputs_r+0x70>
 8019ad0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019ad4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8019ad8:	d026      	beq.n	8019b28 <__ssputs_r+0x6c>
 8019ada:	6965      	ldr	r5, [r4, #20]
 8019adc:	6909      	ldr	r1, [r1, #16]
 8019ade:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019ae2:	eba3 0901 	sub.w	r9, r3, r1
 8019ae6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019aea:	1c7b      	adds	r3, r7, #1
 8019aec:	444b      	add	r3, r9
 8019aee:	106d      	asrs	r5, r5, #1
 8019af0:	429d      	cmp	r5, r3
 8019af2:	bf38      	it	cc
 8019af4:	461d      	movcc	r5, r3
 8019af6:	0553      	lsls	r3, r2, #21
 8019af8:	d527      	bpl.n	8019b4a <__ssputs_r+0x8e>
 8019afa:	4629      	mov	r1, r5
 8019afc:	f7ff fa42 	bl	8018f84 <_malloc_r>
 8019b00:	4606      	mov	r6, r0
 8019b02:	b360      	cbz	r0, 8019b5e <__ssputs_r+0xa2>
 8019b04:	6921      	ldr	r1, [r4, #16]
 8019b06:	464a      	mov	r2, r9
 8019b08:	f7ff ff4d 	bl	80199a6 <memcpy>
 8019b0c:	89a3      	ldrh	r3, [r4, #12]
 8019b0e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8019b12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019b16:	81a3      	strh	r3, [r4, #12]
 8019b18:	6126      	str	r6, [r4, #16]
 8019b1a:	6165      	str	r5, [r4, #20]
 8019b1c:	444e      	add	r6, r9
 8019b1e:	eba5 0509 	sub.w	r5, r5, r9
 8019b22:	6026      	str	r6, [r4, #0]
 8019b24:	60a5      	str	r5, [r4, #8]
 8019b26:	463e      	mov	r6, r7
 8019b28:	42be      	cmp	r6, r7
 8019b2a:	d900      	bls.n	8019b2e <__ssputs_r+0x72>
 8019b2c:	463e      	mov	r6, r7
 8019b2e:	6820      	ldr	r0, [r4, #0]
 8019b30:	4632      	mov	r2, r6
 8019b32:	4641      	mov	r1, r8
 8019b34:	f7ff fe54 	bl	80197e0 <memmove>
 8019b38:	68a3      	ldr	r3, [r4, #8]
 8019b3a:	1b9b      	subs	r3, r3, r6
 8019b3c:	60a3      	str	r3, [r4, #8]
 8019b3e:	6823      	ldr	r3, [r4, #0]
 8019b40:	4433      	add	r3, r6
 8019b42:	6023      	str	r3, [r4, #0]
 8019b44:	2000      	movs	r0, #0
 8019b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b4a:	462a      	mov	r2, r5
 8019b4c:	f7ff fb1a 	bl	8019184 <_realloc_r>
 8019b50:	4606      	mov	r6, r0
 8019b52:	2800      	cmp	r0, #0
 8019b54:	d1e0      	bne.n	8019b18 <__ssputs_r+0x5c>
 8019b56:	6921      	ldr	r1, [r4, #16]
 8019b58:	4650      	mov	r0, sl
 8019b5a:	f7ff ff5d 	bl	8019a18 <_free_r>
 8019b5e:	230c      	movs	r3, #12
 8019b60:	f8ca 3000 	str.w	r3, [sl]
 8019b64:	89a3      	ldrh	r3, [r4, #12]
 8019b66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019b6a:	81a3      	strh	r3, [r4, #12]
 8019b6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019b70:	e7e9      	b.n	8019b46 <__ssputs_r+0x8a>
	...

08019b74 <_svfiprintf_r>:
 8019b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b78:	4698      	mov	r8, r3
 8019b7a:	898b      	ldrh	r3, [r1, #12]
 8019b7c:	061b      	lsls	r3, r3, #24
 8019b7e:	b09d      	sub	sp, #116	@ 0x74
 8019b80:	4607      	mov	r7, r0
 8019b82:	460d      	mov	r5, r1
 8019b84:	4614      	mov	r4, r2
 8019b86:	d510      	bpl.n	8019baa <_svfiprintf_r+0x36>
 8019b88:	690b      	ldr	r3, [r1, #16]
 8019b8a:	b973      	cbnz	r3, 8019baa <_svfiprintf_r+0x36>
 8019b8c:	2140      	movs	r1, #64	@ 0x40
 8019b8e:	f7ff f9f9 	bl	8018f84 <_malloc_r>
 8019b92:	6028      	str	r0, [r5, #0]
 8019b94:	6128      	str	r0, [r5, #16]
 8019b96:	b930      	cbnz	r0, 8019ba6 <_svfiprintf_r+0x32>
 8019b98:	230c      	movs	r3, #12
 8019b9a:	603b      	str	r3, [r7, #0]
 8019b9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019ba0:	b01d      	add	sp, #116	@ 0x74
 8019ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ba6:	2340      	movs	r3, #64	@ 0x40
 8019ba8:	616b      	str	r3, [r5, #20]
 8019baa:	2300      	movs	r3, #0
 8019bac:	9309      	str	r3, [sp, #36]	@ 0x24
 8019bae:	2320      	movs	r3, #32
 8019bb0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019bb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8019bb8:	2330      	movs	r3, #48	@ 0x30
 8019bba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8019d58 <_svfiprintf_r+0x1e4>
 8019bbe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019bc2:	f04f 0901 	mov.w	r9, #1
 8019bc6:	4623      	mov	r3, r4
 8019bc8:	469a      	mov	sl, r3
 8019bca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019bce:	b10a      	cbz	r2, 8019bd4 <_svfiprintf_r+0x60>
 8019bd0:	2a25      	cmp	r2, #37	@ 0x25
 8019bd2:	d1f9      	bne.n	8019bc8 <_svfiprintf_r+0x54>
 8019bd4:	ebba 0b04 	subs.w	fp, sl, r4
 8019bd8:	d00b      	beq.n	8019bf2 <_svfiprintf_r+0x7e>
 8019bda:	465b      	mov	r3, fp
 8019bdc:	4622      	mov	r2, r4
 8019bde:	4629      	mov	r1, r5
 8019be0:	4638      	mov	r0, r7
 8019be2:	f7ff ff6b 	bl	8019abc <__ssputs_r>
 8019be6:	3001      	adds	r0, #1
 8019be8:	f000 80a7 	beq.w	8019d3a <_svfiprintf_r+0x1c6>
 8019bec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019bee:	445a      	add	r2, fp
 8019bf0:	9209      	str	r2, [sp, #36]	@ 0x24
 8019bf2:	f89a 3000 	ldrb.w	r3, [sl]
 8019bf6:	2b00      	cmp	r3, #0
 8019bf8:	f000 809f 	beq.w	8019d3a <_svfiprintf_r+0x1c6>
 8019bfc:	2300      	movs	r3, #0
 8019bfe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019c02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019c06:	f10a 0a01 	add.w	sl, sl, #1
 8019c0a:	9304      	str	r3, [sp, #16]
 8019c0c:	9307      	str	r3, [sp, #28]
 8019c0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019c12:	931a      	str	r3, [sp, #104]	@ 0x68
 8019c14:	4654      	mov	r4, sl
 8019c16:	2205      	movs	r2, #5
 8019c18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019c1c:	484e      	ldr	r0, [pc, #312]	@ (8019d58 <_svfiprintf_r+0x1e4>)
 8019c1e:	f7e6 fb0f 	bl	8000240 <memchr>
 8019c22:	9a04      	ldr	r2, [sp, #16]
 8019c24:	b9d8      	cbnz	r0, 8019c5e <_svfiprintf_r+0xea>
 8019c26:	06d0      	lsls	r0, r2, #27
 8019c28:	bf44      	itt	mi
 8019c2a:	2320      	movmi	r3, #32
 8019c2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019c30:	0711      	lsls	r1, r2, #28
 8019c32:	bf44      	itt	mi
 8019c34:	232b      	movmi	r3, #43	@ 0x2b
 8019c36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019c3a:	f89a 3000 	ldrb.w	r3, [sl]
 8019c3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8019c40:	d015      	beq.n	8019c6e <_svfiprintf_r+0xfa>
 8019c42:	9a07      	ldr	r2, [sp, #28]
 8019c44:	4654      	mov	r4, sl
 8019c46:	2000      	movs	r0, #0
 8019c48:	f04f 0c0a 	mov.w	ip, #10
 8019c4c:	4621      	mov	r1, r4
 8019c4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019c52:	3b30      	subs	r3, #48	@ 0x30
 8019c54:	2b09      	cmp	r3, #9
 8019c56:	d94b      	bls.n	8019cf0 <_svfiprintf_r+0x17c>
 8019c58:	b1b0      	cbz	r0, 8019c88 <_svfiprintf_r+0x114>
 8019c5a:	9207      	str	r2, [sp, #28]
 8019c5c:	e014      	b.n	8019c88 <_svfiprintf_r+0x114>
 8019c5e:	eba0 0308 	sub.w	r3, r0, r8
 8019c62:	fa09 f303 	lsl.w	r3, r9, r3
 8019c66:	4313      	orrs	r3, r2
 8019c68:	9304      	str	r3, [sp, #16]
 8019c6a:	46a2      	mov	sl, r4
 8019c6c:	e7d2      	b.n	8019c14 <_svfiprintf_r+0xa0>
 8019c6e:	9b03      	ldr	r3, [sp, #12]
 8019c70:	1d19      	adds	r1, r3, #4
 8019c72:	681b      	ldr	r3, [r3, #0]
 8019c74:	9103      	str	r1, [sp, #12]
 8019c76:	2b00      	cmp	r3, #0
 8019c78:	bfbb      	ittet	lt
 8019c7a:	425b      	neglt	r3, r3
 8019c7c:	f042 0202 	orrlt.w	r2, r2, #2
 8019c80:	9307      	strge	r3, [sp, #28]
 8019c82:	9307      	strlt	r3, [sp, #28]
 8019c84:	bfb8      	it	lt
 8019c86:	9204      	strlt	r2, [sp, #16]
 8019c88:	7823      	ldrb	r3, [r4, #0]
 8019c8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8019c8c:	d10a      	bne.n	8019ca4 <_svfiprintf_r+0x130>
 8019c8e:	7863      	ldrb	r3, [r4, #1]
 8019c90:	2b2a      	cmp	r3, #42	@ 0x2a
 8019c92:	d132      	bne.n	8019cfa <_svfiprintf_r+0x186>
 8019c94:	9b03      	ldr	r3, [sp, #12]
 8019c96:	1d1a      	adds	r2, r3, #4
 8019c98:	681b      	ldr	r3, [r3, #0]
 8019c9a:	9203      	str	r2, [sp, #12]
 8019c9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019ca0:	3402      	adds	r4, #2
 8019ca2:	9305      	str	r3, [sp, #20]
 8019ca4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8019d68 <_svfiprintf_r+0x1f4>
 8019ca8:	7821      	ldrb	r1, [r4, #0]
 8019caa:	2203      	movs	r2, #3
 8019cac:	4650      	mov	r0, sl
 8019cae:	f7e6 fac7 	bl	8000240 <memchr>
 8019cb2:	b138      	cbz	r0, 8019cc4 <_svfiprintf_r+0x150>
 8019cb4:	9b04      	ldr	r3, [sp, #16]
 8019cb6:	eba0 000a 	sub.w	r0, r0, sl
 8019cba:	2240      	movs	r2, #64	@ 0x40
 8019cbc:	4082      	lsls	r2, r0
 8019cbe:	4313      	orrs	r3, r2
 8019cc0:	3401      	adds	r4, #1
 8019cc2:	9304      	str	r3, [sp, #16]
 8019cc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019cc8:	4824      	ldr	r0, [pc, #144]	@ (8019d5c <_svfiprintf_r+0x1e8>)
 8019cca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019cce:	2206      	movs	r2, #6
 8019cd0:	f7e6 fab6 	bl	8000240 <memchr>
 8019cd4:	2800      	cmp	r0, #0
 8019cd6:	d036      	beq.n	8019d46 <_svfiprintf_r+0x1d2>
 8019cd8:	4b21      	ldr	r3, [pc, #132]	@ (8019d60 <_svfiprintf_r+0x1ec>)
 8019cda:	bb1b      	cbnz	r3, 8019d24 <_svfiprintf_r+0x1b0>
 8019cdc:	9b03      	ldr	r3, [sp, #12]
 8019cde:	3307      	adds	r3, #7
 8019ce0:	f023 0307 	bic.w	r3, r3, #7
 8019ce4:	3308      	adds	r3, #8
 8019ce6:	9303      	str	r3, [sp, #12]
 8019ce8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019cea:	4433      	add	r3, r6
 8019cec:	9309      	str	r3, [sp, #36]	@ 0x24
 8019cee:	e76a      	b.n	8019bc6 <_svfiprintf_r+0x52>
 8019cf0:	fb0c 3202 	mla	r2, ip, r2, r3
 8019cf4:	460c      	mov	r4, r1
 8019cf6:	2001      	movs	r0, #1
 8019cf8:	e7a8      	b.n	8019c4c <_svfiprintf_r+0xd8>
 8019cfa:	2300      	movs	r3, #0
 8019cfc:	3401      	adds	r4, #1
 8019cfe:	9305      	str	r3, [sp, #20]
 8019d00:	4619      	mov	r1, r3
 8019d02:	f04f 0c0a 	mov.w	ip, #10
 8019d06:	4620      	mov	r0, r4
 8019d08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019d0c:	3a30      	subs	r2, #48	@ 0x30
 8019d0e:	2a09      	cmp	r2, #9
 8019d10:	d903      	bls.n	8019d1a <_svfiprintf_r+0x1a6>
 8019d12:	2b00      	cmp	r3, #0
 8019d14:	d0c6      	beq.n	8019ca4 <_svfiprintf_r+0x130>
 8019d16:	9105      	str	r1, [sp, #20]
 8019d18:	e7c4      	b.n	8019ca4 <_svfiprintf_r+0x130>
 8019d1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8019d1e:	4604      	mov	r4, r0
 8019d20:	2301      	movs	r3, #1
 8019d22:	e7f0      	b.n	8019d06 <_svfiprintf_r+0x192>
 8019d24:	ab03      	add	r3, sp, #12
 8019d26:	9300      	str	r3, [sp, #0]
 8019d28:	462a      	mov	r2, r5
 8019d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8019d64 <_svfiprintf_r+0x1f0>)
 8019d2c:	a904      	add	r1, sp, #16
 8019d2e:	4638      	mov	r0, r7
 8019d30:	f3af 8000 	nop.w
 8019d34:	1c42      	adds	r2, r0, #1
 8019d36:	4606      	mov	r6, r0
 8019d38:	d1d6      	bne.n	8019ce8 <_svfiprintf_r+0x174>
 8019d3a:	89ab      	ldrh	r3, [r5, #12]
 8019d3c:	065b      	lsls	r3, r3, #25
 8019d3e:	f53f af2d 	bmi.w	8019b9c <_svfiprintf_r+0x28>
 8019d42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019d44:	e72c      	b.n	8019ba0 <_svfiprintf_r+0x2c>
 8019d46:	ab03      	add	r3, sp, #12
 8019d48:	9300      	str	r3, [sp, #0]
 8019d4a:	462a      	mov	r2, r5
 8019d4c:	4b05      	ldr	r3, [pc, #20]	@ (8019d64 <_svfiprintf_r+0x1f0>)
 8019d4e:	a904      	add	r1, sp, #16
 8019d50:	4638      	mov	r0, r7
 8019d52:	f000 f9bb 	bl	801a0cc <_printf_i>
 8019d56:	e7ed      	b.n	8019d34 <_svfiprintf_r+0x1c0>
 8019d58:	0801b7a3 	.word	0x0801b7a3
 8019d5c:	0801b7ad 	.word	0x0801b7ad
 8019d60:	00000000 	.word	0x00000000
 8019d64:	08019abd 	.word	0x08019abd
 8019d68:	0801b7a9 	.word	0x0801b7a9

08019d6c <__sfputc_r>:
 8019d6c:	6893      	ldr	r3, [r2, #8]
 8019d6e:	3b01      	subs	r3, #1
 8019d70:	2b00      	cmp	r3, #0
 8019d72:	b410      	push	{r4}
 8019d74:	6093      	str	r3, [r2, #8]
 8019d76:	da08      	bge.n	8019d8a <__sfputc_r+0x1e>
 8019d78:	6994      	ldr	r4, [r2, #24]
 8019d7a:	42a3      	cmp	r3, r4
 8019d7c:	db01      	blt.n	8019d82 <__sfputc_r+0x16>
 8019d7e:	290a      	cmp	r1, #10
 8019d80:	d103      	bne.n	8019d8a <__sfputc_r+0x1e>
 8019d82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019d86:	f7ff bc87 	b.w	8019698 <__swbuf_r>
 8019d8a:	6813      	ldr	r3, [r2, #0]
 8019d8c:	1c58      	adds	r0, r3, #1
 8019d8e:	6010      	str	r0, [r2, #0]
 8019d90:	7019      	strb	r1, [r3, #0]
 8019d92:	4608      	mov	r0, r1
 8019d94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019d98:	4770      	bx	lr

08019d9a <__sfputs_r>:
 8019d9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d9c:	4606      	mov	r6, r0
 8019d9e:	460f      	mov	r7, r1
 8019da0:	4614      	mov	r4, r2
 8019da2:	18d5      	adds	r5, r2, r3
 8019da4:	42ac      	cmp	r4, r5
 8019da6:	d101      	bne.n	8019dac <__sfputs_r+0x12>
 8019da8:	2000      	movs	r0, #0
 8019daa:	e007      	b.n	8019dbc <__sfputs_r+0x22>
 8019dac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019db0:	463a      	mov	r2, r7
 8019db2:	4630      	mov	r0, r6
 8019db4:	f7ff ffda 	bl	8019d6c <__sfputc_r>
 8019db8:	1c43      	adds	r3, r0, #1
 8019dba:	d1f3      	bne.n	8019da4 <__sfputs_r+0xa>
 8019dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019dc0 <_vfiprintf_r>:
 8019dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019dc4:	460d      	mov	r5, r1
 8019dc6:	b09d      	sub	sp, #116	@ 0x74
 8019dc8:	4614      	mov	r4, r2
 8019dca:	4698      	mov	r8, r3
 8019dcc:	4606      	mov	r6, r0
 8019dce:	b118      	cbz	r0, 8019dd8 <_vfiprintf_r+0x18>
 8019dd0:	6a03      	ldr	r3, [r0, #32]
 8019dd2:	b90b      	cbnz	r3, 8019dd8 <_vfiprintf_r+0x18>
 8019dd4:	f7ff fb08 	bl	80193e8 <__sinit>
 8019dd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019dda:	07d9      	lsls	r1, r3, #31
 8019ddc:	d405      	bmi.n	8019dea <_vfiprintf_r+0x2a>
 8019dde:	89ab      	ldrh	r3, [r5, #12]
 8019de0:	059a      	lsls	r2, r3, #22
 8019de2:	d402      	bmi.n	8019dea <_vfiprintf_r+0x2a>
 8019de4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019de6:	f7ff fdd4 	bl	8019992 <__retarget_lock_acquire_recursive>
 8019dea:	89ab      	ldrh	r3, [r5, #12]
 8019dec:	071b      	lsls	r3, r3, #28
 8019dee:	d501      	bpl.n	8019df4 <_vfiprintf_r+0x34>
 8019df0:	692b      	ldr	r3, [r5, #16]
 8019df2:	b99b      	cbnz	r3, 8019e1c <_vfiprintf_r+0x5c>
 8019df4:	4629      	mov	r1, r5
 8019df6:	4630      	mov	r0, r6
 8019df8:	f7ff fc8c 	bl	8019714 <__swsetup_r>
 8019dfc:	b170      	cbz	r0, 8019e1c <_vfiprintf_r+0x5c>
 8019dfe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019e00:	07dc      	lsls	r4, r3, #31
 8019e02:	d504      	bpl.n	8019e0e <_vfiprintf_r+0x4e>
 8019e04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019e08:	b01d      	add	sp, #116	@ 0x74
 8019e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e0e:	89ab      	ldrh	r3, [r5, #12]
 8019e10:	0598      	lsls	r0, r3, #22
 8019e12:	d4f7      	bmi.n	8019e04 <_vfiprintf_r+0x44>
 8019e14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019e16:	f7ff fdbd 	bl	8019994 <__retarget_lock_release_recursive>
 8019e1a:	e7f3      	b.n	8019e04 <_vfiprintf_r+0x44>
 8019e1c:	2300      	movs	r3, #0
 8019e1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8019e20:	2320      	movs	r3, #32
 8019e22:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019e26:	f8cd 800c 	str.w	r8, [sp, #12]
 8019e2a:	2330      	movs	r3, #48	@ 0x30
 8019e2c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8019fdc <_vfiprintf_r+0x21c>
 8019e30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019e34:	f04f 0901 	mov.w	r9, #1
 8019e38:	4623      	mov	r3, r4
 8019e3a:	469a      	mov	sl, r3
 8019e3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019e40:	b10a      	cbz	r2, 8019e46 <_vfiprintf_r+0x86>
 8019e42:	2a25      	cmp	r2, #37	@ 0x25
 8019e44:	d1f9      	bne.n	8019e3a <_vfiprintf_r+0x7a>
 8019e46:	ebba 0b04 	subs.w	fp, sl, r4
 8019e4a:	d00b      	beq.n	8019e64 <_vfiprintf_r+0xa4>
 8019e4c:	465b      	mov	r3, fp
 8019e4e:	4622      	mov	r2, r4
 8019e50:	4629      	mov	r1, r5
 8019e52:	4630      	mov	r0, r6
 8019e54:	f7ff ffa1 	bl	8019d9a <__sfputs_r>
 8019e58:	3001      	adds	r0, #1
 8019e5a:	f000 80a7 	beq.w	8019fac <_vfiprintf_r+0x1ec>
 8019e5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019e60:	445a      	add	r2, fp
 8019e62:	9209      	str	r2, [sp, #36]	@ 0x24
 8019e64:	f89a 3000 	ldrb.w	r3, [sl]
 8019e68:	2b00      	cmp	r3, #0
 8019e6a:	f000 809f 	beq.w	8019fac <_vfiprintf_r+0x1ec>
 8019e6e:	2300      	movs	r3, #0
 8019e70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019e74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019e78:	f10a 0a01 	add.w	sl, sl, #1
 8019e7c:	9304      	str	r3, [sp, #16]
 8019e7e:	9307      	str	r3, [sp, #28]
 8019e80:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019e84:	931a      	str	r3, [sp, #104]	@ 0x68
 8019e86:	4654      	mov	r4, sl
 8019e88:	2205      	movs	r2, #5
 8019e8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019e8e:	4853      	ldr	r0, [pc, #332]	@ (8019fdc <_vfiprintf_r+0x21c>)
 8019e90:	f7e6 f9d6 	bl	8000240 <memchr>
 8019e94:	9a04      	ldr	r2, [sp, #16]
 8019e96:	b9d8      	cbnz	r0, 8019ed0 <_vfiprintf_r+0x110>
 8019e98:	06d1      	lsls	r1, r2, #27
 8019e9a:	bf44      	itt	mi
 8019e9c:	2320      	movmi	r3, #32
 8019e9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019ea2:	0713      	lsls	r3, r2, #28
 8019ea4:	bf44      	itt	mi
 8019ea6:	232b      	movmi	r3, #43	@ 0x2b
 8019ea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019eac:	f89a 3000 	ldrb.w	r3, [sl]
 8019eb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8019eb2:	d015      	beq.n	8019ee0 <_vfiprintf_r+0x120>
 8019eb4:	9a07      	ldr	r2, [sp, #28]
 8019eb6:	4654      	mov	r4, sl
 8019eb8:	2000      	movs	r0, #0
 8019eba:	f04f 0c0a 	mov.w	ip, #10
 8019ebe:	4621      	mov	r1, r4
 8019ec0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019ec4:	3b30      	subs	r3, #48	@ 0x30
 8019ec6:	2b09      	cmp	r3, #9
 8019ec8:	d94b      	bls.n	8019f62 <_vfiprintf_r+0x1a2>
 8019eca:	b1b0      	cbz	r0, 8019efa <_vfiprintf_r+0x13a>
 8019ecc:	9207      	str	r2, [sp, #28]
 8019ece:	e014      	b.n	8019efa <_vfiprintf_r+0x13a>
 8019ed0:	eba0 0308 	sub.w	r3, r0, r8
 8019ed4:	fa09 f303 	lsl.w	r3, r9, r3
 8019ed8:	4313      	orrs	r3, r2
 8019eda:	9304      	str	r3, [sp, #16]
 8019edc:	46a2      	mov	sl, r4
 8019ede:	e7d2      	b.n	8019e86 <_vfiprintf_r+0xc6>
 8019ee0:	9b03      	ldr	r3, [sp, #12]
 8019ee2:	1d19      	adds	r1, r3, #4
 8019ee4:	681b      	ldr	r3, [r3, #0]
 8019ee6:	9103      	str	r1, [sp, #12]
 8019ee8:	2b00      	cmp	r3, #0
 8019eea:	bfbb      	ittet	lt
 8019eec:	425b      	neglt	r3, r3
 8019eee:	f042 0202 	orrlt.w	r2, r2, #2
 8019ef2:	9307      	strge	r3, [sp, #28]
 8019ef4:	9307      	strlt	r3, [sp, #28]
 8019ef6:	bfb8      	it	lt
 8019ef8:	9204      	strlt	r2, [sp, #16]
 8019efa:	7823      	ldrb	r3, [r4, #0]
 8019efc:	2b2e      	cmp	r3, #46	@ 0x2e
 8019efe:	d10a      	bne.n	8019f16 <_vfiprintf_r+0x156>
 8019f00:	7863      	ldrb	r3, [r4, #1]
 8019f02:	2b2a      	cmp	r3, #42	@ 0x2a
 8019f04:	d132      	bne.n	8019f6c <_vfiprintf_r+0x1ac>
 8019f06:	9b03      	ldr	r3, [sp, #12]
 8019f08:	1d1a      	adds	r2, r3, #4
 8019f0a:	681b      	ldr	r3, [r3, #0]
 8019f0c:	9203      	str	r2, [sp, #12]
 8019f0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019f12:	3402      	adds	r4, #2
 8019f14:	9305      	str	r3, [sp, #20]
 8019f16:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8019fec <_vfiprintf_r+0x22c>
 8019f1a:	7821      	ldrb	r1, [r4, #0]
 8019f1c:	2203      	movs	r2, #3
 8019f1e:	4650      	mov	r0, sl
 8019f20:	f7e6 f98e 	bl	8000240 <memchr>
 8019f24:	b138      	cbz	r0, 8019f36 <_vfiprintf_r+0x176>
 8019f26:	9b04      	ldr	r3, [sp, #16]
 8019f28:	eba0 000a 	sub.w	r0, r0, sl
 8019f2c:	2240      	movs	r2, #64	@ 0x40
 8019f2e:	4082      	lsls	r2, r0
 8019f30:	4313      	orrs	r3, r2
 8019f32:	3401      	adds	r4, #1
 8019f34:	9304      	str	r3, [sp, #16]
 8019f36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019f3a:	4829      	ldr	r0, [pc, #164]	@ (8019fe0 <_vfiprintf_r+0x220>)
 8019f3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019f40:	2206      	movs	r2, #6
 8019f42:	f7e6 f97d 	bl	8000240 <memchr>
 8019f46:	2800      	cmp	r0, #0
 8019f48:	d03f      	beq.n	8019fca <_vfiprintf_r+0x20a>
 8019f4a:	4b26      	ldr	r3, [pc, #152]	@ (8019fe4 <_vfiprintf_r+0x224>)
 8019f4c:	bb1b      	cbnz	r3, 8019f96 <_vfiprintf_r+0x1d6>
 8019f4e:	9b03      	ldr	r3, [sp, #12]
 8019f50:	3307      	adds	r3, #7
 8019f52:	f023 0307 	bic.w	r3, r3, #7
 8019f56:	3308      	adds	r3, #8
 8019f58:	9303      	str	r3, [sp, #12]
 8019f5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019f5c:	443b      	add	r3, r7
 8019f5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8019f60:	e76a      	b.n	8019e38 <_vfiprintf_r+0x78>
 8019f62:	fb0c 3202 	mla	r2, ip, r2, r3
 8019f66:	460c      	mov	r4, r1
 8019f68:	2001      	movs	r0, #1
 8019f6a:	e7a8      	b.n	8019ebe <_vfiprintf_r+0xfe>
 8019f6c:	2300      	movs	r3, #0
 8019f6e:	3401      	adds	r4, #1
 8019f70:	9305      	str	r3, [sp, #20]
 8019f72:	4619      	mov	r1, r3
 8019f74:	f04f 0c0a 	mov.w	ip, #10
 8019f78:	4620      	mov	r0, r4
 8019f7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019f7e:	3a30      	subs	r2, #48	@ 0x30
 8019f80:	2a09      	cmp	r2, #9
 8019f82:	d903      	bls.n	8019f8c <_vfiprintf_r+0x1cc>
 8019f84:	2b00      	cmp	r3, #0
 8019f86:	d0c6      	beq.n	8019f16 <_vfiprintf_r+0x156>
 8019f88:	9105      	str	r1, [sp, #20]
 8019f8a:	e7c4      	b.n	8019f16 <_vfiprintf_r+0x156>
 8019f8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8019f90:	4604      	mov	r4, r0
 8019f92:	2301      	movs	r3, #1
 8019f94:	e7f0      	b.n	8019f78 <_vfiprintf_r+0x1b8>
 8019f96:	ab03      	add	r3, sp, #12
 8019f98:	9300      	str	r3, [sp, #0]
 8019f9a:	462a      	mov	r2, r5
 8019f9c:	4b12      	ldr	r3, [pc, #72]	@ (8019fe8 <_vfiprintf_r+0x228>)
 8019f9e:	a904      	add	r1, sp, #16
 8019fa0:	4630      	mov	r0, r6
 8019fa2:	f3af 8000 	nop.w
 8019fa6:	4607      	mov	r7, r0
 8019fa8:	1c78      	adds	r0, r7, #1
 8019faa:	d1d6      	bne.n	8019f5a <_vfiprintf_r+0x19a>
 8019fac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019fae:	07d9      	lsls	r1, r3, #31
 8019fb0:	d405      	bmi.n	8019fbe <_vfiprintf_r+0x1fe>
 8019fb2:	89ab      	ldrh	r3, [r5, #12]
 8019fb4:	059a      	lsls	r2, r3, #22
 8019fb6:	d402      	bmi.n	8019fbe <_vfiprintf_r+0x1fe>
 8019fb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019fba:	f7ff fceb 	bl	8019994 <__retarget_lock_release_recursive>
 8019fbe:	89ab      	ldrh	r3, [r5, #12]
 8019fc0:	065b      	lsls	r3, r3, #25
 8019fc2:	f53f af1f 	bmi.w	8019e04 <_vfiprintf_r+0x44>
 8019fc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019fc8:	e71e      	b.n	8019e08 <_vfiprintf_r+0x48>
 8019fca:	ab03      	add	r3, sp, #12
 8019fcc:	9300      	str	r3, [sp, #0]
 8019fce:	462a      	mov	r2, r5
 8019fd0:	4b05      	ldr	r3, [pc, #20]	@ (8019fe8 <_vfiprintf_r+0x228>)
 8019fd2:	a904      	add	r1, sp, #16
 8019fd4:	4630      	mov	r0, r6
 8019fd6:	f000 f879 	bl	801a0cc <_printf_i>
 8019fda:	e7e4      	b.n	8019fa6 <_vfiprintf_r+0x1e6>
 8019fdc:	0801b7a3 	.word	0x0801b7a3
 8019fe0:	0801b7ad 	.word	0x0801b7ad
 8019fe4:	00000000 	.word	0x00000000
 8019fe8:	08019d9b 	.word	0x08019d9b
 8019fec:	0801b7a9 	.word	0x0801b7a9

08019ff0 <_printf_common>:
 8019ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ff4:	4616      	mov	r6, r2
 8019ff6:	4698      	mov	r8, r3
 8019ff8:	688a      	ldr	r2, [r1, #8]
 8019ffa:	690b      	ldr	r3, [r1, #16]
 8019ffc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a000:	4293      	cmp	r3, r2
 801a002:	bfb8      	it	lt
 801a004:	4613      	movlt	r3, r2
 801a006:	6033      	str	r3, [r6, #0]
 801a008:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801a00c:	4607      	mov	r7, r0
 801a00e:	460c      	mov	r4, r1
 801a010:	b10a      	cbz	r2, 801a016 <_printf_common+0x26>
 801a012:	3301      	adds	r3, #1
 801a014:	6033      	str	r3, [r6, #0]
 801a016:	6823      	ldr	r3, [r4, #0]
 801a018:	0699      	lsls	r1, r3, #26
 801a01a:	bf42      	ittt	mi
 801a01c:	6833      	ldrmi	r3, [r6, #0]
 801a01e:	3302      	addmi	r3, #2
 801a020:	6033      	strmi	r3, [r6, #0]
 801a022:	6825      	ldr	r5, [r4, #0]
 801a024:	f015 0506 	ands.w	r5, r5, #6
 801a028:	d106      	bne.n	801a038 <_printf_common+0x48>
 801a02a:	f104 0a19 	add.w	sl, r4, #25
 801a02e:	68e3      	ldr	r3, [r4, #12]
 801a030:	6832      	ldr	r2, [r6, #0]
 801a032:	1a9b      	subs	r3, r3, r2
 801a034:	42ab      	cmp	r3, r5
 801a036:	dc26      	bgt.n	801a086 <_printf_common+0x96>
 801a038:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801a03c:	6822      	ldr	r2, [r4, #0]
 801a03e:	3b00      	subs	r3, #0
 801a040:	bf18      	it	ne
 801a042:	2301      	movne	r3, #1
 801a044:	0692      	lsls	r2, r2, #26
 801a046:	d42b      	bmi.n	801a0a0 <_printf_common+0xb0>
 801a048:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801a04c:	4641      	mov	r1, r8
 801a04e:	4638      	mov	r0, r7
 801a050:	47c8      	blx	r9
 801a052:	3001      	adds	r0, #1
 801a054:	d01e      	beq.n	801a094 <_printf_common+0xa4>
 801a056:	6823      	ldr	r3, [r4, #0]
 801a058:	6922      	ldr	r2, [r4, #16]
 801a05a:	f003 0306 	and.w	r3, r3, #6
 801a05e:	2b04      	cmp	r3, #4
 801a060:	bf02      	ittt	eq
 801a062:	68e5      	ldreq	r5, [r4, #12]
 801a064:	6833      	ldreq	r3, [r6, #0]
 801a066:	1aed      	subeq	r5, r5, r3
 801a068:	68a3      	ldr	r3, [r4, #8]
 801a06a:	bf0c      	ite	eq
 801a06c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a070:	2500      	movne	r5, #0
 801a072:	4293      	cmp	r3, r2
 801a074:	bfc4      	itt	gt
 801a076:	1a9b      	subgt	r3, r3, r2
 801a078:	18ed      	addgt	r5, r5, r3
 801a07a:	2600      	movs	r6, #0
 801a07c:	341a      	adds	r4, #26
 801a07e:	42b5      	cmp	r5, r6
 801a080:	d11a      	bne.n	801a0b8 <_printf_common+0xc8>
 801a082:	2000      	movs	r0, #0
 801a084:	e008      	b.n	801a098 <_printf_common+0xa8>
 801a086:	2301      	movs	r3, #1
 801a088:	4652      	mov	r2, sl
 801a08a:	4641      	mov	r1, r8
 801a08c:	4638      	mov	r0, r7
 801a08e:	47c8      	blx	r9
 801a090:	3001      	adds	r0, #1
 801a092:	d103      	bne.n	801a09c <_printf_common+0xac>
 801a094:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a09c:	3501      	adds	r5, #1
 801a09e:	e7c6      	b.n	801a02e <_printf_common+0x3e>
 801a0a0:	18e1      	adds	r1, r4, r3
 801a0a2:	1c5a      	adds	r2, r3, #1
 801a0a4:	2030      	movs	r0, #48	@ 0x30
 801a0a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801a0aa:	4422      	add	r2, r4
 801a0ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801a0b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801a0b4:	3302      	adds	r3, #2
 801a0b6:	e7c7      	b.n	801a048 <_printf_common+0x58>
 801a0b8:	2301      	movs	r3, #1
 801a0ba:	4622      	mov	r2, r4
 801a0bc:	4641      	mov	r1, r8
 801a0be:	4638      	mov	r0, r7
 801a0c0:	47c8      	blx	r9
 801a0c2:	3001      	adds	r0, #1
 801a0c4:	d0e6      	beq.n	801a094 <_printf_common+0xa4>
 801a0c6:	3601      	adds	r6, #1
 801a0c8:	e7d9      	b.n	801a07e <_printf_common+0x8e>
	...

0801a0cc <_printf_i>:
 801a0cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a0d0:	7e0f      	ldrb	r7, [r1, #24]
 801a0d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801a0d4:	2f78      	cmp	r7, #120	@ 0x78
 801a0d6:	4691      	mov	r9, r2
 801a0d8:	4680      	mov	r8, r0
 801a0da:	460c      	mov	r4, r1
 801a0dc:	469a      	mov	sl, r3
 801a0de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801a0e2:	d807      	bhi.n	801a0f4 <_printf_i+0x28>
 801a0e4:	2f62      	cmp	r7, #98	@ 0x62
 801a0e6:	d80a      	bhi.n	801a0fe <_printf_i+0x32>
 801a0e8:	2f00      	cmp	r7, #0
 801a0ea:	f000 80d1 	beq.w	801a290 <_printf_i+0x1c4>
 801a0ee:	2f58      	cmp	r7, #88	@ 0x58
 801a0f0:	f000 80b8 	beq.w	801a264 <_printf_i+0x198>
 801a0f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a0f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801a0fc:	e03a      	b.n	801a174 <_printf_i+0xa8>
 801a0fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801a102:	2b15      	cmp	r3, #21
 801a104:	d8f6      	bhi.n	801a0f4 <_printf_i+0x28>
 801a106:	a101      	add	r1, pc, #4	@ (adr r1, 801a10c <_printf_i+0x40>)
 801a108:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a10c:	0801a165 	.word	0x0801a165
 801a110:	0801a179 	.word	0x0801a179
 801a114:	0801a0f5 	.word	0x0801a0f5
 801a118:	0801a0f5 	.word	0x0801a0f5
 801a11c:	0801a0f5 	.word	0x0801a0f5
 801a120:	0801a0f5 	.word	0x0801a0f5
 801a124:	0801a179 	.word	0x0801a179
 801a128:	0801a0f5 	.word	0x0801a0f5
 801a12c:	0801a0f5 	.word	0x0801a0f5
 801a130:	0801a0f5 	.word	0x0801a0f5
 801a134:	0801a0f5 	.word	0x0801a0f5
 801a138:	0801a277 	.word	0x0801a277
 801a13c:	0801a1a3 	.word	0x0801a1a3
 801a140:	0801a231 	.word	0x0801a231
 801a144:	0801a0f5 	.word	0x0801a0f5
 801a148:	0801a0f5 	.word	0x0801a0f5
 801a14c:	0801a299 	.word	0x0801a299
 801a150:	0801a0f5 	.word	0x0801a0f5
 801a154:	0801a1a3 	.word	0x0801a1a3
 801a158:	0801a0f5 	.word	0x0801a0f5
 801a15c:	0801a0f5 	.word	0x0801a0f5
 801a160:	0801a239 	.word	0x0801a239
 801a164:	6833      	ldr	r3, [r6, #0]
 801a166:	1d1a      	adds	r2, r3, #4
 801a168:	681b      	ldr	r3, [r3, #0]
 801a16a:	6032      	str	r2, [r6, #0]
 801a16c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a170:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801a174:	2301      	movs	r3, #1
 801a176:	e09c      	b.n	801a2b2 <_printf_i+0x1e6>
 801a178:	6833      	ldr	r3, [r6, #0]
 801a17a:	6820      	ldr	r0, [r4, #0]
 801a17c:	1d19      	adds	r1, r3, #4
 801a17e:	6031      	str	r1, [r6, #0]
 801a180:	0606      	lsls	r6, r0, #24
 801a182:	d501      	bpl.n	801a188 <_printf_i+0xbc>
 801a184:	681d      	ldr	r5, [r3, #0]
 801a186:	e003      	b.n	801a190 <_printf_i+0xc4>
 801a188:	0645      	lsls	r5, r0, #25
 801a18a:	d5fb      	bpl.n	801a184 <_printf_i+0xb8>
 801a18c:	f9b3 5000 	ldrsh.w	r5, [r3]
 801a190:	2d00      	cmp	r5, #0
 801a192:	da03      	bge.n	801a19c <_printf_i+0xd0>
 801a194:	232d      	movs	r3, #45	@ 0x2d
 801a196:	426d      	negs	r5, r5
 801a198:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a19c:	4858      	ldr	r0, [pc, #352]	@ (801a300 <_printf_i+0x234>)
 801a19e:	230a      	movs	r3, #10
 801a1a0:	e011      	b.n	801a1c6 <_printf_i+0xfa>
 801a1a2:	6821      	ldr	r1, [r4, #0]
 801a1a4:	6833      	ldr	r3, [r6, #0]
 801a1a6:	0608      	lsls	r0, r1, #24
 801a1a8:	f853 5b04 	ldr.w	r5, [r3], #4
 801a1ac:	d402      	bmi.n	801a1b4 <_printf_i+0xe8>
 801a1ae:	0649      	lsls	r1, r1, #25
 801a1b0:	bf48      	it	mi
 801a1b2:	b2ad      	uxthmi	r5, r5
 801a1b4:	2f6f      	cmp	r7, #111	@ 0x6f
 801a1b6:	4852      	ldr	r0, [pc, #328]	@ (801a300 <_printf_i+0x234>)
 801a1b8:	6033      	str	r3, [r6, #0]
 801a1ba:	bf14      	ite	ne
 801a1bc:	230a      	movne	r3, #10
 801a1be:	2308      	moveq	r3, #8
 801a1c0:	2100      	movs	r1, #0
 801a1c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801a1c6:	6866      	ldr	r6, [r4, #4]
 801a1c8:	60a6      	str	r6, [r4, #8]
 801a1ca:	2e00      	cmp	r6, #0
 801a1cc:	db05      	blt.n	801a1da <_printf_i+0x10e>
 801a1ce:	6821      	ldr	r1, [r4, #0]
 801a1d0:	432e      	orrs	r6, r5
 801a1d2:	f021 0104 	bic.w	r1, r1, #4
 801a1d6:	6021      	str	r1, [r4, #0]
 801a1d8:	d04b      	beq.n	801a272 <_printf_i+0x1a6>
 801a1da:	4616      	mov	r6, r2
 801a1dc:	fbb5 f1f3 	udiv	r1, r5, r3
 801a1e0:	fb03 5711 	mls	r7, r3, r1, r5
 801a1e4:	5dc7      	ldrb	r7, [r0, r7]
 801a1e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a1ea:	462f      	mov	r7, r5
 801a1ec:	42bb      	cmp	r3, r7
 801a1ee:	460d      	mov	r5, r1
 801a1f0:	d9f4      	bls.n	801a1dc <_printf_i+0x110>
 801a1f2:	2b08      	cmp	r3, #8
 801a1f4:	d10b      	bne.n	801a20e <_printf_i+0x142>
 801a1f6:	6823      	ldr	r3, [r4, #0]
 801a1f8:	07df      	lsls	r7, r3, #31
 801a1fa:	d508      	bpl.n	801a20e <_printf_i+0x142>
 801a1fc:	6923      	ldr	r3, [r4, #16]
 801a1fe:	6861      	ldr	r1, [r4, #4]
 801a200:	4299      	cmp	r1, r3
 801a202:	bfde      	ittt	le
 801a204:	2330      	movle	r3, #48	@ 0x30
 801a206:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a20a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801a20e:	1b92      	subs	r2, r2, r6
 801a210:	6122      	str	r2, [r4, #16]
 801a212:	f8cd a000 	str.w	sl, [sp]
 801a216:	464b      	mov	r3, r9
 801a218:	aa03      	add	r2, sp, #12
 801a21a:	4621      	mov	r1, r4
 801a21c:	4640      	mov	r0, r8
 801a21e:	f7ff fee7 	bl	8019ff0 <_printf_common>
 801a222:	3001      	adds	r0, #1
 801a224:	d14a      	bne.n	801a2bc <_printf_i+0x1f0>
 801a226:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a22a:	b004      	add	sp, #16
 801a22c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a230:	6823      	ldr	r3, [r4, #0]
 801a232:	f043 0320 	orr.w	r3, r3, #32
 801a236:	6023      	str	r3, [r4, #0]
 801a238:	4832      	ldr	r0, [pc, #200]	@ (801a304 <_printf_i+0x238>)
 801a23a:	2778      	movs	r7, #120	@ 0x78
 801a23c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801a240:	6823      	ldr	r3, [r4, #0]
 801a242:	6831      	ldr	r1, [r6, #0]
 801a244:	061f      	lsls	r7, r3, #24
 801a246:	f851 5b04 	ldr.w	r5, [r1], #4
 801a24a:	d402      	bmi.n	801a252 <_printf_i+0x186>
 801a24c:	065f      	lsls	r7, r3, #25
 801a24e:	bf48      	it	mi
 801a250:	b2ad      	uxthmi	r5, r5
 801a252:	6031      	str	r1, [r6, #0]
 801a254:	07d9      	lsls	r1, r3, #31
 801a256:	bf44      	itt	mi
 801a258:	f043 0320 	orrmi.w	r3, r3, #32
 801a25c:	6023      	strmi	r3, [r4, #0]
 801a25e:	b11d      	cbz	r5, 801a268 <_printf_i+0x19c>
 801a260:	2310      	movs	r3, #16
 801a262:	e7ad      	b.n	801a1c0 <_printf_i+0xf4>
 801a264:	4826      	ldr	r0, [pc, #152]	@ (801a300 <_printf_i+0x234>)
 801a266:	e7e9      	b.n	801a23c <_printf_i+0x170>
 801a268:	6823      	ldr	r3, [r4, #0]
 801a26a:	f023 0320 	bic.w	r3, r3, #32
 801a26e:	6023      	str	r3, [r4, #0]
 801a270:	e7f6      	b.n	801a260 <_printf_i+0x194>
 801a272:	4616      	mov	r6, r2
 801a274:	e7bd      	b.n	801a1f2 <_printf_i+0x126>
 801a276:	6833      	ldr	r3, [r6, #0]
 801a278:	6825      	ldr	r5, [r4, #0]
 801a27a:	6961      	ldr	r1, [r4, #20]
 801a27c:	1d18      	adds	r0, r3, #4
 801a27e:	6030      	str	r0, [r6, #0]
 801a280:	062e      	lsls	r6, r5, #24
 801a282:	681b      	ldr	r3, [r3, #0]
 801a284:	d501      	bpl.n	801a28a <_printf_i+0x1be>
 801a286:	6019      	str	r1, [r3, #0]
 801a288:	e002      	b.n	801a290 <_printf_i+0x1c4>
 801a28a:	0668      	lsls	r0, r5, #25
 801a28c:	d5fb      	bpl.n	801a286 <_printf_i+0x1ba>
 801a28e:	8019      	strh	r1, [r3, #0]
 801a290:	2300      	movs	r3, #0
 801a292:	6123      	str	r3, [r4, #16]
 801a294:	4616      	mov	r6, r2
 801a296:	e7bc      	b.n	801a212 <_printf_i+0x146>
 801a298:	6833      	ldr	r3, [r6, #0]
 801a29a:	1d1a      	adds	r2, r3, #4
 801a29c:	6032      	str	r2, [r6, #0]
 801a29e:	681e      	ldr	r6, [r3, #0]
 801a2a0:	6862      	ldr	r2, [r4, #4]
 801a2a2:	2100      	movs	r1, #0
 801a2a4:	4630      	mov	r0, r6
 801a2a6:	f7e5 ffcb 	bl	8000240 <memchr>
 801a2aa:	b108      	cbz	r0, 801a2b0 <_printf_i+0x1e4>
 801a2ac:	1b80      	subs	r0, r0, r6
 801a2ae:	6060      	str	r0, [r4, #4]
 801a2b0:	6863      	ldr	r3, [r4, #4]
 801a2b2:	6123      	str	r3, [r4, #16]
 801a2b4:	2300      	movs	r3, #0
 801a2b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a2ba:	e7aa      	b.n	801a212 <_printf_i+0x146>
 801a2bc:	6923      	ldr	r3, [r4, #16]
 801a2be:	4632      	mov	r2, r6
 801a2c0:	4649      	mov	r1, r9
 801a2c2:	4640      	mov	r0, r8
 801a2c4:	47d0      	blx	sl
 801a2c6:	3001      	adds	r0, #1
 801a2c8:	d0ad      	beq.n	801a226 <_printf_i+0x15a>
 801a2ca:	6823      	ldr	r3, [r4, #0]
 801a2cc:	079b      	lsls	r3, r3, #30
 801a2ce:	d413      	bmi.n	801a2f8 <_printf_i+0x22c>
 801a2d0:	68e0      	ldr	r0, [r4, #12]
 801a2d2:	9b03      	ldr	r3, [sp, #12]
 801a2d4:	4298      	cmp	r0, r3
 801a2d6:	bfb8      	it	lt
 801a2d8:	4618      	movlt	r0, r3
 801a2da:	e7a6      	b.n	801a22a <_printf_i+0x15e>
 801a2dc:	2301      	movs	r3, #1
 801a2de:	4632      	mov	r2, r6
 801a2e0:	4649      	mov	r1, r9
 801a2e2:	4640      	mov	r0, r8
 801a2e4:	47d0      	blx	sl
 801a2e6:	3001      	adds	r0, #1
 801a2e8:	d09d      	beq.n	801a226 <_printf_i+0x15a>
 801a2ea:	3501      	adds	r5, #1
 801a2ec:	68e3      	ldr	r3, [r4, #12]
 801a2ee:	9903      	ldr	r1, [sp, #12]
 801a2f0:	1a5b      	subs	r3, r3, r1
 801a2f2:	42ab      	cmp	r3, r5
 801a2f4:	dcf2      	bgt.n	801a2dc <_printf_i+0x210>
 801a2f6:	e7eb      	b.n	801a2d0 <_printf_i+0x204>
 801a2f8:	2500      	movs	r5, #0
 801a2fa:	f104 0619 	add.w	r6, r4, #25
 801a2fe:	e7f5      	b.n	801a2ec <_printf_i+0x220>
 801a300:	0801b7b4 	.word	0x0801b7b4
 801a304:	0801b7c5 	.word	0x0801b7c5

0801a308 <__sflush_r>:
 801a308:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a30c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a310:	0716      	lsls	r6, r2, #28
 801a312:	4605      	mov	r5, r0
 801a314:	460c      	mov	r4, r1
 801a316:	d454      	bmi.n	801a3c2 <__sflush_r+0xba>
 801a318:	684b      	ldr	r3, [r1, #4]
 801a31a:	2b00      	cmp	r3, #0
 801a31c:	dc02      	bgt.n	801a324 <__sflush_r+0x1c>
 801a31e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801a320:	2b00      	cmp	r3, #0
 801a322:	dd48      	ble.n	801a3b6 <__sflush_r+0xae>
 801a324:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a326:	2e00      	cmp	r6, #0
 801a328:	d045      	beq.n	801a3b6 <__sflush_r+0xae>
 801a32a:	2300      	movs	r3, #0
 801a32c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801a330:	682f      	ldr	r7, [r5, #0]
 801a332:	6a21      	ldr	r1, [r4, #32]
 801a334:	602b      	str	r3, [r5, #0]
 801a336:	d030      	beq.n	801a39a <__sflush_r+0x92>
 801a338:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801a33a:	89a3      	ldrh	r3, [r4, #12]
 801a33c:	0759      	lsls	r1, r3, #29
 801a33e:	d505      	bpl.n	801a34c <__sflush_r+0x44>
 801a340:	6863      	ldr	r3, [r4, #4]
 801a342:	1ad2      	subs	r2, r2, r3
 801a344:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a346:	b10b      	cbz	r3, 801a34c <__sflush_r+0x44>
 801a348:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801a34a:	1ad2      	subs	r2, r2, r3
 801a34c:	2300      	movs	r3, #0
 801a34e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a350:	6a21      	ldr	r1, [r4, #32]
 801a352:	4628      	mov	r0, r5
 801a354:	47b0      	blx	r6
 801a356:	1c43      	adds	r3, r0, #1
 801a358:	89a3      	ldrh	r3, [r4, #12]
 801a35a:	d106      	bne.n	801a36a <__sflush_r+0x62>
 801a35c:	6829      	ldr	r1, [r5, #0]
 801a35e:	291d      	cmp	r1, #29
 801a360:	d82b      	bhi.n	801a3ba <__sflush_r+0xb2>
 801a362:	4a2a      	ldr	r2, [pc, #168]	@ (801a40c <__sflush_r+0x104>)
 801a364:	40ca      	lsrs	r2, r1
 801a366:	07d6      	lsls	r6, r2, #31
 801a368:	d527      	bpl.n	801a3ba <__sflush_r+0xb2>
 801a36a:	2200      	movs	r2, #0
 801a36c:	6062      	str	r2, [r4, #4]
 801a36e:	04d9      	lsls	r1, r3, #19
 801a370:	6922      	ldr	r2, [r4, #16]
 801a372:	6022      	str	r2, [r4, #0]
 801a374:	d504      	bpl.n	801a380 <__sflush_r+0x78>
 801a376:	1c42      	adds	r2, r0, #1
 801a378:	d101      	bne.n	801a37e <__sflush_r+0x76>
 801a37a:	682b      	ldr	r3, [r5, #0]
 801a37c:	b903      	cbnz	r3, 801a380 <__sflush_r+0x78>
 801a37e:	6560      	str	r0, [r4, #84]	@ 0x54
 801a380:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a382:	602f      	str	r7, [r5, #0]
 801a384:	b1b9      	cbz	r1, 801a3b6 <__sflush_r+0xae>
 801a386:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a38a:	4299      	cmp	r1, r3
 801a38c:	d002      	beq.n	801a394 <__sflush_r+0x8c>
 801a38e:	4628      	mov	r0, r5
 801a390:	f7ff fb42 	bl	8019a18 <_free_r>
 801a394:	2300      	movs	r3, #0
 801a396:	6363      	str	r3, [r4, #52]	@ 0x34
 801a398:	e00d      	b.n	801a3b6 <__sflush_r+0xae>
 801a39a:	2301      	movs	r3, #1
 801a39c:	4628      	mov	r0, r5
 801a39e:	47b0      	blx	r6
 801a3a0:	4602      	mov	r2, r0
 801a3a2:	1c50      	adds	r0, r2, #1
 801a3a4:	d1c9      	bne.n	801a33a <__sflush_r+0x32>
 801a3a6:	682b      	ldr	r3, [r5, #0]
 801a3a8:	2b00      	cmp	r3, #0
 801a3aa:	d0c6      	beq.n	801a33a <__sflush_r+0x32>
 801a3ac:	2b1d      	cmp	r3, #29
 801a3ae:	d001      	beq.n	801a3b4 <__sflush_r+0xac>
 801a3b0:	2b16      	cmp	r3, #22
 801a3b2:	d11e      	bne.n	801a3f2 <__sflush_r+0xea>
 801a3b4:	602f      	str	r7, [r5, #0]
 801a3b6:	2000      	movs	r0, #0
 801a3b8:	e022      	b.n	801a400 <__sflush_r+0xf8>
 801a3ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a3be:	b21b      	sxth	r3, r3
 801a3c0:	e01b      	b.n	801a3fa <__sflush_r+0xf2>
 801a3c2:	690f      	ldr	r7, [r1, #16]
 801a3c4:	2f00      	cmp	r7, #0
 801a3c6:	d0f6      	beq.n	801a3b6 <__sflush_r+0xae>
 801a3c8:	0793      	lsls	r3, r2, #30
 801a3ca:	680e      	ldr	r6, [r1, #0]
 801a3cc:	bf08      	it	eq
 801a3ce:	694b      	ldreq	r3, [r1, #20]
 801a3d0:	600f      	str	r7, [r1, #0]
 801a3d2:	bf18      	it	ne
 801a3d4:	2300      	movne	r3, #0
 801a3d6:	eba6 0807 	sub.w	r8, r6, r7
 801a3da:	608b      	str	r3, [r1, #8]
 801a3dc:	f1b8 0f00 	cmp.w	r8, #0
 801a3e0:	dde9      	ble.n	801a3b6 <__sflush_r+0xae>
 801a3e2:	6a21      	ldr	r1, [r4, #32]
 801a3e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801a3e6:	4643      	mov	r3, r8
 801a3e8:	463a      	mov	r2, r7
 801a3ea:	4628      	mov	r0, r5
 801a3ec:	47b0      	blx	r6
 801a3ee:	2800      	cmp	r0, #0
 801a3f0:	dc08      	bgt.n	801a404 <__sflush_r+0xfc>
 801a3f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a3f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a3fa:	81a3      	strh	r3, [r4, #12]
 801a3fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a404:	4407      	add	r7, r0
 801a406:	eba8 0800 	sub.w	r8, r8, r0
 801a40a:	e7e7      	b.n	801a3dc <__sflush_r+0xd4>
 801a40c:	20400001 	.word	0x20400001

0801a410 <_fflush_r>:
 801a410:	b538      	push	{r3, r4, r5, lr}
 801a412:	690b      	ldr	r3, [r1, #16]
 801a414:	4605      	mov	r5, r0
 801a416:	460c      	mov	r4, r1
 801a418:	b913      	cbnz	r3, 801a420 <_fflush_r+0x10>
 801a41a:	2500      	movs	r5, #0
 801a41c:	4628      	mov	r0, r5
 801a41e:	bd38      	pop	{r3, r4, r5, pc}
 801a420:	b118      	cbz	r0, 801a42a <_fflush_r+0x1a>
 801a422:	6a03      	ldr	r3, [r0, #32]
 801a424:	b90b      	cbnz	r3, 801a42a <_fflush_r+0x1a>
 801a426:	f7fe ffdf 	bl	80193e8 <__sinit>
 801a42a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a42e:	2b00      	cmp	r3, #0
 801a430:	d0f3      	beq.n	801a41a <_fflush_r+0xa>
 801a432:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801a434:	07d0      	lsls	r0, r2, #31
 801a436:	d404      	bmi.n	801a442 <_fflush_r+0x32>
 801a438:	0599      	lsls	r1, r3, #22
 801a43a:	d402      	bmi.n	801a442 <_fflush_r+0x32>
 801a43c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a43e:	f7ff faa8 	bl	8019992 <__retarget_lock_acquire_recursive>
 801a442:	4628      	mov	r0, r5
 801a444:	4621      	mov	r1, r4
 801a446:	f7ff ff5f 	bl	801a308 <__sflush_r>
 801a44a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a44c:	07da      	lsls	r2, r3, #31
 801a44e:	4605      	mov	r5, r0
 801a450:	d4e4      	bmi.n	801a41c <_fflush_r+0xc>
 801a452:	89a3      	ldrh	r3, [r4, #12]
 801a454:	059b      	lsls	r3, r3, #22
 801a456:	d4e1      	bmi.n	801a41c <_fflush_r+0xc>
 801a458:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a45a:	f7ff fa9b 	bl	8019994 <__retarget_lock_release_recursive>
 801a45e:	e7dd      	b.n	801a41c <_fflush_r+0xc>

0801a460 <fiprintf>:
 801a460:	b40e      	push	{r1, r2, r3}
 801a462:	b503      	push	{r0, r1, lr}
 801a464:	4601      	mov	r1, r0
 801a466:	ab03      	add	r3, sp, #12
 801a468:	4805      	ldr	r0, [pc, #20]	@ (801a480 <fiprintf+0x20>)
 801a46a:	f853 2b04 	ldr.w	r2, [r3], #4
 801a46e:	6800      	ldr	r0, [r0, #0]
 801a470:	9301      	str	r3, [sp, #4]
 801a472:	f7ff fca5 	bl	8019dc0 <_vfiprintf_r>
 801a476:	b002      	add	sp, #8
 801a478:	f85d eb04 	ldr.w	lr, [sp], #4
 801a47c:	b003      	add	sp, #12
 801a47e:	4770      	bx	lr
 801a480:	2000091c 	.word	0x2000091c

0801a484 <__swhatbuf_r>:
 801a484:	b570      	push	{r4, r5, r6, lr}
 801a486:	460c      	mov	r4, r1
 801a488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a48c:	2900      	cmp	r1, #0
 801a48e:	b096      	sub	sp, #88	@ 0x58
 801a490:	4615      	mov	r5, r2
 801a492:	461e      	mov	r6, r3
 801a494:	da0d      	bge.n	801a4b2 <__swhatbuf_r+0x2e>
 801a496:	89a3      	ldrh	r3, [r4, #12]
 801a498:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801a49c:	f04f 0100 	mov.w	r1, #0
 801a4a0:	bf14      	ite	ne
 801a4a2:	2340      	movne	r3, #64	@ 0x40
 801a4a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801a4a8:	2000      	movs	r0, #0
 801a4aa:	6031      	str	r1, [r6, #0]
 801a4ac:	602b      	str	r3, [r5, #0]
 801a4ae:	b016      	add	sp, #88	@ 0x58
 801a4b0:	bd70      	pop	{r4, r5, r6, pc}
 801a4b2:	466a      	mov	r2, sp
 801a4b4:	f000 f848 	bl	801a548 <_fstat_r>
 801a4b8:	2800      	cmp	r0, #0
 801a4ba:	dbec      	blt.n	801a496 <__swhatbuf_r+0x12>
 801a4bc:	9901      	ldr	r1, [sp, #4]
 801a4be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801a4c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801a4c6:	4259      	negs	r1, r3
 801a4c8:	4159      	adcs	r1, r3
 801a4ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801a4ce:	e7eb      	b.n	801a4a8 <__swhatbuf_r+0x24>

0801a4d0 <__smakebuf_r>:
 801a4d0:	898b      	ldrh	r3, [r1, #12]
 801a4d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a4d4:	079d      	lsls	r5, r3, #30
 801a4d6:	4606      	mov	r6, r0
 801a4d8:	460c      	mov	r4, r1
 801a4da:	d507      	bpl.n	801a4ec <__smakebuf_r+0x1c>
 801a4dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801a4e0:	6023      	str	r3, [r4, #0]
 801a4e2:	6123      	str	r3, [r4, #16]
 801a4e4:	2301      	movs	r3, #1
 801a4e6:	6163      	str	r3, [r4, #20]
 801a4e8:	b003      	add	sp, #12
 801a4ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a4ec:	ab01      	add	r3, sp, #4
 801a4ee:	466a      	mov	r2, sp
 801a4f0:	f7ff ffc8 	bl	801a484 <__swhatbuf_r>
 801a4f4:	9f00      	ldr	r7, [sp, #0]
 801a4f6:	4605      	mov	r5, r0
 801a4f8:	4639      	mov	r1, r7
 801a4fa:	4630      	mov	r0, r6
 801a4fc:	f7fe fd42 	bl	8018f84 <_malloc_r>
 801a500:	b948      	cbnz	r0, 801a516 <__smakebuf_r+0x46>
 801a502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a506:	059a      	lsls	r2, r3, #22
 801a508:	d4ee      	bmi.n	801a4e8 <__smakebuf_r+0x18>
 801a50a:	f023 0303 	bic.w	r3, r3, #3
 801a50e:	f043 0302 	orr.w	r3, r3, #2
 801a512:	81a3      	strh	r3, [r4, #12]
 801a514:	e7e2      	b.n	801a4dc <__smakebuf_r+0xc>
 801a516:	89a3      	ldrh	r3, [r4, #12]
 801a518:	6020      	str	r0, [r4, #0]
 801a51a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a51e:	81a3      	strh	r3, [r4, #12]
 801a520:	9b01      	ldr	r3, [sp, #4]
 801a522:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801a526:	b15b      	cbz	r3, 801a540 <__smakebuf_r+0x70>
 801a528:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a52c:	4630      	mov	r0, r6
 801a52e:	f000 f81d 	bl	801a56c <_isatty_r>
 801a532:	b128      	cbz	r0, 801a540 <__smakebuf_r+0x70>
 801a534:	89a3      	ldrh	r3, [r4, #12]
 801a536:	f023 0303 	bic.w	r3, r3, #3
 801a53a:	f043 0301 	orr.w	r3, r3, #1
 801a53e:	81a3      	strh	r3, [r4, #12]
 801a540:	89a3      	ldrh	r3, [r4, #12]
 801a542:	431d      	orrs	r5, r3
 801a544:	81a5      	strh	r5, [r4, #12]
 801a546:	e7cf      	b.n	801a4e8 <__smakebuf_r+0x18>

0801a548 <_fstat_r>:
 801a548:	b538      	push	{r3, r4, r5, lr}
 801a54a:	4d07      	ldr	r5, [pc, #28]	@ (801a568 <_fstat_r+0x20>)
 801a54c:	2300      	movs	r3, #0
 801a54e:	4604      	mov	r4, r0
 801a550:	4608      	mov	r0, r1
 801a552:	4611      	mov	r1, r2
 801a554:	602b      	str	r3, [r5, #0]
 801a556:	f7e8 fe69 	bl	800322c <_fstat>
 801a55a:	1c43      	adds	r3, r0, #1
 801a55c:	d102      	bne.n	801a564 <_fstat_r+0x1c>
 801a55e:	682b      	ldr	r3, [r5, #0]
 801a560:	b103      	cbz	r3, 801a564 <_fstat_r+0x1c>
 801a562:	6023      	str	r3, [r4, #0]
 801a564:	bd38      	pop	{r3, r4, r5, pc}
 801a566:	bf00      	nop
 801a568:	20011ad0 	.word	0x20011ad0

0801a56c <_isatty_r>:
 801a56c:	b538      	push	{r3, r4, r5, lr}
 801a56e:	4d06      	ldr	r5, [pc, #24]	@ (801a588 <_isatty_r+0x1c>)
 801a570:	2300      	movs	r3, #0
 801a572:	4604      	mov	r4, r0
 801a574:	4608      	mov	r0, r1
 801a576:	602b      	str	r3, [r5, #0]
 801a578:	f7e8 fe68 	bl	800324c <_isatty>
 801a57c:	1c43      	adds	r3, r0, #1
 801a57e:	d102      	bne.n	801a586 <_isatty_r+0x1a>
 801a580:	682b      	ldr	r3, [r5, #0]
 801a582:	b103      	cbz	r3, 801a586 <_isatty_r+0x1a>
 801a584:	6023      	str	r3, [r4, #0]
 801a586:	bd38      	pop	{r3, r4, r5, pc}
 801a588:	20011ad0 	.word	0x20011ad0

0801a58c <abort>:
 801a58c:	b508      	push	{r3, lr}
 801a58e:	2006      	movs	r0, #6
 801a590:	f000 f82c 	bl	801a5ec <raise>
 801a594:	2001      	movs	r0, #1
 801a596:	f7e8 fdf9 	bl	800318c <_exit>

0801a59a <_raise_r>:
 801a59a:	291f      	cmp	r1, #31
 801a59c:	b538      	push	{r3, r4, r5, lr}
 801a59e:	4605      	mov	r5, r0
 801a5a0:	460c      	mov	r4, r1
 801a5a2:	d904      	bls.n	801a5ae <_raise_r+0x14>
 801a5a4:	2316      	movs	r3, #22
 801a5a6:	6003      	str	r3, [r0, #0]
 801a5a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a5ac:	bd38      	pop	{r3, r4, r5, pc}
 801a5ae:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801a5b0:	b112      	cbz	r2, 801a5b8 <_raise_r+0x1e>
 801a5b2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a5b6:	b94b      	cbnz	r3, 801a5cc <_raise_r+0x32>
 801a5b8:	4628      	mov	r0, r5
 801a5ba:	f000 f831 	bl	801a620 <_getpid_r>
 801a5be:	4622      	mov	r2, r4
 801a5c0:	4601      	mov	r1, r0
 801a5c2:	4628      	mov	r0, r5
 801a5c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a5c8:	f000 b818 	b.w	801a5fc <_kill_r>
 801a5cc:	2b01      	cmp	r3, #1
 801a5ce:	d00a      	beq.n	801a5e6 <_raise_r+0x4c>
 801a5d0:	1c59      	adds	r1, r3, #1
 801a5d2:	d103      	bne.n	801a5dc <_raise_r+0x42>
 801a5d4:	2316      	movs	r3, #22
 801a5d6:	6003      	str	r3, [r0, #0]
 801a5d8:	2001      	movs	r0, #1
 801a5da:	e7e7      	b.n	801a5ac <_raise_r+0x12>
 801a5dc:	2100      	movs	r1, #0
 801a5de:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801a5e2:	4620      	mov	r0, r4
 801a5e4:	4798      	blx	r3
 801a5e6:	2000      	movs	r0, #0
 801a5e8:	e7e0      	b.n	801a5ac <_raise_r+0x12>
	...

0801a5ec <raise>:
 801a5ec:	4b02      	ldr	r3, [pc, #8]	@ (801a5f8 <raise+0xc>)
 801a5ee:	4601      	mov	r1, r0
 801a5f0:	6818      	ldr	r0, [r3, #0]
 801a5f2:	f7ff bfd2 	b.w	801a59a <_raise_r>
 801a5f6:	bf00      	nop
 801a5f8:	2000091c 	.word	0x2000091c

0801a5fc <_kill_r>:
 801a5fc:	b538      	push	{r3, r4, r5, lr}
 801a5fe:	4d07      	ldr	r5, [pc, #28]	@ (801a61c <_kill_r+0x20>)
 801a600:	2300      	movs	r3, #0
 801a602:	4604      	mov	r4, r0
 801a604:	4608      	mov	r0, r1
 801a606:	4611      	mov	r1, r2
 801a608:	602b      	str	r3, [r5, #0]
 801a60a:	f7e8 fdaf 	bl	800316c <_kill>
 801a60e:	1c43      	adds	r3, r0, #1
 801a610:	d102      	bne.n	801a618 <_kill_r+0x1c>
 801a612:	682b      	ldr	r3, [r5, #0]
 801a614:	b103      	cbz	r3, 801a618 <_kill_r+0x1c>
 801a616:	6023      	str	r3, [r4, #0]
 801a618:	bd38      	pop	{r3, r4, r5, pc}
 801a61a:	bf00      	nop
 801a61c:	20011ad0 	.word	0x20011ad0

0801a620 <_getpid_r>:
 801a620:	f7e8 bd9c 	b.w	800315c <_getpid>

0801a624 <_init>:
 801a624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a626:	bf00      	nop
 801a628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a62a:	bc08      	pop	{r3}
 801a62c:	469e      	mov	lr, r3
 801a62e:	4770      	bx	lr

0801a630 <_fini>:
 801a630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a632:	bf00      	nop
 801a634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a636:	bc08      	pop	{r3}
 801a638:	469e      	mov	lr, r3
 801a63a:	4770      	bx	lr
