
tdk_arm_microros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ae8c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001298  0801b060  0801b060  0001c060  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c2f8  0801c2f8  0001e978  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801c2f8  0801c2f8  0001d2f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c300  0801c300  0001e978  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000018  0801c300  0801c300  0001d300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801c318  0801c318  0001d318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000978  20000000  0801c31c  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011160  20000978  0801cc94  0001e978  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20011ad8  0801cc94  0001ead8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001e978  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a294  00000000  00000000  0001e9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005687  00000000  00000000  00048c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bb0  00000000  00000000  0004e2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000157f  00000000  00000000  0004fe78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d0ba  00000000  00000000  000513f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025c76  00000000  00000000  0007e4b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee78b  00000000  00000000  000a4127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001928b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000083a4  00000000  00000000  00192928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0019accc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000978 	.word	0x20000978
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801b044 	.word	0x0801b044

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000097c 	.word	0x2000097c
 800020c:	0801b044 	.word	0x0801b044

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2f>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b94:	bf24      	itt	cs
 8000b96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b9e:	d90d      	bls.n	8000bbc <__aeabi_d2f+0x30>
 8000ba0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ba4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bac:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bb0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb4:	bf08      	it	eq
 8000bb6:	f020 0001 	biceq.w	r0, r0, #1
 8000bba:	4770      	bx	lr
 8000bbc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bc0:	d121      	bne.n	8000c06 <__aeabi_d2f+0x7a>
 8000bc2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bc6:	bfbc      	itt	lt
 8000bc8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bcc:	4770      	bxlt	lr
 8000bce:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bd2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd6:	f1c2 0218 	rsb	r2, r2, #24
 8000bda:	f1c2 0c20 	rsb	ip, r2, #32
 8000bde:	fa10 f30c 	lsls.w	r3, r0, ip
 8000be2:	fa20 f002 	lsr.w	r0, r0, r2
 8000be6:	bf18      	it	ne
 8000be8:	f040 0001 	orrne.w	r0, r0, #1
 8000bec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf8:	ea40 000c 	orr.w	r0, r0, ip
 8000bfc:	fa23 f302 	lsr.w	r3, r3, r2
 8000c00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c04:	e7cc      	b.n	8000ba0 <__aeabi_d2f+0x14>
 8000c06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c0a:	d107      	bne.n	8000c1c <__aeabi_d2f+0x90>
 8000c0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c10:	bf1e      	ittt	ne
 8000c12:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c16:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c1a:	4770      	bxne	lr
 8000c1c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c20:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c24:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <__aeabi_ldivmod>:
 8000c2c:	b97b      	cbnz	r3, 8000c4e <__aeabi_ldivmod+0x22>
 8000c2e:	b972      	cbnz	r2, 8000c4e <__aeabi_ldivmod+0x22>
 8000c30:	2900      	cmp	r1, #0
 8000c32:	bfbe      	ittt	lt
 8000c34:	2000      	movlt	r0, #0
 8000c36:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c3a:	e006      	blt.n	8000c4a <__aeabi_ldivmod+0x1e>
 8000c3c:	bf08      	it	eq
 8000c3e:	2800      	cmpeq	r0, #0
 8000c40:	bf1c      	itt	ne
 8000c42:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c46:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c4a:	f000 b9d3 	b.w	8000ff4 <__aeabi_idiv0>
 8000c4e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c52:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c56:	2900      	cmp	r1, #0
 8000c58:	db09      	blt.n	8000c6e <__aeabi_ldivmod+0x42>
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	db1a      	blt.n	8000c94 <__aeabi_ldivmod+0x68>
 8000c5e:	f000 f84d 	bl	8000cfc <__udivmoddi4>
 8000c62:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c6a:	b004      	add	sp, #16
 8000c6c:	4770      	bx	lr
 8000c6e:	4240      	negs	r0, r0
 8000c70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	db1b      	blt.n	8000cb0 <__aeabi_ldivmod+0x84>
 8000c78:	f000 f840 	bl	8000cfc <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4240      	negs	r0, r0
 8000c88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8c:	4252      	negs	r2, r2
 8000c8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c92:	4770      	bx	lr
 8000c94:	4252      	negs	r2, r2
 8000c96:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c9a:	f000 f82f 	bl	8000cfc <__udivmoddi4>
 8000c9e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca6:	b004      	add	sp, #16
 8000ca8:	4240      	negs	r0, r0
 8000caa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cae:	4770      	bx	lr
 8000cb0:	4252      	negs	r2, r2
 8000cb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb6:	f000 f821 	bl	8000cfc <__udivmoddi4>
 8000cba:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc2:	b004      	add	sp, #16
 8000cc4:	4252      	negs	r2, r2
 8000cc6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_uldivmod>:
 8000ccc:	b953      	cbnz	r3, 8000ce4 <__aeabi_uldivmod+0x18>
 8000cce:	b94a      	cbnz	r2, 8000ce4 <__aeabi_uldivmod+0x18>
 8000cd0:	2900      	cmp	r1, #0
 8000cd2:	bf08      	it	eq
 8000cd4:	2800      	cmpeq	r0, #0
 8000cd6:	bf1c      	itt	ne
 8000cd8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cdc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ce0:	f000 b988 	b.w	8000ff4 <__aeabi_idiv0>
 8000ce4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cec:	f000 f806 	bl	8000cfc <__udivmoddi4>
 8000cf0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf8:	b004      	add	sp, #16
 8000cfa:	4770      	bx	lr

08000cfc <__udivmoddi4>:
 8000cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d00:	9d08      	ldr	r5, [sp, #32]
 8000d02:	468e      	mov	lr, r1
 8000d04:	4604      	mov	r4, r0
 8000d06:	4688      	mov	r8, r1
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d14a      	bne.n	8000da2 <__udivmoddi4+0xa6>
 8000d0c:	428a      	cmp	r2, r1
 8000d0e:	4617      	mov	r7, r2
 8000d10:	d962      	bls.n	8000dd8 <__udivmoddi4+0xdc>
 8000d12:	fab2 f682 	clz	r6, r2
 8000d16:	b14e      	cbz	r6, 8000d2c <__udivmoddi4+0x30>
 8000d18:	f1c6 0320 	rsb	r3, r6, #32
 8000d1c:	fa01 f806 	lsl.w	r8, r1, r6
 8000d20:	fa20 f303 	lsr.w	r3, r0, r3
 8000d24:	40b7      	lsls	r7, r6
 8000d26:	ea43 0808 	orr.w	r8, r3, r8
 8000d2a:	40b4      	lsls	r4, r6
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f fc87 	uxth.w	ip, r7
 8000d34:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d38:	0c23      	lsrs	r3, r4, #16
 8000d3a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d42:	fb01 f20c 	mul.w	r2, r1, ip
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d909      	bls.n	8000d5e <__udivmoddi4+0x62>
 8000d4a:	18fb      	adds	r3, r7, r3
 8000d4c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000d50:	f080 80ea 	bcs.w	8000f28 <__udivmoddi4+0x22c>
 8000d54:	429a      	cmp	r2, r3
 8000d56:	f240 80e7 	bls.w	8000f28 <__udivmoddi4+0x22c>
 8000d5a:	3902      	subs	r1, #2
 8000d5c:	443b      	add	r3, r7
 8000d5e:	1a9a      	subs	r2, r3, r2
 8000d60:	b2a3      	uxth	r3, r4
 8000d62:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d66:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d6e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d72:	459c      	cmp	ip, r3
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0x8e>
 8000d76:	18fb      	adds	r3, r7, r3
 8000d78:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000d7c:	f080 80d6 	bcs.w	8000f2c <__udivmoddi4+0x230>
 8000d80:	459c      	cmp	ip, r3
 8000d82:	f240 80d3 	bls.w	8000f2c <__udivmoddi4+0x230>
 8000d86:	443b      	add	r3, r7
 8000d88:	3802      	subs	r0, #2
 8000d8a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d8e:	eba3 030c 	sub.w	r3, r3, ip
 8000d92:	2100      	movs	r1, #0
 8000d94:	b11d      	cbz	r5, 8000d9e <__udivmoddi4+0xa2>
 8000d96:	40f3      	lsrs	r3, r6
 8000d98:	2200      	movs	r2, #0
 8000d9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d905      	bls.n	8000db2 <__udivmoddi4+0xb6>
 8000da6:	b10d      	cbz	r5, 8000dac <__udivmoddi4+0xb0>
 8000da8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dac:	2100      	movs	r1, #0
 8000dae:	4608      	mov	r0, r1
 8000db0:	e7f5      	b.n	8000d9e <__udivmoddi4+0xa2>
 8000db2:	fab3 f183 	clz	r1, r3
 8000db6:	2900      	cmp	r1, #0
 8000db8:	d146      	bne.n	8000e48 <__udivmoddi4+0x14c>
 8000dba:	4573      	cmp	r3, lr
 8000dbc:	d302      	bcc.n	8000dc4 <__udivmoddi4+0xc8>
 8000dbe:	4282      	cmp	r2, r0
 8000dc0:	f200 8105 	bhi.w	8000fce <__udivmoddi4+0x2d2>
 8000dc4:	1a84      	subs	r4, r0, r2
 8000dc6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000dca:	2001      	movs	r0, #1
 8000dcc:	4690      	mov	r8, r2
 8000dce:	2d00      	cmp	r5, #0
 8000dd0:	d0e5      	beq.n	8000d9e <__udivmoddi4+0xa2>
 8000dd2:	e9c5 4800 	strd	r4, r8, [r5]
 8000dd6:	e7e2      	b.n	8000d9e <__udivmoddi4+0xa2>
 8000dd8:	2a00      	cmp	r2, #0
 8000dda:	f000 8090 	beq.w	8000efe <__udivmoddi4+0x202>
 8000dde:	fab2 f682 	clz	r6, r2
 8000de2:	2e00      	cmp	r6, #0
 8000de4:	f040 80a4 	bne.w	8000f30 <__udivmoddi4+0x234>
 8000de8:	1a8a      	subs	r2, r1, r2
 8000dea:	0c03      	lsrs	r3, r0, #16
 8000dec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000df0:	b280      	uxth	r0, r0
 8000df2:	b2bc      	uxth	r4, r7
 8000df4:	2101      	movs	r1, #1
 8000df6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000dfa:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e02:	fb04 f20c 	mul.w	r2, r4, ip
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d907      	bls.n	8000e1a <__udivmoddi4+0x11e>
 8000e0a:	18fb      	adds	r3, r7, r3
 8000e0c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e10:	d202      	bcs.n	8000e18 <__udivmoddi4+0x11c>
 8000e12:	429a      	cmp	r2, r3
 8000e14:	f200 80e0 	bhi.w	8000fd8 <__udivmoddi4+0x2dc>
 8000e18:	46c4      	mov	ip, r8
 8000e1a:	1a9b      	subs	r3, r3, r2
 8000e1c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e20:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e24:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e28:	fb02 f404 	mul.w	r4, r2, r4
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x144>
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x142>
 8000e38:	429c      	cmp	r4, r3
 8000e3a:	f200 80ca 	bhi.w	8000fd2 <__udivmoddi4+0x2d6>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	1b1b      	subs	r3, r3, r4
 8000e42:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e46:	e7a5      	b.n	8000d94 <__udivmoddi4+0x98>
 8000e48:	f1c1 0620 	rsb	r6, r1, #32
 8000e4c:	408b      	lsls	r3, r1
 8000e4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e52:	431f      	orrs	r7, r3
 8000e54:	fa0e f401 	lsl.w	r4, lr, r1
 8000e58:	fa20 f306 	lsr.w	r3, r0, r6
 8000e5c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e60:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e64:	4323      	orrs	r3, r4
 8000e66:	fa00 f801 	lsl.w	r8, r0, r1
 8000e6a:	fa1f fc87 	uxth.w	ip, r7
 8000e6e:	fbbe f0f9 	udiv	r0, lr, r9
 8000e72:	0c1c      	lsrs	r4, r3, #16
 8000e74:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e78:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e7c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e80:	45a6      	cmp	lr, r4
 8000e82:	fa02 f201 	lsl.w	r2, r2, r1
 8000e86:	d909      	bls.n	8000e9c <__udivmoddi4+0x1a0>
 8000e88:	193c      	adds	r4, r7, r4
 8000e8a:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000e8e:	f080 809c 	bcs.w	8000fca <__udivmoddi4+0x2ce>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f240 8099 	bls.w	8000fca <__udivmoddi4+0x2ce>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	443c      	add	r4, r7
 8000e9c:	eba4 040e 	sub.w	r4, r4, lr
 8000ea0:	fa1f fe83 	uxth.w	lr, r3
 8000ea4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ea8:	fb09 4413 	mls	r4, r9, r3, r4
 8000eac:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000eb0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb4:	45a4      	cmp	ip, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x1ce>
 8000eb8:	193c      	adds	r4, r7, r4
 8000eba:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000ebe:	f080 8082 	bcs.w	8000fc6 <__udivmoddi4+0x2ca>
 8000ec2:	45a4      	cmp	ip, r4
 8000ec4:	d97f      	bls.n	8000fc6 <__udivmoddi4+0x2ca>
 8000ec6:	3b02      	subs	r3, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ece:	eba4 040c 	sub.w	r4, r4, ip
 8000ed2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ed6:	4564      	cmp	r4, ip
 8000ed8:	4673      	mov	r3, lr
 8000eda:	46e1      	mov	r9, ip
 8000edc:	d362      	bcc.n	8000fa4 <__udivmoddi4+0x2a8>
 8000ede:	d05f      	beq.n	8000fa0 <__udivmoddi4+0x2a4>
 8000ee0:	b15d      	cbz	r5, 8000efa <__udivmoddi4+0x1fe>
 8000ee2:	ebb8 0203 	subs.w	r2, r8, r3
 8000ee6:	eb64 0409 	sbc.w	r4, r4, r9
 8000eea:	fa04 f606 	lsl.w	r6, r4, r6
 8000eee:	fa22 f301 	lsr.w	r3, r2, r1
 8000ef2:	431e      	orrs	r6, r3
 8000ef4:	40cc      	lsrs	r4, r1
 8000ef6:	e9c5 6400 	strd	r6, r4, [r5]
 8000efa:	2100      	movs	r1, #0
 8000efc:	e74f      	b.n	8000d9e <__udivmoddi4+0xa2>
 8000efe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f02:	0c01      	lsrs	r1, r0, #16
 8000f04:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f08:	b280      	uxth	r0, r0
 8000f0a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f0e:	463b      	mov	r3, r7
 8000f10:	4638      	mov	r0, r7
 8000f12:	463c      	mov	r4, r7
 8000f14:	46b8      	mov	r8, r7
 8000f16:	46be      	mov	lr, r7
 8000f18:	2620      	movs	r6, #32
 8000f1a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f1e:	eba2 0208 	sub.w	r2, r2, r8
 8000f22:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f26:	e766      	b.n	8000df6 <__udivmoddi4+0xfa>
 8000f28:	4601      	mov	r1, r0
 8000f2a:	e718      	b.n	8000d5e <__udivmoddi4+0x62>
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	e72c      	b.n	8000d8a <__udivmoddi4+0x8e>
 8000f30:	f1c6 0220 	rsb	r2, r6, #32
 8000f34:	fa2e f302 	lsr.w	r3, lr, r2
 8000f38:	40b7      	lsls	r7, r6
 8000f3a:	40b1      	lsls	r1, r6
 8000f3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000f40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f44:	430a      	orrs	r2, r1
 8000f46:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f4a:	b2bc      	uxth	r4, r7
 8000f4c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f50:	0c11      	lsrs	r1, r2, #16
 8000f52:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f56:	fb08 f904 	mul.w	r9, r8, r4
 8000f5a:	40b0      	lsls	r0, r6
 8000f5c:	4589      	cmp	r9, r1
 8000f5e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f62:	b280      	uxth	r0, r0
 8000f64:	d93e      	bls.n	8000fe4 <__udivmoddi4+0x2e8>
 8000f66:	1879      	adds	r1, r7, r1
 8000f68:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000f6c:	d201      	bcs.n	8000f72 <__udivmoddi4+0x276>
 8000f6e:	4589      	cmp	r9, r1
 8000f70:	d81f      	bhi.n	8000fb2 <__udivmoddi4+0x2b6>
 8000f72:	eba1 0109 	sub.w	r1, r1, r9
 8000f76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7a:	fb09 f804 	mul.w	r8, r9, r4
 8000f7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f82:	b292      	uxth	r2, r2
 8000f84:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f88:	4542      	cmp	r2, r8
 8000f8a:	d229      	bcs.n	8000fe0 <__udivmoddi4+0x2e4>
 8000f8c:	18ba      	adds	r2, r7, r2
 8000f8e:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000f92:	d2c4      	bcs.n	8000f1e <__udivmoddi4+0x222>
 8000f94:	4542      	cmp	r2, r8
 8000f96:	d2c2      	bcs.n	8000f1e <__udivmoddi4+0x222>
 8000f98:	f1a9 0102 	sub.w	r1, r9, #2
 8000f9c:	443a      	add	r2, r7
 8000f9e:	e7be      	b.n	8000f1e <__udivmoddi4+0x222>
 8000fa0:	45f0      	cmp	r8, lr
 8000fa2:	d29d      	bcs.n	8000ee0 <__udivmoddi4+0x1e4>
 8000fa4:	ebbe 0302 	subs.w	r3, lr, r2
 8000fa8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fac:	3801      	subs	r0, #1
 8000fae:	46e1      	mov	r9, ip
 8000fb0:	e796      	b.n	8000ee0 <__udivmoddi4+0x1e4>
 8000fb2:	eba7 0909 	sub.w	r9, r7, r9
 8000fb6:	4449      	add	r1, r9
 8000fb8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fbc:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc0:	fb09 f804 	mul.w	r8, r9, r4
 8000fc4:	e7db      	b.n	8000f7e <__udivmoddi4+0x282>
 8000fc6:	4673      	mov	r3, lr
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1ce>
 8000fca:	4650      	mov	r0, sl
 8000fcc:	e766      	b.n	8000e9c <__udivmoddi4+0x1a0>
 8000fce:	4608      	mov	r0, r1
 8000fd0:	e6fd      	b.n	8000dce <__udivmoddi4+0xd2>
 8000fd2:	443b      	add	r3, r7
 8000fd4:	3a02      	subs	r2, #2
 8000fd6:	e733      	b.n	8000e40 <__udivmoddi4+0x144>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	443b      	add	r3, r7
 8000fde:	e71c      	b.n	8000e1a <__udivmoddi4+0x11e>
 8000fe0:	4649      	mov	r1, r9
 8000fe2:	e79c      	b.n	8000f1e <__udivmoddi4+0x222>
 8000fe4:	eba1 0109 	sub.w	r1, r1, r9
 8000fe8:	46c4      	mov	ip, r8
 8000fea:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fee:	fb09 f804 	mul.w	r8, r9, r4
 8000ff2:	e7c4      	b.n	8000f7e <__udivmoddi4+0x282>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <_ZN10UART_servo9UART_SendEh>:
//servo control variale
//declare struct
//servo control function
//servo control variale
//servo control function
void UART_servo::UART_Send(uint8_t u8_data) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	70fb      	strb	r3, [r7, #3]
	uint8_t *u8_pointer = &u8_data;
 8001004:	1cfb      	adds	r3, r7, #3
 8001006:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart3, u8_pointer, 1, 100);
 8001008:	2364      	movs	r3, #100	@ 0x64
 800100a:	2201      	movs	r2, #1
 800100c:	68f9      	ldr	r1, [r7, #12]
 800100e:	4807      	ldr	r0, [pc, #28]	@ (800102c <_ZN10UART_servo9UART_SendEh+0x34>)
 8001010:	f005 fe3c 	bl	8006c8c <HAL_UART_Transmit>
	Checksum_Calc += u8_data;
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	461a      	mov	r2, r3
 8001018:	4b05      	ldr	r3, [pc, #20]	@ (8001030 <_ZN10UART_servo9UART_SendEh+0x38>)
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	4413      	add	r3, r2
 800101e:	b29a      	uxth	r2, r3
 8001020:	4b03      	ldr	r3, [pc, #12]	@ (8001030 <_ZN10UART_servo9UART_SendEh+0x38>)
 8001022:	801a      	strh	r2, [r3, #0]
}
 8001024:	bf00      	nop
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	2000541c 	.word	0x2000541c
 8001030:	20000994 	.word	0x20000994

08001034 <_ZN10UART_servo26UART_Send_SetMotorPositionEttt>:
void UART_servo::UART_Send_SetMotorPosition(uint16_t motorId, uint16_t Position, uint16_t Time) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	4608      	mov	r0, r1
 800103e:	4611      	mov	r1, r2
 8001040:	461a      	mov	r2, r3
 8001042:	4603      	mov	r3, r0
 8001044:	817b      	strh	r3, [r7, #10]
 8001046:	460b      	mov	r3, r1
 8001048:	813b      	strh	r3, [r7, #8]
 800104a:	4613      	mov	r3, r2
 800104c:	80fb      	strh	r3, [r7, #6]
	Checksum_Calc = 0;
 800104e:	4b20      	ldr	r3, [pc, #128]	@ (80010d0 <_ZN10UART_servo26UART_Send_SetMotorPositionEttt+0x9c>)
 8001050:	2200      	movs	r2, #0
 8001052:	801a      	strh	r2, [r3, #0]
	UART_Send(0x80 + motorId);    //header mark & broadcast ID
 8001054:	897b      	ldrh	r3, [r7, #10]
 8001056:	b2db      	uxtb	r3, r3
 8001058:	3b80      	subs	r3, #128	@ 0x80
 800105a:	b2db      	uxtb	r3, r3
 800105c:	4619      	mov	r1, r3
 800105e:	68f8      	ldr	r0, [r7, #12]
 8001060:	f7ff ffca 	bl	8000ff8 <_ZN10UART_servo9UART_SendEh>
	UART_Send(0x83);              //header mark & command code
 8001064:	2183      	movs	r1, #131	@ 0x83
 8001066:	68f8      	ldr	r0, [r7, #12]
 8001068:	f7ff ffc6 	bl	8000ff8 <_ZN10UART_servo9UART_SendEh>
	UART_Send(0x05);              //total data length
 800106c:	2105      	movs	r1, #5
 800106e:	68f8      	ldr	r0, [r7, #12]
 8001070:	f7ff ffc2 	bl	8000ff8 <_ZN10UART_servo9UART_SendEh>
	UART_Send((Position / 256) & 0x7F);  //Servo Pos_H
 8001074:	893b      	ldrh	r3, [r7, #8]
 8001076:	0a1b      	lsrs	r3, r3, #8
 8001078:	b29b      	uxth	r3, r3
 800107a:	b2db      	uxtb	r3, r3
 800107c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001080:	b2db      	uxtb	r3, r3
 8001082:	4619      	mov	r1, r3
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f7ff ffb7 	bl	8000ff8 <_ZN10UART_servo9UART_SendEh>
	UART_Send(Position % 256);           //Servo Pos_L
 800108a:	893b      	ldrh	r3, [r7, #8]
 800108c:	b2db      	uxtb	r3, r3
 800108e:	4619      	mov	r1, r3
 8001090:	68f8      	ldr	r0, [r7, #12]
 8001092:	f7ff ffb1 	bl	8000ff8 <_ZN10UART_servo9UART_SendEh>
	UART_Send((Time / 256) & 0x7F); //Servo Time_H
 8001096:	88fb      	ldrh	r3, [r7, #6]
 8001098:	0a1b      	lsrs	r3, r3, #8
 800109a:	b29b      	uxth	r3, r3
 800109c:	b2db      	uxtb	r3, r3
 800109e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	4619      	mov	r1, r3
 80010a6:	68f8      	ldr	r0, [r7, #12]
 80010a8:	f7ff ffa6 	bl	8000ff8 <_ZN10UART_servo9UART_SendEh>
	UART_Send(Time % 256);          //Servo Time_L
 80010ac:	88fb      	ldrh	r3, [r7, #6]
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	4619      	mov	r1, r3
 80010b2:	68f8      	ldr	r0, [r7, #12]
 80010b4:	f7ff ffa0 	bl	8000ff8 <_ZN10UART_servo9UART_SendEh>
	UART_Send(Checksum_Calc);     //data length (one servo with time and speed)
 80010b8:	4b05      	ldr	r3, [pc, #20]	@ (80010d0 <_ZN10UART_servo26UART_Send_SetMotorPositionEttt+0x9c>)
 80010ba:	881b      	ldrh	r3, [r3, #0]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	4619      	mov	r1, r3
 80010c0:	68f8      	ldr	r0, [r7, #12]
 80010c2:	f7ff ff99 	bl	8000ff8 <_ZN10UART_servo9UART_SendEh>
}
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000994 	.word	0x20000994

080010d4 <_ZN10UART_servo3runEv>:
void UART_servo::run(){//put in timer IT
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	UART_Send_SetMotorPosition(motorId,(uint16_t)(800+7*pos),reflectime);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	8819      	ldrh	r1, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	461a      	mov	r2, r3
 80010e8:	00d2      	lsls	r2, r2, #3
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	891b      	ldrh	r3, [r3, #8]
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ff9b 	bl	8001034 <_ZN10UART_servo26UART_Send_SetMotorPositionEttt>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <_ZN10UART_servo10update_posEi>:
void UART_servo::update_pos(int _pos){
 8001106:	b480      	push	{r7}
 8001108:	b083      	sub	sp, #12
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
 800110e:	6039      	str	r1, [r7, #0]
	pos = _pos;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	683a      	ldr	r2, [r7, #0]
 8001114:	605a      	str	r2, [r3, #4]
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <_ZN10UART_servoC1EttP20__UART_HandleTypeDef>:
public:
	void UART_Send(uint8_t u8_data);
	void UART_Send_SetMotorPosition(uint16_t motorId, uint16_t Position, uint16_t Time);
	void update_pos(int pos);
	void run();
    UART_servo(uint16_t id, uint16_t _reflect_time, UART_HandleTypeDef* _servo_uart)
 8001122:	b480      	push	{r7}
 8001124:	b085      	sub	sp, #20
 8001126:	af00      	add	r7, sp, #0
 8001128:	60f8      	str	r0, [r7, #12]
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	460b      	mov	r3, r1
 800112e:	817b      	strh	r3, [r7, #10]
 8001130:	4613      	mov	r3, r2
 8001132:	813b      	strh	r3, [r7, #8]
        : motorId(id), reflectime(_reflect_time), servo_uart(_servo_uart) {
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	897a      	ldrh	r2, [r7, #10]
 8001138:	801a      	strh	r2, [r3, #0]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	893a      	ldrh	r2, [r7, #8]
 800113e:	811a      	strh	r2, [r3, #8]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	60da      	str	r2, [r3, #12]
        // 初始化其他成員變數
        Position = 0;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2200      	movs	r2, #0
 800114a:	805a      	strh	r2, [r3, #2]
        pos = 0;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2200      	movs	r2, #0
 8001150:	605a      	str	r2, [r3, #4]
    }
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	4618      	mov	r0, r3
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <arm_reset>:

int arm_status = 1;
int all_status =0;
static uint32_t last_command_time = 0;

void arm_reset(void) {
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	// 手臂重置邏輯
	HAL_Init();
 8001164:	f002 fe42 	bl	8003dec <HAL_Init>
	// 啟動 Encoder 與 PWM
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001168:	213c      	movs	r1, #60	@ 0x3c
 800116a:	481a      	ldr	r0, [pc, #104]	@ (80011d4 <arm_reset+0x74>)
 800116c:	f004 fe68 	bl	8005e40 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8001170:	2108      	movs	r1, #8
 8001172:	4819      	ldr	r0, [pc, #100]	@ (80011d8 <arm_reset+0x78>)
 8001174:	f004 fcf6 	bl	8005b64 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8001178:	2104      	movs	r1, #4
 800117a:	4818      	ldr	r0, [pc, #96]	@ (80011dc <arm_reset+0x7c>)
 800117c:	f004 fcf2 	bl	8005b64 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001180:	2201      	movs	r2, #1
 8001182:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001186:	4816      	ldr	r0, [pc, #88]	@ (80011e0 <arm_reset+0x80>)
 8001188:	f003 fcea 	bl	8004b60 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 800118c:	2100      	movs	r1, #0
 800118e:	4812      	ldr	r0, [pc, #72]	@ (80011d8 <arm_reset+0x78>)
 8001190:	f004 fce8 	bl	8005b64 <HAL_TIM_PWM_Start>

	servo1.update_pos(pos1+70);
 8001194:	4b13      	ldr	r3, [pc, #76]	@ (80011e4 <arm_reset+0x84>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	3346      	adds	r3, #70	@ 0x46
 800119a:	4619      	mov	r1, r3
 800119c:	4812      	ldr	r0, [pc, #72]	@ (80011e8 <arm_reset+0x88>)
 800119e:	f7ff ffb2 	bl	8001106 <_ZN10UART_servo10update_posEi>
	servo2.update_pos(pos2+100);
 80011a2:	4b12      	ldr	r3, [pc, #72]	@ (80011ec <arm_reset+0x8c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	3364      	adds	r3, #100	@ 0x64
 80011a8:	4619      	mov	r1, r3
 80011aa:	4811      	ldr	r0, [pc, #68]	@ (80011f0 <arm_reset+0x90>)
 80011ac:	f7ff ffab 	bl	8001106 <_ZN10UART_servo10update_posEi>
	servo3.update_pos(gripper_close);
 80011b0:	4b10      	ldr	r3, [pc, #64]	@ (80011f4 <arm_reset+0x94>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4619      	mov	r1, r3
 80011b6:	4810      	ldr	r0, [pc, #64]	@ (80011f8 <arm_reset+0x98>)
 80011b8:	f7ff ffa5 	bl	8001106 <_ZN10UART_servo10update_posEi>

	servo1.run();
 80011bc:	480a      	ldr	r0, [pc, #40]	@ (80011e8 <arm_reset+0x88>)
 80011be:	f7ff ff89 	bl	80010d4 <_ZN10UART_servo3runEv>
	servo2.run();
 80011c2:	480b      	ldr	r0, [pc, #44]	@ (80011f0 <arm_reset+0x90>)
 80011c4:	f7ff ff86 	bl	80010d4 <_ZN10UART_servo3runEv>
	servo3.run();
 80011c8:	480b      	ldr	r0, [pc, #44]	@ (80011f8 <arm_reset+0x98>)
 80011ca:	f7ff ff83 	bl	80010d4 <_ZN10UART_servo3runEv>
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200052b4 	.word	0x200052b4
 80011d8:	20005344 	.word	0x20005344
 80011dc:	2000538c 	.word	0x2000538c
 80011e0:	40020400 	.word	0x40020400
 80011e4:	20000000 	.word	0x20000000
 80011e8:	20000998 	.word	0x20000998
 80011ec:	20000004 	.word	0x20000004
 80011f0:	200009a8 	.word	0x200009a8
 80011f4:	2000000c 	.word	0x2000000c
 80011f8:	200009b8 	.word	0x200009b8

080011fc <menu_camera>:
//
//		HAL_Delay(DELAY_MS); // 10ms 更新一次
//		}
//}

void menu_camera(void) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
	uint32_t current_time = HAL_GetTick();
 8001202:	f002 fe29 	bl	8003e58 <HAL_GetTick>
 8001206:	6078      	str	r0, [r7, #4]
	cascade_monitor(250);
 8001208:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 80012a8 <menu_camera+0xac>
 800120c:	f000 fdae 	bl	8001d6c <cascade_monitor>
	if(cascade_complete()){
 8001210:	f000 fda2 	bl	8001d58 <cascade_complete>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d035      	beq.n	8001286 <menu_camera+0x8a>
		servo1.update_pos(pos1+70);
 800121a:	4b24      	ldr	r3, [pc, #144]	@ (80012ac <menu_camera+0xb0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	3346      	adds	r3, #70	@ 0x46
 8001220:	4619      	mov	r1, r3
 8001222:	4823      	ldr	r0, [pc, #140]	@ (80012b0 <menu_camera+0xb4>)
 8001224:	f7ff ff6f 	bl	8001106 <_ZN10UART_servo10update_posEi>
		servo2.update_pos(pos2+70);
 8001228:	4b22      	ldr	r3, [pc, #136]	@ (80012b4 <menu_camera+0xb8>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	3346      	adds	r3, #70	@ 0x46
 800122e:	4619      	mov	r1, r3
 8001230:	4821      	ldr	r0, [pc, #132]	@ (80012b8 <menu_camera+0xbc>)
 8001232:	f7ff ff68 	bl	8001106 <_ZN10UART_servo10update_posEi>
		servo3.update_pos(gripper_open);
 8001236:	4b21      	ldr	r3, [pc, #132]	@ (80012bc <menu_camera+0xc0>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4619      	mov	r1, r3
 800123c:	4820      	ldr	r0, [pc, #128]	@ (80012c0 <menu_camera+0xc4>)
 800123e:	f7ff ff62 	bl	8001106 <_ZN10UART_servo10update_posEi>
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 600+10*camera_front);
 8001242:	4b20      	ldr	r3, [pc, #128]	@ (80012c4 <menu_camera+0xc8>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	4613      	mov	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4413      	add	r3, r2
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	f503 7216 	add.w	r2, r3, #600	@ 0x258
 8001252:	4b1d      	ldr	r3, [pc, #116]	@ (80012c8 <menu_camera+0xcc>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	635a      	str	r2, [r3, #52]	@ 0x34
		servo1.run();
 8001258:	4815      	ldr	r0, [pc, #84]	@ (80012b0 <menu_camera+0xb4>)
 800125a:	f7ff ff3b 	bl	80010d4 <_ZN10UART_servo3runEv>
		servo2.run();
 800125e:	4816      	ldr	r0, [pc, #88]	@ (80012b8 <menu_camera+0xbc>)
 8001260:	f7ff ff38 	bl	80010d4 <_ZN10UART_servo3runEv>
		servo3.run();
 8001264:	4816      	ldr	r0, [pc, #88]	@ (80012c0 <menu_camera+0xc4>)
 8001266:	f7ff ff35 	bl	80010d4 <_ZN10UART_servo3runEv>
		if(current_time-last_command_time>2000){
 800126a:	4b18      	ldr	r3, [pc, #96]	@ (80012cc <menu_camera+0xd0>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001276:	d912      	bls.n	800129e <menu_camera+0xa2>
			all_status = 1;
 8001278:	4b15      	ldr	r3, [pc, #84]	@ (80012d0 <menu_camera+0xd4>)
 800127a:	2201      	movs	r2, #1
 800127c:	601a      	str	r2, [r3, #0]
			last_command_time = current_time;
 800127e:	4a13      	ldr	r2, [pc, #76]	@ (80012cc <menu_camera+0xd0>)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6013      	str	r3, [r2, #0]
		servo1.run();
		servo2.run();
		servo3.run();
		last_command_time = current_time;
	}
}
 8001284:	e00b      	b.n	800129e <menu_camera+0xa2>
		servo1.run();
 8001286:	480a      	ldr	r0, [pc, #40]	@ (80012b0 <menu_camera+0xb4>)
 8001288:	f7ff ff24 	bl	80010d4 <_ZN10UART_servo3runEv>
		servo2.run();
 800128c:	480a      	ldr	r0, [pc, #40]	@ (80012b8 <menu_camera+0xbc>)
 800128e:	f7ff ff21 	bl	80010d4 <_ZN10UART_servo3runEv>
		servo3.run();
 8001292:	480b      	ldr	r0, [pc, #44]	@ (80012c0 <menu_camera+0xc4>)
 8001294:	f7ff ff1e 	bl	80010d4 <_ZN10UART_servo3runEv>
		last_command_time = current_time;
 8001298:	4a0c      	ldr	r2, [pc, #48]	@ (80012cc <menu_camera+0xd0>)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6013      	str	r3, [r2, #0]
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	437a0000 	.word	0x437a0000
 80012ac:	20000000 	.word	0x20000000
 80012b0:	20000998 	.word	0x20000998
 80012b4:	20000004 	.word	0x20000004
 80012b8:	200009a8 	.word	0x200009a8
 80012bc:	20000008 	.word	0x20000008
 80012c0:	200009b8 	.word	0x200009b8
 80012c4:	20000010 	.word	0x20000010
 80012c8:	20005344 	.word	0x20005344
 80012cc:	200009cc 	.word	0x200009cc
 80012d0:	200009c8 	.word	0x200009c8

080012d4 <_Z10menu_arm_1v>:

void menu_arm_1(void) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
	uint32_t current_time = HAL_GetTick();
 80012da:	f002 fdbd 	bl	8003e58 <HAL_GetTick>
 80012de:	6078      	str	r0, [r7, #4]
	cascade_monitor(250+324);
 80012e0:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 8001380 <_Z10menu_arm_1v+0xac>
 80012e4:	f000 fd42 	bl	8001d6c <cascade_monitor>
	if(cascade_complete()){
 80012e8:	f000 fd36 	bl	8001d58 <cascade_complete>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d035      	beq.n	800135e <_Z10menu_arm_1v+0x8a>
		servo1.update_pos(pos1-18);
 80012f2:	4b24      	ldr	r3, [pc, #144]	@ (8001384 <_Z10menu_arm_1v+0xb0>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	3b12      	subs	r3, #18
 80012f8:	4619      	mov	r1, r3
 80012fa:	4823      	ldr	r0, [pc, #140]	@ (8001388 <_Z10menu_arm_1v+0xb4>)
 80012fc:	f7ff ff03 	bl	8001106 <_ZN10UART_servo10update_posEi>
		servo2.update_pos(pos2-18);
 8001300:	4b22      	ldr	r3, [pc, #136]	@ (800138c <_Z10menu_arm_1v+0xb8>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	3b12      	subs	r3, #18
 8001306:	4619      	mov	r1, r3
 8001308:	4821      	ldr	r0, [pc, #132]	@ (8001390 <_Z10menu_arm_1v+0xbc>)
 800130a:	f7ff fefc 	bl	8001106 <_ZN10UART_servo10update_posEi>
		servo3.update_pos(gripper_open);
 800130e:	4b21      	ldr	r3, [pc, #132]	@ (8001394 <_Z10menu_arm_1v+0xc0>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4619      	mov	r1, r3
 8001314:	4820      	ldr	r0, [pc, #128]	@ (8001398 <_Z10menu_arm_1v+0xc4>)
 8001316:	f7ff fef6 	bl	8001106 <_ZN10UART_servo10update_posEi>

		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 600+10*camera_front);
 800131a:	4b20      	ldr	r3, [pc, #128]	@ (800139c <_Z10menu_arm_1v+0xc8>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	4613      	mov	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4413      	add	r3, r2
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	f503 7216 	add.w	r2, r3, #600	@ 0x258
 800132a:	4b1d      	ldr	r3, [pc, #116]	@ (80013a0 <_Z10menu_arm_1v+0xcc>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	635a      	str	r2, [r3, #52]	@ 0x34
		servo1.run();
 8001330:	4815      	ldr	r0, [pc, #84]	@ (8001388 <_Z10menu_arm_1v+0xb4>)
 8001332:	f7ff fecf 	bl	80010d4 <_ZN10UART_servo3runEv>
		servo2.run();
 8001336:	4816      	ldr	r0, [pc, #88]	@ (8001390 <_Z10menu_arm_1v+0xbc>)
 8001338:	f7ff fecc 	bl	80010d4 <_ZN10UART_servo3runEv>
		servo3.run();
 800133c:	4816      	ldr	r0, [pc, #88]	@ (8001398 <_Z10menu_arm_1v+0xc4>)
 800133e:	f7ff fec9 	bl	80010d4 <_ZN10UART_servo3runEv>
		if(current_time-last_command_time>2000){
 8001342:	4b18      	ldr	r3, [pc, #96]	@ (80013a4 <_Z10menu_arm_1v+0xd0>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800134e:	d912      	bls.n	8001376 <_Z10menu_arm_1v+0xa2>
			arm_status = 2;
 8001350:	4b15      	ldr	r3, [pc, #84]	@ (80013a8 <_Z10menu_arm_1v+0xd4>)
 8001352:	2202      	movs	r2, #2
 8001354:	601a      	str	r2, [r3, #0]
			last_command_time = current_time;
 8001356:	4a13      	ldr	r2, [pc, #76]	@ (80013a4 <_Z10menu_arm_1v+0xd0>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6013      	str	r3, [r2, #0]
		servo1.run();
		servo2.run();
		servo3.run();
		last_command_time = current_time;
	}
}
 800135c:	e00b      	b.n	8001376 <_Z10menu_arm_1v+0xa2>
		servo1.run();
 800135e:	480a      	ldr	r0, [pc, #40]	@ (8001388 <_Z10menu_arm_1v+0xb4>)
 8001360:	f7ff feb8 	bl	80010d4 <_ZN10UART_servo3runEv>
		servo2.run();
 8001364:	480a      	ldr	r0, [pc, #40]	@ (8001390 <_Z10menu_arm_1v+0xbc>)
 8001366:	f7ff feb5 	bl	80010d4 <_ZN10UART_servo3runEv>
		servo3.run();
 800136a:	480b      	ldr	r0, [pc, #44]	@ (8001398 <_Z10menu_arm_1v+0xc4>)
 800136c:	f7ff feb2 	bl	80010d4 <_ZN10UART_servo3runEv>
		last_command_time = current_time;
 8001370:	4a0c      	ldr	r2, [pc, #48]	@ (80013a4 <_Z10menu_arm_1v+0xd0>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6013      	str	r3, [r2, #0]
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	440f8000 	.word	0x440f8000
 8001384:	20000000 	.word	0x20000000
 8001388:	20000998 	.word	0x20000998
 800138c:	20000004 	.word	0x20000004
 8001390:	200009a8 	.word	0x200009a8
 8001394:	20000008 	.word	0x20000008
 8001398:	200009b8 	.word	0x200009b8
 800139c:	20000010 	.word	0x20000010
 80013a0:	20005344 	.word	0x20005344
 80013a4:	200009cc 	.word	0x200009cc
 80013a8:	20000018 	.word	0x20000018

080013ac <_Z10menu_arm_2v>:

void menu_arm_2(void) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
	uint32_t current_time = HAL_GetTick();
 80013b2:	f002 fd51 	bl	8003e58 <HAL_GetTick>
 80013b6:	6078      	str	r0, [r7, #4]
	cascade_monitor(250+324);
 80013b8:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8001418 <_Z10menu_arm_2v+0x6c>
 80013bc:	f000 fcd6 	bl	8001d6c <cascade_monitor>
	if(cascade_complete()){
 80013c0:	f000 fcca 	bl	8001d58 <cascade_complete>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d016      	beq.n	80013f8 <_Z10menu_arm_2v+0x4c>
		servo3.update_pos(gripper_close);
 80013ca:	4b14      	ldr	r3, [pc, #80]	@ (800141c <_Z10menu_arm_2v+0x70>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4619      	mov	r1, r3
 80013d0:	4813      	ldr	r0, [pc, #76]	@ (8001420 <_Z10menu_arm_2v+0x74>)
 80013d2:	f7ff fe98 	bl	8001106 <_ZN10UART_servo10update_posEi>
		servo3.run();
 80013d6:	4812      	ldr	r0, [pc, #72]	@ (8001420 <_Z10menu_arm_2v+0x74>)
 80013d8:	f7ff fe7c 	bl	80010d4 <_ZN10UART_servo3runEv>
		if(current_time-last_command_time>2000){
 80013dc:	4b11      	ldr	r3, [pc, #68]	@ (8001424 <_Z10menu_arm_2v+0x78>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80013e8:	d912      	bls.n	8001410 <_Z10menu_arm_2v+0x64>
			all_status = 1;
 80013ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001428 <_Z10menu_arm_2v+0x7c>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	601a      	str	r2, [r3, #0]
			last_command_time = current_time;
 80013f0:	4a0c      	ldr	r2, [pc, #48]	@ (8001424 <_Z10menu_arm_2v+0x78>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6013      	str	r3, [r2, #0]
		servo1.run();
		servo2.run();
		servo3.run();
		last_command_time = current_time;
	}
}
 80013f6:	e00b      	b.n	8001410 <_Z10menu_arm_2v+0x64>
		servo1.run();
 80013f8:	480c      	ldr	r0, [pc, #48]	@ (800142c <_Z10menu_arm_2v+0x80>)
 80013fa:	f7ff fe6b 	bl	80010d4 <_ZN10UART_servo3runEv>
		servo2.run();
 80013fe:	480c      	ldr	r0, [pc, #48]	@ (8001430 <_Z10menu_arm_2v+0x84>)
 8001400:	f7ff fe68 	bl	80010d4 <_ZN10UART_servo3runEv>
		servo3.run();
 8001404:	4806      	ldr	r0, [pc, #24]	@ (8001420 <_Z10menu_arm_2v+0x74>)
 8001406:	f7ff fe65 	bl	80010d4 <_ZN10UART_servo3runEv>
		last_command_time = current_time;
 800140a:	4a06      	ldr	r2, [pc, #24]	@ (8001424 <_Z10menu_arm_2v+0x78>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6013      	str	r3, [r2, #0]
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	440f8000 	.word	0x440f8000
 800141c:	2000000c 	.word	0x2000000c
 8001420:	200009b8 	.word	0x200009b8
 8001424:	200009cc 	.word	0x200009cc
 8001428:	200009c8 	.word	0x200009c8
 800142c:	20000998 	.word	0x20000998
 8001430:	200009a8 	.word	0x200009a8

08001434 <table_camera>:

void table_camera(void) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
	uint32_t current_time = HAL_GetTick();
 800143a:	f002 fd0d 	bl	8003e58 <HAL_GetTick>
 800143e:	6078      	str	r0, [r7, #4]
	cascade_monitor(250+29);
 8001440:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 80014e0 <table_camera+0xac>
 8001444:	f000 fc92 	bl	8001d6c <cascade_monitor>
	if(cascade_complete()){
 8001448:	f000 fc86 	bl	8001d58 <cascade_complete>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d035      	beq.n	80014be <table_camera+0x8a>
		servo1.update_pos(pos1-19); //35
 8001452:	4b24      	ldr	r3, [pc, #144]	@ (80014e4 <table_camera+0xb0>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	3b13      	subs	r3, #19
 8001458:	4619      	mov	r1, r3
 800145a:	4823      	ldr	r0, [pc, #140]	@ (80014e8 <table_camera+0xb4>)
 800145c:	f7ff fe53 	bl	8001106 <_ZN10UART_servo10update_posEi>
		servo2.update_pos(pos2-19); //90
 8001460:	4b22      	ldr	r3, [pc, #136]	@ (80014ec <table_camera+0xb8>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	3b13      	subs	r3, #19
 8001466:	4619      	mov	r1, r3
 8001468:	4821      	ldr	r0, [pc, #132]	@ (80014f0 <table_camera+0xbc>)
 800146a:	f7ff fe4c 	bl	8001106 <_ZN10UART_servo10update_posEi>
		servo3.update_pos(gripper_close);
 800146e:	4b21      	ldr	r3, [pc, #132]	@ (80014f4 <table_camera+0xc0>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4619      	mov	r1, r3
 8001474:	4820      	ldr	r0, [pc, #128]	@ (80014f8 <table_camera+0xc4>)
 8001476:	f7ff fe46 	bl	8001106 <_ZN10UART_servo10update_posEi>
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 600+10*camera_down);
 800147a:	4b20      	ldr	r3, [pc, #128]	@ (80014fc <table_camera+0xc8>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	4613      	mov	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	f503 7216 	add.w	r2, r3, #600	@ 0x258
 800148a:	4b1d      	ldr	r3, [pc, #116]	@ (8001500 <table_camera+0xcc>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	635a      	str	r2, [r3, #52]	@ 0x34
		servo1.run();
 8001490:	4815      	ldr	r0, [pc, #84]	@ (80014e8 <table_camera+0xb4>)
 8001492:	f7ff fe1f 	bl	80010d4 <_ZN10UART_servo3runEv>
		servo2.run();
 8001496:	4816      	ldr	r0, [pc, #88]	@ (80014f0 <table_camera+0xbc>)
 8001498:	f7ff fe1c 	bl	80010d4 <_ZN10UART_servo3runEv>
		servo3.run();
 800149c:	4816      	ldr	r0, [pc, #88]	@ (80014f8 <table_camera+0xc4>)
 800149e:	f7ff fe19 	bl	80010d4 <_ZN10UART_servo3runEv>
		if(current_time-last_command_time>2000){
 80014a2:	4b18      	ldr	r3, [pc, #96]	@ (8001504 <table_camera+0xd0>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80014ae:	d912      	bls.n	80014d6 <table_camera+0xa2>
			all_status = 1;
 80014b0:	4b15      	ldr	r3, [pc, #84]	@ (8001508 <table_camera+0xd4>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	601a      	str	r2, [r3, #0]
			last_command_time = current_time;
 80014b6:	4a13      	ldr	r2, [pc, #76]	@ (8001504 <table_camera+0xd0>)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6013      	str	r3, [r2, #0]
		servo1.run();
		servo2.run();
		servo3.run();
		last_command_time = current_time;
	}
}
 80014bc:	e00b      	b.n	80014d6 <table_camera+0xa2>
		servo1.run();
 80014be:	480a      	ldr	r0, [pc, #40]	@ (80014e8 <table_camera+0xb4>)
 80014c0:	f7ff fe08 	bl	80010d4 <_ZN10UART_servo3runEv>
		servo2.run();
 80014c4:	480a      	ldr	r0, [pc, #40]	@ (80014f0 <table_camera+0xbc>)
 80014c6:	f7ff fe05 	bl	80010d4 <_ZN10UART_servo3runEv>
		servo3.run();
 80014ca:	480b      	ldr	r0, [pc, #44]	@ (80014f8 <table_camera+0xc4>)
 80014cc:	f7ff fe02 	bl	80010d4 <_ZN10UART_servo3runEv>
		last_command_time = current_time;
 80014d0:	4a0c      	ldr	r2, [pc, #48]	@ (8001504 <table_camera+0xd0>)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6013      	str	r3, [r2, #0]
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	438b8000 	.word	0x438b8000
 80014e4:	20000000 	.word	0x20000000
 80014e8:	20000998 	.word	0x20000998
 80014ec:	20000004 	.word	0x20000004
 80014f0:	200009a8 	.word	0x200009a8
 80014f4:	2000000c 	.word	0x2000000c
 80014f8:	200009b8 	.word	0x200009b8
 80014fc:	20000014 	.word	0x20000014
 8001500:	20005344 	.word	0x20005344
 8001504:	200009cc 	.word	0x200009cc
 8001508:	200009c8 	.word	0x200009c8

0800150c <_Z11table_arm_1v>:

void table_arm_1(void) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
	uint32_t current_time = HAL_GetTick();
 8001512:	f002 fca1 	bl	8003e58 <HAL_GetTick>
 8001516:	6078      	str	r0, [r7, #4]
	cascade_monitor(250+73);
 8001518:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 80015b8 <_Z11table_arm_1v+0xac>
 800151c:	f000 fc26 	bl	8001d6c <cascade_monitor>
	if(cascade_complete()){
 8001520:	f000 fc1a 	bl	8001d58 <cascade_complete>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d035      	beq.n	8001596 <_Z11table_arm_1v+0x8a>
		servo1.update_pos(pos1-56);
 800152a:	4b24      	ldr	r3, [pc, #144]	@ (80015bc <_Z11table_arm_1v+0xb0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	3b38      	subs	r3, #56	@ 0x38
 8001530:	4619      	mov	r1, r3
 8001532:	4823      	ldr	r0, [pc, #140]	@ (80015c0 <_Z11table_arm_1v+0xb4>)
 8001534:	f7ff fde7 	bl	8001106 <_ZN10UART_servo10update_posEi>
		servo2.update_pos(pos2-56);
 8001538:	4b22      	ldr	r3, [pc, #136]	@ (80015c4 <_Z11table_arm_1v+0xb8>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	3b38      	subs	r3, #56	@ 0x38
 800153e:	4619      	mov	r1, r3
 8001540:	4821      	ldr	r0, [pc, #132]	@ (80015c8 <_Z11table_arm_1v+0xbc>)
 8001542:	f7ff fde0 	bl	8001106 <_ZN10UART_servo10update_posEi>
		servo3.update_pos(gripper_close);
 8001546:	4b21      	ldr	r3, [pc, #132]	@ (80015cc <_Z11table_arm_1v+0xc0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4619      	mov	r1, r3
 800154c:	4820      	ldr	r0, [pc, #128]	@ (80015d0 <_Z11table_arm_1v+0xc4>)
 800154e:	f7ff fdda 	bl	8001106 <_ZN10UART_servo10update_posEi>
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 600+10*camera_front);
 8001552:	4b20      	ldr	r3, [pc, #128]	@ (80015d4 <_Z11table_arm_1v+0xc8>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	4613      	mov	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4413      	add	r3, r2
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	f503 7216 	add.w	r2, r3, #600	@ 0x258
 8001562:	4b1d      	ldr	r3, [pc, #116]	@ (80015d8 <_Z11table_arm_1v+0xcc>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	635a      	str	r2, [r3, #52]	@ 0x34
		servo1.run();
 8001568:	4815      	ldr	r0, [pc, #84]	@ (80015c0 <_Z11table_arm_1v+0xb4>)
 800156a:	f7ff fdb3 	bl	80010d4 <_ZN10UART_servo3runEv>
		servo2.run();
 800156e:	4816      	ldr	r0, [pc, #88]	@ (80015c8 <_Z11table_arm_1v+0xbc>)
 8001570:	f7ff fdb0 	bl	80010d4 <_ZN10UART_servo3runEv>
		servo3.run();
 8001574:	4816      	ldr	r0, [pc, #88]	@ (80015d0 <_Z11table_arm_1v+0xc4>)
 8001576:	f7ff fdad 	bl	80010d4 <_ZN10UART_servo3runEv>
		if(current_time-last_command_time>2000){
 800157a:	4b18      	ldr	r3, [pc, #96]	@ (80015dc <_Z11table_arm_1v+0xd0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001586:	d912      	bls.n	80015ae <_Z11table_arm_1v+0xa2>
			arm_status = 2;
 8001588:	4b15      	ldr	r3, [pc, #84]	@ (80015e0 <_Z11table_arm_1v+0xd4>)
 800158a:	2202      	movs	r2, #2
 800158c:	601a      	str	r2, [r3, #0]
			last_command_time = current_time;
 800158e:	4a13      	ldr	r2, [pc, #76]	@ (80015dc <_Z11table_arm_1v+0xd0>)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6013      	str	r3, [r2, #0]
		servo1.run();
		servo2.run();
		servo3.run();
		last_command_time = current_time;
	}
}
 8001594:	e00b      	b.n	80015ae <_Z11table_arm_1v+0xa2>
		servo1.run();
 8001596:	480a      	ldr	r0, [pc, #40]	@ (80015c0 <_Z11table_arm_1v+0xb4>)
 8001598:	f7ff fd9c 	bl	80010d4 <_ZN10UART_servo3runEv>
		servo2.run();
 800159c:	480a      	ldr	r0, [pc, #40]	@ (80015c8 <_Z11table_arm_1v+0xbc>)
 800159e:	f7ff fd99 	bl	80010d4 <_ZN10UART_servo3runEv>
		servo3.run();
 80015a2:	480b      	ldr	r0, [pc, #44]	@ (80015d0 <_Z11table_arm_1v+0xc4>)
 80015a4:	f7ff fd96 	bl	80010d4 <_ZN10UART_servo3runEv>
		last_command_time = current_time;
 80015a8:	4a0c      	ldr	r2, [pc, #48]	@ (80015dc <_Z11table_arm_1v+0xd0>)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6013      	str	r3, [r2, #0]
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	43a18000 	.word	0x43a18000
 80015bc:	20000000 	.word	0x20000000
 80015c0:	20000998 	.word	0x20000998
 80015c4:	20000004 	.word	0x20000004
 80015c8:	200009a8 	.word	0x200009a8
 80015cc:	2000000c 	.word	0x2000000c
 80015d0:	200009b8 	.word	0x200009b8
 80015d4:	20000010 	.word	0x20000010
 80015d8:	20005344 	.word	0x20005344
 80015dc:	200009cc 	.word	0x200009cc
 80015e0:	20000018 	.word	0x20000018

080015e4 <_Z11table_arm_2v>:

void table_arm_2(void) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
	uint32_t current_time = HAL_GetTick();
 80015ea:	f002 fc35 	bl	8003e58 <HAL_GetTick>
 80015ee:	6078      	str	r0, [r7, #4]
	cascade_monitor(250+73);
 80015f0:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8001650 <_Z11table_arm_2v+0x6c>
 80015f4:	f000 fbba 	bl	8001d6c <cascade_monitor>
	if(cascade_complete()){
 80015f8:	f000 fbae 	bl	8001d58 <cascade_complete>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d016      	beq.n	8001630 <_Z11table_arm_2v+0x4c>
		servo3.update_pos(gripper_open);
 8001602:	4b14      	ldr	r3, [pc, #80]	@ (8001654 <_Z11table_arm_2v+0x70>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4619      	mov	r1, r3
 8001608:	4813      	ldr	r0, [pc, #76]	@ (8001658 <_Z11table_arm_2v+0x74>)
 800160a:	f7ff fd7c 	bl	8001106 <_ZN10UART_servo10update_posEi>
		servo3.run();
 800160e:	4812      	ldr	r0, [pc, #72]	@ (8001658 <_Z11table_arm_2v+0x74>)
 8001610:	f7ff fd60 	bl	80010d4 <_ZN10UART_servo3runEv>
		if(current_time-last_command_time>2000){
 8001614:	4b11      	ldr	r3, [pc, #68]	@ (800165c <_Z11table_arm_2v+0x78>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001620:	d912      	bls.n	8001648 <_Z11table_arm_2v+0x64>
			arm_status = 3;
 8001622:	4b0f      	ldr	r3, [pc, #60]	@ (8001660 <_Z11table_arm_2v+0x7c>)
 8001624:	2203      	movs	r2, #3
 8001626:	601a      	str	r2, [r3, #0]
			last_command_time = current_time;
 8001628:	4a0c      	ldr	r2, [pc, #48]	@ (800165c <_Z11table_arm_2v+0x78>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6013      	str	r3, [r2, #0]
		servo1.run();
		servo2.run();
		servo3.run();
		last_command_time = current_time;
	}
}
 800162e:	e00b      	b.n	8001648 <_Z11table_arm_2v+0x64>
		servo1.run();
 8001630:	480c      	ldr	r0, [pc, #48]	@ (8001664 <_Z11table_arm_2v+0x80>)
 8001632:	f7ff fd4f 	bl	80010d4 <_ZN10UART_servo3runEv>
		servo2.run();
 8001636:	480c      	ldr	r0, [pc, #48]	@ (8001668 <_Z11table_arm_2v+0x84>)
 8001638:	f7ff fd4c 	bl	80010d4 <_ZN10UART_servo3runEv>
		servo3.run();
 800163c:	4806      	ldr	r0, [pc, #24]	@ (8001658 <_Z11table_arm_2v+0x74>)
 800163e:	f7ff fd49 	bl	80010d4 <_ZN10UART_servo3runEv>
		last_command_time = current_time;
 8001642:	4a06      	ldr	r2, [pc, #24]	@ (800165c <_Z11table_arm_2v+0x78>)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6013      	str	r3, [r2, #0]
}
 8001648:	bf00      	nop
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	43a18000 	.word	0x43a18000
 8001654:	20000008 	.word	0x20000008
 8001658:	200009b8 	.word	0x200009b8
 800165c:	200009cc 	.word	0x200009cc
 8001660:	20000018 	.word	0x20000018
 8001664:	20000998 	.word	0x20000998
 8001668:	200009a8 	.word	0x200009a8

0800166c <_Z11table_arm_3v>:

void table_arm_3(void) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
	uint32_t current_time = HAL_GetTick();
 8001672:	f002 fbf1 	bl	8003e58 <HAL_GetTick>
 8001676:	6078      	str	r0, [r7, #4]
	cascade_monitor(250);
 8001678:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 8001700 <_Z11table_arm_3v+0x94>
 800167c:	f000 fb76 	bl	8001d6c <cascade_monitor>
	if(cascade_complete()){
 8001680:	f000 fb6a 	bl	8001d58 <cascade_complete>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d02a      	beq.n	80016e0 <_Z11table_arm_3v+0x74>
		servo1.update_pos(pos1+70);
 800168a:	4b1e      	ldr	r3, [pc, #120]	@ (8001704 <_Z11table_arm_3v+0x98>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	3346      	adds	r3, #70	@ 0x46
 8001690:	4619      	mov	r1, r3
 8001692:	481d      	ldr	r0, [pc, #116]	@ (8001708 <_Z11table_arm_3v+0x9c>)
 8001694:	f7ff fd37 	bl	8001106 <_ZN10UART_servo10update_posEi>
		servo2.update_pos(pos2+100);
 8001698:	4b1c      	ldr	r3, [pc, #112]	@ (800170c <_Z11table_arm_3v+0xa0>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	3364      	adds	r3, #100	@ 0x64
 800169e:	4619      	mov	r1, r3
 80016a0:	481b      	ldr	r0, [pc, #108]	@ (8001710 <_Z11table_arm_3v+0xa4>)
 80016a2:	f7ff fd30 	bl	8001106 <_ZN10UART_servo10update_posEi>
		servo3.update_pos(gripper_open);
 80016a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001714 <_Z11table_arm_3v+0xa8>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4619      	mov	r1, r3
 80016ac:	481a      	ldr	r0, [pc, #104]	@ (8001718 <_Z11table_arm_3v+0xac>)
 80016ae:	f7ff fd2a 	bl	8001106 <_ZN10UART_servo10update_posEi>
		servo1.run();
 80016b2:	4815      	ldr	r0, [pc, #84]	@ (8001708 <_Z11table_arm_3v+0x9c>)
 80016b4:	f7ff fd0e 	bl	80010d4 <_ZN10UART_servo3runEv>
		servo2.run();
 80016b8:	4815      	ldr	r0, [pc, #84]	@ (8001710 <_Z11table_arm_3v+0xa4>)
 80016ba:	f7ff fd0b 	bl	80010d4 <_ZN10UART_servo3runEv>
		servo3.run();
 80016be:	4816      	ldr	r0, [pc, #88]	@ (8001718 <_Z11table_arm_3v+0xac>)
 80016c0:	f7ff fd08 	bl	80010d4 <_ZN10UART_servo3runEv>
		if(current_time-last_command_time>2000){
 80016c4:	4b15      	ldr	r3, [pc, #84]	@ (800171c <_Z11table_arm_3v+0xb0>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80016d0:	d912      	bls.n	80016f8 <_Z11table_arm_3v+0x8c>
			all_status = 1;
 80016d2:	4b13      	ldr	r3, [pc, #76]	@ (8001720 <_Z11table_arm_3v+0xb4>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	601a      	str	r2, [r3, #0]
			last_command_time = current_time;
 80016d8:	4a10      	ldr	r2, [pc, #64]	@ (800171c <_Z11table_arm_3v+0xb0>)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6013      	str	r3, [r2, #0]
		servo1.run();
		servo2.run();
		servo3.run();
		last_command_time = current_time;
	}
}
 80016de:	e00b      	b.n	80016f8 <_Z11table_arm_3v+0x8c>
		servo1.run();
 80016e0:	4809      	ldr	r0, [pc, #36]	@ (8001708 <_Z11table_arm_3v+0x9c>)
 80016e2:	f7ff fcf7 	bl	80010d4 <_ZN10UART_servo3runEv>
		servo2.run();
 80016e6:	480a      	ldr	r0, [pc, #40]	@ (8001710 <_Z11table_arm_3v+0xa4>)
 80016e8:	f7ff fcf4 	bl	80010d4 <_ZN10UART_servo3runEv>
		servo3.run();
 80016ec:	480a      	ldr	r0, [pc, #40]	@ (8001718 <_Z11table_arm_3v+0xac>)
 80016ee:	f7ff fcf1 	bl	80010d4 <_ZN10UART_servo3runEv>
		last_command_time = current_time;
 80016f2:	4a0a      	ldr	r2, [pc, #40]	@ (800171c <_Z11table_arm_3v+0xb0>)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6013      	str	r3, [r2, #0]
}
 80016f8:	bf00      	nop
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	437a0000 	.word	0x437a0000
 8001704:	20000000 	.word	0x20000000
 8001708:	20000998 	.word	0x20000998
 800170c:	20000004 	.word	0x20000004
 8001710:	200009a8 	.word	0x200009a8
 8001714:	20000008 	.word	0x20000008
 8001718:	200009b8 	.word	0x200009b8
 800171c:	200009cc 	.word	0x200009cc
 8001720:	200009c8 	.word	0x200009c8

08001724 <arm_mission>:
		servo2.run();
		servo3.run();
	}
}

void arm_mission(int code) {
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
	// 根據 code 執行不同的手臂任務
	switch(code) {
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3b01      	subs	r3, #1
 8001730:	2b03      	cmp	r3, #3
 8001732:	d83b      	bhi.n	80017ac <arm_mission+0x88>
 8001734:	a201      	add	r2, pc, #4	@ (adr r2, 800173c <arm_mission+0x18>)
 8001736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800173a:	bf00      	nop
 800173c:	0800174d 	.word	0x0800174d
 8001740:	08001759 	.word	0x08001759
 8001744:	08001777 	.word	0x08001777
 8001748:	08001783 	.word	0x08001783
		case 1:
			menu_camera();
 800174c:	f7ff fd56 	bl	80011fc <menu_camera>
			arm_status = 1;
 8001750:	4b1a      	ldr	r3, [pc, #104]	@ (80017bc <arm_mission+0x98>)
 8001752:	2201      	movs	r2, #1
 8001754:	601a      	str	r2, [r3, #0]
			break;
 8001756:	e02c      	b.n	80017b2 <arm_mission+0x8e>
		case 2:
			switch(arm_status){
 8001758:	4b18      	ldr	r3, [pc, #96]	@ (80017bc <arm_mission+0x98>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d002      	beq.n	8001766 <arm_mission+0x42>
 8001760:	2b02      	cmp	r3, #2
 8001762:	d002      	beq.n	800176a <arm_mission+0x46>
				menu_arm_1();
				case 2:
				menu_arm_2();
				arm_status = 1;
			}
			break;
 8001764:	e025      	b.n	80017b2 <arm_mission+0x8e>
				menu_arm_1();
 8001766:	f7ff fdb5 	bl	80012d4 <_Z10menu_arm_1v>
				menu_arm_2();
 800176a:	f7ff fe1f 	bl	80013ac <_Z10menu_arm_2v>
				arm_status = 1;
 800176e:	4b13      	ldr	r3, [pc, #76]	@ (80017bc <arm_mission+0x98>)
 8001770:	2201      	movs	r2, #1
 8001772:	601a      	str	r2, [r3, #0]
			break;
 8001774:	e01d      	b.n	80017b2 <arm_mission+0x8e>
		case 3:
			table_camera();
 8001776:	f7ff fe5d 	bl	8001434 <table_camera>
			arm_status = 1;
 800177a:	4b10      	ldr	r3, [pc, #64]	@ (80017bc <arm_mission+0x98>)
 800177c:	2201      	movs	r2, #1
 800177e:	601a      	str	r2, [r3, #0]
			break;
 8001780:	e017      	b.n	80017b2 <arm_mission+0x8e>
		case 4:
			switch(arm_status){
 8001782:	4b0e      	ldr	r3, [pc, #56]	@ (80017bc <arm_mission+0x98>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2b03      	cmp	r3, #3
 8001788:	d00a      	beq.n	80017a0 <arm_mission+0x7c>
 800178a:	2b03      	cmp	r3, #3
 800178c:	dc10      	bgt.n	80017b0 <arm_mission+0x8c>
 800178e:	2b01      	cmp	r3, #1
 8001790:	d002      	beq.n	8001798 <arm_mission+0x74>
 8001792:	2b02      	cmp	r3, #2
 8001794:	d002      	beq.n	800179c <arm_mission+0x78>
				table_arm_2();
				case 3:
				table_arm_3();
				arm_status = 1;
			}
			break;
 8001796:	e00b      	b.n	80017b0 <arm_mission+0x8c>
				table_arm_1();
 8001798:	f7ff feb8 	bl	800150c <_Z11table_arm_1v>
				table_arm_2();
 800179c:	f7ff ff22 	bl	80015e4 <_Z11table_arm_2v>
				table_arm_3();
 80017a0:	f7ff ff64 	bl	800166c <_Z11table_arm_3v>
				arm_status = 1;
 80017a4:	4b05      	ldr	r3, [pc, #20]	@ (80017bc <arm_mission+0x98>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	601a      	str	r2, [r3, #0]
			break;
 80017aa:	e001      	b.n	80017b0 <arm_mission+0x8c>
		default:
			// 預設情況
			break;
 80017ac:	bf00      	nop
 80017ae:	e000      	b.n	80017b2 <arm_mission+0x8e>
			break;
 80017b0:	bf00      	nop
	}
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000018 	.word	0x20000018

080017c0 <arm_complete>:

bool arm_complete(){
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
	if(all_status)
 80017c4:	4b07      	ldr	r3, [pc, #28]	@ (80017e4 <arm_complete+0x24>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d004      	beq.n	80017d6 <arm_complete+0x16>
	{
		all_status=0;
 80017cc:	4b05      	ldr	r3, [pc, #20]	@ (80017e4 <arm_complete+0x24>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
		return 1;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e000      	b.n	80017d8 <arm_complete+0x18>
	}
	else
	{
		return 0;
 80017d6:	2300      	movs	r3, #0
	}
}
 80017d8:	4618      	mov	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	200009c8 	.word	0x200009c8

080017e8 <_Z41__static_initialization_and_destruction_0v>:
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
UART_servo servo1(1, 2000, &huart3);
 80017ec:	4b0b      	ldr	r3, [pc, #44]	@ (800181c <_Z41__static_initialization_and_destruction_0v+0x34>)
 80017ee:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80017f2:	2101      	movs	r1, #1
 80017f4:	480a      	ldr	r0, [pc, #40]	@ (8001820 <_Z41__static_initialization_and_destruction_0v+0x38>)
 80017f6:	f7ff fc94 	bl	8001122 <_ZN10UART_servoC1EttP20__UART_HandleTypeDef>
UART_servo servo2(3, 2000, &huart3);
 80017fa:	4b08      	ldr	r3, [pc, #32]	@ (800181c <_Z41__static_initialization_and_destruction_0v+0x34>)
 80017fc:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001800:	2103      	movs	r1, #3
 8001802:	4808      	ldr	r0, [pc, #32]	@ (8001824 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 8001804:	f7ff fc8d 	bl	8001122 <_ZN10UART_servoC1EttP20__UART_HandleTypeDef>
UART_servo servo3(4, 2000, &huart3);
 8001808:	4b04      	ldr	r3, [pc, #16]	@ (800181c <_Z41__static_initialization_and_destruction_0v+0x34>)
 800180a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800180e:	2104      	movs	r1, #4
 8001810:	4805      	ldr	r0, [pc, #20]	@ (8001828 <_Z41__static_initialization_and_destruction_0v+0x40>)
 8001812:	f7ff fc86 	bl	8001122 <_ZN10UART_servoC1EttP20__UART_HandleTypeDef>
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	2000541c 	.word	0x2000541c
 8001820:	20000998 	.word	0x20000998
 8001824:	200009a8 	.word	0x200009a8
 8001828:	200009b8 	.word	0x200009b8

0800182c <_GLOBAL__sub_I_servo1>:
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
 8001830:	f7ff ffda 	bl	80017e8 <_Z41__static_initialization_and_destruction_0v>
 8001834:	bd80      	pop	{r7, pc}

08001836 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	ed87 0a01 	vstr	s0, [r7, #4]
 8001840:	edd7 7a01 	vldr	s15, [r7, #4]
 8001844:	eef0 7ae7 	vabs.f32	s15, s15
 8001848:	eeb0 0a67 	vmov.f32	s0, s15
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
	...

08001858 <_ZN15MotorController7setgoalEf>:
//    __HAL_TIM_SET_COUNTER(_enc, 0);
////    _currentSpeed *= _en_ctrl;
//    return _currentSpeed;
//}

void MotorController::setgoal(float target_height) {
 8001858:	b5b0      	push	{r4, r5, r7, lr}
 800185a:	ed2d 8b02 	vpush	{d8}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	ed87 0a00 	vstr	s0, [r7]
	_targrt_height  = target_height;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	62da      	str	r2, [r3, #44]	@ 0x2c
	//如果碰到微動 設為起始高度 停止馬達
	if(_cascade_height==250 && target_height < 250 && _check ==1){
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001874:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 8001b10 <_ZN15MotorController7setgoalEf+0x2b8>
 8001878:	eef4 7a47 	vcmp.f32	s15, s14
 800187c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001880:	d10f      	bne.n	80018a2 <_ZN15MotorController7setgoalEf+0x4a>
 8001882:	edd7 7a00 	vldr	s15, [r7]
 8001886:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8001b10 <_ZN15MotorController7setgoalEf+0x2b8>
 800188a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800188e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001892:	d506      	bpl.n	80018a2 <_ZN15MotorController7setgoalEf+0x4a>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001898:	2b01      	cmp	r3, #1
 800189a:	d102      	bne.n	80018a2 <_ZN15MotorController7setgoalEf+0x4a>
		_pwmValue = 0;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	851a      	strh	r2, [r3, #40]	@ 0x28
	}
	if(_microswitch_touched==1 && _check ==0){
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d112      	bne.n	80018d0 <_ZN15MotorController7setgoalEf+0x78>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10e      	bne.n	80018d0 <_ZN15MotorController7setgoalEf+0x78>
		_cascade_height = CASCADE_STARTHIGHT;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	645a      	str	r2, [r3, #68]	@ 0x44
		target_height = CASCADE_STARTHIGHT;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018be:	603b      	str	r3, [r7, #0]

		_pwmValue = 0; // 停止馬達
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	851a      	strh	r2, [r3, #40]	@ 0x28
		_check++;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018ca:	1c5a      	adds	r2, r3, #1
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	if(_microswitch_touched==0 && _check ==1) _check--;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d108      	bne.n	80018ea <_ZN15MotorController7setgoalEf+0x92>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d104      	bne.n	80018ea <_ZN15MotorController7setgoalEf+0x92>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018e4:	1e5a      	subs	r2, r3, #1
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	649a      	str	r2, [r3, #72]	@ 0x48

	// 讀取 encoder

	_enc_count = __HAL_TIM_GetCounter(_enc);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f2:	b21a      	sxth	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
	_enc_count = -_enc_count;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	@ 0x54
 8001900:	b29b      	uxth	r3, r3
 8001902:	425b      	negs	r3, r3
 8001904:	b29b      	uxth	r3, r3
 8001906:	b21a      	sxth	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
	__HAL_TIM_SET_COUNTER(_enc, 0);  // 歸零
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2200      	movs	r2, #0
 8001916:	625a      	str	r2, [r3, #36]	@ 0x24

	// 計算累積距離
	_cascade_height += (float)_enc_count / (4.0f * 100.0 * 64.0)* 3.14 * 35;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800191c:	4618      	mov	r0, r3
 800191e:	f7fe fe43 	bl	80005a8 <__aeabi_f2d>
 8001922:	4604      	mov	r4, r0
 8001924:	460d      	mov	r5, r1
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	@ 0x54
 800192c:	ee07 3a90 	vmov	s15, r3
 8001930:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001934:	ee17 0a90 	vmov	r0, s15
 8001938:	f7fe fe36 	bl	80005a8 <__aeabi_f2d>
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	4b74      	ldr	r3, [pc, #464]	@ (8001b14 <_ZN15MotorController7setgoalEf+0x2bc>)
 8001942:	f7fe ffb3 	bl	80008ac <__aeabi_ddiv>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	4610      	mov	r0, r2
 800194c:	4619      	mov	r1, r3
 800194e:	a36e      	add	r3, pc, #440	@ (adr r3, 8001b08 <_ZN15MotorController7setgoalEf+0x2b0>)
 8001950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001954:	f7fe fe80 	bl	8000658 <__aeabi_dmul>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	4610      	mov	r0, r2
 800195e:	4619      	mov	r1, r3
 8001960:	f04f 0200 	mov.w	r2, #0
 8001964:	4b6c      	ldr	r3, [pc, #432]	@ (8001b18 <_ZN15MotorController7setgoalEf+0x2c0>)
 8001966:	f7fe fe77 	bl	8000658 <__aeabi_dmul>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	4620      	mov	r0, r4
 8001970:	4629      	mov	r1, r5
 8001972:	f7fe fcbb 	bl	80002ec <__adddf3>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	4610      	mov	r0, r2
 800197c:	4619      	mov	r1, r3
 800197e:	f7ff f905 	bl	8000b8c <__aeabi_d2f>
 8001982:	4602      	mov	r2, r0
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	645a      	str	r2, [r3, #68]	@ 0x44

	// 判斷是否到點
	_error = target_height - _cascade_height;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800198e:	ed97 7a00 	vldr	s14, [r7]
 8001992:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	if(fabs(_error) <= 1) {
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80019a2:	eeb0 0a67 	vmov.f32	s0, s15
 80019a6:	f7ff ff46 	bl	8001836 <_ZSt4fabsf>
 80019aa:	eef0 7a40 	vmov.f32	s15, s0
 80019ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80019b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ba:	bf94      	ite	ls
 80019bc:	2301      	movls	r3, #1
 80019be:	2300      	movhi	r3, #0
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d002      	beq.n	80019cc <_ZN15MotorController7setgoalEf+0x174>
		_pwmValue = 0; // 到點停
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	851a      	strh	r2, [r3, #40]	@ 0x28
	}
	float bound = 0.0;
 80019cc:	f04f 0300 	mov.w	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
	if(_ki != 0.0) bound = 1.0 / _ki;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	edd3 7a08 	vldr	s15, [r3, #32]
 80019d8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80019dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e0:	d008      	beq.n	80019f4 <_ZN15MotorController7setgoalEf+0x19c>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	ed93 7a08 	vldr	s14, [r3, #32]
 80019e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80019ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019f0:	edc7 7a03 	vstr	s15, [r7, #12]
	_integral += _error * _dt / 1000.0;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7fe fdd5 	bl	80005a8 <__aeabi_f2d>
 80019fe:	4604      	mov	r4, r0
 8001a00:	460d      	mov	r5, r1
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a12:	ee17 0a90 	vmov	r0, s15
 8001a16:	f7fe fdc7 	bl	80005a8 <__aeabi_f2d>
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b1c <_ZN15MotorController7setgoalEf+0x2c4>)
 8001a20:	f7fe ff44 	bl	80008ac <__aeabi_ddiv>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4620      	mov	r0, r4
 8001a2a:	4629      	mov	r1, r5
 8001a2c:	f7fe fc5e 	bl	80002ec <__adddf3>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4610      	mov	r0, r2
 8001a36:	4619      	mov	r1, r3
 8001a38:	f7ff f8a8 	bl	8000b8c <__aeabi_d2f>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	635a      	str	r2, [r3, #52]	@ 0x34
	if(_integral > bound) _integral = bound;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001a48:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a54:	d503      	bpl.n	8001a5e <_ZN15MotorController7setgoalEf+0x206>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a5c:	e012      	b.n	8001a84 <_ZN15MotorController7setgoalEf+0x22c>
	else if(_integral < -bound) _integral = -bound;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001a64:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a68:	eef1 7a67 	vneg.f32	s15, s15
 8001a6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a74:	d506      	bpl.n	8001a84 <_ZN15MotorController7setgoalEf+0x22c>
 8001a76:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a7a:	eef1 7a67 	vneg.f32	s15, s15
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

	_u = _kp * _error + _ki * _integral;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	ed93 7a07 	vldr	s14, [r3, #28]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001a90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	edd3 6a08 	vldr	s13, [r3, #32]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001aa0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
	if(_u > 1) _u = 1;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8001ab4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001ab8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac0:	dd04      	ble.n	8001acc <_ZN15MotorController7setgoalEf+0x274>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001ac8:	659a      	str	r2, [r3, #88]	@ 0x58
 8001aca:	e00c      	b.n	8001ae6 <_ZN15MotorController7setgoalEf+0x28e>
	else if(_u < -1 ) _u = -1;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8001ad2:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001ad6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ade:	d502      	bpl.n	8001ae6 <_ZN15MotorController7setgoalEf+0x28e>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4a0f      	ldr	r2, [pc, #60]	@ (8001b20 <_ZN15MotorController7setgoalEf+0x2c8>)
 8001ae4:	659a      	str	r2, [r3, #88]	@ 0x58

	if(_u<0){ //TEST馬達正反轉
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8001aec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af4:	d516      	bpl.n	8001b24 <_ZN15MotorController7setgoalEf+0x2cc>
//		HAL_GPIO_WritePin(_AGPIO, _APin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(_BGPIO, _BPin, GPIO_PIN_SET);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6958      	ldr	r0, [r3, #20]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	8b1b      	ldrh	r3, [r3, #24]
 8001afe:	2201      	movs	r2, #1
 8001b00:	4619      	mov	r1, r3
 8001b02:	f003 f82d 	bl	8004b60 <HAL_GPIO_WritePin>
 8001b06:	e015      	b.n	8001b34 <_ZN15MotorController7setgoalEf+0x2dc>
 8001b08:	51eb851f 	.word	0x51eb851f
 8001b0c:	40091eb8 	.word	0x40091eb8
 8001b10:	437a0000 	.word	0x437a0000
 8001b14:	40d90000 	.word	0x40d90000
 8001b18:	40418000 	.word	0x40418000
 8001b1c:	408f4000 	.word	0x408f4000
 8001b20:	bf800000 	.word	0xbf800000
	}
	else{
//		HAL_GPIO_WritePin(_AGPIO, _APin, GPIO_PIN_SET);//_AGPIO	_APin
		HAL_GPIO_WritePin(_BGPIO, _BPin, GPIO_PIN_RESET);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6958      	ldr	r0, [r3, #20]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	8b1b      	ldrh	r3, [r3, #24]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	4619      	mov	r1, r3
 8001b30:	f003 f816 	bl	8004b60 <HAL_GPIO_WritePin>
	}

	// PWM 越接近越慢
	_pwmValue = (int)(MAX_PWM * fabs(_u));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b38:	ee07 3a90 	vmov	s15, r3
 8001b3c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8001b46:	eeb0 0a67 	vmov.f32	s0, s15
 8001b4a:	f7ff fe74 	bl	8001836 <_ZSt4fabsf>
 8001b4e:	eef0 7a40 	vmov.f32	s15, s0
 8001b52:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001b56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b5a:	ee17 3a90 	vmov	r3, s15
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	851a      	strh	r2, [r3, #40]	@ 0x28
	if(_pwmValue > 500) _pwmValue = 500;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b68:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001b6c:	d903      	bls.n	8001b76 <_ZN15MotorController7setgoalEf+0x31e>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001b74:	851a      	strh	r2, [r3, #40]	@ 0x28
	if(_pwmValue < MIN_PWM) _pwmValue = MIN_PWM;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b80:	429a      	cmp	r2, r3
 8001b82:	da04      	bge.n	8001b8e <_ZN15MotorController7setgoalEf+0x336>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	851a      	strh	r2, [r3, #40]	@ 0x28
//	__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, (uint16_t)_pwmValue);
	__HAL_TIM_SET_COMPARE(_pwm, _channel, (uint16_t)_pwmValue);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d106      	bne.n	8001ba4 <_ZN15MotorController7setgoalEf+0x34c>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8001ba2:	e01b      	b.n	8001bdc <_ZN15MotorController7setgoalEf+0x384>
	__HAL_TIM_SET_COMPARE(_pwm, _channel, (uint16_t)_pwmValue);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	2b04      	cmp	r3, #4
 8001baa:	d106      	bne.n	8001bba <_ZN15MotorController7setgoalEf+0x362>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001bb8:	e010      	b.n	8001bdc <_ZN15MotorController7setgoalEf+0x384>
	__HAL_TIM_SET_COMPARE(_pwm, _channel, (uint16_t)_pwmValue);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2b08      	cmp	r3, #8
 8001bc0:	d106      	bne.n	8001bd0 <_ZN15MotorController7setgoalEf+0x378>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001bce:	e005      	b.n	8001bdc <_ZN15MotorController7setgoalEf+0x384>
	__HAL_TIM_SET_COMPARE(_pwm, _channel, (uint16_t)_pwmValue);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001bdc:	bf00      	nop
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	ecbd 8b02 	vpop	{d8}
 8001be6:	bdb0      	pop	{r4, r5, r7, pc}

08001be8 <_ZN15MotorController12goal_reachedEv>:

bool MotorController::goal_reached(){
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
	if(fabs(_cascade_height-_targrt_height )<=1){
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001bfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c00:	eeb0 0a67 	vmov.f32	s0, s15
 8001c04:	f7ff fe17 	bl	8001836 <_ZSt4fabsf>
 8001c08:	eef0 7a40 	vmov.f32	s15, s0
 8001c0c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001c10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c18:	bf94      	ite	ls
 8001c1a:	2301      	movls	r3, #1
 8001c1c:	2300      	movhi	r3, #0
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d024      	beq.n	8001c6e <_ZN15MotorController12goal_reachedEv+0x86>
		__HAL_TIM_SET_COMPARE(_pwm, _channel,0);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d105      	bne.n	8001c38 <_ZN15MotorController12goal_reachedEv+0x50>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2200      	movs	r2, #0
 8001c34:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c36:	e018      	b.n	8001c6a <_ZN15MotorController12goal_reachedEv+0x82>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	2b04      	cmp	r3, #4
 8001c3e:	d105      	bne.n	8001c4c <_ZN15MotorController12goal_reachedEv+0x64>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2200      	movs	r2, #0
 8001c48:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c4a:	e00e      	b.n	8001c6a <_ZN15MotorController12goal_reachedEv+0x82>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d105      	bne.n	8001c60 <_ZN15MotorController12goal_reachedEv+0x78>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c5e:	e004      	b.n	8001c6a <_ZN15MotorController12goal_reachedEv+0x82>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2200      	movs	r2, #0
 8001c68:	641a      	str	r2, [r3, #64]	@ 0x40
		return 1;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <_ZN15MotorController12goal_reachedEv+0x88>
	}
	return 0;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftS3_tddd>:
#include "math.h"
#include "motor_config.h"

class MotorController{
public:
    MotorController(TIM_HandleTypeDef* enc, TIM_HandleTypeDef* pwm, uint32_t channel, GPIO_TypeDef* AGPIO, uint16_t APin, GPIO_TypeDef* BGPIO, uint16_t BPin, double kp, double ki, double kd):
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08a      	sub	sp, #40	@ 0x28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6278      	str	r0, [r7, #36]	@ 0x24
 8001c80:	6239      	str	r1, [r7, #32]
 8001c82:	61fa      	str	r2, [r7, #28]
 8001c84:	61bb      	str	r3, [r7, #24]
 8001c86:	ed87 0b04 	vstr	d0, [r7, #16]
 8001c8a:	ed87 1b02 	vstr	d1, [r7, #8]
 8001c8e:	ed87 2b00 	vstr	d2, [r7]
        _enc(enc), _pwm(pwm), _channel(channel), _AGPIO(AGPIO), _APin(APin), _BGPIO(BGPIO), _BPin(BPin), _kp(kp), _ki(ki), _kd(kd){}
 8001c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c94:	6a3a      	ldr	r2, [r7, #32]
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9a:	69fa      	ldr	r2, [r7, #28]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cac:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001cae:	821a      	strh	r2, [r3, #16]
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001cb4:	615a      	str	r2, [r3, #20]
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb8:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8001cba:	831a      	strh	r2, [r3, #24]
 8001cbc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cc0:	f7fe ff64 	bl	8000b8c <__aeabi_d2f>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc8:	61da      	str	r2, [r3, #28]
 8001cca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cce:	f7fe ff5d 	bl	8000b8c <__aeabi_d2f>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd6:	621a      	str	r2, [r3, #32]
 8001cd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cdc:	f7fe ff56 	bl	8000b8c <__aeabi_d2f>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce4:	625a      	str	r2, [r3, #36]	@ 0x24
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce8:	2200      	movs	r2, #0
 8001cea:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cee:	f04f 0200 	mov.w	r2, #0
 8001cf2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	631a      	str	r2, [r3, #48]	@ 0x30
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfe:	f04f 0200 	mov.w	r2, #0
 8001d02:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d06:	4a12      	ldr	r2, [pc, #72]	@ (8001d50 <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftS3_tddd+0xd8>)
 8001d08:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d12:	2200      	movs	r2, #0
 8001d14:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d18:	4a0e      	ldr	r2, [pc, #56]	@ (8001d54 <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftS3_tddd+0xdc>)
 8001d1a:	645a      	str	r2, [r3, #68]	@ 0x44
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1e:	2200      	movs	r2, #0
 8001d20:	649a      	str	r2, [r3, #72]	@ 0x48
 8001d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d24:	2200      	movs	r2, #0
 8001d26:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d54 <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftS3_tddd+0xdc>)
 8001d2c:	651a      	str	r2, [r3, #80]	@ 0x50
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d38:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d3c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d40:	22c8      	movs	r2, #200	@ 0xc8
 8001d42:	661a      	str	r2, [r3, #96]	@ 0x60
 8001d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d46:	4618      	mov	r0, r3
 8001d48:	3728      	adds	r7, #40	@ 0x28
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	42c80000 	.word	0x42c80000
 8001d54:	437a0000 	.word	0x437a0000

08001d58 <cascade_complete>:
//    Motor_BL.getSpeed();
//    Motor_FR.getSpeed();
//    Motor_FL.getSpeed();
}

bool cascade_complete(){
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
	return Motor_cas.goal_reached();
 8001d5c:	4802      	ldr	r0, [pc, #8]	@ (8001d68 <cascade_complete+0x10>)
 8001d5e:	f7ff ff43 	bl	8001be8 <_ZN15MotorController12goal_reachedEv>
 8001d62:	4603      	mov	r3, r0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	200009d0 	.word	0x200009d0

08001d6c <cascade_monitor>:

void cascade_monitor(float target_height){
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	ed87 0a01 	vstr	s0, [r7, #4]
	Motor_cas.setgoal(target_height);
 8001d76:	ed97 0a01 	vldr	s0, [r7, #4]
 8001d7a:	4803      	ldr	r0, [pc, #12]	@ (8001d88 <cascade_monitor+0x1c>)
 8001d7c:	f7ff fd6c 	bl	8001858 <_ZN15MotorController7setgoalEf>
}
 8001d80:	bf00      	nop
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	200009d0 	.word	0x200009d0
 8001d8c:	00000000 	.word	0x00000000

08001d90 <_Z41__static_initialization_and_destruction_0v>:
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af04      	add	r7, sp, #16
MotorController Motor_cas(&htim1, &htim12, TIM_CHANNEL_2, GPIOB, GPIO_PIN_13, GPIOB, GPIO_PIN_12, 0.015, 0.0001, 0);
 8001d96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d9a:	9303      	str	r3, [sp, #12]
 8001d9c:	4b10      	ldr	r3, [pc, #64]	@ (8001de0 <_Z41__static_initialization_and_destruction_0v+0x50>)
 8001d9e:	9302      	str	r3, [sp, #8]
 8001da0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001da4:	9301      	str	r3, [sp, #4]
 8001da6:	4b0e      	ldr	r3, [pc, #56]	@ (8001de0 <_Z41__static_initialization_and_destruction_0v+0x50>)
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	ed9f 2b07 	vldr	d2, [pc, #28]	@ 8001dc8 <_Z41__static_initialization_and_destruction_0v+0x38>
 8001dae:	ed9f 1b08 	vldr	d1, [pc, #32]	@ 8001dd0 <_Z41__static_initialization_and_destruction_0v+0x40>
 8001db2:	ed9f 0b09 	vldr	d0, [pc, #36]	@ 8001dd8 <_Z41__static_initialization_and_destruction_0v+0x48>
 8001db6:	2304      	movs	r3, #4
 8001db8:	4a0a      	ldr	r2, [pc, #40]	@ (8001de4 <_Z41__static_initialization_and_destruction_0v+0x54>)
 8001dba:	490b      	ldr	r1, [pc, #44]	@ (8001de8 <_Z41__static_initialization_and_destruction_0v+0x58>)
 8001dbc:	480b      	ldr	r0, [pc, #44]	@ (8001dec <_Z41__static_initialization_and_destruction_0v+0x5c>)
 8001dbe:	f7ff ff5b 	bl	8001c78 <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftS3_tddd>
}
 8001dc2:	bf00      	nop
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
	...
 8001dd0:	eb1c432d 	.word	0xeb1c432d
 8001dd4:	3f1a36e2 	.word	0x3f1a36e2
 8001dd8:	eb851eb8 	.word	0xeb851eb8
 8001ddc:	3f8eb851 	.word	0x3f8eb851
 8001de0:	40020400 	.word	0x40020400
 8001de4:	2000538c 	.word	0x2000538c
 8001de8:	200052b4 	.word	0x200052b4
 8001dec:	200009d0 	.word	0x200009d0

08001df0 <_GLOBAL__sub_I_Motor_cas>:
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	f7ff ffcc 	bl	8001d90 <_Z41__static_initialization_and_destruction_0v>
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <uros_init>:
#define MAX_PING_FAIL_COUNT 5


extern UART_HandleTypeDef USARTx;

void uros_init(void) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b088      	sub	sp, #32
 8001e00:	af02      	add	r7, sp, #8
  // Initialize micro-ROS
  rmw_uros_set_custom_transport(
 8001e02:	4b14      	ldr	r3, [pc, #80]	@ (8001e54 <uros_init+0x58>)
 8001e04:	9301      	str	r3, [sp, #4]
 8001e06:	4b14      	ldr	r3, [pc, #80]	@ (8001e58 <uros_init+0x5c>)
 8001e08:	9300      	str	r3, [sp, #0]
 8001e0a:	4b14      	ldr	r3, [pc, #80]	@ (8001e5c <uros_init+0x60>)
 8001e0c:	4a14      	ldr	r2, [pc, #80]	@ (8001e60 <uros_init+0x64>)
 8001e0e:	4915      	ldr	r1, [pc, #84]	@ (8001e64 <uros_init+0x68>)
 8001e10:	2001      	movs	r0, #1
 8001e12:	f00d fa5f 	bl	800f2d4 <rmw_uros_set_custom_transport>
    cubemx_transport_open,
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);
  
  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001e16:	1d3b      	adds	r3, r7, #4
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f00c fe73 	bl	800eb04 <rcutils_get_zero_initialized_allocator>

  freeRTOS_allocator.allocate = microros_allocate;
 8001e1e:	4b12      	ldr	r3, [pc, #72]	@ (8001e68 <uros_init+0x6c>)
 8001e20:	607b      	str	r3, [r7, #4]
  freeRTOS_allocator.deallocate = microros_deallocate;
 8001e22:	4b12      	ldr	r3, [pc, #72]	@ (8001e6c <uros_init+0x70>)
 8001e24:	60bb      	str	r3, [r7, #8]
  freeRTOS_allocator.reallocate = microros_reallocate;
 8001e26:	4b12      	ldr	r3, [pc, #72]	@ (8001e70 <uros_init+0x74>)
 8001e28:	60fb      	str	r3, [r7, #12]
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001e2a:	4b12      	ldr	r3, [pc, #72]	@ (8001e74 <uros_init+0x78>)
 8001e2c:	613b      	str	r3, [r7, #16]

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001e2e:	1d3b      	adds	r3, r7, #4
 8001e30:	4618      	mov	r0, r3
 8001e32:	f00c fe75 	bl	800eb20 <rcutils_set_default_allocator>
 8001e36:	4603      	mov	r3, r0
 8001e38:	f083 0301 	eor.w	r3, r3, #1
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <uros_init+0x4e>
  printf("Error on default allocators (line %d)\n", __LINE__); 
 8001e42:	213f      	movs	r1, #63	@ 0x3f
 8001e44:	480c      	ldr	r0, [pc, #48]	@ (8001e78 <uros_init+0x7c>)
 8001e46:	f018 f86f 	bl	8019f28 <iprintf>
  }
}
 8001e4a:	bf00      	nop
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	08002b05 	.word	0x08002b05
 8001e58:	08002a9d 	.word	0x08002a9d
 8001e5c:	08002a7d 	.word	0x08002a7d
 8001e60:	08002a51 	.word	0x08002a51
 8001e64:	200053d4 	.word	0x200053d4
 8001e68:	080031e1 	.word	0x080031e1
 8001e6c:	08003225 	.word	0x08003225
 8001e70:	0800325d 	.word	0x0800325d
 8001e74:	080032c9 	.word	0x080032c9
 8001e78:	0801b060 	.word	0x0801b060

08001e7c <uros_agent_status_check>:

void uros_agent_status_check(void) {
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  switch (status) {
 8001e80:	4b11      	ldr	r3, [pc, #68]	@ (8001ec8 <uros_agent_status_check+0x4c>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b04      	cmp	r3, #4
 8001e86:	d81c      	bhi.n	8001ec2 <uros_agent_status_check+0x46>
 8001e88:	a201      	add	r2, pc, #4	@ (adr r2, 8001e90 <uros_agent_status_check+0x14>)
 8001e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e8e:	bf00      	nop
 8001e90:	08001ea5 	.word	0x08001ea5
 8001e94:	08001eab 	.word	0x08001eab
 8001e98:	08001eb1 	.word	0x08001eb1
 8001e9c:	08001eb7 	.word	0x08001eb7
 8001ea0:	08001ebd 	.word	0x08001ebd
    case AGENT_WAITING:
      handle_state_agent_waiting();
 8001ea4:	f000 f812 	bl	8001ecc <handle_state_agent_waiting>
      break;
 8001ea8:	e00c      	b.n	8001ec4 <uros_agent_status_check+0x48>
    case AGENT_AVAILABLE:
      handle_state_agent_available();
 8001eaa:	f000 f821 	bl	8001ef0 <handle_state_agent_available>
      break;
 8001eae:	e009      	b.n	8001ec4 <uros_agent_status_check+0x48>
    case AGENT_CONNECTED:
      handle_state_agent_connected();
 8001eb0:	f000 f82a 	bl	8001f08 <handle_state_agent_connected>
      break;
 8001eb4:	e006      	b.n	8001ec4 <uros_agent_status_check+0x48>
    case AGENT_TRYING:
      handle_state_agent_trying();
 8001eb6:	f000 f859 	bl	8001f6c <handle_state_agent_trying>
      break;
 8001eba:	e003      	b.n	8001ec4 <uros_agent_status_check+0x48>
    case AGENT_DISCONNECTED:
      handle_state_agent_disconnected();
 8001ebc:	f000 f880 	bl	8001fc0 <handle_state_agent_disconnected>
      break;
 8001ec0:	e000      	b.n	8001ec4 <uros_agent_status_check+0x48>
    default:
      break;
 8001ec2:	bf00      	nop
  }
}
 8001ec4:	bf00      	nop
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20000e38 	.word	0x20000e38

08001ecc <handle_state_agent_waiting>:

void handle_state_agent_waiting(void) {
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  status = (rmw_uros_ping_agent(100, 10) == RMW_RET_OK) ? AGENT_AVAILABLE : AGENT_WAITING;
 8001ed0:	210a      	movs	r1, #10
 8001ed2:	2064      	movs	r0, #100	@ 0x64
 8001ed4:	f00d fa14 	bl	800f300 <rmw_uros_ping_agent>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <handle_state_agent_waiting+0x16>
 8001ede:	2201      	movs	r2, #1
 8001ee0:	e000      	b.n	8001ee4 <handle_state_agent_waiting+0x18>
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	4b01      	ldr	r3, [pc, #4]	@ (8001eec <handle_state_agent_waiting+0x20>)
 8001ee6:	701a      	strb	r2, [r3, #0]
}
 8001ee8:	bf00      	nop
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20000e38 	.word	0x20000e38

08001ef0 <handle_state_agent_available>:
void handle_state_agent_available(void) {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  uros_create_entities();
 8001ef4:	f000 f870 	bl	8001fd8 <uros_create_entities>
  status = AGENT_CONNECTED;
 8001ef8:	4b02      	ldr	r3, [pc, #8]	@ (8001f04 <handle_state_agent_available+0x14>)
 8001efa:	2202      	movs	r2, #2
 8001efc:	701a      	strb	r2, [r3, #0]
}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000e38 	.word	0x20000e38

08001f08 <handle_state_agent_connected>:
void handle_state_agent_connected(void) {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  if(rmw_uros_ping_agent(20, 5) == RMW_RET_OK){
 8001f0c:	2105      	movs	r1, #5
 8001f0e:	2014      	movs	r0, #20
 8001f10:	f00d f9f6 	bl	800f300 <rmw_uros_ping_agent>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	bf0c      	ite	eq
 8001f1a:	2301      	moveq	r3, #1
 8001f1c:	2300      	movne	r3, #0
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d009      	beq.n	8001f38 <handle_state_agent_connected+0x30>
    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(50));
 8001f24:	a30f      	add	r3, pc, #60	@ (adr r3, 8001f64 <handle_state_agent_connected+0x5c>)
 8001f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2a:	480b      	ldr	r0, [pc, #44]	@ (8001f58 <handle_state_agent_connected+0x50>)
 8001f2c:	f00c fc76 	bl	800e81c <rclc_executor_spin_some>
    ping_fail_count = 0; // Reset ping fail count
 8001f30:	4b0a      	ldr	r3, [pc, #40]	@ (8001f5c <handle_state_agent_connected+0x54>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
    ping_fail_count++;
    if(ping_fail_count >= MAX_PING_FAIL_COUNT){
      status = AGENT_TRYING;
    }
  }
}
 8001f36:	e00b      	b.n	8001f50 <handle_state_agent_connected+0x48>
    ping_fail_count++;
 8001f38:	4b08      	ldr	r3, [pc, #32]	@ (8001f5c <handle_state_agent_connected+0x54>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	4a07      	ldr	r2, [pc, #28]	@ (8001f5c <handle_state_agent_connected+0x54>)
 8001f40:	6013      	str	r3, [r2, #0]
    if(ping_fail_count >= MAX_PING_FAIL_COUNT){
 8001f42:	4b06      	ldr	r3, [pc, #24]	@ (8001f5c <handle_state_agent_connected+0x54>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	dd02      	ble.n	8001f50 <handle_state_agent_connected+0x48>
      status = AGENT_TRYING;
 8001f4a:	4b05      	ldr	r3, [pc, #20]	@ (8001f60 <handle_state_agent_connected+0x58>)
 8001f4c:	2203      	movs	r2, #3
 8001f4e:	701a      	strb	r2, [r3, #0]
}
 8001f50:	bf00      	nop
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	f3af 8000 	nop.w
 8001f58:	20000db0 	.word	0x20000db0
 8001f5c:	20000e3c 	.word	0x20000e3c
 8001f60:	20000e38 	.word	0x20000e38
 8001f64:	02faf080 	.word	0x02faf080
 8001f68:	00000000 	.word	0x00000000

08001f6c <handle_state_agent_trying>:
void handle_state_agent_trying(void) {
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  if(rmw_uros_ping_agent(50, 10) == RMW_RET_OK){
 8001f70:	210a      	movs	r1, #10
 8001f72:	2032      	movs	r0, #50	@ 0x32
 8001f74:	f00d f9c4 	bl	800f300 <rmw_uros_ping_agent>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	bf0c      	ite	eq
 8001f7e:	2301      	moveq	r3, #1
 8001f80:	2300      	movne	r3, #0
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d006      	beq.n	8001f96 <handle_state_agent_trying+0x2a>
    status = AGENT_CONNECTED;
 8001f88:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb8 <handle_state_agent_trying+0x4c>)
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	701a      	strb	r2, [r3, #0]
    ping_fail_count = 0; // Reset ping fail count
 8001f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001fbc <handle_state_agent_trying+0x50>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
    if(ping_fail_count >= MAX_PING_FAIL_COUNT){
      status = AGENT_DISCONNECTED;
      ping_fail_count = 0;
    }
  }
}
 8001f94:	e00e      	b.n	8001fb4 <handle_state_agent_trying+0x48>
    ping_fail_count++;
 8001f96:	4b09      	ldr	r3, [pc, #36]	@ (8001fbc <handle_state_agent_trying+0x50>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	4a07      	ldr	r2, [pc, #28]	@ (8001fbc <handle_state_agent_trying+0x50>)
 8001f9e:	6013      	str	r3, [r2, #0]
    if(ping_fail_count >= MAX_PING_FAIL_COUNT){
 8001fa0:	4b06      	ldr	r3, [pc, #24]	@ (8001fbc <handle_state_agent_trying+0x50>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b04      	cmp	r3, #4
 8001fa6:	dd05      	ble.n	8001fb4 <handle_state_agent_trying+0x48>
      status = AGENT_DISCONNECTED;
 8001fa8:	4b03      	ldr	r3, [pc, #12]	@ (8001fb8 <handle_state_agent_trying+0x4c>)
 8001faa:	2204      	movs	r2, #4
 8001fac:	701a      	strb	r2, [r3, #0]
      ping_fail_count = 0;
 8001fae:	4b03      	ldr	r3, [pc, #12]	@ (8001fbc <handle_state_agent_trying+0x50>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
}
 8001fb4:	bf00      	nop
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	20000e38 	.word	0x20000e38
 8001fbc:	20000e3c 	.word	0x20000e3c

08001fc0 <handle_state_agent_disconnected>:
void handle_state_agent_disconnected(void) {
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  uros_destroy_entities();
 8001fc4:	f000 f93e 	bl	8002244 <uros_destroy_entities>
  status = AGENT_WAITING;
 8001fc8:	4b02      	ldr	r3, [pc, #8]	@ (8001fd4 <handle_state_agent_disconnected+0x14>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	701a      	strb	r2, [r3, #0]
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000e38 	.word	0x20000e38

08001fd8 <uros_create_entities>:


void uros_create_entities(void) {
 8001fd8:	b5b0      	push	{r4, r5, r7, lr}
 8001fda:	b088      	sub	sp, #32
 8001fdc:	af02      	add	r7, sp, #8
  // 重置积分变量
  last_cmd_vel_time = 0;
 8001fde:	4b7e      	ldr	r3, [pc, #504]	@ (80021d8 <uros_create_entities+0x200>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
  last_cmd_arm_time = 0;
 8001fe4:	4b7d      	ldr	r3, [pc, #500]	@ (80021dc <uros_create_entities+0x204>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
  current_yaw = 0.0f;
 8001fea:	4b7d      	ldr	r3, [pc, #500]	@ (80021e0 <uros_create_entities+0x208>)
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]

  allocator = rcl_get_default_allocator();
 8001ff2:	4c7c      	ldr	r4, [pc, #496]	@ (80021e4 <uros_create_entities+0x20c>)
 8001ff4:	463b      	mov	r3, r7
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f00c fdb0 	bl	800eb5c <rcutils_get_default_allocator>
 8001ffc:	4625      	mov	r5, r4
 8001ffe:	463c      	mov	r4, r7
 8002000:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002002:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002004:	6823      	ldr	r3, [r4, #0]
 8002006:	602b      	str	r3, [r5, #0]

  init_options = rcl_get_zero_initialized_init_options();
 8002008:	f00a fda0 	bl	800cb4c <rcl_get_zero_initialized_init_options>
 800200c:	4603      	mov	r3, r0
 800200e:	4a76      	ldr	r2, [pc, #472]	@ (80021e8 <uros_create_entities+0x210>)
 8002010:	6013      	str	r3, [r2, #0]
  rcl_init_options_init(&init_options, allocator);
 8002012:	4b74      	ldr	r3, [pc, #464]	@ (80021e4 <uros_create_entities+0x20c>)
 8002014:	466c      	mov	r4, sp
 8002016:	f103 020c 	add.w	r2, r3, #12
 800201a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800201e:	e884 0003 	stmia.w	r4, {r0, r1}
 8002022:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002024:	4870      	ldr	r0, [pc, #448]	@ (80021e8 <uros_create_entities+0x210>)
 8002026:	f00a fd93 	bl	800cb50 <rcl_init_options_init>
  rcl_init_options_set_domain_id(&init_options, DOMAIN_ID);
 800202a:	2100      	movs	r1, #0
 800202c:	486e      	ldr	r0, [pc, #440]	@ (80021e8 <uros_create_entities+0x210>)
 800202e:	f00a fe8b 	bl	800cd48 <rcl_init_options_set_domain_id>

  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator); // Initialize support structure
 8002032:	4b6c      	ldr	r3, [pc, #432]	@ (80021e4 <uros_create_entities+0x20c>)
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	4b6c      	ldr	r3, [pc, #432]	@ (80021e8 <uros_create_entities+0x210>)
 8002038:	2200      	movs	r2, #0
 800203a:	2100      	movs	r1, #0
 800203c:	486b      	ldr	r0, [pc, #428]	@ (80021ec <uros_create_entities+0x214>)
 800203e:	f00c fc27 	bl	800e890 <rclc_support_init_with_options>

  rcl_init_options_fini(&init_options);
 8002042:	4869      	ldr	r0, [pc, #420]	@ (80021e8 <uros_create_entities+0x210>)
 8002044:	f00a fdea 	bl	800cc1c <rcl_init_options_fini>
  
  rclc_node_init_default(&node, NODE_NAME, "", &support);                       // Initialize node
 8002048:	4b68      	ldr	r3, [pc, #416]	@ (80021ec <uros_create_entities+0x214>)
 800204a:	4a69      	ldr	r2, [pc, #420]	@ (80021f0 <uros_create_entities+0x218>)
 800204c:	4969      	ldr	r1, [pc, #420]	@ (80021f4 <uros_create_entities+0x21c>)
 800204e:	486a      	ldr	r0, [pc, #424]	@ (80021f8 <uros_create_entities+0x220>)
 8002050:	f00c fc7c 	bl	800e94c <rclc_node_init_default>

  rclc_publisher_init_default(                                                  // Initialize publisher for pose
 8002054:	f00a fbf2 	bl	800c83c <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>
 8002058:	4602      	mov	r2, r0
 800205a:	4b68      	ldr	r3, [pc, #416]	@ (80021fc <uros_create_entities+0x224>)
 800205c:	4966      	ldr	r1, [pc, #408]	@ (80021f8 <uros_create_entities+0x220>)
 800205e:	4868      	ldr	r0, [pc, #416]	@ (8002200 <uros_create_entities+0x228>)
 8002060:	f00c fcb0 	bl	800e9c4 <rclc_publisher_init_default>
    &pose_pub,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(nav_msgs, msg, Odometry),
    "robot/pose");
  pose_msg.pose.pose.position.x = 83.0;
 8002064:	4967      	ldr	r1, [pc, #412]	@ (8002204 <uros_create_entities+0x22c>)
 8002066:	a358      	add	r3, pc, #352	@ (adr r3, 80021c8 <uros_create_entities+0x1f0>)
 8002068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206c:	e9c1 2308 	strd	r2, r3, [r1, #32]
  pose_msg.pose.pose.position.y = 616.0;
 8002070:	4964      	ldr	r1, [pc, #400]	@ (8002204 <uros_create_entities+0x22c>)
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	4b64      	ldr	r3, [pc, #400]	@ (8002208 <uros_create_entities+0x230>)
 8002078:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
  pose_msg.pose.pose.position.z = 0.0;
 800207c:	4961      	ldr	r1, [pc, #388]	@ (8002204 <uros_create_entities+0x22c>)
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	f04f 0300 	mov.w	r3, #0
 8002086:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
  pose_msg.pose.pose.orientation.x = 0.0;
 800208a:	495e      	ldr	r1, [pc, #376]	@ (8002204 <uros_create_entities+0x22c>)
 800208c:	f04f 0200 	mov.w	r2, #0
 8002090:	f04f 0300 	mov.w	r3, #0
 8002094:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
  pose_msg.pose.pose.orientation.y = 0.0;
 8002098:	495a      	ldr	r1, [pc, #360]	@ (8002204 <uros_create_entities+0x22c>)
 800209a:	f04f 0200 	mov.w	r2, #0
 800209e:	f04f 0300 	mov.w	r3, #0
 80020a2:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
  pose_msg.pose.pose.orientation.z = 0.0;
 80020a6:	4957      	ldr	r1, [pc, #348]	@ (8002204 <uros_create_entities+0x22c>)
 80020a8:	f04f 0200 	mov.w	r2, #0
 80020ac:	f04f 0300 	mov.w	r3, #0
 80020b0:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
  pose_msg.pose.pose.orientation.w = 0.0;
 80020b4:	4953      	ldr	r1, [pc, #332]	@ (8002204 <uros_create_entities+0x22c>)
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	f04f 0300 	mov.w	r3, #0
 80020be:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50

  rclc_publisher_init_default(                                                  // Initialize publisher for pose
 80020c2:	f00e fcc7 	bl	8010a54 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 80020c6:	4602      	mov	r2, r0
 80020c8:	4b50      	ldr	r3, [pc, #320]	@ (800220c <uros_create_entities+0x234>)
 80020ca:	494b      	ldr	r1, [pc, #300]	@ (80021f8 <uros_create_entities+0x220>)
 80020cc:	4850      	ldr	r0, [pc, #320]	@ (8002210 <uros_create_entities+0x238>)
 80020ce:	f00c fc79 	bl	800e9c4 <rclc_publisher_init_default>
    &arm_pub,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
    "robot/arm_status");
  arm_msg.data = -1;
 80020d2:	4b50      	ldr	r3, [pc, #320]	@ (8002214 <uros_create_entities+0x23c>)
 80020d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80020d8:	601a      	str	r2, [r3, #0]

  rmw_uros_set_publisher_session_timeout(                                       // Set session timeout for publisher
 80020da:	4849      	ldr	r0, [pc, #292]	@ (8002200 <uros_create_entities+0x228>)
 80020dc:	f00b f92c 	bl	800d338 <rcl_publisher_get_rmw_handle>
 80020e0:	4603      	mov	r3, r0
 80020e2:	210a      	movs	r1, #10
 80020e4:	4618      	mov	r0, r3
 80020e6:	f00e f8fd 	bl	80102e4 <rmw_uros_set_publisher_session_timeout>
    rcl_publisher_get_rmw_handle(&pose_pub),
    10);

  rmw_uros_set_publisher_session_timeout(                                       // Set session timeout for publisher
 80020ea:	4849      	ldr	r0, [pc, #292]	@ (8002210 <uros_create_entities+0x238>)
 80020ec:	f00b f924 	bl	800d338 <rcl_publisher_get_rmw_handle>
 80020f0:	4603      	mov	r3, r0
 80020f2:	210a      	movs	r1, #10
 80020f4:	4618      	mov	r0, r3
 80020f6:	f00e f8f5 	bl	80102e4 <rmw_uros_set_publisher_session_timeout>
    rcl_publisher_get_rmw_handle(&arm_pub),
    10);

  rclc_subscription_init_default(                                               // Initialize subscriber for command velocity
 80020fa:	f008 fed5 	bl	800aea8 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 80020fe:	4602      	mov	r2, r0
 8002100:	4b45      	ldr	r3, [pc, #276]	@ (8002218 <uros_create_entities+0x240>)
 8002102:	493d      	ldr	r1, [pc, #244]	@ (80021f8 <uros_create_entities+0x220>)
 8002104:	4845      	ldr	r0, [pc, #276]	@ (800221c <uros_create_entities+0x244>)
 8002106:	f00c fc91 	bl	800ea2c <rclc_subscription_init_default>
    &cmd_vel_sub,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist),
    "robot/cmd_vel");
  cmd_vel_msg.linear.x = 0.0;
 800210a:	4945      	ldr	r1, [pc, #276]	@ (8002220 <uros_create_entities+0x248>)
 800210c:	f04f 0200 	mov.w	r2, #0
 8002110:	f04f 0300 	mov.w	r3, #0
 8002114:	e9c1 2300 	strd	r2, r3, [r1]
  cmd_vel_msg.linear.y = 0.0;
 8002118:	4941      	ldr	r1, [pc, #260]	@ (8002220 <uros_create_entities+0x248>)
 800211a:	f04f 0200 	mov.w	r2, #0
 800211e:	f04f 0300 	mov.w	r3, #0
 8002122:	e9c1 2302 	strd	r2, r3, [r1, #8]
  cmd_vel_msg.linear.z = 0.0;
 8002126:	493e      	ldr	r1, [pc, #248]	@ (8002220 <uros_create_entities+0x248>)
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	f04f 0300 	mov.w	r3, #0
 8002130:	e9c1 2304 	strd	r2, r3, [r1, #16]
  cmd_vel_msg.angular.x = 0.0;
 8002134:	493a      	ldr	r1, [pc, #232]	@ (8002220 <uros_create_entities+0x248>)
 8002136:	f04f 0200 	mov.w	r2, #0
 800213a:	f04f 0300 	mov.w	r3, #0
 800213e:	e9c1 2306 	strd	r2, r3, [r1, #24]
  cmd_vel_msg.angular.y = 0.0;
 8002142:	4937      	ldr	r1, [pc, #220]	@ (8002220 <uros_create_entities+0x248>)
 8002144:	f04f 0200 	mov.w	r2, #0
 8002148:	f04f 0300 	mov.w	r3, #0
 800214c:	e9c1 2308 	strd	r2, r3, [r1, #32]
  cmd_vel_msg.angular.z = 0.0;
 8002150:	4933      	ldr	r1, [pc, #204]	@ (8002220 <uros_create_entities+0x248>)
 8002152:	f04f 0200 	mov.w	r2, #0
 8002156:	f04f 0300 	mov.w	r3, #0
 800215a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

  rclc_subscription_init_default(                                               // Initialize subscriber for arm command
 800215e:	f00e fc79 	bl	8010a54 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8002162:	4602      	mov	r2, r0
 8002164:	4b2f      	ldr	r3, [pc, #188]	@ (8002224 <uros_create_entities+0x24c>)
 8002166:	4924      	ldr	r1, [pc, #144]	@ (80021f8 <uros_create_entities+0x220>)
 8002168:	482f      	ldr	r0, [pc, #188]	@ (8002228 <uros_create_entities+0x250>)
 800216a:	f00c fc5f 	bl	800ea2c <rclc_subscription_init_default>
    &cmd_arm_sub,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
    "robot/cmd_arm");
  cmd_arm_msg.data = -1;
 800216e:	4b2f      	ldr	r3, [pc, #188]	@ (800222c <uros_create_entities+0x254>)
 8002170:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002174:	601a      	str	r2, [r3, #0]


  rclc_timer_init_default(&pose_pub_timer, &support, RCL_MS_TO_NS(50), pose_pub_timer_cb);
 8002176:	4b2e      	ldr	r3, [pc, #184]	@ (8002230 <uros_create_entities+0x258>)
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	a315      	add	r3, pc, #84	@ (adr r3, 80021d0 <uros_create_entities+0x1f8>)
 800217c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002180:	491a      	ldr	r1, [pc, #104]	@ (80021ec <uros_create_entities+0x214>)
 8002182:	482c      	ldr	r0, [pc, #176]	@ (8002234 <uros_create_entities+0x25c>)
 8002184:	f00c fc86 	bl	800ea94 <rclc_timer_init_default>

  
  rclc_executor_init(&executor, &support.context, 3, &allocator); // Create executor (1 timer + 2 subscriptions)
 8002188:	4b16      	ldr	r3, [pc, #88]	@ (80021e4 <uros_create_entities+0x20c>)
 800218a:	2203      	movs	r2, #3
 800218c:	4917      	ldr	r1, [pc, #92]	@ (80021ec <uros_create_entities+0x214>)
 800218e:	482a      	ldr	r0, [pc, #168]	@ (8002238 <uros_create_entities+0x260>)
 8002190:	f00c f856 	bl	800e240 <rclc_executor_init>

  rclc_executor_add_subscription(&executor, &cmd_vel_sub, &cmd_vel_msg, &cmd_vel_sub_cb, ON_NEW_DATA); // Add subscriber to executor
 8002194:	2300      	movs	r3, #0
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	4b28      	ldr	r3, [pc, #160]	@ (800223c <uros_create_entities+0x264>)
 800219a:	4a21      	ldr	r2, [pc, #132]	@ (8002220 <uros_create_entities+0x248>)
 800219c:	491f      	ldr	r1, [pc, #124]	@ (800221c <uros_create_entities+0x244>)
 800219e:	4826      	ldr	r0, [pc, #152]	@ (8002238 <uros_create_entities+0x260>)
 80021a0:	f00c f8f2 	bl	800e388 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &cmd_arm_sub, &cmd_arm_msg, &cmd_arm_sub_cb, ON_NEW_DATA); // Add arm subscriber to executor
 80021a4:	2300      	movs	r3, #0
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	4b25      	ldr	r3, [pc, #148]	@ (8002240 <uros_create_entities+0x268>)
 80021aa:	4a20      	ldr	r2, [pc, #128]	@ (800222c <uros_create_entities+0x254>)
 80021ac:	491e      	ldr	r1, [pc, #120]	@ (8002228 <uros_create_entities+0x250>)
 80021ae:	4822      	ldr	r0, [pc, #136]	@ (8002238 <uros_create_entities+0x260>)
 80021b0:	f00c f8ea 	bl	800e388 <rclc_executor_add_subscription>
  rclc_executor_add_timer(&executor, &pose_pub_timer); // Add timer to executor
 80021b4:	491f      	ldr	r1, [pc, #124]	@ (8002234 <uros_create_entities+0x25c>)
 80021b6:	4820      	ldr	r0, [pc, #128]	@ (8002238 <uros_create_entities+0x260>)
 80021b8:	f00c f91a 	bl	800e3f0 <rclc_executor_add_timer>
}
 80021bc:	bf00      	nop
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bdb0      	pop	{r4, r5, r7, pc}
 80021c4:	f3af 8000 	nop.w
 80021c8:	00000000 	.word	0x00000000
 80021cc:	4054c000 	.word	0x4054c000
 80021d0:	02faf080 	.word	0x02faf080
 80021d4:	00000000 	.word	0x00000000
 80021d8:	20000d4c 	.word	0x20000d4c
 80021dc:	20000d50 	.word	0x20000d50
 80021e0:	20000d54 	.word	0x20000d54
 80021e4:	20000d8c 	.word	0x20000d8c
 80021e8:	20000da8 	.word	0x20000da8
 80021ec:	20000d58 	.word	0x20000d58
 80021f0:	0801b088 	.word	0x0801b088
 80021f4:	0801b08c 	.word	0x0801b08c
 80021f8:	20000da0 	.word	0x20000da0
 80021fc:	0801b09c 	.word	0x0801b09c
 8002200:	20000a34 	.word	0x20000a34
 8002204:	20000a38 	.word	0x20000a38
 8002208:	40834000 	.word	0x40834000
 800220c:	0801b0a8 	.word	0x0801b0a8
 8002210:	20000d38 	.word	0x20000d38
 8002214:	20000d3c 	.word	0x20000d3c
 8002218:	0801b0bc 	.word	0x0801b0bc
 800221c:	20000d00 	.word	0x20000d00
 8002220:	20000d08 	.word	0x20000d08
 8002224:	0801b0cc 	.word	0x0801b0cc
 8002228:	20000d40 	.word	0x20000d40
 800222c:	20000d44 	.word	0x20000d44
 8002230:	080024f5 	.word	0x080024f5
 8002234:	20000d48 	.word	0x20000d48
 8002238:	20000db0 	.word	0x20000db0
 800223c:	080022c1 	.word	0x080022c1
 8002240:	08002559 	.word	0x08002559

08002244 <uros_destroy_entities>:
void uros_destroy_entities(void) {
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
  rmw_context_t* rmw_context = rcl_context_get_rmw_context(&support.context);
 800224a:	4814      	ldr	r0, [pc, #80]	@ (800229c <uros_destroy_entities+0x58>)
 800224c:	f00a fc04 	bl	800ca58 <rcl_context_get_rmw_context>
 8002250:	6078      	str	r0, [r7, #4]
  (void) rmw_uros_set_context_entity_destroy_session_timeout(rmw_context, 0);
 8002252:	2100      	movs	r1, #0
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f00e f84d 	bl	80102f4 <rmw_uros_set_context_entity_destroy_session_timeout>

  // Destroy publisher
  rcl_publisher_fini(&pose_pub, &node);
 800225a:	4911      	ldr	r1, [pc, #68]	@ (80022a0 <uros_destroy_entities+0x5c>)
 800225c:	4811      	ldr	r0, [pc, #68]	@ (80022a4 <uros_destroy_entities+0x60>)
 800225e:	f00a ffed 	bl	800d23c <rcl_publisher_fini>
  rcl_publisher_fini(&arm_pub, &node);
 8002262:	490f      	ldr	r1, [pc, #60]	@ (80022a0 <uros_destroy_entities+0x5c>)
 8002264:	4810      	ldr	r0, [pc, #64]	@ (80022a8 <uros_destroy_entities+0x64>)
 8002266:	f00a ffe9 	bl	800d23c <rcl_publisher_fini>

  // Destroy subscriber
  rcl_subscription_fini(&cmd_vel_sub, &node);
 800226a:	490d      	ldr	r1, [pc, #52]	@ (80022a0 <uros_destroy_entities+0x5c>)
 800226c:	480f      	ldr	r0, [pc, #60]	@ (80022ac <uros_destroy_entities+0x68>)
 800226e:	f00b f939 	bl	800d4e4 <rcl_subscription_fini>
  rcl_subscription_fini(&cmd_arm_sub, &node);
 8002272:	490b      	ldr	r1, [pc, #44]	@ (80022a0 <uros_destroy_entities+0x5c>)
 8002274:	480e      	ldr	r0, [pc, #56]	@ (80022b0 <uros_destroy_entities+0x6c>)
 8002276:	f00b f935 	bl	800d4e4 <rcl_subscription_fini>

  rcl_timer_fini(&pose_pub_timer);
 800227a:	480e      	ldr	r0, [pc, #56]	@ (80022b4 <uros_destroy_entities+0x70>)
 800227c:	f00b fb66 	bl	800d94c <rcl_timer_fini>

  // Destroy executor
  rclc_executor_fini(&executor);
 8002280:	480d      	ldr	r0, [pc, #52]	@ (80022b8 <uros_destroy_entities+0x74>)
 8002282:	f00c f84d 	bl	800e320 <rclc_executor_fini>

  // Destroy node
  rcl_node_fini(&node);
 8002286:	4806      	ldr	r0, [pc, #24]	@ (80022a0 <uros_destroy_entities+0x5c>)
 8002288:	f00a feb6 	bl	800cff8 <rcl_node_fini>
  rclc_support_fini(&support);
 800228c:	4803      	ldr	r0, [pc, #12]	@ (800229c <uros_destroy_entities+0x58>)
 800228e:	f00c fb33 	bl	800e8f8 <rclc_support_fini>
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20000d58 	.word	0x20000d58
 80022a0:	20000da0 	.word	0x20000da0
 80022a4:	20000a34 	.word	0x20000a34
 80022a8:	20000d38 	.word	0x20000d38
 80022ac:	20000d00 	.word	0x20000d00
 80022b0:	20000d40 	.word	0x20000d40
 80022b4:	20000d48 	.word	0x20000d48
 80022b8:	20000db0 	.word	0x20000db0
 80022bc:	00000000 	.word	0x00000000

080022c0 <cmd_vel_sub_cb>:

void cmd_vel_sub_cb(const void* msgin) {
 80022c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80022c4:	b088      	sub	sp, #32
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
  const geometry_msgs__msg__Twist * msg = (const geometry_msgs__msg__Twist *)msgin;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	61fb      	str	r3, [r7, #28]
  
  // 检查消息指针是否有效
  if (msg == NULL) {
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 80f3 	beq.w	80024bc <cmd_vel_sub_cb+0x1fc>
    return;
  }
  
  cmd_vel_msg = *msg;
 80022d6:	4a82      	ldr	r2, [pc, #520]	@ (80024e0 <cmd_vel_sub_cb+0x220>)
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	4614      	mov	r4, r2
 80022dc:	461d      	mov	r5, r3
 80022de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022e6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80022ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  // 获取当前时间 (毫秒)
  uint32_t current_time = HAL_GetTick();
 80022ee:	f001 fdb3 	bl	8003e58 <HAL_GetTick>
 80022f2:	61b8      	str	r0, [r7, #24]

  // 计算时间差 (秒)
  float dt = 0.0f;
 80022f4:	f04f 0300 	mov.w	r3, #0
 80022f8:	617b      	str	r3, [r7, #20]
  if (last_cmd_vel_time != 0) {
 80022fa:	4b7a      	ldr	r3, [pc, #488]	@ (80024e4 <cmd_vel_sub_cb+0x224>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 80d8 	beq.w	80024b4 <cmd_vel_sub_cb+0x1f4>
	dt = (current_time - last_cmd_vel_time) / 1000.0f;
 8002304:	4b77      	ldr	r3, [pc, #476]	@ (80024e4 <cmd_vel_sub_cb+0x224>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	ee07 3a90 	vmov	s15, r3
 8002310:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002314:	eddf 6a74 	vldr	s13, [pc, #464]	@ 80024e8 <cmd_vel_sub_cb+0x228>
 8002318:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800231c:	edc7 7a05 	vstr	s15, [r7, #20]
	float dx_robot = cmd_vel_msg.linear.x * dt;
 8002320:	4b6f      	ldr	r3, [pc, #444]	@ (80024e0 <cmd_vel_sub_cb+0x220>)
 8002322:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002326:	6978      	ldr	r0, [r7, #20]
 8002328:	f7fe f93e 	bl	80005a8 <__aeabi_f2d>
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	4620      	mov	r0, r4
 8002332:	4629      	mov	r1, r5
 8002334:	f7fe f990 	bl	8000658 <__aeabi_dmul>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	4610      	mov	r0, r2
 800233e:	4619      	mov	r1, r3
 8002340:	f7fe fc24 	bl	8000b8c <__aeabi_d2f>
 8002344:	4603      	mov	r3, r0
 8002346:	613b      	str	r3, [r7, #16]
	float dy_robot = cmd_vel_msg.linear.y * dt;
 8002348:	4b65      	ldr	r3, [pc, #404]	@ (80024e0 <cmd_vel_sub_cb+0x220>)
 800234a:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800234e:	6978      	ldr	r0, [r7, #20]
 8002350:	f7fe f92a 	bl	80005a8 <__aeabi_f2d>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4620      	mov	r0, r4
 800235a:	4629      	mov	r1, r5
 800235c:	f7fe f97c 	bl	8000658 <__aeabi_dmul>
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	4610      	mov	r0, r2
 8002366:	4619      	mov	r1, r3
 8002368:	f7fe fc10 	bl	8000b8c <__aeabi_d2f>
 800236c:	4603      	mov	r3, r0
 800236e:	60fb      	str	r3, [r7, #12]

	  // 更新位置
	//      pose_msg.pose.pose.position.x += dx_world;
	//      pose_msg.pose.pose.position.y += dy_world;
	  // pose_msg.pose.pose.position.z += cmd_vel_msg.linear.z * dt;
	  pose_msg.pose.pose.position.x += dx_robot;
 8002370:	4b5e      	ldr	r3, [pc, #376]	@ (80024ec <cmd_vel_sub_cb+0x22c>)
 8002372:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002376:	6938      	ldr	r0, [r7, #16]
 8002378:	f7fe f916 	bl	80005a8 <__aeabi_f2d>
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	4620      	mov	r0, r4
 8002382:	4629      	mov	r1, r5
 8002384:	f7fd ffb2 	bl	80002ec <__adddf3>
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	4957      	ldr	r1, [pc, #348]	@ (80024ec <cmd_vel_sub_cb+0x22c>)
 800238e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	  pose_msg.pose.pose.position.y += dy_robot;
 8002392:	4b56      	ldr	r3, [pc, #344]	@ (80024ec <cmd_vel_sub_cb+0x22c>)
 8002394:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f7fe f905 	bl	80005a8 <__aeabi_f2d>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	4620      	mov	r0, r4
 80023a4:	4629      	mov	r1, r5
 80023a6:	f7fd ffa1 	bl	80002ec <__adddf3>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	494f      	ldr	r1, [pc, #316]	@ (80024ec <cmd_vel_sub_cb+0x22c>)
 80023b0:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

	  // 更新偏航角
	  current_yaw += cmd_vel_msg.angular.z * dt;
 80023b4:	4b4e      	ldr	r3, [pc, #312]	@ (80024f0 <cmd_vel_sub_cb+0x230>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7fe f8f5 	bl	80005a8 <__aeabi_f2d>
 80023be:	4680      	mov	r8, r0
 80023c0:	4689      	mov	r9, r1
 80023c2:	4b47      	ldr	r3, [pc, #284]	@ (80024e0 <cmd_vel_sub_cb+0x220>)
 80023c4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 80023c8:	6978      	ldr	r0, [r7, #20]
 80023ca:	f7fe f8ed 	bl	80005a8 <__aeabi_f2d>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	4620      	mov	r0, r4
 80023d4:	4629      	mov	r1, r5
 80023d6:	f7fe f93f 	bl	8000658 <__aeabi_dmul>
 80023da:	4602      	mov	r2, r0
 80023dc:	460b      	mov	r3, r1
 80023de:	4640      	mov	r0, r8
 80023e0:	4649      	mov	r1, r9
 80023e2:	f7fd ff83 	bl	80002ec <__adddf3>
 80023e6:	4602      	mov	r2, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	4610      	mov	r0, r2
 80023ec:	4619      	mov	r1, r3
 80023ee:	f7fe fbcd 	bl	8000b8c <__aeabi_d2f>
 80023f2:	4603      	mov	r3, r0
 80023f4:	4a3e      	ldr	r2, [pc, #248]	@ (80024f0 <cmd_vel_sub_cb+0x230>)
 80023f6:	6013      	str	r3, [r2, #0]

	  // 将偏航角限制在 [-π, π] 范围内
	  while (current_yaw > M_PI) current_yaw -= 2.0f * M_PI;
 80023f8:	e012      	b.n	8002420 <cmd_vel_sub_cb+0x160>
 80023fa:	4b3d      	ldr	r3, [pc, #244]	@ (80024f0 <cmd_vel_sub_cb+0x230>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fe f8d2 	bl	80005a8 <__aeabi_f2d>
 8002404:	a330      	add	r3, pc, #192	@ (adr r3, 80024c8 <cmd_vel_sub_cb+0x208>)
 8002406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800240a:	f7fd ff6d 	bl	80002e8 <__aeabi_dsub>
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	4610      	mov	r0, r2
 8002414:	4619      	mov	r1, r3
 8002416:	f7fe fbb9 	bl	8000b8c <__aeabi_d2f>
 800241a:	4603      	mov	r3, r0
 800241c:	4a34      	ldr	r2, [pc, #208]	@ (80024f0 <cmd_vel_sub_cb+0x230>)
 800241e:	6013      	str	r3, [r2, #0]
 8002420:	4b33      	ldr	r3, [pc, #204]	@ (80024f0 <cmd_vel_sub_cb+0x230>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f7fe f8bf 	bl	80005a8 <__aeabi_f2d>
 800242a:	a329      	add	r3, pc, #164	@ (adr r3, 80024d0 <cmd_vel_sub_cb+0x210>)
 800242c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002430:	f7fe fba2 	bl	8000b78 <__aeabi_dcmpgt>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1df      	bne.n	80023fa <cmd_vel_sub_cb+0x13a>
	  while (current_yaw < -M_PI) current_yaw += 2.0f * M_PI;
 800243a:	e012      	b.n	8002462 <cmd_vel_sub_cb+0x1a2>
 800243c:	4b2c      	ldr	r3, [pc, #176]	@ (80024f0 <cmd_vel_sub_cb+0x230>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4618      	mov	r0, r3
 8002442:	f7fe f8b1 	bl	80005a8 <__aeabi_f2d>
 8002446:	a320      	add	r3, pc, #128	@ (adr r3, 80024c8 <cmd_vel_sub_cb+0x208>)
 8002448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244c:	f7fd ff4e 	bl	80002ec <__adddf3>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	4610      	mov	r0, r2
 8002456:	4619      	mov	r1, r3
 8002458:	f7fe fb98 	bl	8000b8c <__aeabi_d2f>
 800245c:	4603      	mov	r3, r0
 800245e:	4a24      	ldr	r2, [pc, #144]	@ (80024f0 <cmd_vel_sub_cb+0x230>)
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	4b23      	ldr	r3, [pc, #140]	@ (80024f0 <cmd_vel_sub_cb+0x230>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f7fe f89e 	bl	80005a8 <__aeabi_f2d>
 800246c:	a31a      	add	r3, pc, #104	@ (adr r3, 80024d8 <cmd_vel_sub_cb+0x218>)
 800246e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002472:	f7fe fb63 	bl	8000b3c <__aeabi_dcmplt>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1df      	bne.n	800243c <cmd_vel_sub_cb+0x17c>

	  pose_msg.pose.pose.orientation.z = current_yaw;
 800247c:	4b1c      	ldr	r3, [pc, #112]	@ (80024f0 <cmd_vel_sub_cb+0x230>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f7fe f891 	bl	80005a8 <__aeabi_f2d>
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	4918      	ldr	r1, [pc, #96]	@ (80024ec <cmd_vel_sub_cb+0x22c>)
 800248c:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

	  pose_msg.twist.twist.linear.x = cmd_vel_msg.linear.x;
 8002490:	4b13      	ldr	r3, [pc, #76]	@ (80024e0 <cmd_vel_sub_cb+0x220>)
 8002492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002496:	4915      	ldr	r1, [pc, #84]	@ (80024ec <cmd_vel_sub_cb+0x22c>)
 8002498:	e9c1 235e 	strd	r2, r3, [r1, #376]	@ 0x178
	  pose_msg.twist.twist.linear.y = cmd_vel_msg.linear.y;
 800249c:	4b10      	ldr	r3, [pc, #64]	@ (80024e0 <cmd_vel_sub_cb+0x220>)
 800249e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80024a2:	4912      	ldr	r1, [pc, #72]	@ (80024ec <cmd_vel_sub_cb+0x22c>)
 80024a4:	e9c1 2360 	strd	r2, r3, [r1, #384]	@ 0x180
	  pose_msg.twist.twist.angular.z = cmd_vel_msg.angular.z;
 80024a8:	4b0d      	ldr	r3, [pc, #52]	@ (80024e0 <cmd_vel_sub_cb+0x220>)
 80024aa:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80024ae:	490f      	ldr	r1, [pc, #60]	@ (80024ec <cmd_vel_sub_cb+0x22c>)
 80024b0:	e9c1 2368 	strd	r2, r3, [r1, #416]	@ 0x1a0

//	  rcl_publish(&pose_pub, &pose_msg, NULL);
  }

  last_cmd_vel_time = current_time;
 80024b4:	4a0b      	ldr	r2, [pc, #44]	@ (80024e4 <cmd_vel_sub_cb+0x224>)
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	e000      	b.n	80024be <cmd_vel_sub_cb+0x1fe>
    return;
 80024bc:	bf00      	nop
}
 80024be:	3720      	adds	r7, #32
 80024c0:	46bd      	mov	sp, r7
 80024c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80024c6:	bf00      	nop
 80024c8:	54442d18 	.word	0x54442d18
 80024cc:	401921fb 	.word	0x401921fb
 80024d0:	54442d18 	.word	0x54442d18
 80024d4:	400921fb 	.word	0x400921fb
 80024d8:	54442d18 	.word	0x54442d18
 80024dc:	c00921fb 	.word	0xc00921fb
 80024e0:	20000d08 	.word	0x20000d08
 80024e4:	20000d4c 	.word	0x20000d4c
 80024e8:	447a0000 	.word	0x447a0000
 80024ec:	20000a38 	.word	0x20000a38
 80024f0:	20000d54 	.word	0x20000d54

080024f4 <pose_pub_timer_cb>:

void pose_pub_timer_cb(rcl_timer_t * timer, int64_t last_call_time) {
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	e9c7 2300 	strd	r2, r3, [r7]
  // 更新时间戳
  uint32_t current_tick = HAL_GetTick();
 8002500:	f001 fcaa 	bl	8003e58 <HAL_GetTick>
 8002504:	6178      	str	r0, [r7, #20]
  pose_msg.header.stamp.sec = current_tick / 1000;
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	4a0f      	ldr	r2, [pc, #60]	@ (8002548 <pose_pub_timer_cb+0x54>)
 800250a:	fba2 2303 	umull	r2, r3, r2, r3
 800250e:	099b      	lsrs	r3, r3, #6
 8002510:	461a      	mov	r2, r3
 8002512:	4b0e      	ldr	r3, [pc, #56]	@ (800254c <pose_pub_timer_cb+0x58>)
 8002514:	601a      	str	r2, [r3, #0]
  pose_msg.header.stamp.nanosec = (current_tick % 1000) * 1000000;
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	4b0b      	ldr	r3, [pc, #44]	@ (8002548 <pose_pub_timer_cb+0x54>)
 800251a:	fba3 1302 	umull	r1, r3, r3, r2
 800251e:	099b      	lsrs	r3, r3, #6
 8002520:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002524:	fb01 f303 	mul.w	r3, r1, r3
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	4a09      	ldr	r2, [pc, #36]	@ (8002550 <pose_pub_timer_cb+0x5c>)
 800252c:	fb02 f303 	mul.w	r3, r2, r3
 8002530:	4a06      	ldr	r2, [pc, #24]	@ (800254c <pose_pub_timer_cb+0x58>)
 8002532:	6053      	str	r3, [r2, #4]
  
  rcl_ret_t ret = rcl_publish(&pose_pub, &pose_msg, NULL);
 8002534:	2200      	movs	r2, #0
 8002536:	4905      	ldr	r1, [pc, #20]	@ (800254c <pose_pub_timer_cb+0x58>)
 8002538:	4806      	ldr	r0, [pc, #24]	@ (8002554 <pose_pub_timer_cb+0x60>)
 800253a:	f00a fed9 	bl	800d2f0 <rcl_publish>
 800253e:	6138      	str	r0, [r7, #16]
  // 可选：添加调试信息（如果需要的话）
  // printf("Published pose: x=%.2f, y=%.2f, yaw=%.2f, ret=%d\n", 
  //        pose_msg.pose.pose.position.x, 
  //        pose_msg.pose.pose.position.y, 
  //        current_yaw, ret);
}
 8002540:	bf00      	nop
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	10624dd3 	.word	0x10624dd3
 800254c:	20000a38 	.word	0x20000a38
 8002550:	000f4240 	.word	0x000f4240
 8002554:	20000a34 	.word	0x20000a34

08002558 <cmd_arm_sub_cb>:

void cmd_arm_sub_cb(const void* msgin) {
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  const std_msgs__msg__Int32 * msg = (const std_msgs__msg__Int32 *)msgin;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	60fb      	str	r3, [r7, #12]
  cmd_arm_msg = *msg;
 8002564:	4a08      	ldr	r2, [pc, #32]	@ (8002588 <cmd_arm_sub_cb+0x30>)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6013      	str	r3, [r2, #0]
  code = cmd_arm_msg.data;
 800256c:	4b06      	ldr	r3, [pc, #24]	@ (8002588 <cmd_arm_sub_cb+0x30>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a06      	ldr	r2, [pc, #24]	@ (800258c <cmd_arm_sub_cb+0x34>)
 8002572:	6013      	str	r3, [r2, #0]
  arm_msg = cmd_arm_msg;
 8002574:	4a06      	ldr	r2, [pc, #24]	@ (8002590 <cmd_arm_sub_cb+0x38>)
 8002576:	4b04      	ldr	r3, [pc, #16]	@ (8002588 <cmd_arm_sub_cb+0x30>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6013      	str	r3, [r2, #0]
}
 800257c:	bf00      	nop
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	20000d44 	.word	0x20000d44
 800258c:	2000001c 	.word	0x2000001c
 8002590:	20000d3c 	.word	0x20000d3c

08002594 <arm_pub_cb>:

void arm_pub_cb(){
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
	rcl_publish(&arm_pub, &arm_msg, NULL);
 8002598:	2200      	movs	r2, #0
 800259a:	4903      	ldr	r1, [pc, #12]	@ (80025a8 <arm_pub_cb+0x14>)
 800259c:	4803      	ldr	r0, [pc, #12]	@ (80025ac <arm_pub_cb+0x18>)
 800259e:	f00a fea7 	bl	800d2f0 <rcl_publish>
}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20000d3c 	.word	0x20000d3c
 80025ac:	20000d38 	.word	0x20000d38

080025b0 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08a      	sub	sp, #40	@ 0x28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80025bc:	f006 ffea 	bl	8009594 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80025c0:	4b5a      	ldr	r3, [pc, #360]	@ (800272c <pvPortMallocMicroROS+0x17c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80025c8:	f000 f986 	bl	80028d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80025cc:	4b58      	ldr	r3, [pc, #352]	@ (8002730 <pvPortMallocMicroROS+0x180>)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4013      	ands	r3, r2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f040 8090 	bne.w	80026fa <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d01e      	beq.n	800261e <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80025e0:	2208      	movs	r2, #8
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4413      	add	r3, r2
 80025e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d015      	beq.n	800261e <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f023 0307 	bic.w	r3, r3, #7
 80025f8:	3308      	adds	r3, #8
 80025fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00b      	beq.n	800261e <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800260a:	f383 8811 	msr	BASEPRI, r3
 800260e:	f3bf 8f6f 	isb	sy
 8002612:	f3bf 8f4f 	dsb	sy
 8002616:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002618:	bf00      	nop
 800261a:	bf00      	nop
 800261c:	e7fd      	b.n	800261a <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d06a      	beq.n	80026fa <pvPortMallocMicroROS+0x14a>
 8002624:	4b43      	ldr	r3, [pc, #268]	@ (8002734 <pvPortMallocMicroROS+0x184>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	429a      	cmp	r2, r3
 800262c:	d865      	bhi.n	80026fa <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800262e:	4b42      	ldr	r3, [pc, #264]	@ (8002738 <pvPortMallocMicroROS+0x188>)
 8002630:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002632:	4b41      	ldr	r3, [pc, #260]	@ (8002738 <pvPortMallocMicroROS+0x188>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002638:	e004      	b.n	8002644 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 800263a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800263e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	429a      	cmp	r2, r3
 800264c:	d903      	bls.n	8002656 <pvPortMallocMicroROS+0xa6>
 800264e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f1      	bne.n	800263a <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002656:	4b35      	ldr	r3, [pc, #212]	@ (800272c <pvPortMallocMicroROS+0x17c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800265c:	429a      	cmp	r2, r3
 800265e:	d04c      	beq.n	80026fa <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002660:	6a3b      	ldr	r3, [r7, #32]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2208      	movs	r2, #8
 8002666:	4413      	add	r3, r2
 8002668:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800266a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	6a3b      	ldr	r3, [r7, #32]
 8002670:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	1ad2      	subs	r2, r2, r3
 800267a:	2308      	movs	r3, #8
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	429a      	cmp	r2, r3
 8002680:	d920      	bls.n	80026c4 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002682:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4413      	add	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00b      	beq.n	80026ac <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8002694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002698:	f383 8811 	msr	BASEPRI, r3
 800269c:	f3bf 8f6f 	isb	sy
 80026a0:	f3bf 8f4f 	dsb	sy
 80026a4:	613b      	str	r3, [r7, #16]
}
 80026a6:	bf00      	nop
 80026a8:	bf00      	nop
 80026aa:	e7fd      	b.n	80026a8 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80026ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	1ad2      	subs	r2, r2, r3
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80026b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80026be:	69b8      	ldr	r0, [r7, #24]
 80026c0:	f000 f96c 	bl	800299c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80026c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002734 <pvPortMallocMicroROS+0x184>)
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	4a19      	ldr	r2, [pc, #100]	@ (8002734 <pvPortMallocMicroROS+0x184>)
 80026d0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80026d2:	4b18      	ldr	r3, [pc, #96]	@ (8002734 <pvPortMallocMicroROS+0x184>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	4b19      	ldr	r3, [pc, #100]	@ (800273c <pvPortMallocMicroROS+0x18c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d203      	bcs.n	80026e6 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80026de:	4b15      	ldr	r3, [pc, #84]	@ (8002734 <pvPortMallocMicroROS+0x184>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a16      	ldr	r2, [pc, #88]	@ (800273c <pvPortMallocMicroROS+0x18c>)
 80026e4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80026e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	4b11      	ldr	r3, [pc, #68]	@ (8002730 <pvPortMallocMicroROS+0x180>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	431a      	orrs	r2, r3
 80026f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80026f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80026fa:	f006 ff59 	bl	80095b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00b      	beq.n	8002720 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8002708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800270c:	f383 8811 	msr	BASEPRI, r3
 8002710:	f3bf 8f6f 	isb	sy
 8002714:	f3bf 8f4f 	dsb	sy
 8002718:	60fb      	str	r3, [r7, #12]
}
 800271a:	bf00      	nop
 800271c:	bf00      	nop
 800271e:	e7fd      	b.n	800271c <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8002720:	69fb      	ldr	r3, [r7, #28]
}
 8002722:	4618      	mov	r0, r3
 8002724:	3728      	adds	r7, #40	@ 0x28
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	20004a48 	.word	0x20004a48
 8002730:	20004a54 	.word	0x20004a54
 8002734:	20004a4c 	.word	0x20004a4c
 8002738:	20004a40 	.word	0x20004a40
 800273c:	20004a50 	.word	0x20004a50

08002740 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d04a      	beq.n	80027e8 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002752:	2308      	movs	r3, #8
 8002754:	425b      	negs	r3, r3
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	4413      	add	r3, r2
 800275a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	4b22      	ldr	r3, [pc, #136]	@ (80027f0 <vPortFreeMicroROS+0xb0>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4013      	ands	r3, r2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10b      	bne.n	8002786 <vPortFreeMicroROS+0x46>
	__asm volatile
 800276e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002772:	f383 8811 	msr	BASEPRI, r3
 8002776:	f3bf 8f6f 	isb	sy
 800277a:	f3bf 8f4f 	dsb	sy
 800277e:	60fb      	str	r3, [r7, #12]
}
 8002780:	bf00      	nop
 8002782:	bf00      	nop
 8002784:	e7fd      	b.n	8002782 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00b      	beq.n	80027a6 <vPortFreeMicroROS+0x66>
	__asm volatile
 800278e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002792:	f383 8811 	msr	BASEPRI, r3
 8002796:	f3bf 8f6f 	isb	sy
 800279a:	f3bf 8f4f 	dsb	sy
 800279e:	60bb      	str	r3, [r7, #8]
}
 80027a0:	bf00      	nop
 80027a2:	bf00      	nop
 80027a4:	e7fd      	b.n	80027a2 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	4b11      	ldr	r3, [pc, #68]	@ (80027f0 <vPortFreeMicroROS+0xb0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4013      	ands	r3, r2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d019      	beq.n	80027e8 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d115      	bne.n	80027e8 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	4b0b      	ldr	r3, [pc, #44]	@ (80027f0 <vPortFreeMicroROS+0xb0>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	43db      	mvns	r3, r3
 80027c6:	401a      	ands	r2, r3
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80027cc:	f006 fee2 	bl	8009594 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	4b07      	ldr	r3, [pc, #28]	@ (80027f4 <vPortFreeMicroROS+0xb4>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4413      	add	r3, r2
 80027da:	4a06      	ldr	r2, [pc, #24]	@ (80027f4 <vPortFreeMicroROS+0xb4>)
 80027dc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80027de:	6938      	ldr	r0, [r7, #16]
 80027e0:	f000 f8dc 	bl	800299c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80027e4:	f006 fee4 	bl	80095b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80027e8:	bf00      	nop
 80027ea:	3718      	adds	r7, #24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	20004a54 	.word	0x20004a54
 80027f4:	20004a4c 	.word	0x20004a4c

080027f8 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80027f8:	b480      	push	{r7}
 80027fa:	b087      	sub	sp, #28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8002804:	2308      	movs	r3, #8
 8002806:	425b      	negs	r3, r3
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	4413      	add	r3, r2
 800280c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	4b06      	ldr	r3, [pc, #24]	@ (8002830 <getBlockSize+0x38>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	43db      	mvns	r3, r3
 800281c:	4013      	ands	r3, r2
 800281e:	60fb      	str	r3, [r7, #12]

	return count;
 8002820:	68fb      	ldr	r3, [r7, #12]
}
 8002822:	4618      	mov	r0, r3
 8002824:	371c      	adds	r7, #28
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	20004a54 	.word	0x20004a54

08002834 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800283e:	f006 fea9 	bl	8009594 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8002842:	6838      	ldr	r0, [r7, #0]
 8002844:	f7ff feb4 	bl	80025b0 <pvPortMallocMicroROS>
 8002848:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d017      	beq.n	8002880 <pvPortReallocMicroROS+0x4c>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d014      	beq.n	8002880 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7ff ffce 	bl	80027f8 <getBlockSize>
 800285c:	4603      	mov	r3, r0
 800285e:	2208      	movs	r2, #8
 8002860:	1a9b      	subs	r3, r3, r2
 8002862:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	429a      	cmp	r2, r3
 800286a:	d201      	bcs.n	8002870 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	68b8      	ldr	r0, [r7, #8]
 8002876:	f017 fda6 	bl	801a3c6 <memcpy>

		vPortFreeMicroROS(pv);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7ff ff60 	bl	8002740 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8002880:	f006 fe96 	bl	80095b0 <xTaskResumeAll>

	return newmem;
 8002884:	68bb      	ldr	r3, [r7, #8]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b086      	sub	sp, #24
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
 8002896:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8002898:	f006 fe7c 	bl	8009594 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	fb02 f303 	mul.w	r3, r2, r3
 80028a4:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80028a6:	6978      	ldr	r0, [r7, #20]
 80028a8:	f7ff fe82 	bl	80025b0 <pvPortMallocMicroROS>
 80028ac:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	613b      	str	r3, [r7, #16]

  	while(count--)
 80028b2:	e004      	b.n	80028be <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1c5a      	adds	r2, r3, #1
 80028b8:	613a      	str	r2, [r7, #16]
 80028ba:	2200      	movs	r2, #0
 80028bc:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	1e5a      	subs	r2, r3, #1
 80028c2:	617a      	str	r2, [r7, #20]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1f5      	bne.n	80028b4 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80028c8:	f006 fe72 	bl	80095b0 <xTaskResumeAll>
  	return mem;
 80028cc:	68fb      	ldr	r3, [r7, #12]
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3718      	adds	r7, #24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
	...

080028d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80028de:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80028e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80028e4:	4b27      	ldr	r3, [pc, #156]	@ (8002984 <prvHeapInit+0xac>)
 80028e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00c      	beq.n	800290c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	3307      	adds	r3, #7
 80028f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f023 0307 	bic.w	r3, r3, #7
 80028fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002900:	68ba      	ldr	r2, [r7, #8]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	4a1f      	ldr	r2, [pc, #124]	@ (8002984 <prvHeapInit+0xac>)
 8002908:	4413      	add	r3, r2
 800290a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002910:	4a1d      	ldr	r2, [pc, #116]	@ (8002988 <prvHeapInit+0xb0>)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002916:	4b1c      	ldr	r3, [pc, #112]	@ (8002988 <prvHeapInit+0xb0>)
 8002918:	2200      	movs	r2, #0
 800291a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	4413      	add	r3, r2
 8002922:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002924:	2208      	movs	r2, #8
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	1a9b      	subs	r3, r3, r2
 800292a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f023 0307 	bic.w	r3, r3, #7
 8002932:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	4a15      	ldr	r2, [pc, #84]	@ (800298c <prvHeapInit+0xb4>)
 8002938:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800293a:	4b14      	ldr	r3, [pc, #80]	@ (800298c <prvHeapInit+0xb4>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2200      	movs	r2, #0
 8002940:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002942:	4b12      	ldr	r3, [pc, #72]	@ (800298c <prvHeapInit+0xb4>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	1ad2      	subs	r2, r2, r3
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002958:	4b0c      	ldr	r3, [pc, #48]	@ (800298c <prvHeapInit+0xb4>)
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	4a0a      	ldr	r2, [pc, #40]	@ (8002990 <prvHeapInit+0xb8>)
 8002966:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	4a09      	ldr	r2, [pc, #36]	@ (8002994 <prvHeapInit+0xbc>)
 800296e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002970:	4b09      	ldr	r3, [pc, #36]	@ (8002998 <prvHeapInit+0xc0>)
 8002972:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002976:	601a      	str	r2, [r3, #0]
}
 8002978:	bf00      	nop
 800297a:	3714      	adds	r7, #20
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	20000e40 	.word	0x20000e40
 8002988:	20004a40 	.word	0x20004a40
 800298c:	20004a48 	.word	0x20004a48
 8002990:	20004a50 	.word	0x20004a50
 8002994:	20004a4c 	.word	0x20004a4c
 8002998:	20004a54 	.word	0x20004a54

0800299c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80029a4:	4b28      	ldr	r3, [pc, #160]	@ (8002a48 <prvInsertBlockIntoFreeList+0xac>)
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	e002      	b.n	80029b0 <prvInsertBlockIntoFreeList+0x14>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d8f7      	bhi.n	80029aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	4413      	add	r3, r2
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d108      	bne.n	80029de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	441a      	add	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	441a      	add	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d118      	bne.n	8002a24 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	4b15      	ldr	r3, [pc, #84]	@ (8002a4c <prvInsertBlockIntoFreeList+0xb0>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d00d      	beq.n	8002a1a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	441a      	add	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	e008      	b.n	8002a2c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8002a4c <prvInsertBlockIntoFreeList+0xb0>)
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	e003      	b.n	8002a2c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d002      	beq.n	8002a3a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a3a:	bf00      	nop
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	20004a40 	.word	0x20004a40
 8002a4c:	20004a48 	.word	0x20004a48

08002a50 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002a5e:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8002a60:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a64:	4904      	ldr	r1, [pc, #16]	@ (8002a78 <cubemx_transport_open+0x28>)
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f004 fa18 	bl	8006e9c <HAL_UART_Receive_DMA>
    return true;
 8002a6c:	2301      	movs	r3, #1
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	20004a58 	.word	0x20004a58

08002a7c <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002a8a:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f004 fa2a 	bl	8006ee6 <HAL_UART_DMAStop>
    return true;
 8002a92:	2301      	movs	r3, #1
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
 8002aa8:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002ab0:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b20      	cmp	r3, #32
 8002abc:	d11c      	bne.n	8002af8 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	68b9      	ldr	r1, [r7, #8]
 8002ac6:	6978      	ldr	r0, [r7, #20]
 8002ac8:	f004 f96c 	bl	8006da4 <HAL_UART_Transmit_DMA>
 8002acc:	4603      	mov	r3, r0
 8002ace:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002ad0:	e002      	b.n	8002ad8 <cubemx_transport_write+0x3c>
            osDelay(1);
 8002ad2:	2001      	movs	r0, #1
 8002ad4:	f005 fd1c 	bl	8008510 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002ad8:	7cfb      	ldrb	r3, [r7, #19]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d105      	bne.n	8002aea <cubemx_transport_write+0x4e>
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b20      	cmp	r3, #32
 8002ae8:	d1f3      	bne.n	8002ad2 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8002aea:	7cfb      	ldrb	r3, [r7, #19]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <cubemx_transport_write+0x58>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	e002      	b.n	8002afa <cubemx_transport_write+0x5e>
 8002af4:	2300      	movs	r3, #0
 8002af6:	e000      	b.n	8002afa <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8002af8:	2300      	movs	r3, #0
    }
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3718      	adds	r7, #24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
	...

08002b04 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b088      	sub	sp, #32
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
 8002b10:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002b18:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b1e:	b672      	cpsid	i
}
 8002b20:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8002b2e:	4a1c      	ldr	r2, [pc, #112]	@ (8002ba0 <cubemx_transport_read+0x9c>)
 8002b30:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002b32:	b662      	cpsie	i
}
 8002b34:	bf00      	nop
        __enable_irq();
        ms_used++;
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8002b3c:	2001      	movs	r0, #1
 8002b3e:	f005 fce7 	bl	8008510 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8002b42:	4b18      	ldr	r3, [pc, #96]	@ (8002ba4 <cubemx_transport_read+0xa0>)
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	4b16      	ldr	r3, [pc, #88]	@ (8002ba0 <cubemx_transport_read+0x9c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d103      	bne.n	8002b56 <cubemx_transport_read+0x52>
 8002b4e:	69fa      	ldr	r2, [r7, #28]
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	dbe3      	blt.n	8002b1e <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8002b56:	2300      	movs	r3, #0
 8002b58:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002b5a:	e011      	b.n	8002b80 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8002b5c:	4b11      	ldr	r3, [pc, #68]	@ (8002ba4 <cubemx_transport_read+0xa0>)
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68b9      	ldr	r1, [r7, #8]
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	440b      	add	r3, r1
 8002b66:	4910      	ldr	r1, [pc, #64]	@ (8002ba8 <cubemx_transport_read+0xa4>)
 8002b68:	5c8a      	ldrb	r2, [r1, r2]
 8002b6a:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8002b6c:	4b0d      	ldr	r3, [pc, #52]	@ (8002ba4 <cubemx_transport_read+0xa0>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	3301      	adds	r3, #1
 8002b72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b76:	4a0b      	ldr	r2, [pc, #44]	@ (8002ba4 <cubemx_transport_read+0xa0>)
 8002b78:	6013      	str	r3, [r2, #0]
        wrote++;
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002b80:	4b08      	ldr	r3, [pc, #32]	@ (8002ba4 <cubemx_transport_read+0xa0>)
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	4b06      	ldr	r3, [pc, #24]	@ (8002ba0 <cubemx_transport_read+0x9c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d003      	beq.n	8002b94 <cubemx_transport_read+0x90>
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d3e3      	bcc.n	8002b5c <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8002b94:	69bb      	ldr	r3, [r7, #24]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3720      	adds	r7, #32
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	2000525c 	.word	0x2000525c
 8002ba4:	20005258 	.word	0x20005258
 8002ba8:	20004a58 	.word	0x20004a58

08002bac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bb0:	f001 f91c 	bl	8003dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bb4:	f000 f826 	bl	8002c04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bb8:	f000 fa88 	bl	80030cc <MX_GPIO_Init>
  MX_DMA_Init();
 8002bbc:	f000 fa5e 	bl	800307c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002bc0:	f000 fa08 	bl	8002fd4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8002bc4:	f000 f8ac 	bl	8002d20 <MX_TIM1_Init>
  MX_TIM5_Init();
 8002bc8:	f000 f950 	bl	8002e6c <MX_TIM5_Init>
  MX_USART3_UART_Init();
 8002bcc:	f000 fa2c 	bl	8003028 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8002bd0:	f000 f878 	bl	8002cc4 <MX_I2C1_Init>
  MX_TIM4_Init();
 8002bd4:	f000 f8fc 	bl	8002dd0 <MX_TIM4_Init>
  MX_TIM12_Init();
 8002bd8:	f000 f9ac 	bl	8002f34 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002bdc:	f005 fbbc 	bl	8008358 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002be0:	4a05      	ldr	r2, [pc, #20]	@ (8002bf8 <main+0x4c>)
 8002be2:	2100      	movs	r1, #0
 8002be4:	4805      	ldr	r0, [pc, #20]	@ (8002bfc <main+0x50>)
 8002be6:	f005 fc01 	bl	80083ec <osThreadNew>
 8002bea:	4603      	mov	r3, r0
 8002bec:	4a04      	ldr	r2, [pc, #16]	@ (8002c00 <main+0x54>)
 8002bee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002bf0:	f005 fbd6 	bl	80083a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002bf4:	bf00      	nop
 8002bf6:	e7fd      	b.n	8002bf4 <main+0x48>
 8002bf8:	0801b120 	.word	0x0801b120
 8002bfc:	08003d05 	.word	0x08003d05
 8002c00:	20005524 	.word	0x20005524

08002c04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b094      	sub	sp, #80	@ 0x50
 8002c08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c0a:	f107 031c 	add.w	r3, r7, #28
 8002c0e:	2234      	movs	r2, #52	@ 0x34
 8002c10:	2100      	movs	r1, #0
 8002c12:	4618      	mov	r0, r3
 8002c14:	f017 fb0e 	bl	801a234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c18:	f107 0308 	add.w	r3, r7, #8
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	605a      	str	r2, [r3, #4]
 8002c22:	609a      	str	r2, [r3, #8]
 8002c24:	60da      	str	r2, [r3, #12]
 8002c26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c28:	2300      	movs	r3, #0
 8002c2a:	607b      	str	r3, [r7, #4]
 8002c2c:	4b23      	ldr	r3, [pc, #140]	@ (8002cbc <SystemClock_Config+0xb8>)
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c30:	4a22      	ldr	r2, [pc, #136]	@ (8002cbc <SystemClock_Config+0xb8>)
 8002c32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c36:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c38:	4b20      	ldr	r3, [pc, #128]	@ (8002cbc <SystemClock_Config+0xb8>)
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c40:	607b      	str	r3, [r7, #4]
 8002c42:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002c44:	2300      	movs	r3, #0
 8002c46:	603b      	str	r3, [r7, #0]
 8002c48:	4b1d      	ldr	r3, [pc, #116]	@ (8002cc0 <SystemClock_Config+0xbc>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002c50:	4a1b      	ldr	r2, [pc, #108]	@ (8002cc0 <SystemClock_Config+0xbc>)
 8002c52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c56:	6013      	str	r3, [r2, #0]
 8002c58:	4b19      	ldr	r3, [pc, #100]	@ (8002cc0 <SystemClock_Config+0xbc>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002c60:	603b      	str	r3, [r7, #0]
 8002c62:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c64:	2302      	movs	r3, #2
 8002c66:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c6c:	2310      	movs	r3, #16
 8002c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002c70:	2300      	movs	r3, #0
 8002c72:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c74:	f107 031c 	add.w	r3, r7, #28
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f002 fbc5 	bl	8005408 <HAL_RCC_OscConfig>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002c84:	f000 faa6 	bl	80031d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c88:	230f      	movs	r3, #15
 8002c8a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c90:	2300      	movs	r3, #0
 8002c92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c94:	2300      	movs	r3, #0
 8002c96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002c9c:	f107 0308 	add.w	r3, r7, #8
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f002 f8ba 	bl	8004e1c <HAL_RCC_ClockConfig>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002cae:	f000 fa91 	bl	80031d4 <Error_Handler>
  }
}
 8002cb2:	bf00      	nop
 8002cb4:	3750      	adds	r7, #80	@ 0x50
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	40007000 	.word	0x40007000

08002cc4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002cc8:	4b12      	ldr	r3, [pc, #72]	@ (8002d14 <MX_I2C1_Init+0x50>)
 8002cca:	4a13      	ldr	r2, [pc, #76]	@ (8002d18 <MX_I2C1_Init+0x54>)
 8002ccc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002cce:	4b11      	ldr	r3, [pc, #68]	@ (8002d14 <MX_I2C1_Init+0x50>)
 8002cd0:	4a12      	ldr	r2, [pc, #72]	@ (8002d1c <MX_I2C1_Init+0x58>)
 8002cd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8002d14 <MX_I2C1_Init+0x50>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002cda:	4b0e      	ldr	r3, [pc, #56]	@ (8002d14 <MX_I2C1_Init+0x50>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8002d14 <MX_I2C1_Init+0x50>)
 8002ce2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002ce6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8002d14 <MX_I2C1_Init+0x50>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002cee:	4b09      	ldr	r3, [pc, #36]	@ (8002d14 <MX_I2C1_Init+0x50>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002cf4:	4b07      	ldr	r3, [pc, #28]	@ (8002d14 <MX_I2C1_Init+0x50>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002cfa:	4b06      	ldr	r3, [pc, #24]	@ (8002d14 <MX_I2C1_Init+0x50>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d00:	4804      	ldr	r0, [pc, #16]	@ (8002d14 <MX_I2C1_Init+0x50>)
 8002d02:	f001 ff47 	bl	8004b94 <HAL_I2C_Init>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002d0c:	f000 fa62 	bl	80031d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d10:	bf00      	nop
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	20005260 	.word	0x20005260
 8002d18:	40005400 	.word	0x40005400
 8002d1c:	000186a0 	.word	0x000186a0

08002d20 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08c      	sub	sp, #48	@ 0x30
 8002d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002d26:	f107 030c 	add.w	r3, r7, #12
 8002d2a:	2224      	movs	r2, #36	@ 0x24
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f017 fa80 	bl	801a234 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d34:	1d3b      	adds	r3, r7, #4
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002d3c:	4b22      	ldr	r3, [pc, #136]	@ (8002dc8 <MX_TIM1_Init+0xa8>)
 8002d3e:	4a23      	ldr	r2, [pc, #140]	@ (8002dcc <MX_TIM1_Init+0xac>)
 8002d40:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002d42:	4b21      	ldr	r3, [pc, #132]	@ (8002dc8 <MX_TIM1_Init+0xa8>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d48:	4b1f      	ldr	r3, [pc, #124]	@ (8002dc8 <MX_TIM1_Init+0xa8>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8002dc8 <MX_TIM1_Init+0xa8>)
 8002d50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d54:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d56:	4b1c      	ldr	r3, [pc, #112]	@ (8002dc8 <MX_TIM1_Init+0xa8>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8002dc8 <MX_TIM1_Init+0xa8>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d62:	4b19      	ldr	r3, [pc, #100]	@ (8002dc8 <MX_TIM1_Init+0xa8>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002d70:	2301      	movs	r3, #1
 8002d72:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002d74:	2300      	movs	r3, #0
 8002d76:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002d80:	2301      	movs	r3, #1
 8002d82:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002d84:	2300      	movs	r3, #0
 8002d86:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002d8c:	f107 030c 	add.w	r3, r7, #12
 8002d90:	4619      	mov	r1, r3
 8002d92:	480d      	ldr	r0, [pc, #52]	@ (8002dc8 <MX_TIM1_Init+0xa8>)
 8002d94:	f002 ffae 	bl	8005cf4 <HAL_TIM_Encoder_Init>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002d9e:	f000 fa19 	bl	80031d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002da2:	2300      	movs	r3, #0
 8002da4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002da6:	2300      	movs	r3, #0
 8002da8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002daa:	1d3b      	adds	r3, r7, #4
 8002dac:	4619      	mov	r1, r3
 8002dae:	4806      	ldr	r0, [pc, #24]	@ (8002dc8 <MX_TIM1_Init+0xa8>)
 8002db0:	f003 fe8c 	bl	8006acc <HAL_TIMEx_MasterConfigSynchronization>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002dba:	f000 fa0b 	bl	80031d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002dbe:	bf00      	nop
 8002dc0:	3730      	adds	r7, #48	@ 0x30
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	200052b4 	.word	0x200052b4
 8002dcc:	40010000 	.word	0x40010000

08002dd0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dd6:	f107 0308 	add.w	r3, r7, #8
 8002dda:	2200      	movs	r2, #0
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	605a      	str	r2, [r3, #4]
 8002de0:	609a      	str	r2, [r3, #8]
 8002de2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002de4:	463b      	mov	r3, r7
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002dec:	4b1d      	ldr	r3, [pc, #116]	@ (8002e64 <MX_TIM4_Init+0x94>)
 8002dee:	4a1e      	ldr	r2, [pc, #120]	@ (8002e68 <MX_TIM4_Init+0x98>)
 8002df0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8002df2:	4b1c      	ldr	r3, [pc, #112]	@ (8002e64 <MX_TIM4_Init+0x94>)
 8002df4:	220f      	movs	r2, #15
 8002df6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002df8:	4b1a      	ldr	r3, [pc, #104]	@ (8002e64 <MX_TIM4_Init+0x94>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8002dfe:	4b19      	ldr	r3, [pc, #100]	@ (8002e64 <MX_TIM4_Init+0x94>)
 8002e00:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002e04:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e06:	4b17      	ldr	r3, [pc, #92]	@ (8002e64 <MX_TIM4_Init+0x94>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e0c:	4b15      	ldr	r3, [pc, #84]	@ (8002e64 <MX_TIM4_Init+0x94>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002e12:	4814      	ldr	r0, [pc, #80]	@ (8002e64 <MX_TIM4_Init+0x94>)
 8002e14:	f002 fd96 	bl	8005944 <HAL_TIM_Base_Init>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002e1e:	f000 f9d9 	bl	80031d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002e28:	f107 0308 	add.w	r3, r7, #8
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	480d      	ldr	r0, [pc, #52]	@ (8002e64 <MX_TIM4_Init+0x94>)
 8002e30:	f003 fa46 	bl	80062c0 <HAL_TIM_ConfigClockSource>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002e3a:	f000 f9cb 	bl	80031d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e42:	2300      	movs	r3, #0
 8002e44:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002e46:	463b      	mov	r3, r7
 8002e48:	4619      	mov	r1, r3
 8002e4a:	4806      	ldr	r0, [pc, #24]	@ (8002e64 <MX_TIM4_Init+0x94>)
 8002e4c:	f003 fe3e 	bl	8006acc <HAL_TIMEx_MasterConfigSynchronization>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002e56:	f000 f9bd 	bl	80031d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002e5a:	bf00      	nop
 8002e5c:	3718      	adds	r7, #24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	200052fc 	.word	0x200052fc
 8002e68:	40000800 	.word	0x40000800

08002e6c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08a      	sub	sp, #40	@ 0x28
 8002e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e72:	f107 0320 	add.w	r3, r7, #32
 8002e76:	2200      	movs	r2, #0
 8002e78:	601a      	str	r2, [r3, #0]
 8002e7a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e7c:	1d3b      	adds	r3, r7, #4
 8002e7e:	2200      	movs	r2, #0
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	605a      	str	r2, [r3, #4]
 8002e84:	609a      	str	r2, [r3, #8]
 8002e86:	60da      	str	r2, [r3, #12]
 8002e88:	611a      	str	r2, [r3, #16]
 8002e8a:	615a      	str	r2, [r3, #20]
 8002e8c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002e8e:	4b27      	ldr	r3, [pc, #156]	@ (8002f2c <MX_TIM5_Init+0xc0>)
 8002e90:	4a27      	ldr	r2, [pc, #156]	@ (8002f30 <MX_TIM5_Init+0xc4>)
 8002e92:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16-1;
 8002e94:	4b25      	ldr	r3, [pc, #148]	@ (8002f2c <MX_TIM5_Init+0xc0>)
 8002e96:	220f      	movs	r2, #15
 8002e98:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e9a:	4b24      	ldr	r3, [pc, #144]	@ (8002f2c <MX_TIM5_Init+0xc0>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000-1;
 8002ea0:	4b22      	ldr	r3, [pc, #136]	@ (8002f2c <MX_TIM5_Init+0xc0>)
 8002ea2:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002ea6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ea8:	4b20      	ldr	r3, [pc, #128]	@ (8002f2c <MX_TIM5_Init+0xc0>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eae:	4b1f      	ldr	r3, [pc, #124]	@ (8002f2c <MX_TIM5_Init+0xc0>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002eb4:	481d      	ldr	r0, [pc, #116]	@ (8002f2c <MX_TIM5_Init+0xc0>)
 8002eb6:	f002 fe05 	bl	8005ac4 <HAL_TIM_PWM_Init>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002ec0:	f000 f988 	bl	80031d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002ecc:	f107 0320 	add.w	r3, r7, #32
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4816      	ldr	r0, [pc, #88]	@ (8002f2c <MX_TIM5_Init+0xc0>)
 8002ed4:	f003 fdfa 	bl	8006acc <HAL_TIMEx_MasterConfigSynchronization>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8002ede:	f000 f979 	bl	80031d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ee2:	2360      	movs	r3, #96	@ 0x60
 8002ee4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002eea:	2300      	movs	r3, #0
 8002eec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ef2:	1d3b      	adds	r3, r7, #4
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	480c      	ldr	r0, [pc, #48]	@ (8002f2c <MX_TIM5_Init+0xc0>)
 8002efa:	f003 f91f 	bl	800613c <HAL_TIM_PWM_ConfigChannel>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002f04:	f000 f966 	bl	80031d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f08:	1d3b      	adds	r3, r7, #4
 8002f0a:	2204      	movs	r2, #4
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4807      	ldr	r0, [pc, #28]	@ (8002f2c <MX_TIM5_Init+0xc0>)
 8002f10:	f003 f914 	bl	800613c <HAL_TIM_PWM_ConfigChannel>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002f1a:	f000 f95b 	bl	80031d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002f1e:	4803      	ldr	r0, [pc, #12]	@ (8002f2c <MX_TIM5_Init+0xc0>)
 8002f20:	f000 fbde 	bl	80036e0 <HAL_TIM_MspPostInit>

}
 8002f24:	bf00      	nop
 8002f26:	3728      	adds	r7, #40	@ 0x28
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	20005344 	.word	0x20005344
 8002f30:	40000c00 	.word	0x40000c00

08002f34 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b088      	sub	sp, #32
 8002f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f3a:	1d3b      	adds	r3, r7, #4
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	605a      	str	r2, [r3, #4]
 8002f42:	609a      	str	r2, [r3, #8]
 8002f44:	60da      	str	r2, [r3, #12]
 8002f46:	611a      	str	r2, [r3, #16]
 8002f48:	615a      	str	r2, [r3, #20]
 8002f4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002f4c:	4b1f      	ldr	r3, [pc, #124]	@ (8002fcc <MX_TIM12_Init+0x98>)
 8002f4e:	4a20      	ldr	r2, [pc, #128]	@ (8002fd0 <MX_TIM12_Init+0x9c>)
 8002f50:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 16-1;
 8002f52:	4b1e      	ldr	r3, [pc, #120]	@ (8002fcc <MX_TIM12_Init+0x98>)
 8002f54:	220f      	movs	r2, #15
 8002f56:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f58:	4b1c      	ldr	r3, [pc, #112]	@ (8002fcc <MX_TIM12_Init+0x98>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 8002f5e:	4b1b      	ldr	r3, [pc, #108]	@ (8002fcc <MX_TIM12_Init+0x98>)
 8002f60:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002f64:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f66:	4b19      	ldr	r3, [pc, #100]	@ (8002fcc <MX_TIM12_Init+0x98>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f6c:	4b17      	ldr	r3, [pc, #92]	@ (8002fcc <MX_TIM12_Init+0x98>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002f72:	4816      	ldr	r0, [pc, #88]	@ (8002fcc <MX_TIM12_Init+0x98>)
 8002f74:	f002 fda6 	bl	8005ac4 <HAL_TIM_PWM_Init>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8002f7e:	f000 f929 	bl	80031d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f82:	2360      	movs	r3, #96	@ 0x60
 8002f84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002f86:	2300      	movs	r3, #0
 8002f88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f92:	1d3b      	adds	r3, r7, #4
 8002f94:	2200      	movs	r2, #0
 8002f96:	4619      	mov	r1, r3
 8002f98:	480c      	ldr	r0, [pc, #48]	@ (8002fcc <MX_TIM12_Init+0x98>)
 8002f9a:	f003 f8cf 	bl	800613c <HAL_TIM_PWM_ConfigChannel>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002fa4:	f000 f916 	bl	80031d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002fa8:	1d3b      	adds	r3, r7, #4
 8002faa:	2204      	movs	r2, #4
 8002fac:	4619      	mov	r1, r3
 8002fae:	4807      	ldr	r0, [pc, #28]	@ (8002fcc <MX_TIM12_Init+0x98>)
 8002fb0:	f003 f8c4 	bl	800613c <HAL_TIM_PWM_ConfigChannel>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8002fba:	f000 f90b 	bl	80031d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002fbe:	4803      	ldr	r0, [pc, #12]	@ (8002fcc <MX_TIM12_Init+0x98>)
 8002fc0:	f000 fb8e 	bl	80036e0 <HAL_TIM_MspPostInit>

}
 8002fc4:	bf00      	nop
 8002fc6:	3720      	adds	r7, #32
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	2000538c 	.word	0x2000538c
 8002fd0:	40001800 	.word	0x40001800

08002fd4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002fd8:	4b11      	ldr	r3, [pc, #68]	@ (8003020 <MX_USART2_UART_Init+0x4c>)
 8002fda:	4a12      	ldr	r2, [pc, #72]	@ (8003024 <MX_USART2_UART_Init+0x50>)
 8002fdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002fde:	4b10      	ldr	r3, [pc, #64]	@ (8003020 <MX_USART2_UART_Init+0x4c>)
 8002fe0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002fe4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8003020 <MX_USART2_UART_Init+0x4c>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002fec:	4b0c      	ldr	r3, [pc, #48]	@ (8003020 <MX_USART2_UART_Init+0x4c>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8003020 <MX_USART2_UART_Init+0x4c>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ff8:	4b09      	ldr	r3, [pc, #36]	@ (8003020 <MX_USART2_UART_Init+0x4c>)
 8002ffa:	220c      	movs	r2, #12
 8002ffc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ffe:	4b08      	ldr	r3, [pc, #32]	@ (8003020 <MX_USART2_UART_Init+0x4c>)
 8003000:	2200      	movs	r2, #0
 8003002:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003004:	4b06      	ldr	r3, [pc, #24]	@ (8003020 <MX_USART2_UART_Init+0x4c>)
 8003006:	2200      	movs	r2, #0
 8003008:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800300a:	4805      	ldr	r0, [pc, #20]	@ (8003020 <MX_USART2_UART_Init+0x4c>)
 800300c:	f003 fdee 	bl	8006bec <HAL_UART_Init>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003016:	f000 f8dd 	bl	80031d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800301a:	bf00      	nop
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	200053d4 	.word	0x200053d4
 8003024:	40004400 	.word	0x40004400

08003028 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800302c:	4b10      	ldr	r3, [pc, #64]	@ (8003070 <MX_USART3_UART_Init+0x48>)
 800302e:	4a11      	ldr	r2, [pc, #68]	@ (8003074 <MX_USART3_UART_Init+0x4c>)
 8003030:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 500000;
 8003032:	4b0f      	ldr	r3, [pc, #60]	@ (8003070 <MX_USART3_UART_Init+0x48>)
 8003034:	4a10      	ldr	r2, [pc, #64]	@ (8003078 <MX_USART3_UART_Init+0x50>)
 8003036:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003038:	4b0d      	ldr	r3, [pc, #52]	@ (8003070 <MX_USART3_UART_Init+0x48>)
 800303a:	2200      	movs	r2, #0
 800303c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800303e:	4b0c      	ldr	r3, [pc, #48]	@ (8003070 <MX_USART3_UART_Init+0x48>)
 8003040:	2200      	movs	r2, #0
 8003042:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003044:	4b0a      	ldr	r3, [pc, #40]	@ (8003070 <MX_USART3_UART_Init+0x48>)
 8003046:	2200      	movs	r2, #0
 8003048:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800304a:	4b09      	ldr	r3, [pc, #36]	@ (8003070 <MX_USART3_UART_Init+0x48>)
 800304c:	220c      	movs	r2, #12
 800304e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003050:	4b07      	ldr	r3, [pc, #28]	@ (8003070 <MX_USART3_UART_Init+0x48>)
 8003052:	2200      	movs	r2, #0
 8003054:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003056:	4b06      	ldr	r3, [pc, #24]	@ (8003070 <MX_USART3_UART_Init+0x48>)
 8003058:	2200      	movs	r2, #0
 800305a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800305c:	4804      	ldr	r0, [pc, #16]	@ (8003070 <MX_USART3_UART_Init+0x48>)
 800305e:	f003 fdc5 	bl	8006bec <HAL_UART_Init>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8003068:	f000 f8b4 	bl	80031d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800306c:	bf00      	nop
 800306e:	bd80      	pop	{r7, pc}
 8003070:	2000541c 	.word	0x2000541c
 8003074:	40004800 	.word	0x40004800
 8003078:	0007a120 	.word	0x0007a120

0800307c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003082:	2300      	movs	r3, #0
 8003084:	607b      	str	r3, [r7, #4]
 8003086:	4b10      	ldr	r3, [pc, #64]	@ (80030c8 <MX_DMA_Init+0x4c>)
 8003088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308a:	4a0f      	ldr	r2, [pc, #60]	@ (80030c8 <MX_DMA_Init+0x4c>)
 800308c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003090:	6313      	str	r3, [r2, #48]	@ 0x30
 8003092:	4b0d      	ldr	r3, [pc, #52]	@ (80030c8 <MX_DMA_Init+0x4c>)
 8003094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003096:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800309a:	607b      	str	r3, [r7, #4]
 800309c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800309e:	2200      	movs	r2, #0
 80030a0:	2105      	movs	r1, #5
 80030a2:	2010      	movs	r0, #16
 80030a4:	f000 ff9c 	bl	8003fe0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80030a8:	2010      	movs	r0, #16
 80030aa:	f000 ffb5 	bl	8004018 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80030ae:	2200      	movs	r2, #0
 80030b0:	2105      	movs	r1, #5
 80030b2:	2011      	movs	r0, #17
 80030b4:	f000 ff94 	bl	8003fe0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80030b8:	2011      	movs	r0, #17
 80030ba:	f000 ffad 	bl	8004018 <HAL_NVIC_EnableIRQ>

}
 80030be:	bf00      	nop
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	40023800 	.word	0x40023800

080030cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b08a      	sub	sp, #40	@ 0x28
 80030d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d2:	f107 0314 	add.w	r3, r7, #20
 80030d6:	2200      	movs	r2, #0
 80030d8:	601a      	str	r2, [r3, #0]
 80030da:	605a      	str	r2, [r3, #4]
 80030dc:	609a      	str	r2, [r3, #8]
 80030de:	60da      	str	r2, [r3, #12]
 80030e0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030e2:	2300      	movs	r3, #0
 80030e4:	613b      	str	r3, [r7, #16]
 80030e6:	4b37      	ldr	r3, [pc, #220]	@ (80031c4 <MX_GPIO_Init+0xf8>)
 80030e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ea:	4a36      	ldr	r2, [pc, #216]	@ (80031c4 <MX_GPIO_Init+0xf8>)
 80030ec:	f043 0301 	orr.w	r3, r3, #1
 80030f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80030f2:	4b34      	ldr	r3, [pc, #208]	@ (80031c4 <MX_GPIO_Init+0xf8>)
 80030f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	613b      	str	r3, [r7, #16]
 80030fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030fe:	2300      	movs	r3, #0
 8003100:	60fb      	str	r3, [r7, #12]
 8003102:	4b30      	ldr	r3, [pc, #192]	@ (80031c4 <MX_GPIO_Init+0xf8>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003106:	4a2f      	ldr	r2, [pc, #188]	@ (80031c4 <MX_GPIO_Init+0xf8>)
 8003108:	f043 0304 	orr.w	r3, r3, #4
 800310c:	6313      	str	r3, [r2, #48]	@ 0x30
 800310e:	4b2d      	ldr	r3, [pc, #180]	@ (80031c4 <MX_GPIO_Init+0xf8>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003112:	f003 0304 	and.w	r3, r3, #4
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800311a:	2300      	movs	r3, #0
 800311c:	60bb      	str	r3, [r7, #8]
 800311e:	4b29      	ldr	r3, [pc, #164]	@ (80031c4 <MX_GPIO_Init+0xf8>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003122:	4a28      	ldr	r2, [pc, #160]	@ (80031c4 <MX_GPIO_Init+0xf8>)
 8003124:	f043 0302 	orr.w	r3, r3, #2
 8003128:	6313      	str	r3, [r2, #48]	@ 0x30
 800312a:	4b26      	ldr	r3, [pc, #152]	@ (80031c4 <MX_GPIO_Init+0xf8>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	60bb      	str	r3, [r7, #8]
 8003134:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003136:	2300      	movs	r3, #0
 8003138:	607b      	str	r3, [r7, #4]
 800313a:	4b22      	ldr	r3, [pc, #136]	@ (80031c4 <MX_GPIO_Init+0xf8>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313e:	4a21      	ldr	r2, [pc, #132]	@ (80031c4 <MX_GPIO_Init+0xf8>)
 8003140:	f043 0308 	orr.w	r3, r3, #8
 8003144:	6313      	str	r3, [r2, #48]	@ 0x30
 8003146:	4b1f      	ldr	r3, [pc, #124]	@ (80031c4 <MX_GPIO_Init+0xf8>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314a:	f003 0308 	and.w	r3, r3, #8
 800314e:	607b      	str	r3, [r7, #4]
 8003150:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8003152:	2200      	movs	r2, #0
 8003154:	2110      	movs	r1, #16
 8003156:	481c      	ldr	r0, [pc, #112]	@ (80031c8 <MX_GPIO_Init+0xfc>)
 8003158:	f001 fd02 	bl	8004b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800315c:	2200      	movs	r2, #0
 800315e:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8003162:	481a      	ldr	r0, [pc, #104]	@ (80031cc <MX_GPIO_Init+0x100>)
 8003164:	f001 fcfc 	bl	8004b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003168:	2310      	movs	r3, #16
 800316a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800316c:	2301      	movs	r3, #1
 800316e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003170:	2300      	movs	r3, #0
 8003172:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003174:	2300      	movs	r3, #0
 8003176:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003178:	f107 0314 	add.w	r3, r7, #20
 800317c:	4619      	mov	r1, r3
 800317e:	4812      	ldr	r0, [pc, #72]	@ (80031c8 <MX_GPIO_Init+0xfc>)
 8003180:	f001 fb5a 	bl	8004838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003184:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003188:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800318a:	2301      	movs	r3, #1
 800318c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318e:	2300      	movs	r3, #0
 8003190:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003192:	2300      	movs	r3, #0
 8003194:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003196:	f107 0314 	add.w	r3, r7, #20
 800319a:	4619      	mov	r1, r3
 800319c:	480b      	ldr	r0, [pc, #44]	@ (80031cc <MX_GPIO_Init+0x100>)
 800319e:	f001 fb4b 	bl	8004838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80031a2:	2304      	movs	r3, #4
 80031a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80031a6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80031aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ac:	2300      	movs	r3, #0
 80031ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031b0:	f107 0314 	add.w	r3, r7, #20
 80031b4:	4619      	mov	r1, r3
 80031b6:	4806      	ldr	r0, [pc, #24]	@ (80031d0 <MX_GPIO_Init+0x104>)
 80031b8:	f001 fb3e 	bl	8004838 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80031bc:	bf00      	nop
 80031be:	3728      	adds	r7, #40	@ 0x28
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40023800 	.word	0x40023800
 80031c8:	40020800 	.word	0x40020800
 80031cc:	40020400 	.word	0x40020400
 80031d0:	40020c00 	.word	0x40020c00

080031d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80031d8:	b672      	cpsid	i
}
 80031da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031dc:	bf00      	nop
 80031de:	e7fd      	b.n	80031dc <Error_Handler+0x8>

080031e0 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80031ea:	4b0c      	ldr	r3, [pc, #48]	@ (800321c <microros_allocate+0x3c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	461a      	mov	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4413      	add	r3, r2
 80031f4:	461a      	mov	r2, r3
 80031f6:	4b09      	ldr	r3, [pc, #36]	@ (800321c <microros_allocate+0x3c>)
 80031f8:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80031fa:	4b09      	ldr	r3, [pc, #36]	@ (8003220 <microros_allocate+0x40>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	461a      	mov	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4413      	add	r3, r2
 8003204:	461a      	mov	r2, r3
 8003206:	4b06      	ldr	r3, [pc, #24]	@ (8003220 <microros_allocate+0x40>)
 8003208:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7ff f9d0 	bl	80025b0 <pvPortMallocMicroROS>
 8003210:	4603      	mov	r3, r0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	20008464 	.word	0x20008464
 8003220:	20008468 	.word	0x20008468

08003224 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00c      	beq.n	800324e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7ff fadf 	bl	80027f8 <getBlockSize>
 800323a:	4603      	mov	r3, r0
 800323c:	4a06      	ldr	r2, [pc, #24]	@ (8003258 <microros_deallocate+0x34>)
 800323e:	6812      	ldr	r2, [r2, #0]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	461a      	mov	r2, r3
 8003244:	4b04      	ldr	r3, [pc, #16]	@ (8003258 <microros_deallocate+0x34>)
 8003246:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7ff fa79 	bl	8002740 <vPortFreeMicroROS>
  }
}
 800324e:	bf00      	nop
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	20008468 	.word	0x20008468

0800325c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8003268:	4b15      	ldr	r3, [pc, #84]	@ (80032c0 <microros_reallocate+0x64>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	461a      	mov	r2, r3
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	4413      	add	r3, r2
 8003272:	461a      	mov	r2, r3
 8003274:	4b12      	ldr	r3, [pc, #72]	@ (80032c0 <microros_reallocate+0x64>)
 8003276:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8003278:	4b12      	ldr	r3, [pc, #72]	@ (80032c4 <microros_reallocate+0x68>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	461a      	mov	r2, r3
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	4413      	add	r3, r2
 8003282:	461a      	mov	r2, r3
 8003284:	4b0f      	ldr	r3, [pc, #60]	@ (80032c4 <microros_reallocate+0x68>)
 8003286:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d104      	bne.n	8003298 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800328e:	68b8      	ldr	r0, [r7, #8]
 8003290:	f7ff f98e 	bl	80025b0 <pvPortMallocMicroROS>
 8003294:	4603      	mov	r3, r0
 8003296:	e00e      	b.n	80032b6 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f7ff faad 	bl	80027f8 <getBlockSize>
 800329e:	4603      	mov	r3, r0
 80032a0:	4a08      	ldr	r2, [pc, #32]	@ (80032c4 <microros_reallocate+0x68>)
 80032a2:	6812      	ldr	r2, [r2, #0]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	461a      	mov	r2, r3
 80032a8:	4b06      	ldr	r3, [pc, #24]	@ (80032c4 <microros_reallocate+0x68>)
 80032aa:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80032ac:	68b9      	ldr	r1, [r7, #8]
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f7ff fac0 	bl	8002834 <pvPortReallocMicroROS>
 80032b4:	4603      	mov	r3, r0
  }
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	20008464 	.word	0x20008464
 80032c4:	20008468 	.word	0x20008468

080032c8 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	fb02 f303 	mul.w	r3, r2, r3
 80032dc:	4a0c      	ldr	r2, [pc, #48]	@ (8003310 <microros_zero_allocate+0x48>)
 80032de:	6812      	ldr	r2, [r2, #0]
 80032e0:	4413      	add	r3, r2
 80032e2:	461a      	mov	r2, r3
 80032e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003310 <microros_zero_allocate+0x48>)
 80032e6:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	68ba      	ldr	r2, [r7, #8]
 80032ec:	fb02 f303 	mul.w	r3, r2, r3
 80032f0:	4a08      	ldr	r2, [pc, #32]	@ (8003314 <microros_zero_allocate+0x4c>)
 80032f2:	6812      	ldr	r2, [r2, #0]
 80032f4:	4413      	add	r3, r2
 80032f6:	461a      	mov	r2, r3
 80032f8:	4b06      	ldr	r3, [pc, #24]	@ (8003314 <microros_zero_allocate+0x4c>)
 80032fa:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80032fc:	68b9      	ldr	r1, [r7, #8]
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f7ff fac5 	bl	800288e <pvPortCallocMicroROS>
 8003304:	4603      	mov	r3, r0
 8003306:	4618      	mov	r0, r3
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	20008464 	.word	0x20008464
 8003314:	20008468 	.word	0x20008468

08003318 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8003318:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800331c:	b086      	sub	sp, #24
 800331e:	af00      	add	r7, sp, #0
 8003320:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003324:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8003326:	2300      	movs	r3, #0
 8003328:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800332a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800332e:	a320      	add	r3, pc, #128	@ (adr r3, 80033b0 <UTILS_NanosecondsToTimespec+0x98>)
 8003330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003334:	f7fd fc7a 	bl	8000c2c <__aeabi_ldivmod>
 8003338:	4602      	mov	r2, r0
 800333a:	460b      	mov	r3, r1
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8003342:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003346:	a31a      	add	r3, pc, #104	@ (adr r3, 80033b0 <UTILS_NanosecondsToTimespec+0x98>)
 8003348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334c:	f7fd fc6e 	bl	8000c2c <__aeabi_ldivmod>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	2b00      	cmp	r3, #0
 800335a:	da20      	bge.n	800339e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	4a11      	ldr	r2, [pc, #68]	@ (80033a8 <UTILS_NanosecondsToTimespec+0x90>)
 8003362:	fb82 1203 	smull	r1, r2, r2, r3
 8003366:	1712      	asrs	r2, r2, #28
 8003368:	17db      	asrs	r3, r3, #31
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	3301      	adds	r3, #1
 800336e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003376:	6979      	ldr	r1, [r7, #20]
 8003378:	17c8      	asrs	r0, r1, #31
 800337a:	460c      	mov	r4, r1
 800337c:	4605      	mov	r5, r0
 800337e:	ebb2 0804 	subs.w	r8, r2, r4
 8003382:	eb63 0905 	sbc.w	r9, r3, r5
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	4906      	ldr	r1, [pc, #24]	@ (80033ac <UTILS_NanosecondsToTimespec+0x94>)
 8003394:	fb01 f303 	mul.w	r3, r1, r3
 8003398:	441a      	add	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	609a      	str	r2, [r3, #8]
    }
}
 800339e:	bf00      	nop
 80033a0:	3718      	adds	r7, #24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80033a8:	44b82fa1 	.word	0x44b82fa1
 80033ac:	3b9aca00 	.word	0x3b9aca00
 80033b0:	3b9aca00 	.word	0x3b9aca00
 80033b4:	00000000 	.word	0x00000000

080033b8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80033b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033bc:	b08e      	sub	sp, #56	@ 0x38
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80033c2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80033c4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80033c8:	2300      	movs	r3, #0
 80033ca:	6013      	str	r3, [r2, #0]
 80033cc:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80033ce:	f04f 0200 	mov.w	r2, #0
 80033d2:	f04f 0300 	mov.w	r3, #0
 80033d6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80033da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80033de:	4618      	mov	r0, r3
 80033e0:	f006 fb62 	bl	8009aa8 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80033e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033e6:	17da      	asrs	r2, r3, #31
 80033e8:	61bb      	str	r3, [r7, #24]
 80033ea:	61fa      	str	r2, [r7, #28]
 80033ec:	f04f 0200 	mov.w	r2, #0
 80033f0:	f04f 0300 	mov.w	r3, #0
 80033f4:	69b9      	ldr	r1, [r7, #24]
 80033f6:	000b      	movs	r3, r1
 80033f8:	2200      	movs	r2, #0
 80033fa:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80033fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003400:	2200      	movs	r2, #0
 8003402:	461c      	mov	r4, r3
 8003404:	4615      	mov	r5, r2
 8003406:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800340a:	1911      	adds	r1, r2, r4
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	416b      	adcs	r3, r5
 8003410:	60fb      	str	r3, [r7, #12]
 8003412:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003416:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800341a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800341e:	4602      	mov	r2, r0
 8003420:	460b      	mov	r3, r1
 8003422:	f04f 0400 	mov.w	r4, #0
 8003426:	f04f 0500 	mov.w	r5, #0
 800342a:	015d      	lsls	r5, r3, #5
 800342c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8003430:	0154      	lsls	r4, r2, #5
 8003432:	4622      	mov	r2, r4
 8003434:	462b      	mov	r3, r5
 8003436:	ebb2 0800 	subs.w	r8, r2, r0
 800343a:	eb63 0901 	sbc.w	r9, r3, r1
 800343e:	f04f 0200 	mov.w	r2, #0
 8003442:	f04f 0300 	mov.w	r3, #0
 8003446:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800344a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800344e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8003452:	4690      	mov	r8, r2
 8003454:	4699      	mov	r9, r3
 8003456:	eb18 0a00 	adds.w	sl, r8, r0
 800345a:	eb49 0b01 	adc.w	fp, r9, r1
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	f04f 0300 	mov.w	r3, #0
 8003466:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800346a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800346e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003472:	ebb2 040a 	subs.w	r4, r2, sl
 8003476:	603c      	str	r4, [r7, #0]
 8003478:	eb63 030b 	sbc.w	r3, r3, fp
 800347c:	607b      	str	r3, [r7, #4]
 800347e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003482:	4623      	mov	r3, r4
 8003484:	181b      	adds	r3, r3, r0
 8003486:	613b      	str	r3, [r7, #16]
 8003488:	462b      	mov	r3, r5
 800348a:	eb41 0303 	adc.w	r3, r1, r3
 800348e:	617b      	str	r3, [r7, #20]
 8003490:	6a3a      	ldr	r2, [r7, #32]
 8003492:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003496:	f7ff ff3f 	bl	8003318 <UTILS_NanosecondsToTimespec>

    return 0;
 800349a:	2300      	movs	r3, #0
 800349c:	4618      	mov	r0, r3
 800349e:	3738      	adds	r7, #56	@ 0x38
 80034a0:	46bd      	mov	sp, r7
 80034a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080034a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ae:	2300      	movs	r3, #0
 80034b0:	607b      	str	r3, [r7, #4]
 80034b2:	4b12      	ldr	r3, [pc, #72]	@ (80034fc <HAL_MspInit+0x54>)
 80034b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034b6:	4a11      	ldr	r2, [pc, #68]	@ (80034fc <HAL_MspInit+0x54>)
 80034b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80034be:	4b0f      	ldr	r3, [pc, #60]	@ (80034fc <HAL_MspInit+0x54>)
 80034c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034c6:	607b      	str	r3, [r7, #4]
 80034c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034ca:	2300      	movs	r3, #0
 80034cc:	603b      	str	r3, [r7, #0]
 80034ce:	4b0b      	ldr	r3, [pc, #44]	@ (80034fc <HAL_MspInit+0x54>)
 80034d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d2:	4a0a      	ldr	r2, [pc, #40]	@ (80034fc <HAL_MspInit+0x54>)
 80034d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80034da:	4b08      	ldr	r3, [pc, #32]	@ (80034fc <HAL_MspInit+0x54>)
 80034dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034e2:	603b      	str	r3, [r7, #0]
 80034e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80034e6:	2200      	movs	r2, #0
 80034e8:	210f      	movs	r1, #15
 80034ea:	f06f 0001 	mvn.w	r0, #1
 80034ee:	f000 fd77 	bl	8003fe0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034f2:	bf00      	nop
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40023800 	.word	0x40023800

08003500 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b08a      	sub	sp, #40	@ 0x28
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003508:	f107 0314 	add.w	r3, r7, #20
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	605a      	str	r2, [r3, #4]
 8003512:	609a      	str	r2, [r3, #8]
 8003514:	60da      	str	r2, [r3, #12]
 8003516:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a19      	ldr	r2, [pc, #100]	@ (8003584 <HAL_I2C_MspInit+0x84>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d12b      	bne.n	800357a <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003522:	2300      	movs	r3, #0
 8003524:	613b      	str	r3, [r7, #16]
 8003526:	4b18      	ldr	r3, [pc, #96]	@ (8003588 <HAL_I2C_MspInit+0x88>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352a:	4a17      	ldr	r2, [pc, #92]	@ (8003588 <HAL_I2C_MspInit+0x88>)
 800352c:	f043 0302 	orr.w	r3, r3, #2
 8003530:	6313      	str	r3, [r2, #48]	@ 0x30
 8003532:	4b15      	ldr	r3, [pc, #84]	@ (8003588 <HAL_I2C_MspInit+0x88>)
 8003534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	613b      	str	r3, [r7, #16]
 800353c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800353e:	23c0      	movs	r3, #192	@ 0xc0
 8003540:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003542:	2312      	movs	r3, #18
 8003544:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003546:	2300      	movs	r3, #0
 8003548:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800354a:	2303      	movs	r3, #3
 800354c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800354e:	2304      	movs	r3, #4
 8003550:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003552:	f107 0314 	add.w	r3, r7, #20
 8003556:	4619      	mov	r1, r3
 8003558:	480c      	ldr	r0, [pc, #48]	@ (800358c <HAL_I2C_MspInit+0x8c>)
 800355a:	f001 f96d 	bl	8004838 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800355e:	2300      	movs	r3, #0
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	4b09      	ldr	r3, [pc, #36]	@ (8003588 <HAL_I2C_MspInit+0x88>)
 8003564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003566:	4a08      	ldr	r2, [pc, #32]	@ (8003588 <HAL_I2C_MspInit+0x88>)
 8003568:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800356c:	6413      	str	r3, [r2, #64]	@ 0x40
 800356e:	4b06      	ldr	r3, [pc, #24]	@ (8003588 <HAL_I2C_MspInit+0x88>)
 8003570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003572:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800357a:	bf00      	nop
 800357c:	3728      	adds	r7, #40	@ 0x28
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40005400 	.word	0x40005400
 8003588:	40023800 	.word	0x40023800
 800358c:	40020400 	.word	0x40020400

08003590 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08a      	sub	sp, #40	@ 0x28
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003598:	f107 0314 	add.w	r3, r7, #20
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	605a      	str	r2, [r3, #4]
 80035a2:	609a      	str	r2, [r3, #8]
 80035a4:	60da      	str	r2, [r3, #12]
 80035a6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a19      	ldr	r2, [pc, #100]	@ (8003614 <HAL_TIM_Encoder_MspInit+0x84>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d12c      	bne.n	800360c <HAL_TIM_Encoder_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80035b2:	2300      	movs	r3, #0
 80035b4:	613b      	str	r3, [r7, #16]
 80035b6:	4b18      	ldr	r3, [pc, #96]	@ (8003618 <HAL_TIM_Encoder_MspInit+0x88>)
 80035b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ba:	4a17      	ldr	r2, [pc, #92]	@ (8003618 <HAL_TIM_Encoder_MspInit+0x88>)
 80035bc:	f043 0301 	orr.w	r3, r3, #1
 80035c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80035c2:	4b15      	ldr	r3, [pc, #84]	@ (8003618 <HAL_TIM_Encoder_MspInit+0x88>)
 80035c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	613b      	str	r3, [r7, #16]
 80035cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ce:	2300      	movs	r3, #0
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	4b11      	ldr	r3, [pc, #68]	@ (8003618 <HAL_TIM_Encoder_MspInit+0x88>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d6:	4a10      	ldr	r2, [pc, #64]	@ (8003618 <HAL_TIM_Encoder_MspInit+0x88>)
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80035de:	4b0e      	ldr	r3, [pc, #56]	@ (8003618 <HAL_TIM_Encoder_MspInit+0x88>)
 80035e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	60fb      	str	r3, [r7, #12]
 80035e8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80035ea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80035ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f0:	2302      	movs	r3, #2
 80035f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f4:	2300      	movs	r3, #0
 80035f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f8:	2300      	movs	r3, #0
 80035fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80035fc:	2301      	movs	r3, #1
 80035fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003600:	f107 0314 	add.w	r3, r7, #20
 8003604:	4619      	mov	r1, r3
 8003606:	4805      	ldr	r0, [pc, #20]	@ (800361c <HAL_TIM_Encoder_MspInit+0x8c>)
 8003608:	f001 f916 	bl	8004838 <HAL_GPIO_Init>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800360c:	bf00      	nop
 800360e:	3728      	adds	r7, #40	@ 0x28
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40010000 	.word	0x40010000
 8003618:	40023800 	.word	0x40023800
 800361c:	40020000 	.word	0x40020000

08003620 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a0e      	ldr	r2, [pc, #56]	@ (8003668 <HAL_TIM_Base_MspInit+0x48>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d115      	bne.n	800365e <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003632:	2300      	movs	r3, #0
 8003634:	60fb      	str	r3, [r7, #12]
 8003636:	4b0d      	ldr	r3, [pc, #52]	@ (800366c <HAL_TIM_Base_MspInit+0x4c>)
 8003638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363a:	4a0c      	ldr	r2, [pc, #48]	@ (800366c <HAL_TIM_Base_MspInit+0x4c>)
 800363c:	f043 0304 	orr.w	r3, r3, #4
 8003640:	6413      	str	r3, [r2, #64]	@ 0x40
 8003642:	4b0a      	ldr	r3, [pc, #40]	@ (800366c <HAL_TIM_Base_MspInit+0x4c>)
 8003644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003646:	f003 0304 	and.w	r3, r3, #4
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800364e:	2200      	movs	r2, #0
 8003650:	2105      	movs	r1, #5
 8003652:	201e      	movs	r0, #30
 8003654:	f000 fcc4 	bl	8003fe0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003658:	201e      	movs	r0, #30
 800365a:	f000 fcdd 	bl	8004018 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 800365e:	bf00      	nop
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40000800 	.word	0x40000800
 800366c:	40023800 	.word	0x40023800

08003670 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a15      	ldr	r2, [pc, #84]	@ (80036d4 <HAL_TIM_PWM_MspInit+0x64>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d10e      	bne.n	80036a0 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003682:	2300      	movs	r3, #0
 8003684:	60fb      	str	r3, [r7, #12]
 8003686:	4b14      	ldr	r3, [pc, #80]	@ (80036d8 <HAL_TIM_PWM_MspInit+0x68>)
 8003688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368a:	4a13      	ldr	r2, [pc, #76]	@ (80036d8 <HAL_TIM_PWM_MspInit+0x68>)
 800368c:	f043 0308 	orr.w	r3, r3, #8
 8003690:	6413      	str	r3, [r2, #64]	@ 0x40
 8003692:	4b11      	ldr	r3, [pc, #68]	@ (80036d8 <HAL_TIM_PWM_MspInit+0x68>)
 8003694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003696:	f003 0308 	and.w	r3, r3, #8
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM12_MspInit 1 */

    /* USER CODE END TIM12_MspInit 1 */
  }

}
 800369e:	e012      	b.n	80036c6 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM12)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a0d      	ldr	r2, [pc, #52]	@ (80036dc <HAL_TIM_PWM_MspInit+0x6c>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d10d      	bne.n	80036c6 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80036aa:	2300      	movs	r3, #0
 80036ac:	60bb      	str	r3, [r7, #8]
 80036ae:	4b0a      	ldr	r3, [pc, #40]	@ (80036d8 <HAL_TIM_PWM_MspInit+0x68>)
 80036b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b2:	4a09      	ldr	r2, [pc, #36]	@ (80036d8 <HAL_TIM_PWM_MspInit+0x68>)
 80036b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80036ba:	4b07      	ldr	r3, [pc, #28]	@ (80036d8 <HAL_TIM_PWM_MspInit+0x68>)
 80036bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036c2:	60bb      	str	r3, [r7, #8]
 80036c4:	68bb      	ldr	r3, [r7, #8]
}
 80036c6:	bf00      	nop
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	40000c00 	.word	0x40000c00
 80036d8:	40023800 	.word	0x40023800
 80036dc:	40001800 	.word	0x40001800

080036e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08a      	sub	sp, #40	@ 0x28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e8:	f107 0314 	add.w	r3, r7, #20
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	605a      	str	r2, [r3, #4]
 80036f2:	609a      	str	r2, [r3, #8]
 80036f4:	60da      	str	r2, [r3, #12]
 80036f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a24      	ldr	r2, [pc, #144]	@ (8003790 <HAL_TIM_MspPostInit+0xb0>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d11e      	bne.n	8003740 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM5_MspPostInit 0 */

    /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003702:	2300      	movs	r3, #0
 8003704:	613b      	str	r3, [r7, #16]
 8003706:	4b23      	ldr	r3, [pc, #140]	@ (8003794 <HAL_TIM_MspPostInit+0xb4>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370a:	4a22      	ldr	r2, [pc, #136]	@ (8003794 <HAL_TIM_MspPostInit+0xb4>)
 800370c:	f043 0301 	orr.w	r3, r3, #1
 8003710:	6313      	str	r3, [r2, #48]	@ 0x30
 8003712:	4b20      	ldr	r3, [pc, #128]	@ (8003794 <HAL_TIM_MspPostInit+0xb4>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	613b      	str	r3, [r7, #16]
 800371c:	693b      	ldr	r3, [r7, #16]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800371e:	2303      	movs	r3, #3
 8003720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003722:	2302      	movs	r3, #2
 8003724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003726:	2300      	movs	r3, #0
 8003728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800372a:	2300      	movs	r3, #0
 800372c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800372e:	2302      	movs	r3, #2
 8003730:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003732:	f107 0314 	add.w	r3, r7, #20
 8003736:	4619      	mov	r1, r3
 8003738:	4817      	ldr	r0, [pc, #92]	@ (8003798 <HAL_TIM_MspPostInit+0xb8>)
 800373a:	f001 f87d 	bl	8004838 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM12_MspPostInit 1 */

    /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800373e:	e023      	b.n	8003788 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM12)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a15      	ldr	r2, [pc, #84]	@ (800379c <HAL_TIM_MspPostInit+0xbc>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d11e      	bne.n	8003788 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800374a:	2300      	movs	r3, #0
 800374c:	60fb      	str	r3, [r7, #12]
 800374e:	4b11      	ldr	r3, [pc, #68]	@ (8003794 <HAL_TIM_MspPostInit+0xb4>)
 8003750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003752:	4a10      	ldr	r2, [pc, #64]	@ (8003794 <HAL_TIM_MspPostInit+0xb4>)
 8003754:	f043 0302 	orr.w	r3, r3, #2
 8003758:	6313      	str	r3, [r2, #48]	@ 0x30
 800375a:	4b0e      	ldr	r3, [pc, #56]	@ (8003794 <HAL_TIM_MspPostInit+0xb4>)
 800375c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	60fb      	str	r3, [r7, #12]
 8003764:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003766:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800376a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800376c:	2302      	movs	r3, #2
 800376e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003770:	2300      	movs	r3, #0
 8003772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003774:	2300      	movs	r3, #0
 8003776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003778:	2309      	movs	r3, #9
 800377a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800377c:	f107 0314 	add.w	r3, r7, #20
 8003780:	4619      	mov	r1, r3
 8003782:	4807      	ldr	r0, [pc, #28]	@ (80037a0 <HAL_TIM_MspPostInit+0xc0>)
 8003784:	f001 f858 	bl	8004838 <HAL_GPIO_Init>
}
 8003788:	bf00      	nop
 800378a:	3728      	adds	r7, #40	@ 0x28
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40000c00 	.word	0x40000c00
 8003794:	40023800 	.word	0x40023800
 8003798:	40020000 	.word	0x40020000
 800379c:	40001800 	.word	0x40001800
 80037a0:	40020400 	.word	0x40020400

080037a4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b08c      	sub	sp, #48	@ 0x30
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037ac:	f107 031c 	add.w	r3, r7, #28
 80037b0:	2200      	movs	r2, #0
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	605a      	str	r2, [r3, #4]
 80037b6:	609a      	str	r2, [r3, #8]
 80037b8:	60da      	str	r2, [r3, #12]
 80037ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a75      	ldr	r2, [pc, #468]	@ (8003998 <HAL_UART_MspInit+0x1f4>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	f040 8094 	bne.w	80038f0 <HAL_UART_MspInit+0x14c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80037c8:	2300      	movs	r3, #0
 80037ca:	61bb      	str	r3, [r7, #24]
 80037cc:	4b73      	ldr	r3, [pc, #460]	@ (800399c <HAL_UART_MspInit+0x1f8>)
 80037ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d0:	4a72      	ldr	r2, [pc, #456]	@ (800399c <HAL_UART_MspInit+0x1f8>)
 80037d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80037d8:	4b70      	ldr	r3, [pc, #448]	@ (800399c <HAL_UART_MspInit+0x1f8>)
 80037da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037e0:	61bb      	str	r3, [r7, #24]
 80037e2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037e4:	2300      	movs	r3, #0
 80037e6:	617b      	str	r3, [r7, #20]
 80037e8:	4b6c      	ldr	r3, [pc, #432]	@ (800399c <HAL_UART_MspInit+0x1f8>)
 80037ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ec:	4a6b      	ldr	r2, [pc, #428]	@ (800399c <HAL_UART_MspInit+0x1f8>)
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80037f4:	4b69      	ldr	r3, [pc, #420]	@ (800399c <HAL_UART_MspInit+0x1f8>)
 80037f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	617b      	str	r3, [r7, #20]
 80037fe:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003800:	230c      	movs	r3, #12
 8003802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003804:	2302      	movs	r3, #2
 8003806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003808:	2300      	movs	r3, #0
 800380a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800380c:	2303      	movs	r3, #3
 800380e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003810:	2307      	movs	r3, #7
 8003812:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003814:	f107 031c 	add.w	r3, r7, #28
 8003818:	4619      	mov	r1, r3
 800381a:	4861      	ldr	r0, [pc, #388]	@ (80039a0 <HAL_UART_MspInit+0x1fc>)
 800381c:	f001 f80c 	bl	8004838 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003820:	4b60      	ldr	r3, [pc, #384]	@ (80039a4 <HAL_UART_MspInit+0x200>)
 8003822:	4a61      	ldr	r2, [pc, #388]	@ (80039a8 <HAL_UART_MspInit+0x204>)
 8003824:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003826:	4b5f      	ldr	r3, [pc, #380]	@ (80039a4 <HAL_UART_MspInit+0x200>)
 8003828:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800382c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800382e:	4b5d      	ldr	r3, [pc, #372]	@ (80039a4 <HAL_UART_MspInit+0x200>)
 8003830:	2200      	movs	r2, #0
 8003832:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003834:	4b5b      	ldr	r3, [pc, #364]	@ (80039a4 <HAL_UART_MspInit+0x200>)
 8003836:	2200      	movs	r2, #0
 8003838:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800383a:	4b5a      	ldr	r3, [pc, #360]	@ (80039a4 <HAL_UART_MspInit+0x200>)
 800383c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003840:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003842:	4b58      	ldr	r3, [pc, #352]	@ (80039a4 <HAL_UART_MspInit+0x200>)
 8003844:	2200      	movs	r2, #0
 8003846:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003848:	4b56      	ldr	r3, [pc, #344]	@ (80039a4 <HAL_UART_MspInit+0x200>)
 800384a:	2200      	movs	r2, #0
 800384c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800384e:	4b55      	ldr	r3, [pc, #340]	@ (80039a4 <HAL_UART_MspInit+0x200>)
 8003850:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003854:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003856:	4b53      	ldr	r3, [pc, #332]	@ (80039a4 <HAL_UART_MspInit+0x200>)
 8003858:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800385c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800385e:	4b51      	ldr	r3, [pc, #324]	@ (80039a4 <HAL_UART_MspInit+0x200>)
 8003860:	2200      	movs	r2, #0
 8003862:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003864:	484f      	ldr	r0, [pc, #316]	@ (80039a4 <HAL_UART_MspInit+0x200>)
 8003866:	f000 fbe5 	bl	8004034 <HAL_DMA_Init>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8003870:	f7ff fcb0 	bl	80031d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a4b      	ldr	r2, [pc, #300]	@ (80039a4 <HAL_UART_MspInit+0x200>)
 8003878:	63da      	str	r2, [r3, #60]	@ 0x3c
 800387a:	4a4a      	ldr	r2, [pc, #296]	@ (80039a4 <HAL_UART_MspInit+0x200>)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003880:	4b4a      	ldr	r3, [pc, #296]	@ (80039ac <HAL_UART_MspInit+0x208>)
 8003882:	4a4b      	ldr	r2, [pc, #300]	@ (80039b0 <HAL_UART_MspInit+0x20c>)
 8003884:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003886:	4b49      	ldr	r3, [pc, #292]	@ (80039ac <HAL_UART_MspInit+0x208>)
 8003888:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800388c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800388e:	4b47      	ldr	r3, [pc, #284]	@ (80039ac <HAL_UART_MspInit+0x208>)
 8003890:	2240      	movs	r2, #64	@ 0x40
 8003892:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003894:	4b45      	ldr	r3, [pc, #276]	@ (80039ac <HAL_UART_MspInit+0x208>)
 8003896:	2200      	movs	r2, #0
 8003898:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800389a:	4b44      	ldr	r3, [pc, #272]	@ (80039ac <HAL_UART_MspInit+0x208>)
 800389c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80038a0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038a2:	4b42      	ldr	r3, [pc, #264]	@ (80039ac <HAL_UART_MspInit+0x208>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038a8:	4b40      	ldr	r3, [pc, #256]	@ (80039ac <HAL_UART_MspInit+0x208>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80038ae:	4b3f      	ldr	r3, [pc, #252]	@ (80039ac <HAL_UART_MspInit+0x208>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80038b4:	4b3d      	ldr	r3, [pc, #244]	@ (80039ac <HAL_UART_MspInit+0x208>)
 80038b6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80038ba:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038bc:	4b3b      	ldr	r3, [pc, #236]	@ (80039ac <HAL_UART_MspInit+0x208>)
 80038be:	2200      	movs	r2, #0
 80038c0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80038c2:	483a      	ldr	r0, [pc, #232]	@ (80039ac <HAL_UART_MspInit+0x208>)
 80038c4:	f000 fbb6 	bl	8004034 <HAL_DMA_Init>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 80038ce:	f7ff fc81 	bl	80031d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a35      	ldr	r2, [pc, #212]	@ (80039ac <HAL_UART_MspInit+0x208>)
 80038d6:	639a      	str	r2, [r3, #56]	@ 0x38
 80038d8:	4a34      	ldr	r2, [pc, #208]	@ (80039ac <HAL_UART_MspInit+0x208>)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80038de:	2200      	movs	r2, #0
 80038e0:	2105      	movs	r1, #5
 80038e2:	2026      	movs	r0, #38	@ 0x26
 80038e4:	f000 fb7c 	bl	8003fe0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80038e8:	2026      	movs	r0, #38	@ 0x26
 80038ea:	f000 fb95 	bl	8004018 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80038ee:	e04f      	b.n	8003990 <HAL_UART_MspInit+0x1ec>
  else if(huart->Instance==USART3)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a2f      	ldr	r2, [pc, #188]	@ (80039b4 <HAL_UART_MspInit+0x210>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d14a      	bne.n	8003990 <HAL_UART_MspInit+0x1ec>
    __HAL_RCC_USART3_CLK_ENABLE();
 80038fa:	2300      	movs	r3, #0
 80038fc:	613b      	str	r3, [r7, #16]
 80038fe:	4b27      	ldr	r3, [pc, #156]	@ (800399c <HAL_UART_MspInit+0x1f8>)
 8003900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003902:	4a26      	ldr	r2, [pc, #152]	@ (800399c <HAL_UART_MspInit+0x1f8>)
 8003904:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003908:	6413      	str	r3, [r2, #64]	@ 0x40
 800390a:	4b24      	ldr	r3, [pc, #144]	@ (800399c <HAL_UART_MspInit+0x1f8>)
 800390c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003912:	613b      	str	r3, [r7, #16]
 8003914:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003916:	2300      	movs	r3, #0
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	4b20      	ldr	r3, [pc, #128]	@ (800399c <HAL_UART_MspInit+0x1f8>)
 800391c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800391e:	4a1f      	ldr	r2, [pc, #124]	@ (800399c <HAL_UART_MspInit+0x1f8>)
 8003920:	f043 0304 	orr.w	r3, r3, #4
 8003924:	6313      	str	r3, [r2, #48]	@ 0x30
 8003926:	4b1d      	ldr	r3, [pc, #116]	@ (800399c <HAL_UART_MspInit+0x1f8>)
 8003928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392a:	f003 0304 	and.w	r3, r3, #4
 800392e:	60fb      	str	r3, [r7, #12]
 8003930:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003932:	2300      	movs	r3, #0
 8003934:	60bb      	str	r3, [r7, #8]
 8003936:	4b19      	ldr	r3, [pc, #100]	@ (800399c <HAL_UART_MspInit+0x1f8>)
 8003938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800393a:	4a18      	ldr	r2, [pc, #96]	@ (800399c <HAL_UART_MspInit+0x1f8>)
 800393c:	f043 0302 	orr.w	r3, r3, #2
 8003940:	6313      	str	r3, [r2, #48]	@ 0x30
 8003942:	4b16      	ldr	r3, [pc, #88]	@ (800399c <HAL_UART_MspInit+0x1f8>)
 8003944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	60bb      	str	r3, [r7, #8]
 800394c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800394e:	2320      	movs	r3, #32
 8003950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003952:	2302      	movs	r3, #2
 8003954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003956:	2300      	movs	r3, #0
 8003958:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800395a:	2303      	movs	r3, #3
 800395c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800395e:	2307      	movs	r3, #7
 8003960:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003962:	f107 031c 	add.w	r3, r7, #28
 8003966:	4619      	mov	r1, r3
 8003968:	4813      	ldr	r0, [pc, #76]	@ (80039b8 <HAL_UART_MspInit+0x214>)
 800396a:	f000 ff65 	bl	8004838 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800396e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003974:	2302      	movs	r3, #2
 8003976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003978:	2300      	movs	r3, #0
 800397a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800397c:	2303      	movs	r3, #3
 800397e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003980:	2307      	movs	r3, #7
 8003982:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003984:	f107 031c 	add.w	r3, r7, #28
 8003988:	4619      	mov	r1, r3
 800398a:	480c      	ldr	r0, [pc, #48]	@ (80039bc <HAL_UART_MspInit+0x218>)
 800398c:	f000 ff54 	bl	8004838 <HAL_GPIO_Init>
}
 8003990:	bf00      	nop
 8003992:	3730      	adds	r7, #48	@ 0x30
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	40004400 	.word	0x40004400
 800399c:	40023800 	.word	0x40023800
 80039a0:	40020000 	.word	0x40020000
 80039a4:	20005464 	.word	0x20005464
 80039a8:	40026088 	.word	0x40026088
 80039ac:	200054c4 	.word	0x200054c4
 80039b0:	400260a0 	.word	0x400260a0
 80039b4:	40004800 	.word	0x40004800
 80039b8:	40020800 	.word	0x40020800
 80039bc:	40020400 	.word	0x40020400

080039c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08e      	sub	sp, #56	@ 0x38
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80039d0:	2300      	movs	r3, #0
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	4b33      	ldr	r3, [pc, #204]	@ (8003aa4 <HAL_InitTick+0xe4>)
 80039d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d8:	4a32      	ldr	r2, [pc, #200]	@ (8003aa4 <HAL_InitTick+0xe4>)
 80039da:	f043 0310 	orr.w	r3, r3, #16
 80039de:	6413      	str	r3, [r2, #64]	@ 0x40
 80039e0:	4b30      	ldr	r3, [pc, #192]	@ (8003aa4 <HAL_InitTick+0xe4>)
 80039e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e4:	f003 0310 	and.w	r3, r3, #16
 80039e8:	60fb      	str	r3, [r7, #12]
 80039ea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80039ec:	f107 0210 	add.w	r2, r7, #16
 80039f0:	f107 0314 	add.w	r3, r7, #20
 80039f4:	4611      	mov	r1, r2
 80039f6:	4618      	mov	r0, r3
 80039f8:	f001 fb2a 	bl	8005050 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80039fc:	6a3b      	ldr	r3, [r7, #32]
 80039fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d103      	bne.n	8003a0e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003a06:	f001 fafb 	bl	8005000 <HAL_RCC_GetPCLK1Freq>
 8003a0a:	6378      	str	r0, [r7, #52]	@ 0x34
 8003a0c:	e004      	b.n	8003a18 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003a0e:	f001 faf7 	bl	8005000 <HAL_RCC_GetPCLK1Freq>
 8003a12:	4603      	mov	r3, r0
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a1a:	4a23      	ldr	r2, [pc, #140]	@ (8003aa8 <HAL_InitTick+0xe8>)
 8003a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a20:	0c9b      	lsrs	r3, r3, #18
 8003a22:	3b01      	subs	r3, #1
 8003a24:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003a26:	4b21      	ldr	r3, [pc, #132]	@ (8003aac <HAL_InitTick+0xec>)
 8003a28:	4a21      	ldr	r2, [pc, #132]	@ (8003ab0 <HAL_InitTick+0xf0>)
 8003a2a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8003aac <HAL_InitTick+0xec>)
 8003a2e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003a32:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003a34:	4a1d      	ldr	r2, [pc, #116]	@ (8003aac <HAL_InitTick+0xec>)
 8003a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a38:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003a3a:	4b1c      	ldr	r3, [pc, #112]	@ (8003aac <HAL_InitTick+0xec>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a40:	4b1a      	ldr	r3, [pc, #104]	@ (8003aac <HAL_InitTick+0xec>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a46:	4b19      	ldr	r3, [pc, #100]	@ (8003aac <HAL_InitTick+0xec>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003a4c:	4817      	ldr	r0, [pc, #92]	@ (8003aac <HAL_InitTick+0xec>)
 8003a4e:	f001 ff79 	bl	8005944 <HAL_TIM_Base_Init>
 8003a52:	4603      	mov	r3, r0
 8003a54:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003a58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d11b      	bne.n	8003a98 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003a60:	4812      	ldr	r0, [pc, #72]	@ (8003aac <HAL_InitTick+0xec>)
 8003a62:	f001 ffbf 	bl	80059e4 <HAL_TIM_Base_Start_IT>
 8003a66:	4603      	mov	r3, r0
 8003a68:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003a6c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d111      	bne.n	8003a98 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003a74:	2036      	movs	r0, #54	@ 0x36
 8003a76:	f000 facf 	bl	8004018 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b0f      	cmp	r3, #15
 8003a7e:	d808      	bhi.n	8003a92 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003a80:	2200      	movs	r2, #0
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	2036      	movs	r0, #54	@ 0x36
 8003a86:	f000 faab 	bl	8003fe0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8003ab4 <HAL_InitTick+0xf4>)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6013      	str	r3, [r2, #0]
 8003a90:	e002      	b.n	8003a98 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003a98:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3738      	adds	r7, #56	@ 0x38
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	40023800 	.word	0x40023800
 8003aa8:	431bde83 	.word	0x431bde83
 8003aac:	2000846c 	.word	0x2000846c
 8003ab0:	40001000 	.word	0x40001000
 8003ab4:	20000028 	.word	0x20000028

08003ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003abc:	bf00      	nop
 8003abe:	e7fd      	b.n	8003abc <NMI_Handler+0x4>

08003ac0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ac4:	bf00      	nop
 8003ac6:	e7fd      	b.n	8003ac4 <HardFault_Handler+0x4>

08003ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003acc:	bf00      	nop
 8003ace:	e7fd      	b.n	8003acc <MemManage_Handler+0x4>

08003ad0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ad4:	bf00      	nop
 8003ad6:	e7fd      	b.n	8003ad4 <BusFault_Handler+0x4>

08003ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003adc:	bf00      	nop
 8003ade:	e7fd      	b.n	8003adc <UsageFault_Handler+0x4>

08003ae0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ae4:	bf00      	nop
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
	...

08003af0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003af4:	4802      	ldr	r0, [pc, #8]	@ (8003b00 <DMA1_Stream5_IRQHandler+0x10>)
 8003af6:	f000 fc35 	bl	8004364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003afa:	bf00      	nop
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	20005464 	.word	0x20005464

08003b04 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003b08:	4802      	ldr	r0, [pc, #8]	@ (8003b14 <DMA1_Stream6_IRQHandler+0x10>)
 8003b0a:	f000 fc2b 	bl	8004364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003b0e:	bf00      	nop
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	200054c4 	.word	0x200054c4

08003b18 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003b1c:	4802      	ldr	r0, [pc, #8]	@ (8003b28 <TIM4_IRQHandler+0x10>)
 8003b1e:	f002 fa1d 	bl	8005f5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003b22:	bf00      	nop
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	200052fc 	.word	0x200052fc

08003b2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003b30:	4802      	ldr	r0, [pc, #8]	@ (8003b3c <USART2_IRQHandler+0x10>)
 8003b32:	f003 fa57 	bl	8006fe4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003b36:	bf00      	nop
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	200053d4 	.word	0x200053d4

08003b40 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003b44:	4802      	ldr	r0, [pc, #8]	@ (8003b50 <TIM6_DAC_IRQHandler+0x10>)
 8003b46:	f002 fa09 	bl	8005f5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003b4a:	bf00      	nop
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	2000846c 	.word	0x2000846c

08003b54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
  return 1;
 8003b58:	2301      	movs	r3, #1
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <_kill>:

int _kill(int pid, int sig)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003b6e:	f016 fbf5 	bl	801a35c <__errno>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2216      	movs	r2, #22
 8003b76:	601a      	str	r2, [r3, #0]
  return -1;
 8003b78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <_exit>:

void _exit (int status)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003b8c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f7ff ffe7 	bl	8003b64 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003b96:	bf00      	nop
 8003b98:	e7fd      	b.n	8003b96 <_exit+0x12>

08003b9a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b086      	sub	sp, #24
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	60f8      	str	r0, [r7, #12]
 8003ba2:	60b9      	str	r1, [r7, #8]
 8003ba4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	617b      	str	r3, [r7, #20]
 8003baa:	e00a      	b.n	8003bc2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003bac:	f3af 8000 	nop.w
 8003bb0:	4601      	mov	r1, r0
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	1c5a      	adds	r2, r3, #1
 8003bb6:	60ba      	str	r2, [r7, #8]
 8003bb8:	b2ca      	uxtb	r2, r1
 8003bba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	617b      	str	r3, [r7, #20]
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	dbf0      	blt.n	8003bac <_read+0x12>
  }

  return len;
 8003bca:	687b      	ldr	r3, [r7, #4]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3718      	adds	r7, #24
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003be0:	2300      	movs	r3, #0
 8003be2:	617b      	str	r3, [r7, #20]
 8003be4:	e009      	b.n	8003bfa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	1c5a      	adds	r2, r3, #1
 8003bea:	60ba      	str	r2, [r7, #8]
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	617b      	str	r3, [r7, #20]
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	dbf1      	blt.n	8003be6 <_write+0x12>
  }
  return len;
 8003c02:	687b      	ldr	r3, [r7, #4]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3718      	adds	r7, #24
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <_close>:

int _close(int file)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c14:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003c34:	605a      	str	r2, [r3, #4]
  return 0;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <_isatty>:

int _isatty(int file)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003c4c:	2301      	movs	r3, #1
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b085      	sub	sp, #20
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	60f8      	str	r0, [r7, #12]
 8003c62:	60b9      	str	r1, [r7, #8]
 8003c64:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3714      	adds	r7, #20
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c7c:	4a14      	ldr	r2, [pc, #80]	@ (8003cd0 <_sbrk+0x5c>)
 8003c7e:	4b15      	ldr	r3, [pc, #84]	@ (8003cd4 <_sbrk+0x60>)
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c88:	4b13      	ldr	r3, [pc, #76]	@ (8003cd8 <_sbrk+0x64>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d102      	bne.n	8003c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c90:	4b11      	ldr	r3, [pc, #68]	@ (8003cd8 <_sbrk+0x64>)
 8003c92:	4a12      	ldr	r2, [pc, #72]	@ (8003cdc <_sbrk+0x68>)
 8003c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c96:	4b10      	ldr	r3, [pc, #64]	@ (8003cd8 <_sbrk+0x64>)
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d207      	bcs.n	8003cb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ca4:	f016 fb5a 	bl	801a35c <__errno>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	220c      	movs	r2, #12
 8003cac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003cae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003cb2:	e009      	b.n	8003cc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cb4:	4b08      	ldr	r3, [pc, #32]	@ (8003cd8 <_sbrk+0x64>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cba:	4b07      	ldr	r3, [pc, #28]	@ (8003cd8 <_sbrk+0x64>)
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	4a05      	ldr	r2, [pc, #20]	@ (8003cd8 <_sbrk+0x64>)
 8003cc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3718      	adds	r7, #24
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	20020000 	.word	0x20020000
 8003cd4:	00000400 	.word	0x00000400
 8003cd8:	200084b8 	.word	0x200084b8
 8003cdc:	20011ad8 	.word	0x20011ad8

08003ce0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ce4:	4b06      	ldr	r3, [pc, #24]	@ (8003d00 <SystemInit+0x20>)
 8003ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cea:	4a05      	ldr	r2, [pc, #20]	@ (8003d00 <SystemInit+0x20>)
 8003cec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003cf0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003cf4:	bf00      	nop
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	e000ed00 	.word	0xe000ed00

08003d04 <StartDefaultTask>:
//TimerHandle_t xTimer;

//void motorTimerCallback(TimerHandle_t xTimer);

void StartDefaultTask(void *argument)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
//    xTimer = xTimerCreate("MotorTimer", pdMS_TO_TICKS(1), pdTRUE, (void *)0, motorTimerCallback);
//    xTimerStart(xTimer, 0);
//    HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
	HAL_TIM_Base_Start_IT(&htim4);
 8003d0c:	4806      	ldr	r0, [pc, #24]	@ (8003d28 <StartDefaultTask+0x24>)
 8003d0e:	f001 fe69 	bl	80059e4 <HAL_TIM_Base_Start_IT>
	uros_init();
 8003d12:	f7fe f873 	bl	8001dfc <uros_init>
	arm_reset();
 8003d16:	f7fd fa23 	bl	8001160 <arm_reset>
//    uros_init();
//    trace_init();

    for(;;)
    {
        uros_agent_status_check();
 8003d1a:	f7fe f8af 	bl	8001e7c <uros_agent_status_check>
        osDelay(1000/FREQUENCY);
 8003d1e:	2032      	movs	r0, #50	@ 0x32
 8003d20:	f004 fbf6 	bl	8008510 <osDelay>
        uros_agent_status_check();
 8003d24:	bf00      	nop
 8003d26:	e7f8      	b.n	8003d1a <StartDefaultTask+0x16>
 8003d28:	200052fc 	.word	0x200052fc

08003d2c <HAL_TIM_PeriodElapsedCallback>:
    }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM4)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a13      	ldr	r2, [pc, #76]	@ (8003d88 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d118      	bne.n	8003d70 <HAL_TIM_PeriodElapsedCallback+0x44>
	{
		sec++;
 8003d3e:	4b13      	ldr	r3, [pc, #76]	@ (8003d8c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	3301      	adds	r3, #1
 8003d44:	4a11      	ldr	r2, [pc, #68]	@ (8003d8c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003d46:	6013      	str	r3, [r2, #0]

//		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
//		__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,300);

		if(arm_complete())
 8003d48:	f7fd fd3a 	bl	80017c0 <arm_complete>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d005      	beq.n	8003d5e <HAL_TIM_PeriodElapsedCallback+0x32>
		{
			arm_pub_cb();
 8003d52:	f7fe fc1f 	bl	8002594 <arm_pub_cb>
			code = 0;
 8003d56:	4b0e      	ldr	r3, [pc, #56]	@ (8003d90 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	e008      	b.n	8003d70 <HAL_TIM_PeriodElapsedCallback+0x44>
		}
		else
		{
			if(code>0){
 8003d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8003d90 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	dd04      	ble.n	8003d70 <HAL_TIM_PeriodElapsedCallback+0x44>
				arm_mission(code);
 8003d66:	4b0a      	ldr	r3, [pc, #40]	@ (8003d90 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fd fcda 	bl	8001724 <arm_mission>
			}
		}
	}
  /* USER CODE END Callback 0 */
	if (htim->Instance == TIM6)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a07      	ldr	r2, [pc, #28]	@ (8003d94 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d101      	bne.n	8003d7e <HAL_TIM_PeriodElapsedCallback+0x52>
	{
		HAL_IncTick();
 8003d7a:	f000 f859 	bl	8003e30 <HAL_IncTick>
	}
  /* USER CODE BEGIN Callback 1 */
//
  /* USER CODE END Callback 1 */
}
 8003d7e:	bf00      	nop
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	40000800 	.word	0x40000800
 8003d8c:	200084bc 	.word	0x200084bc
 8003d90:	2000001c 	.word	0x2000001c
 8003d94:	40001000 	.word	0x40001000

08003d98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003d98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003dd0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003d9c:	f7ff ffa0 	bl	8003ce0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003da0:	480c      	ldr	r0, [pc, #48]	@ (8003dd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003da2:	490d      	ldr	r1, [pc, #52]	@ (8003dd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003da4:	4a0d      	ldr	r2, [pc, #52]	@ (8003ddc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003da6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003da8:	e002      	b.n	8003db0 <LoopCopyDataInit>

08003daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003dae:	3304      	adds	r3, #4

08003db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003db4:	d3f9      	bcc.n	8003daa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003db6:	4a0a      	ldr	r2, [pc, #40]	@ (8003de0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003db8:	4c0a      	ldr	r4, [pc, #40]	@ (8003de4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003dbc:	e001      	b.n	8003dc2 <LoopFillZerobss>

08003dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003dc0:	3204      	adds	r2, #4

08003dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003dc4:	d3fb      	bcc.n	8003dbe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003dc6:	f016 facf 	bl	801a368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003dca:	f7fe feef 	bl	8002bac <main>
  bx  lr    
 8003dce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003dd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003dd8:	20000978 	.word	0x20000978
  ldr r2, =_sidata
 8003ddc:	0801c31c 	.word	0x0801c31c
  ldr r2, =_sbss
 8003de0:	20000978 	.word	0x20000978
  ldr r4, =_ebss
 8003de4:	20011ad8 	.word	0x20011ad8

08003de8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003de8:	e7fe      	b.n	8003de8 <ADC_IRQHandler>
	...

08003dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003df0:	4b0e      	ldr	r3, [pc, #56]	@ (8003e2c <HAL_Init+0x40>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a0d      	ldr	r2, [pc, #52]	@ (8003e2c <HAL_Init+0x40>)
 8003df6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003dfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8003e2c <HAL_Init+0x40>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a0a      	ldr	r2, [pc, #40]	@ (8003e2c <HAL_Init+0x40>)
 8003e02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e08:	4b08      	ldr	r3, [pc, #32]	@ (8003e2c <HAL_Init+0x40>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a07      	ldr	r2, [pc, #28]	@ (8003e2c <HAL_Init+0x40>)
 8003e0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e14:	2003      	movs	r0, #3
 8003e16:	f000 f8d8 	bl	8003fca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e1a:	200f      	movs	r0, #15
 8003e1c:	f7ff fdd0 	bl	80039c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e20:	f7ff fb42 	bl	80034a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	40023c00 	.word	0x40023c00

08003e30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e34:	4b06      	ldr	r3, [pc, #24]	@ (8003e50 <HAL_IncTick+0x20>)
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	461a      	mov	r2, r3
 8003e3a:	4b06      	ldr	r3, [pc, #24]	@ (8003e54 <HAL_IncTick+0x24>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4413      	add	r3, r2
 8003e40:	4a04      	ldr	r2, [pc, #16]	@ (8003e54 <HAL_IncTick+0x24>)
 8003e42:	6013      	str	r3, [r2, #0]
}
 8003e44:	bf00      	nop
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	2000002c 	.word	0x2000002c
 8003e54:	200084c0 	.word	0x200084c0

08003e58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8003e5c:	4b03      	ldr	r3, [pc, #12]	@ (8003e6c <HAL_GetTick+0x14>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	200084c0 	.word	0x200084c0

08003e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f003 0307 	and.w	r3, r3, #7
 8003e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e80:	4b0c      	ldr	r3, [pc, #48]	@ (8003eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003e9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ea2:	4a04      	ldr	r2, [pc, #16]	@ (8003eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	60d3      	str	r3, [r2, #12]
}
 8003ea8:	bf00      	nop
 8003eaa:	3714      	adds	r7, #20
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr
 8003eb4:	e000ed00 	.word	0xe000ed00

08003eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ebc:	4b04      	ldr	r3, [pc, #16]	@ (8003ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	0a1b      	lsrs	r3, r3, #8
 8003ec2:	f003 0307 	and.w	r3, r3, #7
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr
 8003ed0:	e000ed00 	.word	0xe000ed00

08003ed4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	4603      	mov	r3, r0
 8003edc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	db0b      	blt.n	8003efe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ee6:	79fb      	ldrb	r3, [r7, #7]
 8003ee8:	f003 021f 	and.w	r2, r3, #31
 8003eec:	4907      	ldr	r1, [pc, #28]	@ (8003f0c <__NVIC_EnableIRQ+0x38>)
 8003eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef2:	095b      	lsrs	r3, r3, #5
 8003ef4:	2001      	movs	r0, #1
 8003ef6:	fa00 f202 	lsl.w	r2, r0, r2
 8003efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003efe:	bf00      	nop
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	e000e100 	.word	0xe000e100

08003f10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	4603      	mov	r3, r0
 8003f18:	6039      	str	r1, [r7, #0]
 8003f1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	db0a      	blt.n	8003f3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	b2da      	uxtb	r2, r3
 8003f28:	490c      	ldr	r1, [pc, #48]	@ (8003f5c <__NVIC_SetPriority+0x4c>)
 8003f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f2e:	0112      	lsls	r2, r2, #4
 8003f30:	b2d2      	uxtb	r2, r2
 8003f32:	440b      	add	r3, r1
 8003f34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f38:	e00a      	b.n	8003f50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	4908      	ldr	r1, [pc, #32]	@ (8003f60 <__NVIC_SetPriority+0x50>)
 8003f40:	79fb      	ldrb	r3, [r7, #7]
 8003f42:	f003 030f 	and.w	r3, r3, #15
 8003f46:	3b04      	subs	r3, #4
 8003f48:	0112      	lsls	r2, r2, #4
 8003f4a:	b2d2      	uxtb	r2, r2
 8003f4c:	440b      	add	r3, r1
 8003f4e:	761a      	strb	r2, [r3, #24]
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	e000e100 	.word	0xe000e100
 8003f60:	e000ed00 	.word	0xe000ed00

08003f64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b089      	sub	sp, #36	@ 0x24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	f1c3 0307 	rsb	r3, r3, #7
 8003f7e:	2b04      	cmp	r3, #4
 8003f80:	bf28      	it	cs
 8003f82:	2304      	movcs	r3, #4
 8003f84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	3304      	adds	r3, #4
 8003f8a:	2b06      	cmp	r3, #6
 8003f8c:	d902      	bls.n	8003f94 <NVIC_EncodePriority+0x30>
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	3b03      	subs	r3, #3
 8003f92:	e000      	b.n	8003f96 <NVIC_EncodePriority+0x32>
 8003f94:	2300      	movs	r3, #0
 8003f96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa2:	43da      	mvns	r2, r3
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	401a      	ands	r2, r3
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb6:	43d9      	mvns	r1, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fbc:	4313      	orrs	r3, r2
         );
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3724      	adds	r7, #36	@ 0x24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b082      	sub	sp, #8
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7ff ff4c 	bl	8003e70 <__NVIC_SetPriorityGrouping>
}
 8003fd8:	bf00      	nop
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
 8003fec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ff2:	f7ff ff61 	bl	8003eb8 <__NVIC_GetPriorityGrouping>
 8003ff6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	68b9      	ldr	r1, [r7, #8]
 8003ffc:	6978      	ldr	r0, [r7, #20]
 8003ffe:	f7ff ffb1 	bl	8003f64 <NVIC_EncodePriority>
 8004002:	4602      	mov	r2, r0
 8004004:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004008:	4611      	mov	r1, r2
 800400a:	4618      	mov	r0, r3
 800400c:	f7ff ff80 	bl	8003f10 <__NVIC_SetPriority>
}
 8004010:	bf00      	nop
 8004012:	3718      	adds	r7, #24
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	4603      	mov	r3, r0
 8004020:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004026:	4618      	mov	r0, r3
 8004028:	f7ff ff54 	bl	8003ed4 <__NVIC_EnableIRQ>
}
 800402c:	bf00      	nop
 800402e:	3708      	adds	r7, #8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800403c:	2300      	movs	r3, #0
 800403e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004040:	f7ff ff0a 	bl	8003e58 <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d101      	bne.n	8004050 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e099      	b.n	8004184 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2202      	movs	r2, #2
 8004054:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0201 	bic.w	r2, r2, #1
 800406e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004070:	e00f      	b.n	8004092 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004072:	f7ff fef1 	bl	8003e58 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b05      	cmp	r3, #5
 800407e:	d908      	bls.n	8004092 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2220      	movs	r2, #32
 8004084:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2203      	movs	r2, #3
 800408a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e078      	b.n	8004184 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1e8      	bne.n	8004072 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	4b38      	ldr	r3, [pc, #224]	@ (800418c <HAL_DMA_Init+0x158>)
 80040ac:	4013      	ands	r3, r2
 80040ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e8:	2b04      	cmp	r3, #4
 80040ea:	d107      	bne.n	80040fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f4:	4313      	orrs	r3, r2
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	f023 0307 	bic.w	r3, r3, #7
 8004112:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	4313      	orrs	r3, r2
 800411c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004122:	2b04      	cmp	r3, #4
 8004124:	d117      	bne.n	8004156 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	4313      	orrs	r3, r2
 800412e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00e      	beq.n	8004156 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 fb01 	bl	8004740 <DMA_CheckFifoParam>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d008      	beq.n	8004156 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2240      	movs	r2, #64	@ 0x40
 8004148:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004152:	2301      	movs	r3, #1
 8004154:	e016      	b.n	8004184 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 fab8 	bl	80046d4 <DMA_CalcBaseAndBitshift>
 8004164:	4603      	mov	r3, r0
 8004166:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800416c:	223f      	movs	r2, #63	@ 0x3f
 800416e:	409a      	lsls	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3718      	adds	r7, #24
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	f010803f 	.word	0xf010803f

08004190 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
 800419c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800419e:	2300      	movs	r3, #0
 80041a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d101      	bne.n	80041b6 <HAL_DMA_Start_IT+0x26>
 80041b2:	2302      	movs	r3, #2
 80041b4:	e040      	b.n	8004238 <HAL_DMA_Start_IT+0xa8>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d12f      	bne.n	800422a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2202      	movs	r2, #2
 80041ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	68b9      	ldr	r1, [r7, #8]
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 fa4a 	bl	8004678 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041e8:	223f      	movs	r2, #63	@ 0x3f
 80041ea:	409a      	lsls	r2, r3
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f042 0216 	orr.w	r2, r2, #22
 80041fe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004204:	2b00      	cmp	r3, #0
 8004206:	d007      	beq.n	8004218 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 0208 	orr.w	r2, r2, #8
 8004216:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0201 	orr.w	r2, r2, #1
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	e005      	b.n	8004236 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004232:	2302      	movs	r3, #2
 8004234:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004236:	7dfb      	ldrb	r3, [r7, #23]
}
 8004238:	4618      	mov	r0, r3
 800423a:	3718      	adds	r7, #24
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800424c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800424e:	f7ff fe03 	bl	8003e58 <HAL_GetTick>
 8004252:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b02      	cmp	r3, #2
 800425e:	d008      	beq.n	8004272 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2280      	movs	r2, #128	@ 0x80
 8004264:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e052      	b.n	8004318 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 0216 	bic.w	r2, r2, #22
 8004280:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	695a      	ldr	r2, [r3, #20]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004290:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004296:	2b00      	cmp	r3, #0
 8004298:	d103      	bne.n	80042a2 <HAL_DMA_Abort+0x62>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d007      	beq.n	80042b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 0208 	bic.w	r2, r2, #8
 80042b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0201 	bic.w	r2, r2, #1
 80042c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042c2:	e013      	b.n	80042ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042c4:	f7ff fdc8 	bl	8003e58 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b05      	cmp	r3, #5
 80042d0:	d90c      	bls.n	80042ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2220      	movs	r2, #32
 80042d6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2203      	movs	r2, #3
 80042dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e015      	b.n	8004318 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1e4      	bne.n	80042c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042fe:	223f      	movs	r2, #63	@ 0x3f
 8004300:	409a      	lsls	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d004      	beq.n	800433e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2280      	movs	r2, #128	@ 0x80
 8004338:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e00c      	b.n	8004358 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2205      	movs	r2, #5
 8004342:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0201 	bic.w	r2, r2, #1
 8004354:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800436c:	2300      	movs	r3, #0
 800436e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004370:	4b8e      	ldr	r3, [pc, #568]	@ (80045ac <HAL_DMA_IRQHandler+0x248>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a8e      	ldr	r2, [pc, #568]	@ (80045b0 <HAL_DMA_IRQHandler+0x24c>)
 8004376:	fba2 2303 	umull	r2, r3, r2, r3
 800437a:	0a9b      	lsrs	r3, r3, #10
 800437c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004382:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800438e:	2208      	movs	r2, #8
 8004390:	409a      	lsls	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	4013      	ands	r3, r2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d01a      	beq.n	80043d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0304 	and.w	r3, r3, #4
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d013      	beq.n	80043d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0204 	bic.w	r2, r2, #4
 80043b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043bc:	2208      	movs	r2, #8
 80043be:	409a      	lsls	r2, r3
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043c8:	f043 0201 	orr.w	r2, r3, #1
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043d4:	2201      	movs	r2, #1
 80043d6:	409a      	lsls	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	4013      	ands	r3, r2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d012      	beq.n	8004406 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00b      	beq.n	8004406 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043f2:	2201      	movs	r2, #1
 80043f4:	409a      	lsls	r2, r3
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043fe:	f043 0202 	orr.w	r2, r3, #2
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800440a:	2204      	movs	r2, #4
 800440c:	409a      	lsls	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	4013      	ands	r3, r2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d012      	beq.n	800443c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00b      	beq.n	800443c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004428:	2204      	movs	r2, #4
 800442a:	409a      	lsls	r2, r3
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004434:	f043 0204 	orr.w	r2, r3, #4
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004440:	2210      	movs	r2, #16
 8004442:	409a      	lsls	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4013      	ands	r3, r2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d043      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0308 	and.w	r3, r3, #8
 8004456:	2b00      	cmp	r3, #0
 8004458:	d03c      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800445e:	2210      	movs	r2, #16
 8004460:	409a      	lsls	r2, r3
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d018      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d108      	bne.n	8004494 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004486:	2b00      	cmp	r3, #0
 8004488:	d024      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	4798      	blx	r3
 8004492:	e01f      	b.n	80044d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004498:	2b00      	cmp	r3, #0
 800449a:	d01b      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	4798      	blx	r3
 80044a4:	e016      	b.n	80044d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d107      	bne.n	80044c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f022 0208 	bic.w	r2, r2, #8
 80044c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044d8:	2220      	movs	r2, #32
 80044da:	409a      	lsls	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	4013      	ands	r3, r2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 808f 	beq.w	8004604 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0310 	and.w	r3, r3, #16
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 8087 	beq.w	8004604 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044fa:	2220      	movs	r2, #32
 80044fc:	409a      	lsls	r2, r3
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b05      	cmp	r3, #5
 800450c:	d136      	bne.n	800457c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 0216 	bic.w	r2, r2, #22
 800451c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	695a      	ldr	r2, [r3, #20]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800452c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004532:	2b00      	cmp	r3, #0
 8004534:	d103      	bne.n	800453e <HAL_DMA_IRQHandler+0x1da>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800453a:	2b00      	cmp	r3, #0
 800453c:	d007      	beq.n	800454e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 0208 	bic.w	r2, r2, #8
 800454c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004552:	223f      	movs	r2, #63	@ 0x3f
 8004554:	409a      	lsls	r2, r3
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800456e:	2b00      	cmp	r3, #0
 8004570:	d07e      	beq.n	8004670 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	4798      	blx	r3
        }
        return;
 800457a:	e079      	b.n	8004670 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d01d      	beq.n	80045c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10d      	bne.n	80045b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800459c:	2b00      	cmp	r3, #0
 800459e:	d031      	beq.n	8004604 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	4798      	blx	r3
 80045a8:	e02c      	b.n	8004604 <HAL_DMA_IRQHandler+0x2a0>
 80045aa:	bf00      	nop
 80045ac:	20000024 	.word	0x20000024
 80045b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d023      	beq.n	8004604 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	4798      	blx	r3
 80045c4:	e01e      	b.n	8004604 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10f      	bne.n	80045f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 0210 	bic.w	r2, r2, #16
 80045e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d003      	beq.n	8004604 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004608:	2b00      	cmp	r3, #0
 800460a:	d032      	beq.n	8004672 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	2b00      	cmp	r3, #0
 8004616:	d022      	beq.n	800465e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2205      	movs	r2, #5
 800461c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 0201 	bic.w	r2, r2, #1
 800462e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	3301      	adds	r3, #1
 8004634:	60bb      	str	r3, [r7, #8]
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	429a      	cmp	r2, r3
 800463a:	d307      	bcc.n	800464c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1f2      	bne.n	8004630 <HAL_DMA_IRQHandler+0x2cc>
 800464a:	e000      	b.n	800464e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800464c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004662:	2b00      	cmp	r3, #0
 8004664:	d005      	beq.n	8004672 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	4798      	blx	r3
 800466e:	e000      	b.n	8004672 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004670:	bf00      	nop
    }
  }
}
 8004672:	3718      	adds	r7, #24
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
 8004684:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004694:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	2b40      	cmp	r3, #64	@ 0x40
 80046a4:	d108      	bne.n	80046b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68ba      	ldr	r2, [r7, #8]
 80046b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80046b6:	e007      	b.n	80046c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	60da      	str	r2, [r3, #12]
}
 80046c8:	bf00      	nop
 80046ca:	3714      	adds	r7, #20
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	3b10      	subs	r3, #16
 80046e4:	4a14      	ldr	r2, [pc, #80]	@ (8004738 <DMA_CalcBaseAndBitshift+0x64>)
 80046e6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ea:	091b      	lsrs	r3, r3, #4
 80046ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80046ee:	4a13      	ldr	r2, [pc, #76]	@ (800473c <DMA_CalcBaseAndBitshift+0x68>)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	4413      	add	r3, r2
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	461a      	mov	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2b03      	cmp	r3, #3
 8004700:	d909      	bls.n	8004716 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800470a:	f023 0303 	bic.w	r3, r3, #3
 800470e:	1d1a      	adds	r2, r3, #4
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	659a      	str	r2, [r3, #88]	@ 0x58
 8004714:	e007      	b.n	8004726 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800471e:	f023 0303 	bic.w	r3, r3, #3
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800472a:	4618      	mov	r0, r3
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	aaaaaaab 	.word	0xaaaaaaab
 800473c:	0801b15c 	.word	0x0801b15c

08004740 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004748:	2300      	movs	r3, #0
 800474a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004750:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d11f      	bne.n	800479a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	2b03      	cmp	r3, #3
 800475e:	d856      	bhi.n	800480e <DMA_CheckFifoParam+0xce>
 8004760:	a201      	add	r2, pc, #4	@ (adr r2, 8004768 <DMA_CheckFifoParam+0x28>)
 8004762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004766:	bf00      	nop
 8004768:	08004779 	.word	0x08004779
 800476c:	0800478b 	.word	0x0800478b
 8004770:	08004779 	.word	0x08004779
 8004774:	0800480f 	.word	0x0800480f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800477c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d046      	beq.n	8004812 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004788:	e043      	b.n	8004812 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800478e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004792:	d140      	bne.n	8004816 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004798:	e03d      	b.n	8004816 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047a2:	d121      	bne.n	80047e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	2b03      	cmp	r3, #3
 80047a8:	d837      	bhi.n	800481a <DMA_CheckFifoParam+0xda>
 80047aa:	a201      	add	r2, pc, #4	@ (adr r2, 80047b0 <DMA_CheckFifoParam+0x70>)
 80047ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b0:	080047c1 	.word	0x080047c1
 80047b4:	080047c7 	.word	0x080047c7
 80047b8:	080047c1 	.word	0x080047c1
 80047bc:	080047d9 	.word	0x080047d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	73fb      	strb	r3, [r7, #15]
      break;
 80047c4:	e030      	b.n	8004828 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d025      	beq.n	800481e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047d6:	e022      	b.n	800481e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047dc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80047e0:	d11f      	bne.n	8004822 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80047e6:	e01c      	b.n	8004822 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d903      	bls.n	80047f6 <DMA_CheckFifoParam+0xb6>
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	2b03      	cmp	r3, #3
 80047f2:	d003      	beq.n	80047fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80047f4:	e018      	b.n	8004828 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	73fb      	strb	r3, [r7, #15]
      break;
 80047fa:	e015      	b.n	8004828 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004800:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00e      	beq.n	8004826 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	73fb      	strb	r3, [r7, #15]
      break;
 800480c:	e00b      	b.n	8004826 <DMA_CheckFifoParam+0xe6>
      break;
 800480e:	bf00      	nop
 8004810:	e00a      	b.n	8004828 <DMA_CheckFifoParam+0xe8>
      break;
 8004812:	bf00      	nop
 8004814:	e008      	b.n	8004828 <DMA_CheckFifoParam+0xe8>
      break;
 8004816:	bf00      	nop
 8004818:	e006      	b.n	8004828 <DMA_CheckFifoParam+0xe8>
      break;
 800481a:	bf00      	nop
 800481c:	e004      	b.n	8004828 <DMA_CheckFifoParam+0xe8>
      break;
 800481e:	bf00      	nop
 8004820:	e002      	b.n	8004828 <DMA_CheckFifoParam+0xe8>
      break;   
 8004822:	bf00      	nop
 8004824:	e000      	b.n	8004828 <DMA_CheckFifoParam+0xe8>
      break;
 8004826:	bf00      	nop
    }
  } 
  
  return status; 
 8004828:	7bfb      	ldrb	r3, [r7, #15]
}
 800482a:	4618      	mov	r0, r3
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop

08004838 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004838:	b480      	push	{r7}
 800483a:	b089      	sub	sp, #36	@ 0x24
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004842:	2300      	movs	r3, #0
 8004844:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004846:	2300      	movs	r3, #0
 8004848:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800484a:	2300      	movs	r3, #0
 800484c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800484e:	2300      	movs	r3, #0
 8004850:	61fb      	str	r3, [r7, #28]
 8004852:	e165      	b.n	8004b20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004854:	2201      	movs	r2, #1
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	fa02 f303 	lsl.w	r3, r2, r3
 800485c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	4013      	ands	r3, r2
 8004866:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	429a      	cmp	r2, r3
 800486e:	f040 8154 	bne.w	8004b1a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f003 0303 	and.w	r3, r3, #3
 800487a:	2b01      	cmp	r3, #1
 800487c:	d005      	beq.n	800488a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004886:	2b02      	cmp	r3, #2
 8004888:	d130      	bne.n	80048ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	2203      	movs	r2, #3
 8004896:	fa02 f303 	lsl.w	r3, r2, r3
 800489a:	43db      	mvns	r3, r3
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	4013      	ands	r3, r2
 80048a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	68da      	ldr	r2, [r3, #12]
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	005b      	lsls	r3, r3, #1
 80048aa:	fa02 f303 	lsl.w	r3, r2, r3
 80048ae:	69ba      	ldr	r2, [r7, #24]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	69ba      	ldr	r2, [r7, #24]
 80048b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048c0:	2201      	movs	r2, #1
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	fa02 f303 	lsl.w	r3, r2, r3
 80048c8:	43db      	mvns	r3, r3
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	4013      	ands	r3, r2
 80048ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	091b      	lsrs	r3, r3, #4
 80048d6:	f003 0201 	and.w	r2, r3, #1
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	fa02 f303 	lsl.w	r3, r2, r3
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f003 0303 	and.w	r3, r3, #3
 80048f4:	2b03      	cmp	r3, #3
 80048f6:	d017      	beq.n	8004928 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	2203      	movs	r2, #3
 8004904:	fa02 f303 	lsl.w	r3, r2, r3
 8004908:	43db      	mvns	r3, r3
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	4013      	ands	r3, r2
 800490e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	fa02 f303 	lsl.w	r3, r2, r3
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	4313      	orrs	r3, r2
 8004920:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f003 0303 	and.w	r3, r3, #3
 8004930:	2b02      	cmp	r3, #2
 8004932:	d123      	bne.n	800497c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	08da      	lsrs	r2, r3, #3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3208      	adds	r2, #8
 800493c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004940:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	f003 0307 	and.w	r3, r3, #7
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	220f      	movs	r2, #15
 800494c:	fa02 f303 	lsl.w	r3, r2, r3
 8004950:	43db      	mvns	r3, r3
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	4013      	ands	r3, r2
 8004956:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	691a      	ldr	r2, [r3, #16]
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	f003 0307 	and.w	r3, r3, #7
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	fa02 f303 	lsl.w	r3, r2, r3
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	4313      	orrs	r3, r2
 800496c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	08da      	lsrs	r2, r3, #3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	3208      	adds	r2, #8
 8004976:	69b9      	ldr	r1, [r7, #24]
 8004978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	2203      	movs	r2, #3
 8004988:	fa02 f303 	lsl.w	r3, r2, r3
 800498c:	43db      	mvns	r3, r3
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	4013      	ands	r3, r2
 8004992:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f003 0203 	and.w	r2, r3, #3
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	005b      	lsls	r3, r3, #1
 80049a0:	fa02 f303 	lsl.w	r3, r2, r3
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f000 80ae 	beq.w	8004b1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049be:	2300      	movs	r3, #0
 80049c0:	60fb      	str	r3, [r7, #12]
 80049c2:	4b5d      	ldr	r3, [pc, #372]	@ (8004b38 <HAL_GPIO_Init+0x300>)
 80049c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049c6:	4a5c      	ldr	r2, [pc, #368]	@ (8004b38 <HAL_GPIO_Init+0x300>)
 80049c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80049cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80049ce:	4b5a      	ldr	r3, [pc, #360]	@ (8004b38 <HAL_GPIO_Init+0x300>)
 80049d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049da:	4a58      	ldr	r2, [pc, #352]	@ (8004b3c <HAL_GPIO_Init+0x304>)
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	089b      	lsrs	r3, r3, #2
 80049e0:	3302      	adds	r3, #2
 80049e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	f003 0303 	and.w	r3, r3, #3
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	220f      	movs	r2, #15
 80049f2:	fa02 f303 	lsl.w	r3, r2, r3
 80049f6:	43db      	mvns	r3, r3
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	4013      	ands	r3, r2
 80049fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a4f      	ldr	r2, [pc, #316]	@ (8004b40 <HAL_GPIO_Init+0x308>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d025      	beq.n	8004a52 <HAL_GPIO_Init+0x21a>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a4e      	ldr	r2, [pc, #312]	@ (8004b44 <HAL_GPIO_Init+0x30c>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d01f      	beq.n	8004a4e <HAL_GPIO_Init+0x216>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a4d      	ldr	r2, [pc, #308]	@ (8004b48 <HAL_GPIO_Init+0x310>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d019      	beq.n	8004a4a <HAL_GPIO_Init+0x212>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a4c      	ldr	r2, [pc, #304]	@ (8004b4c <HAL_GPIO_Init+0x314>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d013      	beq.n	8004a46 <HAL_GPIO_Init+0x20e>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a4b      	ldr	r2, [pc, #300]	@ (8004b50 <HAL_GPIO_Init+0x318>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d00d      	beq.n	8004a42 <HAL_GPIO_Init+0x20a>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a4a      	ldr	r2, [pc, #296]	@ (8004b54 <HAL_GPIO_Init+0x31c>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d007      	beq.n	8004a3e <HAL_GPIO_Init+0x206>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a49      	ldr	r2, [pc, #292]	@ (8004b58 <HAL_GPIO_Init+0x320>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d101      	bne.n	8004a3a <HAL_GPIO_Init+0x202>
 8004a36:	2306      	movs	r3, #6
 8004a38:	e00c      	b.n	8004a54 <HAL_GPIO_Init+0x21c>
 8004a3a:	2307      	movs	r3, #7
 8004a3c:	e00a      	b.n	8004a54 <HAL_GPIO_Init+0x21c>
 8004a3e:	2305      	movs	r3, #5
 8004a40:	e008      	b.n	8004a54 <HAL_GPIO_Init+0x21c>
 8004a42:	2304      	movs	r3, #4
 8004a44:	e006      	b.n	8004a54 <HAL_GPIO_Init+0x21c>
 8004a46:	2303      	movs	r3, #3
 8004a48:	e004      	b.n	8004a54 <HAL_GPIO_Init+0x21c>
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	e002      	b.n	8004a54 <HAL_GPIO_Init+0x21c>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e000      	b.n	8004a54 <HAL_GPIO_Init+0x21c>
 8004a52:	2300      	movs	r3, #0
 8004a54:	69fa      	ldr	r2, [r7, #28]
 8004a56:	f002 0203 	and.w	r2, r2, #3
 8004a5a:	0092      	lsls	r2, r2, #2
 8004a5c:	4093      	lsls	r3, r2
 8004a5e:	69ba      	ldr	r2, [r7, #24]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a64:	4935      	ldr	r1, [pc, #212]	@ (8004b3c <HAL_GPIO_Init+0x304>)
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	089b      	lsrs	r3, r3, #2
 8004a6a:	3302      	adds	r3, #2
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a72:	4b3a      	ldr	r3, [pc, #232]	@ (8004b5c <HAL_GPIO_Init+0x324>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	43db      	mvns	r3, r3
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	4013      	ands	r3, r2
 8004a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a96:	4a31      	ldr	r2, [pc, #196]	@ (8004b5c <HAL_GPIO_Init+0x324>)
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a9c:	4b2f      	ldr	r3, [pc, #188]	@ (8004b5c <HAL_GPIO_Init+0x324>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	43db      	mvns	r3, r3
 8004aa6:	69ba      	ldr	r2, [r7, #24]
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d003      	beq.n	8004ac0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ac0:	4a26      	ldr	r2, [pc, #152]	@ (8004b5c <HAL_GPIO_Init+0x324>)
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004ac6:	4b25      	ldr	r3, [pc, #148]	@ (8004b5c <HAL_GPIO_Init+0x324>)
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	43db      	mvns	r3, r3
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004ae2:	69ba      	ldr	r2, [r7, #24]
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004aea:	4a1c      	ldr	r2, [pc, #112]	@ (8004b5c <HAL_GPIO_Init+0x324>)
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004af0:	4b1a      	ldr	r3, [pc, #104]	@ (8004b5c <HAL_GPIO_Init+0x324>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	43db      	mvns	r3, r3
 8004afa:	69ba      	ldr	r2, [r7, #24]
 8004afc:	4013      	ands	r3, r2
 8004afe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d003      	beq.n	8004b14 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b14:	4a11      	ldr	r2, [pc, #68]	@ (8004b5c <HAL_GPIO_Init+0x324>)
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	61fb      	str	r3, [r7, #28]
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	2b0f      	cmp	r3, #15
 8004b24:	f67f ae96 	bls.w	8004854 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b28:	bf00      	nop
 8004b2a:	bf00      	nop
 8004b2c:	3724      	adds	r7, #36	@ 0x24
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	40023800 	.word	0x40023800
 8004b3c:	40013800 	.word	0x40013800
 8004b40:	40020000 	.word	0x40020000
 8004b44:	40020400 	.word	0x40020400
 8004b48:	40020800 	.word	0x40020800
 8004b4c:	40020c00 	.word	0x40020c00
 8004b50:	40021000 	.word	0x40021000
 8004b54:	40021400 	.word	0x40021400
 8004b58:	40021800 	.word	0x40021800
 8004b5c:	40013c00 	.word	0x40013c00

08004b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	460b      	mov	r3, r1
 8004b6a:	807b      	strh	r3, [r7, #2]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b70:	787b      	ldrb	r3, [r7, #1]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d003      	beq.n	8004b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b76:	887a      	ldrh	r2, [r7, #2]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b7c:	e003      	b.n	8004b86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b7e:	887b      	ldrh	r3, [r7, #2]
 8004b80:	041a      	lsls	r2, r3, #16
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	619a      	str	r2, [r3, #24]
}
 8004b86:	bf00      	nop
 8004b88:	370c      	adds	r7, #12
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
	...

08004b94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e12b      	b.n	8004dfe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d106      	bne.n	8004bc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7fe fca0 	bl	8003500 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2224      	movs	r2, #36	@ 0x24
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 0201 	bic.w	r2, r2, #1
 8004bd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004be6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004bf6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004bf8:	f000 fa02 	bl	8005000 <HAL_RCC_GetPCLK1Freq>
 8004bfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	4a81      	ldr	r2, [pc, #516]	@ (8004e08 <HAL_I2C_Init+0x274>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d807      	bhi.n	8004c18 <HAL_I2C_Init+0x84>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	4a80      	ldr	r2, [pc, #512]	@ (8004e0c <HAL_I2C_Init+0x278>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	bf94      	ite	ls
 8004c10:	2301      	movls	r3, #1
 8004c12:	2300      	movhi	r3, #0
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	e006      	b.n	8004c26 <HAL_I2C_Init+0x92>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	4a7d      	ldr	r2, [pc, #500]	@ (8004e10 <HAL_I2C_Init+0x27c>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	bf94      	ite	ls
 8004c20:	2301      	movls	r3, #1
 8004c22:	2300      	movhi	r3, #0
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e0e7      	b.n	8004dfe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	4a78      	ldr	r2, [pc, #480]	@ (8004e14 <HAL_I2C_Init+0x280>)
 8004c32:	fba2 2303 	umull	r2, r3, r2, r3
 8004c36:	0c9b      	lsrs	r3, r3, #18
 8004c38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68ba      	ldr	r2, [r7, #8]
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	4a6a      	ldr	r2, [pc, #424]	@ (8004e08 <HAL_I2C_Init+0x274>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d802      	bhi.n	8004c68 <HAL_I2C_Init+0xd4>
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	3301      	adds	r3, #1
 8004c66:	e009      	b.n	8004c7c <HAL_I2C_Init+0xe8>
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004c6e:	fb02 f303 	mul.w	r3, r2, r3
 8004c72:	4a69      	ldr	r2, [pc, #420]	@ (8004e18 <HAL_I2C_Init+0x284>)
 8004c74:	fba2 2303 	umull	r2, r3, r2, r3
 8004c78:	099b      	lsrs	r3, r3, #6
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	6812      	ldr	r2, [r2, #0]
 8004c80:	430b      	orrs	r3, r1
 8004c82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004c8e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	495c      	ldr	r1, [pc, #368]	@ (8004e08 <HAL_I2C_Init+0x274>)
 8004c98:	428b      	cmp	r3, r1
 8004c9a:	d819      	bhi.n	8004cd0 <HAL_I2C_Init+0x13c>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	1e59      	subs	r1, r3, #1
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004caa:	1c59      	adds	r1, r3, #1
 8004cac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004cb0:	400b      	ands	r3, r1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00a      	beq.n	8004ccc <HAL_I2C_Init+0x138>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	1e59      	subs	r1, r3, #1
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	005b      	lsls	r3, r3, #1
 8004cc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cca:	e051      	b.n	8004d70 <HAL_I2C_Init+0x1dc>
 8004ccc:	2304      	movs	r3, #4
 8004cce:	e04f      	b.n	8004d70 <HAL_I2C_Init+0x1dc>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d111      	bne.n	8004cfc <HAL_I2C_Init+0x168>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	1e58      	subs	r0, r3, #1
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6859      	ldr	r1, [r3, #4]
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	005b      	lsls	r3, r3, #1
 8004ce4:	440b      	add	r3, r1
 8004ce6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cea:	3301      	adds	r3, #1
 8004cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	bf0c      	ite	eq
 8004cf4:	2301      	moveq	r3, #1
 8004cf6:	2300      	movne	r3, #0
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	e012      	b.n	8004d22 <HAL_I2C_Init+0x18e>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	1e58      	subs	r0, r3, #1
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6859      	ldr	r1, [r3, #4]
 8004d04:	460b      	mov	r3, r1
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	440b      	add	r3, r1
 8004d0a:	0099      	lsls	r1, r3, #2
 8004d0c:	440b      	add	r3, r1
 8004d0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d12:	3301      	adds	r3, #1
 8004d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	bf0c      	ite	eq
 8004d1c:	2301      	moveq	r3, #1
 8004d1e:	2300      	movne	r3, #0
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <HAL_I2C_Init+0x196>
 8004d26:	2301      	movs	r3, #1
 8004d28:	e022      	b.n	8004d70 <HAL_I2C_Init+0x1dc>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10e      	bne.n	8004d50 <HAL_I2C_Init+0x1bc>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	1e58      	subs	r0, r3, #1
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6859      	ldr	r1, [r3, #4]
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	005b      	lsls	r3, r3, #1
 8004d3e:	440b      	add	r3, r1
 8004d40:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d44:	3301      	adds	r3, #1
 8004d46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d4e:	e00f      	b.n	8004d70 <HAL_I2C_Init+0x1dc>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	1e58      	subs	r0, r3, #1
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6859      	ldr	r1, [r3, #4]
 8004d58:	460b      	mov	r3, r1
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	440b      	add	r3, r1
 8004d5e:	0099      	lsls	r1, r3, #2
 8004d60:	440b      	add	r3, r1
 8004d62:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d66:	3301      	adds	r3, #1
 8004d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d70:	6879      	ldr	r1, [r7, #4]
 8004d72:	6809      	ldr	r1, [r1, #0]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	69da      	ldr	r2, [r3, #28]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	430a      	orrs	r2, r1
 8004d92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004d9e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	6911      	ldr	r1, [r2, #16]
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	68d2      	ldr	r2, [r2, #12]
 8004daa:	4311      	orrs	r1, r2
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	6812      	ldr	r2, [r2, #0]
 8004db0:	430b      	orrs	r3, r1
 8004db2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	695a      	ldr	r2, [r3, #20]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f042 0201 	orr.w	r2, r2, #1
 8004dde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2220      	movs	r2, #32
 8004dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	000186a0 	.word	0x000186a0
 8004e0c:	001e847f 	.word	0x001e847f
 8004e10:	003d08ff 	.word	0x003d08ff
 8004e14:	431bde83 	.word	0x431bde83
 8004e18:	10624dd3 	.word	0x10624dd3

08004e1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d101      	bne.n	8004e30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e0cc      	b.n	8004fca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e30:	4b68      	ldr	r3, [pc, #416]	@ (8004fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 030f 	and.w	r3, r3, #15
 8004e38:	683a      	ldr	r2, [r7, #0]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d90c      	bls.n	8004e58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e3e:	4b65      	ldr	r3, [pc, #404]	@ (8004fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	b2d2      	uxtb	r2, r2
 8004e44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e46:	4b63      	ldr	r3, [pc, #396]	@ (8004fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 030f 	and.w	r3, r3, #15
 8004e4e:	683a      	ldr	r2, [r7, #0]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d001      	beq.n	8004e58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e0b8      	b.n	8004fca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d020      	beq.n	8004ea6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0304 	and.w	r3, r3, #4
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d005      	beq.n	8004e7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e70:	4b59      	ldr	r3, [pc, #356]	@ (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	4a58      	ldr	r2, [pc, #352]	@ (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004e7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0308 	and.w	r3, r3, #8
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d005      	beq.n	8004e94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e88:	4b53      	ldr	r3, [pc, #332]	@ (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	4a52      	ldr	r2, [pc, #328]	@ (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004e92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e94:	4b50      	ldr	r3, [pc, #320]	@ (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	494d      	ldr	r1, [pc, #308]	@ (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d044      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d107      	bne.n	8004eca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eba:	4b47      	ldr	r3, [pc, #284]	@ (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d119      	bne.n	8004efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e07f      	b.n	8004fca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d003      	beq.n	8004eda <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ed6:	2b03      	cmp	r3, #3
 8004ed8:	d107      	bne.n	8004eea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eda:	4b3f      	ldr	r3, [pc, #252]	@ (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d109      	bne.n	8004efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e06f      	b.n	8004fca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eea:	4b3b      	ldr	r3, [pc, #236]	@ (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e067      	b.n	8004fca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004efa:	4b37      	ldr	r3, [pc, #220]	@ (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f023 0203 	bic.w	r2, r3, #3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	4934      	ldr	r1, [pc, #208]	@ (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f0c:	f7fe ffa4 	bl	8003e58 <HAL_GetTick>
 8004f10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f12:	e00a      	b.n	8004f2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f14:	f7fe ffa0 	bl	8003e58 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e04f      	b.n	8004fca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f2a:	4b2b      	ldr	r3, [pc, #172]	@ (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f003 020c 	and.w	r2, r3, #12
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d1eb      	bne.n	8004f14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f3c:	4b25      	ldr	r3, [pc, #148]	@ (8004fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 030f 	and.w	r3, r3, #15
 8004f44:	683a      	ldr	r2, [r7, #0]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d20c      	bcs.n	8004f64 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f4a:	4b22      	ldr	r3, [pc, #136]	@ (8004fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	b2d2      	uxtb	r2, r2
 8004f50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f52:	4b20      	ldr	r3, [pc, #128]	@ (8004fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 030f 	and.w	r3, r3, #15
 8004f5a:	683a      	ldr	r2, [r7, #0]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d001      	beq.n	8004f64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e032      	b.n	8004fca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0304 	and.w	r3, r3, #4
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d008      	beq.n	8004f82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f70:	4b19      	ldr	r3, [pc, #100]	@ (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	4916      	ldr	r1, [pc, #88]	@ (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0308 	and.w	r3, r3, #8
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d009      	beq.n	8004fa2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f8e:	4b12      	ldr	r3, [pc, #72]	@ (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	00db      	lsls	r3, r3, #3
 8004f9c:	490e      	ldr	r1, [pc, #56]	@ (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004fa2:	f000 f887 	bl	80050b4 <HAL_RCC_GetSysClockFreq>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	091b      	lsrs	r3, r3, #4
 8004fae:	f003 030f 	and.w	r3, r3, #15
 8004fb2:	490a      	ldr	r1, [pc, #40]	@ (8004fdc <HAL_RCC_ClockConfig+0x1c0>)
 8004fb4:	5ccb      	ldrb	r3, [r1, r3]
 8004fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8004fba:	4a09      	ldr	r2, [pc, #36]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8004fbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004fbe:	4b09      	ldr	r3, [pc, #36]	@ (8004fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7fe fcfc 	bl	80039c0 <HAL_InitTick>

  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	40023c00 	.word	0x40023c00
 8004fd8:	40023800 	.word	0x40023800
 8004fdc:	0801b144 	.word	0x0801b144
 8004fe0:	20000024 	.word	0x20000024
 8004fe4:	20000028 	.word	0x20000028

08004fe8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fec:	4b03      	ldr	r3, [pc, #12]	@ (8004ffc <HAL_RCC_GetHCLKFreq+0x14>)
 8004fee:	681b      	ldr	r3, [r3, #0]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	20000024 	.word	0x20000024

08005000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005004:	f7ff fff0 	bl	8004fe8 <HAL_RCC_GetHCLKFreq>
 8005008:	4602      	mov	r2, r0
 800500a:	4b05      	ldr	r3, [pc, #20]	@ (8005020 <HAL_RCC_GetPCLK1Freq+0x20>)
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	0a9b      	lsrs	r3, r3, #10
 8005010:	f003 0307 	and.w	r3, r3, #7
 8005014:	4903      	ldr	r1, [pc, #12]	@ (8005024 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005016:	5ccb      	ldrb	r3, [r1, r3]
 8005018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800501c:	4618      	mov	r0, r3
 800501e:	bd80      	pop	{r7, pc}
 8005020:	40023800 	.word	0x40023800
 8005024:	0801b154 	.word	0x0801b154

08005028 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800502c:	f7ff ffdc 	bl	8004fe8 <HAL_RCC_GetHCLKFreq>
 8005030:	4602      	mov	r2, r0
 8005032:	4b05      	ldr	r3, [pc, #20]	@ (8005048 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	0b5b      	lsrs	r3, r3, #13
 8005038:	f003 0307 	and.w	r3, r3, #7
 800503c:	4903      	ldr	r1, [pc, #12]	@ (800504c <HAL_RCC_GetPCLK2Freq+0x24>)
 800503e:	5ccb      	ldrb	r3, [r1, r3]
 8005040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005044:	4618      	mov	r0, r3
 8005046:	bd80      	pop	{r7, pc}
 8005048:	40023800 	.word	0x40023800
 800504c:	0801b154 	.word	0x0801b154

08005050 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	220f      	movs	r2, #15
 800505e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005060:	4b12      	ldr	r3, [pc, #72]	@ (80050ac <HAL_RCC_GetClockConfig+0x5c>)
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	f003 0203 	and.w	r2, r3, #3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800506c:	4b0f      	ldr	r3, [pc, #60]	@ (80050ac <HAL_RCC_GetClockConfig+0x5c>)
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005078:	4b0c      	ldr	r3, [pc, #48]	@ (80050ac <HAL_RCC_GetClockConfig+0x5c>)
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005084:	4b09      	ldr	r3, [pc, #36]	@ (80050ac <HAL_RCC_GetClockConfig+0x5c>)
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	08db      	lsrs	r3, r3, #3
 800508a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005092:	4b07      	ldr	r3, [pc, #28]	@ (80050b0 <HAL_RCC_GetClockConfig+0x60>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 020f 	and.w	r2, r3, #15
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	601a      	str	r2, [r3, #0]
}
 800509e:	bf00      	nop
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	40023800 	.word	0x40023800
 80050b0:	40023c00 	.word	0x40023c00

080050b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050b8:	b0a6      	sub	sp, #152	@ 0x98
 80050ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80050bc:	2300      	movs	r3, #0
 80050be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80050c2:	2300      	movs	r3, #0
 80050c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80050c8:	2300      	movs	r3, #0
 80050ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80050ce:	2300      	movs	r3, #0
 80050d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80050d4:	2300      	movs	r3, #0
 80050d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050da:	4bc8      	ldr	r3, [pc, #800]	@ (80053fc <HAL_RCC_GetSysClockFreq+0x348>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 030c 	and.w	r3, r3, #12
 80050e2:	2b0c      	cmp	r3, #12
 80050e4:	f200 817e 	bhi.w	80053e4 <HAL_RCC_GetSysClockFreq+0x330>
 80050e8:	a201      	add	r2, pc, #4	@ (adr r2, 80050f0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80050ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ee:	bf00      	nop
 80050f0:	08005125 	.word	0x08005125
 80050f4:	080053e5 	.word	0x080053e5
 80050f8:	080053e5 	.word	0x080053e5
 80050fc:	080053e5 	.word	0x080053e5
 8005100:	0800512d 	.word	0x0800512d
 8005104:	080053e5 	.word	0x080053e5
 8005108:	080053e5 	.word	0x080053e5
 800510c:	080053e5 	.word	0x080053e5
 8005110:	08005135 	.word	0x08005135
 8005114:	080053e5 	.word	0x080053e5
 8005118:	080053e5 	.word	0x080053e5
 800511c:	080053e5 	.word	0x080053e5
 8005120:	0800529f 	.word	0x0800529f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005124:	4bb6      	ldr	r3, [pc, #728]	@ (8005400 <HAL_RCC_GetSysClockFreq+0x34c>)
 8005126:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800512a:	e15f      	b.n	80053ec <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800512c:	4bb5      	ldr	r3, [pc, #724]	@ (8005404 <HAL_RCC_GetSysClockFreq+0x350>)
 800512e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005132:	e15b      	b.n	80053ec <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005134:	4bb1      	ldr	r3, [pc, #708]	@ (80053fc <HAL_RCC_GetSysClockFreq+0x348>)
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800513c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005140:	4bae      	ldr	r3, [pc, #696]	@ (80053fc <HAL_RCC_GetSysClockFreq+0x348>)
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d031      	beq.n	80051b0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800514c:	4bab      	ldr	r3, [pc, #684]	@ (80053fc <HAL_RCC_GetSysClockFreq+0x348>)
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	099b      	lsrs	r3, r3, #6
 8005152:	2200      	movs	r2, #0
 8005154:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005156:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005158:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800515a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800515e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005160:	2300      	movs	r3, #0
 8005162:	667b      	str	r3, [r7, #100]	@ 0x64
 8005164:	4ba7      	ldr	r3, [pc, #668]	@ (8005404 <HAL_RCC_GetSysClockFreq+0x350>)
 8005166:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800516a:	462a      	mov	r2, r5
 800516c:	fb03 f202 	mul.w	r2, r3, r2
 8005170:	2300      	movs	r3, #0
 8005172:	4621      	mov	r1, r4
 8005174:	fb01 f303 	mul.w	r3, r1, r3
 8005178:	4413      	add	r3, r2
 800517a:	4aa2      	ldr	r2, [pc, #648]	@ (8005404 <HAL_RCC_GetSysClockFreq+0x350>)
 800517c:	4621      	mov	r1, r4
 800517e:	fba1 1202 	umull	r1, r2, r1, r2
 8005182:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005184:	460a      	mov	r2, r1
 8005186:	67ba      	str	r2, [r7, #120]	@ 0x78
 8005188:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800518a:	4413      	add	r3, r2
 800518c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800518e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005192:	2200      	movs	r2, #0
 8005194:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005196:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005198:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800519c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80051a0:	f7fb fd94 	bl	8000ccc <__aeabi_uldivmod>
 80051a4:	4602      	mov	r2, r0
 80051a6:	460b      	mov	r3, r1
 80051a8:	4613      	mov	r3, r2
 80051aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80051ae:	e064      	b.n	800527a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051b0:	4b92      	ldr	r3, [pc, #584]	@ (80053fc <HAL_RCC_GetSysClockFreq+0x348>)
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	099b      	lsrs	r3, r3, #6
 80051b6:	2200      	movs	r2, #0
 80051b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80051ba:	657a      	str	r2, [r7, #84]	@ 0x54
 80051bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051c4:	2300      	movs	r3, #0
 80051c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051c8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80051cc:	4622      	mov	r2, r4
 80051ce:	462b      	mov	r3, r5
 80051d0:	f04f 0000 	mov.w	r0, #0
 80051d4:	f04f 0100 	mov.w	r1, #0
 80051d8:	0159      	lsls	r1, r3, #5
 80051da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051de:	0150      	lsls	r0, r2, #5
 80051e0:	4602      	mov	r2, r0
 80051e2:	460b      	mov	r3, r1
 80051e4:	4621      	mov	r1, r4
 80051e6:	1a51      	subs	r1, r2, r1
 80051e8:	6139      	str	r1, [r7, #16]
 80051ea:	4629      	mov	r1, r5
 80051ec:	eb63 0301 	sbc.w	r3, r3, r1
 80051f0:	617b      	str	r3, [r7, #20]
 80051f2:	f04f 0200 	mov.w	r2, #0
 80051f6:	f04f 0300 	mov.w	r3, #0
 80051fa:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051fe:	4659      	mov	r1, fp
 8005200:	018b      	lsls	r3, r1, #6
 8005202:	4651      	mov	r1, sl
 8005204:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005208:	4651      	mov	r1, sl
 800520a:	018a      	lsls	r2, r1, #6
 800520c:	4651      	mov	r1, sl
 800520e:	ebb2 0801 	subs.w	r8, r2, r1
 8005212:	4659      	mov	r1, fp
 8005214:	eb63 0901 	sbc.w	r9, r3, r1
 8005218:	f04f 0200 	mov.w	r2, #0
 800521c:	f04f 0300 	mov.w	r3, #0
 8005220:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005224:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005228:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800522c:	4690      	mov	r8, r2
 800522e:	4699      	mov	r9, r3
 8005230:	4623      	mov	r3, r4
 8005232:	eb18 0303 	adds.w	r3, r8, r3
 8005236:	60bb      	str	r3, [r7, #8]
 8005238:	462b      	mov	r3, r5
 800523a:	eb49 0303 	adc.w	r3, r9, r3
 800523e:	60fb      	str	r3, [r7, #12]
 8005240:	f04f 0200 	mov.w	r2, #0
 8005244:	f04f 0300 	mov.w	r3, #0
 8005248:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800524c:	4629      	mov	r1, r5
 800524e:	028b      	lsls	r3, r1, #10
 8005250:	4621      	mov	r1, r4
 8005252:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005256:	4621      	mov	r1, r4
 8005258:	028a      	lsls	r2, r1, #10
 800525a:	4610      	mov	r0, r2
 800525c:	4619      	mov	r1, r3
 800525e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005262:	2200      	movs	r2, #0
 8005264:	643b      	str	r3, [r7, #64]	@ 0x40
 8005266:	647a      	str	r2, [r7, #68]	@ 0x44
 8005268:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800526c:	f7fb fd2e 	bl	8000ccc <__aeabi_uldivmod>
 8005270:	4602      	mov	r2, r0
 8005272:	460b      	mov	r3, r1
 8005274:	4613      	mov	r3, r2
 8005276:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800527a:	4b60      	ldr	r3, [pc, #384]	@ (80053fc <HAL_RCC_GetSysClockFreq+0x348>)
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	0c1b      	lsrs	r3, r3, #16
 8005280:	f003 0303 	and.w	r3, r3, #3
 8005284:	3301      	adds	r3, #1
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 800528c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005290:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005294:	fbb2 f3f3 	udiv	r3, r2, r3
 8005298:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800529c:	e0a6      	b.n	80053ec <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800529e:	4b57      	ldr	r3, [pc, #348]	@ (80053fc <HAL_RCC_GetSysClockFreq+0x348>)
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052aa:	4b54      	ldr	r3, [pc, #336]	@ (80053fc <HAL_RCC_GetSysClockFreq+0x348>)
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d02a      	beq.n	800530c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052b6:	4b51      	ldr	r3, [pc, #324]	@ (80053fc <HAL_RCC_GetSysClockFreq+0x348>)
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	099b      	lsrs	r3, r3, #6
 80052bc:	2200      	movs	r2, #0
 80052be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80052c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80052c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80052c8:	2100      	movs	r1, #0
 80052ca:	4b4e      	ldr	r3, [pc, #312]	@ (8005404 <HAL_RCC_GetSysClockFreq+0x350>)
 80052cc:	fb03 f201 	mul.w	r2, r3, r1
 80052d0:	2300      	movs	r3, #0
 80052d2:	fb00 f303 	mul.w	r3, r0, r3
 80052d6:	4413      	add	r3, r2
 80052d8:	4a4a      	ldr	r2, [pc, #296]	@ (8005404 <HAL_RCC_GetSysClockFreq+0x350>)
 80052da:	fba0 1202 	umull	r1, r2, r0, r2
 80052de:	677a      	str	r2, [r7, #116]	@ 0x74
 80052e0:	460a      	mov	r2, r1
 80052e2:	673a      	str	r2, [r7, #112]	@ 0x70
 80052e4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80052e6:	4413      	add	r3, r2
 80052e8:	677b      	str	r3, [r7, #116]	@ 0x74
 80052ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052ee:	2200      	movs	r2, #0
 80052f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80052f2:	637a      	str	r2, [r7, #52]	@ 0x34
 80052f4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80052f8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80052fc:	f7fb fce6 	bl	8000ccc <__aeabi_uldivmod>
 8005300:	4602      	mov	r2, r0
 8005302:	460b      	mov	r3, r1
 8005304:	4613      	mov	r3, r2
 8005306:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800530a:	e05b      	b.n	80053c4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800530c:	4b3b      	ldr	r3, [pc, #236]	@ (80053fc <HAL_RCC_GetSysClockFreq+0x348>)
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	099b      	lsrs	r3, r3, #6
 8005312:	2200      	movs	r2, #0
 8005314:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005316:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800531a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800531e:	623b      	str	r3, [r7, #32]
 8005320:	2300      	movs	r3, #0
 8005322:	627b      	str	r3, [r7, #36]	@ 0x24
 8005324:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005328:	4642      	mov	r2, r8
 800532a:	464b      	mov	r3, r9
 800532c:	f04f 0000 	mov.w	r0, #0
 8005330:	f04f 0100 	mov.w	r1, #0
 8005334:	0159      	lsls	r1, r3, #5
 8005336:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800533a:	0150      	lsls	r0, r2, #5
 800533c:	4602      	mov	r2, r0
 800533e:	460b      	mov	r3, r1
 8005340:	4641      	mov	r1, r8
 8005342:	ebb2 0a01 	subs.w	sl, r2, r1
 8005346:	4649      	mov	r1, r9
 8005348:	eb63 0b01 	sbc.w	fp, r3, r1
 800534c:	f04f 0200 	mov.w	r2, #0
 8005350:	f04f 0300 	mov.w	r3, #0
 8005354:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005358:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800535c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005360:	ebb2 040a 	subs.w	r4, r2, sl
 8005364:	eb63 050b 	sbc.w	r5, r3, fp
 8005368:	f04f 0200 	mov.w	r2, #0
 800536c:	f04f 0300 	mov.w	r3, #0
 8005370:	00eb      	lsls	r3, r5, #3
 8005372:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005376:	00e2      	lsls	r2, r4, #3
 8005378:	4614      	mov	r4, r2
 800537a:	461d      	mov	r5, r3
 800537c:	4643      	mov	r3, r8
 800537e:	18e3      	adds	r3, r4, r3
 8005380:	603b      	str	r3, [r7, #0]
 8005382:	464b      	mov	r3, r9
 8005384:	eb45 0303 	adc.w	r3, r5, r3
 8005388:	607b      	str	r3, [r7, #4]
 800538a:	f04f 0200 	mov.w	r2, #0
 800538e:	f04f 0300 	mov.w	r3, #0
 8005392:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005396:	4629      	mov	r1, r5
 8005398:	028b      	lsls	r3, r1, #10
 800539a:	4621      	mov	r1, r4
 800539c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80053a0:	4621      	mov	r1, r4
 80053a2:	028a      	lsls	r2, r1, #10
 80053a4:	4610      	mov	r0, r2
 80053a6:	4619      	mov	r1, r3
 80053a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053ac:	2200      	movs	r2, #0
 80053ae:	61bb      	str	r3, [r7, #24]
 80053b0:	61fa      	str	r2, [r7, #28]
 80053b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053b6:	f7fb fc89 	bl	8000ccc <__aeabi_uldivmod>
 80053ba:	4602      	mov	r2, r0
 80053bc:	460b      	mov	r3, r1
 80053be:	4613      	mov	r3, r2
 80053c0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80053c4:	4b0d      	ldr	r3, [pc, #52]	@ (80053fc <HAL_RCC_GetSysClockFreq+0x348>)
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	0f1b      	lsrs	r3, r3, #28
 80053ca:	f003 0307 	and.w	r3, r3, #7
 80053ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80053d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80053d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80053da:	fbb2 f3f3 	udiv	r3, r2, r3
 80053de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80053e2:	e003      	b.n	80053ec <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053e4:	4b06      	ldr	r3, [pc, #24]	@ (8005400 <HAL_RCC_GetSysClockFreq+0x34c>)
 80053e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80053ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3798      	adds	r7, #152	@ 0x98
 80053f4:	46bd      	mov	sp, r7
 80053f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053fa:	bf00      	nop
 80053fc:	40023800 	.word	0x40023800
 8005400:	00f42400 	.word	0x00f42400
 8005404:	017d7840 	.word	0x017d7840

08005408 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e28d      	b.n	8005936 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	2b00      	cmp	r3, #0
 8005424:	f000 8083 	beq.w	800552e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005428:	4b94      	ldr	r3, [pc, #592]	@ (800567c <HAL_RCC_OscConfig+0x274>)
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f003 030c 	and.w	r3, r3, #12
 8005430:	2b04      	cmp	r3, #4
 8005432:	d019      	beq.n	8005468 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005434:	4b91      	ldr	r3, [pc, #580]	@ (800567c <HAL_RCC_OscConfig+0x274>)
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f003 030c 	and.w	r3, r3, #12
        || \
 800543c:	2b08      	cmp	r3, #8
 800543e:	d106      	bne.n	800544e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005440:	4b8e      	ldr	r3, [pc, #568]	@ (800567c <HAL_RCC_OscConfig+0x274>)
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005448:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800544c:	d00c      	beq.n	8005468 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800544e:	4b8b      	ldr	r3, [pc, #556]	@ (800567c <HAL_RCC_OscConfig+0x274>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005456:	2b0c      	cmp	r3, #12
 8005458:	d112      	bne.n	8005480 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800545a:	4b88      	ldr	r3, [pc, #544]	@ (800567c <HAL_RCC_OscConfig+0x274>)
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005462:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005466:	d10b      	bne.n	8005480 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005468:	4b84      	ldr	r3, [pc, #528]	@ (800567c <HAL_RCC_OscConfig+0x274>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d05b      	beq.n	800552c <HAL_RCC_OscConfig+0x124>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d157      	bne.n	800552c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e25a      	b.n	8005936 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005488:	d106      	bne.n	8005498 <HAL_RCC_OscConfig+0x90>
 800548a:	4b7c      	ldr	r3, [pc, #496]	@ (800567c <HAL_RCC_OscConfig+0x274>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a7b      	ldr	r2, [pc, #492]	@ (800567c <HAL_RCC_OscConfig+0x274>)
 8005490:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005494:	6013      	str	r3, [r2, #0]
 8005496:	e01d      	b.n	80054d4 <HAL_RCC_OscConfig+0xcc>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80054a0:	d10c      	bne.n	80054bc <HAL_RCC_OscConfig+0xb4>
 80054a2:	4b76      	ldr	r3, [pc, #472]	@ (800567c <HAL_RCC_OscConfig+0x274>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a75      	ldr	r2, [pc, #468]	@ (800567c <HAL_RCC_OscConfig+0x274>)
 80054a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80054ac:	6013      	str	r3, [r2, #0]
 80054ae:	4b73      	ldr	r3, [pc, #460]	@ (800567c <HAL_RCC_OscConfig+0x274>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a72      	ldr	r2, [pc, #456]	@ (800567c <HAL_RCC_OscConfig+0x274>)
 80054b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054b8:	6013      	str	r3, [r2, #0]
 80054ba:	e00b      	b.n	80054d4 <HAL_RCC_OscConfig+0xcc>
 80054bc:	4b6f      	ldr	r3, [pc, #444]	@ (800567c <HAL_RCC_OscConfig+0x274>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a6e      	ldr	r2, [pc, #440]	@ (800567c <HAL_RCC_OscConfig+0x274>)
 80054c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054c6:	6013      	str	r3, [r2, #0]
 80054c8:	4b6c      	ldr	r3, [pc, #432]	@ (800567c <HAL_RCC_OscConfig+0x274>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a6b      	ldr	r2, [pc, #428]	@ (800567c <HAL_RCC_OscConfig+0x274>)
 80054ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d013      	beq.n	8005504 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054dc:	f7fe fcbc 	bl	8003e58 <HAL_GetTick>
 80054e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054e2:	e008      	b.n	80054f6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054e4:	f7fe fcb8 	bl	8003e58 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b64      	cmp	r3, #100	@ 0x64
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e21f      	b.n	8005936 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054f6:	4b61      	ldr	r3, [pc, #388]	@ (800567c <HAL_RCC_OscConfig+0x274>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d0f0      	beq.n	80054e4 <HAL_RCC_OscConfig+0xdc>
 8005502:	e014      	b.n	800552e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005504:	f7fe fca8 	bl	8003e58 <HAL_GetTick>
 8005508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800550a:	e008      	b.n	800551e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800550c:	f7fe fca4 	bl	8003e58 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b64      	cmp	r3, #100	@ 0x64
 8005518:	d901      	bls.n	800551e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e20b      	b.n	8005936 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800551e:	4b57      	ldr	r3, [pc, #348]	@ (800567c <HAL_RCC_OscConfig+0x274>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1f0      	bne.n	800550c <HAL_RCC_OscConfig+0x104>
 800552a:	e000      	b.n	800552e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800552c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d06f      	beq.n	800561a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800553a:	4b50      	ldr	r3, [pc, #320]	@ (800567c <HAL_RCC_OscConfig+0x274>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f003 030c 	and.w	r3, r3, #12
 8005542:	2b00      	cmp	r3, #0
 8005544:	d017      	beq.n	8005576 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005546:	4b4d      	ldr	r3, [pc, #308]	@ (800567c <HAL_RCC_OscConfig+0x274>)
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f003 030c 	and.w	r3, r3, #12
        || \
 800554e:	2b08      	cmp	r3, #8
 8005550:	d105      	bne.n	800555e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005552:	4b4a      	ldr	r3, [pc, #296]	@ (800567c <HAL_RCC_OscConfig+0x274>)
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00b      	beq.n	8005576 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800555e:	4b47      	ldr	r3, [pc, #284]	@ (800567c <HAL_RCC_OscConfig+0x274>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005566:	2b0c      	cmp	r3, #12
 8005568:	d11c      	bne.n	80055a4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800556a:	4b44      	ldr	r3, [pc, #272]	@ (800567c <HAL_RCC_OscConfig+0x274>)
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d116      	bne.n	80055a4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005576:	4b41      	ldr	r3, [pc, #260]	@ (800567c <HAL_RCC_OscConfig+0x274>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0302 	and.w	r3, r3, #2
 800557e:	2b00      	cmp	r3, #0
 8005580:	d005      	beq.n	800558e <HAL_RCC_OscConfig+0x186>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d001      	beq.n	800558e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e1d3      	b.n	8005936 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800558e:	4b3b      	ldr	r3, [pc, #236]	@ (800567c <HAL_RCC_OscConfig+0x274>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	00db      	lsls	r3, r3, #3
 800559c:	4937      	ldr	r1, [pc, #220]	@ (800567c <HAL_RCC_OscConfig+0x274>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055a2:	e03a      	b.n	800561a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d020      	beq.n	80055ee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055ac:	4b34      	ldr	r3, [pc, #208]	@ (8005680 <HAL_RCC_OscConfig+0x278>)
 80055ae:	2201      	movs	r2, #1
 80055b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b2:	f7fe fc51 	bl	8003e58 <HAL_GetTick>
 80055b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055b8:	e008      	b.n	80055cc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055ba:	f7fe fc4d 	bl	8003e58 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d901      	bls.n	80055cc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e1b4      	b.n	8005936 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055cc:	4b2b      	ldr	r3, [pc, #172]	@ (800567c <HAL_RCC_OscConfig+0x274>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d0f0      	beq.n	80055ba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055d8:	4b28      	ldr	r3, [pc, #160]	@ (800567c <HAL_RCC_OscConfig+0x274>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	00db      	lsls	r3, r3, #3
 80055e6:	4925      	ldr	r1, [pc, #148]	@ (800567c <HAL_RCC_OscConfig+0x274>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	600b      	str	r3, [r1, #0]
 80055ec:	e015      	b.n	800561a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055ee:	4b24      	ldr	r3, [pc, #144]	@ (8005680 <HAL_RCC_OscConfig+0x278>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f4:	f7fe fc30 	bl	8003e58 <HAL_GetTick>
 80055f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055fa:	e008      	b.n	800560e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055fc:	f7fe fc2c 	bl	8003e58 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b02      	cmp	r3, #2
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e193      	b.n	8005936 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800560e:	4b1b      	ldr	r3, [pc, #108]	@ (800567c <HAL_RCC_OscConfig+0x274>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1f0      	bne.n	80055fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0308 	and.w	r3, r3, #8
 8005622:	2b00      	cmp	r3, #0
 8005624:	d036      	beq.n	8005694 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d016      	beq.n	800565c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800562e:	4b15      	ldr	r3, [pc, #84]	@ (8005684 <HAL_RCC_OscConfig+0x27c>)
 8005630:	2201      	movs	r2, #1
 8005632:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005634:	f7fe fc10 	bl	8003e58 <HAL_GetTick>
 8005638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800563a:	e008      	b.n	800564e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800563c:	f7fe fc0c 	bl	8003e58 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b02      	cmp	r3, #2
 8005648:	d901      	bls.n	800564e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e173      	b.n	8005936 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800564e:	4b0b      	ldr	r3, [pc, #44]	@ (800567c <HAL_RCC_OscConfig+0x274>)
 8005650:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d0f0      	beq.n	800563c <HAL_RCC_OscConfig+0x234>
 800565a:	e01b      	b.n	8005694 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800565c:	4b09      	ldr	r3, [pc, #36]	@ (8005684 <HAL_RCC_OscConfig+0x27c>)
 800565e:	2200      	movs	r2, #0
 8005660:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005662:	f7fe fbf9 	bl	8003e58 <HAL_GetTick>
 8005666:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005668:	e00e      	b.n	8005688 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800566a:	f7fe fbf5 	bl	8003e58 <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	2b02      	cmp	r3, #2
 8005676:	d907      	bls.n	8005688 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e15c      	b.n	8005936 <HAL_RCC_OscConfig+0x52e>
 800567c:	40023800 	.word	0x40023800
 8005680:	42470000 	.word	0x42470000
 8005684:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005688:	4b8a      	ldr	r3, [pc, #552]	@ (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 800568a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800568c:	f003 0302 	and.w	r3, r3, #2
 8005690:	2b00      	cmp	r3, #0
 8005692:	d1ea      	bne.n	800566a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0304 	and.w	r3, r3, #4
 800569c:	2b00      	cmp	r3, #0
 800569e:	f000 8097 	beq.w	80057d0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056a2:	2300      	movs	r3, #0
 80056a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056a6:	4b83      	ldr	r3, [pc, #524]	@ (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 80056a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10f      	bne.n	80056d2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056b2:	2300      	movs	r3, #0
 80056b4:	60bb      	str	r3, [r7, #8]
 80056b6:	4b7f      	ldr	r3, [pc, #508]	@ (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 80056b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ba:	4a7e      	ldr	r2, [pc, #504]	@ (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 80056bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80056c2:	4b7c      	ldr	r3, [pc, #496]	@ (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 80056c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056ca:	60bb      	str	r3, [r7, #8]
 80056cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056ce:	2301      	movs	r3, #1
 80056d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056d2:	4b79      	ldr	r3, [pc, #484]	@ (80058b8 <HAL_RCC_OscConfig+0x4b0>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d118      	bne.n	8005710 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056de:	4b76      	ldr	r3, [pc, #472]	@ (80058b8 <HAL_RCC_OscConfig+0x4b0>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a75      	ldr	r2, [pc, #468]	@ (80058b8 <HAL_RCC_OscConfig+0x4b0>)
 80056e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056ea:	f7fe fbb5 	bl	8003e58 <HAL_GetTick>
 80056ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056f0:	e008      	b.n	8005704 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056f2:	f7fe fbb1 	bl	8003e58 <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d901      	bls.n	8005704 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e118      	b.n	8005936 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005704:	4b6c      	ldr	r3, [pc, #432]	@ (80058b8 <HAL_RCC_OscConfig+0x4b0>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800570c:	2b00      	cmp	r3, #0
 800570e:	d0f0      	beq.n	80056f2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d106      	bne.n	8005726 <HAL_RCC_OscConfig+0x31e>
 8005718:	4b66      	ldr	r3, [pc, #408]	@ (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 800571a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800571c:	4a65      	ldr	r2, [pc, #404]	@ (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 800571e:	f043 0301 	orr.w	r3, r3, #1
 8005722:	6713      	str	r3, [r2, #112]	@ 0x70
 8005724:	e01c      	b.n	8005760 <HAL_RCC_OscConfig+0x358>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	2b05      	cmp	r3, #5
 800572c:	d10c      	bne.n	8005748 <HAL_RCC_OscConfig+0x340>
 800572e:	4b61      	ldr	r3, [pc, #388]	@ (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 8005730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005732:	4a60      	ldr	r2, [pc, #384]	@ (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 8005734:	f043 0304 	orr.w	r3, r3, #4
 8005738:	6713      	str	r3, [r2, #112]	@ 0x70
 800573a:	4b5e      	ldr	r3, [pc, #376]	@ (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 800573c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800573e:	4a5d      	ldr	r2, [pc, #372]	@ (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 8005740:	f043 0301 	orr.w	r3, r3, #1
 8005744:	6713      	str	r3, [r2, #112]	@ 0x70
 8005746:	e00b      	b.n	8005760 <HAL_RCC_OscConfig+0x358>
 8005748:	4b5a      	ldr	r3, [pc, #360]	@ (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 800574a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800574c:	4a59      	ldr	r2, [pc, #356]	@ (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 800574e:	f023 0301 	bic.w	r3, r3, #1
 8005752:	6713      	str	r3, [r2, #112]	@ 0x70
 8005754:	4b57      	ldr	r3, [pc, #348]	@ (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 8005756:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005758:	4a56      	ldr	r2, [pc, #344]	@ (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 800575a:	f023 0304 	bic.w	r3, r3, #4
 800575e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d015      	beq.n	8005794 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005768:	f7fe fb76 	bl	8003e58 <HAL_GetTick>
 800576c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800576e:	e00a      	b.n	8005786 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005770:	f7fe fb72 	bl	8003e58 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800577e:	4293      	cmp	r3, r2
 8005780:	d901      	bls.n	8005786 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e0d7      	b.n	8005936 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005786:	4b4b      	ldr	r3, [pc, #300]	@ (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 8005788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d0ee      	beq.n	8005770 <HAL_RCC_OscConfig+0x368>
 8005792:	e014      	b.n	80057be <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005794:	f7fe fb60 	bl	8003e58 <HAL_GetTick>
 8005798:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800579a:	e00a      	b.n	80057b2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800579c:	f7fe fb5c 	bl	8003e58 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e0c1      	b.n	8005936 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057b2:	4b40      	ldr	r3, [pc, #256]	@ (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 80057b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1ee      	bne.n	800579c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80057be:	7dfb      	ldrb	r3, [r7, #23]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d105      	bne.n	80057d0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057c4:	4b3b      	ldr	r3, [pc, #236]	@ (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 80057c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c8:	4a3a      	ldr	r2, [pc, #232]	@ (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 80057ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 80ad 	beq.w	8005934 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057da:	4b36      	ldr	r3, [pc, #216]	@ (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f003 030c 	and.w	r3, r3, #12
 80057e2:	2b08      	cmp	r3, #8
 80057e4:	d060      	beq.n	80058a8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d145      	bne.n	800587a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ee:	4b33      	ldr	r3, [pc, #204]	@ (80058bc <HAL_RCC_OscConfig+0x4b4>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057f4:	f7fe fb30 	bl	8003e58 <HAL_GetTick>
 80057f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057fa:	e008      	b.n	800580e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057fc:	f7fe fb2c 	bl	8003e58 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	2b02      	cmp	r3, #2
 8005808:	d901      	bls.n	800580e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e093      	b.n	8005936 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800580e:	4b29      	ldr	r3, [pc, #164]	@ (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1f0      	bne.n	80057fc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	69da      	ldr	r2, [r3, #28]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	431a      	orrs	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005828:	019b      	lsls	r3, r3, #6
 800582a:	431a      	orrs	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005830:	085b      	lsrs	r3, r3, #1
 8005832:	3b01      	subs	r3, #1
 8005834:	041b      	lsls	r3, r3, #16
 8005836:	431a      	orrs	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800583c:	061b      	lsls	r3, r3, #24
 800583e:	431a      	orrs	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005844:	071b      	lsls	r3, r3, #28
 8005846:	491b      	ldr	r1, [pc, #108]	@ (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 8005848:	4313      	orrs	r3, r2
 800584a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800584c:	4b1b      	ldr	r3, [pc, #108]	@ (80058bc <HAL_RCC_OscConfig+0x4b4>)
 800584e:	2201      	movs	r2, #1
 8005850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005852:	f7fe fb01 	bl	8003e58 <HAL_GetTick>
 8005856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005858:	e008      	b.n	800586c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800585a:	f7fe fafd 	bl	8003e58 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	2b02      	cmp	r3, #2
 8005866:	d901      	bls.n	800586c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e064      	b.n	8005936 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800586c:	4b11      	ldr	r3, [pc, #68]	@ (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d0f0      	beq.n	800585a <HAL_RCC_OscConfig+0x452>
 8005878:	e05c      	b.n	8005934 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800587a:	4b10      	ldr	r3, [pc, #64]	@ (80058bc <HAL_RCC_OscConfig+0x4b4>)
 800587c:	2200      	movs	r2, #0
 800587e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005880:	f7fe faea 	bl	8003e58 <HAL_GetTick>
 8005884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005886:	e008      	b.n	800589a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005888:	f7fe fae6 	bl	8003e58 <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	2b02      	cmp	r3, #2
 8005894:	d901      	bls.n	800589a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e04d      	b.n	8005936 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800589a:	4b06      	ldr	r3, [pc, #24]	@ (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1f0      	bne.n	8005888 <HAL_RCC_OscConfig+0x480>
 80058a6:	e045      	b.n	8005934 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d107      	bne.n	80058c0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e040      	b.n	8005936 <HAL_RCC_OscConfig+0x52e>
 80058b4:	40023800 	.word	0x40023800
 80058b8:	40007000 	.word	0x40007000
 80058bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80058c0:	4b1f      	ldr	r3, [pc, #124]	@ (8005940 <HAL_RCC_OscConfig+0x538>)
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d030      	beq.n	8005930 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058d8:	429a      	cmp	r2, r3
 80058da:	d129      	bne.n	8005930 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d122      	bne.n	8005930 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80058f0:	4013      	ands	r3, r2
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80058f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d119      	bne.n	8005930 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005906:	085b      	lsrs	r3, r3, #1
 8005908:	3b01      	subs	r3, #1
 800590a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800590c:	429a      	cmp	r2, r3
 800590e:	d10f      	bne.n	8005930 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800591a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800591c:	429a      	cmp	r2, r3
 800591e:	d107      	bne.n	8005930 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800592a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800592c:	429a      	cmp	r2, r3
 800592e:	d001      	beq.n	8005934 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e000      	b.n	8005936 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3718      	adds	r7, #24
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	40023800 	.word	0x40023800

08005944 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d101      	bne.n	8005956 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e041      	b.n	80059da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b00      	cmp	r3, #0
 8005960:	d106      	bne.n	8005970 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f7fd fe58 	bl	8003620 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2202      	movs	r2, #2
 8005974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	3304      	adds	r3, #4
 8005980:	4619      	mov	r1, r3
 8005982:	4610      	mov	r0, r2
 8005984:	f000 fd8c 	bl	80064a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3708      	adds	r7, #8
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
	...

080059e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d001      	beq.n	80059fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e04e      	b.n	8005a9a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2202      	movs	r2, #2
 8005a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68da      	ldr	r2, [r3, #12]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f042 0201 	orr.w	r2, r2, #1
 8005a12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a23      	ldr	r2, [pc, #140]	@ (8005aa8 <HAL_TIM_Base_Start_IT+0xc4>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d022      	beq.n	8005a64 <HAL_TIM_Base_Start_IT+0x80>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a26:	d01d      	beq.n	8005a64 <HAL_TIM_Base_Start_IT+0x80>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a1f      	ldr	r2, [pc, #124]	@ (8005aac <HAL_TIM_Base_Start_IT+0xc8>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d018      	beq.n	8005a64 <HAL_TIM_Base_Start_IT+0x80>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a1e      	ldr	r2, [pc, #120]	@ (8005ab0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d013      	beq.n	8005a64 <HAL_TIM_Base_Start_IT+0x80>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a1c      	ldr	r2, [pc, #112]	@ (8005ab4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d00e      	beq.n	8005a64 <HAL_TIM_Base_Start_IT+0x80>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a1b      	ldr	r2, [pc, #108]	@ (8005ab8 <HAL_TIM_Base_Start_IT+0xd4>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d009      	beq.n	8005a64 <HAL_TIM_Base_Start_IT+0x80>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a19      	ldr	r2, [pc, #100]	@ (8005abc <HAL_TIM_Base_Start_IT+0xd8>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d004      	beq.n	8005a64 <HAL_TIM_Base_Start_IT+0x80>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a18      	ldr	r2, [pc, #96]	@ (8005ac0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d111      	bne.n	8005a88 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f003 0307 	and.w	r3, r3, #7
 8005a6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2b06      	cmp	r3, #6
 8005a74:	d010      	beq.n	8005a98 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f042 0201 	orr.w	r2, r2, #1
 8005a84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a86:	e007      	b.n	8005a98 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f042 0201 	orr.w	r2, r2, #1
 8005a96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3714      	adds	r7, #20
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	40010000 	.word	0x40010000
 8005aac:	40000400 	.word	0x40000400
 8005ab0:	40000800 	.word	0x40000800
 8005ab4:	40000c00 	.word	0x40000c00
 8005ab8:	40010400 	.word	0x40010400
 8005abc:	40014000 	.word	0x40014000
 8005ac0:	40001800 	.word	0x40001800

08005ac4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d101      	bne.n	8005ad6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e041      	b.n	8005b5a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d106      	bne.n	8005af0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7fd fdc0 	bl	8003670 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2202      	movs	r2, #2
 8005af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	3304      	adds	r3, #4
 8005b00:	4619      	mov	r1, r3
 8005b02:	4610      	mov	r0, r2
 8005b04:	f000 fccc 	bl	80064a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3708      	adds	r7, #8
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
	...

08005b64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d109      	bne.n	8005b88 <HAL_TIM_PWM_Start+0x24>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	bf14      	ite	ne
 8005b80:	2301      	movne	r3, #1
 8005b82:	2300      	moveq	r3, #0
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	e022      	b.n	8005bce <HAL_TIM_PWM_Start+0x6a>
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	2b04      	cmp	r3, #4
 8005b8c:	d109      	bne.n	8005ba2 <HAL_TIM_PWM_Start+0x3e>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	bf14      	ite	ne
 8005b9a:	2301      	movne	r3, #1
 8005b9c:	2300      	moveq	r3, #0
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	e015      	b.n	8005bce <HAL_TIM_PWM_Start+0x6a>
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	2b08      	cmp	r3, #8
 8005ba6:	d109      	bne.n	8005bbc <HAL_TIM_PWM_Start+0x58>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	bf14      	ite	ne
 8005bb4:	2301      	movne	r3, #1
 8005bb6:	2300      	moveq	r3, #0
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	e008      	b.n	8005bce <HAL_TIM_PWM_Start+0x6a>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	bf14      	ite	ne
 8005bc8:	2301      	movne	r3, #1
 8005bca:	2300      	moveq	r3, #0
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d001      	beq.n	8005bd6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e07c      	b.n	8005cd0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d104      	bne.n	8005be6 <HAL_TIM_PWM_Start+0x82>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2202      	movs	r2, #2
 8005be0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005be4:	e013      	b.n	8005c0e <HAL_TIM_PWM_Start+0xaa>
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	2b04      	cmp	r3, #4
 8005bea:	d104      	bne.n	8005bf6 <HAL_TIM_PWM_Start+0x92>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2202      	movs	r2, #2
 8005bf0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005bf4:	e00b      	b.n	8005c0e <HAL_TIM_PWM_Start+0xaa>
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	2b08      	cmp	r3, #8
 8005bfa:	d104      	bne.n	8005c06 <HAL_TIM_PWM_Start+0xa2>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2202      	movs	r2, #2
 8005c00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c04:	e003      	b.n	8005c0e <HAL_TIM_PWM_Start+0xaa>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2202      	movs	r2, #2
 8005c0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2201      	movs	r2, #1
 8005c14:	6839      	ldr	r1, [r7, #0]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f000 ff32 	bl	8006a80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a2d      	ldr	r2, [pc, #180]	@ (8005cd8 <HAL_TIM_PWM_Start+0x174>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d004      	beq.n	8005c30 <HAL_TIM_PWM_Start+0xcc>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a2c      	ldr	r2, [pc, #176]	@ (8005cdc <HAL_TIM_PWM_Start+0x178>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d101      	bne.n	8005c34 <HAL_TIM_PWM_Start+0xd0>
 8005c30:	2301      	movs	r3, #1
 8005c32:	e000      	b.n	8005c36 <HAL_TIM_PWM_Start+0xd2>
 8005c34:	2300      	movs	r3, #0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d007      	beq.n	8005c4a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c48:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a22      	ldr	r2, [pc, #136]	@ (8005cd8 <HAL_TIM_PWM_Start+0x174>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d022      	beq.n	8005c9a <HAL_TIM_PWM_Start+0x136>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c5c:	d01d      	beq.n	8005c9a <HAL_TIM_PWM_Start+0x136>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a1f      	ldr	r2, [pc, #124]	@ (8005ce0 <HAL_TIM_PWM_Start+0x17c>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d018      	beq.n	8005c9a <HAL_TIM_PWM_Start+0x136>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a1d      	ldr	r2, [pc, #116]	@ (8005ce4 <HAL_TIM_PWM_Start+0x180>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d013      	beq.n	8005c9a <HAL_TIM_PWM_Start+0x136>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a1c      	ldr	r2, [pc, #112]	@ (8005ce8 <HAL_TIM_PWM_Start+0x184>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d00e      	beq.n	8005c9a <HAL_TIM_PWM_Start+0x136>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a16      	ldr	r2, [pc, #88]	@ (8005cdc <HAL_TIM_PWM_Start+0x178>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d009      	beq.n	8005c9a <HAL_TIM_PWM_Start+0x136>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a18      	ldr	r2, [pc, #96]	@ (8005cec <HAL_TIM_PWM_Start+0x188>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d004      	beq.n	8005c9a <HAL_TIM_PWM_Start+0x136>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a16      	ldr	r2, [pc, #88]	@ (8005cf0 <HAL_TIM_PWM_Start+0x18c>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d111      	bne.n	8005cbe <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	f003 0307 	and.w	r3, r3, #7
 8005ca4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2b06      	cmp	r3, #6
 8005caa:	d010      	beq.n	8005cce <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f042 0201 	orr.w	r2, r2, #1
 8005cba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cbc:	e007      	b.n	8005cce <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f042 0201 	orr.w	r2, r2, #1
 8005ccc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3710      	adds	r7, #16
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	40010000 	.word	0x40010000
 8005cdc:	40010400 	.word	0x40010400
 8005ce0:	40000400 	.word	0x40000400
 8005ce4:	40000800 	.word	0x40000800
 8005ce8:	40000c00 	.word	0x40000c00
 8005cec:	40014000 	.word	0x40014000
 8005cf0:	40001800 	.word	0x40001800

08005cf4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b086      	sub	sp, #24
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d101      	bne.n	8005d08 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e097      	b.n	8005e38 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d106      	bne.n	8005d22 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f7fd fc37 	bl	8003590 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2202      	movs	r2, #2
 8005d26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	6812      	ldr	r2, [r2, #0]
 8005d34:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d38:	f023 0307 	bic.w	r3, r3, #7
 8005d3c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	3304      	adds	r3, #4
 8005d46:	4619      	mov	r1, r3
 8005d48:	4610      	mov	r0, r2
 8005d4a:	f000 fba9 	bl	80064a0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d76:	f023 0303 	bic.w	r3, r3, #3
 8005d7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	689a      	ldr	r2, [r3, #8]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	021b      	lsls	r3, r3, #8
 8005d86:	4313      	orrs	r3, r2
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005d94:	f023 030c 	bic.w	r3, r3, #12
 8005d98:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005da0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005da4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	68da      	ldr	r2, [r3, #12]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	69db      	ldr	r3, [r3, #28]
 8005dae:	021b      	lsls	r3, r3, #8
 8005db0:	4313      	orrs	r3, r2
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	011a      	lsls	r2, r3, #4
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	031b      	lsls	r3, r3, #12
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005dd2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005dda:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	685a      	ldr	r2, [r3, #4]
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	695b      	ldr	r3, [r3, #20]
 8005de4:	011b      	lsls	r3, r3, #4
 8005de6:	4313      	orrs	r3, r2
 8005de8:	68fa      	ldr	r2, [r7, #12]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3718      	adds	r7, #24
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e50:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005e58:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e60:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005e68:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d110      	bne.n	8005e92 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e70:	7bfb      	ldrb	r3, [r7, #15]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d102      	bne.n	8005e7c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e76:	7b7b      	ldrb	r3, [r7, #13]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d001      	beq.n	8005e80 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e069      	b.n	8005f54 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2202      	movs	r2, #2
 8005e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2202      	movs	r2, #2
 8005e8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e90:	e031      	b.n	8005ef6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	2b04      	cmp	r3, #4
 8005e96:	d110      	bne.n	8005eba <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e98:	7bbb      	ldrb	r3, [r7, #14]
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d102      	bne.n	8005ea4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e9e:	7b3b      	ldrb	r3, [r7, #12]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d001      	beq.n	8005ea8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e055      	b.n	8005f54 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005eb8:	e01d      	b.n	8005ef6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005eba:	7bfb      	ldrb	r3, [r7, #15]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d108      	bne.n	8005ed2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ec0:	7bbb      	ldrb	r3, [r7, #14]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d105      	bne.n	8005ed2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ec6:	7b7b      	ldrb	r3, [r7, #13]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d102      	bne.n	8005ed2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ecc:	7b3b      	ldrb	r3, [r7, #12]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d001      	beq.n	8005ed6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e03e      	b.n	8005f54 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2202      	movs	r2, #2
 8005eda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2202      	movs	r2, #2
 8005eea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2202      	movs	r2, #2
 8005ef2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d003      	beq.n	8005f04 <HAL_TIM_Encoder_Start+0xc4>
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	2b04      	cmp	r3, #4
 8005f00:	d008      	beq.n	8005f14 <HAL_TIM_Encoder_Start+0xd4>
 8005f02:	e00f      	b.n	8005f24 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	2100      	movs	r1, #0
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f000 fdb7 	bl	8006a80 <TIM_CCxChannelCmd>
      break;
 8005f12:	e016      	b.n	8005f42 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	2104      	movs	r1, #4
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f000 fdaf 	bl	8006a80 <TIM_CCxChannelCmd>
      break;
 8005f22:	e00e      	b.n	8005f42 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f000 fda7 	bl	8006a80 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2201      	movs	r2, #1
 8005f38:	2104      	movs	r1, #4
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f000 fda0 	bl	8006a80 <TIM_CCxChannelCmd>
      break;
 8005f40:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f042 0201 	orr.w	r2, r2, #1
 8005f50:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3710      	adds	r7, #16
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	f003 0302 	and.w	r3, r3, #2
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d020      	beq.n	8005fc0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f003 0302 	and.w	r3, r3, #2
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d01b      	beq.n	8005fc0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f06f 0202 	mvn.w	r2, #2
 8005f90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2201      	movs	r2, #1
 8005f96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	f003 0303 	and.w	r3, r3, #3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d003      	beq.n	8005fae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 fa5b 	bl	8006462 <HAL_TIM_IC_CaptureCallback>
 8005fac:	e005      	b.n	8005fba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 fa4d 	bl	800644e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 fa5e 	bl	8006476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	f003 0304 	and.w	r3, r3, #4
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d020      	beq.n	800600c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f003 0304 	and.w	r3, r3, #4
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d01b      	beq.n	800600c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f06f 0204 	mvn.w	r2, #4
 8005fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2202      	movs	r2, #2
 8005fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d003      	beq.n	8005ffa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 fa35 	bl	8006462 <HAL_TIM_IC_CaptureCallback>
 8005ff8:	e005      	b.n	8006006 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 fa27 	bl	800644e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 fa38 	bl	8006476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	f003 0308 	and.w	r3, r3, #8
 8006012:	2b00      	cmp	r3, #0
 8006014:	d020      	beq.n	8006058 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f003 0308 	and.w	r3, r3, #8
 800601c:	2b00      	cmp	r3, #0
 800601e:	d01b      	beq.n	8006058 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f06f 0208 	mvn.w	r2, #8
 8006028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2204      	movs	r2, #4
 800602e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	69db      	ldr	r3, [r3, #28]
 8006036:	f003 0303 	and.w	r3, r3, #3
 800603a:	2b00      	cmp	r3, #0
 800603c:	d003      	beq.n	8006046 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 fa0f 	bl	8006462 <HAL_TIM_IC_CaptureCallback>
 8006044:	e005      	b.n	8006052 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 fa01 	bl	800644e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 fa12 	bl	8006476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	f003 0310 	and.w	r3, r3, #16
 800605e:	2b00      	cmp	r3, #0
 8006060:	d020      	beq.n	80060a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f003 0310 	and.w	r3, r3, #16
 8006068:	2b00      	cmp	r3, #0
 800606a:	d01b      	beq.n	80060a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f06f 0210 	mvn.w	r2, #16
 8006074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2208      	movs	r2, #8
 800607a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	69db      	ldr	r3, [r3, #28]
 8006082:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006086:	2b00      	cmp	r3, #0
 8006088:	d003      	beq.n	8006092 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f9e9 	bl	8006462 <HAL_TIM_IC_CaptureCallback>
 8006090:	e005      	b.n	800609e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f9db 	bl	800644e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 f9ec 	bl	8006476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00c      	beq.n	80060c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f003 0301 	and.w	r3, r3, #1
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d007      	beq.n	80060c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f06f 0201 	mvn.w	r2, #1
 80060c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f7fd fe32 	bl	8003d2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00c      	beq.n	80060ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d007      	beq.n	80060ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80060e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 fd76 	bl	8006bd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00c      	beq.n	8006110 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d007      	beq.n	8006110 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f9bd 	bl	800648a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	f003 0320 	and.w	r3, r3, #32
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00c      	beq.n	8006134 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f003 0320 	and.w	r3, r3, #32
 8006120:	2b00      	cmp	r3, #0
 8006122:	d007      	beq.n	8006134 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f06f 0220 	mvn.w	r2, #32
 800612c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 fd48 	bl	8006bc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006134:	bf00      	nop
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b086      	sub	sp, #24
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006148:	2300      	movs	r3, #0
 800614a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006152:	2b01      	cmp	r3, #1
 8006154:	d101      	bne.n	800615a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006156:	2302      	movs	r3, #2
 8006158:	e0ae      	b.n	80062b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2b0c      	cmp	r3, #12
 8006166:	f200 809f 	bhi.w	80062a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800616a:	a201      	add	r2, pc, #4	@ (adr r2, 8006170 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800616c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006170:	080061a5 	.word	0x080061a5
 8006174:	080062a9 	.word	0x080062a9
 8006178:	080062a9 	.word	0x080062a9
 800617c:	080062a9 	.word	0x080062a9
 8006180:	080061e5 	.word	0x080061e5
 8006184:	080062a9 	.word	0x080062a9
 8006188:	080062a9 	.word	0x080062a9
 800618c:	080062a9 	.word	0x080062a9
 8006190:	08006227 	.word	0x08006227
 8006194:	080062a9 	.word	0x080062a9
 8006198:	080062a9 	.word	0x080062a9
 800619c:	080062a9 	.word	0x080062a9
 80061a0:	08006267 	.word	0x08006267
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68b9      	ldr	r1, [r7, #8]
 80061aa:	4618      	mov	r0, r3
 80061ac:	f000 fa1e 	bl	80065ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	699a      	ldr	r2, [r3, #24]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f042 0208 	orr.w	r2, r2, #8
 80061be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	699a      	ldr	r2, [r3, #24]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f022 0204 	bic.w	r2, r2, #4
 80061ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	6999      	ldr	r1, [r3, #24]
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	691a      	ldr	r2, [r3, #16]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	430a      	orrs	r2, r1
 80061e0:	619a      	str	r2, [r3, #24]
      break;
 80061e2:	e064      	b.n	80062ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68b9      	ldr	r1, [r7, #8]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 fa6e 	bl	80066cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	699a      	ldr	r2, [r3, #24]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	699a      	ldr	r2, [r3, #24]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800620e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	6999      	ldr	r1, [r3, #24]
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	021a      	lsls	r2, r3, #8
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	430a      	orrs	r2, r1
 8006222:	619a      	str	r2, [r3, #24]
      break;
 8006224:	e043      	b.n	80062ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68b9      	ldr	r1, [r7, #8]
 800622c:	4618      	mov	r0, r3
 800622e:	f000 fac3 	bl	80067b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	69da      	ldr	r2, [r3, #28]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f042 0208 	orr.w	r2, r2, #8
 8006240:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	69da      	ldr	r2, [r3, #28]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f022 0204 	bic.w	r2, r2, #4
 8006250:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	69d9      	ldr	r1, [r3, #28]
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	691a      	ldr	r2, [r3, #16]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	430a      	orrs	r2, r1
 8006262:	61da      	str	r2, [r3, #28]
      break;
 8006264:	e023      	b.n	80062ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68b9      	ldr	r1, [r7, #8]
 800626c:	4618      	mov	r0, r3
 800626e:	f000 fb17 	bl	80068a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	69da      	ldr	r2, [r3, #28]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006280:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	69da      	ldr	r2, [r3, #28]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006290:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	69d9      	ldr	r1, [r3, #28]
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	021a      	lsls	r2, r3, #8
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	430a      	orrs	r2, r1
 80062a4:	61da      	str	r2, [r3, #28]
      break;
 80062a6:	e002      	b.n	80062ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	75fb      	strb	r3, [r7, #23]
      break;
 80062ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80062b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3718      	adds	r7, #24
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062ca:	2300      	movs	r3, #0
 80062cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d101      	bne.n	80062dc <HAL_TIM_ConfigClockSource+0x1c>
 80062d8:	2302      	movs	r3, #2
 80062da:	e0b4      	b.n	8006446 <HAL_TIM_ConfigClockSource+0x186>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2202      	movs	r2, #2
 80062e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80062fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006302:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68ba      	ldr	r2, [r7, #8]
 800630a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006314:	d03e      	beq.n	8006394 <HAL_TIM_ConfigClockSource+0xd4>
 8006316:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800631a:	f200 8087 	bhi.w	800642c <HAL_TIM_ConfigClockSource+0x16c>
 800631e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006322:	f000 8086 	beq.w	8006432 <HAL_TIM_ConfigClockSource+0x172>
 8006326:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800632a:	d87f      	bhi.n	800642c <HAL_TIM_ConfigClockSource+0x16c>
 800632c:	2b70      	cmp	r3, #112	@ 0x70
 800632e:	d01a      	beq.n	8006366 <HAL_TIM_ConfigClockSource+0xa6>
 8006330:	2b70      	cmp	r3, #112	@ 0x70
 8006332:	d87b      	bhi.n	800642c <HAL_TIM_ConfigClockSource+0x16c>
 8006334:	2b60      	cmp	r3, #96	@ 0x60
 8006336:	d050      	beq.n	80063da <HAL_TIM_ConfigClockSource+0x11a>
 8006338:	2b60      	cmp	r3, #96	@ 0x60
 800633a:	d877      	bhi.n	800642c <HAL_TIM_ConfigClockSource+0x16c>
 800633c:	2b50      	cmp	r3, #80	@ 0x50
 800633e:	d03c      	beq.n	80063ba <HAL_TIM_ConfigClockSource+0xfa>
 8006340:	2b50      	cmp	r3, #80	@ 0x50
 8006342:	d873      	bhi.n	800642c <HAL_TIM_ConfigClockSource+0x16c>
 8006344:	2b40      	cmp	r3, #64	@ 0x40
 8006346:	d058      	beq.n	80063fa <HAL_TIM_ConfigClockSource+0x13a>
 8006348:	2b40      	cmp	r3, #64	@ 0x40
 800634a:	d86f      	bhi.n	800642c <HAL_TIM_ConfigClockSource+0x16c>
 800634c:	2b30      	cmp	r3, #48	@ 0x30
 800634e:	d064      	beq.n	800641a <HAL_TIM_ConfigClockSource+0x15a>
 8006350:	2b30      	cmp	r3, #48	@ 0x30
 8006352:	d86b      	bhi.n	800642c <HAL_TIM_ConfigClockSource+0x16c>
 8006354:	2b20      	cmp	r3, #32
 8006356:	d060      	beq.n	800641a <HAL_TIM_ConfigClockSource+0x15a>
 8006358:	2b20      	cmp	r3, #32
 800635a:	d867      	bhi.n	800642c <HAL_TIM_ConfigClockSource+0x16c>
 800635c:	2b00      	cmp	r3, #0
 800635e:	d05c      	beq.n	800641a <HAL_TIM_ConfigClockSource+0x15a>
 8006360:	2b10      	cmp	r3, #16
 8006362:	d05a      	beq.n	800641a <HAL_TIM_ConfigClockSource+0x15a>
 8006364:	e062      	b.n	800642c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006376:	f000 fb63 	bl	8006a40 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006388:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	609a      	str	r2, [r3, #8]
      break;
 8006392:	e04f      	b.n	8006434 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063a4:	f000 fb4c 	bl	8006a40 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	689a      	ldr	r2, [r3, #8]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063b6:	609a      	str	r2, [r3, #8]
      break;
 80063b8:	e03c      	b.n	8006434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063c6:	461a      	mov	r2, r3
 80063c8:	f000 fac0 	bl	800694c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2150      	movs	r1, #80	@ 0x50
 80063d2:	4618      	mov	r0, r3
 80063d4:	f000 fb19 	bl	8006a0a <TIM_ITRx_SetConfig>
      break;
 80063d8:	e02c      	b.n	8006434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80063e6:	461a      	mov	r2, r3
 80063e8:	f000 fadf 	bl	80069aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2160      	movs	r1, #96	@ 0x60
 80063f2:	4618      	mov	r0, r3
 80063f4:	f000 fb09 	bl	8006a0a <TIM_ITRx_SetConfig>
      break;
 80063f8:	e01c      	b.n	8006434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006406:	461a      	mov	r2, r3
 8006408:	f000 faa0 	bl	800694c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2140      	movs	r1, #64	@ 0x40
 8006412:	4618      	mov	r0, r3
 8006414:	f000 faf9 	bl	8006a0a <TIM_ITRx_SetConfig>
      break;
 8006418:	e00c      	b.n	8006434 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4619      	mov	r1, r3
 8006424:	4610      	mov	r0, r2
 8006426:	f000 faf0 	bl	8006a0a <TIM_ITRx_SetConfig>
      break;
 800642a:	e003      	b.n	8006434 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	73fb      	strb	r3, [r7, #15]
      break;
 8006430:	e000      	b.n	8006434 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006432:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006444:	7bfb      	ldrb	r3, [r7, #15]
}
 8006446:	4618      	mov	r0, r3
 8006448:	3710      	adds	r7, #16
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}

0800644e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800644e:	b480      	push	{r7}
 8006450:	b083      	sub	sp, #12
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006456:	bf00      	nop
 8006458:	370c      	adds	r7, #12
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006462:	b480      	push	{r7}
 8006464:	b083      	sub	sp, #12
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800646a:	bf00      	nop
 800646c:	370c      	adds	r7, #12
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr

08006476 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006476:	b480      	push	{r7}
 8006478:	b083      	sub	sp, #12
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800647e:	bf00      	nop
 8006480:	370c      	adds	r7, #12
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800648a:	b480      	push	{r7}
 800648c:	b083      	sub	sp, #12
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006492:	bf00      	nop
 8006494:	370c      	adds	r7, #12
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
	...

080064a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a43      	ldr	r2, [pc, #268]	@ (80065c0 <TIM_Base_SetConfig+0x120>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d013      	beq.n	80064e0 <TIM_Base_SetConfig+0x40>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064be:	d00f      	beq.n	80064e0 <TIM_Base_SetConfig+0x40>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a40      	ldr	r2, [pc, #256]	@ (80065c4 <TIM_Base_SetConfig+0x124>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d00b      	beq.n	80064e0 <TIM_Base_SetConfig+0x40>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a3f      	ldr	r2, [pc, #252]	@ (80065c8 <TIM_Base_SetConfig+0x128>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d007      	beq.n	80064e0 <TIM_Base_SetConfig+0x40>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a3e      	ldr	r2, [pc, #248]	@ (80065cc <TIM_Base_SetConfig+0x12c>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d003      	beq.n	80064e0 <TIM_Base_SetConfig+0x40>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a3d      	ldr	r2, [pc, #244]	@ (80065d0 <TIM_Base_SetConfig+0x130>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d108      	bne.n	80064f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a32      	ldr	r2, [pc, #200]	@ (80065c0 <TIM_Base_SetConfig+0x120>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d02b      	beq.n	8006552 <TIM_Base_SetConfig+0xb2>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006500:	d027      	beq.n	8006552 <TIM_Base_SetConfig+0xb2>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a2f      	ldr	r2, [pc, #188]	@ (80065c4 <TIM_Base_SetConfig+0x124>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d023      	beq.n	8006552 <TIM_Base_SetConfig+0xb2>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a2e      	ldr	r2, [pc, #184]	@ (80065c8 <TIM_Base_SetConfig+0x128>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d01f      	beq.n	8006552 <TIM_Base_SetConfig+0xb2>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a2d      	ldr	r2, [pc, #180]	@ (80065cc <TIM_Base_SetConfig+0x12c>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d01b      	beq.n	8006552 <TIM_Base_SetConfig+0xb2>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a2c      	ldr	r2, [pc, #176]	@ (80065d0 <TIM_Base_SetConfig+0x130>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d017      	beq.n	8006552 <TIM_Base_SetConfig+0xb2>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a2b      	ldr	r2, [pc, #172]	@ (80065d4 <TIM_Base_SetConfig+0x134>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d013      	beq.n	8006552 <TIM_Base_SetConfig+0xb2>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a2a      	ldr	r2, [pc, #168]	@ (80065d8 <TIM_Base_SetConfig+0x138>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d00f      	beq.n	8006552 <TIM_Base_SetConfig+0xb2>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a29      	ldr	r2, [pc, #164]	@ (80065dc <TIM_Base_SetConfig+0x13c>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d00b      	beq.n	8006552 <TIM_Base_SetConfig+0xb2>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a28      	ldr	r2, [pc, #160]	@ (80065e0 <TIM_Base_SetConfig+0x140>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d007      	beq.n	8006552 <TIM_Base_SetConfig+0xb2>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a27      	ldr	r2, [pc, #156]	@ (80065e4 <TIM_Base_SetConfig+0x144>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d003      	beq.n	8006552 <TIM_Base_SetConfig+0xb2>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a26      	ldr	r2, [pc, #152]	@ (80065e8 <TIM_Base_SetConfig+0x148>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d108      	bne.n	8006564 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006558:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	4313      	orrs	r3, r2
 8006562:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	695b      	ldr	r3, [r3, #20]
 800656e:	4313      	orrs	r3, r2
 8006570:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	689a      	ldr	r2, [r3, #8]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a0e      	ldr	r2, [pc, #56]	@ (80065c0 <TIM_Base_SetConfig+0x120>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d003      	beq.n	8006592 <TIM_Base_SetConfig+0xf2>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a10      	ldr	r2, [pc, #64]	@ (80065d0 <TIM_Base_SetConfig+0x130>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d103      	bne.n	800659a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	691a      	ldr	r2, [r3, #16]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f043 0204 	orr.w	r2, r3, #4
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2201      	movs	r2, #1
 80065aa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	601a      	str	r2, [r3, #0]
}
 80065b2:	bf00      	nop
 80065b4:	3714      	adds	r7, #20
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop
 80065c0:	40010000 	.word	0x40010000
 80065c4:	40000400 	.word	0x40000400
 80065c8:	40000800 	.word	0x40000800
 80065cc:	40000c00 	.word	0x40000c00
 80065d0:	40010400 	.word	0x40010400
 80065d4:	40014000 	.word	0x40014000
 80065d8:	40014400 	.word	0x40014400
 80065dc:	40014800 	.word	0x40014800
 80065e0:	40001800 	.word	0x40001800
 80065e4:	40001c00 	.word	0x40001c00
 80065e8:	40002000 	.word	0x40002000

080065ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b087      	sub	sp, #28
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a1b      	ldr	r3, [r3, #32]
 8006600:	f023 0201 	bic.w	r2, r3, #1
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800661a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f023 0303 	bic.w	r3, r3, #3
 8006622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	4313      	orrs	r3, r2
 800662c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	f023 0302 	bic.w	r3, r3, #2
 8006634:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	4313      	orrs	r3, r2
 800663e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a20      	ldr	r2, [pc, #128]	@ (80066c4 <TIM_OC1_SetConfig+0xd8>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d003      	beq.n	8006650 <TIM_OC1_SetConfig+0x64>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a1f      	ldr	r2, [pc, #124]	@ (80066c8 <TIM_OC1_SetConfig+0xdc>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d10c      	bne.n	800666a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	f023 0308 	bic.w	r3, r3, #8
 8006656:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	697a      	ldr	r2, [r7, #20]
 800665e:	4313      	orrs	r3, r2
 8006660:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	f023 0304 	bic.w	r3, r3, #4
 8006668:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a15      	ldr	r2, [pc, #84]	@ (80066c4 <TIM_OC1_SetConfig+0xd8>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d003      	beq.n	800667a <TIM_OC1_SetConfig+0x8e>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a14      	ldr	r2, [pc, #80]	@ (80066c8 <TIM_OC1_SetConfig+0xdc>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d111      	bne.n	800669e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006680:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006688:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	695b      	ldr	r3, [r3, #20]
 800668e:	693a      	ldr	r2, [r7, #16]
 8006690:	4313      	orrs	r3, r2
 8006692:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	699b      	ldr	r3, [r3, #24]
 8006698:	693a      	ldr	r2, [r7, #16]
 800669a:	4313      	orrs	r3, r2
 800669c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	685a      	ldr	r2, [r3, #4]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	697a      	ldr	r2, [r7, #20]
 80066b6:	621a      	str	r2, [r3, #32]
}
 80066b8:	bf00      	nop
 80066ba:	371c      	adds	r7, #28
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr
 80066c4:	40010000 	.word	0x40010000
 80066c8:	40010400 	.word	0x40010400

080066cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b087      	sub	sp, #28
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a1b      	ldr	r3, [r3, #32]
 80066e0:	f023 0210 	bic.w	r2, r3, #16
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006702:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	021b      	lsls	r3, r3, #8
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	4313      	orrs	r3, r2
 800670e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	f023 0320 	bic.w	r3, r3, #32
 8006716:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	011b      	lsls	r3, r3, #4
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	4313      	orrs	r3, r2
 8006722:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a22      	ldr	r2, [pc, #136]	@ (80067b0 <TIM_OC2_SetConfig+0xe4>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d003      	beq.n	8006734 <TIM_OC2_SetConfig+0x68>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a21      	ldr	r2, [pc, #132]	@ (80067b4 <TIM_OC2_SetConfig+0xe8>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d10d      	bne.n	8006750 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800673a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	011b      	lsls	r3, r3, #4
 8006742:	697a      	ldr	r2, [r7, #20]
 8006744:	4313      	orrs	r3, r2
 8006746:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800674e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a17      	ldr	r2, [pc, #92]	@ (80067b0 <TIM_OC2_SetConfig+0xe4>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d003      	beq.n	8006760 <TIM_OC2_SetConfig+0x94>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a16      	ldr	r2, [pc, #88]	@ (80067b4 <TIM_OC2_SetConfig+0xe8>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d113      	bne.n	8006788 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006766:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800676e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	695b      	ldr	r3, [r3, #20]
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	693a      	ldr	r2, [r7, #16]
 8006778:	4313      	orrs	r3, r2
 800677a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	693a      	ldr	r2, [r7, #16]
 8006784:	4313      	orrs	r3, r2
 8006786:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	693a      	ldr	r2, [r7, #16]
 800678c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	685a      	ldr	r2, [r3, #4]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	697a      	ldr	r2, [r7, #20]
 80067a0:	621a      	str	r2, [r3, #32]
}
 80067a2:	bf00      	nop
 80067a4:	371c      	adds	r7, #28
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	40010000 	.word	0x40010000
 80067b4:	40010400 	.word	0x40010400

080067b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b087      	sub	sp, #28
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6a1b      	ldr	r3, [r3, #32]
 80067cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	69db      	ldr	r3, [r3, #28]
 80067de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f023 0303 	bic.w	r3, r3, #3
 80067ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	021b      	lsls	r3, r3, #8
 8006808:	697a      	ldr	r2, [r7, #20]
 800680a:	4313      	orrs	r3, r2
 800680c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a21      	ldr	r2, [pc, #132]	@ (8006898 <TIM_OC3_SetConfig+0xe0>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d003      	beq.n	800681e <TIM_OC3_SetConfig+0x66>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a20      	ldr	r2, [pc, #128]	@ (800689c <TIM_OC3_SetConfig+0xe4>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d10d      	bne.n	800683a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006824:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	021b      	lsls	r3, r3, #8
 800682c:	697a      	ldr	r2, [r7, #20]
 800682e:	4313      	orrs	r3, r2
 8006830:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006838:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a16      	ldr	r2, [pc, #88]	@ (8006898 <TIM_OC3_SetConfig+0xe0>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d003      	beq.n	800684a <TIM_OC3_SetConfig+0x92>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a15      	ldr	r2, [pc, #84]	@ (800689c <TIM_OC3_SetConfig+0xe4>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d113      	bne.n	8006872 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006850:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006858:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	695b      	ldr	r3, [r3, #20]
 800685e:	011b      	lsls	r3, r3, #4
 8006860:	693a      	ldr	r2, [r7, #16]
 8006862:	4313      	orrs	r3, r2
 8006864:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	699b      	ldr	r3, [r3, #24]
 800686a:	011b      	lsls	r3, r3, #4
 800686c:	693a      	ldr	r2, [r7, #16]
 800686e:	4313      	orrs	r3, r2
 8006870:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	693a      	ldr	r2, [r7, #16]
 8006876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	685a      	ldr	r2, [r3, #4]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	621a      	str	r2, [r3, #32]
}
 800688c:	bf00      	nop
 800688e:	371c      	adds	r7, #28
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr
 8006898:	40010000 	.word	0x40010000
 800689c:	40010400 	.word	0x40010400

080068a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b087      	sub	sp, #28
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a1b      	ldr	r3, [r3, #32]
 80068ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a1b      	ldr	r3, [r3, #32]
 80068b4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	69db      	ldr	r3, [r3, #28]
 80068c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	021b      	lsls	r3, r3, #8
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80068ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	031b      	lsls	r3, r3, #12
 80068f2:	693a      	ldr	r2, [r7, #16]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a12      	ldr	r2, [pc, #72]	@ (8006944 <TIM_OC4_SetConfig+0xa4>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d003      	beq.n	8006908 <TIM_OC4_SetConfig+0x68>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a11      	ldr	r2, [pc, #68]	@ (8006948 <TIM_OC4_SetConfig+0xa8>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d109      	bne.n	800691c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800690e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	695b      	ldr	r3, [r3, #20]
 8006914:	019b      	lsls	r3, r3, #6
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	4313      	orrs	r3, r2
 800691a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	685a      	ldr	r2, [r3, #4]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	693a      	ldr	r2, [r7, #16]
 8006934:	621a      	str	r2, [r3, #32]
}
 8006936:	bf00      	nop
 8006938:	371c      	adds	r7, #28
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	40010000 	.word	0x40010000
 8006948:	40010400 	.word	0x40010400

0800694c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800694c:	b480      	push	{r7}
 800694e:	b087      	sub	sp, #28
 8006950:	af00      	add	r7, sp, #0
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6a1b      	ldr	r3, [r3, #32]
 800695c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	f023 0201 	bic.w	r2, r3, #1
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006976:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	011b      	lsls	r3, r3, #4
 800697c:	693a      	ldr	r2, [r7, #16]
 800697e:	4313      	orrs	r3, r2
 8006980:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f023 030a 	bic.w	r3, r3, #10
 8006988:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	4313      	orrs	r3, r2
 8006990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	621a      	str	r2, [r3, #32]
}
 800699e:	bf00      	nop
 80069a0:	371c      	adds	r7, #28
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr

080069aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069aa:	b480      	push	{r7}
 80069ac:	b087      	sub	sp, #28
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	60f8      	str	r0, [r7, #12]
 80069b2:	60b9      	str	r1, [r7, #8]
 80069b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6a1b      	ldr	r3, [r3, #32]
 80069c0:	f023 0210 	bic.w	r2, r3, #16
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	699b      	ldr	r3, [r3, #24]
 80069cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80069d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	031b      	lsls	r3, r3, #12
 80069da:	693a      	ldr	r2, [r7, #16]
 80069dc:	4313      	orrs	r3, r2
 80069de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80069e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	011b      	lsls	r3, r3, #4
 80069ec:	697a      	ldr	r2, [r7, #20]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	621a      	str	r2, [r3, #32]
}
 80069fe:	bf00      	nop
 8006a00:	371c      	adds	r7, #28
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr

08006a0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a0a:	b480      	push	{r7}
 8006a0c:	b085      	sub	sp, #20
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
 8006a12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	f043 0307 	orr.w	r3, r3, #7
 8006a2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	609a      	str	r2, [r3, #8]
}
 8006a34:	bf00      	nop
 8006a36:	3714      	adds	r7, #20
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b087      	sub	sp, #28
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]
 8006a4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	021a      	lsls	r2, r3, #8
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	431a      	orrs	r2, r3
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	697a      	ldr	r2, [r7, #20]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	697a      	ldr	r2, [r7, #20]
 8006a72:	609a      	str	r2, [r3, #8]
}
 8006a74:	bf00      	nop
 8006a76:	371c      	adds	r7, #28
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b087      	sub	sp, #28
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	f003 031f 	and.w	r3, r3, #31
 8006a92:	2201      	movs	r2, #1
 8006a94:	fa02 f303 	lsl.w	r3, r2, r3
 8006a98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6a1a      	ldr	r2, [r3, #32]
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	43db      	mvns	r3, r3
 8006aa2:	401a      	ands	r2, r3
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6a1a      	ldr	r2, [r3, #32]
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	f003 031f 	and.w	r3, r3, #31
 8006ab2:	6879      	ldr	r1, [r7, #4]
 8006ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ab8:	431a      	orrs	r2, r3
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	621a      	str	r2, [r3, #32]
}
 8006abe:	bf00      	nop
 8006ac0:	371c      	adds	r7, #28
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr
	...

08006acc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d101      	bne.n	8006ae4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ae0:	2302      	movs	r3, #2
 8006ae2:	e05a      	b.n	8006b9a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2202      	movs	r2, #2
 8006af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a21      	ldr	r2, [pc, #132]	@ (8006ba8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d022      	beq.n	8006b6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b30:	d01d      	beq.n	8006b6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a1d      	ldr	r2, [pc, #116]	@ (8006bac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d018      	beq.n	8006b6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a1b      	ldr	r2, [pc, #108]	@ (8006bb0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d013      	beq.n	8006b6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a1a      	ldr	r2, [pc, #104]	@ (8006bb4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d00e      	beq.n	8006b6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a18      	ldr	r2, [pc, #96]	@ (8006bb8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d009      	beq.n	8006b6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a17      	ldr	r2, [pc, #92]	@ (8006bbc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d004      	beq.n	8006b6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a15      	ldr	r2, [pc, #84]	@ (8006bc0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d10c      	bne.n	8006b88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68ba      	ldr	r2, [r7, #8]
 8006b86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3714      	adds	r7, #20
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	40010000 	.word	0x40010000
 8006bac:	40000400 	.word	0x40000400
 8006bb0:	40000800 	.word	0x40000800
 8006bb4:	40000c00 	.word	0x40000c00
 8006bb8:	40010400 	.word	0x40010400
 8006bbc:	40014000 	.word	0x40014000
 8006bc0:	40001800 	.word	0x40001800

08006bc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bcc:	bf00      	nop
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006be0:	bf00      	nop
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d101      	bne.n	8006bfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e042      	b.n	8006c84 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d106      	bne.n	8006c18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f7fc fdc6 	bl	80037a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2224      	movs	r2, #36	@ 0x24
 8006c1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68da      	ldr	r2, [r3, #12]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006c2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f001 f8d9 	bl	8007de8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	691a      	ldr	r2, [r3, #16]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	695a      	ldr	r2, [r3, #20]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68da      	ldr	r2, [r3, #12]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2220      	movs	r2, #32
 8006c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2220      	movs	r2, #32
 8006c78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3708      	adds	r7, #8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b08a      	sub	sp, #40	@ 0x28
 8006c90:	af02      	add	r7, sp, #8
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	603b      	str	r3, [r7, #0]
 8006c98:	4613      	mov	r3, r2
 8006c9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	2b20      	cmp	r3, #32
 8006caa:	d175      	bne.n	8006d98 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d002      	beq.n	8006cb8 <HAL_UART_Transmit+0x2c>
 8006cb2:	88fb      	ldrh	r3, [r7, #6]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d101      	bne.n	8006cbc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e06e      	b.n	8006d9a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2221      	movs	r2, #33	@ 0x21
 8006cc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006cca:	f7fd f8c5 	bl	8003e58 <HAL_GetTick>
 8006cce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	88fa      	ldrh	r2, [r7, #6]
 8006cd4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	88fa      	ldrh	r2, [r7, #6]
 8006cda:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ce4:	d108      	bne.n	8006cf8 <HAL_UART_Transmit+0x6c>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d104      	bne.n	8006cf8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	61bb      	str	r3, [r7, #24]
 8006cf6:	e003      	b.n	8006d00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d00:	e02e      	b.n	8006d60 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	9300      	str	r3, [sp, #0]
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	2180      	movs	r1, #128	@ 0x80
 8006d0c:	68f8      	ldr	r0, [r7, #12]
 8006d0e:	f000 fdaa 	bl	8007866 <UART_WaitOnFlagUntilTimeout>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d005      	beq.n	8006d24 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2220      	movs	r2, #32
 8006d1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e03a      	b.n	8006d9a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d10b      	bne.n	8006d42 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	881b      	ldrh	r3, [r3, #0]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	3302      	adds	r3, #2
 8006d3e:	61bb      	str	r3, [r7, #24]
 8006d40:	e007      	b.n	8006d52 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	781a      	ldrb	r2, [r3, #0]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	3301      	adds	r3, #1
 8006d50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1cb      	bne.n	8006d02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	9300      	str	r3, [sp, #0]
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	2200      	movs	r2, #0
 8006d72:	2140      	movs	r1, #64	@ 0x40
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f000 fd76 	bl	8007866 <UART_WaitOnFlagUntilTimeout>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d005      	beq.n	8006d8c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2220      	movs	r2, #32
 8006d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	e006      	b.n	8006d9a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2220      	movs	r2, #32
 8006d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006d94:	2300      	movs	r3, #0
 8006d96:	e000      	b.n	8006d9a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006d98:	2302      	movs	r3, #2
  }
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3720      	adds	r7, #32
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
	...

08006da4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b08c      	sub	sp, #48	@ 0x30
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	4613      	mov	r3, r2
 8006db0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	2b20      	cmp	r3, #32
 8006dbc:	d162      	bne.n	8006e84 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d002      	beq.n	8006dca <HAL_UART_Transmit_DMA+0x26>
 8006dc4:	88fb      	ldrh	r3, [r7, #6]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d101      	bne.n	8006dce <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e05b      	b.n	8006e86 <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 8006dce:	68ba      	ldr	r2, [r7, #8]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	88fa      	ldrh	r2, [r7, #6]
 8006dd8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	88fa      	ldrh	r2, [r7, #6]
 8006dde:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2221      	movs	r2, #33	@ 0x21
 8006dea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df2:	4a27      	ldr	r2, [pc, #156]	@ (8006e90 <HAL_UART_Transmit_DMA+0xec>)
 8006df4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dfa:	4a26      	ldr	r2, [pc, #152]	@ (8006e94 <HAL_UART_Transmit_DMA+0xf0>)
 8006dfc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e02:	4a25      	ldr	r2, [pc, #148]	@ (8006e98 <HAL_UART_Transmit_DMA+0xf4>)
 8006e04:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006e0e:	f107 0308 	add.w	r3, r7, #8
 8006e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e1a:	6819      	ldr	r1, [r3, #0]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	3304      	adds	r3, #4
 8006e22:	461a      	mov	r2, r3
 8006e24:	88fb      	ldrh	r3, [r7, #6]
 8006e26:	f7fd f9b3 	bl	8004190 <HAL_DMA_Start_IT>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d008      	beq.n	8006e42 <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2210      	movs	r2, #16
 8006e34:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2220      	movs	r2, #32
 8006e3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e021      	b.n	8006e86 <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006e4a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	3314      	adds	r3, #20
 8006e52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	e853 3f00 	ldrex	r3, [r3]
 8006e5a:	617b      	str	r3, [r7, #20]
   return(result);
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	3314      	adds	r3, #20
 8006e6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e6c:	627a      	str	r2, [r7, #36]	@ 0x24
 8006e6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e70:	6a39      	ldr	r1, [r7, #32]
 8006e72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e74:	e841 2300 	strex	r3, r2, [r1]
 8006e78:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d1e5      	bne.n	8006e4c <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 8006e80:	2300      	movs	r3, #0
 8006e82:	e000      	b.n	8006e86 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8006e84:	2302      	movs	r3, #2
  }
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3730      	adds	r7, #48	@ 0x30
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	080075b5 	.word	0x080075b5
 8006e94:	0800764f 	.word	0x0800764f
 8006e98:	080077d3 	.word	0x080077d3

08006e9c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	2b20      	cmp	r3, #32
 8006eb4:	d112      	bne.n	8006edc <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d002      	beq.n	8006ec2 <HAL_UART_Receive_DMA+0x26>
 8006ebc:	88fb      	ldrh	r3, [r7, #6]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d101      	bne.n	8006ec6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e00b      	b.n	8006ede <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006ecc:	88fb      	ldrh	r3, [r7, #6]
 8006ece:	461a      	mov	r2, r3
 8006ed0:	68b9      	ldr	r1, [r7, #8]
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	f000 fd20 	bl	8007918 <UART_Start_Receive_DMA>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	e000      	b.n	8006ede <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006edc:	2302      	movs	r3, #2
  }
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b090      	sub	sp, #64	@ 0x40
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	695b      	ldr	r3, [r3, #20]
 8006ef8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006efc:	2b80      	cmp	r3, #128	@ 0x80
 8006efe:	bf0c      	ite	eq
 8006f00:	2301      	moveq	r3, #1
 8006f02:	2300      	movne	r3, #0
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	2b21      	cmp	r3, #33	@ 0x21
 8006f12:	d128      	bne.n	8006f66 <HAL_UART_DMAStop+0x80>
 8006f14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d025      	beq.n	8006f66 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	3314      	adds	r3, #20
 8006f20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f24:	e853 3f00 	ldrex	r3, [r3]
 8006f28:	623b      	str	r3, [r7, #32]
   return(result);
 8006f2a:	6a3b      	ldr	r3, [r7, #32]
 8006f2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f30:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	3314      	adds	r3, #20
 8006f38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f3a:	633a      	str	r2, [r7, #48]	@ 0x30
 8006f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f42:	e841 2300 	strex	r3, r2, [r1]
 8006f46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1e5      	bne.n	8006f1a <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d004      	beq.n	8006f60 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7fd f970 	bl	8004240 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 fd7f 	bl	8007a64 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	695b      	ldr	r3, [r3, #20]
 8006f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f70:	2b40      	cmp	r3, #64	@ 0x40
 8006f72:	bf0c      	ite	eq
 8006f74:	2301      	moveq	r3, #1
 8006f76:	2300      	movne	r3, #0
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	2b22      	cmp	r3, #34	@ 0x22
 8006f86:	d128      	bne.n	8006fda <HAL_UART_DMAStop+0xf4>
 8006f88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d025      	beq.n	8006fda <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	3314      	adds	r3, #20
 8006f94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	e853 3f00 	ldrex	r3, [r3]
 8006f9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	3314      	adds	r3, #20
 8006fac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006fae:	61fa      	str	r2, [r7, #28]
 8006fb0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb2:	69b9      	ldr	r1, [r7, #24]
 8006fb4:	69fa      	ldr	r2, [r7, #28]
 8006fb6:	e841 2300 	strex	r3, r2, [r1]
 8006fba:	617b      	str	r3, [r7, #20]
   return(result);
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1e5      	bne.n	8006f8e <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d004      	beq.n	8006fd4 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7fd f936 	bl	8004240 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 fd6d 	bl	8007ab4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3740      	adds	r7, #64	@ 0x40
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b0ba      	sub	sp, #232	@ 0xe8
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	695b      	ldr	r3, [r3, #20]
 8007006:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800700a:	2300      	movs	r3, #0
 800700c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007010:	2300      	movs	r3, #0
 8007012:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800701a:	f003 030f 	and.w	r3, r3, #15
 800701e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007022:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10f      	bne.n	800704a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800702a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800702e:	f003 0320 	and.w	r3, r3, #32
 8007032:	2b00      	cmp	r3, #0
 8007034:	d009      	beq.n	800704a <HAL_UART_IRQHandler+0x66>
 8007036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800703a:	f003 0320 	and.w	r3, r3, #32
 800703e:	2b00      	cmp	r3, #0
 8007040:	d003      	beq.n	800704a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 fe12 	bl	8007c6c <UART_Receive_IT>
      return;
 8007048:	e273      	b.n	8007532 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800704a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800704e:	2b00      	cmp	r3, #0
 8007050:	f000 80de 	beq.w	8007210 <HAL_UART_IRQHandler+0x22c>
 8007054:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007058:	f003 0301 	and.w	r3, r3, #1
 800705c:	2b00      	cmp	r3, #0
 800705e:	d106      	bne.n	800706e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007064:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007068:	2b00      	cmp	r3, #0
 800706a:	f000 80d1 	beq.w	8007210 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800706e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007072:	f003 0301 	and.w	r3, r3, #1
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00b      	beq.n	8007092 <HAL_UART_IRQHandler+0xae>
 800707a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800707e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007082:	2b00      	cmp	r3, #0
 8007084:	d005      	beq.n	8007092 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800708a:	f043 0201 	orr.w	r2, r3, #1
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007096:	f003 0304 	and.w	r3, r3, #4
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00b      	beq.n	80070b6 <HAL_UART_IRQHandler+0xd2>
 800709e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070a2:	f003 0301 	and.w	r3, r3, #1
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d005      	beq.n	80070b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070ae:	f043 0202 	orr.w	r2, r3, #2
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070ba:	f003 0302 	and.w	r3, r3, #2
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00b      	beq.n	80070da <HAL_UART_IRQHandler+0xf6>
 80070c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070c6:	f003 0301 	and.w	r3, r3, #1
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d005      	beq.n	80070da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070d2:	f043 0204 	orr.w	r2, r3, #4
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80070da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070de:	f003 0308 	and.w	r3, r3, #8
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d011      	beq.n	800710a <HAL_UART_IRQHandler+0x126>
 80070e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070ea:	f003 0320 	and.w	r3, r3, #32
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d105      	bne.n	80070fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80070f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070f6:	f003 0301 	and.w	r3, r3, #1
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d005      	beq.n	800710a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007102:	f043 0208 	orr.w	r2, r3, #8
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800710e:	2b00      	cmp	r3, #0
 8007110:	f000 820a 	beq.w	8007528 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007118:	f003 0320 	and.w	r3, r3, #32
 800711c:	2b00      	cmp	r3, #0
 800711e:	d008      	beq.n	8007132 <HAL_UART_IRQHandler+0x14e>
 8007120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007124:	f003 0320 	and.w	r3, r3, #32
 8007128:	2b00      	cmp	r3, #0
 800712a:	d002      	beq.n	8007132 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 fd9d 	bl	8007c6c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	695b      	ldr	r3, [r3, #20]
 8007138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800713c:	2b40      	cmp	r3, #64	@ 0x40
 800713e:	bf0c      	ite	eq
 8007140:	2301      	moveq	r3, #1
 8007142:	2300      	movne	r3, #0
 8007144:	b2db      	uxtb	r3, r3
 8007146:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800714e:	f003 0308 	and.w	r3, r3, #8
 8007152:	2b00      	cmp	r3, #0
 8007154:	d103      	bne.n	800715e <HAL_UART_IRQHandler+0x17a>
 8007156:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800715a:	2b00      	cmp	r3, #0
 800715c:	d04f      	beq.n	80071fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 fca8 	bl	8007ab4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	695b      	ldr	r3, [r3, #20]
 800716a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800716e:	2b40      	cmp	r3, #64	@ 0x40
 8007170:	d141      	bne.n	80071f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	3314      	adds	r3, #20
 8007178:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800717c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007180:	e853 3f00 	ldrex	r3, [r3]
 8007184:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007188:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800718c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007190:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	3314      	adds	r3, #20
 800719a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800719e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80071a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80071aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80071ae:	e841 2300 	strex	r3, r2, [r1]
 80071b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80071b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1d9      	bne.n	8007172 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d013      	beq.n	80071ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071ca:	4a8a      	ldr	r2, [pc, #552]	@ (80073f4 <HAL_UART_IRQHandler+0x410>)
 80071cc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7fd f8a4 	bl	8004320 <HAL_DMA_Abort_IT>
 80071d8:	4603      	mov	r3, r0
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d016      	beq.n	800720c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80071e8:	4610      	mov	r0, r2
 80071ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071ec:	e00e      	b.n	800720c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 f9ca 	bl	8007588 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071f4:	e00a      	b.n	800720c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 f9c6 	bl	8007588 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071fc:	e006      	b.n	800720c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 f9c2 	bl	8007588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800720a:	e18d      	b.n	8007528 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800720c:	bf00      	nop
    return;
 800720e:	e18b      	b.n	8007528 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007214:	2b01      	cmp	r3, #1
 8007216:	f040 8167 	bne.w	80074e8 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800721a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800721e:	f003 0310 	and.w	r3, r3, #16
 8007222:	2b00      	cmp	r3, #0
 8007224:	f000 8160 	beq.w	80074e8 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8007228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800722c:	f003 0310 	and.w	r3, r3, #16
 8007230:	2b00      	cmp	r3, #0
 8007232:	f000 8159 	beq.w	80074e8 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007236:	2300      	movs	r3, #0
 8007238:	60bb      	str	r3, [r7, #8]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	60bb      	str	r3, [r7, #8]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	60bb      	str	r3, [r7, #8]
 800724a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	695b      	ldr	r3, [r3, #20]
 8007252:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007256:	2b40      	cmp	r3, #64	@ 0x40
 8007258:	f040 80ce 	bne.w	80073f8 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007268:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800726c:	2b00      	cmp	r3, #0
 800726e:	f000 80a9 	beq.w	80073c4 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007276:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800727a:	429a      	cmp	r2, r3
 800727c:	f080 80a2 	bcs.w	80073c4 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007286:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800728c:	69db      	ldr	r3, [r3, #28]
 800728e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007292:	f000 8088 	beq.w	80073a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	330c      	adds	r3, #12
 800729c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80072a4:	e853 3f00 	ldrex	r3, [r3]
 80072a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80072ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80072b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	330c      	adds	r3, #12
 80072be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80072c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80072c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80072ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80072d2:	e841 2300 	strex	r3, r2, [r1]
 80072d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80072da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1d9      	bne.n	8007296 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	3314      	adds	r3, #20
 80072e8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80072ec:	e853 3f00 	ldrex	r3, [r3]
 80072f0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80072f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80072f4:	f023 0301 	bic.w	r3, r3, #1
 80072f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	3314      	adds	r3, #20
 8007302:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007306:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800730a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800730e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007312:	e841 2300 	strex	r3, r2, [r1]
 8007316:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007318:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800731a:	2b00      	cmp	r3, #0
 800731c:	d1e1      	bne.n	80072e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	3314      	adds	r3, #20
 8007324:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007326:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007328:	e853 3f00 	ldrex	r3, [r3]
 800732c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800732e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007330:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007334:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	3314      	adds	r3, #20
 800733e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007342:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007344:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007346:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007348:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800734a:	e841 2300 	strex	r3, r2, [r1]
 800734e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007350:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007352:	2b00      	cmp	r3, #0
 8007354:	d1e3      	bne.n	800731e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2220      	movs	r2, #32
 800735a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	330c      	adds	r3, #12
 800736a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800736e:	e853 3f00 	ldrex	r3, [r3]
 8007372:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007374:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007376:	f023 0310 	bic.w	r3, r3, #16
 800737a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	330c      	adds	r3, #12
 8007384:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007388:	65ba      	str	r2, [r7, #88]	@ 0x58
 800738a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800738e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007390:	e841 2300 	strex	r3, r2, [r1]
 8007394:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007396:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007398:	2b00      	cmp	r3, #0
 800739a:	d1e3      	bne.n	8007364 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073a0:	4618      	mov	r0, r3
 80073a2:	f7fc ff4d 	bl	8004240 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2202      	movs	r2, #2
 80073aa:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	1ad3      	subs	r3, r2, r3
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	4619      	mov	r1, r3
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 f8ed 	bl	800759c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80073c2:	e0b3      	b.n	800752c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80073c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80073cc:	429a      	cmp	r2, r3
 80073ce:	f040 80ad 	bne.w	800752c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073d6:	69db      	ldr	r3, [r3, #28]
 80073d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073dc:	f040 80a6 	bne.w	800752c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2202      	movs	r2, #2
 80073e4:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80073ea:	4619      	mov	r1, r3
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 f8d5 	bl	800759c <HAL_UARTEx_RxEventCallback>
      return;
 80073f2:	e09b      	b.n	800752c <HAL_UART_IRQHandler+0x548>
 80073f4:	08007b7b 	.word	0x08007b7b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007400:	b29b      	uxth	r3, r3
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800740c:	b29b      	uxth	r3, r3
 800740e:	2b00      	cmp	r3, #0
 8007410:	f000 808e 	beq.w	8007530 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8007414:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007418:	2b00      	cmp	r3, #0
 800741a:	f000 8089 	beq.w	8007530 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	330c      	adds	r3, #12
 8007424:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007428:	e853 3f00 	ldrex	r3, [r3]
 800742c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800742e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007430:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007434:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	330c      	adds	r3, #12
 800743e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007442:	647a      	str	r2, [r7, #68]	@ 0x44
 8007444:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007446:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007448:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800744a:	e841 2300 	strex	r3, r2, [r1]
 800744e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007450:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1e3      	bne.n	800741e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	3314      	adds	r3, #20
 800745c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007460:	e853 3f00 	ldrex	r3, [r3]
 8007464:	623b      	str	r3, [r7, #32]
   return(result);
 8007466:	6a3b      	ldr	r3, [r7, #32]
 8007468:	f023 0301 	bic.w	r3, r3, #1
 800746c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	3314      	adds	r3, #20
 8007476:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800747a:	633a      	str	r2, [r7, #48]	@ 0x30
 800747c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007480:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007482:	e841 2300 	strex	r3, r2, [r1]
 8007486:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1e3      	bne.n	8007456 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2220      	movs	r2, #32
 8007492:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	330c      	adds	r3, #12
 80074a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	e853 3f00 	ldrex	r3, [r3]
 80074aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f023 0310 	bic.w	r3, r3, #16
 80074b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	330c      	adds	r3, #12
 80074bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80074c0:	61fa      	str	r2, [r7, #28]
 80074c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c4:	69b9      	ldr	r1, [r7, #24]
 80074c6:	69fa      	ldr	r2, [r7, #28]
 80074c8:	e841 2300 	strex	r3, r2, [r1]
 80074cc:	617b      	str	r3, [r7, #20]
   return(result);
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1e3      	bne.n	800749c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2202      	movs	r2, #2
 80074d8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80074da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80074de:	4619      	mov	r1, r3
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 f85b 	bl	800759c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80074e6:	e023      	b.n	8007530 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80074e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d009      	beq.n	8007508 <HAL_UART_IRQHandler+0x524>
 80074f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d003      	beq.n	8007508 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 fb4b 	bl	8007b9c <UART_Transmit_IT>
    return;
 8007506:	e014      	b.n	8007532 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800750c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00e      	beq.n	8007532 <HAL_UART_IRQHandler+0x54e>
 8007514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800751c:	2b00      	cmp	r3, #0
 800751e:	d008      	beq.n	8007532 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 fb8b 	bl	8007c3c <UART_EndTransmit_IT>
    return;
 8007526:	e004      	b.n	8007532 <HAL_UART_IRQHandler+0x54e>
    return;
 8007528:	bf00      	nop
 800752a:	e002      	b.n	8007532 <HAL_UART_IRQHandler+0x54e>
      return;
 800752c:	bf00      	nop
 800752e:	e000      	b.n	8007532 <HAL_UART_IRQHandler+0x54e>
      return;
 8007530:	bf00      	nop
  }
}
 8007532:	37e8      	adds	r7, #232	@ 0xe8
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007540:	bf00      	nop
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007554:	bf00      	nop
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007568:	bf00      	nop
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800757c:	bf00      	nop
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007590:	bf00      	nop
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	460b      	mov	r3, r1
 80075a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80075a8:	bf00      	nop
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b090      	sub	sp, #64	@ 0x40
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d137      	bne.n	8007640 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80075d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075d2:	2200      	movs	r2, #0
 80075d4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80075d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	3314      	adds	r3, #20
 80075dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e0:	e853 3f00 	ldrex	r3, [r3]
 80075e4:	623b      	str	r3, [r7, #32]
   return(result);
 80075e6:	6a3b      	ldr	r3, [r7, #32]
 80075e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80075ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	3314      	adds	r3, #20
 80075f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80075f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80075f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075fe:	e841 2300 	strex	r3, r2, [r1]
 8007602:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007606:	2b00      	cmp	r3, #0
 8007608:	d1e5      	bne.n	80075d6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800760a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	330c      	adds	r3, #12
 8007610:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	e853 3f00 	ldrex	r3, [r3]
 8007618:	60fb      	str	r3, [r7, #12]
   return(result);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007620:	637b      	str	r3, [r7, #52]	@ 0x34
 8007622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	330c      	adds	r3, #12
 8007628:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800762a:	61fa      	str	r2, [r7, #28]
 800762c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800762e:	69b9      	ldr	r1, [r7, #24]
 8007630:	69fa      	ldr	r2, [r7, #28]
 8007632:	e841 2300 	strex	r3, r2, [r1]
 8007636:	617b      	str	r3, [r7, #20]
   return(result);
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1e5      	bne.n	800760a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800763e:	e002      	b.n	8007646 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007640:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007642:	f7ff ff79 	bl	8007538 <HAL_UART_TxCpltCallback>
}
 8007646:	bf00      	nop
 8007648:	3740      	adds	r7, #64	@ 0x40
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b084      	sub	sp, #16
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800765a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800765c:	68f8      	ldr	r0, [r7, #12]
 800765e:	f7ff ff75 	bl	800754c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007662:	bf00      	nop
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b09c      	sub	sp, #112	@ 0x70
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007676:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007682:	2b00      	cmp	r3, #0
 8007684:	d172      	bne.n	800776c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007686:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007688:	2200      	movs	r2, #0
 800768a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800768c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	330c      	adds	r3, #12
 8007692:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007694:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007696:	e853 3f00 	ldrex	r3, [r3]
 800769a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800769c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800769e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076a2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80076a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	330c      	adds	r3, #12
 80076aa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80076ac:	65ba      	str	r2, [r7, #88]	@ 0x58
 80076ae:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80076b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80076b4:	e841 2300 	strex	r3, r2, [r1]
 80076b8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80076ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d1e5      	bne.n	800768c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	3314      	adds	r3, #20
 80076c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ca:	e853 3f00 	ldrex	r3, [r3]
 80076ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80076d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076d2:	f023 0301 	bic.w	r3, r3, #1
 80076d6:	667b      	str	r3, [r7, #100]	@ 0x64
 80076d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	3314      	adds	r3, #20
 80076de:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80076e0:	647a      	str	r2, [r7, #68]	@ 0x44
 80076e2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80076e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076e8:	e841 2300 	strex	r3, r2, [r1]
 80076ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80076ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d1e5      	bne.n	80076c0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	3314      	adds	r3, #20
 80076fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076fe:	e853 3f00 	ldrex	r3, [r3]
 8007702:	623b      	str	r3, [r7, #32]
   return(result);
 8007704:	6a3b      	ldr	r3, [r7, #32]
 8007706:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800770a:	663b      	str	r3, [r7, #96]	@ 0x60
 800770c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	3314      	adds	r3, #20
 8007712:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007714:	633a      	str	r2, [r7, #48]	@ 0x30
 8007716:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007718:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800771a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800771c:	e841 2300 	strex	r3, r2, [r1]
 8007720:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007724:	2b00      	cmp	r3, #0
 8007726:	d1e5      	bne.n	80076f4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007728:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800772a:	2220      	movs	r2, #32
 800772c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007730:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007734:	2b01      	cmp	r3, #1
 8007736:	d119      	bne.n	800776c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007738:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	330c      	adds	r3, #12
 800773e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	e853 3f00 	ldrex	r3, [r3]
 8007746:	60fb      	str	r3, [r7, #12]
   return(result);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f023 0310 	bic.w	r3, r3, #16
 800774e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007750:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	330c      	adds	r3, #12
 8007756:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007758:	61fa      	str	r2, [r7, #28]
 800775a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775c:	69b9      	ldr	r1, [r7, #24]
 800775e:	69fa      	ldr	r2, [r7, #28]
 8007760:	e841 2300 	strex	r3, r2, [r1]
 8007764:	617b      	str	r3, [r7, #20]
   return(result);
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1e5      	bne.n	8007738 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800776c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800776e:	2200      	movs	r2, #0
 8007770:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007772:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007776:	2b01      	cmp	r3, #1
 8007778:	d106      	bne.n	8007788 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800777a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800777c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800777e:	4619      	mov	r1, r3
 8007780:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007782:	f7ff ff0b 	bl	800759c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007786:	e002      	b.n	800778e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007788:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800778a:	f7ff fee9 	bl	8007560 <HAL_UART_RxCpltCallback>
}
 800778e:	bf00      	nop
 8007790:	3770      	adds	r7, #112	@ 0x70
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}

08007796 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007796:	b580      	push	{r7, lr}
 8007798:	b084      	sub	sp, #16
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077a2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2201      	movs	r2, #1
 80077a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d108      	bne.n	80077c4 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80077b6:	085b      	lsrs	r3, r3, #1
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	4619      	mov	r1, r3
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	f7ff feed 	bl	800759c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80077c2:	e002      	b.n	80077ca <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80077c4:	68f8      	ldr	r0, [r7, #12]
 80077c6:	f7ff fed5 	bl	8007574 <HAL_UART_RxHalfCpltCallback>
}
 80077ca:	bf00      	nop
 80077cc:	3710      	adds	r7, #16
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b084      	sub	sp, #16
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80077da:	2300      	movs	r3, #0
 80077dc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077e2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	695b      	ldr	r3, [r3, #20]
 80077ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077ee:	2b80      	cmp	r3, #128	@ 0x80
 80077f0:	bf0c      	ite	eq
 80077f2:	2301      	moveq	r3, #1
 80077f4:	2300      	movne	r3, #0
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007800:	b2db      	uxtb	r3, r3
 8007802:	2b21      	cmp	r3, #33	@ 0x21
 8007804:	d108      	bne.n	8007818 <UART_DMAError+0x46>
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d005      	beq.n	8007818 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	2200      	movs	r2, #0
 8007810:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8007812:	68b8      	ldr	r0, [r7, #8]
 8007814:	f000 f926 	bl	8007a64 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	695b      	ldr	r3, [r3, #20]
 800781e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007822:	2b40      	cmp	r3, #64	@ 0x40
 8007824:	bf0c      	ite	eq
 8007826:	2301      	moveq	r3, #1
 8007828:	2300      	movne	r3, #0
 800782a:	b2db      	uxtb	r3, r3
 800782c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007834:	b2db      	uxtb	r3, r3
 8007836:	2b22      	cmp	r3, #34	@ 0x22
 8007838:	d108      	bne.n	800784c <UART_DMAError+0x7a>
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d005      	beq.n	800784c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	2200      	movs	r2, #0
 8007844:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007846:	68b8      	ldr	r0, [r7, #8]
 8007848:	f000 f934 	bl	8007ab4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007850:	f043 0210 	orr.w	r2, r3, #16
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007858:	68b8      	ldr	r0, [r7, #8]
 800785a:	f7ff fe95 	bl	8007588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800785e:	bf00      	nop
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b086      	sub	sp, #24
 800786a:	af00      	add	r7, sp, #0
 800786c:	60f8      	str	r0, [r7, #12]
 800786e:	60b9      	str	r1, [r7, #8]
 8007870:	603b      	str	r3, [r7, #0]
 8007872:	4613      	mov	r3, r2
 8007874:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007876:	e03b      	b.n	80078f0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007878:	6a3b      	ldr	r3, [r7, #32]
 800787a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800787e:	d037      	beq.n	80078f0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007880:	f7fc faea 	bl	8003e58 <HAL_GetTick>
 8007884:	4602      	mov	r2, r0
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	1ad3      	subs	r3, r2, r3
 800788a:	6a3a      	ldr	r2, [r7, #32]
 800788c:	429a      	cmp	r2, r3
 800788e:	d302      	bcc.n	8007896 <UART_WaitOnFlagUntilTimeout+0x30>
 8007890:	6a3b      	ldr	r3, [r7, #32]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d101      	bne.n	800789a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007896:	2303      	movs	r3, #3
 8007898:	e03a      	b.n	8007910 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	f003 0304 	and.w	r3, r3, #4
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d023      	beq.n	80078f0 <UART_WaitOnFlagUntilTimeout+0x8a>
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	2b80      	cmp	r3, #128	@ 0x80
 80078ac:	d020      	beq.n	80078f0 <UART_WaitOnFlagUntilTimeout+0x8a>
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	2b40      	cmp	r3, #64	@ 0x40
 80078b2:	d01d      	beq.n	80078f0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 0308 	and.w	r3, r3, #8
 80078be:	2b08      	cmp	r3, #8
 80078c0:	d116      	bne.n	80078f0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80078c2:	2300      	movs	r3, #0
 80078c4:	617b      	str	r3, [r7, #20]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	617b      	str	r3, [r7, #20]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	617b      	str	r3, [r7, #20]
 80078d6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078d8:	68f8      	ldr	r0, [r7, #12]
 80078da:	f000 f8eb 	bl	8007ab4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2208      	movs	r2, #8
 80078e2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
 80078ee:	e00f      	b.n	8007910 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	4013      	ands	r3, r2
 80078fa:	68ba      	ldr	r2, [r7, #8]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	bf0c      	ite	eq
 8007900:	2301      	moveq	r3, #1
 8007902:	2300      	movne	r3, #0
 8007904:	b2db      	uxtb	r3, r3
 8007906:	461a      	mov	r2, r3
 8007908:	79fb      	ldrb	r3, [r7, #7]
 800790a:	429a      	cmp	r2, r3
 800790c:	d0b4      	beq.n	8007878 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	3718      	adds	r7, #24
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b098      	sub	sp, #96	@ 0x60
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	4613      	mov	r3, r2
 8007924:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007926:	68ba      	ldr	r2, [r7, #8]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	88fa      	ldrh	r2, [r7, #6]
 8007930:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2200      	movs	r2, #0
 8007936:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2222      	movs	r2, #34	@ 0x22
 800793c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007944:	4a44      	ldr	r2, [pc, #272]	@ (8007a58 <UART_Start_Receive_DMA+0x140>)
 8007946:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800794c:	4a43      	ldr	r2, [pc, #268]	@ (8007a5c <UART_Start_Receive_DMA+0x144>)
 800794e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007954:	4a42      	ldr	r2, [pc, #264]	@ (8007a60 <UART_Start_Receive_DMA+0x148>)
 8007956:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800795c:	2200      	movs	r2, #0
 800795e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007960:	f107 0308 	add.w	r3, r7, #8
 8007964:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	3304      	adds	r3, #4
 8007970:	4619      	mov	r1, r3
 8007972:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	88fb      	ldrh	r3, [r7, #6]
 8007978:	f7fc fc0a 	bl	8004190 <HAL_DMA_Start_IT>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d008      	beq.n	8007994 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2210      	movs	r2, #16
 8007986:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2220      	movs	r2, #32
 800798c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e05d      	b.n	8007a50 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007994:	2300      	movs	r3, #0
 8007996:	613b      	str	r3, [r7, #16]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	613b      	str	r3, [r7, #16]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	613b      	str	r3, [r7, #16]
 80079a8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d019      	beq.n	80079e6 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	330c      	adds	r3, #12
 80079b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079bc:	e853 3f00 	ldrex	r3, [r3]
 80079c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80079c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	330c      	adds	r3, #12
 80079d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80079d2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80079d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80079d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80079da:	e841 2300 	strex	r3, r2, [r1]
 80079de:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80079e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d1e5      	bne.n	80079b2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	3314      	adds	r3, #20
 80079ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079f0:	e853 3f00 	ldrex	r3, [r3]
 80079f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80079f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079f8:	f043 0301 	orr.w	r3, r3, #1
 80079fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	3314      	adds	r3, #20
 8007a04:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007a06:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007a08:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007a0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007a0e:	e841 2300 	strex	r3, r2, [r1]
 8007a12:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d1e5      	bne.n	80079e6 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	3314      	adds	r3, #20
 8007a20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	e853 3f00 	ldrex	r3, [r3]
 8007a28:	617b      	str	r3, [r7, #20]
   return(result);
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a30:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	3314      	adds	r3, #20
 8007a38:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007a3a:	627a      	str	r2, [r7, #36]	@ 0x24
 8007a3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3e:	6a39      	ldr	r1, [r7, #32]
 8007a40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a42:	e841 2300 	strex	r3, r2, [r1]
 8007a46:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1e5      	bne.n	8007a1a <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3760      	adds	r7, #96	@ 0x60
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	0800766b 	.word	0x0800766b
 8007a5c:	08007797 	.word	0x08007797
 8007a60:	080077d3 	.word	0x080077d3

08007a64 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b089      	sub	sp, #36	@ 0x24
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	330c      	adds	r3, #12
 8007a72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	e853 3f00 	ldrex	r3, [r3]
 8007a7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007a82:	61fb      	str	r3, [r7, #28]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	330c      	adds	r3, #12
 8007a8a:	69fa      	ldr	r2, [r7, #28]
 8007a8c:	61ba      	str	r2, [r7, #24]
 8007a8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a90:	6979      	ldr	r1, [r7, #20]
 8007a92:	69ba      	ldr	r2, [r7, #24]
 8007a94:	e841 2300 	strex	r3, r2, [r1]
 8007a98:	613b      	str	r3, [r7, #16]
   return(result);
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d1e5      	bne.n	8007a6c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2220      	movs	r2, #32
 8007aa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007aa8:	bf00      	nop
 8007aaa:	3724      	adds	r7, #36	@ 0x24
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b095      	sub	sp, #84	@ 0x54
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	330c      	adds	r3, #12
 8007ac2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ac6:	e853 3f00 	ldrex	r3, [r3]
 8007aca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ace:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	330c      	adds	r3, #12
 8007ada:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007adc:	643a      	str	r2, [r7, #64]	@ 0x40
 8007ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ae2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ae4:	e841 2300 	strex	r3, r2, [r1]
 8007ae8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d1e5      	bne.n	8007abc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	3314      	adds	r3, #20
 8007af6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af8:	6a3b      	ldr	r3, [r7, #32]
 8007afa:	e853 3f00 	ldrex	r3, [r3]
 8007afe:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	f023 0301 	bic.w	r3, r3, #1
 8007b06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	3314      	adds	r3, #20
 8007b0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b10:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007b12:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b18:	e841 2300 	strex	r3, r2, [r1]
 8007b1c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d1e5      	bne.n	8007af0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d119      	bne.n	8007b60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	330c      	adds	r3, #12
 8007b32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	e853 3f00 	ldrex	r3, [r3]
 8007b3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	f023 0310 	bic.w	r3, r3, #16
 8007b42:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	330c      	adds	r3, #12
 8007b4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b4c:	61ba      	str	r2, [r7, #24]
 8007b4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b50:	6979      	ldr	r1, [r7, #20]
 8007b52:	69ba      	ldr	r2, [r7, #24]
 8007b54:	e841 2300 	strex	r3, r2, [r1]
 8007b58:	613b      	str	r3, [r7, #16]
   return(result);
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d1e5      	bne.n	8007b2c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2220      	movs	r2, #32
 8007b64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007b6e:	bf00      	nop
 8007b70:	3754      	adds	r7, #84	@ 0x54
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr

08007b7a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b084      	sub	sp, #16
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f7ff fcfa 	bl	8007588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b94:	bf00      	nop
 8007b96:	3710      	adds	r7, #16
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b085      	sub	sp, #20
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	2b21      	cmp	r3, #33	@ 0x21
 8007bae:	d13e      	bne.n	8007c2e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bb8:	d114      	bne.n	8007be4 <UART_Transmit_IT+0x48>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d110      	bne.n	8007be4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a1b      	ldr	r3, [r3, #32]
 8007bc6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	881b      	ldrh	r3, [r3, #0]
 8007bcc:	461a      	mov	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bd6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6a1b      	ldr	r3, [r3, #32]
 8007bdc:	1c9a      	adds	r2, r3, #2
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	621a      	str	r2, [r3, #32]
 8007be2:	e008      	b.n	8007bf6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6a1b      	ldr	r3, [r3, #32]
 8007be8:	1c59      	adds	r1, r3, #1
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	6211      	str	r1, [r2, #32]
 8007bee:	781a      	ldrb	r2, [r3, #0]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	3b01      	subs	r3, #1
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	4619      	mov	r1, r3
 8007c04:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d10f      	bne.n	8007c2a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	68da      	ldr	r2, [r3, #12]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007c18:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	68da      	ldr	r2, [r3, #12]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c28:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	e000      	b.n	8007c30 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007c2e:	2302      	movs	r3, #2
  }
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3714      	adds	r7, #20
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	68da      	ldr	r2, [r3, #12]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c52:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2220      	movs	r2, #32
 8007c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f7ff fc6b 	bl	8007538 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3708      	adds	r7, #8
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b08c      	sub	sp, #48	@ 0x30
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8007c74:	2300      	movs	r3, #0
 8007c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	2b22      	cmp	r3, #34	@ 0x22
 8007c86:	f040 80aa 	bne.w	8007dde <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c92:	d115      	bne.n	8007cc0 <UART_Receive_IT+0x54>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d111      	bne.n	8007cc0 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cae:	b29a      	uxth	r2, r3
 8007cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cb8:	1c9a      	adds	r2, r3, #2
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	629a      	str	r2, [r3, #40]	@ 0x28
 8007cbe:	e024      	b.n	8007d0a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cce:	d007      	beq.n	8007ce0 <UART_Receive_IT+0x74>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d10a      	bne.n	8007cee <UART_Receive_IT+0x82>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d106      	bne.n	8007cee <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	b2da      	uxtb	r2, r3
 8007ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cea:	701a      	strb	r2, [r3, #0]
 8007cec:	e008      	b.n	8007d00 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cfa:	b2da      	uxtb	r2, r3
 8007cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cfe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d04:	1c5a      	adds	r2, r3, #1
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	3b01      	subs	r3, #1
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	4619      	mov	r1, r3
 8007d18:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d15d      	bne.n	8007dda <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	68da      	ldr	r2, [r3, #12]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f022 0220 	bic.w	r2, r2, #32
 8007d2c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	68da      	ldr	r2, [r3, #12]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007d3c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	695a      	ldr	r2, [r3, #20]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f022 0201 	bic.w	r2, r2, #1
 8007d4c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2220      	movs	r2, #32
 8007d52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d135      	bne.n	8007dd0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	330c      	adds	r3, #12
 8007d70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	e853 3f00 	ldrex	r3, [r3]
 8007d78:	613b      	str	r3, [r7, #16]
   return(result);
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	f023 0310 	bic.w	r3, r3, #16
 8007d80:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	330c      	adds	r3, #12
 8007d88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d8a:	623a      	str	r2, [r7, #32]
 8007d8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d8e:	69f9      	ldr	r1, [r7, #28]
 8007d90:	6a3a      	ldr	r2, [r7, #32]
 8007d92:	e841 2300 	strex	r3, r2, [r1]
 8007d96:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d1e5      	bne.n	8007d6a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 0310 	and.w	r3, r3, #16
 8007da8:	2b10      	cmp	r3, #16
 8007daa:	d10a      	bne.n	8007dc2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007dac:	2300      	movs	r3, #0
 8007dae:	60fb      	str	r3, [r7, #12]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	60fb      	str	r3, [r7, #12]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	60fb      	str	r3, [r7, #12]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f7ff fbe7 	bl	800759c <HAL_UARTEx_RxEventCallback>
 8007dce:	e002      	b.n	8007dd6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f7ff fbc5 	bl	8007560 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	e002      	b.n	8007de0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	e000      	b.n	8007de0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007dde:	2302      	movs	r3, #2
  }
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3730      	adds	r7, #48	@ 0x30
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007dec:	b0c0      	sub	sp, #256	@ 0x100
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e04:	68d9      	ldr	r1, [r3, #12]
 8007e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	ea40 0301 	orr.w	r3, r0, r1
 8007e10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e16:	689a      	ldr	r2, [r3, #8]
 8007e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	431a      	orrs	r2, r3
 8007e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e24:	695b      	ldr	r3, [r3, #20]
 8007e26:	431a      	orrs	r2, r3
 8007e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e2c:	69db      	ldr	r3, [r3, #28]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007e40:	f021 010c 	bic.w	r1, r1, #12
 8007e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007e4e:	430b      	orrs	r3, r1
 8007e50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	695b      	ldr	r3, [r3, #20]
 8007e5a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e62:	6999      	ldr	r1, [r3, #24]
 8007e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	ea40 0301 	orr.w	r3, r0, r1
 8007e6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	4b8f      	ldr	r3, [pc, #572]	@ (80080b4 <UART_SetConfig+0x2cc>)
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d005      	beq.n	8007e88 <UART_SetConfig+0xa0>
 8007e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	4b8d      	ldr	r3, [pc, #564]	@ (80080b8 <UART_SetConfig+0x2d0>)
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d104      	bne.n	8007e92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007e88:	f7fd f8ce 	bl	8005028 <HAL_RCC_GetPCLK2Freq>
 8007e8c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007e90:	e003      	b.n	8007e9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007e92:	f7fd f8b5 	bl	8005000 <HAL_RCC_GetPCLK1Freq>
 8007e96:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e9e:	69db      	ldr	r3, [r3, #28]
 8007ea0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ea4:	f040 810c 	bne.w	80080c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ea8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007eac:	2200      	movs	r2, #0
 8007eae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007eb2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007eb6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007eba:	4622      	mov	r2, r4
 8007ebc:	462b      	mov	r3, r5
 8007ebe:	1891      	adds	r1, r2, r2
 8007ec0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007ec2:	415b      	adcs	r3, r3
 8007ec4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ec6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007eca:	4621      	mov	r1, r4
 8007ecc:	eb12 0801 	adds.w	r8, r2, r1
 8007ed0:	4629      	mov	r1, r5
 8007ed2:	eb43 0901 	adc.w	r9, r3, r1
 8007ed6:	f04f 0200 	mov.w	r2, #0
 8007eda:	f04f 0300 	mov.w	r3, #0
 8007ede:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007ee2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007ee6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007eea:	4690      	mov	r8, r2
 8007eec:	4699      	mov	r9, r3
 8007eee:	4623      	mov	r3, r4
 8007ef0:	eb18 0303 	adds.w	r3, r8, r3
 8007ef4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007ef8:	462b      	mov	r3, r5
 8007efa:	eb49 0303 	adc.w	r3, r9, r3
 8007efe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007f0e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007f12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007f16:	460b      	mov	r3, r1
 8007f18:	18db      	adds	r3, r3, r3
 8007f1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	eb42 0303 	adc.w	r3, r2, r3
 8007f22:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007f28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007f2c:	f7f8 fece 	bl	8000ccc <__aeabi_uldivmod>
 8007f30:	4602      	mov	r2, r0
 8007f32:	460b      	mov	r3, r1
 8007f34:	4b61      	ldr	r3, [pc, #388]	@ (80080bc <UART_SetConfig+0x2d4>)
 8007f36:	fba3 2302 	umull	r2, r3, r3, r2
 8007f3a:	095b      	lsrs	r3, r3, #5
 8007f3c:	011c      	lsls	r4, r3, #4
 8007f3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f42:	2200      	movs	r2, #0
 8007f44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007f48:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007f4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007f50:	4642      	mov	r2, r8
 8007f52:	464b      	mov	r3, r9
 8007f54:	1891      	adds	r1, r2, r2
 8007f56:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007f58:	415b      	adcs	r3, r3
 8007f5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007f60:	4641      	mov	r1, r8
 8007f62:	eb12 0a01 	adds.w	sl, r2, r1
 8007f66:	4649      	mov	r1, r9
 8007f68:	eb43 0b01 	adc.w	fp, r3, r1
 8007f6c:	f04f 0200 	mov.w	r2, #0
 8007f70:	f04f 0300 	mov.w	r3, #0
 8007f74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007f78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007f7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f80:	4692      	mov	sl, r2
 8007f82:	469b      	mov	fp, r3
 8007f84:	4643      	mov	r3, r8
 8007f86:	eb1a 0303 	adds.w	r3, sl, r3
 8007f8a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007f8e:	464b      	mov	r3, r9
 8007f90:	eb4b 0303 	adc.w	r3, fp, r3
 8007f94:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007fa4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007fa8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007fac:	460b      	mov	r3, r1
 8007fae:	18db      	adds	r3, r3, r3
 8007fb0:	643b      	str	r3, [r7, #64]	@ 0x40
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	eb42 0303 	adc.w	r3, r2, r3
 8007fb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007fbe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007fc2:	f7f8 fe83 	bl	8000ccc <__aeabi_uldivmod>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	460b      	mov	r3, r1
 8007fca:	4611      	mov	r1, r2
 8007fcc:	4b3b      	ldr	r3, [pc, #236]	@ (80080bc <UART_SetConfig+0x2d4>)
 8007fce:	fba3 2301 	umull	r2, r3, r3, r1
 8007fd2:	095b      	lsrs	r3, r3, #5
 8007fd4:	2264      	movs	r2, #100	@ 0x64
 8007fd6:	fb02 f303 	mul.w	r3, r2, r3
 8007fda:	1acb      	subs	r3, r1, r3
 8007fdc:	00db      	lsls	r3, r3, #3
 8007fde:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007fe2:	4b36      	ldr	r3, [pc, #216]	@ (80080bc <UART_SetConfig+0x2d4>)
 8007fe4:	fba3 2302 	umull	r2, r3, r3, r2
 8007fe8:	095b      	lsrs	r3, r3, #5
 8007fea:	005b      	lsls	r3, r3, #1
 8007fec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007ff0:	441c      	add	r4, r3
 8007ff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007ffc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008000:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008004:	4642      	mov	r2, r8
 8008006:	464b      	mov	r3, r9
 8008008:	1891      	adds	r1, r2, r2
 800800a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800800c:	415b      	adcs	r3, r3
 800800e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008010:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008014:	4641      	mov	r1, r8
 8008016:	1851      	adds	r1, r2, r1
 8008018:	6339      	str	r1, [r7, #48]	@ 0x30
 800801a:	4649      	mov	r1, r9
 800801c:	414b      	adcs	r3, r1
 800801e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008020:	f04f 0200 	mov.w	r2, #0
 8008024:	f04f 0300 	mov.w	r3, #0
 8008028:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800802c:	4659      	mov	r1, fp
 800802e:	00cb      	lsls	r3, r1, #3
 8008030:	4651      	mov	r1, sl
 8008032:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008036:	4651      	mov	r1, sl
 8008038:	00ca      	lsls	r2, r1, #3
 800803a:	4610      	mov	r0, r2
 800803c:	4619      	mov	r1, r3
 800803e:	4603      	mov	r3, r0
 8008040:	4642      	mov	r2, r8
 8008042:	189b      	adds	r3, r3, r2
 8008044:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008048:	464b      	mov	r3, r9
 800804a:	460a      	mov	r2, r1
 800804c:	eb42 0303 	adc.w	r3, r2, r3
 8008050:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008060:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008064:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008068:	460b      	mov	r3, r1
 800806a:	18db      	adds	r3, r3, r3
 800806c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800806e:	4613      	mov	r3, r2
 8008070:	eb42 0303 	adc.w	r3, r2, r3
 8008074:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008076:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800807a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800807e:	f7f8 fe25 	bl	8000ccc <__aeabi_uldivmod>
 8008082:	4602      	mov	r2, r0
 8008084:	460b      	mov	r3, r1
 8008086:	4b0d      	ldr	r3, [pc, #52]	@ (80080bc <UART_SetConfig+0x2d4>)
 8008088:	fba3 1302 	umull	r1, r3, r3, r2
 800808c:	095b      	lsrs	r3, r3, #5
 800808e:	2164      	movs	r1, #100	@ 0x64
 8008090:	fb01 f303 	mul.w	r3, r1, r3
 8008094:	1ad3      	subs	r3, r2, r3
 8008096:	00db      	lsls	r3, r3, #3
 8008098:	3332      	adds	r3, #50	@ 0x32
 800809a:	4a08      	ldr	r2, [pc, #32]	@ (80080bc <UART_SetConfig+0x2d4>)
 800809c:	fba2 2303 	umull	r2, r3, r2, r3
 80080a0:	095b      	lsrs	r3, r3, #5
 80080a2:	f003 0207 	and.w	r2, r3, #7
 80080a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4422      	add	r2, r4
 80080ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80080b0:	e106      	b.n	80082c0 <UART_SetConfig+0x4d8>
 80080b2:	bf00      	nop
 80080b4:	40011000 	.word	0x40011000
 80080b8:	40011400 	.word	0x40011400
 80080bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80080c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80080c4:	2200      	movs	r2, #0
 80080c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80080ca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80080ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80080d2:	4642      	mov	r2, r8
 80080d4:	464b      	mov	r3, r9
 80080d6:	1891      	adds	r1, r2, r2
 80080d8:	6239      	str	r1, [r7, #32]
 80080da:	415b      	adcs	r3, r3
 80080dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80080de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80080e2:	4641      	mov	r1, r8
 80080e4:	1854      	adds	r4, r2, r1
 80080e6:	4649      	mov	r1, r9
 80080e8:	eb43 0501 	adc.w	r5, r3, r1
 80080ec:	f04f 0200 	mov.w	r2, #0
 80080f0:	f04f 0300 	mov.w	r3, #0
 80080f4:	00eb      	lsls	r3, r5, #3
 80080f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80080fa:	00e2      	lsls	r2, r4, #3
 80080fc:	4614      	mov	r4, r2
 80080fe:	461d      	mov	r5, r3
 8008100:	4643      	mov	r3, r8
 8008102:	18e3      	adds	r3, r4, r3
 8008104:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008108:	464b      	mov	r3, r9
 800810a:	eb45 0303 	adc.w	r3, r5, r3
 800810e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800811e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008122:	f04f 0200 	mov.w	r2, #0
 8008126:	f04f 0300 	mov.w	r3, #0
 800812a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800812e:	4629      	mov	r1, r5
 8008130:	008b      	lsls	r3, r1, #2
 8008132:	4621      	mov	r1, r4
 8008134:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008138:	4621      	mov	r1, r4
 800813a:	008a      	lsls	r2, r1, #2
 800813c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008140:	f7f8 fdc4 	bl	8000ccc <__aeabi_uldivmod>
 8008144:	4602      	mov	r2, r0
 8008146:	460b      	mov	r3, r1
 8008148:	4b60      	ldr	r3, [pc, #384]	@ (80082cc <UART_SetConfig+0x4e4>)
 800814a:	fba3 2302 	umull	r2, r3, r3, r2
 800814e:	095b      	lsrs	r3, r3, #5
 8008150:	011c      	lsls	r4, r3, #4
 8008152:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008156:	2200      	movs	r2, #0
 8008158:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800815c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008160:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008164:	4642      	mov	r2, r8
 8008166:	464b      	mov	r3, r9
 8008168:	1891      	adds	r1, r2, r2
 800816a:	61b9      	str	r1, [r7, #24]
 800816c:	415b      	adcs	r3, r3
 800816e:	61fb      	str	r3, [r7, #28]
 8008170:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008174:	4641      	mov	r1, r8
 8008176:	1851      	adds	r1, r2, r1
 8008178:	6139      	str	r1, [r7, #16]
 800817a:	4649      	mov	r1, r9
 800817c:	414b      	adcs	r3, r1
 800817e:	617b      	str	r3, [r7, #20]
 8008180:	f04f 0200 	mov.w	r2, #0
 8008184:	f04f 0300 	mov.w	r3, #0
 8008188:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800818c:	4659      	mov	r1, fp
 800818e:	00cb      	lsls	r3, r1, #3
 8008190:	4651      	mov	r1, sl
 8008192:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008196:	4651      	mov	r1, sl
 8008198:	00ca      	lsls	r2, r1, #3
 800819a:	4610      	mov	r0, r2
 800819c:	4619      	mov	r1, r3
 800819e:	4603      	mov	r3, r0
 80081a0:	4642      	mov	r2, r8
 80081a2:	189b      	adds	r3, r3, r2
 80081a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80081a8:	464b      	mov	r3, r9
 80081aa:	460a      	mov	r2, r1
 80081ac:	eb42 0303 	adc.w	r3, r2, r3
 80081b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80081b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80081be:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80081c0:	f04f 0200 	mov.w	r2, #0
 80081c4:	f04f 0300 	mov.w	r3, #0
 80081c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80081cc:	4649      	mov	r1, r9
 80081ce:	008b      	lsls	r3, r1, #2
 80081d0:	4641      	mov	r1, r8
 80081d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80081d6:	4641      	mov	r1, r8
 80081d8:	008a      	lsls	r2, r1, #2
 80081da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80081de:	f7f8 fd75 	bl	8000ccc <__aeabi_uldivmod>
 80081e2:	4602      	mov	r2, r0
 80081e4:	460b      	mov	r3, r1
 80081e6:	4611      	mov	r1, r2
 80081e8:	4b38      	ldr	r3, [pc, #224]	@ (80082cc <UART_SetConfig+0x4e4>)
 80081ea:	fba3 2301 	umull	r2, r3, r3, r1
 80081ee:	095b      	lsrs	r3, r3, #5
 80081f0:	2264      	movs	r2, #100	@ 0x64
 80081f2:	fb02 f303 	mul.w	r3, r2, r3
 80081f6:	1acb      	subs	r3, r1, r3
 80081f8:	011b      	lsls	r3, r3, #4
 80081fa:	3332      	adds	r3, #50	@ 0x32
 80081fc:	4a33      	ldr	r2, [pc, #204]	@ (80082cc <UART_SetConfig+0x4e4>)
 80081fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008202:	095b      	lsrs	r3, r3, #5
 8008204:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008208:	441c      	add	r4, r3
 800820a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800820e:	2200      	movs	r2, #0
 8008210:	673b      	str	r3, [r7, #112]	@ 0x70
 8008212:	677a      	str	r2, [r7, #116]	@ 0x74
 8008214:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008218:	4642      	mov	r2, r8
 800821a:	464b      	mov	r3, r9
 800821c:	1891      	adds	r1, r2, r2
 800821e:	60b9      	str	r1, [r7, #8]
 8008220:	415b      	adcs	r3, r3
 8008222:	60fb      	str	r3, [r7, #12]
 8008224:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008228:	4641      	mov	r1, r8
 800822a:	1851      	adds	r1, r2, r1
 800822c:	6039      	str	r1, [r7, #0]
 800822e:	4649      	mov	r1, r9
 8008230:	414b      	adcs	r3, r1
 8008232:	607b      	str	r3, [r7, #4]
 8008234:	f04f 0200 	mov.w	r2, #0
 8008238:	f04f 0300 	mov.w	r3, #0
 800823c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008240:	4659      	mov	r1, fp
 8008242:	00cb      	lsls	r3, r1, #3
 8008244:	4651      	mov	r1, sl
 8008246:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800824a:	4651      	mov	r1, sl
 800824c:	00ca      	lsls	r2, r1, #3
 800824e:	4610      	mov	r0, r2
 8008250:	4619      	mov	r1, r3
 8008252:	4603      	mov	r3, r0
 8008254:	4642      	mov	r2, r8
 8008256:	189b      	adds	r3, r3, r2
 8008258:	66bb      	str	r3, [r7, #104]	@ 0x68
 800825a:	464b      	mov	r3, r9
 800825c:	460a      	mov	r2, r1
 800825e:	eb42 0303 	adc.w	r3, r2, r3
 8008262:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	663b      	str	r3, [r7, #96]	@ 0x60
 800826e:	667a      	str	r2, [r7, #100]	@ 0x64
 8008270:	f04f 0200 	mov.w	r2, #0
 8008274:	f04f 0300 	mov.w	r3, #0
 8008278:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800827c:	4649      	mov	r1, r9
 800827e:	008b      	lsls	r3, r1, #2
 8008280:	4641      	mov	r1, r8
 8008282:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008286:	4641      	mov	r1, r8
 8008288:	008a      	lsls	r2, r1, #2
 800828a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800828e:	f7f8 fd1d 	bl	8000ccc <__aeabi_uldivmod>
 8008292:	4602      	mov	r2, r0
 8008294:	460b      	mov	r3, r1
 8008296:	4b0d      	ldr	r3, [pc, #52]	@ (80082cc <UART_SetConfig+0x4e4>)
 8008298:	fba3 1302 	umull	r1, r3, r3, r2
 800829c:	095b      	lsrs	r3, r3, #5
 800829e:	2164      	movs	r1, #100	@ 0x64
 80082a0:	fb01 f303 	mul.w	r3, r1, r3
 80082a4:	1ad3      	subs	r3, r2, r3
 80082a6:	011b      	lsls	r3, r3, #4
 80082a8:	3332      	adds	r3, #50	@ 0x32
 80082aa:	4a08      	ldr	r2, [pc, #32]	@ (80082cc <UART_SetConfig+0x4e4>)
 80082ac:	fba2 2303 	umull	r2, r3, r2, r3
 80082b0:	095b      	lsrs	r3, r3, #5
 80082b2:	f003 020f 	and.w	r2, r3, #15
 80082b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4422      	add	r2, r4
 80082be:	609a      	str	r2, [r3, #8]
}
 80082c0:	bf00      	nop
 80082c2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80082c6:	46bd      	mov	sp, r7
 80082c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082cc:	51eb851f 	.word	0x51eb851f

080082d0 <__NVIC_SetPriority>:
{
 80082d0:	b480      	push	{r7}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	4603      	mov	r3, r0
 80082d8:	6039      	str	r1, [r7, #0]
 80082da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80082dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	db0a      	blt.n	80082fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	b2da      	uxtb	r2, r3
 80082e8:	490c      	ldr	r1, [pc, #48]	@ (800831c <__NVIC_SetPriority+0x4c>)
 80082ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082ee:	0112      	lsls	r2, r2, #4
 80082f0:	b2d2      	uxtb	r2, r2
 80082f2:	440b      	add	r3, r1
 80082f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80082f8:	e00a      	b.n	8008310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	b2da      	uxtb	r2, r3
 80082fe:	4908      	ldr	r1, [pc, #32]	@ (8008320 <__NVIC_SetPriority+0x50>)
 8008300:	79fb      	ldrb	r3, [r7, #7]
 8008302:	f003 030f 	and.w	r3, r3, #15
 8008306:	3b04      	subs	r3, #4
 8008308:	0112      	lsls	r2, r2, #4
 800830a:	b2d2      	uxtb	r2, r2
 800830c:	440b      	add	r3, r1
 800830e:	761a      	strb	r2, [r3, #24]
}
 8008310:	bf00      	nop
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr
 800831c:	e000e100 	.word	0xe000e100
 8008320:	e000ed00 	.word	0xe000ed00

08008324 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008324:	b580      	push	{r7, lr}
 8008326:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008328:	4b05      	ldr	r3, [pc, #20]	@ (8008340 <SysTick_Handler+0x1c>)
 800832a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800832c:	f001 fd40 	bl	8009db0 <xTaskGetSchedulerState>
 8008330:	4603      	mov	r3, r0
 8008332:	2b01      	cmp	r3, #1
 8008334:	d001      	beq.n	800833a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008336:	f002 fb37 	bl	800a9a8 <xPortSysTickHandler>
  }
}
 800833a:	bf00      	nop
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	e000e010 	.word	0xe000e010

08008344 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008344:	b580      	push	{r7, lr}
 8008346:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008348:	2100      	movs	r1, #0
 800834a:	f06f 0004 	mvn.w	r0, #4
 800834e:	f7ff ffbf 	bl	80082d0 <__NVIC_SetPriority>
#endif
}
 8008352:	bf00      	nop
 8008354:	bd80      	pop	{r7, pc}
	...

08008358 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800835e:	f3ef 8305 	mrs	r3, IPSR
 8008362:	603b      	str	r3, [r7, #0]
  return(result);
 8008364:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008366:	2b00      	cmp	r3, #0
 8008368:	d003      	beq.n	8008372 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800836a:	f06f 0305 	mvn.w	r3, #5
 800836e:	607b      	str	r3, [r7, #4]
 8008370:	e00c      	b.n	800838c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008372:	4b0a      	ldr	r3, [pc, #40]	@ (800839c <osKernelInitialize+0x44>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d105      	bne.n	8008386 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800837a:	4b08      	ldr	r3, [pc, #32]	@ (800839c <osKernelInitialize+0x44>)
 800837c:	2201      	movs	r2, #1
 800837e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008380:	2300      	movs	r3, #0
 8008382:	607b      	str	r3, [r7, #4]
 8008384:	e002      	b.n	800838c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008386:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800838a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800838c:	687b      	ldr	r3, [r7, #4]
}
 800838e:	4618      	mov	r0, r3
 8008390:	370c      	adds	r7, #12
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop
 800839c:	200084c4 	.word	0x200084c4

080083a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083a6:	f3ef 8305 	mrs	r3, IPSR
 80083aa:	603b      	str	r3, [r7, #0]
  return(result);
 80083ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d003      	beq.n	80083ba <osKernelStart+0x1a>
    stat = osErrorISR;
 80083b2:	f06f 0305 	mvn.w	r3, #5
 80083b6:	607b      	str	r3, [r7, #4]
 80083b8:	e010      	b.n	80083dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80083ba:	4b0b      	ldr	r3, [pc, #44]	@ (80083e8 <osKernelStart+0x48>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d109      	bne.n	80083d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80083c2:	f7ff ffbf 	bl	8008344 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80083c6:	4b08      	ldr	r3, [pc, #32]	@ (80083e8 <osKernelStart+0x48>)
 80083c8:	2202      	movs	r2, #2
 80083ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80083cc:	f001 f87a 	bl	80094c4 <vTaskStartScheduler>
      stat = osOK;
 80083d0:	2300      	movs	r3, #0
 80083d2:	607b      	str	r3, [r7, #4]
 80083d4:	e002      	b.n	80083dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80083d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80083da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80083dc:	687b      	ldr	r3, [r7, #4]
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3708      	adds	r7, #8
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	200084c4 	.word	0x200084c4

080083ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b08e      	sub	sp, #56	@ 0x38
 80083f0:	af04      	add	r7, sp, #16
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80083f8:	2300      	movs	r3, #0
 80083fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083fc:	f3ef 8305 	mrs	r3, IPSR
 8008400:	617b      	str	r3, [r7, #20]
  return(result);
 8008402:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008404:	2b00      	cmp	r3, #0
 8008406:	d17e      	bne.n	8008506 <osThreadNew+0x11a>
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d07b      	beq.n	8008506 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800840e:	2380      	movs	r3, #128	@ 0x80
 8008410:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008412:	2318      	movs	r3, #24
 8008414:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008416:	2300      	movs	r3, #0
 8008418:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800841a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800841e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d045      	beq.n	80084b2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d002      	beq.n	8008434 <osThreadNew+0x48>
        name = attr->name;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	699b      	ldr	r3, [r3, #24]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d002      	beq.n	8008442 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	699b      	ldr	r3, [r3, #24]
 8008440:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008442:	69fb      	ldr	r3, [r7, #28]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d008      	beq.n	800845a <osThreadNew+0x6e>
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	2b38      	cmp	r3, #56	@ 0x38
 800844c:	d805      	bhi.n	800845a <osThreadNew+0x6e>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	f003 0301 	and.w	r3, r3, #1
 8008456:	2b00      	cmp	r3, #0
 8008458:	d001      	beq.n	800845e <osThreadNew+0x72>
        return (NULL);
 800845a:	2300      	movs	r3, #0
 800845c:	e054      	b.n	8008508 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	695b      	ldr	r3, [r3, #20]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d003      	beq.n	800846e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	695b      	ldr	r3, [r3, #20]
 800846a:	089b      	lsrs	r3, r3, #2
 800846c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d00e      	beq.n	8008494 <osThreadNew+0xa8>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	2b5b      	cmp	r3, #91	@ 0x5b
 800847c:	d90a      	bls.n	8008494 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008482:	2b00      	cmp	r3, #0
 8008484:	d006      	beq.n	8008494 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	695b      	ldr	r3, [r3, #20]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d002      	beq.n	8008494 <osThreadNew+0xa8>
        mem = 1;
 800848e:	2301      	movs	r3, #1
 8008490:	61bb      	str	r3, [r7, #24]
 8008492:	e010      	b.n	80084b6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d10c      	bne.n	80084b6 <osThreadNew+0xca>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d108      	bne.n	80084b6 <osThreadNew+0xca>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	691b      	ldr	r3, [r3, #16]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d104      	bne.n	80084b6 <osThreadNew+0xca>
          mem = 0;
 80084ac:	2300      	movs	r3, #0
 80084ae:	61bb      	str	r3, [r7, #24]
 80084b0:	e001      	b.n	80084b6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80084b2:	2300      	movs	r3, #0
 80084b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80084b6:	69bb      	ldr	r3, [r7, #24]
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d110      	bne.n	80084de <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80084c4:	9202      	str	r2, [sp, #8]
 80084c6:	9301      	str	r3, [sp, #4]
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	9300      	str	r3, [sp, #0]
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	6a3a      	ldr	r2, [r7, #32]
 80084d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80084d2:	68f8      	ldr	r0, [r7, #12]
 80084d4:	f000 fe1a 	bl	800910c <xTaskCreateStatic>
 80084d8:	4603      	mov	r3, r0
 80084da:	613b      	str	r3, [r7, #16]
 80084dc:	e013      	b.n	8008506 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d110      	bne.n	8008506 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80084e4:	6a3b      	ldr	r3, [r7, #32]
 80084e6:	b29a      	uxth	r2, r3
 80084e8:	f107 0310 	add.w	r3, r7, #16
 80084ec:	9301      	str	r3, [sp, #4]
 80084ee:	69fb      	ldr	r3, [r7, #28]
 80084f0:	9300      	str	r3, [sp, #0]
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	f000 fe68 	bl	80091cc <xTaskCreate>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d001      	beq.n	8008506 <osThreadNew+0x11a>
            hTask = NULL;
 8008502:	2300      	movs	r3, #0
 8008504:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008506:	693b      	ldr	r3, [r7, #16]
}
 8008508:	4618      	mov	r0, r3
 800850a:	3728      	adds	r7, #40	@ 0x28
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008518:	f3ef 8305 	mrs	r3, IPSR
 800851c:	60bb      	str	r3, [r7, #8]
  return(result);
 800851e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008520:	2b00      	cmp	r3, #0
 8008522:	d003      	beq.n	800852c <osDelay+0x1c>
    stat = osErrorISR;
 8008524:	f06f 0305 	mvn.w	r3, #5
 8008528:	60fb      	str	r3, [r7, #12]
 800852a:	e007      	b.n	800853c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800852c:	2300      	movs	r3, #0
 800852e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d002      	beq.n	800853c <osDelay+0x2c>
      vTaskDelay(ticks);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 ff8e 	bl	8009458 <vTaskDelay>
    }
  }

  return (stat);
 800853c:	68fb      	ldr	r3, [r7, #12]
}
 800853e:	4618      	mov	r0, r3
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
	...

08008548 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008548:	b480      	push	{r7}
 800854a:	b085      	sub	sp, #20
 800854c:	af00      	add	r7, sp, #0
 800854e:	60f8      	str	r0, [r7, #12]
 8008550:	60b9      	str	r1, [r7, #8]
 8008552:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	4a07      	ldr	r2, [pc, #28]	@ (8008574 <vApplicationGetIdleTaskMemory+0x2c>)
 8008558:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	4a06      	ldr	r2, [pc, #24]	@ (8008578 <vApplicationGetIdleTaskMemory+0x30>)
 800855e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2280      	movs	r2, #128	@ 0x80
 8008564:	601a      	str	r2, [r3, #0]
}
 8008566:	bf00      	nop
 8008568:	3714      	adds	r7, #20
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	200084c8 	.word	0x200084c8
 8008578:	20008524 	.word	0x20008524

0800857c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800857c:	b480      	push	{r7}
 800857e:	b085      	sub	sp, #20
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	4a07      	ldr	r2, [pc, #28]	@ (80085a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800858c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	4a06      	ldr	r2, [pc, #24]	@ (80085ac <vApplicationGetTimerTaskMemory+0x30>)
 8008592:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800859a:	601a      	str	r2, [r3, #0]
}
 800859c:	bf00      	nop
 800859e:	3714      	adds	r7, #20
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr
 80085a8:	20008724 	.word	0x20008724
 80085ac:	20008780 	.word	0x20008780

080085b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f103 0208 	add.w	r2, r3, #8
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80085c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f103 0208 	add.w	r2, r3, #8
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f103 0208 	add.w	r2, r3, #8
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80085fe:	bf00      	nop
 8008600:	370c      	adds	r7, #12
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr

0800860a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800860a:	b480      	push	{r7}
 800860c:	b085      	sub	sp, #20
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
 8008612:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	689a      	ldr	r2, [r3, #8]
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	683a      	ldr	r2, [r7, #0]
 800862e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	683a      	ldr	r2, [r7, #0]
 8008634:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	1c5a      	adds	r2, r3, #1
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	601a      	str	r2, [r3, #0]
}
 8008646:	bf00      	nop
 8008648:	3714      	adds	r7, #20
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr

08008652 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008652:	b480      	push	{r7}
 8008654:	b085      	sub	sp, #20
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
 800865a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008668:	d103      	bne.n	8008672 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	691b      	ldr	r3, [r3, #16]
 800866e:	60fb      	str	r3, [r7, #12]
 8008670:	e00c      	b.n	800868c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	3308      	adds	r3, #8
 8008676:	60fb      	str	r3, [r7, #12]
 8008678:	e002      	b.n	8008680 <vListInsert+0x2e>
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	60fb      	str	r3, [r7, #12]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	68ba      	ldr	r2, [r7, #8]
 8008688:	429a      	cmp	r2, r3
 800868a:	d2f6      	bcs.n	800867a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	685a      	ldr	r2, [r3, #4]
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	683a      	ldr	r2, [r7, #0]
 800869a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	68fa      	ldr	r2, [r7, #12]
 80086a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	683a      	ldr	r2, [r7, #0]
 80086a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	1c5a      	adds	r2, r3, #1
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	601a      	str	r2, [r3, #0]
}
 80086b8:	bf00      	nop
 80086ba:	3714      	adds	r7, #20
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	691b      	ldr	r3, [r3, #16]
 80086d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	6892      	ldr	r2, [r2, #8]
 80086da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	6852      	ldr	r2, [r2, #4]
 80086e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d103      	bne.n	80086f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	689a      	ldr	r2, [r3, #8]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	1e5a      	subs	r2, r3, #1
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
}
 800870c:	4618      	mov	r0, r3
 800870e:	3714      	adds	r7, #20
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d10b      	bne.n	8008744 <xQueueGenericReset+0x2c>
	__asm volatile
 800872c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008730:	f383 8811 	msr	BASEPRI, r3
 8008734:	f3bf 8f6f 	isb	sy
 8008738:	f3bf 8f4f 	dsb	sy
 800873c:	60bb      	str	r3, [r7, #8]
}
 800873e:	bf00      	nop
 8008740:	bf00      	nop
 8008742:	e7fd      	b.n	8008740 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008744:	f002 f8a0 	bl	800a888 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008750:	68f9      	ldr	r1, [r7, #12]
 8008752:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008754:	fb01 f303 	mul.w	r3, r1, r3
 8008758:	441a      	add	r2, r3
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2200      	movs	r2, #0
 8008762:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008774:	3b01      	subs	r3, #1
 8008776:	68f9      	ldr	r1, [r7, #12]
 8008778:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800877a:	fb01 f303 	mul.w	r3, r1, r3
 800877e:	441a      	add	r2, r3
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	22ff      	movs	r2, #255	@ 0xff
 8008788:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	22ff      	movs	r2, #255	@ 0xff
 8008790:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d114      	bne.n	80087c4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	691b      	ldr	r3, [r3, #16]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d01a      	beq.n	80087d8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	3310      	adds	r3, #16
 80087a6:	4618      	mov	r0, r3
 80087a8:	f001 f91a 	bl	80099e0 <xTaskRemoveFromEventList>
 80087ac:	4603      	mov	r3, r0
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d012      	beq.n	80087d8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80087b2:	4b0d      	ldr	r3, [pc, #52]	@ (80087e8 <xQueueGenericReset+0xd0>)
 80087b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087b8:	601a      	str	r2, [r3, #0]
 80087ba:	f3bf 8f4f 	dsb	sy
 80087be:	f3bf 8f6f 	isb	sy
 80087c2:	e009      	b.n	80087d8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	3310      	adds	r3, #16
 80087c8:	4618      	mov	r0, r3
 80087ca:	f7ff fef1 	bl	80085b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	3324      	adds	r3, #36	@ 0x24
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7ff feec 	bl	80085b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80087d8:	f002 f888 	bl	800a8ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80087dc:	2301      	movs	r3, #1
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3710      	adds	r7, #16
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	e000ed04 	.word	0xe000ed04

080087ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b08e      	sub	sp, #56	@ 0x38
 80087f0:	af02      	add	r7, sp, #8
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	60b9      	str	r1, [r7, #8]
 80087f6:	607a      	str	r2, [r7, #4]
 80087f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d10b      	bne.n	8008818 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008804:	f383 8811 	msr	BASEPRI, r3
 8008808:	f3bf 8f6f 	isb	sy
 800880c:	f3bf 8f4f 	dsb	sy
 8008810:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008812:	bf00      	nop
 8008814:	bf00      	nop
 8008816:	e7fd      	b.n	8008814 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d10b      	bne.n	8008836 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800881e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008822:	f383 8811 	msr	BASEPRI, r3
 8008826:	f3bf 8f6f 	isb	sy
 800882a:	f3bf 8f4f 	dsb	sy
 800882e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008830:	bf00      	nop
 8008832:	bf00      	nop
 8008834:	e7fd      	b.n	8008832 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d002      	beq.n	8008842 <xQueueGenericCreateStatic+0x56>
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d001      	beq.n	8008846 <xQueueGenericCreateStatic+0x5a>
 8008842:	2301      	movs	r3, #1
 8008844:	e000      	b.n	8008848 <xQueueGenericCreateStatic+0x5c>
 8008846:	2300      	movs	r3, #0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d10b      	bne.n	8008864 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800884c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008850:	f383 8811 	msr	BASEPRI, r3
 8008854:	f3bf 8f6f 	isb	sy
 8008858:	f3bf 8f4f 	dsb	sy
 800885c:	623b      	str	r3, [r7, #32]
}
 800885e:	bf00      	nop
 8008860:	bf00      	nop
 8008862:	e7fd      	b.n	8008860 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d102      	bne.n	8008870 <xQueueGenericCreateStatic+0x84>
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d101      	bne.n	8008874 <xQueueGenericCreateStatic+0x88>
 8008870:	2301      	movs	r3, #1
 8008872:	e000      	b.n	8008876 <xQueueGenericCreateStatic+0x8a>
 8008874:	2300      	movs	r3, #0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d10b      	bne.n	8008892 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800887a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800887e:	f383 8811 	msr	BASEPRI, r3
 8008882:	f3bf 8f6f 	isb	sy
 8008886:	f3bf 8f4f 	dsb	sy
 800888a:	61fb      	str	r3, [r7, #28]
}
 800888c:	bf00      	nop
 800888e:	bf00      	nop
 8008890:	e7fd      	b.n	800888e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008892:	2350      	movs	r3, #80	@ 0x50
 8008894:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	2b50      	cmp	r3, #80	@ 0x50
 800889a:	d00b      	beq.n	80088b4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800889c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a0:	f383 8811 	msr	BASEPRI, r3
 80088a4:	f3bf 8f6f 	isb	sy
 80088a8:	f3bf 8f4f 	dsb	sy
 80088ac:	61bb      	str	r3, [r7, #24]
}
 80088ae:	bf00      	nop
 80088b0:	bf00      	nop
 80088b2:	e7fd      	b.n	80088b0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80088b4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80088ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d00d      	beq.n	80088dc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80088c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088c2:	2201      	movs	r2, #1
 80088c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80088c8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80088cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088ce:	9300      	str	r3, [sp, #0]
 80088d0:	4613      	mov	r3, r2
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	68b9      	ldr	r1, [r7, #8]
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	f000 f805 	bl	80088e6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80088dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80088de:	4618      	mov	r0, r3
 80088e0:	3730      	adds	r7, #48	@ 0x30
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b084      	sub	sp, #16
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	60f8      	str	r0, [r7, #12]
 80088ee:	60b9      	str	r1, [r7, #8]
 80088f0:	607a      	str	r2, [r7, #4]
 80088f2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d103      	bne.n	8008902 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	69ba      	ldr	r2, [r7, #24]
 80088fe:	601a      	str	r2, [r3, #0]
 8008900:	e002      	b.n	8008908 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008908:	69bb      	ldr	r3, [r7, #24]
 800890a:	68fa      	ldr	r2, [r7, #12]
 800890c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	68ba      	ldr	r2, [r7, #8]
 8008912:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008914:	2101      	movs	r1, #1
 8008916:	69b8      	ldr	r0, [r7, #24]
 8008918:	f7ff fefe 	bl	8008718 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800891c:	69bb      	ldr	r3, [r7, #24]
 800891e:	78fa      	ldrb	r2, [r7, #3]
 8008920:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008924:	bf00      	nop
 8008926:	3710      	adds	r7, #16
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b08e      	sub	sp, #56	@ 0x38
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]
 8008938:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800893a:	2300      	movs	r3, #0
 800893c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008944:	2b00      	cmp	r3, #0
 8008946:	d10b      	bne.n	8008960 <xQueueGenericSend+0x34>
	__asm volatile
 8008948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800894c:	f383 8811 	msr	BASEPRI, r3
 8008950:	f3bf 8f6f 	isb	sy
 8008954:	f3bf 8f4f 	dsb	sy
 8008958:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800895a:	bf00      	nop
 800895c:	bf00      	nop
 800895e:	e7fd      	b.n	800895c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d103      	bne.n	800896e <xQueueGenericSend+0x42>
 8008966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800896a:	2b00      	cmp	r3, #0
 800896c:	d101      	bne.n	8008972 <xQueueGenericSend+0x46>
 800896e:	2301      	movs	r3, #1
 8008970:	e000      	b.n	8008974 <xQueueGenericSend+0x48>
 8008972:	2300      	movs	r3, #0
 8008974:	2b00      	cmp	r3, #0
 8008976:	d10b      	bne.n	8008990 <xQueueGenericSend+0x64>
	__asm volatile
 8008978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800897c:	f383 8811 	msr	BASEPRI, r3
 8008980:	f3bf 8f6f 	isb	sy
 8008984:	f3bf 8f4f 	dsb	sy
 8008988:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800898a:	bf00      	nop
 800898c:	bf00      	nop
 800898e:	e7fd      	b.n	800898c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	2b02      	cmp	r3, #2
 8008994:	d103      	bne.n	800899e <xQueueGenericSend+0x72>
 8008996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800899a:	2b01      	cmp	r3, #1
 800899c:	d101      	bne.n	80089a2 <xQueueGenericSend+0x76>
 800899e:	2301      	movs	r3, #1
 80089a0:	e000      	b.n	80089a4 <xQueueGenericSend+0x78>
 80089a2:	2300      	movs	r3, #0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d10b      	bne.n	80089c0 <xQueueGenericSend+0x94>
	__asm volatile
 80089a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ac:	f383 8811 	msr	BASEPRI, r3
 80089b0:	f3bf 8f6f 	isb	sy
 80089b4:	f3bf 8f4f 	dsb	sy
 80089b8:	623b      	str	r3, [r7, #32]
}
 80089ba:	bf00      	nop
 80089bc:	bf00      	nop
 80089be:	e7fd      	b.n	80089bc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80089c0:	f001 f9f6 	bl	8009db0 <xTaskGetSchedulerState>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d102      	bne.n	80089d0 <xQueueGenericSend+0xa4>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d101      	bne.n	80089d4 <xQueueGenericSend+0xa8>
 80089d0:	2301      	movs	r3, #1
 80089d2:	e000      	b.n	80089d6 <xQueueGenericSend+0xaa>
 80089d4:	2300      	movs	r3, #0
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d10b      	bne.n	80089f2 <xQueueGenericSend+0xc6>
	__asm volatile
 80089da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089de:	f383 8811 	msr	BASEPRI, r3
 80089e2:	f3bf 8f6f 	isb	sy
 80089e6:	f3bf 8f4f 	dsb	sy
 80089ea:	61fb      	str	r3, [r7, #28]
}
 80089ec:	bf00      	nop
 80089ee:	bf00      	nop
 80089f0:	e7fd      	b.n	80089ee <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80089f2:	f001 ff49 	bl	800a888 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80089f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80089fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d302      	bcc.n	8008a08 <xQueueGenericSend+0xdc>
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	2b02      	cmp	r3, #2
 8008a06:	d129      	bne.n	8008a5c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a08:	683a      	ldr	r2, [r7, #0]
 8008a0a:	68b9      	ldr	r1, [r7, #8]
 8008a0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a0e:	f000 fa0f 	bl	8008e30 <prvCopyDataToQueue>
 8008a12:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d010      	beq.n	8008a3e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a1e:	3324      	adds	r3, #36	@ 0x24
 8008a20:	4618      	mov	r0, r3
 8008a22:	f000 ffdd 	bl	80099e0 <xTaskRemoveFromEventList>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d013      	beq.n	8008a54 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008a2c:	4b3f      	ldr	r3, [pc, #252]	@ (8008b2c <xQueueGenericSend+0x200>)
 8008a2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a32:	601a      	str	r2, [r3, #0]
 8008a34:	f3bf 8f4f 	dsb	sy
 8008a38:	f3bf 8f6f 	isb	sy
 8008a3c:	e00a      	b.n	8008a54 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d007      	beq.n	8008a54 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008a44:	4b39      	ldr	r3, [pc, #228]	@ (8008b2c <xQueueGenericSend+0x200>)
 8008a46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a4a:	601a      	str	r2, [r3, #0]
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008a54:	f001 ff4a 	bl	800a8ec <vPortExitCritical>
				return pdPASS;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	e063      	b.n	8008b24 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d103      	bne.n	8008a6a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008a62:	f001 ff43 	bl	800a8ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008a66:	2300      	movs	r3, #0
 8008a68:	e05c      	b.n	8008b24 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d106      	bne.n	8008a7e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a70:	f107 0314 	add.w	r3, r7, #20
 8008a74:	4618      	mov	r0, r3
 8008a76:	f001 f83f 	bl	8009af8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a7e:	f001 ff35 	bl	800a8ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a82:	f000 fd87 	bl	8009594 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a86:	f001 feff 	bl	800a888 <vPortEnterCritical>
 8008a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a90:	b25b      	sxtb	r3, r3
 8008a92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a96:	d103      	bne.n	8008aa0 <xQueueGenericSend+0x174>
 8008a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008aa6:	b25b      	sxtb	r3, r3
 8008aa8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008aac:	d103      	bne.n	8008ab6 <xQueueGenericSend+0x18a>
 8008aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ab6:	f001 ff19 	bl	800a8ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008aba:	1d3a      	adds	r2, r7, #4
 8008abc:	f107 0314 	add.w	r3, r7, #20
 8008ac0:	4611      	mov	r1, r2
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f001 f82e 	bl	8009b24 <xTaskCheckForTimeOut>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d124      	bne.n	8008b18 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008ace:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008ad0:	f000 faa6 	bl	8009020 <prvIsQueueFull>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d018      	beq.n	8008b0c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008adc:	3310      	adds	r3, #16
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	4611      	mov	r1, r2
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f000 ff2a 	bl	800993c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008ae8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008aea:	f000 fa31 	bl	8008f50 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008aee:	f000 fd5f 	bl	80095b0 <xTaskResumeAll>
 8008af2:	4603      	mov	r3, r0
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	f47f af7c 	bne.w	80089f2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008afa:	4b0c      	ldr	r3, [pc, #48]	@ (8008b2c <xQueueGenericSend+0x200>)
 8008afc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b00:	601a      	str	r2, [r3, #0]
 8008b02:	f3bf 8f4f 	dsb	sy
 8008b06:	f3bf 8f6f 	isb	sy
 8008b0a:	e772      	b.n	80089f2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008b0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b0e:	f000 fa1f 	bl	8008f50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b12:	f000 fd4d 	bl	80095b0 <xTaskResumeAll>
 8008b16:	e76c      	b.n	80089f2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008b18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b1a:	f000 fa19 	bl	8008f50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b1e:	f000 fd47 	bl	80095b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008b22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3738      	adds	r7, #56	@ 0x38
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	e000ed04 	.word	0xe000ed04

08008b30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b090      	sub	sp, #64	@ 0x40
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	607a      	str	r2, [r7, #4]
 8008b3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d10b      	bne.n	8008b60 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b4c:	f383 8811 	msr	BASEPRI, r3
 8008b50:	f3bf 8f6f 	isb	sy
 8008b54:	f3bf 8f4f 	dsb	sy
 8008b58:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008b5a:	bf00      	nop
 8008b5c:	bf00      	nop
 8008b5e:	e7fd      	b.n	8008b5c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d103      	bne.n	8008b6e <xQueueGenericSendFromISR+0x3e>
 8008b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d101      	bne.n	8008b72 <xQueueGenericSendFromISR+0x42>
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e000      	b.n	8008b74 <xQueueGenericSendFromISR+0x44>
 8008b72:	2300      	movs	r3, #0
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d10b      	bne.n	8008b90 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b7c:	f383 8811 	msr	BASEPRI, r3
 8008b80:	f3bf 8f6f 	isb	sy
 8008b84:	f3bf 8f4f 	dsb	sy
 8008b88:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008b8a:	bf00      	nop
 8008b8c:	bf00      	nop
 8008b8e:	e7fd      	b.n	8008b8c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	2b02      	cmp	r3, #2
 8008b94:	d103      	bne.n	8008b9e <xQueueGenericSendFromISR+0x6e>
 8008b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d101      	bne.n	8008ba2 <xQueueGenericSendFromISR+0x72>
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e000      	b.n	8008ba4 <xQueueGenericSendFromISR+0x74>
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d10b      	bne.n	8008bc0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bac:	f383 8811 	msr	BASEPRI, r3
 8008bb0:	f3bf 8f6f 	isb	sy
 8008bb4:	f3bf 8f4f 	dsb	sy
 8008bb8:	623b      	str	r3, [r7, #32]
}
 8008bba:	bf00      	nop
 8008bbc:	bf00      	nop
 8008bbe:	e7fd      	b.n	8008bbc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008bc0:	f001 ff42 	bl	800aa48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008bc4:	f3ef 8211 	mrs	r2, BASEPRI
 8008bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bcc:	f383 8811 	msr	BASEPRI, r3
 8008bd0:	f3bf 8f6f 	isb	sy
 8008bd4:	f3bf 8f4f 	dsb	sy
 8008bd8:	61fa      	str	r2, [r7, #28]
 8008bda:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008bdc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008bde:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008be2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008be6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d302      	bcc.n	8008bf2 <xQueueGenericSendFromISR+0xc2>
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	d12f      	bne.n	8008c52 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bf4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008bf8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c02:	683a      	ldr	r2, [r7, #0]
 8008c04:	68b9      	ldr	r1, [r7, #8]
 8008c06:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008c08:	f000 f912 	bl	8008e30 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008c0c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008c10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c14:	d112      	bne.n	8008c3c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d016      	beq.n	8008c4c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c20:	3324      	adds	r3, #36	@ 0x24
 8008c22:	4618      	mov	r0, r3
 8008c24:	f000 fedc 	bl	80099e0 <xTaskRemoveFromEventList>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d00e      	beq.n	8008c4c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d00b      	beq.n	8008c4c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	601a      	str	r2, [r3, #0]
 8008c3a:	e007      	b.n	8008c4c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008c3c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008c40:	3301      	adds	r3, #1
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	b25a      	sxtb	r2, r3
 8008c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008c50:	e001      	b.n	8008c56 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008c52:	2300      	movs	r3, #0
 8008c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c58:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008c60:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008c62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3740      	adds	r7, #64	@ 0x40
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b08c      	sub	sp, #48	@ 0x30
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	60b9      	str	r1, [r7, #8]
 8008c76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d10b      	bne.n	8008c9e <xQueueReceive+0x32>
	__asm volatile
 8008c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c8a:	f383 8811 	msr	BASEPRI, r3
 8008c8e:	f3bf 8f6f 	isb	sy
 8008c92:	f3bf 8f4f 	dsb	sy
 8008c96:	623b      	str	r3, [r7, #32]
}
 8008c98:	bf00      	nop
 8008c9a:	bf00      	nop
 8008c9c:	e7fd      	b.n	8008c9a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d103      	bne.n	8008cac <xQueueReceive+0x40>
 8008ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d101      	bne.n	8008cb0 <xQueueReceive+0x44>
 8008cac:	2301      	movs	r3, #1
 8008cae:	e000      	b.n	8008cb2 <xQueueReceive+0x46>
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d10b      	bne.n	8008cce <xQueueReceive+0x62>
	__asm volatile
 8008cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cba:	f383 8811 	msr	BASEPRI, r3
 8008cbe:	f3bf 8f6f 	isb	sy
 8008cc2:	f3bf 8f4f 	dsb	sy
 8008cc6:	61fb      	str	r3, [r7, #28]
}
 8008cc8:	bf00      	nop
 8008cca:	bf00      	nop
 8008ccc:	e7fd      	b.n	8008cca <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008cce:	f001 f86f 	bl	8009db0 <xTaskGetSchedulerState>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d102      	bne.n	8008cde <xQueueReceive+0x72>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d101      	bne.n	8008ce2 <xQueueReceive+0x76>
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e000      	b.n	8008ce4 <xQueueReceive+0x78>
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d10b      	bne.n	8008d00 <xQueueReceive+0x94>
	__asm volatile
 8008ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cec:	f383 8811 	msr	BASEPRI, r3
 8008cf0:	f3bf 8f6f 	isb	sy
 8008cf4:	f3bf 8f4f 	dsb	sy
 8008cf8:	61bb      	str	r3, [r7, #24]
}
 8008cfa:	bf00      	nop
 8008cfc:	bf00      	nop
 8008cfe:	e7fd      	b.n	8008cfc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d00:	f001 fdc2 	bl	800a888 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d08:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d01f      	beq.n	8008d50 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d10:	68b9      	ldr	r1, [r7, #8]
 8008d12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d14:	f000 f8f6 	bl	8008f04 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d1a:	1e5a      	subs	r2, r3, #1
 8008d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d1e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d22:	691b      	ldr	r3, [r3, #16]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d00f      	beq.n	8008d48 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d2a:	3310      	adds	r3, #16
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f000 fe57 	bl	80099e0 <xTaskRemoveFromEventList>
 8008d32:	4603      	mov	r3, r0
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d007      	beq.n	8008d48 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008d38:	4b3c      	ldr	r3, [pc, #240]	@ (8008e2c <xQueueReceive+0x1c0>)
 8008d3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d3e:	601a      	str	r2, [r3, #0]
 8008d40:	f3bf 8f4f 	dsb	sy
 8008d44:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008d48:	f001 fdd0 	bl	800a8ec <vPortExitCritical>
				return pdPASS;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e069      	b.n	8008e24 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d103      	bne.n	8008d5e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008d56:	f001 fdc9 	bl	800a8ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	e062      	b.n	8008e24 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d106      	bne.n	8008d72 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d64:	f107 0310 	add.w	r3, r7, #16
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f000 fec5 	bl	8009af8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d72:	f001 fdbb 	bl	800a8ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d76:	f000 fc0d 	bl	8009594 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d7a:	f001 fd85 	bl	800a888 <vPortEnterCritical>
 8008d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008d84:	b25b      	sxtb	r3, r3
 8008d86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d8a:	d103      	bne.n	8008d94 <xQueueReceive+0x128>
 8008d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d8e:	2200      	movs	r2, #0
 8008d90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d96:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008d9a:	b25b      	sxtb	r3, r3
 8008d9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008da0:	d103      	bne.n	8008daa <xQueueReceive+0x13e>
 8008da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008da4:	2200      	movs	r2, #0
 8008da6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008daa:	f001 fd9f 	bl	800a8ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008dae:	1d3a      	adds	r2, r7, #4
 8008db0:	f107 0310 	add.w	r3, r7, #16
 8008db4:	4611      	mov	r1, r2
 8008db6:	4618      	mov	r0, r3
 8008db8:	f000 feb4 	bl	8009b24 <xTaskCheckForTimeOut>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d123      	bne.n	8008e0a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008dc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008dc4:	f000 f916 	bl	8008ff4 <prvIsQueueEmpty>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d017      	beq.n	8008dfe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dd0:	3324      	adds	r3, #36	@ 0x24
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	4611      	mov	r1, r2
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f000 fdb0 	bl	800993c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008ddc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008dde:	f000 f8b7 	bl	8008f50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008de2:	f000 fbe5 	bl	80095b0 <xTaskResumeAll>
 8008de6:	4603      	mov	r3, r0
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d189      	bne.n	8008d00 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008dec:	4b0f      	ldr	r3, [pc, #60]	@ (8008e2c <xQueueReceive+0x1c0>)
 8008dee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008df2:	601a      	str	r2, [r3, #0]
 8008df4:	f3bf 8f4f 	dsb	sy
 8008df8:	f3bf 8f6f 	isb	sy
 8008dfc:	e780      	b.n	8008d00 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008dfe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e00:	f000 f8a6 	bl	8008f50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e04:	f000 fbd4 	bl	80095b0 <xTaskResumeAll>
 8008e08:	e77a      	b.n	8008d00 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008e0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e0c:	f000 f8a0 	bl	8008f50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e10:	f000 fbce 	bl	80095b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e16:	f000 f8ed 	bl	8008ff4 <prvIsQueueEmpty>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	f43f af6f 	beq.w	8008d00 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e22:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3730      	adds	r7, #48	@ 0x30
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	e000ed04 	.word	0xe000ed04

08008e30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b086      	sub	sp, #24
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d10d      	bne.n	8008e6a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d14d      	bne.n	8008ef2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f000 ffc6 	bl	8009dec <xTaskPriorityDisinherit>
 8008e60:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2200      	movs	r2, #0
 8008e66:	609a      	str	r2, [r3, #8]
 8008e68:	e043      	b.n	8008ef2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d119      	bne.n	8008ea4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	6858      	ldr	r0, [r3, #4]
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e78:	461a      	mov	r2, r3
 8008e7a:	68b9      	ldr	r1, [r7, #8]
 8008e7c:	f011 faa3 	bl	801a3c6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	685a      	ldr	r2, [r3, #4]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e88:	441a      	add	r2, r3
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	685a      	ldr	r2, [r3, #4]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d32b      	bcc.n	8008ef2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	605a      	str	r2, [r3, #4]
 8008ea2:	e026      	b.n	8008ef2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	68d8      	ldr	r0, [r3, #12]
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eac:	461a      	mov	r2, r3
 8008eae:	68b9      	ldr	r1, [r7, #8]
 8008eb0:	f011 fa89 	bl	801a3c6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	68da      	ldr	r2, [r3, #12]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ebc:	425b      	negs	r3, r3
 8008ebe:	441a      	add	r2, r3
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	68da      	ldr	r2, [r3, #12]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d207      	bcs.n	8008ee0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	689a      	ldr	r2, [r3, #8]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ed8:	425b      	negs	r3, r3
 8008eda:	441a      	add	r2, r3
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2b02      	cmp	r3, #2
 8008ee4:	d105      	bne.n	8008ef2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d002      	beq.n	8008ef2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	3b01      	subs	r3, #1
 8008ef0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	1c5a      	adds	r2, r3, #1
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008efa:	697b      	ldr	r3, [r7, #20]
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3718      	adds	r7, #24
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d018      	beq.n	8008f48 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	68da      	ldr	r2, [r3, #12]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f1e:	441a      	add	r2, r3
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	68da      	ldr	r2, [r3, #12]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d303      	bcc.n	8008f38 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	68d9      	ldr	r1, [r3, #12]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f40:	461a      	mov	r2, r3
 8008f42:	6838      	ldr	r0, [r7, #0]
 8008f44:	f011 fa3f 	bl	801a3c6 <memcpy>
	}
}
 8008f48:	bf00      	nop
 8008f4a:	3708      	adds	r7, #8
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b084      	sub	sp, #16
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008f58:	f001 fc96 	bl	800a888 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008f62:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f64:	e011      	b.n	8008f8a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d012      	beq.n	8008f94 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	3324      	adds	r3, #36	@ 0x24
 8008f72:	4618      	mov	r0, r3
 8008f74:	f000 fd34 	bl	80099e0 <xTaskRemoveFromEventList>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d001      	beq.n	8008f82 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008f7e:	f000 fe35 	bl	8009bec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008f82:	7bfb      	ldrb	r3, [r7, #15]
 8008f84:	3b01      	subs	r3, #1
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	dce9      	bgt.n	8008f66 <prvUnlockQueue+0x16>
 8008f92:	e000      	b.n	8008f96 <prvUnlockQueue+0x46>
					break;
 8008f94:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	22ff      	movs	r2, #255	@ 0xff
 8008f9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008f9e:	f001 fca5 	bl	800a8ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008fa2:	f001 fc71 	bl	800a888 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008fac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008fae:	e011      	b.n	8008fd4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	691b      	ldr	r3, [r3, #16]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d012      	beq.n	8008fde <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	3310      	adds	r3, #16
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f000 fd0f 	bl	80099e0 <xTaskRemoveFromEventList>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d001      	beq.n	8008fcc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008fc8:	f000 fe10 	bl	8009bec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008fcc:	7bbb      	ldrb	r3, [r7, #14]
 8008fce:	3b01      	subs	r3, #1
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008fd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	dce9      	bgt.n	8008fb0 <prvUnlockQueue+0x60>
 8008fdc:	e000      	b.n	8008fe0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008fde:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	22ff      	movs	r2, #255	@ 0xff
 8008fe4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008fe8:	f001 fc80 	bl	800a8ec <vPortExitCritical>
}
 8008fec:	bf00      	nop
 8008fee:	3710      	adds	r7, #16
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ffc:	f001 fc44 	bl	800a888 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009004:	2b00      	cmp	r3, #0
 8009006:	d102      	bne.n	800900e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009008:	2301      	movs	r3, #1
 800900a:	60fb      	str	r3, [r7, #12]
 800900c:	e001      	b.n	8009012 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800900e:	2300      	movs	r3, #0
 8009010:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009012:	f001 fc6b 	bl	800a8ec <vPortExitCritical>

	return xReturn;
 8009016:	68fb      	ldr	r3, [r7, #12]
}
 8009018:	4618      	mov	r0, r3
 800901a:	3710      	adds	r7, #16
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b084      	sub	sp, #16
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009028:	f001 fc2e 	bl	800a888 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009034:	429a      	cmp	r2, r3
 8009036:	d102      	bne.n	800903e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009038:	2301      	movs	r3, #1
 800903a:	60fb      	str	r3, [r7, #12]
 800903c:	e001      	b.n	8009042 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800903e:	2300      	movs	r3, #0
 8009040:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009042:	f001 fc53 	bl	800a8ec <vPortExitCritical>

	return xReturn;
 8009046:	68fb      	ldr	r3, [r7, #12]
}
 8009048:	4618      	mov	r0, r3
 800904a:	3710      	adds	r7, #16
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009050:	b480      	push	{r7}
 8009052:	b085      	sub	sp, #20
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800905a:	2300      	movs	r3, #0
 800905c:	60fb      	str	r3, [r7, #12]
 800905e:	e014      	b.n	800908a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009060:	4a0f      	ldr	r2, [pc, #60]	@ (80090a0 <vQueueAddToRegistry+0x50>)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d10b      	bne.n	8009084 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800906c:	490c      	ldr	r1, [pc, #48]	@ (80090a0 <vQueueAddToRegistry+0x50>)
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	683a      	ldr	r2, [r7, #0]
 8009072:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009076:	4a0a      	ldr	r2, [pc, #40]	@ (80090a0 <vQueueAddToRegistry+0x50>)
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	00db      	lsls	r3, r3, #3
 800907c:	4413      	add	r3, r2
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009082:	e006      	b.n	8009092 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	3301      	adds	r3, #1
 8009088:	60fb      	str	r3, [r7, #12]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2b07      	cmp	r3, #7
 800908e:	d9e7      	bls.n	8009060 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009090:	bf00      	nop
 8009092:	bf00      	nop
 8009094:	3714      	adds	r7, #20
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr
 800909e:	bf00      	nop
 80090a0:	20008b80 	.word	0x20008b80

080090a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b086      	sub	sp, #24
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	60b9      	str	r1, [r7, #8]
 80090ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80090b4:	f001 fbe8 	bl	800a888 <vPortEnterCritical>
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80090be:	b25b      	sxtb	r3, r3
 80090c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80090c4:	d103      	bne.n	80090ce <vQueueWaitForMessageRestricted+0x2a>
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	2200      	movs	r2, #0
 80090ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80090d4:	b25b      	sxtb	r3, r3
 80090d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80090da:	d103      	bne.n	80090e4 <vQueueWaitForMessageRestricted+0x40>
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	2200      	movs	r2, #0
 80090e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80090e4:	f001 fc02 	bl	800a8ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d106      	bne.n	80090fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	3324      	adds	r3, #36	@ 0x24
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	68b9      	ldr	r1, [r7, #8]
 80090f8:	4618      	mov	r0, r3
 80090fa:	f000 fc45 	bl	8009988 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80090fe:	6978      	ldr	r0, [r7, #20]
 8009100:	f7ff ff26 	bl	8008f50 <prvUnlockQueue>
	}
 8009104:	bf00      	nop
 8009106:	3718      	adds	r7, #24
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800910c:	b580      	push	{r7, lr}
 800910e:	b08e      	sub	sp, #56	@ 0x38
 8009110:	af04      	add	r7, sp, #16
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	607a      	str	r2, [r7, #4]
 8009118:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800911a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800911c:	2b00      	cmp	r3, #0
 800911e:	d10b      	bne.n	8009138 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009124:	f383 8811 	msr	BASEPRI, r3
 8009128:	f3bf 8f6f 	isb	sy
 800912c:	f3bf 8f4f 	dsb	sy
 8009130:	623b      	str	r3, [r7, #32]
}
 8009132:	bf00      	nop
 8009134:	bf00      	nop
 8009136:	e7fd      	b.n	8009134 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800913a:	2b00      	cmp	r3, #0
 800913c:	d10b      	bne.n	8009156 <xTaskCreateStatic+0x4a>
	__asm volatile
 800913e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009142:	f383 8811 	msr	BASEPRI, r3
 8009146:	f3bf 8f6f 	isb	sy
 800914a:	f3bf 8f4f 	dsb	sy
 800914e:	61fb      	str	r3, [r7, #28]
}
 8009150:	bf00      	nop
 8009152:	bf00      	nop
 8009154:	e7fd      	b.n	8009152 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009156:	235c      	movs	r3, #92	@ 0x5c
 8009158:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	2b5c      	cmp	r3, #92	@ 0x5c
 800915e:	d00b      	beq.n	8009178 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009164:	f383 8811 	msr	BASEPRI, r3
 8009168:	f3bf 8f6f 	isb	sy
 800916c:	f3bf 8f4f 	dsb	sy
 8009170:	61bb      	str	r3, [r7, #24]
}
 8009172:	bf00      	nop
 8009174:	bf00      	nop
 8009176:	e7fd      	b.n	8009174 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009178:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800917a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800917c:	2b00      	cmp	r3, #0
 800917e:	d01e      	beq.n	80091be <xTaskCreateStatic+0xb2>
 8009180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009182:	2b00      	cmp	r3, #0
 8009184:	d01b      	beq.n	80091be <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009188:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800918a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800918c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800918e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009192:	2202      	movs	r2, #2
 8009194:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009198:	2300      	movs	r3, #0
 800919a:	9303      	str	r3, [sp, #12]
 800919c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800919e:	9302      	str	r3, [sp, #8]
 80091a0:	f107 0314 	add.w	r3, r7, #20
 80091a4:	9301      	str	r3, [sp, #4]
 80091a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a8:	9300      	str	r3, [sp, #0]
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	68b9      	ldr	r1, [r7, #8]
 80091b0:	68f8      	ldr	r0, [r7, #12]
 80091b2:	f000 f850 	bl	8009256 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80091b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80091b8:	f000 f8de 	bl	8009378 <prvAddNewTaskToReadyList>
 80091bc:	e001      	b.n	80091c2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80091be:	2300      	movs	r3, #0
 80091c0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80091c2:	697b      	ldr	r3, [r7, #20]
	}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3728      	adds	r7, #40	@ 0x28
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}

080091cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b08c      	sub	sp, #48	@ 0x30
 80091d0:	af04      	add	r7, sp, #16
 80091d2:	60f8      	str	r0, [r7, #12]
 80091d4:	60b9      	str	r1, [r7, #8]
 80091d6:	603b      	str	r3, [r7, #0]
 80091d8:	4613      	mov	r3, r2
 80091da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80091dc:	88fb      	ldrh	r3, [r7, #6]
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	4618      	mov	r0, r3
 80091e2:	f001 fc73 	bl	800aacc <pvPortMalloc>
 80091e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d00e      	beq.n	800920c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80091ee:	205c      	movs	r0, #92	@ 0x5c
 80091f0:	f001 fc6c 	bl	800aacc <pvPortMalloc>
 80091f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80091f6:	69fb      	ldr	r3, [r7, #28]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d003      	beq.n	8009204 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80091fc:	69fb      	ldr	r3, [r7, #28]
 80091fe:	697a      	ldr	r2, [r7, #20]
 8009200:	631a      	str	r2, [r3, #48]	@ 0x30
 8009202:	e005      	b.n	8009210 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009204:	6978      	ldr	r0, [r7, #20]
 8009206:	f001 fd2f 	bl	800ac68 <vPortFree>
 800920a:	e001      	b.n	8009210 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800920c:	2300      	movs	r3, #0
 800920e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009210:	69fb      	ldr	r3, [r7, #28]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d017      	beq.n	8009246 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009216:	69fb      	ldr	r3, [r7, #28]
 8009218:	2200      	movs	r2, #0
 800921a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800921e:	88fa      	ldrh	r2, [r7, #6]
 8009220:	2300      	movs	r3, #0
 8009222:	9303      	str	r3, [sp, #12]
 8009224:	69fb      	ldr	r3, [r7, #28]
 8009226:	9302      	str	r3, [sp, #8]
 8009228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800922a:	9301      	str	r3, [sp, #4]
 800922c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800922e:	9300      	str	r3, [sp, #0]
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	68b9      	ldr	r1, [r7, #8]
 8009234:	68f8      	ldr	r0, [r7, #12]
 8009236:	f000 f80e 	bl	8009256 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800923a:	69f8      	ldr	r0, [r7, #28]
 800923c:	f000 f89c 	bl	8009378 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009240:	2301      	movs	r3, #1
 8009242:	61bb      	str	r3, [r7, #24]
 8009244:	e002      	b.n	800924c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009246:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800924a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800924c:	69bb      	ldr	r3, [r7, #24]
	}
 800924e:	4618      	mov	r0, r3
 8009250:	3720      	adds	r7, #32
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009256:	b580      	push	{r7, lr}
 8009258:	b088      	sub	sp, #32
 800925a:	af00      	add	r7, sp, #0
 800925c:	60f8      	str	r0, [r7, #12]
 800925e:	60b9      	str	r1, [r7, #8]
 8009260:	607a      	str	r2, [r7, #4]
 8009262:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009266:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	461a      	mov	r2, r3
 800926e:	21a5      	movs	r1, #165	@ 0xa5
 8009270:	f010 ffe0 	bl	801a234 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009276:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800927e:	3b01      	subs	r3, #1
 8009280:	009b      	lsls	r3, r3, #2
 8009282:	4413      	add	r3, r2
 8009284:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009286:	69bb      	ldr	r3, [r7, #24]
 8009288:	f023 0307 	bic.w	r3, r3, #7
 800928c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800928e:	69bb      	ldr	r3, [r7, #24]
 8009290:	f003 0307 	and.w	r3, r3, #7
 8009294:	2b00      	cmp	r3, #0
 8009296:	d00b      	beq.n	80092b0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800929c:	f383 8811 	msr	BASEPRI, r3
 80092a0:	f3bf 8f6f 	isb	sy
 80092a4:	f3bf 8f4f 	dsb	sy
 80092a8:	617b      	str	r3, [r7, #20]
}
 80092aa:	bf00      	nop
 80092ac:	bf00      	nop
 80092ae:	e7fd      	b.n	80092ac <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d01f      	beq.n	80092f6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092b6:	2300      	movs	r3, #0
 80092b8:	61fb      	str	r3, [r7, #28]
 80092ba:	e012      	b.n	80092e2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80092bc:	68ba      	ldr	r2, [r7, #8]
 80092be:	69fb      	ldr	r3, [r7, #28]
 80092c0:	4413      	add	r3, r2
 80092c2:	7819      	ldrb	r1, [r3, #0]
 80092c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092c6:	69fb      	ldr	r3, [r7, #28]
 80092c8:	4413      	add	r3, r2
 80092ca:	3334      	adds	r3, #52	@ 0x34
 80092cc:	460a      	mov	r2, r1
 80092ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80092d0:	68ba      	ldr	r2, [r7, #8]
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	4413      	add	r3, r2
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d006      	beq.n	80092ea <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092dc:	69fb      	ldr	r3, [r7, #28]
 80092de:	3301      	adds	r3, #1
 80092e0:	61fb      	str	r3, [r7, #28]
 80092e2:	69fb      	ldr	r3, [r7, #28]
 80092e4:	2b0f      	cmp	r3, #15
 80092e6:	d9e9      	bls.n	80092bc <prvInitialiseNewTask+0x66>
 80092e8:	e000      	b.n	80092ec <prvInitialiseNewTask+0x96>
			{
				break;
 80092ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80092ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ee:	2200      	movs	r2, #0
 80092f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80092f4:	e003      	b.n	80092fe <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80092f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f8:	2200      	movs	r2, #0
 80092fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80092fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009300:	2b37      	cmp	r3, #55	@ 0x37
 8009302:	d901      	bls.n	8009308 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009304:	2337      	movs	r3, #55	@ 0x37
 8009306:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800930a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800930c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800930e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009310:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009312:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009316:	2200      	movs	r2, #0
 8009318:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800931a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800931c:	3304      	adds	r3, #4
 800931e:	4618      	mov	r0, r3
 8009320:	f7ff f966 	bl	80085f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009326:	3318      	adds	r3, #24
 8009328:	4618      	mov	r0, r3
 800932a:	f7ff f961 	bl	80085f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800932e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009330:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009332:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009336:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800933a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800933c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800933e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009340:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009342:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009346:	2200      	movs	r2, #0
 8009348:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800934a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800934c:	2200      	movs	r2, #0
 800934e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009352:	683a      	ldr	r2, [r7, #0]
 8009354:	68f9      	ldr	r1, [r7, #12]
 8009356:	69b8      	ldr	r0, [r7, #24]
 8009358:	f001 f966 	bl	800a628 <pxPortInitialiseStack>
 800935c:	4602      	mov	r2, r0
 800935e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009360:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009364:	2b00      	cmp	r3, #0
 8009366:	d002      	beq.n	800936e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800936a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800936c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800936e:	bf00      	nop
 8009370:	3720      	adds	r7, #32
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
	...

08009378 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009380:	f001 fa82 	bl	800a888 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009384:	4b2d      	ldr	r3, [pc, #180]	@ (800943c <prvAddNewTaskToReadyList+0xc4>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	3301      	adds	r3, #1
 800938a:	4a2c      	ldr	r2, [pc, #176]	@ (800943c <prvAddNewTaskToReadyList+0xc4>)
 800938c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800938e:	4b2c      	ldr	r3, [pc, #176]	@ (8009440 <prvAddNewTaskToReadyList+0xc8>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d109      	bne.n	80093aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009396:	4a2a      	ldr	r2, [pc, #168]	@ (8009440 <prvAddNewTaskToReadyList+0xc8>)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800939c:	4b27      	ldr	r3, [pc, #156]	@ (800943c <prvAddNewTaskToReadyList+0xc4>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d110      	bne.n	80093c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80093a4:	f000 fc46 	bl	8009c34 <prvInitialiseTaskLists>
 80093a8:	e00d      	b.n	80093c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80093aa:	4b26      	ldr	r3, [pc, #152]	@ (8009444 <prvAddNewTaskToReadyList+0xcc>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d109      	bne.n	80093c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80093b2:	4b23      	ldr	r3, [pc, #140]	@ (8009440 <prvAddNewTaskToReadyList+0xc8>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093bc:	429a      	cmp	r2, r3
 80093be:	d802      	bhi.n	80093c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80093c0:	4a1f      	ldr	r2, [pc, #124]	@ (8009440 <prvAddNewTaskToReadyList+0xc8>)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80093c6:	4b20      	ldr	r3, [pc, #128]	@ (8009448 <prvAddNewTaskToReadyList+0xd0>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	3301      	adds	r3, #1
 80093cc:	4a1e      	ldr	r2, [pc, #120]	@ (8009448 <prvAddNewTaskToReadyList+0xd0>)
 80093ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80093d0:	4b1d      	ldr	r3, [pc, #116]	@ (8009448 <prvAddNewTaskToReadyList+0xd0>)
 80093d2:	681a      	ldr	r2, [r3, #0]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093dc:	4b1b      	ldr	r3, [pc, #108]	@ (800944c <prvAddNewTaskToReadyList+0xd4>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d903      	bls.n	80093ec <prvAddNewTaskToReadyList+0x74>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093e8:	4a18      	ldr	r2, [pc, #96]	@ (800944c <prvAddNewTaskToReadyList+0xd4>)
 80093ea:	6013      	str	r3, [r2, #0]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093f0:	4613      	mov	r3, r2
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	4413      	add	r3, r2
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	4a15      	ldr	r2, [pc, #84]	@ (8009450 <prvAddNewTaskToReadyList+0xd8>)
 80093fa:	441a      	add	r2, r3
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	3304      	adds	r3, #4
 8009400:	4619      	mov	r1, r3
 8009402:	4610      	mov	r0, r2
 8009404:	f7ff f901 	bl	800860a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009408:	f001 fa70 	bl	800a8ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800940c:	4b0d      	ldr	r3, [pc, #52]	@ (8009444 <prvAddNewTaskToReadyList+0xcc>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d00e      	beq.n	8009432 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009414:	4b0a      	ldr	r3, [pc, #40]	@ (8009440 <prvAddNewTaskToReadyList+0xc8>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800941e:	429a      	cmp	r2, r3
 8009420:	d207      	bcs.n	8009432 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009422:	4b0c      	ldr	r3, [pc, #48]	@ (8009454 <prvAddNewTaskToReadyList+0xdc>)
 8009424:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009428:	601a      	str	r2, [r3, #0]
 800942a:	f3bf 8f4f 	dsb	sy
 800942e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009432:	bf00      	nop
 8009434:	3708      	adds	r7, #8
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
 800943a:	bf00      	nop
 800943c:	20009094 	.word	0x20009094
 8009440:	20008bc0 	.word	0x20008bc0
 8009444:	200090a0 	.word	0x200090a0
 8009448:	200090b0 	.word	0x200090b0
 800944c:	2000909c 	.word	0x2000909c
 8009450:	20008bc4 	.word	0x20008bc4
 8009454:	e000ed04 	.word	0xe000ed04

08009458 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009460:	2300      	movs	r3, #0
 8009462:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d018      	beq.n	800949c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800946a:	4b14      	ldr	r3, [pc, #80]	@ (80094bc <vTaskDelay+0x64>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d00b      	beq.n	800948a <vTaskDelay+0x32>
	__asm volatile
 8009472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009476:	f383 8811 	msr	BASEPRI, r3
 800947a:	f3bf 8f6f 	isb	sy
 800947e:	f3bf 8f4f 	dsb	sy
 8009482:	60bb      	str	r3, [r7, #8]
}
 8009484:	bf00      	nop
 8009486:	bf00      	nop
 8009488:	e7fd      	b.n	8009486 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800948a:	f000 f883 	bl	8009594 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800948e:	2100      	movs	r1, #0
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 fd1b 	bl	8009ecc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009496:	f000 f88b 	bl	80095b0 <xTaskResumeAll>
 800949a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d107      	bne.n	80094b2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80094a2:	4b07      	ldr	r3, [pc, #28]	@ (80094c0 <vTaskDelay+0x68>)
 80094a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094a8:	601a      	str	r2, [r3, #0]
 80094aa:	f3bf 8f4f 	dsb	sy
 80094ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80094b2:	bf00      	nop
 80094b4:	3710      	adds	r7, #16
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	bf00      	nop
 80094bc:	200090bc 	.word	0x200090bc
 80094c0:	e000ed04 	.word	0xe000ed04

080094c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b08a      	sub	sp, #40	@ 0x28
 80094c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80094ca:	2300      	movs	r3, #0
 80094cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80094ce:	2300      	movs	r3, #0
 80094d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80094d2:	463a      	mov	r2, r7
 80094d4:	1d39      	adds	r1, r7, #4
 80094d6:	f107 0308 	add.w	r3, r7, #8
 80094da:	4618      	mov	r0, r3
 80094dc:	f7ff f834 	bl	8008548 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80094e0:	6839      	ldr	r1, [r7, #0]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	68ba      	ldr	r2, [r7, #8]
 80094e6:	9202      	str	r2, [sp, #8]
 80094e8:	9301      	str	r3, [sp, #4]
 80094ea:	2300      	movs	r3, #0
 80094ec:	9300      	str	r3, [sp, #0]
 80094ee:	2300      	movs	r3, #0
 80094f0:	460a      	mov	r2, r1
 80094f2:	4922      	ldr	r1, [pc, #136]	@ (800957c <vTaskStartScheduler+0xb8>)
 80094f4:	4822      	ldr	r0, [pc, #136]	@ (8009580 <vTaskStartScheduler+0xbc>)
 80094f6:	f7ff fe09 	bl	800910c <xTaskCreateStatic>
 80094fa:	4603      	mov	r3, r0
 80094fc:	4a21      	ldr	r2, [pc, #132]	@ (8009584 <vTaskStartScheduler+0xc0>)
 80094fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009500:	4b20      	ldr	r3, [pc, #128]	@ (8009584 <vTaskStartScheduler+0xc0>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d002      	beq.n	800950e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009508:	2301      	movs	r3, #1
 800950a:	617b      	str	r3, [r7, #20]
 800950c:	e001      	b.n	8009512 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800950e:	2300      	movs	r3, #0
 8009510:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	2b01      	cmp	r3, #1
 8009516:	d102      	bne.n	800951e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009518:	f000 fd2c 	bl	8009f74 <xTimerCreateTimerTask>
 800951c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	2b01      	cmp	r3, #1
 8009522:	d116      	bne.n	8009552 <vTaskStartScheduler+0x8e>
	__asm volatile
 8009524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009528:	f383 8811 	msr	BASEPRI, r3
 800952c:	f3bf 8f6f 	isb	sy
 8009530:	f3bf 8f4f 	dsb	sy
 8009534:	613b      	str	r3, [r7, #16]
}
 8009536:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009538:	4b13      	ldr	r3, [pc, #76]	@ (8009588 <vTaskStartScheduler+0xc4>)
 800953a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800953e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009540:	4b12      	ldr	r3, [pc, #72]	@ (800958c <vTaskStartScheduler+0xc8>)
 8009542:	2201      	movs	r2, #1
 8009544:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009546:	4b12      	ldr	r3, [pc, #72]	@ (8009590 <vTaskStartScheduler+0xcc>)
 8009548:	2200      	movs	r2, #0
 800954a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800954c:	f001 f8f8 	bl	800a740 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009550:	e00f      	b.n	8009572 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009558:	d10b      	bne.n	8009572 <vTaskStartScheduler+0xae>
	__asm volatile
 800955a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800955e:	f383 8811 	msr	BASEPRI, r3
 8009562:	f3bf 8f6f 	isb	sy
 8009566:	f3bf 8f4f 	dsb	sy
 800956a:	60fb      	str	r3, [r7, #12]
}
 800956c:	bf00      	nop
 800956e:	bf00      	nop
 8009570:	e7fd      	b.n	800956e <vTaskStartScheduler+0xaa>
}
 8009572:	bf00      	nop
 8009574:	3718      	adds	r7, #24
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}
 800957a:	bf00      	nop
 800957c:	0801b0e8 	.word	0x0801b0e8
 8009580:	08009c05 	.word	0x08009c05
 8009584:	200090b8 	.word	0x200090b8
 8009588:	200090b4 	.word	0x200090b4
 800958c:	200090a0 	.word	0x200090a0
 8009590:	20009098 	.word	0x20009098

08009594 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009594:	b480      	push	{r7}
 8009596:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009598:	4b04      	ldr	r3, [pc, #16]	@ (80095ac <vTaskSuspendAll+0x18>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	3301      	adds	r3, #1
 800959e:	4a03      	ldr	r2, [pc, #12]	@ (80095ac <vTaskSuspendAll+0x18>)
 80095a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80095a2:	bf00      	nop
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr
 80095ac:	200090bc 	.word	0x200090bc

080095b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b084      	sub	sp, #16
 80095b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80095b6:	2300      	movs	r3, #0
 80095b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80095ba:	2300      	movs	r3, #0
 80095bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80095be:	4b42      	ldr	r3, [pc, #264]	@ (80096c8 <xTaskResumeAll+0x118>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d10b      	bne.n	80095de <xTaskResumeAll+0x2e>
	__asm volatile
 80095c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ca:	f383 8811 	msr	BASEPRI, r3
 80095ce:	f3bf 8f6f 	isb	sy
 80095d2:	f3bf 8f4f 	dsb	sy
 80095d6:	603b      	str	r3, [r7, #0]
}
 80095d8:	bf00      	nop
 80095da:	bf00      	nop
 80095dc:	e7fd      	b.n	80095da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80095de:	f001 f953 	bl	800a888 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80095e2:	4b39      	ldr	r3, [pc, #228]	@ (80096c8 <xTaskResumeAll+0x118>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	3b01      	subs	r3, #1
 80095e8:	4a37      	ldr	r2, [pc, #220]	@ (80096c8 <xTaskResumeAll+0x118>)
 80095ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095ec:	4b36      	ldr	r3, [pc, #216]	@ (80096c8 <xTaskResumeAll+0x118>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d162      	bne.n	80096ba <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80095f4:	4b35      	ldr	r3, [pc, #212]	@ (80096cc <xTaskResumeAll+0x11c>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d05e      	beq.n	80096ba <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80095fc:	e02f      	b.n	800965e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095fe:	4b34      	ldr	r3, [pc, #208]	@ (80096d0 <xTaskResumeAll+0x120>)
 8009600:	68db      	ldr	r3, [r3, #12]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	3318      	adds	r3, #24
 800960a:	4618      	mov	r0, r3
 800960c:	f7ff f85a 	bl	80086c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	3304      	adds	r3, #4
 8009614:	4618      	mov	r0, r3
 8009616:	f7ff f855 	bl	80086c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800961e:	4b2d      	ldr	r3, [pc, #180]	@ (80096d4 <xTaskResumeAll+0x124>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	429a      	cmp	r2, r3
 8009624:	d903      	bls.n	800962e <xTaskResumeAll+0x7e>
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800962a:	4a2a      	ldr	r2, [pc, #168]	@ (80096d4 <xTaskResumeAll+0x124>)
 800962c:	6013      	str	r3, [r2, #0]
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009632:	4613      	mov	r3, r2
 8009634:	009b      	lsls	r3, r3, #2
 8009636:	4413      	add	r3, r2
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	4a27      	ldr	r2, [pc, #156]	@ (80096d8 <xTaskResumeAll+0x128>)
 800963c:	441a      	add	r2, r3
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	3304      	adds	r3, #4
 8009642:	4619      	mov	r1, r3
 8009644:	4610      	mov	r0, r2
 8009646:	f7fe ffe0 	bl	800860a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800964e:	4b23      	ldr	r3, [pc, #140]	@ (80096dc <xTaskResumeAll+0x12c>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009654:	429a      	cmp	r2, r3
 8009656:	d302      	bcc.n	800965e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009658:	4b21      	ldr	r3, [pc, #132]	@ (80096e0 <xTaskResumeAll+0x130>)
 800965a:	2201      	movs	r2, #1
 800965c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800965e:	4b1c      	ldr	r3, [pc, #112]	@ (80096d0 <xTaskResumeAll+0x120>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d1cb      	bne.n	80095fe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d001      	beq.n	8009670 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800966c:	f000 fb80 	bl	8009d70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009670:	4b1c      	ldr	r3, [pc, #112]	@ (80096e4 <xTaskResumeAll+0x134>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d010      	beq.n	800969e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800967c:	f000 f846 	bl	800970c <xTaskIncrementTick>
 8009680:	4603      	mov	r3, r0
 8009682:	2b00      	cmp	r3, #0
 8009684:	d002      	beq.n	800968c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009686:	4b16      	ldr	r3, [pc, #88]	@ (80096e0 <xTaskResumeAll+0x130>)
 8009688:	2201      	movs	r2, #1
 800968a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	3b01      	subs	r3, #1
 8009690:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d1f1      	bne.n	800967c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009698:	4b12      	ldr	r3, [pc, #72]	@ (80096e4 <xTaskResumeAll+0x134>)
 800969a:	2200      	movs	r2, #0
 800969c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800969e:	4b10      	ldr	r3, [pc, #64]	@ (80096e0 <xTaskResumeAll+0x130>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d009      	beq.n	80096ba <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80096a6:	2301      	movs	r3, #1
 80096a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80096aa:	4b0f      	ldr	r3, [pc, #60]	@ (80096e8 <xTaskResumeAll+0x138>)
 80096ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096b0:	601a      	str	r2, [r3, #0]
 80096b2:	f3bf 8f4f 	dsb	sy
 80096b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80096ba:	f001 f917 	bl	800a8ec <vPortExitCritical>

	return xAlreadyYielded;
 80096be:	68bb      	ldr	r3, [r7, #8]
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3710      	adds	r7, #16
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	200090bc 	.word	0x200090bc
 80096cc:	20009094 	.word	0x20009094
 80096d0:	20009054 	.word	0x20009054
 80096d4:	2000909c 	.word	0x2000909c
 80096d8:	20008bc4 	.word	0x20008bc4
 80096dc:	20008bc0 	.word	0x20008bc0
 80096e0:	200090a8 	.word	0x200090a8
 80096e4:	200090a4 	.word	0x200090a4
 80096e8:	e000ed04 	.word	0xe000ed04

080096ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80096ec:	b480      	push	{r7}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80096f2:	4b05      	ldr	r3, [pc, #20]	@ (8009708 <xTaskGetTickCount+0x1c>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80096f8:	687b      	ldr	r3, [r7, #4]
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	370c      	adds	r7, #12
 80096fe:	46bd      	mov	sp, r7
 8009700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009704:	4770      	bx	lr
 8009706:	bf00      	nop
 8009708:	20009098 	.word	0x20009098

0800970c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b086      	sub	sp, #24
 8009710:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009712:	2300      	movs	r3, #0
 8009714:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009716:	4b4f      	ldr	r3, [pc, #316]	@ (8009854 <xTaskIncrementTick+0x148>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	2b00      	cmp	r3, #0
 800971c:	f040 8090 	bne.w	8009840 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009720:	4b4d      	ldr	r3, [pc, #308]	@ (8009858 <xTaskIncrementTick+0x14c>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	3301      	adds	r3, #1
 8009726:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009728:	4a4b      	ldr	r2, [pc, #300]	@ (8009858 <xTaskIncrementTick+0x14c>)
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d121      	bne.n	8009778 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009734:	4b49      	ldr	r3, [pc, #292]	@ (800985c <xTaskIncrementTick+0x150>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d00b      	beq.n	8009756 <xTaskIncrementTick+0x4a>
	__asm volatile
 800973e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009742:	f383 8811 	msr	BASEPRI, r3
 8009746:	f3bf 8f6f 	isb	sy
 800974a:	f3bf 8f4f 	dsb	sy
 800974e:	603b      	str	r3, [r7, #0]
}
 8009750:	bf00      	nop
 8009752:	bf00      	nop
 8009754:	e7fd      	b.n	8009752 <xTaskIncrementTick+0x46>
 8009756:	4b41      	ldr	r3, [pc, #260]	@ (800985c <xTaskIncrementTick+0x150>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	60fb      	str	r3, [r7, #12]
 800975c:	4b40      	ldr	r3, [pc, #256]	@ (8009860 <xTaskIncrementTick+0x154>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a3e      	ldr	r2, [pc, #248]	@ (800985c <xTaskIncrementTick+0x150>)
 8009762:	6013      	str	r3, [r2, #0]
 8009764:	4a3e      	ldr	r2, [pc, #248]	@ (8009860 <xTaskIncrementTick+0x154>)
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	6013      	str	r3, [r2, #0]
 800976a:	4b3e      	ldr	r3, [pc, #248]	@ (8009864 <xTaskIncrementTick+0x158>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	3301      	adds	r3, #1
 8009770:	4a3c      	ldr	r2, [pc, #240]	@ (8009864 <xTaskIncrementTick+0x158>)
 8009772:	6013      	str	r3, [r2, #0]
 8009774:	f000 fafc 	bl	8009d70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009778:	4b3b      	ldr	r3, [pc, #236]	@ (8009868 <xTaskIncrementTick+0x15c>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	693a      	ldr	r2, [r7, #16]
 800977e:	429a      	cmp	r2, r3
 8009780:	d349      	bcc.n	8009816 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009782:	4b36      	ldr	r3, [pc, #216]	@ (800985c <xTaskIncrementTick+0x150>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d104      	bne.n	8009796 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800978c:	4b36      	ldr	r3, [pc, #216]	@ (8009868 <xTaskIncrementTick+0x15c>)
 800978e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009792:	601a      	str	r2, [r3, #0]
					break;
 8009794:	e03f      	b.n	8009816 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009796:	4b31      	ldr	r3, [pc, #196]	@ (800985c <xTaskIncrementTick+0x150>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	68db      	ldr	r3, [r3, #12]
 800979c:	68db      	ldr	r3, [r3, #12]
 800979e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80097a6:	693a      	ldr	r2, [r7, #16]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d203      	bcs.n	80097b6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80097ae:	4a2e      	ldr	r2, [pc, #184]	@ (8009868 <xTaskIncrementTick+0x15c>)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80097b4:	e02f      	b.n	8009816 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	3304      	adds	r3, #4
 80097ba:	4618      	mov	r0, r3
 80097bc:	f7fe ff82 	bl	80086c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d004      	beq.n	80097d2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	3318      	adds	r3, #24
 80097cc:	4618      	mov	r0, r3
 80097ce:	f7fe ff79 	bl	80086c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097d6:	4b25      	ldr	r3, [pc, #148]	@ (800986c <xTaskIncrementTick+0x160>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	429a      	cmp	r2, r3
 80097dc:	d903      	bls.n	80097e6 <xTaskIncrementTick+0xda>
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097e2:	4a22      	ldr	r2, [pc, #136]	@ (800986c <xTaskIncrementTick+0x160>)
 80097e4:	6013      	str	r3, [r2, #0]
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097ea:	4613      	mov	r3, r2
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	4413      	add	r3, r2
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	4a1f      	ldr	r2, [pc, #124]	@ (8009870 <xTaskIncrementTick+0x164>)
 80097f4:	441a      	add	r2, r3
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	3304      	adds	r3, #4
 80097fa:	4619      	mov	r1, r3
 80097fc:	4610      	mov	r0, r2
 80097fe:	f7fe ff04 	bl	800860a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009806:	4b1b      	ldr	r3, [pc, #108]	@ (8009874 <xTaskIncrementTick+0x168>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800980c:	429a      	cmp	r2, r3
 800980e:	d3b8      	bcc.n	8009782 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009810:	2301      	movs	r3, #1
 8009812:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009814:	e7b5      	b.n	8009782 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009816:	4b17      	ldr	r3, [pc, #92]	@ (8009874 <xTaskIncrementTick+0x168>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800981c:	4914      	ldr	r1, [pc, #80]	@ (8009870 <xTaskIncrementTick+0x164>)
 800981e:	4613      	mov	r3, r2
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	4413      	add	r3, r2
 8009824:	009b      	lsls	r3, r3, #2
 8009826:	440b      	add	r3, r1
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	2b01      	cmp	r3, #1
 800982c:	d901      	bls.n	8009832 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800982e:	2301      	movs	r3, #1
 8009830:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009832:	4b11      	ldr	r3, [pc, #68]	@ (8009878 <xTaskIncrementTick+0x16c>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d007      	beq.n	800984a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800983a:	2301      	movs	r3, #1
 800983c:	617b      	str	r3, [r7, #20]
 800983e:	e004      	b.n	800984a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009840:	4b0e      	ldr	r3, [pc, #56]	@ (800987c <xTaskIncrementTick+0x170>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	3301      	adds	r3, #1
 8009846:	4a0d      	ldr	r2, [pc, #52]	@ (800987c <xTaskIncrementTick+0x170>)
 8009848:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800984a:	697b      	ldr	r3, [r7, #20]
}
 800984c:	4618      	mov	r0, r3
 800984e:	3718      	adds	r7, #24
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}
 8009854:	200090bc 	.word	0x200090bc
 8009858:	20009098 	.word	0x20009098
 800985c:	2000904c 	.word	0x2000904c
 8009860:	20009050 	.word	0x20009050
 8009864:	200090ac 	.word	0x200090ac
 8009868:	200090b4 	.word	0x200090b4
 800986c:	2000909c 	.word	0x2000909c
 8009870:	20008bc4 	.word	0x20008bc4
 8009874:	20008bc0 	.word	0x20008bc0
 8009878:	200090a8 	.word	0x200090a8
 800987c:	200090a4 	.word	0x200090a4

08009880 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009880:	b480      	push	{r7}
 8009882:	b085      	sub	sp, #20
 8009884:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009886:	4b28      	ldr	r3, [pc, #160]	@ (8009928 <vTaskSwitchContext+0xa8>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d003      	beq.n	8009896 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800988e:	4b27      	ldr	r3, [pc, #156]	@ (800992c <vTaskSwitchContext+0xac>)
 8009890:	2201      	movs	r2, #1
 8009892:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009894:	e042      	b.n	800991c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8009896:	4b25      	ldr	r3, [pc, #148]	@ (800992c <vTaskSwitchContext+0xac>)
 8009898:	2200      	movs	r2, #0
 800989a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800989c:	4b24      	ldr	r3, [pc, #144]	@ (8009930 <vTaskSwitchContext+0xb0>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	60fb      	str	r3, [r7, #12]
 80098a2:	e011      	b.n	80098c8 <vTaskSwitchContext+0x48>
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d10b      	bne.n	80098c2 <vTaskSwitchContext+0x42>
	__asm volatile
 80098aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098ae:	f383 8811 	msr	BASEPRI, r3
 80098b2:	f3bf 8f6f 	isb	sy
 80098b6:	f3bf 8f4f 	dsb	sy
 80098ba:	607b      	str	r3, [r7, #4]
}
 80098bc:	bf00      	nop
 80098be:	bf00      	nop
 80098c0:	e7fd      	b.n	80098be <vTaskSwitchContext+0x3e>
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	3b01      	subs	r3, #1
 80098c6:	60fb      	str	r3, [r7, #12]
 80098c8:	491a      	ldr	r1, [pc, #104]	@ (8009934 <vTaskSwitchContext+0xb4>)
 80098ca:	68fa      	ldr	r2, [r7, #12]
 80098cc:	4613      	mov	r3, r2
 80098ce:	009b      	lsls	r3, r3, #2
 80098d0:	4413      	add	r3, r2
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	440b      	add	r3, r1
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d0e3      	beq.n	80098a4 <vTaskSwitchContext+0x24>
 80098dc:	68fa      	ldr	r2, [r7, #12]
 80098de:	4613      	mov	r3, r2
 80098e0:	009b      	lsls	r3, r3, #2
 80098e2:	4413      	add	r3, r2
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	4a13      	ldr	r2, [pc, #76]	@ (8009934 <vTaskSwitchContext+0xb4>)
 80098e8:	4413      	add	r3, r2
 80098ea:	60bb      	str	r3, [r7, #8]
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	685a      	ldr	r2, [r3, #4]
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	605a      	str	r2, [r3, #4]
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	685a      	ldr	r2, [r3, #4]
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	3308      	adds	r3, #8
 80098fe:	429a      	cmp	r2, r3
 8009900:	d104      	bne.n	800990c <vTaskSwitchContext+0x8c>
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	685a      	ldr	r2, [r3, #4]
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	605a      	str	r2, [r3, #4]
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	68db      	ldr	r3, [r3, #12]
 8009912:	4a09      	ldr	r2, [pc, #36]	@ (8009938 <vTaskSwitchContext+0xb8>)
 8009914:	6013      	str	r3, [r2, #0]
 8009916:	4a06      	ldr	r2, [pc, #24]	@ (8009930 <vTaskSwitchContext+0xb0>)
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	6013      	str	r3, [r2, #0]
}
 800991c:	bf00      	nop
 800991e:	3714      	adds	r7, #20
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr
 8009928:	200090bc 	.word	0x200090bc
 800992c:	200090a8 	.word	0x200090a8
 8009930:	2000909c 	.word	0x2000909c
 8009934:	20008bc4 	.word	0x20008bc4
 8009938:	20008bc0 	.word	0x20008bc0

0800993c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d10b      	bne.n	8009964 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800994c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009950:	f383 8811 	msr	BASEPRI, r3
 8009954:	f3bf 8f6f 	isb	sy
 8009958:	f3bf 8f4f 	dsb	sy
 800995c:	60fb      	str	r3, [r7, #12]
}
 800995e:	bf00      	nop
 8009960:	bf00      	nop
 8009962:	e7fd      	b.n	8009960 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009964:	4b07      	ldr	r3, [pc, #28]	@ (8009984 <vTaskPlaceOnEventList+0x48>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	3318      	adds	r3, #24
 800996a:	4619      	mov	r1, r3
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f7fe fe70 	bl	8008652 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009972:	2101      	movs	r1, #1
 8009974:	6838      	ldr	r0, [r7, #0]
 8009976:	f000 faa9 	bl	8009ecc <prvAddCurrentTaskToDelayedList>
}
 800997a:	bf00      	nop
 800997c:	3710      	adds	r7, #16
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	20008bc0 	.word	0x20008bc0

08009988 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009988:	b580      	push	{r7, lr}
 800998a:	b086      	sub	sp, #24
 800998c:	af00      	add	r7, sp, #0
 800998e:	60f8      	str	r0, [r7, #12]
 8009990:	60b9      	str	r1, [r7, #8]
 8009992:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d10b      	bne.n	80099b2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800999a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800999e:	f383 8811 	msr	BASEPRI, r3
 80099a2:	f3bf 8f6f 	isb	sy
 80099a6:	f3bf 8f4f 	dsb	sy
 80099aa:	617b      	str	r3, [r7, #20]
}
 80099ac:	bf00      	nop
 80099ae:	bf00      	nop
 80099b0:	e7fd      	b.n	80099ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80099b2:	4b0a      	ldr	r3, [pc, #40]	@ (80099dc <vTaskPlaceOnEventListRestricted+0x54>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	3318      	adds	r3, #24
 80099b8:	4619      	mov	r1, r3
 80099ba:	68f8      	ldr	r0, [r7, #12]
 80099bc:	f7fe fe25 	bl	800860a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d002      	beq.n	80099cc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80099c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80099ca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80099cc:	6879      	ldr	r1, [r7, #4]
 80099ce:	68b8      	ldr	r0, [r7, #8]
 80099d0:	f000 fa7c 	bl	8009ecc <prvAddCurrentTaskToDelayedList>
	}
 80099d4:	bf00      	nop
 80099d6:	3718      	adds	r7, #24
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	20008bc0 	.word	0x20008bc0

080099e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b086      	sub	sp, #24
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	68db      	ldr	r3, [r3, #12]
 80099ec:	68db      	ldr	r3, [r3, #12]
 80099ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d10b      	bne.n	8009a0e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80099f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099fa:	f383 8811 	msr	BASEPRI, r3
 80099fe:	f3bf 8f6f 	isb	sy
 8009a02:	f3bf 8f4f 	dsb	sy
 8009a06:	60fb      	str	r3, [r7, #12]
}
 8009a08:	bf00      	nop
 8009a0a:	bf00      	nop
 8009a0c:	e7fd      	b.n	8009a0a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	3318      	adds	r3, #24
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7fe fe56 	bl	80086c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a18:	4b1d      	ldr	r3, [pc, #116]	@ (8009a90 <xTaskRemoveFromEventList+0xb0>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d11d      	bne.n	8009a5c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	3304      	adds	r3, #4
 8009a24:	4618      	mov	r0, r3
 8009a26:	f7fe fe4d 	bl	80086c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a2e:	4b19      	ldr	r3, [pc, #100]	@ (8009a94 <xTaskRemoveFromEventList+0xb4>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d903      	bls.n	8009a3e <xTaskRemoveFromEventList+0x5e>
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a3a:	4a16      	ldr	r2, [pc, #88]	@ (8009a94 <xTaskRemoveFromEventList+0xb4>)
 8009a3c:	6013      	str	r3, [r2, #0]
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a42:	4613      	mov	r3, r2
 8009a44:	009b      	lsls	r3, r3, #2
 8009a46:	4413      	add	r3, r2
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	4a13      	ldr	r2, [pc, #76]	@ (8009a98 <xTaskRemoveFromEventList+0xb8>)
 8009a4c:	441a      	add	r2, r3
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	3304      	adds	r3, #4
 8009a52:	4619      	mov	r1, r3
 8009a54:	4610      	mov	r0, r2
 8009a56:	f7fe fdd8 	bl	800860a <vListInsertEnd>
 8009a5a:	e005      	b.n	8009a68 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	3318      	adds	r3, #24
 8009a60:	4619      	mov	r1, r3
 8009a62:	480e      	ldr	r0, [pc, #56]	@ (8009a9c <xTaskRemoveFromEventList+0xbc>)
 8009a64:	f7fe fdd1 	bl	800860a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8009aa0 <xTaskRemoveFromEventList+0xc0>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d905      	bls.n	8009a82 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009a76:	2301      	movs	r3, #1
 8009a78:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8009aa4 <xTaskRemoveFromEventList+0xc4>)
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	601a      	str	r2, [r3, #0]
 8009a80:	e001      	b.n	8009a86 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009a82:	2300      	movs	r3, #0
 8009a84:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009a86:	697b      	ldr	r3, [r7, #20]
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3718      	adds	r7, #24
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}
 8009a90:	200090bc 	.word	0x200090bc
 8009a94:	2000909c 	.word	0x2000909c
 8009a98:	20008bc4 	.word	0x20008bc4
 8009a9c:	20009054 	.word	0x20009054
 8009aa0:	20008bc0 	.word	0x20008bc0
 8009aa4:	200090a8 	.word	0x200090a8

08009aa8 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d10b      	bne.n	8009ace <vTaskSetTimeOutState+0x26>
	__asm volatile
 8009ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aba:	f383 8811 	msr	BASEPRI, r3
 8009abe:	f3bf 8f6f 	isb	sy
 8009ac2:	f3bf 8f4f 	dsb	sy
 8009ac6:	60fb      	str	r3, [r7, #12]
}
 8009ac8:	bf00      	nop
 8009aca:	bf00      	nop
 8009acc:	e7fd      	b.n	8009aca <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8009ace:	f000 fedb 	bl	800a888 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009ad2:	4b07      	ldr	r3, [pc, #28]	@ (8009af0 <vTaskSetTimeOutState+0x48>)
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8009ada:	4b06      	ldr	r3, [pc, #24]	@ (8009af4 <vTaskSetTimeOutState+0x4c>)
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8009ae2:	f000 ff03 	bl	800a8ec <vPortExitCritical>
}
 8009ae6:	bf00      	nop
 8009ae8:	3710      	adds	r7, #16
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	200090ac 	.word	0x200090ac
 8009af4:	20009098 	.word	0x20009098

08009af8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009af8:	b480      	push	{r7}
 8009afa:	b083      	sub	sp, #12
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009b00:	4b06      	ldr	r3, [pc, #24]	@ (8009b1c <vTaskInternalSetTimeOutState+0x24>)
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009b08:	4b05      	ldr	r3, [pc, #20]	@ (8009b20 <vTaskInternalSetTimeOutState+0x28>)
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	605a      	str	r2, [r3, #4]
}
 8009b10:	bf00      	nop
 8009b12:	370c      	adds	r7, #12
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr
 8009b1c:	200090ac 	.word	0x200090ac
 8009b20:	20009098 	.word	0x20009098

08009b24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b088      	sub	sp, #32
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d10b      	bne.n	8009b4c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b38:	f383 8811 	msr	BASEPRI, r3
 8009b3c:	f3bf 8f6f 	isb	sy
 8009b40:	f3bf 8f4f 	dsb	sy
 8009b44:	613b      	str	r3, [r7, #16]
}
 8009b46:	bf00      	nop
 8009b48:	bf00      	nop
 8009b4a:	e7fd      	b.n	8009b48 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d10b      	bne.n	8009b6a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b56:	f383 8811 	msr	BASEPRI, r3
 8009b5a:	f3bf 8f6f 	isb	sy
 8009b5e:	f3bf 8f4f 	dsb	sy
 8009b62:	60fb      	str	r3, [r7, #12]
}
 8009b64:	bf00      	nop
 8009b66:	bf00      	nop
 8009b68:	e7fd      	b.n	8009b66 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009b6a:	f000 fe8d 	bl	800a888 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009b6e:	4b1d      	ldr	r3, [pc, #116]	@ (8009be4 <xTaskCheckForTimeOut+0xc0>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	69ba      	ldr	r2, [r7, #24]
 8009b7a:	1ad3      	subs	r3, r2, r3
 8009b7c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009b86:	d102      	bne.n	8009b8e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	61fb      	str	r3, [r7, #28]
 8009b8c:	e023      	b.n	8009bd6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681a      	ldr	r2, [r3, #0]
 8009b92:	4b15      	ldr	r3, [pc, #84]	@ (8009be8 <xTaskCheckForTimeOut+0xc4>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d007      	beq.n	8009baa <xTaskCheckForTimeOut+0x86>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	69ba      	ldr	r2, [r7, #24]
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	d302      	bcc.n	8009baa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	61fb      	str	r3, [r7, #28]
 8009ba8:	e015      	b.n	8009bd6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	697a      	ldr	r2, [r7, #20]
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d20b      	bcs.n	8009bcc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	1ad2      	subs	r2, r2, r3
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f7ff ff99 	bl	8009af8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	61fb      	str	r3, [r7, #28]
 8009bca:	e004      	b.n	8009bd6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009bd6:	f000 fe89 	bl	800a8ec <vPortExitCritical>

	return xReturn;
 8009bda:	69fb      	ldr	r3, [r7, #28]
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3720      	adds	r7, #32
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}
 8009be4:	20009098 	.word	0x20009098
 8009be8:	200090ac 	.word	0x200090ac

08009bec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009bec:	b480      	push	{r7}
 8009bee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009bf0:	4b03      	ldr	r3, [pc, #12]	@ (8009c00 <vTaskMissedYield+0x14>)
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	601a      	str	r2, [r3, #0]
}
 8009bf6:	bf00      	nop
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr
 8009c00:	200090a8 	.word	0x200090a8

08009c04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b082      	sub	sp, #8
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009c0c:	f000 f852 	bl	8009cb4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009c10:	4b06      	ldr	r3, [pc, #24]	@ (8009c2c <prvIdleTask+0x28>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d9f9      	bls.n	8009c0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009c18:	4b05      	ldr	r3, [pc, #20]	@ (8009c30 <prvIdleTask+0x2c>)
 8009c1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c1e:	601a      	str	r2, [r3, #0]
 8009c20:	f3bf 8f4f 	dsb	sy
 8009c24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009c28:	e7f0      	b.n	8009c0c <prvIdleTask+0x8>
 8009c2a:	bf00      	nop
 8009c2c:	20008bc4 	.word	0x20008bc4
 8009c30:	e000ed04 	.word	0xe000ed04

08009c34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b082      	sub	sp, #8
 8009c38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	607b      	str	r3, [r7, #4]
 8009c3e:	e00c      	b.n	8009c5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	4613      	mov	r3, r2
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	4413      	add	r3, r2
 8009c48:	009b      	lsls	r3, r3, #2
 8009c4a:	4a12      	ldr	r2, [pc, #72]	@ (8009c94 <prvInitialiseTaskLists+0x60>)
 8009c4c:	4413      	add	r3, r2
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7fe fcae 	bl	80085b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	3301      	adds	r3, #1
 8009c58:	607b      	str	r3, [r7, #4]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2b37      	cmp	r3, #55	@ 0x37
 8009c5e:	d9ef      	bls.n	8009c40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009c60:	480d      	ldr	r0, [pc, #52]	@ (8009c98 <prvInitialiseTaskLists+0x64>)
 8009c62:	f7fe fca5 	bl	80085b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009c66:	480d      	ldr	r0, [pc, #52]	@ (8009c9c <prvInitialiseTaskLists+0x68>)
 8009c68:	f7fe fca2 	bl	80085b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009c6c:	480c      	ldr	r0, [pc, #48]	@ (8009ca0 <prvInitialiseTaskLists+0x6c>)
 8009c6e:	f7fe fc9f 	bl	80085b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009c72:	480c      	ldr	r0, [pc, #48]	@ (8009ca4 <prvInitialiseTaskLists+0x70>)
 8009c74:	f7fe fc9c 	bl	80085b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009c78:	480b      	ldr	r0, [pc, #44]	@ (8009ca8 <prvInitialiseTaskLists+0x74>)
 8009c7a:	f7fe fc99 	bl	80085b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8009cac <prvInitialiseTaskLists+0x78>)
 8009c80:	4a05      	ldr	r2, [pc, #20]	@ (8009c98 <prvInitialiseTaskLists+0x64>)
 8009c82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009c84:	4b0a      	ldr	r3, [pc, #40]	@ (8009cb0 <prvInitialiseTaskLists+0x7c>)
 8009c86:	4a05      	ldr	r2, [pc, #20]	@ (8009c9c <prvInitialiseTaskLists+0x68>)
 8009c88:	601a      	str	r2, [r3, #0]
}
 8009c8a:	bf00      	nop
 8009c8c:	3708      	adds	r7, #8
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}
 8009c92:	bf00      	nop
 8009c94:	20008bc4 	.word	0x20008bc4
 8009c98:	20009024 	.word	0x20009024
 8009c9c:	20009038 	.word	0x20009038
 8009ca0:	20009054 	.word	0x20009054
 8009ca4:	20009068 	.word	0x20009068
 8009ca8:	20009080 	.word	0x20009080
 8009cac:	2000904c 	.word	0x2000904c
 8009cb0:	20009050 	.word	0x20009050

08009cb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b082      	sub	sp, #8
 8009cb8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009cba:	e019      	b.n	8009cf0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009cbc:	f000 fde4 	bl	800a888 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cc0:	4b10      	ldr	r3, [pc, #64]	@ (8009d04 <prvCheckTasksWaitingTermination+0x50>)
 8009cc2:	68db      	ldr	r3, [r3, #12]
 8009cc4:	68db      	ldr	r3, [r3, #12]
 8009cc6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	3304      	adds	r3, #4
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f7fe fcf9 	bl	80086c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8009d08 <prvCheckTasksWaitingTermination+0x54>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	3b01      	subs	r3, #1
 8009cd8:	4a0b      	ldr	r2, [pc, #44]	@ (8009d08 <prvCheckTasksWaitingTermination+0x54>)
 8009cda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8009d0c <prvCheckTasksWaitingTermination+0x58>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	3b01      	subs	r3, #1
 8009ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8009d0c <prvCheckTasksWaitingTermination+0x58>)
 8009ce4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009ce6:	f000 fe01 	bl	800a8ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 f810 	bl	8009d10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009cf0:	4b06      	ldr	r3, [pc, #24]	@ (8009d0c <prvCheckTasksWaitingTermination+0x58>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d1e1      	bne.n	8009cbc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009cf8:	bf00      	nop
 8009cfa:	bf00      	nop
 8009cfc:	3708      	adds	r7, #8
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop
 8009d04:	20009068 	.word	0x20009068
 8009d08:	20009094 	.word	0x20009094
 8009d0c:	2000907c 	.word	0x2000907c

08009d10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d108      	bne.n	8009d34 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d26:	4618      	mov	r0, r3
 8009d28:	f000 ff9e 	bl	800ac68 <vPortFree>
				vPortFree( pxTCB );
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 ff9b 	bl	800ac68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009d32:	e019      	b.n	8009d68 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009d3a:	2b01      	cmp	r3, #1
 8009d3c:	d103      	bne.n	8009d46 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 ff92 	bl	800ac68 <vPortFree>
	}
 8009d44:	e010      	b.n	8009d68 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009d4c:	2b02      	cmp	r3, #2
 8009d4e:	d00b      	beq.n	8009d68 <prvDeleteTCB+0x58>
	__asm volatile
 8009d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d54:	f383 8811 	msr	BASEPRI, r3
 8009d58:	f3bf 8f6f 	isb	sy
 8009d5c:	f3bf 8f4f 	dsb	sy
 8009d60:	60fb      	str	r3, [r7, #12]
}
 8009d62:	bf00      	nop
 8009d64:	bf00      	nop
 8009d66:	e7fd      	b.n	8009d64 <prvDeleteTCB+0x54>
	}
 8009d68:	bf00      	nop
 8009d6a:	3710      	adds	r7, #16
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009d70:	b480      	push	{r7}
 8009d72:	b083      	sub	sp, #12
 8009d74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d76:	4b0c      	ldr	r3, [pc, #48]	@ (8009da8 <prvResetNextTaskUnblockTime+0x38>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d104      	bne.n	8009d8a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009d80:	4b0a      	ldr	r3, [pc, #40]	@ (8009dac <prvResetNextTaskUnblockTime+0x3c>)
 8009d82:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009d86:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009d88:	e008      	b.n	8009d9c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d8a:	4b07      	ldr	r3, [pc, #28]	@ (8009da8 <prvResetNextTaskUnblockTime+0x38>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	68db      	ldr	r3, [r3, #12]
 8009d90:	68db      	ldr	r3, [r3, #12]
 8009d92:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	4a04      	ldr	r2, [pc, #16]	@ (8009dac <prvResetNextTaskUnblockTime+0x3c>)
 8009d9a:	6013      	str	r3, [r2, #0]
}
 8009d9c:	bf00      	nop
 8009d9e:	370c      	adds	r7, #12
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr
 8009da8:	2000904c 	.word	0x2000904c
 8009dac:	200090b4 	.word	0x200090b4

08009db0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009db0:	b480      	push	{r7}
 8009db2:	b083      	sub	sp, #12
 8009db4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009db6:	4b0b      	ldr	r3, [pc, #44]	@ (8009de4 <xTaskGetSchedulerState+0x34>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d102      	bne.n	8009dc4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	607b      	str	r3, [r7, #4]
 8009dc2:	e008      	b.n	8009dd6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009dc4:	4b08      	ldr	r3, [pc, #32]	@ (8009de8 <xTaskGetSchedulerState+0x38>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d102      	bne.n	8009dd2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009dcc:	2302      	movs	r3, #2
 8009dce:	607b      	str	r3, [r7, #4]
 8009dd0:	e001      	b.n	8009dd6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009dd6:	687b      	ldr	r3, [r7, #4]
	}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	370c      	adds	r7, #12
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr
 8009de4:	200090a0 	.word	0x200090a0
 8009de8:	200090bc 	.word	0x200090bc

08009dec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b086      	sub	sp, #24
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d058      	beq.n	8009eb4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009e02:	4b2f      	ldr	r3, [pc, #188]	@ (8009ec0 <xTaskPriorityDisinherit+0xd4>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	693a      	ldr	r2, [r7, #16]
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d00b      	beq.n	8009e24 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e10:	f383 8811 	msr	BASEPRI, r3
 8009e14:	f3bf 8f6f 	isb	sy
 8009e18:	f3bf 8f4f 	dsb	sy
 8009e1c:	60fb      	str	r3, [r7, #12]
}
 8009e1e:	bf00      	nop
 8009e20:	bf00      	nop
 8009e22:	e7fd      	b.n	8009e20 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d10b      	bne.n	8009e44 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e30:	f383 8811 	msr	BASEPRI, r3
 8009e34:	f3bf 8f6f 	isb	sy
 8009e38:	f3bf 8f4f 	dsb	sy
 8009e3c:	60bb      	str	r3, [r7, #8]
}
 8009e3e:	bf00      	nop
 8009e40:	bf00      	nop
 8009e42:	e7fd      	b.n	8009e40 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e48:	1e5a      	subs	r2, r3, #1
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d02c      	beq.n	8009eb4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d128      	bne.n	8009eb4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	3304      	adds	r3, #4
 8009e66:	4618      	mov	r0, r3
 8009e68:	f7fe fc2c 	bl	80086c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e78:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e84:	4b0f      	ldr	r3, [pc, #60]	@ (8009ec4 <xTaskPriorityDisinherit+0xd8>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d903      	bls.n	8009e94 <xTaskPriorityDisinherit+0xa8>
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e90:	4a0c      	ldr	r2, [pc, #48]	@ (8009ec4 <xTaskPriorityDisinherit+0xd8>)
 8009e92:	6013      	str	r3, [r2, #0]
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e98:	4613      	mov	r3, r2
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	4413      	add	r3, r2
 8009e9e:	009b      	lsls	r3, r3, #2
 8009ea0:	4a09      	ldr	r2, [pc, #36]	@ (8009ec8 <xTaskPriorityDisinherit+0xdc>)
 8009ea2:	441a      	add	r2, r3
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	3304      	adds	r3, #4
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	4610      	mov	r0, r2
 8009eac:	f7fe fbad 	bl	800860a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009eb4:	697b      	ldr	r3, [r7, #20]
	}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3718      	adds	r7, #24
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
 8009ebe:	bf00      	nop
 8009ec0:	20008bc0 	.word	0x20008bc0
 8009ec4:	2000909c 	.word	0x2000909c
 8009ec8:	20008bc4 	.word	0x20008bc4

08009ecc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b084      	sub	sp, #16
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009ed6:	4b21      	ldr	r3, [pc, #132]	@ (8009f5c <prvAddCurrentTaskToDelayedList+0x90>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009edc:	4b20      	ldr	r3, [pc, #128]	@ (8009f60 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	3304      	adds	r3, #4
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f7fe fbee 	bl	80086c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009eee:	d10a      	bne.n	8009f06 <prvAddCurrentTaskToDelayedList+0x3a>
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d007      	beq.n	8009f06 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ef6:	4b1a      	ldr	r3, [pc, #104]	@ (8009f60 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	3304      	adds	r3, #4
 8009efc:	4619      	mov	r1, r3
 8009efe:	4819      	ldr	r0, [pc, #100]	@ (8009f64 <prvAddCurrentTaskToDelayedList+0x98>)
 8009f00:	f7fe fb83 	bl	800860a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009f04:	e026      	b.n	8009f54 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009f06:	68fa      	ldr	r2, [r7, #12]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	4413      	add	r3, r2
 8009f0c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009f0e:	4b14      	ldr	r3, [pc, #80]	@ (8009f60 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	68ba      	ldr	r2, [r7, #8]
 8009f14:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009f16:	68ba      	ldr	r2, [r7, #8]
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d209      	bcs.n	8009f32 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f1e:	4b12      	ldr	r3, [pc, #72]	@ (8009f68 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009f20:	681a      	ldr	r2, [r3, #0]
 8009f22:	4b0f      	ldr	r3, [pc, #60]	@ (8009f60 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	3304      	adds	r3, #4
 8009f28:	4619      	mov	r1, r3
 8009f2a:	4610      	mov	r0, r2
 8009f2c:	f7fe fb91 	bl	8008652 <vListInsert>
}
 8009f30:	e010      	b.n	8009f54 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f32:	4b0e      	ldr	r3, [pc, #56]	@ (8009f6c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009f34:	681a      	ldr	r2, [r3, #0]
 8009f36:	4b0a      	ldr	r3, [pc, #40]	@ (8009f60 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	3304      	adds	r3, #4
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	4610      	mov	r0, r2
 8009f40:	f7fe fb87 	bl	8008652 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009f44:	4b0a      	ldr	r3, [pc, #40]	@ (8009f70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	68ba      	ldr	r2, [r7, #8]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d202      	bcs.n	8009f54 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009f4e:	4a08      	ldr	r2, [pc, #32]	@ (8009f70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	6013      	str	r3, [r2, #0]
}
 8009f54:	bf00      	nop
 8009f56:	3710      	adds	r7, #16
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}
 8009f5c:	20009098 	.word	0x20009098
 8009f60:	20008bc0 	.word	0x20008bc0
 8009f64:	20009080 	.word	0x20009080
 8009f68:	20009050 	.word	0x20009050
 8009f6c:	2000904c 	.word	0x2000904c
 8009f70:	200090b4 	.word	0x200090b4

08009f74 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b08a      	sub	sp, #40	@ 0x28
 8009f78:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009f7e:	f000 fb13 	bl	800a5a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009f82:	4b1d      	ldr	r3, [pc, #116]	@ (8009ff8 <xTimerCreateTimerTask+0x84>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d021      	beq.n	8009fce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009f92:	1d3a      	adds	r2, r7, #4
 8009f94:	f107 0108 	add.w	r1, r7, #8
 8009f98:	f107 030c 	add.w	r3, r7, #12
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f7fe faed 	bl	800857c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009fa2:	6879      	ldr	r1, [r7, #4]
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	68fa      	ldr	r2, [r7, #12]
 8009fa8:	9202      	str	r2, [sp, #8]
 8009faa:	9301      	str	r3, [sp, #4]
 8009fac:	2302      	movs	r3, #2
 8009fae:	9300      	str	r3, [sp, #0]
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	460a      	mov	r2, r1
 8009fb4:	4911      	ldr	r1, [pc, #68]	@ (8009ffc <xTimerCreateTimerTask+0x88>)
 8009fb6:	4812      	ldr	r0, [pc, #72]	@ (800a000 <xTimerCreateTimerTask+0x8c>)
 8009fb8:	f7ff f8a8 	bl	800910c <xTaskCreateStatic>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	4a11      	ldr	r2, [pc, #68]	@ (800a004 <xTimerCreateTimerTask+0x90>)
 8009fc0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009fc2:	4b10      	ldr	r3, [pc, #64]	@ (800a004 <xTimerCreateTimerTask+0x90>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d001      	beq.n	8009fce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009fca:	2301      	movs	r3, #1
 8009fcc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d10b      	bne.n	8009fec <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fd8:	f383 8811 	msr	BASEPRI, r3
 8009fdc:	f3bf 8f6f 	isb	sy
 8009fe0:	f3bf 8f4f 	dsb	sy
 8009fe4:	613b      	str	r3, [r7, #16]
}
 8009fe6:	bf00      	nop
 8009fe8:	bf00      	nop
 8009fea:	e7fd      	b.n	8009fe8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009fec:	697b      	ldr	r3, [r7, #20]
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3718      	adds	r7, #24
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}
 8009ff6:	bf00      	nop
 8009ff8:	200090f0 	.word	0x200090f0
 8009ffc:	0801b0f0 	.word	0x0801b0f0
 800a000:	0800a141 	.word	0x0800a141
 800a004:	200090f4 	.word	0x200090f4

0800a008 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b08a      	sub	sp, #40	@ 0x28
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	60f8      	str	r0, [r7, #12]
 800a010:	60b9      	str	r1, [r7, #8]
 800a012:	607a      	str	r2, [r7, #4]
 800a014:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a016:	2300      	movs	r3, #0
 800a018:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d10b      	bne.n	800a038 <xTimerGenericCommand+0x30>
	__asm volatile
 800a020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a024:	f383 8811 	msr	BASEPRI, r3
 800a028:	f3bf 8f6f 	isb	sy
 800a02c:	f3bf 8f4f 	dsb	sy
 800a030:	623b      	str	r3, [r7, #32]
}
 800a032:	bf00      	nop
 800a034:	bf00      	nop
 800a036:	e7fd      	b.n	800a034 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a038:	4b19      	ldr	r3, [pc, #100]	@ (800a0a0 <xTimerGenericCommand+0x98>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d02a      	beq.n	800a096 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	2b05      	cmp	r3, #5
 800a050:	dc18      	bgt.n	800a084 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a052:	f7ff fead 	bl	8009db0 <xTaskGetSchedulerState>
 800a056:	4603      	mov	r3, r0
 800a058:	2b02      	cmp	r3, #2
 800a05a:	d109      	bne.n	800a070 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a05c:	4b10      	ldr	r3, [pc, #64]	@ (800a0a0 <xTimerGenericCommand+0x98>)
 800a05e:	6818      	ldr	r0, [r3, #0]
 800a060:	f107 0110 	add.w	r1, r7, #16
 800a064:	2300      	movs	r3, #0
 800a066:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a068:	f7fe fc60 	bl	800892c <xQueueGenericSend>
 800a06c:	6278      	str	r0, [r7, #36]	@ 0x24
 800a06e:	e012      	b.n	800a096 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a070:	4b0b      	ldr	r3, [pc, #44]	@ (800a0a0 <xTimerGenericCommand+0x98>)
 800a072:	6818      	ldr	r0, [r3, #0]
 800a074:	f107 0110 	add.w	r1, r7, #16
 800a078:	2300      	movs	r3, #0
 800a07a:	2200      	movs	r2, #0
 800a07c:	f7fe fc56 	bl	800892c <xQueueGenericSend>
 800a080:	6278      	str	r0, [r7, #36]	@ 0x24
 800a082:	e008      	b.n	800a096 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a084:	4b06      	ldr	r3, [pc, #24]	@ (800a0a0 <xTimerGenericCommand+0x98>)
 800a086:	6818      	ldr	r0, [r3, #0]
 800a088:	f107 0110 	add.w	r1, r7, #16
 800a08c:	2300      	movs	r3, #0
 800a08e:	683a      	ldr	r2, [r7, #0]
 800a090:	f7fe fd4e 	bl	8008b30 <xQueueGenericSendFromISR>
 800a094:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a098:	4618      	mov	r0, r3
 800a09a:	3728      	adds	r7, #40	@ 0x28
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}
 800a0a0:	200090f0 	.word	0x200090f0

0800a0a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b088      	sub	sp, #32
 800a0a8:	af02      	add	r7, sp, #8
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0ae:	4b23      	ldr	r3, [pc, #140]	@ (800a13c <prvProcessExpiredTimer+0x98>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	68db      	ldr	r3, [r3, #12]
 800a0b4:	68db      	ldr	r3, [r3, #12]
 800a0b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	3304      	adds	r3, #4
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f7fe fb01 	bl	80086c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a0c8:	f003 0304 	and.w	r3, r3, #4
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d023      	beq.n	800a118 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	699a      	ldr	r2, [r3, #24]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	18d1      	adds	r1, r2, r3
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	683a      	ldr	r2, [r7, #0]
 800a0dc:	6978      	ldr	r0, [r7, #20]
 800a0de:	f000 f8d5 	bl	800a28c <prvInsertTimerInActiveList>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d020      	beq.n	800a12a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	9300      	str	r3, [sp, #0]
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	687a      	ldr	r2, [r7, #4]
 800a0f0:	2100      	movs	r1, #0
 800a0f2:	6978      	ldr	r0, [r7, #20]
 800a0f4:	f7ff ff88 	bl	800a008 <xTimerGenericCommand>
 800a0f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d114      	bne.n	800a12a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a104:	f383 8811 	msr	BASEPRI, r3
 800a108:	f3bf 8f6f 	isb	sy
 800a10c:	f3bf 8f4f 	dsb	sy
 800a110:	60fb      	str	r3, [r7, #12]
}
 800a112:	bf00      	nop
 800a114:	bf00      	nop
 800a116:	e7fd      	b.n	800a114 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a11e:	f023 0301 	bic.w	r3, r3, #1
 800a122:	b2da      	uxtb	r2, r3
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	6a1b      	ldr	r3, [r3, #32]
 800a12e:	6978      	ldr	r0, [r7, #20]
 800a130:	4798      	blx	r3
}
 800a132:	bf00      	nop
 800a134:	3718      	adds	r7, #24
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	200090e8 	.word	0x200090e8

0800a140 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a148:	f107 0308 	add.w	r3, r7, #8
 800a14c:	4618      	mov	r0, r3
 800a14e:	f000 f859 	bl	800a204 <prvGetNextExpireTime>
 800a152:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	4619      	mov	r1, r3
 800a158:	68f8      	ldr	r0, [r7, #12]
 800a15a:	f000 f805 	bl	800a168 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a15e:	f000 f8d7 	bl	800a310 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a162:	bf00      	nop
 800a164:	e7f0      	b.n	800a148 <prvTimerTask+0x8>
	...

0800a168 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a172:	f7ff fa0f 	bl	8009594 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a176:	f107 0308 	add.w	r3, r7, #8
 800a17a:	4618      	mov	r0, r3
 800a17c:	f000 f866 	bl	800a24c <prvSampleTimeNow>
 800a180:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d130      	bne.n	800a1ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d10a      	bne.n	800a1a4 <prvProcessTimerOrBlockTask+0x3c>
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	429a      	cmp	r2, r3
 800a194:	d806      	bhi.n	800a1a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a196:	f7ff fa0b 	bl	80095b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a19a:	68f9      	ldr	r1, [r7, #12]
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f7ff ff81 	bl	800a0a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a1a2:	e024      	b.n	800a1ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d008      	beq.n	800a1bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a1aa:	4b13      	ldr	r3, [pc, #76]	@ (800a1f8 <prvProcessTimerOrBlockTask+0x90>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d101      	bne.n	800a1b8 <prvProcessTimerOrBlockTask+0x50>
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	e000      	b.n	800a1ba <prvProcessTimerOrBlockTask+0x52>
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a1bc:	4b0f      	ldr	r3, [pc, #60]	@ (800a1fc <prvProcessTimerOrBlockTask+0x94>)
 800a1be:	6818      	ldr	r0, [r3, #0]
 800a1c0:	687a      	ldr	r2, [r7, #4]
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	1ad3      	subs	r3, r2, r3
 800a1c6:	683a      	ldr	r2, [r7, #0]
 800a1c8:	4619      	mov	r1, r3
 800a1ca:	f7fe ff6b 	bl	80090a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a1ce:	f7ff f9ef 	bl	80095b0 <xTaskResumeAll>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d10a      	bne.n	800a1ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a1d8:	4b09      	ldr	r3, [pc, #36]	@ (800a200 <prvProcessTimerOrBlockTask+0x98>)
 800a1da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1de:	601a      	str	r2, [r3, #0]
 800a1e0:	f3bf 8f4f 	dsb	sy
 800a1e4:	f3bf 8f6f 	isb	sy
}
 800a1e8:	e001      	b.n	800a1ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a1ea:	f7ff f9e1 	bl	80095b0 <xTaskResumeAll>
}
 800a1ee:	bf00      	nop
 800a1f0:	3710      	adds	r7, #16
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}
 800a1f6:	bf00      	nop
 800a1f8:	200090ec 	.word	0x200090ec
 800a1fc:	200090f0 	.word	0x200090f0
 800a200:	e000ed04 	.word	0xe000ed04

0800a204 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a204:	b480      	push	{r7}
 800a206:	b085      	sub	sp, #20
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a20c:	4b0e      	ldr	r3, [pc, #56]	@ (800a248 <prvGetNextExpireTime+0x44>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d101      	bne.n	800a21a <prvGetNextExpireTime+0x16>
 800a216:	2201      	movs	r2, #1
 800a218:	e000      	b.n	800a21c <prvGetNextExpireTime+0x18>
 800a21a:	2200      	movs	r2, #0
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d105      	bne.n	800a234 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a228:	4b07      	ldr	r3, [pc, #28]	@ (800a248 <prvGetNextExpireTime+0x44>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	68db      	ldr	r3, [r3, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	60fb      	str	r3, [r7, #12]
 800a232:	e001      	b.n	800a238 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a234:	2300      	movs	r3, #0
 800a236:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a238:	68fb      	ldr	r3, [r7, #12]
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3714      	adds	r7, #20
 800a23e:	46bd      	mov	sp, r7
 800a240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a244:	4770      	bx	lr
 800a246:	bf00      	nop
 800a248:	200090e8 	.word	0x200090e8

0800a24c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b084      	sub	sp, #16
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a254:	f7ff fa4a 	bl	80096ec <xTaskGetTickCount>
 800a258:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a25a:	4b0b      	ldr	r3, [pc, #44]	@ (800a288 <prvSampleTimeNow+0x3c>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	68fa      	ldr	r2, [r7, #12]
 800a260:	429a      	cmp	r2, r3
 800a262:	d205      	bcs.n	800a270 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a264:	f000 f93a 	bl	800a4dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2201      	movs	r2, #1
 800a26c:	601a      	str	r2, [r3, #0]
 800a26e:	e002      	b.n	800a276 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2200      	movs	r2, #0
 800a274:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a276:	4a04      	ldr	r2, [pc, #16]	@ (800a288 <prvSampleTimeNow+0x3c>)
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a27c:	68fb      	ldr	r3, [r7, #12]
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3710      	adds	r7, #16
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop
 800a288:	200090f8 	.word	0x200090f8

0800a28c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b086      	sub	sp, #24
 800a290:	af00      	add	r7, sp, #0
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	60b9      	str	r1, [r7, #8]
 800a296:	607a      	str	r2, [r7, #4]
 800a298:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a29a:	2300      	movs	r3, #0
 800a29c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	68ba      	ldr	r2, [r7, #8]
 800a2a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	68fa      	ldr	r2, [r7, #12]
 800a2a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a2aa:	68ba      	ldr	r2, [r7, #8]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	d812      	bhi.n	800a2d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	1ad2      	subs	r2, r2, r3
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	699b      	ldr	r3, [r3, #24]
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d302      	bcc.n	800a2c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	617b      	str	r3, [r7, #20]
 800a2c4:	e01b      	b.n	800a2fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a2c6:	4b10      	ldr	r3, [pc, #64]	@ (800a308 <prvInsertTimerInActiveList+0x7c>)
 800a2c8:	681a      	ldr	r2, [r3, #0]
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	3304      	adds	r3, #4
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	4610      	mov	r0, r2
 800a2d2:	f7fe f9be 	bl	8008652 <vListInsert>
 800a2d6:	e012      	b.n	800a2fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a2d8:	687a      	ldr	r2, [r7, #4]
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d206      	bcs.n	800a2ee <prvInsertTimerInActiveList+0x62>
 800a2e0:	68ba      	ldr	r2, [r7, #8]
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	d302      	bcc.n	800a2ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	617b      	str	r3, [r7, #20]
 800a2ec:	e007      	b.n	800a2fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a2ee:	4b07      	ldr	r3, [pc, #28]	@ (800a30c <prvInsertTimerInActiveList+0x80>)
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	3304      	adds	r3, #4
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	4610      	mov	r0, r2
 800a2fa:	f7fe f9aa 	bl	8008652 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a2fe:	697b      	ldr	r3, [r7, #20]
}
 800a300:	4618      	mov	r0, r3
 800a302:	3718      	adds	r7, #24
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}
 800a308:	200090ec 	.word	0x200090ec
 800a30c:	200090e8 	.word	0x200090e8

0800a310 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b08e      	sub	sp, #56	@ 0x38
 800a314:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a316:	e0ce      	b.n	800a4b6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	da19      	bge.n	800a352 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a31e:	1d3b      	adds	r3, r7, #4
 800a320:	3304      	adds	r3, #4
 800a322:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a326:	2b00      	cmp	r3, #0
 800a328:	d10b      	bne.n	800a342 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a32a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a32e:	f383 8811 	msr	BASEPRI, r3
 800a332:	f3bf 8f6f 	isb	sy
 800a336:	f3bf 8f4f 	dsb	sy
 800a33a:	61fb      	str	r3, [r7, #28]
}
 800a33c:	bf00      	nop
 800a33e:	bf00      	nop
 800a340:	e7fd      	b.n	800a33e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a348:	6850      	ldr	r0, [r2, #4]
 800a34a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a34c:	6892      	ldr	r2, [r2, #8]
 800a34e:	4611      	mov	r1, r2
 800a350:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2b00      	cmp	r3, #0
 800a356:	f2c0 80ae 	blt.w	800a4b6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a35e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a360:	695b      	ldr	r3, [r3, #20]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d004      	beq.n	800a370 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a368:	3304      	adds	r3, #4
 800a36a:	4618      	mov	r0, r3
 800a36c:	f7fe f9aa 	bl	80086c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a370:	463b      	mov	r3, r7
 800a372:	4618      	mov	r0, r3
 800a374:	f7ff ff6a 	bl	800a24c <prvSampleTimeNow>
 800a378:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2b09      	cmp	r3, #9
 800a37e:	f200 8097 	bhi.w	800a4b0 <prvProcessReceivedCommands+0x1a0>
 800a382:	a201      	add	r2, pc, #4	@ (adr r2, 800a388 <prvProcessReceivedCommands+0x78>)
 800a384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a388:	0800a3b1 	.word	0x0800a3b1
 800a38c:	0800a3b1 	.word	0x0800a3b1
 800a390:	0800a3b1 	.word	0x0800a3b1
 800a394:	0800a427 	.word	0x0800a427
 800a398:	0800a43b 	.word	0x0800a43b
 800a39c:	0800a487 	.word	0x0800a487
 800a3a0:	0800a3b1 	.word	0x0800a3b1
 800a3a4:	0800a3b1 	.word	0x0800a3b1
 800a3a8:	0800a427 	.word	0x0800a427
 800a3ac:	0800a43b 	.word	0x0800a43b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a3b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a3b6:	f043 0301 	orr.w	r3, r3, #1
 800a3ba:	b2da      	uxtb	r2, r3
 800a3bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a3c2:	68ba      	ldr	r2, [r7, #8]
 800a3c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3c6:	699b      	ldr	r3, [r3, #24]
 800a3c8:	18d1      	adds	r1, r2, r3
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3d0:	f7ff ff5c 	bl	800a28c <prvInsertTimerInActiveList>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d06c      	beq.n	800a4b4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a3da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3dc:	6a1b      	ldr	r3, [r3, #32]
 800a3de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a3e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a3e8:	f003 0304 	and.w	r3, r3, #4
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d061      	beq.n	800a4b4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a3f0:	68ba      	ldr	r2, [r7, #8]
 800a3f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3f4:	699b      	ldr	r3, [r3, #24]
 800a3f6:	441a      	add	r2, r3
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	9300      	str	r3, [sp, #0]
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	2100      	movs	r1, #0
 800a400:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a402:	f7ff fe01 	bl	800a008 <xTimerGenericCommand>
 800a406:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a408:	6a3b      	ldr	r3, [r7, #32]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d152      	bne.n	800a4b4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a40e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a412:	f383 8811 	msr	BASEPRI, r3
 800a416:	f3bf 8f6f 	isb	sy
 800a41a:	f3bf 8f4f 	dsb	sy
 800a41e:	61bb      	str	r3, [r7, #24]
}
 800a420:	bf00      	nop
 800a422:	bf00      	nop
 800a424:	e7fd      	b.n	800a422 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a428:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a42c:	f023 0301 	bic.w	r3, r3, #1
 800a430:	b2da      	uxtb	r2, r3
 800a432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a434:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a438:	e03d      	b.n	800a4b6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a43a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a43c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a440:	f043 0301 	orr.w	r3, r3, #1
 800a444:	b2da      	uxtb	r2, r3
 800a446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a448:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a44c:	68ba      	ldr	r2, [r7, #8]
 800a44e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a450:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a454:	699b      	ldr	r3, [r3, #24]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d10b      	bne.n	800a472 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a45a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a45e:	f383 8811 	msr	BASEPRI, r3
 800a462:	f3bf 8f6f 	isb	sy
 800a466:	f3bf 8f4f 	dsb	sy
 800a46a:	617b      	str	r3, [r7, #20]
}
 800a46c:	bf00      	nop
 800a46e:	bf00      	nop
 800a470:	e7fd      	b.n	800a46e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a474:	699a      	ldr	r2, [r3, #24]
 800a476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a478:	18d1      	adds	r1, r2, r3
 800a47a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a47c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a47e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a480:	f7ff ff04 	bl	800a28c <prvInsertTimerInActiveList>
					break;
 800a484:	e017      	b.n	800a4b6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a488:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a48c:	f003 0302 	and.w	r3, r3, #2
 800a490:	2b00      	cmp	r3, #0
 800a492:	d103      	bne.n	800a49c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a494:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a496:	f000 fbe7 	bl	800ac68 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a49a:	e00c      	b.n	800a4b6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a49c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a49e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a4a2:	f023 0301 	bic.w	r3, r3, #1
 800a4a6:	b2da      	uxtb	r2, r3
 800a4a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a4ae:	e002      	b.n	800a4b6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a4b0:	bf00      	nop
 800a4b2:	e000      	b.n	800a4b6 <prvProcessReceivedCommands+0x1a6>
					break;
 800a4b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a4b6:	4b08      	ldr	r3, [pc, #32]	@ (800a4d8 <prvProcessReceivedCommands+0x1c8>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	1d39      	adds	r1, r7, #4
 800a4bc:	2200      	movs	r2, #0
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7fe fbd4 	bl	8008c6c <xQueueReceive>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	f47f af26 	bne.w	800a318 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a4cc:	bf00      	nop
 800a4ce:	bf00      	nop
 800a4d0:	3730      	adds	r7, #48	@ 0x30
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}
 800a4d6:	bf00      	nop
 800a4d8:	200090f0 	.word	0x200090f0

0800a4dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b088      	sub	sp, #32
 800a4e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a4e2:	e049      	b.n	800a578 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a4e4:	4b2e      	ldr	r3, [pc, #184]	@ (800a5a0 <prvSwitchTimerLists+0xc4>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	68db      	ldr	r3, [r3, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4ee:	4b2c      	ldr	r3, [pc, #176]	@ (800a5a0 <prvSwitchTimerLists+0xc4>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	68db      	ldr	r3, [r3, #12]
 800a4f4:	68db      	ldr	r3, [r3, #12]
 800a4f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	3304      	adds	r3, #4
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f7fe f8e1 	bl	80086c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	6a1b      	ldr	r3, [r3, #32]
 800a506:	68f8      	ldr	r0, [r7, #12]
 800a508:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a510:	f003 0304 	and.w	r3, r3, #4
 800a514:	2b00      	cmp	r3, #0
 800a516:	d02f      	beq.n	800a578 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	699b      	ldr	r3, [r3, #24]
 800a51c:	693a      	ldr	r2, [r7, #16]
 800a51e:	4413      	add	r3, r2
 800a520:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a522:	68ba      	ldr	r2, [r7, #8]
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	429a      	cmp	r2, r3
 800a528:	d90e      	bls.n	800a548 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	68ba      	ldr	r2, [r7, #8]
 800a52e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	68fa      	ldr	r2, [r7, #12]
 800a534:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a536:	4b1a      	ldr	r3, [pc, #104]	@ (800a5a0 <prvSwitchTimerLists+0xc4>)
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	3304      	adds	r3, #4
 800a53e:	4619      	mov	r1, r3
 800a540:	4610      	mov	r0, r2
 800a542:	f7fe f886 	bl	8008652 <vListInsert>
 800a546:	e017      	b.n	800a578 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a548:	2300      	movs	r3, #0
 800a54a:	9300      	str	r3, [sp, #0]
 800a54c:	2300      	movs	r3, #0
 800a54e:	693a      	ldr	r2, [r7, #16]
 800a550:	2100      	movs	r1, #0
 800a552:	68f8      	ldr	r0, [r7, #12]
 800a554:	f7ff fd58 	bl	800a008 <xTimerGenericCommand>
 800a558:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d10b      	bne.n	800a578 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a564:	f383 8811 	msr	BASEPRI, r3
 800a568:	f3bf 8f6f 	isb	sy
 800a56c:	f3bf 8f4f 	dsb	sy
 800a570:	603b      	str	r3, [r7, #0]
}
 800a572:	bf00      	nop
 800a574:	bf00      	nop
 800a576:	e7fd      	b.n	800a574 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a578:	4b09      	ldr	r3, [pc, #36]	@ (800a5a0 <prvSwitchTimerLists+0xc4>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d1b0      	bne.n	800a4e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a582:	4b07      	ldr	r3, [pc, #28]	@ (800a5a0 <prvSwitchTimerLists+0xc4>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a588:	4b06      	ldr	r3, [pc, #24]	@ (800a5a4 <prvSwitchTimerLists+0xc8>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a04      	ldr	r2, [pc, #16]	@ (800a5a0 <prvSwitchTimerLists+0xc4>)
 800a58e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a590:	4a04      	ldr	r2, [pc, #16]	@ (800a5a4 <prvSwitchTimerLists+0xc8>)
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	6013      	str	r3, [r2, #0]
}
 800a596:	bf00      	nop
 800a598:	3718      	adds	r7, #24
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	200090e8 	.word	0x200090e8
 800a5a4:	200090ec 	.word	0x200090ec

0800a5a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b082      	sub	sp, #8
 800a5ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a5ae:	f000 f96b 	bl	800a888 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a5b2:	4b15      	ldr	r3, [pc, #84]	@ (800a608 <prvCheckForValidListAndQueue+0x60>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d120      	bne.n	800a5fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a5ba:	4814      	ldr	r0, [pc, #80]	@ (800a60c <prvCheckForValidListAndQueue+0x64>)
 800a5bc:	f7fd fff8 	bl	80085b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a5c0:	4813      	ldr	r0, [pc, #76]	@ (800a610 <prvCheckForValidListAndQueue+0x68>)
 800a5c2:	f7fd fff5 	bl	80085b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a5c6:	4b13      	ldr	r3, [pc, #76]	@ (800a614 <prvCheckForValidListAndQueue+0x6c>)
 800a5c8:	4a10      	ldr	r2, [pc, #64]	@ (800a60c <prvCheckForValidListAndQueue+0x64>)
 800a5ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a5cc:	4b12      	ldr	r3, [pc, #72]	@ (800a618 <prvCheckForValidListAndQueue+0x70>)
 800a5ce:	4a10      	ldr	r2, [pc, #64]	@ (800a610 <prvCheckForValidListAndQueue+0x68>)
 800a5d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	9300      	str	r3, [sp, #0]
 800a5d6:	4b11      	ldr	r3, [pc, #68]	@ (800a61c <prvCheckForValidListAndQueue+0x74>)
 800a5d8:	4a11      	ldr	r2, [pc, #68]	@ (800a620 <prvCheckForValidListAndQueue+0x78>)
 800a5da:	2110      	movs	r1, #16
 800a5dc:	200a      	movs	r0, #10
 800a5de:	f7fe f905 	bl	80087ec <xQueueGenericCreateStatic>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	4a08      	ldr	r2, [pc, #32]	@ (800a608 <prvCheckForValidListAndQueue+0x60>)
 800a5e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a5e8:	4b07      	ldr	r3, [pc, #28]	@ (800a608 <prvCheckForValidListAndQueue+0x60>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d005      	beq.n	800a5fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a5f0:	4b05      	ldr	r3, [pc, #20]	@ (800a608 <prvCheckForValidListAndQueue+0x60>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	490b      	ldr	r1, [pc, #44]	@ (800a624 <prvCheckForValidListAndQueue+0x7c>)
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f7fe fd2a 	bl	8009050 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a5fc:	f000 f976 	bl	800a8ec <vPortExitCritical>
}
 800a600:	bf00      	nop
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
 800a606:	bf00      	nop
 800a608:	200090f0 	.word	0x200090f0
 800a60c:	200090c0 	.word	0x200090c0
 800a610:	200090d4 	.word	0x200090d4
 800a614:	200090e8 	.word	0x200090e8
 800a618:	200090ec 	.word	0x200090ec
 800a61c:	2000919c 	.word	0x2000919c
 800a620:	200090fc 	.word	0x200090fc
 800a624:	0801b0f8 	.word	0x0801b0f8

0800a628 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a628:	b480      	push	{r7}
 800a62a:	b085      	sub	sp, #20
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	60f8      	str	r0, [r7, #12]
 800a630:	60b9      	str	r1, [r7, #8]
 800a632:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	3b04      	subs	r3, #4
 800a638:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a640:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	3b04      	subs	r3, #4
 800a646:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	f023 0201 	bic.w	r2, r3, #1
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	3b04      	subs	r3, #4
 800a656:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a658:	4a0c      	ldr	r2, [pc, #48]	@ (800a68c <pxPortInitialiseStack+0x64>)
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	3b14      	subs	r3, #20
 800a662:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a664:	687a      	ldr	r2, [r7, #4]
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	3b04      	subs	r3, #4
 800a66e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f06f 0202 	mvn.w	r2, #2
 800a676:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	3b20      	subs	r3, #32
 800a67c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a67e:	68fb      	ldr	r3, [r7, #12]
}
 800a680:	4618      	mov	r0, r3
 800a682:	3714      	adds	r7, #20
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr
 800a68c:	0800a691 	.word	0x0800a691

0800a690 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a690:	b480      	push	{r7}
 800a692:	b085      	sub	sp, #20
 800a694:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a696:	2300      	movs	r3, #0
 800a698:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a69a:	4b13      	ldr	r3, [pc, #76]	@ (800a6e8 <prvTaskExitError+0x58>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a6a2:	d00b      	beq.n	800a6bc <prvTaskExitError+0x2c>
	__asm volatile
 800a6a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6a8:	f383 8811 	msr	BASEPRI, r3
 800a6ac:	f3bf 8f6f 	isb	sy
 800a6b0:	f3bf 8f4f 	dsb	sy
 800a6b4:	60fb      	str	r3, [r7, #12]
}
 800a6b6:	bf00      	nop
 800a6b8:	bf00      	nop
 800a6ba:	e7fd      	b.n	800a6b8 <prvTaskExitError+0x28>
	__asm volatile
 800a6bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6c0:	f383 8811 	msr	BASEPRI, r3
 800a6c4:	f3bf 8f6f 	isb	sy
 800a6c8:	f3bf 8f4f 	dsb	sy
 800a6cc:	60bb      	str	r3, [r7, #8]
}
 800a6ce:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a6d0:	bf00      	nop
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d0fc      	beq.n	800a6d2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a6d8:	bf00      	nop
 800a6da:	bf00      	nop
 800a6dc:	3714      	adds	r7, #20
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr
 800a6e6:	bf00      	nop
 800a6e8:	20000030 	.word	0x20000030
 800a6ec:	00000000 	.word	0x00000000

0800a6f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a6f0:	4b07      	ldr	r3, [pc, #28]	@ (800a710 <pxCurrentTCBConst2>)
 800a6f2:	6819      	ldr	r1, [r3, #0]
 800a6f4:	6808      	ldr	r0, [r1, #0]
 800a6f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6fa:	f380 8809 	msr	PSP, r0
 800a6fe:	f3bf 8f6f 	isb	sy
 800a702:	f04f 0000 	mov.w	r0, #0
 800a706:	f380 8811 	msr	BASEPRI, r0
 800a70a:	4770      	bx	lr
 800a70c:	f3af 8000 	nop.w

0800a710 <pxCurrentTCBConst2>:
 800a710:	20008bc0 	.word	0x20008bc0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a714:	bf00      	nop
 800a716:	bf00      	nop

0800a718 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a718:	4808      	ldr	r0, [pc, #32]	@ (800a73c <prvPortStartFirstTask+0x24>)
 800a71a:	6800      	ldr	r0, [r0, #0]
 800a71c:	6800      	ldr	r0, [r0, #0]
 800a71e:	f380 8808 	msr	MSP, r0
 800a722:	f04f 0000 	mov.w	r0, #0
 800a726:	f380 8814 	msr	CONTROL, r0
 800a72a:	b662      	cpsie	i
 800a72c:	b661      	cpsie	f
 800a72e:	f3bf 8f4f 	dsb	sy
 800a732:	f3bf 8f6f 	isb	sy
 800a736:	df00      	svc	0
 800a738:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a73a:	bf00      	nop
 800a73c:	e000ed08 	.word	0xe000ed08

0800a740 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b086      	sub	sp, #24
 800a744:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a746:	4b47      	ldr	r3, [pc, #284]	@ (800a864 <xPortStartScheduler+0x124>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	4a47      	ldr	r2, [pc, #284]	@ (800a868 <xPortStartScheduler+0x128>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d10b      	bne.n	800a768 <xPortStartScheduler+0x28>
	__asm volatile
 800a750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a754:	f383 8811 	msr	BASEPRI, r3
 800a758:	f3bf 8f6f 	isb	sy
 800a75c:	f3bf 8f4f 	dsb	sy
 800a760:	60fb      	str	r3, [r7, #12]
}
 800a762:	bf00      	nop
 800a764:	bf00      	nop
 800a766:	e7fd      	b.n	800a764 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a768:	4b3e      	ldr	r3, [pc, #248]	@ (800a864 <xPortStartScheduler+0x124>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4a3f      	ldr	r2, [pc, #252]	@ (800a86c <xPortStartScheduler+0x12c>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d10b      	bne.n	800a78a <xPortStartScheduler+0x4a>
	__asm volatile
 800a772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a776:	f383 8811 	msr	BASEPRI, r3
 800a77a:	f3bf 8f6f 	isb	sy
 800a77e:	f3bf 8f4f 	dsb	sy
 800a782:	613b      	str	r3, [r7, #16]
}
 800a784:	bf00      	nop
 800a786:	bf00      	nop
 800a788:	e7fd      	b.n	800a786 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a78a:	4b39      	ldr	r3, [pc, #228]	@ (800a870 <xPortStartScheduler+0x130>)
 800a78c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	781b      	ldrb	r3, [r3, #0]
 800a792:	b2db      	uxtb	r3, r3
 800a794:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	22ff      	movs	r2, #255	@ 0xff
 800a79a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	b2db      	uxtb	r3, r3
 800a7a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a7a4:	78fb      	ldrb	r3, [r7, #3]
 800a7a6:	b2db      	uxtb	r3, r3
 800a7a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a7ac:	b2da      	uxtb	r2, r3
 800a7ae:	4b31      	ldr	r3, [pc, #196]	@ (800a874 <xPortStartScheduler+0x134>)
 800a7b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a7b2:	4b31      	ldr	r3, [pc, #196]	@ (800a878 <xPortStartScheduler+0x138>)
 800a7b4:	2207      	movs	r2, #7
 800a7b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a7b8:	e009      	b.n	800a7ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a7ba:	4b2f      	ldr	r3, [pc, #188]	@ (800a878 <xPortStartScheduler+0x138>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	3b01      	subs	r3, #1
 800a7c0:	4a2d      	ldr	r2, [pc, #180]	@ (800a878 <xPortStartScheduler+0x138>)
 800a7c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a7c4:	78fb      	ldrb	r3, [r7, #3]
 800a7c6:	b2db      	uxtb	r3, r3
 800a7c8:	005b      	lsls	r3, r3, #1
 800a7ca:	b2db      	uxtb	r3, r3
 800a7cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a7ce:	78fb      	ldrb	r3, [r7, #3]
 800a7d0:	b2db      	uxtb	r3, r3
 800a7d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7d6:	2b80      	cmp	r3, #128	@ 0x80
 800a7d8:	d0ef      	beq.n	800a7ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a7da:	4b27      	ldr	r3, [pc, #156]	@ (800a878 <xPortStartScheduler+0x138>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f1c3 0307 	rsb	r3, r3, #7
 800a7e2:	2b04      	cmp	r3, #4
 800a7e4:	d00b      	beq.n	800a7fe <xPortStartScheduler+0xbe>
	__asm volatile
 800a7e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7ea:	f383 8811 	msr	BASEPRI, r3
 800a7ee:	f3bf 8f6f 	isb	sy
 800a7f2:	f3bf 8f4f 	dsb	sy
 800a7f6:	60bb      	str	r3, [r7, #8]
}
 800a7f8:	bf00      	nop
 800a7fa:	bf00      	nop
 800a7fc:	e7fd      	b.n	800a7fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a7fe:	4b1e      	ldr	r3, [pc, #120]	@ (800a878 <xPortStartScheduler+0x138>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	021b      	lsls	r3, r3, #8
 800a804:	4a1c      	ldr	r2, [pc, #112]	@ (800a878 <xPortStartScheduler+0x138>)
 800a806:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a808:	4b1b      	ldr	r3, [pc, #108]	@ (800a878 <xPortStartScheduler+0x138>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a810:	4a19      	ldr	r2, [pc, #100]	@ (800a878 <xPortStartScheduler+0x138>)
 800a812:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	b2da      	uxtb	r2, r3
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a81c:	4b17      	ldr	r3, [pc, #92]	@ (800a87c <xPortStartScheduler+0x13c>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	4a16      	ldr	r2, [pc, #88]	@ (800a87c <xPortStartScheduler+0x13c>)
 800a822:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a826:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a828:	4b14      	ldr	r3, [pc, #80]	@ (800a87c <xPortStartScheduler+0x13c>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4a13      	ldr	r2, [pc, #76]	@ (800a87c <xPortStartScheduler+0x13c>)
 800a82e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a832:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a834:	f000 f8da 	bl	800a9ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a838:	4b11      	ldr	r3, [pc, #68]	@ (800a880 <xPortStartScheduler+0x140>)
 800a83a:	2200      	movs	r2, #0
 800a83c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a83e:	f000 f8f9 	bl	800aa34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a842:	4b10      	ldr	r3, [pc, #64]	@ (800a884 <xPortStartScheduler+0x144>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	4a0f      	ldr	r2, [pc, #60]	@ (800a884 <xPortStartScheduler+0x144>)
 800a848:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a84c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a84e:	f7ff ff63 	bl	800a718 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a852:	f7ff f815 	bl	8009880 <vTaskSwitchContext>
	prvTaskExitError();
 800a856:	f7ff ff1b 	bl	800a690 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a85a:	2300      	movs	r3, #0
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3718      	adds	r7, #24
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}
 800a864:	e000ed00 	.word	0xe000ed00
 800a868:	410fc271 	.word	0x410fc271
 800a86c:	410fc270 	.word	0x410fc270
 800a870:	e000e400 	.word	0xe000e400
 800a874:	200091ec 	.word	0x200091ec
 800a878:	200091f0 	.word	0x200091f0
 800a87c:	e000ed20 	.word	0xe000ed20
 800a880:	20000030 	.word	0x20000030
 800a884:	e000ef34 	.word	0xe000ef34

0800a888 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a888:	b480      	push	{r7}
 800a88a:	b083      	sub	sp, #12
 800a88c:	af00      	add	r7, sp, #0
	__asm volatile
 800a88e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a892:	f383 8811 	msr	BASEPRI, r3
 800a896:	f3bf 8f6f 	isb	sy
 800a89a:	f3bf 8f4f 	dsb	sy
 800a89e:	607b      	str	r3, [r7, #4]
}
 800a8a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a8a2:	4b10      	ldr	r3, [pc, #64]	@ (800a8e4 <vPortEnterCritical+0x5c>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	3301      	adds	r3, #1
 800a8a8:	4a0e      	ldr	r2, [pc, #56]	@ (800a8e4 <vPortEnterCritical+0x5c>)
 800a8aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a8ac:	4b0d      	ldr	r3, [pc, #52]	@ (800a8e4 <vPortEnterCritical+0x5c>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d110      	bne.n	800a8d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a8b4:	4b0c      	ldr	r3, [pc, #48]	@ (800a8e8 <vPortEnterCritical+0x60>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	b2db      	uxtb	r3, r3
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d00b      	beq.n	800a8d6 <vPortEnterCritical+0x4e>
	__asm volatile
 800a8be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8c2:	f383 8811 	msr	BASEPRI, r3
 800a8c6:	f3bf 8f6f 	isb	sy
 800a8ca:	f3bf 8f4f 	dsb	sy
 800a8ce:	603b      	str	r3, [r7, #0]
}
 800a8d0:	bf00      	nop
 800a8d2:	bf00      	nop
 800a8d4:	e7fd      	b.n	800a8d2 <vPortEnterCritical+0x4a>
	}
}
 800a8d6:	bf00      	nop
 800a8d8:	370c      	adds	r7, #12
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e0:	4770      	bx	lr
 800a8e2:	bf00      	nop
 800a8e4:	20000030 	.word	0x20000030
 800a8e8:	e000ed04 	.word	0xe000ed04

0800a8ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b083      	sub	sp, #12
 800a8f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a8f2:	4b12      	ldr	r3, [pc, #72]	@ (800a93c <vPortExitCritical+0x50>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d10b      	bne.n	800a912 <vPortExitCritical+0x26>
	__asm volatile
 800a8fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8fe:	f383 8811 	msr	BASEPRI, r3
 800a902:	f3bf 8f6f 	isb	sy
 800a906:	f3bf 8f4f 	dsb	sy
 800a90a:	607b      	str	r3, [r7, #4]
}
 800a90c:	bf00      	nop
 800a90e:	bf00      	nop
 800a910:	e7fd      	b.n	800a90e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a912:	4b0a      	ldr	r3, [pc, #40]	@ (800a93c <vPortExitCritical+0x50>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	3b01      	subs	r3, #1
 800a918:	4a08      	ldr	r2, [pc, #32]	@ (800a93c <vPortExitCritical+0x50>)
 800a91a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a91c:	4b07      	ldr	r3, [pc, #28]	@ (800a93c <vPortExitCritical+0x50>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d105      	bne.n	800a930 <vPortExitCritical+0x44>
 800a924:	2300      	movs	r3, #0
 800a926:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	f383 8811 	msr	BASEPRI, r3
}
 800a92e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a930:	bf00      	nop
 800a932:	370c      	adds	r7, #12
 800a934:	46bd      	mov	sp, r7
 800a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93a:	4770      	bx	lr
 800a93c:	20000030 	.word	0x20000030

0800a940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a940:	f3ef 8009 	mrs	r0, PSP
 800a944:	f3bf 8f6f 	isb	sy
 800a948:	4b15      	ldr	r3, [pc, #84]	@ (800a9a0 <pxCurrentTCBConst>)
 800a94a:	681a      	ldr	r2, [r3, #0]
 800a94c:	f01e 0f10 	tst.w	lr, #16
 800a950:	bf08      	it	eq
 800a952:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a956:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a95a:	6010      	str	r0, [r2, #0]
 800a95c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a960:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a964:	f380 8811 	msr	BASEPRI, r0
 800a968:	f3bf 8f4f 	dsb	sy
 800a96c:	f3bf 8f6f 	isb	sy
 800a970:	f7fe ff86 	bl	8009880 <vTaskSwitchContext>
 800a974:	f04f 0000 	mov.w	r0, #0
 800a978:	f380 8811 	msr	BASEPRI, r0
 800a97c:	bc09      	pop	{r0, r3}
 800a97e:	6819      	ldr	r1, [r3, #0]
 800a980:	6808      	ldr	r0, [r1, #0]
 800a982:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a986:	f01e 0f10 	tst.w	lr, #16
 800a98a:	bf08      	it	eq
 800a98c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a990:	f380 8809 	msr	PSP, r0
 800a994:	f3bf 8f6f 	isb	sy
 800a998:	4770      	bx	lr
 800a99a:	bf00      	nop
 800a99c:	f3af 8000 	nop.w

0800a9a0 <pxCurrentTCBConst>:
 800a9a0:	20008bc0 	.word	0x20008bc0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a9a4:	bf00      	nop
 800a9a6:	bf00      	nop

0800a9a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b082      	sub	sp, #8
 800a9ac:	af00      	add	r7, sp, #0
	__asm volatile
 800a9ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9b2:	f383 8811 	msr	BASEPRI, r3
 800a9b6:	f3bf 8f6f 	isb	sy
 800a9ba:	f3bf 8f4f 	dsb	sy
 800a9be:	607b      	str	r3, [r7, #4]
}
 800a9c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a9c2:	f7fe fea3 	bl	800970c <xTaskIncrementTick>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d003      	beq.n	800a9d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a9cc:	4b06      	ldr	r3, [pc, #24]	@ (800a9e8 <xPortSysTickHandler+0x40>)
 800a9ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a9d2:	601a      	str	r2, [r3, #0]
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	f383 8811 	msr	BASEPRI, r3
}
 800a9de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a9e0:	bf00      	nop
 800a9e2:	3708      	adds	r7, #8
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}
 800a9e8:	e000ed04 	.word	0xe000ed04

0800a9ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a9f0:	4b0b      	ldr	r3, [pc, #44]	@ (800aa20 <vPortSetupTimerInterrupt+0x34>)
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a9f6:	4b0b      	ldr	r3, [pc, #44]	@ (800aa24 <vPortSetupTimerInterrupt+0x38>)
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a9fc:	4b0a      	ldr	r3, [pc, #40]	@ (800aa28 <vPortSetupTimerInterrupt+0x3c>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4a0a      	ldr	r2, [pc, #40]	@ (800aa2c <vPortSetupTimerInterrupt+0x40>)
 800aa02:	fba2 2303 	umull	r2, r3, r2, r3
 800aa06:	099b      	lsrs	r3, r3, #6
 800aa08:	4a09      	ldr	r2, [pc, #36]	@ (800aa30 <vPortSetupTimerInterrupt+0x44>)
 800aa0a:	3b01      	subs	r3, #1
 800aa0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aa0e:	4b04      	ldr	r3, [pc, #16]	@ (800aa20 <vPortSetupTimerInterrupt+0x34>)
 800aa10:	2207      	movs	r2, #7
 800aa12:	601a      	str	r2, [r3, #0]
}
 800aa14:	bf00      	nop
 800aa16:	46bd      	mov	sp, r7
 800aa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1c:	4770      	bx	lr
 800aa1e:	bf00      	nop
 800aa20:	e000e010 	.word	0xe000e010
 800aa24:	e000e018 	.word	0xe000e018
 800aa28:	20000024 	.word	0x20000024
 800aa2c:	10624dd3 	.word	0x10624dd3
 800aa30:	e000e014 	.word	0xe000e014

0800aa34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aa34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800aa44 <vPortEnableVFP+0x10>
 800aa38:	6801      	ldr	r1, [r0, #0]
 800aa3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800aa3e:	6001      	str	r1, [r0, #0]
 800aa40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aa42:	bf00      	nop
 800aa44:	e000ed88 	.word	0xe000ed88

0800aa48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aa48:	b480      	push	{r7}
 800aa4a:	b085      	sub	sp, #20
 800aa4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aa4e:	f3ef 8305 	mrs	r3, IPSR
 800aa52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2b0f      	cmp	r3, #15
 800aa58:	d915      	bls.n	800aa86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aa5a:	4a18      	ldr	r2, [pc, #96]	@ (800aabc <vPortValidateInterruptPriority+0x74>)
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	4413      	add	r3, r2
 800aa60:	781b      	ldrb	r3, [r3, #0]
 800aa62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aa64:	4b16      	ldr	r3, [pc, #88]	@ (800aac0 <vPortValidateInterruptPriority+0x78>)
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	7afa      	ldrb	r2, [r7, #11]
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	d20b      	bcs.n	800aa86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800aa6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa72:	f383 8811 	msr	BASEPRI, r3
 800aa76:	f3bf 8f6f 	isb	sy
 800aa7a:	f3bf 8f4f 	dsb	sy
 800aa7e:	607b      	str	r3, [r7, #4]
}
 800aa80:	bf00      	nop
 800aa82:	bf00      	nop
 800aa84:	e7fd      	b.n	800aa82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aa86:	4b0f      	ldr	r3, [pc, #60]	@ (800aac4 <vPortValidateInterruptPriority+0x7c>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800aa8e:	4b0e      	ldr	r3, [pc, #56]	@ (800aac8 <vPortValidateInterruptPriority+0x80>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d90b      	bls.n	800aaae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800aa96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa9a:	f383 8811 	msr	BASEPRI, r3
 800aa9e:	f3bf 8f6f 	isb	sy
 800aaa2:	f3bf 8f4f 	dsb	sy
 800aaa6:	603b      	str	r3, [r7, #0]
}
 800aaa8:	bf00      	nop
 800aaaa:	bf00      	nop
 800aaac:	e7fd      	b.n	800aaaa <vPortValidateInterruptPriority+0x62>
	}
 800aaae:	bf00      	nop
 800aab0:	3714      	adds	r7, #20
 800aab2:	46bd      	mov	sp, r7
 800aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab8:	4770      	bx	lr
 800aaba:	bf00      	nop
 800aabc:	e000e3f0 	.word	0xe000e3f0
 800aac0:	200091ec 	.word	0x200091ec
 800aac4:	e000ed0c 	.word	0xe000ed0c
 800aac8:	200091f0 	.word	0x200091f0

0800aacc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b08a      	sub	sp, #40	@ 0x28
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aad4:	2300      	movs	r3, #0
 800aad6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aad8:	f7fe fd5c 	bl	8009594 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aadc:	4b5c      	ldr	r3, [pc, #368]	@ (800ac50 <pvPortMalloc+0x184>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d101      	bne.n	800aae8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aae4:	f000 f924 	bl	800ad30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aae8:	4b5a      	ldr	r3, [pc, #360]	@ (800ac54 <pvPortMalloc+0x188>)
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	4013      	ands	r3, r2
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	f040 8095 	bne.w	800ac20 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d01e      	beq.n	800ab3a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800aafc:	2208      	movs	r2, #8
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	4413      	add	r3, r2
 800ab02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f003 0307 	and.w	r3, r3, #7
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d015      	beq.n	800ab3a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f023 0307 	bic.w	r3, r3, #7
 800ab14:	3308      	adds	r3, #8
 800ab16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f003 0307 	and.w	r3, r3, #7
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d00b      	beq.n	800ab3a <pvPortMalloc+0x6e>
	__asm volatile
 800ab22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab26:	f383 8811 	msr	BASEPRI, r3
 800ab2a:	f3bf 8f6f 	isb	sy
 800ab2e:	f3bf 8f4f 	dsb	sy
 800ab32:	617b      	str	r3, [r7, #20]
}
 800ab34:	bf00      	nop
 800ab36:	bf00      	nop
 800ab38:	e7fd      	b.n	800ab36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d06f      	beq.n	800ac20 <pvPortMalloc+0x154>
 800ab40:	4b45      	ldr	r3, [pc, #276]	@ (800ac58 <pvPortMalloc+0x18c>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	429a      	cmp	r2, r3
 800ab48:	d86a      	bhi.n	800ac20 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ab4a:	4b44      	ldr	r3, [pc, #272]	@ (800ac5c <pvPortMalloc+0x190>)
 800ab4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ab4e:	4b43      	ldr	r3, [pc, #268]	@ (800ac5c <pvPortMalloc+0x190>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ab54:	e004      	b.n	800ab60 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ab56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ab5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ab60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	687a      	ldr	r2, [r7, #4]
 800ab66:	429a      	cmp	r2, r3
 800ab68:	d903      	bls.n	800ab72 <pvPortMalloc+0xa6>
 800ab6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d1f1      	bne.n	800ab56 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ab72:	4b37      	ldr	r3, [pc, #220]	@ (800ac50 <pvPortMalloc+0x184>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	d051      	beq.n	800ac20 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ab7c:	6a3b      	ldr	r3, [r7, #32]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	2208      	movs	r2, #8
 800ab82:	4413      	add	r3, r2
 800ab84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ab86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab88:	681a      	ldr	r2, [r3, #0]
 800ab8a:	6a3b      	ldr	r3, [r7, #32]
 800ab8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ab8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab90:	685a      	ldr	r2, [r3, #4]
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	1ad2      	subs	r2, r2, r3
 800ab96:	2308      	movs	r3, #8
 800ab98:	005b      	lsls	r3, r3, #1
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d920      	bls.n	800abe0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ab9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	4413      	add	r3, r2
 800aba4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aba6:	69bb      	ldr	r3, [r7, #24]
 800aba8:	f003 0307 	and.w	r3, r3, #7
 800abac:	2b00      	cmp	r3, #0
 800abae:	d00b      	beq.n	800abc8 <pvPortMalloc+0xfc>
	__asm volatile
 800abb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abb4:	f383 8811 	msr	BASEPRI, r3
 800abb8:	f3bf 8f6f 	isb	sy
 800abbc:	f3bf 8f4f 	dsb	sy
 800abc0:	613b      	str	r3, [r7, #16]
}
 800abc2:	bf00      	nop
 800abc4:	bf00      	nop
 800abc6:	e7fd      	b.n	800abc4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800abc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abca:	685a      	ldr	r2, [r3, #4]
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	1ad2      	subs	r2, r2, r3
 800abd0:	69bb      	ldr	r3, [r7, #24]
 800abd2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800abd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abd6:	687a      	ldr	r2, [r7, #4]
 800abd8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800abda:	69b8      	ldr	r0, [r7, #24]
 800abdc:	f000 f90a 	bl	800adf4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800abe0:	4b1d      	ldr	r3, [pc, #116]	@ (800ac58 <pvPortMalloc+0x18c>)
 800abe2:	681a      	ldr	r2, [r3, #0]
 800abe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe6:	685b      	ldr	r3, [r3, #4]
 800abe8:	1ad3      	subs	r3, r2, r3
 800abea:	4a1b      	ldr	r2, [pc, #108]	@ (800ac58 <pvPortMalloc+0x18c>)
 800abec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800abee:	4b1a      	ldr	r3, [pc, #104]	@ (800ac58 <pvPortMalloc+0x18c>)
 800abf0:	681a      	ldr	r2, [r3, #0]
 800abf2:	4b1b      	ldr	r3, [pc, #108]	@ (800ac60 <pvPortMalloc+0x194>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d203      	bcs.n	800ac02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800abfa:	4b17      	ldr	r3, [pc, #92]	@ (800ac58 <pvPortMalloc+0x18c>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	4a18      	ldr	r2, [pc, #96]	@ (800ac60 <pvPortMalloc+0x194>)
 800ac00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ac02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac04:	685a      	ldr	r2, [r3, #4]
 800ac06:	4b13      	ldr	r3, [pc, #76]	@ (800ac54 <pvPortMalloc+0x188>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	431a      	orrs	r2, r3
 800ac0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ac10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac12:	2200      	movs	r2, #0
 800ac14:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ac16:	4b13      	ldr	r3, [pc, #76]	@ (800ac64 <pvPortMalloc+0x198>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	3301      	adds	r3, #1
 800ac1c:	4a11      	ldr	r2, [pc, #68]	@ (800ac64 <pvPortMalloc+0x198>)
 800ac1e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ac20:	f7fe fcc6 	bl	80095b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac24:	69fb      	ldr	r3, [r7, #28]
 800ac26:	f003 0307 	and.w	r3, r3, #7
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d00b      	beq.n	800ac46 <pvPortMalloc+0x17a>
	__asm volatile
 800ac2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac32:	f383 8811 	msr	BASEPRI, r3
 800ac36:	f3bf 8f6f 	isb	sy
 800ac3a:	f3bf 8f4f 	dsb	sy
 800ac3e:	60fb      	str	r3, [r7, #12]
}
 800ac40:	bf00      	nop
 800ac42:	bf00      	nop
 800ac44:	e7fd      	b.n	800ac42 <pvPortMalloc+0x176>
	return pvReturn;
 800ac46:	69fb      	ldr	r3, [r7, #28]
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3728      	adds	r7, #40	@ 0x28
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}
 800ac50:	2000cdfc 	.word	0x2000cdfc
 800ac54:	2000ce10 	.word	0x2000ce10
 800ac58:	2000ce00 	.word	0x2000ce00
 800ac5c:	2000cdf4 	.word	0x2000cdf4
 800ac60:	2000ce04 	.word	0x2000ce04
 800ac64:	2000ce08 	.word	0x2000ce08

0800ac68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b086      	sub	sp, #24
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d04f      	beq.n	800ad1a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ac7a:	2308      	movs	r3, #8
 800ac7c:	425b      	negs	r3, r3
 800ac7e:	697a      	ldr	r2, [r7, #20]
 800ac80:	4413      	add	r3, r2
 800ac82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	685a      	ldr	r2, [r3, #4]
 800ac8c:	4b25      	ldr	r3, [pc, #148]	@ (800ad24 <vPortFree+0xbc>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	4013      	ands	r3, r2
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d10b      	bne.n	800acae <vPortFree+0x46>
	__asm volatile
 800ac96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac9a:	f383 8811 	msr	BASEPRI, r3
 800ac9e:	f3bf 8f6f 	isb	sy
 800aca2:	f3bf 8f4f 	dsb	sy
 800aca6:	60fb      	str	r3, [r7, #12]
}
 800aca8:	bf00      	nop
 800acaa:	bf00      	nop
 800acac:	e7fd      	b.n	800acaa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800acae:	693b      	ldr	r3, [r7, #16]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d00b      	beq.n	800acce <vPortFree+0x66>
	__asm volatile
 800acb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acba:	f383 8811 	msr	BASEPRI, r3
 800acbe:	f3bf 8f6f 	isb	sy
 800acc2:	f3bf 8f4f 	dsb	sy
 800acc6:	60bb      	str	r3, [r7, #8]
}
 800acc8:	bf00      	nop
 800acca:	bf00      	nop
 800accc:	e7fd      	b.n	800acca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	685a      	ldr	r2, [r3, #4]
 800acd2:	4b14      	ldr	r3, [pc, #80]	@ (800ad24 <vPortFree+0xbc>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4013      	ands	r3, r2
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d01e      	beq.n	800ad1a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d11a      	bne.n	800ad1a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	685a      	ldr	r2, [r3, #4]
 800ace8:	4b0e      	ldr	r3, [pc, #56]	@ (800ad24 <vPortFree+0xbc>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	43db      	mvns	r3, r3
 800acee:	401a      	ands	r2, r3
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800acf4:	f7fe fc4e 	bl	8009594 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	685a      	ldr	r2, [r3, #4]
 800acfc:	4b0a      	ldr	r3, [pc, #40]	@ (800ad28 <vPortFree+0xc0>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	4413      	add	r3, r2
 800ad02:	4a09      	ldr	r2, [pc, #36]	@ (800ad28 <vPortFree+0xc0>)
 800ad04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ad06:	6938      	ldr	r0, [r7, #16]
 800ad08:	f000 f874 	bl	800adf4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ad0c:	4b07      	ldr	r3, [pc, #28]	@ (800ad2c <vPortFree+0xc4>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	3301      	adds	r3, #1
 800ad12:	4a06      	ldr	r2, [pc, #24]	@ (800ad2c <vPortFree+0xc4>)
 800ad14:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ad16:	f7fe fc4b 	bl	80095b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ad1a:	bf00      	nop
 800ad1c:	3718      	adds	r7, #24
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
 800ad22:	bf00      	nop
 800ad24:	2000ce10 	.word	0x2000ce10
 800ad28:	2000ce00 	.word	0x2000ce00
 800ad2c:	2000ce0c 	.word	0x2000ce0c

0800ad30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ad30:	b480      	push	{r7}
 800ad32:	b085      	sub	sp, #20
 800ad34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ad36:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ad3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ad3c:	4b27      	ldr	r3, [pc, #156]	@ (800addc <prvHeapInit+0xac>)
 800ad3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f003 0307 	and.w	r3, r3, #7
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d00c      	beq.n	800ad64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	3307      	adds	r3, #7
 800ad4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	f023 0307 	bic.w	r3, r3, #7
 800ad56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ad58:	68ba      	ldr	r2, [r7, #8]
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	1ad3      	subs	r3, r2, r3
 800ad5e:	4a1f      	ldr	r2, [pc, #124]	@ (800addc <prvHeapInit+0xac>)
 800ad60:	4413      	add	r3, r2
 800ad62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ad68:	4a1d      	ldr	r2, [pc, #116]	@ (800ade0 <prvHeapInit+0xb0>)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ad6e:	4b1c      	ldr	r3, [pc, #112]	@ (800ade0 <prvHeapInit+0xb0>)
 800ad70:	2200      	movs	r2, #0
 800ad72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	68ba      	ldr	r2, [r7, #8]
 800ad78:	4413      	add	r3, r2
 800ad7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ad7c:	2208      	movs	r2, #8
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	1a9b      	subs	r3, r3, r2
 800ad82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f023 0307 	bic.w	r3, r3, #7
 800ad8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	4a15      	ldr	r2, [pc, #84]	@ (800ade4 <prvHeapInit+0xb4>)
 800ad90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ad92:	4b14      	ldr	r3, [pc, #80]	@ (800ade4 <prvHeapInit+0xb4>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	2200      	movs	r2, #0
 800ad98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ad9a:	4b12      	ldr	r3, [pc, #72]	@ (800ade4 <prvHeapInit+0xb4>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	68fa      	ldr	r2, [r7, #12]
 800adaa:	1ad2      	subs	r2, r2, r3
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800adb0:	4b0c      	ldr	r3, [pc, #48]	@ (800ade4 <prvHeapInit+0xb4>)
 800adb2:	681a      	ldr	r2, [r3, #0]
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	4a0a      	ldr	r2, [pc, #40]	@ (800ade8 <prvHeapInit+0xb8>)
 800adbe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	4a09      	ldr	r2, [pc, #36]	@ (800adec <prvHeapInit+0xbc>)
 800adc6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800adc8:	4b09      	ldr	r3, [pc, #36]	@ (800adf0 <prvHeapInit+0xc0>)
 800adca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800adce:	601a      	str	r2, [r3, #0]
}
 800add0:	bf00      	nop
 800add2:	3714      	adds	r7, #20
 800add4:	46bd      	mov	sp, r7
 800add6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adda:	4770      	bx	lr
 800addc:	200091f4 	.word	0x200091f4
 800ade0:	2000cdf4 	.word	0x2000cdf4
 800ade4:	2000cdfc 	.word	0x2000cdfc
 800ade8:	2000ce04 	.word	0x2000ce04
 800adec:	2000ce00 	.word	0x2000ce00
 800adf0:	2000ce10 	.word	0x2000ce10

0800adf4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800adf4:	b480      	push	{r7}
 800adf6:	b085      	sub	sp, #20
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800adfc:	4b28      	ldr	r3, [pc, #160]	@ (800aea0 <prvInsertBlockIntoFreeList+0xac>)
 800adfe:	60fb      	str	r3, [r7, #12]
 800ae00:	e002      	b.n	800ae08 <prvInsertBlockIntoFreeList+0x14>
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	60fb      	str	r3, [r7, #12]
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	687a      	ldr	r2, [r7, #4]
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d8f7      	bhi.n	800ae02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	68ba      	ldr	r2, [r7, #8]
 800ae1c:	4413      	add	r3, r2
 800ae1e:	687a      	ldr	r2, [r7, #4]
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d108      	bne.n	800ae36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	685a      	ldr	r2, [r3, #4]
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	441a      	add	r2, r3
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	685b      	ldr	r3, [r3, #4]
 800ae3e:	68ba      	ldr	r2, [r7, #8]
 800ae40:	441a      	add	r2, r3
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d118      	bne.n	800ae7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681a      	ldr	r2, [r3, #0]
 800ae4e:	4b15      	ldr	r3, [pc, #84]	@ (800aea4 <prvInsertBlockIntoFreeList+0xb0>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d00d      	beq.n	800ae72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	685a      	ldr	r2, [r3, #4]
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	441a      	add	r2, r3
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	681a      	ldr	r2, [r3, #0]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	601a      	str	r2, [r3, #0]
 800ae70:	e008      	b.n	800ae84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ae72:	4b0c      	ldr	r3, [pc, #48]	@ (800aea4 <prvInsertBlockIntoFreeList+0xb0>)
 800ae74:	681a      	ldr	r2, [r3, #0]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	601a      	str	r2, [r3, #0]
 800ae7a:	e003      	b.n	800ae84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681a      	ldr	r2, [r3, #0]
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ae84:	68fa      	ldr	r2, [r7, #12]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	d002      	beq.n	800ae92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	687a      	ldr	r2, [r7, #4]
 800ae90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae92:	bf00      	nop
 800ae94:	3714      	adds	r7, #20
 800ae96:	46bd      	mov	sp, r7
 800ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9c:	4770      	bx	lr
 800ae9e:	bf00      	nop
 800aea0:	2000cdf4 	.word	0x2000cdf4
 800aea4:	2000cdfc 	.word	0x2000cdfc

0800aea8 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800aea8:	4b04      	ldr	r3, [pc, #16]	@ (800aebc <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800aeaa:	681a      	ldr	r2, [r3, #0]
 800aeac:	b10a      	cbz	r2, 800aeb2 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800aeae:	4803      	ldr	r0, [pc, #12]	@ (800aebc <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800aeb0:	4770      	bx	lr
 800aeb2:	4a03      	ldr	r2, [pc, #12]	@ (800aec0 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800aeb4:	4801      	ldr	r0, [pc, #4]	@ (800aebc <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800aeb6:	6812      	ldr	r2, [r2, #0]
 800aeb8:	601a      	str	r2, [r3, #0]
 800aeba:	4770      	bx	lr
 800aebc:	2000003c 	.word	0x2000003c
 800aec0:	20000328 	.word	0x20000328

0800aec4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800aec4:	4a02      	ldr	r2, [pc, #8]	@ (800aed0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800aec6:	4b03      	ldr	r3, [pc, #12]	@ (800aed4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800aec8:	6812      	ldr	r2, [r2, #0]
 800aeca:	601a      	str	r2, [r3, #0]
 800aecc:	4770      	bx	lr
 800aece:	bf00      	nop
 800aed0:	20000328 	.word	0x20000328
 800aed4:	2000003c 	.word	0x2000003c

0800aed8 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800aed8:	f005 bf3c 	b.w	8010d54 <geometry_msgs__msg__Twist__init>

0800aedc <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800aedc:	f005 bf5e 	b.w	8010d9c <geometry_msgs__msg__Twist__fini>

0800aee0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800aee0:	b510      	push	{r4, lr}
 800aee2:	f000 f819 	bl	800af18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800aee6:	4c07      	ldr	r4, [pc, #28]	@ (800af04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800aee8:	60e0      	str	r0, [r4, #12]
 800aeea:	f000 f815 	bl	800af18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800aeee:	4b06      	ldr	r3, [pc, #24]	@ (800af08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800aef0:	64a0      	str	r0, [r4, #72]	@ 0x48
 800aef2:	681a      	ldr	r2, [r3, #0]
 800aef4:	b10a      	cbz	r2, 800aefa <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800aef6:	4804      	ldr	r0, [pc, #16]	@ (800af08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800aef8:	bd10      	pop	{r4, pc}
 800aefa:	4a04      	ldr	r2, [pc, #16]	@ (800af0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800aefc:	4802      	ldr	r0, [pc, #8]	@ (800af08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800aefe:	6812      	ldr	r2, [r2, #0]
 800af00:	601a      	str	r2, [r3, #0]
 800af02:	bd10      	pop	{r4, pc}
 800af04:	20000048 	.word	0x20000048
 800af08:	200000c0 	.word	0x200000c0
 800af0c:	2000032c 	.word	0x2000032c

0800af10 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800af10:	f005 bf50 	b.w	8010db4 <geometry_msgs__msg__Vector3__init>

0800af14 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800af14:	f005 bf52 	b.w	8010dbc <geometry_msgs__msg__Vector3__fini>

0800af18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800af18:	4b04      	ldr	r3, [pc, #16]	@ (800af2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800af1a:	681a      	ldr	r2, [r3, #0]
 800af1c:	b10a      	cbz	r2, 800af22 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800af1e:	4803      	ldr	r0, [pc, #12]	@ (800af2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800af20:	4770      	bx	lr
 800af22:	4a03      	ldr	r2, [pc, #12]	@ (800af30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800af24:	4801      	ldr	r0, [pc, #4]	@ (800af2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800af26:	6812      	ldr	r2, [r2, #0]
 800af28:	601a      	str	r2, [r3, #0]
 800af2a:	4770      	bx	lr
 800af2c:	20000180 	.word	0x20000180
 800af30:	2000032c 	.word	0x2000032c

0800af34 <get_serialized_size_geometry_msgs__msg__Twist>:
 800af34:	b570      	push	{r4, r5, r6, lr}
 800af36:	4604      	mov	r4, r0
 800af38:	b148      	cbz	r0, 800af4e <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800af3a:	460d      	mov	r5, r1
 800af3c:	f000 f86e 	bl	800b01c <get_serialized_size_geometry_msgs__msg__Vector3>
 800af40:	4606      	mov	r6, r0
 800af42:	1829      	adds	r1, r5, r0
 800af44:	f104 0018 	add.w	r0, r4, #24
 800af48:	f000 f868 	bl	800b01c <get_serialized_size_geometry_msgs__msg__Vector3>
 800af4c:	4430      	add	r0, r6
 800af4e:	bd70      	pop	{r4, r5, r6, pc}

0800af50 <_Twist__cdr_deserialize>:
 800af50:	b570      	push	{r4, r5, r6, lr}
 800af52:	460c      	mov	r4, r1
 800af54:	b189      	cbz	r1, 800af7a <_Twist__cdr_deserialize+0x2a>
 800af56:	4605      	mov	r5, r0
 800af58:	f000 f8ec 	bl	800b134 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800af5c:	6843      	ldr	r3, [r0, #4]
 800af5e:	4621      	mov	r1, r4
 800af60:	68db      	ldr	r3, [r3, #12]
 800af62:	4628      	mov	r0, r5
 800af64:	4798      	blx	r3
 800af66:	f000 f8e5 	bl	800b134 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800af6a:	6843      	ldr	r3, [r0, #4]
 800af6c:	f104 0118 	add.w	r1, r4, #24
 800af70:	4628      	mov	r0, r5
 800af72:	68db      	ldr	r3, [r3, #12]
 800af74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800af78:	4718      	bx	r3
 800af7a:	4608      	mov	r0, r1
 800af7c:	bd70      	pop	{r4, r5, r6, pc}
 800af7e:	bf00      	nop

0800af80 <_Twist__cdr_serialize>:
 800af80:	b510      	push	{r4, lr}
 800af82:	b082      	sub	sp, #8
 800af84:	9101      	str	r1, [sp, #4]
 800af86:	b190      	cbz	r0, 800afae <_Twist__cdr_serialize+0x2e>
 800af88:	4604      	mov	r4, r0
 800af8a:	f000 f8d3 	bl	800b134 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800af8e:	6843      	ldr	r3, [r0, #4]
 800af90:	9901      	ldr	r1, [sp, #4]
 800af92:	689b      	ldr	r3, [r3, #8]
 800af94:	4620      	mov	r0, r4
 800af96:	4798      	blx	r3
 800af98:	f000 f8cc 	bl	800b134 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800af9c:	6843      	ldr	r3, [r0, #4]
 800af9e:	9901      	ldr	r1, [sp, #4]
 800afa0:	689b      	ldr	r3, [r3, #8]
 800afa2:	f104 0018 	add.w	r0, r4, #24
 800afa6:	b002      	add	sp, #8
 800afa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afac:	4718      	bx	r3
 800afae:	b002      	add	sp, #8
 800afb0:	bd10      	pop	{r4, pc}
 800afb2:	bf00      	nop

0800afb4 <_Twist__get_serialized_size>:
 800afb4:	b538      	push	{r3, r4, r5, lr}
 800afb6:	4604      	mov	r4, r0
 800afb8:	b148      	cbz	r0, 800afce <_Twist__get_serialized_size+0x1a>
 800afba:	2100      	movs	r1, #0
 800afbc:	f000 f82e 	bl	800b01c <get_serialized_size_geometry_msgs__msg__Vector3>
 800afc0:	4605      	mov	r5, r0
 800afc2:	4601      	mov	r1, r0
 800afc4:	f104 0018 	add.w	r0, r4, #24
 800afc8:	f000 f828 	bl	800b01c <get_serialized_size_geometry_msgs__msg__Vector3>
 800afcc:	4428      	add	r0, r5
 800afce:	bd38      	pop	{r3, r4, r5, pc}

0800afd0 <_Twist__max_serialized_size>:
 800afd0:	b510      	push	{r4, lr}
 800afd2:	b082      	sub	sp, #8
 800afd4:	2301      	movs	r3, #1
 800afd6:	2100      	movs	r1, #0
 800afd8:	f10d 0007 	add.w	r0, sp, #7
 800afdc:	f88d 3007 	strb.w	r3, [sp, #7]
 800afe0:	f000 f88c 	bl	800b0fc <max_serialized_size_geometry_msgs__msg__Vector3>
 800afe4:	4604      	mov	r4, r0
 800afe6:	4601      	mov	r1, r0
 800afe8:	f10d 0007 	add.w	r0, sp, #7
 800afec:	f000 f886 	bl	800b0fc <max_serialized_size_geometry_msgs__msg__Vector3>
 800aff0:	4420      	add	r0, r4
 800aff2:	b002      	add	sp, #8
 800aff4:	bd10      	pop	{r4, pc}
 800aff6:	bf00      	nop

0800aff8 <max_serialized_size_geometry_msgs__msg__Twist>:
 800aff8:	2301      	movs	r3, #1
 800affa:	b570      	push	{r4, r5, r6, lr}
 800affc:	7003      	strb	r3, [r0, #0]
 800affe:	4605      	mov	r5, r0
 800b000:	460e      	mov	r6, r1
 800b002:	f000 f87b 	bl	800b0fc <max_serialized_size_geometry_msgs__msg__Vector3>
 800b006:	4604      	mov	r4, r0
 800b008:	1831      	adds	r1, r6, r0
 800b00a:	4628      	mov	r0, r5
 800b00c:	f000 f876 	bl	800b0fc <max_serialized_size_geometry_msgs__msg__Vector3>
 800b010:	4420      	add	r0, r4
 800b012:	bd70      	pop	{r4, r5, r6, pc}

0800b014 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800b014:	4800      	ldr	r0, [pc, #0]	@ (800b018 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800b016:	4770      	bx	lr
 800b018:	2000018c 	.word	0x2000018c

0800b01c <get_serialized_size_geometry_msgs__msg__Vector3>:
 800b01c:	b1b8      	cbz	r0, 800b04e <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800b01e:	b538      	push	{r3, r4, r5, lr}
 800b020:	460d      	mov	r5, r1
 800b022:	4628      	mov	r0, r5
 800b024:	2108      	movs	r1, #8
 800b026:	f001 fb9d 	bl	800c764 <ucdr_alignment>
 800b02a:	f105 0308 	add.w	r3, r5, #8
 800b02e:	181c      	adds	r4, r3, r0
 800b030:	2108      	movs	r1, #8
 800b032:	4620      	mov	r0, r4
 800b034:	f001 fb96 	bl	800c764 <ucdr_alignment>
 800b038:	3008      	adds	r0, #8
 800b03a:	4404      	add	r4, r0
 800b03c:	2108      	movs	r1, #8
 800b03e:	4620      	mov	r0, r4
 800b040:	f001 fb90 	bl	800c764 <ucdr_alignment>
 800b044:	f1c5 0508 	rsb	r5, r5, #8
 800b048:	4428      	add	r0, r5
 800b04a:	4420      	add	r0, r4
 800b04c:	bd38      	pop	{r3, r4, r5, pc}
 800b04e:	4770      	bx	lr

0800b050 <_Vector3__cdr_deserialize>:
 800b050:	b538      	push	{r3, r4, r5, lr}
 800b052:	460c      	mov	r4, r1
 800b054:	b171      	cbz	r1, 800b074 <_Vector3__cdr_deserialize+0x24>
 800b056:	4605      	mov	r5, r0
 800b058:	f001 f998 	bl	800c38c <ucdr_deserialize_double>
 800b05c:	f104 0108 	add.w	r1, r4, #8
 800b060:	4628      	mov	r0, r5
 800b062:	f001 f993 	bl	800c38c <ucdr_deserialize_double>
 800b066:	f104 0110 	add.w	r1, r4, #16
 800b06a:	4628      	mov	r0, r5
 800b06c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b070:	f001 b98c 	b.w	800c38c <ucdr_deserialize_double>
 800b074:	4608      	mov	r0, r1
 800b076:	bd38      	pop	{r3, r4, r5, pc}

0800b078 <_Vector3__cdr_serialize>:
 800b078:	b198      	cbz	r0, 800b0a2 <_Vector3__cdr_serialize+0x2a>
 800b07a:	b538      	push	{r3, r4, r5, lr}
 800b07c:	ed90 0b00 	vldr	d0, [r0]
 800b080:	460d      	mov	r5, r1
 800b082:	4604      	mov	r4, r0
 800b084:	4608      	mov	r0, r1
 800b086:	f000 ffdf 	bl	800c048 <ucdr_serialize_double>
 800b08a:	ed94 0b02 	vldr	d0, [r4, #8]
 800b08e:	4628      	mov	r0, r5
 800b090:	f000 ffda 	bl	800c048 <ucdr_serialize_double>
 800b094:	ed94 0b04 	vldr	d0, [r4, #16]
 800b098:	4628      	mov	r0, r5
 800b09a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b09e:	f000 bfd3 	b.w	800c048 <ucdr_serialize_double>
 800b0a2:	4770      	bx	lr

0800b0a4 <_Vector3__get_serialized_size>:
 800b0a4:	b198      	cbz	r0, 800b0ce <_Vector3__get_serialized_size+0x2a>
 800b0a6:	b510      	push	{r4, lr}
 800b0a8:	2108      	movs	r1, #8
 800b0aa:	2000      	movs	r0, #0
 800b0ac:	f001 fb5a 	bl	800c764 <ucdr_alignment>
 800b0b0:	f100 0408 	add.w	r4, r0, #8
 800b0b4:	2108      	movs	r1, #8
 800b0b6:	4620      	mov	r0, r4
 800b0b8:	f001 fb54 	bl	800c764 <ucdr_alignment>
 800b0bc:	3008      	adds	r0, #8
 800b0be:	4404      	add	r4, r0
 800b0c0:	2108      	movs	r1, #8
 800b0c2:	4620      	mov	r0, r4
 800b0c4:	f001 fb4e 	bl	800c764 <ucdr_alignment>
 800b0c8:	3008      	adds	r0, #8
 800b0ca:	4420      	add	r0, r4
 800b0cc:	bd10      	pop	{r4, pc}
 800b0ce:	4770      	bx	lr

0800b0d0 <_Vector3__max_serialized_size>:
 800b0d0:	b538      	push	{r3, r4, r5, lr}
 800b0d2:	2108      	movs	r1, #8
 800b0d4:	2000      	movs	r0, #0
 800b0d6:	f001 fb45 	bl	800c764 <ucdr_alignment>
 800b0da:	f100 0508 	add.w	r5, r0, #8
 800b0de:	2108      	movs	r1, #8
 800b0e0:	4628      	mov	r0, r5
 800b0e2:	f001 fb3f 	bl	800c764 <ucdr_alignment>
 800b0e6:	f100 0408 	add.w	r4, r0, #8
 800b0ea:	442c      	add	r4, r5
 800b0ec:	2108      	movs	r1, #8
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	f001 fb38 	bl	800c764 <ucdr_alignment>
 800b0f4:	3008      	adds	r0, #8
 800b0f6:	4420      	add	r0, r4
 800b0f8:	bd38      	pop	{r3, r4, r5, pc}
 800b0fa:	bf00      	nop

0800b0fc <max_serialized_size_geometry_msgs__msg__Vector3>:
 800b0fc:	b570      	push	{r4, r5, r6, lr}
 800b0fe:	2301      	movs	r3, #1
 800b100:	460c      	mov	r4, r1
 800b102:	7003      	strb	r3, [r0, #0]
 800b104:	2108      	movs	r1, #8
 800b106:	4620      	mov	r0, r4
 800b108:	f001 fb2c 	bl	800c764 <ucdr_alignment>
 800b10c:	f104 0508 	add.w	r5, r4, #8
 800b110:	1946      	adds	r6, r0, r5
 800b112:	2108      	movs	r1, #8
 800b114:	4630      	mov	r0, r6
 800b116:	f001 fb25 	bl	800c764 <ucdr_alignment>
 800b11a:	f100 0508 	add.w	r5, r0, #8
 800b11e:	4435      	add	r5, r6
 800b120:	2108      	movs	r1, #8
 800b122:	4628      	mov	r0, r5
 800b124:	f001 fb1e 	bl	800c764 <ucdr_alignment>
 800b128:	f1c4 0408 	rsb	r4, r4, #8
 800b12c:	4420      	add	r0, r4
 800b12e:	4428      	add	r0, r5
 800b130:	bd70      	pop	{r4, r5, r6, pc}
 800b132:	bf00      	nop

0800b134 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800b134:	4800      	ldr	r0, [pc, #0]	@ (800b138 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800b136:	4770      	bx	lr
 800b138:	200001b4 	.word	0x200001b4

0800b13c <ucdr_serialize_bool>:
 800b13c:	b538      	push	{r3, r4, r5, lr}
 800b13e:	460d      	mov	r5, r1
 800b140:	2101      	movs	r1, #1
 800b142:	4604      	mov	r4, r0
 800b144:	f001 fac2 	bl	800c6cc <ucdr_check_final_buffer_behavior>
 800b148:	b148      	cbz	r0, 800b15e <ucdr_serialize_bool+0x22>
 800b14a:	68a3      	ldr	r3, [r4, #8]
 800b14c:	701d      	strb	r5, [r3, #0]
 800b14e:	68a2      	ldr	r2, [r4, #8]
 800b150:	6923      	ldr	r3, [r4, #16]
 800b152:	2101      	movs	r1, #1
 800b154:	440a      	add	r2, r1
 800b156:	440b      	add	r3, r1
 800b158:	60a2      	str	r2, [r4, #8]
 800b15a:	6123      	str	r3, [r4, #16]
 800b15c:	7561      	strb	r1, [r4, #21]
 800b15e:	7da0      	ldrb	r0, [r4, #22]
 800b160:	f080 0001 	eor.w	r0, r0, #1
 800b164:	bd38      	pop	{r3, r4, r5, pc}
 800b166:	bf00      	nop

0800b168 <ucdr_deserialize_bool>:
 800b168:	b538      	push	{r3, r4, r5, lr}
 800b16a:	460d      	mov	r5, r1
 800b16c:	2101      	movs	r1, #1
 800b16e:	4604      	mov	r4, r0
 800b170:	f001 faac 	bl	800c6cc <ucdr_check_final_buffer_behavior>
 800b174:	b160      	cbz	r0, 800b190 <ucdr_deserialize_bool+0x28>
 800b176:	68a2      	ldr	r2, [r4, #8]
 800b178:	6923      	ldr	r3, [r4, #16]
 800b17a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800b17e:	3900      	subs	r1, #0
 800b180:	bf18      	it	ne
 800b182:	2101      	movne	r1, #1
 800b184:	7029      	strb	r1, [r5, #0]
 800b186:	3301      	adds	r3, #1
 800b188:	2101      	movs	r1, #1
 800b18a:	60a2      	str	r2, [r4, #8]
 800b18c:	6123      	str	r3, [r4, #16]
 800b18e:	7561      	strb	r1, [r4, #21]
 800b190:	7da0      	ldrb	r0, [r4, #22]
 800b192:	f080 0001 	eor.w	r0, r0, #1
 800b196:	bd38      	pop	{r3, r4, r5, pc}

0800b198 <ucdr_serialize_uint8_t>:
 800b198:	b538      	push	{r3, r4, r5, lr}
 800b19a:	460d      	mov	r5, r1
 800b19c:	2101      	movs	r1, #1
 800b19e:	4604      	mov	r4, r0
 800b1a0:	f001 fa94 	bl	800c6cc <ucdr_check_final_buffer_behavior>
 800b1a4:	b148      	cbz	r0, 800b1ba <ucdr_serialize_uint8_t+0x22>
 800b1a6:	68a3      	ldr	r3, [r4, #8]
 800b1a8:	701d      	strb	r5, [r3, #0]
 800b1aa:	68a2      	ldr	r2, [r4, #8]
 800b1ac:	6923      	ldr	r3, [r4, #16]
 800b1ae:	2101      	movs	r1, #1
 800b1b0:	440a      	add	r2, r1
 800b1b2:	440b      	add	r3, r1
 800b1b4:	60a2      	str	r2, [r4, #8]
 800b1b6:	6123      	str	r3, [r4, #16]
 800b1b8:	7561      	strb	r1, [r4, #21]
 800b1ba:	7da0      	ldrb	r0, [r4, #22]
 800b1bc:	f080 0001 	eor.w	r0, r0, #1
 800b1c0:	bd38      	pop	{r3, r4, r5, pc}
 800b1c2:	bf00      	nop

0800b1c4 <ucdr_deserialize_uint8_t>:
 800b1c4:	b538      	push	{r3, r4, r5, lr}
 800b1c6:	460d      	mov	r5, r1
 800b1c8:	2101      	movs	r1, #1
 800b1ca:	4604      	mov	r4, r0
 800b1cc:	f001 fa7e 	bl	800c6cc <ucdr_check_final_buffer_behavior>
 800b1d0:	b150      	cbz	r0, 800b1e8 <ucdr_deserialize_uint8_t+0x24>
 800b1d2:	68a3      	ldr	r3, [r4, #8]
 800b1d4:	781b      	ldrb	r3, [r3, #0]
 800b1d6:	702b      	strb	r3, [r5, #0]
 800b1d8:	68a2      	ldr	r2, [r4, #8]
 800b1da:	6923      	ldr	r3, [r4, #16]
 800b1dc:	2101      	movs	r1, #1
 800b1de:	440a      	add	r2, r1
 800b1e0:	440b      	add	r3, r1
 800b1e2:	60a2      	str	r2, [r4, #8]
 800b1e4:	6123      	str	r3, [r4, #16]
 800b1e6:	7561      	strb	r1, [r4, #21]
 800b1e8:	7da0      	ldrb	r0, [r4, #22]
 800b1ea:	f080 0001 	eor.w	r0, r0, #1
 800b1ee:	bd38      	pop	{r3, r4, r5, pc}

0800b1f0 <ucdr_serialize_uint16_t>:
 800b1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1f4:	b082      	sub	sp, #8
 800b1f6:	460b      	mov	r3, r1
 800b1f8:	2102      	movs	r1, #2
 800b1fa:	4604      	mov	r4, r0
 800b1fc:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b200:	f001 fab8 	bl	800c774 <ucdr_buffer_alignment>
 800b204:	4601      	mov	r1, r0
 800b206:	4620      	mov	r0, r4
 800b208:	7d67      	ldrb	r7, [r4, #21]
 800b20a:	f001 faf7 	bl	800c7fc <ucdr_advance_buffer>
 800b20e:	2102      	movs	r1, #2
 800b210:	4620      	mov	r0, r4
 800b212:	f001 fa4f 	bl	800c6b4 <ucdr_check_buffer_available_for>
 800b216:	bb78      	cbnz	r0, 800b278 <ucdr_serialize_uint16_t+0x88>
 800b218:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b21c:	42ab      	cmp	r3, r5
 800b21e:	d926      	bls.n	800b26e <ucdr_serialize_uint16_t+0x7e>
 800b220:	1b5e      	subs	r6, r3, r5
 800b222:	60a3      	str	r3, [r4, #8]
 800b224:	6923      	ldr	r3, [r4, #16]
 800b226:	f1c6 0802 	rsb	r8, r6, #2
 800b22a:	4433      	add	r3, r6
 800b22c:	6123      	str	r3, [r4, #16]
 800b22e:	4641      	mov	r1, r8
 800b230:	4620      	mov	r0, r4
 800b232:	f001 fa4b 	bl	800c6cc <ucdr_check_final_buffer_behavior>
 800b236:	2800      	cmp	r0, #0
 800b238:	d03b      	beq.n	800b2b2 <ucdr_serialize_uint16_t+0xc2>
 800b23a:	7d23      	ldrb	r3, [r4, #20]
 800b23c:	2b01      	cmp	r3, #1
 800b23e:	d04a      	beq.n	800b2d6 <ucdr_serialize_uint16_t+0xe6>
 800b240:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b244:	702b      	strb	r3, [r5, #0]
 800b246:	2e00      	cmp	r6, #0
 800b248:	d040      	beq.n	800b2cc <ucdr_serialize_uint16_t+0xdc>
 800b24a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b24e:	706b      	strb	r3, [r5, #1]
 800b250:	6923      	ldr	r3, [r4, #16]
 800b252:	68a2      	ldr	r2, [r4, #8]
 800b254:	7da0      	ldrb	r0, [r4, #22]
 800b256:	3302      	adds	r3, #2
 800b258:	1b9e      	subs	r6, r3, r6
 800b25a:	4442      	add	r2, r8
 800b25c:	2302      	movs	r3, #2
 800b25e:	f080 0001 	eor.w	r0, r0, #1
 800b262:	60a2      	str	r2, [r4, #8]
 800b264:	6126      	str	r6, [r4, #16]
 800b266:	7563      	strb	r3, [r4, #21]
 800b268:	b002      	add	sp, #8
 800b26a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b26e:	2102      	movs	r1, #2
 800b270:	4620      	mov	r0, r4
 800b272:	f001 fa2b 	bl	800c6cc <ucdr_check_final_buffer_behavior>
 800b276:	b190      	cbz	r0, 800b29e <ucdr_serialize_uint16_t+0xae>
 800b278:	7d23      	ldrb	r3, [r4, #20]
 800b27a:	2b01      	cmp	r3, #1
 800b27c:	68a3      	ldr	r3, [r4, #8]
 800b27e:	d014      	beq.n	800b2aa <ucdr_serialize_uint16_t+0xba>
 800b280:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b284:	701a      	strb	r2, [r3, #0]
 800b286:	68a3      	ldr	r3, [r4, #8]
 800b288:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b28c:	705a      	strb	r2, [r3, #1]
 800b28e:	68a2      	ldr	r2, [r4, #8]
 800b290:	6923      	ldr	r3, [r4, #16]
 800b292:	3202      	adds	r2, #2
 800b294:	3302      	adds	r3, #2
 800b296:	2102      	movs	r1, #2
 800b298:	60a2      	str	r2, [r4, #8]
 800b29a:	6123      	str	r3, [r4, #16]
 800b29c:	7561      	strb	r1, [r4, #21]
 800b29e:	7da0      	ldrb	r0, [r4, #22]
 800b2a0:	f080 0001 	eor.w	r0, r0, #1
 800b2a4:	b002      	add	sp, #8
 800b2a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2aa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b2ae:	801a      	strh	r2, [r3, #0]
 800b2b0:	e7ed      	b.n	800b28e <ucdr_serialize_uint16_t+0x9e>
 800b2b2:	68a2      	ldr	r2, [r4, #8]
 800b2b4:	6923      	ldr	r3, [r4, #16]
 800b2b6:	7da0      	ldrb	r0, [r4, #22]
 800b2b8:	7567      	strb	r7, [r4, #21]
 800b2ba:	1b92      	subs	r2, r2, r6
 800b2bc:	1b9b      	subs	r3, r3, r6
 800b2be:	f080 0001 	eor.w	r0, r0, #1
 800b2c2:	60a2      	str	r2, [r4, #8]
 800b2c4:	6123      	str	r3, [r4, #16]
 800b2c6:	b002      	add	sp, #8
 800b2c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2cc:	68a3      	ldr	r3, [r4, #8]
 800b2ce:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b2d2:	701a      	strb	r2, [r3, #0]
 800b2d4:	e7bc      	b.n	800b250 <ucdr_serialize_uint16_t+0x60>
 800b2d6:	4628      	mov	r0, r5
 800b2d8:	f10d 0506 	add.w	r5, sp, #6
 800b2dc:	4629      	mov	r1, r5
 800b2de:	4632      	mov	r2, r6
 800b2e0:	f00f f871 	bl	801a3c6 <memcpy>
 800b2e4:	68a0      	ldr	r0, [r4, #8]
 800b2e6:	4642      	mov	r2, r8
 800b2e8:	19a9      	adds	r1, r5, r6
 800b2ea:	f00f f86c 	bl	801a3c6 <memcpy>
 800b2ee:	e7af      	b.n	800b250 <ucdr_serialize_uint16_t+0x60>

0800b2f0 <ucdr_serialize_endian_uint16_t>:
 800b2f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b2f4:	b083      	sub	sp, #12
 800b2f6:	460d      	mov	r5, r1
 800b2f8:	2102      	movs	r1, #2
 800b2fa:	4604      	mov	r4, r0
 800b2fc:	f8ad 2006 	strh.w	r2, [sp, #6]
 800b300:	f001 fa38 	bl	800c774 <ucdr_buffer_alignment>
 800b304:	4601      	mov	r1, r0
 800b306:	4620      	mov	r0, r4
 800b308:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b30c:	f001 fa76 	bl	800c7fc <ucdr_advance_buffer>
 800b310:	2102      	movs	r1, #2
 800b312:	4620      	mov	r0, r4
 800b314:	f001 f9ce 	bl	800c6b4 <ucdr_check_buffer_available_for>
 800b318:	bb70      	cbnz	r0, 800b378 <ucdr_serialize_endian_uint16_t+0x88>
 800b31a:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b31e:	42be      	cmp	r6, r7
 800b320:	d925      	bls.n	800b36e <ucdr_serialize_endian_uint16_t+0x7e>
 800b322:	6923      	ldr	r3, [r4, #16]
 800b324:	60a6      	str	r6, [r4, #8]
 800b326:	1bf6      	subs	r6, r6, r7
 800b328:	4433      	add	r3, r6
 800b32a:	f1c6 0902 	rsb	r9, r6, #2
 800b32e:	6123      	str	r3, [r4, #16]
 800b330:	4649      	mov	r1, r9
 800b332:	4620      	mov	r0, r4
 800b334:	f001 f9ca 	bl	800c6cc <ucdr_check_final_buffer_behavior>
 800b338:	2800      	cmp	r0, #0
 800b33a:	d039      	beq.n	800b3b0 <ucdr_serialize_endian_uint16_t+0xc0>
 800b33c:	2d01      	cmp	r5, #1
 800b33e:	d04a      	beq.n	800b3d6 <ucdr_serialize_endian_uint16_t+0xe6>
 800b340:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b344:	703b      	strb	r3, [r7, #0]
 800b346:	2e00      	cmp	r6, #0
 800b348:	d040      	beq.n	800b3cc <ucdr_serialize_endian_uint16_t+0xdc>
 800b34a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b34e:	707b      	strb	r3, [r7, #1]
 800b350:	6923      	ldr	r3, [r4, #16]
 800b352:	68a2      	ldr	r2, [r4, #8]
 800b354:	7da0      	ldrb	r0, [r4, #22]
 800b356:	3302      	adds	r3, #2
 800b358:	444a      	add	r2, r9
 800b35a:	1b9b      	subs	r3, r3, r6
 800b35c:	2102      	movs	r1, #2
 800b35e:	f080 0001 	eor.w	r0, r0, #1
 800b362:	60a2      	str	r2, [r4, #8]
 800b364:	6123      	str	r3, [r4, #16]
 800b366:	7561      	strb	r1, [r4, #21]
 800b368:	b003      	add	sp, #12
 800b36a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b36e:	2102      	movs	r1, #2
 800b370:	4620      	mov	r0, r4
 800b372:	f001 f9ab 	bl	800c6cc <ucdr_check_final_buffer_behavior>
 800b376:	b188      	cbz	r0, 800b39c <ucdr_serialize_endian_uint16_t+0xac>
 800b378:	2d01      	cmp	r5, #1
 800b37a:	68a3      	ldr	r3, [r4, #8]
 800b37c:	d014      	beq.n	800b3a8 <ucdr_serialize_endian_uint16_t+0xb8>
 800b37e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b382:	701a      	strb	r2, [r3, #0]
 800b384:	68a3      	ldr	r3, [r4, #8]
 800b386:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b38a:	705a      	strb	r2, [r3, #1]
 800b38c:	68a2      	ldr	r2, [r4, #8]
 800b38e:	6923      	ldr	r3, [r4, #16]
 800b390:	3202      	adds	r2, #2
 800b392:	3302      	adds	r3, #2
 800b394:	2102      	movs	r1, #2
 800b396:	60a2      	str	r2, [r4, #8]
 800b398:	6123      	str	r3, [r4, #16]
 800b39a:	7561      	strb	r1, [r4, #21]
 800b39c:	7da0      	ldrb	r0, [r4, #22]
 800b39e:	f080 0001 	eor.w	r0, r0, #1
 800b3a2:	b003      	add	sp, #12
 800b3a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3a8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b3ac:	801a      	strh	r2, [r3, #0]
 800b3ae:	e7ed      	b.n	800b38c <ucdr_serialize_endian_uint16_t+0x9c>
 800b3b0:	68a2      	ldr	r2, [r4, #8]
 800b3b2:	6923      	ldr	r3, [r4, #16]
 800b3b4:	7da0      	ldrb	r0, [r4, #22]
 800b3b6:	f884 8015 	strb.w	r8, [r4, #21]
 800b3ba:	1b92      	subs	r2, r2, r6
 800b3bc:	1b9b      	subs	r3, r3, r6
 800b3be:	f080 0001 	eor.w	r0, r0, #1
 800b3c2:	60a2      	str	r2, [r4, #8]
 800b3c4:	6123      	str	r3, [r4, #16]
 800b3c6:	b003      	add	sp, #12
 800b3c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3cc:	68a3      	ldr	r3, [r4, #8]
 800b3ce:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b3d2:	701a      	strb	r2, [r3, #0]
 800b3d4:	e7bc      	b.n	800b350 <ucdr_serialize_endian_uint16_t+0x60>
 800b3d6:	f10d 0506 	add.w	r5, sp, #6
 800b3da:	4629      	mov	r1, r5
 800b3dc:	4632      	mov	r2, r6
 800b3de:	4638      	mov	r0, r7
 800b3e0:	f00e fff1 	bl	801a3c6 <memcpy>
 800b3e4:	68a0      	ldr	r0, [r4, #8]
 800b3e6:	464a      	mov	r2, r9
 800b3e8:	19a9      	adds	r1, r5, r6
 800b3ea:	f00e ffec 	bl	801a3c6 <memcpy>
 800b3ee:	e7af      	b.n	800b350 <ucdr_serialize_endian_uint16_t+0x60>

0800b3f0 <ucdr_deserialize_uint16_t>:
 800b3f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3f4:	460d      	mov	r5, r1
 800b3f6:	2102      	movs	r1, #2
 800b3f8:	4604      	mov	r4, r0
 800b3fa:	f001 f9bb 	bl	800c774 <ucdr_buffer_alignment>
 800b3fe:	4601      	mov	r1, r0
 800b400:	4620      	mov	r0, r4
 800b402:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b406:	f001 f9f9 	bl	800c7fc <ucdr_advance_buffer>
 800b40a:	2102      	movs	r1, #2
 800b40c:	4620      	mov	r0, r4
 800b40e:	f001 f951 	bl	800c6b4 <ucdr_check_buffer_available_for>
 800b412:	bb60      	cbnz	r0, 800b46e <ucdr_deserialize_uint16_t+0x7e>
 800b414:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b418:	42be      	cmp	r6, r7
 800b41a:	d923      	bls.n	800b464 <ucdr_deserialize_uint16_t+0x74>
 800b41c:	6923      	ldr	r3, [r4, #16]
 800b41e:	60a6      	str	r6, [r4, #8]
 800b420:	1bf6      	subs	r6, r6, r7
 800b422:	4433      	add	r3, r6
 800b424:	f1c6 0902 	rsb	r9, r6, #2
 800b428:	6123      	str	r3, [r4, #16]
 800b42a:	4649      	mov	r1, r9
 800b42c:	4620      	mov	r0, r4
 800b42e:	f001 f94d 	bl	800c6cc <ucdr_check_final_buffer_behavior>
 800b432:	2800      	cmp	r0, #0
 800b434:	d034      	beq.n	800b4a0 <ucdr_deserialize_uint16_t+0xb0>
 800b436:	7d23      	ldrb	r3, [r4, #20]
 800b438:	2b01      	cmp	r3, #1
 800b43a:	d042      	beq.n	800b4c2 <ucdr_deserialize_uint16_t+0xd2>
 800b43c:	787b      	ldrb	r3, [r7, #1]
 800b43e:	702b      	strb	r3, [r5, #0]
 800b440:	2e00      	cmp	r6, #0
 800b442:	d03a      	beq.n	800b4ba <ucdr_deserialize_uint16_t+0xca>
 800b444:	783b      	ldrb	r3, [r7, #0]
 800b446:	706b      	strb	r3, [r5, #1]
 800b448:	6923      	ldr	r3, [r4, #16]
 800b44a:	68a2      	ldr	r2, [r4, #8]
 800b44c:	7da0      	ldrb	r0, [r4, #22]
 800b44e:	2102      	movs	r1, #2
 800b450:	3302      	adds	r3, #2
 800b452:	444a      	add	r2, r9
 800b454:	1b9b      	subs	r3, r3, r6
 800b456:	7561      	strb	r1, [r4, #21]
 800b458:	60a2      	str	r2, [r4, #8]
 800b45a:	6123      	str	r3, [r4, #16]
 800b45c:	f080 0001 	eor.w	r0, r0, #1
 800b460:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b464:	2102      	movs	r1, #2
 800b466:	4620      	mov	r0, r4
 800b468:	f001 f930 	bl	800c6cc <ucdr_check_final_buffer_behavior>
 800b46c:	b180      	cbz	r0, 800b490 <ucdr_deserialize_uint16_t+0xa0>
 800b46e:	7d23      	ldrb	r3, [r4, #20]
 800b470:	2b01      	cmp	r3, #1
 800b472:	68a3      	ldr	r3, [r4, #8]
 800b474:	d011      	beq.n	800b49a <ucdr_deserialize_uint16_t+0xaa>
 800b476:	785b      	ldrb	r3, [r3, #1]
 800b478:	702b      	strb	r3, [r5, #0]
 800b47a:	68a3      	ldr	r3, [r4, #8]
 800b47c:	781b      	ldrb	r3, [r3, #0]
 800b47e:	706b      	strb	r3, [r5, #1]
 800b480:	68a2      	ldr	r2, [r4, #8]
 800b482:	6923      	ldr	r3, [r4, #16]
 800b484:	3202      	adds	r2, #2
 800b486:	3302      	adds	r3, #2
 800b488:	2102      	movs	r1, #2
 800b48a:	60a2      	str	r2, [r4, #8]
 800b48c:	6123      	str	r3, [r4, #16]
 800b48e:	7561      	strb	r1, [r4, #21]
 800b490:	7da0      	ldrb	r0, [r4, #22]
 800b492:	f080 0001 	eor.w	r0, r0, #1
 800b496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b49a:	881b      	ldrh	r3, [r3, #0]
 800b49c:	802b      	strh	r3, [r5, #0]
 800b49e:	e7ef      	b.n	800b480 <ucdr_deserialize_uint16_t+0x90>
 800b4a0:	68a2      	ldr	r2, [r4, #8]
 800b4a2:	6923      	ldr	r3, [r4, #16]
 800b4a4:	7da0      	ldrb	r0, [r4, #22]
 800b4a6:	f884 8015 	strb.w	r8, [r4, #21]
 800b4aa:	1b92      	subs	r2, r2, r6
 800b4ac:	1b9b      	subs	r3, r3, r6
 800b4ae:	60a2      	str	r2, [r4, #8]
 800b4b0:	6123      	str	r3, [r4, #16]
 800b4b2:	f080 0001 	eor.w	r0, r0, #1
 800b4b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4ba:	68a3      	ldr	r3, [r4, #8]
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	706b      	strb	r3, [r5, #1]
 800b4c0:	e7c2      	b.n	800b448 <ucdr_deserialize_uint16_t+0x58>
 800b4c2:	4639      	mov	r1, r7
 800b4c4:	4632      	mov	r2, r6
 800b4c6:	4628      	mov	r0, r5
 800b4c8:	f00e ff7d 	bl	801a3c6 <memcpy>
 800b4cc:	68a1      	ldr	r1, [r4, #8]
 800b4ce:	464a      	mov	r2, r9
 800b4d0:	19a8      	adds	r0, r5, r6
 800b4d2:	f00e ff78 	bl	801a3c6 <memcpy>
 800b4d6:	e7b7      	b.n	800b448 <ucdr_deserialize_uint16_t+0x58>

0800b4d8 <ucdr_deserialize_endian_uint16_t>:
 800b4d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4dc:	460e      	mov	r6, r1
 800b4de:	2102      	movs	r1, #2
 800b4e0:	4604      	mov	r4, r0
 800b4e2:	4615      	mov	r5, r2
 800b4e4:	f001 f946 	bl	800c774 <ucdr_buffer_alignment>
 800b4e8:	4601      	mov	r1, r0
 800b4ea:	4620      	mov	r0, r4
 800b4ec:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b4f0:	f001 f984 	bl	800c7fc <ucdr_advance_buffer>
 800b4f4:	2102      	movs	r1, #2
 800b4f6:	4620      	mov	r0, r4
 800b4f8:	f001 f8dc 	bl	800c6b4 <ucdr_check_buffer_available_for>
 800b4fc:	bb70      	cbnz	r0, 800b55c <ucdr_deserialize_endian_uint16_t+0x84>
 800b4fe:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800b502:	4547      	cmp	r7, r8
 800b504:	d925      	bls.n	800b552 <ucdr_deserialize_endian_uint16_t+0x7a>
 800b506:	6923      	ldr	r3, [r4, #16]
 800b508:	60a7      	str	r7, [r4, #8]
 800b50a:	eba7 0708 	sub.w	r7, r7, r8
 800b50e:	443b      	add	r3, r7
 800b510:	f1c7 0a02 	rsb	sl, r7, #2
 800b514:	6123      	str	r3, [r4, #16]
 800b516:	4651      	mov	r1, sl
 800b518:	4620      	mov	r0, r4
 800b51a:	f001 f8d7 	bl	800c6cc <ucdr_check_final_buffer_behavior>
 800b51e:	2800      	cmp	r0, #0
 800b520:	d034      	beq.n	800b58c <ucdr_deserialize_endian_uint16_t+0xb4>
 800b522:	2e01      	cmp	r6, #1
 800b524:	d043      	beq.n	800b5ae <ucdr_deserialize_endian_uint16_t+0xd6>
 800b526:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b52a:	702b      	strb	r3, [r5, #0]
 800b52c:	2f00      	cmp	r7, #0
 800b52e:	d03a      	beq.n	800b5a6 <ucdr_deserialize_endian_uint16_t+0xce>
 800b530:	f898 3000 	ldrb.w	r3, [r8]
 800b534:	706b      	strb	r3, [r5, #1]
 800b536:	6923      	ldr	r3, [r4, #16]
 800b538:	68a2      	ldr	r2, [r4, #8]
 800b53a:	7da0      	ldrb	r0, [r4, #22]
 800b53c:	2102      	movs	r1, #2
 800b53e:	3302      	adds	r3, #2
 800b540:	4452      	add	r2, sl
 800b542:	1bdb      	subs	r3, r3, r7
 800b544:	7561      	strb	r1, [r4, #21]
 800b546:	60a2      	str	r2, [r4, #8]
 800b548:	6123      	str	r3, [r4, #16]
 800b54a:	f080 0001 	eor.w	r0, r0, #1
 800b54e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b552:	2102      	movs	r1, #2
 800b554:	4620      	mov	r0, r4
 800b556:	f001 f8b9 	bl	800c6cc <ucdr_check_final_buffer_behavior>
 800b55a:	b178      	cbz	r0, 800b57c <ucdr_deserialize_endian_uint16_t+0xa4>
 800b55c:	2e01      	cmp	r6, #1
 800b55e:	68a3      	ldr	r3, [r4, #8]
 800b560:	d011      	beq.n	800b586 <ucdr_deserialize_endian_uint16_t+0xae>
 800b562:	785b      	ldrb	r3, [r3, #1]
 800b564:	702b      	strb	r3, [r5, #0]
 800b566:	68a3      	ldr	r3, [r4, #8]
 800b568:	781b      	ldrb	r3, [r3, #0]
 800b56a:	706b      	strb	r3, [r5, #1]
 800b56c:	68a2      	ldr	r2, [r4, #8]
 800b56e:	6923      	ldr	r3, [r4, #16]
 800b570:	3202      	adds	r2, #2
 800b572:	3302      	adds	r3, #2
 800b574:	2102      	movs	r1, #2
 800b576:	60a2      	str	r2, [r4, #8]
 800b578:	6123      	str	r3, [r4, #16]
 800b57a:	7561      	strb	r1, [r4, #21]
 800b57c:	7da0      	ldrb	r0, [r4, #22]
 800b57e:	f080 0001 	eor.w	r0, r0, #1
 800b582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b586:	881b      	ldrh	r3, [r3, #0]
 800b588:	802b      	strh	r3, [r5, #0]
 800b58a:	e7ef      	b.n	800b56c <ucdr_deserialize_endian_uint16_t+0x94>
 800b58c:	68a2      	ldr	r2, [r4, #8]
 800b58e:	6923      	ldr	r3, [r4, #16]
 800b590:	7da0      	ldrb	r0, [r4, #22]
 800b592:	f884 9015 	strb.w	r9, [r4, #21]
 800b596:	1bd2      	subs	r2, r2, r7
 800b598:	1bdb      	subs	r3, r3, r7
 800b59a:	60a2      	str	r2, [r4, #8]
 800b59c:	6123      	str	r3, [r4, #16]
 800b59e:	f080 0001 	eor.w	r0, r0, #1
 800b5a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5a6:	68a3      	ldr	r3, [r4, #8]
 800b5a8:	781b      	ldrb	r3, [r3, #0]
 800b5aa:	706b      	strb	r3, [r5, #1]
 800b5ac:	e7c3      	b.n	800b536 <ucdr_deserialize_endian_uint16_t+0x5e>
 800b5ae:	4641      	mov	r1, r8
 800b5b0:	463a      	mov	r2, r7
 800b5b2:	4628      	mov	r0, r5
 800b5b4:	f00e ff07 	bl	801a3c6 <memcpy>
 800b5b8:	68a1      	ldr	r1, [r4, #8]
 800b5ba:	4652      	mov	r2, sl
 800b5bc:	19e8      	adds	r0, r5, r7
 800b5be:	f00e ff02 	bl	801a3c6 <memcpy>
 800b5c2:	e7b8      	b.n	800b536 <ucdr_deserialize_endian_uint16_t+0x5e>

0800b5c4 <ucdr_serialize_uint32_t>:
 800b5c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5c8:	b082      	sub	sp, #8
 800b5ca:	4604      	mov	r4, r0
 800b5cc:	9101      	str	r1, [sp, #4]
 800b5ce:	2104      	movs	r1, #4
 800b5d0:	f001 f8d0 	bl	800c774 <ucdr_buffer_alignment>
 800b5d4:	4601      	mov	r1, r0
 800b5d6:	4620      	mov	r0, r4
 800b5d8:	7d67      	ldrb	r7, [r4, #21]
 800b5da:	f001 f90f 	bl	800c7fc <ucdr_advance_buffer>
 800b5de:	2104      	movs	r1, #4
 800b5e0:	4620      	mov	r0, r4
 800b5e2:	f001 f867 	bl	800c6b4 <ucdr_check_buffer_available_for>
 800b5e6:	2800      	cmp	r0, #0
 800b5e8:	d139      	bne.n	800b65e <ucdr_serialize_uint32_t+0x9a>
 800b5ea:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b5ee:	42ab      	cmp	r3, r5
 800b5f0:	d930      	bls.n	800b654 <ucdr_serialize_uint32_t+0x90>
 800b5f2:	1b5e      	subs	r6, r3, r5
 800b5f4:	60a3      	str	r3, [r4, #8]
 800b5f6:	6923      	ldr	r3, [r4, #16]
 800b5f8:	f1c6 0804 	rsb	r8, r6, #4
 800b5fc:	4433      	add	r3, r6
 800b5fe:	6123      	str	r3, [r4, #16]
 800b600:	4641      	mov	r1, r8
 800b602:	4620      	mov	r0, r4
 800b604:	f001 f862 	bl	800c6cc <ucdr_check_final_buffer_behavior>
 800b608:	2800      	cmp	r0, #0
 800b60a:	d04c      	beq.n	800b6a6 <ucdr_serialize_uint32_t+0xe2>
 800b60c:	7d23      	ldrb	r3, [r4, #20]
 800b60e:	2b01      	cmp	r3, #1
 800b610:	d063      	beq.n	800b6da <ucdr_serialize_uint32_t+0x116>
 800b612:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b616:	702b      	strb	r3, [r5, #0]
 800b618:	2e00      	cmp	r6, #0
 800b61a:	d051      	beq.n	800b6c0 <ucdr_serialize_uint32_t+0xfc>
 800b61c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b620:	706b      	strb	r3, [r5, #1]
 800b622:	2e01      	cmp	r6, #1
 800b624:	d050      	beq.n	800b6c8 <ucdr_serialize_uint32_t+0x104>
 800b626:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b62a:	70ab      	strb	r3, [r5, #2]
 800b62c:	2e02      	cmp	r6, #2
 800b62e:	d04f      	beq.n	800b6d0 <ucdr_serialize_uint32_t+0x10c>
 800b630:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b634:	70eb      	strb	r3, [r5, #3]
 800b636:	6923      	ldr	r3, [r4, #16]
 800b638:	68a2      	ldr	r2, [r4, #8]
 800b63a:	7da0      	ldrb	r0, [r4, #22]
 800b63c:	3304      	adds	r3, #4
 800b63e:	1b9e      	subs	r6, r3, r6
 800b640:	4442      	add	r2, r8
 800b642:	2304      	movs	r3, #4
 800b644:	f080 0001 	eor.w	r0, r0, #1
 800b648:	60a2      	str	r2, [r4, #8]
 800b64a:	6126      	str	r6, [r4, #16]
 800b64c:	7563      	strb	r3, [r4, #21]
 800b64e:	b002      	add	sp, #8
 800b650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b654:	2104      	movs	r1, #4
 800b656:	4620      	mov	r0, r4
 800b658:	f001 f838 	bl	800c6cc <ucdr_check_final_buffer_behavior>
 800b65c:	b1d0      	cbz	r0, 800b694 <ucdr_serialize_uint32_t+0xd0>
 800b65e:	7d23      	ldrb	r3, [r4, #20]
 800b660:	2b01      	cmp	r3, #1
 800b662:	68a3      	ldr	r3, [r4, #8]
 800b664:	d01c      	beq.n	800b6a0 <ucdr_serialize_uint32_t+0xdc>
 800b666:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b66a:	701a      	strb	r2, [r3, #0]
 800b66c:	68a3      	ldr	r3, [r4, #8]
 800b66e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b672:	705a      	strb	r2, [r3, #1]
 800b674:	68a3      	ldr	r3, [r4, #8]
 800b676:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b67a:	709a      	strb	r2, [r3, #2]
 800b67c:	68a3      	ldr	r3, [r4, #8]
 800b67e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b682:	70da      	strb	r2, [r3, #3]
 800b684:	68a2      	ldr	r2, [r4, #8]
 800b686:	6923      	ldr	r3, [r4, #16]
 800b688:	3204      	adds	r2, #4
 800b68a:	3304      	adds	r3, #4
 800b68c:	2104      	movs	r1, #4
 800b68e:	60a2      	str	r2, [r4, #8]
 800b690:	6123      	str	r3, [r4, #16]
 800b692:	7561      	strb	r1, [r4, #21]
 800b694:	7da0      	ldrb	r0, [r4, #22]
 800b696:	f080 0001 	eor.w	r0, r0, #1
 800b69a:	b002      	add	sp, #8
 800b69c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6a0:	9a01      	ldr	r2, [sp, #4]
 800b6a2:	601a      	str	r2, [r3, #0]
 800b6a4:	e7ee      	b.n	800b684 <ucdr_serialize_uint32_t+0xc0>
 800b6a6:	68a2      	ldr	r2, [r4, #8]
 800b6a8:	6923      	ldr	r3, [r4, #16]
 800b6aa:	7da0      	ldrb	r0, [r4, #22]
 800b6ac:	7567      	strb	r7, [r4, #21]
 800b6ae:	1b92      	subs	r2, r2, r6
 800b6b0:	1b9b      	subs	r3, r3, r6
 800b6b2:	f080 0001 	eor.w	r0, r0, #1
 800b6b6:	60a2      	str	r2, [r4, #8]
 800b6b8:	6123      	str	r3, [r4, #16]
 800b6ba:	b002      	add	sp, #8
 800b6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6c0:	68a3      	ldr	r3, [r4, #8]
 800b6c2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b6c6:	701a      	strb	r2, [r3, #0]
 800b6c8:	68a3      	ldr	r3, [r4, #8]
 800b6ca:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b6ce:	701a      	strb	r2, [r3, #0]
 800b6d0:	68a3      	ldr	r3, [r4, #8]
 800b6d2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b6d6:	701a      	strb	r2, [r3, #0]
 800b6d8:	e7ad      	b.n	800b636 <ucdr_serialize_uint32_t+0x72>
 800b6da:	4628      	mov	r0, r5
 800b6dc:	ad01      	add	r5, sp, #4
 800b6de:	4629      	mov	r1, r5
 800b6e0:	4632      	mov	r2, r6
 800b6e2:	f00e fe70 	bl	801a3c6 <memcpy>
 800b6e6:	68a0      	ldr	r0, [r4, #8]
 800b6e8:	4642      	mov	r2, r8
 800b6ea:	19a9      	adds	r1, r5, r6
 800b6ec:	f00e fe6b 	bl	801a3c6 <memcpy>
 800b6f0:	e7a1      	b.n	800b636 <ucdr_serialize_uint32_t+0x72>
 800b6f2:	bf00      	nop

0800b6f4 <ucdr_serialize_endian_uint32_t>:
 800b6f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b6f8:	b083      	sub	sp, #12
 800b6fa:	460d      	mov	r5, r1
 800b6fc:	2104      	movs	r1, #4
 800b6fe:	4604      	mov	r4, r0
 800b700:	9201      	str	r2, [sp, #4]
 800b702:	f001 f837 	bl	800c774 <ucdr_buffer_alignment>
 800b706:	4601      	mov	r1, r0
 800b708:	4620      	mov	r0, r4
 800b70a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b70e:	f001 f875 	bl	800c7fc <ucdr_advance_buffer>
 800b712:	2104      	movs	r1, #4
 800b714:	4620      	mov	r0, r4
 800b716:	f000 ffcd 	bl	800c6b4 <ucdr_check_buffer_available_for>
 800b71a:	2800      	cmp	r0, #0
 800b71c:	d138      	bne.n	800b790 <ucdr_serialize_endian_uint32_t+0x9c>
 800b71e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b722:	42b7      	cmp	r7, r6
 800b724:	d92f      	bls.n	800b786 <ucdr_serialize_endian_uint32_t+0x92>
 800b726:	6923      	ldr	r3, [r4, #16]
 800b728:	60a7      	str	r7, [r4, #8]
 800b72a:	1bbf      	subs	r7, r7, r6
 800b72c:	443b      	add	r3, r7
 800b72e:	f1c7 0904 	rsb	r9, r7, #4
 800b732:	6123      	str	r3, [r4, #16]
 800b734:	4649      	mov	r1, r9
 800b736:	4620      	mov	r0, r4
 800b738:	f000 ffc8 	bl	800c6cc <ucdr_check_final_buffer_behavior>
 800b73c:	2800      	cmp	r0, #0
 800b73e:	d04a      	beq.n	800b7d6 <ucdr_serialize_endian_uint32_t+0xe2>
 800b740:	2d01      	cmp	r5, #1
 800b742:	d063      	beq.n	800b80c <ucdr_serialize_endian_uint32_t+0x118>
 800b744:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b748:	7033      	strb	r3, [r6, #0]
 800b74a:	2f00      	cmp	r7, #0
 800b74c:	d051      	beq.n	800b7f2 <ucdr_serialize_endian_uint32_t+0xfe>
 800b74e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b752:	7073      	strb	r3, [r6, #1]
 800b754:	2f01      	cmp	r7, #1
 800b756:	d050      	beq.n	800b7fa <ucdr_serialize_endian_uint32_t+0x106>
 800b758:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b75c:	70b3      	strb	r3, [r6, #2]
 800b75e:	2f02      	cmp	r7, #2
 800b760:	d04f      	beq.n	800b802 <ucdr_serialize_endian_uint32_t+0x10e>
 800b762:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b766:	70f3      	strb	r3, [r6, #3]
 800b768:	6923      	ldr	r3, [r4, #16]
 800b76a:	68a2      	ldr	r2, [r4, #8]
 800b76c:	7da0      	ldrb	r0, [r4, #22]
 800b76e:	3304      	adds	r3, #4
 800b770:	444a      	add	r2, r9
 800b772:	1bdb      	subs	r3, r3, r7
 800b774:	2104      	movs	r1, #4
 800b776:	f080 0001 	eor.w	r0, r0, #1
 800b77a:	60a2      	str	r2, [r4, #8]
 800b77c:	6123      	str	r3, [r4, #16]
 800b77e:	7561      	strb	r1, [r4, #21]
 800b780:	b003      	add	sp, #12
 800b782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b786:	2104      	movs	r1, #4
 800b788:	4620      	mov	r0, r4
 800b78a:	f000 ff9f 	bl	800c6cc <ucdr_check_final_buffer_behavior>
 800b78e:	b1c8      	cbz	r0, 800b7c4 <ucdr_serialize_endian_uint32_t+0xd0>
 800b790:	2d01      	cmp	r5, #1
 800b792:	68a3      	ldr	r3, [r4, #8]
 800b794:	d01c      	beq.n	800b7d0 <ucdr_serialize_endian_uint32_t+0xdc>
 800b796:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b79a:	701a      	strb	r2, [r3, #0]
 800b79c:	68a3      	ldr	r3, [r4, #8]
 800b79e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b7a2:	705a      	strb	r2, [r3, #1]
 800b7a4:	68a3      	ldr	r3, [r4, #8]
 800b7a6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b7aa:	709a      	strb	r2, [r3, #2]
 800b7ac:	68a3      	ldr	r3, [r4, #8]
 800b7ae:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b7b2:	70da      	strb	r2, [r3, #3]
 800b7b4:	68a2      	ldr	r2, [r4, #8]
 800b7b6:	6923      	ldr	r3, [r4, #16]
 800b7b8:	3204      	adds	r2, #4
 800b7ba:	3304      	adds	r3, #4
 800b7bc:	2104      	movs	r1, #4
 800b7be:	60a2      	str	r2, [r4, #8]
 800b7c0:	6123      	str	r3, [r4, #16]
 800b7c2:	7561      	strb	r1, [r4, #21]
 800b7c4:	7da0      	ldrb	r0, [r4, #22]
 800b7c6:	f080 0001 	eor.w	r0, r0, #1
 800b7ca:	b003      	add	sp, #12
 800b7cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b7d0:	9a01      	ldr	r2, [sp, #4]
 800b7d2:	601a      	str	r2, [r3, #0]
 800b7d4:	e7ee      	b.n	800b7b4 <ucdr_serialize_endian_uint32_t+0xc0>
 800b7d6:	68a2      	ldr	r2, [r4, #8]
 800b7d8:	6923      	ldr	r3, [r4, #16]
 800b7da:	7da0      	ldrb	r0, [r4, #22]
 800b7dc:	f884 8015 	strb.w	r8, [r4, #21]
 800b7e0:	1bd2      	subs	r2, r2, r7
 800b7e2:	1bdb      	subs	r3, r3, r7
 800b7e4:	f080 0001 	eor.w	r0, r0, #1
 800b7e8:	60a2      	str	r2, [r4, #8]
 800b7ea:	6123      	str	r3, [r4, #16]
 800b7ec:	b003      	add	sp, #12
 800b7ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b7f2:	68a3      	ldr	r3, [r4, #8]
 800b7f4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b7f8:	701a      	strb	r2, [r3, #0]
 800b7fa:	68a3      	ldr	r3, [r4, #8]
 800b7fc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b800:	701a      	strb	r2, [r3, #0]
 800b802:	68a3      	ldr	r3, [r4, #8]
 800b804:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b808:	701a      	strb	r2, [r3, #0]
 800b80a:	e7ad      	b.n	800b768 <ucdr_serialize_endian_uint32_t+0x74>
 800b80c:	ad01      	add	r5, sp, #4
 800b80e:	4629      	mov	r1, r5
 800b810:	463a      	mov	r2, r7
 800b812:	4630      	mov	r0, r6
 800b814:	f00e fdd7 	bl	801a3c6 <memcpy>
 800b818:	68a0      	ldr	r0, [r4, #8]
 800b81a:	464a      	mov	r2, r9
 800b81c:	19e9      	adds	r1, r5, r7
 800b81e:	f00e fdd2 	bl	801a3c6 <memcpy>
 800b822:	e7a1      	b.n	800b768 <ucdr_serialize_endian_uint32_t+0x74>

0800b824 <ucdr_deserialize_uint32_t>:
 800b824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b828:	460d      	mov	r5, r1
 800b82a:	2104      	movs	r1, #4
 800b82c:	4604      	mov	r4, r0
 800b82e:	f000 ffa1 	bl	800c774 <ucdr_buffer_alignment>
 800b832:	4601      	mov	r1, r0
 800b834:	4620      	mov	r0, r4
 800b836:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b83a:	f000 ffdf 	bl	800c7fc <ucdr_advance_buffer>
 800b83e:	2104      	movs	r1, #4
 800b840:	4620      	mov	r0, r4
 800b842:	f000 ff37 	bl	800c6b4 <ucdr_check_buffer_available_for>
 800b846:	2800      	cmp	r0, #0
 800b848:	d138      	bne.n	800b8bc <ucdr_deserialize_uint32_t+0x98>
 800b84a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b84e:	42b7      	cmp	r7, r6
 800b850:	d92f      	bls.n	800b8b2 <ucdr_deserialize_uint32_t+0x8e>
 800b852:	6923      	ldr	r3, [r4, #16]
 800b854:	60a7      	str	r7, [r4, #8]
 800b856:	1bbf      	subs	r7, r7, r6
 800b858:	443b      	add	r3, r7
 800b85a:	f1c7 0904 	rsb	r9, r7, #4
 800b85e:	6123      	str	r3, [r4, #16]
 800b860:	4649      	mov	r1, r9
 800b862:	4620      	mov	r0, r4
 800b864:	f000 ff32 	bl	800c6cc <ucdr_check_final_buffer_behavior>
 800b868:	2800      	cmp	r0, #0
 800b86a:	d046      	beq.n	800b8fa <ucdr_deserialize_uint32_t+0xd6>
 800b86c:	7d23      	ldrb	r3, [r4, #20]
 800b86e:	2b01      	cmp	r3, #1
 800b870:	d05c      	beq.n	800b92c <ucdr_deserialize_uint32_t+0x108>
 800b872:	78f3      	ldrb	r3, [r6, #3]
 800b874:	702b      	strb	r3, [r5, #0]
 800b876:	2f00      	cmp	r7, #0
 800b878:	d04c      	beq.n	800b914 <ucdr_deserialize_uint32_t+0xf0>
 800b87a:	78b3      	ldrb	r3, [r6, #2]
 800b87c:	706b      	strb	r3, [r5, #1]
 800b87e:	2f01      	cmp	r7, #1
 800b880:	f105 0302 	add.w	r3, r5, #2
 800b884:	d04a      	beq.n	800b91c <ucdr_deserialize_uint32_t+0xf8>
 800b886:	7873      	ldrb	r3, [r6, #1]
 800b888:	70ab      	strb	r3, [r5, #2]
 800b88a:	2f02      	cmp	r7, #2
 800b88c:	f105 0303 	add.w	r3, r5, #3
 800b890:	d048      	beq.n	800b924 <ucdr_deserialize_uint32_t+0x100>
 800b892:	7833      	ldrb	r3, [r6, #0]
 800b894:	70eb      	strb	r3, [r5, #3]
 800b896:	6923      	ldr	r3, [r4, #16]
 800b898:	68a2      	ldr	r2, [r4, #8]
 800b89a:	7da0      	ldrb	r0, [r4, #22]
 800b89c:	2104      	movs	r1, #4
 800b89e:	3304      	adds	r3, #4
 800b8a0:	444a      	add	r2, r9
 800b8a2:	1bdb      	subs	r3, r3, r7
 800b8a4:	7561      	strb	r1, [r4, #21]
 800b8a6:	60a2      	str	r2, [r4, #8]
 800b8a8:	6123      	str	r3, [r4, #16]
 800b8aa:	f080 0001 	eor.w	r0, r0, #1
 800b8ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8b2:	2104      	movs	r1, #4
 800b8b4:	4620      	mov	r0, r4
 800b8b6:	f000 ff09 	bl	800c6cc <ucdr_check_final_buffer_behavior>
 800b8ba:	b1b0      	cbz	r0, 800b8ea <ucdr_deserialize_uint32_t+0xc6>
 800b8bc:	7d23      	ldrb	r3, [r4, #20]
 800b8be:	2b01      	cmp	r3, #1
 800b8c0:	68a3      	ldr	r3, [r4, #8]
 800b8c2:	d017      	beq.n	800b8f4 <ucdr_deserialize_uint32_t+0xd0>
 800b8c4:	78db      	ldrb	r3, [r3, #3]
 800b8c6:	702b      	strb	r3, [r5, #0]
 800b8c8:	68a3      	ldr	r3, [r4, #8]
 800b8ca:	789b      	ldrb	r3, [r3, #2]
 800b8cc:	706b      	strb	r3, [r5, #1]
 800b8ce:	68a3      	ldr	r3, [r4, #8]
 800b8d0:	785b      	ldrb	r3, [r3, #1]
 800b8d2:	70ab      	strb	r3, [r5, #2]
 800b8d4:	68a3      	ldr	r3, [r4, #8]
 800b8d6:	781b      	ldrb	r3, [r3, #0]
 800b8d8:	70eb      	strb	r3, [r5, #3]
 800b8da:	68a2      	ldr	r2, [r4, #8]
 800b8dc:	6923      	ldr	r3, [r4, #16]
 800b8de:	3204      	adds	r2, #4
 800b8e0:	3304      	adds	r3, #4
 800b8e2:	2104      	movs	r1, #4
 800b8e4:	60a2      	str	r2, [r4, #8]
 800b8e6:	6123      	str	r3, [r4, #16]
 800b8e8:	7561      	strb	r1, [r4, #21]
 800b8ea:	7da0      	ldrb	r0, [r4, #22]
 800b8ec:	f080 0001 	eor.w	r0, r0, #1
 800b8f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	602b      	str	r3, [r5, #0]
 800b8f8:	e7ef      	b.n	800b8da <ucdr_deserialize_uint32_t+0xb6>
 800b8fa:	68a2      	ldr	r2, [r4, #8]
 800b8fc:	6923      	ldr	r3, [r4, #16]
 800b8fe:	7da0      	ldrb	r0, [r4, #22]
 800b900:	f884 8015 	strb.w	r8, [r4, #21]
 800b904:	1bd2      	subs	r2, r2, r7
 800b906:	1bdb      	subs	r3, r3, r7
 800b908:	60a2      	str	r2, [r4, #8]
 800b90a:	6123      	str	r3, [r4, #16]
 800b90c:	f080 0001 	eor.w	r0, r0, #1
 800b910:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b914:	68a3      	ldr	r3, [r4, #8]
 800b916:	789b      	ldrb	r3, [r3, #2]
 800b918:	706b      	strb	r3, [r5, #1]
 800b91a:	1cab      	adds	r3, r5, #2
 800b91c:	68a2      	ldr	r2, [r4, #8]
 800b91e:	7852      	ldrb	r2, [r2, #1]
 800b920:	f803 2b01 	strb.w	r2, [r3], #1
 800b924:	68a2      	ldr	r2, [r4, #8]
 800b926:	7812      	ldrb	r2, [r2, #0]
 800b928:	701a      	strb	r2, [r3, #0]
 800b92a:	e7b4      	b.n	800b896 <ucdr_deserialize_uint32_t+0x72>
 800b92c:	4631      	mov	r1, r6
 800b92e:	463a      	mov	r2, r7
 800b930:	4628      	mov	r0, r5
 800b932:	f00e fd48 	bl	801a3c6 <memcpy>
 800b936:	68a1      	ldr	r1, [r4, #8]
 800b938:	464a      	mov	r2, r9
 800b93a:	19e8      	adds	r0, r5, r7
 800b93c:	f00e fd43 	bl	801a3c6 <memcpy>
 800b940:	e7a9      	b.n	800b896 <ucdr_deserialize_uint32_t+0x72>
 800b942:	bf00      	nop

0800b944 <ucdr_deserialize_endian_uint32_t>:
 800b944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b948:	460e      	mov	r6, r1
 800b94a:	2104      	movs	r1, #4
 800b94c:	4604      	mov	r4, r0
 800b94e:	4615      	mov	r5, r2
 800b950:	f000 ff10 	bl	800c774 <ucdr_buffer_alignment>
 800b954:	4601      	mov	r1, r0
 800b956:	4620      	mov	r0, r4
 800b958:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b95c:	f000 ff4e 	bl	800c7fc <ucdr_advance_buffer>
 800b960:	2104      	movs	r1, #4
 800b962:	4620      	mov	r0, r4
 800b964:	f000 fea6 	bl	800c6b4 <ucdr_check_buffer_available_for>
 800b968:	2800      	cmp	r0, #0
 800b96a:	d13c      	bne.n	800b9e6 <ucdr_deserialize_endian_uint32_t+0xa2>
 800b96c:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800b970:	42bb      	cmp	r3, r7
 800b972:	d933      	bls.n	800b9dc <ucdr_deserialize_endian_uint32_t+0x98>
 800b974:	eba3 0807 	sub.w	r8, r3, r7
 800b978:	60a3      	str	r3, [r4, #8]
 800b97a:	6923      	ldr	r3, [r4, #16]
 800b97c:	f1c8 0a04 	rsb	sl, r8, #4
 800b980:	4443      	add	r3, r8
 800b982:	6123      	str	r3, [r4, #16]
 800b984:	4651      	mov	r1, sl
 800b986:	4620      	mov	r0, r4
 800b988:	f000 fea0 	bl	800c6cc <ucdr_check_final_buffer_behavior>
 800b98c:	2800      	cmp	r0, #0
 800b98e:	d048      	beq.n	800ba22 <ucdr_deserialize_endian_uint32_t+0xde>
 800b990:	2e01      	cmp	r6, #1
 800b992:	d061      	beq.n	800ba58 <ucdr_deserialize_endian_uint32_t+0x114>
 800b994:	78fb      	ldrb	r3, [r7, #3]
 800b996:	702b      	strb	r3, [r5, #0]
 800b998:	f1b8 0f00 	cmp.w	r8, #0
 800b99c:	d050      	beq.n	800ba40 <ucdr_deserialize_endian_uint32_t+0xfc>
 800b99e:	78bb      	ldrb	r3, [r7, #2]
 800b9a0:	706b      	strb	r3, [r5, #1]
 800b9a2:	f1b8 0f01 	cmp.w	r8, #1
 800b9a6:	f105 0302 	add.w	r3, r5, #2
 800b9aa:	d04d      	beq.n	800ba48 <ucdr_deserialize_endian_uint32_t+0x104>
 800b9ac:	787b      	ldrb	r3, [r7, #1]
 800b9ae:	70ab      	strb	r3, [r5, #2]
 800b9b0:	f1b8 0f02 	cmp.w	r8, #2
 800b9b4:	f105 0303 	add.w	r3, r5, #3
 800b9b8:	d04a      	beq.n	800ba50 <ucdr_deserialize_endian_uint32_t+0x10c>
 800b9ba:	783b      	ldrb	r3, [r7, #0]
 800b9bc:	70eb      	strb	r3, [r5, #3]
 800b9be:	6923      	ldr	r3, [r4, #16]
 800b9c0:	68a2      	ldr	r2, [r4, #8]
 800b9c2:	7da0      	ldrb	r0, [r4, #22]
 800b9c4:	2104      	movs	r1, #4
 800b9c6:	3304      	adds	r3, #4
 800b9c8:	4452      	add	r2, sl
 800b9ca:	eba3 0308 	sub.w	r3, r3, r8
 800b9ce:	7561      	strb	r1, [r4, #21]
 800b9d0:	60a2      	str	r2, [r4, #8]
 800b9d2:	6123      	str	r3, [r4, #16]
 800b9d4:	f080 0001 	eor.w	r0, r0, #1
 800b9d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9dc:	2104      	movs	r1, #4
 800b9de:	4620      	mov	r0, r4
 800b9e0:	f000 fe74 	bl	800c6cc <ucdr_check_final_buffer_behavior>
 800b9e4:	b1a8      	cbz	r0, 800ba12 <ucdr_deserialize_endian_uint32_t+0xce>
 800b9e6:	2e01      	cmp	r6, #1
 800b9e8:	68a3      	ldr	r3, [r4, #8]
 800b9ea:	d017      	beq.n	800ba1c <ucdr_deserialize_endian_uint32_t+0xd8>
 800b9ec:	78db      	ldrb	r3, [r3, #3]
 800b9ee:	702b      	strb	r3, [r5, #0]
 800b9f0:	68a3      	ldr	r3, [r4, #8]
 800b9f2:	789b      	ldrb	r3, [r3, #2]
 800b9f4:	706b      	strb	r3, [r5, #1]
 800b9f6:	68a3      	ldr	r3, [r4, #8]
 800b9f8:	785b      	ldrb	r3, [r3, #1]
 800b9fa:	70ab      	strb	r3, [r5, #2]
 800b9fc:	68a3      	ldr	r3, [r4, #8]
 800b9fe:	781b      	ldrb	r3, [r3, #0]
 800ba00:	70eb      	strb	r3, [r5, #3]
 800ba02:	68a2      	ldr	r2, [r4, #8]
 800ba04:	6923      	ldr	r3, [r4, #16]
 800ba06:	3204      	adds	r2, #4
 800ba08:	3304      	adds	r3, #4
 800ba0a:	2104      	movs	r1, #4
 800ba0c:	60a2      	str	r2, [r4, #8]
 800ba0e:	6123      	str	r3, [r4, #16]
 800ba10:	7561      	strb	r1, [r4, #21]
 800ba12:	7da0      	ldrb	r0, [r4, #22]
 800ba14:	f080 0001 	eor.w	r0, r0, #1
 800ba18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	602b      	str	r3, [r5, #0]
 800ba20:	e7ef      	b.n	800ba02 <ucdr_deserialize_endian_uint32_t+0xbe>
 800ba22:	68a2      	ldr	r2, [r4, #8]
 800ba24:	6923      	ldr	r3, [r4, #16]
 800ba26:	7da0      	ldrb	r0, [r4, #22]
 800ba28:	f884 9015 	strb.w	r9, [r4, #21]
 800ba2c:	eba2 0208 	sub.w	r2, r2, r8
 800ba30:	eba3 0308 	sub.w	r3, r3, r8
 800ba34:	60a2      	str	r2, [r4, #8]
 800ba36:	6123      	str	r3, [r4, #16]
 800ba38:	f080 0001 	eor.w	r0, r0, #1
 800ba3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba40:	68a3      	ldr	r3, [r4, #8]
 800ba42:	789b      	ldrb	r3, [r3, #2]
 800ba44:	706b      	strb	r3, [r5, #1]
 800ba46:	1cab      	adds	r3, r5, #2
 800ba48:	68a2      	ldr	r2, [r4, #8]
 800ba4a:	7852      	ldrb	r2, [r2, #1]
 800ba4c:	f803 2b01 	strb.w	r2, [r3], #1
 800ba50:	68a2      	ldr	r2, [r4, #8]
 800ba52:	7812      	ldrb	r2, [r2, #0]
 800ba54:	701a      	strb	r2, [r3, #0]
 800ba56:	e7b2      	b.n	800b9be <ucdr_deserialize_endian_uint32_t+0x7a>
 800ba58:	4639      	mov	r1, r7
 800ba5a:	4642      	mov	r2, r8
 800ba5c:	4628      	mov	r0, r5
 800ba5e:	f00e fcb2 	bl	801a3c6 <memcpy>
 800ba62:	68a1      	ldr	r1, [r4, #8]
 800ba64:	4652      	mov	r2, sl
 800ba66:	eb05 0008 	add.w	r0, r5, r8
 800ba6a:	f00e fcac 	bl	801a3c6 <memcpy>
 800ba6e:	e7a6      	b.n	800b9be <ucdr_deserialize_endian_uint32_t+0x7a>

0800ba70 <ucdr_serialize_uint64_t>:
 800ba70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba74:	2108      	movs	r1, #8
 800ba76:	b082      	sub	sp, #8
 800ba78:	4604      	mov	r4, r0
 800ba7a:	e9cd 2300 	strd	r2, r3, [sp]
 800ba7e:	f000 fe79 	bl	800c774 <ucdr_buffer_alignment>
 800ba82:	4601      	mov	r1, r0
 800ba84:	4620      	mov	r0, r4
 800ba86:	7d67      	ldrb	r7, [r4, #21]
 800ba88:	f000 feb8 	bl	800c7fc <ucdr_advance_buffer>
 800ba8c:	2108      	movs	r1, #8
 800ba8e:	4620      	mov	r0, r4
 800ba90:	f000 fe10 	bl	800c6b4 <ucdr_check_buffer_available_for>
 800ba94:	2800      	cmp	r0, #0
 800ba96:	d14e      	bne.n	800bb36 <ucdr_serialize_uint64_t+0xc6>
 800ba98:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ba9c:	42ab      	cmp	r3, r5
 800ba9e:	d945      	bls.n	800bb2c <ucdr_serialize_uint64_t+0xbc>
 800baa0:	1b5e      	subs	r6, r3, r5
 800baa2:	60a3      	str	r3, [r4, #8]
 800baa4:	6923      	ldr	r3, [r4, #16]
 800baa6:	f1c6 0808 	rsb	r8, r6, #8
 800baaa:	4433      	add	r3, r6
 800baac:	6123      	str	r3, [r4, #16]
 800baae:	4641      	mov	r1, r8
 800bab0:	4620      	mov	r0, r4
 800bab2:	f000 fe0b 	bl	800c6cc <ucdr_check_final_buffer_behavior>
 800bab6:	2800      	cmp	r0, #0
 800bab8:	d074      	beq.n	800bba4 <ucdr_serialize_uint64_t+0x134>
 800baba:	7d23      	ldrb	r3, [r4, #20]
 800babc:	2b01      	cmp	r3, #1
 800babe:	f000 809b 	beq.w	800bbf8 <ucdr_serialize_uint64_t+0x188>
 800bac2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bac6:	702b      	strb	r3, [r5, #0]
 800bac8:	2e00      	cmp	r6, #0
 800baca:	d078      	beq.n	800bbbe <ucdr_serialize_uint64_t+0x14e>
 800bacc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bad0:	706b      	strb	r3, [r5, #1]
 800bad2:	2e01      	cmp	r6, #1
 800bad4:	d077      	beq.n	800bbc6 <ucdr_serialize_uint64_t+0x156>
 800bad6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bada:	70ab      	strb	r3, [r5, #2]
 800badc:	2e02      	cmp	r6, #2
 800bade:	d076      	beq.n	800bbce <ucdr_serialize_uint64_t+0x15e>
 800bae0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bae4:	70eb      	strb	r3, [r5, #3]
 800bae6:	2e03      	cmp	r6, #3
 800bae8:	d075      	beq.n	800bbd6 <ucdr_serialize_uint64_t+0x166>
 800baea:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800baee:	712b      	strb	r3, [r5, #4]
 800baf0:	2e04      	cmp	r6, #4
 800baf2:	d074      	beq.n	800bbde <ucdr_serialize_uint64_t+0x16e>
 800baf4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800baf8:	716b      	strb	r3, [r5, #5]
 800bafa:	2e05      	cmp	r6, #5
 800bafc:	d073      	beq.n	800bbe6 <ucdr_serialize_uint64_t+0x176>
 800bafe:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800bb02:	71ab      	strb	r3, [r5, #6]
 800bb04:	2e06      	cmp	r6, #6
 800bb06:	d072      	beq.n	800bbee <ucdr_serialize_uint64_t+0x17e>
 800bb08:	f89d 3000 	ldrb.w	r3, [sp]
 800bb0c:	71eb      	strb	r3, [r5, #7]
 800bb0e:	6923      	ldr	r3, [r4, #16]
 800bb10:	68a2      	ldr	r2, [r4, #8]
 800bb12:	7da0      	ldrb	r0, [r4, #22]
 800bb14:	3308      	adds	r3, #8
 800bb16:	1b9e      	subs	r6, r3, r6
 800bb18:	4442      	add	r2, r8
 800bb1a:	2308      	movs	r3, #8
 800bb1c:	f080 0001 	eor.w	r0, r0, #1
 800bb20:	60a2      	str	r2, [r4, #8]
 800bb22:	6126      	str	r6, [r4, #16]
 800bb24:	7563      	strb	r3, [r4, #21]
 800bb26:	b002      	add	sp, #8
 800bb28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb2c:	2108      	movs	r1, #8
 800bb2e:	4620      	mov	r0, r4
 800bb30:	f000 fdcc 	bl	800c6cc <ucdr_check_final_buffer_behavior>
 800bb34:	b350      	cbz	r0, 800bb8c <ucdr_serialize_uint64_t+0x11c>
 800bb36:	7d23      	ldrb	r3, [r4, #20]
 800bb38:	2b01      	cmp	r3, #1
 800bb3a:	d02d      	beq.n	800bb98 <ucdr_serialize_uint64_t+0x128>
 800bb3c:	68a3      	ldr	r3, [r4, #8]
 800bb3e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bb42:	701a      	strb	r2, [r3, #0]
 800bb44:	68a3      	ldr	r3, [r4, #8]
 800bb46:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bb4a:	705a      	strb	r2, [r3, #1]
 800bb4c:	68a3      	ldr	r3, [r4, #8]
 800bb4e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bb52:	709a      	strb	r2, [r3, #2]
 800bb54:	68a3      	ldr	r3, [r4, #8]
 800bb56:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bb5a:	70da      	strb	r2, [r3, #3]
 800bb5c:	68a3      	ldr	r3, [r4, #8]
 800bb5e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800bb62:	711a      	strb	r2, [r3, #4]
 800bb64:	68a3      	ldr	r3, [r4, #8]
 800bb66:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800bb6a:	715a      	strb	r2, [r3, #5]
 800bb6c:	68a3      	ldr	r3, [r4, #8]
 800bb6e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800bb72:	719a      	strb	r2, [r3, #6]
 800bb74:	68a3      	ldr	r3, [r4, #8]
 800bb76:	f89d 2000 	ldrb.w	r2, [sp]
 800bb7a:	71da      	strb	r2, [r3, #7]
 800bb7c:	68a2      	ldr	r2, [r4, #8]
 800bb7e:	6923      	ldr	r3, [r4, #16]
 800bb80:	3208      	adds	r2, #8
 800bb82:	3308      	adds	r3, #8
 800bb84:	2108      	movs	r1, #8
 800bb86:	60a2      	str	r2, [r4, #8]
 800bb88:	6123      	str	r3, [r4, #16]
 800bb8a:	7561      	strb	r1, [r4, #21]
 800bb8c:	7da0      	ldrb	r0, [r4, #22]
 800bb8e:	f080 0001 	eor.w	r0, r0, #1
 800bb92:	b002      	add	sp, #8
 800bb94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb98:	466b      	mov	r3, sp
 800bb9a:	cb03      	ldmia	r3!, {r0, r1}
 800bb9c:	68a3      	ldr	r3, [r4, #8]
 800bb9e:	6018      	str	r0, [r3, #0]
 800bba0:	6059      	str	r1, [r3, #4]
 800bba2:	e7eb      	b.n	800bb7c <ucdr_serialize_uint64_t+0x10c>
 800bba4:	68a2      	ldr	r2, [r4, #8]
 800bba6:	6923      	ldr	r3, [r4, #16]
 800bba8:	7da0      	ldrb	r0, [r4, #22]
 800bbaa:	7567      	strb	r7, [r4, #21]
 800bbac:	1b92      	subs	r2, r2, r6
 800bbae:	1b9b      	subs	r3, r3, r6
 800bbb0:	f080 0001 	eor.w	r0, r0, #1
 800bbb4:	60a2      	str	r2, [r4, #8]
 800bbb6:	6123      	str	r3, [r4, #16]
 800bbb8:	b002      	add	sp, #8
 800bbba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbbe:	68a3      	ldr	r3, [r4, #8]
 800bbc0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bbc4:	701a      	strb	r2, [r3, #0]
 800bbc6:	68a3      	ldr	r3, [r4, #8]
 800bbc8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bbcc:	701a      	strb	r2, [r3, #0]
 800bbce:	68a3      	ldr	r3, [r4, #8]
 800bbd0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bbd4:	701a      	strb	r2, [r3, #0]
 800bbd6:	68a3      	ldr	r3, [r4, #8]
 800bbd8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800bbdc:	701a      	strb	r2, [r3, #0]
 800bbde:	68a3      	ldr	r3, [r4, #8]
 800bbe0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800bbe4:	701a      	strb	r2, [r3, #0]
 800bbe6:	68a3      	ldr	r3, [r4, #8]
 800bbe8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800bbec:	701a      	strb	r2, [r3, #0]
 800bbee:	68a3      	ldr	r3, [r4, #8]
 800bbf0:	f89d 2000 	ldrb.w	r2, [sp]
 800bbf4:	701a      	strb	r2, [r3, #0]
 800bbf6:	e78a      	b.n	800bb0e <ucdr_serialize_uint64_t+0x9e>
 800bbf8:	4628      	mov	r0, r5
 800bbfa:	466d      	mov	r5, sp
 800bbfc:	4629      	mov	r1, r5
 800bbfe:	4632      	mov	r2, r6
 800bc00:	f00e fbe1 	bl	801a3c6 <memcpy>
 800bc04:	68a0      	ldr	r0, [r4, #8]
 800bc06:	4642      	mov	r2, r8
 800bc08:	19a9      	adds	r1, r5, r6
 800bc0a:	f00e fbdc 	bl	801a3c6 <memcpy>
 800bc0e:	e77e      	b.n	800bb0e <ucdr_serialize_uint64_t+0x9e>

0800bc10 <ucdr_serialize_int16_t>:
 800bc10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc14:	b082      	sub	sp, #8
 800bc16:	460b      	mov	r3, r1
 800bc18:	2102      	movs	r1, #2
 800bc1a:	4604      	mov	r4, r0
 800bc1c:	f8ad 3006 	strh.w	r3, [sp, #6]
 800bc20:	f000 fda8 	bl	800c774 <ucdr_buffer_alignment>
 800bc24:	4601      	mov	r1, r0
 800bc26:	4620      	mov	r0, r4
 800bc28:	7d67      	ldrb	r7, [r4, #21]
 800bc2a:	f000 fde7 	bl	800c7fc <ucdr_advance_buffer>
 800bc2e:	2102      	movs	r1, #2
 800bc30:	4620      	mov	r0, r4
 800bc32:	f000 fd3f 	bl	800c6b4 <ucdr_check_buffer_available_for>
 800bc36:	bb78      	cbnz	r0, 800bc98 <ucdr_serialize_int16_t+0x88>
 800bc38:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bc3c:	42ab      	cmp	r3, r5
 800bc3e:	d926      	bls.n	800bc8e <ucdr_serialize_int16_t+0x7e>
 800bc40:	1b5e      	subs	r6, r3, r5
 800bc42:	60a3      	str	r3, [r4, #8]
 800bc44:	6923      	ldr	r3, [r4, #16]
 800bc46:	f1c6 0802 	rsb	r8, r6, #2
 800bc4a:	4433      	add	r3, r6
 800bc4c:	6123      	str	r3, [r4, #16]
 800bc4e:	4641      	mov	r1, r8
 800bc50:	4620      	mov	r0, r4
 800bc52:	f000 fd3b 	bl	800c6cc <ucdr_check_final_buffer_behavior>
 800bc56:	2800      	cmp	r0, #0
 800bc58:	d03b      	beq.n	800bcd2 <ucdr_serialize_int16_t+0xc2>
 800bc5a:	7d23      	ldrb	r3, [r4, #20]
 800bc5c:	2b01      	cmp	r3, #1
 800bc5e:	d04a      	beq.n	800bcf6 <ucdr_serialize_int16_t+0xe6>
 800bc60:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bc64:	702b      	strb	r3, [r5, #0]
 800bc66:	2e00      	cmp	r6, #0
 800bc68:	d040      	beq.n	800bcec <ucdr_serialize_int16_t+0xdc>
 800bc6a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bc6e:	706b      	strb	r3, [r5, #1]
 800bc70:	6923      	ldr	r3, [r4, #16]
 800bc72:	68a2      	ldr	r2, [r4, #8]
 800bc74:	7da0      	ldrb	r0, [r4, #22]
 800bc76:	3302      	adds	r3, #2
 800bc78:	1b9e      	subs	r6, r3, r6
 800bc7a:	4442      	add	r2, r8
 800bc7c:	2302      	movs	r3, #2
 800bc7e:	f080 0001 	eor.w	r0, r0, #1
 800bc82:	60a2      	str	r2, [r4, #8]
 800bc84:	6126      	str	r6, [r4, #16]
 800bc86:	7563      	strb	r3, [r4, #21]
 800bc88:	b002      	add	sp, #8
 800bc8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc8e:	2102      	movs	r1, #2
 800bc90:	4620      	mov	r0, r4
 800bc92:	f000 fd1b 	bl	800c6cc <ucdr_check_final_buffer_behavior>
 800bc96:	b190      	cbz	r0, 800bcbe <ucdr_serialize_int16_t+0xae>
 800bc98:	7d23      	ldrb	r3, [r4, #20]
 800bc9a:	2b01      	cmp	r3, #1
 800bc9c:	68a3      	ldr	r3, [r4, #8]
 800bc9e:	d014      	beq.n	800bcca <ucdr_serialize_int16_t+0xba>
 800bca0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bca4:	701a      	strb	r2, [r3, #0]
 800bca6:	68a3      	ldr	r3, [r4, #8]
 800bca8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bcac:	705a      	strb	r2, [r3, #1]
 800bcae:	68a2      	ldr	r2, [r4, #8]
 800bcb0:	6923      	ldr	r3, [r4, #16]
 800bcb2:	3202      	adds	r2, #2
 800bcb4:	3302      	adds	r3, #2
 800bcb6:	2102      	movs	r1, #2
 800bcb8:	60a2      	str	r2, [r4, #8]
 800bcba:	6123      	str	r3, [r4, #16]
 800bcbc:	7561      	strb	r1, [r4, #21]
 800bcbe:	7da0      	ldrb	r0, [r4, #22]
 800bcc0:	f080 0001 	eor.w	r0, r0, #1
 800bcc4:	b002      	add	sp, #8
 800bcc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcca:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800bcce:	801a      	strh	r2, [r3, #0]
 800bcd0:	e7ed      	b.n	800bcae <ucdr_serialize_int16_t+0x9e>
 800bcd2:	68a2      	ldr	r2, [r4, #8]
 800bcd4:	6923      	ldr	r3, [r4, #16]
 800bcd6:	7da0      	ldrb	r0, [r4, #22]
 800bcd8:	7567      	strb	r7, [r4, #21]
 800bcda:	1b92      	subs	r2, r2, r6
 800bcdc:	1b9b      	subs	r3, r3, r6
 800bcde:	f080 0001 	eor.w	r0, r0, #1
 800bce2:	60a2      	str	r2, [r4, #8]
 800bce4:	6123      	str	r3, [r4, #16]
 800bce6:	b002      	add	sp, #8
 800bce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcec:	68a3      	ldr	r3, [r4, #8]
 800bcee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bcf2:	701a      	strb	r2, [r3, #0]
 800bcf4:	e7bc      	b.n	800bc70 <ucdr_serialize_int16_t+0x60>
 800bcf6:	4628      	mov	r0, r5
 800bcf8:	f10d 0506 	add.w	r5, sp, #6
 800bcfc:	4629      	mov	r1, r5
 800bcfe:	4632      	mov	r2, r6
 800bd00:	f00e fb61 	bl	801a3c6 <memcpy>
 800bd04:	68a0      	ldr	r0, [r4, #8]
 800bd06:	4642      	mov	r2, r8
 800bd08:	19a9      	adds	r1, r5, r6
 800bd0a:	f00e fb5c 	bl	801a3c6 <memcpy>
 800bd0e:	e7af      	b.n	800bc70 <ucdr_serialize_int16_t+0x60>

0800bd10 <ucdr_deserialize_int16_t>:
 800bd10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd14:	460d      	mov	r5, r1
 800bd16:	2102      	movs	r1, #2
 800bd18:	4604      	mov	r4, r0
 800bd1a:	f000 fd2b 	bl	800c774 <ucdr_buffer_alignment>
 800bd1e:	4601      	mov	r1, r0
 800bd20:	4620      	mov	r0, r4
 800bd22:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bd26:	f000 fd69 	bl	800c7fc <ucdr_advance_buffer>
 800bd2a:	2102      	movs	r1, #2
 800bd2c:	4620      	mov	r0, r4
 800bd2e:	f000 fcc1 	bl	800c6b4 <ucdr_check_buffer_available_for>
 800bd32:	bb60      	cbnz	r0, 800bd8e <ucdr_deserialize_int16_t+0x7e>
 800bd34:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800bd38:	42be      	cmp	r6, r7
 800bd3a:	d923      	bls.n	800bd84 <ucdr_deserialize_int16_t+0x74>
 800bd3c:	6923      	ldr	r3, [r4, #16]
 800bd3e:	60a6      	str	r6, [r4, #8]
 800bd40:	1bf6      	subs	r6, r6, r7
 800bd42:	4433      	add	r3, r6
 800bd44:	f1c6 0902 	rsb	r9, r6, #2
 800bd48:	6123      	str	r3, [r4, #16]
 800bd4a:	4649      	mov	r1, r9
 800bd4c:	4620      	mov	r0, r4
 800bd4e:	f000 fcbd 	bl	800c6cc <ucdr_check_final_buffer_behavior>
 800bd52:	2800      	cmp	r0, #0
 800bd54:	d034      	beq.n	800bdc0 <ucdr_deserialize_int16_t+0xb0>
 800bd56:	7d23      	ldrb	r3, [r4, #20]
 800bd58:	2b01      	cmp	r3, #1
 800bd5a:	d042      	beq.n	800bde2 <ucdr_deserialize_int16_t+0xd2>
 800bd5c:	787b      	ldrb	r3, [r7, #1]
 800bd5e:	702b      	strb	r3, [r5, #0]
 800bd60:	2e00      	cmp	r6, #0
 800bd62:	d03a      	beq.n	800bdda <ucdr_deserialize_int16_t+0xca>
 800bd64:	783b      	ldrb	r3, [r7, #0]
 800bd66:	706b      	strb	r3, [r5, #1]
 800bd68:	6923      	ldr	r3, [r4, #16]
 800bd6a:	68a2      	ldr	r2, [r4, #8]
 800bd6c:	7da0      	ldrb	r0, [r4, #22]
 800bd6e:	2102      	movs	r1, #2
 800bd70:	3302      	adds	r3, #2
 800bd72:	444a      	add	r2, r9
 800bd74:	1b9b      	subs	r3, r3, r6
 800bd76:	7561      	strb	r1, [r4, #21]
 800bd78:	60a2      	str	r2, [r4, #8]
 800bd7a:	6123      	str	r3, [r4, #16]
 800bd7c:	f080 0001 	eor.w	r0, r0, #1
 800bd80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd84:	2102      	movs	r1, #2
 800bd86:	4620      	mov	r0, r4
 800bd88:	f000 fca0 	bl	800c6cc <ucdr_check_final_buffer_behavior>
 800bd8c:	b180      	cbz	r0, 800bdb0 <ucdr_deserialize_int16_t+0xa0>
 800bd8e:	7d23      	ldrb	r3, [r4, #20]
 800bd90:	2b01      	cmp	r3, #1
 800bd92:	68a3      	ldr	r3, [r4, #8]
 800bd94:	d011      	beq.n	800bdba <ucdr_deserialize_int16_t+0xaa>
 800bd96:	785b      	ldrb	r3, [r3, #1]
 800bd98:	702b      	strb	r3, [r5, #0]
 800bd9a:	68a3      	ldr	r3, [r4, #8]
 800bd9c:	781b      	ldrb	r3, [r3, #0]
 800bd9e:	706b      	strb	r3, [r5, #1]
 800bda0:	68a2      	ldr	r2, [r4, #8]
 800bda2:	6923      	ldr	r3, [r4, #16]
 800bda4:	3202      	adds	r2, #2
 800bda6:	3302      	adds	r3, #2
 800bda8:	2102      	movs	r1, #2
 800bdaa:	60a2      	str	r2, [r4, #8]
 800bdac:	6123      	str	r3, [r4, #16]
 800bdae:	7561      	strb	r1, [r4, #21]
 800bdb0:	7da0      	ldrb	r0, [r4, #22]
 800bdb2:	f080 0001 	eor.w	r0, r0, #1
 800bdb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdba:	881b      	ldrh	r3, [r3, #0]
 800bdbc:	802b      	strh	r3, [r5, #0]
 800bdbe:	e7ef      	b.n	800bda0 <ucdr_deserialize_int16_t+0x90>
 800bdc0:	68a2      	ldr	r2, [r4, #8]
 800bdc2:	6923      	ldr	r3, [r4, #16]
 800bdc4:	7da0      	ldrb	r0, [r4, #22]
 800bdc6:	f884 8015 	strb.w	r8, [r4, #21]
 800bdca:	1b92      	subs	r2, r2, r6
 800bdcc:	1b9b      	subs	r3, r3, r6
 800bdce:	60a2      	str	r2, [r4, #8]
 800bdd0:	6123      	str	r3, [r4, #16]
 800bdd2:	f080 0001 	eor.w	r0, r0, #1
 800bdd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdda:	68a3      	ldr	r3, [r4, #8]
 800bddc:	781b      	ldrb	r3, [r3, #0]
 800bdde:	706b      	strb	r3, [r5, #1]
 800bde0:	e7c2      	b.n	800bd68 <ucdr_deserialize_int16_t+0x58>
 800bde2:	4639      	mov	r1, r7
 800bde4:	4632      	mov	r2, r6
 800bde6:	4628      	mov	r0, r5
 800bde8:	f00e faed 	bl	801a3c6 <memcpy>
 800bdec:	68a1      	ldr	r1, [r4, #8]
 800bdee:	464a      	mov	r2, r9
 800bdf0:	19a8      	adds	r0, r5, r6
 800bdf2:	f00e fae8 	bl	801a3c6 <memcpy>
 800bdf6:	e7b7      	b.n	800bd68 <ucdr_deserialize_int16_t+0x58>

0800bdf8 <ucdr_serialize_int32_t>:
 800bdf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdfc:	b082      	sub	sp, #8
 800bdfe:	4604      	mov	r4, r0
 800be00:	9101      	str	r1, [sp, #4]
 800be02:	2104      	movs	r1, #4
 800be04:	f000 fcb6 	bl	800c774 <ucdr_buffer_alignment>
 800be08:	4601      	mov	r1, r0
 800be0a:	4620      	mov	r0, r4
 800be0c:	7d67      	ldrb	r7, [r4, #21]
 800be0e:	f000 fcf5 	bl	800c7fc <ucdr_advance_buffer>
 800be12:	2104      	movs	r1, #4
 800be14:	4620      	mov	r0, r4
 800be16:	f000 fc4d 	bl	800c6b4 <ucdr_check_buffer_available_for>
 800be1a:	2800      	cmp	r0, #0
 800be1c:	d139      	bne.n	800be92 <ucdr_serialize_int32_t+0x9a>
 800be1e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800be22:	42ab      	cmp	r3, r5
 800be24:	d930      	bls.n	800be88 <ucdr_serialize_int32_t+0x90>
 800be26:	1b5e      	subs	r6, r3, r5
 800be28:	60a3      	str	r3, [r4, #8]
 800be2a:	6923      	ldr	r3, [r4, #16]
 800be2c:	f1c6 0804 	rsb	r8, r6, #4
 800be30:	4433      	add	r3, r6
 800be32:	6123      	str	r3, [r4, #16]
 800be34:	4641      	mov	r1, r8
 800be36:	4620      	mov	r0, r4
 800be38:	f000 fc48 	bl	800c6cc <ucdr_check_final_buffer_behavior>
 800be3c:	2800      	cmp	r0, #0
 800be3e:	d04c      	beq.n	800beda <ucdr_serialize_int32_t+0xe2>
 800be40:	7d23      	ldrb	r3, [r4, #20]
 800be42:	2b01      	cmp	r3, #1
 800be44:	d063      	beq.n	800bf0e <ucdr_serialize_int32_t+0x116>
 800be46:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800be4a:	702b      	strb	r3, [r5, #0]
 800be4c:	2e00      	cmp	r6, #0
 800be4e:	d051      	beq.n	800bef4 <ucdr_serialize_int32_t+0xfc>
 800be50:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800be54:	706b      	strb	r3, [r5, #1]
 800be56:	2e01      	cmp	r6, #1
 800be58:	d050      	beq.n	800befc <ucdr_serialize_int32_t+0x104>
 800be5a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800be5e:	70ab      	strb	r3, [r5, #2]
 800be60:	2e02      	cmp	r6, #2
 800be62:	d04f      	beq.n	800bf04 <ucdr_serialize_int32_t+0x10c>
 800be64:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800be68:	70eb      	strb	r3, [r5, #3]
 800be6a:	6923      	ldr	r3, [r4, #16]
 800be6c:	68a2      	ldr	r2, [r4, #8]
 800be6e:	7da0      	ldrb	r0, [r4, #22]
 800be70:	3304      	adds	r3, #4
 800be72:	1b9e      	subs	r6, r3, r6
 800be74:	4442      	add	r2, r8
 800be76:	2304      	movs	r3, #4
 800be78:	f080 0001 	eor.w	r0, r0, #1
 800be7c:	60a2      	str	r2, [r4, #8]
 800be7e:	6126      	str	r6, [r4, #16]
 800be80:	7563      	strb	r3, [r4, #21]
 800be82:	b002      	add	sp, #8
 800be84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be88:	2104      	movs	r1, #4
 800be8a:	4620      	mov	r0, r4
 800be8c:	f000 fc1e 	bl	800c6cc <ucdr_check_final_buffer_behavior>
 800be90:	b1d0      	cbz	r0, 800bec8 <ucdr_serialize_int32_t+0xd0>
 800be92:	7d23      	ldrb	r3, [r4, #20]
 800be94:	2b01      	cmp	r3, #1
 800be96:	68a3      	ldr	r3, [r4, #8]
 800be98:	d01c      	beq.n	800bed4 <ucdr_serialize_int32_t+0xdc>
 800be9a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800be9e:	701a      	strb	r2, [r3, #0]
 800bea0:	68a3      	ldr	r3, [r4, #8]
 800bea2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bea6:	705a      	strb	r2, [r3, #1]
 800bea8:	68a3      	ldr	r3, [r4, #8]
 800beaa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800beae:	709a      	strb	r2, [r3, #2]
 800beb0:	68a3      	ldr	r3, [r4, #8]
 800beb2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800beb6:	70da      	strb	r2, [r3, #3]
 800beb8:	68a2      	ldr	r2, [r4, #8]
 800beba:	6923      	ldr	r3, [r4, #16]
 800bebc:	3204      	adds	r2, #4
 800bebe:	3304      	adds	r3, #4
 800bec0:	2104      	movs	r1, #4
 800bec2:	60a2      	str	r2, [r4, #8]
 800bec4:	6123      	str	r3, [r4, #16]
 800bec6:	7561      	strb	r1, [r4, #21]
 800bec8:	7da0      	ldrb	r0, [r4, #22]
 800beca:	f080 0001 	eor.w	r0, r0, #1
 800bece:	b002      	add	sp, #8
 800bed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bed4:	9a01      	ldr	r2, [sp, #4]
 800bed6:	601a      	str	r2, [r3, #0]
 800bed8:	e7ee      	b.n	800beb8 <ucdr_serialize_int32_t+0xc0>
 800beda:	68a2      	ldr	r2, [r4, #8]
 800bedc:	6923      	ldr	r3, [r4, #16]
 800bede:	7da0      	ldrb	r0, [r4, #22]
 800bee0:	7567      	strb	r7, [r4, #21]
 800bee2:	1b92      	subs	r2, r2, r6
 800bee4:	1b9b      	subs	r3, r3, r6
 800bee6:	f080 0001 	eor.w	r0, r0, #1
 800beea:	60a2      	str	r2, [r4, #8]
 800beec:	6123      	str	r3, [r4, #16]
 800beee:	b002      	add	sp, #8
 800bef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bef4:	68a3      	ldr	r3, [r4, #8]
 800bef6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800befa:	701a      	strb	r2, [r3, #0]
 800befc:	68a3      	ldr	r3, [r4, #8]
 800befe:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bf02:	701a      	strb	r2, [r3, #0]
 800bf04:	68a3      	ldr	r3, [r4, #8]
 800bf06:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bf0a:	701a      	strb	r2, [r3, #0]
 800bf0c:	e7ad      	b.n	800be6a <ucdr_serialize_int32_t+0x72>
 800bf0e:	4628      	mov	r0, r5
 800bf10:	ad01      	add	r5, sp, #4
 800bf12:	4629      	mov	r1, r5
 800bf14:	4632      	mov	r2, r6
 800bf16:	f00e fa56 	bl	801a3c6 <memcpy>
 800bf1a:	68a0      	ldr	r0, [r4, #8]
 800bf1c:	4642      	mov	r2, r8
 800bf1e:	19a9      	adds	r1, r5, r6
 800bf20:	f00e fa51 	bl	801a3c6 <memcpy>
 800bf24:	e7a1      	b.n	800be6a <ucdr_serialize_int32_t+0x72>
 800bf26:	bf00      	nop

0800bf28 <ucdr_deserialize_int32_t>:
 800bf28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf2c:	460d      	mov	r5, r1
 800bf2e:	2104      	movs	r1, #4
 800bf30:	4604      	mov	r4, r0
 800bf32:	f000 fc1f 	bl	800c774 <ucdr_buffer_alignment>
 800bf36:	4601      	mov	r1, r0
 800bf38:	4620      	mov	r0, r4
 800bf3a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bf3e:	f000 fc5d 	bl	800c7fc <ucdr_advance_buffer>
 800bf42:	2104      	movs	r1, #4
 800bf44:	4620      	mov	r0, r4
 800bf46:	f000 fbb5 	bl	800c6b4 <ucdr_check_buffer_available_for>
 800bf4a:	2800      	cmp	r0, #0
 800bf4c:	d138      	bne.n	800bfc0 <ucdr_deserialize_int32_t+0x98>
 800bf4e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800bf52:	42b7      	cmp	r7, r6
 800bf54:	d92f      	bls.n	800bfb6 <ucdr_deserialize_int32_t+0x8e>
 800bf56:	6923      	ldr	r3, [r4, #16]
 800bf58:	60a7      	str	r7, [r4, #8]
 800bf5a:	1bbf      	subs	r7, r7, r6
 800bf5c:	443b      	add	r3, r7
 800bf5e:	f1c7 0904 	rsb	r9, r7, #4
 800bf62:	6123      	str	r3, [r4, #16]
 800bf64:	4649      	mov	r1, r9
 800bf66:	4620      	mov	r0, r4
 800bf68:	f000 fbb0 	bl	800c6cc <ucdr_check_final_buffer_behavior>
 800bf6c:	2800      	cmp	r0, #0
 800bf6e:	d046      	beq.n	800bffe <ucdr_deserialize_int32_t+0xd6>
 800bf70:	7d23      	ldrb	r3, [r4, #20]
 800bf72:	2b01      	cmp	r3, #1
 800bf74:	d05c      	beq.n	800c030 <ucdr_deserialize_int32_t+0x108>
 800bf76:	78f3      	ldrb	r3, [r6, #3]
 800bf78:	702b      	strb	r3, [r5, #0]
 800bf7a:	2f00      	cmp	r7, #0
 800bf7c:	d04c      	beq.n	800c018 <ucdr_deserialize_int32_t+0xf0>
 800bf7e:	78b3      	ldrb	r3, [r6, #2]
 800bf80:	706b      	strb	r3, [r5, #1]
 800bf82:	2f01      	cmp	r7, #1
 800bf84:	f105 0302 	add.w	r3, r5, #2
 800bf88:	d04a      	beq.n	800c020 <ucdr_deserialize_int32_t+0xf8>
 800bf8a:	7873      	ldrb	r3, [r6, #1]
 800bf8c:	70ab      	strb	r3, [r5, #2]
 800bf8e:	2f02      	cmp	r7, #2
 800bf90:	f105 0303 	add.w	r3, r5, #3
 800bf94:	d048      	beq.n	800c028 <ucdr_deserialize_int32_t+0x100>
 800bf96:	7833      	ldrb	r3, [r6, #0]
 800bf98:	70eb      	strb	r3, [r5, #3]
 800bf9a:	6923      	ldr	r3, [r4, #16]
 800bf9c:	68a2      	ldr	r2, [r4, #8]
 800bf9e:	7da0      	ldrb	r0, [r4, #22]
 800bfa0:	2104      	movs	r1, #4
 800bfa2:	3304      	adds	r3, #4
 800bfa4:	444a      	add	r2, r9
 800bfa6:	1bdb      	subs	r3, r3, r7
 800bfa8:	7561      	strb	r1, [r4, #21]
 800bfaa:	60a2      	str	r2, [r4, #8]
 800bfac:	6123      	str	r3, [r4, #16]
 800bfae:	f080 0001 	eor.w	r0, r0, #1
 800bfb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfb6:	2104      	movs	r1, #4
 800bfb8:	4620      	mov	r0, r4
 800bfba:	f000 fb87 	bl	800c6cc <ucdr_check_final_buffer_behavior>
 800bfbe:	b1b0      	cbz	r0, 800bfee <ucdr_deserialize_int32_t+0xc6>
 800bfc0:	7d23      	ldrb	r3, [r4, #20]
 800bfc2:	2b01      	cmp	r3, #1
 800bfc4:	68a3      	ldr	r3, [r4, #8]
 800bfc6:	d017      	beq.n	800bff8 <ucdr_deserialize_int32_t+0xd0>
 800bfc8:	78db      	ldrb	r3, [r3, #3]
 800bfca:	702b      	strb	r3, [r5, #0]
 800bfcc:	68a3      	ldr	r3, [r4, #8]
 800bfce:	789b      	ldrb	r3, [r3, #2]
 800bfd0:	706b      	strb	r3, [r5, #1]
 800bfd2:	68a3      	ldr	r3, [r4, #8]
 800bfd4:	785b      	ldrb	r3, [r3, #1]
 800bfd6:	70ab      	strb	r3, [r5, #2]
 800bfd8:	68a3      	ldr	r3, [r4, #8]
 800bfda:	781b      	ldrb	r3, [r3, #0]
 800bfdc:	70eb      	strb	r3, [r5, #3]
 800bfde:	68a2      	ldr	r2, [r4, #8]
 800bfe0:	6923      	ldr	r3, [r4, #16]
 800bfe2:	3204      	adds	r2, #4
 800bfe4:	3304      	adds	r3, #4
 800bfe6:	2104      	movs	r1, #4
 800bfe8:	60a2      	str	r2, [r4, #8]
 800bfea:	6123      	str	r3, [r4, #16]
 800bfec:	7561      	strb	r1, [r4, #21]
 800bfee:	7da0      	ldrb	r0, [r4, #22]
 800bff0:	f080 0001 	eor.w	r0, r0, #1
 800bff4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	602b      	str	r3, [r5, #0]
 800bffc:	e7ef      	b.n	800bfde <ucdr_deserialize_int32_t+0xb6>
 800bffe:	68a2      	ldr	r2, [r4, #8]
 800c000:	6923      	ldr	r3, [r4, #16]
 800c002:	7da0      	ldrb	r0, [r4, #22]
 800c004:	f884 8015 	strb.w	r8, [r4, #21]
 800c008:	1bd2      	subs	r2, r2, r7
 800c00a:	1bdb      	subs	r3, r3, r7
 800c00c:	60a2      	str	r2, [r4, #8]
 800c00e:	6123      	str	r3, [r4, #16]
 800c010:	f080 0001 	eor.w	r0, r0, #1
 800c014:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c018:	68a3      	ldr	r3, [r4, #8]
 800c01a:	789b      	ldrb	r3, [r3, #2]
 800c01c:	706b      	strb	r3, [r5, #1]
 800c01e:	1cab      	adds	r3, r5, #2
 800c020:	68a2      	ldr	r2, [r4, #8]
 800c022:	7852      	ldrb	r2, [r2, #1]
 800c024:	f803 2b01 	strb.w	r2, [r3], #1
 800c028:	68a2      	ldr	r2, [r4, #8]
 800c02a:	7812      	ldrb	r2, [r2, #0]
 800c02c:	701a      	strb	r2, [r3, #0]
 800c02e:	e7b4      	b.n	800bf9a <ucdr_deserialize_int32_t+0x72>
 800c030:	4631      	mov	r1, r6
 800c032:	463a      	mov	r2, r7
 800c034:	4628      	mov	r0, r5
 800c036:	f00e f9c6 	bl	801a3c6 <memcpy>
 800c03a:	68a1      	ldr	r1, [r4, #8]
 800c03c:	464a      	mov	r2, r9
 800c03e:	19e8      	adds	r0, r5, r7
 800c040:	f00e f9c1 	bl	801a3c6 <memcpy>
 800c044:	e7a9      	b.n	800bf9a <ucdr_deserialize_int32_t+0x72>
 800c046:	bf00      	nop

0800c048 <ucdr_serialize_double>:
 800c048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c04c:	2108      	movs	r1, #8
 800c04e:	b082      	sub	sp, #8
 800c050:	4604      	mov	r4, r0
 800c052:	ed8d 0b00 	vstr	d0, [sp]
 800c056:	f000 fb8d 	bl	800c774 <ucdr_buffer_alignment>
 800c05a:	4601      	mov	r1, r0
 800c05c:	4620      	mov	r0, r4
 800c05e:	7d67      	ldrb	r7, [r4, #21]
 800c060:	f000 fbcc 	bl	800c7fc <ucdr_advance_buffer>
 800c064:	2108      	movs	r1, #8
 800c066:	4620      	mov	r0, r4
 800c068:	f000 fb24 	bl	800c6b4 <ucdr_check_buffer_available_for>
 800c06c:	2800      	cmp	r0, #0
 800c06e:	d14e      	bne.n	800c10e <ucdr_serialize_double+0xc6>
 800c070:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c074:	42ab      	cmp	r3, r5
 800c076:	d945      	bls.n	800c104 <ucdr_serialize_double+0xbc>
 800c078:	1b5e      	subs	r6, r3, r5
 800c07a:	60a3      	str	r3, [r4, #8]
 800c07c:	6923      	ldr	r3, [r4, #16]
 800c07e:	f1c6 0808 	rsb	r8, r6, #8
 800c082:	4433      	add	r3, r6
 800c084:	6123      	str	r3, [r4, #16]
 800c086:	4641      	mov	r1, r8
 800c088:	4620      	mov	r0, r4
 800c08a:	f000 fb1f 	bl	800c6cc <ucdr_check_final_buffer_behavior>
 800c08e:	2800      	cmp	r0, #0
 800c090:	d074      	beq.n	800c17c <ucdr_serialize_double+0x134>
 800c092:	7d23      	ldrb	r3, [r4, #20]
 800c094:	2b01      	cmp	r3, #1
 800c096:	f000 809b 	beq.w	800c1d0 <ucdr_serialize_double+0x188>
 800c09a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c09e:	702b      	strb	r3, [r5, #0]
 800c0a0:	2e00      	cmp	r6, #0
 800c0a2:	d078      	beq.n	800c196 <ucdr_serialize_double+0x14e>
 800c0a4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c0a8:	706b      	strb	r3, [r5, #1]
 800c0aa:	2e01      	cmp	r6, #1
 800c0ac:	d077      	beq.n	800c19e <ucdr_serialize_double+0x156>
 800c0ae:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c0b2:	70ab      	strb	r3, [r5, #2]
 800c0b4:	2e02      	cmp	r6, #2
 800c0b6:	d076      	beq.n	800c1a6 <ucdr_serialize_double+0x15e>
 800c0b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c0bc:	70eb      	strb	r3, [r5, #3]
 800c0be:	2e03      	cmp	r6, #3
 800c0c0:	d075      	beq.n	800c1ae <ucdr_serialize_double+0x166>
 800c0c2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c0c6:	712b      	strb	r3, [r5, #4]
 800c0c8:	2e04      	cmp	r6, #4
 800c0ca:	d074      	beq.n	800c1b6 <ucdr_serialize_double+0x16e>
 800c0cc:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800c0d0:	716b      	strb	r3, [r5, #5]
 800c0d2:	2e05      	cmp	r6, #5
 800c0d4:	d073      	beq.n	800c1be <ucdr_serialize_double+0x176>
 800c0d6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800c0da:	71ab      	strb	r3, [r5, #6]
 800c0dc:	2e06      	cmp	r6, #6
 800c0de:	d072      	beq.n	800c1c6 <ucdr_serialize_double+0x17e>
 800c0e0:	f89d 3000 	ldrb.w	r3, [sp]
 800c0e4:	71eb      	strb	r3, [r5, #7]
 800c0e6:	6923      	ldr	r3, [r4, #16]
 800c0e8:	68a2      	ldr	r2, [r4, #8]
 800c0ea:	7da0      	ldrb	r0, [r4, #22]
 800c0ec:	3308      	adds	r3, #8
 800c0ee:	1b9e      	subs	r6, r3, r6
 800c0f0:	4442      	add	r2, r8
 800c0f2:	2308      	movs	r3, #8
 800c0f4:	f080 0001 	eor.w	r0, r0, #1
 800c0f8:	60a2      	str	r2, [r4, #8]
 800c0fa:	6126      	str	r6, [r4, #16]
 800c0fc:	7563      	strb	r3, [r4, #21]
 800c0fe:	b002      	add	sp, #8
 800c100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c104:	2108      	movs	r1, #8
 800c106:	4620      	mov	r0, r4
 800c108:	f000 fae0 	bl	800c6cc <ucdr_check_final_buffer_behavior>
 800c10c:	b350      	cbz	r0, 800c164 <ucdr_serialize_double+0x11c>
 800c10e:	7d23      	ldrb	r3, [r4, #20]
 800c110:	2b01      	cmp	r3, #1
 800c112:	d02d      	beq.n	800c170 <ucdr_serialize_double+0x128>
 800c114:	68a3      	ldr	r3, [r4, #8]
 800c116:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c11a:	701a      	strb	r2, [r3, #0]
 800c11c:	68a3      	ldr	r3, [r4, #8]
 800c11e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c122:	705a      	strb	r2, [r3, #1]
 800c124:	68a3      	ldr	r3, [r4, #8]
 800c126:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c12a:	709a      	strb	r2, [r3, #2]
 800c12c:	68a3      	ldr	r3, [r4, #8]
 800c12e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c132:	70da      	strb	r2, [r3, #3]
 800c134:	68a3      	ldr	r3, [r4, #8]
 800c136:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c13a:	711a      	strb	r2, [r3, #4]
 800c13c:	68a3      	ldr	r3, [r4, #8]
 800c13e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c142:	715a      	strb	r2, [r3, #5]
 800c144:	68a3      	ldr	r3, [r4, #8]
 800c146:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c14a:	719a      	strb	r2, [r3, #6]
 800c14c:	68a3      	ldr	r3, [r4, #8]
 800c14e:	f89d 2000 	ldrb.w	r2, [sp]
 800c152:	71da      	strb	r2, [r3, #7]
 800c154:	68a2      	ldr	r2, [r4, #8]
 800c156:	6923      	ldr	r3, [r4, #16]
 800c158:	3208      	adds	r2, #8
 800c15a:	3308      	adds	r3, #8
 800c15c:	2108      	movs	r1, #8
 800c15e:	60a2      	str	r2, [r4, #8]
 800c160:	6123      	str	r3, [r4, #16]
 800c162:	7561      	strb	r1, [r4, #21]
 800c164:	7da0      	ldrb	r0, [r4, #22]
 800c166:	f080 0001 	eor.w	r0, r0, #1
 800c16a:	b002      	add	sp, #8
 800c16c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c170:	466b      	mov	r3, sp
 800c172:	cb03      	ldmia	r3!, {r0, r1}
 800c174:	68a3      	ldr	r3, [r4, #8]
 800c176:	6018      	str	r0, [r3, #0]
 800c178:	6059      	str	r1, [r3, #4]
 800c17a:	e7eb      	b.n	800c154 <ucdr_serialize_double+0x10c>
 800c17c:	68a2      	ldr	r2, [r4, #8]
 800c17e:	6923      	ldr	r3, [r4, #16]
 800c180:	7da0      	ldrb	r0, [r4, #22]
 800c182:	7567      	strb	r7, [r4, #21]
 800c184:	1b92      	subs	r2, r2, r6
 800c186:	1b9b      	subs	r3, r3, r6
 800c188:	f080 0001 	eor.w	r0, r0, #1
 800c18c:	60a2      	str	r2, [r4, #8]
 800c18e:	6123      	str	r3, [r4, #16]
 800c190:	b002      	add	sp, #8
 800c192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c196:	68a3      	ldr	r3, [r4, #8]
 800c198:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c19c:	701a      	strb	r2, [r3, #0]
 800c19e:	68a3      	ldr	r3, [r4, #8]
 800c1a0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c1a4:	701a      	strb	r2, [r3, #0]
 800c1a6:	68a3      	ldr	r3, [r4, #8]
 800c1a8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c1ac:	701a      	strb	r2, [r3, #0]
 800c1ae:	68a3      	ldr	r3, [r4, #8]
 800c1b0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c1b4:	701a      	strb	r2, [r3, #0]
 800c1b6:	68a3      	ldr	r3, [r4, #8]
 800c1b8:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c1bc:	701a      	strb	r2, [r3, #0]
 800c1be:	68a3      	ldr	r3, [r4, #8]
 800c1c0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c1c4:	701a      	strb	r2, [r3, #0]
 800c1c6:	68a3      	ldr	r3, [r4, #8]
 800c1c8:	f89d 2000 	ldrb.w	r2, [sp]
 800c1cc:	701a      	strb	r2, [r3, #0]
 800c1ce:	e78a      	b.n	800c0e6 <ucdr_serialize_double+0x9e>
 800c1d0:	4628      	mov	r0, r5
 800c1d2:	466d      	mov	r5, sp
 800c1d4:	4629      	mov	r1, r5
 800c1d6:	4632      	mov	r2, r6
 800c1d8:	f00e f8f5 	bl	801a3c6 <memcpy>
 800c1dc:	68a0      	ldr	r0, [r4, #8]
 800c1de:	4642      	mov	r2, r8
 800c1e0:	19a9      	adds	r1, r5, r6
 800c1e2:	f00e f8f0 	bl	801a3c6 <memcpy>
 800c1e6:	e77e      	b.n	800c0e6 <ucdr_serialize_double+0x9e>

0800c1e8 <ucdr_serialize_endian_double>:
 800c1e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c1ec:	460e      	mov	r6, r1
 800c1ee:	b083      	sub	sp, #12
 800c1f0:	2108      	movs	r1, #8
 800c1f2:	4604      	mov	r4, r0
 800c1f4:	ed8d 0b00 	vstr	d0, [sp]
 800c1f8:	f000 fabc 	bl	800c774 <ucdr_buffer_alignment>
 800c1fc:	4601      	mov	r1, r0
 800c1fe:	4620      	mov	r0, r4
 800c200:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c204:	f000 fafa 	bl	800c7fc <ucdr_advance_buffer>
 800c208:	2108      	movs	r1, #8
 800c20a:	4620      	mov	r0, r4
 800c20c:	f000 fa52 	bl	800c6b4 <ucdr_check_buffer_available_for>
 800c210:	2800      	cmp	r0, #0
 800c212:	d14d      	bne.n	800c2b0 <ucdr_serialize_endian_double+0xc8>
 800c214:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800c218:	42bd      	cmp	r5, r7
 800c21a:	d944      	bls.n	800c2a6 <ucdr_serialize_endian_double+0xbe>
 800c21c:	6923      	ldr	r3, [r4, #16]
 800c21e:	60a5      	str	r5, [r4, #8]
 800c220:	1bed      	subs	r5, r5, r7
 800c222:	442b      	add	r3, r5
 800c224:	f1c5 0908 	rsb	r9, r5, #8
 800c228:	6123      	str	r3, [r4, #16]
 800c22a:	4649      	mov	r1, r9
 800c22c:	4620      	mov	r0, r4
 800c22e:	f000 fa4d 	bl	800c6cc <ucdr_check_final_buffer_behavior>
 800c232:	2800      	cmp	r0, #0
 800c234:	d072      	beq.n	800c31c <ucdr_serialize_endian_double+0x134>
 800c236:	2e01      	cmp	r6, #1
 800c238:	f000 809b 	beq.w	800c372 <ucdr_serialize_endian_double+0x18a>
 800c23c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c240:	703b      	strb	r3, [r7, #0]
 800c242:	2d00      	cmp	r5, #0
 800c244:	d078      	beq.n	800c338 <ucdr_serialize_endian_double+0x150>
 800c246:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c24a:	707b      	strb	r3, [r7, #1]
 800c24c:	2d01      	cmp	r5, #1
 800c24e:	d077      	beq.n	800c340 <ucdr_serialize_endian_double+0x158>
 800c250:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c254:	70bb      	strb	r3, [r7, #2]
 800c256:	2d02      	cmp	r5, #2
 800c258:	d076      	beq.n	800c348 <ucdr_serialize_endian_double+0x160>
 800c25a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c25e:	70fb      	strb	r3, [r7, #3]
 800c260:	2d03      	cmp	r5, #3
 800c262:	d075      	beq.n	800c350 <ucdr_serialize_endian_double+0x168>
 800c264:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c268:	713b      	strb	r3, [r7, #4]
 800c26a:	2d04      	cmp	r5, #4
 800c26c:	d074      	beq.n	800c358 <ucdr_serialize_endian_double+0x170>
 800c26e:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800c272:	717b      	strb	r3, [r7, #5]
 800c274:	2d05      	cmp	r5, #5
 800c276:	d073      	beq.n	800c360 <ucdr_serialize_endian_double+0x178>
 800c278:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800c27c:	71bb      	strb	r3, [r7, #6]
 800c27e:	2d06      	cmp	r5, #6
 800c280:	d072      	beq.n	800c368 <ucdr_serialize_endian_double+0x180>
 800c282:	f89d 3000 	ldrb.w	r3, [sp]
 800c286:	71fb      	strb	r3, [r7, #7]
 800c288:	6923      	ldr	r3, [r4, #16]
 800c28a:	68a2      	ldr	r2, [r4, #8]
 800c28c:	7da0      	ldrb	r0, [r4, #22]
 800c28e:	3308      	adds	r3, #8
 800c290:	1b5d      	subs	r5, r3, r5
 800c292:	444a      	add	r2, r9
 800c294:	2308      	movs	r3, #8
 800c296:	f080 0001 	eor.w	r0, r0, #1
 800c29a:	60a2      	str	r2, [r4, #8]
 800c29c:	6125      	str	r5, [r4, #16]
 800c29e:	7563      	strb	r3, [r4, #21]
 800c2a0:	b003      	add	sp, #12
 800c2a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2a6:	2108      	movs	r1, #8
 800c2a8:	4620      	mov	r0, r4
 800c2aa:	f000 fa0f 	bl	800c6cc <ucdr_check_final_buffer_behavior>
 800c2ae:	b348      	cbz	r0, 800c304 <ucdr_serialize_endian_double+0x11c>
 800c2b0:	2e01      	cmp	r6, #1
 800c2b2:	d02d      	beq.n	800c310 <ucdr_serialize_endian_double+0x128>
 800c2b4:	68a3      	ldr	r3, [r4, #8]
 800c2b6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c2ba:	701a      	strb	r2, [r3, #0]
 800c2bc:	68a3      	ldr	r3, [r4, #8]
 800c2be:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c2c2:	705a      	strb	r2, [r3, #1]
 800c2c4:	68a3      	ldr	r3, [r4, #8]
 800c2c6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c2ca:	709a      	strb	r2, [r3, #2]
 800c2cc:	68a3      	ldr	r3, [r4, #8]
 800c2ce:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c2d2:	70da      	strb	r2, [r3, #3]
 800c2d4:	68a3      	ldr	r3, [r4, #8]
 800c2d6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c2da:	711a      	strb	r2, [r3, #4]
 800c2dc:	68a3      	ldr	r3, [r4, #8]
 800c2de:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c2e2:	715a      	strb	r2, [r3, #5]
 800c2e4:	68a3      	ldr	r3, [r4, #8]
 800c2e6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c2ea:	719a      	strb	r2, [r3, #6]
 800c2ec:	68a3      	ldr	r3, [r4, #8]
 800c2ee:	f89d 2000 	ldrb.w	r2, [sp]
 800c2f2:	71da      	strb	r2, [r3, #7]
 800c2f4:	68a2      	ldr	r2, [r4, #8]
 800c2f6:	6923      	ldr	r3, [r4, #16]
 800c2f8:	3208      	adds	r2, #8
 800c2fa:	3308      	adds	r3, #8
 800c2fc:	2108      	movs	r1, #8
 800c2fe:	60a2      	str	r2, [r4, #8]
 800c300:	6123      	str	r3, [r4, #16]
 800c302:	7561      	strb	r1, [r4, #21]
 800c304:	7da0      	ldrb	r0, [r4, #22]
 800c306:	f080 0001 	eor.w	r0, r0, #1
 800c30a:	b003      	add	sp, #12
 800c30c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c310:	466b      	mov	r3, sp
 800c312:	cb03      	ldmia	r3!, {r0, r1}
 800c314:	68a3      	ldr	r3, [r4, #8]
 800c316:	6018      	str	r0, [r3, #0]
 800c318:	6059      	str	r1, [r3, #4]
 800c31a:	e7eb      	b.n	800c2f4 <ucdr_serialize_endian_double+0x10c>
 800c31c:	68a2      	ldr	r2, [r4, #8]
 800c31e:	6923      	ldr	r3, [r4, #16]
 800c320:	7da0      	ldrb	r0, [r4, #22]
 800c322:	f884 8015 	strb.w	r8, [r4, #21]
 800c326:	1b52      	subs	r2, r2, r5
 800c328:	1b5b      	subs	r3, r3, r5
 800c32a:	f080 0001 	eor.w	r0, r0, #1
 800c32e:	60a2      	str	r2, [r4, #8]
 800c330:	6123      	str	r3, [r4, #16]
 800c332:	b003      	add	sp, #12
 800c334:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c338:	68a3      	ldr	r3, [r4, #8]
 800c33a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c33e:	701a      	strb	r2, [r3, #0]
 800c340:	68a3      	ldr	r3, [r4, #8]
 800c342:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c346:	701a      	strb	r2, [r3, #0]
 800c348:	68a3      	ldr	r3, [r4, #8]
 800c34a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c34e:	701a      	strb	r2, [r3, #0]
 800c350:	68a3      	ldr	r3, [r4, #8]
 800c352:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c356:	701a      	strb	r2, [r3, #0]
 800c358:	68a3      	ldr	r3, [r4, #8]
 800c35a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c35e:	701a      	strb	r2, [r3, #0]
 800c360:	68a3      	ldr	r3, [r4, #8]
 800c362:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c366:	701a      	strb	r2, [r3, #0]
 800c368:	68a3      	ldr	r3, [r4, #8]
 800c36a:	f89d 2000 	ldrb.w	r2, [sp]
 800c36e:	701a      	strb	r2, [r3, #0]
 800c370:	e78a      	b.n	800c288 <ucdr_serialize_endian_double+0xa0>
 800c372:	466e      	mov	r6, sp
 800c374:	4631      	mov	r1, r6
 800c376:	462a      	mov	r2, r5
 800c378:	4638      	mov	r0, r7
 800c37a:	f00e f824 	bl	801a3c6 <memcpy>
 800c37e:	68a0      	ldr	r0, [r4, #8]
 800c380:	464a      	mov	r2, r9
 800c382:	1971      	adds	r1, r6, r5
 800c384:	f00e f81f 	bl	801a3c6 <memcpy>
 800c388:	e77e      	b.n	800c288 <ucdr_serialize_endian_double+0xa0>
 800c38a:	bf00      	nop

0800c38c <ucdr_deserialize_double>:
 800c38c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c390:	460d      	mov	r5, r1
 800c392:	2108      	movs	r1, #8
 800c394:	4604      	mov	r4, r0
 800c396:	f000 f9ed 	bl	800c774 <ucdr_buffer_alignment>
 800c39a:	4601      	mov	r1, r0
 800c39c:	4620      	mov	r0, r4
 800c39e:	f894 9015 	ldrb.w	r9, [r4, #21]
 800c3a2:	f000 fa2b 	bl	800c7fc <ucdr_advance_buffer>
 800c3a6:	2108      	movs	r1, #8
 800c3a8:	4620      	mov	r0, r4
 800c3aa:	f000 f983 	bl	800c6b4 <ucdr_check_buffer_available_for>
 800c3ae:	2800      	cmp	r0, #0
 800c3b0:	d151      	bne.n	800c456 <ucdr_deserialize_double+0xca>
 800c3b2:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c3b6:	42be      	cmp	r6, r7
 800c3b8:	d948      	bls.n	800c44c <ucdr_deserialize_double+0xc0>
 800c3ba:	6923      	ldr	r3, [r4, #16]
 800c3bc:	60a6      	str	r6, [r4, #8]
 800c3be:	1bf6      	subs	r6, r6, r7
 800c3c0:	4433      	add	r3, r6
 800c3c2:	f1c6 0808 	rsb	r8, r6, #8
 800c3c6:	6123      	str	r3, [r4, #16]
 800c3c8:	4641      	mov	r1, r8
 800c3ca:	4620      	mov	r0, r4
 800c3cc:	f000 f97e 	bl	800c6cc <ucdr_check_final_buffer_behavior>
 800c3d0:	2800      	cmp	r0, #0
 800c3d2:	d06d      	beq.n	800c4b0 <ucdr_deserialize_double+0x124>
 800c3d4:	7d23      	ldrb	r3, [r4, #20]
 800c3d6:	2b01      	cmp	r3, #1
 800c3d8:	f000 8093 	beq.w	800c502 <ucdr_deserialize_double+0x176>
 800c3dc:	79fb      	ldrb	r3, [r7, #7]
 800c3de:	702b      	strb	r3, [r5, #0]
 800c3e0:	2e00      	cmp	r6, #0
 800c3e2:	d072      	beq.n	800c4ca <ucdr_deserialize_double+0x13e>
 800c3e4:	79bb      	ldrb	r3, [r7, #6]
 800c3e6:	706b      	strb	r3, [r5, #1]
 800c3e8:	2e01      	cmp	r6, #1
 800c3ea:	f105 0302 	add.w	r3, r5, #2
 800c3ee:	d070      	beq.n	800c4d2 <ucdr_deserialize_double+0x146>
 800c3f0:	797b      	ldrb	r3, [r7, #5]
 800c3f2:	70ab      	strb	r3, [r5, #2]
 800c3f4:	2e02      	cmp	r6, #2
 800c3f6:	f105 0303 	add.w	r3, r5, #3
 800c3fa:	d06e      	beq.n	800c4da <ucdr_deserialize_double+0x14e>
 800c3fc:	793b      	ldrb	r3, [r7, #4]
 800c3fe:	70eb      	strb	r3, [r5, #3]
 800c400:	2e03      	cmp	r6, #3
 800c402:	f105 0304 	add.w	r3, r5, #4
 800c406:	d06c      	beq.n	800c4e2 <ucdr_deserialize_double+0x156>
 800c408:	78fb      	ldrb	r3, [r7, #3]
 800c40a:	712b      	strb	r3, [r5, #4]
 800c40c:	2e04      	cmp	r6, #4
 800c40e:	f105 0305 	add.w	r3, r5, #5
 800c412:	d06a      	beq.n	800c4ea <ucdr_deserialize_double+0x15e>
 800c414:	78bb      	ldrb	r3, [r7, #2]
 800c416:	716b      	strb	r3, [r5, #5]
 800c418:	2e05      	cmp	r6, #5
 800c41a:	f105 0306 	add.w	r3, r5, #6
 800c41e:	d068      	beq.n	800c4f2 <ucdr_deserialize_double+0x166>
 800c420:	787b      	ldrb	r3, [r7, #1]
 800c422:	71ab      	strb	r3, [r5, #6]
 800c424:	2e06      	cmp	r6, #6
 800c426:	f105 0307 	add.w	r3, r5, #7
 800c42a:	d066      	beq.n	800c4fa <ucdr_deserialize_double+0x16e>
 800c42c:	783b      	ldrb	r3, [r7, #0]
 800c42e:	71eb      	strb	r3, [r5, #7]
 800c430:	6923      	ldr	r3, [r4, #16]
 800c432:	68a2      	ldr	r2, [r4, #8]
 800c434:	7da0      	ldrb	r0, [r4, #22]
 800c436:	3308      	adds	r3, #8
 800c438:	1b9e      	subs	r6, r3, r6
 800c43a:	2308      	movs	r3, #8
 800c43c:	4442      	add	r2, r8
 800c43e:	7563      	strb	r3, [r4, #21]
 800c440:	60a2      	str	r2, [r4, #8]
 800c442:	6126      	str	r6, [r4, #16]
 800c444:	f080 0001 	eor.w	r0, r0, #1
 800c448:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c44c:	2108      	movs	r1, #8
 800c44e:	4620      	mov	r0, r4
 800c450:	f000 f93c 	bl	800c6cc <ucdr_check_final_buffer_behavior>
 800c454:	b310      	cbz	r0, 800c49c <ucdr_deserialize_double+0x110>
 800c456:	7d23      	ldrb	r3, [r4, #20]
 800c458:	2b01      	cmp	r3, #1
 800c45a:	68a3      	ldr	r3, [r4, #8]
 800c45c:	d023      	beq.n	800c4a6 <ucdr_deserialize_double+0x11a>
 800c45e:	79db      	ldrb	r3, [r3, #7]
 800c460:	702b      	strb	r3, [r5, #0]
 800c462:	68a3      	ldr	r3, [r4, #8]
 800c464:	799b      	ldrb	r3, [r3, #6]
 800c466:	706b      	strb	r3, [r5, #1]
 800c468:	68a3      	ldr	r3, [r4, #8]
 800c46a:	795b      	ldrb	r3, [r3, #5]
 800c46c:	70ab      	strb	r3, [r5, #2]
 800c46e:	68a3      	ldr	r3, [r4, #8]
 800c470:	791b      	ldrb	r3, [r3, #4]
 800c472:	70eb      	strb	r3, [r5, #3]
 800c474:	68a3      	ldr	r3, [r4, #8]
 800c476:	78db      	ldrb	r3, [r3, #3]
 800c478:	712b      	strb	r3, [r5, #4]
 800c47a:	68a3      	ldr	r3, [r4, #8]
 800c47c:	789b      	ldrb	r3, [r3, #2]
 800c47e:	716b      	strb	r3, [r5, #5]
 800c480:	68a3      	ldr	r3, [r4, #8]
 800c482:	785b      	ldrb	r3, [r3, #1]
 800c484:	71ab      	strb	r3, [r5, #6]
 800c486:	68a3      	ldr	r3, [r4, #8]
 800c488:	781b      	ldrb	r3, [r3, #0]
 800c48a:	71eb      	strb	r3, [r5, #7]
 800c48c:	68a2      	ldr	r2, [r4, #8]
 800c48e:	6923      	ldr	r3, [r4, #16]
 800c490:	3208      	adds	r2, #8
 800c492:	3308      	adds	r3, #8
 800c494:	2108      	movs	r1, #8
 800c496:	60a2      	str	r2, [r4, #8]
 800c498:	6123      	str	r3, [r4, #16]
 800c49a:	7561      	strb	r1, [r4, #21]
 800c49c:	7da0      	ldrb	r0, [r4, #22]
 800c49e:	f080 0001 	eor.w	r0, r0, #1
 800c4a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4a6:	681a      	ldr	r2, [r3, #0]
 800c4a8:	685b      	ldr	r3, [r3, #4]
 800c4aa:	606b      	str	r3, [r5, #4]
 800c4ac:	602a      	str	r2, [r5, #0]
 800c4ae:	e7ed      	b.n	800c48c <ucdr_deserialize_double+0x100>
 800c4b0:	68a2      	ldr	r2, [r4, #8]
 800c4b2:	6923      	ldr	r3, [r4, #16]
 800c4b4:	7da0      	ldrb	r0, [r4, #22]
 800c4b6:	f884 9015 	strb.w	r9, [r4, #21]
 800c4ba:	1b92      	subs	r2, r2, r6
 800c4bc:	1b9b      	subs	r3, r3, r6
 800c4be:	60a2      	str	r2, [r4, #8]
 800c4c0:	6123      	str	r3, [r4, #16]
 800c4c2:	f080 0001 	eor.w	r0, r0, #1
 800c4c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4ca:	68a3      	ldr	r3, [r4, #8]
 800c4cc:	799b      	ldrb	r3, [r3, #6]
 800c4ce:	706b      	strb	r3, [r5, #1]
 800c4d0:	1cab      	adds	r3, r5, #2
 800c4d2:	68a2      	ldr	r2, [r4, #8]
 800c4d4:	7952      	ldrb	r2, [r2, #5]
 800c4d6:	f803 2b01 	strb.w	r2, [r3], #1
 800c4da:	68a2      	ldr	r2, [r4, #8]
 800c4dc:	7912      	ldrb	r2, [r2, #4]
 800c4de:	f803 2b01 	strb.w	r2, [r3], #1
 800c4e2:	68a2      	ldr	r2, [r4, #8]
 800c4e4:	78d2      	ldrb	r2, [r2, #3]
 800c4e6:	f803 2b01 	strb.w	r2, [r3], #1
 800c4ea:	68a2      	ldr	r2, [r4, #8]
 800c4ec:	7892      	ldrb	r2, [r2, #2]
 800c4ee:	f803 2b01 	strb.w	r2, [r3], #1
 800c4f2:	68a2      	ldr	r2, [r4, #8]
 800c4f4:	7852      	ldrb	r2, [r2, #1]
 800c4f6:	f803 2b01 	strb.w	r2, [r3], #1
 800c4fa:	68a2      	ldr	r2, [r4, #8]
 800c4fc:	7812      	ldrb	r2, [r2, #0]
 800c4fe:	701a      	strb	r2, [r3, #0]
 800c500:	e796      	b.n	800c430 <ucdr_deserialize_double+0xa4>
 800c502:	4639      	mov	r1, r7
 800c504:	4632      	mov	r2, r6
 800c506:	4628      	mov	r0, r5
 800c508:	f00d ff5d 	bl	801a3c6 <memcpy>
 800c50c:	68a1      	ldr	r1, [r4, #8]
 800c50e:	4642      	mov	r2, r8
 800c510:	19a8      	adds	r0, r5, r6
 800c512:	f00d ff58 	bl	801a3c6 <memcpy>
 800c516:	e78b      	b.n	800c430 <ucdr_deserialize_double+0xa4>

0800c518 <ucdr_deserialize_endian_double>:
 800c518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c51c:	460f      	mov	r7, r1
 800c51e:	2108      	movs	r1, #8
 800c520:	4604      	mov	r4, r0
 800c522:	4615      	mov	r5, r2
 800c524:	f000 f926 	bl	800c774 <ucdr_buffer_alignment>
 800c528:	4601      	mov	r1, r0
 800c52a:	4620      	mov	r0, r4
 800c52c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800c530:	f000 f964 	bl	800c7fc <ucdr_advance_buffer>
 800c534:	2108      	movs	r1, #8
 800c536:	4620      	mov	r0, r4
 800c538:	f000 f8bc 	bl	800c6b4 <ucdr_check_buffer_available_for>
 800c53c:	2800      	cmp	r0, #0
 800c53e:	d159      	bne.n	800c5f4 <ucdr_deserialize_endian_double+0xdc>
 800c540:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 800c544:	4546      	cmp	r6, r8
 800c546:	d950      	bls.n	800c5ea <ucdr_deserialize_endian_double+0xd2>
 800c548:	6923      	ldr	r3, [r4, #16]
 800c54a:	60a6      	str	r6, [r4, #8]
 800c54c:	eba6 0608 	sub.w	r6, r6, r8
 800c550:	4433      	add	r3, r6
 800c552:	f1c6 0a08 	rsb	sl, r6, #8
 800c556:	6123      	str	r3, [r4, #16]
 800c558:	4651      	mov	r1, sl
 800c55a:	4620      	mov	r0, r4
 800c55c:	f000 f8b6 	bl	800c6cc <ucdr_check_final_buffer_behavior>
 800c560:	2800      	cmp	r0, #0
 800c562:	d073      	beq.n	800c64c <ucdr_deserialize_endian_double+0x134>
 800c564:	2f01      	cmp	r7, #1
 800c566:	f000 809a 	beq.w	800c69e <ucdr_deserialize_endian_double+0x186>
 800c56a:	f898 3007 	ldrb.w	r3, [r8, #7]
 800c56e:	702b      	strb	r3, [r5, #0]
 800c570:	2e00      	cmp	r6, #0
 800c572:	d078      	beq.n	800c666 <ucdr_deserialize_endian_double+0x14e>
 800c574:	f898 3006 	ldrb.w	r3, [r8, #6]
 800c578:	706b      	strb	r3, [r5, #1]
 800c57a:	2e01      	cmp	r6, #1
 800c57c:	f105 0302 	add.w	r3, r5, #2
 800c580:	d075      	beq.n	800c66e <ucdr_deserialize_endian_double+0x156>
 800c582:	f898 3005 	ldrb.w	r3, [r8, #5]
 800c586:	70ab      	strb	r3, [r5, #2]
 800c588:	2e02      	cmp	r6, #2
 800c58a:	f105 0303 	add.w	r3, r5, #3
 800c58e:	d072      	beq.n	800c676 <ucdr_deserialize_endian_double+0x15e>
 800c590:	f898 3004 	ldrb.w	r3, [r8, #4]
 800c594:	70eb      	strb	r3, [r5, #3]
 800c596:	2e03      	cmp	r6, #3
 800c598:	f105 0304 	add.w	r3, r5, #4
 800c59c:	d06f      	beq.n	800c67e <ucdr_deserialize_endian_double+0x166>
 800c59e:	f898 3003 	ldrb.w	r3, [r8, #3]
 800c5a2:	712b      	strb	r3, [r5, #4]
 800c5a4:	2e04      	cmp	r6, #4
 800c5a6:	f105 0305 	add.w	r3, r5, #5
 800c5aa:	d06c      	beq.n	800c686 <ucdr_deserialize_endian_double+0x16e>
 800c5ac:	f898 3002 	ldrb.w	r3, [r8, #2]
 800c5b0:	716b      	strb	r3, [r5, #5]
 800c5b2:	2e05      	cmp	r6, #5
 800c5b4:	f105 0306 	add.w	r3, r5, #6
 800c5b8:	d069      	beq.n	800c68e <ucdr_deserialize_endian_double+0x176>
 800c5ba:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c5be:	71ab      	strb	r3, [r5, #6]
 800c5c0:	2e06      	cmp	r6, #6
 800c5c2:	f105 0307 	add.w	r3, r5, #7
 800c5c6:	d066      	beq.n	800c696 <ucdr_deserialize_endian_double+0x17e>
 800c5c8:	f898 3000 	ldrb.w	r3, [r8]
 800c5cc:	71eb      	strb	r3, [r5, #7]
 800c5ce:	6923      	ldr	r3, [r4, #16]
 800c5d0:	68a2      	ldr	r2, [r4, #8]
 800c5d2:	7da0      	ldrb	r0, [r4, #22]
 800c5d4:	3308      	adds	r3, #8
 800c5d6:	1b9e      	subs	r6, r3, r6
 800c5d8:	2308      	movs	r3, #8
 800c5da:	4452      	add	r2, sl
 800c5dc:	7563      	strb	r3, [r4, #21]
 800c5de:	60a2      	str	r2, [r4, #8]
 800c5e0:	6126      	str	r6, [r4, #16]
 800c5e2:	f080 0001 	eor.w	r0, r0, #1
 800c5e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5ea:	2108      	movs	r1, #8
 800c5ec:	4620      	mov	r0, r4
 800c5ee:	f000 f86d 	bl	800c6cc <ucdr_check_final_buffer_behavior>
 800c5f2:	b308      	cbz	r0, 800c638 <ucdr_deserialize_endian_double+0x120>
 800c5f4:	2f01      	cmp	r7, #1
 800c5f6:	68a3      	ldr	r3, [r4, #8]
 800c5f8:	d023      	beq.n	800c642 <ucdr_deserialize_endian_double+0x12a>
 800c5fa:	79db      	ldrb	r3, [r3, #7]
 800c5fc:	702b      	strb	r3, [r5, #0]
 800c5fe:	68a3      	ldr	r3, [r4, #8]
 800c600:	799b      	ldrb	r3, [r3, #6]
 800c602:	706b      	strb	r3, [r5, #1]
 800c604:	68a3      	ldr	r3, [r4, #8]
 800c606:	795b      	ldrb	r3, [r3, #5]
 800c608:	70ab      	strb	r3, [r5, #2]
 800c60a:	68a3      	ldr	r3, [r4, #8]
 800c60c:	791b      	ldrb	r3, [r3, #4]
 800c60e:	70eb      	strb	r3, [r5, #3]
 800c610:	68a3      	ldr	r3, [r4, #8]
 800c612:	78db      	ldrb	r3, [r3, #3]
 800c614:	712b      	strb	r3, [r5, #4]
 800c616:	68a3      	ldr	r3, [r4, #8]
 800c618:	789b      	ldrb	r3, [r3, #2]
 800c61a:	716b      	strb	r3, [r5, #5]
 800c61c:	68a3      	ldr	r3, [r4, #8]
 800c61e:	785b      	ldrb	r3, [r3, #1]
 800c620:	71ab      	strb	r3, [r5, #6]
 800c622:	68a3      	ldr	r3, [r4, #8]
 800c624:	781b      	ldrb	r3, [r3, #0]
 800c626:	71eb      	strb	r3, [r5, #7]
 800c628:	68a2      	ldr	r2, [r4, #8]
 800c62a:	6923      	ldr	r3, [r4, #16]
 800c62c:	3208      	adds	r2, #8
 800c62e:	3308      	adds	r3, #8
 800c630:	2108      	movs	r1, #8
 800c632:	60a2      	str	r2, [r4, #8]
 800c634:	6123      	str	r3, [r4, #16]
 800c636:	7561      	strb	r1, [r4, #21]
 800c638:	7da0      	ldrb	r0, [r4, #22]
 800c63a:	f080 0001 	eor.w	r0, r0, #1
 800c63e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c642:	681a      	ldr	r2, [r3, #0]
 800c644:	685b      	ldr	r3, [r3, #4]
 800c646:	606b      	str	r3, [r5, #4]
 800c648:	602a      	str	r2, [r5, #0]
 800c64a:	e7ed      	b.n	800c628 <ucdr_deserialize_endian_double+0x110>
 800c64c:	68a2      	ldr	r2, [r4, #8]
 800c64e:	6923      	ldr	r3, [r4, #16]
 800c650:	7da0      	ldrb	r0, [r4, #22]
 800c652:	f884 9015 	strb.w	r9, [r4, #21]
 800c656:	1b92      	subs	r2, r2, r6
 800c658:	1b9b      	subs	r3, r3, r6
 800c65a:	60a2      	str	r2, [r4, #8]
 800c65c:	6123      	str	r3, [r4, #16]
 800c65e:	f080 0001 	eor.w	r0, r0, #1
 800c662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c666:	68a3      	ldr	r3, [r4, #8]
 800c668:	799b      	ldrb	r3, [r3, #6]
 800c66a:	706b      	strb	r3, [r5, #1]
 800c66c:	1cab      	adds	r3, r5, #2
 800c66e:	68a2      	ldr	r2, [r4, #8]
 800c670:	7952      	ldrb	r2, [r2, #5]
 800c672:	f803 2b01 	strb.w	r2, [r3], #1
 800c676:	68a2      	ldr	r2, [r4, #8]
 800c678:	7912      	ldrb	r2, [r2, #4]
 800c67a:	f803 2b01 	strb.w	r2, [r3], #1
 800c67e:	68a2      	ldr	r2, [r4, #8]
 800c680:	78d2      	ldrb	r2, [r2, #3]
 800c682:	f803 2b01 	strb.w	r2, [r3], #1
 800c686:	68a2      	ldr	r2, [r4, #8]
 800c688:	7892      	ldrb	r2, [r2, #2]
 800c68a:	f803 2b01 	strb.w	r2, [r3], #1
 800c68e:	68a2      	ldr	r2, [r4, #8]
 800c690:	7852      	ldrb	r2, [r2, #1]
 800c692:	f803 2b01 	strb.w	r2, [r3], #1
 800c696:	68a2      	ldr	r2, [r4, #8]
 800c698:	7812      	ldrb	r2, [r2, #0]
 800c69a:	701a      	strb	r2, [r3, #0]
 800c69c:	e797      	b.n	800c5ce <ucdr_deserialize_endian_double+0xb6>
 800c69e:	4641      	mov	r1, r8
 800c6a0:	4632      	mov	r2, r6
 800c6a2:	4628      	mov	r0, r5
 800c6a4:	f00d fe8f 	bl	801a3c6 <memcpy>
 800c6a8:	68a1      	ldr	r1, [r4, #8]
 800c6aa:	4652      	mov	r2, sl
 800c6ac:	19a8      	adds	r0, r5, r6
 800c6ae:	f00d fe8a 	bl	801a3c6 <memcpy>
 800c6b2:	e78c      	b.n	800c5ce <ucdr_deserialize_endian_double+0xb6>

0800c6b4 <ucdr_check_buffer_available_for>:
 800c6b4:	7d83      	ldrb	r3, [r0, #22]
 800c6b6:	b93b      	cbnz	r3, 800c6c8 <ucdr_check_buffer_available_for+0x14>
 800c6b8:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800c6bc:	4419      	add	r1, r3
 800c6be:	4288      	cmp	r0, r1
 800c6c0:	bf34      	ite	cc
 800c6c2:	2000      	movcc	r0, #0
 800c6c4:	2001      	movcs	r0, #1
 800c6c6:	4770      	bx	lr
 800c6c8:	2000      	movs	r0, #0
 800c6ca:	4770      	bx	lr

0800c6cc <ucdr_check_final_buffer_behavior>:
 800c6cc:	7d83      	ldrb	r3, [r0, #22]
 800c6ce:	b943      	cbnz	r3, 800c6e2 <ucdr_check_final_buffer_behavior+0x16>
 800c6d0:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800c6d4:	4291      	cmp	r1, r2
 800c6d6:	b510      	push	{r4, lr}
 800c6d8:	4604      	mov	r4, r0
 800c6da:	d205      	bcs.n	800c6e8 <ucdr_check_final_buffer_behavior+0x1c>
 800c6dc:	2301      	movs	r3, #1
 800c6de:	4618      	mov	r0, r3
 800c6e0:	bd10      	pop	{r4, pc}
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	4770      	bx	lr
 800c6e8:	6982      	ldr	r2, [r0, #24]
 800c6ea:	b13a      	cbz	r2, 800c6fc <ucdr_check_final_buffer_behavior+0x30>
 800c6ec:	69c1      	ldr	r1, [r0, #28]
 800c6ee:	4790      	blx	r2
 800c6f0:	f080 0301 	eor.w	r3, r0, #1
 800c6f4:	b2db      	uxtb	r3, r3
 800c6f6:	75a0      	strb	r0, [r4, #22]
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	bd10      	pop	{r4, pc}
 800c6fc:	2001      	movs	r0, #1
 800c6fe:	75a0      	strb	r0, [r4, #22]
 800c700:	e7fa      	b.n	800c6f8 <ucdr_check_final_buffer_behavior+0x2c>
 800c702:	bf00      	nop

0800c704 <ucdr_set_on_full_buffer_callback>:
 800c704:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800c708:	4770      	bx	lr
 800c70a:	bf00      	nop

0800c70c <ucdr_init_buffer_origin_offset_endian>:
 800c70c:	b410      	push	{r4}
 800c70e:	9c01      	ldr	r4, [sp, #4]
 800c710:	6001      	str	r1, [r0, #0]
 800c712:	440a      	add	r2, r1
 800c714:	6042      	str	r2, [r0, #4]
 800c716:	190a      	adds	r2, r1, r4
 800c718:	441c      	add	r4, r3
 800c71a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800c71e:	6082      	str	r2, [r0, #8]
 800c720:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c724:	7503      	strb	r3, [r0, #20]
 800c726:	2200      	movs	r2, #0
 800c728:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800c72c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c730:	7542      	strb	r2, [r0, #21]
 800c732:	7582      	strb	r2, [r0, #22]
 800c734:	4770      	bx	lr
 800c736:	bf00      	nop

0800c738 <ucdr_init_buffer_origin_offset>:
 800c738:	b510      	push	{r4, lr}
 800c73a:	b082      	sub	sp, #8
 800c73c:	9c04      	ldr	r4, [sp, #16]
 800c73e:	9400      	str	r4, [sp, #0]
 800c740:	2401      	movs	r4, #1
 800c742:	9401      	str	r4, [sp, #4]
 800c744:	f7ff ffe2 	bl	800c70c <ucdr_init_buffer_origin_offset_endian>
 800c748:	b002      	add	sp, #8
 800c74a:	bd10      	pop	{r4, pc}

0800c74c <ucdr_init_buffer_origin>:
 800c74c:	b510      	push	{r4, lr}
 800c74e:	b082      	sub	sp, #8
 800c750:	2400      	movs	r4, #0
 800c752:	9400      	str	r4, [sp, #0]
 800c754:	f7ff fff0 	bl	800c738 <ucdr_init_buffer_origin_offset>
 800c758:	b002      	add	sp, #8
 800c75a:	bd10      	pop	{r4, pc}

0800c75c <ucdr_init_buffer>:
 800c75c:	2300      	movs	r3, #0
 800c75e:	f7ff bff5 	b.w	800c74c <ucdr_init_buffer_origin>
 800c762:	bf00      	nop

0800c764 <ucdr_alignment>:
 800c764:	fbb0 f3f1 	udiv	r3, r0, r1
 800c768:	fb03 0011 	mls	r0, r3, r1, r0
 800c76c:	1a08      	subs	r0, r1, r0
 800c76e:	3901      	subs	r1, #1
 800c770:	4008      	ands	r0, r1
 800c772:	4770      	bx	lr

0800c774 <ucdr_buffer_alignment>:
 800c774:	7d43      	ldrb	r3, [r0, #21]
 800c776:	428b      	cmp	r3, r1
 800c778:	d208      	bcs.n	800c78c <ucdr_buffer_alignment+0x18>
 800c77a:	6900      	ldr	r0, [r0, #16]
 800c77c:	fbb0 f3f1 	udiv	r3, r0, r1
 800c780:	fb01 0013 	mls	r0, r1, r3, r0
 800c784:	1a08      	subs	r0, r1, r0
 800c786:	3901      	subs	r1, #1
 800c788:	4008      	ands	r0, r1
 800c78a:	4770      	bx	lr
 800c78c:	2000      	movs	r0, #0
 800c78e:	4770      	bx	lr

0800c790 <ucdr_align_to>:
 800c790:	b538      	push	{r3, r4, r5, lr}
 800c792:	4604      	mov	r4, r0
 800c794:	460d      	mov	r5, r1
 800c796:	f7ff ffed 	bl	800c774 <ucdr_buffer_alignment>
 800c79a:	68a3      	ldr	r3, [r4, #8]
 800c79c:	6921      	ldr	r1, [r4, #16]
 800c79e:	7565      	strb	r5, [r4, #21]
 800c7a0:	181a      	adds	r2, r3, r0
 800c7a2:	6863      	ldr	r3, [r4, #4]
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	4408      	add	r0, r1
 800c7a8:	bf28      	it	cs
 800c7aa:	4613      	movcs	r3, r2
 800c7ac:	6120      	str	r0, [r4, #16]
 800c7ae:	60a3      	str	r3, [r4, #8]
 800c7b0:	bd38      	pop	{r3, r4, r5, pc}
 800c7b2:	bf00      	nop

0800c7b4 <ucdr_buffer_length>:
 800c7b4:	6882      	ldr	r2, [r0, #8]
 800c7b6:	6800      	ldr	r0, [r0, #0]
 800c7b8:	1a10      	subs	r0, r2, r0
 800c7ba:	4770      	bx	lr

0800c7bc <ucdr_buffer_remaining>:
 800c7bc:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800c7c0:	1a10      	subs	r0, r2, r0
 800c7c2:	4770      	bx	lr

0800c7c4 <ucdr_check_final_buffer_behavior_array>:
 800c7c4:	b538      	push	{r3, r4, r5, lr}
 800c7c6:	7d83      	ldrb	r3, [r0, #22]
 800c7c8:	b963      	cbnz	r3, 800c7e4 <ucdr_check_final_buffer_behavior_array+0x20>
 800c7ca:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800c7ce:	429a      	cmp	r2, r3
 800c7d0:	4604      	mov	r4, r0
 800c7d2:	460d      	mov	r5, r1
 800c7d4:	d308      	bcc.n	800c7e8 <ucdr_check_final_buffer_behavior_array+0x24>
 800c7d6:	b139      	cbz	r1, 800c7e8 <ucdr_check_final_buffer_behavior_array+0x24>
 800c7d8:	6983      	ldr	r3, [r0, #24]
 800c7da:	b163      	cbz	r3, 800c7f6 <ucdr_check_final_buffer_behavior_array+0x32>
 800c7dc:	69c1      	ldr	r1, [r0, #28]
 800c7de:	4798      	blx	r3
 800c7e0:	75a0      	strb	r0, [r4, #22]
 800c7e2:	b108      	cbz	r0, 800c7e8 <ucdr_check_final_buffer_behavior_array+0x24>
 800c7e4:	2000      	movs	r0, #0
 800c7e6:	bd38      	pop	{r3, r4, r5, pc}
 800c7e8:	4620      	mov	r0, r4
 800c7ea:	f7ff ffe7 	bl	800c7bc <ucdr_buffer_remaining>
 800c7ee:	42a8      	cmp	r0, r5
 800c7f0:	bf28      	it	cs
 800c7f2:	4628      	movcs	r0, r5
 800c7f4:	bd38      	pop	{r3, r4, r5, pc}
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	7583      	strb	r3, [r0, #22]
 800c7fa:	e7f3      	b.n	800c7e4 <ucdr_check_final_buffer_behavior_array+0x20>

0800c7fc <ucdr_advance_buffer>:
 800c7fc:	b538      	push	{r3, r4, r5, lr}
 800c7fe:	4604      	mov	r4, r0
 800c800:	460d      	mov	r5, r1
 800c802:	f7ff ff57 	bl	800c6b4 <ucdr_check_buffer_available_for>
 800c806:	b178      	cbz	r0, 800c828 <ucdr_advance_buffer+0x2c>
 800c808:	6923      	ldr	r3, [r4, #16]
 800c80a:	68a2      	ldr	r2, [r4, #8]
 800c80c:	442b      	add	r3, r5
 800c80e:	6123      	str	r3, [r4, #16]
 800c810:	2301      	movs	r3, #1
 800c812:	442a      	add	r2, r5
 800c814:	7563      	strb	r3, [r4, #21]
 800c816:	60a2      	str	r2, [r4, #8]
 800c818:	bd38      	pop	{r3, r4, r5, pc}
 800c81a:	68a2      	ldr	r2, [r4, #8]
 800c81c:	6923      	ldr	r3, [r4, #16]
 800c81e:	4402      	add	r2, r0
 800c820:	4403      	add	r3, r0
 800c822:	1a2d      	subs	r5, r5, r0
 800c824:	60a2      	str	r2, [r4, #8]
 800c826:	6123      	str	r3, [r4, #16]
 800c828:	4629      	mov	r1, r5
 800c82a:	2201      	movs	r2, #1
 800c82c:	4620      	mov	r0, r4
 800c82e:	f7ff ffc9 	bl	800c7c4 <ucdr_check_final_buffer_behavior_array>
 800c832:	2800      	cmp	r0, #0
 800c834:	d1f1      	bne.n	800c81a <ucdr_advance_buffer+0x1e>
 800c836:	2301      	movs	r3, #1
 800c838:	7563      	strb	r3, [r4, #21]
 800c83a:	bd38      	pop	{r3, r4, r5, pc}

0800c83c <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800c83c:	4b04      	ldr	r3, [pc, #16]	@ (800c850 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x14>)
 800c83e:	681a      	ldr	r2, [r3, #0]
 800c840:	b10a      	cbz	r2, 800c846 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0xa>
 800c842:	4803      	ldr	r0, [pc, #12]	@ (800c850 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x14>)
 800c844:	4770      	bx	lr
 800c846:	4a03      	ldr	r2, [pc, #12]	@ (800c854 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x18>)
 800c848:	4801      	ldr	r0, [pc, #4]	@ (800c850 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x14>)
 800c84a:	6812      	ldr	r2, [r2, #0]
 800c84c:	601a      	str	r2, [r3, #0]
 800c84e:	4770      	bx	lr
 800c850:	200001e4 	.word	0x200001e4
 800c854:	20000328 	.word	0x20000328

0800c858 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800c858:	4a02      	ldr	r2, [pc, #8]	@ (800c864 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0xc>)
 800c85a:	4b03      	ldr	r3, [pc, #12]	@ (800c868 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x10>)
 800c85c:	6812      	ldr	r2, [r2, #0]
 800c85e:	601a      	str	r2, [r3, #0]
 800c860:	4770      	bx	lr
 800c862:	bf00      	nop
 800c864:	20000328 	.word	0x20000328
 800c868:	200001e4 	.word	0x200001e4

0800c86c <nav_msgs__msg__Odometry__rosidl_typesupport_introspection_c__Odometry_init_function>:
 800c86c:	f008 bc68 	b.w	8015140 <nav_msgs__msg__Odometry__init>

0800c870 <nav_msgs__msg__Odometry__rosidl_typesupport_introspection_c__Odometry_fini_function>:
 800c870:	f008 bcbc 	b.w	80151ec <nav_msgs__msg__Odometry__fini>

0800c874 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800c874:	b510      	push	{r4, lr}
 800c876:	f004 f909 	bl	8010a8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800c87a:	4c0a      	ldr	r4, [pc, #40]	@ (800c8a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x30>)
 800c87c:	60e0      	str	r0, [r4, #12]
 800c87e:	f004 fabd 	bl	8010dfc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 800c882:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800c886:	f004 faed 	bl	8010e64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 800c88a:	4b07      	ldr	r3, [pc, #28]	@ (800c8a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x34>)
 800c88c:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800c890:	681a      	ldr	r2, [r3, #0]
 800c892:	b10a      	cbz	r2, 800c898 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x24>
 800c894:	4804      	ldr	r0, [pc, #16]	@ (800c8a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x34>)
 800c896:	bd10      	pop	{r4, pc}
 800c898:	4a04      	ldr	r2, [pc, #16]	@ (800c8ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x38>)
 800c89a:	4803      	ldr	r0, [pc, #12]	@ (800c8a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x34>)
 800c89c:	6812      	ldr	r2, [r2, #0]
 800c89e:	601a      	str	r2, [r3, #0]
 800c8a0:	bd10      	pop	{r4, pc}
 800c8a2:	bf00      	nop
 800c8a4:	200001f0 	.word	0x200001f0
 800c8a8:	200002e0 	.word	0x200002e0
 800c8ac:	2000032c 	.word	0x2000032c

0800c8b0 <get_serialized_size_nav_msgs__msg__Odometry>:
 800c8b0:	b5d0      	push	{r4, r6, r7, lr}
 800c8b2:	4604      	mov	r4, r0
 800c8b4:	b1c0      	cbz	r0, 800c8e8 <get_serialized_size_nav_msgs__msg__Odometry+0x38>
 800c8b6:	460f      	mov	r7, r1
 800c8b8:	f004 f91e 	bl	8010af8 <get_serialized_size_std_msgs__msg__Header>
 800c8bc:	183e      	adds	r6, r7, r0
 800c8be:	2104      	movs	r1, #4
 800c8c0:	4630      	mov	r0, r6
 800c8c2:	f7ff ff4f 	bl	800c764 <ucdr_alignment>
 800c8c6:	69a3      	ldr	r3, [r4, #24]
 800c8c8:	3305      	adds	r3, #5
 800c8ca:	4403      	add	r3, r0
 800c8cc:	441e      	add	r6, r3
 800c8ce:	4631      	mov	r1, r6
 800c8d0:	f104 0020 	add.w	r0, r4, #32
 800c8d4:	f004 fadc 	bl	8010e90 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 800c8d8:	4406      	add	r6, r0
 800c8da:	4631      	mov	r1, r6
 800c8dc:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 800c8e0:	f004 fb46 	bl	8010f70 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 800c8e4:	1bc0      	subs	r0, r0, r7
 800c8e6:	4430      	add	r0, r6
 800c8e8:	bdd0      	pop	{r4, r6, r7, pc}
 800c8ea:	bf00      	nop

0800c8ec <_Odometry__cdr_deserialize>:
 800c8ec:	b570      	push	{r4, r5, r6, lr}
 800c8ee:	460c      	mov	r4, r1
 800c8f0:	b082      	sub	sp, #8
 800c8f2:	b351      	cbz	r1, 800c94a <_Odometry__cdr_deserialize+0x5e>
 800c8f4:	4605      	mov	r5, r0
 800c8f6:	f004 f981 	bl	8010bfc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800c8fa:	6843      	ldr	r3, [r0, #4]
 800c8fc:	4621      	mov	r1, r4
 800c8fe:	68db      	ldr	r3, [r3, #12]
 800c900:	4628      	mov	r0, r5
 800c902:	4798      	blx	r3
 800c904:	69e6      	ldr	r6, [r4, #28]
 800c906:	6961      	ldr	r1, [r4, #20]
 800c908:	ab01      	add	r3, sp, #4
 800c90a:	4632      	mov	r2, r6
 800c90c:	4628      	mov	r0, r5
 800c90e:	f004 fd87 	bl	8011420 <ucdr_deserialize_sequence_char>
 800c912:	b9a8      	cbnz	r0, 800c940 <_Odometry__cdr_deserialize+0x54>
 800c914:	9a01      	ldr	r2, [sp, #4]
 800c916:	4296      	cmp	r6, r2
 800c918:	d31a      	bcc.n	800c950 <_Odometry__cdr_deserialize+0x64>
 800c91a:	f004 fb25 	bl	8010f68 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 800c91e:	6843      	ldr	r3, [r0, #4]
 800c920:	f104 0120 	add.w	r1, r4, #32
 800c924:	68db      	ldr	r3, [r3, #12]
 800c926:	4628      	mov	r0, r5
 800c928:	4798      	blx	r3
 800c92a:	f004 fb8d 	bl	8011048 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 800c92e:	6843      	ldr	r3, [r0, #4]
 800c930:	68db      	ldr	r3, [r3, #12]
 800c932:	f504 71bc 	add.w	r1, r4, #376	@ 0x178
 800c936:	4628      	mov	r0, r5
 800c938:	b002      	add	sp, #8
 800c93a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c93e:	4718      	bx	r3
 800c940:	9b01      	ldr	r3, [sp, #4]
 800c942:	b103      	cbz	r3, 800c946 <_Odometry__cdr_deserialize+0x5a>
 800c944:	3b01      	subs	r3, #1
 800c946:	61a3      	str	r3, [r4, #24]
 800c948:	e7e7      	b.n	800c91a <_Odometry__cdr_deserialize+0x2e>
 800c94a:	4608      	mov	r0, r1
 800c94c:	b002      	add	sp, #8
 800c94e:	bd70      	pop	{r4, r5, r6, pc}
 800c950:	2101      	movs	r1, #1
 800c952:	75a8      	strb	r0, [r5, #22]
 800c954:	7569      	strb	r1, [r5, #21]
 800c956:	61a0      	str	r0, [r4, #24]
 800c958:	4628      	mov	r0, r5
 800c95a:	f7ff ff19 	bl	800c790 <ucdr_align_to>
 800c95e:	9901      	ldr	r1, [sp, #4]
 800c960:	4628      	mov	r0, r5
 800c962:	f7ff ff4b 	bl	800c7fc <ucdr_advance_buffer>
 800c966:	e7d8      	b.n	800c91a <_Odometry__cdr_deserialize+0x2e>

0800c968 <_Odometry__cdr_serialize>:
 800c968:	b348      	cbz	r0, 800c9be <_Odometry__cdr_serialize+0x56>
 800c96a:	b570      	push	{r4, r5, r6, lr}
 800c96c:	4604      	mov	r4, r0
 800c96e:	460e      	mov	r6, r1
 800c970:	f004 f944 	bl	8010bfc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800c974:	6843      	ldr	r3, [r0, #4]
 800c976:	4631      	mov	r1, r6
 800c978:	689b      	ldr	r3, [r3, #8]
 800c97a:	4620      	mov	r0, r4
 800c97c:	4798      	blx	r3
 800c97e:	6965      	ldr	r5, [r4, #20]
 800c980:	b1d5      	cbz	r5, 800c9b8 <_Odometry__cdr_serialize+0x50>
 800c982:	4628      	mov	r0, r5
 800c984:	f7f3 fc4e 	bl	8000224 <strlen>
 800c988:	1c42      	adds	r2, r0, #1
 800c98a:	4629      	mov	r1, r5
 800c98c:	61a0      	str	r0, [r4, #24]
 800c98e:	4630      	mov	r0, r6
 800c990:	f004 fd34 	bl	80113fc <ucdr_serialize_sequence_char>
 800c994:	f004 fae8 	bl	8010f68 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 800c998:	6843      	ldr	r3, [r0, #4]
 800c99a:	4631      	mov	r1, r6
 800c99c:	689b      	ldr	r3, [r3, #8]
 800c99e:	f104 0020 	add.w	r0, r4, #32
 800c9a2:	4798      	blx	r3
 800c9a4:	f004 fb50 	bl	8011048 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 800c9a8:	6843      	ldr	r3, [r0, #4]
 800c9aa:	4631      	mov	r1, r6
 800c9ac:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 800c9b0:	689b      	ldr	r3, [r3, #8]
 800c9b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c9b6:	4718      	bx	r3
 800c9b8:	462a      	mov	r2, r5
 800c9ba:	4628      	mov	r0, r5
 800c9bc:	e7e5      	b.n	800c98a <_Odometry__cdr_serialize+0x22>
 800c9be:	4770      	bx	lr

0800c9c0 <_Odometry__max_serialized_size>:
 800c9c0:	b510      	push	{r4, lr}
 800c9c2:	b082      	sub	sp, #8
 800c9c4:	2301      	movs	r3, #1
 800c9c6:	2100      	movs	r1, #0
 800c9c8:	f10d 0007 	add.w	r0, sp, #7
 800c9cc:	f88d 3007 	strb.w	r3, [sp, #7]
 800c9d0:	f004 f90a 	bl	8010be8 <max_serialized_size_std_msgs__msg__Header>
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	4601      	mov	r1, r0
 800c9d8:	4604      	mov	r4, r0
 800c9da:	f10d 0007 	add.w	r0, sp, #7
 800c9de:	f88d 3007 	strb.w	r3, [sp, #7]
 800c9e2:	f004 fab1 	bl	8010f48 <max_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 800c9e6:	4404      	add	r4, r0
 800c9e8:	4621      	mov	r1, r4
 800c9ea:	f10d 0007 	add.w	r0, sp, #7
 800c9ee:	f004 fb1b 	bl	8011028 <max_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 800c9f2:	4420      	add	r0, r4
 800c9f4:	b002      	add	sp, #8
 800c9f6:	bd10      	pop	{r4, pc}

0800c9f8 <_Odometry__get_serialized_size>:
 800c9f8:	b5d0      	push	{r4, r6, r7, lr}
 800c9fa:	4604      	mov	r4, r0
 800c9fc:	b1b8      	cbz	r0, 800ca2e <_Odometry__get_serialized_size+0x36>
 800c9fe:	2100      	movs	r1, #0
 800ca00:	f004 f87a 	bl	8010af8 <get_serialized_size_std_msgs__msg__Header>
 800ca04:	2104      	movs	r1, #4
 800ca06:	4607      	mov	r7, r0
 800ca08:	f7ff feac 	bl	800c764 <ucdr_alignment>
 800ca0c:	69a3      	ldr	r3, [r4, #24]
 800ca0e:	1d5a      	adds	r2, r3, #5
 800ca10:	19d3      	adds	r3, r2, r7
 800ca12:	4606      	mov	r6, r0
 800ca14:	441e      	add	r6, r3
 800ca16:	4631      	mov	r1, r6
 800ca18:	f104 0020 	add.w	r0, r4, #32
 800ca1c:	f004 fa38 	bl	8010e90 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 800ca20:	4406      	add	r6, r0
 800ca22:	4631      	mov	r1, r6
 800ca24:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 800ca28:	f004 faa2 	bl	8010f70 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 800ca2c:	4430      	add	r0, r6
 800ca2e:	bdd0      	pop	{r4, r6, r7, pc}

0800ca30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800ca30:	4800      	ldr	r0, [pc, #0]	@ (800ca34 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x4>)
 800ca32:	4770      	bx	lr
 800ca34:	200002ec 	.word	0x200002ec

0800ca38 <rcl_get_zero_initialized_context>:
 800ca38:	4a03      	ldr	r2, [pc, #12]	@ (800ca48 <rcl_get_zero_initialized_context+0x10>)
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ca40:	e883 0003 	stmia.w	r3, {r0, r1}
 800ca44:	4618      	mov	r0, r3
 800ca46:	4770      	bx	lr
 800ca48:	0801baec 	.word	0x0801baec

0800ca4c <rcl_context_is_valid>:
 800ca4c:	b118      	cbz	r0, 800ca56 <rcl_context_is_valid+0xa>
 800ca4e:	6840      	ldr	r0, [r0, #4]
 800ca50:	3800      	subs	r0, #0
 800ca52:	bf18      	it	ne
 800ca54:	2001      	movne	r0, #1
 800ca56:	4770      	bx	lr

0800ca58 <rcl_context_get_rmw_context>:
 800ca58:	b110      	cbz	r0, 800ca60 <rcl_context_get_rmw_context+0x8>
 800ca5a:	6800      	ldr	r0, [r0, #0]
 800ca5c:	b100      	cbz	r0, 800ca60 <rcl_context_get_rmw_context+0x8>
 800ca5e:	3028      	adds	r0, #40	@ 0x28
 800ca60:	4770      	bx	lr
 800ca62:	bf00      	nop

0800ca64 <__cleanup_context>:
 800ca64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca68:	4606      	mov	r6, r0
 800ca6a:	6800      	ldr	r0, [r0, #0]
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	6073      	str	r3, [r6, #4]
 800ca70:	2800      	cmp	r0, #0
 800ca72:	d049      	beq.n	800cb08 <__cleanup_context+0xa4>
 800ca74:	6947      	ldr	r7, [r0, #20]
 800ca76:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800ca7a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800ca7e:	b137      	cbz	r7, 800ca8e <__cleanup_context+0x2a>
 800ca80:	3014      	adds	r0, #20
 800ca82:	f000 f8cb 	bl	800cc1c <rcl_init_options_fini>
 800ca86:	4607      	mov	r7, r0
 800ca88:	2800      	cmp	r0, #0
 800ca8a:	d144      	bne.n	800cb16 <__cleanup_context+0xb2>
 800ca8c:	6830      	ldr	r0, [r6, #0]
 800ca8e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ca90:	b143      	cbz	r3, 800caa4 <__cleanup_context+0x40>
 800ca92:	3028      	adds	r0, #40	@ 0x28
 800ca94:	f002 ff3a 	bl	800f90c <rmw_context_fini>
 800ca98:	b118      	cbz	r0, 800caa2 <__cleanup_context+0x3e>
 800ca9a:	2f00      	cmp	r7, #0
 800ca9c:	d03e      	beq.n	800cb1c <__cleanup_context+0xb8>
 800ca9e:	f002 f94b 	bl	800ed38 <rcutils_reset_error>
 800caa2:	6830      	ldr	r0, [r6, #0]
 800caa4:	6a03      	ldr	r3, [r0, #32]
 800caa6:	b1db      	cbz	r3, 800cae0 <__cleanup_context+0x7c>
 800caa8:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800caac:	2a01      	cmp	r2, #1
 800caae:	f17c 0100 	sbcs.w	r1, ip, #0
 800cab2:	db11      	blt.n	800cad8 <__cleanup_context+0x74>
 800cab4:	2400      	movs	r4, #0
 800cab6:	4625      	mov	r5, r4
 800cab8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800cabc:	4649      	mov	r1, r9
 800cabe:	b1b8      	cbz	r0, 800caf0 <__cleanup_context+0x8c>
 800cac0:	47c0      	blx	r8
 800cac2:	6833      	ldr	r3, [r6, #0]
 800cac4:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800cac8:	3401      	adds	r4, #1
 800caca:	f145 0500 	adc.w	r5, r5, #0
 800cace:	4294      	cmp	r4, r2
 800cad0:	eb75 010c 	sbcs.w	r1, r5, ip
 800cad4:	6a1b      	ldr	r3, [r3, #32]
 800cad6:	dbef      	blt.n	800cab8 <__cleanup_context+0x54>
 800cad8:	4618      	mov	r0, r3
 800cada:	4649      	mov	r1, r9
 800cadc:	47c0      	blx	r8
 800cade:	6830      	ldr	r0, [r6, #0]
 800cae0:	4649      	mov	r1, r9
 800cae2:	47c0      	blx	r8
 800cae4:	2300      	movs	r3, #0
 800cae6:	e9c6 3300 	strd	r3, r3, [r6]
 800caea:	4638      	mov	r0, r7
 800caec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800caf0:	3401      	adds	r4, #1
 800caf2:	f145 0500 	adc.w	r5, r5, #0
 800caf6:	4294      	cmp	r4, r2
 800caf8:	eb75 010c 	sbcs.w	r1, r5, ip
 800cafc:	dbdc      	blt.n	800cab8 <__cleanup_context+0x54>
 800cafe:	4618      	mov	r0, r3
 800cb00:	4649      	mov	r1, r9
 800cb02:	47c0      	blx	r8
 800cb04:	6830      	ldr	r0, [r6, #0]
 800cb06:	e7eb      	b.n	800cae0 <__cleanup_context+0x7c>
 800cb08:	4607      	mov	r7, r0
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	e9c6 3300 	strd	r3, r3, [r6]
 800cb10:	4638      	mov	r0, r7
 800cb12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb16:	f002 f90f 	bl	800ed38 <rcutils_reset_error>
 800cb1a:	e7b7      	b.n	800ca8c <__cleanup_context+0x28>
 800cb1c:	f008 fc0a 	bl	8015334 <rcl_convert_rmw_ret_to_rcl_ret>
 800cb20:	4607      	mov	r7, r0
 800cb22:	e7bc      	b.n	800ca9e <__cleanup_context+0x3a>

0800cb24 <rcl_context_fini>:
 800cb24:	b178      	cbz	r0, 800cb46 <rcl_context_fini+0x22>
 800cb26:	b510      	push	{r4, lr}
 800cb28:	4604      	mov	r4, r0
 800cb2a:	6800      	ldr	r0, [r0, #0]
 800cb2c:	b150      	cbz	r0, 800cb44 <rcl_context_fini+0x20>
 800cb2e:	6863      	ldr	r3, [r4, #4]
 800cb30:	b93b      	cbnz	r3, 800cb42 <rcl_context_fini+0x1e>
 800cb32:	f002 f821 	bl	800eb78 <rcutils_allocator_is_valid>
 800cb36:	b120      	cbz	r0, 800cb42 <rcl_context_fini+0x1e>
 800cb38:	4620      	mov	r0, r4
 800cb3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb3e:	f7ff bf91 	b.w	800ca64 <__cleanup_context>
 800cb42:	200b      	movs	r0, #11
 800cb44:	bd10      	pop	{r4, pc}
 800cb46:	200b      	movs	r0, #11
 800cb48:	4770      	bx	lr
 800cb4a:	bf00      	nop

0800cb4c <rcl_get_zero_initialized_init_options>:
 800cb4c:	2000      	movs	r0, #0
 800cb4e:	4770      	bx	lr

0800cb50 <rcl_init_options_init>:
 800cb50:	b084      	sub	sp, #16
 800cb52:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb54:	b097      	sub	sp, #92	@ 0x5c
 800cb56:	ae1d      	add	r6, sp, #116	@ 0x74
 800cb58:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800cb5c:	2800      	cmp	r0, #0
 800cb5e:	d058      	beq.n	800cc12 <rcl_init_options_init+0xc2>
 800cb60:	6803      	ldr	r3, [r0, #0]
 800cb62:	4605      	mov	r5, r0
 800cb64:	b133      	cbz	r3, 800cb74 <rcl_init_options_init+0x24>
 800cb66:	2464      	movs	r4, #100	@ 0x64
 800cb68:	4620      	mov	r0, r4
 800cb6a:	b017      	add	sp, #92	@ 0x5c
 800cb6c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800cb70:	b004      	add	sp, #16
 800cb72:	4770      	bx	lr
 800cb74:	4630      	mov	r0, r6
 800cb76:	f001 ffff 	bl	800eb78 <rcutils_allocator_is_valid>
 800cb7a:	2800      	cmp	r0, #0
 800cb7c:	d049      	beq.n	800cc12 <rcl_init_options_init+0xc2>
 800cb7e:	46b4      	mov	ip, r6
 800cb80:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cb84:	ac11      	add	r4, sp, #68	@ 0x44
 800cb86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cb88:	f8dc 3000 	ldr.w	r3, [ip]
 800cb8c:	6023      	str	r3, [r4, #0]
 800cb8e:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800cb90:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cb92:	2050      	movs	r0, #80	@ 0x50
 800cb94:	4798      	blx	r3
 800cb96:	4604      	mov	r4, r0
 800cb98:	6028      	str	r0, [r5, #0]
 800cb9a:	2800      	cmp	r0, #0
 800cb9c:	d03b      	beq.n	800cc16 <rcl_init_options_init+0xc6>
 800cb9e:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800cba2:	4686      	mov	lr, r0
 800cba4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cba8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cbac:	f8dc 3000 	ldr.w	r3, [ip]
 800cbb0:	f8ce 3000 	str.w	r3, [lr]
 800cbb4:	a802      	add	r0, sp, #8
 800cbb6:	f002 fa83 	bl	800f0c0 <rmw_get_zero_initialized_init_options>
 800cbba:	f10d 0e08 	add.w	lr, sp, #8
 800cbbe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cbc2:	f104 0c18 	add.w	ip, r4, #24
 800cbc6:	682f      	ldr	r7, [r5, #0]
 800cbc8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cbcc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cbd0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cbd4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cbd8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cbdc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800cbe0:	ac20      	add	r4, sp, #128	@ 0x80
 800cbe2:	e88c 0003 	stmia.w	ip, {r0, r1}
 800cbe6:	e894 0003 	ldmia.w	r4, {r0, r1}
 800cbea:	e88d 0003 	stmia.w	sp, {r0, r1}
 800cbee:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800cbf2:	f107 0018 	add.w	r0, r7, #24
 800cbf6:	f002 fbcd 	bl	800f394 <rmw_init_options_init>
 800cbfa:	4604      	mov	r4, r0
 800cbfc:	2800      	cmp	r0, #0
 800cbfe:	d0b3      	beq.n	800cb68 <rcl_init_options_init+0x18>
 800cc00:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800cc02:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800cc04:	6828      	ldr	r0, [r5, #0]
 800cc06:	4798      	blx	r3
 800cc08:	4620      	mov	r0, r4
 800cc0a:	f008 fb93 	bl	8015334 <rcl_convert_rmw_ret_to_rcl_ret>
 800cc0e:	4604      	mov	r4, r0
 800cc10:	e7aa      	b.n	800cb68 <rcl_init_options_init+0x18>
 800cc12:	240b      	movs	r4, #11
 800cc14:	e7a8      	b.n	800cb68 <rcl_init_options_init+0x18>
 800cc16:	240a      	movs	r4, #10
 800cc18:	e7a6      	b.n	800cb68 <rcl_init_options_init+0x18>
 800cc1a:	bf00      	nop

0800cc1c <rcl_init_options_fini>:
 800cc1c:	b530      	push	{r4, r5, lr}
 800cc1e:	b087      	sub	sp, #28
 800cc20:	b1f0      	cbz	r0, 800cc60 <rcl_init_options_fini+0x44>
 800cc22:	6803      	ldr	r3, [r0, #0]
 800cc24:	4604      	mov	r4, r0
 800cc26:	b1db      	cbz	r3, 800cc60 <rcl_init_options_fini+0x44>
 800cc28:	469c      	mov	ip, r3
 800cc2a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cc2e:	f10d 0e04 	add.w	lr, sp, #4
 800cc32:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cc36:	f8dc 3000 	ldr.w	r3, [ip]
 800cc3a:	f8ce 3000 	str.w	r3, [lr]
 800cc3e:	a801      	add	r0, sp, #4
 800cc40:	f001 ff9a 	bl	800eb78 <rcutils_allocator_is_valid>
 800cc44:	b160      	cbz	r0, 800cc60 <rcl_init_options_fini+0x44>
 800cc46:	6820      	ldr	r0, [r4, #0]
 800cc48:	3018      	adds	r0, #24
 800cc4a:	f002 fc79 	bl	800f540 <rmw_init_options_fini>
 800cc4e:	4605      	mov	r5, r0
 800cc50:	b950      	cbnz	r0, 800cc68 <rcl_init_options_fini+0x4c>
 800cc52:	6820      	ldr	r0, [r4, #0]
 800cc54:	9b02      	ldr	r3, [sp, #8]
 800cc56:	9905      	ldr	r1, [sp, #20]
 800cc58:	4798      	blx	r3
 800cc5a:	4628      	mov	r0, r5
 800cc5c:	b007      	add	sp, #28
 800cc5e:	bd30      	pop	{r4, r5, pc}
 800cc60:	250b      	movs	r5, #11
 800cc62:	4628      	mov	r0, r5
 800cc64:	b007      	add	sp, #28
 800cc66:	bd30      	pop	{r4, r5, pc}
 800cc68:	f008 fb64 	bl	8015334 <rcl_convert_rmw_ret_to_rcl_ret>
 800cc6c:	4605      	mov	r5, r0
 800cc6e:	e7f8      	b.n	800cc62 <rcl_init_options_fini+0x46>

0800cc70 <rcl_init_options_copy>:
 800cc70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc74:	b094      	sub	sp, #80	@ 0x50
 800cc76:	2800      	cmp	r0, #0
 800cc78:	d058      	beq.n	800cd2c <rcl_init_options_copy+0xbc>
 800cc7a:	4604      	mov	r4, r0
 800cc7c:	6800      	ldr	r0, [r0, #0]
 800cc7e:	2800      	cmp	r0, #0
 800cc80:	d054      	beq.n	800cd2c <rcl_init_options_copy+0xbc>
 800cc82:	460e      	mov	r6, r1
 800cc84:	f001 ff78 	bl	800eb78 <rcutils_allocator_is_valid>
 800cc88:	2800      	cmp	r0, #0
 800cc8a:	d04f      	beq.n	800cd2c <rcl_init_options_copy+0xbc>
 800cc8c:	2e00      	cmp	r6, #0
 800cc8e:	d04d      	beq.n	800cd2c <rcl_init_options_copy+0xbc>
 800cc90:	6833      	ldr	r3, [r6, #0]
 800cc92:	b123      	cbz	r3, 800cc9e <rcl_init_options_copy+0x2e>
 800cc94:	2464      	movs	r4, #100	@ 0x64
 800cc96:	4620      	mov	r0, r4
 800cc98:	b014      	add	sp, #80	@ 0x50
 800cc9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc9e:	6827      	ldr	r7, [r4, #0]
 800cca0:	46bc      	mov	ip, r7
 800cca2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cca6:	ad0f      	add	r5, sp, #60	@ 0x3c
 800cca8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ccaa:	f8dc 3000 	ldr.w	r3, [ip]
 800ccae:	f8d7 8000 	ldr.w	r8, [r7]
 800ccb2:	602b      	str	r3, [r5, #0]
 800ccb4:	4619      	mov	r1, r3
 800ccb6:	2050      	movs	r0, #80	@ 0x50
 800ccb8:	47c0      	blx	r8
 800ccba:	4605      	mov	r5, r0
 800ccbc:	6030      	str	r0, [r6, #0]
 800ccbe:	b3d0      	cbz	r0, 800cd36 <rcl_init_options_copy+0xc6>
 800ccc0:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800ccc4:	4686      	mov	lr, r0
 800ccc6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ccca:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ccce:	f8dc 3000 	ldr.w	r3, [ip]
 800ccd2:	f8ce 3000 	str.w	r3, [lr]
 800ccd6:	4668      	mov	r0, sp
 800ccd8:	f002 f9f2 	bl	800f0c0 <rmw_get_zero_initialized_init_options>
 800ccdc:	46ee      	mov	lr, sp
 800ccde:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cce2:	f105 0c18 	add.w	ip, r5, #24
 800cce6:	6824      	ldr	r4, [r4, #0]
 800cce8:	6835      	ldr	r5, [r6, #0]
 800ccea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ccee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ccf2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ccf6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ccfa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ccfe:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800cd02:	e88c 0003 	stmia.w	ip, {r0, r1}
 800cd06:	f104 0018 	add.w	r0, r4, #24
 800cd0a:	f105 0118 	add.w	r1, r5, #24
 800cd0e:	f002 fba3 	bl	800f458 <rmw_init_options_copy>
 800cd12:	4604      	mov	r4, r0
 800cd14:	2800      	cmp	r0, #0
 800cd16:	d0be      	beq.n	800cc96 <rcl_init_options_copy+0x26>
 800cd18:	f001 fff8 	bl	800ed0c <rcutils_get_error_string>
 800cd1c:	f002 f80c 	bl	800ed38 <rcutils_reset_error>
 800cd20:	4630      	mov	r0, r6
 800cd22:	f7ff ff7b 	bl	800cc1c <rcl_init_options_fini>
 800cd26:	b140      	cbz	r0, 800cd3a <rcl_init_options_copy+0xca>
 800cd28:	4604      	mov	r4, r0
 800cd2a:	e7b4      	b.n	800cc96 <rcl_init_options_copy+0x26>
 800cd2c:	240b      	movs	r4, #11
 800cd2e:	4620      	mov	r0, r4
 800cd30:	b014      	add	sp, #80	@ 0x50
 800cd32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd36:	240a      	movs	r4, #10
 800cd38:	e7ad      	b.n	800cc96 <rcl_init_options_copy+0x26>
 800cd3a:	4620      	mov	r0, r4
 800cd3c:	b014      	add	sp, #80	@ 0x50
 800cd3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd42:	f008 baf7 	b.w	8015334 <rcl_convert_rmw_ret_to_rcl_ret>
 800cd46:	bf00      	nop

0800cd48 <rcl_init_options_set_domain_id>:
 800cd48:	b120      	cbz	r0, 800cd54 <rcl_init_options_set_domain_id+0xc>
 800cd4a:	6803      	ldr	r3, [r0, #0]
 800cd4c:	b113      	cbz	r3, 800cd54 <rcl_init_options_set_domain_id+0xc>
 800cd4e:	6259      	str	r1, [r3, #36]	@ 0x24
 800cd50:	2000      	movs	r0, #0
 800cd52:	4770      	bx	lr
 800cd54:	200b      	movs	r0, #11
 800cd56:	4770      	bx	lr

0800cd58 <rcl_get_zero_initialized_node>:
 800cd58:	4a03      	ldr	r2, [pc, #12]	@ (800cd68 <rcl_get_zero_initialized_node+0x10>)
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cd60:	e883 0003 	stmia.w	r3, {r0, r1}
 800cd64:	4618      	mov	r0, r3
 800cd66:	4770      	bx	lr
 800cd68:	0801baf4 	.word	0x0801baf4

0800cd6c <rcl_node_init>:
 800cd6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd70:	b0a9      	sub	sp, #164	@ 0xa4
 800cd72:	4604      	mov	r4, r0
 800cd74:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 800cd78:	a823      	add	r0, sp, #140	@ 0x8c
 800cd7a:	460e      	mov	r6, r1
 800cd7c:	4615      	mov	r5, r2
 800cd7e:	461f      	mov	r7, r3
 800cd80:	f008 fbc8 	bl	8015514 <rcl_guard_condition_get_default_options>
 800cd84:	f1b8 0f00 	cmp.w	r8, #0
 800cd88:	f000 80e6 	beq.w	800cf58 <rcl_node_init+0x1ec>
 800cd8c:	4640      	mov	r0, r8
 800cd8e:	f001 fef3 	bl	800eb78 <rcutils_allocator_is_valid>
 800cd92:	2800      	cmp	r0, #0
 800cd94:	f000 80e0 	beq.w	800cf58 <rcl_node_init+0x1ec>
 800cd98:	2e00      	cmp	r6, #0
 800cd9a:	f000 80dd 	beq.w	800cf58 <rcl_node_init+0x1ec>
 800cd9e:	2d00      	cmp	r5, #0
 800cda0:	f000 80da 	beq.w	800cf58 <rcl_node_init+0x1ec>
 800cda4:	2c00      	cmp	r4, #0
 800cda6:	f000 80d7 	beq.w	800cf58 <rcl_node_init+0x1ec>
 800cdaa:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800cdae:	f1b9 0f00 	cmp.w	r9, #0
 800cdb2:	f040 80fd 	bne.w	800cfb0 <rcl_node_init+0x244>
 800cdb6:	2f00      	cmp	r7, #0
 800cdb8:	f000 80ce 	beq.w	800cf58 <rcl_node_init+0x1ec>
 800cdbc:	4638      	mov	r0, r7
 800cdbe:	f7ff fe45 	bl	800ca4c <rcl_context_is_valid>
 800cdc2:	4682      	mov	sl, r0
 800cdc4:	2800      	cmp	r0, #0
 800cdc6:	f000 80cd 	beq.w	800cf64 <rcl_node_init+0x1f8>
 800cdca:	464a      	mov	r2, r9
 800cdcc:	a922      	add	r1, sp, #136	@ 0x88
 800cdce:	4630      	mov	r0, r6
 800cdd0:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 800cdd4:	f002 fa20 	bl	800f218 <rmw_validate_node_name>
 800cdd8:	4681      	mov	r9, r0
 800cdda:	2800      	cmp	r0, #0
 800cddc:	f040 80be 	bne.w	800cf5c <rcl_node_init+0x1f0>
 800cde0:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800cde2:	2800      	cmp	r0, #0
 800cde4:	f040 80f0 	bne.w	800cfc8 <rcl_node_init+0x25c>
 800cde8:	4628      	mov	r0, r5
 800cdea:	f7f3 fa1b 	bl	8000224 <strlen>
 800cdee:	2800      	cmp	r0, #0
 800cdf0:	f040 80bb 	bne.w	800cf6a <rcl_node_init+0x1fe>
 800cdf4:	4d7c      	ldr	r5, [pc, #496]	@ (800cfe8 <rcl_node_init+0x27c>)
 800cdf6:	a922      	add	r1, sp, #136	@ 0x88
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	4628      	mov	r0, r5
 800cdfc:	f002 f9ee 	bl	800f1dc <rmw_validate_namespace>
 800ce00:	4681      	mov	r9, r0
 800ce02:	2800      	cmp	r0, #0
 800ce04:	f040 80aa 	bne.w	800cf5c <rcl_node_init+0x1f0>
 800ce08:	4682      	mov	sl, r0
 800ce0a:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800ce0c:	2800      	cmp	r0, #0
 800ce0e:	f040 80e0 	bne.w	800cfd2 <rcl_node_init+0x266>
 800ce12:	f8d8 3000 	ldr.w	r3, [r8]
 800ce16:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ce1a:	2078      	movs	r0, #120	@ 0x78
 800ce1c:	4798      	blx	r3
 800ce1e:	4681      	mov	r9, r0
 800ce20:	6060      	str	r0, [r4, #4]
 800ce22:	2800      	cmp	r0, #0
 800ce24:	f000 80ca 	beq.w	800cfbc <rcl_node_init+0x250>
 800ce28:	2200      	movs	r2, #0
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 800ce30:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 800ce34:	a808      	add	r0, sp, #32
 800ce36:	f000 f939 	bl	800d0ac <rcl_node_get_default_options>
 800ce3a:	a908      	add	r1, sp, #32
 800ce3c:	4648      	mov	r0, r9
 800ce3e:	2268      	movs	r2, #104	@ 0x68
 800ce40:	f00d fac1 	bl	801a3c6 <memcpy>
 800ce44:	6861      	ldr	r1, [r4, #4]
 800ce46:	6027      	str	r7, [r4, #0]
 800ce48:	4640      	mov	r0, r8
 800ce4a:	f000 f93d 	bl	800d0c8 <rcl_node_options_copy>
 800ce4e:	2800      	cmp	r0, #0
 800ce50:	d158      	bne.n	800cf04 <rcl_node_init+0x198>
 800ce52:	4628      	mov	r0, r5
 800ce54:	f7f3 f9e6 	bl	8000224 <strlen>
 800ce58:	4428      	add	r0, r5
 800ce5a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800ce5e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800ce62:	2b2f      	cmp	r3, #47	@ 0x2f
 800ce64:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800ce68:	9300      	str	r3, [sp, #0]
 800ce6a:	bf0c      	ite	eq
 800ce6c:	4b5f      	ldreq	r3, [pc, #380]	@ (800cfec <rcl_node_init+0x280>)
 800ce6e:	4b60      	ldrne	r3, [pc, #384]	@ (800cff0 <rcl_node_init+0x284>)
 800ce70:	9302      	str	r3, [sp, #8]
 800ce72:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ce76:	9301      	str	r3, [sp, #4]
 800ce78:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800ce7c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800ce80:	f001 ff76 	bl	800ed70 <rcutils_format_string_limit>
 800ce84:	6823      	ldr	r3, [r4, #0]
 800ce86:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 800ce8a:	6818      	ldr	r0, [r3, #0]
 800ce8c:	4631      	mov	r1, r6
 800ce8e:	3028      	adds	r0, #40	@ 0x28
 800ce90:	462a      	mov	r2, r5
 800ce92:	6866      	ldr	r6, [r4, #4]
 800ce94:	f002 fde6 	bl	800fa64 <rmw_create_node>
 800ce98:	6863      	ldr	r3, [r4, #4]
 800ce9a:	66b0      	str	r0, [r6, #104]	@ 0x68
 800ce9c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800ce9e:	2800      	cmp	r0, #0
 800cea0:	d032      	beq.n	800cf08 <rcl_node_init+0x19c>
 800cea2:	f002 fe73 	bl	800fb8c <rmw_node_get_graph_guard_condition>
 800cea6:	4681      	mov	r9, r0
 800cea8:	b360      	cbz	r0, 800cf04 <rcl_node_init+0x198>
 800ceaa:	f8d8 3000 	ldr.w	r3, [r8]
 800ceae:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ceb2:	6866      	ldr	r6, [r4, #4]
 800ceb4:	2008      	movs	r0, #8
 800ceb6:	4798      	blx	r3
 800ceb8:	6863      	ldr	r3, [r4, #4]
 800ceba:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800cebc:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 800cec0:	f1bb 0f00 	cmp.w	fp, #0
 800cec4:	d020      	beq.n	800cf08 <rcl_node_init+0x19c>
 800cec6:	a806      	add	r0, sp, #24
 800cec8:	f008 fa48 	bl	801535c <rcl_get_zero_initialized_guard_condition>
 800cecc:	a806      	add	r0, sp, #24
 800cece:	c803      	ldmia	r0, {r0, r1}
 800ced0:	6863      	ldr	r3, [r4, #4]
 800ced2:	46c4      	mov	ip, r8
 800ced4:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800ced8:	e88b 0003 	stmia.w	fp, {r0, r1}
 800cedc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cee0:	ae23      	add	r6, sp, #140	@ 0x8c
 800cee2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800cee4:	f8dc 3000 	ldr.w	r3, [ip]
 800cee8:	6033      	str	r3, [r6, #0]
 800ceea:	ab28      	add	r3, sp, #160	@ 0xa0
 800ceec:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800cef0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800cef4:	4649      	mov	r1, r9
 800cef6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cef8:	463a      	mov	r2, r7
 800cefa:	4670      	mov	r0, lr
 800cefc:	f008 fa84 	bl	8015408 <rcl_guard_condition_init_from_rmw>
 800cf00:	4681      	mov	r9, r0
 800cf02:	b328      	cbz	r0, 800cf50 <rcl_node_init+0x1e4>
 800cf04:	6863      	ldr	r3, [r4, #4]
 800cf06:	b1f3      	cbz	r3, 800cf46 <rcl_node_init+0x1da>
 800cf08:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800cf0a:	b128      	cbz	r0, 800cf18 <rcl_node_init+0x1ac>
 800cf0c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cf10:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800cf14:	4798      	blx	r3
 800cf16:	6863      	ldr	r3, [r4, #4]
 800cf18:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800cf1a:	b110      	cbz	r0, 800cf22 <rcl_node_init+0x1b6>
 800cf1c:	f002 fdba 	bl	800fa94 <rmw_destroy_node>
 800cf20:	6863      	ldr	r3, [r4, #4]
 800cf22:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800cf24:	b148      	cbz	r0, 800cf3a <rcl_node_init+0x1ce>
 800cf26:	f008 facf 	bl	80154c8 <rcl_guard_condition_fini>
 800cf2a:	6863      	ldr	r3, [r4, #4]
 800cf2c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800cf30:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800cf32:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cf36:	4798      	blx	r3
 800cf38:	6863      	ldr	r3, [r4, #4]
 800cf3a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cf44:	4798      	blx	r3
 800cf46:	2300      	movs	r3, #0
 800cf48:	e9c4 3300 	strd	r3, r3, [r4]
 800cf4c:	f04f 0901 	mov.w	r9, #1
 800cf50:	f1ba 0f00 	cmp.w	sl, #0
 800cf54:	d125      	bne.n	800cfa2 <rcl_node_init+0x236>
 800cf56:	e001      	b.n	800cf5c <rcl_node_init+0x1f0>
 800cf58:	f04f 090b 	mov.w	r9, #11
 800cf5c:	4648      	mov	r0, r9
 800cf5e:	b029      	add	sp, #164	@ 0xa4
 800cf60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf64:	f04f 0965 	mov.w	r9, #101	@ 0x65
 800cf68:	e7f8      	b.n	800cf5c <rcl_node_init+0x1f0>
 800cf6a:	782b      	ldrb	r3, [r5, #0]
 800cf6c:	2b2f      	cmp	r3, #47	@ 0x2f
 800cf6e:	f43f af42 	beq.w	800cdf6 <rcl_node_init+0x8a>
 800cf72:	9503      	str	r5, [sp, #12]
 800cf74:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800cf78:	9300      	str	r3, [sp, #0]
 800cf7a:	4b1e      	ldr	r3, [pc, #120]	@ (800cff4 <rcl_node_init+0x288>)
 800cf7c:	9302      	str	r3, [sp, #8]
 800cf7e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800cf82:	9301      	str	r3, [sp, #4]
 800cf84:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800cf88:	f001 fef2 	bl	800ed70 <rcutils_format_string_limit>
 800cf8c:	4605      	mov	r5, r0
 800cf8e:	b340      	cbz	r0, 800cfe2 <rcl_node_init+0x276>
 800cf90:	2200      	movs	r2, #0
 800cf92:	a922      	add	r1, sp, #136	@ 0x88
 800cf94:	9222      	str	r2, [sp, #136]	@ 0x88
 800cf96:	f002 f921 	bl	800f1dc <rmw_validate_namespace>
 800cf9a:	4681      	mov	r9, r0
 800cf9c:	2800      	cmp	r0, #0
 800cf9e:	f43f af34 	beq.w	800ce0a <rcl_node_init+0x9e>
 800cfa2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cfa6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800cfaa:	4628      	mov	r0, r5
 800cfac:	4798      	blx	r3
 800cfae:	e7d5      	b.n	800cf5c <rcl_node_init+0x1f0>
 800cfb0:	f04f 0964 	mov.w	r9, #100	@ 0x64
 800cfb4:	4648      	mov	r0, r9
 800cfb6:	b029      	add	sp, #164	@ 0xa4
 800cfb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfbc:	f04f 090a 	mov.w	r9, #10
 800cfc0:	f1ba 0f00 	cmp.w	sl, #0
 800cfc4:	d1ed      	bne.n	800cfa2 <rcl_node_init+0x236>
 800cfc6:	e7c9      	b.n	800cf5c <rcl_node_init+0x1f0>
 800cfc8:	f002 f978 	bl	800f2bc <rmw_node_name_validation_result_string>
 800cfcc:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 800cfd0:	e7c4      	b.n	800cf5c <rcl_node_init+0x1f0>
 800cfd2:	f002 f915 	bl	800f200 <rmw_namespace_validation_result_string>
 800cfd6:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 800cfda:	f1ba 0f00 	cmp.w	sl, #0
 800cfde:	d1e0      	bne.n	800cfa2 <rcl_node_init+0x236>
 800cfe0:	e7bc      	b.n	800cf5c <rcl_node_init+0x1f0>
 800cfe2:	f04f 090a 	mov.w	r9, #10
 800cfe6:	e7b9      	b.n	800cf5c <rcl_node_init+0x1f0>
 800cfe8:	0801b3dc 	.word	0x0801b3dc
 800cfec:	0801b3e4 	.word	0x0801b3e4
 800cff0:	0801b3ec 	.word	0x0801b3ec
 800cff4:	0801b3e0 	.word	0x0801b3e0

0800cff8 <rcl_node_fini>:
 800cff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cffa:	b320      	cbz	r0, 800d046 <rcl_node_fini+0x4e>
 800cffc:	6845      	ldr	r5, [r0, #4]
 800cffe:	4604      	mov	r4, r0
 800d000:	b1fd      	cbz	r5, 800d042 <rcl_node_fini+0x4a>
 800d002:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 800d004:	686f      	ldr	r7, [r5, #4]
 800d006:	692e      	ldr	r6, [r5, #16]
 800d008:	f002 fd44 	bl	800fa94 <rmw_destroy_node>
 800d00c:	6863      	ldr	r3, [r4, #4]
 800d00e:	4605      	mov	r5, r0
 800d010:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800d012:	f008 fa59 	bl	80154c8 <rcl_guard_condition_fini>
 800d016:	ea55 0300 	orrs.w	r3, r5, r0
 800d01a:	6863      	ldr	r3, [r4, #4]
 800d01c:	4631      	mov	r1, r6
 800d01e:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800d020:	bf14      	ite	ne
 800d022:	2501      	movne	r5, #1
 800d024:	2500      	moveq	r5, #0
 800d026:	47b8      	blx	r7
 800d028:	6863      	ldr	r3, [r4, #4]
 800d02a:	4631      	mov	r1, r6
 800d02c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800d02e:	47b8      	blx	r7
 800d030:	6863      	ldr	r3, [r4, #4]
 800d032:	4631      	mov	r1, r6
 800d034:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800d036:	47b8      	blx	r7
 800d038:	6860      	ldr	r0, [r4, #4]
 800d03a:	4631      	mov	r1, r6
 800d03c:	47b8      	blx	r7
 800d03e:	2300      	movs	r3, #0
 800d040:	6063      	str	r3, [r4, #4]
 800d042:	4628      	mov	r0, r5
 800d044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d046:	25c8      	movs	r5, #200	@ 0xc8
 800d048:	4628      	mov	r0, r5
 800d04a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d04c <rcl_node_is_valid_except_context>:
 800d04c:	b128      	cbz	r0, 800d05a <rcl_node_is_valid_except_context+0xe>
 800d04e:	6840      	ldr	r0, [r0, #4]
 800d050:	b118      	cbz	r0, 800d05a <rcl_node_is_valid_except_context+0xe>
 800d052:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800d054:	3800      	subs	r0, #0
 800d056:	bf18      	it	ne
 800d058:	2001      	movne	r0, #1
 800d05a:	4770      	bx	lr

0800d05c <rcl_node_is_valid>:
 800d05c:	b130      	cbz	r0, 800d06c <rcl_node_is_valid+0x10>
 800d05e:	6843      	ldr	r3, [r0, #4]
 800d060:	b123      	cbz	r3, 800d06c <rcl_node_is_valid+0x10>
 800d062:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d064:	b113      	cbz	r3, 800d06c <rcl_node_is_valid+0x10>
 800d066:	6800      	ldr	r0, [r0, #0]
 800d068:	f7ff bcf0 	b.w	800ca4c <rcl_context_is_valid>
 800d06c:	2000      	movs	r0, #0
 800d06e:	4770      	bx	lr

0800d070 <rcl_node_get_name>:
 800d070:	b120      	cbz	r0, 800d07c <rcl_node_get_name+0xc>
 800d072:	6840      	ldr	r0, [r0, #4]
 800d074:	b110      	cbz	r0, 800d07c <rcl_node_get_name+0xc>
 800d076:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800d078:	b100      	cbz	r0, 800d07c <rcl_node_get_name+0xc>
 800d07a:	6880      	ldr	r0, [r0, #8]
 800d07c:	4770      	bx	lr
 800d07e:	bf00      	nop

0800d080 <rcl_node_get_namespace>:
 800d080:	b120      	cbz	r0, 800d08c <rcl_node_get_namespace+0xc>
 800d082:	6840      	ldr	r0, [r0, #4]
 800d084:	b110      	cbz	r0, 800d08c <rcl_node_get_namespace+0xc>
 800d086:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800d088:	b100      	cbz	r0, 800d08c <rcl_node_get_namespace+0xc>
 800d08a:	68c0      	ldr	r0, [r0, #12]
 800d08c:	4770      	bx	lr
 800d08e:	bf00      	nop

0800d090 <rcl_node_get_options>:
 800d090:	b128      	cbz	r0, 800d09e <rcl_node_get_options+0xe>
 800d092:	6840      	ldr	r0, [r0, #4]
 800d094:	b118      	cbz	r0, 800d09e <rcl_node_get_options+0xe>
 800d096:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800d098:	2b00      	cmp	r3, #0
 800d09a:	bf08      	it	eq
 800d09c:	2000      	moveq	r0, #0
 800d09e:	4770      	bx	lr

0800d0a0 <rcl_node_get_rmw_handle>:
 800d0a0:	b110      	cbz	r0, 800d0a8 <rcl_node_get_rmw_handle+0x8>
 800d0a2:	6840      	ldr	r0, [r0, #4]
 800d0a4:	b100      	cbz	r0, 800d0a8 <rcl_node_get_rmw_handle+0x8>
 800d0a6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800d0a8:	4770      	bx	lr
 800d0aa:	bf00      	nop

0800d0ac <rcl_node_get_default_options>:
 800d0ac:	b510      	push	{r4, lr}
 800d0ae:	2268      	movs	r2, #104	@ 0x68
 800d0b0:	4604      	mov	r4, r0
 800d0b2:	2100      	movs	r1, #0
 800d0b4:	f00d f8be 	bl	801a234 <memset>
 800d0b8:	4620      	mov	r0, r4
 800d0ba:	f001 fd4f 	bl	800eb5c <rcutils_get_default_allocator>
 800d0be:	2301      	movs	r3, #1
 800d0c0:	7523      	strb	r3, [r4, #20]
 800d0c2:	4620      	mov	r0, r4
 800d0c4:	bd10      	pop	{r4, pc}
 800d0c6:	bf00      	nop

0800d0c8 <rcl_node_options_copy>:
 800d0c8:	b1d0      	cbz	r0, 800d100 <rcl_node_options_copy+0x38>
 800d0ca:	b570      	push	{r4, r5, r6, lr}
 800d0cc:	460c      	mov	r4, r1
 800d0ce:	b1a9      	cbz	r1, 800d0fc <rcl_node_options_copy+0x34>
 800d0d0:	4288      	cmp	r0, r1
 800d0d2:	4684      	mov	ip, r0
 800d0d4:	d012      	beq.n	800d0fc <rcl_node_options_copy+0x34>
 800d0d6:	4605      	mov	r5, r0
 800d0d8:	8a86      	ldrh	r6, [r0, #20]
 800d0da:	468e      	mov	lr, r1
 800d0dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d0de:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d0e2:	682b      	ldr	r3, [r5, #0]
 800d0e4:	f8ce 3000 	str.w	r3, [lr]
 800d0e8:	f10c 0118 	add.w	r1, ip, #24
 800d0ec:	2250      	movs	r2, #80	@ 0x50
 800d0ee:	82a6      	strh	r6, [r4, #20]
 800d0f0:	f104 0018 	add.w	r0, r4, #24
 800d0f4:	f00d f967 	bl	801a3c6 <memcpy>
 800d0f8:	2000      	movs	r0, #0
 800d0fa:	bd70      	pop	{r4, r5, r6, pc}
 800d0fc:	200b      	movs	r0, #11
 800d0fe:	bd70      	pop	{r4, r5, r6, pc}
 800d100:	200b      	movs	r0, #11
 800d102:	4770      	bx	lr

0800d104 <rcl_get_zero_initialized_publisher>:
 800d104:	4b01      	ldr	r3, [pc, #4]	@ (800d10c <rcl_get_zero_initialized_publisher+0x8>)
 800d106:	6818      	ldr	r0, [r3, #0]
 800d108:	4770      	bx	lr
 800d10a:	bf00      	nop
 800d10c:	0801bafc 	.word	0x0801bafc

0800d110 <rcl_publisher_init>:
 800d110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d114:	b088      	sub	sp, #32
 800d116:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800d118:	2d00      	cmp	r5, #0
 800d11a:	d069      	beq.n	800d1f0 <rcl_publisher_init+0xe0>
 800d11c:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800d120:	4604      	mov	r4, r0
 800d122:	4648      	mov	r0, r9
 800d124:	460e      	mov	r6, r1
 800d126:	4690      	mov	r8, r2
 800d128:	461f      	mov	r7, r3
 800d12a:	f001 fd25 	bl	800eb78 <rcutils_allocator_is_valid>
 800d12e:	2800      	cmp	r0, #0
 800d130:	d05e      	beq.n	800d1f0 <rcl_publisher_init+0xe0>
 800d132:	2c00      	cmp	r4, #0
 800d134:	d05c      	beq.n	800d1f0 <rcl_publisher_init+0xe0>
 800d136:	f8d4 a000 	ldr.w	sl, [r4]
 800d13a:	f1ba 0f00 	cmp.w	sl, #0
 800d13e:	d004      	beq.n	800d14a <rcl_publisher_init+0x3a>
 800d140:	2764      	movs	r7, #100	@ 0x64
 800d142:	4638      	mov	r0, r7
 800d144:	b008      	add	sp, #32
 800d146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d14a:	4630      	mov	r0, r6
 800d14c:	f7ff ff86 	bl	800d05c <rcl_node_is_valid>
 800d150:	2800      	cmp	r0, #0
 800d152:	d052      	beq.n	800d1fa <rcl_publisher_init+0xea>
 800d154:	f1b8 0f00 	cmp.w	r8, #0
 800d158:	d04a      	beq.n	800d1f0 <rcl_publisher_init+0xe0>
 800d15a:	2f00      	cmp	r7, #0
 800d15c:	d048      	beq.n	800d1f0 <rcl_publisher_init+0xe0>
 800d15e:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800d162:	aa07      	add	r2, sp, #28
 800d164:	9205      	str	r2, [sp, #20]
 800d166:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800d16a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d16e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800d172:	f8cd a01c 	str.w	sl, [sp, #28]
 800d176:	4639      	mov	r1, r7
 800d178:	e899 000c 	ldmia.w	r9, {r2, r3}
 800d17c:	4630      	mov	r0, r6
 800d17e:	f008 fb29 	bl	80157d4 <rcl_node_resolve_name>
 800d182:	4607      	mov	r7, r0
 800d184:	2800      	cmp	r0, #0
 800d186:	d14f      	bne.n	800d228 <rcl_publisher_init+0x118>
 800d188:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800d18a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800d18c:	20c8      	movs	r0, #200	@ 0xc8
 800d18e:	4798      	blx	r3
 800d190:	6020      	str	r0, [r4, #0]
 800d192:	2800      	cmp	r0, #0
 800d194:	d04e      	beq.n	800d234 <rcl_publisher_init+0x124>
 800d196:	4630      	mov	r0, r6
 800d198:	f7ff ff82 	bl	800d0a0 <rcl_node_get_rmw_handle>
 800d19c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800d1a0:	9300      	str	r3, [sp, #0]
 800d1a2:	9a07      	ldr	r2, [sp, #28]
 800d1a4:	6827      	ldr	r7, [r4, #0]
 800d1a6:	462b      	mov	r3, r5
 800d1a8:	4641      	mov	r1, r8
 800d1aa:	f002 fd59 	bl	800fc60 <rmw_create_publisher>
 800d1ae:	6823      	ldr	r3, [r4, #0]
 800d1b0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800d1b4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800d1b8:	b370      	cbz	r0, 800d218 <rcl_publisher_init+0x108>
 800d1ba:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800d1be:	f002 fe2d 	bl	800fe1c <rmw_publisher_get_actual_qos>
 800d1c2:	6823      	ldr	r3, [r4, #0]
 800d1c4:	4607      	mov	r7, r0
 800d1c6:	b9d0      	cbnz	r0, 800d1fe <rcl_publisher_init+0xee>
 800d1c8:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800d1cc:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800d1d0:	4629      	mov	r1, r5
 800d1d2:	2270      	movs	r2, #112	@ 0x70
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f00d f8f6 	bl	801a3c6 <memcpy>
 800d1da:	6832      	ldr	r2, [r6, #0]
 800d1dc:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800d1e0:	9807      	ldr	r0, [sp, #28]
 800d1e2:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800d1e4:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800d1e6:	4798      	blx	r3
 800d1e8:	4638      	mov	r0, r7
 800d1ea:	b008      	add	sp, #32
 800d1ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1f0:	270b      	movs	r7, #11
 800d1f2:	4638      	mov	r0, r7
 800d1f4:	b008      	add	sp, #32
 800d1f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1fa:	27c8      	movs	r7, #200	@ 0xc8
 800d1fc:	e7a1      	b.n	800d142 <rcl_publisher_init+0x32>
 800d1fe:	b18b      	cbz	r3, 800d224 <rcl_publisher_init+0x114>
 800d200:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800d204:	b142      	cbz	r2, 800d218 <rcl_publisher_init+0x108>
 800d206:	4630      	mov	r0, r6
 800d208:	f7ff ff4a 	bl	800d0a0 <rcl_node_get_rmw_handle>
 800d20c:	6823      	ldr	r3, [r4, #0]
 800d20e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800d212:	f002 fe13 	bl	800fe3c <rmw_destroy_publisher>
 800d216:	6823      	ldr	r3, [r4, #0]
 800d218:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800d21a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800d21c:	4618      	mov	r0, r3
 800d21e:	4790      	blx	r2
 800d220:	2300      	movs	r3, #0
 800d222:	6023      	str	r3, [r4, #0]
 800d224:	2701      	movs	r7, #1
 800d226:	e7db      	b.n	800d1e0 <rcl_publisher_init+0xd0>
 800d228:	2867      	cmp	r0, #103	@ 0x67
 800d22a:	d0d9      	beq.n	800d1e0 <rcl_publisher_init+0xd0>
 800d22c:	2869      	cmp	r0, #105	@ 0x69
 800d22e:	d003      	beq.n	800d238 <rcl_publisher_init+0x128>
 800d230:	280a      	cmp	r0, #10
 800d232:	d1f7      	bne.n	800d224 <rcl_publisher_init+0x114>
 800d234:	270a      	movs	r7, #10
 800d236:	e7d3      	b.n	800d1e0 <rcl_publisher_init+0xd0>
 800d238:	2767      	movs	r7, #103	@ 0x67
 800d23a:	e7d1      	b.n	800d1e0 <rcl_publisher_init+0xd0>

0800d23c <rcl_publisher_fini>:
 800d23c:	b570      	push	{r4, r5, r6, lr}
 800d23e:	b300      	cbz	r0, 800d282 <rcl_publisher_fini+0x46>
 800d240:	4604      	mov	r4, r0
 800d242:	4608      	mov	r0, r1
 800d244:	460d      	mov	r5, r1
 800d246:	f7ff ff01 	bl	800d04c <rcl_node_is_valid_except_context>
 800d24a:	b1f0      	cbz	r0, 800d28a <rcl_publisher_fini+0x4e>
 800d24c:	6823      	ldr	r3, [r4, #0]
 800d24e:	b1ab      	cbz	r3, 800d27c <rcl_publisher_fini+0x40>
 800d250:	4628      	mov	r0, r5
 800d252:	6d5e      	ldr	r6, [r3, #84]	@ 0x54
 800d254:	6e1d      	ldr	r5, [r3, #96]	@ 0x60
 800d256:	f7ff ff23 	bl	800d0a0 <rcl_node_get_rmw_handle>
 800d25a:	b1c8      	cbz	r0, 800d290 <rcl_publisher_fini+0x54>
 800d25c:	6823      	ldr	r3, [r4, #0]
 800d25e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800d262:	f002 fdeb 	bl	800fe3c <rmw_destroy_publisher>
 800d266:	4603      	mov	r3, r0
 800d268:	4629      	mov	r1, r5
 800d26a:	6820      	ldr	r0, [r4, #0]
 800d26c:	1e1d      	subs	r5, r3, #0
 800d26e:	bf18      	it	ne
 800d270:	2501      	movne	r5, #1
 800d272:	47b0      	blx	r6
 800d274:	2300      	movs	r3, #0
 800d276:	6023      	str	r3, [r4, #0]
 800d278:	4628      	mov	r0, r5
 800d27a:	bd70      	pop	{r4, r5, r6, pc}
 800d27c:	461d      	mov	r5, r3
 800d27e:	4628      	mov	r0, r5
 800d280:	bd70      	pop	{r4, r5, r6, pc}
 800d282:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 800d286:	4628      	mov	r0, r5
 800d288:	bd70      	pop	{r4, r5, r6, pc}
 800d28a:	25c8      	movs	r5, #200	@ 0xc8
 800d28c:	4628      	mov	r0, r5
 800d28e:	bd70      	pop	{r4, r5, r6, pc}
 800d290:	250b      	movs	r5, #11
 800d292:	e7f1      	b.n	800d278 <rcl_publisher_fini+0x3c>

0800d294 <rcl_publisher_get_default_options>:
 800d294:	b570      	push	{r4, r5, r6, lr}
 800d296:	4d14      	ldr	r5, [pc, #80]	@ (800d2e8 <rcl_publisher_get_default_options+0x54>)
 800d298:	4914      	ldr	r1, [pc, #80]	@ (800d2ec <rcl_publisher_get_default_options+0x58>)
 800d29a:	b088      	sub	sp, #32
 800d29c:	4604      	mov	r4, r0
 800d29e:	2250      	movs	r2, #80	@ 0x50
 800d2a0:	4628      	mov	r0, r5
 800d2a2:	f00d f890 	bl	801a3c6 <memcpy>
 800d2a6:	a802      	add	r0, sp, #8
 800d2a8:	f001 fc58 	bl	800eb5c <rcutils_get_default_allocator>
 800d2ac:	f10d 0c08 	add.w	ip, sp, #8
 800d2b0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d2b4:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800d2b8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d2bc:	466e      	mov	r6, sp
 800d2be:	f8dc 3000 	ldr.w	r3, [ip]
 800d2c2:	f8ce 3000 	str.w	r3, [lr]
 800d2c6:	4630      	mov	r0, r6
 800d2c8:	f001 ff0a 	bl	800f0e0 <rmw_get_default_publisher_options>
 800d2cc:	e896 0003 	ldmia.w	r6, {r0, r1}
 800d2d0:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800d2d4:	e883 0003 	stmia.w	r3, {r0, r1}
 800d2d8:	2270      	movs	r2, #112	@ 0x70
 800d2da:	4629      	mov	r1, r5
 800d2dc:	4620      	mov	r0, r4
 800d2de:	f00d f872 	bl	801a3c6 <memcpy>
 800d2e2:	4620      	mov	r0, r4
 800d2e4:	b008      	add	sp, #32
 800d2e6:	bd70      	pop	{r4, r5, r6, pc}
 800d2e8:	2000ce18 	.word	0x2000ce18
 800d2ec:	0801bb00 	.word	0x0801bb00

0800d2f0 <rcl_publish>:
 800d2f0:	b1f8      	cbz	r0, 800d332 <rcl_publish+0x42>
 800d2f2:	6803      	ldr	r3, [r0, #0]
 800d2f4:	b570      	push	{r4, r5, r6, lr}
 800d2f6:	4604      	mov	r4, r0
 800d2f8:	b1b3      	cbz	r3, 800d328 <rcl_publish+0x38>
 800d2fa:	4616      	mov	r6, r2
 800d2fc:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800d300:	b192      	cbz	r2, 800d328 <rcl_publish+0x38>
 800d302:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800d306:	460d      	mov	r5, r1
 800d308:	f7ff fba0 	bl	800ca4c <rcl_context_is_valid>
 800d30c:	b160      	cbz	r0, 800d328 <rcl_publish+0x38>
 800d30e:	6823      	ldr	r3, [r4, #0]
 800d310:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800d314:	b140      	cbz	r0, 800d328 <rcl_publish+0x38>
 800d316:	b155      	cbz	r5, 800d32e <rcl_publish+0x3e>
 800d318:	4632      	mov	r2, r6
 800d31a:	4629      	mov	r1, r5
 800d31c:	f002 fc40 	bl	800fba0 <rmw_publish>
 800d320:	3800      	subs	r0, #0
 800d322:	bf18      	it	ne
 800d324:	2001      	movne	r0, #1
 800d326:	bd70      	pop	{r4, r5, r6, pc}
 800d328:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800d32c:	bd70      	pop	{r4, r5, r6, pc}
 800d32e:	200b      	movs	r0, #11
 800d330:	bd70      	pop	{r4, r5, r6, pc}
 800d332:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800d336:	4770      	bx	lr

0800d338 <rcl_publisher_get_rmw_handle>:
 800d338:	b118      	cbz	r0, 800d342 <rcl_publisher_get_rmw_handle+0xa>
 800d33a:	6800      	ldr	r0, [r0, #0]
 800d33c:	b108      	cbz	r0, 800d342 <rcl_publisher_get_rmw_handle+0xa>
 800d33e:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800d342:	4770      	bx	lr

0800d344 <rcl_publisher_is_valid>:
 800d344:	b1a0      	cbz	r0, 800d370 <rcl_publisher_is_valid+0x2c>
 800d346:	6803      	ldr	r3, [r0, #0]
 800d348:	b510      	push	{r4, lr}
 800d34a:	4604      	mov	r4, r0
 800d34c:	b173      	cbz	r3, 800d36c <rcl_publisher_is_valid+0x28>
 800d34e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800d352:	b15a      	cbz	r2, 800d36c <rcl_publisher_is_valid+0x28>
 800d354:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800d358:	f7ff fb78 	bl	800ca4c <rcl_context_is_valid>
 800d35c:	b130      	cbz	r0, 800d36c <rcl_publisher_is_valid+0x28>
 800d35e:	6823      	ldr	r3, [r4, #0]
 800d360:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800d364:	3800      	subs	r0, #0
 800d366:	bf18      	it	ne
 800d368:	2001      	movne	r0, #1
 800d36a:	bd10      	pop	{r4, pc}
 800d36c:	2000      	movs	r0, #0
 800d36e:	bd10      	pop	{r4, pc}
 800d370:	2000      	movs	r0, #0
 800d372:	4770      	bx	lr

0800d374 <rcl_publisher_is_valid_except_context>:
 800d374:	b130      	cbz	r0, 800d384 <rcl_publisher_is_valid_except_context+0x10>
 800d376:	6800      	ldr	r0, [r0, #0]
 800d378:	b120      	cbz	r0, 800d384 <rcl_publisher_is_valid_except_context+0x10>
 800d37a:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800d37e:	3800      	subs	r0, #0
 800d380:	bf18      	it	ne
 800d382:	2001      	movne	r0, #1
 800d384:	4770      	bx	lr
 800d386:	bf00      	nop

0800d388 <rcl_get_zero_initialized_subscription>:
 800d388:	4b01      	ldr	r3, [pc, #4]	@ (800d390 <rcl_get_zero_initialized_subscription+0x8>)
 800d38a:	6818      	ldr	r0, [r3, #0]
 800d38c:	4770      	bx	lr
 800d38e:	bf00      	nop
 800d390:	0801bb50 	.word	0x0801bb50

0800d394 <rcl_subscription_init>:
 800d394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d398:	b089      	sub	sp, #36	@ 0x24
 800d39a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800d39c:	b1d6      	cbz	r6, 800d3d4 <rcl_subscription_init+0x40>
 800d39e:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 800d3a2:	4604      	mov	r4, r0
 800d3a4:	4648      	mov	r0, r9
 800d3a6:	460d      	mov	r5, r1
 800d3a8:	4690      	mov	r8, r2
 800d3aa:	461f      	mov	r7, r3
 800d3ac:	f001 fbe4 	bl	800eb78 <rcutils_allocator_is_valid>
 800d3b0:	b180      	cbz	r0, 800d3d4 <rcl_subscription_init+0x40>
 800d3b2:	b17c      	cbz	r4, 800d3d4 <rcl_subscription_init+0x40>
 800d3b4:	4628      	mov	r0, r5
 800d3b6:	f7ff fe51 	bl	800d05c <rcl_node_is_valid>
 800d3ba:	2800      	cmp	r0, #0
 800d3bc:	d054      	beq.n	800d468 <rcl_subscription_init+0xd4>
 800d3be:	f1b8 0f00 	cmp.w	r8, #0
 800d3c2:	d007      	beq.n	800d3d4 <rcl_subscription_init+0x40>
 800d3c4:	b137      	cbz	r7, 800d3d4 <rcl_subscription_init+0x40>
 800d3c6:	6823      	ldr	r3, [r4, #0]
 800d3c8:	b14b      	cbz	r3, 800d3de <rcl_subscription_init+0x4a>
 800d3ca:	2764      	movs	r7, #100	@ 0x64
 800d3cc:	4638      	mov	r0, r7
 800d3ce:	b009      	add	sp, #36	@ 0x24
 800d3d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3d4:	270b      	movs	r7, #11
 800d3d6:	4638      	mov	r0, r7
 800d3d8:	b009      	add	sp, #36	@ 0x24
 800d3da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3de:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800d3e2:	aa07      	add	r2, sp, #28
 800d3e4:	9205      	str	r2, [sp, #20]
 800d3e6:	9307      	str	r3, [sp, #28]
 800d3e8:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 800d3ec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d3f0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800d3f4:	4639      	mov	r1, r7
 800d3f6:	e899 000c 	ldmia.w	r9, {r2, r3}
 800d3fa:	4628      	mov	r0, r5
 800d3fc:	f008 f9ea 	bl	80157d4 <rcl_node_resolve_name>
 800d400:	4607      	mov	r7, r0
 800d402:	2800      	cmp	r0, #0
 800d404:	d15f      	bne.n	800d4c6 <rcl_subscription_init+0x132>
 800d406:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 800d40a:	21c8      	movs	r1, #200	@ 0xc8
 800d40c:	2001      	movs	r0, #1
 800d40e:	4798      	blx	r3
 800d410:	6020      	str	r0, [r4, #0]
 800d412:	2800      	cmp	r0, #0
 800d414:	d05d      	beq.n	800d4d2 <rcl_subscription_init+0x13e>
 800d416:	4628      	mov	r0, r5
 800d418:	f7ff fe42 	bl	800d0a0 <rcl_node_get_rmw_handle>
 800d41c:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 800d420:	9300      	str	r3, [sp, #0]
 800d422:	9a07      	ldr	r2, [sp, #28]
 800d424:	6827      	ldr	r7, [r4, #0]
 800d426:	4641      	mov	r1, r8
 800d428:	4633      	mov	r3, r6
 800d42a:	f002 fd9d 	bl	800ff68 <rmw_create_subscription>
 800d42e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 800d432:	6827      	ldr	r7, [r4, #0]
 800d434:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 800d438:	b348      	cbz	r0, 800d48e <rcl_subscription_init+0xfa>
 800d43a:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 800d43e:	f002 fe75 	bl	801012c <rmw_subscription_get_actual_qos>
 800d442:	4607      	mov	r7, r0
 800d444:	b9a8      	cbnz	r0, 800d472 <rcl_subscription_init+0xde>
 800d446:	6820      	ldr	r0, [r4, #0]
 800d448:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800d44c:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 800d450:	2270      	movs	r2, #112	@ 0x70
 800d452:	4631      	mov	r1, r6
 800d454:	f00c ffb7 	bl	801a3c6 <memcpy>
 800d458:	9807      	ldr	r0, [sp, #28]
 800d45a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800d45c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800d45e:	4798      	blx	r3
 800d460:	4638      	mov	r0, r7
 800d462:	b009      	add	sp, #36	@ 0x24
 800d464:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d468:	27c8      	movs	r7, #200	@ 0xc8
 800d46a:	4638      	mov	r0, r7
 800d46c:	b009      	add	sp, #36	@ 0x24
 800d46e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d472:	6827      	ldr	r7, [r4, #0]
 800d474:	b32f      	cbz	r7, 800d4c2 <rcl_subscription_init+0x12e>
 800d476:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d47a:	b14b      	cbz	r3, 800d490 <rcl_subscription_init+0xfc>
 800d47c:	4628      	mov	r0, r5
 800d47e:	f7ff fe0f 	bl	800d0a0 <rcl_node_get_rmw_handle>
 800d482:	6823      	ldr	r3, [r4, #0]
 800d484:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800d488:	f002 fe60 	bl	801014c <rmw_destroy_subscription>
 800d48c:	6827      	ldr	r7, [r4, #0]
 800d48e:	b197      	cbz	r7, 800d4b6 <rcl_subscription_init+0x122>
 800d490:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 800d494:	4628      	mov	r0, r5
 800d496:	f001 fb6f 	bl	800eb78 <rcutils_allocator_is_valid>
 800d49a:	b158      	cbz	r0, 800d4b4 <rcl_subscription_init+0x120>
 800d49c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d49e:	b148      	cbz	r0, 800d4b4 <rcl_subscription_init+0x120>
 800d4a0:	4629      	mov	r1, r5
 800d4a2:	f001 fe25 	bl	800f0f0 <rmw_subscription_content_filter_options_fini>
 800d4a6:	4605      	mov	r5, r0
 800d4a8:	b9b8      	cbnz	r0, 800d4da <rcl_subscription_init+0x146>
 800d4aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4ac:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800d4ae:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d4b0:	4798      	blx	r3
 800d4b2:	66fd      	str	r5, [r7, #108]	@ 0x6c
 800d4b4:	6827      	ldr	r7, [r4, #0]
 800d4b6:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800d4b8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800d4ba:	4638      	mov	r0, r7
 800d4bc:	4798      	blx	r3
 800d4be:	2300      	movs	r3, #0
 800d4c0:	6023      	str	r3, [r4, #0]
 800d4c2:	2701      	movs	r7, #1
 800d4c4:	e7c8      	b.n	800d458 <rcl_subscription_init+0xc4>
 800d4c6:	2867      	cmp	r0, #103	@ 0x67
 800d4c8:	d0c6      	beq.n	800d458 <rcl_subscription_init+0xc4>
 800d4ca:	2869      	cmp	r0, #105	@ 0x69
 800d4cc:	d003      	beq.n	800d4d6 <rcl_subscription_init+0x142>
 800d4ce:	280a      	cmp	r0, #10
 800d4d0:	d1f7      	bne.n	800d4c2 <rcl_subscription_init+0x12e>
 800d4d2:	270a      	movs	r7, #10
 800d4d4:	e7c0      	b.n	800d458 <rcl_subscription_init+0xc4>
 800d4d6:	2767      	movs	r7, #103	@ 0x67
 800d4d8:	e7be      	b.n	800d458 <rcl_subscription_init+0xc4>
 800d4da:	f007 ff2b 	bl	8015334 <rcl_convert_rmw_ret_to_rcl_ret>
 800d4de:	6827      	ldr	r7, [r4, #0]
 800d4e0:	e7e9      	b.n	800d4b6 <rcl_subscription_init+0x122>
 800d4e2:	bf00      	nop

0800d4e4 <rcl_subscription_fini>:
 800d4e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4e8:	2800      	cmp	r0, #0
 800d4ea:	d039      	beq.n	800d560 <rcl_subscription_fini+0x7c>
 800d4ec:	4604      	mov	r4, r0
 800d4ee:	4608      	mov	r0, r1
 800d4f0:	460d      	mov	r5, r1
 800d4f2:	f7ff fdab 	bl	800d04c <rcl_node_is_valid_except_context>
 800d4f6:	2800      	cmp	r0, #0
 800d4f8:	d037      	beq.n	800d56a <rcl_subscription_fini+0x86>
 800d4fa:	6823      	ldr	r3, [r4, #0]
 800d4fc:	b363      	cbz	r3, 800d558 <rcl_subscription_fini+0x74>
 800d4fe:	4628      	mov	r0, r5
 800d500:	6d5f      	ldr	r7, [r3, #84]	@ 0x54
 800d502:	f8d3 8060 	ldr.w	r8, [r3, #96]	@ 0x60
 800d506:	f7ff fdcb 	bl	800d0a0 <rcl_node_get_rmw_handle>
 800d50a:	b390      	cbz	r0, 800d572 <rcl_subscription_fini+0x8e>
 800d50c:	6823      	ldr	r3, [r4, #0]
 800d50e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800d512:	f002 fe1b 	bl	801014c <rmw_destroy_subscription>
 800d516:	6826      	ldr	r6, [r4, #0]
 800d518:	1e05      	subs	r5, r0, #0
 800d51a:	bf18      	it	ne
 800d51c:	2501      	movne	r5, #1
 800d51e:	b37e      	cbz	r6, 800d580 <rcl_subscription_fini+0x9c>
 800d520:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 800d524:	4648      	mov	r0, r9
 800d526:	f001 fb27 	bl	800eb78 <rcutils_allocator_is_valid>
 800d52a:	b358      	cbz	r0, 800d584 <rcl_subscription_fini+0xa0>
 800d52c:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 800d52e:	b150      	cbz	r0, 800d546 <rcl_subscription_fini+0x62>
 800d530:	4649      	mov	r1, r9
 800d532:	f001 fddd 	bl	800f0f0 <rmw_subscription_content_filter_options_fini>
 800d536:	4681      	mov	r9, r0
 800d538:	b9e8      	cbnz	r0, 800d576 <rcl_subscription_fini+0x92>
 800d53a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800d53c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800d53e:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 800d540:	4798      	blx	r3
 800d542:	f8c6 906c 	str.w	r9, [r6, #108]	@ 0x6c
 800d546:	6826      	ldr	r6, [r4, #0]
 800d548:	4630      	mov	r0, r6
 800d54a:	4641      	mov	r1, r8
 800d54c:	47b8      	blx	r7
 800d54e:	2300      	movs	r3, #0
 800d550:	6023      	str	r3, [r4, #0]
 800d552:	4628      	mov	r0, r5
 800d554:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d558:	461d      	mov	r5, r3
 800d55a:	4628      	mov	r0, r5
 800d55c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d560:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 800d564:	4628      	mov	r0, r5
 800d566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d56a:	25c8      	movs	r5, #200	@ 0xc8
 800d56c:	4628      	mov	r0, r5
 800d56e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d572:	250b      	movs	r5, #11
 800d574:	e7f1      	b.n	800d55a <rcl_subscription_fini+0x76>
 800d576:	f007 fedd 	bl	8015334 <rcl_convert_rmw_ret_to_rcl_ret>
 800d57a:	6826      	ldr	r6, [r4, #0]
 800d57c:	2800      	cmp	r0, #0
 800d57e:	d0e3      	beq.n	800d548 <rcl_subscription_fini+0x64>
 800d580:	2501      	movs	r5, #1
 800d582:	e7e1      	b.n	800d548 <rcl_subscription_fini+0x64>
 800d584:	6826      	ldr	r6, [r4, #0]
 800d586:	2501      	movs	r5, #1
 800d588:	e7de      	b.n	800d548 <rcl_subscription_fini+0x64>
 800d58a:	bf00      	nop

0800d58c <rcl_subscription_get_default_options>:
 800d58c:	b570      	push	{r4, r5, r6, lr}
 800d58e:	4d14      	ldr	r5, [pc, #80]	@ (800d5e0 <rcl_subscription_get_default_options+0x54>)
 800d590:	4914      	ldr	r1, [pc, #80]	@ (800d5e4 <rcl_subscription_get_default_options+0x58>)
 800d592:	b08a      	sub	sp, #40	@ 0x28
 800d594:	4604      	mov	r4, r0
 800d596:	2250      	movs	r2, #80	@ 0x50
 800d598:	4628      	mov	r0, r5
 800d59a:	f00c ff14 	bl	801a3c6 <memcpy>
 800d59e:	a804      	add	r0, sp, #16
 800d5a0:	f001 fadc 	bl	800eb5c <rcutils_get_default_allocator>
 800d5a4:	f10d 0c10 	add.w	ip, sp, #16
 800d5a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d5ac:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800d5b0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d5b4:	466e      	mov	r6, sp
 800d5b6:	f8dc 3000 	ldr.w	r3, [ip]
 800d5ba:	f8ce 3000 	str.w	r3, [lr]
 800d5be:	4630      	mov	r0, r6
 800d5c0:	f001 fdb0 	bl	800f124 <rmw_get_default_subscription_options>
 800d5c4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800d5c8:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800d5cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d5d0:	2270      	movs	r2, #112	@ 0x70
 800d5d2:	4629      	mov	r1, r5
 800d5d4:	4620      	mov	r0, r4
 800d5d6:	f00c fef6 	bl	801a3c6 <memcpy>
 800d5da:	4620      	mov	r0, r4
 800d5dc:	b00a      	add	sp, #40	@ 0x28
 800d5de:	bd70      	pop	{r4, r5, r6, pc}
 800d5e0:	2000ce88 	.word	0x2000ce88
 800d5e4:	0801bb58 	.word	0x0801bb58

0800d5e8 <rcl_take>:
 800d5e8:	2800      	cmp	r0, #0
 800d5ea:	d04a      	beq.n	800d682 <rcl_take+0x9a>
 800d5ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5f0:	4604      	mov	r4, r0
 800d5f2:	6800      	ldr	r0, [r0, #0]
 800d5f4:	b0a4      	sub	sp, #144	@ 0x90
 800d5f6:	2800      	cmp	r0, #0
 800d5f8:	d03b      	beq.n	800d672 <rcl_take+0x8a>
 800d5fa:	461f      	mov	r7, r3
 800d5fc:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 800d600:	2b00      	cmp	r3, #0
 800d602:	d036      	beq.n	800d672 <rcl_take+0x8a>
 800d604:	460e      	mov	r6, r1
 800d606:	2900      	cmp	r1, #0
 800d608:	d039      	beq.n	800d67e <rcl_take+0x96>
 800d60a:	4615      	mov	r5, r2
 800d60c:	2a00      	cmp	r2, #0
 800d60e:	d03c      	beq.n	800d68a <rcl_take+0xa2>
 800d610:	a802      	add	r0, sp, #8
 800d612:	f001 fd8d 	bl	800f130 <rmw_get_zero_initialized_message_info>
 800d616:	f10d 0c08 	add.w	ip, sp, #8
 800d61a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d61e:	46ae      	mov	lr, r5
 800d620:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d624:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d628:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d62c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d630:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d634:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800d638:	f04f 0800 	mov.w	r8, #0
 800d63c:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 800d640:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 800d644:	6822      	ldr	r2, [r4, #0]
 800d646:	462b      	mov	r3, r5
 800d648:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 800d64c:	9700      	str	r7, [sp, #0]
 800d64e:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 800d652:	4631      	mov	r1, r6
 800d654:	f002 fdda 	bl	801020c <rmw_take_with_info>
 800d658:	4603      	mov	r3, r0
 800d65a:	b9c0      	cbnz	r0, 800d68e <rcl_take+0xa6>
 800d65c:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 800d660:	f240 1291 	movw	r2, #401	@ 0x191
 800d664:	2900      	cmp	r1, #0
 800d666:	bf08      	it	eq
 800d668:	4613      	moveq	r3, r2
 800d66a:	4618      	mov	r0, r3
 800d66c:	b024      	add	sp, #144	@ 0x90
 800d66e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d672:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800d676:	4618      	mov	r0, r3
 800d678:	b024      	add	sp, #144	@ 0x90
 800d67a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d67e:	230b      	movs	r3, #11
 800d680:	e7f3      	b.n	800d66a <rcl_take+0x82>
 800d682:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800d686:	4618      	mov	r0, r3
 800d688:	4770      	bx	lr
 800d68a:	ad14      	add	r5, sp, #80	@ 0x50
 800d68c:	e7c0      	b.n	800d610 <rcl_take+0x28>
 800d68e:	f007 fe51 	bl	8015334 <rcl_convert_rmw_ret_to_rcl_ret>
 800d692:	4603      	mov	r3, r0
 800d694:	e7e9      	b.n	800d66a <rcl_take+0x82>
 800d696:	bf00      	nop

0800d698 <rcl_subscription_get_rmw_handle>:
 800d698:	b118      	cbz	r0, 800d6a2 <rcl_subscription_get_rmw_handle+0xa>
 800d69a:	6800      	ldr	r0, [r0, #0]
 800d69c:	b108      	cbz	r0, 800d6a2 <rcl_subscription_get_rmw_handle+0xa>
 800d69e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800d6a2:	4770      	bx	lr

0800d6a4 <rcl_subscription_is_valid>:
 800d6a4:	b130      	cbz	r0, 800d6b4 <rcl_subscription_is_valid+0x10>
 800d6a6:	6800      	ldr	r0, [r0, #0]
 800d6a8:	b120      	cbz	r0, 800d6b4 <rcl_subscription_is_valid+0x10>
 800d6aa:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800d6ae:	3800      	subs	r0, #0
 800d6b0:	bf18      	it	ne
 800d6b2:	2001      	movne	r0, #1
 800d6b4:	4770      	bx	lr
 800d6b6:	bf00      	nop

0800d6b8 <_rcl_timer_time_jump>:
 800d6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6bc:	4605      	mov	r5, r0
 800d6be:	b084      	sub	sp, #16
 800d6c0:	4614      	mov	r4, r2
 800d6c2:	b131      	cbz	r1, 800d6d2 <_rcl_timer_time_jump+0x1a>
 800d6c4:	7803      	ldrb	r3, [r0, #0]
 800d6c6:	3b02      	subs	r3, #2
 800d6c8:	2b01      	cmp	r3, #1
 800d6ca:	d93f      	bls.n	800d74c <_rcl_timer_time_jump+0x94>
 800d6cc:	b004      	add	sp, #16
 800d6ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6d2:	6813      	ldr	r3, [r2, #0]
 800d6d4:	a902      	add	r1, sp, #8
 800d6d6:	6818      	ldr	r0, [r3, #0]
 800d6d8:	f008 fa4e 	bl	8015b78 <rcl_clock_get_now>
 800d6dc:	2800      	cmp	r0, #0
 800d6de:	d1f5      	bne.n	800d6cc <_rcl_timer_time_jump+0x14>
 800d6e0:	6820      	ldr	r0, [r4, #0]
 800d6e2:	2105      	movs	r1, #5
 800d6e4:	3020      	adds	r0, #32
 800d6e6:	f001 fa55 	bl	800eb94 <__atomic_load_8>
 800d6ea:	6823      	ldr	r3, [r4, #0]
 800d6ec:	4681      	mov	r9, r0
 800d6ee:	4688      	mov	r8, r1
 800d6f0:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800d6f4:	2105      	movs	r1, #5
 800d6f6:	f001 fa4d 	bl	800eb94 <__atomic_load_8>
 800d6fa:	4607      	mov	r7, r0
 800d6fc:	6820      	ldr	r0, [r4, #0]
 800d6fe:	460e      	mov	r6, r1
 800d700:	3018      	adds	r0, #24
 800d702:	2105      	movs	r1, #5
 800d704:	f001 fa46 	bl	800eb94 <__atomic_load_8>
 800d708:	782b      	ldrb	r3, [r5, #0]
 800d70a:	9a02      	ldr	r2, [sp, #8]
 800d70c:	3b02      	subs	r3, #2
 800d70e:	2b01      	cmp	r3, #1
 800d710:	460d      	mov	r5, r1
 800d712:	9b03      	ldr	r3, [sp, #12]
 800d714:	4682      	mov	sl, r0
 800d716:	d937      	bls.n	800d788 <_rcl_timer_time_jump+0xd0>
 800d718:	42ba      	cmp	r2, r7
 800d71a:	eb73 0106 	sbcs.w	r1, r3, r6
 800d71e:	da5f      	bge.n	800d7e0 <_rcl_timer_time_jump+0x128>
 800d720:	454a      	cmp	r2, r9
 800d722:	eb73 0108 	sbcs.w	r1, r3, r8
 800d726:	dad1      	bge.n	800d6cc <_rcl_timer_time_jump+0x14>
 800d728:	6820      	ldr	r0, [r4, #0]
 800d72a:	eb1a 0202 	adds.w	r2, sl, r2
 800d72e:	eb43 0305 	adc.w	r3, r3, r5
 800d732:	2505      	movs	r5, #5
 800d734:	3028      	adds	r0, #40	@ 0x28
 800d736:	9500      	str	r5, [sp, #0]
 800d738:	f001 fa62 	bl	800ec00 <__atomic_store_8>
 800d73c:	6820      	ldr	r0, [r4, #0]
 800d73e:	9500      	str	r5, [sp, #0]
 800d740:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d744:	3020      	adds	r0, #32
 800d746:	f001 fa5b 	bl	800ec00 <__atomic_store_8>
 800d74a:	e7bf      	b.n	800d6cc <_rcl_timer_time_jump+0x14>
 800d74c:	6813      	ldr	r3, [r2, #0]
 800d74e:	a902      	add	r1, sp, #8
 800d750:	6818      	ldr	r0, [r3, #0]
 800d752:	f008 fa11 	bl	8015b78 <rcl_clock_get_now>
 800d756:	2800      	cmp	r0, #0
 800d758:	d1b8      	bne.n	800d6cc <_rcl_timer_time_jump+0x14>
 800d75a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d75e:	4313      	orrs	r3, r2
 800d760:	d0b4      	beq.n	800d6cc <_rcl_timer_time_jump+0x14>
 800d762:	6820      	ldr	r0, [r4, #0]
 800d764:	2105      	movs	r1, #5
 800d766:	3028      	adds	r0, #40	@ 0x28
 800d768:	f001 fa14 	bl	800eb94 <__atomic_load_8>
 800d76c:	9d02      	ldr	r5, [sp, #8]
 800d76e:	9b03      	ldr	r3, [sp, #12]
 800d770:	4602      	mov	r2, r0
 800d772:	6820      	ldr	r0, [r4, #0]
 800d774:	1b52      	subs	r2, r2, r5
 800d776:	f04f 0405 	mov.w	r4, #5
 800d77a:	9400      	str	r4, [sp, #0]
 800d77c:	eb61 0303 	sbc.w	r3, r1, r3
 800d780:	3030      	adds	r0, #48	@ 0x30
 800d782:	f001 fa3d 	bl	800ec00 <__atomic_store_8>
 800d786:	e7a1      	b.n	800d6cc <_rcl_timer_time_jump+0x14>
 800d788:	4313      	orrs	r3, r2
 800d78a:	d09f      	beq.n	800d6cc <_rcl_timer_time_jump+0x14>
 800d78c:	6820      	ldr	r0, [r4, #0]
 800d78e:	f04f 0805 	mov.w	r8, #5
 800d792:	2300      	movs	r3, #0
 800d794:	f8cd 8000 	str.w	r8, [sp]
 800d798:	3030      	adds	r0, #48	@ 0x30
 800d79a:	2200      	movs	r2, #0
 800d79c:	f001 fa66 	bl	800ec6c <__atomic_exchange_8>
 800d7a0:	ea51 0300 	orrs.w	r3, r1, r0
 800d7a4:	4606      	mov	r6, r0
 800d7a6:	460f      	mov	r7, r1
 800d7a8:	d090      	beq.n	800d6cc <_rcl_timer_time_jump+0x14>
 800d7aa:	9a02      	ldr	r2, [sp, #8]
 800d7ac:	9b03      	ldr	r3, [sp, #12]
 800d7ae:	f8cd 8000 	str.w	r8, [sp]
 800d7b2:	1a12      	subs	r2, r2, r0
 800d7b4:	6820      	ldr	r0, [r4, #0]
 800d7b6:	eb63 0301 	sbc.w	r3, r3, r1
 800d7ba:	eb12 020a 	adds.w	r2, r2, sl
 800d7be:	eb43 0305 	adc.w	r3, r3, r5
 800d7c2:	3028      	adds	r0, #40	@ 0x28
 800d7c4:	f001 fa1c 	bl	800ec00 <__atomic_store_8>
 800d7c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d7cc:	f8cd 8000 	str.w	r8, [sp]
 800d7d0:	6820      	ldr	r0, [r4, #0]
 800d7d2:	1b92      	subs	r2, r2, r6
 800d7d4:	eb63 0307 	sbc.w	r3, r3, r7
 800d7d8:	3020      	adds	r0, #32
 800d7da:	f001 fa11 	bl	800ec00 <__atomic_store_8>
 800d7de:	e775      	b.n	800d6cc <_rcl_timer_time_jump+0x14>
 800d7e0:	6820      	ldr	r0, [r4, #0]
 800d7e2:	3008      	adds	r0, #8
 800d7e4:	f007 feb2 	bl	801554c <rcl_trigger_guard_condition>
 800d7e8:	e770      	b.n	800d6cc <_rcl_timer_time_jump+0x14>
 800d7ea:	bf00      	nop

0800d7ec <rcl_get_zero_initialized_timer>:
 800d7ec:	4b01      	ldr	r3, [pc, #4]	@ (800d7f4 <rcl_get_zero_initialized_timer+0x8>)
 800d7ee:	6818      	ldr	r0, [r3, #0]
 800d7f0:	4770      	bx	lr
 800d7f2:	bf00      	nop
 800d7f4:	0801bba8 	.word	0x0801bba8

0800d7f8 <rcl_timer_init>:
 800d7f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7fc:	b0aa      	sub	sp, #168	@ 0xa8
 800d7fe:	4604      	mov	r4, r0
 800d800:	a835      	add	r0, sp, #212	@ 0xd4
 800d802:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 800d806:	460d      	mov	r5, r1
 800d808:	4692      	mov	sl, r2
 800d80a:	f001 f9b5 	bl	800eb78 <rcutils_allocator_is_valid>
 800d80e:	2800      	cmp	r0, #0
 800d810:	d064      	beq.n	800d8dc <rcl_timer_init+0xe4>
 800d812:	2c00      	cmp	r4, #0
 800d814:	d062      	beq.n	800d8dc <rcl_timer_init+0xe4>
 800d816:	2d00      	cmp	r5, #0
 800d818:	d060      	beq.n	800d8dc <rcl_timer_init+0xe4>
 800d81a:	2f00      	cmp	r7, #0
 800d81c:	db5e      	blt.n	800d8dc <rcl_timer_init+0xe4>
 800d81e:	6823      	ldr	r3, [r4, #0]
 800d820:	b123      	cbz	r3, 800d82c <rcl_timer_init+0x34>
 800d822:	2664      	movs	r6, #100	@ 0x64
 800d824:	4630      	mov	r0, r6
 800d826:	b02a      	add	sp, #168	@ 0xa8
 800d828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d82c:	a908      	add	r1, sp, #32
 800d82e:	4628      	mov	r0, r5
 800d830:	f008 f9a2 	bl	8015b78 <rcl_clock_get_now>
 800d834:	4606      	mov	r6, r0
 800d836:	2800      	cmp	r0, #0
 800d838:	d1f4      	bne.n	800d824 <rcl_timer_init+0x2c>
 800d83a:	ae06      	add	r6, sp, #24
 800d83c:	4630      	mov	r0, r6
 800d83e:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 800d842:	f007 fd8b 	bl	801535c <rcl_get_zero_initialized_guard_condition>
 800d846:	e896 0003 	ldmia.w	r6, {r0, r1}
 800d84a:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 800d84e:	ae0b      	add	r6, sp, #44	@ 0x2c
 800d850:	e889 0003 	stmia.w	r9, {r0, r1}
 800d854:	4630      	mov	r0, r6
 800d856:	f007 fe5d 	bl	8015514 <rcl_guard_condition_get_default_options>
 800d85a:	ab0d      	add	r3, sp, #52	@ 0x34
 800d85c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d860:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800d864:	4651      	mov	r1, sl
 800d866:	e896 000c 	ldmia.w	r6, {r2, r3}
 800d86a:	4648      	mov	r0, r9
 800d86c:	f007 fd80 	bl	8015370 <rcl_guard_condition_init>
 800d870:	4606      	mov	r6, r0
 800d872:	2800      	cmp	r0, #0
 800d874:	d1d6      	bne.n	800d824 <rcl_timer_init+0x2c>
 800d876:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d878:	781b      	ldrb	r3, [r3, #0]
 800d87a:	2b01      	cmp	r3, #1
 800d87c:	d033      	beq.n	800d8e6 <rcl_timer_init+0xee>
 800d87e:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 800d880:	911a      	str	r1, [sp, #104]	@ 0x68
 800d882:	4642      	mov	r2, r8
 800d884:	463b      	mov	r3, r7
 800d886:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 800d88a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d88e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800d940 <rcl_timer_init+0x148>
 800d892:	eb12 0008 	adds.w	r0, r2, r8
 800d896:	eb47 0103 	adc.w	r1, r7, r3
 800d89a:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 800d89e:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 800d8a2:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 800d8a6:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 800d8aa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d8ae:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 800d8b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d8b6:	f8de 3000 	ldr.w	r3, [lr]
 800d8ba:	f8cc 3000 	str.w	r3, [ip]
 800d8be:	f04f 0a00 	mov.w	sl, #0
 800d8c2:	4619      	mov	r1, r3
 800d8c4:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 800d8c8:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800d8ca:	2050      	movs	r0, #80	@ 0x50
 800d8cc:	4798      	blx	r3
 800d8ce:	6020      	str	r0, [r4, #0]
 800d8d0:	b358      	cbz	r0, 800d92a <rcl_timer_init+0x132>
 800d8d2:	2250      	movs	r2, #80	@ 0x50
 800d8d4:	a916      	add	r1, sp, #88	@ 0x58
 800d8d6:	f00c fd76 	bl	801a3c6 <memcpy>
 800d8da:	e7a3      	b.n	800d824 <rcl_timer_init+0x2c>
 800d8dc:	260b      	movs	r6, #11
 800d8de:	4630      	mov	r0, r6
 800d8e0:	b02a      	add	sp, #168	@ 0xa8
 800d8e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8e6:	2001      	movs	r0, #1
 800d8e8:	2100      	movs	r1, #0
 800d8ea:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 800d8ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d8f2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800d8f6:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 800d8fa:	4a13      	ldr	r2, [pc, #76]	@ (800d948 <rcl_timer_init+0x150>)
 800d8fc:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800d900:	9405      	str	r4, [sp, #20]
 800d902:	9204      	str	r2, [sp, #16]
 800d904:	ab12      	add	r3, sp, #72	@ 0x48
 800d906:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d908:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d90c:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 800d910:	e89c 000c 	ldmia.w	ip, {r2, r3}
 800d914:	4628      	mov	r0, r5
 800d916:	f008 f93b 	bl	8015b90 <rcl_clock_add_jump_callback>
 800d91a:	4682      	mov	sl, r0
 800d91c:	2800      	cmp	r0, #0
 800d91e:	d0ae      	beq.n	800d87e <rcl_timer_init+0x86>
 800d920:	4648      	mov	r0, r9
 800d922:	f007 fdd1 	bl	80154c8 <rcl_guard_condition_fini>
 800d926:	4656      	mov	r6, sl
 800d928:	e77c      	b.n	800d824 <rcl_timer_init+0x2c>
 800d92a:	4648      	mov	r0, r9
 800d92c:	f007 fdcc 	bl	80154c8 <rcl_guard_condition_fini>
 800d930:	4905      	ldr	r1, [pc, #20]	@ (800d948 <rcl_timer_init+0x150>)
 800d932:	4622      	mov	r2, r4
 800d934:	4628      	mov	r0, r5
 800d936:	f008 f98d 	bl	8015c54 <rcl_clock_remove_jump_callback>
 800d93a:	260a      	movs	r6, #10
 800d93c:	e772      	b.n	800d824 <rcl_timer_init+0x2c>
 800d93e:	bf00      	nop
	...
 800d948:	0800d6b9 	.word	0x0800d6b9

0800d94c <rcl_timer_fini>:
 800d94c:	b310      	cbz	r0, 800d994 <rcl_timer_fini+0x48>
 800d94e:	6803      	ldr	r3, [r0, #0]
 800d950:	b570      	push	{r4, r5, r6, lr}
 800d952:	4604      	mov	r4, r0
 800d954:	b1b3      	cbz	r3, 800d984 <rcl_timer_fini+0x38>
 800d956:	f3bf 8f5b 	dmb	ish
 800d95a:	2201      	movs	r2, #1
 800d95c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800d960:	f3bf 8f5b 	dmb	ish
 800d964:	6803      	ldr	r3, [r0, #0]
 800d966:	6818      	ldr	r0, [r3, #0]
 800d968:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 800d96a:	7802      	ldrb	r2, [r0, #0]
 800d96c:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 800d96e:	2a01      	cmp	r2, #1
 800d970:	d00a      	beq.n	800d988 <rcl_timer_fini+0x3c>
 800d972:	f103 0008 	add.w	r0, r3, #8
 800d976:	f007 fda7 	bl	80154c8 <rcl_guard_condition_fini>
 800d97a:	6820      	ldr	r0, [r4, #0]
 800d97c:	4631      	mov	r1, r6
 800d97e:	47a8      	blx	r5
 800d980:	2300      	movs	r3, #0
 800d982:	6023      	str	r3, [r4, #0]
 800d984:	2000      	movs	r0, #0
 800d986:	bd70      	pop	{r4, r5, r6, pc}
 800d988:	4903      	ldr	r1, [pc, #12]	@ (800d998 <rcl_timer_fini+0x4c>)
 800d98a:	4622      	mov	r2, r4
 800d98c:	f008 f962 	bl	8015c54 <rcl_clock_remove_jump_callback>
 800d990:	6823      	ldr	r3, [r4, #0]
 800d992:	e7ee      	b.n	800d972 <rcl_timer_fini+0x26>
 800d994:	2000      	movs	r0, #0
 800d996:	4770      	bx	lr
 800d998:	0800d6b9 	.word	0x0800d6b9

0800d99c <rcl_timer_call>:
 800d99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9a0:	b087      	sub	sp, #28
 800d9a2:	2800      	cmp	r0, #0
 800d9a4:	d06d      	beq.n	800da82 <rcl_timer_call+0xe6>
 800d9a6:	6803      	ldr	r3, [r0, #0]
 800d9a8:	4604      	mov	r4, r0
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d063      	beq.n	800da76 <rcl_timer_call+0xda>
 800d9ae:	f3bf 8f5b 	dmb	ish
 800d9b2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d9b6:	f3bf 8f5b 	dmb	ish
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d150      	bne.n	800da60 <rcl_timer_call+0xc4>
 800d9be:	6803      	ldr	r3, [r0, #0]
 800d9c0:	a904      	add	r1, sp, #16
 800d9c2:	6818      	ldr	r0, [r3, #0]
 800d9c4:	f008 f8d8 	bl	8015b78 <rcl_clock_get_now>
 800d9c8:	4605      	mov	r5, r0
 800d9ca:	2800      	cmp	r0, #0
 800d9cc:	d14a      	bne.n	800da64 <rcl_timer_call+0xc8>
 800d9ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	db4a      	blt.n	800da6c <rcl_timer_call+0xd0>
 800d9d6:	6820      	ldr	r0, [r4, #0]
 800d9d8:	f04f 0a05 	mov.w	sl, #5
 800d9dc:	f8cd a000 	str.w	sl, [sp]
 800d9e0:	3020      	adds	r0, #32
 800d9e2:	f001 f943 	bl	800ec6c <__atomic_exchange_8>
 800d9e6:	6823      	ldr	r3, [r4, #0]
 800d9e8:	f3bf 8f5b 	dmb	ish
 800d9ec:	4680      	mov	r8, r0
 800d9ee:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800d9f2:	f3bf 8f5b 	dmb	ish
 800d9f6:	6820      	ldr	r0, [r4, #0]
 800d9f8:	4689      	mov	r9, r1
 800d9fa:	3028      	adds	r0, #40	@ 0x28
 800d9fc:	4651      	mov	r1, sl
 800d9fe:	f001 f8c9 	bl	800eb94 <__atomic_load_8>
 800da02:	4606      	mov	r6, r0
 800da04:	6820      	ldr	r0, [r4, #0]
 800da06:	460f      	mov	r7, r1
 800da08:	3018      	adds	r0, #24
 800da0a:	4651      	mov	r1, sl
 800da0c:	f001 f8c2 	bl	800eb94 <__atomic_load_8>
 800da10:	1836      	adds	r6, r6, r0
 800da12:	4602      	mov	r2, r0
 800da14:	4682      	mov	sl, r0
 800da16:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 800da1a:	eb47 0701 	adc.w	r7, r7, r1
 800da1e:	4286      	cmp	r6, r0
 800da20:	460b      	mov	r3, r1
 800da22:	eb77 010c 	sbcs.w	r1, r7, ip
 800da26:	da04      	bge.n	800da32 <rcl_timer_call+0x96>
 800da28:	ea53 0102 	orrs.w	r1, r3, r2
 800da2c:	d12e      	bne.n	800da8c <rcl_timer_call+0xf0>
 800da2e:	4606      	mov	r6, r0
 800da30:	4667      	mov	r7, ip
 800da32:	6820      	ldr	r0, [r4, #0]
 800da34:	2105      	movs	r1, #5
 800da36:	4632      	mov	r2, r6
 800da38:	463b      	mov	r3, r7
 800da3a:	3028      	adds	r0, #40	@ 0x28
 800da3c:	9100      	str	r1, [sp, #0]
 800da3e:	f001 f8df 	bl	800ec00 <__atomic_store_8>
 800da42:	f1bb 0f00 	cmp.w	fp, #0
 800da46:	d00d      	beq.n	800da64 <rcl_timer_call+0xc8>
 800da48:	9a04      	ldr	r2, [sp, #16]
 800da4a:	9b05      	ldr	r3, [sp, #20]
 800da4c:	ebb2 0208 	subs.w	r2, r2, r8
 800da50:	4620      	mov	r0, r4
 800da52:	eb63 0309 	sbc.w	r3, r3, r9
 800da56:	47d8      	blx	fp
 800da58:	4628      	mov	r0, r5
 800da5a:	b007      	add	sp, #28
 800da5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da60:	f240 3521 	movw	r5, #801	@ 0x321
 800da64:	4628      	mov	r0, r5
 800da66:	b007      	add	sp, #28
 800da68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da6c:	2501      	movs	r5, #1
 800da6e:	4628      	mov	r0, r5
 800da70:	b007      	add	sp, #28
 800da72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da76:	f44f 7548 	mov.w	r5, #800	@ 0x320
 800da7a:	4628      	mov	r0, r5
 800da7c:	b007      	add	sp, #28
 800da7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da82:	250b      	movs	r5, #11
 800da84:	4628      	mov	r0, r5
 800da86:	b007      	add	sp, #28
 800da88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da8c:	1b80      	subs	r0, r0, r6
 800da8e:	eb6c 0107 	sbc.w	r1, ip, r7
 800da92:	3801      	subs	r0, #1
 800da94:	f161 0100 	sbc.w	r1, r1, #0
 800da98:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800da9c:	f7f3 f8c6 	bl	8000c2c <__aeabi_ldivmod>
 800daa0:	9b02      	ldr	r3, [sp, #8]
 800daa2:	3001      	adds	r0, #1
 800daa4:	f141 0100 	adc.w	r1, r1, #0
 800daa8:	fb00 f303 	mul.w	r3, r0, r3
 800daac:	fb01 330a 	mla	r3, r1, sl, r3
 800dab0:	fba0 0a0a 	umull	r0, sl, r0, sl
 800dab4:	1986      	adds	r6, r0, r6
 800dab6:	4453      	add	r3, sl
 800dab8:	eb43 0707 	adc.w	r7, r3, r7
 800dabc:	e7b9      	b.n	800da32 <rcl_timer_call+0x96>
 800dabe:	bf00      	nop

0800dac0 <rcl_timer_is_ready>:
 800dac0:	b570      	push	{r4, r5, r6, lr}
 800dac2:	b082      	sub	sp, #8
 800dac4:	b378      	cbz	r0, 800db26 <rcl_timer_is_ready+0x66>
 800dac6:	6803      	ldr	r3, [r0, #0]
 800dac8:	4604      	mov	r4, r0
 800daca:	b383      	cbz	r3, 800db2e <rcl_timer_is_ready+0x6e>
 800dacc:	460d      	mov	r5, r1
 800dace:	b351      	cbz	r1, 800db26 <rcl_timer_is_ready+0x66>
 800dad0:	f3bf 8f5b 	dmb	ish
 800dad4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800dad8:	f3bf 8f5b 	dmb	ish
 800dadc:	b953      	cbnz	r3, 800daf4 <rcl_timer_is_ready+0x34>
 800dade:	6803      	ldr	r3, [r0, #0]
 800dae0:	4669      	mov	r1, sp
 800dae2:	6818      	ldr	r0, [r3, #0]
 800dae4:	f008 f848 	bl	8015b78 <rcl_clock_get_now>
 800dae8:	4606      	mov	r6, r0
 800daea:	b140      	cbz	r0, 800dafe <rcl_timer_is_ready+0x3e>
 800daec:	f240 3321 	movw	r3, #801	@ 0x321
 800daf0:	4298      	cmp	r0, r3
 800daf2:	d101      	bne.n	800daf8 <rcl_timer_is_ready+0x38>
 800daf4:	2600      	movs	r6, #0
 800daf6:	702e      	strb	r6, [r5, #0]
 800daf8:	4630      	mov	r0, r6
 800dafa:	b002      	add	sp, #8
 800dafc:	bd70      	pop	{r4, r5, r6, pc}
 800dafe:	6820      	ldr	r0, [r4, #0]
 800db00:	2105      	movs	r1, #5
 800db02:	3028      	adds	r0, #40	@ 0x28
 800db04:	f001 f846 	bl	800eb94 <__atomic_load_8>
 800db08:	9b00      	ldr	r3, [sp, #0]
 800db0a:	1ac0      	subs	r0, r0, r3
 800db0c:	9b01      	ldr	r3, [sp, #4]
 800db0e:	eb61 0103 	sbc.w	r1, r1, r3
 800db12:	2801      	cmp	r0, #1
 800db14:	f171 0300 	sbcs.w	r3, r1, #0
 800db18:	bfb4      	ite	lt
 800db1a:	2301      	movlt	r3, #1
 800db1c:	2300      	movge	r3, #0
 800db1e:	4630      	mov	r0, r6
 800db20:	702b      	strb	r3, [r5, #0]
 800db22:	b002      	add	sp, #8
 800db24:	bd70      	pop	{r4, r5, r6, pc}
 800db26:	260b      	movs	r6, #11
 800db28:	4630      	mov	r0, r6
 800db2a:	b002      	add	sp, #8
 800db2c:	bd70      	pop	{r4, r5, r6, pc}
 800db2e:	f44f 7648 	mov.w	r6, #800	@ 0x320
 800db32:	e7e1      	b.n	800daf8 <rcl_timer_is_ready+0x38>

0800db34 <rcl_timer_get_time_until_next_call>:
 800db34:	b570      	push	{r4, r5, r6, lr}
 800db36:	b082      	sub	sp, #8
 800db38:	b330      	cbz	r0, 800db88 <rcl_timer_get_time_until_next_call+0x54>
 800db3a:	6803      	ldr	r3, [r0, #0]
 800db3c:	4604      	mov	r4, r0
 800db3e:	b33b      	cbz	r3, 800db90 <rcl_timer_get_time_until_next_call+0x5c>
 800db40:	460d      	mov	r5, r1
 800db42:	b309      	cbz	r1, 800db88 <rcl_timer_get_time_until_next_call+0x54>
 800db44:	f3bf 8f5b 	dmb	ish
 800db48:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800db4c:	f3bf 8f5b 	dmb	ish
 800db50:	b9ab      	cbnz	r3, 800db7e <rcl_timer_get_time_until_next_call+0x4a>
 800db52:	6803      	ldr	r3, [r0, #0]
 800db54:	4669      	mov	r1, sp
 800db56:	6818      	ldr	r0, [r3, #0]
 800db58:	f008 f80e 	bl	8015b78 <rcl_clock_get_now>
 800db5c:	4606      	mov	r6, r0
 800db5e:	b958      	cbnz	r0, 800db78 <rcl_timer_get_time_until_next_call+0x44>
 800db60:	6820      	ldr	r0, [r4, #0]
 800db62:	2105      	movs	r1, #5
 800db64:	3028      	adds	r0, #40	@ 0x28
 800db66:	f001 f815 	bl	800eb94 <__atomic_load_8>
 800db6a:	9b00      	ldr	r3, [sp, #0]
 800db6c:	1ac0      	subs	r0, r0, r3
 800db6e:	9b01      	ldr	r3, [sp, #4]
 800db70:	6028      	str	r0, [r5, #0]
 800db72:	eb61 0103 	sbc.w	r1, r1, r3
 800db76:	6069      	str	r1, [r5, #4]
 800db78:	4630      	mov	r0, r6
 800db7a:	b002      	add	sp, #8
 800db7c:	bd70      	pop	{r4, r5, r6, pc}
 800db7e:	f240 3621 	movw	r6, #801	@ 0x321
 800db82:	4630      	mov	r0, r6
 800db84:	b002      	add	sp, #8
 800db86:	bd70      	pop	{r4, r5, r6, pc}
 800db88:	260b      	movs	r6, #11
 800db8a:	4630      	mov	r0, r6
 800db8c:	b002      	add	sp, #8
 800db8e:	bd70      	pop	{r4, r5, r6, pc}
 800db90:	f44f 7648 	mov.w	r6, #800	@ 0x320
 800db94:	e7f0      	b.n	800db78 <rcl_timer_get_time_until_next_call+0x44>
 800db96:	bf00      	nop

0800db98 <rcl_timer_get_guard_condition>:
 800db98:	b130      	cbz	r0, 800dba8 <rcl_timer_get_guard_condition+0x10>
 800db9a:	6800      	ldr	r0, [r0, #0]
 800db9c:	b120      	cbz	r0, 800dba8 <rcl_timer_get_guard_condition+0x10>
 800db9e:	68c3      	ldr	r3, [r0, #12]
 800dba0:	b10b      	cbz	r3, 800dba6 <rcl_timer_get_guard_condition+0xe>
 800dba2:	3008      	adds	r0, #8
 800dba4:	4770      	bx	lr
 800dba6:	4618      	mov	r0, r3
 800dba8:	4770      	bx	lr
 800dbaa:	bf00      	nop

0800dbac <_rclc_check_for_new_data>:
 800dbac:	2800      	cmp	r0, #0
 800dbae:	d046      	beq.n	800dc3e <_rclc_check_for_new_data+0x92>
 800dbb0:	b510      	push	{r4, lr}
 800dbb2:	7802      	ldrb	r2, [r0, #0]
 800dbb4:	b084      	sub	sp, #16
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	2a0a      	cmp	r2, #10
 800dbba:	d842      	bhi.n	800dc42 <_rclc_check_for_new_data+0x96>
 800dbbc:	e8df f002 	tbb	[pc, r2]
 800dbc0:	14181212 	.word	0x14181212
 800dbc4:	06060614 	.word	0x06060614
 800dbc8:	2e1a      	.short	0x2e1a
 800dbca:	16          	.byte	0x16
 800dbcb:	00          	.byte	0x00
 800dbcc:	6a0a      	ldr	r2, [r1, #32]
 800dbce:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800dbd0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800dbd4:	2000      	movs	r0, #0
 800dbd6:	1a12      	subs	r2, r2, r0
 800dbd8:	bf18      	it	ne
 800dbda:	2201      	movne	r2, #1
 800dbdc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800dbe0:	b004      	add	sp, #16
 800dbe2:	bd10      	pop	{r4, pc}
 800dbe4:	680a      	ldr	r2, [r1, #0]
 800dbe6:	e7f2      	b.n	800dbce <_rclc_check_for_new_data+0x22>
 800dbe8:	698a      	ldr	r2, [r1, #24]
 800dbea:	e7f0      	b.n	800dbce <_rclc_check_for_new_data+0x22>
 800dbec:	688a      	ldr	r2, [r1, #8]
 800dbee:	e7ee      	b.n	800dbce <_rclc_check_for_new_data+0x22>
 800dbf0:	690a      	ldr	r2, [r1, #16]
 800dbf2:	e7ec      	b.n	800dbce <_rclc_check_for_new_data+0x22>
 800dbf4:	685c      	ldr	r4, [r3, #4]
 800dbf6:	4608      	mov	r0, r1
 800dbf8:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800dbfc:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800dc00:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800dc04:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800dc08:	9300      	str	r3, [sp, #0]
 800dc0a:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800dc0e:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800dc12:	f104 0110 	add.w	r1, r4, #16
 800dc16:	f008 ffeb 	bl	8016bf0 <rcl_action_client_wait_set_get_entities_ready>
 800dc1a:	e7e1      	b.n	800dbe0 <_rclc_check_for_new_data+0x34>
 800dc1c:	685c      	ldr	r4, [r3, #4]
 800dc1e:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800dc22:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800dc26:	e9cd 3200 	strd	r3, r2, [sp]
 800dc2a:	4608      	mov	r0, r1
 800dc2c:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800dc30:	f104 0220 	add.w	r2, r4, #32
 800dc34:	f104 0110 	add.w	r1, r4, #16
 800dc38:	f009 f9f2 	bl	8017020 <rcl_action_server_wait_set_get_entities_ready>
 800dc3c:	e7d0      	b.n	800dbe0 <_rclc_check_for_new_data+0x34>
 800dc3e:	200b      	movs	r0, #11
 800dc40:	4770      	bx	lr
 800dc42:	2001      	movs	r0, #1
 800dc44:	e7cc      	b.n	800dbe0 <_rclc_check_for_new_data+0x34>
 800dc46:	bf00      	nop

0800dc48 <_rclc_take_new_data>:
 800dc48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc4a:	b09b      	sub	sp, #108	@ 0x6c
 800dc4c:	2800      	cmp	r0, #0
 800dc4e:	f000 8088 	beq.w	800dd62 <_rclc_take_new_data+0x11a>
 800dc52:	7803      	ldrb	r3, [r0, #0]
 800dc54:	4604      	mov	r4, r0
 800dc56:	2b0a      	cmp	r3, #10
 800dc58:	f200 8167 	bhi.w	800df2a <_rclc_take_new_data+0x2e2>
 800dc5c:	e8df f003 	tbb	[pc, r3]
 800dc60:	44152d2d 	.word	0x44152d2d
 800dc64:	19191944 	.word	0x19191944
 800dc68:	065a      	.short	0x065a
 800dc6a:	15          	.byte	0x15
 800dc6b:	00          	.byte	0x00
 800dc6c:	6840      	ldr	r0, [r0, #4]
 800dc6e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	f040 80b2 	bne.w	800dddc <_rclc_take_new_data+0x194>
 800dc78:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	f040 80e4 	bne.w	800de4a <_rclc_take_new_data+0x202>
 800dc82:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d16f      	bne.n	800dd6a <_rclc_take_new_data+0x122>
 800dc8a:	2500      	movs	r5, #0
 800dc8c:	4628      	mov	r0, r5
 800dc8e:	b01b      	add	sp, #108	@ 0x6c
 800dc90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc92:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800dc94:	6a0b      	ldr	r3, [r1, #32]
 800dc96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d0f5      	beq.n	800dc8a <_rclc_take_new_data+0x42>
 800dc9e:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800dca2:	f104 0110 	add.w	r1, r4, #16
 800dca6:	f007 fe43 	bl	8015930 <rcl_take_request>
 800dcaa:	4605      	mov	r5, r0
 800dcac:	2800      	cmp	r0, #0
 800dcae:	d0ec      	beq.n	800dc8a <_rclc_take_new_data+0x42>
 800dcb0:	f240 2359 	movw	r3, #601	@ 0x259
 800dcb4:	4298      	cmp	r0, r3
 800dcb6:	d013      	beq.n	800dce0 <_rclc_take_new_data+0x98>
 800dcb8:	e029      	b.n	800dd0e <_rclc_take_new_data+0xc6>
 800dcba:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800dcbc:	680b      	ldr	r3, [r1, #0]
 800dcbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d0e1      	beq.n	800dc8a <_rclc_take_new_data+0x42>
 800dcc6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800dcca:	2300      	movs	r3, #0
 800dccc:	aa0a      	add	r2, sp, #40	@ 0x28
 800dcce:	f7ff fc8b 	bl	800d5e8 <rcl_take>
 800dcd2:	4605      	mov	r5, r0
 800dcd4:	2800      	cmp	r0, #0
 800dcd6:	d0d9      	beq.n	800dc8c <_rclc_take_new_data+0x44>
 800dcd8:	f240 1391 	movw	r3, #401	@ 0x191
 800dcdc:	4298      	cmp	r0, r3
 800dcde:	d116      	bne.n	800dd0e <_rclc_take_new_data+0xc6>
 800dce0:	2300      	movs	r3, #0
 800dce2:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800dce6:	e7d1      	b.n	800dc8c <_rclc_take_new_data+0x44>
 800dce8:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800dcea:	698b      	ldr	r3, [r1, #24]
 800dcec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d0ca      	beq.n	800dc8a <_rclc_take_new_data+0x42>
 800dcf4:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800dcf8:	f104 0110 	add.w	r1, r4, #16
 800dcfc:	f007 fac8 	bl	8015290 <rcl_take_response>
 800dd00:	4605      	mov	r5, r0
 800dd02:	2800      	cmp	r0, #0
 800dd04:	d0c1      	beq.n	800dc8a <_rclc_take_new_data+0x42>
 800dd06:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800dd0a:	4298      	cmp	r0, r3
 800dd0c:	d0be      	beq.n	800dc8c <_rclc_take_new_data+0x44>
 800dd0e:	f001 f813 	bl	800ed38 <rcutils_reset_error>
 800dd12:	e7bb      	b.n	800dc8c <_rclc_take_new_data+0x44>
 800dd14:	6840      	ldr	r0, [r0, #4]
 800dd16:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d17d      	bne.n	800de1a <_rclc_take_new_data+0x1d2>
 800dd1e:	69c3      	ldr	r3, [r0, #28]
 800dd20:	b11b      	cbz	r3, 800dd2a <_rclc_take_new_data+0xe2>
 800dd22:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d144      	bne.n	800ddb4 <_rclc_take_new_data+0x16c>
 800dd2a:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	f040 80ac 	bne.w	800de8c <_rclc_take_new_data+0x244>
 800dd34:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d0a6      	beq.n	800dc8a <_rclc_take_new_data+0x42>
 800dd3c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800dd3e:	a90a      	add	r1, sp, #40	@ 0x28
 800dd40:	3010      	adds	r0, #16
 800dd42:	f008 fe2d 	bl	80169a0 <rcl_action_take_result_response>
 800dd46:	4605      	mov	r5, r0
 800dd48:	2800      	cmp	r0, #0
 800dd4a:	d1e0      	bne.n	800dd0e <_rclc_take_new_data+0xc6>
 800dd4c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800dd50:	6860      	ldr	r0, [r4, #4]
 800dd52:	f009 fa89 	bl	8017268 <rclc_action_find_handle_by_result_request_sequence_number>
 800dd56:	2800      	cmp	r0, #0
 800dd58:	d098      	beq.n	800dc8c <_rclc_take_new_data+0x44>
 800dd5a:	2301      	movs	r3, #1
 800dd5c:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800dd60:	e794      	b.n	800dc8c <_rclc_take_new_data+0x44>
 800dd62:	250b      	movs	r5, #11
 800dd64:	4628      	mov	r0, r5
 800dd66:	b01b      	add	sp, #108	@ 0x6c
 800dd68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd6a:	ae04      	add	r6, sp, #16
 800dd6c:	aa0a      	add	r2, sp, #40	@ 0x28
 800dd6e:	3010      	adds	r0, #16
 800dd70:	4631      	mov	r1, r6
 800dd72:	f009 f889 	bl	8016e88 <rcl_action_take_cancel_request>
 800dd76:	4605      	mov	r5, r0
 800dd78:	2800      	cmp	r0, #0
 800dd7a:	d1c8      	bne.n	800dd0e <_rclc_take_new_data+0xc6>
 800dd7c:	6860      	ldr	r0, [r4, #4]
 800dd7e:	a90a      	add	r1, sp, #40	@ 0x28
 800dd80:	f009 fa30 	bl	80171e4 <rclc_action_find_goal_handle_by_uuid>
 800dd84:	4607      	mov	r7, r0
 800dd86:	2800      	cmp	r0, #0
 800dd88:	f000 80bb 	beq.w	800df02 <_rclc_take_new_data+0x2ba>
 800dd8c:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800dd90:	2101      	movs	r1, #1
 800dd92:	f009 f9b1 	bl	80170f8 <rcl_action_transition_goal_state>
 800dd96:	2803      	cmp	r0, #3
 800dd98:	4684      	mov	ip, r0
 800dd9a:	f040 80a7 	bne.w	800deec <_rclc_take_new_data+0x2a4>
 800dd9e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800dda0:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800dda4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dda6:	e896 0003 	ldmia.w	r6, {r0, r1}
 800ddaa:	e884 0003 	stmia.w	r4, {r0, r1}
 800ddae:	f887 c008 	strb.w	ip, [r7, #8]
 800ddb2:	e76b      	b.n	800dc8c <_rclc_take_new_data+0x44>
 800ddb4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800ddb6:	3010      	adds	r0, #16
 800ddb8:	f008 fe72 	bl	8016aa0 <rcl_action_take_feedback>
 800ddbc:	4605      	mov	r5, r0
 800ddbe:	2800      	cmp	r0, #0
 800ddc0:	d1a5      	bne.n	800dd0e <_rclc_take_new_data+0xc6>
 800ddc2:	6860      	ldr	r0, [r4, #4]
 800ddc4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800ddc6:	f009 fa0d 	bl	80171e4 <rclc_action_find_goal_handle_by_uuid>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	2800      	cmp	r0, #0
 800ddce:	f000 80a3 	beq.w	800df18 <_rclc_take_new_data+0x2d0>
 800ddd2:	2201      	movs	r2, #1
 800ddd4:	6860      	ldr	r0, [r4, #4]
 800ddd6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800ddda:	e7a6      	b.n	800dd2a <_rclc_take_new_data+0xe2>
 800dddc:	f009 f9dc 	bl	8017198 <rclc_action_take_goal_handle>
 800dde0:	4606      	mov	r6, r0
 800dde2:	6860      	ldr	r0, [r4, #4]
 800dde4:	2e00      	cmp	r6, #0
 800dde6:	f43f af47 	beq.w	800dc78 <_rclc_take_new_data+0x30>
 800ddea:	6070      	str	r0, [r6, #4]
 800ddec:	69f2      	ldr	r2, [r6, #28]
 800ddee:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800ddf2:	3010      	adds	r0, #16
 800ddf4:	f008 ff90 	bl	8016d18 <rcl_action_take_goal_request>
 800ddf8:	4605      	mov	r5, r0
 800ddfa:	2800      	cmp	r0, #0
 800ddfc:	f040 808e 	bne.w	800df1c <_rclc_take_new_data+0x2d4>
 800de00:	69f7      	ldr	r7, [r6, #28]
 800de02:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800de04:	7235      	strb	r5, [r6, #8]
 800de06:	f8c6 0009 	str.w	r0, [r6, #9]
 800de0a:	f8c6 100d 	str.w	r1, [r6, #13]
 800de0e:	6860      	ldr	r0, [r4, #4]
 800de10:	f8c6 2011 	str.w	r2, [r6, #17]
 800de14:	f8c6 3015 	str.w	r3, [r6, #21]
 800de18:	e72e      	b.n	800dc78 <_rclc_take_new_data+0x30>
 800de1a:	aa04      	add	r2, sp, #16
 800de1c:	a90a      	add	r1, sp, #40	@ 0x28
 800de1e:	3010      	adds	r0, #16
 800de20:	f008 fd46 	bl	80168b0 <rcl_action_take_goal_response>
 800de24:	4605      	mov	r5, r0
 800de26:	2800      	cmp	r0, #0
 800de28:	f47f af71 	bne.w	800dd0e <_rclc_take_new_data+0xc6>
 800de2c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800de30:	6860      	ldr	r0, [r4, #4]
 800de32:	f009 fa07 	bl	8017244 <rclc_action_find_handle_by_goal_request_sequence_number>
 800de36:	b130      	cbz	r0, 800de46 <_rclc_take_new_data+0x1fe>
 800de38:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800de3c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800de40:	2201      	movs	r2, #1
 800de42:	f880 2020 	strb.w	r2, [r0, #32]
 800de46:	6860      	ldr	r0, [r4, #4]
 800de48:	e769      	b.n	800dd1e <_rclc_take_new_data+0xd6>
 800de4a:	aa04      	add	r2, sp, #16
 800de4c:	3010      	adds	r0, #16
 800de4e:	a90a      	add	r1, sp, #40	@ 0x28
 800de50:	f008 ffda 	bl	8016e08 <rcl_action_take_result_request>
 800de54:	4605      	mov	r5, r0
 800de56:	2800      	cmp	r0, #0
 800de58:	f47f af59 	bne.w	800dd0e <_rclc_take_new_data+0xc6>
 800de5c:	6860      	ldr	r0, [r4, #4]
 800de5e:	a904      	add	r1, sp, #16
 800de60:	f009 f9c0 	bl	80171e4 <rclc_action_find_goal_handle_by_uuid>
 800de64:	4607      	mov	r7, r0
 800de66:	b160      	cbz	r0, 800de82 <_rclc_take_new_data+0x23a>
 800de68:	ad0a      	add	r5, sp, #40	@ 0x28
 800de6a:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800de6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800de70:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800de72:	e895 0003 	ldmia.w	r5, {r0, r1}
 800de76:	f04f 0c02 	mov.w	ip, #2
 800de7a:	e886 0003 	stmia.w	r6, {r0, r1}
 800de7e:	f887 c008 	strb.w	ip, [r7, #8]
 800de82:	6860      	ldr	r0, [r4, #4]
 800de84:	2300      	movs	r3, #0
 800de86:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800de8a:	e6fa      	b.n	800dc82 <_rclc_take_new_data+0x3a>
 800de8c:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800de90:	a90a      	add	r1, sp, #40	@ 0x28
 800de92:	3010      	adds	r0, #16
 800de94:	f008 fdc4 	bl	8016a20 <rcl_action_take_cancel_response>
 800de98:	4605      	mov	r5, r0
 800de9a:	2800      	cmp	r0, #0
 800de9c:	f47f af37 	bne.w	800dd0e <_rclc_take_new_data+0xc6>
 800dea0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800dea4:	6860      	ldr	r0, [r4, #4]
 800dea6:	f009 f9f1 	bl	801728c <rclc_action_find_handle_by_cancel_request_sequence_number>
 800deaa:	4606      	mov	r6, r0
 800deac:	6860      	ldr	r0, [r4, #4]
 800deae:	2e00      	cmp	r6, #0
 800deb0:	f43f af40 	beq.w	800dd34 <_rclc_take_new_data+0xec>
 800deb4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800deb6:	2701      	movs	r7, #1
 800deb8:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800deba:	2b00      	cmp	r3, #0
 800debc:	f43f af3a 	beq.w	800dd34 <_rclc_take_new_data+0xec>
 800dec0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800dec2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800dec6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800deca:	f009 f98b 	bl	80171e4 <rclc_action_find_goal_handle_by_uuid>
 800dece:	b138      	cbz	r0, 800dee0 <_rclc_take_new_data+0x298>
 800ded0:	6860      	ldr	r0, [r4, #4]
 800ded2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800ded4:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800ded8:	3501      	adds	r5, #1
 800deda:	42ab      	cmp	r3, r5
 800dedc:	d8f0      	bhi.n	800dec0 <_rclc_take_new_data+0x278>
 800dede:	e729      	b.n	800dd34 <_rclc_take_new_data+0xec>
 800dee0:	6860      	ldr	r0, [r4, #4]
 800dee2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800dee4:	3501      	adds	r5, #1
 800dee6:	42ab      	cmp	r3, r5
 800dee8:	d8ea      	bhi.n	800dec0 <_rclc_take_new_data+0x278>
 800deea:	e723      	b.n	800dd34 <_rclc_take_new_data+0xec>
 800deec:	ab06      	add	r3, sp, #24
 800deee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800def0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800def4:	2103      	movs	r1, #3
 800def6:	e896 000c 	ldmia.w	r6, {r2, r3}
 800defa:	6860      	ldr	r0, [r4, #4]
 800defc:	f009 fa3c 	bl	8017378 <rclc_action_server_goal_cancel_reject>
 800df00:	e6c4      	b.n	800dc8c <_rclc_take_new_data+0x44>
 800df02:	ab06      	add	r3, sp, #24
 800df04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800df06:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800df0a:	2102      	movs	r1, #2
 800df0c:	e896 000c 	ldmia.w	r6, {r2, r3}
 800df10:	6860      	ldr	r0, [r4, #4]
 800df12:	f009 fa31 	bl	8017378 <rclc_action_server_goal_cancel_reject>
 800df16:	e6b9      	b.n	800dc8c <_rclc_take_new_data+0x44>
 800df18:	6860      	ldr	r0, [r4, #4]
 800df1a:	e706      	b.n	800dd2a <_rclc_take_new_data+0xe2>
 800df1c:	6860      	ldr	r0, [r4, #4]
 800df1e:	4631      	mov	r1, r6
 800df20:	f009 f94a 	bl	80171b8 <rclc_action_remove_used_goal_handle>
 800df24:	f000 ff08 	bl	800ed38 <rcutils_reset_error>
 800df28:	e6b0      	b.n	800dc8c <_rclc_take_new_data+0x44>
 800df2a:	2501      	movs	r5, #1
 800df2c:	e6ae      	b.n	800dc8c <_rclc_take_new_data+0x44>
 800df2e:	bf00      	nop

0800df30 <_rclc_execute.part.0>:
 800df30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df32:	7803      	ldrb	r3, [r0, #0]
 800df34:	b087      	sub	sp, #28
 800df36:	4604      	mov	r4, r0
 800df38:	2b0a      	cmp	r3, #10
 800df3a:	f200 8136 	bhi.w	800e1aa <_rclc_execute.part.0+0x27a>
 800df3e:	e8df f003 	tbb	[pc, r3]
 800df42:	435e      	.short	0x435e
 800df44:	06a1664f 	.word	0x06a1664f
 800df48:	6c1e0606 	.word	0x6c1e0606
 800df4c:	59          	.byte	0x59
 800df4d:	00          	.byte	0x00
 800df4e:	2b06      	cmp	r3, #6
 800df50:	f000 8122 	beq.w	800e198 <_rclc_execute.part.0+0x268>
 800df54:	2b07      	cmp	r3, #7
 800df56:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800df58:	f040 8118 	bne.w	800e18c <_rclc_execute.part.0+0x25c>
 800df5c:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800df60:	6880      	ldr	r0, [r0, #8]
 800df62:	4798      	blx	r3
 800df64:	f104 0110 	add.w	r1, r4, #16
 800df68:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800df6a:	6860      	ldr	r0, [r4, #4]
 800df6c:	f007 fd20 	bl	80159b0 <rcl_send_response>
 800df70:	2800      	cmp	r0, #0
 800df72:	d033      	beq.n	800dfdc <_rclc_execute.part.0+0xac>
 800df74:	9005      	str	r0, [sp, #20]
 800df76:	f000 fedf 	bl	800ed38 <rcutils_reset_error>
 800df7a:	9805      	ldr	r0, [sp, #20]
 800df7c:	e02e      	b.n	800dfdc <_rclc_execute.part.0+0xac>
 800df7e:	6840      	ldr	r0, [r0, #4]
 800df80:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800df84:	2b00      	cmp	r3, #0
 800df86:	f000 8086 	beq.w	800e096 <_rclc_execute.part.0+0x166>
 800df8a:	2600      	movs	r6, #0
 800df8c:	2701      	movs	r7, #1
 800df8e:	e004      	b.n	800df9a <_rclc_execute.part.0+0x6a>
 800df90:	f009 f8dc 	bl	801714c <rclc_action_send_result_request>
 800df94:	b998      	cbnz	r0, 800dfbe <_rclc_execute.part.0+0x8e>
 800df96:	722f      	strb	r7, [r5, #8]
 800df98:	6860      	ldr	r0, [r4, #4]
 800df9a:	f009 f989 	bl	80172b0 <rclc_action_find_first_handle_with_goal_response>
 800df9e:	4605      	mov	r5, r0
 800dfa0:	2800      	cmp	r0, #0
 800dfa2:	d077      	beq.n	800e094 <_rclc_execute.part.0+0x164>
 800dfa4:	6863      	ldr	r3, [r4, #4]
 800dfa6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800dfa8:	699b      	ldr	r3, [r3, #24]
 800dfaa:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800dfae:	f885 6020 	strb.w	r6, [r5, #32]
 800dfb2:	4798      	blx	r3
 800dfb4:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800dfb8:	4628      	mov	r0, r5
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d1e8      	bne.n	800df90 <_rclc_execute.part.0+0x60>
 800dfbe:	6860      	ldr	r0, [r4, #4]
 800dfc0:	4629      	mov	r1, r5
 800dfc2:	f009 f8f9 	bl	80171b8 <rclc_action_remove_used_goal_handle>
 800dfc6:	e7e7      	b.n	800df98 <_rclc_execute.part.0+0x68>
 800dfc8:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800dfcc:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800dfd0:	2d00      	cmp	r5, #0
 800dfd2:	f000 80c9 	beq.w	800e168 <_rclc_execute.part.0+0x238>
 800dfd6:	6880      	ldr	r0, [r0, #8]
 800dfd8:	4798      	blx	r3
 800dfda:	2000      	movs	r0, #0
 800dfdc:	b007      	add	sp, #28
 800dfde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfe0:	6840      	ldr	r0, [r0, #4]
 800dfe2:	f7ff fcdb 	bl	800d99c <rcl_timer_call>
 800dfe6:	f240 3321 	movw	r3, #801	@ 0x321
 800dfea:	4298      	cmp	r0, r3
 800dfec:	d004      	beq.n	800dff8 <_rclc_execute.part.0+0xc8>
 800dfee:	2800      	cmp	r0, #0
 800dff0:	d0f4      	beq.n	800dfdc <_rclc_execute.part.0+0xac>
 800dff2:	e7bf      	b.n	800df74 <_rclc_execute.part.0+0x44>
 800dff4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800dff6:	4798      	blx	r3
 800dff8:	2000      	movs	r0, #0
 800dffa:	b007      	add	sp, #28
 800dffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dffe:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800e002:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e004:	b925      	cbnz	r5, 800e010 <_rclc_execute.part.0+0xe0>
 800e006:	4628      	mov	r0, r5
 800e008:	4798      	blx	r3
 800e00a:	4628      	mov	r0, r5
 800e00c:	e7e6      	b.n	800dfdc <_rclc_execute.part.0+0xac>
 800e00e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e010:	68a0      	ldr	r0, [r4, #8]
 800e012:	4798      	blx	r3
 800e014:	2000      	movs	r0, #0
 800e016:	b007      	add	sp, #28
 800e018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e01a:	6840      	ldr	r0, [r0, #4]
 800e01c:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800e020:	bb3b      	cbnz	r3, 800e072 <_rclc_execute.part.0+0x142>
 800e022:	f890 3020 	ldrb.w	r3, [r0, #32]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d07b      	beq.n	800e122 <_rclc_execute.part.0+0x1f2>
 800e02a:	f640 0634 	movw	r6, #2100	@ 0x834
 800e02e:	2701      	movs	r7, #1
 800e030:	e007      	b.n	800e042 <_rclc_execute.part.0+0x112>
 800e032:	4628      	mov	r0, r5
 800e034:	f009 f954 	bl	80172e0 <rclc_action_server_response_goal_request>
 800e038:	6860      	ldr	r0, [r4, #4]
 800e03a:	4629      	mov	r1, r5
 800e03c:	f009 f8bc 	bl	80171b8 <rclc_action_remove_used_goal_handle>
 800e040:	6860      	ldr	r0, [r4, #4]
 800e042:	2100      	movs	r1, #0
 800e044:	f009 f8e6 	bl	8017214 <rclc_action_find_first_handle_by_status>
 800e048:	4605      	mov	r5, r0
 800e04a:	2800      	cmp	r0, #0
 800e04c:	d066      	beq.n	800e11c <_rclc_execute.part.0+0x1ec>
 800e04e:	6863      	ldr	r3, [r4, #4]
 800e050:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e052:	699b      	ldr	r3, [r3, #24]
 800e054:	4798      	blx	r3
 800e056:	42b0      	cmp	r0, r6
 800e058:	f04f 0100 	mov.w	r1, #0
 800e05c:	d1e9      	bne.n	800e032 <_rclc_execute.part.0+0x102>
 800e05e:	2101      	movs	r1, #1
 800e060:	4628      	mov	r0, r5
 800e062:	f009 f93d 	bl	80172e0 <rclc_action_server_response_goal_request>
 800e066:	722f      	strb	r7, [r5, #8]
 800e068:	e7ea      	b.n	800e040 <_rclc_execute.part.0+0x110>
 800e06a:	6848      	ldr	r0, [r1, #4]
 800e06c:	f009 f8a4 	bl	80171b8 <rclc_action_remove_used_goal_handle>
 800e070:	6860      	ldr	r0, [r4, #4]
 800e072:	f009 f8db 	bl	801722c <rclc_action_find_first_terminated_handle>
 800e076:	4601      	mov	r1, r0
 800e078:	2800      	cmp	r0, #0
 800e07a:	d1f6      	bne.n	800e06a <_rclc_execute.part.0+0x13a>
 800e07c:	6860      	ldr	r0, [r4, #4]
 800e07e:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800e082:	e7ce      	b.n	800e022 <_rclc_execute.part.0+0xf2>
 800e084:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e086:	6880      	ldr	r0, [r0, #8]
 800e088:	f104 0110 	add.w	r1, r4, #16
 800e08c:	4798      	blx	r3
 800e08e:	2000      	movs	r0, #0
 800e090:	b007      	add	sp, #28
 800e092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e094:	6860      	ldr	r0, [r4, #4]
 800e096:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800e09a:	b18b      	cbz	r3, 800e0c0 <_rclc_execute.part.0+0x190>
 800e09c:	68c5      	ldr	r5, [r0, #12]
 800e09e:	b32d      	cbz	r5, 800e0ec <_rclc_execute.part.0+0x1bc>
 800e0a0:	2600      	movs	r6, #0
 800e0a2:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800e0a6:	b143      	cbz	r3, 800e0ba <_rclc_execute.part.0+0x18a>
 800e0a8:	69c3      	ldr	r3, [r0, #28]
 800e0aa:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800e0ae:	b123      	cbz	r3, 800e0ba <_rclc_execute.part.0+0x18a>
 800e0b0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800e0b2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e0b4:	4628      	mov	r0, r5
 800e0b6:	4798      	blx	r3
 800e0b8:	6860      	ldr	r0, [r4, #4]
 800e0ba:	682d      	ldr	r5, [r5, #0]
 800e0bc:	2d00      	cmp	r5, #0
 800e0be:	d1f0      	bne.n	800e0a2 <_rclc_execute.part.0+0x172>
 800e0c0:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800e0c4:	b193      	cbz	r3, 800e0ec <_rclc_execute.part.0+0x1bc>
 800e0c6:	68c5      	ldr	r5, [r0, #12]
 800e0c8:	b185      	cbz	r5, 800e0ec <_rclc_execute.part.0+0x1bc>
 800e0ca:	2600      	movs	r6, #0
 800e0cc:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800e0d0:	b14b      	cbz	r3, 800e0e6 <_rclc_execute.part.0+0x1b6>
 800e0d2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800e0d4:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800e0d8:	b12b      	cbz	r3, 800e0e6 <_rclc_execute.part.0+0x1b6>
 800e0da:	4628      	mov	r0, r5
 800e0dc:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800e0e0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e0e2:	4798      	blx	r3
 800e0e4:	6860      	ldr	r0, [r4, #4]
 800e0e6:	682d      	ldr	r5, [r5, #0]
 800e0e8:	2d00      	cmp	r5, #0
 800e0ea:	d1ef      	bne.n	800e0cc <_rclc_execute.part.0+0x19c>
 800e0ec:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d081      	beq.n	800dff8 <_rclc_execute.part.0+0xc8>
 800e0f4:	2700      	movs	r7, #0
 800e0f6:	e00b      	b.n	800e110 <_rclc_execute.part.0+0x1e0>
 800e0f8:	6863      	ldr	r3, [r4, #4]
 800e0fa:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e0fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800e0fe:	6a1e      	ldr	r6, [r3, #32]
 800e100:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800e104:	47b0      	blx	r6
 800e106:	6860      	ldr	r0, [r4, #4]
 800e108:	4629      	mov	r1, r5
 800e10a:	f009 f855 	bl	80171b8 <rclc_action_remove_used_goal_handle>
 800e10e:	6860      	ldr	r0, [r4, #4]
 800e110:	f009 f8da 	bl	80172c8 <rclc_action_find_first_handle_with_result_response>
 800e114:	4605      	mov	r5, r0
 800e116:	2800      	cmp	r0, #0
 800e118:	d1ee      	bne.n	800e0f8 <_rclc_execute.part.0+0x1c8>
 800e11a:	e76d      	b.n	800dff8 <_rclc_execute.part.0+0xc8>
 800e11c:	6860      	ldr	r0, [r4, #4]
 800e11e:	f880 5020 	strb.w	r5, [r0, #32]
 800e122:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800e126:	2b00      	cmp	r3, #0
 800e128:	f43f af66 	beq.w	800dff8 <_rclc_execute.part.0+0xc8>
 800e12c:	68c5      	ldr	r5, [r0, #12]
 800e12e:	b1b5      	cbz	r5, 800e15e <_rclc_execute.part.0+0x22e>
 800e130:	2602      	movs	r6, #2
 800e132:	e001      	b.n	800e138 <_rclc_execute.part.0+0x208>
 800e134:	682d      	ldr	r5, [r5, #0]
 800e136:	b195      	cbz	r5, 800e15e <_rclc_execute.part.0+0x22e>
 800e138:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800e13c:	2b03      	cmp	r3, #3
 800e13e:	d1f9      	bne.n	800e134 <_rclc_execute.part.0+0x204>
 800e140:	69c3      	ldr	r3, [r0, #28]
 800e142:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e144:	4628      	mov	r0, r5
 800e146:	4798      	blx	r3
 800e148:	4603      	mov	r3, r0
 800e14a:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800e14e:	4628      	mov	r0, r5
 800e150:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800e154:	b163      	cbz	r3, 800e170 <_rclc_execute.part.0+0x240>
 800e156:	f009 f8e3 	bl	8017320 <rclc_action_server_goal_cancel_accept>
 800e15a:	6860      	ldr	r0, [r4, #4]
 800e15c:	e7ea      	b.n	800e134 <_rclc_execute.part.0+0x204>
 800e15e:	2300      	movs	r3, #0
 800e160:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800e164:	4618      	mov	r0, r3
 800e166:	e739      	b.n	800dfdc <_rclc_execute.part.0+0xac>
 800e168:	4628      	mov	r0, r5
 800e16a:	4798      	blx	r3
 800e16c:	4628      	mov	r0, r5
 800e16e:	e735      	b.n	800dfdc <_rclc_execute.part.0+0xac>
 800e170:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800e172:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e176:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800e17a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e17e:	6860      	ldr	r0, [r4, #4]
 800e180:	2101      	movs	r1, #1
 800e182:	f009 f8f9 	bl	8017378 <rclc_action_server_goal_cancel_reject>
 800e186:	722e      	strb	r6, [r5, #8]
 800e188:	6860      	ldr	r0, [r4, #4]
 800e18a:	e7d3      	b.n	800e134 <_rclc_execute.part.0+0x204>
 800e18c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800e18e:	6880      	ldr	r0, [r0, #8]
 800e190:	4798      	blx	r3
 800e192:	f104 0110 	add.w	r1, r4, #16
 800e196:	e6e7      	b.n	800df68 <_rclc_execute.part.0+0x38>
 800e198:	f100 0110 	add.w	r1, r0, #16
 800e19c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e19e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800e1a0:	6880      	ldr	r0, [r0, #8]
 800e1a2:	9105      	str	r1, [sp, #20]
 800e1a4:	4798      	blx	r3
 800e1a6:	9905      	ldr	r1, [sp, #20]
 800e1a8:	e6de      	b.n	800df68 <_rclc_execute.part.0+0x38>
 800e1aa:	2001      	movs	r0, #1
 800e1ac:	e716      	b.n	800dfdc <_rclc_execute.part.0+0xac>
 800e1ae:	bf00      	nop

0800e1b0 <rclc_executor_trigger_any>:
 800e1b0:	2800      	cmp	r0, #0
 800e1b2:	d03f      	beq.n	800e234 <rclc_executor_trigger_any+0x84>
 800e1b4:	2900      	cmp	r1, #0
 800e1b6:	d03e      	beq.n	800e236 <rclc_executor_trigger_any+0x86>
 800e1b8:	4603      	mov	r3, r0
 800e1ba:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800e1be:	2200      	movs	r2, #0
 800e1c0:	2800      	cmp	r0, #0
 800e1c2:	d037      	beq.n	800e234 <rclc_executor_trigger_any+0x84>
 800e1c4:	b430      	push	{r4, r5}
 800e1c6:	f893 c000 	ldrb.w	ip, [r3]
 800e1ca:	f1bc 0f08 	cmp.w	ip, #8
 800e1ce:	d11e      	bne.n	800e20e <rclc_executor_trigger_any+0x5e>
 800e1d0:	685c      	ldr	r4, [r3, #4]
 800e1d2:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800e1d4:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800e1d8:	d105      	bne.n	800e1e6 <rclc_executor_trigger_any+0x36>
 800e1da:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800e1de:	b910      	cbnz	r0, 800e1e6 <rclc_executor_trigger_any+0x36>
 800e1e0:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800e1e4:	b128      	cbz	r0, 800e1f2 <rclc_executor_trigger_any+0x42>
 800e1e6:	bc30      	pop	{r4, r5}
 800e1e8:	4770      	bx	lr
 800e1ea:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800e1ee:	2800      	cmp	r0, #0
 800e1f0:	d1f9      	bne.n	800e1e6 <rclc_executor_trigger_any+0x36>
 800e1f2:	3201      	adds	r2, #1
 800e1f4:	4291      	cmp	r1, r2
 800e1f6:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800e1fa:	d018      	beq.n	800e22e <rclc_executor_trigger_any+0x7e>
 800e1fc:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800e200:	2800      	cmp	r0, #0
 800e202:	d0f0      	beq.n	800e1e6 <rclc_executor_trigger_any+0x36>
 800e204:	f893 c000 	ldrb.w	ip, [r3]
 800e208:	f1bc 0f08 	cmp.w	ip, #8
 800e20c:	d0e0      	beq.n	800e1d0 <rclc_executor_trigger_any+0x20>
 800e20e:	f1bc 0f09 	cmp.w	ip, #9
 800e212:	d1ea      	bne.n	800e1ea <rclc_executor_trigger_any+0x3a>
 800e214:	685c      	ldr	r4, [r3, #4]
 800e216:	6a25      	ldr	r5, [r4, #32]
 800e218:	2d00      	cmp	r5, #0
 800e21a:	d1e4      	bne.n	800e1e6 <rclc_executor_trigger_any+0x36>
 800e21c:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800e220:	2800      	cmp	r0, #0
 800e222:	d1e0      	bne.n	800e1e6 <rclc_executor_trigger_any+0x36>
 800e224:	3201      	adds	r2, #1
 800e226:	4291      	cmp	r1, r2
 800e228:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800e22c:	d1e6      	bne.n	800e1fc <rclc_executor_trigger_any+0x4c>
 800e22e:	2000      	movs	r0, #0
 800e230:	bc30      	pop	{r4, r5}
 800e232:	4770      	bx	lr
 800e234:	4770      	bx	lr
 800e236:	4608      	mov	r0, r1
 800e238:	4770      	bx	lr
 800e23a:	bf00      	nop
 800e23c:	0000      	movs	r0, r0
	...

0800e240 <rclc_executor_init>:
 800e240:	2800      	cmp	r0, #0
 800e242:	d05f      	beq.n	800e304 <rclc_executor_init+0xc4>
 800e244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e248:	460c      	mov	r4, r1
 800e24a:	b0b0      	sub	sp, #192	@ 0xc0
 800e24c:	2900      	cmp	r1, #0
 800e24e:	d051      	beq.n	800e2f4 <rclc_executor_init+0xb4>
 800e250:	4605      	mov	r5, r0
 800e252:	4618      	mov	r0, r3
 800e254:	4616      	mov	r6, r2
 800e256:	461f      	mov	r7, r3
 800e258:	f000 fc8e 	bl	800eb78 <rcutils_allocator_is_valid>
 800e25c:	2800      	cmp	r0, #0
 800e25e:	d049      	beq.n	800e2f4 <rclc_executor_init+0xb4>
 800e260:	2e00      	cmp	r6, #0
 800e262:	d047      	beq.n	800e2f4 <rclc_executor_init+0xb4>
 800e264:	492c      	ldr	r1, [pc, #176]	@ (800e318 <rclc_executor_init+0xd8>)
 800e266:	2288      	movs	r2, #136	@ 0x88
 800e268:	a80e      	add	r0, sp, #56	@ 0x38
 800e26a:	f00c f8ac 	bl	801a3c6 <memcpy>
 800e26e:	a90e      	add	r1, sp, #56	@ 0x38
 800e270:	2288      	movs	r2, #136	@ 0x88
 800e272:	4628      	mov	r0, r5
 800e274:	f00c f8a7 	bl	801a3c6 <memcpy>
 800e278:	602c      	str	r4, [r5, #0]
 800e27a:	4668      	mov	r0, sp
 800e27c:	60ae      	str	r6, [r5, #8]
 800e27e:	466c      	mov	r4, sp
 800e280:	f007 fd46 	bl	8015d10 <rcl_get_zero_initialized_wait_set>
 800e284:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e286:	f105 0c14 	add.w	ip, r5, #20
 800e28a:	f8d7 8000 	ldr.w	r8, [r7]
 800e28e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e292:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e294:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e298:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e29a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e29e:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800e310 <rclc_executor_init+0xd0>
 800e2a2:	6823      	ldr	r3, [r4, #0]
 800e2a4:	f8cc 3000 	str.w	r3, [ip]
 800e2a8:	6939      	ldr	r1, [r7, #16]
 800e2aa:	612f      	str	r7, [r5, #16]
 800e2ac:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800e2b0:	01b0      	lsls	r0, r6, #6
 800e2b2:	47c0      	blx	r8
 800e2b4:	6068      	str	r0, [r5, #4]
 800e2b6:	b338      	cbz	r0, 800e308 <rclc_executor_init+0xc8>
 800e2b8:	2400      	movs	r4, #0
 800e2ba:	e000      	b.n	800e2be <rclc_executor_init+0x7e>
 800e2bc:	6868      	ldr	r0, [r5, #4]
 800e2be:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800e2c2:	4631      	mov	r1, r6
 800e2c4:	3401      	adds	r4, #1
 800e2c6:	f000 facb 	bl	800e860 <rclc_executor_handle_init>
 800e2ca:	42a6      	cmp	r6, r4
 800e2cc:	d1f6      	bne.n	800e2bc <rclc_executor_init+0x7c>
 800e2ce:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800e2d2:	f000 fab9 	bl	800e848 <rclc_executor_handle_counters_zero_init>
 800e2d6:	4a11      	ldr	r2, [pc, #68]	@ (800e31c <rclc_executor_init+0xdc>)
 800e2d8:	686b      	ldr	r3, [r5, #4]
 800e2da:	2000      	movs	r0, #0
 800e2dc:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800e2e0:	b163      	cbz	r3, 800e2fc <rclc_executor_init+0xbc>
 800e2e2:	692b      	ldr	r3, [r5, #16]
 800e2e4:	b153      	cbz	r3, 800e2fc <rclc_executor_init+0xbc>
 800e2e6:	68ab      	ldr	r3, [r5, #8]
 800e2e8:	b143      	cbz	r3, 800e2fc <rclc_executor_init+0xbc>
 800e2ea:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800e2ee:	b030      	add	sp, #192	@ 0xc0
 800e2f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2f4:	200b      	movs	r0, #11
 800e2f6:	b030      	add	sp, #192	@ 0xc0
 800e2f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	b030      	add	sp, #192	@ 0xc0
 800e300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e304:	200b      	movs	r0, #11
 800e306:	4770      	bx	lr
 800e308:	200a      	movs	r0, #10
 800e30a:	e7f4      	b.n	800e2f6 <rclc_executor_init+0xb6>
 800e30c:	f3af 8000 	nop.w
 800e310:	3b9aca00 	.word	0x3b9aca00
 800e314:	00000000 	.word	0x00000000
 800e318:	0801bbb0 	.word	0x0801bbb0
 800e31c:	0800e1b1 	.word	0x0800e1b1

0800e320 <rclc_executor_fini>:
 800e320:	b308      	cbz	r0, 800e366 <rclc_executor_fini+0x46>
 800e322:	b538      	push	{r3, r4, r5, lr}
 800e324:	4604      	mov	r4, r0
 800e326:	6840      	ldr	r0, [r0, #4]
 800e328:	b1d8      	cbz	r0, 800e362 <rclc_executor_fini+0x42>
 800e32a:	6923      	ldr	r3, [r4, #16]
 800e32c:	b1cb      	cbz	r3, 800e362 <rclc_executor_fini+0x42>
 800e32e:	68a2      	ldr	r2, [r4, #8]
 800e330:	b1ba      	cbz	r2, 800e362 <rclc_executor_fini+0x42>
 800e332:	6919      	ldr	r1, [r3, #16]
 800e334:	685b      	ldr	r3, [r3, #4]
 800e336:	4798      	blx	r3
 800e338:	2300      	movs	r3, #0
 800e33a:	2000      	movs	r0, #0
 800e33c:	2100      	movs	r1, #0
 800e33e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e342:	6063      	str	r3, [r4, #4]
 800e344:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 800e348:	f104 0514 	add.w	r5, r4, #20
 800e34c:	f000 fa7c 	bl	800e848 <rclc_executor_handle_counters_zero_init>
 800e350:	4628      	mov	r0, r5
 800e352:	f007 fcf1 	bl	8015d38 <rcl_wait_set_is_valid>
 800e356:	b940      	cbnz	r0, 800e36a <rclc_executor_fini+0x4a>
 800e358:	a309      	add	r3, pc, #36	@ (adr r3, 800e380 <rclc_executor_fini+0x60>)
 800e35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e35e:	e9c4 231a 	strd	r2, r3, [r4, #104]	@ 0x68
 800e362:	2000      	movs	r0, #0
 800e364:	bd38      	pop	{r3, r4, r5, pc}
 800e366:	2000      	movs	r0, #0
 800e368:	4770      	bx	lr
 800e36a:	4628      	mov	r0, r5
 800e36c:	f007 fcea 	bl	8015d44 <rcl_wait_set_fini>
 800e370:	2800      	cmp	r0, #0
 800e372:	d0f1      	beq.n	800e358 <rclc_executor_fini+0x38>
 800e374:	f000 fce0 	bl	800ed38 <rcutils_reset_error>
 800e378:	e7ee      	b.n	800e358 <rclc_executor_fini+0x38>
 800e37a:	bf00      	nop
 800e37c:	f3af 8000 	nop.w
 800e380:	3b9aca00 	.word	0x3b9aca00
 800e384:	00000000 	.word	0x00000000

0800e388 <rclc_executor_add_subscription>:
 800e388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e38a:	f89d e018 	ldrb.w	lr, [sp, #24]
 800e38e:	b338      	cbz	r0, 800e3e0 <rclc_executor_add_subscription+0x58>
 800e390:	b331      	cbz	r1, 800e3e0 <rclc_executor_add_subscription+0x58>
 800e392:	b32a      	cbz	r2, 800e3e0 <rclc_executor_add_subscription+0x58>
 800e394:	b323      	cbz	r3, 800e3e0 <rclc_executor_add_subscription+0x58>
 800e396:	4604      	mov	r4, r0
 800e398:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800e39c:	42a8      	cmp	r0, r5
 800e39e:	d301      	bcc.n	800e3a4 <rclc_executor_add_subscription+0x1c>
 800e3a0:	2001      	movs	r0, #1
 800e3a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3a4:	6866      	ldr	r6, [r4, #4]
 800e3a6:	0187      	lsls	r7, r0, #6
 800e3a8:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800e3ac:	2500      	movs	r5, #0
 800e3ae:	55f5      	strb	r5, [r6, r7]
 800e3b0:	3001      	adds	r0, #1
 800e3b2:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800e3b6:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800e3ba:	2301      	movs	r3, #1
 800e3bc:	f104 0514 	add.w	r5, r4, #20
 800e3c0:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800e3c4:	f88c e001 	strb.w	lr, [ip, #1]
 800e3c8:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800e3cc:	60e0      	str	r0, [r4, #12]
 800e3ce:	4628      	mov	r0, r5
 800e3d0:	f007 fcb2 	bl	8015d38 <rcl_wait_set_is_valid>
 800e3d4:	b930      	cbnz	r0, 800e3e4 <rclc_executor_add_subscription+0x5c>
 800e3d6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800e3d8:	3301      	adds	r3, #1
 800e3da:	2000      	movs	r0, #0
 800e3dc:	64a3      	str	r3, [r4, #72]	@ 0x48
 800e3de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3e0:	200b      	movs	r0, #11
 800e3e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3e4:	4628      	mov	r0, r5
 800e3e6:	f007 fcad 	bl	8015d44 <rcl_wait_set_fini>
 800e3ea:	2800      	cmp	r0, #0
 800e3ec:	d0f3      	beq.n	800e3d6 <rclc_executor_add_subscription+0x4e>
 800e3ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e3f0 <rclc_executor_add_timer>:
 800e3f0:	b300      	cbz	r0, 800e434 <rclc_executor_add_timer+0x44>
 800e3f2:	b1f9      	cbz	r1, 800e434 <rclc_executor_add_timer+0x44>
 800e3f4:	b538      	push	{r3, r4, r5, lr}
 800e3f6:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800e3fa:	4293      	cmp	r3, r2
 800e3fc:	4604      	mov	r4, r0
 800e3fe:	d301      	bcc.n	800e404 <rclc_executor_add_timer+0x14>
 800e400:	2001      	movs	r0, #1
 800e402:	bd38      	pop	{r3, r4, r5, pc}
 800e404:	6840      	ldr	r0, [r0, #4]
 800e406:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800e40a:	019d      	lsls	r5, r3, #6
 800e40c:	6051      	str	r1, [r2, #4]
 800e40e:	2102      	movs	r1, #2
 800e410:	5341      	strh	r1, [r0, r5]
 800e412:	3301      	adds	r3, #1
 800e414:	2000      	movs	r0, #0
 800e416:	2101      	movs	r1, #1
 800e418:	f104 0514 	add.w	r5, r4, #20
 800e41c:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800e41e:	8711      	strh	r1, [r2, #56]	@ 0x38
 800e420:	4628      	mov	r0, r5
 800e422:	60e3      	str	r3, [r4, #12]
 800e424:	f007 fc88 	bl	8015d38 <rcl_wait_set_is_valid>
 800e428:	b930      	cbnz	r0, 800e438 <rclc_executor_add_timer+0x48>
 800e42a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800e42c:	3301      	adds	r3, #1
 800e42e:	2000      	movs	r0, #0
 800e430:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800e432:	bd38      	pop	{r3, r4, r5, pc}
 800e434:	200b      	movs	r0, #11
 800e436:	4770      	bx	lr
 800e438:	4628      	mov	r0, r5
 800e43a:	f007 fc83 	bl	8015d44 <rcl_wait_set_fini>
 800e43e:	2800      	cmp	r0, #0
 800e440:	d0f3      	beq.n	800e42a <rclc_executor_add_timer+0x3a>
 800e442:	bd38      	pop	{r3, r4, r5, pc}

0800e444 <rclc_executor_prepare>:
 800e444:	2800      	cmp	r0, #0
 800e446:	d044      	beq.n	800e4d2 <rclc_executor_prepare+0x8e>
 800e448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e44a:	f100 0514 	add.w	r5, r0, #20
 800e44e:	b09b      	sub	sp, #108	@ 0x6c
 800e450:	4604      	mov	r4, r0
 800e452:	4628      	mov	r0, r5
 800e454:	f007 fc70 	bl	8015d38 <rcl_wait_set_is_valid>
 800e458:	b110      	cbz	r0, 800e460 <rclc_executor_prepare+0x1c>
 800e45a:	2000      	movs	r0, #0
 800e45c:	b01b      	add	sp, #108	@ 0x6c
 800e45e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e460:	4628      	mov	r0, r5
 800e462:	f007 fc6f 	bl	8015d44 <rcl_wait_set_fini>
 800e466:	2800      	cmp	r0, #0
 800e468:	d130      	bne.n	800e4cc <rclc_executor_prepare+0x88>
 800e46a:	a80c      	add	r0, sp, #48	@ 0x30
 800e46c:	f007 fc50 	bl	8015d10 <rcl_get_zero_initialized_wait_set>
 800e470:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800e474:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e478:	46ae      	mov	lr, r5
 800e47a:	6927      	ldr	r7, [r4, #16]
 800e47c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e480:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e484:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e488:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e48c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e490:	f8dc 3000 	ldr.w	r3, [ip]
 800e494:	f8ce 3000 	str.w	r3, [lr]
 800e498:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e49a:	ae04      	add	r6, sp, #16
 800e49c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e49e:	683b      	ldr	r3, [r7, #0]
 800e4a0:	6822      	ldr	r2, [r4, #0]
 800e4a2:	6033      	str	r3, [r6, #0]
 800e4a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e4a6:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800e4a8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800e4ac:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800e4b0:	e9cd 2100 	strd	r2, r1, [sp]
 800e4b4:	4628      	mov	r0, r5
 800e4b6:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800e4b8:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800e4ba:	f007 ff41 	bl	8016340 <rcl_wait_set_init>
 800e4be:	2800      	cmp	r0, #0
 800e4c0:	d0cc      	beq.n	800e45c <rclc_executor_prepare+0x18>
 800e4c2:	900b      	str	r0, [sp, #44]	@ 0x2c
 800e4c4:	f000 fc38 	bl	800ed38 <rcutils_reset_error>
 800e4c8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800e4ca:	e7c7      	b.n	800e45c <rclc_executor_prepare+0x18>
 800e4cc:	f000 fc34 	bl	800ed38 <rcutils_reset_error>
 800e4d0:	e7cb      	b.n	800e46a <rclc_executor_prepare+0x26>
 800e4d2:	200b      	movs	r0, #11
 800e4d4:	4770      	bx	lr
 800e4d6:	bf00      	nop

0800e4d8 <rclc_executor_spin_some.part.0>:
 800e4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4dc:	f100 0614 	add.w	r6, r0, #20
 800e4e0:	b083      	sub	sp, #12
 800e4e2:	4691      	mov	r9, r2
 800e4e4:	4698      	mov	r8, r3
 800e4e6:	4605      	mov	r5, r0
 800e4e8:	f7ff ffac 	bl	800e444 <rclc_executor_prepare>
 800e4ec:	4630      	mov	r0, r6
 800e4ee:	f007 fcf5 	bl	8015edc <rcl_wait_set_clear>
 800e4f2:	4607      	mov	r7, r0
 800e4f4:	2800      	cmp	r0, #0
 800e4f6:	f040 80ed 	bne.w	800e6d4 <rclc_executor_spin_some.part.0+0x1fc>
 800e4fa:	68ab      	ldr	r3, [r5, #8]
 800e4fc:	4604      	mov	r4, r0
 800e4fe:	b303      	cbz	r3, 800e542 <rclc_executor_spin_some.part.0+0x6a>
 800e500:	6869      	ldr	r1, [r5, #4]
 800e502:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800e506:	01a2      	lsls	r2, r4, #6
 800e508:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800e50c:	b1cb      	cbz	r3, 800e542 <rclc_executor_spin_some.part.0+0x6a>
 800e50e:	5c8b      	ldrb	r3, [r1, r2]
 800e510:	2b0a      	cmp	r3, #10
 800e512:	f200 80d8 	bhi.w	800e6c6 <rclc_executor_spin_some.part.0+0x1ee>
 800e516:	e8df f003 	tbb	[pc, r3]
 800e51a:	9c9c      	.short	0x9c9c
 800e51c:	068c8ca7 	.word	0x068c8ca7
 800e520:	bdc90606 	.word	0xbdc90606
 800e524:	b2          	.byte	0xb2
 800e525:	00          	.byte	0x00
 800e526:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e52a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800e52e:	4630      	mov	r0, r6
 800e530:	f008 f81c 	bl	801656c <rcl_wait_set_add_service>
 800e534:	2800      	cmp	r0, #0
 800e536:	f040 8086 	bne.w	800e646 <rclc_executor_spin_some.part.0+0x16e>
 800e53a:	68ab      	ldr	r3, [r5, #8]
 800e53c:	3401      	adds	r4, #1
 800e53e:	429c      	cmp	r4, r3
 800e540:	d3de      	bcc.n	800e500 <rclc_executor_spin_some.part.0+0x28>
 800e542:	4643      	mov	r3, r8
 800e544:	464a      	mov	r2, r9
 800e546:	4630      	mov	r0, r6
 800e548:	f008 f83e 	bl	80165c8 <rcl_wait>
 800e54c:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800e550:	2b00      	cmp	r3, #0
 800e552:	f000 80c7 	beq.w	800e6e4 <rclc_executor_spin_some.part.0+0x20c>
 800e556:	2b01      	cmp	r3, #1
 800e558:	f040 80b5 	bne.w	800e6c6 <rclc_executor_spin_some.part.0+0x1ee>
 800e55c:	68ab      	ldr	r3, [r5, #8]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	f000 8159 	beq.w	800e816 <rclc_executor_spin_some.part.0+0x33e>
 800e564:	2400      	movs	r4, #0
 800e566:	46a0      	mov	r8, r4
 800e568:	f240 1991 	movw	r9, #401	@ 0x191
 800e56c:	e00a      	b.n	800e584 <rclc_executor_spin_some.part.0+0xac>
 800e56e:	f7ff fb1d 	bl	800dbac <_rclc_check_for_new_data>
 800e572:	4604      	mov	r4, r0
 800e574:	b110      	cbz	r0, 800e57c <rclc_executor_spin_some.part.0+0xa4>
 800e576:	4548      	cmp	r0, r9
 800e578:	f040 80b2 	bne.w	800e6e0 <rclc_executor_spin_some.part.0+0x208>
 800e57c:	68ab      	ldr	r3, [r5, #8]
 800e57e:	4598      	cmp	r8, r3
 800e580:	f080 8126 	bcs.w	800e7d0 <rclc_executor_spin_some.part.0+0x2f8>
 800e584:	686a      	ldr	r2, [r5, #4]
 800e586:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800e58a:	4631      	mov	r1, r6
 800e58c:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800e590:	f108 0801 	add.w	r8, r8, #1
 800e594:	f1bc 0f00 	cmp.w	ip, #0
 800e598:	d1e9      	bne.n	800e56e <rclc_executor_spin_some.part.0+0x96>
 800e59a:	4619      	mov	r1, r3
 800e59c:	4610      	mov	r0, r2
 800e59e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800e5a2:	4798      	blx	r3
 800e5a4:	2800      	cmp	r0, #0
 800e5a6:	f000 809b 	beq.w	800e6e0 <rclc_executor_spin_some.part.0+0x208>
 800e5aa:	68ab      	ldr	r3, [r5, #8]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	f000 8097 	beq.w	800e6e0 <rclc_executor_spin_some.part.0+0x208>
 800e5b2:	f04f 0800 	mov.w	r8, #0
 800e5b6:	f240 1991 	movw	r9, #401	@ 0x191
 800e5ba:	e009      	b.n	800e5d0 <rclc_executor_spin_some.part.0+0xf8>
 800e5bc:	f7ff fb44 	bl	800dc48 <_rclc_take_new_data>
 800e5c0:	4604      	mov	r4, r0
 800e5c2:	b110      	cbz	r0, 800e5ca <rclc_executor_spin_some.part.0+0xf2>
 800e5c4:	4548      	cmp	r0, r9
 800e5c6:	f040 808b 	bne.w	800e6e0 <rclc_executor_spin_some.part.0+0x208>
 800e5ca:	68ab      	ldr	r3, [r5, #8]
 800e5cc:	4598      	cmp	r8, r3
 800e5ce:	d209      	bcs.n	800e5e4 <rclc_executor_spin_some.part.0+0x10c>
 800e5d0:	6868      	ldr	r0, [r5, #4]
 800e5d2:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800e5d6:	4631      	mov	r1, r6
 800e5d8:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800e5dc:	f108 0801 	add.w	r8, r8, #1
 800e5e0:	2a00      	cmp	r2, #0
 800e5e2:	d1eb      	bne.n	800e5bc <rclc_executor_spin_some.part.0+0xe4>
 800e5e4:	2600      	movs	r6, #0
 800e5e6:	b97b      	cbnz	r3, 800e608 <rclc_executor_spin_some.part.0+0x130>
 800e5e8:	e07a      	b.n	800e6e0 <rclc_executor_spin_some.part.0+0x208>
 800e5ea:	f812 200c 	ldrb.w	r2, [r2, ip]
 800e5ee:	2a08      	cmp	r2, #8
 800e5f0:	f000 80fd 	beq.w	800e7ee <rclc_executor_spin_some.part.0+0x316>
 800e5f4:	2a09      	cmp	r2, #9
 800e5f6:	f000 80ef 	beq.w	800e7d8 <rclc_executor_spin_some.part.0+0x300>
 800e5fa:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800e5fe:	b98a      	cbnz	r2, 800e624 <rclc_executor_spin_some.part.0+0x14c>
 800e600:	3601      	adds	r6, #1
 800e602:	429e      	cmp	r6, r3
 800e604:	d262      	bcs.n	800e6cc <rclc_executor_spin_some.part.0+0x1f4>
 800e606:	2400      	movs	r4, #0
 800e608:	686a      	ldr	r2, [r5, #4]
 800e60a:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800e60e:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800e612:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800e616:	2900      	cmp	r1, #0
 800e618:	d062      	beq.n	800e6e0 <rclc_executor_spin_some.part.0+0x208>
 800e61a:	7841      	ldrb	r1, [r0, #1]
 800e61c:	2900      	cmp	r1, #0
 800e61e:	d0e4      	beq.n	800e5ea <rclc_executor_spin_some.part.0+0x112>
 800e620:	2901      	cmp	r1, #1
 800e622:	d1ed      	bne.n	800e600 <rclc_executor_spin_some.part.0+0x128>
 800e624:	f7ff fc84 	bl	800df30 <_rclc_execute.part.0>
 800e628:	2800      	cmp	r0, #0
 800e62a:	f040 80b6 	bne.w	800e79a <rclc_executor_spin_some.part.0+0x2c2>
 800e62e:	68ab      	ldr	r3, [r5, #8]
 800e630:	e7e6      	b.n	800e600 <rclc_executor_spin_some.part.0+0x128>
 800e632:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e636:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800e63a:	4630      	mov	r0, r6
 800e63c:	f007 ff6a 	bl	8016514 <rcl_wait_set_add_client>
 800e640:	2800      	cmp	r0, #0
 800e642:	f43f af7a 	beq.w	800e53a <rclc_executor_spin_some.part.0+0x62>
 800e646:	9001      	str	r0, [sp, #4]
 800e648:	f000 fb76 	bl	800ed38 <rcutils_reset_error>
 800e64c:	9801      	ldr	r0, [sp, #4]
 800e64e:	4607      	mov	r7, r0
 800e650:	e03c      	b.n	800e6cc <rclc_executor_spin_some.part.0+0x1f4>
 800e652:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e656:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800e65a:	4630      	mov	r0, r6
 800e65c:	f007 fc12 	bl	8015e84 <rcl_wait_set_add_subscription>
 800e660:	2800      	cmp	r0, #0
 800e662:	f43f af6a 	beq.w	800e53a <rclc_executor_spin_some.part.0+0x62>
 800e666:	e7ee      	b.n	800e646 <rclc_executor_spin_some.part.0+0x16e>
 800e668:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e66c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800e670:	4630      	mov	r0, r6
 800e672:	f007 ff1f 	bl	80164b4 <rcl_wait_set_add_timer>
 800e676:	2800      	cmp	r0, #0
 800e678:	f43f af5f 	beq.w	800e53a <rclc_executor_spin_some.part.0+0x62>
 800e67c:	e7e3      	b.n	800e646 <rclc_executor_spin_some.part.0+0x16e>
 800e67e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e682:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800e686:	4630      	mov	r0, r6
 800e688:	f007 fee8 	bl	801645c <rcl_wait_set_add_guard_condition>
 800e68c:	2800      	cmp	r0, #0
 800e68e:	f43f af54 	beq.w	800e53a <rclc_executor_spin_some.part.0+0x62>
 800e692:	e7d8      	b.n	800e646 <rclc_executor_spin_some.part.0+0x16e>
 800e694:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e698:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800e69c:	3110      	adds	r1, #16
 800e69e:	4630      	mov	r0, r6
 800e6a0:	f008 fc6a 	bl	8016f78 <rcl_action_wait_set_add_action_server>
 800e6a4:	2800      	cmp	r0, #0
 800e6a6:	f43f af48 	beq.w	800e53a <rclc_executor_spin_some.part.0+0x62>
 800e6aa:	e7cc      	b.n	800e646 <rclc_executor_spin_some.part.0+0x16e>
 800e6ac:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e6b0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800e6b4:	3110      	adds	r1, #16
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	4630      	mov	r0, r6
 800e6ba:	f008 fa35 	bl	8016b28 <rcl_action_wait_set_add_action_client>
 800e6be:	2800      	cmp	r0, #0
 800e6c0:	f43f af3b 	beq.w	800e53a <rclc_executor_spin_some.part.0+0x62>
 800e6c4:	e7bf      	b.n	800e646 <rclc_executor_spin_some.part.0+0x16e>
 800e6c6:	f000 fb37 	bl	800ed38 <rcutils_reset_error>
 800e6ca:	2701      	movs	r7, #1
 800e6cc:	4638      	mov	r0, r7
 800e6ce:	b003      	add	sp, #12
 800e6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6d4:	f000 fb30 	bl	800ed38 <rcutils_reset_error>
 800e6d8:	4638      	mov	r0, r7
 800e6da:	b003      	add	sp, #12
 800e6dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6e0:	4627      	mov	r7, r4
 800e6e2:	e7f3      	b.n	800e6cc <rclc_executor_spin_some.part.0+0x1f4>
 800e6e4:	68ab      	ldr	r3, [r5, #8]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	f000 8092 	beq.w	800e810 <rclc_executor_spin_some.part.0+0x338>
 800e6ec:	2400      	movs	r4, #0
 800e6ee:	46a0      	mov	r8, r4
 800e6f0:	f240 1991 	movw	r9, #401	@ 0x191
 800e6f4:	e008      	b.n	800e708 <rclc_executor_spin_some.part.0+0x230>
 800e6f6:	f7ff fa59 	bl	800dbac <_rclc_check_for_new_data>
 800e6fa:	4604      	mov	r4, r0
 800e6fc:	b108      	cbz	r0, 800e702 <rclc_executor_spin_some.part.0+0x22a>
 800e6fe:	4548      	cmp	r0, r9
 800e700:	d1ee      	bne.n	800e6e0 <rclc_executor_spin_some.part.0+0x208>
 800e702:	68ab      	ldr	r3, [r5, #8]
 800e704:	4598      	cmp	r8, r3
 800e706:	d265      	bcs.n	800e7d4 <rclc_executor_spin_some.part.0+0x2fc>
 800e708:	686a      	ldr	r2, [r5, #4]
 800e70a:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800e70e:	4631      	mov	r1, r6
 800e710:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800e714:	f108 0801 	add.w	r8, r8, #1
 800e718:	f1bc 0f00 	cmp.w	ip, #0
 800e71c:	d1eb      	bne.n	800e6f6 <rclc_executor_spin_some.part.0+0x21e>
 800e71e:	4619      	mov	r1, r3
 800e720:	4610      	mov	r0, r2
 800e722:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800e726:	4798      	blx	r3
 800e728:	2800      	cmp	r0, #0
 800e72a:	d0d9      	beq.n	800e6e0 <rclc_executor_spin_some.part.0+0x208>
 800e72c:	68ab      	ldr	r3, [r5, #8]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d0d6      	beq.n	800e6e0 <rclc_executor_spin_some.part.0+0x208>
 800e732:	f04f 0800 	mov.w	r8, #0
 800e736:	f240 1991 	movw	r9, #401	@ 0x191
 800e73a:	f240 2a59 	movw	sl, #601	@ 0x259
 800e73e:	e00e      	b.n	800e75e <rclc_executor_spin_some.part.0+0x286>
 800e740:	f813 300b 	ldrb.w	r3, [r3, fp]
 800e744:	2b08      	cmp	r3, #8
 800e746:	d033      	beq.n	800e7b0 <rclc_executor_spin_some.part.0+0x2d8>
 800e748:	2b09      	cmp	r3, #9
 800e74a:	d028      	beq.n	800e79e <rclc_executor_spin_some.part.0+0x2c6>
 800e74c:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800e750:	b9fb      	cbnz	r3, 800e792 <rclc_executor_spin_some.part.0+0x2ba>
 800e752:	68ab      	ldr	r3, [r5, #8]
 800e754:	f108 0801 	add.w	r8, r8, #1
 800e758:	4598      	cmp	r8, r3
 800e75a:	d2b7      	bcs.n	800e6cc <rclc_executor_spin_some.part.0+0x1f4>
 800e75c:	2400      	movs	r4, #0
 800e75e:	6868      	ldr	r0, [r5, #4]
 800e760:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800e764:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800e768:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d0b7      	beq.n	800e6e0 <rclc_executor_spin_some.part.0+0x208>
 800e770:	4631      	mov	r1, r6
 800e772:	f7ff fa69 	bl	800dc48 <_rclc_take_new_data>
 800e776:	b118      	cbz	r0, 800e780 <rclc_executor_spin_some.part.0+0x2a8>
 800e778:	4548      	cmp	r0, r9
 800e77a:	d001      	beq.n	800e780 <rclc_executor_spin_some.part.0+0x2a8>
 800e77c:	4550      	cmp	r0, sl
 800e77e:	d10c      	bne.n	800e79a <rclc_executor_spin_some.part.0+0x2c2>
 800e780:	686b      	ldr	r3, [r5, #4]
 800e782:	eb13 000b 	adds.w	r0, r3, fp
 800e786:	d021      	beq.n	800e7cc <rclc_executor_spin_some.part.0+0x2f4>
 800e788:	7842      	ldrb	r2, [r0, #1]
 800e78a:	2a00      	cmp	r2, #0
 800e78c:	d0d8      	beq.n	800e740 <rclc_executor_spin_some.part.0+0x268>
 800e78e:	2a01      	cmp	r2, #1
 800e790:	d1df      	bne.n	800e752 <rclc_executor_spin_some.part.0+0x27a>
 800e792:	f7ff fbcd 	bl	800df30 <_rclc_execute.part.0>
 800e796:	2800      	cmp	r0, #0
 800e798:	d0db      	beq.n	800e752 <rclc_executor_spin_some.part.0+0x27a>
 800e79a:	4607      	mov	r7, r0
 800e79c:	e796      	b.n	800e6cc <rclc_executor_spin_some.part.0+0x1f4>
 800e79e:	6843      	ldr	r3, [r0, #4]
 800e7a0:	6a1a      	ldr	r2, [r3, #32]
 800e7a2:	2a00      	cmp	r2, #0
 800e7a4:	d1f5      	bne.n	800e792 <rclc_executor_spin_some.part.0+0x2ba>
 800e7a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d0d1      	beq.n	800e752 <rclc_executor_spin_some.part.0+0x27a>
 800e7ae:	e7f0      	b.n	800e792 <rclc_executor_spin_some.part.0+0x2ba>
 800e7b0:	6843      	ldr	r3, [r0, #4]
 800e7b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e7b4:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800e7b8:	d1eb      	bne.n	800e792 <rclc_executor_spin_some.part.0+0x2ba>
 800e7ba:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800e7be:	2a00      	cmp	r2, #0
 800e7c0:	d1e7      	bne.n	800e792 <rclc_executor_spin_some.part.0+0x2ba>
 800e7c2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d0c3      	beq.n	800e752 <rclc_executor_spin_some.part.0+0x27a>
 800e7ca:	e7e2      	b.n	800e792 <rclc_executor_spin_some.part.0+0x2ba>
 800e7cc:	270b      	movs	r7, #11
 800e7ce:	e77d      	b.n	800e6cc <rclc_executor_spin_some.part.0+0x1f4>
 800e7d0:	686a      	ldr	r2, [r5, #4]
 800e7d2:	e6e2      	b.n	800e59a <rclc_executor_spin_some.part.0+0xc2>
 800e7d4:	686a      	ldr	r2, [r5, #4]
 800e7d6:	e7a2      	b.n	800e71e <rclc_executor_spin_some.part.0+0x246>
 800e7d8:	6842      	ldr	r2, [r0, #4]
 800e7da:	6a11      	ldr	r1, [r2, #32]
 800e7dc:	2900      	cmp	r1, #0
 800e7de:	f47f af21 	bne.w	800e624 <rclc_executor_spin_some.part.0+0x14c>
 800e7e2:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800e7e6:	2a00      	cmp	r2, #0
 800e7e8:	f43f af0a 	beq.w	800e600 <rclc_executor_spin_some.part.0+0x128>
 800e7ec:	e71a      	b.n	800e624 <rclc_executor_spin_some.part.0+0x14c>
 800e7ee:	6842      	ldr	r2, [r0, #4]
 800e7f0:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800e7f2:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800e7f6:	f47f af15 	bne.w	800e624 <rclc_executor_spin_some.part.0+0x14c>
 800e7fa:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800e7fe:	2900      	cmp	r1, #0
 800e800:	f47f af10 	bne.w	800e624 <rclc_executor_spin_some.part.0+0x14c>
 800e804:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800e808:	2a00      	cmp	r2, #0
 800e80a:	f43f aef9 	beq.w	800e600 <rclc_executor_spin_some.part.0+0x128>
 800e80e:	e709      	b.n	800e624 <rclc_executor_spin_some.part.0+0x14c>
 800e810:	686a      	ldr	r2, [r5, #4]
 800e812:	461c      	mov	r4, r3
 800e814:	e783      	b.n	800e71e <rclc_executor_spin_some.part.0+0x246>
 800e816:	686a      	ldr	r2, [r5, #4]
 800e818:	461c      	mov	r4, r3
 800e81a:	e6be      	b.n	800e59a <rclc_executor_spin_some.part.0+0xc2>

0800e81c <rclc_executor_spin_some>:
 800e81c:	b190      	cbz	r0, 800e844 <rclc_executor_spin_some+0x28>
 800e81e:	b570      	push	{r4, r5, r6, lr}
 800e820:	4604      	mov	r4, r0
 800e822:	6800      	ldr	r0, [r0, #0]
 800e824:	4616      	mov	r6, r2
 800e826:	461d      	mov	r5, r3
 800e828:	f7fe f910 	bl	800ca4c <rcl_context_is_valid>
 800e82c:	b130      	cbz	r0, 800e83c <rclc_executor_spin_some+0x20>
 800e82e:	4632      	mov	r2, r6
 800e830:	462b      	mov	r3, r5
 800e832:	4620      	mov	r0, r4
 800e834:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e838:	f7ff be4e 	b.w	800e4d8 <rclc_executor_spin_some.part.0>
 800e83c:	f000 fa7c 	bl	800ed38 <rcutils_reset_error>
 800e840:	2001      	movs	r0, #1
 800e842:	bd70      	pop	{r4, r5, r6, pc}
 800e844:	200b      	movs	r0, #11
 800e846:	4770      	bx	lr

0800e848 <rclc_executor_handle_counters_zero_init>:
 800e848:	b130      	cbz	r0, 800e858 <rclc_executor_handle_counters_zero_init+0x10>
 800e84a:	b508      	push	{r3, lr}
 800e84c:	2220      	movs	r2, #32
 800e84e:	2100      	movs	r1, #0
 800e850:	f00b fcf0 	bl	801a234 <memset>
 800e854:	2000      	movs	r0, #0
 800e856:	bd08      	pop	{r3, pc}
 800e858:	200b      	movs	r0, #11
 800e85a:	4770      	bx	lr
 800e85c:	0000      	movs	r0, r0
	...

0800e860 <rclc_executor_handle_init>:
 800e860:	b168      	cbz	r0, 800e87e <rclc_executor_handle_init+0x1e>
 800e862:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800e888 <rclc_executor_handle_init+0x28>
 800e866:	2300      	movs	r3, #0
 800e868:	220b      	movs	r2, #11
 800e86a:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800e86e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800e872:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800e876:	8002      	strh	r2, [r0, #0]
 800e878:	8703      	strh	r3, [r0, #56]	@ 0x38
 800e87a:	4618      	mov	r0, r3
 800e87c:	4770      	bx	lr
 800e87e:	200b      	movs	r0, #11
 800e880:	4770      	bx	lr
 800e882:	bf00      	nop
 800e884:	f3af 8000 	nop.w
	...

0800e890 <rclc_support_init_with_options>:
 800e890:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e894:	b083      	sub	sp, #12
 800e896:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e898:	b340      	cbz	r0, 800e8ec <rclc_support_init_with_options+0x5c>
 800e89a:	461d      	mov	r5, r3
 800e89c:	b333      	cbz	r3, 800e8ec <rclc_support_init_with_options+0x5c>
 800e89e:	b32e      	cbz	r6, 800e8ec <rclc_support_init_with_options+0x5c>
 800e8a0:	46e9      	mov	r9, sp
 800e8a2:	4604      	mov	r4, r0
 800e8a4:	4648      	mov	r0, r9
 800e8a6:	460f      	mov	r7, r1
 800e8a8:	4690      	mov	r8, r2
 800e8aa:	f7fe f8c5 	bl	800ca38 <rcl_get_zero_initialized_context>
 800e8ae:	e899 0003 	ldmia.w	r9, {r0, r1}
 800e8b2:	462a      	mov	r2, r5
 800e8b4:	e884 0003 	stmia.w	r4, {r0, r1}
 800e8b8:	4623      	mov	r3, r4
 800e8ba:	4641      	mov	r1, r8
 800e8bc:	4638      	mov	r0, r7
 800e8be:	f006 fe5b 	bl	8015578 <rcl_init>
 800e8c2:	4605      	mov	r5, r0
 800e8c4:	b960      	cbnz	r0, 800e8e0 <rclc_support_init_with_options+0x50>
 800e8c6:	60a6      	str	r6, [r4, #8]
 800e8c8:	4632      	mov	r2, r6
 800e8ca:	f104 010c 	add.w	r1, r4, #12
 800e8ce:	2003      	movs	r0, #3
 800e8d0:	f007 f8a8 	bl	8015a24 <rcl_clock_init>
 800e8d4:	4605      	mov	r5, r0
 800e8d6:	b918      	cbnz	r0, 800e8e0 <rclc_support_init_with_options+0x50>
 800e8d8:	4628      	mov	r0, r5
 800e8da:	b003      	add	sp, #12
 800e8dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e8e0:	f000 fa2a 	bl	800ed38 <rcutils_reset_error>
 800e8e4:	4628      	mov	r0, r5
 800e8e6:	b003      	add	sp, #12
 800e8e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e8ec:	250b      	movs	r5, #11
 800e8ee:	4628      	mov	r0, r5
 800e8f0:	b003      	add	sp, #12
 800e8f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e8f6:	bf00      	nop

0800e8f8 <rclc_support_fini>:
 800e8f8:	b538      	push	{r3, r4, r5, lr}
 800e8fa:	b320      	cbz	r0, 800e946 <rclc_support_fini+0x4e>
 800e8fc:	4604      	mov	r4, r0
 800e8fe:	300c      	adds	r0, #12
 800e900:	f007 f908 	bl	8015b14 <rcl_clock_fini>
 800e904:	4605      	mov	r5, r0
 800e906:	b948      	cbnz	r0, 800e91c <rclc_support_fini+0x24>
 800e908:	4620      	mov	r0, r4
 800e90a:	f006 ff23 	bl	8015754 <rcl_shutdown>
 800e90e:	b968      	cbnz	r0, 800e92c <rclc_support_fini+0x34>
 800e910:	4620      	mov	r0, r4
 800e912:	f7fe f907 	bl	800cb24 <rcl_context_fini>
 800e916:	b988      	cbnz	r0, 800e93c <rclc_support_fini+0x44>
 800e918:	4628      	mov	r0, r5
 800e91a:	bd38      	pop	{r3, r4, r5, pc}
 800e91c:	f000 fa0c 	bl	800ed38 <rcutils_reset_error>
 800e920:	4620      	mov	r0, r4
 800e922:	2501      	movs	r5, #1
 800e924:	f006 ff16 	bl	8015754 <rcl_shutdown>
 800e928:	2800      	cmp	r0, #0
 800e92a:	d0f1      	beq.n	800e910 <rclc_support_fini+0x18>
 800e92c:	f000 fa04 	bl	800ed38 <rcutils_reset_error>
 800e930:	4620      	mov	r0, r4
 800e932:	2501      	movs	r5, #1
 800e934:	f7fe f8f6 	bl	800cb24 <rcl_context_fini>
 800e938:	2800      	cmp	r0, #0
 800e93a:	d0ed      	beq.n	800e918 <rclc_support_fini+0x20>
 800e93c:	2501      	movs	r5, #1
 800e93e:	f000 f9fb 	bl	800ed38 <rcutils_reset_error>
 800e942:	4628      	mov	r0, r5
 800e944:	bd38      	pop	{r3, r4, r5, pc}
 800e946:	250b      	movs	r5, #11
 800e948:	4628      	mov	r0, r5
 800e94a:	bd38      	pop	{r3, r4, r5, pc}

0800e94c <rclc_node_init_default>:
 800e94c:	b3b8      	cbz	r0, 800e9be <rclc_node_init_default+0x72>
 800e94e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e952:	460d      	mov	r5, r1
 800e954:	b0a1      	sub	sp, #132	@ 0x84
 800e956:	b329      	cbz	r1, 800e9a4 <rclc_node_init_default+0x58>
 800e958:	4616      	mov	r6, r2
 800e95a:	b31a      	cbz	r2, 800e9a4 <rclc_node_init_default+0x58>
 800e95c:	461f      	mov	r7, r3
 800e95e:	b30b      	cbz	r3, 800e9a4 <rclc_node_init_default+0x58>
 800e960:	f10d 0810 	add.w	r8, sp, #16
 800e964:	4604      	mov	r4, r0
 800e966:	4640      	mov	r0, r8
 800e968:	f7fe f9f6 	bl	800cd58 <rcl_get_zero_initialized_node>
 800e96c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800e970:	f10d 0918 	add.w	r9, sp, #24
 800e974:	e884 0003 	stmia.w	r4, {r0, r1}
 800e978:	4648      	mov	r0, r9
 800e97a:	f7fe fb97 	bl	800d0ac <rcl_node_get_default_options>
 800e97e:	4640      	mov	r0, r8
 800e980:	f7fe f9ea 	bl	800cd58 <rcl_get_zero_initialized_node>
 800e984:	f8cd 9000 	str.w	r9, [sp]
 800e988:	e898 0003 	ldmia.w	r8, {r0, r1}
 800e98c:	463b      	mov	r3, r7
 800e98e:	e884 0003 	stmia.w	r4, {r0, r1}
 800e992:	4632      	mov	r2, r6
 800e994:	4629      	mov	r1, r5
 800e996:	4620      	mov	r0, r4
 800e998:	f7fe f9e8 	bl	800cd6c <rcl_node_init>
 800e99c:	b930      	cbnz	r0, 800e9ac <rclc_node_init_default+0x60>
 800e99e:	b021      	add	sp, #132	@ 0x84
 800e9a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e9a4:	200b      	movs	r0, #11
 800e9a6:	b021      	add	sp, #132	@ 0x84
 800e9a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e9ac:	9003      	str	r0, [sp, #12]
 800e9ae:	f000 f9c3 	bl	800ed38 <rcutils_reset_error>
 800e9b2:	f000 f9c1 	bl	800ed38 <rcutils_reset_error>
 800e9b6:	9803      	ldr	r0, [sp, #12]
 800e9b8:	b021      	add	sp, #132	@ 0x84
 800e9ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e9be:	200b      	movs	r0, #11
 800e9c0:	4770      	bx	lr
 800e9c2:	bf00      	nop

0800e9c4 <rclc_publisher_init_default>:
 800e9c4:	b368      	cbz	r0, 800ea22 <rclc_publisher_init_default+0x5e>
 800e9c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9ca:	460d      	mov	r5, r1
 800e9cc:	b0a0      	sub	sp, #128	@ 0x80
 800e9ce:	b321      	cbz	r1, 800ea1a <rclc_publisher_init_default+0x56>
 800e9d0:	4616      	mov	r6, r2
 800e9d2:	b312      	cbz	r2, 800ea1a <rclc_publisher_init_default+0x56>
 800e9d4:	461f      	mov	r7, r3
 800e9d6:	b303      	cbz	r3, 800ea1a <rclc_publisher_init_default+0x56>
 800e9d8:	4604      	mov	r4, r0
 800e9da:	f7fe fb93 	bl	800d104 <rcl_get_zero_initialized_publisher>
 800e9de:	f10d 0810 	add.w	r8, sp, #16
 800e9e2:	6020      	str	r0, [r4, #0]
 800e9e4:	4640      	mov	r0, r8
 800e9e6:	f7fe fc55 	bl	800d294 <rcl_publisher_get_default_options>
 800e9ea:	490f      	ldr	r1, [pc, #60]	@ (800ea28 <rclc_publisher_init_default+0x64>)
 800e9ec:	2250      	movs	r2, #80	@ 0x50
 800e9ee:	4640      	mov	r0, r8
 800e9f0:	f00b fce9 	bl	801a3c6 <memcpy>
 800e9f4:	f8cd 8000 	str.w	r8, [sp]
 800e9f8:	463b      	mov	r3, r7
 800e9fa:	4632      	mov	r2, r6
 800e9fc:	4629      	mov	r1, r5
 800e9fe:	4620      	mov	r0, r4
 800ea00:	f7fe fb86 	bl	800d110 <rcl_publisher_init>
 800ea04:	b910      	cbnz	r0, 800ea0c <rclc_publisher_init_default+0x48>
 800ea06:	b020      	add	sp, #128	@ 0x80
 800ea08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea0c:	9003      	str	r0, [sp, #12]
 800ea0e:	f000 f993 	bl	800ed38 <rcutils_reset_error>
 800ea12:	9803      	ldr	r0, [sp, #12]
 800ea14:	b020      	add	sp, #128	@ 0x80
 800ea16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea1a:	200b      	movs	r0, #11
 800ea1c:	b020      	add	sp, #128	@ 0x80
 800ea1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea22:	200b      	movs	r0, #11
 800ea24:	4770      	bx	lr
 800ea26:	bf00      	nop
 800ea28:	0801bc38 	.word	0x0801bc38

0800ea2c <rclc_subscription_init_default>:
 800ea2c:	b368      	cbz	r0, 800ea8a <rclc_subscription_init_default+0x5e>
 800ea2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea32:	460d      	mov	r5, r1
 800ea34:	b0a0      	sub	sp, #128	@ 0x80
 800ea36:	b321      	cbz	r1, 800ea82 <rclc_subscription_init_default+0x56>
 800ea38:	4616      	mov	r6, r2
 800ea3a:	b312      	cbz	r2, 800ea82 <rclc_subscription_init_default+0x56>
 800ea3c:	461f      	mov	r7, r3
 800ea3e:	b303      	cbz	r3, 800ea82 <rclc_subscription_init_default+0x56>
 800ea40:	4604      	mov	r4, r0
 800ea42:	f7fe fca1 	bl	800d388 <rcl_get_zero_initialized_subscription>
 800ea46:	f10d 0810 	add.w	r8, sp, #16
 800ea4a:	6020      	str	r0, [r4, #0]
 800ea4c:	4640      	mov	r0, r8
 800ea4e:	f7fe fd9d 	bl	800d58c <rcl_subscription_get_default_options>
 800ea52:	490f      	ldr	r1, [pc, #60]	@ (800ea90 <rclc_subscription_init_default+0x64>)
 800ea54:	2250      	movs	r2, #80	@ 0x50
 800ea56:	4640      	mov	r0, r8
 800ea58:	f00b fcb5 	bl	801a3c6 <memcpy>
 800ea5c:	f8cd 8000 	str.w	r8, [sp]
 800ea60:	463b      	mov	r3, r7
 800ea62:	4632      	mov	r2, r6
 800ea64:	4629      	mov	r1, r5
 800ea66:	4620      	mov	r0, r4
 800ea68:	f7fe fc94 	bl	800d394 <rcl_subscription_init>
 800ea6c:	b910      	cbnz	r0, 800ea74 <rclc_subscription_init_default+0x48>
 800ea6e:	b020      	add	sp, #128	@ 0x80
 800ea70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea74:	9003      	str	r0, [sp, #12]
 800ea76:	f000 f95f 	bl	800ed38 <rcutils_reset_error>
 800ea7a:	9803      	ldr	r0, [sp, #12]
 800ea7c:	b020      	add	sp, #128	@ 0x80
 800ea7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea82:	200b      	movs	r0, #11
 800ea84:	b020      	add	sp, #128	@ 0x80
 800ea86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea8a:	200b      	movs	r0, #11
 800ea8c:	4770      	bx	lr
 800ea8e:	bf00      	nop
 800ea90:	0801bc88 	.word	0x0801bc88

0800ea94 <rclc_timer_init_default>:
 800ea94:	b360      	cbz	r0, 800eaf0 <rclc_timer_init_default+0x5c>
 800ea96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea9a:	460e      	mov	r6, r1
 800ea9c:	b08a      	sub	sp, #40	@ 0x28
 800ea9e:	b319      	cbz	r1, 800eae8 <rclc_timer_init_default+0x54>
 800eaa0:	4690      	mov	r8, r2
 800eaa2:	461f      	mov	r7, r3
 800eaa4:	4605      	mov	r5, r0
 800eaa6:	f7fe fea1 	bl	800d7ec <rcl_get_zero_initialized_timer>
 800eaaa:	68b4      	ldr	r4, [r6, #8]
 800eaac:	6028      	str	r0, [r5, #0]
 800eaae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eab0:	f10d 0c0c 	add.w	ip, sp, #12
 800eab4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eab8:	6823      	ldr	r3, [r4, #0]
 800eaba:	f8cc 3000 	str.w	r3, [ip]
 800eabe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800eac0:	9302      	str	r3, [sp, #8]
 800eac2:	e9cd 8700 	strd	r8, r7, [sp]
 800eac6:	4628      	mov	r0, r5
 800eac8:	4632      	mov	r2, r6
 800eaca:	f106 010c 	add.w	r1, r6, #12
 800eace:	f7fe fe93 	bl	800d7f8 <rcl_timer_init>
 800ead2:	b910      	cbnz	r0, 800eada <rclc_timer_init_default+0x46>
 800ead4:	b00a      	add	sp, #40	@ 0x28
 800ead6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eada:	9009      	str	r0, [sp, #36]	@ 0x24
 800eadc:	f000 f92c 	bl	800ed38 <rcutils_reset_error>
 800eae0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eae2:	b00a      	add	sp, #40	@ 0x28
 800eae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eae8:	200b      	movs	r0, #11
 800eaea:	b00a      	add	sp, #40	@ 0x28
 800eaec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eaf0:	200b      	movs	r0, #11
 800eaf2:	4770      	bx	lr

0800eaf4 <__default_zero_allocate>:
 800eaf4:	f00a beae 	b.w	8019854 <calloc>

0800eaf8 <__default_reallocate>:
 800eaf8:	f00b b84c 	b.w	8019b94 <realloc>

0800eafc <__default_deallocate>:
 800eafc:	f00a bf28 	b.w	8019950 <free>

0800eb00 <__default_allocate>:
 800eb00:	f00a bf1e 	b.w	8019940 <malloc>

0800eb04 <rcutils_get_zero_initialized_allocator>:
 800eb04:	b510      	push	{r4, lr}
 800eb06:	4c05      	ldr	r4, [pc, #20]	@ (800eb1c <rcutils_get_zero_initialized_allocator+0x18>)
 800eb08:	4686      	mov	lr, r0
 800eb0a:	4684      	mov	ip, r0
 800eb0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eb0e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eb12:	6823      	ldr	r3, [r4, #0]
 800eb14:	f8cc 3000 	str.w	r3, [ip]
 800eb18:	4670      	mov	r0, lr
 800eb1a:	bd10      	pop	{r4, pc}
 800eb1c:	0801bcd8 	.word	0x0801bcd8

0800eb20 <rcutils_set_default_allocator>:
 800eb20:	b1a8      	cbz	r0, 800eb4e <rcutils_set_default_allocator+0x2e>
 800eb22:	6802      	ldr	r2, [r0, #0]
 800eb24:	b1a2      	cbz	r2, 800eb50 <rcutils_set_default_allocator+0x30>
 800eb26:	6841      	ldr	r1, [r0, #4]
 800eb28:	b1a1      	cbz	r1, 800eb54 <rcutils_set_default_allocator+0x34>
 800eb2a:	b410      	push	{r4}
 800eb2c:	68c4      	ldr	r4, [r0, #12]
 800eb2e:	b164      	cbz	r4, 800eb4a <rcutils_set_default_allocator+0x2a>
 800eb30:	6880      	ldr	r0, [r0, #8]
 800eb32:	b138      	cbz	r0, 800eb44 <rcutils_set_default_allocator+0x24>
 800eb34:	4b08      	ldr	r3, [pc, #32]	@ (800eb58 <rcutils_set_default_allocator+0x38>)
 800eb36:	601a      	str	r2, [r3, #0]
 800eb38:	2200      	movs	r2, #0
 800eb3a:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800eb3e:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800eb42:	2001      	movs	r0, #1
 800eb44:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb48:	4770      	bx	lr
 800eb4a:	4620      	mov	r0, r4
 800eb4c:	e7fa      	b.n	800eb44 <rcutils_set_default_allocator+0x24>
 800eb4e:	4770      	bx	lr
 800eb50:	4610      	mov	r0, r2
 800eb52:	4770      	bx	lr
 800eb54:	4608      	mov	r0, r1
 800eb56:	4770      	bx	lr
 800eb58:	20000314 	.word	0x20000314

0800eb5c <rcutils_get_default_allocator>:
 800eb5c:	b510      	push	{r4, lr}
 800eb5e:	4c05      	ldr	r4, [pc, #20]	@ (800eb74 <rcutils_get_default_allocator+0x18>)
 800eb60:	4686      	mov	lr, r0
 800eb62:	4684      	mov	ip, r0
 800eb64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eb66:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eb6a:	6823      	ldr	r3, [r4, #0]
 800eb6c:	f8cc 3000 	str.w	r3, [ip]
 800eb70:	4670      	mov	r0, lr
 800eb72:	bd10      	pop	{r4, pc}
 800eb74:	20000314 	.word	0x20000314

0800eb78 <rcutils_allocator_is_valid>:
 800eb78:	b158      	cbz	r0, 800eb92 <rcutils_allocator_is_valid+0x1a>
 800eb7a:	6803      	ldr	r3, [r0, #0]
 800eb7c:	b143      	cbz	r3, 800eb90 <rcutils_allocator_is_valid+0x18>
 800eb7e:	6843      	ldr	r3, [r0, #4]
 800eb80:	b133      	cbz	r3, 800eb90 <rcutils_allocator_is_valid+0x18>
 800eb82:	68c3      	ldr	r3, [r0, #12]
 800eb84:	b123      	cbz	r3, 800eb90 <rcutils_allocator_is_valid+0x18>
 800eb86:	6880      	ldr	r0, [r0, #8]
 800eb88:	3800      	subs	r0, #0
 800eb8a:	bf18      	it	ne
 800eb8c:	2001      	movne	r0, #1
 800eb8e:	4770      	bx	lr
 800eb90:	4618      	mov	r0, r3
 800eb92:	4770      	bx	lr

0800eb94 <__atomic_load_8>:
 800eb94:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800eb98:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800eb9c:	4a15      	ldr	r2, [pc, #84]	@ (800ebf4 <__atomic_load_8+0x60>)
 800eb9e:	4b16      	ldr	r3, [pc, #88]	@ (800ebf8 <__atomic_load_8+0x64>)
 800eba0:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800eba4:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800eba8:	fb02 f101 	mul.w	r1, r2, r1
 800ebac:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800ebb0:	fba3 2301 	umull	r2, r3, r3, r1
 800ebb4:	091b      	lsrs	r3, r3, #4
 800ebb6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800ebba:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 800ebbe:	b4d0      	push	{r4, r6, r7}
 800ebc0:	4c0e      	ldr	r4, [pc, #56]	@ (800ebfc <__atomic_load_8+0x68>)
 800ebc2:	1ac9      	subs	r1, r1, r3
 800ebc4:	1862      	adds	r2, r4, r1
 800ebc6:	f04f 0c01 	mov.w	ip, #1
 800ebca:	e8d2 3f4f 	ldrexb	r3, [r2]
 800ebce:	e8c2 cf46 	strexb	r6, ip, [r2]
 800ebd2:	2e00      	cmp	r6, #0
 800ebd4:	d1f9      	bne.n	800ebca <__atomic_load_8+0x36>
 800ebd6:	f3bf 8f5b 	dmb	ish
 800ebda:	b2db      	uxtb	r3, r3
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d1f4      	bne.n	800ebca <__atomic_load_8+0x36>
 800ebe0:	e9d0 6700 	ldrd	r6, r7, [r0]
 800ebe4:	f3bf 8f5b 	dmb	ish
 800ebe8:	5463      	strb	r3, [r4, r1]
 800ebea:	4630      	mov	r0, r6
 800ebec:	4639      	mov	r1, r7
 800ebee:	bcd0      	pop	{r4, r6, r7}
 800ebf0:	4770      	bx	lr
 800ebf2:	bf00      	nop
 800ebf4:	27d4eb2d 	.word	0x27d4eb2d
 800ebf8:	b21642c9 	.word	0xb21642c9
 800ebfc:	2000cef8 	.word	0x2000cef8

0800ec00 <__atomic_store_8>:
 800ec00:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800ec04:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800ec08:	b570      	push	{r4, r5, r6, lr}
 800ec0a:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800ec0e:	4c14      	ldr	r4, [pc, #80]	@ (800ec60 <__atomic_store_8+0x60>)
 800ec10:	4d14      	ldr	r5, [pc, #80]	@ (800ec64 <__atomic_store_8+0x64>)
 800ec12:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800ec16:	fb04 f101 	mul.w	r1, r4, r1
 800ec1a:	4c13      	ldr	r4, [pc, #76]	@ (800ec68 <__atomic_store_8+0x68>)
 800ec1c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800ec20:	fba4 4e01 	umull	r4, lr, r4, r1
 800ec24:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 800ec28:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 800ec2c:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 800ec30:	eba1 0e0e 	sub.w	lr, r1, lr
 800ec34:	eb05 0c0e 	add.w	ip, r5, lr
 800ec38:	f04f 0401 	mov.w	r4, #1
 800ec3c:	e8dc 1f4f 	ldrexb	r1, [ip]
 800ec40:	e8cc 4f46 	strexb	r6, r4, [ip]
 800ec44:	2e00      	cmp	r6, #0
 800ec46:	d1f9      	bne.n	800ec3c <__atomic_store_8+0x3c>
 800ec48:	f3bf 8f5b 	dmb	ish
 800ec4c:	b2c9      	uxtb	r1, r1
 800ec4e:	2900      	cmp	r1, #0
 800ec50:	d1f4      	bne.n	800ec3c <__atomic_store_8+0x3c>
 800ec52:	e9c0 2300 	strd	r2, r3, [r0]
 800ec56:	f3bf 8f5b 	dmb	ish
 800ec5a:	f805 100e 	strb.w	r1, [r5, lr]
 800ec5e:	bd70      	pop	{r4, r5, r6, pc}
 800ec60:	27d4eb2d 	.word	0x27d4eb2d
 800ec64:	2000cef8 	.word	0x2000cef8
 800ec68:	b21642c9 	.word	0xb21642c9

0800ec6c <__atomic_exchange_8>:
 800ec6c:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 800ec70:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 800ec74:	4916      	ldr	r1, [pc, #88]	@ (800ecd0 <__atomic_exchange_8+0x64>)
 800ec76:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 800ec7a:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 800ec7e:	fb01 fc0c 	mul.w	ip, r1, ip
 800ec82:	4914      	ldr	r1, [pc, #80]	@ (800ecd4 <__atomic_exchange_8+0x68>)
 800ec84:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 800ec88:	b570      	push	{r4, r5, r6, lr}
 800ec8a:	4605      	mov	r5, r0
 800ec8c:	fba1 010c 	umull	r0, r1, r1, ip
 800ec90:	0909      	lsrs	r1, r1, #4
 800ec92:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 800ec96:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 800ec9a:	4e0f      	ldr	r6, [pc, #60]	@ (800ecd8 <__atomic_exchange_8+0x6c>)
 800ec9c:	ebac 0c01 	sub.w	ip, ip, r1
 800eca0:	eb06 010c 	add.w	r1, r6, ip
 800eca4:	f04f 0e01 	mov.w	lr, #1
 800eca8:	e8d1 4f4f 	ldrexb	r4, [r1]
 800ecac:	e8c1 ef40 	strexb	r0, lr, [r1]
 800ecb0:	2800      	cmp	r0, #0
 800ecb2:	d1f9      	bne.n	800eca8 <__atomic_exchange_8+0x3c>
 800ecb4:	f3bf 8f5b 	dmb	ish
 800ecb8:	b2e4      	uxtb	r4, r4
 800ecba:	2c00      	cmp	r4, #0
 800ecbc:	d1f4      	bne.n	800eca8 <__atomic_exchange_8+0x3c>
 800ecbe:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ecc2:	e9c5 2300 	strd	r2, r3, [r5]
 800ecc6:	f3bf 8f5b 	dmb	ish
 800ecca:	f806 400c 	strb.w	r4, [r6, ip]
 800ecce:	bd70      	pop	{r4, r5, r6, pc}
 800ecd0:	27d4eb2d 	.word	0x27d4eb2d
 800ecd4:	b21642c9 	.word	0xb21642c9
 800ecd8:	2000cef8 	.word	0x2000cef8

0800ecdc <rcutils_get_env>:
 800ecdc:	b168      	cbz	r0, 800ecfa <rcutils_get_env+0x1e>
 800ecde:	b510      	push	{r4, lr}
 800ece0:	460c      	mov	r4, r1
 800ece2:	b129      	cbz	r1, 800ecf0 <rcutils_get_env+0x14>
 800ece4:	f00a fde4 	bl	80198b0 <getenv>
 800ece8:	b120      	cbz	r0, 800ecf4 <rcutils_get_env+0x18>
 800ecea:	6020      	str	r0, [r4, #0]
 800ecec:	2000      	movs	r0, #0
 800ecee:	bd10      	pop	{r4, pc}
 800ecf0:	4803      	ldr	r0, [pc, #12]	@ (800ed00 <rcutils_get_env+0x24>)
 800ecf2:	bd10      	pop	{r4, pc}
 800ecf4:	4b03      	ldr	r3, [pc, #12]	@ (800ed04 <rcutils_get_env+0x28>)
 800ecf6:	6023      	str	r3, [r4, #0]
 800ecf8:	bd10      	pop	{r4, pc}
 800ecfa:	4803      	ldr	r0, [pc, #12]	@ (800ed08 <rcutils_get_env+0x2c>)
 800ecfc:	4770      	bx	lr
 800ecfe:	bf00      	nop
 800ed00:	0801b410 	.word	0x0801b410
 800ed04:	0801b93c 	.word	0x0801b93c
 800ed08:	0801b3f4 	.word	0x0801b3f4

0800ed0c <rcutils_get_error_string>:
 800ed0c:	4b06      	ldr	r3, [pc, #24]	@ (800ed28 <rcutils_get_error_string+0x1c>)
 800ed0e:	781b      	ldrb	r3, [r3, #0]
 800ed10:	b13b      	cbz	r3, 800ed22 <rcutils_get_error_string+0x16>
 800ed12:	4b06      	ldr	r3, [pc, #24]	@ (800ed2c <rcutils_get_error_string+0x20>)
 800ed14:	781a      	ldrb	r2, [r3, #0]
 800ed16:	b90a      	cbnz	r2, 800ed1c <rcutils_get_error_string+0x10>
 800ed18:	2201      	movs	r2, #1
 800ed1a:	701a      	strb	r2, [r3, #0]
 800ed1c:	4b04      	ldr	r3, [pc, #16]	@ (800ed30 <rcutils_get_error_string+0x24>)
 800ed1e:	7818      	ldrb	r0, [r3, #0]
 800ed20:	4770      	bx	lr
 800ed22:	4b04      	ldr	r3, [pc, #16]	@ (800ed34 <rcutils_get_error_string+0x28>)
 800ed24:	7818      	ldrb	r0, [r3, #0]
 800ed26:	4770      	bx	lr
 800ed28:	2000cf0f 	.word	0x2000cf0f
 800ed2c:	2000cf21 	.word	0x2000cf21
 800ed30:	2000cf20 	.word	0x2000cf20
 800ed34:	0801b42c 	.word	0x0801b42c

0800ed38 <rcutils_reset_error>:
 800ed38:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800ed58 <rcutils_reset_error+0x20>
 800ed3c:	4a08      	ldr	r2, [pc, #32]	@ (800ed60 <rcutils_reset_error+0x28>)
 800ed3e:	4809      	ldr	r0, [pc, #36]	@ (800ed64 <rcutils_reset_error+0x2c>)
 800ed40:	4909      	ldr	r1, [pc, #36]	@ (800ed68 <rcutils_reset_error+0x30>)
 800ed42:	2300      	movs	r3, #0
 800ed44:	8013      	strh	r3, [r2, #0]
 800ed46:	ed82 7b02 	vstr	d7, [r2, #8]
 800ed4a:	4a08      	ldr	r2, [pc, #32]	@ (800ed6c <rcutils_reset_error+0x34>)
 800ed4c:	7003      	strb	r3, [r0, #0]
 800ed4e:	700b      	strb	r3, [r1, #0]
 800ed50:	7013      	strb	r3, [r2, #0]
 800ed52:	4770      	bx	lr
 800ed54:	f3af 8000 	nop.w
	...
 800ed60:	2000cf10 	.word	0x2000cf10
 800ed64:	2000cf21 	.word	0x2000cf21
 800ed68:	2000cf20 	.word	0x2000cf20
 800ed6c:	2000cf0f 	.word	0x2000cf0f

0800ed70 <rcutils_format_string_limit>:
 800ed70:	b40f      	push	{r0, r1, r2, r3}
 800ed72:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed74:	b083      	sub	sp, #12
 800ed76:	ac08      	add	r4, sp, #32
 800ed78:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800ed7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ed7e:	b34e      	cbz	r6, 800edd4 <rcutils_format_string_limit+0x64>
 800ed80:	a808      	add	r0, sp, #32
 800ed82:	f7ff fef9 	bl	800eb78 <rcutils_allocator_is_valid>
 800ed86:	b328      	cbz	r0, 800edd4 <rcutils_format_string_limit+0x64>
 800ed88:	2100      	movs	r1, #0
 800ed8a:	ab0f      	add	r3, sp, #60	@ 0x3c
 800ed8c:	4632      	mov	r2, r6
 800ed8e:	4608      	mov	r0, r1
 800ed90:	e9cd 3300 	strd	r3, r3, [sp]
 800ed94:	f000 f8f4 	bl	800ef80 <rcutils_vsnprintf>
 800ed98:	1c43      	adds	r3, r0, #1
 800ed9a:	4605      	mov	r5, r0
 800ed9c:	d01a      	beq.n	800edd4 <rcutils_format_string_limit+0x64>
 800ed9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eda0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800eda2:	1c47      	adds	r7, r0, #1
 800eda4:	429f      	cmp	r7, r3
 800eda6:	bf84      	itt	hi
 800eda8:	461f      	movhi	r7, r3
 800edaa:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 800edae:	4638      	mov	r0, r7
 800edb0:	9b08      	ldr	r3, [sp, #32]
 800edb2:	4798      	blx	r3
 800edb4:	4604      	mov	r4, r0
 800edb6:	b168      	cbz	r0, 800edd4 <rcutils_format_string_limit+0x64>
 800edb8:	9b01      	ldr	r3, [sp, #4]
 800edba:	4632      	mov	r2, r6
 800edbc:	4639      	mov	r1, r7
 800edbe:	f000 f8df 	bl	800ef80 <rcutils_vsnprintf>
 800edc2:	2800      	cmp	r0, #0
 800edc4:	db02      	blt.n	800edcc <rcutils_format_string_limit+0x5c>
 800edc6:	2300      	movs	r3, #0
 800edc8:	5563      	strb	r3, [r4, r5]
 800edca:	e004      	b.n	800edd6 <rcutils_format_string_limit+0x66>
 800edcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edce:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800edd0:	4620      	mov	r0, r4
 800edd2:	4798      	blx	r3
 800edd4:	2400      	movs	r4, #0
 800edd6:	4620      	mov	r0, r4
 800edd8:	b003      	add	sp, #12
 800edda:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800edde:	b004      	add	sp, #16
 800ede0:	4770      	bx	lr
 800ede2:	bf00      	nop

0800ede4 <rcutils_repl_str>:
 800ede4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ede8:	ed2d 8b02 	vpush	{d8}
 800edec:	b087      	sub	sp, #28
 800edee:	4680      	mov	r8, r0
 800edf0:	4608      	mov	r0, r1
 800edf2:	f8cd 8004 	str.w	r8, [sp, #4]
 800edf6:	ee08 2a10 	vmov	s16, r2
 800edfa:	468a      	mov	sl, r1
 800edfc:	4699      	mov	r9, r3
 800edfe:	f7f1 fa11 	bl	8000224 <strlen>
 800ee02:	2600      	movs	r6, #0
 800ee04:	4647      	mov	r7, r8
 800ee06:	9002      	str	r0, [sp, #8]
 800ee08:	46b3      	mov	fp, r6
 800ee0a:	2510      	movs	r5, #16
 800ee0c:	46b0      	mov	r8, r6
 800ee0e:	e01d      	b.n	800ee4c <rcutils_repl_str+0x68>
 800ee10:	f10b 0b01 	add.w	fp, fp, #1
 800ee14:	455e      	cmp	r6, fp
 800ee16:	d211      	bcs.n	800ee3c <rcutils_repl_str+0x58>
 800ee18:	442e      	add	r6, r5
 800ee1a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800ee1e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800ee22:	00b1      	lsls	r1, r6, #2
 800ee24:	4798      	blx	r3
 800ee26:	2800      	cmp	r0, #0
 800ee28:	f000 8088 	beq.w	800ef3c <rcutils_repl_str+0x158>
 800ee2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ee30:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800ee34:	4680      	mov	r8, r0
 800ee36:	bf28      	it	cs
 800ee38:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 800ee3c:	9a01      	ldr	r2, [sp, #4]
 800ee3e:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800ee42:	1aa2      	subs	r2, r4, r2
 800ee44:	f843 2c04 	str.w	r2, [r3, #-4]
 800ee48:	9b02      	ldr	r3, [sp, #8]
 800ee4a:	18e7      	adds	r7, r4, r3
 800ee4c:	4651      	mov	r1, sl
 800ee4e:	4638      	mov	r0, r7
 800ee50:	f00b fa17 	bl	801a282 <strstr>
 800ee54:	4604      	mov	r4, r0
 800ee56:	4640      	mov	r0, r8
 800ee58:	2c00      	cmp	r4, #0
 800ee5a:	d1d9      	bne.n	800ee10 <rcutils_repl_str+0x2c>
 800ee5c:	46b8      	mov	r8, r7
 800ee5e:	4607      	mov	r7, r0
 800ee60:	4640      	mov	r0, r8
 800ee62:	f7f1 f9df 	bl	8000224 <strlen>
 800ee66:	9b01      	ldr	r3, [sp, #4]
 800ee68:	eba8 0303 	sub.w	r3, r8, r3
 800ee6c:	181c      	adds	r4, r3, r0
 800ee6e:	9404      	str	r4, [sp, #16]
 800ee70:	f1bb 0f00 	cmp.w	fp, #0
 800ee74:	d04a      	beq.n	800ef0c <rcutils_repl_str+0x128>
 800ee76:	ee18 0a10 	vmov	r0, s16
 800ee7a:	f7f1 f9d3 	bl	8000224 <strlen>
 800ee7e:	9b02      	ldr	r3, [sp, #8]
 800ee80:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800ee84:	1ac3      	subs	r3, r0, r3
 800ee86:	fb0b 4303 	mla	r3, fp, r3, r4
 800ee8a:	461a      	mov	r2, r3
 800ee8c:	9305      	str	r3, [sp, #20]
 800ee8e:	4606      	mov	r6, r0
 800ee90:	f8d9 3000 	ldr.w	r3, [r9]
 800ee94:	1c50      	adds	r0, r2, #1
 800ee96:	4798      	blx	r3
 800ee98:	9003      	str	r0, [sp, #12]
 800ee9a:	2800      	cmp	r0, #0
 800ee9c:	d04f      	beq.n	800ef3e <rcutils_repl_str+0x15a>
 800ee9e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800eea2:	683a      	ldr	r2, [r7, #0]
 800eea4:	4641      	mov	r1, r8
 800eea6:	f00b fa8e 	bl	801a3c6 <memcpy>
 800eeaa:	683d      	ldr	r5, [r7, #0]
 800eeac:	9b03      	ldr	r3, [sp, #12]
 800eeae:	9701      	str	r7, [sp, #4]
 800eeb0:	46ba      	mov	sl, r7
 800eeb2:	441d      	add	r5, r3
 800eeb4:	9f02      	ldr	r7, [sp, #8]
 800eeb6:	f8cd 9008 	str.w	r9, [sp, #8]
 800eeba:	2401      	movs	r4, #1
 800eebc:	46d1      	mov	r9, sl
 800eebe:	ee18 aa10 	vmov	sl, s16
 800eec2:	e00a      	b.n	800eeda <rcutils_repl_str+0xf6>
 800eec4:	f8d9 5000 	ldr.w	r5, [r9]
 800eec8:	1aaa      	subs	r2, r5, r2
 800eeca:	1885      	adds	r5, r0, r2
 800eecc:	f00b fa7b 	bl	801a3c6 <memcpy>
 800eed0:	45a3      	cmp	fp, r4
 800eed2:	f104 0201 	add.w	r2, r4, #1
 800eed6:	d935      	bls.n	800ef44 <rcutils_repl_str+0x160>
 800eed8:	4614      	mov	r4, r2
 800eeda:	4632      	mov	r2, r6
 800eedc:	4651      	mov	r1, sl
 800eede:	4628      	mov	r0, r5
 800eee0:	f00b fa71 	bl	801a3c6 <memcpy>
 800eee4:	f859 2b04 	ldr.w	r2, [r9], #4
 800eee8:	45a3      	cmp	fp, r4
 800eeea:	443a      	add	r2, r7
 800eeec:	eb05 0006 	add.w	r0, r5, r6
 800eef0:	eb08 0102 	add.w	r1, r8, r2
 800eef4:	d1e6      	bne.n	800eec4 <rcutils_repl_str+0xe0>
 800eef6:	9b04      	ldr	r3, [sp, #16]
 800eef8:	1a9a      	subs	r2, r3, r2
 800eefa:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800eefe:	f00b fa62 	bl	801a3c6 <memcpy>
 800ef02:	9a03      	ldr	r2, [sp, #12]
 800ef04:	9905      	ldr	r1, [sp, #20]
 800ef06:	2300      	movs	r3, #0
 800ef08:	5453      	strb	r3, [r2, r1]
 800ef0a:	e00b      	b.n	800ef24 <rcutils_repl_str+0x140>
 800ef0c:	4620      	mov	r0, r4
 800ef0e:	f8d9 3000 	ldr.w	r3, [r9]
 800ef12:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800ef16:	3001      	adds	r0, #1
 800ef18:	4798      	blx	r3
 800ef1a:	9003      	str	r0, [sp, #12]
 800ef1c:	b110      	cbz	r0, 800ef24 <rcutils_repl_str+0x140>
 800ef1e:	9901      	ldr	r1, [sp, #4]
 800ef20:	f00b fa49 	bl	801a3b6 <strcpy>
 800ef24:	4638      	mov	r0, r7
 800ef26:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ef2a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800ef2e:	4798      	blx	r3
 800ef30:	9803      	ldr	r0, [sp, #12]
 800ef32:	b007      	add	sp, #28
 800ef34:	ecbd 8b02 	vpop	{d8}
 800ef38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef3c:	4647      	mov	r7, r8
 800ef3e:	2300      	movs	r3, #0
 800ef40:	9303      	str	r3, [sp, #12]
 800ef42:	e7ef      	b.n	800ef24 <rcutils_repl_str+0x140>
 800ef44:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800ef48:	e7db      	b.n	800ef02 <rcutils_repl_str+0x11e>
 800ef4a:	bf00      	nop

0800ef4c <rcutils_snprintf>:
 800ef4c:	b40c      	push	{r2, r3}
 800ef4e:	b530      	push	{r4, r5, lr}
 800ef50:	b083      	sub	sp, #12
 800ef52:	ab06      	add	r3, sp, #24
 800ef54:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef58:	9301      	str	r3, [sp, #4]
 800ef5a:	b152      	cbz	r2, 800ef72 <rcutils_snprintf+0x26>
 800ef5c:	b138      	cbz	r0, 800ef6e <rcutils_snprintf+0x22>
 800ef5e:	b141      	cbz	r1, 800ef72 <rcutils_snprintf+0x26>
 800ef60:	f00b f89c 	bl	801a09c <vsniprintf>
 800ef64:	b003      	add	sp, #12
 800ef66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef6a:	b002      	add	sp, #8
 800ef6c:	4770      	bx	lr
 800ef6e:	2900      	cmp	r1, #0
 800ef70:	d0f6      	beq.n	800ef60 <rcutils_snprintf+0x14>
 800ef72:	f00b f9f3 	bl	801a35c <__errno>
 800ef76:	2316      	movs	r3, #22
 800ef78:	6003      	str	r3, [r0, #0]
 800ef7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ef7e:	e7f1      	b.n	800ef64 <rcutils_snprintf+0x18>

0800ef80 <rcutils_vsnprintf>:
 800ef80:	b570      	push	{r4, r5, r6, lr}
 800ef82:	b13a      	cbz	r2, 800ef94 <rcutils_vsnprintf+0x14>
 800ef84:	b120      	cbz	r0, 800ef90 <rcutils_vsnprintf+0x10>
 800ef86:	b129      	cbz	r1, 800ef94 <rcutils_vsnprintf+0x14>
 800ef88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ef8c:	f00b b886 	b.w	801a09c <vsniprintf>
 800ef90:	2900      	cmp	r1, #0
 800ef92:	d0f9      	beq.n	800ef88 <rcutils_vsnprintf+0x8>
 800ef94:	f00b f9e2 	bl	801a35c <__errno>
 800ef98:	2316      	movs	r3, #22
 800ef9a:	6003      	str	r3, [r0, #0]
 800ef9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800efa0:	bd70      	pop	{r4, r5, r6, pc}
 800efa2:	bf00      	nop

0800efa4 <rcutils_strdup>:
 800efa4:	b084      	sub	sp, #16
 800efa6:	b570      	push	{r4, r5, r6, lr}
 800efa8:	b082      	sub	sp, #8
 800efaa:	ac07      	add	r4, sp, #28
 800efac:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800efb0:	4605      	mov	r5, r0
 800efb2:	b1b0      	cbz	r0, 800efe2 <rcutils_strdup+0x3e>
 800efb4:	f7f1 f936 	bl	8000224 <strlen>
 800efb8:	1c42      	adds	r2, r0, #1
 800efba:	9b07      	ldr	r3, [sp, #28]
 800efbc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800efbe:	9201      	str	r2, [sp, #4]
 800efc0:	4606      	mov	r6, r0
 800efc2:	4610      	mov	r0, r2
 800efc4:	4798      	blx	r3
 800efc6:	4604      	mov	r4, r0
 800efc8:	b128      	cbz	r0, 800efd6 <rcutils_strdup+0x32>
 800efca:	9a01      	ldr	r2, [sp, #4]
 800efcc:	4629      	mov	r1, r5
 800efce:	f00b f9fa 	bl	801a3c6 <memcpy>
 800efd2:	2300      	movs	r3, #0
 800efd4:	55a3      	strb	r3, [r4, r6]
 800efd6:	4620      	mov	r0, r4
 800efd8:	b002      	add	sp, #8
 800efda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800efde:	b004      	add	sp, #16
 800efe0:	4770      	bx	lr
 800efe2:	4604      	mov	r4, r0
 800efe4:	e7f7      	b.n	800efd6 <rcutils_strdup+0x32>
 800efe6:	bf00      	nop

0800efe8 <rcutils_strndup>:
 800efe8:	b082      	sub	sp, #8
 800efea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efec:	ac06      	add	r4, sp, #24
 800efee:	e884 000c 	stmia.w	r4, {r2, r3}
 800eff2:	4605      	mov	r5, r0
 800eff4:	b188      	cbz	r0, 800f01a <rcutils_strndup+0x32>
 800eff6:	1c4f      	adds	r7, r1, #1
 800eff8:	460e      	mov	r6, r1
 800effa:	4638      	mov	r0, r7
 800effc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800effe:	4790      	blx	r2
 800f000:	4604      	mov	r4, r0
 800f002:	b128      	cbz	r0, 800f010 <rcutils_strndup+0x28>
 800f004:	463a      	mov	r2, r7
 800f006:	4629      	mov	r1, r5
 800f008:	f00b f9dd 	bl	801a3c6 <memcpy>
 800f00c:	2300      	movs	r3, #0
 800f00e:	55a3      	strb	r3, [r4, r6]
 800f010:	4620      	mov	r0, r4
 800f012:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f016:	b002      	add	sp, #8
 800f018:	4770      	bx	lr
 800f01a:	4604      	mov	r4, r0
 800f01c:	e7f8      	b.n	800f010 <rcutils_strndup+0x28>
 800f01e:	bf00      	nop

0800f020 <rcutils_system_time_now>:
 800f020:	b308      	cbz	r0, 800f066 <rcutils_system_time_now+0x46>
 800f022:	b570      	push	{r4, r5, r6, lr}
 800f024:	b084      	sub	sp, #16
 800f026:	4604      	mov	r4, r0
 800f028:	4669      	mov	r1, sp
 800f02a:	2001      	movs	r0, #1
 800f02c:	f7f4 f9c4 	bl	80033b8 <clock_gettime>
 800f030:	e9dd 3500 	ldrd	r3, r5, [sp]
 800f034:	2d00      	cmp	r5, #0
 800f036:	db13      	blt.n	800f060 <rcutils_system_time_now+0x40>
 800f038:	9902      	ldr	r1, [sp, #8]
 800f03a:	2900      	cmp	r1, #0
 800f03c:	db0d      	blt.n	800f05a <rcutils_system_time_now+0x3a>
 800f03e:	4e0b      	ldr	r6, [pc, #44]	@ (800f06c <rcutils_system_time_now+0x4c>)
 800f040:	fba3 3206 	umull	r3, r2, r3, r6
 800f044:	185b      	adds	r3, r3, r1
 800f046:	fb06 2205 	mla	r2, r6, r5, r2
 800f04a:	f04f 0000 	mov.w	r0, #0
 800f04e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800f052:	e9c4 3200 	strd	r3, r2, [r4]
 800f056:	b004      	add	sp, #16
 800f058:	bd70      	pop	{r4, r5, r6, pc}
 800f05a:	ea53 0205 	orrs.w	r2, r3, r5
 800f05e:	d1ee      	bne.n	800f03e <rcutils_system_time_now+0x1e>
 800f060:	2002      	movs	r0, #2
 800f062:	b004      	add	sp, #16
 800f064:	bd70      	pop	{r4, r5, r6, pc}
 800f066:	200b      	movs	r0, #11
 800f068:	4770      	bx	lr
 800f06a:	bf00      	nop
 800f06c:	3b9aca00 	.word	0x3b9aca00

0800f070 <rcutils_steady_time_now>:
 800f070:	b308      	cbz	r0, 800f0b6 <rcutils_steady_time_now+0x46>
 800f072:	b570      	push	{r4, r5, r6, lr}
 800f074:	b084      	sub	sp, #16
 800f076:	4604      	mov	r4, r0
 800f078:	4669      	mov	r1, sp
 800f07a:	2000      	movs	r0, #0
 800f07c:	f7f4 f99c 	bl	80033b8 <clock_gettime>
 800f080:	e9dd 3500 	ldrd	r3, r5, [sp]
 800f084:	2d00      	cmp	r5, #0
 800f086:	db13      	blt.n	800f0b0 <rcutils_steady_time_now+0x40>
 800f088:	9902      	ldr	r1, [sp, #8]
 800f08a:	2900      	cmp	r1, #0
 800f08c:	db0d      	blt.n	800f0aa <rcutils_steady_time_now+0x3a>
 800f08e:	4e0b      	ldr	r6, [pc, #44]	@ (800f0bc <rcutils_steady_time_now+0x4c>)
 800f090:	fba3 3206 	umull	r3, r2, r3, r6
 800f094:	185b      	adds	r3, r3, r1
 800f096:	fb06 2205 	mla	r2, r6, r5, r2
 800f09a:	f04f 0000 	mov.w	r0, #0
 800f09e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800f0a2:	e9c4 3200 	strd	r3, r2, [r4]
 800f0a6:	b004      	add	sp, #16
 800f0a8:	bd70      	pop	{r4, r5, r6, pc}
 800f0aa:	ea53 0205 	orrs.w	r2, r3, r5
 800f0ae:	d1ee      	bne.n	800f08e <rcutils_steady_time_now+0x1e>
 800f0b0:	2002      	movs	r0, #2
 800f0b2:	b004      	add	sp, #16
 800f0b4:	bd70      	pop	{r4, r5, r6, pc}
 800f0b6:	200b      	movs	r0, #11
 800f0b8:	4770      	bx	lr
 800f0ba:	bf00      	nop
 800f0bc:	3b9aca00 	.word	0x3b9aca00

0800f0c0 <rmw_get_zero_initialized_init_options>:
 800f0c0:	b510      	push	{r4, lr}
 800f0c2:	2238      	movs	r2, #56	@ 0x38
 800f0c4:	4604      	mov	r4, r0
 800f0c6:	2100      	movs	r1, #0
 800f0c8:	f00b f8b4 	bl	801a234 <memset>
 800f0cc:	f104 0010 	add.w	r0, r4, #16
 800f0d0:	f000 f80a 	bl	800f0e8 <rmw_get_default_security_options>
 800f0d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f0d8:	60e3      	str	r3, [r4, #12]
 800f0da:	4620      	mov	r0, r4
 800f0dc:	bd10      	pop	{r4, pc}
 800f0de:	bf00      	nop

0800f0e0 <rmw_get_default_publisher_options>:
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	6002      	str	r2, [r0, #0]
 800f0e4:	7102      	strb	r2, [r0, #4]
 800f0e6:	4770      	bx	lr

0800f0e8 <rmw_get_default_security_options>:
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	7002      	strb	r2, [r0, #0]
 800f0ec:	6042      	str	r2, [r0, #4]
 800f0ee:	4770      	bx	lr

0800f0f0 <rmw_subscription_content_filter_options_fini>:
 800f0f0:	b1b0      	cbz	r0, 800f120 <rmw_subscription_content_filter_options_fini+0x30>
 800f0f2:	b538      	push	{r3, r4, r5, lr}
 800f0f4:	4604      	mov	r4, r0
 800f0f6:	4608      	mov	r0, r1
 800f0f8:	460d      	mov	r5, r1
 800f0fa:	f7ff fd3d 	bl	800eb78 <rcutils_allocator_is_valid>
 800f0fe:	b168      	cbz	r0, 800f11c <rmw_subscription_content_filter_options_fini+0x2c>
 800f100:	6820      	ldr	r0, [r4, #0]
 800f102:	b120      	cbz	r0, 800f10e <rmw_subscription_content_filter_options_fini+0x1e>
 800f104:	686b      	ldr	r3, [r5, #4]
 800f106:	6929      	ldr	r1, [r5, #16]
 800f108:	4798      	blx	r3
 800f10a:	2300      	movs	r3, #0
 800f10c:	6023      	str	r3, [r4, #0]
 800f10e:	1d20      	adds	r0, r4, #4
 800f110:	f008 f952 	bl	80173b8 <rcutils_string_array_fini>
 800f114:	3800      	subs	r0, #0
 800f116:	bf18      	it	ne
 800f118:	2001      	movne	r0, #1
 800f11a:	bd38      	pop	{r3, r4, r5, pc}
 800f11c:	200b      	movs	r0, #11
 800f11e:	bd38      	pop	{r3, r4, r5, pc}
 800f120:	200b      	movs	r0, #11
 800f122:	4770      	bx	lr

0800f124 <rmw_get_default_subscription_options>:
 800f124:	2200      	movs	r2, #0
 800f126:	e9c0 2200 	strd	r2, r2, [r0]
 800f12a:	6082      	str	r2, [r0, #8]
 800f12c:	4770      	bx	lr
 800f12e:	bf00      	nop

0800f130 <rmw_get_zero_initialized_message_info>:
 800f130:	b510      	push	{r4, lr}
 800f132:	2240      	movs	r2, #64	@ 0x40
 800f134:	4604      	mov	r4, r0
 800f136:	2100      	movs	r1, #0
 800f138:	f00b f87c 	bl	801a234 <memset>
 800f13c:	4620      	mov	r0, r4
 800f13e:	bd10      	pop	{r4, pc}

0800f140 <rmw_validate_namespace_with_size>:
 800f140:	b340      	cbz	r0, 800f194 <rmw_validate_namespace_with_size+0x54>
 800f142:	b570      	push	{r4, r5, r6, lr}
 800f144:	4614      	mov	r4, r2
 800f146:	b0c2      	sub	sp, #264	@ 0x108
 800f148:	b332      	cbz	r2, 800f198 <rmw_validate_namespace_with_size+0x58>
 800f14a:	2901      	cmp	r1, #1
 800f14c:	460d      	mov	r5, r1
 800f14e:	461e      	mov	r6, r3
 800f150:	d102      	bne.n	800f158 <rmw_validate_namespace_with_size+0x18>
 800f152:	7803      	ldrb	r3, [r0, #0]
 800f154:	2b2f      	cmp	r3, #47	@ 0x2f
 800f156:	d012      	beq.n	800f17e <rmw_validate_namespace_with_size+0x3e>
 800f158:	aa01      	add	r2, sp, #4
 800f15a:	4669      	mov	r1, sp
 800f15c:	f008 fb14 	bl	8017788 <rmw_validate_full_topic_name>
 800f160:	b978      	cbnz	r0, 800f182 <rmw_validate_namespace_with_size+0x42>
 800f162:	9b00      	ldr	r3, [sp, #0]
 800f164:	b14b      	cbz	r3, 800f17a <rmw_validate_namespace_with_size+0x3a>
 800f166:	2b07      	cmp	r3, #7
 800f168:	d007      	beq.n	800f17a <rmw_validate_namespace_with_size+0x3a>
 800f16a:	1e5a      	subs	r2, r3, #1
 800f16c:	2a05      	cmp	r2, #5
 800f16e:	d82b      	bhi.n	800f1c8 <rmw_validate_namespace_with_size+0x88>
 800f170:	e8df f002 	tbb	[pc, r2]
 800f174:	1e212427 	.word	0x1e212427
 800f178:	141b      	.short	0x141b
 800f17a:	2df5      	cmp	r5, #245	@ 0xf5
 800f17c:	d803      	bhi.n	800f186 <rmw_validate_namespace_with_size+0x46>
 800f17e:	2000      	movs	r0, #0
 800f180:	6020      	str	r0, [r4, #0]
 800f182:	b042      	add	sp, #264	@ 0x108
 800f184:	bd70      	pop	{r4, r5, r6, pc}
 800f186:	2307      	movs	r3, #7
 800f188:	6023      	str	r3, [r4, #0]
 800f18a:	2e00      	cmp	r6, #0
 800f18c:	d0f9      	beq.n	800f182 <rmw_validate_namespace_with_size+0x42>
 800f18e:	23f4      	movs	r3, #244	@ 0xf4
 800f190:	6033      	str	r3, [r6, #0]
 800f192:	e7f6      	b.n	800f182 <rmw_validate_namespace_with_size+0x42>
 800f194:	200b      	movs	r0, #11
 800f196:	4770      	bx	lr
 800f198:	200b      	movs	r0, #11
 800f19a:	e7f2      	b.n	800f182 <rmw_validate_namespace_with_size+0x42>
 800f19c:	2306      	movs	r3, #6
 800f19e:	6023      	str	r3, [r4, #0]
 800f1a0:	2e00      	cmp	r6, #0
 800f1a2:	d0ee      	beq.n	800f182 <rmw_validate_namespace_with_size+0x42>
 800f1a4:	9b01      	ldr	r3, [sp, #4]
 800f1a6:	6033      	str	r3, [r6, #0]
 800f1a8:	e7eb      	b.n	800f182 <rmw_validate_namespace_with_size+0x42>
 800f1aa:	2305      	movs	r3, #5
 800f1ac:	6023      	str	r3, [r4, #0]
 800f1ae:	e7f7      	b.n	800f1a0 <rmw_validate_namespace_with_size+0x60>
 800f1b0:	2304      	movs	r3, #4
 800f1b2:	6023      	str	r3, [r4, #0]
 800f1b4:	e7f4      	b.n	800f1a0 <rmw_validate_namespace_with_size+0x60>
 800f1b6:	2303      	movs	r3, #3
 800f1b8:	6023      	str	r3, [r4, #0]
 800f1ba:	e7f1      	b.n	800f1a0 <rmw_validate_namespace_with_size+0x60>
 800f1bc:	2302      	movs	r3, #2
 800f1be:	6023      	str	r3, [r4, #0]
 800f1c0:	e7ee      	b.n	800f1a0 <rmw_validate_namespace_with_size+0x60>
 800f1c2:	2301      	movs	r3, #1
 800f1c4:	6023      	str	r3, [r4, #0]
 800f1c6:	e7eb      	b.n	800f1a0 <rmw_validate_namespace_with_size+0x60>
 800f1c8:	4a03      	ldr	r2, [pc, #12]	@ (800f1d8 <rmw_validate_namespace_with_size+0x98>)
 800f1ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f1ce:	a802      	add	r0, sp, #8
 800f1d0:	f7ff febc 	bl	800ef4c <rcutils_snprintf>
 800f1d4:	2001      	movs	r0, #1
 800f1d6:	e7d4      	b.n	800f182 <rmw_validate_namespace_with_size+0x42>
 800f1d8:	0801b430 	.word	0x0801b430

0800f1dc <rmw_validate_namespace>:
 800f1dc:	b168      	cbz	r0, 800f1fa <rmw_validate_namespace+0x1e>
 800f1de:	b570      	push	{r4, r5, r6, lr}
 800f1e0:	460d      	mov	r5, r1
 800f1e2:	4616      	mov	r6, r2
 800f1e4:	4604      	mov	r4, r0
 800f1e6:	f7f1 f81d 	bl	8000224 <strlen>
 800f1ea:	4633      	mov	r3, r6
 800f1ec:	4601      	mov	r1, r0
 800f1ee:	462a      	mov	r2, r5
 800f1f0:	4620      	mov	r0, r4
 800f1f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f1f6:	f7ff bfa3 	b.w	800f140 <rmw_validate_namespace_with_size>
 800f1fa:	200b      	movs	r0, #11
 800f1fc:	4770      	bx	lr
 800f1fe:	bf00      	nop

0800f200 <rmw_namespace_validation_result_string>:
 800f200:	2807      	cmp	r0, #7
 800f202:	bf9a      	itte	ls
 800f204:	4b02      	ldrls	r3, [pc, #8]	@ (800f210 <rmw_namespace_validation_result_string+0x10>)
 800f206:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800f20a:	4802      	ldrhi	r0, [pc, #8]	@ (800f214 <rmw_namespace_validation_result_string+0x14>)
 800f20c:	4770      	bx	lr
 800f20e:	bf00      	nop
 800f210:	0801bcec 	.word	0x0801bcec
 800f214:	0801b480 	.word	0x0801b480

0800f218 <rmw_validate_node_name>:
 800f218:	2800      	cmp	r0, #0
 800f21a:	d03b      	beq.n	800f294 <rmw_validate_node_name+0x7c>
 800f21c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f220:	460d      	mov	r5, r1
 800f222:	2900      	cmp	r1, #0
 800f224:	d038      	beq.n	800f298 <rmw_validate_node_name+0x80>
 800f226:	4616      	mov	r6, r2
 800f228:	4604      	mov	r4, r0
 800f22a:	f7f0 fffb 	bl	8000224 <strlen>
 800f22e:	b1e0      	cbz	r0, 800f26a <rmw_validate_node_name+0x52>
 800f230:	1e63      	subs	r3, r4, #1
 800f232:	eb03 0800 	add.w	r8, r3, r0
 800f236:	f1c4 0101 	rsb	r1, r4, #1
 800f23a:	18cf      	adds	r7, r1, r3
 800f23c:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800f240:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 800f244:	f02e 0c20 	bic.w	ip, lr, #32
 800f248:	2a09      	cmp	r2, #9
 800f24a:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 800f24e:	d914      	bls.n	800f27a <rmw_validate_node_name+0x62>
 800f250:	f1bc 0f19 	cmp.w	ip, #25
 800f254:	d911      	bls.n	800f27a <rmw_validate_node_name+0x62>
 800f256:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800f25a:	d00e      	beq.n	800f27a <rmw_validate_node_name+0x62>
 800f25c:	2302      	movs	r3, #2
 800f25e:	602b      	str	r3, [r5, #0]
 800f260:	b106      	cbz	r6, 800f264 <rmw_validate_node_name+0x4c>
 800f262:	6037      	str	r7, [r6, #0]
 800f264:	2000      	movs	r0, #0
 800f266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f26a:	2301      	movs	r3, #1
 800f26c:	602b      	str	r3, [r5, #0]
 800f26e:	2e00      	cmp	r6, #0
 800f270:	d0f8      	beq.n	800f264 <rmw_validate_node_name+0x4c>
 800f272:	2000      	movs	r0, #0
 800f274:	6030      	str	r0, [r6, #0]
 800f276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f27a:	4543      	cmp	r3, r8
 800f27c:	d1dd      	bne.n	800f23a <rmw_validate_node_name+0x22>
 800f27e:	7822      	ldrb	r2, [r4, #0]
 800f280:	4b0d      	ldr	r3, [pc, #52]	@ (800f2b8 <rmw_validate_node_name+0xa0>)
 800f282:	5cd3      	ldrb	r3, [r2, r3]
 800f284:	f013 0304 	ands.w	r3, r3, #4
 800f288:	d110      	bne.n	800f2ac <rmw_validate_node_name+0x94>
 800f28a:	28ff      	cmp	r0, #255	@ 0xff
 800f28c:	d806      	bhi.n	800f29c <rmw_validate_node_name+0x84>
 800f28e:	602b      	str	r3, [r5, #0]
 800f290:	4618      	mov	r0, r3
 800f292:	e7e8      	b.n	800f266 <rmw_validate_node_name+0x4e>
 800f294:	200b      	movs	r0, #11
 800f296:	4770      	bx	lr
 800f298:	200b      	movs	r0, #11
 800f29a:	e7e4      	b.n	800f266 <rmw_validate_node_name+0x4e>
 800f29c:	2204      	movs	r2, #4
 800f29e:	602a      	str	r2, [r5, #0]
 800f2a0:	2e00      	cmp	r6, #0
 800f2a2:	d0df      	beq.n	800f264 <rmw_validate_node_name+0x4c>
 800f2a4:	22fe      	movs	r2, #254	@ 0xfe
 800f2a6:	6032      	str	r2, [r6, #0]
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	e7dc      	b.n	800f266 <rmw_validate_node_name+0x4e>
 800f2ac:	2303      	movs	r3, #3
 800f2ae:	602b      	str	r3, [r5, #0]
 800f2b0:	2e00      	cmp	r6, #0
 800f2b2:	d1de      	bne.n	800f272 <rmw_validate_node_name+0x5a>
 800f2b4:	e7d6      	b.n	800f264 <rmw_validate_node_name+0x4c>
 800f2b6:	bf00      	nop
 800f2b8:	0801c1f7 	.word	0x0801c1f7

0800f2bc <rmw_node_name_validation_result_string>:
 800f2bc:	2804      	cmp	r0, #4
 800f2be:	bf9a      	itte	ls
 800f2c0:	4b02      	ldrls	r3, [pc, #8]	@ (800f2cc <rmw_node_name_validation_result_string+0x10>)
 800f2c2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800f2c6:	4802      	ldrhi	r0, [pc, #8]	@ (800f2d0 <rmw_node_name_validation_result_string+0x14>)
 800f2c8:	4770      	bx	lr
 800f2ca:	bf00      	nop
 800f2cc:	0801bd0c 	.word	0x0801bd0c
 800f2d0:	0801b628 	.word	0x0801b628

0800f2d4 <rmw_uros_set_custom_transport>:
 800f2d4:	b470      	push	{r4, r5, r6}
 800f2d6:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800f2da:	b162      	cbz	r2, 800f2f6 <rmw_uros_set_custom_transport+0x22>
 800f2dc:	b15b      	cbz	r3, 800f2f6 <rmw_uros_set_custom_transport+0x22>
 800f2de:	b155      	cbz	r5, 800f2f6 <rmw_uros_set_custom_transport+0x22>
 800f2e0:	b14e      	cbz	r6, 800f2f6 <rmw_uros_set_custom_transport+0x22>
 800f2e2:	4c06      	ldr	r4, [pc, #24]	@ (800f2fc <rmw_uros_set_custom_transport+0x28>)
 800f2e4:	7020      	strb	r0, [r4, #0]
 800f2e6:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800f2ea:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800f2ee:	6166      	str	r6, [r4, #20]
 800f2f0:	2000      	movs	r0, #0
 800f2f2:	bc70      	pop	{r4, r5, r6}
 800f2f4:	4770      	bx	lr
 800f2f6:	200b      	movs	r0, #11
 800f2f8:	bc70      	pop	{r4, r5, r6}
 800f2fa:	4770      	bx	lr
 800f2fc:	2000cf24 	.word	0x2000cf24

0800f300 <rmw_uros_ping_agent>:
 800f300:	b570      	push	{r4, r5, r6, lr}
 800f302:	4b22      	ldr	r3, [pc, #136]	@ (800f38c <rmw_uros_ping_agent+0x8c>)
 800f304:	7b1a      	ldrb	r2, [r3, #12]
 800f306:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800f30a:	4605      	mov	r5, r0
 800f30c:	460e      	mov	r6, r1
 800f30e:	b10a      	cbz	r2, 800f314 <rmw_uros_ping_agent+0x14>
 800f310:	681c      	ldr	r4, [r3, #0]
 800f312:	b9bc      	cbnz	r4, 800f344 <rmw_uros_ping_agent+0x44>
 800f314:	4b1e      	ldr	r3, [pc, #120]	@ (800f390 <rmw_uros_ping_agent+0x90>)
 800f316:	781a      	ldrb	r2, [r3, #0]
 800f318:	6918      	ldr	r0, [r3, #16]
 800f31a:	f88d 2200 	strb.w	r2, [sp, #512]	@ 0x200
 800f31e:	685a      	ldr	r2, [r3, #4]
 800f320:	92a3      	str	r2, [sp, #652]	@ 0x28c
 800f322:	2100      	movs	r1, #0
 800f324:	68da      	ldr	r2, [r3, #12]
 800f326:	909c      	str	r0, [sp, #624]	@ 0x270
 800f328:	6958      	ldr	r0, [r3, #20]
 800f32a:	929b      	str	r2, [sp, #620]	@ 0x26c
 800f32c:	689b      	ldr	r3, [r3, #8]
 800f32e:	909d      	str	r0, [sp, #628]	@ 0x274
 800f330:	466a      	mov	r2, sp
 800f332:	4608      	mov	r0, r1
 800f334:	939a      	str	r3, [sp, #616]	@ 0x268
 800f336:	f000 ffbd 	bl	80102b4 <rmw_uxrce_transport_init>
 800f33a:	b198      	cbz	r0, 800f364 <rmw_uros_ping_agent+0x64>
 800f33c:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800f340:	bd70      	pop	{r4, r5, r6, pc}
 800f342:	b9f0      	cbnz	r0, 800f382 <rmw_uros_ping_agent+0x82>
 800f344:	68a0      	ldr	r0, [r4, #8]
 800f346:	4632      	mov	r2, r6
 800f348:	4629      	mov	r1, r5
 800f34a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f34e:	f002 fba1 	bl	8011a94 <uxr_ping_agent_session>
 800f352:	6864      	ldr	r4, [r4, #4]
 800f354:	2c00      	cmp	r4, #0
 800f356:	d1f4      	bne.n	800f342 <rmw_uros_ping_agent+0x42>
 800f358:	f080 0001 	eor.w	r0, r0, #1
 800f35c:	b2c0      	uxtb	r0, r0
 800f35e:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800f362:	bd70      	pop	{r4, r5, r6, pc}
 800f364:	4632      	mov	r2, r6
 800f366:	4629      	mov	r1, r5
 800f368:	a89e      	add	r0, sp, #632	@ 0x278
 800f36a:	f002 fbdf 	bl	8011b2c <uxr_ping_agent_attempts>
 800f36e:	4604      	mov	r4, r0
 800f370:	4668      	mov	r0, sp
 800f372:	f002 fb5b 	bl	8011a2c <uxr_close_custom_transport>
 800f376:	f084 0001 	eor.w	r0, r4, #1
 800f37a:	b2c0      	uxtb	r0, r0
 800f37c:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800f380:	bd70      	pop	{r4, r5, r6, pc}
 800f382:	2000      	movs	r0, #0
 800f384:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800f388:	bd70      	pop	{r4, r5, r6, pc}
 800f38a:	bf00      	nop
 800f38c:	2001187c 	.word	0x2001187c
 800f390:	2000cf24 	.word	0x2000cf24

0800f394 <rmw_init_options_init>:
 800f394:	b084      	sub	sp, #16
 800f396:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f398:	b083      	sub	sp, #12
 800f39a:	ad09      	add	r5, sp, #36	@ 0x24
 800f39c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800f3a0:	b130      	cbz	r0, 800f3b0 <rmw_init_options_init+0x1c>
 800f3a2:	4604      	mov	r4, r0
 800f3a4:	4628      	mov	r0, r5
 800f3a6:	f7ff fbe7 	bl	800eb78 <rcutils_allocator_is_valid>
 800f3aa:	b108      	cbz	r0, 800f3b0 <rmw_init_options_init+0x1c>
 800f3ac:	68a6      	ldr	r6, [r4, #8]
 800f3ae:	b12e      	cbz	r6, 800f3bc <rmw_init_options_init+0x28>
 800f3b0:	200b      	movs	r0, #11
 800f3b2:	b003      	add	sp, #12
 800f3b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f3b8:	b004      	add	sp, #16
 800f3ba:	4770      	bx	lr
 800f3bc:	2200      	movs	r2, #0
 800f3be:	2300      	movs	r3, #0
 800f3c0:	e9c4 2300 	strd	r2, r3, [r4]
 800f3c4:	4b20      	ldr	r3, [pc, #128]	@ (800f448 <rmw_init_options_init+0xb4>)
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	60a3      	str	r3, [r4, #8]
 800f3ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f3cc:	f104 0c20 	add.w	ip, r4, #32
 800f3d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f3d4:	466f      	mov	r7, sp
 800f3d6:	682b      	ldr	r3, [r5, #0]
 800f3d8:	f8cc 3000 	str.w	r3, [ip]
 800f3dc:	4638      	mov	r0, r7
 800f3de:	61e6      	str	r6, [r4, #28]
 800f3e0:	60e6      	str	r6, [r4, #12]
 800f3e2:	f7ff fe81 	bl	800f0e8 <rmw_get_default_security_options>
 800f3e6:	e897 0003 	ldmia.w	r7, {r0, r1}
 800f3ea:	f104 0310 	add.w	r3, r4, #16
 800f3ee:	e883 0003 	stmia.w	r3, {r0, r1}
 800f3f2:	2203      	movs	r2, #3
 800f3f4:	4815      	ldr	r0, [pc, #84]	@ (800f44c <rmw_init_options_init+0xb8>)
 800f3f6:	4916      	ldr	r1, [pc, #88]	@ (800f450 <rmw_init_options_init+0xbc>)
 800f3f8:	7626      	strb	r6, [r4, #24]
 800f3fa:	f001 f88b 	bl	8010514 <rmw_uxrce_init_init_options_impl_memory>
 800f3fe:	4813      	ldr	r0, [pc, #76]	@ (800f44c <rmw_init_options_init+0xb8>)
 800f400:	f008 fb20 	bl	8017a44 <get_memory>
 800f404:	b1f0      	cbz	r0, 800f444 <rmw_init_options_init+0xb0>
 800f406:	4a13      	ldr	r2, [pc, #76]	@ (800f454 <rmw_init_options_init+0xc0>)
 800f408:	6883      	ldr	r3, [r0, #8]
 800f40a:	6851      	ldr	r1, [r2, #4]
 800f40c:	7810      	ldrb	r0, [r2, #0]
 800f40e:	6363      	str	r3, [r4, #52]	@ 0x34
 800f410:	7418      	strb	r0, [r3, #16]
 800f412:	6159      	str	r1, [r3, #20]
 800f414:	68d1      	ldr	r1, [r2, #12]
 800f416:	61d9      	str	r1, [r3, #28]
 800f418:	6911      	ldr	r1, [r2, #16]
 800f41a:	6219      	str	r1, [r3, #32]
 800f41c:	6951      	ldr	r1, [r2, #20]
 800f41e:	6892      	ldr	r2, [r2, #8]
 800f420:	619a      	str	r2, [r3, #24]
 800f422:	6259      	str	r1, [r3, #36]	@ 0x24
 800f424:	f004 fc50 	bl	8013cc8 <uxr_nanos>
 800f428:	f00a fb48 	bl	8019abc <srand>
 800f42c:	f00a fb74 	bl	8019b18 <rand>
 800f430:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f432:	6298      	str	r0, [r3, #40]	@ 0x28
 800f434:	2800      	cmp	r0, #0
 800f436:	d0f9      	beq.n	800f42c <rmw_init_options_init+0x98>
 800f438:	2000      	movs	r0, #0
 800f43a:	b003      	add	sp, #12
 800f43c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f440:	b004      	add	sp, #16
 800f442:	4770      	bx	lr
 800f444:	2001      	movs	r0, #1
 800f446:	e7b4      	b.n	800f3b2 <rmw_init_options_init+0x1e>
 800f448:	0801c0c0 	.word	0x0801c0c0
 800f44c:	2001183c 	.word	0x2001183c
 800f450:	2000d0d8 	.word	0x2000d0d8
 800f454:	2000cf24 	.word	0x2000cf24

0800f458 <rmw_init_options_copy>:
 800f458:	b570      	push	{r4, r5, r6, lr}
 800f45a:	b088      	sub	sp, #32
 800f45c:	b160      	cbz	r0, 800f478 <rmw_init_options_copy+0x20>
 800f45e:	460d      	mov	r5, r1
 800f460:	b151      	cbz	r1, 800f478 <rmw_init_options_copy+0x20>
 800f462:	4604      	mov	r4, r0
 800f464:	6880      	ldr	r0, [r0, #8]
 800f466:	b128      	cbz	r0, 800f474 <rmw_init_options_copy+0x1c>
 800f468:	4b33      	ldr	r3, [pc, #204]	@ (800f538 <rmw_init_options_copy+0xe0>)
 800f46a:	6819      	ldr	r1, [r3, #0]
 800f46c:	f7f0 fed0 	bl	8000210 <strcmp>
 800f470:	2800      	cmp	r0, #0
 800f472:	d154      	bne.n	800f51e <rmw_init_options_copy+0xc6>
 800f474:	68ab      	ldr	r3, [r5, #8]
 800f476:	b11b      	cbz	r3, 800f480 <rmw_init_options_copy+0x28>
 800f478:	240b      	movs	r4, #11
 800f47a:	4620      	mov	r0, r4
 800f47c:	b008      	add	sp, #32
 800f47e:	bd70      	pop	{r4, r5, r6, pc}
 800f480:	4623      	mov	r3, r4
 800f482:	462a      	mov	r2, r5
 800f484:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800f488:	f8d3 c000 	ldr.w	ip, [r3]
 800f48c:	6858      	ldr	r0, [r3, #4]
 800f48e:	6899      	ldr	r1, [r3, #8]
 800f490:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800f494:	f8c2 e00c 	str.w	lr, [r2, #12]
 800f498:	3310      	adds	r3, #16
 800f49a:	42b3      	cmp	r3, r6
 800f49c:	f8c2 c000 	str.w	ip, [r2]
 800f4a0:	6050      	str	r0, [r2, #4]
 800f4a2:	6091      	str	r1, [r2, #8]
 800f4a4:	f102 0210 	add.w	r2, r2, #16
 800f4a8:	d1ee      	bne.n	800f488 <rmw_init_options_copy+0x30>
 800f4aa:	6819      	ldr	r1, [r3, #0]
 800f4ac:	685b      	ldr	r3, [r3, #4]
 800f4ae:	6053      	str	r3, [r2, #4]
 800f4b0:	6011      	str	r1, [r2, #0]
 800f4b2:	f104 0e20 	add.w	lr, r4, #32
 800f4b6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f4ba:	f10d 0c0c 	add.w	ip, sp, #12
 800f4be:	4666      	mov	r6, ip
 800f4c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f4c4:	f8de 3000 	ldr.w	r3, [lr]
 800f4c8:	f8cc 3000 	str.w	r3, [ip]
 800f4cc:	4630      	mov	r0, r6
 800f4ce:	f7ff fb53 	bl	800eb78 <rcutils_allocator_is_valid>
 800f4d2:	2800      	cmp	r0, #0
 800f4d4:	d0d0      	beq.n	800f478 <rmw_init_options_copy+0x20>
 800f4d6:	ab08      	add	r3, sp, #32
 800f4d8:	e913 0003 	ldmdb	r3, {r0, r1}
 800f4dc:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f4e0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800f4e4:	69e0      	ldr	r0, [r4, #28]
 800f4e6:	f7ff fd5d 	bl	800efa4 <rcutils_strdup>
 800f4ea:	61e8      	str	r0, [r5, #28]
 800f4ec:	69e3      	ldr	r3, [r4, #28]
 800f4ee:	b103      	cbz	r3, 800f4f2 <rmw_init_options_copy+0x9a>
 800f4f0:	b1f8      	cbz	r0, 800f532 <rmw_init_options_copy+0xda>
 800f4f2:	4812      	ldr	r0, [pc, #72]	@ (800f53c <rmw_init_options_copy+0xe4>)
 800f4f4:	f008 faa6 	bl	8017a44 <get_memory>
 800f4f8:	b1a8      	cbz	r0, 800f526 <rmw_init_options_copy+0xce>
 800f4fa:	6883      	ldr	r3, [r0, #8]
 800f4fc:	636b      	str	r3, [r5, #52]	@ 0x34
 800f4fe:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800f500:	f102 0c10 	add.w	ip, r2, #16
 800f504:	f103 0510 	add.w	r5, r3, #16
 800f508:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f50c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f50e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800f512:	2400      	movs	r4, #0
 800f514:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800f518:	4620      	mov	r0, r4
 800f51a:	b008      	add	sp, #32
 800f51c:	bd70      	pop	{r4, r5, r6, pc}
 800f51e:	240c      	movs	r4, #12
 800f520:	4620      	mov	r0, r4
 800f522:	b008      	add	sp, #32
 800f524:	bd70      	pop	{r4, r5, r6, pc}
 800f526:	9b04      	ldr	r3, [sp, #16]
 800f528:	9907      	ldr	r1, [sp, #28]
 800f52a:	69e8      	ldr	r0, [r5, #28]
 800f52c:	4798      	blx	r3
 800f52e:	2401      	movs	r4, #1
 800f530:	e7a3      	b.n	800f47a <rmw_init_options_copy+0x22>
 800f532:	240a      	movs	r4, #10
 800f534:	e7a1      	b.n	800f47a <rmw_init_options_copy+0x22>
 800f536:	bf00      	nop
 800f538:	0801c0c0 	.word	0x0801c0c0
 800f53c:	2001183c 	.word	0x2001183c

0800f540 <rmw_init_options_fini>:
 800f540:	2800      	cmp	r0, #0
 800f542:	d041      	beq.n	800f5c8 <rmw_init_options_fini+0x88>
 800f544:	b510      	push	{r4, lr}
 800f546:	4604      	mov	r4, r0
 800f548:	b08e      	sub	sp, #56	@ 0x38
 800f54a:	3020      	adds	r0, #32
 800f54c:	f7ff fb14 	bl	800eb78 <rcutils_allocator_is_valid>
 800f550:	b380      	cbz	r0, 800f5b4 <rmw_init_options_fini+0x74>
 800f552:	68a0      	ldr	r0, [r4, #8]
 800f554:	b120      	cbz	r0, 800f560 <rmw_init_options_fini+0x20>
 800f556:	4b1e      	ldr	r3, [pc, #120]	@ (800f5d0 <rmw_init_options_fini+0x90>)
 800f558:	6819      	ldr	r1, [r3, #0]
 800f55a:	f7f0 fe59 	bl	8000210 <strcmp>
 800f55e:	bb88      	cbnz	r0, 800f5c4 <rmw_init_options_fini+0x84>
 800f560:	4b1c      	ldr	r3, [pc, #112]	@ (800f5d4 <rmw_init_options_fini+0x94>)
 800f562:	6819      	ldr	r1, [r3, #0]
 800f564:	b351      	cbz	r1, 800f5bc <rmw_init_options_fini+0x7c>
 800f566:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800f568:	e001      	b.n	800f56e <rmw_init_options_fini+0x2e>
 800f56a:	6849      	ldr	r1, [r1, #4]
 800f56c:	b331      	cbz	r1, 800f5bc <rmw_init_options_fini+0x7c>
 800f56e:	688b      	ldr	r3, [r1, #8]
 800f570:	429a      	cmp	r2, r3
 800f572:	d1fa      	bne.n	800f56a <rmw_init_options_fini+0x2a>
 800f574:	4817      	ldr	r0, [pc, #92]	@ (800f5d4 <rmw_init_options_fini+0x94>)
 800f576:	f008 fa75 	bl	8017a64 <put_memory>
 800f57a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f57c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800f57e:	69e0      	ldr	r0, [r4, #28]
 800f580:	4798      	blx	r3
 800f582:	4668      	mov	r0, sp
 800f584:	f7ff fd9c 	bl	800f0c0 <rmw_get_zero_initialized_init_options>
 800f588:	46ee      	mov	lr, sp
 800f58a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f58e:	46a4      	mov	ip, r4
 800f590:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f594:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f598:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f59c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f5a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f5a4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f5a8:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	b00e      	add	sp, #56	@ 0x38
 800f5b2:	bd10      	pop	{r4, pc}
 800f5b4:	230b      	movs	r3, #11
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	b00e      	add	sp, #56	@ 0x38
 800f5ba:	bd10      	pop	{r4, pc}
 800f5bc:	2301      	movs	r3, #1
 800f5be:	4618      	mov	r0, r3
 800f5c0:	b00e      	add	sp, #56	@ 0x38
 800f5c2:	bd10      	pop	{r4, pc}
 800f5c4:	230c      	movs	r3, #12
 800f5c6:	e7f2      	b.n	800f5ae <rmw_init_options_fini+0x6e>
 800f5c8:	230b      	movs	r3, #11
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	4770      	bx	lr
 800f5ce:	bf00      	nop
 800f5d0:	0801c0c0 	.word	0x0801c0c0
 800f5d4:	2001183c 	.word	0x2001183c

0800f5d8 <rmw_init>:
 800f5d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f5dc:	b083      	sub	sp, #12
 800f5de:	2800      	cmp	r0, #0
 800f5e0:	f000 80d3 	beq.w	800f78a <rmw_init+0x1b2>
 800f5e4:	460e      	mov	r6, r1
 800f5e6:	2900      	cmp	r1, #0
 800f5e8:	f000 80cf 	beq.w	800f78a <rmw_init+0x1b2>
 800f5ec:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800f5ee:	4605      	mov	r5, r0
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	f000 80ca 	beq.w	800f78a <rmw_init+0x1b2>
 800f5f6:	4b78      	ldr	r3, [pc, #480]	@ (800f7d8 <rmw_init+0x200>)
 800f5f8:	6880      	ldr	r0, [r0, #8]
 800f5fa:	681f      	ldr	r7, [r3, #0]
 800f5fc:	b128      	cbz	r0, 800f60a <rmw_init+0x32>
 800f5fe:	4639      	mov	r1, r7
 800f600:	f7f0 fe06 	bl	8000210 <strcmp>
 800f604:	2800      	cmp	r0, #0
 800f606:	f040 80ca 	bne.w	800f79e <rmw_init+0x1c6>
 800f60a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f60e:	4c73      	ldr	r4, [pc, #460]	@ (800f7dc <rmw_init+0x204>)
 800f610:	4973      	ldr	r1, [pc, #460]	@ (800f7e0 <rmw_init+0x208>)
 800f612:	4874      	ldr	r0, [pc, #464]	@ (800f7e4 <rmw_init+0x20c>)
 800f614:	60b7      	str	r7, [r6, #8]
 800f616:	e9c6 2300 	strd	r2, r3, [r6]
 800f61a:	68eb      	ldr	r3, [r5, #12]
 800f61c:	64b3      	str	r3, [r6, #72]	@ 0x48
 800f61e:	2201      	movs	r2, #1
 800f620:	f000 ff18 	bl	8010454 <rmw_uxrce_init_session_memory>
 800f624:	4620      	mov	r0, r4
 800f626:	4970      	ldr	r1, [pc, #448]	@ (800f7e8 <rmw_init+0x210>)
 800f628:	2204      	movs	r2, #4
 800f62a:	f000 ff53 	bl	80104d4 <rmw_uxrce_init_static_input_buffer_memory>
 800f62e:	f04f 0800 	mov.w	r8, #0
 800f632:	486c      	ldr	r0, [pc, #432]	@ (800f7e4 <rmw_init+0x20c>)
 800f634:	f884 800d 	strb.w	r8, [r4, #13]
 800f638:	f008 fa04 	bl	8017a44 <get_memory>
 800f63c:	2800      	cmp	r0, #0
 800f63e:	f000 80a9 	beq.w	800f794 <rmw_init+0x1bc>
 800f642:	6884      	ldr	r4, [r0, #8]
 800f644:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800f646:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800f648:	f890 c010 	ldrb.w	ip, [r0, #16]
 800f64c:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800f650:	9101      	str	r1, [sp, #4]
 800f652:	6a00      	ldr	r0, [r0, #32]
 800f654:	9000      	str	r0, [sp, #0]
 800f656:	f104 0910 	add.w	r9, r4, #16
 800f65a:	4661      	mov	r1, ip
 800f65c:	4648      	mov	r0, r9
 800f65e:	f002 f9a3 	bl	80119a8 <uxr_set_custom_transport_callbacks>
 800f662:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800f666:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800f66a:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800f66e:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800f672:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800f676:	495d      	ldr	r1, [pc, #372]	@ (800f7ec <rmw_init+0x214>)
 800f678:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800f67c:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800f680:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800f684:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800f688:	4859      	ldr	r0, [pc, #356]	@ (800f7f0 <rmw_init+0x218>)
 800f68a:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800f68e:	2201      	movs	r2, #1
 800f690:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800f692:	f000 febf 	bl	8010414 <rmw_uxrce_init_node_memory>
 800f696:	4957      	ldr	r1, [pc, #348]	@ (800f7f4 <rmw_init+0x21c>)
 800f698:	4857      	ldr	r0, [pc, #348]	@ (800f7f8 <rmw_init+0x220>)
 800f69a:	2205      	movs	r2, #5
 800f69c:	f000 fe9a 	bl	80103d4 <rmw_uxrce_init_subscription_memory>
 800f6a0:	4956      	ldr	r1, [pc, #344]	@ (800f7fc <rmw_init+0x224>)
 800f6a2:	4857      	ldr	r0, [pc, #348]	@ (800f800 <rmw_init+0x228>)
 800f6a4:	220a      	movs	r2, #10
 800f6a6:	f000 fe75 	bl	8010394 <rmw_uxrce_init_publisher_memory>
 800f6aa:	4956      	ldr	r1, [pc, #344]	@ (800f804 <rmw_init+0x22c>)
 800f6ac:	4856      	ldr	r0, [pc, #344]	@ (800f808 <rmw_init+0x230>)
 800f6ae:	2201      	movs	r2, #1
 800f6b0:	f000 fe30 	bl	8010314 <rmw_uxrce_init_service_memory>
 800f6b4:	4955      	ldr	r1, [pc, #340]	@ (800f80c <rmw_init+0x234>)
 800f6b6:	4856      	ldr	r0, [pc, #344]	@ (800f810 <rmw_init+0x238>)
 800f6b8:	2201      	movs	r2, #1
 800f6ba:	f000 fe4b 	bl	8010354 <rmw_uxrce_init_client_memory>
 800f6be:	4955      	ldr	r1, [pc, #340]	@ (800f814 <rmw_init+0x23c>)
 800f6c0:	4855      	ldr	r0, [pc, #340]	@ (800f818 <rmw_init+0x240>)
 800f6c2:	220f      	movs	r2, #15
 800f6c4:	f000 fee6 	bl	8010494 <rmw_uxrce_init_topic_memory>
 800f6c8:	4954      	ldr	r1, [pc, #336]	@ (800f81c <rmw_init+0x244>)
 800f6ca:	4855      	ldr	r0, [pc, #340]	@ (800f820 <rmw_init+0x248>)
 800f6cc:	2203      	movs	r2, #3
 800f6ce:	f000 ff21 	bl	8010514 <rmw_uxrce_init_init_options_impl_memory>
 800f6d2:	4954      	ldr	r1, [pc, #336]	@ (800f824 <rmw_init+0x24c>)
 800f6d4:	4854      	ldr	r0, [pc, #336]	@ (800f828 <rmw_init+0x250>)
 800f6d6:	2204      	movs	r2, #4
 800f6d8:	f000 ff3c 	bl	8010554 <rmw_uxrce_init_wait_set_memory>
 800f6dc:	4953      	ldr	r1, [pc, #332]	@ (800f82c <rmw_init+0x254>)
 800f6de:	4854      	ldr	r0, [pc, #336]	@ (800f830 <rmw_init+0x258>)
 800f6e0:	2204      	movs	r2, #4
 800f6e2:	f000 ff57 	bl	8010594 <rmw_uxrce_init_guard_condition_memory>
 800f6e6:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800f6e8:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800f6ea:	4642      	mov	r2, r8
 800f6ec:	f000 fde2 	bl	80102b4 <rmw_uxrce_transport_init>
 800f6f0:	4607      	mov	r7, r0
 800f6f2:	2800      	cmp	r0, #0
 800f6f4:	d158      	bne.n	800f7a8 <rmw_init+0x1d0>
 800f6f6:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800f6f8:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800f6fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f6fe:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800f702:	4628      	mov	r0, r5
 800f704:	f002 fc88 	bl	8012018 <uxr_init_session>
 800f708:	494a      	ldr	r1, [pc, #296]	@ (800f834 <rmw_init+0x25c>)
 800f70a:	4622      	mov	r2, r4
 800f70c:	4628      	mov	r0, r5
 800f70e:	f002 fca7 	bl	8012060 <uxr_set_topic_callback>
 800f712:	4949      	ldr	r1, [pc, #292]	@ (800f838 <rmw_init+0x260>)
 800f714:	463a      	mov	r2, r7
 800f716:	4628      	mov	r0, r5
 800f718:	f002 fc9e 	bl	8012058 <uxr_set_status_callback>
 800f71c:	4947      	ldr	r1, [pc, #284]	@ (800f83c <rmw_init+0x264>)
 800f71e:	463a      	mov	r2, r7
 800f720:	4628      	mov	r0, r5
 800f722:	f002 fca1 	bl	8012068 <uxr_set_request_callback>
 800f726:	4946      	ldr	r1, [pc, #280]	@ (800f840 <rmw_init+0x268>)
 800f728:	463a      	mov	r2, r7
 800f72a:	4628      	mov	r0, r5
 800f72c:	f002 fca0 	bl	8012070 <uxr_set_reply_callback>
 800f730:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800f734:	2304      	movs	r3, #4
 800f736:	0092      	lsls	r2, r2, #2
 800f738:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800f73c:	4628      	mov	r0, r5
 800f73e:	f002 fcd5 	bl	80120ec <uxr_create_input_reliable_stream>
 800f742:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800f746:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800f74a:	0092      	lsls	r2, r2, #2
 800f74c:	2304      	movs	r3, #4
 800f74e:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800f752:	4628      	mov	r0, r5
 800f754:	f002 fca2 	bl	801209c <uxr_create_output_reliable_stream>
 800f758:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800f75c:	4628      	mov	r0, r5
 800f75e:	f002 fcbf 	bl	80120e0 <uxr_create_input_best_effort_stream>
 800f762:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800f766:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800f76a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800f76e:	3114      	adds	r1, #20
 800f770:	4628      	mov	r0, r5
 800f772:	f002 fc81 	bl	8012078 <uxr_create_output_best_effort_stream>
 800f776:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800f77a:	4628      	mov	r0, r5
 800f77c:	f003 fa36 	bl	8012bec <uxr_create_session>
 800f780:	b1f8      	cbz	r0, 800f7c2 <rmw_init+0x1ea>
 800f782:	4638      	mov	r0, r7
 800f784:	b003      	add	sp, #12
 800f786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f78a:	270b      	movs	r7, #11
 800f78c:	4638      	mov	r0, r7
 800f78e:	b003      	add	sp, #12
 800f790:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f794:	2701      	movs	r7, #1
 800f796:	4638      	mov	r0, r7
 800f798:	b003      	add	sp, #12
 800f79a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f79e:	270c      	movs	r7, #12
 800f7a0:	4638      	mov	r0, r7
 800f7a2:	b003      	add	sp, #12
 800f7a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f7a8:	4648      	mov	r0, r9
 800f7aa:	f002 f93f 	bl	8011a2c <uxr_close_custom_transport>
 800f7ae:	480d      	ldr	r0, [pc, #52]	@ (800f7e4 <rmw_init+0x20c>)
 800f7b0:	4621      	mov	r1, r4
 800f7b2:	f008 f957 	bl	8017a64 <put_memory>
 800f7b6:	4638      	mov	r0, r7
 800f7b8:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800f7bc:	b003      	add	sp, #12
 800f7be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f7c2:	4648      	mov	r0, r9
 800f7c4:	f002 f932 	bl	8011a2c <uxr_close_custom_transport>
 800f7c8:	4806      	ldr	r0, [pc, #24]	@ (800f7e4 <rmw_init+0x20c>)
 800f7ca:	4621      	mov	r1, r4
 800f7cc:	f008 f94a 	bl	8017a64 <put_memory>
 800f7d0:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800f7d2:	2701      	movs	r7, #1
 800f7d4:	e7d5      	b.n	800f782 <rmw_init+0x1aa>
 800f7d6:	bf00      	nop
 800f7d8:	0801c0c0 	.word	0x0801c0c0
 800f7dc:	2001188c 	.word	0x2001188c
 800f7e0:	2000db38 	.word	0x2000db38
 800f7e4:	2001187c 	.word	0x2001187c
 800f7e8:	2000f0e0 	.word	0x2000f0e0
 800f7ec:	2000d15c 	.word	0x2000d15c
 800f7f0:	2001184c 	.word	0x2001184c
 800f7f4:	200111e0 	.word	0x200111e0
 800f7f8:	2001189c 	.word	0x2001189c
 800f7fc:	2000d200 	.word	0x2000d200
 800f800:	2001185c 	.word	0x2001185c
 800f804:	2000da70 	.word	0x2000da70
 800f808:	2001186c 	.word	0x2001186c
 800f80c:	2000cf90 	.word	0x2000cf90
 800f810:	2000cf7c 	.word	0x2000cf7c
 800f814:	20011618 	.word	0x20011618
 800f818:	200118ac 	.word	0x200118ac
 800f81c:	2000d0d8 	.word	0x2000d0d8
 800f820:	2001183c 	.word	0x2001183c
 800f824:	200117bc 	.word	0x200117bc
 800f828:	200118bc 	.word	0x200118bc
 800f82c:	2000d058 	.word	0x2000d058
 800f830:	2001182c 	.word	0x2001182c
 800f834:	0801787d 	.word	0x0801787d
 800f838:	08017875 	.word	0x08017875
 800f83c:	08017915 	.word	0x08017915
 800f840:	080179b1 	.word	0x080179b1

0800f844 <rmw_shutdown>:
 800f844:	b570      	push	{r4, r5, r6, lr}
 800f846:	b094      	sub	sp, #80	@ 0x50
 800f848:	2800      	cmp	r0, #0
 800f84a:	d050      	beq.n	800f8ee <rmw_shutdown+0xaa>
 800f84c:	4605      	mov	r5, r0
 800f84e:	6880      	ldr	r0, [r0, #8]
 800f850:	b128      	cbz	r0, 800f85e <rmw_shutdown+0x1a>
 800f852:	4b2b      	ldr	r3, [pc, #172]	@ (800f900 <rmw_shutdown+0xbc>)
 800f854:	6819      	ldr	r1, [r3, #0]
 800f856:	f7f0 fcdb 	bl	8000210 <strcmp>
 800f85a:	2800      	cmp	r0, #0
 800f85c:	d143      	bne.n	800f8e6 <rmw_shutdown+0xa2>
 800f85e:	4b29      	ldr	r3, [pc, #164]	@ (800f904 <rmw_shutdown+0xc0>)
 800f860:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800f862:	681c      	ldr	r4, [r3, #0]
 800f864:	2c00      	cmp	r4, #0
 800f866:	d046      	beq.n	800f8f6 <rmw_shutdown+0xb2>
 800f868:	2600      	movs	r6, #0
 800f86a:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800f86e:	6902      	ldr	r2, [r0, #16]
 800f870:	428a      	cmp	r2, r1
 800f872:	d024      	beq.n	800f8be <rmw_shutdown+0x7a>
 800f874:	2c00      	cmp	r4, #0
 800f876:	d1f8      	bne.n	800f86a <rmw_shutdown+0x26>
 800f878:	b189      	cbz	r1, 800f89e <rmw_shutdown+0x5a>
 800f87a:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800f87e:	789b      	ldrb	r3, [r3, #2]
 800f880:	2b01      	cmp	r3, #1
 800f882:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800f886:	bf14      	ite	ne
 800f888:	210a      	movne	r1, #10
 800f88a:	2100      	moveq	r1, #0
 800f88c:	f003 f986 	bl	8012b9c <uxr_delete_session_retries>
 800f890:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800f892:	f000 fe9f 	bl	80105d4 <rmw_uxrce_fini_session_memory>
 800f896:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800f898:	3010      	adds	r0, #16
 800f89a:	f002 f8c7 	bl	8011a2c <uxr_close_custom_transport>
 800f89e:	2300      	movs	r3, #0
 800f8a0:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800f8a2:	b1b6      	cbz	r6, 800f8d2 <rmw_shutdown+0x8e>
 800f8a4:	4d18      	ldr	r5, [pc, #96]	@ (800f908 <rmw_shutdown+0xc4>)
 800f8a6:	682c      	ldr	r4, [r5, #0]
 800f8a8:	b134      	cbz	r4, 800f8b8 <rmw_shutdown+0x74>
 800f8aa:	4621      	mov	r1, r4
 800f8ac:	6864      	ldr	r4, [r4, #4]
 800f8ae:	4628      	mov	r0, r5
 800f8b0:	f008 f8d8 	bl	8017a64 <put_memory>
 800f8b4:	2c00      	cmp	r4, #0
 800f8b6:	d1f8      	bne.n	800f8aa <rmw_shutdown+0x66>
 800f8b8:	4630      	mov	r0, r6
 800f8ba:	b014      	add	sp, #80	@ 0x50
 800f8bc:	bd70      	pop	{r4, r5, r6, pc}
 800f8be:	3018      	adds	r0, #24
 800f8c0:	f000 f8e8 	bl	800fa94 <rmw_destroy_node>
 800f8c4:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800f8c6:	4606      	mov	r6, r0
 800f8c8:	2c00      	cmp	r4, #0
 800f8ca:	d1ce      	bne.n	800f86a <rmw_shutdown+0x26>
 800f8cc:	2900      	cmp	r1, #0
 800f8ce:	d1d4      	bne.n	800f87a <rmw_shutdown+0x36>
 800f8d0:	e7e5      	b.n	800f89e <rmw_shutdown+0x5a>
 800f8d2:	4668      	mov	r0, sp
 800f8d4:	f007 fec4 	bl	8017660 <rmw_get_zero_initialized_context>
 800f8d8:	2250      	movs	r2, #80	@ 0x50
 800f8da:	4669      	mov	r1, sp
 800f8dc:	4628      	mov	r0, r5
 800f8de:	f00a fd72 	bl	801a3c6 <memcpy>
 800f8e2:	2600      	movs	r6, #0
 800f8e4:	e7de      	b.n	800f8a4 <rmw_shutdown+0x60>
 800f8e6:	260c      	movs	r6, #12
 800f8e8:	4630      	mov	r0, r6
 800f8ea:	b014      	add	sp, #80	@ 0x50
 800f8ec:	bd70      	pop	{r4, r5, r6, pc}
 800f8ee:	260b      	movs	r6, #11
 800f8f0:	4630      	mov	r0, r6
 800f8f2:	b014      	add	sp, #80	@ 0x50
 800f8f4:	bd70      	pop	{r4, r5, r6, pc}
 800f8f6:	2900      	cmp	r1, #0
 800f8f8:	d0eb      	beq.n	800f8d2 <rmw_shutdown+0x8e>
 800f8fa:	4626      	mov	r6, r4
 800f8fc:	e7bd      	b.n	800f87a <rmw_shutdown+0x36>
 800f8fe:	bf00      	nop
 800f900:	0801c0c0 	.word	0x0801c0c0
 800f904:	2001184c 	.word	0x2001184c
 800f908:	2001188c 	.word	0x2001188c

0800f90c <rmw_context_fini>:
 800f90c:	4b17      	ldr	r3, [pc, #92]	@ (800f96c <rmw_context_fini+0x60>)
 800f90e:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800f910:	b570      	push	{r4, r5, r6, lr}
 800f912:	681c      	ldr	r4, [r3, #0]
 800f914:	4605      	mov	r5, r0
 800f916:	b334      	cbz	r4, 800f966 <rmw_context_fini+0x5a>
 800f918:	2600      	movs	r6, #0
 800f91a:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800f91e:	6902      	ldr	r2, [r0, #16]
 800f920:	428a      	cmp	r2, r1
 800f922:	d018      	beq.n	800f956 <rmw_context_fini+0x4a>
 800f924:	2c00      	cmp	r4, #0
 800f926:	d1f8      	bne.n	800f91a <rmw_context_fini+0xe>
 800f928:	b189      	cbz	r1, 800f94e <rmw_context_fini+0x42>
 800f92a:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800f92e:	789b      	ldrb	r3, [r3, #2]
 800f930:	2b01      	cmp	r3, #1
 800f932:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800f936:	bf14      	ite	ne
 800f938:	210a      	movne	r1, #10
 800f93a:	2100      	moveq	r1, #0
 800f93c:	f003 f92e 	bl	8012b9c <uxr_delete_session_retries>
 800f940:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800f942:	f000 fe47 	bl	80105d4 <rmw_uxrce_fini_session_memory>
 800f946:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800f948:	3010      	adds	r0, #16
 800f94a:	f002 f86f 	bl	8011a2c <uxr_close_custom_transport>
 800f94e:	2300      	movs	r3, #0
 800f950:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800f952:	4630      	mov	r0, r6
 800f954:	bd70      	pop	{r4, r5, r6, pc}
 800f956:	3018      	adds	r0, #24
 800f958:	f000 f89c 	bl	800fa94 <rmw_destroy_node>
 800f95c:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800f95e:	4606      	mov	r6, r0
 800f960:	2c00      	cmp	r4, #0
 800f962:	d1da      	bne.n	800f91a <rmw_context_fini+0xe>
 800f964:	e7e0      	b.n	800f928 <rmw_context_fini+0x1c>
 800f966:	4626      	mov	r6, r4
 800f968:	e7de      	b.n	800f928 <rmw_context_fini+0x1c>
 800f96a:	bf00      	nop
 800f96c:	2001184c 	.word	0x2001184c

0800f970 <create_node>:
 800f970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f974:	b083      	sub	sp, #12
 800f976:	2b00      	cmp	r3, #0
 800f978:	d05f      	beq.n	800fa3a <create_node+0xca>
 800f97a:	4606      	mov	r6, r0
 800f97c:	4835      	ldr	r0, [pc, #212]	@ (800fa54 <create_node+0xe4>)
 800f97e:	460f      	mov	r7, r1
 800f980:	4690      	mov	r8, r2
 800f982:	461d      	mov	r5, r3
 800f984:	f008 f85e 	bl	8017a44 <get_memory>
 800f988:	2800      	cmp	r0, #0
 800f98a:	d056      	beq.n	800fa3a <create_node+0xca>
 800f98c:	6884      	ldr	r4, [r0, #8]
 800f98e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800f990:	6123      	str	r3, [r4, #16]
 800f992:	f008 f8bf 	bl	8017b14 <rmw_get_implementation_identifier>
 800f996:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800f99a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800f99e:	f8c4 9020 	str.w	r9, [r4, #32]
 800f9a2:	4630      	mov	r0, r6
 800f9a4:	f7f0 fc3e 	bl	8000224 <strlen>
 800f9a8:	1c42      	adds	r2, r0, #1
 800f9aa:	2a3c      	cmp	r2, #60	@ 0x3c
 800f9ac:	f104 0518 	add.w	r5, r4, #24
 800f9b0:	d840      	bhi.n	800fa34 <create_node+0xc4>
 800f9b2:	4648      	mov	r0, r9
 800f9b4:	4631      	mov	r1, r6
 800f9b6:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800f9ba:	f00a fd04 	bl	801a3c6 <memcpy>
 800f9be:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800f9c2:	4638      	mov	r0, r7
 800f9c4:	f7f0 fc2e 	bl	8000224 <strlen>
 800f9c8:	1c42      	adds	r2, r0, #1
 800f9ca:	2a3c      	cmp	r2, #60	@ 0x3c
 800f9cc:	d832      	bhi.n	800fa34 <create_node+0xc4>
 800f9ce:	4639      	mov	r1, r7
 800f9d0:	4648      	mov	r0, r9
 800f9d2:	f00a fcf8 	bl	801a3c6 <memcpy>
 800f9d6:	6923      	ldr	r3, [r4, #16]
 800f9d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f9dc:	2101      	movs	r1, #1
 800f9de:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800f9e2:	1842      	adds	r2, r0, r1
 800f9e4:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800f9e8:	f002 f824 	bl	8011a34 <uxr_object_id>
 800f9ec:	6160      	str	r0, [r4, #20]
 800f9ee:	783b      	ldrb	r3, [r7, #0]
 800f9f0:	2b2f      	cmp	r3, #47	@ 0x2f
 800f9f2:	d127      	bne.n	800fa44 <create_node+0xd4>
 800f9f4:	787b      	ldrb	r3, [r7, #1]
 800f9f6:	bb2b      	cbnz	r3, 800fa44 <create_node+0xd4>
 800f9f8:	4a17      	ldr	r2, [pc, #92]	@ (800fa58 <create_node+0xe8>)
 800f9fa:	4818      	ldr	r0, [pc, #96]	@ (800fa5c <create_node+0xec>)
 800f9fc:	4633      	mov	r3, r6
 800f9fe:	213c      	movs	r1, #60	@ 0x3c
 800fa00:	f00a faa4 	bl	8019f4c <sniprintf>
 800fa04:	6920      	ldr	r0, [r4, #16]
 800fa06:	4915      	ldr	r1, [pc, #84]	@ (800fa5c <create_node+0xec>)
 800fa08:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800fa0c:	9100      	str	r1, [sp, #0]
 800fa0e:	2106      	movs	r1, #6
 800fa10:	9101      	str	r1, [sp, #4]
 800fa12:	6811      	ldr	r1, [r2, #0]
 800fa14:	6962      	ldr	r2, [r4, #20]
 800fa16:	fa1f f388 	uxth.w	r3, r8
 800fa1a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fa1e:	f001 fd91 	bl	8011544 <uxr_buffer_create_participant_bin>
 800fa22:	4602      	mov	r2, r0
 800fa24:	6920      	ldr	r0, [r4, #16]
 800fa26:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800fa2a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800fa2e:	f000 ff49 	bl	80108c4 <run_xrce_session>
 800fa32:	b918      	cbnz	r0, 800fa3c <create_node+0xcc>
 800fa34:	4628      	mov	r0, r5
 800fa36:	f000 fdd3 	bl	80105e0 <rmw_uxrce_fini_node_memory>
 800fa3a:	2500      	movs	r5, #0
 800fa3c:	4628      	mov	r0, r5
 800fa3e:	b003      	add	sp, #12
 800fa40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa44:	4a06      	ldr	r2, [pc, #24]	@ (800fa60 <create_node+0xf0>)
 800fa46:	9600      	str	r6, [sp, #0]
 800fa48:	463b      	mov	r3, r7
 800fa4a:	213c      	movs	r1, #60	@ 0x3c
 800fa4c:	4803      	ldr	r0, [pc, #12]	@ (800fa5c <create_node+0xec>)
 800fa4e:	f00a fa7d 	bl	8019f4c <sniprintf>
 800fa52:	e7d7      	b.n	800fa04 <create_node+0x94>
 800fa54:	2001184c 	.word	0x2001184c
 800fa58:	0801b724 	.word	0x0801b724
 800fa5c:	2000cf40 	.word	0x2000cf40
 800fa60:	0801b3ec 	.word	0x0801b3ec

0800fa64 <rmw_create_node>:
 800fa64:	b199      	cbz	r1, 800fa8e <rmw_create_node+0x2a>
 800fa66:	780b      	ldrb	r3, [r1, #0]
 800fa68:	468c      	mov	ip, r1
 800fa6a:	b183      	cbz	r3, 800fa8e <rmw_create_node+0x2a>
 800fa6c:	b410      	push	{r4}
 800fa6e:	4614      	mov	r4, r2
 800fa70:	b14a      	cbz	r2, 800fa86 <rmw_create_node+0x22>
 800fa72:	7813      	ldrb	r3, [r2, #0]
 800fa74:	b13b      	cbz	r3, 800fa86 <rmw_create_node+0x22>
 800fa76:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800fa78:	4603      	mov	r3, r0
 800fa7a:	4621      	mov	r1, r4
 800fa7c:	4660      	mov	r0, ip
 800fa7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa82:	f7ff bf75 	b.w	800f970 <create_node>
 800fa86:	2000      	movs	r0, #0
 800fa88:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa8c:	4770      	bx	lr
 800fa8e:	2000      	movs	r0, #0
 800fa90:	4770      	bx	lr
 800fa92:	bf00      	nop

0800fa94 <rmw_destroy_node>:
 800fa94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa96:	b328      	cbz	r0, 800fae4 <rmw_destroy_node+0x50>
 800fa98:	4607      	mov	r7, r0
 800fa9a:	6800      	ldr	r0, [r0, #0]
 800fa9c:	b120      	cbz	r0, 800faa8 <rmw_destroy_node+0x14>
 800fa9e:	4b36      	ldr	r3, [pc, #216]	@ (800fb78 <rmw_destroy_node+0xe4>)
 800faa0:	6819      	ldr	r1, [r3, #0]
 800faa2:	f7f0 fbb5 	bl	8000210 <strcmp>
 800faa6:	b9e8      	cbnz	r0, 800fae4 <rmw_destroy_node+0x50>
 800faa8:	687d      	ldr	r5, [r7, #4]
 800faaa:	b1dd      	cbz	r5, 800fae4 <rmw_destroy_node+0x50>
 800faac:	4b33      	ldr	r3, [pc, #204]	@ (800fb7c <rmw_destroy_node+0xe8>)
 800faae:	681c      	ldr	r4, [r3, #0]
 800fab0:	2c00      	cmp	r4, #0
 800fab2:	d05f      	beq.n	800fb74 <rmw_destroy_node+0xe0>
 800fab4:	2600      	movs	r6, #0
 800fab6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800faba:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800fabe:	429d      	cmp	r5, r3
 800fac0:	d013      	beq.n	800faea <rmw_destroy_node+0x56>
 800fac2:	2c00      	cmp	r4, #0
 800fac4:	d1f7      	bne.n	800fab6 <rmw_destroy_node+0x22>
 800fac6:	4b2e      	ldr	r3, [pc, #184]	@ (800fb80 <rmw_destroy_node+0xec>)
 800fac8:	681c      	ldr	r4, [r3, #0]
 800faca:	b1c4      	cbz	r4, 800fafe <rmw_destroy_node+0x6a>
 800facc:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800fad0:	6a0b      	ldr	r3, [r1, #32]
 800fad2:	429d      	cmp	r5, r3
 800fad4:	d1f9      	bne.n	800faca <rmw_destroy_node+0x36>
 800fad6:	317c      	adds	r1, #124	@ 0x7c
 800fad8:	4638      	mov	r0, r7
 800fada:	f000 fb37 	bl	801014c <rmw_destroy_subscription>
 800fade:	2801      	cmp	r0, #1
 800fae0:	4606      	mov	r6, r0
 800fae2:	d1f2      	bne.n	800faca <rmw_destroy_node+0x36>
 800fae4:	2601      	movs	r6, #1
 800fae6:	4630      	mov	r0, r6
 800fae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800faea:	3184      	adds	r1, #132	@ 0x84
 800faec:	4638      	mov	r0, r7
 800faee:	f000 f9a5 	bl	800fe3c <rmw_destroy_publisher>
 800faf2:	2801      	cmp	r0, #1
 800faf4:	4606      	mov	r6, r0
 800faf6:	d0f5      	beq.n	800fae4 <rmw_destroy_node+0x50>
 800faf8:	2c00      	cmp	r4, #0
 800fafa:	d1dc      	bne.n	800fab6 <rmw_destroy_node+0x22>
 800fafc:	e7e3      	b.n	800fac6 <rmw_destroy_node+0x32>
 800fafe:	4b21      	ldr	r3, [pc, #132]	@ (800fb84 <rmw_destroy_node+0xf0>)
 800fb00:	681c      	ldr	r4, [r3, #0]
 800fb02:	b16c      	cbz	r4, 800fb20 <rmw_destroy_node+0x8c>
 800fb04:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800fb08:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800fb0a:	429d      	cmp	r5, r3
 800fb0c:	d1f9      	bne.n	800fb02 <rmw_destroy_node+0x6e>
 800fb0e:	317c      	adds	r1, #124	@ 0x7c
 800fb10:	4638      	mov	r0, r7
 800fb12:	f000 f9e5 	bl	800fee0 <rmw_destroy_service>
 800fb16:	2801      	cmp	r0, #1
 800fb18:	4606      	mov	r6, r0
 800fb1a:	d0e3      	beq.n	800fae4 <rmw_destroy_node+0x50>
 800fb1c:	2c00      	cmp	r4, #0
 800fb1e:	d1f1      	bne.n	800fb04 <rmw_destroy_node+0x70>
 800fb20:	4b19      	ldr	r3, [pc, #100]	@ (800fb88 <rmw_destroy_node+0xf4>)
 800fb22:	681c      	ldr	r4, [r3, #0]
 800fb24:	b16c      	cbz	r4, 800fb42 <rmw_destroy_node+0xae>
 800fb26:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800fb2a:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800fb2c:	429d      	cmp	r5, r3
 800fb2e:	d1f9      	bne.n	800fb24 <rmw_destroy_node+0x90>
 800fb30:	317c      	adds	r1, #124	@ 0x7c
 800fb32:	4638      	mov	r0, r7
 800fb34:	f007 ffaa 	bl	8017a8c <rmw_destroy_client>
 800fb38:	2801      	cmp	r0, #1
 800fb3a:	4606      	mov	r6, r0
 800fb3c:	d0d2      	beq.n	800fae4 <rmw_destroy_node+0x50>
 800fb3e:	2c00      	cmp	r4, #0
 800fb40:	d1f1      	bne.n	800fb26 <rmw_destroy_node+0x92>
 800fb42:	6928      	ldr	r0, [r5, #16]
 800fb44:	696a      	ldr	r2, [r5, #20]
 800fb46:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800fb4a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fb4e:	6819      	ldr	r1, [r3, #0]
 800fb50:	f001 fcac 	bl	80114ac <uxr_buffer_delete_entity>
 800fb54:	4602      	mov	r2, r0
 800fb56:	6928      	ldr	r0, [r5, #16]
 800fb58:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fb5c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fb60:	f000 feb0 	bl	80108c4 <run_xrce_session>
 800fb64:	2800      	cmp	r0, #0
 800fb66:	bf08      	it	eq
 800fb68:	2602      	moveq	r6, #2
 800fb6a:	4638      	mov	r0, r7
 800fb6c:	f000 fd38 	bl	80105e0 <rmw_uxrce_fini_node_memory>
 800fb70:	4630      	mov	r0, r6
 800fb72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb74:	4626      	mov	r6, r4
 800fb76:	e7a6      	b.n	800fac6 <rmw_destroy_node+0x32>
 800fb78:	0801c0c0 	.word	0x0801c0c0
 800fb7c:	2001185c 	.word	0x2001185c
 800fb80:	2001189c 	.word	0x2001189c
 800fb84:	2001186c 	.word	0x2001186c
 800fb88:	2000cf7c 	.word	0x2000cf7c

0800fb8c <rmw_node_get_graph_guard_condition>:
 800fb8c:	6843      	ldr	r3, [r0, #4]
 800fb8e:	6918      	ldr	r0, [r3, #16]
 800fb90:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800fb94:	4770      	bx	lr
 800fb96:	bf00      	nop

0800fb98 <flush_session>:
 800fb98:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800fb9a:	f002 be8d 	b.w	80128b8 <uxr_run_session_until_confirm_delivery>
 800fb9e:	bf00      	nop

0800fba0 <rmw_publish>:
 800fba0:	2800      	cmp	r0, #0
 800fba2:	d053      	beq.n	800fc4c <rmw_publish+0xac>
 800fba4:	b570      	push	{r4, r5, r6, lr}
 800fba6:	460d      	mov	r5, r1
 800fba8:	b08e      	sub	sp, #56	@ 0x38
 800fbaa:	2900      	cmp	r1, #0
 800fbac:	d04b      	beq.n	800fc46 <rmw_publish+0xa6>
 800fbae:	4604      	mov	r4, r0
 800fbb0:	6800      	ldr	r0, [r0, #0]
 800fbb2:	f000 ff07 	bl	80109c4 <is_uxrce_rmw_identifier_valid>
 800fbb6:	2800      	cmp	r0, #0
 800fbb8:	d045      	beq.n	800fc46 <rmw_publish+0xa6>
 800fbba:	6866      	ldr	r6, [r4, #4]
 800fbbc:	2e00      	cmp	r6, #0
 800fbbe:	d042      	beq.n	800fc46 <rmw_publish+0xa6>
 800fbc0:	69b4      	ldr	r4, [r6, #24]
 800fbc2:	4628      	mov	r0, r5
 800fbc4:	6923      	ldr	r3, [r4, #16]
 800fbc6:	4798      	blx	r3
 800fbc8:	69f3      	ldr	r3, [r6, #28]
 800fbca:	9005      	str	r0, [sp, #20]
 800fbcc:	b113      	cbz	r3, 800fbd4 <rmw_publish+0x34>
 800fbce:	a805      	add	r0, sp, #20
 800fbd0:	4798      	blx	r3
 800fbd2:	9805      	ldr	r0, [sp, #20]
 800fbd4:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800fbd8:	691b      	ldr	r3, [r3, #16]
 800fbda:	9000      	str	r0, [sp, #0]
 800fbdc:	6972      	ldr	r2, [r6, #20]
 800fbde:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800fbe0:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800fbe4:	ab06      	add	r3, sp, #24
 800fbe6:	f004 f90f 	bl	8013e08 <uxr_prepare_output_stream>
 800fbea:	b1d8      	cbz	r0, 800fc24 <rmw_publish+0x84>
 800fbec:	68a3      	ldr	r3, [r4, #8]
 800fbee:	a906      	add	r1, sp, #24
 800fbf0:	4628      	mov	r0, r5
 800fbf2:	4798      	blx	r3
 800fbf4:	6a33      	ldr	r3, [r6, #32]
 800fbf6:	4604      	mov	r4, r0
 800fbf8:	b10b      	cbz	r3, 800fbfe <rmw_publish+0x5e>
 800fbfa:	a806      	add	r0, sp, #24
 800fbfc:	4798      	blx	r3
 800fbfe:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800fc02:	2b01      	cmp	r3, #1
 800fc04:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800fc08:	d022      	beq.n	800fc50 <rmw_publish+0xb0>
 800fc0a:	6918      	ldr	r0, [r3, #16]
 800fc0c:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800fc0e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fc12:	f002 fe51 	bl	80128b8 <uxr_run_session_until_confirm_delivery>
 800fc16:	4020      	ands	r0, r4
 800fc18:	b2c4      	uxtb	r4, r0
 800fc1a:	f084 0001 	eor.w	r0, r4, #1
 800fc1e:	b2c0      	uxtb	r0, r0
 800fc20:	b00e      	add	sp, #56	@ 0x38
 800fc22:	bd70      	pop	{r4, r5, r6, pc}
 800fc24:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800fc28:	6918      	ldr	r0, [r3, #16]
 800fc2a:	9b05      	ldr	r3, [sp, #20]
 800fc2c:	9300      	str	r3, [sp, #0]
 800fc2e:	4b0b      	ldr	r3, [pc, #44]	@ (800fc5c <rmw_publish+0xbc>)
 800fc30:	9301      	str	r3, [sp, #4]
 800fc32:	9602      	str	r6, [sp, #8]
 800fc34:	6972      	ldr	r2, [r6, #20]
 800fc36:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800fc38:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fc3c:	ab06      	add	r3, sp, #24
 800fc3e:	f004 f913 	bl	8013e68 <uxr_prepare_output_stream_fragmented>
 800fc42:	2800      	cmp	r0, #0
 800fc44:	d1d2      	bne.n	800fbec <rmw_publish+0x4c>
 800fc46:	2001      	movs	r0, #1
 800fc48:	b00e      	add	sp, #56	@ 0x38
 800fc4a:	bd70      	pop	{r4, r5, r6, pc}
 800fc4c:	2001      	movs	r0, #1
 800fc4e:	4770      	bx	lr
 800fc50:	6918      	ldr	r0, [r3, #16]
 800fc52:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fc56:	f002 fa6f 	bl	8012138 <uxr_flash_output_streams>
 800fc5a:	e7de      	b.n	800fc1a <rmw_publish+0x7a>
 800fc5c:	0800fb99 	.word	0x0800fb99

0800fc60 <rmw_create_publisher>:
 800fc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc64:	b087      	sub	sp, #28
 800fc66:	2800      	cmp	r0, #0
 800fc68:	f000 80cc 	beq.w	800fe04 <rmw_create_publisher+0x1a4>
 800fc6c:	460e      	mov	r6, r1
 800fc6e:	2900      	cmp	r1, #0
 800fc70:	f000 80c8 	beq.w	800fe04 <rmw_create_publisher+0x1a4>
 800fc74:	4604      	mov	r4, r0
 800fc76:	6800      	ldr	r0, [r0, #0]
 800fc78:	4615      	mov	r5, r2
 800fc7a:	4698      	mov	r8, r3
 800fc7c:	f000 fea2 	bl	80109c4 <is_uxrce_rmw_identifier_valid>
 800fc80:	2800      	cmp	r0, #0
 800fc82:	f000 80bf 	beq.w	800fe04 <rmw_create_publisher+0x1a4>
 800fc86:	2d00      	cmp	r5, #0
 800fc88:	f000 80bc 	beq.w	800fe04 <rmw_create_publisher+0x1a4>
 800fc8c:	782b      	ldrb	r3, [r5, #0]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	f000 80b8 	beq.w	800fe04 <rmw_create_publisher+0x1a4>
 800fc94:	f1b8 0f00 	cmp.w	r8, #0
 800fc98:	f000 80b4 	beq.w	800fe04 <rmw_create_publisher+0x1a4>
 800fc9c:	485c      	ldr	r0, [pc, #368]	@ (800fe10 <rmw_create_publisher+0x1b0>)
 800fc9e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800fca2:	f007 fecf 	bl	8017a44 <get_memory>
 800fca6:	2800      	cmp	r0, #0
 800fca8:	f000 80ac 	beq.w	800fe04 <rmw_create_publisher+0x1a4>
 800fcac:	6884      	ldr	r4, [r0, #8]
 800fcae:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800fcb2:	f007 ff2f 	bl	8017b14 <rmw_get_implementation_identifier>
 800fcb6:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800fcba:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800fcbe:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800fcc2:	4628      	mov	r0, r5
 800fcc4:	f7f0 faae 	bl	8000224 <strlen>
 800fcc8:	3001      	adds	r0, #1
 800fcca:	283c      	cmp	r0, #60	@ 0x3c
 800fccc:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800fcd0:	f200 8091 	bhi.w	800fdf6 <rmw_create_publisher+0x196>
 800fcd4:	4a4f      	ldr	r2, [pc, #316]	@ (800fe14 <rmw_create_publisher+0x1b4>)
 800fcd6:	462b      	mov	r3, r5
 800fcd8:	213c      	movs	r1, #60	@ 0x3c
 800fcda:	4650      	mov	r0, sl
 800fcdc:	f00a f936 	bl	8019f4c <sniprintf>
 800fce0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fce4:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800fce6:	4641      	mov	r1, r8
 800fce8:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800fcec:	2250      	movs	r2, #80	@ 0x50
 800fcee:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800fcf2:	f00a fb68 	bl	801a3c6 <memcpy>
 800fcf6:	f898 3008 	ldrb.w	r3, [r8, #8]
 800fcfa:	4947      	ldr	r1, [pc, #284]	@ (800fe18 <rmw_create_publisher+0x1b8>)
 800fcfc:	2b02      	cmp	r3, #2
 800fcfe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fd02:	bf0c      	ite	eq
 800fd04:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800fd08:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800fd0c:	67a3      	str	r3, [r4, #120]	@ 0x78
 800fd0e:	2300      	movs	r3, #0
 800fd10:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800fd14:	4630      	mov	r0, r6
 800fd16:	f000 fe63 	bl	80109e0 <get_message_typesupport_handle>
 800fd1a:	2800      	cmp	r0, #0
 800fd1c:	d06b      	beq.n	800fdf6 <rmw_create_publisher+0x196>
 800fd1e:	6842      	ldr	r2, [r0, #4]
 800fd20:	61a2      	str	r2, [r4, #24]
 800fd22:	2a00      	cmp	r2, #0
 800fd24:	d067      	beq.n	800fdf6 <rmw_create_publisher+0x196>
 800fd26:	4629      	mov	r1, r5
 800fd28:	4643      	mov	r3, r8
 800fd2a:	4648      	mov	r0, r9
 800fd2c:	f007 ff20 	bl	8017b70 <create_topic>
 800fd30:	6260      	str	r0, [r4, #36]	@ 0x24
 800fd32:	2800      	cmp	r0, #0
 800fd34:	d063      	beq.n	800fdfe <rmw_create_publisher+0x19e>
 800fd36:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fd3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800fd3e:	2103      	movs	r1, #3
 800fd40:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800fd44:	1c42      	adds	r2, r0, #1
 800fd46:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800fd4a:	f001 fe73 	bl	8011a34 <uxr_object_id>
 800fd4e:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800fd52:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fd56:	6120      	str	r0, [r4, #16]
 800fd58:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800fd5c:	6910      	ldr	r0, [r2, #16]
 800fd5e:	2506      	movs	r5, #6
 800fd60:	9500      	str	r5, [sp, #0]
 800fd62:	6819      	ldr	r1, [r3, #0]
 800fd64:	6922      	ldr	r2, [r4, #16]
 800fd66:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800fd6a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fd6e:	f001 fc51 	bl	8011614 <uxr_buffer_create_publisher_bin>
 800fd72:	4602      	mov	r2, r0
 800fd74:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800fd78:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800fd7c:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800fd80:	f000 fda0 	bl	80108c4 <run_xrce_session>
 800fd84:	b3b8      	cbz	r0, 800fdf6 <rmw_create_publisher+0x196>
 800fd86:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fd8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800fd8e:	2105      	movs	r1, #5
 800fd90:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800fd94:	1c42      	adds	r2, r0, #1
 800fd96:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800fd9a:	f001 fe4b 	bl	8011a34 <uxr_object_id>
 800fd9e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800fda2:	6160      	str	r0, [r4, #20]
 800fda4:	691e      	ldr	r6, [r3, #16]
 800fda6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fdaa:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800fdae:	f10d 0a10 	add.w	sl, sp, #16
 800fdb2:	4641      	mov	r1, r8
 800fdb4:	4650      	mov	r0, sl
 800fdb6:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800fdba:	f000 fd9f 	bl	80108fc <convert_qos_profile>
 800fdbe:	9503      	str	r5, [sp, #12]
 800fdc0:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800fdc4:	9001      	str	r0, [sp, #4]
 800fdc6:	f8ad 1008 	strh.w	r1, [sp, #8]
 800fdca:	f8db 3010 	ldr.w	r3, [fp, #16]
 800fdce:	9300      	str	r3, [sp, #0]
 800fdd0:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800fdd4:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800fdd8:	f8d8 1000 	ldr.w	r1, [r8]
 800fddc:	4630      	mov	r0, r6
 800fdde:	f001 fc79 	bl	80116d4 <uxr_buffer_create_datawriter_bin>
 800fde2:	4602      	mov	r2, r0
 800fde4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800fde8:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800fdec:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800fdf0:	f000 fd68 	bl	80108c4 <run_xrce_session>
 800fdf4:	b938      	cbnz	r0, 800fe06 <rmw_create_publisher+0x1a6>
 800fdf6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800fdf8:	b108      	cbz	r0, 800fdfe <rmw_create_publisher+0x19e>
 800fdfa:	f000 fc61 	bl	80106c0 <rmw_uxrce_fini_topic_memory>
 800fdfe:	4638      	mov	r0, r7
 800fe00:	f000 fc06 	bl	8010610 <rmw_uxrce_fini_publisher_memory>
 800fe04:	2700      	movs	r7, #0
 800fe06:	4638      	mov	r0, r7
 800fe08:	b007      	add	sp, #28
 800fe0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe0e:	bf00      	nop
 800fe10:	2001185c 	.word	0x2001185c
 800fe14:	0801b724 	.word	0x0801b724
 800fe18:	0801b258 	.word	0x0801b258

0800fe1c <rmw_publisher_get_actual_qos>:
 800fe1c:	b150      	cbz	r0, 800fe34 <rmw_publisher_get_actual_qos+0x18>
 800fe1e:	b508      	push	{r3, lr}
 800fe20:	460b      	mov	r3, r1
 800fe22:	b149      	cbz	r1, 800fe38 <rmw_publisher_get_actual_qos+0x1c>
 800fe24:	6841      	ldr	r1, [r0, #4]
 800fe26:	2250      	movs	r2, #80	@ 0x50
 800fe28:	3128      	adds	r1, #40	@ 0x28
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	f00a facb 	bl	801a3c6 <memcpy>
 800fe30:	2000      	movs	r0, #0
 800fe32:	bd08      	pop	{r3, pc}
 800fe34:	200b      	movs	r0, #11
 800fe36:	4770      	bx	lr
 800fe38:	200b      	movs	r0, #11
 800fe3a:	bd08      	pop	{r3, pc}

0800fe3c <rmw_destroy_publisher>:
 800fe3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe3e:	b128      	cbz	r0, 800fe4c <rmw_destroy_publisher+0x10>
 800fe40:	4604      	mov	r4, r0
 800fe42:	6800      	ldr	r0, [r0, #0]
 800fe44:	460d      	mov	r5, r1
 800fe46:	f000 fdbd 	bl	80109c4 <is_uxrce_rmw_identifier_valid>
 800fe4a:	b910      	cbnz	r0, 800fe52 <rmw_destroy_publisher+0x16>
 800fe4c:	2401      	movs	r4, #1
 800fe4e:	4620      	mov	r0, r4
 800fe50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe52:	6863      	ldr	r3, [r4, #4]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d0f9      	beq.n	800fe4c <rmw_destroy_publisher+0x10>
 800fe58:	2d00      	cmp	r5, #0
 800fe5a:	d0f7      	beq.n	800fe4c <rmw_destroy_publisher+0x10>
 800fe5c:	6828      	ldr	r0, [r5, #0]
 800fe5e:	f000 fdb1 	bl	80109c4 <is_uxrce_rmw_identifier_valid>
 800fe62:	2800      	cmp	r0, #0
 800fe64:	d0f2      	beq.n	800fe4c <rmw_destroy_publisher+0x10>
 800fe66:	686c      	ldr	r4, [r5, #4]
 800fe68:	2c00      	cmp	r4, #0
 800fe6a:	d0ef      	beq.n	800fe4c <rmw_destroy_publisher+0x10>
 800fe6c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800fe6e:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800fe72:	f007 fecd 	bl	8017c10 <destroy_topic>
 800fe76:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800fe7a:	6962      	ldr	r2, [r4, #20]
 800fe7c:	6918      	ldr	r0, [r3, #16]
 800fe7e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800fe82:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fe86:	6819      	ldr	r1, [r3, #0]
 800fe88:	f001 fb10 	bl	80114ac <uxr_buffer_delete_entity>
 800fe8c:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800fe90:	6922      	ldr	r2, [r4, #16]
 800fe92:	691b      	ldr	r3, [r3, #16]
 800fe94:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800fe98:	4604      	mov	r4, r0
 800fe9a:	6809      	ldr	r1, [r1, #0]
 800fe9c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800fea0:	f001 fb04 	bl	80114ac <uxr_buffer_delete_entity>
 800fea4:	693e      	ldr	r6, [r7, #16]
 800fea6:	4622      	mov	r2, r4
 800fea8:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800feac:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800feb0:	4604      	mov	r4, r0
 800feb2:	4630      	mov	r0, r6
 800feb4:	f000 fd06 	bl	80108c4 <run_xrce_session>
 800feb8:	693e      	ldr	r6, [r7, #16]
 800feba:	4622      	mov	r2, r4
 800febc:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800fec0:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800fec4:	4604      	mov	r4, r0
 800fec6:	4630      	mov	r0, r6
 800fec8:	f000 fcfc 	bl	80108c4 <run_xrce_session>
 800fecc:	b12c      	cbz	r4, 800feda <rmw_destroy_publisher+0x9e>
 800fece:	b120      	cbz	r0, 800feda <rmw_destroy_publisher+0x9e>
 800fed0:	2400      	movs	r4, #0
 800fed2:	4628      	mov	r0, r5
 800fed4:	f000 fb9c 	bl	8010610 <rmw_uxrce_fini_publisher_memory>
 800fed8:	e7b9      	b.n	800fe4e <rmw_destroy_publisher+0x12>
 800feda:	2402      	movs	r4, #2
 800fedc:	e7f9      	b.n	800fed2 <rmw_destroy_publisher+0x96>
 800fede:	bf00      	nop

0800fee0 <rmw_destroy_service>:
 800fee0:	b570      	push	{r4, r5, r6, lr}
 800fee2:	b128      	cbz	r0, 800fef0 <rmw_destroy_service+0x10>
 800fee4:	4604      	mov	r4, r0
 800fee6:	6800      	ldr	r0, [r0, #0]
 800fee8:	460d      	mov	r5, r1
 800feea:	f000 fd6b 	bl	80109c4 <is_uxrce_rmw_identifier_valid>
 800feee:	b910      	cbnz	r0, 800fef6 <rmw_destroy_service+0x16>
 800fef0:	2401      	movs	r4, #1
 800fef2:	4620      	mov	r0, r4
 800fef4:	bd70      	pop	{r4, r5, r6, pc}
 800fef6:	6863      	ldr	r3, [r4, #4]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d0f9      	beq.n	800fef0 <rmw_destroy_service+0x10>
 800fefc:	2d00      	cmp	r5, #0
 800fefe:	d0f7      	beq.n	800fef0 <rmw_destroy_service+0x10>
 800ff00:	6828      	ldr	r0, [r5, #0]
 800ff02:	f000 fd5f 	bl	80109c4 <is_uxrce_rmw_identifier_valid>
 800ff06:	2800      	cmp	r0, #0
 800ff08:	d0f2      	beq.n	800fef0 <rmw_destroy_service+0x10>
 800ff0a:	686e      	ldr	r6, [r5, #4]
 800ff0c:	2e00      	cmp	r6, #0
 800ff0e:	d0ef      	beq.n	800fef0 <rmw_destroy_service+0x10>
 800ff10:	6864      	ldr	r4, [r4, #4]
 800ff12:	6932      	ldr	r2, [r6, #16]
 800ff14:	6920      	ldr	r0, [r4, #16]
 800ff16:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ff1a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ff1e:	6819      	ldr	r1, [r3, #0]
 800ff20:	f001 fef6 	bl	8011d10 <uxr_buffer_cancel_data>
 800ff24:	4602      	mov	r2, r0
 800ff26:	6920      	ldr	r0, [r4, #16]
 800ff28:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ff2c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ff30:	f000 fcc8 	bl	80108c4 <run_xrce_session>
 800ff34:	6920      	ldr	r0, [r4, #16]
 800ff36:	6932      	ldr	r2, [r6, #16]
 800ff38:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ff3c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ff40:	6819      	ldr	r1, [r3, #0]
 800ff42:	f001 fab3 	bl	80114ac <uxr_buffer_delete_entity>
 800ff46:	4602      	mov	r2, r0
 800ff48:	6920      	ldr	r0, [r4, #16]
 800ff4a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ff4e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ff52:	f000 fcb7 	bl	80108c4 <run_xrce_session>
 800ff56:	2800      	cmp	r0, #0
 800ff58:	4628      	mov	r0, r5
 800ff5a:	bf14      	ite	ne
 800ff5c:	2400      	movne	r4, #0
 800ff5e:	2402      	moveq	r4, #2
 800ff60:	f000 fb82 	bl	8010668 <rmw_uxrce_fini_service_memory>
 800ff64:	e7c5      	b.n	800fef2 <rmw_destroy_service+0x12>
 800ff66:	bf00      	nop

0800ff68 <rmw_create_subscription>:
 800ff68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff6c:	b08d      	sub	sp, #52	@ 0x34
 800ff6e:	2800      	cmp	r0, #0
 800ff70:	f000 80d1 	beq.w	8010116 <rmw_create_subscription+0x1ae>
 800ff74:	460e      	mov	r6, r1
 800ff76:	2900      	cmp	r1, #0
 800ff78:	f000 80cd 	beq.w	8010116 <rmw_create_subscription+0x1ae>
 800ff7c:	4604      	mov	r4, r0
 800ff7e:	6800      	ldr	r0, [r0, #0]
 800ff80:	4615      	mov	r5, r2
 800ff82:	4698      	mov	r8, r3
 800ff84:	f000 fd1e 	bl	80109c4 <is_uxrce_rmw_identifier_valid>
 800ff88:	2800      	cmp	r0, #0
 800ff8a:	f000 80c4 	beq.w	8010116 <rmw_create_subscription+0x1ae>
 800ff8e:	2d00      	cmp	r5, #0
 800ff90:	f000 80c1 	beq.w	8010116 <rmw_create_subscription+0x1ae>
 800ff94:	782b      	ldrb	r3, [r5, #0]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	f000 80bd 	beq.w	8010116 <rmw_create_subscription+0x1ae>
 800ff9c:	f1b8 0f00 	cmp.w	r8, #0
 800ffa0:	f000 80b9 	beq.w	8010116 <rmw_create_subscription+0x1ae>
 800ffa4:	485e      	ldr	r0, [pc, #376]	@ (8010120 <rmw_create_subscription+0x1b8>)
 800ffa6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800ffaa:	f007 fd4b 	bl	8017a44 <get_memory>
 800ffae:	4604      	mov	r4, r0
 800ffb0:	2800      	cmp	r0, #0
 800ffb2:	f000 80b1 	beq.w	8010118 <rmw_create_subscription+0x1b0>
 800ffb6:	6887      	ldr	r7, [r0, #8]
 800ffb8:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800ffbc:	f007 fdaa 	bl	8017b14 <rmw_get_implementation_identifier>
 800ffc0:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 800ffc4:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800ffc6:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800ffca:	4628      	mov	r0, r5
 800ffcc:	f7f0 f92a 	bl	8000224 <strlen>
 800ffd0:	3001      	adds	r0, #1
 800ffd2:	283c      	cmp	r0, #60	@ 0x3c
 800ffd4:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 800ffd8:	f200 8096 	bhi.w	8010108 <rmw_create_subscription+0x1a0>
 800ffdc:	4a51      	ldr	r2, [pc, #324]	@ (8010124 <rmw_create_subscription+0x1bc>)
 800ffde:	462b      	mov	r3, r5
 800ffe0:	213c      	movs	r1, #60	@ 0x3c
 800ffe2:	4650      	mov	r0, sl
 800ffe4:	f009 ffb2 	bl	8019f4c <sniprintf>
 800ffe8:	4641      	mov	r1, r8
 800ffea:	f8c7 9020 	str.w	r9, [r7, #32]
 800ffee:	2250      	movs	r2, #80	@ 0x50
 800fff0:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800fff4:	f00a f9e7 	bl	801a3c6 <memcpy>
 800fff8:	494b      	ldr	r1, [pc, #300]	@ (8010128 <rmw_create_subscription+0x1c0>)
 800fffa:	4630      	mov	r0, r6
 800fffc:	f000 fcf0 	bl	80109e0 <get_message_typesupport_handle>
 8010000:	2800      	cmp	r0, #0
 8010002:	f000 8081 	beq.w	8010108 <rmw_create_subscription+0x1a0>
 8010006:	6842      	ldr	r2, [r0, #4]
 8010008:	61ba      	str	r2, [r7, #24]
 801000a:	2a00      	cmp	r2, #0
 801000c:	d07c      	beq.n	8010108 <rmw_create_subscription+0x1a0>
 801000e:	4629      	mov	r1, r5
 8010010:	4643      	mov	r3, r8
 8010012:	4648      	mov	r0, r9
 8010014:	f007 fdac 	bl	8017b70 <create_topic>
 8010018:	61f8      	str	r0, [r7, #28]
 801001a:	2800      	cmp	r0, #0
 801001c:	d078      	beq.n	8010110 <rmw_create_subscription+0x1a8>
 801001e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010022:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010026:	2104      	movs	r1, #4
 8010028:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 801002c:	1c42      	adds	r2, r0, #1
 801002e:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 8010032:	f001 fcff 	bl	8011a34 <uxr_object_id>
 8010036:	6138      	str	r0, [r7, #16]
 8010038:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801003c:	2506      	movs	r5, #6
 801003e:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8010042:	9500      	str	r5, [sp, #0]
 8010044:	6819      	ldr	r1, [r3, #0]
 8010046:	693a      	ldr	r2, [r7, #16]
 8010048:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801004c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010050:	f001 fb10 	bl	8011674 <uxr_buffer_create_subscriber_bin>
 8010054:	4602      	mov	r2, r0
 8010056:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801005a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801005e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8010062:	f000 fc2f 	bl	80108c4 <run_xrce_session>
 8010066:	2800      	cmp	r0, #0
 8010068:	d04e      	beq.n	8010108 <rmw_create_subscription+0x1a0>
 801006a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801006e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010072:	4629      	mov	r1, r5
 8010074:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 8010078:	1c42      	adds	r2, r0, #1
 801007a:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 801007e:	f001 fcd9 	bl	8011a34 <uxr_object_id>
 8010082:	ae08      	add	r6, sp, #32
 8010084:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010088:	69fb      	ldr	r3, [r7, #28]
 801008a:	6178      	str	r0, [r7, #20]
 801008c:	4641      	mov	r1, r8
 801008e:	4630      	mov	r0, r6
 8010090:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 8010094:	9305      	str	r3, [sp, #20]
 8010096:	f000 fc31 	bl	80108fc <convert_qos_profile>
 801009a:	9503      	str	r5, [sp, #12]
 801009c:	e896 0003 	ldmia.w	r6, {r0, r1}
 80100a0:	9b05      	ldr	r3, [sp, #20]
 80100a2:	9001      	str	r0, [sp, #4]
 80100a4:	f8ad 1008 	strh.w	r1, [sp, #8]
 80100a8:	691b      	ldr	r3, [r3, #16]
 80100aa:	9300      	str	r3, [sp, #0]
 80100ac:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 80100b0:	f8db 1000 	ldr.w	r1, [fp]
 80100b4:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 80100b8:	f001 fb82 	bl	80117c0 <uxr_buffer_create_datareader_bin>
 80100bc:	4602      	mov	r2, r0
 80100be:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80100c2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80100c6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80100ca:	f000 fbfb 	bl	80108c4 <run_xrce_session>
 80100ce:	b1d8      	cbz	r0, 8010108 <rmw_create_subscription+0x1a0>
 80100d0:	f898 3008 	ldrb.w	r3, [r8, #8]
 80100d4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80100d8:	2b02      	cmp	r3, #2
 80100da:	bf0c      	ite	eq
 80100dc:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 80100e0:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 80100e4:	9307      	str	r3, [sp, #28]
 80100e6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80100ea:	2200      	movs	r2, #0
 80100ec:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 80100f0:	ab0a      	add	r3, sp, #40	@ 0x28
 80100f2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80100f6:	9300      	str	r3, [sp, #0]
 80100f8:	697a      	ldr	r2, [r7, #20]
 80100fa:	9b07      	ldr	r3, [sp, #28]
 80100fc:	6809      	ldr	r1, [r1, #0]
 80100fe:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010102:	f001 fdcb 	bl	8011c9c <uxr_buffer_request_data>
 8010106:	e007      	b.n	8010118 <rmw_create_subscription+0x1b0>
 8010108:	69f8      	ldr	r0, [r7, #28]
 801010a:	b108      	cbz	r0, 8010110 <rmw_create_subscription+0x1a8>
 801010c:	f000 fad8 	bl	80106c0 <rmw_uxrce_fini_topic_memory>
 8010110:	4620      	mov	r0, r4
 8010112:	f000 fa93 	bl	801063c <rmw_uxrce_fini_subscription_memory>
 8010116:	2400      	movs	r4, #0
 8010118:	4620      	mov	r0, r4
 801011a:	b00d      	add	sp, #52	@ 0x34
 801011c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010120:	2001189c 	.word	0x2001189c
 8010124:	0801b724 	.word	0x0801b724
 8010128:	0801b258 	.word	0x0801b258

0801012c <rmw_subscription_get_actual_qos>:
 801012c:	b150      	cbz	r0, 8010144 <rmw_subscription_get_actual_qos+0x18>
 801012e:	b508      	push	{r3, lr}
 8010130:	460b      	mov	r3, r1
 8010132:	b149      	cbz	r1, 8010148 <rmw_subscription_get_actual_qos+0x1c>
 8010134:	6841      	ldr	r1, [r0, #4]
 8010136:	2250      	movs	r2, #80	@ 0x50
 8010138:	3128      	adds	r1, #40	@ 0x28
 801013a:	4618      	mov	r0, r3
 801013c:	f00a f943 	bl	801a3c6 <memcpy>
 8010140:	2000      	movs	r0, #0
 8010142:	bd08      	pop	{r3, pc}
 8010144:	200b      	movs	r0, #11
 8010146:	4770      	bx	lr
 8010148:	200b      	movs	r0, #11
 801014a:	bd08      	pop	{r3, pc}

0801014c <rmw_destroy_subscription>:
 801014c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801014e:	b128      	cbz	r0, 801015c <rmw_destroy_subscription+0x10>
 8010150:	4604      	mov	r4, r0
 8010152:	6800      	ldr	r0, [r0, #0]
 8010154:	460d      	mov	r5, r1
 8010156:	f000 fc35 	bl	80109c4 <is_uxrce_rmw_identifier_valid>
 801015a:	b910      	cbnz	r0, 8010162 <rmw_destroy_subscription+0x16>
 801015c:	2401      	movs	r4, #1
 801015e:	4620      	mov	r0, r4
 8010160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010162:	6863      	ldr	r3, [r4, #4]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d0f9      	beq.n	801015c <rmw_destroy_subscription+0x10>
 8010168:	2d00      	cmp	r5, #0
 801016a:	d0f7      	beq.n	801015c <rmw_destroy_subscription+0x10>
 801016c:	6828      	ldr	r0, [r5, #0]
 801016e:	f000 fc29 	bl	80109c4 <is_uxrce_rmw_identifier_valid>
 8010172:	2800      	cmp	r0, #0
 8010174:	d0f2      	beq.n	801015c <rmw_destroy_subscription+0x10>
 8010176:	686c      	ldr	r4, [r5, #4]
 8010178:	2c00      	cmp	r4, #0
 801017a:	d0ef      	beq.n	801015c <rmw_destroy_subscription+0x10>
 801017c:	6a26      	ldr	r6, [r4, #32]
 801017e:	6962      	ldr	r2, [r4, #20]
 8010180:	6930      	ldr	r0, [r6, #16]
 8010182:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010186:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801018a:	6819      	ldr	r1, [r3, #0]
 801018c:	f001 fdc0 	bl	8011d10 <uxr_buffer_cancel_data>
 8010190:	4602      	mov	r2, r0
 8010192:	6930      	ldr	r0, [r6, #16]
 8010194:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8010198:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801019c:	f000 fb92 	bl	80108c4 <run_xrce_session>
 80101a0:	69e0      	ldr	r0, [r4, #28]
 80101a2:	f007 fd35 	bl	8017c10 <destroy_topic>
 80101a6:	6a23      	ldr	r3, [r4, #32]
 80101a8:	6962      	ldr	r2, [r4, #20]
 80101aa:	6918      	ldr	r0, [r3, #16]
 80101ac:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80101b0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80101b4:	6819      	ldr	r1, [r3, #0]
 80101b6:	f001 f979 	bl	80114ac <uxr_buffer_delete_entity>
 80101ba:	6a23      	ldr	r3, [r4, #32]
 80101bc:	6922      	ldr	r2, [r4, #16]
 80101be:	691b      	ldr	r3, [r3, #16]
 80101c0:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 80101c4:	4604      	mov	r4, r0
 80101c6:	6809      	ldr	r1, [r1, #0]
 80101c8:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80101cc:	f001 f96e 	bl	80114ac <uxr_buffer_delete_entity>
 80101d0:	6937      	ldr	r7, [r6, #16]
 80101d2:	4622      	mov	r2, r4
 80101d4:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80101d8:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 80101dc:	4604      	mov	r4, r0
 80101de:	4638      	mov	r0, r7
 80101e0:	f000 fb70 	bl	80108c4 <run_xrce_session>
 80101e4:	6936      	ldr	r6, [r6, #16]
 80101e6:	4622      	mov	r2, r4
 80101e8:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 80101ec:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 80101f0:	4604      	mov	r4, r0
 80101f2:	4630      	mov	r0, r6
 80101f4:	f000 fb66 	bl	80108c4 <run_xrce_session>
 80101f8:	b12c      	cbz	r4, 8010206 <rmw_destroy_subscription+0xba>
 80101fa:	b120      	cbz	r0, 8010206 <rmw_destroy_subscription+0xba>
 80101fc:	2400      	movs	r4, #0
 80101fe:	4628      	mov	r0, r5
 8010200:	f000 fa1c 	bl	801063c <rmw_uxrce_fini_subscription_memory>
 8010204:	e7ab      	b.n	801015e <rmw_destroy_subscription+0x12>
 8010206:	2402      	movs	r4, #2
 8010208:	e7f9      	b.n	80101fe <rmw_destroy_subscription+0xb2>
 801020a:	bf00      	nop

0801020c <rmw_take_with_info>:
 801020c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801020e:	4604      	mov	r4, r0
 8010210:	6800      	ldr	r0, [r0, #0]
 8010212:	b089      	sub	sp, #36	@ 0x24
 8010214:	460f      	mov	r7, r1
 8010216:	4615      	mov	r5, r2
 8010218:	b128      	cbz	r0, 8010226 <rmw_take_with_info+0x1a>
 801021a:	4b24      	ldr	r3, [pc, #144]	@ (80102ac <rmw_take_with_info+0xa0>)
 801021c:	6819      	ldr	r1, [r3, #0]
 801021e:	f7ef fff7 	bl	8000210 <strcmp>
 8010222:	2800      	cmp	r0, #0
 8010224:	d13e      	bne.n	80102a4 <rmw_take_with_info+0x98>
 8010226:	b305      	cbz	r5, 801026a <rmw_take_with_info+0x5e>
 8010228:	6864      	ldr	r4, [r4, #4]
 801022a:	2300      	movs	r3, #0
 801022c:	702b      	strb	r3, [r5, #0]
 801022e:	f000 facb 	bl	80107c8 <rmw_uxrce_clean_expired_static_input_buffer>
 8010232:	4620      	mov	r0, r4
 8010234:	f000 faa0 	bl	8010778 <rmw_uxrce_find_static_input_buffer_by_owner>
 8010238:	4606      	mov	r6, r0
 801023a:	b1f0      	cbz	r0, 801027a <rmw_take_with_info+0x6e>
 801023c:	6881      	ldr	r1, [r0, #8]
 801023e:	4668      	mov	r0, sp
 8010240:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8010244:	3110      	adds	r1, #16
 8010246:	f7fc fa89 	bl	800c75c <ucdr_init_buffer>
 801024a:	69a3      	ldr	r3, [r4, #24]
 801024c:	4639      	mov	r1, r7
 801024e:	68db      	ldr	r3, [r3, #12]
 8010250:	4668      	mov	r0, sp
 8010252:	4798      	blx	r3
 8010254:	4631      	mov	r1, r6
 8010256:	4604      	mov	r4, r0
 8010258:	4815      	ldr	r0, [pc, #84]	@ (80102b0 <rmw_take_with_info+0xa4>)
 801025a:	f007 fc03 	bl	8017a64 <put_memory>
 801025e:	702c      	strb	r4, [r5, #0]
 8010260:	f084 0001 	eor.w	r0, r4, #1
 8010264:	b2c0      	uxtb	r0, r0
 8010266:	b009      	add	sp, #36	@ 0x24
 8010268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801026a:	6864      	ldr	r4, [r4, #4]
 801026c:	f000 faac 	bl	80107c8 <rmw_uxrce_clean_expired_static_input_buffer>
 8010270:	4620      	mov	r0, r4
 8010272:	f000 fa81 	bl	8010778 <rmw_uxrce_find_static_input_buffer_by_owner>
 8010276:	4605      	mov	r5, r0
 8010278:	b910      	cbnz	r0, 8010280 <rmw_take_with_info+0x74>
 801027a:	2001      	movs	r0, #1
 801027c:	b009      	add	sp, #36	@ 0x24
 801027e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010280:	68a9      	ldr	r1, [r5, #8]
 8010282:	4668      	mov	r0, sp
 8010284:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8010288:	3110      	adds	r1, #16
 801028a:	f7fc fa67 	bl	800c75c <ucdr_init_buffer>
 801028e:	69a3      	ldr	r3, [r4, #24]
 8010290:	4639      	mov	r1, r7
 8010292:	68db      	ldr	r3, [r3, #12]
 8010294:	4668      	mov	r0, sp
 8010296:	4798      	blx	r3
 8010298:	4629      	mov	r1, r5
 801029a:	4604      	mov	r4, r0
 801029c:	4804      	ldr	r0, [pc, #16]	@ (80102b0 <rmw_take_with_info+0xa4>)
 801029e:	f007 fbe1 	bl	8017a64 <put_memory>
 80102a2:	e7dd      	b.n	8010260 <rmw_take_with_info+0x54>
 80102a4:	200c      	movs	r0, #12
 80102a6:	b009      	add	sp, #36	@ 0x24
 80102a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102aa:	bf00      	nop
 80102ac:	0801c0c0 	.word	0x0801c0c0
 80102b0:	2001188c 	.word	0x2001188c

080102b4 <rmw_uxrce_transport_init>:
 80102b4:	b508      	push	{r3, lr}
 80102b6:	b108      	cbz	r0, 80102bc <rmw_uxrce_transport_init+0x8>
 80102b8:	f100 0210 	add.w	r2, r0, #16
 80102bc:	b139      	cbz	r1, 80102ce <rmw_uxrce_transport_init+0x1a>
 80102be:	6949      	ldr	r1, [r1, #20]
 80102c0:	4610      	mov	r0, r2
 80102c2:	f001 fb7f 	bl	80119c4 <uxr_init_custom_transport>
 80102c6:	f080 0001 	eor.w	r0, r0, #1
 80102ca:	b2c0      	uxtb	r0, r0
 80102cc:	bd08      	pop	{r3, pc}
 80102ce:	4b04      	ldr	r3, [pc, #16]	@ (80102e0 <rmw_uxrce_transport_init+0x2c>)
 80102d0:	4610      	mov	r0, r2
 80102d2:	6859      	ldr	r1, [r3, #4]
 80102d4:	f001 fb76 	bl	80119c4 <uxr_init_custom_transport>
 80102d8:	f080 0001 	eor.w	r0, r0, #1
 80102dc:	b2c0      	uxtb	r0, r0
 80102de:	bd08      	pop	{r3, pc}
 80102e0:	2000cf24 	.word	0x2000cf24

080102e4 <rmw_uros_set_publisher_session_timeout>:
 80102e4:	b118      	cbz	r0, 80102ee <rmw_uros_set_publisher_session_timeout+0xa>
 80102e6:	6843      	ldr	r3, [r0, #4]
 80102e8:	2000      	movs	r0, #0
 80102ea:	67d9      	str	r1, [r3, #124]	@ 0x7c
 80102ec:	4770      	bx	lr
 80102ee:	200b      	movs	r0, #11
 80102f0:	4770      	bx	lr
 80102f2:	bf00      	nop

080102f4 <rmw_uros_set_context_entity_destroy_session_timeout>:
 80102f4:	b160      	cbz	r0, 8010310 <rmw_uros_set_context_entity_destroy_session_timeout+0x1c>
 80102f6:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80102f8:	2900      	cmp	r1, #0
 80102fa:	bfd4      	ite	le
 80102fc:	f503 725f 	addle.w	r2, r3, #892	@ 0x37c
 8010300:	f503 725e 	addgt.w	r2, r3, #888	@ 0x378
 8010304:	f8c3 2388 	str.w	r2, [r3, #904]	@ 0x388
 8010308:	f8c3 1390 	str.w	r1, [r3, #912]	@ 0x390
 801030c:	2000      	movs	r0, #0
 801030e:	4770      	bx	lr
 8010310:	200b      	movs	r0, #11
 8010312:	4770      	bx	lr

08010314 <rmw_uxrce_init_service_memory>:
 8010314:	b1e2      	cbz	r2, 8010350 <rmw_uxrce_init_service_memory+0x3c>
 8010316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801031a:	7b05      	ldrb	r5, [r0, #12]
 801031c:	4606      	mov	r6, r0
 801031e:	b9ad      	cbnz	r5, 801034c <rmw_uxrce_init_service_memory+0x38>
 8010320:	23c8      	movs	r3, #200	@ 0xc8
 8010322:	e9c0 5500 	strd	r5, r5, [r0]
 8010326:	6083      	str	r3, [r0, #8]
 8010328:	f240 1301 	movw	r3, #257	@ 0x101
 801032c:	4617      	mov	r7, r2
 801032e:	8183      	strh	r3, [r0, #12]
 8010330:	460c      	mov	r4, r1
 8010332:	46a8      	mov	r8, r5
 8010334:	4621      	mov	r1, r4
 8010336:	4630      	mov	r0, r6
 8010338:	3501      	adds	r5, #1
 801033a:	f007 fb93 	bl	8017a64 <put_memory>
 801033e:	42af      	cmp	r7, r5
 8010340:	60a4      	str	r4, [r4, #8]
 8010342:	f884 800c 	strb.w	r8, [r4, #12]
 8010346:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 801034a:	d1f3      	bne.n	8010334 <rmw_uxrce_init_service_memory+0x20>
 801034c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010350:	4770      	bx	lr
 8010352:	bf00      	nop

08010354 <rmw_uxrce_init_client_memory>:
 8010354:	b1e2      	cbz	r2, 8010390 <rmw_uxrce_init_client_memory+0x3c>
 8010356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801035a:	7b05      	ldrb	r5, [r0, #12]
 801035c:	4606      	mov	r6, r0
 801035e:	b9ad      	cbnz	r5, 801038c <rmw_uxrce_init_client_memory+0x38>
 8010360:	23c8      	movs	r3, #200	@ 0xc8
 8010362:	e9c0 5500 	strd	r5, r5, [r0]
 8010366:	6083      	str	r3, [r0, #8]
 8010368:	f240 1301 	movw	r3, #257	@ 0x101
 801036c:	4617      	mov	r7, r2
 801036e:	8183      	strh	r3, [r0, #12]
 8010370:	460c      	mov	r4, r1
 8010372:	46a8      	mov	r8, r5
 8010374:	4621      	mov	r1, r4
 8010376:	4630      	mov	r0, r6
 8010378:	3501      	adds	r5, #1
 801037a:	f007 fb73 	bl	8017a64 <put_memory>
 801037e:	42af      	cmp	r7, r5
 8010380:	60a4      	str	r4, [r4, #8]
 8010382:	f884 800c 	strb.w	r8, [r4, #12]
 8010386:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 801038a:	d1f3      	bne.n	8010374 <rmw_uxrce_init_client_memory+0x20>
 801038c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010390:	4770      	bx	lr
 8010392:	bf00      	nop

08010394 <rmw_uxrce_init_publisher_memory>:
 8010394:	b1e2      	cbz	r2, 80103d0 <rmw_uxrce_init_publisher_memory+0x3c>
 8010396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801039a:	7b05      	ldrb	r5, [r0, #12]
 801039c:	4606      	mov	r6, r0
 801039e:	b9ad      	cbnz	r5, 80103cc <rmw_uxrce_init_publisher_memory+0x38>
 80103a0:	23d8      	movs	r3, #216	@ 0xd8
 80103a2:	e9c0 5500 	strd	r5, r5, [r0]
 80103a6:	6083      	str	r3, [r0, #8]
 80103a8:	f240 1301 	movw	r3, #257	@ 0x101
 80103ac:	4617      	mov	r7, r2
 80103ae:	8183      	strh	r3, [r0, #12]
 80103b0:	460c      	mov	r4, r1
 80103b2:	46a8      	mov	r8, r5
 80103b4:	4621      	mov	r1, r4
 80103b6:	4630      	mov	r0, r6
 80103b8:	3501      	adds	r5, #1
 80103ba:	f007 fb53 	bl	8017a64 <put_memory>
 80103be:	42af      	cmp	r7, r5
 80103c0:	60a4      	str	r4, [r4, #8]
 80103c2:	f884 800c 	strb.w	r8, [r4, #12]
 80103c6:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 80103ca:	d1f3      	bne.n	80103b4 <rmw_uxrce_init_publisher_memory+0x20>
 80103cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103d0:	4770      	bx	lr
 80103d2:	bf00      	nop

080103d4 <rmw_uxrce_init_subscription_memory>:
 80103d4:	b1e2      	cbz	r2, 8010410 <rmw_uxrce_init_subscription_memory+0x3c>
 80103d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103da:	7b05      	ldrb	r5, [r0, #12]
 80103dc:	4606      	mov	r6, r0
 80103de:	b9ad      	cbnz	r5, 801040c <rmw_uxrce_init_subscription_memory+0x38>
 80103e0:	23d8      	movs	r3, #216	@ 0xd8
 80103e2:	e9c0 5500 	strd	r5, r5, [r0]
 80103e6:	6083      	str	r3, [r0, #8]
 80103e8:	f240 1301 	movw	r3, #257	@ 0x101
 80103ec:	4617      	mov	r7, r2
 80103ee:	8183      	strh	r3, [r0, #12]
 80103f0:	460c      	mov	r4, r1
 80103f2:	46a8      	mov	r8, r5
 80103f4:	4621      	mov	r1, r4
 80103f6:	4630      	mov	r0, r6
 80103f8:	3501      	adds	r5, #1
 80103fa:	f007 fb33 	bl	8017a64 <put_memory>
 80103fe:	42af      	cmp	r7, r5
 8010400:	60a4      	str	r4, [r4, #8]
 8010402:	f884 800c 	strb.w	r8, [r4, #12]
 8010406:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 801040a:	d1f3      	bne.n	80103f4 <rmw_uxrce_init_subscription_memory+0x20>
 801040c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010410:	4770      	bx	lr
 8010412:	bf00      	nop

08010414 <rmw_uxrce_init_node_memory>:
 8010414:	b1e2      	cbz	r2, 8010450 <rmw_uxrce_init_node_memory+0x3c>
 8010416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801041a:	7b05      	ldrb	r5, [r0, #12]
 801041c:	4606      	mov	r6, r0
 801041e:	b9ad      	cbnz	r5, 801044c <rmw_uxrce_init_node_memory+0x38>
 8010420:	23a4      	movs	r3, #164	@ 0xa4
 8010422:	e9c0 5500 	strd	r5, r5, [r0]
 8010426:	6083      	str	r3, [r0, #8]
 8010428:	f240 1301 	movw	r3, #257	@ 0x101
 801042c:	4617      	mov	r7, r2
 801042e:	8183      	strh	r3, [r0, #12]
 8010430:	460c      	mov	r4, r1
 8010432:	46a8      	mov	r8, r5
 8010434:	4621      	mov	r1, r4
 8010436:	4630      	mov	r0, r6
 8010438:	3501      	adds	r5, #1
 801043a:	f007 fb13 	bl	8017a64 <put_memory>
 801043e:	42af      	cmp	r7, r5
 8010440:	60a4      	str	r4, [r4, #8]
 8010442:	f884 800c 	strb.w	r8, [r4, #12]
 8010446:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 801044a:	d1f3      	bne.n	8010434 <rmw_uxrce_init_node_memory+0x20>
 801044c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010450:	4770      	bx	lr
 8010452:	bf00      	nop

08010454 <rmw_uxrce_init_session_memory>:
 8010454:	b1ea      	cbz	r2, 8010492 <rmw_uxrce_init_session_memory+0x3e>
 8010456:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801045a:	7b05      	ldrb	r5, [r0, #12]
 801045c:	4606      	mov	r6, r0
 801045e:	b9b5      	cbnz	r5, 801048e <rmw_uxrce_init_session_memory+0x3a>
 8010460:	e9c0 5500 	strd	r5, r5, [r0]
 8010464:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 8010468:	f240 1301 	movw	r3, #257	@ 0x101
 801046c:	4617      	mov	r7, r2
 801046e:	f8c0 8008 	str.w	r8, [r0, #8]
 8010472:	460c      	mov	r4, r1
 8010474:	8183      	strh	r3, [r0, #12]
 8010476:	46a9      	mov	r9, r5
 8010478:	4621      	mov	r1, r4
 801047a:	4630      	mov	r0, r6
 801047c:	3501      	adds	r5, #1
 801047e:	f007 faf1 	bl	8017a64 <put_memory>
 8010482:	42af      	cmp	r7, r5
 8010484:	60a4      	str	r4, [r4, #8]
 8010486:	f884 900c 	strb.w	r9, [r4, #12]
 801048a:	4444      	add	r4, r8
 801048c:	d1f4      	bne.n	8010478 <rmw_uxrce_init_session_memory+0x24>
 801048e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010492:	4770      	bx	lr

08010494 <rmw_uxrce_init_topic_memory>:
 8010494:	b1e2      	cbz	r2, 80104d0 <rmw_uxrce_init_topic_memory+0x3c>
 8010496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801049a:	7b05      	ldrb	r5, [r0, #12]
 801049c:	4606      	mov	r6, r0
 801049e:	b9ad      	cbnz	r5, 80104cc <rmw_uxrce_init_topic_memory+0x38>
 80104a0:	231c      	movs	r3, #28
 80104a2:	e9c0 5500 	strd	r5, r5, [r0]
 80104a6:	6083      	str	r3, [r0, #8]
 80104a8:	f240 1301 	movw	r3, #257	@ 0x101
 80104ac:	4617      	mov	r7, r2
 80104ae:	8183      	strh	r3, [r0, #12]
 80104b0:	460c      	mov	r4, r1
 80104b2:	46a8      	mov	r8, r5
 80104b4:	4621      	mov	r1, r4
 80104b6:	4630      	mov	r0, r6
 80104b8:	3501      	adds	r5, #1
 80104ba:	f007 fad3 	bl	8017a64 <put_memory>
 80104be:	42af      	cmp	r7, r5
 80104c0:	60a4      	str	r4, [r4, #8]
 80104c2:	f884 800c 	strb.w	r8, [r4, #12]
 80104c6:	f104 041c 	add.w	r4, r4, #28
 80104ca:	d1f3      	bne.n	80104b4 <rmw_uxrce_init_topic_memory+0x20>
 80104cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104d0:	4770      	bx	lr
 80104d2:	bf00      	nop

080104d4 <rmw_uxrce_init_static_input_buffer_memory>:
 80104d4:	b1ea      	cbz	r2, 8010512 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 80104d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104da:	7b05      	ldrb	r5, [r0, #12]
 80104dc:	4606      	mov	r6, r0
 80104de:	b9b5      	cbnz	r5, 801050e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 80104e0:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 80104e4:	e9c0 5500 	strd	r5, r5, [r0]
 80104e8:	6083      	str	r3, [r0, #8]
 80104ea:	f240 1301 	movw	r3, #257	@ 0x101
 80104ee:	4617      	mov	r7, r2
 80104f0:	8183      	strh	r3, [r0, #12]
 80104f2:	460c      	mov	r4, r1
 80104f4:	46a8      	mov	r8, r5
 80104f6:	4621      	mov	r1, r4
 80104f8:	4630      	mov	r0, r6
 80104fa:	3501      	adds	r5, #1
 80104fc:	f007 fab2 	bl	8017a64 <put_memory>
 8010500:	42af      	cmp	r7, r5
 8010502:	60a4      	str	r4, [r4, #8]
 8010504:	f884 800c 	strb.w	r8, [r4, #12]
 8010508:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 801050c:	d1f3      	bne.n	80104f6 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 801050e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010512:	4770      	bx	lr

08010514 <rmw_uxrce_init_init_options_impl_memory>:
 8010514:	b1e2      	cbz	r2, 8010550 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8010516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801051a:	7b05      	ldrb	r5, [r0, #12]
 801051c:	4606      	mov	r6, r0
 801051e:	b9ad      	cbnz	r5, 801054c <rmw_uxrce_init_init_options_impl_memory+0x38>
 8010520:	232c      	movs	r3, #44	@ 0x2c
 8010522:	e9c0 5500 	strd	r5, r5, [r0]
 8010526:	6083      	str	r3, [r0, #8]
 8010528:	f240 1301 	movw	r3, #257	@ 0x101
 801052c:	4617      	mov	r7, r2
 801052e:	8183      	strh	r3, [r0, #12]
 8010530:	460c      	mov	r4, r1
 8010532:	46a8      	mov	r8, r5
 8010534:	4621      	mov	r1, r4
 8010536:	4630      	mov	r0, r6
 8010538:	3501      	adds	r5, #1
 801053a:	f007 fa93 	bl	8017a64 <put_memory>
 801053e:	42af      	cmp	r7, r5
 8010540:	60a4      	str	r4, [r4, #8]
 8010542:	f884 800c 	strb.w	r8, [r4, #12]
 8010546:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 801054a:	d1f3      	bne.n	8010534 <rmw_uxrce_init_init_options_impl_memory+0x20>
 801054c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010550:	4770      	bx	lr
 8010552:	bf00      	nop

08010554 <rmw_uxrce_init_wait_set_memory>:
 8010554:	b1e2      	cbz	r2, 8010590 <rmw_uxrce_init_wait_set_memory+0x3c>
 8010556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801055a:	7b05      	ldrb	r5, [r0, #12]
 801055c:	4606      	mov	r6, r0
 801055e:	b9ad      	cbnz	r5, 801058c <rmw_uxrce_init_wait_set_memory+0x38>
 8010560:	231c      	movs	r3, #28
 8010562:	e9c0 5500 	strd	r5, r5, [r0]
 8010566:	6083      	str	r3, [r0, #8]
 8010568:	f240 1301 	movw	r3, #257	@ 0x101
 801056c:	4617      	mov	r7, r2
 801056e:	8183      	strh	r3, [r0, #12]
 8010570:	460c      	mov	r4, r1
 8010572:	46a8      	mov	r8, r5
 8010574:	4621      	mov	r1, r4
 8010576:	4630      	mov	r0, r6
 8010578:	3501      	adds	r5, #1
 801057a:	f007 fa73 	bl	8017a64 <put_memory>
 801057e:	42af      	cmp	r7, r5
 8010580:	60a4      	str	r4, [r4, #8]
 8010582:	f884 800c 	strb.w	r8, [r4, #12]
 8010586:	f104 041c 	add.w	r4, r4, #28
 801058a:	d1f3      	bne.n	8010574 <rmw_uxrce_init_wait_set_memory+0x20>
 801058c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010590:	4770      	bx	lr
 8010592:	bf00      	nop

08010594 <rmw_uxrce_init_guard_condition_memory>:
 8010594:	b1e2      	cbz	r2, 80105d0 <rmw_uxrce_init_guard_condition_memory+0x3c>
 8010596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801059a:	7b05      	ldrb	r5, [r0, #12]
 801059c:	4606      	mov	r6, r0
 801059e:	b9ad      	cbnz	r5, 80105cc <rmw_uxrce_init_guard_condition_memory+0x38>
 80105a0:	2320      	movs	r3, #32
 80105a2:	e9c0 5500 	strd	r5, r5, [r0]
 80105a6:	6083      	str	r3, [r0, #8]
 80105a8:	f240 1301 	movw	r3, #257	@ 0x101
 80105ac:	4617      	mov	r7, r2
 80105ae:	8183      	strh	r3, [r0, #12]
 80105b0:	460c      	mov	r4, r1
 80105b2:	46a8      	mov	r8, r5
 80105b4:	4621      	mov	r1, r4
 80105b6:	4630      	mov	r0, r6
 80105b8:	3501      	adds	r5, #1
 80105ba:	f007 fa53 	bl	8017a64 <put_memory>
 80105be:	42af      	cmp	r7, r5
 80105c0:	60a4      	str	r4, [r4, #8]
 80105c2:	f884 800c 	strb.w	r8, [r4, #12]
 80105c6:	f104 0420 	add.w	r4, r4, #32
 80105ca:	d1f3      	bne.n	80105b4 <rmw_uxrce_init_guard_condition_memory+0x20>
 80105cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105d0:	4770      	bx	lr
 80105d2:	bf00      	nop

080105d4 <rmw_uxrce_fini_session_memory>:
 80105d4:	4601      	mov	r1, r0
 80105d6:	4801      	ldr	r0, [pc, #4]	@ (80105dc <rmw_uxrce_fini_session_memory+0x8>)
 80105d8:	f007 ba44 	b.w	8017a64 <put_memory>
 80105dc:	2001187c 	.word	0x2001187c

080105e0 <rmw_uxrce_fini_node_memory>:
 80105e0:	b538      	push	{r3, r4, r5, lr}
 80105e2:	4604      	mov	r4, r0
 80105e4:	6800      	ldr	r0, [r0, #0]
 80105e6:	b128      	cbz	r0, 80105f4 <rmw_uxrce_fini_node_memory+0x14>
 80105e8:	4b07      	ldr	r3, [pc, #28]	@ (8010608 <rmw_uxrce_fini_node_memory+0x28>)
 80105ea:	6819      	ldr	r1, [r3, #0]
 80105ec:	f7ef fe10 	bl	8000210 <strcmp>
 80105f0:	b940      	cbnz	r0, 8010604 <rmw_uxrce_fini_node_memory+0x24>
 80105f2:	6020      	str	r0, [r4, #0]
 80105f4:	6861      	ldr	r1, [r4, #4]
 80105f6:	b129      	cbz	r1, 8010604 <rmw_uxrce_fini_node_memory+0x24>
 80105f8:	2500      	movs	r5, #0
 80105fa:	4804      	ldr	r0, [pc, #16]	@ (801060c <rmw_uxrce_fini_node_memory+0x2c>)
 80105fc:	610d      	str	r5, [r1, #16]
 80105fe:	f007 fa31 	bl	8017a64 <put_memory>
 8010602:	6065      	str	r5, [r4, #4]
 8010604:	bd38      	pop	{r3, r4, r5, pc}
 8010606:	bf00      	nop
 8010608:	0801c0c0 	.word	0x0801c0c0
 801060c:	2001184c 	.word	0x2001184c

08010610 <rmw_uxrce_fini_publisher_memory>:
 8010610:	b510      	push	{r4, lr}
 8010612:	4604      	mov	r4, r0
 8010614:	6800      	ldr	r0, [r0, #0]
 8010616:	b128      	cbz	r0, 8010624 <rmw_uxrce_fini_publisher_memory+0x14>
 8010618:	4b06      	ldr	r3, [pc, #24]	@ (8010634 <rmw_uxrce_fini_publisher_memory+0x24>)
 801061a:	6819      	ldr	r1, [r3, #0]
 801061c:	f7ef fdf8 	bl	8000210 <strcmp>
 8010620:	b938      	cbnz	r0, 8010632 <rmw_uxrce_fini_publisher_memory+0x22>
 8010622:	6020      	str	r0, [r4, #0]
 8010624:	6861      	ldr	r1, [r4, #4]
 8010626:	b121      	cbz	r1, 8010632 <rmw_uxrce_fini_publisher_memory+0x22>
 8010628:	4803      	ldr	r0, [pc, #12]	@ (8010638 <rmw_uxrce_fini_publisher_memory+0x28>)
 801062a:	f007 fa1b 	bl	8017a64 <put_memory>
 801062e:	2300      	movs	r3, #0
 8010630:	6063      	str	r3, [r4, #4]
 8010632:	bd10      	pop	{r4, pc}
 8010634:	0801c0c0 	.word	0x0801c0c0
 8010638:	2001185c 	.word	0x2001185c

0801063c <rmw_uxrce_fini_subscription_memory>:
 801063c:	b510      	push	{r4, lr}
 801063e:	4604      	mov	r4, r0
 8010640:	6800      	ldr	r0, [r0, #0]
 8010642:	b128      	cbz	r0, 8010650 <rmw_uxrce_fini_subscription_memory+0x14>
 8010644:	4b06      	ldr	r3, [pc, #24]	@ (8010660 <rmw_uxrce_fini_subscription_memory+0x24>)
 8010646:	6819      	ldr	r1, [r3, #0]
 8010648:	f7ef fde2 	bl	8000210 <strcmp>
 801064c:	b938      	cbnz	r0, 801065e <rmw_uxrce_fini_subscription_memory+0x22>
 801064e:	6020      	str	r0, [r4, #0]
 8010650:	6861      	ldr	r1, [r4, #4]
 8010652:	b121      	cbz	r1, 801065e <rmw_uxrce_fini_subscription_memory+0x22>
 8010654:	4803      	ldr	r0, [pc, #12]	@ (8010664 <rmw_uxrce_fini_subscription_memory+0x28>)
 8010656:	f007 fa05 	bl	8017a64 <put_memory>
 801065a:	2300      	movs	r3, #0
 801065c:	6063      	str	r3, [r4, #4]
 801065e:	bd10      	pop	{r4, pc}
 8010660:	0801c0c0 	.word	0x0801c0c0
 8010664:	2001189c 	.word	0x2001189c

08010668 <rmw_uxrce_fini_service_memory>:
 8010668:	b510      	push	{r4, lr}
 801066a:	4604      	mov	r4, r0
 801066c:	6800      	ldr	r0, [r0, #0]
 801066e:	b128      	cbz	r0, 801067c <rmw_uxrce_fini_service_memory+0x14>
 8010670:	4b06      	ldr	r3, [pc, #24]	@ (801068c <rmw_uxrce_fini_service_memory+0x24>)
 8010672:	6819      	ldr	r1, [r3, #0]
 8010674:	f7ef fdcc 	bl	8000210 <strcmp>
 8010678:	b938      	cbnz	r0, 801068a <rmw_uxrce_fini_service_memory+0x22>
 801067a:	6020      	str	r0, [r4, #0]
 801067c:	6861      	ldr	r1, [r4, #4]
 801067e:	b121      	cbz	r1, 801068a <rmw_uxrce_fini_service_memory+0x22>
 8010680:	4803      	ldr	r0, [pc, #12]	@ (8010690 <rmw_uxrce_fini_service_memory+0x28>)
 8010682:	f007 f9ef 	bl	8017a64 <put_memory>
 8010686:	2300      	movs	r3, #0
 8010688:	6063      	str	r3, [r4, #4]
 801068a:	bd10      	pop	{r4, pc}
 801068c:	0801c0c0 	.word	0x0801c0c0
 8010690:	2001186c 	.word	0x2001186c

08010694 <rmw_uxrce_fini_client_memory>:
 8010694:	b510      	push	{r4, lr}
 8010696:	4604      	mov	r4, r0
 8010698:	6800      	ldr	r0, [r0, #0]
 801069a:	b128      	cbz	r0, 80106a8 <rmw_uxrce_fini_client_memory+0x14>
 801069c:	4b06      	ldr	r3, [pc, #24]	@ (80106b8 <rmw_uxrce_fini_client_memory+0x24>)
 801069e:	6819      	ldr	r1, [r3, #0]
 80106a0:	f7ef fdb6 	bl	8000210 <strcmp>
 80106a4:	b938      	cbnz	r0, 80106b6 <rmw_uxrce_fini_client_memory+0x22>
 80106a6:	6020      	str	r0, [r4, #0]
 80106a8:	6861      	ldr	r1, [r4, #4]
 80106aa:	b121      	cbz	r1, 80106b6 <rmw_uxrce_fini_client_memory+0x22>
 80106ac:	4803      	ldr	r0, [pc, #12]	@ (80106bc <rmw_uxrce_fini_client_memory+0x28>)
 80106ae:	f007 f9d9 	bl	8017a64 <put_memory>
 80106b2:	2300      	movs	r3, #0
 80106b4:	6063      	str	r3, [r4, #4]
 80106b6:	bd10      	pop	{r4, pc}
 80106b8:	0801c0c0 	.word	0x0801c0c0
 80106bc:	2000cf7c 	.word	0x2000cf7c

080106c0 <rmw_uxrce_fini_topic_memory>:
 80106c0:	b510      	push	{r4, lr}
 80106c2:	4604      	mov	r4, r0
 80106c4:	4621      	mov	r1, r4
 80106c6:	4803      	ldr	r0, [pc, #12]	@ (80106d4 <rmw_uxrce_fini_topic_memory+0x14>)
 80106c8:	f007 f9cc 	bl	8017a64 <put_memory>
 80106cc:	2300      	movs	r3, #0
 80106ce:	61a3      	str	r3, [r4, #24]
 80106d0:	bd10      	pop	{r4, pc}
 80106d2:	bf00      	nop
 80106d4:	200118ac 	.word	0x200118ac

080106d8 <rmw_uxrce_get_static_input_buffer_for_entity>:
 80106d8:	b082      	sub	sp, #8
 80106da:	b530      	push	{r4, r5, lr}
 80106dc:	4925      	ldr	r1, [pc, #148]	@ (8010774 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 80106de:	680d      	ldr	r5, [r1, #0]
 80106e0:	ac03      	add	r4, sp, #12
 80106e2:	e884 000c 	stmia.w	r4, {r2, r3}
 80106e6:	461c      	mov	r4, r3
 80106e8:	2d00      	cmp	r5, #0
 80106ea:	d041      	beq.n	8010770 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 80106ec:	462b      	mov	r3, r5
 80106ee:	2100      	movs	r1, #0
 80106f0:	689a      	ldr	r2, [r3, #8]
 80106f2:	685b      	ldr	r3, [r3, #4]
 80106f4:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 80106f8:	4290      	cmp	r0, r2
 80106fa:	bf08      	it	eq
 80106fc:	3101      	addeq	r1, #1
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d1f6      	bne.n	80106f0 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8010702:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8010706:	2b02      	cmp	r3, #2
 8010708:	d029      	beq.n	801075e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 801070a:	d907      	bls.n	801071c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 801070c:	2b03      	cmp	r3, #3
 801070e:	d005      	beq.n	801071c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8010710:	2100      	movs	r1, #0
 8010712:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010716:	4608      	mov	r0, r1
 8010718:	b002      	add	sp, #8
 801071a:	4770      	bx	lr
 801071c:	b314      	cbz	r4, 8010764 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 801071e:	428c      	cmp	r4, r1
 8010720:	d820      	bhi.n	8010764 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8010722:	2d00      	cmp	r5, #0
 8010724:	d0f4      	beq.n	8010710 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8010726:	2100      	movs	r1, #0
 8010728:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801072c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8010730:	e002      	b.n	8010738 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 8010732:	686d      	ldr	r5, [r5, #4]
 8010734:	2d00      	cmp	r5, #0
 8010736:	d0ec      	beq.n	8010712 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 8010738:	68ab      	ldr	r3, [r5, #8]
 801073a:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 801073e:	4290      	cmp	r0, r2
 8010740:	d1f7      	bne.n	8010732 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8010742:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 8010746:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 801074a:	4562      	cmp	r2, ip
 801074c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8010750:	eb73 0e04 	sbcs.w	lr, r3, r4
 8010754:	daed      	bge.n	8010732 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8010756:	4694      	mov	ip, r2
 8010758:	461c      	mov	r4, r3
 801075a:	4629      	mov	r1, r5
 801075c:	e7e9      	b.n	8010732 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 801075e:	b10c      	cbz	r4, 8010764 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8010760:	428c      	cmp	r4, r1
 8010762:	d9d5      	bls.n	8010710 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8010764:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010768:	4802      	ldr	r0, [pc, #8]	@ (8010774 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 801076a:	b002      	add	sp, #8
 801076c:	f007 b96a 	b.w	8017a44 <get_memory>
 8010770:	4629      	mov	r1, r5
 8010772:	e7c6      	b.n	8010702 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8010774:	2001188c 	.word	0x2001188c

08010778 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8010778:	4b11      	ldr	r3, [pc, #68]	@ (80107c0 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	b530      	push	{r4, r5, lr}
 801077e:	b1e3      	cbz	r3, 80107ba <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8010780:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8010784:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8010788:	2400      	movs	r4, #0
 801078a:	e001      	b.n	8010790 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 801078c:	685b      	ldr	r3, [r3, #4]
 801078e:	b193      	cbz	r3, 80107b6 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 8010790:	689a      	ldr	r2, [r3, #8]
 8010792:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 8010796:	4288      	cmp	r0, r1
 8010798:	d1f8      	bne.n	801078c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 801079a:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 801079e:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 80107a2:	4571      	cmp	r1, lr
 80107a4:	eb72 050c 	sbcs.w	r5, r2, ip
 80107a8:	daf0      	bge.n	801078c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 80107aa:	461c      	mov	r4, r3
 80107ac:	685b      	ldr	r3, [r3, #4]
 80107ae:	468e      	mov	lr, r1
 80107b0:	4694      	mov	ip, r2
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d1ec      	bne.n	8010790 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 80107b6:	4620      	mov	r0, r4
 80107b8:	bd30      	pop	{r4, r5, pc}
 80107ba:	461c      	mov	r4, r3
 80107bc:	4620      	mov	r0, r4
 80107be:	bd30      	pop	{r4, r5, pc}
 80107c0:	2001188c 	.word	0x2001188c
 80107c4:	00000000 	.word	0x00000000

080107c8 <rmw_uxrce_clean_expired_static_input_buffer>:
 80107c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107cc:	4b3c      	ldr	r3, [pc, #240]	@ (80108c0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 80107ce:	ed2d 8b06 	vpush	{d8-d10}
 80107d2:	681f      	ldr	r7, [r3, #0]
 80107d4:	b08d      	sub	sp, #52	@ 0x34
 80107d6:	f007 fd35 	bl	8018244 <rmw_uros_epoch_nanos>
 80107da:	2f00      	cmp	r7, #0
 80107dc:	d05d      	beq.n	801089a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 80107de:	46b8      	mov	r8, r7
 80107e0:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 80108a8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 80107e4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80107e8:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 80107ec:	2b04      	cmp	r3, #4
 80107ee:	ed9f ab30 	vldr	d10, [pc, #192]	@ 80108b0 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 80107f2:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 80108b8 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 80107f6:	4681      	mov	r9, r0
 80107f8:	468a      	mov	sl, r1
 80107fa:	ac04      	add	r4, sp, #16
 80107fc:	d03f      	beq.n	801087e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 80107fe:	2b05      	cmp	r3, #5
 8010800:	d044      	beq.n	801088c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8010802:	2b03      	cmp	r3, #3
 8010804:	d03b      	beq.n	801087e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8010806:	ed8d 8b04 	vstr	d8, [sp, #16]
 801080a:	ed8d ab06 	vstr	d10, [sp, #24]
 801080e:	ed8d 8b08 	vstr	d8, [sp, #32]
 8010812:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 8010816:	ab08      	add	r3, sp, #32
 8010818:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801081a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801081e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8010822:	f006 ff2d 	bl	8017680 <rmw_time_equal>
 8010826:	b118      	cbz	r0, 8010830 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8010828:	ed8d 9b04 	vstr	d9, [sp, #16]
 801082c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8010830:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8010834:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 8010838:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 801083c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8010840:	f006 ff72 	bl	8017728 <rmw_time_total_nsec>
 8010844:	1830      	adds	r0, r6, r0
 8010846:	eb47 0101 	adc.w	r1, r7, r1
 801084a:	4548      	cmp	r0, r9
 801084c:	eb71 030a 	sbcs.w	r3, r1, sl
 8010850:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 8010854:	db05      	blt.n	8010862 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 8010856:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 801085a:	4591      	cmp	r9, r2
 801085c:	eb7a 0303 	sbcs.w	r3, sl, r3
 8010860:	da03      	bge.n	801086a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 8010862:	4817      	ldr	r0, [pc, #92]	@ (80108c0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8010864:	4641      	mov	r1, r8
 8010866:	f007 f8fd 	bl	8017a64 <put_memory>
 801086a:	f1bb 0f00 	cmp.w	fp, #0
 801086e:	d014      	beq.n	801089a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8010870:	46d8      	mov	r8, fp
 8010872:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8010876:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 801087a:	2b04      	cmp	r3, #4
 801087c:	d1bf      	bne.n	80107fe <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 801087e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8010882:	3340      	adds	r3, #64	@ 0x40
 8010884:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010886:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801088a:	e7c0      	b.n	801080e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 801088c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8010890:	3348      	adds	r3, #72	@ 0x48
 8010892:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010894:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010898:	e7b9      	b.n	801080e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 801089a:	b00d      	add	sp, #52	@ 0x34
 801089c:	ecbd 8b06 	vpop	{d8-d10}
 80108a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108a4:	f3af 8000 	nop.w
	...
 80108b0:	00000001 	.word	0x00000001
 80108b4:	00000000 	.word	0x00000000
 80108b8:	0000001e 	.word	0x0000001e
 80108bc:	00000000 	.word	0x00000000
 80108c0:	2001188c 	.word	0x2001188c

080108c4 <run_xrce_session>:
 80108c4:	b510      	push	{r4, lr}
 80108c6:	788c      	ldrb	r4, [r1, #2]
 80108c8:	b086      	sub	sp, #24
 80108ca:	2c01      	cmp	r4, #1
 80108cc:	f8ad 200e 	strh.w	r2, [sp, #14]
 80108d0:	d00c      	beq.n	80108ec <run_xrce_session+0x28>
 80108d2:	4619      	mov	r1, r3
 80108d4:	2301      	movs	r3, #1
 80108d6:	9300      	str	r3, [sp, #0]
 80108d8:	f10d 020e 	add.w	r2, sp, #14
 80108dc:	f10d 0317 	add.w	r3, sp, #23
 80108e0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80108e4:	f002 f80e 	bl	8012904 <uxr_run_session_until_all_status>
 80108e8:	b006      	add	sp, #24
 80108ea:	bd10      	pop	{r4, pc}
 80108ec:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80108f0:	f001 fc22 	bl	8012138 <uxr_flash_output_streams>
 80108f4:	4620      	mov	r0, r4
 80108f6:	b006      	add	sp, #24
 80108f8:	bd10      	pop	{r4, pc}
 80108fa:	bf00      	nop

080108fc <convert_qos_profile>:
 80108fc:	7a4a      	ldrb	r2, [r1, #9]
 80108fe:	f891 c008 	ldrb.w	ip, [r1, #8]
 8010902:	2a02      	cmp	r2, #2
 8010904:	bf18      	it	ne
 8010906:	2200      	movne	r2, #0
 8010908:	7002      	strb	r2, [r0, #0]
 801090a:	780a      	ldrb	r2, [r1, #0]
 801090c:	8889      	ldrh	r1, [r1, #4]
 801090e:	8081      	strh	r1, [r0, #4]
 8010910:	f1ac 0c02 	sub.w	ip, ip, #2
 8010914:	f1a2 0202 	sub.w	r2, r2, #2
 8010918:	fabc fc8c 	clz	ip, ip
 801091c:	fab2 f282 	clz	r2, r2
 8010920:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8010924:	0952      	lsrs	r2, r2, #5
 8010926:	f880 c001 	strb.w	ip, [r0, #1]
 801092a:	7082      	strb	r2, [r0, #2]
 801092c:	4770      	bx	lr
 801092e:	bf00      	nop

08010930 <generate_type_name>:
 8010930:	b530      	push	{r4, r5, lr}
 8010932:	2300      	movs	r3, #0
 8010934:	700b      	strb	r3, [r1, #0]
 8010936:	6803      	ldr	r3, [r0, #0]
 8010938:	b087      	sub	sp, #28
 801093a:	4614      	mov	r4, r2
 801093c:	b1d3      	cbz	r3, 8010974 <generate_type_name+0x44>
 801093e:	4a0f      	ldr	r2, [pc, #60]	@ (801097c <generate_type_name+0x4c>)
 8010940:	4615      	mov	r5, r2
 8010942:	9203      	str	r2, [sp, #12]
 8010944:	9500      	str	r5, [sp, #0]
 8010946:	6842      	ldr	r2, [r0, #4]
 8010948:	480d      	ldr	r0, [pc, #52]	@ (8010980 <generate_type_name+0x50>)
 801094a:	9001      	str	r0, [sp, #4]
 801094c:	4608      	mov	r0, r1
 801094e:	490d      	ldr	r1, [pc, #52]	@ (8010984 <generate_type_name+0x54>)
 8010950:	9204      	str	r2, [sp, #16]
 8010952:	9105      	str	r1, [sp, #20]
 8010954:	9102      	str	r1, [sp, #8]
 8010956:	4a0c      	ldr	r2, [pc, #48]	@ (8010988 <generate_type_name+0x58>)
 8010958:	4621      	mov	r1, r4
 801095a:	f009 faf7 	bl	8019f4c <sniprintf>
 801095e:	2800      	cmp	r0, #0
 8010960:	db05      	blt.n	801096e <generate_type_name+0x3e>
 8010962:	4284      	cmp	r4, r0
 8010964:	bfd4      	ite	le
 8010966:	2000      	movle	r0, #0
 8010968:	2001      	movgt	r0, #1
 801096a:	b007      	add	sp, #28
 801096c:	bd30      	pop	{r4, r5, pc}
 801096e:	2000      	movs	r0, #0
 8010970:	b007      	add	sp, #28
 8010972:	bd30      	pop	{r4, r5, pc}
 8010974:	4b05      	ldr	r3, [pc, #20]	@ (801098c <generate_type_name+0x5c>)
 8010976:	4a01      	ldr	r2, [pc, #4]	@ (801097c <generate_type_name+0x4c>)
 8010978:	461d      	mov	r5, r3
 801097a:	e7e2      	b.n	8010942 <generate_type_name+0x12>
 801097c:	0801b714 	.word	0x0801b714
 8010980:	0801b72c 	.word	0x0801b72c
 8010984:	0801b728 	.word	0x0801b728
 8010988:	0801b718 	.word	0x0801b718
 801098c:	0801b93c 	.word	0x0801b93c

08010990 <generate_topic_name>:
 8010990:	b510      	push	{r4, lr}
 8010992:	b082      	sub	sp, #8
 8010994:	4614      	mov	r4, r2
 8010996:	9000      	str	r0, [sp, #0]
 8010998:	4b08      	ldr	r3, [pc, #32]	@ (80109bc <generate_topic_name+0x2c>)
 801099a:	4a09      	ldr	r2, [pc, #36]	@ (80109c0 <generate_topic_name+0x30>)
 801099c:	4608      	mov	r0, r1
 801099e:	4621      	mov	r1, r4
 80109a0:	f009 fad4 	bl	8019f4c <sniprintf>
 80109a4:	2800      	cmp	r0, #0
 80109a6:	db05      	blt.n	80109b4 <generate_topic_name+0x24>
 80109a8:	4284      	cmp	r4, r0
 80109aa:	bfd4      	ite	le
 80109ac:	2000      	movle	r0, #0
 80109ae:	2001      	movgt	r0, #1
 80109b0:	b002      	add	sp, #8
 80109b2:	bd10      	pop	{r4, pc}
 80109b4:	2000      	movs	r0, #0
 80109b6:	b002      	add	sp, #8
 80109b8:	bd10      	pop	{r4, pc}
 80109ba:	bf00      	nop
 80109bc:	0801bd20 	.word	0x0801bd20
 80109c0:	0801b3e4 	.word	0x0801b3e4

080109c4 <is_uxrce_rmw_identifier_valid>:
 80109c4:	b510      	push	{r4, lr}
 80109c6:	4604      	mov	r4, r0
 80109c8:	b140      	cbz	r0, 80109dc <is_uxrce_rmw_identifier_valid+0x18>
 80109ca:	f007 f8a3 	bl	8017b14 <rmw_get_implementation_identifier>
 80109ce:	4601      	mov	r1, r0
 80109d0:	4620      	mov	r0, r4
 80109d2:	f7ef fc1d 	bl	8000210 <strcmp>
 80109d6:	fab0 f080 	clz	r0, r0
 80109da:	0940      	lsrs	r0, r0, #5
 80109dc:	bd10      	pop	{r4, pc}
 80109de:	bf00      	nop

080109e0 <get_message_typesupport_handle>:
 80109e0:	6883      	ldr	r3, [r0, #8]
 80109e2:	4718      	bx	r3

080109e4 <get_message_typesupport_handle_function>:
 80109e4:	b510      	push	{r4, lr}
 80109e6:	4604      	mov	r4, r0
 80109e8:	6800      	ldr	r0, [r0, #0]
 80109ea:	f7ef fc11 	bl	8000210 <strcmp>
 80109ee:	2800      	cmp	r0, #0
 80109f0:	bf0c      	ite	eq
 80109f2:	4620      	moveq	r0, r4
 80109f4:	2000      	movne	r0, #0
 80109f6:	bd10      	pop	{r4, pc}

080109f8 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 80109f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109fc:	6805      	ldr	r5, [r0, #0]
 80109fe:	4604      	mov	r4, r0
 8010a00:	4628      	mov	r0, r5
 8010a02:	460e      	mov	r6, r1
 8010a04:	f7ef fc04 	bl	8000210 <strcmp>
 8010a08:	b1c8      	cbz	r0, 8010a3e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8010a0a:	4b11      	ldr	r3, [pc, #68]	@ (8010a50 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	429d      	cmp	r5, r3
 8010a10:	d112      	bne.n	8010a38 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8010a12:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8010a16:	f8d8 4000 	ldr.w	r4, [r8]
 8010a1a:	b16c      	cbz	r4, 8010a38 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8010a1c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8010a20:	2700      	movs	r7, #0
 8010a22:	3d04      	subs	r5, #4
 8010a24:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8010a28:	4631      	mov	r1, r6
 8010a2a:	f7ef fbf1 	bl	8000210 <strcmp>
 8010a2e:	00bb      	lsls	r3, r7, #2
 8010a30:	b140      	cbz	r0, 8010a44 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8010a32:	3701      	adds	r7, #1
 8010a34:	42bc      	cmp	r4, r7
 8010a36:	d1f5      	bne.n	8010a24 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8010a38:	2000      	movs	r0, #0
 8010a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a3e:	4620      	mov	r0, r4
 8010a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a44:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010a48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010a4c:	58d3      	ldr	r3, [r2, r3]
 8010a4e:	4718      	bx	r3
 8010a50:	20000328 	.word	0x20000328

08010a54 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8010a54:	4b04      	ldr	r3, [pc, #16]	@ (8010a68 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8010a56:	681a      	ldr	r2, [r3, #0]
 8010a58:	b10a      	cbz	r2, 8010a5e <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 8010a5a:	4803      	ldr	r0, [pc, #12]	@ (8010a68 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8010a5c:	4770      	bx	lr
 8010a5e:	4a03      	ldr	r2, [pc, #12]	@ (8010a6c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8010a60:	4801      	ldr	r0, [pc, #4]	@ (8010a68 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8010a62:	6812      	ldr	r2, [r2, #0]
 8010a64:	601a      	str	r2, [r3, #0]
 8010a66:	4770      	bx	lr
 8010a68:	20000338 	.word	0x20000338
 8010a6c:	20000328 	.word	0x20000328

08010a70 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8010a70:	4a02      	ldr	r2, [pc, #8]	@ (8010a7c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 8010a72:	4b03      	ldr	r3, [pc, #12]	@ (8010a80 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 8010a74:	6812      	ldr	r2, [r2, #0]
 8010a76:	601a      	str	r2, [r3, #0]
 8010a78:	4770      	bx	lr
 8010a7a:	bf00      	nop
 8010a7c:	20000328 	.word	0x20000328
 8010a80:	20000338 	.word	0x20000338

08010a84 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 8010a84:	f007 bc4a 	b.w	801831c <std_msgs__msg__Header__init>

08010a88 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 8010a88:	f007 bc6c 	b.w	8018364 <std_msgs__msg__Header__fini>

08010a8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8010a8c:	b508      	push	{r3, lr}
 8010a8e:	f000 f8eb 	bl	8010c68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010a92:	4b06      	ldr	r3, [pc, #24]	@ (8010aac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8010a94:	4906      	ldr	r1, [pc, #24]	@ (8010ab0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 8010a96:	681a      	ldr	r2, [r3, #0]
 8010a98:	60c8      	str	r0, [r1, #12]
 8010a9a:	b10a      	cbz	r2, 8010aa0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 8010a9c:	4803      	ldr	r0, [pc, #12]	@ (8010aac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8010a9e:	bd08      	pop	{r3, pc}
 8010aa0:	4a04      	ldr	r2, [pc, #16]	@ (8010ab4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 8010aa2:	4802      	ldr	r0, [pc, #8]	@ (8010aac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8010aa4:	6812      	ldr	r2, [r2, #0]
 8010aa6:	601a      	str	r2, [r3, #0]
 8010aa8:	bd08      	pop	{r3, pc}
 8010aaa:	bf00      	nop
 8010aac:	200003bc 	.word	0x200003bc
 8010ab0:	20000344 	.word	0x20000344
 8010ab4:	2000032c 	.word	0x2000032c

08010ab8 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 8010ab8:	f007 bc60 	b.w	801837c <std_msgs__msg__Int32__init>

08010abc <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 8010abc:	f007 bc62 	b.w	8018384 <std_msgs__msg__Int32__fini>

08010ac0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8010ac0:	4b04      	ldr	r3, [pc, #16]	@ (8010ad4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8010ac2:	681a      	ldr	r2, [r3, #0]
 8010ac4:	b10a      	cbz	r2, 8010aca <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 8010ac6:	4803      	ldr	r0, [pc, #12]	@ (8010ad4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8010ac8:	4770      	bx	lr
 8010aca:	4a03      	ldr	r2, [pc, #12]	@ (8010ad8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8010acc:	4801      	ldr	r0, [pc, #4]	@ (8010ad4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8010ace:	6812      	ldr	r2, [r2, #0]
 8010ad0:	601a      	str	r2, [r3, #0]
 8010ad2:	4770      	bx	lr
 8010ad4:	20000404 	.word	0x20000404
 8010ad8:	2000032c 	.word	0x2000032c

08010adc <_Header__max_serialized_size>:
 8010adc:	b500      	push	{lr}
 8010ade:	b083      	sub	sp, #12
 8010ae0:	2301      	movs	r3, #1
 8010ae2:	2100      	movs	r1, #0
 8010ae4:	f10d 0007 	add.w	r0, sp, #7
 8010ae8:	f88d 3007 	strb.w	r3, [sp, #7]
 8010aec:	f000 f91a 	bl	8010d24 <max_serialized_size_builtin_interfaces__msg__Time>
 8010af0:	b003      	add	sp, #12
 8010af2:	f85d fb04 	ldr.w	pc, [sp], #4
 8010af6:	bf00      	nop

08010af8 <get_serialized_size_std_msgs__msg__Header>:
 8010af8:	b570      	push	{r4, r5, r6, lr}
 8010afa:	4605      	mov	r5, r0
 8010afc:	b168      	cbz	r0, 8010b1a <get_serialized_size_std_msgs__msg__Header+0x22>
 8010afe:	460c      	mov	r4, r1
 8010b00:	f000 f8c0 	bl	8010c84 <get_serialized_size_builtin_interfaces__msg__Time>
 8010b04:	1826      	adds	r6, r4, r0
 8010b06:	2104      	movs	r1, #4
 8010b08:	4630      	mov	r0, r6
 8010b0a:	f7fb fe2b 	bl	800c764 <ucdr_alignment>
 8010b0e:	68e9      	ldr	r1, [r5, #12]
 8010b10:	f1c4 0405 	rsb	r4, r4, #5
 8010b14:	440c      	add	r4, r1
 8010b16:	4404      	add	r4, r0
 8010b18:	19a0      	adds	r0, r4, r6
 8010b1a:	bd70      	pop	{r4, r5, r6, pc}

08010b1c <_Header__cdr_deserialize>:
 8010b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b1e:	460c      	mov	r4, r1
 8010b20:	b083      	sub	sp, #12
 8010b22:	b1e1      	cbz	r1, 8010b5e <_Header__cdr_deserialize+0x42>
 8010b24:	4606      	mov	r6, r0
 8010b26:	f000 f911 	bl	8010d4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010b2a:	6843      	ldr	r3, [r0, #4]
 8010b2c:	4621      	mov	r1, r4
 8010b2e:	68db      	ldr	r3, [r3, #12]
 8010b30:	4630      	mov	r0, r6
 8010b32:	4798      	blx	r3
 8010b34:	6927      	ldr	r7, [r4, #16]
 8010b36:	68a1      	ldr	r1, [r4, #8]
 8010b38:	ab01      	add	r3, sp, #4
 8010b3a:	463a      	mov	r2, r7
 8010b3c:	4630      	mov	r0, r6
 8010b3e:	f000 fc6f 	bl	8011420 <ucdr_deserialize_sequence_char>
 8010b42:	9b01      	ldr	r3, [sp, #4]
 8010b44:	4605      	mov	r5, r0
 8010b46:	b920      	cbnz	r0, 8010b52 <_Header__cdr_deserialize+0x36>
 8010b48:	429f      	cmp	r7, r3
 8010b4a:	d30c      	bcc.n	8010b66 <_Header__cdr_deserialize+0x4a>
 8010b4c:	4628      	mov	r0, r5
 8010b4e:	b003      	add	sp, #12
 8010b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b52:	b103      	cbz	r3, 8010b56 <_Header__cdr_deserialize+0x3a>
 8010b54:	3b01      	subs	r3, #1
 8010b56:	4628      	mov	r0, r5
 8010b58:	60e3      	str	r3, [r4, #12]
 8010b5a:	b003      	add	sp, #12
 8010b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b5e:	460d      	mov	r5, r1
 8010b60:	4628      	mov	r0, r5
 8010b62:	b003      	add	sp, #12
 8010b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b66:	2101      	movs	r1, #1
 8010b68:	75b0      	strb	r0, [r6, #22]
 8010b6a:	7571      	strb	r1, [r6, #21]
 8010b6c:	4630      	mov	r0, r6
 8010b6e:	60e5      	str	r5, [r4, #12]
 8010b70:	f7fb fe0e 	bl	800c790 <ucdr_align_to>
 8010b74:	4630      	mov	r0, r6
 8010b76:	9901      	ldr	r1, [sp, #4]
 8010b78:	f7fb fe40 	bl	800c7fc <ucdr_advance_buffer>
 8010b7c:	4628      	mov	r0, r5
 8010b7e:	b003      	add	sp, #12
 8010b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b82:	bf00      	nop

08010b84 <_Header__cdr_serialize>:
 8010b84:	b1f8      	cbz	r0, 8010bc6 <_Header__cdr_serialize+0x42>
 8010b86:	b570      	push	{r4, r5, r6, lr}
 8010b88:	4604      	mov	r4, r0
 8010b8a:	460d      	mov	r5, r1
 8010b8c:	f000 f8de 	bl	8010d4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010b90:	6843      	ldr	r3, [r0, #4]
 8010b92:	4629      	mov	r1, r5
 8010b94:	689b      	ldr	r3, [r3, #8]
 8010b96:	4620      	mov	r0, r4
 8010b98:	4798      	blx	r3
 8010b9a:	68a6      	ldr	r6, [r4, #8]
 8010b9c:	b156      	cbz	r6, 8010bb4 <_Header__cdr_serialize+0x30>
 8010b9e:	4630      	mov	r0, r6
 8010ba0:	f7ef fb40 	bl	8000224 <strlen>
 8010ba4:	4631      	mov	r1, r6
 8010ba6:	60e0      	str	r0, [r4, #12]
 8010ba8:	1c42      	adds	r2, r0, #1
 8010baa:	4628      	mov	r0, r5
 8010bac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010bb0:	f000 bc24 	b.w	80113fc <ucdr_serialize_sequence_char>
 8010bb4:	4630      	mov	r0, r6
 8010bb6:	60e0      	str	r0, [r4, #12]
 8010bb8:	4632      	mov	r2, r6
 8010bba:	4631      	mov	r1, r6
 8010bbc:	4628      	mov	r0, r5
 8010bbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010bc2:	f000 bc1b 	b.w	80113fc <ucdr_serialize_sequence_char>
 8010bc6:	4770      	bx	lr

08010bc8 <_Header__get_serialized_size>:
 8010bc8:	b538      	push	{r3, r4, r5, lr}
 8010bca:	4604      	mov	r4, r0
 8010bcc:	b150      	cbz	r0, 8010be4 <_Header__get_serialized_size+0x1c>
 8010bce:	2100      	movs	r1, #0
 8010bd0:	f000 f858 	bl	8010c84 <get_serialized_size_builtin_interfaces__msg__Time>
 8010bd4:	2104      	movs	r1, #4
 8010bd6:	4605      	mov	r5, r0
 8010bd8:	f7fb fdc4 	bl	800c764 <ucdr_alignment>
 8010bdc:	68e2      	ldr	r2, [r4, #12]
 8010bde:	3205      	adds	r2, #5
 8010be0:	1953      	adds	r3, r2, r5
 8010be2:	4418      	add	r0, r3
 8010be4:	bd38      	pop	{r3, r4, r5, pc}
 8010be6:	bf00      	nop

08010be8 <max_serialized_size_std_msgs__msg__Header>:
 8010be8:	b510      	push	{r4, lr}
 8010bea:	2301      	movs	r3, #1
 8010bec:	4604      	mov	r4, r0
 8010bee:	7003      	strb	r3, [r0, #0]
 8010bf0:	f000 f898 	bl	8010d24 <max_serialized_size_builtin_interfaces__msg__Time>
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	7023      	strb	r3, [r4, #0]
 8010bf8:	bd10      	pop	{r4, pc}
 8010bfa:	bf00      	nop

08010bfc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8010bfc:	4800      	ldr	r0, [pc, #0]	@ (8010c00 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 8010bfe:	4770      	bx	lr
 8010c00:	20000410 	.word	0x20000410

08010c04 <_Int32__max_serialized_size>:
 8010c04:	b508      	push	{r3, lr}
 8010c06:	2104      	movs	r1, #4
 8010c08:	2000      	movs	r0, #0
 8010c0a:	f7fb fdab 	bl	800c764 <ucdr_alignment>
 8010c0e:	3004      	adds	r0, #4
 8010c10:	bd08      	pop	{r3, pc}
 8010c12:	bf00      	nop

08010c14 <_Int32__cdr_deserialize>:
 8010c14:	b109      	cbz	r1, 8010c1a <_Int32__cdr_deserialize+0x6>
 8010c16:	f7fb b987 	b.w	800bf28 <ucdr_deserialize_int32_t>
 8010c1a:	4608      	mov	r0, r1
 8010c1c:	4770      	bx	lr
 8010c1e:	bf00      	nop

08010c20 <get_serialized_size_std_msgs__msg__Int32>:
 8010c20:	b138      	cbz	r0, 8010c32 <get_serialized_size_std_msgs__msg__Int32+0x12>
 8010c22:	b508      	push	{r3, lr}
 8010c24:	460b      	mov	r3, r1
 8010c26:	4618      	mov	r0, r3
 8010c28:	2104      	movs	r1, #4
 8010c2a:	f7fb fd9b 	bl	800c764 <ucdr_alignment>
 8010c2e:	3004      	adds	r0, #4
 8010c30:	bd08      	pop	{r3, pc}
 8010c32:	4770      	bx	lr

08010c34 <_Int32__cdr_serialize>:
 8010c34:	460a      	mov	r2, r1
 8010c36:	b118      	cbz	r0, 8010c40 <_Int32__cdr_serialize+0xc>
 8010c38:	6801      	ldr	r1, [r0, #0]
 8010c3a:	4610      	mov	r0, r2
 8010c3c:	f7fb b8dc 	b.w	800bdf8 <ucdr_serialize_int32_t>
 8010c40:	4770      	bx	lr
 8010c42:	bf00      	nop

08010c44 <_Int32__get_serialized_size>:
 8010c44:	b130      	cbz	r0, 8010c54 <_Int32__get_serialized_size+0x10>
 8010c46:	b508      	push	{r3, lr}
 8010c48:	2104      	movs	r1, #4
 8010c4a:	2000      	movs	r0, #0
 8010c4c:	f7fb fd8a 	bl	800c764 <ucdr_alignment>
 8010c50:	3004      	adds	r0, #4
 8010c52:	bd08      	pop	{r3, pc}
 8010c54:	4770      	bx	lr
 8010c56:	bf00      	nop

08010c58 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8010c58:	4800      	ldr	r0, [pc, #0]	@ (8010c5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 8010c5a:	4770      	bx	lr
 8010c5c:	20000438 	.word	0x20000438

08010c60 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 8010c60:	f007 bb92 	b.w	8018388 <builtin_interfaces__msg__Time__init>

08010c64 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 8010c64:	f007 bb94 	b.w	8018390 <builtin_interfaces__msg__Time__fini>

08010c68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8010c68:	4b04      	ldr	r3, [pc, #16]	@ (8010c7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8010c6a:	681a      	ldr	r2, [r3, #0]
 8010c6c:	b10a      	cbz	r2, 8010c72 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 8010c6e:	4803      	ldr	r0, [pc, #12]	@ (8010c7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8010c70:	4770      	bx	lr
 8010c72:	4a03      	ldr	r2, [pc, #12]	@ (8010c80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 8010c74:	4801      	ldr	r0, [pc, #4]	@ (8010c7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8010c76:	6812      	ldr	r2, [r2, #0]
 8010c78:	601a      	str	r2, [r3, #0]
 8010c7a:	4770      	bx	lr
 8010c7c:	200004d8 	.word	0x200004d8
 8010c80:	2000032c 	.word	0x2000032c

08010c84 <get_serialized_size_builtin_interfaces__msg__Time>:
 8010c84:	b180      	cbz	r0, 8010ca8 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 8010c86:	b538      	push	{r3, r4, r5, lr}
 8010c88:	460d      	mov	r5, r1
 8010c8a:	4628      	mov	r0, r5
 8010c8c:	2104      	movs	r1, #4
 8010c8e:	f7fb fd69 	bl	800c764 <ucdr_alignment>
 8010c92:	1d2b      	adds	r3, r5, #4
 8010c94:	181c      	adds	r4, r3, r0
 8010c96:	2104      	movs	r1, #4
 8010c98:	4620      	mov	r0, r4
 8010c9a:	f7fb fd63 	bl	800c764 <ucdr_alignment>
 8010c9e:	f1c5 0504 	rsb	r5, r5, #4
 8010ca2:	4428      	add	r0, r5
 8010ca4:	4420      	add	r0, r4
 8010ca6:	bd38      	pop	{r3, r4, r5, pc}
 8010ca8:	4770      	bx	lr
 8010caa:	bf00      	nop

08010cac <_Time__cdr_deserialize>:
 8010cac:	b538      	push	{r3, r4, r5, lr}
 8010cae:	460c      	mov	r4, r1
 8010cb0:	b141      	cbz	r1, 8010cc4 <_Time__cdr_deserialize+0x18>
 8010cb2:	4605      	mov	r5, r0
 8010cb4:	f7fb f938 	bl	800bf28 <ucdr_deserialize_int32_t>
 8010cb8:	1d21      	adds	r1, r4, #4
 8010cba:	4628      	mov	r0, r5
 8010cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010cc0:	f7fa bdb0 	b.w	800b824 <ucdr_deserialize_uint32_t>
 8010cc4:	4608      	mov	r0, r1
 8010cc6:	bd38      	pop	{r3, r4, r5, pc}

08010cc8 <_Time__cdr_serialize>:
 8010cc8:	b160      	cbz	r0, 8010ce4 <_Time__cdr_serialize+0x1c>
 8010cca:	b538      	push	{r3, r4, r5, lr}
 8010ccc:	460d      	mov	r5, r1
 8010cce:	4604      	mov	r4, r0
 8010cd0:	6801      	ldr	r1, [r0, #0]
 8010cd2:	4628      	mov	r0, r5
 8010cd4:	f7fb f890 	bl	800bdf8 <ucdr_serialize_int32_t>
 8010cd8:	6861      	ldr	r1, [r4, #4]
 8010cda:	4628      	mov	r0, r5
 8010cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010ce0:	f7fa bc70 	b.w	800b5c4 <ucdr_serialize_uint32_t>
 8010ce4:	4770      	bx	lr
 8010ce6:	bf00      	nop

08010ce8 <_Time__get_serialized_size>:
 8010ce8:	b160      	cbz	r0, 8010d04 <_Time__get_serialized_size+0x1c>
 8010cea:	b510      	push	{r4, lr}
 8010cec:	2104      	movs	r1, #4
 8010cee:	2000      	movs	r0, #0
 8010cf0:	f7fb fd38 	bl	800c764 <ucdr_alignment>
 8010cf4:	1d04      	adds	r4, r0, #4
 8010cf6:	2104      	movs	r1, #4
 8010cf8:	4620      	mov	r0, r4
 8010cfa:	f7fb fd33 	bl	800c764 <ucdr_alignment>
 8010cfe:	3004      	adds	r0, #4
 8010d00:	4420      	add	r0, r4
 8010d02:	bd10      	pop	{r4, pc}
 8010d04:	4770      	bx	lr
 8010d06:	bf00      	nop

08010d08 <_Time__max_serialized_size>:
 8010d08:	b510      	push	{r4, lr}
 8010d0a:	2104      	movs	r1, #4
 8010d0c:	2000      	movs	r0, #0
 8010d0e:	f7fb fd29 	bl	800c764 <ucdr_alignment>
 8010d12:	1d04      	adds	r4, r0, #4
 8010d14:	2104      	movs	r1, #4
 8010d16:	4620      	mov	r0, r4
 8010d18:	f7fb fd24 	bl	800c764 <ucdr_alignment>
 8010d1c:	3004      	adds	r0, #4
 8010d1e:	4420      	add	r0, r4
 8010d20:	bd10      	pop	{r4, pc}
 8010d22:	bf00      	nop

08010d24 <max_serialized_size_builtin_interfaces__msg__Time>:
 8010d24:	b538      	push	{r3, r4, r5, lr}
 8010d26:	460c      	mov	r4, r1
 8010d28:	2301      	movs	r3, #1
 8010d2a:	7003      	strb	r3, [r0, #0]
 8010d2c:	2104      	movs	r1, #4
 8010d2e:	4620      	mov	r0, r4
 8010d30:	f7fb fd18 	bl	800c764 <ucdr_alignment>
 8010d34:	1d25      	adds	r5, r4, #4
 8010d36:	4405      	add	r5, r0
 8010d38:	2104      	movs	r1, #4
 8010d3a:	4628      	mov	r0, r5
 8010d3c:	f7fb fd12 	bl	800c764 <ucdr_alignment>
 8010d40:	f1c4 0404 	rsb	r4, r4, #4
 8010d44:	4420      	add	r0, r4
 8010d46:	4428      	add	r0, r5
 8010d48:	bd38      	pop	{r3, r4, r5, pc}
 8010d4a:	bf00      	nop

08010d4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8010d4c:	4800      	ldr	r0, [pc, #0]	@ (8010d50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 8010d4e:	4770      	bx	lr
 8010d50:	200004e4 	.word	0x200004e4

08010d54 <geometry_msgs__msg__Twist__init>:
 8010d54:	b570      	push	{r4, r5, r6, lr}
 8010d56:	4605      	mov	r5, r0
 8010d58:	b1a8      	cbz	r0, 8010d86 <geometry_msgs__msg__Twist__init+0x32>
 8010d5a:	f000 f82b 	bl	8010db4 <geometry_msgs__msg__Vector3__init>
 8010d5e:	4604      	mov	r4, r0
 8010d60:	b140      	cbz	r0, 8010d74 <geometry_msgs__msg__Twist__init+0x20>
 8010d62:	f105 0618 	add.w	r6, r5, #24
 8010d66:	4630      	mov	r0, r6
 8010d68:	f000 f824 	bl	8010db4 <geometry_msgs__msg__Vector3__init>
 8010d6c:	4604      	mov	r4, r0
 8010d6e:	b168      	cbz	r0, 8010d8c <geometry_msgs__msg__Twist__init+0x38>
 8010d70:	4620      	mov	r0, r4
 8010d72:	bd70      	pop	{r4, r5, r6, pc}
 8010d74:	4628      	mov	r0, r5
 8010d76:	f000 f821 	bl	8010dbc <geometry_msgs__msg__Vector3__fini>
 8010d7a:	f105 0018 	add.w	r0, r5, #24
 8010d7e:	f000 f81d 	bl	8010dbc <geometry_msgs__msg__Vector3__fini>
 8010d82:	4620      	mov	r0, r4
 8010d84:	bd70      	pop	{r4, r5, r6, pc}
 8010d86:	4604      	mov	r4, r0
 8010d88:	4620      	mov	r0, r4
 8010d8a:	bd70      	pop	{r4, r5, r6, pc}
 8010d8c:	4628      	mov	r0, r5
 8010d8e:	f000 f815 	bl	8010dbc <geometry_msgs__msg__Vector3__fini>
 8010d92:	4630      	mov	r0, r6
 8010d94:	f000 f812 	bl	8010dbc <geometry_msgs__msg__Vector3__fini>
 8010d98:	e7ea      	b.n	8010d70 <geometry_msgs__msg__Twist__init+0x1c>
 8010d9a:	bf00      	nop

08010d9c <geometry_msgs__msg__Twist__fini>:
 8010d9c:	b148      	cbz	r0, 8010db2 <geometry_msgs__msg__Twist__fini+0x16>
 8010d9e:	b510      	push	{r4, lr}
 8010da0:	4604      	mov	r4, r0
 8010da2:	f000 f80b 	bl	8010dbc <geometry_msgs__msg__Vector3__fini>
 8010da6:	f104 0018 	add.w	r0, r4, #24
 8010daa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010dae:	f000 b805 	b.w	8010dbc <geometry_msgs__msg__Vector3__fini>
 8010db2:	4770      	bx	lr

08010db4 <geometry_msgs__msg__Vector3__init>:
 8010db4:	3800      	subs	r0, #0
 8010db6:	bf18      	it	ne
 8010db8:	2001      	movne	r0, #1
 8010dba:	4770      	bx	lr

08010dbc <geometry_msgs__msg__Vector3__fini>:
 8010dbc:	4770      	bx	lr
 8010dbe:	bf00      	nop

08010dc0 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__size_function__PoseWithCovariance__covariance>:
 8010dc0:	2024      	movs	r0, #36	@ 0x24
 8010dc2:	4770      	bx	lr

08010dc4 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__get_const_function__PoseWithCovariance__covariance>:
 8010dc4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8010dc8:	4770      	bx	lr
 8010dca:	bf00      	nop

08010dcc <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__fetch_function__PoseWithCovariance__covariance>:
 8010dcc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8010dd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010dd4:	e9c2 0100 	strd	r0, r1, [r2]
 8010dd8:	4770      	bx	lr
 8010dda:	bf00      	nop

08010ddc <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__assign_function__PoseWithCovariance__covariance>:
 8010ddc:	e9d2 2300 	ldrd	r2, r3, [r2]
 8010de0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8010de4:	e9c1 2300 	strd	r2, r3, [r1]
 8010de8:	4770      	bx	lr
 8010dea:	bf00      	nop

08010dec <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__PoseWithCovariance_init_function>:
 8010dec:	f007 bad2 	b.w	8018394 <geometry_msgs__msg__PoseWithCovariance__init>

08010df0 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__PoseWithCovariance_fini_function>:
 8010df0:	f007 bae2 	b.w	80183b8 <geometry_msgs__msg__PoseWithCovariance__fini>

08010df4 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__get_function__PoseWithCovariance__covariance>:
 8010df4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8010df8:	4770      	bx	lr
 8010dfa:	bf00      	nop

08010dfc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>:
 8010dfc:	b508      	push	{r3, lr}
 8010dfe:	f007 faf9 	bl	80183f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 8010e02:	4b06      	ldr	r3, [pc, #24]	@ (8010e1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x20>)
 8010e04:	4906      	ldr	r1, [pc, #24]	@ (8010e20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x24>)
 8010e06:	681a      	ldr	r2, [r3, #0]
 8010e08:	60c8      	str	r0, [r1, #12]
 8010e0a:	b10a      	cbz	r2, 8010e10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x14>
 8010e0c:	4803      	ldr	r0, [pc, #12]	@ (8010e1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x20>)
 8010e0e:	bd08      	pop	{r3, pc}
 8010e10:	4a04      	ldr	r2, [pc, #16]	@ (8010e24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x28>)
 8010e12:	4802      	ldr	r0, [pc, #8]	@ (8010e1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x20>)
 8010e14:	6812      	ldr	r2, [r2, #0]
 8010e16:	601a      	str	r2, [r3, #0]
 8010e18:	bd08      	pop	{r3, pc}
 8010e1a:	bf00      	nop
 8010e1c:	20000584 	.word	0x20000584
 8010e20:	2000050c 	.word	0x2000050c
 8010e24:	2000032c 	.word	0x2000032c

08010e28 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__size_function__TwistWithCovariance__covariance>:
 8010e28:	2024      	movs	r0, #36	@ 0x24
 8010e2a:	4770      	bx	lr

08010e2c <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__get_const_function__TwistWithCovariance__covariance>:
 8010e2c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8010e30:	4770      	bx	lr
 8010e32:	bf00      	nop

08010e34 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__fetch_function__TwistWithCovariance__covariance>:
 8010e34:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8010e38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010e3c:	e9c2 0100 	strd	r0, r1, [r2]
 8010e40:	4770      	bx	lr
 8010e42:	bf00      	nop

08010e44 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__assign_function__TwistWithCovariance__covariance>:
 8010e44:	e9d2 2300 	ldrd	r2, r3, [r2]
 8010e48:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8010e4c:	e9c1 2300 	strd	r2, r3, [r1]
 8010e50:	4770      	bx	lr
 8010e52:	bf00      	nop

08010e54 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__TwistWithCovariance_init_function>:
 8010e54:	f007 bab4 	b.w	80183c0 <geometry_msgs__msg__TwistWithCovariance__init>

08010e58 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__TwistWithCovariance_fini_function>:
 8010e58:	f007 bac4 	b.w	80183e4 <geometry_msgs__msg__TwistWithCovariance__fini>

08010e5c <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__get_function__TwistWithCovariance__covariance>:
 8010e5c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8010e60:	4770      	bx	lr
 8010e62:	bf00      	nop

08010e64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>:
 8010e64:	b508      	push	{r3, lr}
 8010e66:	f7fa f83b 	bl	800aee0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8010e6a:	4b06      	ldr	r3, [pc, #24]	@ (8010e84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x20>)
 8010e6c:	4906      	ldr	r1, [pc, #24]	@ (8010e88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x24>)
 8010e6e:	681a      	ldr	r2, [r3, #0]
 8010e70:	60c8      	str	r0, [r1, #12]
 8010e72:	b10a      	cbz	r2, 8010e78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x14>
 8010e74:	4803      	ldr	r0, [pc, #12]	@ (8010e84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x20>)
 8010e76:	bd08      	pop	{r3, pc}
 8010e78:	4a04      	ldr	r2, [pc, #16]	@ (8010e8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x28>)
 8010e7a:	4802      	ldr	r0, [pc, #8]	@ (8010e84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x20>)
 8010e7c:	6812      	ldr	r2, [r2, #0]
 8010e7e:	601a      	str	r2, [r3, #0]
 8010e80:	bd08      	pop	{r3, pc}
 8010e82:	bf00      	nop
 8010e84:	20000608 	.word	0x20000608
 8010e88:	20000590 	.word	0x20000590
 8010e8c:	2000032c 	.word	0x2000032c

08010e90 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>:
 8010e90:	b538      	push	{r3, r4, r5, lr}
 8010e92:	b158      	cbz	r0, 8010eac <get_serialized_size_geometry_msgs__msg__PoseWithCovariance+0x1c>
 8010e94:	460d      	mov	r5, r1
 8010e96:	f007 fad7 	bl	8018448 <get_serialized_size_geometry_msgs__msg__Pose>
 8010e9a:	182c      	adds	r4, r5, r0
 8010e9c:	2108      	movs	r1, #8
 8010e9e:	4620      	mov	r0, r4
 8010ea0:	f7fb fc60 	bl	800c764 <ucdr_alignment>
 8010ea4:	f5c5 7590 	rsb	r5, r5, #288	@ 0x120
 8010ea8:	4428      	add	r0, r5
 8010eaa:	4420      	add	r0, r4
 8010eac:	bd38      	pop	{r3, r4, r5, pc}
 8010eae:	bf00      	nop

08010eb0 <_PoseWithCovariance__cdr_deserialize>:
 8010eb0:	b538      	push	{r3, r4, r5, lr}
 8010eb2:	460c      	mov	r4, r1
 8010eb4:	b179      	cbz	r1, 8010ed6 <_PoseWithCovariance__cdr_deserialize+0x26>
 8010eb6:	4605      	mov	r5, r0
 8010eb8:	f007 fb36 	bl	8018528 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 8010ebc:	6843      	ldr	r3, [r0, #4]
 8010ebe:	4621      	mov	r1, r4
 8010ec0:	68db      	ldr	r3, [r3, #12]
 8010ec2:	4628      	mov	r0, r5
 8010ec4:	4798      	blx	r3
 8010ec6:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 8010eca:	4628      	mov	r0, r5
 8010ecc:	2224      	movs	r2, #36	@ 0x24
 8010ece:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010ed2:	f000 ba3d 	b.w	8011350 <ucdr_deserialize_array_double>
 8010ed6:	4608      	mov	r0, r1
 8010ed8:	bd38      	pop	{r3, r4, r5, pc}
 8010eda:	bf00      	nop

08010edc <_PoseWithCovariance__cdr_serialize>:
 8010edc:	b188      	cbz	r0, 8010f02 <_PoseWithCovariance__cdr_serialize+0x26>
 8010ede:	b538      	push	{r3, r4, r5, lr}
 8010ee0:	460d      	mov	r5, r1
 8010ee2:	4604      	mov	r4, r0
 8010ee4:	f007 fb20 	bl	8018528 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 8010ee8:	6843      	ldr	r3, [r0, #4]
 8010eea:	4629      	mov	r1, r5
 8010eec:	689b      	ldr	r3, [r3, #8]
 8010eee:	4620      	mov	r0, r4
 8010ef0:	4798      	blx	r3
 8010ef2:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 8010ef6:	4628      	mov	r0, r5
 8010ef8:	2224      	movs	r2, #36	@ 0x24
 8010efa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010efe:	f000 b9d3 	b.w	80112a8 <ucdr_serialize_array_double>
 8010f02:	4770      	bx	lr

08010f04 <_PoseWithCovariance__get_serialized_size>:
 8010f04:	b158      	cbz	r0, 8010f1e <_PoseWithCovariance__get_serialized_size+0x1a>
 8010f06:	b510      	push	{r4, lr}
 8010f08:	2100      	movs	r1, #0
 8010f0a:	f007 fa9d 	bl	8018448 <get_serialized_size_geometry_msgs__msg__Pose>
 8010f0e:	2108      	movs	r1, #8
 8010f10:	4604      	mov	r4, r0
 8010f12:	f7fb fc27 	bl	800c764 <ucdr_alignment>
 8010f16:	4420      	add	r0, r4
 8010f18:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 8010f1c:	bd10      	pop	{r4, pc}
 8010f1e:	4770      	bx	lr

08010f20 <_PoseWithCovariance__max_serialized_size>:
 8010f20:	b510      	push	{r4, lr}
 8010f22:	b082      	sub	sp, #8
 8010f24:	2301      	movs	r3, #1
 8010f26:	2100      	movs	r1, #0
 8010f28:	f10d 0007 	add.w	r0, sp, #7
 8010f2c:	f88d 3007 	strb.w	r3, [sp, #7]
 8010f30:	f007 faec 	bl	801850c <max_serialized_size_geometry_msgs__msg__Pose>
 8010f34:	2108      	movs	r1, #8
 8010f36:	4604      	mov	r4, r0
 8010f38:	f7fb fc14 	bl	800c764 <ucdr_alignment>
 8010f3c:	4420      	add	r0, r4
 8010f3e:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 8010f42:	b002      	add	sp, #8
 8010f44:	bd10      	pop	{r4, pc}
 8010f46:	bf00      	nop

08010f48 <max_serialized_size_geometry_msgs__msg__PoseWithCovariance>:
 8010f48:	b538      	push	{r3, r4, r5, lr}
 8010f4a:	2301      	movs	r3, #1
 8010f4c:	7003      	strb	r3, [r0, #0]
 8010f4e:	460c      	mov	r4, r1
 8010f50:	f007 fadc 	bl	801850c <max_serialized_size_geometry_msgs__msg__Pose>
 8010f54:	1825      	adds	r5, r4, r0
 8010f56:	2108      	movs	r1, #8
 8010f58:	4628      	mov	r0, r5
 8010f5a:	f7fb fc03 	bl	800c764 <ucdr_alignment>
 8010f5e:	f5c4 7490 	rsb	r4, r4, #288	@ 0x120
 8010f62:	4420      	add	r0, r4
 8010f64:	4428      	add	r0, r5
 8010f66:	bd38      	pop	{r3, r4, r5, pc}

08010f68 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>:
 8010f68:	4800      	ldr	r0, [pc, #0]	@ (8010f6c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x4>)
 8010f6a:	4770      	bx	lr
 8010f6c:	20000614 	.word	0x20000614

08010f70 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>:
 8010f70:	b538      	push	{r3, r4, r5, lr}
 8010f72:	b158      	cbz	r0, 8010f8c <get_serialized_size_geometry_msgs__msg__TwistWithCovariance+0x1c>
 8010f74:	460d      	mov	r5, r1
 8010f76:	f7f9 ffdd 	bl	800af34 <get_serialized_size_geometry_msgs__msg__Twist>
 8010f7a:	182c      	adds	r4, r5, r0
 8010f7c:	2108      	movs	r1, #8
 8010f7e:	4620      	mov	r0, r4
 8010f80:	f7fb fbf0 	bl	800c764 <ucdr_alignment>
 8010f84:	f5c5 7590 	rsb	r5, r5, #288	@ 0x120
 8010f88:	4428      	add	r0, r5
 8010f8a:	4420      	add	r0, r4
 8010f8c:	bd38      	pop	{r3, r4, r5, pc}
 8010f8e:	bf00      	nop

08010f90 <_TwistWithCovariance__cdr_deserialize>:
 8010f90:	b538      	push	{r3, r4, r5, lr}
 8010f92:	460c      	mov	r4, r1
 8010f94:	b179      	cbz	r1, 8010fb6 <_TwistWithCovariance__cdr_deserialize+0x26>
 8010f96:	4605      	mov	r5, r0
 8010f98:	f7fa f83c 	bl	800b014 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8010f9c:	6843      	ldr	r3, [r0, #4]
 8010f9e:	4621      	mov	r1, r4
 8010fa0:	68db      	ldr	r3, [r3, #12]
 8010fa2:	4628      	mov	r0, r5
 8010fa4:	4798      	blx	r3
 8010fa6:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8010faa:	4628      	mov	r0, r5
 8010fac:	2224      	movs	r2, #36	@ 0x24
 8010fae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010fb2:	f000 b9cd 	b.w	8011350 <ucdr_deserialize_array_double>
 8010fb6:	4608      	mov	r0, r1
 8010fb8:	bd38      	pop	{r3, r4, r5, pc}
 8010fba:	bf00      	nop

08010fbc <_TwistWithCovariance__cdr_serialize>:
 8010fbc:	b188      	cbz	r0, 8010fe2 <_TwistWithCovariance__cdr_serialize+0x26>
 8010fbe:	b538      	push	{r3, r4, r5, lr}
 8010fc0:	460d      	mov	r5, r1
 8010fc2:	4604      	mov	r4, r0
 8010fc4:	f7fa f826 	bl	800b014 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8010fc8:	6843      	ldr	r3, [r0, #4]
 8010fca:	4629      	mov	r1, r5
 8010fcc:	689b      	ldr	r3, [r3, #8]
 8010fce:	4620      	mov	r0, r4
 8010fd0:	4798      	blx	r3
 8010fd2:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8010fd6:	4628      	mov	r0, r5
 8010fd8:	2224      	movs	r2, #36	@ 0x24
 8010fda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010fde:	f000 b963 	b.w	80112a8 <ucdr_serialize_array_double>
 8010fe2:	4770      	bx	lr

08010fe4 <_TwistWithCovariance__get_serialized_size>:
 8010fe4:	b158      	cbz	r0, 8010ffe <_TwistWithCovariance__get_serialized_size+0x1a>
 8010fe6:	b510      	push	{r4, lr}
 8010fe8:	2100      	movs	r1, #0
 8010fea:	f7f9 ffa3 	bl	800af34 <get_serialized_size_geometry_msgs__msg__Twist>
 8010fee:	2108      	movs	r1, #8
 8010ff0:	4604      	mov	r4, r0
 8010ff2:	f7fb fbb7 	bl	800c764 <ucdr_alignment>
 8010ff6:	4420      	add	r0, r4
 8010ff8:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 8010ffc:	bd10      	pop	{r4, pc}
 8010ffe:	4770      	bx	lr

08011000 <_TwistWithCovariance__max_serialized_size>:
 8011000:	b510      	push	{r4, lr}
 8011002:	b082      	sub	sp, #8
 8011004:	2301      	movs	r3, #1
 8011006:	2100      	movs	r1, #0
 8011008:	f10d 0007 	add.w	r0, sp, #7
 801100c:	f88d 3007 	strb.w	r3, [sp, #7]
 8011010:	f7f9 fff2 	bl	800aff8 <max_serialized_size_geometry_msgs__msg__Twist>
 8011014:	2108      	movs	r1, #8
 8011016:	4604      	mov	r4, r0
 8011018:	f7fb fba4 	bl	800c764 <ucdr_alignment>
 801101c:	4420      	add	r0, r4
 801101e:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 8011022:	b002      	add	sp, #8
 8011024:	bd10      	pop	{r4, pc}
 8011026:	bf00      	nop

08011028 <max_serialized_size_geometry_msgs__msg__TwistWithCovariance>:
 8011028:	b538      	push	{r3, r4, r5, lr}
 801102a:	2301      	movs	r3, #1
 801102c:	7003      	strb	r3, [r0, #0]
 801102e:	460c      	mov	r4, r1
 8011030:	f7f9 ffe2 	bl	800aff8 <max_serialized_size_geometry_msgs__msg__Twist>
 8011034:	1825      	adds	r5, r4, r0
 8011036:	2108      	movs	r1, #8
 8011038:	4628      	mov	r0, r5
 801103a:	f7fb fb93 	bl	800c764 <ucdr_alignment>
 801103e:	f5c4 7490 	rsb	r4, r4, #288	@ 0x120
 8011042:	4420      	add	r0, r4
 8011044:	4428      	add	r0, r5
 8011046:	bd38      	pop	{r3, r4, r5, pc}

08011048 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>:
 8011048:	4800      	ldr	r0, [pc, #0]	@ (801104c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x4>)
 801104a:	4770      	bx	lr
 801104c:	2000063c 	.word	0x2000063c

08011050 <ucdr_serialize_endian_array_char>:
 8011050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011054:	4619      	mov	r1, r3
 8011056:	461f      	mov	r7, r3
 8011058:	4605      	mov	r5, r0
 801105a:	4690      	mov	r8, r2
 801105c:	f7fb fb2a 	bl	800c6b4 <ucdr_check_buffer_available_for>
 8011060:	b9e0      	cbnz	r0, 801109c <ucdr_serialize_endian_array_char+0x4c>
 8011062:	463e      	mov	r6, r7
 8011064:	e009      	b.n	801107a <ucdr_serialize_endian_array_char+0x2a>
 8011066:	68a8      	ldr	r0, [r5, #8]
 8011068:	f009 f9ad 	bl	801a3c6 <memcpy>
 801106c:	68ab      	ldr	r3, [r5, #8]
 801106e:	6928      	ldr	r0, [r5, #16]
 8011070:	4423      	add	r3, r4
 8011072:	4420      	add	r0, r4
 8011074:	1b36      	subs	r6, r6, r4
 8011076:	60ab      	str	r3, [r5, #8]
 8011078:	6128      	str	r0, [r5, #16]
 801107a:	4631      	mov	r1, r6
 801107c:	2201      	movs	r2, #1
 801107e:	4628      	mov	r0, r5
 8011080:	f7fb fba0 	bl	800c7c4 <ucdr_check_final_buffer_behavior_array>
 8011084:	1bb9      	subs	r1, r7, r6
 8011086:	4441      	add	r1, r8
 8011088:	4604      	mov	r4, r0
 801108a:	4602      	mov	r2, r0
 801108c:	2800      	cmp	r0, #0
 801108e:	d1ea      	bne.n	8011066 <ucdr_serialize_endian_array_char+0x16>
 8011090:	2301      	movs	r3, #1
 8011092:	7da8      	ldrb	r0, [r5, #22]
 8011094:	756b      	strb	r3, [r5, #21]
 8011096:	4058      	eors	r0, r3
 8011098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801109c:	463a      	mov	r2, r7
 801109e:	68a8      	ldr	r0, [r5, #8]
 80110a0:	4641      	mov	r1, r8
 80110a2:	f009 f990 	bl	801a3c6 <memcpy>
 80110a6:	68aa      	ldr	r2, [r5, #8]
 80110a8:	692b      	ldr	r3, [r5, #16]
 80110aa:	443a      	add	r2, r7
 80110ac:	443b      	add	r3, r7
 80110ae:	60aa      	str	r2, [r5, #8]
 80110b0:	612b      	str	r3, [r5, #16]
 80110b2:	e7ed      	b.n	8011090 <ucdr_serialize_endian_array_char+0x40>

080110b4 <ucdr_deserialize_endian_array_char>:
 80110b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110b8:	4619      	mov	r1, r3
 80110ba:	461f      	mov	r7, r3
 80110bc:	4605      	mov	r5, r0
 80110be:	4690      	mov	r8, r2
 80110c0:	f7fb faf8 	bl	800c6b4 <ucdr_check_buffer_available_for>
 80110c4:	b9e0      	cbnz	r0, 8011100 <ucdr_deserialize_endian_array_char+0x4c>
 80110c6:	463e      	mov	r6, r7
 80110c8:	e009      	b.n	80110de <ucdr_deserialize_endian_array_char+0x2a>
 80110ca:	68a9      	ldr	r1, [r5, #8]
 80110cc:	f009 f97b 	bl	801a3c6 <memcpy>
 80110d0:	68ab      	ldr	r3, [r5, #8]
 80110d2:	6928      	ldr	r0, [r5, #16]
 80110d4:	4423      	add	r3, r4
 80110d6:	4420      	add	r0, r4
 80110d8:	1b36      	subs	r6, r6, r4
 80110da:	60ab      	str	r3, [r5, #8]
 80110dc:	6128      	str	r0, [r5, #16]
 80110de:	2201      	movs	r2, #1
 80110e0:	4631      	mov	r1, r6
 80110e2:	4628      	mov	r0, r5
 80110e4:	f7fb fb6e 	bl	800c7c4 <ucdr_check_final_buffer_behavior_array>
 80110e8:	4604      	mov	r4, r0
 80110ea:	1bb8      	subs	r0, r7, r6
 80110ec:	4440      	add	r0, r8
 80110ee:	4622      	mov	r2, r4
 80110f0:	2c00      	cmp	r4, #0
 80110f2:	d1ea      	bne.n	80110ca <ucdr_deserialize_endian_array_char+0x16>
 80110f4:	2301      	movs	r3, #1
 80110f6:	7da8      	ldrb	r0, [r5, #22]
 80110f8:	756b      	strb	r3, [r5, #21]
 80110fa:	4058      	eors	r0, r3
 80110fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011100:	463a      	mov	r2, r7
 8011102:	68a9      	ldr	r1, [r5, #8]
 8011104:	4640      	mov	r0, r8
 8011106:	f009 f95e 	bl	801a3c6 <memcpy>
 801110a:	68aa      	ldr	r2, [r5, #8]
 801110c:	692b      	ldr	r3, [r5, #16]
 801110e:	443a      	add	r2, r7
 8011110:	443b      	add	r3, r7
 8011112:	60aa      	str	r2, [r5, #8]
 8011114:	612b      	str	r3, [r5, #16]
 8011116:	e7ed      	b.n	80110f4 <ucdr_deserialize_endian_array_char+0x40>

08011118 <ucdr_serialize_array_uint8_t>:
 8011118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801111c:	4688      	mov	r8, r1
 801111e:	4611      	mov	r1, r2
 8011120:	4617      	mov	r7, r2
 8011122:	4605      	mov	r5, r0
 8011124:	f7fb fac6 	bl	800c6b4 <ucdr_check_buffer_available_for>
 8011128:	b9e0      	cbnz	r0, 8011164 <ucdr_serialize_array_uint8_t+0x4c>
 801112a:	463e      	mov	r6, r7
 801112c:	e009      	b.n	8011142 <ucdr_serialize_array_uint8_t+0x2a>
 801112e:	68a8      	ldr	r0, [r5, #8]
 8011130:	f009 f949 	bl	801a3c6 <memcpy>
 8011134:	68aa      	ldr	r2, [r5, #8]
 8011136:	692b      	ldr	r3, [r5, #16]
 8011138:	4422      	add	r2, r4
 801113a:	4423      	add	r3, r4
 801113c:	1b36      	subs	r6, r6, r4
 801113e:	60aa      	str	r2, [r5, #8]
 8011140:	612b      	str	r3, [r5, #16]
 8011142:	4631      	mov	r1, r6
 8011144:	2201      	movs	r2, #1
 8011146:	4628      	mov	r0, r5
 8011148:	f7fb fb3c 	bl	800c7c4 <ucdr_check_final_buffer_behavior_array>
 801114c:	1bb9      	subs	r1, r7, r6
 801114e:	4441      	add	r1, r8
 8011150:	4604      	mov	r4, r0
 8011152:	4602      	mov	r2, r0
 8011154:	2800      	cmp	r0, #0
 8011156:	d1ea      	bne.n	801112e <ucdr_serialize_array_uint8_t+0x16>
 8011158:	2301      	movs	r3, #1
 801115a:	7da8      	ldrb	r0, [r5, #22]
 801115c:	756b      	strb	r3, [r5, #21]
 801115e:	4058      	eors	r0, r3
 8011160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011164:	463a      	mov	r2, r7
 8011166:	68a8      	ldr	r0, [r5, #8]
 8011168:	4641      	mov	r1, r8
 801116a:	f009 f92c 	bl	801a3c6 <memcpy>
 801116e:	68aa      	ldr	r2, [r5, #8]
 8011170:	692b      	ldr	r3, [r5, #16]
 8011172:	443a      	add	r2, r7
 8011174:	443b      	add	r3, r7
 8011176:	60aa      	str	r2, [r5, #8]
 8011178:	612b      	str	r3, [r5, #16]
 801117a:	e7ed      	b.n	8011158 <ucdr_serialize_array_uint8_t+0x40>

0801117c <ucdr_serialize_endian_array_uint8_t>:
 801117c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011180:	4619      	mov	r1, r3
 8011182:	461f      	mov	r7, r3
 8011184:	4605      	mov	r5, r0
 8011186:	4690      	mov	r8, r2
 8011188:	f7fb fa94 	bl	800c6b4 <ucdr_check_buffer_available_for>
 801118c:	b9e0      	cbnz	r0, 80111c8 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801118e:	463e      	mov	r6, r7
 8011190:	e009      	b.n	80111a6 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8011192:	68a8      	ldr	r0, [r5, #8]
 8011194:	f009 f917 	bl	801a3c6 <memcpy>
 8011198:	68ab      	ldr	r3, [r5, #8]
 801119a:	6928      	ldr	r0, [r5, #16]
 801119c:	4423      	add	r3, r4
 801119e:	4420      	add	r0, r4
 80111a0:	1b36      	subs	r6, r6, r4
 80111a2:	60ab      	str	r3, [r5, #8]
 80111a4:	6128      	str	r0, [r5, #16]
 80111a6:	4631      	mov	r1, r6
 80111a8:	2201      	movs	r2, #1
 80111aa:	4628      	mov	r0, r5
 80111ac:	f7fb fb0a 	bl	800c7c4 <ucdr_check_final_buffer_behavior_array>
 80111b0:	1bb9      	subs	r1, r7, r6
 80111b2:	4441      	add	r1, r8
 80111b4:	4604      	mov	r4, r0
 80111b6:	4602      	mov	r2, r0
 80111b8:	2800      	cmp	r0, #0
 80111ba:	d1ea      	bne.n	8011192 <ucdr_serialize_endian_array_uint8_t+0x16>
 80111bc:	2301      	movs	r3, #1
 80111be:	7da8      	ldrb	r0, [r5, #22]
 80111c0:	756b      	strb	r3, [r5, #21]
 80111c2:	4058      	eors	r0, r3
 80111c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111c8:	463a      	mov	r2, r7
 80111ca:	68a8      	ldr	r0, [r5, #8]
 80111cc:	4641      	mov	r1, r8
 80111ce:	f009 f8fa 	bl	801a3c6 <memcpy>
 80111d2:	68aa      	ldr	r2, [r5, #8]
 80111d4:	692b      	ldr	r3, [r5, #16]
 80111d6:	443a      	add	r2, r7
 80111d8:	443b      	add	r3, r7
 80111da:	60aa      	str	r2, [r5, #8]
 80111dc:	612b      	str	r3, [r5, #16]
 80111de:	e7ed      	b.n	80111bc <ucdr_serialize_endian_array_uint8_t+0x40>

080111e0 <ucdr_deserialize_array_uint8_t>:
 80111e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111e4:	4688      	mov	r8, r1
 80111e6:	4611      	mov	r1, r2
 80111e8:	4617      	mov	r7, r2
 80111ea:	4605      	mov	r5, r0
 80111ec:	f7fb fa62 	bl	800c6b4 <ucdr_check_buffer_available_for>
 80111f0:	b9e0      	cbnz	r0, 801122c <ucdr_deserialize_array_uint8_t+0x4c>
 80111f2:	463e      	mov	r6, r7
 80111f4:	e009      	b.n	801120a <ucdr_deserialize_array_uint8_t+0x2a>
 80111f6:	68a9      	ldr	r1, [r5, #8]
 80111f8:	f009 f8e5 	bl	801a3c6 <memcpy>
 80111fc:	68aa      	ldr	r2, [r5, #8]
 80111fe:	692b      	ldr	r3, [r5, #16]
 8011200:	4422      	add	r2, r4
 8011202:	4423      	add	r3, r4
 8011204:	1b36      	subs	r6, r6, r4
 8011206:	60aa      	str	r2, [r5, #8]
 8011208:	612b      	str	r3, [r5, #16]
 801120a:	2201      	movs	r2, #1
 801120c:	4631      	mov	r1, r6
 801120e:	4628      	mov	r0, r5
 8011210:	f7fb fad8 	bl	800c7c4 <ucdr_check_final_buffer_behavior_array>
 8011214:	4604      	mov	r4, r0
 8011216:	1bb8      	subs	r0, r7, r6
 8011218:	4440      	add	r0, r8
 801121a:	4622      	mov	r2, r4
 801121c:	2c00      	cmp	r4, #0
 801121e:	d1ea      	bne.n	80111f6 <ucdr_deserialize_array_uint8_t+0x16>
 8011220:	2301      	movs	r3, #1
 8011222:	7da8      	ldrb	r0, [r5, #22]
 8011224:	756b      	strb	r3, [r5, #21]
 8011226:	4058      	eors	r0, r3
 8011228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801122c:	463a      	mov	r2, r7
 801122e:	68a9      	ldr	r1, [r5, #8]
 8011230:	4640      	mov	r0, r8
 8011232:	f009 f8c8 	bl	801a3c6 <memcpy>
 8011236:	68aa      	ldr	r2, [r5, #8]
 8011238:	692b      	ldr	r3, [r5, #16]
 801123a:	443a      	add	r2, r7
 801123c:	443b      	add	r3, r7
 801123e:	60aa      	str	r2, [r5, #8]
 8011240:	612b      	str	r3, [r5, #16]
 8011242:	e7ed      	b.n	8011220 <ucdr_deserialize_array_uint8_t+0x40>

08011244 <ucdr_deserialize_endian_array_uint8_t>:
 8011244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011248:	4619      	mov	r1, r3
 801124a:	461f      	mov	r7, r3
 801124c:	4605      	mov	r5, r0
 801124e:	4690      	mov	r8, r2
 8011250:	f7fb fa30 	bl	800c6b4 <ucdr_check_buffer_available_for>
 8011254:	b9e0      	cbnz	r0, 8011290 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8011256:	463e      	mov	r6, r7
 8011258:	e009      	b.n	801126e <ucdr_deserialize_endian_array_uint8_t+0x2a>
 801125a:	68a9      	ldr	r1, [r5, #8]
 801125c:	f009 f8b3 	bl	801a3c6 <memcpy>
 8011260:	68ab      	ldr	r3, [r5, #8]
 8011262:	6928      	ldr	r0, [r5, #16]
 8011264:	4423      	add	r3, r4
 8011266:	4420      	add	r0, r4
 8011268:	1b36      	subs	r6, r6, r4
 801126a:	60ab      	str	r3, [r5, #8]
 801126c:	6128      	str	r0, [r5, #16]
 801126e:	2201      	movs	r2, #1
 8011270:	4631      	mov	r1, r6
 8011272:	4628      	mov	r0, r5
 8011274:	f7fb faa6 	bl	800c7c4 <ucdr_check_final_buffer_behavior_array>
 8011278:	4604      	mov	r4, r0
 801127a:	1bb8      	subs	r0, r7, r6
 801127c:	4440      	add	r0, r8
 801127e:	4622      	mov	r2, r4
 8011280:	2c00      	cmp	r4, #0
 8011282:	d1ea      	bne.n	801125a <ucdr_deserialize_endian_array_uint8_t+0x16>
 8011284:	2301      	movs	r3, #1
 8011286:	7da8      	ldrb	r0, [r5, #22]
 8011288:	756b      	strb	r3, [r5, #21]
 801128a:	4058      	eors	r0, r3
 801128c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011290:	463a      	mov	r2, r7
 8011292:	68a9      	ldr	r1, [r5, #8]
 8011294:	4640      	mov	r0, r8
 8011296:	f009 f896 	bl	801a3c6 <memcpy>
 801129a:	68aa      	ldr	r2, [r5, #8]
 801129c:	692b      	ldr	r3, [r5, #16]
 801129e:	443a      	add	r2, r7
 80112a0:	443b      	add	r3, r7
 80112a2:	60aa      	str	r2, [r5, #8]
 80112a4:	612b      	str	r3, [r5, #16]
 80112a6:	e7ed      	b.n	8011284 <ucdr_deserialize_endian_array_uint8_t+0x40>

080112a8 <ucdr_serialize_array_double>:
 80112a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112ac:	460e      	mov	r6, r1
 80112ae:	2108      	movs	r1, #8
 80112b0:	4604      	mov	r4, r0
 80112b2:	4617      	mov	r7, r2
 80112b4:	f7fb fa5e 	bl	800c774 <ucdr_buffer_alignment>
 80112b8:	4601      	mov	r1, r0
 80112ba:	4620      	mov	r0, r4
 80112bc:	7d65      	ldrb	r5, [r4, #21]
 80112be:	f7fb fa9d 	bl	800c7fc <ucdr_advance_buffer>
 80112c2:	7d21      	ldrb	r1, [r4, #20]
 80112c4:	7565      	strb	r5, [r4, #21]
 80112c6:	2901      	cmp	r1, #1
 80112c8:	d010      	beq.n	80112ec <ucdr_serialize_array_double+0x44>
 80112ca:	b157      	cbz	r7, 80112e2 <ucdr_serialize_array_double+0x3a>
 80112cc:	2500      	movs	r5, #0
 80112ce:	e000      	b.n	80112d2 <ucdr_serialize_array_double+0x2a>
 80112d0:	7d21      	ldrb	r1, [r4, #20]
 80112d2:	ecb6 0b02 	vldmia	r6!, {d0}
 80112d6:	4620      	mov	r0, r4
 80112d8:	3501      	adds	r5, #1
 80112da:	f7fa ff85 	bl	800c1e8 <ucdr_serialize_endian_double>
 80112de:	42af      	cmp	r7, r5
 80112e0:	d1f6      	bne.n	80112d0 <ucdr_serialize_array_double+0x28>
 80112e2:	7da0      	ldrb	r0, [r4, #22]
 80112e4:	f080 0001 	eor.w	r0, r0, #1
 80112e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112ec:	00ff      	lsls	r7, r7, #3
 80112ee:	4639      	mov	r1, r7
 80112f0:	4620      	mov	r0, r4
 80112f2:	f7fb f9df 	bl	800c6b4 <ucdr_check_buffer_available_for>
 80112f6:	b9f8      	cbnz	r0, 8011338 <ucdr_serialize_array_double+0x90>
 80112f8:	46b8      	mov	r8, r7
 80112fa:	e00a      	b.n	8011312 <ucdr_serialize_array_double+0x6a>
 80112fc:	68a0      	ldr	r0, [r4, #8]
 80112fe:	f009 f862 	bl	801a3c6 <memcpy>
 8011302:	68a2      	ldr	r2, [r4, #8]
 8011304:	6923      	ldr	r3, [r4, #16]
 8011306:	442a      	add	r2, r5
 8011308:	442b      	add	r3, r5
 801130a:	eba8 0805 	sub.w	r8, r8, r5
 801130e:	60a2      	str	r2, [r4, #8]
 8011310:	6123      	str	r3, [r4, #16]
 8011312:	4641      	mov	r1, r8
 8011314:	2208      	movs	r2, #8
 8011316:	4620      	mov	r0, r4
 8011318:	f7fb fa54 	bl	800c7c4 <ucdr_check_final_buffer_behavior_array>
 801131c:	eba7 0108 	sub.w	r1, r7, r8
 8011320:	4431      	add	r1, r6
 8011322:	4605      	mov	r5, r0
 8011324:	4602      	mov	r2, r0
 8011326:	2800      	cmp	r0, #0
 8011328:	d1e8      	bne.n	80112fc <ucdr_serialize_array_double+0x54>
 801132a:	7da0      	ldrb	r0, [r4, #22]
 801132c:	2308      	movs	r3, #8
 801132e:	7563      	strb	r3, [r4, #21]
 8011330:	f080 0001 	eor.w	r0, r0, #1
 8011334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011338:	463a      	mov	r2, r7
 801133a:	68a0      	ldr	r0, [r4, #8]
 801133c:	4631      	mov	r1, r6
 801133e:	f009 f842 	bl	801a3c6 <memcpy>
 8011342:	68a2      	ldr	r2, [r4, #8]
 8011344:	6923      	ldr	r3, [r4, #16]
 8011346:	443a      	add	r2, r7
 8011348:	441f      	add	r7, r3
 801134a:	60a2      	str	r2, [r4, #8]
 801134c:	6127      	str	r7, [r4, #16]
 801134e:	e7ec      	b.n	801132a <ucdr_serialize_array_double+0x82>

08011350 <ucdr_deserialize_array_double>:
 8011350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011354:	460e      	mov	r6, r1
 8011356:	2108      	movs	r1, #8
 8011358:	4604      	mov	r4, r0
 801135a:	4617      	mov	r7, r2
 801135c:	f7fb fa0a 	bl	800c774 <ucdr_buffer_alignment>
 8011360:	4601      	mov	r1, r0
 8011362:	4620      	mov	r0, r4
 8011364:	7d65      	ldrb	r5, [r4, #21]
 8011366:	f7fb fa49 	bl	800c7fc <ucdr_advance_buffer>
 801136a:	7d21      	ldrb	r1, [r4, #20]
 801136c:	7565      	strb	r5, [r4, #21]
 801136e:	2901      	cmp	r1, #1
 8011370:	d011      	beq.n	8011396 <ucdr_deserialize_array_double+0x46>
 8011372:	b15f      	cbz	r7, 801138c <ucdr_deserialize_array_double+0x3c>
 8011374:	2500      	movs	r5, #0
 8011376:	e000      	b.n	801137a <ucdr_deserialize_array_double+0x2a>
 8011378:	7d21      	ldrb	r1, [r4, #20]
 801137a:	4632      	mov	r2, r6
 801137c:	4620      	mov	r0, r4
 801137e:	3501      	adds	r5, #1
 8011380:	f7fb f8ca 	bl	800c518 <ucdr_deserialize_endian_double>
 8011384:	42af      	cmp	r7, r5
 8011386:	f106 0608 	add.w	r6, r6, #8
 801138a:	d1f5      	bne.n	8011378 <ucdr_deserialize_array_double+0x28>
 801138c:	7da0      	ldrb	r0, [r4, #22]
 801138e:	f080 0001 	eor.w	r0, r0, #1
 8011392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011396:	00ff      	lsls	r7, r7, #3
 8011398:	4639      	mov	r1, r7
 801139a:	4620      	mov	r0, r4
 801139c:	f7fb f98a 	bl	800c6b4 <ucdr_check_buffer_available_for>
 80113a0:	b9f8      	cbnz	r0, 80113e2 <ucdr_deserialize_array_double+0x92>
 80113a2:	46b8      	mov	r8, r7
 80113a4:	e00a      	b.n	80113bc <ucdr_deserialize_array_double+0x6c>
 80113a6:	68a1      	ldr	r1, [r4, #8]
 80113a8:	f009 f80d 	bl	801a3c6 <memcpy>
 80113ac:	68a2      	ldr	r2, [r4, #8]
 80113ae:	6923      	ldr	r3, [r4, #16]
 80113b0:	442a      	add	r2, r5
 80113b2:	442b      	add	r3, r5
 80113b4:	eba8 0805 	sub.w	r8, r8, r5
 80113b8:	60a2      	str	r2, [r4, #8]
 80113ba:	6123      	str	r3, [r4, #16]
 80113bc:	2208      	movs	r2, #8
 80113be:	4641      	mov	r1, r8
 80113c0:	4620      	mov	r0, r4
 80113c2:	f7fb f9ff 	bl	800c7c4 <ucdr_check_final_buffer_behavior_array>
 80113c6:	4605      	mov	r5, r0
 80113c8:	eba7 0008 	sub.w	r0, r7, r8
 80113cc:	4430      	add	r0, r6
 80113ce:	462a      	mov	r2, r5
 80113d0:	2d00      	cmp	r5, #0
 80113d2:	d1e8      	bne.n	80113a6 <ucdr_deserialize_array_double+0x56>
 80113d4:	7da0      	ldrb	r0, [r4, #22]
 80113d6:	2308      	movs	r3, #8
 80113d8:	7563      	strb	r3, [r4, #21]
 80113da:	f080 0001 	eor.w	r0, r0, #1
 80113de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113e2:	463a      	mov	r2, r7
 80113e4:	68a1      	ldr	r1, [r4, #8]
 80113e6:	4630      	mov	r0, r6
 80113e8:	f008 ffed 	bl	801a3c6 <memcpy>
 80113ec:	68a2      	ldr	r2, [r4, #8]
 80113ee:	6923      	ldr	r3, [r4, #16]
 80113f0:	443a      	add	r2, r7
 80113f2:	441f      	add	r7, r3
 80113f4:	60a2      	str	r2, [r4, #8]
 80113f6:	6127      	str	r7, [r4, #16]
 80113f8:	e7ec      	b.n	80113d4 <ucdr_deserialize_array_double+0x84>
 80113fa:	bf00      	nop

080113fc <ucdr_serialize_sequence_char>:
 80113fc:	b570      	push	{r4, r5, r6, lr}
 80113fe:	4615      	mov	r5, r2
 8011400:	460e      	mov	r6, r1
 8011402:	7d01      	ldrb	r1, [r0, #20]
 8011404:	4604      	mov	r4, r0
 8011406:	f7fa f975 	bl	800b6f4 <ucdr_serialize_endian_uint32_t>
 801140a:	b90d      	cbnz	r5, 8011410 <ucdr_serialize_sequence_char+0x14>
 801140c:	2001      	movs	r0, #1
 801140e:	bd70      	pop	{r4, r5, r6, pc}
 8011410:	7d21      	ldrb	r1, [r4, #20]
 8011412:	462b      	mov	r3, r5
 8011414:	4632      	mov	r2, r6
 8011416:	4620      	mov	r0, r4
 8011418:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801141c:	f7ff be18 	b.w	8011050 <ucdr_serialize_endian_array_char>

08011420 <ucdr_deserialize_sequence_char>:
 8011420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011424:	461d      	mov	r5, r3
 8011426:	4616      	mov	r6, r2
 8011428:	460f      	mov	r7, r1
 801142a:	461a      	mov	r2, r3
 801142c:	7d01      	ldrb	r1, [r0, #20]
 801142e:	4604      	mov	r4, r0
 8011430:	f7fa fa88 	bl	800b944 <ucdr_deserialize_endian_uint32_t>
 8011434:	682b      	ldr	r3, [r5, #0]
 8011436:	429e      	cmp	r6, r3
 8011438:	bf3c      	itt	cc
 801143a:	2201      	movcc	r2, #1
 801143c:	75a2      	strbcc	r2, [r4, #22]
 801143e:	b913      	cbnz	r3, 8011446 <ucdr_deserialize_sequence_char+0x26>
 8011440:	2001      	movs	r0, #1
 8011442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011446:	7d21      	ldrb	r1, [r4, #20]
 8011448:	463a      	mov	r2, r7
 801144a:	4620      	mov	r0, r4
 801144c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011450:	f7ff be30 	b.w	80110b4 <ucdr_deserialize_endian_array_char>

08011454 <ucdr_serialize_sequence_uint8_t>:
 8011454:	b570      	push	{r4, r5, r6, lr}
 8011456:	4615      	mov	r5, r2
 8011458:	460e      	mov	r6, r1
 801145a:	7d01      	ldrb	r1, [r0, #20]
 801145c:	4604      	mov	r4, r0
 801145e:	f7fa f949 	bl	800b6f4 <ucdr_serialize_endian_uint32_t>
 8011462:	b90d      	cbnz	r5, 8011468 <ucdr_serialize_sequence_uint8_t+0x14>
 8011464:	2001      	movs	r0, #1
 8011466:	bd70      	pop	{r4, r5, r6, pc}
 8011468:	7d21      	ldrb	r1, [r4, #20]
 801146a:	462b      	mov	r3, r5
 801146c:	4632      	mov	r2, r6
 801146e:	4620      	mov	r0, r4
 8011470:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011474:	f7ff be82 	b.w	801117c <ucdr_serialize_endian_array_uint8_t>

08011478 <ucdr_deserialize_sequence_uint8_t>:
 8011478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801147c:	461d      	mov	r5, r3
 801147e:	4616      	mov	r6, r2
 8011480:	460f      	mov	r7, r1
 8011482:	461a      	mov	r2, r3
 8011484:	7d01      	ldrb	r1, [r0, #20]
 8011486:	4604      	mov	r4, r0
 8011488:	f7fa fa5c 	bl	800b944 <ucdr_deserialize_endian_uint32_t>
 801148c:	682b      	ldr	r3, [r5, #0]
 801148e:	429e      	cmp	r6, r3
 8011490:	bf3c      	itt	cc
 8011492:	2201      	movcc	r2, #1
 8011494:	75a2      	strbcc	r2, [r4, #22]
 8011496:	b913      	cbnz	r3, 801149e <ucdr_deserialize_sequence_uint8_t+0x26>
 8011498:	2001      	movs	r0, #1
 801149a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801149e:	7d21      	ldrb	r1, [r4, #20]
 80114a0:	463a      	mov	r2, r7
 80114a2:	4620      	mov	r0, r4
 80114a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80114a8:	f7ff becc 	b.w	8011244 <ucdr_deserialize_endian_array_uint8_t>

080114ac <uxr_buffer_delete_entity>:
 80114ac:	b510      	push	{r4, lr}
 80114ae:	2300      	movs	r3, #0
 80114b0:	b08e      	sub	sp, #56	@ 0x38
 80114b2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80114b6:	2303      	movs	r3, #3
 80114b8:	9300      	str	r3, [sp, #0]
 80114ba:	2204      	movs	r2, #4
 80114bc:	ab06      	add	r3, sp, #24
 80114be:	4604      	mov	r4, r0
 80114c0:	9103      	str	r1, [sp, #12]
 80114c2:	f001 fc71 	bl	8012da8 <uxr_prepare_stream_to_write_submessage>
 80114c6:	b918      	cbnz	r0, 80114d0 <uxr_buffer_delete_entity+0x24>
 80114c8:	4604      	mov	r4, r0
 80114ca:	4620      	mov	r0, r4
 80114cc:	b00e      	add	sp, #56	@ 0x38
 80114ce:	bd10      	pop	{r4, pc}
 80114d0:	9902      	ldr	r1, [sp, #8]
 80114d2:	aa05      	add	r2, sp, #20
 80114d4:	4620      	mov	r0, r4
 80114d6:	f001 fd9d 	bl	8013014 <uxr_init_base_object_request>
 80114da:	a905      	add	r1, sp, #20
 80114dc:	4604      	mov	r4, r0
 80114de:	a806      	add	r0, sp, #24
 80114e0:	f003 fc94 	bl	8014e0c <uxr_serialize_DELETE_Payload>
 80114e4:	4620      	mov	r0, r4
 80114e6:	b00e      	add	sp, #56	@ 0x38
 80114e8:	bd10      	pop	{r4, pc}
 80114ea:	bf00      	nop

080114ec <uxr_common_create_entity>:
 80114ec:	b510      	push	{r4, lr}
 80114ee:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80114f2:	b08c      	sub	sp, #48	@ 0x30
 80114f4:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80114f8:	f1bc 0f01 	cmp.w	ip, #1
 80114fc:	bf0c      	ite	eq
 80114fe:	f003 0201 	andeq.w	r2, r3, #1
 8011502:	2200      	movne	r2, #0
 8011504:	330e      	adds	r3, #14
 8011506:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 801150a:	9101      	str	r1, [sp, #4]
 801150c:	441a      	add	r2, r3
 801150e:	2301      	movs	r3, #1
 8011510:	9300      	str	r3, [sp, #0]
 8011512:	9903      	ldr	r1, [sp, #12]
 8011514:	ab04      	add	r3, sp, #16
 8011516:	b292      	uxth	r2, r2
 8011518:	4604      	mov	r4, r0
 801151a:	f001 fc45 	bl	8012da8 <uxr_prepare_stream_to_write_submessage>
 801151e:	b918      	cbnz	r0, 8011528 <uxr_common_create_entity+0x3c>
 8011520:	4604      	mov	r4, r0
 8011522:	4620      	mov	r0, r4
 8011524:	b00c      	add	sp, #48	@ 0x30
 8011526:	bd10      	pop	{r4, pc}
 8011528:	9902      	ldr	r1, [sp, #8]
 801152a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801152c:	4620      	mov	r0, r4
 801152e:	f001 fd71 	bl	8013014 <uxr_init_base_object_request>
 8011532:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011534:	4604      	mov	r4, r0
 8011536:	a804      	add	r0, sp, #16
 8011538:	f003 fbb0 	bl	8014c9c <uxr_serialize_CREATE_Payload>
 801153c:	4620      	mov	r0, r4
 801153e:	b00c      	add	sp, #48	@ 0x30
 8011540:	bd10      	pop	{r4, pc}
 8011542:	bf00      	nop

08011544 <uxr_buffer_create_participant_bin>:
 8011544:	b570      	push	{r4, r5, r6, lr}
 8011546:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 801154a:	ac11      	add	r4, sp, #68	@ 0x44
 801154c:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8011550:	2303      	movs	r3, #3
 8011552:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8011556:	7223      	strb	r3, [r4, #8]
 8011558:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 801155a:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 801155e:	2201      	movs	r2, #1
 8011560:	2100      	movs	r1, #0
 8011562:	4605      	mov	r5, r0
 8011564:	7122      	strb	r2, [r4, #4]
 8011566:	f88d 1014 	strb.w	r1, [sp, #20]
 801156a:	b1cb      	cbz	r3, 80115a0 <uxr_buffer_create_participant_bin+0x5c>
 801156c:	f88d 201c 	strb.w	r2, [sp, #28]
 8011570:	9308      	str	r3, [sp, #32]
 8011572:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011576:	a915      	add	r1, sp, #84	@ 0x54
 8011578:	a809      	add	r0, sp, #36	@ 0x24
 801157a:	f7fb f8ef 	bl	800c75c <ucdr_init_buffer>
 801157e:	a905      	add	r1, sp, #20
 8011580:	a809      	add	r0, sp, #36	@ 0x24
 8011582:	f002 ff6d 	bl	8014460 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8011586:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011588:	9600      	str	r6, [sp, #0]
 801158a:	9401      	str	r4, [sp, #4]
 801158c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8011590:	60e3      	str	r3, [r4, #12]
 8011592:	4628      	mov	r0, r5
 8011594:	b29b      	uxth	r3, r3
 8011596:	f7ff ffa9 	bl	80114ec <uxr_common_create_entity>
 801159a:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 801159e:	bd70      	pop	{r4, r5, r6, pc}
 80115a0:	f88d 301c 	strb.w	r3, [sp, #28]
 80115a4:	e7e5      	b.n	8011572 <uxr_buffer_create_participant_bin+0x2e>
 80115a6:	bf00      	nop

080115a8 <uxr_buffer_create_topic_bin>:
 80115a8:	b570      	push	{r4, r5, r6, lr}
 80115aa:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 80115ae:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80115b2:	9105      	str	r1, [sp, #20]
 80115b4:	4605      	mov	r5, r0
 80115b6:	a997      	add	r1, sp, #604	@ 0x25c
 80115b8:	4618      	mov	r0, r3
 80115ba:	2302      	movs	r3, #2
 80115bc:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 80115c0:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 80115c4:	f000 fa58 	bl	8011a78 <uxr_object_id_to_raw>
 80115c8:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 80115ca:	9306      	str	r3, [sp, #24]
 80115cc:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 80115ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80115d0:	2303      	movs	r3, #3
 80115d2:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 80115d6:	2301      	movs	r3, #1
 80115d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80115dc:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80115e0:	a917      	add	r1, sp, #92	@ 0x5c
 80115e2:	2300      	movs	r3, #0
 80115e4:	a80b      	add	r0, sp, #44	@ 0x2c
 80115e6:	f88d 301c 	strb.w	r3, [sp, #28]
 80115ea:	f7fb f8b7 	bl	800c75c <ucdr_init_buffer>
 80115ee:	a906      	add	r1, sp, #24
 80115f0:	a80b      	add	r0, sp, #44	@ 0x2c
 80115f2:	f002 ff57 	bl	80144a4 <uxr_serialize_OBJK_Topic_Binary>
 80115f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80115f8:	9316      	str	r3, [sp, #88]	@ 0x58
 80115fa:	ac13      	add	r4, sp, #76	@ 0x4c
 80115fc:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011600:	9600      	str	r6, [sp, #0]
 8011602:	9401      	str	r4, [sp, #4]
 8011604:	b29b      	uxth	r3, r3
 8011606:	4628      	mov	r0, r5
 8011608:	f7ff ff70 	bl	80114ec <uxr_common_create_entity>
 801160c:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8011610:	bd70      	pop	{r4, r5, r6, pc}
 8011612:	bf00      	nop

08011614 <uxr_buffer_create_publisher_bin>:
 8011614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011616:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 801161a:	4605      	mov	r5, r0
 801161c:	9105      	str	r1, [sp, #20]
 801161e:	4618      	mov	r0, r3
 8011620:	2603      	movs	r6, #3
 8011622:	a992      	add	r1, sp, #584	@ 0x248
 8011624:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011628:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 801162c:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8011630:	f000 fa22 	bl	8011a78 <uxr_object_id_to_raw>
 8011634:	2300      	movs	r3, #0
 8011636:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801163a:	a912      	add	r1, sp, #72	@ 0x48
 801163c:	a806      	add	r0, sp, #24
 801163e:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8011642:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8011646:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 801164a:	f7fb f887 	bl	800c75c <ucdr_init_buffer>
 801164e:	a993      	add	r1, sp, #588	@ 0x24c
 8011650:	a806      	add	r0, sp, #24
 8011652:	f002 ffdb 	bl	801460c <uxr_serialize_OBJK_Publisher_Binary>
 8011656:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011658:	9311      	str	r3, [sp, #68]	@ 0x44
 801165a:	ac0e      	add	r4, sp, #56	@ 0x38
 801165c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011660:	9700      	str	r7, [sp, #0]
 8011662:	9401      	str	r4, [sp, #4]
 8011664:	b29b      	uxth	r3, r3
 8011666:	4628      	mov	r0, r5
 8011668:	f7ff ff40 	bl	80114ec <uxr_common_create_entity>
 801166c:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8011670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011672:	bf00      	nop

08011674 <uxr_buffer_create_subscriber_bin>:
 8011674:	b570      	push	{r4, r5, r6, lr}
 8011676:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 801167a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801167e:	9105      	str	r1, [sp, #20]
 8011680:	4605      	mov	r5, r0
 8011682:	a992      	add	r1, sp, #584	@ 0x248
 8011684:	4618      	mov	r0, r3
 8011686:	2304      	movs	r3, #4
 8011688:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 801168c:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 8011690:	f000 f9f2 	bl	8011a78 <uxr_object_id_to_raw>
 8011694:	2300      	movs	r3, #0
 8011696:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801169a:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 801169e:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 80116a2:	a912      	add	r1, sp, #72	@ 0x48
 80116a4:	2303      	movs	r3, #3
 80116a6:	a806      	add	r0, sp, #24
 80116a8:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 80116ac:	f7fb f856 	bl	800c75c <ucdr_init_buffer>
 80116b0:	a993      	add	r1, sp, #588	@ 0x24c
 80116b2:	a806      	add	r0, sp, #24
 80116b4:	f003 f85a 	bl	801476c <uxr_serialize_OBJK_Subscriber_Binary>
 80116b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80116ba:	9311      	str	r3, [sp, #68]	@ 0x44
 80116bc:	ac0e      	add	r4, sp, #56	@ 0x38
 80116be:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80116c2:	9600      	str	r6, [sp, #0]
 80116c4:	9401      	str	r4, [sp, #4]
 80116c6:	b29b      	uxth	r3, r3
 80116c8:	4628      	mov	r0, r5
 80116ca:	f7ff ff0f 	bl	80114ec <uxr_common_create_entity>
 80116ce:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 80116d2:	bd70      	pop	{r4, r5, r6, pc}

080116d4 <uxr_buffer_create_datawriter_bin>:
 80116d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116d8:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80116dc:	ac1d      	add	r4, sp, #116	@ 0x74
 80116de:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80116e2:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 80116e6:	9105      	str	r1, [sp, #20]
 80116e8:	4606      	mov	r6, r0
 80116ea:	a9a1      	add	r1, sp, #644	@ 0x284
 80116ec:	4618      	mov	r0, r3
 80116ee:	2305      	movs	r3, #5
 80116f0:	7123      	strb	r3, [r4, #4]
 80116f2:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 80116f6:	2703      	movs	r7, #3
 80116f8:	f000 f9be 	bl	8011a78 <uxr_object_id_to_raw>
 80116fc:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 80116fe:	7227      	strb	r7, [r4, #8]
 8011700:	a90e      	add	r1, sp, #56	@ 0x38
 8011702:	f000 f9b9 	bl	8011a78 <uxr_object_id_to_raw>
 8011706:	2300      	movs	r3, #0
 8011708:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 801170c:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 8011710:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8011714:	3d00      	subs	r5, #0
 8011716:	bf18      	it	ne
 8011718:	2501      	movne	r5, #1
 801171a:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 801171e:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8011722:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8011726:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801172a:	2301      	movs	r3, #1
 801172c:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8011730:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8011734:	bb8a      	cbnz	r2, 801179a <uxr_buffer_create_datawriter_bin+0xc6>
 8011736:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801173a:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 801173e:	f04f 0c13 	mov.w	ip, #19
 8011742:	250b      	movs	r5, #11
 8011744:	2221      	movs	r2, #33	@ 0x21
 8011746:	2111      	movs	r1, #17
 8011748:	2009      	movs	r0, #9
 801174a:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 801174e:	b923      	cbnz	r3, 801175a <uxr_buffer_create_datawriter_bin+0x86>
 8011750:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8011754:	4672      	mov	r2, lr
 8011756:	4661      	mov	r1, ip
 8011758:	4628      	mov	r0, r5
 801175a:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 801175e:	2b01      	cmp	r3, #1
 8011760:	d025      	beq.n	80117ae <uxr_buffer_create_datawriter_bin+0xda>
 8011762:	2b03      	cmp	r3, #3
 8011764:	d029      	beq.n	80117ba <uxr_buffer_create_datawriter_bin+0xe6>
 8011766:	b32b      	cbz	r3, 80117b4 <uxr_buffer_create_datawriter_bin+0xe0>
 8011768:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801176c:	a921      	add	r1, sp, #132	@ 0x84
 801176e:	a806      	add	r0, sp, #24
 8011770:	f7fa fff4 	bl	800c75c <ucdr_init_buffer>
 8011774:	a90e      	add	r1, sp, #56	@ 0x38
 8011776:	a806      	add	r0, sp, #24
 8011778:	f003 f8aa 	bl	80148d0 <uxr_serialize_OBJK_DataWriter_Binary>
 801177c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801177e:	f8cd 8000 	str.w	r8, [sp]
 8011782:	9401      	str	r4, [sp, #4]
 8011784:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011788:	60e3      	str	r3, [r4, #12]
 801178a:	4630      	mov	r0, r6
 801178c:	b29b      	uxth	r3, r3
 801178e:	f7ff fead 	bl	80114ec <uxr_common_create_entity>
 8011792:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8011796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801179a:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 801179e:	f04f 0c12 	mov.w	ip, #18
 80117a2:	250a      	movs	r5, #10
 80117a4:	2220      	movs	r2, #32
 80117a6:	2110      	movs	r1, #16
 80117a8:	2008      	movs	r0, #8
 80117aa:	2702      	movs	r7, #2
 80117ac:	e7cd      	b.n	801174a <uxr_buffer_create_datawriter_bin+0x76>
 80117ae:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 80117b2:	e7d9      	b.n	8011768 <uxr_buffer_create_datawriter_bin+0x94>
 80117b4:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 80117b8:	e7d6      	b.n	8011768 <uxr_buffer_create_datawriter_bin+0x94>
 80117ba:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80117be:	e7d3      	b.n	8011768 <uxr_buffer_create_datawriter_bin+0x94>

080117c0 <uxr_buffer_create_datareader_bin>:
 80117c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117c4:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 80117c8:	ac1f      	add	r4, sp, #124	@ 0x7c
 80117ca:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80117ce:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 80117d2:	9105      	str	r1, [sp, #20]
 80117d4:	4606      	mov	r6, r0
 80117d6:	a9a3      	add	r1, sp, #652	@ 0x28c
 80117d8:	4618      	mov	r0, r3
 80117da:	2306      	movs	r3, #6
 80117dc:	7123      	strb	r3, [r4, #4]
 80117de:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 80117e2:	2703      	movs	r7, #3
 80117e4:	f000 f948 	bl	8011a78 <uxr_object_id_to_raw>
 80117e8:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 80117ea:	7227      	strb	r7, [r4, #8]
 80117ec:	a90e      	add	r1, sp, #56	@ 0x38
 80117ee:	f000 f943 	bl	8011a78 <uxr_object_id_to_raw>
 80117f2:	2300      	movs	r3, #0
 80117f4:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 80117f8:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 80117fc:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 8011800:	3d00      	subs	r5, #0
 8011802:	bf18      	it	ne
 8011804:	2501      	movne	r5, #1
 8011806:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 801180a:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 801180e:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8011812:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8011816:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801181a:	2301      	movs	r3, #1
 801181c:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8011820:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8011824:	bb8a      	cbnz	r2, 801188a <uxr_buffer_create_datareader_bin+0xca>
 8011826:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801182a:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 801182e:	f04f 0c13 	mov.w	ip, #19
 8011832:	250b      	movs	r5, #11
 8011834:	2221      	movs	r2, #33	@ 0x21
 8011836:	2111      	movs	r1, #17
 8011838:	2009      	movs	r0, #9
 801183a:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 801183e:	b923      	cbnz	r3, 801184a <uxr_buffer_create_datareader_bin+0x8a>
 8011840:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8011844:	4672      	mov	r2, lr
 8011846:	4661      	mov	r1, ip
 8011848:	4628      	mov	r0, r5
 801184a:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 801184e:	2b01      	cmp	r3, #1
 8011850:	d025      	beq.n	801189e <uxr_buffer_create_datareader_bin+0xde>
 8011852:	2b03      	cmp	r3, #3
 8011854:	d029      	beq.n	80118aa <uxr_buffer_create_datareader_bin+0xea>
 8011856:	b32b      	cbz	r3, 80118a4 <uxr_buffer_create_datareader_bin+0xe4>
 8011858:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801185c:	a923      	add	r1, sp, #140	@ 0x8c
 801185e:	a806      	add	r0, sp, #24
 8011860:	f7fa ff7c 	bl	800c75c <ucdr_init_buffer>
 8011864:	a90e      	add	r1, sp, #56	@ 0x38
 8011866:	a806      	add	r0, sp, #24
 8011868:	f002 fff6 	bl	8014858 <uxr_serialize_OBJK_DataReader_Binary>
 801186c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801186e:	f8cd 8000 	str.w	r8, [sp]
 8011872:	9401      	str	r4, [sp, #4]
 8011874:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011878:	60e3      	str	r3, [r4, #12]
 801187a:	4630      	mov	r0, r6
 801187c:	b29b      	uxth	r3, r3
 801187e:	f7ff fe35 	bl	80114ec <uxr_common_create_entity>
 8011882:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8011886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801188a:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 801188e:	f04f 0c12 	mov.w	ip, #18
 8011892:	250a      	movs	r5, #10
 8011894:	2220      	movs	r2, #32
 8011896:	2110      	movs	r1, #16
 8011898:	2008      	movs	r0, #8
 801189a:	2702      	movs	r7, #2
 801189c:	e7cd      	b.n	801183a <uxr_buffer_create_datareader_bin+0x7a>
 801189e:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 80118a2:	e7d9      	b.n	8011858 <uxr_buffer_create_datareader_bin+0x98>
 80118a4:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 80118a8:	e7d6      	b.n	8011858 <uxr_buffer_create_datareader_bin+0x98>
 80118aa:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80118ae:	e7d3      	b.n	8011858 <uxr_buffer_create_datareader_bin+0x98>

080118b0 <get_custom_error>:
 80118b0:	4b01      	ldr	r3, [pc, #4]	@ (80118b8 <get_custom_error+0x8>)
 80118b2:	7818      	ldrb	r0, [r3, #0]
 80118b4:	4770      	bx	lr
 80118b6:	bf00      	nop
 80118b8:	200118cc 	.word	0x200118cc

080118bc <recv_custom_msg>:
 80118bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118c0:	4693      	mov	fp, r2
 80118c2:	b089      	sub	sp, #36	@ 0x24
 80118c4:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 80118c8:	9305      	str	r3, [sp, #20]
 80118ca:	468a      	mov	sl, r1
 80118cc:	2100      	movs	r1, #0
 80118ce:	4604      	mov	r4, r0
 80118d0:	f88d 101e 	strb.w	r1, [sp, #30]
 80118d4:	b322      	cbz	r2, 8011920 <recv_custom_msg+0x64>
 80118d6:	f200 2902 	addw	r9, r0, #514	@ 0x202
 80118da:	f10d 081f 	add.w	r8, sp, #31
 80118de:	af05      	add	r7, sp, #20
 80118e0:	f10d 061e 	add.w	r6, sp, #30
 80118e4:	f44f 7500 	mov.w	r5, #512	@ 0x200
 80118e8:	e002      	b.n	80118f0 <recv_custom_msg+0x34>
 80118ea:	9b05      	ldr	r3, [sp, #20]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	dd0f      	ble.n	8011910 <recv_custom_msg+0x54>
 80118f0:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 80118f4:	4623      	mov	r3, r4
 80118f6:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80118fa:	e9cd 5600 	strd	r5, r6, [sp]
 80118fe:	4622      	mov	r2, r4
 8011900:	4648      	mov	r0, r9
 8011902:	f001 fdb5 	bl	8013470 <uxr_read_framed_msg>
 8011906:	2800      	cmp	r0, #0
 8011908:	d0ef      	beq.n	80118ea <recv_custom_msg+0x2e>
 801190a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801190e:	b1b3      	cbz	r3, 801193e <recv_custom_msg+0x82>
 8011910:	4b0f      	ldr	r3, [pc, #60]	@ (8011950 <recv_custom_msg+0x94>)
 8011912:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8011916:	701a      	strb	r2, [r3, #0]
 8011918:	2000      	movs	r0, #0
 801191a:	b009      	add	sp, #36	@ 0x24
 801191c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011920:	f10d 021f 	add.w	r2, sp, #31
 8011924:	9200      	str	r2, [sp, #0]
 8011926:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 801192a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801192e:	4601      	mov	r1, r0
 8011930:	47a8      	blx	r5
 8011932:	2800      	cmp	r0, #0
 8011934:	d0ec      	beq.n	8011910 <recv_custom_msg+0x54>
 8011936:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801193a:	2b00      	cmp	r3, #0
 801193c:	d1e8      	bne.n	8011910 <recv_custom_msg+0x54>
 801193e:	f8cb 0000 	str.w	r0, [fp]
 8011942:	2001      	movs	r0, #1
 8011944:	f8ca 4000 	str.w	r4, [sl]
 8011948:	b009      	add	sp, #36	@ 0x24
 801194a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801194e:	bf00      	nop
 8011950:	200118cc 	.word	0x200118cc

08011954 <send_custom_msg>:
 8011954:	b530      	push	{r4, r5, lr}
 8011956:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 801195a:	b087      	sub	sp, #28
 801195c:	4615      	mov	r5, r2
 801195e:	b974      	cbnz	r4, 801197e <send_custom_msg+0x2a>
 8011960:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8011964:	f10d 0317 	add.w	r3, sp, #23
 8011968:	47a0      	blx	r4
 801196a:	b108      	cbz	r0, 8011970 <send_custom_msg+0x1c>
 801196c:	42a8      	cmp	r0, r5
 801196e:	d015      	beq.n	801199c <send_custom_msg+0x48>
 8011970:	4b0c      	ldr	r3, [pc, #48]	@ (80119a4 <send_custom_msg+0x50>)
 8011972:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8011976:	701a      	strb	r2, [r3, #0]
 8011978:	2000      	movs	r0, #0
 801197a:	b007      	add	sp, #28
 801197c:	bd30      	pop	{r4, r5, pc}
 801197e:	460b      	mov	r3, r1
 8011980:	2200      	movs	r2, #0
 8011982:	f10d 0117 	add.w	r1, sp, #23
 8011986:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801198a:	4602      	mov	r2, r0
 801198c:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8011990:	9500      	str	r5, [sp, #0]
 8011992:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8011996:	f001 fb73 	bl	8013080 <uxr_write_framed_msg>
 801199a:	e7e6      	b.n	801196a <send_custom_msg+0x16>
 801199c:	2001      	movs	r0, #1
 801199e:	b007      	add	sp, #28
 80119a0:	bd30      	pop	{r4, r5, pc}
 80119a2:	bf00      	nop
 80119a4:	200118cc 	.word	0x200118cc

080119a8 <uxr_set_custom_transport_callbacks>:
 80119a8:	b410      	push	{r4}
 80119aa:	9c01      	ldr	r4, [sp, #4]
 80119ac:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 80119b0:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 80119b4:	9b02      	ldr	r3, [sp, #8]
 80119b6:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 80119ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80119be:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 80119c2:	4770      	bx	lr

080119c4 <uxr_init_custom_transport>:
 80119c4:	b538      	push	{r3, r4, r5, lr}
 80119c6:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 80119ca:	b303      	cbz	r3, 8011a0e <uxr_init_custom_transport+0x4a>
 80119cc:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 80119d0:	4604      	mov	r4, r0
 80119d2:	b1e2      	cbz	r2, 8011a0e <uxr_init_custom_transport+0x4a>
 80119d4:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 80119d8:	b1ca      	cbz	r2, 8011a0e <uxr_init_custom_transport+0x4a>
 80119da:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 80119de:	b1b2      	cbz	r2, 8011a0e <uxr_init_custom_transport+0x4a>
 80119e0:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 80119e4:	4798      	blx	r3
 80119e6:	4605      	mov	r5, r0
 80119e8:	b188      	cbz	r0, 8011a0e <uxr_init_custom_transport+0x4a>
 80119ea:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 80119ee:	b98b      	cbnz	r3, 8011a14 <uxr_init_custom_transport+0x50>
 80119f0:	490b      	ldr	r1, [pc, #44]	@ (8011a20 <uxr_init_custom_transport+0x5c>)
 80119f2:	4b0c      	ldr	r3, [pc, #48]	@ (8011a24 <uxr_init_custom_transport+0x60>)
 80119f4:	4a0c      	ldr	r2, [pc, #48]	@ (8011a28 <uxr_init_custom_transport+0x64>)
 80119f6:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 80119fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80119fe:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8011a02:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8011a06:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8011a0a:	4628      	mov	r0, r5
 8011a0c:	bd38      	pop	{r3, r4, r5, pc}
 8011a0e:	2500      	movs	r5, #0
 8011a10:	4628      	mov	r0, r5
 8011a12:	bd38      	pop	{r3, r4, r5, pc}
 8011a14:	2100      	movs	r1, #0
 8011a16:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8011a1a:	f001 fb2b 	bl	8013074 <uxr_init_framing_io>
 8011a1e:	e7e7      	b.n	80119f0 <uxr_init_custom_transport+0x2c>
 8011a20:	08011955 	.word	0x08011955
 8011a24:	080118bd 	.word	0x080118bd
 8011a28:	080118b1 	.word	0x080118b1

08011a2c <uxr_close_custom_transport>:
 8011a2c:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8011a30:	4718      	bx	r3
 8011a32:	bf00      	nop

08011a34 <uxr_object_id>:
 8011a34:	b082      	sub	sp, #8
 8011a36:	2300      	movs	r3, #0
 8011a38:	f88d 1006 	strb.w	r1, [sp, #6]
 8011a3c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011a40:	f360 030f 	bfi	r3, r0, #0, #16
 8011a44:	f362 431f 	bfi	r3, r2, #16, #16
 8011a48:	4618      	mov	r0, r3
 8011a4a:	b002      	add	sp, #8
 8011a4c:	4770      	bx	lr
 8011a4e:	bf00      	nop

08011a50 <uxr_object_id_from_raw>:
 8011a50:	7843      	ldrb	r3, [r0, #1]
 8011a52:	7801      	ldrb	r1, [r0, #0]
 8011a54:	b082      	sub	sp, #8
 8011a56:	f003 020f 	and.w	r2, r3, #15
 8011a5a:	f88d 2006 	strb.w	r2, [sp, #6]
 8011a5e:	091b      	lsrs	r3, r3, #4
 8011a60:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011a64:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8011a68:	2000      	movs	r0, #0
 8011a6a:	f363 000f 	bfi	r0, r3, #0, #16
 8011a6e:	f362 401f 	bfi	r0, r2, #16, #16
 8011a72:	b002      	add	sp, #8
 8011a74:	4770      	bx	lr
 8011a76:	bf00      	nop

08011a78 <uxr_object_id_to_raw>:
 8011a78:	4602      	mov	r2, r0
 8011a7a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8011a7e:	b082      	sub	sp, #8
 8011a80:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8011a84:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8011a88:	f881 c000 	strb.w	ip, [r1]
 8011a8c:	7048      	strb	r0, [r1, #1]
 8011a8e:	b002      	add	sp, #8
 8011a90:	4770      	bx	lr
 8011a92:	bf00      	nop

08011a94 <uxr_ping_agent_session>:
 8011a94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011a98:	4617      	mov	r7, r2
 8011a9a:	b091      	sub	sp, #68	@ 0x44
 8011a9c:	2210      	movs	r2, #16
 8011a9e:	4606      	mov	r6, r0
 8011aa0:	4688      	mov	r8, r1
 8011aa2:	a808      	add	r0, sp, #32
 8011aa4:	eb0d 0102 	add.w	r1, sp, r2
 8011aa8:	f7fa fe58 	bl	800c75c <ucdr_init_buffer>
 8011aac:	4b1e      	ldr	r3, [pc, #120]	@ (8011b28 <uxr_ping_agent_session+0x94>)
 8011aae:	2500      	movs	r5, #0
 8011ab0:	881b      	ldrh	r3, [r3, #0]
 8011ab2:	f8ad 300a 	strh.w	r3, [sp, #10]
 8011ab6:	9500      	str	r5, [sp, #0]
 8011ab8:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8011abc:	2402      	movs	r4, #2
 8011abe:	7831      	ldrb	r1, [r6, #0]
 8011ac0:	f8ad 3008 	strh.w	r3, [sp, #8]
 8011ac4:	462a      	mov	r2, r5
 8011ac6:	a808      	add	r0, sp, #32
 8011ac8:	462b      	mov	r3, r5
 8011aca:	9403      	str	r4, [sp, #12]
 8011acc:	f002 fa96 	bl	8013ffc <uxr_serialize_message_header>
 8011ad0:	4621      	mov	r1, r4
 8011ad2:	462b      	mov	r3, r5
 8011ad4:	2208      	movs	r2, #8
 8011ad6:	a808      	add	r0, sp, #32
 8011ad8:	f002 f896 	bl	8013c08 <uxr_buffer_submessage_header>
 8011adc:	a902      	add	r1, sp, #8
 8011ade:	4604      	mov	r4, r0
 8011ae0:	a808      	add	r0, sp, #32
 8011ae2:	f003 f96b 	bl	8014dbc <uxr_serialize_GET_INFO_Payload>
 8011ae6:	b104      	cbz	r4, 8011aea <uxr_ping_agent_session+0x56>
 8011ae8:	b918      	cbnz	r0, 8011af2 <uxr_ping_agent_session+0x5e>
 8011aea:	2000      	movs	r0, #0
 8011aec:	b011      	add	sp, #68	@ 0x44
 8011aee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011af2:	a808      	add	r0, sp, #32
 8011af4:	f7fa fe5e 	bl	800c7b4 <ucdr_buffer_length>
 8011af8:	4681      	mov	r9, r0
 8011afa:	e00d      	b.n	8011b18 <uxr_ping_agent_session+0x84>
 8011afc:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8011afe:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011b02:	47a0      	blx	r4
 8011b04:	4641      	mov	r1, r8
 8011b06:	4604      	mov	r4, r0
 8011b08:	4630      	mov	r0, r6
 8011b0a:	f000 ff4d 	bl	80129a8 <uxr_run_session_until_pong>
 8011b0e:	ea04 0c00 	and.w	ip, r4, r0
 8011b12:	f01c 00ff 	ands.w	r0, ip, #255	@ 0xff
 8011b16:	d1e9      	bne.n	8011aec <uxr_ping_agent_session+0x58>
 8011b18:	42af      	cmp	r7, r5
 8011b1a:	464a      	mov	r2, r9
 8011b1c:	a904      	add	r1, sp, #16
 8011b1e:	f105 0501 	add.w	r5, r5, #1
 8011b22:	d1eb      	bne.n	8011afc <uxr_ping_agent_session+0x68>
 8011b24:	e7e1      	b.n	8011aea <uxr_ping_agent_session+0x56>
 8011b26:	bf00      	nop
 8011b28:	0801b100 	.word	0x0801b100

08011b2c <uxr_ping_agent_attempts>:
 8011b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b30:	ed2d 8b02 	vpush	{d8}
 8011b34:	b0d1      	sub	sp, #324	@ 0x144
 8011b36:	4606      	mov	r6, r0
 8011b38:	4688      	mov	r8, r1
 8011b3a:	a80e      	add	r0, sp, #56	@ 0x38
 8011b3c:	a90a      	add	r1, sp, #40	@ 0x28
 8011b3e:	4615      	mov	r5, r2
 8011b40:	2210      	movs	r2, #16
 8011b42:	f7fa fe0b 	bl	800c75c <ucdr_init_buffer>
 8011b46:	4b54      	ldr	r3, [pc, #336]	@ (8011c98 <uxr_ping_agent_attempts+0x16c>)
 8011b48:	881b      	ldrh	r3, [r3, #0]
 8011b4a:	f8ad 307a 	strh.w	r3, [sp, #122]	@ 0x7a
 8011b4e:	2300      	movs	r3, #0
 8011b50:	2402      	movs	r4, #2
 8011b52:	461a      	mov	r2, r3
 8011b54:	9300      	str	r3, [sp, #0]
 8011b56:	2180      	movs	r1, #128	@ 0x80
 8011b58:	a80e      	add	r0, sp, #56	@ 0x38
 8011b5a:	f44f 6720 	mov.w	r7, #2560	@ 0xa00
 8011b5e:	941f      	str	r4, [sp, #124]	@ 0x7c
 8011b60:	f8ad 7078 	strh.w	r7, [sp, #120]	@ 0x78
 8011b64:	f002 fa4a 	bl	8013ffc <uxr_serialize_message_header>
 8011b68:	4621      	mov	r1, r4
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	2208      	movs	r2, #8
 8011b6e:	a80e      	add	r0, sp, #56	@ 0x38
 8011b70:	f002 f84a 	bl	8013c08 <uxr_buffer_submessage_header>
 8011b74:	a91e      	add	r1, sp, #120	@ 0x78
 8011b76:	4604      	mov	r4, r0
 8011b78:	a80e      	add	r0, sp, #56	@ 0x38
 8011b7a:	f003 f91f 	bl	8014dbc <uxr_serialize_GET_INFO_Payload>
 8011b7e:	b104      	cbz	r4, 8011b82 <uxr_ping_agent_attempts+0x56>
 8011b80:	b938      	cbnz	r0, 8011b92 <uxr_ping_agent_attempts+0x66>
 8011b82:	f04f 0b00 	mov.w	fp, #0
 8011b86:	4658      	mov	r0, fp
 8011b88:	b051      	add	sp, #324	@ 0x144
 8011b8a:	ecbd 8b02 	vpop	{d8}
 8011b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b92:	a80e      	add	r0, sp, #56	@ 0x38
 8011b94:	f7fa fe0e 	bl	800c7b4 <ucdr_buffer_length>
 8011b98:	1c6b      	adds	r3, r5, #1
 8011b9a:	ee08 0a10 	vmov	s16, r0
 8011b9e:	9303      	str	r3, [sp, #12]
 8011ba0:	f04f 0901 	mov.w	r9, #1
 8011ba4:	9b03      	ldr	r3, [sp, #12]
 8011ba6:	454b      	cmp	r3, r9
 8011ba8:	d0eb      	beq.n	8011b82 <uxr_ping_agent_attempts+0x56>
 8011baa:	e9d6 0300 	ldrd	r0, r3, [r6]
 8011bae:	ee18 2a10 	vmov	r2, s16
 8011bb2:	a90a      	add	r1, sp, #40	@ 0x28
 8011bb4:	4798      	blx	r3
 8011bb6:	f002 f86d 	bl	8013c94 <uxr_millis>
 8011bba:	4645      	mov	r5, r8
 8011bbc:	4604      	mov	r4, r0
 8011bbe:	f04f 0a00 	mov.w	sl, #0
 8011bc2:	68b7      	ldr	r7, [r6, #8]
 8011bc4:	6830      	ldr	r0, [r6, #0]
 8011bc6:	f8cd a018 	str.w	sl, [sp, #24]
 8011bca:	4643      	mov	r3, r8
 8011bcc:	aa07      	add	r2, sp, #28
 8011bce:	a906      	add	r1, sp, #24
 8011bd0:	47b8      	blx	r7
 8011bd2:	4607      	mov	r7, r0
 8011bd4:	b958      	cbnz	r0, 8011bee <uxr_ping_agent_attempts+0xc2>
 8011bd6:	f002 f85d 	bl	8013c94 <uxr_millis>
 8011bda:	1b00      	subs	r0, r0, r4
 8011bdc:	1a2d      	subs	r5, r5, r0
 8011bde:	f002 f859 	bl	8013c94 <uxr_millis>
 8011be2:	2d00      	cmp	r5, #0
 8011be4:	4604      	mov	r4, r0
 8011be6:	dcec      	bgt.n	8011bc2 <uxr_ping_agent_attempts+0x96>
 8011be8:	f109 0901 	add.w	r9, r9, #1
 8011bec:	e7da      	b.n	8011ba4 <uxr_ping_agent_attempts+0x78>
 8011bee:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8011bf2:	a816      	add	r0, sp, #88	@ 0x58
 8011bf4:	f7fa fdb2 	bl	800c75c <ucdr_init_buffer>
 8011bf8:	ab05      	add	r3, sp, #20
 8011bfa:	f10d 0211 	add.w	r2, sp, #17
 8011bfe:	a916      	add	r1, sp, #88	@ 0x58
 8011c00:	a808      	add	r0, sp, #32
 8011c02:	e9cd aa08 	strd	sl, sl, [sp, #32]
 8011c06:	f001 f9bb 	bl	8012f80 <uxr_read_session_header>
 8011c0a:	22c8      	movs	r2, #200	@ 0xc8
 8011c0c:	2100      	movs	r1, #0
 8011c0e:	a81e      	add	r0, sp, #120	@ 0x78
 8011c10:	f008 fb10 	bl	801a234 <memset>
 8011c14:	a816      	add	r0, sp, #88	@ 0x58
 8011c16:	f7fa fdd1 	bl	800c7bc <ucdr_buffer_remaining>
 8011c1a:	2804      	cmp	r0, #4
 8011c1c:	d814      	bhi.n	8011c48 <uxr_ping_agent_attempts+0x11c>
 8011c1e:	f89d b12d 	ldrb.w	fp, [sp, #301]	@ 0x12d
 8011c22:	f002 f837 	bl	8013c94 <uxr_millis>
 8011c26:	1b00      	subs	r0, r0, r4
 8011c28:	1a2d      	subs	r5, r5, r0
 8011c2a:	f002 f833 	bl	8013c94 <uxr_millis>
 8011c2e:	2d00      	cmp	r5, #0
 8011c30:	4604      	mov	r4, r0
 8011c32:	dd2a      	ble.n	8011c8a <uxr_ping_agent_attempts+0x15e>
 8011c34:	f1bb 0f00 	cmp.w	fp, #0
 8011c38:	d0c3      	beq.n	8011bc2 <uxr_ping_agent_attempts+0x96>
 8011c3a:	46bb      	mov	fp, r7
 8011c3c:	4658      	mov	r0, fp
 8011c3e:	b051      	add	sp, #324	@ 0x144
 8011c40:	ecbd 8b02 	vpop	{d8}
 8011c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c48:	f10d 0316 	add.w	r3, sp, #22
 8011c4c:	f10d 0213 	add.w	r2, sp, #19
 8011c50:	f10d 0112 	add.w	r1, sp, #18
 8011c54:	a816      	add	r0, sp, #88	@ 0x58
 8011c56:	f88d a012 	strb.w	sl, [sp, #18]
 8011c5a:	f8ad a016 	strh.w	sl, [sp, #22]
 8011c5e:	f88d a013 	strb.w	sl, [sp, #19]
 8011c62:	f002 fa1d 	bl	80140a0 <uxr_deserialize_submessage_header>
 8011c66:	a816      	add	r0, sp, #88	@ 0x58
 8011c68:	f7fa fda8 	bl	800c7bc <ucdr_buffer_remaining>
 8011c6c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8011c70:	4298      	cmp	r0, r3
 8011c72:	d3d4      	bcc.n	8011c1e <uxr_ping_agent_attempts+0xf2>
 8011c74:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8011c78:	2b06      	cmp	r3, #6
 8011c7a:	d1d0      	bne.n	8011c1e <uxr_ping_agent_attempts+0xf2>
 8011c7c:	a916      	add	r1, sp, #88	@ 0x58
 8011c7e:	a81e      	add	r0, sp, #120	@ 0x78
 8011c80:	f88d a12d 	strb.w	sl, [sp, #301]	@ 0x12d
 8011c84:	f000 face 	bl	8012224 <read_submessage_info>
 8011c88:	e7c9      	b.n	8011c1e <uxr_ping_agent_attempts+0xf2>
 8011c8a:	f1bb 0f00 	cmp.w	fp, #0
 8011c8e:	d1d4      	bne.n	8011c3a <uxr_ping_agent_attempts+0x10e>
 8011c90:	f109 0901 	add.w	r9, r9, #1
 8011c94:	e786      	b.n	8011ba4 <uxr_ping_agent_attempts+0x78>
 8011c96:	bf00      	nop
 8011c98:	0801b100 	.word	0x0801b100

08011c9c <uxr_buffer_request_data>:
 8011c9c:	b530      	push	{r4, r5, lr}
 8011c9e:	b095      	sub	sp, #84	@ 0x54
 8011ca0:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8011ca4:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8011ca6:	9303      	str	r3, [sp, #12]
 8011ca8:	2200      	movs	r2, #0
 8011caa:	2d00      	cmp	r5, #0
 8011cac:	bf14      	ite	ne
 8011cae:	2101      	movne	r1, #1
 8011cb0:	4611      	moveq	r1, r2
 8011cb2:	4604      	mov	r4, r0
 8011cb4:	f88d 301c 	strb.w	r3, [sp, #28]
 8011cb8:	f88d 201d 	strb.w	r2, [sp, #29]
 8011cbc:	f88d 201e 	strb.w	r2, [sp, #30]
 8011cc0:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8011cc4:	d021      	beq.n	8011d0a <uxr_buffer_request_data+0x6e>
 8011cc6:	682a      	ldr	r2, [r5, #0]
 8011cc8:	686b      	ldr	r3, [r5, #4]
 8011cca:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 8011cce:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8011cd2:	2210      	movs	r2, #16
 8011cd4:	2308      	movs	r3, #8
 8011cd6:	2100      	movs	r1, #0
 8011cd8:	e9cd 3100 	strd	r3, r1, [sp]
 8011cdc:	4620      	mov	r0, r4
 8011cde:	9905      	ldr	r1, [sp, #20]
 8011ce0:	ab0c      	add	r3, sp, #48	@ 0x30
 8011ce2:	f001 f861 	bl	8012da8 <uxr_prepare_stream_to_write_submessage>
 8011ce6:	b918      	cbnz	r0, 8011cf0 <uxr_buffer_request_data+0x54>
 8011ce8:	4604      	mov	r4, r0
 8011cea:	4620      	mov	r0, r4
 8011cec:	b015      	add	sp, #84	@ 0x54
 8011cee:	bd30      	pop	{r4, r5, pc}
 8011cf0:	9904      	ldr	r1, [sp, #16]
 8011cf2:	aa06      	add	r2, sp, #24
 8011cf4:	4620      	mov	r0, r4
 8011cf6:	f001 f98d 	bl	8013014 <uxr_init_base_object_request>
 8011cfa:	a906      	add	r1, sp, #24
 8011cfc:	4604      	mov	r4, r0
 8011cfe:	a80c      	add	r0, sp, #48	@ 0x30
 8011d00:	f003 f92e 	bl	8014f60 <uxr_serialize_READ_DATA_Payload>
 8011d04:	4620      	mov	r0, r4
 8011d06:	b015      	add	sp, #84	@ 0x54
 8011d08:	bd30      	pop	{r4, r5, pc}
 8011d0a:	2208      	movs	r2, #8
 8011d0c:	e7e2      	b.n	8011cd4 <uxr_buffer_request_data+0x38>
 8011d0e:	bf00      	nop

08011d10 <uxr_buffer_cancel_data>:
 8011d10:	b510      	push	{r4, lr}
 8011d12:	b094      	sub	sp, #80	@ 0x50
 8011d14:	2300      	movs	r3, #0
 8011d16:	9202      	str	r2, [sp, #8]
 8011d18:	9205      	str	r2, [sp, #20]
 8011d1a:	9301      	str	r3, [sp, #4]
 8011d1c:	2201      	movs	r2, #1
 8011d1e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011d22:	f88d 301e 	strb.w	r3, [sp, #30]
 8011d26:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8011d2a:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8011d2e:	2308      	movs	r3, #8
 8011d30:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8011d34:	9300      	str	r3, [sp, #0]
 8011d36:	2210      	movs	r2, #16
 8011d38:	ab0c      	add	r3, sp, #48	@ 0x30
 8011d3a:	4604      	mov	r4, r0
 8011d3c:	9103      	str	r1, [sp, #12]
 8011d3e:	f001 f833 	bl	8012da8 <uxr_prepare_stream_to_write_submessage>
 8011d42:	b918      	cbnz	r0, 8011d4c <uxr_buffer_cancel_data+0x3c>
 8011d44:	4604      	mov	r4, r0
 8011d46:	4620      	mov	r0, r4
 8011d48:	b014      	add	sp, #80	@ 0x50
 8011d4a:	bd10      	pop	{r4, pc}
 8011d4c:	9905      	ldr	r1, [sp, #20]
 8011d4e:	aa06      	add	r2, sp, #24
 8011d50:	4620      	mov	r0, r4
 8011d52:	f001 f95f 	bl	8013014 <uxr_init_base_object_request>
 8011d56:	a906      	add	r1, sp, #24
 8011d58:	4604      	mov	r4, r0
 8011d5a:	a80c      	add	r0, sp, #48	@ 0x30
 8011d5c:	f003 f900 	bl	8014f60 <uxr_serialize_READ_DATA_Payload>
 8011d60:	4620      	mov	r0, r4
 8011d62:	b014      	add	sp, #80	@ 0x50
 8011d64:	bd10      	pop	{r4, pc}
 8011d66:	bf00      	nop

08011d68 <read_submessage_format>:
 8011d68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011d6c:	b095      	sub	sp, #84	@ 0x54
 8011d6e:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 8011d72:	b113      	cbz	r3, 8011d7a <read_submessage_format+0x12>
 8011d74:	b015      	add	sp, #84	@ 0x54
 8011d76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d7a:	460c      	mov	r4, r1
 8011d7c:	4615      	mov	r5, r2
 8011d7e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8011d82:	4607      	mov	r7, r0
 8011d84:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8011d86:	9004      	str	r0, [sp, #16]
 8011d88:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8011d8a:	9005      	str	r0, [sp, #20]
 8011d8c:	1a52      	subs	r2, r2, r1
 8011d8e:	a80c      	add	r0, sp, #48	@ 0x30
 8011d90:	4699      	mov	r9, r3
 8011d92:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8011d96:	f7fa fce1 	bl	800c75c <ucdr_init_buffer>
 8011d9a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8011d9e:	a80c      	add	r0, sp, #48	@ 0x30
 8011da0:	f7fa fcb0 	bl	800c704 <ucdr_set_on_full_buffer_callback>
 8011da4:	69e2      	ldr	r2, [r4, #28]
 8011da6:	b19a      	cbz	r2, 8011dd0 <read_submessage_format+0x68>
 8011da8:	f1b8 0f07 	cmp.w	r8, #7
 8011dac:	f882 9014 	strb.w	r9, [r2, #20]
 8011db0:	d040      	beq.n	8011e34 <read_submessage_format+0xcc>
 8011db2:	f1b8 0f08 	cmp.w	r8, #8
 8011db6:	d02e      	beq.n	8011e16 <read_submessage_format+0xae>
 8011db8:	f1b8 0f06 	cmp.w	r8, #6
 8011dbc:	d011      	beq.n	8011de2 <read_submessage_format+0x7a>
 8011dbe:	2301      	movs	r3, #1
 8011dc0:	7513      	strb	r3, [r2, #20]
 8011dc2:	4629      	mov	r1, r5
 8011dc4:	4620      	mov	r0, r4
 8011dc6:	f7fa fd19 	bl	800c7fc <ucdr_advance_buffer>
 8011dca:	b015      	add	sp, #84	@ 0x54
 8011dcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011dd0:	f1b8 0f07 	cmp.w	r8, #7
 8011dd4:	d02e      	beq.n	8011e34 <read_submessage_format+0xcc>
 8011dd6:	f1b8 0f08 	cmp.w	r8, #8
 8011dda:	d01c      	beq.n	8011e16 <read_submessage_format+0xae>
 8011ddc:	f1b8 0f06 	cmp.w	r8, #6
 8011de0:	d1ef      	bne.n	8011dc2 <read_submessage_format+0x5a>
 8011de2:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 8011de6:	f1b8 0f00 	cmp.w	r8, #0
 8011dea:	d011      	beq.n	8011e10 <read_submessage_format+0xa8>
 8011dec:	ab0c      	add	r3, sp, #48	@ 0x30
 8011dee:	e9cd 3500 	strd	r3, r5, [sp]
 8011df2:	2306      	movs	r3, #6
 8011df4:	f88d 3016 	strb.w	r3, [sp, #22]
 8011df8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011dfc:	9302      	str	r3, [sp, #8]
 8011dfe:	4632      	mov	r2, r6
 8011e00:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8011e04:	4638      	mov	r0, r7
 8011e06:	47c0      	blx	r8
 8011e08:	2301      	movs	r3, #1
 8011e0a:	69e2      	ldr	r2, [r4, #28]
 8011e0c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8011e10:	2a00      	cmp	r2, #0
 8011e12:	d1d4      	bne.n	8011dbe <read_submessage_format+0x56>
 8011e14:	e7d5      	b.n	8011dc2 <read_submessage_format+0x5a>
 8011e16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d0f8      	beq.n	8011e10 <read_submessage_format+0xa8>
 8011e1e:	a906      	add	r1, sp, #24
 8011e20:	a80c      	add	r0, sp, #48	@ 0x30
 8011e22:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8011e26:	f003 f961 	bl	80150ec <uxr_deserialize_SampleIdentity>
 8011e2a:	b9a0      	cbnz	r0, 8011e56 <read_submessage_format+0xee>
 8011e2c:	69e2      	ldr	r2, [r4, #28]
 8011e2e:	2a00      	cmp	r2, #0
 8011e30:	d1c5      	bne.n	8011dbe <read_submessage_format+0x56>
 8011e32:	e7c6      	b.n	8011dc2 <read_submessage_format+0x5a>
 8011e34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011e38:	b13b      	cbz	r3, 8011e4a <read_submessage_format+0xe2>
 8011e3a:	a906      	add	r1, sp, #24
 8011e3c:	a80c      	add	r0, sp, #48	@ 0x30
 8011e3e:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8011e42:	f002 fe13 	bl	8014a6c <uxr_deserialize_BaseObjectRequest>
 8011e46:	bb60      	cbnz	r0, 8011ea2 <read_submessage_format+0x13a>
 8011e48:	69e2      	ldr	r2, [r4, #28]
 8011e4a:	68a3      	ldr	r3, [r4, #8]
 8011e4c:	442b      	add	r3, r5
 8011e4e:	60a3      	str	r3, [r4, #8]
 8011e50:	2a00      	cmp	r2, #0
 8011e52:	d1b4      	bne.n	8011dbe <read_submessage_format+0x56>
 8011e54:	e7b5      	b.n	8011dc2 <read_submessage_format+0x5a>
 8011e56:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8011e5a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011e5c:	1a52      	subs	r2, r2, r1
 8011e5e:	eba8 0803 	sub.w	r8, r8, r3
 8011e62:	a80c      	add	r0, sp, #48	@ 0x30
 8011e64:	f7fa fc7a 	bl	800c75c <ucdr_init_buffer>
 8011e68:	44a8      	add	r8, r5
 8011e6a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8011e6e:	a80c      	add	r0, sp, #48	@ 0x30
 8011e70:	f7fa fc48 	bl	800c704 <ucdr_set_on_full_buffer_callback>
 8011e74:	fa1f f888 	uxth.w	r8, r8
 8011e78:	ab0c      	add	r3, sp, #48	@ 0x30
 8011e7a:	9300      	str	r3, [sp, #0]
 8011e7c:	f8cd 8004 	str.w	r8, [sp, #4]
 8011e80:	2108      	movs	r1, #8
 8011e82:	f88d 1016 	strb.w	r1, [sp, #22]
 8011e86:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8011e8a:	9102      	str	r1, [sp, #8]
 8011e8c:	ab06      	add	r3, sp, #24
 8011e8e:	4632      	mov	r2, r6
 8011e90:	9905      	ldr	r1, [sp, #20]
 8011e92:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 8011e96:	4638      	mov	r0, r7
 8011e98:	47b0      	blx	r6
 8011e9a:	2301      	movs	r3, #1
 8011e9c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8011ea0:	e7c4      	b.n	8011e2c <read_submessage_format+0xc4>
 8011ea2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8011ea6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011ea8:	1a52      	subs	r2, r2, r1
 8011eaa:	a80c      	add	r0, sp, #48	@ 0x30
 8011eac:	eba8 0803 	sub.w	r8, r8, r3
 8011eb0:	f7fa fc54 	bl	800c75c <ucdr_init_buffer>
 8011eb4:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8011eb8:	a80c      	add	r0, sp, #48	@ 0x30
 8011eba:	f7fa fc23 	bl	800c704 <ucdr_set_on_full_buffer_callback>
 8011ebe:	ab0c      	add	r3, sp, #48	@ 0x30
 8011ec0:	9300      	str	r3, [sp, #0]
 8011ec2:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8011ec6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011eca:	44a8      	add	r8, r5
 8011ecc:	fa1f f888 	uxth.w	r8, r8
 8011ed0:	f8cd 8004 	str.w	r8, [sp, #4]
 8011ed4:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8011ed8:	2107      	movs	r1, #7
 8011eda:	f88d 1016 	strb.w	r1, [sp, #22]
 8011ede:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8011ee2:	9102      	str	r1, [sp, #8]
 8011ee4:	4632      	mov	r2, r6
 8011ee6:	b29b      	uxth	r3, r3
 8011ee8:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 8011eec:	9905      	ldr	r1, [sp, #20]
 8011eee:	4638      	mov	r0, r7
 8011ef0:	47b0      	blx	r6
 8011ef2:	2301      	movs	r3, #1
 8011ef4:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8011ef8:	e7a6      	b.n	8011e48 <read_submessage_format+0xe0>
 8011efa:	bf00      	nop

08011efc <on_get_fragmentation_info>:
 8011efc:	b500      	push	{lr}
 8011efe:	b08b      	sub	sp, #44	@ 0x2c
 8011f00:	4601      	mov	r1, r0
 8011f02:	2204      	movs	r2, #4
 8011f04:	a802      	add	r0, sp, #8
 8011f06:	f7fa fc29 	bl	800c75c <ucdr_init_buffer>
 8011f0a:	f10d 0305 	add.w	r3, sp, #5
 8011f0e:	f10d 0206 	add.w	r2, sp, #6
 8011f12:	a901      	add	r1, sp, #4
 8011f14:	a802      	add	r0, sp, #8
 8011f16:	f001 fe91 	bl	8013c3c <uxr_read_submessage_header>
 8011f1a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011f1e:	2b0d      	cmp	r3, #13
 8011f20:	d003      	beq.n	8011f2a <on_get_fragmentation_info+0x2e>
 8011f22:	2000      	movs	r0, #0
 8011f24:	b00b      	add	sp, #44	@ 0x2c
 8011f26:	f85d fb04 	ldr.w	pc, [sp], #4
 8011f2a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011f2e:	f013 0f02 	tst.w	r3, #2
 8011f32:	bf14      	ite	ne
 8011f34:	2002      	movne	r0, #2
 8011f36:	2001      	moveq	r0, #1
 8011f38:	b00b      	add	sp, #44	@ 0x2c
 8011f3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8011f3e:	bf00      	nop

08011f40 <read_submessage_get_info>:
 8011f40:	b570      	push	{r4, r5, r6, lr}
 8011f42:	2500      	movs	r5, #0
 8011f44:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8011f48:	4604      	mov	r4, r0
 8011f4a:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8011f4e:	460e      	mov	r6, r1
 8011f50:	a810      	add	r0, sp, #64	@ 0x40
 8011f52:	4629      	mov	r1, r5
 8011f54:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8011f58:	f008 f96c 	bl	801a234 <memset>
 8011f5c:	a903      	add	r1, sp, #12
 8011f5e:	4630      	mov	r0, r6
 8011f60:	f002 ff40 	bl	8014de4 <uxr_deserialize_GET_INFO_Payload>
 8011f64:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8011f68:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8011f6c:	4620      	mov	r0, r4
 8011f6e:	f001 f849 	bl	8013004 <uxr_session_header_offset>
 8011f72:	462b      	mov	r3, r5
 8011f74:	9000      	str	r0, [sp, #0]
 8011f76:	220c      	movs	r2, #12
 8011f78:	a905      	add	r1, sp, #20
 8011f7a:	a808      	add	r0, sp, #32
 8011f7c:	f7fa fbdc 	bl	800c738 <ucdr_init_buffer_origin_offset>
 8011f80:	a910      	add	r1, sp, #64	@ 0x40
 8011f82:	a808      	add	r0, sp, #32
 8011f84:	f002 ffa0 	bl	8014ec8 <uxr_serialize_INFO_Payload>
 8011f88:	9b08      	ldr	r3, [sp, #32]
 8011f8a:	462a      	mov	r2, r5
 8011f8c:	4629      	mov	r1, r5
 8011f8e:	4620      	mov	r0, r4
 8011f90:	f000 ffe2 	bl	8012f58 <uxr_stamp_session_header>
 8011f94:	a808      	add	r0, sp, #32
 8011f96:	f7fa fc0d 	bl	800c7b4 <ucdr_buffer_length>
 8011f9a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011f9c:	4602      	mov	r2, r0
 8011f9e:	a905      	add	r1, sp, #20
 8011fa0:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011fa4:	47a0      	blx	r4
 8011fa6:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8011faa:	bd70      	pop	{r4, r5, r6, pc}

08011fac <write_submessage_acknack.isra.0>:
 8011fac:	b570      	push	{r4, r5, r6, lr}
 8011fae:	b092      	sub	sp, #72	@ 0x48
 8011fb0:	4605      	mov	r5, r0
 8011fb2:	460e      	mov	r6, r1
 8011fb4:	4614      	mov	r4, r2
 8011fb6:	f001 f825 	bl	8013004 <uxr_session_header_offset>
 8011fba:	a905      	add	r1, sp, #20
 8011fbc:	9000      	str	r0, [sp, #0]
 8011fbe:	2300      	movs	r3, #0
 8011fc0:	a80a      	add	r0, sp, #40	@ 0x28
 8011fc2:	2211      	movs	r2, #17
 8011fc4:	f7fa fbb8 	bl	800c738 <ucdr_init_buffer_origin_offset>
 8011fc8:	2218      	movs	r2, #24
 8011fca:	fb02 5404 	mla	r4, r2, r4, r5
 8011fce:	2300      	movs	r3, #0
 8011fd0:	2205      	movs	r2, #5
 8011fd2:	3450      	adds	r4, #80	@ 0x50
 8011fd4:	210a      	movs	r1, #10
 8011fd6:	a80a      	add	r0, sp, #40	@ 0x28
 8011fd8:	f001 fe16 	bl	8013c08 <uxr_buffer_submessage_header>
 8011fdc:	a903      	add	r1, sp, #12
 8011fde:	4620      	mov	r0, r4
 8011fe0:	f006 fd18 	bl	8018a14 <uxr_compute_acknack>
 8011fe4:	ba40      	rev16	r0, r0
 8011fe6:	f8ad 000e 	strh.w	r0, [sp, #14]
 8011fea:	a903      	add	r1, sp, #12
 8011fec:	a80a      	add	r0, sp, #40	@ 0x28
 8011fee:	f88d 6010 	strb.w	r6, [sp, #16]
 8011ff2:	f002 ffd9 	bl	8014fa8 <uxr_serialize_ACKNACK_Payload>
 8011ff6:	2200      	movs	r2, #0
 8011ff8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011ffa:	4611      	mov	r1, r2
 8011ffc:	4628      	mov	r0, r5
 8011ffe:	f000 ffab 	bl	8012f58 <uxr_stamp_session_header>
 8012002:	a80a      	add	r0, sp, #40	@ 0x28
 8012004:	f7fa fbd6 	bl	800c7b4 <ucdr_buffer_length>
 8012008:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 801200a:	4602      	mov	r2, r0
 801200c:	a905      	add	r1, sp, #20
 801200e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8012012:	47a0      	blx	r4
 8012014:	b012      	add	sp, #72	@ 0x48
 8012016:	bd70      	pop	{r4, r5, r6, pc}

08012018 <uxr_init_session>:
 8012018:	b510      	push	{r4, lr}
 801201a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8012050 <uxr_init_session+0x38>
 801201e:	2300      	movs	r3, #0
 8012020:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8012024:	4604      	mov	r4, r0
 8012026:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 801202a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 801202e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8012032:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8012036:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 801203a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 801203e:	2181      	movs	r1, #129	@ 0x81
 8012040:	f000 fef6 	bl	8012e30 <uxr_init_session_info>
 8012044:	f104 0008 	add.w	r0, r4, #8
 8012048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801204c:	f001 bcf8 	b.w	8013a40 <uxr_init_stream_storage>
	...

08012058 <uxr_set_status_callback>:
 8012058:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 801205c:	4770      	bx	lr
 801205e:	bf00      	nop

08012060 <uxr_set_topic_callback>:
 8012060:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8012064:	4770      	bx	lr
 8012066:	bf00      	nop

08012068 <uxr_set_request_callback>:
 8012068:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 801206c:	4770      	bx	lr
 801206e:	bf00      	nop

08012070 <uxr_set_reply_callback>:
 8012070:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8012074:	4770      	bx	lr
 8012076:	bf00      	nop

08012078 <uxr_create_output_best_effort_stream>:
 8012078:	b510      	push	{r4, lr}
 801207a:	b084      	sub	sp, #16
 801207c:	e9cd 2100 	strd	r2, r1, [sp]
 8012080:	4604      	mov	r4, r0
 8012082:	f000 ffbf 	bl	8013004 <uxr_session_header_offset>
 8012086:	e9dd 2100 	ldrd	r2, r1, [sp]
 801208a:	4603      	mov	r3, r0
 801208c:	f104 0008 	add.w	r0, r4, #8
 8012090:	b004      	add	sp, #16
 8012092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012096:	f001 bd1d 	b.w	8013ad4 <uxr_add_output_best_effort_buffer>
 801209a:	bf00      	nop

0801209c <uxr_create_output_reliable_stream>:
 801209c:	b510      	push	{r4, lr}
 801209e:	b088      	sub	sp, #32
 80120a0:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80120a4:	4604      	mov	r4, r0
 80120a6:	9303      	str	r3, [sp, #12]
 80120a8:	f000 ffac 	bl	8013004 <uxr_session_header_offset>
 80120ac:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80120b0:	9000      	str	r0, [sp, #0]
 80120b2:	9905      	ldr	r1, [sp, #20]
 80120b4:	f104 0008 	add.w	r0, r4, #8
 80120b8:	f001 fd20 	bl	8013afc <uxr_add_output_reliable_buffer>
 80120bc:	2200      	movs	r2, #0
 80120be:	b2c3      	uxtb	r3, r0
 80120c0:	f363 0207 	bfi	r2, r3, #0, #8
 80120c4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80120c8:	f363 220f 	bfi	r2, r3, #8, #8
 80120cc:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80120d0:	f363 4217 	bfi	r2, r3, #16, #8
 80120d4:	0e03      	lsrs	r3, r0, #24
 80120d6:	f363 621f 	bfi	r2, r3, #24, #8
 80120da:	4610      	mov	r0, r2
 80120dc:	b008      	add	sp, #32
 80120de:	bd10      	pop	{r4, pc}

080120e0 <uxr_create_input_best_effort_stream>:
 80120e0:	b082      	sub	sp, #8
 80120e2:	3008      	adds	r0, #8
 80120e4:	b002      	add	sp, #8
 80120e6:	f001 bd23 	b.w	8013b30 <uxr_add_input_best_effort_buffer>
 80120ea:	bf00      	nop

080120ec <uxr_create_input_reliable_stream>:
 80120ec:	b510      	push	{r4, lr}
 80120ee:	b084      	sub	sp, #16
 80120f0:	4c0b      	ldr	r4, [pc, #44]	@ (8012120 <uxr_create_input_reliable_stream+0x34>)
 80120f2:	9400      	str	r4, [sp, #0]
 80120f4:	3008      	adds	r0, #8
 80120f6:	f001 fd31 	bl	8013b5c <uxr_add_input_reliable_buffer>
 80120fa:	2200      	movs	r2, #0
 80120fc:	b2c3      	uxtb	r3, r0
 80120fe:	f363 0207 	bfi	r2, r3, #0, #8
 8012102:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8012106:	f363 220f 	bfi	r2, r3, #8, #8
 801210a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801210e:	f363 4217 	bfi	r2, r3, #16, #8
 8012112:	0e03      	lsrs	r3, r0, #24
 8012114:	f363 621f 	bfi	r2, r3, #24, #8
 8012118:	4610      	mov	r0, r2
 801211a:	b004      	add	sp, #16
 801211c:	bd10      	pop	{r4, pc}
 801211e:	bf00      	nop
 8012120:	08011efd 	.word	0x08011efd

08012124 <uxr_epoch_nanos>:
 8012124:	b510      	push	{r4, lr}
 8012126:	4604      	mov	r4, r0
 8012128:	f001 fdce 	bl	8013cc8 <uxr_nanos>
 801212c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8012130:	1ac0      	subs	r0, r0, r3
 8012132:	eb61 0102 	sbc.w	r1, r1, r2
 8012136:	bd10      	pop	{r4, pc}

08012138 <uxr_flash_output_streams>:
 8012138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801213c:	7e03      	ldrb	r3, [r0, #24]
 801213e:	b084      	sub	sp, #16
 8012140:	4604      	mov	r4, r0
 8012142:	2b00      	cmp	r3, #0
 8012144:	d035      	beq.n	80121b2 <uxr_flash_output_streams+0x7a>
 8012146:	f04f 0900 	mov.w	r9, #0
 801214a:	4648      	mov	r0, r9
 801214c:	f10d 0802 	add.w	r8, sp, #2
 8012150:	af03      	add	r7, sp, #12
 8012152:	ae02      	add	r6, sp, #8
 8012154:	e006      	b.n	8012164 <uxr_flash_output_streams+0x2c>
 8012156:	7e23      	ldrb	r3, [r4, #24]
 8012158:	f109 0901 	add.w	r9, r9, #1
 801215c:	fa5f f089 	uxtb.w	r0, r9
 8012160:	4283      	cmp	r3, r0
 8012162:	d926      	bls.n	80121b2 <uxr_flash_output_streams+0x7a>
 8012164:	2201      	movs	r2, #1
 8012166:	4611      	mov	r1, r2
 8012168:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 801216c:	f001 fc14 	bl	8013998 <uxr_stream_id>
 8012170:	3508      	adds	r5, #8
 8012172:	4684      	mov	ip, r0
 8012174:	4643      	mov	r3, r8
 8012176:	463a      	mov	r2, r7
 8012178:	4631      	mov	r1, r6
 801217a:	4628      	mov	r0, r5
 801217c:	f8cd c004 	str.w	ip, [sp, #4]
 8012180:	f006 fcce 	bl	8018b20 <uxr_prepare_best_effort_buffer_to_send>
 8012184:	2800      	cmp	r0, #0
 8012186:	d0e6      	beq.n	8012156 <uxr_flash_output_streams+0x1e>
 8012188:	9b02      	ldr	r3, [sp, #8]
 801218a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801218e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8012192:	4620      	mov	r0, r4
 8012194:	f000 fee0 	bl	8012f58 <uxr_stamp_session_header>
 8012198:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801219a:	9a03      	ldr	r2, [sp, #12]
 801219c:	685d      	ldr	r5, [r3, #4]
 801219e:	6818      	ldr	r0, [r3, #0]
 80121a0:	9902      	ldr	r1, [sp, #8]
 80121a2:	47a8      	blx	r5
 80121a4:	f109 0901 	add.w	r9, r9, #1
 80121a8:	7e23      	ldrb	r3, [r4, #24]
 80121aa:	fa5f f089 	uxtb.w	r0, r9
 80121ae:	4283      	cmp	r3, r0
 80121b0:	d8d8      	bhi.n	8012164 <uxr_flash_output_streams+0x2c>
 80121b2:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80121b6:	b38b      	cbz	r3, 801221c <uxr_flash_output_streams+0xe4>
 80121b8:	f04f 0900 	mov.w	r9, #0
 80121bc:	f10d 0802 	add.w	r8, sp, #2
 80121c0:	af03      	add	r7, sp, #12
 80121c2:	ae02      	add	r6, sp, #8
 80121c4:	4648      	mov	r0, r9
 80121c6:	2201      	movs	r2, #1
 80121c8:	2102      	movs	r1, #2
 80121ca:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 80121ce:	f001 fbe3 	bl	8013998 <uxr_stream_id>
 80121d2:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80121d6:	3520      	adds	r5, #32
 80121d8:	9001      	str	r0, [sp, #4]
 80121da:	e00d      	b.n	80121f8 <uxr_flash_output_streams+0xc0>
 80121dc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80121e0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80121e4:	9b02      	ldr	r3, [sp, #8]
 80121e6:	f000 feb7 	bl	8012f58 <uxr_stamp_session_header>
 80121ea:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80121ec:	9a03      	ldr	r2, [sp, #12]
 80121ee:	f8d3 a004 	ldr.w	sl, [r3, #4]
 80121f2:	9902      	ldr	r1, [sp, #8]
 80121f4:	6818      	ldr	r0, [r3, #0]
 80121f6:	47d0      	blx	sl
 80121f8:	4643      	mov	r3, r8
 80121fa:	463a      	mov	r2, r7
 80121fc:	4631      	mov	r1, r6
 80121fe:	4628      	mov	r0, r5
 8012200:	f006 feac 	bl	8018f5c <uxr_prepare_next_reliable_buffer_to_send>
 8012204:	4603      	mov	r3, r0
 8012206:	4620      	mov	r0, r4
 8012208:	2b00      	cmp	r3, #0
 801220a:	d1e7      	bne.n	80121dc <uxr_flash_output_streams+0xa4>
 801220c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8012210:	f109 0901 	add.w	r9, r9, #1
 8012214:	fa5f f089 	uxtb.w	r0, r9
 8012218:	4283      	cmp	r3, r0
 801221a:	d8d4      	bhi.n	80121c6 <uxr_flash_output_streams+0x8e>
 801221c:	b004      	add	sp, #16
 801221e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012222:	bf00      	nop

08012224 <read_submessage_info>:
 8012224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012228:	460d      	mov	r5, r1
 801222a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 801222e:	4669      	mov	r1, sp
 8012230:	4607      	mov	r7, r0
 8012232:	4628      	mov	r0, r5
 8012234:	f002 fcd0 	bl	8014bd8 <uxr_deserialize_BaseObjectReply>
 8012238:	a902      	add	r1, sp, #8
 801223a:	4604      	mov	r4, r0
 801223c:	4628      	mov	r0, r5
 801223e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8012242:	f7f8 ff91 	bl	800b168 <ucdr_deserialize_bool>
 8012246:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801224a:	4004      	ands	r4, r0
 801224c:	b2e4      	uxtb	r4, r4
 801224e:	b95b      	cbnz	r3, 8012268 <read_submessage_info+0x44>
 8012250:	a987      	add	r1, sp, #540	@ 0x21c
 8012252:	4628      	mov	r0, r5
 8012254:	f7f8 ff88 	bl	800b168 <ucdr_deserialize_bool>
 8012258:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 801225c:	4606      	mov	r6, r0
 801225e:	b94b      	cbnz	r3, 8012274 <read_submessage_info+0x50>
 8012260:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8012264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012268:	a903      	add	r1, sp, #12
 801226a:	4628      	mov	r0, r5
 801226c:	f002 fb5c 	bl	8014928 <uxr_deserialize_ObjectVariant>
 8012270:	4004      	ands	r4, r0
 8012272:	e7ed      	b.n	8012250 <read_submessage_info+0x2c>
 8012274:	a988      	add	r1, sp, #544	@ 0x220
 8012276:	4628      	mov	r0, r5
 8012278:	f7f8 ffa4 	bl	800b1c4 <ucdr_deserialize_uint8_t>
 801227c:	4234      	tst	r4, r6
 801227e:	d0ef      	beq.n	8012260 <read_submessage_info+0x3c>
 8012280:	2800      	cmp	r0, #0
 8012282:	d0ed      	beq.n	8012260 <read_submessage_info+0x3c>
 8012284:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8012288:	2b0d      	cmp	r3, #13
 801228a:	d1e9      	bne.n	8012260 <read_submessage_info+0x3c>
 801228c:	a98a      	add	r1, sp, #552	@ 0x228
 801228e:	4628      	mov	r0, r5
 8012290:	f7f9 fd3e 	bl	800bd10 <ucdr_deserialize_int16_t>
 8012294:	b140      	cbz	r0, 80122a8 <read_submessage_info+0x84>
 8012296:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 801229a:	2b00      	cmp	r3, #0
 801229c:	dd07      	ble.n	80122ae <read_submessage_info+0x8a>
 801229e:	f1b8 0f00 	cmp.w	r8, #0
 80122a2:	bf14      	ite	ne
 80122a4:	2001      	movne	r0, #1
 80122a6:	2002      	moveq	r0, #2
 80122a8:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 80122ac:	e7d8      	b.n	8012260 <read_submessage_info+0x3c>
 80122ae:	2000      	movs	r0, #0
 80122b0:	e7fa      	b.n	80122a8 <read_submessage_info+0x84>
 80122b2:	bf00      	nop

080122b4 <read_submessage_list>:
 80122b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122b8:	b097      	sub	sp, #92	@ 0x5c
 80122ba:	4ec1      	ldr	r6, [pc, #772]	@ (80125c0 <read_submessage_list+0x30c>)
 80122bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80122be:	4604      	mov	r4, r0
 80122c0:	460d      	mov	r5, r1
 80122c2:	f04f 0801 	mov.w	r8, #1
 80122c6:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 80122ca:	aa0c      	add	r2, sp, #48	@ 0x30
 80122cc:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 80122d0:	4628      	mov	r0, r5
 80122d2:	f001 fcb3 	bl	8013c3c <uxr_read_submessage_header>
 80122d6:	2800      	cmp	r0, #0
 80122d8:	f000 813e 	beq.w	8012558 <read_submessage_list+0x2a4>
 80122dc:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 80122e0:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 80122e4:	3b02      	subs	r3, #2
 80122e6:	2b0d      	cmp	r3, #13
 80122e8:	d8ed      	bhi.n	80122c6 <read_submessage_list+0x12>
 80122ea:	a101      	add	r1, pc, #4	@ (adr r1, 80122f0 <read_submessage_list+0x3c>)
 80122ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80122f0:	0801254f 	.word	0x0801254f
 80122f4:	080122c7 	.word	0x080122c7
 80122f8:	0801253f 	.word	0x0801253f
 80122fc:	080124dd 	.word	0x080124dd
 8012300:	080124d3 	.word	0x080124d3
 8012304:	080122c7 	.word	0x080122c7
 8012308:	080122c7 	.word	0x080122c7
 801230c:	08012433 	.word	0x08012433
 8012310:	080123c3 	.word	0x080123c3
 8012314:	08012383 	.word	0x08012383
 8012318:	080122c7 	.word	0x080122c7
 801231c:	080122c7 	.word	0x080122c7
 8012320:	080122c7 	.word	0x080122c7
 8012324:	08012329 	.word	0x08012329
 8012328:	a910      	add	r1, sp, #64	@ 0x40
 801232a:	4628      	mov	r0, r5
 801232c:	f002 fe8c 	bl	8015048 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8012330:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 8012334:	f1b9 0f00 	cmp.w	r9, #0
 8012338:	f000 8116 	beq.w	8012568 <read_submessage_list+0x2b4>
 801233c:	f001 fcc4 	bl	8013cc8 <uxr_nanos>
 8012340:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8012342:	4602      	mov	r2, r0
 8012344:	460b      	mov	r3, r1
 8012346:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8012348:	2100      	movs	r1, #0
 801234a:	468c      	mov	ip, r1
 801234c:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8012350:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8012354:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8012356:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8012358:	468c      	mov	ip, r1
 801235a:	fbc0 7c06 	smlal	r7, ip, r0, r6
 801235e:	46e2      	mov	sl, ip
 8012360:	46bc      	mov	ip, r7
 8012362:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 8012366:	fbc0 7106 	smlal	r7, r1, r0, r6
 801236a:	e9cd ca02 	strd	ip, sl, [sp, #8]
 801236e:	e9cd 7100 	strd	r7, r1, [sp]
 8012372:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8012376:	9106      	str	r1, [sp, #24]
 8012378:	4620      	mov	r0, r4
 801237a:	47c8      	blx	r9
 801237c:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 8012380:	e7a1      	b.n	80122c6 <read_submessage_list+0x12>
 8012382:	a910      	add	r1, sp, #64	@ 0x40
 8012384:	4628      	mov	r0, r5
 8012386:	f002 fe4d 	bl	8015024 <uxr_deserialize_HEARTBEAT_Payload>
 801238a:	2100      	movs	r1, #0
 801238c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8012390:	f001 fb2c 	bl	80139ec <uxr_stream_id_from_raw>
 8012394:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8012398:	900f      	str	r0, [sp, #60]	@ 0x3c
 801239a:	4639      	mov	r1, r7
 801239c:	f104 0008 	add.w	r0, r4, #8
 80123a0:	f001 fc12 	bl	8013bc8 <uxr_get_input_reliable_stream>
 80123a4:	2800      	cmp	r0, #0
 80123a6:	d08e      	beq.n	80122c6 <read_submessage_list+0x12>
 80123a8:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 80123ac:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 80123b0:	f006 fb24 	bl	80189fc <uxr_process_heartbeat>
 80123b4:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 80123b8:	463a      	mov	r2, r7
 80123ba:	4620      	mov	r0, r4
 80123bc:	f7ff fdf6 	bl	8011fac <write_submessage_acknack.isra.0>
 80123c0:	e781      	b.n	80122c6 <read_submessage_list+0x12>
 80123c2:	a910      	add	r1, sp, #64	@ 0x40
 80123c4:	4628      	mov	r0, r5
 80123c6:	f002 fe05 	bl	8014fd4 <uxr_deserialize_ACKNACK_Payload>
 80123ca:	2100      	movs	r1, #0
 80123cc:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 80123d0:	f001 fb0c 	bl	80139ec <uxr_stream_id_from_raw>
 80123d4:	900d      	str	r0, [sp, #52]	@ 0x34
 80123d6:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80123da:	f104 0008 	add.w	r0, r4, #8
 80123de:	f001 fbdf 	bl	8013ba0 <uxr_get_output_reliable_stream>
 80123e2:	4607      	mov	r7, r0
 80123e4:	2800      	cmp	r0, #0
 80123e6:	f43f af6e 	beq.w	80122c6 <read_submessage_list+0x12>
 80123ea:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 80123ee:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 80123f2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 80123f6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80123fa:	b289      	uxth	r1, r1
 80123fc:	f006 fe58 	bl	80190b0 <uxr_process_acknack>
 8012400:	4638      	mov	r0, r7
 8012402:	f006 fe15 	bl	8019030 <uxr_begin_output_nack_buffer_it>
 8012406:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801240a:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 801240e:	e006      	b.n	801241e <read_submessage_list+0x16a>
 8012410:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012412:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012414:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8012418:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801241a:	6818      	ldr	r0, [r3, #0]
 801241c:	47c8      	blx	r9
 801241e:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8012422:	aa0f      	add	r2, sp, #60	@ 0x3c
 8012424:	4651      	mov	r1, sl
 8012426:	4638      	mov	r0, r7
 8012428:	f006 fe04 	bl	8019034 <uxr_next_reliable_nack_buffer_to_send>
 801242c:	2800      	cmp	r0, #0
 801242e:	d1ef      	bne.n	8012410 <read_submessage_list+0x15c>
 8012430:	e749      	b.n	80122c6 <read_submessage_list+0x12>
 8012432:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8012436:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 801243a:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801243e:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8012442:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8012446:	4651      	mov	r1, sl
 8012448:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801244c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 8012450:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8012454:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8012458:	4628      	mov	r0, r5
 801245a:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 801245e:	f002 fb05 	bl	8014a6c <uxr_deserialize_BaseObjectRequest>
 8012462:	4650      	mov	r0, sl
 8012464:	a90f      	add	r1, sp, #60	@ 0x3c
 8012466:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 801246a:	f000 fdf1 	bl	8013050 <uxr_parse_base_object_request>
 801246e:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8012472:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8012474:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8012478:	9110      	str	r1, [sp, #64]	@ 0x40
 801247a:	3f04      	subs	r7, #4
 801247c:	f009 090e 	and.w	r9, r9, #14
 8012480:	b2bf      	uxth	r7, r7
 8012482:	f1bb 0f00 	cmp.w	fp, #0
 8012486:	d006      	beq.n	8012496 <read_submessage_list+0x1e2>
 8012488:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 801248c:	9300      	str	r3, [sp, #0]
 801248e:	4652      	mov	r2, sl
 8012490:	2300      	movs	r3, #0
 8012492:	4620      	mov	r0, r4
 8012494:	47d8      	blx	fp
 8012496:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8012498:	b16a      	cbz	r2, 80124b6 <read_submessage_list+0x202>
 801249a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 801249c:	2100      	movs	r1, #0
 801249e:	3802      	subs	r0, #2
 80124a0:	e002      	b.n	80124a8 <read_submessage_list+0x1f4>
 80124a2:	3101      	adds	r1, #1
 80124a4:	4291      	cmp	r1, r2
 80124a6:	d006      	beq.n	80124b6 <read_submessage_list+0x202>
 80124a8:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80124ac:	4553      	cmp	r3, sl
 80124ae:	d1f8      	bne.n	80124a2 <read_submessage_list+0x1ee>
 80124b0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80124b2:	2200      	movs	r2, #0
 80124b4:	545a      	strb	r2, [r3, r1]
 80124b6:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 80124ba:	9102      	str	r1, [sp, #8]
 80124bc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80124be:	9101      	str	r1, [sp, #4]
 80124c0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80124c2:	9100      	str	r1, [sp, #0]
 80124c4:	464b      	mov	r3, r9
 80124c6:	463a      	mov	r2, r7
 80124c8:	4629      	mov	r1, r5
 80124ca:	4620      	mov	r0, r4
 80124cc:	f7ff fc4c 	bl	8011d68 <read_submessage_format>
 80124d0:	e6f9      	b.n	80122c6 <read_submessage_list+0x12>
 80124d2:	4629      	mov	r1, r5
 80124d4:	4620      	mov	r0, r4
 80124d6:	f7ff fea5 	bl	8012224 <read_submessage_info>
 80124da:	e6f4      	b.n	80122c6 <read_submessage_list+0x12>
 80124dc:	2a00      	cmp	r2, #0
 80124de:	d03e      	beq.n	801255e <read_submessage_list+0x2aa>
 80124e0:	a910      	add	r1, sp, #64	@ 0x40
 80124e2:	4628      	mov	r0, r5
 80124e4:	f002 fcd2 	bl	8014e8c <uxr_deserialize_STATUS_Payload>
 80124e8:	a90e      	add	r1, sp, #56	@ 0x38
 80124ea:	aa0d      	add	r2, sp, #52	@ 0x34
 80124ec:	a810      	add	r0, sp, #64	@ 0x40
 80124ee:	f000 fdaf 	bl	8013050 <uxr_parse_base_object_request>
 80124f2:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 80124f6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80124f8:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 80124fc:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8012500:	910f      	str	r1, [sp, #60]	@ 0x3c
 8012502:	f1ba 0f00 	cmp.w	sl, #0
 8012506:	d006      	beq.n	8012516 <read_submessage_list+0x262>
 8012508:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 801250c:	9300      	str	r3, [sp, #0]
 801250e:	463a      	mov	r2, r7
 8012510:	464b      	mov	r3, r9
 8012512:	4620      	mov	r0, r4
 8012514:	47d0      	blx	sl
 8012516:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8012518:	2a00      	cmp	r2, #0
 801251a:	f43f aed4 	beq.w	80122c6 <read_submessage_list+0x12>
 801251e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8012520:	2100      	movs	r1, #0
 8012522:	3802      	subs	r0, #2
 8012524:	e003      	b.n	801252e <read_submessage_list+0x27a>
 8012526:	3101      	adds	r1, #1
 8012528:	4291      	cmp	r1, r2
 801252a:	f43f aecc 	beq.w	80122c6 <read_submessage_list+0x12>
 801252e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8012532:	42bb      	cmp	r3, r7
 8012534:	d1f7      	bne.n	8012526 <read_submessage_list+0x272>
 8012536:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8012538:	f803 9001 	strb.w	r9, [r3, r1]
 801253c:	e6c3      	b.n	80122c6 <read_submessage_list+0x12>
 801253e:	2a00      	cmp	r2, #0
 8012540:	f47f aec1 	bne.w	80122c6 <read_submessage_list+0x12>
 8012544:	4629      	mov	r1, r5
 8012546:	4620      	mov	r0, r4
 8012548:	f000 fcc8 	bl	8012edc <uxr_read_create_session_status>
 801254c:	e6bb      	b.n	80122c6 <read_submessage_list+0x12>
 801254e:	4629      	mov	r1, r5
 8012550:	4620      	mov	r0, r4
 8012552:	f7ff fcf5 	bl	8011f40 <read_submessage_get_info>
 8012556:	e6b6      	b.n	80122c6 <read_submessage_list+0x12>
 8012558:	b017      	add	sp, #92	@ 0x5c
 801255a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801255e:	4629      	mov	r1, r5
 8012560:	4620      	mov	r0, r4
 8012562:	f000 fcc7 	bl	8012ef4 <uxr_read_delete_session_status>
 8012566:	e6ae      	b.n	80122c6 <read_submessage_list+0x12>
 8012568:	f001 fbae 	bl	8013cc8 <uxr_nanos>
 801256c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801256e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8012570:	464f      	mov	r7, r9
 8012572:	fbc3 2706 	smlal	r2, r7, r3, r6
 8012576:	1812      	adds	r2, r2, r0
 8012578:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801257a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801257c:	eb47 0101 	adc.w	r1, r7, r1
 8012580:	464f      	mov	r7, r9
 8012582:	fbc3 0706 	smlal	r0, r7, r3, r6
 8012586:	463b      	mov	r3, r7
 8012588:	4684      	mov	ip, r0
 801258a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 801258e:	fbc7 0906 	smlal	r0, r9, r7, r6
 8012592:	eb1c 0c00 	adds.w	ip, ip, r0
 8012596:	464f      	mov	r7, r9
 8012598:	eb43 0307 	adc.w	r3, r3, r7
 801259c:	ebb2 0c0c 	subs.w	ip, r2, ip
 80125a0:	eb61 0303 	sbc.w	r3, r1, r3
 80125a4:	0fda      	lsrs	r2, r3, #31
 80125a6:	eb12 020c 	adds.w	r2, r2, ip
 80125aa:	f143 0300 	adc.w	r3, r3, #0
 80125ae:	0852      	lsrs	r2, r2, #1
 80125b0:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 80125b4:	105b      	asrs	r3, r3, #1
 80125b6:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 80125ba:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 80125be:	e6dd      	b.n	801237c <read_submessage_list+0xc8>
 80125c0:	3b9aca00 	.word	0x3b9aca00

080125c4 <listen_message_reliably>:
 80125c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125c8:	1e0b      	subs	r3, r1, #0
 80125ca:	b09d      	sub	sp, #116	@ 0x74
 80125cc:	bfb8      	it	lt
 80125ce:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 80125d2:	4680      	mov	r8, r0
 80125d4:	9305      	str	r3, [sp, #20]
 80125d6:	f001 fb5d 	bl	8013c94 <uxr_millis>
 80125da:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 80125de:	4681      	mov	r9, r0
 80125e0:	2a00      	cmp	r2, #0
 80125e2:	f000 80a1 	beq.w	8012728 <listen_message_reliably+0x164>
 80125e6:	2600      	movs	r6, #0
 80125e8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80125ec:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80125f0:	9303      	str	r3, [sp, #12]
 80125f2:	4630      	mov	r0, r6
 80125f4:	460f      	mov	r7, r1
 80125f6:	e00f      	b.n	8012618 <listen_message_reliably+0x54>
 80125f8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80125fc:	9903      	ldr	r1, [sp, #12]
 80125fe:	455a      	cmp	r2, fp
 8012600:	f106 0601 	add.w	r6, r6, #1
 8012604:	eb73 0101 	sbcs.w	r1, r3, r1
 8012608:	b2f0      	uxtb	r0, r6
 801260a:	da01      	bge.n	8012610 <listen_message_reliably+0x4c>
 801260c:	4693      	mov	fp, r2
 801260e:	9303      	str	r3, [sp, #12]
 8012610:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8012614:	4283      	cmp	r3, r0
 8012616:	d960      	bls.n	80126da <listen_message_reliably+0x116>
 8012618:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 801261c:	2102      	movs	r1, #2
 801261e:	2201      	movs	r2, #1
 8012620:	f001 f9ba 	bl	8013998 <uxr_stream_id>
 8012624:	00e4      	lsls	r4, r4, #3
 8012626:	f104 0520 	add.w	r5, r4, #32
 801262a:	4445      	add	r5, r8
 801262c:	4601      	mov	r1, r0
 801262e:	463b      	mov	r3, r7
 8012630:	464a      	mov	r2, r9
 8012632:	4628      	mov	r0, r5
 8012634:	9109      	str	r1, [sp, #36]	@ 0x24
 8012636:	f006 fcd1 	bl	8018fdc <uxr_update_output_stream_heartbeat_timestamp>
 801263a:	eb08 0304 	add.w	r3, r8, r4
 801263e:	2800      	cmp	r0, #0
 8012640:	d0da      	beq.n	80125f8 <listen_message_reliably+0x34>
 8012642:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8012646:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 801264a:	9304      	str	r3, [sp, #16]
 801264c:	4640      	mov	r0, r8
 801264e:	f000 fcd9 	bl	8013004 <uxr_session_header_offset>
 8012652:	3501      	adds	r5, #1
 8012654:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8012658:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 801265c:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8012660:	2300      	movs	r3, #0
 8012662:	2211      	movs	r2, #17
 8012664:	9000      	str	r0, [sp, #0]
 8012666:	a90c      	add	r1, sp, #48	@ 0x30
 8012668:	4650      	mov	r0, sl
 801266a:	f7fa f865 	bl	800c738 <ucdr_init_buffer_origin_offset>
 801266e:	2300      	movs	r3, #0
 8012670:	2205      	movs	r2, #5
 8012672:	210b      	movs	r1, #11
 8012674:	4650      	mov	r0, sl
 8012676:	f001 fac7 	bl	8013c08 <uxr_buffer_submessage_header>
 801267a:	8968      	ldrh	r0, [r5, #10]
 801267c:	2101      	movs	r1, #1
 801267e:	f006 fd6f 	bl	8019160 <uxr_seq_num_add>
 8012682:	892b      	ldrh	r3, [r5, #8]
 8012684:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8012688:	4602      	mov	r2, r0
 801268a:	9b04      	ldr	r3, [sp, #16]
 801268c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8012690:	a90a      	add	r1, sp, #40	@ 0x28
 8012692:	4650      	mov	r0, sl
 8012694:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8012698:	f002 fcb0 	bl	8014ffc <uxr_serialize_HEARTBEAT_Payload>
 801269c:	2200      	movs	r2, #0
 801269e:	4611      	mov	r1, r2
 80126a0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80126a2:	4640      	mov	r0, r8
 80126a4:	f000 fc58 	bl	8012f58 <uxr_stamp_session_header>
 80126a8:	4650      	mov	r0, sl
 80126aa:	f7fa f883 	bl	800c7b4 <ucdr_buffer_length>
 80126ae:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 80126b2:	4602      	mov	r2, r0
 80126b4:	a90c      	add	r1, sp, #48	@ 0x30
 80126b6:	e9d3 0500 	ldrd	r0, r5, [r3]
 80126ba:	4444      	add	r4, r8
 80126bc:	47a8      	blx	r5
 80126be:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 80126c2:	9903      	ldr	r1, [sp, #12]
 80126c4:	455a      	cmp	r2, fp
 80126c6:	f106 0601 	add.w	r6, r6, #1
 80126ca:	eb73 0101 	sbcs.w	r1, r3, r1
 80126ce:	b2f0      	uxtb	r0, r6
 80126d0:	db9c      	blt.n	801260c <listen_message_reliably+0x48>
 80126d2:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 80126d6:	4283      	cmp	r3, r0
 80126d8:	d89e      	bhi.n	8012618 <listen_message_reliably+0x54>
 80126da:	9a03      	ldr	r2, [sp, #12]
 80126dc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80126e0:	429a      	cmp	r2, r3
 80126e2:	bf08      	it	eq
 80126e4:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 80126e8:	d01e      	beq.n	8012728 <listen_message_reliably+0x164>
 80126ea:	ebab 0309 	sub.w	r3, fp, r9
 80126ee:	9905      	ldr	r1, [sp, #20]
 80126f0:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	bf08      	it	eq
 80126f8:	2301      	moveq	r3, #1
 80126fa:	4299      	cmp	r1, r3
 80126fc:	bfa8      	it	ge
 80126fe:	4619      	movge	r1, r3
 8012700:	6894      	ldr	r4, [r2, #8]
 8012702:	6810      	ldr	r0, [r2, #0]
 8012704:	4689      	mov	r9, r1
 8012706:	460b      	mov	r3, r1
 8012708:	aa08      	add	r2, sp, #32
 801270a:	a907      	add	r1, sp, #28
 801270c:	47a0      	blx	r4
 801270e:	b968      	cbnz	r0, 801272c <listen_message_reliably+0x168>
 8012710:	9b05      	ldr	r3, [sp, #20]
 8012712:	eba3 0309 	sub.w	r3, r3, r9
 8012716:	2b00      	cmp	r3, #0
 8012718:	9305      	str	r3, [sp, #20]
 801271a:	f73f af5c 	bgt.w	80125d6 <listen_message_reliably+0x12>
 801271e:	4604      	mov	r4, r0
 8012720:	4620      	mov	r0, r4
 8012722:	b01d      	add	sp, #116	@ 0x74
 8012724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012728:	9b05      	ldr	r3, [sp, #20]
 801272a:	e7e0      	b.n	80126ee <listen_message_reliably+0x12a>
 801272c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8012730:	4604      	mov	r4, r0
 8012732:	a80c      	add	r0, sp, #48	@ 0x30
 8012734:	f7fa f812 	bl	800c75c <ucdr_init_buffer>
 8012738:	2500      	movs	r5, #0
 801273a:	f10d 031a 	add.w	r3, sp, #26
 801273e:	aa06      	add	r2, sp, #24
 8012740:	a90c      	add	r1, sp, #48	@ 0x30
 8012742:	4640      	mov	r0, r8
 8012744:	f88d 5018 	strb.w	r5, [sp, #24]
 8012748:	f000 fc1a 	bl	8012f80 <uxr_read_session_header>
 801274c:	b918      	cbnz	r0, 8012756 <listen_message_reliably+0x192>
 801274e:	4620      	mov	r0, r4
 8012750:	b01d      	add	sp, #116	@ 0x74
 8012752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012756:	4629      	mov	r1, r5
 8012758:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801275c:	f001 f946 	bl	80139ec <uxr_stream_id_from_raw>
 8012760:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8012764:	2d01      	cmp	r5, #1
 8012766:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 801276a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 801276e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8012772:	d04b      	beq.n	801280c <listen_message_reliably+0x248>
 8012774:	2d02      	cmp	r5, #2
 8012776:	d00f      	beq.n	8012798 <listen_message_reliably+0x1d4>
 8012778:	2d00      	cmp	r5, #0
 801277a:	d1e8      	bne.n	801274e <listen_message_reliably+0x18a>
 801277c:	4629      	mov	r1, r5
 801277e:	4628      	mov	r0, r5
 8012780:	f001 f934 	bl	80139ec <uxr_stream_id_from_raw>
 8012784:	a90c      	add	r1, sp, #48	@ 0x30
 8012786:	4602      	mov	r2, r0
 8012788:	4640      	mov	r0, r8
 801278a:	920a      	str	r2, [sp, #40]	@ 0x28
 801278c:	f7ff fd92 	bl	80122b4 <read_submessage_list>
 8012790:	4620      	mov	r0, r4
 8012792:	b01d      	add	sp, #116	@ 0x74
 8012794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012798:	4631      	mov	r1, r6
 801279a:	f108 0008 	add.w	r0, r8, #8
 801279e:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 80127a2:	f001 fa11 	bl	8013bc8 <uxr_get_input_reliable_stream>
 80127a6:	4607      	mov	r7, r0
 80127a8:	b338      	cbz	r0, 80127fa <listen_message_reliably+0x236>
 80127aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80127ac:	9203      	str	r2, [sp, #12]
 80127ae:	a80c      	add	r0, sp, #48	@ 0x30
 80127b0:	f7fa f804 	bl	800c7bc <ucdr_buffer_remaining>
 80127b4:	4603      	mov	r3, r0
 80127b6:	f10d 0019 	add.w	r0, sp, #25
 80127ba:	9000      	str	r0, [sp, #0]
 80127bc:	9a03      	ldr	r2, [sp, #12]
 80127be:	4651      	mov	r1, sl
 80127c0:	4638      	mov	r0, r7
 80127c2:	f006 f821 	bl	8018808 <uxr_receive_reliable_message>
 80127c6:	b1c0      	cbz	r0, 80127fa <listen_message_reliably+0x236>
 80127c8:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80127cc:	b393      	cbz	r3, 8012834 <listen_message_reliably+0x270>
 80127ce:	ad14      	add	r5, sp, #80	@ 0x50
 80127d0:	f04f 0a02 	mov.w	sl, #2
 80127d4:	e00a      	b.n	80127ec <listen_message_reliably+0x228>
 80127d6:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 80127da:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 80127de:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 80127e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80127e4:	4629      	mov	r1, r5
 80127e6:	4640      	mov	r0, r8
 80127e8:	f7ff fd64 	bl	80122b4 <read_submessage_list>
 80127ec:	2204      	movs	r2, #4
 80127ee:	4629      	mov	r1, r5
 80127f0:	4638      	mov	r0, r7
 80127f2:	f006 f889 	bl	8018908 <uxr_next_input_reliable_buffer_available>
 80127f6:	2800      	cmp	r0, #0
 80127f8:	d1ed      	bne.n	80127d6 <listen_message_reliably+0x212>
 80127fa:	4640      	mov	r0, r8
 80127fc:	4632      	mov	r2, r6
 80127fe:	4649      	mov	r1, r9
 8012800:	f7ff fbd4 	bl	8011fac <write_submessage_acknack.isra.0>
 8012804:	4620      	mov	r0, r4
 8012806:	b01d      	add	sp, #116	@ 0x74
 8012808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801280c:	4631      	mov	r1, r6
 801280e:	f108 0008 	add.w	r0, r8, #8
 8012812:	f001 f9cf 	bl	8013bb4 <uxr_get_input_best_effort_stream>
 8012816:	2800      	cmp	r0, #0
 8012818:	d099      	beq.n	801274e <listen_message_reliably+0x18a>
 801281a:	4651      	mov	r1, sl
 801281c:	f005 ff60 	bl	80186e0 <uxr_receive_best_effort_message>
 8012820:	2800      	cmp	r0, #0
 8012822:	d094      	beq.n	801274e <listen_message_reliably+0x18a>
 8012824:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8012828:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801282a:	a90c      	add	r1, sp, #48	@ 0x30
 801282c:	4640      	mov	r0, r8
 801282e:	f7ff fd41 	bl	80122b4 <read_submessage_list>
 8012832:	e78c      	b.n	801274e <listen_message_reliably+0x18a>
 8012834:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8012838:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801283a:	a90c      	add	r1, sp, #48	@ 0x30
 801283c:	4640      	mov	r0, r8
 801283e:	f7ff fd39 	bl	80122b4 <read_submessage_list>
 8012842:	e7c4      	b.n	80127ce <listen_message_reliably+0x20a>

08012844 <uxr_run_session_timeout>:
 8012844:	b570      	push	{r4, r5, r6, lr}
 8012846:	4604      	mov	r4, r0
 8012848:	460d      	mov	r5, r1
 801284a:	f001 fa23 	bl	8013c94 <uxr_millis>
 801284e:	4606      	mov	r6, r0
 8012850:	4620      	mov	r0, r4
 8012852:	f7ff fc71 	bl	8012138 <uxr_flash_output_streams>
 8012856:	4629      	mov	r1, r5
 8012858:	4620      	mov	r0, r4
 801285a:	f7ff feb3 	bl	80125c4 <listen_message_reliably>
 801285e:	f001 fa19 	bl	8013c94 <uxr_millis>
 8012862:	1b83      	subs	r3, r0, r6
 8012864:	1ae9      	subs	r1, r5, r3
 8012866:	2900      	cmp	r1, #0
 8012868:	dcf6      	bgt.n	8012858 <uxr_run_session_timeout+0x14>
 801286a:	f104 0008 	add.w	r0, r4, #8
 801286e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012872:	f001 b9b3 	b.w	8013bdc <uxr_output_streams_confirmed>
 8012876:	bf00      	nop

08012878 <uxr_run_session_until_data>:
 8012878:	b570      	push	{r4, r5, r6, lr}
 801287a:	4604      	mov	r4, r0
 801287c:	460d      	mov	r5, r1
 801287e:	f001 fa09 	bl	8013c94 <uxr_millis>
 8012882:	4606      	mov	r6, r0
 8012884:	4620      	mov	r0, r4
 8012886:	f7ff fc57 	bl	8012138 <uxr_flash_output_streams>
 801288a:	2300      	movs	r3, #0
 801288c:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8012890:	4629      	mov	r1, r5
 8012892:	e005      	b.n	80128a0 <uxr_run_session_until_data+0x28>
 8012894:	f001 f9fe 	bl	8013c94 <uxr_millis>
 8012898:	1b83      	subs	r3, r0, r6
 801289a:	1ae9      	subs	r1, r5, r3
 801289c:	2900      	cmp	r1, #0
 801289e:	dd07      	ble.n	80128b0 <uxr_run_session_until_data+0x38>
 80128a0:	4620      	mov	r0, r4
 80128a2:	f7ff fe8f 	bl	80125c4 <listen_message_reliably>
 80128a6:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 80128aa:	2800      	cmp	r0, #0
 80128ac:	d0f2      	beq.n	8012894 <uxr_run_session_until_data+0x1c>
 80128ae:	bd70      	pop	{r4, r5, r6, pc}
 80128b0:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 80128b4:	bd70      	pop	{r4, r5, r6, pc}
 80128b6:	bf00      	nop

080128b8 <uxr_run_session_until_confirm_delivery>:
 80128b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128bc:	4606      	mov	r6, r0
 80128be:	460d      	mov	r5, r1
 80128c0:	f001 f9e8 	bl	8013c94 <uxr_millis>
 80128c4:	4607      	mov	r7, r0
 80128c6:	4630      	mov	r0, r6
 80128c8:	f7ff fc36 	bl	8012138 <uxr_flash_output_streams>
 80128cc:	2d00      	cmp	r5, #0
 80128ce:	f106 0808 	add.w	r8, r6, #8
 80128d2:	bfa8      	it	ge
 80128d4:	462c      	movge	r4, r5
 80128d6:	da07      	bge.n	80128e8 <uxr_run_session_until_confirm_delivery+0x30>
 80128d8:	e00e      	b.n	80128f8 <uxr_run_session_until_confirm_delivery+0x40>
 80128da:	f7ff fe73 	bl	80125c4 <listen_message_reliably>
 80128de:	f001 f9d9 	bl	8013c94 <uxr_millis>
 80128e2:	1bc3      	subs	r3, r0, r7
 80128e4:	1aec      	subs	r4, r5, r3
 80128e6:	d407      	bmi.n	80128f8 <uxr_run_session_until_confirm_delivery+0x40>
 80128e8:	4640      	mov	r0, r8
 80128ea:	f001 f977 	bl	8013bdc <uxr_output_streams_confirmed>
 80128ee:	4603      	mov	r3, r0
 80128f0:	4621      	mov	r1, r4
 80128f2:	4630      	mov	r0, r6
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d0f0      	beq.n	80128da <uxr_run_session_until_confirm_delivery+0x22>
 80128f8:	4640      	mov	r0, r8
 80128fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80128fe:	f001 b96d 	b.w	8013bdc <uxr_output_streams_confirmed>
 8012902:	bf00      	nop

08012904 <uxr_run_session_until_all_status>:
 8012904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012908:	9c08      	ldr	r4, [sp, #32]
 801290a:	4606      	mov	r6, r0
 801290c:	460f      	mov	r7, r1
 801290e:	4691      	mov	r9, r2
 8012910:	461d      	mov	r5, r3
 8012912:	f7ff fc11 	bl	8012138 <uxr_flash_output_streams>
 8012916:	b124      	cbz	r4, 8012922 <uxr_run_session_until_all_status+0x1e>
 8012918:	4622      	mov	r2, r4
 801291a:	21ff      	movs	r1, #255	@ 0xff
 801291c:	4628      	mov	r0, r5
 801291e:	f007 fc89 	bl	801a234 <memset>
 8012922:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 8012926:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8012928:	f001 f9b4 	bl	8013c94 <uxr_millis>
 801292c:	3d01      	subs	r5, #1
 801292e:	f1a9 0902 	sub.w	r9, r9, #2
 8012932:	4680      	mov	r8, r0
 8012934:	4639      	mov	r1, r7
 8012936:	4630      	mov	r0, r6
 8012938:	f7ff fe44 	bl	80125c4 <listen_message_reliably>
 801293c:	f001 f9aa 	bl	8013c94 <uxr_millis>
 8012940:	eba0 0008 	sub.w	r0, r0, r8
 8012944:	1a39      	subs	r1, r7, r0
 8012946:	b344      	cbz	r4, 801299a <uxr_run_session_until_all_status+0x96>
 8012948:	4628      	mov	r0, r5
 801294a:	46ac      	mov	ip, r5
 801294c:	2301      	movs	r3, #1
 801294e:	e002      	b.n	8012956 <uxr_run_session_until_all_status+0x52>
 8012950:	42a3      	cmp	r3, r4
 8012952:	d20d      	bcs.n	8012970 <uxr_run_session_until_all_status+0x6c>
 8012954:	3301      	adds	r3, #1
 8012956:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 801295a:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801295e:	d1f7      	bne.n	8012950 <uxr_run_session_until_all_status+0x4c>
 8012960:	42a3      	cmp	r3, r4
 8012962:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 8012966:	d213      	bcs.n	8012990 <uxr_run_session_until_all_status+0x8c>
 8012968:	2a00      	cmp	r2, #0
 801296a:	d0f3      	beq.n	8012954 <uxr_run_session_until_all_status+0x50>
 801296c:	2900      	cmp	r1, #0
 801296e:	dce2      	bgt.n	8012936 <uxr_run_session_until_all_status+0x32>
 8012970:	2300      	movs	r3, #0
 8012972:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8012974:	442c      	add	r4, r5
 8012976:	e001      	b.n	801297c <uxr_run_session_until_all_status+0x78>
 8012978:	2b01      	cmp	r3, #1
 801297a:	d812      	bhi.n	80129a2 <uxr_run_session_until_all_status+0x9e>
 801297c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8012980:	4284      	cmp	r4, r0
 8012982:	d1f9      	bne.n	8012978 <uxr_run_session_until_all_status+0x74>
 8012984:	2b01      	cmp	r3, #1
 8012986:	bf8c      	ite	hi
 8012988:	2000      	movhi	r0, #0
 801298a:	2001      	movls	r0, #1
 801298c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012990:	2900      	cmp	r1, #0
 8012992:	dded      	ble.n	8012970 <uxr_run_session_until_all_status+0x6c>
 8012994:	2a00      	cmp	r2, #0
 8012996:	d1ce      	bne.n	8012936 <uxr_run_session_until_all_status+0x32>
 8012998:	e7ea      	b.n	8012970 <uxr_run_session_until_all_status+0x6c>
 801299a:	67f4      	str	r4, [r6, #124]	@ 0x7c
 801299c:	2001      	movs	r0, #1
 801299e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80129a2:	2000      	movs	r0, #0
 80129a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080129a8 <uxr_run_session_until_pong>:
 80129a8:	b570      	push	{r4, r5, r6, lr}
 80129aa:	4604      	mov	r4, r0
 80129ac:	460d      	mov	r5, r1
 80129ae:	f001 f971 	bl	8013c94 <uxr_millis>
 80129b2:	4606      	mov	r6, r0
 80129b4:	4620      	mov	r0, r4
 80129b6:	f7ff fbbf 	bl	8012138 <uxr_flash_output_streams>
 80129ba:	2300      	movs	r3, #0
 80129bc:	f884 30b5 	strb.w	r3, [r4, #181]	@ 0xb5
 80129c0:	4629      	mov	r1, r5
 80129c2:	e005      	b.n	80129d0 <uxr_run_session_until_pong+0x28>
 80129c4:	f001 f966 	bl	8013c94 <uxr_millis>
 80129c8:	1b83      	subs	r3, r0, r6
 80129ca:	1ae9      	subs	r1, r5, r3
 80129cc:	2900      	cmp	r1, #0
 80129ce:	dd0c      	ble.n	80129ea <uxr_run_session_until_pong+0x42>
 80129d0:	4620      	mov	r0, r4
 80129d2:	f7ff fdf7 	bl	80125c4 <listen_message_reliably>
 80129d6:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 80129da:	2800      	cmp	r0, #0
 80129dc:	d0f2      	beq.n	80129c4 <uxr_run_session_until_pong+0x1c>
 80129de:	f1a0 0001 	sub.w	r0, r0, #1
 80129e2:	fab0 f080 	clz	r0, r0
 80129e6:	0940      	lsrs	r0, r0, #5
 80129e8:	bd70      	pop	{r4, r5, r6, pc}
 80129ea:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 80129ee:	f1a0 0001 	sub.w	r0, r0, #1
 80129f2:	fab0 f080 	clz	r0, r0
 80129f6:	0940      	lsrs	r0, r0, #5
 80129f8:	bd70      	pop	{r4, r5, r6, pc}
 80129fa:	bf00      	nop

080129fc <wait_session_status>:
 80129fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a00:	4604      	mov	r4, r0
 8012a02:	b09d      	sub	sp, #116	@ 0x74
 8012a04:	20ff      	movs	r0, #255	@ 0xff
 8012a06:	7160      	strb	r0, [r4, #5]
 8012a08:	9303      	str	r3, [sp, #12]
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	f000 80b6 	beq.w	8012b7c <wait_session_status+0x180>
 8012a10:	468a      	mov	sl, r1
 8012a12:	4691      	mov	r9, r2
 8012a14:	f04f 0b00 	mov.w	fp, #0
 8012a18:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012a1a:	464a      	mov	r2, r9
 8012a1c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012a20:	4651      	mov	r1, sl
 8012a22:	47a8      	blx	r5
 8012a24:	f001 f936 	bl	8013c94 <uxr_millis>
 8012a28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8012a2c:	4605      	mov	r5, r0
 8012a2e:	e009      	b.n	8012a44 <wait_session_status+0x48>
 8012a30:	f001 f930 	bl	8013c94 <uxr_millis>
 8012a34:	1b40      	subs	r0, r0, r5
 8012a36:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	dd40      	ble.n	8012ac0 <wait_session_status+0xc4>
 8012a3e:	7960      	ldrb	r0, [r4, #5]
 8012a40:	28ff      	cmp	r0, #255	@ 0xff
 8012a42:	d145      	bne.n	8012ad0 <wait_session_status+0xd4>
 8012a44:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8012a46:	a908      	add	r1, sp, #32
 8012a48:	6896      	ldr	r6, [r2, #8]
 8012a4a:	6810      	ldr	r0, [r2, #0]
 8012a4c:	aa09      	add	r2, sp, #36	@ 0x24
 8012a4e:	47b0      	blx	r6
 8012a50:	2800      	cmp	r0, #0
 8012a52:	d0ed      	beq.n	8012a30 <wait_session_status+0x34>
 8012a54:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8012a58:	a80c      	add	r0, sp, #48	@ 0x30
 8012a5a:	f7f9 fe7f 	bl	800c75c <ucdr_init_buffer>
 8012a5e:	2600      	movs	r6, #0
 8012a60:	f10d 031e 	add.w	r3, sp, #30
 8012a64:	aa07      	add	r2, sp, #28
 8012a66:	a90c      	add	r1, sp, #48	@ 0x30
 8012a68:	4620      	mov	r0, r4
 8012a6a:	f88d 601c 	strb.w	r6, [sp, #28]
 8012a6e:	f000 fa87 	bl	8012f80 <uxr_read_session_header>
 8012a72:	2800      	cmp	r0, #0
 8012a74:	d0dc      	beq.n	8012a30 <wait_session_status+0x34>
 8012a76:	4631      	mov	r1, r6
 8012a78:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8012a7c:	f000 ffb6 	bl	80139ec <uxr_stream_id_from_raw>
 8012a80:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8012a84:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8012a88:	9302      	str	r3, [sp, #8]
 8012a8a:	2f01      	cmp	r7, #1
 8012a8c:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8012a90:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8012a94:	d05c      	beq.n	8012b50 <wait_session_status+0x154>
 8012a96:	2f02      	cmp	r7, #2
 8012a98:	d020      	beq.n	8012adc <wait_session_status+0xe0>
 8012a9a:	2f00      	cmp	r7, #0
 8012a9c:	d1c8      	bne.n	8012a30 <wait_session_status+0x34>
 8012a9e:	4639      	mov	r1, r7
 8012aa0:	4638      	mov	r0, r7
 8012aa2:	f000 ffa3 	bl	80139ec <uxr_stream_id_from_raw>
 8012aa6:	a90c      	add	r1, sp, #48	@ 0x30
 8012aa8:	4602      	mov	r2, r0
 8012aaa:	900b      	str	r0, [sp, #44]	@ 0x2c
 8012aac:	4620      	mov	r0, r4
 8012aae:	f7ff fc01 	bl	80122b4 <read_submessage_list>
 8012ab2:	f001 f8ef 	bl	8013c94 <uxr_millis>
 8012ab6:	1b40      	subs	r0, r0, r5
 8012ab8:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	dcbe      	bgt.n	8012a3e <wait_session_status+0x42>
 8012ac0:	9b03      	ldr	r3, [sp, #12]
 8012ac2:	7960      	ldrb	r0, [r4, #5]
 8012ac4:	f10b 0b01 	add.w	fp, fp, #1
 8012ac8:	455b      	cmp	r3, fp
 8012aca:	d001      	beq.n	8012ad0 <wait_session_status+0xd4>
 8012acc:	28ff      	cmp	r0, #255	@ 0xff
 8012ace:	d0a3      	beq.n	8012a18 <wait_session_status+0x1c>
 8012ad0:	38ff      	subs	r0, #255	@ 0xff
 8012ad2:	bf18      	it	ne
 8012ad4:	2001      	movne	r0, #1
 8012ad6:	b01d      	add	sp, #116	@ 0x74
 8012ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012adc:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8012ae0:	9304      	str	r3, [sp, #16]
 8012ae2:	4631      	mov	r1, r6
 8012ae4:	f104 0008 	add.w	r0, r4, #8
 8012ae8:	f001 f86e 	bl	8013bc8 <uxr_get_input_reliable_stream>
 8012aec:	4680      	mov	r8, r0
 8012aee:	b348      	cbz	r0, 8012b44 <wait_session_status+0x148>
 8012af0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012af2:	9205      	str	r2, [sp, #20]
 8012af4:	a80c      	add	r0, sp, #48	@ 0x30
 8012af6:	f7f9 fe61 	bl	800c7bc <ucdr_buffer_remaining>
 8012afa:	4603      	mov	r3, r0
 8012afc:	f10d 001d 	add.w	r0, sp, #29
 8012b00:	9000      	str	r0, [sp, #0]
 8012b02:	9a05      	ldr	r2, [sp, #20]
 8012b04:	9902      	ldr	r1, [sp, #8]
 8012b06:	4640      	mov	r0, r8
 8012b08:	f005 fe7e 	bl	8018808 <uxr_receive_reliable_message>
 8012b0c:	b1d0      	cbz	r0, 8012b44 <wait_session_status+0x148>
 8012b0e:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d03a      	beq.n	8012b8c <wait_session_status+0x190>
 8012b16:	9f04      	ldr	r7, [sp, #16]
 8012b18:	e00a      	b.n	8012b30 <wait_session_status+0x134>
 8012b1a:	f04f 0302 	mov.w	r3, #2
 8012b1e:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 8012b22:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8012b26:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8012b2a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012b2c:	f7ff fbc2 	bl	80122b4 <read_submessage_list>
 8012b30:	a914      	add	r1, sp, #80	@ 0x50
 8012b32:	2204      	movs	r2, #4
 8012b34:	4640      	mov	r0, r8
 8012b36:	f005 fee7 	bl	8018908 <uxr_next_input_reliable_buffer_available>
 8012b3a:	4603      	mov	r3, r0
 8012b3c:	a914      	add	r1, sp, #80	@ 0x50
 8012b3e:	4620      	mov	r0, r4
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d1ea      	bne.n	8012b1a <wait_session_status+0x11e>
 8012b44:	9904      	ldr	r1, [sp, #16]
 8012b46:	4632      	mov	r2, r6
 8012b48:	4620      	mov	r0, r4
 8012b4a:	f7ff fa2f 	bl	8011fac <write_submessage_acknack.isra.0>
 8012b4e:	e76f      	b.n	8012a30 <wait_session_status+0x34>
 8012b50:	4631      	mov	r1, r6
 8012b52:	f104 0008 	add.w	r0, r4, #8
 8012b56:	f001 f82d 	bl	8013bb4 <uxr_get_input_best_effort_stream>
 8012b5a:	2800      	cmp	r0, #0
 8012b5c:	f43f af68 	beq.w	8012a30 <wait_session_status+0x34>
 8012b60:	9902      	ldr	r1, [sp, #8]
 8012b62:	f005 fdbd 	bl	80186e0 <uxr_receive_best_effort_message>
 8012b66:	2800      	cmp	r0, #0
 8012b68:	f43f af62 	beq.w	8012a30 <wait_session_status+0x34>
 8012b6c:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8012b70:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012b72:	a90c      	add	r1, sp, #48	@ 0x30
 8012b74:	4620      	mov	r0, r4
 8012b76:	f7ff fb9d 	bl	80122b4 <read_submessage_list>
 8012b7a:	e759      	b.n	8012a30 <wait_session_status+0x34>
 8012b7c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012b7e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8012b82:	47a0      	blx	r4
 8012b84:	2001      	movs	r0, #1
 8012b86:	b01d      	add	sp, #116	@ 0x74
 8012b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b8c:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8012b90:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012b92:	a90c      	add	r1, sp, #48	@ 0x30
 8012b94:	4620      	mov	r0, r4
 8012b96:	f7ff fb8d 	bl	80122b4 <read_submessage_list>
 8012b9a:	e7bc      	b.n	8012b16 <wait_session_status+0x11a>

08012b9c <uxr_delete_session_retries>:
 8012b9c:	b530      	push	{r4, r5, lr}
 8012b9e:	b08f      	sub	sp, #60	@ 0x3c
 8012ba0:	4604      	mov	r4, r0
 8012ba2:	460d      	mov	r5, r1
 8012ba4:	f000 fa2e 	bl	8013004 <uxr_session_header_offset>
 8012ba8:	2300      	movs	r3, #0
 8012baa:	2210      	movs	r2, #16
 8012bac:	9000      	str	r0, [sp, #0]
 8012bae:	a902      	add	r1, sp, #8
 8012bb0:	a806      	add	r0, sp, #24
 8012bb2:	f7f9 fdc1 	bl	800c738 <ucdr_init_buffer_origin_offset>
 8012bb6:	a906      	add	r1, sp, #24
 8012bb8:	4620      	mov	r0, r4
 8012bba:	f000 f973 	bl	8012ea4 <uxr_buffer_delete_session>
 8012bbe:	2200      	movs	r2, #0
 8012bc0:	4611      	mov	r1, r2
 8012bc2:	9b06      	ldr	r3, [sp, #24]
 8012bc4:	4620      	mov	r0, r4
 8012bc6:	f000 f9c7 	bl	8012f58 <uxr_stamp_session_header>
 8012bca:	a806      	add	r0, sp, #24
 8012bcc:	f7f9 fdf2 	bl	800c7b4 <ucdr_buffer_length>
 8012bd0:	462b      	mov	r3, r5
 8012bd2:	4602      	mov	r2, r0
 8012bd4:	a902      	add	r1, sp, #8
 8012bd6:	4620      	mov	r0, r4
 8012bd8:	f7ff ff10 	bl	80129fc <wait_session_status>
 8012bdc:	b118      	cbz	r0, 8012be6 <uxr_delete_session_retries+0x4a>
 8012bde:	7960      	ldrb	r0, [r4, #5]
 8012be0:	fab0 f080 	clz	r0, r0
 8012be4:	0940      	lsrs	r0, r0, #5
 8012be6:	b00f      	add	sp, #60	@ 0x3c
 8012be8:	bd30      	pop	{r4, r5, pc}
 8012bea:	bf00      	nop

08012bec <uxr_create_session>:
 8012bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bf0:	f100 0b08 	add.w	fp, r0, #8
 8012bf4:	b0ab      	sub	sp, #172	@ 0xac
 8012bf6:	4604      	mov	r4, r0
 8012bf8:	4658      	mov	r0, fp
 8012bfa:	f000 ff2b 	bl	8013a54 <uxr_reset_stream_storage>
 8012bfe:	4620      	mov	r0, r4
 8012c00:	f000 fa00 	bl	8013004 <uxr_session_header_offset>
 8012c04:	2300      	movs	r3, #0
 8012c06:	9000      	str	r0, [sp, #0]
 8012c08:	221c      	movs	r2, #28
 8012c0a:	a90b      	add	r1, sp, #44	@ 0x2c
 8012c0c:	a812      	add	r0, sp, #72	@ 0x48
 8012c0e:	f7f9 fd93 	bl	800c738 <ucdr_init_buffer_origin_offset>
 8012c12:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012c14:	8a1a      	ldrh	r2, [r3, #16]
 8012c16:	3a04      	subs	r2, #4
 8012c18:	b292      	uxth	r2, r2
 8012c1a:	a912      	add	r1, sp, #72	@ 0x48
 8012c1c:	4620      	mov	r0, r4
 8012c1e:	f000 f917 	bl	8012e50 <uxr_buffer_create_session>
 8012c22:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8012c24:	4620      	mov	r0, r4
 8012c26:	f000 f983 	bl	8012f30 <uxr_stamp_create_session_header>
 8012c2a:	a812      	add	r0, sp, #72	@ 0x48
 8012c2c:	f7f9 fdc2 	bl	800c7b4 <ucdr_buffer_length>
 8012c30:	23ff      	movs	r3, #255	@ 0xff
 8012c32:	7163      	strb	r3, [r4, #5]
 8012c34:	230a      	movs	r3, #10
 8012c36:	46da      	mov	sl, fp
 8012c38:	9303      	str	r3, [sp, #12]
 8012c3a:	4683      	mov	fp, r0
 8012c3c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012c3e:	465a      	mov	r2, fp
 8012c40:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012c44:	a90b      	add	r1, sp, #44	@ 0x2c
 8012c46:	47a8      	blx	r5
 8012c48:	f001 f824 	bl	8013c94 <uxr_millis>
 8012c4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8012c50:	4605      	mov	r5, r0
 8012c52:	e009      	b.n	8012c68 <uxr_create_session+0x7c>
 8012c54:	f001 f81e 	bl	8013c94 <uxr_millis>
 8012c58:	1b40      	subs	r0, r0, r5
 8012c5a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	7962      	ldrb	r2, [r4, #5]
 8012c62:	dd38      	ble.n	8012cd6 <uxr_create_session+0xea>
 8012c64:	2aff      	cmp	r2, #255	@ 0xff
 8012c66:	d13c      	bne.n	8012ce2 <uxr_create_session+0xf6>
 8012c68:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8012c6a:	a907      	add	r1, sp, #28
 8012c6c:	6896      	ldr	r6, [r2, #8]
 8012c6e:	6810      	ldr	r0, [r2, #0]
 8012c70:	aa08      	add	r2, sp, #32
 8012c72:	47b0      	blx	r6
 8012c74:	2800      	cmp	r0, #0
 8012c76:	d0ed      	beq.n	8012c54 <uxr_create_session+0x68>
 8012c78:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8012c7c:	a81a      	add	r0, sp, #104	@ 0x68
 8012c7e:	f7f9 fd6d 	bl	800c75c <ucdr_init_buffer>
 8012c82:	2600      	movs	r6, #0
 8012c84:	f10d 031a 	add.w	r3, sp, #26
 8012c88:	aa06      	add	r2, sp, #24
 8012c8a:	a91a      	add	r1, sp, #104	@ 0x68
 8012c8c:	4620      	mov	r0, r4
 8012c8e:	f88d 6018 	strb.w	r6, [sp, #24]
 8012c92:	f000 f975 	bl	8012f80 <uxr_read_session_header>
 8012c96:	2800      	cmp	r0, #0
 8012c98:	d0dc      	beq.n	8012c54 <uxr_create_session+0x68>
 8012c9a:	4631      	mov	r1, r6
 8012c9c:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8012ca0:	f000 fea4 	bl	80139ec <uxr_stream_id_from_raw>
 8012ca4:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8012ca8:	2e01      	cmp	r6, #1
 8012caa:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8012cae:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 8012cb2:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8012cb6:	d053      	beq.n	8012d60 <uxr_create_session+0x174>
 8012cb8:	2e02      	cmp	r6, #2
 8012cba:	d018      	beq.n	8012cee <uxr_create_session+0x102>
 8012cbc:	2e00      	cmp	r6, #0
 8012cbe:	d1c9      	bne.n	8012c54 <uxr_create_session+0x68>
 8012cc0:	4631      	mov	r1, r6
 8012cc2:	4630      	mov	r0, r6
 8012cc4:	f000 fe92 	bl	80139ec <uxr_stream_id_from_raw>
 8012cc8:	a91a      	add	r1, sp, #104	@ 0x68
 8012cca:	4602      	mov	r2, r0
 8012ccc:	900a      	str	r0, [sp, #40]	@ 0x28
 8012cce:	4620      	mov	r0, r4
 8012cd0:	f7ff faf0 	bl	80122b4 <read_submessage_list>
 8012cd4:	e7be      	b.n	8012c54 <uxr_create_session+0x68>
 8012cd6:	9b03      	ldr	r3, [sp, #12]
 8012cd8:	3b01      	subs	r3, #1
 8012cda:	9303      	str	r3, [sp, #12]
 8012cdc:	d001      	beq.n	8012ce2 <uxr_create_session+0xf6>
 8012cde:	2aff      	cmp	r2, #255	@ 0xff
 8012ce0:	d0ac      	beq.n	8012c3c <uxr_create_session+0x50>
 8012ce2:	2a00      	cmp	r2, #0
 8012ce4:	d051      	beq.n	8012d8a <uxr_create_session+0x19e>
 8012ce6:	2000      	movs	r0, #0
 8012ce8:	b02b      	add	sp, #172	@ 0xac
 8012cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cee:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8012cf2:	9304      	str	r3, [sp, #16]
 8012cf4:	4639      	mov	r1, r7
 8012cf6:	4650      	mov	r0, sl
 8012cf8:	f000 ff66 	bl	8013bc8 <uxr_get_input_reliable_stream>
 8012cfc:	4680      	mov	r8, r0
 8012cfe:	b348      	cbz	r0, 8012d54 <uxr_create_session+0x168>
 8012d00:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8012d02:	9205      	str	r2, [sp, #20]
 8012d04:	a81a      	add	r0, sp, #104	@ 0x68
 8012d06:	f7f9 fd59 	bl	800c7bc <ucdr_buffer_remaining>
 8012d0a:	4603      	mov	r3, r0
 8012d0c:	f10d 0019 	add.w	r0, sp, #25
 8012d10:	9000      	str	r0, [sp, #0]
 8012d12:	9a05      	ldr	r2, [sp, #20]
 8012d14:	4649      	mov	r1, r9
 8012d16:	4640      	mov	r0, r8
 8012d18:	f005 fd76 	bl	8018808 <uxr_receive_reliable_message>
 8012d1c:	b1d0      	cbz	r0, 8012d54 <uxr_create_session+0x168>
 8012d1e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d038      	beq.n	8012d98 <uxr_create_session+0x1ac>
 8012d26:	9e04      	ldr	r6, [sp, #16]
 8012d28:	e00a      	b.n	8012d40 <uxr_create_session+0x154>
 8012d2a:	f04f 0302 	mov.w	r3, #2
 8012d2e:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 8012d32:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 8012d36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012d3a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012d3c:	f7ff faba 	bl	80122b4 <read_submessage_list>
 8012d40:	a922      	add	r1, sp, #136	@ 0x88
 8012d42:	2204      	movs	r2, #4
 8012d44:	4640      	mov	r0, r8
 8012d46:	f005 fddf 	bl	8018908 <uxr_next_input_reliable_buffer_available>
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	a922      	add	r1, sp, #136	@ 0x88
 8012d4e:	4620      	mov	r0, r4
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d1ea      	bne.n	8012d2a <uxr_create_session+0x13e>
 8012d54:	9904      	ldr	r1, [sp, #16]
 8012d56:	463a      	mov	r2, r7
 8012d58:	4620      	mov	r0, r4
 8012d5a:	f7ff f927 	bl	8011fac <write_submessage_acknack.isra.0>
 8012d5e:	e779      	b.n	8012c54 <uxr_create_session+0x68>
 8012d60:	4639      	mov	r1, r7
 8012d62:	4650      	mov	r0, sl
 8012d64:	f000 ff26 	bl	8013bb4 <uxr_get_input_best_effort_stream>
 8012d68:	2800      	cmp	r0, #0
 8012d6a:	f43f af73 	beq.w	8012c54 <uxr_create_session+0x68>
 8012d6e:	4649      	mov	r1, r9
 8012d70:	f005 fcb6 	bl	80186e0 <uxr_receive_best_effort_message>
 8012d74:	2800      	cmp	r0, #0
 8012d76:	f43f af6d 	beq.w	8012c54 <uxr_create_session+0x68>
 8012d7a:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8012d7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012d80:	a91a      	add	r1, sp, #104	@ 0x68
 8012d82:	4620      	mov	r0, r4
 8012d84:	f7ff fa96 	bl	80122b4 <read_submessage_list>
 8012d88:	e764      	b.n	8012c54 <uxr_create_session+0x68>
 8012d8a:	4650      	mov	r0, sl
 8012d8c:	f000 fe62 	bl	8013a54 <uxr_reset_stream_storage>
 8012d90:	2001      	movs	r0, #1
 8012d92:	b02b      	add	sp, #172	@ 0xac
 8012d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d98:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8012d9c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012d9e:	a91a      	add	r1, sp, #104	@ 0x68
 8012da0:	4620      	mov	r0, r4
 8012da2:	f7ff fa87 	bl	80122b4 <read_submessage_list>
 8012da6:	e7be      	b.n	8012d26 <uxr_create_session+0x13a>

08012da8 <uxr_prepare_stream_to_write_submessage>:
 8012da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012dac:	b082      	sub	sp, #8
 8012dae:	4682      	mov	sl, r0
 8012db0:	4610      	mov	r0, r2
 8012db2:	4615      	mov	r5, r2
 8012db4:	461e      	mov	r6, r3
 8012db6:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8012dba:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8012dbe:	9101      	str	r1, [sp, #4]
 8012dc0:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8012dc4:	f000 ff60 	bl	8013c88 <uxr_submessage_padding>
 8012dc8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012dcc:	f105 0904 	add.w	r9, r5, #4
 8012dd0:	2b01      	cmp	r3, #1
 8012dd2:	4481      	add	r9, r0
 8012dd4:	d01d      	beq.n	8012e12 <uxr_prepare_stream_to_write_submessage+0x6a>
 8012dd6:	2b02      	cmp	r3, #2
 8012dd8:	d116      	bne.n	8012e08 <uxr_prepare_stream_to_write_submessage+0x60>
 8012dda:	4621      	mov	r1, r4
 8012ddc:	f10a 0008 	add.w	r0, sl, #8
 8012de0:	f000 fede 	bl	8013ba0 <uxr_get_output_reliable_stream>
 8012de4:	4604      	mov	r4, r0
 8012de6:	b158      	cbz	r0, 8012e00 <uxr_prepare_stream_to_write_submessage+0x58>
 8012de8:	4649      	mov	r1, r9
 8012dea:	4632      	mov	r2, r6
 8012dec:	f005 ff48 	bl	8018c80 <uxr_prepare_reliable_buffer_to_write>
 8012df0:	4604      	mov	r4, r0
 8012df2:	b12c      	cbz	r4, 8012e00 <uxr_prepare_stream_to_write_submessage+0x58>
 8012df4:	4643      	mov	r3, r8
 8012df6:	b2aa      	uxth	r2, r5
 8012df8:	4639      	mov	r1, r7
 8012dfa:	4630      	mov	r0, r6
 8012dfc:	f000 ff04 	bl	8013c08 <uxr_buffer_submessage_header>
 8012e00:	4620      	mov	r0, r4
 8012e02:	b002      	add	sp, #8
 8012e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e08:	2400      	movs	r4, #0
 8012e0a:	4620      	mov	r0, r4
 8012e0c:	b002      	add	sp, #8
 8012e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e12:	4621      	mov	r1, r4
 8012e14:	f10a 0008 	add.w	r0, sl, #8
 8012e18:	f000 feba 	bl	8013b90 <uxr_get_output_best_effort_stream>
 8012e1c:	4604      	mov	r4, r0
 8012e1e:	2800      	cmp	r0, #0
 8012e20:	d0ee      	beq.n	8012e00 <uxr_prepare_stream_to_write_submessage+0x58>
 8012e22:	4649      	mov	r1, r9
 8012e24:	4632      	mov	r2, r6
 8012e26:	f005 fe5b 	bl	8018ae0 <uxr_prepare_best_effort_buffer_to_write>
 8012e2a:	4604      	mov	r4, r0
 8012e2c:	e7e1      	b.n	8012df2 <uxr_prepare_stream_to_write_submessage+0x4a>
 8012e2e:	bf00      	nop

08012e30 <uxr_init_session_info>:
 8012e30:	0e13      	lsrs	r3, r2, #24
 8012e32:	7043      	strb	r3, [r0, #1]
 8012e34:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8012e38:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8012e3c:	7001      	strb	r1, [r0, #0]
 8012e3e:	70c3      	strb	r3, [r0, #3]
 8012e40:	2109      	movs	r1, #9
 8012e42:	23ff      	movs	r3, #255	@ 0xff
 8012e44:	f880 c002 	strb.w	ip, [r0, #2]
 8012e48:	7102      	strb	r2, [r0, #4]
 8012e4a:	80c1      	strh	r1, [r0, #6]
 8012e4c:	7143      	strb	r3, [r0, #5]
 8012e4e:	4770      	bx	lr

08012e50 <uxr_buffer_create_session>:
 8012e50:	b530      	push	{r4, r5, lr}
 8012e52:	b089      	sub	sp, #36	@ 0x24
 8012e54:	2300      	movs	r3, #0
 8012e56:	4d12      	ldr	r5, [pc, #72]	@ (8012ea0 <uxr_buffer_create_session+0x50>)
 8012e58:	9307      	str	r3, [sp, #28]
 8012e5a:	f8ad 201c 	strh.w	r2, [sp, #28]
 8012e5e:	2201      	movs	r2, #1
 8012e60:	9301      	str	r3, [sp, #4]
 8012e62:	80c2      	strh	r2, [r0, #6]
 8012e64:	f88d 2004 	strb.w	r2, [sp, #4]
 8012e68:	682a      	ldr	r2, [r5, #0]
 8012e6a:	9200      	str	r2, [sp, #0]
 8012e6c:	88aa      	ldrh	r2, [r5, #4]
 8012e6e:	f8ad 2006 	strh.w	r2, [sp, #6]
 8012e72:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8012e76:	9202      	str	r2, [sp, #8]
 8012e78:	460c      	mov	r4, r1
 8012e7a:	7802      	ldrb	r2, [r0, #0]
 8012e7c:	9303      	str	r3, [sp, #12]
 8012e7e:	4619      	mov	r1, r3
 8012e80:	f88d 200c 	strb.w	r2, [sp, #12]
 8012e84:	4620      	mov	r0, r4
 8012e86:	2210      	movs	r2, #16
 8012e88:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8012e8c:	9306      	str	r3, [sp, #24]
 8012e8e:	f000 febb 	bl	8013c08 <uxr_buffer_submessage_header>
 8012e92:	4669      	mov	r1, sp
 8012e94:	4620      	mov	r0, r4
 8012e96:	f001 feff 	bl	8014c98 <uxr_serialize_CREATE_CLIENT_Payload>
 8012e9a:	b009      	add	sp, #36	@ 0x24
 8012e9c:	bd30      	pop	{r4, r5, pc}
 8012e9e:	bf00      	nop
 8012ea0:	0801b104 	.word	0x0801b104

08012ea4 <uxr_buffer_delete_session>:
 8012ea4:	b510      	push	{r4, lr}
 8012ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8012ed8 <uxr_buffer_delete_session+0x34>)
 8012ea8:	b082      	sub	sp, #8
 8012eaa:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 8012eae:	f8ad c006 	strh.w	ip, [sp, #6]
 8012eb2:	460c      	mov	r4, r1
 8012eb4:	2202      	movs	r2, #2
 8012eb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012eba:	80c2      	strh	r2, [r0, #6]
 8012ebc:	f8ad 3004 	strh.w	r3, [sp, #4]
 8012ec0:	2204      	movs	r2, #4
 8012ec2:	2300      	movs	r3, #0
 8012ec4:	2103      	movs	r1, #3
 8012ec6:	4620      	mov	r0, r4
 8012ec8:	f000 fe9e 	bl	8013c08 <uxr_buffer_submessage_header>
 8012ecc:	a901      	add	r1, sp, #4
 8012ece:	4620      	mov	r0, r4
 8012ed0:	f001 ff9c 	bl	8014e0c <uxr_serialize_DELETE_Payload>
 8012ed4:	b002      	add	sp, #8
 8012ed6:	bd10      	pop	{r4, pc}
 8012ed8:	0801b104 	.word	0x0801b104

08012edc <uxr_read_create_session_status>:
 8012edc:	b510      	push	{r4, lr}
 8012ede:	b088      	sub	sp, #32
 8012ee0:	4604      	mov	r4, r0
 8012ee2:	4608      	mov	r0, r1
 8012ee4:	a901      	add	r1, sp, #4
 8012ee6:	f001 ffa1 	bl	8014e2c <uxr_deserialize_STATUS_AGENT_Payload>
 8012eea:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012eee:	7163      	strb	r3, [r4, #5]
 8012ef0:	b008      	add	sp, #32
 8012ef2:	bd10      	pop	{r4, pc}

08012ef4 <uxr_read_delete_session_status>:
 8012ef4:	b510      	push	{r4, lr}
 8012ef6:	4604      	mov	r4, r0
 8012ef8:	b084      	sub	sp, #16
 8012efa:	4608      	mov	r0, r1
 8012efc:	a902      	add	r1, sp, #8
 8012efe:	f001 ffc5 	bl	8014e8c <uxr_deserialize_STATUS_Payload>
 8012f02:	88e3      	ldrh	r3, [r4, #6]
 8012f04:	2b02      	cmp	r3, #2
 8012f06:	d001      	beq.n	8012f0c <uxr_read_delete_session_status+0x18>
 8012f08:	b004      	add	sp, #16
 8012f0a:	bd10      	pop	{r4, pc}
 8012f0c:	f10d 000a 	add.w	r0, sp, #10
 8012f10:	f7fe fd9e 	bl	8011a50 <uxr_object_id_from_raw>
 8012f14:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8012f18:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8012f1c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8012f20:	b29b      	uxth	r3, r3
 8012f22:	2b02      	cmp	r3, #2
 8012f24:	bf04      	itt	eq
 8012f26:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8012f2a:	7163      	strbeq	r3, [r4, #5]
 8012f2c:	b004      	add	sp, #16
 8012f2e:	bd10      	pop	{r4, pc}

08012f30 <uxr_stamp_create_session_header>:
 8012f30:	b510      	push	{r4, lr}
 8012f32:	2208      	movs	r2, #8
 8012f34:	b08a      	sub	sp, #40	@ 0x28
 8012f36:	4604      	mov	r4, r0
 8012f38:	eb0d 0002 	add.w	r0, sp, r2
 8012f3c:	f7f9 fc0e 	bl	800c75c <ucdr_init_buffer>
 8012f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f44:	9400      	str	r4, [sp, #0]
 8012f46:	2300      	movs	r3, #0
 8012f48:	461a      	mov	r2, r3
 8012f4a:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8012f4e:	a802      	add	r0, sp, #8
 8012f50:	f001 f854 	bl	8013ffc <uxr_serialize_message_header>
 8012f54:	b00a      	add	sp, #40	@ 0x28
 8012f56:	bd10      	pop	{r4, pc}

08012f58 <uxr_stamp_session_header>:
 8012f58:	b530      	push	{r4, r5, lr}
 8012f5a:	b08d      	sub	sp, #52	@ 0x34
 8012f5c:	4604      	mov	r4, r0
 8012f5e:	460d      	mov	r5, r1
 8012f60:	9203      	str	r2, [sp, #12]
 8012f62:	4619      	mov	r1, r3
 8012f64:	a804      	add	r0, sp, #16
 8012f66:	2208      	movs	r2, #8
 8012f68:	f7f9 fbf8 	bl	800c75c <ucdr_init_buffer>
 8012f6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f70:	9b03      	ldr	r3, [sp, #12]
 8012f72:	9400      	str	r4, [sp, #0]
 8012f74:	462a      	mov	r2, r5
 8012f76:	a804      	add	r0, sp, #16
 8012f78:	f001 f840 	bl	8013ffc <uxr_serialize_message_header>
 8012f7c:	b00d      	add	sp, #52	@ 0x34
 8012f7e:	bd30      	pop	{r4, r5, pc}

08012f80 <uxr_read_session_header>:
 8012f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f84:	4607      	mov	r7, r0
 8012f86:	b084      	sub	sp, #16
 8012f88:	4608      	mov	r0, r1
 8012f8a:	460c      	mov	r4, r1
 8012f8c:	4615      	mov	r5, r2
 8012f8e:	461e      	mov	r6, r3
 8012f90:	f7f9 fc14 	bl	800c7bc <ucdr_buffer_remaining>
 8012f94:	2808      	cmp	r0, #8
 8012f96:	d803      	bhi.n	8012fa0 <uxr_read_session_header+0x20>
 8012f98:	2000      	movs	r0, #0
 8012f9a:	b004      	add	sp, #16
 8012f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fa0:	f10d 080c 	add.w	r8, sp, #12
 8012fa4:	4633      	mov	r3, r6
 8012fa6:	462a      	mov	r2, r5
 8012fa8:	f8cd 8000 	str.w	r8, [sp]
 8012fac:	4620      	mov	r0, r4
 8012fae:	f10d 010b 	add.w	r1, sp, #11
 8012fb2:	f001 f841 	bl	8014038 <uxr_deserialize_message_header>
 8012fb6:	783a      	ldrb	r2, [r7, #0]
 8012fb8:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8012fbc:	4293      	cmp	r3, r2
 8012fbe:	d1eb      	bne.n	8012f98 <uxr_read_session_header+0x18>
 8012fc0:	061b      	lsls	r3, r3, #24
 8012fc2:	d41c      	bmi.n	8012ffe <uxr_read_session_header+0x7e>
 8012fc4:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8012fc8:	787b      	ldrb	r3, [r7, #1]
 8012fca:	429a      	cmp	r2, r3
 8012fcc:	d003      	beq.n	8012fd6 <uxr_read_session_header+0x56>
 8012fce:	2001      	movs	r0, #1
 8012fd0:	f080 0001 	eor.w	r0, r0, #1
 8012fd4:	e7e1      	b.n	8012f9a <uxr_read_session_header+0x1a>
 8012fd6:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8012fda:	78bb      	ldrb	r3, [r7, #2]
 8012fdc:	429a      	cmp	r2, r3
 8012fde:	f107 0102 	add.w	r1, r7, #2
 8012fe2:	d1f4      	bne.n	8012fce <uxr_read_session_header+0x4e>
 8012fe4:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8012fe8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012fec:	429a      	cmp	r2, r3
 8012fee:	d1ee      	bne.n	8012fce <uxr_read_session_header+0x4e>
 8012ff0:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8012ff4:	784b      	ldrb	r3, [r1, #1]
 8012ff6:	429a      	cmp	r2, r3
 8012ff8:	d1e9      	bne.n	8012fce <uxr_read_session_header+0x4e>
 8012ffa:	2000      	movs	r0, #0
 8012ffc:	e7e8      	b.n	8012fd0 <uxr_read_session_header+0x50>
 8012ffe:	2001      	movs	r0, #1
 8013000:	e7cb      	b.n	8012f9a <uxr_read_session_header+0x1a>
 8013002:	bf00      	nop

08013004 <uxr_session_header_offset>:
 8013004:	f990 3000 	ldrsb.w	r3, [r0]
 8013008:	2b00      	cmp	r3, #0
 801300a:	bfac      	ite	ge
 801300c:	2008      	movge	r0, #8
 801300e:	2004      	movlt	r0, #4
 8013010:	4770      	bx	lr
 8013012:	bf00      	nop

08013014 <uxr_init_base_object_request>:
 8013014:	b510      	push	{r4, lr}
 8013016:	88c3      	ldrh	r3, [r0, #6]
 8013018:	b082      	sub	sp, #8
 801301a:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 801301e:	9101      	str	r1, [sp, #4]
 8013020:	f1a3 010a 	sub.w	r1, r3, #10
 8013024:	b289      	uxth	r1, r1
 8013026:	42a1      	cmp	r1, r4
 8013028:	d80e      	bhi.n	8013048 <uxr_init_base_object_request+0x34>
 801302a:	3301      	adds	r3, #1
 801302c:	b29c      	uxth	r4, r3
 801302e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8013032:	b2db      	uxtb	r3, r3
 8013034:	80c4      	strh	r4, [r0, #6]
 8013036:	9801      	ldr	r0, [sp, #4]
 8013038:	7011      	strb	r1, [r2, #0]
 801303a:	7053      	strb	r3, [r2, #1]
 801303c:	1c91      	adds	r1, r2, #2
 801303e:	f7fe fd1b 	bl	8011a78 <uxr_object_id_to_raw>
 8013042:	4620      	mov	r0, r4
 8013044:	b002      	add	sp, #8
 8013046:	bd10      	pop	{r4, pc}
 8013048:	230a      	movs	r3, #10
 801304a:	2100      	movs	r1, #0
 801304c:	461c      	mov	r4, r3
 801304e:	e7f1      	b.n	8013034 <uxr_init_base_object_request+0x20>

08013050 <uxr_parse_base_object_request>:
 8013050:	b570      	push	{r4, r5, r6, lr}
 8013052:	4604      	mov	r4, r0
 8013054:	3002      	adds	r0, #2
 8013056:	460d      	mov	r5, r1
 8013058:	4616      	mov	r6, r2
 801305a:	f7fe fcf9 	bl	8011a50 <uxr_object_id_from_raw>
 801305e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8013062:	8028      	strh	r0, [r5, #0]
 8013064:	806b      	strh	r3, [r5, #2]
 8013066:	7822      	ldrb	r2, [r4, #0]
 8013068:	7863      	ldrb	r3, [r4, #1]
 801306a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801306e:	8033      	strh	r3, [r6, #0]
 8013070:	bd70      	pop	{r4, r5, r6, pc}
 8013072:	bf00      	nop

08013074 <uxr_init_framing_io>:
 8013074:	2300      	movs	r3, #0
 8013076:	7041      	strb	r1, [r0, #1]
 8013078:	7003      	strb	r3, [r0, #0]
 801307a:	8583      	strh	r3, [r0, #44]	@ 0x2c
 801307c:	4770      	bx	lr
 801307e:	bf00      	nop

08013080 <uxr_write_framed_msg>:
 8013080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013084:	4617      	mov	r7, r2
 8013086:	7842      	ldrb	r2, [r0, #1]
 8013088:	b083      	sub	sp, #12
 801308a:	460e      	mov	r6, r1
 801308c:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8013090:	469a      	mov	sl, r3
 8013092:	2901      	cmp	r1, #1
 8013094:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8013098:	4604      	mov	r4, r0
 801309a:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801309e:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 80130a2:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 80130a6:	f240 8137 	bls.w	8013318 <uxr_write_framed_msg+0x298>
 80130aa:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80130ae:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 80130b2:	2901      	cmp	r1, #1
 80130b4:	f04f 0202 	mov.w	r2, #2
 80130b8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80130bc:	f240 808f 	bls.w	80131de <uxr_write_framed_msg+0x15e>
 80130c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80130c2:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 80130c6:	b2dd      	uxtb	r5, r3
 80130c8:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 80130cc:	2203      	movs	r2, #3
 80130ce:	2901      	cmp	r1, #1
 80130d0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80130d4:	f240 809a 	bls.w	801320c <uxr_write_framed_msg+0x18c>
 80130d8:	18a1      	adds	r1, r4, r2
 80130da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80130dc:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 80130e0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80130e4:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 80130e8:	3201      	adds	r2, #1
 80130ea:	2801      	cmp	r0, #1
 80130ec:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80130f0:	f240 80a0 	bls.w	8013234 <uxr_write_framed_msg+0x1b4>
 80130f4:	18a0      	adds	r0, r4, r2
 80130f6:	3201      	adds	r2, #1
 80130f8:	b2d2      	uxtb	r2, r2
 80130fa:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 80130fe:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013102:	2b00      	cmp	r3, #0
 8013104:	f000 80a9 	beq.w	801325a <uxr_write_framed_msg+0x1da>
 8013108:	f04f 0900 	mov.w	r9, #0
 801310c:	46c8      	mov	r8, r9
 801310e:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8013112:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8013116:	2901      	cmp	r1, #1
 8013118:	f240 80c3 	bls.w	80132a2 <uxr_write_framed_msg+0x222>
 801311c:	2a29      	cmp	r2, #41	@ 0x29
 801311e:	f200 809f 	bhi.w	8013260 <uxr_write_framed_msg+0x1e0>
 8013122:	18a1      	adds	r1, r4, r2
 8013124:	3201      	adds	r2, #1
 8013126:	b2d2      	uxtb	r2, r2
 8013128:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 801312c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013130:	ea89 0303 	eor.w	r3, r9, r3
 8013134:	498c      	ldr	r1, [pc, #560]	@ (8013368 <uxr_write_framed_msg+0x2e8>)
 8013136:	b2db      	uxtb	r3, r3
 8013138:	f108 0801 	add.w	r8, r8, #1
 801313c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013140:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8013144:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013146:	4543      	cmp	r3, r8
 8013148:	d8e1      	bhi.n	801310e <uxr_write_framed_msg+0x8e>
 801314a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801314e:	fa5f f889 	uxtb.w	r8, r9
 8013152:	9301      	str	r3, [sp, #4]
 8013154:	f04f 0900 	mov.w	r9, #0
 8013158:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 801315c:	fa5f f18a 	uxtb.w	r1, sl
 8013160:	2901      	cmp	r1, #1
 8013162:	d921      	bls.n	80131a8 <uxr_write_framed_msg+0x128>
 8013164:	2a29      	cmp	r2, #41	@ 0x29
 8013166:	f240 80af 	bls.w	80132c8 <uxr_write_framed_msg+0x248>
 801316a:	2500      	movs	r5, #0
 801316c:	e000      	b.n	8013170 <uxr_write_framed_msg+0xf0>
 801316e:	b160      	cbz	r0, 801318a <uxr_write_framed_msg+0x10a>
 8013170:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8013174:	1b52      	subs	r2, r2, r5
 8013176:	465b      	mov	r3, fp
 8013178:	4421      	add	r1, r4
 801317a:	4638      	mov	r0, r7
 801317c:	47b0      	blx	r6
 801317e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8013182:	4405      	add	r5, r0
 8013184:	4295      	cmp	r5, r2
 8013186:	d3f2      	bcc.n	801316e <uxr_write_framed_msg+0xee>
 8013188:	d003      	beq.n	8013192 <uxr_write_framed_msg+0x112>
 801318a:	2000      	movs	r0, #0
 801318c:	b003      	add	sp, #12
 801318e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013192:	fa5f f18a 	uxtb.w	r1, sl
 8013196:	f04f 0300 	mov.w	r3, #0
 801319a:	2901      	cmp	r1, #1
 801319c:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80131a0:	f04f 0200 	mov.w	r2, #0
 80131a4:	f200 8090 	bhi.w	80132c8 <uxr_write_framed_msg+0x248>
 80131a8:	1c51      	adds	r1, r2, #1
 80131aa:	b2c9      	uxtb	r1, r1
 80131ac:	2929      	cmp	r1, #41	@ 0x29
 80131ae:	d8dc      	bhi.n	801316a <uxr_write_framed_msg+0xea>
 80131b0:	18a5      	adds	r5, r4, r2
 80131b2:	4421      	add	r1, r4
 80131b4:	3202      	adds	r2, #2
 80131b6:	f088 0820 	eor.w	r8, r8, #32
 80131ba:	4648      	mov	r0, r9
 80131bc:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 80131c0:	b2d2      	uxtb	r2, r2
 80131c2:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 80131c6:	f04f 0901 	mov.w	r9, #1
 80131ca:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 80131ce:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80131d2:	2800      	cmp	r0, #0
 80131d4:	f040 8085 	bne.w	80132e2 <uxr_write_framed_msg+0x262>
 80131d8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80131dc:	e7bc      	b.n	8013158 <uxr_write_framed_msg+0xd8>
 80131de:	4611      	mov	r1, r2
 80131e0:	f04f 0c03 	mov.w	ip, #3
 80131e4:	2204      	movs	r2, #4
 80131e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80131e8:	4421      	add	r1, r4
 80131ea:	b2dd      	uxtb	r5, r3
 80131ec:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 80131f0:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 80131f4:	44a4      	add	ip, r4
 80131f6:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 80131fa:	f080 0020 	eor.w	r0, r0, #32
 80131fe:	2901      	cmp	r1, #1
 8013200:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8013204:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013208:	f63f af66 	bhi.w	80130d8 <uxr_write_framed_msg+0x58>
 801320c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801320e:	18a0      	adds	r0, r4, r2
 8013210:	f085 0520 	eor.w	r5, r5, #32
 8013214:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8013218:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801321c:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8013220:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8013224:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8013228:	3202      	adds	r2, #2
 801322a:	2801      	cmp	r0, #1
 801322c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013230:	f63f af60 	bhi.w	80130f4 <uxr_write_framed_msg+0x74>
 8013234:	1c50      	adds	r0, r2, #1
 8013236:	18a5      	adds	r5, r4, r2
 8013238:	fa54 f080 	uxtab	r0, r4, r0
 801323c:	3202      	adds	r2, #2
 801323e:	f081 0120 	eor.w	r1, r1, #32
 8013242:	b2d2      	uxtb	r2, r2
 8013244:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8013248:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 801324c:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8013250:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013254:	2b00      	cmp	r3, #0
 8013256:	f47f af57 	bne.w	8013108 <uxr_write_framed_msg+0x88>
 801325a:	9301      	str	r3, [sp, #4]
 801325c:	4698      	mov	r8, r3
 801325e:	e779      	b.n	8013154 <uxr_write_framed_msg+0xd4>
 8013260:	2500      	movs	r5, #0
 8013262:	e001      	b.n	8013268 <uxr_write_framed_msg+0x1e8>
 8013264:	2800      	cmp	r0, #0
 8013266:	d090      	beq.n	801318a <uxr_write_framed_msg+0x10a>
 8013268:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801326c:	1b52      	subs	r2, r2, r5
 801326e:	465b      	mov	r3, fp
 8013270:	4421      	add	r1, r4
 8013272:	4638      	mov	r0, r7
 8013274:	47b0      	blx	r6
 8013276:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801327a:	4405      	add	r5, r0
 801327c:	4295      	cmp	r5, r2
 801327e:	d3f1      	bcc.n	8013264 <uxr_write_framed_msg+0x1e4>
 8013280:	d183      	bne.n	801318a <uxr_write_framed_msg+0x10a>
 8013282:	f04f 0300 	mov.w	r3, #0
 8013286:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801328a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801328c:	4543      	cmp	r3, r8
 801328e:	d964      	bls.n	801335a <uxr_write_framed_msg+0x2da>
 8013290:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8013294:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8013298:	2901      	cmp	r1, #1
 801329a:	f04f 0200 	mov.w	r2, #0
 801329e:	f63f af3d 	bhi.w	801311c <uxr_write_framed_msg+0x9c>
 80132a2:	1c51      	adds	r1, r2, #1
 80132a4:	b2c9      	uxtb	r1, r1
 80132a6:	2929      	cmp	r1, #41	@ 0x29
 80132a8:	d8da      	bhi.n	8013260 <uxr_write_framed_msg+0x1e0>
 80132aa:	18a0      	adds	r0, r4, r2
 80132ac:	4421      	add	r1, r4
 80132ae:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 80132b2:	3202      	adds	r2, #2
 80132b4:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 80132b8:	b2d2      	uxtb	r2, r2
 80132ba:	f083 0020 	eor.w	r0, r3, #32
 80132be:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 80132c2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80132c6:	e733      	b.n	8013130 <uxr_write_framed_msg+0xb0>
 80132c8:	18a1      	adds	r1, r4, r2
 80132ca:	3201      	adds	r2, #1
 80132cc:	4648      	mov	r0, r9
 80132ce:	b2d2      	uxtb	r2, r2
 80132d0:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 80132d4:	f04f 0901 	mov.w	r9, #1
 80132d8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80132dc:	2800      	cmp	r0, #0
 80132de:	f43f af7b 	beq.w	80131d8 <uxr_write_framed_msg+0x158>
 80132e2:	2500      	movs	r5, #0
 80132e4:	e002      	b.n	80132ec <uxr_write_framed_msg+0x26c>
 80132e6:	2800      	cmp	r0, #0
 80132e8:	f43f af4f 	beq.w	801318a <uxr_write_framed_msg+0x10a>
 80132ec:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80132f0:	1b52      	subs	r2, r2, r5
 80132f2:	465b      	mov	r3, fp
 80132f4:	4421      	add	r1, r4
 80132f6:	4638      	mov	r0, r7
 80132f8:	47b0      	blx	r6
 80132fa:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80132fe:	4405      	add	r5, r0
 8013300:	4295      	cmp	r5, r2
 8013302:	d3f0      	bcc.n	80132e6 <uxr_write_framed_msg+0x266>
 8013304:	f47f af41 	bne.w	801318a <uxr_write_framed_msg+0x10a>
 8013308:	2300      	movs	r3, #0
 801330a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801330e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013310:	b298      	uxth	r0, r3
 8013312:	b003      	add	sp, #12
 8013314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013318:	217d      	movs	r1, #125	@ 0x7d
 801331a:	f082 0220 	eor.w	r2, r2, #32
 801331e:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8013322:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8013326:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 801332a:	2901      	cmp	r1, #1
 801332c:	f04f 0203 	mov.w	r2, #3
 8013330:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013334:	d804      	bhi.n	8013340 <uxr_write_framed_msg+0x2c0>
 8013336:	4611      	mov	r1, r2
 8013338:	f04f 0c04 	mov.w	ip, #4
 801333c:	2205      	movs	r2, #5
 801333e:	e752      	b.n	80131e6 <uxr_write_framed_msg+0x166>
 8013340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013342:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8013346:	b2dd      	uxtb	r5, r3
 8013348:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801334c:	2204      	movs	r2, #4
 801334e:	2901      	cmp	r1, #1
 8013350:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013354:	f63f aec0 	bhi.w	80130d8 <uxr_write_framed_msg+0x58>
 8013358:	e758      	b.n	801320c <uxr_write_framed_msg+0x18c>
 801335a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801335e:	fa5f f889 	uxtb.w	r8, r9
 8013362:	9301      	str	r3, [sp, #4]
 8013364:	2200      	movs	r2, #0
 8013366:	e6f5      	b.n	8013154 <uxr_write_framed_msg+0xd4>
 8013368:	0801bdd4 	.word	0x0801bdd4

0801336c <uxr_framing_read_transport>:
 801336c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013370:	4604      	mov	r4, r0
 8013372:	b083      	sub	sp, #12
 8013374:	461f      	mov	r7, r3
 8013376:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 801337a:	4689      	mov	r9, r1
 801337c:	4692      	mov	sl, r2
 801337e:	f000 fc89 	bl	8013c94 <uxr_millis>
 8013382:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8013386:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 801338a:	42b3      	cmp	r3, r6
 801338c:	4680      	mov	r8, r0
 801338e:	d061      	beq.n	8013454 <uxr_framing_read_transport+0xe8>
 8013390:	d81c      	bhi.n	80133cc <uxr_framing_read_transport+0x60>
 8013392:	1e75      	subs	r5, r6, #1
 8013394:	1aed      	subs	r5, r5, r3
 8013396:	b2ed      	uxtb	r5, r5
 8013398:	2600      	movs	r6, #0
 801339a:	455d      	cmp	r5, fp
 801339c:	d81f      	bhi.n	80133de <uxr_framing_read_transport+0x72>
 801339e:	19ab      	adds	r3, r5, r6
 80133a0:	455b      	cmp	r3, fp
 80133a2:	bf84      	itt	hi
 80133a4:	ebab 0605 	subhi.w	r6, fp, r5
 80133a8:	b2f6      	uxtbhi	r6, r6
 80133aa:	b9ed      	cbnz	r5, 80133e8 <uxr_framing_read_transport+0x7c>
 80133ac:	f04f 0b00 	mov.w	fp, #0
 80133b0:	f000 fc70 	bl	8013c94 <uxr_millis>
 80133b4:	683b      	ldr	r3, [r7, #0]
 80133b6:	eba0 0808 	sub.w	r8, r0, r8
 80133ba:	eba3 0308 	sub.w	r3, r3, r8
 80133be:	4658      	mov	r0, fp
 80133c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80133c4:	603b      	str	r3, [r7, #0]
 80133c6:	b003      	add	sp, #12
 80133c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133cc:	2e00      	cmp	r6, #0
 80133ce:	d049      	beq.n	8013464 <uxr_framing_read_transport+0xf8>
 80133d0:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 80133d4:	b2ed      	uxtb	r5, r5
 80133d6:	3e01      	subs	r6, #1
 80133d8:	455d      	cmp	r5, fp
 80133da:	b2f6      	uxtb	r6, r6
 80133dc:	d9df      	bls.n	801339e <uxr_framing_read_transport+0x32>
 80133de:	fa5f f58b 	uxtb.w	r5, fp
 80133e2:	2600      	movs	r6, #0
 80133e4:	2d00      	cmp	r5, #0
 80133e6:	d0e1      	beq.n	80133ac <uxr_framing_read_transport+0x40>
 80133e8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80133ec:	3102      	adds	r1, #2
 80133ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80133f0:	9300      	str	r3, [sp, #0]
 80133f2:	683b      	ldr	r3, [r7, #0]
 80133f4:	4421      	add	r1, r4
 80133f6:	462a      	mov	r2, r5
 80133f8:	4650      	mov	r0, sl
 80133fa:	47c8      	blx	r9
 80133fc:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8013400:	4a1a      	ldr	r2, [pc, #104]	@ (801346c <uxr_framing_read_transport+0x100>)
 8013402:	4403      	add	r3, r0
 8013404:	0859      	lsrs	r1, r3, #1
 8013406:	fba2 2101 	umull	r2, r1, r2, r1
 801340a:	0889      	lsrs	r1, r1, #2
 801340c:	222a      	movs	r2, #42	@ 0x2a
 801340e:	fb02 3111 	mls	r1, r2, r1, r3
 8013412:	4683      	mov	fp, r0
 8013414:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8013418:	2800      	cmp	r0, #0
 801341a:	d0c7      	beq.n	80133ac <uxr_framing_read_transport+0x40>
 801341c:	42a8      	cmp	r0, r5
 801341e:	d1c7      	bne.n	80133b0 <uxr_framing_read_transport+0x44>
 8013420:	2e00      	cmp	r6, #0
 8013422:	d0c5      	beq.n	80133b0 <uxr_framing_read_transport+0x44>
 8013424:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013426:	9300      	str	r3, [sp, #0]
 8013428:	3102      	adds	r1, #2
 801342a:	4632      	mov	r2, r6
 801342c:	4421      	add	r1, r4
 801342e:	2300      	movs	r3, #0
 8013430:	4650      	mov	r0, sl
 8013432:	47c8      	blx	r9
 8013434:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8013438:	4a0c      	ldr	r2, [pc, #48]	@ (801346c <uxr_framing_read_transport+0x100>)
 801343a:	180b      	adds	r3, r1, r0
 801343c:	0859      	lsrs	r1, r3, #1
 801343e:	fba2 1201 	umull	r1, r2, r2, r1
 8013442:	0892      	lsrs	r2, r2, #2
 8013444:	212a      	movs	r1, #42	@ 0x2a
 8013446:	fb01 3312 	mls	r3, r1, r2, r3
 801344a:	eb00 0b05 	add.w	fp, r0, r5
 801344e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8013452:	e7ad      	b.n	80133b0 <uxr_framing_read_transport+0x44>
 8013454:	2600      	movs	r6, #0
 8013456:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 801345a:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 801345c:	d9bf      	bls.n	80133de <uxr_framing_read_transport+0x72>
 801345e:	2102      	movs	r1, #2
 8013460:	2529      	movs	r5, #41	@ 0x29
 8013462:	e7c4      	b.n	80133ee <uxr_framing_read_transport+0x82>
 8013464:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8013468:	b2ed      	uxtb	r5, r5
 801346a:	e796      	b.n	801339a <uxr_framing_read_transport+0x2e>
 801346c:	30c30c31 	.word	0x30c30c31

08013470 <uxr_read_framed_msg>:
 8013470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013474:	461e      	mov	r6, r3
 8013476:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 801347a:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 801347e:	429d      	cmp	r5, r3
 8013480:	b083      	sub	sp, #12
 8013482:	4604      	mov	r4, r0
 8013484:	4688      	mov	r8, r1
 8013486:	4691      	mov	r9, r2
 8013488:	f000 8188 	beq.w	801379c <uxr_read_framed_msg+0x32c>
 801348c:	7823      	ldrb	r3, [r4, #0]
 801348e:	4dc1      	ldr	r5, [pc, #772]	@ (8013794 <uxr_read_framed_msg+0x324>)
 8013490:	4fc1      	ldr	r7, [pc, #772]	@ (8013798 <uxr_read_framed_msg+0x328>)
 8013492:	2b07      	cmp	r3, #7
 8013494:	d8fd      	bhi.n	8013492 <uxr_read_framed_msg+0x22>
 8013496:	e8df f013 	tbh	[pc, r3, lsl #1]
 801349a:	0115      	.short	0x0115
 801349c:	00d600f6 	.word	0x00d600f6
 80134a0:	009000b9 	.word	0x009000b9
 80134a4:	0030004d 	.word	0x0030004d
 80134a8:	0008      	.short	0x0008
 80134aa:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80134ae:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80134b2:	4299      	cmp	r1, r3
 80134b4:	f000 814a 	beq.w	801374c <uxr_read_framed_msg+0x2dc>
 80134b8:	18e2      	adds	r2, r4, r3
 80134ba:	7892      	ldrb	r2, [r2, #2]
 80134bc:	2a7d      	cmp	r2, #125	@ 0x7d
 80134be:	f000 8199 	beq.w	80137f4 <uxr_read_framed_msg+0x384>
 80134c2:	3301      	adds	r3, #1
 80134c4:	0858      	lsrs	r0, r3, #1
 80134c6:	fba5 1000 	umull	r1, r0, r5, r0
 80134ca:	0880      	lsrs	r0, r0, #2
 80134cc:	212a      	movs	r1, #42	@ 0x2a
 80134ce:	fb01 3310 	mls	r3, r1, r0, r3
 80134d2:	2a7e      	cmp	r2, #126	@ 0x7e
 80134d4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80134d8:	f000 8252 	beq.w	8013980 <uxr_read_framed_msg+0x510>
 80134dc:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 80134de:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 80134e0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80134e4:	b29b      	uxth	r3, r3
 80134e6:	2200      	movs	r2, #0
 80134e8:	4299      	cmp	r1, r3
 80134ea:	86a3      	strh	r3, [r4, #52]	@ 0x34
 80134ec:	7022      	strb	r2, [r4, #0]
 80134ee:	f000 8179 	beq.w	80137e4 <uxr_read_framed_msg+0x374>
 80134f2:	2000      	movs	r0, #0
 80134f4:	b003      	add	sp, #12
 80134f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134fa:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80134fe:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8013502:	4299      	cmp	r1, r3
 8013504:	f000 8131 	beq.w	801376a <uxr_read_framed_msg+0x2fa>
 8013508:	18e2      	adds	r2, r4, r3
 801350a:	7890      	ldrb	r0, [r2, #2]
 801350c:	287d      	cmp	r0, #125	@ 0x7d
 801350e:	f000 8190 	beq.w	8013832 <uxr_read_framed_msg+0x3c2>
 8013512:	3301      	adds	r3, #1
 8013514:	085a      	lsrs	r2, r3, #1
 8013516:	fba5 1202 	umull	r1, r2, r5, r2
 801351a:	0892      	lsrs	r2, r2, #2
 801351c:	212a      	movs	r1, #42	@ 0x2a
 801351e:	fb01 3312 	mls	r3, r1, r2, r3
 8013522:	287e      	cmp	r0, #126	@ 0x7e
 8013524:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8013528:	f000 821a 	beq.w	8013960 <uxr_read_framed_msg+0x4f0>
 801352c:	2307      	movs	r3, #7
 801352e:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8013530:	7023      	strb	r3, [r4, #0]
 8013532:	e7ae      	b.n	8013492 <uxr_read_framed_msg+0x22>
 8013534:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8013536:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801353a:	459e      	cmp	lr, r3
 801353c:	d938      	bls.n	80135b0 <uxr_read_framed_msg+0x140>
 801353e:	ee07 8a90 	vmov	s15, r8
 8013542:	212a      	movs	r1, #42	@ 0x2a
 8013544:	e020      	b.n	8013588 <uxr_read_framed_msg+0x118>
 8013546:	f89b c002 	ldrb.w	ip, [fp, #2]
 801354a:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801354e:	f000 80d4 	beq.w	80136fa <uxr_read_framed_msg+0x28a>
 8013552:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8013556:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801355a:	f000 8219 	beq.w	8013990 <uxr_read_framed_msg+0x520>
 801355e:	f806 c003 	strb.w	ip, [r6, r3]
 8013562:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8013566:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8013568:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801356c:	ea8a 000c 	eor.w	r0, sl, ip
 8013570:	b2c0      	uxtb	r0, r0
 8013572:	3301      	adds	r3, #1
 8013574:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8013578:	b29b      	uxth	r3, r3
 801357a:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 801357e:	4573      	cmp	r3, lr
 8013580:	8663      	strh	r3, [r4, #50]	@ 0x32
 8013582:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8013584:	f080 8120 	bcs.w	80137c8 <uxr_read_framed_msg+0x358>
 8013588:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 801358c:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8013590:	f100 0c01 	add.w	ip, r0, #1
 8013594:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8013598:	fba5 8202 	umull	r8, r2, r5, r2
 801359c:	0892      	lsrs	r2, r2, #2
 801359e:	4582      	cmp	sl, r0
 80135a0:	eb04 0b00 	add.w	fp, r4, r0
 80135a4:	fb01 c212 	mls	r2, r1, r2, ip
 80135a8:	d1cd      	bne.n	8013546 <uxr_read_framed_msg+0xd6>
 80135aa:	ee17 8a90 	vmov	r8, s15
 80135ae:	459e      	cmp	lr, r3
 80135b0:	f040 8111 	bne.w	80137d6 <uxr_read_framed_msg+0x366>
 80135b4:	2306      	movs	r3, #6
 80135b6:	7023      	strb	r3, [r4, #0]
 80135b8:	e76b      	b.n	8013492 <uxr_read_framed_msg+0x22>
 80135ba:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80135be:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80135c2:	4298      	cmp	r0, r3
 80135c4:	f000 80c2 	beq.w	801374c <uxr_read_framed_msg+0x2dc>
 80135c8:	18e2      	adds	r2, r4, r3
 80135ca:	7891      	ldrb	r1, [r2, #2]
 80135cc:	297d      	cmp	r1, #125	@ 0x7d
 80135ce:	f000 814c 	beq.w	801386a <uxr_read_framed_msg+0x3fa>
 80135d2:	3301      	adds	r3, #1
 80135d4:	085a      	lsrs	r2, r3, #1
 80135d6:	fba5 0202 	umull	r0, r2, r5, r2
 80135da:	0892      	lsrs	r2, r2, #2
 80135dc:	202a      	movs	r0, #42	@ 0x2a
 80135de:	fb00 3312 	mls	r3, r0, r2, r3
 80135e2:	297e      	cmp	r1, #126	@ 0x7e
 80135e4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80135e8:	f000 81ca 	beq.w	8013980 <uxr_read_framed_msg+0x510>
 80135ec:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 80135ee:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80135f2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80135f4:	b29b      	uxth	r3, r3
 80135f6:	2000      	movs	r0, #0
 80135f8:	428b      	cmp	r3, r1
 80135fa:	8623      	strh	r3, [r4, #48]	@ 0x30
 80135fc:	8660      	strh	r0, [r4, #50]	@ 0x32
 80135fe:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8013600:	f240 80df 	bls.w	80137c2 <uxr_read_framed_msg+0x352>
 8013604:	7020      	strb	r0, [r4, #0]
 8013606:	b003      	add	sp, #12
 8013608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801360c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8013610:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8013614:	4299      	cmp	r1, r3
 8013616:	f000 80a8 	beq.w	801376a <uxr_read_framed_msg+0x2fa>
 801361a:	18e2      	adds	r2, r4, r3
 801361c:	7890      	ldrb	r0, [r2, #2]
 801361e:	287d      	cmp	r0, #125	@ 0x7d
 8013620:	f000 8164 	beq.w	80138ec <uxr_read_framed_msg+0x47c>
 8013624:	3301      	adds	r3, #1
 8013626:	085a      	lsrs	r2, r3, #1
 8013628:	fba5 1202 	umull	r1, r2, r5, r2
 801362c:	0892      	lsrs	r2, r2, #2
 801362e:	212a      	movs	r1, #42	@ 0x2a
 8013630:	fb01 3312 	mls	r3, r1, r2, r3
 8013634:	287e      	cmp	r0, #126	@ 0x7e
 8013636:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801363a:	f000 8191 	beq.w	8013960 <uxr_read_framed_msg+0x4f0>
 801363e:	2304      	movs	r3, #4
 8013640:	8620      	strh	r0, [r4, #48]	@ 0x30
 8013642:	7023      	strb	r3, [r4, #0]
 8013644:	e725      	b.n	8013492 <uxr_read_framed_msg+0x22>
 8013646:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801364a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801364e:	4290      	cmp	r0, r2
 8013650:	f000 80b3 	beq.w	80137ba <uxr_read_framed_msg+0x34a>
 8013654:	18a3      	adds	r3, r4, r2
 8013656:	7899      	ldrb	r1, [r3, #2]
 8013658:	297d      	cmp	r1, #125	@ 0x7d
 801365a:	f000 8164 	beq.w	8013926 <uxr_read_framed_msg+0x4b6>
 801365e:	3201      	adds	r2, #1
 8013660:	0850      	lsrs	r0, r2, #1
 8013662:	fba5 3000 	umull	r3, r0, r5, r0
 8013666:	0880      	lsrs	r0, r0, #2
 8013668:	232a      	movs	r3, #42	@ 0x2a
 801366a:	fb03 2210 	mls	r2, r3, r0, r2
 801366e:	297e      	cmp	r1, #126	@ 0x7e
 8013670:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8013674:	f000 8188 	beq.w	8013988 <uxr_read_framed_msg+0x518>
 8013678:	7863      	ldrb	r3, [r4, #1]
 801367a:	428b      	cmp	r3, r1
 801367c:	bf0c      	ite	eq
 801367e:	2303      	moveq	r3, #3
 8013680:	2300      	movne	r3, #0
 8013682:	7023      	strb	r3, [r4, #0]
 8013684:	e705      	b.n	8013492 <uxr_read_framed_msg+0x22>
 8013686:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801368a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801368e:	2200      	movs	r2, #0
 8013690:	4299      	cmp	r1, r3
 8013692:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8013696:	d06c      	beq.n	8013772 <uxr_read_framed_msg+0x302>
 8013698:	18e2      	adds	r2, r4, r3
 801369a:	7890      	ldrb	r0, [r2, #2]
 801369c:	287d      	cmp	r0, #125	@ 0x7d
 801369e:	f000 8101 	beq.w	80138a4 <uxr_read_framed_msg+0x434>
 80136a2:	3301      	adds	r3, #1
 80136a4:	085a      	lsrs	r2, r3, #1
 80136a6:	fba5 1202 	umull	r1, r2, r5, r2
 80136aa:	0892      	lsrs	r2, r2, #2
 80136ac:	212a      	movs	r1, #42	@ 0x2a
 80136ae:	fb01 3312 	mls	r3, r1, r2, r3
 80136b2:	287e      	cmp	r0, #126	@ 0x7e
 80136b4:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 80136b8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80136bc:	d059      	beq.n	8013772 <uxr_read_framed_msg+0x302>
 80136be:	2302      	movs	r3, #2
 80136c0:	7023      	strb	r3, [r4, #0]
 80136c2:	e6e6      	b.n	8013492 <uxr_read_framed_msg+0x22>
 80136c4:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80136c8:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80136cc:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 80136d0:	1c51      	adds	r1, r2, #1
 80136d2:	084b      	lsrs	r3, r1, #1
 80136d4:	fba5 c303 	umull	ip, r3, r5, r3
 80136d8:	089b      	lsrs	r3, r3, #2
 80136da:	fb0e 1313 	mls	r3, lr, r3, r1
 80136de:	4592      	cmp	sl, r2
 80136e0:	eb04 0002 	add.w	r0, r4, r2
 80136e4:	b2da      	uxtb	r2, r3
 80136e6:	f43f af04 	beq.w	80134f2 <uxr_read_framed_msg+0x82>
 80136ea:	7883      	ldrb	r3, [r0, #2]
 80136ec:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80136f0:	2b7e      	cmp	r3, #126	@ 0x7e
 80136f2:	d1ed      	bne.n	80136d0 <uxr_read_framed_msg+0x260>
 80136f4:	2301      	movs	r3, #1
 80136f6:	7023      	strb	r3, [r4, #0]
 80136f8:	e6cb      	b.n	8013492 <uxr_read_framed_msg+0x22>
 80136fa:	f100 0c01 	add.w	ip, r0, #1
 80136fe:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8013702:	fba5 8202 	umull	r8, r2, r5, r2
 8013706:	0892      	lsrs	r2, r2, #2
 8013708:	fb01 c212 	mls	r2, r1, r2, ip
 801370c:	eb04 0c02 	add.w	ip, r4, r2
 8013710:	b2d2      	uxtb	r2, r2
 8013712:	4592      	cmp	sl, r2
 8013714:	f100 0002 	add.w	r0, r0, #2
 8013718:	f43f af47 	beq.w	80135aa <uxr_read_framed_msg+0x13a>
 801371c:	0842      	lsrs	r2, r0, #1
 801371e:	f89c a002 	ldrb.w	sl, [ip, #2]
 8013722:	fba5 8202 	umull	r8, r2, r5, r2
 8013726:	0892      	lsrs	r2, r2, #2
 8013728:	fb01 0012 	mls	r0, r1, r2, r0
 801372c:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8013730:	f08a 0c20 	eor.w	ip, sl, #32
 8013734:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8013738:	f47f af11 	bne.w	801355e <uxr_read_framed_msg+0xee>
 801373c:	459e      	cmp	lr, r3
 801373e:	ee17 8a90 	vmov	r8, s15
 8013742:	f43f af37 	beq.w	80135b4 <uxr_read_framed_msg+0x144>
 8013746:	2301      	movs	r3, #1
 8013748:	7023      	strb	r3, [r4, #0]
 801374a:	e6a2      	b.n	8013492 <uxr_read_framed_msg+0x22>
 801374c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801374e:	9300      	str	r3, [sp, #0]
 8013750:	2301      	movs	r3, #1
 8013752:	9301      	str	r3, [sp, #4]
 8013754:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013756:	464a      	mov	r2, r9
 8013758:	4641      	mov	r1, r8
 801375a:	4620      	mov	r0, r4
 801375c:	f7ff fe06 	bl	801336c <uxr_framing_read_transport>
 8013760:	2800      	cmp	r0, #0
 8013762:	f43f aec6 	beq.w	80134f2 <uxr_read_framed_msg+0x82>
 8013766:	7823      	ldrb	r3, [r4, #0]
 8013768:	e693      	b.n	8013492 <uxr_read_framed_msg+0x22>
 801376a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801376c:	9300      	str	r3, [sp, #0]
 801376e:	2302      	movs	r3, #2
 8013770:	e7ef      	b.n	8013752 <uxr_read_framed_msg+0x2e2>
 8013772:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013774:	9300      	str	r3, [sp, #0]
 8013776:	2304      	movs	r3, #4
 8013778:	9301      	str	r3, [sp, #4]
 801377a:	464a      	mov	r2, r9
 801377c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801377e:	4641      	mov	r1, r8
 8013780:	4620      	mov	r0, r4
 8013782:	f7ff fdf3 	bl	801336c <uxr_framing_read_transport>
 8013786:	2800      	cmp	r0, #0
 8013788:	d1ed      	bne.n	8013766 <uxr_read_framed_msg+0x2f6>
 801378a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801378e:	2b7e      	cmp	r3, #126	@ 0x7e
 8013790:	d0e9      	beq.n	8013766 <uxr_read_framed_msg+0x2f6>
 8013792:	e6ae      	b.n	80134f2 <uxr_read_framed_msg+0x82>
 8013794:	30c30c31 	.word	0x30c30c31
 8013798:	0801bdd4 	.word	0x0801bdd4
 801379c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801379e:	9300      	str	r3, [sp, #0]
 80137a0:	2305      	movs	r3, #5
 80137a2:	9301      	str	r3, [sp, #4]
 80137a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80137a6:	f7ff fde1 	bl	801336c <uxr_framing_read_transport>
 80137aa:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80137ae:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80137b2:	429a      	cmp	r2, r3
 80137b4:	f43f ae9d 	beq.w	80134f2 <uxr_read_framed_msg+0x82>
 80137b8:	e668      	b.n	801348c <uxr_read_framed_msg+0x1c>
 80137ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80137bc:	9300      	str	r3, [sp, #0]
 80137be:	2303      	movs	r3, #3
 80137c0:	e7c7      	b.n	8013752 <uxr_read_framed_msg+0x2e2>
 80137c2:	2305      	movs	r3, #5
 80137c4:	7023      	strb	r3, [r4, #0]
 80137c6:	e664      	b.n	8013492 <uxr_read_framed_msg+0x22>
 80137c8:	ee17 8a90 	vmov	r8, s15
 80137cc:	f43f aef2 	beq.w	80135b4 <uxr_read_framed_msg+0x144>
 80137d0:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80137d4:	d08e      	beq.n	80136f4 <uxr_read_framed_msg+0x284>
 80137d6:	ebae 0303 	sub.w	r3, lr, r3
 80137da:	3302      	adds	r3, #2
 80137dc:	9301      	str	r3, [sp, #4]
 80137de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80137e0:	9300      	str	r3, [sp, #0]
 80137e2:	e7b7      	b.n	8013754 <uxr_read_framed_msg+0x2e4>
 80137e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80137e6:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80137ea:	7013      	strb	r3, [r2, #0]
 80137ec:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 80137ee:	b003      	add	sp, #12
 80137f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137f4:	f103 0c01 	add.w	ip, r3, #1
 80137f8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80137fc:	fba5 0202 	umull	r0, r2, r5, r2
 8013800:	0892      	lsrs	r2, r2, #2
 8013802:	202a      	movs	r0, #42	@ 0x2a
 8013804:	fb00 c212 	mls	r2, r0, r2, ip
 8013808:	fa5f fc82 	uxtb.w	ip, r2
 801380c:	4561      	cmp	r1, ip
 801380e:	d09d      	beq.n	801374c <uxr_read_framed_msg+0x2dc>
 8013810:	3302      	adds	r3, #2
 8013812:	4422      	add	r2, r4
 8013814:	0859      	lsrs	r1, r3, #1
 8013816:	7892      	ldrb	r2, [r2, #2]
 8013818:	fba5 c101 	umull	ip, r1, r5, r1
 801381c:	0889      	lsrs	r1, r1, #2
 801381e:	fb00 3311 	mls	r3, r0, r1, r3
 8013822:	2a7e      	cmp	r2, #126	@ 0x7e
 8013824:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8013828:	f000 80aa 	beq.w	8013980 <uxr_read_framed_msg+0x510>
 801382c:	f082 0220 	eor.w	r2, r2, #32
 8013830:	e654      	b.n	80134dc <uxr_read_framed_msg+0x6c>
 8013832:	1c58      	adds	r0, r3, #1
 8013834:	0842      	lsrs	r2, r0, #1
 8013836:	fba5 c202 	umull	ip, r2, r5, r2
 801383a:	0892      	lsrs	r2, r2, #2
 801383c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8013840:	fb0c 0212 	mls	r2, ip, r2, r0
 8013844:	b2d0      	uxtb	r0, r2
 8013846:	4281      	cmp	r1, r0
 8013848:	d08f      	beq.n	801376a <uxr_read_framed_msg+0x2fa>
 801384a:	4422      	add	r2, r4
 801384c:	3302      	adds	r3, #2
 801384e:	7890      	ldrb	r0, [r2, #2]
 8013850:	085a      	lsrs	r2, r3, #1
 8013852:	fba5 1202 	umull	r1, r2, r5, r2
 8013856:	0892      	lsrs	r2, r2, #2
 8013858:	fb0c 3312 	mls	r3, ip, r2, r3
 801385c:	287e      	cmp	r0, #126	@ 0x7e
 801385e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8013862:	d07d      	beq.n	8013960 <uxr_read_framed_msg+0x4f0>
 8013864:	f080 0020 	eor.w	r0, r0, #32
 8013868:	e660      	b.n	801352c <uxr_read_framed_msg+0xbc>
 801386a:	1c59      	adds	r1, r3, #1
 801386c:	084a      	lsrs	r2, r1, #1
 801386e:	fba5 c202 	umull	ip, r2, r5, r2
 8013872:	0892      	lsrs	r2, r2, #2
 8013874:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8013878:	fb0c 1212 	mls	r2, ip, r2, r1
 801387c:	b2d1      	uxtb	r1, r2
 801387e:	4288      	cmp	r0, r1
 8013880:	f43f af64 	beq.w	801374c <uxr_read_framed_msg+0x2dc>
 8013884:	4422      	add	r2, r4
 8013886:	3302      	adds	r3, #2
 8013888:	7891      	ldrb	r1, [r2, #2]
 801388a:	085a      	lsrs	r2, r3, #1
 801388c:	fba5 0202 	umull	r0, r2, r5, r2
 8013890:	0892      	lsrs	r2, r2, #2
 8013892:	fb0c 3312 	mls	r3, ip, r2, r3
 8013896:	297e      	cmp	r1, #126	@ 0x7e
 8013898:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801389c:	d070      	beq.n	8013980 <uxr_read_framed_msg+0x510>
 801389e:	f081 0120 	eor.w	r1, r1, #32
 80138a2:	e6a3      	b.n	80135ec <uxr_read_framed_msg+0x17c>
 80138a4:	f103 0c01 	add.w	ip, r3, #1
 80138a8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80138ac:	fba5 0202 	umull	r0, r2, r5, r2
 80138b0:	0892      	lsrs	r2, r2, #2
 80138b2:	202a      	movs	r0, #42	@ 0x2a
 80138b4:	fb00 c212 	mls	r2, r0, r2, ip
 80138b8:	fa5f fc82 	uxtb.w	ip, r2
 80138bc:	4561      	cmp	r1, ip
 80138be:	f43f af58 	beq.w	8013772 <uxr_read_framed_msg+0x302>
 80138c2:	4422      	add	r2, r4
 80138c4:	3302      	adds	r3, #2
 80138c6:	7891      	ldrb	r1, [r2, #2]
 80138c8:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80138cc:	085a      	lsrs	r2, r3, #1
 80138ce:	fba5 c202 	umull	ip, r2, r5, r2
 80138d2:	0892      	lsrs	r2, r2, #2
 80138d4:	fb00 3312 	mls	r3, r0, r2, r3
 80138d8:	297e      	cmp	r1, #126	@ 0x7e
 80138da:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80138de:	f43f af48 	beq.w	8013772 <uxr_read_framed_msg+0x302>
 80138e2:	f081 0120 	eor.w	r1, r1, #32
 80138e6:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80138ea:	e6e8      	b.n	80136be <uxr_read_framed_msg+0x24e>
 80138ec:	1c58      	adds	r0, r3, #1
 80138ee:	0842      	lsrs	r2, r0, #1
 80138f0:	fba5 c202 	umull	ip, r2, r5, r2
 80138f4:	0892      	lsrs	r2, r2, #2
 80138f6:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80138fa:	fb0c 0212 	mls	r2, ip, r2, r0
 80138fe:	b2d0      	uxtb	r0, r2
 8013900:	4281      	cmp	r1, r0
 8013902:	f43f af32 	beq.w	801376a <uxr_read_framed_msg+0x2fa>
 8013906:	4422      	add	r2, r4
 8013908:	3302      	adds	r3, #2
 801390a:	7890      	ldrb	r0, [r2, #2]
 801390c:	085a      	lsrs	r2, r3, #1
 801390e:	fba5 1202 	umull	r1, r2, r5, r2
 8013912:	0892      	lsrs	r2, r2, #2
 8013914:	fb0c 3312 	mls	r3, ip, r2, r3
 8013918:	287e      	cmp	r0, #126	@ 0x7e
 801391a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801391e:	d01f      	beq.n	8013960 <uxr_read_framed_msg+0x4f0>
 8013920:	f080 0020 	eor.w	r0, r0, #32
 8013924:	e68b      	b.n	801363e <uxr_read_framed_msg+0x1ce>
 8013926:	1c51      	adds	r1, r2, #1
 8013928:	084b      	lsrs	r3, r1, #1
 801392a:	fba5 c303 	umull	ip, r3, r5, r3
 801392e:	089b      	lsrs	r3, r3, #2
 8013930:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8013934:	fb0c 1313 	mls	r3, ip, r3, r1
 8013938:	b2d9      	uxtb	r1, r3
 801393a:	4288      	cmp	r0, r1
 801393c:	f43f af3d 	beq.w	80137ba <uxr_read_framed_msg+0x34a>
 8013940:	3202      	adds	r2, #2
 8013942:	4423      	add	r3, r4
 8013944:	0850      	lsrs	r0, r2, #1
 8013946:	789b      	ldrb	r3, [r3, #2]
 8013948:	fba5 1000 	umull	r1, r0, r5, r0
 801394c:	0880      	lsrs	r0, r0, #2
 801394e:	fb0c 2210 	mls	r2, ip, r0, r2
 8013952:	2b7e      	cmp	r3, #126	@ 0x7e
 8013954:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8013958:	d016      	beq.n	8013988 <uxr_read_framed_msg+0x518>
 801395a:	f083 0120 	eor.w	r1, r3, #32
 801395e:	e68b      	b.n	8013678 <uxr_read_framed_msg+0x208>
 8013960:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013962:	9300      	str	r3, [sp, #0]
 8013964:	2302      	movs	r3, #2
 8013966:	9301      	str	r3, [sp, #4]
 8013968:	464a      	mov	r2, r9
 801396a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801396c:	4641      	mov	r1, r8
 801396e:	4620      	mov	r0, r4
 8013970:	f7ff fcfc 	bl	801336c <uxr_framing_read_transport>
 8013974:	2800      	cmp	r0, #0
 8013976:	f47f aef6 	bne.w	8013766 <uxr_read_framed_msg+0x2f6>
 801397a:	2301      	movs	r3, #1
 801397c:	7023      	strb	r3, [r4, #0]
 801397e:	e588      	b.n	8013492 <uxr_read_framed_msg+0x22>
 8013980:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013982:	9300      	str	r3, [sp, #0]
 8013984:	2301      	movs	r3, #1
 8013986:	e7ee      	b.n	8013966 <uxr_read_framed_msg+0x4f6>
 8013988:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801398a:	9300      	str	r3, [sp, #0]
 801398c:	2303      	movs	r3, #3
 801398e:	e7ea      	b.n	8013966 <uxr_read_framed_msg+0x4f6>
 8013990:	ee17 8a90 	vmov	r8, s15
 8013994:	e6ae      	b.n	80136f4 <uxr_read_framed_msg+0x284>
 8013996:	bf00      	nop

08013998 <uxr_stream_id>:
 8013998:	2901      	cmp	r1, #1
 801399a:	b082      	sub	sp, #8
 801399c:	d01d      	beq.n	80139da <uxr_stream_id+0x42>
 801399e:	2902      	cmp	r1, #2
 80139a0:	f04f 0c00 	mov.w	ip, #0
 80139a4:	d01e      	beq.n	80139e4 <uxr_stream_id+0x4c>
 80139a6:	2300      	movs	r3, #0
 80139a8:	f36c 0307 	bfi	r3, ip, #0, #8
 80139ac:	f360 230f 	bfi	r3, r0, #8, #8
 80139b0:	f361 4317 	bfi	r3, r1, #16, #8
 80139b4:	f362 631f 	bfi	r3, r2, #24, #8
 80139b8:	b2da      	uxtb	r2, r3
 80139ba:	2000      	movs	r0, #0
 80139bc:	f362 0007 	bfi	r0, r2, #0, #8
 80139c0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80139c4:	f362 200f 	bfi	r0, r2, #8, #8
 80139c8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80139cc:	f362 4017 	bfi	r0, r2, #16, #8
 80139d0:	0e1b      	lsrs	r3, r3, #24
 80139d2:	f363 601f 	bfi	r0, r3, #24, #8
 80139d6:	b002      	add	sp, #8
 80139d8:	4770      	bx	lr
 80139da:	f100 0c01 	add.w	ip, r0, #1
 80139de:	fa5f fc8c 	uxtb.w	ip, ip
 80139e2:	e7e0      	b.n	80139a6 <uxr_stream_id+0xe>
 80139e4:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 80139e8:	e7dd      	b.n	80139a6 <uxr_stream_id+0xe>
 80139ea:	bf00      	nop

080139ec <uxr_stream_id_from_raw>:
 80139ec:	b082      	sub	sp, #8
 80139ee:	b130      	cbz	r0, 80139fe <uxr_stream_id_from_raw+0x12>
 80139f0:	0603      	lsls	r3, r0, #24
 80139f2:	d420      	bmi.n	8013a36 <uxr_stream_id_from_raw+0x4a>
 80139f4:	1e42      	subs	r2, r0, #1
 80139f6:	b2d2      	uxtb	r2, r2
 80139f8:	f04f 0c01 	mov.w	ip, #1
 80139fc:	e001      	b.n	8013a02 <uxr_stream_id_from_raw+0x16>
 80139fe:	4684      	mov	ip, r0
 8013a00:	4602      	mov	r2, r0
 8013a02:	2300      	movs	r3, #0
 8013a04:	f360 0307 	bfi	r3, r0, #0, #8
 8013a08:	f362 230f 	bfi	r3, r2, #8, #8
 8013a0c:	f36c 4317 	bfi	r3, ip, #16, #8
 8013a10:	f361 631f 	bfi	r3, r1, #24, #8
 8013a14:	b2da      	uxtb	r2, r3
 8013a16:	2000      	movs	r0, #0
 8013a18:	f362 0007 	bfi	r0, r2, #0, #8
 8013a1c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8013a20:	f362 200f 	bfi	r0, r2, #8, #8
 8013a24:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8013a28:	f362 4017 	bfi	r0, r2, #16, #8
 8013a2c:	0e1b      	lsrs	r3, r3, #24
 8013a2e:	f363 601f 	bfi	r0, r3, #24, #8
 8013a32:	b002      	add	sp, #8
 8013a34:	4770      	bx	lr
 8013a36:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8013a3a:	f04f 0c02 	mov.w	ip, #2
 8013a3e:	e7e0      	b.n	8013a02 <uxr_stream_id_from_raw+0x16>

08013a40 <uxr_init_stream_storage>:
 8013a40:	2300      	movs	r3, #0
 8013a42:	7403      	strb	r3, [r0, #16]
 8013a44:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8013a48:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8013a4c:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8013a50:	4770      	bx	lr
 8013a52:	bf00      	nop

08013a54 <uxr_reset_stream_storage>:
 8013a54:	b570      	push	{r4, r5, r6, lr}
 8013a56:	7c03      	ldrb	r3, [r0, #16]
 8013a58:	4604      	mov	r4, r0
 8013a5a:	b153      	cbz	r3, 8013a72 <uxr_reset_stream_storage+0x1e>
 8013a5c:	4606      	mov	r6, r0
 8013a5e:	2500      	movs	r5, #0
 8013a60:	4630      	mov	r0, r6
 8013a62:	f005 f837 	bl	8018ad4 <uxr_reset_output_best_effort_stream>
 8013a66:	7c23      	ldrb	r3, [r4, #16]
 8013a68:	3501      	adds	r5, #1
 8013a6a:	42ab      	cmp	r3, r5
 8013a6c:	f106 0610 	add.w	r6, r6, #16
 8013a70:	d8f6      	bhi.n	8013a60 <uxr_reset_stream_storage+0xc>
 8013a72:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8013a76:	b163      	cbz	r3, 8013a92 <uxr_reset_stream_storage+0x3e>
 8013a78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013a7c:	2500      	movs	r5, #0
 8013a7e:	4630      	mov	r0, r6
 8013a80:	f004 fe2a 	bl	80186d8 <uxr_reset_input_best_effort_stream>
 8013a84:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8013a88:	3501      	adds	r5, #1
 8013a8a:	42ab      	cmp	r3, r5
 8013a8c:	f106 0602 	add.w	r6, r6, #2
 8013a90:	d8f5      	bhi.n	8013a7e <uxr_reset_stream_storage+0x2a>
 8013a92:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8013a96:	b163      	cbz	r3, 8013ab2 <uxr_reset_stream_storage+0x5e>
 8013a98:	f104 0618 	add.w	r6, r4, #24
 8013a9c:	2500      	movs	r5, #0
 8013a9e:	4630      	mov	r0, r6
 8013aa0:	f005 f8c4 	bl	8018c2c <uxr_reset_output_reliable_stream>
 8013aa4:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8013aa8:	3501      	adds	r5, #1
 8013aaa:	42ab      	cmp	r3, r5
 8013aac:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8013ab0:	d8f5      	bhi.n	8013a9e <uxr_reset_stream_storage+0x4a>
 8013ab2:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8013ab6:	b163      	cbz	r3, 8013ad2 <uxr_reset_stream_storage+0x7e>
 8013ab8:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8013abc:	2500      	movs	r5, #0
 8013abe:	4630      	mov	r0, r6
 8013ac0:	f004 fe7e 	bl	80187c0 <uxr_reset_input_reliable_stream>
 8013ac4:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8013ac8:	3501      	adds	r5, #1
 8013aca:	42ab      	cmp	r3, r5
 8013acc:	f106 0618 	add.w	r6, r6, #24
 8013ad0:	d8f5      	bhi.n	8013abe <uxr_reset_stream_storage+0x6a>
 8013ad2:	bd70      	pop	{r4, r5, r6, pc}

08013ad4 <uxr_add_output_best_effort_buffer>:
 8013ad4:	b510      	push	{r4, lr}
 8013ad6:	7c04      	ldrb	r4, [r0, #16]
 8013ad8:	f104 0c01 	add.w	ip, r4, #1
 8013adc:	b082      	sub	sp, #8
 8013ade:	f880 c010 	strb.w	ip, [r0, #16]
 8013ae2:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8013ae6:	f004 ffeb 	bl	8018ac0 <uxr_init_output_best_effort_stream>
 8013aea:	2201      	movs	r2, #1
 8013aec:	4611      	mov	r1, r2
 8013aee:	4620      	mov	r0, r4
 8013af0:	b002      	add	sp, #8
 8013af2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013af6:	f7ff bf4f 	b.w	8013998 <uxr_stream_id>
 8013afa:	bf00      	nop

08013afc <uxr_add_output_reliable_buffer>:
 8013afc:	b510      	push	{r4, lr}
 8013afe:	b084      	sub	sp, #16
 8013b00:	4684      	mov	ip, r0
 8013b02:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8013b06:	9000      	str	r0, [sp, #0]
 8013b08:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8013b0c:	2028      	movs	r0, #40	@ 0x28
 8013b0e:	fb00 c004 	mla	r0, r0, r4, ip
 8013b12:	f104 0e01 	add.w	lr, r4, #1
 8013b16:	3018      	adds	r0, #24
 8013b18:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8013b1c:	f005 f84e 	bl	8018bbc <uxr_init_output_reliable_stream>
 8013b20:	2201      	movs	r2, #1
 8013b22:	2102      	movs	r1, #2
 8013b24:	4620      	mov	r0, r4
 8013b26:	b004      	add	sp, #16
 8013b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b2c:	f7ff bf34 	b.w	8013998 <uxr_stream_id>

08013b30 <uxr_add_input_best_effort_buffer>:
 8013b30:	b510      	push	{r4, lr}
 8013b32:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8013b36:	4603      	mov	r3, r0
 8013b38:	1c62      	adds	r2, r4, #1
 8013b3a:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 8013b3e:	b082      	sub	sp, #8
 8013b40:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8013b44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013b48:	f004 fdc2 	bl	80186d0 <uxr_init_input_best_effort_stream>
 8013b4c:	2200      	movs	r2, #0
 8013b4e:	2101      	movs	r1, #1
 8013b50:	4620      	mov	r0, r4
 8013b52:	b002      	add	sp, #8
 8013b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b58:	f7ff bf1e 	b.w	8013998 <uxr_stream_id>

08013b5c <uxr_add_input_reliable_buffer>:
 8013b5c:	b510      	push	{r4, lr}
 8013b5e:	b084      	sub	sp, #16
 8013b60:	4684      	mov	ip, r0
 8013b62:	9806      	ldr	r0, [sp, #24]
 8013b64:	9000      	str	r0, [sp, #0]
 8013b66:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8013b6a:	2018      	movs	r0, #24
 8013b6c:	fb00 c004 	mla	r0, r0, r4, ip
 8013b70:	f104 0e01 	add.w	lr, r4, #1
 8013b74:	3048      	adds	r0, #72	@ 0x48
 8013b76:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8013b7a:	f004 fdf5 	bl	8018768 <uxr_init_input_reliable_stream>
 8013b7e:	2200      	movs	r2, #0
 8013b80:	2102      	movs	r1, #2
 8013b82:	4620      	mov	r0, r4
 8013b84:	b004      	add	sp, #16
 8013b86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b8a:	f7ff bf05 	b.w	8013998 <uxr_stream_id>
 8013b8e:	bf00      	nop

08013b90 <uxr_get_output_best_effort_stream>:
 8013b90:	7c03      	ldrb	r3, [r0, #16]
 8013b92:	428b      	cmp	r3, r1
 8013b94:	bf8c      	ite	hi
 8013b96:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8013b9a:	2000      	movls	r0, #0
 8013b9c:	4770      	bx	lr
 8013b9e:	bf00      	nop

08013ba0 <uxr_get_output_reliable_stream>:
 8013ba0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8013ba4:	428b      	cmp	r3, r1
 8013ba6:	bf83      	ittte	hi
 8013ba8:	2328      	movhi	r3, #40	@ 0x28
 8013baa:	fb03 0001 	mlahi	r0, r3, r1, r0
 8013bae:	3018      	addhi	r0, #24
 8013bb0:	2000      	movls	r0, #0
 8013bb2:	4770      	bx	lr

08013bb4 <uxr_get_input_best_effort_stream>:
 8013bb4:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8013bb8:	428b      	cmp	r3, r1
 8013bba:	bf86      	itte	hi
 8013bbc:	3121      	addhi	r1, #33	@ 0x21
 8013bbe:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8013bc2:	2000      	movls	r0, #0
 8013bc4:	4770      	bx	lr
 8013bc6:	bf00      	nop

08013bc8 <uxr_get_input_reliable_stream>:
 8013bc8:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8013bcc:	428b      	cmp	r3, r1
 8013bce:	bf83      	ittte	hi
 8013bd0:	2318      	movhi	r3, #24
 8013bd2:	fb03 0001 	mlahi	r0, r3, r1, r0
 8013bd6:	3048      	addhi	r0, #72	@ 0x48
 8013bd8:	2000      	movls	r0, #0
 8013bda:	4770      	bx	lr

08013bdc <uxr_output_streams_confirmed>:
 8013bdc:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8013be0:	b183      	cbz	r3, 8013c04 <uxr_output_streams_confirmed+0x28>
 8013be2:	b570      	push	{r4, r5, r6, lr}
 8013be4:	4606      	mov	r6, r0
 8013be6:	f100 0518 	add.w	r5, r0, #24
 8013bea:	2400      	movs	r4, #0
 8013bec:	e001      	b.n	8013bf2 <uxr_output_streams_confirmed+0x16>
 8013bee:	3528      	adds	r5, #40	@ 0x28
 8013bf0:	b138      	cbz	r0, 8013c02 <uxr_output_streams_confirmed+0x26>
 8013bf2:	4628      	mov	r0, r5
 8013bf4:	f005 fa8a 	bl	801910c <uxr_is_output_up_to_date>
 8013bf8:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8013bfc:	3401      	adds	r4, #1
 8013bfe:	42a3      	cmp	r3, r4
 8013c00:	d8f5      	bhi.n	8013bee <uxr_output_streams_confirmed+0x12>
 8013c02:	bd70      	pop	{r4, r5, r6, pc}
 8013c04:	2001      	movs	r0, #1
 8013c06:	4770      	bx	lr

08013c08 <uxr_buffer_submessage_header>:
 8013c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c0a:	4604      	mov	r4, r0
 8013c0c:	460e      	mov	r6, r1
 8013c0e:	2104      	movs	r1, #4
 8013c10:	4615      	mov	r5, r2
 8013c12:	461f      	mov	r7, r3
 8013c14:	f7f8 fdbc 	bl	800c790 <ucdr_align_to>
 8013c18:	2301      	movs	r3, #1
 8013c1a:	ea47 0203 	orr.w	r2, r7, r3
 8013c1e:	4631      	mov	r1, r6
 8013c20:	7523      	strb	r3, [r4, #20]
 8013c22:	4620      	mov	r0, r4
 8013c24:	462b      	mov	r3, r5
 8013c26:	f000 fa27 	bl	8014078 <uxr_serialize_submessage_header>
 8013c2a:	4620      	mov	r0, r4
 8013c2c:	f7f8 fdc6 	bl	800c7bc <ucdr_buffer_remaining>
 8013c30:	42a8      	cmp	r0, r5
 8013c32:	bf34      	ite	cc
 8013c34:	2000      	movcc	r0, #0
 8013c36:	2001      	movcs	r0, #1
 8013c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c3a:	bf00      	nop

08013c3c <uxr_read_submessage_header>:
 8013c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c40:	4604      	mov	r4, r0
 8013c42:	460d      	mov	r5, r1
 8013c44:	2104      	movs	r1, #4
 8013c46:	4616      	mov	r6, r2
 8013c48:	4698      	mov	r8, r3
 8013c4a:	f7f8 fda1 	bl	800c790 <ucdr_align_to>
 8013c4e:	4620      	mov	r0, r4
 8013c50:	f7f8 fdb4 	bl	800c7bc <ucdr_buffer_remaining>
 8013c54:	2803      	cmp	r0, #3
 8013c56:	bf8c      	ite	hi
 8013c58:	2701      	movhi	r7, #1
 8013c5a:	2700      	movls	r7, #0
 8013c5c:	d802      	bhi.n	8013c64 <uxr_read_submessage_header+0x28>
 8013c5e:	4638      	mov	r0, r7
 8013c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c64:	4633      	mov	r3, r6
 8013c66:	4642      	mov	r2, r8
 8013c68:	4620      	mov	r0, r4
 8013c6a:	4629      	mov	r1, r5
 8013c6c:	f000 fa18 	bl	80140a0 <uxr_deserialize_submessage_header>
 8013c70:	f898 3000 	ldrb.w	r3, [r8]
 8013c74:	f003 0201 	and.w	r2, r3, #1
 8013c78:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8013c7c:	f888 3000 	strb.w	r3, [r8]
 8013c80:	7522      	strb	r2, [r4, #20]
 8013c82:	4638      	mov	r0, r7
 8013c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013c88 <uxr_submessage_padding>:
 8013c88:	f010 0003 	ands.w	r0, r0, #3
 8013c8c:	bf18      	it	ne
 8013c8e:	f1c0 0004 	rsbne	r0, r0, #4
 8013c92:	4770      	bx	lr

08013c94 <uxr_millis>:
 8013c94:	b510      	push	{r4, lr}
 8013c96:	b084      	sub	sp, #16
 8013c98:	4669      	mov	r1, sp
 8013c9a:	2001      	movs	r0, #1
 8013c9c:	f7ef fb8c 	bl	80033b8 <clock_gettime>
 8013ca0:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8013ca4:	4906      	ldr	r1, [pc, #24]	@ (8013cc0 <uxr_millis+0x2c>)
 8013ca6:	fba0 0301 	umull	r0, r3, r0, r1
 8013caa:	1900      	adds	r0, r0, r4
 8013cac:	fb01 3102 	mla	r1, r1, r2, r3
 8013cb0:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8013cb4:	4a03      	ldr	r2, [pc, #12]	@ (8013cc4 <uxr_millis+0x30>)
 8013cb6:	2300      	movs	r3, #0
 8013cb8:	f7ec ffb8 	bl	8000c2c <__aeabi_ldivmod>
 8013cbc:	b004      	add	sp, #16
 8013cbe:	bd10      	pop	{r4, pc}
 8013cc0:	3b9aca00 	.word	0x3b9aca00
 8013cc4:	000f4240 	.word	0x000f4240

08013cc8 <uxr_nanos>:
 8013cc8:	b510      	push	{r4, lr}
 8013cca:	b084      	sub	sp, #16
 8013ccc:	4669      	mov	r1, sp
 8013cce:	2001      	movs	r0, #1
 8013cd0:	f7ef fb72 	bl	80033b8 <clock_gettime>
 8013cd4:	4a06      	ldr	r2, [pc, #24]	@ (8013cf0 <uxr_nanos+0x28>)
 8013cd6:	9800      	ldr	r0, [sp, #0]
 8013cd8:	9902      	ldr	r1, [sp, #8]
 8013cda:	9c01      	ldr	r4, [sp, #4]
 8013cdc:	fba0 0302 	umull	r0, r3, r0, r2
 8013ce0:	1840      	adds	r0, r0, r1
 8013ce2:	fb02 3304 	mla	r3, r2, r4, r3
 8013ce6:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8013cea:	b004      	add	sp, #16
 8013cec:	bd10      	pop	{r4, pc}
 8013cee:	bf00      	nop
 8013cf0:	3b9aca00 	.word	0x3b9aca00

08013cf4 <on_full_output_buffer_fragmented>:
 8013cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cf8:	460c      	mov	r4, r1
 8013cfa:	b08a      	sub	sp, #40	@ 0x28
 8013cfc:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8013d00:	4606      	mov	r6, r0
 8013d02:	f104 0008 	add.w	r0, r4, #8
 8013d06:	f7ff ff4b 	bl	8013ba0 <uxr_get_output_reliable_stream>
 8013d0a:	4605      	mov	r5, r0
 8013d0c:	f005 fa08 	bl	8019120 <get_available_free_slots>
 8013d10:	b968      	cbnz	r0, 8013d2e <on_full_output_buffer_fragmented+0x3a>
 8013d12:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8013d16:	4620      	mov	r0, r4
 8013d18:	4798      	blx	r3
 8013d1a:	b918      	cbnz	r0, 8013d24 <on_full_output_buffer_fragmented+0x30>
 8013d1c:	2001      	movs	r0, #1
 8013d1e:	b00a      	add	sp, #40	@ 0x28
 8013d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d24:	4628      	mov	r0, r5
 8013d26:	f005 f9fb 	bl	8019120 <get_available_free_slots>
 8013d2a:	2800      	cmp	r0, #0
 8013d2c:	d0f6      	beq.n	8013d1c <on_full_output_buffer_fragmented+0x28>
 8013d2e:	8929      	ldrh	r1, [r5, #8]
 8013d30:	89eb      	ldrh	r3, [r5, #14]
 8013d32:	7b28      	ldrb	r0, [r5, #12]
 8013d34:	686a      	ldr	r2, [r5, #4]
 8013d36:	fbb2 f8f1 	udiv	r8, r2, r1
 8013d3a:	fbb3 f2f1 	udiv	r2, r3, r1
 8013d3e:	fb01 3112 	mls	r1, r1, r2, r3
 8013d42:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 8013d46:	b289      	uxth	r1, r1
 8013d48:	fb08 f101 	mul.w	r1, r8, r1
 8013d4c:	30fc      	adds	r0, #252	@ 0xfc
 8013d4e:	f1a8 0804 	sub.w	r8, r8, #4
 8013d52:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8013d56:	4440      	add	r0, r8
 8013d58:	b287      	uxth	r7, r0
 8013d5a:	1bdb      	subs	r3, r3, r7
 8013d5c:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8013d60:	682b      	ldr	r3, [r5, #0]
 8013d62:	3104      	adds	r1, #4
 8013d64:	4419      	add	r1, r3
 8013d66:	4642      	mov	r2, r8
 8013d68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013d6c:	9300      	str	r3, [sp, #0]
 8013d6e:	a802      	add	r0, sp, #8
 8013d70:	2300      	movs	r3, #0
 8013d72:	f7f8 fce1 	bl	800c738 <ucdr_init_buffer_origin_offset>
 8013d76:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8013d7a:	f102 0308 	add.w	r3, r2, #8
 8013d7e:	4543      	cmp	r3, r8
 8013d80:	d928      	bls.n	8013dd4 <on_full_output_buffer_fragmented+0xe0>
 8013d82:	463a      	mov	r2, r7
 8013d84:	2300      	movs	r3, #0
 8013d86:	210d      	movs	r1, #13
 8013d88:	a802      	add	r0, sp, #8
 8013d8a:	f7ff ff3d 	bl	8013c08 <uxr_buffer_submessage_header>
 8013d8e:	8929      	ldrh	r1, [r5, #8]
 8013d90:	89eb      	ldrh	r3, [r5, #14]
 8013d92:	fbb3 f2f1 	udiv	r2, r3, r1
 8013d96:	fb01 3312 	mls	r3, r1, r2, r3
 8013d9a:	b29b      	uxth	r3, r3
 8013d9c:	686a      	ldr	r2, [r5, #4]
 8013d9e:	fbb2 f2f1 	udiv	r2, r2, r1
 8013da2:	fb02 f303 	mul.w	r3, r2, r3
 8013da6:	682a      	ldr	r2, [r5, #0]
 8013da8:	f842 8003 	str.w	r8, [r2, r3]
 8013dac:	89e8      	ldrh	r0, [r5, #14]
 8013dae:	2101      	movs	r1, #1
 8013db0:	f005 f9d6 	bl	8019160 <uxr_seq_num_add>
 8013db4:	9904      	ldr	r1, [sp, #16]
 8013db6:	9a03      	ldr	r2, [sp, #12]
 8013db8:	81e8      	strh	r0, [r5, #14]
 8013dba:	1a52      	subs	r2, r2, r1
 8013dbc:	4630      	mov	r0, r6
 8013dbe:	f7f8 fccd 	bl	800c75c <ucdr_init_buffer>
 8013dc2:	4630      	mov	r0, r6
 8013dc4:	490f      	ldr	r1, [pc, #60]	@ (8013e04 <on_full_output_buffer_fragmented+0x110>)
 8013dc6:	4622      	mov	r2, r4
 8013dc8:	f7f8 fc9c 	bl	800c704 <ucdr_set_on_full_buffer_callback>
 8013dcc:	2000      	movs	r0, #0
 8013dce:	b00a      	add	sp, #40	@ 0x28
 8013dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dd4:	b292      	uxth	r2, r2
 8013dd6:	2302      	movs	r3, #2
 8013dd8:	210d      	movs	r1, #13
 8013dda:	a802      	add	r0, sp, #8
 8013ddc:	f7ff ff14 	bl	8013c08 <uxr_buffer_submessage_header>
 8013de0:	8928      	ldrh	r0, [r5, #8]
 8013de2:	89eb      	ldrh	r3, [r5, #14]
 8013de4:	fbb3 f1f0 	udiv	r1, r3, r0
 8013de8:	fb00 3311 	mls	r3, r0, r1, r3
 8013dec:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8013df0:	6869      	ldr	r1, [r5, #4]
 8013df2:	fbb1 f1f0 	udiv	r1, r1, r0
 8013df6:	b29b      	uxth	r3, r3
 8013df8:	fb01 f303 	mul.w	r3, r1, r3
 8013dfc:	6829      	ldr	r1, [r5, #0]
 8013dfe:	3208      	adds	r2, #8
 8013e00:	50ca      	str	r2, [r1, r3]
 8013e02:	e7d3      	b.n	8013dac <on_full_output_buffer_fragmented+0xb8>
 8013e04:	08013cf5 	.word	0x08013cf5

08013e08 <uxr_prepare_output_stream>:
 8013e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e0a:	b087      	sub	sp, #28
 8013e0c:	2707      	movs	r7, #7
 8013e0e:	9202      	str	r2, [sp, #8]
 8013e10:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8013e12:	9103      	str	r1, [sp, #12]
 8013e14:	2500      	movs	r5, #0
 8013e16:	3204      	adds	r2, #4
 8013e18:	e9cd 7500 	strd	r7, r5, [sp]
 8013e1c:	461c      	mov	r4, r3
 8013e1e:	4606      	mov	r6, r0
 8013e20:	f7fe ffc2 	bl	8012da8 <uxr_prepare_stream_to_write_submessage>
 8013e24:	f080 0201 	eor.w	r2, r0, #1
 8013e28:	b2d2      	uxtb	r2, r2
 8013e2a:	75a2      	strb	r2, [r4, #22]
 8013e2c:	b112      	cbz	r2, 8013e34 <uxr_prepare_output_stream+0x2c>
 8013e2e:	4628      	mov	r0, r5
 8013e30:	b007      	add	sp, #28
 8013e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e34:	aa05      	add	r2, sp, #20
 8013e36:	9902      	ldr	r1, [sp, #8]
 8013e38:	4630      	mov	r0, r6
 8013e3a:	f7ff f8eb 	bl	8013014 <uxr_init_base_object_request>
 8013e3e:	a905      	add	r1, sp, #20
 8013e40:	4605      	mov	r5, r0
 8013e42:	4620      	mov	r0, r4
 8013e44:	f001 f8a0 	bl	8014f88 <uxr_serialize_WRITE_DATA_Payload_Data>
 8013e48:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8013e4c:	69a6      	ldr	r6, [r4, #24]
 8013e4e:	69e7      	ldr	r7, [r4, #28]
 8013e50:	1a52      	subs	r2, r2, r1
 8013e52:	4620      	mov	r0, r4
 8013e54:	f7f8 fc82 	bl	800c75c <ucdr_init_buffer>
 8013e58:	4620      	mov	r0, r4
 8013e5a:	463a      	mov	r2, r7
 8013e5c:	4631      	mov	r1, r6
 8013e5e:	f7f8 fc51 	bl	800c704 <ucdr_set_on_full_buffer_callback>
 8013e62:	4628      	mov	r0, r5
 8013e64:	b007      	add	sp, #28
 8013e66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013e68 <uxr_prepare_output_stream_fragmented>:
 8013e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e6c:	b091      	sub	sp, #68	@ 0x44
 8013e6e:	4605      	mov	r5, r0
 8013e70:	9105      	str	r1, [sp, #20]
 8013e72:	3008      	adds	r0, #8
 8013e74:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8013e78:	461e      	mov	r6, r3
 8013e7a:	9204      	str	r2, [sp, #16]
 8013e7c:	f7ff fe90 	bl	8013ba0 <uxr_get_output_reliable_stream>
 8013e80:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8013e84:	2b01      	cmp	r3, #1
 8013e86:	f000 8091 	beq.w	8013fac <uxr_prepare_output_stream_fragmented+0x144>
 8013e8a:	4604      	mov	r4, r0
 8013e8c:	2800      	cmp	r0, #0
 8013e8e:	f000 808d 	beq.w	8013fac <uxr_prepare_output_stream_fragmented+0x144>
 8013e92:	f005 f945 	bl	8019120 <get_available_free_slots>
 8013e96:	2800      	cmp	r0, #0
 8013e98:	f000 8083 	beq.w	8013fa2 <uxr_prepare_output_stream_fragmented+0x13a>
 8013e9c:	8922      	ldrh	r2, [r4, #8]
 8013e9e:	89e7      	ldrh	r7, [r4, #14]
 8013ea0:	fbb7 f9f2 	udiv	r9, r7, r2
 8013ea4:	fb02 7919 	mls	r9, r2, r9, r7
 8013ea8:	fa1f f989 	uxth.w	r9, r9
 8013eac:	6863      	ldr	r3, [r4, #4]
 8013eae:	fbb3 f2f2 	udiv	r2, r3, r2
 8013eb2:	6823      	ldr	r3, [r4, #0]
 8013eb4:	9203      	str	r2, [sp, #12]
 8013eb6:	fb02 f909 	mul.w	r9, r2, r9
 8013eba:	f109 0904 	add.w	r9, r9, #4
 8013ebe:	4499      	add	r9, r3
 8013ec0:	7b23      	ldrb	r3, [r4, #12]
 8013ec2:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8013ec6:	4543      	cmp	r3, r8
 8013ec8:	f1a2 0b04 	sub.w	fp, r2, #4
 8013ecc:	d37a      	bcc.n	8013fc4 <uxr_prepare_output_stream_fragmented+0x15c>
 8013ece:	f1ab 0a04 	sub.w	sl, fp, #4
 8013ed2:	ebaa 0a03 	sub.w	sl, sl, r3
 8013ed6:	465a      	mov	r2, fp
 8013ed8:	2300      	movs	r3, #0
 8013eda:	4649      	mov	r1, r9
 8013edc:	a808      	add	r0, sp, #32
 8013ede:	f8cd 8000 	str.w	r8, [sp]
 8013ee2:	f7f8 fc29 	bl	800c738 <ucdr_init_buffer_origin_offset>
 8013ee6:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8013ee8:	fa1f fa8a 	uxth.w	sl, sl
 8013eec:	4652      	mov	r2, sl
 8013eee:	f103 0a08 	add.w	sl, r3, #8
 8013ef2:	45da      	cmp	sl, fp
 8013ef4:	bf34      	ite	cc
 8013ef6:	2302      	movcc	r3, #2
 8013ef8:	2300      	movcs	r3, #0
 8013efa:	210d      	movs	r1, #13
 8013efc:	a808      	add	r0, sp, #32
 8013efe:	f7ff fe83 	bl	8013c08 <uxr_buffer_submessage_header>
 8013f02:	8921      	ldrh	r1, [r4, #8]
 8013f04:	fbb7 f2f1 	udiv	r2, r7, r1
 8013f08:	fb01 7212 	mls	r2, r1, r2, r7
 8013f0c:	b292      	uxth	r2, r2
 8013f0e:	6863      	ldr	r3, [r4, #4]
 8013f10:	fbb3 f3f1 	udiv	r3, r3, r1
 8013f14:	fb02 f303 	mul.w	r3, r2, r3
 8013f18:	6822      	ldr	r2, [r4, #0]
 8013f1a:	4638      	mov	r0, r7
 8013f1c:	f842 b003 	str.w	fp, [r2, r3]
 8013f20:	2101      	movs	r1, #1
 8013f22:	f005 f91d 	bl	8019160 <uxr_seq_num_add>
 8013f26:	9b03      	ldr	r3, [sp, #12]
 8013f28:	f108 0104 	add.w	r1, r8, #4
 8013f2c:	f1a3 0208 	sub.w	r2, r3, #8
 8013f30:	eba2 0208 	sub.w	r2, r2, r8
 8013f34:	4449      	add	r1, r9
 8013f36:	4607      	mov	r7, r0
 8013f38:	4630      	mov	r0, r6
 8013f3a:	f7f8 fc0f 	bl	800c75c <ucdr_init_buffer>
 8013f3e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8013f40:	81e7      	strh	r7, [r4, #14]
 8013f42:	1d1a      	adds	r2, r3, #4
 8013f44:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8013f48:	bf28      	it	cs
 8013f4a:	2200      	movcs	r2, #0
 8013f4c:	2300      	movs	r3, #0
 8013f4e:	b292      	uxth	r2, r2
 8013f50:	2107      	movs	r1, #7
 8013f52:	4630      	mov	r0, r6
 8013f54:	f7ff fe58 	bl	8013c08 <uxr_buffer_submessage_header>
 8013f58:	9904      	ldr	r1, [sp, #16]
 8013f5a:	aa07      	add	r2, sp, #28
 8013f5c:	4628      	mov	r0, r5
 8013f5e:	f7ff f859 	bl	8013014 <uxr_init_base_object_request>
 8013f62:	4604      	mov	r4, r0
 8013f64:	b318      	cbz	r0, 8013fae <uxr_prepare_output_stream_fragmented+0x146>
 8013f66:	a907      	add	r1, sp, #28
 8013f68:	4630      	mov	r0, r6
 8013f6a:	f001 f80d 	bl	8014f88 <uxr_serialize_WRITE_DATA_Payload_Data>
 8013f6e:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8013f72:	4630      	mov	r0, r6
 8013f74:	1a52      	subs	r2, r2, r1
 8013f76:	f7f8 fbf1 	bl	800c75c <ucdr_init_buffer>
 8013f7a:	9b05      	ldr	r3, [sp, #20]
 8013f7c:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8013f80:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8013f82:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8013f86:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8013f88:	491b      	ldr	r1, [pc, #108]	@ (8013ff8 <uxr_prepare_output_stream_fragmented+0x190>)
 8013f8a:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8013f8e:	4630      	mov	r0, r6
 8013f90:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8013f94:	462a      	mov	r2, r5
 8013f96:	f7f8 fbb5 	bl	800c704 <ucdr_set_on_full_buffer_callback>
 8013f9a:	4620      	mov	r0, r4
 8013f9c:	b011      	add	sp, #68	@ 0x44
 8013f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fa2:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8013fa4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8013fa6:	4628      	mov	r0, r5
 8013fa8:	4798      	blx	r3
 8013faa:	b920      	cbnz	r0, 8013fb6 <uxr_prepare_output_stream_fragmented+0x14e>
 8013fac:	2400      	movs	r4, #0
 8013fae:	4620      	mov	r0, r4
 8013fb0:	b011      	add	sp, #68	@ 0x44
 8013fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fb6:	4620      	mov	r0, r4
 8013fb8:	f005 f8b2 	bl	8019120 <get_available_free_slots>
 8013fbc:	2800      	cmp	r0, #0
 8013fbe:	f47f af6d 	bne.w	8013e9c <uxr_prepare_output_stream_fragmented+0x34>
 8013fc2:	e7f3      	b.n	8013fac <uxr_prepare_output_stream_fragmented+0x144>
 8013fc4:	4638      	mov	r0, r7
 8013fc6:	2101      	movs	r1, #1
 8013fc8:	f005 f8ca 	bl	8019160 <uxr_seq_num_add>
 8013fcc:	8921      	ldrh	r1, [r4, #8]
 8013fce:	fbb0 f2f1 	udiv	r2, r0, r1
 8013fd2:	fb01 0912 	mls	r9, r1, r2, r0
 8013fd6:	fa1f f289 	uxth.w	r2, r9
 8013fda:	6863      	ldr	r3, [r4, #4]
 8013fdc:	fbb3 f9f1 	udiv	r9, r3, r1
 8013fe0:	6823      	ldr	r3, [r4, #0]
 8013fe2:	fb02 f909 	mul.w	r9, r2, r9
 8013fe6:	f109 0904 	add.w	r9, r9, #4
 8013fea:	4499      	add	r9, r3
 8013fec:	4607      	mov	r7, r0
 8013fee:	7b23      	ldrb	r3, [r4, #12]
 8013ff0:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8013ff4:	e76b      	b.n	8013ece <uxr_prepare_output_stream_fragmented+0x66>
 8013ff6:	bf00      	nop
 8013ff8:	08013cf5 	.word	0x08013cf5

08013ffc <uxr_serialize_message_header>:
 8013ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ffe:	b083      	sub	sp, #12
 8014000:	4616      	mov	r6, r2
 8014002:	4604      	mov	r4, r0
 8014004:	9301      	str	r3, [sp, #4]
 8014006:	460d      	mov	r5, r1
 8014008:	9f08      	ldr	r7, [sp, #32]
 801400a:	f7f7 f8c5 	bl	800b198 <ucdr_serialize_uint8_t>
 801400e:	4631      	mov	r1, r6
 8014010:	4620      	mov	r0, r4
 8014012:	f7f7 f8c1 	bl	800b198 <ucdr_serialize_uint8_t>
 8014016:	9a01      	ldr	r2, [sp, #4]
 8014018:	2101      	movs	r1, #1
 801401a:	4620      	mov	r0, r4
 801401c:	f7f7 f968 	bl	800b2f0 <ucdr_serialize_endian_uint16_t>
 8014020:	062b      	lsls	r3, r5, #24
 8014022:	d501      	bpl.n	8014028 <uxr_serialize_message_header+0x2c>
 8014024:	b003      	add	sp, #12
 8014026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014028:	2204      	movs	r2, #4
 801402a:	4639      	mov	r1, r7
 801402c:	4620      	mov	r0, r4
 801402e:	b003      	add	sp, #12
 8014030:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014034:	f7fd b870 	b.w	8011118 <ucdr_serialize_array_uint8_t>

08014038 <uxr_deserialize_message_header>:
 8014038:	b5f0      	push	{r4, r5, r6, r7, lr}
 801403a:	b083      	sub	sp, #12
 801403c:	4616      	mov	r6, r2
 801403e:	4604      	mov	r4, r0
 8014040:	9301      	str	r3, [sp, #4]
 8014042:	460d      	mov	r5, r1
 8014044:	9f08      	ldr	r7, [sp, #32]
 8014046:	f7f7 f8bd 	bl	800b1c4 <ucdr_deserialize_uint8_t>
 801404a:	4631      	mov	r1, r6
 801404c:	4620      	mov	r0, r4
 801404e:	f7f7 f8b9 	bl	800b1c4 <ucdr_deserialize_uint8_t>
 8014052:	9a01      	ldr	r2, [sp, #4]
 8014054:	2101      	movs	r1, #1
 8014056:	4620      	mov	r0, r4
 8014058:	f7f7 fa3e 	bl	800b4d8 <ucdr_deserialize_endian_uint16_t>
 801405c:	f995 3000 	ldrsb.w	r3, [r5]
 8014060:	2b00      	cmp	r3, #0
 8014062:	da01      	bge.n	8014068 <uxr_deserialize_message_header+0x30>
 8014064:	b003      	add	sp, #12
 8014066:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014068:	2204      	movs	r2, #4
 801406a:	4639      	mov	r1, r7
 801406c:	4620      	mov	r0, r4
 801406e:	b003      	add	sp, #12
 8014070:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014074:	f7fd b8b4 	b.w	80111e0 <ucdr_deserialize_array_uint8_t>

08014078 <uxr_serialize_submessage_header>:
 8014078:	b530      	push	{r4, r5, lr}
 801407a:	b083      	sub	sp, #12
 801407c:	4615      	mov	r5, r2
 801407e:	4604      	mov	r4, r0
 8014080:	9301      	str	r3, [sp, #4]
 8014082:	f7f7 f889 	bl	800b198 <ucdr_serialize_uint8_t>
 8014086:	4629      	mov	r1, r5
 8014088:	4620      	mov	r0, r4
 801408a:	f7f7 f885 	bl	800b198 <ucdr_serialize_uint8_t>
 801408e:	9a01      	ldr	r2, [sp, #4]
 8014090:	2101      	movs	r1, #1
 8014092:	4620      	mov	r0, r4
 8014094:	b003      	add	sp, #12
 8014096:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801409a:	f7f7 b929 	b.w	800b2f0 <ucdr_serialize_endian_uint16_t>
 801409e:	bf00      	nop

080140a0 <uxr_deserialize_submessage_header>:
 80140a0:	b530      	push	{r4, r5, lr}
 80140a2:	b083      	sub	sp, #12
 80140a4:	4615      	mov	r5, r2
 80140a6:	4604      	mov	r4, r0
 80140a8:	9301      	str	r3, [sp, #4]
 80140aa:	f7f7 f88b 	bl	800b1c4 <ucdr_deserialize_uint8_t>
 80140ae:	4629      	mov	r1, r5
 80140b0:	4620      	mov	r0, r4
 80140b2:	f7f7 f887 	bl	800b1c4 <ucdr_deserialize_uint8_t>
 80140b6:	9a01      	ldr	r2, [sp, #4]
 80140b8:	2101      	movs	r1, #1
 80140ba:	4620      	mov	r0, r4
 80140bc:	b003      	add	sp, #12
 80140be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80140c2:	f7f7 ba09 	b.w	800b4d8 <ucdr_deserialize_endian_uint16_t>
 80140c6:	bf00      	nop

080140c8 <uxr_serialize_CLIENT_Representation>:
 80140c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80140cc:	2204      	movs	r2, #4
 80140ce:	460e      	mov	r6, r1
 80140d0:	4605      	mov	r5, r0
 80140d2:	f7fd f821 	bl	8011118 <ucdr_serialize_array_uint8_t>
 80140d6:	2202      	movs	r2, #2
 80140d8:	4607      	mov	r7, r0
 80140da:	1d31      	adds	r1, r6, #4
 80140dc:	4628      	mov	r0, r5
 80140de:	f7fd f81b 	bl	8011118 <ucdr_serialize_array_uint8_t>
 80140e2:	4038      	ands	r0, r7
 80140e4:	2202      	movs	r2, #2
 80140e6:	1db1      	adds	r1, r6, #6
 80140e8:	b2c7      	uxtb	r7, r0
 80140ea:	4628      	mov	r0, r5
 80140ec:	f7fd f814 	bl	8011118 <ucdr_serialize_array_uint8_t>
 80140f0:	2204      	movs	r2, #4
 80140f2:	4007      	ands	r7, r0
 80140f4:	f106 0108 	add.w	r1, r6, #8
 80140f8:	4628      	mov	r0, r5
 80140fa:	f7fd f80d 	bl	8011118 <ucdr_serialize_array_uint8_t>
 80140fe:	7b31      	ldrb	r1, [r6, #12]
 8014100:	4007      	ands	r7, r0
 8014102:	4628      	mov	r0, r5
 8014104:	f7f7 f848 	bl	800b198 <ucdr_serialize_uint8_t>
 8014108:	7b71      	ldrb	r1, [r6, #13]
 801410a:	4007      	ands	r7, r0
 801410c:	4628      	mov	r0, r5
 801410e:	f7f7 f815 	bl	800b13c <ucdr_serialize_bool>
 8014112:	7b73      	ldrb	r3, [r6, #13]
 8014114:	ea07 0800 	and.w	r8, r7, r0
 8014118:	b93b      	cbnz	r3, 801412a <uxr_serialize_CLIENT_Representation+0x62>
 801411a:	8bb1      	ldrh	r1, [r6, #28]
 801411c:	4628      	mov	r0, r5
 801411e:	f7f7 f867 	bl	800b1f0 <ucdr_serialize_uint16_t>
 8014122:	ea08 0000 	and.w	r0, r8, r0
 8014126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801412a:	6931      	ldr	r1, [r6, #16]
 801412c:	4628      	mov	r0, r5
 801412e:	f7f7 fa49 	bl	800b5c4 <ucdr_serialize_uint32_t>
 8014132:	6933      	ldr	r3, [r6, #16]
 8014134:	b1e3      	cbz	r3, 8014170 <uxr_serialize_CLIENT_Representation+0xa8>
 8014136:	b1c0      	cbz	r0, 801416a <uxr_serialize_CLIENT_Representation+0xa2>
 8014138:	4637      	mov	r7, r6
 801413a:	f04f 0900 	mov.w	r9, #0
 801413e:	e001      	b.n	8014144 <uxr_serialize_CLIENT_Representation+0x7c>
 8014140:	3708      	adds	r7, #8
 8014142:	b194      	cbz	r4, 801416a <uxr_serialize_CLIENT_Representation+0xa2>
 8014144:	6979      	ldr	r1, [r7, #20]
 8014146:	4628      	mov	r0, r5
 8014148:	f004 faaa 	bl	80186a0 <ucdr_serialize_string>
 801414c:	69b9      	ldr	r1, [r7, #24]
 801414e:	4604      	mov	r4, r0
 8014150:	4628      	mov	r0, r5
 8014152:	f004 faa5 	bl	80186a0 <ucdr_serialize_string>
 8014156:	6933      	ldr	r3, [r6, #16]
 8014158:	f109 0901 	add.w	r9, r9, #1
 801415c:	4004      	ands	r4, r0
 801415e:	4599      	cmp	r9, r3
 8014160:	b2e4      	uxtb	r4, r4
 8014162:	d3ed      	bcc.n	8014140 <uxr_serialize_CLIENT_Representation+0x78>
 8014164:	ea08 0804 	and.w	r8, r8, r4
 8014168:	e7d7      	b.n	801411a <uxr_serialize_CLIENT_Representation+0x52>
 801416a:	f04f 0800 	mov.w	r8, #0
 801416e:	e7d4      	b.n	801411a <uxr_serialize_CLIENT_Representation+0x52>
 8014170:	ea08 0800 	and.w	r8, r8, r0
 8014174:	e7d1      	b.n	801411a <uxr_serialize_CLIENT_Representation+0x52>
 8014176:	bf00      	nop

08014178 <uxr_deserialize_CLIENT_Representation>:
 8014178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801417c:	2204      	movs	r2, #4
 801417e:	460c      	mov	r4, r1
 8014180:	4605      	mov	r5, r0
 8014182:	f7fd f82d 	bl	80111e0 <ucdr_deserialize_array_uint8_t>
 8014186:	2202      	movs	r2, #2
 8014188:	4607      	mov	r7, r0
 801418a:	1d21      	adds	r1, r4, #4
 801418c:	4628      	mov	r0, r5
 801418e:	f7fd f827 	bl	80111e0 <ucdr_deserialize_array_uint8_t>
 8014192:	4038      	ands	r0, r7
 8014194:	2202      	movs	r2, #2
 8014196:	1da1      	adds	r1, r4, #6
 8014198:	b2c6      	uxtb	r6, r0
 801419a:	4628      	mov	r0, r5
 801419c:	f7fd f820 	bl	80111e0 <ucdr_deserialize_array_uint8_t>
 80141a0:	2204      	movs	r2, #4
 80141a2:	4006      	ands	r6, r0
 80141a4:	f104 0108 	add.w	r1, r4, #8
 80141a8:	4628      	mov	r0, r5
 80141aa:	f7fd f819 	bl	80111e0 <ucdr_deserialize_array_uint8_t>
 80141ae:	f104 010c 	add.w	r1, r4, #12
 80141b2:	4006      	ands	r6, r0
 80141b4:	4628      	mov	r0, r5
 80141b6:	f7f7 f805 	bl	800b1c4 <ucdr_deserialize_uint8_t>
 80141ba:	f104 010d 	add.w	r1, r4, #13
 80141be:	ea06 0700 	and.w	r7, r6, r0
 80141c2:	4628      	mov	r0, r5
 80141c4:	f7f6 ffd0 	bl	800b168 <ucdr_deserialize_bool>
 80141c8:	7b63      	ldrb	r3, [r4, #13]
 80141ca:	4007      	ands	r7, r0
 80141cc:	b93b      	cbnz	r3, 80141de <uxr_deserialize_CLIENT_Representation+0x66>
 80141ce:	f104 011c 	add.w	r1, r4, #28
 80141d2:	4628      	mov	r0, r5
 80141d4:	f7f7 f90c 	bl	800b3f0 <ucdr_deserialize_uint16_t>
 80141d8:	4038      	ands	r0, r7
 80141da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80141de:	f104 0110 	add.w	r1, r4, #16
 80141e2:	4628      	mov	r0, r5
 80141e4:	f7f7 fb1e 	bl	800b824 <ucdr_deserialize_uint32_t>
 80141e8:	6923      	ldr	r3, [r4, #16]
 80141ea:	2b01      	cmp	r3, #1
 80141ec:	d903      	bls.n	80141f6 <uxr_deserialize_CLIENT_Representation+0x7e>
 80141ee:	2301      	movs	r3, #1
 80141f0:	75ab      	strb	r3, [r5, #22]
 80141f2:	2700      	movs	r7, #0
 80141f4:	e7eb      	b.n	80141ce <uxr_deserialize_CLIENT_Representation+0x56>
 80141f6:	b30b      	cbz	r3, 801423c <uxr_deserialize_CLIENT_Representation+0xc4>
 80141f8:	2800      	cmp	r0, #0
 80141fa:	d0fa      	beq.n	80141f2 <uxr_deserialize_CLIENT_Representation+0x7a>
 80141fc:	46a0      	mov	r8, r4
 80141fe:	f04f 0900 	mov.w	r9, #0
 8014202:	e001      	b.n	8014208 <uxr_deserialize_CLIENT_Representation+0x90>
 8014204:	2e00      	cmp	r6, #0
 8014206:	d0f4      	beq.n	80141f2 <uxr_deserialize_CLIENT_Representation+0x7a>
 8014208:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801420c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014210:	4628      	mov	r0, r5
 8014212:	f004 fa55 	bl	80186c0 <ucdr_deserialize_string>
 8014216:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801421a:	4606      	mov	r6, r0
 801421c:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8014220:	4628      	mov	r0, r5
 8014222:	f004 fa4d 	bl	80186c0 <ucdr_deserialize_string>
 8014226:	6923      	ldr	r3, [r4, #16]
 8014228:	f109 0901 	add.w	r9, r9, #1
 801422c:	4006      	ands	r6, r0
 801422e:	4599      	cmp	r9, r3
 8014230:	f108 0808 	add.w	r8, r8, #8
 8014234:	b2f6      	uxtb	r6, r6
 8014236:	d3e5      	bcc.n	8014204 <uxr_deserialize_CLIENT_Representation+0x8c>
 8014238:	4037      	ands	r7, r6
 801423a:	e7c8      	b.n	80141ce <uxr_deserialize_CLIENT_Representation+0x56>
 801423c:	4007      	ands	r7, r0
 801423e:	e7c6      	b.n	80141ce <uxr_deserialize_CLIENT_Representation+0x56>

08014240 <uxr_serialize_AGENT_Representation>:
 8014240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014244:	2204      	movs	r2, #4
 8014246:	460f      	mov	r7, r1
 8014248:	4605      	mov	r5, r0
 801424a:	f7fc ff65 	bl	8011118 <ucdr_serialize_array_uint8_t>
 801424e:	2202      	movs	r2, #2
 8014250:	4604      	mov	r4, r0
 8014252:	1d39      	adds	r1, r7, #4
 8014254:	4628      	mov	r0, r5
 8014256:	f7fc ff5f 	bl	8011118 <ucdr_serialize_array_uint8_t>
 801425a:	4020      	ands	r0, r4
 801425c:	2202      	movs	r2, #2
 801425e:	1db9      	adds	r1, r7, #6
 8014260:	b2c4      	uxtb	r4, r0
 8014262:	4628      	mov	r0, r5
 8014264:	f7fc ff58 	bl	8011118 <ucdr_serialize_array_uint8_t>
 8014268:	7a39      	ldrb	r1, [r7, #8]
 801426a:	4004      	ands	r4, r0
 801426c:	4628      	mov	r0, r5
 801426e:	f7f6 ff65 	bl	800b13c <ucdr_serialize_bool>
 8014272:	7a3b      	ldrb	r3, [r7, #8]
 8014274:	ea00 0804 	and.w	r8, r0, r4
 8014278:	b913      	cbnz	r3, 8014280 <uxr_serialize_AGENT_Representation+0x40>
 801427a:	4640      	mov	r0, r8
 801427c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014280:	68f9      	ldr	r1, [r7, #12]
 8014282:	4628      	mov	r0, r5
 8014284:	f7f7 f99e 	bl	800b5c4 <ucdr_serialize_uint32_t>
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	b303      	cbz	r3, 80142ce <uxr_serialize_AGENT_Representation+0x8e>
 801428c:	b1d0      	cbz	r0, 80142c4 <uxr_serialize_AGENT_Representation+0x84>
 801428e:	463e      	mov	r6, r7
 8014290:	f04f 0900 	mov.w	r9, #0
 8014294:	e001      	b.n	801429a <uxr_serialize_AGENT_Representation+0x5a>
 8014296:	3608      	adds	r6, #8
 8014298:	b1a4      	cbz	r4, 80142c4 <uxr_serialize_AGENT_Representation+0x84>
 801429a:	6931      	ldr	r1, [r6, #16]
 801429c:	4628      	mov	r0, r5
 801429e:	f004 f9ff 	bl	80186a0 <ucdr_serialize_string>
 80142a2:	6971      	ldr	r1, [r6, #20]
 80142a4:	4604      	mov	r4, r0
 80142a6:	4628      	mov	r0, r5
 80142a8:	f004 f9fa 	bl	80186a0 <ucdr_serialize_string>
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	f109 0901 	add.w	r9, r9, #1
 80142b2:	4004      	ands	r4, r0
 80142b4:	4599      	cmp	r9, r3
 80142b6:	b2e4      	uxtb	r4, r4
 80142b8:	d3ed      	bcc.n	8014296 <uxr_serialize_AGENT_Representation+0x56>
 80142ba:	ea08 0804 	and.w	r8, r8, r4
 80142be:	4640      	mov	r0, r8
 80142c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80142c4:	f04f 0800 	mov.w	r8, #0
 80142c8:	4640      	mov	r0, r8
 80142ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80142ce:	ea08 0800 	and.w	r8, r8, r0
 80142d2:	e7d2      	b.n	801427a <uxr_serialize_AGENT_Representation+0x3a>

080142d4 <uxr_serialize_DATAWRITER_Representation>:
 80142d4:	b570      	push	{r4, r5, r6, lr}
 80142d6:	460d      	mov	r5, r1
 80142d8:	7809      	ldrb	r1, [r1, #0]
 80142da:	4606      	mov	r6, r0
 80142dc:	f7f6 ff5c 	bl	800b198 <ucdr_serialize_uint8_t>
 80142e0:	4604      	mov	r4, r0
 80142e2:	b130      	cbz	r0, 80142f2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80142e4:	782b      	ldrb	r3, [r5, #0]
 80142e6:	2b02      	cmp	r3, #2
 80142e8:	d00c      	beq.n	8014304 <uxr_serialize_DATAWRITER_Representation+0x30>
 80142ea:	2b03      	cmp	r3, #3
 80142ec:	d010      	beq.n	8014310 <uxr_serialize_DATAWRITER_Representation+0x3c>
 80142ee:	2b01      	cmp	r3, #1
 80142f0:	d008      	beq.n	8014304 <uxr_serialize_DATAWRITER_Representation+0x30>
 80142f2:	2202      	movs	r2, #2
 80142f4:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80142f8:	4630      	mov	r0, r6
 80142fa:	f7fc ff0d 	bl	8011118 <ucdr_serialize_array_uint8_t>
 80142fe:	4020      	ands	r0, r4
 8014300:	b2c0      	uxtb	r0, r0
 8014302:	bd70      	pop	{r4, r5, r6, pc}
 8014304:	6869      	ldr	r1, [r5, #4]
 8014306:	4630      	mov	r0, r6
 8014308:	f004 f9ca 	bl	80186a0 <ucdr_serialize_string>
 801430c:	4604      	mov	r4, r0
 801430e:	e7f0      	b.n	80142f2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8014310:	4629      	mov	r1, r5
 8014312:	4630      	mov	r0, r6
 8014314:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8014318:	3104      	adds	r1, #4
 801431a:	f7fd f89b 	bl	8011454 <ucdr_serialize_sequence_uint8_t>
 801431e:	4604      	mov	r4, r0
 8014320:	e7e7      	b.n	80142f2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8014322:	bf00      	nop

08014324 <uxr_serialize_ObjectVariant.part.0>:
 8014324:	b570      	push	{r4, r5, r6, lr}
 8014326:	780b      	ldrb	r3, [r1, #0]
 8014328:	3b01      	subs	r3, #1
 801432a:	460c      	mov	r4, r1
 801432c:	4605      	mov	r5, r0
 801432e:	2b0d      	cmp	r3, #13
 8014330:	d854      	bhi.n	80143dc <uxr_serialize_ObjectVariant.part.0+0xb8>
 8014332:	e8df f003 	tbb	[pc, r3]
 8014336:	0730      	.short	0x0730
 8014338:	07071b1b 	.word	0x07071b1b
 801433c:	0c530707 	.word	0x0c530707
 8014340:	494e0c0c 	.word	0x494e0c0c
 8014344:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014348:	3104      	adds	r1, #4
 801434a:	f7ff bfc3 	b.w	80142d4 <uxr_serialize_DATAWRITER_Representation>
 801434e:	7909      	ldrb	r1, [r1, #4]
 8014350:	f7f6 ff22 	bl	800b198 <ucdr_serialize_uint8_t>
 8014354:	b1e8      	cbz	r0, 8014392 <uxr_serialize_ObjectVariant.part.0+0x6e>
 8014356:	7923      	ldrb	r3, [r4, #4]
 8014358:	2b01      	cmp	r3, #1
 801435a:	d001      	beq.n	8014360 <uxr_serialize_ObjectVariant.part.0+0x3c>
 801435c:	2b02      	cmp	r3, #2
 801435e:	d13d      	bne.n	80143dc <uxr_serialize_ObjectVariant.part.0+0xb8>
 8014360:	68a1      	ldr	r1, [r4, #8]
 8014362:	4628      	mov	r0, r5
 8014364:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014368:	f004 b99a 	b.w	80186a0 <ucdr_serialize_string>
 801436c:	7909      	ldrb	r1, [r1, #4]
 801436e:	f7f6 ff13 	bl	800b198 <ucdr_serialize_uint8_t>
 8014372:	4606      	mov	r6, r0
 8014374:	b120      	cbz	r0, 8014380 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8014376:	7923      	ldrb	r3, [r4, #4]
 8014378:	2b02      	cmp	r3, #2
 801437a:	d039      	beq.n	80143f0 <uxr_serialize_ObjectVariant.part.0+0xcc>
 801437c:	2b03      	cmp	r3, #3
 801437e:	d02f      	beq.n	80143e0 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8014380:	2202      	movs	r2, #2
 8014382:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8014386:	4628      	mov	r0, r5
 8014388:	f7fc fec6 	bl	8011118 <ucdr_serialize_array_uint8_t>
 801438c:	4030      	ands	r0, r6
 801438e:	b2c0      	uxtb	r0, r0
 8014390:	bd70      	pop	{r4, r5, r6, pc}
 8014392:	2000      	movs	r0, #0
 8014394:	bd70      	pop	{r4, r5, r6, pc}
 8014396:	7909      	ldrb	r1, [r1, #4]
 8014398:	f7f6 fefe 	bl	800b198 <ucdr_serialize_uint8_t>
 801439c:	4606      	mov	r6, r0
 801439e:	b158      	cbz	r0, 80143b8 <uxr_serialize_ObjectVariant.part.0+0x94>
 80143a0:	7923      	ldrb	r3, [r4, #4]
 80143a2:	2b02      	cmp	r3, #2
 80143a4:	d003      	beq.n	80143ae <uxr_serialize_ObjectVariant.part.0+0x8a>
 80143a6:	2b03      	cmp	r3, #3
 80143a8:	d028      	beq.n	80143fc <uxr_serialize_ObjectVariant.part.0+0xd8>
 80143aa:	2b01      	cmp	r3, #1
 80143ac:	d104      	bne.n	80143b8 <uxr_serialize_ObjectVariant.part.0+0x94>
 80143ae:	68a1      	ldr	r1, [r4, #8]
 80143b0:	4628      	mov	r0, r5
 80143b2:	f004 f975 	bl	80186a0 <ucdr_serialize_string>
 80143b6:	4606      	mov	r6, r0
 80143b8:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 80143bc:	4628      	mov	r0, r5
 80143be:	f7f7 fc27 	bl	800bc10 <ucdr_serialize_int16_t>
 80143c2:	4030      	ands	r0, r6
 80143c4:	b2c0      	uxtb	r0, r0
 80143c6:	bd70      	pop	{r4, r5, r6, pc}
 80143c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80143cc:	3104      	adds	r1, #4
 80143ce:	f7ff be7b 	b.w	80140c8 <uxr_serialize_CLIENT_Representation>
 80143d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80143d6:	3104      	adds	r1, #4
 80143d8:	f7ff bf32 	b.w	8014240 <uxr_serialize_AGENT_Representation>
 80143dc:	2001      	movs	r0, #1
 80143de:	bd70      	pop	{r4, r5, r6, pc}
 80143e0:	68a2      	ldr	r2, [r4, #8]
 80143e2:	f104 010c 	add.w	r1, r4, #12
 80143e6:	4628      	mov	r0, r5
 80143e8:	f7fd f834 	bl	8011454 <ucdr_serialize_sequence_uint8_t>
 80143ec:	4606      	mov	r6, r0
 80143ee:	e7c7      	b.n	8014380 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80143f0:	68a1      	ldr	r1, [r4, #8]
 80143f2:	4628      	mov	r0, r5
 80143f4:	f004 f954 	bl	80186a0 <ucdr_serialize_string>
 80143f8:	4606      	mov	r6, r0
 80143fa:	e7c1      	b.n	8014380 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80143fc:	68a2      	ldr	r2, [r4, #8]
 80143fe:	f104 010c 	add.w	r1, r4, #12
 8014402:	4628      	mov	r0, r5
 8014404:	f7fd f826 	bl	8011454 <ucdr_serialize_sequence_uint8_t>
 8014408:	4606      	mov	r6, r0
 801440a:	e7d5      	b.n	80143b8 <uxr_serialize_ObjectVariant.part.0+0x94>

0801440c <uxr_deserialize_DATAWRITER_Representation>:
 801440c:	b570      	push	{r4, r5, r6, lr}
 801440e:	4606      	mov	r6, r0
 8014410:	460d      	mov	r5, r1
 8014412:	f7f6 fed7 	bl	800b1c4 <ucdr_deserialize_uint8_t>
 8014416:	4604      	mov	r4, r0
 8014418:	b130      	cbz	r0, 8014428 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801441a:	782b      	ldrb	r3, [r5, #0]
 801441c:	2b02      	cmp	r3, #2
 801441e:	d00c      	beq.n	801443a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8014420:	2b03      	cmp	r3, #3
 8014422:	d012      	beq.n	801444a <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8014424:	2b01      	cmp	r3, #1
 8014426:	d008      	beq.n	801443a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8014428:	2202      	movs	r2, #2
 801442a:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801442e:	4630      	mov	r0, r6
 8014430:	f7fc fed6 	bl	80111e0 <ucdr_deserialize_array_uint8_t>
 8014434:	4020      	ands	r0, r4
 8014436:	b2c0      	uxtb	r0, r0
 8014438:	bd70      	pop	{r4, r5, r6, pc}
 801443a:	6869      	ldr	r1, [r5, #4]
 801443c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014440:	4630      	mov	r0, r6
 8014442:	f004 f93d 	bl	80186c0 <ucdr_deserialize_string>
 8014446:	4604      	mov	r4, r0
 8014448:	e7ee      	b.n	8014428 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801444a:	1d2b      	adds	r3, r5, #4
 801444c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014450:	f105 0108 	add.w	r1, r5, #8
 8014454:	4630      	mov	r0, r6
 8014456:	f7fd f80f 	bl	8011478 <ucdr_deserialize_sequence_uint8_t>
 801445a:	4604      	mov	r4, r0
 801445c:	e7e4      	b.n	8014428 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801445e:	bf00      	nop

08014460 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8014460:	b570      	push	{r4, r5, r6, lr}
 8014462:	460d      	mov	r5, r1
 8014464:	7809      	ldrb	r1, [r1, #0]
 8014466:	4606      	mov	r6, r0
 8014468:	f7f6 fe68 	bl	800b13c <ucdr_serialize_bool>
 801446c:	782b      	ldrb	r3, [r5, #0]
 801446e:	4604      	mov	r4, r0
 8014470:	b94b      	cbnz	r3, 8014486 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8014472:	7a29      	ldrb	r1, [r5, #8]
 8014474:	4630      	mov	r0, r6
 8014476:	f7f6 fe61 	bl	800b13c <ucdr_serialize_bool>
 801447a:	7a2b      	ldrb	r3, [r5, #8]
 801447c:	4004      	ands	r4, r0
 801447e:	b2e4      	uxtb	r4, r4
 8014480:	b943      	cbnz	r3, 8014494 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8014482:	4620      	mov	r0, r4
 8014484:	bd70      	pop	{r4, r5, r6, pc}
 8014486:	6869      	ldr	r1, [r5, #4]
 8014488:	4630      	mov	r0, r6
 801448a:	f004 f909 	bl	80186a0 <ucdr_serialize_string>
 801448e:	4004      	ands	r4, r0
 8014490:	b2e4      	uxtb	r4, r4
 8014492:	e7ee      	b.n	8014472 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8014494:	68e9      	ldr	r1, [r5, #12]
 8014496:	4630      	mov	r0, r6
 8014498:	f004 f902 	bl	80186a0 <ucdr_serialize_string>
 801449c:	4004      	ands	r4, r0
 801449e:	4620      	mov	r0, r4
 80144a0:	bd70      	pop	{r4, r5, r6, pc}
 80144a2:	bf00      	nop

080144a4 <uxr_serialize_OBJK_Topic_Binary>:
 80144a4:	b570      	push	{r4, r5, r6, lr}
 80144a6:	460d      	mov	r5, r1
 80144a8:	6809      	ldr	r1, [r1, #0]
 80144aa:	4606      	mov	r6, r0
 80144ac:	f004 f8f8 	bl	80186a0 <ucdr_serialize_string>
 80144b0:	7929      	ldrb	r1, [r5, #4]
 80144b2:	4604      	mov	r4, r0
 80144b4:	4630      	mov	r0, r6
 80144b6:	f7f6 fe41 	bl	800b13c <ucdr_serialize_bool>
 80144ba:	792b      	ldrb	r3, [r5, #4]
 80144bc:	4004      	ands	r4, r0
 80144be:	b2e4      	uxtb	r4, r4
 80144c0:	b943      	cbnz	r3, 80144d4 <uxr_serialize_OBJK_Topic_Binary+0x30>
 80144c2:	7b29      	ldrb	r1, [r5, #12]
 80144c4:	4630      	mov	r0, r6
 80144c6:	f7f6 fe39 	bl	800b13c <ucdr_serialize_bool>
 80144ca:	7b2b      	ldrb	r3, [r5, #12]
 80144cc:	4004      	ands	r4, r0
 80144ce:	b93b      	cbnz	r3, 80144e0 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 80144d0:	4620      	mov	r0, r4
 80144d2:	bd70      	pop	{r4, r5, r6, pc}
 80144d4:	68a9      	ldr	r1, [r5, #8]
 80144d6:	4630      	mov	r0, r6
 80144d8:	f004 f8e2 	bl	80186a0 <ucdr_serialize_string>
 80144dc:	4004      	ands	r4, r0
 80144de:	e7f0      	b.n	80144c2 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 80144e0:	6929      	ldr	r1, [r5, #16]
 80144e2:	4630      	mov	r0, r6
 80144e4:	f004 f8dc 	bl	80186a0 <ucdr_serialize_string>
 80144e8:	4004      	ands	r4, r0
 80144ea:	b2e4      	uxtb	r4, r4
 80144ec:	4620      	mov	r0, r4
 80144ee:	bd70      	pop	{r4, r5, r6, pc}

080144f0 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 80144f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144f4:	460c      	mov	r4, r1
 80144f6:	7809      	ldrb	r1, [r1, #0]
 80144f8:	4606      	mov	r6, r0
 80144fa:	f7f6 fe1f 	bl	800b13c <ucdr_serialize_bool>
 80144fe:	7823      	ldrb	r3, [r4, #0]
 8014500:	4605      	mov	r5, r0
 8014502:	b96b      	cbnz	r3, 8014520 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8014504:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8014508:	4630      	mov	r0, r6
 801450a:	f7f6 fe17 	bl	800b13c <ucdr_serialize_bool>
 801450e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8014512:	4005      	ands	r5, r0
 8014514:	b2ed      	uxtb	r5, r5
 8014516:	2b00      	cmp	r3, #0
 8014518:	d169      	bne.n	80145ee <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801451a:	4628      	mov	r0, r5
 801451c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014520:	6861      	ldr	r1, [r4, #4]
 8014522:	4630      	mov	r0, r6
 8014524:	f7f7 f84e 	bl	800b5c4 <ucdr_serialize_uint32_t>
 8014528:	6863      	ldr	r3, [r4, #4]
 801452a:	2b00      	cmp	r3, #0
 801452c:	d06b      	beq.n	8014606 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 801452e:	2800      	cmp	r0, #0
 8014530:	d067      	beq.n	8014602 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014532:	68a1      	ldr	r1, [r4, #8]
 8014534:	4630      	mov	r0, r6
 8014536:	f004 f8b3 	bl	80186a0 <ucdr_serialize_string>
 801453a:	6863      	ldr	r3, [r4, #4]
 801453c:	2b01      	cmp	r3, #1
 801453e:	d953      	bls.n	80145e8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014540:	2800      	cmp	r0, #0
 8014542:	d05e      	beq.n	8014602 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014544:	68e1      	ldr	r1, [r4, #12]
 8014546:	4630      	mov	r0, r6
 8014548:	f004 f8aa 	bl	80186a0 <ucdr_serialize_string>
 801454c:	6863      	ldr	r3, [r4, #4]
 801454e:	2b02      	cmp	r3, #2
 8014550:	d94a      	bls.n	80145e8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014552:	2800      	cmp	r0, #0
 8014554:	d055      	beq.n	8014602 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014556:	6921      	ldr	r1, [r4, #16]
 8014558:	4630      	mov	r0, r6
 801455a:	f004 f8a1 	bl	80186a0 <ucdr_serialize_string>
 801455e:	6863      	ldr	r3, [r4, #4]
 8014560:	2b03      	cmp	r3, #3
 8014562:	d941      	bls.n	80145e8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014564:	2800      	cmp	r0, #0
 8014566:	d04c      	beq.n	8014602 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014568:	6961      	ldr	r1, [r4, #20]
 801456a:	4630      	mov	r0, r6
 801456c:	f004 f898 	bl	80186a0 <ucdr_serialize_string>
 8014570:	6863      	ldr	r3, [r4, #4]
 8014572:	2b04      	cmp	r3, #4
 8014574:	d938      	bls.n	80145e8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014576:	2800      	cmp	r0, #0
 8014578:	d043      	beq.n	8014602 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801457a:	69a1      	ldr	r1, [r4, #24]
 801457c:	4630      	mov	r0, r6
 801457e:	f004 f88f 	bl	80186a0 <ucdr_serialize_string>
 8014582:	6863      	ldr	r3, [r4, #4]
 8014584:	2b05      	cmp	r3, #5
 8014586:	d92f      	bls.n	80145e8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014588:	2800      	cmp	r0, #0
 801458a:	d03a      	beq.n	8014602 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801458c:	69e1      	ldr	r1, [r4, #28]
 801458e:	4630      	mov	r0, r6
 8014590:	f004 f886 	bl	80186a0 <ucdr_serialize_string>
 8014594:	6863      	ldr	r3, [r4, #4]
 8014596:	2b06      	cmp	r3, #6
 8014598:	d926      	bls.n	80145e8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801459a:	b390      	cbz	r0, 8014602 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801459c:	6a21      	ldr	r1, [r4, #32]
 801459e:	4630      	mov	r0, r6
 80145a0:	f004 f87e 	bl	80186a0 <ucdr_serialize_string>
 80145a4:	6863      	ldr	r3, [r4, #4]
 80145a6:	2b07      	cmp	r3, #7
 80145a8:	d91e      	bls.n	80145e8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80145aa:	b350      	cbz	r0, 8014602 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80145ac:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80145ae:	4630      	mov	r0, r6
 80145b0:	f004 f876 	bl	80186a0 <ucdr_serialize_string>
 80145b4:	6863      	ldr	r3, [r4, #4]
 80145b6:	2b08      	cmp	r3, #8
 80145b8:	d916      	bls.n	80145e8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80145ba:	b310      	cbz	r0, 8014602 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80145bc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80145be:	4630      	mov	r0, r6
 80145c0:	f004 f86e 	bl	80186a0 <ucdr_serialize_string>
 80145c4:	6863      	ldr	r3, [r4, #4]
 80145c6:	2b09      	cmp	r3, #9
 80145c8:	d90e      	bls.n	80145e8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80145ca:	b1d0      	cbz	r0, 8014602 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80145cc:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 80145d0:	2709      	movs	r7, #9
 80145d2:	e000      	b.n	80145d6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 80145d4:	b1a8      	cbz	r0, 8014602 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80145d6:	f858 1b04 	ldr.w	r1, [r8], #4
 80145da:	4630      	mov	r0, r6
 80145dc:	f004 f860 	bl	80186a0 <ucdr_serialize_string>
 80145e0:	6862      	ldr	r2, [r4, #4]
 80145e2:	3701      	adds	r7, #1
 80145e4:	4297      	cmp	r7, r2
 80145e6:	d3f5      	bcc.n	80145d4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 80145e8:	4005      	ands	r5, r0
 80145ea:	b2ed      	uxtb	r5, r5
 80145ec:	e78a      	b.n	8014504 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80145ee:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80145f0:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80145f4:	4630      	mov	r0, r6
 80145f6:	f7fc ff2d 	bl	8011454 <ucdr_serialize_sequence_uint8_t>
 80145fa:	4005      	ands	r5, r0
 80145fc:	4628      	mov	r0, r5
 80145fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014602:	2500      	movs	r5, #0
 8014604:	e77e      	b.n	8014504 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8014606:	4028      	ands	r0, r5
 8014608:	b2c5      	uxtb	r5, r0
 801460a:	e77b      	b.n	8014504 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0801460c <uxr_serialize_OBJK_Publisher_Binary>:
 801460c:	b570      	push	{r4, r5, r6, lr}
 801460e:	460d      	mov	r5, r1
 8014610:	7809      	ldrb	r1, [r1, #0]
 8014612:	4606      	mov	r6, r0
 8014614:	f7f6 fd92 	bl	800b13c <ucdr_serialize_bool>
 8014618:	782b      	ldrb	r3, [r5, #0]
 801461a:	4604      	mov	r4, r0
 801461c:	b94b      	cbnz	r3, 8014632 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 801461e:	7a29      	ldrb	r1, [r5, #8]
 8014620:	4630      	mov	r0, r6
 8014622:	f7f6 fd8b 	bl	800b13c <ucdr_serialize_bool>
 8014626:	7a2b      	ldrb	r3, [r5, #8]
 8014628:	4004      	ands	r4, r0
 801462a:	b2e4      	uxtb	r4, r4
 801462c:	b943      	cbnz	r3, 8014640 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 801462e:	4620      	mov	r0, r4
 8014630:	bd70      	pop	{r4, r5, r6, pc}
 8014632:	6869      	ldr	r1, [r5, #4]
 8014634:	4630      	mov	r0, r6
 8014636:	f004 f833 	bl	80186a0 <ucdr_serialize_string>
 801463a:	4004      	ands	r4, r0
 801463c:	b2e4      	uxtb	r4, r4
 801463e:	e7ee      	b.n	801461e <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8014640:	f105 010c 	add.w	r1, r5, #12
 8014644:	4630      	mov	r0, r6
 8014646:	f7ff ff53 	bl	80144f0 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801464a:	4004      	ands	r4, r0
 801464c:	4620      	mov	r0, r4
 801464e:	bd70      	pop	{r4, r5, r6, pc}

08014650 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8014650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014654:	460c      	mov	r4, r1
 8014656:	7809      	ldrb	r1, [r1, #0]
 8014658:	4606      	mov	r6, r0
 801465a:	f7f6 fd6f 	bl	800b13c <ucdr_serialize_bool>
 801465e:	7823      	ldrb	r3, [r4, #0]
 8014660:	4605      	mov	r5, r0
 8014662:	b96b      	cbnz	r3, 8014680 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8014664:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8014668:	4630      	mov	r0, r6
 801466a:	f7f6 fd67 	bl	800b13c <ucdr_serialize_bool>
 801466e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8014672:	4005      	ands	r5, r0
 8014674:	b2ed      	uxtb	r5, r5
 8014676:	2b00      	cmp	r3, #0
 8014678:	d169      	bne.n	801474e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 801467a:	4628      	mov	r0, r5
 801467c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014680:	6861      	ldr	r1, [r4, #4]
 8014682:	4630      	mov	r0, r6
 8014684:	f7f6 ff9e 	bl	800b5c4 <ucdr_serialize_uint32_t>
 8014688:	6863      	ldr	r3, [r4, #4]
 801468a:	2b00      	cmp	r3, #0
 801468c:	d06b      	beq.n	8014766 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 801468e:	2800      	cmp	r0, #0
 8014690:	d067      	beq.n	8014762 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014692:	68a1      	ldr	r1, [r4, #8]
 8014694:	4630      	mov	r0, r6
 8014696:	f004 f803 	bl	80186a0 <ucdr_serialize_string>
 801469a:	6863      	ldr	r3, [r4, #4]
 801469c:	2b01      	cmp	r3, #1
 801469e:	d953      	bls.n	8014748 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80146a0:	2800      	cmp	r0, #0
 80146a2:	d05e      	beq.n	8014762 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80146a4:	68e1      	ldr	r1, [r4, #12]
 80146a6:	4630      	mov	r0, r6
 80146a8:	f003 fffa 	bl	80186a0 <ucdr_serialize_string>
 80146ac:	6863      	ldr	r3, [r4, #4]
 80146ae:	2b02      	cmp	r3, #2
 80146b0:	d94a      	bls.n	8014748 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80146b2:	2800      	cmp	r0, #0
 80146b4:	d055      	beq.n	8014762 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80146b6:	6921      	ldr	r1, [r4, #16]
 80146b8:	4630      	mov	r0, r6
 80146ba:	f003 fff1 	bl	80186a0 <ucdr_serialize_string>
 80146be:	6863      	ldr	r3, [r4, #4]
 80146c0:	2b03      	cmp	r3, #3
 80146c2:	d941      	bls.n	8014748 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80146c4:	2800      	cmp	r0, #0
 80146c6:	d04c      	beq.n	8014762 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80146c8:	6961      	ldr	r1, [r4, #20]
 80146ca:	4630      	mov	r0, r6
 80146cc:	f003 ffe8 	bl	80186a0 <ucdr_serialize_string>
 80146d0:	6863      	ldr	r3, [r4, #4]
 80146d2:	2b04      	cmp	r3, #4
 80146d4:	d938      	bls.n	8014748 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80146d6:	2800      	cmp	r0, #0
 80146d8:	d043      	beq.n	8014762 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80146da:	69a1      	ldr	r1, [r4, #24]
 80146dc:	4630      	mov	r0, r6
 80146de:	f003 ffdf 	bl	80186a0 <ucdr_serialize_string>
 80146e2:	6863      	ldr	r3, [r4, #4]
 80146e4:	2b05      	cmp	r3, #5
 80146e6:	d92f      	bls.n	8014748 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80146e8:	2800      	cmp	r0, #0
 80146ea:	d03a      	beq.n	8014762 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80146ec:	69e1      	ldr	r1, [r4, #28]
 80146ee:	4630      	mov	r0, r6
 80146f0:	f003 ffd6 	bl	80186a0 <ucdr_serialize_string>
 80146f4:	6863      	ldr	r3, [r4, #4]
 80146f6:	2b06      	cmp	r3, #6
 80146f8:	d926      	bls.n	8014748 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80146fa:	b390      	cbz	r0, 8014762 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80146fc:	6a21      	ldr	r1, [r4, #32]
 80146fe:	4630      	mov	r0, r6
 8014700:	f003 ffce 	bl	80186a0 <ucdr_serialize_string>
 8014704:	6863      	ldr	r3, [r4, #4]
 8014706:	2b07      	cmp	r3, #7
 8014708:	d91e      	bls.n	8014748 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801470a:	b350      	cbz	r0, 8014762 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801470c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801470e:	4630      	mov	r0, r6
 8014710:	f003 ffc6 	bl	80186a0 <ucdr_serialize_string>
 8014714:	6863      	ldr	r3, [r4, #4]
 8014716:	2b08      	cmp	r3, #8
 8014718:	d916      	bls.n	8014748 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801471a:	b310      	cbz	r0, 8014762 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801471c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801471e:	4630      	mov	r0, r6
 8014720:	f003 ffbe 	bl	80186a0 <ucdr_serialize_string>
 8014724:	6863      	ldr	r3, [r4, #4]
 8014726:	2b09      	cmp	r3, #9
 8014728:	d90e      	bls.n	8014748 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801472a:	b1d0      	cbz	r0, 8014762 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801472c:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8014730:	2709      	movs	r7, #9
 8014732:	e000      	b.n	8014736 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8014734:	b1a8      	cbz	r0, 8014762 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014736:	f858 1b04 	ldr.w	r1, [r8], #4
 801473a:	4630      	mov	r0, r6
 801473c:	f003 ffb0 	bl	80186a0 <ucdr_serialize_string>
 8014740:	6862      	ldr	r2, [r4, #4]
 8014742:	3701      	adds	r7, #1
 8014744:	4297      	cmp	r7, r2
 8014746:	d3f5      	bcc.n	8014734 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8014748:	4005      	ands	r5, r0
 801474a:	b2ed      	uxtb	r5, r5
 801474c:	e78a      	b.n	8014664 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801474e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8014750:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8014754:	4630      	mov	r0, r6
 8014756:	f7fc fe7d 	bl	8011454 <ucdr_serialize_sequence_uint8_t>
 801475a:	4005      	ands	r5, r0
 801475c:	4628      	mov	r0, r5
 801475e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014762:	2500      	movs	r5, #0
 8014764:	e77e      	b.n	8014664 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8014766:	4028      	ands	r0, r5
 8014768:	b2c5      	uxtb	r5, r0
 801476a:	e77b      	b.n	8014664 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0801476c <uxr_serialize_OBJK_Subscriber_Binary>:
 801476c:	b570      	push	{r4, r5, r6, lr}
 801476e:	460d      	mov	r5, r1
 8014770:	7809      	ldrb	r1, [r1, #0]
 8014772:	4606      	mov	r6, r0
 8014774:	f7f6 fce2 	bl	800b13c <ucdr_serialize_bool>
 8014778:	782b      	ldrb	r3, [r5, #0]
 801477a:	4604      	mov	r4, r0
 801477c:	b94b      	cbnz	r3, 8014792 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 801477e:	7a29      	ldrb	r1, [r5, #8]
 8014780:	4630      	mov	r0, r6
 8014782:	f7f6 fcdb 	bl	800b13c <ucdr_serialize_bool>
 8014786:	7a2b      	ldrb	r3, [r5, #8]
 8014788:	4004      	ands	r4, r0
 801478a:	b2e4      	uxtb	r4, r4
 801478c:	b943      	cbnz	r3, 80147a0 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 801478e:	4620      	mov	r0, r4
 8014790:	bd70      	pop	{r4, r5, r6, pc}
 8014792:	6869      	ldr	r1, [r5, #4]
 8014794:	4630      	mov	r0, r6
 8014796:	f003 ff83 	bl	80186a0 <ucdr_serialize_string>
 801479a:	4004      	ands	r4, r0
 801479c:	b2e4      	uxtb	r4, r4
 801479e:	e7ee      	b.n	801477e <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 80147a0:	f105 010c 	add.w	r1, r5, #12
 80147a4:	4630      	mov	r0, r6
 80147a6:	f7ff ff53 	bl	8014650 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 80147aa:	4004      	ands	r4, r0
 80147ac:	4620      	mov	r0, r4
 80147ae:	bd70      	pop	{r4, r5, r6, pc}

080147b0 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 80147b0:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 80147b4:	4688      	mov	r8, r1
 80147b6:	8809      	ldrh	r1, [r1, #0]
 80147b8:	4681      	mov	r9, r0
 80147ba:	f7f6 fd19 	bl	800b1f0 <ucdr_serialize_uint16_t>
 80147be:	f898 1002 	ldrb.w	r1, [r8, #2]
 80147c2:	4606      	mov	r6, r0
 80147c4:	4648      	mov	r0, r9
 80147c6:	f7f6 fcb9 	bl	800b13c <ucdr_serialize_bool>
 80147ca:	f898 3002 	ldrb.w	r3, [r8, #2]
 80147ce:	4006      	ands	r6, r0
 80147d0:	b2f5      	uxtb	r5, r6
 80147d2:	b9eb      	cbnz	r3, 8014810 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 80147d4:	f898 1006 	ldrb.w	r1, [r8, #6]
 80147d8:	4648      	mov	r0, r9
 80147da:	f7f6 fcaf 	bl	800b13c <ucdr_serialize_bool>
 80147de:	f898 3006 	ldrb.w	r3, [r8, #6]
 80147e2:	4005      	ands	r5, r0
 80147e4:	bb7b      	cbnz	r3, 8014846 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 80147e6:	f898 100c 	ldrb.w	r1, [r8, #12]
 80147ea:	4648      	mov	r0, r9
 80147ec:	f7f6 fca6 	bl	800b13c <ucdr_serialize_bool>
 80147f0:	f898 300c 	ldrb.w	r3, [r8, #12]
 80147f4:	4005      	ands	r5, r0
 80147f6:	b9f3      	cbnz	r3, 8014836 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 80147f8:	f898 1014 	ldrb.w	r1, [r8, #20]
 80147fc:	4648      	mov	r0, r9
 80147fe:	f7f6 fc9d 	bl	800b13c <ucdr_serialize_bool>
 8014802:	f898 3014 	ldrb.w	r3, [r8, #20]
 8014806:	4005      	ands	r5, r0
 8014808:	b94b      	cbnz	r3, 801481e <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801480a:	4628      	mov	r0, r5
 801480c:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8014810:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8014814:	4648      	mov	r0, r9
 8014816:	f7f6 fceb 	bl	800b1f0 <ucdr_serialize_uint16_t>
 801481a:	4005      	ands	r5, r0
 801481c:	e7da      	b.n	80147d4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 801481e:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8014822:	f108 011c 	add.w	r1, r8, #28
 8014826:	4648      	mov	r0, r9
 8014828:	f7fc fe14 	bl	8011454 <ucdr_serialize_sequence_uint8_t>
 801482c:	4028      	ands	r0, r5
 801482e:	b2c5      	uxtb	r5, r0
 8014830:	4628      	mov	r0, r5
 8014832:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8014836:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801483a:	4648      	mov	r0, r9
 801483c:	f7f6 fec2 	bl	800b5c4 <ucdr_serialize_uint32_t>
 8014840:	4028      	ands	r0, r5
 8014842:	b2c5      	uxtb	r5, r0
 8014844:	e7d8      	b.n	80147f8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8014846:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801484a:	4648      	mov	r0, r9
 801484c:	f7f6 feba 	bl	800b5c4 <ucdr_serialize_uint32_t>
 8014850:	4028      	ands	r0, r5
 8014852:	b2c5      	uxtb	r5, r0
 8014854:	e7c7      	b.n	80147e6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8014856:	bf00      	nop

08014858 <uxr_serialize_OBJK_DataReader_Binary>:
 8014858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801485a:	2202      	movs	r2, #2
 801485c:	460c      	mov	r4, r1
 801485e:	4606      	mov	r6, r0
 8014860:	f7fc fc5a 	bl	8011118 <ucdr_serialize_array_uint8_t>
 8014864:	78a1      	ldrb	r1, [r4, #2]
 8014866:	4605      	mov	r5, r0
 8014868:	4630      	mov	r0, r6
 801486a:	f7f6 fc67 	bl	800b13c <ucdr_serialize_bool>
 801486e:	78a3      	ldrb	r3, [r4, #2]
 8014870:	4005      	ands	r5, r0
 8014872:	b2ed      	uxtb	r5, r5
 8014874:	b90b      	cbnz	r3, 801487a <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8014876:	4628      	mov	r0, r5
 8014878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801487a:	f104 0108 	add.w	r1, r4, #8
 801487e:	4630      	mov	r0, r6
 8014880:	f7ff ff96 	bl	80147b0 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8014884:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014888:	4607      	mov	r7, r0
 801488a:	4630      	mov	r0, r6
 801488c:	f7f6 fc56 	bl	800b13c <ucdr_serialize_bool>
 8014890:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8014894:	4038      	ands	r0, r7
 8014896:	b2c7      	uxtb	r7, r0
 8014898:	b95b      	cbnz	r3, 80148b2 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 801489a:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 801489e:	4630      	mov	r0, r6
 80148a0:	f7f6 fc4c 	bl	800b13c <ucdr_serialize_bool>
 80148a4:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80148a8:	4007      	ands	r7, r0
 80148aa:	b94b      	cbnz	r3, 80148c0 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 80148ac:	403d      	ands	r5, r7
 80148ae:	4628      	mov	r0, r5
 80148b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80148b2:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 80148b6:	4630      	mov	r0, r6
 80148b8:	f7f7 f8da 	bl	800ba70 <ucdr_serialize_uint64_t>
 80148bc:	4007      	ands	r7, r0
 80148be:	e7ec      	b.n	801489a <uxr_serialize_OBJK_DataReader_Binary+0x42>
 80148c0:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80148c2:	4630      	mov	r0, r6
 80148c4:	f003 feec 	bl	80186a0 <ucdr_serialize_string>
 80148c8:	4007      	ands	r7, r0
 80148ca:	b2ff      	uxtb	r7, r7
 80148cc:	e7ee      	b.n	80148ac <uxr_serialize_OBJK_DataReader_Binary+0x54>
 80148ce:	bf00      	nop

080148d0 <uxr_serialize_OBJK_DataWriter_Binary>:
 80148d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148d2:	2202      	movs	r2, #2
 80148d4:	460d      	mov	r5, r1
 80148d6:	4606      	mov	r6, r0
 80148d8:	f7fc fc1e 	bl	8011118 <ucdr_serialize_array_uint8_t>
 80148dc:	78a9      	ldrb	r1, [r5, #2]
 80148de:	4604      	mov	r4, r0
 80148e0:	4630      	mov	r0, r6
 80148e2:	f7f6 fc2b 	bl	800b13c <ucdr_serialize_bool>
 80148e6:	78ab      	ldrb	r3, [r5, #2]
 80148e8:	4004      	ands	r4, r0
 80148ea:	b2e4      	uxtb	r4, r4
 80148ec:	b90b      	cbnz	r3, 80148f2 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 80148ee:	4620      	mov	r0, r4
 80148f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80148f2:	f105 0108 	add.w	r1, r5, #8
 80148f6:	4630      	mov	r0, r6
 80148f8:	f7ff ff5a 	bl	80147b0 <uxr_serialize_OBJK_Endpoint_QosBinary>
 80148fc:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8014900:	4607      	mov	r7, r0
 8014902:	4630      	mov	r0, r6
 8014904:	f7f6 fc1a 	bl	800b13c <ucdr_serialize_bool>
 8014908:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 801490c:	4038      	ands	r0, r7
 801490e:	b2c7      	uxtb	r7, r0
 8014910:	b913      	cbnz	r3, 8014918 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8014912:	403c      	ands	r4, r7
 8014914:	4620      	mov	r0, r4
 8014916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014918:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 801491c:	4630      	mov	r0, r6
 801491e:	f7f7 f8a7 	bl	800ba70 <ucdr_serialize_uint64_t>
 8014922:	4007      	ands	r7, r0
 8014924:	e7f5      	b.n	8014912 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8014926:	bf00      	nop

08014928 <uxr_deserialize_ObjectVariant>:
 8014928:	b570      	push	{r4, r5, r6, lr}
 801492a:	4605      	mov	r5, r0
 801492c:	460e      	mov	r6, r1
 801492e:	f7f6 fc49 	bl	800b1c4 <ucdr_deserialize_uint8_t>
 8014932:	b168      	cbz	r0, 8014950 <uxr_deserialize_ObjectVariant+0x28>
 8014934:	7833      	ldrb	r3, [r6, #0]
 8014936:	3b01      	subs	r3, #1
 8014938:	4604      	mov	r4, r0
 801493a:	2b0d      	cmp	r3, #13
 801493c:	d809      	bhi.n	8014952 <uxr_deserialize_ObjectVariant+0x2a>
 801493e:	e8df f003 	tbb	[pc, r3]
 8014942:	0a41      	.short	0x0a41
 8014944:	0a0a2323 	.word	0x0a0a2323
 8014948:	10080a0a 	.word	0x10080a0a
 801494c:	565c1010 	.word	0x565c1010
 8014950:	2400      	movs	r4, #0
 8014952:	4620      	mov	r0, r4
 8014954:	bd70      	pop	{r4, r5, r6, pc}
 8014956:	1d31      	adds	r1, r6, #4
 8014958:	4628      	mov	r0, r5
 801495a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801495e:	f7ff bd55 	b.w	801440c <uxr_deserialize_DATAWRITER_Representation>
 8014962:	1d31      	adds	r1, r6, #4
 8014964:	4628      	mov	r0, r5
 8014966:	f7f6 fc2d 	bl	800b1c4 <ucdr_deserialize_uint8_t>
 801496a:	2800      	cmp	r0, #0
 801496c:	d0f0      	beq.n	8014950 <uxr_deserialize_ObjectVariant+0x28>
 801496e:	7933      	ldrb	r3, [r6, #4]
 8014970:	2b01      	cmp	r3, #1
 8014972:	d001      	beq.n	8014978 <uxr_deserialize_ObjectVariant+0x50>
 8014974:	2b02      	cmp	r3, #2
 8014976:	d1ec      	bne.n	8014952 <uxr_deserialize_ObjectVariant+0x2a>
 8014978:	68b1      	ldr	r1, [r6, #8]
 801497a:	4628      	mov	r0, r5
 801497c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014980:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014984:	f003 be9c 	b.w	80186c0 <ucdr_deserialize_string>
 8014988:	1d31      	adds	r1, r6, #4
 801498a:	4628      	mov	r0, r5
 801498c:	f7f6 fc1a 	bl	800b1c4 <ucdr_deserialize_uint8_t>
 8014990:	4604      	mov	r4, r0
 8014992:	b170      	cbz	r0, 80149b2 <uxr_deserialize_ObjectVariant+0x8a>
 8014994:	7933      	ldrb	r3, [r6, #4]
 8014996:	2b02      	cmp	r3, #2
 8014998:	d04c      	beq.n	8014a34 <uxr_deserialize_ObjectVariant+0x10c>
 801499a:	2b03      	cmp	r3, #3
 801499c:	d109      	bne.n	80149b2 <uxr_deserialize_ObjectVariant+0x8a>
 801499e:	f106 0308 	add.w	r3, r6, #8
 80149a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80149a6:	f106 010c 	add.w	r1, r6, #12
 80149aa:	4628      	mov	r0, r5
 80149ac:	f7fc fd64 	bl	8011478 <ucdr_deserialize_sequence_uint8_t>
 80149b0:	4604      	mov	r4, r0
 80149b2:	2202      	movs	r2, #2
 80149b4:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80149b8:	4628      	mov	r0, r5
 80149ba:	f7fc fc11 	bl	80111e0 <ucdr_deserialize_array_uint8_t>
 80149be:	4020      	ands	r0, r4
 80149c0:	b2c4      	uxtb	r4, r0
 80149c2:	e7c6      	b.n	8014952 <uxr_deserialize_ObjectVariant+0x2a>
 80149c4:	1d31      	adds	r1, r6, #4
 80149c6:	4628      	mov	r0, r5
 80149c8:	f7f6 fbfc 	bl	800b1c4 <ucdr_deserialize_uint8_t>
 80149cc:	4604      	mov	r4, r0
 80149ce:	b130      	cbz	r0, 80149de <uxr_deserialize_ObjectVariant+0xb6>
 80149d0:	7933      	ldrb	r3, [r6, #4]
 80149d2:	2b02      	cmp	r3, #2
 80149d4:	d036      	beq.n	8014a44 <uxr_deserialize_ObjectVariant+0x11c>
 80149d6:	2b03      	cmp	r3, #3
 80149d8:	d03c      	beq.n	8014a54 <uxr_deserialize_ObjectVariant+0x12c>
 80149da:	2b01      	cmp	r3, #1
 80149dc:	d032      	beq.n	8014a44 <uxr_deserialize_ObjectVariant+0x11c>
 80149de:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80149e2:	4628      	mov	r0, r5
 80149e4:	f7f7 f994 	bl	800bd10 <ucdr_deserialize_int16_t>
 80149e8:	4020      	ands	r0, r4
 80149ea:	b2c4      	uxtb	r4, r0
 80149ec:	e7b1      	b.n	8014952 <uxr_deserialize_ObjectVariant+0x2a>
 80149ee:	1d31      	adds	r1, r6, #4
 80149f0:	4628      	mov	r0, r5
 80149f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80149f6:	f7ff bbbf 	b.w	8014178 <uxr_deserialize_CLIENT_Representation>
 80149fa:	2204      	movs	r2, #4
 80149fc:	18b1      	adds	r1, r6, r2
 80149fe:	4628      	mov	r0, r5
 8014a00:	f7fc fbee 	bl	80111e0 <ucdr_deserialize_array_uint8_t>
 8014a04:	2202      	movs	r2, #2
 8014a06:	f106 0108 	add.w	r1, r6, #8
 8014a0a:	4604      	mov	r4, r0
 8014a0c:	4628      	mov	r0, r5
 8014a0e:	f7fc fbe7 	bl	80111e0 <ucdr_deserialize_array_uint8_t>
 8014a12:	2202      	movs	r2, #2
 8014a14:	4004      	ands	r4, r0
 8014a16:	f106 010a 	add.w	r1, r6, #10
 8014a1a:	4628      	mov	r0, r5
 8014a1c:	f7fc fbe0 	bl	80111e0 <ucdr_deserialize_array_uint8_t>
 8014a20:	b2e4      	uxtb	r4, r4
 8014a22:	4603      	mov	r3, r0
 8014a24:	f106 010c 	add.w	r1, r6, #12
 8014a28:	4628      	mov	r0, r5
 8014a2a:	401c      	ands	r4, r3
 8014a2c:	f7f6 fb9c 	bl	800b168 <ucdr_deserialize_bool>
 8014a30:	4004      	ands	r4, r0
 8014a32:	e78e      	b.n	8014952 <uxr_deserialize_ObjectVariant+0x2a>
 8014a34:	68b1      	ldr	r1, [r6, #8]
 8014a36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014a3a:	4628      	mov	r0, r5
 8014a3c:	f003 fe40 	bl	80186c0 <ucdr_deserialize_string>
 8014a40:	4604      	mov	r4, r0
 8014a42:	e7b6      	b.n	80149b2 <uxr_deserialize_ObjectVariant+0x8a>
 8014a44:	68b1      	ldr	r1, [r6, #8]
 8014a46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014a4a:	4628      	mov	r0, r5
 8014a4c:	f003 fe38 	bl	80186c0 <ucdr_deserialize_string>
 8014a50:	4604      	mov	r4, r0
 8014a52:	e7c4      	b.n	80149de <uxr_deserialize_ObjectVariant+0xb6>
 8014a54:	f106 0308 	add.w	r3, r6, #8
 8014a58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014a5c:	f106 010c 	add.w	r1, r6, #12
 8014a60:	4628      	mov	r0, r5
 8014a62:	f7fc fd09 	bl	8011478 <ucdr_deserialize_sequence_uint8_t>
 8014a66:	4604      	mov	r4, r0
 8014a68:	e7b9      	b.n	80149de <uxr_deserialize_ObjectVariant+0xb6>
 8014a6a:	bf00      	nop

08014a6c <uxr_deserialize_BaseObjectRequest>:
 8014a6c:	b570      	push	{r4, r5, r6, lr}
 8014a6e:	2202      	movs	r2, #2
 8014a70:	4605      	mov	r5, r0
 8014a72:	460e      	mov	r6, r1
 8014a74:	f7fc fbb4 	bl	80111e0 <ucdr_deserialize_array_uint8_t>
 8014a78:	2202      	movs	r2, #2
 8014a7a:	4604      	mov	r4, r0
 8014a7c:	18b1      	adds	r1, r6, r2
 8014a7e:	4628      	mov	r0, r5
 8014a80:	f7fc fbae 	bl	80111e0 <ucdr_deserialize_array_uint8_t>
 8014a84:	4020      	ands	r0, r4
 8014a86:	b2c0      	uxtb	r0, r0
 8014a88:	bd70      	pop	{r4, r5, r6, pc}
 8014a8a:	bf00      	nop

08014a8c <uxr_serialize_ActivityInfoVariant>:
 8014a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a90:	460d      	mov	r5, r1
 8014a92:	7809      	ldrb	r1, [r1, #0]
 8014a94:	4607      	mov	r7, r0
 8014a96:	f7f6 fb7f 	bl	800b198 <ucdr_serialize_uint8_t>
 8014a9a:	4681      	mov	r9, r0
 8014a9c:	b138      	cbz	r0, 8014aae <uxr_serialize_ActivityInfoVariant+0x22>
 8014a9e:	782b      	ldrb	r3, [r5, #0]
 8014aa0:	2b06      	cmp	r3, #6
 8014aa2:	f000 8082 	beq.w	8014baa <uxr_serialize_ActivityInfoVariant+0x11e>
 8014aa6:	2b0d      	cmp	r3, #13
 8014aa8:	d016      	beq.n	8014ad8 <uxr_serialize_ActivityInfoVariant+0x4c>
 8014aaa:	2b05      	cmp	r3, #5
 8014aac:	d002      	beq.n	8014ab4 <uxr_serialize_ActivityInfoVariant+0x28>
 8014aae:	4648      	mov	r0, r9
 8014ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ab4:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8014ab8:	4638      	mov	r0, r7
 8014aba:	f7f7 f8a9 	bl	800bc10 <ucdr_serialize_int16_t>
 8014abe:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8014ac2:	4681      	mov	r9, r0
 8014ac4:	4638      	mov	r0, r7
 8014ac6:	f7f6 ffd3 	bl	800ba70 <ucdr_serialize_uint64_t>
 8014aca:	ea09 0000 	and.w	r0, r9, r0
 8014ace:	fa5f f980 	uxtb.w	r9, r0
 8014ad2:	4648      	mov	r0, r9
 8014ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ad8:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8014adc:	4638      	mov	r0, r7
 8014ade:	f7f7 f897 	bl	800bc10 <ucdr_serialize_int16_t>
 8014ae2:	68e9      	ldr	r1, [r5, #12]
 8014ae4:	4681      	mov	r9, r0
 8014ae6:	4638      	mov	r0, r7
 8014ae8:	f7f6 fd6c 	bl	800b5c4 <ucdr_serialize_uint32_t>
 8014aec:	68eb      	ldr	r3, [r5, #12]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d0eb      	beq.n	8014aca <uxr_serialize_ActivityInfoVariant+0x3e>
 8014af2:	b320      	cbz	r0, 8014b3e <uxr_serialize_ActivityInfoVariant+0xb2>
 8014af4:	f105 080c 	add.w	r8, r5, #12
 8014af8:	2600      	movs	r6, #0
 8014afa:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8014afe:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8014b02:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8014b06:	4638      	mov	r0, r7
 8014b08:	f7f6 fb46 	bl	800b198 <ucdr_serialize_uint8_t>
 8014b0c:	2800      	cmp	r0, #0
 8014b0e:	d053      	beq.n	8014bb8 <uxr_serialize_ActivityInfoVariant+0x12c>
 8014b10:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8014b14:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8014b18:	0074      	lsls	r4, r6, #1
 8014b1a:	00c9      	lsls	r1, r1, #3
 8014b1c:	2b03      	cmp	r3, #3
 8014b1e:	d854      	bhi.n	8014bca <uxr_serialize_ActivityInfoVariant+0x13e>
 8014b20:	e8df f003 	tbb	[pc, r3]
 8014b24:	02102132 	.word	0x02102132
 8014b28:	4441      	add	r1, r8
 8014b2a:	4638      	mov	r0, r7
 8014b2c:	6889      	ldr	r1, [r1, #8]
 8014b2e:	f003 fdb7 	bl	80186a0 <ucdr_serialize_string>
 8014b32:	68ea      	ldr	r2, [r5, #12]
 8014b34:	3601      	adds	r6, #1
 8014b36:	4296      	cmp	r6, r2
 8014b38:	d242      	bcs.n	8014bc0 <uxr_serialize_ActivityInfoVariant+0x134>
 8014b3a:	2800      	cmp	r0, #0
 8014b3c:	d1dd      	bne.n	8014afa <uxr_serialize_ActivityInfoVariant+0x6e>
 8014b3e:	f04f 0900 	mov.w	r9, #0
 8014b42:	e7b4      	b.n	8014aae <uxr_serialize_ActivityInfoVariant+0x22>
 8014b44:	3108      	adds	r1, #8
 8014b46:	4441      	add	r1, r8
 8014b48:	2210      	movs	r2, #16
 8014b4a:	4638      	mov	r0, r7
 8014b4c:	f7fc fae4 	bl	8011118 <ucdr_serialize_array_uint8_t>
 8014b50:	4434      	add	r4, r6
 8014b52:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8014b56:	4604      	mov	r4, r0
 8014b58:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8014b5a:	4638      	mov	r0, r7
 8014b5c:	f7f6 fd32 	bl	800b5c4 <ucdr_serialize_uint32_t>
 8014b60:	4020      	ands	r0, r4
 8014b62:	b2c0      	uxtb	r0, r0
 8014b64:	e7e5      	b.n	8014b32 <uxr_serialize_ActivityInfoVariant+0xa6>
 8014b66:	3108      	adds	r1, #8
 8014b68:	4441      	add	r1, r8
 8014b6a:	2204      	movs	r2, #4
 8014b6c:	4638      	mov	r0, r7
 8014b6e:	f7fc fad3 	bl	8011118 <ucdr_serialize_array_uint8_t>
 8014b72:	4434      	add	r4, r6
 8014b74:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8014b78:	4604      	mov	r4, r0
 8014b7a:	8b19      	ldrh	r1, [r3, #24]
 8014b7c:	4638      	mov	r0, r7
 8014b7e:	f7f6 fb37 	bl	800b1f0 <ucdr_serialize_uint16_t>
 8014b82:	4020      	ands	r0, r4
 8014b84:	b2c0      	uxtb	r0, r0
 8014b86:	e7d4      	b.n	8014b32 <uxr_serialize_ActivityInfoVariant+0xa6>
 8014b88:	3108      	adds	r1, #8
 8014b8a:	4441      	add	r1, r8
 8014b8c:	2202      	movs	r2, #2
 8014b8e:	4638      	mov	r0, r7
 8014b90:	f7fc fac2 	bl	8011118 <ucdr_serialize_array_uint8_t>
 8014b94:	4434      	add	r4, r6
 8014b96:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8014b9a:	4604      	mov	r4, r0
 8014b9c:	7d99      	ldrb	r1, [r3, #22]
 8014b9e:	4638      	mov	r0, r7
 8014ba0:	f7f6 fafa 	bl	800b198 <ucdr_serialize_uint8_t>
 8014ba4:	4020      	ands	r0, r4
 8014ba6:	b2c0      	uxtb	r0, r0
 8014ba8:	e7c3      	b.n	8014b32 <uxr_serialize_ActivityInfoVariant+0xa6>
 8014baa:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8014bae:	4638      	mov	r0, r7
 8014bb0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014bb4:	f7f7 b82c 	b.w	800bc10 <ucdr_serialize_int16_t>
 8014bb8:	68ea      	ldr	r2, [r5, #12]
 8014bba:	3601      	adds	r6, #1
 8014bbc:	42b2      	cmp	r2, r6
 8014bbe:	d8be      	bhi.n	8014b3e <uxr_serialize_ActivityInfoVariant+0xb2>
 8014bc0:	ea09 0900 	and.w	r9, r9, r0
 8014bc4:	fa5f f989 	uxtb.w	r9, r9
 8014bc8:	e771      	b.n	8014aae <uxr_serialize_ActivityInfoVariant+0x22>
 8014bca:	68eb      	ldr	r3, [r5, #12]
 8014bcc:	3601      	adds	r6, #1
 8014bce:	429e      	cmp	r6, r3
 8014bd0:	f10a 0a18 	add.w	sl, sl, #24
 8014bd4:	d395      	bcc.n	8014b02 <uxr_serialize_ActivityInfoVariant+0x76>
 8014bd6:	e76a      	b.n	8014aae <uxr_serialize_ActivityInfoVariant+0x22>

08014bd8 <uxr_deserialize_BaseObjectReply>:
 8014bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bdc:	2202      	movs	r2, #2
 8014bde:	4606      	mov	r6, r0
 8014be0:	460f      	mov	r7, r1
 8014be2:	f7fc fafd 	bl	80111e0 <ucdr_deserialize_array_uint8_t>
 8014be6:	2202      	movs	r2, #2
 8014be8:	18b9      	adds	r1, r7, r2
 8014bea:	4605      	mov	r5, r0
 8014bec:	4630      	mov	r0, r6
 8014bee:	f7fc faf7 	bl	80111e0 <ucdr_deserialize_array_uint8_t>
 8014bf2:	1d39      	adds	r1, r7, #4
 8014bf4:	4680      	mov	r8, r0
 8014bf6:	4630      	mov	r0, r6
 8014bf8:	f7f6 fae4 	bl	800b1c4 <ucdr_deserialize_uint8_t>
 8014bfc:	1d79      	adds	r1, r7, #5
 8014bfe:	4604      	mov	r4, r0
 8014c00:	4630      	mov	r0, r6
 8014c02:	f7f6 fadf 	bl	800b1c4 <ucdr_deserialize_uint8_t>
 8014c06:	ea05 0508 	and.w	r5, r5, r8
 8014c0a:	402c      	ands	r4, r5
 8014c0c:	4020      	ands	r0, r4
 8014c0e:	b2c0      	uxtb	r0, r0
 8014c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014c14 <uxr_serialize_ReadSpecification>:
 8014c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c18:	460e      	mov	r6, r1
 8014c1a:	7809      	ldrb	r1, [r1, #0]
 8014c1c:	4607      	mov	r7, r0
 8014c1e:	f7f6 fabb 	bl	800b198 <ucdr_serialize_uint8_t>
 8014c22:	7871      	ldrb	r1, [r6, #1]
 8014c24:	4604      	mov	r4, r0
 8014c26:	4638      	mov	r0, r7
 8014c28:	f7f6 fab6 	bl	800b198 <ucdr_serialize_uint8_t>
 8014c2c:	78b1      	ldrb	r1, [r6, #2]
 8014c2e:	4004      	ands	r4, r0
 8014c30:	4638      	mov	r0, r7
 8014c32:	f7f6 fa83 	bl	800b13c <ucdr_serialize_bool>
 8014c36:	78b3      	ldrb	r3, [r6, #2]
 8014c38:	b2e4      	uxtb	r4, r4
 8014c3a:	4004      	ands	r4, r0
 8014c3c:	b94b      	cbnz	r3, 8014c52 <uxr_serialize_ReadSpecification+0x3e>
 8014c3e:	7a31      	ldrb	r1, [r6, #8]
 8014c40:	4638      	mov	r0, r7
 8014c42:	f7f6 fa7b 	bl	800b13c <ucdr_serialize_bool>
 8014c46:	7a33      	ldrb	r3, [r6, #8]
 8014c48:	4004      	ands	r4, r0
 8014c4a:	b943      	cbnz	r3, 8014c5e <uxr_serialize_ReadSpecification+0x4a>
 8014c4c:	4620      	mov	r0, r4
 8014c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c52:	6871      	ldr	r1, [r6, #4]
 8014c54:	4638      	mov	r0, r7
 8014c56:	f003 fd23 	bl	80186a0 <ucdr_serialize_string>
 8014c5a:	4004      	ands	r4, r0
 8014c5c:	e7ef      	b.n	8014c3e <uxr_serialize_ReadSpecification+0x2a>
 8014c5e:	8971      	ldrh	r1, [r6, #10]
 8014c60:	4638      	mov	r0, r7
 8014c62:	f7f6 fac5 	bl	800b1f0 <ucdr_serialize_uint16_t>
 8014c66:	89b1      	ldrh	r1, [r6, #12]
 8014c68:	4605      	mov	r5, r0
 8014c6a:	4638      	mov	r0, r7
 8014c6c:	f7f6 fac0 	bl	800b1f0 <ucdr_serialize_uint16_t>
 8014c70:	89f1      	ldrh	r1, [r6, #14]
 8014c72:	4005      	ands	r5, r0
 8014c74:	4638      	mov	r0, r7
 8014c76:	f7f6 fabb 	bl	800b1f0 <ucdr_serialize_uint16_t>
 8014c7a:	8a31      	ldrh	r1, [r6, #16]
 8014c7c:	4680      	mov	r8, r0
 8014c7e:	4638      	mov	r0, r7
 8014c80:	f7f6 fab6 	bl	800b1f0 <ucdr_serialize_uint16_t>
 8014c84:	b2ed      	uxtb	r5, r5
 8014c86:	4025      	ands	r5, r4
 8014c88:	ea08 0505 	and.w	r5, r8, r5
 8014c8c:	ea00 0405 	and.w	r4, r0, r5
 8014c90:	4620      	mov	r0, r4
 8014c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c96:	bf00      	nop

08014c98 <uxr_serialize_CREATE_CLIENT_Payload>:
 8014c98:	f7ff ba16 	b.w	80140c8 <uxr_serialize_CLIENT_Representation>

08014c9c <uxr_serialize_CREATE_Payload>:
 8014c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c9e:	2202      	movs	r2, #2
 8014ca0:	4607      	mov	r7, r0
 8014ca2:	460e      	mov	r6, r1
 8014ca4:	f7fc fa38 	bl	8011118 <ucdr_serialize_array_uint8_t>
 8014ca8:	2202      	movs	r2, #2
 8014caa:	18b1      	adds	r1, r6, r2
 8014cac:	4605      	mov	r5, r0
 8014cae:	4638      	mov	r0, r7
 8014cb0:	f7fc fa32 	bl	8011118 <ucdr_serialize_array_uint8_t>
 8014cb4:	7931      	ldrb	r1, [r6, #4]
 8014cb6:	4604      	mov	r4, r0
 8014cb8:	4638      	mov	r0, r7
 8014cba:	f7f6 fa6d 	bl	800b198 <ucdr_serialize_uint8_t>
 8014cbe:	b170      	cbz	r0, 8014cde <uxr_serialize_CREATE_Payload+0x42>
 8014cc0:	7933      	ldrb	r3, [r6, #4]
 8014cc2:	402c      	ands	r4, r5
 8014cc4:	3b01      	subs	r3, #1
 8014cc6:	b2e4      	uxtb	r4, r4
 8014cc8:	2b0d      	cmp	r3, #13
 8014cca:	d809      	bhi.n	8014ce0 <uxr_serialize_CREATE_Payload+0x44>
 8014ccc:	e8df f003 	tbb	[pc, r3]
 8014cd0:	23230a4c 	.word	0x23230a4c
 8014cd4:	0a0a0a0a 	.word	0x0a0a0a0a
 8014cd8:	12121208 	.word	0x12121208
 8014cdc:	3e45      	.short	0x3e45
 8014cde:	2400      	movs	r4, #0
 8014ce0:	4620      	mov	r0, r4
 8014ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ce4:	f106 0108 	add.w	r1, r6, #8
 8014ce8:	4638      	mov	r0, r7
 8014cea:	f7ff faf3 	bl	80142d4 <uxr_serialize_DATAWRITER_Representation>
 8014cee:	4004      	ands	r4, r0
 8014cf0:	4620      	mov	r0, r4
 8014cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014cf4:	7a31      	ldrb	r1, [r6, #8]
 8014cf6:	4638      	mov	r0, r7
 8014cf8:	f7f6 fa4e 	bl	800b198 <ucdr_serialize_uint8_t>
 8014cfc:	2800      	cmp	r0, #0
 8014cfe:	d0ee      	beq.n	8014cde <uxr_serialize_CREATE_Payload+0x42>
 8014d00:	7a33      	ldrb	r3, [r6, #8]
 8014d02:	2b01      	cmp	r3, #1
 8014d04:	d001      	beq.n	8014d0a <uxr_serialize_CREATE_Payload+0x6e>
 8014d06:	2b02      	cmp	r3, #2
 8014d08:	d1ea      	bne.n	8014ce0 <uxr_serialize_CREATE_Payload+0x44>
 8014d0a:	68f1      	ldr	r1, [r6, #12]
 8014d0c:	4638      	mov	r0, r7
 8014d0e:	f003 fcc7 	bl	80186a0 <ucdr_serialize_string>
 8014d12:	4004      	ands	r4, r0
 8014d14:	e7e4      	b.n	8014ce0 <uxr_serialize_CREATE_Payload+0x44>
 8014d16:	7a31      	ldrb	r1, [r6, #8]
 8014d18:	4638      	mov	r0, r7
 8014d1a:	f7f6 fa3d 	bl	800b198 <ucdr_serialize_uint8_t>
 8014d1e:	4605      	mov	r5, r0
 8014d20:	b158      	cbz	r0, 8014d3a <uxr_serialize_CREATE_Payload+0x9e>
 8014d22:	7a33      	ldrb	r3, [r6, #8]
 8014d24:	2b02      	cmp	r3, #2
 8014d26:	d034      	beq.n	8014d92 <uxr_serialize_CREATE_Payload+0xf6>
 8014d28:	2b03      	cmp	r3, #3
 8014d2a:	d106      	bne.n	8014d3a <uxr_serialize_CREATE_Payload+0x9e>
 8014d2c:	68f2      	ldr	r2, [r6, #12]
 8014d2e:	f106 0110 	add.w	r1, r6, #16
 8014d32:	4638      	mov	r0, r7
 8014d34:	f7fc fb8e 	bl	8011454 <ucdr_serialize_sequence_uint8_t>
 8014d38:	4605      	mov	r5, r0
 8014d3a:	2202      	movs	r2, #2
 8014d3c:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8014d40:	4638      	mov	r0, r7
 8014d42:	f7fc f9e9 	bl	8011118 <ucdr_serialize_array_uint8_t>
 8014d46:	4028      	ands	r0, r5
 8014d48:	4004      	ands	r4, r0
 8014d4a:	e7c9      	b.n	8014ce0 <uxr_serialize_CREATE_Payload+0x44>
 8014d4c:	f106 0108 	add.w	r1, r6, #8
 8014d50:	4638      	mov	r0, r7
 8014d52:	f7ff f9b9 	bl	80140c8 <uxr_serialize_CLIENT_Representation>
 8014d56:	4004      	ands	r4, r0
 8014d58:	e7c2      	b.n	8014ce0 <uxr_serialize_CREATE_Payload+0x44>
 8014d5a:	f106 0108 	add.w	r1, r6, #8
 8014d5e:	4638      	mov	r0, r7
 8014d60:	f7ff fa6e 	bl	8014240 <uxr_serialize_AGENT_Representation>
 8014d64:	4004      	ands	r4, r0
 8014d66:	e7bb      	b.n	8014ce0 <uxr_serialize_CREATE_Payload+0x44>
 8014d68:	7a31      	ldrb	r1, [r6, #8]
 8014d6a:	4638      	mov	r0, r7
 8014d6c:	f7f6 fa14 	bl	800b198 <ucdr_serialize_uint8_t>
 8014d70:	4605      	mov	r5, r0
 8014d72:	b130      	cbz	r0, 8014d82 <uxr_serialize_CREATE_Payload+0xe6>
 8014d74:	7a33      	ldrb	r3, [r6, #8]
 8014d76:	2b02      	cmp	r3, #2
 8014d78:	d011      	beq.n	8014d9e <uxr_serialize_CREATE_Payload+0x102>
 8014d7a:	2b03      	cmp	r3, #3
 8014d7c:	d015      	beq.n	8014daa <uxr_serialize_CREATE_Payload+0x10e>
 8014d7e:	2b01      	cmp	r3, #1
 8014d80:	d00d      	beq.n	8014d9e <uxr_serialize_CREATE_Payload+0x102>
 8014d82:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8014d86:	4638      	mov	r0, r7
 8014d88:	f7f6 ff42 	bl	800bc10 <ucdr_serialize_int16_t>
 8014d8c:	4028      	ands	r0, r5
 8014d8e:	4004      	ands	r4, r0
 8014d90:	e7a6      	b.n	8014ce0 <uxr_serialize_CREATE_Payload+0x44>
 8014d92:	68f1      	ldr	r1, [r6, #12]
 8014d94:	4638      	mov	r0, r7
 8014d96:	f003 fc83 	bl	80186a0 <ucdr_serialize_string>
 8014d9a:	4605      	mov	r5, r0
 8014d9c:	e7cd      	b.n	8014d3a <uxr_serialize_CREATE_Payload+0x9e>
 8014d9e:	68f1      	ldr	r1, [r6, #12]
 8014da0:	4638      	mov	r0, r7
 8014da2:	f003 fc7d 	bl	80186a0 <ucdr_serialize_string>
 8014da6:	4605      	mov	r5, r0
 8014da8:	e7eb      	b.n	8014d82 <uxr_serialize_CREATE_Payload+0xe6>
 8014daa:	68f2      	ldr	r2, [r6, #12]
 8014dac:	f106 0110 	add.w	r1, r6, #16
 8014db0:	4638      	mov	r0, r7
 8014db2:	f7fc fb4f 	bl	8011454 <ucdr_serialize_sequence_uint8_t>
 8014db6:	4605      	mov	r5, r0
 8014db8:	e7e3      	b.n	8014d82 <uxr_serialize_CREATE_Payload+0xe6>
 8014dba:	bf00      	nop

08014dbc <uxr_serialize_GET_INFO_Payload>:
 8014dbc:	b570      	push	{r4, r5, r6, lr}
 8014dbe:	2202      	movs	r2, #2
 8014dc0:	4605      	mov	r5, r0
 8014dc2:	460e      	mov	r6, r1
 8014dc4:	f7fc f9a8 	bl	8011118 <ucdr_serialize_array_uint8_t>
 8014dc8:	2202      	movs	r2, #2
 8014dca:	18b1      	adds	r1, r6, r2
 8014dcc:	4604      	mov	r4, r0
 8014dce:	4628      	mov	r0, r5
 8014dd0:	f7fc f9a2 	bl	8011118 <ucdr_serialize_array_uint8_t>
 8014dd4:	6871      	ldr	r1, [r6, #4]
 8014dd6:	4004      	ands	r4, r0
 8014dd8:	4628      	mov	r0, r5
 8014dda:	f7f6 fbf3 	bl	800b5c4 <ucdr_serialize_uint32_t>
 8014dde:	b2e4      	uxtb	r4, r4
 8014de0:	4020      	ands	r0, r4
 8014de2:	bd70      	pop	{r4, r5, r6, pc}

08014de4 <uxr_deserialize_GET_INFO_Payload>:
 8014de4:	b570      	push	{r4, r5, r6, lr}
 8014de6:	2202      	movs	r2, #2
 8014de8:	4605      	mov	r5, r0
 8014dea:	460e      	mov	r6, r1
 8014dec:	f7fc f9f8 	bl	80111e0 <ucdr_deserialize_array_uint8_t>
 8014df0:	2202      	movs	r2, #2
 8014df2:	18b1      	adds	r1, r6, r2
 8014df4:	4604      	mov	r4, r0
 8014df6:	4628      	mov	r0, r5
 8014df8:	f7fc f9f2 	bl	80111e0 <ucdr_deserialize_array_uint8_t>
 8014dfc:	1d31      	adds	r1, r6, #4
 8014dfe:	4004      	ands	r4, r0
 8014e00:	4628      	mov	r0, r5
 8014e02:	f7f6 fd0f 	bl	800b824 <ucdr_deserialize_uint32_t>
 8014e06:	b2e4      	uxtb	r4, r4
 8014e08:	4020      	ands	r0, r4
 8014e0a:	bd70      	pop	{r4, r5, r6, pc}

08014e0c <uxr_serialize_DELETE_Payload>:
 8014e0c:	b570      	push	{r4, r5, r6, lr}
 8014e0e:	2202      	movs	r2, #2
 8014e10:	4605      	mov	r5, r0
 8014e12:	460e      	mov	r6, r1
 8014e14:	f7fc f980 	bl	8011118 <ucdr_serialize_array_uint8_t>
 8014e18:	2202      	movs	r2, #2
 8014e1a:	4604      	mov	r4, r0
 8014e1c:	18b1      	adds	r1, r6, r2
 8014e1e:	4628      	mov	r0, r5
 8014e20:	f7fc f97a 	bl	8011118 <ucdr_serialize_array_uint8_t>
 8014e24:	4020      	ands	r0, r4
 8014e26:	b2c0      	uxtb	r0, r0
 8014e28:	bd70      	pop	{r4, r5, r6, pc}
 8014e2a:	bf00      	nop

08014e2c <uxr_deserialize_STATUS_AGENT_Payload>:
 8014e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e30:	4605      	mov	r5, r0
 8014e32:	460e      	mov	r6, r1
 8014e34:	f7f6 f9c6 	bl	800b1c4 <ucdr_deserialize_uint8_t>
 8014e38:	1c71      	adds	r1, r6, #1
 8014e3a:	4604      	mov	r4, r0
 8014e3c:	4628      	mov	r0, r5
 8014e3e:	f7f6 f9c1 	bl	800b1c4 <ucdr_deserialize_uint8_t>
 8014e42:	2204      	movs	r2, #4
 8014e44:	18b1      	adds	r1, r6, r2
 8014e46:	4680      	mov	r8, r0
 8014e48:	4628      	mov	r0, r5
 8014e4a:	f7fc f9c9 	bl	80111e0 <ucdr_deserialize_array_uint8_t>
 8014e4e:	f106 0108 	add.w	r1, r6, #8
 8014e52:	4607      	mov	r7, r0
 8014e54:	2202      	movs	r2, #2
 8014e56:	4628      	mov	r0, r5
 8014e58:	f7fc f9c2 	bl	80111e0 <ucdr_deserialize_array_uint8_t>
 8014e5c:	ea04 0308 	and.w	r3, r4, r8
 8014e60:	b2db      	uxtb	r3, r3
 8014e62:	ea03 0407 	and.w	r4, r3, r7
 8014e66:	2202      	movs	r2, #2
 8014e68:	4607      	mov	r7, r0
 8014e6a:	f106 010a 	add.w	r1, r6, #10
 8014e6e:	4628      	mov	r0, r5
 8014e70:	f7fc f9b6 	bl	80111e0 <ucdr_deserialize_array_uint8_t>
 8014e74:	f106 010c 	add.w	r1, r6, #12
 8014e78:	4603      	mov	r3, r0
 8014e7a:	4628      	mov	r0, r5
 8014e7c:	461d      	mov	r5, r3
 8014e7e:	f7f6 f973 	bl	800b168 <ucdr_deserialize_bool>
 8014e82:	403c      	ands	r4, r7
 8014e84:	4025      	ands	r5, r4
 8014e86:	4028      	ands	r0, r5
 8014e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014e8c <uxr_deserialize_STATUS_Payload>:
 8014e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e90:	2202      	movs	r2, #2
 8014e92:	4606      	mov	r6, r0
 8014e94:	460f      	mov	r7, r1
 8014e96:	f7fc f9a3 	bl	80111e0 <ucdr_deserialize_array_uint8_t>
 8014e9a:	2202      	movs	r2, #2
 8014e9c:	18b9      	adds	r1, r7, r2
 8014e9e:	4605      	mov	r5, r0
 8014ea0:	4630      	mov	r0, r6
 8014ea2:	f7fc f99d 	bl	80111e0 <ucdr_deserialize_array_uint8_t>
 8014ea6:	1d39      	adds	r1, r7, #4
 8014ea8:	4680      	mov	r8, r0
 8014eaa:	4630      	mov	r0, r6
 8014eac:	f7f6 f98a 	bl	800b1c4 <ucdr_deserialize_uint8_t>
 8014eb0:	1d79      	adds	r1, r7, #5
 8014eb2:	4604      	mov	r4, r0
 8014eb4:	4630      	mov	r0, r6
 8014eb6:	f7f6 f985 	bl	800b1c4 <ucdr_deserialize_uint8_t>
 8014eba:	ea05 0508 	and.w	r5, r5, r8
 8014ebe:	402c      	ands	r4, r5
 8014ec0:	4020      	ands	r0, r4
 8014ec2:	b2c0      	uxtb	r0, r0
 8014ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014ec8 <uxr_serialize_INFO_Payload>:
 8014ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ecc:	2202      	movs	r2, #2
 8014ece:	460c      	mov	r4, r1
 8014ed0:	4605      	mov	r5, r0
 8014ed2:	f7fc f921 	bl	8011118 <ucdr_serialize_array_uint8_t>
 8014ed6:	2202      	movs	r2, #2
 8014ed8:	18a1      	adds	r1, r4, r2
 8014eda:	4680      	mov	r8, r0
 8014edc:	4628      	mov	r0, r5
 8014ede:	f7fc f91b 	bl	8011118 <ucdr_serialize_array_uint8_t>
 8014ee2:	7921      	ldrb	r1, [r4, #4]
 8014ee4:	4607      	mov	r7, r0
 8014ee6:	4628      	mov	r0, r5
 8014ee8:	f7f6 f956 	bl	800b198 <ucdr_serialize_uint8_t>
 8014eec:	7961      	ldrb	r1, [r4, #5]
 8014eee:	4606      	mov	r6, r0
 8014ef0:	4628      	mov	r0, r5
 8014ef2:	f7f6 f951 	bl	800b198 <ucdr_serialize_uint8_t>
 8014ef6:	ea08 0807 	and.w	r8, r8, r7
 8014efa:	ea06 0608 	and.w	r6, r6, r8
 8014efe:	4006      	ands	r6, r0
 8014f00:	7a21      	ldrb	r1, [r4, #8]
 8014f02:	4628      	mov	r0, r5
 8014f04:	f7f6 f91a 	bl	800b13c <ucdr_serialize_bool>
 8014f08:	7a23      	ldrb	r3, [r4, #8]
 8014f0a:	b2f7      	uxtb	r7, r6
 8014f0c:	4606      	mov	r6, r0
 8014f0e:	b96b      	cbnz	r3, 8014f2c <uxr_serialize_INFO_Payload+0x64>
 8014f10:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8014f14:	4628      	mov	r0, r5
 8014f16:	f7f6 f911 	bl	800b13c <ucdr_serialize_bool>
 8014f1a:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8014f1e:	4030      	ands	r0, r6
 8014f20:	b2c6      	uxtb	r6, r0
 8014f22:	b983      	cbnz	r3, 8014f46 <uxr_serialize_INFO_Payload+0x7e>
 8014f24:	ea06 0007 	and.w	r0, r6, r7
 8014f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f2c:	7b21      	ldrb	r1, [r4, #12]
 8014f2e:	4628      	mov	r0, r5
 8014f30:	f7f6 f932 	bl	800b198 <ucdr_serialize_uint8_t>
 8014f34:	b188      	cbz	r0, 8014f5a <uxr_serialize_INFO_Payload+0x92>
 8014f36:	f104 010c 	add.w	r1, r4, #12
 8014f3a:	4628      	mov	r0, r5
 8014f3c:	f7ff f9f2 	bl	8014324 <uxr_serialize_ObjectVariant.part.0>
 8014f40:	4030      	ands	r0, r6
 8014f42:	b2c6      	uxtb	r6, r0
 8014f44:	e7e4      	b.n	8014f10 <uxr_serialize_INFO_Payload+0x48>
 8014f46:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8014f4a:	4628      	mov	r0, r5
 8014f4c:	f7ff fd9e 	bl	8014a8c <uxr_serialize_ActivityInfoVariant>
 8014f50:	4006      	ands	r6, r0
 8014f52:	ea06 0007 	and.w	r0, r6, r7
 8014f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f5a:	4606      	mov	r6, r0
 8014f5c:	e7d8      	b.n	8014f10 <uxr_serialize_INFO_Payload+0x48>
 8014f5e:	bf00      	nop

08014f60 <uxr_serialize_READ_DATA_Payload>:
 8014f60:	b570      	push	{r4, r5, r6, lr}
 8014f62:	2202      	movs	r2, #2
 8014f64:	4605      	mov	r5, r0
 8014f66:	460e      	mov	r6, r1
 8014f68:	f7fc f8d6 	bl	8011118 <ucdr_serialize_array_uint8_t>
 8014f6c:	2202      	movs	r2, #2
 8014f6e:	18b1      	adds	r1, r6, r2
 8014f70:	4604      	mov	r4, r0
 8014f72:	4628      	mov	r0, r5
 8014f74:	f7fc f8d0 	bl	8011118 <ucdr_serialize_array_uint8_t>
 8014f78:	1d31      	adds	r1, r6, #4
 8014f7a:	4004      	ands	r4, r0
 8014f7c:	4628      	mov	r0, r5
 8014f7e:	f7ff fe49 	bl	8014c14 <uxr_serialize_ReadSpecification>
 8014f82:	b2e4      	uxtb	r4, r4
 8014f84:	4020      	ands	r0, r4
 8014f86:	bd70      	pop	{r4, r5, r6, pc}

08014f88 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8014f88:	b570      	push	{r4, r5, r6, lr}
 8014f8a:	2202      	movs	r2, #2
 8014f8c:	4605      	mov	r5, r0
 8014f8e:	460e      	mov	r6, r1
 8014f90:	f7fc f8c2 	bl	8011118 <ucdr_serialize_array_uint8_t>
 8014f94:	2202      	movs	r2, #2
 8014f96:	4604      	mov	r4, r0
 8014f98:	18b1      	adds	r1, r6, r2
 8014f9a:	4628      	mov	r0, r5
 8014f9c:	f7fc f8bc 	bl	8011118 <ucdr_serialize_array_uint8_t>
 8014fa0:	4020      	ands	r0, r4
 8014fa2:	b2c0      	uxtb	r0, r0
 8014fa4:	bd70      	pop	{r4, r5, r6, pc}
 8014fa6:	bf00      	nop

08014fa8 <uxr_serialize_ACKNACK_Payload>:
 8014fa8:	b570      	push	{r4, r5, r6, lr}
 8014faa:	460c      	mov	r4, r1
 8014fac:	460e      	mov	r6, r1
 8014fae:	f834 1b02 	ldrh.w	r1, [r4], #2
 8014fb2:	4605      	mov	r5, r0
 8014fb4:	f7f6 f91c 	bl	800b1f0 <ucdr_serialize_uint16_t>
 8014fb8:	2202      	movs	r2, #2
 8014fba:	4621      	mov	r1, r4
 8014fbc:	4604      	mov	r4, r0
 8014fbe:	4628      	mov	r0, r5
 8014fc0:	f7fc f8aa 	bl	8011118 <ucdr_serialize_array_uint8_t>
 8014fc4:	7931      	ldrb	r1, [r6, #4]
 8014fc6:	4004      	ands	r4, r0
 8014fc8:	4628      	mov	r0, r5
 8014fca:	f7f6 f8e5 	bl	800b198 <ucdr_serialize_uint8_t>
 8014fce:	b2e4      	uxtb	r4, r4
 8014fd0:	4020      	ands	r0, r4
 8014fd2:	bd70      	pop	{r4, r5, r6, pc}

08014fd4 <uxr_deserialize_ACKNACK_Payload>:
 8014fd4:	b570      	push	{r4, r5, r6, lr}
 8014fd6:	4605      	mov	r5, r0
 8014fd8:	460e      	mov	r6, r1
 8014fda:	f7f6 fa09 	bl	800b3f0 <ucdr_deserialize_uint16_t>
 8014fde:	2202      	movs	r2, #2
 8014fe0:	18b1      	adds	r1, r6, r2
 8014fe2:	4604      	mov	r4, r0
 8014fe4:	4628      	mov	r0, r5
 8014fe6:	f7fc f8fb 	bl	80111e0 <ucdr_deserialize_array_uint8_t>
 8014fea:	1d31      	adds	r1, r6, #4
 8014fec:	4004      	ands	r4, r0
 8014fee:	4628      	mov	r0, r5
 8014ff0:	f7f6 f8e8 	bl	800b1c4 <ucdr_deserialize_uint8_t>
 8014ff4:	b2e4      	uxtb	r4, r4
 8014ff6:	4020      	ands	r0, r4
 8014ff8:	bd70      	pop	{r4, r5, r6, pc}
 8014ffa:	bf00      	nop

08014ffc <uxr_serialize_HEARTBEAT_Payload>:
 8014ffc:	b570      	push	{r4, r5, r6, lr}
 8014ffe:	460d      	mov	r5, r1
 8015000:	8809      	ldrh	r1, [r1, #0]
 8015002:	4606      	mov	r6, r0
 8015004:	f7f6 f8f4 	bl	800b1f0 <ucdr_serialize_uint16_t>
 8015008:	8869      	ldrh	r1, [r5, #2]
 801500a:	4604      	mov	r4, r0
 801500c:	4630      	mov	r0, r6
 801500e:	f7f6 f8ef 	bl	800b1f0 <ucdr_serialize_uint16_t>
 8015012:	7929      	ldrb	r1, [r5, #4]
 8015014:	4004      	ands	r4, r0
 8015016:	4630      	mov	r0, r6
 8015018:	f7f6 f8be 	bl	800b198 <ucdr_serialize_uint8_t>
 801501c:	b2e4      	uxtb	r4, r4
 801501e:	4020      	ands	r0, r4
 8015020:	bd70      	pop	{r4, r5, r6, pc}
 8015022:	bf00      	nop

08015024 <uxr_deserialize_HEARTBEAT_Payload>:
 8015024:	b570      	push	{r4, r5, r6, lr}
 8015026:	4605      	mov	r5, r0
 8015028:	460e      	mov	r6, r1
 801502a:	f7f6 f9e1 	bl	800b3f0 <ucdr_deserialize_uint16_t>
 801502e:	1cb1      	adds	r1, r6, #2
 8015030:	4604      	mov	r4, r0
 8015032:	4628      	mov	r0, r5
 8015034:	f7f6 f9dc 	bl	800b3f0 <ucdr_deserialize_uint16_t>
 8015038:	1d31      	adds	r1, r6, #4
 801503a:	4004      	ands	r4, r0
 801503c:	4628      	mov	r0, r5
 801503e:	f7f6 f8c1 	bl	800b1c4 <ucdr_deserialize_uint8_t>
 8015042:	b2e4      	uxtb	r4, r4
 8015044:	4020      	ands	r0, r4
 8015046:	bd70      	pop	{r4, r5, r6, pc}

08015048 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8015048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801504c:	4605      	mov	r5, r0
 801504e:	460e      	mov	r6, r1
 8015050:	f7f6 ff6a 	bl	800bf28 <ucdr_deserialize_int32_t>
 8015054:	1d31      	adds	r1, r6, #4
 8015056:	4607      	mov	r7, r0
 8015058:	4628      	mov	r0, r5
 801505a:	f7f6 fbe3 	bl	800b824 <ucdr_deserialize_uint32_t>
 801505e:	f106 0108 	add.w	r1, r6, #8
 8015062:	4680      	mov	r8, r0
 8015064:	4628      	mov	r0, r5
 8015066:	f7f6 ff5f 	bl	800bf28 <ucdr_deserialize_int32_t>
 801506a:	f106 010c 	add.w	r1, r6, #12
 801506e:	4604      	mov	r4, r0
 8015070:	4628      	mov	r0, r5
 8015072:	f7f6 fbd7 	bl	800b824 <ucdr_deserialize_uint32_t>
 8015076:	ea07 0708 	and.w	r7, r7, r8
 801507a:	403c      	ands	r4, r7
 801507c:	f106 0110 	add.w	r1, r6, #16
 8015080:	4004      	ands	r4, r0
 8015082:	4628      	mov	r0, r5
 8015084:	f7f6 ff50 	bl	800bf28 <ucdr_deserialize_int32_t>
 8015088:	f106 0114 	add.w	r1, r6, #20
 801508c:	4607      	mov	r7, r0
 801508e:	4628      	mov	r0, r5
 8015090:	f7f6 fbc8 	bl	800b824 <ucdr_deserialize_uint32_t>
 8015094:	b2e4      	uxtb	r4, r4
 8015096:	403c      	ands	r4, r7
 8015098:	4020      	ands	r0, r4
 801509a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801509e:	bf00      	nop

080150a0 <uxr_serialize_SampleIdentity>:
 80150a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150a4:	220c      	movs	r2, #12
 80150a6:	4604      	mov	r4, r0
 80150a8:	460d      	mov	r5, r1
 80150aa:	f7fc f835 	bl	8011118 <ucdr_serialize_array_uint8_t>
 80150ae:	2203      	movs	r2, #3
 80150b0:	f105 010c 	add.w	r1, r5, #12
 80150b4:	4607      	mov	r7, r0
 80150b6:	4620      	mov	r0, r4
 80150b8:	f7fc f82e 	bl	8011118 <ucdr_serialize_array_uint8_t>
 80150bc:	7be9      	ldrb	r1, [r5, #15]
 80150be:	4680      	mov	r8, r0
 80150c0:	4620      	mov	r0, r4
 80150c2:	f7f6 f869 	bl	800b198 <ucdr_serialize_uint8_t>
 80150c6:	6929      	ldr	r1, [r5, #16]
 80150c8:	4606      	mov	r6, r0
 80150ca:	4620      	mov	r0, r4
 80150cc:	f7f6 fe94 	bl	800bdf8 <ucdr_serialize_int32_t>
 80150d0:	6969      	ldr	r1, [r5, #20]
 80150d2:	4603      	mov	r3, r0
 80150d4:	4620      	mov	r0, r4
 80150d6:	ea07 0708 	and.w	r7, r7, r8
 80150da:	461c      	mov	r4, r3
 80150dc:	f7f6 fa72 	bl	800b5c4 <ucdr_serialize_uint32_t>
 80150e0:	403e      	ands	r6, r7
 80150e2:	4034      	ands	r4, r6
 80150e4:	4020      	ands	r0, r4
 80150e6:	b2c0      	uxtb	r0, r0
 80150e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080150ec <uxr_deserialize_SampleIdentity>:
 80150ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150f0:	220c      	movs	r2, #12
 80150f2:	4604      	mov	r4, r0
 80150f4:	460d      	mov	r5, r1
 80150f6:	f7fc f873 	bl	80111e0 <ucdr_deserialize_array_uint8_t>
 80150fa:	2203      	movs	r2, #3
 80150fc:	f105 010c 	add.w	r1, r5, #12
 8015100:	4607      	mov	r7, r0
 8015102:	4620      	mov	r0, r4
 8015104:	f7fc f86c 	bl	80111e0 <ucdr_deserialize_array_uint8_t>
 8015108:	f105 010f 	add.w	r1, r5, #15
 801510c:	4680      	mov	r8, r0
 801510e:	4620      	mov	r0, r4
 8015110:	f7f6 f858 	bl	800b1c4 <ucdr_deserialize_uint8_t>
 8015114:	f105 0110 	add.w	r1, r5, #16
 8015118:	4606      	mov	r6, r0
 801511a:	4620      	mov	r0, r4
 801511c:	f7f6 ff04 	bl	800bf28 <ucdr_deserialize_int32_t>
 8015120:	f105 0114 	add.w	r1, r5, #20
 8015124:	4603      	mov	r3, r0
 8015126:	4620      	mov	r0, r4
 8015128:	ea07 0708 	and.w	r7, r7, r8
 801512c:	461c      	mov	r4, r3
 801512e:	f7f6 fb79 	bl	800b824 <ucdr_deserialize_uint32_t>
 8015132:	403e      	ands	r6, r7
 8015134:	4034      	ands	r4, r6
 8015136:	4020      	ands	r0, r4
 8015138:	b2c0      	uxtb	r0, r0
 801513a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801513e:	bf00      	nop

08015140 <nav_msgs__msg__Odometry__init>:
 8015140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015144:	4605      	mov	r5, r0
 8015146:	b3c0      	cbz	r0, 80151ba <nav_msgs__msg__Odometry__init+0x7a>
 8015148:	f003 f8e8 	bl	801831c <std_msgs__msg__Header__init>
 801514c:	4604      	mov	r4, r0
 801514e:	b310      	cbz	r0, 8015196 <nav_msgs__msg__Odometry__init+0x56>
 8015150:	f105 0614 	add.w	r6, r5, #20
 8015154:	4630      	mov	r0, r6
 8015156:	f003 f883 	bl	8018260 <rosidl_runtime_c__String__init>
 801515a:	4604      	mov	r4, r0
 801515c:	2800      	cmp	r0, #0
 801515e:	d040      	beq.n	80151e2 <nav_msgs__msg__Odometry__init+0xa2>
 8015160:	f105 0720 	add.w	r7, r5, #32
 8015164:	4638      	mov	r0, r7
 8015166:	f003 f915 	bl	8018394 <geometry_msgs__msg__PoseWithCovariance__init>
 801516a:	4604      	mov	r4, r0
 801516c:	b348      	cbz	r0, 80151c2 <nav_msgs__msg__Odometry__init+0x82>
 801516e:	f505 78bc 	add.w	r8, r5, #376	@ 0x178
 8015172:	4640      	mov	r0, r8
 8015174:	f003 f924 	bl	80183c0 <geometry_msgs__msg__TwistWithCovariance__init>
 8015178:	4604      	mov	r4, r0
 801517a:	b9d8      	cbnz	r0, 80151b4 <nav_msgs__msg__Odometry__init+0x74>
 801517c:	4628      	mov	r0, r5
 801517e:	f003 f8f1 	bl	8018364 <std_msgs__msg__Header__fini>
 8015182:	4630      	mov	r0, r6
 8015184:	f003 f882 	bl	801828c <rosidl_runtime_c__String__fini>
 8015188:	4638      	mov	r0, r7
 801518a:	f003 f915 	bl	80183b8 <geometry_msgs__msg__PoseWithCovariance__fini>
 801518e:	4640      	mov	r0, r8
 8015190:	f003 f928 	bl	80183e4 <geometry_msgs__msg__TwistWithCovariance__fini>
 8015194:	e00e      	b.n	80151b4 <nav_msgs__msg__Odometry__init+0x74>
 8015196:	4628      	mov	r0, r5
 8015198:	f003 f8e4 	bl	8018364 <std_msgs__msg__Header__fini>
 801519c:	f105 0014 	add.w	r0, r5, #20
 80151a0:	f003 f874 	bl	801828c <rosidl_runtime_c__String__fini>
 80151a4:	f105 0020 	add.w	r0, r5, #32
 80151a8:	f003 f906 	bl	80183b8 <geometry_msgs__msg__PoseWithCovariance__fini>
 80151ac:	f505 70bc 	add.w	r0, r5, #376	@ 0x178
 80151b0:	f003 f918 	bl	80183e4 <geometry_msgs__msg__TwistWithCovariance__fini>
 80151b4:	4620      	mov	r0, r4
 80151b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151ba:	4604      	mov	r4, r0
 80151bc:	4620      	mov	r0, r4
 80151be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151c2:	4628      	mov	r0, r5
 80151c4:	f003 f8ce 	bl	8018364 <std_msgs__msg__Header__fini>
 80151c8:	4630      	mov	r0, r6
 80151ca:	f003 f85f 	bl	801828c <rosidl_runtime_c__String__fini>
 80151ce:	4638      	mov	r0, r7
 80151d0:	f003 f8f2 	bl	80183b8 <geometry_msgs__msg__PoseWithCovariance__fini>
 80151d4:	f505 70bc 	add.w	r0, r5, #376	@ 0x178
 80151d8:	f003 f904 	bl	80183e4 <geometry_msgs__msg__TwistWithCovariance__fini>
 80151dc:	4620      	mov	r0, r4
 80151de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151e2:	4628      	mov	r0, r5
 80151e4:	f003 f8be 	bl	8018364 <std_msgs__msg__Header__fini>
 80151e8:	4630      	mov	r0, r6
 80151ea:	e7d9      	b.n	80151a0 <nav_msgs__msg__Odometry__init+0x60>

080151ec <nav_msgs__msg__Odometry__fini>:
 80151ec:	b188      	cbz	r0, 8015212 <nav_msgs__msg__Odometry__fini+0x26>
 80151ee:	b510      	push	{r4, lr}
 80151f0:	4604      	mov	r4, r0
 80151f2:	f003 f8b7 	bl	8018364 <std_msgs__msg__Header__fini>
 80151f6:	f104 0014 	add.w	r0, r4, #20
 80151fa:	f003 f847 	bl	801828c <rosidl_runtime_c__String__fini>
 80151fe:	f104 0020 	add.w	r0, r4, #32
 8015202:	f003 f8d9 	bl	80183b8 <geometry_msgs__msg__PoseWithCovariance__fini>
 8015206:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 801520a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801520e:	f003 b8e9 	b.w	80183e4 <geometry_msgs__msg__TwistWithCovariance__fini>
 8015212:	4770      	bx	lr

08015214 <rcl_client_get_rmw_handle>:
 8015214:	b118      	cbz	r0, 801521e <rcl_client_get_rmw_handle+0xa>
 8015216:	6800      	ldr	r0, [r0, #0]
 8015218:	b108      	cbz	r0, 801521e <rcl_client_get_rmw_handle+0xa>
 801521a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801521e:	4770      	bx	lr

08015220 <rcl_send_request>:
 8015220:	b570      	push	{r4, r5, r6, lr}
 8015222:	b082      	sub	sp, #8
 8015224:	b1e8      	cbz	r0, 8015262 <rcl_send_request+0x42>
 8015226:	4604      	mov	r4, r0
 8015228:	6800      	ldr	r0, [r0, #0]
 801522a:	b1d0      	cbz	r0, 8015262 <rcl_send_request+0x42>
 801522c:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8015230:	b1bb      	cbz	r3, 8015262 <rcl_send_request+0x42>
 8015232:	460e      	mov	r6, r1
 8015234:	b1d1      	cbz	r1, 801526c <rcl_send_request+0x4c>
 8015236:	4615      	mov	r5, r2
 8015238:	b1c2      	cbz	r2, 801526c <rcl_send_request+0x4c>
 801523a:	2105      	movs	r1, #5
 801523c:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8015240:	f7f9 fca8 	bl	800eb94 <__atomic_load_8>
 8015244:	6823      	ldr	r3, [r4, #0]
 8015246:	e9c5 0100 	strd	r0, r1, [r5]
 801524a:	462a      	mov	r2, r5
 801524c:	4631      	mov	r1, r6
 801524e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8015252:	f002 fcff 	bl	8017c54 <rmw_send_request>
 8015256:	4606      	mov	r6, r0
 8015258:	b160      	cbz	r0, 8015274 <rcl_send_request+0x54>
 801525a:	2601      	movs	r6, #1
 801525c:	4630      	mov	r0, r6
 801525e:	b002      	add	sp, #8
 8015260:	bd70      	pop	{r4, r5, r6, pc}
 8015262:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8015266:	4630      	mov	r0, r6
 8015268:	b002      	add	sp, #8
 801526a:	bd70      	pop	{r4, r5, r6, pc}
 801526c:	260b      	movs	r6, #11
 801526e:	4630      	mov	r0, r6
 8015270:	b002      	add	sp, #8
 8015272:	bd70      	pop	{r4, r5, r6, pc}
 8015274:	6820      	ldr	r0, [r4, #0]
 8015276:	2105      	movs	r1, #5
 8015278:	e9d5 2300 	ldrd	r2, r3, [r5]
 801527c:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8015280:	9100      	str	r1, [sp, #0]
 8015282:	f7f9 fcf3 	bl	800ec6c <__atomic_exchange_8>
 8015286:	4630      	mov	r0, r6
 8015288:	b002      	add	sp, #8
 801528a:	bd70      	pop	{r4, r5, r6, pc}
 801528c:	0000      	movs	r0, r0
	...

08015290 <rcl_take_response>:
 8015290:	b570      	push	{r4, r5, r6, lr}
 8015292:	468e      	mov	lr, r1
 8015294:	460c      	mov	r4, r1
 8015296:	4616      	mov	r6, r2
 8015298:	4605      	mov	r5, r0
 801529a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801529e:	b08c      	sub	sp, #48	@ 0x30
 80152a0:	f10d 0c18 	add.w	ip, sp, #24
 80152a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80152a8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80152ac:	e88c 0003 	stmia.w	ip, {r0, r1}
 80152b0:	b35d      	cbz	r5, 801530a <rcl_take_response+0x7a>
 80152b2:	682b      	ldr	r3, [r5, #0]
 80152b4:	b34b      	cbz	r3, 801530a <rcl_take_response+0x7a>
 80152b6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80152ba:	b330      	cbz	r0, 801530a <rcl_take_response+0x7a>
 80152bc:	b346      	cbz	r6, 8015310 <rcl_take_response+0x80>
 80152be:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8015318 <rcl_take_response+0x88>
 80152c2:	2300      	movs	r3, #0
 80152c4:	f88d 3007 	strb.w	r3, [sp, #7]
 80152c8:	4632      	mov	r2, r6
 80152ca:	f10d 0307 	add.w	r3, sp, #7
 80152ce:	a902      	add	r1, sp, #8
 80152d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80152d4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80152d8:	f002 fdc4 	bl	8017e64 <rmw_take_response>
 80152dc:	4605      	mov	r5, r0
 80152de:	b9c8      	cbnz	r0, 8015314 <rcl_take_response+0x84>
 80152e0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80152e4:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80152e8:	2a00      	cmp	r2, #0
 80152ea:	bf08      	it	eq
 80152ec:	461d      	moveq	r5, r3
 80152ee:	f10d 0e18 	add.w	lr, sp, #24
 80152f2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80152f6:	46a4      	mov	ip, r4
 80152f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80152fc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015300:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015304:	4628      	mov	r0, r5
 8015306:	b00c      	add	sp, #48	@ 0x30
 8015308:	bd70      	pop	{r4, r5, r6, pc}
 801530a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 801530e:	e7ee      	b.n	80152ee <rcl_take_response+0x5e>
 8015310:	250b      	movs	r5, #11
 8015312:	e7ec      	b.n	80152ee <rcl_take_response+0x5e>
 8015314:	2501      	movs	r5, #1
 8015316:	e7ea      	b.n	80152ee <rcl_take_response+0x5e>
	...

08015320 <rcl_client_is_valid>:
 8015320:	b130      	cbz	r0, 8015330 <rcl_client_is_valid+0x10>
 8015322:	6800      	ldr	r0, [r0, #0]
 8015324:	b120      	cbz	r0, 8015330 <rcl_client_is_valid+0x10>
 8015326:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801532a:	3800      	subs	r0, #0
 801532c:	bf18      	it	ne
 801532e:	2001      	movne	r0, #1
 8015330:	4770      	bx	lr
 8015332:	bf00      	nop

08015334 <rcl_convert_rmw_ret_to_rcl_ret>:
 8015334:	280b      	cmp	r0, #11
 8015336:	dc0d      	bgt.n	8015354 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8015338:	2800      	cmp	r0, #0
 801533a:	db09      	blt.n	8015350 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801533c:	280b      	cmp	r0, #11
 801533e:	d807      	bhi.n	8015350 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8015340:	e8df f000 	tbb	[pc, r0]
 8015344:	07060607 	.word	0x07060607
 8015348:	06060606 	.word	0x06060606
 801534c:	07070606 	.word	0x07070606
 8015350:	2001      	movs	r0, #1
 8015352:	4770      	bx	lr
 8015354:	28cb      	cmp	r0, #203	@ 0xcb
 8015356:	bf18      	it	ne
 8015358:	2001      	movne	r0, #1
 801535a:	4770      	bx	lr

0801535c <rcl_get_zero_initialized_guard_condition>:
 801535c:	4a03      	ldr	r2, [pc, #12]	@ (801536c <rcl_get_zero_initialized_guard_condition+0x10>)
 801535e:	4603      	mov	r3, r0
 8015360:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015364:	e883 0003 	stmia.w	r3, {r0, r1}
 8015368:	4618      	mov	r0, r3
 801536a:	4770      	bx	lr
 801536c:	0801bfd4 	.word	0x0801bfd4

08015370 <rcl_guard_condition_init>:
 8015370:	b082      	sub	sp, #8
 8015372:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015374:	b087      	sub	sp, #28
 8015376:	ac0c      	add	r4, sp, #48	@ 0x30
 8015378:	e884 000c 	stmia.w	r4, {r2, r3}
 801537c:	46a6      	mov	lr, r4
 801537e:	460d      	mov	r5, r1
 8015380:	4604      	mov	r4, r0
 8015382:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015386:	f10d 0c04 	add.w	ip, sp, #4
 801538a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801538e:	f8de 3000 	ldr.w	r3, [lr]
 8015392:	f8cc 3000 	str.w	r3, [ip]
 8015396:	a801      	add	r0, sp, #4
 8015398:	f7f9 fbee 	bl	800eb78 <rcutils_allocator_is_valid>
 801539c:	b338      	cbz	r0, 80153ee <rcl_guard_condition_init+0x7e>
 801539e:	b334      	cbz	r4, 80153ee <rcl_guard_condition_init+0x7e>
 80153a0:	6866      	ldr	r6, [r4, #4]
 80153a2:	b9ee      	cbnz	r6, 80153e0 <rcl_guard_condition_init+0x70>
 80153a4:	b31d      	cbz	r5, 80153ee <rcl_guard_condition_init+0x7e>
 80153a6:	4628      	mov	r0, r5
 80153a8:	f7f7 fb50 	bl	800ca4c <rcl_context_is_valid>
 80153ac:	b308      	cbz	r0, 80153f2 <rcl_guard_condition_init+0x82>
 80153ae:	9b01      	ldr	r3, [sp, #4]
 80153b0:	9905      	ldr	r1, [sp, #20]
 80153b2:	201c      	movs	r0, #28
 80153b4:	4798      	blx	r3
 80153b6:	4607      	mov	r7, r0
 80153b8:	6060      	str	r0, [r4, #4]
 80153ba:	b310      	cbz	r0, 8015402 <rcl_guard_condition_init+0x92>
 80153bc:	6828      	ldr	r0, [r5, #0]
 80153be:	3028      	adds	r0, #40	@ 0x28
 80153c0:	f002 fbae 	bl	8017b20 <rmw_create_guard_condition>
 80153c4:	6038      	str	r0, [r7, #0]
 80153c6:	6860      	ldr	r0, [r4, #4]
 80153c8:	6805      	ldr	r5, [r0, #0]
 80153ca:	b1a5      	cbz	r5, 80153f6 <rcl_guard_condition_init+0x86>
 80153cc:	2301      	movs	r3, #1
 80153ce:	ac01      	add	r4, sp, #4
 80153d0:	7103      	strb	r3, [r0, #4]
 80153d2:	f100 0708 	add.w	r7, r0, #8
 80153d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80153d8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80153da:	6823      	ldr	r3, [r4, #0]
 80153dc:	603b      	str	r3, [r7, #0]
 80153de:	e000      	b.n	80153e2 <rcl_guard_condition_init+0x72>
 80153e0:	2664      	movs	r6, #100	@ 0x64
 80153e2:	4630      	mov	r0, r6
 80153e4:	b007      	add	sp, #28
 80153e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80153ea:	b002      	add	sp, #8
 80153ec:	4770      	bx	lr
 80153ee:	260b      	movs	r6, #11
 80153f0:	e7f7      	b.n	80153e2 <rcl_guard_condition_init+0x72>
 80153f2:	2665      	movs	r6, #101	@ 0x65
 80153f4:	e7f5      	b.n	80153e2 <rcl_guard_condition_init+0x72>
 80153f6:	9b02      	ldr	r3, [sp, #8]
 80153f8:	9905      	ldr	r1, [sp, #20]
 80153fa:	4798      	blx	r3
 80153fc:	2601      	movs	r6, #1
 80153fe:	6065      	str	r5, [r4, #4]
 8015400:	e7ef      	b.n	80153e2 <rcl_guard_condition_init+0x72>
 8015402:	260a      	movs	r6, #10
 8015404:	e7ed      	b.n	80153e2 <rcl_guard_condition_init+0x72>
 8015406:	bf00      	nop

08015408 <rcl_guard_condition_init_from_rmw>:
 8015408:	b082      	sub	sp, #8
 801540a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801540e:	b086      	sub	sp, #24
 8015410:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8015414:	4604      	mov	r4, r0
 8015416:	f84c 3f04 	str.w	r3, [ip, #4]!
 801541a:	460e      	mov	r6, r1
 801541c:	4617      	mov	r7, r2
 801541e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015422:	f10d 0e04 	add.w	lr, sp, #4
 8015426:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801542a:	f8dc 3000 	ldr.w	r3, [ip]
 801542e:	f8ce 3000 	str.w	r3, [lr]
 8015432:	a801      	add	r0, sp, #4
 8015434:	f7f9 fba0 	bl	800eb78 <rcutils_allocator_is_valid>
 8015438:	b350      	cbz	r0, 8015490 <rcl_guard_condition_init_from_rmw+0x88>
 801543a:	b34c      	cbz	r4, 8015490 <rcl_guard_condition_init_from_rmw+0x88>
 801543c:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8015440:	f1b8 0f00 	cmp.w	r8, #0
 8015444:	d11e      	bne.n	8015484 <rcl_guard_condition_init_from_rmw+0x7c>
 8015446:	b31f      	cbz	r7, 8015490 <rcl_guard_condition_init_from_rmw+0x88>
 8015448:	4638      	mov	r0, r7
 801544a:	f7f7 faff 	bl	800ca4c <rcl_context_is_valid>
 801544e:	b328      	cbz	r0, 801549c <rcl_guard_condition_init_from_rmw+0x94>
 8015450:	9b01      	ldr	r3, [sp, #4]
 8015452:	9905      	ldr	r1, [sp, #20]
 8015454:	201c      	movs	r0, #28
 8015456:	4798      	blx	r3
 8015458:	4605      	mov	r5, r0
 801545a:	6060      	str	r0, [r4, #4]
 801545c:	b358      	cbz	r0, 80154b6 <rcl_guard_condition_init_from_rmw+0xae>
 801545e:	b1fe      	cbz	r6, 80154a0 <rcl_guard_condition_init_from_rmw+0x98>
 8015460:	6006      	str	r6, [r0, #0]
 8015462:	f880 8004 	strb.w	r8, [r0, #4]
 8015466:	ac01      	add	r4, sp, #4
 8015468:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801546a:	f105 0c08 	add.w	ip, r5, #8
 801546e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015472:	6823      	ldr	r3, [r4, #0]
 8015474:	f8cc 3000 	str.w	r3, [ip]
 8015478:	2000      	movs	r0, #0
 801547a:	b006      	add	sp, #24
 801547c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015480:	b002      	add	sp, #8
 8015482:	4770      	bx	lr
 8015484:	2064      	movs	r0, #100	@ 0x64
 8015486:	b006      	add	sp, #24
 8015488:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801548c:	b002      	add	sp, #8
 801548e:	4770      	bx	lr
 8015490:	200b      	movs	r0, #11
 8015492:	b006      	add	sp, #24
 8015494:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015498:	b002      	add	sp, #8
 801549a:	4770      	bx	lr
 801549c:	2065      	movs	r0, #101	@ 0x65
 801549e:	e7f2      	b.n	8015486 <rcl_guard_condition_init_from_rmw+0x7e>
 80154a0:	6838      	ldr	r0, [r7, #0]
 80154a2:	3028      	adds	r0, #40	@ 0x28
 80154a4:	f002 fb3c 	bl	8017b20 <rmw_create_guard_condition>
 80154a8:	6028      	str	r0, [r5, #0]
 80154aa:	6865      	ldr	r5, [r4, #4]
 80154ac:	682e      	ldr	r6, [r5, #0]
 80154ae:	b126      	cbz	r6, 80154ba <rcl_guard_condition_init_from_rmw+0xb2>
 80154b0:	2301      	movs	r3, #1
 80154b2:	712b      	strb	r3, [r5, #4]
 80154b4:	e7d7      	b.n	8015466 <rcl_guard_condition_init_from_rmw+0x5e>
 80154b6:	200a      	movs	r0, #10
 80154b8:	e7e5      	b.n	8015486 <rcl_guard_condition_init_from_rmw+0x7e>
 80154ba:	4628      	mov	r0, r5
 80154bc:	9b02      	ldr	r3, [sp, #8]
 80154be:	9905      	ldr	r1, [sp, #20]
 80154c0:	4798      	blx	r3
 80154c2:	6066      	str	r6, [r4, #4]
 80154c4:	2001      	movs	r0, #1
 80154c6:	e7de      	b.n	8015486 <rcl_guard_condition_init_from_rmw+0x7e>

080154c8 <rcl_guard_condition_fini>:
 80154c8:	b570      	push	{r4, r5, r6, lr}
 80154ca:	b082      	sub	sp, #8
 80154cc:	b1f0      	cbz	r0, 801550c <rcl_guard_condition_fini+0x44>
 80154ce:	6843      	ldr	r3, [r0, #4]
 80154d0:	4604      	mov	r4, r0
 80154d2:	b163      	cbz	r3, 80154ee <rcl_guard_condition_fini+0x26>
 80154d4:	6818      	ldr	r0, [r3, #0]
 80154d6:	68de      	ldr	r6, [r3, #12]
 80154d8:	6999      	ldr	r1, [r3, #24]
 80154da:	b160      	cbz	r0, 80154f6 <rcl_guard_condition_fini+0x2e>
 80154dc:	791d      	ldrb	r5, [r3, #4]
 80154de:	b965      	cbnz	r5, 80154fa <rcl_guard_condition_fini+0x32>
 80154e0:	4618      	mov	r0, r3
 80154e2:	47b0      	blx	r6
 80154e4:	2300      	movs	r3, #0
 80154e6:	4628      	mov	r0, r5
 80154e8:	6063      	str	r3, [r4, #4]
 80154ea:	b002      	add	sp, #8
 80154ec:	bd70      	pop	{r4, r5, r6, pc}
 80154ee:	461d      	mov	r5, r3
 80154f0:	4628      	mov	r0, r5
 80154f2:	b002      	add	sp, #8
 80154f4:	bd70      	pop	{r4, r5, r6, pc}
 80154f6:	4605      	mov	r5, r0
 80154f8:	e7f2      	b.n	80154e0 <rcl_guard_condition_fini+0x18>
 80154fa:	9101      	str	r1, [sp, #4]
 80154fc:	f002 fb24 	bl	8017b48 <rmw_destroy_guard_condition>
 8015500:	1e05      	subs	r5, r0, #0
 8015502:	6863      	ldr	r3, [r4, #4]
 8015504:	9901      	ldr	r1, [sp, #4]
 8015506:	bf18      	it	ne
 8015508:	2501      	movne	r5, #1
 801550a:	e7e9      	b.n	80154e0 <rcl_guard_condition_fini+0x18>
 801550c:	250b      	movs	r5, #11
 801550e:	4628      	mov	r0, r5
 8015510:	b002      	add	sp, #8
 8015512:	bd70      	pop	{r4, r5, r6, pc}

08015514 <rcl_guard_condition_get_default_options>:
 8015514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015516:	b087      	sub	sp, #28
 8015518:	4606      	mov	r6, r0
 801551a:	4668      	mov	r0, sp
 801551c:	f7f9 fb1e 	bl	800eb5c <rcutils_get_default_allocator>
 8015520:	4b09      	ldr	r3, [pc, #36]	@ (8015548 <rcl_guard_condition_get_default_options+0x34>)
 8015522:	46ee      	mov	lr, sp
 8015524:	469c      	mov	ip, r3
 8015526:	461d      	mov	r5, r3
 8015528:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801552c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015530:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015532:	4634      	mov	r4, r6
 8015534:	f8de 7000 	ldr.w	r7, [lr]
 8015538:	f8cc 7000 	str.w	r7, [ip]
 801553c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801553e:	4630      	mov	r0, r6
 8015540:	6027      	str	r7, [r4, #0]
 8015542:	b007      	add	sp, #28
 8015544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015546:	bf00      	nop
 8015548:	200118d0 	.word	0x200118d0

0801554c <rcl_trigger_guard_condition>:
 801554c:	b148      	cbz	r0, 8015562 <rcl_trigger_guard_condition+0x16>
 801554e:	b508      	push	{r3, lr}
 8015550:	6843      	ldr	r3, [r0, #4]
 8015552:	b143      	cbz	r3, 8015566 <rcl_trigger_guard_condition+0x1a>
 8015554:	6818      	ldr	r0, [r3, #0]
 8015556:	f002 fccf 	bl	8017ef8 <rmw_trigger_guard_condition>
 801555a:	3800      	subs	r0, #0
 801555c:	bf18      	it	ne
 801555e:	2001      	movne	r0, #1
 8015560:	bd08      	pop	{r3, pc}
 8015562:	200b      	movs	r0, #11
 8015564:	4770      	bx	lr
 8015566:	200b      	movs	r0, #11
 8015568:	bd08      	pop	{r3, pc}
 801556a:	bf00      	nop

0801556c <rcl_guard_condition_get_rmw_handle>:
 801556c:	b110      	cbz	r0, 8015574 <rcl_guard_condition_get_rmw_handle+0x8>
 801556e:	6840      	ldr	r0, [r0, #4]
 8015570:	b100      	cbz	r0, 8015574 <rcl_guard_condition_get_rmw_handle+0x8>
 8015572:	6800      	ldr	r0, [r0, #0]
 8015574:	4770      	bx	lr
 8015576:	bf00      	nop

08015578 <rcl_init>:
 8015578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801557c:	1e05      	subs	r5, r0, #0
 801557e:	b09c      	sub	sp, #112	@ 0x70
 8015580:	460e      	mov	r6, r1
 8015582:	4690      	mov	r8, r2
 8015584:	461f      	mov	r7, r3
 8015586:	f340 8099 	ble.w	80156bc <rcl_init+0x144>
 801558a:	2900      	cmp	r1, #0
 801558c:	f000 8099 	beq.w	80156c2 <rcl_init+0x14a>
 8015590:	f1a1 0e04 	sub.w	lr, r1, #4
 8015594:	f04f 0c00 	mov.w	ip, #0
 8015598:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 801559c:	f10c 0c01 	add.w	ip, ip, #1
 80155a0:	2c00      	cmp	r4, #0
 80155a2:	f000 808e 	beq.w	80156c2 <rcl_init+0x14a>
 80155a6:	4565      	cmp	r5, ip
 80155a8:	d1f6      	bne.n	8015598 <rcl_init+0x20>
 80155aa:	f1b8 0f00 	cmp.w	r8, #0
 80155ae:	f000 8088 	beq.w	80156c2 <rcl_init+0x14a>
 80155b2:	f8d8 4000 	ldr.w	r4, [r8]
 80155b6:	2c00      	cmp	r4, #0
 80155b8:	f000 8083 	beq.w	80156c2 <rcl_init+0x14a>
 80155bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80155be:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 80155c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80155c6:	6823      	ldr	r3, [r4, #0]
 80155c8:	f8cc 3000 	str.w	r3, [ip]
 80155cc:	a817      	add	r0, sp, #92	@ 0x5c
 80155ce:	f7f9 fad3 	bl	800eb78 <rcutils_allocator_is_valid>
 80155d2:	2800      	cmp	r0, #0
 80155d4:	d075      	beq.n	80156c2 <rcl_init+0x14a>
 80155d6:	2f00      	cmp	r7, #0
 80155d8:	d073      	beq.n	80156c2 <rcl_init+0x14a>
 80155da:	683b      	ldr	r3, [r7, #0]
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d175      	bne.n	80156cc <rcl_init+0x154>
 80155e0:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 80155e4:	2178      	movs	r1, #120	@ 0x78
 80155e6:	2001      	movs	r0, #1
 80155e8:	4798      	blx	r3
 80155ea:	4604      	mov	r4, r0
 80155ec:	6038      	str	r0, [r7, #0]
 80155ee:	2800      	cmp	r0, #0
 80155f0:	f000 80a0 	beq.w	8015734 <rcl_init+0x1bc>
 80155f4:	a802      	add	r0, sp, #8
 80155f6:	f002 f833 	bl	8017660 <rmw_get_zero_initialized_context>
 80155fa:	a902      	add	r1, sp, #8
 80155fc:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8015600:	2250      	movs	r2, #80	@ 0x50
 8015602:	ac17      	add	r4, sp, #92	@ 0x5c
 8015604:	f004 fedf 	bl	801a3c6 <memcpy>
 8015608:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801560a:	f8d7 e000 	ldr.w	lr, [r7]
 801560e:	46f4      	mov	ip, lr
 8015610:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015614:	6823      	ldr	r3, [r4, #0]
 8015616:	f8cc 3000 	str.w	r3, [ip]
 801561a:	f10e 0114 	add.w	r1, lr, #20
 801561e:	4640      	mov	r0, r8
 8015620:	f7f7 fb26 	bl	800cc70 <rcl_init_options_copy>
 8015624:	4604      	mov	r4, r0
 8015626:	2800      	cmp	r0, #0
 8015628:	d144      	bne.n	80156b4 <rcl_init+0x13c>
 801562a:	f8d7 9000 	ldr.w	r9, [r7]
 801562e:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8015632:	f8c9 0020 	str.w	r0, [r9, #32]
 8015636:	f8c9 5018 	str.w	r5, [r9, #24]
 801563a:	f8c9 801c 	str.w	r8, [r9, #28]
 801563e:	2d00      	cmp	r5, #0
 8015640:	d04b      	beq.n	80156da <rcl_init+0x162>
 8015642:	2e00      	cmp	r6, #0
 8015644:	d049      	beq.n	80156da <rcl_init+0x162>
 8015646:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 801564a:	2104      	movs	r1, #4
 801564c:	4628      	mov	r0, r5
 801564e:	4798      	blx	r3
 8015650:	f8c9 0020 	str.w	r0, [r9, #32]
 8015654:	f8d7 9000 	ldr.w	r9, [r7]
 8015658:	f8d9 3020 	ldr.w	r3, [r9, #32]
 801565c:	46ca      	mov	sl, r9
 801565e:	b343      	cbz	r3, 80156b2 <rcl_init+0x13a>
 8015660:	2d01      	cmp	r5, #1
 8015662:	f178 0300 	sbcs.w	r3, r8, #0
 8015666:	db38      	blt.n	80156da <rcl_init+0x162>
 8015668:	2400      	movs	r4, #0
 801566a:	3e04      	subs	r6, #4
 801566c:	46a1      	mov	r9, r4
 801566e:	e00b      	b.n	8015688 <rcl_init+0x110>
 8015670:	6831      	ldr	r1, [r6, #0]
 8015672:	f004 fea8 	bl	801a3c6 <memcpy>
 8015676:	3401      	adds	r4, #1
 8015678:	f149 0900 	adc.w	r9, r9, #0
 801567c:	45c8      	cmp	r8, r9
 801567e:	bf08      	it	eq
 8015680:	42a5      	cmpeq	r5, r4
 8015682:	d028      	beq.n	80156d6 <rcl_init+0x15e>
 8015684:	f8d7 a000 	ldr.w	sl, [r7]
 8015688:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801568c:	f7ea fdca 	bl	8000224 <strlen>
 8015690:	1c42      	adds	r2, r0, #1
 8015692:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8015694:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8015696:	f8da a020 	ldr.w	sl, [sl, #32]
 801569a:	9201      	str	r2, [sp, #4]
 801569c:	4610      	mov	r0, r2
 801569e:	4798      	blx	r3
 80156a0:	683b      	ldr	r3, [r7, #0]
 80156a2:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 80156a6:	6a1b      	ldr	r3, [r3, #32]
 80156a8:	9a01      	ldr	r2, [sp, #4]
 80156aa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80156ae:	2800      	cmp	r0, #0
 80156b0:	d1de      	bne.n	8015670 <rcl_init+0xf8>
 80156b2:	240a      	movs	r4, #10
 80156b4:	4638      	mov	r0, r7
 80156b6:	f7f7 f9d5 	bl	800ca64 <__cleanup_context>
 80156ba:	e003      	b.n	80156c4 <rcl_init+0x14c>
 80156bc:	2900      	cmp	r1, #0
 80156be:	f43f af74 	beq.w	80155aa <rcl_init+0x32>
 80156c2:	240b      	movs	r4, #11
 80156c4:	4620      	mov	r0, r4
 80156c6:	b01c      	add	sp, #112	@ 0x70
 80156c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80156cc:	2464      	movs	r4, #100	@ 0x64
 80156ce:	4620      	mov	r0, r4
 80156d0:	b01c      	add	sp, #112	@ 0x70
 80156d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80156d6:	f8d7 9000 	ldr.w	r9, [r7]
 80156da:	491d      	ldr	r1, [pc, #116]	@ (8015750 <rcl_init+0x1d8>)
 80156dc:	680b      	ldr	r3, [r1, #0]
 80156de:	3301      	adds	r3, #1
 80156e0:	d023      	beq.n	801572a <rcl_init+0x1b2>
 80156e2:	600b      	str	r3, [r1, #0]
 80156e4:	461a      	mov	r2, r3
 80156e6:	2400      	movs	r4, #0
 80156e8:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80156ec:	607b      	str	r3, [r7, #4]
 80156ee:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80156f0:	6182      	str	r2, [r0, #24]
 80156f2:	3301      	adds	r3, #1
 80156f4:	61c4      	str	r4, [r0, #28]
 80156f6:	d01f      	beq.n	8015738 <rcl_init+0x1c0>
 80156f8:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 80156fc:	b94b      	cbnz	r3, 8015712 <rcl_init+0x19a>
 80156fe:	3030      	adds	r0, #48	@ 0x30
 8015700:	f000 f846 	bl	8015790 <rcl_get_localhost_only>
 8015704:	4604      	mov	r4, r0
 8015706:	2800      	cmp	r0, #0
 8015708:	d1d4      	bne.n	80156b4 <rcl_init+0x13c>
 801570a:	f8d7 9000 	ldr.w	r9, [r7]
 801570e:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8015712:	f109 0128 	add.w	r1, r9, #40	@ 0x28
 8015716:	3018      	adds	r0, #24
 8015718:	f7f9 ff5e 	bl	800f5d8 <rmw_init>
 801571c:	4604      	mov	r4, r0
 801571e:	2800      	cmp	r0, #0
 8015720:	d0d0      	beq.n	80156c4 <rcl_init+0x14c>
 8015722:	f7ff fe07 	bl	8015334 <rcl_convert_rmw_ret_to_rcl_ret>
 8015726:	4604      	mov	r4, r0
 8015728:	e7c4      	b.n	80156b4 <rcl_init+0x13c>
 801572a:	2201      	movs	r2, #1
 801572c:	461c      	mov	r4, r3
 801572e:	600a      	str	r2, [r1, #0]
 8015730:	4613      	mov	r3, r2
 8015732:	e7d9      	b.n	80156e8 <rcl_init+0x170>
 8015734:	240a      	movs	r4, #10
 8015736:	e7c5      	b.n	80156c4 <rcl_init+0x14c>
 8015738:	3024      	adds	r0, #36	@ 0x24
 801573a:	f003 fd31 	bl	80191a0 <rcl_get_default_domain_id>
 801573e:	4604      	mov	r4, r0
 8015740:	2800      	cmp	r0, #0
 8015742:	d1b7      	bne.n	80156b4 <rcl_init+0x13c>
 8015744:	f8d7 9000 	ldr.w	r9, [r7]
 8015748:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801574c:	e7d4      	b.n	80156f8 <rcl_init+0x180>
 801574e:	bf00      	nop
 8015750:	200118e4 	.word	0x200118e4

08015754 <rcl_shutdown>:
 8015754:	b1a8      	cbz	r0, 8015782 <rcl_shutdown+0x2e>
 8015756:	6803      	ldr	r3, [r0, #0]
 8015758:	b510      	push	{r4, lr}
 801575a:	4604      	mov	r4, r0
 801575c:	b173      	cbz	r3, 801577c <rcl_shutdown+0x28>
 801575e:	f7f7 f975 	bl	800ca4c <rcl_context_is_valid>
 8015762:	b140      	cbz	r0, 8015776 <rcl_shutdown+0x22>
 8015764:	6820      	ldr	r0, [r4, #0]
 8015766:	3028      	adds	r0, #40	@ 0x28
 8015768:	f7fa f86c 	bl	800f844 <rmw_shutdown>
 801576c:	4603      	mov	r3, r0
 801576e:	b958      	cbnz	r0, 8015788 <rcl_shutdown+0x34>
 8015770:	6060      	str	r0, [r4, #4]
 8015772:	4618      	mov	r0, r3
 8015774:	bd10      	pop	{r4, pc}
 8015776:	236a      	movs	r3, #106	@ 0x6a
 8015778:	4618      	mov	r0, r3
 801577a:	bd10      	pop	{r4, pc}
 801577c:	230b      	movs	r3, #11
 801577e:	4618      	mov	r0, r3
 8015780:	bd10      	pop	{r4, pc}
 8015782:	230b      	movs	r3, #11
 8015784:	4618      	mov	r0, r3
 8015786:	4770      	bx	lr
 8015788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801578c:	f7ff bdd2 	b.w	8015334 <rcl_convert_rmw_ret_to_rcl_ret>

08015790 <rcl_get_localhost_only>:
 8015790:	b510      	push	{r4, lr}
 8015792:	b082      	sub	sp, #8
 8015794:	2300      	movs	r3, #0
 8015796:	9301      	str	r3, [sp, #4]
 8015798:	b1b8      	cbz	r0, 80157ca <rcl_get_localhost_only+0x3a>
 801579a:	4604      	mov	r4, r0
 801579c:	a901      	add	r1, sp, #4
 801579e:	480c      	ldr	r0, [pc, #48]	@ (80157d0 <rcl_get_localhost_only+0x40>)
 80157a0:	f7f9 fa9c 	bl	800ecdc <rcutils_get_env>
 80157a4:	b110      	cbz	r0, 80157ac <rcl_get_localhost_only+0x1c>
 80157a6:	2001      	movs	r0, #1
 80157a8:	b002      	add	sp, #8
 80157aa:	bd10      	pop	{r4, pc}
 80157ac:	9b01      	ldr	r3, [sp, #4]
 80157ae:	b113      	cbz	r3, 80157b6 <rcl_get_localhost_only+0x26>
 80157b0:	781a      	ldrb	r2, [r3, #0]
 80157b2:	2a31      	cmp	r2, #49	@ 0x31
 80157b4:	d004      	beq.n	80157c0 <rcl_get_localhost_only+0x30>
 80157b6:	2302      	movs	r3, #2
 80157b8:	2000      	movs	r0, #0
 80157ba:	7023      	strb	r3, [r4, #0]
 80157bc:	b002      	add	sp, #8
 80157be:	bd10      	pop	{r4, pc}
 80157c0:	785b      	ldrb	r3, [r3, #1]
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	d1f7      	bne.n	80157b6 <rcl_get_localhost_only+0x26>
 80157c6:	2301      	movs	r3, #1
 80157c8:	e7f6      	b.n	80157b8 <rcl_get_localhost_only+0x28>
 80157ca:	200b      	movs	r0, #11
 80157cc:	b002      	add	sp, #8
 80157ce:	bd10      	pop	{r4, pc}
 80157d0:	0801b8c4 	.word	0x0801b8c4

080157d4 <rcl_node_resolve_name>:
 80157d4:	b082      	sub	sp, #8
 80157d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157da:	b091      	sub	sp, #68	@ 0x44
 80157dc:	ac1a      	add	r4, sp, #104	@ 0x68
 80157de:	e884 000c 	stmia.w	r4, {r2, r3}
 80157e2:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 80157e6:	2800      	cmp	r0, #0
 80157e8:	d03b      	beq.n	8015862 <rcl_node_resolve_name+0x8e>
 80157ea:	460c      	mov	r4, r1
 80157ec:	4605      	mov	r5, r0
 80157ee:	f7f7 fc4f 	bl	800d090 <rcl_node_get_options>
 80157f2:	2800      	cmp	r0, #0
 80157f4:	d037      	beq.n	8015866 <rcl_node_resolve_name+0x92>
 80157f6:	4628      	mov	r0, r5
 80157f8:	f7f7 fc3a 	bl	800d070 <rcl_node_get_name>
 80157fc:	4606      	mov	r6, r0
 80157fe:	4628      	mov	r0, r5
 8015800:	f7f7 fc3e 	bl	800d080 <rcl_node_get_namespace>
 8015804:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8015808:	4681      	mov	r9, r0
 801580a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801580e:	ad0b      	add	r5, sp, #44	@ 0x2c
 8015810:	46ac      	mov	ip, r5
 8015812:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015816:	f8de 3000 	ldr.w	r3, [lr]
 801581a:	f8cc 3000 	str.w	r3, [ip]
 801581e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015820:	b1fb      	cbz	r3, 8015862 <rcl_node_resolve_name+0x8e>
 8015822:	468a      	mov	sl, r1
 8015824:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8015828:	f001 fdee 	bl	8017408 <rcutils_get_zero_initialized_string_map>
 801582c:	ab10      	add	r3, sp, #64	@ 0x40
 801582e:	9008      	str	r0, [sp, #32]
 8015830:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8015834:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015838:	2100      	movs	r1, #0
 801583a:	e895 000c 	ldmia.w	r5, {r2, r3}
 801583e:	a808      	add	r0, sp, #32
 8015840:	f001 fe5a 	bl	80174f8 <rcutils_string_map_init>
 8015844:	4607      	mov	r7, r0
 8015846:	b180      	cbz	r0, 801586a <rcl_node_resolve_name+0x96>
 8015848:	f7f9 fa60 	bl	800ed0c <rcutils_get_error_string>
 801584c:	f7f9 fa74 	bl	800ed38 <rcutils_reset_error>
 8015850:	2f0a      	cmp	r7, #10
 8015852:	bf18      	it	ne
 8015854:	2701      	movne	r7, #1
 8015856:	4638      	mov	r0, r7
 8015858:	b011      	add	sp, #68	@ 0x44
 801585a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801585e:	b002      	add	sp, #8
 8015860:	4770      	bx	lr
 8015862:	270b      	movs	r7, #11
 8015864:	e7f7      	b.n	8015856 <rcl_node_resolve_name+0x82>
 8015866:	2701      	movs	r7, #1
 8015868:	e7f5      	b.n	8015856 <rcl_node_resolve_name+0x82>
 801586a:	9009      	str	r0, [sp, #36]	@ 0x24
 801586c:	9007      	str	r0, [sp, #28]
 801586e:	a808      	add	r0, sp, #32
 8015870:	f003 fe28 	bl	80194c4 <rcl_get_default_topic_name_substitutions>
 8015874:	4607      	mov	r7, r0
 8015876:	b1a8      	cbz	r0, 80158a4 <rcl_node_resolve_name+0xd0>
 8015878:	280a      	cmp	r0, #10
 801587a:	9c07      	ldr	r4, [sp, #28]
 801587c:	d000      	beq.n	8015880 <rcl_node_resolve_name+0xac>
 801587e:	2701      	movs	r7, #1
 8015880:	a808      	add	r0, sp, #32
 8015882:	f001 fe79 	bl	8017578 <rcutils_string_map_fini>
 8015886:	2800      	cmp	r0, #0
 8015888:	d13d      	bne.n	8015906 <rcl_node_resolve_name+0x132>
 801588a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801588c:	4659      	mov	r1, fp
 801588e:	47d0      	blx	sl
 8015890:	4659      	mov	r1, fp
 8015892:	4620      	mov	r0, r4
 8015894:	47d0      	blx	sl
 8015896:	f1b8 0f00 	cmp.w	r8, #0
 801589a:	d0dc      	beq.n	8015856 <rcl_node_resolve_name+0x82>
 801589c:	2f67      	cmp	r7, #103	@ 0x67
 801589e:	bf08      	it	eq
 80158a0:	2768      	moveq	r7, #104	@ 0x68
 80158a2:	e7d8      	b.n	8015856 <rcl_node_resolve_name+0x82>
 80158a4:	ab09      	add	r3, sp, #36	@ 0x24
 80158a6:	9305      	str	r3, [sp, #20]
 80158a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80158aa:	46ec      	mov	ip, sp
 80158ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80158b0:	682b      	ldr	r3, [r5, #0]
 80158b2:	f8cc 3000 	str.w	r3, [ip]
 80158b6:	464a      	mov	r2, r9
 80158b8:	4631      	mov	r1, r6
 80158ba:	4620      	mov	r0, r4
 80158bc:	ab08      	add	r3, sp, #32
 80158be:	f003 fca3 	bl	8019208 <rcl_expand_topic_name>
 80158c2:	4607      	mov	r7, r0
 80158c4:	b9b8      	cbnz	r0, 80158f6 <rcl_node_resolve_name+0x122>
 80158c6:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80158c8:	9009      	str	r0, [sp, #36]	@ 0x24
 80158ca:	4602      	mov	r2, r0
 80158cc:	a90a      	add	r1, sp, #40	@ 0x28
 80158ce:	4620      	mov	r0, r4
 80158d0:	f001 ff5a 	bl	8017788 <rmw_validate_full_topic_name>
 80158d4:	b988      	cbnz	r0, 80158fa <rcl_node_resolve_name+0x126>
 80158d6:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80158d8:	b9d5      	cbnz	r5, 8015910 <rcl_node_resolve_name+0x13c>
 80158da:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80158dc:	a808      	add	r0, sp, #32
 80158de:	601c      	str	r4, [r3, #0]
 80158e0:	f001 fe4a 	bl	8017578 <rcutils_string_map_fini>
 80158e4:	4607      	mov	r7, r0
 80158e6:	b1a8      	cbz	r0, 8015914 <rcl_node_resolve_name+0x140>
 80158e8:	f7f9 fa10 	bl	800ed0c <rcutils_get_error_string>
 80158ec:	462c      	mov	r4, r5
 80158ee:	f7f9 fa23 	bl	800ed38 <rcutils_reset_error>
 80158f2:	2701      	movs	r7, #1
 80158f4:	e7c9      	b.n	801588a <rcl_node_resolve_name+0xb6>
 80158f6:	9c07      	ldr	r4, [sp, #28]
 80158f8:	e7c2      	b.n	8015880 <rcl_node_resolve_name+0xac>
 80158fa:	f7f9 fa07 	bl	800ed0c <rcutils_get_error_string>
 80158fe:	2701      	movs	r7, #1
 8015900:	f7f9 fa1a 	bl	800ed38 <rcutils_reset_error>
 8015904:	e7bc      	b.n	8015880 <rcl_node_resolve_name+0xac>
 8015906:	f7f9 fa01 	bl	800ed0c <rcutils_get_error_string>
 801590a:	f7f9 fa15 	bl	800ed38 <rcutils_reset_error>
 801590e:	e7bc      	b.n	801588a <rcl_node_resolve_name+0xb6>
 8015910:	2767      	movs	r7, #103	@ 0x67
 8015912:	e7b5      	b.n	8015880 <rcl_node_resolve_name+0xac>
 8015914:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015916:	4659      	mov	r1, fp
 8015918:	47d0      	blx	sl
 801591a:	4659      	mov	r1, fp
 801591c:	4638      	mov	r0, r7
 801591e:	47d0      	blx	sl
 8015920:	e799      	b.n	8015856 <rcl_node_resolve_name+0x82>
 8015922:	bf00      	nop

08015924 <rcl_service_get_rmw_handle>:
 8015924:	b118      	cbz	r0, 801592e <rcl_service_get_rmw_handle+0xa>
 8015926:	6800      	ldr	r0, [r0, #0]
 8015928:	b108      	cbz	r0, 801592e <rcl_service_get_rmw_handle+0xa>
 801592a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801592e:	4770      	bx	lr

08015930 <rcl_take_request>:
 8015930:	b570      	push	{r4, r5, r6, lr}
 8015932:	468e      	mov	lr, r1
 8015934:	460c      	mov	r4, r1
 8015936:	4616      	mov	r6, r2
 8015938:	4605      	mov	r5, r0
 801593a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801593e:	b08c      	sub	sp, #48	@ 0x30
 8015940:	f10d 0c18 	add.w	ip, sp, #24
 8015944:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015948:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801594c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015950:	b30d      	cbz	r5, 8015996 <rcl_take_request+0x66>
 8015952:	682b      	ldr	r3, [r5, #0]
 8015954:	b1fb      	cbz	r3, 8015996 <rcl_take_request+0x66>
 8015956:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801595a:	b1e0      	cbz	r0, 8015996 <rcl_take_request+0x66>
 801595c:	b336      	cbz	r6, 80159ac <rcl_take_request+0x7c>
 801595e:	2300      	movs	r3, #0
 8015960:	f88d 3007 	strb.w	r3, [sp, #7]
 8015964:	4632      	mov	r2, r6
 8015966:	f10d 0307 	add.w	r3, sp, #7
 801596a:	a902      	add	r1, sp, #8
 801596c:	f002 f9c0 	bl	8017cf0 <rmw_take_request>
 8015970:	4605      	mov	r5, r0
 8015972:	b198      	cbz	r0, 801599c <rcl_take_request+0x6c>
 8015974:	280a      	cmp	r0, #10
 8015976:	bf18      	it	ne
 8015978:	2501      	movne	r5, #1
 801597a:	f10d 0e18 	add.w	lr, sp, #24
 801597e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015982:	46a4      	mov	ip, r4
 8015984:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015988:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801598c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015990:	4628      	mov	r0, r5
 8015992:	b00c      	add	sp, #48	@ 0x30
 8015994:	bd70      	pop	{r4, r5, r6, pc}
 8015996:	f44f 7516 	mov.w	r5, #600	@ 0x258
 801599a:	e7ee      	b.n	801597a <rcl_take_request+0x4a>
 801599c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80159a0:	f240 2359 	movw	r3, #601	@ 0x259
 80159a4:	2a00      	cmp	r2, #0
 80159a6:	bf08      	it	eq
 80159a8:	461d      	moveq	r5, r3
 80159aa:	e7e6      	b.n	801597a <rcl_take_request+0x4a>
 80159ac:	250b      	movs	r5, #11
 80159ae:	e7e4      	b.n	801597a <rcl_take_request+0x4a>

080159b0 <rcl_send_response>:
 80159b0:	b170      	cbz	r0, 80159d0 <rcl_send_response+0x20>
 80159b2:	6800      	ldr	r0, [r0, #0]
 80159b4:	b160      	cbz	r0, 80159d0 <rcl_send_response+0x20>
 80159b6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80159ba:	b148      	cbz	r0, 80159d0 <rcl_send_response+0x20>
 80159bc:	b159      	cbz	r1, 80159d6 <rcl_send_response+0x26>
 80159be:	b510      	push	{r4, lr}
 80159c0:	b15a      	cbz	r2, 80159da <rcl_send_response+0x2a>
 80159c2:	f002 f9f3 	bl	8017dac <rmw_send_response>
 80159c6:	b110      	cbz	r0, 80159ce <rcl_send_response+0x1e>
 80159c8:	2802      	cmp	r0, #2
 80159ca:	bf18      	it	ne
 80159cc:	2001      	movne	r0, #1
 80159ce:	bd10      	pop	{r4, pc}
 80159d0:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80159d4:	4770      	bx	lr
 80159d6:	200b      	movs	r0, #11
 80159d8:	4770      	bx	lr
 80159da:	200b      	movs	r0, #11
 80159dc:	bd10      	pop	{r4, pc}
 80159de:	bf00      	nop

080159e0 <rcl_service_is_valid>:
 80159e0:	b130      	cbz	r0, 80159f0 <rcl_service_is_valid+0x10>
 80159e2:	6800      	ldr	r0, [r0, #0]
 80159e4:	b120      	cbz	r0, 80159f0 <rcl_service_is_valid+0x10>
 80159e6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80159ea:	3800      	subs	r0, #0
 80159ec:	bf18      	it	ne
 80159ee:	2001      	movne	r0, #1
 80159f0:	4770      	bx	lr
 80159f2:	bf00      	nop

080159f4 <rcl_get_system_time>:
 80159f4:	4608      	mov	r0, r1
 80159f6:	f7f9 bb13 	b.w	800f020 <rcutils_system_time_now>
 80159fa:	bf00      	nop

080159fc <rcl_get_steady_time>:
 80159fc:	4608      	mov	r0, r1
 80159fe:	f7f9 bb37 	b.w	800f070 <rcutils_steady_time_now>
 8015a02:	bf00      	nop

08015a04 <rcl_get_ros_time>:
 8015a04:	7a03      	ldrb	r3, [r0, #8]
 8015a06:	b510      	push	{r4, lr}
 8015a08:	460c      	mov	r4, r1
 8015a0a:	b133      	cbz	r3, 8015a1a <rcl_get_ros_time+0x16>
 8015a0c:	2105      	movs	r1, #5
 8015a0e:	f7f9 f8c1 	bl	800eb94 <__atomic_load_8>
 8015a12:	e9c4 0100 	strd	r0, r1, [r4]
 8015a16:	2000      	movs	r0, #0
 8015a18:	bd10      	pop	{r4, pc}
 8015a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a1e:	4608      	mov	r0, r1
 8015a20:	f7f9 bafe 	b.w	800f020 <rcutils_system_time_now>

08015a24 <rcl_clock_init>:
 8015a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a26:	4605      	mov	r5, r0
 8015a28:	4610      	mov	r0, r2
 8015a2a:	4614      	mov	r4, r2
 8015a2c:	460e      	mov	r6, r1
 8015a2e:	f7f9 f8a3 	bl	800eb78 <rcutils_allocator_is_valid>
 8015a32:	b128      	cbz	r0, 8015a40 <rcl_clock_init+0x1c>
 8015a34:	2d03      	cmp	r5, #3
 8015a36:	d803      	bhi.n	8015a40 <rcl_clock_init+0x1c>
 8015a38:	e8df f005 	tbb	[pc, r5]
 8015a3c:	06532e1d 	.word	0x06532e1d
 8015a40:	f04f 0c0b 	mov.w	ip, #11
 8015a44:	4660      	mov	r0, ip
 8015a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a48:	2e00      	cmp	r6, #0
 8015a4a:	d0f9      	beq.n	8015a40 <rcl_clock_init+0x1c>
 8015a4c:	2c00      	cmp	r4, #0
 8015a4e:	d0f7      	beq.n	8015a40 <rcl_clock_init+0x1c>
 8015a50:	2300      	movs	r3, #0
 8015a52:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8015a56:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8015b0c <rcl_clock_init+0xe8>
 8015a5a:	6133      	str	r3, [r6, #16]
 8015a5c:	f106 0514 	add.w	r5, r6, #20
 8015a60:	469c      	mov	ip, r3
 8015a62:	2703      	movs	r7, #3
 8015a64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015a66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015a68:	6823      	ldr	r3, [r4, #0]
 8015a6a:	602b      	str	r3, [r5, #0]
 8015a6c:	7037      	strb	r7, [r6, #0]
 8015a6e:	f8c6 e00c 	str.w	lr, [r6, #12]
 8015a72:	4660      	mov	r0, ip
 8015a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a76:	2e00      	cmp	r6, #0
 8015a78:	d0e2      	beq.n	8015a40 <rcl_clock_init+0x1c>
 8015a7a:	2300      	movs	r3, #0
 8015a7c:	7033      	strb	r3, [r6, #0]
 8015a7e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8015a82:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8015a86:	469c      	mov	ip, r3
 8015a88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015a8a:	f106 0514 	add.w	r5, r6, #20
 8015a8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015a90:	6823      	ldr	r3, [r4, #0]
 8015a92:	602b      	str	r3, [r5, #0]
 8015a94:	4660      	mov	r0, ip
 8015a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a98:	2e00      	cmp	r6, #0
 8015a9a:	d0d1      	beq.n	8015a40 <rcl_clock_init+0x1c>
 8015a9c:	2c00      	cmp	r4, #0
 8015a9e:	d0cf      	beq.n	8015a40 <rcl_clock_init+0x1c>
 8015aa0:	2700      	movs	r7, #0
 8015aa2:	7037      	strb	r7, [r6, #0]
 8015aa4:	46a4      	mov	ip, r4
 8015aa6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015aaa:	f106 0514 	add.w	r5, r6, #20
 8015aae:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8015ab2:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8015ab6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015ab8:	f8dc 3000 	ldr.w	r3, [ip]
 8015abc:	602b      	str	r3, [r5, #0]
 8015abe:	6921      	ldr	r1, [r4, #16]
 8015ac0:	6823      	ldr	r3, [r4, #0]
 8015ac2:	2010      	movs	r0, #16
 8015ac4:	4798      	blx	r3
 8015ac6:	6130      	str	r0, [r6, #16]
 8015ac8:	b1d0      	cbz	r0, 8015b00 <rcl_clock_init+0xdc>
 8015aca:	2200      	movs	r2, #0
 8015acc:	2300      	movs	r3, #0
 8015ace:	e9c0 2300 	strd	r2, r3, [r0]
 8015ad2:	2301      	movs	r3, #1
 8015ad4:	7207      	strb	r7, [r0, #8]
 8015ad6:	4a0c      	ldr	r2, [pc, #48]	@ (8015b08 <rcl_clock_init+0xe4>)
 8015ad8:	7033      	strb	r3, [r6, #0]
 8015ada:	46bc      	mov	ip, r7
 8015adc:	60f2      	str	r2, [r6, #12]
 8015ade:	4660      	mov	r0, ip
 8015ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ae2:	2e00      	cmp	r6, #0
 8015ae4:	d0ac      	beq.n	8015a40 <rcl_clock_init+0x1c>
 8015ae6:	2c00      	cmp	r4, #0
 8015ae8:	d0aa      	beq.n	8015a40 <rcl_clock_init+0x1c>
 8015aea:	2300      	movs	r3, #0
 8015aec:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8015af0:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8015b10 <rcl_clock_init+0xec>
 8015af4:	6133      	str	r3, [r6, #16]
 8015af6:	f106 0514 	add.w	r5, r6, #20
 8015afa:	469c      	mov	ip, r3
 8015afc:	2702      	movs	r7, #2
 8015afe:	e7b1      	b.n	8015a64 <rcl_clock_init+0x40>
 8015b00:	f04f 0c0a 	mov.w	ip, #10
 8015b04:	e79e      	b.n	8015a44 <rcl_clock_init+0x20>
 8015b06:	bf00      	nop
 8015b08:	08015a05 	.word	0x08015a05
 8015b0c:	080159fd 	.word	0x080159fd
 8015b10:	080159f5 	.word	0x080159f5

08015b14 <rcl_clock_fini>:
 8015b14:	2800      	cmp	r0, #0
 8015b16:	d02c      	beq.n	8015b72 <rcl_clock_fini+0x5e>
 8015b18:	b538      	push	{r3, r4, r5, lr}
 8015b1a:	4604      	mov	r4, r0
 8015b1c:	3014      	adds	r0, #20
 8015b1e:	f7f9 f82b 	bl	800eb78 <rcutils_allocator_is_valid>
 8015b22:	b140      	cbz	r0, 8015b36 <rcl_clock_fini+0x22>
 8015b24:	7823      	ldrb	r3, [r4, #0]
 8015b26:	2b02      	cmp	r3, #2
 8015b28:	d007      	beq.n	8015b3a <rcl_clock_fini+0x26>
 8015b2a:	2b03      	cmp	r3, #3
 8015b2c:	d005      	beq.n	8015b3a <rcl_clock_fini+0x26>
 8015b2e:	2b01      	cmp	r3, #1
 8015b30:	d00f      	beq.n	8015b52 <rcl_clock_fini+0x3e>
 8015b32:	200b      	movs	r0, #11
 8015b34:	bd38      	pop	{r3, r4, r5, pc}
 8015b36:	2001      	movs	r0, #1
 8015b38:	bd38      	pop	{r3, r4, r5, pc}
 8015b3a:	68a0      	ldr	r0, [r4, #8]
 8015b3c:	2800      	cmp	r0, #0
 8015b3e:	d0f9      	beq.n	8015b34 <rcl_clock_fini+0x20>
 8015b40:	2500      	movs	r5, #0
 8015b42:	6860      	ldr	r0, [r4, #4]
 8015b44:	69a3      	ldr	r3, [r4, #24]
 8015b46:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8015b48:	60a5      	str	r5, [r4, #8]
 8015b4a:	4798      	blx	r3
 8015b4c:	6065      	str	r5, [r4, #4]
 8015b4e:	4628      	mov	r0, r5
 8015b50:	bd38      	pop	{r3, r4, r5, pc}
 8015b52:	68a3      	ldr	r3, [r4, #8]
 8015b54:	b133      	cbz	r3, 8015b64 <rcl_clock_fini+0x50>
 8015b56:	2500      	movs	r5, #0
 8015b58:	69a3      	ldr	r3, [r4, #24]
 8015b5a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8015b5c:	6860      	ldr	r0, [r4, #4]
 8015b5e:	60a5      	str	r5, [r4, #8]
 8015b60:	4798      	blx	r3
 8015b62:	6065      	str	r5, [r4, #4]
 8015b64:	6920      	ldr	r0, [r4, #16]
 8015b66:	69a3      	ldr	r3, [r4, #24]
 8015b68:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8015b6a:	4798      	blx	r3
 8015b6c:	2000      	movs	r0, #0
 8015b6e:	6120      	str	r0, [r4, #16]
 8015b70:	bd38      	pop	{r3, r4, r5, pc}
 8015b72:	200b      	movs	r0, #11
 8015b74:	4770      	bx	lr
 8015b76:	bf00      	nop

08015b78 <rcl_clock_get_now>:
 8015b78:	b140      	cbz	r0, 8015b8c <rcl_clock_get_now+0x14>
 8015b7a:	b139      	cbz	r1, 8015b8c <rcl_clock_get_now+0x14>
 8015b7c:	7803      	ldrb	r3, [r0, #0]
 8015b7e:	b11b      	cbz	r3, 8015b88 <rcl_clock_get_now+0x10>
 8015b80:	68c3      	ldr	r3, [r0, #12]
 8015b82:	b10b      	cbz	r3, 8015b88 <rcl_clock_get_now+0x10>
 8015b84:	6900      	ldr	r0, [r0, #16]
 8015b86:	4718      	bx	r3
 8015b88:	2001      	movs	r0, #1
 8015b8a:	4770      	bx	lr
 8015b8c:	200b      	movs	r0, #11
 8015b8e:	4770      	bx	lr

08015b90 <rcl_clock_add_jump_callback>:
 8015b90:	b082      	sub	sp, #8
 8015b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b96:	a906      	add	r1, sp, #24
 8015b98:	e881 000c 	stmia.w	r1, {r2, r3}
 8015b9c:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 8015ba0:	b320      	cbz	r0, 8015bec <rcl_clock_add_jump_callback+0x5c>
 8015ba2:	4604      	mov	r4, r0
 8015ba4:	3014      	adds	r0, #20
 8015ba6:	f7f8 ffe7 	bl	800eb78 <rcutils_allocator_is_valid>
 8015baa:	b1f8      	cbz	r0, 8015bec <rcl_clock_add_jump_callback+0x5c>
 8015bac:	b1f6      	cbz	r6, 8015bec <rcl_clock_add_jump_callback+0x5c>
 8015bae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	db1b      	blt.n	8015bec <rcl_clock_add_jump_callback+0x5c>
 8015bb4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8015bb8:	2a01      	cmp	r2, #1
 8015bba:	f173 0300 	sbcs.w	r3, r3, #0
 8015bbe:	da15      	bge.n	8015bec <rcl_clock_add_jump_callback+0x5c>
 8015bc0:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8015bc4:	2f00      	cmp	r7, #0
 8015bc6:	d042      	beq.n	8015c4e <rcl_clock_add_jump_callback+0xbe>
 8015bc8:	2300      	movs	r3, #0
 8015bca:	4602      	mov	r2, r0
 8015bcc:	e003      	b.n	8015bd6 <rcl_clock_add_jump_callback+0x46>
 8015bce:	42bb      	cmp	r3, r7
 8015bd0:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8015bd4:	d011      	beq.n	8015bfa <rcl_clock_add_jump_callback+0x6a>
 8015bd6:	6811      	ldr	r1, [r2, #0]
 8015bd8:	42b1      	cmp	r1, r6
 8015bda:	f103 0301 	add.w	r3, r3, #1
 8015bde:	d1f6      	bne.n	8015bce <rcl_clock_add_jump_callback+0x3e>
 8015be0:	6a11      	ldr	r1, [r2, #32]
 8015be2:	42a9      	cmp	r1, r5
 8015be4:	d1f3      	bne.n	8015bce <rcl_clock_add_jump_callback+0x3e>
 8015be6:	f04f 0e01 	mov.w	lr, #1
 8015bea:	e001      	b.n	8015bf0 <rcl_clock_add_jump_callback+0x60>
 8015bec:	f04f 0e0b 	mov.w	lr, #11
 8015bf0:	4670      	mov	r0, lr
 8015bf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015bf6:	b002      	add	sp, #8
 8015bf8:	4770      	bx	lr
 8015bfa:	3301      	adds	r3, #1
 8015bfc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015c00:	00d9      	lsls	r1, r3, #3
 8015c02:	69e3      	ldr	r3, [r4, #28]
 8015c04:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8015c06:	4798      	blx	r3
 8015c08:	b1f0      	cbz	r0, 8015c48 <rcl_clock_add_jump_callback+0xb8>
 8015c0a:	68a3      	ldr	r3, [r4, #8]
 8015c0c:	6060      	str	r0, [r4, #4]
 8015c0e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8015c12:	f10d 0c18 	add.w	ip, sp, #24
 8015c16:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 8015c1a:	f103 0801 	add.w	r8, r3, #1
 8015c1e:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8015c22:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015c26:	f106 0708 	add.w	r7, r6, #8
 8015c2a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015c2c:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8015c30:	f04f 0e00 	mov.w	lr, #0
 8015c34:	e887 0003 	stmia.w	r7, {r0, r1}
 8015c38:	6235      	str	r5, [r6, #32]
 8015c3a:	4670      	mov	r0, lr
 8015c3c:	f8c4 8008 	str.w	r8, [r4, #8]
 8015c40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015c44:	b002      	add	sp, #8
 8015c46:	4770      	bx	lr
 8015c48:	f04f 0e0a 	mov.w	lr, #10
 8015c4c:	e7d0      	b.n	8015bf0 <rcl_clock_add_jump_callback+0x60>
 8015c4e:	2128      	movs	r1, #40	@ 0x28
 8015c50:	e7d7      	b.n	8015c02 <rcl_clock_add_jump_callback+0x72>
 8015c52:	bf00      	nop

08015c54 <rcl_clock_remove_jump_callback>:
 8015c54:	2800      	cmp	r0, #0
 8015c56:	d057      	beq.n	8015d08 <rcl_clock_remove_jump_callback+0xb4>
 8015c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015c5c:	4605      	mov	r5, r0
 8015c5e:	3014      	adds	r0, #20
 8015c60:	4688      	mov	r8, r1
 8015c62:	4692      	mov	sl, r2
 8015c64:	f7f8 ff88 	bl	800eb78 <rcutils_allocator_is_valid>
 8015c68:	2800      	cmp	r0, #0
 8015c6a:	d03b      	beq.n	8015ce4 <rcl_clock_remove_jump_callback+0x90>
 8015c6c:	f1b8 0f00 	cmp.w	r8, #0
 8015c70:	d038      	beq.n	8015ce4 <rcl_clock_remove_jump_callback+0x90>
 8015c72:	68ae      	ldr	r6, [r5, #8]
 8015c74:	b166      	cbz	r6, 8015c90 <rcl_clock_remove_jump_callback+0x3c>
 8015c76:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8015c7a:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 8015c7e:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 8015c82:	464c      	mov	r4, r9
 8015c84:	6823      	ldr	r3, [r4, #0]
 8015c86:	4543      	cmp	r3, r8
 8015c88:	d005      	beq.n	8015c96 <rcl_clock_remove_jump_callback+0x42>
 8015c8a:	3428      	adds	r4, #40	@ 0x28
 8015c8c:	42a7      	cmp	r7, r4
 8015c8e:	d1f9      	bne.n	8015c84 <rcl_clock_remove_jump_callback+0x30>
 8015c90:	2001      	movs	r0, #1
 8015c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c96:	6a23      	ldr	r3, [r4, #32]
 8015c98:	3428      	adds	r4, #40	@ 0x28
 8015c9a:	42bc      	cmp	r4, r7
 8015c9c:	d02d      	beq.n	8015cfa <rcl_clock_remove_jump_callback+0xa6>
 8015c9e:	4553      	cmp	r3, sl
 8015ca0:	d1f0      	bne.n	8015c84 <rcl_clock_remove_jump_callback+0x30>
 8015ca2:	46a6      	mov	lr, r4
 8015ca4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015ca8:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8015cac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015cb0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015cb4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015cb8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015cbc:	3428      	adds	r4, #40	@ 0x28
 8015cbe:	42a7      	cmp	r7, r4
 8015cc0:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015cc4:	d1ed      	bne.n	8015ca2 <rcl_clock_remove_jump_callback+0x4e>
 8015cc6:	3e01      	subs	r6, #1
 8015cc8:	60ae      	str	r6, [r5, #8]
 8015cca:	b176      	cbz	r6, 8015cea <rcl_clock_remove_jump_callback+0x96>
 8015ccc:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8015cd0:	69eb      	ldr	r3, [r5, #28]
 8015cd2:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8015cd4:	00f1      	lsls	r1, r6, #3
 8015cd6:	4648      	mov	r0, r9
 8015cd8:	4798      	blx	r3
 8015cda:	b1b8      	cbz	r0, 8015d0c <rcl_clock_remove_jump_callback+0xb8>
 8015cdc:	6068      	str	r0, [r5, #4]
 8015cde:	2000      	movs	r0, #0
 8015ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ce4:	200b      	movs	r0, #11
 8015ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015cea:	4648      	mov	r0, r9
 8015cec:	69ab      	ldr	r3, [r5, #24]
 8015cee:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8015cf0:	4798      	blx	r3
 8015cf2:	606e      	str	r6, [r5, #4]
 8015cf4:	4630      	mov	r0, r6
 8015cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015cfa:	4553      	cmp	r3, sl
 8015cfc:	d1c8      	bne.n	8015c90 <rcl_clock_remove_jump_callback+0x3c>
 8015cfe:	3e01      	subs	r6, #1
 8015d00:	60ae      	str	r6, [r5, #8]
 8015d02:	2e00      	cmp	r6, #0
 8015d04:	d1e2      	bne.n	8015ccc <rcl_clock_remove_jump_callback+0x78>
 8015d06:	e7f0      	b.n	8015cea <rcl_clock_remove_jump_callback+0x96>
 8015d08:	200b      	movs	r0, #11
 8015d0a:	4770      	bx	lr
 8015d0c:	200a      	movs	r0, #10
 8015d0e:	e7ea      	b.n	8015ce6 <rcl_clock_remove_jump_callback+0x92>

08015d10 <rcl_get_zero_initialized_wait_set>:
 8015d10:	b510      	push	{r4, lr}
 8015d12:	4c08      	ldr	r4, [pc, #32]	@ (8015d34 <rcl_get_zero_initialized_wait_set+0x24>)
 8015d14:	4686      	mov	lr, r0
 8015d16:	4684      	mov	ip, r0
 8015d18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015d1a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015d1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015d20:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015d24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015d26:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015d2a:	6823      	ldr	r3, [r4, #0]
 8015d2c:	f8cc 3000 	str.w	r3, [ip]
 8015d30:	4670      	mov	r0, lr
 8015d32:	bd10      	pop	{r4, pc}
 8015d34:	0801bfdc 	.word	0x0801bfdc

08015d38 <rcl_wait_set_is_valid>:
 8015d38:	b118      	cbz	r0, 8015d42 <rcl_wait_set_is_valid+0xa>
 8015d3a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8015d3c:	3800      	subs	r0, #0
 8015d3e:	bf18      	it	ne
 8015d40:	2001      	movne	r0, #1
 8015d42:	4770      	bx	lr

08015d44 <rcl_wait_set_fini>:
 8015d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d48:	b082      	sub	sp, #8
 8015d4a:	2800      	cmp	r0, #0
 8015d4c:	f000 8095 	beq.w	8015e7a <rcl_wait_set_fini+0x136>
 8015d50:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8015d52:	4604      	mov	r4, r0
 8015d54:	2e00      	cmp	r6, #0
 8015d56:	f000 808c 	beq.w	8015e72 <rcl_wait_set_fini+0x12e>
 8015d5a:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8015d5c:	f002 fa5e 	bl	801821c <rmw_destroy_wait_set>
 8015d60:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015d62:	1e06      	subs	r6, r0, #0
 8015d64:	bf18      	it	ne
 8015d66:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8015d6a:	2d00      	cmp	r5, #0
 8015d6c:	f000 8081 	beq.w	8015e72 <rcl_wait_set_fini+0x12e>
 8015d70:	6820      	ldr	r0, [r4, #0]
 8015d72:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8015d76:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015d78:	2700      	movs	r7, #0
 8015d7a:	6067      	str	r7, [r4, #4]
 8015d7c:	602f      	str	r7, [r5, #0]
 8015d7e:	b120      	cbz	r0, 8015d8a <rcl_wait_set_fini+0x46>
 8015d80:	9101      	str	r1, [sp, #4]
 8015d82:	47c0      	blx	r8
 8015d84:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015d86:	9901      	ldr	r1, [sp, #4]
 8015d88:	6027      	str	r7, [r4, #0]
 8015d8a:	68a8      	ldr	r0, [r5, #8]
 8015d8c:	b120      	cbz	r0, 8015d98 <rcl_wait_set_fini+0x54>
 8015d8e:	47c0      	blx	r8
 8015d90:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015d92:	2300      	movs	r3, #0
 8015d94:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8015d98:	68a0      	ldr	r0, [r4, #8]
 8015d9a:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8015d9c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015d9e:	f04f 0800 	mov.w	r8, #0
 8015da2:	f8c4 800c 	str.w	r8, [r4, #12]
 8015da6:	f8c5 800c 	str.w	r8, [r5, #12]
 8015daa:	b128      	cbz	r0, 8015db8 <rcl_wait_set_fini+0x74>
 8015dac:	47b8      	blx	r7
 8015dae:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015db0:	f8c4 8008 	str.w	r8, [r4, #8]
 8015db4:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8015db6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015db8:	6968      	ldr	r0, [r5, #20]
 8015dba:	f04f 0800 	mov.w	r8, #0
 8015dbe:	f8c5 8010 	str.w	r8, [r5, #16]
 8015dc2:	b128      	cbz	r0, 8015dd0 <rcl_wait_set_fini+0x8c>
 8015dc4:	47b8      	blx	r7
 8015dc6:	f8c5 8014 	str.w	r8, [r5, #20]
 8015dca:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015dcc:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8015dce:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015dd0:	6920      	ldr	r0, [r4, #16]
 8015dd2:	f04f 0800 	mov.w	r8, #0
 8015dd6:	f8c4 8014 	str.w	r8, [r4, #20]
 8015dda:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8015dde:	b128      	cbz	r0, 8015dec <rcl_wait_set_fini+0xa8>
 8015de0:	47b8      	blx	r7
 8015de2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015de4:	f8c4 8010 	str.w	r8, [r4, #16]
 8015de8:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8015dea:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015dec:	69a0      	ldr	r0, [r4, #24]
 8015dee:	f04f 0800 	mov.w	r8, #0
 8015df2:	f8c4 801c 	str.w	r8, [r4, #28]
 8015df6:	f8c5 8018 	str.w	r8, [r5, #24]
 8015dfa:	b128      	cbz	r0, 8015e08 <rcl_wait_set_fini+0xc4>
 8015dfc:	9101      	str	r1, [sp, #4]
 8015dfe:	47b8      	blx	r7
 8015e00:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015e02:	9901      	ldr	r1, [sp, #4]
 8015e04:	f8c4 8018 	str.w	r8, [r4, #24]
 8015e08:	6a28      	ldr	r0, [r5, #32]
 8015e0a:	b120      	cbz	r0, 8015e16 <rcl_wait_set_fini+0xd2>
 8015e0c:	47b8      	blx	r7
 8015e0e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015e10:	2300      	movs	r3, #0
 8015e12:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8015e16:	6a20      	ldr	r0, [r4, #32]
 8015e18:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8015e1c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015e1e:	2700      	movs	r7, #0
 8015e20:	6267      	str	r7, [r4, #36]	@ 0x24
 8015e22:	626f      	str	r7, [r5, #36]	@ 0x24
 8015e24:	b120      	cbz	r0, 8015e30 <rcl_wait_set_fini+0xec>
 8015e26:	9101      	str	r1, [sp, #4]
 8015e28:	47c0      	blx	r8
 8015e2a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015e2c:	9901      	ldr	r1, [sp, #4]
 8015e2e:	6227      	str	r7, [r4, #32]
 8015e30:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8015e32:	b120      	cbz	r0, 8015e3e <rcl_wait_set_fini+0xfa>
 8015e34:	47c0      	blx	r8
 8015e36:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015e38:	2300      	movs	r3, #0
 8015e3a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8015e3e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8015e40:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8015e44:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015e46:	2700      	movs	r7, #0
 8015e48:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8015e4a:	632f      	str	r7, [r5, #48]	@ 0x30
 8015e4c:	b120      	cbz	r0, 8015e58 <rcl_wait_set_fini+0x114>
 8015e4e:	9101      	str	r1, [sp, #4]
 8015e50:	47c0      	blx	r8
 8015e52:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015e54:	9901      	ldr	r1, [sp, #4]
 8015e56:	62a7      	str	r7, [r4, #40]	@ 0x28
 8015e58:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8015e5a:	b120      	cbz	r0, 8015e66 <rcl_wait_set_fini+0x122>
 8015e5c:	47c0      	blx	r8
 8015e5e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015e60:	2300      	movs	r3, #0
 8015e62:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8015e66:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8015e68:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015e6a:	4628      	mov	r0, r5
 8015e6c:	4798      	blx	r3
 8015e6e:	2300      	movs	r3, #0
 8015e70:	6323      	str	r3, [r4, #48]	@ 0x30
 8015e72:	4630      	mov	r0, r6
 8015e74:	b002      	add	sp, #8
 8015e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e7a:	260b      	movs	r6, #11
 8015e7c:	4630      	mov	r0, r6
 8015e7e:	b002      	add	sp, #8
 8015e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015e84 <rcl_wait_set_add_subscription>:
 8015e84:	b318      	cbz	r0, 8015ece <rcl_wait_set_add_subscription+0x4a>
 8015e86:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015e88:	b570      	push	{r4, r5, r6, lr}
 8015e8a:	4604      	mov	r4, r0
 8015e8c:	b30b      	cbz	r3, 8015ed2 <rcl_wait_set_add_subscription+0x4e>
 8015e8e:	b319      	cbz	r1, 8015ed8 <rcl_wait_set_add_subscription+0x54>
 8015e90:	681d      	ldr	r5, [r3, #0]
 8015e92:	6840      	ldr	r0, [r0, #4]
 8015e94:	4285      	cmp	r5, r0
 8015e96:	d217      	bcs.n	8015ec8 <rcl_wait_set_add_subscription+0x44>
 8015e98:	6820      	ldr	r0, [r4, #0]
 8015e9a:	1c6e      	adds	r6, r5, #1
 8015e9c:	601e      	str	r6, [r3, #0]
 8015e9e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015ea2:	b102      	cbz	r2, 8015ea6 <rcl_wait_set_add_subscription+0x22>
 8015ea4:	6015      	str	r5, [r2, #0]
 8015ea6:	4608      	mov	r0, r1
 8015ea8:	f7f7 fbf6 	bl	800d698 <rcl_subscription_get_rmw_handle>
 8015eac:	b150      	cbz	r0, 8015ec4 <rcl_wait_set_add_subscription+0x40>
 8015eae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015eb0:	6842      	ldr	r2, [r0, #4]
 8015eb2:	689b      	ldr	r3, [r3, #8]
 8015eb4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015eb8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015eba:	6853      	ldr	r3, [r2, #4]
 8015ebc:	3301      	adds	r3, #1
 8015ebe:	2000      	movs	r0, #0
 8015ec0:	6053      	str	r3, [r2, #4]
 8015ec2:	bd70      	pop	{r4, r5, r6, pc}
 8015ec4:	2001      	movs	r0, #1
 8015ec6:	bd70      	pop	{r4, r5, r6, pc}
 8015ec8:	f240 3086 	movw	r0, #902	@ 0x386
 8015ecc:	bd70      	pop	{r4, r5, r6, pc}
 8015ece:	200b      	movs	r0, #11
 8015ed0:	4770      	bx	lr
 8015ed2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015ed6:	bd70      	pop	{r4, r5, r6, pc}
 8015ed8:	200b      	movs	r0, #11
 8015eda:	bd70      	pop	{r4, r5, r6, pc}

08015edc <rcl_wait_set_clear>:
 8015edc:	2800      	cmp	r0, #0
 8015ede:	d073      	beq.n	8015fc8 <rcl_wait_set_clear+0xec>
 8015ee0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015ee2:	b510      	push	{r4, lr}
 8015ee4:	4604      	mov	r4, r0
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d070      	beq.n	8015fcc <rcl_wait_set_clear+0xf0>
 8015eea:	6800      	ldr	r0, [r0, #0]
 8015eec:	b138      	cbz	r0, 8015efe <rcl_wait_set_clear+0x22>
 8015eee:	6862      	ldr	r2, [r4, #4]
 8015ef0:	2100      	movs	r1, #0
 8015ef2:	0092      	lsls	r2, r2, #2
 8015ef4:	f004 f99e 	bl	801a234 <memset>
 8015ef8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015efa:	2200      	movs	r2, #0
 8015efc:	601a      	str	r2, [r3, #0]
 8015efe:	68a0      	ldr	r0, [r4, #8]
 8015f00:	b138      	cbz	r0, 8015f12 <rcl_wait_set_clear+0x36>
 8015f02:	68e2      	ldr	r2, [r4, #12]
 8015f04:	2100      	movs	r1, #0
 8015f06:	0092      	lsls	r2, r2, #2
 8015f08:	f004 f994 	bl	801a234 <memset>
 8015f0c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015f0e:	2200      	movs	r2, #0
 8015f10:	60da      	str	r2, [r3, #12]
 8015f12:	69a0      	ldr	r0, [r4, #24]
 8015f14:	b138      	cbz	r0, 8015f26 <rcl_wait_set_clear+0x4a>
 8015f16:	69e2      	ldr	r2, [r4, #28]
 8015f18:	2100      	movs	r1, #0
 8015f1a:	0092      	lsls	r2, r2, #2
 8015f1c:	f004 f98a 	bl	801a234 <memset>
 8015f20:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015f22:	2200      	movs	r2, #0
 8015f24:	619a      	str	r2, [r3, #24]
 8015f26:	6a20      	ldr	r0, [r4, #32]
 8015f28:	b138      	cbz	r0, 8015f3a <rcl_wait_set_clear+0x5e>
 8015f2a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8015f2c:	2100      	movs	r1, #0
 8015f2e:	0092      	lsls	r2, r2, #2
 8015f30:	f004 f980 	bl	801a234 <memset>
 8015f34:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015f36:	2200      	movs	r2, #0
 8015f38:	625a      	str	r2, [r3, #36]	@ 0x24
 8015f3a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8015f3c:	b138      	cbz	r0, 8015f4e <rcl_wait_set_clear+0x72>
 8015f3e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8015f40:	2100      	movs	r1, #0
 8015f42:	0092      	lsls	r2, r2, #2
 8015f44:	f004 f976 	bl	801a234 <memset>
 8015f48:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015f4a:	2200      	movs	r2, #0
 8015f4c:	631a      	str	r2, [r3, #48]	@ 0x30
 8015f4e:	6920      	ldr	r0, [r4, #16]
 8015f50:	b138      	cbz	r0, 8015f62 <rcl_wait_set_clear+0x86>
 8015f52:	6962      	ldr	r2, [r4, #20]
 8015f54:	2100      	movs	r1, #0
 8015f56:	0092      	lsls	r2, r2, #2
 8015f58:	f004 f96c 	bl	801a234 <memset>
 8015f5c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015f5e:	2200      	movs	r2, #0
 8015f60:	641a      	str	r2, [r3, #64]	@ 0x40
 8015f62:	6898      	ldr	r0, [r3, #8]
 8015f64:	b138      	cbz	r0, 8015f76 <rcl_wait_set_clear+0x9a>
 8015f66:	685a      	ldr	r2, [r3, #4]
 8015f68:	2100      	movs	r1, #0
 8015f6a:	0092      	lsls	r2, r2, #2
 8015f6c:	f004 f962 	bl	801a234 <memset>
 8015f70:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015f72:	2200      	movs	r2, #0
 8015f74:	605a      	str	r2, [r3, #4]
 8015f76:	6958      	ldr	r0, [r3, #20]
 8015f78:	b138      	cbz	r0, 8015f8a <rcl_wait_set_clear+0xae>
 8015f7a:	691a      	ldr	r2, [r3, #16]
 8015f7c:	2100      	movs	r1, #0
 8015f7e:	0092      	lsls	r2, r2, #2
 8015f80:	f004 f958 	bl	801a234 <memset>
 8015f84:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015f86:	2200      	movs	r2, #0
 8015f88:	611a      	str	r2, [r3, #16]
 8015f8a:	6a18      	ldr	r0, [r3, #32]
 8015f8c:	b138      	cbz	r0, 8015f9e <rcl_wait_set_clear+0xc2>
 8015f8e:	69da      	ldr	r2, [r3, #28]
 8015f90:	2100      	movs	r1, #0
 8015f92:	0092      	lsls	r2, r2, #2
 8015f94:	f004 f94e 	bl	801a234 <memset>
 8015f98:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015f9a:	2200      	movs	r2, #0
 8015f9c:	61da      	str	r2, [r3, #28]
 8015f9e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8015fa0:	b138      	cbz	r0, 8015fb2 <rcl_wait_set_clear+0xd6>
 8015fa2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015fa4:	2100      	movs	r1, #0
 8015fa6:	0092      	lsls	r2, r2, #2
 8015fa8:	f004 f944 	bl	801a234 <memset>
 8015fac:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015fae:	2200      	movs	r2, #0
 8015fb0:	629a      	str	r2, [r3, #40]	@ 0x28
 8015fb2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8015fb4:	b138      	cbz	r0, 8015fc6 <rcl_wait_set_clear+0xea>
 8015fb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015fb8:	2100      	movs	r1, #0
 8015fba:	0092      	lsls	r2, r2, #2
 8015fbc:	f004 f93a 	bl	801a234 <memset>
 8015fc0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015fc2:	2000      	movs	r0, #0
 8015fc4:	6358      	str	r0, [r3, #52]	@ 0x34
 8015fc6:	bd10      	pop	{r4, pc}
 8015fc8:	200b      	movs	r0, #11
 8015fca:	4770      	bx	lr
 8015fcc:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015fd0:	bd10      	pop	{r4, pc}
 8015fd2:	bf00      	nop

08015fd4 <rcl_wait_set_resize>:
 8015fd4:	2800      	cmp	r0, #0
 8015fd6:	f000 8185 	beq.w	80162e4 <rcl_wait_set_resize+0x310>
 8015fda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fde:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8015fe0:	b083      	sub	sp, #12
 8015fe2:	4605      	mov	r5, r0
 8015fe4:	2c00      	cmp	r4, #0
 8015fe6:	f000 817f 	beq.w	80162e8 <rcl_wait_set_resize+0x314>
 8015fea:	f04f 0900 	mov.w	r9, #0
 8015fee:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8015ff2:	461f      	mov	r7, r3
 8015ff4:	4688      	mov	r8, r1
 8015ff6:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8015ffa:	4616      	mov	r6, r2
 8015ffc:	f8c0 9004 	str.w	r9, [r0, #4]
 8016000:	f8c4 9000 	str.w	r9, [r4]
 8016004:	2900      	cmp	r1, #0
 8016006:	f000 80bd 	beq.w	8016184 <rcl_wait_set_resize+0x1b0>
 801600a:	008c      	lsls	r4, r1, #2
 801600c:	6800      	ldr	r0, [r0, #0]
 801600e:	9301      	str	r3, [sp, #4]
 8016010:	4652      	mov	r2, sl
 8016012:	4621      	mov	r1, r4
 8016014:	4798      	blx	r3
 8016016:	9b01      	ldr	r3, [sp, #4]
 8016018:	6028      	str	r0, [r5, #0]
 801601a:	2800      	cmp	r0, #0
 801601c:	f000 80cb 	beq.w	80161b6 <rcl_wait_set_resize+0x1e2>
 8016020:	4622      	mov	r2, r4
 8016022:	4649      	mov	r1, r9
 8016024:	9301      	str	r3, [sp, #4]
 8016026:	f004 f905 	bl	801a234 <memset>
 801602a:	f8c5 8004 	str.w	r8, [r5, #4]
 801602e:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8016032:	9b01      	ldr	r3, [sp, #4]
 8016034:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8016038:	f8c8 9004 	str.w	r9, [r8, #4]
 801603c:	4652      	mov	r2, sl
 801603e:	4621      	mov	r1, r4
 8016040:	4798      	blx	r3
 8016042:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016044:	f8c8 0008 	str.w	r0, [r8, #8]
 8016048:	689b      	ldr	r3, [r3, #8]
 801604a:	2b00      	cmp	r3, #0
 801604c:	f000 80ac 	beq.w	80161a8 <rcl_wait_set_resize+0x1d4>
 8016050:	4622      	mov	r2, r4
 8016052:	4649      	mov	r1, r9
 8016054:	4618      	mov	r0, r3
 8016056:	f004 f8ed 	bl	801a234 <memset>
 801605a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801605c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016060:	f04f 0800 	mov.w	r8, #0
 8016064:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8016068:	f8c5 800c 	str.w	r8, [r5, #12]
 801606c:	f8c4 800c 	str.w	r8, [r4, #12]
 8016070:	2e00      	cmp	r6, #0
 8016072:	f040 80a4 	bne.w	80161be <rcl_wait_set_resize+0x1ea>
 8016076:	68a8      	ldr	r0, [r5, #8]
 8016078:	b128      	cbz	r0, 8016086 <rcl_wait_set_resize+0xb2>
 801607a:	4649      	mov	r1, r9
 801607c:	4790      	blx	r2
 801607e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016080:	60ae      	str	r6, [r5, #8]
 8016082:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016086:	f04f 0800 	mov.w	r8, #0
 801608a:	19f6      	adds	r6, r6, r7
 801608c:	f8c4 8010 	str.w	r8, [r4, #16]
 8016090:	f040 80ac 	bne.w	80161ec <rcl_wait_set_resize+0x218>
 8016094:	6960      	ldr	r0, [r4, #20]
 8016096:	b130      	cbz	r0, 80160a6 <rcl_wait_set_resize+0xd2>
 8016098:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801609a:	4649      	mov	r1, r9
 801609c:	4798      	blx	r3
 801609e:	6166      	str	r6, [r4, #20]
 80160a0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80160a2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80160a6:	2600      	movs	r6, #0
 80160a8:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80160ac:	616e      	str	r6, [r5, #20]
 80160ae:	6426      	str	r6, [r4, #64]	@ 0x40
 80160b0:	2f00      	cmp	r7, #0
 80160b2:	f040 80ad 	bne.w	8016210 <rcl_wait_set_resize+0x23c>
 80160b6:	6928      	ldr	r0, [r5, #16]
 80160b8:	b138      	cbz	r0, 80160ca <rcl_wait_set_resize+0xf6>
 80160ba:	4649      	mov	r1, r9
 80160bc:	47d0      	blx	sl
 80160be:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80160c0:	612f      	str	r7, [r5, #16]
 80160c2:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80160c6:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80160ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80160cc:	2600      	movs	r6, #0
 80160ce:	61ee      	str	r6, [r5, #28]
 80160d0:	61a6      	str	r6, [r4, #24]
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	f040 80af 	bne.w	8016236 <rcl_wait_set_resize+0x262>
 80160d8:	69a8      	ldr	r0, [r5, #24]
 80160da:	b120      	cbz	r0, 80160e6 <rcl_wait_set_resize+0x112>
 80160dc:	4649      	mov	r1, r9
 80160de:	47d0      	blx	sl
 80160e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80160e2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80160e4:	61ab      	str	r3, [r5, #24]
 80160e6:	6a20      	ldr	r0, [r4, #32]
 80160e8:	b128      	cbz	r0, 80160f6 <rcl_wait_set_resize+0x122>
 80160ea:	4649      	mov	r1, r9
 80160ec:	47d0      	blx	sl
 80160ee:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80160f0:	2300      	movs	r3, #0
 80160f2:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80160f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80160f8:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80160fa:	2600      	movs	r6, #0
 80160fc:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8016100:	626e      	str	r6, [r5, #36]	@ 0x24
 8016102:	6266      	str	r6, [r4, #36]	@ 0x24
 8016104:	2b00      	cmp	r3, #0
 8016106:	f000 80b6 	beq.w	8016276 <rcl_wait_set_resize+0x2a2>
 801610a:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801610e:	6a28      	ldr	r0, [r5, #32]
 8016110:	463a      	mov	r2, r7
 8016112:	4651      	mov	r1, sl
 8016114:	47c8      	blx	r9
 8016116:	6228      	str	r0, [r5, #32]
 8016118:	2800      	cmp	r0, #0
 801611a:	d04c      	beq.n	80161b6 <rcl_wait_set_resize+0x1e2>
 801611c:	4652      	mov	r2, sl
 801611e:	4631      	mov	r1, r6
 8016120:	f004 f888 	bl	801a234 <memset>
 8016124:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016126:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016128:	626b      	str	r3, [r5, #36]	@ 0x24
 801612a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801612c:	62a6      	str	r6, [r4, #40]	@ 0x28
 801612e:	463a      	mov	r2, r7
 8016130:	4651      	mov	r1, sl
 8016132:	47c8      	blx	r9
 8016134:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016136:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8016138:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 801613a:	2c00      	cmp	r4, #0
 801613c:	f000 80f0 	beq.w	8016320 <rcl_wait_set_resize+0x34c>
 8016140:	4620      	mov	r0, r4
 8016142:	4652      	mov	r2, sl
 8016144:	4631      	mov	r1, r6
 8016146:	f004 f875 	bl	801a234 <memset>
 801614a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801614c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801614e:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8016150:	2600      	movs	r6, #0
 8016152:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8016156:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8016158:	6326      	str	r6, [r4, #48]	@ 0x30
 801615a:	2b00      	cmp	r3, #0
 801615c:	f040 809d 	bne.w	801629a <rcl_wait_set_resize+0x2c6>
 8016160:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8016162:	b120      	cbz	r0, 801616e <rcl_wait_set_resize+0x19a>
 8016164:	4639      	mov	r1, r7
 8016166:	47c0      	blx	r8
 8016168:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801616a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801616c:	62ab      	str	r3, [r5, #40]	@ 0x28
 801616e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8016170:	b310      	cbz	r0, 80161b8 <rcl_wait_set_resize+0x1e4>
 8016172:	4639      	mov	r1, r7
 8016174:	47c0      	blx	r8
 8016176:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016178:	2000      	movs	r0, #0
 801617a:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 801617e:	b003      	add	sp, #12
 8016180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016184:	6800      	ldr	r0, [r0, #0]
 8016186:	b120      	cbz	r0, 8016192 <rcl_wait_set_resize+0x1be>
 8016188:	4651      	mov	r1, sl
 801618a:	47d8      	blx	fp
 801618c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801618e:	f8c5 8000 	str.w	r8, [r5]
 8016192:	68a0      	ldr	r0, [r4, #8]
 8016194:	2800      	cmp	r0, #0
 8016196:	f43f af61 	beq.w	801605c <rcl_wait_set_resize+0x88>
 801619a:	4651      	mov	r1, sl
 801619c:	47d8      	blx	fp
 801619e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80161a0:	2300      	movs	r3, #0
 80161a2:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80161a6:	e759      	b.n	801605c <rcl_wait_set_resize+0x88>
 80161a8:	6828      	ldr	r0, [r5, #0]
 80161aa:	9301      	str	r3, [sp, #4]
 80161ac:	4651      	mov	r1, sl
 80161ae:	47d8      	blx	fp
 80161b0:	9b01      	ldr	r3, [sp, #4]
 80161b2:	e9c5 3300 	strd	r3, r3, [r5]
 80161b6:	200a      	movs	r0, #10
 80161b8:	b003      	add	sp, #12
 80161ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161be:	00b4      	lsls	r4, r6, #2
 80161c0:	68a8      	ldr	r0, [r5, #8]
 80161c2:	464a      	mov	r2, r9
 80161c4:	4621      	mov	r1, r4
 80161c6:	4798      	blx	r3
 80161c8:	60a8      	str	r0, [r5, #8]
 80161ca:	2800      	cmp	r0, #0
 80161cc:	d0f3      	beq.n	80161b6 <rcl_wait_set_resize+0x1e2>
 80161ce:	4622      	mov	r2, r4
 80161d0:	4641      	mov	r1, r8
 80161d2:	f004 f82f 	bl	801a234 <memset>
 80161d6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80161d8:	60ee      	str	r6, [r5, #12]
 80161da:	f04f 0800 	mov.w	r8, #0
 80161de:	19f6      	adds	r6, r6, r7
 80161e0:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80161e4:	f8c4 8010 	str.w	r8, [r4, #16]
 80161e8:	f43f af54 	beq.w	8016094 <rcl_wait_set_resize+0xc0>
 80161ec:	00b6      	lsls	r6, r6, #2
 80161ee:	464a      	mov	r2, r9
 80161f0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80161f2:	6960      	ldr	r0, [r4, #20]
 80161f4:	4631      	mov	r1, r6
 80161f6:	4798      	blx	r3
 80161f8:	4681      	mov	r9, r0
 80161fa:	6160      	str	r0, [r4, #20]
 80161fc:	2800      	cmp	r0, #0
 80161fe:	d076      	beq.n	80162ee <rcl_wait_set_resize+0x31a>
 8016200:	4632      	mov	r2, r6
 8016202:	4641      	mov	r1, r8
 8016204:	f004 f816 	bl	801a234 <memset>
 8016208:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801620a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801620e:	e74a      	b.n	80160a6 <rcl_wait_set_resize+0xd2>
 8016210:	00bc      	lsls	r4, r7, #2
 8016212:	6928      	ldr	r0, [r5, #16]
 8016214:	464a      	mov	r2, r9
 8016216:	4621      	mov	r1, r4
 8016218:	47c0      	blx	r8
 801621a:	6128      	str	r0, [r5, #16]
 801621c:	2800      	cmp	r0, #0
 801621e:	d0ca      	beq.n	80161b6 <rcl_wait_set_resize+0x1e2>
 8016220:	4622      	mov	r2, r4
 8016222:	4631      	mov	r1, r6
 8016224:	f004 f806 	bl	801a234 <memset>
 8016228:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801622a:	616f      	str	r7, [r5, #20]
 801622c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8016230:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016234:	e749      	b.n	80160ca <rcl_wait_set_resize+0xf6>
 8016236:	009c      	lsls	r4, r3, #2
 8016238:	69a8      	ldr	r0, [r5, #24]
 801623a:	464a      	mov	r2, r9
 801623c:	4621      	mov	r1, r4
 801623e:	47c0      	blx	r8
 8016240:	61a8      	str	r0, [r5, #24]
 8016242:	2800      	cmp	r0, #0
 8016244:	d0b7      	beq.n	80161b6 <rcl_wait_set_resize+0x1e2>
 8016246:	4622      	mov	r2, r4
 8016248:	4631      	mov	r1, r6
 801624a:	f003 fff3 	bl	801a234 <memset>
 801624e:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8016250:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016252:	61eb      	str	r3, [r5, #28]
 8016254:	6a38      	ldr	r0, [r7, #32]
 8016256:	61fe      	str	r6, [r7, #28]
 8016258:	464a      	mov	r2, r9
 801625a:	4621      	mov	r1, r4
 801625c:	47c0      	blx	r8
 801625e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016260:	6238      	str	r0, [r7, #32]
 8016262:	6a1f      	ldr	r7, [r3, #32]
 8016264:	2f00      	cmp	r7, #0
 8016266:	d054      	beq.n	8016312 <rcl_wait_set_resize+0x33e>
 8016268:	4622      	mov	r2, r4
 801626a:	4631      	mov	r1, r6
 801626c:	4638      	mov	r0, r7
 801626e:	f003 ffe1 	bl	801a234 <memset>
 8016272:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016274:	e73f      	b.n	80160f6 <rcl_wait_set_resize+0x122>
 8016276:	6a28      	ldr	r0, [r5, #32]
 8016278:	b120      	cbz	r0, 8016284 <rcl_wait_set_resize+0x2b0>
 801627a:	4639      	mov	r1, r7
 801627c:	47c0      	blx	r8
 801627e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016280:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016282:	622b      	str	r3, [r5, #32]
 8016284:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8016286:	2800      	cmp	r0, #0
 8016288:	f43f af60 	beq.w	801614c <rcl_wait_set_resize+0x178>
 801628c:	4639      	mov	r1, r7
 801628e:	47c0      	blx	r8
 8016290:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016292:	2300      	movs	r3, #0
 8016294:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8016298:	e758      	b.n	801614c <rcl_wait_set_resize+0x178>
 801629a:	009c      	lsls	r4, r3, #2
 801629c:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801629e:	463a      	mov	r2, r7
 80162a0:	4621      	mov	r1, r4
 80162a2:	47c8      	blx	r9
 80162a4:	62a8      	str	r0, [r5, #40]	@ 0x28
 80162a6:	2800      	cmp	r0, #0
 80162a8:	d085      	beq.n	80161b6 <rcl_wait_set_resize+0x1e2>
 80162aa:	4622      	mov	r2, r4
 80162ac:	4631      	mov	r1, r6
 80162ae:	f003 ffc1 	bl	801a234 <memset>
 80162b2:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 80162b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80162b8:	62eb      	str	r3, [r5, #44]	@ 0x2c
 80162ba:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 80162be:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 80162c2:	463a      	mov	r2, r7
 80162c4:	4621      	mov	r1, r4
 80162c6:	47c8      	blx	r9
 80162c8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80162ca:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 80162ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80162d0:	b36b      	cbz	r3, 801632e <rcl_wait_set_resize+0x35a>
 80162d2:	4622      	mov	r2, r4
 80162d4:	4631      	mov	r1, r6
 80162d6:	4618      	mov	r0, r3
 80162d8:	f003 ffac 	bl	801a234 <memset>
 80162dc:	4630      	mov	r0, r6
 80162de:	b003      	add	sp, #12
 80162e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162e4:	200b      	movs	r0, #11
 80162e6:	4770      	bx	lr
 80162e8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80162ec:	e764      	b.n	80161b8 <rcl_wait_set_resize+0x1e4>
 80162ee:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80162f0:	68a8      	ldr	r0, [r5, #8]
 80162f2:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80162f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80162f6:	4798      	blx	r3
 80162f8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80162fa:	6928      	ldr	r0, [r5, #16]
 80162fc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80162fe:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8016300:	f8c5 900c 	str.w	r9, [r5, #12]
 8016304:	f8c5 9008 	str.w	r9, [r5, #8]
 8016308:	4790      	blx	r2
 801630a:	e9c5 9904 	strd	r9, r9, [r5, #16]
 801630e:	200a      	movs	r0, #10
 8016310:	e752      	b.n	80161b8 <rcl_wait_set_resize+0x1e4>
 8016312:	69a8      	ldr	r0, [r5, #24]
 8016314:	4649      	mov	r1, r9
 8016316:	47d0      	blx	sl
 8016318:	e9c5 7706 	strd	r7, r7, [r5, #24]
 801631c:	200a      	movs	r0, #10
 801631e:	e74b      	b.n	80161b8 <rcl_wait_set_resize+0x1e4>
 8016320:	6a28      	ldr	r0, [r5, #32]
 8016322:	4639      	mov	r1, r7
 8016324:	47c0      	blx	r8
 8016326:	e9c5 4408 	strd	r4, r4, [r5, #32]
 801632a:	200a      	movs	r0, #10
 801632c:	e744      	b.n	80161b8 <rcl_wait_set_resize+0x1e4>
 801632e:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8016330:	9301      	str	r3, [sp, #4]
 8016332:	4639      	mov	r1, r7
 8016334:	47c0      	blx	r8
 8016336:	9b01      	ldr	r3, [sp, #4]
 8016338:	200a      	movs	r0, #10
 801633a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801633e:	e73b      	b.n	80161b8 <rcl_wait_set_resize+0x1e4>

08016340 <rcl_wait_set_init>:
 8016340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016344:	b084      	sub	sp, #16
 8016346:	4604      	mov	r4, r0
 8016348:	a810      	add	r0, sp, #64	@ 0x40
 801634a:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 801634e:	460f      	mov	r7, r1
 8016350:	4690      	mov	r8, r2
 8016352:	4699      	mov	r9, r3
 8016354:	f7f8 fc10 	bl	800eb78 <rcutils_allocator_is_valid>
 8016358:	2800      	cmp	r0, #0
 801635a:	d06b      	beq.n	8016434 <rcl_wait_set_init+0xf4>
 801635c:	2c00      	cmp	r4, #0
 801635e:	d069      	beq.n	8016434 <rcl_wait_set_init+0xf4>
 8016360:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016362:	b125      	cbz	r5, 801636e <rcl_wait_set_init+0x2e>
 8016364:	2564      	movs	r5, #100	@ 0x64
 8016366:	4628      	mov	r0, r5
 8016368:	b004      	add	sp, #16
 801636a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801636e:	f1ba 0f00 	cmp.w	sl, #0
 8016372:	d05f      	beq.n	8016434 <rcl_wait_set_init+0xf4>
 8016374:	4650      	mov	r0, sl
 8016376:	f7f6 fb69 	bl	800ca4c <rcl_context_is_valid>
 801637a:	2800      	cmp	r0, #0
 801637c:	d067      	beq.n	801644e <rcl_wait_set_init+0x10e>
 801637e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016380:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8016382:	205c      	movs	r0, #92	@ 0x5c
 8016384:	4798      	blx	r3
 8016386:	6320      	str	r0, [r4, #48]	@ 0x30
 8016388:	2800      	cmp	r0, #0
 801638a:	d062      	beq.n	8016452 <rcl_wait_set_init+0x112>
 801638c:	4629      	mov	r1, r5
 801638e:	225c      	movs	r2, #92	@ 0x5c
 8016390:	f003 ff50 	bl	801a234 <memset>
 8016394:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8016398:	eb03 0e02 	add.w	lr, r3, r2
 801639c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801639e:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 80163a0:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80163a4:	449e      	add	lr, r3
 80163a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80163aa:	e9c6 5501 	strd	r5, r5, [r6, #4]
 80163ae:	e9c6 5504 	strd	r5, r5, [r6, #16]
 80163b2:	e9c6 5507 	strd	r5, r5, [r6, #28]
 80163b6:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 80163ba:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 80163be:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 80163c2:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 80163c6:	f8da a000 	ldr.w	sl, [sl]
 80163ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80163cc:	44c6      	add	lr, r8
 80163ce:	f8dc 3000 	ldr.w	r3, [ip]
 80163d2:	602b      	str	r3, [r5, #0]
 80163d4:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 80163d8:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 80163dc:	f001 ff14 	bl	8018208 <rmw_create_wait_set>
 80163e0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80163e2:	63f0      	str	r0, [r6, #60]	@ 0x3c
 80163e4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80163e6:	b350      	cbz	r0, 801643e <rcl_wait_set_init+0xfe>
 80163e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80163ea:	9302      	str	r3, [sp, #8]
 80163ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80163ee:	9301      	str	r3, [sp, #4]
 80163f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80163f2:	9300      	str	r3, [sp, #0]
 80163f4:	4642      	mov	r2, r8
 80163f6:	464b      	mov	r3, r9
 80163f8:	4639      	mov	r1, r7
 80163fa:	4620      	mov	r0, r4
 80163fc:	f7ff fdea 	bl	8015fd4 <rcl_wait_set_resize>
 8016400:	4605      	mov	r5, r0
 8016402:	2800      	cmp	r0, #0
 8016404:	d0af      	beq.n	8016366 <rcl_wait_set_init+0x26>
 8016406:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016408:	bb2b      	cbnz	r3, 8016456 <rcl_wait_set_init+0x116>
 801640a:	2600      	movs	r6, #0
 801640c:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8016410:	9600      	str	r6, [sp, #0]
 8016412:	4633      	mov	r3, r6
 8016414:	4632      	mov	r2, r6
 8016416:	4631      	mov	r1, r6
 8016418:	4620      	mov	r0, r4
 801641a:	f7ff fddb 	bl	8015fd4 <rcl_wait_set_resize>
 801641e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8016420:	2800      	cmp	r0, #0
 8016422:	d0a0      	beq.n	8016366 <rcl_wait_set_init+0x26>
 8016424:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8016426:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8016428:	4798      	blx	r3
 801642a:	4628      	mov	r0, r5
 801642c:	6326      	str	r6, [r4, #48]	@ 0x30
 801642e:	b004      	add	sp, #16
 8016430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016434:	250b      	movs	r5, #11
 8016436:	4628      	mov	r0, r5
 8016438:	b004      	add	sp, #16
 801643a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801643e:	2501      	movs	r5, #1
 8016440:	f001 feec 	bl	801821c <rmw_destroy_wait_set>
 8016444:	2800      	cmp	r0, #0
 8016446:	bf18      	it	ne
 8016448:	f44f 7561 	movne.w	r5, #900	@ 0x384
 801644c:	e7dd      	b.n	801640a <rcl_wait_set_init+0xca>
 801644e:	2565      	movs	r5, #101	@ 0x65
 8016450:	e789      	b.n	8016366 <rcl_wait_set_init+0x26>
 8016452:	250a      	movs	r5, #10
 8016454:	e787      	b.n	8016366 <rcl_wait_set_init+0x26>
 8016456:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8016458:	e7f2      	b.n	8016440 <rcl_wait_set_init+0x100>
 801645a:	bf00      	nop

0801645c <rcl_wait_set_add_guard_condition>:
 801645c:	b318      	cbz	r0, 80164a6 <rcl_wait_set_add_guard_condition+0x4a>
 801645e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016460:	b570      	push	{r4, r5, r6, lr}
 8016462:	4604      	mov	r4, r0
 8016464:	b30b      	cbz	r3, 80164aa <rcl_wait_set_add_guard_condition+0x4e>
 8016466:	b319      	cbz	r1, 80164b0 <rcl_wait_set_add_guard_condition+0x54>
 8016468:	68dd      	ldr	r5, [r3, #12]
 801646a:	68c0      	ldr	r0, [r0, #12]
 801646c:	4285      	cmp	r5, r0
 801646e:	d217      	bcs.n	80164a0 <rcl_wait_set_add_guard_condition+0x44>
 8016470:	68a0      	ldr	r0, [r4, #8]
 8016472:	1c6e      	adds	r6, r5, #1
 8016474:	60de      	str	r6, [r3, #12]
 8016476:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801647a:	b102      	cbz	r2, 801647e <rcl_wait_set_add_guard_condition+0x22>
 801647c:	6015      	str	r5, [r2, #0]
 801647e:	4608      	mov	r0, r1
 8016480:	f7ff f874 	bl	801556c <rcl_guard_condition_get_rmw_handle>
 8016484:	b150      	cbz	r0, 801649c <rcl_wait_set_add_guard_condition+0x40>
 8016486:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016488:	6842      	ldr	r2, [r0, #4]
 801648a:	695b      	ldr	r3, [r3, #20]
 801648c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016490:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016492:	6913      	ldr	r3, [r2, #16]
 8016494:	3301      	adds	r3, #1
 8016496:	2000      	movs	r0, #0
 8016498:	6113      	str	r3, [r2, #16]
 801649a:	bd70      	pop	{r4, r5, r6, pc}
 801649c:	2001      	movs	r0, #1
 801649e:	bd70      	pop	{r4, r5, r6, pc}
 80164a0:	f240 3086 	movw	r0, #902	@ 0x386
 80164a4:	bd70      	pop	{r4, r5, r6, pc}
 80164a6:	200b      	movs	r0, #11
 80164a8:	4770      	bx	lr
 80164aa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80164ae:	bd70      	pop	{r4, r5, r6, pc}
 80164b0:	200b      	movs	r0, #11
 80164b2:	bd70      	pop	{r4, r5, r6, pc}

080164b4 <rcl_wait_set_add_timer>:
 80164b4:	b328      	cbz	r0, 8016502 <rcl_wait_set_add_timer+0x4e>
 80164b6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80164b8:	b570      	push	{r4, r5, r6, lr}
 80164ba:	4604      	mov	r4, r0
 80164bc:	b31b      	cbz	r3, 8016506 <rcl_wait_set_add_timer+0x52>
 80164be:	b329      	cbz	r1, 801650c <rcl_wait_set_add_timer+0x58>
 80164c0:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80164c2:	6965      	ldr	r5, [r4, #20]
 80164c4:	42a8      	cmp	r0, r5
 80164c6:	d219      	bcs.n	80164fc <rcl_wait_set_add_timer+0x48>
 80164c8:	6925      	ldr	r5, [r4, #16]
 80164ca:	1c46      	adds	r6, r0, #1
 80164cc:	641e      	str	r6, [r3, #64]	@ 0x40
 80164ce:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 80164d2:	b102      	cbz	r2, 80164d6 <rcl_wait_set_add_timer+0x22>
 80164d4:	6010      	str	r0, [r2, #0]
 80164d6:	4608      	mov	r0, r1
 80164d8:	f7f7 fb5e 	bl	800db98 <rcl_timer_get_guard_condition>
 80164dc:	b168      	cbz	r0, 80164fa <rcl_wait_set_add_timer+0x46>
 80164de:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80164e0:	68e3      	ldr	r3, [r4, #12]
 80164e2:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 80164e4:	3b01      	subs	r3, #1
 80164e6:	441d      	add	r5, r3
 80164e8:	f7ff f840 	bl	801556c <rcl_guard_condition_get_rmw_handle>
 80164ec:	b180      	cbz	r0, 8016510 <rcl_wait_set_add_timer+0x5c>
 80164ee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80164f0:	6842      	ldr	r2, [r0, #4]
 80164f2:	695b      	ldr	r3, [r3, #20]
 80164f4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80164f8:	2000      	movs	r0, #0
 80164fa:	bd70      	pop	{r4, r5, r6, pc}
 80164fc:	f240 3086 	movw	r0, #902	@ 0x386
 8016500:	bd70      	pop	{r4, r5, r6, pc}
 8016502:	200b      	movs	r0, #11
 8016504:	4770      	bx	lr
 8016506:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801650a:	bd70      	pop	{r4, r5, r6, pc}
 801650c:	200b      	movs	r0, #11
 801650e:	bd70      	pop	{r4, r5, r6, pc}
 8016510:	2001      	movs	r0, #1
 8016512:	bd70      	pop	{r4, r5, r6, pc}

08016514 <rcl_wait_set_add_client>:
 8016514:	b318      	cbz	r0, 801655e <rcl_wait_set_add_client+0x4a>
 8016516:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016518:	b570      	push	{r4, r5, r6, lr}
 801651a:	4604      	mov	r4, r0
 801651c:	b30b      	cbz	r3, 8016562 <rcl_wait_set_add_client+0x4e>
 801651e:	b319      	cbz	r1, 8016568 <rcl_wait_set_add_client+0x54>
 8016520:	699d      	ldr	r5, [r3, #24]
 8016522:	69c0      	ldr	r0, [r0, #28]
 8016524:	4285      	cmp	r5, r0
 8016526:	d217      	bcs.n	8016558 <rcl_wait_set_add_client+0x44>
 8016528:	69a0      	ldr	r0, [r4, #24]
 801652a:	1c6e      	adds	r6, r5, #1
 801652c:	619e      	str	r6, [r3, #24]
 801652e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8016532:	b102      	cbz	r2, 8016536 <rcl_wait_set_add_client+0x22>
 8016534:	6015      	str	r5, [r2, #0]
 8016536:	4608      	mov	r0, r1
 8016538:	f7fe fe6c 	bl	8015214 <rcl_client_get_rmw_handle>
 801653c:	b150      	cbz	r0, 8016554 <rcl_wait_set_add_client+0x40>
 801653e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016540:	6842      	ldr	r2, [r0, #4]
 8016542:	6a1b      	ldr	r3, [r3, #32]
 8016544:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016548:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801654a:	69d3      	ldr	r3, [r2, #28]
 801654c:	3301      	adds	r3, #1
 801654e:	2000      	movs	r0, #0
 8016550:	61d3      	str	r3, [r2, #28]
 8016552:	bd70      	pop	{r4, r5, r6, pc}
 8016554:	2001      	movs	r0, #1
 8016556:	bd70      	pop	{r4, r5, r6, pc}
 8016558:	f240 3086 	movw	r0, #902	@ 0x386
 801655c:	bd70      	pop	{r4, r5, r6, pc}
 801655e:	200b      	movs	r0, #11
 8016560:	4770      	bx	lr
 8016562:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016566:	bd70      	pop	{r4, r5, r6, pc}
 8016568:	200b      	movs	r0, #11
 801656a:	bd70      	pop	{r4, r5, r6, pc}

0801656c <rcl_wait_set_add_service>:
 801656c:	b318      	cbz	r0, 80165b6 <rcl_wait_set_add_service+0x4a>
 801656e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016570:	b570      	push	{r4, r5, r6, lr}
 8016572:	4604      	mov	r4, r0
 8016574:	b30b      	cbz	r3, 80165ba <rcl_wait_set_add_service+0x4e>
 8016576:	b319      	cbz	r1, 80165c0 <rcl_wait_set_add_service+0x54>
 8016578:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801657a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801657c:	4285      	cmp	r5, r0
 801657e:	d217      	bcs.n	80165b0 <rcl_wait_set_add_service+0x44>
 8016580:	6a20      	ldr	r0, [r4, #32]
 8016582:	1c6e      	adds	r6, r5, #1
 8016584:	625e      	str	r6, [r3, #36]	@ 0x24
 8016586:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801658a:	b102      	cbz	r2, 801658e <rcl_wait_set_add_service+0x22>
 801658c:	6015      	str	r5, [r2, #0]
 801658e:	4608      	mov	r0, r1
 8016590:	f7ff f9c8 	bl	8015924 <rcl_service_get_rmw_handle>
 8016594:	b150      	cbz	r0, 80165ac <rcl_wait_set_add_service+0x40>
 8016596:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016598:	6842      	ldr	r2, [r0, #4]
 801659a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801659c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80165a0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80165a2:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80165a4:	3301      	adds	r3, #1
 80165a6:	2000      	movs	r0, #0
 80165a8:	6293      	str	r3, [r2, #40]	@ 0x28
 80165aa:	bd70      	pop	{r4, r5, r6, pc}
 80165ac:	2001      	movs	r0, #1
 80165ae:	bd70      	pop	{r4, r5, r6, pc}
 80165b0:	f240 3086 	movw	r0, #902	@ 0x386
 80165b4:	bd70      	pop	{r4, r5, r6, pc}
 80165b6:	200b      	movs	r0, #11
 80165b8:	4770      	bx	lr
 80165ba:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80165be:	bd70      	pop	{r4, r5, r6, pc}
 80165c0:	200b      	movs	r0, #11
 80165c2:	bd70      	pop	{r4, r5, r6, pc}
 80165c4:	0000      	movs	r0, r0
	...

080165c8 <rcl_wait>:
 80165c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165cc:	ed2d 8b02 	vpush	{d8}
 80165d0:	b08d      	sub	sp, #52	@ 0x34
 80165d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80165d6:	2800      	cmp	r0, #0
 80165d8:	f000 8143 	beq.w	8016862 <rcl_wait+0x29a>
 80165dc:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80165de:	4605      	mov	r5, r0
 80165e0:	2e00      	cmp	r6, #0
 80165e2:	f000 8112 	beq.w	801680a <rcl_wait+0x242>
 80165e6:	6843      	ldr	r3, [r0, #4]
 80165e8:	b983      	cbnz	r3, 801660c <rcl_wait+0x44>
 80165ea:	68eb      	ldr	r3, [r5, #12]
 80165ec:	b973      	cbnz	r3, 801660c <rcl_wait+0x44>
 80165ee:	696b      	ldr	r3, [r5, #20]
 80165f0:	b963      	cbnz	r3, 801660c <rcl_wait+0x44>
 80165f2:	69eb      	ldr	r3, [r5, #28]
 80165f4:	b953      	cbnz	r3, 801660c <rcl_wait+0x44>
 80165f6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80165f8:	b943      	cbnz	r3, 801660c <rcl_wait+0x44>
 80165fa:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80165fc:	b933      	cbnz	r3, 801660c <rcl_wait+0x44>
 80165fe:	f240 3085 	movw	r0, #901	@ 0x385
 8016602:	b00d      	add	sp, #52	@ 0x34
 8016604:	ecbd 8b02 	vpop	{d8}
 8016608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801660c:	9b04      	ldr	r3, [sp, #16]
 801660e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8016610:	2b01      	cmp	r3, #1
 8016612:	9b05      	ldr	r3, [sp, #20]
 8016614:	f173 0300 	sbcs.w	r3, r3, #0
 8016618:	f2c0 80f0 	blt.w	80167fc <rcl_wait+0x234>
 801661c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8016620:	4643      	mov	r3, r8
 8016622:	2a00      	cmp	r2, #0
 8016624:	f000 8133 	beq.w	801688e <rcl_wait+0x2c6>
 8016628:	2400      	movs	r4, #0
 801662a:	4613      	mov	r3, r2
 801662c:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 80168a0 <rcl_wait+0x2d8>
 8016630:	46a2      	mov	sl, r4
 8016632:	46a3      	mov	fp, r4
 8016634:	f240 3921 	movw	r9, #801	@ 0x321
 8016638:	4632      	mov	r2, r6
 801663a:	e014      	b.n	8016666 <rcl_wait+0x9e>
 801663c:	2800      	cmp	r0, #0
 801663e:	d1e0      	bne.n	8016602 <rcl_wait+0x3a>
 8016640:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016644:	4542      	cmp	r2, r8
 8016646:	eb73 0107 	sbcs.w	r1, r3, r7
 801664a:	da03      	bge.n	8016654 <rcl_wait+0x8c>
 801664c:	4690      	mov	r8, r2
 801664e:	461f      	mov	r7, r3
 8016650:	f04f 0b01 	mov.w	fp, #1
 8016654:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8016656:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8016658:	3401      	adds	r4, #1
 801665a:	f14a 0a00 	adc.w	sl, sl, #0
 801665e:	429c      	cmp	r4, r3
 8016660:	f17a 0100 	sbcs.w	r1, sl, #0
 8016664:	d228      	bcs.n	80166b8 <rcl_wait+0xf0>
 8016666:	6928      	ldr	r0, [r5, #16]
 8016668:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801666c:	a908      	add	r1, sp, #32
 801666e:	00a6      	lsls	r6, r4, #2
 8016670:	2800      	cmp	r0, #0
 8016672:	d0f1      	beq.n	8016658 <rcl_wait+0x90>
 8016674:	68eb      	ldr	r3, [r5, #12]
 8016676:	f8d2 c014 	ldr.w	ip, [r2, #20]
 801667a:	4423      	add	r3, r4
 801667c:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8016680:	f1be 0f00 	cmp.w	lr, #0
 8016684:	d006      	beq.n	8016694 <rcl_wait+0xcc>
 8016686:	6913      	ldr	r3, [r2, #16]
 8016688:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 801668c:	3301      	adds	r3, #1
 801668e:	6113      	str	r3, [r2, #16]
 8016690:	692b      	ldr	r3, [r5, #16]
 8016692:	5998      	ldr	r0, [r3, r6]
 8016694:	ed8d 8b08 	vstr	d8, [sp, #32]
 8016698:	f7f7 fa4c 	bl	800db34 <rcl_timer_get_time_until_next_call>
 801669c:	4548      	cmp	r0, r9
 801669e:	d1cd      	bne.n	801663c <rcl_wait+0x74>
 80166a0:	692b      	ldr	r3, [r5, #16]
 80166a2:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80166a4:	2100      	movs	r1, #0
 80166a6:	5199      	str	r1, [r3, r6]
 80166a8:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80166aa:	3401      	adds	r4, #1
 80166ac:	f14a 0a00 	adc.w	sl, sl, #0
 80166b0:	429c      	cmp	r4, r3
 80166b2:	f17a 0100 	sbcs.w	r1, sl, #0
 80166b6:	d3d6      	bcc.n	8016666 <rcl_wait+0x9e>
 80166b8:	4616      	mov	r6, r2
 80166ba:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80166be:	4313      	orrs	r3, r2
 80166c0:	46d9      	mov	r9, fp
 80166c2:	f040 80a9 	bne.w	8016818 <rcl_wait+0x250>
 80166c6:	2300      	movs	r3, #0
 80166c8:	2200      	movs	r2, #0
 80166ca:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80166ce:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80166d2:	ab08      	add	r3, sp, #32
 80166d4:	9302      	str	r3, [sp, #8]
 80166d6:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 80166d8:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 80166dc:	e9cd 3200 	strd	r3, r2, [sp]
 80166e0:	f106 0110 	add.w	r1, r6, #16
 80166e4:	f106 031c 	add.w	r3, r6, #28
 80166e8:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 80166ec:	1d30      	adds	r0, r6, #4
 80166ee:	f001 fc13 	bl	8017f18 <rmw_wait>
 80166f2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80166f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80166f6:	4680      	mov	r8, r0
 80166f8:	b1ca      	cbz	r2, 801672e <rcl_wait+0x166>
 80166fa:	2400      	movs	r4, #0
 80166fc:	4627      	mov	r7, r4
 80166fe:	692a      	ldr	r2, [r5, #16]
 8016700:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8016704:	f10d 011f 	add.w	r1, sp, #31
 8016708:	00a6      	lsls	r6, r4, #2
 801670a:	b160      	cbz	r0, 8016726 <rcl_wait+0x15e>
 801670c:	f88d 701f 	strb.w	r7, [sp, #31]
 8016710:	f7f7 f9d6 	bl	800dac0 <rcl_timer_is_ready>
 8016714:	2800      	cmp	r0, #0
 8016716:	f47f af74 	bne.w	8016602 <rcl_wait+0x3a>
 801671a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801671e:	b90b      	cbnz	r3, 8016724 <rcl_wait+0x15c>
 8016720:	692a      	ldr	r2, [r5, #16]
 8016722:	5193      	str	r3, [r2, r6]
 8016724:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016726:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8016728:	3401      	adds	r4, #1
 801672a:	42a2      	cmp	r2, r4
 801672c:	d8e7      	bhi.n	80166fe <rcl_wait+0x136>
 801672e:	f038 0002 	bics.w	r0, r8, #2
 8016732:	f040 8090 	bne.w	8016856 <rcl_wait+0x28e>
 8016736:	686e      	ldr	r6, [r5, #4]
 8016738:	4602      	mov	r2, r0
 801673a:	b91e      	cbnz	r6, 8016744 <rcl_wait+0x17c>
 801673c:	e00d      	b.n	801675a <rcl_wait+0x192>
 801673e:	3201      	adds	r2, #1
 8016740:	42b2      	cmp	r2, r6
 8016742:	d00a      	beq.n	801675a <rcl_wait+0x192>
 8016744:	6899      	ldr	r1, [r3, #8]
 8016746:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801674a:	2900      	cmp	r1, #0
 801674c:	d1f7      	bne.n	801673e <rcl_wait+0x176>
 801674e:	682c      	ldr	r4, [r5, #0]
 8016750:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8016754:	3201      	adds	r2, #1
 8016756:	42b2      	cmp	r2, r6
 8016758:	d1f4      	bne.n	8016744 <rcl_wait+0x17c>
 801675a:	68ee      	ldr	r6, [r5, #12]
 801675c:	2200      	movs	r2, #0
 801675e:	b91e      	cbnz	r6, 8016768 <rcl_wait+0x1a0>
 8016760:	e00d      	b.n	801677e <rcl_wait+0x1b6>
 8016762:	3201      	adds	r2, #1
 8016764:	42b2      	cmp	r2, r6
 8016766:	d00a      	beq.n	801677e <rcl_wait+0x1b6>
 8016768:	6959      	ldr	r1, [r3, #20]
 801676a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801676e:	2900      	cmp	r1, #0
 8016770:	d1f7      	bne.n	8016762 <rcl_wait+0x19a>
 8016772:	68ac      	ldr	r4, [r5, #8]
 8016774:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8016778:	3201      	adds	r2, #1
 801677a:	42b2      	cmp	r2, r6
 801677c:	d1f4      	bne.n	8016768 <rcl_wait+0x1a0>
 801677e:	69ee      	ldr	r6, [r5, #28]
 8016780:	2200      	movs	r2, #0
 8016782:	b91e      	cbnz	r6, 801678c <rcl_wait+0x1c4>
 8016784:	e00d      	b.n	80167a2 <rcl_wait+0x1da>
 8016786:	3201      	adds	r2, #1
 8016788:	42b2      	cmp	r2, r6
 801678a:	d00a      	beq.n	80167a2 <rcl_wait+0x1da>
 801678c:	6a19      	ldr	r1, [r3, #32]
 801678e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016792:	2900      	cmp	r1, #0
 8016794:	d1f7      	bne.n	8016786 <rcl_wait+0x1be>
 8016796:	69ac      	ldr	r4, [r5, #24]
 8016798:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801679c:	3201      	adds	r2, #1
 801679e:	42b2      	cmp	r2, r6
 80167a0:	d1f4      	bne.n	801678c <rcl_wait+0x1c4>
 80167a2:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 80167a4:	2200      	movs	r2, #0
 80167a6:	b91e      	cbnz	r6, 80167b0 <rcl_wait+0x1e8>
 80167a8:	e00d      	b.n	80167c6 <rcl_wait+0x1fe>
 80167aa:	3201      	adds	r2, #1
 80167ac:	4296      	cmp	r6, r2
 80167ae:	d00a      	beq.n	80167c6 <rcl_wait+0x1fe>
 80167b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80167b2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80167b6:	2900      	cmp	r1, #0
 80167b8:	d1f7      	bne.n	80167aa <rcl_wait+0x1e2>
 80167ba:	6a2c      	ldr	r4, [r5, #32]
 80167bc:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80167c0:	3201      	adds	r2, #1
 80167c2:	4296      	cmp	r6, r2
 80167c4:	d1f4      	bne.n	80167b0 <rcl_wait+0x1e8>
 80167c6:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 80167c8:	2200      	movs	r2, #0
 80167ca:	b91e      	cbnz	r6, 80167d4 <rcl_wait+0x20c>
 80167cc:	e00d      	b.n	80167ea <rcl_wait+0x222>
 80167ce:	3201      	adds	r2, #1
 80167d0:	42b2      	cmp	r2, r6
 80167d2:	d00a      	beq.n	80167ea <rcl_wait+0x222>
 80167d4:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80167d6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80167da:	2900      	cmp	r1, #0
 80167dc:	d1f7      	bne.n	80167ce <rcl_wait+0x206>
 80167de:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 80167e0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80167e4:	3201      	adds	r2, #1
 80167e6:	42b2      	cmp	r2, r6
 80167e8:	d1f4      	bne.n	80167d4 <rcl_wait+0x20c>
 80167ea:	f1b8 0f02 	cmp.w	r8, #2
 80167ee:	f47f af08 	bne.w	8016602 <rcl_wait+0x3a>
 80167f2:	464b      	mov	r3, r9
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	bf08      	it	eq
 80167f8:	2002      	moveq	r0, #2
 80167fa:	e702      	b.n	8016602 <rcl_wait+0x3a>
 80167fc:	2a00      	cmp	r2, #0
 80167fe:	d03a      	beq.n	8016876 <rcl_wait+0x2ae>
 8016800:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8016804:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8016808:	e70e      	b.n	8016628 <rcl_wait+0x60>
 801680a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801680e:	b00d      	add	sp, #52	@ 0x34
 8016810:	ecbd 8b02 	vpop	{d8}
 8016814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016818:	9b04      	ldr	r3, [sp, #16]
 801681a:	2b01      	cmp	r3, #1
 801681c:	9b05      	ldr	r3, [sp, #20]
 801681e:	f173 0300 	sbcs.w	r3, r3, #0
 8016822:	db24      	blt.n	801686e <rcl_wait+0x2a6>
 8016824:	2f00      	cmp	r7, #0
 8016826:	bfbc      	itt	lt
 8016828:	f04f 0800 	movlt.w	r8, #0
 801682c:	4647      	movlt	r7, r8
 801682e:	a31e      	add	r3, pc, #120	@ (adr r3, 80168a8 <rcl_wait+0x2e0>)
 8016830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016834:	4640      	mov	r0, r8
 8016836:	4639      	mov	r1, r7
 8016838:	f7ea f9f8 	bl	8000c2c <__aeabi_ldivmod>
 801683c:	a31a      	add	r3, pc, #104	@ (adr r3, 80168a8 <rcl_wait+0x2e0>)
 801683e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016842:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016846:	4640      	mov	r0, r8
 8016848:	4639      	mov	r1, r7
 801684a:	f7ea f9ef 	bl	8000c2c <__aeabi_ldivmod>
 801684e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8016852:	ab08      	add	r3, sp, #32
 8016854:	e73e      	b.n	80166d4 <rcl_wait+0x10c>
 8016856:	2001      	movs	r0, #1
 8016858:	b00d      	add	sp, #52	@ 0x34
 801685a:	ecbd 8b02 	vpop	{d8}
 801685e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016862:	200b      	movs	r0, #11
 8016864:	b00d      	add	sp, #52	@ 0x34
 8016866:	ecbd 8b02 	vpop	{d8}
 801686a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801686e:	465b      	mov	r3, fp
 8016870:	2b00      	cmp	r3, #0
 8016872:	d1d7      	bne.n	8016824 <rcl_wait+0x25c>
 8016874:	e72e      	b.n	80166d4 <rcl_wait+0x10c>
 8016876:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801687a:	430b      	orrs	r3, r1
 801687c:	bf08      	it	eq
 801687e:	4691      	moveq	r9, r2
 8016880:	f43f af21 	beq.w	80166c6 <rcl_wait+0xfe>
 8016884:	9b04      	ldr	r3, [sp, #16]
 8016886:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801688a:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801688e:	2b01      	cmp	r3, #1
 8016890:	9b05      	ldr	r3, [sp, #20]
 8016892:	f173 0300 	sbcs.w	r3, r3, #0
 8016896:	f04f 0300 	mov.w	r3, #0
 801689a:	4699      	mov	r9, r3
 801689c:	dac2      	bge.n	8016824 <rcl_wait+0x25c>
 801689e:	e719      	b.n	80166d4 <rcl_wait+0x10c>
 80168a0:	ffffffff 	.word	0xffffffff
 80168a4:	7fffffff 	.word	0x7fffffff
 80168a8:	3b9aca00 	.word	0x3b9aca00
 80168ac:	00000000 	.word	0x00000000

080168b0 <rcl_action_take_goal_response>:
 80168b0:	2800      	cmp	r0, #0
 80168b2:	d039      	beq.n	8016928 <rcl_action_take_goal_response+0x78>
 80168b4:	b570      	push	{r4, r5, r6, lr}
 80168b6:	4604      	mov	r4, r0
 80168b8:	6800      	ldr	r0, [r0, #0]
 80168ba:	b380      	cbz	r0, 801691e <rcl_action_take_goal_response+0x6e>
 80168bc:	460d      	mov	r5, r1
 80168be:	4616      	mov	r6, r2
 80168c0:	f7fe fd2e 	bl	8015320 <rcl_client_is_valid>
 80168c4:	b330      	cbz	r0, 8016914 <rcl_action_take_goal_response+0x64>
 80168c6:	6820      	ldr	r0, [r4, #0]
 80168c8:	3004      	adds	r0, #4
 80168ca:	f7fe fd29 	bl	8015320 <rcl_client_is_valid>
 80168ce:	b308      	cbz	r0, 8016914 <rcl_action_take_goal_response+0x64>
 80168d0:	6820      	ldr	r0, [r4, #0]
 80168d2:	3008      	adds	r0, #8
 80168d4:	f7fe fd24 	bl	8015320 <rcl_client_is_valid>
 80168d8:	b1e0      	cbz	r0, 8016914 <rcl_action_take_goal_response+0x64>
 80168da:	6820      	ldr	r0, [r4, #0]
 80168dc:	300c      	adds	r0, #12
 80168de:	f7f6 fee1 	bl	800d6a4 <rcl_subscription_is_valid>
 80168e2:	b1b8      	cbz	r0, 8016914 <rcl_action_take_goal_response+0x64>
 80168e4:	6820      	ldr	r0, [r4, #0]
 80168e6:	3010      	adds	r0, #16
 80168e8:	f7f6 fedc 	bl	800d6a4 <rcl_subscription_is_valid>
 80168ec:	b190      	cbz	r0, 8016914 <rcl_action_take_goal_response+0x64>
 80168ee:	b1cd      	cbz	r5, 8016924 <rcl_action_take_goal_response+0x74>
 80168f0:	b1c6      	cbz	r6, 8016924 <rcl_action_take_goal_response+0x74>
 80168f2:	6820      	ldr	r0, [r4, #0]
 80168f4:	4632      	mov	r2, r6
 80168f6:	4629      	mov	r1, r5
 80168f8:	f7fe fcca 	bl	8015290 <rcl_take_response>
 80168fc:	b148      	cbz	r0, 8016912 <rcl_action_take_goal_response+0x62>
 80168fe:	280a      	cmp	r0, #10
 8016900:	d007      	beq.n	8016912 <rcl_action_take_goal_response+0x62>
 8016902:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8016906:	f640 0337 	movw	r3, #2103	@ 0x837
 801690a:	4290      	cmp	r0, r2
 801690c:	bf0c      	ite	eq
 801690e:	4618      	moveq	r0, r3
 8016910:	2001      	movne	r0, #1
 8016912:	bd70      	pop	{r4, r5, r6, pc}
 8016914:	f7f8 fa10 	bl	800ed38 <rcutils_reset_error>
 8016918:	f640 0036 	movw	r0, #2102	@ 0x836
 801691c:	bd70      	pop	{r4, r5, r6, pc}
 801691e:	f640 0036 	movw	r0, #2102	@ 0x836
 8016922:	bd70      	pop	{r4, r5, r6, pc}
 8016924:	200b      	movs	r0, #11
 8016926:	bd70      	pop	{r4, r5, r6, pc}
 8016928:	f640 0036 	movw	r0, #2102	@ 0x836
 801692c:	4770      	bx	lr
 801692e:	bf00      	nop

08016930 <rcl_action_send_result_request>:
 8016930:	b390      	cbz	r0, 8016998 <rcl_action_send_result_request+0x68>
 8016932:	b570      	push	{r4, r5, r6, lr}
 8016934:	4604      	mov	r4, r0
 8016936:	6800      	ldr	r0, [r0, #0]
 8016938:	b348      	cbz	r0, 801698e <rcl_action_send_result_request+0x5e>
 801693a:	460d      	mov	r5, r1
 801693c:	4616      	mov	r6, r2
 801693e:	f7fe fcef 	bl	8015320 <rcl_client_is_valid>
 8016942:	b1f8      	cbz	r0, 8016984 <rcl_action_send_result_request+0x54>
 8016944:	6820      	ldr	r0, [r4, #0]
 8016946:	3004      	adds	r0, #4
 8016948:	f7fe fcea 	bl	8015320 <rcl_client_is_valid>
 801694c:	b1d0      	cbz	r0, 8016984 <rcl_action_send_result_request+0x54>
 801694e:	6820      	ldr	r0, [r4, #0]
 8016950:	3008      	adds	r0, #8
 8016952:	f7fe fce5 	bl	8015320 <rcl_client_is_valid>
 8016956:	b1a8      	cbz	r0, 8016984 <rcl_action_send_result_request+0x54>
 8016958:	6820      	ldr	r0, [r4, #0]
 801695a:	300c      	adds	r0, #12
 801695c:	f7f6 fea2 	bl	800d6a4 <rcl_subscription_is_valid>
 8016960:	b180      	cbz	r0, 8016984 <rcl_action_send_result_request+0x54>
 8016962:	6820      	ldr	r0, [r4, #0]
 8016964:	3010      	adds	r0, #16
 8016966:	f7f6 fe9d 	bl	800d6a4 <rcl_subscription_is_valid>
 801696a:	b158      	cbz	r0, 8016984 <rcl_action_send_result_request+0x54>
 801696c:	b195      	cbz	r5, 8016994 <rcl_action_send_result_request+0x64>
 801696e:	b18e      	cbz	r6, 8016994 <rcl_action_send_result_request+0x64>
 8016970:	6820      	ldr	r0, [r4, #0]
 8016972:	4632      	mov	r2, r6
 8016974:	4629      	mov	r1, r5
 8016976:	3008      	adds	r0, #8
 8016978:	f7fe fc52 	bl	8015220 <rcl_send_request>
 801697c:	3800      	subs	r0, #0
 801697e:	bf18      	it	ne
 8016980:	2001      	movne	r0, #1
 8016982:	bd70      	pop	{r4, r5, r6, pc}
 8016984:	f7f8 f9d8 	bl	800ed38 <rcutils_reset_error>
 8016988:	f640 0036 	movw	r0, #2102	@ 0x836
 801698c:	bd70      	pop	{r4, r5, r6, pc}
 801698e:	f640 0036 	movw	r0, #2102	@ 0x836
 8016992:	bd70      	pop	{r4, r5, r6, pc}
 8016994:	200b      	movs	r0, #11
 8016996:	bd70      	pop	{r4, r5, r6, pc}
 8016998:	f640 0036 	movw	r0, #2102	@ 0x836
 801699c:	4770      	bx	lr
 801699e:	bf00      	nop

080169a0 <rcl_action_take_result_response>:
 80169a0:	2800      	cmp	r0, #0
 80169a2:	d03a      	beq.n	8016a1a <rcl_action_take_result_response+0x7a>
 80169a4:	b570      	push	{r4, r5, r6, lr}
 80169a6:	4604      	mov	r4, r0
 80169a8:	6800      	ldr	r0, [r0, #0]
 80169aa:	b388      	cbz	r0, 8016a10 <rcl_action_take_result_response+0x70>
 80169ac:	460d      	mov	r5, r1
 80169ae:	4616      	mov	r6, r2
 80169b0:	f7fe fcb6 	bl	8015320 <rcl_client_is_valid>
 80169b4:	b338      	cbz	r0, 8016a06 <rcl_action_take_result_response+0x66>
 80169b6:	6820      	ldr	r0, [r4, #0]
 80169b8:	3004      	adds	r0, #4
 80169ba:	f7fe fcb1 	bl	8015320 <rcl_client_is_valid>
 80169be:	b310      	cbz	r0, 8016a06 <rcl_action_take_result_response+0x66>
 80169c0:	6820      	ldr	r0, [r4, #0]
 80169c2:	3008      	adds	r0, #8
 80169c4:	f7fe fcac 	bl	8015320 <rcl_client_is_valid>
 80169c8:	b1e8      	cbz	r0, 8016a06 <rcl_action_take_result_response+0x66>
 80169ca:	6820      	ldr	r0, [r4, #0]
 80169cc:	300c      	adds	r0, #12
 80169ce:	f7f6 fe69 	bl	800d6a4 <rcl_subscription_is_valid>
 80169d2:	b1c0      	cbz	r0, 8016a06 <rcl_action_take_result_response+0x66>
 80169d4:	6820      	ldr	r0, [r4, #0]
 80169d6:	3010      	adds	r0, #16
 80169d8:	f7f6 fe64 	bl	800d6a4 <rcl_subscription_is_valid>
 80169dc:	b198      	cbz	r0, 8016a06 <rcl_action_take_result_response+0x66>
 80169de:	b1d5      	cbz	r5, 8016a16 <rcl_action_take_result_response+0x76>
 80169e0:	b1ce      	cbz	r6, 8016a16 <rcl_action_take_result_response+0x76>
 80169e2:	6820      	ldr	r0, [r4, #0]
 80169e4:	4632      	mov	r2, r6
 80169e6:	4629      	mov	r1, r5
 80169e8:	3008      	adds	r0, #8
 80169ea:	f7fe fc51 	bl	8015290 <rcl_take_response>
 80169ee:	b148      	cbz	r0, 8016a04 <rcl_action_take_result_response+0x64>
 80169f0:	280a      	cmp	r0, #10
 80169f2:	d007      	beq.n	8016a04 <rcl_action_take_result_response+0x64>
 80169f4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80169f8:	f640 0337 	movw	r3, #2103	@ 0x837
 80169fc:	4290      	cmp	r0, r2
 80169fe:	bf0c      	ite	eq
 8016a00:	4618      	moveq	r0, r3
 8016a02:	2001      	movne	r0, #1
 8016a04:	bd70      	pop	{r4, r5, r6, pc}
 8016a06:	f7f8 f997 	bl	800ed38 <rcutils_reset_error>
 8016a0a:	f640 0036 	movw	r0, #2102	@ 0x836
 8016a0e:	bd70      	pop	{r4, r5, r6, pc}
 8016a10:	f640 0036 	movw	r0, #2102	@ 0x836
 8016a14:	bd70      	pop	{r4, r5, r6, pc}
 8016a16:	200b      	movs	r0, #11
 8016a18:	bd70      	pop	{r4, r5, r6, pc}
 8016a1a:	f640 0036 	movw	r0, #2102	@ 0x836
 8016a1e:	4770      	bx	lr

08016a20 <rcl_action_take_cancel_response>:
 8016a20:	2800      	cmp	r0, #0
 8016a22:	d03a      	beq.n	8016a9a <rcl_action_take_cancel_response+0x7a>
 8016a24:	b570      	push	{r4, r5, r6, lr}
 8016a26:	4604      	mov	r4, r0
 8016a28:	6800      	ldr	r0, [r0, #0]
 8016a2a:	b388      	cbz	r0, 8016a90 <rcl_action_take_cancel_response+0x70>
 8016a2c:	460d      	mov	r5, r1
 8016a2e:	4616      	mov	r6, r2
 8016a30:	f7fe fc76 	bl	8015320 <rcl_client_is_valid>
 8016a34:	b338      	cbz	r0, 8016a86 <rcl_action_take_cancel_response+0x66>
 8016a36:	6820      	ldr	r0, [r4, #0]
 8016a38:	3004      	adds	r0, #4
 8016a3a:	f7fe fc71 	bl	8015320 <rcl_client_is_valid>
 8016a3e:	b310      	cbz	r0, 8016a86 <rcl_action_take_cancel_response+0x66>
 8016a40:	6820      	ldr	r0, [r4, #0]
 8016a42:	3008      	adds	r0, #8
 8016a44:	f7fe fc6c 	bl	8015320 <rcl_client_is_valid>
 8016a48:	b1e8      	cbz	r0, 8016a86 <rcl_action_take_cancel_response+0x66>
 8016a4a:	6820      	ldr	r0, [r4, #0]
 8016a4c:	300c      	adds	r0, #12
 8016a4e:	f7f6 fe29 	bl	800d6a4 <rcl_subscription_is_valid>
 8016a52:	b1c0      	cbz	r0, 8016a86 <rcl_action_take_cancel_response+0x66>
 8016a54:	6820      	ldr	r0, [r4, #0]
 8016a56:	3010      	adds	r0, #16
 8016a58:	f7f6 fe24 	bl	800d6a4 <rcl_subscription_is_valid>
 8016a5c:	b198      	cbz	r0, 8016a86 <rcl_action_take_cancel_response+0x66>
 8016a5e:	b1d5      	cbz	r5, 8016a96 <rcl_action_take_cancel_response+0x76>
 8016a60:	b1ce      	cbz	r6, 8016a96 <rcl_action_take_cancel_response+0x76>
 8016a62:	6820      	ldr	r0, [r4, #0]
 8016a64:	4632      	mov	r2, r6
 8016a66:	4629      	mov	r1, r5
 8016a68:	3004      	adds	r0, #4
 8016a6a:	f7fe fc11 	bl	8015290 <rcl_take_response>
 8016a6e:	b148      	cbz	r0, 8016a84 <rcl_action_take_cancel_response+0x64>
 8016a70:	280a      	cmp	r0, #10
 8016a72:	d007      	beq.n	8016a84 <rcl_action_take_cancel_response+0x64>
 8016a74:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8016a78:	f640 0337 	movw	r3, #2103	@ 0x837
 8016a7c:	4290      	cmp	r0, r2
 8016a7e:	bf0c      	ite	eq
 8016a80:	4618      	moveq	r0, r3
 8016a82:	2001      	movne	r0, #1
 8016a84:	bd70      	pop	{r4, r5, r6, pc}
 8016a86:	f7f8 f957 	bl	800ed38 <rcutils_reset_error>
 8016a8a:	f640 0036 	movw	r0, #2102	@ 0x836
 8016a8e:	bd70      	pop	{r4, r5, r6, pc}
 8016a90:	f640 0036 	movw	r0, #2102	@ 0x836
 8016a94:	bd70      	pop	{r4, r5, r6, pc}
 8016a96:	200b      	movs	r0, #11
 8016a98:	bd70      	pop	{r4, r5, r6, pc}
 8016a9a:	f640 0036 	movw	r0, #2102	@ 0x836
 8016a9e:	4770      	bx	lr

08016aa0 <rcl_action_take_feedback>:
 8016aa0:	2800      	cmp	r0, #0
 8016aa2:	d038      	beq.n	8016b16 <rcl_action_take_feedback+0x76>
 8016aa4:	b530      	push	{r4, r5, lr}
 8016aa6:	4604      	mov	r4, r0
 8016aa8:	6800      	ldr	r0, [r0, #0]
 8016aaa:	b091      	sub	sp, #68	@ 0x44
 8016aac:	b378      	cbz	r0, 8016b0e <rcl_action_take_feedback+0x6e>
 8016aae:	460d      	mov	r5, r1
 8016ab0:	f7fe fc36 	bl	8015320 <rcl_client_is_valid>
 8016ab4:	b328      	cbz	r0, 8016b02 <rcl_action_take_feedback+0x62>
 8016ab6:	6820      	ldr	r0, [r4, #0]
 8016ab8:	3004      	adds	r0, #4
 8016aba:	f7fe fc31 	bl	8015320 <rcl_client_is_valid>
 8016abe:	b300      	cbz	r0, 8016b02 <rcl_action_take_feedback+0x62>
 8016ac0:	6820      	ldr	r0, [r4, #0]
 8016ac2:	3008      	adds	r0, #8
 8016ac4:	f7fe fc2c 	bl	8015320 <rcl_client_is_valid>
 8016ac8:	b1d8      	cbz	r0, 8016b02 <rcl_action_take_feedback+0x62>
 8016aca:	6820      	ldr	r0, [r4, #0]
 8016acc:	300c      	adds	r0, #12
 8016ace:	f7f6 fde9 	bl	800d6a4 <rcl_subscription_is_valid>
 8016ad2:	b1b0      	cbz	r0, 8016b02 <rcl_action_take_feedback+0x62>
 8016ad4:	6820      	ldr	r0, [r4, #0]
 8016ad6:	3010      	adds	r0, #16
 8016ad8:	f7f6 fde4 	bl	800d6a4 <rcl_subscription_is_valid>
 8016adc:	b188      	cbz	r0, 8016b02 <rcl_action_take_feedback+0x62>
 8016ade:	b1ed      	cbz	r5, 8016b1c <rcl_action_take_feedback+0x7c>
 8016ae0:	6820      	ldr	r0, [r4, #0]
 8016ae2:	2300      	movs	r3, #0
 8016ae4:	466a      	mov	r2, sp
 8016ae6:	4629      	mov	r1, r5
 8016ae8:	300c      	adds	r0, #12
 8016aea:	f7f6 fd7d 	bl	800d5e8 <rcl_take>
 8016aee:	b160      	cbz	r0, 8016b0a <rcl_action_take_feedback+0x6a>
 8016af0:	f240 1391 	movw	r3, #401	@ 0x191
 8016af4:	4298      	cmp	r0, r3
 8016af6:	d014      	beq.n	8016b22 <rcl_action_take_feedback+0x82>
 8016af8:	280a      	cmp	r0, #10
 8016afa:	bf18      	it	ne
 8016afc:	2001      	movne	r0, #1
 8016afe:	b011      	add	sp, #68	@ 0x44
 8016b00:	bd30      	pop	{r4, r5, pc}
 8016b02:	f7f8 f919 	bl	800ed38 <rcutils_reset_error>
 8016b06:	f640 0036 	movw	r0, #2102	@ 0x836
 8016b0a:	b011      	add	sp, #68	@ 0x44
 8016b0c:	bd30      	pop	{r4, r5, pc}
 8016b0e:	f640 0036 	movw	r0, #2102	@ 0x836
 8016b12:	b011      	add	sp, #68	@ 0x44
 8016b14:	bd30      	pop	{r4, r5, pc}
 8016b16:	f640 0036 	movw	r0, #2102	@ 0x836
 8016b1a:	4770      	bx	lr
 8016b1c:	200b      	movs	r0, #11
 8016b1e:	b011      	add	sp, #68	@ 0x44
 8016b20:	bd30      	pop	{r4, r5, pc}
 8016b22:	f640 0037 	movw	r0, #2103	@ 0x837
 8016b26:	e7f0      	b.n	8016b0a <rcl_action_take_feedback+0x6a>

08016b28 <rcl_action_wait_set_add_action_client>:
 8016b28:	2800      	cmp	r0, #0
 8016b2a:	d048      	beq.n	8016bbe <rcl_action_wait_set_add_action_client+0x96>
 8016b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b2e:	460c      	mov	r4, r1
 8016b30:	2900      	cmp	r1, #0
 8016b32:	d03c      	beq.n	8016bae <rcl_action_wait_set_add_action_client+0x86>
 8016b34:	4605      	mov	r5, r0
 8016b36:	6808      	ldr	r0, [r1, #0]
 8016b38:	2800      	cmp	r0, #0
 8016b3a:	d038      	beq.n	8016bae <rcl_action_wait_set_add_action_client+0x86>
 8016b3c:	4617      	mov	r7, r2
 8016b3e:	461e      	mov	r6, r3
 8016b40:	f7fe fbee 	bl	8015320 <rcl_client_is_valid>
 8016b44:	b3b0      	cbz	r0, 8016bb4 <rcl_action_wait_set_add_action_client+0x8c>
 8016b46:	6820      	ldr	r0, [r4, #0]
 8016b48:	3004      	adds	r0, #4
 8016b4a:	f7fe fbe9 	bl	8015320 <rcl_client_is_valid>
 8016b4e:	b388      	cbz	r0, 8016bb4 <rcl_action_wait_set_add_action_client+0x8c>
 8016b50:	6820      	ldr	r0, [r4, #0]
 8016b52:	3008      	adds	r0, #8
 8016b54:	f7fe fbe4 	bl	8015320 <rcl_client_is_valid>
 8016b58:	b360      	cbz	r0, 8016bb4 <rcl_action_wait_set_add_action_client+0x8c>
 8016b5a:	6820      	ldr	r0, [r4, #0]
 8016b5c:	300c      	adds	r0, #12
 8016b5e:	f7f6 fda1 	bl	800d6a4 <rcl_subscription_is_valid>
 8016b62:	b338      	cbz	r0, 8016bb4 <rcl_action_wait_set_add_action_client+0x8c>
 8016b64:	6820      	ldr	r0, [r4, #0]
 8016b66:	3010      	adds	r0, #16
 8016b68:	f7f6 fd9c 	bl	800d6a4 <rcl_subscription_is_valid>
 8016b6c:	b310      	cbz	r0, 8016bb4 <rcl_action_wait_set_add_action_client+0x8c>
 8016b6e:	6821      	ldr	r1, [r4, #0]
 8016b70:	4628      	mov	r0, r5
 8016b72:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8016b76:	f7ff fccd 	bl	8016514 <rcl_wait_set_add_client>
 8016b7a:	b9b8      	cbnz	r0, 8016bac <rcl_action_wait_set_add_action_client+0x84>
 8016b7c:	6821      	ldr	r1, [r4, #0]
 8016b7e:	4628      	mov	r0, r5
 8016b80:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8016b84:	3104      	adds	r1, #4
 8016b86:	f7ff fcc5 	bl	8016514 <rcl_wait_set_add_client>
 8016b8a:	b978      	cbnz	r0, 8016bac <rcl_action_wait_set_add_action_client+0x84>
 8016b8c:	6821      	ldr	r1, [r4, #0]
 8016b8e:	4628      	mov	r0, r5
 8016b90:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8016b94:	3108      	adds	r1, #8
 8016b96:	f7ff fcbd 	bl	8016514 <rcl_wait_set_add_client>
 8016b9a:	b938      	cbnz	r0, 8016bac <rcl_action_wait_set_add_action_client+0x84>
 8016b9c:	6821      	ldr	r1, [r4, #0]
 8016b9e:	4628      	mov	r0, r5
 8016ba0:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8016ba4:	310c      	adds	r1, #12
 8016ba6:	f7ff f96d 	bl	8015e84 <rcl_wait_set_add_subscription>
 8016baa:	b158      	cbz	r0, 8016bc4 <rcl_action_wait_set_add_action_client+0x9c>
 8016bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016bae:	f640 0036 	movw	r0, #2102	@ 0x836
 8016bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016bb4:	f7f8 f8c0 	bl	800ed38 <rcutils_reset_error>
 8016bb8:	f640 0036 	movw	r0, #2102	@ 0x836
 8016bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016bbe:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016bc2:	4770      	bx	lr
 8016bc4:	6821      	ldr	r1, [r4, #0]
 8016bc6:	4628      	mov	r0, r5
 8016bc8:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8016bcc:	3110      	adds	r1, #16
 8016bce:	f7ff f959 	bl	8015e84 <rcl_wait_set_add_subscription>
 8016bd2:	2800      	cmp	r0, #0
 8016bd4:	d1ea      	bne.n	8016bac <rcl_action_wait_set_add_action_client+0x84>
 8016bd6:	b11f      	cbz	r7, 8016be0 <rcl_action_wait_set_add_action_client+0xb8>
 8016bd8:	6823      	ldr	r3, [r4, #0]
 8016bda:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8016bde:	603b      	str	r3, [r7, #0]
 8016be0:	2e00      	cmp	r6, #0
 8016be2:	d0e3      	beq.n	8016bac <rcl_action_wait_set_add_action_client+0x84>
 8016be4:	6823      	ldr	r3, [r4, #0]
 8016be6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8016bea:	6033      	str	r3, [r6, #0]
 8016bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016bee:	bf00      	nop

08016bf0 <rcl_action_client_wait_set_get_entities_ready>:
 8016bf0:	2800      	cmp	r0, #0
 8016bf2:	f000 808d 	beq.w	8016d10 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8016bf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bfa:	460c      	mov	r4, r1
 8016bfc:	2900      	cmp	r1, #0
 8016bfe:	d077      	beq.n	8016cf0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8016c00:	4605      	mov	r5, r0
 8016c02:	6808      	ldr	r0, [r1, #0]
 8016c04:	2800      	cmp	r0, #0
 8016c06:	d073      	beq.n	8016cf0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8016c08:	4616      	mov	r6, r2
 8016c0a:	461f      	mov	r7, r3
 8016c0c:	f7fe fb88 	bl	8015320 <rcl_client_is_valid>
 8016c10:	2800      	cmp	r0, #0
 8016c12:	d071      	beq.n	8016cf8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8016c14:	6820      	ldr	r0, [r4, #0]
 8016c16:	3004      	adds	r0, #4
 8016c18:	f7fe fb82 	bl	8015320 <rcl_client_is_valid>
 8016c1c:	2800      	cmp	r0, #0
 8016c1e:	d06b      	beq.n	8016cf8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8016c20:	6820      	ldr	r0, [r4, #0]
 8016c22:	3008      	adds	r0, #8
 8016c24:	f7fe fb7c 	bl	8015320 <rcl_client_is_valid>
 8016c28:	2800      	cmp	r0, #0
 8016c2a:	d065      	beq.n	8016cf8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8016c2c:	6820      	ldr	r0, [r4, #0]
 8016c2e:	300c      	adds	r0, #12
 8016c30:	f7f6 fd38 	bl	800d6a4 <rcl_subscription_is_valid>
 8016c34:	2800      	cmp	r0, #0
 8016c36:	d05f      	beq.n	8016cf8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8016c38:	6820      	ldr	r0, [r4, #0]
 8016c3a:	3010      	adds	r0, #16
 8016c3c:	f7f6 fd32 	bl	800d6a4 <rcl_subscription_is_valid>
 8016c40:	2800      	cmp	r0, #0
 8016c42:	d059      	beq.n	8016cf8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8016c44:	2e00      	cmp	r6, #0
 8016c46:	d060      	beq.n	8016d0a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8016c48:	2f00      	cmp	r7, #0
 8016c4a:	d05e      	beq.n	8016d0a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8016c4c:	9b06      	ldr	r3, [sp, #24]
 8016c4e:	2b00      	cmp	r3, #0
 8016c50:	d05b      	beq.n	8016d0a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8016c52:	9b07      	ldr	r3, [sp, #28]
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	d058      	beq.n	8016d0a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8016c58:	9b08      	ldr	r3, [sp, #32]
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	d055      	beq.n	8016d0a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8016c5e:	6823      	ldr	r3, [r4, #0]
 8016c60:	686a      	ldr	r2, [r5, #4]
 8016c62:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8016c66:	428a      	cmp	r2, r1
 8016c68:	d94c      	bls.n	8016d04 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8016c6a:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8016c6e:	4282      	cmp	r2, r0
 8016c70:	d948      	bls.n	8016d04 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8016c72:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8016c76:	69ea      	ldr	r2, [r5, #28]
 8016c78:	42a2      	cmp	r2, r4
 8016c7a:	d943      	bls.n	8016d04 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8016c7c:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8016c80:	4562      	cmp	r2, ip
 8016c82:	d93f      	bls.n	8016d04 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8016c84:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8016c88:	4572      	cmp	r2, lr
 8016c8a:	d93b      	bls.n	8016d04 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8016c8c:	69aa      	ldr	r2, [r5, #24]
 8016c8e:	682d      	ldr	r5, [r5, #0]
 8016c90:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8016c94:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8016c98:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8016c9c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8016ca0:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8016ca4:	f103 0c0c 	add.w	ip, r3, #12
 8016ca8:	eba5 050c 	sub.w	r5, r5, ip
 8016cac:	fab5 f585 	clz	r5, r5
 8016cb0:	096d      	lsrs	r5, r5, #5
 8016cb2:	7035      	strb	r5, [r6, #0]
 8016cb4:	f103 0510 	add.w	r5, r3, #16
 8016cb8:	1b64      	subs	r4, r4, r5
 8016cba:	fab4 f484 	clz	r4, r4
 8016cbe:	0964      	lsrs	r4, r4, #5
 8016cc0:	703c      	strb	r4, [r7, #0]
 8016cc2:	eba3 0008 	sub.w	r0, r3, r8
 8016cc6:	1d1c      	adds	r4, r3, #4
 8016cc8:	3308      	adds	r3, #8
 8016cca:	1ad3      	subs	r3, r2, r3
 8016ccc:	fab0 f080 	clz	r0, r0
 8016cd0:	9a06      	ldr	r2, [sp, #24]
 8016cd2:	0940      	lsrs	r0, r0, #5
 8016cd4:	1b09      	subs	r1, r1, r4
 8016cd6:	7010      	strb	r0, [r2, #0]
 8016cd8:	fab1 f181 	clz	r1, r1
 8016cdc:	9a07      	ldr	r2, [sp, #28]
 8016cde:	0949      	lsrs	r1, r1, #5
 8016ce0:	7011      	strb	r1, [r2, #0]
 8016ce2:	fab3 f383 	clz	r3, r3
 8016ce6:	9a08      	ldr	r2, [sp, #32]
 8016ce8:	095b      	lsrs	r3, r3, #5
 8016cea:	2000      	movs	r0, #0
 8016cec:	7013      	strb	r3, [r2, #0]
 8016cee:	e001      	b.n	8016cf4 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8016cf0:	f640 0036 	movw	r0, #2102	@ 0x836
 8016cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016cf8:	f7f8 f81e 	bl	800ed38 <rcutils_reset_error>
 8016cfc:	f640 0036 	movw	r0, #2102	@ 0x836
 8016d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d04:	2001      	movs	r0, #1
 8016d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d0a:	200b      	movs	r0, #11
 8016d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d10:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016d14:	4770      	bx	lr
 8016d16:	bf00      	nop

08016d18 <rcl_action_take_goal_request>:
 8016d18:	2800      	cmp	r0, #0
 8016d1a:	d039      	beq.n	8016d90 <rcl_action_take_goal_request+0x78>
 8016d1c:	b570      	push	{r4, r5, r6, lr}
 8016d1e:	4604      	mov	r4, r0
 8016d20:	6800      	ldr	r0, [r0, #0]
 8016d22:	b380      	cbz	r0, 8016d86 <rcl_action_take_goal_request+0x6e>
 8016d24:	460d      	mov	r5, r1
 8016d26:	4616      	mov	r6, r2
 8016d28:	f7fe fe5a 	bl	80159e0 <rcl_service_is_valid>
 8016d2c:	b330      	cbz	r0, 8016d7c <rcl_action_take_goal_request+0x64>
 8016d2e:	6820      	ldr	r0, [r4, #0]
 8016d30:	3004      	adds	r0, #4
 8016d32:	f7fe fe55 	bl	80159e0 <rcl_service_is_valid>
 8016d36:	b308      	cbz	r0, 8016d7c <rcl_action_take_goal_request+0x64>
 8016d38:	6820      	ldr	r0, [r4, #0]
 8016d3a:	3008      	adds	r0, #8
 8016d3c:	f7fe fe50 	bl	80159e0 <rcl_service_is_valid>
 8016d40:	b1e0      	cbz	r0, 8016d7c <rcl_action_take_goal_request+0x64>
 8016d42:	6820      	ldr	r0, [r4, #0]
 8016d44:	300c      	adds	r0, #12
 8016d46:	f7f6 fafd 	bl	800d344 <rcl_publisher_is_valid>
 8016d4a:	b1b8      	cbz	r0, 8016d7c <rcl_action_take_goal_request+0x64>
 8016d4c:	6820      	ldr	r0, [r4, #0]
 8016d4e:	3010      	adds	r0, #16
 8016d50:	f7f6 faf8 	bl	800d344 <rcl_publisher_is_valid>
 8016d54:	b190      	cbz	r0, 8016d7c <rcl_action_take_goal_request+0x64>
 8016d56:	b1cd      	cbz	r5, 8016d8c <rcl_action_take_goal_request+0x74>
 8016d58:	b1c6      	cbz	r6, 8016d8c <rcl_action_take_goal_request+0x74>
 8016d5a:	6820      	ldr	r0, [r4, #0]
 8016d5c:	4632      	mov	r2, r6
 8016d5e:	4629      	mov	r1, r5
 8016d60:	f7fe fde6 	bl	8015930 <rcl_take_request>
 8016d64:	b148      	cbz	r0, 8016d7a <rcl_action_take_goal_request+0x62>
 8016d66:	280a      	cmp	r0, #10
 8016d68:	d007      	beq.n	8016d7a <rcl_action_take_goal_request+0x62>
 8016d6a:	f240 2259 	movw	r2, #601	@ 0x259
 8016d6e:	f640 0399 	movw	r3, #2201	@ 0x899
 8016d72:	4290      	cmp	r0, r2
 8016d74:	bf0c      	ite	eq
 8016d76:	4618      	moveq	r0, r3
 8016d78:	2001      	movne	r0, #1
 8016d7a:	bd70      	pop	{r4, r5, r6, pc}
 8016d7c:	f7f7 ffdc 	bl	800ed38 <rcutils_reset_error>
 8016d80:	f640 0098 	movw	r0, #2200	@ 0x898
 8016d84:	bd70      	pop	{r4, r5, r6, pc}
 8016d86:	f640 0098 	movw	r0, #2200	@ 0x898
 8016d8a:	bd70      	pop	{r4, r5, r6, pc}
 8016d8c:	200b      	movs	r0, #11
 8016d8e:	bd70      	pop	{r4, r5, r6, pc}
 8016d90:	f640 0098 	movw	r0, #2200	@ 0x898
 8016d94:	4770      	bx	lr
 8016d96:	bf00      	nop

08016d98 <rcl_action_send_goal_response>:
 8016d98:	b390      	cbz	r0, 8016e00 <rcl_action_send_goal_response+0x68>
 8016d9a:	b570      	push	{r4, r5, r6, lr}
 8016d9c:	4604      	mov	r4, r0
 8016d9e:	6800      	ldr	r0, [r0, #0]
 8016da0:	b348      	cbz	r0, 8016df6 <rcl_action_send_goal_response+0x5e>
 8016da2:	460d      	mov	r5, r1
 8016da4:	4616      	mov	r6, r2
 8016da6:	f7fe fe1b 	bl	80159e0 <rcl_service_is_valid>
 8016daa:	b1f8      	cbz	r0, 8016dec <rcl_action_send_goal_response+0x54>
 8016dac:	6820      	ldr	r0, [r4, #0]
 8016dae:	3004      	adds	r0, #4
 8016db0:	f7fe fe16 	bl	80159e0 <rcl_service_is_valid>
 8016db4:	b1d0      	cbz	r0, 8016dec <rcl_action_send_goal_response+0x54>
 8016db6:	6820      	ldr	r0, [r4, #0]
 8016db8:	3008      	adds	r0, #8
 8016dba:	f7fe fe11 	bl	80159e0 <rcl_service_is_valid>
 8016dbe:	b1a8      	cbz	r0, 8016dec <rcl_action_send_goal_response+0x54>
 8016dc0:	6820      	ldr	r0, [r4, #0]
 8016dc2:	300c      	adds	r0, #12
 8016dc4:	f7f6 fabe 	bl	800d344 <rcl_publisher_is_valid>
 8016dc8:	b180      	cbz	r0, 8016dec <rcl_action_send_goal_response+0x54>
 8016dca:	6820      	ldr	r0, [r4, #0]
 8016dcc:	3010      	adds	r0, #16
 8016dce:	f7f6 fab9 	bl	800d344 <rcl_publisher_is_valid>
 8016dd2:	b158      	cbz	r0, 8016dec <rcl_action_send_goal_response+0x54>
 8016dd4:	b195      	cbz	r5, 8016dfc <rcl_action_send_goal_response+0x64>
 8016dd6:	b18e      	cbz	r6, 8016dfc <rcl_action_send_goal_response+0x64>
 8016dd8:	6820      	ldr	r0, [r4, #0]
 8016dda:	4632      	mov	r2, r6
 8016ddc:	4629      	mov	r1, r5
 8016dde:	f7fe fde7 	bl	80159b0 <rcl_send_response>
 8016de2:	b110      	cbz	r0, 8016dea <rcl_action_send_goal_response+0x52>
 8016de4:	2802      	cmp	r0, #2
 8016de6:	bf18      	it	ne
 8016de8:	2001      	movne	r0, #1
 8016dea:	bd70      	pop	{r4, r5, r6, pc}
 8016dec:	f7f7 ffa4 	bl	800ed38 <rcutils_reset_error>
 8016df0:	f640 0098 	movw	r0, #2200	@ 0x898
 8016df4:	bd70      	pop	{r4, r5, r6, pc}
 8016df6:	f640 0098 	movw	r0, #2200	@ 0x898
 8016dfa:	bd70      	pop	{r4, r5, r6, pc}
 8016dfc:	200b      	movs	r0, #11
 8016dfe:	bd70      	pop	{r4, r5, r6, pc}
 8016e00:	f640 0098 	movw	r0, #2200	@ 0x898
 8016e04:	4770      	bx	lr
 8016e06:	bf00      	nop

08016e08 <rcl_action_take_result_request>:
 8016e08:	2800      	cmp	r0, #0
 8016e0a:	d03a      	beq.n	8016e82 <rcl_action_take_result_request+0x7a>
 8016e0c:	b570      	push	{r4, r5, r6, lr}
 8016e0e:	4604      	mov	r4, r0
 8016e10:	6800      	ldr	r0, [r0, #0]
 8016e12:	b388      	cbz	r0, 8016e78 <rcl_action_take_result_request+0x70>
 8016e14:	460d      	mov	r5, r1
 8016e16:	4616      	mov	r6, r2
 8016e18:	f7fe fde2 	bl	80159e0 <rcl_service_is_valid>
 8016e1c:	b338      	cbz	r0, 8016e6e <rcl_action_take_result_request+0x66>
 8016e1e:	6820      	ldr	r0, [r4, #0]
 8016e20:	3004      	adds	r0, #4
 8016e22:	f7fe fddd 	bl	80159e0 <rcl_service_is_valid>
 8016e26:	b310      	cbz	r0, 8016e6e <rcl_action_take_result_request+0x66>
 8016e28:	6820      	ldr	r0, [r4, #0]
 8016e2a:	3008      	adds	r0, #8
 8016e2c:	f7fe fdd8 	bl	80159e0 <rcl_service_is_valid>
 8016e30:	b1e8      	cbz	r0, 8016e6e <rcl_action_take_result_request+0x66>
 8016e32:	6820      	ldr	r0, [r4, #0]
 8016e34:	300c      	adds	r0, #12
 8016e36:	f7f6 fa85 	bl	800d344 <rcl_publisher_is_valid>
 8016e3a:	b1c0      	cbz	r0, 8016e6e <rcl_action_take_result_request+0x66>
 8016e3c:	6820      	ldr	r0, [r4, #0]
 8016e3e:	3010      	adds	r0, #16
 8016e40:	f7f6 fa80 	bl	800d344 <rcl_publisher_is_valid>
 8016e44:	b198      	cbz	r0, 8016e6e <rcl_action_take_result_request+0x66>
 8016e46:	b1d5      	cbz	r5, 8016e7e <rcl_action_take_result_request+0x76>
 8016e48:	b1ce      	cbz	r6, 8016e7e <rcl_action_take_result_request+0x76>
 8016e4a:	6820      	ldr	r0, [r4, #0]
 8016e4c:	4632      	mov	r2, r6
 8016e4e:	4629      	mov	r1, r5
 8016e50:	3008      	adds	r0, #8
 8016e52:	f7fe fd6d 	bl	8015930 <rcl_take_request>
 8016e56:	b148      	cbz	r0, 8016e6c <rcl_action_take_result_request+0x64>
 8016e58:	280a      	cmp	r0, #10
 8016e5a:	d007      	beq.n	8016e6c <rcl_action_take_result_request+0x64>
 8016e5c:	f240 2259 	movw	r2, #601	@ 0x259
 8016e60:	f640 0399 	movw	r3, #2201	@ 0x899
 8016e64:	4290      	cmp	r0, r2
 8016e66:	bf0c      	ite	eq
 8016e68:	4618      	moveq	r0, r3
 8016e6a:	2001      	movne	r0, #1
 8016e6c:	bd70      	pop	{r4, r5, r6, pc}
 8016e6e:	f7f7 ff63 	bl	800ed38 <rcutils_reset_error>
 8016e72:	f640 0098 	movw	r0, #2200	@ 0x898
 8016e76:	bd70      	pop	{r4, r5, r6, pc}
 8016e78:	f640 0098 	movw	r0, #2200	@ 0x898
 8016e7c:	bd70      	pop	{r4, r5, r6, pc}
 8016e7e:	200b      	movs	r0, #11
 8016e80:	bd70      	pop	{r4, r5, r6, pc}
 8016e82:	f640 0098 	movw	r0, #2200	@ 0x898
 8016e86:	4770      	bx	lr

08016e88 <rcl_action_take_cancel_request>:
 8016e88:	2800      	cmp	r0, #0
 8016e8a:	d03a      	beq.n	8016f02 <rcl_action_take_cancel_request+0x7a>
 8016e8c:	b570      	push	{r4, r5, r6, lr}
 8016e8e:	4604      	mov	r4, r0
 8016e90:	6800      	ldr	r0, [r0, #0]
 8016e92:	b388      	cbz	r0, 8016ef8 <rcl_action_take_cancel_request+0x70>
 8016e94:	460d      	mov	r5, r1
 8016e96:	4616      	mov	r6, r2
 8016e98:	f7fe fda2 	bl	80159e0 <rcl_service_is_valid>
 8016e9c:	b338      	cbz	r0, 8016eee <rcl_action_take_cancel_request+0x66>
 8016e9e:	6820      	ldr	r0, [r4, #0]
 8016ea0:	3004      	adds	r0, #4
 8016ea2:	f7fe fd9d 	bl	80159e0 <rcl_service_is_valid>
 8016ea6:	b310      	cbz	r0, 8016eee <rcl_action_take_cancel_request+0x66>
 8016ea8:	6820      	ldr	r0, [r4, #0]
 8016eaa:	3008      	adds	r0, #8
 8016eac:	f7fe fd98 	bl	80159e0 <rcl_service_is_valid>
 8016eb0:	b1e8      	cbz	r0, 8016eee <rcl_action_take_cancel_request+0x66>
 8016eb2:	6820      	ldr	r0, [r4, #0]
 8016eb4:	300c      	adds	r0, #12
 8016eb6:	f7f6 fa45 	bl	800d344 <rcl_publisher_is_valid>
 8016eba:	b1c0      	cbz	r0, 8016eee <rcl_action_take_cancel_request+0x66>
 8016ebc:	6820      	ldr	r0, [r4, #0]
 8016ebe:	3010      	adds	r0, #16
 8016ec0:	f7f6 fa40 	bl	800d344 <rcl_publisher_is_valid>
 8016ec4:	b198      	cbz	r0, 8016eee <rcl_action_take_cancel_request+0x66>
 8016ec6:	b1d5      	cbz	r5, 8016efe <rcl_action_take_cancel_request+0x76>
 8016ec8:	b1ce      	cbz	r6, 8016efe <rcl_action_take_cancel_request+0x76>
 8016eca:	6820      	ldr	r0, [r4, #0]
 8016ecc:	4632      	mov	r2, r6
 8016ece:	4629      	mov	r1, r5
 8016ed0:	3004      	adds	r0, #4
 8016ed2:	f7fe fd2d 	bl	8015930 <rcl_take_request>
 8016ed6:	b148      	cbz	r0, 8016eec <rcl_action_take_cancel_request+0x64>
 8016ed8:	280a      	cmp	r0, #10
 8016eda:	d007      	beq.n	8016eec <rcl_action_take_cancel_request+0x64>
 8016edc:	f240 2259 	movw	r2, #601	@ 0x259
 8016ee0:	f640 0399 	movw	r3, #2201	@ 0x899
 8016ee4:	4290      	cmp	r0, r2
 8016ee6:	bf0c      	ite	eq
 8016ee8:	4618      	moveq	r0, r3
 8016eea:	2001      	movne	r0, #1
 8016eec:	bd70      	pop	{r4, r5, r6, pc}
 8016eee:	f7f7 ff23 	bl	800ed38 <rcutils_reset_error>
 8016ef2:	f640 0098 	movw	r0, #2200	@ 0x898
 8016ef6:	bd70      	pop	{r4, r5, r6, pc}
 8016ef8:	f640 0098 	movw	r0, #2200	@ 0x898
 8016efc:	bd70      	pop	{r4, r5, r6, pc}
 8016efe:	200b      	movs	r0, #11
 8016f00:	bd70      	pop	{r4, r5, r6, pc}
 8016f02:	f640 0098 	movw	r0, #2200	@ 0x898
 8016f06:	4770      	bx	lr

08016f08 <rcl_action_send_cancel_response>:
 8016f08:	b398      	cbz	r0, 8016f72 <rcl_action_send_cancel_response+0x6a>
 8016f0a:	b570      	push	{r4, r5, r6, lr}
 8016f0c:	4604      	mov	r4, r0
 8016f0e:	6800      	ldr	r0, [r0, #0]
 8016f10:	b350      	cbz	r0, 8016f68 <rcl_action_send_cancel_response+0x60>
 8016f12:	460d      	mov	r5, r1
 8016f14:	4616      	mov	r6, r2
 8016f16:	f7fe fd63 	bl	80159e0 <rcl_service_is_valid>
 8016f1a:	b300      	cbz	r0, 8016f5e <rcl_action_send_cancel_response+0x56>
 8016f1c:	6820      	ldr	r0, [r4, #0]
 8016f1e:	3004      	adds	r0, #4
 8016f20:	f7fe fd5e 	bl	80159e0 <rcl_service_is_valid>
 8016f24:	b1d8      	cbz	r0, 8016f5e <rcl_action_send_cancel_response+0x56>
 8016f26:	6820      	ldr	r0, [r4, #0]
 8016f28:	3008      	adds	r0, #8
 8016f2a:	f7fe fd59 	bl	80159e0 <rcl_service_is_valid>
 8016f2e:	b1b0      	cbz	r0, 8016f5e <rcl_action_send_cancel_response+0x56>
 8016f30:	6820      	ldr	r0, [r4, #0]
 8016f32:	300c      	adds	r0, #12
 8016f34:	f7f6 fa06 	bl	800d344 <rcl_publisher_is_valid>
 8016f38:	b188      	cbz	r0, 8016f5e <rcl_action_send_cancel_response+0x56>
 8016f3a:	6820      	ldr	r0, [r4, #0]
 8016f3c:	3010      	adds	r0, #16
 8016f3e:	f7f6 fa01 	bl	800d344 <rcl_publisher_is_valid>
 8016f42:	b160      	cbz	r0, 8016f5e <rcl_action_send_cancel_response+0x56>
 8016f44:	b19d      	cbz	r5, 8016f6e <rcl_action_send_cancel_response+0x66>
 8016f46:	b196      	cbz	r6, 8016f6e <rcl_action_send_cancel_response+0x66>
 8016f48:	6820      	ldr	r0, [r4, #0]
 8016f4a:	4632      	mov	r2, r6
 8016f4c:	4629      	mov	r1, r5
 8016f4e:	3004      	adds	r0, #4
 8016f50:	f7fe fd2e 	bl	80159b0 <rcl_send_response>
 8016f54:	b110      	cbz	r0, 8016f5c <rcl_action_send_cancel_response+0x54>
 8016f56:	2802      	cmp	r0, #2
 8016f58:	bf18      	it	ne
 8016f5a:	2001      	movne	r0, #1
 8016f5c:	bd70      	pop	{r4, r5, r6, pc}
 8016f5e:	f7f7 feeb 	bl	800ed38 <rcutils_reset_error>
 8016f62:	f640 0098 	movw	r0, #2200	@ 0x898
 8016f66:	bd70      	pop	{r4, r5, r6, pc}
 8016f68:	f640 0098 	movw	r0, #2200	@ 0x898
 8016f6c:	bd70      	pop	{r4, r5, r6, pc}
 8016f6e:	200b      	movs	r0, #11
 8016f70:	bd70      	pop	{r4, r5, r6, pc}
 8016f72:	f640 0098 	movw	r0, #2200	@ 0x898
 8016f76:	4770      	bx	lr

08016f78 <rcl_action_wait_set_add_action_server>:
 8016f78:	2800      	cmp	r0, #0
 8016f7a:	d04d      	beq.n	8017018 <rcl_action_wait_set_add_action_server+0xa0>
 8016f7c:	b570      	push	{r4, r5, r6, lr}
 8016f7e:	460c      	mov	r4, r1
 8016f80:	b159      	cbz	r1, 8016f9a <rcl_action_wait_set_add_action_server+0x22>
 8016f82:	4605      	mov	r5, r0
 8016f84:	6808      	ldr	r0, [r1, #0]
 8016f86:	b140      	cbz	r0, 8016f9a <rcl_action_wait_set_add_action_server+0x22>
 8016f88:	4616      	mov	r6, r2
 8016f8a:	f7fe fd29 	bl	80159e0 <rcl_service_is_valid>
 8016f8e:	b120      	cbz	r0, 8016f9a <rcl_action_wait_set_add_action_server+0x22>
 8016f90:	6820      	ldr	r0, [r4, #0]
 8016f92:	3004      	adds	r0, #4
 8016f94:	f7fe fd24 	bl	80159e0 <rcl_service_is_valid>
 8016f98:	b910      	cbnz	r0, 8016fa0 <rcl_action_wait_set_add_action_server+0x28>
 8016f9a:	f640 0098 	movw	r0, #2200	@ 0x898
 8016f9e:	bd70      	pop	{r4, r5, r6, pc}
 8016fa0:	6820      	ldr	r0, [r4, #0]
 8016fa2:	3008      	adds	r0, #8
 8016fa4:	f7fe fd1c 	bl	80159e0 <rcl_service_is_valid>
 8016fa8:	2800      	cmp	r0, #0
 8016faa:	d0f6      	beq.n	8016f9a <rcl_action_wait_set_add_action_server+0x22>
 8016fac:	6820      	ldr	r0, [r4, #0]
 8016fae:	300c      	adds	r0, #12
 8016fb0:	f7f6 f9e0 	bl	800d374 <rcl_publisher_is_valid_except_context>
 8016fb4:	2800      	cmp	r0, #0
 8016fb6:	d0f0      	beq.n	8016f9a <rcl_action_wait_set_add_action_server+0x22>
 8016fb8:	6820      	ldr	r0, [r4, #0]
 8016fba:	3010      	adds	r0, #16
 8016fbc:	f7f6 f9da 	bl	800d374 <rcl_publisher_is_valid_except_context>
 8016fc0:	2800      	cmp	r0, #0
 8016fc2:	d0ea      	beq.n	8016f9a <rcl_action_wait_set_add_action_server+0x22>
 8016fc4:	6821      	ldr	r1, [r4, #0]
 8016fc6:	4628      	mov	r0, r5
 8016fc8:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8016fcc:	f7ff face 	bl	801656c <rcl_wait_set_add_service>
 8016fd0:	2800      	cmp	r0, #0
 8016fd2:	d1e4      	bne.n	8016f9e <rcl_action_wait_set_add_action_server+0x26>
 8016fd4:	6821      	ldr	r1, [r4, #0]
 8016fd6:	4628      	mov	r0, r5
 8016fd8:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8016fdc:	3104      	adds	r1, #4
 8016fde:	f7ff fac5 	bl	801656c <rcl_wait_set_add_service>
 8016fe2:	2800      	cmp	r0, #0
 8016fe4:	d1db      	bne.n	8016f9e <rcl_action_wait_set_add_action_server+0x26>
 8016fe6:	6821      	ldr	r1, [r4, #0]
 8016fe8:	4628      	mov	r0, r5
 8016fea:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8016fee:	3108      	adds	r1, #8
 8016ff0:	f7ff fabc 	bl	801656c <rcl_wait_set_add_service>
 8016ff4:	2800      	cmp	r0, #0
 8016ff6:	d1d2      	bne.n	8016f9e <rcl_action_wait_set_add_action_server+0x26>
 8016ff8:	6821      	ldr	r1, [r4, #0]
 8016ffa:	4628      	mov	r0, r5
 8016ffc:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8017000:	3114      	adds	r1, #20
 8017002:	f7ff fa57 	bl	80164b4 <rcl_wait_set_add_timer>
 8017006:	2800      	cmp	r0, #0
 8017008:	d1c9      	bne.n	8016f9e <rcl_action_wait_set_add_action_server+0x26>
 801700a:	2e00      	cmp	r6, #0
 801700c:	d0c7      	beq.n	8016f9e <rcl_action_wait_set_add_action_server+0x26>
 801700e:	6823      	ldr	r3, [r4, #0]
 8017010:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8017014:	6033      	str	r3, [r6, #0]
 8017016:	bd70      	pop	{r4, r5, r6, pc}
 8017018:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801701c:	4770      	bx	lr
 801701e:	bf00      	nop

08017020 <rcl_action_server_wait_set_get_entities_ready>:
 8017020:	2800      	cmp	r0, #0
 8017022:	d05a      	beq.n	80170da <rcl_action_server_wait_set_get_entities_ready+0xba>
 8017024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017026:	460c      	mov	r4, r1
 8017028:	b161      	cbz	r1, 8017044 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801702a:	4605      	mov	r5, r0
 801702c:	6808      	ldr	r0, [r1, #0]
 801702e:	b148      	cbz	r0, 8017044 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8017030:	4616      	mov	r6, r2
 8017032:	461f      	mov	r7, r3
 8017034:	f7fe fcd4 	bl	80159e0 <rcl_service_is_valid>
 8017038:	b120      	cbz	r0, 8017044 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801703a:	6820      	ldr	r0, [r4, #0]
 801703c:	3004      	adds	r0, #4
 801703e:	f7fe fccf 	bl	80159e0 <rcl_service_is_valid>
 8017042:	b910      	cbnz	r0, 801704a <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8017044:	f640 0098 	movw	r0, #2200	@ 0x898
 8017048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801704a:	6820      	ldr	r0, [r4, #0]
 801704c:	3008      	adds	r0, #8
 801704e:	f7fe fcc7 	bl	80159e0 <rcl_service_is_valid>
 8017052:	2800      	cmp	r0, #0
 8017054:	d0f6      	beq.n	8017044 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8017056:	6820      	ldr	r0, [r4, #0]
 8017058:	300c      	adds	r0, #12
 801705a:	f7f6 f98b 	bl	800d374 <rcl_publisher_is_valid_except_context>
 801705e:	2800      	cmp	r0, #0
 8017060:	d0f0      	beq.n	8017044 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8017062:	6820      	ldr	r0, [r4, #0]
 8017064:	3010      	adds	r0, #16
 8017066:	f7f6 f985 	bl	800d374 <rcl_publisher_is_valid_except_context>
 801706a:	2800      	cmp	r0, #0
 801706c:	d0ea      	beq.n	8017044 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801706e:	b3be      	cbz	r6, 80170e0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8017070:	b3b7      	cbz	r7, 80170e0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8017072:	9b06      	ldr	r3, [sp, #24]
 8017074:	b3a3      	cbz	r3, 80170e0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8017076:	9b07      	ldr	r3, [sp, #28]
 8017078:	b393      	cbz	r3, 80170e0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801707a:	6821      	ldr	r1, [r4, #0]
 801707c:	692a      	ldr	r2, [r5, #16]
 801707e:	6a2c      	ldr	r4, [r5, #32]
 8017080:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8017084:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8017088:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 801708c:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8017090:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8017094:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8017098:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801709c:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 80170a0:	1a64      	subs	r4, r4, r1
 80170a2:	fab4 f484 	clz	r4, r4
 80170a6:	0964      	lsrs	r4, r4, #5
 80170a8:	7034      	strb	r4, [r6, #0]
 80170aa:	1d0c      	adds	r4, r1, #4
 80170ac:	1b1b      	subs	r3, r3, r4
 80170ae:	fab3 f383 	clz	r3, r3
 80170b2:	095b      	lsrs	r3, r3, #5
 80170b4:	f101 0408 	add.w	r4, r1, #8
 80170b8:	703b      	strb	r3, [r7, #0]
 80170ba:	f101 0314 	add.w	r3, r1, #20
 80170be:	1b01      	subs	r1, r0, r4
 80170c0:	1ad3      	subs	r3, r2, r3
 80170c2:	fab1 f181 	clz	r1, r1
 80170c6:	9a06      	ldr	r2, [sp, #24]
 80170c8:	0949      	lsrs	r1, r1, #5
 80170ca:	7011      	strb	r1, [r2, #0]
 80170cc:	fab3 f383 	clz	r3, r3
 80170d0:	9a07      	ldr	r2, [sp, #28]
 80170d2:	095b      	lsrs	r3, r3, #5
 80170d4:	2000      	movs	r0, #0
 80170d6:	7013      	strb	r3, [r2, #0]
 80170d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80170da:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80170de:	4770      	bx	lr
 80170e0:	200b      	movs	r0, #11
 80170e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080170e4 <_execute_event_handler>:
 80170e4:	2002      	movs	r0, #2
 80170e6:	4770      	bx	lr

080170e8 <_cancel_goal_event_handler>:
 80170e8:	2003      	movs	r0, #3
 80170ea:	4770      	bx	lr

080170ec <_succeed_event_handler>:
 80170ec:	2004      	movs	r0, #4
 80170ee:	4770      	bx	lr

080170f0 <_abort_event_handler>:
 80170f0:	2006      	movs	r0, #6
 80170f2:	4770      	bx	lr

080170f4 <_canceled_event_handler>:
 80170f4:	2005      	movs	r0, #5
 80170f6:	4770      	bx	lr

080170f8 <rcl_action_transition_goal_state>:
 80170f8:	b2c2      	uxtb	r2, r0
 80170fa:	2a06      	cmp	r2, #6
 80170fc:	d80c      	bhi.n	8017118 <rcl_action_transition_goal_state+0x20>
 80170fe:	2904      	cmp	r1, #4
 8017100:	d80a      	bhi.n	8017118 <rcl_action_transition_goal_state+0x20>
 8017102:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8017106:	b410      	push	{r4}
 8017108:	1853      	adds	r3, r2, r1
 801710a:	4c06      	ldr	r4, [pc, #24]	@ (8017124 <rcl_action_transition_goal_state+0x2c>)
 801710c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8017110:	b123      	cbz	r3, 801711c <rcl_action_transition_goal_state+0x24>
 8017112:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017116:	4718      	bx	r3
 8017118:	2000      	movs	r0, #0
 801711a:	4770      	bx	lr
 801711c:	2000      	movs	r0, #0
 801711e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017122:	4770      	bx	lr
 8017124:	0801c010 	.word	0x0801c010

08017128 <rcl_action_get_zero_initialized_cancel_response>:
 8017128:	b510      	push	{r4, lr}
 801712a:	4c07      	ldr	r4, [pc, #28]	@ (8017148 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801712c:	4686      	mov	lr, r0
 801712e:	4684      	mov	ip, r0
 8017130:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017132:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017136:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017138:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801713c:	6823      	ldr	r3, [r4, #0]
 801713e:	f8cc 3000 	str.w	r3, [ip]
 8017142:	4670      	mov	r0, lr
 8017144:	bd10      	pop	{r4, pc}
 8017146:	bf00      	nop
 8017148:	0801c09c 	.word	0x0801c09c

0801714c <rclc_action_send_result_request>:
 801714c:	b1d0      	cbz	r0, 8017184 <rclc_action_send_result_request+0x38>
 801714e:	b500      	push	{lr}
 8017150:	4684      	mov	ip, r0
 8017152:	b087      	sub	sp, #28
 8017154:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8017158:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801715c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8017160:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8017164:	f10d 0e08 	add.w	lr, sp, #8
 8017168:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801716c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8017170:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8017174:	a902      	add	r1, sp, #8
 8017176:	3010      	adds	r0, #16
 8017178:	f7ff fbda 	bl	8016930 <rcl_action_send_result_request>
 801717c:	b920      	cbnz	r0, 8017188 <rclc_action_send_result_request+0x3c>
 801717e:	b007      	add	sp, #28
 8017180:	f85d fb04 	ldr.w	pc, [sp], #4
 8017184:	200b      	movs	r0, #11
 8017186:	4770      	bx	lr
 8017188:	9001      	str	r0, [sp, #4]
 801718a:	f7f7 fdd5 	bl	800ed38 <rcutils_reset_error>
 801718e:	9801      	ldr	r0, [sp, #4]
 8017190:	b007      	add	sp, #28
 8017192:	f85d fb04 	ldr.w	pc, [sp], #4
 8017196:	bf00      	nop

08017198 <rclc_action_take_goal_handle>:
 8017198:	b160      	cbz	r0, 80171b4 <rclc_action_take_goal_handle+0x1c>
 801719a:	6883      	ldr	r3, [r0, #8]
 801719c:	b143      	cbz	r3, 80171b0 <rclc_action_take_goal_handle+0x18>
 801719e:	6819      	ldr	r1, [r3, #0]
 80171a0:	6081      	str	r1, [r0, #8]
 80171a2:	2200      	movs	r2, #0
 80171a4:	721a      	strb	r2, [r3, #8]
 80171a6:	68c1      	ldr	r1, [r0, #12]
 80171a8:	6019      	str	r1, [r3, #0]
 80171aa:	621a      	str	r2, [r3, #32]
 80171ac:	849a      	strh	r2, [r3, #36]	@ 0x24
 80171ae:	60c3      	str	r3, [r0, #12]
 80171b0:	4618      	mov	r0, r3
 80171b2:	4770      	bx	lr
 80171b4:	4603      	mov	r3, r0
 80171b6:	e7fb      	b.n	80171b0 <rclc_action_take_goal_handle+0x18>

080171b8 <rclc_action_remove_used_goal_handle>:
 80171b8:	b180      	cbz	r0, 80171dc <rclc_action_remove_used_goal_handle+0x24>
 80171ba:	b179      	cbz	r1, 80171dc <rclc_action_remove_used_goal_handle+0x24>
 80171bc:	68c3      	ldr	r3, [r0, #12]
 80171be:	4299      	cmp	r1, r3
 80171c0:	d00d      	beq.n	80171de <rclc_action_remove_used_goal_handle+0x26>
 80171c2:	b12b      	cbz	r3, 80171d0 <rclc_action_remove_used_goal_handle+0x18>
 80171c4:	681a      	ldr	r2, [r3, #0]
 80171c6:	4291      	cmp	r1, r2
 80171c8:	d003      	beq.n	80171d2 <rclc_action_remove_used_goal_handle+0x1a>
 80171ca:	4613      	mov	r3, r2
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d1f9      	bne.n	80171c4 <rclc_action_remove_used_goal_handle+0xc>
 80171d0:	4770      	bx	lr
 80171d2:	680a      	ldr	r2, [r1, #0]
 80171d4:	601a      	str	r2, [r3, #0]
 80171d6:	6883      	ldr	r3, [r0, #8]
 80171d8:	600b      	str	r3, [r1, #0]
 80171da:	6081      	str	r1, [r0, #8]
 80171dc:	4770      	bx	lr
 80171de:	680b      	ldr	r3, [r1, #0]
 80171e0:	60c3      	str	r3, [r0, #12]
 80171e2:	e7f8      	b.n	80171d6 <rclc_action_remove_used_goal_handle+0x1e>

080171e4 <rclc_action_find_goal_handle_by_uuid>:
 80171e4:	b538      	push	{r3, r4, r5, lr}
 80171e6:	b180      	cbz	r0, 801720a <rclc_action_find_goal_handle_by_uuid+0x26>
 80171e8:	460d      	mov	r5, r1
 80171ea:	b181      	cbz	r1, 801720e <rclc_action_find_goal_handle_by_uuid+0x2a>
 80171ec:	68c4      	ldr	r4, [r0, #12]
 80171ee:	b914      	cbnz	r4, 80171f6 <rclc_action_find_goal_handle_by_uuid+0x12>
 80171f0:	e009      	b.n	8017206 <rclc_action_find_goal_handle_by_uuid+0x22>
 80171f2:	6824      	ldr	r4, [r4, #0]
 80171f4:	b13c      	cbz	r4, 8017206 <rclc_action_find_goal_handle_by_uuid+0x22>
 80171f6:	f104 0009 	add.w	r0, r4, #9
 80171fa:	2210      	movs	r2, #16
 80171fc:	4629      	mov	r1, r5
 80171fe:	f002 ffef 	bl	801a1e0 <memcmp>
 8017202:	2800      	cmp	r0, #0
 8017204:	d1f5      	bne.n	80171f2 <rclc_action_find_goal_handle_by_uuid+0xe>
 8017206:	4620      	mov	r0, r4
 8017208:	bd38      	pop	{r3, r4, r5, pc}
 801720a:	4604      	mov	r4, r0
 801720c:	e7fb      	b.n	8017206 <rclc_action_find_goal_handle_by_uuid+0x22>
 801720e:	460c      	mov	r4, r1
 8017210:	e7f9      	b.n	8017206 <rclc_action_find_goal_handle_by_uuid+0x22>
 8017212:	bf00      	nop

08017214 <rclc_action_find_first_handle_by_status>:
 8017214:	b140      	cbz	r0, 8017228 <rclc_action_find_first_handle_by_status+0x14>
 8017216:	68c0      	ldr	r0, [r0, #12]
 8017218:	b910      	cbnz	r0, 8017220 <rclc_action_find_first_handle_by_status+0xc>
 801721a:	e005      	b.n	8017228 <rclc_action_find_first_handle_by_status+0x14>
 801721c:	6800      	ldr	r0, [r0, #0]
 801721e:	b118      	cbz	r0, 8017228 <rclc_action_find_first_handle_by_status+0x14>
 8017220:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8017224:	428b      	cmp	r3, r1
 8017226:	d1f9      	bne.n	801721c <rclc_action_find_first_handle_by_status+0x8>
 8017228:	4770      	bx	lr
 801722a:	bf00      	nop

0801722c <rclc_action_find_first_terminated_handle>:
 801722c:	b140      	cbz	r0, 8017240 <rclc_action_find_first_terminated_handle+0x14>
 801722e:	68c0      	ldr	r0, [r0, #12]
 8017230:	b910      	cbnz	r0, 8017238 <rclc_action_find_first_terminated_handle+0xc>
 8017232:	e005      	b.n	8017240 <rclc_action_find_first_terminated_handle+0x14>
 8017234:	6800      	ldr	r0, [r0, #0]
 8017236:	b118      	cbz	r0, 8017240 <rclc_action_find_first_terminated_handle+0x14>
 8017238:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801723c:	2b03      	cmp	r3, #3
 801723e:	ddf9      	ble.n	8017234 <rclc_action_find_first_terminated_handle+0x8>
 8017240:	4770      	bx	lr
 8017242:	bf00      	nop

08017244 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8017244:	b170      	cbz	r0, 8017264 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8017246:	68c0      	ldr	r0, [r0, #12]
 8017248:	b160      	cbz	r0, 8017264 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801724a:	b410      	push	{r4}
 801724c:	e001      	b.n	8017252 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801724e:	6800      	ldr	r0, [r0, #0]
 8017250:	b128      	cbz	r0, 801725e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8017252:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8017256:	4299      	cmp	r1, r3
 8017258:	bf08      	it	eq
 801725a:	4294      	cmpeq	r4, r2
 801725c:	d1f7      	bne.n	801724e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801725e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017262:	4770      	bx	lr
 8017264:	4770      	bx	lr
 8017266:	bf00      	nop

08017268 <rclc_action_find_handle_by_result_request_sequence_number>:
 8017268:	b170      	cbz	r0, 8017288 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801726a:	68c0      	ldr	r0, [r0, #12]
 801726c:	b160      	cbz	r0, 8017288 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801726e:	b410      	push	{r4}
 8017270:	e001      	b.n	8017276 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8017272:	6800      	ldr	r0, [r0, #0]
 8017274:	b128      	cbz	r0, 8017282 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8017276:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 801727a:	4299      	cmp	r1, r3
 801727c:	bf08      	it	eq
 801727e:	4294      	cmpeq	r4, r2
 8017280:	d1f7      	bne.n	8017272 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8017282:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017286:	4770      	bx	lr
 8017288:	4770      	bx	lr
 801728a:	bf00      	nop

0801728c <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801728c:	b170      	cbz	r0, 80172ac <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801728e:	68c0      	ldr	r0, [r0, #12]
 8017290:	b160      	cbz	r0, 80172ac <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8017292:	b410      	push	{r4}
 8017294:	e001      	b.n	801729a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8017296:	6800      	ldr	r0, [r0, #0]
 8017298:	b128      	cbz	r0, 80172a6 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801729a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 801729e:	4299      	cmp	r1, r3
 80172a0:	bf08      	it	eq
 80172a2:	4294      	cmpeq	r4, r2
 80172a4:	d1f7      	bne.n	8017296 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 80172a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80172aa:	4770      	bx	lr
 80172ac:	4770      	bx	lr
 80172ae:	bf00      	nop

080172b0 <rclc_action_find_first_handle_with_goal_response>:
 80172b0:	b140      	cbz	r0, 80172c4 <rclc_action_find_first_handle_with_goal_response+0x14>
 80172b2:	68c0      	ldr	r0, [r0, #12]
 80172b4:	b910      	cbnz	r0, 80172bc <rclc_action_find_first_handle_with_goal_response+0xc>
 80172b6:	e005      	b.n	80172c4 <rclc_action_find_first_handle_with_goal_response+0x14>
 80172b8:	6800      	ldr	r0, [r0, #0]
 80172ba:	b118      	cbz	r0, 80172c4 <rclc_action_find_first_handle_with_goal_response+0x14>
 80172bc:	f890 3020 	ldrb.w	r3, [r0, #32]
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	d0f9      	beq.n	80172b8 <rclc_action_find_first_handle_with_goal_response+0x8>
 80172c4:	4770      	bx	lr
 80172c6:	bf00      	nop

080172c8 <rclc_action_find_first_handle_with_result_response>:
 80172c8:	b140      	cbz	r0, 80172dc <rclc_action_find_first_handle_with_result_response+0x14>
 80172ca:	68c0      	ldr	r0, [r0, #12]
 80172cc:	b910      	cbnz	r0, 80172d4 <rclc_action_find_first_handle_with_result_response+0xc>
 80172ce:	e005      	b.n	80172dc <rclc_action_find_first_handle_with_result_response+0x14>
 80172d0:	6800      	ldr	r0, [r0, #0]
 80172d2:	b118      	cbz	r0, 80172dc <rclc_action_find_first_handle_with_result_response+0x14>
 80172d4:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 80172d8:	2b00      	cmp	r3, #0
 80172da:	d0f9      	beq.n	80172d0 <rclc_action_find_first_handle_with_result_response+0x8>
 80172dc:	4770      	bx	lr
 80172de:	bf00      	nop

080172e0 <rclc_action_server_response_goal_request>:
 80172e0:	b198      	cbz	r0, 801730a <rclc_action_server_response_goal_request+0x2a>
 80172e2:	b510      	push	{r4, lr}
 80172e4:	6844      	ldr	r4, [r0, #4]
 80172e6:	b086      	sub	sp, #24
 80172e8:	2200      	movs	r2, #0
 80172ea:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80172ee:	460b      	mov	r3, r1
 80172f0:	9205      	str	r2, [sp, #20]
 80172f2:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 80172f6:	aa03      	add	r2, sp, #12
 80172f8:	f104 0010 	add.w	r0, r4, #16
 80172fc:	f88d 300c 	strb.w	r3, [sp, #12]
 8017300:	f7ff fd4a 	bl	8016d98 <rcl_action_send_goal_response>
 8017304:	b918      	cbnz	r0, 801730e <rclc_action_server_response_goal_request+0x2e>
 8017306:	b006      	add	sp, #24
 8017308:	bd10      	pop	{r4, pc}
 801730a:	200b      	movs	r0, #11
 801730c:	4770      	bx	lr
 801730e:	9001      	str	r0, [sp, #4]
 8017310:	f7f7 fd12 	bl	800ed38 <rcutils_reset_error>
 8017314:	9801      	ldr	r0, [sp, #4]
 8017316:	b006      	add	sp, #24
 8017318:	bd10      	pop	{r4, pc}
 801731a:	bf00      	nop
 801731c:	0000      	movs	r0, r0
	...

08017320 <rclc_action_server_goal_cancel_accept>:
 8017320:	b310      	cbz	r0, 8017368 <rclc_action_server_goal_cancel_accept+0x48>
 8017322:	b510      	push	{r4, lr}
 8017324:	b090      	sub	sp, #64	@ 0x40
 8017326:	4604      	mov	r4, r0
 8017328:	a806      	add	r0, sp, #24
 801732a:	f7ff fefd 	bl	8017128 <rcl_action_get_zero_initialized_cancel_response>
 801732e:	2300      	movs	r3, #0
 8017330:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8017334:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8017338:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801733c:	f88d 3018 	strb.w	r3, [sp, #24]
 8017340:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8017344:	f8cd d01c 	str.w	sp, [sp, #28]
 8017348:	46ec      	mov	ip, sp
 801734a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801734e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8017370 <rclc_action_server_goal_cancel_accept+0x50>
 8017352:	6860      	ldr	r0, [r4, #4]
 8017354:	aa06      	add	r2, sp, #24
 8017356:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 801735a:	3010      	adds	r0, #16
 801735c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8017360:	f7ff fdd2 	bl	8016f08 <rcl_action_send_cancel_response>
 8017364:	b010      	add	sp, #64	@ 0x40
 8017366:	bd10      	pop	{r4, pc}
 8017368:	200b      	movs	r0, #11
 801736a:	4770      	bx	lr
 801736c:	f3af 8000 	nop.w
 8017370:	00000001 	.word	0x00000001
 8017374:	00000001 	.word	0x00000001

08017378 <rclc_action_server_goal_cancel_reject>:
 8017378:	b082      	sub	sp, #8
 801737a:	b530      	push	{r4, r5, lr}
 801737c:	b08b      	sub	sp, #44	@ 0x2c
 801737e:	ac0e      	add	r4, sp, #56	@ 0x38
 8017380:	e884 000c 	stmia.w	r4, {r2, r3}
 8017384:	b188      	cbz	r0, 80173aa <rclc_action_server_goal_cancel_reject+0x32>
 8017386:	4604      	mov	r4, r0
 8017388:	a801      	add	r0, sp, #4
 801738a:	460d      	mov	r5, r1
 801738c:	f7ff fecc 	bl	8017128 <rcl_action_get_zero_initialized_cancel_response>
 8017390:	aa01      	add	r2, sp, #4
 8017392:	a90e      	add	r1, sp, #56	@ 0x38
 8017394:	f104 0010 	add.w	r0, r4, #16
 8017398:	f88d 5004 	strb.w	r5, [sp, #4]
 801739c:	f7ff fdb4 	bl	8016f08 <rcl_action_send_cancel_response>
 80173a0:	b00b      	add	sp, #44	@ 0x2c
 80173a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80173a6:	b002      	add	sp, #8
 80173a8:	4770      	bx	lr
 80173aa:	200b      	movs	r0, #11
 80173ac:	b00b      	add	sp, #44	@ 0x2c
 80173ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80173b2:	b002      	add	sp, #8
 80173b4:	4770      	bx	lr
 80173b6:	bf00      	nop

080173b8 <rcutils_string_array_fini>:
 80173b8:	b320      	cbz	r0, 8017404 <rcutils_string_array_fini+0x4c>
 80173ba:	b570      	push	{r4, r5, r6, lr}
 80173bc:	4604      	mov	r4, r0
 80173be:	6840      	ldr	r0, [r0, #4]
 80173c0:	b1d8      	cbz	r0, 80173fa <rcutils_string_array_fini+0x42>
 80173c2:	f104 0008 	add.w	r0, r4, #8
 80173c6:	f7f7 fbd7 	bl	800eb78 <rcutils_allocator_is_valid>
 80173ca:	b1b8      	cbz	r0, 80173fc <rcutils_string_array_fini+0x44>
 80173cc:	6823      	ldr	r3, [r4, #0]
 80173ce:	b1bb      	cbz	r3, 8017400 <rcutils_string_array_fini+0x48>
 80173d0:	2500      	movs	r5, #0
 80173d2:	6860      	ldr	r0, [r4, #4]
 80173d4:	462e      	mov	r6, r5
 80173d6:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80173da:	68e3      	ldr	r3, [r4, #12]
 80173dc:	69a1      	ldr	r1, [r4, #24]
 80173de:	4798      	blx	r3
 80173e0:	e9d4 3000 	ldrd	r3, r0, [r4]
 80173e4:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 80173e8:	3501      	adds	r5, #1
 80173ea:	429d      	cmp	r5, r3
 80173ec:	d3f3      	bcc.n	80173d6 <rcutils_string_array_fini+0x1e>
 80173ee:	68e3      	ldr	r3, [r4, #12]
 80173f0:	69a1      	ldr	r1, [r4, #24]
 80173f2:	4798      	blx	r3
 80173f4:	2000      	movs	r0, #0
 80173f6:	e9c4 0000 	strd	r0, r0, [r4]
 80173fa:	bd70      	pop	{r4, r5, r6, pc}
 80173fc:	200b      	movs	r0, #11
 80173fe:	bd70      	pop	{r4, r5, r6, pc}
 8017400:	6860      	ldr	r0, [r4, #4]
 8017402:	e7f4      	b.n	80173ee <rcutils_string_array_fini+0x36>
 8017404:	200b      	movs	r0, #11
 8017406:	4770      	bx	lr

08017408 <rcutils_get_zero_initialized_string_map>:
 8017408:	4b01      	ldr	r3, [pc, #4]	@ (8017410 <rcutils_get_zero_initialized_string_map+0x8>)
 801740a:	2000      	movs	r0, #0
 801740c:	6018      	str	r0, [r3, #0]
 801740e:	4770      	bx	lr
 8017410:	200118e8 	.word	0x200118e8

08017414 <rcutils_string_map_reserve>:
 8017414:	2800      	cmp	r0, #0
 8017416:	d05f      	beq.n	80174d8 <rcutils_string_map_reserve+0xc4>
 8017418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801741c:	460c      	mov	r4, r1
 801741e:	6801      	ldr	r1, [r0, #0]
 8017420:	b082      	sub	sp, #8
 8017422:	4605      	mov	r5, r0
 8017424:	b129      	cbz	r1, 8017432 <rcutils_string_map_reserve+0x1e>
 8017426:	68cb      	ldr	r3, [r1, #12]
 8017428:	42a3      	cmp	r3, r4
 801742a:	d906      	bls.n	801743a <rcutils_string_map_reserve+0x26>
 801742c:	461c      	mov	r4, r3
 801742e:	2900      	cmp	r1, #0
 8017430:	d1f9      	bne.n	8017426 <rcutils_string_map_reserve+0x12>
 8017432:	201f      	movs	r0, #31
 8017434:	b002      	add	sp, #8
 8017436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801743a:	688b      	ldr	r3, [r1, #8]
 801743c:	42a3      	cmp	r3, r4
 801743e:	d047      	beq.n	80174d0 <rcutils_string_map_reserve+0xbc>
 8017440:	6a0e      	ldr	r6, [r1, #32]
 8017442:	2c00      	cmp	r4, #0
 8017444:	d034      	beq.n	80174b0 <rcutils_string_map_reserve+0x9c>
 8017446:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801744a:	d243      	bcs.n	80174d4 <rcutils_string_map_reserve+0xc0>
 801744c:	00a7      	lsls	r7, r4, #2
 801744e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8017452:	6808      	ldr	r0, [r1, #0]
 8017454:	4632      	mov	r2, r6
 8017456:	4639      	mov	r1, r7
 8017458:	47c0      	blx	r8
 801745a:	2800      	cmp	r0, #0
 801745c:	d03a      	beq.n	80174d4 <rcutils_string_map_reserve+0xc0>
 801745e:	682b      	ldr	r3, [r5, #0]
 8017460:	4632      	mov	r2, r6
 8017462:	6018      	str	r0, [r3, #0]
 8017464:	4639      	mov	r1, r7
 8017466:	6858      	ldr	r0, [r3, #4]
 8017468:	47c0      	blx	r8
 801746a:	2800      	cmp	r0, #0
 801746c:	d032      	beq.n	80174d4 <rcutils_string_map_reserve+0xc0>
 801746e:	682d      	ldr	r5, [r5, #0]
 8017470:	68ab      	ldr	r3, [r5, #8]
 8017472:	6068      	str	r0, [r5, #4]
 8017474:	42a3      	cmp	r3, r4
 8017476:	d226      	bcs.n	80174c6 <rcutils_string_map_reserve+0xb2>
 8017478:	682a      	ldr	r2, [r5, #0]
 801747a:	eb00 0c07 	add.w	ip, r0, r7
 801747e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8017482:	45e6      	cmp	lr, ip
 8017484:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8017488:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 801748c:	d203      	bcs.n	8017496 <rcutils_string_map_reserve+0x82>
 801748e:	eb02 0c07 	add.w	ip, r2, r7
 8017492:	4566      	cmp	r6, ip
 8017494:	d322      	bcc.n	80174dc <rcutils_string_map_reserve+0xc8>
 8017496:	1ae3      	subs	r3, r4, r3
 8017498:	009a      	lsls	r2, r3, #2
 801749a:	4670      	mov	r0, lr
 801749c:	2100      	movs	r1, #0
 801749e:	9201      	str	r2, [sp, #4]
 80174a0:	f002 fec8 	bl	801a234 <memset>
 80174a4:	9a01      	ldr	r2, [sp, #4]
 80174a6:	2100      	movs	r1, #0
 80174a8:	4630      	mov	r0, r6
 80174aa:	f002 fec3 	bl	801a234 <memset>
 80174ae:	e00a      	b.n	80174c6 <rcutils_string_map_reserve+0xb2>
 80174b0:	694f      	ldr	r7, [r1, #20]
 80174b2:	6808      	ldr	r0, [r1, #0]
 80174b4:	4631      	mov	r1, r6
 80174b6:	47b8      	blx	r7
 80174b8:	682b      	ldr	r3, [r5, #0]
 80174ba:	4631      	mov	r1, r6
 80174bc:	6858      	ldr	r0, [r3, #4]
 80174be:	601c      	str	r4, [r3, #0]
 80174c0:	47b8      	blx	r7
 80174c2:	682d      	ldr	r5, [r5, #0]
 80174c4:	606c      	str	r4, [r5, #4]
 80174c6:	2000      	movs	r0, #0
 80174c8:	60ac      	str	r4, [r5, #8]
 80174ca:	b002      	add	sp, #8
 80174cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174d0:	2000      	movs	r0, #0
 80174d2:	e7af      	b.n	8017434 <rcutils_string_map_reserve+0x20>
 80174d4:	200a      	movs	r0, #10
 80174d6:	e7ad      	b.n	8017434 <rcutils_string_map_reserve+0x20>
 80174d8:	200b      	movs	r0, #11
 80174da:	4770      	bx	lr
 80174dc:	1f0b      	subs	r3, r1, #4
 80174de:	4418      	add	r0, r3
 80174e0:	4413      	add	r3, r2
 80174e2:	3a04      	subs	r2, #4
 80174e4:	4417      	add	r7, r2
 80174e6:	2200      	movs	r2, #0
 80174e8:	f843 2f04 	str.w	r2, [r3, #4]!
 80174ec:	42bb      	cmp	r3, r7
 80174ee:	f840 2f04 	str.w	r2, [r0, #4]!
 80174f2:	d1f9      	bne.n	80174e8 <rcutils_string_map_reserve+0xd4>
 80174f4:	e7e7      	b.n	80174c6 <rcutils_string_map_reserve+0xb2>
 80174f6:	bf00      	nop

080174f8 <rcutils_string_map_init>:
 80174f8:	b082      	sub	sp, #8
 80174fa:	b570      	push	{r4, r5, r6, lr}
 80174fc:	ac04      	add	r4, sp, #16
 80174fe:	e884 000c 	stmia.w	r4, {r2, r3}
 8017502:	b380      	cbz	r0, 8017566 <rcutils_string_map_init+0x6e>
 8017504:	6806      	ldr	r6, [r0, #0]
 8017506:	4604      	mov	r4, r0
 8017508:	b12e      	cbz	r6, 8017516 <rcutils_string_map_init+0x1e>
 801750a:	251e      	movs	r5, #30
 801750c:	4628      	mov	r0, r5
 801750e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017512:	b002      	add	sp, #8
 8017514:	4770      	bx	lr
 8017516:	a804      	add	r0, sp, #16
 8017518:	460d      	mov	r5, r1
 801751a:	f7f7 fb2d 	bl	800eb78 <rcutils_allocator_is_valid>
 801751e:	b310      	cbz	r0, 8017566 <rcutils_string_map_init+0x6e>
 8017520:	9b04      	ldr	r3, [sp, #16]
 8017522:	9908      	ldr	r1, [sp, #32]
 8017524:	2024      	movs	r0, #36	@ 0x24
 8017526:	4798      	blx	r3
 8017528:	6020      	str	r0, [r4, #0]
 801752a:	b310      	cbz	r0, 8017572 <rcutils_string_map_init+0x7a>
 801752c:	f10d 0e10 	add.w	lr, sp, #16
 8017530:	e9c0 6600 	strd	r6, r6, [r0]
 8017534:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8017538:	f100 0c10 	add.w	ip, r0, #16
 801753c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017540:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017544:	f8de 3000 	ldr.w	r3, [lr]
 8017548:	f8cc 3000 	str.w	r3, [ip]
 801754c:	4629      	mov	r1, r5
 801754e:	4620      	mov	r0, r4
 8017550:	f7ff ff60 	bl	8017414 <rcutils_string_map_reserve>
 8017554:	4605      	mov	r5, r0
 8017556:	2800      	cmp	r0, #0
 8017558:	d0d8      	beq.n	801750c <rcutils_string_map_init+0x14>
 801755a:	9b05      	ldr	r3, [sp, #20]
 801755c:	9908      	ldr	r1, [sp, #32]
 801755e:	6820      	ldr	r0, [r4, #0]
 8017560:	4798      	blx	r3
 8017562:	6026      	str	r6, [r4, #0]
 8017564:	e7d2      	b.n	801750c <rcutils_string_map_init+0x14>
 8017566:	250b      	movs	r5, #11
 8017568:	4628      	mov	r0, r5
 801756a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801756e:	b002      	add	sp, #8
 8017570:	4770      	bx	lr
 8017572:	250a      	movs	r5, #10
 8017574:	e7ca      	b.n	801750c <rcutils_string_map_init+0x14>
 8017576:	bf00      	nop

08017578 <rcutils_string_map_fini>:
 8017578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801757c:	b082      	sub	sp, #8
 801757e:	2800      	cmp	r0, #0
 8017580:	d03a      	beq.n	80175f8 <rcutils_string_map_fini+0x80>
 8017582:	6804      	ldr	r4, [r0, #0]
 8017584:	4606      	mov	r6, r0
 8017586:	2c00      	cmp	r4, #0
 8017588:	d032      	beq.n	80175f0 <rcutils_string_map_fini+0x78>
 801758a:	68a3      	ldr	r3, [r4, #8]
 801758c:	b32b      	cbz	r3, 80175da <rcutils_string_map_fini+0x62>
 801758e:	2500      	movs	r5, #0
 8017590:	6822      	ldr	r2, [r4, #0]
 8017592:	462f      	mov	r7, r5
 8017594:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8017598:	b1e0      	cbz	r0, 80175d4 <rcutils_string_map_fini+0x5c>
 801759a:	6a21      	ldr	r1, [r4, #32]
 801759c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 80175a0:	9101      	str	r1, [sp, #4]
 80175a2:	47c0      	blx	r8
 80175a4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80175a8:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80175ac:	9901      	ldr	r1, [sp, #4]
 80175ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80175b2:	47c0      	blx	r8
 80175b4:	68e3      	ldr	r3, [r4, #12]
 80175b6:	6862      	ldr	r2, [r4, #4]
 80175b8:	3b01      	subs	r3, #1
 80175ba:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80175be:	60e3      	str	r3, [r4, #12]
 80175c0:	6834      	ldr	r4, [r6, #0]
 80175c2:	68a3      	ldr	r3, [r4, #8]
 80175c4:	3501      	adds	r5, #1
 80175c6:	429d      	cmp	r5, r3
 80175c8:	d207      	bcs.n	80175da <rcutils_string_map_fini+0x62>
 80175ca:	6822      	ldr	r2, [r4, #0]
 80175cc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80175d0:	2800      	cmp	r0, #0
 80175d2:	d1e2      	bne.n	801759a <rcutils_string_map_fini+0x22>
 80175d4:	3501      	adds	r5, #1
 80175d6:	429d      	cmp	r5, r3
 80175d8:	d3dc      	bcc.n	8017594 <rcutils_string_map_fini+0x1c>
 80175da:	2100      	movs	r1, #0
 80175dc:	4630      	mov	r0, r6
 80175de:	f7ff ff19 	bl	8017414 <rcutils_string_map_reserve>
 80175e2:	4604      	mov	r4, r0
 80175e4:	b920      	cbnz	r0, 80175f0 <rcutils_string_map_fini+0x78>
 80175e6:	6830      	ldr	r0, [r6, #0]
 80175e8:	6943      	ldr	r3, [r0, #20]
 80175ea:	6a01      	ldr	r1, [r0, #32]
 80175ec:	4798      	blx	r3
 80175ee:	6034      	str	r4, [r6, #0]
 80175f0:	4620      	mov	r0, r4
 80175f2:	b002      	add	sp, #8
 80175f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175f8:	240b      	movs	r4, #11
 80175fa:	4620      	mov	r0, r4
 80175fc:	b002      	add	sp, #8
 80175fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017602:	bf00      	nop

08017604 <rcutils_string_map_getn>:
 8017604:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017608:	b300      	cbz	r0, 801764c <rcutils_string_map_getn+0x48>
 801760a:	6807      	ldr	r7, [r0, #0]
 801760c:	b1ff      	cbz	r7, 801764e <rcutils_string_map_getn+0x4a>
 801760e:	4688      	mov	r8, r1
 8017610:	b1e1      	cbz	r1, 801764c <rcutils_string_map_getn+0x48>
 8017612:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8017616:	683e      	ldr	r6, [r7, #0]
 8017618:	f1ba 0f00 	cmp.w	sl, #0
 801761c:	d016      	beq.n	801764c <rcutils_string_map_getn+0x48>
 801761e:	4691      	mov	r9, r2
 8017620:	3e04      	subs	r6, #4
 8017622:	2400      	movs	r4, #0
 8017624:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8017628:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801762c:	4628      	mov	r0, r5
 801762e:	3401      	adds	r4, #1
 8017630:	b155      	cbz	r5, 8017648 <rcutils_string_map_getn+0x44>
 8017632:	f7e8 fdf7 	bl	8000224 <strlen>
 8017636:	4548      	cmp	r0, r9
 8017638:	4602      	mov	r2, r0
 801763a:	4629      	mov	r1, r5
 801763c:	bf38      	it	cc
 801763e:	464a      	movcc	r2, r9
 8017640:	4640      	mov	r0, r8
 8017642:	f002 fe0c 	bl	801a25e <strncmp>
 8017646:	b128      	cbz	r0, 8017654 <rcutils_string_map_getn+0x50>
 8017648:	45a2      	cmp	sl, r4
 801764a:	d1eb      	bne.n	8017624 <rcutils_string_map_getn+0x20>
 801764c:	2700      	movs	r7, #0
 801764e:	4638      	mov	r0, r7
 8017650:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	f853 700b 	ldr.w	r7, [r3, fp]
 801765a:	4638      	mov	r0, r7
 801765c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017660 <rmw_get_zero_initialized_context>:
 8017660:	b510      	push	{r4, lr}
 8017662:	4604      	mov	r4, r0
 8017664:	3010      	adds	r0, #16
 8017666:	f7f7 fd2b 	bl	800f0c0 <rmw_get_zero_initialized_init_options>
 801766a:	2300      	movs	r3, #0
 801766c:	2000      	movs	r0, #0
 801766e:	2100      	movs	r1, #0
 8017670:	e9c4 0100 	strd	r0, r1, [r4]
 8017674:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8017678:	60a3      	str	r3, [r4, #8]
 801767a:	4620      	mov	r0, r4
 801767c:	bd10      	pop	{r4, pc}
 801767e:	bf00      	nop

08017680 <rmw_time_equal>:
 8017680:	b4f0      	push	{r4, r5, r6, r7}
 8017682:	b084      	sub	sp, #16
 8017684:	ac04      	add	r4, sp, #16
 8017686:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801768a:	4603      	mov	r3, r0
 801768c:	4924      	ldr	r1, [pc, #144]	@ (8017720 <rmw_time_equal+0xa0>)
 801768e:	9e03      	ldr	r6, [sp, #12]
 8017690:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8017694:	2202      	movs	r2, #2
 8017696:	4299      	cmp	r1, r3
 8017698:	41aa      	sbcs	r2, r5
 801769a:	d330      	bcc.n	80176fe <rmw_time_equal+0x7e>
 801769c:	4c21      	ldr	r4, [pc, #132]	@ (8017724 <rmw_time_equal+0xa4>)
 801769e:	fba3 3204 	umull	r3, r2, r3, r4
 80176a2:	fb04 2205 	mla	r2, r4, r5, r2
 80176a6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80176aa:	43dd      	mvns	r5, r3
 80176ac:	1a8c      	subs	r4, r1, r2
 80176ae:	4285      	cmp	r5, r0
 80176b0:	41b4      	sbcs	r4, r6
 80176b2:	d332      	bcc.n	801771a <rmw_time_equal+0x9a>
 80176b4:	eb10 0c03 	adds.w	ip, r0, r3
 80176b8:	eb42 0106 	adc.w	r1, r2, r6
 80176bc:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 80176c0:	4817      	ldr	r0, [pc, #92]	@ (8017720 <rmw_time_equal+0xa0>)
 80176c2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80176c4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80176c6:	2202      	movs	r2, #2
 80176c8:	4298      	cmp	r0, r3
 80176ca:	41b2      	sbcs	r2, r6
 80176cc:	d31c      	bcc.n	8017708 <rmw_time_equal+0x88>
 80176ce:	4c15      	ldr	r4, [pc, #84]	@ (8017724 <rmw_time_equal+0xa4>)
 80176d0:	fba3 3204 	umull	r3, r2, r3, r4
 80176d4:	fb04 2206 	mla	r2, r4, r6, r2
 80176d8:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80176dc:	43de      	mvns	r6, r3
 80176de:	1a84      	subs	r4, r0, r2
 80176e0:	42ae      	cmp	r6, r5
 80176e2:	41bc      	sbcs	r4, r7
 80176e4:	d315      	bcc.n	8017712 <rmw_time_equal+0x92>
 80176e6:	195b      	adds	r3, r3, r5
 80176e8:	eb42 0207 	adc.w	r2, r2, r7
 80176ec:	428a      	cmp	r2, r1
 80176ee:	bf08      	it	eq
 80176f0:	4563      	cmpeq	r3, ip
 80176f2:	bf0c      	ite	eq
 80176f4:	2001      	moveq	r0, #1
 80176f6:	2000      	movne	r0, #0
 80176f8:	b004      	add	sp, #16
 80176fa:	bcf0      	pop	{r4, r5, r6, r7}
 80176fc:	4770      	bx	lr
 80176fe:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8017702:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017706:	e7d9      	b.n	80176bc <rmw_time_equal+0x3c>
 8017708:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801770c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8017710:	e7ec      	b.n	80176ec <rmw_time_equal+0x6c>
 8017712:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017716:	4602      	mov	r2, r0
 8017718:	e7e8      	b.n	80176ec <rmw_time_equal+0x6c>
 801771a:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801771e:	e7cd      	b.n	80176bc <rmw_time_equal+0x3c>
 8017720:	25c17d04 	.word	0x25c17d04
 8017724:	3b9aca00 	.word	0x3b9aca00

08017728 <rmw_time_total_nsec>:
 8017728:	b470      	push	{r4, r5, r6}
 801772a:	b085      	sub	sp, #20
 801772c:	ac04      	add	r4, sp, #16
 801772e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8017732:	4603      	mov	r3, r0
 8017734:	4912      	ldr	r1, [pc, #72]	@ (8017780 <rmw_time_total_nsec+0x58>)
 8017736:	9e03      	ldr	r6, [sp, #12]
 8017738:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801773c:	2202      	movs	r2, #2
 801773e:	4299      	cmp	r1, r3
 8017740:	41aa      	sbcs	r2, r5
 8017742:	d311      	bcc.n	8017768 <rmw_time_total_nsec+0x40>
 8017744:	4c0f      	ldr	r4, [pc, #60]	@ (8017784 <rmw_time_total_nsec+0x5c>)
 8017746:	fba3 3204 	umull	r3, r2, r3, r4
 801774a:	fb04 2205 	mla	r2, r4, r5, r2
 801774e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017752:	43dd      	mvns	r5, r3
 8017754:	1a8c      	subs	r4, r1, r2
 8017756:	4285      	cmp	r5, r0
 8017758:	41b4      	sbcs	r4, r6
 801775a:	d30c      	bcc.n	8017776 <rmw_time_total_nsec+0x4e>
 801775c:	1818      	adds	r0, r3, r0
 801775e:	eb42 0106 	adc.w	r1, r2, r6
 8017762:	b005      	add	sp, #20
 8017764:	bc70      	pop	{r4, r5, r6}
 8017766:	4770      	bx	lr
 8017768:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801776c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017770:	b005      	add	sp, #20
 8017772:	bc70      	pop	{r4, r5, r6}
 8017774:	4770      	bx	lr
 8017776:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801777a:	b005      	add	sp, #20
 801777c:	bc70      	pop	{r4, r5, r6}
 801777e:	4770      	bx	lr
 8017780:	25c17d04 	.word	0x25c17d04
 8017784:	3b9aca00 	.word	0x3b9aca00

08017788 <rmw_validate_full_topic_name>:
 8017788:	2800      	cmp	r0, #0
 801778a:	d057      	beq.n	801783c <rmw_validate_full_topic_name+0xb4>
 801778c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017790:	460d      	mov	r5, r1
 8017792:	2900      	cmp	r1, #0
 8017794:	d054      	beq.n	8017840 <rmw_validate_full_topic_name+0xb8>
 8017796:	4616      	mov	r6, r2
 8017798:	4604      	mov	r4, r0
 801779a:	f7e8 fd43 	bl	8000224 <strlen>
 801779e:	b148      	cbz	r0, 80177b4 <rmw_validate_full_topic_name+0x2c>
 80177a0:	7823      	ldrb	r3, [r4, #0]
 80177a2:	2b2f      	cmp	r3, #47	@ 0x2f
 80177a4:	d00d      	beq.n	80177c2 <rmw_validate_full_topic_name+0x3a>
 80177a6:	2302      	movs	r3, #2
 80177a8:	602b      	str	r3, [r5, #0]
 80177aa:	b13e      	cbz	r6, 80177bc <rmw_validate_full_topic_name+0x34>
 80177ac:	2000      	movs	r0, #0
 80177ae:	6030      	str	r0, [r6, #0]
 80177b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177b4:	2301      	movs	r3, #1
 80177b6:	602b      	str	r3, [r5, #0]
 80177b8:	2e00      	cmp	r6, #0
 80177ba:	d1f7      	bne.n	80177ac <rmw_validate_full_topic_name+0x24>
 80177bc:	2000      	movs	r0, #0
 80177be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177c2:	1e43      	subs	r3, r0, #1
 80177c4:	5ce2      	ldrb	r2, [r4, r3]
 80177c6:	2a2f      	cmp	r2, #47	@ 0x2f
 80177c8:	d03c      	beq.n	8017844 <rmw_validate_full_topic_name+0xbc>
 80177ca:	1e63      	subs	r3, r4, #1
 80177cc:	eb03 0800 	add.w	r8, r3, r0
 80177d0:	f1c4 0e01 	rsb	lr, r4, #1
 80177d4:	eb0e 0703 	add.w	r7, lr, r3
 80177d8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80177dc:	f021 0220 	bic.w	r2, r1, #32
 80177e0:	3a41      	subs	r2, #65	@ 0x41
 80177e2:	2a19      	cmp	r2, #25
 80177e4:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 80177e8:	d90b      	bls.n	8017802 <rmw_validate_full_topic_name+0x7a>
 80177ea:	295f      	cmp	r1, #95	@ 0x5f
 80177ec:	d009      	beq.n	8017802 <rmw_validate_full_topic_name+0x7a>
 80177ee:	f1bc 0f0a 	cmp.w	ip, #10
 80177f2:	d906      	bls.n	8017802 <rmw_validate_full_topic_name+0x7a>
 80177f4:	2304      	movs	r3, #4
 80177f6:	602b      	str	r3, [r5, #0]
 80177f8:	2e00      	cmp	r6, #0
 80177fa:	d0df      	beq.n	80177bc <rmw_validate_full_topic_name+0x34>
 80177fc:	6037      	str	r7, [r6, #0]
 80177fe:	2000      	movs	r0, #0
 8017800:	e7d6      	b.n	80177b0 <rmw_validate_full_topic_name+0x28>
 8017802:	4543      	cmp	r3, r8
 8017804:	d1e6      	bne.n	80177d4 <rmw_validate_full_topic_name+0x4c>
 8017806:	4f1a      	ldr	r7, [pc, #104]	@ (8017870 <rmw_validate_full_topic_name+0xe8>)
 8017808:	2301      	movs	r3, #1
 801780a:	e004      	b.n	8017816 <rmw_validate_full_topic_name+0x8e>
 801780c:	4298      	cmp	r0, r3
 801780e:	f104 0401 	add.w	r4, r4, #1
 8017812:	d91c      	bls.n	801784e <rmw_validate_full_topic_name+0xc6>
 8017814:	4613      	mov	r3, r2
 8017816:	4298      	cmp	r0, r3
 8017818:	f103 0201 	add.w	r2, r3, #1
 801781c:	d0f6      	beq.n	801780c <rmw_validate_full_topic_name+0x84>
 801781e:	7821      	ldrb	r1, [r4, #0]
 8017820:	292f      	cmp	r1, #47	@ 0x2f
 8017822:	d1f3      	bne.n	801780c <rmw_validate_full_topic_name+0x84>
 8017824:	7861      	ldrb	r1, [r4, #1]
 8017826:	292f      	cmp	r1, #47	@ 0x2f
 8017828:	d01c      	beq.n	8017864 <rmw_validate_full_topic_name+0xdc>
 801782a:	5dc9      	ldrb	r1, [r1, r7]
 801782c:	0749      	lsls	r1, r1, #29
 801782e:	d5ed      	bpl.n	801780c <rmw_validate_full_topic_name+0x84>
 8017830:	2206      	movs	r2, #6
 8017832:	602a      	str	r2, [r5, #0]
 8017834:	2e00      	cmp	r6, #0
 8017836:	d0c1      	beq.n	80177bc <rmw_validate_full_topic_name+0x34>
 8017838:	6033      	str	r3, [r6, #0]
 801783a:	e7bf      	b.n	80177bc <rmw_validate_full_topic_name+0x34>
 801783c:	200b      	movs	r0, #11
 801783e:	4770      	bx	lr
 8017840:	200b      	movs	r0, #11
 8017842:	e7b5      	b.n	80177b0 <rmw_validate_full_topic_name+0x28>
 8017844:	2203      	movs	r2, #3
 8017846:	602a      	str	r2, [r5, #0]
 8017848:	2e00      	cmp	r6, #0
 801784a:	d1f5      	bne.n	8017838 <rmw_validate_full_topic_name+0xb0>
 801784c:	e7b6      	b.n	80177bc <rmw_validate_full_topic_name+0x34>
 801784e:	28f7      	cmp	r0, #247	@ 0xf7
 8017850:	d802      	bhi.n	8017858 <rmw_validate_full_topic_name+0xd0>
 8017852:	2000      	movs	r0, #0
 8017854:	6028      	str	r0, [r5, #0]
 8017856:	e7ab      	b.n	80177b0 <rmw_validate_full_topic_name+0x28>
 8017858:	2307      	movs	r3, #7
 801785a:	602b      	str	r3, [r5, #0]
 801785c:	2e00      	cmp	r6, #0
 801785e:	d0ad      	beq.n	80177bc <rmw_validate_full_topic_name+0x34>
 8017860:	23f6      	movs	r3, #246	@ 0xf6
 8017862:	e7e9      	b.n	8017838 <rmw_validate_full_topic_name+0xb0>
 8017864:	2205      	movs	r2, #5
 8017866:	602a      	str	r2, [r5, #0]
 8017868:	2e00      	cmp	r6, #0
 801786a:	d1e5      	bne.n	8017838 <rmw_validate_full_topic_name+0xb0>
 801786c:	e7a6      	b.n	80177bc <rmw_validate_full_topic_name+0x34>
 801786e:	bf00      	nop
 8017870:	0801c1f7 	.word	0x0801c1f7

08017874 <on_status>:
 8017874:	b082      	sub	sp, #8
 8017876:	b002      	add	sp, #8
 8017878:	4770      	bx	lr
 801787a:	bf00      	nop

0801787c <on_topic>:
 801787c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017880:	4a22      	ldr	r2, [pc, #136]	@ (801790c <on_topic+0x90>)
 8017882:	b094      	sub	sp, #80	@ 0x50
 8017884:	6812      	ldr	r2, [r2, #0]
 8017886:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8017888:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801788c:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8017890:	b3c2      	cbz	r2, 8017904 <on_topic+0x88>
 8017892:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8017896:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801789a:	e001      	b.n	80178a0 <on_topic+0x24>
 801789c:	6852      	ldr	r2, [r2, #4]
 801789e:	b38a      	cbz	r2, 8017904 <on_topic+0x88>
 80178a0:	6894      	ldr	r4, [r2, #8]
 80178a2:	8aa3      	ldrh	r3, [r4, #20]
 80178a4:	428b      	cmp	r3, r1
 80178a6:	d1f9      	bne.n	801789c <on_topic+0x20>
 80178a8:	7da3      	ldrb	r3, [r4, #22]
 80178aa:	4283      	cmp	r3, r0
 80178ac:	d1f6      	bne.n	801789c <on_topic+0x20>
 80178ae:	2248      	movs	r2, #72	@ 0x48
 80178b0:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80178b4:	4668      	mov	r0, sp
 80178b6:	f002 fd86 	bl	801a3c6 <memcpy>
 80178ba:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80178be:	cb0c      	ldmia	r3, {r2, r3}
 80178c0:	4620      	mov	r0, r4
 80178c2:	f7f8 ff09 	bl	80106d8 <rmw_uxrce_get_static_input_buffer_for_entity>
 80178c6:	4607      	mov	r7, r0
 80178c8:	b1e0      	cbz	r0, 8017904 <on_topic+0x88>
 80178ca:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80178ce:	4632      	mov	r2, r6
 80178d0:	4628      	mov	r0, r5
 80178d2:	f108 0110 	add.w	r1, r8, #16
 80178d6:	f7f9 fc83 	bl	80111e0 <ucdr_deserialize_array_uint8_t>
 80178da:	b930      	cbnz	r0, 80178ea <on_topic+0x6e>
 80178dc:	480c      	ldr	r0, [pc, #48]	@ (8017910 <on_topic+0x94>)
 80178de:	4639      	mov	r1, r7
 80178e0:	b014      	add	sp, #80	@ 0x50
 80178e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80178e6:	f000 b8bd 	b.w	8017a64 <put_memory>
 80178ea:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 80178ee:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 80178f2:	f000 fca7 	bl	8018244 <rmw_uros_epoch_nanos>
 80178f6:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 80178fa:	2305      	movs	r3, #5
 80178fc:	e942 0102 	strd	r0, r1, [r2, #-8]
 8017900:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8017904:	b014      	add	sp, #80	@ 0x50
 8017906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801790a:	bf00      	nop
 801790c:	2001189c 	.word	0x2001189c
 8017910:	2001188c 	.word	0x2001188c

08017914 <on_request>:
 8017914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017918:	4823      	ldr	r0, [pc, #140]	@ (80179a8 <on_request+0x94>)
 801791a:	b094      	sub	sp, #80	@ 0x50
 801791c:	6800      	ldr	r0, [r0, #0]
 801791e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8017920:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8017924:	9113      	str	r1, [sp, #76]	@ 0x4c
 8017926:	2800      	cmp	r0, #0
 8017928:	d03b      	beq.n	80179a2 <on_request+0x8e>
 801792a:	461d      	mov	r5, r3
 801792c:	e001      	b.n	8017932 <on_request+0x1e>
 801792e:	6840      	ldr	r0, [r0, #4]
 8017930:	b3b8      	cbz	r0, 80179a2 <on_request+0x8e>
 8017932:	6884      	ldr	r4, [r0, #8]
 8017934:	8b21      	ldrh	r1, [r4, #24]
 8017936:	4291      	cmp	r1, r2
 8017938:	d1f9      	bne.n	801792e <on_request+0x1a>
 801793a:	2248      	movs	r2, #72	@ 0x48
 801793c:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8017940:	4668      	mov	r0, sp
 8017942:	f002 fd40 	bl	801a3c6 <memcpy>
 8017946:	f104 0320 	add.w	r3, r4, #32
 801794a:	cb0c      	ldmia	r3, {r2, r3}
 801794c:	4620      	mov	r0, r4
 801794e:	f7f8 fec3 	bl	80106d8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017952:	4680      	mov	r8, r0
 8017954:	b328      	cbz	r0, 80179a2 <on_request+0x8e>
 8017956:	4638      	mov	r0, r7
 8017958:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801795c:	4632      	mov	r2, r6
 801795e:	f107 0110 	add.w	r1, r7, #16
 8017962:	f7f9 fc3d 	bl	80111e0 <ucdr_deserialize_array_uint8_t>
 8017966:	b930      	cbnz	r0, 8017976 <on_request+0x62>
 8017968:	4810      	ldr	r0, [pc, #64]	@ (80179ac <on_request+0x98>)
 801796a:	4641      	mov	r1, r8
 801796c:	b014      	add	sp, #80	@ 0x50
 801796e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017972:	f000 b877 	b.w	8017a64 <put_memory>
 8017976:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017978:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 801797c:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8017980:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8017984:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017988:	e895 0003 	ldmia.w	r5, {r0, r1}
 801798c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017990:	f000 fc58 	bl	8018244 <rmw_uros_epoch_nanos>
 8017994:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8017998:	2303      	movs	r3, #3
 801799a:	e942 0102 	strd	r0, r1, [r2, #-8]
 801799e:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80179a2:	b014      	add	sp, #80	@ 0x50
 80179a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179a8:	2001186c 	.word	0x2001186c
 80179ac:	2001188c 	.word	0x2001188c

080179b0 <on_reply>:
 80179b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179b4:	4821      	ldr	r0, [pc, #132]	@ (8017a3c <on_reply+0x8c>)
 80179b6:	b094      	sub	sp, #80	@ 0x50
 80179b8:	6800      	ldr	r0, [r0, #0]
 80179ba:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80179bc:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80179c0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80179c2:	b3b8      	cbz	r0, 8017a34 <on_reply+0x84>
 80179c4:	461d      	mov	r5, r3
 80179c6:	e001      	b.n	80179cc <on_reply+0x1c>
 80179c8:	6840      	ldr	r0, [r0, #4]
 80179ca:	b398      	cbz	r0, 8017a34 <on_reply+0x84>
 80179cc:	6884      	ldr	r4, [r0, #8]
 80179ce:	8b21      	ldrh	r1, [r4, #24]
 80179d0:	4291      	cmp	r1, r2
 80179d2:	d1f9      	bne.n	80179c8 <on_reply+0x18>
 80179d4:	2248      	movs	r2, #72	@ 0x48
 80179d6:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80179da:	4668      	mov	r0, sp
 80179dc:	f002 fcf3 	bl	801a3c6 <memcpy>
 80179e0:	f104 0320 	add.w	r3, r4, #32
 80179e4:	cb0c      	ldmia	r3, {r2, r3}
 80179e6:	4620      	mov	r0, r4
 80179e8:	f7f8 fe76 	bl	80106d8 <rmw_uxrce_get_static_input_buffer_for_entity>
 80179ec:	4680      	mov	r8, r0
 80179ee:	b308      	cbz	r0, 8017a34 <on_reply+0x84>
 80179f0:	4638      	mov	r0, r7
 80179f2:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80179f6:	4632      	mov	r2, r6
 80179f8:	f107 0110 	add.w	r1, r7, #16
 80179fc:	f7f9 fbf0 	bl	80111e0 <ucdr_deserialize_array_uint8_t>
 8017a00:	b930      	cbnz	r0, 8017a10 <on_reply+0x60>
 8017a02:	480f      	ldr	r0, [pc, #60]	@ (8017a40 <on_reply+0x90>)
 8017a04:	4641      	mov	r1, r8
 8017a06:	b014      	add	sp, #80	@ 0x50
 8017a08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017a0c:	f000 b82a 	b.w	8017a64 <put_memory>
 8017a10:	2200      	movs	r2, #0
 8017a12:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8017a16:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8017a1a:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8017a1e:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8017a22:	f000 fc0f 	bl	8018244 <rmw_uros_epoch_nanos>
 8017a26:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8017a2a:	2304      	movs	r3, #4
 8017a2c:	e942 0102 	strd	r0, r1, [r2, #-8]
 8017a30:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8017a34:	b014      	add	sp, #80	@ 0x50
 8017a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a3a:	bf00      	nop
 8017a3c:	2000cf7c 	.word	0x2000cf7c
 8017a40:	2001188c 	.word	0x2001188c

08017a44 <get_memory>:
 8017a44:	4603      	mov	r3, r0
 8017a46:	6840      	ldr	r0, [r0, #4]
 8017a48:	b158      	cbz	r0, 8017a62 <get_memory+0x1e>
 8017a4a:	6842      	ldr	r2, [r0, #4]
 8017a4c:	605a      	str	r2, [r3, #4]
 8017a4e:	b10a      	cbz	r2, 8017a54 <get_memory+0x10>
 8017a50:	2100      	movs	r1, #0
 8017a52:	6011      	str	r1, [r2, #0]
 8017a54:	681a      	ldr	r2, [r3, #0]
 8017a56:	6042      	str	r2, [r0, #4]
 8017a58:	b102      	cbz	r2, 8017a5c <get_memory+0x18>
 8017a5a:	6010      	str	r0, [r2, #0]
 8017a5c:	2200      	movs	r2, #0
 8017a5e:	6002      	str	r2, [r0, #0]
 8017a60:	6018      	str	r0, [r3, #0]
 8017a62:	4770      	bx	lr

08017a64 <put_memory>:
 8017a64:	680b      	ldr	r3, [r1, #0]
 8017a66:	b10b      	cbz	r3, 8017a6c <put_memory+0x8>
 8017a68:	684a      	ldr	r2, [r1, #4]
 8017a6a:	605a      	str	r2, [r3, #4]
 8017a6c:	684a      	ldr	r2, [r1, #4]
 8017a6e:	b102      	cbz	r2, 8017a72 <put_memory+0xe>
 8017a70:	6013      	str	r3, [r2, #0]
 8017a72:	6803      	ldr	r3, [r0, #0]
 8017a74:	428b      	cmp	r3, r1
 8017a76:	6843      	ldr	r3, [r0, #4]
 8017a78:	bf08      	it	eq
 8017a7a:	6002      	streq	r2, [r0, #0]
 8017a7c:	604b      	str	r3, [r1, #4]
 8017a7e:	b103      	cbz	r3, 8017a82 <put_memory+0x1e>
 8017a80:	6019      	str	r1, [r3, #0]
 8017a82:	2300      	movs	r3, #0
 8017a84:	600b      	str	r3, [r1, #0]
 8017a86:	6041      	str	r1, [r0, #4]
 8017a88:	4770      	bx	lr
 8017a8a:	bf00      	nop

08017a8c <rmw_destroy_client>:
 8017a8c:	b570      	push	{r4, r5, r6, lr}
 8017a8e:	b128      	cbz	r0, 8017a9c <rmw_destroy_client+0x10>
 8017a90:	4604      	mov	r4, r0
 8017a92:	6800      	ldr	r0, [r0, #0]
 8017a94:	460d      	mov	r5, r1
 8017a96:	f7f8 ff95 	bl	80109c4 <is_uxrce_rmw_identifier_valid>
 8017a9a:	b910      	cbnz	r0, 8017aa2 <rmw_destroy_client+0x16>
 8017a9c:	2401      	movs	r4, #1
 8017a9e:	4620      	mov	r0, r4
 8017aa0:	bd70      	pop	{r4, r5, r6, pc}
 8017aa2:	6863      	ldr	r3, [r4, #4]
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	d0f9      	beq.n	8017a9c <rmw_destroy_client+0x10>
 8017aa8:	2d00      	cmp	r5, #0
 8017aaa:	d0f7      	beq.n	8017a9c <rmw_destroy_client+0x10>
 8017aac:	6828      	ldr	r0, [r5, #0]
 8017aae:	f7f8 ff89 	bl	80109c4 <is_uxrce_rmw_identifier_valid>
 8017ab2:	2800      	cmp	r0, #0
 8017ab4:	d0f2      	beq.n	8017a9c <rmw_destroy_client+0x10>
 8017ab6:	686e      	ldr	r6, [r5, #4]
 8017ab8:	2e00      	cmp	r6, #0
 8017aba:	d0ef      	beq.n	8017a9c <rmw_destroy_client+0x10>
 8017abc:	6864      	ldr	r4, [r4, #4]
 8017abe:	6932      	ldr	r2, [r6, #16]
 8017ac0:	6920      	ldr	r0, [r4, #16]
 8017ac2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017ac6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017aca:	6819      	ldr	r1, [r3, #0]
 8017acc:	f7fa f920 	bl	8011d10 <uxr_buffer_cancel_data>
 8017ad0:	4602      	mov	r2, r0
 8017ad2:	6920      	ldr	r0, [r4, #16]
 8017ad4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017ad8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017adc:	f7f8 fef2 	bl	80108c4 <run_xrce_session>
 8017ae0:	6920      	ldr	r0, [r4, #16]
 8017ae2:	6932      	ldr	r2, [r6, #16]
 8017ae4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017ae8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017aec:	6819      	ldr	r1, [r3, #0]
 8017aee:	f7f9 fcdd 	bl	80114ac <uxr_buffer_delete_entity>
 8017af2:	4602      	mov	r2, r0
 8017af4:	6920      	ldr	r0, [r4, #16]
 8017af6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017afa:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017afe:	f7f8 fee1 	bl	80108c4 <run_xrce_session>
 8017b02:	2800      	cmp	r0, #0
 8017b04:	4628      	mov	r0, r5
 8017b06:	bf14      	ite	ne
 8017b08:	2400      	movne	r4, #0
 8017b0a:	2402      	moveq	r4, #2
 8017b0c:	f7f8 fdc2 	bl	8010694 <rmw_uxrce_fini_client_memory>
 8017b10:	e7c5      	b.n	8017a9e <rmw_destroy_client+0x12>
 8017b12:	bf00      	nop

08017b14 <rmw_get_implementation_identifier>:
 8017b14:	4b01      	ldr	r3, [pc, #4]	@ (8017b1c <rmw_get_implementation_identifier+0x8>)
 8017b16:	6818      	ldr	r0, [r3, #0]
 8017b18:	4770      	bx	lr
 8017b1a:	bf00      	nop
 8017b1c:	0801c0c0 	.word	0x0801c0c0

08017b20 <rmw_create_guard_condition>:
 8017b20:	b538      	push	{r3, r4, r5, lr}
 8017b22:	4605      	mov	r5, r0
 8017b24:	4807      	ldr	r0, [pc, #28]	@ (8017b44 <rmw_create_guard_condition+0x24>)
 8017b26:	f7ff ff8d 	bl	8017a44 <get_memory>
 8017b2a:	b148      	cbz	r0, 8017b40 <rmw_create_guard_condition+0x20>
 8017b2c:	6884      	ldr	r4, [r0, #8]
 8017b2e:	2300      	movs	r3, #0
 8017b30:	7423      	strb	r3, [r4, #16]
 8017b32:	61e5      	str	r5, [r4, #28]
 8017b34:	f7ff ffee 	bl	8017b14 <rmw_get_implementation_identifier>
 8017b38:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8017b3c:	f104 0014 	add.w	r0, r4, #20
 8017b40:	bd38      	pop	{r3, r4, r5, pc}
 8017b42:	bf00      	nop
 8017b44:	2001182c 	.word	0x2001182c

08017b48 <rmw_destroy_guard_condition>:
 8017b48:	b508      	push	{r3, lr}
 8017b4a:	4b08      	ldr	r3, [pc, #32]	@ (8017b6c <rmw_destroy_guard_condition+0x24>)
 8017b4c:	6819      	ldr	r1, [r3, #0]
 8017b4e:	b911      	cbnz	r1, 8017b56 <rmw_destroy_guard_condition+0xe>
 8017b50:	e00a      	b.n	8017b68 <rmw_destroy_guard_condition+0x20>
 8017b52:	6849      	ldr	r1, [r1, #4]
 8017b54:	b141      	cbz	r1, 8017b68 <rmw_destroy_guard_condition+0x20>
 8017b56:	688b      	ldr	r3, [r1, #8]
 8017b58:	3314      	adds	r3, #20
 8017b5a:	4298      	cmp	r0, r3
 8017b5c:	d1f9      	bne.n	8017b52 <rmw_destroy_guard_condition+0xa>
 8017b5e:	4803      	ldr	r0, [pc, #12]	@ (8017b6c <rmw_destroy_guard_condition+0x24>)
 8017b60:	f7ff ff80 	bl	8017a64 <put_memory>
 8017b64:	2000      	movs	r0, #0
 8017b66:	bd08      	pop	{r3, pc}
 8017b68:	2001      	movs	r0, #1
 8017b6a:	bd08      	pop	{r3, pc}
 8017b6c:	2001182c 	.word	0x2001182c

08017b70 <create_topic>:
 8017b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b74:	4605      	mov	r5, r0
 8017b76:	b084      	sub	sp, #16
 8017b78:	4822      	ldr	r0, [pc, #136]	@ (8017c04 <create_topic+0x94>)
 8017b7a:	460f      	mov	r7, r1
 8017b7c:	4616      	mov	r6, r2
 8017b7e:	f7ff ff61 	bl	8017a44 <get_memory>
 8017b82:	4604      	mov	r4, r0
 8017b84:	2800      	cmp	r0, #0
 8017b86:	d039      	beq.n	8017bfc <create_topic+0x8c>
 8017b88:	692b      	ldr	r3, [r5, #16]
 8017b8a:	6884      	ldr	r4, [r0, #8]
 8017b8c:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8017c0c <create_topic+0x9c>
 8017b90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017b94:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8017b98:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8017b9c:	1c42      	adds	r2, r0, #1
 8017b9e:	2102      	movs	r1, #2
 8017ba0:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8017ba4:	f7f9 ff46 	bl	8011a34 <uxr_object_id>
 8017ba8:	223c      	movs	r2, #60	@ 0x3c
 8017baa:	6120      	str	r0, [r4, #16]
 8017bac:	4641      	mov	r1, r8
 8017bae:	4638      	mov	r0, r7
 8017bb0:	f7f8 feee 	bl	8010990 <generate_topic_name>
 8017bb4:	b1f0      	cbz	r0, 8017bf4 <create_topic+0x84>
 8017bb6:	4f14      	ldr	r7, [pc, #80]	@ (8017c08 <create_topic+0x98>)
 8017bb8:	4630      	mov	r0, r6
 8017bba:	2264      	movs	r2, #100	@ 0x64
 8017bbc:	4639      	mov	r1, r7
 8017bbe:	f7f8 feb7 	bl	8010930 <generate_type_name>
 8017bc2:	b1b8      	cbz	r0, 8017bf4 <create_topic+0x84>
 8017bc4:	6928      	ldr	r0, [r5, #16]
 8017bc6:	2306      	movs	r3, #6
 8017bc8:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8017bcc:	f8cd 8000 	str.w	r8, [sp]
 8017bd0:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8017bd4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017bd8:	6811      	ldr	r1, [r2, #0]
 8017bda:	696b      	ldr	r3, [r5, #20]
 8017bdc:	6922      	ldr	r2, [r4, #16]
 8017bde:	f7f9 fce3 	bl	80115a8 <uxr_buffer_create_topic_bin>
 8017be2:	4602      	mov	r2, r0
 8017be4:	6928      	ldr	r0, [r5, #16]
 8017be6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8017bea:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8017bee:	f7f8 fe69 	bl	80108c4 <run_xrce_session>
 8017bf2:	b918      	cbnz	r0, 8017bfc <create_topic+0x8c>
 8017bf4:	4620      	mov	r0, r4
 8017bf6:	f7f8 fd63 	bl	80106c0 <rmw_uxrce_fini_topic_memory>
 8017bfa:	2400      	movs	r4, #0
 8017bfc:	4620      	mov	r0, r4
 8017bfe:	b004      	add	sp, #16
 8017c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c04:	200118ac 	.word	0x200118ac
 8017c08:	20011928 	.word	0x20011928
 8017c0c:	200118ec 	.word	0x200118ec

08017c10 <destroy_topic>:
 8017c10:	b538      	push	{r3, r4, r5, lr}
 8017c12:	6985      	ldr	r5, [r0, #24]
 8017c14:	b1d5      	cbz	r5, 8017c4c <destroy_topic+0x3c>
 8017c16:	4604      	mov	r4, r0
 8017c18:	6928      	ldr	r0, [r5, #16]
 8017c1a:	6922      	ldr	r2, [r4, #16]
 8017c1c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017c20:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017c24:	6819      	ldr	r1, [r3, #0]
 8017c26:	f7f9 fc41 	bl	80114ac <uxr_buffer_delete_entity>
 8017c2a:	4602      	mov	r2, r0
 8017c2c:	6928      	ldr	r0, [r5, #16]
 8017c2e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017c32:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017c36:	f7f8 fe45 	bl	80108c4 <run_xrce_session>
 8017c3a:	2800      	cmp	r0, #0
 8017c3c:	4620      	mov	r0, r4
 8017c3e:	bf14      	ite	ne
 8017c40:	2400      	movne	r4, #0
 8017c42:	2402      	moveq	r4, #2
 8017c44:	f7f8 fd3c 	bl	80106c0 <rmw_uxrce_fini_topic_memory>
 8017c48:	4620      	mov	r0, r4
 8017c4a:	bd38      	pop	{r3, r4, r5, pc}
 8017c4c:	2401      	movs	r4, #1
 8017c4e:	4620      	mov	r0, r4
 8017c50:	bd38      	pop	{r3, r4, r5, pc}
 8017c52:	bf00      	nop

08017c54 <rmw_send_request>:
 8017c54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017c58:	4604      	mov	r4, r0
 8017c5a:	6800      	ldr	r0, [r0, #0]
 8017c5c:	b08b      	sub	sp, #44	@ 0x2c
 8017c5e:	460e      	mov	r6, r1
 8017c60:	4615      	mov	r5, r2
 8017c62:	b128      	cbz	r0, 8017c70 <rmw_send_request+0x1c>
 8017c64:	4b21      	ldr	r3, [pc, #132]	@ (8017cec <rmw_send_request+0x98>)
 8017c66:	6819      	ldr	r1, [r3, #0]
 8017c68:	f7e8 fad2 	bl	8000210 <strcmp>
 8017c6c:	2800      	cmp	r0, #0
 8017c6e:	d139      	bne.n	8017ce4 <rmw_send_request+0x90>
 8017c70:	6864      	ldr	r4, [r4, #4]
 8017c72:	6963      	ldr	r3, [r4, #20]
 8017c74:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8017c78:	689b      	ldr	r3, [r3, #8]
 8017c7a:	4798      	blx	r3
 8017c7c:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8017c80:	4630      	mov	r0, r6
 8017c82:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017c86:	4798      	blx	r3
 8017c88:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8017c8c:	9000      	str	r0, [sp, #0]
 8017c8e:	6922      	ldr	r2, [r4, #16]
 8017c90:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8017c92:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8017c96:	ab02      	add	r3, sp, #8
 8017c98:	f7fc f8b6 	bl	8013e08 <uxr_prepare_output_stream>
 8017c9c:	2700      	movs	r7, #0
 8017c9e:	6028      	str	r0, [r5, #0]
 8017ca0:	606f      	str	r7, [r5, #4]
 8017ca2:	b198      	cbz	r0, 8017ccc <rmw_send_request+0x78>
 8017ca4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8017ca8:	a902      	add	r1, sp, #8
 8017caa:	4630      	mov	r0, r6
 8017cac:	4798      	blx	r3
 8017cae:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8017cb2:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8017cb6:	2b01      	cmp	r3, #1
 8017cb8:	d00c      	beq.n	8017cd4 <rmw_send_request+0x80>
 8017cba:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8017cbc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017cc0:	f7fa fdfa 	bl	80128b8 <uxr_run_session_until_confirm_delivery>
 8017cc4:	4638      	mov	r0, r7
 8017cc6:	b00b      	add	sp, #44	@ 0x2c
 8017cc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017ccc:	2001      	movs	r0, #1
 8017cce:	b00b      	add	sp, #44	@ 0x2c
 8017cd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017cd4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017cd8:	f7fa fa2e 	bl	8012138 <uxr_flash_output_streams>
 8017cdc:	4638      	mov	r0, r7
 8017cde:	b00b      	add	sp, #44	@ 0x2c
 8017ce0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017ce4:	200c      	movs	r0, #12
 8017ce6:	b00b      	add	sp, #44	@ 0x2c
 8017ce8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017cec:	0801c0c0 	.word	0x0801c0c0

08017cf0 <rmw_take_request>:
 8017cf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017cf4:	4605      	mov	r5, r0
 8017cf6:	6800      	ldr	r0, [r0, #0]
 8017cf8:	b089      	sub	sp, #36	@ 0x24
 8017cfa:	460c      	mov	r4, r1
 8017cfc:	4690      	mov	r8, r2
 8017cfe:	461e      	mov	r6, r3
 8017d00:	b128      	cbz	r0, 8017d0e <rmw_take_request+0x1e>
 8017d02:	4b28      	ldr	r3, [pc, #160]	@ (8017da4 <rmw_take_request+0xb4>)
 8017d04:	6819      	ldr	r1, [r3, #0]
 8017d06:	f7e8 fa83 	bl	8000210 <strcmp>
 8017d0a:	2800      	cmp	r0, #0
 8017d0c:	d146      	bne.n	8017d9c <rmw_take_request+0xac>
 8017d0e:	b10e      	cbz	r6, 8017d14 <rmw_take_request+0x24>
 8017d10:	2300      	movs	r3, #0
 8017d12:	7033      	strb	r3, [r6, #0]
 8017d14:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8017d18:	f7f8 fd56 	bl	80107c8 <rmw_uxrce_clean_expired_static_input_buffer>
 8017d1c:	4648      	mov	r0, r9
 8017d1e:	f7f8 fd2b 	bl	8010778 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017d22:	4607      	mov	r7, r0
 8017d24:	b3b0      	cbz	r0, 8017d94 <rmw_take_request+0xa4>
 8017d26:	6885      	ldr	r5, [r0, #8]
 8017d28:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8017d2c:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8017d30:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8017d34:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8017d38:	7423      	strb	r3, [r4, #16]
 8017d3a:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8017d3e:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8017d42:	74e2      	strb	r2, [r4, #19]
 8017d44:	f8a4 3011 	strh.w	r3, [r4, #17]
 8017d48:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8017d4c:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8017d50:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8017d54:	61e1      	str	r1, [r4, #28]
 8017d56:	6162      	str	r2, [r4, #20]
 8017d58:	61a3      	str	r3, [r4, #24]
 8017d5a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8017d5e:	689b      	ldr	r3, [r3, #8]
 8017d60:	4798      	blx	r3
 8017d62:	6844      	ldr	r4, [r0, #4]
 8017d64:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8017d68:	f105 0110 	add.w	r1, r5, #16
 8017d6c:	4668      	mov	r0, sp
 8017d6e:	f7f4 fcf5 	bl	800c75c <ucdr_init_buffer>
 8017d72:	68e3      	ldr	r3, [r4, #12]
 8017d74:	4641      	mov	r1, r8
 8017d76:	4668      	mov	r0, sp
 8017d78:	4798      	blx	r3
 8017d7a:	4639      	mov	r1, r7
 8017d7c:	4604      	mov	r4, r0
 8017d7e:	480a      	ldr	r0, [pc, #40]	@ (8017da8 <rmw_take_request+0xb8>)
 8017d80:	f7ff fe70 	bl	8017a64 <put_memory>
 8017d84:	b106      	cbz	r6, 8017d88 <rmw_take_request+0x98>
 8017d86:	7034      	strb	r4, [r6, #0]
 8017d88:	f084 0001 	eor.w	r0, r4, #1
 8017d8c:	b2c0      	uxtb	r0, r0
 8017d8e:	b009      	add	sp, #36	@ 0x24
 8017d90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017d94:	2001      	movs	r0, #1
 8017d96:	b009      	add	sp, #36	@ 0x24
 8017d98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017d9c:	200c      	movs	r0, #12
 8017d9e:	b009      	add	sp, #36	@ 0x24
 8017da0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017da4:	0801c0c0 	.word	0x0801c0c0
 8017da8:	2001188c 	.word	0x2001188c

08017dac <rmw_send_response>:
 8017dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017dae:	4605      	mov	r5, r0
 8017db0:	6800      	ldr	r0, [r0, #0]
 8017db2:	b091      	sub	sp, #68	@ 0x44
 8017db4:	460c      	mov	r4, r1
 8017db6:	4616      	mov	r6, r2
 8017db8:	b128      	cbz	r0, 8017dc6 <rmw_send_response+0x1a>
 8017dba:	4b29      	ldr	r3, [pc, #164]	@ (8017e60 <rmw_send_response+0xb4>)
 8017dbc:	6819      	ldr	r1, [r3, #0]
 8017dbe:	f7e8 fa27 	bl	8000210 <strcmp>
 8017dc2:	2800      	cmp	r0, #0
 8017dc4:	d141      	bne.n	8017e4a <rmw_send_response+0x9e>
 8017dc6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8017dca:	9306      	str	r3, [sp, #24]
 8017dcc:	4623      	mov	r3, r4
 8017dce:	9207      	str	r2, [sp, #28]
 8017dd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017dd4:	686d      	ldr	r5, [r5, #4]
 8017dd6:	789b      	ldrb	r3, [r3, #2]
 8017dd8:	68a1      	ldr	r1, [r4, #8]
 8017dda:	f88d 2017 	strb.w	r2, [sp, #23]
 8017dde:	f88d 3016 	strb.w	r3, [sp, #22]
 8017de2:	68e2      	ldr	r2, [r4, #12]
 8017de4:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8017de8:	6860      	ldr	r0, [r4, #4]
 8017dea:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017dee:	ab02      	add	r3, sp, #8
 8017df0:	c307      	stmia	r3!, {r0, r1, r2}
 8017df2:	696b      	ldr	r3, [r5, #20]
 8017df4:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8017df6:	68db      	ldr	r3, [r3, #12]
 8017df8:	4798      	blx	r3
 8017dfa:	6844      	ldr	r4, [r0, #4]
 8017dfc:	4630      	mov	r0, r6
 8017dfe:	6923      	ldr	r3, [r4, #16]
 8017e00:	4798      	blx	r3
 8017e02:	f100 0318 	add.w	r3, r0, #24
 8017e06:	6938      	ldr	r0, [r7, #16]
 8017e08:	9300      	str	r3, [sp, #0]
 8017e0a:	692a      	ldr	r2, [r5, #16]
 8017e0c:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8017e0e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017e12:	ab08      	add	r3, sp, #32
 8017e14:	f7fb fff8 	bl	8013e08 <uxr_prepare_output_stream>
 8017e18:	b910      	cbnz	r0, 8017e20 <rmw_send_response+0x74>
 8017e1a:	2001      	movs	r0, #1
 8017e1c:	b011      	add	sp, #68	@ 0x44
 8017e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e20:	a902      	add	r1, sp, #8
 8017e22:	a808      	add	r0, sp, #32
 8017e24:	f7fd f93c 	bl	80150a0 <uxr_serialize_SampleIdentity>
 8017e28:	68a3      	ldr	r3, [r4, #8]
 8017e2a:	a908      	add	r1, sp, #32
 8017e2c:	4630      	mov	r0, r6
 8017e2e:	4798      	blx	r3
 8017e30:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8017e34:	6938      	ldr	r0, [r7, #16]
 8017e36:	2b01      	cmp	r3, #1
 8017e38:	d00a      	beq.n	8017e50 <rmw_send_response+0xa4>
 8017e3a:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8017e3c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017e40:	f7fa fd3a 	bl	80128b8 <uxr_run_session_until_confirm_delivery>
 8017e44:	2000      	movs	r0, #0
 8017e46:	b011      	add	sp, #68	@ 0x44
 8017e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e4a:	200c      	movs	r0, #12
 8017e4c:	b011      	add	sp, #68	@ 0x44
 8017e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e50:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017e54:	f7fa f970 	bl	8012138 <uxr_flash_output_streams>
 8017e58:	2000      	movs	r0, #0
 8017e5a:	b011      	add	sp, #68	@ 0x44
 8017e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e5e:	bf00      	nop
 8017e60:	0801c0c0 	.word	0x0801c0c0

08017e64 <rmw_take_response>:
 8017e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e68:	4604      	mov	r4, r0
 8017e6a:	6800      	ldr	r0, [r0, #0]
 8017e6c:	b088      	sub	sp, #32
 8017e6e:	4688      	mov	r8, r1
 8017e70:	4617      	mov	r7, r2
 8017e72:	461d      	mov	r5, r3
 8017e74:	b120      	cbz	r0, 8017e80 <rmw_take_response+0x1c>
 8017e76:	4b1e      	ldr	r3, [pc, #120]	@ (8017ef0 <rmw_take_response+0x8c>)
 8017e78:	6819      	ldr	r1, [r3, #0]
 8017e7a:	f7e8 f9c9 	bl	8000210 <strcmp>
 8017e7e:	bb78      	cbnz	r0, 8017ee0 <rmw_take_response+0x7c>
 8017e80:	b10d      	cbz	r5, 8017e86 <rmw_take_response+0x22>
 8017e82:	2300      	movs	r3, #0
 8017e84:	702b      	strb	r3, [r5, #0]
 8017e86:	6864      	ldr	r4, [r4, #4]
 8017e88:	f7f8 fc9e 	bl	80107c8 <rmw_uxrce_clean_expired_static_input_buffer>
 8017e8c:	4620      	mov	r0, r4
 8017e8e:	f7f8 fc73 	bl	8010778 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017e92:	4606      	mov	r6, r0
 8017e94:	b340      	cbz	r0, 8017ee8 <rmw_take_response+0x84>
 8017e96:	6963      	ldr	r3, [r4, #20]
 8017e98:	6884      	ldr	r4, [r0, #8]
 8017e9a:	68db      	ldr	r3, [r3, #12]
 8017e9c:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8017ea0:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8017ea4:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8017ea8:	4798      	blx	r3
 8017eaa:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8017eae:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8017eb2:	f104 0110 	add.w	r1, r4, #16
 8017eb6:	4668      	mov	r0, sp
 8017eb8:	f7f4 fc50 	bl	800c75c <ucdr_init_buffer>
 8017ebc:	4639      	mov	r1, r7
 8017ebe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017ec2:	4668      	mov	r0, sp
 8017ec4:	4798      	blx	r3
 8017ec6:	4631      	mov	r1, r6
 8017ec8:	4604      	mov	r4, r0
 8017eca:	480a      	ldr	r0, [pc, #40]	@ (8017ef4 <rmw_take_response+0x90>)
 8017ecc:	f7ff fdca 	bl	8017a64 <put_memory>
 8017ed0:	b105      	cbz	r5, 8017ed4 <rmw_take_response+0x70>
 8017ed2:	702c      	strb	r4, [r5, #0]
 8017ed4:	f084 0001 	eor.w	r0, r4, #1
 8017ed8:	b2c0      	uxtb	r0, r0
 8017eda:	b008      	add	sp, #32
 8017edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ee0:	200c      	movs	r0, #12
 8017ee2:	b008      	add	sp, #32
 8017ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ee8:	2001      	movs	r0, #1
 8017eea:	b008      	add	sp, #32
 8017eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ef0:	0801c0c0 	.word	0x0801c0c0
 8017ef4:	2001188c 	.word	0x2001188c

08017ef8 <rmw_trigger_guard_condition>:
 8017ef8:	b160      	cbz	r0, 8017f14 <rmw_trigger_guard_condition+0x1c>
 8017efa:	b510      	push	{r4, lr}
 8017efc:	4604      	mov	r4, r0
 8017efe:	6800      	ldr	r0, [r0, #0]
 8017f00:	f7f8 fd60 	bl	80109c4 <is_uxrce_rmw_identifier_valid>
 8017f04:	b908      	cbnz	r0, 8017f0a <rmw_trigger_guard_condition+0x12>
 8017f06:	2001      	movs	r0, #1
 8017f08:	bd10      	pop	{r4, pc}
 8017f0a:	6863      	ldr	r3, [r4, #4]
 8017f0c:	2201      	movs	r2, #1
 8017f0e:	741a      	strb	r2, [r3, #16]
 8017f10:	2000      	movs	r0, #0
 8017f12:	bd10      	pop	{r4, pc}
 8017f14:	2001      	movs	r0, #1
 8017f16:	4770      	bx	lr

08017f18 <rmw_wait>:
 8017f18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017f1c:	b089      	sub	sp, #36	@ 0x24
 8017f1e:	4605      	mov	r5, r0
 8017f20:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8017f22:	460e      	mov	r6, r1
 8017f24:	4698      	mov	r8, r3
 8017f26:	4691      	mov	r9, r2
 8017f28:	2a00      	cmp	r2, #0
 8017f2a:	f000 810a 	beq.w	8018142 <rmw_wait+0x22a>
 8017f2e:	b16c      	cbz	r4, 8017f4c <rmw_wait+0x34>
 8017f30:	4bae      	ldr	r3, [pc, #696]	@ (80181ec <rmw_wait+0x2d4>)
 8017f32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017f34:	af04      	add	r7, sp, #16
 8017f36:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8017f3a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8017f3e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8017f42:	f7ff fb9d 	bl	8017680 <rmw_time_equal>
 8017f46:	2800      	cmp	r0, #0
 8017f48:	f000 8127 	beq.w	801819a <rmw_wait+0x282>
 8017f4c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8017f50:	f7f8 fc3a 	bl	80107c8 <rmw_uxrce_clean_expired_static_input_buffer>
 8017f54:	4ba6      	ldr	r3, [pc, #664]	@ (80181f0 <rmw_wait+0x2d8>)
 8017f56:	681c      	ldr	r4, [r3, #0]
 8017f58:	b14c      	cbz	r4, 8017f6e <rmw_wait+0x56>
 8017f5a:	4623      	mov	r3, r4
 8017f5c:	2100      	movs	r1, #0
 8017f5e:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8017f62:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017f66:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d1f7      	bne.n	8017f5e <rmw_wait+0x46>
 8017f6e:	f1b9 0f00 	cmp.w	r9, #0
 8017f72:	d011      	beq.n	8017f98 <rmw_wait+0x80>
 8017f74:	f8d9 1000 	ldr.w	r1, [r9]
 8017f78:	b171      	cbz	r1, 8017f98 <rmw_wait+0x80>
 8017f7a:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8017f7e:	2300      	movs	r3, #0
 8017f80:	2001      	movs	r0, #1
 8017f82:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017f86:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8017f88:	6912      	ldr	r2, [r2, #16]
 8017f8a:	3301      	adds	r3, #1
 8017f8c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017f90:	4299      	cmp	r1, r3
 8017f92:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8017f96:	d1f4      	bne.n	8017f82 <rmw_wait+0x6a>
 8017f98:	f1b8 0f00 	cmp.w	r8, #0
 8017f9c:	d011      	beq.n	8017fc2 <rmw_wait+0xaa>
 8017f9e:	f8d8 1000 	ldr.w	r1, [r8]
 8017fa2:	b171      	cbz	r1, 8017fc2 <rmw_wait+0xaa>
 8017fa4:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8017fa8:	2300      	movs	r3, #0
 8017faa:	2001      	movs	r0, #1
 8017fac:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017fb0:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8017fb2:	6912      	ldr	r2, [r2, #16]
 8017fb4:	3301      	adds	r3, #1
 8017fb6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017fba:	4299      	cmp	r1, r3
 8017fbc:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8017fc0:	d1f4      	bne.n	8017fac <rmw_wait+0x94>
 8017fc2:	b185      	cbz	r5, 8017fe6 <rmw_wait+0xce>
 8017fc4:	6829      	ldr	r1, [r5, #0]
 8017fc6:	b171      	cbz	r1, 8017fe6 <rmw_wait+0xce>
 8017fc8:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8017fcc:	2300      	movs	r3, #0
 8017fce:	2001      	movs	r0, #1
 8017fd0:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017fd4:	6a12      	ldr	r2, [r2, #32]
 8017fd6:	6912      	ldr	r2, [r2, #16]
 8017fd8:	3301      	adds	r3, #1
 8017fda:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017fde:	4299      	cmp	r1, r3
 8017fe0:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8017fe4:	d1f4      	bne.n	8017fd0 <rmw_wait+0xb8>
 8017fe6:	b34c      	cbz	r4, 801803c <rmw_wait+0x124>
 8017fe8:	4622      	mov	r2, r4
 8017fea:	2300      	movs	r3, #0
 8017fec:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8017ff0:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8017ff4:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8017ff8:	440b      	add	r3, r1
 8017ffa:	b2db      	uxtb	r3, r3
 8017ffc:	2a00      	cmp	r2, #0
 8017ffe:	d1f5      	bne.n	8017fec <rmw_wait+0xd4>
 8018000:	2b00      	cmp	r3, #0
 8018002:	f000 8084 	beq.w	801810e <rmw_wait+0x1f6>
 8018006:	1c7a      	adds	r2, r7, #1
 8018008:	d00d      	beq.n	8018026 <rmw_wait+0x10e>
 801800a:	ee07 7a90 	vmov	s15, r7
 801800e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8018012:	ee07 3a90 	vmov	s15, r3
 8018016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801801a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801801e:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8018022:	ee17 7a90 	vmov	r7, s15
 8018026:	68a0      	ldr	r0, [r4, #8]
 8018028:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 801802c:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8018030:	2b00      	cmp	r3, #0
 8018032:	f040 8090 	bne.w	8018156 <rmw_wait+0x23e>
 8018036:	6864      	ldr	r4, [r4, #4]
 8018038:	2c00      	cmp	r4, #0
 801803a:	d1f4      	bne.n	8018026 <rmw_wait+0x10e>
 801803c:	f1b9 0f00 	cmp.w	r9, #0
 8018040:	f000 80bc 	beq.w	80181bc <rmw_wait+0x2a4>
 8018044:	f8d9 7000 	ldr.w	r7, [r9]
 8018048:	2f00      	cmp	r7, #0
 801804a:	f000 808e 	beq.w	801816a <rmw_wait+0x252>
 801804e:	2400      	movs	r4, #0
 8018050:	4627      	mov	r7, r4
 8018052:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8018056:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801805a:	f7f8 fb8d 	bl	8010778 <rmw_uxrce_find_static_input_buffer_by_owner>
 801805e:	2800      	cmp	r0, #0
 8018060:	d05f      	beq.n	8018122 <rmw_wait+0x20a>
 8018062:	f8d9 3000 	ldr.w	r3, [r9]
 8018066:	3401      	adds	r4, #1
 8018068:	42a3      	cmp	r3, r4
 801806a:	f04f 0701 	mov.w	r7, #1
 801806e:	d8f0      	bhi.n	8018052 <rmw_wait+0x13a>
 8018070:	f1b8 0f00 	cmp.w	r8, #0
 8018074:	d012      	beq.n	801809c <rmw_wait+0x184>
 8018076:	f8d8 3000 	ldr.w	r3, [r8]
 801807a:	b17b      	cbz	r3, 801809c <rmw_wait+0x184>
 801807c:	2400      	movs	r4, #0
 801807e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018082:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018086:	f7f8 fb77 	bl	8010778 <rmw_uxrce_find_static_input_buffer_by_owner>
 801808a:	2800      	cmp	r0, #0
 801808c:	d051      	beq.n	8018132 <rmw_wait+0x21a>
 801808e:	f8d8 3000 	ldr.w	r3, [r8]
 8018092:	3401      	adds	r4, #1
 8018094:	42a3      	cmp	r3, r4
 8018096:	f04f 0701 	mov.w	r7, #1
 801809a:	d8f0      	bhi.n	801807e <rmw_wait+0x166>
 801809c:	b1dd      	cbz	r5, 80180d6 <rmw_wait+0x1be>
 801809e:	682b      	ldr	r3, [r5, #0]
 80180a0:	b1cb      	cbz	r3, 80180d6 <rmw_wait+0x1be>
 80180a2:	2400      	movs	r4, #0
 80180a4:	686b      	ldr	r3, [r5, #4]
 80180a6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80180aa:	f7f8 fb65 	bl	8010778 <rmw_uxrce_find_static_input_buffer_by_owner>
 80180ae:	b158      	cbz	r0, 80180c8 <rmw_wait+0x1b0>
 80180b0:	682b      	ldr	r3, [r5, #0]
 80180b2:	3401      	adds	r4, #1
 80180b4:	42a3      	cmp	r3, r4
 80180b6:	d969      	bls.n	801818c <rmw_wait+0x274>
 80180b8:	686b      	ldr	r3, [r5, #4]
 80180ba:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80180be:	2701      	movs	r7, #1
 80180c0:	f7f8 fb5a 	bl	8010778 <rmw_uxrce_find_static_input_buffer_by_owner>
 80180c4:	2800      	cmp	r0, #0
 80180c6:	d1f3      	bne.n	80180b0 <rmw_wait+0x198>
 80180c8:	e9d5 3200 	ldrd	r3, r2, [r5]
 80180cc:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80180d0:	3401      	adds	r4, #1
 80180d2:	42a3      	cmp	r3, r4
 80180d4:	d8e6      	bhi.n	80180a4 <rmw_wait+0x18c>
 80180d6:	b1a6      	cbz	r6, 8018102 <rmw_wait+0x1ea>
 80180d8:	6834      	ldr	r4, [r6, #0]
 80180da:	b194      	cbz	r4, 8018102 <rmw_wait+0x1ea>
 80180dc:	2300      	movs	r3, #0
 80180de:	461d      	mov	r5, r3
 80180e0:	e004      	b.n	80180ec <rmw_wait+0x1d4>
 80180e2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80180e6:	3301      	adds	r3, #1
 80180e8:	42a3      	cmp	r3, r4
 80180ea:	d00a      	beq.n	8018102 <rmw_wait+0x1ea>
 80180ec:	6870      	ldr	r0, [r6, #4]
 80180ee:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80180f2:	7c0a      	ldrb	r2, [r1, #16]
 80180f4:	2a00      	cmp	r2, #0
 80180f6:	d0f4      	beq.n	80180e2 <rmw_wait+0x1ca>
 80180f8:	3301      	adds	r3, #1
 80180fa:	42a3      	cmp	r3, r4
 80180fc:	740d      	strb	r5, [r1, #16]
 80180fe:	4617      	mov	r7, r2
 8018100:	d1f4      	bne.n	80180ec <rmw_wait+0x1d4>
 8018102:	2f00      	cmp	r7, #0
 8018104:	d03e      	beq.n	8018184 <rmw_wait+0x26c>
 8018106:	2000      	movs	r0, #0
 8018108:	b009      	add	sp, #36	@ 0x24
 801810a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801810e:	68a0      	ldr	r0, [r4, #8]
 8018110:	2100      	movs	r1, #0
 8018112:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018116:	f7fa fb95 	bl	8012844 <uxr_run_session_timeout>
 801811a:	6864      	ldr	r4, [r4, #4]
 801811c:	2c00      	cmp	r4, #0
 801811e:	d1f6      	bne.n	801810e <rmw_wait+0x1f6>
 8018120:	e78c      	b.n	801803c <rmw_wait+0x124>
 8018122:	e9d9 3200 	ldrd	r3, r2, [r9]
 8018126:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801812a:	3401      	adds	r4, #1
 801812c:	42a3      	cmp	r3, r4
 801812e:	d890      	bhi.n	8018052 <rmw_wait+0x13a>
 8018130:	e79e      	b.n	8018070 <rmw_wait+0x158>
 8018132:	e9d8 3200 	ldrd	r3, r2, [r8]
 8018136:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801813a:	3401      	adds	r4, #1
 801813c:	429c      	cmp	r4, r3
 801813e:	d39e      	bcc.n	801807e <rmw_wait+0x166>
 8018140:	e7ac      	b.n	801809c <rmw_wait+0x184>
 8018142:	2b00      	cmp	r3, #0
 8018144:	f47f aef3 	bne.w	8017f2e <rmw_wait+0x16>
 8018148:	2800      	cmp	r0, #0
 801814a:	f47f aef0 	bne.w	8017f2e <rmw_wait+0x16>
 801814e:	2900      	cmp	r1, #0
 8018150:	f47f aeed 	bne.w	8017f2e <rmw_wait+0x16>
 8018154:	e7d7      	b.n	8018106 <rmw_wait+0x1ee>
 8018156:	4639      	mov	r1, r7
 8018158:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801815c:	f7fa fb8c 	bl	8012878 <uxr_run_session_until_data>
 8018160:	6864      	ldr	r4, [r4, #4]
 8018162:	2c00      	cmp	r4, #0
 8018164:	f47f af5f 	bne.w	8018026 <rmw_wait+0x10e>
 8018168:	e768      	b.n	801803c <rmw_wait+0x124>
 801816a:	f1b8 0f00 	cmp.w	r8, #0
 801816e:	d032      	beq.n	80181d6 <rmw_wait+0x2be>
 8018170:	f8d8 3000 	ldr.w	r3, [r8]
 8018174:	2b00      	cmp	r3, #0
 8018176:	d181      	bne.n	801807c <rmw_wait+0x164>
 8018178:	461f      	mov	r7, r3
 801817a:	2d00      	cmp	r5, #0
 801817c:	d18f      	bne.n	801809e <rmw_wait+0x186>
 801817e:	462f      	mov	r7, r5
 8018180:	2e00      	cmp	r6, #0
 8018182:	d1a9      	bne.n	80180d8 <rmw_wait+0x1c0>
 8018184:	2002      	movs	r0, #2
 8018186:	b009      	add	sp, #36	@ 0x24
 8018188:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801818c:	2e00      	cmp	r6, #0
 801818e:	d0ba      	beq.n	8018106 <rmw_wait+0x1ee>
 8018190:	6834      	ldr	r4, [r6, #0]
 8018192:	2701      	movs	r7, #1
 8018194:	2c00      	cmp	r4, #0
 8018196:	d1a1      	bne.n	80180dc <rmw_wait+0x1c4>
 8018198:	e7b5      	b.n	8018106 <rmw_wait+0x1ee>
 801819a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801819e:	f7ff fac3 	bl	8017728 <rmw_time_total_nsec>
 80181a2:	2300      	movs	r3, #0
 80181a4:	4a13      	ldr	r2, [pc, #76]	@ (80181f4 <rmw_wait+0x2dc>)
 80181a6:	f7e8 fd91 	bl	8000ccc <__aeabi_uldivmod>
 80181aa:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 80181ae:	f171 0300 	sbcs.w	r3, r1, #0
 80181b2:	4607      	mov	r7, r0
 80181b4:	bfa8      	it	ge
 80181b6:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 80181ba:	e6c9      	b.n	8017f50 <rmw_wait+0x38>
 80181bc:	f1b8 0f00 	cmp.w	r8, #0
 80181c0:	d009      	beq.n	80181d6 <rmw_wait+0x2be>
 80181c2:	f8d8 3000 	ldr.w	r3, [r8]
 80181c6:	464f      	mov	r7, r9
 80181c8:	2b00      	cmp	r3, #0
 80181ca:	f47f af57 	bne.w	801807c <rmw_wait+0x164>
 80181ce:	2d00      	cmp	r5, #0
 80181d0:	f47f af65 	bne.w	801809e <rmw_wait+0x186>
 80181d4:	e7d3      	b.n	801817e <rmw_wait+0x266>
 80181d6:	b17d      	cbz	r5, 80181f8 <rmw_wait+0x2e0>
 80181d8:	682b      	ldr	r3, [r5, #0]
 80181da:	4647      	mov	r7, r8
 80181dc:	2b00      	cmp	r3, #0
 80181de:	f47f af60 	bne.w	80180a2 <rmw_wait+0x18a>
 80181e2:	2e00      	cmp	r6, #0
 80181e4:	f47f af78 	bne.w	80180d8 <rmw_wait+0x1c0>
 80181e8:	e7cc      	b.n	8018184 <rmw_wait+0x26c>
 80181ea:	bf00      	nop
 80181ec:	0801b110 	.word	0x0801b110
 80181f0:	2001187c 	.word	0x2001187c
 80181f4:	000f4240 	.word	0x000f4240
 80181f8:	2e00      	cmp	r6, #0
 80181fa:	d0c3      	beq.n	8018184 <rmw_wait+0x26c>
 80181fc:	6834      	ldr	r4, [r6, #0]
 80181fe:	462f      	mov	r7, r5
 8018200:	2c00      	cmp	r4, #0
 8018202:	f47f af6b 	bne.w	80180dc <rmw_wait+0x1c4>
 8018206:	e7bd      	b.n	8018184 <rmw_wait+0x26c>

08018208 <rmw_create_wait_set>:
 8018208:	b508      	push	{r3, lr}
 801820a:	4803      	ldr	r0, [pc, #12]	@ (8018218 <rmw_create_wait_set+0x10>)
 801820c:	f7ff fc1a 	bl	8017a44 <get_memory>
 8018210:	b108      	cbz	r0, 8018216 <rmw_create_wait_set+0xe>
 8018212:	6880      	ldr	r0, [r0, #8]
 8018214:	3010      	adds	r0, #16
 8018216:	bd08      	pop	{r3, pc}
 8018218:	200118bc 	.word	0x200118bc

0801821c <rmw_destroy_wait_set>:
 801821c:	b508      	push	{r3, lr}
 801821e:	4b08      	ldr	r3, [pc, #32]	@ (8018240 <rmw_destroy_wait_set+0x24>)
 8018220:	6819      	ldr	r1, [r3, #0]
 8018222:	b911      	cbnz	r1, 801822a <rmw_destroy_wait_set+0xe>
 8018224:	e00a      	b.n	801823c <rmw_destroy_wait_set+0x20>
 8018226:	6849      	ldr	r1, [r1, #4]
 8018228:	b141      	cbz	r1, 801823c <rmw_destroy_wait_set+0x20>
 801822a:	688b      	ldr	r3, [r1, #8]
 801822c:	3310      	adds	r3, #16
 801822e:	4298      	cmp	r0, r3
 8018230:	d1f9      	bne.n	8018226 <rmw_destroy_wait_set+0xa>
 8018232:	4803      	ldr	r0, [pc, #12]	@ (8018240 <rmw_destroy_wait_set+0x24>)
 8018234:	f7ff fc16 	bl	8017a64 <put_memory>
 8018238:	2000      	movs	r0, #0
 801823a:	bd08      	pop	{r3, pc}
 801823c:	2001      	movs	r0, #1
 801823e:	bd08      	pop	{r3, pc}
 8018240:	200118bc 	.word	0x200118bc

08018244 <rmw_uros_epoch_nanos>:
 8018244:	4b05      	ldr	r3, [pc, #20]	@ (801825c <rmw_uros_epoch_nanos+0x18>)
 8018246:	681b      	ldr	r3, [r3, #0]
 8018248:	b123      	cbz	r3, 8018254 <rmw_uros_epoch_nanos+0x10>
 801824a:	6898      	ldr	r0, [r3, #8]
 801824c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018250:	f7f9 bf68 	b.w	8012124 <uxr_epoch_nanos>
 8018254:	2000      	movs	r0, #0
 8018256:	2100      	movs	r1, #0
 8018258:	4770      	bx	lr
 801825a:	bf00      	nop
 801825c:	2001187c 	.word	0x2001187c

08018260 <rosidl_runtime_c__String__init>:
 8018260:	b510      	push	{r4, lr}
 8018262:	4604      	mov	r4, r0
 8018264:	b086      	sub	sp, #24
 8018266:	b170      	cbz	r0, 8018286 <rosidl_runtime_c__String__init+0x26>
 8018268:	a801      	add	r0, sp, #4
 801826a:	f7f6 fc77 	bl	800eb5c <rcutils_get_default_allocator>
 801826e:	9b01      	ldr	r3, [sp, #4]
 8018270:	9905      	ldr	r1, [sp, #20]
 8018272:	2001      	movs	r0, #1
 8018274:	4798      	blx	r3
 8018276:	6020      	str	r0, [r4, #0]
 8018278:	b128      	cbz	r0, 8018286 <rosidl_runtime_c__String__init+0x26>
 801827a:	2100      	movs	r1, #0
 801827c:	2201      	movs	r2, #1
 801827e:	7001      	strb	r1, [r0, #0]
 8018280:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8018284:	4610      	mov	r0, r2
 8018286:	b006      	add	sp, #24
 8018288:	bd10      	pop	{r4, pc}
 801828a:	bf00      	nop

0801828c <rosidl_runtime_c__String__fini>:
 801828c:	b320      	cbz	r0, 80182d8 <rosidl_runtime_c__String__fini+0x4c>
 801828e:	b510      	push	{r4, lr}
 8018290:	6803      	ldr	r3, [r0, #0]
 8018292:	b086      	sub	sp, #24
 8018294:	4604      	mov	r4, r0
 8018296:	b173      	cbz	r3, 80182b6 <rosidl_runtime_c__String__fini+0x2a>
 8018298:	6883      	ldr	r3, [r0, #8]
 801829a:	b1f3      	cbz	r3, 80182da <rosidl_runtime_c__String__fini+0x4e>
 801829c:	a801      	add	r0, sp, #4
 801829e:	f7f6 fc5d 	bl	800eb5c <rcutils_get_default_allocator>
 80182a2:	9b02      	ldr	r3, [sp, #8]
 80182a4:	9905      	ldr	r1, [sp, #20]
 80182a6:	6820      	ldr	r0, [r4, #0]
 80182a8:	4798      	blx	r3
 80182aa:	2300      	movs	r3, #0
 80182ac:	e9c4 3300 	strd	r3, r3, [r4]
 80182b0:	60a3      	str	r3, [r4, #8]
 80182b2:	b006      	add	sp, #24
 80182b4:	bd10      	pop	{r4, pc}
 80182b6:	6843      	ldr	r3, [r0, #4]
 80182b8:	b9db      	cbnz	r3, 80182f2 <rosidl_runtime_c__String__fini+0x66>
 80182ba:	6883      	ldr	r3, [r0, #8]
 80182bc:	2b00      	cmp	r3, #0
 80182be:	d0f8      	beq.n	80182b2 <rosidl_runtime_c__String__fini+0x26>
 80182c0:	4b12      	ldr	r3, [pc, #72]	@ (801830c <rosidl_runtime_c__String__fini+0x80>)
 80182c2:	4813      	ldr	r0, [pc, #76]	@ (8018310 <rosidl_runtime_c__String__fini+0x84>)
 80182c4:	681b      	ldr	r3, [r3, #0]
 80182c6:	2251      	movs	r2, #81	@ 0x51
 80182c8:	68db      	ldr	r3, [r3, #12]
 80182ca:	2101      	movs	r1, #1
 80182cc:	f001 fe1e 	bl	8019f0c <fwrite>
 80182d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80182d4:	f001 fada 	bl	801988c <exit>
 80182d8:	4770      	bx	lr
 80182da:	4b0c      	ldr	r3, [pc, #48]	@ (801830c <rosidl_runtime_c__String__fini+0x80>)
 80182dc:	480d      	ldr	r0, [pc, #52]	@ (8018314 <rosidl_runtime_c__String__fini+0x88>)
 80182de:	681b      	ldr	r3, [r3, #0]
 80182e0:	224c      	movs	r2, #76	@ 0x4c
 80182e2:	68db      	ldr	r3, [r3, #12]
 80182e4:	2101      	movs	r1, #1
 80182e6:	f001 fe11 	bl	8019f0c <fwrite>
 80182ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80182ee:	f001 facd 	bl	801988c <exit>
 80182f2:	4b06      	ldr	r3, [pc, #24]	@ (801830c <rosidl_runtime_c__String__fini+0x80>)
 80182f4:	4808      	ldr	r0, [pc, #32]	@ (8018318 <rosidl_runtime_c__String__fini+0x8c>)
 80182f6:	681b      	ldr	r3, [r3, #0]
 80182f8:	224e      	movs	r2, #78	@ 0x4e
 80182fa:	68db      	ldr	r3, [r3, #12]
 80182fc:	2101      	movs	r1, #1
 80182fe:	f001 fe05 	bl	8019f0c <fwrite>
 8018302:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018306:	f001 fac1 	bl	801988c <exit>
 801830a:	bf00      	nop
 801830c:	20000928 	.word	0x20000928
 8018310:	0801b990 	.word	0x0801b990
 8018314:	0801b8f0 	.word	0x0801b8f0
 8018318:	0801b940 	.word	0x0801b940

0801831c <std_msgs__msg__Header__init>:
 801831c:	b570      	push	{r4, r5, r6, lr}
 801831e:	4605      	mov	r5, r0
 8018320:	b1a8      	cbz	r0, 801834e <std_msgs__msg__Header__init+0x32>
 8018322:	f000 f831 	bl	8018388 <builtin_interfaces__msg__Time__init>
 8018326:	4604      	mov	r4, r0
 8018328:	b140      	cbz	r0, 801833c <std_msgs__msg__Header__init+0x20>
 801832a:	f105 0608 	add.w	r6, r5, #8
 801832e:	4630      	mov	r0, r6
 8018330:	f7ff ff96 	bl	8018260 <rosidl_runtime_c__String__init>
 8018334:	4604      	mov	r4, r0
 8018336:	b168      	cbz	r0, 8018354 <std_msgs__msg__Header__init+0x38>
 8018338:	4620      	mov	r0, r4
 801833a:	bd70      	pop	{r4, r5, r6, pc}
 801833c:	4628      	mov	r0, r5
 801833e:	f000 f827 	bl	8018390 <builtin_interfaces__msg__Time__fini>
 8018342:	f105 0008 	add.w	r0, r5, #8
 8018346:	f7ff ffa1 	bl	801828c <rosidl_runtime_c__String__fini>
 801834a:	4620      	mov	r0, r4
 801834c:	bd70      	pop	{r4, r5, r6, pc}
 801834e:	4604      	mov	r4, r0
 8018350:	4620      	mov	r0, r4
 8018352:	bd70      	pop	{r4, r5, r6, pc}
 8018354:	4628      	mov	r0, r5
 8018356:	f000 f81b 	bl	8018390 <builtin_interfaces__msg__Time__fini>
 801835a:	4630      	mov	r0, r6
 801835c:	f7ff ff96 	bl	801828c <rosidl_runtime_c__String__fini>
 8018360:	e7ea      	b.n	8018338 <std_msgs__msg__Header__init+0x1c>
 8018362:	bf00      	nop

08018364 <std_msgs__msg__Header__fini>:
 8018364:	b148      	cbz	r0, 801837a <std_msgs__msg__Header__fini+0x16>
 8018366:	b510      	push	{r4, lr}
 8018368:	4604      	mov	r4, r0
 801836a:	f000 f811 	bl	8018390 <builtin_interfaces__msg__Time__fini>
 801836e:	f104 0008 	add.w	r0, r4, #8
 8018372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018376:	f7ff bf89 	b.w	801828c <rosidl_runtime_c__String__fini>
 801837a:	4770      	bx	lr

0801837c <std_msgs__msg__Int32__init>:
 801837c:	3800      	subs	r0, #0
 801837e:	bf18      	it	ne
 8018380:	2001      	movne	r0, #1
 8018382:	4770      	bx	lr

08018384 <std_msgs__msg__Int32__fini>:
 8018384:	4770      	bx	lr
 8018386:	bf00      	nop

08018388 <builtin_interfaces__msg__Time__init>:
 8018388:	3800      	subs	r0, #0
 801838a:	bf18      	it	ne
 801838c:	2001      	movne	r0, #1
 801838e:	4770      	bx	lr

08018390 <builtin_interfaces__msg__Time__fini>:
 8018390:	4770      	bx	lr
 8018392:	bf00      	nop

08018394 <geometry_msgs__msg__PoseWithCovariance__init>:
 8018394:	b538      	push	{r3, r4, r5, lr}
 8018396:	4604      	mov	r4, r0
 8018398:	b128      	cbz	r0, 80183a6 <geometry_msgs__msg__PoseWithCovariance__init+0x12>
 801839a:	f001 f96b 	bl	8019674 <geometry_msgs__msg__Pose__init>
 801839e:	4605      	mov	r5, r0
 80183a0:	b120      	cbz	r0, 80183ac <geometry_msgs__msg__PoseWithCovariance__init+0x18>
 80183a2:	4628      	mov	r0, r5
 80183a4:	bd38      	pop	{r3, r4, r5, pc}
 80183a6:	4605      	mov	r5, r0
 80183a8:	4628      	mov	r0, r5
 80183aa:	bd38      	pop	{r3, r4, r5, pc}
 80183ac:	4620      	mov	r0, r4
 80183ae:	f001 f985 	bl	80196bc <geometry_msgs__msg__Pose__fini>
 80183b2:	4628      	mov	r0, r5
 80183b4:	bd38      	pop	{r3, r4, r5, pc}
 80183b6:	bf00      	nop

080183b8 <geometry_msgs__msg__PoseWithCovariance__fini>:
 80183b8:	b108      	cbz	r0, 80183be <geometry_msgs__msg__PoseWithCovariance__fini+0x6>
 80183ba:	f001 b97f 	b.w	80196bc <geometry_msgs__msg__Pose__fini>
 80183be:	4770      	bx	lr

080183c0 <geometry_msgs__msg__TwistWithCovariance__init>:
 80183c0:	b538      	push	{r3, r4, r5, lr}
 80183c2:	4604      	mov	r4, r0
 80183c4:	b128      	cbz	r0, 80183d2 <geometry_msgs__msg__TwistWithCovariance__init+0x12>
 80183c6:	f7f8 fcc5 	bl	8010d54 <geometry_msgs__msg__Twist__init>
 80183ca:	4605      	mov	r5, r0
 80183cc:	b120      	cbz	r0, 80183d8 <geometry_msgs__msg__TwistWithCovariance__init+0x18>
 80183ce:	4628      	mov	r0, r5
 80183d0:	bd38      	pop	{r3, r4, r5, pc}
 80183d2:	4605      	mov	r5, r0
 80183d4:	4628      	mov	r0, r5
 80183d6:	bd38      	pop	{r3, r4, r5, pc}
 80183d8:	4620      	mov	r0, r4
 80183da:	f7f8 fcdf 	bl	8010d9c <geometry_msgs__msg__Twist__fini>
 80183de:	4628      	mov	r0, r5
 80183e0:	bd38      	pop	{r3, r4, r5, pc}
 80183e2:	bf00      	nop

080183e4 <geometry_msgs__msg__TwistWithCovariance__fini>:
 80183e4:	b108      	cbz	r0, 80183ea <geometry_msgs__msg__TwistWithCovariance__fini+0x6>
 80183e6:	f7f8 bcd9 	b.w	8010d9c <geometry_msgs__msg__Twist__fini>
 80183ea:	4770      	bx	lr

080183ec <geometry_msgs__msg__Pose__rosidl_typesupport_introspection_c__Pose_init_function>:
 80183ec:	f001 b942 	b.w	8019674 <geometry_msgs__msg__Pose__init>

080183f0 <geometry_msgs__msg__Pose__rosidl_typesupport_introspection_c__Pose_fini_function>:
 80183f0:	f001 b964 	b.w	80196bc <geometry_msgs__msg__Pose__fini>

080183f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose>:
 80183f4:	b510      	push	{r4, lr}
 80183f6:	f001 f989 	bl	801970c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 80183fa:	4c07      	ldr	r4, [pc, #28]	@ (8018418 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x24>)
 80183fc:	60e0      	str	r0, [r4, #12]
 80183fe:	f000 f815 	bl	801842c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8018402:	4b06      	ldr	r3, [pc, #24]	@ (801841c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x28>)
 8018404:	64a0      	str	r0, [r4, #72]	@ 0x48
 8018406:	681a      	ldr	r2, [r3, #0]
 8018408:	b10a      	cbz	r2, 801840e <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x1a>
 801840a:	4804      	ldr	r0, [pc, #16]	@ (801841c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x28>)
 801840c:	bd10      	pop	{r4, pc}
 801840e:	4a04      	ldr	r2, [pc, #16]	@ (8018420 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x2c>)
 8018410:	4802      	ldr	r0, [pc, #8]	@ (801841c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x28>)
 8018412:	6812      	ldr	r2, [r2, #0]
 8018414:	601a      	str	r2, [r3, #0]
 8018416:	bd10      	pop	{r4, pc}
 8018418:	20000664 	.word	0x20000664
 801841c:	200006dc 	.word	0x200006dc
 8018420:	2000032c 	.word	0x2000032c

08018424 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 8018424:	f001 b958 	b.w	80196d8 <geometry_msgs__msg__Quaternion__init>

08018428 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 8018428:	f001 b96a 	b.w	8019700 <geometry_msgs__msg__Quaternion__fini>

0801842c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 801842c:	4b04      	ldr	r3, [pc, #16]	@ (8018440 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 801842e:	681a      	ldr	r2, [r3, #0]
 8018430:	b10a      	cbz	r2, 8018436 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 8018432:	4803      	ldr	r0, [pc, #12]	@ (8018440 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8018434:	4770      	bx	lr
 8018436:	4a03      	ldr	r2, [pc, #12]	@ (8018444 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 8018438:	4801      	ldr	r0, [pc, #4]	@ (8018440 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 801843a:	6812      	ldr	r2, [r2, #0]
 801843c:	601a      	str	r2, [r3, #0]
 801843e:	4770      	bx	lr
 8018440:	200007d8 	.word	0x200007d8
 8018444:	2000032c 	.word	0x2000032c

08018448 <get_serialized_size_geometry_msgs__msg__Pose>:
 8018448:	b570      	push	{r4, r5, r6, lr}
 801844a:	4604      	mov	r4, r0
 801844c:	b148      	cbz	r0, 8018462 <get_serialized_size_geometry_msgs__msg__Pose+0x1a>
 801844e:	460d      	mov	r5, r1
 8018450:	f001 f96a 	bl	8019728 <get_serialized_size_geometry_msgs__msg__Point>
 8018454:	4606      	mov	r6, r0
 8018456:	1829      	adds	r1, r5, r0
 8018458:	f104 0018 	add.w	r0, r4, #24
 801845c:	f000 f868 	bl	8018530 <get_serialized_size_geometry_msgs__msg__Quaternion>
 8018460:	4430      	add	r0, r6
 8018462:	bd70      	pop	{r4, r5, r6, pc}

08018464 <_Pose__cdr_deserialize>:
 8018464:	b570      	push	{r4, r5, r6, lr}
 8018466:	460c      	mov	r4, r1
 8018468:	b189      	cbz	r1, 801848e <_Pose__cdr_deserialize+0x2a>
 801846a:	4605      	mov	r5, r0
 801846c:	f001 f9e8 	bl	8019840 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 8018470:	6843      	ldr	r3, [r0, #4]
 8018472:	4621      	mov	r1, r4
 8018474:	68db      	ldr	r3, [r3, #12]
 8018476:	4628      	mov	r0, r5
 8018478:	4798      	blx	r3
 801847a:	f000 f90d 	bl	8018698 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 801847e:	6843      	ldr	r3, [r0, #4]
 8018480:	f104 0118 	add.w	r1, r4, #24
 8018484:	4628      	mov	r0, r5
 8018486:	68db      	ldr	r3, [r3, #12]
 8018488:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801848c:	4718      	bx	r3
 801848e:	4608      	mov	r0, r1
 8018490:	bd70      	pop	{r4, r5, r6, pc}
 8018492:	bf00      	nop

08018494 <_Pose__cdr_serialize>:
 8018494:	b510      	push	{r4, lr}
 8018496:	b082      	sub	sp, #8
 8018498:	9101      	str	r1, [sp, #4]
 801849a:	b190      	cbz	r0, 80184c2 <_Pose__cdr_serialize+0x2e>
 801849c:	4604      	mov	r4, r0
 801849e:	f001 f9cf 	bl	8019840 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 80184a2:	6843      	ldr	r3, [r0, #4]
 80184a4:	9901      	ldr	r1, [sp, #4]
 80184a6:	689b      	ldr	r3, [r3, #8]
 80184a8:	4620      	mov	r0, r4
 80184aa:	4798      	blx	r3
 80184ac:	f000 f8f4 	bl	8018698 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 80184b0:	6843      	ldr	r3, [r0, #4]
 80184b2:	9901      	ldr	r1, [sp, #4]
 80184b4:	689b      	ldr	r3, [r3, #8]
 80184b6:	f104 0018 	add.w	r0, r4, #24
 80184ba:	b002      	add	sp, #8
 80184bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80184c0:	4718      	bx	r3
 80184c2:	b002      	add	sp, #8
 80184c4:	bd10      	pop	{r4, pc}
 80184c6:	bf00      	nop

080184c8 <_Pose__get_serialized_size>:
 80184c8:	b538      	push	{r3, r4, r5, lr}
 80184ca:	4604      	mov	r4, r0
 80184cc:	b148      	cbz	r0, 80184e2 <_Pose__get_serialized_size+0x1a>
 80184ce:	2100      	movs	r1, #0
 80184d0:	f001 f92a 	bl	8019728 <get_serialized_size_geometry_msgs__msg__Point>
 80184d4:	4605      	mov	r5, r0
 80184d6:	4601      	mov	r1, r0
 80184d8:	f104 0018 	add.w	r0, r4, #24
 80184dc:	f000 f828 	bl	8018530 <get_serialized_size_geometry_msgs__msg__Quaternion>
 80184e0:	4428      	add	r0, r5
 80184e2:	bd38      	pop	{r3, r4, r5, pc}

080184e4 <_Pose__max_serialized_size>:
 80184e4:	b510      	push	{r4, lr}
 80184e6:	b082      	sub	sp, #8
 80184e8:	2301      	movs	r3, #1
 80184ea:	2100      	movs	r1, #0
 80184ec:	f10d 0007 	add.w	r0, sp, #7
 80184f0:	f88d 3007 	strb.w	r3, [sp, #7]
 80184f4:	f001 f988 	bl	8019808 <max_serialized_size_geometry_msgs__msg__Point>
 80184f8:	4604      	mov	r4, r0
 80184fa:	4601      	mov	r1, r0
 80184fc:	f10d 0007 	add.w	r0, sp, #7
 8018500:	f000 f8a8 	bl	8018654 <max_serialized_size_geometry_msgs__msg__Quaternion>
 8018504:	4420      	add	r0, r4
 8018506:	b002      	add	sp, #8
 8018508:	bd10      	pop	{r4, pc}
 801850a:	bf00      	nop

0801850c <max_serialized_size_geometry_msgs__msg__Pose>:
 801850c:	2301      	movs	r3, #1
 801850e:	b570      	push	{r4, r5, r6, lr}
 8018510:	7003      	strb	r3, [r0, #0]
 8018512:	4605      	mov	r5, r0
 8018514:	460e      	mov	r6, r1
 8018516:	f001 f977 	bl	8019808 <max_serialized_size_geometry_msgs__msg__Point>
 801851a:	4604      	mov	r4, r0
 801851c:	1831      	adds	r1, r6, r0
 801851e:	4628      	mov	r0, r5
 8018520:	f000 f898 	bl	8018654 <max_serialized_size_geometry_msgs__msg__Quaternion>
 8018524:	4420      	add	r0, r4
 8018526:	bd70      	pop	{r4, r5, r6, pc}

08018528 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>:
 8018528:	4800      	ldr	r0, [pc, #0]	@ (801852c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x4>)
 801852a:	4770      	bx	lr
 801852c:	200007e4 	.word	0x200007e4

08018530 <get_serialized_size_geometry_msgs__msg__Quaternion>:
 8018530:	b1f0      	cbz	r0, 8018570 <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 8018532:	b570      	push	{r4, r5, r6, lr}
 8018534:	460d      	mov	r5, r1
 8018536:	4628      	mov	r0, r5
 8018538:	2108      	movs	r1, #8
 801853a:	f7f4 f913 	bl	800c764 <ucdr_alignment>
 801853e:	f105 0308 	add.w	r3, r5, #8
 8018542:	181e      	adds	r6, r3, r0
 8018544:	2108      	movs	r1, #8
 8018546:	4630      	mov	r0, r6
 8018548:	f7f4 f90c 	bl	800c764 <ucdr_alignment>
 801854c:	f100 0408 	add.w	r4, r0, #8
 8018550:	4434      	add	r4, r6
 8018552:	2108      	movs	r1, #8
 8018554:	4620      	mov	r0, r4
 8018556:	f7f4 f905 	bl	800c764 <ucdr_alignment>
 801855a:	3008      	adds	r0, #8
 801855c:	4404      	add	r4, r0
 801855e:	2108      	movs	r1, #8
 8018560:	4620      	mov	r0, r4
 8018562:	f7f4 f8ff 	bl	800c764 <ucdr_alignment>
 8018566:	f1c5 0508 	rsb	r5, r5, #8
 801856a:	4428      	add	r0, r5
 801856c:	4420      	add	r0, r4
 801856e:	bd70      	pop	{r4, r5, r6, pc}
 8018570:	4770      	bx	lr
 8018572:	bf00      	nop

08018574 <_Quaternion__cdr_deserialize>:
 8018574:	b538      	push	{r3, r4, r5, lr}
 8018576:	460c      	mov	r4, r1
 8018578:	b199      	cbz	r1, 80185a2 <_Quaternion__cdr_deserialize+0x2e>
 801857a:	4605      	mov	r5, r0
 801857c:	f7f3 ff06 	bl	800c38c <ucdr_deserialize_double>
 8018580:	f104 0108 	add.w	r1, r4, #8
 8018584:	4628      	mov	r0, r5
 8018586:	f7f3 ff01 	bl	800c38c <ucdr_deserialize_double>
 801858a:	f104 0110 	add.w	r1, r4, #16
 801858e:	4628      	mov	r0, r5
 8018590:	f7f3 fefc 	bl	800c38c <ucdr_deserialize_double>
 8018594:	f104 0118 	add.w	r1, r4, #24
 8018598:	4628      	mov	r0, r5
 801859a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801859e:	f7f3 bef5 	b.w	800c38c <ucdr_deserialize_double>
 80185a2:	4608      	mov	r0, r1
 80185a4:	bd38      	pop	{r3, r4, r5, pc}
 80185a6:	bf00      	nop

080185a8 <_Quaternion__cdr_serialize>:
 80185a8:	b1c0      	cbz	r0, 80185dc <_Quaternion__cdr_serialize+0x34>
 80185aa:	b538      	push	{r3, r4, r5, lr}
 80185ac:	ed90 0b00 	vldr	d0, [r0]
 80185b0:	460d      	mov	r5, r1
 80185b2:	4604      	mov	r4, r0
 80185b4:	4608      	mov	r0, r1
 80185b6:	f7f3 fd47 	bl	800c048 <ucdr_serialize_double>
 80185ba:	ed94 0b02 	vldr	d0, [r4, #8]
 80185be:	4628      	mov	r0, r5
 80185c0:	f7f3 fd42 	bl	800c048 <ucdr_serialize_double>
 80185c4:	ed94 0b04 	vldr	d0, [r4, #16]
 80185c8:	4628      	mov	r0, r5
 80185ca:	f7f3 fd3d 	bl	800c048 <ucdr_serialize_double>
 80185ce:	ed94 0b06 	vldr	d0, [r4, #24]
 80185d2:	4628      	mov	r0, r5
 80185d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80185d8:	f7f3 bd36 	b.w	800c048 <ucdr_serialize_double>
 80185dc:	4770      	bx	lr
 80185de:	bf00      	nop

080185e0 <_Quaternion__get_serialized_size>:
 80185e0:	b1d0      	cbz	r0, 8018618 <_Quaternion__get_serialized_size+0x38>
 80185e2:	b538      	push	{r3, r4, r5, lr}
 80185e4:	2108      	movs	r1, #8
 80185e6:	2000      	movs	r0, #0
 80185e8:	f7f4 f8bc 	bl	800c764 <ucdr_alignment>
 80185ec:	f100 0508 	add.w	r5, r0, #8
 80185f0:	2108      	movs	r1, #8
 80185f2:	4628      	mov	r0, r5
 80185f4:	f7f4 f8b6 	bl	800c764 <ucdr_alignment>
 80185f8:	f100 0408 	add.w	r4, r0, #8
 80185fc:	442c      	add	r4, r5
 80185fe:	2108      	movs	r1, #8
 8018600:	4620      	mov	r0, r4
 8018602:	f7f4 f8af 	bl	800c764 <ucdr_alignment>
 8018606:	3008      	adds	r0, #8
 8018608:	4404      	add	r4, r0
 801860a:	2108      	movs	r1, #8
 801860c:	4620      	mov	r0, r4
 801860e:	f7f4 f8a9 	bl	800c764 <ucdr_alignment>
 8018612:	3008      	adds	r0, #8
 8018614:	4420      	add	r0, r4
 8018616:	bd38      	pop	{r3, r4, r5, pc}
 8018618:	4770      	bx	lr
 801861a:	bf00      	nop

0801861c <_Quaternion__max_serialized_size>:
 801861c:	b538      	push	{r3, r4, r5, lr}
 801861e:	2108      	movs	r1, #8
 8018620:	2000      	movs	r0, #0
 8018622:	f7f4 f89f 	bl	800c764 <ucdr_alignment>
 8018626:	f100 0508 	add.w	r5, r0, #8
 801862a:	2108      	movs	r1, #8
 801862c:	4628      	mov	r0, r5
 801862e:	f7f4 f899 	bl	800c764 <ucdr_alignment>
 8018632:	f100 0408 	add.w	r4, r0, #8
 8018636:	442c      	add	r4, r5
 8018638:	2108      	movs	r1, #8
 801863a:	4620      	mov	r0, r4
 801863c:	f7f4 f892 	bl	800c764 <ucdr_alignment>
 8018640:	3008      	adds	r0, #8
 8018642:	4404      	add	r4, r0
 8018644:	2108      	movs	r1, #8
 8018646:	4620      	mov	r0, r4
 8018648:	f7f4 f88c 	bl	800c764 <ucdr_alignment>
 801864c:	3008      	adds	r0, #8
 801864e:	4420      	add	r0, r4
 8018650:	bd38      	pop	{r3, r4, r5, pc}
 8018652:	bf00      	nop

08018654 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 8018654:	b570      	push	{r4, r5, r6, lr}
 8018656:	2301      	movs	r3, #1
 8018658:	460c      	mov	r4, r1
 801865a:	7003      	strb	r3, [r0, #0]
 801865c:	2108      	movs	r1, #8
 801865e:	4620      	mov	r0, r4
 8018660:	f7f4 f880 	bl	800c764 <ucdr_alignment>
 8018664:	f104 0508 	add.w	r5, r4, #8
 8018668:	1946      	adds	r6, r0, r5
 801866a:	2108      	movs	r1, #8
 801866c:	4630      	mov	r0, r6
 801866e:	f7f4 f879 	bl	800c764 <ucdr_alignment>
 8018672:	f100 0508 	add.w	r5, r0, #8
 8018676:	4435      	add	r5, r6
 8018678:	2108      	movs	r1, #8
 801867a:	4628      	mov	r0, r5
 801867c:	f7f4 f872 	bl	800c764 <ucdr_alignment>
 8018680:	3008      	adds	r0, #8
 8018682:	4405      	add	r5, r0
 8018684:	2108      	movs	r1, #8
 8018686:	4628      	mov	r0, r5
 8018688:	f7f4 f86c 	bl	800c764 <ucdr_alignment>
 801868c:	f1c4 0408 	rsb	r4, r4, #8
 8018690:	4420      	add	r0, r4
 8018692:	4428      	add	r0, r5
 8018694:	bd70      	pop	{r4, r5, r6, pc}
 8018696:	bf00      	nop

08018698 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 8018698:	4800      	ldr	r0, [pc, #0]	@ (801869c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 801869a:	4770      	bx	lr
 801869c:	2000080c 	.word	0x2000080c

080186a0 <ucdr_serialize_string>:
 80186a0:	b510      	push	{r4, lr}
 80186a2:	b082      	sub	sp, #8
 80186a4:	4604      	mov	r4, r0
 80186a6:	4608      	mov	r0, r1
 80186a8:	9101      	str	r1, [sp, #4]
 80186aa:	f7e7 fdbb 	bl	8000224 <strlen>
 80186ae:	9901      	ldr	r1, [sp, #4]
 80186b0:	1c42      	adds	r2, r0, #1
 80186b2:	4620      	mov	r0, r4
 80186b4:	b002      	add	sp, #8
 80186b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80186ba:	f7f8 be9f 	b.w	80113fc <ucdr_serialize_sequence_char>
 80186be:	bf00      	nop

080186c0 <ucdr_deserialize_string>:
 80186c0:	b500      	push	{lr}
 80186c2:	b083      	sub	sp, #12
 80186c4:	ab01      	add	r3, sp, #4
 80186c6:	f7f8 feab 	bl	8011420 <ucdr_deserialize_sequence_char>
 80186ca:	b003      	add	sp, #12
 80186cc:	f85d fb04 	ldr.w	pc, [sp], #4

080186d0 <uxr_init_input_best_effort_stream>:
 80186d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80186d4:	8003      	strh	r3, [r0, #0]
 80186d6:	4770      	bx	lr

080186d8 <uxr_reset_input_best_effort_stream>:
 80186d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80186dc:	8003      	strh	r3, [r0, #0]
 80186de:	4770      	bx	lr

080186e0 <uxr_receive_best_effort_message>:
 80186e0:	b538      	push	{r3, r4, r5, lr}
 80186e2:	4604      	mov	r4, r0
 80186e4:	8800      	ldrh	r0, [r0, #0]
 80186e6:	460d      	mov	r5, r1
 80186e8:	f000 fd42 	bl	8019170 <uxr_seq_num_cmp>
 80186ec:	4603      	mov	r3, r0
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 80186f4:	bfb8      	it	lt
 80186f6:	8025      	strhlt	r5, [r4, #0]
 80186f8:	bd38      	pop	{r3, r4, r5, pc}
 80186fa:	bf00      	nop

080186fc <on_full_input_buffer>:
 80186fc:	b570      	push	{r4, r5, r6, lr}
 80186fe:	4605      	mov	r5, r0
 8018700:	460c      	mov	r4, r1
 8018702:	682b      	ldr	r3, [r5, #0]
 8018704:	6809      	ldr	r1, [r1, #0]
 8018706:	8920      	ldrh	r0, [r4, #8]
 8018708:	6862      	ldr	r2, [r4, #4]
 801870a:	fbb2 f2f0 	udiv	r2, r2, r0
 801870e:	eba3 0c01 	sub.w	ip, r3, r1
 8018712:	fbbc fcf2 	udiv	ip, ip, r2
 8018716:	f10c 0c01 	add.w	ip, ip, #1
 801871a:	fa1f f38c 	uxth.w	r3, ip
 801871e:	fbb3 f6f0 	udiv	r6, r3, r0
 8018722:	fb00 3316 	mls	r3, r0, r6, r3
 8018726:	b29b      	uxth	r3, r3
 8018728:	fb02 f303 	mul.w	r3, r2, r3
 801872c:	1d18      	adds	r0, r3, #4
 801872e:	4408      	add	r0, r1
 8018730:	7d26      	ldrb	r6, [r4, #20]
 8018732:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8018736:	b116      	cbz	r6, 801873e <on_full_input_buffer+0x42>
 8018738:	2600      	movs	r6, #0
 801873a:	f840 6c04 	str.w	r6, [r0, #-4]
 801873e:	2a03      	cmp	r2, #3
 8018740:	d801      	bhi.n	8018746 <on_full_input_buffer+0x4a>
 8018742:	2001      	movs	r0, #1
 8018744:	bd70      	pop	{r4, r5, r6, pc}
 8018746:	3308      	adds	r3, #8
 8018748:	4419      	add	r1, r3
 801874a:	4628      	mov	r0, r5
 801874c:	692b      	ldr	r3, [r5, #16]
 801874e:	3a04      	subs	r2, #4
 8018750:	f7f3 fffc 	bl	800c74c <ucdr_init_buffer_origin>
 8018754:	4628      	mov	r0, r5
 8018756:	4903      	ldr	r1, [pc, #12]	@ (8018764 <on_full_input_buffer+0x68>)
 8018758:	4622      	mov	r2, r4
 801875a:	f7f3 ffd3 	bl	800c704 <ucdr_set_on_full_buffer_callback>
 801875e:	2000      	movs	r0, #0
 8018760:	bd70      	pop	{r4, r5, r6, pc}
 8018762:	bf00      	nop
 8018764:	080186fd 	.word	0x080186fd

08018768 <uxr_init_input_reliable_stream>:
 8018768:	b500      	push	{lr}
 801876a:	e9c0 1200 	strd	r1, r2, [r0]
 801876e:	f04f 0e00 	mov.w	lr, #0
 8018772:	9a01      	ldr	r2, [sp, #4]
 8018774:	8103      	strh	r3, [r0, #8]
 8018776:	6102      	str	r2, [r0, #16]
 8018778:	f880 e014 	strb.w	lr, [r0, #20]
 801877c:	b1d3      	cbz	r3, 80187b4 <uxr_init_input_reliable_stream+0x4c>
 801877e:	f8c1 e000 	str.w	lr, [r1]
 8018782:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8018786:	f1bc 0f01 	cmp.w	ip, #1
 801878a:	d913      	bls.n	80187b4 <uxr_init_input_reliable_stream+0x4c>
 801878c:	2301      	movs	r3, #1
 801878e:	fbb3 f1fc 	udiv	r1, r3, ip
 8018792:	fb0c 3111 	mls	r1, ip, r1, r3
 8018796:	b289      	uxth	r1, r1
 8018798:	6842      	ldr	r2, [r0, #4]
 801879a:	fbb2 f2fc 	udiv	r2, r2, ip
 801879e:	fb01 f202 	mul.w	r2, r1, r2
 80187a2:	6801      	ldr	r1, [r0, #0]
 80187a4:	f841 e002 	str.w	lr, [r1, r2]
 80187a8:	3301      	adds	r3, #1
 80187aa:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80187ae:	b29b      	uxth	r3, r3
 80187b0:	459c      	cmp	ip, r3
 80187b2:	d8ec      	bhi.n	801878e <uxr_init_input_reliable_stream+0x26>
 80187b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80187b8:	60c3      	str	r3, [r0, #12]
 80187ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80187be:	bf00      	nop

080187c0 <uxr_reset_input_reliable_stream>:
 80187c0:	8901      	ldrh	r1, [r0, #8]
 80187c2:	b1e9      	cbz	r1, 8018800 <uxr_reset_input_reliable_stream+0x40>
 80187c4:	f04f 0c00 	mov.w	ip, #0
 80187c8:	b500      	push	{lr}
 80187ca:	4663      	mov	r3, ip
 80187cc:	46e6      	mov	lr, ip
 80187ce:	fbb3 f2f1 	udiv	r2, r3, r1
 80187d2:	fb01 3312 	mls	r3, r1, r2, r3
 80187d6:	b29b      	uxth	r3, r3
 80187d8:	6842      	ldr	r2, [r0, #4]
 80187da:	fbb2 f2f1 	udiv	r2, r2, r1
 80187de:	fb02 f303 	mul.w	r3, r2, r3
 80187e2:	6802      	ldr	r2, [r0, #0]
 80187e4:	f842 e003 	str.w	lr, [r2, r3]
 80187e8:	f10c 0c01 	add.w	ip, ip, #1
 80187ec:	8901      	ldrh	r1, [r0, #8]
 80187ee:	fa1f f38c 	uxth.w	r3, ip
 80187f2:	4299      	cmp	r1, r3
 80187f4:	d8eb      	bhi.n	80187ce <uxr_reset_input_reliable_stream+0xe>
 80187f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80187fa:	60c3      	str	r3, [r0, #12]
 80187fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8018800:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018804:	60c3      	str	r3, [r0, #12]
 8018806:	4770      	bx	lr

08018808 <uxr_receive_reliable_message>:
 8018808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801880c:	4604      	mov	r4, r0
 801880e:	460d      	mov	r5, r1
 8018810:	8901      	ldrh	r1, [r0, #8]
 8018812:	8980      	ldrh	r0, [r0, #12]
 8018814:	4690      	mov	r8, r2
 8018816:	461f      	mov	r7, r3
 8018818:	f000 fca2 	bl	8019160 <uxr_seq_num_add>
 801881c:	4629      	mov	r1, r5
 801881e:	4606      	mov	r6, r0
 8018820:	89a0      	ldrh	r0, [r4, #12]
 8018822:	f000 fca5 	bl	8019170 <uxr_seq_num_cmp>
 8018826:	2800      	cmp	r0, #0
 8018828:	db0a      	blt.n	8018840 <uxr_receive_reliable_message+0x38>
 801882a:	2600      	movs	r6, #0
 801882c:	89e0      	ldrh	r0, [r4, #14]
 801882e:	4629      	mov	r1, r5
 8018830:	f000 fc9e 	bl	8019170 <uxr_seq_num_cmp>
 8018834:	2800      	cmp	r0, #0
 8018836:	da00      	bge.n	801883a <uxr_receive_reliable_message+0x32>
 8018838:	81e5      	strh	r5, [r4, #14]
 801883a:	4630      	mov	r0, r6
 801883c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018840:	4630      	mov	r0, r6
 8018842:	4629      	mov	r1, r5
 8018844:	f000 fc94 	bl	8019170 <uxr_seq_num_cmp>
 8018848:	2800      	cmp	r0, #0
 801884a:	dbee      	blt.n	801882a <uxr_receive_reliable_message+0x22>
 801884c:	6923      	ldr	r3, [r4, #16]
 801884e:	4640      	mov	r0, r8
 8018850:	4798      	blx	r3
 8018852:	2101      	movs	r1, #1
 8018854:	4681      	mov	r9, r0
 8018856:	89a0      	ldrh	r0, [r4, #12]
 8018858:	f000 fc82 	bl	8019160 <uxr_seq_num_add>
 801885c:	f1b9 0f00 	cmp.w	r9, #0
 8018860:	d101      	bne.n	8018866 <uxr_receive_reliable_message+0x5e>
 8018862:	4285      	cmp	r5, r0
 8018864:	d047      	beq.n	80188f6 <uxr_receive_reliable_message+0xee>
 8018866:	8922      	ldrh	r2, [r4, #8]
 8018868:	fbb5 f0f2 	udiv	r0, r5, r2
 801886c:	fb02 5010 	mls	r0, r2, r0, r5
 8018870:	b280      	uxth	r0, r0
 8018872:	6863      	ldr	r3, [r4, #4]
 8018874:	fbb3 f3f2 	udiv	r3, r3, r2
 8018878:	fb00 f303 	mul.w	r3, r0, r3
 801887c:	6820      	ldr	r0, [r4, #0]
 801887e:	3304      	adds	r3, #4
 8018880:	4418      	add	r0, r3
 8018882:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018886:	2b00      	cmp	r3, #0
 8018888:	d1cf      	bne.n	801882a <uxr_receive_reliable_message+0x22>
 801888a:	4641      	mov	r1, r8
 801888c:	463a      	mov	r2, r7
 801888e:	f001 fd9a 	bl	801a3c6 <memcpy>
 8018892:	8921      	ldrh	r1, [r4, #8]
 8018894:	fbb5 f2f1 	udiv	r2, r5, r1
 8018898:	fb01 5212 	mls	r2, r1, r2, r5
 801889c:	b292      	uxth	r2, r2
 801889e:	6863      	ldr	r3, [r4, #4]
 80188a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80188a4:	fb02 f303 	mul.w	r3, r2, r3
 80188a8:	6822      	ldr	r2, [r4, #0]
 80188aa:	50d7      	str	r7, [r2, r3]
 80188ac:	9a08      	ldr	r2, [sp, #32]
 80188ae:	2301      	movs	r3, #1
 80188b0:	7013      	strb	r3, [r2, #0]
 80188b2:	f1b9 0f00 	cmp.w	r9, #0
 80188b6:	d0b8      	beq.n	801882a <uxr_receive_reliable_message+0x22>
 80188b8:	89a6      	ldrh	r6, [r4, #12]
 80188ba:	4630      	mov	r0, r6
 80188bc:	2101      	movs	r1, #1
 80188be:	f000 fc4f 	bl	8019160 <uxr_seq_num_add>
 80188c2:	8922      	ldrh	r2, [r4, #8]
 80188c4:	6863      	ldr	r3, [r4, #4]
 80188c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80188ca:	4606      	mov	r6, r0
 80188cc:	fbb0 f0f2 	udiv	r0, r0, r2
 80188d0:	fb02 6010 	mls	r0, r2, r0, r6
 80188d4:	b280      	uxth	r0, r0
 80188d6:	fb00 f303 	mul.w	r3, r0, r3
 80188da:	6820      	ldr	r0, [r4, #0]
 80188dc:	3304      	adds	r3, #4
 80188de:	4418      	add	r0, r3
 80188e0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80188e4:	2b00      	cmp	r3, #0
 80188e6:	d0a0      	beq.n	801882a <uxr_receive_reliable_message+0x22>
 80188e8:	6923      	ldr	r3, [r4, #16]
 80188ea:	4798      	blx	r3
 80188ec:	2802      	cmp	r0, #2
 80188ee:	d008      	beq.n	8018902 <uxr_receive_reliable_message+0xfa>
 80188f0:	2801      	cmp	r0, #1
 80188f2:	d0e2      	beq.n	80188ba <uxr_receive_reliable_message+0xb2>
 80188f4:	e799      	b.n	801882a <uxr_receive_reliable_message+0x22>
 80188f6:	9b08      	ldr	r3, [sp, #32]
 80188f8:	81a5      	strh	r5, [r4, #12]
 80188fa:	2601      	movs	r6, #1
 80188fc:	f883 9000 	strb.w	r9, [r3]
 8018900:	e794      	b.n	801882c <uxr_receive_reliable_message+0x24>
 8018902:	2601      	movs	r6, #1
 8018904:	e792      	b.n	801882c <uxr_receive_reliable_message+0x24>
 8018906:	bf00      	nop

08018908 <uxr_next_input_reliable_buffer_available>:
 8018908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801890c:	4604      	mov	r4, r0
 801890e:	460f      	mov	r7, r1
 8018910:	8980      	ldrh	r0, [r0, #12]
 8018912:	2101      	movs	r1, #1
 8018914:	4690      	mov	r8, r2
 8018916:	f000 fc23 	bl	8019160 <uxr_seq_num_add>
 801891a:	8922      	ldrh	r2, [r4, #8]
 801891c:	fbb0 f6f2 	udiv	r6, r0, r2
 8018920:	fb02 0616 	mls	r6, r2, r6, r0
 8018924:	b2b6      	uxth	r6, r6
 8018926:	6863      	ldr	r3, [r4, #4]
 8018928:	fbb3 f3f2 	udiv	r3, r3, r2
 801892c:	fb06 f303 	mul.w	r3, r6, r3
 8018930:	6826      	ldr	r6, [r4, #0]
 8018932:	3304      	adds	r3, #4
 8018934:	441e      	add	r6, r3
 8018936:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801893a:	f1b9 0f00 	cmp.w	r9, #0
 801893e:	d023      	beq.n	8018988 <uxr_next_input_reliable_buffer_available+0x80>
 8018940:	6923      	ldr	r3, [r4, #16]
 8018942:	4605      	mov	r5, r0
 8018944:	4630      	mov	r0, r6
 8018946:	4798      	blx	r3
 8018948:	4682      	mov	sl, r0
 801894a:	b300      	cbz	r0, 801898e <uxr_next_input_reliable_buffer_available+0x86>
 801894c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8018950:	2101      	movs	r1, #1
 8018952:	4650      	mov	r0, sl
 8018954:	f000 fc04 	bl	8019160 <uxr_seq_num_add>
 8018958:	8921      	ldrh	r1, [r4, #8]
 801895a:	fbb0 f2f1 	udiv	r2, r0, r1
 801895e:	4682      	mov	sl, r0
 8018960:	fb01 0212 	mls	r2, r1, r2, r0
 8018964:	e9d4 0300 	ldrd	r0, r3, [r4]
 8018968:	b292      	uxth	r2, r2
 801896a:	fbb3 f3f1 	udiv	r3, r3, r1
 801896e:	fb02 f303 	mul.w	r3, r2, r3
 8018972:	3304      	adds	r3, #4
 8018974:	4418      	add	r0, r3
 8018976:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801897a:	b12b      	cbz	r3, 8018988 <uxr_next_input_reliable_buffer_available+0x80>
 801897c:	6923      	ldr	r3, [r4, #16]
 801897e:	4798      	blx	r3
 8018980:	2802      	cmp	r0, #2
 8018982:	d01b      	beq.n	80189bc <uxr_next_input_reliable_buffer_available+0xb4>
 8018984:	2801      	cmp	r0, #1
 8018986:	d0e3      	beq.n	8018950 <uxr_next_input_reliable_buffer_available+0x48>
 8018988:	2000      	movs	r0, #0
 801898a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801898e:	464a      	mov	r2, r9
 8018990:	4631      	mov	r1, r6
 8018992:	4638      	mov	r0, r7
 8018994:	f7f3 fee2 	bl	800c75c <ucdr_init_buffer>
 8018998:	8921      	ldrh	r1, [r4, #8]
 801899a:	fbb5 f2f1 	udiv	r2, r5, r1
 801899e:	fb01 5212 	mls	r2, r1, r2, r5
 80189a2:	b292      	uxth	r2, r2
 80189a4:	6863      	ldr	r3, [r4, #4]
 80189a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80189aa:	fb02 f303 	mul.w	r3, r2, r3
 80189ae:	6822      	ldr	r2, [r4, #0]
 80189b0:	f842 a003 	str.w	sl, [r2, r3]
 80189b4:	2001      	movs	r0, #1
 80189b6:	81a5      	strh	r5, [r4, #12]
 80189b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80189bc:	8920      	ldrh	r0, [r4, #8]
 80189be:	fbb5 f3f0 	udiv	r3, r5, r0
 80189c2:	fb00 5513 	mls	r5, r0, r3, r5
 80189c6:	b2ad      	uxth	r5, r5
 80189c8:	6863      	ldr	r3, [r4, #4]
 80189ca:	fbb3 f3f0 	udiv	r3, r3, r0
 80189ce:	fb03 f505 	mul.w	r5, r3, r5
 80189d2:	6823      	ldr	r3, [r4, #0]
 80189d4:	2000      	movs	r0, #0
 80189d6:	5158      	str	r0, [r3, r5]
 80189d8:	eb06 0108 	add.w	r1, r6, r8
 80189dc:	eba9 0208 	sub.w	r2, r9, r8
 80189e0:	4638      	mov	r0, r7
 80189e2:	f7f3 febb 	bl	800c75c <ucdr_init_buffer>
 80189e6:	4638      	mov	r0, r7
 80189e8:	4903      	ldr	r1, [pc, #12]	@ (80189f8 <uxr_next_input_reliable_buffer_available+0xf0>)
 80189ea:	4622      	mov	r2, r4
 80189ec:	f7f3 fe8a 	bl	800c704 <ucdr_set_on_full_buffer_callback>
 80189f0:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80189f4:	2001      	movs	r0, #1
 80189f6:	e7c8      	b.n	801898a <uxr_next_input_reliable_buffer_available+0x82>
 80189f8:	080186fd 	.word	0x080186fd

080189fc <uxr_process_heartbeat>:
 80189fc:	b538      	push	{r3, r4, r5, lr}
 80189fe:	4611      	mov	r1, r2
 8018a00:	4604      	mov	r4, r0
 8018a02:	89c0      	ldrh	r0, [r0, #14]
 8018a04:	4615      	mov	r5, r2
 8018a06:	f000 fbb3 	bl	8019170 <uxr_seq_num_cmp>
 8018a0a:	2800      	cmp	r0, #0
 8018a0c:	bfb8      	it	lt
 8018a0e:	81e5      	strhlt	r5, [r4, #14]
 8018a10:	bd38      	pop	{r3, r4, r5, pc}
 8018a12:	bf00      	nop

08018a14 <uxr_compute_acknack>:
 8018a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018a18:	8903      	ldrh	r3, [r0, #8]
 8018a1a:	8985      	ldrh	r5, [r0, #12]
 8018a1c:	4604      	mov	r4, r0
 8018a1e:	460e      	mov	r6, r1
 8018a20:	b1d3      	cbz	r3, 8018a58 <uxr_compute_acknack+0x44>
 8018a22:	4628      	mov	r0, r5
 8018a24:	2701      	movs	r7, #1
 8018a26:	e003      	b.n	8018a30 <uxr_compute_acknack+0x1c>
 8018a28:	4567      	cmp	r7, ip
 8018a2a:	d215      	bcs.n	8018a58 <uxr_compute_acknack+0x44>
 8018a2c:	89a0      	ldrh	r0, [r4, #12]
 8018a2e:	3701      	adds	r7, #1
 8018a30:	b2b9      	uxth	r1, r7
 8018a32:	f000 fb95 	bl	8019160 <uxr_seq_num_add>
 8018a36:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018a3a:	fbb0 f3fc 	udiv	r3, r0, ip
 8018a3e:	fb0c 0313 	mls	r3, ip, r3, r0
 8018a42:	b29a      	uxth	r2, r3
 8018a44:	e9d4 1300 	ldrd	r1, r3, [r4]
 8018a48:	fbb3 f3fc 	udiv	r3, r3, ip
 8018a4c:	fb02 f303 	mul.w	r3, r2, r3
 8018a50:	58cb      	ldr	r3, [r1, r3]
 8018a52:	2b00      	cmp	r3, #0
 8018a54:	d1e8      	bne.n	8018a28 <uxr_compute_acknack+0x14>
 8018a56:	4605      	mov	r5, r0
 8018a58:	8035      	strh	r5, [r6, #0]
 8018a5a:	2101      	movs	r1, #1
 8018a5c:	4628      	mov	r0, r5
 8018a5e:	89e7      	ldrh	r7, [r4, #14]
 8018a60:	f000 fb82 	bl	8019168 <uxr_seq_num_sub>
 8018a64:	4601      	mov	r1, r0
 8018a66:	4638      	mov	r0, r7
 8018a68:	f000 fb7e 	bl	8019168 <uxr_seq_num_sub>
 8018a6c:	4605      	mov	r5, r0
 8018a6e:	b318      	cbz	r0, 8018ab8 <uxr_compute_acknack+0xa4>
 8018a70:	f04f 0900 	mov.w	r9, #0
 8018a74:	464f      	mov	r7, r9
 8018a76:	f04f 0801 	mov.w	r8, #1
 8018a7a:	fa1f f189 	uxth.w	r1, r9
 8018a7e:	8830      	ldrh	r0, [r6, #0]
 8018a80:	f000 fb6e 	bl	8019160 <uxr_seq_num_add>
 8018a84:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018a88:	fbb0 f3fc 	udiv	r3, r0, ip
 8018a8c:	e9d4 1200 	ldrd	r1, r2, [r4]
 8018a90:	fb03 001c 	mls	r0, r3, ip, r0
 8018a94:	b283      	uxth	r3, r0
 8018a96:	fbb2 f2fc 	udiv	r2, r2, ip
 8018a9a:	fb02 f303 	mul.w	r3, r2, r3
 8018a9e:	fa08 f209 	lsl.w	r2, r8, r9
 8018aa2:	58cb      	ldr	r3, [r1, r3]
 8018aa4:	f109 0901 	add.w	r9, r9, #1
 8018aa8:	b90b      	cbnz	r3, 8018aae <uxr_compute_acknack+0x9a>
 8018aaa:	4317      	orrs	r7, r2
 8018aac:	b2bf      	uxth	r7, r7
 8018aae:	454d      	cmp	r5, r9
 8018ab0:	d1e3      	bne.n	8018a7a <uxr_compute_acknack+0x66>
 8018ab2:	4638      	mov	r0, r7
 8018ab4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018ab8:	4607      	mov	r7, r0
 8018aba:	4638      	mov	r0, r7
 8018abc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08018ac0 <uxr_init_output_best_effort_stream>:
 8018ac0:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8018ac4:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8018ac8:	6001      	str	r1, [r0, #0]
 8018aca:	7303      	strb	r3, [r0, #12]
 8018acc:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8018ad0:	4770      	bx	lr
 8018ad2:	bf00      	nop

08018ad4 <uxr_reset_output_best_effort_stream>:
 8018ad4:	7b02      	ldrb	r2, [r0, #12]
 8018ad6:	6042      	str	r2, [r0, #4]
 8018ad8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018adc:	81c3      	strh	r3, [r0, #14]
 8018ade:	4770      	bx	lr

08018ae0 <uxr_prepare_best_effort_buffer_to_write>:
 8018ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018ae2:	4604      	mov	r4, r0
 8018ae4:	b083      	sub	sp, #12
 8018ae6:	6840      	ldr	r0, [r0, #4]
 8018ae8:	460d      	mov	r5, r1
 8018aea:	4616      	mov	r6, r2
 8018aec:	f7fb f8cc 	bl	8013c88 <uxr_submessage_padding>
 8018af0:	6863      	ldr	r3, [r4, #4]
 8018af2:	4418      	add	r0, r3
 8018af4:	68a3      	ldr	r3, [r4, #8]
 8018af6:	1942      	adds	r2, r0, r5
 8018af8:	4293      	cmp	r3, r2
 8018afa:	bf2c      	ite	cs
 8018afc:	2701      	movcs	r7, #1
 8018afe:	2700      	movcc	r7, #0
 8018b00:	d202      	bcs.n	8018b08 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8018b02:	4638      	mov	r0, r7
 8018b04:	b003      	add	sp, #12
 8018b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018b08:	9000      	str	r0, [sp, #0]
 8018b0a:	6821      	ldr	r1, [r4, #0]
 8018b0c:	4630      	mov	r0, r6
 8018b0e:	2300      	movs	r3, #0
 8018b10:	f7f3 fe12 	bl	800c738 <ucdr_init_buffer_origin_offset>
 8018b14:	6861      	ldr	r1, [r4, #4]
 8018b16:	4638      	mov	r0, r7
 8018b18:	4429      	add	r1, r5
 8018b1a:	6061      	str	r1, [r4, #4]
 8018b1c:	b003      	add	sp, #12
 8018b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018b20 <uxr_prepare_best_effort_buffer_to_send>:
 8018b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b24:	4604      	mov	r4, r0
 8018b26:	461d      	mov	r5, r3
 8018b28:	6840      	ldr	r0, [r0, #4]
 8018b2a:	7b23      	ldrb	r3, [r4, #12]
 8018b2c:	4298      	cmp	r0, r3
 8018b2e:	bf8c      	ite	hi
 8018b30:	2601      	movhi	r6, #1
 8018b32:	2600      	movls	r6, #0
 8018b34:	d802      	bhi.n	8018b3c <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8018b36:	4630      	mov	r0, r6
 8018b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b3c:	4688      	mov	r8, r1
 8018b3e:	89e0      	ldrh	r0, [r4, #14]
 8018b40:	2101      	movs	r1, #1
 8018b42:	4617      	mov	r7, r2
 8018b44:	f000 fb0c 	bl	8019160 <uxr_seq_num_add>
 8018b48:	6823      	ldr	r3, [r4, #0]
 8018b4a:	81e0      	strh	r0, [r4, #14]
 8018b4c:	8028      	strh	r0, [r5, #0]
 8018b4e:	f8c8 3000 	str.w	r3, [r8]
 8018b52:	6863      	ldr	r3, [r4, #4]
 8018b54:	603b      	str	r3, [r7, #0]
 8018b56:	7b23      	ldrb	r3, [r4, #12]
 8018b58:	6063      	str	r3, [r4, #4]
 8018b5a:	4630      	mov	r0, r6
 8018b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018b60 <on_full_output_buffer>:
 8018b60:	b538      	push	{r3, r4, r5, lr}
 8018b62:	6802      	ldr	r2, [r0, #0]
 8018b64:	460c      	mov	r4, r1
 8018b66:	6809      	ldr	r1, [r1, #0]
 8018b68:	8923      	ldrh	r3, [r4, #8]
 8018b6a:	eba2 0c01 	sub.w	ip, r2, r1
 8018b6e:	6862      	ldr	r2, [r4, #4]
 8018b70:	fbb2 f2f3 	udiv	r2, r2, r3
 8018b74:	fbbc fcf2 	udiv	ip, ip, r2
 8018b78:	f10c 0c01 	add.w	ip, ip, #1
 8018b7c:	fa1f fc8c 	uxth.w	ip, ip
 8018b80:	fbbc fef3 	udiv	lr, ip, r3
 8018b84:	fb03 c31e 	mls	r3, r3, lr, ip
 8018b88:	b29b      	uxth	r3, r3
 8018b8a:	fb02 f303 	mul.w	r3, r2, r3
 8018b8e:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8018b92:	58ca      	ldr	r2, [r1, r3]
 8018b94:	4463      	add	r3, ip
 8018b96:	eba2 020c 	sub.w	r2, r2, ip
 8018b9a:	3308      	adds	r3, #8
 8018b9c:	4605      	mov	r5, r0
 8018b9e:	4419      	add	r1, r3
 8018ba0:	3a04      	subs	r2, #4
 8018ba2:	6903      	ldr	r3, [r0, #16]
 8018ba4:	f7f3 fdd2 	bl	800c74c <ucdr_init_buffer_origin>
 8018ba8:	4628      	mov	r0, r5
 8018baa:	4903      	ldr	r1, [pc, #12]	@ (8018bb8 <on_full_output_buffer+0x58>)
 8018bac:	4622      	mov	r2, r4
 8018bae:	f7f3 fda9 	bl	800c704 <ucdr_set_on_full_buffer_callback>
 8018bb2:	2000      	movs	r0, #0
 8018bb4:	bd38      	pop	{r3, r4, r5, pc}
 8018bb6:	bf00      	nop
 8018bb8:	08018b61 	.word	0x08018b61

08018bbc <uxr_init_output_reliable_stream>:
 8018bbc:	b410      	push	{r4}
 8018bbe:	f89d c004 	ldrb.w	ip, [sp, #4]
 8018bc2:	8103      	strh	r3, [r0, #8]
 8018bc4:	e9c0 1200 	strd	r1, r2, [r0]
 8018bc8:	f880 c00c 	strb.w	ip, [r0, #12]
 8018bcc:	b1d3      	cbz	r3, 8018c04 <uxr_init_output_reliable_stream+0x48>
 8018bce:	f8c1 c000 	str.w	ip, [r1]
 8018bd2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8018bd6:	f1bc 0f01 	cmp.w	ip, #1
 8018bda:	d913      	bls.n	8018c04 <uxr_init_output_reliable_stream+0x48>
 8018bdc:	2301      	movs	r3, #1
 8018bde:	fbb3 f1fc 	udiv	r1, r3, ip
 8018be2:	fb0c 3111 	mls	r1, ip, r1, r3
 8018be6:	b289      	uxth	r1, r1
 8018be8:	6842      	ldr	r2, [r0, #4]
 8018bea:	6804      	ldr	r4, [r0, #0]
 8018bec:	fbb2 f2fc 	udiv	r2, r2, ip
 8018bf0:	fb01 f202 	mul.w	r2, r1, r2
 8018bf4:	7b01      	ldrb	r1, [r0, #12]
 8018bf6:	50a1      	str	r1, [r4, r2]
 8018bf8:	3301      	adds	r3, #1
 8018bfa:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8018bfe:	b29b      	uxth	r3, r3
 8018c00:	459c      	cmp	ip, r3
 8018c02:	d8ec      	bhi.n	8018bde <uxr_init_output_reliable_stream+0x22>
 8018c04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018c08:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8018c0c:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8018c10:	4905      	ldr	r1, [pc, #20]	@ (8018c28 <uxr_init_output_reliable_stream+0x6c>)
 8018c12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018c16:	f8c0 100e 	str.w	r1, [r0, #14]
 8018c1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018c1e:	2300      	movs	r3, #0
 8018c20:	8242      	strh	r2, [r0, #18]
 8018c22:	8403      	strh	r3, [r0, #32]
 8018c24:	4770      	bx	lr
 8018c26:	bf00      	nop
 8018c28:	ffff0000 	.word	0xffff0000

08018c2c <uxr_reset_output_reliable_stream>:
 8018c2c:	8901      	ldrh	r1, [r0, #8]
 8018c2e:	b1b1      	cbz	r1, 8018c5e <uxr_reset_output_reliable_stream+0x32>
 8018c30:	f04f 0c00 	mov.w	ip, #0
 8018c34:	4663      	mov	r3, ip
 8018c36:	fbb3 f2f1 	udiv	r2, r3, r1
 8018c3a:	fb01 3312 	mls	r3, r1, r2, r3
 8018c3e:	b29b      	uxth	r3, r3
 8018c40:	6842      	ldr	r2, [r0, #4]
 8018c42:	fbb2 f2f1 	udiv	r2, r2, r1
 8018c46:	6801      	ldr	r1, [r0, #0]
 8018c48:	fb02 f303 	mul.w	r3, r2, r3
 8018c4c:	7b02      	ldrb	r2, [r0, #12]
 8018c4e:	50ca      	str	r2, [r1, r3]
 8018c50:	f10c 0c01 	add.w	ip, ip, #1
 8018c54:	8901      	ldrh	r1, [r0, #8]
 8018c56:	fa1f f38c 	uxth.w	r3, ip
 8018c5a:	4299      	cmp	r1, r3
 8018c5c:	d8eb      	bhi.n	8018c36 <uxr_reset_output_reliable_stream+0xa>
 8018c5e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018c62:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8018c66:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8018c6a:	4904      	ldr	r1, [pc, #16]	@ (8018c7c <uxr_reset_output_reliable_stream+0x50>)
 8018c6c:	f8c0 100e 	str.w	r1, [r0, #14]
 8018c70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018c74:	2300      	movs	r3, #0
 8018c76:	8242      	strh	r2, [r0, #18]
 8018c78:	8403      	strh	r3, [r0, #32]
 8018c7a:	4770      	bx	lr
 8018c7c:	ffff0000 	.word	0xffff0000

08018c80 <uxr_prepare_reliable_buffer_to_write>:
 8018c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c84:	4604      	mov	r4, r0
 8018c86:	b091      	sub	sp, #68	@ 0x44
 8018c88:	8900      	ldrh	r0, [r0, #8]
 8018c8a:	89e6      	ldrh	r6, [r4, #14]
 8018c8c:	6823      	ldr	r3, [r4, #0]
 8018c8e:	9204      	str	r2, [sp, #16]
 8018c90:	fbb6 f2f0 	udiv	r2, r6, r0
 8018c94:	fb00 6212 	mls	r2, r0, r2, r6
 8018c98:	b292      	uxth	r2, r2
 8018c9a:	6865      	ldr	r5, [r4, #4]
 8018c9c:	fbb5 f5f0 	udiv	r5, r5, r0
 8018ca0:	fb05 3202 	mla	r2, r5, r2, r3
 8018ca4:	3204      	adds	r2, #4
 8018ca6:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8018caa:	f894 900c 	ldrb.w	r9, [r4, #12]
 8018cae:	9203      	str	r2, [sp, #12]
 8018cb0:	468b      	mov	fp, r1
 8018cb2:	1f2f      	subs	r7, r5, #4
 8018cb4:	2800      	cmp	r0, #0
 8018cb6:	f000 814c 	beq.w	8018f52 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8018cba:	f04f 0c00 	mov.w	ip, #0
 8018cbe:	46e2      	mov	sl, ip
 8018cc0:	4661      	mov	r1, ip
 8018cc2:	fbb1 f2f0 	udiv	r2, r1, r0
 8018cc6:	fb00 1212 	mls	r2, r0, r2, r1
 8018cca:	b292      	uxth	r2, r2
 8018ccc:	fb05 f202 	mul.w	r2, r5, r2
 8018cd0:	f10c 0c01 	add.w	ip, ip, #1
 8018cd4:	589a      	ldr	r2, [r3, r2]
 8018cd6:	454a      	cmp	r2, r9
 8018cd8:	bf08      	it	eq
 8018cda:	f10a 0a01 	addeq.w	sl, sl, #1
 8018cde:	fa1f f18c 	uxth.w	r1, ip
 8018ce2:	bf08      	it	eq
 8018ce4:	fa1f fa8a 	uxtheq.w	sl, sl
 8018ce8:	4281      	cmp	r1, r0
 8018cea:	d3ea      	bcc.n	8018cc2 <uxr_prepare_reliable_buffer_to_write+0x42>
 8018cec:	4640      	mov	r0, r8
 8018cee:	2104      	movs	r1, #4
 8018cf0:	f8cd a014 	str.w	sl, [sp, #20]
 8018cf4:	f7f3 fd36 	bl	800c764 <ucdr_alignment>
 8018cf8:	4480      	add	r8, r0
 8018cfa:	eb08 020b 	add.w	r2, r8, fp
 8018cfe:	42ba      	cmp	r2, r7
 8018d00:	f240 80cd 	bls.w	8018e9e <uxr_prepare_reliable_buffer_to_write+0x21e>
 8018d04:	7b22      	ldrb	r2, [r4, #12]
 8018d06:	445a      	add	r2, fp
 8018d08:	42ba      	cmp	r2, r7
 8018d0a:	f240 80b5 	bls.w	8018e78 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8018d0e:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8018d12:	33fc      	adds	r3, #252	@ 0xfc
 8018d14:	b2ba      	uxth	r2, r7
 8018d16:	4413      	add	r3, r2
 8018d18:	b29b      	uxth	r3, r3
 8018d1a:	fb0a f903 	mul.w	r9, sl, r3
 8018d1e:	45d9      	cmp	r9, fp
 8018d20:	9305      	str	r3, [sp, #20]
 8018d22:	9306      	str	r3, [sp, #24]
 8018d24:	f0c0 80b7 	bcc.w	8018e96 <uxr_prepare_reliable_buffer_to_write+0x216>
 8018d28:	f108 0304 	add.w	r3, r8, #4
 8018d2c:	42bb      	cmp	r3, r7
 8018d2e:	f080 80db 	bcs.w	8018ee8 <uxr_prepare_reliable_buffer_to_write+0x268>
 8018d32:	f1a2 0904 	sub.w	r9, r2, #4
 8018d36:	eba9 0908 	sub.w	r9, r9, r8
 8018d3a:	9b05      	ldr	r3, [sp, #20]
 8018d3c:	fa1f f989 	uxth.w	r9, r9
 8018d40:	ebab 0b09 	sub.w	fp, fp, r9
 8018d44:	fbbb f2f3 	udiv	r2, fp, r3
 8018d48:	fb03 b312 	mls	r3, r3, r2, fp
 8018d4c:	2b00      	cmp	r3, #0
 8018d4e:	f000 80c8 	beq.w	8018ee2 <uxr_prepare_reliable_buffer_to_write+0x262>
 8018d52:	3201      	adds	r2, #1
 8018d54:	b292      	uxth	r2, r2
 8018d56:	9306      	str	r3, [sp, #24]
 8018d58:	4552      	cmp	r2, sl
 8018d5a:	f200 809c 	bhi.w	8018e96 <uxr_prepare_reliable_buffer_to_write+0x216>
 8018d5e:	f10d 0b20 	add.w	fp, sp, #32
 8018d62:	2a00      	cmp	r2, #0
 8018d64:	d042      	beq.n	8018dec <uxr_prepare_reliable_buffer_to_write+0x16c>
 8018d66:	f8cd 801c 	str.w	r8, [sp, #28]
 8018d6a:	f04f 0a00 	mov.w	sl, #0
 8018d6e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8018d72:	9505      	str	r5, [sp, #20]
 8018d74:	f10d 0b20 	add.w	fp, sp, #32
 8018d78:	4615      	mov	r5, r2
 8018d7a:	e000      	b.n	8018d7e <uxr_prepare_reliable_buffer_to_write+0xfe>
 8018d7c:	46c1      	mov	r9, r8
 8018d7e:	8920      	ldrh	r0, [r4, #8]
 8018d80:	fbb6 f2f0 	udiv	r2, r6, r0
 8018d84:	fb00 6112 	mls	r1, r0, r2, r6
 8018d88:	b28a      	uxth	r2, r1
 8018d8a:	6863      	ldr	r3, [r4, #4]
 8018d8c:	fbb3 f1f0 	udiv	r1, r3, r0
 8018d90:	6823      	ldr	r3, [r4, #0]
 8018d92:	fb02 f101 	mul.w	r1, r2, r1
 8018d96:	3104      	adds	r1, #4
 8018d98:	4419      	add	r1, r3
 8018d9a:	4658      	mov	r0, fp
 8018d9c:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8018da0:	9200      	str	r2, [sp, #0]
 8018da2:	2300      	movs	r3, #0
 8018da4:	463a      	mov	r2, r7
 8018da6:	f7f3 fcc7 	bl	800c738 <ucdr_init_buffer_origin_offset>
 8018daa:	464a      	mov	r2, r9
 8018dac:	2300      	movs	r3, #0
 8018dae:	210d      	movs	r1, #13
 8018db0:	4658      	mov	r0, fp
 8018db2:	f7fa ff29 	bl	8013c08 <uxr_buffer_submessage_header>
 8018db6:	8921      	ldrh	r1, [r4, #8]
 8018db8:	fbb6 f2f1 	udiv	r2, r6, r1
 8018dbc:	fb01 6212 	mls	r2, r1, r2, r6
 8018dc0:	b292      	uxth	r2, r2
 8018dc2:	6863      	ldr	r3, [r4, #4]
 8018dc4:	fbb3 f3f1 	udiv	r3, r3, r1
 8018dc8:	fb02 f303 	mul.w	r3, r2, r3
 8018dcc:	6822      	ldr	r2, [r4, #0]
 8018dce:	4630      	mov	r0, r6
 8018dd0:	50d7      	str	r7, [r2, r3]
 8018dd2:	2101      	movs	r1, #1
 8018dd4:	f000 f9c4 	bl	8019160 <uxr_seq_num_add>
 8018dd8:	f10a 0a01 	add.w	sl, sl, #1
 8018ddc:	fa1f f38a 	uxth.w	r3, sl
 8018de0:	429d      	cmp	r5, r3
 8018de2:	4606      	mov	r6, r0
 8018de4:	d8ca      	bhi.n	8018d7c <uxr_prepare_reliable_buffer_to_write+0xfc>
 8018de6:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8018dea:	9d05      	ldr	r5, [sp, #20]
 8018dec:	8920      	ldrh	r0, [r4, #8]
 8018dee:	fbb6 f3f0 	udiv	r3, r6, r0
 8018df2:	fb00 6313 	mls	r3, r0, r3, r6
 8018df6:	b299      	uxth	r1, r3
 8018df8:	6863      	ldr	r3, [r4, #4]
 8018dfa:	fbb3 f3f0 	udiv	r3, r3, r0
 8018dfe:	fb01 f303 	mul.w	r3, r1, r3
 8018e02:	6821      	ldr	r1, [r4, #0]
 8018e04:	3304      	adds	r3, #4
 8018e06:	4419      	add	r1, r3
 8018e08:	463a      	mov	r2, r7
 8018e0a:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8018e0e:	9000      	str	r0, [sp, #0]
 8018e10:	2300      	movs	r3, #0
 8018e12:	4658      	mov	r0, fp
 8018e14:	f7f3 fc90 	bl	800c738 <ucdr_init_buffer_origin_offset>
 8018e18:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8018e1c:	4658      	mov	r0, fp
 8018e1e:	fa1f f289 	uxth.w	r2, r9
 8018e22:	2302      	movs	r3, #2
 8018e24:	210d      	movs	r1, #13
 8018e26:	f7fa feef 	bl	8013c08 <uxr_buffer_submessage_header>
 8018e2a:	9b03      	ldr	r3, [sp, #12]
 8018e2c:	8927      	ldrh	r7, [r4, #8]
 8018e2e:	7b20      	ldrb	r0, [r4, #12]
 8018e30:	f108 0104 	add.w	r1, r8, #4
 8018e34:	440b      	add	r3, r1
 8018e36:	4619      	mov	r1, r3
 8018e38:	fbb6 f3f7 	udiv	r3, r6, r7
 8018e3c:	fb07 6313 	mls	r3, r7, r3, r6
 8018e40:	f1a5 0208 	sub.w	r2, r5, #8
 8018e44:	b29d      	uxth	r5, r3
 8018e46:	3004      	adds	r0, #4
 8018e48:	6863      	ldr	r3, [r4, #4]
 8018e4a:	fbb3 f3f7 	udiv	r3, r3, r7
 8018e4e:	fb05 f303 	mul.w	r3, r5, r3
 8018e52:	6825      	ldr	r5, [r4, #0]
 8018e54:	4448      	add	r0, r9
 8018e56:	50e8      	str	r0, [r5, r3]
 8018e58:	9d04      	ldr	r5, [sp, #16]
 8018e5a:	eba2 0208 	sub.w	r2, r2, r8
 8018e5e:	4628      	mov	r0, r5
 8018e60:	f7f3 fc7c 	bl	800c75c <ucdr_init_buffer>
 8018e64:	4628      	mov	r0, r5
 8018e66:	493c      	ldr	r1, [pc, #240]	@ (8018f58 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8018e68:	4622      	mov	r2, r4
 8018e6a:	f7f3 fc4b 	bl	800c704 <ucdr_set_on_full_buffer_callback>
 8018e6e:	2001      	movs	r0, #1
 8018e70:	81e6      	strh	r6, [r4, #14]
 8018e72:	b011      	add	sp, #68	@ 0x44
 8018e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e78:	2101      	movs	r1, #1
 8018e7a:	89e0      	ldrh	r0, [r4, #14]
 8018e7c:	f000 f970 	bl	8019160 <uxr_seq_num_add>
 8018e80:	8921      	ldrh	r1, [r4, #8]
 8018e82:	4605      	mov	r5, r0
 8018e84:	8a60      	ldrh	r0, [r4, #18]
 8018e86:	f000 f96b 	bl	8019160 <uxr_seq_num_add>
 8018e8a:	4601      	mov	r1, r0
 8018e8c:	4628      	mov	r0, r5
 8018e8e:	f000 f96f 	bl	8019170 <uxr_seq_num_cmp>
 8018e92:	2800      	cmp	r0, #0
 8018e94:	dd42      	ble.n	8018f1c <uxr_prepare_reliable_buffer_to_write+0x29c>
 8018e96:	2000      	movs	r0, #0
 8018e98:	b011      	add	sp, #68	@ 0x44
 8018e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e9e:	8921      	ldrh	r1, [r4, #8]
 8018ea0:	8a60      	ldrh	r0, [r4, #18]
 8018ea2:	9205      	str	r2, [sp, #20]
 8018ea4:	f000 f95c 	bl	8019160 <uxr_seq_num_add>
 8018ea8:	4601      	mov	r1, r0
 8018eaa:	4630      	mov	r0, r6
 8018eac:	f000 f960 	bl	8019170 <uxr_seq_num_cmp>
 8018eb0:	2800      	cmp	r0, #0
 8018eb2:	9a05      	ldr	r2, [sp, #20]
 8018eb4:	dcef      	bgt.n	8018e96 <uxr_prepare_reliable_buffer_to_write+0x216>
 8018eb6:	8927      	ldrh	r7, [r4, #8]
 8018eb8:	fbb6 f3f7 	udiv	r3, r6, r7
 8018ebc:	fb07 6313 	mls	r3, r7, r3, r6
 8018ec0:	b29d      	uxth	r5, r3
 8018ec2:	6863      	ldr	r3, [r4, #4]
 8018ec4:	6824      	ldr	r4, [r4, #0]
 8018ec6:	fbb3 f3f7 	udiv	r3, r3, r7
 8018eca:	fb05 f303 	mul.w	r3, r5, r3
 8018ece:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8018ed2:	50e2      	str	r2, [r4, r3]
 8018ed4:	2300      	movs	r3, #0
 8018ed6:	f8cd 8000 	str.w	r8, [sp]
 8018eda:	f7f3 fc2d 	bl	800c738 <ucdr_init_buffer_origin_offset>
 8018ede:	2001      	movs	r0, #1
 8018ee0:	e7da      	b.n	8018e98 <uxr_prepare_reliable_buffer_to_write+0x218>
 8018ee2:	b293      	uxth	r3, r2
 8018ee4:	461a      	mov	r2, r3
 8018ee6:	e737      	b.n	8018d58 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8018ee8:	4630      	mov	r0, r6
 8018eea:	2101      	movs	r1, #1
 8018eec:	9207      	str	r2, [sp, #28]
 8018eee:	f000 f937 	bl	8019160 <uxr_seq_num_add>
 8018ef2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018ef6:	fbb0 f1fc 	udiv	r1, r0, ip
 8018efa:	fb0c 0111 	mls	r1, ip, r1, r0
 8018efe:	4606      	mov	r6, r0
 8018f00:	b288      	uxth	r0, r1
 8018f02:	6863      	ldr	r3, [r4, #4]
 8018f04:	fbb3 f1fc 	udiv	r1, r3, ip
 8018f08:	6823      	ldr	r3, [r4, #0]
 8018f0a:	9a07      	ldr	r2, [sp, #28]
 8018f0c:	fb00 f101 	mul.w	r1, r0, r1
 8018f10:	3104      	adds	r1, #4
 8018f12:	440b      	add	r3, r1
 8018f14:	9303      	str	r3, [sp, #12]
 8018f16:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8018f1a:	e70a      	b.n	8018d32 <uxr_prepare_reliable_buffer_to_write+0xb2>
 8018f1c:	8921      	ldrh	r1, [r4, #8]
 8018f1e:	fbb5 f3f1 	udiv	r3, r5, r1
 8018f22:	fb01 5313 	mls	r3, r1, r3, r5
 8018f26:	b29a      	uxth	r2, r3
 8018f28:	6863      	ldr	r3, [r4, #4]
 8018f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8018f2e:	6821      	ldr	r1, [r4, #0]
 8018f30:	9804      	ldr	r0, [sp, #16]
 8018f32:	fb02 f303 	mul.w	r3, r2, r3
 8018f36:	3304      	adds	r3, #4
 8018f38:	7b22      	ldrb	r2, [r4, #12]
 8018f3a:	4419      	add	r1, r3
 8018f3c:	445a      	add	r2, fp
 8018f3e:	f841 2c04 	str.w	r2, [r1, #-4]
 8018f42:	7b23      	ldrb	r3, [r4, #12]
 8018f44:	9300      	str	r3, [sp, #0]
 8018f46:	2300      	movs	r3, #0
 8018f48:	f7f3 fbf6 	bl	800c738 <ucdr_init_buffer_origin_offset>
 8018f4c:	81e5      	strh	r5, [r4, #14]
 8018f4e:	2001      	movs	r0, #1
 8018f50:	e7a2      	b.n	8018e98 <uxr_prepare_reliable_buffer_to_write+0x218>
 8018f52:	4682      	mov	sl, r0
 8018f54:	e6ca      	b.n	8018cec <uxr_prepare_reliable_buffer_to_write+0x6c>
 8018f56:	bf00      	nop
 8018f58:	08018b61 	.word	0x08018b61

08018f5c <uxr_prepare_next_reliable_buffer_to_send>:
 8018f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f5e:	4604      	mov	r4, r0
 8018f60:	460f      	mov	r7, r1
 8018f62:	8a00      	ldrh	r0, [r0, #16]
 8018f64:	2101      	movs	r1, #1
 8018f66:	4616      	mov	r6, r2
 8018f68:	461d      	mov	r5, r3
 8018f6a:	f000 f8f9 	bl	8019160 <uxr_seq_num_add>
 8018f6e:	8028      	strh	r0, [r5, #0]
 8018f70:	8922      	ldrh	r2, [r4, #8]
 8018f72:	fbb0 f3f2 	udiv	r3, r0, r2
 8018f76:	fb02 0c13 	mls	ip, r2, r3, r0
 8018f7a:	fa1f fc8c 	uxth.w	ip, ip
 8018f7e:	6863      	ldr	r3, [r4, #4]
 8018f80:	fbb3 f3f2 	udiv	r3, r3, r2
 8018f84:	fb0c fc03 	mul.w	ip, ip, r3
 8018f88:	6823      	ldr	r3, [r4, #0]
 8018f8a:	89e1      	ldrh	r1, [r4, #14]
 8018f8c:	f10c 0c04 	add.w	ip, ip, #4
 8018f90:	4463      	add	r3, ip
 8018f92:	603b      	str	r3, [r7, #0]
 8018f94:	6823      	ldr	r3, [r4, #0]
 8018f96:	449c      	add	ip, r3
 8018f98:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8018f9c:	6033      	str	r3, [r6, #0]
 8018f9e:	f000 f8e7 	bl	8019170 <uxr_seq_num_cmp>
 8018fa2:	2800      	cmp	r0, #0
 8018fa4:	dd01      	ble.n	8018faa <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8018fa6:	2000      	movs	r0, #0
 8018fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018faa:	7b23      	ldrb	r3, [r4, #12]
 8018fac:	6832      	ldr	r2, [r6, #0]
 8018fae:	429a      	cmp	r2, r3
 8018fb0:	d9f9      	bls.n	8018fa6 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018fb2:	8a61      	ldrh	r1, [r4, #18]
 8018fb4:	8a20      	ldrh	r0, [r4, #16]
 8018fb6:	f000 f8d7 	bl	8019168 <uxr_seq_num_sub>
 8018fba:	8923      	ldrh	r3, [r4, #8]
 8018fbc:	4283      	cmp	r3, r0
 8018fbe:	d0f2      	beq.n	8018fa6 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018fc0:	8828      	ldrh	r0, [r5, #0]
 8018fc2:	89e3      	ldrh	r3, [r4, #14]
 8018fc4:	8220      	strh	r0, [r4, #16]
 8018fc6:	4298      	cmp	r0, r3
 8018fc8:	d001      	beq.n	8018fce <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8018fca:	2001      	movs	r0, #1
 8018fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018fce:	2101      	movs	r1, #1
 8018fd0:	f000 f8c6 	bl	8019160 <uxr_seq_num_add>
 8018fd4:	81e0      	strh	r0, [r4, #14]
 8018fd6:	2001      	movs	r0, #1
 8018fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018fda:	bf00      	nop

08018fdc <uxr_update_output_stream_heartbeat_timestamp>:
 8018fdc:	b570      	push	{r4, r5, r6, lr}
 8018fde:	8a01      	ldrh	r1, [r0, #16]
 8018fe0:	4604      	mov	r4, r0
 8018fe2:	8a40      	ldrh	r0, [r0, #18]
 8018fe4:	4615      	mov	r5, r2
 8018fe6:	461e      	mov	r6, r3
 8018fe8:	f000 f8c2 	bl	8019170 <uxr_seq_num_cmp>
 8018fec:	2800      	cmp	r0, #0
 8018fee:	db07      	blt.n	8019000 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8018ff0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018ff4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8018ff8:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8018ffc:	2000      	movs	r0, #0
 8018ffe:	bd70      	pop	{r4, r5, r6, pc}
 8019000:	f894 0020 	ldrb.w	r0, [r4, #32]
 8019004:	b940      	cbnz	r0, 8019018 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8019006:	2301      	movs	r3, #1
 8019008:	f884 3020 	strb.w	r3, [r4, #32]
 801900c:	3564      	adds	r5, #100	@ 0x64
 801900e:	f146 0600 	adc.w	r6, r6, #0
 8019012:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8019016:	bd70      	pop	{r4, r5, r6, pc}
 8019018:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801901c:	4295      	cmp	r5, r2
 801901e:	eb76 0303 	sbcs.w	r3, r6, r3
 8019022:	bfa5      	ittet	ge
 8019024:	3001      	addge	r0, #1
 8019026:	f884 0020 	strbge.w	r0, [r4, #32]
 801902a:	2000      	movlt	r0, #0
 801902c:	2001      	movge	r0, #1
 801902e:	e7ed      	b.n	801900c <uxr_update_output_stream_heartbeat_timestamp+0x30>

08019030 <uxr_begin_output_nack_buffer_it>:
 8019030:	8a40      	ldrh	r0, [r0, #18]
 8019032:	4770      	bx	lr

08019034 <uxr_next_reliable_nack_buffer_to_send>:
 8019034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019038:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 801903c:	b082      	sub	sp, #8
 801903e:	f1b8 0f00 	cmp.w	r8, #0
 8019042:	d011      	beq.n	8019068 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8019044:	4604      	mov	r4, r0
 8019046:	8818      	ldrh	r0, [r3, #0]
 8019048:	460e      	mov	r6, r1
 801904a:	4617      	mov	r7, r2
 801904c:	461d      	mov	r5, r3
 801904e:	2101      	movs	r1, #1
 8019050:	f000 f886 	bl	8019160 <uxr_seq_num_add>
 8019054:	8028      	strh	r0, [r5, #0]
 8019056:	8a21      	ldrh	r1, [r4, #16]
 8019058:	f000 f88a 	bl	8019170 <uxr_seq_num_cmp>
 801905c:	2800      	cmp	r0, #0
 801905e:	dd07      	ble.n	8019070 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8019060:	f04f 0800 	mov.w	r8, #0
 8019064:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8019068:	4640      	mov	r0, r8
 801906a:	b002      	add	sp, #8
 801906c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019070:	8921      	ldrh	r1, [r4, #8]
 8019072:	8828      	ldrh	r0, [r5, #0]
 8019074:	6823      	ldr	r3, [r4, #0]
 8019076:	fbb0 f2f1 	udiv	r2, r0, r1
 801907a:	fb01 0c12 	mls	ip, r1, r2, r0
 801907e:	fa1f f28c 	uxth.w	r2, ip
 8019082:	9301      	str	r3, [sp, #4]
 8019084:	6863      	ldr	r3, [r4, #4]
 8019086:	fbb3 fcf1 	udiv	ip, r3, r1
 801908a:	9b01      	ldr	r3, [sp, #4]
 801908c:	fb02 fc0c 	mul.w	ip, r2, ip
 8019090:	f10c 0c04 	add.w	ip, ip, #4
 8019094:	4463      	add	r3, ip
 8019096:	6033      	str	r3, [r6, #0]
 8019098:	6823      	ldr	r3, [r4, #0]
 801909a:	4463      	add	r3, ip
 801909c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80190a0:	603b      	str	r3, [r7, #0]
 80190a2:	7b22      	ldrb	r2, [r4, #12]
 80190a4:	429a      	cmp	r2, r3
 80190a6:	d0d2      	beq.n	801904e <uxr_next_reliable_nack_buffer_to_send+0x1a>
 80190a8:	4640      	mov	r0, r8
 80190aa:	b002      	add	sp, #8
 80190ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080190b0 <uxr_process_acknack>:
 80190b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80190b2:	4604      	mov	r4, r0
 80190b4:	460e      	mov	r6, r1
 80190b6:	4610      	mov	r0, r2
 80190b8:	2101      	movs	r1, #1
 80190ba:	f000 f855 	bl	8019168 <uxr_seq_num_sub>
 80190be:	8a61      	ldrh	r1, [r4, #18]
 80190c0:	f000 f852 	bl	8019168 <uxr_seq_num_sub>
 80190c4:	b1c0      	cbz	r0, 80190f8 <uxr_process_acknack+0x48>
 80190c6:	4605      	mov	r5, r0
 80190c8:	2700      	movs	r7, #0
 80190ca:	2101      	movs	r1, #1
 80190cc:	8a60      	ldrh	r0, [r4, #18]
 80190ce:	f000 f847 	bl	8019160 <uxr_seq_num_add>
 80190d2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80190d6:	fbb0 f1fc 	udiv	r1, r0, ip
 80190da:	e9d4 2300 	ldrd	r2, r3, [r4]
 80190de:	fb0c 0111 	mls	r1, ip, r1, r0
 80190e2:	b289      	uxth	r1, r1
 80190e4:	3701      	adds	r7, #1
 80190e6:	fbb3 f3fc 	udiv	r3, r3, ip
 80190ea:	fb01 f303 	mul.w	r3, r1, r3
 80190ee:	42bd      	cmp	r5, r7
 80190f0:	7b21      	ldrb	r1, [r4, #12]
 80190f2:	8260      	strh	r0, [r4, #18]
 80190f4:	50d1      	str	r1, [r2, r3]
 80190f6:	d1e8      	bne.n	80190ca <uxr_process_acknack+0x1a>
 80190f8:	3e00      	subs	r6, #0
 80190fa:	f04f 0300 	mov.w	r3, #0
 80190fe:	bf18      	it	ne
 8019100:	2601      	movne	r6, #1
 8019102:	f884 3020 	strb.w	r3, [r4, #32]
 8019106:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801910a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801910c <uxr_is_output_up_to_date>:
 801910c:	8a01      	ldrh	r1, [r0, #16]
 801910e:	8a40      	ldrh	r0, [r0, #18]
 8019110:	b508      	push	{r3, lr}
 8019112:	f000 f82d 	bl	8019170 <uxr_seq_num_cmp>
 8019116:	fab0 f080 	clz	r0, r0
 801911a:	0940      	lsrs	r0, r0, #5
 801911c:	bd08      	pop	{r3, pc}
 801911e:	bf00      	nop

08019120 <get_available_free_slots>:
 8019120:	8902      	ldrh	r2, [r0, #8]
 8019122:	b1da      	cbz	r2, 801915c <get_available_free_slots+0x3c>
 8019124:	b530      	push	{r4, r5, lr}
 8019126:	2100      	movs	r1, #0
 8019128:	6843      	ldr	r3, [r0, #4]
 801912a:	6805      	ldr	r5, [r0, #0]
 801912c:	7b04      	ldrb	r4, [r0, #12]
 801912e:	fbb3 fef2 	udiv	lr, r3, r2
 8019132:	4608      	mov	r0, r1
 8019134:	460b      	mov	r3, r1
 8019136:	fbb3 fcf2 	udiv	ip, r3, r2
 801913a:	fb02 331c 	mls	r3, r2, ip, r3
 801913e:	b29b      	uxth	r3, r3
 8019140:	fb0e f303 	mul.w	r3, lr, r3
 8019144:	3101      	adds	r1, #1
 8019146:	f855 c003 	ldr.w	ip, [r5, r3]
 801914a:	4564      	cmp	r4, ip
 801914c:	bf08      	it	eq
 801914e:	3001      	addeq	r0, #1
 8019150:	b28b      	uxth	r3, r1
 8019152:	bf08      	it	eq
 8019154:	b280      	uxtheq	r0, r0
 8019156:	4293      	cmp	r3, r2
 8019158:	d3ed      	bcc.n	8019136 <get_available_free_slots+0x16>
 801915a:	bd30      	pop	{r4, r5, pc}
 801915c:	4610      	mov	r0, r2
 801915e:	4770      	bx	lr

08019160 <uxr_seq_num_add>:
 8019160:	4408      	add	r0, r1
 8019162:	b280      	uxth	r0, r0
 8019164:	4770      	bx	lr
 8019166:	bf00      	nop

08019168 <uxr_seq_num_sub>:
 8019168:	1a40      	subs	r0, r0, r1
 801916a:	b280      	uxth	r0, r0
 801916c:	4770      	bx	lr
 801916e:	bf00      	nop

08019170 <uxr_seq_num_cmp>:
 8019170:	4288      	cmp	r0, r1
 8019172:	d011      	beq.n	8019198 <uxr_seq_num_cmp+0x28>
 8019174:	d309      	bcc.n	801918a <uxr_seq_num_cmp+0x1a>
 8019176:	4288      	cmp	r0, r1
 8019178:	d910      	bls.n	801919c <uxr_seq_num_cmp+0x2c>
 801917a:	1a40      	subs	r0, r0, r1
 801917c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8019180:	bfd4      	ite	le
 8019182:	2001      	movle	r0, #1
 8019184:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8019188:	4770      	bx	lr
 801918a:	1a0b      	subs	r3, r1, r0
 801918c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8019190:	daf1      	bge.n	8019176 <uxr_seq_num_cmp+0x6>
 8019192:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019196:	4770      	bx	lr
 8019198:	2000      	movs	r0, #0
 801919a:	4770      	bx	lr
 801919c:	2001      	movs	r0, #1
 801919e:	4770      	bx	lr

080191a0 <rcl_get_default_domain_id>:
 80191a0:	b530      	push	{r4, r5, lr}
 80191a2:	b083      	sub	sp, #12
 80191a4:	2300      	movs	r3, #0
 80191a6:	9300      	str	r3, [sp, #0]
 80191a8:	b1d0      	cbz	r0, 80191e0 <rcl_get_default_domain_id+0x40>
 80191aa:	4604      	mov	r4, r0
 80191ac:	4669      	mov	r1, sp
 80191ae:	4815      	ldr	r0, [pc, #84]	@ (8019204 <rcl_get_default_domain_id+0x64>)
 80191b0:	f7f5 fd94 	bl	800ecdc <rcutils_get_env>
 80191b4:	4602      	mov	r2, r0
 80191b6:	b110      	cbz	r0, 80191be <rcl_get_default_domain_id+0x1e>
 80191b8:	2001      	movs	r0, #1
 80191ba:	b003      	add	sp, #12
 80191bc:	bd30      	pop	{r4, r5, pc}
 80191be:	9b00      	ldr	r3, [sp, #0]
 80191c0:	b18b      	cbz	r3, 80191e6 <rcl_get_default_domain_id+0x46>
 80191c2:	7818      	ldrb	r0, [r3, #0]
 80191c4:	2800      	cmp	r0, #0
 80191c6:	d0f8      	beq.n	80191ba <rcl_get_default_domain_id+0x1a>
 80191c8:	a901      	add	r1, sp, #4
 80191ca:	4618      	mov	r0, r3
 80191cc:	9201      	str	r2, [sp, #4]
 80191ce:	f000 fd85 	bl	8019cdc <strtoul>
 80191d2:	4605      	mov	r5, r0
 80191d4:	b150      	cbz	r0, 80191ec <rcl_get_default_domain_id+0x4c>
 80191d6:	1c43      	adds	r3, r0, #1
 80191d8:	d00d      	beq.n	80191f6 <rcl_get_default_domain_id+0x56>
 80191da:	6025      	str	r5, [r4, #0]
 80191dc:	2000      	movs	r0, #0
 80191de:	e7ec      	b.n	80191ba <rcl_get_default_domain_id+0x1a>
 80191e0:	200b      	movs	r0, #11
 80191e2:	b003      	add	sp, #12
 80191e4:	bd30      	pop	{r4, r5, pc}
 80191e6:	4618      	mov	r0, r3
 80191e8:	b003      	add	sp, #12
 80191ea:	bd30      	pop	{r4, r5, pc}
 80191ec:	9b01      	ldr	r3, [sp, #4]
 80191ee:	781b      	ldrb	r3, [r3, #0]
 80191f0:	2b00      	cmp	r3, #0
 80191f2:	d0f2      	beq.n	80191da <rcl_get_default_domain_id+0x3a>
 80191f4:	e7e0      	b.n	80191b8 <rcl_get_default_domain_id+0x18>
 80191f6:	f001 f8b1 	bl	801a35c <__errno>
 80191fa:	6803      	ldr	r3, [r0, #0]
 80191fc:	2b22      	cmp	r3, #34	@ 0x22
 80191fe:	d1ec      	bne.n	80191da <rcl_get_default_domain_id+0x3a>
 8019200:	e7da      	b.n	80191b8 <rcl_get_default_domain_id+0x18>
 8019202:	bf00      	nop
 8019204:	0801ba14 	.word	0x0801ba14

08019208 <rcl_expand_topic_name>:
 8019208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801920c:	b08b      	sub	sp, #44	@ 0x2c
 801920e:	9306      	str	r3, [sp, #24]
 8019210:	2800      	cmp	r0, #0
 8019212:	f000 80ad 	beq.w	8019370 <rcl_expand_topic_name+0x168>
 8019216:	460e      	mov	r6, r1
 8019218:	2900      	cmp	r1, #0
 801921a:	f000 80a9 	beq.w	8019370 <rcl_expand_topic_name+0x168>
 801921e:	4617      	mov	r7, r2
 8019220:	2a00      	cmp	r2, #0
 8019222:	f000 80a5 	beq.w	8019370 <rcl_expand_topic_name+0x168>
 8019226:	2b00      	cmp	r3, #0
 8019228:	f000 80a2 	beq.w	8019370 <rcl_expand_topic_name+0x168>
 801922c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801922e:	2b00      	cmp	r3, #0
 8019230:	f000 809e 	beq.w	8019370 <rcl_expand_topic_name+0x168>
 8019234:	2200      	movs	r2, #0
 8019236:	a909      	add	r1, sp, #36	@ 0x24
 8019238:	4680      	mov	r8, r0
 801923a:	f000 f949 	bl	80194d0 <rcl_validate_topic_name>
 801923e:	4604      	mov	r4, r0
 8019240:	2800      	cmp	r0, #0
 8019242:	f040 8096 	bne.w	8019372 <rcl_expand_topic_name+0x16a>
 8019246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019248:	2b00      	cmp	r3, #0
 801924a:	f040 809a 	bne.w	8019382 <rcl_expand_topic_name+0x17a>
 801924e:	4602      	mov	r2, r0
 8019250:	a909      	add	r1, sp, #36	@ 0x24
 8019252:	4630      	mov	r0, r6
 8019254:	f7f5 ffe0 	bl	800f218 <rmw_validate_node_name>
 8019258:	2800      	cmp	r0, #0
 801925a:	f040 808e 	bne.w	801937a <rcl_expand_topic_name+0x172>
 801925e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019260:	2a00      	cmp	r2, #0
 8019262:	f040 8093 	bne.w	801938c <rcl_expand_topic_name+0x184>
 8019266:	a909      	add	r1, sp, #36	@ 0x24
 8019268:	4638      	mov	r0, r7
 801926a:	f7f5 ffb7 	bl	800f1dc <rmw_validate_namespace>
 801926e:	2800      	cmp	r0, #0
 8019270:	f040 8083 	bne.w	801937a <rcl_expand_topic_name+0x172>
 8019274:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8019276:	2c00      	cmp	r4, #0
 8019278:	f040 80ed 	bne.w	8019456 <rcl_expand_topic_name+0x24e>
 801927c:	217b      	movs	r1, #123	@ 0x7b
 801927e:	4640      	mov	r0, r8
 8019280:	f000 ffe0 	bl	801a244 <strchr>
 8019284:	f898 3000 	ldrb.w	r3, [r8]
 8019288:	2b2f      	cmp	r3, #47	@ 0x2f
 801928a:	4605      	mov	r5, r0
 801928c:	f000 809e 	beq.w	80193cc <rcl_expand_topic_name+0x1c4>
 8019290:	2b7e      	cmp	r3, #126	@ 0x7e
 8019292:	f040 80a2 	bne.w	80193da <rcl_expand_topic_name+0x1d2>
 8019296:	4638      	mov	r0, r7
 8019298:	f7e6 ffc4 	bl	8000224 <strlen>
 801929c:	4a82      	ldr	r2, [pc, #520]	@ (80194a8 <rcl_expand_topic_name+0x2a0>)
 801929e:	4b83      	ldr	r3, [pc, #524]	@ (80194ac <rcl_expand_topic_name+0x2a4>)
 80192a0:	2801      	cmp	r0, #1
 80192a2:	bf18      	it	ne
 80192a4:	4613      	movne	r3, r2
 80192a6:	9302      	str	r3, [sp, #8]
 80192a8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80192aa:	9300      	str	r3, [sp, #0]
 80192ac:	e9cd 7603 	strd	r7, r6, [sp, #12]
 80192b0:	f108 0301 	add.w	r3, r8, #1
 80192b4:	9305      	str	r3, [sp, #20]
 80192b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80192ba:	9301      	str	r3, [sp, #4]
 80192bc:	ab14      	add	r3, sp, #80	@ 0x50
 80192be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80192c0:	f7f5 fd56 	bl	800ed70 <rcutils_format_string_limit>
 80192c4:	4682      	mov	sl, r0
 80192c6:	2800      	cmp	r0, #0
 80192c8:	f000 80c7 	beq.w	801945a <rcl_expand_topic_name+0x252>
 80192cc:	2d00      	cmp	r5, #0
 80192ce:	f000 80a2 	beq.w	8019416 <rcl_expand_topic_name+0x20e>
 80192d2:	217b      	movs	r1, #123	@ 0x7b
 80192d4:	f000 ffb6 	bl	801a244 <strchr>
 80192d8:	46d1      	mov	r9, sl
 80192da:	4605      	mov	r5, r0
 80192dc:	9407      	str	r4, [sp, #28]
 80192de:	46d3      	mov	fp, sl
 80192e0:	464c      	mov	r4, r9
 80192e2:	2d00      	cmp	r5, #0
 80192e4:	f000 80be 	beq.w	8019464 <rcl_expand_topic_name+0x25c>
 80192e8:	217d      	movs	r1, #125	@ 0x7d
 80192ea:	4620      	mov	r0, r4
 80192ec:	f000 ffaa 	bl	801a244 <strchr>
 80192f0:	eba0 0905 	sub.w	r9, r0, r5
 80192f4:	f109 0a01 	add.w	sl, r9, #1
 80192f8:	486d      	ldr	r0, [pc, #436]	@ (80194b0 <rcl_expand_topic_name+0x2a8>)
 80192fa:	4652      	mov	r2, sl
 80192fc:	4629      	mov	r1, r5
 80192fe:	f000 ffae 	bl	801a25e <strncmp>
 8019302:	2800      	cmp	r0, #0
 8019304:	d067      	beq.n	80193d6 <rcl_expand_topic_name+0x1ce>
 8019306:	486b      	ldr	r0, [pc, #428]	@ (80194b4 <rcl_expand_topic_name+0x2ac>)
 8019308:	4652      	mov	r2, sl
 801930a:	4629      	mov	r1, r5
 801930c:	f000 ffa7 	bl	801a25e <strncmp>
 8019310:	b130      	cbz	r0, 8019320 <rcl_expand_topic_name+0x118>
 8019312:	4869      	ldr	r0, [pc, #420]	@ (80194b8 <rcl_expand_topic_name+0x2b0>)
 8019314:	4652      	mov	r2, sl
 8019316:	4629      	mov	r1, r5
 8019318:	f000 ffa1 	bl	801a25e <strncmp>
 801931c:	2800      	cmp	r0, #0
 801931e:	d137      	bne.n	8019390 <rcl_expand_topic_name+0x188>
 8019320:	46b9      	mov	r9, r7
 8019322:	ab16      	add	r3, sp, #88	@ 0x58
 8019324:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019328:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801932c:	ab14      	add	r3, sp, #80	@ 0x50
 801932e:	4628      	mov	r0, r5
 8019330:	cb0c      	ldmia	r3, {r2, r3}
 8019332:	4651      	mov	r1, sl
 8019334:	f7f5 fe58 	bl	800efe8 <rcutils_strndup>
 8019338:	4605      	mov	r5, r0
 801933a:	2800      	cmp	r0, #0
 801933c:	f000 809c 	beq.w	8019478 <rcl_expand_topic_name+0x270>
 8019340:	464a      	mov	r2, r9
 8019342:	4620      	mov	r0, r4
 8019344:	ab14      	add	r3, sp, #80	@ 0x50
 8019346:	4629      	mov	r1, r5
 8019348:	f7f5 fd4c 	bl	800ede4 <rcutils_repl_str>
 801934c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801934e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019350:	4604      	mov	r4, r0
 8019352:	4628      	mov	r0, r5
 8019354:	4798      	blx	r3
 8019356:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019358:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801935a:	4658      	mov	r0, fp
 801935c:	4798      	blx	r3
 801935e:	2c00      	cmp	r4, #0
 8019360:	d07b      	beq.n	801945a <rcl_expand_topic_name+0x252>
 8019362:	217b      	movs	r1, #123	@ 0x7b
 8019364:	4620      	mov	r0, r4
 8019366:	f000 ff6d 	bl	801a244 <strchr>
 801936a:	46a3      	mov	fp, r4
 801936c:	4605      	mov	r5, r0
 801936e:	e7b8      	b.n	80192e2 <rcl_expand_topic_name+0xda>
 8019370:	240b      	movs	r4, #11
 8019372:	4620      	mov	r0, r4
 8019374:	b00b      	add	sp, #44	@ 0x2c
 8019376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801937a:	f7fb ffdb 	bl	8015334 <rcl_convert_rmw_ret_to_rcl_ret>
 801937e:	4604      	mov	r4, r0
 8019380:	e7f7      	b.n	8019372 <rcl_expand_topic_name+0x16a>
 8019382:	2467      	movs	r4, #103	@ 0x67
 8019384:	4620      	mov	r0, r4
 8019386:	b00b      	add	sp, #44	@ 0x2c
 8019388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801938c:	24c9      	movs	r4, #201	@ 0xc9
 801938e:	e7f0      	b.n	8019372 <rcl_expand_topic_name+0x16a>
 8019390:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8019394:	9806      	ldr	r0, [sp, #24]
 8019396:	1c69      	adds	r1, r5, #1
 8019398:	f7fe f934 	bl	8017604 <rcutils_string_map_getn>
 801939c:	4681      	mov	r9, r0
 801939e:	2800      	cmp	r0, #0
 80193a0:	d1bf      	bne.n	8019322 <rcl_expand_topic_name+0x11a>
 80193a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80193a4:	aa16      	add	r2, sp, #88	@ 0x58
 80193a6:	6018      	str	r0, [r3, #0]
 80193a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80193aa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80193ae:	ab14      	add	r3, sp, #80	@ 0x50
 80193b0:	cb0c      	ldmia	r3, {r2, r3}
 80193b2:	4651      	mov	r1, sl
 80193b4:	4628      	mov	r0, r5
 80193b6:	f7f5 fe17 	bl	800efe8 <rcutils_strndup>
 80193ba:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80193bc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80193be:	4798      	blx	r3
 80193c0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80193c2:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80193c4:	4658      	mov	r0, fp
 80193c6:	2469      	movs	r4, #105	@ 0x69
 80193c8:	4798      	blx	r3
 80193ca:	e7d2      	b.n	8019372 <rcl_expand_topic_name+0x16a>
 80193cc:	2800      	cmp	r0, #0
 80193ce:	d05b      	beq.n	8019488 <rcl_expand_topic_name+0x280>
 80193d0:	46c1      	mov	r9, r8
 80193d2:	46a2      	mov	sl, r4
 80193d4:	e782      	b.n	80192dc <rcl_expand_topic_name+0xd4>
 80193d6:	46b1      	mov	r9, r6
 80193d8:	e7a3      	b.n	8019322 <rcl_expand_topic_name+0x11a>
 80193da:	2800      	cmp	r0, #0
 80193dc:	d1f8      	bne.n	80193d0 <rcl_expand_topic_name+0x1c8>
 80193de:	4638      	mov	r0, r7
 80193e0:	f7e6 ff20 	bl	8000224 <strlen>
 80193e4:	4a35      	ldr	r2, [pc, #212]	@ (80194bc <rcl_expand_topic_name+0x2b4>)
 80193e6:	4b36      	ldr	r3, [pc, #216]	@ (80194c0 <rcl_expand_topic_name+0x2b8>)
 80193e8:	f8cd 8010 	str.w	r8, [sp, #16]
 80193ec:	2801      	cmp	r0, #1
 80193ee:	bf18      	it	ne
 80193f0:	4613      	movne	r3, r2
 80193f2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80193f6:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80193fa:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80193fc:	9703      	str	r7, [sp, #12]
 80193fe:	9200      	str	r2, [sp, #0]
 8019400:	ab14      	add	r3, sp, #80	@ 0x50
 8019402:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019404:	f7f5 fcb4 	bl	800ed70 <rcutils_format_string_limit>
 8019408:	4682      	mov	sl, r0
 801940a:	4653      	mov	r3, sl
 801940c:	b32b      	cbz	r3, 801945a <rcl_expand_topic_name+0x252>
 801940e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019410:	f8c3 a000 	str.w	sl, [r3]
 8019414:	e7ad      	b.n	8019372 <rcl_expand_topic_name+0x16a>
 8019416:	f89a 3000 	ldrb.w	r3, [sl]
 801941a:	2b2f      	cmp	r3, #47	@ 0x2f
 801941c:	d0f7      	beq.n	801940e <rcl_expand_topic_name+0x206>
 801941e:	4638      	mov	r0, r7
 8019420:	f7e6 ff00 	bl	8000224 <strlen>
 8019424:	4a25      	ldr	r2, [pc, #148]	@ (80194bc <rcl_expand_topic_name+0x2b4>)
 8019426:	4b26      	ldr	r3, [pc, #152]	@ (80194c0 <rcl_expand_topic_name+0x2b8>)
 8019428:	f8cd a010 	str.w	sl, [sp, #16]
 801942c:	2801      	cmp	r0, #1
 801942e:	bf18      	it	ne
 8019430:	4613      	movne	r3, r2
 8019432:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8019436:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801943a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801943c:	9703      	str	r7, [sp, #12]
 801943e:	9200      	str	r2, [sp, #0]
 8019440:	ab14      	add	r3, sp, #80	@ 0x50
 8019442:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019444:	f7f5 fc94 	bl	800ed70 <rcutils_format_string_limit>
 8019448:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801944a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801944c:	4605      	mov	r5, r0
 801944e:	4650      	mov	r0, sl
 8019450:	4798      	blx	r3
 8019452:	46aa      	mov	sl, r5
 8019454:	e7d9      	b.n	801940a <rcl_expand_topic_name+0x202>
 8019456:	24ca      	movs	r4, #202	@ 0xca
 8019458:	e78b      	b.n	8019372 <rcl_expand_topic_name+0x16a>
 801945a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801945c:	2300      	movs	r3, #0
 801945e:	6013      	str	r3, [r2, #0]
 8019460:	240a      	movs	r4, #10
 8019462:	e786      	b.n	8019372 <rcl_expand_topic_name+0x16a>
 8019464:	465b      	mov	r3, fp
 8019466:	9c07      	ldr	r4, [sp, #28]
 8019468:	46da      	mov	sl, fp
 801946a:	2b00      	cmp	r3, #0
 801946c:	d1d3      	bne.n	8019416 <rcl_expand_topic_name+0x20e>
 801946e:	f898 3000 	ldrb.w	r3, [r8]
 8019472:	2b2f      	cmp	r3, #47	@ 0x2f
 8019474:	d0cb      	beq.n	801940e <rcl_expand_topic_name+0x206>
 8019476:	e7b2      	b.n	80193de <rcl_expand_topic_name+0x1d6>
 8019478:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 801947c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801947e:	6015      	str	r5, [r2, #0]
 8019480:	4658      	mov	r0, fp
 8019482:	4798      	blx	r3
 8019484:	240a      	movs	r4, #10
 8019486:	e774      	b.n	8019372 <rcl_expand_topic_name+0x16a>
 8019488:	ab17      	add	r3, sp, #92	@ 0x5c
 801948a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801948e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8019492:	ab14      	add	r3, sp, #80	@ 0x50
 8019494:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019496:	4640      	mov	r0, r8
 8019498:	f7f5 fd84 	bl	800efa4 <rcutils_strdup>
 801949c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801949e:	2800      	cmp	r0, #0
 80194a0:	6018      	str	r0, [r3, #0]
 80194a2:	bf08      	it	eq
 80194a4:	240a      	moveq	r4, #10
 80194a6:	e764      	b.n	8019372 <rcl_expand_topic_name+0x16a>
 80194a8:	0801ba24 	.word	0x0801ba24
 80194ac:	0801b720 	.word	0x0801b720
 80194b0:	0801ba2c 	.word	0x0801ba2c
 80194b4:	0801ba34 	.word	0x0801ba34
 80194b8:	0801ba3c 	.word	0x0801ba3c
 80194bc:	0801b3ec 	.word	0x0801b3ec
 80194c0:	0801b3e4 	.word	0x0801b3e4

080194c4 <rcl_get_default_topic_name_substitutions>:
 80194c4:	2800      	cmp	r0, #0
 80194c6:	bf0c      	ite	eq
 80194c8:	200b      	moveq	r0, #11
 80194ca:	2000      	movne	r0, #0
 80194cc:	4770      	bx	lr
 80194ce:	bf00      	nop

080194d0 <rcl_validate_topic_name>:
 80194d0:	2800      	cmp	r0, #0
 80194d2:	d07a      	beq.n	80195ca <rcl_validate_topic_name+0xfa>
 80194d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80194d8:	460e      	mov	r6, r1
 80194da:	2900      	cmp	r1, #0
 80194dc:	d07c      	beq.n	80195d8 <rcl_validate_topic_name+0x108>
 80194de:	4617      	mov	r7, r2
 80194e0:	4605      	mov	r5, r0
 80194e2:	f7e6 fe9f 	bl	8000224 <strlen>
 80194e6:	b1b0      	cbz	r0, 8019516 <rcl_validate_topic_name+0x46>
 80194e8:	f895 9000 	ldrb.w	r9, [r5]
 80194ec:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8019670 <rcl_validate_topic_name+0x1a0>
 80194f0:	f81c 3009 	ldrb.w	r3, [ip, r9]
 80194f4:	f013 0304 	ands.w	r3, r3, #4
 80194f8:	d169      	bne.n	80195ce <rcl_validate_topic_name+0xfe>
 80194fa:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 80194fe:	f815 2008 	ldrb.w	r2, [r5, r8]
 8019502:	2a2f      	cmp	r2, #47	@ 0x2f
 8019504:	d10e      	bne.n	8019524 <rcl_validate_topic_name+0x54>
 8019506:	2202      	movs	r2, #2
 8019508:	6032      	str	r2, [r6, #0]
 801950a:	b36f      	cbz	r7, 8019568 <rcl_validate_topic_name+0x98>
 801950c:	f8c7 8000 	str.w	r8, [r7]
 8019510:	4618      	mov	r0, r3
 8019512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019516:	2301      	movs	r3, #1
 8019518:	6033      	str	r3, [r6, #0]
 801951a:	b32f      	cbz	r7, 8019568 <rcl_validate_topic_name+0x98>
 801951c:	2000      	movs	r0, #0
 801951e:	6038      	str	r0, [r7, #0]
 8019520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019524:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8019528:	461c      	mov	r4, r3
 801952a:	4619      	mov	r1, r3
 801952c:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8019530:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8019534:	f1be 0f09 	cmp.w	lr, #9
 8019538:	d919      	bls.n	801956e <rcl_validate_topic_name+0x9e>
 801953a:	f022 0e20 	bic.w	lr, r2, #32
 801953e:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8019542:	f1be 0f19 	cmp.w	lr, #25
 8019546:	d912      	bls.n	801956e <rcl_validate_topic_name+0x9e>
 8019548:	2a5f      	cmp	r2, #95	@ 0x5f
 801954a:	d019      	beq.n	8019580 <rcl_validate_topic_name+0xb0>
 801954c:	2a2f      	cmp	r2, #47	@ 0x2f
 801954e:	d051      	beq.n	80195f4 <rcl_validate_topic_name+0x124>
 8019550:	2a7e      	cmp	r2, #126	@ 0x7e
 8019552:	d048      	beq.n	80195e6 <rcl_validate_topic_name+0x116>
 8019554:	2a7b      	cmp	r2, #123	@ 0x7b
 8019556:	d054      	beq.n	8019602 <rcl_validate_topic_name+0x132>
 8019558:	2a7d      	cmp	r2, #125	@ 0x7d
 801955a:	d161      	bne.n	8019620 <rcl_validate_topic_name+0x150>
 801955c:	2c00      	cmp	r4, #0
 801955e:	d155      	bne.n	801960c <rcl_validate_topic_name+0x13c>
 8019560:	2305      	movs	r3, #5
 8019562:	6033      	str	r3, [r6, #0]
 8019564:	b107      	cbz	r7, 8019568 <rcl_validate_topic_name+0x98>
 8019566:	6039      	str	r1, [r7, #0]
 8019568:	2000      	movs	r0, #0
 801956a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801956e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019572:	0752      	lsls	r2, r2, #29
 8019574:	d504      	bpl.n	8019580 <rcl_validate_topic_name+0xb0>
 8019576:	b11c      	cbz	r4, 8019580 <rcl_validate_topic_name+0xb0>
 8019578:	b111      	cbz	r1, 8019580 <rcl_validate_topic_name+0xb0>
 801957a:	1e4a      	subs	r2, r1, #1
 801957c:	429a      	cmp	r2, r3
 801957e:	d02d      	beq.n	80195dc <rcl_validate_topic_name+0x10c>
 8019580:	3101      	adds	r1, #1
 8019582:	4288      	cmp	r0, r1
 8019584:	d1d2      	bne.n	801952c <rcl_validate_topic_name+0x5c>
 8019586:	2c00      	cmp	r4, #0
 8019588:	d145      	bne.n	8019616 <rcl_validate_topic_name+0x146>
 801958a:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 801958e:	d04f      	beq.n	8019630 <rcl_validate_topic_name+0x160>
 8019590:	4620      	mov	r0, r4
 8019592:	2301      	movs	r3, #1
 8019594:	e006      	b.n	80195a4 <rcl_validate_topic_name+0xd4>
 8019596:	428b      	cmp	r3, r1
 8019598:	f105 0501 	add.w	r5, r5, #1
 801959c:	f103 0201 	add.w	r2, r3, #1
 80195a0:	d236      	bcs.n	8019610 <rcl_validate_topic_name+0x140>
 80195a2:	4613      	mov	r3, r2
 80195a4:	4580      	cmp	r8, r0
 80195a6:	f100 0001 	add.w	r0, r0, #1
 80195aa:	d0f4      	beq.n	8019596 <rcl_validate_topic_name+0xc6>
 80195ac:	782a      	ldrb	r2, [r5, #0]
 80195ae:	2a2f      	cmp	r2, #47	@ 0x2f
 80195b0:	d1f1      	bne.n	8019596 <rcl_validate_topic_name+0xc6>
 80195b2:	786a      	ldrb	r2, [r5, #1]
 80195b4:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80195b8:	0754      	lsls	r4, r2, #29
 80195ba:	d5ec      	bpl.n	8019596 <rcl_validate_topic_name+0xc6>
 80195bc:	2204      	movs	r2, #4
 80195be:	6032      	str	r2, [r6, #0]
 80195c0:	2f00      	cmp	r7, #0
 80195c2:	d0d1      	beq.n	8019568 <rcl_validate_topic_name+0x98>
 80195c4:	603b      	str	r3, [r7, #0]
 80195c6:	2000      	movs	r0, #0
 80195c8:	e7aa      	b.n	8019520 <rcl_validate_topic_name+0x50>
 80195ca:	200b      	movs	r0, #11
 80195cc:	4770      	bx	lr
 80195ce:	2304      	movs	r3, #4
 80195d0:	6033      	str	r3, [r6, #0]
 80195d2:	2f00      	cmp	r7, #0
 80195d4:	d1a2      	bne.n	801951c <rcl_validate_topic_name+0x4c>
 80195d6:	e7c7      	b.n	8019568 <rcl_validate_topic_name+0x98>
 80195d8:	200b      	movs	r0, #11
 80195da:	e7a1      	b.n	8019520 <rcl_validate_topic_name+0x50>
 80195dc:	2309      	movs	r3, #9
 80195de:	6033      	str	r3, [r6, #0]
 80195e0:	2f00      	cmp	r7, #0
 80195e2:	d1c0      	bne.n	8019566 <rcl_validate_topic_name+0x96>
 80195e4:	e7c0      	b.n	8019568 <rcl_validate_topic_name+0x98>
 80195e6:	2900      	cmp	r1, #0
 80195e8:	d0ca      	beq.n	8019580 <rcl_validate_topic_name+0xb0>
 80195ea:	2306      	movs	r3, #6
 80195ec:	6033      	str	r3, [r6, #0]
 80195ee:	2f00      	cmp	r7, #0
 80195f0:	d1b9      	bne.n	8019566 <rcl_validate_topic_name+0x96>
 80195f2:	e7b9      	b.n	8019568 <rcl_validate_topic_name+0x98>
 80195f4:	2c00      	cmp	r4, #0
 80195f6:	d0c3      	beq.n	8019580 <rcl_validate_topic_name+0xb0>
 80195f8:	2308      	movs	r3, #8
 80195fa:	6033      	str	r3, [r6, #0]
 80195fc:	2f00      	cmp	r7, #0
 80195fe:	d1b2      	bne.n	8019566 <rcl_validate_topic_name+0x96>
 8019600:	e7b2      	b.n	8019568 <rcl_validate_topic_name+0x98>
 8019602:	2c00      	cmp	r4, #0
 8019604:	d1f8      	bne.n	80195f8 <rcl_validate_topic_name+0x128>
 8019606:	460b      	mov	r3, r1
 8019608:	2401      	movs	r4, #1
 801960a:	e7b9      	b.n	8019580 <rcl_validate_topic_name+0xb0>
 801960c:	2400      	movs	r4, #0
 801960e:	e7b7      	b.n	8019580 <rcl_validate_topic_name+0xb0>
 8019610:	2000      	movs	r0, #0
 8019612:	6030      	str	r0, [r6, #0]
 8019614:	e784      	b.n	8019520 <rcl_validate_topic_name+0x50>
 8019616:	2205      	movs	r2, #5
 8019618:	6032      	str	r2, [r6, #0]
 801961a:	2f00      	cmp	r7, #0
 801961c:	d1d2      	bne.n	80195c4 <rcl_validate_topic_name+0xf4>
 801961e:	e7a3      	b.n	8019568 <rcl_validate_topic_name+0x98>
 8019620:	2c00      	cmp	r4, #0
 8019622:	bf14      	ite	ne
 8019624:	2308      	movne	r3, #8
 8019626:	2303      	moveq	r3, #3
 8019628:	6033      	str	r3, [r6, #0]
 801962a:	2f00      	cmp	r7, #0
 801962c:	d19b      	bne.n	8019566 <rcl_validate_topic_name+0x96>
 801962e:	e79b      	b.n	8019568 <rcl_validate_topic_name+0x98>
 8019630:	2301      	movs	r3, #1
 8019632:	e00a      	b.n	801964a <rcl_validate_topic_name+0x17a>
 8019634:	2c01      	cmp	r4, #1
 8019636:	d013      	beq.n	8019660 <rcl_validate_topic_name+0x190>
 8019638:	4299      	cmp	r1, r3
 801963a:	f104 0401 	add.w	r4, r4, #1
 801963e:	f105 0501 	add.w	r5, r5, #1
 8019642:	f103 0201 	add.w	r2, r3, #1
 8019646:	d9e3      	bls.n	8019610 <rcl_validate_topic_name+0x140>
 8019648:	4613      	mov	r3, r2
 801964a:	45a0      	cmp	r8, r4
 801964c:	d0f4      	beq.n	8019638 <rcl_validate_topic_name+0x168>
 801964e:	782a      	ldrb	r2, [r5, #0]
 8019650:	2a2f      	cmp	r2, #47	@ 0x2f
 8019652:	d1ef      	bne.n	8019634 <rcl_validate_topic_name+0x164>
 8019654:	786a      	ldrb	r2, [r5, #1]
 8019656:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801965a:	0752      	lsls	r2, r2, #29
 801965c:	d5ec      	bpl.n	8019638 <rcl_validate_topic_name+0x168>
 801965e:	e7ad      	b.n	80195bc <rcl_validate_topic_name+0xec>
 8019660:	2307      	movs	r3, #7
 8019662:	6033      	str	r3, [r6, #0]
 8019664:	2f00      	cmp	r7, #0
 8019666:	f43f af7f 	beq.w	8019568 <rcl_validate_topic_name+0x98>
 801966a:	603c      	str	r4, [r7, #0]
 801966c:	2000      	movs	r0, #0
 801966e:	e757      	b.n	8019520 <rcl_validate_topic_name+0x50>
 8019670:	0801c1f7 	.word	0x0801c1f7

08019674 <geometry_msgs__msg__Pose__init>:
 8019674:	b570      	push	{r4, r5, r6, lr}
 8019676:	4605      	mov	r5, r0
 8019678:	b1a8      	cbz	r0, 80196a6 <geometry_msgs__msg__Pose__init+0x32>
 801967a:	f000 f8e5 	bl	8019848 <geometry_msgs__msg__Point__init>
 801967e:	4604      	mov	r4, r0
 8019680:	b140      	cbz	r0, 8019694 <geometry_msgs__msg__Pose__init+0x20>
 8019682:	f105 0618 	add.w	r6, r5, #24
 8019686:	4630      	mov	r0, r6
 8019688:	f000 f826 	bl	80196d8 <geometry_msgs__msg__Quaternion__init>
 801968c:	4604      	mov	r4, r0
 801968e:	b168      	cbz	r0, 80196ac <geometry_msgs__msg__Pose__init+0x38>
 8019690:	4620      	mov	r0, r4
 8019692:	bd70      	pop	{r4, r5, r6, pc}
 8019694:	4628      	mov	r0, r5
 8019696:	f000 f8db 	bl	8019850 <geometry_msgs__msg__Point__fini>
 801969a:	f105 0018 	add.w	r0, r5, #24
 801969e:	f000 f82f 	bl	8019700 <geometry_msgs__msg__Quaternion__fini>
 80196a2:	4620      	mov	r0, r4
 80196a4:	bd70      	pop	{r4, r5, r6, pc}
 80196a6:	4604      	mov	r4, r0
 80196a8:	4620      	mov	r0, r4
 80196aa:	bd70      	pop	{r4, r5, r6, pc}
 80196ac:	4628      	mov	r0, r5
 80196ae:	f000 f8cf 	bl	8019850 <geometry_msgs__msg__Point__fini>
 80196b2:	4630      	mov	r0, r6
 80196b4:	f000 f824 	bl	8019700 <geometry_msgs__msg__Quaternion__fini>
 80196b8:	e7ea      	b.n	8019690 <geometry_msgs__msg__Pose__init+0x1c>
 80196ba:	bf00      	nop

080196bc <geometry_msgs__msg__Pose__fini>:
 80196bc:	b148      	cbz	r0, 80196d2 <geometry_msgs__msg__Pose__fini+0x16>
 80196be:	b510      	push	{r4, lr}
 80196c0:	4604      	mov	r4, r0
 80196c2:	f000 f8c5 	bl	8019850 <geometry_msgs__msg__Point__fini>
 80196c6:	f104 0018 	add.w	r0, r4, #24
 80196ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80196ce:	f000 b817 	b.w	8019700 <geometry_msgs__msg__Quaternion__fini>
 80196d2:	4770      	bx	lr
 80196d4:	0000      	movs	r0, r0
	...

080196d8 <geometry_msgs__msg__Quaternion__init>:
 80196d8:	b160      	cbz	r0, 80196f4 <geometry_msgs__msg__Quaternion__init+0x1c>
 80196da:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 80196f8 <geometry_msgs__msg__Quaternion__init+0x20>
 80196de:	2200      	movs	r2, #0
 80196e0:	2300      	movs	r3, #0
 80196e2:	e9c0 2300 	strd	r2, r3, [r0]
 80196e6:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80196ea:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80196ee:	ed80 7b06 	vstr	d7, [r0, #24]
 80196f2:	2001      	movs	r0, #1
 80196f4:	4770      	bx	lr
 80196f6:	bf00      	nop
 80196f8:	00000000 	.word	0x00000000
 80196fc:	3ff00000 	.word	0x3ff00000

08019700 <geometry_msgs__msg__Quaternion__fini>:
 8019700:	4770      	bx	lr
 8019702:	bf00      	nop

08019704 <geometry_msgs__msg__Point__rosidl_typesupport_introspection_c__Point_init_function>:
 8019704:	f000 b8a0 	b.w	8019848 <geometry_msgs__msg__Point__init>

08019708 <geometry_msgs__msg__Point__rosidl_typesupport_introspection_c__Point_fini_function>:
 8019708:	f000 b8a2 	b.w	8019850 <geometry_msgs__msg__Point__fini>

0801970c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point>:
 801970c:	4b04      	ldr	r3, [pc, #16]	@ (8019720 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x14>)
 801970e:	681a      	ldr	r2, [r3, #0]
 8019710:	b10a      	cbz	r2, 8019716 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0xa>
 8019712:	4803      	ldr	r0, [pc, #12]	@ (8019720 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x14>)
 8019714:	4770      	bx	lr
 8019716:	4a03      	ldr	r2, [pc, #12]	@ (8019724 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x18>)
 8019718:	4801      	ldr	r0, [pc, #4]	@ (8019720 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x14>)
 801971a:	6812      	ldr	r2, [r2, #0]
 801971c:	601a      	str	r2, [r3, #0]
 801971e:	4770      	bx	lr
 8019720:	200008e8 	.word	0x200008e8
 8019724:	2000032c 	.word	0x2000032c

08019728 <get_serialized_size_geometry_msgs__msg__Point>:
 8019728:	b1b8      	cbz	r0, 801975a <get_serialized_size_geometry_msgs__msg__Point+0x32>
 801972a:	b538      	push	{r3, r4, r5, lr}
 801972c:	460d      	mov	r5, r1
 801972e:	4628      	mov	r0, r5
 8019730:	2108      	movs	r1, #8
 8019732:	f7f3 f817 	bl	800c764 <ucdr_alignment>
 8019736:	f105 0308 	add.w	r3, r5, #8
 801973a:	181c      	adds	r4, r3, r0
 801973c:	2108      	movs	r1, #8
 801973e:	4620      	mov	r0, r4
 8019740:	f7f3 f810 	bl	800c764 <ucdr_alignment>
 8019744:	3008      	adds	r0, #8
 8019746:	4404      	add	r4, r0
 8019748:	2108      	movs	r1, #8
 801974a:	4620      	mov	r0, r4
 801974c:	f7f3 f80a 	bl	800c764 <ucdr_alignment>
 8019750:	f1c5 0508 	rsb	r5, r5, #8
 8019754:	4428      	add	r0, r5
 8019756:	4420      	add	r0, r4
 8019758:	bd38      	pop	{r3, r4, r5, pc}
 801975a:	4770      	bx	lr

0801975c <_Point__cdr_deserialize>:
 801975c:	b538      	push	{r3, r4, r5, lr}
 801975e:	460c      	mov	r4, r1
 8019760:	b171      	cbz	r1, 8019780 <_Point__cdr_deserialize+0x24>
 8019762:	4605      	mov	r5, r0
 8019764:	f7f2 fe12 	bl	800c38c <ucdr_deserialize_double>
 8019768:	f104 0108 	add.w	r1, r4, #8
 801976c:	4628      	mov	r0, r5
 801976e:	f7f2 fe0d 	bl	800c38c <ucdr_deserialize_double>
 8019772:	f104 0110 	add.w	r1, r4, #16
 8019776:	4628      	mov	r0, r5
 8019778:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801977c:	f7f2 be06 	b.w	800c38c <ucdr_deserialize_double>
 8019780:	4608      	mov	r0, r1
 8019782:	bd38      	pop	{r3, r4, r5, pc}

08019784 <_Point__cdr_serialize>:
 8019784:	b198      	cbz	r0, 80197ae <_Point__cdr_serialize+0x2a>
 8019786:	b538      	push	{r3, r4, r5, lr}
 8019788:	ed90 0b00 	vldr	d0, [r0]
 801978c:	460d      	mov	r5, r1
 801978e:	4604      	mov	r4, r0
 8019790:	4608      	mov	r0, r1
 8019792:	f7f2 fc59 	bl	800c048 <ucdr_serialize_double>
 8019796:	ed94 0b02 	vldr	d0, [r4, #8]
 801979a:	4628      	mov	r0, r5
 801979c:	f7f2 fc54 	bl	800c048 <ucdr_serialize_double>
 80197a0:	ed94 0b04 	vldr	d0, [r4, #16]
 80197a4:	4628      	mov	r0, r5
 80197a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80197aa:	f7f2 bc4d 	b.w	800c048 <ucdr_serialize_double>
 80197ae:	4770      	bx	lr

080197b0 <_Point__get_serialized_size>:
 80197b0:	b198      	cbz	r0, 80197da <_Point__get_serialized_size+0x2a>
 80197b2:	b510      	push	{r4, lr}
 80197b4:	2108      	movs	r1, #8
 80197b6:	2000      	movs	r0, #0
 80197b8:	f7f2 ffd4 	bl	800c764 <ucdr_alignment>
 80197bc:	f100 0408 	add.w	r4, r0, #8
 80197c0:	2108      	movs	r1, #8
 80197c2:	4620      	mov	r0, r4
 80197c4:	f7f2 ffce 	bl	800c764 <ucdr_alignment>
 80197c8:	3008      	adds	r0, #8
 80197ca:	4404      	add	r4, r0
 80197cc:	2108      	movs	r1, #8
 80197ce:	4620      	mov	r0, r4
 80197d0:	f7f2 ffc8 	bl	800c764 <ucdr_alignment>
 80197d4:	3008      	adds	r0, #8
 80197d6:	4420      	add	r0, r4
 80197d8:	bd10      	pop	{r4, pc}
 80197da:	4770      	bx	lr

080197dc <_Point__max_serialized_size>:
 80197dc:	b538      	push	{r3, r4, r5, lr}
 80197de:	2108      	movs	r1, #8
 80197e0:	2000      	movs	r0, #0
 80197e2:	f7f2 ffbf 	bl	800c764 <ucdr_alignment>
 80197e6:	f100 0508 	add.w	r5, r0, #8
 80197ea:	2108      	movs	r1, #8
 80197ec:	4628      	mov	r0, r5
 80197ee:	f7f2 ffb9 	bl	800c764 <ucdr_alignment>
 80197f2:	f100 0408 	add.w	r4, r0, #8
 80197f6:	442c      	add	r4, r5
 80197f8:	2108      	movs	r1, #8
 80197fa:	4620      	mov	r0, r4
 80197fc:	f7f2 ffb2 	bl	800c764 <ucdr_alignment>
 8019800:	3008      	adds	r0, #8
 8019802:	4420      	add	r0, r4
 8019804:	bd38      	pop	{r3, r4, r5, pc}
 8019806:	bf00      	nop

08019808 <max_serialized_size_geometry_msgs__msg__Point>:
 8019808:	b570      	push	{r4, r5, r6, lr}
 801980a:	2301      	movs	r3, #1
 801980c:	460c      	mov	r4, r1
 801980e:	7003      	strb	r3, [r0, #0]
 8019810:	2108      	movs	r1, #8
 8019812:	4620      	mov	r0, r4
 8019814:	f7f2 ffa6 	bl	800c764 <ucdr_alignment>
 8019818:	f104 0508 	add.w	r5, r4, #8
 801981c:	1946      	adds	r6, r0, r5
 801981e:	2108      	movs	r1, #8
 8019820:	4630      	mov	r0, r6
 8019822:	f7f2 ff9f 	bl	800c764 <ucdr_alignment>
 8019826:	f100 0508 	add.w	r5, r0, #8
 801982a:	4435      	add	r5, r6
 801982c:	2108      	movs	r1, #8
 801982e:	4628      	mov	r0, r5
 8019830:	f7f2 ff98 	bl	800c764 <ucdr_alignment>
 8019834:	f1c4 0408 	rsb	r4, r4, #8
 8019838:	4420      	add	r0, r4
 801983a:	4428      	add	r0, r5
 801983c:	bd70      	pop	{r4, r5, r6, pc}
 801983e:	bf00      	nop

08019840 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>:
 8019840:	4800      	ldr	r0, [pc, #0]	@ (8019844 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x4>)
 8019842:	4770      	bx	lr
 8019844:	200008f4 	.word	0x200008f4

08019848 <geometry_msgs__msg__Point__init>:
 8019848:	3800      	subs	r0, #0
 801984a:	bf18      	it	ne
 801984c:	2001      	movne	r0, #1
 801984e:	4770      	bx	lr

08019850 <geometry_msgs__msg__Point__fini>:
 8019850:	4770      	bx	lr
 8019852:	bf00      	nop

08019854 <calloc>:
 8019854:	4b02      	ldr	r3, [pc, #8]	@ (8019860 <calloc+0xc>)
 8019856:	460a      	mov	r2, r1
 8019858:	4601      	mov	r1, r0
 801985a:	6818      	ldr	r0, [r3, #0]
 801985c:	f000 b802 	b.w	8019864 <_calloc_r>
 8019860:	20000928 	.word	0x20000928

08019864 <_calloc_r>:
 8019864:	b570      	push	{r4, r5, r6, lr}
 8019866:	fba1 5402 	umull	r5, r4, r1, r2
 801986a:	b934      	cbnz	r4, 801987a <_calloc_r+0x16>
 801986c:	4629      	mov	r1, r5
 801986e:	f000 f899 	bl	80199a4 <_malloc_r>
 8019872:	4606      	mov	r6, r0
 8019874:	b928      	cbnz	r0, 8019882 <_calloc_r+0x1e>
 8019876:	4630      	mov	r0, r6
 8019878:	bd70      	pop	{r4, r5, r6, pc}
 801987a:	220c      	movs	r2, #12
 801987c:	6002      	str	r2, [r0, #0]
 801987e:	2600      	movs	r6, #0
 8019880:	e7f9      	b.n	8019876 <_calloc_r+0x12>
 8019882:	462a      	mov	r2, r5
 8019884:	4621      	mov	r1, r4
 8019886:	f000 fcd5 	bl	801a234 <memset>
 801988a:	e7f4      	b.n	8019876 <_calloc_r+0x12>

0801988c <exit>:
 801988c:	b508      	push	{r3, lr}
 801988e:	4b06      	ldr	r3, [pc, #24]	@ (80198a8 <exit+0x1c>)
 8019890:	4604      	mov	r4, r0
 8019892:	b113      	cbz	r3, 801989a <exit+0xe>
 8019894:	2100      	movs	r1, #0
 8019896:	f3af 8000 	nop.w
 801989a:	4b04      	ldr	r3, [pc, #16]	@ (80198ac <exit+0x20>)
 801989c:	681b      	ldr	r3, [r3, #0]
 801989e:	b103      	cbz	r3, 80198a2 <exit+0x16>
 80198a0:	4798      	blx	r3
 80198a2:	4620      	mov	r0, r4
 80198a4:	f7ea f96e 	bl	8003b84 <_exit>
 80198a8:	00000000 	.word	0x00000000
 80198ac:	20011acc 	.word	0x20011acc

080198b0 <getenv>:
 80198b0:	b507      	push	{r0, r1, r2, lr}
 80198b2:	4b04      	ldr	r3, [pc, #16]	@ (80198c4 <getenv+0x14>)
 80198b4:	4601      	mov	r1, r0
 80198b6:	aa01      	add	r2, sp, #4
 80198b8:	6818      	ldr	r0, [r3, #0]
 80198ba:	f000 f805 	bl	80198c8 <_findenv_r>
 80198be:	b003      	add	sp, #12
 80198c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80198c4:	20000928 	.word	0x20000928

080198c8 <_findenv_r>:
 80198c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198cc:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801993c <_findenv_r+0x74>
 80198d0:	4606      	mov	r6, r0
 80198d2:	4689      	mov	r9, r1
 80198d4:	4617      	mov	r7, r2
 80198d6:	f000 fda3 	bl	801a420 <__env_lock>
 80198da:	f8da 4000 	ldr.w	r4, [sl]
 80198de:	b134      	cbz	r4, 80198ee <_findenv_r+0x26>
 80198e0:	464b      	mov	r3, r9
 80198e2:	4698      	mov	r8, r3
 80198e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80198e8:	b13a      	cbz	r2, 80198fa <_findenv_r+0x32>
 80198ea:	2a3d      	cmp	r2, #61	@ 0x3d
 80198ec:	d1f9      	bne.n	80198e2 <_findenv_r+0x1a>
 80198ee:	4630      	mov	r0, r6
 80198f0:	f000 fd9c 	bl	801a42c <__env_unlock>
 80198f4:	2000      	movs	r0, #0
 80198f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198fa:	eba8 0809 	sub.w	r8, r8, r9
 80198fe:	46a3      	mov	fp, r4
 8019900:	f854 0b04 	ldr.w	r0, [r4], #4
 8019904:	2800      	cmp	r0, #0
 8019906:	d0f2      	beq.n	80198ee <_findenv_r+0x26>
 8019908:	4642      	mov	r2, r8
 801990a:	4649      	mov	r1, r9
 801990c:	f000 fca7 	bl	801a25e <strncmp>
 8019910:	2800      	cmp	r0, #0
 8019912:	d1f4      	bne.n	80198fe <_findenv_r+0x36>
 8019914:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8019918:	eb03 0508 	add.w	r5, r3, r8
 801991c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8019920:	2b3d      	cmp	r3, #61	@ 0x3d
 8019922:	d1ec      	bne.n	80198fe <_findenv_r+0x36>
 8019924:	f8da 3000 	ldr.w	r3, [sl]
 8019928:	ebab 0303 	sub.w	r3, fp, r3
 801992c:	109b      	asrs	r3, r3, #2
 801992e:	4630      	mov	r0, r6
 8019930:	603b      	str	r3, [r7, #0]
 8019932:	f000 fd7b 	bl	801a42c <__env_unlock>
 8019936:	1c68      	adds	r0, r5, #1
 8019938:	e7dd      	b.n	80198f6 <_findenv_r+0x2e>
 801993a:	bf00      	nop
 801993c:	20000020 	.word	0x20000020

08019940 <malloc>:
 8019940:	4b02      	ldr	r3, [pc, #8]	@ (801994c <malloc+0xc>)
 8019942:	4601      	mov	r1, r0
 8019944:	6818      	ldr	r0, [r3, #0]
 8019946:	f000 b82d 	b.w	80199a4 <_malloc_r>
 801994a:	bf00      	nop
 801994c:	20000928 	.word	0x20000928

08019950 <free>:
 8019950:	4b02      	ldr	r3, [pc, #8]	@ (801995c <free+0xc>)
 8019952:	4601      	mov	r1, r0
 8019954:	6818      	ldr	r0, [r3, #0]
 8019956:	f000 bd6f 	b.w	801a438 <_free_r>
 801995a:	bf00      	nop
 801995c:	20000928 	.word	0x20000928

08019960 <sbrk_aligned>:
 8019960:	b570      	push	{r4, r5, r6, lr}
 8019962:	4e0f      	ldr	r6, [pc, #60]	@ (80199a0 <sbrk_aligned+0x40>)
 8019964:	460c      	mov	r4, r1
 8019966:	6831      	ldr	r1, [r6, #0]
 8019968:	4605      	mov	r5, r0
 801996a:	b911      	cbnz	r1, 8019972 <sbrk_aligned+0x12>
 801996c:	f000 fcd4 	bl	801a318 <_sbrk_r>
 8019970:	6030      	str	r0, [r6, #0]
 8019972:	4621      	mov	r1, r4
 8019974:	4628      	mov	r0, r5
 8019976:	f000 fccf 	bl	801a318 <_sbrk_r>
 801997a:	1c43      	adds	r3, r0, #1
 801997c:	d103      	bne.n	8019986 <sbrk_aligned+0x26>
 801997e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8019982:	4620      	mov	r0, r4
 8019984:	bd70      	pop	{r4, r5, r6, pc}
 8019986:	1cc4      	adds	r4, r0, #3
 8019988:	f024 0403 	bic.w	r4, r4, #3
 801998c:	42a0      	cmp	r0, r4
 801998e:	d0f8      	beq.n	8019982 <sbrk_aligned+0x22>
 8019990:	1a21      	subs	r1, r4, r0
 8019992:	4628      	mov	r0, r5
 8019994:	f000 fcc0 	bl	801a318 <_sbrk_r>
 8019998:	3001      	adds	r0, #1
 801999a:	d1f2      	bne.n	8019982 <sbrk_aligned+0x22>
 801999c:	e7ef      	b.n	801997e <sbrk_aligned+0x1e>
 801999e:	bf00      	nop
 80199a0:	2001198c 	.word	0x2001198c

080199a4 <_malloc_r>:
 80199a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80199a8:	1ccd      	adds	r5, r1, #3
 80199aa:	f025 0503 	bic.w	r5, r5, #3
 80199ae:	3508      	adds	r5, #8
 80199b0:	2d0c      	cmp	r5, #12
 80199b2:	bf38      	it	cc
 80199b4:	250c      	movcc	r5, #12
 80199b6:	2d00      	cmp	r5, #0
 80199b8:	4606      	mov	r6, r0
 80199ba:	db01      	blt.n	80199c0 <_malloc_r+0x1c>
 80199bc:	42a9      	cmp	r1, r5
 80199be:	d904      	bls.n	80199ca <_malloc_r+0x26>
 80199c0:	230c      	movs	r3, #12
 80199c2:	6033      	str	r3, [r6, #0]
 80199c4:	2000      	movs	r0, #0
 80199c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80199ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8019aa0 <_malloc_r+0xfc>
 80199ce:	f000 f869 	bl	8019aa4 <__malloc_lock>
 80199d2:	f8d8 3000 	ldr.w	r3, [r8]
 80199d6:	461c      	mov	r4, r3
 80199d8:	bb44      	cbnz	r4, 8019a2c <_malloc_r+0x88>
 80199da:	4629      	mov	r1, r5
 80199dc:	4630      	mov	r0, r6
 80199de:	f7ff ffbf 	bl	8019960 <sbrk_aligned>
 80199e2:	1c43      	adds	r3, r0, #1
 80199e4:	4604      	mov	r4, r0
 80199e6:	d158      	bne.n	8019a9a <_malloc_r+0xf6>
 80199e8:	f8d8 4000 	ldr.w	r4, [r8]
 80199ec:	4627      	mov	r7, r4
 80199ee:	2f00      	cmp	r7, #0
 80199f0:	d143      	bne.n	8019a7a <_malloc_r+0xd6>
 80199f2:	2c00      	cmp	r4, #0
 80199f4:	d04b      	beq.n	8019a8e <_malloc_r+0xea>
 80199f6:	6823      	ldr	r3, [r4, #0]
 80199f8:	4639      	mov	r1, r7
 80199fa:	4630      	mov	r0, r6
 80199fc:	eb04 0903 	add.w	r9, r4, r3
 8019a00:	f000 fc8a 	bl	801a318 <_sbrk_r>
 8019a04:	4581      	cmp	r9, r0
 8019a06:	d142      	bne.n	8019a8e <_malloc_r+0xea>
 8019a08:	6821      	ldr	r1, [r4, #0]
 8019a0a:	1a6d      	subs	r5, r5, r1
 8019a0c:	4629      	mov	r1, r5
 8019a0e:	4630      	mov	r0, r6
 8019a10:	f7ff ffa6 	bl	8019960 <sbrk_aligned>
 8019a14:	3001      	adds	r0, #1
 8019a16:	d03a      	beq.n	8019a8e <_malloc_r+0xea>
 8019a18:	6823      	ldr	r3, [r4, #0]
 8019a1a:	442b      	add	r3, r5
 8019a1c:	6023      	str	r3, [r4, #0]
 8019a1e:	f8d8 3000 	ldr.w	r3, [r8]
 8019a22:	685a      	ldr	r2, [r3, #4]
 8019a24:	bb62      	cbnz	r2, 8019a80 <_malloc_r+0xdc>
 8019a26:	f8c8 7000 	str.w	r7, [r8]
 8019a2a:	e00f      	b.n	8019a4c <_malloc_r+0xa8>
 8019a2c:	6822      	ldr	r2, [r4, #0]
 8019a2e:	1b52      	subs	r2, r2, r5
 8019a30:	d420      	bmi.n	8019a74 <_malloc_r+0xd0>
 8019a32:	2a0b      	cmp	r2, #11
 8019a34:	d917      	bls.n	8019a66 <_malloc_r+0xc2>
 8019a36:	1961      	adds	r1, r4, r5
 8019a38:	42a3      	cmp	r3, r4
 8019a3a:	6025      	str	r5, [r4, #0]
 8019a3c:	bf18      	it	ne
 8019a3e:	6059      	strne	r1, [r3, #4]
 8019a40:	6863      	ldr	r3, [r4, #4]
 8019a42:	bf08      	it	eq
 8019a44:	f8c8 1000 	streq.w	r1, [r8]
 8019a48:	5162      	str	r2, [r4, r5]
 8019a4a:	604b      	str	r3, [r1, #4]
 8019a4c:	4630      	mov	r0, r6
 8019a4e:	f000 f82f 	bl	8019ab0 <__malloc_unlock>
 8019a52:	f104 000b 	add.w	r0, r4, #11
 8019a56:	1d23      	adds	r3, r4, #4
 8019a58:	f020 0007 	bic.w	r0, r0, #7
 8019a5c:	1ac2      	subs	r2, r0, r3
 8019a5e:	bf1c      	itt	ne
 8019a60:	1a1b      	subne	r3, r3, r0
 8019a62:	50a3      	strne	r3, [r4, r2]
 8019a64:	e7af      	b.n	80199c6 <_malloc_r+0x22>
 8019a66:	6862      	ldr	r2, [r4, #4]
 8019a68:	42a3      	cmp	r3, r4
 8019a6a:	bf0c      	ite	eq
 8019a6c:	f8c8 2000 	streq.w	r2, [r8]
 8019a70:	605a      	strne	r2, [r3, #4]
 8019a72:	e7eb      	b.n	8019a4c <_malloc_r+0xa8>
 8019a74:	4623      	mov	r3, r4
 8019a76:	6864      	ldr	r4, [r4, #4]
 8019a78:	e7ae      	b.n	80199d8 <_malloc_r+0x34>
 8019a7a:	463c      	mov	r4, r7
 8019a7c:	687f      	ldr	r7, [r7, #4]
 8019a7e:	e7b6      	b.n	80199ee <_malloc_r+0x4a>
 8019a80:	461a      	mov	r2, r3
 8019a82:	685b      	ldr	r3, [r3, #4]
 8019a84:	42a3      	cmp	r3, r4
 8019a86:	d1fb      	bne.n	8019a80 <_malloc_r+0xdc>
 8019a88:	2300      	movs	r3, #0
 8019a8a:	6053      	str	r3, [r2, #4]
 8019a8c:	e7de      	b.n	8019a4c <_malloc_r+0xa8>
 8019a8e:	230c      	movs	r3, #12
 8019a90:	6033      	str	r3, [r6, #0]
 8019a92:	4630      	mov	r0, r6
 8019a94:	f000 f80c 	bl	8019ab0 <__malloc_unlock>
 8019a98:	e794      	b.n	80199c4 <_malloc_r+0x20>
 8019a9a:	6005      	str	r5, [r0, #0]
 8019a9c:	e7d6      	b.n	8019a4c <_malloc_r+0xa8>
 8019a9e:	bf00      	nop
 8019aa0:	20011990 	.word	0x20011990

08019aa4 <__malloc_lock>:
 8019aa4:	4801      	ldr	r0, [pc, #4]	@ (8019aac <__malloc_lock+0x8>)
 8019aa6:	f000 bc84 	b.w	801a3b2 <__retarget_lock_acquire_recursive>
 8019aaa:	bf00      	nop
 8019aac:	20011ad5 	.word	0x20011ad5

08019ab0 <__malloc_unlock>:
 8019ab0:	4801      	ldr	r0, [pc, #4]	@ (8019ab8 <__malloc_unlock+0x8>)
 8019ab2:	f000 bc7f 	b.w	801a3b4 <__retarget_lock_release_recursive>
 8019ab6:	bf00      	nop
 8019ab8:	20011ad5 	.word	0x20011ad5

08019abc <srand>:
 8019abc:	b538      	push	{r3, r4, r5, lr}
 8019abe:	4b10      	ldr	r3, [pc, #64]	@ (8019b00 <srand+0x44>)
 8019ac0:	681d      	ldr	r5, [r3, #0]
 8019ac2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8019ac4:	4604      	mov	r4, r0
 8019ac6:	b9b3      	cbnz	r3, 8019af6 <srand+0x3a>
 8019ac8:	2018      	movs	r0, #24
 8019aca:	f7ff ff39 	bl	8019940 <malloc>
 8019ace:	4602      	mov	r2, r0
 8019ad0:	6328      	str	r0, [r5, #48]	@ 0x30
 8019ad2:	b920      	cbnz	r0, 8019ade <srand+0x22>
 8019ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8019b04 <srand+0x48>)
 8019ad6:	480c      	ldr	r0, [pc, #48]	@ (8019b08 <srand+0x4c>)
 8019ad8:	2146      	movs	r1, #70	@ 0x46
 8019ada:	f000 fc83 	bl	801a3e4 <__assert_func>
 8019ade:	490b      	ldr	r1, [pc, #44]	@ (8019b0c <srand+0x50>)
 8019ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8019b10 <srand+0x54>)
 8019ae2:	e9c0 1300 	strd	r1, r3, [r0]
 8019ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8019b14 <srand+0x58>)
 8019ae8:	6083      	str	r3, [r0, #8]
 8019aea:	230b      	movs	r3, #11
 8019aec:	8183      	strh	r3, [r0, #12]
 8019aee:	2100      	movs	r1, #0
 8019af0:	2001      	movs	r0, #1
 8019af2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019af6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8019af8:	2200      	movs	r2, #0
 8019afa:	611c      	str	r4, [r3, #16]
 8019afc:	615a      	str	r2, [r3, #20]
 8019afe:	bd38      	pop	{r3, r4, r5, pc}
 8019b00:	20000928 	.word	0x20000928
 8019b04:	0801c118 	.word	0x0801c118
 8019b08:	0801c12f 	.word	0x0801c12f
 8019b0c:	abcd330e 	.word	0xabcd330e
 8019b10:	e66d1234 	.word	0xe66d1234
 8019b14:	0005deec 	.word	0x0005deec

08019b18 <rand>:
 8019b18:	4b16      	ldr	r3, [pc, #88]	@ (8019b74 <rand+0x5c>)
 8019b1a:	b510      	push	{r4, lr}
 8019b1c:	681c      	ldr	r4, [r3, #0]
 8019b1e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019b20:	b9b3      	cbnz	r3, 8019b50 <rand+0x38>
 8019b22:	2018      	movs	r0, #24
 8019b24:	f7ff ff0c 	bl	8019940 <malloc>
 8019b28:	4602      	mov	r2, r0
 8019b2a:	6320      	str	r0, [r4, #48]	@ 0x30
 8019b2c:	b920      	cbnz	r0, 8019b38 <rand+0x20>
 8019b2e:	4b12      	ldr	r3, [pc, #72]	@ (8019b78 <rand+0x60>)
 8019b30:	4812      	ldr	r0, [pc, #72]	@ (8019b7c <rand+0x64>)
 8019b32:	2152      	movs	r1, #82	@ 0x52
 8019b34:	f000 fc56 	bl	801a3e4 <__assert_func>
 8019b38:	4911      	ldr	r1, [pc, #68]	@ (8019b80 <rand+0x68>)
 8019b3a:	4b12      	ldr	r3, [pc, #72]	@ (8019b84 <rand+0x6c>)
 8019b3c:	e9c0 1300 	strd	r1, r3, [r0]
 8019b40:	4b11      	ldr	r3, [pc, #68]	@ (8019b88 <rand+0x70>)
 8019b42:	6083      	str	r3, [r0, #8]
 8019b44:	230b      	movs	r3, #11
 8019b46:	8183      	strh	r3, [r0, #12]
 8019b48:	2100      	movs	r1, #0
 8019b4a:	2001      	movs	r0, #1
 8019b4c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019b50:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8019b52:	480e      	ldr	r0, [pc, #56]	@ (8019b8c <rand+0x74>)
 8019b54:	690b      	ldr	r3, [r1, #16]
 8019b56:	694c      	ldr	r4, [r1, #20]
 8019b58:	4a0d      	ldr	r2, [pc, #52]	@ (8019b90 <rand+0x78>)
 8019b5a:	4358      	muls	r0, r3
 8019b5c:	fb02 0004 	mla	r0, r2, r4, r0
 8019b60:	fba3 3202 	umull	r3, r2, r3, r2
 8019b64:	3301      	adds	r3, #1
 8019b66:	eb40 0002 	adc.w	r0, r0, r2
 8019b6a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8019b6e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8019b72:	bd10      	pop	{r4, pc}
 8019b74:	20000928 	.word	0x20000928
 8019b78:	0801c118 	.word	0x0801c118
 8019b7c:	0801c12f 	.word	0x0801c12f
 8019b80:	abcd330e 	.word	0xabcd330e
 8019b84:	e66d1234 	.word	0xe66d1234
 8019b88:	0005deec 	.word	0x0005deec
 8019b8c:	5851f42d 	.word	0x5851f42d
 8019b90:	4c957f2d 	.word	0x4c957f2d

08019b94 <realloc>:
 8019b94:	4b02      	ldr	r3, [pc, #8]	@ (8019ba0 <realloc+0xc>)
 8019b96:	460a      	mov	r2, r1
 8019b98:	4601      	mov	r1, r0
 8019b9a:	6818      	ldr	r0, [r3, #0]
 8019b9c:	f000 b802 	b.w	8019ba4 <_realloc_r>
 8019ba0:	20000928 	.word	0x20000928

08019ba4 <_realloc_r>:
 8019ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ba8:	4607      	mov	r7, r0
 8019baa:	4614      	mov	r4, r2
 8019bac:	460d      	mov	r5, r1
 8019bae:	b921      	cbnz	r1, 8019bba <_realloc_r+0x16>
 8019bb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019bb4:	4611      	mov	r1, r2
 8019bb6:	f7ff bef5 	b.w	80199a4 <_malloc_r>
 8019bba:	b92a      	cbnz	r2, 8019bc8 <_realloc_r+0x24>
 8019bbc:	f000 fc3c 	bl	801a438 <_free_r>
 8019bc0:	4625      	mov	r5, r4
 8019bc2:	4628      	mov	r0, r5
 8019bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019bc8:	f000 fc80 	bl	801a4cc <_malloc_usable_size_r>
 8019bcc:	4284      	cmp	r4, r0
 8019bce:	4606      	mov	r6, r0
 8019bd0:	d802      	bhi.n	8019bd8 <_realloc_r+0x34>
 8019bd2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8019bd6:	d8f4      	bhi.n	8019bc2 <_realloc_r+0x1e>
 8019bd8:	4621      	mov	r1, r4
 8019bda:	4638      	mov	r0, r7
 8019bdc:	f7ff fee2 	bl	80199a4 <_malloc_r>
 8019be0:	4680      	mov	r8, r0
 8019be2:	b908      	cbnz	r0, 8019be8 <_realloc_r+0x44>
 8019be4:	4645      	mov	r5, r8
 8019be6:	e7ec      	b.n	8019bc2 <_realloc_r+0x1e>
 8019be8:	42b4      	cmp	r4, r6
 8019bea:	4622      	mov	r2, r4
 8019bec:	4629      	mov	r1, r5
 8019bee:	bf28      	it	cs
 8019bf0:	4632      	movcs	r2, r6
 8019bf2:	f000 fbe8 	bl	801a3c6 <memcpy>
 8019bf6:	4629      	mov	r1, r5
 8019bf8:	4638      	mov	r0, r7
 8019bfa:	f000 fc1d 	bl	801a438 <_free_r>
 8019bfe:	e7f1      	b.n	8019be4 <_realloc_r+0x40>

08019c00 <_strtoul_l.isra.0>:
 8019c00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019c04:	4e34      	ldr	r6, [pc, #208]	@ (8019cd8 <_strtoul_l.isra.0+0xd8>)
 8019c06:	4686      	mov	lr, r0
 8019c08:	460d      	mov	r5, r1
 8019c0a:	4628      	mov	r0, r5
 8019c0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019c10:	5d37      	ldrb	r7, [r6, r4]
 8019c12:	f017 0708 	ands.w	r7, r7, #8
 8019c16:	d1f8      	bne.n	8019c0a <_strtoul_l.isra.0+0xa>
 8019c18:	2c2d      	cmp	r4, #45	@ 0x2d
 8019c1a:	d110      	bne.n	8019c3e <_strtoul_l.isra.0+0x3e>
 8019c1c:	782c      	ldrb	r4, [r5, #0]
 8019c1e:	2701      	movs	r7, #1
 8019c20:	1c85      	adds	r5, r0, #2
 8019c22:	f033 0010 	bics.w	r0, r3, #16
 8019c26:	d115      	bne.n	8019c54 <_strtoul_l.isra.0+0x54>
 8019c28:	2c30      	cmp	r4, #48	@ 0x30
 8019c2a:	d10d      	bne.n	8019c48 <_strtoul_l.isra.0+0x48>
 8019c2c:	7828      	ldrb	r0, [r5, #0]
 8019c2e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8019c32:	2858      	cmp	r0, #88	@ 0x58
 8019c34:	d108      	bne.n	8019c48 <_strtoul_l.isra.0+0x48>
 8019c36:	786c      	ldrb	r4, [r5, #1]
 8019c38:	3502      	adds	r5, #2
 8019c3a:	2310      	movs	r3, #16
 8019c3c:	e00a      	b.n	8019c54 <_strtoul_l.isra.0+0x54>
 8019c3e:	2c2b      	cmp	r4, #43	@ 0x2b
 8019c40:	bf04      	itt	eq
 8019c42:	782c      	ldrbeq	r4, [r5, #0]
 8019c44:	1c85      	addeq	r5, r0, #2
 8019c46:	e7ec      	b.n	8019c22 <_strtoul_l.isra.0+0x22>
 8019c48:	2b00      	cmp	r3, #0
 8019c4a:	d1f6      	bne.n	8019c3a <_strtoul_l.isra.0+0x3a>
 8019c4c:	2c30      	cmp	r4, #48	@ 0x30
 8019c4e:	bf14      	ite	ne
 8019c50:	230a      	movne	r3, #10
 8019c52:	2308      	moveq	r3, #8
 8019c54:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8019c58:	2600      	movs	r6, #0
 8019c5a:	fbb8 f8f3 	udiv	r8, r8, r3
 8019c5e:	fb03 f908 	mul.w	r9, r3, r8
 8019c62:	ea6f 0909 	mvn.w	r9, r9
 8019c66:	4630      	mov	r0, r6
 8019c68:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8019c6c:	f1bc 0f09 	cmp.w	ip, #9
 8019c70:	d810      	bhi.n	8019c94 <_strtoul_l.isra.0+0x94>
 8019c72:	4664      	mov	r4, ip
 8019c74:	42a3      	cmp	r3, r4
 8019c76:	dd1e      	ble.n	8019cb6 <_strtoul_l.isra.0+0xb6>
 8019c78:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8019c7c:	d007      	beq.n	8019c8e <_strtoul_l.isra.0+0x8e>
 8019c7e:	4580      	cmp	r8, r0
 8019c80:	d316      	bcc.n	8019cb0 <_strtoul_l.isra.0+0xb0>
 8019c82:	d101      	bne.n	8019c88 <_strtoul_l.isra.0+0x88>
 8019c84:	45a1      	cmp	r9, r4
 8019c86:	db13      	blt.n	8019cb0 <_strtoul_l.isra.0+0xb0>
 8019c88:	fb00 4003 	mla	r0, r0, r3, r4
 8019c8c:	2601      	movs	r6, #1
 8019c8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019c92:	e7e9      	b.n	8019c68 <_strtoul_l.isra.0+0x68>
 8019c94:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8019c98:	f1bc 0f19 	cmp.w	ip, #25
 8019c9c:	d801      	bhi.n	8019ca2 <_strtoul_l.isra.0+0xa2>
 8019c9e:	3c37      	subs	r4, #55	@ 0x37
 8019ca0:	e7e8      	b.n	8019c74 <_strtoul_l.isra.0+0x74>
 8019ca2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8019ca6:	f1bc 0f19 	cmp.w	ip, #25
 8019caa:	d804      	bhi.n	8019cb6 <_strtoul_l.isra.0+0xb6>
 8019cac:	3c57      	subs	r4, #87	@ 0x57
 8019cae:	e7e1      	b.n	8019c74 <_strtoul_l.isra.0+0x74>
 8019cb0:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8019cb4:	e7eb      	b.n	8019c8e <_strtoul_l.isra.0+0x8e>
 8019cb6:	1c73      	adds	r3, r6, #1
 8019cb8:	d106      	bne.n	8019cc8 <_strtoul_l.isra.0+0xc8>
 8019cba:	2322      	movs	r3, #34	@ 0x22
 8019cbc:	f8ce 3000 	str.w	r3, [lr]
 8019cc0:	4630      	mov	r0, r6
 8019cc2:	b932      	cbnz	r2, 8019cd2 <_strtoul_l.isra.0+0xd2>
 8019cc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019cc8:	b107      	cbz	r7, 8019ccc <_strtoul_l.isra.0+0xcc>
 8019cca:	4240      	negs	r0, r0
 8019ccc:	2a00      	cmp	r2, #0
 8019cce:	d0f9      	beq.n	8019cc4 <_strtoul_l.isra.0+0xc4>
 8019cd0:	b106      	cbz	r6, 8019cd4 <_strtoul_l.isra.0+0xd4>
 8019cd2:	1e69      	subs	r1, r5, #1
 8019cd4:	6011      	str	r1, [r2, #0]
 8019cd6:	e7f5      	b.n	8019cc4 <_strtoul_l.isra.0+0xc4>
 8019cd8:	0801c1f7 	.word	0x0801c1f7

08019cdc <strtoul>:
 8019cdc:	4613      	mov	r3, r2
 8019cde:	460a      	mov	r2, r1
 8019ce0:	4601      	mov	r1, r0
 8019ce2:	4802      	ldr	r0, [pc, #8]	@ (8019cec <strtoul+0x10>)
 8019ce4:	6800      	ldr	r0, [r0, #0]
 8019ce6:	f7ff bf8b 	b.w	8019c00 <_strtoul_l.isra.0>
 8019cea:	bf00      	nop
 8019cec:	20000928 	.word	0x20000928

08019cf0 <std>:
 8019cf0:	2300      	movs	r3, #0
 8019cf2:	b510      	push	{r4, lr}
 8019cf4:	4604      	mov	r4, r0
 8019cf6:	e9c0 3300 	strd	r3, r3, [r0]
 8019cfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019cfe:	6083      	str	r3, [r0, #8]
 8019d00:	8181      	strh	r1, [r0, #12]
 8019d02:	6643      	str	r3, [r0, #100]	@ 0x64
 8019d04:	81c2      	strh	r2, [r0, #14]
 8019d06:	6183      	str	r3, [r0, #24]
 8019d08:	4619      	mov	r1, r3
 8019d0a:	2208      	movs	r2, #8
 8019d0c:	305c      	adds	r0, #92	@ 0x5c
 8019d0e:	f000 fa91 	bl	801a234 <memset>
 8019d12:	4b0d      	ldr	r3, [pc, #52]	@ (8019d48 <std+0x58>)
 8019d14:	6263      	str	r3, [r4, #36]	@ 0x24
 8019d16:	4b0d      	ldr	r3, [pc, #52]	@ (8019d4c <std+0x5c>)
 8019d18:	62a3      	str	r3, [r4, #40]	@ 0x28
 8019d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8019d50 <std+0x60>)
 8019d1c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8019d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8019d54 <std+0x64>)
 8019d20:	6323      	str	r3, [r4, #48]	@ 0x30
 8019d22:	4b0d      	ldr	r3, [pc, #52]	@ (8019d58 <std+0x68>)
 8019d24:	6224      	str	r4, [r4, #32]
 8019d26:	429c      	cmp	r4, r3
 8019d28:	d006      	beq.n	8019d38 <std+0x48>
 8019d2a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8019d2e:	4294      	cmp	r4, r2
 8019d30:	d002      	beq.n	8019d38 <std+0x48>
 8019d32:	33d0      	adds	r3, #208	@ 0xd0
 8019d34:	429c      	cmp	r4, r3
 8019d36:	d105      	bne.n	8019d44 <std+0x54>
 8019d38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8019d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019d40:	f000 bb36 	b.w	801a3b0 <__retarget_lock_init_recursive>
 8019d44:	bd10      	pop	{r4, pc}
 8019d46:	bf00      	nop
 8019d48:	08019fb9 	.word	0x08019fb9
 8019d4c:	08019fdb 	.word	0x08019fdb
 8019d50:	0801a013 	.word	0x0801a013
 8019d54:	0801a037 	.word	0x0801a037
 8019d58:	20011994 	.word	0x20011994

08019d5c <stdio_exit_handler>:
 8019d5c:	4a02      	ldr	r2, [pc, #8]	@ (8019d68 <stdio_exit_handler+0xc>)
 8019d5e:	4903      	ldr	r1, [pc, #12]	@ (8019d6c <stdio_exit_handler+0x10>)
 8019d60:	4803      	ldr	r0, [pc, #12]	@ (8019d70 <stdio_exit_handler+0x14>)
 8019d62:	f000 b869 	b.w	8019e38 <_fwalk_sglue>
 8019d66:	bf00      	nop
 8019d68:	2000091c 	.word	0x2000091c
 8019d6c:	0801ae31 	.word	0x0801ae31
 8019d70:	2000092c 	.word	0x2000092c

08019d74 <cleanup_stdio>:
 8019d74:	6841      	ldr	r1, [r0, #4]
 8019d76:	4b0c      	ldr	r3, [pc, #48]	@ (8019da8 <cleanup_stdio+0x34>)
 8019d78:	4299      	cmp	r1, r3
 8019d7a:	b510      	push	{r4, lr}
 8019d7c:	4604      	mov	r4, r0
 8019d7e:	d001      	beq.n	8019d84 <cleanup_stdio+0x10>
 8019d80:	f001 f856 	bl	801ae30 <_fflush_r>
 8019d84:	68a1      	ldr	r1, [r4, #8]
 8019d86:	4b09      	ldr	r3, [pc, #36]	@ (8019dac <cleanup_stdio+0x38>)
 8019d88:	4299      	cmp	r1, r3
 8019d8a:	d002      	beq.n	8019d92 <cleanup_stdio+0x1e>
 8019d8c:	4620      	mov	r0, r4
 8019d8e:	f001 f84f 	bl	801ae30 <_fflush_r>
 8019d92:	68e1      	ldr	r1, [r4, #12]
 8019d94:	4b06      	ldr	r3, [pc, #24]	@ (8019db0 <cleanup_stdio+0x3c>)
 8019d96:	4299      	cmp	r1, r3
 8019d98:	d004      	beq.n	8019da4 <cleanup_stdio+0x30>
 8019d9a:	4620      	mov	r0, r4
 8019d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019da0:	f001 b846 	b.w	801ae30 <_fflush_r>
 8019da4:	bd10      	pop	{r4, pc}
 8019da6:	bf00      	nop
 8019da8:	20011994 	.word	0x20011994
 8019dac:	200119fc 	.word	0x200119fc
 8019db0:	20011a64 	.word	0x20011a64

08019db4 <global_stdio_init.part.0>:
 8019db4:	b510      	push	{r4, lr}
 8019db6:	4b0b      	ldr	r3, [pc, #44]	@ (8019de4 <global_stdio_init.part.0+0x30>)
 8019db8:	4c0b      	ldr	r4, [pc, #44]	@ (8019de8 <global_stdio_init.part.0+0x34>)
 8019dba:	4a0c      	ldr	r2, [pc, #48]	@ (8019dec <global_stdio_init.part.0+0x38>)
 8019dbc:	601a      	str	r2, [r3, #0]
 8019dbe:	4620      	mov	r0, r4
 8019dc0:	2200      	movs	r2, #0
 8019dc2:	2104      	movs	r1, #4
 8019dc4:	f7ff ff94 	bl	8019cf0 <std>
 8019dc8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8019dcc:	2201      	movs	r2, #1
 8019dce:	2109      	movs	r1, #9
 8019dd0:	f7ff ff8e 	bl	8019cf0 <std>
 8019dd4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8019dd8:	2202      	movs	r2, #2
 8019dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019dde:	2112      	movs	r1, #18
 8019de0:	f7ff bf86 	b.w	8019cf0 <std>
 8019de4:	20011acc 	.word	0x20011acc
 8019de8:	20011994 	.word	0x20011994
 8019dec:	08019d5d 	.word	0x08019d5d

08019df0 <__sfp_lock_acquire>:
 8019df0:	4801      	ldr	r0, [pc, #4]	@ (8019df8 <__sfp_lock_acquire+0x8>)
 8019df2:	f000 bade 	b.w	801a3b2 <__retarget_lock_acquire_recursive>
 8019df6:	bf00      	nop
 8019df8:	20011ad6 	.word	0x20011ad6

08019dfc <__sfp_lock_release>:
 8019dfc:	4801      	ldr	r0, [pc, #4]	@ (8019e04 <__sfp_lock_release+0x8>)
 8019dfe:	f000 bad9 	b.w	801a3b4 <__retarget_lock_release_recursive>
 8019e02:	bf00      	nop
 8019e04:	20011ad6 	.word	0x20011ad6

08019e08 <__sinit>:
 8019e08:	b510      	push	{r4, lr}
 8019e0a:	4604      	mov	r4, r0
 8019e0c:	f7ff fff0 	bl	8019df0 <__sfp_lock_acquire>
 8019e10:	6a23      	ldr	r3, [r4, #32]
 8019e12:	b11b      	cbz	r3, 8019e1c <__sinit+0x14>
 8019e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019e18:	f7ff bff0 	b.w	8019dfc <__sfp_lock_release>
 8019e1c:	4b04      	ldr	r3, [pc, #16]	@ (8019e30 <__sinit+0x28>)
 8019e1e:	6223      	str	r3, [r4, #32]
 8019e20:	4b04      	ldr	r3, [pc, #16]	@ (8019e34 <__sinit+0x2c>)
 8019e22:	681b      	ldr	r3, [r3, #0]
 8019e24:	2b00      	cmp	r3, #0
 8019e26:	d1f5      	bne.n	8019e14 <__sinit+0xc>
 8019e28:	f7ff ffc4 	bl	8019db4 <global_stdio_init.part.0>
 8019e2c:	e7f2      	b.n	8019e14 <__sinit+0xc>
 8019e2e:	bf00      	nop
 8019e30:	08019d75 	.word	0x08019d75
 8019e34:	20011acc 	.word	0x20011acc

08019e38 <_fwalk_sglue>:
 8019e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019e3c:	4607      	mov	r7, r0
 8019e3e:	4688      	mov	r8, r1
 8019e40:	4614      	mov	r4, r2
 8019e42:	2600      	movs	r6, #0
 8019e44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019e48:	f1b9 0901 	subs.w	r9, r9, #1
 8019e4c:	d505      	bpl.n	8019e5a <_fwalk_sglue+0x22>
 8019e4e:	6824      	ldr	r4, [r4, #0]
 8019e50:	2c00      	cmp	r4, #0
 8019e52:	d1f7      	bne.n	8019e44 <_fwalk_sglue+0xc>
 8019e54:	4630      	mov	r0, r6
 8019e56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019e5a:	89ab      	ldrh	r3, [r5, #12]
 8019e5c:	2b01      	cmp	r3, #1
 8019e5e:	d907      	bls.n	8019e70 <_fwalk_sglue+0x38>
 8019e60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019e64:	3301      	adds	r3, #1
 8019e66:	d003      	beq.n	8019e70 <_fwalk_sglue+0x38>
 8019e68:	4629      	mov	r1, r5
 8019e6a:	4638      	mov	r0, r7
 8019e6c:	47c0      	blx	r8
 8019e6e:	4306      	orrs	r6, r0
 8019e70:	3568      	adds	r5, #104	@ 0x68
 8019e72:	e7e9      	b.n	8019e48 <_fwalk_sglue+0x10>

08019e74 <_fwrite_r>:
 8019e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019e78:	9c08      	ldr	r4, [sp, #32]
 8019e7a:	468a      	mov	sl, r1
 8019e7c:	4690      	mov	r8, r2
 8019e7e:	fb02 f903 	mul.w	r9, r2, r3
 8019e82:	4606      	mov	r6, r0
 8019e84:	b118      	cbz	r0, 8019e8e <_fwrite_r+0x1a>
 8019e86:	6a03      	ldr	r3, [r0, #32]
 8019e88:	b90b      	cbnz	r3, 8019e8e <_fwrite_r+0x1a>
 8019e8a:	f7ff ffbd 	bl	8019e08 <__sinit>
 8019e8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019e90:	07dd      	lsls	r5, r3, #31
 8019e92:	d405      	bmi.n	8019ea0 <_fwrite_r+0x2c>
 8019e94:	89a3      	ldrh	r3, [r4, #12]
 8019e96:	0598      	lsls	r0, r3, #22
 8019e98:	d402      	bmi.n	8019ea0 <_fwrite_r+0x2c>
 8019e9a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019e9c:	f000 fa89 	bl	801a3b2 <__retarget_lock_acquire_recursive>
 8019ea0:	89a3      	ldrh	r3, [r4, #12]
 8019ea2:	0719      	lsls	r1, r3, #28
 8019ea4:	d516      	bpl.n	8019ed4 <_fwrite_r+0x60>
 8019ea6:	6923      	ldr	r3, [r4, #16]
 8019ea8:	b1a3      	cbz	r3, 8019ed4 <_fwrite_r+0x60>
 8019eaa:	2500      	movs	r5, #0
 8019eac:	454d      	cmp	r5, r9
 8019eae:	d01f      	beq.n	8019ef0 <_fwrite_r+0x7c>
 8019eb0:	68a7      	ldr	r7, [r4, #8]
 8019eb2:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8019eb6:	3f01      	subs	r7, #1
 8019eb8:	2f00      	cmp	r7, #0
 8019eba:	60a7      	str	r7, [r4, #8]
 8019ebc:	da04      	bge.n	8019ec8 <_fwrite_r+0x54>
 8019ebe:	69a3      	ldr	r3, [r4, #24]
 8019ec0:	429f      	cmp	r7, r3
 8019ec2:	db0f      	blt.n	8019ee4 <_fwrite_r+0x70>
 8019ec4:	290a      	cmp	r1, #10
 8019ec6:	d00d      	beq.n	8019ee4 <_fwrite_r+0x70>
 8019ec8:	6823      	ldr	r3, [r4, #0]
 8019eca:	1c5a      	adds	r2, r3, #1
 8019ecc:	6022      	str	r2, [r4, #0]
 8019ece:	7019      	strb	r1, [r3, #0]
 8019ed0:	3501      	adds	r5, #1
 8019ed2:	e7eb      	b.n	8019eac <_fwrite_r+0x38>
 8019ed4:	4621      	mov	r1, r4
 8019ed6:	4630      	mov	r0, r6
 8019ed8:	f000 f92c 	bl	801a134 <__swsetup_r>
 8019edc:	2800      	cmp	r0, #0
 8019ede:	d0e4      	beq.n	8019eaa <_fwrite_r+0x36>
 8019ee0:	2500      	movs	r5, #0
 8019ee2:	e005      	b.n	8019ef0 <_fwrite_r+0x7c>
 8019ee4:	4622      	mov	r2, r4
 8019ee6:	4630      	mov	r0, r6
 8019ee8:	f000 f8e6 	bl	801a0b8 <__swbuf_r>
 8019eec:	3001      	adds	r0, #1
 8019eee:	d1ef      	bne.n	8019ed0 <_fwrite_r+0x5c>
 8019ef0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019ef2:	07da      	lsls	r2, r3, #31
 8019ef4:	d405      	bmi.n	8019f02 <_fwrite_r+0x8e>
 8019ef6:	89a3      	ldrh	r3, [r4, #12]
 8019ef8:	059b      	lsls	r3, r3, #22
 8019efa:	d402      	bmi.n	8019f02 <_fwrite_r+0x8e>
 8019efc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019efe:	f000 fa59 	bl	801a3b4 <__retarget_lock_release_recursive>
 8019f02:	fbb5 f0f8 	udiv	r0, r5, r8
 8019f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08019f0c <fwrite>:
 8019f0c:	b507      	push	{r0, r1, r2, lr}
 8019f0e:	9300      	str	r3, [sp, #0]
 8019f10:	4613      	mov	r3, r2
 8019f12:	460a      	mov	r2, r1
 8019f14:	4601      	mov	r1, r0
 8019f16:	4803      	ldr	r0, [pc, #12]	@ (8019f24 <fwrite+0x18>)
 8019f18:	6800      	ldr	r0, [r0, #0]
 8019f1a:	f7ff ffab 	bl	8019e74 <_fwrite_r>
 8019f1e:	b003      	add	sp, #12
 8019f20:	f85d fb04 	ldr.w	pc, [sp], #4
 8019f24:	20000928 	.word	0x20000928

08019f28 <iprintf>:
 8019f28:	b40f      	push	{r0, r1, r2, r3}
 8019f2a:	b507      	push	{r0, r1, r2, lr}
 8019f2c:	4906      	ldr	r1, [pc, #24]	@ (8019f48 <iprintf+0x20>)
 8019f2e:	ab04      	add	r3, sp, #16
 8019f30:	6808      	ldr	r0, [r1, #0]
 8019f32:	f853 2b04 	ldr.w	r2, [r3], #4
 8019f36:	6881      	ldr	r1, [r0, #8]
 8019f38:	9301      	str	r3, [sp, #4]
 8019f3a:	f000 fc51 	bl	801a7e0 <_vfiprintf_r>
 8019f3e:	b003      	add	sp, #12
 8019f40:	f85d eb04 	ldr.w	lr, [sp], #4
 8019f44:	b004      	add	sp, #16
 8019f46:	4770      	bx	lr
 8019f48:	20000928 	.word	0x20000928

08019f4c <sniprintf>:
 8019f4c:	b40c      	push	{r2, r3}
 8019f4e:	b530      	push	{r4, r5, lr}
 8019f50:	4b18      	ldr	r3, [pc, #96]	@ (8019fb4 <sniprintf+0x68>)
 8019f52:	1e0c      	subs	r4, r1, #0
 8019f54:	681d      	ldr	r5, [r3, #0]
 8019f56:	b09d      	sub	sp, #116	@ 0x74
 8019f58:	da08      	bge.n	8019f6c <sniprintf+0x20>
 8019f5a:	238b      	movs	r3, #139	@ 0x8b
 8019f5c:	602b      	str	r3, [r5, #0]
 8019f5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019f62:	b01d      	add	sp, #116	@ 0x74
 8019f64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019f68:	b002      	add	sp, #8
 8019f6a:	4770      	bx	lr
 8019f6c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8019f70:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019f74:	f04f 0300 	mov.w	r3, #0
 8019f78:	931b      	str	r3, [sp, #108]	@ 0x6c
 8019f7a:	bf14      	ite	ne
 8019f7c:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8019f80:	4623      	moveq	r3, r4
 8019f82:	9304      	str	r3, [sp, #16]
 8019f84:	9307      	str	r3, [sp, #28]
 8019f86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019f8a:	9002      	str	r0, [sp, #8]
 8019f8c:	9006      	str	r0, [sp, #24]
 8019f8e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019f92:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8019f94:	ab21      	add	r3, sp, #132	@ 0x84
 8019f96:	a902      	add	r1, sp, #8
 8019f98:	4628      	mov	r0, r5
 8019f9a:	9301      	str	r3, [sp, #4]
 8019f9c:	f000 fafa 	bl	801a594 <_svfiprintf_r>
 8019fa0:	1c43      	adds	r3, r0, #1
 8019fa2:	bfbc      	itt	lt
 8019fa4:	238b      	movlt	r3, #139	@ 0x8b
 8019fa6:	602b      	strlt	r3, [r5, #0]
 8019fa8:	2c00      	cmp	r4, #0
 8019faa:	d0da      	beq.n	8019f62 <sniprintf+0x16>
 8019fac:	9b02      	ldr	r3, [sp, #8]
 8019fae:	2200      	movs	r2, #0
 8019fb0:	701a      	strb	r2, [r3, #0]
 8019fb2:	e7d6      	b.n	8019f62 <sniprintf+0x16>
 8019fb4:	20000928 	.word	0x20000928

08019fb8 <__sread>:
 8019fb8:	b510      	push	{r4, lr}
 8019fba:	460c      	mov	r4, r1
 8019fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019fc0:	f000 f998 	bl	801a2f4 <_read_r>
 8019fc4:	2800      	cmp	r0, #0
 8019fc6:	bfab      	itete	ge
 8019fc8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8019fca:	89a3      	ldrhlt	r3, [r4, #12]
 8019fcc:	181b      	addge	r3, r3, r0
 8019fce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8019fd2:	bfac      	ite	ge
 8019fd4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8019fd6:	81a3      	strhlt	r3, [r4, #12]
 8019fd8:	bd10      	pop	{r4, pc}

08019fda <__swrite>:
 8019fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019fde:	461f      	mov	r7, r3
 8019fe0:	898b      	ldrh	r3, [r1, #12]
 8019fe2:	05db      	lsls	r3, r3, #23
 8019fe4:	4605      	mov	r5, r0
 8019fe6:	460c      	mov	r4, r1
 8019fe8:	4616      	mov	r6, r2
 8019fea:	d505      	bpl.n	8019ff8 <__swrite+0x1e>
 8019fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019ff0:	2302      	movs	r3, #2
 8019ff2:	2200      	movs	r2, #0
 8019ff4:	f000 f96c 	bl	801a2d0 <_lseek_r>
 8019ff8:	89a3      	ldrh	r3, [r4, #12]
 8019ffa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019ffe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801a002:	81a3      	strh	r3, [r4, #12]
 801a004:	4632      	mov	r2, r6
 801a006:	463b      	mov	r3, r7
 801a008:	4628      	mov	r0, r5
 801a00a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a00e:	f000 b993 	b.w	801a338 <_write_r>

0801a012 <__sseek>:
 801a012:	b510      	push	{r4, lr}
 801a014:	460c      	mov	r4, r1
 801a016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a01a:	f000 f959 	bl	801a2d0 <_lseek_r>
 801a01e:	1c43      	adds	r3, r0, #1
 801a020:	89a3      	ldrh	r3, [r4, #12]
 801a022:	bf15      	itete	ne
 801a024:	6560      	strne	r0, [r4, #84]	@ 0x54
 801a026:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801a02a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801a02e:	81a3      	strheq	r3, [r4, #12]
 801a030:	bf18      	it	ne
 801a032:	81a3      	strhne	r3, [r4, #12]
 801a034:	bd10      	pop	{r4, pc}

0801a036 <__sclose>:
 801a036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a03a:	f000 b939 	b.w	801a2b0 <_close_r>

0801a03e <_vsniprintf_r>:
 801a03e:	b530      	push	{r4, r5, lr}
 801a040:	4614      	mov	r4, r2
 801a042:	2c00      	cmp	r4, #0
 801a044:	b09b      	sub	sp, #108	@ 0x6c
 801a046:	4605      	mov	r5, r0
 801a048:	461a      	mov	r2, r3
 801a04a:	da05      	bge.n	801a058 <_vsniprintf_r+0x1a>
 801a04c:	238b      	movs	r3, #139	@ 0x8b
 801a04e:	6003      	str	r3, [r0, #0]
 801a050:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a054:	b01b      	add	sp, #108	@ 0x6c
 801a056:	bd30      	pop	{r4, r5, pc}
 801a058:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801a05c:	f8ad 300c 	strh.w	r3, [sp, #12]
 801a060:	f04f 0300 	mov.w	r3, #0
 801a064:	9319      	str	r3, [sp, #100]	@ 0x64
 801a066:	bf14      	ite	ne
 801a068:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801a06c:	4623      	moveq	r3, r4
 801a06e:	9302      	str	r3, [sp, #8]
 801a070:	9305      	str	r3, [sp, #20]
 801a072:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a076:	9100      	str	r1, [sp, #0]
 801a078:	9104      	str	r1, [sp, #16]
 801a07a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a07e:	4669      	mov	r1, sp
 801a080:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801a082:	f000 fa87 	bl	801a594 <_svfiprintf_r>
 801a086:	1c43      	adds	r3, r0, #1
 801a088:	bfbc      	itt	lt
 801a08a:	238b      	movlt	r3, #139	@ 0x8b
 801a08c:	602b      	strlt	r3, [r5, #0]
 801a08e:	2c00      	cmp	r4, #0
 801a090:	d0e0      	beq.n	801a054 <_vsniprintf_r+0x16>
 801a092:	9b00      	ldr	r3, [sp, #0]
 801a094:	2200      	movs	r2, #0
 801a096:	701a      	strb	r2, [r3, #0]
 801a098:	e7dc      	b.n	801a054 <_vsniprintf_r+0x16>
	...

0801a09c <vsniprintf>:
 801a09c:	b507      	push	{r0, r1, r2, lr}
 801a09e:	9300      	str	r3, [sp, #0]
 801a0a0:	4613      	mov	r3, r2
 801a0a2:	460a      	mov	r2, r1
 801a0a4:	4601      	mov	r1, r0
 801a0a6:	4803      	ldr	r0, [pc, #12]	@ (801a0b4 <vsniprintf+0x18>)
 801a0a8:	6800      	ldr	r0, [r0, #0]
 801a0aa:	f7ff ffc8 	bl	801a03e <_vsniprintf_r>
 801a0ae:	b003      	add	sp, #12
 801a0b0:	f85d fb04 	ldr.w	pc, [sp], #4
 801a0b4:	20000928 	.word	0x20000928

0801a0b8 <__swbuf_r>:
 801a0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a0ba:	460e      	mov	r6, r1
 801a0bc:	4614      	mov	r4, r2
 801a0be:	4605      	mov	r5, r0
 801a0c0:	b118      	cbz	r0, 801a0ca <__swbuf_r+0x12>
 801a0c2:	6a03      	ldr	r3, [r0, #32]
 801a0c4:	b90b      	cbnz	r3, 801a0ca <__swbuf_r+0x12>
 801a0c6:	f7ff fe9f 	bl	8019e08 <__sinit>
 801a0ca:	69a3      	ldr	r3, [r4, #24]
 801a0cc:	60a3      	str	r3, [r4, #8]
 801a0ce:	89a3      	ldrh	r3, [r4, #12]
 801a0d0:	071a      	lsls	r2, r3, #28
 801a0d2:	d501      	bpl.n	801a0d8 <__swbuf_r+0x20>
 801a0d4:	6923      	ldr	r3, [r4, #16]
 801a0d6:	b943      	cbnz	r3, 801a0ea <__swbuf_r+0x32>
 801a0d8:	4621      	mov	r1, r4
 801a0da:	4628      	mov	r0, r5
 801a0dc:	f000 f82a 	bl	801a134 <__swsetup_r>
 801a0e0:	b118      	cbz	r0, 801a0ea <__swbuf_r+0x32>
 801a0e2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801a0e6:	4638      	mov	r0, r7
 801a0e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a0ea:	6823      	ldr	r3, [r4, #0]
 801a0ec:	6922      	ldr	r2, [r4, #16]
 801a0ee:	1a98      	subs	r0, r3, r2
 801a0f0:	6963      	ldr	r3, [r4, #20]
 801a0f2:	b2f6      	uxtb	r6, r6
 801a0f4:	4283      	cmp	r3, r0
 801a0f6:	4637      	mov	r7, r6
 801a0f8:	dc05      	bgt.n	801a106 <__swbuf_r+0x4e>
 801a0fa:	4621      	mov	r1, r4
 801a0fc:	4628      	mov	r0, r5
 801a0fe:	f000 fe97 	bl	801ae30 <_fflush_r>
 801a102:	2800      	cmp	r0, #0
 801a104:	d1ed      	bne.n	801a0e2 <__swbuf_r+0x2a>
 801a106:	68a3      	ldr	r3, [r4, #8]
 801a108:	3b01      	subs	r3, #1
 801a10a:	60a3      	str	r3, [r4, #8]
 801a10c:	6823      	ldr	r3, [r4, #0]
 801a10e:	1c5a      	adds	r2, r3, #1
 801a110:	6022      	str	r2, [r4, #0]
 801a112:	701e      	strb	r6, [r3, #0]
 801a114:	6962      	ldr	r2, [r4, #20]
 801a116:	1c43      	adds	r3, r0, #1
 801a118:	429a      	cmp	r2, r3
 801a11a:	d004      	beq.n	801a126 <__swbuf_r+0x6e>
 801a11c:	89a3      	ldrh	r3, [r4, #12]
 801a11e:	07db      	lsls	r3, r3, #31
 801a120:	d5e1      	bpl.n	801a0e6 <__swbuf_r+0x2e>
 801a122:	2e0a      	cmp	r6, #10
 801a124:	d1df      	bne.n	801a0e6 <__swbuf_r+0x2e>
 801a126:	4621      	mov	r1, r4
 801a128:	4628      	mov	r0, r5
 801a12a:	f000 fe81 	bl	801ae30 <_fflush_r>
 801a12e:	2800      	cmp	r0, #0
 801a130:	d0d9      	beq.n	801a0e6 <__swbuf_r+0x2e>
 801a132:	e7d6      	b.n	801a0e2 <__swbuf_r+0x2a>

0801a134 <__swsetup_r>:
 801a134:	b538      	push	{r3, r4, r5, lr}
 801a136:	4b29      	ldr	r3, [pc, #164]	@ (801a1dc <__swsetup_r+0xa8>)
 801a138:	4605      	mov	r5, r0
 801a13a:	6818      	ldr	r0, [r3, #0]
 801a13c:	460c      	mov	r4, r1
 801a13e:	b118      	cbz	r0, 801a148 <__swsetup_r+0x14>
 801a140:	6a03      	ldr	r3, [r0, #32]
 801a142:	b90b      	cbnz	r3, 801a148 <__swsetup_r+0x14>
 801a144:	f7ff fe60 	bl	8019e08 <__sinit>
 801a148:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a14c:	0719      	lsls	r1, r3, #28
 801a14e:	d422      	bmi.n	801a196 <__swsetup_r+0x62>
 801a150:	06da      	lsls	r2, r3, #27
 801a152:	d407      	bmi.n	801a164 <__swsetup_r+0x30>
 801a154:	2209      	movs	r2, #9
 801a156:	602a      	str	r2, [r5, #0]
 801a158:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a15c:	81a3      	strh	r3, [r4, #12]
 801a15e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a162:	e033      	b.n	801a1cc <__swsetup_r+0x98>
 801a164:	0758      	lsls	r0, r3, #29
 801a166:	d512      	bpl.n	801a18e <__swsetup_r+0x5a>
 801a168:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a16a:	b141      	cbz	r1, 801a17e <__swsetup_r+0x4a>
 801a16c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a170:	4299      	cmp	r1, r3
 801a172:	d002      	beq.n	801a17a <__swsetup_r+0x46>
 801a174:	4628      	mov	r0, r5
 801a176:	f000 f95f 	bl	801a438 <_free_r>
 801a17a:	2300      	movs	r3, #0
 801a17c:	6363      	str	r3, [r4, #52]	@ 0x34
 801a17e:	89a3      	ldrh	r3, [r4, #12]
 801a180:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801a184:	81a3      	strh	r3, [r4, #12]
 801a186:	2300      	movs	r3, #0
 801a188:	6063      	str	r3, [r4, #4]
 801a18a:	6923      	ldr	r3, [r4, #16]
 801a18c:	6023      	str	r3, [r4, #0]
 801a18e:	89a3      	ldrh	r3, [r4, #12]
 801a190:	f043 0308 	orr.w	r3, r3, #8
 801a194:	81a3      	strh	r3, [r4, #12]
 801a196:	6923      	ldr	r3, [r4, #16]
 801a198:	b94b      	cbnz	r3, 801a1ae <__swsetup_r+0x7a>
 801a19a:	89a3      	ldrh	r3, [r4, #12]
 801a19c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801a1a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a1a4:	d003      	beq.n	801a1ae <__swsetup_r+0x7a>
 801a1a6:	4621      	mov	r1, r4
 801a1a8:	4628      	mov	r0, r5
 801a1aa:	f000 fea1 	bl	801aef0 <__smakebuf_r>
 801a1ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a1b2:	f013 0201 	ands.w	r2, r3, #1
 801a1b6:	d00a      	beq.n	801a1ce <__swsetup_r+0x9a>
 801a1b8:	2200      	movs	r2, #0
 801a1ba:	60a2      	str	r2, [r4, #8]
 801a1bc:	6962      	ldr	r2, [r4, #20]
 801a1be:	4252      	negs	r2, r2
 801a1c0:	61a2      	str	r2, [r4, #24]
 801a1c2:	6922      	ldr	r2, [r4, #16]
 801a1c4:	b942      	cbnz	r2, 801a1d8 <__swsetup_r+0xa4>
 801a1c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801a1ca:	d1c5      	bne.n	801a158 <__swsetup_r+0x24>
 801a1cc:	bd38      	pop	{r3, r4, r5, pc}
 801a1ce:	0799      	lsls	r1, r3, #30
 801a1d0:	bf58      	it	pl
 801a1d2:	6962      	ldrpl	r2, [r4, #20]
 801a1d4:	60a2      	str	r2, [r4, #8]
 801a1d6:	e7f4      	b.n	801a1c2 <__swsetup_r+0x8e>
 801a1d8:	2000      	movs	r0, #0
 801a1da:	e7f7      	b.n	801a1cc <__swsetup_r+0x98>
 801a1dc:	20000928 	.word	0x20000928

0801a1e0 <memcmp>:
 801a1e0:	b510      	push	{r4, lr}
 801a1e2:	3901      	subs	r1, #1
 801a1e4:	4402      	add	r2, r0
 801a1e6:	4290      	cmp	r0, r2
 801a1e8:	d101      	bne.n	801a1ee <memcmp+0xe>
 801a1ea:	2000      	movs	r0, #0
 801a1ec:	e005      	b.n	801a1fa <memcmp+0x1a>
 801a1ee:	7803      	ldrb	r3, [r0, #0]
 801a1f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801a1f4:	42a3      	cmp	r3, r4
 801a1f6:	d001      	beq.n	801a1fc <memcmp+0x1c>
 801a1f8:	1b18      	subs	r0, r3, r4
 801a1fa:	bd10      	pop	{r4, pc}
 801a1fc:	3001      	adds	r0, #1
 801a1fe:	e7f2      	b.n	801a1e6 <memcmp+0x6>

0801a200 <memmove>:
 801a200:	4288      	cmp	r0, r1
 801a202:	b510      	push	{r4, lr}
 801a204:	eb01 0402 	add.w	r4, r1, r2
 801a208:	d902      	bls.n	801a210 <memmove+0x10>
 801a20a:	4284      	cmp	r4, r0
 801a20c:	4623      	mov	r3, r4
 801a20e:	d807      	bhi.n	801a220 <memmove+0x20>
 801a210:	1e43      	subs	r3, r0, #1
 801a212:	42a1      	cmp	r1, r4
 801a214:	d008      	beq.n	801a228 <memmove+0x28>
 801a216:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a21a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a21e:	e7f8      	b.n	801a212 <memmove+0x12>
 801a220:	4402      	add	r2, r0
 801a222:	4601      	mov	r1, r0
 801a224:	428a      	cmp	r2, r1
 801a226:	d100      	bne.n	801a22a <memmove+0x2a>
 801a228:	bd10      	pop	{r4, pc}
 801a22a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a22e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a232:	e7f7      	b.n	801a224 <memmove+0x24>

0801a234 <memset>:
 801a234:	4402      	add	r2, r0
 801a236:	4603      	mov	r3, r0
 801a238:	4293      	cmp	r3, r2
 801a23a:	d100      	bne.n	801a23e <memset+0xa>
 801a23c:	4770      	bx	lr
 801a23e:	f803 1b01 	strb.w	r1, [r3], #1
 801a242:	e7f9      	b.n	801a238 <memset+0x4>

0801a244 <strchr>:
 801a244:	b2c9      	uxtb	r1, r1
 801a246:	4603      	mov	r3, r0
 801a248:	4618      	mov	r0, r3
 801a24a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a24e:	b112      	cbz	r2, 801a256 <strchr+0x12>
 801a250:	428a      	cmp	r2, r1
 801a252:	d1f9      	bne.n	801a248 <strchr+0x4>
 801a254:	4770      	bx	lr
 801a256:	2900      	cmp	r1, #0
 801a258:	bf18      	it	ne
 801a25a:	2000      	movne	r0, #0
 801a25c:	4770      	bx	lr

0801a25e <strncmp>:
 801a25e:	b510      	push	{r4, lr}
 801a260:	b16a      	cbz	r2, 801a27e <strncmp+0x20>
 801a262:	3901      	subs	r1, #1
 801a264:	1884      	adds	r4, r0, r2
 801a266:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a26a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801a26e:	429a      	cmp	r2, r3
 801a270:	d103      	bne.n	801a27a <strncmp+0x1c>
 801a272:	42a0      	cmp	r0, r4
 801a274:	d001      	beq.n	801a27a <strncmp+0x1c>
 801a276:	2a00      	cmp	r2, #0
 801a278:	d1f5      	bne.n	801a266 <strncmp+0x8>
 801a27a:	1ad0      	subs	r0, r2, r3
 801a27c:	bd10      	pop	{r4, pc}
 801a27e:	4610      	mov	r0, r2
 801a280:	e7fc      	b.n	801a27c <strncmp+0x1e>

0801a282 <strstr>:
 801a282:	780a      	ldrb	r2, [r1, #0]
 801a284:	b570      	push	{r4, r5, r6, lr}
 801a286:	b96a      	cbnz	r2, 801a2a4 <strstr+0x22>
 801a288:	bd70      	pop	{r4, r5, r6, pc}
 801a28a:	429a      	cmp	r2, r3
 801a28c:	d109      	bne.n	801a2a2 <strstr+0x20>
 801a28e:	460c      	mov	r4, r1
 801a290:	4605      	mov	r5, r0
 801a292:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801a296:	2b00      	cmp	r3, #0
 801a298:	d0f6      	beq.n	801a288 <strstr+0x6>
 801a29a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801a29e:	429e      	cmp	r6, r3
 801a2a0:	d0f7      	beq.n	801a292 <strstr+0x10>
 801a2a2:	3001      	adds	r0, #1
 801a2a4:	7803      	ldrb	r3, [r0, #0]
 801a2a6:	2b00      	cmp	r3, #0
 801a2a8:	d1ef      	bne.n	801a28a <strstr+0x8>
 801a2aa:	4618      	mov	r0, r3
 801a2ac:	e7ec      	b.n	801a288 <strstr+0x6>
	...

0801a2b0 <_close_r>:
 801a2b0:	b538      	push	{r3, r4, r5, lr}
 801a2b2:	4d06      	ldr	r5, [pc, #24]	@ (801a2cc <_close_r+0x1c>)
 801a2b4:	2300      	movs	r3, #0
 801a2b6:	4604      	mov	r4, r0
 801a2b8:	4608      	mov	r0, r1
 801a2ba:	602b      	str	r3, [r5, #0]
 801a2bc:	f7e9 fca6 	bl	8003c0c <_close>
 801a2c0:	1c43      	adds	r3, r0, #1
 801a2c2:	d102      	bne.n	801a2ca <_close_r+0x1a>
 801a2c4:	682b      	ldr	r3, [r5, #0]
 801a2c6:	b103      	cbz	r3, 801a2ca <_close_r+0x1a>
 801a2c8:	6023      	str	r3, [r4, #0]
 801a2ca:	bd38      	pop	{r3, r4, r5, pc}
 801a2cc:	20011ad0 	.word	0x20011ad0

0801a2d0 <_lseek_r>:
 801a2d0:	b538      	push	{r3, r4, r5, lr}
 801a2d2:	4d07      	ldr	r5, [pc, #28]	@ (801a2f0 <_lseek_r+0x20>)
 801a2d4:	4604      	mov	r4, r0
 801a2d6:	4608      	mov	r0, r1
 801a2d8:	4611      	mov	r1, r2
 801a2da:	2200      	movs	r2, #0
 801a2dc:	602a      	str	r2, [r5, #0]
 801a2de:	461a      	mov	r2, r3
 801a2e0:	f7e9 fcbb 	bl	8003c5a <_lseek>
 801a2e4:	1c43      	adds	r3, r0, #1
 801a2e6:	d102      	bne.n	801a2ee <_lseek_r+0x1e>
 801a2e8:	682b      	ldr	r3, [r5, #0]
 801a2ea:	b103      	cbz	r3, 801a2ee <_lseek_r+0x1e>
 801a2ec:	6023      	str	r3, [r4, #0]
 801a2ee:	bd38      	pop	{r3, r4, r5, pc}
 801a2f0:	20011ad0 	.word	0x20011ad0

0801a2f4 <_read_r>:
 801a2f4:	b538      	push	{r3, r4, r5, lr}
 801a2f6:	4d07      	ldr	r5, [pc, #28]	@ (801a314 <_read_r+0x20>)
 801a2f8:	4604      	mov	r4, r0
 801a2fa:	4608      	mov	r0, r1
 801a2fc:	4611      	mov	r1, r2
 801a2fe:	2200      	movs	r2, #0
 801a300:	602a      	str	r2, [r5, #0]
 801a302:	461a      	mov	r2, r3
 801a304:	f7e9 fc49 	bl	8003b9a <_read>
 801a308:	1c43      	adds	r3, r0, #1
 801a30a:	d102      	bne.n	801a312 <_read_r+0x1e>
 801a30c:	682b      	ldr	r3, [r5, #0]
 801a30e:	b103      	cbz	r3, 801a312 <_read_r+0x1e>
 801a310:	6023      	str	r3, [r4, #0]
 801a312:	bd38      	pop	{r3, r4, r5, pc}
 801a314:	20011ad0 	.word	0x20011ad0

0801a318 <_sbrk_r>:
 801a318:	b538      	push	{r3, r4, r5, lr}
 801a31a:	4d06      	ldr	r5, [pc, #24]	@ (801a334 <_sbrk_r+0x1c>)
 801a31c:	2300      	movs	r3, #0
 801a31e:	4604      	mov	r4, r0
 801a320:	4608      	mov	r0, r1
 801a322:	602b      	str	r3, [r5, #0]
 801a324:	f7e9 fca6 	bl	8003c74 <_sbrk>
 801a328:	1c43      	adds	r3, r0, #1
 801a32a:	d102      	bne.n	801a332 <_sbrk_r+0x1a>
 801a32c:	682b      	ldr	r3, [r5, #0]
 801a32e:	b103      	cbz	r3, 801a332 <_sbrk_r+0x1a>
 801a330:	6023      	str	r3, [r4, #0]
 801a332:	bd38      	pop	{r3, r4, r5, pc}
 801a334:	20011ad0 	.word	0x20011ad0

0801a338 <_write_r>:
 801a338:	b538      	push	{r3, r4, r5, lr}
 801a33a:	4d07      	ldr	r5, [pc, #28]	@ (801a358 <_write_r+0x20>)
 801a33c:	4604      	mov	r4, r0
 801a33e:	4608      	mov	r0, r1
 801a340:	4611      	mov	r1, r2
 801a342:	2200      	movs	r2, #0
 801a344:	602a      	str	r2, [r5, #0]
 801a346:	461a      	mov	r2, r3
 801a348:	f7e9 fc44 	bl	8003bd4 <_write>
 801a34c:	1c43      	adds	r3, r0, #1
 801a34e:	d102      	bne.n	801a356 <_write_r+0x1e>
 801a350:	682b      	ldr	r3, [r5, #0]
 801a352:	b103      	cbz	r3, 801a356 <_write_r+0x1e>
 801a354:	6023      	str	r3, [r4, #0]
 801a356:	bd38      	pop	{r3, r4, r5, pc}
 801a358:	20011ad0 	.word	0x20011ad0

0801a35c <__errno>:
 801a35c:	4b01      	ldr	r3, [pc, #4]	@ (801a364 <__errno+0x8>)
 801a35e:	6818      	ldr	r0, [r3, #0]
 801a360:	4770      	bx	lr
 801a362:	bf00      	nop
 801a364:	20000928 	.word	0x20000928

0801a368 <__libc_init_array>:
 801a368:	b570      	push	{r4, r5, r6, lr}
 801a36a:	4d0d      	ldr	r5, [pc, #52]	@ (801a3a0 <__libc_init_array+0x38>)
 801a36c:	4c0d      	ldr	r4, [pc, #52]	@ (801a3a4 <__libc_init_array+0x3c>)
 801a36e:	1b64      	subs	r4, r4, r5
 801a370:	10a4      	asrs	r4, r4, #2
 801a372:	2600      	movs	r6, #0
 801a374:	42a6      	cmp	r6, r4
 801a376:	d109      	bne.n	801a38c <__libc_init_array+0x24>
 801a378:	4d0b      	ldr	r5, [pc, #44]	@ (801a3a8 <__libc_init_array+0x40>)
 801a37a:	4c0c      	ldr	r4, [pc, #48]	@ (801a3ac <__libc_init_array+0x44>)
 801a37c:	f000 fe62 	bl	801b044 <_init>
 801a380:	1b64      	subs	r4, r4, r5
 801a382:	10a4      	asrs	r4, r4, #2
 801a384:	2600      	movs	r6, #0
 801a386:	42a6      	cmp	r6, r4
 801a388:	d105      	bne.n	801a396 <__libc_init_array+0x2e>
 801a38a:	bd70      	pop	{r4, r5, r6, pc}
 801a38c:	f855 3b04 	ldr.w	r3, [r5], #4
 801a390:	4798      	blx	r3
 801a392:	3601      	adds	r6, #1
 801a394:	e7ee      	b.n	801a374 <__libc_init_array+0xc>
 801a396:	f855 3b04 	ldr.w	r3, [r5], #4
 801a39a:	4798      	blx	r3
 801a39c:	3601      	adds	r6, #1
 801a39e:	e7f2      	b.n	801a386 <__libc_init_array+0x1e>
 801a3a0:	0801c300 	.word	0x0801c300
 801a3a4:	0801c300 	.word	0x0801c300
 801a3a8:	0801c300 	.word	0x0801c300
 801a3ac:	0801c318 	.word	0x0801c318

0801a3b0 <__retarget_lock_init_recursive>:
 801a3b0:	4770      	bx	lr

0801a3b2 <__retarget_lock_acquire_recursive>:
 801a3b2:	4770      	bx	lr

0801a3b4 <__retarget_lock_release_recursive>:
 801a3b4:	4770      	bx	lr

0801a3b6 <strcpy>:
 801a3b6:	4603      	mov	r3, r0
 801a3b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a3bc:	f803 2b01 	strb.w	r2, [r3], #1
 801a3c0:	2a00      	cmp	r2, #0
 801a3c2:	d1f9      	bne.n	801a3b8 <strcpy+0x2>
 801a3c4:	4770      	bx	lr

0801a3c6 <memcpy>:
 801a3c6:	440a      	add	r2, r1
 801a3c8:	4291      	cmp	r1, r2
 801a3ca:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801a3ce:	d100      	bne.n	801a3d2 <memcpy+0xc>
 801a3d0:	4770      	bx	lr
 801a3d2:	b510      	push	{r4, lr}
 801a3d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a3d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a3dc:	4291      	cmp	r1, r2
 801a3de:	d1f9      	bne.n	801a3d4 <memcpy+0xe>
 801a3e0:	bd10      	pop	{r4, pc}
	...

0801a3e4 <__assert_func>:
 801a3e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a3e6:	4614      	mov	r4, r2
 801a3e8:	461a      	mov	r2, r3
 801a3ea:	4b09      	ldr	r3, [pc, #36]	@ (801a410 <__assert_func+0x2c>)
 801a3ec:	681b      	ldr	r3, [r3, #0]
 801a3ee:	4605      	mov	r5, r0
 801a3f0:	68d8      	ldr	r0, [r3, #12]
 801a3f2:	b14c      	cbz	r4, 801a408 <__assert_func+0x24>
 801a3f4:	4b07      	ldr	r3, [pc, #28]	@ (801a414 <__assert_func+0x30>)
 801a3f6:	9100      	str	r1, [sp, #0]
 801a3f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a3fc:	4906      	ldr	r1, [pc, #24]	@ (801a418 <__assert_func+0x34>)
 801a3fe:	462b      	mov	r3, r5
 801a400:	f000 fd3e 	bl	801ae80 <fiprintf>
 801a404:	f000 fdd2 	bl	801afac <abort>
 801a408:	4b04      	ldr	r3, [pc, #16]	@ (801a41c <__assert_func+0x38>)
 801a40a:	461c      	mov	r4, r3
 801a40c:	e7f3      	b.n	801a3f6 <__assert_func+0x12>
 801a40e:	bf00      	nop
 801a410:	20000928 	.word	0x20000928
 801a414:	0801c187 	.word	0x0801c187
 801a418:	0801c194 	.word	0x0801c194
 801a41c:	0801c1c2 	.word	0x0801c1c2

0801a420 <__env_lock>:
 801a420:	4801      	ldr	r0, [pc, #4]	@ (801a428 <__env_lock+0x8>)
 801a422:	f7ff bfc6 	b.w	801a3b2 <__retarget_lock_acquire_recursive>
 801a426:	bf00      	nop
 801a428:	20011ad4 	.word	0x20011ad4

0801a42c <__env_unlock>:
 801a42c:	4801      	ldr	r0, [pc, #4]	@ (801a434 <__env_unlock+0x8>)
 801a42e:	f7ff bfc1 	b.w	801a3b4 <__retarget_lock_release_recursive>
 801a432:	bf00      	nop
 801a434:	20011ad4 	.word	0x20011ad4

0801a438 <_free_r>:
 801a438:	b538      	push	{r3, r4, r5, lr}
 801a43a:	4605      	mov	r5, r0
 801a43c:	2900      	cmp	r1, #0
 801a43e:	d041      	beq.n	801a4c4 <_free_r+0x8c>
 801a440:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a444:	1f0c      	subs	r4, r1, #4
 801a446:	2b00      	cmp	r3, #0
 801a448:	bfb8      	it	lt
 801a44a:	18e4      	addlt	r4, r4, r3
 801a44c:	f7ff fb2a 	bl	8019aa4 <__malloc_lock>
 801a450:	4a1d      	ldr	r2, [pc, #116]	@ (801a4c8 <_free_r+0x90>)
 801a452:	6813      	ldr	r3, [r2, #0]
 801a454:	b933      	cbnz	r3, 801a464 <_free_r+0x2c>
 801a456:	6063      	str	r3, [r4, #4]
 801a458:	6014      	str	r4, [r2, #0]
 801a45a:	4628      	mov	r0, r5
 801a45c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a460:	f7ff bb26 	b.w	8019ab0 <__malloc_unlock>
 801a464:	42a3      	cmp	r3, r4
 801a466:	d908      	bls.n	801a47a <_free_r+0x42>
 801a468:	6820      	ldr	r0, [r4, #0]
 801a46a:	1821      	adds	r1, r4, r0
 801a46c:	428b      	cmp	r3, r1
 801a46e:	bf01      	itttt	eq
 801a470:	6819      	ldreq	r1, [r3, #0]
 801a472:	685b      	ldreq	r3, [r3, #4]
 801a474:	1809      	addeq	r1, r1, r0
 801a476:	6021      	streq	r1, [r4, #0]
 801a478:	e7ed      	b.n	801a456 <_free_r+0x1e>
 801a47a:	461a      	mov	r2, r3
 801a47c:	685b      	ldr	r3, [r3, #4]
 801a47e:	b10b      	cbz	r3, 801a484 <_free_r+0x4c>
 801a480:	42a3      	cmp	r3, r4
 801a482:	d9fa      	bls.n	801a47a <_free_r+0x42>
 801a484:	6811      	ldr	r1, [r2, #0]
 801a486:	1850      	adds	r0, r2, r1
 801a488:	42a0      	cmp	r0, r4
 801a48a:	d10b      	bne.n	801a4a4 <_free_r+0x6c>
 801a48c:	6820      	ldr	r0, [r4, #0]
 801a48e:	4401      	add	r1, r0
 801a490:	1850      	adds	r0, r2, r1
 801a492:	4283      	cmp	r3, r0
 801a494:	6011      	str	r1, [r2, #0]
 801a496:	d1e0      	bne.n	801a45a <_free_r+0x22>
 801a498:	6818      	ldr	r0, [r3, #0]
 801a49a:	685b      	ldr	r3, [r3, #4]
 801a49c:	6053      	str	r3, [r2, #4]
 801a49e:	4408      	add	r0, r1
 801a4a0:	6010      	str	r0, [r2, #0]
 801a4a2:	e7da      	b.n	801a45a <_free_r+0x22>
 801a4a4:	d902      	bls.n	801a4ac <_free_r+0x74>
 801a4a6:	230c      	movs	r3, #12
 801a4a8:	602b      	str	r3, [r5, #0]
 801a4aa:	e7d6      	b.n	801a45a <_free_r+0x22>
 801a4ac:	6820      	ldr	r0, [r4, #0]
 801a4ae:	1821      	adds	r1, r4, r0
 801a4b0:	428b      	cmp	r3, r1
 801a4b2:	bf04      	itt	eq
 801a4b4:	6819      	ldreq	r1, [r3, #0]
 801a4b6:	685b      	ldreq	r3, [r3, #4]
 801a4b8:	6063      	str	r3, [r4, #4]
 801a4ba:	bf04      	itt	eq
 801a4bc:	1809      	addeq	r1, r1, r0
 801a4be:	6021      	streq	r1, [r4, #0]
 801a4c0:	6054      	str	r4, [r2, #4]
 801a4c2:	e7ca      	b.n	801a45a <_free_r+0x22>
 801a4c4:	bd38      	pop	{r3, r4, r5, pc}
 801a4c6:	bf00      	nop
 801a4c8:	20011990 	.word	0x20011990

0801a4cc <_malloc_usable_size_r>:
 801a4cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a4d0:	1f18      	subs	r0, r3, #4
 801a4d2:	2b00      	cmp	r3, #0
 801a4d4:	bfbc      	itt	lt
 801a4d6:	580b      	ldrlt	r3, [r1, r0]
 801a4d8:	18c0      	addlt	r0, r0, r3
 801a4da:	4770      	bx	lr

0801a4dc <__ssputs_r>:
 801a4dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a4e0:	688e      	ldr	r6, [r1, #8]
 801a4e2:	461f      	mov	r7, r3
 801a4e4:	42be      	cmp	r6, r7
 801a4e6:	680b      	ldr	r3, [r1, #0]
 801a4e8:	4682      	mov	sl, r0
 801a4ea:	460c      	mov	r4, r1
 801a4ec:	4690      	mov	r8, r2
 801a4ee:	d82d      	bhi.n	801a54c <__ssputs_r+0x70>
 801a4f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a4f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801a4f8:	d026      	beq.n	801a548 <__ssputs_r+0x6c>
 801a4fa:	6965      	ldr	r5, [r4, #20]
 801a4fc:	6909      	ldr	r1, [r1, #16]
 801a4fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a502:	eba3 0901 	sub.w	r9, r3, r1
 801a506:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a50a:	1c7b      	adds	r3, r7, #1
 801a50c:	444b      	add	r3, r9
 801a50e:	106d      	asrs	r5, r5, #1
 801a510:	429d      	cmp	r5, r3
 801a512:	bf38      	it	cc
 801a514:	461d      	movcc	r5, r3
 801a516:	0553      	lsls	r3, r2, #21
 801a518:	d527      	bpl.n	801a56a <__ssputs_r+0x8e>
 801a51a:	4629      	mov	r1, r5
 801a51c:	f7ff fa42 	bl	80199a4 <_malloc_r>
 801a520:	4606      	mov	r6, r0
 801a522:	b360      	cbz	r0, 801a57e <__ssputs_r+0xa2>
 801a524:	6921      	ldr	r1, [r4, #16]
 801a526:	464a      	mov	r2, r9
 801a528:	f7ff ff4d 	bl	801a3c6 <memcpy>
 801a52c:	89a3      	ldrh	r3, [r4, #12]
 801a52e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801a532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a536:	81a3      	strh	r3, [r4, #12]
 801a538:	6126      	str	r6, [r4, #16]
 801a53a:	6165      	str	r5, [r4, #20]
 801a53c:	444e      	add	r6, r9
 801a53e:	eba5 0509 	sub.w	r5, r5, r9
 801a542:	6026      	str	r6, [r4, #0]
 801a544:	60a5      	str	r5, [r4, #8]
 801a546:	463e      	mov	r6, r7
 801a548:	42be      	cmp	r6, r7
 801a54a:	d900      	bls.n	801a54e <__ssputs_r+0x72>
 801a54c:	463e      	mov	r6, r7
 801a54e:	6820      	ldr	r0, [r4, #0]
 801a550:	4632      	mov	r2, r6
 801a552:	4641      	mov	r1, r8
 801a554:	f7ff fe54 	bl	801a200 <memmove>
 801a558:	68a3      	ldr	r3, [r4, #8]
 801a55a:	1b9b      	subs	r3, r3, r6
 801a55c:	60a3      	str	r3, [r4, #8]
 801a55e:	6823      	ldr	r3, [r4, #0]
 801a560:	4433      	add	r3, r6
 801a562:	6023      	str	r3, [r4, #0]
 801a564:	2000      	movs	r0, #0
 801a566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a56a:	462a      	mov	r2, r5
 801a56c:	f7ff fb1a 	bl	8019ba4 <_realloc_r>
 801a570:	4606      	mov	r6, r0
 801a572:	2800      	cmp	r0, #0
 801a574:	d1e0      	bne.n	801a538 <__ssputs_r+0x5c>
 801a576:	6921      	ldr	r1, [r4, #16]
 801a578:	4650      	mov	r0, sl
 801a57a:	f7ff ff5d 	bl	801a438 <_free_r>
 801a57e:	230c      	movs	r3, #12
 801a580:	f8ca 3000 	str.w	r3, [sl]
 801a584:	89a3      	ldrh	r3, [r4, #12]
 801a586:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a58a:	81a3      	strh	r3, [r4, #12]
 801a58c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a590:	e7e9      	b.n	801a566 <__ssputs_r+0x8a>
	...

0801a594 <_svfiprintf_r>:
 801a594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a598:	4698      	mov	r8, r3
 801a59a:	898b      	ldrh	r3, [r1, #12]
 801a59c:	061b      	lsls	r3, r3, #24
 801a59e:	b09d      	sub	sp, #116	@ 0x74
 801a5a0:	4607      	mov	r7, r0
 801a5a2:	460d      	mov	r5, r1
 801a5a4:	4614      	mov	r4, r2
 801a5a6:	d510      	bpl.n	801a5ca <_svfiprintf_r+0x36>
 801a5a8:	690b      	ldr	r3, [r1, #16]
 801a5aa:	b973      	cbnz	r3, 801a5ca <_svfiprintf_r+0x36>
 801a5ac:	2140      	movs	r1, #64	@ 0x40
 801a5ae:	f7ff f9f9 	bl	80199a4 <_malloc_r>
 801a5b2:	6028      	str	r0, [r5, #0]
 801a5b4:	6128      	str	r0, [r5, #16]
 801a5b6:	b930      	cbnz	r0, 801a5c6 <_svfiprintf_r+0x32>
 801a5b8:	230c      	movs	r3, #12
 801a5ba:	603b      	str	r3, [r7, #0]
 801a5bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a5c0:	b01d      	add	sp, #116	@ 0x74
 801a5c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5c6:	2340      	movs	r3, #64	@ 0x40
 801a5c8:	616b      	str	r3, [r5, #20]
 801a5ca:	2300      	movs	r3, #0
 801a5cc:	9309      	str	r3, [sp, #36]	@ 0x24
 801a5ce:	2320      	movs	r3, #32
 801a5d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a5d4:	f8cd 800c 	str.w	r8, [sp, #12]
 801a5d8:	2330      	movs	r3, #48	@ 0x30
 801a5da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801a778 <_svfiprintf_r+0x1e4>
 801a5de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a5e2:	f04f 0901 	mov.w	r9, #1
 801a5e6:	4623      	mov	r3, r4
 801a5e8:	469a      	mov	sl, r3
 801a5ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a5ee:	b10a      	cbz	r2, 801a5f4 <_svfiprintf_r+0x60>
 801a5f0:	2a25      	cmp	r2, #37	@ 0x25
 801a5f2:	d1f9      	bne.n	801a5e8 <_svfiprintf_r+0x54>
 801a5f4:	ebba 0b04 	subs.w	fp, sl, r4
 801a5f8:	d00b      	beq.n	801a612 <_svfiprintf_r+0x7e>
 801a5fa:	465b      	mov	r3, fp
 801a5fc:	4622      	mov	r2, r4
 801a5fe:	4629      	mov	r1, r5
 801a600:	4638      	mov	r0, r7
 801a602:	f7ff ff6b 	bl	801a4dc <__ssputs_r>
 801a606:	3001      	adds	r0, #1
 801a608:	f000 80a7 	beq.w	801a75a <_svfiprintf_r+0x1c6>
 801a60c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a60e:	445a      	add	r2, fp
 801a610:	9209      	str	r2, [sp, #36]	@ 0x24
 801a612:	f89a 3000 	ldrb.w	r3, [sl]
 801a616:	2b00      	cmp	r3, #0
 801a618:	f000 809f 	beq.w	801a75a <_svfiprintf_r+0x1c6>
 801a61c:	2300      	movs	r3, #0
 801a61e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a622:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a626:	f10a 0a01 	add.w	sl, sl, #1
 801a62a:	9304      	str	r3, [sp, #16]
 801a62c:	9307      	str	r3, [sp, #28]
 801a62e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a632:	931a      	str	r3, [sp, #104]	@ 0x68
 801a634:	4654      	mov	r4, sl
 801a636:	2205      	movs	r2, #5
 801a638:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a63c:	484e      	ldr	r0, [pc, #312]	@ (801a778 <_svfiprintf_r+0x1e4>)
 801a63e:	f7e5 fdff 	bl	8000240 <memchr>
 801a642:	9a04      	ldr	r2, [sp, #16]
 801a644:	b9d8      	cbnz	r0, 801a67e <_svfiprintf_r+0xea>
 801a646:	06d0      	lsls	r0, r2, #27
 801a648:	bf44      	itt	mi
 801a64a:	2320      	movmi	r3, #32
 801a64c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a650:	0711      	lsls	r1, r2, #28
 801a652:	bf44      	itt	mi
 801a654:	232b      	movmi	r3, #43	@ 0x2b
 801a656:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a65a:	f89a 3000 	ldrb.w	r3, [sl]
 801a65e:	2b2a      	cmp	r3, #42	@ 0x2a
 801a660:	d015      	beq.n	801a68e <_svfiprintf_r+0xfa>
 801a662:	9a07      	ldr	r2, [sp, #28]
 801a664:	4654      	mov	r4, sl
 801a666:	2000      	movs	r0, #0
 801a668:	f04f 0c0a 	mov.w	ip, #10
 801a66c:	4621      	mov	r1, r4
 801a66e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a672:	3b30      	subs	r3, #48	@ 0x30
 801a674:	2b09      	cmp	r3, #9
 801a676:	d94b      	bls.n	801a710 <_svfiprintf_r+0x17c>
 801a678:	b1b0      	cbz	r0, 801a6a8 <_svfiprintf_r+0x114>
 801a67a:	9207      	str	r2, [sp, #28]
 801a67c:	e014      	b.n	801a6a8 <_svfiprintf_r+0x114>
 801a67e:	eba0 0308 	sub.w	r3, r0, r8
 801a682:	fa09 f303 	lsl.w	r3, r9, r3
 801a686:	4313      	orrs	r3, r2
 801a688:	9304      	str	r3, [sp, #16]
 801a68a:	46a2      	mov	sl, r4
 801a68c:	e7d2      	b.n	801a634 <_svfiprintf_r+0xa0>
 801a68e:	9b03      	ldr	r3, [sp, #12]
 801a690:	1d19      	adds	r1, r3, #4
 801a692:	681b      	ldr	r3, [r3, #0]
 801a694:	9103      	str	r1, [sp, #12]
 801a696:	2b00      	cmp	r3, #0
 801a698:	bfbb      	ittet	lt
 801a69a:	425b      	neglt	r3, r3
 801a69c:	f042 0202 	orrlt.w	r2, r2, #2
 801a6a0:	9307      	strge	r3, [sp, #28]
 801a6a2:	9307      	strlt	r3, [sp, #28]
 801a6a4:	bfb8      	it	lt
 801a6a6:	9204      	strlt	r2, [sp, #16]
 801a6a8:	7823      	ldrb	r3, [r4, #0]
 801a6aa:	2b2e      	cmp	r3, #46	@ 0x2e
 801a6ac:	d10a      	bne.n	801a6c4 <_svfiprintf_r+0x130>
 801a6ae:	7863      	ldrb	r3, [r4, #1]
 801a6b0:	2b2a      	cmp	r3, #42	@ 0x2a
 801a6b2:	d132      	bne.n	801a71a <_svfiprintf_r+0x186>
 801a6b4:	9b03      	ldr	r3, [sp, #12]
 801a6b6:	1d1a      	adds	r2, r3, #4
 801a6b8:	681b      	ldr	r3, [r3, #0]
 801a6ba:	9203      	str	r2, [sp, #12]
 801a6bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a6c0:	3402      	adds	r4, #2
 801a6c2:	9305      	str	r3, [sp, #20]
 801a6c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801a788 <_svfiprintf_r+0x1f4>
 801a6c8:	7821      	ldrb	r1, [r4, #0]
 801a6ca:	2203      	movs	r2, #3
 801a6cc:	4650      	mov	r0, sl
 801a6ce:	f7e5 fdb7 	bl	8000240 <memchr>
 801a6d2:	b138      	cbz	r0, 801a6e4 <_svfiprintf_r+0x150>
 801a6d4:	9b04      	ldr	r3, [sp, #16]
 801a6d6:	eba0 000a 	sub.w	r0, r0, sl
 801a6da:	2240      	movs	r2, #64	@ 0x40
 801a6dc:	4082      	lsls	r2, r0
 801a6de:	4313      	orrs	r3, r2
 801a6e0:	3401      	adds	r4, #1
 801a6e2:	9304      	str	r3, [sp, #16]
 801a6e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a6e8:	4824      	ldr	r0, [pc, #144]	@ (801a77c <_svfiprintf_r+0x1e8>)
 801a6ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a6ee:	2206      	movs	r2, #6
 801a6f0:	f7e5 fda6 	bl	8000240 <memchr>
 801a6f4:	2800      	cmp	r0, #0
 801a6f6:	d036      	beq.n	801a766 <_svfiprintf_r+0x1d2>
 801a6f8:	4b21      	ldr	r3, [pc, #132]	@ (801a780 <_svfiprintf_r+0x1ec>)
 801a6fa:	bb1b      	cbnz	r3, 801a744 <_svfiprintf_r+0x1b0>
 801a6fc:	9b03      	ldr	r3, [sp, #12]
 801a6fe:	3307      	adds	r3, #7
 801a700:	f023 0307 	bic.w	r3, r3, #7
 801a704:	3308      	adds	r3, #8
 801a706:	9303      	str	r3, [sp, #12]
 801a708:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a70a:	4433      	add	r3, r6
 801a70c:	9309      	str	r3, [sp, #36]	@ 0x24
 801a70e:	e76a      	b.n	801a5e6 <_svfiprintf_r+0x52>
 801a710:	fb0c 3202 	mla	r2, ip, r2, r3
 801a714:	460c      	mov	r4, r1
 801a716:	2001      	movs	r0, #1
 801a718:	e7a8      	b.n	801a66c <_svfiprintf_r+0xd8>
 801a71a:	2300      	movs	r3, #0
 801a71c:	3401      	adds	r4, #1
 801a71e:	9305      	str	r3, [sp, #20]
 801a720:	4619      	mov	r1, r3
 801a722:	f04f 0c0a 	mov.w	ip, #10
 801a726:	4620      	mov	r0, r4
 801a728:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a72c:	3a30      	subs	r2, #48	@ 0x30
 801a72e:	2a09      	cmp	r2, #9
 801a730:	d903      	bls.n	801a73a <_svfiprintf_r+0x1a6>
 801a732:	2b00      	cmp	r3, #0
 801a734:	d0c6      	beq.n	801a6c4 <_svfiprintf_r+0x130>
 801a736:	9105      	str	r1, [sp, #20]
 801a738:	e7c4      	b.n	801a6c4 <_svfiprintf_r+0x130>
 801a73a:	fb0c 2101 	mla	r1, ip, r1, r2
 801a73e:	4604      	mov	r4, r0
 801a740:	2301      	movs	r3, #1
 801a742:	e7f0      	b.n	801a726 <_svfiprintf_r+0x192>
 801a744:	ab03      	add	r3, sp, #12
 801a746:	9300      	str	r3, [sp, #0]
 801a748:	462a      	mov	r2, r5
 801a74a:	4b0e      	ldr	r3, [pc, #56]	@ (801a784 <_svfiprintf_r+0x1f0>)
 801a74c:	a904      	add	r1, sp, #16
 801a74e:	4638      	mov	r0, r7
 801a750:	f3af 8000 	nop.w
 801a754:	1c42      	adds	r2, r0, #1
 801a756:	4606      	mov	r6, r0
 801a758:	d1d6      	bne.n	801a708 <_svfiprintf_r+0x174>
 801a75a:	89ab      	ldrh	r3, [r5, #12]
 801a75c:	065b      	lsls	r3, r3, #25
 801a75e:	f53f af2d 	bmi.w	801a5bc <_svfiprintf_r+0x28>
 801a762:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a764:	e72c      	b.n	801a5c0 <_svfiprintf_r+0x2c>
 801a766:	ab03      	add	r3, sp, #12
 801a768:	9300      	str	r3, [sp, #0]
 801a76a:	462a      	mov	r2, r5
 801a76c:	4b05      	ldr	r3, [pc, #20]	@ (801a784 <_svfiprintf_r+0x1f0>)
 801a76e:	a904      	add	r1, sp, #16
 801a770:	4638      	mov	r0, r7
 801a772:	f000 f9bb 	bl	801aaec <_printf_i>
 801a776:	e7ed      	b.n	801a754 <_svfiprintf_r+0x1c0>
 801a778:	0801c1c3 	.word	0x0801c1c3
 801a77c:	0801c1cd 	.word	0x0801c1cd
 801a780:	00000000 	.word	0x00000000
 801a784:	0801a4dd 	.word	0x0801a4dd
 801a788:	0801c1c9 	.word	0x0801c1c9

0801a78c <__sfputc_r>:
 801a78c:	6893      	ldr	r3, [r2, #8]
 801a78e:	3b01      	subs	r3, #1
 801a790:	2b00      	cmp	r3, #0
 801a792:	b410      	push	{r4}
 801a794:	6093      	str	r3, [r2, #8]
 801a796:	da08      	bge.n	801a7aa <__sfputc_r+0x1e>
 801a798:	6994      	ldr	r4, [r2, #24]
 801a79a:	42a3      	cmp	r3, r4
 801a79c:	db01      	blt.n	801a7a2 <__sfputc_r+0x16>
 801a79e:	290a      	cmp	r1, #10
 801a7a0:	d103      	bne.n	801a7aa <__sfputc_r+0x1e>
 801a7a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a7a6:	f7ff bc87 	b.w	801a0b8 <__swbuf_r>
 801a7aa:	6813      	ldr	r3, [r2, #0]
 801a7ac:	1c58      	adds	r0, r3, #1
 801a7ae:	6010      	str	r0, [r2, #0]
 801a7b0:	7019      	strb	r1, [r3, #0]
 801a7b2:	4608      	mov	r0, r1
 801a7b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a7b8:	4770      	bx	lr

0801a7ba <__sfputs_r>:
 801a7ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a7bc:	4606      	mov	r6, r0
 801a7be:	460f      	mov	r7, r1
 801a7c0:	4614      	mov	r4, r2
 801a7c2:	18d5      	adds	r5, r2, r3
 801a7c4:	42ac      	cmp	r4, r5
 801a7c6:	d101      	bne.n	801a7cc <__sfputs_r+0x12>
 801a7c8:	2000      	movs	r0, #0
 801a7ca:	e007      	b.n	801a7dc <__sfputs_r+0x22>
 801a7cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a7d0:	463a      	mov	r2, r7
 801a7d2:	4630      	mov	r0, r6
 801a7d4:	f7ff ffda 	bl	801a78c <__sfputc_r>
 801a7d8:	1c43      	adds	r3, r0, #1
 801a7da:	d1f3      	bne.n	801a7c4 <__sfputs_r+0xa>
 801a7dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a7e0 <_vfiprintf_r>:
 801a7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7e4:	460d      	mov	r5, r1
 801a7e6:	b09d      	sub	sp, #116	@ 0x74
 801a7e8:	4614      	mov	r4, r2
 801a7ea:	4698      	mov	r8, r3
 801a7ec:	4606      	mov	r6, r0
 801a7ee:	b118      	cbz	r0, 801a7f8 <_vfiprintf_r+0x18>
 801a7f0:	6a03      	ldr	r3, [r0, #32]
 801a7f2:	b90b      	cbnz	r3, 801a7f8 <_vfiprintf_r+0x18>
 801a7f4:	f7ff fb08 	bl	8019e08 <__sinit>
 801a7f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a7fa:	07d9      	lsls	r1, r3, #31
 801a7fc:	d405      	bmi.n	801a80a <_vfiprintf_r+0x2a>
 801a7fe:	89ab      	ldrh	r3, [r5, #12]
 801a800:	059a      	lsls	r2, r3, #22
 801a802:	d402      	bmi.n	801a80a <_vfiprintf_r+0x2a>
 801a804:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a806:	f7ff fdd4 	bl	801a3b2 <__retarget_lock_acquire_recursive>
 801a80a:	89ab      	ldrh	r3, [r5, #12]
 801a80c:	071b      	lsls	r3, r3, #28
 801a80e:	d501      	bpl.n	801a814 <_vfiprintf_r+0x34>
 801a810:	692b      	ldr	r3, [r5, #16]
 801a812:	b99b      	cbnz	r3, 801a83c <_vfiprintf_r+0x5c>
 801a814:	4629      	mov	r1, r5
 801a816:	4630      	mov	r0, r6
 801a818:	f7ff fc8c 	bl	801a134 <__swsetup_r>
 801a81c:	b170      	cbz	r0, 801a83c <_vfiprintf_r+0x5c>
 801a81e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a820:	07dc      	lsls	r4, r3, #31
 801a822:	d504      	bpl.n	801a82e <_vfiprintf_r+0x4e>
 801a824:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a828:	b01d      	add	sp, #116	@ 0x74
 801a82a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a82e:	89ab      	ldrh	r3, [r5, #12]
 801a830:	0598      	lsls	r0, r3, #22
 801a832:	d4f7      	bmi.n	801a824 <_vfiprintf_r+0x44>
 801a834:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a836:	f7ff fdbd 	bl	801a3b4 <__retarget_lock_release_recursive>
 801a83a:	e7f3      	b.n	801a824 <_vfiprintf_r+0x44>
 801a83c:	2300      	movs	r3, #0
 801a83e:	9309      	str	r3, [sp, #36]	@ 0x24
 801a840:	2320      	movs	r3, #32
 801a842:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a846:	f8cd 800c 	str.w	r8, [sp, #12]
 801a84a:	2330      	movs	r3, #48	@ 0x30
 801a84c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801a9fc <_vfiprintf_r+0x21c>
 801a850:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a854:	f04f 0901 	mov.w	r9, #1
 801a858:	4623      	mov	r3, r4
 801a85a:	469a      	mov	sl, r3
 801a85c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a860:	b10a      	cbz	r2, 801a866 <_vfiprintf_r+0x86>
 801a862:	2a25      	cmp	r2, #37	@ 0x25
 801a864:	d1f9      	bne.n	801a85a <_vfiprintf_r+0x7a>
 801a866:	ebba 0b04 	subs.w	fp, sl, r4
 801a86a:	d00b      	beq.n	801a884 <_vfiprintf_r+0xa4>
 801a86c:	465b      	mov	r3, fp
 801a86e:	4622      	mov	r2, r4
 801a870:	4629      	mov	r1, r5
 801a872:	4630      	mov	r0, r6
 801a874:	f7ff ffa1 	bl	801a7ba <__sfputs_r>
 801a878:	3001      	adds	r0, #1
 801a87a:	f000 80a7 	beq.w	801a9cc <_vfiprintf_r+0x1ec>
 801a87e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a880:	445a      	add	r2, fp
 801a882:	9209      	str	r2, [sp, #36]	@ 0x24
 801a884:	f89a 3000 	ldrb.w	r3, [sl]
 801a888:	2b00      	cmp	r3, #0
 801a88a:	f000 809f 	beq.w	801a9cc <_vfiprintf_r+0x1ec>
 801a88e:	2300      	movs	r3, #0
 801a890:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a894:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a898:	f10a 0a01 	add.w	sl, sl, #1
 801a89c:	9304      	str	r3, [sp, #16]
 801a89e:	9307      	str	r3, [sp, #28]
 801a8a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a8a4:	931a      	str	r3, [sp, #104]	@ 0x68
 801a8a6:	4654      	mov	r4, sl
 801a8a8:	2205      	movs	r2, #5
 801a8aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a8ae:	4853      	ldr	r0, [pc, #332]	@ (801a9fc <_vfiprintf_r+0x21c>)
 801a8b0:	f7e5 fcc6 	bl	8000240 <memchr>
 801a8b4:	9a04      	ldr	r2, [sp, #16]
 801a8b6:	b9d8      	cbnz	r0, 801a8f0 <_vfiprintf_r+0x110>
 801a8b8:	06d1      	lsls	r1, r2, #27
 801a8ba:	bf44      	itt	mi
 801a8bc:	2320      	movmi	r3, #32
 801a8be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a8c2:	0713      	lsls	r3, r2, #28
 801a8c4:	bf44      	itt	mi
 801a8c6:	232b      	movmi	r3, #43	@ 0x2b
 801a8c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a8cc:	f89a 3000 	ldrb.w	r3, [sl]
 801a8d0:	2b2a      	cmp	r3, #42	@ 0x2a
 801a8d2:	d015      	beq.n	801a900 <_vfiprintf_r+0x120>
 801a8d4:	9a07      	ldr	r2, [sp, #28]
 801a8d6:	4654      	mov	r4, sl
 801a8d8:	2000      	movs	r0, #0
 801a8da:	f04f 0c0a 	mov.w	ip, #10
 801a8de:	4621      	mov	r1, r4
 801a8e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a8e4:	3b30      	subs	r3, #48	@ 0x30
 801a8e6:	2b09      	cmp	r3, #9
 801a8e8:	d94b      	bls.n	801a982 <_vfiprintf_r+0x1a2>
 801a8ea:	b1b0      	cbz	r0, 801a91a <_vfiprintf_r+0x13a>
 801a8ec:	9207      	str	r2, [sp, #28]
 801a8ee:	e014      	b.n	801a91a <_vfiprintf_r+0x13a>
 801a8f0:	eba0 0308 	sub.w	r3, r0, r8
 801a8f4:	fa09 f303 	lsl.w	r3, r9, r3
 801a8f8:	4313      	orrs	r3, r2
 801a8fa:	9304      	str	r3, [sp, #16]
 801a8fc:	46a2      	mov	sl, r4
 801a8fe:	e7d2      	b.n	801a8a6 <_vfiprintf_r+0xc6>
 801a900:	9b03      	ldr	r3, [sp, #12]
 801a902:	1d19      	adds	r1, r3, #4
 801a904:	681b      	ldr	r3, [r3, #0]
 801a906:	9103      	str	r1, [sp, #12]
 801a908:	2b00      	cmp	r3, #0
 801a90a:	bfbb      	ittet	lt
 801a90c:	425b      	neglt	r3, r3
 801a90e:	f042 0202 	orrlt.w	r2, r2, #2
 801a912:	9307      	strge	r3, [sp, #28]
 801a914:	9307      	strlt	r3, [sp, #28]
 801a916:	bfb8      	it	lt
 801a918:	9204      	strlt	r2, [sp, #16]
 801a91a:	7823      	ldrb	r3, [r4, #0]
 801a91c:	2b2e      	cmp	r3, #46	@ 0x2e
 801a91e:	d10a      	bne.n	801a936 <_vfiprintf_r+0x156>
 801a920:	7863      	ldrb	r3, [r4, #1]
 801a922:	2b2a      	cmp	r3, #42	@ 0x2a
 801a924:	d132      	bne.n	801a98c <_vfiprintf_r+0x1ac>
 801a926:	9b03      	ldr	r3, [sp, #12]
 801a928:	1d1a      	adds	r2, r3, #4
 801a92a:	681b      	ldr	r3, [r3, #0]
 801a92c:	9203      	str	r2, [sp, #12]
 801a92e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a932:	3402      	adds	r4, #2
 801a934:	9305      	str	r3, [sp, #20]
 801a936:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801aa0c <_vfiprintf_r+0x22c>
 801a93a:	7821      	ldrb	r1, [r4, #0]
 801a93c:	2203      	movs	r2, #3
 801a93e:	4650      	mov	r0, sl
 801a940:	f7e5 fc7e 	bl	8000240 <memchr>
 801a944:	b138      	cbz	r0, 801a956 <_vfiprintf_r+0x176>
 801a946:	9b04      	ldr	r3, [sp, #16]
 801a948:	eba0 000a 	sub.w	r0, r0, sl
 801a94c:	2240      	movs	r2, #64	@ 0x40
 801a94e:	4082      	lsls	r2, r0
 801a950:	4313      	orrs	r3, r2
 801a952:	3401      	adds	r4, #1
 801a954:	9304      	str	r3, [sp, #16]
 801a956:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a95a:	4829      	ldr	r0, [pc, #164]	@ (801aa00 <_vfiprintf_r+0x220>)
 801a95c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a960:	2206      	movs	r2, #6
 801a962:	f7e5 fc6d 	bl	8000240 <memchr>
 801a966:	2800      	cmp	r0, #0
 801a968:	d03f      	beq.n	801a9ea <_vfiprintf_r+0x20a>
 801a96a:	4b26      	ldr	r3, [pc, #152]	@ (801aa04 <_vfiprintf_r+0x224>)
 801a96c:	bb1b      	cbnz	r3, 801a9b6 <_vfiprintf_r+0x1d6>
 801a96e:	9b03      	ldr	r3, [sp, #12]
 801a970:	3307      	adds	r3, #7
 801a972:	f023 0307 	bic.w	r3, r3, #7
 801a976:	3308      	adds	r3, #8
 801a978:	9303      	str	r3, [sp, #12]
 801a97a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a97c:	443b      	add	r3, r7
 801a97e:	9309      	str	r3, [sp, #36]	@ 0x24
 801a980:	e76a      	b.n	801a858 <_vfiprintf_r+0x78>
 801a982:	fb0c 3202 	mla	r2, ip, r2, r3
 801a986:	460c      	mov	r4, r1
 801a988:	2001      	movs	r0, #1
 801a98a:	e7a8      	b.n	801a8de <_vfiprintf_r+0xfe>
 801a98c:	2300      	movs	r3, #0
 801a98e:	3401      	adds	r4, #1
 801a990:	9305      	str	r3, [sp, #20]
 801a992:	4619      	mov	r1, r3
 801a994:	f04f 0c0a 	mov.w	ip, #10
 801a998:	4620      	mov	r0, r4
 801a99a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a99e:	3a30      	subs	r2, #48	@ 0x30
 801a9a0:	2a09      	cmp	r2, #9
 801a9a2:	d903      	bls.n	801a9ac <_vfiprintf_r+0x1cc>
 801a9a4:	2b00      	cmp	r3, #0
 801a9a6:	d0c6      	beq.n	801a936 <_vfiprintf_r+0x156>
 801a9a8:	9105      	str	r1, [sp, #20]
 801a9aa:	e7c4      	b.n	801a936 <_vfiprintf_r+0x156>
 801a9ac:	fb0c 2101 	mla	r1, ip, r1, r2
 801a9b0:	4604      	mov	r4, r0
 801a9b2:	2301      	movs	r3, #1
 801a9b4:	e7f0      	b.n	801a998 <_vfiprintf_r+0x1b8>
 801a9b6:	ab03      	add	r3, sp, #12
 801a9b8:	9300      	str	r3, [sp, #0]
 801a9ba:	462a      	mov	r2, r5
 801a9bc:	4b12      	ldr	r3, [pc, #72]	@ (801aa08 <_vfiprintf_r+0x228>)
 801a9be:	a904      	add	r1, sp, #16
 801a9c0:	4630      	mov	r0, r6
 801a9c2:	f3af 8000 	nop.w
 801a9c6:	4607      	mov	r7, r0
 801a9c8:	1c78      	adds	r0, r7, #1
 801a9ca:	d1d6      	bne.n	801a97a <_vfiprintf_r+0x19a>
 801a9cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a9ce:	07d9      	lsls	r1, r3, #31
 801a9d0:	d405      	bmi.n	801a9de <_vfiprintf_r+0x1fe>
 801a9d2:	89ab      	ldrh	r3, [r5, #12]
 801a9d4:	059a      	lsls	r2, r3, #22
 801a9d6:	d402      	bmi.n	801a9de <_vfiprintf_r+0x1fe>
 801a9d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a9da:	f7ff fceb 	bl	801a3b4 <__retarget_lock_release_recursive>
 801a9de:	89ab      	ldrh	r3, [r5, #12]
 801a9e0:	065b      	lsls	r3, r3, #25
 801a9e2:	f53f af1f 	bmi.w	801a824 <_vfiprintf_r+0x44>
 801a9e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a9e8:	e71e      	b.n	801a828 <_vfiprintf_r+0x48>
 801a9ea:	ab03      	add	r3, sp, #12
 801a9ec:	9300      	str	r3, [sp, #0]
 801a9ee:	462a      	mov	r2, r5
 801a9f0:	4b05      	ldr	r3, [pc, #20]	@ (801aa08 <_vfiprintf_r+0x228>)
 801a9f2:	a904      	add	r1, sp, #16
 801a9f4:	4630      	mov	r0, r6
 801a9f6:	f000 f879 	bl	801aaec <_printf_i>
 801a9fa:	e7e4      	b.n	801a9c6 <_vfiprintf_r+0x1e6>
 801a9fc:	0801c1c3 	.word	0x0801c1c3
 801aa00:	0801c1cd 	.word	0x0801c1cd
 801aa04:	00000000 	.word	0x00000000
 801aa08:	0801a7bb 	.word	0x0801a7bb
 801aa0c:	0801c1c9 	.word	0x0801c1c9

0801aa10 <_printf_common>:
 801aa10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aa14:	4616      	mov	r6, r2
 801aa16:	4698      	mov	r8, r3
 801aa18:	688a      	ldr	r2, [r1, #8]
 801aa1a:	690b      	ldr	r3, [r1, #16]
 801aa1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801aa20:	4293      	cmp	r3, r2
 801aa22:	bfb8      	it	lt
 801aa24:	4613      	movlt	r3, r2
 801aa26:	6033      	str	r3, [r6, #0]
 801aa28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801aa2c:	4607      	mov	r7, r0
 801aa2e:	460c      	mov	r4, r1
 801aa30:	b10a      	cbz	r2, 801aa36 <_printf_common+0x26>
 801aa32:	3301      	adds	r3, #1
 801aa34:	6033      	str	r3, [r6, #0]
 801aa36:	6823      	ldr	r3, [r4, #0]
 801aa38:	0699      	lsls	r1, r3, #26
 801aa3a:	bf42      	ittt	mi
 801aa3c:	6833      	ldrmi	r3, [r6, #0]
 801aa3e:	3302      	addmi	r3, #2
 801aa40:	6033      	strmi	r3, [r6, #0]
 801aa42:	6825      	ldr	r5, [r4, #0]
 801aa44:	f015 0506 	ands.w	r5, r5, #6
 801aa48:	d106      	bne.n	801aa58 <_printf_common+0x48>
 801aa4a:	f104 0a19 	add.w	sl, r4, #25
 801aa4e:	68e3      	ldr	r3, [r4, #12]
 801aa50:	6832      	ldr	r2, [r6, #0]
 801aa52:	1a9b      	subs	r3, r3, r2
 801aa54:	42ab      	cmp	r3, r5
 801aa56:	dc26      	bgt.n	801aaa6 <_printf_common+0x96>
 801aa58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801aa5c:	6822      	ldr	r2, [r4, #0]
 801aa5e:	3b00      	subs	r3, #0
 801aa60:	bf18      	it	ne
 801aa62:	2301      	movne	r3, #1
 801aa64:	0692      	lsls	r2, r2, #26
 801aa66:	d42b      	bmi.n	801aac0 <_printf_common+0xb0>
 801aa68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801aa6c:	4641      	mov	r1, r8
 801aa6e:	4638      	mov	r0, r7
 801aa70:	47c8      	blx	r9
 801aa72:	3001      	adds	r0, #1
 801aa74:	d01e      	beq.n	801aab4 <_printf_common+0xa4>
 801aa76:	6823      	ldr	r3, [r4, #0]
 801aa78:	6922      	ldr	r2, [r4, #16]
 801aa7a:	f003 0306 	and.w	r3, r3, #6
 801aa7e:	2b04      	cmp	r3, #4
 801aa80:	bf02      	ittt	eq
 801aa82:	68e5      	ldreq	r5, [r4, #12]
 801aa84:	6833      	ldreq	r3, [r6, #0]
 801aa86:	1aed      	subeq	r5, r5, r3
 801aa88:	68a3      	ldr	r3, [r4, #8]
 801aa8a:	bf0c      	ite	eq
 801aa8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801aa90:	2500      	movne	r5, #0
 801aa92:	4293      	cmp	r3, r2
 801aa94:	bfc4      	itt	gt
 801aa96:	1a9b      	subgt	r3, r3, r2
 801aa98:	18ed      	addgt	r5, r5, r3
 801aa9a:	2600      	movs	r6, #0
 801aa9c:	341a      	adds	r4, #26
 801aa9e:	42b5      	cmp	r5, r6
 801aaa0:	d11a      	bne.n	801aad8 <_printf_common+0xc8>
 801aaa2:	2000      	movs	r0, #0
 801aaa4:	e008      	b.n	801aab8 <_printf_common+0xa8>
 801aaa6:	2301      	movs	r3, #1
 801aaa8:	4652      	mov	r2, sl
 801aaaa:	4641      	mov	r1, r8
 801aaac:	4638      	mov	r0, r7
 801aaae:	47c8      	blx	r9
 801aab0:	3001      	adds	r0, #1
 801aab2:	d103      	bne.n	801aabc <_printf_common+0xac>
 801aab4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801aab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aabc:	3501      	adds	r5, #1
 801aabe:	e7c6      	b.n	801aa4e <_printf_common+0x3e>
 801aac0:	18e1      	adds	r1, r4, r3
 801aac2:	1c5a      	adds	r2, r3, #1
 801aac4:	2030      	movs	r0, #48	@ 0x30
 801aac6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801aaca:	4422      	add	r2, r4
 801aacc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801aad0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801aad4:	3302      	adds	r3, #2
 801aad6:	e7c7      	b.n	801aa68 <_printf_common+0x58>
 801aad8:	2301      	movs	r3, #1
 801aada:	4622      	mov	r2, r4
 801aadc:	4641      	mov	r1, r8
 801aade:	4638      	mov	r0, r7
 801aae0:	47c8      	blx	r9
 801aae2:	3001      	adds	r0, #1
 801aae4:	d0e6      	beq.n	801aab4 <_printf_common+0xa4>
 801aae6:	3601      	adds	r6, #1
 801aae8:	e7d9      	b.n	801aa9e <_printf_common+0x8e>
	...

0801aaec <_printf_i>:
 801aaec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801aaf0:	7e0f      	ldrb	r7, [r1, #24]
 801aaf2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801aaf4:	2f78      	cmp	r7, #120	@ 0x78
 801aaf6:	4691      	mov	r9, r2
 801aaf8:	4680      	mov	r8, r0
 801aafa:	460c      	mov	r4, r1
 801aafc:	469a      	mov	sl, r3
 801aafe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801ab02:	d807      	bhi.n	801ab14 <_printf_i+0x28>
 801ab04:	2f62      	cmp	r7, #98	@ 0x62
 801ab06:	d80a      	bhi.n	801ab1e <_printf_i+0x32>
 801ab08:	2f00      	cmp	r7, #0
 801ab0a:	f000 80d1 	beq.w	801acb0 <_printf_i+0x1c4>
 801ab0e:	2f58      	cmp	r7, #88	@ 0x58
 801ab10:	f000 80b8 	beq.w	801ac84 <_printf_i+0x198>
 801ab14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801ab18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801ab1c:	e03a      	b.n	801ab94 <_printf_i+0xa8>
 801ab1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801ab22:	2b15      	cmp	r3, #21
 801ab24:	d8f6      	bhi.n	801ab14 <_printf_i+0x28>
 801ab26:	a101      	add	r1, pc, #4	@ (adr r1, 801ab2c <_printf_i+0x40>)
 801ab28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ab2c:	0801ab85 	.word	0x0801ab85
 801ab30:	0801ab99 	.word	0x0801ab99
 801ab34:	0801ab15 	.word	0x0801ab15
 801ab38:	0801ab15 	.word	0x0801ab15
 801ab3c:	0801ab15 	.word	0x0801ab15
 801ab40:	0801ab15 	.word	0x0801ab15
 801ab44:	0801ab99 	.word	0x0801ab99
 801ab48:	0801ab15 	.word	0x0801ab15
 801ab4c:	0801ab15 	.word	0x0801ab15
 801ab50:	0801ab15 	.word	0x0801ab15
 801ab54:	0801ab15 	.word	0x0801ab15
 801ab58:	0801ac97 	.word	0x0801ac97
 801ab5c:	0801abc3 	.word	0x0801abc3
 801ab60:	0801ac51 	.word	0x0801ac51
 801ab64:	0801ab15 	.word	0x0801ab15
 801ab68:	0801ab15 	.word	0x0801ab15
 801ab6c:	0801acb9 	.word	0x0801acb9
 801ab70:	0801ab15 	.word	0x0801ab15
 801ab74:	0801abc3 	.word	0x0801abc3
 801ab78:	0801ab15 	.word	0x0801ab15
 801ab7c:	0801ab15 	.word	0x0801ab15
 801ab80:	0801ac59 	.word	0x0801ac59
 801ab84:	6833      	ldr	r3, [r6, #0]
 801ab86:	1d1a      	adds	r2, r3, #4
 801ab88:	681b      	ldr	r3, [r3, #0]
 801ab8a:	6032      	str	r2, [r6, #0]
 801ab8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801ab90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801ab94:	2301      	movs	r3, #1
 801ab96:	e09c      	b.n	801acd2 <_printf_i+0x1e6>
 801ab98:	6833      	ldr	r3, [r6, #0]
 801ab9a:	6820      	ldr	r0, [r4, #0]
 801ab9c:	1d19      	adds	r1, r3, #4
 801ab9e:	6031      	str	r1, [r6, #0]
 801aba0:	0606      	lsls	r6, r0, #24
 801aba2:	d501      	bpl.n	801aba8 <_printf_i+0xbc>
 801aba4:	681d      	ldr	r5, [r3, #0]
 801aba6:	e003      	b.n	801abb0 <_printf_i+0xc4>
 801aba8:	0645      	lsls	r5, r0, #25
 801abaa:	d5fb      	bpl.n	801aba4 <_printf_i+0xb8>
 801abac:	f9b3 5000 	ldrsh.w	r5, [r3]
 801abb0:	2d00      	cmp	r5, #0
 801abb2:	da03      	bge.n	801abbc <_printf_i+0xd0>
 801abb4:	232d      	movs	r3, #45	@ 0x2d
 801abb6:	426d      	negs	r5, r5
 801abb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801abbc:	4858      	ldr	r0, [pc, #352]	@ (801ad20 <_printf_i+0x234>)
 801abbe:	230a      	movs	r3, #10
 801abc0:	e011      	b.n	801abe6 <_printf_i+0xfa>
 801abc2:	6821      	ldr	r1, [r4, #0]
 801abc4:	6833      	ldr	r3, [r6, #0]
 801abc6:	0608      	lsls	r0, r1, #24
 801abc8:	f853 5b04 	ldr.w	r5, [r3], #4
 801abcc:	d402      	bmi.n	801abd4 <_printf_i+0xe8>
 801abce:	0649      	lsls	r1, r1, #25
 801abd0:	bf48      	it	mi
 801abd2:	b2ad      	uxthmi	r5, r5
 801abd4:	2f6f      	cmp	r7, #111	@ 0x6f
 801abd6:	4852      	ldr	r0, [pc, #328]	@ (801ad20 <_printf_i+0x234>)
 801abd8:	6033      	str	r3, [r6, #0]
 801abda:	bf14      	ite	ne
 801abdc:	230a      	movne	r3, #10
 801abde:	2308      	moveq	r3, #8
 801abe0:	2100      	movs	r1, #0
 801abe2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801abe6:	6866      	ldr	r6, [r4, #4]
 801abe8:	60a6      	str	r6, [r4, #8]
 801abea:	2e00      	cmp	r6, #0
 801abec:	db05      	blt.n	801abfa <_printf_i+0x10e>
 801abee:	6821      	ldr	r1, [r4, #0]
 801abf0:	432e      	orrs	r6, r5
 801abf2:	f021 0104 	bic.w	r1, r1, #4
 801abf6:	6021      	str	r1, [r4, #0]
 801abf8:	d04b      	beq.n	801ac92 <_printf_i+0x1a6>
 801abfa:	4616      	mov	r6, r2
 801abfc:	fbb5 f1f3 	udiv	r1, r5, r3
 801ac00:	fb03 5711 	mls	r7, r3, r1, r5
 801ac04:	5dc7      	ldrb	r7, [r0, r7]
 801ac06:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ac0a:	462f      	mov	r7, r5
 801ac0c:	42bb      	cmp	r3, r7
 801ac0e:	460d      	mov	r5, r1
 801ac10:	d9f4      	bls.n	801abfc <_printf_i+0x110>
 801ac12:	2b08      	cmp	r3, #8
 801ac14:	d10b      	bne.n	801ac2e <_printf_i+0x142>
 801ac16:	6823      	ldr	r3, [r4, #0]
 801ac18:	07df      	lsls	r7, r3, #31
 801ac1a:	d508      	bpl.n	801ac2e <_printf_i+0x142>
 801ac1c:	6923      	ldr	r3, [r4, #16]
 801ac1e:	6861      	ldr	r1, [r4, #4]
 801ac20:	4299      	cmp	r1, r3
 801ac22:	bfde      	ittt	le
 801ac24:	2330      	movle	r3, #48	@ 0x30
 801ac26:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ac2a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801ac2e:	1b92      	subs	r2, r2, r6
 801ac30:	6122      	str	r2, [r4, #16]
 801ac32:	f8cd a000 	str.w	sl, [sp]
 801ac36:	464b      	mov	r3, r9
 801ac38:	aa03      	add	r2, sp, #12
 801ac3a:	4621      	mov	r1, r4
 801ac3c:	4640      	mov	r0, r8
 801ac3e:	f7ff fee7 	bl	801aa10 <_printf_common>
 801ac42:	3001      	adds	r0, #1
 801ac44:	d14a      	bne.n	801acdc <_printf_i+0x1f0>
 801ac46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ac4a:	b004      	add	sp, #16
 801ac4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac50:	6823      	ldr	r3, [r4, #0]
 801ac52:	f043 0320 	orr.w	r3, r3, #32
 801ac56:	6023      	str	r3, [r4, #0]
 801ac58:	4832      	ldr	r0, [pc, #200]	@ (801ad24 <_printf_i+0x238>)
 801ac5a:	2778      	movs	r7, #120	@ 0x78
 801ac5c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801ac60:	6823      	ldr	r3, [r4, #0]
 801ac62:	6831      	ldr	r1, [r6, #0]
 801ac64:	061f      	lsls	r7, r3, #24
 801ac66:	f851 5b04 	ldr.w	r5, [r1], #4
 801ac6a:	d402      	bmi.n	801ac72 <_printf_i+0x186>
 801ac6c:	065f      	lsls	r7, r3, #25
 801ac6e:	bf48      	it	mi
 801ac70:	b2ad      	uxthmi	r5, r5
 801ac72:	6031      	str	r1, [r6, #0]
 801ac74:	07d9      	lsls	r1, r3, #31
 801ac76:	bf44      	itt	mi
 801ac78:	f043 0320 	orrmi.w	r3, r3, #32
 801ac7c:	6023      	strmi	r3, [r4, #0]
 801ac7e:	b11d      	cbz	r5, 801ac88 <_printf_i+0x19c>
 801ac80:	2310      	movs	r3, #16
 801ac82:	e7ad      	b.n	801abe0 <_printf_i+0xf4>
 801ac84:	4826      	ldr	r0, [pc, #152]	@ (801ad20 <_printf_i+0x234>)
 801ac86:	e7e9      	b.n	801ac5c <_printf_i+0x170>
 801ac88:	6823      	ldr	r3, [r4, #0]
 801ac8a:	f023 0320 	bic.w	r3, r3, #32
 801ac8e:	6023      	str	r3, [r4, #0]
 801ac90:	e7f6      	b.n	801ac80 <_printf_i+0x194>
 801ac92:	4616      	mov	r6, r2
 801ac94:	e7bd      	b.n	801ac12 <_printf_i+0x126>
 801ac96:	6833      	ldr	r3, [r6, #0]
 801ac98:	6825      	ldr	r5, [r4, #0]
 801ac9a:	6961      	ldr	r1, [r4, #20]
 801ac9c:	1d18      	adds	r0, r3, #4
 801ac9e:	6030      	str	r0, [r6, #0]
 801aca0:	062e      	lsls	r6, r5, #24
 801aca2:	681b      	ldr	r3, [r3, #0]
 801aca4:	d501      	bpl.n	801acaa <_printf_i+0x1be>
 801aca6:	6019      	str	r1, [r3, #0]
 801aca8:	e002      	b.n	801acb0 <_printf_i+0x1c4>
 801acaa:	0668      	lsls	r0, r5, #25
 801acac:	d5fb      	bpl.n	801aca6 <_printf_i+0x1ba>
 801acae:	8019      	strh	r1, [r3, #0]
 801acb0:	2300      	movs	r3, #0
 801acb2:	6123      	str	r3, [r4, #16]
 801acb4:	4616      	mov	r6, r2
 801acb6:	e7bc      	b.n	801ac32 <_printf_i+0x146>
 801acb8:	6833      	ldr	r3, [r6, #0]
 801acba:	1d1a      	adds	r2, r3, #4
 801acbc:	6032      	str	r2, [r6, #0]
 801acbe:	681e      	ldr	r6, [r3, #0]
 801acc0:	6862      	ldr	r2, [r4, #4]
 801acc2:	2100      	movs	r1, #0
 801acc4:	4630      	mov	r0, r6
 801acc6:	f7e5 fabb 	bl	8000240 <memchr>
 801acca:	b108      	cbz	r0, 801acd0 <_printf_i+0x1e4>
 801accc:	1b80      	subs	r0, r0, r6
 801acce:	6060      	str	r0, [r4, #4]
 801acd0:	6863      	ldr	r3, [r4, #4]
 801acd2:	6123      	str	r3, [r4, #16]
 801acd4:	2300      	movs	r3, #0
 801acd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801acda:	e7aa      	b.n	801ac32 <_printf_i+0x146>
 801acdc:	6923      	ldr	r3, [r4, #16]
 801acde:	4632      	mov	r2, r6
 801ace0:	4649      	mov	r1, r9
 801ace2:	4640      	mov	r0, r8
 801ace4:	47d0      	blx	sl
 801ace6:	3001      	adds	r0, #1
 801ace8:	d0ad      	beq.n	801ac46 <_printf_i+0x15a>
 801acea:	6823      	ldr	r3, [r4, #0]
 801acec:	079b      	lsls	r3, r3, #30
 801acee:	d413      	bmi.n	801ad18 <_printf_i+0x22c>
 801acf0:	68e0      	ldr	r0, [r4, #12]
 801acf2:	9b03      	ldr	r3, [sp, #12]
 801acf4:	4298      	cmp	r0, r3
 801acf6:	bfb8      	it	lt
 801acf8:	4618      	movlt	r0, r3
 801acfa:	e7a6      	b.n	801ac4a <_printf_i+0x15e>
 801acfc:	2301      	movs	r3, #1
 801acfe:	4632      	mov	r2, r6
 801ad00:	4649      	mov	r1, r9
 801ad02:	4640      	mov	r0, r8
 801ad04:	47d0      	blx	sl
 801ad06:	3001      	adds	r0, #1
 801ad08:	d09d      	beq.n	801ac46 <_printf_i+0x15a>
 801ad0a:	3501      	adds	r5, #1
 801ad0c:	68e3      	ldr	r3, [r4, #12]
 801ad0e:	9903      	ldr	r1, [sp, #12]
 801ad10:	1a5b      	subs	r3, r3, r1
 801ad12:	42ab      	cmp	r3, r5
 801ad14:	dcf2      	bgt.n	801acfc <_printf_i+0x210>
 801ad16:	e7eb      	b.n	801acf0 <_printf_i+0x204>
 801ad18:	2500      	movs	r5, #0
 801ad1a:	f104 0619 	add.w	r6, r4, #25
 801ad1e:	e7f5      	b.n	801ad0c <_printf_i+0x220>
 801ad20:	0801c1d4 	.word	0x0801c1d4
 801ad24:	0801c1e5 	.word	0x0801c1e5

0801ad28 <__sflush_r>:
 801ad28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ad2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad30:	0716      	lsls	r6, r2, #28
 801ad32:	4605      	mov	r5, r0
 801ad34:	460c      	mov	r4, r1
 801ad36:	d454      	bmi.n	801ade2 <__sflush_r+0xba>
 801ad38:	684b      	ldr	r3, [r1, #4]
 801ad3a:	2b00      	cmp	r3, #0
 801ad3c:	dc02      	bgt.n	801ad44 <__sflush_r+0x1c>
 801ad3e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801ad40:	2b00      	cmp	r3, #0
 801ad42:	dd48      	ble.n	801add6 <__sflush_r+0xae>
 801ad44:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ad46:	2e00      	cmp	r6, #0
 801ad48:	d045      	beq.n	801add6 <__sflush_r+0xae>
 801ad4a:	2300      	movs	r3, #0
 801ad4c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801ad50:	682f      	ldr	r7, [r5, #0]
 801ad52:	6a21      	ldr	r1, [r4, #32]
 801ad54:	602b      	str	r3, [r5, #0]
 801ad56:	d030      	beq.n	801adba <__sflush_r+0x92>
 801ad58:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801ad5a:	89a3      	ldrh	r3, [r4, #12]
 801ad5c:	0759      	lsls	r1, r3, #29
 801ad5e:	d505      	bpl.n	801ad6c <__sflush_r+0x44>
 801ad60:	6863      	ldr	r3, [r4, #4]
 801ad62:	1ad2      	subs	r2, r2, r3
 801ad64:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ad66:	b10b      	cbz	r3, 801ad6c <__sflush_r+0x44>
 801ad68:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801ad6a:	1ad2      	subs	r2, r2, r3
 801ad6c:	2300      	movs	r3, #0
 801ad6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ad70:	6a21      	ldr	r1, [r4, #32]
 801ad72:	4628      	mov	r0, r5
 801ad74:	47b0      	blx	r6
 801ad76:	1c43      	adds	r3, r0, #1
 801ad78:	89a3      	ldrh	r3, [r4, #12]
 801ad7a:	d106      	bne.n	801ad8a <__sflush_r+0x62>
 801ad7c:	6829      	ldr	r1, [r5, #0]
 801ad7e:	291d      	cmp	r1, #29
 801ad80:	d82b      	bhi.n	801adda <__sflush_r+0xb2>
 801ad82:	4a2a      	ldr	r2, [pc, #168]	@ (801ae2c <__sflush_r+0x104>)
 801ad84:	40ca      	lsrs	r2, r1
 801ad86:	07d6      	lsls	r6, r2, #31
 801ad88:	d527      	bpl.n	801adda <__sflush_r+0xb2>
 801ad8a:	2200      	movs	r2, #0
 801ad8c:	6062      	str	r2, [r4, #4]
 801ad8e:	04d9      	lsls	r1, r3, #19
 801ad90:	6922      	ldr	r2, [r4, #16]
 801ad92:	6022      	str	r2, [r4, #0]
 801ad94:	d504      	bpl.n	801ada0 <__sflush_r+0x78>
 801ad96:	1c42      	adds	r2, r0, #1
 801ad98:	d101      	bne.n	801ad9e <__sflush_r+0x76>
 801ad9a:	682b      	ldr	r3, [r5, #0]
 801ad9c:	b903      	cbnz	r3, 801ada0 <__sflush_r+0x78>
 801ad9e:	6560      	str	r0, [r4, #84]	@ 0x54
 801ada0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ada2:	602f      	str	r7, [r5, #0]
 801ada4:	b1b9      	cbz	r1, 801add6 <__sflush_r+0xae>
 801ada6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801adaa:	4299      	cmp	r1, r3
 801adac:	d002      	beq.n	801adb4 <__sflush_r+0x8c>
 801adae:	4628      	mov	r0, r5
 801adb0:	f7ff fb42 	bl	801a438 <_free_r>
 801adb4:	2300      	movs	r3, #0
 801adb6:	6363      	str	r3, [r4, #52]	@ 0x34
 801adb8:	e00d      	b.n	801add6 <__sflush_r+0xae>
 801adba:	2301      	movs	r3, #1
 801adbc:	4628      	mov	r0, r5
 801adbe:	47b0      	blx	r6
 801adc0:	4602      	mov	r2, r0
 801adc2:	1c50      	adds	r0, r2, #1
 801adc4:	d1c9      	bne.n	801ad5a <__sflush_r+0x32>
 801adc6:	682b      	ldr	r3, [r5, #0]
 801adc8:	2b00      	cmp	r3, #0
 801adca:	d0c6      	beq.n	801ad5a <__sflush_r+0x32>
 801adcc:	2b1d      	cmp	r3, #29
 801adce:	d001      	beq.n	801add4 <__sflush_r+0xac>
 801add0:	2b16      	cmp	r3, #22
 801add2:	d11e      	bne.n	801ae12 <__sflush_r+0xea>
 801add4:	602f      	str	r7, [r5, #0]
 801add6:	2000      	movs	r0, #0
 801add8:	e022      	b.n	801ae20 <__sflush_r+0xf8>
 801adda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801adde:	b21b      	sxth	r3, r3
 801ade0:	e01b      	b.n	801ae1a <__sflush_r+0xf2>
 801ade2:	690f      	ldr	r7, [r1, #16]
 801ade4:	2f00      	cmp	r7, #0
 801ade6:	d0f6      	beq.n	801add6 <__sflush_r+0xae>
 801ade8:	0793      	lsls	r3, r2, #30
 801adea:	680e      	ldr	r6, [r1, #0]
 801adec:	bf08      	it	eq
 801adee:	694b      	ldreq	r3, [r1, #20]
 801adf0:	600f      	str	r7, [r1, #0]
 801adf2:	bf18      	it	ne
 801adf4:	2300      	movne	r3, #0
 801adf6:	eba6 0807 	sub.w	r8, r6, r7
 801adfa:	608b      	str	r3, [r1, #8]
 801adfc:	f1b8 0f00 	cmp.w	r8, #0
 801ae00:	dde9      	ble.n	801add6 <__sflush_r+0xae>
 801ae02:	6a21      	ldr	r1, [r4, #32]
 801ae04:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801ae06:	4643      	mov	r3, r8
 801ae08:	463a      	mov	r2, r7
 801ae0a:	4628      	mov	r0, r5
 801ae0c:	47b0      	blx	r6
 801ae0e:	2800      	cmp	r0, #0
 801ae10:	dc08      	bgt.n	801ae24 <__sflush_r+0xfc>
 801ae12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ae16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ae1a:	81a3      	strh	r3, [r4, #12]
 801ae1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ae20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae24:	4407      	add	r7, r0
 801ae26:	eba8 0800 	sub.w	r8, r8, r0
 801ae2a:	e7e7      	b.n	801adfc <__sflush_r+0xd4>
 801ae2c:	20400001 	.word	0x20400001

0801ae30 <_fflush_r>:
 801ae30:	b538      	push	{r3, r4, r5, lr}
 801ae32:	690b      	ldr	r3, [r1, #16]
 801ae34:	4605      	mov	r5, r0
 801ae36:	460c      	mov	r4, r1
 801ae38:	b913      	cbnz	r3, 801ae40 <_fflush_r+0x10>
 801ae3a:	2500      	movs	r5, #0
 801ae3c:	4628      	mov	r0, r5
 801ae3e:	bd38      	pop	{r3, r4, r5, pc}
 801ae40:	b118      	cbz	r0, 801ae4a <_fflush_r+0x1a>
 801ae42:	6a03      	ldr	r3, [r0, #32]
 801ae44:	b90b      	cbnz	r3, 801ae4a <_fflush_r+0x1a>
 801ae46:	f7fe ffdf 	bl	8019e08 <__sinit>
 801ae4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ae4e:	2b00      	cmp	r3, #0
 801ae50:	d0f3      	beq.n	801ae3a <_fflush_r+0xa>
 801ae52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801ae54:	07d0      	lsls	r0, r2, #31
 801ae56:	d404      	bmi.n	801ae62 <_fflush_r+0x32>
 801ae58:	0599      	lsls	r1, r3, #22
 801ae5a:	d402      	bmi.n	801ae62 <_fflush_r+0x32>
 801ae5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ae5e:	f7ff faa8 	bl	801a3b2 <__retarget_lock_acquire_recursive>
 801ae62:	4628      	mov	r0, r5
 801ae64:	4621      	mov	r1, r4
 801ae66:	f7ff ff5f 	bl	801ad28 <__sflush_r>
 801ae6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ae6c:	07da      	lsls	r2, r3, #31
 801ae6e:	4605      	mov	r5, r0
 801ae70:	d4e4      	bmi.n	801ae3c <_fflush_r+0xc>
 801ae72:	89a3      	ldrh	r3, [r4, #12]
 801ae74:	059b      	lsls	r3, r3, #22
 801ae76:	d4e1      	bmi.n	801ae3c <_fflush_r+0xc>
 801ae78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ae7a:	f7ff fa9b 	bl	801a3b4 <__retarget_lock_release_recursive>
 801ae7e:	e7dd      	b.n	801ae3c <_fflush_r+0xc>

0801ae80 <fiprintf>:
 801ae80:	b40e      	push	{r1, r2, r3}
 801ae82:	b503      	push	{r0, r1, lr}
 801ae84:	4601      	mov	r1, r0
 801ae86:	ab03      	add	r3, sp, #12
 801ae88:	4805      	ldr	r0, [pc, #20]	@ (801aea0 <fiprintf+0x20>)
 801ae8a:	f853 2b04 	ldr.w	r2, [r3], #4
 801ae8e:	6800      	ldr	r0, [r0, #0]
 801ae90:	9301      	str	r3, [sp, #4]
 801ae92:	f7ff fca5 	bl	801a7e0 <_vfiprintf_r>
 801ae96:	b002      	add	sp, #8
 801ae98:	f85d eb04 	ldr.w	lr, [sp], #4
 801ae9c:	b003      	add	sp, #12
 801ae9e:	4770      	bx	lr
 801aea0:	20000928 	.word	0x20000928

0801aea4 <__swhatbuf_r>:
 801aea4:	b570      	push	{r4, r5, r6, lr}
 801aea6:	460c      	mov	r4, r1
 801aea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aeac:	2900      	cmp	r1, #0
 801aeae:	b096      	sub	sp, #88	@ 0x58
 801aeb0:	4615      	mov	r5, r2
 801aeb2:	461e      	mov	r6, r3
 801aeb4:	da0d      	bge.n	801aed2 <__swhatbuf_r+0x2e>
 801aeb6:	89a3      	ldrh	r3, [r4, #12]
 801aeb8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801aebc:	f04f 0100 	mov.w	r1, #0
 801aec0:	bf14      	ite	ne
 801aec2:	2340      	movne	r3, #64	@ 0x40
 801aec4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801aec8:	2000      	movs	r0, #0
 801aeca:	6031      	str	r1, [r6, #0]
 801aecc:	602b      	str	r3, [r5, #0]
 801aece:	b016      	add	sp, #88	@ 0x58
 801aed0:	bd70      	pop	{r4, r5, r6, pc}
 801aed2:	466a      	mov	r2, sp
 801aed4:	f000 f848 	bl	801af68 <_fstat_r>
 801aed8:	2800      	cmp	r0, #0
 801aeda:	dbec      	blt.n	801aeb6 <__swhatbuf_r+0x12>
 801aedc:	9901      	ldr	r1, [sp, #4]
 801aede:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801aee2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801aee6:	4259      	negs	r1, r3
 801aee8:	4159      	adcs	r1, r3
 801aeea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801aeee:	e7eb      	b.n	801aec8 <__swhatbuf_r+0x24>

0801aef0 <__smakebuf_r>:
 801aef0:	898b      	ldrh	r3, [r1, #12]
 801aef2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801aef4:	079d      	lsls	r5, r3, #30
 801aef6:	4606      	mov	r6, r0
 801aef8:	460c      	mov	r4, r1
 801aefa:	d507      	bpl.n	801af0c <__smakebuf_r+0x1c>
 801aefc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801af00:	6023      	str	r3, [r4, #0]
 801af02:	6123      	str	r3, [r4, #16]
 801af04:	2301      	movs	r3, #1
 801af06:	6163      	str	r3, [r4, #20]
 801af08:	b003      	add	sp, #12
 801af0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801af0c:	ab01      	add	r3, sp, #4
 801af0e:	466a      	mov	r2, sp
 801af10:	f7ff ffc8 	bl	801aea4 <__swhatbuf_r>
 801af14:	9f00      	ldr	r7, [sp, #0]
 801af16:	4605      	mov	r5, r0
 801af18:	4639      	mov	r1, r7
 801af1a:	4630      	mov	r0, r6
 801af1c:	f7fe fd42 	bl	80199a4 <_malloc_r>
 801af20:	b948      	cbnz	r0, 801af36 <__smakebuf_r+0x46>
 801af22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801af26:	059a      	lsls	r2, r3, #22
 801af28:	d4ee      	bmi.n	801af08 <__smakebuf_r+0x18>
 801af2a:	f023 0303 	bic.w	r3, r3, #3
 801af2e:	f043 0302 	orr.w	r3, r3, #2
 801af32:	81a3      	strh	r3, [r4, #12]
 801af34:	e7e2      	b.n	801aefc <__smakebuf_r+0xc>
 801af36:	89a3      	ldrh	r3, [r4, #12]
 801af38:	6020      	str	r0, [r4, #0]
 801af3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801af3e:	81a3      	strh	r3, [r4, #12]
 801af40:	9b01      	ldr	r3, [sp, #4]
 801af42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801af46:	b15b      	cbz	r3, 801af60 <__smakebuf_r+0x70>
 801af48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801af4c:	4630      	mov	r0, r6
 801af4e:	f000 f81d 	bl	801af8c <_isatty_r>
 801af52:	b128      	cbz	r0, 801af60 <__smakebuf_r+0x70>
 801af54:	89a3      	ldrh	r3, [r4, #12]
 801af56:	f023 0303 	bic.w	r3, r3, #3
 801af5a:	f043 0301 	orr.w	r3, r3, #1
 801af5e:	81a3      	strh	r3, [r4, #12]
 801af60:	89a3      	ldrh	r3, [r4, #12]
 801af62:	431d      	orrs	r5, r3
 801af64:	81a5      	strh	r5, [r4, #12]
 801af66:	e7cf      	b.n	801af08 <__smakebuf_r+0x18>

0801af68 <_fstat_r>:
 801af68:	b538      	push	{r3, r4, r5, lr}
 801af6a:	4d07      	ldr	r5, [pc, #28]	@ (801af88 <_fstat_r+0x20>)
 801af6c:	2300      	movs	r3, #0
 801af6e:	4604      	mov	r4, r0
 801af70:	4608      	mov	r0, r1
 801af72:	4611      	mov	r1, r2
 801af74:	602b      	str	r3, [r5, #0]
 801af76:	f7e8 fe55 	bl	8003c24 <_fstat>
 801af7a:	1c43      	adds	r3, r0, #1
 801af7c:	d102      	bne.n	801af84 <_fstat_r+0x1c>
 801af7e:	682b      	ldr	r3, [r5, #0]
 801af80:	b103      	cbz	r3, 801af84 <_fstat_r+0x1c>
 801af82:	6023      	str	r3, [r4, #0]
 801af84:	bd38      	pop	{r3, r4, r5, pc}
 801af86:	bf00      	nop
 801af88:	20011ad0 	.word	0x20011ad0

0801af8c <_isatty_r>:
 801af8c:	b538      	push	{r3, r4, r5, lr}
 801af8e:	4d06      	ldr	r5, [pc, #24]	@ (801afa8 <_isatty_r+0x1c>)
 801af90:	2300      	movs	r3, #0
 801af92:	4604      	mov	r4, r0
 801af94:	4608      	mov	r0, r1
 801af96:	602b      	str	r3, [r5, #0]
 801af98:	f7e8 fe54 	bl	8003c44 <_isatty>
 801af9c:	1c43      	adds	r3, r0, #1
 801af9e:	d102      	bne.n	801afa6 <_isatty_r+0x1a>
 801afa0:	682b      	ldr	r3, [r5, #0]
 801afa2:	b103      	cbz	r3, 801afa6 <_isatty_r+0x1a>
 801afa4:	6023      	str	r3, [r4, #0]
 801afa6:	bd38      	pop	{r3, r4, r5, pc}
 801afa8:	20011ad0 	.word	0x20011ad0

0801afac <abort>:
 801afac:	b508      	push	{r3, lr}
 801afae:	2006      	movs	r0, #6
 801afb0:	f000 f82c 	bl	801b00c <raise>
 801afb4:	2001      	movs	r0, #1
 801afb6:	f7e8 fde5 	bl	8003b84 <_exit>

0801afba <_raise_r>:
 801afba:	291f      	cmp	r1, #31
 801afbc:	b538      	push	{r3, r4, r5, lr}
 801afbe:	4605      	mov	r5, r0
 801afc0:	460c      	mov	r4, r1
 801afc2:	d904      	bls.n	801afce <_raise_r+0x14>
 801afc4:	2316      	movs	r3, #22
 801afc6:	6003      	str	r3, [r0, #0]
 801afc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801afcc:	bd38      	pop	{r3, r4, r5, pc}
 801afce:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801afd0:	b112      	cbz	r2, 801afd8 <_raise_r+0x1e>
 801afd2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801afd6:	b94b      	cbnz	r3, 801afec <_raise_r+0x32>
 801afd8:	4628      	mov	r0, r5
 801afda:	f000 f831 	bl	801b040 <_getpid_r>
 801afde:	4622      	mov	r2, r4
 801afe0:	4601      	mov	r1, r0
 801afe2:	4628      	mov	r0, r5
 801afe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801afe8:	f000 b818 	b.w	801b01c <_kill_r>
 801afec:	2b01      	cmp	r3, #1
 801afee:	d00a      	beq.n	801b006 <_raise_r+0x4c>
 801aff0:	1c59      	adds	r1, r3, #1
 801aff2:	d103      	bne.n	801affc <_raise_r+0x42>
 801aff4:	2316      	movs	r3, #22
 801aff6:	6003      	str	r3, [r0, #0]
 801aff8:	2001      	movs	r0, #1
 801affa:	e7e7      	b.n	801afcc <_raise_r+0x12>
 801affc:	2100      	movs	r1, #0
 801affe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801b002:	4620      	mov	r0, r4
 801b004:	4798      	blx	r3
 801b006:	2000      	movs	r0, #0
 801b008:	e7e0      	b.n	801afcc <_raise_r+0x12>
	...

0801b00c <raise>:
 801b00c:	4b02      	ldr	r3, [pc, #8]	@ (801b018 <raise+0xc>)
 801b00e:	4601      	mov	r1, r0
 801b010:	6818      	ldr	r0, [r3, #0]
 801b012:	f7ff bfd2 	b.w	801afba <_raise_r>
 801b016:	bf00      	nop
 801b018:	20000928 	.word	0x20000928

0801b01c <_kill_r>:
 801b01c:	b538      	push	{r3, r4, r5, lr}
 801b01e:	4d07      	ldr	r5, [pc, #28]	@ (801b03c <_kill_r+0x20>)
 801b020:	2300      	movs	r3, #0
 801b022:	4604      	mov	r4, r0
 801b024:	4608      	mov	r0, r1
 801b026:	4611      	mov	r1, r2
 801b028:	602b      	str	r3, [r5, #0]
 801b02a:	f7e8 fd9b 	bl	8003b64 <_kill>
 801b02e:	1c43      	adds	r3, r0, #1
 801b030:	d102      	bne.n	801b038 <_kill_r+0x1c>
 801b032:	682b      	ldr	r3, [r5, #0]
 801b034:	b103      	cbz	r3, 801b038 <_kill_r+0x1c>
 801b036:	6023      	str	r3, [r4, #0]
 801b038:	bd38      	pop	{r3, r4, r5, pc}
 801b03a:	bf00      	nop
 801b03c:	20011ad0 	.word	0x20011ad0

0801b040 <_getpid_r>:
 801b040:	f7e8 bd88 	b.w	8003b54 <_getpid>

0801b044 <_init>:
 801b044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b046:	bf00      	nop
 801b048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b04a:	bc08      	pop	{r3}
 801b04c:	469e      	mov	lr, r3
 801b04e:	4770      	bx	lr

0801b050 <_fini>:
 801b050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b052:	bf00      	nop
 801b054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b056:	bc08      	pop	{r3}
 801b058:	469e      	mov	lr, r3
 801b05a:	4770      	bx	lr
