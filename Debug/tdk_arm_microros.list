
tdk_arm_microros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a7b8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001298  0801a988  0801a988  0001b988  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bc20  0801bc20  0001d970  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801bc20  0801bc20  0001cc20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bc28  0801bc28  0001d970  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  0801bc28  0801bc28  0001cc28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801bc3c  0801bc3c  0001cc3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000970  20000000  0801bc40  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011258  20000970  0801c5b0  0001d970  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20011bc8  0801c5b0  0001dbc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001d970  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a6c9  00000000  00000000  0001d9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000554e  00000000  00000000  00048069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ba0  00000000  00000000  0004d5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001570  00000000  00000000  0004f158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c5e8  00000000  00000000  000506c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025945  00000000  00000000  0007ccb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eea93  00000000  00000000  000a25f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  00191088  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000082ac  00000000  00000000  00191100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001993ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000970 	.word	0x20000970
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801a970 	.word	0x0801a970

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000974 	.word	0x20000974
 800020c:	0801a970 	.word	0x0801a970

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__aeabi_d2f>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a84:	bf24      	itt	cs
 8000a86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a8e:	d90d      	bls.n	8000aac <__aeabi_d2f+0x30>
 8000a90:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a9c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aa0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa4:	bf08      	it	eq
 8000aa6:	f020 0001 	biceq.w	r0, r0, #1
 8000aaa:	4770      	bx	lr
 8000aac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ab0:	d121      	bne.n	8000af6 <__aeabi_d2f+0x7a>
 8000ab2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ab6:	bfbc      	itt	lt
 8000ab8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000abc:	4770      	bxlt	lr
 8000abe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ac2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac6:	f1c2 0218 	rsb	r2, r2, #24
 8000aca:	f1c2 0c20 	rsb	ip, r2, #32
 8000ace:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	f040 0001 	orrne.w	r0, r0, #1
 8000adc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae8:	ea40 000c 	orr.w	r0, r0, ip
 8000aec:	fa23 f302 	lsr.w	r3, r3, r2
 8000af0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af4:	e7cc      	b.n	8000a90 <__aeabi_d2f+0x14>
 8000af6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afa:	d107      	bne.n	8000b0c <__aeabi_d2f+0x90>
 8000afc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b00:	bf1e      	ittt	ne
 8000b02:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b06:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b0a:	4770      	bxne	lr
 8000b0c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_ldivmod>:
 8000b1c:	b97b      	cbnz	r3, 8000b3e <__aeabi_ldivmod+0x22>
 8000b1e:	b972      	cbnz	r2, 8000b3e <__aeabi_ldivmod+0x22>
 8000b20:	2900      	cmp	r1, #0
 8000b22:	bfbe      	ittt	lt
 8000b24:	2000      	movlt	r0, #0
 8000b26:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000b2a:	e006      	blt.n	8000b3a <__aeabi_ldivmod+0x1e>
 8000b2c:	bf08      	it	eq
 8000b2e:	2800      	cmpeq	r0, #0
 8000b30:	bf1c      	itt	ne
 8000b32:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000b36:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b3a:	f000 b9d3 	b.w	8000ee4 <__aeabi_idiv0>
 8000b3e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b42:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b46:	2900      	cmp	r1, #0
 8000b48:	db09      	blt.n	8000b5e <__aeabi_ldivmod+0x42>
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	db1a      	blt.n	8000b84 <__aeabi_ldivmod+0x68>
 8000b4e:	f000 f84d 	bl	8000bec <__udivmoddi4>
 8000b52:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b5a:	b004      	add	sp, #16
 8000b5c:	4770      	bx	lr
 8000b5e:	4240      	negs	r0, r0
 8000b60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	db1b      	blt.n	8000ba0 <__aeabi_ldivmod+0x84>
 8000b68:	f000 f840 	bl	8000bec <__udivmoddi4>
 8000b6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b74:	b004      	add	sp, #16
 8000b76:	4240      	negs	r0, r0
 8000b78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b7c:	4252      	negs	r2, r2
 8000b7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b82:	4770      	bx	lr
 8000b84:	4252      	negs	r2, r2
 8000b86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b8a:	f000 f82f 	bl	8000bec <__udivmoddi4>
 8000b8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b96:	b004      	add	sp, #16
 8000b98:	4240      	negs	r0, r0
 8000b9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b9e:	4770      	bx	lr
 8000ba0:	4252      	negs	r2, r2
 8000ba2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ba6:	f000 f821 	bl	8000bec <__udivmoddi4>
 8000baa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb2:	b004      	add	sp, #16
 8000bb4:	4252      	negs	r2, r2
 8000bb6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bd0:	f000 b988 	b.w	8000ee4 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9d08      	ldr	r5, [sp, #32]
 8000bf2:	468e      	mov	lr, r1
 8000bf4:	4604      	mov	r4, r0
 8000bf6:	4688      	mov	r8, r1
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d14a      	bne.n	8000c92 <__udivmoddi4+0xa6>
 8000bfc:	428a      	cmp	r2, r1
 8000bfe:	4617      	mov	r7, r2
 8000c00:	d962      	bls.n	8000cc8 <__udivmoddi4+0xdc>
 8000c02:	fab2 f682 	clz	r6, r2
 8000c06:	b14e      	cbz	r6, 8000c1c <__udivmoddi4+0x30>
 8000c08:	f1c6 0320 	rsb	r3, r6, #32
 8000c0c:	fa01 f806 	lsl.w	r8, r1, r6
 8000c10:	fa20 f303 	lsr.w	r3, r0, r3
 8000c14:	40b7      	lsls	r7, r6
 8000c16:	ea43 0808 	orr.w	r8, r3, r8
 8000c1a:	40b4      	lsls	r4, r6
 8000c1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c20:	fa1f fc87 	uxth.w	ip, r7
 8000c24:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c28:	0c23      	lsrs	r3, r4, #16
 8000c2a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c32:	fb01 f20c 	mul.w	r2, r1, ip
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d909      	bls.n	8000c4e <__udivmoddi4+0x62>
 8000c3a:	18fb      	adds	r3, r7, r3
 8000c3c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c40:	f080 80ea 	bcs.w	8000e18 <__udivmoddi4+0x22c>
 8000c44:	429a      	cmp	r2, r3
 8000c46:	f240 80e7 	bls.w	8000e18 <__udivmoddi4+0x22c>
 8000c4a:	3902      	subs	r1, #2
 8000c4c:	443b      	add	r3, r7
 8000c4e:	1a9a      	subs	r2, r3, r2
 8000c50:	b2a3      	uxth	r3, r4
 8000c52:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c56:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c62:	459c      	cmp	ip, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x8e>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c6c:	f080 80d6 	bcs.w	8000e1c <__udivmoddi4+0x230>
 8000c70:	459c      	cmp	ip, r3
 8000c72:	f240 80d3 	bls.w	8000e1c <__udivmoddi4+0x230>
 8000c76:	443b      	add	r3, r7
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7e:	eba3 030c 	sub.w	r3, r3, ip
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa2>
 8000c86:	40f3      	lsrs	r3, r6
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xb6>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb0>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x14c>
 8000caa:	4573      	cmp	r3, lr
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xc8>
 8000cae:	4282      	cmp	r2, r0
 8000cb0:	f200 8105 	bhi.w	8000ebe <__udivmoddi4+0x2d2>
 8000cb4:	1a84      	subs	r4, r0, r2
 8000cb6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	4690      	mov	r8, r2
 8000cbe:	2d00      	cmp	r5, #0
 8000cc0:	d0e5      	beq.n	8000c8e <__udivmoddi4+0xa2>
 8000cc2:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc6:	e7e2      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f000 8090 	beq.w	8000dee <__udivmoddi4+0x202>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f040 80a4 	bne.w	8000e20 <__udivmoddi4+0x234>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	0c03      	lsrs	r3, r0, #16
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	b280      	uxth	r0, r0
 8000ce2:	b2bc      	uxth	r4, r7
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cea:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cf2:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d907      	bls.n	8000d0a <__udivmoddi4+0x11e>
 8000cfa:	18fb      	adds	r3, r7, r3
 8000cfc:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d00:	d202      	bcs.n	8000d08 <__udivmoddi4+0x11c>
 8000d02:	429a      	cmp	r2, r3
 8000d04:	f200 80e0 	bhi.w	8000ec8 <__udivmoddi4+0x2dc>
 8000d08:	46c4      	mov	ip, r8
 8000d0a:	1a9b      	subs	r3, r3, r2
 8000d0c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d10:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d14:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d18:	fb02 f404 	mul.w	r4, r2, r4
 8000d1c:	429c      	cmp	r4, r3
 8000d1e:	d907      	bls.n	8000d30 <__udivmoddi4+0x144>
 8000d20:	18fb      	adds	r3, r7, r3
 8000d22:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x142>
 8000d28:	429c      	cmp	r4, r3
 8000d2a:	f200 80ca 	bhi.w	8000ec2 <__udivmoddi4+0x2d6>
 8000d2e:	4602      	mov	r2, r0
 8000d30:	1b1b      	subs	r3, r3, r4
 8000d32:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x98>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa0e f401 	lsl.w	r4, lr, r1
 8000d48:	fa20 f306 	lsr.w	r3, r0, r6
 8000d4c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d50:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d54:	4323      	orrs	r3, r4
 8000d56:	fa00 f801 	lsl.w	r8, r0, r1
 8000d5a:	fa1f fc87 	uxth.w	ip, r7
 8000d5e:	fbbe f0f9 	udiv	r0, lr, r9
 8000d62:	0c1c      	lsrs	r4, r3, #16
 8000d64:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d68:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d6c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d70:	45a6      	cmp	lr, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d909      	bls.n	8000d8c <__udivmoddi4+0x1a0>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d7e:	f080 809c 	bcs.w	8000eba <__udivmoddi4+0x2ce>
 8000d82:	45a6      	cmp	lr, r4
 8000d84:	f240 8099 	bls.w	8000eba <__udivmoddi4+0x2ce>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	443c      	add	r4, r7
 8000d8c:	eba4 040e 	sub.w	r4, r4, lr
 8000d90:	fa1f fe83 	uxth.w	lr, r3
 8000d94:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d98:	fb09 4413 	mls	r4, r9, r3, r4
 8000d9c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000da0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da4:	45a4      	cmp	ip, r4
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1ce>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000dae:	f080 8082 	bcs.w	8000eb6 <__udivmoddi4+0x2ca>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d97f      	bls.n	8000eb6 <__udivmoddi4+0x2ca>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dbe:	eba4 040c 	sub.w	r4, r4, ip
 8000dc2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc6:	4564      	cmp	r4, ip
 8000dc8:	4673      	mov	r3, lr
 8000dca:	46e1      	mov	r9, ip
 8000dcc:	d362      	bcc.n	8000e94 <__udivmoddi4+0x2a8>
 8000dce:	d05f      	beq.n	8000e90 <__udivmoddi4+0x2a4>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x1fe>
 8000dd2:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd6:	eb64 0409 	sbc.w	r4, r4, r9
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	fa22 f301 	lsr.w	r3, r2, r1
 8000de2:	431e      	orrs	r6, r3
 8000de4:	40cc      	lsrs	r4, r1
 8000de6:	e9c5 6400 	strd	r6, r4, [r5]
 8000dea:	2100      	movs	r1, #0
 8000dec:	e74f      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000dee:	fbb1 fcf2 	udiv	ip, r1, r2
 8000df2:	0c01      	lsrs	r1, r0, #16
 8000df4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df8:	b280      	uxth	r0, r0
 8000dfa:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfe:	463b      	mov	r3, r7
 8000e00:	4638      	mov	r0, r7
 8000e02:	463c      	mov	r4, r7
 8000e04:	46b8      	mov	r8, r7
 8000e06:	46be      	mov	lr, r7
 8000e08:	2620      	movs	r6, #32
 8000e0a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0e:	eba2 0208 	sub.w	r2, r2, r8
 8000e12:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e16:	e766      	b.n	8000ce6 <__udivmoddi4+0xfa>
 8000e18:	4601      	mov	r1, r0
 8000e1a:	e718      	b.n	8000c4e <__udivmoddi4+0x62>
 8000e1c:	4610      	mov	r0, r2
 8000e1e:	e72c      	b.n	8000c7a <__udivmoddi4+0x8e>
 8000e20:	f1c6 0220 	rsb	r2, r6, #32
 8000e24:	fa2e f302 	lsr.w	r3, lr, r2
 8000e28:	40b7      	lsls	r7, r6
 8000e2a:	40b1      	lsls	r1, r6
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e34:	430a      	orrs	r2, r1
 8000e36:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e40:	0c11      	lsrs	r1, r2, #16
 8000e42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e46:	fb08 f904 	mul.w	r9, r8, r4
 8000e4a:	40b0      	lsls	r0, r6
 8000e4c:	4589      	cmp	r9, r1
 8000e4e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e52:	b280      	uxth	r0, r0
 8000e54:	d93e      	bls.n	8000ed4 <__udivmoddi4+0x2e8>
 8000e56:	1879      	adds	r1, r7, r1
 8000e58:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e5c:	d201      	bcs.n	8000e62 <__udivmoddi4+0x276>
 8000e5e:	4589      	cmp	r9, r1
 8000e60:	d81f      	bhi.n	8000ea2 <__udivmoddi4+0x2b6>
 8000e62:	eba1 0109 	sub.w	r1, r1, r9
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fb09 f804 	mul.w	r8, r9, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	b292      	uxth	r2, r2
 8000e74:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e78:	4542      	cmp	r2, r8
 8000e7a:	d229      	bcs.n	8000ed0 <__udivmoddi4+0x2e4>
 8000e7c:	18ba      	adds	r2, r7, r2
 8000e7e:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e82:	d2c4      	bcs.n	8000e0e <__udivmoddi4+0x222>
 8000e84:	4542      	cmp	r2, r8
 8000e86:	d2c2      	bcs.n	8000e0e <__udivmoddi4+0x222>
 8000e88:	f1a9 0102 	sub.w	r1, r9, #2
 8000e8c:	443a      	add	r2, r7
 8000e8e:	e7be      	b.n	8000e0e <__udivmoddi4+0x222>
 8000e90:	45f0      	cmp	r8, lr
 8000e92:	d29d      	bcs.n	8000dd0 <__udivmoddi4+0x1e4>
 8000e94:	ebbe 0302 	subs.w	r3, lr, r2
 8000e98:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e9c:	3801      	subs	r0, #1
 8000e9e:	46e1      	mov	r9, ip
 8000ea0:	e796      	b.n	8000dd0 <__udivmoddi4+0x1e4>
 8000ea2:	eba7 0909 	sub.w	r9, r7, r9
 8000ea6:	4449      	add	r1, r9
 8000ea8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000eac:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eb0:	fb09 f804 	mul.w	r8, r9, r4
 8000eb4:	e7db      	b.n	8000e6e <__udivmoddi4+0x282>
 8000eb6:	4673      	mov	r3, lr
 8000eb8:	e77f      	b.n	8000dba <__udivmoddi4+0x1ce>
 8000eba:	4650      	mov	r0, sl
 8000ebc:	e766      	b.n	8000d8c <__udivmoddi4+0x1a0>
 8000ebe:	4608      	mov	r0, r1
 8000ec0:	e6fd      	b.n	8000cbe <__udivmoddi4+0xd2>
 8000ec2:	443b      	add	r3, r7
 8000ec4:	3a02      	subs	r2, #2
 8000ec6:	e733      	b.n	8000d30 <__udivmoddi4+0x144>
 8000ec8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ecc:	443b      	add	r3, r7
 8000ece:	e71c      	b.n	8000d0a <__udivmoddi4+0x11e>
 8000ed0:	4649      	mov	r1, r9
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x222>
 8000ed4:	eba1 0109 	sub.w	r1, r1, r9
 8000ed8:	46c4      	mov	ip, r8
 8000eda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ede:	fb09 f804 	mul.w	r8, r9, r4
 8000ee2:	e7c4      	b.n	8000e6e <__udivmoddi4+0x282>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <_ZN10UART_servo9UART_SendEh>:
//servo control variale
//declare struct
//servo control function
//servo control variale
//servo control function
void UART_servo::UART_Send(uint8_t u8_data) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	70fb      	strb	r3, [r7, #3]
	uint8_t *u8_pointer = &u8_data;
 8000ef4:	1cfb      	adds	r3, r7, #3
 8000ef6:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart3, u8_pointer, 1, 100);
 8000ef8:	2364      	movs	r3, #100	@ 0x64
 8000efa:	2201      	movs	r2, #1
 8000efc:	68f9      	ldr	r1, [r7, #12]
 8000efe:	4807      	ldr	r0, [pc, #28]	@ (8000f1c <_ZN10UART_servo9UART_SendEh+0x34>)
 8000f00:	f005 fad0 	bl	80064a4 <HAL_UART_Transmit>
	Checksum_Calc += u8_data;
 8000f04:	78fb      	ldrb	r3, [r7, #3]
 8000f06:	461a      	mov	r2, r3
 8000f08:	4b05      	ldr	r3, [pc, #20]	@ (8000f20 <_ZN10UART_servo9UART_SendEh+0x38>)
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	4b03      	ldr	r3, [pc, #12]	@ (8000f20 <_ZN10UART_servo9UART_SendEh+0x38>)
 8000f12:	801a      	strh	r2, [r3, #0]
}
 8000f14:	bf00      	nop
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	2000542c 	.word	0x2000542c
 8000f20:	2000098c 	.word	0x2000098c

08000f24 <_ZN10UART_servo26UART_Send_SetMotorPositionEttt>:
void UART_servo::UART_Send_SetMotorPosition(uint16_t motorId, uint16_t Position, uint16_t Time) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	4611      	mov	r1, r2
 8000f30:	461a      	mov	r2, r3
 8000f32:	4603      	mov	r3, r0
 8000f34:	817b      	strh	r3, [r7, #10]
 8000f36:	460b      	mov	r3, r1
 8000f38:	813b      	strh	r3, [r7, #8]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	80fb      	strh	r3, [r7, #6]
	Checksum_Calc = 0;
 8000f3e:	4b20      	ldr	r3, [pc, #128]	@ (8000fc0 <_ZN10UART_servo26UART_Send_SetMotorPositionEttt+0x9c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	801a      	strh	r2, [r3, #0]
	UART_Send(0x80 + motorId);    //header mark & broadcast ID
 8000f44:	897b      	ldrh	r3, [r7, #10]
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	3b80      	subs	r3, #128	@ 0x80
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	68f8      	ldr	r0, [r7, #12]
 8000f50:	f7ff ffca 	bl	8000ee8 <_ZN10UART_servo9UART_SendEh>
	UART_Send(0x83);              //header mark & command code
 8000f54:	2183      	movs	r1, #131	@ 0x83
 8000f56:	68f8      	ldr	r0, [r7, #12]
 8000f58:	f7ff ffc6 	bl	8000ee8 <_ZN10UART_servo9UART_SendEh>
	UART_Send(0x05);              //total data length
 8000f5c:	2105      	movs	r1, #5
 8000f5e:	68f8      	ldr	r0, [r7, #12]
 8000f60:	f7ff ffc2 	bl	8000ee8 <_ZN10UART_servo9UART_SendEh>
	UART_Send((Position / 256) & 0x7F);  //Servo Pos_H
 8000f64:	893b      	ldrh	r3, [r7, #8]
 8000f66:	0a1b      	lsrs	r3, r3, #8
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	4619      	mov	r1, r3
 8000f74:	68f8      	ldr	r0, [r7, #12]
 8000f76:	f7ff ffb7 	bl	8000ee8 <_ZN10UART_servo9UART_SendEh>
	UART_Send(Position % 256);           //Servo Pos_L
 8000f7a:	893b      	ldrh	r3, [r7, #8]
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	4619      	mov	r1, r3
 8000f80:	68f8      	ldr	r0, [r7, #12]
 8000f82:	f7ff ffb1 	bl	8000ee8 <_ZN10UART_servo9UART_SendEh>
	UART_Send((Time / 256) & 0x7F); //Servo Time_H
 8000f86:	88fb      	ldrh	r3, [r7, #6]
 8000f88:	0a1b      	lsrs	r3, r3, #8
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	4619      	mov	r1, r3
 8000f96:	68f8      	ldr	r0, [r7, #12]
 8000f98:	f7ff ffa6 	bl	8000ee8 <_ZN10UART_servo9UART_SendEh>
	UART_Send(Time % 256);          //Servo Time_L
 8000f9c:	88fb      	ldrh	r3, [r7, #6]
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	68f8      	ldr	r0, [r7, #12]
 8000fa4:	f7ff ffa0 	bl	8000ee8 <_ZN10UART_servo9UART_SendEh>
	UART_Send(Checksum_Calc);     //data length (one servo with time and speed)
 8000fa8:	4b05      	ldr	r3, [pc, #20]	@ (8000fc0 <_ZN10UART_servo26UART_Send_SetMotorPositionEttt+0x9c>)
 8000faa:	881b      	ldrh	r3, [r3, #0]
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	4619      	mov	r1, r3
 8000fb0:	68f8      	ldr	r0, [r7, #12]
 8000fb2:	f7ff ff99 	bl	8000ee8 <_ZN10UART_servo9UART_SendEh>
}
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	2000098c 	.word	0x2000098c

08000fc4 <_ZN10UART_servo3runEv>:
void UART_servo::run(){//put in timer IT
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	UART_Send_SetMotorPosition(motorId,(uint16_t)(800+7*pos),reflectime);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	8819      	ldrh	r1, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	00d2      	lsls	r2, r2, #3
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 8000fe2:	b29a      	uxth	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	891b      	ldrh	r3, [r3, #8]
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff ff9b 	bl	8000f24 <_ZN10UART_servo26UART_Send_SetMotorPositionEttt>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <_ZN10UART_servo10update_posEi>:
void UART_servo::update_pos(int _pos){
 8000ff6:	b480      	push	{r7}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
 8000ffe:	6039      	str	r1, [r7, #0]
	pos = _pos;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	683a      	ldr	r2, [r7, #0]
 8001004:	605a      	str	r2, [r3, #4]
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <_ZN10UART_servoC1EttP20__UART_HandleTypeDef>:
public:
	void UART_Send(uint8_t u8_data);
	void UART_Send_SetMotorPosition(uint16_t motorId, uint16_t Position, uint16_t Time);
	void update_pos(int pos);
	void run();
    UART_servo(uint16_t id, uint16_t _reflect_time, UART_HandleTypeDef* _servo_uart)
 8001012:	b480      	push	{r7}
 8001014:	b085      	sub	sp, #20
 8001016:	af00      	add	r7, sp, #0
 8001018:	60f8      	str	r0, [r7, #12]
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	460b      	mov	r3, r1
 800101e:	817b      	strh	r3, [r7, #10]
 8001020:	4613      	mov	r3, r2
 8001022:	813b      	strh	r3, [r7, #8]
        : motorId(id), reflectime(_reflect_time), servo_uart(_servo_uart) {
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	897a      	ldrh	r2, [r7, #10]
 8001028:	801a      	strh	r2, [r3, #0]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	893a      	ldrh	r2, [r7, #8]
 800102e:	811a      	strh	r2, [r3, #8]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	60da      	str	r2, [r3, #12]
        // 初始化其他成員變數
        Position = 0;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	2200      	movs	r2, #0
 800103a:	805a      	strh	r2, [r3, #2]
        pos = 0;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2200      	movs	r2, #0
 8001040:	605a      	str	r2, [r3, #4]
    }
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	4618      	mov	r0, r3
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftddd>:
#include "math.h"
#include "motor_config.h"

class MotorController{
public:
    MotorController(TIM_HandleTypeDef* enc, TIM_HandleTypeDef* pwm, uint32_t channel, GPIO_TypeDef* BGPIO, uint16_t BPin, double kp, double ki, double kd):
 8001050:	b580      	push	{r7, lr}
 8001052:	b08a      	sub	sp, #40	@ 0x28
 8001054:	af00      	add	r7, sp, #0
 8001056:	6278      	str	r0, [r7, #36]	@ 0x24
 8001058:	6239      	str	r1, [r7, #32]
 800105a:	61fa      	str	r2, [r7, #28]
 800105c:	61bb      	str	r3, [r7, #24]
 800105e:	ed87 0b04 	vstr	d0, [r7, #16]
 8001062:	ed87 1b02 	vstr	d1, [r7, #8]
 8001066:	ed87 2b00 	vstr	d2, [r7]
        _enc(enc), _pwm(pwm), _channel(channel), _BGPIO(BGPIO), _BPin(BPin), _kp(kp), _ki(ki), _kd(kd){}
 800106a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800106c:	6a3a      	ldr	r2, [r7, #32]
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001072:	69fa      	ldr	r2, [r7, #28]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800107e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001080:	615a      	str	r2, [r3, #20]
 8001082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001084:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001086:	831a      	strh	r2, [r3, #24]
 8001088:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800108c:	f7ff fcf6 	bl	8000a7c <__aeabi_d2f>
 8001090:	4602      	mov	r2, r0
 8001092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001094:	61da      	str	r2, [r3, #28]
 8001096:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800109a:	f7ff fcef 	bl	8000a7c <__aeabi_d2f>
 800109e:	4602      	mov	r2, r0
 80010a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a2:	621a      	str	r2, [r3, #32]
 80010a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010a8:	f7ff fce8 	bl	8000a7c <__aeabi_d2f>
 80010ac:	4602      	mov	r2, r0
 80010ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b0:	625a      	str	r2, [r3, #36]	@ 0x24
 80010b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 80010ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 80010c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c4:	2200      	movs	r2, #0
 80010c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80010c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ca:	2200      	movs	r2, #0
 80010cc:	859a      	strh	r2, [r3, #44]	@ 0x2c
 80010ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d0:	2200      	movs	r2, #0
 80010d2:	85da      	strh	r2, [r3, #46]	@ 0x2e
 80010d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d6:	f04f 0200 	mov.w	r2, #0
 80010da:	631a      	str	r2, [r3, #48]	@ 0x30
 80010dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010de:	f04f 0200 	mov.w	r2, #0
 80010e2:	635a      	str	r2, [r3, #52]	@ 0x34
 80010e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	639a      	str	r2, [r3, #56]	@ 0x38
 80010ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ee:	f04f 0200 	mov.w	r2, #0
 80010f2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80010f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	641a      	str	r2, [r3, #64]	@ 0x40
 80010fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	645a      	str	r2, [r3, #68]	@ 0x44
 8001104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001106:	f04f 0200 	mov.w	r2, #0
 800110a:	649a      	str	r2, [r3, #72]	@ 0x48
 800110c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800110e:	4a15      	ldr	r2, [pc, #84]	@ (8001164 <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftddd+0x114>)
 8001110:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001114:	2200      	movs	r2, #0
 8001116:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
 800111a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800111c:	2200      	movs	r2, #0
 800111e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001122:	2200      	movs	r2, #0
 8001124:	659a      	str	r2, [r3, #88]	@ 0x58
 8001126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001128:	2200      	movs	r2, #0
 800112a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800112c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112e:	4a0e      	ldr	r2, [pc, #56]	@ (8001168 <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftddd+0x118>)
 8001130:	661a      	str	r2, [r3, #96]	@ 0x60
 8001132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001134:	2200      	movs	r2, #0
 8001136:	665a      	str	r2, [r3, #100]	@ 0x64
 8001138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800113a:	2200      	movs	r2, #0
 800113c:	669a      	str	r2, [r3, #104]	@ 0x68
 800113e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001140:	4a09      	ldr	r2, [pc, #36]	@ (8001168 <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftddd+0x118>)
 8001142:	66da      	str	r2, [r3, #108]	@ 0x6c
 8001144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	675a      	str	r2, [r3, #116]	@ 0x74
 800114c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800114e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001152:	679a      	str	r2, [r3, #120]	@ 0x78
 8001154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001156:	2232      	movs	r2, #50	@ 0x32
 8001158:	67da      	str	r2, [r3, #124]	@ 0x7c
 800115a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800115c:	4618      	mov	r0, r3
 800115e:	3728      	adds	r7, #40	@ 0x28
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	42c80000 	.word	0x42c80000
 8001168:	437a0000 	.word	0x437a0000

0800116c <arm_init>:
#define CASCADE_STARTHIGHT 250.0f
float cascade_height = CASCADE_STARTHIGHT; //cascade起始高度
MotorController Motor_cas(&htim1, &htim12, TIM_CHANNEL_2, GPIOB, GPIO_PIN_12, 0.6, 30, 0);


void arm_init(void) {
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
	// 手臂初始化邏輯
	HAL_Init();
 8001170:	f002 f9f8 	bl	8003564 <HAL_Init>
	// 啟動 Encoder 與 PWM
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001174:	213c      	movs	r1, #60	@ 0x3c
 8001176:	4820      	ldr	r0, [pc, #128]	@ (80011f8 <arm_init+0x8c>)
 8001178:	f004 fa6e 	bl	8005658 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 800117c:	2108      	movs	r1, #8
 800117e:	481f      	ldr	r0, [pc, #124]	@ (80011fc <arm_init+0x90>)
 8001180:	f004 f8fc 	bl	800537c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8001184:	2104      	movs	r1, #4
 8001186:	481e      	ldr	r0, [pc, #120]	@ (8001200 <arm_init+0x94>)
 8001188:	f004 f8f8 	bl	800537c <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800118c:	2201      	movs	r2, #1
 800118e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001192:	481c      	ldr	r0, [pc, #112]	@ (8001204 <arm_init+0x98>)
 8001194:	f003 f8a0 	bl	80042d8 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001198:	2100      	movs	r1, #0
 800119a:	4818      	ldr	r0, [pc, #96]	@ (80011fc <arm_init+0x90>)
 800119c:	f004 f8ee 	bl	800537c <HAL_TIM_PWM_Start>

	servo1.update_pos(pos1+70);
 80011a0:	4b19      	ldr	r3, [pc, #100]	@ (8001208 <arm_init+0x9c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	3346      	adds	r3, #70	@ 0x46
 80011a6:	4619      	mov	r1, r3
 80011a8:	4818      	ldr	r0, [pc, #96]	@ (800120c <arm_init+0xa0>)
 80011aa:	f7ff ff24 	bl	8000ff6 <_ZN10UART_servo10update_posEi>
	servo2.update_pos(pos2+100);
 80011ae:	4b18      	ldr	r3, [pc, #96]	@ (8001210 <arm_init+0xa4>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	3364      	adds	r3, #100	@ 0x64
 80011b4:	4619      	mov	r1, r3
 80011b6:	4817      	ldr	r0, [pc, #92]	@ (8001214 <arm_init+0xa8>)
 80011b8:	f7ff ff1d 	bl	8000ff6 <_ZN10UART_servo10update_posEi>
	servo3.update_pos(gripper_close);
 80011bc:	4b16      	ldr	r3, [pc, #88]	@ (8001218 <arm_init+0xac>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4619      	mov	r1, r3
 80011c2:	4816      	ldr	r0, [pc, #88]	@ (800121c <arm_init+0xb0>)
 80011c4:	f7ff ff17 	bl	8000ff6 <_ZN10UART_servo10update_posEi>

	servo1.run();
 80011c8:	4810      	ldr	r0, [pc, #64]	@ (800120c <arm_init+0xa0>)
 80011ca:	f7ff fefb 	bl	8000fc4 <_ZN10UART_servo3runEv>
	servo2.run();
 80011ce:	4811      	ldr	r0, [pc, #68]	@ (8001214 <arm_init+0xa8>)
 80011d0:	f7ff fef8 	bl	8000fc4 <_ZN10UART_servo3runEv>
	servo3.run();
 80011d4:	4811      	ldr	r0, [pc, #68]	@ (800121c <arm_init+0xb0>)
 80011d6:	f7ff fef5 	bl	8000fc4 <_ZN10UART_servo3runEv>

	// 初始化 Cascade
	Motor_cas.init(-1,-1);
 80011da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80011de:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80011e2:	480f      	ldr	r0, [pc, #60]	@ (8001220 <arm_init+0xb4>)
 80011e4:	f000 f89d 	bl	8001322 <_ZN15MotorController4initEii>
	Motor_cas.setSpeed(0.0);
 80011e8:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 8001224 <arm_init+0xb8>
 80011ec:	480c      	ldr	r0, [pc, #48]	@ (8001220 <arm_init+0xb4>)
 80011ee:	f000 f8b7 	bl	8001360 <_ZN15MotorController8setSpeedEf>
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200052c4 	.word	0x200052c4
 80011fc:	20005354 	.word	0x20005354
 8001200:	2000539c 	.word	0x2000539c
 8001204:	40020400 	.word	0x40020400
 8001208:	20000000 	.word	0x20000000
 800120c:	20000990 	.word	0x20000990
 8001210:	20000004 	.word	0x20000004
 8001214:	200009a0 	.word	0x200009a0
 8001218:	20000008 	.word	0x20000008
 800121c:	200009b0 	.word	0x200009b0
 8001220:	200009c0 	.word	0x200009c0
 8001224:	00000000 	.word	0x00000000

08001228 <arm_timer_callback>:


void arm_timer_callback(void) {		// constantly run the servo in timer callback
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	Motor_cas.setgoal(cascade_height);
 800122c:	4b09      	ldr	r3, [pc, #36]	@ (8001254 <arm_timer_callback+0x2c>)
 800122e:	edd3 7a00 	vldr	s15, [r3]
 8001232:	eeb0 0a67 	vmov.f32	s0, s15
 8001236:	4808      	ldr	r0, [pc, #32]	@ (8001258 <arm_timer_callback+0x30>)
 8001238:	f000 fa68 	bl	800170c <_ZN15MotorController7setgoalEf>
	servo1.run();
 800123c:	4807      	ldr	r0, [pc, #28]	@ (800125c <arm_timer_callback+0x34>)
 800123e:	f7ff fec1 	bl	8000fc4 <_ZN10UART_servo3runEv>
	servo2.run();
 8001242:	4807      	ldr	r0, [pc, #28]	@ (8001260 <arm_timer_callback+0x38>)
 8001244:	f7ff febe 	bl	8000fc4 <_ZN10UART_servo3runEv>
	servo3.run();
 8001248:	4806      	ldr	r0, [pc, #24]	@ (8001264 <arm_timer_callback+0x3c>)
 800124a:	f7ff febb 	bl	8000fc4 <_ZN10UART_servo3runEv>
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	2000000c 	.word	0x2000000c
 8001258:	200009c0 	.word	0x200009c0
 800125c:	20000990 	.word	0x20000990
 8001260:	200009a0 	.word	0x200009a0
 8001264:	200009b0 	.word	0x200009b0

08001268 <_Z41__static_initialization_and_destruction_0v>:
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af02      	add	r7, sp, #8
UART_servo servo1(1, 2000, &huart3);
 800126e:	4b1a      	ldr	r3, [pc, #104]	@ (80012d8 <_Z41__static_initialization_and_destruction_0v+0x70>)
 8001270:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001274:	2101      	movs	r1, #1
 8001276:	4819      	ldr	r0, [pc, #100]	@ (80012dc <_Z41__static_initialization_and_destruction_0v+0x74>)
 8001278:	f7ff fecb 	bl	8001012 <_ZN10UART_servoC1EttP20__UART_HandleTypeDef>
UART_servo servo2(3, 2000, &huart3);
 800127c:	4b16      	ldr	r3, [pc, #88]	@ (80012d8 <_Z41__static_initialization_and_destruction_0v+0x70>)
 800127e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001282:	2103      	movs	r1, #3
 8001284:	4816      	ldr	r0, [pc, #88]	@ (80012e0 <_Z41__static_initialization_and_destruction_0v+0x78>)
 8001286:	f7ff fec4 	bl	8001012 <_ZN10UART_servoC1EttP20__UART_HandleTypeDef>
UART_servo servo3(4, 2000, &huart3);
 800128a:	4b13      	ldr	r3, [pc, #76]	@ (80012d8 <_Z41__static_initialization_and_destruction_0v+0x70>)
 800128c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001290:	2104      	movs	r1, #4
 8001292:	4814      	ldr	r0, [pc, #80]	@ (80012e4 <_Z41__static_initialization_and_destruction_0v+0x7c>)
 8001294:	f7ff febd 	bl	8001012 <_ZN10UART_servoC1EttP20__UART_HandleTypeDef>
MotorController Motor_cas(&htim1, &htim12, TIM_CHANNEL_2, GPIOB, GPIO_PIN_12, 0.6, 30, 0);
 8001298:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800129c:	9301      	str	r3, [sp, #4]
 800129e:	4b12      	ldr	r3, [pc, #72]	@ (80012e8 <_Z41__static_initialization_and_destruction_0v+0x80>)
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	ed9f 2b07 	vldr	d2, [pc, #28]	@ 80012c0 <_Z41__static_initialization_and_destruction_0v+0x58>
 80012a6:	ed9f 1b08 	vldr	d1, [pc, #32]	@ 80012c8 <_Z41__static_initialization_and_destruction_0v+0x60>
 80012aa:	ed9f 0b09 	vldr	d0, [pc, #36]	@ 80012d0 <_Z41__static_initialization_and_destruction_0v+0x68>
 80012ae:	2304      	movs	r3, #4
 80012b0:	4a0e      	ldr	r2, [pc, #56]	@ (80012ec <_Z41__static_initialization_and_destruction_0v+0x84>)
 80012b2:	490f      	ldr	r1, [pc, #60]	@ (80012f0 <_Z41__static_initialization_and_destruction_0v+0x88>)
 80012b4:	480f      	ldr	r0, [pc, #60]	@ (80012f4 <_Z41__static_initialization_and_destruction_0v+0x8c>)
 80012b6:	f7ff fecb 	bl	8001050 <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftddd>
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
	...
 80012cc:	403e0000 	.word	0x403e0000
 80012d0:	33333333 	.word	0x33333333
 80012d4:	3fe33333 	.word	0x3fe33333
 80012d8:	2000542c 	.word	0x2000542c
 80012dc:	20000990 	.word	0x20000990
 80012e0:	200009a0 	.word	0x200009a0
 80012e4:	200009b0 	.word	0x200009b0
 80012e8:	40020400 	.word	0x40020400
 80012ec:	2000539c 	.word	0x2000539c
 80012f0:	200052c4 	.word	0x200052c4
 80012f4:	200009c0 	.word	0x200009c0

080012f8 <_GLOBAL__sub_I_servo1>:
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	f7ff ffb4 	bl	8001268 <_Z41__static_initialization_and_destruction_0v>
 8001300:	bd80      	pop	{r7, pc}

08001302 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8001302:	b480      	push	{r7}
 8001304:	b083      	sub	sp, #12
 8001306:	af00      	add	r7, sp, #0
 8001308:	ed87 0a01 	vstr	s0, [r7, #4]
 800130c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001310:	eef0 7ae7 	vabs.f32	s15, s15
 8001314:	eeb0 0a67 	vmov.f32	s0, s15
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <_ZN15MotorController4initEii>:
float v = 0.3;
float e = 1.0;

//extern TIM_HandleTypeDef htim12;

void MotorController::init(int en_ctrl,int dir_ctrl) {
 8001322:	b580      	push	{r7, lr}
 8001324:	b084      	sub	sp, #16
 8001326:	af00      	add	r7, sp, #0
 8001328:	60f8      	str	r0, [r7, #12]
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	607a      	str	r2, [r7, #4]
    HAL_TIM_Encoder_Start(_enc, TIM_CHANNEL_ALL);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	213c      	movs	r1, #60	@ 0x3c
 8001334:	4618      	mov	r0, r3
 8001336:	f004 f98f 	bl	8005658 <HAL_TIM_Encoder_Start>
    HAL_TIM_PWM_Start(_pwm, _channel);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	685a      	ldr	r2, [r3, #4]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	4619      	mov	r1, r3
 8001344:	4610      	mov	r0, r2
 8001346:	f004 f819 	bl	800537c <HAL_TIM_PWM_Start>
//	HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_1);
    _dir_ctrl = dir_ctrl;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	659a      	str	r2, [r3, #88]	@ 0x58
    _en_ctrl = en_ctrl;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	68ba      	ldr	r2, [r7, #8]
 8001354:	655a      	str	r2, [r3, #84]	@ 0x54
}
 8001356:	bf00      	nop
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <_ZN15MotorController8setSpeedEf>:

void MotorController::setSpeed(float speed) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	ed87 0a00 	vstr	s0, [r7]

    _targetSpeed = speed;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	683a      	ldr	r2, [r7, #0]
 8001370:	639a      	str	r2, [r3, #56]	@ 0x38
//    times++;
    ComputePID();
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f000 f874 	bl	8001460 <_ZN15MotorController10ComputePIDEv>

//    if (_pidOutput > 80.0) _pidOutput = 80.0;
//    if (_pidOutput < -80.0) _pidOutput = -80.0;
    if (_dir_ctrl == 1){
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800137c:	2b01      	cmp	r3, #1
 800137e:	d112      	bne.n	80013a6 <_ZN15MotorController8setSpeedEf+0x46>
    	HAL_GPIO_WritePin(_BGPIO, _BPin, _pidOutput >= 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6958      	ldr	r0, [r3, #20]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	8b19      	ldrh	r1, [r3, #24]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800138e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001396:	db01      	blt.n	800139c <_ZN15MotorController8setSpeedEf+0x3c>
 8001398:	2301      	movs	r3, #1
 800139a:	e000      	b.n	800139e <_ZN15MotorController8setSpeedEf+0x3e>
 800139c:	2300      	movs	r3, #0
 800139e:	461a      	mov	r2, r3
 80013a0:	f002 ff9a 	bl	80042d8 <HAL_GPIO_WritePin>
 80013a4:	e014      	b.n	80013d0 <_ZN15MotorController8setSpeedEf+0x70>
////    	HAL_GPIO_WritePin(_AGPIO, _APin, GPIO_PIN_SET);
//    	HAL_GPIO_WritePin(_BGPIO, _BPin, GPIO_PIN_RESET);
//    }

    }else{
    	HAL_GPIO_WritePin(_BGPIO, _BPin, _pidOutput >= 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6958      	ldr	r0, [r3, #20]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	8b19      	ldrh	r1, [r3, #24]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80013b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013bc:	bfac      	ite	ge
 80013be:	2301      	movge	r3, #1
 80013c0:	2300      	movlt	r3, #0
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	f083 0301 	eor.w	r3, r3, #1
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	461a      	mov	r2, r3
 80013cc:	f002 ff84 	bl	80042d8 <HAL_GPIO_WritePin>
    }
    _pwmValue = (uint16_t)(fabs(_pidOutput) * PWM_ARR );///  10.0);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80013d6:	eeb0 0a67 	vmov.f32	s0, s15
 80013da:	f7ff ff92 	bl	8001302 <_ZSt4fabsf>
 80013de:	eef0 7a40 	vmov.f32	s15, s0
 80013e2:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800145c <_ZN15MotorController8setSpeedEf+0xfc>
 80013e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013ee:	ee17 3a90 	vmov	r3, s15
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    if (_pwmValue < 10) _pwmValue = 0;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80013fc:	2b09      	cmp	r3, #9
 80013fe:	d802      	bhi.n	8001406 <_ZN15MotorController8setSpeedEf+0xa6>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	85da      	strh	r2, [r3, #46]	@ 0x2e
    __HAL_TIM_SET_COMPARE(_pwm, _channel, _pwmValue);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d106      	bne.n	800141c <_ZN15MotorController8setSpeedEf+0xbc>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	8dda      	ldrh	r2, [r3, #46]	@ 0x2e
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	635a      	str	r2, [r3, #52]	@ 0x34
//	if(_pidOutput > 0) HAL_GPIO_WritePin(_dirGPIO, _dirPin, GPIO_PIN_SET);
//	else HAL_GPIO_WritePin(_dirGPIO, _dirPin, GPIO_PIN_RESET);
//
//	__HAL_TIM_SET_COMPARE(_pwm, _channel, (uint16_t)_pwmValue);

}
 800141a:	e01b      	b.n	8001454 <_ZN15MotorController8setSpeedEf+0xf4>
    __HAL_TIM_SET_COMPARE(_pwm, _channel, _pwmValue);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	2b04      	cmp	r3, #4
 8001422:	d106      	bne.n	8001432 <_ZN15MotorController8setSpeedEf+0xd2>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	8dda      	ldrh	r2, [r3, #46]	@ 0x2e
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001430:	e010      	b.n	8001454 <_ZN15MotorController8setSpeedEf+0xf4>
    __HAL_TIM_SET_COMPARE(_pwm, _channel, _pwmValue);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	2b08      	cmp	r3, #8
 8001438:	d106      	bne.n	8001448 <_ZN15MotorController8setSpeedEf+0xe8>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	8dda      	ldrh	r2, [r3, #46]	@ 0x2e
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001446:	e005      	b.n	8001454 <_ZN15MotorController8setSpeedEf+0xf4>
    __HAL_TIM_SET_COMPARE(_pwm, _channel, _pwmValue);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	8dda      	ldrh	r2, [r3, #46]	@ 0x2e
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	447a0000 	.word	0x447a0000

08001460 <_ZN15MotorController10ComputePIDEv>:
float MotorController::getSpeed() {
//	updateSpeed();
    return _currentSpeed;
}

float MotorController::ComputePID() {
 8001460:	b5b0      	push	{r4, r5, r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
    updateSpeed();
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f000 f8a9 	bl	80015c0 <_ZN15MotorController11updateSpeedEv>
    _error = _targetSpeed - _currentSpeed;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800147a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

    _integral += _error * (DT / 1000.0);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff f88d 	bl	80005a8 <__aeabi_f2d>
 800148e:	4604      	mov	r4, r0
 8001490:	460d      	mov	r5, r1
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff f886 	bl	80005a8 <__aeabi_f2d>
 800149c:	a345      	add	r3, pc, #276	@ (adr r3, 80015b4 <_ZN15MotorController10ComputePIDEv+0x154>)
 800149e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a2:	f7ff f8d9 	bl	8000658 <__aeabi_dmul>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	4620      	mov	r0, r4
 80014ac:	4629      	mov	r1, r5
 80014ae:	f7fe ff1d 	bl	80002ec <__adddf3>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4610      	mov	r0, r2
 80014b8:	4619      	mov	r1, r3
 80014ba:	f7ff fadf 	bl	8000a7c <__aeabi_d2f>
 80014be:	4602      	mov	r2, r0
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	649a      	str	r2, [r3, #72]	@ 0x48
    if(_integral >= INTEGRAL_LIMIT) _integral = INTEGRAL_LIMIT;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80014ca:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80014ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d6:	db04      	blt.n	80014e2 <_ZN15MotorController10ComputePIDEv+0x82>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80014de:	649a      	str	r2, [r3, #72]	@ 0x48
 80014e0:	e00d      	b.n	80014fe <_ZN15MotorController10ComputePIDEv+0x9e>
    else if(_integral <= -INTEGRAL_LIMIT) _integral = -INTEGRAL_LIMIT;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80014e8:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 80014ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f4:	d803      	bhi.n	80014fe <_ZN15MotorController10ComputePIDEv+0x9e>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f04f 423f 	mov.w	r2, #3204448256	@ 0xbf000000
 80014fc:	649a      	str	r2, [r3, #72]	@ 0x48


    float derivative = (_error - _lastError) / (DT / 1000.0);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800150a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800150e:	ee17 0a90 	vmov	r0, s15
 8001512:	f7ff f849 	bl	80005a8 <__aeabi_f2d>
 8001516:	a327      	add	r3, pc, #156	@ (adr r3, 80015b4 <_ZN15MotorController10ComputePIDEv+0x154>)
 8001518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151c:	f7ff f9c6 	bl	80008ac <__aeabi_ddiv>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	4610      	mov	r0, r2
 8001526:	4619      	mov	r1, r3
 8001528:	f7ff faa8 	bl	8000a7c <__aeabi_d2f>
 800152c:	4603      	mov	r3, r0
 800152e:	60fb      	str	r3, [r7, #12]

    _pidOutput = (_kp * _error) + (_ki * _integral); //+ (_kd * derivative);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	ed93 7a07 	vldr	s14, [r3, #28]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800153c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	edd3 6a08 	vldr	s13, [r3, #32]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800154c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001550:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

    // Update last error
    _lastError = _error;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	645a      	str	r2, [r3, #68]	@ 0x44
    if(_pidOutput > 1) _pidOutput = 1;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001568:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800156c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001574:	dd04      	ble.n	8001580 <_ZN15MotorController10ComputePIDEv+0x120>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800157c:	631a      	str	r2, [r3, #48]	@ 0x30
 800157e:	e00c      	b.n	800159a <_ZN15MotorController10ComputePIDEv+0x13a>
    else if (_pidOutput < -1) _pidOutput = -1;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001586:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800158a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800158e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001592:	d502      	bpl.n	800159a <_ZN15MotorController10ComputePIDEv+0x13a>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a06      	ldr	r2, [pc, #24]	@ (80015b0 <_ZN15MotorController10ComputePIDEv+0x150>)
 8001598:	631a      	str	r2, [r3, #48]	@ 0x30
    return _pidOutput;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
//    pre_error = error;

	if (_pidOutput > 1) _pidOutput = 1;
	else if (_pidOutput < -1) _pidOutput = -1;
    return _pidOutput;
}
 800159e:	ee07 3a90 	vmov	s15, r3
 80015a2:	eeb0 0a67 	vmov.f32	s0, s15
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bdb0      	pop	{r4, r5, r7, pc}
 80015ac:	f3af 8000 	nop.w
 80015b0:	bf800000 	.word	0xbf800000
 80015b4:	47ae147b 	.word	0x47ae147b
 80015b8:	3f847ae1 	.word	0x3f847ae1
 80015bc:	00000000 	.word	0x00000000

080015c0 <_ZN15MotorController11updateSpeedEv>:

float MotorController::updateSpeed() {
 80015c0:	b5b0      	push	{r4, r5, r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
//    else
//        _currentSpeed = (__HAL_TIM_GET_COUNTER(_enc) / ENCODER_RESOLUTION / REDUCTION_RATIO / 4) / (DT / 1000.0); // RPS
//
//    _last_cnt = __HAL_TIM_GET_COUNTER(_enc);

	cnt = __HAL_TIM_GetCounter(_enc);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d0:	b21a      	sxth	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	859a      	strh	r2, [r3, #44]	@ 0x2c
	_cascade_height += -(float)cnt / (4.0f * ENCODER_RESOLUTION * REDUCTION_RATIO) * 3.14 * 35;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015da:	4618      	mov	r0, r3
 80015dc:	f7fe ffe4 	bl	80005a8 <__aeabi_f2d>
 80015e0:	4604      	mov	r4, r0
 80015e2:	460d      	mov	r5, r1
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 80015ea:	ee07 3a90 	vmov	s15, r3
 80015ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f2:	eef1 7a67 	vneg.f32	s15, s15
 80015f6:	ee17 3a90 	vmov	r3, s15
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe ffd4 	bl	80005a8 <__aeabi_f2d>
 8001600:	f04f 0200 	mov.w	r2, #0
 8001604:	4b3c      	ldr	r3, [pc, #240]	@ (80016f8 <_ZN15MotorController11updateSpeedEv+0x138>)
 8001606:	f7ff f951 	bl	80008ac <__aeabi_ddiv>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4610      	mov	r0, r2
 8001610:	4619      	mov	r1, r3
 8001612:	a335      	add	r3, pc, #212	@ (adr r3, 80016e8 <_ZN15MotorController11updateSpeedEv+0x128>)
 8001614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001618:	f7ff f81e 	bl	8000658 <__aeabi_dmul>
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	4610      	mov	r0, r2
 8001622:	4619      	mov	r1, r3
 8001624:	f04f 0200 	mov.w	r2, #0
 8001628:	4b34      	ldr	r3, [pc, #208]	@ (80016fc <_ZN15MotorController11updateSpeedEv+0x13c>)
 800162a:	f7ff f815 	bl	8000658 <__aeabi_dmul>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4620      	mov	r0, r4
 8001634:	4629      	mov	r1, r5
 8001636:	f7fe fe59 	bl	80002ec <__adddf3>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4610      	mov	r0, r2
 8001640:	4619      	mov	r1, r3
 8001642:	f7ff fa1b 	bl	8000a7c <__aeabi_d2f>
 8001646:	4602      	mov	r2, r0
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	661a      	str	r2, [r3, #96]	@ 0x60
	_currentSpeed = (cnt/ENCODER_RESOLUTION / REDUCTION_RATIO / 4) / (DT / 1000.0);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe ff96 	bl	8000584 <__aeabi_i2d>
 8001658:	f04f 0200 	mov.w	r2, #0
 800165c:	4b28      	ldr	r3, [pc, #160]	@ (8001700 <_ZN15MotorController11updateSpeedEv+0x140>)
 800165e:	f7ff f925 	bl	80008ac <__aeabi_ddiv>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	f04f 0200 	mov.w	r2, #0
 800166e:	4b25      	ldr	r3, [pc, #148]	@ (8001704 <_ZN15MotorController11updateSpeedEv+0x144>)
 8001670:	f7ff f91c 	bl	80008ac <__aeabi_ddiv>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	f04f 0200 	mov.w	r2, #0
 8001680:	4b21      	ldr	r3, [pc, #132]	@ (8001708 <_ZN15MotorController11updateSpeedEv+0x148>)
 8001682:	f7ff f913 	bl	80008ac <__aeabi_ddiv>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4610      	mov	r0, r2
 800168c:	4619      	mov	r1, r3
 800168e:	a318      	add	r3, pc, #96	@ (adr r3, 80016f0 <_ZN15MotorController11updateSpeedEv+0x130>)
 8001690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001694:	f7ff f90a 	bl	80008ac <__aeabi_ddiv>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4610      	mov	r0, r2
 800169e:	4619      	mov	r1, r3
 80016a0:	f7ff f9ec 	bl	8000a7c <__aeabi_d2f>
 80016a4:	4602      	mov	r2, r0
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COUNTER(_enc, 0);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2200      	movs	r2, #0
 80016b2:	625a      	str	r2, [r3, #36]	@ 0x24
    _currentSpeed *= _en_ctrl;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016be:	ee07 3a90 	vmov	s15, r3
 80016c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    return _currentSpeed;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016d4:	ee07 3a90 	vmov	s15, r3
}
 80016d8:	eeb0 0a67 	vmov.f32	s0, s15
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bdb0      	pop	{r4, r5, r7, pc}
 80016e2:	bf00      	nop
 80016e4:	f3af 8000 	nop.w
 80016e8:	51eb851f 	.word	0x51eb851f
 80016ec:	40091eb8 	.word	0x40091eb8
 80016f0:	47ae147b 	.word	0x47ae147b
 80016f4:	3f847ae1 	.word	0x3f847ae1
 80016f8:	40d80000 	.word	0x40d80000
 80016fc:	40418000 	.word	0x40418000
 8001700:	40700000 	.word	0x40700000
 8001704:	40380000 	.word	0x40380000
 8001708:	40100000 	.word	0x40100000

0800170c <_ZN15MotorController7setgoalEf>:

void MotorController::setgoal(float target_height) {
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	ed87 0a00 	vstr	s0, [r7]
	_targrt_height  = target_height;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	63da      	str	r2, [r3, #60]	@ 0x3c
//		_pwmValue = 0; // 停止馬達
//		_check++;
//	}
//	if(_microswitch_touched==0 && _check ==1) _check--;

	if(fabs(_targrt_height - _cascade_height) <= 2.0){
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800172a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800172e:	eeb0 0a67 	vmov.f32	s0, s15
 8001732:	f7ff fde6 	bl	8001302 <_ZSt4fabsf>
 8001736:	eef0 7a40 	vmov.f32	s15, s0
 800173a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800173e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001746:	bf94      	ite	ls
 8001748:	2301      	movls	r3, #1
 800174a:	2300      	movhi	r3, #0
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b00      	cmp	r3, #0
 8001750:	d005      	beq.n	800175e <_ZN15MotorController7setgoalEf+0x52>
		setSpeed(0.0);
 8001752:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 80017a8 <_ZN15MotorController7setgoalEf+0x9c>
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff fe02 	bl	8001360 <_ZN15MotorController8setSpeedEf>
//	if(_pwmValue > 750) _pwmValue = 750;
//	if(_pwmValue < MIN_PWM) _pwmValue = MIN_PWM;
////	__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, (uint16_t)_pwmValue);
//	__HAL_TIM_SET_COMPARE(_pwm, _channel, (uint16_t)_pwmValue);
//
}
 800175c:	e01f      	b.n	800179e <_ZN15MotorController7setgoalEf+0x92>
	else if(_targrt_height - _cascade_height>0) setSpeed(v);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800176a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800176e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001776:	dd08      	ble.n	800178a <_ZN15MotorController7setgoalEf+0x7e>
 8001778:	4b0c      	ldr	r3, [pc, #48]	@ (80017ac <_ZN15MotorController7setgoalEf+0xa0>)
 800177a:	edd3 7a00 	vldr	s15, [r3]
 800177e:	eeb0 0a67 	vmov.f32	s0, s15
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7ff fdec 	bl	8001360 <_ZN15MotorController8setSpeedEf>
}
 8001788:	e009      	b.n	800179e <_ZN15MotorController7setgoalEf+0x92>
	else setSpeed(-v);
 800178a:	4b08      	ldr	r3, [pc, #32]	@ (80017ac <_ZN15MotorController7setgoalEf+0xa0>)
 800178c:	edd3 7a00 	vldr	s15, [r3]
 8001790:	eef1 7a67 	vneg.f32	s15, s15
 8001794:	eeb0 0a67 	vmov.f32	s0, s15
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff fde1 	bl	8001360 <_ZN15MotorController8setSpeedEf>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	00000000 	.word	0x00000000
 80017ac:	20000010 	.word	0x20000010

080017b0 <uros_init>:
#define MAX_PING_FAIL_COUNT 5


extern UART_HandleTypeDef USARTx;

void uros_init(void) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b088      	sub	sp, #32
 80017b4:	af02      	add	r7, sp, #8
  // Initialize micro-ROS
  rmw_uros_set_custom_transport(
 80017b6:	4b14      	ldr	r3, [pc, #80]	@ (8001808 <uros_init+0x58>)
 80017b8:	9301      	str	r3, [sp, #4]
 80017ba:	4b14      	ldr	r3, [pc, #80]	@ (800180c <uros_init+0x5c>)
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	4b14      	ldr	r3, [pc, #80]	@ (8001810 <uros_init+0x60>)
 80017c0:	4a14      	ldr	r2, [pc, #80]	@ (8001814 <uros_init+0x64>)
 80017c2:	4915      	ldr	r1, [pc, #84]	@ (8001818 <uros_init+0x68>)
 80017c4:	2001      	movs	r0, #1
 80017c6:	f00d f9bd 	bl	800eb44 <rmw_uros_set_custom_transport>
    cubemx_transport_open,
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);
  
  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80017ca:	1d3b      	adds	r3, r7, #4
 80017cc:	4618      	mov	r0, r3
 80017ce:	f00c fdd1 	bl	800e374 <rcutils_get_zero_initialized_allocator>

  freeRTOS_allocator.allocate = microros_allocate;
 80017d2:	4b12      	ldr	r3, [pc, #72]	@ (800181c <uros_init+0x6c>)
 80017d4:	607b      	str	r3, [r7, #4]
  freeRTOS_allocator.deallocate = microros_deallocate;
 80017d6:	4b12      	ldr	r3, [pc, #72]	@ (8001820 <uros_init+0x70>)
 80017d8:	60bb      	str	r3, [r7, #8]
  freeRTOS_allocator.reallocate = microros_reallocate;
 80017da:	4b12      	ldr	r3, [pc, #72]	@ (8001824 <uros_init+0x74>)
 80017dc:	60fb      	str	r3, [r7, #12]
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80017de:	4b12      	ldr	r3, [pc, #72]	@ (8001828 <uros_init+0x78>)
 80017e0:	613b      	str	r3, [r7, #16]

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	4618      	mov	r0, r3
 80017e6:	f00c fdd3 	bl	800e390 <rcutils_set_default_allocator>
 80017ea:	4603      	mov	r3, r0
 80017ec:	f083 0301 	eor.w	r3, r3, #1
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <uros_init+0x4e>
  printf("Error on default allocators (line %d)\n", __LINE__); 
 80017f6:	213f      	movs	r1, #63	@ 0x3f
 80017f8:	480c      	ldr	r0, [pc, #48]	@ (800182c <uros_init+0x7c>)
 80017fa:	f017 ffcd 	bl	8019798 <iprintf>
  }
}
 80017fe:	bf00      	nop
 8001800:	3718      	adds	r7, #24
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	08002291 	.word	0x08002291
 800180c:	08002229 	.word	0x08002229
 8001810:	08002209 	.word	0x08002209
 8001814:	080021dd 	.word	0x080021dd
 8001818:	200053e4 	.word	0x200053e4
 800181c:	08002991 	.word	0x08002991
 8001820:	080029d5 	.word	0x080029d5
 8001824:	08002a0d 	.word	0x08002a0d
 8001828:	08002a79 	.word	0x08002a79
 800182c:	0801a988 	.word	0x0801a988

08001830 <uros_agent_status_check>:

void uros_agent_status_check(void) {
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  switch (status) {
 8001834:	4b11      	ldr	r3, [pc, #68]	@ (800187c <uros_agent_status_check+0x4c>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b04      	cmp	r3, #4
 800183a:	d81c      	bhi.n	8001876 <uros_agent_status_check+0x46>
 800183c:	a201      	add	r2, pc, #4	@ (adr r2, 8001844 <uros_agent_status_check+0x14>)
 800183e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001842:	bf00      	nop
 8001844:	08001859 	.word	0x08001859
 8001848:	0800185f 	.word	0x0800185f
 800184c:	08001865 	.word	0x08001865
 8001850:	0800186b 	.word	0x0800186b
 8001854:	08001871 	.word	0x08001871
    case AGENT_WAITING:
      handle_state_agent_waiting();
 8001858:	f000 f812 	bl	8001880 <handle_state_agent_waiting>
      break;
 800185c:	e00c      	b.n	8001878 <uros_agent_status_check+0x48>
    case AGENT_AVAILABLE:
      handle_state_agent_available();
 800185e:	f000 f821 	bl	80018a4 <handle_state_agent_available>
      break;
 8001862:	e009      	b.n	8001878 <uros_agent_status_check+0x48>
    case AGENT_CONNECTED:
      handle_state_agent_connected();
 8001864:	f000 f82c 	bl	80018c0 <handle_state_agent_connected>
      break;
 8001868:	e006      	b.n	8001878 <uros_agent_status_check+0x48>
    case AGENT_TRYING:
      handle_state_agent_trying();
 800186a:	f000 f85b 	bl	8001924 <handle_state_agent_trying>
      break;
 800186e:	e003      	b.n	8001878 <uros_agent_status_check+0x48>
    case AGENT_DISCONNECTED:
      handle_state_agent_disconnected();
 8001870:	f000 f882 	bl	8001978 <handle_state_agent_disconnected>
      break;
 8001874:	e000      	b.n	8001878 <uros_agent_status_check+0x48>
    default:
      break;
 8001876:	bf00      	nop
  }
}
 8001878:	bf00      	nop
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20000e48 	.word	0x20000e48

08001880 <handle_state_agent_waiting>:

void handle_state_agent_waiting(void) {
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  status = (rmw_uros_ping_agent(100, 10) == RMW_RET_OK) ? AGENT_AVAILABLE : AGENT_WAITING;
 8001884:	210a      	movs	r1, #10
 8001886:	2064      	movs	r0, #100	@ 0x64
 8001888:	f00d f972 	bl	800eb70 <rmw_uros_ping_agent>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <handle_state_agent_waiting+0x16>
 8001892:	2201      	movs	r2, #1
 8001894:	e000      	b.n	8001898 <handle_state_agent_waiting+0x18>
 8001896:	2200      	movs	r2, #0
 8001898:	4b01      	ldr	r3, [pc, #4]	@ (80018a0 <handle_state_agent_waiting+0x20>)
 800189a:	701a      	strb	r2, [r3, #0]
}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000e48 	.word	0x20000e48

080018a4 <handle_state_agent_available>:
void handle_state_agent_available(void) {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  uros_create_entities();
 80018a8:	f000 f872 	bl	8001990 <uros_create_entities>
  status = AGENT_CONNECTED;
 80018ac:	4b02      	ldr	r3, [pc, #8]	@ (80018b8 <handle_state_agent_available+0x14>)
 80018ae:	2202      	movs	r2, #2
 80018b0:	701a      	strb	r2, [r3, #0]
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000e48 	.word	0x20000e48
 80018bc:	00000000 	.word	0x00000000

080018c0 <handle_state_agent_connected>:
void handle_state_agent_connected(void) {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  if(rmw_uros_ping_agent(20, 5) == RMW_RET_OK){
 80018c4:	2105      	movs	r1, #5
 80018c6:	2014      	movs	r0, #20
 80018c8:	f00d f952 	bl	800eb70 <rmw_uros_ping_agent>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	bf0c      	ite	eq
 80018d2:	2301      	moveq	r3, #1
 80018d4:	2300      	movne	r3, #0
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d009      	beq.n	80018f0 <handle_state_agent_connected+0x30>
    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(50));
 80018dc:	a30f      	add	r3, pc, #60	@ (adr r3, 800191c <handle_state_agent_connected+0x5c>)
 80018de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e2:	480b      	ldr	r0, [pc, #44]	@ (8001910 <handle_state_agent_connected+0x50>)
 80018e4:	f00c fbd2 	bl	800e08c <rclc_executor_spin_some>
    ping_fail_count = 0; // Reset ping fail count
 80018e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001914 <handle_state_agent_connected+0x54>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
    ping_fail_count++;
    if(ping_fail_count >= MAX_PING_FAIL_COUNT){
      status = AGENT_TRYING;
    }
  }
}
 80018ee:	e00b      	b.n	8001908 <handle_state_agent_connected+0x48>
    ping_fail_count++;
 80018f0:	4b08      	ldr	r3, [pc, #32]	@ (8001914 <handle_state_agent_connected+0x54>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	3301      	adds	r3, #1
 80018f6:	4a07      	ldr	r2, [pc, #28]	@ (8001914 <handle_state_agent_connected+0x54>)
 80018f8:	6013      	str	r3, [r2, #0]
    if(ping_fail_count >= MAX_PING_FAIL_COUNT){
 80018fa:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <handle_state_agent_connected+0x54>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2b04      	cmp	r3, #4
 8001900:	dd02      	ble.n	8001908 <handle_state_agent_connected+0x48>
      status = AGENT_TRYING;
 8001902:	4b05      	ldr	r3, [pc, #20]	@ (8001918 <handle_state_agent_connected+0x58>)
 8001904:	2203      	movs	r2, #3
 8001906:	701a      	strb	r2, [r3, #0]
}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}
 800190c:	f3af 8000 	nop.w
 8001910:	20000dc0 	.word	0x20000dc0
 8001914:	20000e4c 	.word	0x20000e4c
 8001918:	20000e48 	.word	0x20000e48
 800191c:	02faf080 	.word	0x02faf080
 8001920:	00000000 	.word	0x00000000

08001924 <handle_state_agent_trying>:
void handle_state_agent_trying(void) {
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  if(rmw_uros_ping_agent(50, 10) == RMW_RET_OK){
 8001928:	210a      	movs	r1, #10
 800192a:	2032      	movs	r0, #50	@ 0x32
 800192c:	f00d f920 	bl	800eb70 <rmw_uros_ping_agent>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	bf0c      	ite	eq
 8001936:	2301      	moveq	r3, #1
 8001938:	2300      	movne	r3, #0
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b00      	cmp	r3, #0
 800193e:	d006      	beq.n	800194e <handle_state_agent_trying+0x2a>
    status = AGENT_CONNECTED;
 8001940:	4b0b      	ldr	r3, [pc, #44]	@ (8001970 <handle_state_agent_trying+0x4c>)
 8001942:	2202      	movs	r2, #2
 8001944:	701a      	strb	r2, [r3, #0]
    ping_fail_count = 0; // Reset ping fail count
 8001946:	4b0b      	ldr	r3, [pc, #44]	@ (8001974 <handle_state_agent_trying+0x50>)
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
    if(ping_fail_count >= MAX_PING_FAIL_COUNT){
      status = AGENT_DISCONNECTED;
      ping_fail_count = 0;
    }
  }
}
 800194c:	e00e      	b.n	800196c <handle_state_agent_trying+0x48>
    ping_fail_count++;
 800194e:	4b09      	ldr	r3, [pc, #36]	@ (8001974 <handle_state_agent_trying+0x50>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	3301      	adds	r3, #1
 8001954:	4a07      	ldr	r2, [pc, #28]	@ (8001974 <handle_state_agent_trying+0x50>)
 8001956:	6013      	str	r3, [r2, #0]
    if(ping_fail_count >= MAX_PING_FAIL_COUNT){
 8001958:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <handle_state_agent_trying+0x50>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b04      	cmp	r3, #4
 800195e:	dd05      	ble.n	800196c <handle_state_agent_trying+0x48>
      status = AGENT_DISCONNECTED;
 8001960:	4b03      	ldr	r3, [pc, #12]	@ (8001970 <handle_state_agent_trying+0x4c>)
 8001962:	2204      	movs	r2, #4
 8001964:	701a      	strb	r2, [r3, #0]
      ping_fail_count = 0;
 8001966:	4b03      	ldr	r3, [pc, #12]	@ (8001974 <handle_state_agent_trying+0x50>)
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000e48 	.word	0x20000e48
 8001974:	20000e4c 	.word	0x20000e4c

08001978 <handle_state_agent_disconnected>:
void handle_state_agent_disconnected(void) {
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  uros_destroy_entities();
 800197c:	f000 f93e 	bl	8001bfc <uros_destroy_entities>
  status = AGENT_WAITING;
 8001980:	4b02      	ldr	r3, [pc, #8]	@ (800198c <handle_state_agent_disconnected+0x14>)
 8001982:	2200      	movs	r2, #0
 8001984:	701a      	strb	r2, [r3, #0]
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000e48 	.word	0x20000e48

08001990 <uros_create_entities>:


void uros_create_entities(void) {
 8001990:	b5b0      	push	{r4, r5, r7, lr}
 8001992:	b088      	sub	sp, #32
 8001994:	af02      	add	r7, sp, #8
  // 重置积分变量
  last_cmd_vel_time = 0;
 8001996:	4b7e      	ldr	r3, [pc, #504]	@ (8001b90 <uros_create_entities+0x200>)
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
  last_cmd_arm_time = 0;
 800199c:	4b7d      	ldr	r3, [pc, #500]	@ (8001b94 <uros_create_entities+0x204>)
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
  current_yaw = 0.0f;
 80019a2:	4b7d      	ldr	r3, [pc, #500]	@ (8001b98 <uros_create_entities+0x208>)
 80019a4:	f04f 0200 	mov.w	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]

  allocator = rcl_get_default_allocator();
 80019aa:	4c7c      	ldr	r4, [pc, #496]	@ (8001b9c <uros_create_entities+0x20c>)
 80019ac:	463b      	mov	r3, r7
 80019ae:	4618      	mov	r0, r3
 80019b0:	f00c fd0c 	bl	800e3cc <rcutils_get_default_allocator>
 80019b4:	4625      	mov	r5, r4
 80019b6:	463c      	mov	r4, r7
 80019b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019bc:	6823      	ldr	r3, [r4, #0]
 80019be:	602b      	str	r3, [r5, #0]

  init_options = rcl_get_zero_initialized_init_options();
 80019c0:	f00a fcfc 	bl	800c3bc <rcl_get_zero_initialized_init_options>
 80019c4:	4603      	mov	r3, r0
 80019c6:	4a76      	ldr	r2, [pc, #472]	@ (8001ba0 <uros_create_entities+0x210>)
 80019c8:	6013      	str	r3, [r2, #0]
  rcl_init_options_init(&init_options, allocator);
 80019ca:	4b74      	ldr	r3, [pc, #464]	@ (8001b9c <uros_create_entities+0x20c>)
 80019cc:	466c      	mov	r4, sp
 80019ce:	f103 020c 	add.w	r2, r3, #12
 80019d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019d6:	e884 0003 	stmia.w	r4, {r0, r1}
 80019da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019dc:	4870      	ldr	r0, [pc, #448]	@ (8001ba0 <uros_create_entities+0x210>)
 80019de:	f00a fcef 	bl	800c3c0 <rcl_init_options_init>
  rcl_init_options_set_domain_id(&init_options, DOMAIN_ID);
 80019e2:	2100      	movs	r1, #0
 80019e4:	486e      	ldr	r0, [pc, #440]	@ (8001ba0 <uros_create_entities+0x210>)
 80019e6:	f00a fde7 	bl	800c5b8 <rcl_init_options_set_domain_id>

  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator); // Initialize support structure
 80019ea:	4b6c      	ldr	r3, [pc, #432]	@ (8001b9c <uros_create_entities+0x20c>)
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	4b6c      	ldr	r3, [pc, #432]	@ (8001ba0 <uros_create_entities+0x210>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	2100      	movs	r1, #0
 80019f4:	486b      	ldr	r0, [pc, #428]	@ (8001ba4 <uros_create_entities+0x214>)
 80019f6:	f00c fb83 	bl	800e100 <rclc_support_init_with_options>

  rcl_init_options_fini(&init_options);
 80019fa:	4869      	ldr	r0, [pc, #420]	@ (8001ba0 <uros_create_entities+0x210>)
 80019fc:	f00a fd46 	bl	800c48c <rcl_init_options_fini>
  
  rclc_node_init_default(&node, NODE_NAME, "", &support);                       // Initialize node
 8001a00:	4b68      	ldr	r3, [pc, #416]	@ (8001ba4 <uros_create_entities+0x214>)
 8001a02:	4a69      	ldr	r2, [pc, #420]	@ (8001ba8 <uros_create_entities+0x218>)
 8001a04:	4969      	ldr	r1, [pc, #420]	@ (8001bac <uros_create_entities+0x21c>)
 8001a06:	486a      	ldr	r0, [pc, #424]	@ (8001bb0 <uros_create_entities+0x220>)
 8001a08:	f00c fbd8 	bl	800e1bc <rclc_node_init_default>

  rclc_publisher_init_default(                                                  // Initialize publisher for pose
 8001a0c:	f00a fb4e 	bl	800c0ac <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>
 8001a10:	4602      	mov	r2, r0
 8001a12:	4b68      	ldr	r3, [pc, #416]	@ (8001bb4 <uros_create_entities+0x224>)
 8001a14:	4966      	ldr	r1, [pc, #408]	@ (8001bb0 <uros_create_entities+0x220>)
 8001a16:	4868      	ldr	r0, [pc, #416]	@ (8001bb8 <uros_create_entities+0x228>)
 8001a18:	f00c fc0c 	bl	800e234 <rclc_publisher_init_default>
    &pose_pub,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(nav_msgs, msg, Odometry),
    "robot/pose");
  pose_msg.pose.pose.position.x = 83.0;
 8001a1c:	4967      	ldr	r1, [pc, #412]	@ (8001bbc <uros_create_entities+0x22c>)
 8001a1e:	a358      	add	r3, pc, #352	@ (adr r3, 8001b80 <uros_create_entities+0x1f0>)
 8001a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a24:	e9c1 2308 	strd	r2, r3, [r1, #32]
  pose_msg.pose.pose.position.y = 616.0;
 8001a28:	4964      	ldr	r1, [pc, #400]	@ (8001bbc <uros_create_entities+0x22c>)
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	4b64      	ldr	r3, [pc, #400]	@ (8001bc0 <uros_create_entities+0x230>)
 8001a30:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
  pose_msg.pose.pose.position.z = 0.0;
 8001a34:	4961      	ldr	r1, [pc, #388]	@ (8001bbc <uros_create_entities+0x22c>)
 8001a36:	f04f 0200 	mov.w	r2, #0
 8001a3a:	f04f 0300 	mov.w	r3, #0
 8001a3e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
  pose_msg.pose.pose.orientation.x = 0.0;
 8001a42:	495e      	ldr	r1, [pc, #376]	@ (8001bbc <uros_create_entities+0x22c>)
 8001a44:	f04f 0200 	mov.w	r2, #0
 8001a48:	f04f 0300 	mov.w	r3, #0
 8001a4c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
  pose_msg.pose.pose.orientation.y = 0.0;
 8001a50:	495a      	ldr	r1, [pc, #360]	@ (8001bbc <uros_create_entities+0x22c>)
 8001a52:	f04f 0200 	mov.w	r2, #0
 8001a56:	f04f 0300 	mov.w	r3, #0
 8001a5a:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
  pose_msg.pose.pose.orientation.z = 0.0;
 8001a5e:	4957      	ldr	r1, [pc, #348]	@ (8001bbc <uros_create_entities+0x22c>)
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	f04f 0300 	mov.w	r3, #0
 8001a68:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
  pose_msg.pose.pose.orientation.w = 0.0;
 8001a6c:	4953      	ldr	r1, [pc, #332]	@ (8001bbc <uros_create_entities+0x22c>)
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	f04f 0300 	mov.w	r3, #0
 8001a76:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50

  rclc_publisher_init_default(                                                  // Initialize publisher for pose
 8001a7a:	f00e fc23 	bl	80102c4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	4b50      	ldr	r3, [pc, #320]	@ (8001bc4 <uros_create_entities+0x234>)
 8001a82:	494b      	ldr	r1, [pc, #300]	@ (8001bb0 <uros_create_entities+0x220>)
 8001a84:	4850      	ldr	r0, [pc, #320]	@ (8001bc8 <uros_create_entities+0x238>)
 8001a86:	f00c fbd5 	bl	800e234 <rclc_publisher_init_default>
    &arm_pub,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
    "robot/arm_status");
  arm_msg.data = -1;
 8001a8a:	4b50      	ldr	r3, [pc, #320]	@ (8001bcc <uros_create_entities+0x23c>)
 8001a8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a90:	601a      	str	r2, [r3, #0]

  rmw_uros_set_publisher_session_timeout(                                       // Set session timeout for publisher
 8001a92:	4849      	ldr	r0, [pc, #292]	@ (8001bb8 <uros_create_entities+0x228>)
 8001a94:	f00b f888 	bl	800cba8 <rcl_publisher_get_rmw_handle>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	210a      	movs	r1, #10
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f00e f859 	bl	800fb54 <rmw_uros_set_publisher_session_timeout>
    rcl_publisher_get_rmw_handle(&pose_pub),
    10);

  rmw_uros_set_publisher_session_timeout(                                       // Set session timeout for publisher
 8001aa2:	4849      	ldr	r0, [pc, #292]	@ (8001bc8 <uros_create_entities+0x238>)
 8001aa4:	f00b f880 	bl	800cba8 <rcl_publisher_get_rmw_handle>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	210a      	movs	r1, #10
 8001aac:	4618      	mov	r0, r3
 8001aae:	f00e f851 	bl	800fb54 <rmw_uros_set_publisher_session_timeout>
    rcl_publisher_get_rmw_handle(&arm_pub),
    10);

  rclc_subscription_init_default(                                               // Initialize subscriber for command velocity
 8001ab2:	f008 fe31 	bl	800a718 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	4b45      	ldr	r3, [pc, #276]	@ (8001bd0 <uros_create_entities+0x240>)
 8001aba:	493d      	ldr	r1, [pc, #244]	@ (8001bb0 <uros_create_entities+0x220>)
 8001abc:	4845      	ldr	r0, [pc, #276]	@ (8001bd4 <uros_create_entities+0x244>)
 8001abe:	f00c fbed 	bl	800e29c <rclc_subscription_init_default>
    &cmd_vel_sub,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist),
    "robot/cmd_vel");
  cmd_vel_msg.linear.x = 0.0;
 8001ac2:	4945      	ldr	r1, [pc, #276]	@ (8001bd8 <uros_create_entities+0x248>)
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	e9c1 2300 	strd	r2, r3, [r1]
  cmd_vel_msg.linear.y = 0.0;
 8001ad0:	4941      	ldr	r1, [pc, #260]	@ (8001bd8 <uros_create_entities+0x248>)
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	f04f 0300 	mov.w	r3, #0
 8001ada:	e9c1 2302 	strd	r2, r3, [r1, #8]
  cmd_vel_msg.linear.z = 0.0;
 8001ade:	493e      	ldr	r1, [pc, #248]	@ (8001bd8 <uros_create_entities+0x248>)
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	f04f 0300 	mov.w	r3, #0
 8001ae8:	e9c1 2304 	strd	r2, r3, [r1, #16]
  cmd_vel_msg.angular.x = 0.0;
 8001aec:	493a      	ldr	r1, [pc, #232]	@ (8001bd8 <uros_create_entities+0x248>)
 8001aee:	f04f 0200 	mov.w	r2, #0
 8001af2:	f04f 0300 	mov.w	r3, #0
 8001af6:	e9c1 2306 	strd	r2, r3, [r1, #24]
  cmd_vel_msg.angular.y = 0.0;
 8001afa:	4937      	ldr	r1, [pc, #220]	@ (8001bd8 <uros_create_entities+0x248>)
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	f04f 0300 	mov.w	r3, #0
 8001b04:	e9c1 2308 	strd	r2, r3, [r1, #32]
  cmd_vel_msg.angular.z = 0.0;
 8001b08:	4933      	ldr	r1, [pc, #204]	@ (8001bd8 <uros_create_entities+0x248>)
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	f04f 0300 	mov.w	r3, #0
 8001b12:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

  rclc_subscription_init_default(                                               // Initialize subscriber for arm command
 8001b16:	f00e fbd5 	bl	80102c4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	4b2f      	ldr	r3, [pc, #188]	@ (8001bdc <uros_create_entities+0x24c>)
 8001b1e:	4924      	ldr	r1, [pc, #144]	@ (8001bb0 <uros_create_entities+0x220>)
 8001b20:	482f      	ldr	r0, [pc, #188]	@ (8001be0 <uros_create_entities+0x250>)
 8001b22:	f00c fbbb 	bl	800e29c <rclc_subscription_init_default>
    &cmd_arm_sub,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
    "robot/cmd_arm");
  cmd_arm_msg.data = -1;
 8001b26:	4b2f      	ldr	r3, [pc, #188]	@ (8001be4 <uros_create_entities+0x254>)
 8001b28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b2c:	601a      	str	r2, [r3, #0]


  rclc_timer_init_default(&pose_pub_timer, &support, RCL_MS_TO_NS(50), pose_pub_timer_cb);
 8001b2e:	4b2e      	ldr	r3, [pc, #184]	@ (8001be8 <uros_create_entities+0x258>)
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	a315      	add	r3, pc, #84	@ (adr r3, 8001b88 <uros_create_entities+0x1f8>)
 8001b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b38:	491a      	ldr	r1, [pc, #104]	@ (8001ba4 <uros_create_entities+0x214>)
 8001b3a:	482c      	ldr	r0, [pc, #176]	@ (8001bec <uros_create_entities+0x25c>)
 8001b3c:	f00c fbe2 	bl	800e304 <rclc_timer_init_default>

  
  rclc_executor_init(&executor, &support.context, 3, &allocator); // Create executor (1 timer + 2 subscriptions)
 8001b40:	4b16      	ldr	r3, [pc, #88]	@ (8001b9c <uros_create_entities+0x20c>)
 8001b42:	2203      	movs	r2, #3
 8001b44:	4917      	ldr	r1, [pc, #92]	@ (8001ba4 <uros_create_entities+0x214>)
 8001b46:	482a      	ldr	r0, [pc, #168]	@ (8001bf0 <uros_create_entities+0x260>)
 8001b48:	f00b ffb2 	bl	800dab0 <rclc_executor_init>

  rclc_executor_add_subscription(&executor, &cmd_vel_sub, &cmd_vel_msg, &cmd_vel_sub_cb, ON_NEW_DATA); // Add subscriber to executor
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	4b28      	ldr	r3, [pc, #160]	@ (8001bf4 <uros_create_entities+0x264>)
 8001b52:	4a21      	ldr	r2, [pc, #132]	@ (8001bd8 <uros_create_entities+0x248>)
 8001b54:	491f      	ldr	r1, [pc, #124]	@ (8001bd4 <uros_create_entities+0x244>)
 8001b56:	4826      	ldr	r0, [pc, #152]	@ (8001bf0 <uros_create_entities+0x260>)
 8001b58:	f00c f84e 	bl	800dbf8 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &cmd_arm_sub, &cmd_arm_msg, &cmd_arm_sub_cb, ON_NEW_DATA); // Add arm subscriber to executor
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	4b25      	ldr	r3, [pc, #148]	@ (8001bf8 <uros_create_entities+0x268>)
 8001b62:	4a20      	ldr	r2, [pc, #128]	@ (8001be4 <uros_create_entities+0x254>)
 8001b64:	491e      	ldr	r1, [pc, #120]	@ (8001be0 <uros_create_entities+0x250>)
 8001b66:	4822      	ldr	r0, [pc, #136]	@ (8001bf0 <uros_create_entities+0x260>)
 8001b68:	f00c f846 	bl	800dbf8 <rclc_executor_add_subscription>
  rclc_executor_add_timer(&executor, &pose_pub_timer); // Add timer to executor
 8001b6c:	491f      	ldr	r1, [pc, #124]	@ (8001bec <uros_create_entities+0x25c>)
 8001b6e:	4820      	ldr	r0, [pc, #128]	@ (8001bf0 <uros_create_entities+0x260>)
 8001b70:	f00c f876 	bl	800dc60 <rclc_executor_add_timer>
}
 8001b74:	bf00      	nop
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b7c:	f3af 8000 	nop.w
 8001b80:	00000000 	.word	0x00000000
 8001b84:	4054c000 	.word	0x4054c000
 8001b88:	02faf080 	.word	0x02faf080
 8001b8c:	00000000 	.word	0x00000000
 8001b90:	20000d5c 	.word	0x20000d5c
 8001b94:	20000d60 	.word	0x20000d60
 8001b98:	20000d64 	.word	0x20000d64
 8001b9c:	20000d9c 	.word	0x20000d9c
 8001ba0:	20000db8 	.word	0x20000db8
 8001ba4:	20000d68 	.word	0x20000d68
 8001ba8:	0801a9b0 	.word	0x0801a9b0
 8001bac:	0801a9b4 	.word	0x0801a9b4
 8001bb0:	20000db0 	.word	0x20000db0
 8001bb4:	0801a9c4 	.word	0x0801a9c4
 8001bb8:	20000a40 	.word	0x20000a40
 8001bbc:	20000a48 	.word	0x20000a48
 8001bc0:	40834000 	.word	0x40834000
 8001bc4:	0801a9d0 	.word	0x0801a9d0
 8001bc8:	20000d48 	.word	0x20000d48
 8001bcc:	20000d4c 	.word	0x20000d4c
 8001bd0:	0801a9e4 	.word	0x0801a9e4
 8001bd4:	20000d10 	.word	0x20000d10
 8001bd8:	20000d18 	.word	0x20000d18
 8001bdc:	0801a9f4 	.word	0x0801a9f4
 8001be0:	20000d50 	.word	0x20000d50
 8001be4:	20000d54 	.word	0x20000d54
 8001be8:	08001c89 	.word	0x08001c89
 8001bec:	20000d58 	.word	0x20000d58
 8001bf0:	20000dc0 	.word	0x20000dc0
 8001bf4:	08001c75 	.word	0x08001c75
 8001bf8:	08001cc5 	.word	0x08001cc5

08001bfc <uros_destroy_entities>:
void uros_destroy_entities(void) {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
  rmw_context_t* rmw_context = rcl_context_get_rmw_context(&support.context);
 8001c02:	4814      	ldr	r0, [pc, #80]	@ (8001c54 <uros_destroy_entities+0x58>)
 8001c04:	f00a fb60 	bl	800c2c8 <rcl_context_get_rmw_context>
 8001c08:	6078      	str	r0, [r7, #4]
  (void) rmw_uros_set_context_entity_destroy_session_timeout(rmw_context, 0);
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f00d ffa9 	bl	800fb64 <rmw_uros_set_context_entity_destroy_session_timeout>

  // Destroy publisher
  rcl_publisher_fini(&pose_pub, &node);
 8001c12:	4911      	ldr	r1, [pc, #68]	@ (8001c58 <uros_destroy_entities+0x5c>)
 8001c14:	4811      	ldr	r0, [pc, #68]	@ (8001c5c <uros_destroy_entities+0x60>)
 8001c16:	f00a ff49 	bl	800caac <rcl_publisher_fini>
  rcl_publisher_fini(&arm_pub, &node);
 8001c1a:	490f      	ldr	r1, [pc, #60]	@ (8001c58 <uros_destroy_entities+0x5c>)
 8001c1c:	4810      	ldr	r0, [pc, #64]	@ (8001c60 <uros_destroy_entities+0x64>)
 8001c1e:	f00a ff45 	bl	800caac <rcl_publisher_fini>

  // Destroy subscriber
  rcl_subscription_fini(&cmd_vel_sub, &node);
 8001c22:	490d      	ldr	r1, [pc, #52]	@ (8001c58 <uros_destroy_entities+0x5c>)
 8001c24:	480f      	ldr	r0, [pc, #60]	@ (8001c64 <uros_destroy_entities+0x68>)
 8001c26:	f00b f895 	bl	800cd54 <rcl_subscription_fini>
  rcl_subscription_fini(&cmd_arm_sub, &node);
 8001c2a:	490b      	ldr	r1, [pc, #44]	@ (8001c58 <uros_destroy_entities+0x5c>)
 8001c2c:	480e      	ldr	r0, [pc, #56]	@ (8001c68 <uros_destroy_entities+0x6c>)
 8001c2e:	f00b f891 	bl	800cd54 <rcl_subscription_fini>

  rcl_timer_fini(&pose_pub_timer);
 8001c32:	480e      	ldr	r0, [pc, #56]	@ (8001c6c <uros_destroy_entities+0x70>)
 8001c34:	f00b fac2 	bl	800d1bc <rcl_timer_fini>

  // Destroy executor
  rclc_executor_fini(&executor);
 8001c38:	480d      	ldr	r0, [pc, #52]	@ (8001c70 <uros_destroy_entities+0x74>)
 8001c3a:	f00b ffa9 	bl	800db90 <rclc_executor_fini>

  // Destroy node
  rcl_node_fini(&node);
 8001c3e:	4806      	ldr	r0, [pc, #24]	@ (8001c58 <uros_destroy_entities+0x5c>)
 8001c40:	f00a fe12 	bl	800c868 <rcl_node_fini>
  rclc_support_fini(&support);
 8001c44:	4803      	ldr	r0, [pc, #12]	@ (8001c54 <uros_destroy_entities+0x58>)
 8001c46:	f00c fa8f 	bl	800e168 <rclc_support_fini>
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000d68 	.word	0x20000d68
 8001c58:	20000db0 	.word	0x20000db0
 8001c5c:	20000a40 	.word	0x20000a40
 8001c60:	20000d48 	.word	0x20000d48
 8001c64:	20000d10 	.word	0x20000d10
 8001c68:	20000d50 	.word	0x20000d50
 8001c6c:	20000d58 	.word	0x20000d58
 8001c70:	20000dc0 	.word	0x20000dc0

08001c74 <cmd_vel_sub_cb>:

void cmd_vel_sub_cb(const void* msgin) {
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
//
////	  rcl_publish(&pose_pub, &pose_msg, NULL);
//  }
//
//  last_cmd_vel_time = current_time;
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <pose_pub_timer_cb>:

void pose_pub_timer_cb(rcl_timer_t * timer, int64_t last_call_time) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	e9c7 2300 	strd	r2, r3, [r7]
	rcl_publish(&arm_pub, &arm_msg, NULL);
 8001c94:	2200      	movs	r2, #0
 8001c96:	4908      	ldr	r1, [pc, #32]	@ (8001cb8 <pose_pub_timer_cb+0x30>)
 8001c98:	4808      	ldr	r0, [pc, #32]	@ (8001cbc <pose_pub_timer_cb+0x34>)
 8001c9a:	f00a ff61 	bl	800cb60 <rcl_publish>
	if(arm_msg.data == cmd_arm_msg.data) arm_pub_cb(0);
 8001c9e:	4b06      	ldr	r3, [pc, #24]	@ (8001cb8 <pose_pub_timer_cb+0x30>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	4b07      	ldr	r3, [pc, #28]	@ (8001cc0 <pose_pub_timer_cb+0x38>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d102      	bne.n	8001cb0 <pose_pub_timer_cb+0x28>
 8001caa:	2000      	movs	r0, #0
 8001cac:	f000 f82c 	bl	8001d08 <arm_pub_cb>
  // 可选：添加调试信息（如果需要的话）
  // printf("Published pose: x=%.2f, y=%.2f, yaw=%.2f, ret=%d\n", 
  //        pose_msg.pose.pose.position.x, 
  //        pose_msg.pose.pose.position.y, 
  //        current_yaw, ret);
}
 8001cb0:	bf00      	nop
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000d4c 	.word	0x20000d4c
 8001cbc:	20000d48 	.word	0x20000d48
 8001cc0:	20000d54 	.word	0x20000d54

08001cc4 <cmd_arm_sub_cb>:

void cmd_arm_sub_cb(const void* msgin) {
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  const std_msgs__msg__Int32 * msg = (const std_msgs__msg__Int32 *)msgin;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	60fb      	str	r3, [r7, #12]
  cmd_arm_msg = *msg;
 8001cd0:	4a0a      	ldr	r2, [pc, #40]	@ (8001cfc <cmd_arm_sub_cb+0x38>)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6013      	str	r3, [r2, #0]
  code = cmd_arm_msg.data;
 8001cd8:	4b08      	ldr	r3, [pc, #32]	@ (8001cfc <cmd_arm_sub_cb+0x38>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a08      	ldr	r2, [pc, #32]	@ (8001d00 <cmd_arm_sub_cb+0x3c>)
 8001cde:	6013      	str	r3, [r2, #0]
//  arm_msg = cmd_arm_msg;
  std_msgs__msg__Int32 reply_msg;
  reply_msg.data = 100;
 8001ce0:	2364      	movs	r3, #100	@ 0x64
 8001ce2:	60bb      	str	r3, [r7, #8]
  rcl_publish(&arm_pub, &reply_msg, NULL);
 8001ce4:	f107 0308 	add.w	r3, r7, #8
 8001ce8:	2200      	movs	r2, #0
 8001cea:	4619      	mov	r1, r3
 8001cec:	4805      	ldr	r0, [pc, #20]	@ (8001d04 <cmd_arm_sub_cb+0x40>)
 8001cee:	f00a ff37 	bl	800cb60 <rcl_publish>
}
 8001cf2:	bf00      	nop
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000d54 	.word	0x20000d54
 8001d00:	20000014 	.word	0x20000014
 8001d04:	20000d48 	.word	0x20000d48

08001d08 <arm_pub_cb>:

void arm_pub_cb(int complete){
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
	if(complete) arm_msg = cmd_arm_msg;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d004      	beq.n	8001d20 <arm_pub_cb+0x18>
 8001d16:	4a07      	ldr	r2, [pc, #28]	@ (8001d34 <arm_pub_cb+0x2c>)
 8001d18:	4b07      	ldr	r3, [pc, #28]	@ (8001d38 <arm_pub_cb+0x30>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6013      	str	r3, [r2, #0]
	else arm_msg.data = 0;
}
 8001d1e:	e002      	b.n	8001d26 <arm_pub_cb+0x1e>
	else arm_msg.data = 0;
 8001d20:	4b04      	ldr	r3, [pc, #16]	@ (8001d34 <arm_pub_cb+0x2c>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	20000d4c 	.word	0x20000d4c
 8001d38:	20000d54 	.word	0x20000d54

08001d3c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08a      	sub	sp, #40	@ 0x28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001d48:	f007 f850 	bl	8008dec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001d4c:	4b5a      	ldr	r3, [pc, #360]	@ (8001eb8 <pvPortMallocMicroROS+0x17c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001d54:	f000 f986 	bl	8002064 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001d58:	4b58      	ldr	r3, [pc, #352]	@ (8001ebc <pvPortMallocMicroROS+0x180>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f040 8090 	bne.w	8001e86 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d01e      	beq.n	8001daa <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8001d6c:	2208      	movs	r2, #8
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d015      	beq.n	8001daa <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f023 0307 	bic.w	r3, r3, #7
 8001d84:	3308      	adds	r3, #8
 8001d86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00b      	beq.n	8001daa <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d96:	f383 8811 	msr	BASEPRI, r3
 8001d9a:	f3bf 8f6f 	isb	sy
 8001d9e:	f3bf 8f4f 	dsb	sy
 8001da2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001da4:	bf00      	nop
 8001da6:	bf00      	nop
 8001da8:	e7fd      	b.n	8001da6 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d06a      	beq.n	8001e86 <pvPortMallocMicroROS+0x14a>
 8001db0:	4b43      	ldr	r3, [pc, #268]	@ (8001ec0 <pvPortMallocMicroROS+0x184>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d865      	bhi.n	8001e86 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001dba:	4b42      	ldr	r3, [pc, #264]	@ (8001ec4 <pvPortMallocMicroROS+0x188>)
 8001dbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001dbe:	4b41      	ldr	r3, [pc, #260]	@ (8001ec4 <pvPortMallocMicroROS+0x188>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001dc4:	e004      	b.n	8001dd0 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d903      	bls.n	8001de2 <pvPortMallocMicroROS+0xa6>
 8001dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f1      	bne.n	8001dc6 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001de2:	4b35      	ldr	r3, [pc, #212]	@ (8001eb8 <pvPortMallocMicroROS+0x17c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d04c      	beq.n	8001e86 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001dec:	6a3b      	ldr	r3, [r7, #32]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2208      	movs	r2, #8
 8001df2:	4413      	add	r3, r2
 8001df4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	6a3b      	ldr	r3, [r7, #32]
 8001dfc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	1ad2      	subs	r2, r2, r3
 8001e06:	2308      	movs	r3, #8
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d920      	bls.n	8001e50 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001e0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4413      	add	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d00b      	beq.n	8001e38 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8001e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e24:	f383 8811 	msr	BASEPRI, r3
 8001e28:	f3bf 8f6f 	isb	sy
 8001e2c:	f3bf 8f4f 	dsb	sy
 8001e30:	613b      	str	r3, [r7, #16]
}
 8001e32:	bf00      	nop
 8001e34:	bf00      	nop
 8001e36:	e7fd      	b.n	8001e34 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	1ad2      	subs	r2, r2, r3
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001e4a:	69b8      	ldr	r0, [r7, #24]
 8001e4c:	f000 f96c 	bl	8002128 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001e50:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec0 <pvPortMallocMicroROS+0x184>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	4a19      	ldr	r2, [pc, #100]	@ (8001ec0 <pvPortMallocMicroROS+0x184>)
 8001e5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001e5e:	4b18      	ldr	r3, [pc, #96]	@ (8001ec0 <pvPortMallocMicroROS+0x184>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	4b19      	ldr	r3, [pc, #100]	@ (8001ec8 <pvPortMallocMicroROS+0x18c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d203      	bcs.n	8001e72 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001e6a:	4b15      	ldr	r3, [pc, #84]	@ (8001ec0 <pvPortMallocMicroROS+0x184>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a16      	ldr	r2, [pc, #88]	@ (8001ec8 <pvPortMallocMicroROS+0x18c>)
 8001e70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	4b11      	ldr	r3, [pc, #68]	@ (8001ebc <pvPortMallocMicroROS+0x180>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001e86:	f006 ffbf 	bl	8008e08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00b      	beq.n	8001eac <pvPortMallocMicroROS+0x170>
	__asm volatile
 8001e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e98:	f383 8811 	msr	BASEPRI, r3
 8001e9c:	f3bf 8f6f 	isb	sy
 8001ea0:	f3bf 8f4f 	dsb	sy
 8001ea4:	60fb      	str	r3, [r7, #12]
}
 8001ea6:	bf00      	nop
 8001ea8:	bf00      	nop
 8001eaa:	e7fd      	b.n	8001ea8 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8001eac:	69fb      	ldr	r3, [r7, #28]
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3728      	adds	r7, #40	@ 0x28
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20004a58 	.word	0x20004a58
 8001ebc:	20004a64 	.word	0x20004a64
 8001ec0:	20004a5c 	.word	0x20004a5c
 8001ec4:	20004a50 	.word	0x20004a50
 8001ec8:	20004a60 	.word	0x20004a60

08001ecc <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d04a      	beq.n	8001f74 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001ede:	2308      	movs	r3, #8
 8001ee0:	425b      	negs	r3, r3
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	4b22      	ldr	r3, [pc, #136]	@ (8001f7c <vPortFreeMicroROS+0xb0>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10b      	bne.n	8001f12 <vPortFreeMicroROS+0x46>
	__asm volatile
 8001efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001efe:	f383 8811 	msr	BASEPRI, r3
 8001f02:	f3bf 8f6f 	isb	sy
 8001f06:	f3bf 8f4f 	dsb	sy
 8001f0a:	60fb      	str	r3, [r7, #12]
}
 8001f0c:	bf00      	nop
 8001f0e:	bf00      	nop
 8001f10:	e7fd      	b.n	8001f0e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00b      	beq.n	8001f32 <vPortFreeMicroROS+0x66>
	__asm volatile
 8001f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f1e:	f383 8811 	msr	BASEPRI, r3
 8001f22:	f3bf 8f6f 	isb	sy
 8001f26:	f3bf 8f4f 	dsb	sy
 8001f2a:	60bb      	str	r3, [r7, #8]
}
 8001f2c:	bf00      	nop
 8001f2e:	bf00      	nop
 8001f30:	e7fd      	b.n	8001f2e <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	4b11      	ldr	r3, [pc, #68]	@ (8001f7c <vPortFreeMicroROS+0xb0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d019      	beq.n	8001f74 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d115      	bne.n	8001f74 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f7c <vPortFreeMicroROS+0xb0>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	401a      	ands	r2, r3
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001f58:	f006 ff48 	bl	8008dec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	4b07      	ldr	r3, [pc, #28]	@ (8001f80 <vPortFreeMicroROS+0xb4>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4413      	add	r3, r2
 8001f66:	4a06      	ldr	r2, [pc, #24]	@ (8001f80 <vPortFreeMicroROS+0xb4>)
 8001f68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001f6a:	6938      	ldr	r0, [r7, #16]
 8001f6c:	f000 f8dc 	bl	8002128 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001f70:	f006 ff4a 	bl	8008e08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001f74:	bf00      	nop
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20004a64 	.word	0x20004a64
 8001f80:	20004a5c 	.word	0x20004a5c

08001f84 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001f84:	b480      	push	{r7}
 8001f86:	b087      	sub	sp, #28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001f90:	2308      	movs	r3, #8
 8001f92:	425b      	negs	r3, r3
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	4413      	add	r3, r2
 8001f98:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	4b06      	ldr	r3, [pc, #24]	@ (8001fbc <getBlockSize+0x38>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	4013      	ands	r3, r2
 8001faa:	60fb      	str	r3, [r7, #12]

	return count;
 8001fac:	68fb      	ldr	r3, [r7, #12]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	371c      	adds	r7, #28
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	20004a64 	.word	0x20004a64

08001fc0 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001fca:	f006 ff0f 	bl	8008dec <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001fce:	6838      	ldr	r0, [r7, #0]
 8001fd0:	f7ff feb4 	bl	8001d3c <pvPortMallocMicroROS>
 8001fd4:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d017      	beq.n	800200c <pvPortReallocMicroROS+0x4c>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d014      	beq.n	800200c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff ffce 	bl	8001f84 <getBlockSize>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2208      	movs	r2, #8
 8001fec:	1a9b      	subs	r3, r3, r2
 8001fee:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d201      	bcs.n	8001ffc <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	68b8      	ldr	r0, [r7, #8]
 8002002:	f017 fe76 	bl	8019cf2 <memcpy>

		vPortFreeMicroROS(pv);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff ff60 	bl	8001ecc <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 800200c:	f006 fefc 	bl	8008e08 <xTaskResumeAll>

	return newmem;
 8002010:	68bb      	ldr	r3, [r7, #8]
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b086      	sub	sp, #24
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
 8002022:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8002024:	f006 fee2 	bl	8008dec <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	fb02 f303 	mul.w	r3, r2, r3
 8002030:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8002032:	6978      	ldr	r0, [r7, #20]
 8002034:	f7ff fe82 	bl	8001d3c <pvPortMallocMicroROS>
 8002038:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	613b      	str	r3, [r7, #16]

  	while(count--)
 800203e:	e004      	b.n	800204a <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1c5a      	adds	r2, r3, #1
 8002044:	613a      	str	r2, [r7, #16]
 8002046:	2200      	movs	r2, #0
 8002048:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	1e5a      	subs	r2, r3, #1
 800204e:	617a      	str	r2, [r7, #20]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1f5      	bne.n	8002040 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8002054:	f006 fed8 	bl	8008e08 <xTaskResumeAll>
  	return mem;
 8002058:	68fb      	ldr	r3, [r7, #12]
}
 800205a:	4618      	mov	r0, r3
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800206a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800206e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002070:	4b27      	ldr	r3, [pc, #156]	@ (8002110 <prvHeapInit+0xac>)
 8002072:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00c      	beq.n	8002098 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	3307      	adds	r3, #7
 8002082:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f023 0307 	bic.w	r3, r3, #7
 800208a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800208c:	68ba      	ldr	r2, [r7, #8]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	4a1f      	ldr	r2, [pc, #124]	@ (8002110 <prvHeapInit+0xac>)
 8002094:	4413      	add	r3, r2
 8002096:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800209c:	4a1d      	ldr	r2, [pc, #116]	@ (8002114 <prvHeapInit+0xb0>)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80020a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002114 <prvHeapInit+0xb0>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	4413      	add	r3, r2
 80020ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80020b0:	2208      	movs	r2, #8
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	1a9b      	subs	r3, r3, r2
 80020b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f023 0307 	bic.w	r3, r3, #7
 80020be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4a15      	ldr	r2, [pc, #84]	@ (8002118 <prvHeapInit+0xb4>)
 80020c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80020c6:	4b14      	ldr	r3, [pc, #80]	@ (8002118 <prvHeapInit+0xb4>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2200      	movs	r2, #0
 80020cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80020ce:	4b12      	ldr	r3, [pc, #72]	@ (8002118 <prvHeapInit+0xb4>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	1ad2      	subs	r2, r2, r3
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80020e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002118 <prvHeapInit+0xb4>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	4a0a      	ldr	r2, [pc, #40]	@ (800211c <prvHeapInit+0xb8>)
 80020f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	4a09      	ldr	r2, [pc, #36]	@ (8002120 <prvHeapInit+0xbc>)
 80020fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80020fc:	4b09      	ldr	r3, [pc, #36]	@ (8002124 <prvHeapInit+0xc0>)
 80020fe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002102:	601a      	str	r2, [r3, #0]
}
 8002104:	bf00      	nop
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	20000e50 	.word	0x20000e50
 8002114:	20004a50 	.word	0x20004a50
 8002118:	20004a58 	.word	0x20004a58
 800211c:	20004a60 	.word	0x20004a60
 8002120:	20004a5c 	.word	0x20004a5c
 8002124:	20004a64 	.word	0x20004a64

08002128 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002130:	4b28      	ldr	r3, [pc, #160]	@ (80021d4 <prvInsertBlockIntoFreeList+0xac>)
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	e002      	b.n	800213c <prvInsertBlockIntoFreeList+0x14>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	429a      	cmp	r2, r3
 8002144:	d8f7      	bhi.n	8002136 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	4413      	add	r3, r2
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	429a      	cmp	r2, r3
 8002156:	d108      	bne.n	800216a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	441a      	add	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	441a      	add	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	429a      	cmp	r2, r3
 800217c:	d118      	bne.n	80021b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	4b15      	ldr	r3, [pc, #84]	@ (80021d8 <prvInsertBlockIntoFreeList+0xb0>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	429a      	cmp	r2, r3
 8002188:	d00d      	beq.n	80021a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	441a      	add	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	e008      	b.n	80021b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80021a6:	4b0c      	ldr	r3, [pc, #48]	@ (80021d8 <prvInsertBlockIntoFreeList+0xb0>)
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	e003      	b.n	80021b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d002      	beq.n	80021c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80021c6:	bf00      	nop
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	20004a50 	.word	0x20004a50
 80021d8:	20004a58 	.word	0x20004a58

080021dc <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80021ea:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80021ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80021f0:	4904      	ldr	r1, [pc, #16]	@ (8002204 <cubemx_transport_open+0x28>)
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f004 fa5e 	bl	80066b4 <HAL_UART_Receive_DMA>
    return true;
 80021f8:	2301      	movs	r3, #1
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20004a68 	.word	0x20004a68

08002208 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002216:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f004 fa70 	bl	80066fe <HAL_UART_DMAStop>
    return true;
 800221e:	2301      	movs	r3, #1
}
 8002220:	4618      	mov	r0, r3
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
 8002234:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800223c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b20      	cmp	r3, #32
 8002248:	d11c      	bne.n	8002284 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	b29b      	uxth	r3, r3
 800224e:	461a      	mov	r2, r3
 8002250:	68b9      	ldr	r1, [r7, #8]
 8002252:	6978      	ldr	r0, [r7, #20]
 8002254:	f004 f9b2 	bl	80065bc <HAL_UART_Transmit_DMA>
 8002258:	4603      	mov	r3, r0
 800225a:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800225c:	e002      	b.n	8002264 <cubemx_transport_write+0x3c>
            osDelay(1);
 800225e:	2001      	movs	r0, #1
 8002260:	f005 fd62 	bl	8007d28 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002264:	7cfb      	ldrb	r3, [r7, #19]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d105      	bne.n	8002276 <cubemx_transport_write+0x4e>
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b20      	cmp	r3, #32
 8002274:	d1f3      	bne.n	800225e <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8002276:	7cfb      	ldrb	r3, [r7, #19]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <cubemx_transport_write+0x58>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	e002      	b.n	8002286 <cubemx_transport_write+0x5e>
 8002280:	2300      	movs	r3, #0
 8002282:	e000      	b.n	8002286 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8002284:	2300      	movs	r3, #0
    }
}
 8002286:	4618      	mov	r0, r3
 8002288:	3718      	adds	r7, #24
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
	...

08002290 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8002290:	b580      	push	{r7, lr}
 8002292:	b088      	sub	sp, #32
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
 800229c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80022a4:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022aa:	b672      	cpsid	i
}
 80022ac:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80022ba:	4a1c      	ldr	r2, [pc, #112]	@ (800232c <cubemx_transport_read+0x9c>)
 80022bc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80022be:	b662      	cpsie	i
}
 80022c0:	bf00      	nop
        __enable_irq();
        ms_used++;
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	3301      	adds	r3, #1
 80022c6:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80022c8:	2001      	movs	r0, #1
 80022ca:	f005 fd2d 	bl	8007d28 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80022ce:	4b18      	ldr	r3, [pc, #96]	@ (8002330 <cubemx_transport_read+0xa0>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	4b16      	ldr	r3, [pc, #88]	@ (800232c <cubemx_transport_read+0x9c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d103      	bne.n	80022e2 <cubemx_transport_read+0x52>
 80022da:	69fa      	ldr	r2, [r7, #28]
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	dbe3      	blt.n	80022aa <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80022e2:	2300      	movs	r3, #0
 80022e4:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80022e6:	e011      	b.n	800230c <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80022e8:	4b11      	ldr	r3, [pc, #68]	@ (8002330 <cubemx_transport_read+0xa0>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	68b9      	ldr	r1, [r7, #8]
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	440b      	add	r3, r1
 80022f2:	4910      	ldr	r1, [pc, #64]	@ (8002334 <cubemx_transport_read+0xa4>)
 80022f4:	5c8a      	ldrb	r2, [r1, r2]
 80022f6:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80022f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002330 <cubemx_transport_read+0xa0>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	3301      	adds	r3, #1
 80022fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002302:	4a0b      	ldr	r2, [pc, #44]	@ (8002330 <cubemx_transport_read+0xa0>)
 8002304:	6013      	str	r3, [r2, #0]
        wrote++;
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	3301      	adds	r3, #1
 800230a:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800230c:	4b08      	ldr	r3, [pc, #32]	@ (8002330 <cubemx_transport_read+0xa0>)
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	4b06      	ldr	r3, [pc, #24]	@ (800232c <cubemx_transport_read+0x9c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	429a      	cmp	r2, r3
 8002316:	d003      	beq.n	8002320 <cubemx_transport_read+0x90>
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	429a      	cmp	r2, r3
 800231e:	d3e3      	bcc.n	80022e8 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8002320:	69bb      	ldr	r3, [r7, #24]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3720      	adds	r7, #32
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	2000526c 	.word	0x2000526c
 8002330:	20005268 	.word	0x20005268
 8002334:	20004a68 	.word	0x20004a68

08002338 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800233c:	f001 f912 	bl	8003564 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002340:	f000 f826 	bl	8002390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002344:	f000 fa9a 	bl	800287c <MX_GPIO_Init>
  MX_DMA_Init();
 8002348:	f000 fa70 	bl	800282c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800234c:	f000 fa1a 	bl	8002784 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8002350:	f000 f8be 	bl	80024d0 <MX_TIM1_Init>
  MX_TIM5_Init();
 8002354:	f000 f962 	bl	800261c <MX_TIM5_Init>
  MX_USART3_UART_Init();
 8002358:	f000 fa3e 	bl	80027d8 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800235c:	f000 f88a 	bl	8002474 <MX_I2C1_Init>
  MX_TIM4_Init();
 8002360:	f000 f90e 	bl	8002580 <MX_TIM4_Init>
  MX_TIM12_Init();
 8002364:	f000 f9be 	bl	80026e4 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002368:	f005 fc02 	bl	8007b70 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800236c:	4a05      	ldr	r2, [pc, #20]	@ (8002384 <main+0x4c>)
 800236e:	2100      	movs	r1, #0
 8002370:	4805      	ldr	r0, [pc, #20]	@ (8002388 <main+0x50>)
 8002372:	f005 fc47 	bl	8007c04 <osThreadNew>
 8002376:	4603      	mov	r3, r0
 8002378:	4a04      	ldr	r2, [pc, #16]	@ (800238c <main+0x54>)
 800237a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800237c:	f005 fc1c 	bl	8007bb8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002380:	bf00      	nop
 8002382:	e7fd      	b.n	8002380 <main+0x48>
 8002384:	0801aa48 	.word	0x0801aa48
 8002388:	080034b5 	.word	0x080034b5
 800238c:	20005534 	.word	0x20005534

08002390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b094      	sub	sp, #80	@ 0x50
 8002394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002396:	f107 031c 	add.w	r3, r7, #28
 800239a:	2234      	movs	r2, #52	@ 0x34
 800239c:	2100      	movs	r1, #0
 800239e:	4618      	mov	r0, r3
 80023a0:	f017 fb80 	bl	8019aa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023a4:	f107 0308 	add.w	r3, r7, #8
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	60da      	str	r2, [r3, #12]
 80023b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023b4:	2300      	movs	r3, #0
 80023b6:	607b      	str	r3, [r7, #4]
 80023b8:	4b2c      	ldr	r3, [pc, #176]	@ (800246c <SystemClock_Config+0xdc>)
 80023ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023bc:	4a2b      	ldr	r2, [pc, #172]	@ (800246c <SystemClock_Config+0xdc>)
 80023be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80023c4:	4b29      	ldr	r3, [pc, #164]	@ (800246c <SystemClock_Config+0xdc>)
 80023c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023cc:	607b      	str	r3, [r7, #4]
 80023ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023d0:	2300      	movs	r3, #0
 80023d2:	603b      	str	r3, [r7, #0]
 80023d4:	4b26      	ldr	r3, [pc, #152]	@ (8002470 <SystemClock_Config+0xe0>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a25      	ldr	r2, [pc, #148]	@ (8002470 <SystemClock_Config+0xe0>)
 80023da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023de:	6013      	str	r3, [r2, #0]
 80023e0:	4b23      	ldr	r3, [pc, #140]	@ (8002470 <SystemClock_Config+0xe0>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80023e8:	603b      	str	r3, [r7, #0]
 80023ea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023ec:	2302      	movs	r3, #2
 80023ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023f0:	2301      	movs	r3, #1
 80023f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023f4:	2310      	movs	r3, #16
 80023f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023f8:	2302      	movs	r3, #2
 80023fa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80023fc:	2300      	movs	r3, #0
 80023fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002400:	2308      	movs	r3, #8
 8002402:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002404:	23b4      	movs	r3, #180	@ 0xb4
 8002406:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002408:	2302      	movs	r3, #2
 800240a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800240c:	2302      	movs	r3, #2
 800240e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002410:	2302      	movs	r3, #2
 8002412:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002414:	f107 031c 	add.w	r3, r7, #28
 8002418:	4618      	mov	r0, r3
 800241a:	f002 fc01 	bl	8004c20 <HAL_RCC_OscConfig>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002424:	f000 faae 	bl	8002984 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002428:	f002 f8b4 	bl	8004594 <HAL_PWREx_EnableOverDrive>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002432:	f000 faa7 	bl	8002984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002436:	230f      	movs	r3, #15
 8002438:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800243a:	2302      	movs	r3, #2
 800243c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800243e:	2300      	movs	r3, #0
 8002440:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002442:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002446:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002448:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800244c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800244e:	f107 0308 	add.w	r3, r7, #8
 8002452:	2105      	movs	r1, #5
 8002454:	4618      	mov	r0, r3
 8002456:	f002 f8ed 	bl	8004634 <HAL_RCC_ClockConfig>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002460:	f000 fa90 	bl	8002984 <Error_Handler>
  }
}
 8002464:	bf00      	nop
 8002466:	3750      	adds	r7, #80	@ 0x50
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40023800 	.word	0x40023800
 8002470:	40007000 	.word	0x40007000

08002474 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002478:	4b12      	ldr	r3, [pc, #72]	@ (80024c4 <MX_I2C1_Init+0x50>)
 800247a:	4a13      	ldr	r2, [pc, #76]	@ (80024c8 <MX_I2C1_Init+0x54>)
 800247c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800247e:	4b11      	ldr	r3, [pc, #68]	@ (80024c4 <MX_I2C1_Init+0x50>)
 8002480:	4a12      	ldr	r2, [pc, #72]	@ (80024cc <MX_I2C1_Init+0x58>)
 8002482:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002484:	4b0f      	ldr	r3, [pc, #60]	@ (80024c4 <MX_I2C1_Init+0x50>)
 8002486:	2200      	movs	r2, #0
 8002488:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800248a:	4b0e      	ldr	r3, [pc, #56]	@ (80024c4 <MX_I2C1_Init+0x50>)
 800248c:	2200      	movs	r2, #0
 800248e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002490:	4b0c      	ldr	r3, [pc, #48]	@ (80024c4 <MX_I2C1_Init+0x50>)
 8002492:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002496:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002498:	4b0a      	ldr	r3, [pc, #40]	@ (80024c4 <MX_I2C1_Init+0x50>)
 800249a:	2200      	movs	r2, #0
 800249c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800249e:	4b09      	ldr	r3, [pc, #36]	@ (80024c4 <MX_I2C1_Init+0x50>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024a4:	4b07      	ldr	r3, [pc, #28]	@ (80024c4 <MX_I2C1_Init+0x50>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024aa:	4b06      	ldr	r3, [pc, #24]	@ (80024c4 <MX_I2C1_Init+0x50>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024b0:	4804      	ldr	r0, [pc, #16]	@ (80024c4 <MX_I2C1_Init+0x50>)
 80024b2:	f001 ff2b 	bl	800430c <HAL_I2C_Init>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80024bc:	f000 fa62 	bl	8002984 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80024c0:	bf00      	nop
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	20005270 	.word	0x20005270
 80024c8:	40005400 	.word	0x40005400
 80024cc:	000186a0 	.word	0x000186a0

080024d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08c      	sub	sp, #48	@ 0x30
 80024d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80024d6:	f107 030c 	add.w	r3, r7, #12
 80024da:	2224      	movs	r2, #36	@ 0x24
 80024dc:	2100      	movs	r1, #0
 80024de:	4618      	mov	r0, r3
 80024e0:	f017 fae0 	bl	8019aa4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024e4:	1d3b      	adds	r3, r7, #4
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80024ec:	4b22      	ldr	r3, [pc, #136]	@ (8002578 <MX_TIM1_Init+0xa8>)
 80024ee:	4a23      	ldr	r2, [pc, #140]	@ (800257c <MX_TIM1_Init+0xac>)
 80024f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80024f2:	4b21      	ldr	r3, [pc, #132]	@ (8002578 <MX_TIM1_Init+0xa8>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024f8:	4b1f      	ldr	r3, [pc, #124]	@ (8002578 <MX_TIM1_Init+0xa8>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80024fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002578 <MX_TIM1_Init+0xa8>)
 8002500:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002504:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002506:	4b1c      	ldr	r3, [pc, #112]	@ (8002578 <MX_TIM1_Init+0xa8>)
 8002508:	2200      	movs	r2, #0
 800250a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800250c:	4b1a      	ldr	r3, [pc, #104]	@ (8002578 <MX_TIM1_Init+0xa8>)
 800250e:	2200      	movs	r2, #0
 8002510:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002512:	4b19      	ldr	r3, [pc, #100]	@ (8002578 <MX_TIM1_Init+0xa8>)
 8002514:	2200      	movs	r2, #0
 8002516:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002518:	2303      	movs	r3, #3
 800251a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800251c:	2300      	movs	r3, #0
 800251e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002520:	2301      	movs	r3, #1
 8002522:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002524:	2300      	movs	r3, #0
 8002526:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002528:	2300      	movs	r3, #0
 800252a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800252c:	2300      	movs	r3, #0
 800252e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002530:	2301      	movs	r3, #1
 8002532:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002534:	2300      	movs	r3, #0
 8002536:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002538:	2300      	movs	r3, #0
 800253a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800253c:	f107 030c 	add.w	r3, r7, #12
 8002540:	4619      	mov	r1, r3
 8002542:	480d      	ldr	r0, [pc, #52]	@ (8002578 <MX_TIM1_Init+0xa8>)
 8002544:	f002 ffe2 	bl	800550c <HAL_TIM_Encoder_Init>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800254e:	f000 fa19 	bl	8002984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002552:	2300      	movs	r3, #0
 8002554:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002556:	2300      	movs	r3, #0
 8002558:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800255a:	1d3b      	adds	r3, r7, #4
 800255c:	4619      	mov	r1, r3
 800255e:	4806      	ldr	r0, [pc, #24]	@ (8002578 <MX_TIM1_Init+0xa8>)
 8002560:	f003 fec0 	bl	80062e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800256a:	f000 fa0b 	bl	8002984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800256e:	bf00      	nop
 8002570:	3730      	adds	r7, #48	@ 0x30
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	200052c4 	.word	0x200052c4
 800257c:	40010000 	.word	0x40010000

08002580 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002586:	f107 0308 	add.w	r3, r7, #8
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	605a      	str	r2, [r3, #4]
 8002590:	609a      	str	r2, [r3, #8]
 8002592:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002594:	463b      	mov	r3, r7
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800259c:	4b1d      	ldr	r3, [pc, #116]	@ (8002614 <MX_TIM4_Init+0x94>)
 800259e:	4a1e      	ldr	r2, [pc, #120]	@ (8002618 <MX_TIM4_Init+0x98>)
 80025a0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 90-1;
 80025a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002614 <MX_TIM4_Init+0x94>)
 80025a4:	2259      	movs	r2, #89	@ 0x59
 80025a6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002614 <MX_TIM4_Init+0x94>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 80025ae:	4b19      	ldr	r3, [pc, #100]	@ (8002614 <MX_TIM4_Init+0x94>)
 80025b0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80025b4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025b6:	4b17      	ldr	r3, [pc, #92]	@ (8002614 <MX_TIM4_Init+0x94>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025bc:	4b15      	ldr	r3, [pc, #84]	@ (8002614 <MX_TIM4_Init+0x94>)
 80025be:	2200      	movs	r2, #0
 80025c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80025c2:	4814      	ldr	r0, [pc, #80]	@ (8002614 <MX_TIM4_Init+0x94>)
 80025c4:	f002 fdca 	bl	800515c <HAL_TIM_Base_Init>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80025ce:	f000 f9d9 	bl	8002984 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80025d8:	f107 0308 	add.w	r3, r7, #8
 80025dc:	4619      	mov	r1, r3
 80025de:	480d      	ldr	r0, [pc, #52]	@ (8002614 <MX_TIM4_Init+0x94>)
 80025e0:	f003 fa7a 	bl	8005ad8 <HAL_TIM_ConfigClockSource>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80025ea:	f000 f9cb 	bl	8002984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025ee:	2300      	movs	r3, #0
 80025f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025f2:	2300      	movs	r3, #0
 80025f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80025f6:	463b      	mov	r3, r7
 80025f8:	4619      	mov	r1, r3
 80025fa:	4806      	ldr	r0, [pc, #24]	@ (8002614 <MX_TIM4_Init+0x94>)
 80025fc:	f003 fe72 	bl	80062e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002606:	f000 f9bd 	bl	8002984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800260a:	bf00      	nop
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	2000530c 	.word	0x2000530c
 8002618:	40000800 	.word	0x40000800

0800261c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b08a      	sub	sp, #40	@ 0x28
 8002620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002622:	f107 0320 	add.w	r3, r7, #32
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800262c:	1d3b      	adds	r3, r7, #4
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	605a      	str	r2, [r3, #4]
 8002634:	609a      	str	r2, [r3, #8]
 8002636:	60da      	str	r2, [r3, #12]
 8002638:	611a      	str	r2, [r3, #16]
 800263a:	615a      	str	r2, [r3, #20]
 800263c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800263e:	4b27      	ldr	r3, [pc, #156]	@ (80026dc <MX_TIM5_Init+0xc0>)
 8002640:	4a27      	ldr	r2, [pc, #156]	@ (80026e0 <MX_TIM5_Init+0xc4>)
 8002642:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 90-1;
 8002644:	4b25      	ldr	r3, [pc, #148]	@ (80026dc <MX_TIM5_Init+0xc0>)
 8002646:	2259      	movs	r2, #89	@ 0x59
 8002648:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800264a:	4b24      	ldr	r3, [pc, #144]	@ (80026dc <MX_TIM5_Init+0xc0>)
 800264c:	2200      	movs	r2, #0
 800264e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000-1;
 8002650:	4b22      	ldr	r3, [pc, #136]	@ (80026dc <MX_TIM5_Init+0xc0>)
 8002652:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002656:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002658:	4b20      	ldr	r3, [pc, #128]	@ (80026dc <MX_TIM5_Init+0xc0>)
 800265a:	2200      	movs	r2, #0
 800265c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800265e:	4b1f      	ldr	r3, [pc, #124]	@ (80026dc <MX_TIM5_Init+0xc0>)
 8002660:	2200      	movs	r2, #0
 8002662:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002664:	481d      	ldr	r0, [pc, #116]	@ (80026dc <MX_TIM5_Init+0xc0>)
 8002666:	f002 fe39 	bl	80052dc <HAL_TIM_PWM_Init>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002670:	f000 f988 	bl	8002984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002674:	2300      	movs	r3, #0
 8002676:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002678:	2300      	movs	r3, #0
 800267a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800267c:	f107 0320 	add.w	r3, r7, #32
 8002680:	4619      	mov	r1, r3
 8002682:	4816      	ldr	r0, [pc, #88]	@ (80026dc <MX_TIM5_Init+0xc0>)
 8002684:	f003 fe2e 	bl	80062e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800268e:	f000 f979 	bl	8002984 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002692:	2360      	movs	r3, #96	@ 0x60
 8002694:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002696:	2300      	movs	r3, #0
 8002698:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800269a:	2300      	movs	r3, #0
 800269c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800269e:	2300      	movs	r3, #0
 80026a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026a2:	1d3b      	adds	r3, r7, #4
 80026a4:	2200      	movs	r2, #0
 80026a6:	4619      	mov	r1, r3
 80026a8:	480c      	ldr	r0, [pc, #48]	@ (80026dc <MX_TIM5_Init+0xc0>)
 80026aa:	f003 f953 	bl	8005954 <HAL_TIM_PWM_ConfigChannel>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80026b4:	f000 f966 	bl	8002984 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026b8:	1d3b      	adds	r3, r7, #4
 80026ba:	2204      	movs	r2, #4
 80026bc:	4619      	mov	r1, r3
 80026be:	4807      	ldr	r0, [pc, #28]	@ (80026dc <MX_TIM5_Init+0xc0>)
 80026c0:	f003 f948 	bl	8005954 <HAL_TIM_PWM_ConfigChannel>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80026ca:	f000 f95b 	bl	8002984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80026ce:	4803      	ldr	r0, [pc, #12]	@ (80026dc <MX_TIM5_Init+0xc0>)
 80026d0:	f000 fbde 	bl	8002e90 <HAL_TIM_MspPostInit>

}
 80026d4:	bf00      	nop
 80026d6:	3728      	adds	r7, #40	@ 0x28
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	20005354 	.word	0x20005354
 80026e0:	40000c00 	.word	0x40000c00

080026e4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b088      	sub	sp, #32
 80026e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80026ea:	1d3b      	adds	r3, r7, #4
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	605a      	str	r2, [r3, #4]
 80026f2:	609a      	str	r2, [r3, #8]
 80026f4:	60da      	str	r2, [r3, #12]
 80026f6:	611a      	str	r2, [r3, #16]
 80026f8:	615a      	str	r2, [r3, #20]
 80026fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80026fc:	4b1f      	ldr	r3, [pc, #124]	@ (800277c <MX_TIM12_Init+0x98>)
 80026fe:	4a20      	ldr	r2, [pc, #128]	@ (8002780 <MX_TIM12_Init+0x9c>)
 8002700:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 90-1;
 8002702:	4b1e      	ldr	r3, [pc, #120]	@ (800277c <MX_TIM12_Init+0x98>)
 8002704:	2259      	movs	r2, #89	@ 0x59
 8002706:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002708:	4b1c      	ldr	r3, [pc, #112]	@ (800277c <MX_TIM12_Init+0x98>)
 800270a:	2200      	movs	r2, #0
 800270c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 800270e:	4b1b      	ldr	r3, [pc, #108]	@ (800277c <MX_TIM12_Init+0x98>)
 8002710:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002714:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002716:	4b19      	ldr	r3, [pc, #100]	@ (800277c <MX_TIM12_Init+0x98>)
 8002718:	2200      	movs	r2, #0
 800271a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800271c:	4b17      	ldr	r3, [pc, #92]	@ (800277c <MX_TIM12_Init+0x98>)
 800271e:	2200      	movs	r2, #0
 8002720:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002722:	4816      	ldr	r0, [pc, #88]	@ (800277c <MX_TIM12_Init+0x98>)
 8002724:	f002 fdda 	bl	80052dc <HAL_TIM_PWM_Init>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800272e:	f000 f929 	bl	8002984 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002732:	2360      	movs	r3, #96	@ 0x60
 8002734:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002736:	2300      	movs	r3, #0
 8002738:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800273a:	2300      	movs	r3, #0
 800273c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800273e:	2300      	movs	r3, #0
 8002740:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002742:	1d3b      	adds	r3, r7, #4
 8002744:	2200      	movs	r2, #0
 8002746:	4619      	mov	r1, r3
 8002748:	480c      	ldr	r0, [pc, #48]	@ (800277c <MX_TIM12_Init+0x98>)
 800274a:	f003 f903 	bl	8005954 <HAL_TIM_PWM_ConfigChannel>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002754:	f000 f916 	bl	8002984 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002758:	1d3b      	adds	r3, r7, #4
 800275a:	2204      	movs	r2, #4
 800275c:	4619      	mov	r1, r3
 800275e:	4807      	ldr	r0, [pc, #28]	@ (800277c <MX_TIM12_Init+0x98>)
 8002760:	f003 f8f8 	bl	8005954 <HAL_TIM_PWM_ConfigChannel>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 800276a:	f000 f90b 	bl	8002984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800276e:	4803      	ldr	r0, [pc, #12]	@ (800277c <MX_TIM12_Init+0x98>)
 8002770:	f000 fb8e 	bl	8002e90 <HAL_TIM_MspPostInit>

}
 8002774:	bf00      	nop
 8002776:	3720      	adds	r7, #32
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	2000539c 	.word	0x2000539c
 8002780:	40001800 	.word	0x40001800

08002784 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002788:	4b11      	ldr	r3, [pc, #68]	@ (80027d0 <MX_USART2_UART_Init+0x4c>)
 800278a:	4a12      	ldr	r2, [pc, #72]	@ (80027d4 <MX_USART2_UART_Init+0x50>)
 800278c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800278e:	4b10      	ldr	r3, [pc, #64]	@ (80027d0 <MX_USART2_UART_Init+0x4c>)
 8002790:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002794:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002796:	4b0e      	ldr	r3, [pc, #56]	@ (80027d0 <MX_USART2_UART_Init+0x4c>)
 8002798:	2200      	movs	r2, #0
 800279a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800279c:	4b0c      	ldr	r3, [pc, #48]	@ (80027d0 <MX_USART2_UART_Init+0x4c>)
 800279e:	2200      	movs	r2, #0
 80027a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027a2:	4b0b      	ldr	r3, [pc, #44]	@ (80027d0 <MX_USART2_UART_Init+0x4c>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027a8:	4b09      	ldr	r3, [pc, #36]	@ (80027d0 <MX_USART2_UART_Init+0x4c>)
 80027aa:	220c      	movs	r2, #12
 80027ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ae:	4b08      	ldr	r3, [pc, #32]	@ (80027d0 <MX_USART2_UART_Init+0x4c>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027b4:	4b06      	ldr	r3, [pc, #24]	@ (80027d0 <MX_USART2_UART_Init+0x4c>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027ba:	4805      	ldr	r0, [pc, #20]	@ (80027d0 <MX_USART2_UART_Init+0x4c>)
 80027bc:	f003 fe22 	bl	8006404 <HAL_UART_Init>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80027c6:	f000 f8dd 	bl	8002984 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027ca:	bf00      	nop
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	200053e4 	.word	0x200053e4
 80027d4:	40004400 	.word	0x40004400

080027d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80027dc:	4b10      	ldr	r3, [pc, #64]	@ (8002820 <MX_USART3_UART_Init+0x48>)
 80027de:	4a11      	ldr	r2, [pc, #68]	@ (8002824 <MX_USART3_UART_Init+0x4c>)
 80027e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 500000;
 80027e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002820 <MX_USART3_UART_Init+0x48>)
 80027e4:	4a10      	ldr	r2, [pc, #64]	@ (8002828 <MX_USART3_UART_Init+0x50>)
 80027e6:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80027e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002820 <MX_USART3_UART_Init+0x48>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80027ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002820 <MX_USART3_UART_Init+0x48>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80027f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002820 <MX_USART3_UART_Init+0x48>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80027fa:	4b09      	ldr	r3, [pc, #36]	@ (8002820 <MX_USART3_UART_Init+0x48>)
 80027fc:	220c      	movs	r2, #12
 80027fe:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002800:	4b07      	ldr	r3, [pc, #28]	@ (8002820 <MX_USART3_UART_Init+0x48>)
 8002802:	2200      	movs	r2, #0
 8002804:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002806:	4b06      	ldr	r3, [pc, #24]	@ (8002820 <MX_USART3_UART_Init+0x48>)
 8002808:	2200      	movs	r2, #0
 800280a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800280c:	4804      	ldr	r0, [pc, #16]	@ (8002820 <MX_USART3_UART_Init+0x48>)
 800280e:	f003 fdf9 	bl	8006404 <HAL_UART_Init>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8002818:	f000 f8b4 	bl	8002984 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800281c:	bf00      	nop
 800281e:	bd80      	pop	{r7, pc}
 8002820:	2000542c 	.word	0x2000542c
 8002824:	40004800 	.word	0x40004800
 8002828:	0007a120 	.word	0x0007a120

0800282c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	607b      	str	r3, [r7, #4]
 8002836:	4b10      	ldr	r3, [pc, #64]	@ (8002878 <MX_DMA_Init+0x4c>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283a:	4a0f      	ldr	r2, [pc, #60]	@ (8002878 <MX_DMA_Init+0x4c>)
 800283c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002840:	6313      	str	r3, [r2, #48]	@ 0x30
 8002842:	4b0d      	ldr	r3, [pc, #52]	@ (8002878 <MX_DMA_Init+0x4c>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002846:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800284a:	607b      	str	r3, [r7, #4]
 800284c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800284e:	2200      	movs	r2, #0
 8002850:	2105      	movs	r1, #5
 8002852:	2010      	movs	r0, #16
 8002854:	f000 ff80 	bl	8003758 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002858:	2010      	movs	r0, #16
 800285a:	f000 ff99 	bl	8003790 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800285e:	2200      	movs	r2, #0
 8002860:	2105      	movs	r1, #5
 8002862:	2011      	movs	r0, #17
 8002864:	f000 ff78 	bl	8003758 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002868:	2011      	movs	r0, #17
 800286a:	f000 ff91 	bl	8003790 <HAL_NVIC_EnableIRQ>

}
 800286e:	bf00      	nop
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40023800 	.word	0x40023800

0800287c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b08a      	sub	sp, #40	@ 0x28
 8002880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002882:	f107 0314 	add.w	r3, r7, #20
 8002886:	2200      	movs	r2, #0
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	605a      	str	r2, [r3, #4]
 800288c:	609a      	str	r2, [r3, #8]
 800288e:	60da      	str	r2, [r3, #12]
 8002890:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	613b      	str	r3, [r7, #16]
 8002896:	4b37      	ldr	r3, [pc, #220]	@ (8002974 <MX_GPIO_Init+0xf8>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289a:	4a36      	ldr	r2, [pc, #216]	@ (8002974 <MX_GPIO_Init+0xf8>)
 800289c:	f043 0301 	orr.w	r3, r3, #1
 80028a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028a2:	4b34      	ldr	r3, [pc, #208]	@ (8002974 <MX_GPIO_Init+0xf8>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	613b      	str	r3, [r7, #16]
 80028ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	4b30      	ldr	r3, [pc, #192]	@ (8002974 <MX_GPIO_Init+0xf8>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b6:	4a2f      	ldr	r2, [pc, #188]	@ (8002974 <MX_GPIO_Init+0xf8>)
 80028b8:	f043 0304 	orr.w	r3, r3, #4
 80028bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028be:	4b2d      	ldr	r3, [pc, #180]	@ (8002974 <MX_GPIO_Init+0xf8>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c2:	f003 0304 	and.w	r3, r3, #4
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	60bb      	str	r3, [r7, #8]
 80028ce:	4b29      	ldr	r3, [pc, #164]	@ (8002974 <MX_GPIO_Init+0xf8>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d2:	4a28      	ldr	r2, [pc, #160]	@ (8002974 <MX_GPIO_Init+0xf8>)
 80028d4:	f043 0302 	orr.w	r3, r3, #2
 80028d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028da:	4b26      	ldr	r3, [pc, #152]	@ (8002974 <MX_GPIO_Init+0xf8>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	60bb      	str	r3, [r7, #8]
 80028e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	607b      	str	r3, [r7, #4]
 80028ea:	4b22      	ldr	r3, [pc, #136]	@ (8002974 <MX_GPIO_Init+0xf8>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ee:	4a21      	ldr	r2, [pc, #132]	@ (8002974 <MX_GPIO_Init+0xf8>)
 80028f0:	f043 0308 	orr.w	r3, r3, #8
 80028f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002974 <MX_GPIO_Init+0xf8>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	607b      	str	r3, [r7, #4]
 8002900:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8002902:	2200      	movs	r2, #0
 8002904:	2110      	movs	r1, #16
 8002906:	481c      	ldr	r0, [pc, #112]	@ (8002978 <MX_GPIO_Init+0xfc>)
 8002908:	f001 fce6 	bl	80042d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800290c:	2200      	movs	r2, #0
 800290e:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8002912:	481a      	ldr	r0, [pc, #104]	@ (800297c <MX_GPIO_Init+0x100>)
 8002914:	f001 fce0 	bl	80042d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002918:	2310      	movs	r3, #16
 800291a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800291c:	2301      	movs	r3, #1
 800291e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002920:	2300      	movs	r3, #0
 8002922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002924:	2300      	movs	r3, #0
 8002926:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002928:	f107 0314 	add.w	r3, r7, #20
 800292c:	4619      	mov	r1, r3
 800292e:	4812      	ldr	r0, [pc, #72]	@ (8002978 <MX_GPIO_Init+0xfc>)
 8002930:	f001 fb3e 	bl	8003fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002934:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800293a:	2301      	movs	r3, #1
 800293c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293e:	2300      	movs	r3, #0
 8002940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002942:	2300      	movs	r3, #0
 8002944:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002946:	f107 0314 	add.w	r3, r7, #20
 800294a:	4619      	mov	r1, r3
 800294c:	480b      	ldr	r0, [pc, #44]	@ (800297c <MX_GPIO_Init+0x100>)
 800294e:	f001 fb2f 	bl	8003fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002952:	2304      	movs	r3, #4
 8002954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002956:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800295a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295c:	2300      	movs	r3, #0
 800295e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002960:	f107 0314 	add.w	r3, r7, #20
 8002964:	4619      	mov	r1, r3
 8002966:	4806      	ldr	r0, [pc, #24]	@ (8002980 <MX_GPIO_Init+0x104>)
 8002968:	f001 fb22 	bl	8003fb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800296c:	bf00      	nop
 800296e:	3728      	adds	r7, #40	@ 0x28
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40023800 	.word	0x40023800
 8002978:	40020800 	.word	0x40020800
 800297c:	40020400 	.word	0x40020400
 8002980:	40020c00 	.word	0x40020c00

08002984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002988:	b672      	cpsid	i
}
 800298a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800298c:	bf00      	nop
 800298e:	e7fd      	b.n	800298c <Error_Handler+0x8>

08002990 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800299a:	4b0c      	ldr	r3, [pc, #48]	@ (80029cc <microros_allocate+0x3c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	461a      	mov	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4413      	add	r3, r2
 80029a4:	461a      	mov	r2, r3
 80029a6:	4b09      	ldr	r3, [pc, #36]	@ (80029cc <microros_allocate+0x3c>)
 80029a8:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80029aa:	4b09      	ldr	r3, [pc, #36]	@ (80029d0 <microros_allocate+0x40>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	461a      	mov	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4413      	add	r3, r2
 80029b4:	461a      	mov	r2, r3
 80029b6:	4b06      	ldr	r3, [pc, #24]	@ (80029d0 <microros_allocate+0x40>)
 80029b8:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7ff f9be 	bl	8001d3c <pvPortMallocMicroROS>
 80029c0:	4603      	mov	r3, r0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	200084c0 	.word	0x200084c0
 80029d0:	200084c4 	.word	0x200084c4

080029d4 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00c      	beq.n	80029fe <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7ff facd 	bl	8001f84 <getBlockSize>
 80029ea:	4603      	mov	r3, r0
 80029ec:	4a06      	ldr	r2, [pc, #24]	@ (8002a08 <microros_deallocate+0x34>)
 80029ee:	6812      	ldr	r2, [r2, #0]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	461a      	mov	r2, r3
 80029f4:	4b04      	ldr	r3, [pc, #16]	@ (8002a08 <microros_deallocate+0x34>)
 80029f6:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f7ff fa67 	bl	8001ecc <vPortFreeMicroROS>
  }
}
 80029fe:	bf00      	nop
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	200084c4 	.word	0x200084c4

08002a0c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002a18:	4b15      	ldr	r3, [pc, #84]	@ (8002a70 <microros_reallocate+0x64>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	4413      	add	r3, r2
 8002a22:	461a      	mov	r2, r3
 8002a24:	4b12      	ldr	r3, [pc, #72]	@ (8002a70 <microros_reallocate+0x64>)
 8002a26:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002a28:	4b12      	ldr	r3, [pc, #72]	@ (8002a74 <microros_reallocate+0x68>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	4413      	add	r3, r2
 8002a32:	461a      	mov	r2, r3
 8002a34:	4b0f      	ldr	r3, [pc, #60]	@ (8002a74 <microros_reallocate+0x68>)
 8002a36:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d104      	bne.n	8002a48 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8002a3e:	68b8      	ldr	r0, [r7, #8]
 8002a40:	f7ff f97c 	bl	8001d3c <pvPortMallocMicroROS>
 8002a44:	4603      	mov	r3, r0
 8002a46:	e00e      	b.n	8002a66 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f7ff fa9b 	bl	8001f84 <getBlockSize>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	4a08      	ldr	r2, [pc, #32]	@ (8002a74 <microros_reallocate+0x68>)
 8002a52:	6812      	ldr	r2, [r2, #0]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	461a      	mov	r2, r3
 8002a58:	4b06      	ldr	r3, [pc, #24]	@ (8002a74 <microros_reallocate+0x68>)
 8002a5a:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002a5c:	68b9      	ldr	r1, [r7, #8]
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f7ff faae 	bl	8001fc0 <pvPortReallocMicroROS>
 8002a64:	4603      	mov	r3, r0
  }
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	200084c0 	.word	0x200084c0
 8002a74:	200084c4 	.word	0x200084c4

08002a78 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	fb02 f303 	mul.w	r3, r2, r3
 8002a8c:	4a0c      	ldr	r2, [pc, #48]	@ (8002ac0 <microros_zero_allocate+0x48>)
 8002a8e:	6812      	ldr	r2, [r2, #0]
 8002a90:	4413      	add	r3, r2
 8002a92:	461a      	mov	r2, r3
 8002a94:	4b0a      	ldr	r3, [pc, #40]	@ (8002ac0 <microros_zero_allocate+0x48>)
 8002a96:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	fb02 f303 	mul.w	r3, r2, r3
 8002aa0:	4a08      	ldr	r2, [pc, #32]	@ (8002ac4 <microros_zero_allocate+0x4c>)
 8002aa2:	6812      	ldr	r2, [r2, #0]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	4b06      	ldr	r3, [pc, #24]	@ (8002ac4 <microros_zero_allocate+0x4c>)
 8002aaa:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002aac:	68b9      	ldr	r1, [r7, #8]
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f7ff fab3 	bl	800201a <pvPortCallocMicroROS>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	200084c0 	.word	0x200084c0
 8002ac4:	200084c4 	.word	0x200084c4

08002ac8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002ac8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002acc:	b086      	sub	sp, #24
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002ad4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002ada:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ade:	a320      	add	r3, pc, #128	@ (adr r3, 8002b60 <UTILS_NanosecondsToTimespec+0x98>)
 8002ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae4:	f7fe f81a 	bl	8000b1c <__aeabi_ldivmod>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002af2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002af6:	a31a      	add	r3, pc, #104	@ (adr r3, 8002b60 <UTILS_NanosecondsToTimespec+0x98>)
 8002af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002afc:	f7fe f80e 	bl	8000b1c <__aeabi_ldivmod>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	da20      	bge.n	8002b4e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	4a11      	ldr	r2, [pc, #68]	@ (8002b58 <UTILS_NanosecondsToTimespec+0x90>)
 8002b12:	fb82 1203 	smull	r1, r2, r2, r3
 8002b16:	1712      	asrs	r2, r2, #28
 8002b18:	17db      	asrs	r3, r3, #31
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b26:	6979      	ldr	r1, [r7, #20]
 8002b28:	17c8      	asrs	r0, r1, #31
 8002b2a:	460c      	mov	r4, r1
 8002b2c:	4605      	mov	r5, r0
 8002b2e:	ebb2 0804 	subs.w	r8, r2, r4
 8002b32:	eb63 0905 	sbc.w	r9, r3, r5
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	4906      	ldr	r1, [pc, #24]	@ (8002b5c <UTILS_NanosecondsToTimespec+0x94>)
 8002b44:	fb01 f303 	mul.w	r3, r1, r3
 8002b48:	441a      	add	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	609a      	str	r2, [r3, #8]
    }
}
 8002b4e:	bf00      	nop
 8002b50:	3718      	adds	r7, #24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b58:	44b82fa1 	.word	0x44b82fa1
 8002b5c:	3b9aca00 	.word	0x3b9aca00
 8002b60:	3b9aca00 	.word	0x3b9aca00
 8002b64:	00000000 	.word	0x00000000

08002b68 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002b68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b6c:	b08e      	sub	sp, #56	@ 0x38
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6278      	str	r0, [r7, #36]	@ 0x24
 8002b72:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8002b74:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002b78:	2300      	movs	r3, #0
 8002b7a:	6013      	str	r3, [r2, #0]
 8002b7c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002b7e:	f04f 0200 	mov.w	r2, #0
 8002b82:	f04f 0300 	mov.w	r3, #0
 8002b86:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002b8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f006 fbbe 	bl	8009310 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b96:	17da      	asrs	r2, r3, #31
 8002b98:	61bb      	str	r3, [r7, #24]
 8002b9a:	61fa      	str	r2, [r7, #28]
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	f04f 0300 	mov.w	r3, #0
 8002ba4:	69b9      	ldr	r1, [r7, #24]
 8002ba6:	000b      	movs	r3, r1
 8002ba8:	2200      	movs	r2, #0
 8002baa:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	461c      	mov	r4, r3
 8002bb4:	4615      	mov	r5, r2
 8002bb6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002bba:	1911      	adds	r1, r2, r4
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	416b      	adcs	r3, r5
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002bc6:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002bca:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002bce:	4602      	mov	r2, r0
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	f04f 0400 	mov.w	r4, #0
 8002bd6:	f04f 0500 	mov.w	r5, #0
 8002bda:	015d      	lsls	r5, r3, #5
 8002bdc:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002be0:	0154      	lsls	r4, r2, #5
 8002be2:	4622      	mov	r2, r4
 8002be4:	462b      	mov	r3, r5
 8002be6:	ebb2 0800 	subs.w	r8, r2, r0
 8002bea:	eb63 0901 	sbc.w	r9, r3, r1
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	f04f 0300 	mov.w	r3, #0
 8002bf6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002bfa:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002bfe:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002c02:	4690      	mov	r8, r2
 8002c04:	4699      	mov	r9, r3
 8002c06:	eb18 0a00 	adds.w	sl, r8, r0
 8002c0a:	eb49 0b01 	adc.w	fp, r9, r1
 8002c0e:	f04f 0200 	mov.w	r2, #0
 8002c12:	f04f 0300 	mov.w	r3, #0
 8002c16:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c1a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c1e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c22:	ebb2 040a 	subs.w	r4, r2, sl
 8002c26:	603c      	str	r4, [r7, #0]
 8002c28:	eb63 030b 	sbc.w	r3, r3, fp
 8002c2c:	607b      	str	r3, [r7, #4]
 8002c2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c32:	4623      	mov	r3, r4
 8002c34:	181b      	adds	r3, r3, r0
 8002c36:	613b      	str	r3, [r7, #16]
 8002c38:	462b      	mov	r3, r5
 8002c3a:	eb41 0303 	adc.w	r3, r1, r3
 8002c3e:	617b      	str	r3, [r7, #20]
 8002c40:	6a3a      	ldr	r2, [r7, #32]
 8002c42:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c46:	f7ff ff3f 	bl	8002ac8 <UTILS_NanosecondsToTimespec>

    return 0;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3738      	adds	r7, #56	@ 0x38
 8002c50:	46bd      	mov	sp, r7
 8002c52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002c58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	607b      	str	r3, [r7, #4]
 8002c62:	4b12      	ldr	r3, [pc, #72]	@ (8002cac <HAL_MspInit+0x54>)
 8002c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c66:	4a11      	ldr	r2, [pc, #68]	@ (8002cac <HAL_MspInit+0x54>)
 8002c68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8002cac <HAL_MspInit+0x54>)
 8002c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c76:	607b      	str	r3, [r7, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	603b      	str	r3, [r7, #0]
 8002c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002cac <HAL_MspInit+0x54>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c82:	4a0a      	ldr	r2, [pc, #40]	@ (8002cac <HAL_MspInit+0x54>)
 8002c84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c88:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c8a:	4b08      	ldr	r3, [pc, #32]	@ (8002cac <HAL_MspInit+0x54>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c92:	603b      	str	r3, [r7, #0]
 8002c94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c96:	2200      	movs	r2, #0
 8002c98:	210f      	movs	r1, #15
 8002c9a:	f06f 0001 	mvn.w	r0, #1
 8002c9e:	f000 fd5b 	bl	8003758 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40023800 	.word	0x40023800

08002cb0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08a      	sub	sp, #40	@ 0x28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb8:	f107 0314 	add.w	r3, r7, #20
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	605a      	str	r2, [r3, #4]
 8002cc2:	609a      	str	r2, [r3, #8]
 8002cc4:	60da      	str	r2, [r3, #12]
 8002cc6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a19      	ldr	r2, [pc, #100]	@ (8002d34 <HAL_I2C_MspInit+0x84>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d12b      	bne.n	8002d2a <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	613b      	str	r3, [r7, #16]
 8002cd6:	4b18      	ldr	r3, [pc, #96]	@ (8002d38 <HAL_I2C_MspInit+0x88>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cda:	4a17      	ldr	r2, [pc, #92]	@ (8002d38 <HAL_I2C_MspInit+0x88>)
 8002cdc:	f043 0302 	orr.w	r3, r3, #2
 8002ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ce2:	4b15      	ldr	r3, [pc, #84]	@ (8002d38 <HAL_I2C_MspInit+0x88>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	613b      	str	r3, [r7, #16]
 8002cec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002cee:	23c0      	movs	r3, #192	@ 0xc0
 8002cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cf2:	2312      	movs	r3, #18
 8002cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cfe:	2304      	movs	r3, #4
 8002d00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d02:	f107 0314 	add.w	r3, r7, #20
 8002d06:	4619      	mov	r1, r3
 8002d08:	480c      	ldr	r0, [pc, #48]	@ (8002d3c <HAL_I2C_MspInit+0x8c>)
 8002d0a:	f001 f951 	bl	8003fb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	4b09      	ldr	r3, [pc, #36]	@ (8002d38 <HAL_I2C_MspInit+0x88>)
 8002d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d16:	4a08      	ldr	r2, [pc, #32]	@ (8002d38 <HAL_I2C_MspInit+0x88>)
 8002d18:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002d1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d1e:	4b06      	ldr	r3, [pc, #24]	@ (8002d38 <HAL_I2C_MspInit+0x88>)
 8002d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002d2a:	bf00      	nop
 8002d2c:	3728      	adds	r7, #40	@ 0x28
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40005400 	.word	0x40005400
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	40020400 	.word	0x40020400

08002d40 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b08a      	sub	sp, #40	@ 0x28
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d48:	f107 0314 	add.w	r3, r7, #20
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	605a      	str	r2, [r3, #4]
 8002d52:	609a      	str	r2, [r3, #8]
 8002d54:	60da      	str	r2, [r3, #12]
 8002d56:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a19      	ldr	r2, [pc, #100]	@ (8002dc4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d12c      	bne.n	8002dbc <HAL_TIM_Encoder_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d62:	2300      	movs	r3, #0
 8002d64:	613b      	str	r3, [r7, #16]
 8002d66:	4b18      	ldr	r3, [pc, #96]	@ (8002dc8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d6a:	4a17      	ldr	r2, [pc, #92]	@ (8002dc8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002d6c:	f043 0301 	orr.w	r3, r3, #1
 8002d70:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d72:	4b15      	ldr	r3, [pc, #84]	@ (8002dc8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	613b      	str	r3, [r7, #16]
 8002d7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d7e:	2300      	movs	r3, #0
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	4b11      	ldr	r3, [pc, #68]	@ (8002dc8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d86:	4a10      	ldr	r2, [pc, #64]	@ (8002dc8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8002dc8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d9a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002d9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da0:	2302      	movs	r3, #2
 8002da2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da4:	2300      	movs	r3, #0
 8002da6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da8:	2300      	movs	r3, #0
 8002daa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002dac:	2301      	movs	r3, #1
 8002dae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db0:	f107 0314 	add.w	r3, r7, #20
 8002db4:	4619      	mov	r1, r3
 8002db6:	4805      	ldr	r0, [pc, #20]	@ (8002dcc <HAL_TIM_Encoder_MspInit+0x8c>)
 8002db8:	f001 f8fa 	bl	8003fb0 <HAL_GPIO_Init>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002dbc:	bf00      	nop
 8002dbe:	3728      	adds	r7, #40	@ 0x28
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40010000 	.word	0x40010000
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	40020000 	.word	0x40020000

08002dd0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a0e      	ldr	r2, [pc, #56]	@ (8002e18 <HAL_TIM_Base_MspInit+0x48>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d115      	bne.n	8002e0e <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002de2:	2300      	movs	r3, #0
 8002de4:	60fb      	str	r3, [r7, #12]
 8002de6:	4b0d      	ldr	r3, [pc, #52]	@ (8002e1c <HAL_TIM_Base_MspInit+0x4c>)
 8002de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dea:	4a0c      	ldr	r2, [pc, #48]	@ (8002e1c <HAL_TIM_Base_MspInit+0x4c>)
 8002dec:	f043 0304 	orr.w	r3, r3, #4
 8002df0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002df2:	4b0a      	ldr	r3, [pc, #40]	@ (8002e1c <HAL_TIM_Base_MspInit+0x4c>)
 8002df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df6:	f003 0304 	and.w	r3, r3, #4
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002dfe:	2200      	movs	r2, #0
 8002e00:	2105      	movs	r1, #5
 8002e02:	201e      	movs	r0, #30
 8002e04:	f000 fca8 	bl	8003758 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002e08:	201e      	movs	r0, #30
 8002e0a:	f000 fcc1 	bl	8003790 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8002e0e:	bf00      	nop
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40000800 	.word	0x40000800
 8002e1c:	40023800 	.word	0x40023800

08002e20 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a15      	ldr	r2, [pc, #84]	@ (8002e84 <HAL_TIM_PWM_MspInit+0x64>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d10e      	bne.n	8002e50 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002e32:	2300      	movs	r3, #0
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	4b14      	ldr	r3, [pc, #80]	@ (8002e88 <HAL_TIM_PWM_MspInit+0x68>)
 8002e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3a:	4a13      	ldr	r2, [pc, #76]	@ (8002e88 <HAL_TIM_PWM_MspInit+0x68>)
 8002e3c:	f043 0308 	orr.w	r3, r3, #8
 8002e40:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e42:	4b11      	ldr	r3, [pc, #68]	@ (8002e88 <HAL_TIM_PWM_MspInit+0x68>)
 8002e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM12_MspInit 1 */

    /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002e4e:	e012      	b.n	8002e76 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM12)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a0d      	ldr	r2, [pc, #52]	@ (8002e8c <HAL_TIM_PWM_MspInit+0x6c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d10d      	bne.n	8002e76 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60bb      	str	r3, [r7, #8]
 8002e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e88 <HAL_TIM_PWM_MspInit+0x68>)
 8002e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e62:	4a09      	ldr	r2, [pc, #36]	@ (8002e88 <HAL_TIM_PWM_MspInit+0x68>)
 8002e64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e68:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e6a:	4b07      	ldr	r3, [pc, #28]	@ (8002e88 <HAL_TIM_PWM_MspInit+0x68>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e72:	60bb      	str	r3, [r7, #8]
 8002e74:	68bb      	ldr	r3, [r7, #8]
}
 8002e76:	bf00      	nop
 8002e78:	3714      	adds	r7, #20
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	40000c00 	.word	0x40000c00
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	40001800 	.word	0x40001800

08002e90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b08a      	sub	sp, #40	@ 0x28
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e98:	f107 0314 	add.w	r3, r7, #20
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	605a      	str	r2, [r3, #4]
 8002ea2:	609a      	str	r2, [r3, #8]
 8002ea4:	60da      	str	r2, [r3, #12]
 8002ea6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a24      	ldr	r2, [pc, #144]	@ (8002f40 <HAL_TIM_MspPostInit+0xb0>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d11e      	bne.n	8002ef0 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM5_MspPostInit 0 */

    /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	613b      	str	r3, [r7, #16]
 8002eb6:	4b23      	ldr	r3, [pc, #140]	@ (8002f44 <HAL_TIM_MspPostInit+0xb4>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eba:	4a22      	ldr	r2, [pc, #136]	@ (8002f44 <HAL_TIM_MspPostInit+0xb4>)
 8002ebc:	f043 0301 	orr.w	r3, r3, #1
 8002ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ec2:	4b20      	ldr	r3, [pc, #128]	@ (8002f44 <HAL_TIM_MspPostInit+0xb4>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	613b      	str	r3, [r7, #16]
 8002ecc:	693b      	ldr	r3, [r7, #16]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eda:	2300      	movs	r3, #0
 8002edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002ede:	2302      	movs	r3, #2
 8002ee0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee2:	f107 0314 	add.w	r3, r7, #20
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4817      	ldr	r0, [pc, #92]	@ (8002f48 <HAL_TIM_MspPostInit+0xb8>)
 8002eea:	f001 f861 	bl	8003fb0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM12_MspPostInit 1 */

    /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002eee:	e023      	b.n	8002f38 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM12)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a15      	ldr	r2, [pc, #84]	@ (8002f4c <HAL_TIM_MspPostInit+0xbc>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d11e      	bne.n	8002f38 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	4b11      	ldr	r3, [pc, #68]	@ (8002f44 <HAL_TIM_MspPostInit+0xb4>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f02:	4a10      	ldr	r2, [pc, #64]	@ (8002f44 <HAL_TIM_MspPostInit+0xb4>)
 8002f04:	f043 0302 	orr.w	r3, r3, #2
 8002f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002f44 <HAL_TIM_MspPostInit+0xb4>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002f16:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f20:	2300      	movs	r3, #0
 8002f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f24:	2300      	movs	r3, #0
 8002f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002f28:	2309      	movs	r3, #9
 8002f2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f2c:	f107 0314 	add.w	r3, r7, #20
 8002f30:	4619      	mov	r1, r3
 8002f32:	4807      	ldr	r0, [pc, #28]	@ (8002f50 <HAL_TIM_MspPostInit+0xc0>)
 8002f34:	f001 f83c 	bl	8003fb0 <HAL_GPIO_Init>
}
 8002f38:	bf00      	nop
 8002f3a:	3728      	adds	r7, #40	@ 0x28
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40000c00 	.word	0x40000c00
 8002f44:	40023800 	.word	0x40023800
 8002f48:	40020000 	.word	0x40020000
 8002f4c:	40001800 	.word	0x40001800
 8002f50:	40020400 	.word	0x40020400

08002f54 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b08c      	sub	sp, #48	@ 0x30
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f5c:	f107 031c 	add.w	r3, r7, #28
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	605a      	str	r2, [r3, #4]
 8002f66:	609a      	str	r2, [r3, #8]
 8002f68:	60da      	str	r2, [r3, #12]
 8002f6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a75      	ldr	r2, [pc, #468]	@ (8003148 <HAL_UART_MspInit+0x1f4>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	f040 8094 	bne.w	80030a0 <HAL_UART_MspInit+0x14c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f78:	2300      	movs	r3, #0
 8002f7a:	61bb      	str	r3, [r7, #24]
 8002f7c:	4b73      	ldr	r3, [pc, #460]	@ (800314c <HAL_UART_MspInit+0x1f8>)
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f80:	4a72      	ldr	r2, [pc, #456]	@ (800314c <HAL_UART_MspInit+0x1f8>)
 8002f82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f86:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f88:	4b70      	ldr	r3, [pc, #448]	@ (800314c <HAL_UART_MspInit+0x1f8>)
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f90:	61bb      	str	r3, [r7, #24]
 8002f92:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f94:	2300      	movs	r3, #0
 8002f96:	617b      	str	r3, [r7, #20]
 8002f98:	4b6c      	ldr	r3, [pc, #432]	@ (800314c <HAL_UART_MspInit+0x1f8>)
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9c:	4a6b      	ldr	r2, [pc, #428]	@ (800314c <HAL_UART_MspInit+0x1f8>)
 8002f9e:	f043 0301 	orr.w	r3, r3, #1
 8002fa2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fa4:	4b69      	ldr	r3, [pc, #420]	@ (800314c <HAL_UART_MspInit+0x1f8>)
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	617b      	str	r3, [r7, #20]
 8002fae:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002fb0:	230c      	movs	r3, #12
 8002fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002fc0:	2307      	movs	r3, #7
 8002fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fc4:	f107 031c 	add.w	r3, r7, #28
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4861      	ldr	r0, [pc, #388]	@ (8003150 <HAL_UART_MspInit+0x1fc>)
 8002fcc:	f000 fff0 	bl	8003fb0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002fd0:	4b60      	ldr	r3, [pc, #384]	@ (8003154 <HAL_UART_MspInit+0x200>)
 8002fd2:	4a61      	ldr	r2, [pc, #388]	@ (8003158 <HAL_UART_MspInit+0x204>)
 8002fd4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002fd6:	4b5f      	ldr	r3, [pc, #380]	@ (8003154 <HAL_UART_MspInit+0x200>)
 8002fd8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002fdc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fde:	4b5d      	ldr	r3, [pc, #372]	@ (8003154 <HAL_UART_MspInit+0x200>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fe4:	4b5b      	ldr	r3, [pc, #364]	@ (8003154 <HAL_UART_MspInit+0x200>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002fea:	4b5a      	ldr	r3, [pc, #360]	@ (8003154 <HAL_UART_MspInit+0x200>)
 8002fec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ff0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ff2:	4b58      	ldr	r3, [pc, #352]	@ (8003154 <HAL_UART_MspInit+0x200>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ff8:	4b56      	ldr	r3, [pc, #344]	@ (8003154 <HAL_UART_MspInit+0x200>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002ffe:	4b55      	ldr	r3, [pc, #340]	@ (8003154 <HAL_UART_MspInit+0x200>)
 8003000:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003004:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003006:	4b53      	ldr	r3, [pc, #332]	@ (8003154 <HAL_UART_MspInit+0x200>)
 8003008:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800300c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800300e:	4b51      	ldr	r3, [pc, #324]	@ (8003154 <HAL_UART_MspInit+0x200>)
 8003010:	2200      	movs	r2, #0
 8003012:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003014:	484f      	ldr	r0, [pc, #316]	@ (8003154 <HAL_UART_MspInit+0x200>)
 8003016:	f000 fbc9 	bl	80037ac <HAL_DMA_Init>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8003020:	f7ff fcb0 	bl	8002984 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a4b      	ldr	r2, [pc, #300]	@ (8003154 <HAL_UART_MspInit+0x200>)
 8003028:	63da      	str	r2, [r3, #60]	@ 0x3c
 800302a:	4a4a      	ldr	r2, [pc, #296]	@ (8003154 <HAL_UART_MspInit+0x200>)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003030:	4b4a      	ldr	r3, [pc, #296]	@ (800315c <HAL_UART_MspInit+0x208>)
 8003032:	4a4b      	ldr	r2, [pc, #300]	@ (8003160 <HAL_UART_MspInit+0x20c>)
 8003034:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003036:	4b49      	ldr	r3, [pc, #292]	@ (800315c <HAL_UART_MspInit+0x208>)
 8003038:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800303c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800303e:	4b47      	ldr	r3, [pc, #284]	@ (800315c <HAL_UART_MspInit+0x208>)
 8003040:	2240      	movs	r2, #64	@ 0x40
 8003042:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003044:	4b45      	ldr	r3, [pc, #276]	@ (800315c <HAL_UART_MspInit+0x208>)
 8003046:	2200      	movs	r2, #0
 8003048:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800304a:	4b44      	ldr	r3, [pc, #272]	@ (800315c <HAL_UART_MspInit+0x208>)
 800304c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003050:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003052:	4b42      	ldr	r3, [pc, #264]	@ (800315c <HAL_UART_MspInit+0x208>)
 8003054:	2200      	movs	r2, #0
 8003056:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003058:	4b40      	ldr	r3, [pc, #256]	@ (800315c <HAL_UART_MspInit+0x208>)
 800305a:	2200      	movs	r2, #0
 800305c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800305e:	4b3f      	ldr	r3, [pc, #252]	@ (800315c <HAL_UART_MspInit+0x208>)
 8003060:	2200      	movs	r2, #0
 8003062:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003064:	4b3d      	ldr	r3, [pc, #244]	@ (800315c <HAL_UART_MspInit+0x208>)
 8003066:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800306a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800306c:	4b3b      	ldr	r3, [pc, #236]	@ (800315c <HAL_UART_MspInit+0x208>)
 800306e:	2200      	movs	r2, #0
 8003070:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003072:	483a      	ldr	r0, [pc, #232]	@ (800315c <HAL_UART_MspInit+0x208>)
 8003074:	f000 fb9a 	bl	80037ac <HAL_DMA_Init>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800307e:	f7ff fc81 	bl	8002984 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a35      	ldr	r2, [pc, #212]	@ (800315c <HAL_UART_MspInit+0x208>)
 8003086:	639a      	str	r2, [r3, #56]	@ 0x38
 8003088:	4a34      	ldr	r2, [pc, #208]	@ (800315c <HAL_UART_MspInit+0x208>)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800308e:	2200      	movs	r2, #0
 8003090:	2105      	movs	r1, #5
 8003092:	2026      	movs	r0, #38	@ 0x26
 8003094:	f000 fb60 	bl	8003758 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003098:	2026      	movs	r0, #38	@ 0x26
 800309a:	f000 fb79 	bl	8003790 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 800309e:	e04f      	b.n	8003140 <HAL_UART_MspInit+0x1ec>
  else if(huart->Instance==USART3)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a2f      	ldr	r2, [pc, #188]	@ (8003164 <HAL_UART_MspInit+0x210>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d14a      	bne.n	8003140 <HAL_UART_MspInit+0x1ec>
    __HAL_RCC_USART3_CLK_ENABLE();
 80030aa:	2300      	movs	r3, #0
 80030ac:	613b      	str	r3, [r7, #16]
 80030ae:	4b27      	ldr	r3, [pc, #156]	@ (800314c <HAL_UART_MspInit+0x1f8>)
 80030b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b2:	4a26      	ldr	r2, [pc, #152]	@ (800314c <HAL_UART_MspInit+0x1f8>)
 80030b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80030ba:	4b24      	ldr	r3, [pc, #144]	@ (800314c <HAL_UART_MspInit+0x1f8>)
 80030bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030c6:	2300      	movs	r3, #0
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	4b20      	ldr	r3, [pc, #128]	@ (800314c <HAL_UART_MspInit+0x1f8>)
 80030cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ce:	4a1f      	ldr	r2, [pc, #124]	@ (800314c <HAL_UART_MspInit+0x1f8>)
 80030d0:	f043 0304 	orr.w	r3, r3, #4
 80030d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80030d6:	4b1d      	ldr	r3, [pc, #116]	@ (800314c <HAL_UART_MspInit+0x1f8>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030da:	f003 0304 	and.w	r3, r3, #4
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030e2:	2300      	movs	r3, #0
 80030e4:	60bb      	str	r3, [r7, #8]
 80030e6:	4b19      	ldr	r3, [pc, #100]	@ (800314c <HAL_UART_MspInit+0x1f8>)
 80030e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ea:	4a18      	ldr	r2, [pc, #96]	@ (800314c <HAL_UART_MspInit+0x1f8>)
 80030ec:	f043 0302 	orr.w	r3, r3, #2
 80030f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80030f2:	4b16      	ldr	r3, [pc, #88]	@ (800314c <HAL_UART_MspInit+0x1f8>)
 80030f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	60bb      	str	r3, [r7, #8]
 80030fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80030fe:	2320      	movs	r3, #32
 8003100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003102:	2302      	movs	r3, #2
 8003104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003106:	2300      	movs	r3, #0
 8003108:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800310a:	2303      	movs	r3, #3
 800310c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800310e:	2307      	movs	r3, #7
 8003110:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003112:	f107 031c 	add.w	r3, r7, #28
 8003116:	4619      	mov	r1, r3
 8003118:	4813      	ldr	r0, [pc, #76]	@ (8003168 <HAL_UART_MspInit+0x214>)
 800311a:	f000 ff49 	bl	8003fb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800311e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003124:	2302      	movs	r3, #2
 8003126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003128:	2300      	movs	r3, #0
 800312a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800312c:	2303      	movs	r3, #3
 800312e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003130:	2307      	movs	r3, #7
 8003132:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003134:	f107 031c 	add.w	r3, r7, #28
 8003138:	4619      	mov	r1, r3
 800313a:	480c      	ldr	r0, [pc, #48]	@ (800316c <HAL_UART_MspInit+0x218>)
 800313c:	f000 ff38 	bl	8003fb0 <HAL_GPIO_Init>
}
 8003140:	bf00      	nop
 8003142:	3730      	adds	r7, #48	@ 0x30
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40004400 	.word	0x40004400
 800314c:	40023800 	.word	0x40023800
 8003150:	40020000 	.word	0x40020000
 8003154:	20005474 	.word	0x20005474
 8003158:	40026088 	.word	0x40026088
 800315c:	200054d4 	.word	0x200054d4
 8003160:	400260a0 	.word	0x400260a0
 8003164:	40004800 	.word	0x40004800
 8003168:	40020800 	.word	0x40020800
 800316c:	40020400 	.word	0x40020400

08003170 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b08e      	sub	sp, #56	@ 0x38
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800317c:	2300      	movs	r3, #0
 800317e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003180:	2300      	movs	r3, #0
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	4b33      	ldr	r3, [pc, #204]	@ (8003254 <HAL_InitTick+0xe4>)
 8003186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003188:	4a32      	ldr	r2, [pc, #200]	@ (8003254 <HAL_InitTick+0xe4>)
 800318a:	f043 0310 	orr.w	r3, r3, #16
 800318e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003190:	4b30      	ldr	r3, [pc, #192]	@ (8003254 <HAL_InitTick+0xe4>)
 8003192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003194:	f003 0310 	and.w	r3, r3, #16
 8003198:	60fb      	str	r3, [r7, #12]
 800319a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800319c:	f107 0210 	add.w	r2, r7, #16
 80031a0:	f107 0314 	add.w	r3, r7, #20
 80031a4:	4611      	mov	r1, r2
 80031a6:	4618      	mov	r0, r3
 80031a8:	f001 fb5e 	bl	8004868 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80031ac:	6a3b      	ldr	r3, [r7, #32]
 80031ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80031b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d103      	bne.n	80031be <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80031b6:	f001 fb2f 	bl	8004818 <HAL_RCC_GetPCLK1Freq>
 80031ba:	6378      	str	r0, [r7, #52]	@ 0x34
 80031bc:	e004      	b.n	80031c8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80031be:	f001 fb2b 	bl	8004818 <HAL_RCC_GetPCLK1Freq>
 80031c2:	4603      	mov	r3, r0
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80031c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031ca:	4a23      	ldr	r2, [pc, #140]	@ (8003258 <HAL_InitTick+0xe8>)
 80031cc:	fba2 2303 	umull	r2, r3, r2, r3
 80031d0:	0c9b      	lsrs	r3, r3, #18
 80031d2:	3b01      	subs	r3, #1
 80031d4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80031d6:	4b21      	ldr	r3, [pc, #132]	@ (800325c <HAL_InitTick+0xec>)
 80031d8:	4a21      	ldr	r2, [pc, #132]	@ (8003260 <HAL_InitTick+0xf0>)
 80031da:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80031dc:	4b1f      	ldr	r3, [pc, #124]	@ (800325c <HAL_InitTick+0xec>)
 80031de:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80031e2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80031e4:	4a1d      	ldr	r2, [pc, #116]	@ (800325c <HAL_InitTick+0xec>)
 80031e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031e8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80031ea:	4b1c      	ldr	r3, [pc, #112]	@ (800325c <HAL_InitTick+0xec>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031f0:	4b1a      	ldr	r3, [pc, #104]	@ (800325c <HAL_InitTick+0xec>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031f6:	4b19      	ldr	r3, [pc, #100]	@ (800325c <HAL_InitTick+0xec>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80031fc:	4817      	ldr	r0, [pc, #92]	@ (800325c <HAL_InitTick+0xec>)
 80031fe:	f001 ffad 	bl	800515c <HAL_TIM_Base_Init>
 8003202:	4603      	mov	r3, r0
 8003204:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003208:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800320c:	2b00      	cmp	r3, #0
 800320e:	d11b      	bne.n	8003248 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003210:	4812      	ldr	r0, [pc, #72]	@ (800325c <HAL_InitTick+0xec>)
 8003212:	f001 fff3 	bl	80051fc <HAL_TIM_Base_Start_IT>
 8003216:	4603      	mov	r3, r0
 8003218:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800321c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003220:	2b00      	cmp	r3, #0
 8003222:	d111      	bne.n	8003248 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003224:	2036      	movs	r0, #54	@ 0x36
 8003226:	f000 fab3 	bl	8003790 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b0f      	cmp	r3, #15
 800322e:	d808      	bhi.n	8003242 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003230:	2200      	movs	r2, #0
 8003232:	6879      	ldr	r1, [r7, #4]
 8003234:	2036      	movs	r0, #54	@ 0x36
 8003236:	f000 fa8f 	bl	8003758 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800323a:	4a0a      	ldr	r2, [pc, #40]	@ (8003264 <HAL_InitTick+0xf4>)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6013      	str	r3, [r2, #0]
 8003240:	e002      	b.n	8003248 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003248:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800324c:	4618      	mov	r0, r3
 800324e:	3738      	adds	r7, #56	@ 0x38
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40023800 	.word	0x40023800
 8003258:	431bde83 	.word	0x431bde83
 800325c:	200084c8 	.word	0x200084c8
 8003260:	40001000 	.word	0x40001000
 8003264:	20000020 	.word	0x20000020

08003268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800326c:	bf00      	nop
 800326e:	e7fd      	b.n	800326c <NMI_Handler+0x4>

08003270 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003274:	bf00      	nop
 8003276:	e7fd      	b.n	8003274 <HardFault_Handler+0x4>

08003278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800327c:	bf00      	nop
 800327e:	e7fd      	b.n	800327c <MemManage_Handler+0x4>

08003280 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003284:	bf00      	nop
 8003286:	e7fd      	b.n	8003284 <BusFault_Handler+0x4>

08003288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800328c:	bf00      	nop
 800328e:	e7fd      	b.n	800328c <UsageFault_Handler+0x4>

08003290 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003294:	bf00      	nop
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
	...

080032a0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80032a4:	4802      	ldr	r0, [pc, #8]	@ (80032b0 <DMA1_Stream5_IRQHandler+0x10>)
 80032a6:	f000 fc19 	bl	8003adc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80032aa:	bf00      	nop
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	20005474 	.word	0x20005474

080032b4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80032b8:	4802      	ldr	r0, [pc, #8]	@ (80032c4 <DMA1_Stream6_IRQHandler+0x10>)
 80032ba:	f000 fc0f 	bl	8003adc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80032be:	bf00      	nop
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	200054d4 	.word	0x200054d4

080032c8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80032cc:	4802      	ldr	r0, [pc, #8]	@ (80032d8 <TIM4_IRQHandler+0x10>)
 80032ce:	f002 fa51 	bl	8005774 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80032d2:	bf00      	nop
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	2000530c 	.word	0x2000530c

080032dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80032e0:	4802      	ldr	r0, [pc, #8]	@ (80032ec <USART2_IRQHandler+0x10>)
 80032e2:	f003 fa8b 	bl	80067fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80032e6:	bf00      	nop
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	200053e4 	.word	0x200053e4

080032f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80032f4:	4802      	ldr	r0, [pc, #8]	@ (8003300 <TIM6_DAC_IRQHandler+0x10>)
 80032f6:	f002 fa3d 	bl	8005774 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80032fa:	bf00      	nop
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	200084c8 	.word	0x200084c8

08003304 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  return 1;
 8003308:	2301      	movs	r3, #1
}
 800330a:	4618      	mov	r0, r3
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <_kill>:

int _kill(int pid, int sig)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800331e:	f016 fcb3 	bl	8019c88 <__errno>
 8003322:	4603      	mov	r3, r0
 8003324:	2216      	movs	r2, #22
 8003326:	601a      	str	r2, [r3, #0]
  return -1;
 8003328:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800332c:	4618      	mov	r0, r3
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <_exit>:

void _exit (int status)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800333c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7ff ffe7 	bl	8003314 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003346:	bf00      	nop
 8003348:	e7fd      	b.n	8003346 <_exit+0x12>

0800334a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b086      	sub	sp, #24
 800334e:	af00      	add	r7, sp, #0
 8003350:	60f8      	str	r0, [r7, #12]
 8003352:	60b9      	str	r1, [r7, #8]
 8003354:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003356:	2300      	movs	r3, #0
 8003358:	617b      	str	r3, [r7, #20]
 800335a:	e00a      	b.n	8003372 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800335c:	f3af 8000 	nop.w
 8003360:	4601      	mov	r1, r0
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	1c5a      	adds	r2, r3, #1
 8003366:	60ba      	str	r2, [r7, #8]
 8003368:	b2ca      	uxtb	r2, r1
 800336a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	3301      	adds	r3, #1
 8003370:	617b      	str	r3, [r7, #20]
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	429a      	cmp	r2, r3
 8003378:	dbf0      	blt.n	800335c <_read+0x12>
  }

  return len;
 800337a:	687b      	ldr	r3, [r7, #4]
}
 800337c:	4618      	mov	r0, r3
 800337e:	3718      	adds	r7, #24
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003390:	2300      	movs	r3, #0
 8003392:	617b      	str	r3, [r7, #20]
 8003394:	e009      	b.n	80033aa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	1c5a      	adds	r2, r3, #1
 800339a:	60ba      	str	r2, [r7, #8]
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	3301      	adds	r3, #1
 80033a8:	617b      	str	r3, [r7, #20]
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	dbf1      	blt.n	8003396 <_write+0x12>
  }
  return len;
 80033b2:	687b      	ldr	r3, [r7, #4]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3718      	adds	r7, #24
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <_close>:

int _close(int file)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80033c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80033e4:	605a      	str	r2, [r3, #4]
  return 0;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <_isatty>:

int _isatty(int file)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80033fc:	2301      	movs	r3, #1
}
 80033fe:	4618      	mov	r0, r3
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800340a:	b480      	push	{r7}
 800340c:	b085      	sub	sp, #20
 800340e:	af00      	add	r7, sp, #0
 8003410:	60f8      	str	r0, [r7, #12]
 8003412:	60b9      	str	r1, [r7, #8]
 8003414:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3714      	adds	r7, #20
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800342c:	4a14      	ldr	r2, [pc, #80]	@ (8003480 <_sbrk+0x5c>)
 800342e:	4b15      	ldr	r3, [pc, #84]	@ (8003484 <_sbrk+0x60>)
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003438:	4b13      	ldr	r3, [pc, #76]	@ (8003488 <_sbrk+0x64>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d102      	bne.n	8003446 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003440:	4b11      	ldr	r3, [pc, #68]	@ (8003488 <_sbrk+0x64>)
 8003442:	4a12      	ldr	r2, [pc, #72]	@ (800348c <_sbrk+0x68>)
 8003444:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003446:	4b10      	ldr	r3, [pc, #64]	@ (8003488 <_sbrk+0x64>)
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4413      	add	r3, r2
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	429a      	cmp	r2, r3
 8003452:	d207      	bcs.n	8003464 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003454:	f016 fc18 	bl	8019c88 <__errno>
 8003458:	4603      	mov	r3, r0
 800345a:	220c      	movs	r2, #12
 800345c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800345e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003462:	e009      	b.n	8003478 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003464:	4b08      	ldr	r3, [pc, #32]	@ (8003488 <_sbrk+0x64>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800346a:	4b07      	ldr	r3, [pc, #28]	@ (8003488 <_sbrk+0x64>)
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4413      	add	r3, r2
 8003472:	4a05      	ldr	r2, [pc, #20]	@ (8003488 <_sbrk+0x64>)
 8003474:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003476:	68fb      	ldr	r3, [r7, #12]
}
 8003478:	4618      	mov	r0, r3
 800347a:	3718      	adds	r7, #24
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	20020000 	.word	0x20020000
 8003484:	00000400 	.word	0x00000400
 8003488:	20008514 	.word	0x20008514
 800348c:	20011bc8 	.word	0x20011bc8

08003490 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003494:	4b06      	ldr	r3, [pc, #24]	@ (80034b0 <SystemInit+0x20>)
 8003496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800349a:	4a05      	ldr	r2, [pc, #20]	@ (80034b0 <SystemInit+0x20>)
 800349c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80034a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034a4:	bf00      	nop
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	e000ed00 	.word	0xe000ed00

080034b4 <StartDefaultTask>:
double currentsp = 0;
int sec = 0;


void StartDefaultTask(void *argument)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(&htim4);
 80034bc:	4806      	ldr	r0, [pc, #24]	@ (80034d8 <StartDefaultTask+0x24>)
 80034be:	f001 fe9d 	bl	80051fc <HAL_TIM_Base_Start_IT>
	uros_init();
 80034c2:	f7fe f975 	bl	80017b0 <uros_init>
	arm_init();
 80034c6:	f7fd fe51 	bl	800116c <arm_init>

    for(;;)
    {
        uros_agent_status_check();
 80034ca:	f7fe f9b1 	bl	8001830 <uros_agent_status_check>
        osDelay(1000/FREQUENCY);
 80034ce:	2032      	movs	r0, #50	@ 0x32
 80034d0:	f004 fc2a 	bl	8007d28 <osDelay>
        uros_agent_status_check();
 80034d4:	bf00      	nop
 80034d6:	e7f8      	b.n	80034ca <StartDefaultTask+0x16>
 80034d8:	2000530c 	.word	0x2000530c

080034dc <HAL_TIM_PeriodElapsedCallback>:
    }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM4)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a07      	ldr	r2, [pc, #28]	@ (8003508 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d101      	bne.n	80034f2 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		arm_timer_callback();
 80034ee:	f7fd fe9b 	bl	8001228 <arm_timer_callback>
	}
  /* USER CODE END Callback 0 */
	if (htim->Instance == TIM6)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a05      	ldr	r2, [pc, #20]	@ (800350c <HAL_TIM_PeriodElapsedCallback+0x30>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d101      	bne.n	8003500 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		HAL_IncTick();
 80034fc:	f000 f854 	bl	80035a8 <HAL_IncTick>
	}
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8003500:	bf00      	nop
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	40000800 	.word	0x40000800
 800350c:	40001000 	.word	0x40001000

08003510 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003510:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003548 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003514:	f7ff ffbc 	bl	8003490 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003518:	480c      	ldr	r0, [pc, #48]	@ (800354c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800351a:	490d      	ldr	r1, [pc, #52]	@ (8003550 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800351c:	4a0d      	ldr	r2, [pc, #52]	@ (8003554 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800351e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003520:	e002      	b.n	8003528 <LoopCopyDataInit>

08003522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003526:	3304      	adds	r3, #4

08003528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800352a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800352c:	d3f9      	bcc.n	8003522 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800352e:	4a0a      	ldr	r2, [pc, #40]	@ (8003558 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003530:	4c0a      	ldr	r4, [pc, #40]	@ (800355c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003534:	e001      	b.n	800353a <LoopFillZerobss>

08003536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003538:	3204      	adds	r2, #4

0800353a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800353a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800353c:	d3fb      	bcc.n	8003536 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800353e:	f016 fba9 	bl	8019c94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003542:	f7fe fef9 	bl	8002338 <main>
  bx  lr    
 8003546:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003548:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800354c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003550:	20000970 	.word	0x20000970
  ldr r2, =_sidata
 8003554:	0801bc40 	.word	0x0801bc40
  ldr r2, =_sbss
 8003558:	20000970 	.word	0x20000970
  ldr r4, =_ebss
 800355c:	20011bc8 	.word	0x20011bc8

08003560 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003560:	e7fe      	b.n	8003560 <ADC_IRQHandler>
	...

08003564 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003568:	4b0e      	ldr	r3, [pc, #56]	@ (80035a4 <HAL_Init+0x40>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a0d      	ldr	r2, [pc, #52]	@ (80035a4 <HAL_Init+0x40>)
 800356e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003572:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003574:	4b0b      	ldr	r3, [pc, #44]	@ (80035a4 <HAL_Init+0x40>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a0a      	ldr	r2, [pc, #40]	@ (80035a4 <HAL_Init+0x40>)
 800357a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800357e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003580:	4b08      	ldr	r3, [pc, #32]	@ (80035a4 <HAL_Init+0x40>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a07      	ldr	r2, [pc, #28]	@ (80035a4 <HAL_Init+0x40>)
 8003586:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800358a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800358c:	2003      	movs	r0, #3
 800358e:	f000 f8d8 	bl	8003742 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003592:	200f      	movs	r0, #15
 8003594:	f7ff fdec 	bl	8003170 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003598:	f7ff fb5e 	bl	8002c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	40023c00 	.word	0x40023c00

080035a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035ac:	4b06      	ldr	r3, [pc, #24]	@ (80035c8 <HAL_IncTick+0x20>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	461a      	mov	r2, r3
 80035b2:	4b06      	ldr	r3, [pc, #24]	@ (80035cc <HAL_IncTick+0x24>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4413      	add	r3, r2
 80035b8:	4a04      	ldr	r2, [pc, #16]	@ (80035cc <HAL_IncTick+0x24>)
 80035ba:	6013      	str	r3, [r2, #0]
}
 80035bc:	bf00      	nop
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	20000024 	.word	0x20000024
 80035cc:	20008518 	.word	0x20008518

080035d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  return uwTick;
 80035d4:	4b03      	ldr	r3, [pc, #12]	@ (80035e4 <HAL_GetTick+0x14>)
 80035d6:	681b      	ldr	r3, [r3, #0]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	20008518 	.word	0x20008518

080035e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035f8:	4b0c      	ldr	r3, [pc, #48]	@ (800362c <__NVIC_SetPriorityGrouping+0x44>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003604:	4013      	ands	r3, r2
 8003606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003610:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003614:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800361a:	4a04      	ldr	r2, [pc, #16]	@ (800362c <__NVIC_SetPriorityGrouping+0x44>)
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	60d3      	str	r3, [r2, #12]
}
 8003620:	bf00      	nop
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	e000ed00 	.word	0xe000ed00

08003630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003634:	4b04      	ldr	r3, [pc, #16]	@ (8003648 <__NVIC_GetPriorityGrouping+0x18>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	0a1b      	lsrs	r3, r3, #8
 800363a:	f003 0307 	and.w	r3, r3, #7
}
 800363e:	4618      	mov	r0, r3
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	e000ed00 	.word	0xe000ed00

0800364c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	4603      	mov	r3, r0
 8003654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365a:	2b00      	cmp	r3, #0
 800365c:	db0b      	blt.n	8003676 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800365e:	79fb      	ldrb	r3, [r7, #7]
 8003660:	f003 021f 	and.w	r2, r3, #31
 8003664:	4907      	ldr	r1, [pc, #28]	@ (8003684 <__NVIC_EnableIRQ+0x38>)
 8003666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800366a:	095b      	lsrs	r3, r3, #5
 800366c:	2001      	movs	r0, #1
 800366e:	fa00 f202 	lsl.w	r2, r0, r2
 8003672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	e000e100 	.word	0xe000e100

08003688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	4603      	mov	r3, r0
 8003690:	6039      	str	r1, [r7, #0]
 8003692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003698:	2b00      	cmp	r3, #0
 800369a:	db0a      	blt.n	80036b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	b2da      	uxtb	r2, r3
 80036a0:	490c      	ldr	r1, [pc, #48]	@ (80036d4 <__NVIC_SetPriority+0x4c>)
 80036a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a6:	0112      	lsls	r2, r2, #4
 80036a8:	b2d2      	uxtb	r2, r2
 80036aa:	440b      	add	r3, r1
 80036ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036b0:	e00a      	b.n	80036c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	4908      	ldr	r1, [pc, #32]	@ (80036d8 <__NVIC_SetPriority+0x50>)
 80036b8:	79fb      	ldrb	r3, [r7, #7]
 80036ba:	f003 030f 	and.w	r3, r3, #15
 80036be:	3b04      	subs	r3, #4
 80036c0:	0112      	lsls	r2, r2, #4
 80036c2:	b2d2      	uxtb	r2, r2
 80036c4:	440b      	add	r3, r1
 80036c6:	761a      	strb	r2, [r3, #24]
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	e000e100 	.word	0xe000e100
 80036d8:	e000ed00 	.word	0xe000ed00

080036dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036dc:	b480      	push	{r7}
 80036de:	b089      	sub	sp, #36	@ 0x24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	f1c3 0307 	rsb	r3, r3, #7
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	bf28      	it	cs
 80036fa:	2304      	movcs	r3, #4
 80036fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	3304      	adds	r3, #4
 8003702:	2b06      	cmp	r3, #6
 8003704:	d902      	bls.n	800370c <NVIC_EncodePriority+0x30>
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	3b03      	subs	r3, #3
 800370a:	e000      	b.n	800370e <NVIC_EncodePriority+0x32>
 800370c:	2300      	movs	r3, #0
 800370e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003710:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	fa02 f303 	lsl.w	r3, r2, r3
 800371a:	43da      	mvns	r2, r3
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	401a      	ands	r2, r3
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003724:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	fa01 f303 	lsl.w	r3, r1, r3
 800372e:	43d9      	mvns	r1, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003734:	4313      	orrs	r3, r2
         );
}
 8003736:	4618      	mov	r0, r3
 8003738:	3724      	adds	r7, #36	@ 0x24
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b082      	sub	sp, #8
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7ff ff4c 	bl	80035e8 <__NVIC_SetPriorityGrouping>
}
 8003750:	bf00      	nop
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	4603      	mov	r3, r0
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
 8003764:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003766:	2300      	movs	r3, #0
 8003768:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800376a:	f7ff ff61 	bl	8003630 <__NVIC_GetPriorityGrouping>
 800376e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	68b9      	ldr	r1, [r7, #8]
 8003774:	6978      	ldr	r0, [r7, #20]
 8003776:	f7ff ffb1 	bl	80036dc <NVIC_EncodePriority>
 800377a:	4602      	mov	r2, r0
 800377c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003780:	4611      	mov	r1, r2
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff ff80 	bl	8003688 <__NVIC_SetPriority>
}
 8003788:	bf00      	nop
 800378a:	3718      	adds	r7, #24
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	4603      	mov	r3, r0
 8003798:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800379a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379e:	4618      	mov	r0, r3
 80037a0:	f7ff ff54 	bl	800364c <__NVIC_EnableIRQ>
}
 80037a4:	bf00      	nop
 80037a6:	3708      	adds	r7, #8
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80037b4:	2300      	movs	r3, #0
 80037b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80037b8:	f7ff ff0a 	bl	80035d0 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e099      	b.n	80038fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0201 	bic.w	r2, r2, #1
 80037e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037e8:	e00f      	b.n	800380a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037ea:	f7ff fef1 	bl	80035d0 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b05      	cmp	r3, #5
 80037f6:	d908      	bls.n	800380a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2220      	movs	r2, #32
 80037fc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2203      	movs	r2, #3
 8003802:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e078      	b.n	80038fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1e8      	bne.n	80037ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	4b38      	ldr	r3, [pc, #224]	@ (8003904 <HAL_DMA_Init+0x158>)
 8003824:	4013      	ands	r3, r2
 8003826:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003836:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003842:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800384e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	4313      	orrs	r3, r2
 800385a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003860:	2b04      	cmp	r3, #4
 8003862:	d107      	bne.n	8003874 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800386c:	4313      	orrs	r3, r2
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	4313      	orrs	r3, r2
 8003872:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f023 0307 	bic.w	r3, r3, #7
 800388a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	4313      	orrs	r3, r2
 8003894:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389a:	2b04      	cmp	r3, #4
 800389c:	d117      	bne.n	80038ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00e      	beq.n	80038ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 fb01 	bl	8003eb8 <DMA_CheckFifoParam>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d008      	beq.n	80038ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2240      	movs	r2, #64	@ 0x40
 80038c0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80038ca:	2301      	movs	r3, #1
 80038cc:	e016      	b.n	80038fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 fab8 	bl	8003e4c <DMA_CalcBaseAndBitshift>
 80038dc:	4603      	mov	r3, r0
 80038de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038e4:	223f      	movs	r2, #63	@ 0x3f
 80038e6:	409a      	lsls	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3718      	adds	r7, #24
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	f010803f 	.word	0xf010803f

08003908 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003916:	2300      	movs	r3, #0
 8003918:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800391e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003926:	2b01      	cmp	r3, #1
 8003928:	d101      	bne.n	800392e <HAL_DMA_Start_IT+0x26>
 800392a:	2302      	movs	r3, #2
 800392c:	e040      	b.n	80039b0 <HAL_DMA_Start_IT+0xa8>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b01      	cmp	r3, #1
 8003940:	d12f      	bne.n	80039a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2202      	movs	r2, #2
 8003946:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	68b9      	ldr	r1, [r7, #8]
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f000 fa4a 	bl	8003df0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003960:	223f      	movs	r2, #63	@ 0x3f
 8003962:	409a      	lsls	r2, r3
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 0216 	orr.w	r2, r2, #22
 8003976:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397c:	2b00      	cmp	r3, #0
 800397e:	d007      	beq.n	8003990 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f042 0208 	orr.w	r2, r2, #8
 800398e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f042 0201 	orr.w	r2, r2, #1
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	e005      	b.n	80039ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80039aa:	2302      	movs	r3, #2
 80039ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80039ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039c4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80039c6:	f7ff fe03 	bl	80035d0 <HAL_GetTick>
 80039ca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d008      	beq.n	80039ea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2280      	movs	r2, #128	@ 0x80
 80039dc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e052      	b.n	8003a90 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0216 	bic.w	r2, r2, #22
 80039f8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	695a      	ldr	r2, [r3, #20]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a08:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d103      	bne.n	8003a1a <HAL_DMA_Abort+0x62>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d007      	beq.n	8003a2a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 0208 	bic.w	r2, r2, #8
 8003a28:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0201 	bic.w	r2, r2, #1
 8003a38:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a3a:	e013      	b.n	8003a64 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a3c:	f7ff fdc8 	bl	80035d0 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b05      	cmp	r3, #5
 8003a48:	d90c      	bls.n	8003a64 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2203      	movs	r2, #3
 8003a54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e015      	b.n	8003a90 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1e4      	bne.n	8003a3c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a76:	223f      	movs	r2, #63	@ 0x3f
 8003a78:	409a      	lsls	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d004      	beq.n	8003ab6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2280      	movs	r2, #128	@ 0x80
 8003ab0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e00c      	b.n	8003ad0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2205      	movs	r2, #5
 8003aba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 0201 	bic.w	r2, r2, #1
 8003acc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ae8:	4b8e      	ldr	r3, [pc, #568]	@ (8003d24 <HAL_DMA_IRQHandler+0x248>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a8e      	ldr	r2, [pc, #568]	@ (8003d28 <HAL_DMA_IRQHandler+0x24c>)
 8003aee:	fba2 2303 	umull	r2, r3, r2, r3
 8003af2:	0a9b      	lsrs	r3, r3, #10
 8003af4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003afa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b06:	2208      	movs	r2, #8
 8003b08:	409a      	lsls	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d01a      	beq.n	8003b48 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d013      	beq.n	8003b48 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 0204 	bic.w	r2, r2, #4
 8003b2e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b34:	2208      	movs	r2, #8
 8003b36:	409a      	lsls	r2, r3
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b40:	f043 0201 	orr.w	r2, r3, #1
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	409a      	lsls	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4013      	ands	r3, r2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d012      	beq.n	8003b7e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00b      	beq.n	8003b7e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	409a      	lsls	r2, r3
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b76:	f043 0202 	orr.w	r2, r3, #2
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b82:	2204      	movs	r2, #4
 8003b84:	409a      	lsls	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	4013      	ands	r3, r2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d012      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00b      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ba0:	2204      	movs	r2, #4
 8003ba2:	409a      	lsls	r2, r3
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bac:	f043 0204 	orr.w	r2, r3, #4
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bb8:	2210      	movs	r2, #16
 8003bba:	409a      	lsls	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d043      	beq.n	8003c4c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d03c      	beq.n	8003c4c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bd6:	2210      	movs	r2, #16
 8003bd8:	409a      	lsls	r2, r3
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d018      	beq.n	8003c1e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d108      	bne.n	8003c0c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d024      	beq.n	8003c4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	4798      	blx	r3
 8003c0a:	e01f      	b.n	8003c4c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d01b      	beq.n	8003c4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	4798      	blx	r3
 8003c1c:	e016      	b.n	8003c4c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d107      	bne.n	8003c3c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 0208 	bic.w	r2, r2, #8
 8003c3a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d003      	beq.n	8003c4c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c50:	2220      	movs	r2, #32
 8003c52:	409a      	lsls	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4013      	ands	r3, r2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f000 808f 	beq.w	8003d7c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0310 	and.w	r3, r3, #16
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f000 8087 	beq.w	8003d7c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c72:	2220      	movs	r2, #32
 8003c74:	409a      	lsls	r2, r3
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b05      	cmp	r3, #5
 8003c84:	d136      	bne.n	8003cf4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 0216 	bic.w	r2, r2, #22
 8003c94:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	695a      	ldr	r2, [r3, #20]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ca4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d103      	bne.n	8003cb6 <HAL_DMA_IRQHandler+0x1da>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d007      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 0208 	bic.w	r2, r2, #8
 8003cc4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cca:	223f      	movs	r2, #63	@ 0x3f
 8003ccc:	409a      	lsls	r2, r3
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d07e      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	4798      	blx	r3
        }
        return;
 8003cf2:	e079      	b.n	8003de8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d01d      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10d      	bne.n	8003d2c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d031      	beq.n	8003d7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	4798      	blx	r3
 8003d20:	e02c      	b.n	8003d7c <HAL_DMA_IRQHandler+0x2a0>
 8003d22:	bf00      	nop
 8003d24:	2000001c 	.word	0x2000001c
 8003d28:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d023      	beq.n	8003d7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	4798      	blx	r3
 8003d3c:	e01e      	b.n	8003d7c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10f      	bne.n	8003d6c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 0210 	bic.w	r2, r2, #16
 8003d5a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d003      	beq.n	8003d7c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d032      	beq.n	8003dea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d022      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2205      	movs	r2, #5
 8003d94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0201 	bic.w	r2, r2, #1
 8003da6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	3301      	adds	r3, #1
 8003dac:	60bb      	str	r3, [r7, #8]
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d307      	bcc.n	8003dc4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1f2      	bne.n	8003da8 <HAL_DMA_IRQHandler+0x2cc>
 8003dc2:	e000      	b.n	8003dc6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003dc4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d005      	beq.n	8003dea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	4798      	blx	r3
 8003de6:	e000      	b.n	8003dea <HAL_DMA_IRQHandler+0x30e>
        return;
 8003de8:	bf00      	nop
    }
  }
}
 8003dea:	3718      	adds	r7, #24
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
 8003dfc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003e0c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	2b40      	cmp	r3, #64	@ 0x40
 8003e1c:	d108      	bne.n	8003e30 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68ba      	ldr	r2, [r7, #8]
 8003e2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e2e:	e007      	b.n	8003e40 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	60da      	str	r2, [r3, #12]
}
 8003e40:	bf00      	nop
 8003e42:	3714      	adds	r7, #20
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	3b10      	subs	r3, #16
 8003e5c:	4a14      	ldr	r2, [pc, #80]	@ (8003eb0 <DMA_CalcBaseAndBitshift+0x64>)
 8003e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e62:	091b      	lsrs	r3, r3, #4
 8003e64:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e66:	4a13      	ldr	r2, [pc, #76]	@ (8003eb4 <DMA_CalcBaseAndBitshift+0x68>)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2b03      	cmp	r3, #3
 8003e78:	d909      	bls.n	8003e8e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003e82:	f023 0303 	bic.w	r3, r3, #3
 8003e86:	1d1a      	adds	r2, r3, #4
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	659a      	str	r2, [r3, #88]	@ 0x58
 8003e8c:	e007      	b.n	8003e9e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003e96:	f023 0303 	bic.w	r3, r3, #3
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3714      	adds	r7, #20
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	aaaaaaab 	.word	0xaaaaaaab
 8003eb4:	0801aa84 	.word	0x0801aa84

08003eb8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d11f      	bne.n	8003f12 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	2b03      	cmp	r3, #3
 8003ed6:	d856      	bhi.n	8003f86 <DMA_CheckFifoParam+0xce>
 8003ed8:	a201      	add	r2, pc, #4	@ (adr r2, 8003ee0 <DMA_CheckFifoParam+0x28>)
 8003eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ede:	bf00      	nop
 8003ee0:	08003ef1 	.word	0x08003ef1
 8003ee4:	08003f03 	.word	0x08003f03
 8003ee8:	08003ef1 	.word	0x08003ef1
 8003eec:	08003f87 	.word	0x08003f87
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d046      	beq.n	8003f8a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f00:	e043      	b.n	8003f8a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f06:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003f0a:	d140      	bne.n	8003f8e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f10:	e03d      	b.n	8003f8e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f1a:	d121      	bne.n	8003f60 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	2b03      	cmp	r3, #3
 8003f20:	d837      	bhi.n	8003f92 <DMA_CheckFifoParam+0xda>
 8003f22:	a201      	add	r2, pc, #4	@ (adr r2, 8003f28 <DMA_CheckFifoParam+0x70>)
 8003f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f28:	08003f39 	.word	0x08003f39
 8003f2c:	08003f3f 	.word	0x08003f3f
 8003f30:	08003f39 	.word	0x08003f39
 8003f34:	08003f51 	.word	0x08003f51
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f3c:	e030      	b.n	8003fa0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f42:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d025      	beq.n	8003f96 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f4e:	e022      	b.n	8003f96 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f54:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003f58:	d11f      	bne.n	8003f9a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f5e:	e01c      	b.n	8003f9a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d903      	bls.n	8003f6e <DMA_CheckFifoParam+0xb6>
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	2b03      	cmp	r3, #3
 8003f6a:	d003      	beq.n	8003f74 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f6c:	e018      	b.n	8003fa0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	73fb      	strb	r3, [r7, #15]
      break;
 8003f72:	e015      	b.n	8003fa0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00e      	beq.n	8003f9e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	73fb      	strb	r3, [r7, #15]
      break;
 8003f84:	e00b      	b.n	8003f9e <DMA_CheckFifoParam+0xe6>
      break;
 8003f86:	bf00      	nop
 8003f88:	e00a      	b.n	8003fa0 <DMA_CheckFifoParam+0xe8>
      break;
 8003f8a:	bf00      	nop
 8003f8c:	e008      	b.n	8003fa0 <DMA_CheckFifoParam+0xe8>
      break;
 8003f8e:	bf00      	nop
 8003f90:	e006      	b.n	8003fa0 <DMA_CheckFifoParam+0xe8>
      break;
 8003f92:	bf00      	nop
 8003f94:	e004      	b.n	8003fa0 <DMA_CheckFifoParam+0xe8>
      break;
 8003f96:	bf00      	nop
 8003f98:	e002      	b.n	8003fa0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003f9a:	bf00      	nop
 8003f9c:	e000      	b.n	8003fa0 <DMA_CheckFifoParam+0xe8>
      break;
 8003f9e:	bf00      	nop
    }
  } 
  
  return status; 
 8003fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop

08003fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b089      	sub	sp, #36	@ 0x24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	61fb      	str	r3, [r7, #28]
 8003fca:	e165      	b.n	8004298 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003fcc:	2201      	movs	r2, #1
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	f040 8154 	bne.w	8004292 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f003 0303 	and.w	r3, r3, #3
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d005      	beq.n	8004002 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d130      	bne.n	8004064 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	2203      	movs	r2, #3
 800400e:	fa02 f303 	lsl.w	r3, r2, r3
 8004012:	43db      	mvns	r3, r3
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	4013      	ands	r3, r2
 8004018:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	68da      	ldr	r2, [r3, #12]
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	fa02 f303 	lsl.w	r3, r2, r3
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	4313      	orrs	r3, r2
 800402a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004038:	2201      	movs	r2, #1
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	fa02 f303 	lsl.w	r3, r2, r3
 8004040:	43db      	mvns	r3, r3
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	4013      	ands	r3, r2
 8004046:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	091b      	lsrs	r3, r3, #4
 800404e:	f003 0201 	and.w	r2, r3, #1
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	fa02 f303 	lsl.w	r3, r2, r3
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	4313      	orrs	r3, r2
 800405c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f003 0303 	and.w	r3, r3, #3
 800406c:	2b03      	cmp	r3, #3
 800406e:	d017      	beq.n	80040a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	2203      	movs	r2, #3
 800407c:	fa02 f303 	lsl.w	r3, r2, r3
 8004080:	43db      	mvns	r3, r3
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	4013      	ands	r3, r2
 8004086:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	689a      	ldr	r2, [r3, #8]
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	4313      	orrs	r3, r2
 8004098:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f003 0303 	and.w	r3, r3, #3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d123      	bne.n	80040f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	08da      	lsrs	r2, r3, #3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	3208      	adds	r2, #8
 80040b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	f003 0307 	and.w	r3, r3, #7
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	220f      	movs	r2, #15
 80040c4:	fa02 f303 	lsl.w	r3, r2, r3
 80040c8:	43db      	mvns	r3, r3
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	4013      	ands	r3, r2
 80040ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	691a      	ldr	r2, [r3, #16]
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	f003 0307 	and.w	r3, r3, #7
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	fa02 f303 	lsl.w	r3, r2, r3
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	08da      	lsrs	r2, r3, #3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	3208      	adds	r2, #8
 80040ee:	69b9      	ldr	r1, [r7, #24]
 80040f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	2203      	movs	r2, #3
 8004100:	fa02 f303 	lsl.w	r3, r2, r3
 8004104:	43db      	mvns	r3, r3
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	4013      	ands	r3, r2
 800410a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f003 0203 	and.w	r2, r3, #3
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	fa02 f303 	lsl.w	r3, r2, r3
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	4313      	orrs	r3, r2
 8004120:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 80ae 	beq.w	8004292 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004136:	2300      	movs	r3, #0
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	4b5d      	ldr	r3, [pc, #372]	@ (80042b0 <HAL_GPIO_Init+0x300>)
 800413c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800413e:	4a5c      	ldr	r2, [pc, #368]	@ (80042b0 <HAL_GPIO_Init+0x300>)
 8004140:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004144:	6453      	str	r3, [r2, #68]	@ 0x44
 8004146:	4b5a      	ldr	r3, [pc, #360]	@ (80042b0 <HAL_GPIO_Init+0x300>)
 8004148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800414e:	60fb      	str	r3, [r7, #12]
 8004150:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004152:	4a58      	ldr	r2, [pc, #352]	@ (80042b4 <HAL_GPIO_Init+0x304>)
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	089b      	lsrs	r3, r3, #2
 8004158:	3302      	adds	r3, #2
 800415a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800415e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	220f      	movs	r2, #15
 800416a:	fa02 f303 	lsl.w	r3, r2, r3
 800416e:	43db      	mvns	r3, r3
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	4013      	ands	r3, r2
 8004174:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a4f      	ldr	r2, [pc, #316]	@ (80042b8 <HAL_GPIO_Init+0x308>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d025      	beq.n	80041ca <HAL_GPIO_Init+0x21a>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a4e      	ldr	r2, [pc, #312]	@ (80042bc <HAL_GPIO_Init+0x30c>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d01f      	beq.n	80041c6 <HAL_GPIO_Init+0x216>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a4d      	ldr	r2, [pc, #308]	@ (80042c0 <HAL_GPIO_Init+0x310>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d019      	beq.n	80041c2 <HAL_GPIO_Init+0x212>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a4c      	ldr	r2, [pc, #304]	@ (80042c4 <HAL_GPIO_Init+0x314>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d013      	beq.n	80041be <HAL_GPIO_Init+0x20e>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a4b      	ldr	r2, [pc, #300]	@ (80042c8 <HAL_GPIO_Init+0x318>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d00d      	beq.n	80041ba <HAL_GPIO_Init+0x20a>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a4a      	ldr	r2, [pc, #296]	@ (80042cc <HAL_GPIO_Init+0x31c>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d007      	beq.n	80041b6 <HAL_GPIO_Init+0x206>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a49      	ldr	r2, [pc, #292]	@ (80042d0 <HAL_GPIO_Init+0x320>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d101      	bne.n	80041b2 <HAL_GPIO_Init+0x202>
 80041ae:	2306      	movs	r3, #6
 80041b0:	e00c      	b.n	80041cc <HAL_GPIO_Init+0x21c>
 80041b2:	2307      	movs	r3, #7
 80041b4:	e00a      	b.n	80041cc <HAL_GPIO_Init+0x21c>
 80041b6:	2305      	movs	r3, #5
 80041b8:	e008      	b.n	80041cc <HAL_GPIO_Init+0x21c>
 80041ba:	2304      	movs	r3, #4
 80041bc:	e006      	b.n	80041cc <HAL_GPIO_Init+0x21c>
 80041be:	2303      	movs	r3, #3
 80041c0:	e004      	b.n	80041cc <HAL_GPIO_Init+0x21c>
 80041c2:	2302      	movs	r3, #2
 80041c4:	e002      	b.n	80041cc <HAL_GPIO_Init+0x21c>
 80041c6:	2301      	movs	r3, #1
 80041c8:	e000      	b.n	80041cc <HAL_GPIO_Init+0x21c>
 80041ca:	2300      	movs	r3, #0
 80041cc:	69fa      	ldr	r2, [r7, #28]
 80041ce:	f002 0203 	and.w	r2, r2, #3
 80041d2:	0092      	lsls	r2, r2, #2
 80041d4:	4093      	lsls	r3, r2
 80041d6:	69ba      	ldr	r2, [r7, #24]
 80041d8:	4313      	orrs	r3, r2
 80041da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041dc:	4935      	ldr	r1, [pc, #212]	@ (80042b4 <HAL_GPIO_Init+0x304>)
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	089b      	lsrs	r3, r3, #2
 80041e2:	3302      	adds	r3, #2
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041ea:	4b3a      	ldr	r3, [pc, #232]	@ (80042d4 <HAL_GPIO_Init+0x324>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	43db      	mvns	r3, r3
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	4013      	ands	r3, r2
 80041f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	4313      	orrs	r3, r2
 800420c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800420e:	4a31      	ldr	r2, [pc, #196]	@ (80042d4 <HAL_GPIO_Init+0x324>)
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004214:	4b2f      	ldr	r3, [pc, #188]	@ (80042d4 <HAL_GPIO_Init+0x324>)
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	43db      	mvns	r3, r3
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	4013      	ands	r3, r2
 8004222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	4313      	orrs	r3, r2
 8004236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004238:	4a26      	ldr	r2, [pc, #152]	@ (80042d4 <HAL_GPIO_Init+0x324>)
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800423e:	4b25      	ldr	r3, [pc, #148]	@ (80042d4 <HAL_GPIO_Init+0x324>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	43db      	mvns	r3, r3
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	4013      	ands	r3, r2
 800424c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	4313      	orrs	r3, r2
 8004260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004262:	4a1c      	ldr	r2, [pc, #112]	@ (80042d4 <HAL_GPIO_Init+0x324>)
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004268:	4b1a      	ldr	r3, [pc, #104]	@ (80042d4 <HAL_GPIO_Init+0x324>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	43db      	mvns	r3, r3
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	4013      	ands	r3, r2
 8004276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d003      	beq.n	800428c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	4313      	orrs	r3, r2
 800428a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800428c:	4a11      	ldr	r2, [pc, #68]	@ (80042d4 <HAL_GPIO_Init+0x324>)
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	3301      	adds	r3, #1
 8004296:	61fb      	str	r3, [r7, #28]
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	2b0f      	cmp	r3, #15
 800429c:	f67f ae96 	bls.w	8003fcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042a0:	bf00      	nop
 80042a2:	bf00      	nop
 80042a4:	3724      	adds	r7, #36	@ 0x24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	40023800 	.word	0x40023800
 80042b4:	40013800 	.word	0x40013800
 80042b8:	40020000 	.word	0x40020000
 80042bc:	40020400 	.word	0x40020400
 80042c0:	40020800 	.word	0x40020800
 80042c4:	40020c00 	.word	0x40020c00
 80042c8:	40021000 	.word	0x40021000
 80042cc:	40021400 	.word	0x40021400
 80042d0:	40021800 	.word	0x40021800
 80042d4:	40013c00 	.word	0x40013c00

080042d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	460b      	mov	r3, r1
 80042e2:	807b      	strh	r3, [r7, #2]
 80042e4:	4613      	mov	r3, r2
 80042e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042e8:	787b      	ldrb	r3, [r7, #1]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042ee:	887a      	ldrh	r2, [r7, #2]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042f4:	e003      	b.n	80042fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042f6:	887b      	ldrh	r3, [r7, #2]
 80042f8:	041a      	lsls	r2, r3, #16
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	619a      	str	r2, [r3, #24]
}
 80042fe:	bf00      	nop
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
	...

0800430c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e12b      	b.n	8004576 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d106      	bne.n	8004338 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7fe fcbc 	bl	8002cb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2224      	movs	r2, #36	@ 0x24
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 0201 	bic.w	r2, r2, #1
 800434e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800435e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800436e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004370:	f000 fa52 	bl	8004818 <HAL_RCC_GetPCLK1Freq>
 8004374:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	4a81      	ldr	r2, [pc, #516]	@ (8004580 <HAL_I2C_Init+0x274>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d807      	bhi.n	8004390 <HAL_I2C_Init+0x84>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4a80      	ldr	r2, [pc, #512]	@ (8004584 <HAL_I2C_Init+0x278>)
 8004384:	4293      	cmp	r3, r2
 8004386:	bf94      	ite	ls
 8004388:	2301      	movls	r3, #1
 800438a:	2300      	movhi	r3, #0
 800438c:	b2db      	uxtb	r3, r3
 800438e:	e006      	b.n	800439e <HAL_I2C_Init+0x92>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4a7d      	ldr	r2, [pc, #500]	@ (8004588 <HAL_I2C_Init+0x27c>)
 8004394:	4293      	cmp	r3, r2
 8004396:	bf94      	ite	ls
 8004398:	2301      	movls	r3, #1
 800439a:	2300      	movhi	r3, #0
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e0e7      	b.n	8004576 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	4a78      	ldr	r2, [pc, #480]	@ (800458c <HAL_I2C_Init+0x280>)
 80043aa:	fba2 2303 	umull	r2, r3, r2, r3
 80043ae:	0c9b      	lsrs	r3, r3, #18
 80043b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	4a6a      	ldr	r2, [pc, #424]	@ (8004580 <HAL_I2C_Init+0x274>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d802      	bhi.n	80043e0 <HAL_I2C_Init+0xd4>
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	3301      	adds	r3, #1
 80043de:	e009      	b.n	80043f4 <HAL_I2C_Init+0xe8>
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80043e6:	fb02 f303 	mul.w	r3, r2, r3
 80043ea:	4a69      	ldr	r2, [pc, #420]	@ (8004590 <HAL_I2C_Init+0x284>)
 80043ec:	fba2 2303 	umull	r2, r3, r2, r3
 80043f0:	099b      	lsrs	r3, r3, #6
 80043f2:	3301      	adds	r3, #1
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	6812      	ldr	r2, [r2, #0]
 80043f8:	430b      	orrs	r3, r1
 80043fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	69db      	ldr	r3, [r3, #28]
 8004402:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004406:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	495c      	ldr	r1, [pc, #368]	@ (8004580 <HAL_I2C_Init+0x274>)
 8004410:	428b      	cmp	r3, r1
 8004412:	d819      	bhi.n	8004448 <HAL_I2C_Init+0x13c>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	1e59      	subs	r1, r3, #1
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004422:	1c59      	adds	r1, r3, #1
 8004424:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004428:	400b      	ands	r3, r1
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00a      	beq.n	8004444 <HAL_I2C_Init+0x138>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	1e59      	subs	r1, r3, #1
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	fbb1 f3f3 	udiv	r3, r1, r3
 800443c:	3301      	adds	r3, #1
 800443e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004442:	e051      	b.n	80044e8 <HAL_I2C_Init+0x1dc>
 8004444:	2304      	movs	r3, #4
 8004446:	e04f      	b.n	80044e8 <HAL_I2C_Init+0x1dc>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d111      	bne.n	8004474 <HAL_I2C_Init+0x168>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	1e58      	subs	r0, r3, #1
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6859      	ldr	r1, [r3, #4]
 8004458:	460b      	mov	r3, r1
 800445a:	005b      	lsls	r3, r3, #1
 800445c:	440b      	add	r3, r1
 800445e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004462:	3301      	adds	r3, #1
 8004464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004468:	2b00      	cmp	r3, #0
 800446a:	bf0c      	ite	eq
 800446c:	2301      	moveq	r3, #1
 800446e:	2300      	movne	r3, #0
 8004470:	b2db      	uxtb	r3, r3
 8004472:	e012      	b.n	800449a <HAL_I2C_Init+0x18e>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	1e58      	subs	r0, r3, #1
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6859      	ldr	r1, [r3, #4]
 800447c:	460b      	mov	r3, r1
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	440b      	add	r3, r1
 8004482:	0099      	lsls	r1, r3, #2
 8004484:	440b      	add	r3, r1
 8004486:	fbb0 f3f3 	udiv	r3, r0, r3
 800448a:	3301      	adds	r3, #1
 800448c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004490:	2b00      	cmp	r3, #0
 8004492:	bf0c      	ite	eq
 8004494:	2301      	moveq	r3, #1
 8004496:	2300      	movne	r3, #0
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <HAL_I2C_Init+0x196>
 800449e:	2301      	movs	r3, #1
 80044a0:	e022      	b.n	80044e8 <HAL_I2C_Init+0x1dc>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10e      	bne.n	80044c8 <HAL_I2C_Init+0x1bc>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	1e58      	subs	r0, r3, #1
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6859      	ldr	r1, [r3, #4]
 80044b2:	460b      	mov	r3, r1
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	440b      	add	r3, r1
 80044b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80044bc:	3301      	adds	r3, #1
 80044be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044c6:	e00f      	b.n	80044e8 <HAL_I2C_Init+0x1dc>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	1e58      	subs	r0, r3, #1
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6859      	ldr	r1, [r3, #4]
 80044d0:	460b      	mov	r3, r1
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	440b      	add	r3, r1
 80044d6:	0099      	lsls	r1, r3, #2
 80044d8:	440b      	add	r3, r1
 80044da:	fbb0 f3f3 	udiv	r3, r0, r3
 80044de:	3301      	adds	r3, #1
 80044e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80044e8:	6879      	ldr	r1, [r7, #4]
 80044ea:	6809      	ldr	r1, [r1, #0]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	69da      	ldr	r2, [r3, #28]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	431a      	orrs	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004516:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	6911      	ldr	r1, [r2, #16]
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	68d2      	ldr	r2, [r2, #12]
 8004522:	4311      	orrs	r1, r2
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	6812      	ldr	r2, [r2, #0]
 8004528:	430b      	orrs	r3, r1
 800452a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	695a      	ldr	r2, [r3, #20]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	431a      	orrs	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 0201 	orr.w	r2, r2, #1
 8004556:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2220      	movs	r2, #32
 8004562:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	000186a0 	.word	0x000186a0
 8004584:	001e847f 	.word	0x001e847f
 8004588:	003d08ff 	.word	0x003d08ff
 800458c:	431bde83 	.word	0x431bde83
 8004590:	10624dd3 	.word	0x10624dd3

08004594 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800459a:	2300      	movs	r3, #0
 800459c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800459e:	2300      	movs	r3, #0
 80045a0:	603b      	str	r3, [r7, #0]
 80045a2:	4b20      	ldr	r3, [pc, #128]	@ (8004624 <HAL_PWREx_EnableOverDrive+0x90>)
 80045a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a6:	4a1f      	ldr	r2, [pc, #124]	@ (8004624 <HAL_PWREx_EnableOverDrive+0x90>)
 80045a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80045ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004624 <HAL_PWREx_EnableOverDrive+0x90>)
 80045b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045b6:	603b      	str	r3, [r7, #0]
 80045b8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80045ba:	4b1b      	ldr	r3, [pc, #108]	@ (8004628 <HAL_PWREx_EnableOverDrive+0x94>)
 80045bc:	2201      	movs	r2, #1
 80045be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045c0:	f7ff f806 	bl	80035d0 <HAL_GetTick>
 80045c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80045c6:	e009      	b.n	80045dc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80045c8:	f7ff f802 	bl	80035d0 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80045d6:	d901      	bls.n	80045dc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e01f      	b.n	800461c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80045dc:	4b13      	ldr	r3, [pc, #76]	@ (800462c <HAL_PWREx_EnableOverDrive+0x98>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045e8:	d1ee      	bne.n	80045c8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80045ea:	4b11      	ldr	r3, [pc, #68]	@ (8004630 <HAL_PWREx_EnableOverDrive+0x9c>)
 80045ec:	2201      	movs	r2, #1
 80045ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045f0:	f7fe ffee 	bl	80035d0 <HAL_GetTick>
 80045f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80045f6:	e009      	b.n	800460c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80045f8:	f7fe ffea 	bl	80035d0 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004606:	d901      	bls.n	800460c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e007      	b.n	800461c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800460c:	4b07      	ldr	r3, [pc, #28]	@ (800462c <HAL_PWREx_EnableOverDrive+0x98>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004614:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004618:	d1ee      	bne.n	80045f8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	40023800 	.word	0x40023800
 8004628:	420e0040 	.word	0x420e0040
 800462c:	40007000 	.word	0x40007000
 8004630:	420e0044 	.word	0x420e0044

08004634 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d101      	bne.n	8004648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e0cc      	b.n	80047e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004648:	4b68      	ldr	r3, [pc, #416]	@ (80047ec <HAL_RCC_ClockConfig+0x1b8>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 030f 	and.w	r3, r3, #15
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	429a      	cmp	r2, r3
 8004654:	d90c      	bls.n	8004670 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004656:	4b65      	ldr	r3, [pc, #404]	@ (80047ec <HAL_RCC_ClockConfig+0x1b8>)
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	b2d2      	uxtb	r2, r2
 800465c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800465e:	4b63      	ldr	r3, [pc, #396]	@ (80047ec <HAL_RCC_ClockConfig+0x1b8>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 030f 	and.w	r3, r3, #15
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	429a      	cmp	r2, r3
 800466a:	d001      	beq.n	8004670 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e0b8      	b.n	80047e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d020      	beq.n	80046be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0304 	and.w	r3, r3, #4
 8004684:	2b00      	cmp	r3, #0
 8004686:	d005      	beq.n	8004694 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004688:	4b59      	ldr	r3, [pc, #356]	@ (80047f0 <HAL_RCC_ClockConfig+0x1bc>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	4a58      	ldr	r2, [pc, #352]	@ (80047f0 <HAL_RCC_ClockConfig+0x1bc>)
 800468e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004692:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0308 	and.w	r3, r3, #8
 800469c:	2b00      	cmp	r3, #0
 800469e:	d005      	beq.n	80046ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046a0:	4b53      	ldr	r3, [pc, #332]	@ (80047f0 <HAL_RCC_ClockConfig+0x1bc>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	4a52      	ldr	r2, [pc, #328]	@ (80047f0 <HAL_RCC_ClockConfig+0x1bc>)
 80046a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80046aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046ac:	4b50      	ldr	r3, [pc, #320]	@ (80047f0 <HAL_RCC_ClockConfig+0x1bc>)
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	494d      	ldr	r1, [pc, #308]	@ (80047f0 <HAL_RCC_ClockConfig+0x1bc>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d044      	beq.n	8004754 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d107      	bne.n	80046e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046d2:	4b47      	ldr	r3, [pc, #284]	@ (80047f0 <HAL_RCC_ClockConfig+0x1bc>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d119      	bne.n	8004712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e07f      	b.n	80047e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d003      	beq.n	80046f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046ee:	2b03      	cmp	r3, #3
 80046f0:	d107      	bne.n	8004702 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046f2:	4b3f      	ldr	r3, [pc, #252]	@ (80047f0 <HAL_RCC_ClockConfig+0x1bc>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d109      	bne.n	8004712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e06f      	b.n	80047e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004702:	4b3b      	ldr	r3, [pc, #236]	@ (80047f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e067      	b.n	80047e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004712:	4b37      	ldr	r3, [pc, #220]	@ (80047f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f023 0203 	bic.w	r2, r3, #3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	4934      	ldr	r1, [pc, #208]	@ (80047f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004720:	4313      	orrs	r3, r2
 8004722:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004724:	f7fe ff54 	bl	80035d0 <HAL_GetTick>
 8004728:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800472a:	e00a      	b.n	8004742 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800472c:	f7fe ff50 	bl	80035d0 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800473a:	4293      	cmp	r3, r2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e04f      	b.n	80047e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004742:	4b2b      	ldr	r3, [pc, #172]	@ (80047f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 020c 	and.w	r2, r3, #12
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	429a      	cmp	r2, r3
 8004752:	d1eb      	bne.n	800472c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004754:	4b25      	ldr	r3, [pc, #148]	@ (80047ec <HAL_RCC_ClockConfig+0x1b8>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 030f 	and.w	r3, r3, #15
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	429a      	cmp	r2, r3
 8004760:	d20c      	bcs.n	800477c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004762:	4b22      	ldr	r3, [pc, #136]	@ (80047ec <HAL_RCC_ClockConfig+0x1b8>)
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	b2d2      	uxtb	r2, r2
 8004768:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800476a:	4b20      	ldr	r3, [pc, #128]	@ (80047ec <HAL_RCC_ClockConfig+0x1b8>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 030f 	and.w	r3, r3, #15
 8004772:	683a      	ldr	r2, [r7, #0]
 8004774:	429a      	cmp	r2, r3
 8004776:	d001      	beq.n	800477c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e032      	b.n	80047e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0304 	and.w	r3, r3, #4
 8004784:	2b00      	cmp	r3, #0
 8004786:	d008      	beq.n	800479a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004788:	4b19      	ldr	r3, [pc, #100]	@ (80047f0 <HAL_RCC_ClockConfig+0x1bc>)
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	4916      	ldr	r1, [pc, #88]	@ (80047f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004796:	4313      	orrs	r3, r2
 8004798:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0308 	and.w	r3, r3, #8
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d009      	beq.n	80047ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047a6:	4b12      	ldr	r3, [pc, #72]	@ (80047f0 <HAL_RCC_ClockConfig+0x1bc>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	00db      	lsls	r3, r3, #3
 80047b4:	490e      	ldr	r1, [pc, #56]	@ (80047f0 <HAL_RCC_ClockConfig+0x1bc>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80047ba:	f000 f887 	bl	80048cc <HAL_RCC_GetSysClockFreq>
 80047be:	4602      	mov	r2, r0
 80047c0:	4b0b      	ldr	r3, [pc, #44]	@ (80047f0 <HAL_RCC_ClockConfig+0x1bc>)
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	091b      	lsrs	r3, r3, #4
 80047c6:	f003 030f 	and.w	r3, r3, #15
 80047ca:	490a      	ldr	r1, [pc, #40]	@ (80047f4 <HAL_RCC_ClockConfig+0x1c0>)
 80047cc:	5ccb      	ldrb	r3, [r1, r3]
 80047ce:	fa22 f303 	lsr.w	r3, r2, r3
 80047d2:	4a09      	ldr	r2, [pc, #36]	@ (80047f8 <HAL_RCC_ClockConfig+0x1c4>)
 80047d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80047d6:	4b09      	ldr	r3, [pc, #36]	@ (80047fc <HAL_RCC_ClockConfig+0x1c8>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4618      	mov	r0, r3
 80047dc:	f7fe fcc8 	bl	8003170 <HAL_InitTick>

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	40023c00 	.word	0x40023c00
 80047f0:	40023800 	.word	0x40023800
 80047f4:	0801aa6c 	.word	0x0801aa6c
 80047f8:	2000001c 	.word	0x2000001c
 80047fc:	20000020 	.word	0x20000020

08004800 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004800:	b480      	push	{r7}
 8004802:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004804:	4b03      	ldr	r3, [pc, #12]	@ (8004814 <HAL_RCC_GetHCLKFreq+0x14>)
 8004806:	681b      	ldr	r3, [r3, #0]
}
 8004808:	4618      	mov	r0, r3
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	2000001c 	.word	0x2000001c

08004818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800481c:	f7ff fff0 	bl	8004800 <HAL_RCC_GetHCLKFreq>
 8004820:	4602      	mov	r2, r0
 8004822:	4b05      	ldr	r3, [pc, #20]	@ (8004838 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	0a9b      	lsrs	r3, r3, #10
 8004828:	f003 0307 	and.w	r3, r3, #7
 800482c:	4903      	ldr	r1, [pc, #12]	@ (800483c <HAL_RCC_GetPCLK1Freq+0x24>)
 800482e:	5ccb      	ldrb	r3, [r1, r3]
 8004830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004834:	4618      	mov	r0, r3
 8004836:	bd80      	pop	{r7, pc}
 8004838:	40023800 	.word	0x40023800
 800483c:	0801aa7c 	.word	0x0801aa7c

08004840 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004844:	f7ff ffdc 	bl	8004800 <HAL_RCC_GetHCLKFreq>
 8004848:	4602      	mov	r2, r0
 800484a:	4b05      	ldr	r3, [pc, #20]	@ (8004860 <HAL_RCC_GetPCLK2Freq+0x20>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	0b5b      	lsrs	r3, r3, #13
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	4903      	ldr	r1, [pc, #12]	@ (8004864 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004856:	5ccb      	ldrb	r3, [r1, r3]
 8004858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800485c:	4618      	mov	r0, r3
 800485e:	bd80      	pop	{r7, pc}
 8004860:	40023800 	.word	0x40023800
 8004864:	0801aa7c 	.word	0x0801aa7c

08004868 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	220f      	movs	r2, #15
 8004876:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004878:	4b12      	ldr	r3, [pc, #72]	@ (80048c4 <HAL_RCC_GetClockConfig+0x5c>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f003 0203 	and.w	r2, r3, #3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004884:	4b0f      	ldr	r3, [pc, #60]	@ (80048c4 <HAL_RCC_GetClockConfig+0x5c>)
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004890:	4b0c      	ldr	r3, [pc, #48]	@ (80048c4 <HAL_RCC_GetClockConfig+0x5c>)
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800489c:	4b09      	ldr	r3, [pc, #36]	@ (80048c4 <HAL_RCC_GetClockConfig+0x5c>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	08db      	lsrs	r3, r3, #3
 80048a2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80048aa:	4b07      	ldr	r3, [pc, #28]	@ (80048c8 <HAL_RCC_GetClockConfig+0x60>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 020f 	and.w	r2, r3, #15
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	601a      	str	r2, [r3, #0]
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	40023800 	.word	0x40023800
 80048c8:	40023c00 	.word	0x40023c00

080048cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048d0:	b0a6      	sub	sp, #152	@ 0x98
 80048d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80048d4:	2300      	movs	r3, #0
 80048d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80048da:	2300      	movs	r3, #0
 80048dc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80048e0:	2300      	movs	r3, #0
 80048e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80048e6:	2300      	movs	r3, #0
 80048e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80048ec:	2300      	movs	r3, #0
 80048ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048f2:	4bc8      	ldr	r3, [pc, #800]	@ (8004c14 <HAL_RCC_GetSysClockFreq+0x348>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f003 030c 	and.w	r3, r3, #12
 80048fa:	2b0c      	cmp	r3, #12
 80048fc:	f200 817e 	bhi.w	8004bfc <HAL_RCC_GetSysClockFreq+0x330>
 8004900:	a201      	add	r2, pc, #4	@ (adr r2, 8004908 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004906:	bf00      	nop
 8004908:	0800493d 	.word	0x0800493d
 800490c:	08004bfd 	.word	0x08004bfd
 8004910:	08004bfd 	.word	0x08004bfd
 8004914:	08004bfd 	.word	0x08004bfd
 8004918:	08004945 	.word	0x08004945
 800491c:	08004bfd 	.word	0x08004bfd
 8004920:	08004bfd 	.word	0x08004bfd
 8004924:	08004bfd 	.word	0x08004bfd
 8004928:	0800494d 	.word	0x0800494d
 800492c:	08004bfd 	.word	0x08004bfd
 8004930:	08004bfd 	.word	0x08004bfd
 8004934:	08004bfd 	.word	0x08004bfd
 8004938:	08004ab7 	.word	0x08004ab7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800493c:	4bb6      	ldr	r3, [pc, #728]	@ (8004c18 <HAL_RCC_GetSysClockFreq+0x34c>)
 800493e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004942:	e15f      	b.n	8004c04 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004944:	4bb5      	ldr	r3, [pc, #724]	@ (8004c1c <HAL_RCC_GetSysClockFreq+0x350>)
 8004946:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800494a:	e15b      	b.n	8004c04 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800494c:	4bb1      	ldr	r3, [pc, #708]	@ (8004c14 <HAL_RCC_GetSysClockFreq+0x348>)
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004954:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004958:	4bae      	ldr	r3, [pc, #696]	@ (8004c14 <HAL_RCC_GetSysClockFreq+0x348>)
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d031      	beq.n	80049c8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004964:	4bab      	ldr	r3, [pc, #684]	@ (8004c14 <HAL_RCC_GetSysClockFreq+0x348>)
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	099b      	lsrs	r3, r3, #6
 800496a:	2200      	movs	r2, #0
 800496c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800496e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004970:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004976:	663b      	str	r3, [r7, #96]	@ 0x60
 8004978:	2300      	movs	r3, #0
 800497a:	667b      	str	r3, [r7, #100]	@ 0x64
 800497c:	4ba7      	ldr	r3, [pc, #668]	@ (8004c1c <HAL_RCC_GetSysClockFreq+0x350>)
 800497e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004982:	462a      	mov	r2, r5
 8004984:	fb03 f202 	mul.w	r2, r3, r2
 8004988:	2300      	movs	r3, #0
 800498a:	4621      	mov	r1, r4
 800498c:	fb01 f303 	mul.w	r3, r1, r3
 8004990:	4413      	add	r3, r2
 8004992:	4aa2      	ldr	r2, [pc, #648]	@ (8004c1c <HAL_RCC_GetSysClockFreq+0x350>)
 8004994:	4621      	mov	r1, r4
 8004996:	fba1 1202 	umull	r1, r2, r1, r2
 800499a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800499c:	460a      	mov	r2, r1
 800499e:	67ba      	str	r2, [r7, #120]	@ 0x78
 80049a0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80049a2:	4413      	add	r3, r2
 80049a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80049a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049aa:	2200      	movs	r2, #0
 80049ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80049ae:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80049b0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80049b4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80049b8:	f7fc f900 	bl	8000bbc <__aeabi_uldivmod>
 80049bc:	4602      	mov	r2, r0
 80049be:	460b      	mov	r3, r1
 80049c0:	4613      	mov	r3, r2
 80049c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80049c6:	e064      	b.n	8004a92 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049c8:	4b92      	ldr	r3, [pc, #584]	@ (8004c14 <HAL_RCC_GetSysClockFreq+0x348>)
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	099b      	lsrs	r3, r3, #6
 80049ce:	2200      	movs	r2, #0
 80049d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80049d2:	657a      	str	r2, [r7, #84]	@ 0x54
 80049d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049dc:	2300      	movs	r3, #0
 80049de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049e0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80049e4:	4622      	mov	r2, r4
 80049e6:	462b      	mov	r3, r5
 80049e8:	f04f 0000 	mov.w	r0, #0
 80049ec:	f04f 0100 	mov.w	r1, #0
 80049f0:	0159      	lsls	r1, r3, #5
 80049f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049f6:	0150      	lsls	r0, r2, #5
 80049f8:	4602      	mov	r2, r0
 80049fa:	460b      	mov	r3, r1
 80049fc:	4621      	mov	r1, r4
 80049fe:	1a51      	subs	r1, r2, r1
 8004a00:	6139      	str	r1, [r7, #16]
 8004a02:	4629      	mov	r1, r5
 8004a04:	eb63 0301 	sbc.w	r3, r3, r1
 8004a08:	617b      	str	r3, [r7, #20]
 8004a0a:	f04f 0200 	mov.w	r2, #0
 8004a0e:	f04f 0300 	mov.w	r3, #0
 8004a12:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a16:	4659      	mov	r1, fp
 8004a18:	018b      	lsls	r3, r1, #6
 8004a1a:	4651      	mov	r1, sl
 8004a1c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a20:	4651      	mov	r1, sl
 8004a22:	018a      	lsls	r2, r1, #6
 8004a24:	4651      	mov	r1, sl
 8004a26:	ebb2 0801 	subs.w	r8, r2, r1
 8004a2a:	4659      	mov	r1, fp
 8004a2c:	eb63 0901 	sbc.w	r9, r3, r1
 8004a30:	f04f 0200 	mov.w	r2, #0
 8004a34:	f04f 0300 	mov.w	r3, #0
 8004a38:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a3c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a40:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a44:	4690      	mov	r8, r2
 8004a46:	4699      	mov	r9, r3
 8004a48:	4623      	mov	r3, r4
 8004a4a:	eb18 0303 	adds.w	r3, r8, r3
 8004a4e:	60bb      	str	r3, [r7, #8]
 8004a50:	462b      	mov	r3, r5
 8004a52:	eb49 0303 	adc.w	r3, r9, r3
 8004a56:	60fb      	str	r3, [r7, #12]
 8004a58:	f04f 0200 	mov.w	r2, #0
 8004a5c:	f04f 0300 	mov.w	r3, #0
 8004a60:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a64:	4629      	mov	r1, r5
 8004a66:	028b      	lsls	r3, r1, #10
 8004a68:	4621      	mov	r1, r4
 8004a6a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a6e:	4621      	mov	r1, r4
 8004a70:	028a      	lsls	r2, r1, #10
 8004a72:	4610      	mov	r0, r2
 8004a74:	4619      	mov	r1, r3
 8004a76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a7e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004a80:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004a84:	f7fc f89a 	bl	8000bbc <__aeabi_uldivmod>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004a92:	4b60      	ldr	r3, [pc, #384]	@ (8004c14 <HAL_RCC_GetSysClockFreq+0x348>)
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	0c1b      	lsrs	r3, r3, #16
 8004a98:	f003 0303 	and.w	r3, r3, #3
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	005b      	lsls	r3, r3, #1
 8004aa0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8004aa4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004aa8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004ab4:	e0a6      	b.n	8004c04 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ab6:	4b57      	ldr	r3, [pc, #348]	@ (8004c14 <HAL_RCC_GetSysClockFreq+0x348>)
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004abe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ac2:	4b54      	ldr	r3, [pc, #336]	@ (8004c14 <HAL_RCC_GetSysClockFreq+0x348>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d02a      	beq.n	8004b24 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ace:	4b51      	ldr	r3, [pc, #324]	@ (8004c14 <HAL_RCC_GetSysClockFreq+0x348>)
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	099b      	lsrs	r3, r3, #6
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ad8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004adc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	4b4e      	ldr	r3, [pc, #312]	@ (8004c1c <HAL_RCC_GetSysClockFreq+0x350>)
 8004ae4:	fb03 f201 	mul.w	r2, r3, r1
 8004ae8:	2300      	movs	r3, #0
 8004aea:	fb00 f303 	mul.w	r3, r0, r3
 8004aee:	4413      	add	r3, r2
 8004af0:	4a4a      	ldr	r2, [pc, #296]	@ (8004c1c <HAL_RCC_GetSysClockFreq+0x350>)
 8004af2:	fba0 1202 	umull	r1, r2, r0, r2
 8004af6:	677a      	str	r2, [r7, #116]	@ 0x74
 8004af8:	460a      	mov	r2, r1
 8004afa:	673a      	str	r2, [r7, #112]	@ 0x70
 8004afc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004afe:	4413      	add	r3, r2
 8004b00:	677b      	str	r3, [r7, #116]	@ 0x74
 8004b02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b06:	2200      	movs	r2, #0
 8004b08:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b0a:	637a      	str	r2, [r7, #52]	@ 0x34
 8004b0c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004b10:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8004b14:	f7fc f852 	bl	8000bbc <__aeabi_uldivmod>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004b22:	e05b      	b.n	8004bdc <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b24:	4b3b      	ldr	r3, [pc, #236]	@ (8004c14 <HAL_RCC_GetSysClockFreq+0x348>)
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	099b      	lsrs	r3, r3, #6
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b36:	623b      	str	r3, [r7, #32]
 8004b38:	2300      	movs	r3, #0
 8004b3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b40:	4642      	mov	r2, r8
 8004b42:	464b      	mov	r3, r9
 8004b44:	f04f 0000 	mov.w	r0, #0
 8004b48:	f04f 0100 	mov.w	r1, #0
 8004b4c:	0159      	lsls	r1, r3, #5
 8004b4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b52:	0150      	lsls	r0, r2, #5
 8004b54:	4602      	mov	r2, r0
 8004b56:	460b      	mov	r3, r1
 8004b58:	4641      	mov	r1, r8
 8004b5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b5e:	4649      	mov	r1, r9
 8004b60:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b64:	f04f 0200 	mov.w	r2, #0
 8004b68:	f04f 0300 	mov.w	r3, #0
 8004b6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b78:	ebb2 040a 	subs.w	r4, r2, sl
 8004b7c:	eb63 050b 	sbc.w	r5, r3, fp
 8004b80:	f04f 0200 	mov.w	r2, #0
 8004b84:	f04f 0300 	mov.w	r3, #0
 8004b88:	00eb      	lsls	r3, r5, #3
 8004b8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b8e:	00e2      	lsls	r2, r4, #3
 8004b90:	4614      	mov	r4, r2
 8004b92:	461d      	mov	r5, r3
 8004b94:	4643      	mov	r3, r8
 8004b96:	18e3      	adds	r3, r4, r3
 8004b98:	603b      	str	r3, [r7, #0]
 8004b9a:	464b      	mov	r3, r9
 8004b9c:	eb45 0303 	adc.w	r3, r5, r3
 8004ba0:	607b      	str	r3, [r7, #4]
 8004ba2:	f04f 0200 	mov.w	r2, #0
 8004ba6:	f04f 0300 	mov.w	r3, #0
 8004baa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bae:	4629      	mov	r1, r5
 8004bb0:	028b      	lsls	r3, r1, #10
 8004bb2:	4621      	mov	r1, r4
 8004bb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bb8:	4621      	mov	r1, r4
 8004bba:	028a      	lsls	r2, r1, #10
 8004bbc:	4610      	mov	r0, r2
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	61bb      	str	r3, [r7, #24]
 8004bc8:	61fa      	str	r2, [r7, #28]
 8004bca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bce:	f7fb fff5 	bl	8000bbc <__aeabi_uldivmod>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8004c14 <HAL_RCC_GetSysClockFreq+0x348>)
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	0f1b      	lsrs	r3, r3, #28
 8004be2:	f003 0307 	and.w	r3, r3, #7
 8004be6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8004bea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004bee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004bfa:	e003      	b.n	8004c04 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bfc:	4b06      	ldr	r3, [pc, #24]	@ (8004c18 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004bfe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004c02:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c04:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3798      	adds	r7, #152	@ 0x98
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c12:	bf00      	nop
 8004c14:	40023800 	.word	0x40023800
 8004c18:	00f42400 	.word	0x00f42400
 8004c1c:	017d7840 	.word	0x017d7840

08004c20 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e28d      	b.n	800514e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f000 8083 	beq.w	8004d46 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004c40:	4b94      	ldr	r3, [pc, #592]	@ (8004e94 <HAL_RCC_OscConfig+0x274>)
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f003 030c 	and.w	r3, r3, #12
 8004c48:	2b04      	cmp	r3, #4
 8004c4a:	d019      	beq.n	8004c80 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004c4c:	4b91      	ldr	r3, [pc, #580]	@ (8004e94 <HAL_RCC_OscConfig+0x274>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f003 030c 	and.w	r3, r3, #12
        || \
 8004c54:	2b08      	cmp	r3, #8
 8004c56:	d106      	bne.n	8004c66 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004c58:	4b8e      	ldr	r3, [pc, #568]	@ (8004e94 <HAL_RCC_OscConfig+0x274>)
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c64:	d00c      	beq.n	8004c80 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c66:	4b8b      	ldr	r3, [pc, #556]	@ (8004e94 <HAL_RCC_OscConfig+0x274>)
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004c6e:	2b0c      	cmp	r3, #12
 8004c70:	d112      	bne.n	8004c98 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c72:	4b88      	ldr	r3, [pc, #544]	@ (8004e94 <HAL_RCC_OscConfig+0x274>)
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c7e:	d10b      	bne.n	8004c98 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c80:	4b84      	ldr	r3, [pc, #528]	@ (8004e94 <HAL_RCC_OscConfig+0x274>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d05b      	beq.n	8004d44 <HAL_RCC_OscConfig+0x124>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d157      	bne.n	8004d44 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e25a      	b.n	800514e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ca0:	d106      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x90>
 8004ca2:	4b7c      	ldr	r3, [pc, #496]	@ (8004e94 <HAL_RCC_OscConfig+0x274>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a7b      	ldr	r2, [pc, #492]	@ (8004e94 <HAL_RCC_OscConfig+0x274>)
 8004ca8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cac:	6013      	str	r3, [r2, #0]
 8004cae:	e01d      	b.n	8004cec <HAL_RCC_OscConfig+0xcc>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cb8:	d10c      	bne.n	8004cd4 <HAL_RCC_OscConfig+0xb4>
 8004cba:	4b76      	ldr	r3, [pc, #472]	@ (8004e94 <HAL_RCC_OscConfig+0x274>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a75      	ldr	r2, [pc, #468]	@ (8004e94 <HAL_RCC_OscConfig+0x274>)
 8004cc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004cc4:	6013      	str	r3, [r2, #0]
 8004cc6:	4b73      	ldr	r3, [pc, #460]	@ (8004e94 <HAL_RCC_OscConfig+0x274>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a72      	ldr	r2, [pc, #456]	@ (8004e94 <HAL_RCC_OscConfig+0x274>)
 8004ccc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cd0:	6013      	str	r3, [r2, #0]
 8004cd2:	e00b      	b.n	8004cec <HAL_RCC_OscConfig+0xcc>
 8004cd4:	4b6f      	ldr	r3, [pc, #444]	@ (8004e94 <HAL_RCC_OscConfig+0x274>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a6e      	ldr	r2, [pc, #440]	@ (8004e94 <HAL_RCC_OscConfig+0x274>)
 8004cda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cde:	6013      	str	r3, [r2, #0]
 8004ce0:	4b6c      	ldr	r3, [pc, #432]	@ (8004e94 <HAL_RCC_OscConfig+0x274>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a6b      	ldr	r2, [pc, #428]	@ (8004e94 <HAL_RCC_OscConfig+0x274>)
 8004ce6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d013      	beq.n	8004d1c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf4:	f7fe fc6c 	bl	80035d0 <HAL_GetTick>
 8004cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cfa:	e008      	b.n	8004d0e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cfc:	f7fe fc68 	bl	80035d0 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b64      	cmp	r3, #100	@ 0x64
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e21f      	b.n	800514e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d0e:	4b61      	ldr	r3, [pc, #388]	@ (8004e94 <HAL_RCC_OscConfig+0x274>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d0f0      	beq.n	8004cfc <HAL_RCC_OscConfig+0xdc>
 8004d1a:	e014      	b.n	8004d46 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d1c:	f7fe fc58 	bl	80035d0 <HAL_GetTick>
 8004d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d22:	e008      	b.n	8004d36 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d24:	f7fe fc54 	bl	80035d0 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b64      	cmp	r3, #100	@ 0x64
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e20b      	b.n	800514e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d36:	4b57      	ldr	r3, [pc, #348]	@ (8004e94 <HAL_RCC_OscConfig+0x274>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1f0      	bne.n	8004d24 <HAL_RCC_OscConfig+0x104>
 8004d42:	e000      	b.n	8004d46 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d06f      	beq.n	8004e32 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004d52:	4b50      	ldr	r3, [pc, #320]	@ (8004e94 <HAL_RCC_OscConfig+0x274>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f003 030c 	and.w	r3, r3, #12
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d017      	beq.n	8004d8e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004d5e:	4b4d      	ldr	r3, [pc, #308]	@ (8004e94 <HAL_RCC_OscConfig+0x274>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 030c 	and.w	r3, r3, #12
        || \
 8004d66:	2b08      	cmp	r3, #8
 8004d68:	d105      	bne.n	8004d76 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004d6a:	4b4a      	ldr	r3, [pc, #296]	@ (8004e94 <HAL_RCC_OscConfig+0x274>)
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00b      	beq.n	8004d8e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d76:	4b47      	ldr	r3, [pc, #284]	@ (8004e94 <HAL_RCC_OscConfig+0x274>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004d7e:	2b0c      	cmp	r3, #12
 8004d80:	d11c      	bne.n	8004dbc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d82:	4b44      	ldr	r3, [pc, #272]	@ (8004e94 <HAL_RCC_OscConfig+0x274>)
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d116      	bne.n	8004dbc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d8e:	4b41      	ldr	r3, [pc, #260]	@ (8004e94 <HAL_RCC_OscConfig+0x274>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d005      	beq.n	8004da6 <HAL_RCC_OscConfig+0x186>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d001      	beq.n	8004da6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e1d3      	b.n	800514e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004da6:	4b3b      	ldr	r3, [pc, #236]	@ (8004e94 <HAL_RCC_OscConfig+0x274>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	00db      	lsls	r3, r3, #3
 8004db4:	4937      	ldr	r1, [pc, #220]	@ (8004e94 <HAL_RCC_OscConfig+0x274>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dba:	e03a      	b.n	8004e32 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d020      	beq.n	8004e06 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dc4:	4b34      	ldr	r3, [pc, #208]	@ (8004e98 <HAL_RCC_OscConfig+0x278>)
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dca:	f7fe fc01 	bl	80035d0 <HAL_GetTick>
 8004dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dd0:	e008      	b.n	8004de4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dd2:	f7fe fbfd 	bl	80035d0 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d901      	bls.n	8004de4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e1b4      	b.n	800514e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004de4:	4b2b      	ldr	r3, [pc, #172]	@ (8004e94 <HAL_RCC_OscConfig+0x274>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0302 	and.w	r3, r3, #2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d0f0      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004df0:	4b28      	ldr	r3, [pc, #160]	@ (8004e94 <HAL_RCC_OscConfig+0x274>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	00db      	lsls	r3, r3, #3
 8004dfe:	4925      	ldr	r1, [pc, #148]	@ (8004e94 <HAL_RCC_OscConfig+0x274>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	600b      	str	r3, [r1, #0]
 8004e04:	e015      	b.n	8004e32 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e06:	4b24      	ldr	r3, [pc, #144]	@ (8004e98 <HAL_RCC_OscConfig+0x278>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e0c:	f7fe fbe0 	bl	80035d0 <HAL_GetTick>
 8004e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e12:	e008      	b.n	8004e26 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e14:	f7fe fbdc 	bl	80035d0 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e193      	b.n	800514e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e26:	4b1b      	ldr	r3, [pc, #108]	@ (8004e94 <HAL_RCC_OscConfig+0x274>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1f0      	bne.n	8004e14 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0308 	and.w	r3, r3, #8
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d036      	beq.n	8004eac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d016      	beq.n	8004e74 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e46:	4b15      	ldr	r3, [pc, #84]	@ (8004e9c <HAL_RCC_OscConfig+0x27c>)
 8004e48:	2201      	movs	r2, #1
 8004e4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e4c:	f7fe fbc0 	bl	80035d0 <HAL_GetTick>
 8004e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e52:	e008      	b.n	8004e66 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e54:	f7fe fbbc 	bl	80035d0 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e173      	b.n	800514e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e66:	4b0b      	ldr	r3, [pc, #44]	@ (8004e94 <HAL_RCC_OscConfig+0x274>)
 8004e68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d0f0      	beq.n	8004e54 <HAL_RCC_OscConfig+0x234>
 8004e72:	e01b      	b.n	8004eac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e74:	4b09      	ldr	r3, [pc, #36]	@ (8004e9c <HAL_RCC_OscConfig+0x27c>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e7a:	f7fe fba9 	bl	80035d0 <HAL_GetTick>
 8004e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e80:	e00e      	b.n	8004ea0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e82:	f7fe fba5 	bl	80035d0 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d907      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e15c      	b.n	800514e <HAL_RCC_OscConfig+0x52e>
 8004e94:	40023800 	.word	0x40023800
 8004e98:	42470000 	.word	0x42470000
 8004e9c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ea0:	4b8a      	ldr	r3, [pc, #552]	@ (80050cc <HAL_RCC_OscConfig+0x4ac>)
 8004ea2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1ea      	bne.n	8004e82 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0304 	and.w	r3, r3, #4
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f000 8097 	beq.w	8004fe8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ebe:	4b83      	ldr	r3, [pc, #524]	@ (80050cc <HAL_RCC_OscConfig+0x4ac>)
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10f      	bne.n	8004eea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eca:	2300      	movs	r3, #0
 8004ecc:	60bb      	str	r3, [r7, #8]
 8004ece:	4b7f      	ldr	r3, [pc, #508]	@ (80050cc <HAL_RCC_OscConfig+0x4ac>)
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed2:	4a7e      	ldr	r2, [pc, #504]	@ (80050cc <HAL_RCC_OscConfig+0x4ac>)
 8004ed4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ed8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004eda:	4b7c      	ldr	r3, [pc, #496]	@ (80050cc <HAL_RCC_OscConfig+0x4ac>)
 8004edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ede:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ee2:	60bb      	str	r3, [r7, #8]
 8004ee4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eea:	4b79      	ldr	r3, [pc, #484]	@ (80050d0 <HAL_RCC_OscConfig+0x4b0>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d118      	bne.n	8004f28 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ef6:	4b76      	ldr	r3, [pc, #472]	@ (80050d0 <HAL_RCC_OscConfig+0x4b0>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a75      	ldr	r2, [pc, #468]	@ (80050d0 <HAL_RCC_OscConfig+0x4b0>)
 8004efc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f02:	f7fe fb65 	bl	80035d0 <HAL_GetTick>
 8004f06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f08:	e008      	b.n	8004f1c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f0a:	f7fe fb61 	bl	80035d0 <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d901      	bls.n	8004f1c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e118      	b.n	800514e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f1c:	4b6c      	ldr	r3, [pc, #432]	@ (80050d0 <HAL_RCC_OscConfig+0x4b0>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d0f0      	beq.n	8004f0a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d106      	bne.n	8004f3e <HAL_RCC_OscConfig+0x31e>
 8004f30:	4b66      	ldr	r3, [pc, #408]	@ (80050cc <HAL_RCC_OscConfig+0x4ac>)
 8004f32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f34:	4a65      	ldr	r2, [pc, #404]	@ (80050cc <HAL_RCC_OscConfig+0x4ac>)
 8004f36:	f043 0301 	orr.w	r3, r3, #1
 8004f3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f3c:	e01c      	b.n	8004f78 <HAL_RCC_OscConfig+0x358>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	2b05      	cmp	r3, #5
 8004f44:	d10c      	bne.n	8004f60 <HAL_RCC_OscConfig+0x340>
 8004f46:	4b61      	ldr	r3, [pc, #388]	@ (80050cc <HAL_RCC_OscConfig+0x4ac>)
 8004f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f4a:	4a60      	ldr	r2, [pc, #384]	@ (80050cc <HAL_RCC_OscConfig+0x4ac>)
 8004f4c:	f043 0304 	orr.w	r3, r3, #4
 8004f50:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f52:	4b5e      	ldr	r3, [pc, #376]	@ (80050cc <HAL_RCC_OscConfig+0x4ac>)
 8004f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f56:	4a5d      	ldr	r2, [pc, #372]	@ (80050cc <HAL_RCC_OscConfig+0x4ac>)
 8004f58:	f043 0301 	orr.w	r3, r3, #1
 8004f5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f5e:	e00b      	b.n	8004f78 <HAL_RCC_OscConfig+0x358>
 8004f60:	4b5a      	ldr	r3, [pc, #360]	@ (80050cc <HAL_RCC_OscConfig+0x4ac>)
 8004f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f64:	4a59      	ldr	r2, [pc, #356]	@ (80050cc <HAL_RCC_OscConfig+0x4ac>)
 8004f66:	f023 0301 	bic.w	r3, r3, #1
 8004f6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f6c:	4b57      	ldr	r3, [pc, #348]	@ (80050cc <HAL_RCC_OscConfig+0x4ac>)
 8004f6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f70:	4a56      	ldr	r2, [pc, #344]	@ (80050cc <HAL_RCC_OscConfig+0x4ac>)
 8004f72:	f023 0304 	bic.w	r3, r3, #4
 8004f76:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d015      	beq.n	8004fac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f80:	f7fe fb26 	bl	80035d0 <HAL_GetTick>
 8004f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f86:	e00a      	b.n	8004f9e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f88:	f7fe fb22 	bl	80035d0 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e0d7      	b.n	800514e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f9e:	4b4b      	ldr	r3, [pc, #300]	@ (80050cc <HAL_RCC_OscConfig+0x4ac>)
 8004fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fa2:	f003 0302 	and.w	r3, r3, #2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d0ee      	beq.n	8004f88 <HAL_RCC_OscConfig+0x368>
 8004faa:	e014      	b.n	8004fd6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fac:	f7fe fb10 	bl	80035d0 <HAL_GetTick>
 8004fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fb2:	e00a      	b.n	8004fca <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fb4:	f7fe fb0c 	bl	80035d0 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e0c1      	b.n	800514e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fca:	4b40      	ldr	r3, [pc, #256]	@ (80050cc <HAL_RCC_OscConfig+0x4ac>)
 8004fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1ee      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004fd6:	7dfb      	ldrb	r3, [r7, #23]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d105      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fdc:	4b3b      	ldr	r3, [pc, #236]	@ (80050cc <HAL_RCC_OscConfig+0x4ac>)
 8004fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe0:	4a3a      	ldr	r2, [pc, #232]	@ (80050cc <HAL_RCC_OscConfig+0x4ac>)
 8004fe2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fe6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f000 80ad 	beq.w	800514c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ff2:	4b36      	ldr	r3, [pc, #216]	@ (80050cc <HAL_RCC_OscConfig+0x4ac>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f003 030c 	and.w	r3, r3, #12
 8004ffa:	2b08      	cmp	r3, #8
 8004ffc:	d060      	beq.n	80050c0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	2b02      	cmp	r3, #2
 8005004:	d145      	bne.n	8005092 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005006:	4b33      	ldr	r3, [pc, #204]	@ (80050d4 <HAL_RCC_OscConfig+0x4b4>)
 8005008:	2200      	movs	r2, #0
 800500a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800500c:	f7fe fae0 	bl	80035d0 <HAL_GetTick>
 8005010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005012:	e008      	b.n	8005026 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005014:	f7fe fadc 	bl	80035d0 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e093      	b.n	800514e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005026:	4b29      	ldr	r3, [pc, #164]	@ (80050cc <HAL_RCC_OscConfig+0x4ac>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1f0      	bne.n	8005014 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	69da      	ldr	r2, [r3, #28]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	431a      	orrs	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005040:	019b      	lsls	r3, r3, #6
 8005042:	431a      	orrs	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005048:	085b      	lsrs	r3, r3, #1
 800504a:	3b01      	subs	r3, #1
 800504c:	041b      	lsls	r3, r3, #16
 800504e:	431a      	orrs	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005054:	061b      	lsls	r3, r3, #24
 8005056:	431a      	orrs	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800505c:	071b      	lsls	r3, r3, #28
 800505e:	491b      	ldr	r1, [pc, #108]	@ (80050cc <HAL_RCC_OscConfig+0x4ac>)
 8005060:	4313      	orrs	r3, r2
 8005062:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005064:	4b1b      	ldr	r3, [pc, #108]	@ (80050d4 <HAL_RCC_OscConfig+0x4b4>)
 8005066:	2201      	movs	r2, #1
 8005068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800506a:	f7fe fab1 	bl	80035d0 <HAL_GetTick>
 800506e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005070:	e008      	b.n	8005084 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005072:	f7fe faad 	bl	80035d0 <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	2b02      	cmp	r3, #2
 800507e:	d901      	bls.n	8005084 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e064      	b.n	800514e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005084:	4b11      	ldr	r3, [pc, #68]	@ (80050cc <HAL_RCC_OscConfig+0x4ac>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d0f0      	beq.n	8005072 <HAL_RCC_OscConfig+0x452>
 8005090:	e05c      	b.n	800514c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005092:	4b10      	ldr	r3, [pc, #64]	@ (80050d4 <HAL_RCC_OscConfig+0x4b4>)
 8005094:	2200      	movs	r2, #0
 8005096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005098:	f7fe fa9a 	bl	80035d0 <HAL_GetTick>
 800509c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800509e:	e008      	b.n	80050b2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050a0:	f7fe fa96 	bl	80035d0 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e04d      	b.n	800514e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050b2:	4b06      	ldr	r3, [pc, #24]	@ (80050cc <HAL_RCC_OscConfig+0x4ac>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1f0      	bne.n	80050a0 <HAL_RCC_OscConfig+0x480>
 80050be:	e045      	b.n	800514c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d107      	bne.n	80050d8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e040      	b.n	800514e <HAL_RCC_OscConfig+0x52e>
 80050cc:	40023800 	.word	0x40023800
 80050d0:	40007000 	.word	0x40007000
 80050d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050d8:	4b1f      	ldr	r3, [pc, #124]	@ (8005158 <HAL_RCC_OscConfig+0x538>)
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d030      	beq.n	8005148 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d129      	bne.n	8005148 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050fe:	429a      	cmp	r2, r3
 8005100:	d122      	bne.n	8005148 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005108:	4013      	ands	r3, r2
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800510e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005110:	4293      	cmp	r3, r2
 8005112:	d119      	bne.n	8005148 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800511e:	085b      	lsrs	r3, r3, #1
 8005120:	3b01      	subs	r3, #1
 8005122:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005124:	429a      	cmp	r2, r3
 8005126:	d10f      	bne.n	8005148 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005132:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005134:	429a      	cmp	r2, r3
 8005136:	d107      	bne.n	8005148 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005142:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005144:	429a      	cmp	r2, r3
 8005146:	d001      	beq.n	800514c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e000      	b.n	800514e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3718      	adds	r7, #24
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	40023800 	.word	0x40023800

0800515c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e041      	b.n	80051f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d106      	bne.n	8005188 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7fd fe24 	bl	8002dd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2202      	movs	r2, #2
 800518c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	3304      	adds	r3, #4
 8005198:	4619      	mov	r1, r3
 800519a:	4610      	mov	r0, r2
 800519c:	f000 fd8c 	bl	8005cb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
	...

080051fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b01      	cmp	r3, #1
 800520e:	d001      	beq.n	8005214 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e04e      	b.n	80052b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2202      	movs	r2, #2
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68da      	ldr	r2, [r3, #12]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f042 0201 	orr.w	r2, r2, #1
 800522a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a23      	ldr	r2, [pc, #140]	@ (80052c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d022      	beq.n	800527c <HAL_TIM_Base_Start_IT+0x80>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800523e:	d01d      	beq.n	800527c <HAL_TIM_Base_Start_IT+0x80>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a1f      	ldr	r2, [pc, #124]	@ (80052c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d018      	beq.n	800527c <HAL_TIM_Base_Start_IT+0x80>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a1e      	ldr	r2, [pc, #120]	@ (80052c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d013      	beq.n	800527c <HAL_TIM_Base_Start_IT+0x80>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a1c      	ldr	r2, [pc, #112]	@ (80052cc <HAL_TIM_Base_Start_IT+0xd0>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d00e      	beq.n	800527c <HAL_TIM_Base_Start_IT+0x80>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a1b      	ldr	r2, [pc, #108]	@ (80052d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d009      	beq.n	800527c <HAL_TIM_Base_Start_IT+0x80>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a19      	ldr	r2, [pc, #100]	@ (80052d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d004      	beq.n	800527c <HAL_TIM_Base_Start_IT+0x80>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a18      	ldr	r2, [pc, #96]	@ (80052d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d111      	bne.n	80052a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f003 0307 	and.w	r3, r3, #7
 8005286:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2b06      	cmp	r3, #6
 800528c:	d010      	beq.n	80052b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f042 0201 	orr.w	r2, r2, #1
 800529c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800529e:	e007      	b.n	80052b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f042 0201 	orr.w	r2, r2, #1
 80052ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3714      	adds	r7, #20
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	40010000 	.word	0x40010000
 80052c4:	40000400 	.word	0x40000400
 80052c8:	40000800 	.word	0x40000800
 80052cc:	40000c00 	.word	0x40000c00
 80052d0:	40010400 	.word	0x40010400
 80052d4:	40014000 	.word	0x40014000
 80052d8:	40001800 	.word	0x40001800

080052dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e041      	b.n	8005372 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d106      	bne.n	8005308 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f7fd fd8c 	bl	8002e20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2202      	movs	r2, #2
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	3304      	adds	r3, #4
 8005318:	4619      	mov	r1, r3
 800531a:	4610      	mov	r0, r2
 800531c:	f000 fccc 	bl	8005cb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3708      	adds	r7, #8
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
	...

0800537c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d109      	bne.n	80053a0 <HAL_TIM_PWM_Start+0x24>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b01      	cmp	r3, #1
 8005396:	bf14      	ite	ne
 8005398:	2301      	movne	r3, #1
 800539a:	2300      	moveq	r3, #0
 800539c:	b2db      	uxtb	r3, r3
 800539e:	e022      	b.n	80053e6 <HAL_TIM_PWM_Start+0x6a>
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	2b04      	cmp	r3, #4
 80053a4:	d109      	bne.n	80053ba <HAL_TIM_PWM_Start+0x3e>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	bf14      	ite	ne
 80053b2:	2301      	movne	r3, #1
 80053b4:	2300      	moveq	r3, #0
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	e015      	b.n	80053e6 <HAL_TIM_PWM_Start+0x6a>
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	2b08      	cmp	r3, #8
 80053be:	d109      	bne.n	80053d4 <HAL_TIM_PWM_Start+0x58>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	bf14      	ite	ne
 80053cc:	2301      	movne	r3, #1
 80053ce:	2300      	moveq	r3, #0
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	e008      	b.n	80053e6 <HAL_TIM_PWM_Start+0x6a>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b01      	cmp	r3, #1
 80053de:	bf14      	ite	ne
 80053e0:	2301      	movne	r3, #1
 80053e2:	2300      	moveq	r3, #0
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d001      	beq.n	80053ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e07c      	b.n	80054e8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d104      	bne.n	80053fe <HAL_TIM_PWM_Start+0x82>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2202      	movs	r2, #2
 80053f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053fc:	e013      	b.n	8005426 <HAL_TIM_PWM_Start+0xaa>
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b04      	cmp	r3, #4
 8005402:	d104      	bne.n	800540e <HAL_TIM_PWM_Start+0x92>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2202      	movs	r2, #2
 8005408:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800540c:	e00b      	b.n	8005426 <HAL_TIM_PWM_Start+0xaa>
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	2b08      	cmp	r3, #8
 8005412:	d104      	bne.n	800541e <HAL_TIM_PWM_Start+0xa2>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2202      	movs	r2, #2
 8005418:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800541c:	e003      	b.n	8005426 <HAL_TIM_PWM_Start+0xaa>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2202      	movs	r2, #2
 8005422:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2201      	movs	r2, #1
 800542c:	6839      	ldr	r1, [r7, #0]
 800542e:	4618      	mov	r0, r3
 8005430:	f000 ff32 	bl	8006298 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a2d      	ldr	r2, [pc, #180]	@ (80054f0 <HAL_TIM_PWM_Start+0x174>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d004      	beq.n	8005448 <HAL_TIM_PWM_Start+0xcc>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a2c      	ldr	r2, [pc, #176]	@ (80054f4 <HAL_TIM_PWM_Start+0x178>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d101      	bne.n	800544c <HAL_TIM_PWM_Start+0xd0>
 8005448:	2301      	movs	r3, #1
 800544a:	e000      	b.n	800544e <HAL_TIM_PWM_Start+0xd2>
 800544c:	2300      	movs	r3, #0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d007      	beq.n	8005462 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005460:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a22      	ldr	r2, [pc, #136]	@ (80054f0 <HAL_TIM_PWM_Start+0x174>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d022      	beq.n	80054b2 <HAL_TIM_PWM_Start+0x136>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005474:	d01d      	beq.n	80054b2 <HAL_TIM_PWM_Start+0x136>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a1f      	ldr	r2, [pc, #124]	@ (80054f8 <HAL_TIM_PWM_Start+0x17c>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d018      	beq.n	80054b2 <HAL_TIM_PWM_Start+0x136>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a1d      	ldr	r2, [pc, #116]	@ (80054fc <HAL_TIM_PWM_Start+0x180>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d013      	beq.n	80054b2 <HAL_TIM_PWM_Start+0x136>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a1c      	ldr	r2, [pc, #112]	@ (8005500 <HAL_TIM_PWM_Start+0x184>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d00e      	beq.n	80054b2 <HAL_TIM_PWM_Start+0x136>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a16      	ldr	r2, [pc, #88]	@ (80054f4 <HAL_TIM_PWM_Start+0x178>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d009      	beq.n	80054b2 <HAL_TIM_PWM_Start+0x136>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a18      	ldr	r2, [pc, #96]	@ (8005504 <HAL_TIM_PWM_Start+0x188>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d004      	beq.n	80054b2 <HAL_TIM_PWM_Start+0x136>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a16      	ldr	r2, [pc, #88]	@ (8005508 <HAL_TIM_PWM_Start+0x18c>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d111      	bne.n	80054d6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f003 0307 	and.w	r3, r3, #7
 80054bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2b06      	cmp	r3, #6
 80054c2:	d010      	beq.n	80054e6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f042 0201 	orr.w	r2, r2, #1
 80054d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054d4:	e007      	b.n	80054e6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f042 0201 	orr.w	r2, r2, #1
 80054e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	40010000 	.word	0x40010000
 80054f4:	40010400 	.word	0x40010400
 80054f8:	40000400 	.word	0x40000400
 80054fc:	40000800 	.word	0x40000800
 8005500:	40000c00 	.word	0x40000c00
 8005504:	40014000 	.word	0x40014000
 8005508:	40001800 	.word	0x40001800

0800550c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b086      	sub	sp, #24
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d101      	bne.n	8005520 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e097      	b.n	8005650 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005526:	b2db      	uxtb	r3, r3
 8005528:	2b00      	cmp	r3, #0
 800552a:	d106      	bne.n	800553a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f7fd fc03 	bl	8002d40 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2202      	movs	r2, #2
 800553e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	6812      	ldr	r2, [r2, #0]
 800554c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005550:	f023 0307 	bic.w	r3, r3, #7
 8005554:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	3304      	adds	r3, #4
 800555e:	4619      	mov	r1, r3
 8005560:	4610      	mov	r0, r2
 8005562:	f000 fba9 	bl	8005cb8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	4313      	orrs	r3, r2
 8005586:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800558e:	f023 0303 	bic.w	r3, r3, #3
 8005592:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	689a      	ldr	r2, [r3, #8]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	021b      	lsls	r3, r3, #8
 800559e:	4313      	orrs	r3, r2
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80055ac:	f023 030c 	bic.w	r3, r3, #12
 80055b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80055b8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	68da      	ldr	r2, [r3, #12]
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	69db      	ldr	r3, [r3, #28]
 80055c6:	021b      	lsls	r3, r3, #8
 80055c8:	4313      	orrs	r3, r2
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	011a      	lsls	r2, r3, #4
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	6a1b      	ldr	r3, [r3, #32]
 80055da:	031b      	lsls	r3, r3, #12
 80055dc:	4313      	orrs	r3, r2
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80055ea:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80055f2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	685a      	ldr	r2, [r3, #4]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	011b      	lsls	r3, r3, #4
 80055fe:	4313      	orrs	r3, r2
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	4313      	orrs	r3, r2
 8005604:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	3718      	adds	r7, #24
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005668:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005670:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005678:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005680:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d110      	bne.n	80056aa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005688:	7bfb      	ldrb	r3, [r7, #15]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d102      	bne.n	8005694 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800568e:	7b7b      	ldrb	r3, [r7, #13]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d001      	beq.n	8005698 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e069      	b.n	800576c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2202      	movs	r2, #2
 800569c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2202      	movs	r2, #2
 80056a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056a8:	e031      	b.n	800570e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	2b04      	cmp	r3, #4
 80056ae:	d110      	bne.n	80056d2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80056b0:	7bbb      	ldrb	r3, [r7, #14]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d102      	bne.n	80056bc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80056b6:	7b3b      	ldrb	r3, [r7, #12]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d001      	beq.n	80056c0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e055      	b.n	800576c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2202      	movs	r2, #2
 80056c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2202      	movs	r2, #2
 80056cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80056d0:	e01d      	b.n	800570e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056d2:	7bfb      	ldrb	r3, [r7, #15]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d108      	bne.n	80056ea <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80056d8:	7bbb      	ldrb	r3, [r7, #14]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d105      	bne.n	80056ea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056de:	7b7b      	ldrb	r3, [r7, #13]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d102      	bne.n	80056ea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80056e4:	7b3b      	ldrb	r3, [r7, #12]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d001      	beq.n	80056ee <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e03e      	b.n	800576c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2202      	movs	r2, #2
 80056f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2202      	movs	r2, #2
 80056fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2202      	movs	r2, #2
 8005702:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2202      	movs	r2, #2
 800570a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d003      	beq.n	800571c <HAL_TIM_Encoder_Start+0xc4>
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	2b04      	cmp	r3, #4
 8005718:	d008      	beq.n	800572c <HAL_TIM_Encoder_Start+0xd4>
 800571a:	e00f      	b.n	800573c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2201      	movs	r2, #1
 8005722:	2100      	movs	r1, #0
 8005724:	4618      	mov	r0, r3
 8005726:	f000 fdb7 	bl	8006298 <TIM_CCxChannelCmd>
      break;
 800572a:	e016      	b.n	800575a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2201      	movs	r2, #1
 8005732:	2104      	movs	r1, #4
 8005734:	4618      	mov	r0, r3
 8005736:	f000 fdaf 	bl	8006298 <TIM_CCxChannelCmd>
      break;
 800573a:	e00e      	b.n	800575a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2201      	movs	r2, #1
 8005742:	2100      	movs	r1, #0
 8005744:	4618      	mov	r0, r3
 8005746:	f000 fda7 	bl	8006298 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2201      	movs	r2, #1
 8005750:	2104      	movs	r1, #4
 8005752:	4618      	mov	r0, r3
 8005754:	f000 fda0 	bl	8006298 <TIM_CCxChannelCmd>
      break;
 8005758:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f042 0201 	orr.w	r2, r2, #1
 8005768:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	f003 0302 	and.w	r3, r3, #2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d020      	beq.n	80057d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f003 0302 	and.w	r3, r3, #2
 800579c:	2b00      	cmp	r3, #0
 800579e:	d01b      	beq.n	80057d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f06f 0202 	mvn.w	r2, #2
 80057a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	f003 0303 	and.w	r3, r3, #3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d003      	beq.n	80057c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 fa5b 	bl	8005c7a <HAL_TIM_IC_CaptureCallback>
 80057c4:	e005      	b.n	80057d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 fa4d 	bl	8005c66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 fa5e 	bl	8005c8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	f003 0304 	and.w	r3, r3, #4
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d020      	beq.n	8005824 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f003 0304 	and.w	r3, r3, #4
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d01b      	beq.n	8005824 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f06f 0204 	mvn.w	r2, #4
 80057f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2202      	movs	r2, #2
 80057fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 fa35 	bl	8005c7a <HAL_TIM_IC_CaptureCallback>
 8005810:	e005      	b.n	800581e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 fa27 	bl	8005c66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 fa38 	bl	8005c8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	f003 0308 	and.w	r3, r3, #8
 800582a:	2b00      	cmp	r3, #0
 800582c:	d020      	beq.n	8005870 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f003 0308 	and.w	r3, r3, #8
 8005834:	2b00      	cmp	r3, #0
 8005836:	d01b      	beq.n	8005870 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f06f 0208 	mvn.w	r2, #8
 8005840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2204      	movs	r2, #4
 8005846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	69db      	ldr	r3, [r3, #28]
 800584e:	f003 0303 	and.w	r3, r3, #3
 8005852:	2b00      	cmp	r3, #0
 8005854:	d003      	beq.n	800585e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 fa0f 	bl	8005c7a <HAL_TIM_IC_CaptureCallback>
 800585c:	e005      	b.n	800586a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 fa01 	bl	8005c66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 fa12 	bl	8005c8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	f003 0310 	and.w	r3, r3, #16
 8005876:	2b00      	cmp	r3, #0
 8005878:	d020      	beq.n	80058bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f003 0310 	and.w	r3, r3, #16
 8005880:	2b00      	cmp	r3, #0
 8005882:	d01b      	beq.n	80058bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f06f 0210 	mvn.w	r2, #16
 800588c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2208      	movs	r2, #8
 8005892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f9e9 	bl	8005c7a <HAL_TIM_IC_CaptureCallback>
 80058a8:	e005      	b.n	80058b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f9db 	bl	8005c66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 f9ec 	bl	8005c8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	f003 0301 	and.w	r3, r3, #1
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00c      	beq.n	80058e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f003 0301 	and.w	r3, r3, #1
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d007      	beq.n	80058e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f06f 0201 	mvn.w	r2, #1
 80058d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f7fd fdfe 	bl	80034dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00c      	beq.n	8005904 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d007      	beq.n	8005904 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80058fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 fd76 	bl	80063f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00c      	beq.n	8005928 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005914:	2b00      	cmp	r3, #0
 8005916:	d007      	beq.n	8005928 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f9bd 	bl	8005ca2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	f003 0320 	and.w	r3, r3, #32
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00c      	beq.n	800594c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f003 0320 	and.w	r3, r3, #32
 8005938:	2b00      	cmp	r3, #0
 800593a:	d007      	beq.n	800594c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f06f 0220 	mvn.w	r2, #32
 8005944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 fd48 	bl	80063dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800594c:	bf00      	nop
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b086      	sub	sp, #24
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005960:	2300      	movs	r3, #0
 8005962:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800596a:	2b01      	cmp	r3, #1
 800596c:	d101      	bne.n	8005972 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800596e:	2302      	movs	r3, #2
 8005970:	e0ae      	b.n	8005ad0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2b0c      	cmp	r3, #12
 800597e:	f200 809f 	bhi.w	8005ac0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005982:	a201      	add	r2, pc, #4	@ (adr r2, 8005988 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005988:	080059bd 	.word	0x080059bd
 800598c:	08005ac1 	.word	0x08005ac1
 8005990:	08005ac1 	.word	0x08005ac1
 8005994:	08005ac1 	.word	0x08005ac1
 8005998:	080059fd 	.word	0x080059fd
 800599c:	08005ac1 	.word	0x08005ac1
 80059a0:	08005ac1 	.word	0x08005ac1
 80059a4:	08005ac1 	.word	0x08005ac1
 80059a8:	08005a3f 	.word	0x08005a3f
 80059ac:	08005ac1 	.word	0x08005ac1
 80059b0:	08005ac1 	.word	0x08005ac1
 80059b4:	08005ac1 	.word	0x08005ac1
 80059b8:	08005a7f 	.word	0x08005a7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68b9      	ldr	r1, [r7, #8]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 fa1e 	bl	8005e04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	699a      	ldr	r2, [r3, #24]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f042 0208 	orr.w	r2, r2, #8
 80059d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	699a      	ldr	r2, [r3, #24]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f022 0204 	bic.w	r2, r2, #4
 80059e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6999      	ldr	r1, [r3, #24]
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	691a      	ldr	r2, [r3, #16]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	430a      	orrs	r2, r1
 80059f8:	619a      	str	r2, [r3, #24]
      break;
 80059fa:	e064      	b.n	8005ac6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68b9      	ldr	r1, [r7, #8]
 8005a02:	4618      	mov	r0, r3
 8005a04:	f000 fa6e 	bl	8005ee4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	699a      	ldr	r2, [r3, #24]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	699a      	ldr	r2, [r3, #24]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	6999      	ldr	r1, [r3, #24]
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	021a      	lsls	r2, r3, #8
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	619a      	str	r2, [r3, #24]
      break;
 8005a3c:	e043      	b.n	8005ac6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68b9      	ldr	r1, [r7, #8]
 8005a44:	4618      	mov	r0, r3
 8005a46:	f000 fac3 	bl	8005fd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	69da      	ldr	r2, [r3, #28]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f042 0208 	orr.w	r2, r2, #8
 8005a58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	69da      	ldr	r2, [r3, #28]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f022 0204 	bic.w	r2, r2, #4
 8005a68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	69d9      	ldr	r1, [r3, #28]
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	691a      	ldr	r2, [r3, #16]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	61da      	str	r2, [r3, #28]
      break;
 8005a7c:	e023      	b.n	8005ac6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68b9      	ldr	r1, [r7, #8]
 8005a84:	4618      	mov	r0, r3
 8005a86:	f000 fb17 	bl	80060b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	69da      	ldr	r2, [r3, #28]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	69da      	ldr	r2, [r3, #28]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005aa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	69d9      	ldr	r1, [r3, #28]
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	021a      	lsls	r2, r3, #8
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	61da      	str	r2, [r3, #28]
      break;
 8005abe:	e002      	b.n	8005ac6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ac4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ace:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3718      	adds	r7, #24
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d101      	bne.n	8005af4 <HAL_TIM_ConfigClockSource+0x1c>
 8005af0:	2302      	movs	r3, #2
 8005af2:	e0b4      	b.n	8005c5e <HAL_TIM_ConfigClockSource+0x186>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2202      	movs	r2, #2
 8005b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005b12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b2c:	d03e      	beq.n	8005bac <HAL_TIM_ConfigClockSource+0xd4>
 8005b2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b32:	f200 8087 	bhi.w	8005c44 <HAL_TIM_ConfigClockSource+0x16c>
 8005b36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b3a:	f000 8086 	beq.w	8005c4a <HAL_TIM_ConfigClockSource+0x172>
 8005b3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b42:	d87f      	bhi.n	8005c44 <HAL_TIM_ConfigClockSource+0x16c>
 8005b44:	2b70      	cmp	r3, #112	@ 0x70
 8005b46:	d01a      	beq.n	8005b7e <HAL_TIM_ConfigClockSource+0xa6>
 8005b48:	2b70      	cmp	r3, #112	@ 0x70
 8005b4a:	d87b      	bhi.n	8005c44 <HAL_TIM_ConfigClockSource+0x16c>
 8005b4c:	2b60      	cmp	r3, #96	@ 0x60
 8005b4e:	d050      	beq.n	8005bf2 <HAL_TIM_ConfigClockSource+0x11a>
 8005b50:	2b60      	cmp	r3, #96	@ 0x60
 8005b52:	d877      	bhi.n	8005c44 <HAL_TIM_ConfigClockSource+0x16c>
 8005b54:	2b50      	cmp	r3, #80	@ 0x50
 8005b56:	d03c      	beq.n	8005bd2 <HAL_TIM_ConfigClockSource+0xfa>
 8005b58:	2b50      	cmp	r3, #80	@ 0x50
 8005b5a:	d873      	bhi.n	8005c44 <HAL_TIM_ConfigClockSource+0x16c>
 8005b5c:	2b40      	cmp	r3, #64	@ 0x40
 8005b5e:	d058      	beq.n	8005c12 <HAL_TIM_ConfigClockSource+0x13a>
 8005b60:	2b40      	cmp	r3, #64	@ 0x40
 8005b62:	d86f      	bhi.n	8005c44 <HAL_TIM_ConfigClockSource+0x16c>
 8005b64:	2b30      	cmp	r3, #48	@ 0x30
 8005b66:	d064      	beq.n	8005c32 <HAL_TIM_ConfigClockSource+0x15a>
 8005b68:	2b30      	cmp	r3, #48	@ 0x30
 8005b6a:	d86b      	bhi.n	8005c44 <HAL_TIM_ConfigClockSource+0x16c>
 8005b6c:	2b20      	cmp	r3, #32
 8005b6e:	d060      	beq.n	8005c32 <HAL_TIM_ConfigClockSource+0x15a>
 8005b70:	2b20      	cmp	r3, #32
 8005b72:	d867      	bhi.n	8005c44 <HAL_TIM_ConfigClockSource+0x16c>
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d05c      	beq.n	8005c32 <HAL_TIM_ConfigClockSource+0x15a>
 8005b78:	2b10      	cmp	r3, #16
 8005b7a:	d05a      	beq.n	8005c32 <HAL_TIM_ConfigClockSource+0x15a>
 8005b7c:	e062      	b.n	8005c44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b8e:	f000 fb63 	bl	8006258 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005ba0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	609a      	str	r2, [r3, #8]
      break;
 8005baa:	e04f      	b.n	8005c4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005bbc:	f000 fb4c 	bl	8006258 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689a      	ldr	r2, [r3, #8]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005bce:	609a      	str	r2, [r3, #8]
      break;
 8005bd0:	e03c      	b.n	8005c4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bde:	461a      	mov	r2, r3
 8005be0:	f000 fac0 	bl	8006164 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2150      	movs	r1, #80	@ 0x50
 8005bea:	4618      	mov	r0, r3
 8005bec:	f000 fb19 	bl	8006222 <TIM_ITRx_SetConfig>
      break;
 8005bf0:	e02c      	b.n	8005c4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bfe:	461a      	mov	r2, r3
 8005c00:	f000 fadf 	bl	80061c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2160      	movs	r1, #96	@ 0x60
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f000 fb09 	bl	8006222 <TIM_ITRx_SetConfig>
      break;
 8005c10:	e01c      	b.n	8005c4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c1e:	461a      	mov	r2, r3
 8005c20:	f000 faa0 	bl	8006164 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2140      	movs	r1, #64	@ 0x40
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f000 faf9 	bl	8006222 <TIM_ITRx_SetConfig>
      break;
 8005c30:	e00c      	b.n	8005c4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	4610      	mov	r0, r2
 8005c3e:	f000 faf0 	bl	8006222 <TIM_ITRx_SetConfig>
      break;
 8005c42:	e003      	b.n	8005c4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	73fb      	strb	r3, [r7, #15]
      break;
 8005c48:	e000      	b.n	8005c4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3710      	adds	r7, #16
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c66:	b480      	push	{r7}
 8005c68:	b083      	sub	sp, #12
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c6e:	bf00      	nop
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr

08005c7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c7a:	b480      	push	{r7}
 8005c7c:	b083      	sub	sp, #12
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c82:	bf00      	nop
 8005c84:	370c      	adds	r7, #12
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr

08005c8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b083      	sub	sp, #12
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c96:	bf00      	nop
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ca2:	b480      	push	{r7}
 8005ca4:	b083      	sub	sp, #12
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005caa:	bf00      	nop
 8005cac:	370c      	adds	r7, #12
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
	...

08005cb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a43      	ldr	r2, [pc, #268]	@ (8005dd8 <TIM_Base_SetConfig+0x120>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d013      	beq.n	8005cf8 <TIM_Base_SetConfig+0x40>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cd6:	d00f      	beq.n	8005cf8 <TIM_Base_SetConfig+0x40>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a40      	ldr	r2, [pc, #256]	@ (8005ddc <TIM_Base_SetConfig+0x124>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d00b      	beq.n	8005cf8 <TIM_Base_SetConfig+0x40>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a3f      	ldr	r2, [pc, #252]	@ (8005de0 <TIM_Base_SetConfig+0x128>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d007      	beq.n	8005cf8 <TIM_Base_SetConfig+0x40>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a3e      	ldr	r2, [pc, #248]	@ (8005de4 <TIM_Base_SetConfig+0x12c>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d003      	beq.n	8005cf8 <TIM_Base_SetConfig+0x40>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a3d      	ldr	r2, [pc, #244]	@ (8005de8 <TIM_Base_SetConfig+0x130>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d108      	bne.n	8005d0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a32      	ldr	r2, [pc, #200]	@ (8005dd8 <TIM_Base_SetConfig+0x120>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d02b      	beq.n	8005d6a <TIM_Base_SetConfig+0xb2>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d18:	d027      	beq.n	8005d6a <TIM_Base_SetConfig+0xb2>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a2f      	ldr	r2, [pc, #188]	@ (8005ddc <TIM_Base_SetConfig+0x124>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d023      	beq.n	8005d6a <TIM_Base_SetConfig+0xb2>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a2e      	ldr	r2, [pc, #184]	@ (8005de0 <TIM_Base_SetConfig+0x128>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d01f      	beq.n	8005d6a <TIM_Base_SetConfig+0xb2>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a2d      	ldr	r2, [pc, #180]	@ (8005de4 <TIM_Base_SetConfig+0x12c>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d01b      	beq.n	8005d6a <TIM_Base_SetConfig+0xb2>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a2c      	ldr	r2, [pc, #176]	@ (8005de8 <TIM_Base_SetConfig+0x130>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d017      	beq.n	8005d6a <TIM_Base_SetConfig+0xb2>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a2b      	ldr	r2, [pc, #172]	@ (8005dec <TIM_Base_SetConfig+0x134>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d013      	beq.n	8005d6a <TIM_Base_SetConfig+0xb2>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a2a      	ldr	r2, [pc, #168]	@ (8005df0 <TIM_Base_SetConfig+0x138>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d00f      	beq.n	8005d6a <TIM_Base_SetConfig+0xb2>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a29      	ldr	r2, [pc, #164]	@ (8005df4 <TIM_Base_SetConfig+0x13c>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d00b      	beq.n	8005d6a <TIM_Base_SetConfig+0xb2>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a28      	ldr	r2, [pc, #160]	@ (8005df8 <TIM_Base_SetConfig+0x140>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d007      	beq.n	8005d6a <TIM_Base_SetConfig+0xb2>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a27      	ldr	r2, [pc, #156]	@ (8005dfc <TIM_Base_SetConfig+0x144>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d003      	beq.n	8005d6a <TIM_Base_SetConfig+0xb2>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a26      	ldr	r2, [pc, #152]	@ (8005e00 <TIM_Base_SetConfig+0x148>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d108      	bne.n	8005d7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	689a      	ldr	r2, [r3, #8]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a0e      	ldr	r2, [pc, #56]	@ (8005dd8 <TIM_Base_SetConfig+0x120>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d003      	beq.n	8005daa <TIM_Base_SetConfig+0xf2>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a10      	ldr	r2, [pc, #64]	@ (8005de8 <TIM_Base_SetConfig+0x130>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d103      	bne.n	8005db2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	691a      	ldr	r2, [r3, #16]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f043 0204 	orr.w	r2, r3, #4
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	601a      	str	r2, [r3, #0]
}
 8005dca:	bf00      	nop
 8005dcc:	3714      	adds	r7, #20
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	40010000 	.word	0x40010000
 8005ddc:	40000400 	.word	0x40000400
 8005de0:	40000800 	.word	0x40000800
 8005de4:	40000c00 	.word	0x40000c00
 8005de8:	40010400 	.word	0x40010400
 8005dec:	40014000 	.word	0x40014000
 8005df0:	40014400 	.word	0x40014400
 8005df4:	40014800 	.word	0x40014800
 8005df8:	40001800 	.word	0x40001800
 8005dfc:	40001c00 	.word	0x40001c00
 8005e00:	40002000 	.word	0x40002000

08005e04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b087      	sub	sp, #28
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a1b      	ldr	r3, [r3, #32]
 8005e18:	f023 0201 	bic.w	r2, r3, #1
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f023 0303 	bic.w	r3, r3, #3
 8005e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	f023 0302 	bic.w	r3, r3, #2
 8005e4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a20      	ldr	r2, [pc, #128]	@ (8005edc <TIM_OC1_SetConfig+0xd8>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d003      	beq.n	8005e68 <TIM_OC1_SetConfig+0x64>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a1f      	ldr	r2, [pc, #124]	@ (8005ee0 <TIM_OC1_SetConfig+0xdc>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d10c      	bne.n	8005e82 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	f023 0308 	bic.w	r3, r3, #8
 8005e6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	f023 0304 	bic.w	r3, r3, #4
 8005e80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a15      	ldr	r2, [pc, #84]	@ (8005edc <TIM_OC1_SetConfig+0xd8>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d003      	beq.n	8005e92 <TIM_OC1_SetConfig+0x8e>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a14      	ldr	r2, [pc, #80]	@ (8005ee0 <TIM_OC1_SetConfig+0xdc>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d111      	bne.n	8005eb6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	685a      	ldr	r2, [r3, #4]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	621a      	str	r2, [r3, #32]
}
 8005ed0:	bf00      	nop
 8005ed2:	371c      	adds	r7, #28
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr
 8005edc:	40010000 	.word	0x40010000
 8005ee0:	40010400 	.word	0x40010400

08005ee4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b087      	sub	sp, #28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a1b      	ldr	r3, [r3, #32]
 8005ef2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a1b      	ldr	r3, [r3, #32]
 8005ef8:	f023 0210 	bic.w	r2, r3, #16
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	021b      	lsls	r3, r3, #8
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	f023 0320 	bic.w	r3, r3, #32
 8005f2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	011b      	lsls	r3, r3, #4
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a22      	ldr	r2, [pc, #136]	@ (8005fc8 <TIM_OC2_SetConfig+0xe4>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d003      	beq.n	8005f4c <TIM_OC2_SetConfig+0x68>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a21      	ldr	r2, [pc, #132]	@ (8005fcc <TIM_OC2_SetConfig+0xe8>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d10d      	bne.n	8005f68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	011b      	lsls	r3, r3, #4
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a17      	ldr	r2, [pc, #92]	@ (8005fc8 <TIM_OC2_SetConfig+0xe4>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d003      	beq.n	8005f78 <TIM_OC2_SetConfig+0x94>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a16      	ldr	r2, [pc, #88]	@ (8005fcc <TIM_OC2_SetConfig+0xe8>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d113      	bne.n	8005fa0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	695b      	ldr	r3, [r3, #20]
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	693a      	ldr	r2, [r7, #16]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	685a      	ldr	r2, [r3, #4]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	621a      	str	r2, [r3, #32]
}
 8005fba:	bf00      	nop
 8005fbc:	371c      	adds	r7, #28
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	40010000 	.word	0x40010000
 8005fcc:	40010400 	.word	0x40010400

08005fd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b087      	sub	sp, #28
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a1b      	ldr	r3, [r3, #32]
 8005fe4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	69db      	ldr	r3, [r3, #28]
 8005ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f023 0303 	bic.w	r3, r3, #3
 8006006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	4313      	orrs	r3, r2
 8006010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006018:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	021b      	lsls	r3, r3, #8
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	4313      	orrs	r3, r2
 8006024:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a21      	ldr	r2, [pc, #132]	@ (80060b0 <TIM_OC3_SetConfig+0xe0>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d003      	beq.n	8006036 <TIM_OC3_SetConfig+0x66>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a20      	ldr	r2, [pc, #128]	@ (80060b4 <TIM_OC3_SetConfig+0xe4>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d10d      	bne.n	8006052 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800603c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	021b      	lsls	r3, r3, #8
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	4313      	orrs	r3, r2
 8006048:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006050:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a16      	ldr	r2, [pc, #88]	@ (80060b0 <TIM_OC3_SetConfig+0xe0>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d003      	beq.n	8006062 <TIM_OC3_SetConfig+0x92>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a15      	ldr	r2, [pc, #84]	@ (80060b4 <TIM_OC3_SetConfig+0xe4>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d113      	bne.n	800608a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006068:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006070:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	011b      	lsls	r3, r3, #4
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	4313      	orrs	r3, r2
 800607c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	011b      	lsls	r3, r3, #4
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	4313      	orrs	r3, r2
 8006088:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	693a      	ldr	r2, [r7, #16]
 800608e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	685a      	ldr	r2, [r3, #4]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	621a      	str	r2, [r3, #32]
}
 80060a4:	bf00      	nop
 80060a6:	371c      	adds	r7, #28
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr
 80060b0:	40010000 	.word	0x40010000
 80060b4:	40010400 	.word	0x40010400

080060b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b087      	sub	sp, #28
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a1b      	ldr	r3, [r3, #32]
 80060cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	69db      	ldr	r3, [r3, #28]
 80060de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	021b      	lsls	r3, r3, #8
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006102:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	031b      	lsls	r3, r3, #12
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	4313      	orrs	r3, r2
 800610e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a12      	ldr	r2, [pc, #72]	@ (800615c <TIM_OC4_SetConfig+0xa4>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d003      	beq.n	8006120 <TIM_OC4_SetConfig+0x68>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a11      	ldr	r2, [pc, #68]	@ (8006160 <TIM_OC4_SetConfig+0xa8>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d109      	bne.n	8006134 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006126:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	695b      	ldr	r3, [r3, #20]
 800612c:	019b      	lsls	r3, r3, #6
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	4313      	orrs	r3, r2
 8006132:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	685a      	ldr	r2, [r3, #4]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	621a      	str	r2, [r3, #32]
}
 800614e:	bf00      	nop
 8006150:	371c      	adds	r7, #28
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	40010000 	.word	0x40010000
 8006160:	40010400 	.word	0x40010400

08006164 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006164:	b480      	push	{r7}
 8006166:	b087      	sub	sp, #28
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6a1b      	ldr	r3, [r3, #32]
 8006174:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	f023 0201 	bic.w	r2, r3, #1
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800618e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	011b      	lsls	r3, r3, #4
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	4313      	orrs	r3, r2
 8006198:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	f023 030a 	bic.w	r3, r3, #10
 80061a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061a2:	697a      	ldr	r2, [r7, #20]
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	693a      	ldr	r2, [r7, #16]
 80061ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	621a      	str	r2, [r3, #32]
}
 80061b6:	bf00      	nop
 80061b8:	371c      	adds	r7, #28
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061c2:	b480      	push	{r7}
 80061c4:	b087      	sub	sp, #28
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	60f8      	str	r0, [r7, #12]
 80061ca:	60b9      	str	r1, [r7, #8]
 80061cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6a1b      	ldr	r3, [r3, #32]
 80061d8:	f023 0210 	bic.w	r2, r3, #16
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	699b      	ldr	r3, [r3, #24]
 80061e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80061ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	031b      	lsls	r3, r3, #12
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80061fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	011b      	lsls	r3, r3, #4
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	4313      	orrs	r3, r2
 8006208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	621a      	str	r2, [r3, #32]
}
 8006216:	bf00      	nop
 8006218:	371c      	adds	r7, #28
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006222:	b480      	push	{r7}
 8006224:	b085      	sub	sp, #20
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
 800622a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006238:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800623a:	683a      	ldr	r2, [r7, #0]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	4313      	orrs	r3, r2
 8006240:	f043 0307 	orr.w	r3, r3, #7
 8006244:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	609a      	str	r2, [r3, #8]
}
 800624c:	bf00      	nop
 800624e:	3714      	adds	r7, #20
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006258:	b480      	push	{r7}
 800625a:	b087      	sub	sp, #28
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
 8006264:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006272:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	021a      	lsls	r2, r3, #8
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	431a      	orrs	r2, r3
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	4313      	orrs	r3, r2
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	4313      	orrs	r3, r2
 8006284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	697a      	ldr	r2, [r7, #20]
 800628a:	609a      	str	r2, [r3, #8]
}
 800628c:	bf00      	nop
 800628e:	371c      	adds	r7, #28
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006298:	b480      	push	{r7}
 800629a:	b087      	sub	sp, #28
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	f003 031f 	and.w	r3, r3, #31
 80062aa:	2201      	movs	r2, #1
 80062ac:	fa02 f303 	lsl.w	r3, r2, r3
 80062b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6a1a      	ldr	r2, [r3, #32]
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	43db      	mvns	r3, r3
 80062ba:	401a      	ands	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6a1a      	ldr	r2, [r3, #32]
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	f003 031f 	and.w	r3, r3, #31
 80062ca:	6879      	ldr	r1, [r7, #4]
 80062cc:	fa01 f303 	lsl.w	r3, r1, r3
 80062d0:	431a      	orrs	r2, r3
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	621a      	str	r2, [r3, #32]
}
 80062d6:	bf00      	nop
 80062d8:	371c      	adds	r7, #28
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
	...

080062e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d101      	bne.n	80062fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062f8:	2302      	movs	r3, #2
 80062fa:	e05a      	b.n	80063b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2202      	movs	r2, #2
 8006308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006322:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	4313      	orrs	r3, r2
 800632c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a21      	ldr	r2, [pc, #132]	@ (80063c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d022      	beq.n	8006386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006348:	d01d      	beq.n	8006386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a1d      	ldr	r2, [pc, #116]	@ (80063c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d018      	beq.n	8006386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a1b      	ldr	r2, [pc, #108]	@ (80063c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d013      	beq.n	8006386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a1a      	ldr	r2, [pc, #104]	@ (80063cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d00e      	beq.n	8006386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a18      	ldr	r2, [pc, #96]	@ (80063d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d009      	beq.n	8006386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a17      	ldr	r2, [pc, #92]	@ (80063d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d004      	beq.n	8006386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a15      	ldr	r2, [pc, #84]	@ (80063d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d10c      	bne.n	80063a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800638c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	68ba      	ldr	r2, [r7, #8]
 8006394:	4313      	orrs	r3, r2
 8006396:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68ba      	ldr	r2, [r7, #8]
 800639e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3714      	adds	r7, #20
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	40010000 	.word	0x40010000
 80063c4:	40000400 	.word	0x40000400
 80063c8:	40000800 	.word	0x40000800
 80063cc:	40000c00 	.word	0x40000c00
 80063d0:	40010400 	.word	0x40010400
 80063d4:	40014000 	.word	0x40014000
 80063d8:	40001800 	.word	0x40001800

080063dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063e4:	bf00      	nop
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d101      	bne.n	8006416 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e042      	b.n	800649c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800641c:	b2db      	uxtb	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	d106      	bne.n	8006430 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f7fc fd92 	bl	8002f54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2224      	movs	r2, #36	@ 0x24
 8006434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68da      	ldr	r2, [r3, #12]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006446:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f001 f8d9 	bl	8007600 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	691a      	ldr	r2, [r3, #16]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800645c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	695a      	ldr	r2, [r3, #20]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800646c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68da      	ldr	r2, [r3, #12]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800647c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2220      	movs	r2, #32
 8006488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2220      	movs	r2, #32
 8006490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3708      	adds	r7, #8
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b08a      	sub	sp, #40	@ 0x28
 80064a8:	af02      	add	r7, sp, #8
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	603b      	str	r3, [r7, #0]
 80064b0:	4613      	mov	r3, r2
 80064b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80064b4:	2300      	movs	r3, #0
 80064b6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	2b20      	cmp	r3, #32
 80064c2:	d175      	bne.n	80065b0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d002      	beq.n	80064d0 <HAL_UART_Transmit+0x2c>
 80064ca:	88fb      	ldrh	r3, [r7, #6]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d101      	bne.n	80064d4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e06e      	b.n	80065b2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2221      	movs	r2, #33	@ 0x21
 80064de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064e2:	f7fd f875 	bl	80035d0 <HAL_GetTick>
 80064e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	88fa      	ldrh	r2, [r7, #6]
 80064ec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	88fa      	ldrh	r2, [r7, #6]
 80064f2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064fc:	d108      	bne.n	8006510 <HAL_UART_Transmit+0x6c>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d104      	bne.n	8006510 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006506:	2300      	movs	r3, #0
 8006508:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	61bb      	str	r3, [r7, #24]
 800650e:	e003      	b.n	8006518 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006514:	2300      	movs	r3, #0
 8006516:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006518:	e02e      	b.n	8006578 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	9300      	str	r3, [sp, #0]
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	2200      	movs	r2, #0
 8006522:	2180      	movs	r1, #128	@ 0x80
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f000 fdaa 	bl	800707e <UART_WaitOnFlagUntilTimeout>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d005      	beq.n	800653c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2220      	movs	r2, #32
 8006534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e03a      	b.n	80065b2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10b      	bne.n	800655a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	881b      	ldrh	r3, [r3, #0]
 8006546:	461a      	mov	r2, r3
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006550:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	3302      	adds	r3, #2
 8006556:	61bb      	str	r3, [r7, #24]
 8006558:	e007      	b.n	800656a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	781a      	ldrb	r2, [r3, #0]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	3301      	adds	r3, #1
 8006568:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800656e:	b29b      	uxth	r3, r3
 8006570:	3b01      	subs	r3, #1
 8006572:	b29a      	uxth	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800657c:	b29b      	uxth	r3, r3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d1cb      	bne.n	800651a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	9300      	str	r3, [sp, #0]
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	2200      	movs	r2, #0
 800658a:	2140      	movs	r1, #64	@ 0x40
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f000 fd76 	bl	800707e <UART_WaitOnFlagUntilTimeout>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d005      	beq.n	80065a4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2220      	movs	r2, #32
 800659c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e006      	b.n	80065b2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2220      	movs	r2, #32
 80065a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80065ac:	2300      	movs	r3, #0
 80065ae:	e000      	b.n	80065b2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80065b0:	2302      	movs	r3, #2
  }
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3720      	adds	r7, #32
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
	...

080065bc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b08c      	sub	sp, #48	@ 0x30
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	4613      	mov	r3, r2
 80065c8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	2b20      	cmp	r3, #32
 80065d4:	d162      	bne.n	800669c <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d002      	beq.n	80065e2 <HAL_UART_Transmit_DMA+0x26>
 80065dc:	88fb      	ldrh	r3, [r7, #6]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d101      	bne.n	80065e6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e05b      	b.n	800669e <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 80065e6:	68ba      	ldr	r2, [r7, #8]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	88fa      	ldrh	r2, [r7, #6]
 80065f0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	88fa      	ldrh	r2, [r7, #6]
 80065f6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2221      	movs	r2, #33	@ 0x21
 8006602:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800660a:	4a27      	ldr	r2, [pc, #156]	@ (80066a8 <HAL_UART_Transmit_DMA+0xec>)
 800660c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006612:	4a26      	ldr	r2, [pc, #152]	@ (80066ac <HAL_UART_Transmit_DMA+0xf0>)
 8006614:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800661a:	4a25      	ldr	r2, [pc, #148]	@ (80066b0 <HAL_UART_Transmit_DMA+0xf4>)
 800661c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006622:	2200      	movs	r2, #0
 8006624:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006626:	f107 0308 	add.w	r3, r7, #8
 800662a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006632:	6819      	ldr	r1, [r3, #0]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	3304      	adds	r3, #4
 800663a:	461a      	mov	r2, r3
 800663c:	88fb      	ldrh	r3, [r7, #6]
 800663e:	f7fd f963 	bl	8003908 <HAL_DMA_Start_IT>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d008      	beq.n	800665a <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2210      	movs	r2, #16
 800664c:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2220      	movs	r2, #32
 8006652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e021      	b.n	800669e <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006662:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	3314      	adds	r3, #20
 800666a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	e853 3f00 	ldrex	r3, [r3]
 8006672:	617b      	str	r3, [r7, #20]
   return(result);
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800667a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	3314      	adds	r3, #20
 8006682:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006684:	627a      	str	r2, [r7, #36]	@ 0x24
 8006686:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006688:	6a39      	ldr	r1, [r7, #32]
 800668a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800668c:	e841 2300 	strex	r3, r2, [r1]
 8006690:	61fb      	str	r3, [r7, #28]
   return(result);
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1e5      	bne.n	8006664 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 8006698:	2300      	movs	r3, #0
 800669a:	e000      	b.n	800669e <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 800669c:	2302      	movs	r3, #2
  }
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3730      	adds	r7, #48	@ 0x30
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	08006dcd 	.word	0x08006dcd
 80066ac:	08006e67 	.word	0x08006e67
 80066b0:	08006feb 	.word	0x08006feb

080066b4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	4613      	mov	r3, r2
 80066c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	2b20      	cmp	r3, #32
 80066cc:	d112      	bne.n	80066f4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d002      	beq.n	80066da <HAL_UART_Receive_DMA+0x26>
 80066d4:	88fb      	ldrh	r3, [r7, #6]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d101      	bne.n	80066de <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e00b      	b.n	80066f6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80066e4:	88fb      	ldrh	r3, [r7, #6]
 80066e6:	461a      	mov	r2, r3
 80066e8:	68b9      	ldr	r1, [r7, #8]
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	f000 fd20 	bl	8007130 <UART_Start_Receive_DMA>
 80066f0:	4603      	mov	r3, r0
 80066f2:	e000      	b.n	80066f6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80066f4:	2302      	movs	r3, #2
  }
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}

080066fe <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80066fe:	b580      	push	{r7, lr}
 8006700:	b090      	sub	sp, #64	@ 0x40
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006706:	2300      	movs	r3, #0
 8006708:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	695b      	ldr	r3, [r3, #20]
 8006710:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006714:	2b80      	cmp	r3, #128	@ 0x80
 8006716:	bf0c      	ite	eq
 8006718:	2301      	moveq	r3, #1
 800671a:	2300      	movne	r3, #0
 800671c:	b2db      	uxtb	r3, r3
 800671e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006726:	b2db      	uxtb	r3, r3
 8006728:	2b21      	cmp	r3, #33	@ 0x21
 800672a:	d128      	bne.n	800677e <HAL_UART_DMAStop+0x80>
 800672c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800672e:	2b00      	cmp	r3, #0
 8006730:	d025      	beq.n	800677e <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	3314      	adds	r3, #20
 8006738:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800673c:	e853 3f00 	ldrex	r3, [r3]
 8006740:	623b      	str	r3, [r7, #32]
   return(result);
 8006742:	6a3b      	ldr	r3, [r7, #32]
 8006744:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006748:	63bb      	str	r3, [r7, #56]	@ 0x38
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	3314      	adds	r3, #20
 8006750:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006752:	633a      	str	r2, [r7, #48]	@ 0x30
 8006754:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006756:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006758:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800675a:	e841 2300 	strex	r3, r2, [r1]
 800675e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1e5      	bne.n	8006732 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800676a:	2b00      	cmp	r3, #0
 800676c:	d004      	beq.n	8006778 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006772:	4618      	mov	r0, r3
 8006774:	f7fd f920 	bl	80039b8 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 fd7f 	bl	800727c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	695b      	ldr	r3, [r3, #20]
 8006784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006788:	2b40      	cmp	r3, #64	@ 0x40
 800678a:	bf0c      	ite	eq
 800678c:	2301      	moveq	r3, #1
 800678e:	2300      	movne	r3, #0
 8006790:	b2db      	uxtb	r3, r3
 8006792:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800679a:	b2db      	uxtb	r3, r3
 800679c:	2b22      	cmp	r3, #34	@ 0x22
 800679e:	d128      	bne.n	80067f2 <HAL_UART_DMAStop+0xf4>
 80067a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d025      	beq.n	80067f2 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	3314      	adds	r3, #20
 80067ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	e853 3f00 	ldrex	r3, [r3]
 80067b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	3314      	adds	r3, #20
 80067c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80067c6:	61fa      	str	r2, [r7, #28]
 80067c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ca:	69b9      	ldr	r1, [r7, #24]
 80067cc:	69fa      	ldr	r2, [r7, #28]
 80067ce:	e841 2300 	strex	r3, r2, [r1]
 80067d2:	617b      	str	r3, [r7, #20]
   return(result);
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1e5      	bne.n	80067a6 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d004      	beq.n	80067ec <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7fd f8e6 	bl	80039b8 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 fd6d 	bl	80072cc <UART_EndRxTransfer>
  }

  return HAL_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3740      	adds	r7, #64	@ 0x40
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b0ba      	sub	sp, #232	@ 0xe8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006822:	2300      	movs	r3, #0
 8006824:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006828:	2300      	movs	r3, #0
 800682a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800682e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006832:	f003 030f 	and.w	r3, r3, #15
 8006836:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800683a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800683e:	2b00      	cmp	r3, #0
 8006840:	d10f      	bne.n	8006862 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006846:	f003 0320 	and.w	r3, r3, #32
 800684a:	2b00      	cmp	r3, #0
 800684c:	d009      	beq.n	8006862 <HAL_UART_IRQHandler+0x66>
 800684e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006852:	f003 0320 	and.w	r3, r3, #32
 8006856:	2b00      	cmp	r3, #0
 8006858:	d003      	beq.n	8006862 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fe12 	bl	8007484 <UART_Receive_IT>
      return;
 8006860:	e273      	b.n	8006d4a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006862:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006866:	2b00      	cmp	r3, #0
 8006868:	f000 80de 	beq.w	8006a28 <HAL_UART_IRQHandler+0x22c>
 800686c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006870:	f003 0301 	and.w	r3, r3, #1
 8006874:	2b00      	cmp	r3, #0
 8006876:	d106      	bne.n	8006886 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800687c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006880:	2b00      	cmp	r3, #0
 8006882:	f000 80d1 	beq.w	8006a28 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800688a:	f003 0301 	and.w	r3, r3, #1
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00b      	beq.n	80068aa <HAL_UART_IRQHandler+0xae>
 8006892:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800689a:	2b00      	cmp	r3, #0
 800689c:	d005      	beq.n	80068aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068a2:	f043 0201 	orr.w	r2, r3, #1
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068ae:	f003 0304 	and.w	r3, r3, #4
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00b      	beq.n	80068ce <HAL_UART_IRQHandler+0xd2>
 80068b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068ba:	f003 0301 	and.w	r3, r3, #1
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d005      	beq.n	80068ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068c6:	f043 0202 	orr.w	r2, r3, #2
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068d2:	f003 0302 	and.w	r3, r3, #2
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00b      	beq.n	80068f2 <HAL_UART_IRQHandler+0xf6>
 80068da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d005      	beq.n	80068f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ea:	f043 0204 	orr.w	r2, r3, #4
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80068f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068f6:	f003 0308 	and.w	r3, r3, #8
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d011      	beq.n	8006922 <HAL_UART_IRQHandler+0x126>
 80068fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006902:	f003 0320 	and.w	r3, r3, #32
 8006906:	2b00      	cmp	r3, #0
 8006908:	d105      	bne.n	8006916 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800690a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800690e:	f003 0301 	and.w	r3, r3, #1
 8006912:	2b00      	cmp	r3, #0
 8006914:	d005      	beq.n	8006922 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800691a:	f043 0208 	orr.w	r2, r3, #8
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006926:	2b00      	cmp	r3, #0
 8006928:	f000 820a 	beq.w	8006d40 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800692c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006930:	f003 0320 	and.w	r3, r3, #32
 8006934:	2b00      	cmp	r3, #0
 8006936:	d008      	beq.n	800694a <HAL_UART_IRQHandler+0x14e>
 8006938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800693c:	f003 0320 	and.w	r3, r3, #32
 8006940:	2b00      	cmp	r3, #0
 8006942:	d002      	beq.n	800694a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 fd9d 	bl	8007484 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	695b      	ldr	r3, [r3, #20]
 8006950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006954:	2b40      	cmp	r3, #64	@ 0x40
 8006956:	bf0c      	ite	eq
 8006958:	2301      	moveq	r3, #1
 800695a:	2300      	movne	r3, #0
 800695c:	b2db      	uxtb	r3, r3
 800695e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006966:	f003 0308 	and.w	r3, r3, #8
 800696a:	2b00      	cmp	r3, #0
 800696c:	d103      	bne.n	8006976 <HAL_UART_IRQHandler+0x17a>
 800696e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006972:	2b00      	cmp	r3, #0
 8006974:	d04f      	beq.n	8006a16 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 fca8 	bl	80072cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	695b      	ldr	r3, [r3, #20]
 8006982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006986:	2b40      	cmp	r3, #64	@ 0x40
 8006988:	d141      	bne.n	8006a0e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	3314      	adds	r3, #20
 8006990:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006994:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006998:	e853 3f00 	ldrex	r3, [r3]
 800699c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80069a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80069a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	3314      	adds	r3, #20
 80069b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80069b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80069ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80069c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80069c6:	e841 2300 	strex	r3, r2, [r1]
 80069ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80069ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1d9      	bne.n	800698a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d013      	beq.n	8006a06 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069e2:	4a8a      	ldr	r2, [pc, #552]	@ (8006c0c <HAL_UART_IRQHandler+0x410>)
 80069e4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069ea:	4618      	mov	r0, r3
 80069ec:	f7fd f854 	bl	8003a98 <HAL_DMA_Abort_IT>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d016      	beq.n	8006a24 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006a00:	4610      	mov	r0, r2
 8006a02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a04:	e00e      	b.n	8006a24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 f9ca 	bl	8006da0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a0c:	e00a      	b.n	8006a24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 f9c6 	bl	8006da0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a14:	e006      	b.n	8006a24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f9c2 	bl	8006da0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006a22:	e18d      	b.n	8006d40 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a24:	bf00      	nop
    return;
 8006a26:	e18b      	b.n	8006d40 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	f040 8167 	bne.w	8006d00 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a36:	f003 0310 	and.w	r3, r3, #16
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	f000 8160 	beq.w	8006d00 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8006a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a44:	f003 0310 	and.w	r3, r3, #16
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 8159 	beq.w	8006d00 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a4e:	2300      	movs	r3, #0
 8006a50:	60bb      	str	r3, [r7, #8]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	60bb      	str	r3, [r7, #8]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	60bb      	str	r3, [r7, #8]
 8006a62:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	695b      	ldr	r3, [r3, #20]
 8006a6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a6e:	2b40      	cmp	r3, #64	@ 0x40
 8006a70:	f040 80ce 	bne.w	8006c10 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f000 80a9 	beq.w	8006bdc <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006a8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a92:	429a      	cmp	r2, r3
 8006a94:	f080 80a2 	bcs.w	8006bdc <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a9e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aa4:	69db      	ldr	r3, [r3, #28]
 8006aa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006aaa:	f000 8088 	beq.w	8006bbe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	330c      	adds	r3, #12
 8006ab4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006abc:	e853 3f00 	ldrex	r3, [r3]
 8006ac0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006ac4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006ac8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006acc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	330c      	adds	r3, #12
 8006ad6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006ada:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006ade:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006ae6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006aea:	e841 2300 	strex	r3, r2, [r1]
 8006aee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006af2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d1d9      	bne.n	8006aae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	3314      	adds	r3, #20
 8006b00:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b04:	e853 3f00 	ldrex	r3, [r3]
 8006b08:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006b0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b0c:	f023 0301 	bic.w	r3, r3, #1
 8006b10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	3314      	adds	r3, #20
 8006b1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006b1e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006b22:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b24:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006b26:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006b2a:	e841 2300 	strex	r3, r2, [r1]
 8006b2e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006b30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1e1      	bne.n	8006afa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	3314      	adds	r3, #20
 8006b3c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b40:	e853 3f00 	ldrex	r3, [r3]
 8006b44:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006b46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	3314      	adds	r3, #20
 8006b56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006b5a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006b5c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006b60:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006b62:	e841 2300 	strex	r3, r2, [r1]
 8006b66:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006b68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1e3      	bne.n	8006b36 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2220      	movs	r2, #32
 8006b72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	330c      	adds	r3, #12
 8006b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b86:	e853 3f00 	ldrex	r3, [r3]
 8006b8a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006b8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b8e:	f023 0310 	bic.w	r3, r3, #16
 8006b92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	330c      	adds	r3, #12
 8006b9c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006ba0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006ba2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ba6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006ba8:	e841 2300 	strex	r3, r2, [r1]
 8006bac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006bae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d1e3      	bne.n	8006b7c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f7fc fefd 	bl	80039b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2202      	movs	r2, #2
 8006bc2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 f8ed 	bl	8006db4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006bda:	e0b3      	b.n	8006d44 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006be0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006be4:	429a      	cmp	r2, r3
 8006be6:	f040 80ad 	bne.w	8006d44 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bee:	69db      	ldr	r3, [r3, #28]
 8006bf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bf4:	f040 80a6 	bne.w	8006d44 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2202      	movs	r2, #2
 8006bfc:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006c02:	4619      	mov	r1, r3
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 f8d5 	bl	8006db4 <HAL_UARTEx_RxEventCallback>
      return;
 8006c0a:	e09b      	b.n	8006d44 <HAL_UART_IRQHandler+0x548>
 8006c0c:	08007393 	.word	0x08007393
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	1ad3      	subs	r3, r2, r3
 8006c1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f000 808e 	beq.w	8006d48 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8006c2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f000 8089 	beq.w	8006d48 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	330c      	adds	r3, #12
 8006c3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c40:	e853 3f00 	ldrex	r3, [r3]
 8006c44:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c4c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	330c      	adds	r3, #12
 8006c56:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006c5a:	647a      	str	r2, [r7, #68]	@ 0x44
 8006c5c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c62:	e841 2300 	strex	r3, r2, [r1]
 8006c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1e3      	bne.n	8006c36 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	3314      	adds	r3, #20
 8006c74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c78:	e853 3f00 	ldrex	r3, [r3]
 8006c7c:	623b      	str	r3, [r7, #32]
   return(result);
 8006c7e:	6a3b      	ldr	r3, [r7, #32]
 8006c80:	f023 0301 	bic.w	r3, r3, #1
 8006c84:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	3314      	adds	r3, #20
 8006c8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006c92:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c9a:	e841 2300 	strex	r3, r2, [r1]
 8006c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d1e3      	bne.n	8006c6e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2220      	movs	r2, #32
 8006caa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	330c      	adds	r3, #12
 8006cba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	e853 3f00 	ldrex	r3, [r3]
 8006cc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f023 0310 	bic.w	r3, r3, #16
 8006cca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	330c      	adds	r3, #12
 8006cd4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006cd8:	61fa      	str	r2, [r7, #28]
 8006cda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cdc:	69b9      	ldr	r1, [r7, #24]
 8006cde:	69fa      	ldr	r2, [r7, #28]
 8006ce0:	e841 2300 	strex	r3, r2, [r1]
 8006ce4:	617b      	str	r3, [r7, #20]
   return(result);
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1e3      	bne.n	8006cb4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2202      	movs	r2, #2
 8006cf0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006cf2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 f85b 	bl	8006db4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006cfe:	e023      	b.n	8006d48 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d009      	beq.n	8006d20 <HAL_UART_IRQHandler+0x524>
 8006d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d003      	beq.n	8006d20 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 fb4b 	bl	80073b4 <UART_Transmit_IT>
    return;
 8006d1e:	e014      	b.n	8006d4a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d00e      	beq.n	8006d4a <HAL_UART_IRQHandler+0x54e>
 8006d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d008      	beq.n	8006d4a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 fb8b 	bl	8007454 <UART_EndTransmit_IT>
    return;
 8006d3e:	e004      	b.n	8006d4a <HAL_UART_IRQHandler+0x54e>
    return;
 8006d40:	bf00      	nop
 8006d42:	e002      	b.n	8006d4a <HAL_UART_IRQHandler+0x54e>
      return;
 8006d44:	bf00      	nop
 8006d46:	e000      	b.n	8006d4a <HAL_UART_IRQHandler+0x54e>
      return;
 8006d48:	bf00      	nop
  }
}
 8006d4a:	37e8      	adds	r7, #232	@ 0xe8
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d58:	bf00      	nop
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006d6c:	bf00      	nop
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006d80:	bf00      	nop
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006da8:	bf00      	nop
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006dc0:	bf00      	nop
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b090      	sub	sp, #64	@ 0x40
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d137      	bne.n	8006e58 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006de8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dea:	2200      	movs	r2, #0
 8006dec:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006dee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	3314      	adds	r3, #20
 8006df4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df8:	e853 3f00 	ldrex	r3, [r3]
 8006dfc:	623b      	str	r3, [r7, #32]
   return(result);
 8006dfe:	6a3b      	ldr	r3, [r7, #32]
 8006e00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e04:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	3314      	adds	r3, #20
 8006e0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e0e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e16:	e841 2300 	strex	r3, r2, [r1]
 8006e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1e5      	bne.n	8006dee <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	330c      	adds	r3, #12
 8006e28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	e853 3f00 	ldrex	r3, [r3]
 8006e30:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e38:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	330c      	adds	r3, #12
 8006e40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006e42:	61fa      	str	r2, [r7, #28]
 8006e44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e46:	69b9      	ldr	r1, [r7, #24]
 8006e48:	69fa      	ldr	r2, [r7, #28]
 8006e4a:	e841 2300 	strex	r3, r2, [r1]
 8006e4e:	617b      	str	r3, [r7, #20]
   return(result);
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1e5      	bne.n	8006e22 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e56:	e002      	b.n	8006e5e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006e58:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006e5a:	f7ff ff79 	bl	8006d50 <HAL_UART_TxCpltCallback>
}
 8006e5e:	bf00      	nop
 8006e60:	3740      	adds	r7, #64	@ 0x40
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b084      	sub	sp, #16
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e72:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	f7ff ff75 	bl	8006d64 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e7a:	bf00      	nop
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b09c      	sub	sp, #112	@ 0x70
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e8e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d172      	bne.n	8006f84 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006e9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ea4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	330c      	adds	r3, #12
 8006eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006eae:	e853 3f00 	ldrex	r3, [r3]
 8006eb2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006eb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006eb6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006eba:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ebc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	330c      	adds	r3, #12
 8006ec2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006ec4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006ec6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006eca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006ecc:	e841 2300 	strex	r3, r2, [r1]
 8006ed0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006ed2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d1e5      	bne.n	8006ea4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ed8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	3314      	adds	r3, #20
 8006ede:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee2:	e853 3f00 	ldrex	r3, [r3]
 8006ee6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eea:	f023 0301 	bic.w	r3, r3, #1
 8006eee:	667b      	str	r3, [r7, #100]	@ 0x64
 8006ef0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	3314      	adds	r3, #20
 8006ef6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006ef8:	647a      	str	r2, [r7, #68]	@ 0x44
 8006efa:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006efe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f00:	e841 2300 	strex	r3, r2, [r1]
 8006f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1e5      	bne.n	8006ed8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	3314      	adds	r3, #20
 8006f12:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f16:	e853 3f00 	ldrex	r3, [r3]
 8006f1a:	623b      	str	r3, [r7, #32]
   return(result);
 8006f1c:	6a3b      	ldr	r3, [r7, #32]
 8006f1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f22:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	3314      	adds	r3, #20
 8006f2a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006f2c:	633a      	str	r2, [r7, #48]	@ 0x30
 8006f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f30:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f34:	e841 2300 	strex	r3, r2, [r1]
 8006f38:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d1e5      	bne.n	8006f0c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006f40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f42:	2220      	movs	r2, #32
 8006f44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d119      	bne.n	8006f84 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	330c      	adds	r3, #12
 8006f56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	e853 3f00 	ldrex	r3, [r3]
 8006f5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f023 0310 	bic.w	r3, r3, #16
 8006f66:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	330c      	adds	r3, #12
 8006f6e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006f70:	61fa      	str	r2, [r7, #28]
 8006f72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f74:	69b9      	ldr	r1, [r7, #24]
 8006f76:	69fa      	ldr	r2, [r7, #28]
 8006f78:	e841 2300 	strex	r3, r2, [r1]
 8006f7c:	617b      	str	r3, [r7, #20]
   return(result);
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d1e5      	bne.n	8006f50 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f86:	2200      	movs	r2, #0
 8006f88:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d106      	bne.n	8006fa0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f94:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006f96:	4619      	mov	r1, r3
 8006f98:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006f9a:	f7ff ff0b 	bl	8006db4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f9e:	e002      	b.n	8006fa6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006fa0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006fa2:	f7ff fee9 	bl	8006d78 <HAL_UART_RxCpltCallback>
}
 8006fa6:	bf00      	nop
 8006fa8:	3770      	adds	r7, #112	@ 0x70
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b084      	sub	sp, #16
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fba:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d108      	bne.n	8006fdc <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006fce:	085b      	lsrs	r3, r3, #1
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f7ff feed 	bl	8006db4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006fda:	e002      	b.n	8006fe2 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	f7ff fed5 	bl	8006d8c <HAL_UART_RxHalfCpltCallback>
}
 8006fe2:	bf00      	nop
 8006fe4:	3710      	adds	r7, #16
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b084      	sub	sp, #16
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ffa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007006:	2b80      	cmp	r3, #128	@ 0x80
 8007008:	bf0c      	ite	eq
 800700a:	2301      	moveq	r3, #1
 800700c:	2300      	movne	r3, #0
 800700e:	b2db      	uxtb	r3, r3
 8007010:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007018:	b2db      	uxtb	r3, r3
 800701a:	2b21      	cmp	r3, #33	@ 0x21
 800701c:	d108      	bne.n	8007030 <UART_DMAError+0x46>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d005      	beq.n	8007030 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	2200      	movs	r2, #0
 8007028:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800702a:	68b8      	ldr	r0, [r7, #8]
 800702c:	f000 f926 	bl	800727c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800703a:	2b40      	cmp	r3, #64	@ 0x40
 800703c:	bf0c      	ite	eq
 800703e:	2301      	moveq	r3, #1
 8007040:	2300      	movne	r3, #0
 8007042:	b2db      	uxtb	r3, r3
 8007044:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800704c:	b2db      	uxtb	r3, r3
 800704e:	2b22      	cmp	r3, #34	@ 0x22
 8007050:	d108      	bne.n	8007064 <UART_DMAError+0x7a>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d005      	beq.n	8007064 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	2200      	movs	r2, #0
 800705c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800705e:	68b8      	ldr	r0, [r7, #8]
 8007060:	f000 f934 	bl	80072cc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007068:	f043 0210 	orr.w	r2, r3, #16
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007070:	68b8      	ldr	r0, [r7, #8]
 8007072:	f7ff fe95 	bl	8006da0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007076:	bf00      	nop
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b086      	sub	sp, #24
 8007082:	af00      	add	r7, sp, #0
 8007084:	60f8      	str	r0, [r7, #12]
 8007086:	60b9      	str	r1, [r7, #8]
 8007088:	603b      	str	r3, [r7, #0]
 800708a:	4613      	mov	r3, r2
 800708c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800708e:	e03b      	b.n	8007108 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007090:	6a3b      	ldr	r3, [r7, #32]
 8007092:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007096:	d037      	beq.n	8007108 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007098:	f7fc fa9a 	bl	80035d0 <HAL_GetTick>
 800709c:	4602      	mov	r2, r0
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	6a3a      	ldr	r2, [r7, #32]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d302      	bcc.n	80070ae <UART_WaitOnFlagUntilTimeout+0x30>
 80070a8:	6a3b      	ldr	r3, [r7, #32]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d101      	bne.n	80070b2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e03a      	b.n	8007128 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	f003 0304 	and.w	r3, r3, #4
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d023      	beq.n	8007108 <UART_WaitOnFlagUntilTimeout+0x8a>
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	2b80      	cmp	r3, #128	@ 0x80
 80070c4:	d020      	beq.n	8007108 <UART_WaitOnFlagUntilTimeout+0x8a>
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	2b40      	cmp	r3, #64	@ 0x40
 80070ca:	d01d      	beq.n	8007108 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 0308 	and.w	r3, r3, #8
 80070d6:	2b08      	cmp	r3, #8
 80070d8:	d116      	bne.n	8007108 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80070da:	2300      	movs	r3, #0
 80070dc:	617b      	str	r3, [r7, #20]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	617b      	str	r3, [r7, #20]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	617b      	str	r3, [r7, #20]
 80070ee:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	f000 f8eb 	bl	80072cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2208      	movs	r2, #8
 80070fa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e00f      	b.n	8007128 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	4013      	ands	r3, r2
 8007112:	68ba      	ldr	r2, [r7, #8]
 8007114:	429a      	cmp	r2, r3
 8007116:	bf0c      	ite	eq
 8007118:	2301      	moveq	r3, #1
 800711a:	2300      	movne	r3, #0
 800711c:	b2db      	uxtb	r3, r3
 800711e:	461a      	mov	r2, r3
 8007120:	79fb      	ldrb	r3, [r7, #7]
 8007122:	429a      	cmp	r2, r3
 8007124:	d0b4      	beq.n	8007090 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	3718      	adds	r7, #24
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b098      	sub	sp, #96	@ 0x60
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	4613      	mov	r3, r2
 800713c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	88fa      	ldrh	r2, [r7, #6]
 8007148:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2200      	movs	r2, #0
 800714e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2222      	movs	r2, #34	@ 0x22
 8007154:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800715c:	4a44      	ldr	r2, [pc, #272]	@ (8007270 <UART_Start_Receive_DMA+0x140>)
 800715e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007164:	4a43      	ldr	r2, [pc, #268]	@ (8007274 <UART_Start_Receive_DMA+0x144>)
 8007166:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800716c:	4a42      	ldr	r2, [pc, #264]	@ (8007278 <UART_Start_Receive_DMA+0x148>)
 800716e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007174:	2200      	movs	r2, #0
 8007176:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007178:	f107 0308 	add.w	r3, r7, #8
 800717c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	3304      	adds	r3, #4
 8007188:	4619      	mov	r1, r3
 800718a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	88fb      	ldrh	r3, [r7, #6]
 8007190:	f7fc fbba 	bl	8003908 <HAL_DMA_Start_IT>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	d008      	beq.n	80071ac <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2210      	movs	r2, #16
 800719e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2220      	movs	r2, #32
 80071a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e05d      	b.n	8007268 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80071ac:	2300      	movs	r3, #0
 80071ae:	613b      	str	r3, [r7, #16]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	613b      	str	r3, [r7, #16]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	613b      	str	r3, [r7, #16]
 80071c0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d019      	beq.n	80071fe <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	330c      	adds	r3, #12
 80071d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071d4:	e853 3f00 	ldrex	r3, [r3]
 80071d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80071da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	330c      	adds	r3, #12
 80071e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80071ea:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80071ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ee:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80071f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80071f2:	e841 2300 	strex	r3, r2, [r1]
 80071f6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80071f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1e5      	bne.n	80071ca <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	3314      	adds	r3, #20
 8007204:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007208:	e853 3f00 	ldrex	r3, [r3]
 800720c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800720e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007210:	f043 0301 	orr.w	r3, r3, #1
 8007214:	657b      	str	r3, [r7, #84]	@ 0x54
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	3314      	adds	r3, #20
 800721c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800721e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007220:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007222:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007224:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007226:	e841 2300 	strex	r3, r2, [r1]
 800722a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800722c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800722e:	2b00      	cmp	r3, #0
 8007230:	d1e5      	bne.n	80071fe <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	3314      	adds	r3, #20
 8007238:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	e853 3f00 	ldrex	r3, [r3]
 8007240:	617b      	str	r3, [r7, #20]
   return(result);
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007248:	653b      	str	r3, [r7, #80]	@ 0x50
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	3314      	adds	r3, #20
 8007250:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007252:	627a      	str	r2, [r7, #36]	@ 0x24
 8007254:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007256:	6a39      	ldr	r1, [r7, #32]
 8007258:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800725a:	e841 2300 	strex	r3, r2, [r1]
 800725e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1e5      	bne.n	8007232 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3760      	adds	r7, #96	@ 0x60
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}
 8007270:	08006e83 	.word	0x08006e83
 8007274:	08006faf 	.word	0x08006faf
 8007278:	08006feb 	.word	0x08006feb

0800727c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800727c:	b480      	push	{r7}
 800727e:	b089      	sub	sp, #36	@ 0x24
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	330c      	adds	r3, #12
 800728a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	e853 3f00 	ldrex	r3, [r3]
 8007292:	60bb      	str	r3, [r7, #8]
   return(result);
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800729a:	61fb      	str	r3, [r7, #28]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	330c      	adds	r3, #12
 80072a2:	69fa      	ldr	r2, [r7, #28]
 80072a4:	61ba      	str	r2, [r7, #24]
 80072a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a8:	6979      	ldr	r1, [r7, #20]
 80072aa:	69ba      	ldr	r2, [r7, #24]
 80072ac:	e841 2300 	strex	r3, r2, [r1]
 80072b0:	613b      	str	r3, [r7, #16]
   return(result);
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d1e5      	bne.n	8007284 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2220      	movs	r2, #32
 80072bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80072c0:	bf00      	nop
 80072c2:	3724      	adds	r7, #36	@ 0x24
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b095      	sub	sp, #84	@ 0x54
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	330c      	adds	r3, #12
 80072da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072de:	e853 3f00 	ldrex	r3, [r3]
 80072e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80072e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	330c      	adds	r3, #12
 80072f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80072f4:	643a      	str	r2, [r7, #64]	@ 0x40
 80072f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80072fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80072fc:	e841 2300 	strex	r3, r2, [r1]
 8007300:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007304:	2b00      	cmp	r3, #0
 8007306:	d1e5      	bne.n	80072d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	3314      	adds	r3, #20
 800730e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007310:	6a3b      	ldr	r3, [r7, #32]
 8007312:	e853 3f00 	ldrex	r3, [r3]
 8007316:	61fb      	str	r3, [r7, #28]
   return(result);
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	f023 0301 	bic.w	r3, r3, #1
 800731e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	3314      	adds	r3, #20
 8007326:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007328:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800732a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800732e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007330:	e841 2300 	strex	r3, r2, [r1]
 8007334:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1e5      	bne.n	8007308 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007340:	2b01      	cmp	r3, #1
 8007342:	d119      	bne.n	8007378 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	330c      	adds	r3, #12
 800734a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	e853 3f00 	ldrex	r3, [r3]
 8007352:	60bb      	str	r3, [r7, #8]
   return(result);
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	f023 0310 	bic.w	r3, r3, #16
 800735a:	647b      	str	r3, [r7, #68]	@ 0x44
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	330c      	adds	r3, #12
 8007362:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007364:	61ba      	str	r2, [r7, #24]
 8007366:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007368:	6979      	ldr	r1, [r7, #20]
 800736a:	69ba      	ldr	r2, [r7, #24]
 800736c:	e841 2300 	strex	r3, r2, [r1]
 8007370:	613b      	str	r3, [r7, #16]
   return(result);
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d1e5      	bne.n	8007344 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2220      	movs	r2, #32
 800737c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007386:	bf00      	nop
 8007388:	3754      	adds	r7, #84	@ 0x54
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr

08007392 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b084      	sub	sp, #16
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800739e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f7ff fcfa 	bl	8006da0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073ac:	bf00      	nop
 80073ae:	3710      	adds	r7, #16
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b085      	sub	sp, #20
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	2b21      	cmp	r3, #33	@ 0x21
 80073c6:	d13e      	bne.n	8007446 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073d0:	d114      	bne.n	80073fc <UART_Transmit_IT+0x48>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d110      	bne.n	80073fc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	881b      	ldrh	r3, [r3, #0]
 80073e4:	461a      	mov	r2, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073ee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6a1b      	ldr	r3, [r3, #32]
 80073f4:	1c9a      	adds	r2, r3, #2
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	621a      	str	r2, [r3, #32]
 80073fa:	e008      	b.n	800740e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a1b      	ldr	r3, [r3, #32]
 8007400:	1c59      	adds	r1, r3, #1
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	6211      	str	r1, [r2, #32]
 8007406:	781a      	ldrb	r2, [r3, #0]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007412:	b29b      	uxth	r3, r3
 8007414:	3b01      	subs	r3, #1
 8007416:	b29b      	uxth	r3, r3
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	4619      	mov	r1, r3
 800741c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800741e:	2b00      	cmp	r3, #0
 8007420:	d10f      	bne.n	8007442 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68da      	ldr	r2, [r3, #12]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007430:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68da      	ldr	r2, [r3, #12]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007440:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007442:	2300      	movs	r3, #0
 8007444:	e000      	b.n	8007448 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007446:	2302      	movs	r3, #2
  }
}
 8007448:	4618      	mov	r0, r3
 800744a:	3714      	adds	r7, #20
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	68da      	ldr	r2, [r3, #12]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800746a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2220      	movs	r2, #32
 8007470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f7ff fc6b 	bl	8006d50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3708      	adds	r7, #8
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b08c      	sub	sp, #48	@ 0x30
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800748c:	2300      	movs	r3, #0
 800748e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8007490:	2300      	movs	r3, #0
 8007492:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800749a:	b2db      	uxtb	r3, r3
 800749c:	2b22      	cmp	r3, #34	@ 0x22
 800749e:	f040 80aa 	bne.w	80075f6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074aa:	d115      	bne.n	80074d8 <UART_Receive_IT+0x54>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d111      	bne.n	80074d8 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074c6:	b29a      	uxth	r2, r3
 80074c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074d0:	1c9a      	adds	r2, r3, #2
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80074d6:	e024      	b.n	8007522 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074e6:	d007      	beq.n	80074f8 <UART_Receive_IT+0x74>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d10a      	bne.n	8007506 <UART_Receive_IT+0x82>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d106      	bne.n	8007506 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	b2da      	uxtb	r2, r3
 8007500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007502:	701a      	strb	r2, [r3, #0]
 8007504:	e008      	b.n	8007518 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	b2db      	uxtb	r3, r3
 800750e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007512:	b2da      	uxtb	r2, r3
 8007514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007516:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800751c:	1c5a      	adds	r2, r3, #1
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007526:	b29b      	uxth	r3, r3
 8007528:	3b01      	subs	r3, #1
 800752a:	b29b      	uxth	r3, r3
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	4619      	mov	r1, r3
 8007530:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007532:	2b00      	cmp	r3, #0
 8007534:	d15d      	bne.n	80075f2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	68da      	ldr	r2, [r3, #12]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f022 0220 	bic.w	r2, r2, #32
 8007544:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68da      	ldr	r2, [r3, #12]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007554:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	695a      	ldr	r2, [r3, #20]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f022 0201 	bic.w	r2, r2, #1
 8007564:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2220      	movs	r2, #32
 800756a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007578:	2b01      	cmp	r3, #1
 800757a:	d135      	bne.n	80075e8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	330c      	adds	r3, #12
 8007588:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	e853 3f00 	ldrex	r3, [r3]
 8007590:	613b      	str	r3, [r7, #16]
   return(result);
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	f023 0310 	bic.w	r3, r3, #16
 8007598:	627b      	str	r3, [r7, #36]	@ 0x24
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	330c      	adds	r3, #12
 80075a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075a2:	623a      	str	r2, [r7, #32]
 80075a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a6:	69f9      	ldr	r1, [r7, #28]
 80075a8:	6a3a      	ldr	r2, [r7, #32]
 80075aa:	e841 2300 	strex	r3, r2, [r1]
 80075ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1e5      	bne.n	8007582 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 0310 	and.w	r3, r3, #16
 80075c0:	2b10      	cmp	r3, #16
 80075c2:	d10a      	bne.n	80075da <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80075c4:	2300      	movs	r3, #0
 80075c6:	60fb      	str	r3, [r7, #12]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	60fb      	str	r3, [r7, #12]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	60fb      	str	r3, [r7, #12]
 80075d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80075de:	4619      	mov	r1, r3
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f7ff fbe7 	bl	8006db4 <HAL_UARTEx_RxEventCallback>
 80075e6:	e002      	b.n	80075ee <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f7ff fbc5 	bl	8006d78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80075ee:	2300      	movs	r3, #0
 80075f0:	e002      	b.n	80075f8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80075f2:	2300      	movs	r3, #0
 80075f4:	e000      	b.n	80075f8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80075f6:	2302      	movs	r3, #2
  }
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3730      	adds	r7, #48	@ 0x30
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007604:	b0c0      	sub	sp, #256	@ 0x100
 8007606:	af00      	add	r7, sp, #0
 8007608:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800760c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	691b      	ldr	r3, [r3, #16]
 8007614:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800761c:	68d9      	ldr	r1, [r3, #12]
 800761e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	ea40 0301 	orr.w	r3, r0, r1
 8007628:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800762a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800762e:	689a      	ldr	r2, [r3, #8]
 8007630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	431a      	orrs	r2, r3
 8007638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800763c:	695b      	ldr	r3, [r3, #20]
 800763e:	431a      	orrs	r2, r3
 8007640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007644:	69db      	ldr	r3, [r3, #28]
 8007646:	4313      	orrs	r3, r2
 8007648:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800764c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007658:	f021 010c 	bic.w	r1, r1, #12
 800765c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007666:	430b      	orrs	r3, r1
 8007668:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800766a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	695b      	ldr	r3, [r3, #20]
 8007672:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800767a:	6999      	ldr	r1, [r3, #24]
 800767c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	ea40 0301 	orr.w	r3, r0, r1
 8007686:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	4b8f      	ldr	r3, [pc, #572]	@ (80078cc <UART_SetConfig+0x2cc>)
 8007690:	429a      	cmp	r2, r3
 8007692:	d005      	beq.n	80076a0 <UART_SetConfig+0xa0>
 8007694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	4b8d      	ldr	r3, [pc, #564]	@ (80078d0 <UART_SetConfig+0x2d0>)
 800769c:	429a      	cmp	r2, r3
 800769e:	d104      	bne.n	80076aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80076a0:	f7fd f8ce 	bl	8004840 <HAL_RCC_GetPCLK2Freq>
 80076a4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80076a8:	e003      	b.n	80076b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80076aa:	f7fd f8b5 	bl	8004818 <HAL_RCC_GetPCLK1Freq>
 80076ae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076b6:	69db      	ldr	r3, [r3, #28]
 80076b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076bc:	f040 810c 	bne.w	80078d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80076c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076c4:	2200      	movs	r2, #0
 80076c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80076ca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80076ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80076d2:	4622      	mov	r2, r4
 80076d4:	462b      	mov	r3, r5
 80076d6:	1891      	adds	r1, r2, r2
 80076d8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80076da:	415b      	adcs	r3, r3
 80076dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80076de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80076e2:	4621      	mov	r1, r4
 80076e4:	eb12 0801 	adds.w	r8, r2, r1
 80076e8:	4629      	mov	r1, r5
 80076ea:	eb43 0901 	adc.w	r9, r3, r1
 80076ee:	f04f 0200 	mov.w	r2, #0
 80076f2:	f04f 0300 	mov.w	r3, #0
 80076f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80076fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80076fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007702:	4690      	mov	r8, r2
 8007704:	4699      	mov	r9, r3
 8007706:	4623      	mov	r3, r4
 8007708:	eb18 0303 	adds.w	r3, r8, r3
 800770c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007710:	462b      	mov	r3, r5
 8007712:	eb49 0303 	adc.w	r3, r9, r3
 8007716:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800771a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007726:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800772a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800772e:	460b      	mov	r3, r1
 8007730:	18db      	adds	r3, r3, r3
 8007732:	653b      	str	r3, [r7, #80]	@ 0x50
 8007734:	4613      	mov	r3, r2
 8007736:	eb42 0303 	adc.w	r3, r2, r3
 800773a:	657b      	str	r3, [r7, #84]	@ 0x54
 800773c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007740:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007744:	f7f9 fa3a 	bl	8000bbc <__aeabi_uldivmod>
 8007748:	4602      	mov	r2, r0
 800774a:	460b      	mov	r3, r1
 800774c:	4b61      	ldr	r3, [pc, #388]	@ (80078d4 <UART_SetConfig+0x2d4>)
 800774e:	fba3 2302 	umull	r2, r3, r3, r2
 8007752:	095b      	lsrs	r3, r3, #5
 8007754:	011c      	lsls	r4, r3, #4
 8007756:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800775a:	2200      	movs	r2, #0
 800775c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007760:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007764:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007768:	4642      	mov	r2, r8
 800776a:	464b      	mov	r3, r9
 800776c:	1891      	adds	r1, r2, r2
 800776e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007770:	415b      	adcs	r3, r3
 8007772:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007774:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007778:	4641      	mov	r1, r8
 800777a:	eb12 0a01 	adds.w	sl, r2, r1
 800777e:	4649      	mov	r1, r9
 8007780:	eb43 0b01 	adc.w	fp, r3, r1
 8007784:	f04f 0200 	mov.w	r2, #0
 8007788:	f04f 0300 	mov.w	r3, #0
 800778c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007790:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007794:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007798:	4692      	mov	sl, r2
 800779a:	469b      	mov	fp, r3
 800779c:	4643      	mov	r3, r8
 800779e:	eb1a 0303 	adds.w	r3, sl, r3
 80077a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80077a6:	464b      	mov	r3, r9
 80077a8:	eb4b 0303 	adc.w	r3, fp, r3
 80077ac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80077b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80077bc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80077c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80077c4:	460b      	mov	r3, r1
 80077c6:	18db      	adds	r3, r3, r3
 80077c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80077ca:	4613      	mov	r3, r2
 80077cc:	eb42 0303 	adc.w	r3, r2, r3
 80077d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80077d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80077d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80077da:	f7f9 f9ef 	bl	8000bbc <__aeabi_uldivmod>
 80077de:	4602      	mov	r2, r0
 80077e0:	460b      	mov	r3, r1
 80077e2:	4611      	mov	r1, r2
 80077e4:	4b3b      	ldr	r3, [pc, #236]	@ (80078d4 <UART_SetConfig+0x2d4>)
 80077e6:	fba3 2301 	umull	r2, r3, r3, r1
 80077ea:	095b      	lsrs	r3, r3, #5
 80077ec:	2264      	movs	r2, #100	@ 0x64
 80077ee:	fb02 f303 	mul.w	r3, r2, r3
 80077f2:	1acb      	subs	r3, r1, r3
 80077f4:	00db      	lsls	r3, r3, #3
 80077f6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80077fa:	4b36      	ldr	r3, [pc, #216]	@ (80078d4 <UART_SetConfig+0x2d4>)
 80077fc:	fba3 2302 	umull	r2, r3, r3, r2
 8007800:	095b      	lsrs	r3, r3, #5
 8007802:	005b      	lsls	r3, r3, #1
 8007804:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007808:	441c      	add	r4, r3
 800780a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800780e:	2200      	movs	r2, #0
 8007810:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007814:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007818:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800781c:	4642      	mov	r2, r8
 800781e:	464b      	mov	r3, r9
 8007820:	1891      	adds	r1, r2, r2
 8007822:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007824:	415b      	adcs	r3, r3
 8007826:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007828:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800782c:	4641      	mov	r1, r8
 800782e:	1851      	adds	r1, r2, r1
 8007830:	6339      	str	r1, [r7, #48]	@ 0x30
 8007832:	4649      	mov	r1, r9
 8007834:	414b      	adcs	r3, r1
 8007836:	637b      	str	r3, [r7, #52]	@ 0x34
 8007838:	f04f 0200 	mov.w	r2, #0
 800783c:	f04f 0300 	mov.w	r3, #0
 8007840:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007844:	4659      	mov	r1, fp
 8007846:	00cb      	lsls	r3, r1, #3
 8007848:	4651      	mov	r1, sl
 800784a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800784e:	4651      	mov	r1, sl
 8007850:	00ca      	lsls	r2, r1, #3
 8007852:	4610      	mov	r0, r2
 8007854:	4619      	mov	r1, r3
 8007856:	4603      	mov	r3, r0
 8007858:	4642      	mov	r2, r8
 800785a:	189b      	adds	r3, r3, r2
 800785c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007860:	464b      	mov	r3, r9
 8007862:	460a      	mov	r2, r1
 8007864:	eb42 0303 	adc.w	r3, r2, r3
 8007868:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800786c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007878:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800787c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007880:	460b      	mov	r3, r1
 8007882:	18db      	adds	r3, r3, r3
 8007884:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007886:	4613      	mov	r3, r2
 8007888:	eb42 0303 	adc.w	r3, r2, r3
 800788c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800788e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007892:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007896:	f7f9 f991 	bl	8000bbc <__aeabi_uldivmod>
 800789a:	4602      	mov	r2, r0
 800789c:	460b      	mov	r3, r1
 800789e:	4b0d      	ldr	r3, [pc, #52]	@ (80078d4 <UART_SetConfig+0x2d4>)
 80078a0:	fba3 1302 	umull	r1, r3, r3, r2
 80078a4:	095b      	lsrs	r3, r3, #5
 80078a6:	2164      	movs	r1, #100	@ 0x64
 80078a8:	fb01 f303 	mul.w	r3, r1, r3
 80078ac:	1ad3      	subs	r3, r2, r3
 80078ae:	00db      	lsls	r3, r3, #3
 80078b0:	3332      	adds	r3, #50	@ 0x32
 80078b2:	4a08      	ldr	r2, [pc, #32]	@ (80078d4 <UART_SetConfig+0x2d4>)
 80078b4:	fba2 2303 	umull	r2, r3, r2, r3
 80078b8:	095b      	lsrs	r3, r3, #5
 80078ba:	f003 0207 	and.w	r2, r3, #7
 80078be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4422      	add	r2, r4
 80078c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80078c8:	e106      	b.n	8007ad8 <UART_SetConfig+0x4d8>
 80078ca:	bf00      	nop
 80078cc:	40011000 	.word	0x40011000
 80078d0:	40011400 	.word	0x40011400
 80078d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80078d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078dc:	2200      	movs	r2, #0
 80078de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80078e2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80078e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80078ea:	4642      	mov	r2, r8
 80078ec:	464b      	mov	r3, r9
 80078ee:	1891      	adds	r1, r2, r2
 80078f0:	6239      	str	r1, [r7, #32]
 80078f2:	415b      	adcs	r3, r3
 80078f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80078f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80078fa:	4641      	mov	r1, r8
 80078fc:	1854      	adds	r4, r2, r1
 80078fe:	4649      	mov	r1, r9
 8007900:	eb43 0501 	adc.w	r5, r3, r1
 8007904:	f04f 0200 	mov.w	r2, #0
 8007908:	f04f 0300 	mov.w	r3, #0
 800790c:	00eb      	lsls	r3, r5, #3
 800790e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007912:	00e2      	lsls	r2, r4, #3
 8007914:	4614      	mov	r4, r2
 8007916:	461d      	mov	r5, r3
 8007918:	4643      	mov	r3, r8
 800791a:	18e3      	adds	r3, r4, r3
 800791c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007920:	464b      	mov	r3, r9
 8007922:	eb45 0303 	adc.w	r3, r5, r3
 8007926:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800792a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007936:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800793a:	f04f 0200 	mov.w	r2, #0
 800793e:	f04f 0300 	mov.w	r3, #0
 8007942:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007946:	4629      	mov	r1, r5
 8007948:	008b      	lsls	r3, r1, #2
 800794a:	4621      	mov	r1, r4
 800794c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007950:	4621      	mov	r1, r4
 8007952:	008a      	lsls	r2, r1, #2
 8007954:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007958:	f7f9 f930 	bl	8000bbc <__aeabi_uldivmod>
 800795c:	4602      	mov	r2, r0
 800795e:	460b      	mov	r3, r1
 8007960:	4b60      	ldr	r3, [pc, #384]	@ (8007ae4 <UART_SetConfig+0x4e4>)
 8007962:	fba3 2302 	umull	r2, r3, r3, r2
 8007966:	095b      	lsrs	r3, r3, #5
 8007968:	011c      	lsls	r4, r3, #4
 800796a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800796e:	2200      	movs	r2, #0
 8007970:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007974:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007978:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800797c:	4642      	mov	r2, r8
 800797e:	464b      	mov	r3, r9
 8007980:	1891      	adds	r1, r2, r2
 8007982:	61b9      	str	r1, [r7, #24]
 8007984:	415b      	adcs	r3, r3
 8007986:	61fb      	str	r3, [r7, #28]
 8007988:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800798c:	4641      	mov	r1, r8
 800798e:	1851      	adds	r1, r2, r1
 8007990:	6139      	str	r1, [r7, #16]
 8007992:	4649      	mov	r1, r9
 8007994:	414b      	adcs	r3, r1
 8007996:	617b      	str	r3, [r7, #20]
 8007998:	f04f 0200 	mov.w	r2, #0
 800799c:	f04f 0300 	mov.w	r3, #0
 80079a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80079a4:	4659      	mov	r1, fp
 80079a6:	00cb      	lsls	r3, r1, #3
 80079a8:	4651      	mov	r1, sl
 80079aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079ae:	4651      	mov	r1, sl
 80079b0:	00ca      	lsls	r2, r1, #3
 80079b2:	4610      	mov	r0, r2
 80079b4:	4619      	mov	r1, r3
 80079b6:	4603      	mov	r3, r0
 80079b8:	4642      	mov	r2, r8
 80079ba:	189b      	adds	r3, r3, r2
 80079bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80079c0:	464b      	mov	r3, r9
 80079c2:	460a      	mov	r2, r1
 80079c4:	eb42 0303 	adc.w	r3, r2, r3
 80079c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80079cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80079d6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80079d8:	f04f 0200 	mov.w	r2, #0
 80079dc:	f04f 0300 	mov.w	r3, #0
 80079e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80079e4:	4649      	mov	r1, r9
 80079e6:	008b      	lsls	r3, r1, #2
 80079e8:	4641      	mov	r1, r8
 80079ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80079ee:	4641      	mov	r1, r8
 80079f0:	008a      	lsls	r2, r1, #2
 80079f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80079f6:	f7f9 f8e1 	bl	8000bbc <__aeabi_uldivmod>
 80079fa:	4602      	mov	r2, r0
 80079fc:	460b      	mov	r3, r1
 80079fe:	4611      	mov	r1, r2
 8007a00:	4b38      	ldr	r3, [pc, #224]	@ (8007ae4 <UART_SetConfig+0x4e4>)
 8007a02:	fba3 2301 	umull	r2, r3, r3, r1
 8007a06:	095b      	lsrs	r3, r3, #5
 8007a08:	2264      	movs	r2, #100	@ 0x64
 8007a0a:	fb02 f303 	mul.w	r3, r2, r3
 8007a0e:	1acb      	subs	r3, r1, r3
 8007a10:	011b      	lsls	r3, r3, #4
 8007a12:	3332      	adds	r3, #50	@ 0x32
 8007a14:	4a33      	ldr	r2, [pc, #204]	@ (8007ae4 <UART_SetConfig+0x4e4>)
 8007a16:	fba2 2303 	umull	r2, r3, r2, r3
 8007a1a:	095b      	lsrs	r3, r3, #5
 8007a1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007a20:	441c      	add	r4, r3
 8007a22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a26:	2200      	movs	r2, #0
 8007a28:	673b      	str	r3, [r7, #112]	@ 0x70
 8007a2a:	677a      	str	r2, [r7, #116]	@ 0x74
 8007a2c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007a30:	4642      	mov	r2, r8
 8007a32:	464b      	mov	r3, r9
 8007a34:	1891      	adds	r1, r2, r2
 8007a36:	60b9      	str	r1, [r7, #8]
 8007a38:	415b      	adcs	r3, r3
 8007a3a:	60fb      	str	r3, [r7, #12]
 8007a3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a40:	4641      	mov	r1, r8
 8007a42:	1851      	adds	r1, r2, r1
 8007a44:	6039      	str	r1, [r7, #0]
 8007a46:	4649      	mov	r1, r9
 8007a48:	414b      	adcs	r3, r1
 8007a4a:	607b      	str	r3, [r7, #4]
 8007a4c:	f04f 0200 	mov.w	r2, #0
 8007a50:	f04f 0300 	mov.w	r3, #0
 8007a54:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007a58:	4659      	mov	r1, fp
 8007a5a:	00cb      	lsls	r3, r1, #3
 8007a5c:	4651      	mov	r1, sl
 8007a5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a62:	4651      	mov	r1, sl
 8007a64:	00ca      	lsls	r2, r1, #3
 8007a66:	4610      	mov	r0, r2
 8007a68:	4619      	mov	r1, r3
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	4642      	mov	r2, r8
 8007a6e:	189b      	adds	r3, r3, r2
 8007a70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a72:	464b      	mov	r3, r9
 8007a74:	460a      	mov	r2, r1
 8007a76:	eb42 0303 	adc.w	r3, r2, r3
 8007a7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a86:	667a      	str	r2, [r7, #100]	@ 0x64
 8007a88:	f04f 0200 	mov.w	r2, #0
 8007a8c:	f04f 0300 	mov.w	r3, #0
 8007a90:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007a94:	4649      	mov	r1, r9
 8007a96:	008b      	lsls	r3, r1, #2
 8007a98:	4641      	mov	r1, r8
 8007a9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a9e:	4641      	mov	r1, r8
 8007aa0:	008a      	lsls	r2, r1, #2
 8007aa2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007aa6:	f7f9 f889 	bl	8000bbc <__aeabi_uldivmod>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	460b      	mov	r3, r1
 8007aae:	4b0d      	ldr	r3, [pc, #52]	@ (8007ae4 <UART_SetConfig+0x4e4>)
 8007ab0:	fba3 1302 	umull	r1, r3, r3, r2
 8007ab4:	095b      	lsrs	r3, r3, #5
 8007ab6:	2164      	movs	r1, #100	@ 0x64
 8007ab8:	fb01 f303 	mul.w	r3, r1, r3
 8007abc:	1ad3      	subs	r3, r2, r3
 8007abe:	011b      	lsls	r3, r3, #4
 8007ac0:	3332      	adds	r3, #50	@ 0x32
 8007ac2:	4a08      	ldr	r2, [pc, #32]	@ (8007ae4 <UART_SetConfig+0x4e4>)
 8007ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ac8:	095b      	lsrs	r3, r3, #5
 8007aca:	f003 020f 	and.w	r2, r3, #15
 8007ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4422      	add	r2, r4
 8007ad6:	609a      	str	r2, [r3, #8]
}
 8007ad8:	bf00      	nop
 8007ada:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ae4:	51eb851f 	.word	0x51eb851f

08007ae8 <__NVIC_SetPriority>:
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	4603      	mov	r3, r0
 8007af0:	6039      	str	r1, [r7, #0]
 8007af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	db0a      	blt.n	8007b12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	b2da      	uxtb	r2, r3
 8007b00:	490c      	ldr	r1, [pc, #48]	@ (8007b34 <__NVIC_SetPriority+0x4c>)
 8007b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b06:	0112      	lsls	r2, r2, #4
 8007b08:	b2d2      	uxtb	r2, r2
 8007b0a:	440b      	add	r3, r1
 8007b0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007b10:	e00a      	b.n	8007b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	b2da      	uxtb	r2, r3
 8007b16:	4908      	ldr	r1, [pc, #32]	@ (8007b38 <__NVIC_SetPriority+0x50>)
 8007b18:	79fb      	ldrb	r3, [r7, #7]
 8007b1a:	f003 030f 	and.w	r3, r3, #15
 8007b1e:	3b04      	subs	r3, #4
 8007b20:	0112      	lsls	r2, r2, #4
 8007b22:	b2d2      	uxtb	r2, r2
 8007b24:	440b      	add	r3, r1
 8007b26:	761a      	strb	r2, [r3, #24]
}
 8007b28:	bf00      	nop
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr
 8007b34:	e000e100 	.word	0xe000e100
 8007b38:	e000ed00 	.word	0xe000ed00

08007b3c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007b40:	4b05      	ldr	r3, [pc, #20]	@ (8007b58 <SysTick_Handler+0x1c>)
 8007b42:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007b44:	f001 fd6e 	bl	8009624 <xTaskGetSchedulerState>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d001      	beq.n	8007b52 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007b4e:	f002 fb63 	bl	800a218 <xPortSysTickHandler>
  }
}
 8007b52:	bf00      	nop
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	e000e010 	.word	0xe000e010

08007b5c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007b60:	2100      	movs	r1, #0
 8007b62:	f06f 0004 	mvn.w	r0, #4
 8007b66:	f7ff ffbf 	bl	8007ae8 <__NVIC_SetPriority>
#endif
}
 8007b6a:	bf00      	nop
 8007b6c:	bd80      	pop	{r7, pc}
	...

08007b70 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b76:	f3ef 8305 	mrs	r3, IPSR
 8007b7a:	603b      	str	r3, [r7, #0]
  return(result);
 8007b7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d003      	beq.n	8007b8a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007b82:	f06f 0305 	mvn.w	r3, #5
 8007b86:	607b      	str	r3, [r7, #4]
 8007b88:	e00c      	b.n	8007ba4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8007bb4 <osKernelInitialize+0x44>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d105      	bne.n	8007b9e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007b92:	4b08      	ldr	r3, [pc, #32]	@ (8007bb4 <osKernelInitialize+0x44>)
 8007b94:	2201      	movs	r2, #1
 8007b96:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	607b      	str	r3, [r7, #4]
 8007b9c:	e002      	b.n	8007ba4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007b9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007ba2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007ba4:	687b      	ldr	r3, [r7, #4]
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	370c      	adds	r7, #12
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr
 8007bb2:	bf00      	nop
 8007bb4:	2000851c 	.word	0x2000851c

08007bb8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bbe:	f3ef 8305 	mrs	r3, IPSR
 8007bc2:	603b      	str	r3, [r7, #0]
  return(result);
 8007bc4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d003      	beq.n	8007bd2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007bca:	f06f 0305 	mvn.w	r3, #5
 8007bce:	607b      	str	r3, [r7, #4]
 8007bd0:	e010      	b.n	8007bf4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8007c00 <osKernelStart+0x48>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d109      	bne.n	8007bee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007bda:	f7ff ffbf 	bl	8007b5c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007bde:	4b08      	ldr	r3, [pc, #32]	@ (8007c00 <osKernelStart+0x48>)
 8007be0:	2202      	movs	r2, #2
 8007be2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007be4:	f001 f892 	bl	8008d0c <vTaskStartScheduler>
      stat = osOK;
 8007be8:	2300      	movs	r3, #0
 8007bea:	607b      	str	r3, [r7, #4]
 8007bec:	e002      	b.n	8007bf4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007bee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007bf2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007bf4:	687b      	ldr	r3, [r7, #4]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3708      	adds	r7, #8
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	2000851c 	.word	0x2000851c

08007c04 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b08e      	sub	sp, #56	@ 0x38
 8007c08:	af04      	add	r7, sp, #16
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007c10:	2300      	movs	r3, #0
 8007c12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c14:	f3ef 8305 	mrs	r3, IPSR
 8007c18:	617b      	str	r3, [r7, #20]
  return(result);
 8007c1a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d17e      	bne.n	8007d1e <osThreadNew+0x11a>
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d07b      	beq.n	8007d1e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007c26:	2380      	movs	r3, #128	@ 0x80
 8007c28:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007c2a:	2318      	movs	r3, #24
 8007c2c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007c32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007c36:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d045      	beq.n	8007cca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d002      	beq.n	8007c4c <osThreadNew+0x48>
        name = attr->name;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	699b      	ldr	r3, [r3, #24]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d002      	beq.n	8007c5a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	699b      	ldr	r3, [r3, #24]
 8007c58:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d008      	beq.n	8007c72 <osThreadNew+0x6e>
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	2b38      	cmp	r3, #56	@ 0x38
 8007c64:	d805      	bhi.n	8007c72 <osThreadNew+0x6e>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	f003 0301 	and.w	r3, r3, #1
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d001      	beq.n	8007c76 <osThreadNew+0x72>
        return (NULL);
 8007c72:	2300      	movs	r3, #0
 8007c74:	e054      	b.n	8007d20 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	695b      	ldr	r3, [r3, #20]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d003      	beq.n	8007c86 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	695b      	ldr	r3, [r3, #20]
 8007c82:	089b      	lsrs	r3, r3, #2
 8007c84:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d00e      	beq.n	8007cac <osThreadNew+0xa8>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	2ba7      	cmp	r3, #167	@ 0xa7
 8007c94:	d90a      	bls.n	8007cac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d006      	beq.n	8007cac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	695b      	ldr	r3, [r3, #20]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d002      	beq.n	8007cac <osThreadNew+0xa8>
        mem = 1;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	61bb      	str	r3, [r7, #24]
 8007caa:	e010      	b.n	8007cce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d10c      	bne.n	8007cce <osThreadNew+0xca>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d108      	bne.n	8007cce <osThreadNew+0xca>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d104      	bne.n	8007cce <osThreadNew+0xca>
          mem = 0;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	61bb      	str	r3, [r7, #24]
 8007cc8:	e001      	b.n	8007cce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d110      	bne.n	8007cf6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007cdc:	9202      	str	r2, [sp, #8]
 8007cde:	9301      	str	r3, [sp, #4]
 8007ce0:	69fb      	ldr	r3, [r7, #28]
 8007ce2:	9300      	str	r3, [sp, #0]
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	6a3a      	ldr	r2, [r7, #32]
 8007ce8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f000 fe1a 	bl	8008924 <xTaskCreateStatic>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	613b      	str	r3, [r7, #16]
 8007cf4:	e013      	b.n	8007d1e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d110      	bne.n	8007d1e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007cfc:	6a3b      	ldr	r3, [r7, #32]
 8007cfe:	b29a      	uxth	r2, r3
 8007d00:	f107 0310 	add.w	r3, r7, #16
 8007d04:	9301      	str	r3, [sp, #4]
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	9300      	str	r3, [sp, #0]
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007d0e:	68f8      	ldr	r0, [r7, #12]
 8007d10:	f000 fe68 	bl	80089e4 <xTaskCreate>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d001      	beq.n	8007d1e <osThreadNew+0x11a>
            hTask = NULL;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007d1e:	693b      	ldr	r3, [r7, #16]
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3728      	adds	r7, #40	@ 0x28
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d30:	f3ef 8305 	mrs	r3, IPSR
 8007d34:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d36:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d003      	beq.n	8007d44 <osDelay+0x1c>
    stat = osErrorISR;
 8007d3c:	f06f 0305 	mvn.w	r3, #5
 8007d40:	60fb      	str	r3, [r7, #12]
 8007d42:	e007      	b.n	8007d54 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007d44:	2300      	movs	r3, #0
 8007d46:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d002      	beq.n	8007d54 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 ffa6 	bl	8008ca0 <vTaskDelay>
    }
  }

  return (stat);
 8007d54:	68fb      	ldr	r3, [r7, #12]
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
	...

08007d60 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	4a07      	ldr	r2, [pc, #28]	@ (8007d8c <vApplicationGetIdleTaskMemory+0x2c>)
 8007d70:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	4a06      	ldr	r2, [pc, #24]	@ (8007d90 <vApplicationGetIdleTaskMemory+0x30>)
 8007d76:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2280      	movs	r2, #128	@ 0x80
 8007d7c:	601a      	str	r2, [r3, #0]
}
 8007d7e:	bf00      	nop
 8007d80:	3714      	adds	r7, #20
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	20008520 	.word	0x20008520
 8007d90:	200085c8 	.word	0x200085c8

08007d94 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007d94:	b480      	push	{r7}
 8007d96:	b085      	sub	sp, #20
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	60b9      	str	r1, [r7, #8]
 8007d9e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	4a07      	ldr	r2, [pc, #28]	@ (8007dc0 <vApplicationGetTimerTaskMemory+0x2c>)
 8007da4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	4a06      	ldr	r2, [pc, #24]	@ (8007dc4 <vApplicationGetTimerTaskMemory+0x30>)
 8007daa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007db2:	601a      	str	r2, [r3, #0]
}
 8007db4:	bf00      	nop
 8007db6:	3714      	adds	r7, #20
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr
 8007dc0:	200087c8 	.word	0x200087c8
 8007dc4:	20008870 	.word	0x20008870

08007dc8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f103 0208 	add.w	r2, r3, #8
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007de0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f103 0208 	add.w	r2, r3, #8
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f103 0208 	add.w	r2, r3, #8
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007dfc:	bf00      	nop
 8007dfe:	370c      	adds	r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007e16:	bf00      	nop
 8007e18:	370c      	adds	r7, #12
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr

08007e22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e22:	b480      	push	{r7}
 8007e24:	b085      	sub	sp, #20
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
 8007e2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	68fa      	ldr	r2, [r7, #12]
 8007e36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	689a      	ldr	r2, [r3, #8]
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	683a      	ldr	r2, [r7, #0]
 8007e46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	683a      	ldr	r2, [r7, #0]
 8007e4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	1c5a      	adds	r2, r3, #1
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	601a      	str	r2, [r3, #0]
}
 8007e5e:	bf00      	nop
 8007e60:	3714      	adds	r7, #20
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr

08007e6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e6a:	b480      	push	{r7}
 8007e6c:	b085      	sub	sp, #20
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
 8007e72:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e80:	d103      	bne.n	8007e8a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	60fb      	str	r3, [r7, #12]
 8007e88:	e00c      	b.n	8007ea4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	3308      	adds	r3, #8
 8007e8e:	60fb      	str	r3, [r7, #12]
 8007e90:	e002      	b.n	8007e98 <vListInsert+0x2e>
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	60fb      	str	r3, [r7, #12]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	68ba      	ldr	r2, [r7, #8]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d2f6      	bcs.n	8007e92 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	685a      	ldr	r2, [r3, #4]
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	683a      	ldr	r2, [r7, #0]
 8007eb2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	683a      	ldr	r2, [r7, #0]
 8007ebe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	1c5a      	adds	r2, r3, #1
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	601a      	str	r2, [r3, #0]
}
 8007ed0:	bf00      	nop
 8007ed2:	3714      	adds	r7, #20
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007edc:	b480      	push	{r7}
 8007ede:	b085      	sub	sp, #20
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	6892      	ldr	r2, [r2, #8]
 8007ef2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	6852      	ldr	r2, [r2, #4]
 8007efc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d103      	bne.n	8007f10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	689a      	ldr	r2, [r3, #8]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	1e5a      	subs	r2, r3, #1
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3714      	adds	r7, #20
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d10b      	bne.n	8007f5c <xQueueGenericReset+0x2c>
	__asm volatile
 8007f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f48:	f383 8811 	msr	BASEPRI, r3
 8007f4c:	f3bf 8f6f 	isb	sy
 8007f50:	f3bf 8f4f 	dsb	sy
 8007f54:	60bb      	str	r3, [r7, #8]
}
 8007f56:	bf00      	nop
 8007f58:	bf00      	nop
 8007f5a:	e7fd      	b.n	8007f58 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007f5c:	f002 f8cc 	bl	800a0f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f68:	68f9      	ldr	r1, [r7, #12]
 8007f6a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007f6c:	fb01 f303 	mul.w	r3, r1, r3
 8007f70:	441a      	add	r2, r3
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f8c:	3b01      	subs	r3, #1
 8007f8e:	68f9      	ldr	r1, [r7, #12]
 8007f90:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007f92:	fb01 f303 	mul.w	r3, r1, r3
 8007f96:	441a      	add	r2, r3
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	22ff      	movs	r2, #255	@ 0xff
 8007fa0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	22ff      	movs	r2, #255	@ 0xff
 8007fa8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d114      	bne.n	8007fdc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d01a      	beq.n	8007ff0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	3310      	adds	r3, #16
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f001 f942 	bl	8009248 <xTaskRemoveFromEventList>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d012      	beq.n	8007ff0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007fca:	4b0d      	ldr	r3, [pc, #52]	@ (8008000 <xQueueGenericReset+0xd0>)
 8007fcc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fd0:	601a      	str	r2, [r3, #0]
 8007fd2:	f3bf 8f4f 	dsb	sy
 8007fd6:	f3bf 8f6f 	isb	sy
 8007fda:	e009      	b.n	8007ff0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	3310      	adds	r3, #16
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7ff fef1 	bl	8007dc8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	3324      	adds	r3, #36	@ 0x24
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7ff feec 	bl	8007dc8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007ff0:	f002 f8b4 	bl	800a15c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007ff4:	2301      	movs	r3, #1
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3710      	adds	r7, #16
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	e000ed04 	.word	0xe000ed04

08008004 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008004:	b580      	push	{r7, lr}
 8008006:	b08e      	sub	sp, #56	@ 0x38
 8008008:	af02      	add	r7, sp, #8
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	607a      	str	r2, [r7, #4]
 8008010:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d10b      	bne.n	8008030 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800801c:	f383 8811 	msr	BASEPRI, r3
 8008020:	f3bf 8f6f 	isb	sy
 8008024:	f3bf 8f4f 	dsb	sy
 8008028:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800802a:	bf00      	nop
 800802c:	bf00      	nop
 800802e:	e7fd      	b.n	800802c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d10b      	bne.n	800804e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800803a:	f383 8811 	msr	BASEPRI, r3
 800803e:	f3bf 8f6f 	isb	sy
 8008042:	f3bf 8f4f 	dsb	sy
 8008046:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008048:	bf00      	nop
 800804a:	bf00      	nop
 800804c:	e7fd      	b.n	800804a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d002      	beq.n	800805a <xQueueGenericCreateStatic+0x56>
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d001      	beq.n	800805e <xQueueGenericCreateStatic+0x5a>
 800805a:	2301      	movs	r3, #1
 800805c:	e000      	b.n	8008060 <xQueueGenericCreateStatic+0x5c>
 800805e:	2300      	movs	r3, #0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d10b      	bne.n	800807c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008068:	f383 8811 	msr	BASEPRI, r3
 800806c:	f3bf 8f6f 	isb	sy
 8008070:	f3bf 8f4f 	dsb	sy
 8008074:	623b      	str	r3, [r7, #32]
}
 8008076:	bf00      	nop
 8008078:	bf00      	nop
 800807a:	e7fd      	b.n	8008078 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d102      	bne.n	8008088 <xQueueGenericCreateStatic+0x84>
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d101      	bne.n	800808c <xQueueGenericCreateStatic+0x88>
 8008088:	2301      	movs	r3, #1
 800808a:	e000      	b.n	800808e <xQueueGenericCreateStatic+0x8a>
 800808c:	2300      	movs	r3, #0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d10b      	bne.n	80080aa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008096:	f383 8811 	msr	BASEPRI, r3
 800809a:	f3bf 8f6f 	isb	sy
 800809e:	f3bf 8f4f 	dsb	sy
 80080a2:	61fb      	str	r3, [r7, #28]
}
 80080a4:	bf00      	nop
 80080a6:	bf00      	nop
 80080a8:	e7fd      	b.n	80080a6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80080aa:	2350      	movs	r3, #80	@ 0x50
 80080ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	2b50      	cmp	r3, #80	@ 0x50
 80080b2:	d00b      	beq.n	80080cc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80080b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080b8:	f383 8811 	msr	BASEPRI, r3
 80080bc:	f3bf 8f6f 	isb	sy
 80080c0:	f3bf 8f4f 	dsb	sy
 80080c4:	61bb      	str	r3, [r7, #24]
}
 80080c6:	bf00      	nop
 80080c8:	bf00      	nop
 80080ca:	e7fd      	b.n	80080c8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80080cc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80080d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d00d      	beq.n	80080f4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80080d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080da:	2201      	movs	r2, #1
 80080dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80080e0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80080e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080e6:	9300      	str	r3, [sp, #0]
 80080e8:	4613      	mov	r3, r2
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	68b9      	ldr	r1, [r7, #8]
 80080ee:	68f8      	ldr	r0, [r7, #12]
 80080f0:	f000 f805 	bl	80080fe <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80080f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3730      	adds	r7, #48	@ 0x30
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}

080080fe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b084      	sub	sp, #16
 8008102:	af00      	add	r7, sp, #0
 8008104:	60f8      	str	r0, [r7, #12]
 8008106:	60b9      	str	r1, [r7, #8]
 8008108:	607a      	str	r2, [r7, #4]
 800810a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d103      	bne.n	800811a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008112:	69bb      	ldr	r3, [r7, #24]
 8008114:	69ba      	ldr	r2, [r7, #24]
 8008116:	601a      	str	r2, [r3, #0]
 8008118:	e002      	b.n	8008120 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008120:	69bb      	ldr	r3, [r7, #24]
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	68ba      	ldr	r2, [r7, #8]
 800812a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800812c:	2101      	movs	r1, #1
 800812e:	69b8      	ldr	r0, [r7, #24]
 8008130:	f7ff fefe 	bl	8007f30 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	78fa      	ldrb	r2, [r7, #3]
 8008138:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800813c:	bf00      	nop
 800813e:	3710      	adds	r7, #16
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b08e      	sub	sp, #56	@ 0x38
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	607a      	str	r2, [r7, #4]
 8008150:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008152:	2300      	movs	r3, #0
 8008154:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800815a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800815c:	2b00      	cmp	r3, #0
 800815e:	d10b      	bne.n	8008178 <xQueueGenericSend+0x34>
	__asm volatile
 8008160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008164:	f383 8811 	msr	BASEPRI, r3
 8008168:	f3bf 8f6f 	isb	sy
 800816c:	f3bf 8f4f 	dsb	sy
 8008170:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008172:	bf00      	nop
 8008174:	bf00      	nop
 8008176:	e7fd      	b.n	8008174 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d103      	bne.n	8008186 <xQueueGenericSend+0x42>
 800817e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008182:	2b00      	cmp	r3, #0
 8008184:	d101      	bne.n	800818a <xQueueGenericSend+0x46>
 8008186:	2301      	movs	r3, #1
 8008188:	e000      	b.n	800818c <xQueueGenericSend+0x48>
 800818a:	2300      	movs	r3, #0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d10b      	bne.n	80081a8 <xQueueGenericSend+0x64>
	__asm volatile
 8008190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008194:	f383 8811 	msr	BASEPRI, r3
 8008198:	f3bf 8f6f 	isb	sy
 800819c:	f3bf 8f4f 	dsb	sy
 80081a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80081a2:	bf00      	nop
 80081a4:	bf00      	nop
 80081a6:	e7fd      	b.n	80081a4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	2b02      	cmp	r3, #2
 80081ac:	d103      	bne.n	80081b6 <xQueueGenericSend+0x72>
 80081ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d101      	bne.n	80081ba <xQueueGenericSend+0x76>
 80081b6:	2301      	movs	r3, #1
 80081b8:	e000      	b.n	80081bc <xQueueGenericSend+0x78>
 80081ba:	2300      	movs	r3, #0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d10b      	bne.n	80081d8 <xQueueGenericSend+0x94>
	__asm volatile
 80081c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081c4:	f383 8811 	msr	BASEPRI, r3
 80081c8:	f3bf 8f6f 	isb	sy
 80081cc:	f3bf 8f4f 	dsb	sy
 80081d0:	623b      	str	r3, [r7, #32]
}
 80081d2:	bf00      	nop
 80081d4:	bf00      	nop
 80081d6:	e7fd      	b.n	80081d4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80081d8:	f001 fa24 	bl	8009624 <xTaskGetSchedulerState>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d102      	bne.n	80081e8 <xQueueGenericSend+0xa4>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d101      	bne.n	80081ec <xQueueGenericSend+0xa8>
 80081e8:	2301      	movs	r3, #1
 80081ea:	e000      	b.n	80081ee <xQueueGenericSend+0xaa>
 80081ec:	2300      	movs	r3, #0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d10b      	bne.n	800820a <xQueueGenericSend+0xc6>
	__asm volatile
 80081f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081f6:	f383 8811 	msr	BASEPRI, r3
 80081fa:	f3bf 8f6f 	isb	sy
 80081fe:	f3bf 8f4f 	dsb	sy
 8008202:	61fb      	str	r3, [r7, #28]
}
 8008204:	bf00      	nop
 8008206:	bf00      	nop
 8008208:	e7fd      	b.n	8008206 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800820a:	f001 ff75 	bl	800a0f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800820e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008210:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008216:	429a      	cmp	r2, r3
 8008218:	d302      	bcc.n	8008220 <xQueueGenericSend+0xdc>
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	2b02      	cmp	r3, #2
 800821e:	d129      	bne.n	8008274 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008220:	683a      	ldr	r2, [r7, #0]
 8008222:	68b9      	ldr	r1, [r7, #8]
 8008224:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008226:	f000 fa0f 	bl	8008648 <prvCopyDataToQueue>
 800822a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800822c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800822e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008230:	2b00      	cmp	r3, #0
 8008232:	d010      	beq.n	8008256 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008236:	3324      	adds	r3, #36	@ 0x24
 8008238:	4618      	mov	r0, r3
 800823a:	f001 f805 	bl	8009248 <xTaskRemoveFromEventList>
 800823e:	4603      	mov	r3, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d013      	beq.n	800826c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008244:	4b3f      	ldr	r3, [pc, #252]	@ (8008344 <xQueueGenericSend+0x200>)
 8008246:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800824a:	601a      	str	r2, [r3, #0]
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	f3bf 8f6f 	isb	sy
 8008254:	e00a      	b.n	800826c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008258:	2b00      	cmp	r3, #0
 800825a:	d007      	beq.n	800826c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800825c:	4b39      	ldr	r3, [pc, #228]	@ (8008344 <xQueueGenericSend+0x200>)
 800825e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008262:	601a      	str	r2, [r3, #0]
 8008264:	f3bf 8f4f 	dsb	sy
 8008268:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800826c:	f001 ff76 	bl	800a15c <vPortExitCritical>
				return pdPASS;
 8008270:	2301      	movs	r3, #1
 8008272:	e063      	b.n	800833c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d103      	bne.n	8008282 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800827a:	f001 ff6f 	bl	800a15c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800827e:	2300      	movs	r3, #0
 8008280:	e05c      	b.n	800833c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008284:	2b00      	cmp	r3, #0
 8008286:	d106      	bne.n	8008296 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008288:	f107 0314 	add.w	r3, r7, #20
 800828c:	4618      	mov	r0, r3
 800828e:	f001 f867 	bl	8009360 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008292:	2301      	movs	r3, #1
 8008294:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008296:	f001 ff61 	bl	800a15c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800829a:	f000 fda7 	bl	8008dec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800829e:	f001 ff2b 	bl	800a0f8 <vPortEnterCritical>
 80082a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80082a8:	b25b      	sxtb	r3, r3
 80082aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80082ae:	d103      	bne.n	80082b8 <xQueueGenericSend+0x174>
 80082b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b2:	2200      	movs	r2, #0
 80082b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80082b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80082be:	b25b      	sxtb	r3, r3
 80082c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80082c4:	d103      	bne.n	80082ce <xQueueGenericSend+0x18a>
 80082c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c8:	2200      	movs	r2, #0
 80082ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80082ce:	f001 ff45 	bl	800a15c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80082d2:	1d3a      	adds	r2, r7, #4
 80082d4:	f107 0314 	add.w	r3, r7, #20
 80082d8:	4611      	mov	r1, r2
 80082da:	4618      	mov	r0, r3
 80082dc:	f001 f856 	bl	800938c <xTaskCheckForTimeOut>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d124      	bne.n	8008330 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80082e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082e8:	f000 faa6 	bl	8008838 <prvIsQueueFull>
 80082ec:	4603      	mov	r3, r0
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d018      	beq.n	8008324 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80082f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f4:	3310      	adds	r3, #16
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	4611      	mov	r1, r2
 80082fa:	4618      	mov	r0, r3
 80082fc:	f000 ff52 	bl	80091a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008300:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008302:	f000 fa31 	bl	8008768 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008306:	f000 fd7f 	bl	8008e08 <xTaskResumeAll>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	f47f af7c 	bne.w	800820a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008312:	4b0c      	ldr	r3, [pc, #48]	@ (8008344 <xQueueGenericSend+0x200>)
 8008314:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008318:	601a      	str	r2, [r3, #0]
 800831a:	f3bf 8f4f 	dsb	sy
 800831e:	f3bf 8f6f 	isb	sy
 8008322:	e772      	b.n	800820a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008324:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008326:	f000 fa1f 	bl	8008768 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800832a:	f000 fd6d 	bl	8008e08 <xTaskResumeAll>
 800832e:	e76c      	b.n	800820a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008330:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008332:	f000 fa19 	bl	8008768 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008336:	f000 fd67 	bl	8008e08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800833a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800833c:	4618      	mov	r0, r3
 800833e:	3738      	adds	r7, #56	@ 0x38
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}
 8008344:	e000ed04 	.word	0xe000ed04

08008348 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b090      	sub	sp, #64	@ 0x40
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	607a      	str	r2, [r7, #4]
 8008354:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800835a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800835c:	2b00      	cmp	r3, #0
 800835e:	d10b      	bne.n	8008378 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008364:	f383 8811 	msr	BASEPRI, r3
 8008368:	f3bf 8f6f 	isb	sy
 800836c:	f3bf 8f4f 	dsb	sy
 8008370:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008372:	bf00      	nop
 8008374:	bf00      	nop
 8008376:	e7fd      	b.n	8008374 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d103      	bne.n	8008386 <xQueueGenericSendFromISR+0x3e>
 800837e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008382:	2b00      	cmp	r3, #0
 8008384:	d101      	bne.n	800838a <xQueueGenericSendFromISR+0x42>
 8008386:	2301      	movs	r3, #1
 8008388:	e000      	b.n	800838c <xQueueGenericSendFromISR+0x44>
 800838a:	2300      	movs	r3, #0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d10b      	bne.n	80083a8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008394:	f383 8811 	msr	BASEPRI, r3
 8008398:	f3bf 8f6f 	isb	sy
 800839c:	f3bf 8f4f 	dsb	sy
 80083a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80083a2:	bf00      	nop
 80083a4:	bf00      	nop
 80083a6:	e7fd      	b.n	80083a4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	2b02      	cmp	r3, #2
 80083ac:	d103      	bne.n	80083b6 <xQueueGenericSendFromISR+0x6e>
 80083ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d101      	bne.n	80083ba <xQueueGenericSendFromISR+0x72>
 80083b6:	2301      	movs	r3, #1
 80083b8:	e000      	b.n	80083bc <xQueueGenericSendFromISR+0x74>
 80083ba:	2300      	movs	r3, #0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d10b      	bne.n	80083d8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80083c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083c4:	f383 8811 	msr	BASEPRI, r3
 80083c8:	f3bf 8f6f 	isb	sy
 80083cc:	f3bf 8f4f 	dsb	sy
 80083d0:	623b      	str	r3, [r7, #32]
}
 80083d2:	bf00      	nop
 80083d4:	bf00      	nop
 80083d6:	e7fd      	b.n	80083d4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80083d8:	f001 ff6e 	bl	800a2b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80083dc:	f3ef 8211 	mrs	r2, BASEPRI
 80083e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083e4:	f383 8811 	msr	BASEPRI, r3
 80083e8:	f3bf 8f6f 	isb	sy
 80083ec:	f3bf 8f4f 	dsb	sy
 80083f0:	61fa      	str	r2, [r7, #28]
 80083f2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80083f4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80083f6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80083f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008400:	429a      	cmp	r2, r3
 8008402:	d302      	bcc.n	800840a <xQueueGenericSendFromISR+0xc2>
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	2b02      	cmp	r3, #2
 8008408:	d12f      	bne.n	800846a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800840a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800840c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008410:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008418:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800841a:	683a      	ldr	r2, [r7, #0]
 800841c:	68b9      	ldr	r1, [r7, #8]
 800841e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008420:	f000 f912 	bl	8008648 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008424:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008428:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800842c:	d112      	bne.n	8008454 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800842e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008432:	2b00      	cmp	r3, #0
 8008434:	d016      	beq.n	8008464 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008438:	3324      	adds	r3, #36	@ 0x24
 800843a:	4618      	mov	r0, r3
 800843c:	f000 ff04 	bl	8009248 <xTaskRemoveFromEventList>
 8008440:	4603      	mov	r3, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00e      	beq.n	8008464 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d00b      	beq.n	8008464 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2201      	movs	r2, #1
 8008450:	601a      	str	r2, [r3, #0]
 8008452:	e007      	b.n	8008464 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008454:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008458:	3301      	adds	r3, #1
 800845a:	b2db      	uxtb	r3, r3
 800845c:	b25a      	sxtb	r2, r3
 800845e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008460:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008464:	2301      	movs	r3, #1
 8008466:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008468:	e001      	b.n	800846e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800846a:	2300      	movs	r3, #0
 800846c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800846e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008470:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008478:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800847a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800847c:	4618      	mov	r0, r3
 800847e:	3740      	adds	r7, #64	@ 0x40
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b08c      	sub	sp, #48	@ 0x30
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008490:	2300      	movs	r3, #0
 8008492:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800849a:	2b00      	cmp	r3, #0
 800849c:	d10b      	bne.n	80084b6 <xQueueReceive+0x32>
	__asm volatile
 800849e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084a2:	f383 8811 	msr	BASEPRI, r3
 80084a6:	f3bf 8f6f 	isb	sy
 80084aa:	f3bf 8f4f 	dsb	sy
 80084ae:	623b      	str	r3, [r7, #32]
}
 80084b0:	bf00      	nop
 80084b2:	bf00      	nop
 80084b4:	e7fd      	b.n	80084b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d103      	bne.n	80084c4 <xQueueReceive+0x40>
 80084bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d101      	bne.n	80084c8 <xQueueReceive+0x44>
 80084c4:	2301      	movs	r3, #1
 80084c6:	e000      	b.n	80084ca <xQueueReceive+0x46>
 80084c8:	2300      	movs	r3, #0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d10b      	bne.n	80084e6 <xQueueReceive+0x62>
	__asm volatile
 80084ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084d2:	f383 8811 	msr	BASEPRI, r3
 80084d6:	f3bf 8f6f 	isb	sy
 80084da:	f3bf 8f4f 	dsb	sy
 80084de:	61fb      	str	r3, [r7, #28]
}
 80084e0:	bf00      	nop
 80084e2:	bf00      	nop
 80084e4:	e7fd      	b.n	80084e2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80084e6:	f001 f89d 	bl	8009624 <xTaskGetSchedulerState>
 80084ea:	4603      	mov	r3, r0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d102      	bne.n	80084f6 <xQueueReceive+0x72>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d101      	bne.n	80084fa <xQueueReceive+0x76>
 80084f6:	2301      	movs	r3, #1
 80084f8:	e000      	b.n	80084fc <xQueueReceive+0x78>
 80084fa:	2300      	movs	r3, #0
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d10b      	bne.n	8008518 <xQueueReceive+0x94>
	__asm volatile
 8008500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008504:	f383 8811 	msr	BASEPRI, r3
 8008508:	f3bf 8f6f 	isb	sy
 800850c:	f3bf 8f4f 	dsb	sy
 8008510:	61bb      	str	r3, [r7, #24]
}
 8008512:	bf00      	nop
 8008514:	bf00      	nop
 8008516:	e7fd      	b.n	8008514 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008518:	f001 fdee 	bl	800a0f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800851c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800851e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008520:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008524:	2b00      	cmp	r3, #0
 8008526:	d01f      	beq.n	8008568 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008528:	68b9      	ldr	r1, [r7, #8]
 800852a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800852c:	f000 f8f6 	bl	800871c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008532:	1e5a      	subs	r2, r3, #1
 8008534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008536:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800853a:	691b      	ldr	r3, [r3, #16]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00f      	beq.n	8008560 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008542:	3310      	adds	r3, #16
 8008544:	4618      	mov	r0, r3
 8008546:	f000 fe7f 	bl	8009248 <xTaskRemoveFromEventList>
 800854a:	4603      	mov	r3, r0
 800854c:	2b00      	cmp	r3, #0
 800854e:	d007      	beq.n	8008560 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008550:	4b3c      	ldr	r3, [pc, #240]	@ (8008644 <xQueueReceive+0x1c0>)
 8008552:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008556:	601a      	str	r2, [r3, #0]
 8008558:	f3bf 8f4f 	dsb	sy
 800855c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008560:	f001 fdfc 	bl	800a15c <vPortExitCritical>
				return pdPASS;
 8008564:	2301      	movs	r3, #1
 8008566:	e069      	b.n	800863c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d103      	bne.n	8008576 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800856e:	f001 fdf5 	bl	800a15c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008572:	2300      	movs	r3, #0
 8008574:	e062      	b.n	800863c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008578:	2b00      	cmp	r3, #0
 800857a:	d106      	bne.n	800858a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800857c:	f107 0310 	add.w	r3, r7, #16
 8008580:	4618      	mov	r0, r3
 8008582:	f000 feed 	bl	8009360 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008586:	2301      	movs	r3, #1
 8008588:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800858a:	f001 fde7 	bl	800a15c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800858e:	f000 fc2d 	bl	8008dec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008592:	f001 fdb1 	bl	800a0f8 <vPortEnterCritical>
 8008596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008598:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800859c:	b25b      	sxtb	r3, r3
 800859e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80085a2:	d103      	bne.n	80085ac <xQueueReceive+0x128>
 80085a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085a6:	2200      	movs	r2, #0
 80085a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80085ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80085b2:	b25b      	sxtb	r3, r3
 80085b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80085b8:	d103      	bne.n	80085c2 <xQueueReceive+0x13e>
 80085ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085bc:	2200      	movs	r2, #0
 80085be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80085c2:	f001 fdcb 	bl	800a15c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80085c6:	1d3a      	adds	r2, r7, #4
 80085c8:	f107 0310 	add.w	r3, r7, #16
 80085cc:	4611      	mov	r1, r2
 80085ce:	4618      	mov	r0, r3
 80085d0:	f000 fedc 	bl	800938c <xTaskCheckForTimeOut>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d123      	bne.n	8008622 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80085da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085dc:	f000 f916 	bl	800880c <prvIsQueueEmpty>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d017      	beq.n	8008616 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80085e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085e8:	3324      	adds	r3, #36	@ 0x24
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	4611      	mov	r1, r2
 80085ee:	4618      	mov	r0, r3
 80085f0:	f000 fdd8 	bl	80091a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80085f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085f6:	f000 f8b7 	bl	8008768 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80085fa:	f000 fc05 	bl	8008e08 <xTaskResumeAll>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d189      	bne.n	8008518 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008604:	4b0f      	ldr	r3, [pc, #60]	@ (8008644 <xQueueReceive+0x1c0>)
 8008606:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800860a:	601a      	str	r2, [r3, #0]
 800860c:	f3bf 8f4f 	dsb	sy
 8008610:	f3bf 8f6f 	isb	sy
 8008614:	e780      	b.n	8008518 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008616:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008618:	f000 f8a6 	bl	8008768 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800861c:	f000 fbf4 	bl	8008e08 <xTaskResumeAll>
 8008620:	e77a      	b.n	8008518 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008622:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008624:	f000 f8a0 	bl	8008768 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008628:	f000 fbee 	bl	8008e08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800862c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800862e:	f000 f8ed 	bl	800880c <prvIsQueueEmpty>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	f43f af6f 	beq.w	8008518 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800863a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800863c:	4618      	mov	r0, r3
 800863e:	3730      	adds	r7, #48	@ 0x30
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}
 8008644:	e000ed04 	.word	0xe000ed04

08008648 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b086      	sub	sp, #24
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008654:	2300      	movs	r3, #0
 8008656:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800865c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008662:	2b00      	cmp	r3, #0
 8008664:	d10d      	bne.n	8008682 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d14d      	bne.n	800870a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	4618      	mov	r0, r3
 8008674:	f000 fff4 	bl	8009660 <xTaskPriorityDisinherit>
 8008678:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2200      	movs	r2, #0
 800867e:	609a      	str	r2, [r3, #8]
 8008680:	e043      	b.n	800870a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d119      	bne.n	80086bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	6858      	ldr	r0, [r3, #4]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008690:	461a      	mov	r2, r3
 8008692:	68b9      	ldr	r1, [r7, #8]
 8008694:	f011 fb2d 	bl	8019cf2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	685a      	ldr	r2, [r3, #4]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086a0:	441a      	add	r2, r3
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	685a      	ldr	r2, [r3, #4]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d32b      	bcc.n	800870a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	605a      	str	r2, [r3, #4]
 80086ba:	e026      	b.n	800870a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	68d8      	ldr	r0, [r3, #12]
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086c4:	461a      	mov	r2, r3
 80086c6:	68b9      	ldr	r1, [r7, #8]
 80086c8:	f011 fb13 	bl	8019cf2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	68da      	ldr	r2, [r3, #12]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086d4:	425b      	negs	r3, r3
 80086d6:	441a      	add	r2, r3
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	68da      	ldr	r2, [r3, #12]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d207      	bcs.n	80086f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	689a      	ldr	r2, [r3, #8]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086f0:	425b      	negs	r3, r3
 80086f2:	441a      	add	r2, r3
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2b02      	cmp	r3, #2
 80086fc:	d105      	bne.n	800870a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d002      	beq.n	800870a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	3b01      	subs	r3, #1
 8008708:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	1c5a      	adds	r2, r3, #1
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008712:	697b      	ldr	r3, [r7, #20]
}
 8008714:	4618      	mov	r0, r3
 8008716:	3718      	adds	r7, #24
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800872a:	2b00      	cmp	r3, #0
 800872c:	d018      	beq.n	8008760 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	68da      	ldr	r2, [r3, #12]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008736:	441a      	add	r2, r3
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	68da      	ldr	r2, [r3, #12]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	429a      	cmp	r2, r3
 8008746:	d303      	bcc.n	8008750 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	68d9      	ldr	r1, [r3, #12]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008758:	461a      	mov	r2, r3
 800875a:	6838      	ldr	r0, [r7, #0]
 800875c:	f011 fac9 	bl	8019cf2 <memcpy>
	}
}
 8008760:	bf00      	nop
 8008762:	3708      	adds	r7, #8
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008770:	f001 fcc2 	bl	800a0f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800877a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800877c:	e011      	b.n	80087a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008782:	2b00      	cmp	r3, #0
 8008784:	d012      	beq.n	80087ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	3324      	adds	r3, #36	@ 0x24
 800878a:	4618      	mov	r0, r3
 800878c:	f000 fd5c 	bl	8009248 <xTaskRemoveFromEventList>
 8008790:	4603      	mov	r3, r0
 8008792:	2b00      	cmp	r3, #0
 8008794:	d001      	beq.n	800879a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008796:	f000 fe5d 	bl	8009454 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800879a:	7bfb      	ldrb	r3, [r7, #15]
 800879c:	3b01      	subs	r3, #1
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80087a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	dce9      	bgt.n	800877e <prvUnlockQueue+0x16>
 80087aa:	e000      	b.n	80087ae <prvUnlockQueue+0x46>
					break;
 80087ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	22ff      	movs	r2, #255	@ 0xff
 80087b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80087b6:	f001 fcd1 	bl	800a15c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80087ba:	f001 fc9d 	bl	800a0f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80087c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087c6:	e011      	b.n	80087ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	691b      	ldr	r3, [r3, #16]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d012      	beq.n	80087f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	3310      	adds	r3, #16
 80087d4:	4618      	mov	r0, r3
 80087d6:	f000 fd37 	bl	8009248 <xTaskRemoveFromEventList>
 80087da:	4603      	mov	r3, r0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d001      	beq.n	80087e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80087e0:	f000 fe38 	bl	8009454 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80087e4:	7bbb      	ldrb	r3, [r7, #14]
 80087e6:	3b01      	subs	r3, #1
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	dce9      	bgt.n	80087c8 <prvUnlockQueue+0x60>
 80087f4:	e000      	b.n	80087f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80087f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	22ff      	movs	r2, #255	@ 0xff
 80087fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008800:	f001 fcac 	bl	800a15c <vPortExitCritical>
}
 8008804:	bf00      	nop
 8008806:	3710      	adds	r7, #16
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008814:	f001 fc70 	bl	800a0f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800881c:	2b00      	cmp	r3, #0
 800881e:	d102      	bne.n	8008826 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008820:	2301      	movs	r3, #1
 8008822:	60fb      	str	r3, [r7, #12]
 8008824:	e001      	b.n	800882a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008826:	2300      	movs	r3, #0
 8008828:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800882a:	f001 fc97 	bl	800a15c <vPortExitCritical>

	return xReturn;
 800882e:	68fb      	ldr	r3, [r7, #12]
}
 8008830:	4618      	mov	r0, r3
 8008832:	3710      	adds	r7, #16
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008840:	f001 fc5a 	bl	800a0f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800884c:	429a      	cmp	r2, r3
 800884e:	d102      	bne.n	8008856 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008850:	2301      	movs	r3, #1
 8008852:	60fb      	str	r3, [r7, #12]
 8008854:	e001      	b.n	800885a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008856:	2300      	movs	r3, #0
 8008858:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800885a:	f001 fc7f 	bl	800a15c <vPortExitCritical>

	return xReturn;
 800885e:	68fb      	ldr	r3, [r7, #12]
}
 8008860:	4618      	mov	r0, r3
 8008862:	3710      	adds	r7, #16
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008868:	b480      	push	{r7}
 800886a:	b085      	sub	sp, #20
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008872:	2300      	movs	r3, #0
 8008874:	60fb      	str	r3, [r7, #12]
 8008876:	e014      	b.n	80088a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008878:	4a0f      	ldr	r2, [pc, #60]	@ (80088b8 <vQueueAddToRegistry+0x50>)
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d10b      	bne.n	800889c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008884:	490c      	ldr	r1, [pc, #48]	@ (80088b8 <vQueueAddToRegistry+0x50>)
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	683a      	ldr	r2, [r7, #0]
 800888a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800888e:	4a0a      	ldr	r2, [pc, #40]	@ (80088b8 <vQueueAddToRegistry+0x50>)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	00db      	lsls	r3, r3, #3
 8008894:	4413      	add	r3, r2
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800889a:	e006      	b.n	80088aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	3301      	adds	r3, #1
 80088a0:	60fb      	str	r3, [r7, #12]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2b07      	cmp	r3, #7
 80088a6:	d9e7      	bls.n	8008878 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80088a8:	bf00      	nop
 80088aa:	bf00      	nop
 80088ac:	3714      	adds	r7, #20
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr
 80088b6:	bf00      	nop
 80088b8:	20008c70 	.word	0x20008c70

080088bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b086      	sub	sp, #24
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80088cc:	f001 fc14 	bl	800a0f8 <vPortEnterCritical>
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80088d6:	b25b      	sxtb	r3, r3
 80088d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088dc:	d103      	bne.n	80088e6 <vQueueWaitForMessageRestricted+0x2a>
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	2200      	movs	r2, #0
 80088e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80088ec:	b25b      	sxtb	r3, r3
 80088ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088f2:	d103      	bne.n	80088fc <vQueueWaitForMessageRestricted+0x40>
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80088fc:	f001 fc2e 	bl	800a15c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008904:	2b00      	cmp	r3, #0
 8008906:	d106      	bne.n	8008916 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	3324      	adds	r3, #36	@ 0x24
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	68b9      	ldr	r1, [r7, #8]
 8008910:	4618      	mov	r0, r3
 8008912:	f000 fc6d 	bl	80091f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008916:	6978      	ldr	r0, [r7, #20]
 8008918:	f7ff ff26 	bl	8008768 <prvUnlockQueue>
	}
 800891c:	bf00      	nop
 800891e:	3718      	adds	r7, #24
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008924:	b580      	push	{r7, lr}
 8008926:	b08e      	sub	sp, #56	@ 0x38
 8008928:	af04      	add	r7, sp, #16
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	60b9      	str	r1, [r7, #8]
 800892e:	607a      	str	r2, [r7, #4]
 8008930:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008934:	2b00      	cmp	r3, #0
 8008936:	d10b      	bne.n	8008950 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800893c:	f383 8811 	msr	BASEPRI, r3
 8008940:	f3bf 8f6f 	isb	sy
 8008944:	f3bf 8f4f 	dsb	sy
 8008948:	623b      	str	r3, [r7, #32]
}
 800894a:	bf00      	nop
 800894c:	bf00      	nop
 800894e:	e7fd      	b.n	800894c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008952:	2b00      	cmp	r3, #0
 8008954:	d10b      	bne.n	800896e <xTaskCreateStatic+0x4a>
	__asm volatile
 8008956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800895a:	f383 8811 	msr	BASEPRI, r3
 800895e:	f3bf 8f6f 	isb	sy
 8008962:	f3bf 8f4f 	dsb	sy
 8008966:	61fb      	str	r3, [r7, #28]
}
 8008968:	bf00      	nop
 800896a:	bf00      	nop
 800896c:	e7fd      	b.n	800896a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800896e:	23a8      	movs	r3, #168	@ 0xa8
 8008970:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	2ba8      	cmp	r3, #168	@ 0xa8
 8008976:	d00b      	beq.n	8008990 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800897c:	f383 8811 	msr	BASEPRI, r3
 8008980:	f3bf 8f6f 	isb	sy
 8008984:	f3bf 8f4f 	dsb	sy
 8008988:	61bb      	str	r3, [r7, #24]
}
 800898a:	bf00      	nop
 800898c:	bf00      	nop
 800898e:	e7fd      	b.n	800898c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008990:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008994:	2b00      	cmp	r3, #0
 8008996:	d01e      	beq.n	80089d6 <xTaskCreateStatic+0xb2>
 8008998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800899a:	2b00      	cmp	r3, #0
 800899c:	d01b      	beq.n	80089d6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800899e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089a0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80089a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80089a6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80089a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089aa:	2202      	movs	r2, #2
 80089ac:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80089b0:	2300      	movs	r3, #0
 80089b2:	9303      	str	r3, [sp, #12]
 80089b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b6:	9302      	str	r3, [sp, #8]
 80089b8:	f107 0314 	add.w	r3, r7, #20
 80089bc:	9301      	str	r3, [sp, #4]
 80089be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c0:	9300      	str	r3, [sp, #0]
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	68b9      	ldr	r1, [r7, #8]
 80089c8:	68f8      	ldr	r0, [r7, #12]
 80089ca:	f000 f851 	bl	8008a70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80089ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80089d0:	f000 f8f6 	bl	8008bc0 <prvAddNewTaskToReadyList>
 80089d4:	e001      	b.n	80089da <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80089d6:	2300      	movs	r3, #0
 80089d8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80089da:	697b      	ldr	r3, [r7, #20]
	}
 80089dc:	4618      	mov	r0, r3
 80089de:	3728      	adds	r7, #40	@ 0x28
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b08c      	sub	sp, #48	@ 0x30
 80089e8:	af04      	add	r7, sp, #16
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	60b9      	str	r1, [r7, #8]
 80089ee:	603b      	str	r3, [r7, #0]
 80089f0:	4613      	mov	r3, r2
 80089f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80089f4:	88fb      	ldrh	r3, [r7, #6]
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	4618      	mov	r0, r3
 80089fa:	f001 fc9f 	bl	800a33c <pvPortMalloc>
 80089fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d00e      	beq.n	8008a24 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008a06:	20a8      	movs	r0, #168	@ 0xa8
 8008a08:	f001 fc98 	bl	800a33c <pvPortMalloc>
 8008a0c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d003      	beq.n	8008a1c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	697a      	ldr	r2, [r7, #20]
 8008a18:	631a      	str	r2, [r3, #48]	@ 0x30
 8008a1a:	e005      	b.n	8008a28 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008a1c:	6978      	ldr	r0, [r7, #20]
 8008a1e:	f001 fd5b 	bl	800a4d8 <vPortFree>
 8008a22:	e001      	b.n	8008a28 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008a24:	2300      	movs	r3, #0
 8008a26:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008a28:	69fb      	ldr	r3, [r7, #28]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d017      	beq.n	8008a5e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	2200      	movs	r2, #0
 8008a32:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008a36:	88fa      	ldrh	r2, [r7, #6]
 8008a38:	2300      	movs	r3, #0
 8008a3a:	9303      	str	r3, [sp, #12]
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	9302      	str	r3, [sp, #8]
 8008a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a42:	9301      	str	r3, [sp, #4]
 8008a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a46:	9300      	str	r3, [sp, #0]
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	68b9      	ldr	r1, [r7, #8]
 8008a4c:	68f8      	ldr	r0, [r7, #12]
 8008a4e:	f000 f80f 	bl	8008a70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a52:	69f8      	ldr	r0, [r7, #28]
 8008a54:	f000 f8b4 	bl	8008bc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	61bb      	str	r3, [r7, #24]
 8008a5c:	e002      	b.n	8008a64 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008a5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008a62:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008a64:	69bb      	ldr	r3, [r7, #24]
	}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3720      	adds	r7, #32
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
	...

08008a70 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b088      	sub	sp, #32
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	607a      	str	r2, [r7, #4]
 8008a7c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a80:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	461a      	mov	r2, r3
 8008a88:	21a5      	movs	r1, #165	@ 0xa5
 8008a8a:	f011 f80b 	bl	8019aa4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008a98:	3b01      	subs	r3, #1
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	4413      	add	r3, r2
 8008a9e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	f023 0307 	bic.w	r3, r3, #7
 8008aa6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008aa8:	69bb      	ldr	r3, [r7, #24]
 8008aaa:	f003 0307 	and.w	r3, r3, #7
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d00b      	beq.n	8008aca <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab6:	f383 8811 	msr	BASEPRI, r3
 8008aba:	f3bf 8f6f 	isb	sy
 8008abe:	f3bf 8f4f 	dsb	sy
 8008ac2:	617b      	str	r3, [r7, #20]
}
 8008ac4:	bf00      	nop
 8008ac6:	bf00      	nop
 8008ac8:	e7fd      	b.n	8008ac6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d01f      	beq.n	8008b10 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	61fb      	str	r3, [r7, #28]
 8008ad4:	e012      	b.n	8008afc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008ad6:	68ba      	ldr	r2, [r7, #8]
 8008ad8:	69fb      	ldr	r3, [r7, #28]
 8008ada:	4413      	add	r3, r2
 8008adc:	7819      	ldrb	r1, [r3, #0]
 8008ade:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ae0:	69fb      	ldr	r3, [r7, #28]
 8008ae2:	4413      	add	r3, r2
 8008ae4:	3334      	adds	r3, #52	@ 0x34
 8008ae6:	460a      	mov	r2, r1
 8008ae8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008aea:	68ba      	ldr	r2, [r7, #8]
 8008aec:	69fb      	ldr	r3, [r7, #28]
 8008aee:	4413      	add	r3, r2
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d006      	beq.n	8008b04 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	3301      	adds	r3, #1
 8008afa:	61fb      	str	r3, [r7, #28]
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	2b0f      	cmp	r3, #15
 8008b00:	d9e9      	bls.n	8008ad6 <prvInitialiseNewTask+0x66>
 8008b02:	e000      	b.n	8008b06 <prvInitialiseNewTask+0x96>
			{
				break;
 8008b04:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008b0e:	e003      	b.n	8008b18 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b12:	2200      	movs	r2, #0
 8008b14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b1a:	2b37      	cmp	r3, #55	@ 0x37
 8008b1c:	d901      	bls.n	8008b22 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008b1e:	2337      	movs	r3, #55	@ 0x37
 8008b20:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b26:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b2c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b30:	2200      	movs	r2, #0
 8008b32:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b36:	3304      	adds	r3, #4
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f7ff f965 	bl	8007e08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b40:	3318      	adds	r3, #24
 8008b42:	4618      	mov	r0, r3
 8008b44:	f7ff f960 	bl	8007e08 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b4c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b50:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b56:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b5c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b60:	2200      	movs	r2, #0
 8008b62:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b70:	3354      	adds	r3, #84	@ 0x54
 8008b72:	224c      	movs	r2, #76	@ 0x4c
 8008b74:	2100      	movs	r1, #0
 8008b76:	4618      	mov	r0, r3
 8008b78:	f010 ff94 	bl	8019aa4 <memset>
 8008b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b7e:	4a0d      	ldr	r2, [pc, #52]	@ (8008bb4 <prvInitialiseNewTask+0x144>)
 8008b80:	659a      	str	r2, [r3, #88]	@ 0x58
 8008b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b84:	4a0c      	ldr	r2, [pc, #48]	@ (8008bb8 <prvInitialiseNewTask+0x148>)
 8008b86:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b8a:	4a0c      	ldr	r2, [pc, #48]	@ (8008bbc <prvInitialiseNewTask+0x14c>)
 8008b8c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008b8e:	683a      	ldr	r2, [r7, #0]
 8008b90:	68f9      	ldr	r1, [r7, #12]
 8008b92:	69b8      	ldr	r0, [r7, #24]
 8008b94:	f001 f982 	bl	8009e9c <pxPortInitialiseStack>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d002      	beq.n	8008baa <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ba6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ba8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008baa:	bf00      	nop
 8008bac:	3720      	adds	r7, #32
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	20011a84 	.word	0x20011a84
 8008bb8:	20011aec 	.word	0x20011aec
 8008bbc:	20011b54 	.word	0x20011b54

08008bc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008bc8:	f001 fa96 	bl	800a0f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008bcc:	4b2d      	ldr	r3, [pc, #180]	@ (8008c84 <prvAddNewTaskToReadyList+0xc4>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	4a2c      	ldr	r2, [pc, #176]	@ (8008c84 <prvAddNewTaskToReadyList+0xc4>)
 8008bd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008bd6:	4b2c      	ldr	r3, [pc, #176]	@ (8008c88 <prvAddNewTaskToReadyList+0xc8>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d109      	bne.n	8008bf2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008bde:	4a2a      	ldr	r2, [pc, #168]	@ (8008c88 <prvAddNewTaskToReadyList+0xc8>)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008be4:	4b27      	ldr	r3, [pc, #156]	@ (8008c84 <prvAddNewTaskToReadyList+0xc4>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d110      	bne.n	8008c0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008bec:	f000 fc56 	bl	800949c <prvInitialiseTaskLists>
 8008bf0:	e00d      	b.n	8008c0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008bf2:	4b26      	ldr	r3, [pc, #152]	@ (8008c8c <prvAddNewTaskToReadyList+0xcc>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d109      	bne.n	8008c0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008bfa:	4b23      	ldr	r3, [pc, #140]	@ (8008c88 <prvAddNewTaskToReadyList+0xc8>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d802      	bhi.n	8008c0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008c08:	4a1f      	ldr	r2, [pc, #124]	@ (8008c88 <prvAddNewTaskToReadyList+0xc8>)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008c0e:	4b20      	ldr	r3, [pc, #128]	@ (8008c90 <prvAddNewTaskToReadyList+0xd0>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	3301      	adds	r3, #1
 8008c14:	4a1e      	ldr	r2, [pc, #120]	@ (8008c90 <prvAddNewTaskToReadyList+0xd0>)
 8008c16:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008c18:	4b1d      	ldr	r3, [pc, #116]	@ (8008c90 <prvAddNewTaskToReadyList+0xd0>)
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c24:	4b1b      	ldr	r3, [pc, #108]	@ (8008c94 <prvAddNewTaskToReadyList+0xd4>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d903      	bls.n	8008c34 <prvAddNewTaskToReadyList+0x74>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c30:	4a18      	ldr	r2, [pc, #96]	@ (8008c94 <prvAddNewTaskToReadyList+0xd4>)
 8008c32:	6013      	str	r3, [r2, #0]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c38:	4613      	mov	r3, r2
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	4413      	add	r3, r2
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	4a15      	ldr	r2, [pc, #84]	@ (8008c98 <prvAddNewTaskToReadyList+0xd8>)
 8008c42:	441a      	add	r2, r3
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	3304      	adds	r3, #4
 8008c48:	4619      	mov	r1, r3
 8008c4a:	4610      	mov	r0, r2
 8008c4c:	f7ff f8e9 	bl	8007e22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008c50:	f001 fa84 	bl	800a15c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008c54:	4b0d      	ldr	r3, [pc, #52]	@ (8008c8c <prvAddNewTaskToReadyList+0xcc>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d00e      	beq.n	8008c7a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8008c88 <prvAddNewTaskToReadyList+0xc8>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d207      	bcs.n	8008c7a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8008c9c <prvAddNewTaskToReadyList+0xdc>)
 8008c6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c70:	601a      	str	r2, [r3, #0]
 8008c72:	f3bf 8f4f 	dsb	sy
 8008c76:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c7a:	bf00      	nop
 8008c7c:	3708      	adds	r7, #8
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	20009184 	.word	0x20009184
 8008c88:	20008cb0 	.word	0x20008cb0
 8008c8c:	20009190 	.word	0x20009190
 8008c90:	200091a0 	.word	0x200091a0
 8008c94:	2000918c 	.word	0x2000918c
 8008c98:	20008cb4 	.word	0x20008cb4
 8008c9c:	e000ed04 	.word	0xe000ed04

08008ca0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d018      	beq.n	8008ce4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008cb2:	4b14      	ldr	r3, [pc, #80]	@ (8008d04 <vTaskDelay+0x64>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d00b      	beq.n	8008cd2 <vTaskDelay+0x32>
	__asm volatile
 8008cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cbe:	f383 8811 	msr	BASEPRI, r3
 8008cc2:	f3bf 8f6f 	isb	sy
 8008cc6:	f3bf 8f4f 	dsb	sy
 8008cca:	60bb      	str	r3, [r7, #8]
}
 8008ccc:	bf00      	nop
 8008cce:	bf00      	nop
 8008cd0:	e7fd      	b.n	8008cce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008cd2:	f000 f88b 	bl	8008dec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008cd6:	2100      	movs	r1, #0
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 fd31 	bl	8009740 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008cde:	f000 f893 	bl	8008e08 <xTaskResumeAll>
 8008ce2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d107      	bne.n	8008cfa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008cea:	4b07      	ldr	r3, [pc, #28]	@ (8008d08 <vTaskDelay+0x68>)
 8008cec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cf0:	601a      	str	r2, [r3, #0]
 8008cf2:	f3bf 8f4f 	dsb	sy
 8008cf6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008cfa:	bf00      	nop
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	200091ac 	.word	0x200091ac
 8008d08:	e000ed04 	.word	0xe000ed04

08008d0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b08a      	sub	sp, #40	@ 0x28
 8008d10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008d12:	2300      	movs	r3, #0
 8008d14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008d16:	2300      	movs	r3, #0
 8008d18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008d1a:	463a      	mov	r2, r7
 8008d1c:	1d39      	adds	r1, r7, #4
 8008d1e:	f107 0308 	add.w	r3, r7, #8
 8008d22:	4618      	mov	r0, r3
 8008d24:	f7ff f81c 	bl	8007d60 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008d28:	6839      	ldr	r1, [r7, #0]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	68ba      	ldr	r2, [r7, #8]
 8008d2e:	9202      	str	r2, [sp, #8]
 8008d30:	9301      	str	r3, [sp, #4]
 8008d32:	2300      	movs	r3, #0
 8008d34:	9300      	str	r3, [sp, #0]
 8008d36:	2300      	movs	r3, #0
 8008d38:	460a      	mov	r2, r1
 8008d3a:	4924      	ldr	r1, [pc, #144]	@ (8008dcc <vTaskStartScheduler+0xc0>)
 8008d3c:	4824      	ldr	r0, [pc, #144]	@ (8008dd0 <vTaskStartScheduler+0xc4>)
 8008d3e:	f7ff fdf1 	bl	8008924 <xTaskCreateStatic>
 8008d42:	4603      	mov	r3, r0
 8008d44:	4a23      	ldr	r2, [pc, #140]	@ (8008dd4 <vTaskStartScheduler+0xc8>)
 8008d46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008d48:	4b22      	ldr	r3, [pc, #136]	@ (8008dd4 <vTaskStartScheduler+0xc8>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d002      	beq.n	8008d56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008d50:	2301      	movs	r3, #1
 8008d52:	617b      	str	r3, [r7, #20]
 8008d54:	e001      	b.n	8008d5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008d56:	2300      	movs	r3, #0
 8008d58:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d102      	bne.n	8008d66 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008d60:	f000 fd42 	bl	80097e8 <xTimerCreateTimerTask>
 8008d64:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d11b      	bne.n	8008da4 <vTaskStartScheduler+0x98>
	__asm volatile
 8008d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d70:	f383 8811 	msr	BASEPRI, r3
 8008d74:	f3bf 8f6f 	isb	sy
 8008d78:	f3bf 8f4f 	dsb	sy
 8008d7c:	613b      	str	r3, [r7, #16]
}
 8008d7e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008d80:	4b15      	ldr	r3, [pc, #84]	@ (8008dd8 <vTaskStartScheduler+0xcc>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	3354      	adds	r3, #84	@ 0x54
 8008d86:	4a15      	ldr	r2, [pc, #84]	@ (8008ddc <vTaskStartScheduler+0xd0>)
 8008d88:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008d8a:	4b15      	ldr	r3, [pc, #84]	@ (8008de0 <vTaskStartScheduler+0xd4>)
 8008d8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008d90:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008d92:	4b14      	ldr	r3, [pc, #80]	@ (8008de4 <vTaskStartScheduler+0xd8>)
 8008d94:	2201      	movs	r2, #1
 8008d96:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008d98:	4b13      	ldr	r3, [pc, #76]	@ (8008de8 <vTaskStartScheduler+0xdc>)
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008d9e:	f001 f907 	bl	8009fb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008da2:	e00f      	b.n	8008dc4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008daa:	d10b      	bne.n	8008dc4 <vTaskStartScheduler+0xb8>
	__asm volatile
 8008dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008db0:	f383 8811 	msr	BASEPRI, r3
 8008db4:	f3bf 8f6f 	isb	sy
 8008db8:	f3bf 8f4f 	dsb	sy
 8008dbc:	60fb      	str	r3, [r7, #12]
}
 8008dbe:	bf00      	nop
 8008dc0:	bf00      	nop
 8008dc2:	e7fd      	b.n	8008dc0 <vTaskStartScheduler+0xb4>
}
 8008dc4:	bf00      	nop
 8008dc6:	3718      	adds	r7, #24
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}
 8008dcc:	0801aa10 	.word	0x0801aa10
 8008dd0:	0800946d 	.word	0x0800946d
 8008dd4:	200091a8 	.word	0x200091a8
 8008dd8:	20008cb0 	.word	0x20008cb0
 8008ddc:	20000920 	.word	0x20000920
 8008de0:	200091a4 	.word	0x200091a4
 8008de4:	20009190 	.word	0x20009190
 8008de8:	20009188 	.word	0x20009188

08008dec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008dec:	b480      	push	{r7}
 8008dee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008df0:	4b04      	ldr	r3, [pc, #16]	@ (8008e04 <vTaskSuspendAll+0x18>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	3301      	adds	r3, #1
 8008df6:	4a03      	ldr	r2, [pc, #12]	@ (8008e04 <vTaskSuspendAll+0x18>)
 8008df8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008dfa:	bf00      	nop
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr
 8008e04:	200091ac 	.word	0x200091ac

08008e08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008e12:	2300      	movs	r3, #0
 8008e14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008e16:	4b42      	ldr	r3, [pc, #264]	@ (8008f20 <xTaskResumeAll+0x118>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d10b      	bne.n	8008e36 <xTaskResumeAll+0x2e>
	__asm volatile
 8008e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e22:	f383 8811 	msr	BASEPRI, r3
 8008e26:	f3bf 8f6f 	isb	sy
 8008e2a:	f3bf 8f4f 	dsb	sy
 8008e2e:	603b      	str	r3, [r7, #0]
}
 8008e30:	bf00      	nop
 8008e32:	bf00      	nop
 8008e34:	e7fd      	b.n	8008e32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008e36:	f001 f95f 	bl	800a0f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008e3a:	4b39      	ldr	r3, [pc, #228]	@ (8008f20 <xTaskResumeAll+0x118>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	3b01      	subs	r3, #1
 8008e40:	4a37      	ldr	r2, [pc, #220]	@ (8008f20 <xTaskResumeAll+0x118>)
 8008e42:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e44:	4b36      	ldr	r3, [pc, #216]	@ (8008f20 <xTaskResumeAll+0x118>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d162      	bne.n	8008f12 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008e4c:	4b35      	ldr	r3, [pc, #212]	@ (8008f24 <xTaskResumeAll+0x11c>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d05e      	beq.n	8008f12 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e54:	e02f      	b.n	8008eb6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e56:	4b34      	ldr	r3, [pc, #208]	@ (8008f28 <xTaskResumeAll+0x120>)
 8008e58:	68db      	ldr	r3, [r3, #12]
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	3318      	adds	r3, #24
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7ff f83a 	bl	8007edc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	3304      	adds	r3, #4
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f7ff f835 	bl	8007edc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e76:	4b2d      	ldr	r3, [pc, #180]	@ (8008f2c <xTaskResumeAll+0x124>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d903      	bls.n	8008e86 <xTaskResumeAll+0x7e>
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e82:	4a2a      	ldr	r2, [pc, #168]	@ (8008f2c <xTaskResumeAll+0x124>)
 8008e84:	6013      	str	r3, [r2, #0]
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e8a:	4613      	mov	r3, r2
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	4413      	add	r3, r2
 8008e90:	009b      	lsls	r3, r3, #2
 8008e92:	4a27      	ldr	r2, [pc, #156]	@ (8008f30 <xTaskResumeAll+0x128>)
 8008e94:	441a      	add	r2, r3
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	3304      	adds	r3, #4
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	4610      	mov	r0, r2
 8008e9e:	f7fe ffc0 	bl	8007e22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ea6:	4b23      	ldr	r3, [pc, #140]	@ (8008f34 <xTaskResumeAll+0x12c>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d302      	bcc.n	8008eb6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008eb0:	4b21      	ldr	r3, [pc, #132]	@ (8008f38 <xTaskResumeAll+0x130>)
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008eb6:	4b1c      	ldr	r3, [pc, #112]	@ (8008f28 <xTaskResumeAll+0x120>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d1cb      	bne.n	8008e56 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d001      	beq.n	8008ec8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008ec4:	f000 fb8e 	bl	80095e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008ec8:	4b1c      	ldr	r3, [pc, #112]	@ (8008f3c <xTaskResumeAll+0x134>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d010      	beq.n	8008ef6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008ed4:	f000 f846 	bl	8008f64 <xTaskIncrementTick>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d002      	beq.n	8008ee4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008ede:	4b16      	ldr	r3, [pc, #88]	@ (8008f38 <xTaskResumeAll+0x130>)
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	3b01      	subs	r3, #1
 8008ee8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d1f1      	bne.n	8008ed4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008ef0:	4b12      	ldr	r3, [pc, #72]	@ (8008f3c <xTaskResumeAll+0x134>)
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008ef6:	4b10      	ldr	r3, [pc, #64]	@ (8008f38 <xTaskResumeAll+0x130>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d009      	beq.n	8008f12 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008efe:	2301      	movs	r3, #1
 8008f00:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008f02:	4b0f      	ldr	r3, [pc, #60]	@ (8008f40 <xTaskResumeAll+0x138>)
 8008f04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f08:	601a      	str	r2, [r3, #0]
 8008f0a:	f3bf 8f4f 	dsb	sy
 8008f0e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f12:	f001 f923 	bl	800a15c <vPortExitCritical>

	return xAlreadyYielded;
 8008f16:	68bb      	ldr	r3, [r7, #8]
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3710      	adds	r7, #16
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}
 8008f20:	200091ac 	.word	0x200091ac
 8008f24:	20009184 	.word	0x20009184
 8008f28:	20009144 	.word	0x20009144
 8008f2c:	2000918c 	.word	0x2000918c
 8008f30:	20008cb4 	.word	0x20008cb4
 8008f34:	20008cb0 	.word	0x20008cb0
 8008f38:	20009198 	.word	0x20009198
 8008f3c:	20009194 	.word	0x20009194
 8008f40:	e000ed04 	.word	0xe000ed04

08008f44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008f4a:	4b05      	ldr	r3, [pc, #20]	@ (8008f60 <xTaskGetTickCount+0x1c>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008f50:	687b      	ldr	r3, [r7, #4]
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	370c      	adds	r7, #12
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr
 8008f5e:	bf00      	nop
 8008f60:	20009188 	.word	0x20009188

08008f64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b086      	sub	sp, #24
 8008f68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f6e:	4b4f      	ldr	r3, [pc, #316]	@ (80090ac <xTaskIncrementTick+0x148>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	f040 8090 	bne.w	8009098 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008f78:	4b4d      	ldr	r3, [pc, #308]	@ (80090b0 <xTaskIncrementTick+0x14c>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008f80:	4a4b      	ldr	r2, [pc, #300]	@ (80090b0 <xTaskIncrementTick+0x14c>)
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d121      	bne.n	8008fd0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008f8c:	4b49      	ldr	r3, [pc, #292]	@ (80090b4 <xTaskIncrementTick+0x150>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d00b      	beq.n	8008fae <xTaskIncrementTick+0x4a>
	__asm volatile
 8008f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f9a:	f383 8811 	msr	BASEPRI, r3
 8008f9e:	f3bf 8f6f 	isb	sy
 8008fa2:	f3bf 8f4f 	dsb	sy
 8008fa6:	603b      	str	r3, [r7, #0]
}
 8008fa8:	bf00      	nop
 8008faa:	bf00      	nop
 8008fac:	e7fd      	b.n	8008faa <xTaskIncrementTick+0x46>
 8008fae:	4b41      	ldr	r3, [pc, #260]	@ (80090b4 <xTaskIncrementTick+0x150>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	60fb      	str	r3, [r7, #12]
 8008fb4:	4b40      	ldr	r3, [pc, #256]	@ (80090b8 <xTaskIncrementTick+0x154>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a3e      	ldr	r2, [pc, #248]	@ (80090b4 <xTaskIncrementTick+0x150>)
 8008fba:	6013      	str	r3, [r2, #0]
 8008fbc:	4a3e      	ldr	r2, [pc, #248]	@ (80090b8 <xTaskIncrementTick+0x154>)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	6013      	str	r3, [r2, #0]
 8008fc2:	4b3e      	ldr	r3, [pc, #248]	@ (80090bc <xTaskIncrementTick+0x158>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	4a3c      	ldr	r2, [pc, #240]	@ (80090bc <xTaskIncrementTick+0x158>)
 8008fca:	6013      	str	r3, [r2, #0]
 8008fcc:	f000 fb0a 	bl	80095e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008fd0:	4b3b      	ldr	r3, [pc, #236]	@ (80090c0 <xTaskIncrementTick+0x15c>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	693a      	ldr	r2, [r7, #16]
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d349      	bcc.n	800906e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fda:	4b36      	ldr	r3, [pc, #216]	@ (80090b4 <xTaskIncrementTick+0x150>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d104      	bne.n	8008fee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fe4:	4b36      	ldr	r3, [pc, #216]	@ (80090c0 <xTaskIncrementTick+0x15c>)
 8008fe6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008fea:	601a      	str	r2, [r3, #0]
					break;
 8008fec:	e03f      	b.n	800906e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fee:	4b31      	ldr	r3, [pc, #196]	@ (80090b4 <xTaskIncrementTick+0x150>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	68db      	ldr	r3, [r3, #12]
 8008ff4:	68db      	ldr	r3, [r3, #12]
 8008ff6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008ffe:	693a      	ldr	r2, [r7, #16]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	429a      	cmp	r2, r3
 8009004:	d203      	bcs.n	800900e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009006:	4a2e      	ldr	r2, [pc, #184]	@ (80090c0 <xTaskIncrementTick+0x15c>)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800900c:	e02f      	b.n	800906e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	3304      	adds	r3, #4
 8009012:	4618      	mov	r0, r3
 8009014:	f7fe ff62 	bl	8007edc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800901c:	2b00      	cmp	r3, #0
 800901e:	d004      	beq.n	800902a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	3318      	adds	r3, #24
 8009024:	4618      	mov	r0, r3
 8009026:	f7fe ff59 	bl	8007edc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800902e:	4b25      	ldr	r3, [pc, #148]	@ (80090c4 <xTaskIncrementTick+0x160>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	429a      	cmp	r2, r3
 8009034:	d903      	bls.n	800903e <xTaskIncrementTick+0xda>
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800903a:	4a22      	ldr	r2, [pc, #136]	@ (80090c4 <xTaskIncrementTick+0x160>)
 800903c:	6013      	str	r3, [r2, #0]
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009042:	4613      	mov	r3, r2
 8009044:	009b      	lsls	r3, r3, #2
 8009046:	4413      	add	r3, r2
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	4a1f      	ldr	r2, [pc, #124]	@ (80090c8 <xTaskIncrementTick+0x164>)
 800904c:	441a      	add	r2, r3
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	3304      	adds	r3, #4
 8009052:	4619      	mov	r1, r3
 8009054:	4610      	mov	r0, r2
 8009056:	f7fe fee4 	bl	8007e22 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800905e:	4b1b      	ldr	r3, [pc, #108]	@ (80090cc <xTaskIncrementTick+0x168>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009064:	429a      	cmp	r2, r3
 8009066:	d3b8      	bcc.n	8008fda <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009068:	2301      	movs	r3, #1
 800906a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800906c:	e7b5      	b.n	8008fda <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800906e:	4b17      	ldr	r3, [pc, #92]	@ (80090cc <xTaskIncrementTick+0x168>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009074:	4914      	ldr	r1, [pc, #80]	@ (80090c8 <xTaskIncrementTick+0x164>)
 8009076:	4613      	mov	r3, r2
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	4413      	add	r3, r2
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	440b      	add	r3, r1
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	2b01      	cmp	r3, #1
 8009084:	d901      	bls.n	800908a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009086:	2301      	movs	r3, #1
 8009088:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800908a:	4b11      	ldr	r3, [pc, #68]	@ (80090d0 <xTaskIncrementTick+0x16c>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d007      	beq.n	80090a2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009092:	2301      	movs	r3, #1
 8009094:	617b      	str	r3, [r7, #20]
 8009096:	e004      	b.n	80090a2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009098:	4b0e      	ldr	r3, [pc, #56]	@ (80090d4 <xTaskIncrementTick+0x170>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	3301      	adds	r3, #1
 800909e:	4a0d      	ldr	r2, [pc, #52]	@ (80090d4 <xTaskIncrementTick+0x170>)
 80090a0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80090a2:	697b      	ldr	r3, [r7, #20]
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3718      	adds	r7, #24
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	200091ac 	.word	0x200091ac
 80090b0:	20009188 	.word	0x20009188
 80090b4:	2000913c 	.word	0x2000913c
 80090b8:	20009140 	.word	0x20009140
 80090bc:	2000919c 	.word	0x2000919c
 80090c0:	200091a4 	.word	0x200091a4
 80090c4:	2000918c 	.word	0x2000918c
 80090c8:	20008cb4 	.word	0x20008cb4
 80090cc:	20008cb0 	.word	0x20008cb0
 80090d0:	20009198 	.word	0x20009198
 80090d4:	20009194 	.word	0x20009194

080090d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80090d8:	b480      	push	{r7}
 80090da:	b085      	sub	sp, #20
 80090dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80090de:	4b2b      	ldr	r3, [pc, #172]	@ (800918c <vTaskSwitchContext+0xb4>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d003      	beq.n	80090ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80090e6:	4b2a      	ldr	r3, [pc, #168]	@ (8009190 <vTaskSwitchContext+0xb8>)
 80090e8:	2201      	movs	r2, #1
 80090ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80090ec:	e047      	b.n	800917e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80090ee:	4b28      	ldr	r3, [pc, #160]	@ (8009190 <vTaskSwitchContext+0xb8>)
 80090f0:	2200      	movs	r2, #0
 80090f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090f4:	4b27      	ldr	r3, [pc, #156]	@ (8009194 <vTaskSwitchContext+0xbc>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	60fb      	str	r3, [r7, #12]
 80090fa:	e011      	b.n	8009120 <vTaskSwitchContext+0x48>
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d10b      	bne.n	800911a <vTaskSwitchContext+0x42>
	__asm volatile
 8009102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009106:	f383 8811 	msr	BASEPRI, r3
 800910a:	f3bf 8f6f 	isb	sy
 800910e:	f3bf 8f4f 	dsb	sy
 8009112:	607b      	str	r3, [r7, #4]
}
 8009114:	bf00      	nop
 8009116:	bf00      	nop
 8009118:	e7fd      	b.n	8009116 <vTaskSwitchContext+0x3e>
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	3b01      	subs	r3, #1
 800911e:	60fb      	str	r3, [r7, #12]
 8009120:	491d      	ldr	r1, [pc, #116]	@ (8009198 <vTaskSwitchContext+0xc0>)
 8009122:	68fa      	ldr	r2, [r7, #12]
 8009124:	4613      	mov	r3, r2
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	4413      	add	r3, r2
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	440b      	add	r3, r1
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d0e3      	beq.n	80090fc <vTaskSwitchContext+0x24>
 8009134:	68fa      	ldr	r2, [r7, #12]
 8009136:	4613      	mov	r3, r2
 8009138:	009b      	lsls	r3, r3, #2
 800913a:	4413      	add	r3, r2
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	4a16      	ldr	r2, [pc, #88]	@ (8009198 <vTaskSwitchContext+0xc0>)
 8009140:	4413      	add	r3, r2
 8009142:	60bb      	str	r3, [r7, #8]
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	685a      	ldr	r2, [r3, #4]
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	605a      	str	r2, [r3, #4]
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	685a      	ldr	r2, [r3, #4]
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	3308      	adds	r3, #8
 8009156:	429a      	cmp	r2, r3
 8009158:	d104      	bne.n	8009164 <vTaskSwitchContext+0x8c>
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	685a      	ldr	r2, [r3, #4]
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	605a      	str	r2, [r3, #4]
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	4a0c      	ldr	r2, [pc, #48]	@ (800919c <vTaskSwitchContext+0xc4>)
 800916c:	6013      	str	r3, [r2, #0]
 800916e:	4a09      	ldr	r2, [pc, #36]	@ (8009194 <vTaskSwitchContext+0xbc>)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009174:	4b09      	ldr	r3, [pc, #36]	@ (800919c <vTaskSwitchContext+0xc4>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	3354      	adds	r3, #84	@ 0x54
 800917a:	4a09      	ldr	r2, [pc, #36]	@ (80091a0 <vTaskSwitchContext+0xc8>)
 800917c:	6013      	str	r3, [r2, #0]
}
 800917e:	bf00      	nop
 8009180:	3714      	adds	r7, #20
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr
 800918a:	bf00      	nop
 800918c:	200091ac 	.word	0x200091ac
 8009190:	20009198 	.word	0x20009198
 8009194:	2000918c 	.word	0x2000918c
 8009198:	20008cb4 	.word	0x20008cb4
 800919c:	20008cb0 	.word	0x20008cb0
 80091a0:	20000920 	.word	0x20000920

080091a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d10b      	bne.n	80091cc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80091b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091b8:	f383 8811 	msr	BASEPRI, r3
 80091bc:	f3bf 8f6f 	isb	sy
 80091c0:	f3bf 8f4f 	dsb	sy
 80091c4:	60fb      	str	r3, [r7, #12]
}
 80091c6:	bf00      	nop
 80091c8:	bf00      	nop
 80091ca:	e7fd      	b.n	80091c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80091cc:	4b07      	ldr	r3, [pc, #28]	@ (80091ec <vTaskPlaceOnEventList+0x48>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	3318      	adds	r3, #24
 80091d2:	4619      	mov	r1, r3
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f7fe fe48 	bl	8007e6a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80091da:	2101      	movs	r1, #1
 80091dc:	6838      	ldr	r0, [r7, #0]
 80091de:	f000 faaf 	bl	8009740 <prvAddCurrentTaskToDelayedList>
}
 80091e2:	bf00      	nop
 80091e4:	3710      	adds	r7, #16
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
 80091ea:	bf00      	nop
 80091ec:	20008cb0 	.word	0x20008cb0

080091f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b086      	sub	sp, #24
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	60f8      	str	r0, [r7, #12]
 80091f8:	60b9      	str	r1, [r7, #8]
 80091fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d10b      	bne.n	800921a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009206:	f383 8811 	msr	BASEPRI, r3
 800920a:	f3bf 8f6f 	isb	sy
 800920e:	f3bf 8f4f 	dsb	sy
 8009212:	617b      	str	r3, [r7, #20]
}
 8009214:	bf00      	nop
 8009216:	bf00      	nop
 8009218:	e7fd      	b.n	8009216 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800921a:	4b0a      	ldr	r3, [pc, #40]	@ (8009244 <vTaskPlaceOnEventListRestricted+0x54>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	3318      	adds	r3, #24
 8009220:	4619      	mov	r1, r3
 8009222:	68f8      	ldr	r0, [r7, #12]
 8009224:	f7fe fdfd 	bl	8007e22 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d002      	beq.n	8009234 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800922e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009232:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009234:	6879      	ldr	r1, [r7, #4]
 8009236:	68b8      	ldr	r0, [r7, #8]
 8009238:	f000 fa82 	bl	8009740 <prvAddCurrentTaskToDelayedList>
	}
 800923c:	bf00      	nop
 800923e:	3718      	adds	r7, #24
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}
 8009244:	20008cb0 	.word	0x20008cb0

08009248 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b086      	sub	sp, #24
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	68db      	ldr	r3, [r3, #12]
 8009254:	68db      	ldr	r3, [r3, #12]
 8009256:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d10b      	bne.n	8009276 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800925e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009262:	f383 8811 	msr	BASEPRI, r3
 8009266:	f3bf 8f6f 	isb	sy
 800926a:	f3bf 8f4f 	dsb	sy
 800926e:	60fb      	str	r3, [r7, #12]
}
 8009270:	bf00      	nop
 8009272:	bf00      	nop
 8009274:	e7fd      	b.n	8009272 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	3318      	adds	r3, #24
 800927a:	4618      	mov	r0, r3
 800927c:	f7fe fe2e 	bl	8007edc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009280:	4b1d      	ldr	r3, [pc, #116]	@ (80092f8 <xTaskRemoveFromEventList+0xb0>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d11d      	bne.n	80092c4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	3304      	adds	r3, #4
 800928c:	4618      	mov	r0, r3
 800928e:	f7fe fe25 	bl	8007edc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009296:	4b19      	ldr	r3, [pc, #100]	@ (80092fc <xTaskRemoveFromEventList+0xb4>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	429a      	cmp	r2, r3
 800929c:	d903      	bls.n	80092a6 <xTaskRemoveFromEventList+0x5e>
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092a2:	4a16      	ldr	r2, [pc, #88]	@ (80092fc <xTaskRemoveFromEventList+0xb4>)
 80092a4:	6013      	str	r3, [r2, #0]
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092aa:	4613      	mov	r3, r2
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	4413      	add	r3, r2
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	4a13      	ldr	r2, [pc, #76]	@ (8009300 <xTaskRemoveFromEventList+0xb8>)
 80092b4:	441a      	add	r2, r3
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	3304      	adds	r3, #4
 80092ba:	4619      	mov	r1, r3
 80092bc:	4610      	mov	r0, r2
 80092be:	f7fe fdb0 	bl	8007e22 <vListInsertEnd>
 80092c2:	e005      	b.n	80092d0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	3318      	adds	r3, #24
 80092c8:	4619      	mov	r1, r3
 80092ca:	480e      	ldr	r0, [pc, #56]	@ (8009304 <xTaskRemoveFromEventList+0xbc>)
 80092cc:	f7fe fda9 	bl	8007e22 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092d4:	4b0c      	ldr	r3, [pc, #48]	@ (8009308 <xTaskRemoveFromEventList+0xc0>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092da:	429a      	cmp	r2, r3
 80092dc:	d905      	bls.n	80092ea <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80092de:	2301      	movs	r3, #1
 80092e0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80092e2:	4b0a      	ldr	r3, [pc, #40]	@ (800930c <xTaskRemoveFromEventList+0xc4>)
 80092e4:	2201      	movs	r2, #1
 80092e6:	601a      	str	r2, [r3, #0]
 80092e8:	e001      	b.n	80092ee <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80092ea:	2300      	movs	r3, #0
 80092ec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80092ee:	697b      	ldr	r3, [r7, #20]
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3718      	adds	r7, #24
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}
 80092f8:	200091ac 	.word	0x200091ac
 80092fc:	2000918c 	.word	0x2000918c
 8009300:	20008cb4 	.word	0x20008cb4
 8009304:	20009144 	.word	0x20009144
 8009308:	20008cb0 	.word	0x20008cb0
 800930c:	20009198 	.word	0x20009198

08009310 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d10b      	bne.n	8009336 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800931e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009322:	f383 8811 	msr	BASEPRI, r3
 8009326:	f3bf 8f6f 	isb	sy
 800932a:	f3bf 8f4f 	dsb	sy
 800932e:	60fb      	str	r3, [r7, #12]
}
 8009330:	bf00      	nop
 8009332:	bf00      	nop
 8009334:	e7fd      	b.n	8009332 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8009336:	f000 fedf 	bl	800a0f8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800933a:	4b07      	ldr	r3, [pc, #28]	@ (8009358 <vTaskSetTimeOutState+0x48>)
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8009342:	4b06      	ldr	r3, [pc, #24]	@ (800935c <vTaskSetTimeOutState+0x4c>)
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800934a:	f000 ff07 	bl	800a15c <vPortExitCritical>
}
 800934e:	bf00      	nop
 8009350:	3710      	adds	r7, #16
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	2000919c 	.word	0x2000919c
 800935c:	20009188 	.word	0x20009188

08009360 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009360:	b480      	push	{r7}
 8009362:	b083      	sub	sp, #12
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009368:	4b06      	ldr	r3, [pc, #24]	@ (8009384 <vTaskInternalSetTimeOutState+0x24>)
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009370:	4b05      	ldr	r3, [pc, #20]	@ (8009388 <vTaskInternalSetTimeOutState+0x28>)
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	605a      	str	r2, [r3, #4]
}
 8009378:	bf00      	nop
 800937a:	370c      	adds	r7, #12
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr
 8009384:	2000919c 	.word	0x2000919c
 8009388:	20009188 	.word	0x20009188

0800938c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b088      	sub	sp, #32
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d10b      	bne.n	80093b4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800939c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093a0:	f383 8811 	msr	BASEPRI, r3
 80093a4:	f3bf 8f6f 	isb	sy
 80093a8:	f3bf 8f4f 	dsb	sy
 80093ac:	613b      	str	r3, [r7, #16]
}
 80093ae:	bf00      	nop
 80093b0:	bf00      	nop
 80093b2:	e7fd      	b.n	80093b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d10b      	bne.n	80093d2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80093ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093be:	f383 8811 	msr	BASEPRI, r3
 80093c2:	f3bf 8f6f 	isb	sy
 80093c6:	f3bf 8f4f 	dsb	sy
 80093ca:	60fb      	str	r3, [r7, #12]
}
 80093cc:	bf00      	nop
 80093ce:	bf00      	nop
 80093d0:	e7fd      	b.n	80093ce <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80093d2:	f000 fe91 	bl	800a0f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80093d6:	4b1d      	ldr	r3, [pc, #116]	@ (800944c <xTaskCheckForTimeOut+0xc0>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	69ba      	ldr	r2, [r7, #24]
 80093e2:	1ad3      	subs	r3, r2, r3
 80093e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80093ee:	d102      	bne.n	80093f6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80093f0:	2300      	movs	r3, #0
 80093f2:	61fb      	str	r3, [r7, #28]
 80093f4:	e023      	b.n	800943e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	4b15      	ldr	r3, [pc, #84]	@ (8009450 <xTaskCheckForTimeOut+0xc4>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d007      	beq.n	8009412 <xTaskCheckForTimeOut+0x86>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	69ba      	ldr	r2, [r7, #24]
 8009408:	429a      	cmp	r2, r3
 800940a:	d302      	bcc.n	8009412 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800940c:	2301      	movs	r3, #1
 800940e:	61fb      	str	r3, [r7, #28]
 8009410:	e015      	b.n	800943e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	697a      	ldr	r2, [r7, #20]
 8009418:	429a      	cmp	r2, r3
 800941a:	d20b      	bcs.n	8009434 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	1ad2      	subs	r2, r2, r3
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f7ff ff99 	bl	8009360 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800942e:	2300      	movs	r3, #0
 8009430:	61fb      	str	r3, [r7, #28]
 8009432:	e004      	b.n	800943e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	2200      	movs	r2, #0
 8009438:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800943a:	2301      	movs	r3, #1
 800943c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800943e:	f000 fe8d 	bl	800a15c <vPortExitCritical>

	return xReturn;
 8009442:	69fb      	ldr	r3, [r7, #28]
}
 8009444:	4618      	mov	r0, r3
 8009446:	3720      	adds	r7, #32
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}
 800944c:	20009188 	.word	0x20009188
 8009450:	2000919c 	.word	0x2000919c

08009454 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009454:	b480      	push	{r7}
 8009456:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009458:	4b03      	ldr	r3, [pc, #12]	@ (8009468 <vTaskMissedYield+0x14>)
 800945a:	2201      	movs	r2, #1
 800945c:	601a      	str	r2, [r3, #0]
}
 800945e:	bf00      	nop
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr
 8009468:	20009198 	.word	0x20009198

0800946c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b082      	sub	sp, #8
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009474:	f000 f852 	bl	800951c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009478:	4b06      	ldr	r3, [pc, #24]	@ (8009494 <prvIdleTask+0x28>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	2b01      	cmp	r3, #1
 800947e:	d9f9      	bls.n	8009474 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009480:	4b05      	ldr	r3, [pc, #20]	@ (8009498 <prvIdleTask+0x2c>)
 8009482:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009486:	601a      	str	r2, [r3, #0]
 8009488:	f3bf 8f4f 	dsb	sy
 800948c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009490:	e7f0      	b.n	8009474 <prvIdleTask+0x8>
 8009492:	bf00      	nop
 8009494:	20008cb4 	.word	0x20008cb4
 8009498:	e000ed04 	.word	0xe000ed04

0800949c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b082      	sub	sp, #8
 80094a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80094a2:	2300      	movs	r3, #0
 80094a4:	607b      	str	r3, [r7, #4]
 80094a6:	e00c      	b.n	80094c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	4613      	mov	r3, r2
 80094ac:	009b      	lsls	r3, r3, #2
 80094ae:	4413      	add	r3, r2
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	4a12      	ldr	r2, [pc, #72]	@ (80094fc <prvInitialiseTaskLists+0x60>)
 80094b4:	4413      	add	r3, r2
 80094b6:	4618      	mov	r0, r3
 80094b8:	f7fe fc86 	bl	8007dc8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	3301      	adds	r3, #1
 80094c0:	607b      	str	r3, [r7, #4]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2b37      	cmp	r3, #55	@ 0x37
 80094c6:	d9ef      	bls.n	80094a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80094c8:	480d      	ldr	r0, [pc, #52]	@ (8009500 <prvInitialiseTaskLists+0x64>)
 80094ca:	f7fe fc7d 	bl	8007dc8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80094ce:	480d      	ldr	r0, [pc, #52]	@ (8009504 <prvInitialiseTaskLists+0x68>)
 80094d0:	f7fe fc7a 	bl	8007dc8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80094d4:	480c      	ldr	r0, [pc, #48]	@ (8009508 <prvInitialiseTaskLists+0x6c>)
 80094d6:	f7fe fc77 	bl	8007dc8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80094da:	480c      	ldr	r0, [pc, #48]	@ (800950c <prvInitialiseTaskLists+0x70>)
 80094dc:	f7fe fc74 	bl	8007dc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80094e0:	480b      	ldr	r0, [pc, #44]	@ (8009510 <prvInitialiseTaskLists+0x74>)
 80094e2:	f7fe fc71 	bl	8007dc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80094e6:	4b0b      	ldr	r3, [pc, #44]	@ (8009514 <prvInitialiseTaskLists+0x78>)
 80094e8:	4a05      	ldr	r2, [pc, #20]	@ (8009500 <prvInitialiseTaskLists+0x64>)
 80094ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80094ec:	4b0a      	ldr	r3, [pc, #40]	@ (8009518 <prvInitialiseTaskLists+0x7c>)
 80094ee:	4a05      	ldr	r2, [pc, #20]	@ (8009504 <prvInitialiseTaskLists+0x68>)
 80094f0:	601a      	str	r2, [r3, #0]
}
 80094f2:	bf00      	nop
 80094f4:	3708      	adds	r7, #8
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	bf00      	nop
 80094fc:	20008cb4 	.word	0x20008cb4
 8009500:	20009114 	.word	0x20009114
 8009504:	20009128 	.word	0x20009128
 8009508:	20009144 	.word	0x20009144
 800950c:	20009158 	.word	0x20009158
 8009510:	20009170 	.word	0x20009170
 8009514:	2000913c 	.word	0x2000913c
 8009518:	20009140 	.word	0x20009140

0800951c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b082      	sub	sp, #8
 8009520:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009522:	e019      	b.n	8009558 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009524:	f000 fde8 	bl	800a0f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009528:	4b10      	ldr	r3, [pc, #64]	@ (800956c <prvCheckTasksWaitingTermination+0x50>)
 800952a:	68db      	ldr	r3, [r3, #12]
 800952c:	68db      	ldr	r3, [r3, #12]
 800952e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	3304      	adds	r3, #4
 8009534:	4618      	mov	r0, r3
 8009536:	f7fe fcd1 	bl	8007edc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800953a:	4b0d      	ldr	r3, [pc, #52]	@ (8009570 <prvCheckTasksWaitingTermination+0x54>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	3b01      	subs	r3, #1
 8009540:	4a0b      	ldr	r2, [pc, #44]	@ (8009570 <prvCheckTasksWaitingTermination+0x54>)
 8009542:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009544:	4b0b      	ldr	r3, [pc, #44]	@ (8009574 <prvCheckTasksWaitingTermination+0x58>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	3b01      	subs	r3, #1
 800954a:	4a0a      	ldr	r2, [pc, #40]	@ (8009574 <prvCheckTasksWaitingTermination+0x58>)
 800954c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800954e:	f000 fe05 	bl	800a15c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 f810 	bl	8009578 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009558:	4b06      	ldr	r3, [pc, #24]	@ (8009574 <prvCheckTasksWaitingTermination+0x58>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d1e1      	bne.n	8009524 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009560:	bf00      	nop
 8009562:	bf00      	nop
 8009564:	3708      	adds	r7, #8
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	20009158 	.word	0x20009158
 8009570:	20009184 	.word	0x20009184
 8009574:	2000916c 	.word	0x2000916c

08009578 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	3354      	adds	r3, #84	@ 0x54
 8009584:	4618      	mov	r0, r3
 8009586:	f010 fadb 	bl	8019b40 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009590:	2b00      	cmp	r3, #0
 8009592:	d108      	bne.n	80095a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009598:	4618      	mov	r0, r3
 800959a:	f000 ff9d 	bl	800a4d8 <vPortFree>
				vPortFree( pxTCB );
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 ff9a 	bl	800a4d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80095a4:	e019      	b.n	80095da <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d103      	bne.n	80095b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 ff91 	bl	800a4d8 <vPortFree>
	}
 80095b6:	e010      	b.n	80095da <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80095be:	2b02      	cmp	r3, #2
 80095c0:	d00b      	beq.n	80095da <prvDeleteTCB+0x62>
	__asm volatile
 80095c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095c6:	f383 8811 	msr	BASEPRI, r3
 80095ca:	f3bf 8f6f 	isb	sy
 80095ce:	f3bf 8f4f 	dsb	sy
 80095d2:	60fb      	str	r3, [r7, #12]
}
 80095d4:	bf00      	nop
 80095d6:	bf00      	nop
 80095d8:	e7fd      	b.n	80095d6 <prvDeleteTCB+0x5e>
	}
 80095da:	bf00      	nop
 80095dc:	3710      	adds	r7, #16
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
	...

080095e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80095e4:	b480      	push	{r7}
 80095e6:	b083      	sub	sp, #12
 80095e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095ea:	4b0c      	ldr	r3, [pc, #48]	@ (800961c <prvResetNextTaskUnblockTime+0x38>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d104      	bne.n	80095fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80095f4:	4b0a      	ldr	r3, [pc, #40]	@ (8009620 <prvResetNextTaskUnblockTime+0x3c>)
 80095f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80095fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80095fc:	e008      	b.n	8009610 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095fe:	4b07      	ldr	r3, [pc, #28]	@ (800961c <prvResetNextTaskUnblockTime+0x38>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	68db      	ldr	r3, [r3, #12]
 8009606:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	4a04      	ldr	r2, [pc, #16]	@ (8009620 <prvResetNextTaskUnblockTime+0x3c>)
 800960e:	6013      	str	r3, [r2, #0]
}
 8009610:	bf00      	nop
 8009612:	370c      	adds	r7, #12
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr
 800961c:	2000913c 	.word	0x2000913c
 8009620:	200091a4 	.word	0x200091a4

08009624 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009624:	b480      	push	{r7}
 8009626:	b083      	sub	sp, #12
 8009628:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800962a:	4b0b      	ldr	r3, [pc, #44]	@ (8009658 <xTaskGetSchedulerState+0x34>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d102      	bne.n	8009638 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009632:	2301      	movs	r3, #1
 8009634:	607b      	str	r3, [r7, #4]
 8009636:	e008      	b.n	800964a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009638:	4b08      	ldr	r3, [pc, #32]	@ (800965c <xTaskGetSchedulerState+0x38>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d102      	bne.n	8009646 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009640:	2302      	movs	r3, #2
 8009642:	607b      	str	r3, [r7, #4]
 8009644:	e001      	b.n	800964a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009646:	2300      	movs	r3, #0
 8009648:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800964a:	687b      	ldr	r3, [r7, #4]
	}
 800964c:	4618      	mov	r0, r3
 800964e:	370c      	adds	r7, #12
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr
 8009658:	20009190 	.word	0x20009190
 800965c:	200091ac 	.word	0x200091ac

08009660 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009660:	b580      	push	{r7, lr}
 8009662:	b086      	sub	sp, #24
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800966c:	2300      	movs	r3, #0
 800966e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d058      	beq.n	8009728 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009676:	4b2f      	ldr	r3, [pc, #188]	@ (8009734 <xTaskPriorityDisinherit+0xd4>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	693a      	ldr	r2, [r7, #16]
 800967c:	429a      	cmp	r2, r3
 800967e:	d00b      	beq.n	8009698 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009684:	f383 8811 	msr	BASEPRI, r3
 8009688:	f3bf 8f6f 	isb	sy
 800968c:	f3bf 8f4f 	dsb	sy
 8009690:	60fb      	str	r3, [r7, #12]
}
 8009692:	bf00      	nop
 8009694:	bf00      	nop
 8009696:	e7fd      	b.n	8009694 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800969c:	2b00      	cmp	r3, #0
 800969e:	d10b      	bne.n	80096b8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80096a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096a4:	f383 8811 	msr	BASEPRI, r3
 80096a8:	f3bf 8f6f 	isb	sy
 80096ac:	f3bf 8f4f 	dsb	sy
 80096b0:	60bb      	str	r3, [r7, #8]
}
 80096b2:	bf00      	nop
 80096b4:	bf00      	nop
 80096b6:	e7fd      	b.n	80096b4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096bc:	1e5a      	subs	r2, r3, #1
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d02c      	beq.n	8009728 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d128      	bne.n	8009728 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	3304      	adds	r3, #4
 80096da:	4618      	mov	r0, r3
 80096dc:	f7fe fbfe 	bl	8007edc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096ec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096f8:	4b0f      	ldr	r3, [pc, #60]	@ (8009738 <xTaskPriorityDisinherit+0xd8>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d903      	bls.n	8009708 <xTaskPriorityDisinherit+0xa8>
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009704:	4a0c      	ldr	r2, [pc, #48]	@ (8009738 <xTaskPriorityDisinherit+0xd8>)
 8009706:	6013      	str	r3, [r2, #0]
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800970c:	4613      	mov	r3, r2
 800970e:	009b      	lsls	r3, r3, #2
 8009710:	4413      	add	r3, r2
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	4a09      	ldr	r2, [pc, #36]	@ (800973c <xTaskPriorityDisinherit+0xdc>)
 8009716:	441a      	add	r2, r3
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	3304      	adds	r3, #4
 800971c:	4619      	mov	r1, r3
 800971e:	4610      	mov	r0, r2
 8009720:	f7fe fb7f 	bl	8007e22 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009724:	2301      	movs	r3, #1
 8009726:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009728:	697b      	ldr	r3, [r7, #20]
	}
 800972a:	4618      	mov	r0, r3
 800972c:	3718      	adds	r7, #24
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	20008cb0 	.word	0x20008cb0
 8009738:	2000918c 	.word	0x2000918c
 800973c:	20008cb4 	.word	0x20008cb4

08009740 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800974a:	4b21      	ldr	r3, [pc, #132]	@ (80097d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009750:	4b20      	ldr	r3, [pc, #128]	@ (80097d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	3304      	adds	r3, #4
 8009756:	4618      	mov	r0, r3
 8009758:	f7fe fbc0 	bl	8007edc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009762:	d10a      	bne.n	800977a <prvAddCurrentTaskToDelayedList+0x3a>
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d007      	beq.n	800977a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800976a:	4b1a      	ldr	r3, [pc, #104]	@ (80097d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	3304      	adds	r3, #4
 8009770:	4619      	mov	r1, r3
 8009772:	4819      	ldr	r0, [pc, #100]	@ (80097d8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009774:	f7fe fb55 	bl	8007e22 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009778:	e026      	b.n	80097c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800977a:	68fa      	ldr	r2, [r7, #12]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	4413      	add	r3, r2
 8009780:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009782:	4b14      	ldr	r3, [pc, #80]	@ (80097d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	68ba      	ldr	r2, [r7, #8]
 8009788:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800978a:	68ba      	ldr	r2, [r7, #8]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	429a      	cmp	r2, r3
 8009790:	d209      	bcs.n	80097a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009792:	4b12      	ldr	r3, [pc, #72]	@ (80097dc <prvAddCurrentTaskToDelayedList+0x9c>)
 8009794:	681a      	ldr	r2, [r3, #0]
 8009796:	4b0f      	ldr	r3, [pc, #60]	@ (80097d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	3304      	adds	r3, #4
 800979c:	4619      	mov	r1, r3
 800979e:	4610      	mov	r0, r2
 80097a0:	f7fe fb63 	bl	8007e6a <vListInsert>
}
 80097a4:	e010      	b.n	80097c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097a6:	4b0e      	ldr	r3, [pc, #56]	@ (80097e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	4b0a      	ldr	r3, [pc, #40]	@ (80097d4 <prvAddCurrentTaskToDelayedList+0x94>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	3304      	adds	r3, #4
 80097b0:	4619      	mov	r1, r3
 80097b2:	4610      	mov	r0, r2
 80097b4:	f7fe fb59 	bl	8007e6a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80097b8:	4b0a      	ldr	r3, [pc, #40]	@ (80097e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	68ba      	ldr	r2, [r7, #8]
 80097be:	429a      	cmp	r2, r3
 80097c0:	d202      	bcs.n	80097c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80097c2:	4a08      	ldr	r2, [pc, #32]	@ (80097e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	6013      	str	r3, [r2, #0]
}
 80097c8:	bf00      	nop
 80097ca:	3710      	adds	r7, #16
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}
 80097d0:	20009188 	.word	0x20009188
 80097d4:	20008cb0 	.word	0x20008cb0
 80097d8:	20009170 	.word	0x20009170
 80097dc:	20009140 	.word	0x20009140
 80097e0:	2000913c 	.word	0x2000913c
 80097e4:	200091a4 	.word	0x200091a4

080097e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b08a      	sub	sp, #40	@ 0x28
 80097ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80097ee:	2300      	movs	r3, #0
 80097f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80097f2:	f000 fb13 	bl	8009e1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80097f6:	4b1d      	ldr	r3, [pc, #116]	@ (800986c <xTimerCreateTimerTask+0x84>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d021      	beq.n	8009842 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80097fe:	2300      	movs	r3, #0
 8009800:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009802:	2300      	movs	r3, #0
 8009804:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009806:	1d3a      	adds	r2, r7, #4
 8009808:	f107 0108 	add.w	r1, r7, #8
 800980c:	f107 030c 	add.w	r3, r7, #12
 8009810:	4618      	mov	r0, r3
 8009812:	f7fe fabf 	bl	8007d94 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009816:	6879      	ldr	r1, [r7, #4]
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	68fa      	ldr	r2, [r7, #12]
 800981c:	9202      	str	r2, [sp, #8]
 800981e:	9301      	str	r3, [sp, #4]
 8009820:	2302      	movs	r3, #2
 8009822:	9300      	str	r3, [sp, #0]
 8009824:	2300      	movs	r3, #0
 8009826:	460a      	mov	r2, r1
 8009828:	4911      	ldr	r1, [pc, #68]	@ (8009870 <xTimerCreateTimerTask+0x88>)
 800982a:	4812      	ldr	r0, [pc, #72]	@ (8009874 <xTimerCreateTimerTask+0x8c>)
 800982c:	f7ff f87a 	bl	8008924 <xTaskCreateStatic>
 8009830:	4603      	mov	r3, r0
 8009832:	4a11      	ldr	r2, [pc, #68]	@ (8009878 <xTimerCreateTimerTask+0x90>)
 8009834:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009836:	4b10      	ldr	r3, [pc, #64]	@ (8009878 <xTimerCreateTimerTask+0x90>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d001      	beq.n	8009842 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800983e:	2301      	movs	r3, #1
 8009840:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d10b      	bne.n	8009860 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800984c:	f383 8811 	msr	BASEPRI, r3
 8009850:	f3bf 8f6f 	isb	sy
 8009854:	f3bf 8f4f 	dsb	sy
 8009858:	613b      	str	r3, [r7, #16]
}
 800985a:	bf00      	nop
 800985c:	bf00      	nop
 800985e:	e7fd      	b.n	800985c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009860:	697b      	ldr	r3, [r7, #20]
}
 8009862:	4618      	mov	r0, r3
 8009864:	3718      	adds	r7, #24
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	200091e0 	.word	0x200091e0
 8009870:	0801aa18 	.word	0x0801aa18
 8009874:	080099b5 	.word	0x080099b5
 8009878:	200091e4 	.word	0x200091e4

0800987c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b08a      	sub	sp, #40	@ 0x28
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	607a      	str	r2, [r7, #4]
 8009888:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800988a:	2300      	movs	r3, #0
 800988c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d10b      	bne.n	80098ac <xTimerGenericCommand+0x30>
	__asm volatile
 8009894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009898:	f383 8811 	msr	BASEPRI, r3
 800989c:	f3bf 8f6f 	isb	sy
 80098a0:	f3bf 8f4f 	dsb	sy
 80098a4:	623b      	str	r3, [r7, #32]
}
 80098a6:	bf00      	nop
 80098a8:	bf00      	nop
 80098aa:	e7fd      	b.n	80098a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80098ac:	4b19      	ldr	r3, [pc, #100]	@ (8009914 <xTimerGenericCommand+0x98>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d02a      	beq.n	800990a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	2b05      	cmp	r3, #5
 80098c4:	dc18      	bgt.n	80098f8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80098c6:	f7ff fead 	bl	8009624 <xTaskGetSchedulerState>
 80098ca:	4603      	mov	r3, r0
 80098cc:	2b02      	cmp	r3, #2
 80098ce:	d109      	bne.n	80098e4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80098d0:	4b10      	ldr	r3, [pc, #64]	@ (8009914 <xTimerGenericCommand+0x98>)
 80098d2:	6818      	ldr	r0, [r3, #0]
 80098d4:	f107 0110 	add.w	r1, r7, #16
 80098d8:	2300      	movs	r3, #0
 80098da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098dc:	f7fe fc32 	bl	8008144 <xQueueGenericSend>
 80098e0:	6278      	str	r0, [r7, #36]	@ 0x24
 80098e2:	e012      	b.n	800990a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80098e4:	4b0b      	ldr	r3, [pc, #44]	@ (8009914 <xTimerGenericCommand+0x98>)
 80098e6:	6818      	ldr	r0, [r3, #0]
 80098e8:	f107 0110 	add.w	r1, r7, #16
 80098ec:	2300      	movs	r3, #0
 80098ee:	2200      	movs	r2, #0
 80098f0:	f7fe fc28 	bl	8008144 <xQueueGenericSend>
 80098f4:	6278      	str	r0, [r7, #36]	@ 0x24
 80098f6:	e008      	b.n	800990a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80098f8:	4b06      	ldr	r3, [pc, #24]	@ (8009914 <xTimerGenericCommand+0x98>)
 80098fa:	6818      	ldr	r0, [r3, #0]
 80098fc:	f107 0110 	add.w	r1, r7, #16
 8009900:	2300      	movs	r3, #0
 8009902:	683a      	ldr	r2, [r7, #0]
 8009904:	f7fe fd20 	bl	8008348 <xQueueGenericSendFromISR>
 8009908:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800990a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800990c:	4618      	mov	r0, r3
 800990e:	3728      	adds	r7, #40	@ 0x28
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}
 8009914:	200091e0 	.word	0x200091e0

08009918 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b088      	sub	sp, #32
 800991c:	af02      	add	r7, sp, #8
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009922:	4b23      	ldr	r3, [pc, #140]	@ (80099b0 <prvProcessExpiredTimer+0x98>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	68db      	ldr	r3, [r3, #12]
 8009928:	68db      	ldr	r3, [r3, #12]
 800992a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	3304      	adds	r3, #4
 8009930:	4618      	mov	r0, r3
 8009932:	f7fe fad3 	bl	8007edc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800993c:	f003 0304 	and.w	r3, r3, #4
 8009940:	2b00      	cmp	r3, #0
 8009942:	d023      	beq.n	800998c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	699a      	ldr	r2, [r3, #24]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	18d1      	adds	r1, r2, r3
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	683a      	ldr	r2, [r7, #0]
 8009950:	6978      	ldr	r0, [r7, #20]
 8009952:	f000 f8d5 	bl	8009b00 <prvInsertTimerInActiveList>
 8009956:	4603      	mov	r3, r0
 8009958:	2b00      	cmp	r3, #0
 800995a:	d020      	beq.n	800999e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800995c:	2300      	movs	r3, #0
 800995e:	9300      	str	r3, [sp, #0]
 8009960:	2300      	movs	r3, #0
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	2100      	movs	r1, #0
 8009966:	6978      	ldr	r0, [r7, #20]
 8009968:	f7ff ff88 	bl	800987c <xTimerGenericCommand>
 800996c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d114      	bne.n	800999e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009978:	f383 8811 	msr	BASEPRI, r3
 800997c:	f3bf 8f6f 	isb	sy
 8009980:	f3bf 8f4f 	dsb	sy
 8009984:	60fb      	str	r3, [r7, #12]
}
 8009986:	bf00      	nop
 8009988:	bf00      	nop
 800998a:	e7fd      	b.n	8009988 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009992:	f023 0301 	bic.w	r3, r3, #1
 8009996:	b2da      	uxtb	r2, r3
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	6a1b      	ldr	r3, [r3, #32]
 80099a2:	6978      	ldr	r0, [r7, #20]
 80099a4:	4798      	blx	r3
}
 80099a6:	bf00      	nop
 80099a8:	3718      	adds	r7, #24
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	200091d8 	.word	0x200091d8

080099b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80099bc:	f107 0308 	add.w	r3, r7, #8
 80099c0:	4618      	mov	r0, r3
 80099c2:	f000 f859 	bl	8009a78 <prvGetNextExpireTime>
 80099c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	4619      	mov	r1, r3
 80099cc:	68f8      	ldr	r0, [r7, #12]
 80099ce:	f000 f805 	bl	80099dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80099d2:	f000 f8d7 	bl	8009b84 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80099d6:	bf00      	nop
 80099d8:	e7f0      	b.n	80099bc <prvTimerTask+0x8>
	...

080099dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80099e6:	f7ff fa01 	bl	8008dec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80099ea:	f107 0308 	add.w	r3, r7, #8
 80099ee:	4618      	mov	r0, r3
 80099f0:	f000 f866 	bl	8009ac0 <prvSampleTimeNow>
 80099f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d130      	bne.n	8009a5e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d10a      	bne.n	8009a18 <prvProcessTimerOrBlockTask+0x3c>
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d806      	bhi.n	8009a18 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009a0a:	f7ff f9fd 	bl	8008e08 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009a0e:	68f9      	ldr	r1, [r7, #12]
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f7ff ff81 	bl	8009918 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009a16:	e024      	b.n	8009a62 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d008      	beq.n	8009a30 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009a1e:	4b13      	ldr	r3, [pc, #76]	@ (8009a6c <prvProcessTimerOrBlockTask+0x90>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d101      	bne.n	8009a2c <prvProcessTimerOrBlockTask+0x50>
 8009a28:	2301      	movs	r3, #1
 8009a2a:	e000      	b.n	8009a2e <prvProcessTimerOrBlockTask+0x52>
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009a30:	4b0f      	ldr	r3, [pc, #60]	@ (8009a70 <prvProcessTimerOrBlockTask+0x94>)
 8009a32:	6818      	ldr	r0, [r3, #0]
 8009a34:	687a      	ldr	r2, [r7, #4]
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	1ad3      	subs	r3, r2, r3
 8009a3a:	683a      	ldr	r2, [r7, #0]
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	f7fe ff3d 	bl	80088bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009a42:	f7ff f9e1 	bl	8008e08 <xTaskResumeAll>
 8009a46:	4603      	mov	r3, r0
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d10a      	bne.n	8009a62 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009a4c:	4b09      	ldr	r3, [pc, #36]	@ (8009a74 <prvProcessTimerOrBlockTask+0x98>)
 8009a4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a52:	601a      	str	r2, [r3, #0]
 8009a54:	f3bf 8f4f 	dsb	sy
 8009a58:	f3bf 8f6f 	isb	sy
}
 8009a5c:	e001      	b.n	8009a62 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009a5e:	f7ff f9d3 	bl	8008e08 <xTaskResumeAll>
}
 8009a62:	bf00      	nop
 8009a64:	3710      	adds	r7, #16
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop
 8009a6c:	200091dc 	.word	0x200091dc
 8009a70:	200091e0 	.word	0x200091e0
 8009a74:	e000ed04 	.word	0xe000ed04

08009a78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b085      	sub	sp, #20
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009a80:	4b0e      	ldr	r3, [pc, #56]	@ (8009abc <prvGetNextExpireTime+0x44>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d101      	bne.n	8009a8e <prvGetNextExpireTime+0x16>
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	e000      	b.n	8009a90 <prvGetNextExpireTime+0x18>
 8009a8e:	2200      	movs	r2, #0
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d105      	bne.n	8009aa8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a9c:	4b07      	ldr	r3, [pc, #28]	@ (8009abc <prvGetNextExpireTime+0x44>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	68db      	ldr	r3, [r3, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	60fb      	str	r3, [r7, #12]
 8009aa6:	e001      	b.n	8009aac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009aac:	68fb      	ldr	r3, [r7, #12]
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3714      	adds	r7, #20
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab8:	4770      	bx	lr
 8009aba:	bf00      	nop
 8009abc:	200091d8 	.word	0x200091d8

08009ac0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009ac8:	f7ff fa3c 	bl	8008f44 <xTaskGetTickCount>
 8009acc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009ace:	4b0b      	ldr	r3, [pc, #44]	@ (8009afc <prvSampleTimeNow+0x3c>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	68fa      	ldr	r2, [r7, #12]
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d205      	bcs.n	8009ae4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009ad8:	f000 f93a 	bl	8009d50 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2201      	movs	r2, #1
 8009ae0:	601a      	str	r2, [r3, #0]
 8009ae2:	e002      	b.n	8009aea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009aea:	4a04      	ldr	r2, [pc, #16]	@ (8009afc <prvSampleTimeNow+0x3c>)
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009af0:	68fb      	ldr	r3, [r7, #12]
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3710      	adds	r7, #16
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop
 8009afc:	200091e8 	.word	0x200091e8

08009b00 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b086      	sub	sp, #24
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	60b9      	str	r1, [r7, #8]
 8009b0a:	607a      	str	r2, [r7, #4]
 8009b0c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	68ba      	ldr	r2, [r7, #8]
 8009b16:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	68fa      	ldr	r2, [r7, #12]
 8009b1c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009b1e:	68ba      	ldr	r2, [r7, #8]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d812      	bhi.n	8009b4c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	1ad2      	subs	r2, r2, r3
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	699b      	ldr	r3, [r3, #24]
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d302      	bcc.n	8009b3a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009b34:	2301      	movs	r3, #1
 8009b36:	617b      	str	r3, [r7, #20]
 8009b38:	e01b      	b.n	8009b72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009b3a:	4b10      	ldr	r3, [pc, #64]	@ (8009b7c <prvInsertTimerInActiveList+0x7c>)
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	3304      	adds	r3, #4
 8009b42:	4619      	mov	r1, r3
 8009b44:	4610      	mov	r0, r2
 8009b46:	f7fe f990 	bl	8007e6a <vListInsert>
 8009b4a:	e012      	b.n	8009b72 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d206      	bcs.n	8009b62 <prvInsertTimerInActiveList+0x62>
 8009b54:	68ba      	ldr	r2, [r7, #8]
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d302      	bcc.n	8009b62 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	617b      	str	r3, [r7, #20]
 8009b60:	e007      	b.n	8009b72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009b62:	4b07      	ldr	r3, [pc, #28]	@ (8009b80 <prvInsertTimerInActiveList+0x80>)
 8009b64:	681a      	ldr	r2, [r3, #0]
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	3304      	adds	r3, #4
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	4610      	mov	r0, r2
 8009b6e:	f7fe f97c 	bl	8007e6a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009b72:	697b      	ldr	r3, [r7, #20]
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3718      	adds	r7, #24
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}
 8009b7c:	200091dc 	.word	0x200091dc
 8009b80:	200091d8 	.word	0x200091d8

08009b84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b08e      	sub	sp, #56	@ 0x38
 8009b88:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b8a:	e0ce      	b.n	8009d2a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	da19      	bge.n	8009bc6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009b92:	1d3b      	adds	r3, r7, #4
 8009b94:	3304      	adds	r3, #4
 8009b96:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d10b      	bne.n	8009bb6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ba2:	f383 8811 	msr	BASEPRI, r3
 8009ba6:	f3bf 8f6f 	isb	sy
 8009baa:	f3bf 8f4f 	dsb	sy
 8009bae:	61fb      	str	r3, [r7, #28]
}
 8009bb0:	bf00      	nop
 8009bb2:	bf00      	nop
 8009bb4:	e7fd      	b.n	8009bb2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009bbc:	6850      	ldr	r0, [r2, #4]
 8009bbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009bc0:	6892      	ldr	r2, [r2, #8]
 8009bc2:	4611      	mov	r1, r2
 8009bc4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	f2c0 80ae 	blt.w	8009d2a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd4:	695b      	ldr	r3, [r3, #20]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d004      	beq.n	8009be4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bdc:	3304      	adds	r3, #4
 8009bde:	4618      	mov	r0, r3
 8009be0:	f7fe f97c 	bl	8007edc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009be4:	463b      	mov	r3, r7
 8009be6:	4618      	mov	r0, r3
 8009be8:	f7ff ff6a 	bl	8009ac0 <prvSampleTimeNow>
 8009bec:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2b09      	cmp	r3, #9
 8009bf2:	f200 8097 	bhi.w	8009d24 <prvProcessReceivedCommands+0x1a0>
 8009bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8009bfc <prvProcessReceivedCommands+0x78>)
 8009bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bfc:	08009c25 	.word	0x08009c25
 8009c00:	08009c25 	.word	0x08009c25
 8009c04:	08009c25 	.word	0x08009c25
 8009c08:	08009c9b 	.word	0x08009c9b
 8009c0c:	08009caf 	.word	0x08009caf
 8009c10:	08009cfb 	.word	0x08009cfb
 8009c14:	08009c25 	.word	0x08009c25
 8009c18:	08009c25 	.word	0x08009c25
 8009c1c:	08009c9b 	.word	0x08009c9b
 8009c20:	08009caf 	.word	0x08009caf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c26:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c2a:	f043 0301 	orr.w	r3, r3, #1
 8009c2e:	b2da      	uxtb	r2, r3
 8009c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c32:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009c36:	68ba      	ldr	r2, [r7, #8]
 8009c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c3a:	699b      	ldr	r3, [r3, #24]
 8009c3c:	18d1      	adds	r1, r2, r3
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c44:	f7ff ff5c 	bl	8009b00 <prvInsertTimerInActiveList>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d06c      	beq.n	8009d28 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c50:	6a1b      	ldr	r3, [r3, #32]
 8009c52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c54:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c5c:	f003 0304 	and.w	r3, r3, #4
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d061      	beq.n	8009d28 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009c64:	68ba      	ldr	r2, [r7, #8]
 8009c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c68:	699b      	ldr	r3, [r3, #24]
 8009c6a:	441a      	add	r2, r3
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	9300      	str	r3, [sp, #0]
 8009c70:	2300      	movs	r3, #0
 8009c72:	2100      	movs	r1, #0
 8009c74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c76:	f7ff fe01 	bl	800987c <xTimerGenericCommand>
 8009c7a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009c7c:	6a3b      	ldr	r3, [r7, #32]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d152      	bne.n	8009d28 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c86:	f383 8811 	msr	BASEPRI, r3
 8009c8a:	f3bf 8f6f 	isb	sy
 8009c8e:	f3bf 8f4f 	dsb	sy
 8009c92:	61bb      	str	r3, [r7, #24]
}
 8009c94:	bf00      	nop
 8009c96:	bf00      	nop
 8009c98:	e7fd      	b.n	8009c96 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ca0:	f023 0301 	bic.w	r3, r3, #1
 8009ca4:	b2da      	uxtb	r2, r3
 8009ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ca8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009cac:	e03d      	b.n	8009d2a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009cb4:	f043 0301 	orr.w	r3, r3, #1
 8009cb8:	b2da      	uxtb	r2, r3
 8009cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cbc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009cc0:	68ba      	ldr	r2, [r7, #8]
 8009cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cc4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cc8:	699b      	ldr	r3, [r3, #24]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d10b      	bne.n	8009ce6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cd2:	f383 8811 	msr	BASEPRI, r3
 8009cd6:	f3bf 8f6f 	isb	sy
 8009cda:	f3bf 8f4f 	dsb	sy
 8009cde:	617b      	str	r3, [r7, #20]
}
 8009ce0:	bf00      	nop
 8009ce2:	bf00      	nop
 8009ce4:	e7fd      	b.n	8009ce2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ce8:	699a      	ldr	r2, [r3, #24]
 8009cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cec:	18d1      	adds	r1, r2, r3
 8009cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009cf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009cf4:	f7ff ff04 	bl	8009b00 <prvInsertTimerInActiveList>
					break;
 8009cf8:	e017      	b.n	8009d2a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cfc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d00:	f003 0302 	and.w	r3, r3, #2
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d103      	bne.n	8009d10 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009d08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d0a:	f000 fbe5 	bl	800a4d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009d0e:	e00c      	b.n	8009d2a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d16:	f023 0301 	bic.w	r3, r3, #1
 8009d1a:	b2da      	uxtb	r2, r3
 8009d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009d22:	e002      	b.n	8009d2a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009d24:	bf00      	nop
 8009d26:	e000      	b.n	8009d2a <prvProcessReceivedCommands+0x1a6>
					break;
 8009d28:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d2a:	4b08      	ldr	r3, [pc, #32]	@ (8009d4c <prvProcessReceivedCommands+0x1c8>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	1d39      	adds	r1, r7, #4
 8009d30:	2200      	movs	r2, #0
 8009d32:	4618      	mov	r0, r3
 8009d34:	f7fe fba6 	bl	8008484 <xQueueReceive>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	f47f af26 	bne.w	8009b8c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009d40:	bf00      	nop
 8009d42:	bf00      	nop
 8009d44:	3730      	adds	r7, #48	@ 0x30
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
 8009d4a:	bf00      	nop
 8009d4c:	200091e0 	.word	0x200091e0

08009d50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b088      	sub	sp, #32
 8009d54:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d56:	e049      	b.n	8009dec <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d58:	4b2e      	ldr	r3, [pc, #184]	@ (8009e14 <prvSwitchTimerLists+0xc4>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	68db      	ldr	r3, [r3, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d62:	4b2c      	ldr	r3, [pc, #176]	@ (8009e14 <prvSwitchTimerLists+0xc4>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	68db      	ldr	r3, [r3, #12]
 8009d68:	68db      	ldr	r3, [r3, #12]
 8009d6a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	3304      	adds	r3, #4
 8009d70:	4618      	mov	r0, r3
 8009d72:	f7fe f8b3 	bl	8007edc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	6a1b      	ldr	r3, [r3, #32]
 8009d7a:	68f8      	ldr	r0, [r7, #12]
 8009d7c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d84:	f003 0304 	and.w	r3, r3, #4
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d02f      	beq.n	8009dec <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	699b      	ldr	r3, [r3, #24]
 8009d90:	693a      	ldr	r2, [r7, #16]
 8009d92:	4413      	add	r3, r2
 8009d94:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009d96:	68ba      	ldr	r2, [r7, #8]
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d90e      	bls.n	8009dbc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	68ba      	ldr	r2, [r7, #8]
 8009da2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	68fa      	ldr	r2, [r7, #12]
 8009da8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009daa:	4b1a      	ldr	r3, [pc, #104]	@ (8009e14 <prvSwitchTimerLists+0xc4>)
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	3304      	adds	r3, #4
 8009db2:	4619      	mov	r1, r3
 8009db4:	4610      	mov	r0, r2
 8009db6:	f7fe f858 	bl	8007e6a <vListInsert>
 8009dba:	e017      	b.n	8009dec <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	9300      	str	r3, [sp, #0]
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	693a      	ldr	r2, [r7, #16]
 8009dc4:	2100      	movs	r1, #0
 8009dc6:	68f8      	ldr	r0, [r7, #12]
 8009dc8:	f7ff fd58 	bl	800987c <xTimerGenericCommand>
 8009dcc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d10b      	bne.n	8009dec <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dd8:	f383 8811 	msr	BASEPRI, r3
 8009ddc:	f3bf 8f6f 	isb	sy
 8009de0:	f3bf 8f4f 	dsb	sy
 8009de4:	603b      	str	r3, [r7, #0]
}
 8009de6:	bf00      	nop
 8009de8:	bf00      	nop
 8009dea:	e7fd      	b.n	8009de8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009dec:	4b09      	ldr	r3, [pc, #36]	@ (8009e14 <prvSwitchTimerLists+0xc4>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d1b0      	bne.n	8009d58 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009df6:	4b07      	ldr	r3, [pc, #28]	@ (8009e14 <prvSwitchTimerLists+0xc4>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009dfc:	4b06      	ldr	r3, [pc, #24]	@ (8009e18 <prvSwitchTimerLists+0xc8>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4a04      	ldr	r2, [pc, #16]	@ (8009e14 <prvSwitchTimerLists+0xc4>)
 8009e02:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009e04:	4a04      	ldr	r2, [pc, #16]	@ (8009e18 <prvSwitchTimerLists+0xc8>)
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	6013      	str	r3, [r2, #0]
}
 8009e0a:	bf00      	nop
 8009e0c:	3718      	adds	r7, #24
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	200091d8 	.word	0x200091d8
 8009e18:	200091dc 	.word	0x200091dc

08009e1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009e22:	f000 f969 	bl	800a0f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009e26:	4b15      	ldr	r3, [pc, #84]	@ (8009e7c <prvCheckForValidListAndQueue+0x60>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d120      	bne.n	8009e70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009e2e:	4814      	ldr	r0, [pc, #80]	@ (8009e80 <prvCheckForValidListAndQueue+0x64>)
 8009e30:	f7fd ffca 	bl	8007dc8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009e34:	4813      	ldr	r0, [pc, #76]	@ (8009e84 <prvCheckForValidListAndQueue+0x68>)
 8009e36:	f7fd ffc7 	bl	8007dc8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009e3a:	4b13      	ldr	r3, [pc, #76]	@ (8009e88 <prvCheckForValidListAndQueue+0x6c>)
 8009e3c:	4a10      	ldr	r2, [pc, #64]	@ (8009e80 <prvCheckForValidListAndQueue+0x64>)
 8009e3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009e40:	4b12      	ldr	r3, [pc, #72]	@ (8009e8c <prvCheckForValidListAndQueue+0x70>)
 8009e42:	4a10      	ldr	r2, [pc, #64]	@ (8009e84 <prvCheckForValidListAndQueue+0x68>)
 8009e44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009e46:	2300      	movs	r3, #0
 8009e48:	9300      	str	r3, [sp, #0]
 8009e4a:	4b11      	ldr	r3, [pc, #68]	@ (8009e90 <prvCheckForValidListAndQueue+0x74>)
 8009e4c:	4a11      	ldr	r2, [pc, #68]	@ (8009e94 <prvCheckForValidListAndQueue+0x78>)
 8009e4e:	2110      	movs	r1, #16
 8009e50:	200a      	movs	r0, #10
 8009e52:	f7fe f8d7 	bl	8008004 <xQueueGenericCreateStatic>
 8009e56:	4603      	mov	r3, r0
 8009e58:	4a08      	ldr	r2, [pc, #32]	@ (8009e7c <prvCheckForValidListAndQueue+0x60>)
 8009e5a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009e5c:	4b07      	ldr	r3, [pc, #28]	@ (8009e7c <prvCheckForValidListAndQueue+0x60>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d005      	beq.n	8009e70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009e64:	4b05      	ldr	r3, [pc, #20]	@ (8009e7c <prvCheckForValidListAndQueue+0x60>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	490b      	ldr	r1, [pc, #44]	@ (8009e98 <prvCheckForValidListAndQueue+0x7c>)
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7fe fcfc 	bl	8008868 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009e70:	f000 f974 	bl	800a15c <vPortExitCritical>
}
 8009e74:	bf00      	nop
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	200091e0 	.word	0x200091e0
 8009e80:	200091b0 	.word	0x200091b0
 8009e84:	200091c4 	.word	0x200091c4
 8009e88:	200091d8 	.word	0x200091d8
 8009e8c:	200091dc 	.word	0x200091dc
 8009e90:	2000928c 	.word	0x2000928c
 8009e94:	200091ec 	.word	0x200091ec
 8009e98:	0801aa20 	.word	0x0801aa20

08009e9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b085      	sub	sp, #20
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	60f8      	str	r0, [r7, #12]
 8009ea4:	60b9      	str	r1, [r7, #8]
 8009ea6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	3b04      	subs	r3, #4
 8009eac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009eb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	3b04      	subs	r3, #4
 8009eba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	f023 0201 	bic.w	r2, r3, #1
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	3b04      	subs	r3, #4
 8009eca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009ecc:	4a0c      	ldr	r2, [pc, #48]	@ (8009f00 <pxPortInitialiseStack+0x64>)
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	3b14      	subs	r3, #20
 8009ed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	3b04      	subs	r3, #4
 8009ee2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f06f 0202 	mvn.w	r2, #2
 8009eea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	3b20      	subs	r3, #32
 8009ef0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3714      	adds	r7, #20
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr
 8009f00:	08009f05 	.word	0x08009f05

08009f04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009f04:	b480      	push	{r7}
 8009f06:	b085      	sub	sp, #20
 8009f08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009f0e:	4b13      	ldr	r3, [pc, #76]	@ (8009f5c <prvTaskExitError+0x58>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009f16:	d00b      	beq.n	8009f30 <prvTaskExitError+0x2c>
	__asm volatile
 8009f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f1c:	f383 8811 	msr	BASEPRI, r3
 8009f20:	f3bf 8f6f 	isb	sy
 8009f24:	f3bf 8f4f 	dsb	sy
 8009f28:	60fb      	str	r3, [r7, #12]
}
 8009f2a:	bf00      	nop
 8009f2c:	bf00      	nop
 8009f2e:	e7fd      	b.n	8009f2c <prvTaskExitError+0x28>
	__asm volatile
 8009f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f34:	f383 8811 	msr	BASEPRI, r3
 8009f38:	f3bf 8f6f 	isb	sy
 8009f3c:	f3bf 8f4f 	dsb	sy
 8009f40:	60bb      	str	r3, [r7, #8]
}
 8009f42:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009f44:	bf00      	nop
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d0fc      	beq.n	8009f46 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009f4c:	bf00      	nop
 8009f4e:	bf00      	nop
 8009f50:	3714      	adds	r7, #20
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr
 8009f5a:	bf00      	nop
 8009f5c:	20000028 	.word	0x20000028

08009f60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009f60:	4b07      	ldr	r3, [pc, #28]	@ (8009f80 <pxCurrentTCBConst2>)
 8009f62:	6819      	ldr	r1, [r3, #0]
 8009f64:	6808      	ldr	r0, [r1, #0]
 8009f66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f6a:	f380 8809 	msr	PSP, r0
 8009f6e:	f3bf 8f6f 	isb	sy
 8009f72:	f04f 0000 	mov.w	r0, #0
 8009f76:	f380 8811 	msr	BASEPRI, r0
 8009f7a:	4770      	bx	lr
 8009f7c:	f3af 8000 	nop.w

08009f80 <pxCurrentTCBConst2>:
 8009f80:	20008cb0 	.word	0x20008cb0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009f84:	bf00      	nop
 8009f86:	bf00      	nop

08009f88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009f88:	4808      	ldr	r0, [pc, #32]	@ (8009fac <prvPortStartFirstTask+0x24>)
 8009f8a:	6800      	ldr	r0, [r0, #0]
 8009f8c:	6800      	ldr	r0, [r0, #0]
 8009f8e:	f380 8808 	msr	MSP, r0
 8009f92:	f04f 0000 	mov.w	r0, #0
 8009f96:	f380 8814 	msr	CONTROL, r0
 8009f9a:	b662      	cpsie	i
 8009f9c:	b661      	cpsie	f
 8009f9e:	f3bf 8f4f 	dsb	sy
 8009fa2:	f3bf 8f6f 	isb	sy
 8009fa6:	df00      	svc	0
 8009fa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009faa:	bf00      	nop
 8009fac:	e000ed08 	.word	0xe000ed08

08009fb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b086      	sub	sp, #24
 8009fb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009fb6:	4b47      	ldr	r3, [pc, #284]	@ (800a0d4 <xPortStartScheduler+0x124>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4a47      	ldr	r2, [pc, #284]	@ (800a0d8 <xPortStartScheduler+0x128>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d10b      	bne.n	8009fd8 <xPortStartScheduler+0x28>
	__asm volatile
 8009fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fc4:	f383 8811 	msr	BASEPRI, r3
 8009fc8:	f3bf 8f6f 	isb	sy
 8009fcc:	f3bf 8f4f 	dsb	sy
 8009fd0:	60fb      	str	r3, [r7, #12]
}
 8009fd2:	bf00      	nop
 8009fd4:	bf00      	nop
 8009fd6:	e7fd      	b.n	8009fd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009fd8:	4b3e      	ldr	r3, [pc, #248]	@ (800a0d4 <xPortStartScheduler+0x124>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4a3f      	ldr	r2, [pc, #252]	@ (800a0dc <xPortStartScheduler+0x12c>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d10b      	bne.n	8009ffa <xPortStartScheduler+0x4a>
	__asm volatile
 8009fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fe6:	f383 8811 	msr	BASEPRI, r3
 8009fea:	f3bf 8f6f 	isb	sy
 8009fee:	f3bf 8f4f 	dsb	sy
 8009ff2:	613b      	str	r3, [r7, #16]
}
 8009ff4:	bf00      	nop
 8009ff6:	bf00      	nop
 8009ff8:	e7fd      	b.n	8009ff6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009ffa:	4b39      	ldr	r3, [pc, #228]	@ (800a0e0 <xPortStartScheduler+0x130>)
 8009ffc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	b2db      	uxtb	r3, r3
 800a004:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	22ff      	movs	r2, #255	@ 0xff
 800a00a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	b2db      	uxtb	r3, r3
 800a012:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a014:	78fb      	ldrb	r3, [r7, #3]
 800a016:	b2db      	uxtb	r3, r3
 800a018:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a01c:	b2da      	uxtb	r2, r3
 800a01e:	4b31      	ldr	r3, [pc, #196]	@ (800a0e4 <xPortStartScheduler+0x134>)
 800a020:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a022:	4b31      	ldr	r3, [pc, #196]	@ (800a0e8 <xPortStartScheduler+0x138>)
 800a024:	2207      	movs	r2, #7
 800a026:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a028:	e009      	b.n	800a03e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a02a:	4b2f      	ldr	r3, [pc, #188]	@ (800a0e8 <xPortStartScheduler+0x138>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	3b01      	subs	r3, #1
 800a030:	4a2d      	ldr	r2, [pc, #180]	@ (800a0e8 <xPortStartScheduler+0x138>)
 800a032:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a034:	78fb      	ldrb	r3, [r7, #3]
 800a036:	b2db      	uxtb	r3, r3
 800a038:	005b      	lsls	r3, r3, #1
 800a03a:	b2db      	uxtb	r3, r3
 800a03c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a03e:	78fb      	ldrb	r3, [r7, #3]
 800a040:	b2db      	uxtb	r3, r3
 800a042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a046:	2b80      	cmp	r3, #128	@ 0x80
 800a048:	d0ef      	beq.n	800a02a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a04a:	4b27      	ldr	r3, [pc, #156]	@ (800a0e8 <xPortStartScheduler+0x138>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f1c3 0307 	rsb	r3, r3, #7
 800a052:	2b04      	cmp	r3, #4
 800a054:	d00b      	beq.n	800a06e <xPortStartScheduler+0xbe>
	__asm volatile
 800a056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a05a:	f383 8811 	msr	BASEPRI, r3
 800a05e:	f3bf 8f6f 	isb	sy
 800a062:	f3bf 8f4f 	dsb	sy
 800a066:	60bb      	str	r3, [r7, #8]
}
 800a068:	bf00      	nop
 800a06a:	bf00      	nop
 800a06c:	e7fd      	b.n	800a06a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a06e:	4b1e      	ldr	r3, [pc, #120]	@ (800a0e8 <xPortStartScheduler+0x138>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	021b      	lsls	r3, r3, #8
 800a074:	4a1c      	ldr	r2, [pc, #112]	@ (800a0e8 <xPortStartScheduler+0x138>)
 800a076:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a078:	4b1b      	ldr	r3, [pc, #108]	@ (800a0e8 <xPortStartScheduler+0x138>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a080:	4a19      	ldr	r2, [pc, #100]	@ (800a0e8 <xPortStartScheduler+0x138>)
 800a082:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	b2da      	uxtb	r2, r3
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a08c:	4b17      	ldr	r3, [pc, #92]	@ (800a0ec <xPortStartScheduler+0x13c>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4a16      	ldr	r2, [pc, #88]	@ (800a0ec <xPortStartScheduler+0x13c>)
 800a092:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a096:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a098:	4b14      	ldr	r3, [pc, #80]	@ (800a0ec <xPortStartScheduler+0x13c>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4a13      	ldr	r2, [pc, #76]	@ (800a0ec <xPortStartScheduler+0x13c>)
 800a09e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a0a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a0a4:	f000 f8da 	bl	800a25c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a0a8:	4b11      	ldr	r3, [pc, #68]	@ (800a0f0 <xPortStartScheduler+0x140>)
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a0ae:	f000 f8f9 	bl	800a2a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a0b2:	4b10      	ldr	r3, [pc, #64]	@ (800a0f4 <xPortStartScheduler+0x144>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4a0f      	ldr	r2, [pc, #60]	@ (800a0f4 <xPortStartScheduler+0x144>)
 800a0b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a0bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a0be:	f7ff ff63 	bl	8009f88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a0c2:	f7ff f809 	bl	80090d8 <vTaskSwitchContext>
	prvTaskExitError();
 800a0c6:	f7ff ff1d 	bl	8009f04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a0ca:	2300      	movs	r3, #0
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3718      	adds	r7, #24
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}
 800a0d4:	e000ed00 	.word	0xe000ed00
 800a0d8:	410fc271 	.word	0x410fc271
 800a0dc:	410fc270 	.word	0x410fc270
 800a0e0:	e000e400 	.word	0xe000e400
 800a0e4:	200092dc 	.word	0x200092dc
 800a0e8:	200092e0 	.word	0x200092e0
 800a0ec:	e000ed20 	.word	0xe000ed20
 800a0f0:	20000028 	.word	0x20000028
 800a0f4:	e000ef34 	.word	0xe000ef34

0800a0f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b083      	sub	sp, #12
 800a0fc:	af00      	add	r7, sp, #0
	__asm volatile
 800a0fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a102:	f383 8811 	msr	BASEPRI, r3
 800a106:	f3bf 8f6f 	isb	sy
 800a10a:	f3bf 8f4f 	dsb	sy
 800a10e:	607b      	str	r3, [r7, #4]
}
 800a110:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a112:	4b10      	ldr	r3, [pc, #64]	@ (800a154 <vPortEnterCritical+0x5c>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	3301      	adds	r3, #1
 800a118:	4a0e      	ldr	r2, [pc, #56]	@ (800a154 <vPortEnterCritical+0x5c>)
 800a11a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a11c:	4b0d      	ldr	r3, [pc, #52]	@ (800a154 <vPortEnterCritical+0x5c>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	2b01      	cmp	r3, #1
 800a122:	d110      	bne.n	800a146 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a124:	4b0c      	ldr	r3, [pc, #48]	@ (800a158 <vPortEnterCritical+0x60>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d00b      	beq.n	800a146 <vPortEnterCritical+0x4e>
	__asm volatile
 800a12e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a132:	f383 8811 	msr	BASEPRI, r3
 800a136:	f3bf 8f6f 	isb	sy
 800a13a:	f3bf 8f4f 	dsb	sy
 800a13e:	603b      	str	r3, [r7, #0]
}
 800a140:	bf00      	nop
 800a142:	bf00      	nop
 800a144:	e7fd      	b.n	800a142 <vPortEnterCritical+0x4a>
	}
}
 800a146:	bf00      	nop
 800a148:	370c      	adds	r7, #12
 800a14a:	46bd      	mov	sp, r7
 800a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a150:	4770      	bx	lr
 800a152:	bf00      	nop
 800a154:	20000028 	.word	0x20000028
 800a158:	e000ed04 	.word	0xe000ed04

0800a15c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a15c:	b480      	push	{r7}
 800a15e:	b083      	sub	sp, #12
 800a160:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a162:	4b12      	ldr	r3, [pc, #72]	@ (800a1ac <vPortExitCritical+0x50>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d10b      	bne.n	800a182 <vPortExitCritical+0x26>
	__asm volatile
 800a16a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a16e:	f383 8811 	msr	BASEPRI, r3
 800a172:	f3bf 8f6f 	isb	sy
 800a176:	f3bf 8f4f 	dsb	sy
 800a17a:	607b      	str	r3, [r7, #4]
}
 800a17c:	bf00      	nop
 800a17e:	bf00      	nop
 800a180:	e7fd      	b.n	800a17e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a182:	4b0a      	ldr	r3, [pc, #40]	@ (800a1ac <vPortExitCritical+0x50>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	3b01      	subs	r3, #1
 800a188:	4a08      	ldr	r2, [pc, #32]	@ (800a1ac <vPortExitCritical+0x50>)
 800a18a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a18c:	4b07      	ldr	r3, [pc, #28]	@ (800a1ac <vPortExitCritical+0x50>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d105      	bne.n	800a1a0 <vPortExitCritical+0x44>
 800a194:	2300      	movs	r3, #0
 800a196:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	f383 8811 	msr	BASEPRI, r3
}
 800a19e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a1a0:	bf00      	nop
 800a1a2:	370c      	adds	r7, #12
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr
 800a1ac:	20000028 	.word	0x20000028

0800a1b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a1b0:	f3ef 8009 	mrs	r0, PSP
 800a1b4:	f3bf 8f6f 	isb	sy
 800a1b8:	4b15      	ldr	r3, [pc, #84]	@ (800a210 <pxCurrentTCBConst>)
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	f01e 0f10 	tst.w	lr, #16
 800a1c0:	bf08      	it	eq
 800a1c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a1c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ca:	6010      	str	r0, [r2, #0]
 800a1cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a1d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a1d4:	f380 8811 	msr	BASEPRI, r0
 800a1d8:	f3bf 8f4f 	dsb	sy
 800a1dc:	f3bf 8f6f 	isb	sy
 800a1e0:	f7fe ff7a 	bl	80090d8 <vTaskSwitchContext>
 800a1e4:	f04f 0000 	mov.w	r0, #0
 800a1e8:	f380 8811 	msr	BASEPRI, r0
 800a1ec:	bc09      	pop	{r0, r3}
 800a1ee:	6819      	ldr	r1, [r3, #0]
 800a1f0:	6808      	ldr	r0, [r1, #0]
 800a1f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1f6:	f01e 0f10 	tst.w	lr, #16
 800a1fa:	bf08      	it	eq
 800a1fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a200:	f380 8809 	msr	PSP, r0
 800a204:	f3bf 8f6f 	isb	sy
 800a208:	4770      	bx	lr
 800a20a:	bf00      	nop
 800a20c:	f3af 8000 	nop.w

0800a210 <pxCurrentTCBConst>:
 800a210:	20008cb0 	.word	0x20008cb0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a214:	bf00      	nop
 800a216:	bf00      	nop

0800a218 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b082      	sub	sp, #8
 800a21c:	af00      	add	r7, sp, #0
	__asm volatile
 800a21e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a222:	f383 8811 	msr	BASEPRI, r3
 800a226:	f3bf 8f6f 	isb	sy
 800a22a:	f3bf 8f4f 	dsb	sy
 800a22e:	607b      	str	r3, [r7, #4]
}
 800a230:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a232:	f7fe fe97 	bl	8008f64 <xTaskIncrementTick>
 800a236:	4603      	mov	r3, r0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d003      	beq.n	800a244 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a23c:	4b06      	ldr	r3, [pc, #24]	@ (800a258 <xPortSysTickHandler+0x40>)
 800a23e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a242:	601a      	str	r2, [r3, #0]
 800a244:	2300      	movs	r3, #0
 800a246:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	f383 8811 	msr	BASEPRI, r3
}
 800a24e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a250:	bf00      	nop
 800a252:	3708      	adds	r7, #8
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}
 800a258:	e000ed04 	.word	0xe000ed04

0800a25c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a25c:	b480      	push	{r7}
 800a25e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a260:	4b0b      	ldr	r3, [pc, #44]	@ (800a290 <vPortSetupTimerInterrupt+0x34>)
 800a262:	2200      	movs	r2, #0
 800a264:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a266:	4b0b      	ldr	r3, [pc, #44]	@ (800a294 <vPortSetupTimerInterrupt+0x38>)
 800a268:	2200      	movs	r2, #0
 800a26a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a26c:	4b0a      	ldr	r3, [pc, #40]	@ (800a298 <vPortSetupTimerInterrupt+0x3c>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4a0a      	ldr	r2, [pc, #40]	@ (800a29c <vPortSetupTimerInterrupt+0x40>)
 800a272:	fba2 2303 	umull	r2, r3, r2, r3
 800a276:	099b      	lsrs	r3, r3, #6
 800a278:	4a09      	ldr	r2, [pc, #36]	@ (800a2a0 <vPortSetupTimerInterrupt+0x44>)
 800a27a:	3b01      	subs	r3, #1
 800a27c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a27e:	4b04      	ldr	r3, [pc, #16]	@ (800a290 <vPortSetupTimerInterrupt+0x34>)
 800a280:	2207      	movs	r2, #7
 800a282:	601a      	str	r2, [r3, #0]
}
 800a284:	bf00      	nop
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr
 800a28e:	bf00      	nop
 800a290:	e000e010 	.word	0xe000e010
 800a294:	e000e018 	.word	0xe000e018
 800a298:	2000001c 	.word	0x2000001c
 800a29c:	10624dd3 	.word	0x10624dd3
 800a2a0:	e000e014 	.word	0xe000e014

0800a2a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a2a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a2b4 <vPortEnableVFP+0x10>
 800a2a8:	6801      	ldr	r1, [r0, #0]
 800a2aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a2ae:	6001      	str	r1, [r0, #0]
 800a2b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a2b2:	bf00      	nop
 800a2b4:	e000ed88 	.word	0xe000ed88

0800a2b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b085      	sub	sp, #20
 800a2bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a2be:	f3ef 8305 	mrs	r3, IPSR
 800a2c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2b0f      	cmp	r3, #15
 800a2c8:	d915      	bls.n	800a2f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a2ca:	4a18      	ldr	r2, [pc, #96]	@ (800a32c <vPortValidateInterruptPriority+0x74>)
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	4413      	add	r3, r2
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a2d4:	4b16      	ldr	r3, [pc, #88]	@ (800a330 <vPortValidateInterruptPriority+0x78>)
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	7afa      	ldrb	r2, [r7, #11]
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	d20b      	bcs.n	800a2f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a2de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2e2:	f383 8811 	msr	BASEPRI, r3
 800a2e6:	f3bf 8f6f 	isb	sy
 800a2ea:	f3bf 8f4f 	dsb	sy
 800a2ee:	607b      	str	r3, [r7, #4]
}
 800a2f0:	bf00      	nop
 800a2f2:	bf00      	nop
 800a2f4:	e7fd      	b.n	800a2f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a2f6:	4b0f      	ldr	r3, [pc, #60]	@ (800a334 <vPortValidateInterruptPriority+0x7c>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a2fe:	4b0e      	ldr	r3, [pc, #56]	@ (800a338 <vPortValidateInterruptPriority+0x80>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	429a      	cmp	r2, r3
 800a304:	d90b      	bls.n	800a31e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a30a:	f383 8811 	msr	BASEPRI, r3
 800a30e:	f3bf 8f6f 	isb	sy
 800a312:	f3bf 8f4f 	dsb	sy
 800a316:	603b      	str	r3, [r7, #0]
}
 800a318:	bf00      	nop
 800a31a:	bf00      	nop
 800a31c:	e7fd      	b.n	800a31a <vPortValidateInterruptPriority+0x62>
	}
 800a31e:	bf00      	nop
 800a320:	3714      	adds	r7, #20
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr
 800a32a:	bf00      	nop
 800a32c:	e000e3f0 	.word	0xe000e3f0
 800a330:	200092dc 	.word	0x200092dc
 800a334:	e000ed0c 	.word	0xe000ed0c
 800a338:	200092e0 	.word	0x200092e0

0800a33c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b08a      	sub	sp, #40	@ 0x28
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a344:	2300      	movs	r3, #0
 800a346:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a348:	f7fe fd50 	bl	8008dec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a34c:	4b5c      	ldr	r3, [pc, #368]	@ (800a4c0 <pvPortMalloc+0x184>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d101      	bne.n	800a358 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a354:	f000 f924 	bl	800a5a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a358:	4b5a      	ldr	r3, [pc, #360]	@ (800a4c4 <pvPortMalloc+0x188>)
 800a35a:	681a      	ldr	r2, [r3, #0]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	4013      	ands	r3, r2
 800a360:	2b00      	cmp	r3, #0
 800a362:	f040 8095 	bne.w	800a490 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d01e      	beq.n	800a3aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a36c:	2208      	movs	r2, #8
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	4413      	add	r3, r2
 800a372:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f003 0307 	and.w	r3, r3, #7
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d015      	beq.n	800a3aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f023 0307 	bic.w	r3, r3, #7
 800a384:	3308      	adds	r3, #8
 800a386:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f003 0307 	and.w	r3, r3, #7
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d00b      	beq.n	800a3aa <pvPortMalloc+0x6e>
	__asm volatile
 800a392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a396:	f383 8811 	msr	BASEPRI, r3
 800a39a:	f3bf 8f6f 	isb	sy
 800a39e:	f3bf 8f4f 	dsb	sy
 800a3a2:	617b      	str	r3, [r7, #20]
}
 800a3a4:	bf00      	nop
 800a3a6:	bf00      	nop
 800a3a8:	e7fd      	b.n	800a3a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d06f      	beq.n	800a490 <pvPortMalloc+0x154>
 800a3b0:	4b45      	ldr	r3, [pc, #276]	@ (800a4c8 <pvPortMalloc+0x18c>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	687a      	ldr	r2, [r7, #4]
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d86a      	bhi.n	800a490 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a3ba:	4b44      	ldr	r3, [pc, #272]	@ (800a4cc <pvPortMalloc+0x190>)
 800a3bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a3be:	4b43      	ldr	r3, [pc, #268]	@ (800a4cc <pvPortMalloc+0x190>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a3c4:	e004      	b.n	800a3d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a3c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a3ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a3d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3d2:	685b      	ldr	r3, [r3, #4]
 800a3d4:	687a      	ldr	r2, [r7, #4]
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d903      	bls.n	800a3e2 <pvPortMalloc+0xa6>
 800a3da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d1f1      	bne.n	800a3c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a3e2:	4b37      	ldr	r3, [pc, #220]	@ (800a4c0 <pvPortMalloc+0x184>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d051      	beq.n	800a490 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a3ec:	6a3b      	ldr	r3, [r7, #32]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	2208      	movs	r2, #8
 800a3f2:	4413      	add	r3, r2
 800a3f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a3f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f8:	681a      	ldr	r2, [r3, #0]
 800a3fa:	6a3b      	ldr	r3, [r7, #32]
 800a3fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a3fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a400:	685a      	ldr	r2, [r3, #4]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	1ad2      	subs	r2, r2, r3
 800a406:	2308      	movs	r3, #8
 800a408:	005b      	lsls	r3, r3, #1
 800a40a:	429a      	cmp	r2, r3
 800a40c:	d920      	bls.n	800a450 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a40e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	4413      	add	r3, r2
 800a414:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a416:	69bb      	ldr	r3, [r7, #24]
 800a418:	f003 0307 	and.w	r3, r3, #7
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d00b      	beq.n	800a438 <pvPortMalloc+0xfc>
	__asm volatile
 800a420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a424:	f383 8811 	msr	BASEPRI, r3
 800a428:	f3bf 8f6f 	isb	sy
 800a42c:	f3bf 8f4f 	dsb	sy
 800a430:	613b      	str	r3, [r7, #16]
}
 800a432:	bf00      	nop
 800a434:	bf00      	nop
 800a436:	e7fd      	b.n	800a434 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a43a:	685a      	ldr	r2, [r3, #4]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	1ad2      	subs	r2, r2, r3
 800a440:	69bb      	ldr	r3, [r7, #24]
 800a442:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a44a:	69b8      	ldr	r0, [r7, #24]
 800a44c:	f000 f90a 	bl	800a664 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a450:	4b1d      	ldr	r3, [pc, #116]	@ (800a4c8 <pvPortMalloc+0x18c>)
 800a452:	681a      	ldr	r2, [r3, #0]
 800a454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	1ad3      	subs	r3, r2, r3
 800a45a:	4a1b      	ldr	r2, [pc, #108]	@ (800a4c8 <pvPortMalloc+0x18c>)
 800a45c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a45e:	4b1a      	ldr	r3, [pc, #104]	@ (800a4c8 <pvPortMalloc+0x18c>)
 800a460:	681a      	ldr	r2, [r3, #0]
 800a462:	4b1b      	ldr	r3, [pc, #108]	@ (800a4d0 <pvPortMalloc+0x194>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	429a      	cmp	r2, r3
 800a468:	d203      	bcs.n	800a472 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a46a:	4b17      	ldr	r3, [pc, #92]	@ (800a4c8 <pvPortMalloc+0x18c>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a18      	ldr	r2, [pc, #96]	@ (800a4d0 <pvPortMalloc+0x194>)
 800a470:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a474:	685a      	ldr	r2, [r3, #4]
 800a476:	4b13      	ldr	r3, [pc, #76]	@ (800a4c4 <pvPortMalloc+0x188>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	431a      	orrs	r2, r3
 800a47c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a47e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a482:	2200      	movs	r2, #0
 800a484:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a486:	4b13      	ldr	r3, [pc, #76]	@ (800a4d4 <pvPortMalloc+0x198>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	3301      	adds	r3, #1
 800a48c:	4a11      	ldr	r2, [pc, #68]	@ (800a4d4 <pvPortMalloc+0x198>)
 800a48e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a490:	f7fe fcba 	bl	8008e08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a494:	69fb      	ldr	r3, [r7, #28]
 800a496:	f003 0307 	and.w	r3, r3, #7
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d00b      	beq.n	800a4b6 <pvPortMalloc+0x17a>
	__asm volatile
 800a49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4a2:	f383 8811 	msr	BASEPRI, r3
 800a4a6:	f3bf 8f6f 	isb	sy
 800a4aa:	f3bf 8f4f 	dsb	sy
 800a4ae:	60fb      	str	r3, [r7, #12]
}
 800a4b0:	bf00      	nop
 800a4b2:	bf00      	nop
 800a4b4:	e7fd      	b.n	800a4b2 <pvPortMalloc+0x176>
	return pvReturn;
 800a4b6:	69fb      	ldr	r3, [r7, #28]
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3728      	adds	r7, #40	@ 0x28
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}
 800a4c0:	2000ceec 	.word	0x2000ceec
 800a4c4:	2000cf00 	.word	0x2000cf00
 800a4c8:	2000cef0 	.word	0x2000cef0
 800a4cc:	2000cee4 	.word	0x2000cee4
 800a4d0:	2000cef4 	.word	0x2000cef4
 800a4d4:	2000cef8 	.word	0x2000cef8

0800a4d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b086      	sub	sp, #24
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d04f      	beq.n	800a58a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a4ea:	2308      	movs	r3, #8
 800a4ec:	425b      	negs	r3, r3
 800a4ee:	697a      	ldr	r2, [r7, #20]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	685a      	ldr	r2, [r3, #4]
 800a4fc:	4b25      	ldr	r3, [pc, #148]	@ (800a594 <vPortFree+0xbc>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4013      	ands	r3, r2
 800a502:	2b00      	cmp	r3, #0
 800a504:	d10b      	bne.n	800a51e <vPortFree+0x46>
	__asm volatile
 800a506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a50a:	f383 8811 	msr	BASEPRI, r3
 800a50e:	f3bf 8f6f 	isb	sy
 800a512:	f3bf 8f4f 	dsb	sy
 800a516:	60fb      	str	r3, [r7, #12]
}
 800a518:	bf00      	nop
 800a51a:	bf00      	nop
 800a51c:	e7fd      	b.n	800a51a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d00b      	beq.n	800a53e <vPortFree+0x66>
	__asm volatile
 800a526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a52a:	f383 8811 	msr	BASEPRI, r3
 800a52e:	f3bf 8f6f 	isb	sy
 800a532:	f3bf 8f4f 	dsb	sy
 800a536:	60bb      	str	r3, [r7, #8]
}
 800a538:	bf00      	nop
 800a53a:	bf00      	nop
 800a53c:	e7fd      	b.n	800a53a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	685a      	ldr	r2, [r3, #4]
 800a542:	4b14      	ldr	r3, [pc, #80]	@ (800a594 <vPortFree+0xbc>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4013      	ands	r3, r2
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d01e      	beq.n	800a58a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d11a      	bne.n	800a58a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	685a      	ldr	r2, [r3, #4]
 800a558:	4b0e      	ldr	r3, [pc, #56]	@ (800a594 <vPortFree+0xbc>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	43db      	mvns	r3, r3
 800a55e:	401a      	ands	r2, r3
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a564:	f7fe fc42 	bl	8008dec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	685a      	ldr	r2, [r3, #4]
 800a56c:	4b0a      	ldr	r3, [pc, #40]	@ (800a598 <vPortFree+0xc0>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4413      	add	r3, r2
 800a572:	4a09      	ldr	r2, [pc, #36]	@ (800a598 <vPortFree+0xc0>)
 800a574:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a576:	6938      	ldr	r0, [r7, #16]
 800a578:	f000 f874 	bl	800a664 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a57c:	4b07      	ldr	r3, [pc, #28]	@ (800a59c <vPortFree+0xc4>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	3301      	adds	r3, #1
 800a582:	4a06      	ldr	r2, [pc, #24]	@ (800a59c <vPortFree+0xc4>)
 800a584:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a586:	f7fe fc3f 	bl	8008e08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a58a:	bf00      	nop
 800a58c:	3718      	adds	r7, #24
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}
 800a592:	bf00      	nop
 800a594:	2000cf00 	.word	0x2000cf00
 800a598:	2000cef0 	.word	0x2000cef0
 800a59c:	2000cefc 	.word	0x2000cefc

0800a5a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b085      	sub	sp, #20
 800a5a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a5a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a5aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a5ac:	4b27      	ldr	r3, [pc, #156]	@ (800a64c <prvHeapInit+0xac>)
 800a5ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f003 0307 	and.w	r3, r3, #7
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d00c      	beq.n	800a5d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	3307      	adds	r3, #7
 800a5be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f023 0307 	bic.w	r3, r3, #7
 800a5c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a5c8:	68ba      	ldr	r2, [r7, #8]
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	1ad3      	subs	r3, r2, r3
 800a5ce:	4a1f      	ldr	r2, [pc, #124]	@ (800a64c <prvHeapInit+0xac>)
 800a5d0:	4413      	add	r3, r2
 800a5d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a5d8:	4a1d      	ldr	r2, [pc, #116]	@ (800a650 <prvHeapInit+0xb0>)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a5de:	4b1c      	ldr	r3, [pc, #112]	@ (800a650 <prvHeapInit+0xb0>)
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	68ba      	ldr	r2, [r7, #8]
 800a5e8:	4413      	add	r3, r2
 800a5ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a5ec:	2208      	movs	r2, #8
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	1a9b      	subs	r3, r3, r2
 800a5f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f023 0307 	bic.w	r3, r3, #7
 800a5fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	4a15      	ldr	r2, [pc, #84]	@ (800a654 <prvHeapInit+0xb4>)
 800a600:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a602:	4b14      	ldr	r3, [pc, #80]	@ (800a654 <prvHeapInit+0xb4>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	2200      	movs	r2, #0
 800a608:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a60a:	4b12      	ldr	r3, [pc, #72]	@ (800a654 <prvHeapInit+0xb4>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	2200      	movs	r2, #0
 800a610:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	68fa      	ldr	r2, [r7, #12]
 800a61a:	1ad2      	subs	r2, r2, r3
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a620:	4b0c      	ldr	r3, [pc, #48]	@ (800a654 <prvHeapInit+0xb4>)
 800a622:	681a      	ldr	r2, [r3, #0]
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	4a0a      	ldr	r2, [pc, #40]	@ (800a658 <prvHeapInit+0xb8>)
 800a62e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	4a09      	ldr	r2, [pc, #36]	@ (800a65c <prvHeapInit+0xbc>)
 800a636:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a638:	4b09      	ldr	r3, [pc, #36]	@ (800a660 <prvHeapInit+0xc0>)
 800a63a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a63e:	601a      	str	r2, [r3, #0]
}
 800a640:	bf00      	nop
 800a642:	3714      	adds	r7, #20
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr
 800a64c:	200092e4 	.word	0x200092e4
 800a650:	2000cee4 	.word	0x2000cee4
 800a654:	2000ceec 	.word	0x2000ceec
 800a658:	2000cef4 	.word	0x2000cef4
 800a65c:	2000cef0 	.word	0x2000cef0
 800a660:	2000cf00 	.word	0x2000cf00

0800a664 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a664:	b480      	push	{r7}
 800a666:	b085      	sub	sp, #20
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a66c:	4b28      	ldr	r3, [pc, #160]	@ (800a710 <prvInsertBlockIntoFreeList+0xac>)
 800a66e:	60fb      	str	r3, [r7, #12]
 800a670:	e002      	b.n	800a678 <prvInsertBlockIntoFreeList+0x14>
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	60fb      	str	r3, [r7, #12]
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	687a      	ldr	r2, [r7, #4]
 800a67e:	429a      	cmp	r2, r3
 800a680:	d8f7      	bhi.n	800a672 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	68ba      	ldr	r2, [r7, #8]
 800a68c:	4413      	add	r3, r2
 800a68e:	687a      	ldr	r2, [r7, #4]
 800a690:	429a      	cmp	r2, r3
 800a692:	d108      	bne.n	800a6a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	685a      	ldr	r2, [r3, #4]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	441a      	add	r2, r3
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	68ba      	ldr	r2, [r7, #8]
 800a6b0:	441a      	add	r2, r3
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	d118      	bne.n	800a6ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681a      	ldr	r2, [r3, #0]
 800a6be:	4b15      	ldr	r3, [pc, #84]	@ (800a714 <prvInsertBlockIntoFreeList+0xb0>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	d00d      	beq.n	800a6e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	685a      	ldr	r2, [r3, #4]
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	685b      	ldr	r3, [r3, #4]
 800a6d0:	441a      	add	r2, r3
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	681a      	ldr	r2, [r3, #0]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	601a      	str	r2, [r3, #0]
 800a6e0:	e008      	b.n	800a6f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a6e2:	4b0c      	ldr	r3, [pc, #48]	@ (800a714 <prvInsertBlockIntoFreeList+0xb0>)
 800a6e4:	681a      	ldr	r2, [r3, #0]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	601a      	str	r2, [r3, #0]
 800a6ea:	e003      	b.n	800a6f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681a      	ldr	r2, [r3, #0]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a6f4:	68fa      	ldr	r2, [r7, #12]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d002      	beq.n	800a702 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	687a      	ldr	r2, [r7, #4]
 800a700:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a702:	bf00      	nop
 800a704:	3714      	adds	r7, #20
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr
 800a70e:	bf00      	nop
 800a710:	2000cee4 	.word	0x2000cee4
 800a714:	2000ceec 	.word	0x2000ceec

0800a718 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a718:	4b04      	ldr	r3, [pc, #16]	@ (800a72c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800a71a:	681a      	ldr	r2, [r3, #0]
 800a71c:	b10a      	cbz	r2, 800a722 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800a71e:	4803      	ldr	r0, [pc, #12]	@ (800a72c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800a720:	4770      	bx	lr
 800a722:	4a03      	ldr	r2, [pc, #12]	@ (800a730 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800a724:	4801      	ldr	r0, [pc, #4]	@ (800a72c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800a726:	6812      	ldr	r2, [r2, #0]
 800a728:	601a      	str	r2, [r3, #0]
 800a72a:	4770      	bx	lr
 800a72c:	20000034 	.word	0x20000034
 800a730:	20000320 	.word	0x20000320

0800a734 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a734:	4a02      	ldr	r2, [pc, #8]	@ (800a740 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800a736:	4b03      	ldr	r3, [pc, #12]	@ (800a744 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800a738:	6812      	ldr	r2, [r2, #0]
 800a73a:	601a      	str	r2, [r3, #0]
 800a73c:	4770      	bx	lr
 800a73e:	bf00      	nop
 800a740:	20000320 	.word	0x20000320
 800a744:	20000034 	.word	0x20000034

0800a748 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800a748:	f005 bf3c 	b.w	80105c4 <geometry_msgs__msg__Twist__init>

0800a74c <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800a74c:	f005 bf5e 	b.w	801060c <geometry_msgs__msg__Twist__fini>

0800a750 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a750:	b510      	push	{r4, lr}
 800a752:	f000 f819 	bl	800a788 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a756:	4c07      	ldr	r4, [pc, #28]	@ (800a774 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800a758:	60e0      	str	r0, [r4, #12]
 800a75a:	f000 f815 	bl	800a788 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a75e:	4b06      	ldr	r3, [pc, #24]	@ (800a778 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800a760:	64a0      	str	r0, [r4, #72]	@ 0x48
 800a762:	681a      	ldr	r2, [r3, #0]
 800a764:	b10a      	cbz	r2, 800a76a <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800a766:	4804      	ldr	r0, [pc, #16]	@ (800a778 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800a768:	bd10      	pop	{r4, pc}
 800a76a:	4a04      	ldr	r2, [pc, #16]	@ (800a77c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800a76c:	4802      	ldr	r0, [pc, #8]	@ (800a778 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800a76e:	6812      	ldr	r2, [r2, #0]
 800a770:	601a      	str	r2, [r3, #0]
 800a772:	bd10      	pop	{r4, pc}
 800a774:	20000040 	.word	0x20000040
 800a778:	200000b8 	.word	0x200000b8
 800a77c:	20000324 	.word	0x20000324

0800a780 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800a780:	f005 bf50 	b.w	8010624 <geometry_msgs__msg__Vector3__init>

0800a784 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800a784:	f005 bf52 	b.w	801062c <geometry_msgs__msg__Vector3__fini>

0800a788 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800a788:	4b04      	ldr	r3, [pc, #16]	@ (800a79c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800a78a:	681a      	ldr	r2, [r3, #0]
 800a78c:	b10a      	cbz	r2, 800a792 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800a78e:	4803      	ldr	r0, [pc, #12]	@ (800a79c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800a790:	4770      	bx	lr
 800a792:	4a03      	ldr	r2, [pc, #12]	@ (800a7a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800a794:	4801      	ldr	r0, [pc, #4]	@ (800a79c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800a796:	6812      	ldr	r2, [r2, #0]
 800a798:	601a      	str	r2, [r3, #0]
 800a79a:	4770      	bx	lr
 800a79c:	20000178 	.word	0x20000178
 800a7a0:	20000324 	.word	0x20000324

0800a7a4 <get_serialized_size_geometry_msgs__msg__Twist>:
 800a7a4:	b570      	push	{r4, r5, r6, lr}
 800a7a6:	4604      	mov	r4, r0
 800a7a8:	b148      	cbz	r0, 800a7be <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800a7aa:	460d      	mov	r5, r1
 800a7ac:	f000 f86e 	bl	800a88c <get_serialized_size_geometry_msgs__msg__Vector3>
 800a7b0:	4606      	mov	r6, r0
 800a7b2:	1829      	adds	r1, r5, r0
 800a7b4:	f104 0018 	add.w	r0, r4, #24
 800a7b8:	f000 f868 	bl	800a88c <get_serialized_size_geometry_msgs__msg__Vector3>
 800a7bc:	4430      	add	r0, r6
 800a7be:	bd70      	pop	{r4, r5, r6, pc}

0800a7c0 <_Twist__cdr_deserialize>:
 800a7c0:	b570      	push	{r4, r5, r6, lr}
 800a7c2:	460c      	mov	r4, r1
 800a7c4:	b189      	cbz	r1, 800a7ea <_Twist__cdr_deserialize+0x2a>
 800a7c6:	4605      	mov	r5, r0
 800a7c8:	f000 f8ec 	bl	800a9a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a7cc:	6843      	ldr	r3, [r0, #4]
 800a7ce:	4621      	mov	r1, r4
 800a7d0:	68db      	ldr	r3, [r3, #12]
 800a7d2:	4628      	mov	r0, r5
 800a7d4:	4798      	blx	r3
 800a7d6:	f000 f8e5 	bl	800a9a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a7da:	6843      	ldr	r3, [r0, #4]
 800a7dc:	f104 0118 	add.w	r1, r4, #24
 800a7e0:	4628      	mov	r0, r5
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a7e8:	4718      	bx	r3
 800a7ea:	4608      	mov	r0, r1
 800a7ec:	bd70      	pop	{r4, r5, r6, pc}
 800a7ee:	bf00      	nop

0800a7f0 <_Twist__cdr_serialize>:
 800a7f0:	b510      	push	{r4, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	9101      	str	r1, [sp, #4]
 800a7f6:	b190      	cbz	r0, 800a81e <_Twist__cdr_serialize+0x2e>
 800a7f8:	4604      	mov	r4, r0
 800a7fa:	f000 f8d3 	bl	800a9a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a7fe:	6843      	ldr	r3, [r0, #4]
 800a800:	9901      	ldr	r1, [sp, #4]
 800a802:	689b      	ldr	r3, [r3, #8]
 800a804:	4620      	mov	r0, r4
 800a806:	4798      	blx	r3
 800a808:	f000 f8cc 	bl	800a9a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a80c:	6843      	ldr	r3, [r0, #4]
 800a80e:	9901      	ldr	r1, [sp, #4]
 800a810:	689b      	ldr	r3, [r3, #8]
 800a812:	f104 0018 	add.w	r0, r4, #24
 800a816:	b002      	add	sp, #8
 800a818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a81c:	4718      	bx	r3
 800a81e:	b002      	add	sp, #8
 800a820:	bd10      	pop	{r4, pc}
 800a822:	bf00      	nop

0800a824 <_Twist__get_serialized_size>:
 800a824:	b538      	push	{r3, r4, r5, lr}
 800a826:	4604      	mov	r4, r0
 800a828:	b148      	cbz	r0, 800a83e <_Twist__get_serialized_size+0x1a>
 800a82a:	2100      	movs	r1, #0
 800a82c:	f000 f82e 	bl	800a88c <get_serialized_size_geometry_msgs__msg__Vector3>
 800a830:	4605      	mov	r5, r0
 800a832:	4601      	mov	r1, r0
 800a834:	f104 0018 	add.w	r0, r4, #24
 800a838:	f000 f828 	bl	800a88c <get_serialized_size_geometry_msgs__msg__Vector3>
 800a83c:	4428      	add	r0, r5
 800a83e:	bd38      	pop	{r3, r4, r5, pc}

0800a840 <_Twist__max_serialized_size>:
 800a840:	b510      	push	{r4, lr}
 800a842:	b082      	sub	sp, #8
 800a844:	2301      	movs	r3, #1
 800a846:	2100      	movs	r1, #0
 800a848:	f10d 0007 	add.w	r0, sp, #7
 800a84c:	f88d 3007 	strb.w	r3, [sp, #7]
 800a850:	f000 f88c 	bl	800a96c <max_serialized_size_geometry_msgs__msg__Vector3>
 800a854:	4604      	mov	r4, r0
 800a856:	4601      	mov	r1, r0
 800a858:	f10d 0007 	add.w	r0, sp, #7
 800a85c:	f000 f886 	bl	800a96c <max_serialized_size_geometry_msgs__msg__Vector3>
 800a860:	4420      	add	r0, r4
 800a862:	b002      	add	sp, #8
 800a864:	bd10      	pop	{r4, pc}
 800a866:	bf00      	nop

0800a868 <max_serialized_size_geometry_msgs__msg__Twist>:
 800a868:	2301      	movs	r3, #1
 800a86a:	b570      	push	{r4, r5, r6, lr}
 800a86c:	7003      	strb	r3, [r0, #0]
 800a86e:	4605      	mov	r5, r0
 800a870:	460e      	mov	r6, r1
 800a872:	f000 f87b 	bl	800a96c <max_serialized_size_geometry_msgs__msg__Vector3>
 800a876:	4604      	mov	r4, r0
 800a878:	1831      	adds	r1, r6, r0
 800a87a:	4628      	mov	r0, r5
 800a87c:	f000 f876 	bl	800a96c <max_serialized_size_geometry_msgs__msg__Vector3>
 800a880:	4420      	add	r0, r4
 800a882:	bd70      	pop	{r4, r5, r6, pc}

0800a884 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a884:	4800      	ldr	r0, [pc, #0]	@ (800a888 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800a886:	4770      	bx	lr
 800a888:	20000184 	.word	0x20000184

0800a88c <get_serialized_size_geometry_msgs__msg__Vector3>:
 800a88c:	b1b8      	cbz	r0, 800a8be <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800a88e:	b538      	push	{r3, r4, r5, lr}
 800a890:	460d      	mov	r5, r1
 800a892:	4628      	mov	r0, r5
 800a894:	2108      	movs	r1, #8
 800a896:	f001 fb9d 	bl	800bfd4 <ucdr_alignment>
 800a89a:	f105 0308 	add.w	r3, r5, #8
 800a89e:	181c      	adds	r4, r3, r0
 800a8a0:	2108      	movs	r1, #8
 800a8a2:	4620      	mov	r0, r4
 800a8a4:	f001 fb96 	bl	800bfd4 <ucdr_alignment>
 800a8a8:	3008      	adds	r0, #8
 800a8aa:	4404      	add	r4, r0
 800a8ac:	2108      	movs	r1, #8
 800a8ae:	4620      	mov	r0, r4
 800a8b0:	f001 fb90 	bl	800bfd4 <ucdr_alignment>
 800a8b4:	f1c5 0508 	rsb	r5, r5, #8
 800a8b8:	4428      	add	r0, r5
 800a8ba:	4420      	add	r0, r4
 800a8bc:	bd38      	pop	{r3, r4, r5, pc}
 800a8be:	4770      	bx	lr

0800a8c0 <_Vector3__cdr_deserialize>:
 800a8c0:	b538      	push	{r3, r4, r5, lr}
 800a8c2:	460c      	mov	r4, r1
 800a8c4:	b171      	cbz	r1, 800a8e4 <_Vector3__cdr_deserialize+0x24>
 800a8c6:	4605      	mov	r5, r0
 800a8c8:	f001 f998 	bl	800bbfc <ucdr_deserialize_double>
 800a8cc:	f104 0108 	add.w	r1, r4, #8
 800a8d0:	4628      	mov	r0, r5
 800a8d2:	f001 f993 	bl	800bbfc <ucdr_deserialize_double>
 800a8d6:	f104 0110 	add.w	r1, r4, #16
 800a8da:	4628      	mov	r0, r5
 800a8dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8e0:	f001 b98c 	b.w	800bbfc <ucdr_deserialize_double>
 800a8e4:	4608      	mov	r0, r1
 800a8e6:	bd38      	pop	{r3, r4, r5, pc}

0800a8e8 <_Vector3__cdr_serialize>:
 800a8e8:	b198      	cbz	r0, 800a912 <_Vector3__cdr_serialize+0x2a>
 800a8ea:	b538      	push	{r3, r4, r5, lr}
 800a8ec:	ed90 0b00 	vldr	d0, [r0]
 800a8f0:	460d      	mov	r5, r1
 800a8f2:	4604      	mov	r4, r0
 800a8f4:	4608      	mov	r0, r1
 800a8f6:	f000 ffdf 	bl	800b8b8 <ucdr_serialize_double>
 800a8fa:	ed94 0b02 	vldr	d0, [r4, #8]
 800a8fe:	4628      	mov	r0, r5
 800a900:	f000 ffda 	bl	800b8b8 <ucdr_serialize_double>
 800a904:	ed94 0b04 	vldr	d0, [r4, #16]
 800a908:	4628      	mov	r0, r5
 800a90a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a90e:	f000 bfd3 	b.w	800b8b8 <ucdr_serialize_double>
 800a912:	4770      	bx	lr

0800a914 <_Vector3__get_serialized_size>:
 800a914:	b198      	cbz	r0, 800a93e <_Vector3__get_serialized_size+0x2a>
 800a916:	b510      	push	{r4, lr}
 800a918:	2108      	movs	r1, #8
 800a91a:	2000      	movs	r0, #0
 800a91c:	f001 fb5a 	bl	800bfd4 <ucdr_alignment>
 800a920:	f100 0408 	add.w	r4, r0, #8
 800a924:	2108      	movs	r1, #8
 800a926:	4620      	mov	r0, r4
 800a928:	f001 fb54 	bl	800bfd4 <ucdr_alignment>
 800a92c:	3008      	adds	r0, #8
 800a92e:	4404      	add	r4, r0
 800a930:	2108      	movs	r1, #8
 800a932:	4620      	mov	r0, r4
 800a934:	f001 fb4e 	bl	800bfd4 <ucdr_alignment>
 800a938:	3008      	adds	r0, #8
 800a93a:	4420      	add	r0, r4
 800a93c:	bd10      	pop	{r4, pc}
 800a93e:	4770      	bx	lr

0800a940 <_Vector3__max_serialized_size>:
 800a940:	b538      	push	{r3, r4, r5, lr}
 800a942:	2108      	movs	r1, #8
 800a944:	2000      	movs	r0, #0
 800a946:	f001 fb45 	bl	800bfd4 <ucdr_alignment>
 800a94a:	f100 0508 	add.w	r5, r0, #8
 800a94e:	2108      	movs	r1, #8
 800a950:	4628      	mov	r0, r5
 800a952:	f001 fb3f 	bl	800bfd4 <ucdr_alignment>
 800a956:	f100 0408 	add.w	r4, r0, #8
 800a95a:	442c      	add	r4, r5
 800a95c:	2108      	movs	r1, #8
 800a95e:	4620      	mov	r0, r4
 800a960:	f001 fb38 	bl	800bfd4 <ucdr_alignment>
 800a964:	3008      	adds	r0, #8
 800a966:	4420      	add	r0, r4
 800a968:	bd38      	pop	{r3, r4, r5, pc}
 800a96a:	bf00      	nop

0800a96c <max_serialized_size_geometry_msgs__msg__Vector3>:
 800a96c:	b570      	push	{r4, r5, r6, lr}
 800a96e:	2301      	movs	r3, #1
 800a970:	460c      	mov	r4, r1
 800a972:	7003      	strb	r3, [r0, #0]
 800a974:	2108      	movs	r1, #8
 800a976:	4620      	mov	r0, r4
 800a978:	f001 fb2c 	bl	800bfd4 <ucdr_alignment>
 800a97c:	f104 0508 	add.w	r5, r4, #8
 800a980:	1946      	adds	r6, r0, r5
 800a982:	2108      	movs	r1, #8
 800a984:	4630      	mov	r0, r6
 800a986:	f001 fb25 	bl	800bfd4 <ucdr_alignment>
 800a98a:	f100 0508 	add.w	r5, r0, #8
 800a98e:	4435      	add	r5, r6
 800a990:	2108      	movs	r1, #8
 800a992:	4628      	mov	r0, r5
 800a994:	f001 fb1e 	bl	800bfd4 <ucdr_alignment>
 800a998:	f1c4 0408 	rsb	r4, r4, #8
 800a99c:	4420      	add	r0, r4
 800a99e:	4428      	add	r0, r5
 800a9a0:	bd70      	pop	{r4, r5, r6, pc}
 800a9a2:	bf00      	nop

0800a9a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800a9a4:	4800      	ldr	r0, [pc, #0]	@ (800a9a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800a9a6:	4770      	bx	lr
 800a9a8:	200001ac 	.word	0x200001ac

0800a9ac <ucdr_serialize_bool>:
 800a9ac:	b538      	push	{r3, r4, r5, lr}
 800a9ae:	460d      	mov	r5, r1
 800a9b0:	2101      	movs	r1, #1
 800a9b2:	4604      	mov	r4, r0
 800a9b4:	f001 fac2 	bl	800bf3c <ucdr_check_final_buffer_behavior>
 800a9b8:	b148      	cbz	r0, 800a9ce <ucdr_serialize_bool+0x22>
 800a9ba:	68a3      	ldr	r3, [r4, #8]
 800a9bc:	701d      	strb	r5, [r3, #0]
 800a9be:	68a2      	ldr	r2, [r4, #8]
 800a9c0:	6923      	ldr	r3, [r4, #16]
 800a9c2:	2101      	movs	r1, #1
 800a9c4:	440a      	add	r2, r1
 800a9c6:	440b      	add	r3, r1
 800a9c8:	60a2      	str	r2, [r4, #8]
 800a9ca:	6123      	str	r3, [r4, #16]
 800a9cc:	7561      	strb	r1, [r4, #21]
 800a9ce:	7da0      	ldrb	r0, [r4, #22]
 800a9d0:	f080 0001 	eor.w	r0, r0, #1
 800a9d4:	bd38      	pop	{r3, r4, r5, pc}
 800a9d6:	bf00      	nop

0800a9d8 <ucdr_deserialize_bool>:
 800a9d8:	b538      	push	{r3, r4, r5, lr}
 800a9da:	460d      	mov	r5, r1
 800a9dc:	2101      	movs	r1, #1
 800a9de:	4604      	mov	r4, r0
 800a9e0:	f001 faac 	bl	800bf3c <ucdr_check_final_buffer_behavior>
 800a9e4:	b160      	cbz	r0, 800aa00 <ucdr_deserialize_bool+0x28>
 800a9e6:	68a2      	ldr	r2, [r4, #8]
 800a9e8:	6923      	ldr	r3, [r4, #16]
 800a9ea:	f812 1b01 	ldrb.w	r1, [r2], #1
 800a9ee:	3900      	subs	r1, #0
 800a9f0:	bf18      	it	ne
 800a9f2:	2101      	movne	r1, #1
 800a9f4:	7029      	strb	r1, [r5, #0]
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	2101      	movs	r1, #1
 800a9fa:	60a2      	str	r2, [r4, #8]
 800a9fc:	6123      	str	r3, [r4, #16]
 800a9fe:	7561      	strb	r1, [r4, #21]
 800aa00:	7da0      	ldrb	r0, [r4, #22]
 800aa02:	f080 0001 	eor.w	r0, r0, #1
 800aa06:	bd38      	pop	{r3, r4, r5, pc}

0800aa08 <ucdr_serialize_uint8_t>:
 800aa08:	b538      	push	{r3, r4, r5, lr}
 800aa0a:	460d      	mov	r5, r1
 800aa0c:	2101      	movs	r1, #1
 800aa0e:	4604      	mov	r4, r0
 800aa10:	f001 fa94 	bl	800bf3c <ucdr_check_final_buffer_behavior>
 800aa14:	b148      	cbz	r0, 800aa2a <ucdr_serialize_uint8_t+0x22>
 800aa16:	68a3      	ldr	r3, [r4, #8]
 800aa18:	701d      	strb	r5, [r3, #0]
 800aa1a:	68a2      	ldr	r2, [r4, #8]
 800aa1c:	6923      	ldr	r3, [r4, #16]
 800aa1e:	2101      	movs	r1, #1
 800aa20:	440a      	add	r2, r1
 800aa22:	440b      	add	r3, r1
 800aa24:	60a2      	str	r2, [r4, #8]
 800aa26:	6123      	str	r3, [r4, #16]
 800aa28:	7561      	strb	r1, [r4, #21]
 800aa2a:	7da0      	ldrb	r0, [r4, #22]
 800aa2c:	f080 0001 	eor.w	r0, r0, #1
 800aa30:	bd38      	pop	{r3, r4, r5, pc}
 800aa32:	bf00      	nop

0800aa34 <ucdr_deserialize_uint8_t>:
 800aa34:	b538      	push	{r3, r4, r5, lr}
 800aa36:	460d      	mov	r5, r1
 800aa38:	2101      	movs	r1, #1
 800aa3a:	4604      	mov	r4, r0
 800aa3c:	f001 fa7e 	bl	800bf3c <ucdr_check_final_buffer_behavior>
 800aa40:	b150      	cbz	r0, 800aa58 <ucdr_deserialize_uint8_t+0x24>
 800aa42:	68a3      	ldr	r3, [r4, #8]
 800aa44:	781b      	ldrb	r3, [r3, #0]
 800aa46:	702b      	strb	r3, [r5, #0]
 800aa48:	68a2      	ldr	r2, [r4, #8]
 800aa4a:	6923      	ldr	r3, [r4, #16]
 800aa4c:	2101      	movs	r1, #1
 800aa4e:	440a      	add	r2, r1
 800aa50:	440b      	add	r3, r1
 800aa52:	60a2      	str	r2, [r4, #8]
 800aa54:	6123      	str	r3, [r4, #16]
 800aa56:	7561      	strb	r1, [r4, #21]
 800aa58:	7da0      	ldrb	r0, [r4, #22]
 800aa5a:	f080 0001 	eor.w	r0, r0, #1
 800aa5e:	bd38      	pop	{r3, r4, r5, pc}

0800aa60 <ucdr_serialize_uint16_t>:
 800aa60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa64:	b082      	sub	sp, #8
 800aa66:	460b      	mov	r3, r1
 800aa68:	2102      	movs	r1, #2
 800aa6a:	4604      	mov	r4, r0
 800aa6c:	f8ad 3006 	strh.w	r3, [sp, #6]
 800aa70:	f001 fab8 	bl	800bfe4 <ucdr_buffer_alignment>
 800aa74:	4601      	mov	r1, r0
 800aa76:	4620      	mov	r0, r4
 800aa78:	7d67      	ldrb	r7, [r4, #21]
 800aa7a:	f001 faf7 	bl	800c06c <ucdr_advance_buffer>
 800aa7e:	2102      	movs	r1, #2
 800aa80:	4620      	mov	r0, r4
 800aa82:	f001 fa4f 	bl	800bf24 <ucdr_check_buffer_available_for>
 800aa86:	bb78      	cbnz	r0, 800aae8 <ucdr_serialize_uint16_t+0x88>
 800aa88:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800aa8c:	42ab      	cmp	r3, r5
 800aa8e:	d926      	bls.n	800aade <ucdr_serialize_uint16_t+0x7e>
 800aa90:	1b5e      	subs	r6, r3, r5
 800aa92:	60a3      	str	r3, [r4, #8]
 800aa94:	6923      	ldr	r3, [r4, #16]
 800aa96:	f1c6 0802 	rsb	r8, r6, #2
 800aa9a:	4433      	add	r3, r6
 800aa9c:	6123      	str	r3, [r4, #16]
 800aa9e:	4641      	mov	r1, r8
 800aaa0:	4620      	mov	r0, r4
 800aaa2:	f001 fa4b 	bl	800bf3c <ucdr_check_final_buffer_behavior>
 800aaa6:	2800      	cmp	r0, #0
 800aaa8:	d03b      	beq.n	800ab22 <ucdr_serialize_uint16_t+0xc2>
 800aaaa:	7d23      	ldrb	r3, [r4, #20]
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	d04a      	beq.n	800ab46 <ucdr_serialize_uint16_t+0xe6>
 800aab0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800aab4:	702b      	strb	r3, [r5, #0]
 800aab6:	2e00      	cmp	r6, #0
 800aab8:	d040      	beq.n	800ab3c <ucdr_serialize_uint16_t+0xdc>
 800aaba:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800aabe:	706b      	strb	r3, [r5, #1]
 800aac0:	6923      	ldr	r3, [r4, #16]
 800aac2:	68a2      	ldr	r2, [r4, #8]
 800aac4:	7da0      	ldrb	r0, [r4, #22]
 800aac6:	3302      	adds	r3, #2
 800aac8:	1b9e      	subs	r6, r3, r6
 800aaca:	4442      	add	r2, r8
 800aacc:	2302      	movs	r3, #2
 800aace:	f080 0001 	eor.w	r0, r0, #1
 800aad2:	60a2      	str	r2, [r4, #8]
 800aad4:	6126      	str	r6, [r4, #16]
 800aad6:	7563      	strb	r3, [r4, #21]
 800aad8:	b002      	add	sp, #8
 800aada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aade:	2102      	movs	r1, #2
 800aae0:	4620      	mov	r0, r4
 800aae2:	f001 fa2b 	bl	800bf3c <ucdr_check_final_buffer_behavior>
 800aae6:	b190      	cbz	r0, 800ab0e <ucdr_serialize_uint16_t+0xae>
 800aae8:	7d23      	ldrb	r3, [r4, #20]
 800aaea:	2b01      	cmp	r3, #1
 800aaec:	68a3      	ldr	r3, [r4, #8]
 800aaee:	d014      	beq.n	800ab1a <ucdr_serialize_uint16_t+0xba>
 800aaf0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800aaf4:	701a      	strb	r2, [r3, #0]
 800aaf6:	68a3      	ldr	r3, [r4, #8]
 800aaf8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800aafc:	705a      	strb	r2, [r3, #1]
 800aafe:	68a2      	ldr	r2, [r4, #8]
 800ab00:	6923      	ldr	r3, [r4, #16]
 800ab02:	3202      	adds	r2, #2
 800ab04:	3302      	adds	r3, #2
 800ab06:	2102      	movs	r1, #2
 800ab08:	60a2      	str	r2, [r4, #8]
 800ab0a:	6123      	str	r3, [r4, #16]
 800ab0c:	7561      	strb	r1, [r4, #21]
 800ab0e:	7da0      	ldrb	r0, [r4, #22]
 800ab10:	f080 0001 	eor.w	r0, r0, #1
 800ab14:	b002      	add	sp, #8
 800ab16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab1a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ab1e:	801a      	strh	r2, [r3, #0]
 800ab20:	e7ed      	b.n	800aafe <ucdr_serialize_uint16_t+0x9e>
 800ab22:	68a2      	ldr	r2, [r4, #8]
 800ab24:	6923      	ldr	r3, [r4, #16]
 800ab26:	7da0      	ldrb	r0, [r4, #22]
 800ab28:	7567      	strb	r7, [r4, #21]
 800ab2a:	1b92      	subs	r2, r2, r6
 800ab2c:	1b9b      	subs	r3, r3, r6
 800ab2e:	f080 0001 	eor.w	r0, r0, #1
 800ab32:	60a2      	str	r2, [r4, #8]
 800ab34:	6123      	str	r3, [r4, #16]
 800ab36:	b002      	add	sp, #8
 800ab38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab3c:	68a3      	ldr	r3, [r4, #8]
 800ab3e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ab42:	701a      	strb	r2, [r3, #0]
 800ab44:	e7bc      	b.n	800aac0 <ucdr_serialize_uint16_t+0x60>
 800ab46:	4628      	mov	r0, r5
 800ab48:	f10d 0506 	add.w	r5, sp, #6
 800ab4c:	4629      	mov	r1, r5
 800ab4e:	4632      	mov	r2, r6
 800ab50:	f00f f8cf 	bl	8019cf2 <memcpy>
 800ab54:	68a0      	ldr	r0, [r4, #8]
 800ab56:	4642      	mov	r2, r8
 800ab58:	19a9      	adds	r1, r5, r6
 800ab5a:	f00f f8ca 	bl	8019cf2 <memcpy>
 800ab5e:	e7af      	b.n	800aac0 <ucdr_serialize_uint16_t+0x60>

0800ab60 <ucdr_serialize_endian_uint16_t>:
 800ab60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ab64:	b083      	sub	sp, #12
 800ab66:	460d      	mov	r5, r1
 800ab68:	2102      	movs	r1, #2
 800ab6a:	4604      	mov	r4, r0
 800ab6c:	f8ad 2006 	strh.w	r2, [sp, #6]
 800ab70:	f001 fa38 	bl	800bfe4 <ucdr_buffer_alignment>
 800ab74:	4601      	mov	r1, r0
 800ab76:	4620      	mov	r0, r4
 800ab78:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ab7c:	f001 fa76 	bl	800c06c <ucdr_advance_buffer>
 800ab80:	2102      	movs	r1, #2
 800ab82:	4620      	mov	r0, r4
 800ab84:	f001 f9ce 	bl	800bf24 <ucdr_check_buffer_available_for>
 800ab88:	bb70      	cbnz	r0, 800abe8 <ucdr_serialize_endian_uint16_t+0x88>
 800ab8a:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ab8e:	42be      	cmp	r6, r7
 800ab90:	d925      	bls.n	800abde <ucdr_serialize_endian_uint16_t+0x7e>
 800ab92:	6923      	ldr	r3, [r4, #16]
 800ab94:	60a6      	str	r6, [r4, #8]
 800ab96:	1bf6      	subs	r6, r6, r7
 800ab98:	4433      	add	r3, r6
 800ab9a:	f1c6 0902 	rsb	r9, r6, #2
 800ab9e:	6123      	str	r3, [r4, #16]
 800aba0:	4649      	mov	r1, r9
 800aba2:	4620      	mov	r0, r4
 800aba4:	f001 f9ca 	bl	800bf3c <ucdr_check_final_buffer_behavior>
 800aba8:	2800      	cmp	r0, #0
 800abaa:	d039      	beq.n	800ac20 <ucdr_serialize_endian_uint16_t+0xc0>
 800abac:	2d01      	cmp	r5, #1
 800abae:	d04a      	beq.n	800ac46 <ucdr_serialize_endian_uint16_t+0xe6>
 800abb0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800abb4:	703b      	strb	r3, [r7, #0]
 800abb6:	2e00      	cmp	r6, #0
 800abb8:	d040      	beq.n	800ac3c <ucdr_serialize_endian_uint16_t+0xdc>
 800abba:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800abbe:	707b      	strb	r3, [r7, #1]
 800abc0:	6923      	ldr	r3, [r4, #16]
 800abc2:	68a2      	ldr	r2, [r4, #8]
 800abc4:	7da0      	ldrb	r0, [r4, #22]
 800abc6:	3302      	adds	r3, #2
 800abc8:	444a      	add	r2, r9
 800abca:	1b9b      	subs	r3, r3, r6
 800abcc:	2102      	movs	r1, #2
 800abce:	f080 0001 	eor.w	r0, r0, #1
 800abd2:	60a2      	str	r2, [r4, #8]
 800abd4:	6123      	str	r3, [r4, #16]
 800abd6:	7561      	strb	r1, [r4, #21]
 800abd8:	b003      	add	sp, #12
 800abda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800abde:	2102      	movs	r1, #2
 800abe0:	4620      	mov	r0, r4
 800abe2:	f001 f9ab 	bl	800bf3c <ucdr_check_final_buffer_behavior>
 800abe6:	b188      	cbz	r0, 800ac0c <ucdr_serialize_endian_uint16_t+0xac>
 800abe8:	2d01      	cmp	r5, #1
 800abea:	68a3      	ldr	r3, [r4, #8]
 800abec:	d014      	beq.n	800ac18 <ucdr_serialize_endian_uint16_t+0xb8>
 800abee:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800abf2:	701a      	strb	r2, [r3, #0]
 800abf4:	68a3      	ldr	r3, [r4, #8]
 800abf6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800abfa:	705a      	strb	r2, [r3, #1]
 800abfc:	68a2      	ldr	r2, [r4, #8]
 800abfe:	6923      	ldr	r3, [r4, #16]
 800ac00:	3202      	adds	r2, #2
 800ac02:	3302      	adds	r3, #2
 800ac04:	2102      	movs	r1, #2
 800ac06:	60a2      	str	r2, [r4, #8]
 800ac08:	6123      	str	r3, [r4, #16]
 800ac0a:	7561      	strb	r1, [r4, #21]
 800ac0c:	7da0      	ldrb	r0, [r4, #22]
 800ac0e:	f080 0001 	eor.w	r0, r0, #1
 800ac12:	b003      	add	sp, #12
 800ac14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac18:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ac1c:	801a      	strh	r2, [r3, #0]
 800ac1e:	e7ed      	b.n	800abfc <ucdr_serialize_endian_uint16_t+0x9c>
 800ac20:	68a2      	ldr	r2, [r4, #8]
 800ac22:	6923      	ldr	r3, [r4, #16]
 800ac24:	7da0      	ldrb	r0, [r4, #22]
 800ac26:	f884 8015 	strb.w	r8, [r4, #21]
 800ac2a:	1b92      	subs	r2, r2, r6
 800ac2c:	1b9b      	subs	r3, r3, r6
 800ac2e:	f080 0001 	eor.w	r0, r0, #1
 800ac32:	60a2      	str	r2, [r4, #8]
 800ac34:	6123      	str	r3, [r4, #16]
 800ac36:	b003      	add	sp, #12
 800ac38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac3c:	68a3      	ldr	r3, [r4, #8]
 800ac3e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ac42:	701a      	strb	r2, [r3, #0]
 800ac44:	e7bc      	b.n	800abc0 <ucdr_serialize_endian_uint16_t+0x60>
 800ac46:	f10d 0506 	add.w	r5, sp, #6
 800ac4a:	4629      	mov	r1, r5
 800ac4c:	4632      	mov	r2, r6
 800ac4e:	4638      	mov	r0, r7
 800ac50:	f00f f84f 	bl	8019cf2 <memcpy>
 800ac54:	68a0      	ldr	r0, [r4, #8]
 800ac56:	464a      	mov	r2, r9
 800ac58:	19a9      	adds	r1, r5, r6
 800ac5a:	f00f f84a 	bl	8019cf2 <memcpy>
 800ac5e:	e7af      	b.n	800abc0 <ucdr_serialize_endian_uint16_t+0x60>

0800ac60 <ucdr_deserialize_uint16_t>:
 800ac60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac64:	460d      	mov	r5, r1
 800ac66:	2102      	movs	r1, #2
 800ac68:	4604      	mov	r4, r0
 800ac6a:	f001 f9bb 	bl	800bfe4 <ucdr_buffer_alignment>
 800ac6e:	4601      	mov	r1, r0
 800ac70:	4620      	mov	r0, r4
 800ac72:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ac76:	f001 f9f9 	bl	800c06c <ucdr_advance_buffer>
 800ac7a:	2102      	movs	r1, #2
 800ac7c:	4620      	mov	r0, r4
 800ac7e:	f001 f951 	bl	800bf24 <ucdr_check_buffer_available_for>
 800ac82:	bb60      	cbnz	r0, 800acde <ucdr_deserialize_uint16_t+0x7e>
 800ac84:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ac88:	42be      	cmp	r6, r7
 800ac8a:	d923      	bls.n	800acd4 <ucdr_deserialize_uint16_t+0x74>
 800ac8c:	6923      	ldr	r3, [r4, #16]
 800ac8e:	60a6      	str	r6, [r4, #8]
 800ac90:	1bf6      	subs	r6, r6, r7
 800ac92:	4433      	add	r3, r6
 800ac94:	f1c6 0902 	rsb	r9, r6, #2
 800ac98:	6123      	str	r3, [r4, #16]
 800ac9a:	4649      	mov	r1, r9
 800ac9c:	4620      	mov	r0, r4
 800ac9e:	f001 f94d 	bl	800bf3c <ucdr_check_final_buffer_behavior>
 800aca2:	2800      	cmp	r0, #0
 800aca4:	d034      	beq.n	800ad10 <ucdr_deserialize_uint16_t+0xb0>
 800aca6:	7d23      	ldrb	r3, [r4, #20]
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	d042      	beq.n	800ad32 <ucdr_deserialize_uint16_t+0xd2>
 800acac:	787b      	ldrb	r3, [r7, #1]
 800acae:	702b      	strb	r3, [r5, #0]
 800acb0:	2e00      	cmp	r6, #0
 800acb2:	d03a      	beq.n	800ad2a <ucdr_deserialize_uint16_t+0xca>
 800acb4:	783b      	ldrb	r3, [r7, #0]
 800acb6:	706b      	strb	r3, [r5, #1]
 800acb8:	6923      	ldr	r3, [r4, #16]
 800acba:	68a2      	ldr	r2, [r4, #8]
 800acbc:	7da0      	ldrb	r0, [r4, #22]
 800acbe:	2102      	movs	r1, #2
 800acc0:	3302      	adds	r3, #2
 800acc2:	444a      	add	r2, r9
 800acc4:	1b9b      	subs	r3, r3, r6
 800acc6:	7561      	strb	r1, [r4, #21]
 800acc8:	60a2      	str	r2, [r4, #8]
 800acca:	6123      	str	r3, [r4, #16]
 800accc:	f080 0001 	eor.w	r0, r0, #1
 800acd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acd4:	2102      	movs	r1, #2
 800acd6:	4620      	mov	r0, r4
 800acd8:	f001 f930 	bl	800bf3c <ucdr_check_final_buffer_behavior>
 800acdc:	b180      	cbz	r0, 800ad00 <ucdr_deserialize_uint16_t+0xa0>
 800acde:	7d23      	ldrb	r3, [r4, #20]
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	68a3      	ldr	r3, [r4, #8]
 800ace4:	d011      	beq.n	800ad0a <ucdr_deserialize_uint16_t+0xaa>
 800ace6:	785b      	ldrb	r3, [r3, #1]
 800ace8:	702b      	strb	r3, [r5, #0]
 800acea:	68a3      	ldr	r3, [r4, #8]
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	706b      	strb	r3, [r5, #1]
 800acf0:	68a2      	ldr	r2, [r4, #8]
 800acf2:	6923      	ldr	r3, [r4, #16]
 800acf4:	3202      	adds	r2, #2
 800acf6:	3302      	adds	r3, #2
 800acf8:	2102      	movs	r1, #2
 800acfa:	60a2      	str	r2, [r4, #8]
 800acfc:	6123      	str	r3, [r4, #16]
 800acfe:	7561      	strb	r1, [r4, #21]
 800ad00:	7da0      	ldrb	r0, [r4, #22]
 800ad02:	f080 0001 	eor.w	r0, r0, #1
 800ad06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad0a:	881b      	ldrh	r3, [r3, #0]
 800ad0c:	802b      	strh	r3, [r5, #0]
 800ad0e:	e7ef      	b.n	800acf0 <ucdr_deserialize_uint16_t+0x90>
 800ad10:	68a2      	ldr	r2, [r4, #8]
 800ad12:	6923      	ldr	r3, [r4, #16]
 800ad14:	7da0      	ldrb	r0, [r4, #22]
 800ad16:	f884 8015 	strb.w	r8, [r4, #21]
 800ad1a:	1b92      	subs	r2, r2, r6
 800ad1c:	1b9b      	subs	r3, r3, r6
 800ad1e:	60a2      	str	r2, [r4, #8]
 800ad20:	6123      	str	r3, [r4, #16]
 800ad22:	f080 0001 	eor.w	r0, r0, #1
 800ad26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad2a:	68a3      	ldr	r3, [r4, #8]
 800ad2c:	781b      	ldrb	r3, [r3, #0]
 800ad2e:	706b      	strb	r3, [r5, #1]
 800ad30:	e7c2      	b.n	800acb8 <ucdr_deserialize_uint16_t+0x58>
 800ad32:	4639      	mov	r1, r7
 800ad34:	4632      	mov	r2, r6
 800ad36:	4628      	mov	r0, r5
 800ad38:	f00e ffdb 	bl	8019cf2 <memcpy>
 800ad3c:	68a1      	ldr	r1, [r4, #8]
 800ad3e:	464a      	mov	r2, r9
 800ad40:	19a8      	adds	r0, r5, r6
 800ad42:	f00e ffd6 	bl	8019cf2 <memcpy>
 800ad46:	e7b7      	b.n	800acb8 <ucdr_deserialize_uint16_t+0x58>

0800ad48 <ucdr_deserialize_endian_uint16_t>:
 800ad48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad4c:	460e      	mov	r6, r1
 800ad4e:	2102      	movs	r1, #2
 800ad50:	4604      	mov	r4, r0
 800ad52:	4615      	mov	r5, r2
 800ad54:	f001 f946 	bl	800bfe4 <ucdr_buffer_alignment>
 800ad58:	4601      	mov	r1, r0
 800ad5a:	4620      	mov	r0, r4
 800ad5c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ad60:	f001 f984 	bl	800c06c <ucdr_advance_buffer>
 800ad64:	2102      	movs	r1, #2
 800ad66:	4620      	mov	r0, r4
 800ad68:	f001 f8dc 	bl	800bf24 <ucdr_check_buffer_available_for>
 800ad6c:	bb70      	cbnz	r0, 800adcc <ucdr_deserialize_endian_uint16_t+0x84>
 800ad6e:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800ad72:	4547      	cmp	r7, r8
 800ad74:	d925      	bls.n	800adc2 <ucdr_deserialize_endian_uint16_t+0x7a>
 800ad76:	6923      	ldr	r3, [r4, #16]
 800ad78:	60a7      	str	r7, [r4, #8]
 800ad7a:	eba7 0708 	sub.w	r7, r7, r8
 800ad7e:	443b      	add	r3, r7
 800ad80:	f1c7 0a02 	rsb	sl, r7, #2
 800ad84:	6123      	str	r3, [r4, #16]
 800ad86:	4651      	mov	r1, sl
 800ad88:	4620      	mov	r0, r4
 800ad8a:	f001 f8d7 	bl	800bf3c <ucdr_check_final_buffer_behavior>
 800ad8e:	2800      	cmp	r0, #0
 800ad90:	d034      	beq.n	800adfc <ucdr_deserialize_endian_uint16_t+0xb4>
 800ad92:	2e01      	cmp	r6, #1
 800ad94:	d043      	beq.n	800ae1e <ucdr_deserialize_endian_uint16_t+0xd6>
 800ad96:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ad9a:	702b      	strb	r3, [r5, #0]
 800ad9c:	2f00      	cmp	r7, #0
 800ad9e:	d03a      	beq.n	800ae16 <ucdr_deserialize_endian_uint16_t+0xce>
 800ada0:	f898 3000 	ldrb.w	r3, [r8]
 800ada4:	706b      	strb	r3, [r5, #1]
 800ada6:	6923      	ldr	r3, [r4, #16]
 800ada8:	68a2      	ldr	r2, [r4, #8]
 800adaa:	7da0      	ldrb	r0, [r4, #22]
 800adac:	2102      	movs	r1, #2
 800adae:	3302      	adds	r3, #2
 800adb0:	4452      	add	r2, sl
 800adb2:	1bdb      	subs	r3, r3, r7
 800adb4:	7561      	strb	r1, [r4, #21]
 800adb6:	60a2      	str	r2, [r4, #8]
 800adb8:	6123      	str	r3, [r4, #16]
 800adba:	f080 0001 	eor.w	r0, r0, #1
 800adbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adc2:	2102      	movs	r1, #2
 800adc4:	4620      	mov	r0, r4
 800adc6:	f001 f8b9 	bl	800bf3c <ucdr_check_final_buffer_behavior>
 800adca:	b178      	cbz	r0, 800adec <ucdr_deserialize_endian_uint16_t+0xa4>
 800adcc:	2e01      	cmp	r6, #1
 800adce:	68a3      	ldr	r3, [r4, #8]
 800add0:	d011      	beq.n	800adf6 <ucdr_deserialize_endian_uint16_t+0xae>
 800add2:	785b      	ldrb	r3, [r3, #1]
 800add4:	702b      	strb	r3, [r5, #0]
 800add6:	68a3      	ldr	r3, [r4, #8]
 800add8:	781b      	ldrb	r3, [r3, #0]
 800adda:	706b      	strb	r3, [r5, #1]
 800addc:	68a2      	ldr	r2, [r4, #8]
 800adde:	6923      	ldr	r3, [r4, #16]
 800ade0:	3202      	adds	r2, #2
 800ade2:	3302      	adds	r3, #2
 800ade4:	2102      	movs	r1, #2
 800ade6:	60a2      	str	r2, [r4, #8]
 800ade8:	6123      	str	r3, [r4, #16]
 800adea:	7561      	strb	r1, [r4, #21]
 800adec:	7da0      	ldrb	r0, [r4, #22]
 800adee:	f080 0001 	eor.w	r0, r0, #1
 800adf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adf6:	881b      	ldrh	r3, [r3, #0]
 800adf8:	802b      	strh	r3, [r5, #0]
 800adfa:	e7ef      	b.n	800addc <ucdr_deserialize_endian_uint16_t+0x94>
 800adfc:	68a2      	ldr	r2, [r4, #8]
 800adfe:	6923      	ldr	r3, [r4, #16]
 800ae00:	7da0      	ldrb	r0, [r4, #22]
 800ae02:	f884 9015 	strb.w	r9, [r4, #21]
 800ae06:	1bd2      	subs	r2, r2, r7
 800ae08:	1bdb      	subs	r3, r3, r7
 800ae0a:	60a2      	str	r2, [r4, #8]
 800ae0c:	6123      	str	r3, [r4, #16]
 800ae0e:	f080 0001 	eor.w	r0, r0, #1
 800ae12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae16:	68a3      	ldr	r3, [r4, #8]
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	706b      	strb	r3, [r5, #1]
 800ae1c:	e7c3      	b.n	800ada6 <ucdr_deserialize_endian_uint16_t+0x5e>
 800ae1e:	4641      	mov	r1, r8
 800ae20:	463a      	mov	r2, r7
 800ae22:	4628      	mov	r0, r5
 800ae24:	f00e ff65 	bl	8019cf2 <memcpy>
 800ae28:	68a1      	ldr	r1, [r4, #8]
 800ae2a:	4652      	mov	r2, sl
 800ae2c:	19e8      	adds	r0, r5, r7
 800ae2e:	f00e ff60 	bl	8019cf2 <memcpy>
 800ae32:	e7b8      	b.n	800ada6 <ucdr_deserialize_endian_uint16_t+0x5e>

0800ae34 <ucdr_serialize_uint32_t>:
 800ae34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae38:	b082      	sub	sp, #8
 800ae3a:	4604      	mov	r4, r0
 800ae3c:	9101      	str	r1, [sp, #4]
 800ae3e:	2104      	movs	r1, #4
 800ae40:	f001 f8d0 	bl	800bfe4 <ucdr_buffer_alignment>
 800ae44:	4601      	mov	r1, r0
 800ae46:	4620      	mov	r0, r4
 800ae48:	7d67      	ldrb	r7, [r4, #21]
 800ae4a:	f001 f90f 	bl	800c06c <ucdr_advance_buffer>
 800ae4e:	2104      	movs	r1, #4
 800ae50:	4620      	mov	r0, r4
 800ae52:	f001 f867 	bl	800bf24 <ucdr_check_buffer_available_for>
 800ae56:	2800      	cmp	r0, #0
 800ae58:	d139      	bne.n	800aece <ucdr_serialize_uint32_t+0x9a>
 800ae5a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ae5e:	42ab      	cmp	r3, r5
 800ae60:	d930      	bls.n	800aec4 <ucdr_serialize_uint32_t+0x90>
 800ae62:	1b5e      	subs	r6, r3, r5
 800ae64:	60a3      	str	r3, [r4, #8]
 800ae66:	6923      	ldr	r3, [r4, #16]
 800ae68:	f1c6 0804 	rsb	r8, r6, #4
 800ae6c:	4433      	add	r3, r6
 800ae6e:	6123      	str	r3, [r4, #16]
 800ae70:	4641      	mov	r1, r8
 800ae72:	4620      	mov	r0, r4
 800ae74:	f001 f862 	bl	800bf3c <ucdr_check_final_buffer_behavior>
 800ae78:	2800      	cmp	r0, #0
 800ae7a:	d04c      	beq.n	800af16 <ucdr_serialize_uint32_t+0xe2>
 800ae7c:	7d23      	ldrb	r3, [r4, #20]
 800ae7e:	2b01      	cmp	r3, #1
 800ae80:	d063      	beq.n	800af4a <ucdr_serialize_uint32_t+0x116>
 800ae82:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ae86:	702b      	strb	r3, [r5, #0]
 800ae88:	2e00      	cmp	r6, #0
 800ae8a:	d051      	beq.n	800af30 <ucdr_serialize_uint32_t+0xfc>
 800ae8c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ae90:	706b      	strb	r3, [r5, #1]
 800ae92:	2e01      	cmp	r6, #1
 800ae94:	d050      	beq.n	800af38 <ucdr_serialize_uint32_t+0x104>
 800ae96:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ae9a:	70ab      	strb	r3, [r5, #2]
 800ae9c:	2e02      	cmp	r6, #2
 800ae9e:	d04f      	beq.n	800af40 <ucdr_serialize_uint32_t+0x10c>
 800aea0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800aea4:	70eb      	strb	r3, [r5, #3]
 800aea6:	6923      	ldr	r3, [r4, #16]
 800aea8:	68a2      	ldr	r2, [r4, #8]
 800aeaa:	7da0      	ldrb	r0, [r4, #22]
 800aeac:	3304      	adds	r3, #4
 800aeae:	1b9e      	subs	r6, r3, r6
 800aeb0:	4442      	add	r2, r8
 800aeb2:	2304      	movs	r3, #4
 800aeb4:	f080 0001 	eor.w	r0, r0, #1
 800aeb8:	60a2      	str	r2, [r4, #8]
 800aeba:	6126      	str	r6, [r4, #16]
 800aebc:	7563      	strb	r3, [r4, #21]
 800aebe:	b002      	add	sp, #8
 800aec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aec4:	2104      	movs	r1, #4
 800aec6:	4620      	mov	r0, r4
 800aec8:	f001 f838 	bl	800bf3c <ucdr_check_final_buffer_behavior>
 800aecc:	b1d0      	cbz	r0, 800af04 <ucdr_serialize_uint32_t+0xd0>
 800aece:	7d23      	ldrb	r3, [r4, #20]
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	68a3      	ldr	r3, [r4, #8]
 800aed4:	d01c      	beq.n	800af10 <ucdr_serialize_uint32_t+0xdc>
 800aed6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800aeda:	701a      	strb	r2, [r3, #0]
 800aedc:	68a3      	ldr	r3, [r4, #8]
 800aede:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800aee2:	705a      	strb	r2, [r3, #1]
 800aee4:	68a3      	ldr	r3, [r4, #8]
 800aee6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800aeea:	709a      	strb	r2, [r3, #2]
 800aeec:	68a3      	ldr	r3, [r4, #8]
 800aeee:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800aef2:	70da      	strb	r2, [r3, #3]
 800aef4:	68a2      	ldr	r2, [r4, #8]
 800aef6:	6923      	ldr	r3, [r4, #16]
 800aef8:	3204      	adds	r2, #4
 800aefa:	3304      	adds	r3, #4
 800aefc:	2104      	movs	r1, #4
 800aefe:	60a2      	str	r2, [r4, #8]
 800af00:	6123      	str	r3, [r4, #16]
 800af02:	7561      	strb	r1, [r4, #21]
 800af04:	7da0      	ldrb	r0, [r4, #22]
 800af06:	f080 0001 	eor.w	r0, r0, #1
 800af0a:	b002      	add	sp, #8
 800af0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af10:	9a01      	ldr	r2, [sp, #4]
 800af12:	601a      	str	r2, [r3, #0]
 800af14:	e7ee      	b.n	800aef4 <ucdr_serialize_uint32_t+0xc0>
 800af16:	68a2      	ldr	r2, [r4, #8]
 800af18:	6923      	ldr	r3, [r4, #16]
 800af1a:	7da0      	ldrb	r0, [r4, #22]
 800af1c:	7567      	strb	r7, [r4, #21]
 800af1e:	1b92      	subs	r2, r2, r6
 800af20:	1b9b      	subs	r3, r3, r6
 800af22:	f080 0001 	eor.w	r0, r0, #1
 800af26:	60a2      	str	r2, [r4, #8]
 800af28:	6123      	str	r3, [r4, #16]
 800af2a:	b002      	add	sp, #8
 800af2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af30:	68a3      	ldr	r3, [r4, #8]
 800af32:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800af36:	701a      	strb	r2, [r3, #0]
 800af38:	68a3      	ldr	r3, [r4, #8]
 800af3a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800af3e:	701a      	strb	r2, [r3, #0]
 800af40:	68a3      	ldr	r3, [r4, #8]
 800af42:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800af46:	701a      	strb	r2, [r3, #0]
 800af48:	e7ad      	b.n	800aea6 <ucdr_serialize_uint32_t+0x72>
 800af4a:	4628      	mov	r0, r5
 800af4c:	ad01      	add	r5, sp, #4
 800af4e:	4629      	mov	r1, r5
 800af50:	4632      	mov	r2, r6
 800af52:	f00e fece 	bl	8019cf2 <memcpy>
 800af56:	68a0      	ldr	r0, [r4, #8]
 800af58:	4642      	mov	r2, r8
 800af5a:	19a9      	adds	r1, r5, r6
 800af5c:	f00e fec9 	bl	8019cf2 <memcpy>
 800af60:	e7a1      	b.n	800aea6 <ucdr_serialize_uint32_t+0x72>
 800af62:	bf00      	nop

0800af64 <ucdr_serialize_endian_uint32_t>:
 800af64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800af68:	b083      	sub	sp, #12
 800af6a:	460d      	mov	r5, r1
 800af6c:	2104      	movs	r1, #4
 800af6e:	4604      	mov	r4, r0
 800af70:	9201      	str	r2, [sp, #4]
 800af72:	f001 f837 	bl	800bfe4 <ucdr_buffer_alignment>
 800af76:	4601      	mov	r1, r0
 800af78:	4620      	mov	r0, r4
 800af7a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800af7e:	f001 f875 	bl	800c06c <ucdr_advance_buffer>
 800af82:	2104      	movs	r1, #4
 800af84:	4620      	mov	r0, r4
 800af86:	f000 ffcd 	bl	800bf24 <ucdr_check_buffer_available_for>
 800af8a:	2800      	cmp	r0, #0
 800af8c:	d138      	bne.n	800b000 <ucdr_serialize_endian_uint32_t+0x9c>
 800af8e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800af92:	42b7      	cmp	r7, r6
 800af94:	d92f      	bls.n	800aff6 <ucdr_serialize_endian_uint32_t+0x92>
 800af96:	6923      	ldr	r3, [r4, #16]
 800af98:	60a7      	str	r7, [r4, #8]
 800af9a:	1bbf      	subs	r7, r7, r6
 800af9c:	443b      	add	r3, r7
 800af9e:	f1c7 0904 	rsb	r9, r7, #4
 800afa2:	6123      	str	r3, [r4, #16]
 800afa4:	4649      	mov	r1, r9
 800afa6:	4620      	mov	r0, r4
 800afa8:	f000 ffc8 	bl	800bf3c <ucdr_check_final_buffer_behavior>
 800afac:	2800      	cmp	r0, #0
 800afae:	d04a      	beq.n	800b046 <ucdr_serialize_endian_uint32_t+0xe2>
 800afb0:	2d01      	cmp	r5, #1
 800afb2:	d063      	beq.n	800b07c <ucdr_serialize_endian_uint32_t+0x118>
 800afb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800afb8:	7033      	strb	r3, [r6, #0]
 800afba:	2f00      	cmp	r7, #0
 800afbc:	d051      	beq.n	800b062 <ucdr_serialize_endian_uint32_t+0xfe>
 800afbe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800afc2:	7073      	strb	r3, [r6, #1]
 800afc4:	2f01      	cmp	r7, #1
 800afc6:	d050      	beq.n	800b06a <ucdr_serialize_endian_uint32_t+0x106>
 800afc8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800afcc:	70b3      	strb	r3, [r6, #2]
 800afce:	2f02      	cmp	r7, #2
 800afd0:	d04f      	beq.n	800b072 <ucdr_serialize_endian_uint32_t+0x10e>
 800afd2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800afd6:	70f3      	strb	r3, [r6, #3]
 800afd8:	6923      	ldr	r3, [r4, #16]
 800afda:	68a2      	ldr	r2, [r4, #8]
 800afdc:	7da0      	ldrb	r0, [r4, #22]
 800afde:	3304      	adds	r3, #4
 800afe0:	444a      	add	r2, r9
 800afe2:	1bdb      	subs	r3, r3, r7
 800afe4:	2104      	movs	r1, #4
 800afe6:	f080 0001 	eor.w	r0, r0, #1
 800afea:	60a2      	str	r2, [r4, #8]
 800afec:	6123      	str	r3, [r4, #16]
 800afee:	7561      	strb	r1, [r4, #21]
 800aff0:	b003      	add	sp, #12
 800aff2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aff6:	2104      	movs	r1, #4
 800aff8:	4620      	mov	r0, r4
 800affa:	f000 ff9f 	bl	800bf3c <ucdr_check_final_buffer_behavior>
 800affe:	b1c8      	cbz	r0, 800b034 <ucdr_serialize_endian_uint32_t+0xd0>
 800b000:	2d01      	cmp	r5, #1
 800b002:	68a3      	ldr	r3, [r4, #8]
 800b004:	d01c      	beq.n	800b040 <ucdr_serialize_endian_uint32_t+0xdc>
 800b006:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b00a:	701a      	strb	r2, [r3, #0]
 800b00c:	68a3      	ldr	r3, [r4, #8]
 800b00e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b012:	705a      	strb	r2, [r3, #1]
 800b014:	68a3      	ldr	r3, [r4, #8]
 800b016:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b01a:	709a      	strb	r2, [r3, #2]
 800b01c:	68a3      	ldr	r3, [r4, #8]
 800b01e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b022:	70da      	strb	r2, [r3, #3]
 800b024:	68a2      	ldr	r2, [r4, #8]
 800b026:	6923      	ldr	r3, [r4, #16]
 800b028:	3204      	adds	r2, #4
 800b02a:	3304      	adds	r3, #4
 800b02c:	2104      	movs	r1, #4
 800b02e:	60a2      	str	r2, [r4, #8]
 800b030:	6123      	str	r3, [r4, #16]
 800b032:	7561      	strb	r1, [r4, #21]
 800b034:	7da0      	ldrb	r0, [r4, #22]
 800b036:	f080 0001 	eor.w	r0, r0, #1
 800b03a:	b003      	add	sp, #12
 800b03c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b040:	9a01      	ldr	r2, [sp, #4]
 800b042:	601a      	str	r2, [r3, #0]
 800b044:	e7ee      	b.n	800b024 <ucdr_serialize_endian_uint32_t+0xc0>
 800b046:	68a2      	ldr	r2, [r4, #8]
 800b048:	6923      	ldr	r3, [r4, #16]
 800b04a:	7da0      	ldrb	r0, [r4, #22]
 800b04c:	f884 8015 	strb.w	r8, [r4, #21]
 800b050:	1bd2      	subs	r2, r2, r7
 800b052:	1bdb      	subs	r3, r3, r7
 800b054:	f080 0001 	eor.w	r0, r0, #1
 800b058:	60a2      	str	r2, [r4, #8]
 800b05a:	6123      	str	r3, [r4, #16]
 800b05c:	b003      	add	sp, #12
 800b05e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b062:	68a3      	ldr	r3, [r4, #8]
 800b064:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b068:	701a      	strb	r2, [r3, #0]
 800b06a:	68a3      	ldr	r3, [r4, #8]
 800b06c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b070:	701a      	strb	r2, [r3, #0]
 800b072:	68a3      	ldr	r3, [r4, #8]
 800b074:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b078:	701a      	strb	r2, [r3, #0]
 800b07a:	e7ad      	b.n	800afd8 <ucdr_serialize_endian_uint32_t+0x74>
 800b07c:	ad01      	add	r5, sp, #4
 800b07e:	4629      	mov	r1, r5
 800b080:	463a      	mov	r2, r7
 800b082:	4630      	mov	r0, r6
 800b084:	f00e fe35 	bl	8019cf2 <memcpy>
 800b088:	68a0      	ldr	r0, [r4, #8]
 800b08a:	464a      	mov	r2, r9
 800b08c:	19e9      	adds	r1, r5, r7
 800b08e:	f00e fe30 	bl	8019cf2 <memcpy>
 800b092:	e7a1      	b.n	800afd8 <ucdr_serialize_endian_uint32_t+0x74>

0800b094 <ucdr_deserialize_uint32_t>:
 800b094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b098:	460d      	mov	r5, r1
 800b09a:	2104      	movs	r1, #4
 800b09c:	4604      	mov	r4, r0
 800b09e:	f000 ffa1 	bl	800bfe4 <ucdr_buffer_alignment>
 800b0a2:	4601      	mov	r1, r0
 800b0a4:	4620      	mov	r0, r4
 800b0a6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b0aa:	f000 ffdf 	bl	800c06c <ucdr_advance_buffer>
 800b0ae:	2104      	movs	r1, #4
 800b0b0:	4620      	mov	r0, r4
 800b0b2:	f000 ff37 	bl	800bf24 <ucdr_check_buffer_available_for>
 800b0b6:	2800      	cmp	r0, #0
 800b0b8:	d138      	bne.n	800b12c <ucdr_deserialize_uint32_t+0x98>
 800b0ba:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b0be:	42b7      	cmp	r7, r6
 800b0c0:	d92f      	bls.n	800b122 <ucdr_deserialize_uint32_t+0x8e>
 800b0c2:	6923      	ldr	r3, [r4, #16]
 800b0c4:	60a7      	str	r7, [r4, #8]
 800b0c6:	1bbf      	subs	r7, r7, r6
 800b0c8:	443b      	add	r3, r7
 800b0ca:	f1c7 0904 	rsb	r9, r7, #4
 800b0ce:	6123      	str	r3, [r4, #16]
 800b0d0:	4649      	mov	r1, r9
 800b0d2:	4620      	mov	r0, r4
 800b0d4:	f000 ff32 	bl	800bf3c <ucdr_check_final_buffer_behavior>
 800b0d8:	2800      	cmp	r0, #0
 800b0da:	d046      	beq.n	800b16a <ucdr_deserialize_uint32_t+0xd6>
 800b0dc:	7d23      	ldrb	r3, [r4, #20]
 800b0de:	2b01      	cmp	r3, #1
 800b0e0:	d05c      	beq.n	800b19c <ucdr_deserialize_uint32_t+0x108>
 800b0e2:	78f3      	ldrb	r3, [r6, #3]
 800b0e4:	702b      	strb	r3, [r5, #0]
 800b0e6:	2f00      	cmp	r7, #0
 800b0e8:	d04c      	beq.n	800b184 <ucdr_deserialize_uint32_t+0xf0>
 800b0ea:	78b3      	ldrb	r3, [r6, #2]
 800b0ec:	706b      	strb	r3, [r5, #1]
 800b0ee:	2f01      	cmp	r7, #1
 800b0f0:	f105 0302 	add.w	r3, r5, #2
 800b0f4:	d04a      	beq.n	800b18c <ucdr_deserialize_uint32_t+0xf8>
 800b0f6:	7873      	ldrb	r3, [r6, #1]
 800b0f8:	70ab      	strb	r3, [r5, #2]
 800b0fa:	2f02      	cmp	r7, #2
 800b0fc:	f105 0303 	add.w	r3, r5, #3
 800b100:	d048      	beq.n	800b194 <ucdr_deserialize_uint32_t+0x100>
 800b102:	7833      	ldrb	r3, [r6, #0]
 800b104:	70eb      	strb	r3, [r5, #3]
 800b106:	6923      	ldr	r3, [r4, #16]
 800b108:	68a2      	ldr	r2, [r4, #8]
 800b10a:	7da0      	ldrb	r0, [r4, #22]
 800b10c:	2104      	movs	r1, #4
 800b10e:	3304      	adds	r3, #4
 800b110:	444a      	add	r2, r9
 800b112:	1bdb      	subs	r3, r3, r7
 800b114:	7561      	strb	r1, [r4, #21]
 800b116:	60a2      	str	r2, [r4, #8]
 800b118:	6123      	str	r3, [r4, #16]
 800b11a:	f080 0001 	eor.w	r0, r0, #1
 800b11e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b122:	2104      	movs	r1, #4
 800b124:	4620      	mov	r0, r4
 800b126:	f000 ff09 	bl	800bf3c <ucdr_check_final_buffer_behavior>
 800b12a:	b1b0      	cbz	r0, 800b15a <ucdr_deserialize_uint32_t+0xc6>
 800b12c:	7d23      	ldrb	r3, [r4, #20]
 800b12e:	2b01      	cmp	r3, #1
 800b130:	68a3      	ldr	r3, [r4, #8]
 800b132:	d017      	beq.n	800b164 <ucdr_deserialize_uint32_t+0xd0>
 800b134:	78db      	ldrb	r3, [r3, #3]
 800b136:	702b      	strb	r3, [r5, #0]
 800b138:	68a3      	ldr	r3, [r4, #8]
 800b13a:	789b      	ldrb	r3, [r3, #2]
 800b13c:	706b      	strb	r3, [r5, #1]
 800b13e:	68a3      	ldr	r3, [r4, #8]
 800b140:	785b      	ldrb	r3, [r3, #1]
 800b142:	70ab      	strb	r3, [r5, #2]
 800b144:	68a3      	ldr	r3, [r4, #8]
 800b146:	781b      	ldrb	r3, [r3, #0]
 800b148:	70eb      	strb	r3, [r5, #3]
 800b14a:	68a2      	ldr	r2, [r4, #8]
 800b14c:	6923      	ldr	r3, [r4, #16]
 800b14e:	3204      	adds	r2, #4
 800b150:	3304      	adds	r3, #4
 800b152:	2104      	movs	r1, #4
 800b154:	60a2      	str	r2, [r4, #8]
 800b156:	6123      	str	r3, [r4, #16]
 800b158:	7561      	strb	r1, [r4, #21]
 800b15a:	7da0      	ldrb	r0, [r4, #22]
 800b15c:	f080 0001 	eor.w	r0, r0, #1
 800b160:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	602b      	str	r3, [r5, #0]
 800b168:	e7ef      	b.n	800b14a <ucdr_deserialize_uint32_t+0xb6>
 800b16a:	68a2      	ldr	r2, [r4, #8]
 800b16c:	6923      	ldr	r3, [r4, #16]
 800b16e:	7da0      	ldrb	r0, [r4, #22]
 800b170:	f884 8015 	strb.w	r8, [r4, #21]
 800b174:	1bd2      	subs	r2, r2, r7
 800b176:	1bdb      	subs	r3, r3, r7
 800b178:	60a2      	str	r2, [r4, #8]
 800b17a:	6123      	str	r3, [r4, #16]
 800b17c:	f080 0001 	eor.w	r0, r0, #1
 800b180:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b184:	68a3      	ldr	r3, [r4, #8]
 800b186:	789b      	ldrb	r3, [r3, #2]
 800b188:	706b      	strb	r3, [r5, #1]
 800b18a:	1cab      	adds	r3, r5, #2
 800b18c:	68a2      	ldr	r2, [r4, #8]
 800b18e:	7852      	ldrb	r2, [r2, #1]
 800b190:	f803 2b01 	strb.w	r2, [r3], #1
 800b194:	68a2      	ldr	r2, [r4, #8]
 800b196:	7812      	ldrb	r2, [r2, #0]
 800b198:	701a      	strb	r2, [r3, #0]
 800b19a:	e7b4      	b.n	800b106 <ucdr_deserialize_uint32_t+0x72>
 800b19c:	4631      	mov	r1, r6
 800b19e:	463a      	mov	r2, r7
 800b1a0:	4628      	mov	r0, r5
 800b1a2:	f00e fda6 	bl	8019cf2 <memcpy>
 800b1a6:	68a1      	ldr	r1, [r4, #8]
 800b1a8:	464a      	mov	r2, r9
 800b1aa:	19e8      	adds	r0, r5, r7
 800b1ac:	f00e fda1 	bl	8019cf2 <memcpy>
 800b1b0:	e7a9      	b.n	800b106 <ucdr_deserialize_uint32_t+0x72>
 800b1b2:	bf00      	nop

0800b1b4 <ucdr_deserialize_endian_uint32_t>:
 800b1b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1b8:	460e      	mov	r6, r1
 800b1ba:	2104      	movs	r1, #4
 800b1bc:	4604      	mov	r4, r0
 800b1be:	4615      	mov	r5, r2
 800b1c0:	f000 ff10 	bl	800bfe4 <ucdr_buffer_alignment>
 800b1c4:	4601      	mov	r1, r0
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b1cc:	f000 ff4e 	bl	800c06c <ucdr_advance_buffer>
 800b1d0:	2104      	movs	r1, #4
 800b1d2:	4620      	mov	r0, r4
 800b1d4:	f000 fea6 	bl	800bf24 <ucdr_check_buffer_available_for>
 800b1d8:	2800      	cmp	r0, #0
 800b1da:	d13c      	bne.n	800b256 <ucdr_deserialize_endian_uint32_t+0xa2>
 800b1dc:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800b1e0:	42bb      	cmp	r3, r7
 800b1e2:	d933      	bls.n	800b24c <ucdr_deserialize_endian_uint32_t+0x98>
 800b1e4:	eba3 0807 	sub.w	r8, r3, r7
 800b1e8:	60a3      	str	r3, [r4, #8]
 800b1ea:	6923      	ldr	r3, [r4, #16]
 800b1ec:	f1c8 0a04 	rsb	sl, r8, #4
 800b1f0:	4443      	add	r3, r8
 800b1f2:	6123      	str	r3, [r4, #16]
 800b1f4:	4651      	mov	r1, sl
 800b1f6:	4620      	mov	r0, r4
 800b1f8:	f000 fea0 	bl	800bf3c <ucdr_check_final_buffer_behavior>
 800b1fc:	2800      	cmp	r0, #0
 800b1fe:	d048      	beq.n	800b292 <ucdr_deserialize_endian_uint32_t+0xde>
 800b200:	2e01      	cmp	r6, #1
 800b202:	d061      	beq.n	800b2c8 <ucdr_deserialize_endian_uint32_t+0x114>
 800b204:	78fb      	ldrb	r3, [r7, #3]
 800b206:	702b      	strb	r3, [r5, #0]
 800b208:	f1b8 0f00 	cmp.w	r8, #0
 800b20c:	d050      	beq.n	800b2b0 <ucdr_deserialize_endian_uint32_t+0xfc>
 800b20e:	78bb      	ldrb	r3, [r7, #2]
 800b210:	706b      	strb	r3, [r5, #1]
 800b212:	f1b8 0f01 	cmp.w	r8, #1
 800b216:	f105 0302 	add.w	r3, r5, #2
 800b21a:	d04d      	beq.n	800b2b8 <ucdr_deserialize_endian_uint32_t+0x104>
 800b21c:	787b      	ldrb	r3, [r7, #1]
 800b21e:	70ab      	strb	r3, [r5, #2]
 800b220:	f1b8 0f02 	cmp.w	r8, #2
 800b224:	f105 0303 	add.w	r3, r5, #3
 800b228:	d04a      	beq.n	800b2c0 <ucdr_deserialize_endian_uint32_t+0x10c>
 800b22a:	783b      	ldrb	r3, [r7, #0]
 800b22c:	70eb      	strb	r3, [r5, #3]
 800b22e:	6923      	ldr	r3, [r4, #16]
 800b230:	68a2      	ldr	r2, [r4, #8]
 800b232:	7da0      	ldrb	r0, [r4, #22]
 800b234:	2104      	movs	r1, #4
 800b236:	3304      	adds	r3, #4
 800b238:	4452      	add	r2, sl
 800b23a:	eba3 0308 	sub.w	r3, r3, r8
 800b23e:	7561      	strb	r1, [r4, #21]
 800b240:	60a2      	str	r2, [r4, #8]
 800b242:	6123      	str	r3, [r4, #16]
 800b244:	f080 0001 	eor.w	r0, r0, #1
 800b248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b24c:	2104      	movs	r1, #4
 800b24e:	4620      	mov	r0, r4
 800b250:	f000 fe74 	bl	800bf3c <ucdr_check_final_buffer_behavior>
 800b254:	b1a8      	cbz	r0, 800b282 <ucdr_deserialize_endian_uint32_t+0xce>
 800b256:	2e01      	cmp	r6, #1
 800b258:	68a3      	ldr	r3, [r4, #8]
 800b25a:	d017      	beq.n	800b28c <ucdr_deserialize_endian_uint32_t+0xd8>
 800b25c:	78db      	ldrb	r3, [r3, #3]
 800b25e:	702b      	strb	r3, [r5, #0]
 800b260:	68a3      	ldr	r3, [r4, #8]
 800b262:	789b      	ldrb	r3, [r3, #2]
 800b264:	706b      	strb	r3, [r5, #1]
 800b266:	68a3      	ldr	r3, [r4, #8]
 800b268:	785b      	ldrb	r3, [r3, #1]
 800b26a:	70ab      	strb	r3, [r5, #2]
 800b26c:	68a3      	ldr	r3, [r4, #8]
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	70eb      	strb	r3, [r5, #3]
 800b272:	68a2      	ldr	r2, [r4, #8]
 800b274:	6923      	ldr	r3, [r4, #16]
 800b276:	3204      	adds	r2, #4
 800b278:	3304      	adds	r3, #4
 800b27a:	2104      	movs	r1, #4
 800b27c:	60a2      	str	r2, [r4, #8]
 800b27e:	6123      	str	r3, [r4, #16]
 800b280:	7561      	strb	r1, [r4, #21]
 800b282:	7da0      	ldrb	r0, [r4, #22]
 800b284:	f080 0001 	eor.w	r0, r0, #1
 800b288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	602b      	str	r3, [r5, #0]
 800b290:	e7ef      	b.n	800b272 <ucdr_deserialize_endian_uint32_t+0xbe>
 800b292:	68a2      	ldr	r2, [r4, #8]
 800b294:	6923      	ldr	r3, [r4, #16]
 800b296:	7da0      	ldrb	r0, [r4, #22]
 800b298:	f884 9015 	strb.w	r9, [r4, #21]
 800b29c:	eba2 0208 	sub.w	r2, r2, r8
 800b2a0:	eba3 0308 	sub.w	r3, r3, r8
 800b2a4:	60a2      	str	r2, [r4, #8]
 800b2a6:	6123      	str	r3, [r4, #16]
 800b2a8:	f080 0001 	eor.w	r0, r0, #1
 800b2ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2b0:	68a3      	ldr	r3, [r4, #8]
 800b2b2:	789b      	ldrb	r3, [r3, #2]
 800b2b4:	706b      	strb	r3, [r5, #1]
 800b2b6:	1cab      	adds	r3, r5, #2
 800b2b8:	68a2      	ldr	r2, [r4, #8]
 800b2ba:	7852      	ldrb	r2, [r2, #1]
 800b2bc:	f803 2b01 	strb.w	r2, [r3], #1
 800b2c0:	68a2      	ldr	r2, [r4, #8]
 800b2c2:	7812      	ldrb	r2, [r2, #0]
 800b2c4:	701a      	strb	r2, [r3, #0]
 800b2c6:	e7b2      	b.n	800b22e <ucdr_deserialize_endian_uint32_t+0x7a>
 800b2c8:	4639      	mov	r1, r7
 800b2ca:	4642      	mov	r2, r8
 800b2cc:	4628      	mov	r0, r5
 800b2ce:	f00e fd10 	bl	8019cf2 <memcpy>
 800b2d2:	68a1      	ldr	r1, [r4, #8]
 800b2d4:	4652      	mov	r2, sl
 800b2d6:	eb05 0008 	add.w	r0, r5, r8
 800b2da:	f00e fd0a 	bl	8019cf2 <memcpy>
 800b2de:	e7a6      	b.n	800b22e <ucdr_deserialize_endian_uint32_t+0x7a>

0800b2e0 <ucdr_serialize_uint64_t>:
 800b2e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2e4:	2108      	movs	r1, #8
 800b2e6:	b082      	sub	sp, #8
 800b2e8:	4604      	mov	r4, r0
 800b2ea:	e9cd 2300 	strd	r2, r3, [sp]
 800b2ee:	f000 fe79 	bl	800bfe4 <ucdr_buffer_alignment>
 800b2f2:	4601      	mov	r1, r0
 800b2f4:	4620      	mov	r0, r4
 800b2f6:	7d67      	ldrb	r7, [r4, #21]
 800b2f8:	f000 feb8 	bl	800c06c <ucdr_advance_buffer>
 800b2fc:	2108      	movs	r1, #8
 800b2fe:	4620      	mov	r0, r4
 800b300:	f000 fe10 	bl	800bf24 <ucdr_check_buffer_available_for>
 800b304:	2800      	cmp	r0, #0
 800b306:	d14e      	bne.n	800b3a6 <ucdr_serialize_uint64_t+0xc6>
 800b308:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b30c:	42ab      	cmp	r3, r5
 800b30e:	d945      	bls.n	800b39c <ucdr_serialize_uint64_t+0xbc>
 800b310:	1b5e      	subs	r6, r3, r5
 800b312:	60a3      	str	r3, [r4, #8]
 800b314:	6923      	ldr	r3, [r4, #16]
 800b316:	f1c6 0808 	rsb	r8, r6, #8
 800b31a:	4433      	add	r3, r6
 800b31c:	6123      	str	r3, [r4, #16]
 800b31e:	4641      	mov	r1, r8
 800b320:	4620      	mov	r0, r4
 800b322:	f000 fe0b 	bl	800bf3c <ucdr_check_final_buffer_behavior>
 800b326:	2800      	cmp	r0, #0
 800b328:	d074      	beq.n	800b414 <ucdr_serialize_uint64_t+0x134>
 800b32a:	7d23      	ldrb	r3, [r4, #20]
 800b32c:	2b01      	cmp	r3, #1
 800b32e:	f000 809b 	beq.w	800b468 <ucdr_serialize_uint64_t+0x188>
 800b332:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b336:	702b      	strb	r3, [r5, #0]
 800b338:	2e00      	cmp	r6, #0
 800b33a:	d078      	beq.n	800b42e <ucdr_serialize_uint64_t+0x14e>
 800b33c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b340:	706b      	strb	r3, [r5, #1]
 800b342:	2e01      	cmp	r6, #1
 800b344:	d077      	beq.n	800b436 <ucdr_serialize_uint64_t+0x156>
 800b346:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b34a:	70ab      	strb	r3, [r5, #2]
 800b34c:	2e02      	cmp	r6, #2
 800b34e:	d076      	beq.n	800b43e <ucdr_serialize_uint64_t+0x15e>
 800b350:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b354:	70eb      	strb	r3, [r5, #3]
 800b356:	2e03      	cmp	r6, #3
 800b358:	d075      	beq.n	800b446 <ucdr_serialize_uint64_t+0x166>
 800b35a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b35e:	712b      	strb	r3, [r5, #4]
 800b360:	2e04      	cmp	r6, #4
 800b362:	d074      	beq.n	800b44e <ucdr_serialize_uint64_t+0x16e>
 800b364:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b368:	716b      	strb	r3, [r5, #5]
 800b36a:	2e05      	cmp	r6, #5
 800b36c:	d073      	beq.n	800b456 <ucdr_serialize_uint64_t+0x176>
 800b36e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b372:	71ab      	strb	r3, [r5, #6]
 800b374:	2e06      	cmp	r6, #6
 800b376:	d072      	beq.n	800b45e <ucdr_serialize_uint64_t+0x17e>
 800b378:	f89d 3000 	ldrb.w	r3, [sp]
 800b37c:	71eb      	strb	r3, [r5, #7]
 800b37e:	6923      	ldr	r3, [r4, #16]
 800b380:	68a2      	ldr	r2, [r4, #8]
 800b382:	7da0      	ldrb	r0, [r4, #22]
 800b384:	3308      	adds	r3, #8
 800b386:	1b9e      	subs	r6, r3, r6
 800b388:	4442      	add	r2, r8
 800b38a:	2308      	movs	r3, #8
 800b38c:	f080 0001 	eor.w	r0, r0, #1
 800b390:	60a2      	str	r2, [r4, #8]
 800b392:	6126      	str	r6, [r4, #16]
 800b394:	7563      	strb	r3, [r4, #21]
 800b396:	b002      	add	sp, #8
 800b398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b39c:	2108      	movs	r1, #8
 800b39e:	4620      	mov	r0, r4
 800b3a0:	f000 fdcc 	bl	800bf3c <ucdr_check_final_buffer_behavior>
 800b3a4:	b350      	cbz	r0, 800b3fc <ucdr_serialize_uint64_t+0x11c>
 800b3a6:	7d23      	ldrb	r3, [r4, #20]
 800b3a8:	2b01      	cmp	r3, #1
 800b3aa:	d02d      	beq.n	800b408 <ucdr_serialize_uint64_t+0x128>
 800b3ac:	68a3      	ldr	r3, [r4, #8]
 800b3ae:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b3b2:	701a      	strb	r2, [r3, #0]
 800b3b4:	68a3      	ldr	r3, [r4, #8]
 800b3b6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b3ba:	705a      	strb	r2, [r3, #1]
 800b3bc:	68a3      	ldr	r3, [r4, #8]
 800b3be:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b3c2:	709a      	strb	r2, [r3, #2]
 800b3c4:	68a3      	ldr	r3, [r4, #8]
 800b3c6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b3ca:	70da      	strb	r2, [r3, #3]
 800b3cc:	68a3      	ldr	r3, [r4, #8]
 800b3ce:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b3d2:	711a      	strb	r2, [r3, #4]
 800b3d4:	68a3      	ldr	r3, [r4, #8]
 800b3d6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b3da:	715a      	strb	r2, [r3, #5]
 800b3dc:	68a3      	ldr	r3, [r4, #8]
 800b3de:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b3e2:	719a      	strb	r2, [r3, #6]
 800b3e4:	68a3      	ldr	r3, [r4, #8]
 800b3e6:	f89d 2000 	ldrb.w	r2, [sp]
 800b3ea:	71da      	strb	r2, [r3, #7]
 800b3ec:	68a2      	ldr	r2, [r4, #8]
 800b3ee:	6923      	ldr	r3, [r4, #16]
 800b3f0:	3208      	adds	r2, #8
 800b3f2:	3308      	adds	r3, #8
 800b3f4:	2108      	movs	r1, #8
 800b3f6:	60a2      	str	r2, [r4, #8]
 800b3f8:	6123      	str	r3, [r4, #16]
 800b3fa:	7561      	strb	r1, [r4, #21]
 800b3fc:	7da0      	ldrb	r0, [r4, #22]
 800b3fe:	f080 0001 	eor.w	r0, r0, #1
 800b402:	b002      	add	sp, #8
 800b404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b408:	466b      	mov	r3, sp
 800b40a:	cb03      	ldmia	r3!, {r0, r1}
 800b40c:	68a3      	ldr	r3, [r4, #8]
 800b40e:	6018      	str	r0, [r3, #0]
 800b410:	6059      	str	r1, [r3, #4]
 800b412:	e7eb      	b.n	800b3ec <ucdr_serialize_uint64_t+0x10c>
 800b414:	68a2      	ldr	r2, [r4, #8]
 800b416:	6923      	ldr	r3, [r4, #16]
 800b418:	7da0      	ldrb	r0, [r4, #22]
 800b41a:	7567      	strb	r7, [r4, #21]
 800b41c:	1b92      	subs	r2, r2, r6
 800b41e:	1b9b      	subs	r3, r3, r6
 800b420:	f080 0001 	eor.w	r0, r0, #1
 800b424:	60a2      	str	r2, [r4, #8]
 800b426:	6123      	str	r3, [r4, #16]
 800b428:	b002      	add	sp, #8
 800b42a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b42e:	68a3      	ldr	r3, [r4, #8]
 800b430:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b434:	701a      	strb	r2, [r3, #0]
 800b436:	68a3      	ldr	r3, [r4, #8]
 800b438:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b43c:	701a      	strb	r2, [r3, #0]
 800b43e:	68a3      	ldr	r3, [r4, #8]
 800b440:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b444:	701a      	strb	r2, [r3, #0]
 800b446:	68a3      	ldr	r3, [r4, #8]
 800b448:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b44c:	701a      	strb	r2, [r3, #0]
 800b44e:	68a3      	ldr	r3, [r4, #8]
 800b450:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b454:	701a      	strb	r2, [r3, #0]
 800b456:	68a3      	ldr	r3, [r4, #8]
 800b458:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b45c:	701a      	strb	r2, [r3, #0]
 800b45e:	68a3      	ldr	r3, [r4, #8]
 800b460:	f89d 2000 	ldrb.w	r2, [sp]
 800b464:	701a      	strb	r2, [r3, #0]
 800b466:	e78a      	b.n	800b37e <ucdr_serialize_uint64_t+0x9e>
 800b468:	4628      	mov	r0, r5
 800b46a:	466d      	mov	r5, sp
 800b46c:	4629      	mov	r1, r5
 800b46e:	4632      	mov	r2, r6
 800b470:	f00e fc3f 	bl	8019cf2 <memcpy>
 800b474:	68a0      	ldr	r0, [r4, #8]
 800b476:	4642      	mov	r2, r8
 800b478:	19a9      	adds	r1, r5, r6
 800b47a:	f00e fc3a 	bl	8019cf2 <memcpy>
 800b47e:	e77e      	b.n	800b37e <ucdr_serialize_uint64_t+0x9e>

0800b480 <ucdr_serialize_int16_t>:
 800b480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b484:	b082      	sub	sp, #8
 800b486:	460b      	mov	r3, r1
 800b488:	2102      	movs	r1, #2
 800b48a:	4604      	mov	r4, r0
 800b48c:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b490:	f000 fda8 	bl	800bfe4 <ucdr_buffer_alignment>
 800b494:	4601      	mov	r1, r0
 800b496:	4620      	mov	r0, r4
 800b498:	7d67      	ldrb	r7, [r4, #21]
 800b49a:	f000 fde7 	bl	800c06c <ucdr_advance_buffer>
 800b49e:	2102      	movs	r1, #2
 800b4a0:	4620      	mov	r0, r4
 800b4a2:	f000 fd3f 	bl	800bf24 <ucdr_check_buffer_available_for>
 800b4a6:	bb78      	cbnz	r0, 800b508 <ucdr_serialize_int16_t+0x88>
 800b4a8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b4ac:	42ab      	cmp	r3, r5
 800b4ae:	d926      	bls.n	800b4fe <ucdr_serialize_int16_t+0x7e>
 800b4b0:	1b5e      	subs	r6, r3, r5
 800b4b2:	60a3      	str	r3, [r4, #8]
 800b4b4:	6923      	ldr	r3, [r4, #16]
 800b4b6:	f1c6 0802 	rsb	r8, r6, #2
 800b4ba:	4433      	add	r3, r6
 800b4bc:	6123      	str	r3, [r4, #16]
 800b4be:	4641      	mov	r1, r8
 800b4c0:	4620      	mov	r0, r4
 800b4c2:	f000 fd3b 	bl	800bf3c <ucdr_check_final_buffer_behavior>
 800b4c6:	2800      	cmp	r0, #0
 800b4c8:	d03b      	beq.n	800b542 <ucdr_serialize_int16_t+0xc2>
 800b4ca:	7d23      	ldrb	r3, [r4, #20]
 800b4cc:	2b01      	cmp	r3, #1
 800b4ce:	d04a      	beq.n	800b566 <ucdr_serialize_int16_t+0xe6>
 800b4d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b4d4:	702b      	strb	r3, [r5, #0]
 800b4d6:	2e00      	cmp	r6, #0
 800b4d8:	d040      	beq.n	800b55c <ucdr_serialize_int16_t+0xdc>
 800b4da:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b4de:	706b      	strb	r3, [r5, #1]
 800b4e0:	6923      	ldr	r3, [r4, #16]
 800b4e2:	68a2      	ldr	r2, [r4, #8]
 800b4e4:	7da0      	ldrb	r0, [r4, #22]
 800b4e6:	3302      	adds	r3, #2
 800b4e8:	1b9e      	subs	r6, r3, r6
 800b4ea:	4442      	add	r2, r8
 800b4ec:	2302      	movs	r3, #2
 800b4ee:	f080 0001 	eor.w	r0, r0, #1
 800b4f2:	60a2      	str	r2, [r4, #8]
 800b4f4:	6126      	str	r6, [r4, #16]
 800b4f6:	7563      	strb	r3, [r4, #21]
 800b4f8:	b002      	add	sp, #8
 800b4fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4fe:	2102      	movs	r1, #2
 800b500:	4620      	mov	r0, r4
 800b502:	f000 fd1b 	bl	800bf3c <ucdr_check_final_buffer_behavior>
 800b506:	b190      	cbz	r0, 800b52e <ucdr_serialize_int16_t+0xae>
 800b508:	7d23      	ldrb	r3, [r4, #20]
 800b50a:	2b01      	cmp	r3, #1
 800b50c:	68a3      	ldr	r3, [r4, #8]
 800b50e:	d014      	beq.n	800b53a <ucdr_serialize_int16_t+0xba>
 800b510:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b514:	701a      	strb	r2, [r3, #0]
 800b516:	68a3      	ldr	r3, [r4, #8]
 800b518:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b51c:	705a      	strb	r2, [r3, #1]
 800b51e:	68a2      	ldr	r2, [r4, #8]
 800b520:	6923      	ldr	r3, [r4, #16]
 800b522:	3202      	adds	r2, #2
 800b524:	3302      	adds	r3, #2
 800b526:	2102      	movs	r1, #2
 800b528:	60a2      	str	r2, [r4, #8]
 800b52a:	6123      	str	r3, [r4, #16]
 800b52c:	7561      	strb	r1, [r4, #21]
 800b52e:	7da0      	ldrb	r0, [r4, #22]
 800b530:	f080 0001 	eor.w	r0, r0, #1
 800b534:	b002      	add	sp, #8
 800b536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b53a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b53e:	801a      	strh	r2, [r3, #0]
 800b540:	e7ed      	b.n	800b51e <ucdr_serialize_int16_t+0x9e>
 800b542:	68a2      	ldr	r2, [r4, #8]
 800b544:	6923      	ldr	r3, [r4, #16]
 800b546:	7da0      	ldrb	r0, [r4, #22]
 800b548:	7567      	strb	r7, [r4, #21]
 800b54a:	1b92      	subs	r2, r2, r6
 800b54c:	1b9b      	subs	r3, r3, r6
 800b54e:	f080 0001 	eor.w	r0, r0, #1
 800b552:	60a2      	str	r2, [r4, #8]
 800b554:	6123      	str	r3, [r4, #16]
 800b556:	b002      	add	sp, #8
 800b558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b55c:	68a3      	ldr	r3, [r4, #8]
 800b55e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b562:	701a      	strb	r2, [r3, #0]
 800b564:	e7bc      	b.n	800b4e0 <ucdr_serialize_int16_t+0x60>
 800b566:	4628      	mov	r0, r5
 800b568:	f10d 0506 	add.w	r5, sp, #6
 800b56c:	4629      	mov	r1, r5
 800b56e:	4632      	mov	r2, r6
 800b570:	f00e fbbf 	bl	8019cf2 <memcpy>
 800b574:	68a0      	ldr	r0, [r4, #8]
 800b576:	4642      	mov	r2, r8
 800b578:	19a9      	adds	r1, r5, r6
 800b57a:	f00e fbba 	bl	8019cf2 <memcpy>
 800b57e:	e7af      	b.n	800b4e0 <ucdr_serialize_int16_t+0x60>

0800b580 <ucdr_deserialize_int16_t>:
 800b580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b584:	460d      	mov	r5, r1
 800b586:	2102      	movs	r1, #2
 800b588:	4604      	mov	r4, r0
 800b58a:	f000 fd2b 	bl	800bfe4 <ucdr_buffer_alignment>
 800b58e:	4601      	mov	r1, r0
 800b590:	4620      	mov	r0, r4
 800b592:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b596:	f000 fd69 	bl	800c06c <ucdr_advance_buffer>
 800b59a:	2102      	movs	r1, #2
 800b59c:	4620      	mov	r0, r4
 800b59e:	f000 fcc1 	bl	800bf24 <ucdr_check_buffer_available_for>
 800b5a2:	bb60      	cbnz	r0, 800b5fe <ucdr_deserialize_int16_t+0x7e>
 800b5a4:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b5a8:	42be      	cmp	r6, r7
 800b5aa:	d923      	bls.n	800b5f4 <ucdr_deserialize_int16_t+0x74>
 800b5ac:	6923      	ldr	r3, [r4, #16]
 800b5ae:	60a6      	str	r6, [r4, #8]
 800b5b0:	1bf6      	subs	r6, r6, r7
 800b5b2:	4433      	add	r3, r6
 800b5b4:	f1c6 0902 	rsb	r9, r6, #2
 800b5b8:	6123      	str	r3, [r4, #16]
 800b5ba:	4649      	mov	r1, r9
 800b5bc:	4620      	mov	r0, r4
 800b5be:	f000 fcbd 	bl	800bf3c <ucdr_check_final_buffer_behavior>
 800b5c2:	2800      	cmp	r0, #0
 800b5c4:	d034      	beq.n	800b630 <ucdr_deserialize_int16_t+0xb0>
 800b5c6:	7d23      	ldrb	r3, [r4, #20]
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	d042      	beq.n	800b652 <ucdr_deserialize_int16_t+0xd2>
 800b5cc:	787b      	ldrb	r3, [r7, #1]
 800b5ce:	702b      	strb	r3, [r5, #0]
 800b5d0:	2e00      	cmp	r6, #0
 800b5d2:	d03a      	beq.n	800b64a <ucdr_deserialize_int16_t+0xca>
 800b5d4:	783b      	ldrb	r3, [r7, #0]
 800b5d6:	706b      	strb	r3, [r5, #1]
 800b5d8:	6923      	ldr	r3, [r4, #16]
 800b5da:	68a2      	ldr	r2, [r4, #8]
 800b5dc:	7da0      	ldrb	r0, [r4, #22]
 800b5de:	2102      	movs	r1, #2
 800b5e0:	3302      	adds	r3, #2
 800b5e2:	444a      	add	r2, r9
 800b5e4:	1b9b      	subs	r3, r3, r6
 800b5e6:	7561      	strb	r1, [r4, #21]
 800b5e8:	60a2      	str	r2, [r4, #8]
 800b5ea:	6123      	str	r3, [r4, #16]
 800b5ec:	f080 0001 	eor.w	r0, r0, #1
 800b5f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5f4:	2102      	movs	r1, #2
 800b5f6:	4620      	mov	r0, r4
 800b5f8:	f000 fca0 	bl	800bf3c <ucdr_check_final_buffer_behavior>
 800b5fc:	b180      	cbz	r0, 800b620 <ucdr_deserialize_int16_t+0xa0>
 800b5fe:	7d23      	ldrb	r3, [r4, #20]
 800b600:	2b01      	cmp	r3, #1
 800b602:	68a3      	ldr	r3, [r4, #8]
 800b604:	d011      	beq.n	800b62a <ucdr_deserialize_int16_t+0xaa>
 800b606:	785b      	ldrb	r3, [r3, #1]
 800b608:	702b      	strb	r3, [r5, #0]
 800b60a:	68a3      	ldr	r3, [r4, #8]
 800b60c:	781b      	ldrb	r3, [r3, #0]
 800b60e:	706b      	strb	r3, [r5, #1]
 800b610:	68a2      	ldr	r2, [r4, #8]
 800b612:	6923      	ldr	r3, [r4, #16]
 800b614:	3202      	adds	r2, #2
 800b616:	3302      	adds	r3, #2
 800b618:	2102      	movs	r1, #2
 800b61a:	60a2      	str	r2, [r4, #8]
 800b61c:	6123      	str	r3, [r4, #16]
 800b61e:	7561      	strb	r1, [r4, #21]
 800b620:	7da0      	ldrb	r0, [r4, #22]
 800b622:	f080 0001 	eor.w	r0, r0, #1
 800b626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b62a:	881b      	ldrh	r3, [r3, #0]
 800b62c:	802b      	strh	r3, [r5, #0]
 800b62e:	e7ef      	b.n	800b610 <ucdr_deserialize_int16_t+0x90>
 800b630:	68a2      	ldr	r2, [r4, #8]
 800b632:	6923      	ldr	r3, [r4, #16]
 800b634:	7da0      	ldrb	r0, [r4, #22]
 800b636:	f884 8015 	strb.w	r8, [r4, #21]
 800b63a:	1b92      	subs	r2, r2, r6
 800b63c:	1b9b      	subs	r3, r3, r6
 800b63e:	60a2      	str	r2, [r4, #8]
 800b640:	6123      	str	r3, [r4, #16]
 800b642:	f080 0001 	eor.w	r0, r0, #1
 800b646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b64a:	68a3      	ldr	r3, [r4, #8]
 800b64c:	781b      	ldrb	r3, [r3, #0]
 800b64e:	706b      	strb	r3, [r5, #1]
 800b650:	e7c2      	b.n	800b5d8 <ucdr_deserialize_int16_t+0x58>
 800b652:	4639      	mov	r1, r7
 800b654:	4632      	mov	r2, r6
 800b656:	4628      	mov	r0, r5
 800b658:	f00e fb4b 	bl	8019cf2 <memcpy>
 800b65c:	68a1      	ldr	r1, [r4, #8]
 800b65e:	464a      	mov	r2, r9
 800b660:	19a8      	adds	r0, r5, r6
 800b662:	f00e fb46 	bl	8019cf2 <memcpy>
 800b666:	e7b7      	b.n	800b5d8 <ucdr_deserialize_int16_t+0x58>

0800b668 <ucdr_serialize_int32_t>:
 800b668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b66c:	b082      	sub	sp, #8
 800b66e:	4604      	mov	r4, r0
 800b670:	9101      	str	r1, [sp, #4]
 800b672:	2104      	movs	r1, #4
 800b674:	f000 fcb6 	bl	800bfe4 <ucdr_buffer_alignment>
 800b678:	4601      	mov	r1, r0
 800b67a:	4620      	mov	r0, r4
 800b67c:	7d67      	ldrb	r7, [r4, #21]
 800b67e:	f000 fcf5 	bl	800c06c <ucdr_advance_buffer>
 800b682:	2104      	movs	r1, #4
 800b684:	4620      	mov	r0, r4
 800b686:	f000 fc4d 	bl	800bf24 <ucdr_check_buffer_available_for>
 800b68a:	2800      	cmp	r0, #0
 800b68c:	d139      	bne.n	800b702 <ucdr_serialize_int32_t+0x9a>
 800b68e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b692:	42ab      	cmp	r3, r5
 800b694:	d930      	bls.n	800b6f8 <ucdr_serialize_int32_t+0x90>
 800b696:	1b5e      	subs	r6, r3, r5
 800b698:	60a3      	str	r3, [r4, #8]
 800b69a:	6923      	ldr	r3, [r4, #16]
 800b69c:	f1c6 0804 	rsb	r8, r6, #4
 800b6a0:	4433      	add	r3, r6
 800b6a2:	6123      	str	r3, [r4, #16]
 800b6a4:	4641      	mov	r1, r8
 800b6a6:	4620      	mov	r0, r4
 800b6a8:	f000 fc48 	bl	800bf3c <ucdr_check_final_buffer_behavior>
 800b6ac:	2800      	cmp	r0, #0
 800b6ae:	d04c      	beq.n	800b74a <ucdr_serialize_int32_t+0xe2>
 800b6b0:	7d23      	ldrb	r3, [r4, #20]
 800b6b2:	2b01      	cmp	r3, #1
 800b6b4:	d063      	beq.n	800b77e <ucdr_serialize_int32_t+0x116>
 800b6b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b6ba:	702b      	strb	r3, [r5, #0]
 800b6bc:	2e00      	cmp	r6, #0
 800b6be:	d051      	beq.n	800b764 <ucdr_serialize_int32_t+0xfc>
 800b6c0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b6c4:	706b      	strb	r3, [r5, #1]
 800b6c6:	2e01      	cmp	r6, #1
 800b6c8:	d050      	beq.n	800b76c <ucdr_serialize_int32_t+0x104>
 800b6ca:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b6ce:	70ab      	strb	r3, [r5, #2]
 800b6d0:	2e02      	cmp	r6, #2
 800b6d2:	d04f      	beq.n	800b774 <ucdr_serialize_int32_t+0x10c>
 800b6d4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b6d8:	70eb      	strb	r3, [r5, #3]
 800b6da:	6923      	ldr	r3, [r4, #16]
 800b6dc:	68a2      	ldr	r2, [r4, #8]
 800b6de:	7da0      	ldrb	r0, [r4, #22]
 800b6e0:	3304      	adds	r3, #4
 800b6e2:	1b9e      	subs	r6, r3, r6
 800b6e4:	4442      	add	r2, r8
 800b6e6:	2304      	movs	r3, #4
 800b6e8:	f080 0001 	eor.w	r0, r0, #1
 800b6ec:	60a2      	str	r2, [r4, #8]
 800b6ee:	6126      	str	r6, [r4, #16]
 800b6f0:	7563      	strb	r3, [r4, #21]
 800b6f2:	b002      	add	sp, #8
 800b6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6f8:	2104      	movs	r1, #4
 800b6fa:	4620      	mov	r0, r4
 800b6fc:	f000 fc1e 	bl	800bf3c <ucdr_check_final_buffer_behavior>
 800b700:	b1d0      	cbz	r0, 800b738 <ucdr_serialize_int32_t+0xd0>
 800b702:	7d23      	ldrb	r3, [r4, #20]
 800b704:	2b01      	cmp	r3, #1
 800b706:	68a3      	ldr	r3, [r4, #8]
 800b708:	d01c      	beq.n	800b744 <ucdr_serialize_int32_t+0xdc>
 800b70a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b70e:	701a      	strb	r2, [r3, #0]
 800b710:	68a3      	ldr	r3, [r4, #8]
 800b712:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b716:	705a      	strb	r2, [r3, #1]
 800b718:	68a3      	ldr	r3, [r4, #8]
 800b71a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b71e:	709a      	strb	r2, [r3, #2]
 800b720:	68a3      	ldr	r3, [r4, #8]
 800b722:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b726:	70da      	strb	r2, [r3, #3]
 800b728:	68a2      	ldr	r2, [r4, #8]
 800b72a:	6923      	ldr	r3, [r4, #16]
 800b72c:	3204      	adds	r2, #4
 800b72e:	3304      	adds	r3, #4
 800b730:	2104      	movs	r1, #4
 800b732:	60a2      	str	r2, [r4, #8]
 800b734:	6123      	str	r3, [r4, #16]
 800b736:	7561      	strb	r1, [r4, #21]
 800b738:	7da0      	ldrb	r0, [r4, #22]
 800b73a:	f080 0001 	eor.w	r0, r0, #1
 800b73e:	b002      	add	sp, #8
 800b740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b744:	9a01      	ldr	r2, [sp, #4]
 800b746:	601a      	str	r2, [r3, #0]
 800b748:	e7ee      	b.n	800b728 <ucdr_serialize_int32_t+0xc0>
 800b74a:	68a2      	ldr	r2, [r4, #8]
 800b74c:	6923      	ldr	r3, [r4, #16]
 800b74e:	7da0      	ldrb	r0, [r4, #22]
 800b750:	7567      	strb	r7, [r4, #21]
 800b752:	1b92      	subs	r2, r2, r6
 800b754:	1b9b      	subs	r3, r3, r6
 800b756:	f080 0001 	eor.w	r0, r0, #1
 800b75a:	60a2      	str	r2, [r4, #8]
 800b75c:	6123      	str	r3, [r4, #16]
 800b75e:	b002      	add	sp, #8
 800b760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b764:	68a3      	ldr	r3, [r4, #8]
 800b766:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b76a:	701a      	strb	r2, [r3, #0]
 800b76c:	68a3      	ldr	r3, [r4, #8]
 800b76e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b772:	701a      	strb	r2, [r3, #0]
 800b774:	68a3      	ldr	r3, [r4, #8]
 800b776:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b77a:	701a      	strb	r2, [r3, #0]
 800b77c:	e7ad      	b.n	800b6da <ucdr_serialize_int32_t+0x72>
 800b77e:	4628      	mov	r0, r5
 800b780:	ad01      	add	r5, sp, #4
 800b782:	4629      	mov	r1, r5
 800b784:	4632      	mov	r2, r6
 800b786:	f00e fab4 	bl	8019cf2 <memcpy>
 800b78a:	68a0      	ldr	r0, [r4, #8]
 800b78c:	4642      	mov	r2, r8
 800b78e:	19a9      	adds	r1, r5, r6
 800b790:	f00e faaf 	bl	8019cf2 <memcpy>
 800b794:	e7a1      	b.n	800b6da <ucdr_serialize_int32_t+0x72>
 800b796:	bf00      	nop

0800b798 <ucdr_deserialize_int32_t>:
 800b798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b79c:	460d      	mov	r5, r1
 800b79e:	2104      	movs	r1, #4
 800b7a0:	4604      	mov	r4, r0
 800b7a2:	f000 fc1f 	bl	800bfe4 <ucdr_buffer_alignment>
 800b7a6:	4601      	mov	r1, r0
 800b7a8:	4620      	mov	r0, r4
 800b7aa:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b7ae:	f000 fc5d 	bl	800c06c <ucdr_advance_buffer>
 800b7b2:	2104      	movs	r1, #4
 800b7b4:	4620      	mov	r0, r4
 800b7b6:	f000 fbb5 	bl	800bf24 <ucdr_check_buffer_available_for>
 800b7ba:	2800      	cmp	r0, #0
 800b7bc:	d138      	bne.n	800b830 <ucdr_deserialize_int32_t+0x98>
 800b7be:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b7c2:	42b7      	cmp	r7, r6
 800b7c4:	d92f      	bls.n	800b826 <ucdr_deserialize_int32_t+0x8e>
 800b7c6:	6923      	ldr	r3, [r4, #16]
 800b7c8:	60a7      	str	r7, [r4, #8]
 800b7ca:	1bbf      	subs	r7, r7, r6
 800b7cc:	443b      	add	r3, r7
 800b7ce:	f1c7 0904 	rsb	r9, r7, #4
 800b7d2:	6123      	str	r3, [r4, #16]
 800b7d4:	4649      	mov	r1, r9
 800b7d6:	4620      	mov	r0, r4
 800b7d8:	f000 fbb0 	bl	800bf3c <ucdr_check_final_buffer_behavior>
 800b7dc:	2800      	cmp	r0, #0
 800b7de:	d046      	beq.n	800b86e <ucdr_deserialize_int32_t+0xd6>
 800b7e0:	7d23      	ldrb	r3, [r4, #20]
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	d05c      	beq.n	800b8a0 <ucdr_deserialize_int32_t+0x108>
 800b7e6:	78f3      	ldrb	r3, [r6, #3]
 800b7e8:	702b      	strb	r3, [r5, #0]
 800b7ea:	2f00      	cmp	r7, #0
 800b7ec:	d04c      	beq.n	800b888 <ucdr_deserialize_int32_t+0xf0>
 800b7ee:	78b3      	ldrb	r3, [r6, #2]
 800b7f0:	706b      	strb	r3, [r5, #1]
 800b7f2:	2f01      	cmp	r7, #1
 800b7f4:	f105 0302 	add.w	r3, r5, #2
 800b7f8:	d04a      	beq.n	800b890 <ucdr_deserialize_int32_t+0xf8>
 800b7fa:	7873      	ldrb	r3, [r6, #1]
 800b7fc:	70ab      	strb	r3, [r5, #2]
 800b7fe:	2f02      	cmp	r7, #2
 800b800:	f105 0303 	add.w	r3, r5, #3
 800b804:	d048      	beq.n	800b898 <ucdr_deserialize_int32_t+0x100>
 800b806:	7833      	ldrb	r3, [r6, #0]
 800b808:	70eb      	strb	r3, [r5, #3]
 800b80a:	6923      	ldr	r3, [r4, #16]
 800b80c:	68a2      	ldr	r2, [r4, #8]
 800b80e:	7da0      	ldrb	r0, [r4, #22]
 800b810:	2104      	movs	r1, #4
 800b812:	3304      	adds	r3, #4
 800b814:	444a      	add	r2, r9
 800b816:	1bdb      	subs	r3, r3, r7
 800b818:	7561      	strb	r1, [r4, #21]
 800b81a:	60a2      	str	r2, [r4, #8]
 800b81c:	6123      	str	r3, [r4, #16]
 800b81e:	f080 0001 	eor.w	r0, r0, #1
 800b822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b826:	2104      	movs	r1, #4
 800b828:	4620      	mov	r0, r4
 800b82a:	f000 fb87 	bl	800bf3c <ucdr_check_final_buffer_behavior>
 800b82e:	b1b0      	cbz	r0, 800b85e <ucdr_deserialize_int32_t+0xc6>
 800b830:	7d23      	ldrb	r3, [r4, #20]
 800b832:	2b01      	cmp	r3, #1
 800b834:	68a3      	ldr	r3, [r4, #8]
 800b836:	d017      	beq.n	800b868 <ucdr_deserialize_int32_t+0xd0>
 800b838:	78db      	ldrb	r3, [r3, #3]
 800b83a:	702b      	strb	r3, [r5, #0]
 800b83c:	68a3      	ldr	r3, [r4, #8]
 800b83e:	789b      	ldrb	r3, [r3, #2]
 800b840:	706b      	strb	r3, [r5, #1]
 800b842:	68a3      	ldr	r3, [r4, #8]
 800b844:	785b      	ldrb	r3, [r3, #1]
 800b846:	70ab      	strb	r3, [r5, #2]
 800b848:	68a3      	ldr	r3, [r4, #8]
 800b84a:	781b      	ldrb	r3, [r3, #0]
 800b84c:	70eb      	strb	r3, [r5, #3]
 800b84e:	68a2      	ldr	r2, [r4, #8]
 800b850:	6923      	ldr	r3, [r4, #16]
 800b852:	3204      	adds	r2, #4
 800b854:	3304      	adds	r3, #4
 800b856:	2104      	movs	r1, #4
 800b858:	60a2      	str	r2, [r4, #8]
 800b85a:	6123      	str	r3, [r4, #16]
 800b85c:	7561      	strb	r1, [r4, #21]
 800b85e:	7da0      	ldrb	r0, [r4, #22]
 800b860:	f080 0001 	eor.w	r0, r0, #1
 800b864:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	602b      	str	r3, [r5, #0]
 800b86c:	e7ef      	b.n	800b84e <ucdr_deserialize_int32_t+0xb6>
 800b86e:	68a2      	ldr	r2, [r4, #8]
 800b870:	6923      	ldr	r3, [r4, #16]
 800b872:	7da0      	ldrb	r0, [r4, #22]
 800b874:	f884 8015 	strb.w	r8, [r4, #21]
 800b878:	1bd2      	subs	r2, r2, r7
 800b87a:	1bdb      	subs	r3, r3, r7
 800b87c:	60a2      	str	r2, [r4, #8]
 800b87e:	6123      	str	r3, [r4, #16]
 800b880:	f080 0001 	eor.w	r0, r0, #1
 800b884:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b888:	68a3      	ldr	r3, [r4, #8]
 800b88a:	789b      	ldrb	r3, [r3, #2]
 800b88c:	706b      	strb	r3, [r5, #1]
 800b88e:	1cab      	adds	r3, r5, #2
 800b890:	68a2      	ldr	r2, [r4, #8]
 800b892:	7852      	ldrb	r2, [r2, #1]
 800b894:	f803 2b01 	strb.w	r2, [r3], #1
 800b898:	68a2      	ldr	r2, [r4, #8]
 800b89a:	7812      	ldrb	r2, [r2, #0]
 800b89c:	701a      	strb	r2, [r3, #0]
 800b89e:	e7b4      	b.n	800b80a <ucdr_deserialize_int32_t+0x72>
 800b8a0:	4631      	mov	r1, r6
 800b8a2:	463a      	mov	r2, r7
 800b8a4:	4628      	mov	r0, r5
 800b8a6:	f00e fa24 	bl	8019cf2 <memcpy>
 800b8aa:	68a1      	ldr	r1, [r4, #8]
 800b8ac:	464a      	mov	r2, r9
 800b8ae:	19e8      	adds	r0, r5, r7
 800b8b0:	f00e fa1f 	bl	8019cf2 <memcpy>
 800b8b4:	e7a9      	b.n	800b80a <ucdr_deserialize_int32_t+0x72>
 800b8b6:	bf00      	nop

0800b8b8 <ucdr_serialize_double>:
 800b8b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8bc:	2108      	movs	r1, #8
 800b8be:	b082      	sub	sp, #8
 800b8c0:	4604      	mov	r4, r0
 800b8c2:	ed8d 0b00 	vstr	d0, [sp]
 800b8c6:	f000 fb8d 	bl	800bfe4 <ucdr_buffer_alignment>
 800b8ca:	4601      	mov	r1, r0
 800b8cc:	4620      	mov	r0, r4
 800b8ce:	7d67      	ldrb	r7, [r4, #21]
 800b8d0:	f000 fbcc 	bl	800c06c <ucdr_advance_buffer>
 800b8d4:	2108      	movs	r1, #8
 800b8d6:	4620      	mov	r0, r4
 800b8d8:	f000 fb24 	bl	800bf24 <ucdr_check_buffer_available_for>
 800b8dc:	2800      	cmp	r0, #0
 800b8de:	d14e      	bne.n	800b97e <ucdr_serialize_double+0xc6>
 800b8e0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b8e4:	42ab      	cmp	r3, r5
 800b8e6:	d945      	bls.n	800b974 <ucdr_serialize_double+0xbc>
 800b8e8:	1b5e      	subs	r6, r3, r5
 800b8ea:	60a3      	str	r3, [r4, #8]
 800b8ec:	6923      	ldr	r3, [r4, #16]
 800b8ee:	f1c6 0808 	rsb	r8, r6, #8
 800b8f2:	4433      	add	r3, r6
 800b8f4:	6123      	str	r3, [r4, #16]
 800b8f6:	4641      	mov	r1, r8
 800b8f8:	4620      	mov	r0, r4
 800b8fa:	f000 fb1f 	bl	800bf3c <ucdr_check_final_buffer_behavior>
 800b8fe:	2800      	cmp	r0, #0
 800b900:	d074      	beq.n	800b9ec <ucdr_serialize_double+0x134>
 800b902:	7d23      	ldrb	r3, [r4, #20]
 800b904:	2b01      	cmp	r3, #1
 800b906:	f000 809b 	beq.w	800ba40 <ucdr_serialize_double+0x188>
 800b90a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b90e:	702b      	strb	r3, [r5, #0]
 800b910:	2e00      	cmp	r6, #0
 800b912:	d078      	beq.n	800ba06 <ucdr_serialize_double+0x14e>
 800b914:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b918:	706b      	strb	r3, [r5, #1]
 800b91a:	2e01      	cmp	r6, #1
 800b91c:	d077      	beq.n	800ba0e <ucdr_serialize_double+0x156>
 800b91e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b922:	70ab      	strb	r3, [r5, #2]
 800b924:	2e02      	cmp	r6, #2
 800b926:	d076      	beq.n	800ba16 <ucdr_serialize_double+0x15e>
 800b928:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b92c:	70eb      	strb	r3, [r5, #3]
 800b92e:	2e03      	cmp	r6, #3
 800b930:	d075      	beq.n	800ba1e <ucdr_serialize_double+0x166>
 800b932:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b936:	712b      	strb	r3, [r5, #4]
 800b938:	2e04      	cmp	r6, #4
 800b93a:	d074      	beq.n	800ba26 <ucdr_serialize_double+0x16e>
 800b93c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b940:	716b      	strb	r3, [r5, #5]
 800b942:	2e05      	cmp	r6, #5
 800b944:	d073      	beq.n	800ba2e <ucdr_serialize_double+0x176>
 800b946:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b94a:	71ab      	strb	r3, [r5, #6]
 800b94c:	2e06      	cmp	r6, #6
 800b94e:	d072      	beq.n	800ba36 <ucdr_serialize_double+0x17e>
 800b950:	f89d 3000 	ldrb.w	r3, [sp]
 800b954:	71eb      	strb	r3, [r5, #7]
 800b956:	6923      	ldr	r3, [r4, #16]
 800b958:	68a2      	ldr	r2, [r4, #8]
 800b95a:	7da0      	ldrb	r0, [r4, #22]
 800b95c:	3308      	adds	r3, #8
 800b95e:	1b9e      	subs	r6, r3, r6
 800b960:	4442      	add	r2, r8
 800b962:	2308      	movs	r3, #8
 800b964:	f080 0001 	eor.w	r0, r0, #1
 800b968:	60a2      	str	r2, [r4, #8]
 800b96a:	6126      	str	r6, [r4, #16]
 800b96c:	7563      	strb	r3, [r4, #21]
 800b96e:	b002      	add	sp, #8
 800b970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b974:	2108      	movs	r1, #8
 800b976:	4620      	mov	r0, r4
 800b978:	f000 fae0 	bl	800bf3c <ucdr_check_final_buffer_behavior>
 800b97c:	b350      	cbz	r0, 800b9d4 <ucdr_serialize_double+0x11c>
 800b97e:	7d23      	ldrb	r3, [r4, #20]
 800b980:	2b01      	cmp	r3, #1
 800b982:	d02d      	beq.n	800b9e0 <ucdr_serialize_double+0x128>
 800b984:	68a3      	ldr	r3, [r4, #8]
 800b986:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b98a:	701a      	strb	r2, [r3, #0]
 800b98c:	68a3      	ldr	r3, [r4, #8]
 800b98e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b992:	705a      	strb	r2, [r3, #1]
 800b994:	68a3      	ldr	r3, [r4, #8]
 800b996:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b99a:	709a      	strb	r2, [r3, #2]
 800b99c:	68a3      	ldr	r3, [r4, #8]
 800b99e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b9a2:	70da      	strb	r2, [r3, #3]
 800b9a4:	68a3      	ldr	r3, [r4, #8]
 800b9a6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b9aa:	711a      	strb	r2, [r3, #4]
 800b9ac:	68a3      	ldr	r3, [r4, #8]
 800b9ae:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b9b2:	715a      	strb	r2, [r3, #5]
 800b9b4:	68a3      	ldr	r3, [r4, #8]
 800b9b6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b9ba:	719a      	strb	r2, [r3, #6]
 800b9bc:	68a3      	ldr	r3, [r4, #8]
 800b9be:	f89d 2000 	ldrb.w	r2, [sp]
 800b9c2:	71da      	strb	r2, [r3, #7]
 800b9c4:	68a2      	ldr	r2, [r4, #8]
 800b9c6:	6923      	ldr	r3, [r4, #16]
 800b9c8:	3208      	adds	r2, #8
 800b9ca:	3308      	adds	r3, #8
 800b9cc:	2108      	movs	r1, #8
 800b9ce:	60a2      	str	r2, [r4, #8]
 800b9d0:	6123      	str	r3, [r4, #16]
 800b9d2:	7561      	strb	r1, [r4, #21]
 800b9d4:	7da0      	ldrb	r0, [r4, #22]
 800b9d6:	f080 0001 	eor.w	r0, r0, #1
 800b9da:	b002      	add	sp, #8
 800b9dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9e0:	466b      	mov	r3, sp
 800b9e2:	cb03      	ldmia	r3!, {r0, r1}
 800b9e4:	68a3      	ldr	r3, [r4, #8]
 800b9e6:	6018      	str	r0, [r3, #0]
 800b9e8:	6059      	str	r1, [r3, #4]
 800b9ea:	e7eb      	b.n	800b9c4 <ucdr_serialize_double+0x10c>
 800b9ec:	68a2      	ldr	r2, [r4, #8]
 800b9ee:	6923      	ldr	r3, [r4, #16]
 800b9f0:	7da0      	ldrb	r0, [r4, #22]
 800b9f2:	7567      	strb	r7, [r4, #21]
 800b9f4:	1b92      	subs	r2, r2, r6
 800b9f6:	1b9b      	subs	r3, r3, r6
 800b9f8:	f080 0001 	eor.w	r0, r0, #1
 800b9fc:	60a2      	str	r2, [r4, #8]
 800b9fe:	6123      	str	r3, [r4, #16]
 800ba00:	b002      	add	sp, #8
 800ba02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba06:	68a3      	ldr	r3, [r4, #8]
 800ba08:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ba0c:	701a      	strb	r2, [r3, #0]
 800ba0e:	68a3      	ldr	r3, [r4, #8]
 800ba10:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ba14:	701a      	strb	r2, [r3, #0]
 800ba16:	68a3      	ldr	r3, [r4, #8]
 800ba18:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ba1c:	701a      	strb	r2, [r3, #0]
 800ba1e:	68a3      	ldr	r3, [r4, #8]
 800ba20:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ba24:	701a      	strb	r2, [r3, #0]
 800ba26:	68a3      	ldr	r3, [r4, #8]
 800ba28:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ba2c:	701a      	strb	r2, [r3, #0]
 800ba2e:	68a3      	ldr	r3, [r4, #8]
 800ba30:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800ba34:	701a      	strb	r2, [r3, #0]
 800ba36:	68a3      	ldr	r3, [r4, #8]
 800ba38:	f89d 2000 	ldrb.w	r2, [sp]
 800ba3c:	701a      	strb	r2, [r3, #0]
 800ba3e:	e78a      	b.n	800b956 <ucdr_serialize_double+0x9e>
 800ba40:	4628      	mov	r0, r5
 800ba42:	466d      	mov	r5, sp
 800ba44:	4629      	mov	r1, r5
 800ba46:	4632      	mov	r2, r6
 800ba48:	f00e f953 	bl	8019cf2 <memcpy>
 800ba4c:	68a0      	ldr	r0, [r4, #8]
 800ba4e:	4642      	mov	r2, r8
 800ba50:	19a9      	adds	r1, r5, r6
 800ba52:	f00e f94e 	bl	8019cf2 <memcpy>
 800ba56:	e77e      	b.n	800b956 <ucdr_serialize_double+0x9e>

0800ba58 <ucdr_serialize_endian_double>:
 800ba58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba5c:	460e      	mov	r6, r1
 800ba5e:	b083      	sub	sp, #12
 800ba60:	2108      	movs	r1, #8
 800ba62:	4604      	mov	r4, r0
 800ba64:	ed8d 0b00 	vstr	d0, [sp]
 800ba68:	f000 fabc 	bl	800bfe4 <ucdr_buffer_alignment>
 800ba6c:	4601      	mov	r1, r0
 800ba6e:	4620      	mov	r0, r4
 800ba70:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ba74:	f000 fafa 	bl	800c06c <ucdr_advance_buffer>
 800ba78:	2108      	movs	r1, #8
 800ba7a:	4620      	mov	r0, r4
 800ba7c:	f000 fa52 	bl	800bf24 <ucdr_check_buffer_available_for>
 800ba80:	2800      	cmp	r0, #0
 800ba82:	d14d      	bne.n	800bb20 <ucdr_serialize_endian_double+0xc8>
 800ba84:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800ba88:	42bd      	cmp	r5, r7
 800ba8a:	d944      	bls.n	800bb16 <ucdr_serialize_endian_double+0xbe>
 800ba8c:	6923      	ldr	r3, [r4, #16]
 800ba8e:	60a5      	str	r5, [r4, #8]
 800ba90:	1bed      	subs	r5, r5, r7
 800ba92:	442b      	add	r3, r5
 800ba94:	f1c5 0908 	rsb	r9, r5, #8
 800ba98:	6123      	str	r3, [r4, #16]
 800ba9a:	4649      	mov	r1, r9
 800ba9c:	4620      	mov	r0, r4
 800ba9e:	f000 fa4d 	bl	800bf3c <ucdr_check_final_buffer_behavior>
 800baa2:	2800      	cmp	r0, #0
 800baa4:	d072      	beq.n	800bb8c <ucdr_serialize_endian_double+0x134>
 800baa6:	2e01      	cmp	r6, #1
 800baa8:	f000 809b 	beq.w	800bbe2 <ucdr_serialize_endian_double+0x18a>
 800baac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bab0:	703b      	strb	r3, [r7, #0]
 800bab2:	2d00      	cmp	r5, #0
 800bab4:	d078      	beq.n	800bba8 <ucdr_serialize_endian_double+0x150>
 800bab6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800baba:	707b      	strb	r3, [r7, #1]
 800babc:	2d01      	cmp	r5, #1
 800babe:	d077      	beq.n	800bbb0 <ucdr_serialize_endian_double+0x158>
 800bac0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bac4:	70bb      	strb	r3, [r7, #2]
 800bac6:	2d02      	cmp	r5, #2
 800bac8:	d076      	beq.n	800bbb8 <ucdr_serialize_endian_double+0x160>
 800baca:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bace:	70fb      	strb	r3, [r7, #3]
 800bad0:	2d03      	cmp	r5, #3
 800bad2:	d075      	beq.n	800bbc0 <ucdr_serialize_endian_double+0x168>
 800bad4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800bad8:	713b      	strb	r3, [r7, #4]
 800bada:	2d04      	cmp	r5, #4
 800badc:	d074      	beq.n	800bbc8 <ucdr_serialize_endian_double+0x170>
 800bade:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800bae2:	717b      	strb	r3, [r7, #5]
 800bae4:	2d05      	cmp	r5, #5
 800bae6:	d073      	beq.n	800bbd0 <ucdr_serialize_endian_double+0x178>
 800bae8:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800baec:	71bb      	strb	r3, [r7, #6]
 800baee:	2d06      	cmp	r5, #6
 800baf0:	d072      	beq.n	800bbd8 <ucdr_serialize_endian_double+0x180>
 800baf2:	f89d 3000 	ldrb.w	r3, [sp]
 800baf6:	71fb      	strb	r3, [r7, #7]
 800baf8:	6923      	ldr	r3, [r4, #16]
 800bafa:	68a2      	ldr	r2, [r4, #8]
 800bafc:	7da0      	ldrb	r0, [r4, #22]
 800bafe:	3308      	adds	r3, #8
 800bb00:	1b5d      	subs	r5, r3, r5
 800bb02:	444a      	add	r2, r9
 800bb04:	2308      	movs	r3, #8
 800bb06:	f080 0001 	eor.w	r0, r0, #1
 800bb0a:	60a2      	str	r2, [r4, #8]
 800bb0c:	6125      	str	r5, [r4, #16]
 800bb0e:	7563      	strb	r3, [r4, #21]
 800bb10:	b003      	add	sp, #12
 800bb12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb16:	2108      	movs	r1, #8
 800bb18:	4620      	mov	r0, r4
 800bb1a:	f000 fa0f 	bl	800bf3c <ucdr_check_final_buffer_behavior>
 800bb1e:	b348      	cbz	r0, 800bb74 <ucdr_serialize_endian_double+0x11c>
 800bb20:	2e01      	cmp	r6, #1
 800bb22:	d02d      	beq.n	800bb80 <ucdr_serialize_endian_double+0x128>
 800bb24:	68a3      	ldr	r3, [r4, #8]
 800bb26:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bb2a:	701a      	strb	r2, [r3, #0]
 800bb2c:	68a3      	ldr	r3, [r4, #8]
 800bb2e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bb32:	705a      	strb	r2, [r3, #1]
 800bb34:	68a3      	ldr	r3, [r4, #8]
 800bb36:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bb3a:	709a      	strb	r2, [r3, #2]
 800bb3c:	68a3      	ldr	r3, [r4, #8]
 800bb3e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bb42:	70da      	strb	r2, [r3, #3]
 800bb44:	68a3      	ldr	r3, [r4, #8]
 800bb46:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800bb4a:	711a      	strb	r2, [r3, #4]
 800bb4c:	68a3      	ldr	r3, [r4, #8]
 800bb4e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800bb52:	715a      	strb	r2, [r3, #5]
 800bb54:	68a3      	ldr	r3, [r4, #8]
 800bb56:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800bb5a:	719a      	strb	r2, [r3, #6]
 800bb5c:	68a3      	ldr	r3, [r4, #8]
 800bb5e:	f89d 2000 	ldrb.w	r2, [sp]
 800bb62:	71da      	strb	r2, [r3, #7]
 800bb64:	68a2      	ldr	r2, [r4, #8]
 800bb66:	6923      	ldr	r3, [r4, #16]
 800bb68:	3208      	adds	r2, #8
 800bb6a:	3308      	adds	r3, #8
 800bb6c:	2108      	movs	r1, #8
 800bb6e:	60a2      	str	r2, [r4, #8]
 800bb70:	6123      	str	r3, [r4, #16]
 800bb72:	7561      	strb	r1, [r4, #21]
 800bb74:	7da0      	ldrb	r0, [r4, #22]
 800bb76:	f080 0001 	eor.w	r0, r0, #1
 800bb7a:	b003      	add	sp, #12
 800bb7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb80:	466b      	mov	r3, sp
 800bb82:	cb03      	ldmia	r3!, {r0, r1}
 800bb84:	68a3      	ldr	r3, [r4, #8]
 800bb86:	6018      	str	r0, [r3, #0]
 800bb88:	6059      	str	r1, [r3, #4]
 800bb8a:	e7eb      	b.n	800bb64 <ucdr_serialize_endian_double+0x10c>
 800bb8c:	68a2      	ldr	r2, [r4, #8]
 800bb8e:	6923      	ldr	r3, [r4, #16]
 800bb90:	7da0      	ldrb	r0, [r4, #22]
 800bb92:	f884 8015 	strb.w	r8, [r4, #21]
 800bb96:	1b52      	subs	r2, r2, r5
 800bb98:	1b5b      	subs	r3, r3, r5
 800bb9a:	f080 0001 	eor.w	r0, r0, #1
 800bb9e:	60a2      	str	r2, [r4, #8]
 800bba0:	6123      	str	r3, [r4, #16]
 800bba2:	b003      	add	sp, #12
 800bba4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bba8:	68a3      	ldr	r3, [r4, #8]
 800bbaa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bbae:	701a      	strb	r2, [r3, #0]
 800bbb0:	68a3      	ldr	r3, [r4, #8]
 800bbb2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bbb6:	701a      	strb	r2, [r3, #0]
 800bbb8:	68a3      	ldr	r3, [r4, #8]
 800bbba:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bbbe:	701a      	strb	r2, [r3, #0]
 800bbc0:	68a3      	ldr	r3, [r4, #8]
 800bbc2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800bbc6:	701a      	strb	r2, [r3, #0]
 800bbc8:	68a3      	ldr	r3, [r4, #8]
 800bbca:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800bbce:	701a      	strb	r2, [r3, #0]
 800bbd0:	68a3      	ldr	r3, [r4, #8]
 800bbd2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800bbd6:	701a      	strb	r2, [r3, #0]
 800bbd8:	68a3      	ldr	r3, [r4, #8]
 800bbda:	f89d 2000 	ldrb.w	r2, [sp]
 800bbde:	701a      	strb	r2, [r3, #0]
 800bbe0:	e78a      	b.n	800baf8 <ucdr_serialize_endian_double+0xa0>
 800bbe2:	466e      	mov	r6, sp
 800bbe4:	4631      	mov	r1, r6
 800bbe6:	462a      	mov	r2, r5
 800bbe8:	4638      	mov	r0, r7
 800bbea:	f00e f882 	bl	8019cf2 <memcpy>
 800bbee:	68a0      	ldr	r0, [r4, #8]
 800bbf0:	464a      	mov	r2, r9
 800bbf2:	1971      	adds	r1, r6, r5
 800bbf4:	f00e f87d 	bl	8019cf2 <memcpy>
 800bbf8:	e77e      	b.n	800baf8 <ucdr_serialize_endian_double+0xa0>
 800bbfa:	bf00      	nop

0800bbfc <ucdr_deserialize_double>:
 800bbfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc00:	460d      	mov	r5, r1
 800bc02:	2108      	movs	r1, #8
 800bc04:	4604      	mov	r4, r0
 800bc06:	f000 f9ed 	bl	800bfe4 <ucdr_buffer_alignment>
 800bc0a:	4601      	mov	r1, r0
 800bc0c:	4620      	mov	r0, r4
 800bc0e:	f894 9015 	ldrb.w	r9, [r4, #21]
 800bc12:	f000 fa2b 	bl	800c06c <ucdr_advance_buffer>
 800bc16:	2108      	movs	r1, #8
 800bc18:	4620      	mov	r0, r4
 800bc1a:	f000 f983 	bl	800bf24 <ucdr_check_buffer_available_for>
 800bc1e:	2800      	cmp	r0, #0
 800bc20:	d151      	bne.n	800bcc6 <ucdr_deserialize_double+0xca>
 800bc22:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800bc26:	42be      	cmp	r6, r7
 800bc28:	d948      	bls.n	800bcbc <ucdr_deserialize_double+0xc0>
 800bc2a:	6923      	ldr	r3, [r4, #16]
 800bc2c:	60a6      	str	r6, [r4, #8]
 800bc2e:	1bf6      	subs	r6, r6, r7
 800bc30:	4433      	add	r3, r6
 800bc32:	f1c6 0808 	rsb	r8, r6, #8
 800bc36:	6123      	str	r3, [r4, #16]
 800bc38:	4641      	mov	r1, r8
 800bc3a:	4620      	mov	r0, r4
 800bc3c:	f000 f97e 	bl	800bf3c <ucdr_check_final_buffer_behavior>
 800bc40:	2800      	cmp	r0, #0
 800bc42:	d06d      	beq.n	800bd20 <ucdr_deserialize_double+0x124>
 800bc44:	7d23      	ldrb	r3, [r4, #20]
 800bc46:	2b01      	cmp	r3, #1
 800bc48:	f000 8093 	beq.w	800bd72 <ucdr_deserialize_double+0x176>
 800bc4c:	79fb      	ldrb	r3, [r7, #7]
 800bc4e:	702b      	strb	r3, [r5, #0]
 800bc50:	2e00      	cmp	r6, #0
 800bc52:	d072      	beq.n	800bd3a <ucdr_deserialize_double+0x13e>
 800bc54:	79bb      	ldrb	r3, [r7, #6]
 800bc56:	706b      	strb	r3, [r5, #1]
 800bc58:	2e01      	cmp	r6, #1
 800bc5a:	f105 0302 	add.w	r3, r5, #2
 800bc5e:	d070      	beq.n	800bd42 <ucdr_deserialize_double+0x146>
 800bc60:	797b      	ldrb	r3, [r7, #5]
 800bc62:	70ab      	strb	r3, [r5, #2]
 800bc64:	2e02      	cmp	r6, #2
 800bc66:	f105 0303 	add.w	r3, r5, #3
 800bc6a:	d06e      	beq.n	800bd4a <ucdr_deserialize_double+0x14e>
 800bc6c:	793b      	ldrb	r3, [r7, #4]
 800bc6e:	70eb      	strb	r3, [r5, #3]
 800bc70:	2e03      	cmp	r6, #3
 800bc72:	f105 0304 	add.w	r3, r5, #4
 800bc76:	d06c      	beq.n	800bd52 <ucdr_deserialize_double+0x156>
 800bc78:	78fb      	ldrb	r3, [r7, #3]
 800bc7a:	712b      	strb	r3, [r5, #4]
 800bc7c:	2e04      	cmp	r6, #4
 800bc7e:	f105 0305 	add.w	r3, r5, #5
 800bc82:	d06a      	beq.n	800bd5a <ucdr_deserialize_double+0x15e>
 800bc84:	78bb      	ldrb	r3, [r7, #2]
 800bc86:	716b      	strb	r3, [r5, #5]
 800bc88:	2e05      	cmp	r6, #5
 800bc8a:	f105 0306 	add.w	r3, r5, #6
 800bc8e:	d068      	beq.n	800bd62 <ucdr_deserialize_double+0x166>
 800bc90:	787b      	ldrb	r3, [r7, #1]
 800bc92:	71ab      	strb	r3, [r5, #6]
 800bc94:	2e06      	cmp	r6, #6
 800bc96:	f105 0307 	add.w	r3, r5, #7
 800bc9a:	d066      	beq.n	800bd6a <ucdr_deserialize_double+0x16e>
 800bc9c:	783b      	ldrb	r3, [r7, #0]
 800bc9e:	71eb      	strb	r3, [r5, #7]
 800bca0:	6923      	ldr	r3, [r4, #16]
 800bca2:	68a2      	ldr	r2, [r4, #8]
 800bca4:	7da0      	ldrb	r0, [r4, #22]
 800bca6:	3308      	adds	r3, #8
 800bca8:	1b9e      	subs	r6, r3, r6
 800bcaa:	2308      	movs	r3, #8
 800bcac:	4442      	add	r2, r8
 800bcae:	7563      	strb	r3, [r4, #21]
 800bcb0:	60a2      	str	r2, [r4, #8]
 800bcb2:	6126      	str	r6, [r4, #16]
 800bcb4:	f080 0001 	eor.w	r0, r0, #1
 800bcb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcbc:	2108      	movs	r1, #8
 800bcbe:	4620      	mov	r0, r4
 800bcc0:	f000 f93c 	bl	800bf3c <ucdr_check_final_buffer_behavior>
 800bcc4:	b310      	cbz	r0, 800bd0c <ucdr_deserialize_double+0x110>
 800bcc6:	7d23      	ldrb	r3, [r4, #20]
 800bcc8:	2b01      	cmp	r3, #1
 800bcca:	68a3      	ldr	r3, [r4, #8]
 800bccc:	d023      	beq.n	800bd16 <ucdr_deserialize_double+0x11a>
 800bcce:	79db      	ldrb	r3, [r3, #7]
 800bcd0:	702b      	strb	r3, [r5, #0]
 800bcd2:	68a3      	ldr	r3, [r4, #8]
 800bcd4:	799b      	ldrb	r3, [r3, #6]
 800bcd6:	706b      	strb	r3, [r5, #1]
 800bcd8:	68a3      	ldr	r3, [r4, #8]
 800bcda:	795b      	ldrb	r3, [r3, #5]
 800bcdc:	70ab      	strb	r3, [r5, #2]
 800bcde:	68a3      	ldr	r3, [r4, #8]
 800bce0:	791b      	ldrb	r3, [r3, #4]
 800bce2:	70eb      	strb	r3, [r5, #3]
 800bce4:	68a3      	ldr	r3, [r4, #8]
 800bce6:	78db      	ldrb	r3, [r3, #3]
 800bce8:	712b      	strb	r3, [r5, #4]
 800bcea:	68a3      	ldr	r3, [r4, #8]
 800bcec:	789b      	ldrb	r3, [r3, #2]
 800bcee:	716b      	strb	r3, [r5, #5]
 800bcf0:	68a3      	ldr	r3, [r4, #8]
 800bcf2:	785b      	ldrb	r3, [r3, #1]
 800bcf4:	71ab      	strb	r3, [r5, #6]
 800bcf6:	68a3      	ldr	r3, [r4, #8]
 800bcf8:	781b      	ldrb	r3, [r3, #0]
 800bcfa:	71eb      	strb	r3, [r5, #7]
 800bcfc:	68a2      	ldr	r2, [r4, #8]
 800bcfe:	6923      	ldr	r3, [r4, #16]
 800bd00:	3208      	adds	r2, #8
 800bd02:	3308      	adds	r3, #8
 800bd04:	2108      	movs	r1, #8
 800bd06:	60a2      	str	r2, [r4, #8]
 800bd08:	6123      	str	r3, [r4, #16]
 800bd0a:	7561      	strb	r1, [r4, #21]
 800bd0c:	7da0      	ldrb	r0, [r4, #22]
 800bd0e:	f080 0001 	eor.w	r0, r0, #1
 800bd12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd16:	681a      	ldr	r2, [r3, #0]
 800bd18:	685b      	ldr	r3, [r3, #4]
 800bd1a:	606b      	str	r3, [r5, #4]
 800bd1c:	602a      	str	r2, [r5, #0]
 800bd1e:	e7ed      	b.n	800bcfc <ucdr_deserialize_double+0x100>
 800bd20:	68a2      	ldr	r2, [r4, #8]
 800bd22:	6923      	ldr	r3, [r4, #16]
 800bd24:	7da0      	ldrb	r0, [r4, #22]
 800bd26:	f884 9015 	strb.w	r9, [r4, #21]
 800bd2a:	1b92      	subs	r2, r2, r6
 800bd2c:	1b9b      	subs	r3, r3, r6
 800bd2e:	60a2      	str	r2, [r4, #8]
 800bd30:	6123      	str	r3, [r4, #16]
 800bd32:	f080 0001 	eor.w	r0, r0, #1
 800bd36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd3a:	68a3      	ldr	r3, [r4, #8]
 800bd3c:	799b      	ldrb	r3, [r3, #6]
 800bd3e:	706b      	strb	r3, [r5, #1]
 800bd40:	1cab      	adds	r3, r5, #2
 800bd42:	68a2      	ldr	r2, [r4, #8]
 800bd44:	7952      	ldrb	r2, [r2, #5]
 800bd46:	f803 2b01 	strb.w	r2, [r3], #1
 800bd4a:	68a2      	ldr	r2, [r4, #8]
 800bd4c:	7912      	ldrb	r2, [r2, #4]
 800bd4e:	f803 2b01 	strb.w	r2, [r3], #1
 800bd52:	68a2      	ldr	r2, [r4, #8]
 800bd54:	78d2      	ldrb	r2, [r2, #3]
 800bd56:	f803 2b01 	strb.w	r2, [r3], #1
 800bd5a:	68a2      	ldr	r2, [r4, #8]
 800bd5c:	7892      	ldrb	r2, [r2, #2]
 800bd5e:	f803 2b01 	strb.w	r2, [r3], #1
 800bd62:	68a2      	ldr	r2, [r4, #8]
 800bd64:	7852      	ldrb	r2, [r2, #1]
 800bd66:	f803 2b01 	strb.w	r2, [r3], #1
 800bd6a:	68a2      	ldr	r2, [r4, #8]
 800bd6c:	7812      	ldrb	r2, [r2, #0]
 800bd6e:	701a      	strb	r2, [r3, #0]
 800bd70:	e796      	b.n	800bca0 <ucdr_deserialize_double+0xa4>
 800bd72:	4639      	mov	r1, r7
 800bd74:	4632      	mov	r2, r6
 800bd76:	4628      	mov	r0, r5
 800bd78:	f00d ffbb 	bl	8019cf2 <memcpy>
 800bd7c:	68a1      	ldr	r1, [r4, #8]
 800bd7e:	4642      	mov	r2, r8
 800bd80:	19a8      	adds	r0, r5, r6
 800bd82:	f00d ffb6 	bl	8019cf2 <memcpy>
 800bd86:	e78b      	b.n	800bca0 <ucdr_deserialize_double+0xa4>

0800bd88 <ucdr_deserialize_endian_double>:
 800bd88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd8c:	460f      	mov	r7, r1
 800bd8e:	2108      	movs	r1, #8
 800bd90:	4604      	mov	r4, r0
 800bd92:	4615      	mov	r5, r2
 800bd94:	f000 f926 	bl	800bfe4 <ucdr_buffer_alignment>
 800bd98:	4601      	mov	r1, r0
 800bd9a:	4620      	mov	r0, r4
 800bd9c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800bda0:	f000 f964 	bl	800c06c <ucdr_advance_buffer>
 800bda4:	2108      	movs	r1, #8
 800bda6:	4620      	mov	r0, r4
 800bda8:	f000 f8bc 	bl	800bf24 <ucdr_check_buffer_available_for>
 800bdac:	2800      	cmp	r0, #0
 800bdae:	d159      	bne.n	800be64 <ucdr_deserialize_endian_double+0xdc>
 800bdb0:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 800bdb4:	4546      	cmp	r6, r8
 800bdb6:	d950      	bls.n	800be5a <ucdr_deserialize_endian_double+0xd2>
 800bdb8:	6923      	ldr	r3, [r4, #16]
 800bdba:	60a6      	str	r6, [r4, #8]
 800bdbc:	eba6 0608 	sub.w	r6, r6, r8
 800bdc0:	4433      	add	r3, r6
 800bdc2:	f1c6 0a08 	rsb	sl, r6, #8
 800bdc6:	6123      	str	r3, [r4, #16]
 800bdc8:	4651      	mov	r1, sl
 800bdca:	4620      	mov	r0, r4
 800bdcc:	f000 f8b6 	bl	800bf3c <ucdr_check_final_buffer_behavior>
 800bdd0:	2800      	cmp	r0, #0
 800bdd2:	d073      	beq.n	800bebc <ucdr_deserialize_endian_double+0x134>
 800bdd4:	2f01      	cmp	r7, #1
 800bdd6:	f000 809a 	beq.w	800bf0e <ucdr_deserialize_endian_double+0x186>
 800bdda:	f898 3007 	ldrb.w	r3, [r8, #7]
 800bdde:	702b      	strb	r3, [r5, #0]
 800bde0:	2e00      	cmp	r6, #0
 800bde2:	d078      	beq.n	800bed6 <ucdr_deserialize_endian_double+0x14e>
 800bde4:	f898 3006 	ldrb.w	r3, [r8, #6]
 800bde8:	706b      	strb	r3, [r5, #1]
 800bdea:	2e01      	cmp	r6, #1
 800bdec:	f105 0302 	add.w	r3, r5, #2
 800bdf0:	d075      	beq.n	800bede <ucdr_deserialize_endian_double+0x156>
 800bdf2:	f898 3005 	ldrb.w	r3, [r8, #5]
 800bdf6:	70ab      	strb	r3, [r5, #2]
 800bdf8:	2e02      	cmp	r6, #2
 800bdfa:	f105 0303 	add.w	r3, r5, #3
 800bdfe:	d072      	beq.n	800bee6 <ucdr_deserialize_endian_double+0x15e>
 800be00:	f898 3004 	ldrb.w	r3, [r8, #4]
 800be04:	70eb      	strb	r3, [r5, #3]
 800be06:	2e03      	cmp	r6, #3
 800be08:	f105 0304 	add.w	r3, r5, #4
 800be0c:	d06f      	beq.n	800beee <ucdr_deserialize_endian_double+0x166>
 800be0e:	f898 3003 	ldrb.w	r3, [r8, #3]
 800be12:	712b      	strb	r3, [r5, #4]
 800be14:	2e04      	cmp	r6, #4
 800be16:	f105 0305 	add.w	r3, r5, #5
 800be1a:	d06c      	beq.n	800bef6 <ucdr_deserialize_endian_double+0x16e>
 800be1c:	f898 3002 	ldrb.w	r3, [r8, #2]
 800be20:	716b      	strb	r3, [r5, #5]
 800be22:	2e05      	cmp	r6, #5
 800be24:	f105 0306 	add.w	r3, r5, #6
 800be28:	d069      	beq.n	800befe <ucdr_deserialize_endian_double+0x176>
 800be2a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800be2e:	71ab      	strb	r3, [r5, #6]
 800be30:	2e06      	cmp	r6, #6
 800be32:	f105 0307 	add.w	r3, r5, #7
 800be36:	d066      	beq.n	800bf06 <ucdr_deserialize_endian_double+0x17e>
 800be38:	f898 3000 	ldrb.w	r3, [r8]
 800be3c:	71eb      	strb	r3, [r5, #7]
 800be3e:	6923      	ldr	r3, [r4, #16]
 800be40:	68a2      	ldr	r2, [r4, #8]
 800be42:	7da0      	ldrb	r0, [r4, #22]
 800be44:	3308      	adds	r3, #8
 800be46:	1b9e      	subs	r6, r3, r6
 800be48:	2308      	movs	r3, #8
 800be4a:	4452      	add	r2, sl
 800be4c:	7563      	strb	r3, [r4, #21]
 800be4e:	60a2      	str	r2, [r4, #8]
 800be50:	6126      	str	r6, [r4, #16]
 800be52:	f080 0001 	eor.w	r0, r0, #1
 800be56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be5a:	2108      	movs	r1, #8
 800be5c:	4620      	mov	r0, r4
 800be5e:	f000 f86d 	bl	800bf3c <ucdr_check_final_buffer_behavior>
 800be62:	b308      	cbz	r0, 800bea8 <ucdr_deserialize_endian_double+0x120>
 800be64:	2f01      	cmp	r7, #1
 800be66:	68a3      	ldr	r3, [r4, #8]
 800be68:	d023      	beq.n	800beb2 <ucdr_deserialize_endian_double+0x12a>
 800be6a:	79db      	ldrb	r3, [r3, #7]
 800be6c:	702b      	strb	r3, [r5, #0]
 800be6e:	68a3      	ldr	r3, [r4, #8]
 800be70:	799b      	ldrb	r3, [r3, #6]
 800be72:	706b      	strb	r3, [r5, #1]
 800be74:	68a3      	ldr	r3, [r4, #8]
 800be76:	795b      	ldrb	r3, [r3, #5]
 800be78:	70ab      	strb	r3, [r5, #2]
 800be7a:	68a3      	ldr	r3, [r4, #8]
 800be7c:	791b      	ldrb	r3, [r3, #4]
 800be7e:	70eb      	strb	r3, [r5, #3]
 800be80:	68a3      	ldr	r3, [r4, #8]
 800be82:	78db      	ldrb	r3, [r3, #3]
 800be84:	712b      	strb	r3, [r5, #4]
 800be86:	68a3      	ldr	r3, [r4, #8]
 800be88:	789b      	ldrb	r3, [r3, #2]
 800be8a:	716b      	strb	r3, [r5, #5]
 800be8c:	68a3      	ldr	r3, [r4, #8]
 800be8e:	785b      	ldrb	r3, [r3, #1]
 800be90:	71ab      	strb	r3, [r5, #6]
 800be92:	68a3      	ldr	r3, [r4, #8]
 800be94:	781b      	ldrb	r3, [r3, #0]
 800be96:	71eb      	strb	r3, [r5, #7]
 800be98:	68a2      	ldr	r2, [r4, #8]
 800be9a:	6923      	ldr	r3, [r4, #16]
 800be9c:	3208      	adds	r2, #8
 800be9e:	3308      	adds	r3, #8
 800bea0:	2108      	movs	r1, #8
 800bea2:	60a2      	str	r2, [r4, #8]
 800bea4:	6123      	str	r3, [r4, #16]
 800bea6:	7561      	strb	r1, [r4, #21]
 800bea8:	7da0      	ldrb	r0, [r4, #22]
 800beaa:	f080 0001 	eor.w	r0, r0, #1
 800beae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800beb2:	681a      	ldr	r2, [r3, #0]
 800beb4:	685b      	ldr	r3, [r3, #4]
 800beb6:	606b      	str	r3, [r5, #4]
 800beb8:	602a      	str	r2, [r5, #0]
 800beba:	e7ed      	b.n	800be98 <ucdr_deserialize_endian_double+0x110>
 800bebc:	68a2      	ldr	r2, [r4, #8]
 800bebe:	6923      	ldr	r3, [r4, #16]
 800bec0:	7da0      	ldrb	r0, [r4, #22]
 800bec2:	f884 9015 	strb.w	r9, [r4, #21]
 800bec6:	1b92      	subs	r2, r2, r6
 800bec8:	1b9b      	subs	r3, r3, r6
 800beca:	60a2      	str	r2, [r4, #8]
 800becc:	6123      	str	r3, [r4, #16]
 800bece:	f080 0001 	eor.w	r0, r0, #1
 800bed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bed6:	68a3      	ldr	r3, [r4, #8]
 800bed8:	799b      	ldrb	r3, [r3, #6]
 800beda:	706b      	strb	r3, [r5, #1]
 800bedc:	1cab      	adds	r3, r5, #2
 800bede:	68a2      	ldr	r2, [r4, #8]
 800bee0:	7952      	ldrb	r2, [r2, #5]
 800bee2:	f803 2b01 	strb.w	r2, [r3], #1
 800bee6:	68a2      	ldr	r2, [r4, #8]
 800bee8:	7912      	ldrb	r2, [r2, #4]
 800beea:	f803 2b01 	strb.w	r2, [r3], #1
 800beee:	68a2      	ldr	r2, [r4, #8]
 800bef0:	78d2      	ldrb	r2, [r2, #3]
 800bef2:	f803 2b01 	strb.w	r2, [r3], #1
 800bef6:	68a2      	ldr	r2, [r4, #8]
 800bef8:	7892      	ldrb	r2, [r2, #2]
 800befa:	f803 2b01 	strb.w	r2, [r3], #1
 800befe:	68a2      	ldr	r2, [r4, #8]
 800bf00:	7852      	ldrb	r2, [r2, #1]
 800bf02:	f803 2b01 	strb.w	r2, [r3], #1
 800bf06:	68a2      	ldr	r2, [r4, #8]
 800bf08:	7812      	ldrb	r2, [r2, #0]
 800bf0a:	701a      	strb	r2, [r3, #0]
 800bf0c:	e797      	b.n	800be3e <ucdr_deserialize_endian_double+0xb6>
 800bf0e:	4641      	mov	r1, r8
 800bf10:	4632      	mov	r2, r6
 800bf12:	4628      	mov	r0, r5
 800bf14:	f00d feed 	bl	8019cf2 <memcpy>
 800bf18:	68a1      	ldr	r1, [r4, #8]
 800bf1a:	4652      	mov	r2, sl
 800bf1c:	19a8      	adds	r0, r5, r6
 800bf1e:	f00d fee8 	bl	8019cf2 <memcpy>
 800bf22:	e78c      	b.n	800be3e <ucdr_deserialize_endian_double+0xb6>

0800bf24 <ucdr_check_buffer_available_for>:
 800bf24:	7d83      	ldrb	r3, [r0, #22]
 800bf26:	b93b      	cbnz	r3, 800bf38 <ucdr_check_buffer_available_for+0x14>
 800bf28:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800bf2c:	4419      	add	r1, r3
 800bf2e:	4288      	cmp	r0, r1
 800bf30:	bf34      	ite	cc
 800bf32:	2000      	movcc	r0, #0
 800bf34:	2001      	movcs	r0, #1
 800bf36:	4770      	bx	lr
 800bf38:	2000      	movs	r0, #0
 800bf3a:	4770      	bx	lr

0800bf3c <ucdr_check_final_buffer_behavior>:
 800bf3c:	7d83      	ldrb	r3, [r0, #22]
 800bf3e:	b943      	cbnz	r3, 800bf52 <ucdr_check_final_buffer_behavior+0x16>
 800bf40:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800bf44:	4291      	cmp	r1, r2
 800bf46:	b510      	push	{r4, lr}
 800bf48:	4604      	mov	r4, r0
 800bf4a:	d205      	bcs.n	800bf58 <ucdr_check_final_buffer_behavior+0x1c>
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	4618      	mov	r0, r3
 800bf50:	bd10      	pop	{r4, pc}
 800bf52:	2300      	movs	r3, #0
 800bf54:	4618      	mov	r0, r3
 800bf56:	4770      	bx	lr
 800bf58:	6982      	ldr	r2, [r0, #24]
 800bf5a:	b13a      	cbz	r2, 800bf6c <ucdr_check_final_buffer_behavior+0x30>
 800bf5c:	69c1      	ldr	r1, [r0, #28]
 800bf5e:	4790      	blx	r2
 800bf60:	f080 0301 	eor.w	r3, r0, #1
 800bf64:	b2db      	uxtb	r3, r3
 800bf66:	75a0      	strb	r0, [r4, #22]
 800bf68:	4618      	mov	r0, r3
 800bf6a:	bd10      	pop	{r4, pc}
 800bf6c:	2001      	movs	r0, #1
 800bf6e:	75a0      	strb	r0, [r4, #22]
 800bf70:	e7fa      	b.n	800bf68 <ucdr_check_final_buffer_behavior+0x2c>
 800bf72:	bf00      	nop

0800bf74 <ucdr_set_on_full_buffer_callback>:
 800bf74:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800bf78:	4770      	bx	lr
 800bf7a:	bf00      	nop

0800bf7c <ucdr_init_buffer_origin_offset_endian>:
 800bf7c:	b410      	push	{r4}
 800bf7e:	9c01      	ldr	r4, [sp, #4]
 800bf80:	6001      	str	r1, [r0, #0]
 800bf82:	440a      	add	r2, r1
 800bf84:	6042      	str	r2, [r0, #4]
 800bf86:	190a      	adds	r2, r1, r4
 800bf88:	441c      	add	r4, r3
 800bf8a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800bf8e:	6082      	str	r2, [r0, #8]
 800bf90:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800bf94:	7503      	strb	r3, [r0, #20]
 800bf96:	2200      	movs	r2, #0
 800bf98:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800bf9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfa0:	7542      	strb	r2, [r0, #21]
 800bfa2:	7582      	strb	r2, [r0, #22]
 800bfa4:	4770      	bx	lr
 800bfa6:	bf00      	nop

0800bfa8 <ucdr_init_buffer_origin_offset>:
 800bfa8:	b510      	push	{r4, lr}
 800bfaa:	b082      	sub	sp, #8
 800bfac:	9c04      	ldr	r4, [sp, #16]
 800bfae:	9400      	str	r4, [sp, #0]
 800bfb0:	2401      	movs	r4, #1
 800bfb2:	9401      	str	r4, [sp, #4]
 800bfb4:	f7ff ffe2 	bl	800bf7c <ucdr_init_buffer_origin_offset_endian>
 800bfb8:	b002      	add	sp, #8
 800bfba:	bd10      	pop	{r4, pc}

0800bfbc <ucdr_init_buffer_origin>:
 800bfbc:	b510      	push	{r4, lr}
 800bfbe:	b082      	sub	sp, #8
 800bfc0:	2400      	movs	r4, #0
 800bfc2:	9400      	str	r4, [sp, #0]
 800bfc4:	f7ff fff0 	bl	800bfa8 <ucdr_init_buffer_origin_offset>
 800bfc8:	b002      	add	sp, #8
 800bfca:	bd10      	pop	{r4, pc}

0800bfcc <ucdr_init_buffer>:
 800bfcc:	2300      	movs	r3, #0
 800bfce:	f7ff bff5 	b.w	800bfbc <ucdr_init_buffer_origin>
 800bfd2:	bf00      	nop

0800bfd4 <ucdr_alignment>:
 800bfd4:	fbb0 f3f1 	udiv	r3, r0, r1
 800bfd8:	fb03 0011 	mls	r0, r3, r1, r0
 800bfdc:	1a08      	subs	r0, r1, r0
 800bfde:	3901      	subs	r1, #1
 800bfe0:	4008      	ands	r0, r1
 800bfe2:	4770      	bx	lr

0800bfe4 <ucdr_buffer_alignment>:
 800bfe4:	7d43      	ldrb	r3, [r0, #21]
 800bfe6:	428b      	cmp	r3, r1
 800bfe8:	d208      	bcs.n	800bffc <ucdr_buffer_alignment+0x18>
 800bfea:	6900      	ldr	r0, [r0, #16]
 800bfec:	fbb0 f3f1 	udiv	r3, r0, r1
 800bff0:	fb01 0013 	mls	r0, r1, r3, r0
 800bff4:	1a08      	subs	r0, r1, r0
 800bff6:	3901      	subs	r1, #1
 800bff8:	4008      	ands	r0, r1
 800bffa:	4770      	bx	lr
 800bffc:	2000      	movs	r0, #0
 800bffe:	4770      	bx	lr

0800c000 <ucdr_align_to>:
 800c000:	b538      	push	{r3, r4, r5, lr}
 800c002:	4604      	mov	r4, r0
 800c004:	460d      	mov	r5, r1
 800c006:	f7ff ffed 	bl	800bfe4 <ucdr_buffer_alignment>
 800c00a:	68a3      	ldr	r3, [r4, #8]
 800c00c:	6921      	ldr	r1, [r4, #16]
 800c00e:	7565      	strb	r5, [r4, #21]
 800c010:	181a      	adds	r2, r3, r0
 800c012:	6863      	ldr	r3, [r4, #4]
 800c014:	4293      	cmp	r3, r2
 800c016:	4408      	add	r0, r1
 800c018:	bf28      	it	cs
 800c01a:	4613      	movcs	r3, r2
 800c01c:	6120      	str	r0, [r4, #16]
 800c01e:	60a3      	str	r3, [r4, #8]
 800c020:	bd38      	pop	{r3, r4, r5, pc}
 800c022:	bf00      	nop

0800c024 <ucdr_buffer_length>:
 800c024:	6882      	ldr	r2, [r0, #8]
 800c026:	6800      	ldr	r0, [r0, #0]
 800c028:	1a10      	subs	r0, r2, r0
 800c02a:	4770      	bx	lr

0800c02c <ucdr_buffer_remaining>:
 800c02c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800c030:	1a10      	subs	r0, r2, r0
 800c032:	4770      	bx	lr

0800c034 <ucdr_check_final_buffer_behavior_array>:
 800c034:	b538      	push	{r3, r4, r5, lr}
 800c036:	7d83      	ldrb	r3, [r0, #22]
 800c038:	b963      	cbnz	r3, 800c054 <ucdr_check_final_buffer_behavior_array+0x20>
 800c03a:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800c03e:	429a      	cmp	r2, r3
 800c040:	4604      	mov	r4, r0
 800c042:	460d      	mov	r5, r1
 800c044:	d308      	bcc.n	800c058 <ucdr_check_final_buffer_behavior_array+0x24>
 800c046:	b139      	cbz	r1, 800c058 <ucdr_check_final_buffer_behavior_array+0x24>
 800c048:	6983      	ldr	r3, [r0, #24]
 800c04a:	b163      	cbz	r3, 800c066 <ucdr_check_final_buffer_behavior_array+0x32>
 800c04c:	69c1      	ldr	r1, [r0, #28]
 800c04e:	4798      	blx	r3
 800c050:	75a0      	strb	r0, [r4, #22]
 800c052:	b108      	cbz	r0, 800c058 <ucdr_check_final_buffer_behavior_array+0x24>
 800c054:	2000      	movs	r0, #0
 800c056:	bd38      	pop	{r3, r4, r5, pc}
 800c058:	4620      	mov	r0, r4
 800c05a:	f7ff ffe7 	bl	800c02c <ucdr_buffer_remaining>
 800c05e:	42a8      	cmp	r0, r5
 800c060:	bf28      	it	cs
 800c062:	4628      	movcs	r0, r5
 800c064:	bd38      	pop	{r3, r4, r5, pc}
 800c066:	2301      	movs	r3, #1
 800c068:	7583      	strb	r3, [r0, #22]
 800c06a:	e7f3      	b.n	800c054 <ucdr_check_final_buffer_behavior_array+0x20>

0800c06c <ucdr_advance_buffer>:
 800c06c:	b538      	push	{r3, r4, r5, lr}
 800c06e:	4604      	mov	r4, r0
 800c070:	460d      	mov	r5, r1
 800c072:	f7ff ff57 	bl	800bf24 <ucdr_check_buffer_available_for>
 800c076:	b178      	cbz	r0, 800c098 <ucdr_advance_buffer+0x2c>
 800c078:	6923      	ldr	r3, [r4, #16]
 800c07a:	68a2      	ldr	r2, [r4, #8]
 800c07c:	442b      	add	r3, r5
 800c07e:	6123      	str	r3, [r4, #16]
 800c080:	2301      	movs	r3, #1
 800c082:	442a      	add	r2, r5
 800c084:	7563      	strb	r3, [r4, #21]
 800c086:	60a2      	str	r2, [r4, #8]
 800c088:	bd38      	pop	{r3, r4, r5, pc}
 800c08a:	68a2      	ldr	r2, [r4, #8]
 800c08c:	6923      	ldr	r3, [r4, #16]
 800c08e:	4402      	add	r2, r0
 800c090:	4403      	add	r3, r0
 800c092:	1a2d      	subs	r5, r5, r0
 800c094:	60a2      	str	r2, [r4, #8]
 800c096:	6123      	str	r3, [r4, #16]
 800c098:	4629      	mov	r1, r5
 800c09a:	2201      	movs	r2, #1
 800c09c:	4620      	mov	r0, r4
 800c09e:	f7ff ffc9 	bl	800c034 <ucdr_check_final_buffer_behavior_array>
 800c0a2:	2800      	cmp	r0, #0
 800c0a4:	d1f1      	bne.n	800c08a <ucdr_advance_buffer+0x1e>
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	7563      	strb	r3, [r4, #21]
 800c0aa:	bd38      	pop	{r3, r4, r5, pc}

0800c0ac <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800c0ac:	4b04      	ldr	r3, [pc, #16]	@ (800c0c0 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x14>)
 800c0ae:	681a      	ldr	r2, [r3, #0]
 800c0b0:	b10a      	cbz	r2, 800c0b6 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0xa>
 800c0b2:	4803      	ldr	r0, [pc, #12]	@ (800c0c0 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x14>)
 800c0b4:	4770      	bx	lr
 800c0b6:	4a03      	ldr	r2, [pc, #12]	@ (800c0c4 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x18>)
 800c0b8:	4801      	ldr	r0, [pc, #4]	@ (800c0c0 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x14>)
 800c0ba:	6812      	ldr	r2, [r2, #0]
 800c0bc:	601a      	str	r2, [r3, #0]
 800c0be:	4770      	bx	lr
 800c0c0:	200001dc 	.word	0x200001dc
 800c0c4:	20000320 	.word	0x20000320

0800c0c8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800c0c8:	4a02      	ldr	r2, [pc, #8]	@ (800c0d4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0xc>)
 800c0ca:	4b03      	ldr	r3, [pc, #12]	@ (800c0d8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x10>)
 800c0cc:	6812      	ldr	r2, [r2, #0]
 800c0ce:	601a      	str	r2, [r3, #0]
 800c0d0:	4770      	bx	lr
 800c0d2:	bf00      	nop
 800c0d4:	20000320 	.word	0x20000320
 800c0d8:	200001dc 	.word	0x200001dc

0800c0dc <nav_msgs__msg__Odometry__rosidl_typesupport_introspection_c__Odometry_init_function>:
 800c0dc:	f008 bc68 	b.w	80149b0 <nav_msgs__msg__Odometry__init>

0800c0e0 <nav_msgs__msg__Odometry__rosidl_typesupport_introspection_c__Odometry_fini_function>:
 800c0e0:	f008 bcbc 	b.w	8014a5c <nav_msgs__msg__Odometry__fini>

0800c0e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800c0e4:	b510      	push	{r4, lr}
 800c0e6:	f004 f909 	bl	80102fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800c0ea:	4c0a      	ldr	r4, [pc, #40]	@ (800c114 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x30>)
 800c0ec:	60e0      	str	r0, [r4, #12]
 800c0ee:	f004 fabd 	bl	801066c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 800c0f2:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800c0f6:	f004 faed 	bl	80106d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 800c0fa:	4b07      	ldr	r3, [pc, #28]	@ (800c118 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x34>)
 800c0fc:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800c100:	681a      	ldr	r2, [r3, #0]
 800c102:	b10a      	cbz	r2, 800c108 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x24>
 800c104:	4804      	ldr	r0, [pc, #16]	@ (800c118 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x34>)
 800c106:	bd10      	pop	{r4, pc}
 800c108:	4a04      	ldr	r2, [pc, #16]	@ (800c11c <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x38>)
 800c10a:	4803      	ldr	r0, [pc, #12]	@ (800c118 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x34>)
 800c10c:	6812      	ldr	r2, [r2, #0]
 800c10e:	601a      	str	r2, [r3, #0]
 800c110:	bd10      	pop	{r4, pc}
 800c112:	bf00      	nop
 800c114:	200001e8 	.word	0x200001e8
 800c118:	200002d8 	.word	0x200002d8
 800c11c:	20000324 	.word	0x20000324

0800c120 <get_serialized_size_nav_msgs__msg__Odometry>:
 800c120:	b5d0      	push	{r4, r6, r7, lr}
 800c122:	4604      	mov	r4, r0
 800c124:	b1c0      	cbz	r0, 800c158 <get_serialized_size_nav_msgs__msg__Odometry+0x38>
 800c126:	460f      	mov	r7, r1
 800c128:	f004 f91e 	bl	8010368 <get_serialized_size_std_msgs__msg__Header>
 800c12c:	183e      	adds	r6, r7, r0
 800c12e:	2104      	movs	r1, #4
 800c130:	4630      	mov	r0, r6
 800c132:	f7ff ff4f 	bl	800bfd4 <ucdr_alignment>
 800c136:	69a3      	ldr	r3, [r4, #24]
 800c138:	3305      	adds	r3, #5
 800c13a:	4403      	add	r3, r0
 800c13c:	441e      	add	r6, r3
 800c13e:	4631      	mov	r1, r6
 800c140:	f104 0020 	add.w	r0, r4, #32
 800c144:	f004 fadc 	bl	8010700 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 800c148:	4406      	add	r6, r0
 800c14a:	4631      	mov	r1, r6
 800c14c:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 800c150:	f004 fb46 	bl	80107e0 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 800c154:	1bc0      	subs	r0, r0, r7
 800c156:	4430      	add	r0, r6
 800c158:	bdd0      	pop	{r4, r6, r7, pc}
 800c15a:	bf00      	nop

0800c15c <_Odometry__cdr_deserialize>:
 800c15c:	b570      	push	{r4, r5, r6, lr}
 800c15e:	460c      	mov	r4, r1
 800c160:	b082      	sub	sp, #8
 800c162:	b351      	cbz	r1, 800c1ba <_Odometry__cdr_deserialize+0x5e>
 800c164:	4605      	mov	r5, r0
 800c166:	f004 f981 	bl	801046c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800c16a:	6843      	ldr	r3, [r0, #4]
 800c16c:	4621      	mov	r1, r4
 800c16e:	68db      	ldr	r3, [r3, #12]
 800c170:	4628      	mov	r0, r5
 800c172:	4798      	blx	r3
 800c174:	69e6      	ldr	r6, [r4, #28]
 800c176:	6961      	ldr	r1, [r4, #20]
 800c178:	ab01      	add	r3, sp, #4
 800c17a:	4632      	mov	r2, r6
 800c17c:	4628      	mov	r0, r5
 800c17e:	f004 fd87 	bl	8010c90 <ucdr_deserialize_sequence_char>
 800c182:	b9a8      	cbnz	r0, 800c1b0 <_Odometry__cdr_deserialize+0x54>
 800c184:	9a01      	ldr	r2, [sp, #4]
 800c186:	4296      	cmp	r6, r2
 800c188:	d31a      	bcc.n	800c1c0 <_Odometry__cdr_deserialize+0x64>
 800c18a:	f004 fb25 	bl	80107d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 800c18e:	6843      	ldr	r3, [r0, #4]
 800c190:	f104 0120 	add.w	r1, r4, #32
 800c194:	68db      	ldr	r3, [r3, #12]
 800c196:	4628      	mov	r0, r5
 800c198:	4798      	blx	r3
 800c19a:	f004 fb8d 	bl	80108b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 800c19e:	6843      	ldr	r3, [r0, #4]
 800c1a0:	68db      	ldr	r3, [r3, #12]
 800c1a2:	f504 71bc 	add.w	r1, r4, #376	@ 0x178
 800c1a6:	4628      	mov	r0, r5
 800c1a8:	b002      	add	sp, #8
 800c1aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c1ae:	4718      	bx	r3
 800c1b0:	9b01      	ldr	r3, [sp, #4]
 800c1b2:	b103      	cbz	r3, 800c1b6 <_Odometry__cdr_deserialize+0x5a>
 800c1b4:	3b01      	subs	r3, #1
 800c1b6:	61a3      	str	r3, [r4, #24]
 800c1b8:	e7e7      	b.n	800c18a <_Odometry__cdr_deserialize+0x2e>
 800c1ba:	4608      	mov	r0, r1
 800c1bc:	b002      	add	sp, #8
 800c1be:	bd70      	pop	{r4, r5, r6, pc}
 800c1c0:	2101      	movs	r1, #1
 800c1c2:	75a8      	strb	r0, [r5, #22]
 800c1c4:	7569      	strb	r1, [r5, #21]
 800c1c6:	61a0      	str	r0, [r4, #24]
 800c1c8:	4628      	mov	r0, r5
 800c1ca:	f7ff ff19 	bl	800c000 <ucdr_align_to>
 800c1ce:	9901      	ldr	r1, [sp, #4]
 800c1d0:	4628      	mov	r0, r5
 800c1d2:	f7ff ff4b 	bl	800c06c <ucdr_advance_buffer>
 800c1d6:	e7d8      	b.n	800c18a <_Odometry__cdr_deserialize+0x2e>

0800c1d8 <_Odometry__cdr_serialize>:
 800c1d8:	b348      	cbz	r0, 800c22e <_Odometry__cdr_serialize+0x56>
 800c1da:	b570      	push	{r4, r5, r6, lr}
 800c1dc:	4604      	mov	r4, r0
 800c1de:	460e      	mov	r6, r1
 800c1e0:	f004 f944 	bl	801046c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800c1e4:	6843      	ldr	r3, [r0, #4]
 800c1e6:	4631      	mov	r1, r6
 800c1e8:	689b      	ldr	r3, [r3, #8]
 800c1ea:	4620      	mov	r0, r4
 800c1ec:	4798      	blx	r3
 800c1ee:	6965      	ldr	r5, [r4, #20]
 800c1f0:	b1d5      	cbz	r5, 800c228 <_Odometry__cdr_serialize+0x50>
 800c1f2:	4628      	mov	r0, r5
 800c1f4:	f7f4 f816 	bl	8000224 <strlen>
 800c1f8:	1c42      	adds	r2, r0, #1
 800c1fa:	4629      	mov	r1, r5
 800c1fc:	61a0      	str	r0, [r4, #24]
 800c1fe:	4630      	mov	r0, r6
 800c200:	f004 fd34 	bl	8010c6c <ucdr_serialize_sequence_char>
 800c204:	f004 fae8 	bl	80107d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 800c208:	6843      	ldr	r3, [r0, #4]
 800c20a:	4631      	mov	r1, r6
 800c20c:	689b      	ldr	r3, [r3, #8]
 800c20e:	f104 0020 	add.w	r0, r4, #32
 800c212:	4798      	blx	r3
 800c214:	f004 fb50 	bl	80108b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 800c218:	6843      	ldr	r3, [r0, #4]
 800c21a:	4631      	mov	r1, r6
 800c21c:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 800c220:	689b      	ldr	r3, [r3, #8]
 800c222:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c226:	4718      	bx	r3
 800c228:	462a      	mov	r2, r5
 800c22a:	4628      	mov	r0, r5
 800c22c:	e7e5      	b.n	800c1fa <_Odometry__cdr_serialize+0x22>
 800c22e:	4770      	bx	lr

0800c230 <_Odometry__max_serialized_size>:
 800c230:	b510      	push	{r4, lr}
 800c232:	b082      	sub	sp, #8
 800c234:	2301      	movs	r3, #1
 800c236:	2100      	movs	r1, #0
 800c238:	f10d 0007 	add.w	r0, sp, #7
 800c23c:	f88d 3007 	strb.w	r3, [sp, #7]
 800c240:	f004 f90a 	bl	8010458 <max_serialized_size_std_msgs__msg__Header>
 800c244:	2300      	movs	r3, #0
 800c246:	4601      	mov	r1, r0
 800c248:	4604      	mov	r4, r0
 800c24a:	f10d 0007 	add.w	r0, sp, #7
 800c24e:	f88d 3007 	strb.w	r3, [sp, #7]
 800c252:	f004 fab1 	bl	80107b8 <max_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 800c256:	4404      	add	r4, r0
 800c258:	4621      	mov	r1, r4
 800c25a:	f10d 0007 	add.w	r0, sp, #7
 800c25e:	f004 fb1b 	bl	8010898 <max_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 800c262:	4420      	add	r0, r4
 800c264:	b002      	add	sp, #8
 800c266:	bd10      	pop	{r4, pc}

0800c268 <_Odometry__get_serialized_size>:
 800c268:	b5d0      	push	{r4, r6, r7, lr}
 800c26a:	4604      	mov	r4, r0
 800c26c:	b1b8      	cbz	r0, 800c29e <_Odometry__get_serialized_size+0x36>
 800c26e:	2100      	movs	r1, #0
 800c270:	f004 f87a 	bl	8010368 <get_serialized_size_std_msgs__msg__Header>
 800c274:	2104      	movs	r1, #4
 800c276:	4607      	mov	r7, r0
 800c278:	f7ff feac 	bl	800bfd4 <ucdr_alignment>
 800c27c:	69a3      	ldr	r3, [r4, #24]
 800c27e:	1d5a      	adds	r2, r3, #5
 800c280:	19d3      	adds	r3, r2, r7
 800c282:	4606      	mov	r6, r0
 800c284:	441e      	add	r6, r3
 800c286:	4631      	mov	r1, r6
 800c288:	f104 0020 	add.w	r0, r4, #32
 800c28c:	f004 fa38 	bl	8010700 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 800c290:	4406      	add	r6, r0
 800c292:	4631      	mov	r1, r6
 800c294:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 800c298:	f004 faa2 	bl	80107e0 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 800c29c:	4430      	add	r0, r6
 800c29e:	bdd0      	pop	{r4, r6, r7, pc}

0800c2a0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800c2a0:	4800      	ldr	r0, [pc, #0]	@ (800c2a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x4>)
 800c2a2:	4770      	bx	lr
 800c2a4:	200002e4 	.word	0x200002e4

0800c2a8 <rcl_get_zero_initialized_context>:
 800c2a8:	4a03      	ldr	r2, [pc, #12]	@ (800c2b8 <rcl_get_zero_initialized_context+0x10>)
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c2b0:	e883 0003 	stmia.w	r3, {r0, r1}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	4770      	bx	lr
 800c2b8:	0801b414 	.word	0x0801b414

0800c2bc <rcl_context_is_valid>:
 800c2bc:	b118      	cbz	r0, 800c2c6 <rcl_context_is_valid+0xa>
 800c2be:	6840      	ldr	r0, [r0, #4]
 800c2c0:	3800      	subs	r0, #0
 800c2c2:	bf18      	it	ne
 800c2c4:	2001      	movne	r0, #1
 800c2c6:	4770      	bx	lr

0800c2c8 <rcl_context_get_rmw_context>:
 800c2c8:	b110      	cbz	r0, 800c2d0 <rcl_context_get_rmw_context+0x8>
 800c2ca:	6800      	ldr	r0, [r0, #0]
 800c2cc:	b100      	cbz	r0, 800c2d0 <rcl_context_get_rmw_context+0x8>
 800c2ce:	3028      	adds	r0, #40	@ 0x28
 800c2d0:	4770      	bx	lr
 800c2d2:	bf00      	nop

0800c2d4 <__cleanup_context>:
 800c2d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2d8:	4606      	mov	r6, r0
 800c2da:	6800      	ldr	r0, [r0, #0]
 800c2dc:	2300      	movs	r3, #0
 800c2de:	6073      	str	r3, [r6, #4]
 800c2e0:	2800      	cmp	r0, #0
 800c2e2:	d049      	beq.n	800c378 <__cleanup_context+0xa4>
 800c2e4:	6947      	ldr	r7, [r0, #20]
 800c2e6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800c2ea:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800c2ee:	b137      	cbz	r7, 800c2fe <__cleanup_context+0x2a>
 800c2f0:	3014      	adds	r0, #20
 800c2f2:	f000 f8cb 	bl	800c48c <rcl_init_options_fini>
 800c2f6:	4607      	mov	r7, r0
 800c2f8:	2800      	cmp	r0, #0
 800c2fa:	d144      	bne.n	800c386 <__cleanup_context+0xb2>
 800c2fc:	6830      	ldr	r0, [r6, #0]
 800c2fe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c300:	b143      	cbz	r3, 800c314 <__cleanup_context+0x40>
 800c302:	3028      	adds	r0, #40	@ 0x28
 800c304:	f002 ff3a 	bl	800f17c <rmw_context_fini>
 800c308:	b118      	cbz	r0, 800c312 <__cleanup_context+0x3e>
 800c30a:	2f00      	cmp	r7, #0
 800c30c:	d03e      	beq.n	800c38c <__cleanup_context+0xb8>
 800c30e:	f002 f94b 	bl	800e5a8 <rcutils_reset_error>
 800c312:	6830      	ldr	r0, [r6, #0]
 800c314:	6a03      	ldr	r3, [r0, #32]
 800c316:	b1db      	cbz	r3, 800c350 <__cleanup_context+0x7c>
 800c318:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800c31c:	2a01      	cmp	r2, #1
 800c31e:	f17c 0100 	sbcs.w	r1, ip, #0
 800c322:	db11      	blt.n	800c348 <__cleanup_context+0x74>
 800c324:	2400      	movs	r4, #0
 800c326:	4625      	mov	r5, r4
 800c328:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c32c:	4649      	mov	r1, r9
 800c32e:	b1b8      	cbz	r0, 800c360 <__cleanup_context+0x8c>
 800c330:	47c0      	blx	r8
 800c332:	6833      	ldr	r3, [r6, #0]
 800c334:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800c338:	3401      	adds	r4, #1
 800c33a:	f145 0500 	adc.w	r5, r5, #0
 800c33e:	4294      	cmp	r4, r2
 800c340:	eb75 010c 	sbcs.w	r1, r5, ip
 800c344:	6a1b      	ldr	r3, [r3, #32]
 800c346:	dbef      	blt.n	800c328 <__cleanup_context+0x54>
 800c348:	4618      	mov	r0, r3
 800c34a:	4649      	mov	r1, r9
 800c34c:	47c0      	blx	r8
 800c34e:	6830      	ldr	r0, [r6, #0]
 800c350:	4649      	mov	r1, r9
 800c352:	47c0      	blx	r8
 800c354:	2300      	movs	r3, #0
 800c356:	e9c6 3300 	strd	r3, r3, [r6]
 800c35a:	4638      	mov	r0, r7
 800c35c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c360:	3401      	adds	r4, #1
 800c362:	f145 0500 	adc.w	r5, r5, #0
 800c366:	4294      	cmp	r4, r2
 800c368:	eb75 010c 	sbcs.w	r1, r5, ip
 800c36c:	dbdc      	blt.n	800c328 <__cleanup_context+0x54>
 800c36e:	4618      	mov	r0, r3
 800c370:	4649      	mov	r1, r9
 800c372:	47c0      	blx	r8
 800c374:	6830      	ldr	r0, [r6, #0]
 800c376:	e7eb      	b.n	800c350 <__cleanup_context+0x7c>
 800c378:	4607      	mov	r7, r0
 800c37a:	2300      	movs	r3, #0
 800c37c:	e9c6 3300 	strd	r3, r3, [r6]
 800c380:	4638      	mov	r0, r7
 800c382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c386:	f002 f90f 	bl	800e5a8 <rcutils_reset_error>
 800c38a:	e7b7      	b.n	800c2fc <__cleanup_context+0x28>
 800c38c:	f008 fc0a 	bl	8014ba4 <rcl_convert_rmw_ret_to_rcl_ret>
 800c390:	4607      	mov	r7, r0
 800c392:	e7bc      	b.n	800c30e <__cleanup_context+0x3a>

0800c394 <rcl_context_fini>:
 800c394:	b178      	cbz	r0, 800c3b6 <rcl_context_fini+0x22>
 800c396:	b510      	push	{r4, lr}
 800c398:	4604      	mov	r4, r0
 800c39a:	6800      	ldr	r0, [r0, #0]
 800c39c:	b150      	cbz	r0, 800c3b4 <rcl_context_fini+0x20>
 800c39e:	6863      	ldr	r3, [r4, #4]
 800c3a0:	b93b      	cbnz	r3, 800c3b2 <rcl_context_fini+0x1e>
 800c3a2:	f002 f821 	bl	800e3e8 <rcutils_allocator_is_valid>
 800c3a6:	b120      	cbz	r0, 800c3b2 <rcl_context_fini+0x1e>
 800c3a8:	4620      	mov	r0, r4
 800c3aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3ae:	f7ff bf91 	b.w	800c2d4 <__cleanup_context>
 800c3b2:	200b      	movs	r0, #11
 800c3b4:	bd10      	pop	{r4, pc}
 800c3b6:	200b      	movs	r0, #11
 800c3b8:	4770      	bx	lr
 800c3ba:	bf00      	nop

0800c3bc <rcl_get_zero_initialized_init_options>:
 800c3bc:	2000      	movs	r0, #0
 800c3be:	4770      	bx	lr

0800c3c0 <rcl_init_options_init>:
 800c3c0:	b084      	sub	sp, #16
 800c3c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3c4:	b097      	sub	sp, #92	@ 0x5c
 800c3c6:	ae1d      	add	r6, sp, #116	@ 0x74
 800c3c8:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800c3cc:	2800      	cmp	r0, #0
 800c3ce:	d058      	beq.n	800c482 <rcl_init_options_init+0xc2>
 800c3d0:	6803      	ldr	r3, [r0, #0]
 800c3d2:	4605      	mov	r5, r0
 800c3d4:	b133      	cbz	r3, 800c3e4 <rcl_init_options_init+0x24>
 800c3d6:	2464      	movs	r4, #100	@ 0x64
 800c3d8:	4620      	mov	r0, r4
 800c3da:	b017      	add	sp, #92	@ 0x5c
 800c3dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c3e0:	b004      	add	sp, #16
 800c3e2:	4770      	bx	lr
 800c3e4:	4630      	mov	r0, r6
 800c3e6:	f001 ffff 	bl	800e3e8 <rcutils_allocator_is_valid>
 800c3ea:	2800      	cmp	r0, #0
 800c3ec:	d049      	beq.n	800c482 <rcl_init_options_init+0xc2>
 800c3ee:	46b4      	mov	ip, r6
 800c3f0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c3f4:	ac11      	add	r4, sp, #68	@ 0x44
 800c3f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c3f8:	f8dc 3000 	ldr.w	r3, [ip]
 800c3fc:	6023      	str	r3, [r4, #0]
 800c3fe:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800c400:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c402:	2050      	movs	r0, #80	@ 0x50
 800c404:	4798      	blx	r3
 800c406:	4604      	mov	r4, r0
 800c408:	6028      	str	r0, [r5, #0]
 800c40a:	2800      	cmp	r0, #0
 800c40c:	d03b      	beq.n	800c486 <rcl_init_options_init+0xc6>
 800c40e:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800c412:	4686      	mov	lr, r0
 800c414:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c418:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c41c:	f8dc 3000 	ldr.w	r3, [ip]
 800c420:	f8ce 3000 	str.w	r3, [lr]
 800c424:	a802      	add	r0, sp, #8
 800c426:	f002 fa83 	bl	800e930 <rmw_get_zero_initialized_init_options>
 800c42a:	f10d 0e08 	add.w	lr, sp, #8
 800c42e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c432:	f104 0c18 	add.w	ip, r4, #24
 800c436:	682f      	ldr	r7, [r5, #0]
 800c438:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c43c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c440:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c444:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c448:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c44c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800c450:	ac20      	add	r4, sp, #128	@ 0x80
 800c452:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c456:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c45a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c45e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800c462:	f107 0018 	add.w	r0, r7, #24
 800c466:	f002 fbcd 	bl	800ec04 <rmw_init_options_init>
 800c46a:	4604      	mov	r4, r0
 800c46c:	2800      	cmp	r0, #0
 800c46e:	d0b3      	beq.n	800c3d8 <rcl_init_options_init+0x18>
 800c470:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800c472:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800c474:	6828      	ldr	r0, [r5, #0]
 800c476:	4798      	blx	r3
 800c478:	4620      	mov	r0, r4
 800c47a:	f008 fb93 	bl	8014ba4 <rcl_convert_rmw_ret_to_rcl_ret>
 800c47e:	4604      	mov	r4, r0
 800c480:	e7aa      	b.n	800c3d8 <rcl_init_options_init+0x18>
 800c482:	240b      	movs	r4, #11
 800c484:	e7a8      	b.n	800c3d8 <rcl_init_options_init+0x18>
 800c486:	240a      	movs	r4, #10
 800c488:	e7a6      	b.n	800c3d8 <rcl_init_options_init+0x18>
 800c48a:	bf00      	nop

0800c48c <rcl_init_options_fini>:
 800c48c:	b530      	push	{r4, r5, lr}
 800c48e:	b087      	sub	sp, #28
 800c490:	b1f0      	cbz	r0, 800c4d0 <rcl_init_options_fini+0x44>
 800c492:	6803      	ldr	r3, [r0, #0]
 800c494:	4604      	mov	r4, r0
 800c496:	b1db      	cbz	r3, 800c4d0 <rcl_init_options_fini+0x44>
 800c498:	469c      	mov	ip, r3
 800c49a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c49e:	f10d 0e04 	add.w	lr, sp, #4
 800c4a2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c4a6:	f8dc 3000 	ldr.w	r3, [ip]
 800c4aa:	f8ce 3000 	str.w	r3, [lr]
 800c4ae:	a801      	add	r0, sp, #4
 800c4b0:	f001 ff9a 	bl	800e3e8 <rcutils_allocator_is_valid>
 800c4b4:	b160      	cbz	r0, 800c4d0 <rcl_init_options_fini+0x44>
 800c4b6:	6820      	ldr	r0, [r4, #0]
 800c4b8:	3018      	adds	r0, #24
 800c4ba:	f002 fc79 	bl	800edb0 <rmw_init_options_fini>
 800c4be:	4605      	mov	r5, r0
 800c4c0:	b950      	cbnz	r0, 800c4d8 <rcl_init_options_fini+0x4c>
 800c4c2:	6820      	ldr	r0, [r4, #0]
 800c4c4:	9b02      	ldr	r3, [sp, #8]
 800c4c6:	9905      	ldr	r1, [sp, #20]
 800c4c8:	4798      	blx	r3
 800c4ca:	4628      	mov	r0, r5
 800c4cc:	b007      	add	sp, #28
 800c4ce:	bd30      	pop	{r4, r5, pc}
 800c4d0:	250b      	movs	r5, #11
 800c4d2:	4628      	mov	r0, r5
 800c4d4:	b007      	add	sp, #28
 800c4d6:	bd30      	pop	{r4, r5, pc}
 800c4d8:	f008 fb64 	bl	8014ba4 <rcl_convert_rmw_ret_to_rcl_ret>
 800c4dc:	4605      	mov	r5, r0
 800c4de:	e7f8      	b.n	800c4d2 <rcl_init_options_fini+0x46>

0800c4e0 <rcl_init_options_copy>:
 800c4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4e4:	b094      	sub	sp, #80	@ 0x50
 800c4e6:	2800      	cmp	r0, #0
 800c4e8:	d058      	beq.n	800c59c <rcl_init_options_copy+0xbc>
 800c4ea:	4604      	mov	r4, r0
 800c4ec:	6800      	ldr	r0, [r0, #0]
 800c4ee:	2800      	cmp	r0, #0
 800c4f0:	d054      	beq.n	800c59c <rcl_init_options_copy+0xbc>
 800c4f2:	460e      	mov	r6, r1
 800c4f4:	f001 ff78 	bl	800e3e8 <rcutils_allocator_is_valid>
 800c4f8:	2800      	cmp	r0, #0
 800c4fa:	d04f      	beq.n	800c59c <rcl_init_options_copy+0xbc>
 800c4fc:	2e00      	cmp	r6, #0
 800c4fe:	d04d      	beq.n	800c59c <rcl_init_options_copy+0xbc>
 800c500:	6833      	ldr	r3, [r6, #0]
 800c502:	b123      	cbz	r3, 800c50e <rcl_init_options_copy+0x2e>
 800c504:	2464      	movs	r4, #100	@ 0x64
 800c506:	4620      	mov	r0, r4
 800c508:	b014      	add	sp, #80	@ 0x50
 800c50a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c50e:	6827      	ldr	r7, [r4, #0]
 800c510:	46bc      	mov	ip, r7
 800c512:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c516:	ad0f      	add	r5, sp, #60	@ 0x3c
 800c518:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c51a:	f8dc 3000 	ldr.w	r3, [ip]
 800c51e:	f8d7 8000 	ldr.w	r8, [r7]
 800c522:	602b      	str	r3, [r5, #0]
 800c524:	4619      	mov	r1, r3
 800c526:	2050      	movs	r0, #80	@ 0x50
 800c528:	47c0      	blx	r8
 800c52a:	4605      	mov	r5, r0
 800c52c:	6030      	str	r0, [r6, #0]
 800c52e:	b3d0      	cbz	r0, 800c5a6 <rcl_init_options_copy+0xc6>
 800c530:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800c534:	4686      	mov	lr, r0
 800c536:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c53a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c53e:	f8dc 3000 	ldr.w	r3, [ip]
 800c542:	f8ce 3000 	str.w	r3, [lr]
 800c546:	4668      	mov	r0, sp
 800c548:	f002 f9f2 	bl	800e930 <rmw_get_zero_initialized_init_options>
 800c54c:	46ee      	mov	lr, sp
 800c54e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c552:	f105 0c18 	add.w	ip, r5, #24
 800c556:	6824      	ldr	r4, [r4, #0]
 800c558:	6835      	ldr	r5, [r6, #0]
 800c55a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c55e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c562:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c566:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c56a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c56e:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800c572:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c576:	f104 0018 	add.w	r0, r4, #24
 800c57a:	f105 0118 	add.w	r1, r5, #24
 800c57e:	f002 fba3 	bl	800ecc8 <rmw_init_options_copy>
 800c582:	4604      	mov	r4, r0
 800c584:	2800      	cmp	r0, #0
 800c586:	d0be      	beq.n	800c506 <rcl_init_options_copy+0x26>
 800c588:	f001 fff8 	bl	800e57c <rcutils_get_error_string>
 800c58c:	f002 f80c 	bl	800e5a8 <rcutils_reset_error>
 800c590:	4630      	mov	r0, r6
 800c592:	f7ff ff7b 	bl	800c48c <rcl_init_options_fini>
 800c596:	b140      	cbz	r0, 800c5aa <rcl_init_options_copy+0xca>
 800c598:	4604      	mov	r4, r0
 800c59a:	e7b4      	b.n	800c506 <rcl_init_options_copy+0x26>
 800c59c:	240b      	movs	r4, #11
 800c59e:	4620      	mov	r0, r4
 800c5a0:	b014      	add	sp, #80	@ 0x50
 800c5a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5a6:	240a      	movs	r4, #10
 800c5a8:	e7ad      	b.n	800c506 <rcl_init_options_copy+0x26>
 800c5aa:	4620      	mov	r0, r4
 800c5ac:	b014      	add	sp, #80	@ 0x50
 800c5ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5b2:	f008 baf7 	b.w	8014ba4 <rcl_convert_rmw_ret_to_rcl_ret>
 800c5b6:	bf00      	nop

0800c5b8 <rcl_init_options_set_domain_id>:
 800c5b8:	b120      	cbz	r0, 800c5c4 <rcl_init_options_set_domain_id+0xc>
 800c5ba:	6803      	ldr	r3, [r0, #0]
 800c5bc:	b113      	cbz	r3, 800c5c4 <rcl_init_options_set_domain_id+0xc>
 800c5be:	6259      	str	r1, [r3, #36]	@ 0x24
 800c5c0:	2000      	movs	r0, #0
 800c5c2:	4770      	bx	lr
 800c5c4:	200b      	movs	r0, #11
 800c5c6:	4770      	bx	lr

0800c5c8 <rcl_get_zero_initialized_node>:
 800c5c8:	4a03      	ldr	r2, [pc, #12]	@ (800c5d8 <rcl_get_zero_initialized_node+0x10>)
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c5d0:	e883 0003 	stmia.w	r3, {r0, r1}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	4770      	bx	lr
 800c5d8:	0801b41c 	.word	0x0801b41c

0800c5dc <rcl_node_init>:
 800c5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5e0:	b0a9      	sub	sp, #164	@ 0xa4
 800c5e2:	4604      	mov	r4, r0
 800c5e4:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 800c5e8:	a823      	add	r0, sp, #140	@ 0x8c
 800c5ea:	460e      	mov	r6, r1
 800c5ec:	4615      	mov	r5, r2
 800c5ee:	461f      	mov	r7, r3
 800c5f0:	f008 fbc8 	bl	8014d84 <rcl_guard_condition_get_default_options>
 800c5f4:	f1b8 0f00 	cmp.w	r8, #0
 800c5f8:	f000 80e6 	beq.w	800c7c8 <rcl_node_init+0x1ec>
 800c5fc:	4640      	mov	r0, r8
 800c5fe:	f001 fef3 	bl	800e3e8 <rcutils_allocator_is_valid>
 800c602:	2800      	cmp	r0, #0
 800c604:	f000 80e0 	beq.w	800c7c8 <rcl_node_init+0x1ec>
 800c608:	2e00      	cmp	r6, #0
 800c60a:	f000 80dd 	beq.w	800c7c8 <rcl_node_init+0x1ec>
 800c60e:	2d00      	cmp	r5, #0
 800c610:	f000 80da 	beq.w	800c7c8 <rcl_node_init+0x1ec>
 800c614:	2c00      	cmp	r4, #0
 800c616:	f000 80d7 	beq.w	800c7c8 <rcl_node_init+0x1ec>
 800c61a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c61e:	f1b9 0f00 	cmp.w	r9, #0
 800c622:	f040 80fd 	bne.w	800c820 <rcl_node_init+0x244>
 800c626:	2f00      	cmp	r7, #0
 800c628:	f000 80ce 	beq.w	800c7c8 <rcl_node_init+0x1ec>
 800c62c:	4638      	mov	r0, r7
 800c62e:	f7ff fe45 	bl	800c2bc <rcl_context_is_valid>
 800c632:	4682      	mov	sl, r0
 800c634:	2800      	cmp	r0, #0
 800c636:	f000 80cd 	beq.w	800c7d4 <rcl_node_init+0x1f8>
 800c63a:	464a      	mov	r2, r9
 800c63c:	a922      	add	r1, sp, #136	@ 0x88
 800c63e:	4630      	mov	r0, r6
 800c640:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 800c644:	f002 fa20 	bl	800ea88 <rmw_validate_node_name>
 800c648:	4681      	mov	r9, r0
 800c64a:	2800      	cmp	r0, #0
 800c64c:	f040 80be 	bne.w	800c7cc <rcl_node_init+0x1f0>
 800c650:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800c652:	2800      	cmp	r0, #0
 800c654:	f040 80f0 	bne.w	800c838 <rcl_node_init+0x25c>
 800c658:	4628      	mov	r0, r5
 800c65a:	f7f3 fde3 	bl	8000224 <strlen>
 800c65e:	2800      	cmp	r0, #0
 800c660:	f040 80bb 	bne.w	800c7da <rcl_node_init+0x1fe>
 800c664:	4d7c      	ldr	r5, [pc, #496]	@ (800c858 <rcl_node_init+0x27c>)
 800c666:	a922      	add	r1, sp, #136	@ 0x88
 800c668:	2200      	movs	r2, #0
 800c66a:	4628      	mov	r0, r5
 800c66c:	f002 f9ee 	bl	800ea4c <rmw_validate_namespace>
 800c670:	4681      	mov	r9, r0
 800c672:	2800      	cmp	r0, #0
 800c674:	f040 80aa 	bne.w	800c7cc <rcl_node_init+0x1f0>
 800c678:	4682      	mov	sl, r0
 800c67a:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800c67c:	2800      	cmp	r0, #0
 800c67e:	f040 80e0 	bne.w	800c842 <rcl_node_init+0x266>
 800c682:	f8d8 3000 	ldr.w	r3, [r8]
 800c686:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c68a:	2078      	movs	r0, #120	@ 0x78
 800c68c:	4798      	blx	r3
 800c68e:	4681      	mov	r9, r0
 800c690:	6060      	str	r0, [r4, #4]
 800c692:	2800      	cmp	r0, #0
 800c694:	f000 80ca 	beq.w	800c82c <rcl_node_init+0x250>
 800c698:	2200      	movs	r2, #0
 800c69a:	2300      	movs	r3, #0
 800c69c:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 800c6a0:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 800c6a4:	a808      	add	r0, sp, #32
 800c6a6:	f000 f939 	bl	800c91c <rcl_node_get_default_options>
 800c6aa:	a908      	add	r1, sp, #32
 800c6ac:	4648      	mov	r0, r9
 800c6ae:	2268      	movs	r2, #104	@ 0x68
 800c6b0:	f00d fb1f 	bl	8019cf2 <memcpy>
 800c6b4:	6861      	ldr	r1, [r4, #4]
 800c6b6:	6027      	str	r7, [r4, #0]
 800c6b8:	4640      	mov	r0, r8
 800c6ba:	f000 f93d 	bl	800c938 <rcl_node_options_copy>
 800c6be:	2800      	cmp	r0, #0
 800c6c0:	d158      	bne.n	800c774 <rcl_node_init+0x198>
 800c6c2:	4628      	mov	r0, r5
 800c6c4:	f7f3 fdae 	bl	8000224 <strlen>
 800c6c8:	4428      	add	r0, r5
 800c6ca:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800c6ce:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800c6d2:	2b2f      	cmp	r3, #47	@ 0x2f
 800c6d4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c6d8:	9300      	str	r3, [sp, #0]
 800c6da:	bf0c      	ite	eq
 800c6dc:	4b5f      	ldreq	r3, [pc, #380]	@ (800c85c <rcl_node_init+0x280>)
 800c6de:	4b60      	ldrne	r3, [pc, #384]	@ (800c860 <rcl_node_init+0x284>)
 800c6e0:	9302      	str	r3, [sp, #8]
 800c6e2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c6e6:	9301      	str	r3, [sp, #4]
 800c6e8:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800c6ec:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c6f0:	f001 ff76 	bl	800e5e0 <rcutils_format_string_limit>
 800c6f4:	6823      	ldr	r3, [r4, #0]
 800c6f6:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 800c6fa:	6818      	ldr	r0, [r3, #0]
 800c6fc:	4631      	mov	r1, r6
 800c6fe:	3028      	adds	r0, #40	@ 0x28
 800c700:	462a      	mov	r2, r5
 800c702:	6866      	ldr	r6, [r4, #4]
 800c704:	f002 fde6 	bl	800f2d4 <rmw_create_node>
 800c708:	6863      	ldr	r3, [r4, #4]
 800c70a:	66b0      	str	r0, [r6, #104]	@ 0x68
 800c70c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800c70e:	2800      	cmp	r0, #0
 800c710:	d032      	beq.n	800c778 <rcl_node_init+0x19c>
 800c712:	f002 fe73 	bl	800f3fc <rmw_node_get_graph_guard_condition>
 800c716:	4681      	mov	r9, r0
 800c718:	b360      	cbz	r0, 800c774 <rcl_node_init+0x198>
 800c71a:	f8d8 3000 	ldr.w	r3, [r8]
 800c71e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c722:	6866      	ldr	r6, [r4, #4]
 800c724:	2008      	movs	r0, #8
 800c726:	4798      	blx	r3
 800c728:	6863      	ldr	r3, [r4, #4]
 800c72a:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800c72c:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 800c730:	f1bb 0f00 	cmp.w	fp, #0
 800c734:	d020      	beq.n	800c778 <rcl_node_init+0x19c>
 800c736:	a806      	add	r0, sp, #24
 800c738:	f008 fa48 	bl	8014bcc <rcl_get_zero_initialized_guard_condition>
 800c73c:	a806      	add	r0, sp, #24
 800c73e:	c803      	ldmia	r0, {r0, r1}
 800c740:	6863      	ldr	r3, [r4, #4]
 800c742:	46c4      	mov	ip, r8
 800c744:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800c748:	e88b 0003 	stmia.w	fp, {r0, r1}
 800c74c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c750:	ae23      	add	r6, sp, #140	@ 0x8c
 800c752:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c754:	f8dc 3000 	ldr.w	r3, [ip]
 800c758:	6033      	str	r3, [r6, #0]
 800c75a:	ab28      	add	r3, sp, #160	@ 0xa0
 800c75c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800c760:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c764:	4649      	mov	r1, r9
 800c766:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c768:	463a      	mov	r2, r7
 800c76a:	4670      	mov	r0, lr
 800c76c:	f008 fa84 	bl	8014c78 <rcl_guard_condition_init_from_rmw>
 800c770:	4681      	mov	r9, r0
 800c772:	b328      	cbz	r0, 800c7c0 <rcl_node_init+0x1e4>
 800c774:	6863      	ldr	r3, [r4, #4]
 800c776:	b1f3      	cbz	r3, 800c7b6 <rcl_node_init+0x1da>
 800c778:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800c77a:	b128      	cbz	r0, 800c788 <rcl_node_init+0x1ac>
 800c77c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c780:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c784:	4798      	blx	r3
 800c786:	6863      	ldr	r3, [r4, #4]
 800c788:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800c78a:	b110      	cbz	r0, 800c792 <rcl_node_init+0x1b6>
 800c78c:	f002 fdba 	bl	800f304 <rmw_destroy_node>
 800c790:	6863      	ldr	r3, [r4, #4]
 800c792:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800c794:	b148      	cbz	r0, 800c7aa <rcl_node_init+0x1ce>
 800c796:	f008 facf 	bl	8014d38 <rcl_guard_condition_fini>
 800c79a:	6863      	ldr	r3, [r4, #4]
 800c79c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c7a0:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800c7a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c7a6:	4798      	blx	r3
 800c7a8:	6863      	ldr	r3, [r4, #4]
 800c7aa:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c7b4:	4798      	blx	r3
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	e9c4 3300 	strd	r3, r3, [r4]
 800c7bc:	f04f 0901 	mov.w	r9, #1
 800c7c0:	f1ba 0f00 	cmp.w	sl, #0
 800c7c4:	d125      	bne.n	800c812 <rcl_node_init+0x236>
 800c7c6:	e001      	b.n	800c7cc <rcl_node_init+0x1f0>
 800c7c8:	f04f 090b 	mov.w	r9, #11
 800c7cc:	4648      	mov	r0, r9
 800c7ce:	b029      	add	sp, #164	@ 0xa4
 800c7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7d4:	f04f 0965 	mov.w	r9, #101	@ 0x65
 800c7d8:	e7f8      	b.n	800c7cc <rcl_node_init+0x1f0>
 800c7da:	782b      	ldrb	r3, [r5, #0]
 800c7dc:	2b2f      	cmp	r3, #47	@ 0x2f
 800c7de:	f43f af42 	beq.w	800c666 <rcl_node_init+0x8a>
 800c7e2:	9503      	str	r5, [sp, #12]
 800c7e4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c7e8:	9300      	str	r3, [sp, #0]
 800c7ea:	4b1e      	ldr	r3, [pc, #120]	@ (800c864 <rcl_node_init+0x288>)
 800c7ec:	9302      	str	r3, [sp, #8]
 800c7ee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c7f2:	9301      	str	r3, [sp, #4]
 800c7f4:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800c7f8:	f001 fef2 	bl	800e5e0 <rcutils_format_string_limit>
 800c7fc:	4605      	mov	r5, r0
 800c7fe:	b340      	cbz	r0, 800c852 <rcl_node_init+0x276>
 800c800:	2200      	movs	r2, #0
 800c802:	a922      	add	r1, sp, #136	@ 0x88
 800c804:	9222      	str	r2, [sp, #136]	@ 0x88
 800c806:	f002 f921 	bl	800ea4c <rmw_validate_namespace>
 800c80a:	4681      	mov	r9, r0
 800c80c:	2800      	cmp	r0, #0
 800c80e:	f43f af34 	beq.w	800c67a <rcl_node_init+0x9e>
 800c812:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c816:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c81a:	4628      	mov	r0, r5
 800c81c:	4798      	blx	r3
 800c81e:	e7d5      	b.n	800c7cc <rcl_node_init+0x1f0>
 800c820:	f04f 0964 	mov.w	r9, #100	@ 0x64
 800c824:	4648      	mov	r0, r9
 800c826:	b029      	add	sp, #164	@ 0xa4
 800c828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c82c:	f04f 090a 	mov.w	r9, #10
 800c830:	f1ba 0f00 	cmp.w	sl, #0
 800c834:	d1ed      	bne.n	800c812 <rcl_node_init+0x236>
 800c836:	e7c9      	b.n	800c7cc <rcl_node_init+0x1f0>
 800c838:	f002 f978 	bl	800eb2c <rmw_node_name_validation_result_string>
 800c83c:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 800c840:	e7c4      	b.n	800c7cc <rcl_node_init+0x1f0>
 800c842:	f002 f915 	bl	800ea70 <rmw_namespace_validation_result_string>
 800c846:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 800c84a:	f1ba 0f00 	cmp.w	sl, #0
 800c84e:	d1e0      	bne.n	800c812 <rcl_node_init+0x236>
 800c850:	e7bc      	b.n	800c7cc <rcl_node_init+0x1f0>
 800c852:	f04f 090a 	mov.w	r9, #10
 800c856:	e7b9      	b.n	800c7cc <rcl_node_init+0x1f0>
 800c858:	0801ad04 	.word	0x0801ad04
 800c85c:	0801ad0c 	.word	0x0801ad0c
 800c860:	0801ad14 	.word	0x0801ad14
 800c864:	0801ad08 	.word	0x0801ad08

0800c868 <rcl_node_fini>:
 800c868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c86a:	b320      	cbz	r0, 800c8b6 <rcl_node_fini+0x4e>
 800c86c:	6845      	ldr	r5, [r0, #4]
 800c86e:	4604      	mov	r4, r0
 800c870:	b1fd      	cbz	r5, 800c8b2 <rcl_node_fini+0x4a>
 800c872:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 800c874:	686f      	ldr	r7, [r5, #4]
 800c876:	692e      	ldr	r6, [r5, #16]
 800c878:	f002 fd44 	bl	800f304 <rmw_destroy_node>
 800c87c:	6863      	ldr	r3, [r4, #4]
 800c87e:	4605      	mov	r5, r0
 800c880:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800c882:	f008 fa59 	bl	8014d38 <rcl_guard_condition_fini>
 800c886:	ea55 0300 	orrs.w	r3, r5, r0
 800c88a:	6863      	ldr	r3, [r4, #4]
 800c88c:	4631      	mov	r1, r6
 800c88e:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800c890:	bf14      	ite	ne
 800c892:	2501      	movne	r5, #1
 800c894:	2500      	moveq	r5, #0
 800c896:	47b8      	blx	r7
 800c898:	6863      	ldr	r3, [r4, #4]
 800c89a:	4631      	mov	r1, r6
 800c89c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800c89e:	47b8      	blx	r7
 800c8a0:	6863      	ldr	r3, [r4, #4]
 800c8a2:	4631      	mov	r1, r6
 800c8a4:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800c8a6:	47b8      	blx	r7
 800c8a8:	6860      	ldr	r0, [r4, #4]
 800c8aa:	4631      	mov	r1, r6
 800c8ac:	47b8      	blx	r7
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	6063      	str	r3, [r4, #4]
 800c8b2:	4628      	mov	r0, r5
 800c8b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8b6:	25c8      	movs	r5, #200	@ 0xc8
 800c8b8:	4628      	mov	r0, r5
 800c8ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c8bc <rcl_node_is_valid_except_context>:
 800c8bc:	b128      	cbz	r0, 800c8ca <rcl_node_is_valid_except_context+0xe>
 800c8be:	6840      	ldr	r0, [r0, #4]
 800c8c0:	b118      	cbz	r0, 800c8ca <rcl_node_is_valid_except_context+0xe>
 800c8c2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800c8c4:	3800      	subs	r0, #0
 800c8c6:	bf18      	it	ne
 800c8c8:	2001      	movne	r0, #1
 800c8ca:	4770      	bx	lr

0800c8cc <rcl_node_is_valid>:
 800c8cc:	b130      	cbz	r0, 800c8dc <rcl_node_is_valid+0x10>
 800c8ce:	6843      	ldr	r3, [r0, #4]
 800c8d0:	b123      	cbz	r3, 800c8dc <rcl_node_is_valid+0x10>
 800c8d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c8d4:	b113      	cbz	r3, 800c8dc <rcl_node_is_valid+0x10>
 800c8d6:	6800      	ldr	r0, [r0, #0]
 800c8d8:	f7ff bcf0 	b.w	800c2bc <rcl_context_is_valid>
 800c8dc:	2000      	movs	r0, #0
 800c8de:	4770      	bx	lr

0800c8e0 <rcl_node_get_name>:
 800c8e0:	b120      	cbz	r0, 800c8ec <rcl_node_get_name+0xc>
 800c8e2:	6840      	ldr	r0, [r0, #4]
 800c8e4:	b110      	cbz	r0, 800c8ec <rcl_node_get_name+0xc>
 800c8e6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800c8e8:	b100      	cbz	r0, 800c8ec <rcl_node_get_name+0xc>
 800c8ea:	6880      	ldr	r0, [r0, #8]
 800c8ec:	4770      	bx	lr
 800c8ee:	bf00      	nop

0800c8f0 <rcl_node_get_namespace>:
 800c8f0:	b120      	cbz	r0, 800c8fc <rcl_node_get_namespace+0xc>
 800c8f2:	6840      	ldr	r0, [r0, #4]
 800c8f4:	b110      	cbz	r0, 800c8fc <rcl_node_get_namespace+0xc>
 800c8f6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800c8f8:	b100      	cbz	r0, 800c8fc <rcl_node_get_namespace+0xc>
 800c8fa:	68c0      	ldr	r0, [r0, #12]
 800c8fc:	4770      	bx	lr
 800c8fe:	bf00      	nop

0800c900 <rcl_node_get_options>:
 800c900:	b128      	cbz	r0, 800c90e <rcl_node_get_options+0xe>
 800c902:	6840      	ldr	r0, [r0, #4]
 800c904:	b118      	cbz	r0, 800c90e <rcl_node_get_options+0xe>
 800c906:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800c908:	2b00      	cmp	r3, #0
 800c90a:	bf08      	it	eq
 800c90c:	2000      	moveq	r0, #0
 800c90e:	4770      	bx	lr

0800c910 <rcl_node_get_rmw_handle>:
 800c910:	b110      	cbz	r0, 800c918 <rcl_node_get_rmw_handle+0x8>
 800c912:	6840      	ldr	r0, [r0, #4]
 800c914:	b100      	cbz	r0, 800c918 <rcl_node_get_rmw_handle+0x8>
 800c916:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800c918:	4770      	bx	lr
 800c91a:	bf00      	nop

0800c91c <rcl_node_get_default_options>:
 800c91c:	b510      	push	{r4, lr}
 800c91e:	2268      	movs	r2, #104	@ 0x68
 800c920:	4604      	mov	r4, r0
 800c922:	2100      	movs	r1, #0
 800c924:	f00d f8be 	bl	8019aa4 <memset>
 800c928:	4620      	mov	r0, r4
 800c92a:	f001 fd4f 	bl	800e3cc <rcutils_get_default_allocator>
 800c92e:	2301      	movs	r3, #1
 800c930:	7523      	strb	r3, [r4, #20]
 800c932:	4620      	mov	r0, r4
 800c934:	bd10      	pop	{r4, pc}
 800c936:	bf00      	nop

0800c938 <rcl_node_options_copy>:
 800c938:	b1d0      	cbz	r0, 800c970 <rcl_node_options_copy+0x38>
 800c93a:	b570      	push	{r4, r5, r6, lr}
 800c93c:	460c      	mov	r4, r1
 800c93e:	b1a9      	cbz	r1, 800c96c <rcl_node_options_copy+0x34>
 800c940:	4288      	cmp	r0, r1
 800c942:	4684      	mov	ip, r0
 800c944:	d012      	beq.n	800c96c <rcl_node_options_copy+0x34>
 800c946:	4605      	mov	r5, r0
 800c948:	8a86      	ldrh	r6, [r0, #20]
 800c94a:	468e      	mov	lr, r1
 800c94c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c94e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c952:	682b      	ldr	r3, [r5, #0]
 800c954:	f8ce 3000 	str.w	r3, [lr]
 800c958:	f10c 0118 	add.w	r1, ip, #24
 800c95c:	2250      	movs	r2, #80	@ 0x50
 800c95e:	82a6      	strh	r6, [r4, #20]
 800c960:	f104 0018 	add.w	r0, r4, #24
 800c964:	f00d f9c5 	bl	8019cf2 <memcpy>
 800c968:	2000      	movs	r0, #0
 800c96a:	bd70      	pop	{r4, r5, r6, pc}
 800c96c:	200b      	movs	r0, #11
 800c96e:	bd70      	pop	{r4, r5, r6, pc}
 800c970:	200b      	movs	r0, #11
 800c972:	4770      	bx	lr

0800c974 <rcl_get_zero_initialized_publisher>:
 800c974:	4b01      	ldr	r3, [pc, #4]	@ (800c97c <rcl_get_zero_initialized_publisher+0x8>)
 800c976:	6818      	ldr	r0, [r3, #0]
 800c978:	4770      	bx	lr
 800c97a:	bf00      	nop
 800c97c:	0801b424 	.word	0x0801b424

0800c980 <rcl_publisher_init>:
 800c980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c984:	b088      	sub	sp, #32
 800c986:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800c988:	2d00      	cmp	r5, #0
 800c98a:	d069      	beq.n	800ca60 <rcl_publisher_init+0xe0>
 800c98c:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800c990:	4604      	mov	r4, r0
 800c992:	4648      	mov	r0, r9
 800c994:	460e      	mov	r6, r1
 800c996:	4690      	mov	r8, r2
 800c998:	461f      	mov	r7, r3
 800c99a:	f001 fd25 	bl	800e3e8 <rcutils_allocator_is_valid>
 800c99e:	2800      	cmp	r0, #0
 800c9a0:	d05e      	beq.n	800ca60 <rcl_publisher_init+0xe0>
 800c9a2:	2c00      	cmp	r4, #0
 800c9a4:	d05c      	beq.n	800ca60 <rcl_publisher_init+0xe0>
 800c9a6:	f8d4 a000 	ldr.w	sl, [r4]
 800c9aa:	f1ba 0f00 	cmp.w	sl, #0
 800c9ae:	d004      	beq.n	800c9ba <rcl_publisher_init+0x3a>
 800c9b0:	2764      	movs	r7, #100	@ 0x64
 800c9b2:	4638      	mov	r0, r7
 800c9b4:	b008      	add	sp, #32
 800c9b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9ba:	4630      	mov	r0, r6
 800c9bc:	f7ff ff86 	bl	800c8cc <rcl_node_is_valid>
 800c9c0:	2800      	cmp	r0, #0
 800c9c2:	d052      	beq.n	800ca6a <rcl_publisher_init+0xea>
 800c9c4:	f1b8 0f00 	cmp.w	r8, #0
 800c9c8:	d04a      	beq.n	800ca60 <rcl_publisher_init+0xe0>
 800c9ca:	2f00      	cmp	r7, #0
 800c9cc:	d048      	beq.n	800ca60 <rcl_publisher_init+0xe0>
 800c9ce:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800c9d2:	aa07      	add	r2, sp, #28
 800c9d4:	9205      	str	r2, [sp, #20]
 800c9d6:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800c9da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c9de:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c9e2:	f8cd a01c 	str.w	sl, [sp, #28]
 800c9e6:	4639      	mov	r1, r7
 800c9e8:	e899 000c 	ldmia.w	r9, {r2, r3}
 800c9ec:	4630      	mov	r0, r6
 800c9ee:	f008 fb29 	bl	8015044 <rcl_node_resolve_name>
 800c9f2:	4607      	mov	r7, r0
 800c9f4:	2800      	cmp	r0, #0
 800c9f6:	d14f      	bne.n	800ca98 <rcl_publisher_init+0x118>
 800c9f8:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800c9fa:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c9fc:	20c8      	movs	r0, #200	@ 0xc8
 800c9fe:	4798      	blx	r3
 800ca00:	6020      	str	r0, [r4, #0]
 800ca02:	2800      	cmp	r0, #0
 800ca04:	d04e      	beq.n	800caa4 <rcl_publisher_init+0x124>
 800ca06:	4630      	mov	r0, r6
 800ca08:	f7ff ff82 	bl	800c910 <rcl_node_get_rmw_handle>
 800ca0c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800ca10:	9300      	str	r3, [sp, #0]
 800ca12:	9a07      	ldr	r2, [sp, #28]
 800ca14:	6827      	ldr	r7, [r4, #0]
 800ca16:	462b      	mov	r3, r5
 800ca18:	4641      	mov	r1, r8
 800ca1a:	f002 fd59 	bl	800f4d0 <rmw_create_publisher>
 800ca1e:	6823      	ldr	r3, [r4, #0]
 800ca20:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800ca24:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800ca28:	b370      	cbz	r0, 800ca88 <rcl_publisher_init+0x108>
 800ca2a:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800ca2e:	f002 fe2d 	bl	800f68c <rmw_publisher_get_actual_qos>
 800ca32:	6823      	ldr	r3, [r4, #0]
 800ca34:	4607      	mov	r7, r0
 800ca36:	b9d0      	cbnz	r0, 800ca6e <rcl_publisher_init+0xee>
 800ca38:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800ca3c:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800ca40:	4629      	mov	r1, r5
 800ca42:	2270      	movs	r2, #112	@ 0x70
 800ca44:	4618      	mov	r0, r3
 800ca46:	f00d f954 	bl	8019cf2 <memcpy>
 800ca4a:	6832      	ldr	r2, [r6, #0]
 800ca4c:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800ca50:	9807      	ldr	r0, [sp, #28]
 800ca52:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800ca54:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800ca56:	4798      	blx	r3
 800ca58:	4638      	mov	r0, r7
 800ca5a:	b008      	add	sp, #32
 800ca5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca60:	270b      	movs	r7, #11
 800ca62:	4638      	mov	r0, r7
 800ca64:	b008      	add	sp, #32
 800ca66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca6a:	27c8      	movs	r7, #200	@ 0xc8
 800ca6c:	e7a1      	b.n	800c9b2 <rcl_publisher_init+0x32>
 800ca6e:	b18b      	cbz	r3, 800ca94 <rcl_publisher_init+0x114>
 800ca70:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800ca74:	b142      	cbz	r2, 800ca88 <rcl_publisher_init+0x108>
 800ca76:	4630      	mov	r0, r6
 800ca78:	f7ff ff4a 	bl	800c910 <rcl_node_get_rmw_handle>
 800ca7c:	6823      	ldr	r3, [r4, #0]
 800ca7e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800ca82:	f002 fe13 	bl	800f6ac <rmw_destroy_publisher>
 800ca86:	6823      	ldr	r3, [r4, #0]
 800ca88:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800ca8a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	4790      	blx	r2
 800ca90:	2300      	movs	r3, #0
 800ca92:	6023      	str	r3, [r4, #0]
 800ca94:	2701      	movs	r7, #1
 800ca96:	e7db      	b.n	800ca50 <rcl_publisher_init+0xd0>
 800ca98:	2867      	cmp	r0, #103	@ 0x67
 800ca9a:	d0d9      	beq.n	800ca50 <rcl_publisher_init+0xd0>
 800ca9c:	2869      	cmp	r0, #105	@ 0x69
 800ca9e:	d003      	beq.n	800caa8 <rcl_publisher_init+0x128>
 800caa0:	280a      	cmp	r0, #10
 800caa2:	d1f7      	bne.n	800ca94 <rcl_publisher_init+0x114>
 800caa4:	270a      	movs	r7, #10
 800caa6:	e7d3      	b.n	800ca50 <rcl_publisher_init+0xd0>
 800caa8:	2767      	movs	r7, #103	@ 0x67
 800caaa:	e7d1      	b.n	800ca50 <rcl_publisher_init+0xd0>

0800caac <rcl_publisher_fini>:
 800caac:	b570      	push	{r4, r5, r6, lr}
 800caae:	b300      	cbz	r0, 800caf2 <rcl_publisher_fini+0x46>
 800cab0:	4604      	mov	r4, r0
 800cab2:	4608      	mov	r0, r1
 800cab4:	460d      	mov	r5, r1
 800cab6:	f7ff ff01 	bl	800c8bc <rcl_node_is_valid_except_context>
 800caba:	b1f0      	cbz	r0, 800cafa <rcl_publisher_fini+0x4e>
 800cabc:	6823      	ldr	r3, [r4, #0]
 800cabe:	b1ab      	cbz	r3, 800caec <rcl_publisher_fini+0x40>
 800cac0:	4628      	mov	r0, r5
 800cac2:	6d5e      	ldr	r6, [r3, #84]	@ 0x54
 800cac4:	6e1d      	ldr	r5, [r3, #96]	@ 0x60
 800cac6:	f7ff ff23 	bl	800c910 <rcl_node_get_rmw_handle>
 800caca:	b1c8      	cbz	r0, 800cb00 <rcl_publisher_fini+0x54>
 800cacc:	6823      	ldr	r3, [r4, #0]
 800cace:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800cad2:	f002 fdeb 	bl	800f6ac <rmw_destroy_publisher>
 800cad6:	4603      	mov	r3, r0
 800cad8:	4629      	mov	r1, r5
 800cada:	6820      	ldr	r0, [r4, #0]
 800cadc:	1e1d      	subs	r5, r3, #0
 800cade:	bf18      	it	ne
 800cae0:	2501      	movne	r5, #1
 800cae2:	47b0      	blx	r6
 800cae4:	2300      	movs	r3, #0
 800cae6:	6023      	str	r3, [r4, #0]
 800cae8:	4628      	mov	r0, r5
 800caea:	bd70      	pop	{r4, r5, r6, pc}
 800caec:	461d      	mov	r5, r3
 800caee:	4628      	mov	r0, r5
 800caf0:	bd70      	pop	{r4, r5, r6, pc}
 800caf2:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 800caf6:	4628      	mov	r0, r5
 800caf8:	bd70      	pop	{r4, r5, r6, pc}
 800cafa:	25c8      	movs	r5, #200	@ 0xc8
 800cafc:	4628      	mov	r0, r5
 800cafe:	bd70      	pop	{r4, r5, r6, pc}
 800cb00:	250b      	movs	r5, #11
 800cb02:	e7f1      	b.n	800cae8 <rcl_publisher_fini+0x3c>

0800cb04 <rcl_publisher_get_default_options>:
 800cb04:	b570      	push	{r4, r5, r6, lr}
 800cb06:	4d14      	ldr	r5, [pc, #80]	@ (800cb58 <rcl_publisher_get_default_options+0x54>)
 800cb08:	4914      	ldr	r1, [pc, #80]	@ (800cb5c <rcl_publisher_get_default_options+0x58>)
 800cb0a:	b088      	sub	sp, #32
 800cb0c:	4604      	mov	r4, r0
 800cb0e:	2250      	movs	r2, #80	@ 0x50
 800cb10:	4628      	mov	r0, r5
 800cb12:	f00d f8ee 	bl	8019cf2 <memcpy>
 800cb16:	a802      	add	r0, sp, #8
 800cb18:	f001 fc58 	bl	800e3cc <rcutils_get_default_allocator>
 800cb1c:	f10d 0c08 	add.w	ip, sp, #8
 800cb20:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cb24:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800cb28:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cb2c:	466e      	mov	r6, sp
 800cb2e:	f8dc 3000 	ldr.w	r3, [ip]
 800cb32:	f8ce 3000 	str.w	r3, [lr]
 800cb36:	4630      	mov	r0, r6
 800cb38:	f001 ff0a 	bl	800e950 <rmw_get_default_publisher_options>
 800cb3c:	e896 0003 	ldmia.w	r6, {r0, r1}
 800cb40:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800cb44:	e883 0003 	stmia.w	r3, {r0, r1}
 800cb48:	2270      	movs	r2, #112	@ 0x70
 800cb4a:	4629      	mov	r1, r5
 800cb4c:	4620      	mov	r0, r4
 800cb4e:	f00d f8d0 	bl	8019cf2 <memcpy>
 800cb52:	4620      	mov	r0, r4
 800cb54:	b008      	add	sp, #32
 800cb56:	bd70      	pop	{r4, r5, r6, pc}
 800cb58:	2000cf08 	.word	0x2000cf08
 800cb5c:	0801b428 	.word	0x0801b428

0800cb60 <rcl_publish>:
 800cb60:	b1f8      	cbz	r0, 800cba2 <rcl_publish+0x42>
 800cb62:	6803      	ldr	r3, [r0, #0]
 800cb64:	b570      	push	{r4, r5, r6, lr}
 800cb66:	4604      	mov	r4, r0
 800cb68:	b1b3      	cbz	r3, 800cb98 <rcl_publish+0x38>
 800cb6a:	4616      	mov	r6, r2
 800cb6c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800cb70:	b192      	cbz	r2, 800cb98 <rcl_publish+0x38>
 800cb72:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800cb76:	460d      	mov	r5, r1
 800cb78:	f7ff fba0 	bl	800c2bc <rcl_context_is_valid>
 800cb7c:	b160      	cbz	r0, 800cb98 <rcl_publish+0x38>
 800cb7e:	6823      	ldr	r3, [r4, #0]
 800cb80:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800cb84:	b140      	cbz	r0, 800cb98 <rcl_publish+0x38>
 800cb86:	b155      	cbz	r5, 800cb9e <rcl_publish+0x3e>
 800cb88:	4632      	mov	r2, r6
 800cb8a:	4629      	mov	r1, r5
 800cb8c:	f002 fc40 	bl	800f410 <rmw_publish>
 800cb90:	3800      	subs	r0, #0
 800cb92:	bf18      	it	ne
 800cb94:	2001      	movne	r0, #1
 800cb96:	bd70      	pop	{r4, r5, r6, pc}
 800cb98:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800cb9c:	bd70      	pop	{r4, r5, r6, pc}
 800cb9e:	200b      	movs	r0, #11
 800cba0:	bd70      	pop	{r4, r5, r6, pc}
 800cba2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800cba6:	4770      	bx	lr

0800cba8 <rcl_publisher_get_rmw_handle>:
 800cba8:	b118      	cbz	r0, 800cbb2 <rcl_publisher_get_rmw_handle+0xa>
 800cbaa:	6800      	ldr	r0, [r0, #0]
 800cbac:	b108      	cbz	r0, 800cbb2 <rcl_publisher_get_rmw_handle+0xa>
 800cbae:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800cbb2:	4770      	bx	lr

0800cbb4 <rcl_publisher_is_valid>:
 800cbb4:	b1a0      	cbz	r0, 800cbe0 <rcl_publisher_is_valid+0x2c>
 800cbb6:	6803      	ldr	r3, [r0, #0]
 800cbb8:	b510      	push	{r4, lr}
 800cbba:	4604      	mov	r4, r0
 800cbbc:	b173      	cbz	r3, 800cbdc <rcl_publisher_is_valid+0x28>
 800cbbe:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800cbc2:	b15a      	cbz	r2, 800cbdc <rcl_publisher_is_valid+0x28>
 800cbc4:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800cbc8:	f7ff fb78 	bl	800c2bc <rcl_context_is_valid>
 800cbcc:	b130      	cbz	r0, 800cbdc <rcl_publisher_is_valid+0x28>
 800cbce:	6823      	ldr	r3, [r4, #0]
 800cbd0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800cbd4:	3800      	subs	r0, #0
 800cbd6:	bf18      	it	ne
 800cbd8:	2001      	movne	r0, #1
 800cbda:	bd10      	pop	{r4, pc}
 800cbdc:	2000      	movs	r0, #0
 800cbde:	bd10      	pop	{r4, pc}
 800cbe0:	2000      	movs	r0, #0
 800cbe2:	4770      	bx	lr

0800cbe4 <rcl_publisher_is_valid_except_context>:
 800cbe4:	b130      	cbz	r0, 800cbf4 <rcl_publisher_is_valid_except_context+0x10>
 800cbe6:	6800      	ldr	r0, [r0, #0]
 800cbe8:	b120      	cbz	r0, 800cbf4 <rcl_publisher_is_valid_except_context+0x10>
 800cbea:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800cbee:	3800      	subs	r0, #0
 800cbf0:	bf18      	it	ne
 800cbf2:	2001      	movne	r0, #1
 800cbf4:	4770      	bx	lr
 800cbf6:	bf00      	nop

0800cbf8 <rcl_get_zero_initialized_subscription>:
 800cbf8:	4b01      	ldr	r3, [pc, #4]	@ (800cc00 <rcl_get_zero_initialized_subscription+0x8>)
 800cbfa:	6818      	ldr	r0, [r3, #0]
 800cbfc:	4770      	bx	lr
 800cbfe:	bf00      	nop
 800cc00:	0801b478 	.word	0x0801b478

0800cc04 <rcl_subscription_init>:
 800cc04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc08:	b089      	sub	sp, #36	@ 0x24
 800cc0a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800cc0c:	b1d6      	cbz	r6, 800cc44 <rcl_subscription_init+0x40>
 800cc0e:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 800cc12:	4604      	mov	r4, r0
 800cc14:	4648      	mov	r0, r9
 800cc16:	460d      	mov	r5, r1
 800cc18:	4690      	mov	r8, r2
 800cc1a:	461f      	mov	r7, r3
 800cc1c:	f001 fbe4 	bl	800e3e8 <rcutils_allocator_is_valid>
 800cc20:	b180      	cbz	r0, 800cc44 <rcl_subscription_init+0x40>
 800cc22:	b17c      	cbz	r4, 800cc44 <rcl_subscription_init+0x40>
 800cc24:	4628      	mov	r0, r5
 800cc26:	f7ff fe51 	bl	800c8cc <rcl_node_is_valid>
 800cc2a:	2800      	cmp	r0, #0
 800cc2c:	d054      	beq.n	800ccd8 <rcl_subscription_init+0xd4>
 800cc2e:	f1b8 0f00 	cmp.w	r8, #0
 800cc32:	d007      	beq.n	800cc44 <rcl_subscription_init+0x40>
 800cc34:	b137      	cbz	r7, 800cc44 <rcl_subscription_init+0x40>
 800cc36:	6823      	ldr	r3, [r4, #0]
 800cc38:	b14b      	cbz	r3, 800cc4e <rcl_subscription_init+0x4a>
 800cc3a:	2764      	movs	r7, #100	@ 0x64
 800cc3c:	4638      	mov	r0, r7
 800cc3e:	b009      	add	sp, #36	@ 0x24
 800cc40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc44:	270b      	movs	r7, #11
 800cc46:	4638      	mov	r0, r7
 800cc48:	b009      	add	sp, #36	@ 0x24
 800cc4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc4e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800cc52:	aa07      	add	r2, sp, #28
 800cc54:	9205      	str	r2, [sp, #20]
 800cc56:	9307      	str	r3, [sp, #28]
 800cc58:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 800cc5c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cc60:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800cc64:	4639      	mov	r1, r7
 800cc66:	e899 000c 	ldmia.w	r9, {r2, r3}
 800cc6a:	4628      	mov	r0, r5
 800cc6c:	f008 f9ea 	bl	8015044 <rcl_node_resolve_name>
 800cc70:	4607      	mov	r7, r0
 800cc72:	2800      	cmp	r0, #0
 800cc74:	d15f      	bne.n	800cd36 <rcl_subscription_init+0x132>
 800cc76:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 800cc7a:	21c8      	movs	r1, #200	@ 0xc8
 800cc7c:	2001      	movs	r0, #1
 800cc7e:	4798      	blx	r3
 800cc80:	6020      	str	r0, [r4, #0]
 800cc82:	2800      	cmp	r0, #0
 800cc84:	d05d      	beq.n	800cd42 <rcl_subscription_init+0x13e>
 800cc86:	4628      	mov	r0, r5
 800cc88:	f7ff fe42 	bl	800c910 <rcl_node_get_rmw_handle>
 800cc8c:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 800cc90:	9300      	str	r3, [sp, #0]
 800cc92:	9a07      	ldr	r2, [sp, #28]
 800cc94:	6827      	ldr	r7, [r4, #0]
 800cc96:	4641      	mov	r1, r8
 800cc98:	4633      	mov	r3, r6
 800cc9a:	f002 fd9d 	bl	800f7d8 <rmw_create_subscription>
 800cc9e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 800cca2:	6827      	ldr	r7, [r4, #0]
 800cca4:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 800cca8:	b348      	cbz	r0, 800ccfe <rcl_subscription_init+0xfa>
 800ccaa:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 800ccae:	f002 fe75 	bl	800f99c <rmw_subscription_get_actual_qos>
 800ccb2:	4607      	mov	r7, r0
 800ccb4:	b9a8      	cbnz	r0, 800cce2 <rcl_subscription_init+0xde>
 800ccb6:	6820      	ldr	r0, [r4, #0]
 800ccb8:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800ccbc:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 800ccc0:	2270      	movs	r2, #112	@ 0x70
 800ccc2:	4631      	mov	r1, r6
 800ccc4:	f00d f815 	bl	8019cf2 <memcpy>
 800ccc8:	9807      	ldr	r0, [sp, #28]
 800ccca:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800cccc:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800ccce:	4798      	blx	r3
 800ccd0:	4638      	mov	r0, r7
 800ccd2:	b009      	add	sp, #36	@ 0x24
 800ccd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ccd8:	27c8      	movs	r7, #200	@ 0xc8
 800ccda:	4638      	mov	r0, r7
 800ccdc:	b009      	add	sp, #36	@ 0x24
 800ccde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cce2:	6827      	ldr	r7, [r4, #0]
 800cce4:	b32f      	cbz	r7, 800cd32 <rcl_subscription_init+0x12e>
 800cce6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ccea:	b14b      	cbz	r3, 800cd00 <rcl_subscription_init+0xfc>
 800ccec:	4628      	mov	r0, r5
 800ccee:	f7ff fe0f 	bl	800c910 <rcl_node_get_rmw_handle>
 800ccf2:	6823      	ldr	r3, [r4, #0]
 800ccf4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800ccf8:	f002 fe60 	bl	800f9bc <rmw_destroy_subscription>
 800ccfc:	6827      	ldr	r7, [r4, #0]
 800ccfe:	b197      	cbz	r7, 800cd26 <rcl_subscription_init+0x122>
 800cd00:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 800cd04:	4628      	mov	r0, r5
 800cd06:	f001 fb6f 	bl	800e3e8 <rcutils_allocator_is_valid>
 800cd0a:	b158      	cbz	r0, 800cd24 <rcl_subscription_init+0x120>
 800cd0c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cd0e:	b148      	cbz	r0, 800cd24 <rcl_subscription_init+0x120>
 800cd10:	4629      	mov	r1, r5
 800cd12:	f001 fe25 	bl	800e960 <rmw_subscription_content_filter_options_fini>
 800cd16:	4605      	mov	r5, r0
 800cd18:	b9b8      	cbnz	r0, 800cd4a <rcl_subscription_init+0x146>
 800cd1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd1c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800cd1e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cd20:	4798      	blx	r3
 800cd22:	66fd      	str	r5, [r7, #108]	@ 0x6c
 800cd24:	6827      	ldr	r7, [r4, #0]
 800cd26:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800cd28:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800cd2a:	4638      	mov	r0, r7
 800cd2c:	4798      	blx	r3
 800cd2e:	2300      	movs	r3, #0
 800cd30:	6023      	str	r3, [r4, #0]
 800cd32:	2701      	movs	r7, #1
 800cd34:	e7c8      	b.n	800ccc8 <rcl_subscription_init+0xc4>
 800cd36:	2867      	cmp	r0, #103	@ 0x67
 800cd38:	d0c6      	beq.n	800ccc8 <rcl_subscription_init+0xc4>
 800cd3a:	2869      	cmp	r0, #105	@ 0x69
 800cd3c:	d003      	beq.n	800cd46 <rcl_subscription_init+0x142>
 800cd3e:	280a      	cmp	r0, #10
 800cd40:	d1f7      	bne.n	800cd32 <rcl_subscription_init+0x12e>
 800cd42:	270a      	movs	r7, #10
 800cd44:	e7c0      	b.n	800ccc8 <rcl_subscription_init+0xc4>
 800cd46:	2767      	movs	r7, #103	@ 0x67
 800cd48:	e7be      	b.n	800ccc8 <rcl_subscription_init+0xc4>
 800cd4a:	f007 ff2b 	bl	8014ba4 <rcl_convert_rmw_ret_to_rcl_ret>
 800cd4e:	6827      	ldr	r7, [r4, #0]
 800cd50:	e7e9      	b.n	800cd26 <rcl_subscription_init+0x122>
 800cd52:	bf00      	nop

0800cd54 <rcl_subscription_fini>:
 800cd54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd58:	2800      	cmp	r0, #0
 800cd5a:	d039      	beq.n	800cdd0 <rcl_subscription_fini+0x7c>
 800cd5c:	4604      	mov	r4, r0
 800cd5e:	4608      	mov	r0, r1
 800cd60:	460d      	mov	r5, r1
 800cd62:	f7ff fdab 	bl	800c8bc <rcl_node_is_valid_except_context>
 800cd66:	2800      	cmp	r0, #0
 800cd68:	d037      	beq.n	800cdda <rcl_subscription_fini+0x86>
 800cd6a:	6823      	ldr	r3, [r4, #0]
 800cd6c:	b363      	cbz	r3, 800cdc8 <rcl_subscription_fini+0x74>
 800cd6e:	4628      	mov	r0, r5
 800cd70:	6d5f      	ldr	r7, [r3, #84]	@ 0x54
 800cd72:	f8d3 8060 	ldr.w	r8, [r3, #96]	@ 0x60
 800cd76:	f7ff fdcb 	bl	800c910 <rcl_node_get_rmw_handle>
 800cd7a:	b390      	cbz	r0, 800cde2 <rcl_subscription_fini+0x8e>
 800cd7c:	6823      	ldr	r3, [r4, #0]
 800cd7e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800cd82:	f002 fe1b 	bl	800f9bc <rmw_destroy_subscription>
 800cd86:	6826      	ldr	r6, [r4, #0]
 800cd88:	1e05      	subs	r5, r0, #0
 800cd8a:	bf18      	it	ne
 800cd8c:	2501      	movne	r5, #1
 800cd8e:	b37e      	cbz	r6, 800cdf0 <rcl_subscription_fini+0x9c>
 800cd90:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 800cd94:	4648      	mov	r0, r9
 800cd96:	f001 fb27 	bl	800e3e8 <rcutils_allocator_is_valid>
 800cd9a:	b358      	cbz	r0, 800cdf4 <rcl_subscription_fini+0xa0>
 800cd9c:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 800cd9e:	b150      	cbz	r0, 800cdb6 <rcl_subscription_fini+0x62>
 800cda0:	4649      	mov	r1, r9
 800cda2:	f001 fddd 	bl	800e960 <rmw_subscription_content_filter_options_fini>
 800cda6:	4681      	mov	r9, r0
 800cda8:	b9e8      	cbnz	r0, 800cde6 <rcl_subscription_fini+0x92>
 800cdaa:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800cdac:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800cdae:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 800cdb0:	4798      	blx	r3
 800cdb2:	f8c6 906c 	str.w	r9, [r6, #108]	@ 0x6c
 800cdb6:	6826      	ldr	r6, [r4, #0]
 800cdb8:	4630      	mov	r0, r6
 800cdba:	4641      	mov	r1, r8
 800cdbc:	47b8      	blx	r7
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	6023      	str	r3, [r4, #0]
 800cdc2:	4628      	mov	r0, r5
 800cdc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdc8:	461d      	mov	r5, r3
 800cdca:	4628      	mov	r0, r5
 800cdcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdd0:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 800cdd4:	4628      	mov	r0, r5
 800cdd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdda:	25c8      	movs	r5, #200	@ 0xc8
 800cddc:	4628      	mov	r0, r5
 800cdde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cde2:	250b      	movs	r5, #11
 800cde4:	e7f1      	b.n	800cdca <rcl_subscription_fini+0x76>
 800cde6:	f007 fedd 	bl	8014ba4 <rcl_convert_rmw_ret_to_rcl_ret>
 800cdea:	6826      	ldr	r6, [r4, #0]
 800cdec:	2800      	cmp	r0, #0
 800cdee:	d0e3      	beq.n	800cdb8 <rcl_subscription_fini+0x64>
 800cdf0:	2501      	movs	r5, #1
 800cdf2:	e7e1      	b.n	800cdb8 <rcl_subscription_fini+0x64>
 800cdf4:	6826      	ldr	r6, [r4, #0]
 800cdf6:	2501      	movs	r5, #1
 800cdf8:	e7de      	b.n	800cdb8 <rcl_subscription_fini+0x64>
 800cdfa:	bf00      	nop

0800cdfc <rcl_subscription_get_default_options>:
 800cdfc:	b570      	push	{r4, r5, r6, lr}
 800cdfe:	4d14      	ldr	r5, [pc, #80]	@ (800ce50 <rcl_subscription_get_default_options+0x54>)
 800ce00:	4914      	ldr	r1, [pc, #80]	@ (800ce54 <rcl_subscription_get_default_options+0x58>)
 800ce02:	b08a      	sub	sp, #40	@ 0x28
 800ce04:	4604      	mov	r4, r0
 800ce06:	2250      	movs	r2, #80	@ 0x50
 800ce08:	4628      	mov	r0, r5
 800ce0a:	f00c ff72 	bl	8019cf2 <memcpy>
 800ce0e:	a804      	add	r0, sp, #16
 800ce10:	f001 fadc 	bl	800e3cc <rcutils_get_default_allocator>
 800ce14:	f10d 0c10 	add.w	ip, sp, #16
 800ce18:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ce1c:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800ce20:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ce24:	466e      	mov	r6, sp
 800ce26:	f8dc 3000 	ldr.w	r3, [ip]
 800ce2a:	f8ce 3000 	str.w	r3, [lr]
 800ce2e:	4630      	mov	r0, r6
 800ce30:	f001 fdb0 	bl	800e994 <rmw_get_default_subscription_options>
 800ce34:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800ce38:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800ce3c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ce40:	2270      	movs	r2, #112	@ 0x70
 800ce42:	4629      	mov	r1, r5
 800ce44:	4620      	mov	r0, r4
 800ce46:	f00c ff54 	bl	8019cf2 <memcpy>
 800ce4a:	4620      	mov	r0, r4
 800ce4c:	b00a      	add	sp, #40	@ 0x28
 800ce4e:	bd70      	pop	{r4, r5, r6, pc}
 800ce50:	2000cf78 	.word	0x2000cf78
 800ce54:	0801b480 	.word	0x0801b480

0800ce58 <rcl_take>:
 800ce58:	2800      	cmp	r0, #0
 800ce5a:	d04a      	beq.n	800cef2 <rcl_take+0x9a>
 800ce5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce60:	4604      	mov	r4, r0
 800ce62:	6800      	ldr	r0, [r0, #0]
 800ce64:	b0a4      	sub	sp, #144	@ 0x90
 800ce66:	2800      	cmp	r0, #0
 800ce68:	d03b      	beq.n	800cee2 <rcl_take+0x8a>
 800ce6a:	461f      	mov	r7, r3
 800ce6c:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d036      	beq.n	800cee2 <rcl_take+0x8a>
 800ce74:	460e      	mov	r6, r1
 800ce76:	2900      	cmp	r1, #0
 800ce78:	d039      	beq.n	800ceee <rcl_take+0x96>
 800ce7a:	4615      	mov	r5, r2
 800ce7c:	2a00      	cmp	r2, #0
 800ce7e:	d03c      	beq.n	800cefa <rcl_take+0xa2>
 800ce80:	a802      	add	r0, sp, #8
 800ce82:	f001 fd8d 	bl	800e9a0 <rmw_get_zero_initialized_message_info>
 800ce86:	f10d 0c08 	add.w	ip, sp, #8
 800ce8a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ce8e:	46ae      	mov	lr, r5
 800ce90:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ce94:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ce98:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ce9c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cea0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cea4:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800cea8:	f04f 0800 	mov.w	r8, #0
 800ceac:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 800ceb0:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 800ceb4:	6822      	ldr	r2, [r4, #0]
 800ceb6:	462b      	mov	r3, r5
 800ceb8:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 800cebc:	9700      	str	r7, [sp, #0]
 800cebe:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 800cec2:	4631      	mov	r1, r6
 800cec4:	f002 fdda 	bl	800fa7c <rmw_take_with_info>
 800cec8:	4603      	mov	r3, r0
 800ceca:	b9c0      	cbnz	r0, 800cefe <rcl_take+0xa6>
 800cecc:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 800ced0:	f240 1291 	movw	r2, #401	@ 0x191
 800ced4:	2900      	cmp	r1, #0
 800ced6:	bf08      	it	eq
 800ced8:	4613      	moveq	r3, r2
 800ceda:	4618      	mov	r0, r3
 800cedc:	b024      	add	sp, #144	@ 0x90
 800cede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cee2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800cee6:	4618      	mov	r0, r3
 800cee8:	b024      	add	sp, #144	@ 0x90
 800ceea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ceee:	230b      	movs	r3, #11
 800cef0:	e7f3      	b.n	800ceda <rcl_take+0x82>
 800cef2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800cef6:	4618      	mov	r0, r3
 800cef8:	4770      	bx	lr
 800cefa:	ad14      	add	r5, sp, #80	@ 0x50
 800cefc:	e7c0      	b.n	800ce80 <rcl_take+0x28>
 800cefe:	f007 fe51 	bl	8014ba4 <rcl_convert_rmw_ret_to_rcl_ret>
 800cf02:	4603      	mov	r3, r0
 800cf04:	e7e9      	b.n	800ceda <rcl_take+0x82>
 800cf06:	bf00      	nop

0800cf08 <rcl_subscription_get_rmw_handle>:
 800cf08:	b118      	cbz	r0, 800cf12 <rcl_subscription_get_rmw_handle+0xa>
 800cf0a:	6800      	ldr	r0, [r0, #0]
 800cf0c:	b108      	cbz	r0, 800cf12 <rcl_subscription_get_rmw_handle+0xa>
 800cf0e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800cf12:	4770      	bx	lr

0800cf14 <rcl_subscription_is_valid>:
 800cf14:	b130      	cbz	r0, 800cf24 <rcl_subscription_is_valid+0x10>
 800cf16:	6800      	ldr	r0, [r0, #0]
 800cf18:	b120      	cbz	r0, 800cf24 <rcl_subscription_is_valid+0x10>
 800cf1a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800cf1e:	3800      	subs	r0, #0
 800cf20:	bf18      	it	ne
 800cf22:	2001      	movne	r0, #1
 800cf24:	4770      	bx	lr
 800cf26:	bf00      	nop

0800cf28 <_rcl_timer_time_jump>:
 800cf28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf2c:	4605      	mov	r5, r0
 800cf2e:	b084      	sub	sp, #16
 800cf30:	4614      	mov	r4, r2
 800cf32:	b131      	cbz	r1, 800cf42 <_rcl_timer_time_jump+0x1a>
 800cf34:	7803      	ldrb	r3, [r0, #0]
 800cf36:	3b02      	subs	r3, #2
 800cf38:	2b01      	cmp	r3, #1
 800cf3a:	d93f      	bls.n	800cfbc <_rcl_timer_time_jump+0x94>
 800cf3c:	b004      	add	sp, #16
 800cf3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf42:	6813      	ldr	r3, [r2, #0]
 800cf44:	a902      	add	r1, sp, #8
 800cf46:	6818      	ldr	r0, [r3, #0]
 800cf48:	f008 fa4e 	bl	80153e8 <rcl_clock_get_now>
 800cf4c:	2800      	cmp	r0, #0
 800cf4e:	d1f5      	bne.n	800cf3c <_rcl_timer_time_jump+0x14>
 800cf50:	6820      	ldr	r0, [r4, #0]
 800cf52:	2105      	movs	r1, #5
 800cf54:	3020      	adds	r0, #32
 800cf56:	f001 fa55 	bl	800e404 <__atomic_load_8>
 800cf5a:	6823      	ldr	r3, [r4, #0]
 800cf5c:	4681      	mov	r9, r0
 800cf5e:	4688      	mov	r8, r1
 800cf60:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800cf64:	2105      	movs	r1, #5
 800cf66:	f001 fa4d 	bl	800e404 <__atomic_load_8>
 800cf6a:	4607      	mov	r7, r0
 800cf6c:	6820      	ldr	r0, [r4, #0]
 800cf6e:	460e      	mov	r6, r1
 800cf70:	3018      	adds	r0, #24
 800cf72:	2105      	movs	r1, #5
 800cf74:	f001 fa46 	bl	800e404 <__atomic_load_8>
 800cf78:	782b      	ldrb	r3, [r5, #0]
 800cf7a:	9a02      	ldr	r2, [sp, #8]
 800cf7c:	3b02      	subs	r3, #2
 800cf7e:	2b01      	cmp	r3, #1
 800cf80:	460d      	mov	r5, r1
 800cf82:	9b03      	ldr	r3, [sp, #12]
 800cf84:	4682      	mov	sl, r0
 800cf86:	d937      	bls.n	800cff8 <_rcl_timer_time_jump+0xd0>
 800cf88:	42ba      	cmp	r2, r7
 800cf8a:	eb73 0106 	sbcs.w	r1, r3, r6
 800cf8e:	da5f      	bge.n	800d050 <_rcl_timer_time_jump+0x128>
 800cf90:	454a      	cmp	r2, r9
 800cf92:	eb73 0108 	sbcs.w	r1, r3, r8
 800cf96:	dad1      	bge.n	800cf3c <_rcl_timer_time_jump+0x14>
 800cf98:	6820      	ldr	r0, [r4, #0]
 800cf9a:	eb1a 0202 	adds.w	r2, sl, r2
 800cf9e:	eb43 0305 	adc.w	r3, r3, r5
 800cfa2:	2505      	movs	r5, #5
 800cfa4:	3028      	adds	r0, #40	@ 0x28
 800cfa6:	9500      	str	r5, [sp, #0]
 800cfa8:	f001 fa62 	bl	800e470 <__atomic_store_8>
 800cfac:	6820      	ldr	r0, [r4, #0]
 800cfae:	9500      	str	r5, [sp, #0]
 800cfb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cfb4:	3020      	adds	r0, #32
 800cfb6:	f001 fa5b 	bl	800e470 <__atomic_store_8>
 800cfba:	e7bf      	b.n	800cf3c <_rcl_timer_time_jump+0x14>
 800cfbc:	6813      	ldr	r3, [r2, #0]
 800cfbe:	a902      	add	r1, sp, #8
 800cfc0:	6818      	ldr	r0, [r3, #0]
 800cfc2:	f008 fa11 	bl	80153e8 <rcl_clock_get_now>
 800cfc6:	2800      	cmp	r0, #0
 800cfc8:	d1b8      	bne.n	800cf3c <_rcl_timer_time_jump+0x14>
 800cfca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cfce:	4313      	orrs	r3, r2
 800cfd0:	d0b4      	beq.n	800cf3c <_rcl_timer_time_jump+0x14>
 800cfd2:	6820      	ldr	r0, [r4, #0]
 800cfd4:	2105      	movs	r1, #5
 800cfd6:	3028      	adds	r0, #40	@ 0x28
 800cfd8:	f001 fa14 	bl	800e404 <__atomic_load_8>
 800cfdc:	9d02      	ldr	r5, [sp, #8]
 800cfde:	9b03      	ldr	r3, [sp, #12]
 800cfe0:	4602      	mov	r2, r0
 800cfe2:	6820      	ldr	r0, [r4, #0]
 800cfe4:	1b52      	subs	r2, r2, r5
 800cfe6:	f04f 0405 	mov.w	r4, #5
 800cfea:	9400      	str	r4, [sp, #0]
 800cfec:	eb61 0303 	sbc.w	r3, r1, r3
 800cff0:	3030      	adds	r0, #48	@ 0x30
 800cff2:	f001 fa3d 	bl	800e470 <__atomic_store_8>
 800cff6:	e7a1      	b.n	800cf3c <_rcl_timer_time_jump+0x14>
 800cff8:	4313      	orrs	r3, r2
 800cffa:	d09f      	beq.n	800cf3c <_rcl_timer_time_jump+0x14>
 800cffc:	6820      	ldr	r0, [r4, #0]
 800cffe:	f04f 0805 	mov.w	r8, #5
 800d002:	2300      	movs	r3, #0
 800d004:	f8cd 8000 	str.w	r8, [sp]
 800d008:	3030      	adds	r0, #48	@ 0x30
 800d00a:	2200      	movs	r2, #0
 800d00c:	f001 fa66 	bl	800e4dc <__atomic_exchange_8>
 800d010:	ea51 0300 	orrs.w	r3, r1, r0
 800d014:	4606      	mov	r6, r0
 800d016:	460f      	mov	r7, r1
 800d018:	d090      	beq.n	800cf3c <_rcl_timer_time_jump+0x14>
 800d01a:	9a02      	ldr	r2, [sp, #8]
 800d01c:	9b03      	ldr	r3, [sp, #12]
 800d01e:	f8cd 8000 	str.w	r8, [sp]
 800d022:	1a12      	subs	r2, r2, r0
 800d024:	6820      	ldr	r0, [r4, #0]
 800d026:	eb63 0301 	sbc.w	r3, r3, r1
 800d02a:	eb12 020a 	adds.w	r2, r2, sl
 800d02e:	eb43 0305 	adc.w	r3, r3, r5
 800d032:	3028      	adds	r0, #40	@ 0x28
 800d034:	f001 fa1c 	bl	800e470 <__atomic_store_8>
 800d038:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d03c:	f8cd 8000 	str.w	r8, [sp]
 800d040:	6820      	ldr	r0, [r4, #0]
 800d042:	1b92      	subs	r2, r2, r6
 800d044:	eb63 0307 	sbc.w	r3, r3, r7
 800d048:	3020      	adds	r0, #32
 800d04a:	f001 fa11 	bl	800e470 <__atomic_store_8>
 800d04e:	e775      	b.n	800cf3c <_rcl_timer_time_jump+0x14>
 800d050:	6820      	ldr	r0, [r4, #0]
 800d052:	3008      	adds	r0, #8
 800d054:	f007 feb2 	bl	8014dbc <rcl_trigger_guard_condition>
 800d058:	e770      	b.n	800cf3c <_rcl_timer_time_jump+0x14>
 800d05a:	bf00      	nop

0800d05c <rcl_get_zero_initialized_timer>:
 800d05c:	4b01      	ldr	r3, [pc, #4]	@ (800d064 <rcl_get_zero_initialized_timer+0x8>)
 800d05e:	6818      	ldr	r0, [r3, #0]
 800d060:	4770      	bx	lr
 800d062:	bf00      	nop
 800d064:	0801b4d0 	.word	0x0801b4d0

0800d068 <rcl_timer_init>:
 800d068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d06c:	b0aa      	sub	sp, #168	@ 0xa8
 800d06e:	4604      	mov	r4, r0
 800d070:	a835      	add	r0, sp, #212	@ 0xd4
 800d072:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 800d076:	460d      	mov	r5, r1
 800d078:	4692      	mov	sl, r2
 800d07a:	f001 f9b5 	bl	800e3e8 <rcutils_allocator_is_valid>
 800d07e:	2800      	cmp	r0, #0
 800d080:	d064      	beq.n	800d14c <rcl_timer_init+0xe4>
 800d082:	2c00      	cmp	r4, #0
 800d084:	d062      	beq.n	800d14c <rcl_timer_init+0xe4>
 800d086:	2d00      	cmp	r5, #0
 800d088:	d060      	beq.n	800d14c <rcl_timer_init+0xe4>
 800d08a:	2f00      	cmp	r7, #0
 800d08c:	db5e      	blt.n	800d14c <rcl_timer_init+0xe4>
 800d08e:	6823      	ldr	r3, [r4, #0]
 800d090:	b123      	cbz	r3, 800d09c <rcl_timer_init+0x34>
 800d092:	2664      	movs	r6, #100	@ 0x64
 800d094:	4630      	mov	r0, r6
 800d096:	b02a      	add	sp, #168	@ 0xa8
 800d098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d09c:	a908      	add	r1, sp, #32
 800d09e:	4628      	mov	r0, r5
 800d0a0:	f008 f9a2 	bl	80153e8 <rcl_clock_get_now>
 800d0a4:	4606      	mov	r6, r0
 800d0a6:	2800      	cmp	r0, #0
 800d0a8:	d1f4      	bne.n	800d094 <rcl_timer_init+0x2c>
 800d0aa:	ae06      	add	r6, sp, #24
 800d0ac:	4630      	mov	r0, r6
 800d0ae:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 800d0b2:	f007 fd8b 	bl	8014bcc <rcl_get_zero_initialized_guard_condition>
 800d0b6:	e896 0003 	ldmia.w	r6, {r0, r1}
 800d0ba:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 800d0be:	ae0b      	add	r6, sp, #44	@ 0x2c
 800d0c0:	e889 0003 	stmia.w	r9, {r0, r1}
 800d0c4:	4630      	mov	r0, r6
 800d0c6:	f007 fe5d 	bl	8014d84 <rcl_guard_condition_get_default_options>
 800d0ca:	ab0d      	add	r3, sp, #52	@ 0x34
 800d0cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d0d0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800d0d4:	4651      	mov	r1, sl
 800d0d6:	e896 000c 	ldmia.w	r6, {r2, r3}
 800d0da:	4648      	mov	r0, r9
 800d0dc:	f007 fd80 	bl	8014be0 <rcl_guard_condition_init>
 800d0e0:	4606      	mov	r6, r0
 800d0e2:	2800      	cmp	r0, #0
 800d0e4:	d1d6      	bne.n	800d094 <rcl_timer_init+0x2c>
 800d0e6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d0e8:	781b      	ldrb	r3, [r3, #0]
 800d0ea:	2b01      	cmp	r3, #1
 800d0ec:	d033      	beq.n	800d156 <rcl_timer_init+0xee>
 800d0ee:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 800d0f0:	911a      	str	r1, [sp, #104]	@ 0x68
 800d0f2:	4642      	mov	r2, r8
 800d0f4:	463b      	mov	r3, r7
 800d0f6:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 800d0fa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d0fe:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800d1b0 <rcl_timer_init+0x148>
 800d102:	eb12 0008 	adds.w	r0, r2, r8
 800d106:	eb47 0103 	adc.w	r1, r7, r3
 800d10a:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 800d10e:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 800d112:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 800d116:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 800d11a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d11e:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 800d122:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d126:	f8de 3000 	ldr.w	r3, [lr]
 800d12a:	f8cc 3000 	str.w	r3, [ip]
 800d12e:	f04f 0a00 	mov.w	sl, #0
 800d132:	4619      	mov	r1, r3
 800d134:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 800d138:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800d13a:	2050      	movs	r0, #80	@ 0x50
 800d13c:	4798      	blx	r3
 800d13e:	6020      	str	r0, [r4, #0]
 800d140:	b358      	cbz	r0, 800d19a <rcl_timer_init+0x132>
 800d142:	2250      	movs	r2, #80	@ 0x50
 800d144:	a916      	add	r1, sp, #88	@ 0x58
 800d146:	f00c fdd4 	bl	8019cf2 <memcpy>
 800d14a:	e7a3      	b.n	800d094 <rcl_timer_init+0x2c>
 800d14c:	260b      	movs	r6, #11
 800d14e:	4630      	mov	r0, r6
 800d150:	b02a      	add	sp, #168	@ 0xa8
 800d152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d156:	2001      	movs	r0, #1
 800d158:	2100      	movs	r1, #0
 800d15a:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 800d15e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d162:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800d166:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 800d16a:	4a13      	ldr	r2, [pc, #76]	@ (800d1b8 <rcl_timer_init+0x150>)
 800d16c:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800d170:	9405      	str	r4, [sp, #20]
 800d172:	9204      	str	r2, [sp, #16]
 800d174:	ab12      	add	r3, sp, #72	@ 0x48
 800d176:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d178:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d17c:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 800d180:	e89c 000c 	ldmia.w	ip, {r2, r3}
 800d184:	4628      	mov	r0, r5
 800d186:	f008 f93b 	bl	8015400 <rcl_clock_add_jump_callback>
 800d18a:	4682      	mov	sl, r0
 800d18c:	2800      	cmp	r0, #0
 800d18e:	d0ae      	beq.n	800d0ee <rcl_timer_init+0x86>
 800d190:	4648      	mov	r0, r9
 800d192:	f007 fdd1 	bl	8014d38 <rcl_guard_condition_fini>
 800d196:	4656      	mov	r6, sl
 800d198:	e77c      	b.n	800d094 <rcl_timer_init+0x2c>
 800d19a:	4648      	mov	r0, r9
 800d19c:	f007 fdcc 	bl	8014d38 <rcl_guard_condition_fini>
 800d1a0:	4905      	ldr	r1, [pc, #20]	@ (800d1b8 <rcl_timer_init+0x150>)
 800d1a2:	4622      	mov	r2, r4
 800d1a4:	4628      	mov	r0, r5
 800d1a6:	f008 f98d 	bl	80154c4 <rcl_clock_remove_jump_callback>
 800d1aa:	260a      	movs	r6, #10
 800d1ac:	e772      	b.n	800d094 <rcl_timer_init+0x2c>
 800d1ae:	bf00      	nop
	...
 800d1b8:	0800cf29 	.word	0x0800cf29

0800d1bc <rcl_timer_fini>:
 800d1bc:	b310      	cbz	r0, 800d204 <rcl_timer_fini+0x48>
 800d1be:	6803      	ldr	r3, [r0, #0]
 800d1c0:	b570      	push	{r4, r5, r6, lr}
 800d1c2:	4604      	mov	r4, r0
 800d1c4:	b1b3      	cbz	r3, 800d1f4 <rcl_timer_fini+0x38>
 800d1c6:	f3bf 8f5b 	dmb	ish
 800d1ca:	2201      	movs	r2, #1
 800d1cc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800d1d0:	f3bf 8f5b 	dmb	ish
 800d1d4:	6803      	ldr	r3, [r0, #0]
 800d1d6:	6818      	ldr	r0, [r3, #0]
 800d1d8:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 800d1da:	7802      	ldrb	r2, [r0, #0]
 800d1dc:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 800d1de:	2a01      	cmp	r2, #1
 800d1e0:	d00a      	beq.n	800d1f8 <rcl_timer_fini+0x3c>
 800d1e2:	f103 0008 	add.w	r0, r3, #8
 800d1e6:	f007 fda7 	bl	8014d38 <rcl_guard_condition_fini>
 800d1ea:	6820      	ldr	r0, [r4, #0]
 800d1ec:	4631      	mov	r1, r6
 800d1ee:	47a8      	blx	r5
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	6023      	str	r3, [r4, #0]
 800d1f4:	2000      	movs	r0, #0
 800d1f6:	bd70      	pop	{r4, r5, r6, pc}
 800d1f8:	4903      	ldr	r1, [pc, #12]	@ (800d208 <rcl_timer_fini+0x4c>)
 800d1fa:	4622      	mov	r2, r4
 800d1fc:	f008 f962 	bl	80154c4 <rcl_clock_remove_jump_callback>
 800d200:	6823      	ldr	r3, [r4, #0]
 800d202:	e7ee      	b.n	800d1e2 <rcl_timer_fini+0x26>
 800d204:	2000      	movs	r0, #0
 800d206:	4770      	bx	lr
 800d208:	0800cf29 	.word	0x0800cf29

0800d20c <rcl_timer_call>:
 800d20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d210:	b087      	sub	sp, #28
 800d212:	2800      	cmp	r0, #0
 800d214:	d06d      	beq.n	800d2f2 <rcl_timer_call+0xe6>
 800d216:	6803      	ldr	r3, [r0, #0]
 800d218:	4604      	mov	r4, r0
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d063      	beq.n	800d2e6 <rcl_timer_call+0xda>
 800d21e:	f3bf 8f5b 	dmb	ish
 800d222:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d226:	f3bf 8f5b 	dmb	ish
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d150      	bne.n	800d2d0 <rcl_timer_call+0xc4>
 800d22e:	6803      	ldr	r3, [r0, #0]
 800d230:	a904      	add	r1, sp, #16
 800d232:	6818      	ldr	r0, [r3, #0]
 800d234:	f008 f8d8 	bl	80153e8 <rcl_clock_get_now>
 800d238:	4605      	mov	r5, r0
 800d23a:	2800      	cmp	r0, #0
 800d23c:	d14a      	bne.n	800d2d4 <rcl_timer_call+0xc8>
 800d23e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d242:	2b00      	cmp	r3, #0
 800d244:	db4a      	blt.n	800d2dc <rcl_timer_call+0xd0>
 800d246:	6820      	ldr	r0, [r4, #0]
 800d248:	f04f 0a05 	mov.w	sl, #5
 800d24c:	f8cd a000 	str.w	sl, [sp]
 800d250:	3020      	adds	r0, #32
 800d252:	f001 f943 	bl	800e4dc <__atomic_exchange_8>
 800d256:	6823      	ldr	r3, [r4, #0]
 800d258:	f3bf 8f5b 	dmb	ish
 800d25c:	4680      	mov	r8, r0
 800d25e:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800d262:	f3bf 8f5b 	dmb	ish
 800d266:	6820      	ldr	r0, [r4, #0]
 800d268:	4689      	mov	r9, r1
 800d26a:	3028      	adds	r0, #40	@ 0x28
 800d26c:	4651      	mov	r1, sl
 800d26e:	f001 f8c9 	bl	800e404 <__atomic_load_8>
 800d272:	4606      	mov	r6, r0
 800d274:	6820      	ldr	r0, [r4, #0]
 800d276:	460f      	mov	r7, r1
 800d278:	3018      	adds	r0, #24
 800d27a:	4651      	mov	r1, sl
 800d27c:	f001 f8c2 	bl	800e404 <__atomic_load_8>
 800d280:	1836      	adds	r6, r6, r0
 800d282:	4602      	mov	r2, r0
 800d284:	4682      	mov	sl, r0
 800d286:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 800d28a:	eb47 0701 	adc.w	r7, r7, r1
 800d28e:	4286      	cmp	r6, r0
 800d290:	460b      	mov	r3, r1
 800d292:	eb77 010c 	sbcs.w	r1, r7, ip
 800d296:	da04      	bge.n	800d2a2 <rcl_timer_call+0x96>
 800d298:	ea53 0102 	orrs.w	r1, r3, r2
 800d29c:	d12e      	bne.n	800d2fc <rcl_timer_call+0xf0>
 800d29e:	4606      	mov	r6, r0
 800d2a0:	4667      	mov	r7, ip
 800d2a2:	6820      	ldr	r0, [r4, #0]
 800d2a4:	2105      	movs	r1, #5
 800d2a6:	4632      	mov	r2, r6
 800d2a8:	463b      	mov	r3, r7
 800d2aa:	3028      	adds	r0, #40	@ 0x28
 800d2ac:	9100      	str	r1, [sp, #0]
 800d2ae:	f001 f8df 	bl	800e470 <__atomic_store_8>
 800d2b2:	f1bb 0f00 	cmp.w	fp, #0
 800d2b6:	d00d      	beq.n	800d2d4 <rcl_timer_call+0xc8>
 800d2b8:	9a04      	ldr	r2, [sp, #16]
 800d2ba:	9b05      	ldr	r3, [sp, #20]
 800d2bc:	ebb2 0208 	subs.w	r2, r2, r8
 800d2c0:	4620      	mov	r0, r4
 800d2c2:	eb63 0309 	sbc.w	r3, r3, r9
 800d2c6:	47d8      	blx	fp
 800d2c8:	4628      	mov	r0, r5
 800d2ca:	b007      	add	sp, #28
 800d2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2d0:	f240 3521 	movw	r5, #801	@ 0x321
 800d2d4:	4628      	mov	r0, r5
 800d2d6:	b007      	add	sp, #28
 800d2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2dc:	2501      	movs	r5, #1
 800d2de:	4628      	mov	r0, r5
 800d2e0:	b007      	add	sp, #28
 800d2e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2e6:	f44f 7548 	mov.w	r5, #800	@ 0x320
 800d2ea:	4628      	mov	r0, r5
 800d2ec:	b007      	add	sp, #28
 800d2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2f2:	250b      	movs	r5, #11
 800d2f4:	4628      	mov	r0, r5
 800d2f6:	b007      	add	sp, #28
 800d2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2fc:	1b80      	subs	r0, r0, r6
 800d2fe:	eb6c 0107 	sbc.w	r1, ip, r7
 800d302:	3801      	subs	r0, #1
 800d304:	f161 0100 	sbc.w	r1, r1, #0
 800d308:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800d30c:	f7f3 fc06 	bl	8000b1c <__aeabi_ldivmod>
 800d310:	9b02      	ldr	r3, [sp, #8]
 800d312:	3001      	adds	r0, #1
 800d314:	f141 0100 	adc.w	r1, r1, #0
 800d318:	fb00 f303 	mul.w	r3, r0, r3
 800d31c:	fb01 330a 	mla	r3, r1, sl, r3
 800d320:	fba0 0a0a 	umull	r0, sl, r0, sl
 800d324:	1986      	adds	r6, r0, r6
 800d326:	4453      	add	r3, sl
 800d328:	eb43 0707 	adc.w	r7, r3, r7
 800d32c:	e7b9      	b.n	800d2a2 <rcl_timer_call+0x96>
 800d32e:	bf00      	nop

0800d330 <rcl_timer_is_ready>:
 800d330:	b570      	push	{r4, r5, r6, lr}
 800d332:	b082      	sub	sp, #8
 800d334:	b378      	cbz	r0, 800d396 <rcl_timer_is_ready+0x66>
 800d336:	6803      	ldr	r3, [r0, #0]
 800d338:	4604      	mov	r4, r0
 800d33a:	b383      	cbz	r3, 800d39e <rcl_timer_is_ready+0x6e>
 800d33c:	460d      	mov	r5, r1
 800d33e:	b351      	cbz	r1, 800d396 <rcl_timer_is_ready+0x66>
 800d340:	f3bf 8f5b 	dmb	ish
 800d344:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d348:	f3bf 8f5b 	dmb	ish
 800d34c:	b953      	cbnz	r3, 800d364 <rcl_timer_is_ready+0x34>
 800d34e:	6803      	ldr	r3, [r0, #0]
 800d350:	4669      	mov	r1, sp
 800d352:	6818      	ldr	r0, [r3, #0]
 800d354:	f008 f848 	bl	80153e8 <rcl_clock_get_now>
 800d358:	4606      	mov	r6, r0
 800d35a:	b140      	cbz	r0, 800d36e <rcl_timer_is_ready+0x3e>
 800d35c:	f240 3321 	movw	r3, #801	@ 0x321
 800d360:	4298      	cmp	r0, r3
 800d362:	d101      	bne.n	800d368 <rcl_timer_is_ready+0x38>
 800d364:	2600      	movs	r6, #0
 800d366:	702e      	strb	r6, [r5, #0]
 800d368:	4630      	mov	r0, r6
 800d36a:	b002      	add	sp, #8
 800d36c:	bd70      	pop	{r4, r5, r6, pc}
 800d36e:	6820      	ldr	r0, [r4, #0]
 800d370:	2105      	movs	r1, #5
 800d372:	3028      	adds	r0, #40	@ 0x28
 800d374:	f001 f846 	bl	800e404 <__atomic_load_8>
 800d378:	9b00      	ldr	r3, [sp, #0]
 800d37a:	1ac0      	subs	r0, r0, r3
 800d37c:	9b01      	ldr	r3, [sp, #4]
 800d37e:	eb61 0103 	sbc.w	r1, r1, r3
 800d382:	2801      	cmp	r0, #1
 800d384:	f171 0300 	sbcs.w	r3, r1, #0
 800d388:	bfb4      	ite	lt
 800d38a:	2301      	movlt	r3, #1
 800d38c:	2300      	movge	r3, #0
 800d38e:	4630      	mov	r0, r6
 800d390:	702b      	strb	r3, [r5, #0]
 800d392:	b002      	add	sp, #8
 800d394:	bd70      	pop	{r4, r5, r6, pc}
 800d396:	260b      	movs	r6, #11
 800d398:	4630      	mov	r0, r6
 800d39a:	b002      	add	sp, #8
 800d39c:	bd70      	pop	{r4, r5, r6, pc}
 800d39e:	f44f 7648 	mov.w	r6, #800	@ 0x320
 800d3a2:	e7e1      	b.n	800d368 <rcl_timer_is_ready+0x38>

0800d3a4 <rcl_timer_get_time_until_next_call>:
 800d3a4:	b570      	push	{r4, r5, r6, lr}
 800d3a6:	b082      	sub	sp, #8
 800d3a8:	b330      	cbz	r0, 800d3f8 <rcl_timer_get_time_until_next_call+0x54>
 800d3aa:	6803      	ldr	r3, [r0, #0]
 800d3ac:	4604      	mov	r4, r0
 800d3ae:	b33b      	cbz	r3, 800d400 <rcl_timer_get_time_until_next_call+0x5c>
 800d3b0:	460d      	mov	r5, r1
 800d3b2:	b309      	cbz	r1, 800d3f8 <rcl_timer_get_time_until_next_call+0x54>
 800d3b4:	f3bf 8f5b 	dmb	ish
 800d3b8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d3bc:	f3bf 8f5b 	dmb	ish
 800d3c0:	b9ab      	cbnz	r3, 800d3ee <rcl_timer_get_time_until_next_call+0x4a>
 800d3c2:	6803      	ldr	r3, [r0, #0]
 800d3c4:	4669      	mov	r1, sp
 800d3c6:	6818      	ldr	r0, [r3, #0]
 800d3c8:	f008 f80e 	bl	80153e8 <rcl_clock_get_now>
 800d3cc:	4606      	mov	r6, r0
 800d3ce:	b958      	cbnz	r0, 800d3e8 <rcl_timer_get_time_until_next_call+0x44>
 800d3d0:	6820      	ldr	r0, [r4, #0]
 800d3d2:	2105      	movs	r1, #5
 800d3d4:	3028      	adds	r0, #40	@ 0x28
 800d3d6:	f001 f815 	bl	800e404 <__atomic_load_8>
 800d3da:	9b00      	ldr	r3, [sp, #0]
 800d3dc:	1ac0      	subs	r0, r0, r3
 800d3de:	9b01      	ldr	r3, [sp, #4]
 800d3e0:	6028      	str	r0, [r5, #0]
 800d3e2:	eb61 0103 	sbc.w	r1, r1, r3
 800d3e6:	6069      	str	r1, [r5, #4]
 800d3e8:	4630      	mov	r0, r6
 800d3ea:	b002      	add	sp, #8
 800d3ec:	bd70      	pop	{r4, r5, r6, pc}
 800d3ee:	f240 3621 	movw	r6, #801	@ 0x321
 800d3f2:	4630      	mov	r0, r6
 800d3f4:	b002      	add	sp, #8
 800d3f6:	bd70      	pop	{r4, r5, r6, pc}
 800d3f8:	260b      	movs	r6, #11
 800d3fa:	4630      	mov	r0, r6
 800d3fc:	b002      	add	sp, #8
 800d3fe:	bd70      	pop	{r4, r5, r6, pc}
 800d400:	f44f 7648 	mov.w	r6, #800	@ 0x320
 800d404:	e7f0      	b.n	800d3e8 <rcl_timer_get_time_until_next_call+0x44>
 800d406:	bf00      	nop

0800d408 <rcl_timer_get_guard_condition>:
 800d408:	b130      	cbz	r0, 800d418 <rcl_timer_get_guard_condition+0x10>
 800d40a:	6800      	ldr	r0, [r0, #0]
 800d40c:	b120      	cbz	r0, 800d418 <rcl_timer_get_guard_condition+0x10>
 800d40e:	68c3      	ldr	r3, [r0, #12]
 800d410:	b10b      	cbz	r3, 800d416 <rcl_timer_get_guard_condition+0xe>
 800d412:	3008      	adds	r0, #8
 800d414:	4770      	bx	lr
 800d416:	4618      	mov	r0, r3
 800d418:	4770      	bx	lr
 800d41a:	bf00      	nop

0800d41c <_rclc_check_for_new_data>:
 800d41c:	2800      	cmp	r0, #0
 800d41e:	d046      	beq.n	800d4ae <_rclc_check_for_new_data+0x92>
 800d420:	b510      	push	{r4, lr}
 800d422:	7802      	ldrb	r2, [r0, #0]
 800d424:	b084      	sub	sp, #16
 800d426:	4603      	mov	r3, r0
 800d428:	2a0a      	cmp	r2, #10
 800d42a:	d842      	bhi.n	800d4b2 <_rclc_check_for_new_data+0x96>
 800d42c:	e8df f002 	tbb	[pc, r2]
 800d430:	14181212 	.word	0x14181212
 800d434:	06060614 	.word	0x06060614
 800d438:	2e1a      	.short	0x2e1a
 800d43a:	16          	.byte	0x16
 800d43b:	00          	.byte	0x00
 800d43c:	6a0a      	ldr	r2, [r1, #32]
 800d43e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800d440:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800d444:	2000      	movs	r0, #0
 800d446:	1a12      	subs	r2, r2, r0
 800d448:	bf18      	it	ne
 800d44a:	2201      	movne	r2, #1
 800d44c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800d450:	b004      	add	sp, #16
 800d452:	bd10      	pop	{r4, pc}
 800d454:	680a      	ldr	r2, [r1, #0]
 800d456:	e7f2      	b.n	800d43e <_rclc_check_for_new_data+0x22>
 800d458:	698a      	ldr	r2, [r1, #24]
 800d45a:	e7f0      	b.n	800d43e <_rclc_check_for_new_data+0x22>
 800d45c:	688a      	ldr	r2, [r1, #8]
 800d45e:	e7ee      	b.n	800d43e <_rclc_check_for_new_data+0x22>
 800d460:	690a      	ldr	r2, [r1, #16]
 800d462:	e7ec      	b.n	800d43e <_rclc_check_for_new_data+0x22>
 800d464:	685c      	ldr	r4, [r3, #4]
 800d466:	4608      	mov	r0, r1
 800d468:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800d46c:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800d470:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800d474:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800d478:	9300      	str	r3, [sp, #0]
 800d47a:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800d47e:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800d482:	f104 0110 	add.w	r1, r4, #16
 800d486:	f008 ffeb 	bl	8016460 <rcl_action_client_wait_set_get_entities_ready>
 800d48a:	e7e1      	b.n	800d450 <_rclc_check_for_new_data+0x34>
 800d48c:	685c      	ldr	r4, [r3, #4]
 800d48e:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800d492:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800d496:	e9cd 3200 	strd	r3, r2, [sp]
 800d49a:	4608      	mov	r0, r1
 800d49c:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800d4a0:	f104 0220 	add.w	r2, r4, #32
 800d4a4:	f104 0110 	add.w	r1, r4, #16
 800d4a8:	f009 f9f2 	bl	8016890 <rcl_action_server_wait_set_get_entities_ready>
 800d4ac:	e7d0      	b.n	800d450 <_rclc_check_for_new_data+0x34>
 800d4ae:	200b      	movs	r0, #11
 800d4b0:	4770      	bx	lr
 800d4b2:	2001      	movs	r0, #1
 800d4b4:	e7cc      	b.n	800d450 <_rclc_check_for_new_data+0x34>
 800d4b6:	bf00      	nop

0800d4b8 <_rclc_take_new_data>:
 800d4b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4ba:	b09b      	sub	sp, #108	@ 0x6c
 800d4bc:	2800      	cmp	r0, #0
 800d4be:	f000 8088 	beq.w	800d5d2 <_rclc_take_new_data+0x11a>
 800d4c2:	7803      	ldrb	r3, [r0, #0]
 800d4c4:	4604      	mov	r4, r0
 800d4c6:	2b0a      	cmp	r3, #10
 800d4c8:	f200 8167 	bhi.w	800d79a <_rclc_take_new_data+0x2e2>
 800d4cc:	e8df f003 	tbb	[pc, r3]
 800d4d0:	44152d2d 	.word	0x44152d2d
 800d4d4:	19191944 	.word	0x19191944
 800d4d8:	065a      	.short	0x065a
 800d4da:	15          	.byte	0x15
 800d4db:	00          	.byte	0x00
 800d4dc:	6840      	ldr	r0, [r0, #4]
 800d4de:	f890 3020 	ldrb.w	r3, [r0, #32]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	f040 80b2 	bne.w	800d64c <_rclc_take_new_data+0x194>
 800d4e8:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	f040 80e4 	bne.w	800d6ba <_rclc_take_new_data+0x202>
 800d4f2:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d16f      	bne.n	800d5da <_rclc_take_new_data+0x122>
 800d4fa:	2500      	movs	r5, #0
 800d4fc:	4628      	mov	r0, r5
 800d4fe:	b01b      	add	sp, #108	@ 0x6c
 800d500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d502:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800d504:	6a0b      	ldr	r3, [r1, #32]
 800d506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d0f5      	beq.n	800d4fa <_rclc_take_new_data+0x42>
 800d50e:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800d512:	f104 0110 	add.w	r1, r4, #16
 800d516:	f007 fe43 	bl	80151a0 <rcl_take_request>
 800d51a:	4605      	mov	r5, r0
 800d51c:	2800      	cmp	r0, #0
 800d51e:	d0ec      	beq.n	800d4fa <_rclc_take_new_data+0x42>
 800d520:	f240 2359 	movw	r3, #601	@ 0x259
 800d524:	4298      	cmp	r0, r3
 800d526:	d013      	beq.n	800d550 <_rclc_take_new_data+0x98>
 800d528:	e029      	b.n	800d57e <_rclc_take_new_data+0xc6>
 800d52a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800d52c:	680b      	ldr	r3, [r1, #0]
 800d52e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d0e1      	beq.n	800d4fa <_rclc_take_new_data+0x42>
 800d536:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800d53a:	2300      	movs	r3, #0
 800d53c:	aa0a      	add	r2, sp, #40	@ 0x28
 800d53e:	f7ff fc8b 	bl	800ce58 <rcl_take>
 800d542:	4605      	mov	r5, r0
 800d544:	2800      	cmp	r0, #0
 800d546:	d0d9      	beq.n	800d4fc <_rclc_take_new_data+0x44>
 800d548:	f240 1391 	movw	r3, #401	@ 0x191
 800d54c:	4298      	cmp	r0, r3
 800d54e:	d116      	bne.n	800d57e <_rclc_take_new_data+0xc6>
 800d550:	2300      	movs	r3, #0
 800d552:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800d556:	e7d1      	b.n	800d4fc <_rclc_take_new_data+0x44>
 800d558:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800d55a:	698b      	ldr	r3, [r1, #24]
 800d55c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d0ca      	beq.n	800d4fa <_rclc_take_new_data+0x42>
 800d564:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800d568:	f104 0110 	add.w	r1, r4, #16
 800d56c:	f007 fac8 	bl	8014b00 <rcl_take_response>
 800d570:	4605      	mov	r5, r0
 800d572:	2800      	cmp	r0, #0
 800d574:	d0c1      	beq.n	800d4fa <_rclc_take_new_data+0x42>
 800d576:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800d57a:	4298      	cmp	r0, r3
 800d57c:	d0be      	beq.n	800d4fc <_rclc_take_new_data+0x44>
 800d57e:	f001 f813 	bl	800e5a8 <rcutils_reset_error>
 800d582:	e7bb      	b.n	800d4fc <_rclc_take_new_data+0x44>
 800d584:	6840      	ldr	r0, [r0, #4]
 800d586:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d17d      	bne.n	800d68a <_rclc_take_new_data+0x1d2>
 800d58e:	69c3      	ldr	r3, [r0, #28]
 800d590:	b11b      	cbz	r3, 800d59a <_rclc_take_new_data+0xe2>
 800d592:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800d596:	2b00      	cmp	r3, #0
 800d598:	d144      	bne.n	800d624 <_rclc_take_new_data+0x16c>
 800d59a:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	f040 80ac 	bne.w	800d6fc <_rclc_take_new_data+0x244>
 800d5a4:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d0a6      	beq.n	800d4fa <_rclc_take_new_data+0x42>
 800d5ac:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800d5ae:	a90a      	add	r1, sp, #40	@ 0x28
 800d5b0:	3010      	adds	r0, #16
 800d5b2:	f008 fe2d 	bl	8016210 <rcl_action_take_result_response>
 800d5b6:	4605      	mov	r5, r0
 800d5b8:	2800      	cmp	r0, #0
 800d5ba:	d1e0      	bne.n	800d57e <_rclc_take_new_data+0xc6>
 800d5bc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d5c0:	6860      	ldr	r0, [r4, #4]
 800d5c2:	f009 fa89 	bl	8016ad8 <rclc_action_find_handle_by_result_request_sequence_number>
 800d5c6:	2800      	cmp	r0, #0
 800d5c8:	d098      	beq.n	800d4fc <_rclc_take_new_data+0x44>
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800d5d0:	e794      	b.n	800d4fc <_rclc_take_new_data+0x44>
 800d5d2:	250b      	movs	r5, #11
 800d5d4:	4628      	mov	r0, r5
 800d5d6:	b01b      	add	sp, #108	@ 0x6c
 800d5d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5da:	ae04      	add	r6, sp, #16
 800d5dc:	aa0a      	add	r2, sp, #40	@ 0x28
 800d5de:	3010      	adds	r0, #16
 800d5e0:	4631      	mov	r1, r6
 800d5e2:	f009 f889 	bl	80166f8 <rcl_action_take_cancel_request>
 800d5e6:	4605      	mov	r5, r0
 800d5e8:	2800      	cmp	r0, #0
 800d5ea:	d1c8      	bne.n	800d57e <_rclc_take_new_data+0xc6>
 800d5ec:	6860      	ldr	r0, [r4, #4]
 800d5ee:	a90a      	add	r1, sp, #40	@ 0x28
 800d5f0:	f009 fa30 	bl	8016a54 <rclc_action_find_goal_handle_by_uuid>
 800d5f4:	4607      	mov	r7, r0
 800d5f6:	2800      	cmp	r0, #0
 800d5f8:	f000 80bb 	beq.w	800d772 <_rclc_take_new_data+0x2ba>
 800d5fc:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800d600:	2101      	movs	r1, #1
 800d602:	f009 f9b1 	bl	8016968 <rcl_action_transition_goal_state>
 800d606:	2803      	cmp	r0, #3
 800d608:	4684      	mov	ip, r0
 800d60a:	f040 80a7 	bne.w	800d75c <_rclc_take_new_data+0x2a4>
 800d60e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d610:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800d614:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d616:	e896 0003 	ldmia.w	r6, {r0, r1}
 800d61a:	e884 0003 	stmia.w	r4, {r0, r1}
 800d61e:	f887 c008 	strb.w	ip, [r7, #8]
 800d622:	e76b      	b.n	800d4fc <_rclc_take_new_data+0x44>
 800d624:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d626:	3010      	adds	r0, #16
 800d628:	f008 fe72 	bl	8016310 <rcl_action_take_feedback>
 800d62c:	4605      	mov	r5, r0
 800d62e:	2800      	cmp	r0, #0
 800d630:	d1a5      	bne.n	800d57e <_rclc_take_new_data+0xc6>
 800d632:	6860      	ldr	r0, [r4, #4]
 800d634:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d636:	f009 fa0d 	bl	8016a54 <rclc_action_find_goal_handle_by_uuid>
 800d63a:	4603      	mov	r3, r0
 800d63c:	2800      	cmp	r0, #0
 800d63e:	f000 80a3 	beq.w	800d788 <_rclc_take_new_data+0x2d0>
 800d642:	2201      	movs	r2, #1
 800d644:	6860      	ldr	r0, [r4, #4]
 800d646:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800d64a:	e7a6      	b.n	800d59a <_rclc_take_new_data+0xe2>
 800d64c:	f009 f9dc 	bl	8016a08 <rclc_action_take_goal_handle>
 800d650:	4606      	mov	r6, r0
 800d652:	6860      	ldr	r0, [r4, #4]
 800d654:	2e00      	cmp	r6, #0
 800d656:	f43f af47 	beq.w	800d4e8 <_rclc_take_new_data+0x30>
 800d65a:	6070      	str	r0, [r6, #4]
 800d65c:	69f2      	ldr	r2, [r6, #28]
 800d65e:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800d662:	3010      	adds	r0, #16
 800d664:	f008 ff90 	bl	8016588 <rcl_action_take_goal_request>
 800d668:	4605      	mov	r5, r0
 800d66a:	2800      	cmp	r0, #0
 800d66c:	f040 808e 	bne.w	800d78c <_rclc_take_new_data+0x2d4>
 800d670:	69f7      	ldr	r7, [r6, #28]
 800d672:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d674:	7235      	strb	r5, [r6, #8]
 800d676:	f8c6 0009 	str.w	r0, [r6, #9]
 800d67a:	f8c6 100d 	str.w	r1, [r6, #13]
 800d67e:	6860      	ldr	r0, [r4, #4]
 800d680:	f8c6 2011 	str.w	r2, [r6, #17]
 800d684:	f8c6 3015 	str.w	r3, [r6, #21]
 800d688:	e72e      	b.n	800d4e8 <_rclc_take_new_data+0x30>
 800d68a:	aa04      	add	r2, sp, #16
 800d68c:	a90a      	add	r1, sp, #40	@ 0x28
 800d68e:	3010      	adds	r0, #16
 800d690:	f008 fd46 	bl	8016120 <rcl_action_take_goal_response>
 800d694:	4605      	mov	r5, r0
 800d696:	2800      	cmp	r0, #0
 800d698:	f47f af71 	bne.w	800d57e <_rclc_take_new_data+0xc6>
 800d69c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d6a0:	6860      	ldr	r0, [r4, #4]
 800d6a2:	f009 fa07 	bl	8016ab4 <rclc_action_find_handle_by_goal_request_sequence_number>
 800d6a6:	b130      	cbz	r0, 800d6b6 <_rclc_take_new_data+0x1fe>
 800d6a8:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800d6ac:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800d6b0:	2201      	movs	r2, #1
 800d6b2:	f880 2020 	strb.w	r2, [r0, #32]
 800d6b6:	6860      	ldr	r0, [r4, #4]
 800d6b8:	e769      	b.n	800d58e <_rclc_take_new_data+0xd6>
 800d6ba:	aa04      	add	r2, sp, #16
 800d6bc:	3010      	adds	r0, #16
 800d6be:	a90a      	add	r1, sp, #40	@ 0x28
 800d6c0:	f008 ffda 	bl	8016678 <rcl_action_take_result_request>
 800d6c4:	4605      	mov	r5, r0
 800d6c6:	2800      	cmp	r0, #0
 800d6c8:	f47f af59 	bne.w	800d57e <_rclc_take_new_data+0xc6>
 800d6cc:	6860      	ldr	r0, [r4, #4]
 800d6ce:	a904      	add	r1, sp, #16
 800d6d0:	f009 f9c0 	bl	8016a54 <rclc_action_find_goal_handle_by_uuid>
 800d6d4:	4607      	mov	r7, r0
 800d6d6:	b160      	cbz	r0, 800d6f2 <_rclc_take_new_data+0x23a>
 800d6d8:	ad0a      	add	r5, sp, #40	@ 0x28
 800d6da:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800d6de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d6e0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d6e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d6e6:	f04f 0c02 	mov.w	ip, #2
 800d6ea:	e886 0003 	stmia.w	r6, {r0, r1}
 800d6ee:	f887 c008 	strb.w	ip, [r7, #8]
 800d6f2:	6860      	ldr	r0, [r4, #4]
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800d6fa:	e6fa      	b.n	800d4f2 <_rclc_take_new_data+0x3a>
 800d6fc:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800d700:	a90a      	add	r1, sp, #40	@ 0x28
 800d702:	3010      	adds	r0, #16
 800d704:	f008 fdc4 	bl	8016290 <rcl_action_take_cancel_response>
 800d708:	4605      	mov	r5, r0
 800d70a:	2800      	cmp	r0, #0
 800d70c:	f47f af37 	bne.w	800d57e <_rclc_take_new_data+0xc6>
 800d710:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d714:	6860      	ldr	r0, [r4, #4]
 800d716:	f009 f9f1 	bl	8016afc <rclc_action_find_handle_by_cancel_request_sequence_number>
 800d71a:	4606      	mov	r6, r0
 800d71c:	6860      	ldr	r0, [r4, #4]
 800d71e:	2e00      	cmp	r6, #0
 800d720:	f43f af40 	beq.w	800d5a4 <_rclc_take_new_data+0xec>
 800d724:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800d726:	2701      	movs	r7, #1
 800d728:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	f43f af3a 	beq.w	800d5a4 <_rclc_take_new_data+0xec>
 800d730:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d732:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800d736:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800d73a:	f009 f98b 	bl	8016a54 <rclc_action_find_goal_handle_by_uuid>
 800d73e:	b138      	cbz	r0, 800d750 <_rclc_take_new_data+0x298>
 800d740:	6860      	ldr	r0, [r4, #4]
 800d742:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800d744:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800d748:	3501      	adds	r5, #1
 800d74a:	42ab      	cmp	r3, r5
 800d74c:	d8f0      	bhi.n	800d730 <_rclc_take_new_data+0x278>
 800d74e:	e729      	b.n	800d5a4 <_rclc_take_new_data+0xec>
 800d750:	6860      	ldr	r0, [r4, #4]
 800d752:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800d754:	3501      	adds	r5, #1
 800d756:	42ab      	cmp	r3, r5
 800d758:	d8ea      	bhi.n	800d730 <_rclc_take_new_data+0x278>
 800d75a:	e723      	b.n	800d5a4 <_rclc_take_new_data+0xec>
 800d75c:	ab06      	add	r3, sp, #24
 800d75e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d760:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d764:	2103      	movs	r1, #3
 800d766:	e896 000c 	ldmia.w	r6, {r2, r3}
 800d76a:	6860      	ldr	r0, [r4, #4]
 800d76c:	f009 fa3c 	bl	8016be8 <rclc_action_server_goal_cancel_reject>
 800d770:	e6c4      	b.n	800d4fc <_rclc_take_new_data+0x44>
 800d772:	ab06      	add	r3, sp, #24
 800d774:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d776:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d77a:	2102      	movs	r1, #2
 800d77c:	e896 000c 	ldmia.w	r6, {r2, r3}
 800d780:	6860      	ldr	r0, [r4, #4]
 800d782:	f009 fa31 	bl	8016be8 <rclc_action_server_goal_cancel_reject>
 800d786:	e6b9      	b.n	800d4fc <_rclc_take_new_data+0x44>
 800d788:	6860      	ldr	r0, [r4, #4]
 800d78a:	e706      	b.n	800d59a <_rclc_take_new_data+0xe2>
 800d78c:	6860      	ldr	r0, [r4, #4]
 800d78e:	4631      	mov	r1, r6
 800d790:	f009 f94a 	bl	8016a28 <rclc_action_remove_used_goal_handle>
 800d794:	f000 ff08 	bl	800e5a8 <rcutils_reset_error>
 800d798:	e6b0      	b.n	800d4fc <_rclc_take_new_data+0x44>
 800d79a:	2501      	movs	r5, #1
 800d79c:	e6ae      	b.n	800d4fc <_rclc_take_new_data+0x44>
 800d79e:	bf00      	nop

0800d7a0 <_rclc_execute.part.0>:
 800d7a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7a2:	7803      	ldrb	r3, [r0, #0]
 800d7a4:	b087      	sub	sp, #28
 800d7a6:	4604      	mov	r4, r0
 800d7a8:	2b0a      	cmp	r3, #10
 800d7aa:	f200 8136 	bhi.w	800da1a <_rclc_execute.part.0+0x27a>
 800d7ae:	e8df f003 	tbb	[pc, r3]
 800d7b2:	435e      	.short	0x435e
 800d7b4:	06a1664f 	.word	0x06a1664f
 800d7b8:	6c1e0606 	.word	0x6c1e0606
 800d7bc:	59          	.byte	0x59
 800d7bd:	00          	.byte	0x00
 800d7be:	2b06      	cmp	r3, #6
 800d7c0:	f000 8122 	beq.w	800da08 <_rclc_execute.part.0+0x268>
 800d7c4:	2b07      	cmp	r3, #7
 800d7c6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d7c8:	f040 8118 	bne.w	800d9fc <_rclc_execute.part.0+0x25c>
 800d7cc:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800d7d0:	6880      	ldr	r0, [r0, #8]
 800d7d2:	4798      	blx	r3
 800d7d4:	f104 0110 	add.w	r1, r4, #16
 800d7d8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800d7da:	6860      	ldr	r0, [r4, #4]
 800d7dc:	f007 fd20 	bl	8015220 <rcl_send_response>
 800d7e0:	2800      	cmp	r0, #0
 800d7e2:	d033      	beq.n	800d84c <_rclc_execute.part.0+0xac>
 800d7e4:	9005      	str	r0, [sp, #20]
 800d7e6:	f000 fedf 	bl	800e5a8 <rcutils_reset_error>
 800d7ea:	9805      	ldr	r0, [sp, #20]
 800d7ec:	e02e      	b.n	800d84c <_rclc_execute.part.0+0xac>
 800d7ee:	6840      	ldr	r0, [r0, #4]
 800d7f0:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	f000 8086 	beq.w	800d906 <_rclc_execute.part.0+0x166>
 800d7fa:	2600      	movs	r6, #0
 800d7fc:	2701      	movs	r7, #1
 800d7fe:	e004      	b.n	800d80a <_rclc_execute.part.0+0x6a>
 800d800:	f009 f8dc 	bl	80169bc <rclc_action_send_result_request>
 800d804:	b998      	cbnz	r0, 800d82e <_rclc_execute.part.0+0x8e>
 800d806:	722f      	strb	r7, [r5, #8]
 800d808:	6860      	ldr	r0, [r4, #4]
 800d80a:	f009 f989 	bl	8016b20 <rclc_action_find_first_handle_with_goal_response>
 800d80e:	4605      	mov	r5, r0
 800d810:	2800      	cmp	r0, #0
 800d812:	d077      	beq.n	800d904 <_rclc_execute.part.0+0x164>
 800d814:	6863      	ldr	r3, [r4, #4]
 800d816:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d818:	699b      	ldr	r3, [r3, #24]
 800d81a:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800d81e:	f885 6020 	strb.w	r6, [r5, #32]
 800d822:	4798      	blx	r3
 800d824:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800d828:	4628      	mov	r0, r5
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d1e8      	bne.n	800d800 <_rclc_execute.part.0+0x60>
 800d82e:	6860      	ldr	r0, [r4, #4]
 800d830:	4629      	mov	r1, r5
 800d832:	f009 f8f9 	bl	8016a28 <rclc_action_remove_used_goal_handle>
 800d836:	e7e7      	b.n	800d808 <_rclc_execute.part.0+0x68>
 800d838:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800d83c:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800d840:	2d00      	cmp	r5, #0
 800d842:	f000 80c9 	beq.w	800d9d8 <_rclc_execute.part.0+0x238>
 800d846:	6880      	ldr	r0, [r0, #8]
 800d848:	4798      	blx	r3
 800d84a:	2000      	movs	r0, #0
 800d84c:	b007      	add	sp, #28
 800d84e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d850:	6840      	ldr	r0, [r0, #4]
 800d852:	f7ff fcdb 	bl	800d20c <rcl_timer_call>
 800d856:	f240 3321 	movw	r3, #801	@ 0x321
 800d85a:	4298      	cmp	r0, r3
 800d85c:	d004      	beq.n	800d868 <_rclc_execute.part.0+0xc8>
 800d85e:	2800      	cmp	r0, #0
 800d860:	d0f4      	beq.n	800d84c <_rclc_execute.part.0+0xac>
 800d862:	e7bf      	b.n	800d7e4 <_rclc_execute.part.0+0x44>
 800d864:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d866:	4798      	blx	r3
 800d868:	2000      	movs	r0, #0
 800d86a:	b007      	add	sp, #28
 800d86c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d86e:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800d872:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d874:	b925      	cbnz	r5, 800d880 <_rclc_execute.part.0+0xe0>
 800d876:	4628      	mov	r0, r5
 800d878:	4798      	blx	r3
 800d87a:	4628      	mov	r0, r5
 800d87c:	e7e6      	b.n	800d84c <_rclc_execute.part.0+0xac>
 800d87e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d880:	68a0      	ldr	r0, [r4, #8]
 800d882:	4798      	blx	r3
 800d884:	2000      	movs	r0, #0
 800d886:	b007      	add	sp, #28
 800d888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d88a:	6840      	ldr	r0, [r0, #4]
 800d88c:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800d890:	bb3b      	cbnz	r3, 800d8e2 <_rclc_execute.part.0+0x142>
 800d892:	f890 3020 	ldrb.w	r3, [r0, #32]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d07b      	beq.n	800d992 <_rclc_execute.part.0+0x1f2>
 800d89a:	f640 0634 	movw	r6, #2100	@ 0x834
 800d89e:	2701      	movs	r7, #1
 800d8a0:	e007      	b.n	800d8b2 <_rclc_execute.part.0+0x112>
 800d8a2:	4628      	mov	r0, r5
 800d8a4:	f009 f954 	bl	8016b50 <rclc_action_server_response_goal_request>
 800d8a8:	6860      	ldr	r0, [r4, #4]
 800d8aa:	4629      	mov	r1, r5
 800d8ac:	f009 f8bc 	bl	8016a28 <rclc_action_remove_used_goal_handle>
 800d8b0:	6860      	ldr	r0, [r4, #4]
 800d8b2:	2100      	movs	r1, #0
 800d8b4:	f009 f8e6 	bl	8016a84 <rclc_action_find_first_handle_by_status>
 800d8b8:	4605      	mov	r5, r0
 800d8ba:	2800      	cmp	r0, #0
 800d8bc:	d066      	beq.n	800d98c <_rclc_execute.part.0+0x1ec>
 800d8be:	6863      	ldr	r3, [r4, #4]
 800d8c0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d8c2:	699b      	ldr	r3, [r3, #24]
 800d8c4:	4798      	blx	r3
 800d8c6:	42b0      	cmp	r0, r6
 800d8c8:	f04f 0100 	mov.w	r1, #0
 800d8cc:	d1e9      	bne.n	800d8a2 <_rclc_execute.part.0+0x102>
 800d8ce:	2101      	movs	r1, #1
 800d8d0:	4628      	mov	r0, r5
 800d8d2:	f009 f93d 	bl	8016b50 <rclc_action_server_response_goal_request>
 800d8d6:	722f      	strb	r7, [r5, #8]
 800d8d8:	e7ea      	b.n	800d8b0 <_rclc_execute.part.0+0x110>
 800d8da:	6848      	ldr	r0, [r1, #4]
 800d8dc:	f009 f8a4 	bl	8016a28 <rclc_action_remove_used_goal_handle>
 800d8e0:	6860      	ldr	r0, [r4, #4]
 800d8e2:	f009 f8db 	bl	8016a9c <rclc_action_find_first_terminated_handle>
 800d8e6:	4601      	mov	r1, r0
 800d8e8:	2800      	cmp	r0, #0
 800d8ea:	d1f6      	bne.n	800d8da <_rclc_execute.part.0+0x13a>
 800d8ec:	6860      	ldr	r0, [r4, #4]
 800d8ee:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800d8f2:	e7ce      	b.n	800d892 <_rclc_execute.part.0+0xf2>
 800d8f4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d8f6:	6880      	ldr	r0, [r0, #8]
 800d8f8:	f104 0110 	add.w	r1, r4, #16
 800d8fc:	4798      	blx	r3
 800d8fe:	2000      	movs	r0, #0
 800d900:	b007      	add	sp, #28
 800d902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d904:	6860      	ldr	r0, [r4, #4]
 800d906:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800d90a:	b18b      	cbz	r3, 800d930 <_rclc_execute.part.0+0x190>
 800d90c:	68c5      	ldr	r5, [r0, #12]
 800d90e:	b32d      	cbz	r5, 800d95c <_rclc_execute.part.0+0x1bc>
 800d910:	2600      	movs	r6, #0
 800d912:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800d916:	b143      	cbz	r3, 800d92a <_rclc_execute.part.0+0x18a>
 800d918:	69c3      	ldr	r3, [r0, #28]
 800d91a:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800d91e:	b123      	cbz	r3, 800d92a <_rclc_execute.part.0+0x18a>
 800d920:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d922:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d924:	4628      	mov	r0, r5
 800d926:	4798      	blx	r3
 800d928:	6860      	ldr	r0, [r4, #4]
 800d92a:	682d      	ldr	r5, [r5, #0]
 800d92c:	2d00      	cmp	r5, #0
 800d92e:	d1f0      	bne.n	800d912 <_rclc_execute.part.0+0x172>
 800d930:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800d934:	b193      	cbz	r3, 800d95c <_rclc_execute.part.0+0x1bc>
 800d936:	68c5      	ldr	r5, [r0, #12]
 800d938:	b185      	cbz	r5, 800d95c <_rclc_execute.part.0+0x1bc>
 800d93a:	2600      	movs	r6, #0
 800d93c:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800d940:	b14b      	cbz	r3, 800d956 <_rclc_execute.part.0+0x1b6>
 800d942:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800d944:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800d948:	b12b      	cbz	r3, 800d956 <_rclc_execute.part.0+0x1b6>
 800d94a:	4628      	mov	r0, r5
 800d94c:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800d950:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d952:	4798      	blx	r3
 800d954:	6860      	ldr	r0, [r4, #4]
 800d956:	682d      	ldr	r5, [r5, #0]
 800d958:	2d00      	cmp	r5, #0
 800d95a:	d1ef      	bne.n	800d93c <_rclc_execute.part.0+0x19c>
 800d95c:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800d960:	2b00      	cmp	r3, #0
 800d962:	d081      	beq.n	800d868 <_rclc_execute.part.0+0xc8>
 800d964:	2700      	movs	r7, #0
 800d966:	e00b      	b.n	800d980 <_rclc_execute.part.0+0x1e0>
 800d968:	6863      	ldr	r3, [r4, #4]
 800d96a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d96c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800d96e:	6a1e      	ldr	r6, [r3, #32]
 800d970:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800d974:	47b0      	blx	r6
 800d976:	6860      	ldr	r0, [r4, #4]
 800d978:	4629      	mov	r1, r5
 800d97a:	f009 f855 	bl	8016a28 <rclc_action_remove_used_goal_handle>
 800d97e:	6860      	ldr	r0, [r4, #4]
 800d980:	f009 f8da 	bl	8016b38 <rclc_action_find_first_handle_with_result_response>
 800d984:	4605      	mov	r5, r0
 800d986:	2800      	cmp	r0, #0
 800d988:	d1ee      	bne.n	800d968 <_rclc_execute.part.0+0x1c8>
 800d98a:	e76d      	b.n	800d868 <_rclc_execute.part.0+0xc8>
 800d98c:	6860      	ldr	r0, [r4, #4]
 800d98e:	f880 5020 	strb.w	r5, [r0, #32]
 800d992:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800d996:	2b00      	cmp	r3, #0
 800d998:	f43f af66 	beq.w	800d868 <_rclc_execute.part.0+0xc8>
 800d99c:	68c5      	ldr	r5, [r0, #12]
 800d99e:	b1b5      	cbz	r5, 800d9ce <_rclc_execute.part.0+0x22e>
 800d9a0:	2602      	movs	r6, #2
 800d9a2:	e001      	b.n	800d9a8 <_rclc_execute.part.0+0x208>
 800d9a4:	682d      	ldr	r5, [r5, #0]
 800d9a6:	b195      	cbz	r5, 800d9ce <_rclc_execute.part.0+0x22e>
 800d9a8:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800d9ac:	2b03      	cmp	r3, #3
 800d9ae:	d1f9      	bne.n	800d9a4 <_rclc_execute.part.0+0x204>
 800d9b0:	69c3      	ldr	r3, [r0, #28]
 800d9b2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d9b4:	4628      	mov	r0, r5
 800d9b6:	4798      	blx	r3
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800d9be:	4628      	mov	r0, r5
 800d9c0:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800d9c4:	b163      	cbz	r3, 800d9e0 <_rclc_execute.part.0+0x240>
 800d9c6:	f009 f8e3 	bl	8016b90 <rclc_action_server_goal_cancel_accept>
 800d9ca:	6860      	ldr	r0, [r4, #4]
 800d9cc:	e7ea      	b.n	800d9a4 <_rclc_execute.part.0+0x204>
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	e739      	b.n	800d84c <_rclc_execute.part.0+0xac>
 800d9d8:	4628      	mov	r0, r5
 800d9da:	4798      	blx	r3
 800d9dc:	4628      	mov	r0, r5
 800d9de:	e735      	b.n	800d84c <_rclc_execute.part.0+0xac>
 800d9e0:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800d9e2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d9e6:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800d9ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d9ee:	6860      	ldr	r0, [r4, #4]
 800d9f0:	2101      	movs	r1, #1
 800d9f2:	f009 f8f9 	bl	8016be8 <rclc_action_server_goal_cancel_reject>
 800d9f6:	722e      	strb	r6, [r5, #8]
 800d9f8:	6860      	ldr	r0, [r4, #4]
 800d9fa:	e7d3      	b.n	800d9a4 <_rclc_execute.part.0+0x204>
 800d9fc:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d9fe:	6880      	ldr	r0, [r0, #8]
 800da00:	4798      	blx	r3
 800da02:	f104 0110 	add.w	r1, r4, #16
 800da06:	e6e7      	b.n	800d7d8 <_rclc_execute.part.0+0x38>
 800da08:	f100 0110 	add.w	r1, r0, #16
 800da0c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800da0e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800da10:	6880      	ldr	r0, [r0, #8]
 800da12:	9105      	str	r1, [sp, #20]
 800da14:	4798      	blx	r3
 800da16:	9905      	ldr	r1, [sp, #20]
 800da18:	e6de      	b.n	800d7d8 <_rclc_execute.part.0+0x38>
 800da1a:	2001      	movs	r0, #1
 800da1c:	e716      	b.n	800d84c <_rclc_execute.part.0+0xac>
 800da1e:	bf00      	nop

0800da20 <rclc_executor_trigger_any>:
 800da20:	2800      	cmp	r0, #0
 800da22:	d03f      	beq.n	800daa4 <rclc_executor_trigger_any+0x84>
 800da24:	2900      	cmp	r1, #0
 800da26:	d03e      	beq.n	800daa6 <rclc_executor_trigger_any+0x86>
 800da28:	4603      	mov	r3, r0
 800da2a:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800da2e:	2200      	movs	r2, #0
 800da30:	2800      	cmp	r0, #0
 800da32:	d037      	beq.n	800daa4 <rclc_executor_trigger_any+0x84>
 800da34:	b430      	push	{r4, r5}
 800da36:	f893 c000 	ldrb.w	ip, [r3]
 800da3a:	f1bc 0f08 	cmp.w	ip, #8
 800da3e:	d11e      	bne.n	800da7e <rclc_executor_trigger_any+0x5e>
 800da40:	685c      	ldr	r4, [r3, #4]
 800da42:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800da44:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800da48:	d105      	bne.n	800da56 <rclc_executor_trigger_any+0x36>
 800da4a:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800da4e:	b910      	cbnz	r0, 800da56 <rclc_executor_trigger_any+0x36>
 800da50:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800da54:	b128      	cbz	r0, 800da62 <rclc_executor_trigger_any+0x42>
 800da56:	bc30      	pop	{r4, r5}
 800da58:	4770      	bx	lr
 800da5a:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800da5e:	2800      	cmp	r0, #0
 800da60:	d1f9      	bne.n	800da56 <rclc_executor_trigger_any+0x36>
 800da62:	3201      	adds	r2, #1
 800da64:	4291      	cmp	r1, r2
 800da66:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800da6a:	d018      	beq.n	800da9e <rclc_executor_trigger_any+0x7e>
 800da6c:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800da70:	2800      	cmp	r0, #0
 800da72:	d0f0      	beq.n	800da56 <rclc_executor_trigger_any+0x36>
 800da74:	f893 c000 	ldrb.w	ip, [r3]
 800da78:	f1bc 0f08 	cmp.w	ip, #8
 800da7c:	d0e0      	beq.n	800da40 <rclc_executor_trigger_any+0x20>
 800da7e:	f1bc 0f09 	cmp.w	ip, #9
 800da82:	d1ea      	bne.n	800da5a <rclc_executor_trigger_any+0x3a>
 800da84:	685c      	ldr	r4, [r3, #4]
 800da86:	6a25      	ldr	r5, [r4, #32]
 800da88:	2d00      	cmp	r5, #0
 800da8a:	d1e4      	bne.n	800da56 <rclc_executor_trigger_any+0x36>
 800da8c:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800da90:	2800      	cmp	r0, #0
 800da92:	d1e0      	bne.n	800da56 <rclc_executor_trigger_any+0x36>
 800da94:	3201      	adds	r2, #1
 800da96:	4291      	cmp	r1, r2
 800da98:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800da9c:	d1e6      	bne.n	800da6c <rclc_executor_trigger_any+0x4c>
 800da9e:	2000      	movs	r0, #0
 800daa0:	bc30      	pop	{r4, r5}
 800daa2:	4770      	bx	lr
 800daa4:	4770      	bx	lr
 800daa6:	4608      	mov	r0, r1
 800daa8:	4770      	bx	lr
 800daaa:	bf00      	nop
 800daac:	0000      	movs	r0, r0
	...

0800dab0 <rclc_executor_init>:
 800dab0:	2800      	cmp	r0, #0
 800dab2:	d05f      	beq.n	800db74 <rclc_executor_init+0xc4>
 800dab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dab8:	460c      	mov	r4, r1
 800daba:	b0b0      	sub	sp, #192	@ 0xc0
 800dabc:	2900      	cmp	r1, #0
 800dabe:	d051      	beq.n	800db64 <rclc_executor_init+0xb4>
 800dac0:	4605      	mov	r5, r0
 800dac2:	4618      	mov	r0, r3
 800dac4:	4616      	mov	r6, r2
 800dac6:	461f      	mov	r7, r3
 800dac8:	f000 fc8e 	bl	800e3e8 <rcutils_allocator_is_valid>
 800dacc:	2800      	cmp	r0, #0
 800dace:	d049      	beq.n	800db64 <rclc_executor_init+0xb4>
 800dad0:	2e00      	cmp	r6, #0
 800dad2:	d047      	beq.n	800db64 <rclc_executor_init+0xb4>
 800dad4:	492c      	ldr	r1, [pc, #176]	@ (800db88 <rclc_executor_init+0xd8>)
 800dad6:	2288      	movs	r2, #136	@ 0x88
 800dad8:	a80e      	add	r0, sp, #56	@ 0x38
 800dada:	f00c f90a 	bl	8019cf2 <memcpy>
 800dade:	a90e      	add	r1, sp, #56	@ 0x38
 800dae0:	2288      	movs	r2, #136	@ 0x88
 800dae2:	4628      	mov	r0, r5
 800dae4:	f00c f905 	bl	8019cf2 <memcpy>
 800dae8:	602c      	str	r4, [r5, #0]
 800daea:	4668      	mov	r0, sp
 800daec:	60ae      	str	r6, [r5, #8]
 800daee:	466c      	mov	r4, sp
 800daf0:	f007 fd46 	bl	8015580 <rcl_get_zero_initialized_wait_set>
 800daf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800daf6:	f105 0c14 	add.w	ip, r5, #20
 800dafa:	f8d7 8000 	ldr.w	r8, [r7]
 800dafe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800db02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800db04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800db08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800db0a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800db0e:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800db80 <rclc_executor_init+0xd0>
 800db12:	6823      	ldr	r3, [r4, #0]
 800db14:	f8cc 3000 	str.w	r3, [ip]
 800db18:	6939      	ldr	r1, [r7, #16]
 800db1a:	612f      	str	r7, [r5, #16]
 800db1c:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800db20:	01b0      	lsls	r0, r6, #6
 800db22:	47c0      	blx	r8
 800db24:	6068      	str	r0, [r5, #4]
 800db26:	b338      	cbz	r0, 800db78 <rclc_executor_init+0xc8>
 800db28:	2400      	movs	r4, #0
 800db2a:	e000      	b.n	800db2e <rclc_executor_init+0x7e>
 800db2c:	6868      	ldr	r0, [r5, #4]
 800db2e:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800db32:	4631      	mov	r1, r6
 800db34:	3401      	adds	r4, #1
 800db36:	f000 facb 	bl	800e0d0 <rclc_executor_handle_init>
 800db3a:	42a6      	cmp	r6, r4
 800db3c:	d1f6      	bne.n	800db2c <rclc_executor_init+0x7c>
 800db3e:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800db42:	f000 fab9 	bl	800e0b8 <rclc_executor_handle_counters_zero_init>
 800db46:	4a11      	ldr	r2, [pc, #68]	@ (800db8c <rclc_executor_init+0xdc>)
 800db48:	686b      	ldr	r3, [r5, #4]
 800db4a:	2000      	movs	r0, #0
 800db4c:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800db50:	b163      	cbz	r3, 800db6c <rclc_executor_init+0xbc>
 800db52:	692b      	ldr	r3, [r5, #16]
 800db54:	b153      	cbz	r3, 800db6c <rclc_executor_init+0xbc>
 800db56:	68ab      	ldr	r3, [r5, #8]
 800db58:	b143      	cbz	r3, 800db6c <rclc_executor_init+0xbc>
 800db5a:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800db5e:	b030      	add	sp, #192	@ 0xc0
 800db60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db64:	200b      	movs	r0, #11
 800db66:	b030      	add	sp, #192	@ 0xc0
 800db68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db6c:	4618      	mov	r0, r3
 800db6e:	b030      	add	sp, #192	@ 0xc0
 800db70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db74:	200b      	movs	r0, #11
 800db76:	4770      	bx	lr
 800db78:	200a      	movs	r0, #10
 800db7a:	e7f4      	b.n	800db66 <rclc_executor_init+0xb6>
 800db7c:	f3af 8000 	nop.w
 800db80:	3b9aca00 	.word	0x3b9aca00
 800db84:	00000000 	.word	0x00000000
 800db88:	0801b4d8 	.word	0x0801b4d8
 800db8c:	0800da21 	.word	0x0800da21

0800db90 <rclc_executor_fini>:
 800db90:	b308      	cbz	r0, 800dbd6 <rclc_executor_fini+0x46>
 800db92:	b538      	push	{r3, r4, r5, lr}
 800db94:	4604      	mov	r4, r0
 800db96:	6840      	ldr	r0, [r0, #4]
 800db98:	b1d8      	cbz	r0, 800dbd2 <rclc_executor_fini+0x42>
 800db9a:	6923      	ldr	r3, [r4, #16]
 800db9c:	b1cb      	cbz	r3, 800dbd2 <rclc_executor_fini+0x42>
 800db9e:	68a2      	ldr	r2, [r4, #8]
 800dba0:	b1ba      	cbz	r2, 800dbd2 <rclc_executor_fini+0x42>
 800dba2:	6919      	ldr	r1, [r3, #16]
 800dba4:	685b      	ldr	r3, [r3, #4]
 800dba6:	4798      	blx	r3
 800dba8:	2300      	movs	r3, #0
 800dbaa:	2000      	movs	r0, #0
 800dbac:	2100      	movs	r1, #0
 800dbae:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dbb2:	6063      	str	r3, [r4, #4]
 800dbb4:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 800dbb8:	f104 0514 	add.w	r5, r4, #20
 800dbbc:	f000 fa7c 	bl	800e0b8 <rclc_executor_handle_counters_zero_init>
 800dbc0:	4628      	mov	r0, r5
 800dbc2:	f007 fcf1 	bl	80155a8 <rcl_wait_set_is_valid>
 800dbc6:	b940      	cbnz	r0, 800dbda <rclc_executor_fini+0x4a>
 800dbc8:	a309      	add	r3, pc, #36	@ (adr r3, 800dbf0 <rclc_executor_fini+0x60>)
 800dbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbce:	e9c4 231a 	strd	r2, r3, [r4, #104]	@ 0x68
 800dbd2:	2000      	movs	r0, #0
 800dbd4:	bd38      	pop	{r3, r4, r5, pc}
 800dbd6:	2000      	movs	r0, #0
 800dbd8:	4770      	bx	lr
 800dbda:	4628      	mov	r0, r5
 800dbdc:	f007 fcea 	bl	80155b4 <rcl_wait_set_fini>
 800dbe0:	2800      	cmp	r0, #0
 800dbe2:	d0f1      	beq.n	800dbc8 <rclc_executor_fini+0x38>
 800dbe4:	f000 fce0 	bl	800e5a8 <rcutils_reset_error>
 800dbe8:	e7ee      	b.n	800dbc8 <rclc_executor_fini+0x38>
 800dbea:	bf00      	nop
 800dbec:	f3af 8000 	nop.w
 800dbf0:	3b9aca00 	.word	0x3b9aca00
 800dbf4:	00000000 	.word	0x00000000

0800dbf8 <rclc_executor_add_subscription>:
 800dbf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbfa:	f89d e018 	ldrb.w	lr, [sp, #24]
 800dbfe:	b338      	cbz	r0, 800dc50 <rclc_executor_add_subscription+0x58>
 800dc00:	b331      	cbz	r1, 800dc50 <rclc_executor_add_subscription+0x58>
 800dc02:	b32a      	cbz	r2, 800dc50 <rclc_executor_add_subscription+0x58>
 800dc04:	b323      	cbz	r3, 800dc50 <rclc_executor_add_subscription+0x58>
 800dc06:	4604      	mov	r4, r0
 800dc08:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800dc0c:	42a8      	cmp	r0, r5
 800dc0e:	d301      	bcc.n	800dc14 <rclc_executor_add_subscription+0x1c>
 800dc10:	2001      	movs	r0, #1
 800dc12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc14:	6866      	ldr	r6, [r4, #4]
 800dc16:	0187      	lsls	r7, r0, #6
 800dc18:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800dc1c:	2500      	movs	r5, #0
 800dc1e:	55f5      	strb	r5, [r6, r7]
 800dc20:	3001      	adds	r0, #1
 800dc22:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800dc26:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800dc2a:	2301      	movs	r3, #1
 800dc2c:	f104 0514 	add.w	r5, r4, #20
 800dc30:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800dc34:	f88c e001 	strb.w	lr, [ip, #1]
 800dc38:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800dc3c:	60e0      	str	r0, [r4, #12]
 800dc3e:	4628      	mov	r0, r5
 800dc40:	f007 fcb2 	bl	80155a8 <rcl_wait_set_is_valid>
 800dc44:	b930      	cbnz	r0, 800dc54 <rclc_executor_add_subscription+0x5c>
 800dc46:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800dc48:	3301      	adds	r3, #1
 800dc4a:	2000      	movs	r0, #0
 800dc4c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800dc4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc50:	200b      	movs	r0, #11
 800dc52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc54:	4628      	mov	r0, r5
 800dc56:	f007 fcad 	bl	80155b4 <rcl_wait_set_fini>
 800dc5a:	2800      	cmp	r0, #0
 800dc5c:	d0f3      	beq.n	800dc46 <rclc_executor_add_subscription+0x4e>
 800dc5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dc60 <rclc_executor_add_timer>:
 800dc60:	b300      	cbz	r0, 800dca4 <rclc_executor_add_timer+0x44>
 800dc62:	b1f9      	cbz	r1, 800dca4 <rclc_executor_add_timer+0x44>
 800dc64:	b538      	push	{r3, r4, r5, lr}
 800dc66:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800dc6a:	4293      	cmp	r3, r2
 800dc6c:	4604      	mov	r4, r0
 800dc6e:	d301      	bcc.n	800dc74 <rclc_executor_add_timer+0x14>
 800dc70:	2001      	movs	r0, #1
 800dc72:	bd38      	pop	{r3, r4, r5, pc}
 800dc74:	6840      	ldr	r0, [r0, #4]
 800dc76:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800dc7a:	019d      	lsls	r5, r3, #6
 800dc7c:	6051      	str	r1, [r2, #4]
 800dc7e:	2102      	movs	r1, #2
 800dc80:	5341      	strh	r1, [r0, r5]
 800dc82:	3301      	adds	r3, #1
 800dc84:	2000      	movs	r0, #0
 800dc86:	2101      	movs	r1, #1
 800dc88:	f104 0514 	add.w	r5, r4, #20
 800dc8c:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800dc8e:	8711      	strh	r1, [r2, #56]	@ 0x38
 800dc90:	4628      	mov	r0, r5
 800dc92:	60e3      	str	r3, [r4, #12]
 800dc94:	f007 fc88 	bl	80155a8 <rcl_wait_set_is_valid>
 800dc98:	b930      	cbnz	r0, 800dca8 <rclc_executor_add_timer+0x48>
 800dc9a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800dc9c:	3301      	adds	r3, #1
 800dc9e:	2000      	movs	r0, #0
 800dca0:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800dca2:	bd38      	pop	{r3, r4, r5, pc}
 800dca4:	200b      	movs	r0, #11
 800dca6:	4770      	bx	lr
 800dca8:	4628      	mov	r0, r5
 800dcaa:	f007 fc83 	bl	80155b4 <rcl_wait_set_fini>
 800dcae:	2800      	cmp	r0, #0
 800dcb0:	d0f3      	beq.n	800dc9a <rclc_executor_add_timer+0x3a>
 800dcb2:	bd38      	pop	{r3, r4, r5, pc}

0800dcb4 <rclc_executor_prepare>:
 800dcb4:	2800      	cmp	r0, #0
 800dcb6:	d044      	beq.n	800dd42 <rclc_executor_prepare+0x8e>
 800dcb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcba:	f100 0514 	add.w	r5, r0, #20
 800dcbe:	b09b      	sub	sp, #108	@ 0x6c
 800dcc0:	4604      	mov	r4, r0
 800dcc2:	4628      	mov	r0, r5
 800dcc4:	f007 fc70 	bl	80155a8 <rcl_wait_set_is_valid>
 800dcc8:	b110      	cbz	r0, 800dcd0 <rclc_executor_prepare+0x1c>
 800dcca:	2000      	movs	r0, #0
 800dccc:	b01b      	add	sp, #108	@ 0x6c
 800dcce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dcd0:	4628      	mov	r0, r5
 800dcd2:	f007 fc6f 	bl	80155b4 <rcl_wait_set_fini>
 800dcd6:	2800      	cmp	r0, #0
 800dcd8:	d130      	bne.n	800dd3c <rclc_executor_prepare+0x88>
 800dcda:	a80c      	add	r0, sp, #48	@ 0x30
 800dcdc:	f007 fc50 	bl	8015580 <rcl_get_zero_initialized_wait_set>
 800dce0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800dce4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dce8:	46ae      	mov	lr, r5
 800dcea:	6927      	ldr	r7, [r4, #16]
 800dcec:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800dcf0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dcf4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800dcf8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dcfc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800dd00:	f8dc 3000 	ldr.w	r3, [ip]
 800dd04:	f8ce 3000 	str.w	r3, [lr]
 800dd08:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800dd0a:	ae04      	add	r6, sp, #16
 800dd0c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800dd0e:	683b      	ldr	r3, [r7, #0]
 800dd10:	6822      	ldr	r2, [r4, #0]
 800dd12:	6033      	str	r3, [r6, #0]
 800dd14:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dd16:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800dd18:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800dd1c:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800dd20:	e9cd 2100 	strd	r2, r1, [sp]
 800dd24:	4628      	mov	r0, r5
 800dd26:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800dd28:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800dd2a:	f007 ff41 	bl	8015bb0 <rcl_wait_set_init>
 800dd2e:	2800      	cmp	r0, #0
 800dd30:	d0cc      	beq.n	800dccc <rclc_executor_prepare+0x18>
 800dd32:	900b      	str	r0, [sp, #44]	@ 0x2c
 800dd34:	f000 fc38 	bl	800e5a8 <rcutils_reset_error>
 800dd38:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800dd3a:	e7c7      	b.n	800dccc <rclc_executor_prepare+0x18>
 800dd3c:	f000 fc34 	bl	800e5a8 <rcutils_reset_error>
 800dd40:	e7cb      	b.n	800dcda <rclc_executor_prepare+0x26>
 800dd42:	200b      	movs	r0, #11
 800dd44:	4770      	bx	lr
 800dd46:	bf00      	nop

0800dd48 <rclc_executor_spin_some.part.0>:
 800dd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd4c:	f100 0614 	add.w	r6, r0, #20
 800dd50:	b083      	sub	sp, #12
 800dd52:	4691      	mov	r9, r2
 800dd54:	4698      	mov	r8, r3
 800dd56:	4605      	mov	r5, r0
 800dd58:	f7ff ffac 	bl	800dcb4 <rclc_executor_prepare>
 800dd5c:	4630      	mov	r0, r6
 800dd5e:	f007 fcf5 	bl	801574c <rcl_wait_set_clear>
 800dd62:	4607      	mov	r7, r0
 800dd64:	2800      	cmp	r0, #0
 800dd66:	f040 80ed 	bne.w	800df44 <rclc_executor_spin_some.part.0+0x1fc>
 800dd6a:	68ab      	ldr	r3, [r5, #8]
 800dd6c:	4604      	mov	r4, r0
 800dd6e:	b303      	cbz	r3, 800ddb2 <rclc_executor_spin_some.part.0+0x6a>
 800dd70:	6869      	ldr	r1, [r5, #4]
 800dd72:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800dd76:	01a2      	lsls	r2, r4, #6
 800dd78:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800dd7c:	b1cb      	cbz	r3, 800ddb2 <rclc_executor_spin_some.part.0+0x6a>
 800dd7e:	5c8b      	ldrb	r3, [r1, r2]
 800dd80:	2b0a      	cmp	r3, #10
 800dd82:	f200 80d8 	bhi.w	800df36 <rclc_executor_spin_some.part.0+0x1ee>
 800dd86:	e8df f003 	tbb	[pc, r3]
 800dd8a:	9c9c      	.short	0x9c9c
 800dd8c:	068c8ca7 	.word	0x068c8ca7
 800dd90:	bdc90606 	.word	0xbdc90606
 800dd94:	b2          	.byte	0xb2
 800dd95:	00          	.byte	0x00
 800dd96:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800dd9a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800dd9e:	4630      	mov	r0, r6
 800dda0:	f008 f81c 	bl	8015ddc <rcl_wait_set_add_service>
 800dda4:	2800      	cmp	r0, #0
 800dda6:	f040 8086 	bne.w	800deb6 <rclc_executor_spin_some.part.0+0x16e>
 800ddaa:	68ab      	ldr	r3, [r5, #8]
 800ddac:	3401      	adds	r4, #1
 800ddae:	429c      	cmp	r4, r3
 800ddb0:	d3de      	bcc.n	800dd70 <rclc_executor_spin_some.part.0+0x28>
 800ddb2:	4643      	mov	r3, r8
 800ddb4:	464a      	mov	r2, r9
 800ddb6:	4630      	mov	r0, r6
 800ddb8:	f008 f83e 	bl	8015e38 <rcl_wait>
 800ddbc:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	f000 80c7 	beq.w	800df54 <rclc_executor_spin_some.part.0+0x20c>
 800ddc6:	2b01      	cmp	r3, #1
 800ddc8:	f040 80b5 	bne.w	800df36 <rclc_executor_spin_some.part.0+0x1ee>
 800ddcc:	68ab      	ldr	r3, [r5, #8]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	f000 8159 	beq.w	800e086 <rclc_executor_spin_some.part.0+0x33e>
 800ddd4:	2400      	movs	r4, #0
 800ddd6:	46a0      	mov	r8, r4
 800ddd8:	f240 1991 	movw	r9, #401	@ 0x191
 800dddc:	e00a      	b.n	800ddf4 <rclc_executor_spin_some.part.0+0xac>
 800ddde:	f7ff fb1d 	bl	800d41c <_rclc_check_for_new_data>
 800dde2:	4604      	mov	r4, r0
 800dde4:	b110      	cbz	r0, 800ddec <rclc_executor_spin_some.part.0+0xa4>
 800dde6:	4548      	cmp	r0, r9
 800dde8:	f040 80b2 	bne.w	800df50 <rclc_executor_spin_some.part.0+0x208>
 800ddec:	68ab      	ldr	r3, [r5, #8]
 800ddee:	4598      	cmp	r8, r3
 800ddf0:	f080 8126 	bcs.w	800e040 <rclc_executor_spin_some.part.0+0x2f8>
 800ddf4:	686a      	ldr	r2, [r5, #4]
 800ddf6:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800ddfa:	4631      	mov	r1, r6
 800ddfc:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800de00:	f108 0801 	add.w	r8, r8, #1
 800de04:	f1bc 0f00 	cmp.w	ip, #0
 800de08:	d1e9      	bne.n	800ddde <rclc_executor_spin_some.part.0+0x96>
 800de0a:	4619      	mov	r1, r3
 800de0c:	4610      	mov	r0, r2
 800de0e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800de12:	4798      	blx	r3
 800de14:	2800      	cmp	r0, #0
 800de16:	f000 809b 	beq.w	800df50 <rclc_executor_spin_some.part.0+0x208>
 800de1a:	68ab      	ldr	r3, [r5, #8]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	f000 8097 	beq.w	800df50 <rclc_executor_spin_some.part.0+0x208>
 800de22:	f04f 0800 	mov.w	r8, #0
 800de26:	f240 1991 	movw	r9, #401	@ 0x191
 800de2a:	e009      	b.n	800de40 <rclc_executor_spin_some.part.0+0xf8>
 800de2c:	f7ff fb44 	bl	800d4b8 <_rclc_take_new_data>
 800de30:	4604      	mov	r4, r0
 800de32:	b110      	cbz	r0, 800de3a <rclc_executor_spin_some.part.0+0xf2>
 800de34:	4548      	cmp	r0, r9
 800de36:	f040 808b 	bne.w	800df50 <rclc_executor_spin_some.part.0+0x208>
 800de3a:	68ab      	ldr	r3, [r5, #8]
 800de3c:	4598      	cmp	r8, r3
 800de3e:	d209      	bcs.n	800de54 <rclc_executor_spin_some.part.0+0x10c>
 800de40:	6868      	ldr	r0, [r5, #4]
 800de42:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800de46:	4631      	mov	r1, r6
 800de48:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800de4c:	f108 0801 	add.w	r8, r8, #1
 800de50:	2a00      	cmp	r2, #0
 800de52:	d1eb      	bne.n	800de2c <rclc_executor_spin_some.part.0+0xe4>
 800de54:	2600      	movs	r6, #0
 800de56:	b97b      	cbnz	r3, 800de78 <rclc_executor_spin_some.part.0+0x130>
 800de58:	e07a      	b.n	800df50 <rclc_executor_spin_some.part.0+0x208>
 800de5a:	f812 200c 	ldrb.w	r2, [r2, ip]
 800de5e:	2a08      	cmp	r2, #8
 800de60:	f000 80fd 	beq.w	800e05e <rclc_executor_spin_some.part.0+0x316>
 800de64:	2a09      	cmp	r2, #9
 800de66:	f000 80ef 	beq.w	800e048 <rclc_executor_spin_some.part.0+0x300>
 800de6a:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800de6e:	b98a      	cbnz	r2, 800de94 <rclc_executor_spin_some.part.0+0x14c>
 800de70:	3601      	adds	r6, #1
 800de72:	429e      	cmp	r6, r3
 800de74:	d262      	bcs.n	800df3c <rclc_executor_spin_some.part.0+0x1f4>
 800de76:	2400      	movs	r4, #0
 800de78:	686a      	ldr	r2, [r5, #4]
 800de7a:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800de7e:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800de82:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800de86:	2900      	cmp	r1, #0
 800de88:	d062      	beq.n	800df50 <rclc_executor_spin_some.part.0+0x208>
 800de8a:	7841      	ldrb	r1, [r0, #1]
 800de8c:	2900      	cmp	r1, #0
 800de8e:	d0e4      	beq.n	800de5a <rclc_executor_spin_some.part.0+0x112>
 800de90:	2901      	cmp	r1, #1
 800de92:	d1ed      	bne.n	800de70 <rclc_executor_spin_some.part.0+0x128>
 800de94:	f7ff fc84 	bl	800d7a0 <_rclc_execute.part.0>
 800de98:	2800      	cmp	r0, #0
 800de9a:	f040 80b6 	bne.w	800e00a <rclc_executor_spin_some.part.0+0x2c2>
 800de9e:	68ab      	ldr	r3, [r5, #8]
 800dea0:	e7e6      	b.n	800de70 <rclc_executor_spin_some.part.0+0x128>
 800dea2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800dea6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800deaa:	4630      	mov	r0, r6
 800deac:	f007 ff6a 	bl	8015d84 <rcl_wait_set_add_client>
 800deb0:	2800      	cmp	r0, #0
 800deb2:	f43f af7a 	beq.w	800ddaa <rclc_executor_spin_some.part.0+0x62>
 800deb6:	9001      	str	r0, [sp, #4]
 800deb8:	f000 fb76 	bl	800e5a8 <rcutils_reset_error>
 800debc:	9801      	ldr	r0, [sp, #4]
 800debe:	4607      	mov	r7, r0
 800dec0:	e03c      	b.n	800df3c <rclc_executor_spin_some.part.0+0x1f4>
 800dec2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800dec6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800deca:	4630      	mov	r0, r6
 800decc:	f007 fc12 	bl	80156f4 <rcl_wait_set_add_subscription>
 800ded0:	2800      	cmp	r0, #0
 800ded2:	f43f af6a 	beq.w	800ddaa <rclc_executor_spin_some.part.0+0x62>
 800ded6:	e7ee      	b.n	800deb6 <rclc_executor_spin_some.part.0+0x16e>
 800ded8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800dedc:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800dee0:	4630      	mov	r0, r6
 800dee2:	f007 ff1f 	bl	8015d24 <rcl_wait_set_add_timer>
 800dee6:	2800      	cmp	r0, #0
 800dee8:	f43f af5f 	beq.w	800ddaa <rclc_executor_spin_some.part.0+0x62>
 800deec:	e7e3      	b.n	800deb6 <rclc_executor_spin_some.part.0+0x16e>
 800deee:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800def2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800def6:	4630      	mov	r0, r6
 800def8:	f007 fee8 	bl	8015ccc <rcl_wait_set_add_guard_condition>
 800defc:	2800      	cmp	r0, #0
 800defe:	f43f af54 	beq.w	800ddaa <rclc_executor_spin_some.part.0+0x62>
 800df02:	e7d8      	b.n	800deb6 <rclc_executor_spin_some.part.0+0x16e>
 800df04:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800df08:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800df0c:	3110      	adds	r1, #16
 800df0e:	4630      	mov	r0, r6
 800df10:	f008 fc6a 	bl	80167e8 <rcl_action_wait_set_add_action_server>
 800df14:	2800      	cmp	r0, #0
 800df16:	f43f af48 	beq.w	800ddaa <rclc_executor_spin_some.part.0+0x62>
 800df1a:	e7cc      	b.n	800deb6 <rclc_executor_spin_some.part.0+0x16e>
 800df1c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800df20:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800df24:	3110      	adds	r1, #16
 800df26:	2300      	movs	r3, #0
 800df28:	4630      	mov	r0, r6
 800df2a:	f008 fa35 	bl	8016398 <rcl_action_wait_set_add_action_client>
 800df2e:	2800      	cmp	r0, #0
 800df30:	f43f af3b 	beq.w	800ddaa <rclc_executor_spin_some.part.0+0x62>
 800df34:	e7bf      	b.n	800deb6 <rclc_executor_spin_some.part.0+0x16e>
 800df36:	f000 fb37 	bl	800e5a8 <rcutils_reset_error>
 800df3a:	2701      	movs	r7, #1
 800df3c:	4638      	mov	r0, r7
 800df3e:	b003      	add	sp, #12
 800df40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df44:	f000 fb30 	bl	800e5a8 <rcutils_reset_error>
 800df48:	4638      	mov	r0, r7
 800df4a:	b003      	add	sp, #12
 800df4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df50:	4627      	mov	r7, r4
 800df52:	e7f3      	b.n	800df3c <rclc_executor_spin_some.part.0+0x1f4>
 800df54:	68ab      	ldr	r3, [r5, #8]
 800df56:	2b00      	cmp	r3, #0
 800df58:	f000 8092 	beq.w	800e080 <rclc_executor_spin_some.part.0+0x338>
 800df5c:	2400      	movs	r4, #0
 800df5e:	46a0      	mov	r8, r4
 800df60:	f240 1991 	movw	r9, #401	@ 0x191
 800df64:	e008      	b.n	800df78 <rclc_executor_spin_some.part.0+0x230>
 800df66:	f7ff fa59 	bl	800d41c <_rclc_check_for_new_data>
 800df6a:	4604      	mov	r4, r0
 800df6c:	b108      	cbz	r0, 800df72 <rclc_executor_spin_some.part.0+0x22a>
 800df6e:	4548      	cmp	r0, r9
 800df70:	d1ee      	bne.n	800df50 <rclc_executor_spin_some.part.0+0x208>
 800df72:	68ab      	ldr	r3, [r5, #8]
 800df74:	4598      	cmp	r8, r3
 800df76:	d265      	bcs.n	800e044 <rclc_executor_spin_some.part.0+0x2fc>
 800df78:	686a      	ldr	r2, [r5, #4]
 800df7a:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800df7e:	4631      	mov	r1, r6
 800df80:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800df84:	f108 0801 	add.w	r8, r8, #1
 800df88:	f1bc 0f00 	cmp.w	ip, #0
 800df8c:	d1eb      	bne.n	800df66 <rclc_executor_spin_some.part.0+0x21e>
 800df8e:	4619      	mov	r1, r3
 800df90:	4610      	mov	r0, r2
 800df92:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800df96:	4798      	blx	r3
 800df98:	2800      	cmp	r0, #0
 800df9a:	d0d9      	beq.n	800df50 <rclc_executor_spin_some.part.0+0x208>
 800df9c:	68ab      	ldr	r3, [r5, #8]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d0d6      	beq.n	800df50 <rclc_executor_spin_some.part.0+0x208>
 800dfa2:	f04f 0800 	mov.w	r8, #0
 800dfa6:	f240 1991 	movw	r9, #401	@ 0x191
 800dfaa:	f240 2a59 	movw	sl, #601	@ 0x259
 800dfae:	e00e      	b.n	800dfce <rclc_executor_spin_some.part.0+0x286>
 800dfb0:	f813 300b 	ldrb.w	r3, [r3, fp]
 800dfb4:	2b08      	cmp	r3, #8
 800dfb6:	d033      	beq.n	800e020 <rclc_executor_spin_some.part.0+0x2d8>
 800dfb8:	2b09      	cmp	r3, #9
 800dfba:	d028      	beq.n	800e00e <rclc_executor_spin_some.part.0+0x2c6>
 800dfbc:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800dfc0:	b9fb      	cbnz	r3, 800e002 <rclc_executor_spin_some.part.0+0x2ba>
 800dfc2:	68ab      	ldr	r3, [r5, #8]
 800dfc4:	f108 0801 	add.w	r8, r8, #1
 800dfc8:	4598      	cmp	r8, r3
 800dfca:	d2b7      	bcs.n	800df3c <rclc_executor_spin_some.part.0+0x1f4>
 800dfcc:	2400      	movs	r4, #0
 800dfce:	6868      	ldr	r0, [r5, #4]
 800dfd0:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800dfd4:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800dfd8:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d0b7      	beq.n	800df50 <rclc_executor_spin_some.part.0+0x208>
 800dfe0:	4631      	mov	r1, r6
 800dfe2:	f7ff fa69 	bl	800d4b8 <_rclc_take_new_data>
 800dfe6:	b118      	cbz	r0, 800dff0 <rclc_executor_spin_some.part.0+0x2a8>
 800dfe8:	4548      	cmp	r0, r9
 800dfea:	d001      	beq.n	800dff0 <rclc_executor_spin_some.part.0+0x2a8>
 800dfec:	4550      	cmp	r0, sl
 800dfee:	d10c      	bne.n	800e00a <rclc_executor_spin_some.part.0+0x2c2>
 800dff0:	686b      	ldr	r3, [r5, #4]
 800dff2:	eb13 000b 	adds.w	r0, r3, fp
 800dff6:	d021      	beq.n	800e03c <rclc_executor_spin_some.part.0+0x2f4>
 800dff8:	7842      	ldrb	r2, [r0, #1]
 800dffa:	2a00      	cmp	r2, #0
 800dffc:	d0d8      	beq.n	800dfb0 <rclc_executor_spin_some.part.0+0x268>
 800dffe:	2a01      	cmp	r2, #1
 800e000:	d1df      	bne.n	800dfc2 <rclc_executor_spin_some.part.0+0x27a>
 800e002:	f7ff fbcd 	bl	800d7a0 <_rclc_execute.part.0>
 800e006:	2800      	cmp	r0, #0
 800e008:	d0db      	beq.n	800dfc2 <rclc_executor_spin_some.part.0+0x27a>
 800e00a:	4607      	mov	r7, r0
 800e00c:	e796      	b.n	800df3c <rclc_executor_spin_some.part.0+0x1f4>
 800e00e:	6843      	ldr	r3, [r0, #4]
 800e010:	6a1a      	ldr	r2, [r3, #32]
 800e012:	2a00      	cmp	r2, #0
 800e014:	d1f5      	bne.n	800e002 <rclc_executor_spin_some.part.0+0x2ba>
 800e016:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d0d1      	beq.n	800dfc2 <rclc_executor_spin_some.part.0+0x27a>
 800e01e:	e7f0      	b.n	800e002 <rclc_executor_spin_some.part.0+0x2ba>
 800e020:	6843      	ldr	r3, [r0, #4]
 800e022:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e024:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800e028:	d1eb      	bne.n	800e002 <rclc_executor_spin_some.part.0+0x2ba>
 800e02a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800e02e:	2a00      	cmp	r2, #0
 800e030:	d1e7      	bne.n	800e002 <rclc_executor_spin_some.part.0+0x2ba>
 800e032:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e036:	2b00      	cmp	r3, #0
 800e038:	d0c3      	beq.n	800dfc2 <rclc_executor_spin_some.part.0+0x27a>
 800e03a:	e7e2      	b.n	800e002 <rclc_executor_spin_some.part.0+0x2ba>
 800e03c:	270b      	movs	r7, #11
 800e03e:	e77d      	b.n	800df3c <rclc_executor_spin_some.part.0+0x1f4>
 800e040:	686a      	ldr	r2, [r5, #4]
 800e042:	e6e2      	b.n	800de0a <rclc_executor_spin_some.part.0+0xc2>
 800e044:	686a      	ldr	r2, [r5, #4]
 800e046:	e7a2      	b.n	800df8e <rclc_executor_spin_some.part.0+0x246>
 800e048:	6842      	ldr	r2, [r0, #4]
 800e04a:	6a11      	ldr	r1, [r2, #32]
 800e04c:	2900      	cmp	r1, #0
 800e04e:	f47f af21 	bne.w	800de94 <rclc_executor_spin_some.part.0+0x14c>
 800e052:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800e056:	2a00      	cmp	r2, #0
 800e058:	f43f af0a 	beq.w	800de70 <rclc_executor_spin_some.part.0+0x128>
 800e05c:	e71a      	b.n	800de94 <rclc_executor_spin_some.part.0+0x14c>
 800e05e:	6842      	ldr	r2, [r0, #4]
 800e060:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800e062:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800e066:	f47f af15 	bne.w	800de94 <rclc_executor_spin_some.part.0+0x14c>
 800e06a:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800e06e:	2900      	cmp	r1, #0
 800e070:	f47f af10 	bne.w	800de94 <rclc_executor_spin_some.part.0+0x14c>
 800e074:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800e078:	2a00      	cmp	r2, #0
 800e07a:	f43f aef9 	beq.w	800de70 <rclc_executor_spin_some.part.0+0x128>
 800e07e:	e709      	b.n	800de94 <rclc_executor_spin_some.part.0+0x14c>
 800e080:	686a      	ldr	r2, [r5, #4]
 800e082:	461c      	mov	r4, r3
 800e084:	e783      	b.n	800df8e <rclc_executor_spin_some.part.0+0x246>
 800e086:	686a      	ldr	r2, [r5, #4]
 800e088:	461c      	mov	r4, r3
 800e08a:	e6be      	b.n	800de0a <rclc_executor_spin_some.part.0+0xc2>

0800e08c <rclc_executor_spin_some>:
 800e08c:	b190      	cbz	r0, 800e0b4 <rclc_executor_spin_some+0x28>
 800e08e:	b570      	push	{r4, r5, r6, lr}
 800e090:	4604      	mov	r4, r0
 800e092:	6800      	ldr	r0, [r0, #0]
 800e094:	4616      	mov	r6, r2
 800e096:	461d      	mov	r5, r3
 800e098:	f7fe f910 	bl	800c2bc <rcl_context_is_valid>
 800e09c:	b130      	cbz	r0, 800e0ac <rclc_executor_spin_some+0x20>
 800e09e:	4632      	mov	r2, r6
 800e0a0:	462b      	mov	r3, r5
 800e0a2:	4620      	mov	r0, r4
 800e0a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e0a8:	f7ff be4e 	b.w	800dd48 <rclc_executor_spin_some.part.0>
 800e0ac:	f000 fa7c 	bl	800e5a8 <rcutils_reset_error>
 800e0b0:	2001      	movs	r0, #1
 800e0b2:	bd70      	pop	{r4, r5, r6, pc}
 800e0b4:	200b      	movs	r0, #11
 800e0b6:	4770      	bx	lr

0800e0b8 <rclc_executor_handle_counters_zero_init>:
 800e0b8:	b130      	cbz	r0, 800e0c8 <rclc_executor_handle_counters_zero_init+0x10>
 800e0ba:	b508      	push	{r3, lr}
 800e0bc:	2220      	movs	r2, #32
 800e0be:	2100      	movs	r1, #0
 800e0c0:	f00b fcf0 	bl	8019aa4 <memset>
 800e0c4:	2000      	movs	r0, #0
 800e0c6:	bd08      	pop	{r3, pc}
 800e0c8:	200b      	movs	r0, #11
 800e0ca:	4770      	bx	lr
 800e0cc:	0000      	movs	r0, r0
	...

0800e0d0 <rclc_executor_handle_init>:
 800e0d0:	b168      	cbz	r0, 800e0ee <rclc_executor_handle_init+0x1e>
 800e0d2:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800e0f8 <rclc_executor_handle_init+0x28>
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	220b      	movs	r2, #11
 800e0da:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800e0de:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800e0e2:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800e0e6:	8002      	strh	r2, [r0, #0]
 800e0e8:	8703      	strh	r3, [r0, #56]	@ 0x38
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	4770      	bx	lr
 800e0ee:	200b      	movs	r0, #11
 800e0f0:	4770      	bx	lr
 800e0f2:	bf00      	nop
 800e0f4:	f3af 8000 	nop.w
	...

0800e100 <rclc_support_init_with_options>:
 800e100:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e104:	b083      	sub	sp, #12
 800e106:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e108:	b340      	cbz	r0, 800e15c <rclc_support_init_with_options+0x5c>
 800e10a:	461d      	mov	r5, r3
 800e10c:	b333      	cbz	r3, 800e15c <rclc_support_init_with_options+0x5c>
 800e10e:	b32e      	cbz	r6, 800e15c <rclc_support_init_with_options+0x5c>
 800e110:	46e9      	mov	r9, sp
 800e112:	4604      	mov	r4, r0
 800e114:	4648      	mov	r0, r9
 800e116:	460f      	mov	r7, r1
 800e118:	4690      	mov	r8, r2
 800e11a:	f7fe f8c5 	bl	800c2a8 <rcl_get_zero_initialized_context>
 800e11e:	e899 0003 	ldmia.w	r9, {r0, r1}
 800e122:	462a      	mov	r2, r5
 800e124:	e884 0003 	stmia.w	r4, {r0, r1}
 800e128:	4623      	mov	r3, r4
 800e12a:	4641      	mov	r1, r8
 800e12c:	4638      	mov	r0, r7
 800e12e:	f006 fe5b 	bl	8014de8 <rcl_init>
 800e132:	4605      	mov	r5, r0
 800e134:	b960      	cbnz	r0, 800e150 <rclc_support_init_with_options+0x50>
 800e136:	60a6      	str	r6, [r4, #8]
 800e138:	4632      	mov	r2, r6
 800e13a:	f104 010c 	add.w	r1, r4, #12
 800e13e:	2003      	movs	r0, #3
 800e140:	f007 f8a8 	bl	8015294 <rcl_clock_init>
 800e144:	4605      	mov	r5, r0
 800e146:	b918      	cbnz	r0, 800e150 <rclc_support_init_with_options+0x50>
 800e148:	4628      	mov	r0, r5
 800e14a:	b003      	add	sp, #12
 800e14c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e150:	f000 fa2a 	bl	800e5a8 <rcutils_reset_error>
 800e154:	4628      	mov	r0, r5
 800e156:	b003      	add	sp, #12
 800e158:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e15c:	250b      	movs	r5, #11
 800e15e:	4628      	mov	r0, r5
 800e160:	b003      	add	sp, #12
 800e162:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e166:	bf00      	nop

0800e168 <rclc_support_fini>:
 800e168:	b538      	push	{r3, r4, r5, lr}
 800e16a:	b320      	cbz	r0, 800e1b6 <rclc_support_fini+0x4e>
 800e16c:	4604      	mov	r4, r0
 800e16e:	300c      	adds	r0, #12
 800e170:	f007 f908 	bl	8015384 <rcl_clock_fini>
 800e174:	4605      	mov	r5, r0
 800e176:	b948      	cbnz	r0, 800e18c <rclc_support_fini+0x24>
 800e178:	4620      	mov	r0, r4
 800e17a:	f006 ff23 	bl	8014fc4 <rcl_shutdown>
 800e17e:	b968      	cbnz	r0, 800e19c <rclc_support_fini+0x34>
 800e180:	4620      	mov	r0, r4
 800e182:	f7fe f907 	bl	800c394 <rcl_context_fini>
 800e186:	b988      	cbnz	r0, 800e1ac <rclc_support_fini+0x44>
 800e188:	4628      	mov	r0, r5
 800e18a:	bd38      	pop	{r3, r4, r5, pc}
 800e18c:	f000 fa0c 	bl	800e5a8 <rcutils_reset_error>
 800e190:	4620      	mov	r0, r4
 800e192:	2501      	movs	r5, #1
 800e194:	f006 ff16 	bl	8014fc4 <rcl_shutdown>
 800e198:	2800      	cmp	r0, #0
 800e19a:	d0f1      	beq.n	800e180 <rclc_support_fini+0x18>
 800e19c:	f000 fa04 	bl	800e5a8 <rcutils_reset_error>
 800e1a0:	4620      	mov	r0, r4
 800e1a2:	2501      	movs	r5, #1
 800e1a4:	f7fe f8f6 	bl	800c394 <rcl_context_fini>
 800e1a8:	2800      	cmp	r0, #0
 800e1aa:	d0ed      	beq.n	800e188 <rclc_support_fini+0x20>
 800e1ac:	2501      	movs	r5, #1
 800e1ae:	f000 f9fb 	bl	800e5a8 <rcutils_reset_error>
 800e1b2:	4628      	mov	r0, r5
 800e1b4:	bd38      	pop	{r3, r4, r5, pc}
 800e1b6:	250b      	movs	r5, #11
 800e1b8:	4628      	mov	r0, r5
 800e1ba:	bd38      	pop	{r3, r4, r5, pc}

0800e1bc <rclc_node_init_default>:
 800e1bc:	b3b8      	cbz	r0, 800e22e <rclc_node_init_default+0x72>
 800e1be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e1c2:	460d      	mov	r5, r1
 800e1c4:	b0a1      	sub	sp, #132	@ 0x84
 800e1c6:	b329      	cbz	r1, 800e214 <rclc_node_init_default+0x58>
 800e1c8:	4616      	mov	r6, r2
 800e1ca:	b31a      	cbz	r2, 800e214 <rclc_node_init_default+0x58>
 800e1cc:	461f      	mov	r7, r3
 800e1ce:	b30b      	cbz	r3, 800e214 <rclc_node_init_default+0x58>
 800e1d0:	f10d 0810 	add.w	r8, sp, #16
 800e1d4:	4604      	mov	r4, r0
 800e1d6:	4640      	mov	r0, r8
 800e1d8:	f7fe f9f6 	bl	800c5c8 <rcl_get_zero_initialized_node>
 800e1dc:	e898 0003 	ldmia.w	r8, {r0, r1}
 800e1e0:	f10d 0918 	add.w	r9, sp, #24
 800e1e4:	e884 0003 	stmia.w	r4, {r0, r1}
 800e1e8:	4648      	mov	r0, r9
 800e1ea:	f7fe fb97 	bl	800c91c <rcl_node_get_default_options>
 800e1ee:	4640      	mov	r0, r8
 800e1f0:	f7fe f9ea 	bl	800c5c8 <rcl_get_zero_initialized_node>
 800e1f4:	f8cd 9000 	str.w	r9, [sp]
 800e1f8:	e898 0003 	ldmia.w	r8, {r0, r1}
 800e1fc:	463b      	mov	r3, r7
 800e1fe:	e884 0003 	stmia.w	r4, {r0, r1}
 800e202:	4632      	mov	r2, r6
 800e204:	4629      	mov	r1, r5
 800e206:	4620      	mov	r0, r4
 800e208:	f7fe f9e8 	bl	800c5dc <rcl_node_init>
 800e20c:	b930      	cbnz	r0, 800e21c <rclc_node_init_default+0x60>
 800e20e:	b021      	add	sp, #132	@ 0x84
 800e210:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e214:	200b      	movs	r0, #11
 800e216:	b021      	add	sp, #132	@ 0x84
 800e218:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e21c:	9003      	str	r0, [sp, #12]
 800e21e:	f000 f9c3 	bl	800e5a8 <rcutils_reset_error>
 800e222:	f000 f9c1 	bl	800e5a8 <rcutils_reset_error>
 800e226:	9803      	ldr	r0, [sp, #12]
 800e228:	b021      	add	sp, #132	@ 0x84
 800e22a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e22e:	200b      	movs	r0, #11
 800e230:	4770      	bx	lr
 800e232:	bf00      	nop

0800e234 <rclc_publisher_init_default>:
 800e234:	b368      	cbz	r0, 800e292 <rclc_publisher_init_default+0x5e>
 800e236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e23a:	460d      	mov	r5, r1
 800e23c:	b0a0      	sub	sp, #128	@ 0x80
 800e23e:	b321      	cbz	r1, 800e28a <rclc_publisher_init_default+0x56>
 800e240:	4616      	mov	r6, r2
 800e242:	b312      	cbz	r2, 800e28a <rclc_publisher_init_default+0x56>
 800e244:	461f      	mov	r7, r3
 800e246:	b303      	cbz	r3, 800e28a <rclc_publisher_init_default+0x56>
 800e248:	4604      	mov	r4, r0
 800e24a:	f7fe fb93 	bl	800c974 <rcl_get_zero_initialized_publisher>
 800e24e:	f10d 0810 	add.w	r8, sp, #16
 800e252:	6020      	str	r0, [r4, #0]
 800e254:	4640      	mov	r0, r8
 800e256:	f7fe fc55 	bl	800cb04 <rcl_publisher_get_default_options>
 800e25a:	490f      	ldr	r1, [pc, #60]	@ (800e298 <rclc_publisher_init_default+0x64>)
 800e25c:	2250      	movs	r2, #80	@ 0x50
 800e25e:	4640      	mov	r0, r8
 800e260:	f00b fd47 	bl	8019cf2 <memcpy>
 800e264:	f8cd 8000 	str.w	r8, [sp]
 800e268:	463b      	mov	r3, r7
 800e26a:	4632      	mov	r2, r6
 800e26c:	4629      	mov	r1, r5
 800e26e:	4620      	mov	r0, r4
 800e270:	f7fe fb86 	bl	800c980 <rcl_publisher_init>
 800e274:	b910      	cbnz	r0, 800e27c <rclc_publisher_init_default+0x48>
 800e276:	b020      	add	sp, #128	@ 0x80
 800e278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e27c:	9003      	str	r0, [sp, #12]
 800e27e:	f000 f993 	bl	800e5a8 <rcutils_reset_error>
 800e282:	9803      	ldr	r0, [sp, #12]
 800e284:	b020      	add	sp, #128	@ 0x80
 800e286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e28a:	200b      	movs	r0, #11
 800e28c:	b020      	add	sp, #128	@ 0x80
 800e28e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e292:	200b      	movs	r0, #11
 800e294:	4770      	bx	lr
 800e296:	bf00      	nop
 800e298:	0801b560 	.word	0x0801b560

0800e29c <rclc_subscription_init_default>:
 800e29c:	b368      	cbz	r0, 800e2fa <rclc_subscription_init_default+0x5e>
 800e29e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2a2:	460d      	mov	r5, r1
 800e2a4:	b0a0      	sub	sp, #128	@ 0x80
 800e2a6:	b321      	cbz	r1, 800e2f2 <rclc_subscription_init_default+0x56>
 800e2a8:	4616      	mov	r6, r2
 800e2aa:	b312      	cbz	r2, 800e2f2 <rclc_subscription_init_default+0x56>
 800e2ac:	461f      	mov	r7, r3
 800e2ae:	b303      	cbz	r3, 800e2f2 <rclc_subscription_init_default+0x56>
 800e2b0:	4604      	mov	r4, r0
 800e2b2:	f7fe fca1 	bl	800cbf8 <rcl_get_zero_initialized_subscription>
 800e2b6:	f10d 0810 	add.w	r8, sp, #16
 800e2ba:	6020      	str	r0, [r4, #0]
 800e2bc:	4640      	mov	r0, r8
 800e2be:	f7fe fd9d 	bl	800cdfc <rcl_subscription_get_default_options>
 800e2c2:	490f      	ldr	r1, [pc, #60]	@ (800e300 <rclc_subscription_init_default+0x64>)
 800e2c4:	2250      	movs	r2, #80	@ 0x50
 800e2c6:	4640      	mov	r0, r8
 800e2c8:	f00b fd13 	bl	8019cf2 <memcpy>
 800e2cc:	f8cd 8000 	str.w	r8, [sp]
 800e2d0:	463b      	mov	r3, r7
 800e2d2:	4632      	mov	r2, r6
 800e2d4:	4629      	mov	r1, r5
 800e2d6:	4620      	mov	r0, r4
 800e2d8:	f7fe fc94 	bl	800cc04 <rcl_subscription_init>
 800e2dc:	b910      	cbnz	r0, 800e2e4 <rclc_subscription_init_default+0x48>
 800e2de:	b020      	add	sp, #128	@ 0x80
 800e2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2e4:	9003      	str	r0, [sp, #12]
 800e2e6:	f000 f95f 	bl	800e5a8 <rcutils_reset_error>
 800e2ea:	9803      	ldr	r0, [sp, #12]
 800e2ec:	b020      	add	sp, #128	@ 0x80
 800e2ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2f2:	200b      	movs	r0, #11
 800e2f4:	b020      	add	sp, #128	@ 0x80
 800e2f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2fa:	200b      	movs	r0, #11
 800e2fc:	4770      	bx	lr
 800e2fe:	bf00      	nop
 800e300:	0801b5b0 	.word	0x0801b5b0

0800e304 <rclc_timer_init_default>:
 800e304:	b360      	cbz	r0, 800e360 <rclc_timer_init_default+0x5c>
 800e306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e30a:	460e      	mov	r6, r1
 800e30c:	b08a      	sub	sp, #40	@ 0x28
 800e30e:	b319      	cbz	r1, 800e358 <rclc_timer_init_default+0x54>
 800e310:	4690      	mov	r8, r2
 800e312:	461f      	mov	r7, r3
 800e314:	4605      	mov	r5, r0
 800e316:	f7fe fea1 	bl	800d05c <rcl_get_zero_initialized_timer>
 800e31a:	68b4      	ldr	r4, [r6, #8]
 800e31c:	6028      	str	r0, [r5, #0]
 800e31e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e320:	f10d 0c0c 	add.w	ip, sp, #12
 800e324:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e328:	6823      	ldr	r3, [r4, #0]
 800e32a:	f8cc 3000 	str.w	r3, [ip]
 800e32e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e330:	9302      	str	r3, [sp, #8]
 800e332:	e9cd 8700 	strd	r8, r7, [sp]
 800e336:	4628      	mov	r0, r5
 800e338:	4632      	mov	r2, r6
 800e33a:	f106 010c 	add.w	r1, r6, #12
 800e33e:	f7fe fe93 	bl	800d068 <rcl_timer_init>
 800e342:	b910      	cbnz	r0, 800e34a <rclc_timer_init_default+0x46>
 800e344:	b00a      	add	sp, #40	@ 0x28
 800e346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e34a:	9009      	str	r0, [sp, #36]	@ 0x24
 800e34c:	f000 f92c 	bl	800e5a8 <rcutils_reset_error>
 800e350:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e352:	b00a      	add	sp, #40	@ 0x28
 800e354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e358:	200b      	movs	r0, #11
 800e35a:	b00a      	add	sp, #40	@ 0x28
 800e35c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e360:	200b      	movs	r0, #11
 800e362:	4770      	bx	lr

0800e364 <__default_zero_allocate>:
 800e364:	f00a beae 	b.w	80190c4 <calloc>

0800e368 <__default_reallocate>:
 800e368:	f00b b84c 	b.w	8019404 <realloc>

0800e36c <__default_deallocate>:
 800e36c:	f00a bf28 	b.w	80191c0 <free>

0800e370 <__default_allocate>:
 800e370:	f00a bf1e 	b.w	80191b0 <malloc>

0800e374 <rcutils_get_zero_initialized_allocator>:
 800e374:	b510      	push	{r4, lr}
 800e376:	4c05      	ldr	r4, [pc, #20]	@ (800e38c <rcutils_get_zero_initialized_allocator+0x18>)
 800e378:	4686      	mov	lr, r0
 800e37a:	4684      	mov	ip, r0
 800e37c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e37e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e382:	6823      	ldr	r3, [r4, #0]
 800e384:	f8cc 3000 	str.w	r3, [ip]
 800e388:	4670      	mov	r0, lr
 800e38a:	bd10      	pop	{r4, pc}
 800e38c:	0801b600 	.word	0x0801b600

0800e390 <rcutils_set_default_allocator>:
 800e390:	b1a8      	cbz	r0, 800e3be <rcutils_set_default_allocator+0x2e>
 800e392:	6802      	ldr	r2, [r0, #0]
 800e394:	b1a2      	cbz	r2, 800e3c0 <rcutils_set_default_allocator+0x30>
 800e396:	6841      	ldr	r1, [r0, #4]
 800e398:	b1a1      	cbz	r1, 800e3c4 <rcutils_set_default_allocator+0x34>
 800e39a:	b410      	push	{r4}
 800e39c:	68c4      	ldr	r4, [r0, #12]
 800e39e:	b164      	cbz	r4, 800e3ba <rcutils_set_default_allocator+0x2a>
 800e3a0:	6880      	ldr	r0, [r0, #8]
 800e3a2:	b138      	cbz	r0, 800e3b4 <rcutils_set_default_allocator+0x24>
 800e3a4:	4b08      	ldr	r3, [pc, #32]	@ (800e3c8 <rcutils_set_default_allocator+0x38>)
 800e3a6:	601a      	str	r2, [r3, #0]
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800e3ae:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800e3b2:	2001      	movs	r0, #1
 800e3b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3b8:	4770      	bx	lr
 800e3ba:	4620      	mov	r0, r4
 800e3bc:	e7fa      	b.n	800e3b4 <rcutils_set_default_allocator+0x24>
 800e3be:	4770      	bx	lr
 800e3c0:	4610      	mov	r0, r2
 800e3c2:	4770      	bx	lr
 800e3c4:	4608      	mov	r0, r1
 800e3c6:	4770      	bx	lr
 800e3c8:	2000030c 	.word	0x2000030c

0800e3cc <rcutils_get_default_allocator>:
 800e3cc:	b510      	push	{r4, lr}
 800e3ce:	4c05      	ldr	r4, [pc, #20]	@ (800e3e4 <rcutils_get_default_allocator+0x18>)
 800e3d0:	4686      	mov	lr, r0
 800e3d2:	4684      	mov	ip, r0
 800e3d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e3d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e3da:	6823      	ldr	r3, [r4, #0]
 800e3dc:	f8cc 3000 	str.w	r3, [ip]
 800e3e0:	4670      	mov	r0, lr
 800e3e2:	bd10      	pop	{r4, pc}
 800e3e4:	2000030c 	.word	0x2000030c

0800e3e8 <rcutils_allocator_is_valid>:
 800e3e8:	b158      	cbz	r0, 800e402 <rcutils_allocator_is_valid+0x1a>
 800e3ea:	6803      	ldr	r3, [r0, #0]
 800e3ec:	b143      	cbz	r3, 800e400 <rcutils_allocator_is_valid+0x18>
 800e3ee:	6843      	ldr	r3, [r0, #4]
 800e3f0:	b133      	cbz	r3, 800e400 <rcutils_allocator_is_valid+0x18>
 800e3f2:	68c3      	ldr	r3, [r0, #12]
 800e3f4:	b123      	cbz	r3, 800e400 <rcutils_allocator_is_valid+0x18>
 800e3f6:	6880      	ldr	r0, [r0, #8]
 800e3f8:	3800      	subs	r0, #0
 800e3fa:	bf18      	it	ne
 800e3fc:	2001      	movne	r0, #1
 800e3fe:	4770      	bx	lr
 800e400:	4618      	mov	r0, r3
 800e402:	4770      	bx	lr

0800e404 <__atomic_load_8>:
 800e404:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800e408:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800e40c:	4a15      	ldr	r2, [pc, #84]	@ (800e464 <__atomic_load_8+0x60>)
 800e40e:	4b16      	ldr	r3, [pc, #88]	@ (800e468 <__atomic_load_8+0x64>)
 800e410:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800e414:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800e418:	fb02 f101 	mul.w	r1, r2, r1
 800e41c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800e420:	fba3 2301 	umull	r2, r3, r3, r1
 800e424:	091b      	lsrs	r3, r3, #4
 800e426:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800e42a:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 800e42e:	b4d0      	push	{r4, r6, r7}
 800e430:	4c0e      	ldr	r4, [pc, #56]	@ (800e46c <__atomic_load_8+0x68>)
 800e432:	1ac9      	subs	r1, r1, r3
 800e434:	1862      	adds	r2, r4, r1
 800e436:	f04f 0c01 	mov.w	ip, #1
 800e43a:	e8d2 3f4f 	ldrexb	r3, [r2]
 800e43e:	e8c2 cf46 	strexb	r6, ip, [r2]
 800e442:	2e00      	cmp	r6, #0
 800e444:	d1f9      	bne.n	800e43a <__atomic_load_8+0x36>
 800e446:	f3bf 8f5b 	dmb	ish
 800e44a:	b2db      	uxtb	r3, r3
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d1f4      	bne.n	800e43a <__atomic_load_8+0x36>
 800e450:	e9d0 6700 	ldrd	r6, r7, [r0]
 800e454:	f3bf 8f5b 	dmb	ish
 800e458:	5463      	strb	r3, [r4, r1]
 800e45a:	4630      	mov	r0, r6
 800e45c:	4639      	mov	r1, r7
 800e45e:	bcd0      	pop	{r4, r6, r7}
 800e460:	4770      	bx	lr
 800e462:	bf00      	nop
 800e464:	27d4eb2d 	.word	0x27d4eb2d
 800e468:	b21642c9 	.word	0xb21642c9
 800e46c:	2000cfe8 	.word	0x2000cfe8

0800e470 <__atomic_store_8>:
 800e470:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800e474:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800e478:	b570      	push	{r4, r5, r6, lr}
 800e47a:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800e47e:	4c14      	ldr	r4, [pc, #80]	@ (800e4d0 <__atomic_store_8+0x60>)
 800e480:	4d14      	ldr	r5, [pc, #80]	@ (800e4d4 <__atomic_store_8+0x64>)
 800e482:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800e486:	fb04 f101 	mul.w	r1, r4, r1
 800e48a:	4c13      	ldr	r4, [pc, #76]	@ (800e4d8 <__atomic_store_8+0x68>)
 800e48c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800e490:	fba4 4e01 	umull	r4, lr, r4, r1
 800e494:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 800e498:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 800e49c:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 800e4a0:	eba1 0e0e 	sub.w	lr, r1, lr
 800e4a4:	eb05 0c0e 	add.w	ip, r5, lr
 800e4a8:	f04f 0401 	mov.w	r4, #1
 800e4ac:	e8dc 1f4f 	ldrexb	r1, [ip]
 800e4b0:	e8cc 4f46 	strexb	r6, r4, [ip]
 800e4b4:	2e00      	cmp	r6, #0
 800e4b6:	d1f9      	bne.n	800e4ac <__atomic_store_8+0x3c>
 800e4b8:	f3bf 8f5b 	dmb	ish
 800e4bc:	b2c9      	uxtb	r1, r1
 800e4be:	2900      	cmp	r1, #0
 800e4c0:	d1f4      	bne.n	800e4ac <__atomic_store_8+0x3c>
 800e4c2:	e9c0 2300 	strd	r2, r3, [r0]
 800e4c6:	f3bf 8f5b 	dmb	ish
 800e4ca:	f805 100e 	strb.w	r1, [r5, lr]
 800e4ce:	bd70      	pop	{r4, r5, r6, pc}
 800e4d0:	27d4eb2d 	.word	0x27d4eb2d
 800e4d4:	2000cfe8 	.word	0x2000cfe8
 800e4d8:	b21642c9 	.word	0xb21642c9

0800e4dc <__atomic_exchange_8>:
 800e4dc:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 800e4e0:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 800e4e4:	4916      	ldr	r1, [pc, #88]	@ (800e540 <__atomic_exchange_8+0x64>)
 800e4e6:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 800e4ea:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 800e4ee:	fb01 fc0c 	mul.w	ip, r1, ip
 800e4f2:	4914      	ldr	r1, [pc, #80]	@ (800e544 <__atomic_exchange_8+0x68>)
 800e4f4:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 800e4f8:	b570      	push	{r4, r5, r6, lr}
 800e4fa:	4605      	mov	r5, r0
 800e4fc:	fba1 010c 	umull	r0, r1, r1, ip
 800e500:	0909      	lsrs	r1, r1, #4
 800e502:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 800e506:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 800e50a:	4e0f      	ldr	r6, [pc, #60]	@ (800e548 <__atomic_exchange_8+0x6c>)
 800e50c:	ebac 0c01 	sub.w	ip, ip, r1
 800e510:	eb06 010c 	add.w	r1, r6, ip
 800e514:	f04f 0e01 	mov.w	lr, #1
 800e518:	e8d1 4f4f 	ldrexb	r4, [r1]
 800e51c:	e8c1 ef40 	strexb	r0, lr, [r1]
 800e520:	2800      	cmp	r0, #0
 800e522:	d1f9      	bne.n	800e518 <__atomic_exchange_8+0x3c>
 800e524:	f3bf 8f5b 	dmb	ish
 800e528:	b2e4      	uxtb	r4, r4
 800e52a:	2c00      	cmp	r4, #0
 800e52c:	d1f4      	bne.n	800e518 <__atomic_exchange_8+0x3c>
 800e52e:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e532:	e9c5 2300 	strd	r2, r3, [r5]
 800e536:	f3bf 8f5b 	dmb	ish
 800e53a:	f806 400c 	strb.w	r4, [r6, ip]
 800e53e:	bd70      	pop	{r4, r5, r6, pc}
 800e540:	27d4eb2d 	.word	0x27d4eb2d
 800e544:	b21642c9 	.word	0xb21642c9
 800e548:	2000cfe8 	.word	0x2000cfe8

0800e54c <rcutils_get_env>:
 800e54c:	b168      	cbz	r0, 800e56a <rcutils_get_env+0x1e>
 800e54e:	b510      	push	{r4, lr}
 800e550:	460c      	mov	r4, r1
 800e552:	b129      	cbz	r1, 800e560 <rcutils_get_env+0x14>
 800e554:	f00a fde4 	bl	8019120 <getenv>
 800e558:	b120      	cbz	r0, 800e564 <rcutils_get_env+0x18>
 800e55a:	6020      	str	r0, [r4, #0]
 800e55c:	2000      	movs	r0, #0
 800e55e:	bd10      	pop	{r4, pc}
 800e560:	4803      	ldr	r0, [pc, #12]	@ (800e570 <rcutils_get_env+0x24>)
 800e562:	bd10      	pop	{r4, pc}
 800e564:	4b03      	ldr	r3, [pc, #12]	@ (800e574 <rcutils_get_env+0x28>)
 800e566:	6023      	str	r3, [r4, #0]
 800e568:	bd10      	pop	{r4, pc}
 800e56a:	4803      	ldr	r0, [pc, #12]	@ (800e578 <rcutils_get_env+0x2c>)
 800e56c:	4770      	bx	lr
 800e56e:	bf00      	nop
 800e570:	0801ad38 	.word	0x0801ad38
 800e574:	0801b264 	.word	0x0801b264
 800e578:	0801ad1c 	.word	0x0801ad1c

0800e57c <rcutils_get_error_string>:
 800e57c:	4b06      	ldr	r3, [pc, #24]	@ (800e598 <rcutils_get_error_string+0x1c>)
 800e57e:	781b      	ldrb	r3, [r3, #0]
 800e580:	b13b      	cbz	r3, 800e592 <rcutils_get_error_string+0x16>
 800e582:	4b06      	ldr	r3, [pc, #24]	@ (800e59c <rcutils_get_error_string+0x20>)
 800e584:	781a      	ldrb	r2, [r3, #0]
 800e586:	b90a      	cbnz	r2, 800e58c <rcutils_get_error_string+0x10>
 800e588:	2201      	movs	r2, #1
 800e58a:	701a      	strb	r2, [r3, #0]
 800e58c:	4b04      	ldr	r3, [pc, #16]	@ (800e5a0 <rcutils_get_error_string+0x24>)
 800e58e:	7818      	ldrb	r0, [r3, #0]
 800e590:	4770      	bx	lr
 800e592:	4b04      	ldr	r3, [pc, #16]	@ (800e5a4 <rcutils_get_error_string+0x28>)
 800e594:	7818      	ldrb	r0, [r3, #0]
 800e596:	4770      	bx	lr
 800e598:	2000cfff 	.word	0x2000cfff
 800e59c:	2000d011 	.word	0x2000d011
 800e5a0:	2000d010 	.word	0x2000d010
 800e5a4:	0801ad54 	.word	0x0801ad54

0800e5a8 <rcutils_reset_error>:
 800e5a8:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800e5c8 <rcutils_reset_error+0x20>
 800e5ac:	4a08      	ldr	r2, [pc, #32]	@ (800e5d0 <rcutils_reset_error+0x28>)
 800e5ae:	4809      	ldr	r0, [pc, #36]	@ (800e5d4 <rcutils_reset_error+0x2c>)
 800e5b0:	4909      	ldr	r1, [pc, #36]	@ (800e5d8 <rcutils_reset_error+0x30>)
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	8013      	strh	r3, [r2, #0]
 800e5b6:	ed82 7b02 	vstr	d7, [r2, #8]
 800e5ba:	4a08      	ldr	r2, [pc, #32]	@ (800e5dc <rcutils_reset_error+0x34>)
 800e5bc:	7003      	strb	r3, [r0, #0]
 800e5be:	700b      	strb	r3, [r1, #0]
 800e5c0:	7013      	strb	r3, [r2, #0]
 800e5c2:	4770      	bx	lr
 800e5c4:	f3af 8000 	nop.w
	...
 800e5d0:	2000d000 	.word	0x2000d000
 800e5d4:	2000d011 	.word	0x2000d011
 800e5d8:	2000d010 	.word	0x2000d010
 800e5dc:	2000cfff 	.word	0x2000cfff

0800e5e0 <rcutils_format_string_limit>:
 800e5e0:	b40f      	push	{r0, r1, r2, r3}
 800e5e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5e4:	b083      	sub	sp, #12
 800e5e6:	ac08      	add	r4, sp, #32
 800e5e8:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800e5ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e5ee:	b34e      	cbz	r6, 800e644 <rcutils_format_string_limit+0x64>
 800e5f0:	a808      	add	r0, sp, #32
 800e5f2:	f7ff fef9 	bl	800e3e8 <rcutils_allocator_is_valid>
 800e5f6:	b328      	cbz	r0, 800e644 <rcutils_format_string_limit+0x64>
 800e5f8:	2100      	movs	r1, #0
 800e5fa:	ab0f      	add	r3, sp, #60	@ 0x3c
 800e5fc:	4632      	mov	r2, r6
 800e5fe:	4608      	mov	r0, r1
 800e600:	e9cd 3300 	strd	r3, r3, [sp]
 800e604:	f000 f8f4 	bl	800e7f0 <rcutils_vsnprintf>
 800e608:	1c43      	adds	r3, r0, #1
 800e60a:	4605      	mov	r5, r0
 800e60c:	d01a      	beq.n	800e644 <rcutils_format_string_limit+0x64>
 800e60e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e610:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e612:	1c47      	adds	r7, r0, #1
 800e614:	429f      	cmp	r7, r3
 800e616:	bf84      	itt	hi
 800e618:	461f      	movhi	r7, r3
 800e61a:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 800e61e:	4638      	mov	r0, r7
 800e620:	9b08      	ldr	r3, [sp, #32]
 800e622:	4798      	blx	r3
 800e624:	4604      	mov	r4, r0
 800e626:	b168      	cbz	r0, 800e644 <rcutils_format_string_limit+0x64>
 800e628:	9b01      	ldr	r3, [sp, #4]
 800e62a:	4632      	mov	r2, r6
 800e62c:	4639      	mov	r1, r7
 800e62e:	f000 f8df 	bl	800e7f0 <rcutils_vsnprintf>
 800e632:	2800      	cmp	r0, #0
 800e634:	db02      	blt.n	800e63c <rcutils_format_string_limit+0x5c>
 800e636:	2300      	movs	r3, #0
 800e638:	5563      	strb	r3, [r4, r5]
 800e63a:	e004      	b.n	800e646 <rcutils_format_string_limit+0x66>
 800e63c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e63e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e640:	4620      	mov	r0, r4
 800e642:	4798      	blx	r3
 800e644:	2400      	movs	r4, #0
 800e646:	4620      	mov	r0, r4
 800e648:	b003      	add	sp, #12
 800e64a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e64e:	b004      	add	sp, #16
 800e650:	4770      	bx	lr
 800e652:	bf00      	nop

0800e654 <rcutils_repl_str>:
 800e654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e658:	ed2d 8b02 	vpush	{d8}
 800e65c:	b087      	sub	sp, #28
 800e65e:	4680      	mov	r8, r0
 800e660:	4608      	mov	r0, r1
 800e662:	f8cd 8004 	str.w	r8, [sp, #4]
 800e666:	ee08 2a10 	vmov	s16, r2
 800e66a:	468a      	mov	sl, r1
 800e66c:	4699      	mov	r9, r3
 800e66e:	f7f1 fdd9 	bl	8000224 <strlen>
 800e672:	2600      	movs	r6, #0
 800e674:	4647      	mov	r7, r8
 800e676:	9002      	str	r0, [sp, #8]
 800e678:	46b3      	mov	fp, r6
 800e67a:	2510      	movs	r5, #16
 800e67c:	46b0      	mov	r8, r6
 800e67e:	e01d      	b.n	800e6bc <rcutils_repl_str+0x68>
 800e680:	f10b 0b01 	add.w	fp, fp, #1
 800e684:	455e      	cmp	r6, fp
 800e686:	d211      	bcs.n	800e6ac <rcutils_repl_str+0x58>
 800e688:	442e      	add	r6, r5
 800e68a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800e68e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800e692:	00b1      	lsls	r1, r6, #2
 800e694:	4798      	blx	r3
 800e696:	2800      	cmp	r0, #0
 800e698:	f000 8088 	beq.w	800e7ac <rcutils_repl_str+0x158>
 800e69c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e6a0:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800e6a4:	4680      	mov	r8, r0
 800e6a6:	bf28      	it	cs
 800e6a8:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 800e6ac:	9a01      	ldr	r2, [sp, #4]
 800e6ae:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800e6b2:	1aa2      	subs	r2, r4, r2
 800e6b4:	f843 2c04 	str.w	r2, [r3, #-4]
 800e6b8:	9b02      	ldr	r3, [sp, #8]
 800e6ba:	18e7      	adds	r7, r4, r3
 800e6bc:	4651      	mov	r1, sl
 800e6be:	4638      	mov	r0, r7
 800e6c0:	f00b fa17 	bl	8019af2 <strstr>
 800e6c4:	4604      	mov	r4, r0
 800e6c6:	4640      	mov	r0, r8
 800e6c8:	2c00      	cmp	r4, #0
 800e6ca:	d1d9      	bne.n	800e680 <rcutils_repl_str+0x2c>
 800e6cc:	46b8      	mov	r8, r7
 800e6ce:	4607      	mov	r7, r0
 800e6d0:	4640      	mov	r0, r8
 800e6d2:	f7f1 fda7 	bl	8000224 <strlen>
 800e6d6:	9b01      	ldr	r3, [sp, #4]
 800e6d8:	eba8 0303 	sub.w	r3, r8, r3
 800e6dc:	181c      	adds	r4, r3, r0
 800e6de:	9404      	str	r4, [sp, #16]
 800e6e0:	f1bb 0f00 	cmp.w	fp, #0
 800e6e4:	d04a      	beq.n	800e77c <rcutils_repl_str+0x128>
 800e6e6:	ee18 0a10 	vmov	r0, s16
 800e6ea:	f7f1 fd9b 	bl	8000224 <strlen>
 800e6ee:	9b02      	ldr	r3, [sp, #8]
 800e6f0:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800e6f4:	1ac3      	subs	r3, r0, r3
 800e6f6:	fb0b 4303 	mla	r3, fp, r3, r4
 800e6fa:	461a      	mov	r2, r3
 800e6fc:	9305      	str	r3, [sp, #20]
 800e6fe:	4606      	mov	r6, r0
 800e700:	f8d9 3000 	ldr.w	r3, [r9]
 800e704:	1c50      	adds	r0, r2, #1
 800e706:	4798      	blx	r3
 800e708:	9003      	str	r0, [sp, #12]
 800e70a:	2800      	cmp	r0, #0
 800e70c:	d04f      	beq.n	800e7ae <rcutils_repl_str+0x15a>
 800e70e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e712:	683a      	ldr	r2, [r7, #0]
 800e714:	4641      	mov	r1, r8
 800e716:	f00b faec 	bl	8019cf2 <memcpy>
 800e71a:	683d      	ldr	r5, [r7, #0]
 800e71c:	9b03      	ldr	r3, [sp, #12]
 800e71e:	9701      	str	r7, [sp, #4]
 800e720:	46ba      	mov	sl, r7
 800e722:	441d      	add	r5, r3
 800e724:	9f02      	ldr	r7, [sp, #8]
 800e726:	f8cd 9008 	str.w	r9, [sp, #8]
 800e72a:	2401      	movs	r4, #1
 800e72c:	46d1      	mov	r9, sl
 800e72e:	ee18 aa10 	vmov	sl, s16
 800e732:	e00a      	b.n	800e74a <rcutils_repl_str+0xf6>
 800e734:	f8d9 5000 	ldr.w	r5, [r9]
 800e738:	1aaa      	subs	r2, r5, r2
 800e73a:	1885      	adds	r5, r0, r2
 800e73c:	f00b fad9 	bl	8019cf2 <memcpy>
 800e740:	45a3      	cmp	fp, r4
 800e742:	f104 0201 	add.w	r2, r4, #1
 800e746:	d935      	bls.n	800e7b4 <rcutils_repl_str+0x160>
 800e748:	4614      	mov	r4, r2
 800e74a:	4632      	mov	r2, r6
 800e74c:	4651      	mov	r1, sl
 800e74e:	4628      	mov	r0, r5
 800e750:	f00b facf 	bl	8019cf2 <memcpy>
 800e754:	f859 2b04 	ldr.w	r2, [r9], #4
 800e758:	45a3      	cmp	fp, r4
 800e75a:	443a      	add	r2, r7
 800e75c:	eb05 0006 	add.w	r0, r5, r6
 800e760:	eb08 0102 	add.w	r1, r8, r2
 800e764:	d1e6      	bne.n	800e734 <rcutils_repl_str+0xe0>
 800e766:	9b04      	ldr	r3, [sp, #16]
 800e768:	1a9a      	subs	r2, r3, r2
 800e76a:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800e76e:	f00b fac0 	bl	8019cf2 <memcpy>
 800e772:	9a03      	ldr	r2, [sp, #12]
 800e774:	9905      	ldr	r1, [sp, #20]
 800e776:	2300      	movs	r3, #0
 800e778:	5453      	strb	r3, [r2, r1]
 800e77a:	e00b      	b.n	800e794 <rcutils_repl_str+0x140>
 800e77c:	4620      	mov	r0, r4
 800e77e:	f8d9 3000 	ldr.w	r3, [r9]
 800e782:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800e786:	3001      	adds	r0, #1
 800e788:	4798      	blx	r3
 800e78a:	9003      	str	r0, [sp, #12]
 800e78c:	b110      	cbz	r0, 800e794 <rcutils_repl_str+0x140>
 800e78e:	9901      	ldr	r1, [sp, #4]
 800e790:	f00b faa7 	bl	8019ce2 <strcpy>
 800e794:	4638      	mov	r0, r7
 800e796:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e79a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800e79e:	4798      	blx	r3
 800e7a0:	9803      	ldr	r0, [sp, #12]
 800e7a2:	b007      	add	sp, #28
 800e7a4:	ecbd 8b02 	vpop	{d8}
 800e7a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7ac:	4647      	mov	r7, r8
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	9303      	str	r3, [sp, #12]
 800e7b2:	e7ef      	b.n	800e794 <rcutils_repl_str+0x140>
 800e7b4:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800e7b8:	e7db      	b.n	800e772 <rcutils_repl_str+0x11e>
 800e7ba:	bf00      	nop

0800e7bc <rcutils_snprintf>:
 800e7bc:	b40c      	push	{r2, r3}
 800e7be:	b530      	push	{r4, r5, lr}
 800e7c0:	b083      	sub	sp, #12
 800e7c2:	ab06      	add	r3, sp, #24
 800e7c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7c8:	9301      	str	r3, [sp, #4]
 800e7ca:	b152      	cbz	r2, 800e7e2 <rcutils_snprintf+0x26>
 800e7cc:	b138      	cbz	r0, 800e7de <rcutils_snprintf+0x22>
 800e7ce:	b141      	cbz	r1, 800e7e2 <rcutils_snprintf+0x26>
 800e7d0:	f00b f89c 	bl	801990c <vsniprintf>
 800e7d4:	b003      	add	sp, #12
 800e7d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e7da:	b002      	add	sp, #8
 800e7dc:	4770      	bx	lr
 800e7de:	2900      	cmp	r1, #0
 800e7e0:	d0f6      	beq.n	800e7d0 <rcutils_snprintf+0x14>
 800e7e2:	f00b fa51 	bl	8019c88 <__errno>
 800e7e6:	2316      	movs	r3, #22
 800e7e8:	6003      	str	r3, [r0, #0]
 800e7ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e7ee:	e7f1      	b.n	800e7d4 <rcutils_snprintf+0x18>

0800e7f0 <rcutils_vsnprintf>:
 800e7f0:	b570      	push	{r4, r5, r6, lr}
 800e7f2:	b13a      	cbz	r2, 800e804 <rcutils_vsnprintf+0x14>
 800e7f4:	b120      	cbz	r0, 800e800 <rcutils_vsnprintf+0x10>
 800e7f6:	b129      	cbz	r1, 800e804 <rcutils_vsnprintf+0x14>
 800e7f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e7fc:	f00b b886 	b.w	801990c <vsniprintf>
 800e800:	2900      	cmp	r1, #0
 800e802:	d0f9      	beq.n	800e7f8 <rcutils_vsnprintf+0x8>
 800e804:	f00b fa40 	bl	8019c88 <__errno>
 800e808:	2316      	movs	r3, #22
 800e80a:	6003      	str	r3, [r0, #0]
 800e80c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e810:	bd70      	pop	{r4, r5, r6, pc}
 800e812:	bf00      	nop

0800e814 <rcutils_strdup>:
 800e814:	b084      	sub	sp, #16
 800e816:	b570      	push	{r4, r5, r6, lr}
 800e818:	b082      	sub	sp, #8
 800e81a:	ac07      	add	r4, sp, #28
 800e81c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800e820:	4605      	mov	r5, r0
 800e822:	b1b0      	cbz	r0, 800e852 <rcutils_strdup+0x3e>
 800e824:	f7f1 fcfe 	bl	8000224 <strlen>
 800e828:	1c42      	adds	r2, r0, #1
 800e82a:	9b07      	ldr	r3, [sp, #28]
 800e82c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e82e:	9201      	str	r2, [sp, #4]
 800e830:	4606      	mov	r6, r0
 800e832:	4610      	mov	r0, r2
 800e834:	4798      	blx	r3
 800e836:	4604      	mov	r4, r0
 800e838:	b128      	cbz	r0, 800e846 <rcutils_strdup+0x32>
 800e83a:	9a01      	ldr	r2, [sp, #4]
 800e83c:	4629      	mov	r1, r5
 800e83e:	f00b fa58 	bl	8019cf2 <memcpy>
 800e842:	2300      	movs	r3, #0
 800e844:	55a3      	strb	r3, [r4, r6]
 800e846:	4620      	mov	r0, r4
 800e848:	b002      	add	sp, #8
 800e84a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e84e:	b004      	add	sp, #16
 800e850:	4770      	bx	lr
 800e852:	4604      	mov	r4, r0
 800e854:	e7f7      	b.n	800e846 <rcutils_strdup+0x32>
 800e856:	bf00      	nop

0800e858 <rcutils_strndup>:
 800e858:	b082      	sub	sp, #8
 800e85a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e85c:	ac06      	add	r4, sp, #24
 800e85e:	e884 000c 	stmia.w	r4, {r2, r3}
 800e862:	4605      	mov	r5, r0
 800e864:	b188      	cbz	r0, 800e88a <rcutils_strndup+0x32>
 800e866:	1c4f      	adds	r7, r1, #1
 800e868:	460e      	mov	r6, r1
 800e86a:	4638      	mov	r0, r7
 800e86c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e86e:	4790      	blx	r2
 800e870:	4604      	mov	r4, r0
 800e872:	b128      	cbz	r0, 800e880 <rcutils_strndup+0x28>
 800e874:	463a      	mov	r2, r7
 800e876:	4629      	mov	r1, r5
 800e878:	f00b fa3b 	bl	8019cf2 <memcpy>
 800e87c:	2300      	movs	r3, #0
 800e87e:	55a3      	strb	r3, [r4, r6]
 800e880:	4620      	mov	r0, r4
 800e882:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e886:	b002      	add	sp, #8
 800e888:	4770      	bx	lr
 800e88a:	4604      	mov	r4, r0
 800e88c:	e7f8      	b.n	800e880 <rcutils_strndup+0x28>
 800e88e:	bf00      	nop

0800e890 <rcutils_system_time_now>:
 800e890:	b308      	cbz	r0, 800e8d6 <rcutils_system_time_now+0x46>
 800e892:	b570      	push	{r4, r5, r6, lr}
 800e894:	b084      	sub	sp, #16
 800e896:	4604      	mov	r4, r0
 800e898:	4669      	mov	r1, sp
 800e89a:	2001      	movs	r0, #1
 800e89c:	f7f4 f964 	bl	8002b68 <clock_gettime>
 800e8a0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800e8a4:	2d00      	cmp	r5, #0
 800e8a6:	db13      	blt.n	800e8d0 <rcutils_system_time_now+0x40>
 800e8a8:	9902      	ldr	r1, [sp, #8]
 800e8aa:	2900      	cmp	r1, #0
 800e8ac:	db0d      	blt.n	800e8ca <rcutils_system_time_now+0x3a>
 800e8ae:	4e0b      	ldr	r6, [pc, #44]	@ (800e8dc <rcutils_system_time_now+0x4c>)
 800e8b0:	fba3 3206 	umull	r3, r2, r3, r6
 800e8b4:	185b      	adds	r3, r3, r1
 800e8b6:	fb06 2205 	mla	r2, r6, r5, r2
 800e8ba:	f04f 0000 	mov.w	r0, #0
 800e8be:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800e8c2:	e9c4 3200 	strd	r3, r2, [r4]
 800e8c6:	b004      	add	sp, #16
 800e8c8:	bd70      	pop	{r4, r5, r6, pc}
 800e8ca:	ea53 0205 	orrs.w	r2, r3, r5
 800e8ce:	d1ee      	bne.n	800e8ae <rcutils_system_time_now+0x1e>
 800e8d0:	2002      	movs	r0, #2
 800e8d2:	b004      	add	sp, #16
 800e8d4:	bd70      	pop	{r4, r5, r6, pc}
 800e8d6:	200b      	movs	r0, #11
 800e8d8:	4770      	bx	lr
 800e8da:	bf00      	nop
 800e8dc:	3b9aca00 	.word	0x3b9aca00

0800e8e0 <rcutils_steady_time_now>:
 800e8e0:	b308      	cbz	r0, 800e926 <rcutils_steady_time_now+0x46>
 800e8e2:	b570      	push	{r4, r5, r6, lr}
 800e8e4:	b084      	sub	sp, #16
 800e8e6:	4604      	mov	r4, r0
 800e8e8:	4669      	mov	r1, sp
 800e8ea:	2000      	movs	r0, #0
 800e8ec:	f7f4 f93c 	bl	8002b68 <clock_gettime>
 800e8f0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800e8f4:	2d00      	cmp	r5, #0
 800e8f6:	db13      	blt.n	800e920 <rcutils_steady_time_now+0x40>
 800e8f8:	9902      	ldr	r1, [sp, #8]
 800e8fa:	2900      	cmp	r1, #0
 800e8fc:	db0d      	blt.n	800e91a <rcutils_steady_time_now+0x3a>
 800e8fe:	4e0b      	ldr	r6, [pc, #44]	@ (800e92c <rcutils_steady_time_now+0x4c>)
 800e900:	fba3 3206 	umull	r3, r2, r3, r6
 800e904:	185b      	adds	r3, r3, r1
 800e906:	fb06 2205 	mla	r2, r6, r5, r2
 800e90a:	f04f 0000 	mov.w	r0, #0
 800e90e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800e912:	e9c4 3200 	strd	r3, r2, [r4]
 800e916:	b004      	add	sp, #16
 800e918:	bd70      	pop	{r4, r5, r6, pc}
 800e91a:	ea53 0205 	orrs.w	r2, r3, r5
 800e91e:	d1ee      	bne.n	800e8fe <rcutils_steady_time_now+0x1e>
 800e920:	2002      	movs	r0, #2
 800e922:	b004      	add	sp, #16
 800e924:	bd70      	pop	{r4, r5, r6, pc}
 800e926:	200b      	movs	r0, #11
 800e928:	4770      	bx	lr
 800e92a:	bf00      	nop
 800e92c:	3b9aca00 	.word	0x3b9aca00

0800e930 <rmw_get_zero_initialized_init_options>:
 800e930:	b510      	push	{r4, lr}
 800e932:	2238      	movs	r2, #56	@ 0x38
 800e934:	4604      	mov	r4, r0
 800e936:	2100      	movs	r1, #0
 800e938:	f00b f8b4 	bl	8019aa4 <memset>
 800e93c:	f104 0010 	add.w	r0, r4, #16
 800e940:	f000 f80a 	bl	800e958 <rmw_get_default_security_options>
 800e944:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e948:	60e3      	str	r3, [r4, #12]
 800e94a:	4620      	mov	r0, r4
 800e94c:	bd10      	pop	{r4, pc}
 800e94e:	bf00      	nop

0800e950 <rmw_get_default_publisher_options>:
 800e950:	2200      	movs	r2, #0
 800e952:	6002      	str	r2, [r0, #0]
 800e954:	7102      	strb	r2, [r0, #4]
 800e956:	4770      	bx	lr

0800e958 <rmw_get_default_security_options>:
 800e958:	2200      	movs	r2, #0
 800e95a:	7002      	strb	r2, [r0, #0]
 800e95c:	6042      	str	r2, [r0, #4]
 800e95e:	4770      	bx	lr

0800e960 <rmw_subscription_content_filter_options_fini>:
 800e960:	b1b0      	cbz	r0, 800e990 <rmw_subscription_content_filter_options_fini+0x30>
 800e962:	b538      	push	{r3, r4, r5, lr}
 800e964:	4604      	mov	r4, r0
 800e966:	4608      	mov	r0, r1
 800e968:	460d      	mov	r5, r1
 800e96a:	f7ff fd3d 	bl	800e3e8 <rcutils_allocator_is_valid>
 800e96e:	b168      	cbz	r0, 800e98c <rmw_subscription_content_filter_options_fini+0x2c>
 800e970:	6820      	ldr	r0, [r4, #0]
 800e972:	b120      	cbz	r0, 800e97e <rmw_subscription_content_filter_options_fini+0x1e>
 800e974:	686b      	ldr	r3, [r5, #4]
 800e976:	6929      	ldr	r1, [r5, #16]
 800e978:	4798      	blx	r3
 800e97a:	2300      	movs	r3, #0
 800e97c:	6023      	str	r3, [r4, #0]
 800e97e:	1d20      	adds	r0, r4, #4
 800e980:	f008 f952 	bl	8016c28 <rcutils_string_array_fini>
 800e984:	3800      	subs	r0, #0
 800e986:	bf18      	it	ne
 800e988:	2001      	movne	r0, #1
 800e98a:	bd38      	pop	{r3, r4, r5, pc}
 800e98c:	200b      	movs	r0, #11
 800e98e:	bd38      	pop	{r3, r4, r5, pc}
 800e990:	200b      	movs	r0, #11
 800e992:	4770      	bx	lr

0800e994 <rmw_get_default_subscription_options>:
 800e994:	2200      	movs	r2, #0
 800e996:	e9c0 2200 	strd	r2, r2, [r0]
 800e99a:	6082      	str	r2, [r0, #8]
 800e99c:	4770      	bx	lr
 800e99e:	bf00      	nop

0800e9a0 <rmw_get_zero_initialized_message_info>:
 800e9a0:	b510      	push	{r4, lr}
 800e9a2:	2240      	movs	r2, #64	@ 0x40
 800e9a4:	4604      	mov	r4, r0
 800e9a6:	2100      	movs	r1, #0
 800e9a8:	f00b f87c 	bl	8019aa4 <memset>
 800e9ac:	4620      	mov	r0, r4
 800e9ae:	bd10      	pop	{r4, pc}

0800e9b0 <rmw_validate_namespace_with_size>:
 800e9b0:	b340      	cbz	r0, 800ea04 <rmw_validate_namespace_with_size+0x54>
 800e9b2:	b570      	push	{r4, r5, r6, lr}
 800e9b4:	4614      	mov	r4, r2
 800e9b6:	b0c2      	sub	sp, #264	@ 0x108
 800e9b8:	b332      	cbz	r2, 800ea08 <rmw_validate_namespace_with_size+0x58>
 800e9ba:	2901      	cmp	r1, #1
 800e9bc:	460d      	mov	r5, r1
 800e9be:	461e      	mov	r6, r3
 800e9c0:	d102      	bne.n	800e9c8 <rmw_validate_namespace_with_size+0x18>
 800e9c2:	7803      	ldrb	r3, [r0, #0]
 800e9c4:	2b2f      	cmp	r3, #47	@ 0x2f
 800e9c6:	d012      	beq.n	800e9ee <rmw_validate_namespace_with_size+0x3e>
 800e9c8:	aa01      	add	r2, sp, #4
 800e9ca:	4669      	mov	r1, sp
 800e9cc:	f008 fb14 	bl	8016ff8 <rmw_validate_full_topic_name>
 800e9d0:	b978      	cbnz	r0, 800e9f2 <rmw_validate_namespace_with_size+0x42>
 800e9d2:	9b00      	ldr	r3, [sp, #0]
 800e9d4:	b14b      	cbz	r3, 800e9ea <rmw_validate_namespace_with_size+0x3a>
 800e9d6:	2b07      	cmp	r3, #7
 800e9d8:	d007      	beq.n	800e9ea <rmw_validate_namespace_with_size+0x3a>
 800e9da:	1e5a      	subs	r2, r3, #1
 800e9dc:	2a05      	cmp	r2, #5
 800e9de:	d82b      	bhi.n	800ea38 <rmw_validate_namespace_with_size+0x88>
 800e9e0:	e8df f002 	tbb	[pc, r2]
 800e9e4:	1e212427 	.word	0x1e212427
 800e9e8:	141b      	.short	0x141b
 800e9ea:	2df5      	cmp	r5, #245	@ 0xf5
 800e9ec:	d803      	bhi.n	800e9f6 <rmw_validate_namespace_with_size+0x46>
 800e9ee:	2000      	movs	r0, #0
 800e9f0:	6020      	str	r0, [r4, #0]
 800e9f2:	b042      	add	sp, #264	@ 0x108
 800e9f4:	bd70      	pop	{r4, r5, r6, pc}
 800e9f6:	2307      	movs	r3, #7
 800e9f8:	6023      	str	r3, [r4, #0]
 800e9fa:	2e00      	cmp	r6, #0
 800e9fc:	d0f9      	beq.n	800e9f2 <rmw_validate_namespace_with_size+0x42>
 800e9fe:	23f4      	movs	r3, #244	@ 0xf4
 800ea00:	6033      	str	r3, [r6, #0]
 800ea02:	e7f6      	b.n	800e9f2 <rmw_validate_namespace_with_size+0x42>
 800ea04:	200b      	movs	r0, #11
 800ea06:	4770      	bx	lr
 800ea08:	200b      	movs	r0, #11
 800ea0a:	e7f2      	b.n	800e9f2 <rmw_validate_namespace_with_size+0x42>
 800ea0c:	2306      	movs	r3, #6
 800ea0e:	6023      	str	r3, [r4, #0]
 800ea10:	2e00      	cmp	r6, #0
 800ea12:	d0ee      	beq.n	800e9f2 <rmw_validate_namespace_with_size+0x42>
 800ea14:	9b01      	ldr	r3, [sp, #4]
 800ea16:	6033      	str	r3, [r6, #0]
 800ea18:	e7eb      	b.n	800e9f2 <rmw_validate_namespace_with_size+0x42>
 800ea1a:	2305      	movs	r3, #5
 800ea1c:	6023      	str	r3, [r4, #0]
 800ea1e:	e7f7      	b.n	800ea10 <rmw_validate_namespace_with_size+0x60>
 800ea20:	2304      	movs	r3, #4
 800ea22:	6023      	str	r3, [r4, #0]
 800ea24:	e7f4      	b.n	800ea10 <rmw_validate_namespace_with_size+0x60>
 800ea26:	2303      	movs	r3, #3
 800ea28:	6023      	str	r3, [r4, #0]
 800ea2a:	e7f1      	b.n	800ea10 <rmw_validate_namespace_with_size+0x60>
 800ea2c:	2302      	movs	r3, #2
 800ea2e:	6023      	str	r3, [r4, #0]
 800ea30:	e7ee      	b.n	800ea10 <rmw_validate_namespace_with_size+0x60>
 800ea32:	2301      	movs	r3, #1
 800ea34:	6023      	str	r3, [r4, #0]
 800ea36:	e7eb      	b.n	800ea10 <rmw_validate_namespace_with_size+0x60>
 800ea38:	4a03      	ldr	r2, [pc, #12]	@ (800ea48 <rmw_validate_namespace_with_size+0x98>)
 800ea3a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ea3e:	a802      	add	r0, sp, #8
 800ea40:	f7ff febc 	bl	800e7bc <rcutils_snprintf>
 800ea44:	2001      	movs	r0, #1
 800ea46:	e7d4      	b.n	800e9f2 <rmw_validate_namespace_with_size+0x42>
 800ea48:	0801ad58 	.word	0x0801ad58

0800ea4c <rmw_validate_namespace>:
 800ea4c:	b168      	cbz	r0, 800ea6a <rmw_validate_namespace+0x1e>
 800ea4e:	b570      	push	{r4, r5, r6, lr}
 800ea50:	460d      	mov	r5, r1
 800ea52:	4616      	mov	r6, r2
 800ea54:	4604      	mov	r4, r0
 800ea56:	f7f1 fbe5 	bl	8000224 <strlen>
 800ea5a:	4633      	mov	r3, r6
 800ea5c:	4601      	mov	r1, r0
 800ea5e:	462a      	mov	r2, r5
 800ea60:	4620      	mov	r0, r4
 800ea62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ea66:	f7ff bfa3 	b.w	800e9b0 <rmw_validate_namespace_with_size>
 800ea6a:	200b      	movs	r0, #11
 800ea6c:	4770      	bx	lr
 800ea6e:	bf00      	nop

0800ea70 <rmw_namespace_validation_result_string>:
 800ea70:	2807      	cmp	r0, #7
 800ea72:	bf9a      	itte	ls
 800ea74:	4b02      	ldrls	r3, [pc, #8]	@ (800ea80 <rmw_namespace_validation_result_string+0x10>)
 800ea76:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800ea7a:	4802      	ldrhi	r0, [pc, #8]	@ (800ea84 <rmw_namespace_validation_result_string+0x14>)
 800ea7c:	4770      	bx	lr
 800ea7e:	bf00      	nop
 800ea80:	0801b614 	.word	0x0801b614
 800ea84:	0801ada8 	.word	0x0801ada8

0800ea88 <rmw_validate_node_name>:
 800ea88:	2800      	cmp	r0, #0
 800ea8a:	d03b      	beq.n	800eb04 <rmw_validate_node_name+0x7c>
 800ea8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea90:	460d      	mov	r5, r1
 800ea92:	2900      	cmp	r1, #0
 800ea94:	d038      	beq.n	800eb08 <rmw_validate_node_name+0x80>
 800ea96:	4616      	mov	r6, r2
 800ea98:	4604      	mov	r4, r0
 800ea9a:	f7f1 fbc3 	bl	8000224 <strlen>
 800ea9e:	b1e0      	cbz	r0, 800eada <rmw_validate_node_name+0x52>
 800eaa0:	1e63      	subs	r3, r4, #1
 800eaa2:	eb03 0800 	add.w	r8, r3, r0
 800eaa6:	f1c4 0101 	rsb	r1, r4, #1
 800eaaa:	18cf      	adds	r7, r1, r3
 800eaac:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800eab0:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 800eab4:	f02e 0c20 	bic.w	ip, lr, #32
 800eab8:	2a09      	cmp	r2, #9
 800eaba:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 800eabe:	d914      	bls.n	800eaea <rmw_validate_node_name+0x62>
 800eac0:	f1bc 0f19 	cmp.w	ip, #25
 800eac4:	d911      	bls.n	800eaea <rmw_validate_node_name+0x62>
 800eac6:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800eaca:	d00e      	beq.n	800eaea <rmw_validate_node_name+0x62>
 800eacc:	2302      	movs	r3, #2
 800eace:	602b      	str	r3, [r5, #0]
 800ead0:	b106      	cbz	r6, 800ead4 <rmw_validate_node_name+0x4c>
 800ead2:	6037      	str	r7, [r6, #0]
 800ead4:	2000      	movs	r0, #0
 800ead6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eada:	2301      	movs	r3, #1
 800eadc:	602b      	str	r3, [r5, #0]
 800eade:	2e00      	cmp	r6, #0
 800eae0:	d0f8      	beq.n	800ead4 <rmw_validate_node_name+0x4c>
 800eae2:	2000      	movs	r0, #0
 800eae4:	6030      	str	r0, [r6, #0]
 800eae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eaea:	4543      	cmp	r3, r8
 800eaec:	d1dd      	bne.n	800eaaa <rmw_validate_node_name+0x22>
 800eaee:	7822      	ldrb	r2, [r4, #0]
 800eaf0:	4b0d      	ldr	r3, [pc, #52]	@ (800eb28 <rmw_validate_node_name+0xa0>)
 800eaf2:	5cd3      	ldrb	r3, [r2, r3]
 800eaf4:	f013 0304 	ands.w	r3, r3, #4
 800eaf8:	d110      	bne.n	800eb1c <rmw_validate_node_name+0x94>
 800eafa:	28ff      	cmp	r0, #255	@ 0xff
 800eafc:	d806      	bhi.n	800eb0c <rmw_validate_node_name+0x84>
 800eafe:	602b      	str	r3, [r5, #0]
 800eb00:	4618      	mov	r0, r3
 800eb02:	e7e8      	b.n	800ead6 <rmw_validate_node_name+0x4e>
 800eb04:	200b      	movs	r0, #11
 800eb06:	4770      	bx	lr
 800eb08:	200b      	movs	r0, #11
 800eb0a:	e7e4      	b.n	800ead6 <rmw_validate_node_name+0x4e>
 800eb0c:	2204      	movs	r2, #4
 800eb0e:	602a      	str	r2, [r5, #0]
 800eb10:	2e00      	cmp	r6, #0
 800eb12:	d0df      	beq.n	800ead4 <rmw_validate_node_name+0x4c>
 800eb14:	22fe      	movs	r2, #254	@ 0xfe
 800eb16:	6032      	str	r2, [r6, #0]
 800eb18:	4618      	mov	r0, r3
 800eb1a:	e7dc      	b.n	800ead6 <rmw_validate_node_name+0x4e>
 800eb1c:	2303      	movs	r3, #3
 800eb1e:	602b      	str	r3, [r5, #0]
 800eb20:	2e00      	cmp	r6, #0
 800eb22:	d1de      	bne.n	800eae2 <rmw_validate_node_name+0x5a>
 800eb24:	e7d6      	b.n	800ead4 <rmw_validate_node_name+0x4c>
 800eb26:	bf00      	nop
 800eb28:	0801bb1f 	.word	0x0801bb1f

0800eb2c <rmw_node_name_validation_result_string>:
 800eb2c:	2804      	cmp	r0, #4
 800eb2e:	bf9a      	itte	ls
 800eb30:	4b02      	ldrls	r3, [pc, #8]	@ (800eb3c <rmw_node_name_validation_result_string+0x10>)
 800eb32:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800eb36:	4802      	ldrhi	r0, [pc, #8]	@ (800eb40 <rmw_node_name_validation_result_string+0x14>)
 800eb38:	4770      	bx	lr
 800eb3a:	bf00      	nop
 800eb3c:	0801b634 	.word	0x0801b634
 800eb40:	0801af50 	.word	0x0801af50

0800eb44 <rmw_uros_set_custom_transport>:
 800eb44:	b470      	push	{r4, r5, r6}
 800eb46:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800eb4a:	b162      	cbz	r2, 800eb66 <rmw_uros_set_custom_transport+0x22>
 800eb4c:	b15b      	cbz	r3, 800eb66 <rmw_uros_set_custom_transport+0x22>
 800eb4e:	b155      	cbz	r5, 800eb66 <rmw_uros_set_custom_transport+0x22>
 800eb50:	b14e      	cbz	r6, 800eb66 <rmw_uros_set_custom_transport+0x22>
 800eb52:	4c06      	ldr	r4, [pc, #24]	@ (800eb6c <rmw_uros_set_custom_transport+0x28>)
 800eb54:	7020      	strb	r0, [r4, #0]
 800eb56:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800eb5a:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800eb5e:	6166      	str	r6, [r4, #20]
 800eb60:	2000      	movs	r0, #0
 800eb62:	bc70      	pop	{r4, r5, r6}
 800eb64:	4770      	bx	lr
 800eb66:	200b      	movs	r0, #11
 800eb68:	bc70      	pop	{r4, r5, r6}
 800eb6a:	4770      	bx	lr
 800eb6c:	2000d014 	.word	0x2000d014

0800eb70 <rmw_uros_ping_agent>:
 800eb70:	b570      	push	{r4, r5, r6, lr}
 800eb72:	4b22      	ldr	r3, [pc, #136]	@ (800ebfc <rmw_uros_ping_agent+0x8c>)
 800eb74:	7b1a      	ldrb	r2, [r3, #12]
 800eb76:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800eb7a:	4605      	mov	r5, r0
 800eb7c:	460e      	mov	r6, r1
 800eb7e:	b10a      	cbz	r2, 800eb84 <rmw_uros_ping_agent+0x14>
 800eb80:	681c      	ldr	r4, [r3, #0]
 800eb82:	b9bc      	cbnz	r4, 800ebb4 <rmw_uros_ping_agent+0x44>
 800eb84:	4b1e      	ldr	r3, [pc, #120]	@ (800ec00 <rmw_uros_ping_agent+0x90>)
 800eb86:	781a      	ldrb	r2, [r3, #0]
 800eb88:	6918      	ldr	r0, [r3, #16]
 800eb8a:	f88d 2200 	strb.w	r2, [sp, #512]	@ 0x200
 800eb8e:	685a      	ldr	r2, [r3, #4]
 800eb90:	92a3      	str	r2, [sp, #652]	@ 0x28c
 800eb92:	2100      	movs	r1, #0
 800eb94:	68da      	ldr	r2, [r3, #12]
 800eb96:	909c      	str	r0, [sp, #624]	@ 0x270
 800eb98:	6958      	ldr	r0, [r3, #20]
 800eb9a:	929b      	str	r2, [sp, #620]	@ 0x26c
 800eb9c:	689b      	ldr	r3, [r3, #8]
 800eb9e:	909d      	str	r0, [sp, #628]	@ 0x274
 800eba0:	466a      	mov	r2, sp
 800eba2:	4608      	mov	r0, r1
 800eba4:	939a      	str	r3, [sp, #616]	@ 0x268
 800eba6:	f000 ffbd 	bl	800fb24 <rmw_uxrce_transport_init>
 800ebaa:	b198      	cbz	r0, 800ebd4 <rmw_uros_ping_agent+0x64>
 800ebac:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800ebb0:	bd70      	pop	{r4, r5, r6, pc}
 800ebb2:	b9f0      	cbnz	r0, 800ebf2 <rmw_uros_ping_agent+0x82>
 800ebb4:	68a0      	ldr	r0, [r4, #8]
 800ebb6:	4632      	mov	r2, r6
 800ebb8:	4629      	mov	r1, r5
 800ebba:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ebbe:	f002 fba1 	bl	8011304 <uxr_ping_agent_session>
 800ebc2:	6864      	ldr	r4, [r4, #4]
 800ebc4:	2c00      	cmp	r4, #0
 800ebc6:	d1f4      	bne.n	800ebb2 <rmw_uros_ping_agent+0x42>
 800ebc8:	f080 0001 	eor.w	r0, r0, #1
 800ebcc:	b2c0      	uxtb	r0, r0
 800ebce:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800ebd2:	bd70      	pop	{r4, r5, r6, pc}
 800ebd4:	4632      	mov	r2, r6
 800ebd6:	4629      	mov	r1, r5
 800ebd8:	a89e      	add	r0, sp, #632	@ 0x278
 800ebda:	f002 fbdf 	bl	801139c <uxr_ping_agent_attempts>
 800ebde:	4604      	mov	r4, r0
 800ebe0:	4668      	mov	r0, sp
 800ebe2:	f002 fb5b 	bl	801129c <uxr_close_custom_transport>
 800ebe6:	f084 0001 	eor.w	r0, r4, #1
 800ebea:	b2c0      	uxtb	r0, r0
 800ebec:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800ebf0:	bd70      	pop	{r4, r5, r6, pc}
 800ebf2:	2000      	movs	r0, #0
 800ebf4:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800ebf8:	bd70      	pop	{r4, r5, r6, pc}
 800ebfa:	bf00      	nop
 800ebfc:	2001196c 	.word	0x2001196c
 800ec00:	2000d014 	.word	0x2000d014

0800ec04 <rmw_init_options_init>:
 800ec04:	b084      	sub	sp, #16
 800ec06:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec08:	b083      	sub	sp, #12
 800ec0a:	ad09      	add	r5, sp, #36	@ 0x24
 800ec0c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800ec10:	b130      	cbz	r0, 800ec20 <rmw_init_options_init+0x1c>
 800ec12:	4604      	mov	r4, r0
 800ec14:	4628      	mov	r0, r5
 800ec16:	f7ff fbe7 	bl	800e3e8 <rcutils_allocator_is_valid>
 800ec1a:	b108      	cbz	r0, 800ec20 <rmw_init_options_init+0x1c>
 800ec1c:	68a6      	ldr	r6, [r4, #8]
 800ec1e:	b12e      	cbz	r6, 800ec2c <rmw_init_options_init+0x28>
 800ec20:	200b      	movs	r0, #11
 800ec22:	b003      	add	sp, #12
 800ec24:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ec28:	b004      	add	sp, #16
 800ec2a:	4770      	bx	lr
 800ec2c:	2200      	movs	r2, #0
 800ec2e:	2300      	movs	r3, #0
 800ec30:	e9c4 2300 	strd	r2, r3, [r4]
 800ec34:	4b20      	ldr	r3, [pc, #128]	@ (800ecb8 <rmw_init_options_init+0xb4>)
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	60a3      	str	r3, [r4, #8]
 800ec3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec3c:	f104 0c20 	add.w	ip, r4, #32
 800ec40:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ec44:	466f      	mov	r7, sp
 800ec46:	682b      	ldr	r3, [r5, #0]
 800ec48:	f8cc 3000 	str.w	r3, [ip]
 800ec4c:	4638      	mov	r0, r7
 800ec4e:	61e6      	str	r6, [r4, #28]
 800ec50:	60e6      	str	r6, [r4, #12]
 800ec52:	f7ff fe81 	bl	800e958 <rmw_get_default_security_options>
 800ec56:	e897 0003 	ldmia.w	r7, {r0, r1}
 800ec5a:	f104 0310 	add.w	r3, r4, #16
 800ec5e:	e883 0003 	stmia.w	r3, {r0, r1}
 800ec62:	2203      	movs	r2, #3
 800ec64:	4815      	ldr	r0, [pc, #84]	@ (800ecbc <rmw_init_options_init+0xb8>)
 800ec66:	4916      	ldr	r1, [pc, #88]	@ (800ecc0 <rmw_init_options_init+0xbc>)
 800ec68:	7626      	strb	r6, [r4, #24]
 800ec6a:	f001 f88b 	bl	800fd84 <rmw_uxrce_init_init_options_impl_memory>
 800ec6e:	4813      	ldr	r0, [pc, #76]	@ (800ecbc <rmw_init_options_init+0xb8>)
 800ec70:	f008 fb20 	bl	80172b4 <get_memory>
 800ec74:	b1f0      	cbz	r0, 800ecb4 <rmw_init_options_init+0xb0>
 800ec76:	4a13      	ldr	r2, [pc, #76]	@ (800ecc4 <rmw_init_options_init+0xc0>)
 800ec78:	6883      	ldr	r3, [r0, #8]
 800ec7a:	6851      	ldr	r1, [r2, #4]
 800ec7c:	7810      	ldrb	r0, [r2, #0]
 800ec7e:	6363      	str	r3, [r4, #52]	@ 0x34
 800ec80:	7418      	strb	r0, [r3, #16]
 800ec82:	6159      	str	r1, [r3, #20]
 800ec84:	68d1      	ldr	r1, [r2, #12]
 800ec86:	61d9      	str	r1, [r3, #28]
 800ec88:	6911      	ldr	r1, [r2, #16]
 800ec8a:	6219      	str	r1, [r3, #32]
 800ec8c:	6951      	ldr	r1, [r2, #20]
 800ec8e:	6892      	ldr	r2, [r2, #8]
 800ec90:	619a      	str	r2, [r3, #24]
 800ec92:	6259      	str	r1, [r3, #36]	@ 0x24
 800ec94:	f004 fc50 	bl	8013538 <uxr_nanos>
 800ec98:	f00a fb48 	bl	801932c <srand>
 800ec9c:	f00a fb74 	bl	8019388 <rand>
 800eca0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800eca2:	6298      	str	r0, [r3, #40]	@ 0x28
 800eca4:	2800      	cmp	r0, #0
 800eca6:	d0f9      	beq.n	800ec9c <rmw_init_options_init+0x98>
 800eca8:	2000      	movs	r0, #0
 800ecaa:	b003      	add	sp, #12
 800ecac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ecb0:	b004      	add	sp, #16
 800ecb2:	4770      	bx	lr
 800ecb4:	2001      	movs	r0, #1
 800ecb6:	e7b4      	b.n	800ec22 <rmw_init_options_init+0x1e>
 800ecb8:	0801b9e8 	.word	0x0801b9e8
 800ecbc:	2001192c 	.word	0x2001192c
 800ecc0:	2000d1c8 	.word	0x2000d1c8
 800ecc4:	2000d014 	.word	0x2000d014

0800ecc8 <rmw_init_options_copy>:
 800ecc8:	b570      	push	{r4, r5, r6, lr}
 800ecca:	b088      	sub	sp, #32
 800eccc:	b160      	cbz	r0, 800ece8 <rmw_init_options_copy+0x20>
 800ecce:	460d      	mov	r5, r1
 800ecd0:	b151      	cbz	r1, 800ece8 <rmw_init_options_copy+0x20>
 800ecd2:	4604      	mov	r4, r0
 800ecd4:	6880      	ldr	r0, [r0, #8]
 800ecd6:	b128      	cbz	r0, 800ece4 <rmw_init_options_copy+0x1c>
 800ecd8:	4b33      	ldr	r3, [pc, #204]	@ (800eda8 <rmw_init_options_copy+0xe0>)
 800ecda:	6819      	ldr	r1, [r3, #0]
 800ecdc:	f7f1 fa98 	bl	8000210 <strcmp>
 800ece0:	2800      	cmp	r0, #0
 800ece2:	d154      	bne.n	800ed8e <rmw_init_options_copy+0xc6>
 800ece4:	68ab      	ldr	r3, [r5, #8]
 800ece6:	b11b      	cbz	r3, 800ecf0 <rmw_init_options_copy+0x28>
 800ece8:	240b      	movs	r4, #11
 800ecea:	4620      	mov	r0, r4
 800ecec:	b008      	add	sp, #32
 800ecee:	bd70      	pop	{r4, r5, r6, pc}
 800ecf0:	4623      	mov	r3, r4
 800ecf2:	462a      	mov	r2, r5
 800ecf4:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800ecf8:	f8d3 c000 	ldr.w	ip, [r3]
 800ecfc:	6858      	ldr	r0, [r3, #4]
 800ecfe:	6899      	ldr	r1, [r3, #8]
 800ed00:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800ed04:	f8c2 e00c 	str.w	lr, [r2, #12]
 800ed08:	3310      	adds	r3, #16
 800ed0a:	42b3      	cmp	r3, r6
 800ed0c:	f8c2 c000 	str.w	ip, [r2]
 800ed10:	6050      	str	r0, [r2, #4]
 800ed12:	6091      	str	r1, [r2, #8]
 800ed14:	f102 0210 	add.w	r2, r2, #16
 800ed18:	d1ee      	bne.n	800ecf8 <rmw_init_options_copy+0x30>
 800ed1a:	6819      	ldr	r1, [r3, #0]
 800ed1c:	685b      	ldr	r3, [r3, #4]
 800ed1e:	6053      	str	r3, [r2, #4]
 800ed20:	6011      	str	r1, [r2, #0]
 800ed22:	f104 0e20 	add.w	lr, r4, #32
 800ed26:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ed2a:	f10d 0c0c 	add.w	ip, sp, #12
 800ed2e:	4666      	mov	r6, ip
 800ed30:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ed34:	f8de 3000 	ldr.w	r3, [lr]
 800ed38:	f8cc 3000 	str.w	r3, [ip]
 800ed3c:	4630      	mov	r0, r6
 800ed3e:	f7ff fb53 	bl	800e3e8 <rcutils_allocator_is_valid>
 800ed42:	2800      	cmp	r0, #0
 800ed44:	d0d0      	beq.n	800ece8 <rmw_init_options_copy+0x20>
 800ed46:	ab08      	add	r3, sp, #32
 800ed48:	e913 0003 	ldmdb	r3, {r0, r1}
 800ed4c:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ed50:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800ed54:	69e0      	ldr	r0, [r4, #28]
 800ed56:	f7ff fd5d 	bl	800e814 <rcutils_strdup>
 800ed5a:	61e8      	str	r0, [r5, #28]
 800ed5c:	69e3      	ldr	r3, [r4, #28]
 800ed5e:	b103      	cbz	r3, 800ed62 <rmw_init_options_copy+0x9a>
 800ed60:	b1f8      	cbz	r0, 800eda2 <rmw_init_options_copy+0xda>
 800ed62:	4812      	ldr	r0, [pc, #72]	@ (800edac <rmw_init_options_copy+0xe4>)
 800ed64:	f008 faa6 	bl	80172b4 <get_memory>
 800ed68:	b1a8      	cbz	r0, 800ed96 <rmw_init_options_copy+0xce>
 800ed6a:	6883      	ldr	r3, [r0, #8]
 800ed6c:	636b      	str	r3, [r5, #52]	@ 0x34
 800ed6e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800ed70:	f102 0c10 	add.w	ip, r2, #16
 800ed74:	f103 0510 	add.w	r5, r3, #16
 800ed78:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ed7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ed7e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800ed82:	2400      	movs	r4, #0
 800ed84:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800ed88:	4620      	mov	r0, r4
 800ed8a:	b008      	add	sp, #32
 800ed8c:	bd70      	pop	{r4, r5, r6, pc}
 800ed8e:	240c      	movs	r4, #12
 800ed90:	4620      	mov	r0, r4
 800ed92:	b008      	add	sp, #32
 800ed94:	bd70      	pop	{r4, r5, r6, pc}
 800ed96:	9b04      	ldr	r3, [sp, #16]
 800ed98:	9907      	ldr	r1, [sp, #28]
 800ed9a:	69e8      	ldr	r0, [r5, #28]
 800ed9c:	4798      	blx	r3
 800ed9e:	2401      	movs	r4, #1
 800eda0:	e7a3      	b.n	800ecea <rmw_init_options_copy+0x22>
 800eda2:	240a      	movs	r4, #10
 800eda4:	e7a1      	b.n	800ecea <rmw_init_options_copy+0x22>
 800eda6:	bf00      	nop
 800eda8:	0801b9e8 	.word	0x0801b9e8
 800edac:	2001192c 	.word	0x2001192c

0800edb0 <rmw_init_options_fini>:
 800edb0:	2800      	cmp	r0, #0
 800edb2:	d041      	beq.n	800ee38 <rmw_init_options_fini+0x88>
 800edb4:	b510      	push	{r4, lr}
 800edb6:	4604      	mov	r4, r0
 800edb8:	b08e      	sub	sp, #56	@ 0x38
 800edba:	3020      	adds	r0, #32
 800edbc:	f7ff fb14 	bl	800e3e8 <rcutils_allocator_is_valid>
 800edc0:	b380      	cbz	r0, 800ee24 <rmw_init_options_fini+0x74>
 800edc2:	68a0      	ldr	r0, [r4, #8]
 800edc4:	b120      	cbz	r0, 800edd0 <rmw_init_options_fini+0x20>
 800edc6:	4b1e      	ldr	r3, [pc, #120]	@ (800ee40 <rmw_init_options_fini+0x90>)
 800edc8:	6819      	ldr	r1, [r3, #0]
 800edca:	f7f1 fa21 	bl	8000210 <strcmp>
 800edce:	bb88      	cbnz	r0, 800ee34 <rmw_init_options_fini+0x84>
 800edd0:	4b1c      	ldr	r3, [pc, #112]	@ (800ee44 <rmw_init_options_fini+0x94>)
 800edd2:	6819      	ldr	r1, [r3, #0]
 800edd4:	b351      	cbz	r1, 800ee2c <rmw_init_options_fini+0x7c>
 800edd6:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800edd8:	e001      	b.n	800edde <rmw_init_options_fini+0x2e>
 800edda:	6849      	ldr	r1, [r1, #4]
 800eddc:	b331      	cbz	r1, 800ee2c <rmw_init_options_fini+0x7c>
 800edde:	688b      	ldr	r3, [r1, #8]
 800ede0:	429a      	cmp	r2, r3
 800ede2:	d1fa      	bne.n	800edda <rmw_init_options_fini+0x2a>
 800ede4:	4817      	ldr	r0, [pc, #92]	@ (800ee44 <rmw_init_options_fini+0x94>)
 800ede6:	f008 fa75 	bl	80172d4 <put_memory>
 800edea:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800edec:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800edee:	69e0      	ldr	r0, [r4, #28]
 800edf0:	4798      	blx	r3
 800edf2:	4668      	mov	r0, sp
 800edf4:	f7ff fd9c 	bl	800e930 <rmw_get_zero_initialized_init_options>
 800edf8:	46ee      	mov	lr, sp
 800edfa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800edfe:	46a4      	mov	ip, r4
 800ee00:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ee04:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ee08:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ee0c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ee10:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ee14:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ee18:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	4618      	mov	r0, r3
 800ee20:	b00e      	add	sp, #56	@ 0x38
 800ee22:	bd10      	pop	{r4, pc}
 800ee24:	230b      	movs	r3, #11
 800ee26:	4618      	mov	r0, r3
 800ee28:	b00e      	add	sp, #56	@ 0x38
 800ee2a:	bd10      	pop	{r4, pc}
 800ee2c:	2301      	movs	r3, #1
 800ee2e:	4618      	mov	r0, r3
 800ee30:	b00e      	add	sp, #56	@ 0x38
 800ee32:	bd10      	pop	{r4, pc}
 800ee34:	230c      	movs	r3, #12
 800ee36:	e7f2      	b.n	800ee1e <rmw_init_options_fini+0x6e>
 800ee38:	230b      	movs	r3, #11
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	4770      	bx	lr
 800ee3e:	bf00      	nop
 800ee40:	0801b9e8 	.word	0x0801b9e8
 800ee44:	2001192c 	.word	0x2001192c

0800ee48 <rmw_init>:
 800ee48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ee4c:	b083      	sub	sp, #12
 800ee4e:	2800      	cmp	r0, #0
 800ee50:	f000 80d3 	beq.w	800effa <rmw_init+0x1b2>
 800ee54:	460e      	mov	r6, r1
 800ee56:	2900      	cmp	r1, #0
 800ee58:	f000 80cf 	beq.w	800effa <rmw_init+0x1b2>
 800ee5c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800ee5e:	4605      	mov	r5, r0
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	f000 80ca 	beq.w	800effa <rmw_init+0x1b2>
 800ee66:	4b78      	ldr	r3, [pc, #480]	@ (800f048 <rmw_init+0x200>)
 800ee68:	6880      	ldr	r0, [r0, #8]
 800ee6a:	681f      	ldr	r7, [r3, #0]
 800ee6c:	b128      	cbz	r0, 800ee7a <rmw_init+0x32>
 800ee6e:	4639      	mov	r1, r7
 800ee70:	f7f1 f9ce 	bl	8000210 <strcmp>
 800ee74:	2800      	cmp	r0, #0
 800ee76:	f040 80ca 	bne.w	800f00e <rmw_init+0x1c6>
 800ee7a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ee7e:	4c73      	ldr	r4, [pc, #460]	@ (800f04c <rmw_init+0x204>)
 800ee80:	4973      	ldr	r1, [pc, #460]	@ (800f050 <rmw_init+0x208>)
 800ee82:	4874      	ldr	r0, [pc, #464]	@ (800f054 <rmw_init+0x20c>)
 800ee84:	60b7      	str	r7, [r6, #8]
 800ee86:	e9c6 2300 	strd	r2, r3, [r6]
 800ee8a:	68eb      	ldr	r3, [r5, #12]
 800ee8c:	64b3      	str	r3, [r6, #72]	@ 0x48
 800ee8e:	2201      	movs	r2, #1
 800ee90:	f000 ff18 	bl	800fcc4 <rmw_uxrce_init_session_memory>
 800ee94:	4620      	mov	r0, r4
 800ee96:	4970      	ldr	r1, [pc, #448]	@ (800f058 <rmw_init+0x210>)
 800ee98:	2204      	movs	r2, #4
 800ee9a:	f000 ff53 	bl	800fd44 <rmw_uxrce_init_static_input_buffer_memory>
 800ee9e:	f04f 0800 	mov.w	r8, #0
 800eea2:	486c      	ldr	r0, [pc, #432]	@ (800f054 <rmw_init+0x20c>)
 800eea4:	f884 800d 	strb.w	r8, [r4, #13]
 800eea8:	f008 fa04 	bl	80172b4 <get_memory>
 800eeac:	2800      	cmp	r0, #0
 800eeae:	f000 80a9 	beq.w	800f004 <rmw_init+0x1bc>
 800eeb2:	6884      	ldr	r4, [r0, #8]
 800eeb4:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800eeb6:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800eeb8:	f890 c010 	ldrb.w	ip, [r0, #16]
 800eebc:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800eec0:	9101      	str	r1, [sp, #4]
 800eec2:	6a00      	ldr	r0, [r0, #32]
 800eec4:	9000      	str	r0, [sp, #0]
 800eec6:	f104 0910 	add.w	r9, r4, #16
 800eeca:	4661      	mov	r1, ip
 800eecc:	4648      	mov	r0, r9
 800eece:	f002 f9a3 	bl	8011218 <uxr_set_custom_transport_callbacks>
 800eed2:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800eed6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800eeda:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800eede:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800eee2:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800eee6:	495d      	ldr	r1, [pc, #372]	@ (800f05c <rmw_init+0x214>)
 800eee8:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800eeec:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800eef0:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800eef4:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800eef8:	4859      	ldr	r0, [pc, #356]	@ (800f060 <rmw_init+0x218>)
 800eefa:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800eefe:	2201      	movs	r2, #1
 800ef00:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800ef02:	f000 febf 	bl	800fc84 <rmw_uxrce_init_node_memory>
 800ef06:	4957      	ldr	r1, [pc, #348]	@ (800f064 <rmw_init+0x21c>)
 800ef08:	4857      	ldr	r0, [pc, #348]	@ (800f068 <rmw_init+0x220>)
 800ef0a:	2205      	movs	r2, #5
 800ef0c:	f000 fe9a 	bl	800fc44 <rmw_uxrce_init_subscription_memory>
 800ef10:	4956      	ldr	r1, [pc, #344]	@ (800f06c <rmw_init+0x224>)
 800ef12:	4857      	ldr	r0, [pc, #348]	@ (800f070 <rmw_init+0x228>)
 800ef14:	220a      	movs	r2, #10
 800ef16:	f000 fe75 	bl	800fc04 <rmw_uxrce_init_publisher_memory>
 800ef1a:	4956      	ldr	r1, [pc, #344]	@ (800f074 <rmw_init+0x22c>)
 800ef1c:	4856      	ldr	r0, [pc, #344]	@ (800f078 <rmw_init+0x230>)
 800ef1e:	2201      	movs	r2, #1
 800ef20:	f000 fe30 	bl	800fb84 <rmw_uxrce_init_service_memory>
 800ef24:	4955      	ldr	r1, [pc, #340]	@ (800f07c <rmw_init+0x234>)
 800ef26:	4856      	ldr	r0, [pc, #344]	@ (800f080 <rmw_init+0x238>)
 800ef28:	2201      	movs	r2, #1
 800ef2a:	f000 fe4b 	bl	800fbc4 <rmw_uxrce_init_client_memory>
 800ef2e:	4955      	ldr	r1, [pc, #340]	@ (800f084 <rmw_init+0x23c>)
 800ef30:	4855      	ldr	r0, [pc, #340]	@ (800f088 <rmw_init+0x240>)
 800ef32:	220f      	movs	r2, #15
 800ef34:	f000 fee6 	bl	800fd04 <rmw_uxrce_init_topic_memory>
 800ef38:	4954      	ldr	r1, [pc, #336]	@ (800f08c <rmw_init+0x244>)
 800ef3a:	4855      	ldr	r0, [pc, #340]	@ (800f090 <rmw_init+0x248>)
 800ef3c:	2203      	movs	r2, #3
 800ef3e:	f000 ff21 	bl	800fd84 <rmw_uxrce_init_init_options_impl_memory>
 800ef42:	4954      	ldr	r1, [pc, #336]	@ (800f094 <rmw_init+0x24c>)
 800ef44:	4854      	ldr	r0, [pc, #336]	@ (800f098 <rmw_init+0x250>)
 800ef46:	2204      	movs	r2, #4
 800ef48:	f000 ff3c 	bl	800fdc4 <rmw_uxrce_init_wait_set_memory>
 800ef4c:	4953      	ldr	r1, [pc, #332]	@ (800f09c <rmw_init+0x254>)
 800ef4e:	4854      	ldr	r0, [pc, #336]	@ (800f0a0 <rmw_init+0x258>)
 800ef50:	2204      	movs	r2, #4
 800ef52:	f000 ff57 	bl	800fe04 <rmw_uxrce_init_guard_condition_memory>
 800ef56:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800ef58:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800ef5a:	4642      	mov	r2, r8
 800ef5c:	f000 fde2 	bl	800fb24 <rmw_uxrce_transport_init>
 800ef60:	4607      	mov	r7, r0
 800ef62:	2800      	cmp	r0, #0
 800ef64:	d158      	bne.n	800f018 <rmw_init+0x1d0>
 800ef66:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800ef68:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800ef6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ef6e:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800ef72:	4628      	mov	r0, r5
 800ef74:	f002 fc88 	bl	8011888 <uxr_init_session>
 800ef78:	494a      	ldr	r1, [pc, #296]	@ (800f0a4 <rmw_init+0x25c>)
 800ef7a:	4622      	mov	r2, r4
 800ef7c:	4628      	mov	r0, r5
 800ef7e:	f002 fca7 	bl	80118d0 <uxr_set_topic_callback>
 800ef82:	4949      	ldr	r1, [pc, #292]	@ (800f0a8 <rmw_init+0x260>)
 800ef84:	463a      	mov	r2, r7
 800ef86:	4628      	mov	r0, r5
 800ef88:	f002 fc9e 	bl	80118c8 <uxr_set_status_callback>
 800ef8c:	4947      	ldr	r1, [pc, #284]	@ (800f0ac <rmw_init+0x264>)
 800ef8e:	463a      	mov	r2, r7
 800ef90:	4628      	mov	r0, r5
 800ef92:	f002 fca1 	bl	80118d8 <uxr_set_request_callback>
 800ef96:	4946      	ldr	r1, [pc, #280]	@ (800f0b0 <rmw_init+0x268>)
 800ef98:	463a      	mov	r2, r7
 800ef9a:	4628      	mov	r0, r5
 800ef9c:	f002 fca0 	bl	80118e0 <uxr_set_reply_callback>
 800efa0:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800efa4:	2304      	movs	r3, #4
 800efa6:	0092      	lsls	r2, r2, #2
 800efa8:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800efac:	4628      	mov	r0, r5
 800efae:	f002 fcd5 	bl	801195c <uxr_create_input_reliable_stream>
 800efb2:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800efb6:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800efba:	0092      	lsls	r2, r2, #2
 800efbc:	2304      	movs	r3, #4
 800efbe:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800efc2:	4628      	mov	r0, r5
 800efc4:	f002 fca2 	bl	801190c <uxr_create_output_reliable_stream>
 800efc8:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800efcc:	4628      	mov	r0, r5
 800efce:	f002 fcbf 	bl	8011950 <uxr_create_input_best_effort_stream>
 800efd2:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800efd6:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800efda:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800efde:	3114      	adds	r1, #20
 800efe0:	4628      	mov	r0, r5
 800efe2:	f002 fc81 	bl	80118e8 <uxr_create_output_best_effort_stream>
 800efe6:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800efea:	4628      	mov	r0, r5
 800efec:	f003 fa36 	bl	801245c <uxr_create_session>
 800eff0:	b1f8      	cbz	r0, 800f032 <rmw_init+0x1ea>
 800eff2:	4638      	mov	r0, r7
 800eff4:	b003      	add	sp, #12
 800eff6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800effa:	270b      	movs	r7, #11
 800effc:	4638      	mov	r0, r7
 800effe:	b003      	add	sp, #12
 800f000:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f004:	2701      	movs	r7, #1
 800f006:	4638      	mov	r0, r7
 800f008:	b003      	add	sp, #12
 800f00a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f00e:	270c      	movs	r7, #12
 800f010:	4638      	mov	r0, r7
 800f012:	b003      	add	sp, #12
 800f014:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f018:	4648      	mov	r0, r9
 800f01a:	f002 f93f 	bl	801129c <uxr_close_custom_transport>
 800f01e:	480d      	ldr	r0, [pc, #52]	@ (800f054 <rmw_init+0x20c>)
 800f020:	4621      	mov	r1, r4
 800f022:	f008 f957 	bl	80172d4 <put_memory>
 800f026:	4638      	mov	r0, r7
 800f028:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800f02c:	b003      	add	sp, #12
 800f02e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f032:	4648      	mov	r0, r9
 800f034:	f002 f932 	bl	801129c <uxr_close_custom_transport>
 800f038:	4806      	ldr	r0, [pc, #24]	@ (800f054 <rmw_init+0x20c>)
 800f03a:	4621      	mov	r1, r4
 800f03c:	f008 f94a 	bl	80172d4 <put_memory>
 800f040:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800f042:	2701      	movs	r7, #1
 800f044:	e7d5      	b.n	800eff2 <rmw_init+0x1aa>
 800f046:	bf00      	nop
 800f048:	0801b9e8 	.word	0x0801b9e8
 800f04c:	2001197c 	.word	0x2001197c
 800f050:	2000dc28 	.word	0x2000dc28
 800f054:	2001196c 	.word	0x2001196c
 800f058:	2000f1d0 	.word	0x2000f1d0
 800f05c:	2000d24c 	.word	0x2000d24c
 800f060:	2001193c 	.word	0x2001193c
 800f064:	200112d0 	.word	0x200112d0
 800f068:	2001198c 	.word	0x2001198c
 800f06c:	2000d2f0 	.word	0x2000d2f0
 800f070:	2001194c 	.word	0x2001194c
 800f074:	2000db60 	.word	0x2000db60
 800f078:	2001195c 	.word	0x2001195c
 800f07c:	2000d080 	.word	0x2000d080
 800f080:	2000d06c 	.word	0x2000d06c
 800f084:	20011708 	.word	0x20011708
 800f088:	2001199c 	.word	0x2001199c
 800f08c:	2000d1c8 	.word	0x2000d1c8
 800f090:	2001192c 	.word	0x2001192c
 800f094:	200118ac 	.word	0x200118ac
 800f098:	200119ac 	.word	0x200119ac
 800f09c:	2000d148 	.word	0x2000d148
 800f0a0:	2001191c 	.word	0x2001191c
 800f0a4:	080170ed 	.word	0x080170ed
 800f0a8:	080170e5 	.word	0x080170e5
 800f0ac:	08017185 	.word	0x08017185
 800f0b0:	08017221 	.word	0x08017221

0800f0b4 <rmw_shutdown>:
 800f0b4:	b570      	push	{r4, r5, r6, lr}
 800f0b6:	b094      	sub	sp, #80	@ 0x50
 800f0b8:	2800      	cmp	r0, #0
 800f0ba:	d050      	beq.n	800f15e <rmw_shutdown+0xaa>
 800f0bc:	4605      	mov	r5, r0
 800f0be:	6880      	ldr	r0, [r0, #8]
 800f0c0:	b128      	cbz	r0, 800f0ce <rmw_shutdown+0x1a>
 800f0c2:	4b2b      	ldr	r3, [pc, #172]	@ (800f170 <rmw_shutdown+0xbc>)
 800f0c4:	6819      	ldr	r1, [r3, #0]
 800f0c6:	f7f1 f8a3 	bl	8000210 <strcmp>
 800f0ca:	2800      	cmp	r0, #0
 800f0cc:	d143      	bne.n	800f156 <rmw_shutdown+0xa2>
 800f0ce:	4b29      	ldr	r3, [pc, #164]	@ (800f174 <rmw_shutdown+0xc0>)
 800f0d0:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800f0d2:	681c      	ldr	r4, [r3, #0]
 800f0d4:	2c00      	cmp	r4, #0
 800f0d6:	d046      	beq.n	800f166 <rmw_shutdown+0xb2>
 800f0d8:	2600      	movs	r6, #0
 800f0da:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800f0de:	6902      	ldr	r2, [r0, #16]
 800f0e0:	428a      	cmp	r2, r1
 800f0e2:	d024      	beq.n	800f12e <rmw_shutdown+0x7a>
 800f0e4:	2c00      	cmp	r4, #0
 800f0e6:	d1f8      	bne.n	800f0da <rmw_shutdown+0x26>
 800f0e8:	b189      	cbz	r1, 800f10e <rmw_shutdown+0x5a>
 800f0ea:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800f0ee:	789b      	ldrb	r3, [r3, #2]
 800f0f0:	2b01      	cmp	r3, #1
 800f0f2:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800f0f6:	bf14      	ite	ne
 800f0f8:	210a      	movne	r1, #10
 800f0fa:	2100      	moveq	r1, #0
 800f0fc:	f003 f986 	bl	801240c <uxr_delete_session_retries>
 800f100:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800f102:	f000 fe9f 	bl	800fe44 <rmw_uxrce_fini_session_memory>
 800f106:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800f108:	3010      	adds	r0, #16
 800f10a:	f002 f8c7 	bl	801129c <uxr_close_custom_transport>
 800f10e:	2300      	movs	r3, #0
 800f110:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800f112:	b1b6      	cbz	r6, 800f142 <rmw_shutdown+0x8e>
 800f114:	4d18      	ldr	r5, [pc, #96]	@ (800f178 <rmw_shutdown+0xc4>)
 800f116:	682c      	ldr	r4, [r5, #0]
 800f118:	b134      	cbz	r4, 800f128 <rmw_shutdown+0x74>
 800f11a:	4621      	mov	r1, r4
 800f11c:	6864      	ldr	r4, [r4, #4]
 800f11e:	4628      	mov	r0, r5
 800f120:	f008 f8d8 	bl	80172d4 <put_memory>
 800f124:	2c00      	cmp	r4, #0
 800f126:	d1f8      	bne.n	800f11a <rmw_shutdown+0x66>
 800f128:	4630      	mov	r0, r6
 800f12a:	b014      	add	sp, #80	@ 0x50
 800f12c:	bd70      	pop	{r4, r5, r6, pc}
 800f12e:	3018      	adds	r0, #24
 800f130:	f000 f8e8 	bl	800f304 <rmw_destroy_node>
 800f134:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800f136:	4606      	mov	r6, r0
 800f138:	2c00      	cmp	r4, #0
 800f13a:	d1ce      	bne.n	800f0da <rmw_shutdown+0x26>
 800f13c:	2900      	cmp	r1, #0
 800f13e:	d1d4      	bne.n	800f0ea <rmw_shutdown+0x36>
 800f140:	e7e5      	b.n	800f10e <rmw_shutdown+0x5a>
 800f142:	4668      	mov	r0, sp
 800f144:	f007 fec4 	bl	8016ed0 <rmw_get_zero_initialized_context>
 800f148:	2250      	movs	r2, #80	@ 0x50
 800f14a:	4669      	mov	r1, sp
 800f14c:	4628      	mov	r0, r5
 800f14e:	f00a fdd0 	bl	8019cf2 <memcpy>
 800f152:	2600      	movs	r6, #0
 800f154:	e7de      	b.n	800f114 <rmw_shutdown+0x60>
 800f156:	260c      	movs	r6, #12
 800f158:	4630      	mov	r0, r6
 800f15a:	b014      	add	sp, #80	@ 0x50
 800f15c:	bd70      	pop	{r4, r5, r6, pc}
 800f15e:	260b      	movs	r6, #11
 800f160:	4630      	mov	r0, r6
 800f162:	b014      	add	sp, #80	@ 0x50
 800f164:	bd70      	pop	{r4, r5, r6, pc}
 800f166:	2900      	cmp	r1, #0
 800f168:	d0eb      	beq.n	800f142 <rmw_shutdown+0x8e>
 800f16a:	4626      	mov	r6, r4
 800f16c:	e7bd      	b.n	800f0ea <rmw_shutdown+0x36>
 800f16e:	bf00      	nop
 800f170:	0801b9e8 	.word	0x0801b9e8
 800f174:	2001193c 	.word	0x2001193c
 800f178:	2001197c 	.word	0x2001197c

0800f17c <rmw_context_fini>:
 800f17c:	4b17      	ldr	r3, [pc, #92]	@ (800f1dc <rmw_context_fini+0x60>)
 800f17e:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800f180:	b570      	push	{r4, r5, r6, lr}
 800f182:	681c      	ldr	r4, [r3, #0]
 800f184:	4605      	mov	r5, r0
 800f186:	b334      	cbz	r4, 800f1d6 <rmw_context_fini+0x5a>
 800f188:	2600      	movs	r6, #0
 800f18a:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800f18e:	6902      	ldr	r2, [r0, #16]
 800f190:	428a      	cmp	r2, r1
 800f192:	d018      	beq.n	800f1c6 <rmw_context_fini+0x4a>
 800f194:	2c00      	cmp	r4, #0
 800f196:	d1f8      	bne.n	800f18a <rmw_context_fini+0xe>
 800f198:	b189      	cbz	r1, 800f1be <rmw_context_fini+0x42>
 800f19a:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800f19e:	789b      	ldrb	r3, [r3, #2]
 800f1a0:	2b01      	cmp	r3, #1
 800f1a2:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800f1a6:	bf14      	ite	ne
 800f1a8:	210a      	movne	r1, #10
 800f1aa:	2100      	moveq	r1, #0
 800f1ac:	f003 f92e 	bl	801240c <uxr_delete_session_retries>
 800f1b0:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800f1b2:	f000 fe47 	bl	800fe44 <rmw_uxrce_fini_session_memory>
 800f1b6:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800f1b8:	3010      	adds	r0, #16
 800f1ba:	f002 f86f 	bl	801129c <uxr_close_custom_transport>
 800f1be:	2300      	movs	r3, #0
 800f1c0:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800f1c2:	4630      	mov	r0, r6
 800f1c4:	bd70      	pop	{r4, r5, r6, pc}
 800f1c6:	3018      	adds	r0, #24
 800f1c8:	f000 f89c 	bl	800f304 <rmw_destroy_node>
 800f1cc:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800f1ce:	4606      	mov	r6, r0
 800f1d0:	2c00      	cmp	r4, #0
 800f1d2:	d1da      	bne.n	800f18a <rmw_context_fini+0xe>
 800f1d4:	e7e0      	b.n	800f198 <rmw_context_fini+0x1c>
 800f1d6:	4626      	mov	r6, r4
 800f1d8:	e7de      	b.n	800f198 <rmw_context_fini+0x1c>
 800f1da:	bf00      	nop
 800f1dc:	2001193c 	.word	0x2001193c

0800f1e0 <create_node>:
 800f1e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f1e4:	b083      	sub	sp, #12
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d05f      	beq.n	800f2aa <create_node+0xca>
 800f1ea:	4606      	mov	r6, r0
 800f1ec:	4835      	ldr	r0, [pc, #212]	@ (800f2c4 <create_node+0xe4>)
 800f1ee:	460f      	mov	r7, r1
 800f1f0:	4690      	mov	r8, r2
 800f1f2:	461d      	mov	r5, r3
 800f1f4:	f008 f85e 	bl	80172b4 <get_memory>
 800f1f8:	2800      	cmp	r0, #0
 800f1fa:	d056      	beq.n	800f2aa <create_node+0xca>
 800f1fc:	6884      	ldr	r4, [r0, #8]
 800f1fe:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800f200:	6123      	str	r3, [r4, #16]
 800f202:	f008 f8bf 	bl	8017384 <rmw_get_implementation_identifier>
 800f206:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800f20a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800f20e:	f8c4 9020 	str.w	r9, [r4, #32]
 800f212:	4630      	mov	r0, r6
 800f214:	f7f1 f806 	bl	8000224 <strlen>
 800f218:	1c42      	adds	r2, r0, #1
 800f21a:	2a3c      	cmp	r2, #60	@ 0x3c
 800f21c:	f104 0518 	add.w	r5, r4, #24
 800f220:	d840      	bhi.n	800f2a4 <create_node+0xc4>
 800f222:	4648      	mov	r0, r9
 800f224:	4631      	mov	r1, r6
 800f226:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800f22a:	f00a fd62 	bl	8019cf2 <memcpy>
 800f22e:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800f232:	4638      	mov	r0, r7
 800f234:	f7f0 fff6 	bl	8000224 <strlen>
 800f238:	1c42      	adds	r2, r0, #1
 800f23a:	2a3c      	cmp	r2, #60	@ 0x3c
 800f23c:	d832      	bhi.n	800f2a4 <create_node+0xc4>
 800f23e:	4639      	mov	r1, r7
 800f240:	4648      	mov	r0, r9
 800f242:	f00a fd56 	bl	8019cf2 <memcpy>
 800f246:	6923      	ldr	r3, [r4, #16]
 800f248:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f24c:	2101      	movs	r1, #1
 800f24e:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800f252:	1842      	adds	r2, r0, r1
 800f254:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800f258:	f002 f824 	bl	80112a4 <uxr_object_id>
 800f25c:	6160      	str	r0, [r4, #20]
 800f25e:	783b      	ldrb	r3, [r7, #0]
 800f260:	2b2f      	cmp	r3, #47	@ 0x2f
 800f262:	d127      	bne.n	800f2b4 <create_node+0xd4>
 800f264:	787b      	ldrb	r3, [r7, #1]
 800f266:	bb2b      	cbnz	r3, 800f2b4 <create_node+0xd4>
 800f268:	4a17      	ldr	r2, [pc, #92]	@ (800f2c8 <create_node+0xe8>)
 800f26a:	4818      	ldr	r0, [pc, #96]	@ (800f2cc <create_node+0xec>)
 800f26c:	4633      	mov	r3, r6
 800f26e:	213c      	movs	r1, #60	@ 0x3c
 800f270:	f00a faa4 	bl	80197bc <sniprintf>
 800f274:	6920      	ldr	r0, [r4, #16]
 800f276:	4915      	ldr	r1, [pc, #84]	@ (800f2cc <create_node+0xec>)
 800f278:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800f27c:	9100      	str	r1, [sp, #0]
 800f27e:	2106      	movs	r1, #6
 800f280:	9101      	str	r1, [sp, #4]
 800f282:	6811      	ldr	r1, [r2, #0]
 800f284:	6962      	ldr	r2, [r4, #20]
 800f286:	fa1f f388 	uxth.w	r3, r8
 800f28a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f28e:	f001 fd91 	bl	8010db4 <uxr_buffer_create_participant_bin>
 800f292:	4602      	mov	r2, r0
 800f294:	6920      	ldr	r0, [r4, #16]
 800f296:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800f29a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800f29e:	f000 ff49 	bl	8010134 <run_xrce_session>
 800f2a2:	b918      	cbnz	r0, 800f2ac <create_node+0xcc>
 800f2a4:	4628      	mov	r0, r5
 800f2a6:	f000 fdd3 	bl	800fe50 <rmw_uxrce_fini_node_memory>
 800f2aa:	2500      	movs	r5, #0
 800f2ac:	4628      	mov	r0, r5
 800f2ae:	b003      	add	sp, #12
 800f2b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2b4:	4a06      	ldr	r2, [pc, #24]	@ (800f2d0 <create_node+0xf0>)
 800f2b6:	9600      	str	r6, [sp, #0]
 800f2b8:	463b      	mov	r3, r7
 800f2ba:	213c      	movs	r1, #60	@ 0x3c
 800f2bc:	4803      	ldr	r0, [pc, #12]	@ (800f2cc <create_node+0xec>)
 800f2be:	f00a fa7d 	bl	80197bc <sniprintf>
 800f2c2:	e7d7      	b.n	800f274 <create_node+0x94>
 800f2c4:	2001193c 	.word	0x2001193c
 800f2c8:	0801b04c 	.word	0x0801b04c
 800f2cc:	2000d030 	.word	0x2000d030
 800f2d0:	0801ad14 	.word	0x0801ad14

0800f2d4 <rmw_create_node>:
 800f2d4:	b199      	cbz	r1, 800f2fe <rmw_create_node+0x2a>
 800f2d6:	780b      	ldrb	r3, [r1, #0]
 800f2d8:	468c      	mov	ip, r1
 800f2da:	b183      	cbz	r3, 800f2fe <rmw_create_node+0x2a>
 800f2dc:	b410      	push	{r4}
 800f2de:	4614      	mov	r4, r2
 800f2e0:	b14a      	cbz	r2, 800f2f6 <rmw_create_node+0x22>
 800f2e2:	7813      	ldrb	r3, [r2, #0]
 800f2e4:	b13b      	cbz	r3, 800f2f6 <rmw_create_node+0x22>
 800f2e6:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800f2e8:	4603      	mov	r3, r0
 800f2ea:	4621      	mov	r1, r4
 800f2ec:	4660      	mov	r0, ip
 800f2ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f2f2:	f7ff bf75 	b.w	800f1e0 <create_node>
 800f2f6:	2000      	movs	r0, #0
 800f2f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f2fc:	4770      	bx	lr
 800f2fe:	2000      	movs	r0, #0
 800f300:	4770      	bx	lr
 800f302:	bf00      	nop

0800f304 <rmw_destroy_node>:
 800f304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f306:	b328      	cbz	r0, 800f354 <rmw_destroy_node+0x50>
 800f308:	4607      	mov	r7, r0
 800f30a:	6800      	ldr	r0, [r0, #0]
 800f30c:	b120      	cbz	r0, 800f318 <rmw_destroy_node+0x14>
 800f30e:	4b36      	ldr	r3, [pc, #216]	@ (800f3e8 <rmw_destroy_node+0xe4>)
 800f310:	6819      	ldr	r1, [r3, #0]
 800f312:	f7f0 ff7d 	bl	8000210 <strcmp>
 800f316:	b9e8      	cbnz	r0, 800f354 <rmw_destroy_node+0x50>
 800f318:	687d      	ldr	r5, [r7, #4]
 800f31a:	b1dd      	cbz	r5, 800f354 <rmw_destroy_node+0x50>
 800f31c:	4b33      	ldr	r3, [pc, #204]	@ (800f3ec <rmw_destroy_node+0xe8>)
 800f31e:	681c      	ldr	r4, [r3, #0]
 800f320:	2c00      	cmp	r4, #0
 800f322:	d05f      	beq.n	800f3e4 <rmw_destroy_node+0xe0>
 800f324:	2600      	movs	r6, #0
 800f326:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800f32a:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800f32e:	429d      	cmp	r5, r3
 800f330:	d013      	beq.n	800f35a <rmw_destroy_node+0x56>
 800f332:	2c00      	cmp	r4, #0
 800f334:	d1f7      	bne.n	800f326 <rmw_destroy_node+0x22>
 800f336:	4b2e      	ldr	r3, [pc, #184]	@ (800f3f0 <rmw_destroy_node+0xec>)
 800f338:	681c      	ldr	r4, [r3, #0]
 800f33a:	b1c4      	cbz	r4, 800f36e <rmw_destroy_node+0x6a>
 800f33c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800f340:	6a0b      	ldr	r3, [r1, #32]
 800f342:	429d      	cmp	r5, r3
 800f344:	d1f9      	bne.n	800f33a <rmw_destroy_node+0x36>
 800f346:	317c      	adds	r1, #124	@ 0x7c
 800f348:	4638      	mov	r0, r7
 800f34a:	f000 fb37 	bl	800f9bc <rmw_destroy_subscription>
 800f34e:	2801      	cmp	r0, #1
 800f350:	4606      	mov	r6, r0
 800f352:	d1f2      	bne.n	800f33a <rmw_destroy_node+0x36>
 800f354:	2601      	movs	r6, #1
 800f356:	4630      	mov	r0, r6
 800f358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f35a:	3184      	adds	r1, #132	@ 0x84
 800f35c:	4638      	mov	r0, r7
 800f35e:	f000 f9a5 	bl	800f6ac <rmw_destroy_publisher>
 800f362:	2801      	cmp	r0, #1
 800f364:	4606      	mov	r6, r0
 800f366:	d0f5      	beq.n	800f354 <rmw_destroy_node+0x50>
 800f368:	2c00      	cmp	r4, #0
 800f36a:	d1dc      	bne.n	800f326 <rmw_destroy_node+0x22>
 800f36c:	e7e3      	b.n	800f336 <rmw_destroy_node+0x32>
 800f36e:	4b21      	ldr	r3, [pc, #132]	@ (800f3f4 <rmw_destroy_node+0xf0>)
 800f370:	681c      	ldr	r4, [r3, #0]
 800f372:	b16c      	cbz	r4, 800f390 <rmw_destroy_node+0x8c>
 800f374:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800f378:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800f37a:	429d      	cmp	r5, r3
 800f37c:	d1f9      	bne.n	800f372 <rmw_destroy_node+0x6e>
 800f37e:	317c      	adds	r1, #124	@ 0x7c
 800f380:	4638      	mov	r0, r7
 800f382:	f000 f9e5 	bl	800f750 <rmw_destroy_service>
 800f386:	2801      	cmp	r0, #1
 800f388:	4606      	mov	r6, r0
 800f38a:	d0e3      	beq.n	800f354 <rmw_destroy_node+0x50>
 800f38c:	2c00      	cmp	r4, #0
 800f38e:	d1f1      	bne.n	800f374 <rmw_destroy_node+0x70>
 800f390:	4b19      	ldr	r3, [pc, #100]	@ (800f3f8 <rmw_destroy_node+0xf4>)
 800f392:	681c      	ldr	r4, [r3, #0]
 800f394:	b16c      	cbz	r4, 800f3b2 <rmw_destroy_node+0xae>
 800f396:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800f39a:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800f39c:	429d      	cmp	r5, r3
 800f39e:	d1f9      	bne.n	800f394 <rmw_destroy_node+0x90>
 800f3a0:	317c      	adds	r1, #124	@ 0x7c
 800f3a2:	4638      	mov	r0, r7
 800f3a4:	f007 ffaa 	bl	80172fc <rmw_destroy_client>
 800f3a8:	2801      	cmp	r0, #1
 800f3aa:	4606      	mov	r6, r0
 800f3ac:	d0d2      	beq.n	800f354 <rmw_destroy_node+0x50>
 800f3ae:	2c00      	cmp	r4, #0
 800f3b0:	d1f1      	bne.n	800f396 <rmw_destroy_node+0x92>
 800f3b2:	6928      	ldr	r0, [r5, #16]
 800f3b4:	696a      	ldr	r2, [r5, #20]
 800f3b6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f3ba:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f3be:	6819      	ldr	r1, [r3, #0]
 800f3c0:	f001 fcac 	bl	8010d1c <uxr_buffer_delete_entity>
 800f3c4:	4602      	mov	r2, r0
 800f3c6:	6928      	ldr	r0, [r5, #16]
 800f3c8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f3cc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f3d0:	f000 feb0 	bl	8010134 <run_xrce_session>
 800f3d4:	2800      	cmp	r0, #0
 800f3d6:	bf08      	it	eq
 800f3d8:	2602      	moveq	r6, #2
 800f3da:	4638      	mov	r0, r7
 800f3dc:	f000 fd38 	bl	800fe50 <rmw_uxrce_fini_node_memory>
 800f3e0:	4630      	mov	r0, r6
 800f3e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3e4:	4626      	mov	r6, r4
 800f3e6:	e7a6      	b.n	800f336 <rmw_destroy_node+0x32>
 800f3e8:	0801b9e8 	.word	0x0801b9e8
 800f3ec:	2001194c 	.word	0x2001194c
 800f3f0:	2001198c 	.word	0x2001198c
 800f3f4:	2001195c 	.word	0x2001195c
 800f3f8:	2000d06c 	.word	0x2000d06c

0800f3fc <rmw_node_get_graph_guard_condition>:
 800f3fc:	6843      	ldr	r3, [r0, #4]
 800f3fe:	6918      	ldr	r0, [r3, #16]
 800f400:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800f404:	4770      	bx	lr
 800f406:	bf00      	nop

0800f408 <flush_session>:
 800f408:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800f40a:	f002 be8d 	b.w	8012128 <uxr_run_session_until_confirm_delivery>
 800f40e:	bf00      	nop

0800f410 <rmw_publish>:
 800f410:	2800      	cmp	r0, #0
 800f412:	d053      	beq.n	800f4bc <rmw_publish+0xac>
 800f414:	b570      	push	{r4, r5, r6, lr}
 800f416:	460d      	mov	r5, r1
 800f418:	b08e      	sub	sp, #56	@ 0x38
 800f41a:	2900      	cmp	r1, #0
 800f41c:	d04b      	beq.n	800f4b6 <rmw_publish+0xa6>
 800f41e:	4604      	mov	r4, r0
 800f420:	6800      	ldr	r0, [r0, #0]
 800f422:	f000 ff07 	bl	8010234 <is_uxrce_rmw_identifier_valid>
 800f426:	2800      	cmp	r0, #0
 800f428:	d045      	beq.n	800f4b6 <rmw_publish+0xa6>
 800f42a:	6866      	ldr	r6, [r4, #4]
 800f42c:	2e00      	cmp	r6, #0
 800f42e:	d042      	beq.n	800f4b6 <rmw_publish+0xa6>
 800f430:	69b4      	ldr	r4, [r6, #24]
 800f432:	4628      	mov	r0, r5
 800f434:	6923      	ldr	r3, [r4, #16]
 800f436:	4798      	blx	r3
 800f438:	69f3      	ldr	r3, [r6, #28]
 800f43a:	9005      	str	r0, [sp, #20]
 800f43c:	b113      	cbz	r3, 800f444 <rmw_publish+0x34>
 800f43e:	a805      	add	r0, sp, #20
 800f440:	4798      	blx	r3
 800f442:	9805      	ldr	r0, [sp, #20]
 800f444:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800f448:	691b      	ldr	r3, [r3, #16]
 800f44a:	9000      	str	r0, [sp, #0]
 800f44c:	6972      	ldr	r2, [r6, #20]
 800f44e:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800f450:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800f454:	ab06      	add	r3, sp, #24
 800f456:	f004 f90f 	bl	8013678 <uxr_prepare_output_stream>
 800f45a:	b1d8      	cbz	r0, 800f494 <rmw_publish+0x84>
 800f45c:	68a3      	ldr	r3, [r4, #8]
 800f45e:	a906      	add	r1, sp, #24
 800f460:	4628      	mov	r0, r5
 800f462:	4798      	blx	r3
 800f464:	6a33      	ldr	r3, [r6, #32]
 800f466:	4604      	mov	r4, r0
 800f468:	b10b      	cbz	r3, 800f46e <rmw_publish+0x5e>
 800f46a:	a806      	add	r0, sp, #24
 800f46c:	4798      	blx	r3
 800f46e:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800f472:	2b01      	cmp	r3, #1
 800f474:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800f478:	d022      	beq.n	800f4c0 <rmw_publish+0xb0>
 800f47a:	6918      	ldr	r0, [r3, #16]
 800f47c:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800f47e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f482:	f002 fe51 	bl	8012128 <uxr_run_session_until_confirm_delivery>
 800f486:	4020      	ands	r0, r4
 800f488:	b2c4      	uxtb	r4, r0
 800f48a:	f084 0001 	eor.w	r0, r4, #1
 800f48e:	b2c0      	uxtb	r0, r0
 800f490:	b00e      	add	sp, #56	@ 0x38
 800f492:	bd70      	pop	{r4, r5, r6, pc}
 800f494:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800f498:	6918      	ldr	r0, [r3, #16]
 800f49a:	9b05      	ldr	r3, [sp, #20]
 800f49c:	9300      	str	r3, [sp, #0]
 800f49e:	4b0b      	ldr	r3, [pc, #44]	@ (800f4cc <rmw_publish+0xbc>)
 800f4a0:	9301      	str	r3, [sp, #4]
 800f4a2:	9602      	str	r6, [sp, #8]
 800f4a4:	6972      	ldr	r2, [r6, #20]
 800f4a6:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800f4a8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f4ac:	ab06      	add	r3, sp, #24
 800f4ae:	f004 f913 	bl	80136d8 <uxr_prepare_output_stream_fragmented>
 800f4b2:	2800      	cmp	r0, #0
 800f4b4:	d1d2      	bne.n	800f45c <rmw_publish+0x4c>
 800f4b6:	2001      	movs	r0, #1
 800f4b8:	b00e      	add	sp, #56	@ 0x38
 800f4ba:	bd70      	pop	{r4, r5, r6, pc}
 800f4bc:	2001      	movs	r0, #1
 800f4be:	4770      	bx	lr
 800f4c0:	6918      	ldr	r0, [r3, #16]
 800f4c2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f4c6:	f002 fa6f 	bl	80119a8 <uxr_flash_output_streams>
 800f4ca:	e7de      	b.n	800f48a <rmw_publish+0x7a>
 800f4cc:	0800f409 	.word	0x0800f409

0800f4d0 <rmw_create_publisher>:
 800f4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4d4:	b087      	sub	sp, #28
 800f4d6:	2800      	cmp	r0, #0
 800f4d8:	f000 80cc 	beq.w	800f674 <rmw_create_publisher+0x1a4>
 800f4dc:	460e      	mov	r6, r1
 800f4de:	2900      	cmp	r1, #0
 800f4e0:	f000 80c8 	beq.w	800f674 <rmw_create_publisher+0x1a4>
 800f4e4:	4604      	mov	r4, r0
 800f4e6:	6800      	ldr	r0, [r0, #0]
 800f4e8:	4615      	mov	r5, r2
 800f4ea:	4698      	mov	r8, r3
 800f4ec:	f000 fea2 	bl	8010234 <is_uxrce_rmw_identifier_valid>
 800f4f0:	2800      	cmp	r0, #0
 800f4f2:	f000 80bf 	beq.w	800f674 <rmw_create_publisher+0x1a4>
 800f4f6:	2d00      	cmp	r5, #0
 800f4f8:	f000 80bc 	beq.w	800f674 <rmw_create_publisher+0x1a4>
 800f4fc:	782b      	ldrb	r3, [r5, #0]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	f000 80b8 	beq.w	800f674 <rmw_create_publisher+0x1a4>
 800f504:	f1b8 0f00 	cmp.w	r8, #0
 800f508:	f000 80b4 	beq.w	800f674 <rmw_create_publisher+0x1a4>
 800f50c:	485c      	ldr	r0, [pc, #368]	@ (800f680 <rmw_create_publisher+0x1b0>)
 800f50e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800f512:	f007 fecf 	bl	80172b4 <get_memory>
 800f516:	2800      	cmp	r0, #0
 800f518:	f000 80ac 	beq.w	800f674 <rmw_create_publisher+0x1a4>
 800f51c:	6884      	ldr	r4, [r0, #8]
 800f51e:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800f522:	f007 ff2f 	bl	8017384 <rmw_get_implementation_identifier>
 800f526:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800f52a:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800f52e:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800f532:	4628      	mov	r0, r5
 800f534:	f7f0 fe76 	bl	8000224 <strlen>
 800f538:	3001      	adds	r0, #1
 800f53a:	283c      	cmp	r0, #60	@ 0x3c
 800f53c:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800f540:	f200 8091 	bhi.w	800f666 <rmw_create_publisher+0x196>
 800f544:	4a4f      	ldr	r2, [pc, #316]	@ (800f684 <rmw_create_publisher+0x1b4>)
 800f546:	462b      	mov	r3, r5
 800f548:	213c      	movs	r1, #60	@ 0x3c
 800f54a:	4650      	mov	r0, sl
 800f54c:	f00a f936 	bl	80197bc <sniprintf>
 800f550:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f554:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800f556:	4641      	mov	r1, r8
 800f558:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800f55c:	2250      	movs	r2, #80	@ 0x50
 800f55e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800f562:	f00a fbc6 	bl	8019cf2 <memcpy>
 800f566:	f898 3008 	ldrb.w	r3, [r8, #8]
 800f56a:	4947      	ldr	r1, [pc, #284]	@ (800f688 <rmw_create_publisher+0x1b8>)
 800f56c:	2b02      	cmp	r3, #2
 800f56e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f572:	bf0c      	ite	eq
 800f574:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800f578:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800f57c:	67a3      	str	r3, [r4, #120]	@ 0x78
 800f57e:	2300      	movs	r3, #0
 800f580:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800f584:	4630      	mov	r0, r6
 800f586:	f000 fe63 	bl	8010250 <get_message_typesupport_handle>
 800f58a:	2800      	cmp	r0, #0
 800f58c:	d06b      	beq.n	800f666 <rmw_create_publisher+0x196>
 800f58e:	6842      	ldr	r2, [r0, #4]
 800f590:	61a2      	str	r2, [r4, #24]
 800f592:	2a00      	cmp	r2, #0
 800f594:	d067      	beq.n	800f666 <rmw_create_publisher+0x196>
 800f596:	4629      	mov	r1, r5
 800f598:	4643      	mov	r3, r8
 800f59a:	4648      	mov	r0, r9
 800f59c:	f007 ff20 	bl	80173e0 <create_topic>
 800f5a0:	6260      	str	r0, [r4, #36]	@ 0x24
 800f5a2:	2800      	cmp	r0, #0
 800f5a4:	d063      	beq.n	800f66e <rmw_create_publisher+0x19e>
 800f5a6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f5aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f5ae:	2103      	movs	r1, #3
 800f5b0:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800f5b4:	1c42      	adds	r2, r0, #1
 800f5b6:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800f5ba:	f001 fe73 	bl	80112a4 <uxr_object_id>
 800f5be:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800f5c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f5c6:	6120      	str	r0, [r4, #16]
 800f5c8:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800f5cc:	6910      	ldr	r0, [r2, #16]
 800f5ce:	2506      	movs	r5, #6
 800f5d0:	9500      	str	r5, [sp, #0]
 800f5d2:	6819      	ldr	r1, [r3, #0]
 800f5d4:	6922      	ldr	r2, [r4, #16]
 800f5d6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f5da:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f5de:	f001 fc51 	bl	8010e84 <uxr_buffer_create_publisher_bin>
 800f5e2:	4602      	mov	r2, r0
 800f5e4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f5e8:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800f5ec:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800f5f0:	f000 fda0 	bl	8010134 <run_xrce_session>
 800f5f4:	b3b8      	cbz	r0, 800f666 <rmw_create_publisher+0x196>
 800f5f6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f5fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f5fe:	2105      	movs	r1, #5
 800f600:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800f604:	1c42      	adds	r2, r0, #1
 800f606:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800f60a:	f001 fe4b 	bl	80112a4 <uxr_object_id>
 800f60e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800f612:	6160      	str	r0, [r4, #20]
 800f614:	691e      	ldr	r6, [r3, #16]
 800f616:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f61a:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800f61e:	f10d 0a10 	add.w	sl, sp, #16
 800f622:	4641      	mov	r1, r8
 800f624:	4650      	mov	r0, sl
 800f626:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800f62a:	f000 fd9f 	bl	801016c <convert_qos_profile>
 800f62e:	9503      	str	r5, [sp, #12]
 800f630:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800f634:	9001      	str	r0, [sp, #4]
 800f636:	f8ad 1008 	strh.w	r1, [sp, #8]
 800f63a:	f8db 3010 	ldr.w	r3, [fp, #16]
 800f63e:	9300      	str	r3, [sp, #0]
 800f640:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800f644:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800f648:	f8d8 1000 	ldr.w	r1, [r8]
 800f64c:	4630      	mov	r0, r6
 800f64e:	f001 fc79 	bl	8010f44 <uxr_buffer_create_datawriter_bin>
 800f652:	4602      	mov	r2, r0
 800f654:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f658:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800f65c:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800f660:	f000 fd68 	bl	8010134 <run_xrce_session>
 800f664:	b938      	cbnz	r0, 800f676 <rmw_create_publisher+0x1a6>
 800f666:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800f668:	b108      	cbz	r0, 800f66e <rmw_create_publisher+0x19e>
 800f66a:	f000 fc61 	bl	800ff30 <rmw_uxrce_fini_topic_memory>
 800f66e:	4638      	mov	r0, r7
 800f670:	f000 fc06 	bl	800fe80 <rmw_uxrce_fini_publisher_memory>
 800f674:	2700      	movs	r7, #0
 800f676:	4638      	mov	r0, r7
 800f678:	b007      	add	sp, #28
 800f67a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f67e:	bf00      	nop
 800f680:	2001194c 	.word	0x2001194c
 800f684:	0801b04c 	.word	0x0801b04c
 800f688:	0801ab80 	.word	0x0801ab80

0800f68c <rmw_publisher_get_actual_qos>:
 800f68c:	b150      	cbz	r0, 800f6a4 <rmw_publisher_get_actual_qos+0x18>
 800f68e:	b508      	push	{r3, lr}
 800f690:	460b      	mov	r3, r1
 800f692:	b149      	cbz	r1, 800f6a8 <rmw_publisher_get_actual_qos+0x1c>
 800f694:	6841      	ldr	r1, [r0, #4]
 800f696:	2250      	movs	r2, #80	@ 0x50
 800f698:	3128      	adds	r1, #40	@ 0x28
 800f69a:	4618      	mov	r0, r3
 800f69c:	f00a fb29 	bl	8019cf2 <memcpy>
 800f6a0:	2000      	movs	r0, #0
 800f6a2:	bd08      	pop	{r3, pc}
 800f6a4:	200b      	movs	r0, #11
 800f6a6:	4770      	bx	lr
 800f6a8:	200b      	movs	r0, #11
 800f6aa:	bd08      	pop	{r3, pc}

0800f6ac <rmw_destroy_publisher>:
 800f6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6ae:	b128      	cbz	r0, 800f6bc <rmw_destroy_publisher+0x10>
 800f6b0:	4604      	mov	r4, r0
 800f6b2:	6800      	ldr	r0, [r0, #0]
 800f6b4:	460d      	mov	r5, r1
 800f6b6:	f000 fdbd 	bl	8010234 <is_uxrce_rmw_identifier_valid>
 800f6ba:	b910      	cbnz	r0, 800f6c2 <rmw_destroy_publisher+0x16>
 800f6bc:	2401      	movs	r4, #1
 800f6be:	4620      	mov	r0, r4
 800f6c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f6c2:	6863      	ldr	r3, [r4, #4]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d0f9      	beq.n	800f6bc <rmw_destroy_publisher+0x10>
 800f6c8:	2d00      	cmp	r5, #0
 800f6ca:	d0f7      	beq.n	800f6bc <rmw_destroy_publisher+0x10>
 800f6cc:	6828      	ldr	r0, [r5, #0]
 800f6ce:	f000 fdb1 	bl	8010234 <is_uxrce_rmw_identifier_valid>
 800f6d2:	2800      	cmp	r0, #0
 800f6d4:	d0f2      	beq.n	800f6bc <rmw_destroy_publisher+0x10>
 800f6d6:	686c      	ldr	r4, [r5, #4]
 800f6d8:	2c00      	cmp	r4, #0
 800f6da:	d0ef      	beq.n	800f6bc <rmw_destroy_publisher+0x10>
 800f6dc:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800f6de:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800f6e2:	f007 fecd 	bl	8017480 <destroy_topic>
 800f6e6:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800f6ea:	6962      	ldr	r2, [r4, #20]
 800f6ec:	6918      	ldr	r0, [r3, #16]
 800f6ee:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f6f2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f6f6:	6819      	ldr	r1, [r3, #0]
 800f6f8:	f001 fb10 	bl	8010d1c <uxr_buffer_delete_entity>
 800f6fc:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800f700:	6922      	ldr	r2, [r4, #16]
 800f702:	691b      	ldr	r3, [r3, #16]
 800f704:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800f708:	4604      	mov	r4, r0
 800f70a:	6809      	ldr	r1, [r1, #0]
 800f70c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800f710:	f001 fb04 	bl	8010d1c <uxr_buffer_delete_entity>
 800f714:	693e      	ldr	r6, [r7, #16]
 800f716:	4622      	mov	r2, r4
 800f718:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800f71c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800f720:	4604      	mov	r4, r0
 800f722:	4630      	mov	r0, r6
 800f724:	f000 fd06 	bl	8010134 <run_xrce_session>
 800f728:	693e      	ldr	r6, [r7, #16]
 800f72a:	4622      	mov	r2, r4
 800f72c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800f730:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800f734:	4604      	mov	r4, r0
 800f736:	4630      	mov	r0, r6
 800f738:	f000 fcfc 	bl	8010134 <run_xrce_session>
 800f73c:	b12c      	cbz	r4, 800f74a <rmw_destroy_publisher+0x9e>
 800f73e:	b120      	cbz	r0, 800f74a <rmw_destroy_publisher+0x9e>
 800f740:	2400      	movs	r4, #0
 800f742:	4628      	mov	r0, r5
 800f744:	f000 fb9c 	bl	800fe80 <rmw_uxrce_fini_publisher_memory>
 800f748:	e7b9      	b.n	800f6be <rmw_destroy_publisher+0x12>
 800f74a:	2402      	movs	r4, #2
 800f74c:	e7f9      	b.n	800f742 <rmw_destroy_publisher+0x96>
 800f74e:	bf00      	nop

0800f750 <rmw_destroy_service>:
 800f750:	b570      	push	{r4, r5, r6, lr}
 800f752:	b128      	cbz	r0, 800f760 <rmw_destroy_service+0x10>
 800f754:	4604      	mov	r4, r0
 800f756:	6800      	ldr	r0, [r0, #0]
 800f758:	460d      	mov	r5, r1
 800f75a:	f000 fd6b 	bl	8010234 <is_uxrce_rmw_identifier_valid>
 800f75e:	b910      	cbnz	r0, 800f766 <rmw_destroy_service+0x16>
 800f760:	2401      	movs	r4, #1
 800f762:	4620      	mov	r0, r4
 800f764:	bd70      	pop	{r4, r5, r6, pc}
 800f766:	6863      	ldr	r3, [r4, #4]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d0f9      	beq.n	800f760 <rmw_destroy_service+0x10>
 800f76c:	2d00      	cmp	r5, #0
 800f76e:	d0f7      	beq.n	800f760 <rmw_destroy_service+0x10>
 800f770:	6828      	ldr	r0, [r5, #0]
 800f772:	f000 fd5f 	bl	8010234 <is_uxrce_rmw_identifier_valid>
 800f776:	2800      	cmp	r0, #0
 800f778:	d0f2      	beq.n	800f760 <rmw_destroy_service+0x10>
 800f77a:	686e      	ldr	r6, [r5, #4]
 800f77c:	2e00      	cmp	r6, #0
 800f77e:	d0ef      	beq.n	800f760 <rmw_destroy_service+0x10>
 800f780:	6864      	ldr	r4, [r4, #4]
 800f782:	6932      	ldr	r2, [r6, #16]
 800f784:	6920      	ldr	r0, [r4, #16]
 800f786:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f78a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f78e:	6819      	ldr	r1, [r3, #0]
 800f790:	f001 fef6 	bl	8011580 <uxr_buffer_cancel_data>
 800f794:	4602      	mov	r2, r0
 800f796:	6920      	ldr	r0, [r4, #16]
 800f798:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f79c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f7a0:	f000 fcc8 	bl	8010134 <run_xrce_session>
 800f7a4:	6920      	ldr	r0, [r4, #16]
 800f7a6:	6932      	ldr	r2, [r6, #16]
 800f7a8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f7ac:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f7b0:	6819      	ldr	r1, [r3, #0]
 800f7b2:	f001 fab3 	bl	8010d1c <uxr_buffer_delete_entity>
 800f7b6:	4602      	mov	r2, r0
 800f7b8:	6920      	ldr	r0, [r4, #16]
 800f7ba:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f7be:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f7c2:	f000 fcb7 	bl	8010134 <run_xrce_session>
 800f7c6:	2800      	cmp	r0, #0
 800f7c8:	4628      	mov	r0, r5
 800f7ca:	bf14      	ite	ne
 800f7cc:	2400      	movne	r4, #0
 800f7ce:	2402      	moveq	r4, #2
 800f7d0:	f000 fb82 	bl	800fed8 <rmw_uxrce_fini_service_memory>
 800f7d4:	e7c5      	b.n	800f762 <rmw_destroy_service+0x12>
 800f7d6:	bf00      	nop

0800f7d8 <rmw_create_subscription>:
 800f7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7dc:	b08d      	sub	sp, #52	@ 0x34
 800f7de:	2800      	cmp	r0, #0
 800f7e0:	f000 80d1 	beq.w	800f986 <rmw_create_subscription+0x1ae>
 800f7e4:	460e      	mov	r6, r1
 800f7e6:	2900      	cmp	r1, #0
 800f7e8:	f000 80cd 	beq.w	800f986 <rmw_create_subscription+0x1ae>
 800f7ec:	4604      	mov	r4, r0
 800f7ee:	6800      	ldr	r0, [r0, #0]
 800f7f0:	4615      	mov	r5, r2
 800f7f2:	4698      	mov	r8, r3
 800f7f4:	f000 fd1e 	bl	8010234 <is_uxrce_rmw_identifier_valid>
 800f7f8:	2800      	cmp	r0, #0
 800f7fa:	f000 80c4 	beq.w	800f986 <rmw_create_subscription+0x1ae>
 800f7fe:	2d00      	cmp	r5, #0
 800f800:	f000 80c1 	beq.w	800f986 <rmw_create_subscription+0x1ae>
 800f804:	782b      	ldrb	r3, [r5, #0]
 800f806:	2b00      	cmp	r3, #0
 800f808:	f000 80bd 	beq.w	800f986 <rmw_create_subscription+0x1ae>
 800f80c:	f1b8 0f00 	cmp.w	r8, #0
 800f810:	f000 80b9 	beq.w	800f986 <rmw_create_subscription+0x1ae>
 800f814:	485e      	ldr	r0, [pc, #376]	@ (800f990 <rmw_create_subscription+0x1b8>)
 800f816:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800f81a:	f007 fd4b 	bl	80172b4 <get_memory>
 800f81e:	4604      	mov	r4, r0
 800f820:	2800      	cmp	r0, #0
 800f822:	f000 80b1 	beq.w	800f988 <rmw_create_subscription+0x1b0>
 800f826:	6887      	ldr	r7, [r0, #8]
 800f828:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800f82c:	f007 fdaa 	bl	8017384 <rmw_get_implementation_identifier>
 800f830:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 800f834:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800f836:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800f83a:	4628      	mov	r0, r5
 800f83c:	f7f0 fcf2 	bl	8000224 <strlen>
 800f840:	3001      	adds	r0, #1
 800f842:	283c      	cmp	r0, #60	@ 0x3c
 800f844:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 800f848:	f200 8096 	bhi.w	800f978 <rmw_create_subscription+0x1a0>
 800f84c:	4a51      	ldr	r2, [pc, #324]	@ (800f994 <rmw_create_subscription+0x1bc>)
 800f84e:	462b      	mov	r3, r5
 800f850:	213c      	movs	r1, #60	@ 0x3c
 800f852:	4650      	mov	r0, sl
 800f854:	f009 ffb2 	bl	80197bc <sniprintf>
 800f858:	4641      	mov	r1, r8
 800f85a:	f8c7 9020 	str.w	r9, [r7, #32]
 800f85e:	2250      	movs	r2, #80	@ 0x50
 800f860:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800f864:	f00a fa45 	bl	8019cf2 <memcpy>
 800f868:	494b      	ldr	r1, [pc, #300]	@ (800f998 <rmw_create_subscription+0x1c0>)
 800f86a:	4630      	mov	r0, r6
 800f86c:	f000 fcf0 	bl	8010250 <get_message_typesupport_handle>
 800f870:	2800      	cmp	r0, #0
 800f872:	f000 8081 	beq.w	800f978 <rmw_create_subscription+0x1a0>
 800f876:	6842      	ldr	r2, [r0, #4]
 800f878:	61ba      	str	r2, [r7, #24]
 800f87a:	2a00      	cmp	r2, #0
 800f87c:	d07c      	beq.n	800f978 <rmw_create_subscription+0x1a0>
 800f87e:	4629      	mov	r1, r5
 800f880:	4643      	mov	r3, r8
 800f882:	4648      	mov	r0, r9
 800f884:	f007 fdac 	bl	80173e0 <create_topic>
 800f888:	61f8      	str	r0, [r7, #28]
 800f88a:	2800      	cmp	r0, #0
 800f88c:	d078      	beq.n	800f980 <rmw_create_subscription+0x1a8>
 800f88e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f892:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f896:	2104      	movs	r1, #4
 800f898:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 800f89c:	1c42      	adds	r2, r0, #1
 800f89e:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 800f8a2:	f001 fcff 	bl	80112a4 <uxr_object_id>
 800f8a6:	6138      	str	r0, [r7, #16]
 800f8a8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f8ac:	2506      	movs	r5, #6
 800f8ae:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 800f8b2:	9500      	str	r5, [sp, #0]
 800f8b4:	6819      	ldr	r1, [r3, #0]
 800f8b6:	693a      	ldr	r2, [r7, #16]
 800f8b8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f8bc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f8c0:	f001 fb10 	bl	8010ee4 <uxr_buffer_create_subscriber_bin>
 800f8c4:	4602      	mov	r2, r0
 800f8c6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f8ca:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800f8ce:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800f8d2:	f000 fc2f 	bl	8010134 <run_xrce_session>
 800f8d6:	2800      	cmp	r0, #0
 800f8d8:	d04e      	beq.n	800f978 <rmw_create_subscription+0x1a0>
 800f8da:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f8de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f8e2:	4629      	mov	r1, r5
 800f8e4:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 800f8e8:	1c42      	adds	r2, r0, #1
 800f8ea:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 800f8ee:	f001 fcd9 	bl	80112a4 <uxr_object_id>
 800f8f2:	ae08      	add	r6, sp, #32
 800f8f4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f8f8:	69fb      	ldr	r3, [r7, #28]
 800f8fa:	6178      	str	r0, [r7, #20]
 800f8fc:	4641      	mov	r1, r8
 800f8fe:	4630      	mov	r0, r6
 800f900:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 800f904:	9305      	str	r3, [sp, #20]
 800f906:	f000 fc31 	bl	801016c <convert_qos_profile>
 800f90a:	9503      	str	r5, [sp, #12]
 800f90c:	e896 0003 	ldmia.w	r6, {r0, r1}
 800f910:	9b05      	ldr	r3, [sp, #20]
 800f912:	9001      	str	r0, [sp, #4]
 800f914:	f8ad 1008 	strh.w	r1, [sp, #8]
 800f918:	691b      	ldr	r3, [r3, #16]
 800f91a:	9300      	str	r3, [sp, #0]
 800f91c:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800f920:	f8db 1000 	ldr.w	r1, [fp]
 800f924:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 800f928:	f001 fb82 	bl	8011030 <uxr_buffer_create_datareader_bin>
 800f92c:	4602      	mov	r2, r0
 800f92e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f932:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800f936:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800f93a:	f000 fbfb 	bl	8010134 <run_xrce_session>
 800f93e:	b1d8      	cbz	r0, 800f978 <rmw_create_subscription+0x1a0>
 800f940:	f898 3008 	ldrb.w	r3, [r8, #8]
 800f944:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f948:	2b02      	cmp	r3, #2
 800f94a:	bf0c      	ite	eq
 800f94c:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 800f950:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 800f954:	9307      	str	r3, [sp, #28]
 800f956:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800f95a:	2200      	movs	r2, #0
 800f95c:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 800f960:	ab0a      	add	r3, sp, #40	@ 0x28
 800f962:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800f966:	9300      	str	r3, [sp, #0]
 800f968:	697a      	ldr	r2, [r7, #20]
 800f96a:	9b07      	ldr	r3, [sp, #28]
 800f96c:	6809      	ldr	r1, [r1, #0]
 800f96e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f972:	f001 fdcb 	bl	801150c <uxr_buffer_request_data>
 800f976:	e007      	b.n	800f988 <rmw_create_subscription+0x1b0>
 800f978:	69f8      	ldr	r0, [r7, #28]
 800f97a:	b108      	cbz	r0, 800f980 <rmw_create_subscription+0x1a8>
 800f97c:	f000 fad8 	bl	800ff30 <rmw_uxrce_fini_topic_memory>
 800f980:	4620      	mov	r0, r4
 800f982:	f000 fa93 	bl	800feac <rmw_uxrce_fini_subscription_memory>
 800f986:	2400      	movs	r4, #0
 800f988:	4620      	mov	r0, r4
 800f98a:	b00d      	add	sp, #52	@ 0x34
 800f98c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f990:	2001198c 	.word	0x2001198c
 800f994:	0801b04c 	.word	0x0801b04c
 800f998:	0801ab80 	.word	0x0801ab80

0800f99c <rmw_subscription_get_actual_qos>:
 800f99c:	b150      	cbz	r0, 800f9b4 <rmw_subscription_get_actual_qos+0x18>
 800f99e:	b508      	push	{r3, lr}
 800f9a0:	460b      	mov	r3, r1
 800f9a2:	b149      	cbz	r1, 800f9b8 <rmw_subscription_get_actual_qos+0x1c>
 800f9a4:	6841      	ldr	r1, [r0, #4]
 800f9a6:	2250      	movs	r2, #80	@ 0x50
 800f9a8:	3128      	adds	r1, #40	@ 0x28
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	f00a f9a1 	bl	8019cf2 <memcpy>
 800f9b0:	2000      	movs	r0, #0
 800f9b2:	bd08      	pop	{r3, pc}
 800f9b4:	200b      	movs	r0, #11
 800f9b6:	4770      	bx	lr
 800f9b8:	200b      	movs	r0, #11
 800f9ba:	bd08      	pop	{r3, pc}

0800f9bc <rmw_destroy_subscription>:
 800f9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9be:	b128      	cbz	r0, 800f9cc <rmw_destroy_subscription+0x10>
 800f9c0:	4604      	mov	r4, r0
 800f9c2:	6800      	ldr	r0, [r0, #0]
 800f9c4:	460d      	mov	r5, r1
 800f9c6:	f000 fc35 	bl	8010234 <is_uxrce_rmw_identifier_valid>
 800f9ca:	b910      	cbnz	r0, 800f9d2 <rmw_destroy_subscription+0x16>
 800f9cc:	2401      	movs	r4, #1
 800f9ce:	4620      	mov	r0, r4
 800f9d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9d2:	6863      	ldr	r3, [r4, #4]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d0f9      	beq.n	800f9cc <rmw_destroy_subscription+0x10>
 800f9d8:	2d00      	cmp	r5, #0
 800f9da:	d0f7      	beq.n	800f9cc <rmw_destroy_subscription+0x10>
 800f9dc:	6828      	ldr	r0, [r5, #0]
 800f9de:	f000 fc29 	bl	8010234 <is_uxrce_rmw_identifier_valid>
 800f9e2:	2800      	cmp	r0, #0
 800f9e4:	d0f2      	beq.n	800f9cc <rmw_destroy_subscription+0x10>
 800f9e6:	686c      	ldr	r4, [r5, #4]
 800f9e8:	2c00      	cmp	r4, #0
 800f9ea:	d0ef      	beq.n	800f9cc <rmw_destroy_subscription+0x10>
 800f9ec:	6a26      	ldr	r6, [r4, #32]
 800f9ee:	6962      	ldr	r2, [r4, #20]
 800f9f0:	6930      	ldr	r0, [r6, #16]
 800f9f2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f9f6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f9fa:	6819      	ldr	r1, [r3, #0]
 800f9fc:	f001 fdc0 	bl	8011580 <uxr_buffer_cancel_data>
 800fa00:	4602      	mov	r2, r0
 800fa02:	6930      	ldr	r0, [r6, #16]
 800fa04:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fa08:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fa0c:	f000 fb92 	bl	8010134 <run_xrce_session>
 800fa10:	69e0      	ldr	r0, [r4, #28]
 800fa12:	f007 fd35 	bl	8017480 <destroy_topic>
 800fa16:	6a23      	ldr	r3, [r4, #32]
 800fa18:	6962      	ldr	r2, [r4, #20]
 800fa1a:	6918      	ldr	r0, [r3, #16]
 800fa1c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800fa20:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fa24:	6819      	ldr	r1, [r3, #0]
 800fa26:	f001 f979 	bl	8010d1c <uxr_buffer_delete_entity>
 800fa2a:	6a23      	ldr	r3, [r4, #32]
 800fa2c:	6922      	ldr	r2, [r4, #16]
 800fa2e:	691b      	ldr	r3, [r3, #16]
 800fa30:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800fa34:	4604      	mov	r4, r0
 800fa36:	6809      	ldr	r1, [r1, #0]
 800fa38:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800fa3c:	f001 f96e 	bl	8010d1c <uxr_buffer_delete_entity>
 800fa40:	6937      	ldr	r7, [r6, #16]
 800fa42:	4622      	mov	r2, r4
 800fa44:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800fa48:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800fa4c:	4604      	mov	r4, r0
 800fa4e:	4638      	mov	r0, r7
 800fa50:	f000 fb70 	bl	8010134 <run_xrce_session>
 800fa54:	6936      	ldr	r6, [r6, #16]
 800fa56:	4622      	mov	r2, r4
 800fa58:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800fa5c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800fa60:	4604      	mov	r4, r0
 800fa62:	4630      	mov	r0, r6
 800fa64:	f000 fb66 	bl	8010134 <run_xrce_session>
 800fa68:	b12c      	cbz	r4, 800fa76 <rmw_destroy_subscription+0xba>
 800fa6a:	b120      	cbz	r0, 800fa76 <rmw_destroy_subscription+0xba>
 800fa6c:	2400      	movs	r4, #0
 800fa6e:	4628      	mov	r0, r5
 800fa70:	f000 fa1c 	bl	800feac <rmw_uxrce_fini_subscription_memory>
 800fa74:	e7ab      	b.n	800f9ce <rmw_destroy_subscription+0x12>
 800fa76:	2402      	movs	r4, #2
 800fa78:	e7f9      	b.n	800fa6e <rmw_destroy_subscription+0xb2>
 800fa7a:	bf00      	nop

0800fa7c <rmw_take_with_info>:
 800fa7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa7e:	4604      	mov	r4, r0
 800fa80:	6800      	ldr	r0, [r0, #0]
 800fa82:	b089      	sub	sp, #36	@ 0x24
 800fa84:	460f      	mov	r7, r1
 800fa86:	4615      	mov	r5, r2
 800fa88:	b128      	cbz	r0, 800fa96 <rmw_take_with_info+0x1a>
 800fa8a:	4b24      	ldr	r3, [pc, #144]	@ (800fb1c <rmw_take_with_info+0xa0>)
 800fa8c:	6819      	ldr	r1, [r3, #0]
 800fa8e:	f7f0 fbbf 	bl	8000210 <strcmp>
 800fa92:	2800      	cmp	r0, #0
 800fa94:	d13e      	bne.n	800fb14 <rmw_take_with_info+0x98>
 800fa96:	b305      	cbz	r5, 800fada <rmw_take_with_info+0x5e>
 800fa98:	6864      	ldr	r4, [r4, #4]
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	702b      	strb	r3, [r5, #0]
 800fa9e:	f000 facb 	bl	8010038 <rmw_uxrce_clean_expired_static_input_buffer>
 800faa2:	4620      	mov	r0, r4
 800faa4:	f000 faa0 	bl	800ffe8 <rmw_uxrce_find_static_input_buffer_by_owner>
 800faa8:	4606      	mov	r6, r0
 800faaa:	b1f0      	cbz	r0, 800faea <rmw_take_with_info+0x6e>
 800faac:	6881      	ldr	r1, [r0, #8]
 800faae:	4668      	mov	r0, sp
 800fab0:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 800fab4:	3110      	adds	r1, #16
 800fab6:	f7fc fa89 	bl	800bfcc <ucdr_init_buffer>
 800faba:	69a3      	ldr	r3, [r4, #24]
 800fabc:	4639      	mov	r1, r7
 800fabe:	68db      	ldr	r3, [r3, #12]
 800fac0:	4668      	mov	r0, sp
 800fac2:	4798      	blx	r3
 800fac4:	4631      	mov	r1, r6
 800fac6:	4604      	mov	r4, r0
 800fac8:	4815      	ldr	r0, [pc, #84]	@ (800fb20 <rmw_take_with_info+0xa4>)
 800faca:	f007 fc03 	bl	80172d4 <put_memory>
 800face:	702c      	strb	r4, [r5, #0]
 800fad0:	f084 0001 	eor.w	r0, r4, #1
 800fad4:	b2c0      	uxtb	r0, r0
 800fad6:	b009      	add	sp, #36	@ 0x24
 800fad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fada:	6864      	ldr	r4, [r4, #4]
 800fadc:	f000 faac 	bl	8010038 <rmw_uxrce_clean_expired_static_input_buffer>
 800fae0:	4620      	mov	r0, r4
 800fae2:	f000 fa81 	bl	800ffe8 <rmw_uxrce_find_static_input_buffer_by_owner>
 800fae6:	4605      	mov	r5, r0
 800fae8:	b910      	cbnz	r0, 800faf0 <rmw_take_with_info+0x74>
 800faea:	2001      	movs	r0, #1
 800faec:	b009      	add	sp, #36	@ 0x24
 800faee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800faf0:	68a9      	ldr	r1, [r5, #8]
 800faf2:	4668      	mov	r0, sp
 800faf4:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 800faf8:	3110      	adds	r1, #16
 800fafa:	f7fc fa67 	bl	800bfcc <ucdr_init_buffer>
 800fafe:	69a3      	ldr	r3, [r4, #24]
 800fb00:	4639      	mov	r1, r7
 800fb02:	68db      	ldr	r3, [r3, #12]
 800fb04:	4668      	mov	r0, sp
 800fb06:	4798      	blx	r3
 800fb08:	4629      	mov	r1, r5
 800fb0a:	4604      	mov	r4, r0
 800fb0c:	4804      	ldr	r0, [pc, #16]	@ (800fb20 <rmw_take_with_info+0xa4>)
 800fb0e:	f007 fbe1 	bl	80172d4 <put_memory>
 800fb12:	e7dd      	b.n	800fad0 <rmw_take_with_info+0x54>
 800fb14:	200c      	movs	r0, #12
 800fb16:	b009      	add	sp, #36	@ 0x24
 800fb18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb1a:	bf00      	nop
 800fb1c:	0801b9e8 	.word	0x0801b9e8
 800fb20:	2001197c 	.word	0x2001197c

0800fb24 <rmw_uxrce_transport_init>:
 800fb24:	b508      	push	{r3, lr}
 800fb26:	b108      	cbz	r0, 800fb2c <rmw_uxrce_transport_init+0x8>
 800fb28:	f100 0210 	add.w	r2, r0, #16
 800fb2c:	b139      	cbz	r1, 800fb3e <rmw_uxrce_transport_init+0x1a>
 800fb2e:	6949      	ldr	r1, [r1, #20]
 800fb30:	4610      	mov	r0, r2
 800fb32:	f001 fb7f 	bl	8011234 <uxr_init_custom_transport>
 800fb36:	f080 0001 	eor.w	r0, r0, #1
 800fb3a:	b2c0      	uxtb	r0, r0
 800fb3c:	bd08      	pop	{r3, pc}
 800fb3e:	4b04      	ldr	r3, [pc, #16]	@ (800fb50 <rmw_uxrce_transport_init+0x2c>)
 800fb40:	4610      	mov	r0, r2
 800fb42:	6859      	ldr	r1, [r3, #4]
 800fb44:	f001 fb76 	bl	8011234 <uxr_init_custom_transport>
 800fb48:	f080 0001 	eor.w	r0, r0, #1
 800fb4c:	b2c0      	uxtb	r0, r0
 800fb4e:	bd08      	pop	{r3, pc}
 800fb50:	2000d014 	.word	0x2000d014

0800fb54 <rmw_uros_set_publisher_session_timeout>:
 800fb54:	b118      	cbz	r0, 800fb5e <rmw_uros_set_publisher_session_timeout+0xa>
 800fb56:	6843      	ldr	r3, [r0, #4]
 800fb58:	2000      	movs	r0, #0
 800fb5a:	67d9      	str	r1, [r3, #124]	@ 0x7c
 800fb5c:	4770      	bx	lr
 800fb5e:	200b      	movs	r0, #11
 800fb60:	4770      	bx	lr
 800fb62:	bf00      	nop

0800fb64 <rmw_uros_set_context_entity_destroy_session_timeout>:
 800fb64:	b160      	cbz	r0, 800fb80 <rmw_uros_set_context_entity_destroy_session_timeout+0x1c>
 800fb66:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800fb68:	2900      	cmp	r1, #0
 800fb6a:	bfd4      	ite	le
 800fb6c:	f503 725f 	addle.w	r2, r3, #892	@ 0x37c
 800fb70:	f503 725e 	addgt.w	r2, r3, #888	@ 0x378
 800fb74:	f8c3 2388 	str.w	r2, [r3, #904]	@ 0x388
 800fb78:	f8c3 1390 	str.w	r1, [r3, #912]	@ 0x390
 800fb7c:	2000      	movs	r0, #0
 800fb7e:	4770      	bx	lr
 800fb80:	200b      	movs	r0, #11
 800fb82:	4770      	bx	lr

0800fb84 <rmw_uxrce_init_service_memory>:
 800fb84:	b1e2      	cbz	r2, 800fbc0 <rmw_uxrce_init_service_memory+0x3c>
 800fb86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb8a:	7b05      	ldrb	r5, [r0, #12]
 800fb8c:	4606      	mov	r6, r0
 800fb8e:	b9ad      	cbnz	r5, 800fbbc <rmw_uxrce_init_service_memory+0x38>
 800fb90:	23c8      	movs	r3, #200	@ 0xc8
 800fb92:	e9c0 5500 	strd	r5, r5, [r0]
 800fb96:	6083      	str	r3, [r0, #8]
 800fb98:	f240 1301 	movw	r3, #257	@ 0x101
 800fb9c:	4617      	mov	r7, r2
 800fb9e:	8183      	strh	r3, [r0, #12]
 800fba0:	460c      	mov	r4, r1
 800fba2:	46a8      	mov	r8, r5
 800fba4:	4621      	mov	r1, r4
 800fba6:	4630      	mov	r0, r6
 800fba8:	3501      	adds	r5, #1
 800fbaa:	f007 fb93 	bl	80172d4 <put_memory>
 800fbae:	42af      	cmp	r7, r5
 800fbb0:	60a4      	str	r4, [r4, #8]
 800fbb2:	f884 800c 	strb.w	r8, [r4, #12]
 800fbb6:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800fbba:	d1f3      	bne.n	800fba4 <rmw_uxrce_init_service_memory+0x20>
 800fbbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbc0:	4770      	bx	lr
 800fbc2:	bf00      	nop

0800fbc4 <rmw_uxrce_init_client_memory>:
 800fbc4:	b1e2      	cbz	r2, 800fc00 <rmw_uxrce_init_client_memory+0x3c>
 800fbc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbca:	7b05      	ldrb	r5, [r0, #12]
 800fbcc:	4606      	mov	r6, r0
 800fbce:	b9ad      	cbnz	r5, 800fbfc <rmw_uxrce_init_client_memory+0x38>
 800fbd0:	23c8      	movs	r3, #200	@ 0xc8
 800fbd2:	e9c0 5500 	strd	r5, r5, [r0]
 800fbd6:	6083      	str	r3, [r0, #8]
 800fbd8:	f240 1301 	movw	r3, #257	@ 0x101
 800fbdc:	4617      	mov	r7, r2
 800fbde:	8183      	strh	r3, [r0, #12]
 800fbe0:	460c      	mov	r4, r1
 800fbe2:	46a8      	mov	r8, r5
 800fbe4:	4621      	mov	r1, r4
 800fbe6:	4630      	mov	r0, r6
 800fbe8:	3501      	adds	r5, #1
 800fbea:	f007 fb73 	bl	80172d4 <put_memory>
 800fbee:	42af      	cmp	r7, r5
 800fbf0:	60a4      	str	r4, [r4, #8]
 800fbf2:	f884 800c 	strb.w	r8, [r4, #12]
 800fbf6:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800fbfa:	d1f3      	bne.n	800fbe4 <rmw_uxrce_init_client_memory+0x20>
 800fbfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc00:	4770      	bx	lr
 800fc02:	bf00      	nop

0800fc04 <rmw_uxrce_init_publisher_memory>:
 800fc04:	b1e2      	cbz	r2, 800fc40 <rmw_uxrce_init_publisher_memory+0x3c>
 800fc06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc0a:	7b05      	ldrb	r5, [r0, #12]
 800fc0c:	4606      	mov	r6, r0
 800fc0e:	b9ad      	cbnz	r5, 800fc3c <rmw_uxrce_init_publisher_memory+0x38>
 800fc10:	23d8      	movs	r3, #216	@ 0xd8
 800fc12:	e9c0 5500 	strd	r5, r5, [r0]
 800fc16:	6083      	str	r3, [r0, #8]
 800fc18:	f240 1301 	movw	r3, #257	@ 0x101
 800fc1c:	4617      	mov	r7, r2
 800fc1e:	8183      	strh	r3, [r0, #12]
 800fc20:	460c      	mov	r4, r1
 800fc22:	46a8      	mov	r8, r5
 800fc24:	4621      	mov	r1, r4
 800fc26:	4630      	mov	r0, r6
 800fc28:	3501      	adds	r5, #1
 800fc2a:	f007 fb53 	bl	80172d4 <put_memory>
 800fc2e:	42af      	cmp	r7, r5
 800fc30:	60a4      	str	r4, [r4, #8]
 800fc32:	f884 800c 	strb.w	r8, [r4, #12]
 800fc36:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800fc3a:	d1f3      	bne.n	800fc24 <rmw_uxrce_init_publisher_memory+0x20>
 800fc3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc40:	4770      	bx	lr
 800fc42:	bf00      	nop

0800fc44 <rmw_uxrce_init_subscription_memory>:
 800fc44:	b1e2      	cbz	r2, 800fc80 <rmw_uxrce_init_subscription_memory+0x3c>
 800fc46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc4a:	7b05      	ldrb	r5, [r0, #12]
 800fc4c:	4606      	mov	r6, r0
 800fc4e:	b9ad      	cbnz	r5, 800fc7c <rmw_uxrce_init_subscription_memory+0x38>
 800fc50:	23d8      	movs	r3, #216	@ 0xd8
 800fc52:	e9c0 5500 	strd	r5, r5, [r0]
 800fc56:	6083      	str	r3, [r0, #8]
 800fc58:	f240 1301 	movw	r3, #257	@ 0x101
 800fc5c:	4617      	mov	r7, r2
 800fc5e:	8183      	strh	r3, [r0, #12]
 800fc60:	460c      	mov	r4, r1
 800fc62:	46a8      	mov	r8, r5
 800fc64:	4621      	mov	r1, r4
 800fc66:	4630      	mov	r0, r6
 800fc68:	3501      	adds	r5, #1
 800fc6a:	f007 fb33 	bl	80172d4 <put_memory>
 800fc6e:	42af      	cmp	r7, r5
 800fc70:	60a4      	str	r4, [r4, #8]
 800fc72:	f884 800c 	strb.w	r8, [r4, #12]
 800fc76:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800fc7a:	d1f3      	bne.n	800fc64 <rmw_uxrce_init_subscription_memory+0x20>
 800fc7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc80:	4770      	bx	lr
 800fc82:	bf00      	nop

0800fc84 <rmw_uxrce_init_node_memory>:
 800fc84:	b1e2      	cbz	r2, 800fcc0 <rmw_uxrce_init_node_memory+0x3c>
 800fc86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc8a:	7b05      	ldrb	r5, [r0, #12]
 800fc8c:	4606      	mov	r6, r0
 800fc8e:	b9ad      	cbnz	r5, 800fcbc <rmw_uxrce_init_node_memory+0x38>
 800fc90:	23a4      	movs	r3, #164	@ 0xa4
 800fc92:	e9c0 5500 	strd	r5, r5, [r0]
 800fc96:	6083      	str	r3, [r0, #8]
 800fc98:	f240 1301 	movw	r3, #257	@ 0x101
 800fc9c:	4617      	mov	r7, r2
 800fc9e:	8183      	strh	r3, [r0, #12]
 800fca0:	460c      	mov	r4, r1
 800fca2:	46a8      	mov	r8, r5
 800fca4:	4621      	mov	r1, r4
 800fca6:	4630      	mov	r0, r6
 800fca8:	3501      	adds	r5, #1
 800fcaa:	f007 fb13 	bl	80172d4 <put_memory>
 800fcae:	42af      	cmp	r7, r5
 800fcb0:	60a4      	str	r4, [r4, #8]
 800fcb2:	f884 800c 	strb.w	r8, [r4, #12]
 800fcb6:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800fcba:	d1f3      	bne.n	800fca4 <rmw_uxrce_init_node_memory+0x20>
 800fcbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcc0:	4770      	bx	lr
 800fcc2:	bf00      	nop

0800fcc4 <rmw_uxrce_init_session_memory>:
 800fcc4:	b1ea      	cbz	r2, 800fd02 <rmw_uxrce_init_session_memory+0x3e>
 800fcc6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fcca:	7b05      	ldrb	r5, [r0, #12]
 800fccc:	4606      	mov	r6, r0
 800fcce:	b9b5      	cbnz	r5, 800fcfe <rmw_uxrce_init_session_memory+0x3a>
 800fcd0:	e9c0 5500 	strd	r5, r5, [r0]
 800fcd4:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800fcd8:	f240 1301 	movw	r3, #257	@ 0x101
 800fcdc:	4617      	mov	r7, r2
 800fcde:	f8c0 8008 	str.w	r8, [r0, #8]
 800fce2:	460c      	mov	r4, r1
 800fce4:	8183      	strh	r3, [r0, #12]
 800fce6:	46a9      	mov	r9, r5
 800fce8:	4621      	mov	r1, r4
 800fcea:	4630      	mov	r0, r6
 800fcec:	3501      	adds	r5, #1
 800fcee:	f007 faf1 	bl	80172d4 <put_memory>
 800fcf2:	42af      	cmp	r7, r5
 800fcf4:	60a4      	str	r4, [r4, #8]
 800fcf6:	f884 900c 	strb.w	r9, [r4, #12]
 800fcfa:	4444      	add	r4, r8
 800fcfc:	d1f4      	bne.n	800fce8 <rmw_uxrce_init_session_memory+0x24>
 800fcfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd02:	4770      	bx	lr

0800fd04 <rmw_uxrce_init_topic_memory>:
 800fd04:	b1e2      	cbz	r2, 800fd40 <rmw_uxrce_init_topic_memory+0x3c>
 800fd06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd0a:	7b05      	ldrb	r5, [r0, #12]
 800fd0c:	4606      	mov	r6, r0
 800fd0e:	b9ad      	cbnz	r5, 800fd3c <rmw_uxrce_init_topic_memory+0x38>
 800fd10:	231c      	movs	r3, #28
 800fd12:	e9c0 5500 	strd	r5, r5, [r0]
 800fd16:	6083      	str	r3, [r0, #8]
 800fd18:	f240 1301 	movw	r3, #257	@ 0x101
 800fd1c:	4617      	mov	r7, r2
 800fd1e:	8183      	strh	r3, [r0, #12]
 800fd20:	460c      	mov	r4, r1
 800fd22:	46a8      	mov	r8, r5
 800fd24:	4621      	mov	r1, r4
 800fd26:	4630      	mov	r0, r6
 800fd28:	3501      	adds	r5, #1
 800fd2a:	f007 fad3 	bl	80172d4 <put_memory>
 800fd2e:	42af      	cmp	r7, r5
 800fd30:	60a4      	str	r4, [r4, #8]
 800fd32:	f884 800c 	strb.w	r8, [r4, #12]
 800fd36:	f104 041c 	add.w	r4, r4, #28
 800fd3a:	d1f3      	bne.n	800fd24 <rmw_uxrce_init_topic_memory+0x20>
 800fd3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd40:	4770      	bx	lr
 800fd42:	bf00      	nop

0800fd44 <rmw_uxrce_init_static_input_buffer_memory>:
 800fd44:	b1ea      	cbz	r2, 800fd82 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800fd46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd4a:	7b05      	ldrb	r5, [r0, #12]
 800fd4c:	4606      	mov	r6, r0
 800fd4e:	b9b5      	cbnz	r5, 800fd7e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800fd50:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800fd54:	e9c0 5500 	strd	r5, r5, [r0]
 800fd58:	6083      	str	r3, [r0, #8]
 800fd5a:	f240 1301 	movw	r3, #257	@ 0x101
 800fd5e:	4617      	mov	r7, r2
 800fd60:	8183      	strh	r3, [r0, #12]
 800fd62:	460c      	mov	r4, r1
 800fd64:	46a8      	mov	r8, r5
 800fd66:	4621      	mov	r1, r4
 800fd68:	4630      	mov	r0, r6
 800fd6a:	3501      	adds	r5, #1
 800fd6c:	f007 fab2 	bl	80172d4 <put_memory>
 800fd70:	42af      	cmp	r7, r5
 800fd72:	60a4      	str	r4, [r4, #8]
 800fd74:	f884 800c 	strb.w	r8, [r4, #12]
 800fd78:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800fd7c:	d1f3      	bne.n	800fd66 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800fd7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd82:	4770      	bx	lr

0800fd84 <rmw_uxrce_init_init_options_impl_memory>:
 800fd84:	b1e2      	cbz	r2, 800fdc0 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800fd86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd8a:	7b05      	ldrb	r5, [r0, #12]
 800fd8c:	4606      	mov	r6, r0
 800fd8e:	b9ad      	cbnz	r5, 800fdbc <rmw_uxrce_init_init_options_impl_memory+0x38>
 800fd90:	232c      	movs	r3, #44	@ 0x2c
 800fd92:	e9c0 5500 	strd	r5, r5, [r0]
 800fd96:	6083      	str	r3, [r0, #8]
 800fd98:	f240 1301 	movw	r3, #257	@ 0x101
 800fd9c:	4617      	mov	r7, r2
 800fd9e:	8183      	strh	r3, [r0, #12]
 800fda0:	460c      	mov	r4, r1
 800fda2:	46a8      	mov	r8, r5
 800fda4:	4621      	mov	r1, r4
 800fda6:	4630      	mov	r0, r6
 800fda8:	3501      	adds	r5, #1
 800fdaa:	f007 fa93 	bl	80172d4 <put_memory>
 800fdae:	42af      	cmp	r7, r5
 800fdb0:	60a4      	str	r4, [r4, #8]
 800fdb2:	f884 800c 	strb.w	r8, [r4, #12]
 800fdb6:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800fdba:	d1f3      	bne.n	800fda4 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800fdbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdc0:	4770      	bx	lr
 800fdc2:	bf00      	nop

0800fdc4 <rmw_uxrce_init_wait_set_memory>:
 800fdc4:	b1e2      	cbz	r2, 800fe00 <rmw_uxrce_init_wait_set_memory+0x3c>
 800fdc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdca:	7b05      	ldrb	r5, [r0, #12]
 800fdcc:	4606      	mov	r6, r0
 800fdce:	b9ad      	cbnz	r5, 800fdfc <rmw_uxrce_init_wait_set_memory+0x38>
 800fdd0:	231c      	movs	r3, #28
 800fdd2:	e9c0 5500 	strd	r5, r5, [r0]
 800fdd6:	6083      	str	r3, [r0, #8]
 800fdd8:	f240 1301 	movw	r3, #257	@ 0x101
 800fddc:	4617      	mov	r7, r2
 800fdde:	8183      	strh	r3, [r0, #12]
 800fde0:	460c      	mov	r4, r1
 800fde2:	46a8      	mov	r8, r5
 800fde4:	4621      	mov	r1, r4
 800fde6:	4630      	mov	r0, r6
 800fde8:	3501      	adds	r5, #1
 800fdea:	f007 fa73 	bl	80172d4 <put_memory>
 800fdee:	42af      	cmp	r7, r5
 800fdf0:	60a4      	str	r4, [r4, #8]
 800fdf2:	f884 800c 	strb.w	r8, [r4, #12]
 800fdf6:	f104 041c 	add.w	r4, r4, #28
 800fdfa:	d1f3      	bne.n	800fde4 <rmw_uxrce_init_wait_set_memory+0x20>
 800fdfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe00:	4770      	bx	lr
 800fe02:	bf00      	nop

0800fe04 <rmw_uxrce_init_guard_condition_memory>:
 800fe04:	b1e2      	cbz	r2, 800fe40 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800fe06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe0a:	7b05      	ldrb	r5, [r0, #12]
 800fe0c:	4606      	mov	r6, r0
 800fe0e:	b9ad      	cbnz	r5, 800fe3c <rmw_uxrce_init_guard_condition_memory+0x38>
 800fe10:	2320      	movs	r3, #32
 800fe12:	e9c0 5500 	strd	r5, r5, [r0]
 800fe16:	6083      	str	r3, [r0, #8]
 800fe18:	f240 1301 	movw	r3, #257	@ 0x101
 800fe1c:	4617      	mov	r7, r2
 800fe1e:	8183      	strh	r3, [r0, #12]
 800fe20:	460c      	mov	r4, r1
 800fe22:	46a8      	mov	r8, r5
 800fe24:	4621      	mov	r1, r4
 800fe26:	4630      	mov	r0, r6
 800fe28:	3501      	adds	r5, #1
 800fe2a:	f007 fa53 	bl	80172d4 <put_memory>
 800fe2e:	42af      	cmp	r7, r5
 800fe30:	60a4      	str	r4, [r4, #8]
 800fe32:	f884 800c 	strb.w	r8, [r4, #12]
 800fe36:	f104 0420 	add.w	r4, r4, #32
 800fe3a:	d1f3      	bne.n	800fe24 <rmw_uxrce_init_guard_condition_memory+0x20>
 800fe3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe40:	4770      	bx	lr
 800fe42:	bf00      	nop

0800fe44 <rmw_uxrce_fini_session_memory>:
 800fe44:	4601      	mov	r1, r0
 800fe46:	4801      	ldr	r0, [pc, #4]	@ (800fe4c <rmw_uxrce_fini_session_memory+0x8>)
 800fe48:	f007 ba44 	b.w	80172d4 <put_memory>
 800fe4c:	2001196c 	.word	0x2001196c

0800fe50 <rmw_uxrce_fini_node_memory>:
 800fe50:	b538      	push	{r3, r4, r5, lr}
 800fe52:	4604      	mov	r4, r0
 800fe54:	6800      	ldr	r0, [r0, #0]
 800fe56:	b128      	cbz	r0, 800fe64 <rmw_uxrce_fini_node_memory+0x14>
 800fe58:	4b07      	ldr	r3, [pc, #28]	@ (800fe78 <rmw_uxrce_fini_node_memory+0x28>)
 800fe5a:	6819      	ldr	r1, [r3, #0]
 800fe5c:	f7f0 f9d8 	bl	8000210 <strcmp>
 800fe60:	b940      	cbnz	r0, 800fe74 <rmw_uxrce_fini_node_memory+0x24>
 800fe62:	6020      	str	r0, [r4, #0]
 800fe64:	6861      	ldr	r1, [r4, #4]
 800fe66:	b129      	cbz	r1, 800fe74 <rmw_uxrce_fini_node_memory+0x24>
 800fe68:	2500      	movs	r5, #0
 800fe6a:	4804      	ldr	r0, [pc, #16]	@ (800fe7c <rmw_uxrce_fini_node_memory+0x2c>)
 800fe6c:	610d      	str	r5, [r1, #16]
 800fe6e:	f007 fa31 	bl	80172d4 <put_memory>
 800fe72:	6065      	str	r5, [r4, #4]
 800fe74:	bd38      	pop	{r3, r4, r5, pc}
 800fe76:	bf00      	nop
 800fe78:	0801b9e8 	.word	0x0801b9e8
 800fe7c:	2001193c 	.word	0x2001193c

0800fe80 <rmw_uxrce_fini_publisher_memory>:
 800fe80:	b510      	push	{r4, lr}
 800fe82:	4604      	mov	r4, r0
 800fe84:	6800      	ldr	r0, [r0, #0]
 800fe86:	b128      	cbz	r0, 800fe94 <rmw_uxrce_fini_publisher_memory+0x14>
 800fe88:	4b06      	ldr	r3, [pc, #24]	@ (800fea4 <rmw_uxrce_fini_publisher_memory+0x24>)
 800fe8a:	6819      	ldr	r1, [r3, #0]
 800fe8c:	f7f0 f9c0 	bl	8000210 <strcmp>
 800fe90:	b938      	cbnz	r0, 800fea2 <rmw_uxrce_fini_publisher_memory+0x22>
 800fe92:	6020      	str	r0, [r4, #0]
 800fe94:	6861      	ldr	r1, [r4, #4]
 800fe96:	b121      	cbz	r1, 800fea2 <rmw_uxrce_fini_publisher_memory+0x22>
 800fe98:	4803      	ldr	r0, [pc, #12]	@ (800fea8 <rmw_uxrce_fini_publisher_memory+0x28>)
 800fe9a:	f007 fa1b 	bl	80172d4 <put_memory>
 800fe9e:	2300      	movs	r3, #0
 800fea0:	6063      	str	r3, [r4, #4]
 800fea2:	bd10      	pop	{r4, pc}
 800fea4:	0801b9e8 	.word	0x0801b9e8
 800fea8:	2001194c 	.word	0x2001194c

0800feac <rmw_uxrce_fini_subscription_memory>:
 800feac:	b510      	push	{r4, lr}
 800feae:	4604      	mov	r4, r0
 800feb0:	6800      	ldr	r0, [r0, #0]
 800feb2:	b128      	cbz	r0, 800fec0 <rmw_uxrce_fini_subscription_memory+0x14>
 800feb4:	4b06      	ldr	r3, [pc, #24]	@ (800fed0 <rmw_uxrce_fini_subscription_memory+0x24>)
 800feb6:	6819      	ldr	r1, [r3, #0]
 800feb8:	f7f0 f9aa 	bl	8000210 <strcmp>
 800febc:	b938      	cbnz	r0, 800fece <rmw_uxrce_fini_subscription_memory+0x22>
 800febe:	6020      	str	r0, [r4, #0]
 800fec0:	6861      	ldr	r1, [r4, #4]
 800fec2:	b121      	cbz	r1, 800fece <rmw_uxrce_fini_subscription_memory+0x22>
 800fec4:	4803      	ldr	r0, [pc, #12]	@ (800fed4 <rmw_uxrce_fini_subscription_memory+0x28>)
 800fec6:	f007 fa05 	bl	80172d4 <put_memory>
 800feca:	2300      	movs	r3, #0
 800fecc:	6063      	str	r3, [r4, #4]
 800fece:	bd10      	pop	{r4, pc}
 800fed0:	0801b9e8 	.word	0x0801b9e8
 800fed4:	2001198c 	.word	0x2001198c

0800fed8 <rmw_uxrce_fini_service_memory>:
 800fed8:	b510      	push	{r4, lr}
 800feda:	4604      	mov	r4, r0
 800fedc:	6800      	ldr	r0, [r0, #0]
 800fede:	b128      	cbz	r0, 800feec <rmw_uxrce_fini_service_memory+0x14>
 800fee0:	4b06      	ldr	r3, [pc, #24]	@ (800fefc <rmw_uxrce_fini_service_memory+0x24>)
 800fee2:	6819      	ldr	r1, [r3, #0]
 800fee4:	f7f0 f994 	bl	8000210 <strcmp>
 800fee8:	b938      	cbnz	r0, 800fefa <rmw_uxrce_fini_service_memory+0x22>
 800feea:	6020      	str	r0, [r4, #0]
 800feec:	6861      	ldr	r1, [r4, #4]
 800feee:	b121      	cbz	r1, 800fefa <rmw_uxrce_fini_service_memory+0x22>
 800fef0:	4803      	ldr	r0, [pc, #12]	@ (800ff00 <rmw_uxrce_fini_service_memory+0x28>)
 800fef2:	f007 f9ef 	bl	80172d4 <put_memory>
 800fef6:	2300      	movs	r3, #0
 800fef8:	6063      	str	r3, [r4, #4]
 800fefa:	bd10      	pop	{r4, pc}
 800fefc:	0801b9e8 	.word	0x0801b9e8
 800ff00:	2001195c 	.word	0x2001195c

0800ff04 <rmw_uxrce_fini_client_memory>:
 800ff04:	b510      	push	{r4, lr}
 800ff06:	4604      	mov	r4, r0
 800ff08:	6800      	ldr	r0, [r0, #0]
 800ff0a:	b128      	cbz	r0, 800ff18 <rmw_uxrce_fini_client_memory+0x14>
 800ff0c:	4b06      	ldr	r3, [pc, #24]	@ (800ff28 <rmw_uxrce_fini_client_memory+0x24>)
 800ff0e:	6819      	ldr	r1, [r3, #0]
 800ff10:	f7f0 f97e 	bl	8000210 <strcmp>
 800ff14:	b938      	cbnz	r0, 800ff26 <rmw_uxrce_fini_client_memory+0x22>
 800ff16:	6020      	str	r0, [r4, #0]
 800ff18:	6861      	ldr	r1, [r4, #4]
 800ff1a:	b121      	cbz	r1, 800ff26 <rmw_uxrce_fini_client_memory+0x22>
 800ff1c:	4803      	ldr	r0, [pc, #12]	@ (800ff2c <rmw_uxrce_fini_client_memory+0x28>)
 800ff1e:	f007 f9d9 	bl	80172d4 <put_memory>
 800ff22:	2300      	movs	r3, #0
 800ff24:	6063      	str	r3, [r4, #4]
 800ff26:	bd10      	pop	{r4, pc}
 800ff28:	0801b9e8 	.word	0x0801b9e8
 800ff2c:	2000d06c 	.word	0x2000d06c

0800ff30 <rmw_uxrce_fini_topic_memory>:
 800ff30:	b510      	push	{r4, lr}
 800ff32:	4604      	mov	r4, r0
 800ff34:	4621      	mov	r1, r4
 800ff36:	4803      	ldr	r0, [pc, #12]	@ (800ff44 <rmw_uxrce_fini_topic_memory+0x14>)
 800ff38:	f007 f9cc 	bl	80172d4 <put_memory>
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	61a3      	str	r3, [r4, #24]
 800ff40:	bd10      	pop	{r4, pc}
 800ff42:	bf00      	nop
 800ff44:	2001199c 	.word	0x2001199c

0800ff48 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800ff48:	b082      	sub	sp, #8
 800ff4a:	b530      	push	{r4, r5, lr}
 800ff4c:	4925      	ldr	r1, [pc, #148]	@ (800ffe4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800ff4e:	680d      	ldr	r5, [r1, #0]
 800ff50:	ac03      	add	r4, sp, #12
 800ff52:	e884 000c 	stmia.w	r4, {r2, r3}
 800ff56:	461c      	mov	r4, r3
 800ff58:	2d00      	cmp	r5, #0
 800ff5a:	d041      	beq.n	800ffe0 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800ff5c:	462b      	mov	r3, r5
 800ff5e:	2100      	movs	r1, #0
 800ff60:	689a      	ldr	r2, [r3, #8]
 800ff62:	685b      	ldr	r3, [r3, #4]
 800ff64:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800ff68:	4290      	cmp	r0, r2
 800ff6a:	bf08      	it	eq
 800ff6c:	3101      	addeq	r1, #1
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d1f6      	bne.n	800ff60 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800ff72:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800ff76:	2b02      	cmp	r3, #2
 800ff78:	d029      	beq.n	800ffce <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800ff7a:	d907      	bls.n	800ff8c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800ff7c:	2b03      	cmp	r3, #3
 800ff7e:	d005      	beq.n	800ff8c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800ff80:	2100      	movs	r1, #0
 800ff82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ff86:	4608      	mov	r0, r1
 800ff88:	b002      	add	sp, #8
 800ff8a:	4770      	bx	lr
 800ff8c:	b314      	cbz	r4, 800ffd4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800ff8e:	428c      	cmp	r4, r1
 800ff90:	d820      	bhi.n	800ffd4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800ff92:	2d00      	cmp	r5, #0
 800ff94:	d0f4      	beq.n	800ff80 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800ff96:	2100      	movs	r1, #0
 800ff98:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800ff9c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800ffa0:	e002      	b.n	800ffa8 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800ffa2:	686d      	ldr	r5, [r5, #4]
 800ffa4:	2d00      	cmp	r5, #0
 800ffa6:	d0ec      	beq.n	800ff82 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800ffa8:	68ab      	ldr	r3, [r5, #8]
 800ffaa:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800ffae:	4290      	cmp	r0, r2
 800ffb0:	d1f7      	bne.n	800ffa2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ffb2:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800ffb6:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800ffba:	4562      	cmp	r2, ip
 800ffbc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800ffc0:	eb73 0e04 	sbcs.w	lr, r3, r4
 800ffc4:	daed      	bge.n	800ffa2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ffc6:	4694      	mov	ip, r2
 800ffc8:	461c      	mov	r4, r3
 800ffca:	4629      	mov	r1, r5
 800ffcc:	e7e9      	b.n	800ffa2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ffce:	b10c      	cbz	r4, 800ffd4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800ffd0:	428c      	cmp	r4, r1
 800ffd2:	d9d5      	bls.n	800ff80 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800ffd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ffd8:	4802      	ldr	r0, [pc, #8]	@ (800ffe4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800ffda:	b002      	add	sp, #8
 800ffdc:	f007 b96a 	b.w	80172b4 <get_memory>
 800ffe0:	4629      	mov	r1, r5
 800ffe2:	e7c6      	b.n	800ff72 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800ffe4:	2001197c 	.word	0x2001197c

0800ffe8 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800ffe8:	4b11      	ldr	r3, [pc, #68]	@ (8010030 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	b530      	push	{r4, r5, lr}
 800ffee:	b1e3      	cbz	r3, 801002a <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800fff0:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800fff4:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800fff8:	2400      	movs	r4, #0
 800fffa:	e001      	b.n	8010000 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800fffc:	685b      	ldr	r3, [r3, #4]
 800fffe:	b193      	cbz	r3, 8010026 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 8010000:	689a      	ldr	r2, [r3, #8]
 8010002:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 8010006:	4288      	cmp	r0, r1
 8010008:	d1f8      	bne.n	800fffc <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 801000a:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 801000e:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 8010012:	4571      	cmp	r1, lr
 8010014:	eb72 050c 	sbcs.w	r5, r2, ip
 8010018:	daf0      	bge.n	800fffc <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 801001a:	461c      	mov	r4, r3
 801001c:	685b      	ldr	r3, [r3, #4]
 801001e:	468e      	mov	lr, r1
 8010020:	4694      	mov	ip, r2
 8010022:	2b00      	cmp	r3, #0
 8010024:	d1ec      	bne.n	8010000 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8010026:	4620      	mov	r0, r4
 8010028:	bd30      	pop	{r4, r5, pc}
 801002a:	461c      	mov	r4, r3
 801002c:	4620      	mov	r0, r4
 801002e:	bd30      	pop	{r4, r5, pc}
 8010030:	2001197c 	.word	0x2001197c
 8010034:	00000000 	.word	0x00000000

08010038 <rmw_uxrce_clean_expired_static_input_buffer>:
 8010038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801003c:	4b3c      	ldr	r3, [pc, #240]	@ (8010130 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 801003e:	ed2d 8b06 	vpush	{d8-d10}
 8010042:	681f      	ldr	r7, [r3, #0]
 8010044:	b08d      	sub	sp, #52	@ 0x34
 8010046:	f007 fd35 	bl	8017ab4 <rmw_uros_epoch_nanos>
 801004a:	2f00      	cmp	r7, #0
 801004c:	d05d      	beq.n	801010a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 801004e:	46b8      	mov	r8, r7
 8010050:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 8010118 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8010054:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8010058:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 801005c:	2b04      	cmp	r3, #4
 801005e:	ed9f ab30 	vldr	d10, [pc, #192]	@ 8010120 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8010062:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 8010128 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8010066:	4681      	mov	r9, r0
 8010068:	468a      	mov	sl, r1
 801006a:	ac04      	add	r4, sp, #16
 801006c:	d03f      	beq.n	80100ee <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 801006e:	2b05      	cmp	r3, #5
 8010070:	d044      	beq.n	80100fc <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8010072:	2b03      	cmp	r3, #3
 8010074:	d03b      	beq.n	80100ee <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8010076:	ed8d 8b04 	vstr	d8, [sp, #16]
 801007a:	ed8d ab06 	vstr	d10, [sp, #24]
 801007e:	ed8d 8b08 	vstr	d8, [sp, #32]
 8010082:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 8010086:	ab08      	add	r3, sp, #32
 8010088:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801008a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801008e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8010092:	f006 ff2d 	bl	8016ef0 <rmw_time_equal>
 8010096:	b118      	cbz	r0, 80100a0 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8010098:	ed8d 9b04 	vstr	d9, [sp, #16]
 801009c:	ed8d 8b06 	vstr	d8, [sp, #24]
 80100a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80100a4:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 80100a8:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 80100ac:	f8d8 b004 	ldr.w	fp, [r8, #4]
 80100b0:	f006 ff72 	bl	8016f98 <rmw_time_total_nsec>
 80100b4:	1830      	adds	r0, r6, r0
 80100b6:	eb47 0101 	adc.w	r1, r7, r1
 80100ba:	4548      	cmp	r0, r9
 80100bc:	eb71 030a 	sbcs.w	r3, r1, sl
 80100c0:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 80100c4:	db05      	blt.n	80100d2 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 80100c6:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 80100ca:	4591      	cmp	r9, r2
 80100cc:	eb7a 0303 	sbcs.w	r3, sl, r3
 80100d0:	da03      	bge.n	80100da <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 80100d2:	4817      	ldr	r0, [pc, #92]	@ (8010130 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 80100d4:	4641      	mov	r1, r8
 80100d6:	f007 f8fd 	bl	80172d4 <put_memory>
 80100da:	f1bb 0f00 	cmp.w	fp, #0
 80100de:	d014      	beq.n	801010a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 80100e0:	46d8      	mov	r8, fp
 80100e2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80100e6:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 80100ea:	2b04      	cmp	r3, #4
 80100ec:	d1bf      	bne.n	801006e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 80100ee:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 80100f2:	3340      	adds	r3, #64	@ 0x40
 80100f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80100f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80100fa:	e7c0      	b.n	801007e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 80100fc:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8010100:	3348      	adds	r3, #72	@ 0x48
 8010102:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010104:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010108:	e7b9      	b.n	801007e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 801010a:	b00d      	add	sp, #52	@ 0x34
 801010c:	ecbd 8b06 	vpop	{d8-d10}
 8010110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010114:	f3af 8000 	nop.w
	...
 8010120:	00000001 	.word	0x00000001
 8010124:	00000000 	.word	0x00000000
 8010128:	0000001e 	.word	0x0000001e
 801012c:	00000000 	.word	0x00000000
 8010130:	2001197c 	.word	0x2001197c

08010134 <run_xrce_session>:
 8010134:	b510      	push	{r4, lr}
 8010136:	788c      	ldrb	r4, [r1, #2]
 8010138:	b086      	sub	sp, #24
 801013a:	2c01      	cmp	r4, #1
 801013c:	f8ad 200e 	strh.w	r2, [sp, #14]
 8010140:	d00c      	beq.n	801015c <run_xrce_session+0x28>
 8010142:	4619      	mov	r1, r3
 8010144:	2301      	movs	r3, #1
 8010146:	9300      	str	r3, [sp, #0]
 8010148:	f10d 020e 	add.w	r2, sp, #14
 801014c:	f10d 0317 	add.w	r3, sp, #23
 8010150:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010154:	f002 f80e 	bl	8012174 <uxr_run_session_until_all_status>
 8010158:	b006      	add	sp, #24
 801015a:	bd10      	pop	{r4, pc}
 801015c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010160:	f001 fc22 	bl	80119a8 <uxr_flash_output_streams>
 8010164:	4620      	mov	r0, r4
 8010166:	b006      	add	sp, #24
 8010168:	bd10      	pop	{r4, pc}
 801016a:	bf00      	nop

0801016c <convert_qos_profile>:
 801016c:	7a4a      	ldrb	r2, [r1, #9]
 801016e:	f891 c008 	ldrb.w	ip, [r1, #8]
 8010172:	2a02      	cmp	r2, #2
 8010174:	bf18      	it	ne
 8010176:	2200      	movne	r2, #0
 8010178:	7002      	strb	r2, [r0, #0]
 801017a:	780a      	ldrb	r2, [r1, #0]
 801017c:	8889      	ldrh	r1, [r1, #4]
 801017e:	8081      	strh	r1, [r0, #4]
 8010180:	f1ac 0c02 	sub.w	ip, ip, #2
 8010184:	f1a2 0202 	sub.w	r2, r2, #2
 8010188:	fabc fc8c 	clz	ip, ip
 801018c:	fab2 f282 	clz	r2, r2
 8010190:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8010194:	0952      	lsrs	r2, r2, #5
 8010196:	f880 c001 	strb.w	ip, [r0, #1]
 801019a:	7082      	strb	r2, [r0, #2]
 801019c:	4770      	bx	lr
 801019e:	bf00      	nop

080101a0 <generate_type_name>:
 80101a0:	b530      	push	{r4, r5, lr}
 80101a2:	2300      	movs	r3, #0
 80101a4:	700b      	strb	r3, [r1, #0]
 80101a6:	6803      	ldr	r3, [r0, #0]
 80101a8:	b087      	sub	sp, #28
 80101aa:	4614      	mov	r4, r2
 80101ac:	b1d3      	cbz	r3, 80101e4 <generate_type_name+0x44>
 80101ae:	4a0f      	ldr	r2, [pc, #60]	@ (80101ec <generate_type_name+0x4c>)
 80101b0:	4615      	mov	r5, r2
 80101b2:	9203      	str	r2, [sp, #12]
 80101b4:	9500      	str	r5, [sp, #0]
 80101b6:	6842      	ldr	r2, [r0, #4]
 80101b8:	480d      	ldr	r0, [pc, #52]	@ (80101f0 <generate_type_name+0x50>)
 80101ba:	9001      	str	r0, [sp, #4]
 80101bc:	4608      	mov	r0, r1
 80101be:	490d      	ldr	r1, [pc, #52]	@ (80101f4 <generate_type_name+0x54>)
 80101c0:	9204      	str	r2, [sp, #16]
 80101c2:	9105      	str	r1, [sp, #20]
 80101c4:	9102      	str	r1, [sp, #8]
 80101c6:	4a0c      	ldr	r2, [pc, #48]	@ (80101f8 <generate_type_name+0x58>)
 80101c8:	4621      	mov	r1, r4
 80101ca:	f009 faf7 	bl	80197bc <sniprintf>
 80101ce:	2800      	cmp	r0, #0
 80101d0:	db05      	blt.n	80101de <generate_type_name+0x3e>
 80101d2:	4284      	cmp	r4, r0
 80101d4:	bfd4      	ite	le
 80101d6:	2000      	movle	r0, #0
 80101d8:	2001      	movgt	r0, #1
 80101da:	b007      	add	sp, #28
 80101dc:	bd30      	pop	{r4, r5, pc}
 80101de:	2000      	movs	r0, #0
 80101e0:	b007      	add	sp, #28
 80101e2:	bd30      	pop	{r4, r5, pc}
 80101e4:	4b05      	ldr	r3, [pc, #20]	@ (80101fc <generate_type_name+0x5c>)
 80101e6:	4a01      	ldr	r2, [pc, #4]	@ (80101ec <generate_type_name+0x4c>)
 80101e8:	461d      	mov	r5, r3
 80101ea:	e7e2      	b.n	80101b2 <generate_type_name+0x12>
 80101ec:	0801b03c 	.word	0x0801b03c
 80101f0:	0801b054 	.word	0x0801b054
 80101f4:	0801b050 	.word	0x0801b050
 80101f8:	0801b040 	.word	0x0801b040
 80101fc:	0801b264 	.word	0x0801b264

08010200 <generate_topic_name>:
 8010200:	b510      	push	{r4, lr}
 8010202:	b082      	sub	sp, #8
 8010204:	4614      	mov	r4, r2
 8010206:	9000      	str	r0, [sp, #0]
 8010208:	4b08      	ldr	r3, [pc, #32]	@ (801022c <generate_topic_name+0x2c>)
 801020a:	4a09      	ldr	r2, [pc, #36]	@ (8010230 <generate_topic_name+0x30>)
 801020c:	4608      	mov	r0, r1
 801020e:	4621      	mov	r1, r4
 8010210:	f009 fad4 	bl	80197bc <sniprintf>
 8010214:	2800      	cmp	r0, #0
 8010216:	db05      	blt.n	8010224 <generate_topic_name+0x24>
 8010218:	4284      	cmp	r4, r0
 801021a:	bfd4      	ite	le
 801021c:	2000      	movle	r0, #0
 801021e:	2001      	movgt	r0, #1
 8010220:	b002      	add	sp, #8
 8010222:	bd10      	pop	{r4, pc}
 8010224:	2000      	movs	r0, #0
 8010226:	b002      	add	sp, #8
 8010228:	bd10      	pop	{r4, pc}
 801022a:	bf00      	nop
 801022c:	0801b648 	.word	0x0801b648
 8010230:	0801ad0c 	.word	0x0801ad0c

08010234 <is_uxrce_rmw_identifier_valid>:
 8010234:	b510      	push	{r4, lr}
 8010236:	4604      	mov	r4, r0
 8010238:	b140      	cbz	r0, 801024c <is_uxrce_rmw_identifier_valid+0x18>
 801023a:	f007 f8a3 	bl	8017384 <rmw_get_implementation_identifier>
 801023e:	4601      	mov	r1, r0
 8010240:	4620      	mov	r0, r4
 8010242:	f7ef ffe5 	bl	8000210 <strcmp>
 8010246:	fab0 f080 	clz	r0, r0
 801024a:	0940      	lsrs	r0, r0, #5
 801024c:	bd10      	pop	{r4, pc}
 801024e:	bf00      	nop

08010250 <get_message_typesupport_handle>:
 8010250:	6883      	ldr	r3, [r0, #8]
 8010252:	4718      	bx	r3

08010254 <get_message_typesupport_handle_function>:
 8010254:	b510      	push	{r4, lr}
 8010256:	4604      	mov	r4, r0
 8010258:	6800      	ldr	r0, [r0, #0]
 801025a:	f7ef ffd9 	bl	8000210 <strcmp>
 801025e:	2800      	cmp	r0, #0
 8010260:	bf0c      	ite	eq
 8010262:	4620      	moveq	r0, r4
 8010264:	2000      	movne	r0, #0
 8010266:	bd10      	pop	{r4, pc}

08010268 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8010268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801026c:	6805      	ldr	r5, [r0, #0]
 801026e:	4604      	mov	r4, r0
 8010270:	4628      	mov	r0, r5
 8010272:	460e      	mov	r6, r1
 8010274:	f7ef ffcc 	bl	8000210 <strcmp>
 8010278:	b1c8      	cbz	r0, 80102ae <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 801027a:	4b11      	ldr	r3, [pc, #68]	@ (80102c0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	429d      	cmp	r5, r3
 8010280:	d112      	bne.n	80102a8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8010282:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8010286:	f8d8 4000 	ldr.w	r4, [r8]
 801028a:	b16c      	cbz	r4, 80102a8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801028c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8010290:	2700      	movs	r7, #0
 8010292:	3d04      	subs	r5, #4
 8010294:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8010298:	4631      	mov	r1, r6
 801029a:	f7ef ffb9 	bl	8000210 <strcmp>
 801029e:	00bb      	lsls	r3, r7, #2
 80102a0:	b140      	cbz	r0, 80102b4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 80102a2:	3701      	adds	r7, #1
 80102a4:	42bc      	cmp	r4, r7
 80102a6:	d1f5      	bne.n	8010294 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 80102a8:	2000      	movs	r0, #0
 80102aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102ae:	4620      	mov	r0, r4
 80102b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102b4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80102b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80102bc:	58d3      	ldr	r3, [r2, r3]
 80102be:	4718      	bx	r3
 80102c0:	20000320 	.word	0x20000320

080102c4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 80102c4:	4b04      	ldr	r3, [pc, #16]	@ (80102d8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 80102c6:	681a      	ldr	r2, [r3, #0]
 80102c8:	b10a      	cbz	r2, 80102ce <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 80102ca:	4803      	ldr	r0, [pc, #12]	@ (80102d8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 80102cc:	4770      	bx	lr
 80102ce:	4a03      	ldr	r2, [pc, #12]	@ (80102dc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 80102d0:	4801      	ldr	r0, [pc, #4]	@ (80102d8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 80102d2:	6812      	ldr	r2, [r2, #0]
 80102d4:	601a      	str	r2, [r3, #0]
 80102d6:	4770      	bx	lr
 80102d8:	20000330 	.word	0x20000330
 80102dc:	20000320 	.word	0x20000320

080102e0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 80102e0:	4a02      	ldr	r2, [pc, #8]	@ (80102ec <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 80102e2:	4b03      	ldr	r3, [pc, #12]	@ (80102f0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 80102e4:	6812      	ldr	r2, [r2, #0]
 80102e6:	601a      	str	r2, [r3, #0]
 80102e8:	4770      	bx	lr
 80102ea:	bf00      	nop
 80102ec:	20000320 	.word	0x20000320
 80102f0:	20000330 	.word	0x20000330

080102f4 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 80102f4:	f007 bc4a 	b.w	8017b8c <std_msgs__msg__Header__init>

080102f8 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 80102f8:	f007 bc6c 	b.w	8017bd4 <std_msgs__msg__Header__fini>

080102fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 80102fc:	b508      	push	{r3, lr}
 80102fe:	f000 f8eb 	bl	80104d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010302:	4b06      	ldr	r3, [pc, #24]	@ (801031c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8010304:	4906      	ldr	r1, [pc, #24]	@ (8010320 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 8010306:	681a      	ldr	r2, [r3, #0]
 8010308:	60c8      	str	r0, [r1, #12]
 801030a:	b10a      	cbz	r2, 8010310 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 801030c:	4803      	ldr	r0, [pc, #12]	@ (801031c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 801030e:	bd08      	pop	{r3, pc}
 8010310:	4a04      	ldr	r2, [pc, #16]	@ (8010324 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 8010312:	4802      	ldr	r0, [pc, #8]	@ (801031c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8010314:	6812      	ldr	r2, [r2, #0]
 8010316:	601a      	str	r2, [r3, #0]
 8010318:	bd08      	pop	{r3, pc}
 801031a:	bf00      	nop
 801031c:	200003b4 	.word	0x200003b4
 8010320:	2000033c 	.word	0x2000033c
 8010324:	20000324 	.word	0x20000324

08010328 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 8010328:	f007 bc60 	b.w	8017bec <std_msgs__msg__Int32__init>

0801032c <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 801032c:	f007 bc62 	b.w	8017bf4 <std_msgs__msg__Int32__fini>

08010330 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8010330:	4b04      	ldr	r3, [pc, #16]	@ (8010344 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8010332:	681a      	ldr	r2, [r3, #0]
 8010334:	b10a      	cbz	r2, 801033a <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 8010336:	4803      	ldr	r0, [pc, #12]	@ (8010344 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8010338:	4770      	bx	lr
 801033a:	4a03      	ldr	r2, [pc, #12]	@ (8010348 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 801033c:	4801      	ldr	r0, [pc, #4]	@ (8010344 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 801033e:	6812      	ldr	r2, [r2, #0]
 8010340:	601a      	str	r2, [r3, #0]
 8010342:	4770      	bx	lr
 8010344:	200003fc 	.word	0x200003fc
 8010348:	20000324 	.word	0x20000324

0801034c <_Header__max_serialized_size>:
 801034c:	b500      	push	{lr}
 801034e:	b083      	sub	sp, #12
 8010350:	2301      	movs	r3, #1
 8010352:	2100      	movs	r1, #0
 8010354:	f10d 0007 	add.w	r0, sp, #7
 8010358:	f88d 3007 	strb.w	r3, [sp, #7]
 801035c:	f000 f91a 	bl	8010594 <max_serialized_size_builtin_interfaces__msg__Time>
 8010360:	b003      	add	sp, #12
 8010362:	f85d fb04 	ldr.w	pc, [sp], #4
 8010366:	bf00      	nop

08010368 <get_serialized_size_std_msgs__msg__Header>:
 8010368:	b570      	push	{r4, r5, r6, lr}
 801036a:	4605      	mov	r5, r0
 801036c:	b168      	cbz	r0, 801038a <get_serialized_size_std_msgs__msg__Header+0x22>
 801036e:	460c      	mov	r4, r1
 8010370:	f000 f8c0 	bl	80104f4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010374:	1826      	adds	r6, r4, r0
 8010376:	2104      	movs	r1, #4
 8010378:	4630      	mov	r0, r6
 801037a:	f7fb fe2b 	bl	800bfd4 <ucdr_alignment>
 801037e:	68e9      	ldr	r1, [r5, #12]
 8010380:	f1c4 0405 	rsb	r4, r4, #5
 8010384:	440c      	add	r4, r1
 8010386:	4404      	add	r4, r0
 8010388:	19a0      	adds	r0, r4, r6
 801038a:	bd70      	pop	{r4, r5, r6, pc}

0801038c <_Header__cdr_deserialize>:
 801038c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801038e:	460c      	mov	r4, r1
 8010390:	b083      	sub	sp, #12
 8010392:	b1e1      	cbz	r1, 80103ce <_Header__cdr_deserialize+0x42>
 8010394:	4606      	mov	r6, r0
 8010396:	f000 f911 	bl	80105bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801039a:	6843      	ldr	r3, [r0, #4]
 801039c:	4621      	mov	r1, r4
 801039e:	68db      	ldr	r3, [r3, #12]
 80103a0:	4630      	mov	r0, r6
 80103a2:	4798      	blx	r3
 80103a4:	6927      	ldr	r7, [r4, #16]
 80103a6:	68a1      	ldr	r1, [r4, #8]
 80103a8:	ab01      	add	r3, sp, #4
 80103aa:	463a      	mov	r2, r7
 80103ac:	4630      	mov	r0, r6
 80103ae:	f000 fc6f 	bl	8010c90 <ucdr_deserialize_sequence_char>
 80103b2:	9b01      	ldr	r3, [sp, #4]
 80103b4:	4605      	mov	r5, r0
 80103b6:	b920      	cbnz	r0, 80103c2 <_Header__cdr_deserialize+0x36>
 80103b8:	429f      	cmp	r7, r3
 80103ba:	d30c      	bcc.n	80103d6 <_Header__cdr_deserialize+0x4a>
 80103bc:	4628      	mov	r0, r5
 80103be:	b003      	add	sp, #12
 80103c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80103c2:	b103      	cbz	r3, 80103c6 <_Header__cdr_deserialize+0x3a>
 80103c4:	3b01      	subs	r3, #1
 80103c6:	4628      	mov	r0, r5
 80103c8:	60e3      	str	r3, [r4, #12]
 80103ca:	b003      	add	sp, #12
 80103cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80103ce:	460d      	mov	r5, r1
 80103d0:	4628      	mov	r0, r5
 80103d2:	b003      	add	sp, #12
 80103d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80103d6:	2101      	movs	r1, #1
 80103d8:	75b0      	strb	r0, [r6, #22]
 80103da:	7571      	strb	r1, [r6, #21]
 80103dc:	4630      	mov	r0, r6
 80103de:	60e5      	str	r5, [r4, #12]
 80103e0:	f7fb fe0e 	bl	800c000 <ucdr_align_to>
 80103e4:	4630      	mov	r0, r6
 80103e6:	9901      	ldr	r1, [sp, #4]
 80103e8:	f7fb fe40 	bl	800c06c <ucdr_advance_buffer>
 80103ec:	4628      	mov	r0, r5
 80103ee:	b003      	add	sp, #12
 80103f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80103f2:	bf00      	nop

080103f4 <_Header__cdr_serialize>:
 80103f4:	b1f8      	cbz	r0, 8010436 <_Header__cdr_serialize+0x42>
 80103f6:	b570      	push	{r4, r5, r6, lr}
 80103f8:	4604      	mov	r4, r0
 80103fa:	460d      	mov	r5, r1
 80103fc:	f000 f8de 	bl	80105bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010400:	6843      	ldr	r3, [r0, #4]
 8010402:	4629      	mov	r1, r5
 8010404:	689b      	ldr	r3, [r3, #8]
 8010406:	4620      	mov	r0, r4
 8010408:	4798      	blx	r3
 801040a:	68a6      	ldr	r6, [r4, #8]
 801040c:	b156      	cbz	r6, 8010424 <_Header__cdr_serialize+0x30>
 801040e:	4630      	mov	r0, r6
 8010410:	f7ef ff08 	bl	8000224 <strlen>
 8010414:	4631      	mov	r1, r6
 8010416:	60e0      	str	r0, [r4, #12]
 8010418:	1c42      	adds	r2, r0, #1
 801041a:	4628      	mov	r0, r5
 801041c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010420:	f000 bc24 	b.w	8010c6c <ucdr_serialize_sequence_char>
 8010424:	4630      	mov	r0, r6
 8010426:	60e0      	str	r0, [r4, #12]
 8010428:	4632      	mov	r2, r6
 801042a:	4631      	mov	r1, r6
 801042c:	4628      	mov	r0, r5
 801042e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010432:	f000 bc1b 	b.w	8010c6c <ucdr_serialize_sequence_char>
 8010436:	4770      	bx	lr

08010438 <_Header__get_serialized_size>:
 8010438:	b538      	push	{r3, r4, r5, lr}
 801043a:	4604      	mov	r4, r0
 801043c:	b150      	cbz	r0, 8010454 <_Header__get_serialized_size+0x1c>
 801043e:	2100      	movs	r1, #0
 8010440:	f000 f858 	bl	80104f4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010444:	2104      	movs	r1, #4
 8010446:	4605      	mov	r5, r0
 8010448:	f7fb fdc4 	bl	800bfd4 <ucdr_alignment>
 801044c:	68e2      	ldr	r2, [r4, #12]
 801044e:	3205      	adds	r2, #5
 8010450:	1953      	adds	r3, r2, r5
 8010452:	4418      	add	r0, r3
 8010454:	bd38      	pop	{r3, r4, r5, pc}
 8010456:	bf00      	nop

08010458 <max_serialized_size_std_msgs__msg__Header>:
 8010458:	b510      	push	{r4, lr}
 801045a:	2301      	movs	r3, #1
 801045c:	4604      	mov	r4, r0
 801045e:	7003      	strb	r3, [r0, #0]
 8010460:	f000 f898 	bl	8010594 <max_serialized_size_builtin_interfaces__msg__Time>
 8010464:	2300      	movs	r3, #0
 8010466:	7023      	strb	r3, [r4, #0]
 8010468:	bd10      	pop	{r4, pc}
 801046a:	bf00      	nop

0801046c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 801046c:	4800      	ldr	r0, [pc, #0]	@ (8010470 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 801046e:	4770      	bx	lr
 8010470:	20000408 	.word	0x20000408

08010474 <_Int32__max_serialized_size>:
 8010474:	b508      	push	{r3, lr}
 8010476:	2104      	movs	r1, #4
 8010478:	2000      	movs	r0, #0
 801047a:	f7fb fdab 	bl	800bfd4 <ucdr_alignment>
 801047e:	3004      	adds	r0, #4
 8010480:	bd08      	pop	{r3, pc}
 8010482:	bf00      	nop

08010484 <_Int32__cdr_deserialize>:
 8010484:	b109      	cbz	r1, 801048a <_Int32__cdr_deserialize+0x6>
 8010486:	f7fb b987 	b.w	800b798 <ucdr_deserialize_int32_t>
 801048a:	4608      	mov	r0, r1
 801048c:	4770      	bx	lr
 801048e:	bf00      	nop

08010490 <get_serialized_size_std_msgs__msg__Int32>:
 8010490:	b138      	cbz	r0, 80104a2 <get_serialized_size_std_msgs__msg__Int32+0x12>
 8010492:	b508      	push	{r3, lr}
 8010494:	460b      	mov	r3, r1
 8010496:	4618      	mov	r0, r3
 8010498:	2104      	movs	r1, #4
 801049a:	f7fb fd9b 	bl	800bfd4 <ucdr_alignment>
 801049e:	3004      	adds	r0, #4
 80104a0:	bd08      	pop	{r3, pc}
 80104a2:	4770      	bx	lr

080104a4 <_Int32__cdr_serialize>:
 80104a4:	460a      	mov	r2, r1
 80104a6:	b118      	cbz	r0, 80104b0 <_Int32__cdr_serialize+0xc>
 80104a8:	6801      	ldr	r1, [r0, #0]
 80104aa:	4610      	mov	r0, r2
 80104ac:	f7fb b8dc 	b.w	800b668 <ucdr_serialize_int32_t>
 80104b0:	4770      	bx	lr
 80104b2:	bf00      	nop

080104b4 <_Int32__get_serialized_size>:
 80104b4:	b130      	cbz	r0, 80104c4 <_Int32__get_serialized_size+0x10>
 80104b6:	b508      	push	{r3, lr}
 80104b8:	2104      	movs	r1, #4
 80104ba:	2000      	movs	r0, #0
 80104bc:	f7fb fd8a 	bl	800bfd4 <ucdr_alignment>
 80104c0:	3004      	adds	r0, #4
 80104c2:	bd08      	pop	{r3, pc}
 80104c4:	4770      	bx	lr
 80104c6:	bf00      	nop

080104c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 80104c8:	4800      	ldr	r0, [pc, #0]	@ (80104cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 80104ca:	4770      	bx	lr
 80104cc:	20000430 	.word	0x20000430

080104d0 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 80104d0:	f007 bb92 	b.w	8017bf8 <builtin_interfaces__msg__Time__init>

080104d4 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 80104d4:	f007 bb94 	b.w	8017c00 <builtin_interfaces__msg__Time__fini>

080104d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 80104d8:	4b04      	ldr	r3, [pc, #16]	@ (80104ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 80104da:	681a      	ldr	r2, [r3, #0]
 80104dc:	b10a      	cbz	r2, 80104e2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 80104de:	4803      	ldr	r0, [pc, #12]	@ (80104ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 80104e0:	4770      	bx	lr
 80104e2:	4a03      	ldr	r2, [pc, #12]	@ (80104f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 80104e4:	4801      	ldr	r0, [pc, #4]	@ (80104ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 80104e6:	6812      	ldr	r2, [r2, #0]
 80104e8:	601a      	str	r2, [r3, #0]
 80104ea:	4770      	bx	lr
 80104ec:	200004d0 	.word	0x200004d0
 80104f0:	20000324 	.word	0x20000324

080104f4 <get_serialized_size_builtin_interfaces__msg__Time>:
 80104f4:	b180      	cbz	r0, 8010518 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 80104f6:	b538      	push	{r3, r4, r5, lr}
 80104f8:	460d      	mov	r5, r1
 80104fa:	4628      	mov	r0, r5
 80104fc:	2104      	movs	r1, #4
 80104fe:	f7fb fd69 	bl	800bfd4 <ucdr_alignment>
 8010502:	1d2b      	adds	r3, r5, #4
 8010504:	181c      	adds	r4, r3, r0
 8010506:	2104      	movs	r1, #4
 8010508:	4620      	mov	r0, r4
 801050a:	f7fb fd63 	bl	800bfd4 <ucdr_alignment>
 801050e:	f1c5 0504 	rsb	r5, r5, #4
 8010512:	4428      	add	r0, r5
 8010514:	4420      	add	r0, r4
 8010516:	bd38      	pop	{r3, r4, r5, pc}
 8010518:	4770      	bx	lr
 801051a:	bf00      	nop

0801051c <_Time__cdr_deserialize>:
 801051c:	b538      	push	{r3, r4, r5, lr}
 801051e:	460c      	mov	r4, r1
 8010520:	b141      	cbz	r1, 8010534 <_Time__cdr_deserialize+0x18>
 8010522:	4605      	mov	r5, r0
 8010524:	f7fb f938 	bl	800b798 <ucdr_deserialize_int32_t>
 8010528:	1d21      	adds	r1, r4, #4
 801052a:	4628      	mov	r0, r5
 801052c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010530:	f7fa bdb0 	b.w	800b094 <ucdr_deserialize_uint32_t>
 8010534:	4608      	mov	r0, r1
 8010536:	bd38      	pop	{r3, r4, r5, pc}

08010538 <_Time__cdr_serialize>:
 8010538:	b160      	cbz	r0, 8010554 <_Time__cdr_serialize+0x1c>
 801053a:	b538      	push	{r3, r4, r5, lr}
 801053c:	460d      	mov	r5, r1
 801053e:	4604      	mov	r4, r0
 8010540:	6801      	ldr	r1, [r0, #0]
 8010542:	4628      	mov	r0, r5
 8010544:	f7fb f890 	bl	800b668 <ucdr_serialize_int32_t>
 8010548:	6861      	ldr	r1, [r4, #4]
 801054a:	4628      	mov	r0, r5
 801054c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010550:	f7fa bc70 	b.w	800ae34 <ucdr_serialize_uint32_t>
 8010554:	4770      	bx	lr
 8010556:	bf00      	nop

08010558 <_Time__get_serialized_size>:
 8010558:	b160      	cbz	r0, 8010574 <_Time__get_serialized_size+0x1c>
 801055a:	b510      	push	{r4, lr}
 801055c:	2104      	movs	r1, #4
 801055e:	2000      	movs	r0, #0
 8010560:	f7fb fd38 	bl	800bfd4 <ucdr_alignment>
 8010564:	1d04      	adds	r4, r0, #4
 8010566:	2104      	movs	r1, #4
 8010568:	4620      	mov	r0, r4
 801056a:	f7fb fd33 	bl	800bfd4 <ucdr_alignment>
 801056e:	3004      	adds	r0, #4
 8010570:	4420      	add	r0, r4
 8010572:	bd10      	pop	{r4, pc}
 8010574:	4770      	bx	lr
 8010576:	bf00      	nop

08010578 <_Time__max_serialized_size>:
 8010578:	b510      	push	{r4, lr}
 801057a:	2104      	movs	r1, #4
 801057c:	2000      	movs	r0, #0
 801057e:	f7fb fd29 	bl	800bfd4 <ucdr_alignment>
 8010582:	1d04      	adds	r4, r0, #4
 8010584:	2104      	movs	r1, #4
 8010586:	4620      	mov	r0, r4
 8010588:	f7fb fd24 	bl	800bfd4 <ucdr_alignment>
 801058c:	3004      	adds	r0, #4
 801058e:	4420      	add	r0, r4
 8010590:	bd10      	pop	{r4, pc}
 8010592:	bf00      	nop

08010594 <max_serialized_size_builtin_interfaces__msg__Time>:
 8010594:	b538      	push	{r3, r4, r5, lr}
 8010596:	460c      	mov	r4, r1
 8010598:	2301      	movs	r3, #1
 801059a:	7003      	strb	r3, [r0, #0]
 801059c:	2104      	movs	r1, #4
 801059e:	4620      	mov	r0, r4
 80105a0:	f7fb fd18 	bl	800bfd4 <ucdr_alignment>
 80105a4:	1d25      	adds	r5, r4, #4
 80105a6:	4405      	add	r5, r0
 80105a8:	2104      	movs	r1, #4
 80105aa:	4628      	mov	r0, r5
 80105ac:	f7fb fd12 	bl	800bfd4 <ucdr_alignment>
 80105b0:	f1c4 0404 	rsb	r4, r4, #4
 80105b4:	4420      	add	r0, r4
 80105b6:	4428      	add	r0, r5
 80105b8:	bd38      	pop	{r3, r4, r5, pc}
 80105ba:	bf00      	nop

080105bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 80105bc:	4800      	ldr	r0, [pc, #0]	@ (80105c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 80105be:	4770      	bx	lr
 80105c0:	200004dc 	.word	0x200004dc

080105c4 <geometry_msgs__msg__Twist__init>:
 80105c4:	b570      	push	{r4, r5, r6, lr}
 80105c6:	4605      	mov	r5, r0
 80105c8:	b1a8      	cbz	r0, 80105f6 <geometry_msgs__msg__Twist__init+0x32>
 80105ca:	f000 f82b 	bl	8010624 <geometry_msgs__msg__Vector3__init>
 80105ce:	4604      	mov	r4, r0
 80105d0:	b140      	cbz	r0, 80105e4 <geometry_msgs__msg__Twist__init+0x20>
 80105d2:	f105 0618 	add.w	r6, r5, #24
 80105d6:	4630      	mov	r0, r6
 80105d8:	f000 f824 	bl	8010624 <geometry_msgs__msg__Vector3__init>
 80105dc:	4604      	mov	r4, r0
 80105de:	b168      	cbz	r0, 80105fc <geometry_msgs__msg__Twist__init+0x38>
 80105e0:	4620      	mov	r0, r4
 80105e2:	bd70      	pop	{r4, r5, r6, pc}
 80105e4:	4628      	mov	r0, r5
 80105e6:	f000 f821 	bl	801062c <geometry_msgs__msg__Vector3__fini>
 80105ea:	f105 0018 	add.w	r0, r5, #24
 80105ee:	f000 f81d 	bl	801062c <geometry_msgs__msg__Vector3__fini>
 80105f2:	4620      	mov	r0, r4
 80105f4:	bd70      	pop	{r4, r5, r6, pc}
 80105f6:	4604      	mov	r4, r0
 80105f8:	4620      	mov	r0, r4
 80105fa:	bd70      	pop	{r4, r5, r6, pc}
 80105fc:	4628      	mov	r0, r5
 80105fe:	f000 f815 	bl	801062c <geometry_msgs__msg__Vector3__fini>
 8010602:	4630      	mov	r0, r6
 8010604:	f000 f812 	bl	801062c <geometry_msgs__msg__Vector3__fini>
 8010608:	e7ea      	b.n	80105e0 <geometry_msgs__msg__Twist__init+0x1c>
 801060a:	bf00      	nop

0801060c <geometry_msgs__msg__Twist__fini>:
 801060c:	b148      	cbz	r0, 8010622 <geometry_msgs__msg__Twist__fini+0x16>
 801060e:	b510      	push	{r4, lr}
 8010610:	4604      	mov	r4, r0
 8010612:	f000 f80b 	bl	801062c <geometry_msgs__msg__Vector3__fini>
 8010616:	f104 0018 	add.w	r0, r4, #24
 801061a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801061e:	f000 b805 	b.w	801062c <geometry_msgs__msg__Vector3__fini>
 8010622:	4770      	bx	lr

08010624 <geometry_msgs__msg__Vector3__init>:
 8010624:	3800      	subs	r0, #0
 8010626:	bf18      	it	ne
 8010628:	2001      	movne	r0, #1
 801062a:	4770      	bx	lr

0801062c <geometry_msgs__msg__Vector3__fini>:
 801062c:	4770      	bx	lr
 801062e:	bf00      	nop

08010630 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__size_function__PoseWithCovariance__covariance>:
 8010630:	2024      	movs	r0, #36	@ 0x24
 8010632:	4770      	bx	lr

08010634 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__get_const_function__PoseWithCovariance__covariance>:
 8010634:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8010638:	4770      	bx	lr
 801063a:	bf00      	nop

0801063c <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__fetch_function__PoseWithCovariance__covariance>:
 801063c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8010640:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010644:	e9c2 0100 	strd	r0, r1, [r2]
 8010648:	4770      	bx	lr
 801064a:	bf00      	nop

0801064c <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__assign_function__PoseWithCovariance__covariance>:
 801064c:	e9d2 2300 	ldrd	r2, r3, [r2]
 8010650:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8010654:	e9c1 2300 	strd	r2, r3, [r1]
 8010658:	4770      	bx	lr
 801065a:	bf00      	nop

0801065c <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__PoseWithCovariance_init_function>:
 801065c:	f007 bad2 	b.w	8017c04 <geometry_msgs__msg__PoseWithCovariance__init>

08010660 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__PoseWithCovariance_fini_function>:
 8010660:	f007 bae2 	b.w	8017c28 <geometry_msgs__msg__PoseWithCovariance__fini>

08010664 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__get_function__PoseWithCovariance__covariance>:
 8010664:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8010668:	4770      	bx	lr
 801066a:	bf00      	nop

0801066c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>:
 801066c:	b508      	push	{r3, lr}
 801066e:	f007 faf9 	bl	8017c64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 8010672:	4b06      	ldr	r3, [pc, #24]	@ (801068c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x20>)
 8010674:	4906      	ldr	r1, [pc, #24]	@ (8010690 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x24>)
 8010676:	681a      	ldr	r2, [r3, #0]
 8010678:	60c8      	str	r0, [r1, #12]
 801067a:	b10a      	cbz	r2, 8010680 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x14>
 801067c:	4803      	ldr	r0, [pc, #12]	@ (801068c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x20>)
 801067e:	bd08      	pop	{r3, pc}
 8010680:	4a04      	ldr	r2, [pc, #16]	@ (8010694 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x28>)
 8010682:	4802      	ldr	r0, [pc, #8]	@ (801068c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x20>)
 8010684:	6812      	ldr	r2, [r2, #0]
 8010686:	601a      	str	r2, [r3, #0]
 8010688:	bd08      	pop	{r3, pc}
 801068a:	bf00      	nop
 801068c:	2000057c 	.word	0x2000057c
 8010690:	20000504 	.word	0x20000504
 8010694:	20000324 	.word	0x20000324

08010698 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__size_function__TwistWithCovariance__covariance>:
 8010698:	2024      	movs	r0, #36	@ 0x24
 801069a:	4770      	bx	lr

0801069c <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__get_const_function__TwistWithCovariance__covariance>:
 801069c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80106a0:	4770      	bx	lr
 80106a2:	bf00      	nop

080106a4 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__fetch_function__TwistWithCovariance__covariance>:
 80106a4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80106a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80106ac:	e9c2 0100 	strd	r0, r1, [r2]
 80106b0:	4770      	bx	lr
 80106b2:	bf00      	nop

080106b4 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__assign_function__TwistWithCovariance__covariance>:
 80106b4:	e9d2 2300 	ldrd	r2, r3, [r2]
 80106b8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80106bc:	e9c1 2300 	strd	r2, r3, [r1]
 80106c0:	4770      	bx	lr
 80106c2:	bf00      	nop

080106c4 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__TwistWithCovariance_init_function>:
 80106c4:	f007 bab4 	b.w	8017c30 <geometry_msgs__msg__TwistWithCovariance__init>

080106c8 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__TwistWithCovariance_fini_function>:
 80106c8:	f007 bac4 	b.w	8017c54 <geometry_msgs__msg__TwistWithCovariance__fini>

080106cc <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__get_function__TwistWithCovariance__covariance>:
 80106cc:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80106d0:	4770      	bx	lr
 80106d2:	bf00      	nop

080106d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>:
 80106d4:	b508      	push	{r3, lr}
 80106d6:	f7fa f83b 	bl	800a750 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 80106da:	4b06      	ldr	r3, [pc, #24]	@ (80106f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x20>)
 80106dc:	4906      	ldr	r1, [pc, #24]	@ (80106f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x24>)
 80106de:	681a      	ldr	r2, [r3, #0]
 80106e0:	60c8      	str	r0, [r1, #12]
 80106e2:	b10a      	cbz	r2, 80106e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x14>
 80106e4:	4803      	ldr	r0, [pc, #12]	@ (80106f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x20>)
 80106e6:	bd08      	pop	{r3, pc}
 80106e8:	4a04      	ldr	r2, [pc, #16]	@ (80106fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x28>)
 80106ea:	4802      	ldr	r0, [pc, #8]	@ (80106f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x20>)
 80106ec:	6812      	ldr	r2, [r2, #0]
 80106ee:	601a      	str	r2, [r3, #0]
 80106f0:	bd08      	pop	{r3, pc}
 80106f2:	bf00      	nop
 80106f4:	20000600 	.word	0x20000600
 80106f8:	20000588 	.word	0x20000588
 80106fc:	20000324 	.word	0x20000324

08010700 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>:
 8010700:	b538      	push	{r3, r4, r5, lr}
 8010702:	b158      	cbz	r0, 801071c <get_serialized_size_geometry_msgs__msg__PoseWithCovariance+0x1c>
 8010704:	460d      	mov	r5, r1
 8010706:	f007 fad7 	bl	8017cb8 <get_serialized_size_geometry_msgs__msg__Pose>
 801070a:	182c      	adds	r4, r5, r0
 801070c:	2108      	movs	r1, #8
 801070e:	4620      	mov	r0, r4
 8010710:	f7fb fc60 	bl	800bfd4 <ucdr_alignment>
 8010714:	f5c5 7590 	rsb	r5, r5, #288	@ 0x120
 8010718:	4428      	add	r0, r5
 801071a:	4420      	add	r0, r4
 801071c:	bd38      	pop	{r3, r4, r5, pc}
 801071e:	bf00      	nop

08010720 <_PoseWithCovariance__cdr_deserialize>:
 8010720:	b538      	push	{r3, r4, r5, lr}
 8010722:	460c      	mov	r4, r1
 8010724:	b179      	cbz	r1, 8010746 <_PoseWithCovariance__cdr_deserialize+0x26>
 8010726:	4605      	mov	r5, r0
 8010728:	f007 fb36 	bl	8017d98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 801072c:	6843      	ldr	r3, [r0, #4]
 801072e:	4621      	mov	r1, r4
 8010730:	68db      	ldr	r3, [r3, #12]
 8010732:	4628      	mov	r0, r5
 8010734:	4798      	blx	r3
 8010736:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 801073a:	4628      	mov	r0, r5
 801073c:	2224      	movs	r2, #36	@ 0x24
 801073e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010742:	f000 ba3d 	b.w	8010bc0 <ucdr_deserialize_array_double>
 8010746:	4608      	mov	r0, r1
 8010748:	bd38      	pop	{r3, r4, r5, pc}
 801074a:	bf00      	nop

0801074c <_PoseWithCovariance__cdr_serialize>:
 801074c:	b188      	cbz	r0, 8010772 <_PoseWithCovariance__cdr_serialize+0x26>
 801074e:	b538      	push	{r3, r4, r5, lr}
 8010750:	460d      	mov	r5, r1
 8010752:	4604      	mov	r4, r0
 8010754:	f007 fb20 	bl	8017d98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 8010758:	6843      	ldr	r3, [r0, #4]
 801075a:	4629      	mov	r1, r5
 801075c:	689b      	ldr	r3, [r3, #8]
 801075e:	4620      	mov	r0, r4
 8010760:	4798      	blx	r3
 8010762:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 8010766:	4628      	mov	r0, r5
 8010768:	2224      	movs	r2, #36	@ 0x24
 801076a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801076e:	f000 b9d3 	b.w	8010b18 <ucdr_serialize_array_double>
 8010772:	4770      	bx	lr

08010774 <_PoseWithCovariance__get_serialized_size>:
 8010774:	b158      	cbz	r0, 801078e <_PoseWithCovariance__get_serialized_size+0x1a>
 8010776:	b510      	push	{r4, lr}
 8010778:	2100      	movs	r1, #0
 801077a:	f007 fa9d 	bl	8017cb8 <get_serialized_size_geometry_msgs__msg__Pose>
 801077e:	2108      	movs	r1, #8
 8010780:	4604      	mov	r4, r0
 8010782:	f7fb fc27 	bl	800bfd4 <ucdr_alignment>
 8010786:	4420      	add	r0, r4
 8010788:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 801078c:	bd10      	pop	{r4, pc}
 801078e:	4770      	bx	lr

08010790 <_PoseWithCovariance__max_serialized_size>:
 8010790:	b510      	push	{r4, lr}
 8010792:	b082      	sub	sp, #8
 8010794:	2301      	movs	r3, #1
 8010796:	2100      	movs	r1, #0
 8010798:	f10d 0007 	add.w	r0, sp, #7
 801079c:	f88d 3007 	strb.w	r3, [sp, #7]
 80107a0:	f007 faec 	bl	8017d7c <max_serialized_size_geometry_msgs__msg__Pose>
 80107a4:	2108      	movs	r1, #8
 80107a6:	4604      	mov	r4, r0
 80107a8:	f7fb fc14 	bl	800bfd4 <ucdr_alignment>
 80107ac:	4420      	add	r0, r4
 80107ae:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 80107b2:	b002      	add	sp, #8
 80107b4:	bd10      	pop	{r4, pc}
 80107b6:	bf00      	nop

080107b8 <max_serialized_size_geometry_msgs__msg__PoseWithCovariance>:
 80107b8:	b538      	push	{r3, r4, r5, lr}
 80107ba:	2301      	movs	r3, #1
 80107bc:	7003      	strb	r3, [r0, #0]
 80107be:	460c      	mov	r4, r1
 80107c0:	f007 fadc 	bl	8017d7c <max_serialized_size_geometry_msgs__msg__Pose>
 80107c4:	1825      	adds	r5, r4, r0
 80107c6:	2108      	movs	r1, #8
 80107c8:	4628      	mov	r0, r5
 80107ca:	f7fb fc03 	bl	800bfd4 <ucdr_alignment>
 80107ce:	f5c4 7490 	rsb	r4, r4, #288	@ 0x120
 80107d2:	4420      	add	r0, r4
 80107d4:	4428      	add	r0, r5
 80107d6:	bd38      	pop	{r3, r4, r5, pc}

080107d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>:
 80107d8:	4800      	ldr	r0, [pc, #0]	@ (80107dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x4>)
 80107da:	4770      	bx	lr
 80107dc:	2000060c 	.word	0x2000060c

080107e0 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>:
 80107e0:	b538      	push	{r3, r4, r5, lr}
 80107e2:	b158      	cbz	r0, 80107fc <get_serialized_size_geometry_msgs__msg__TwistWithCovariance+0x1c>
 80107e4:	460d      	mov	r5, r1
 80107e6:	f7f9 ffdd 	bl	800a7a4 <get_serialized_size_geometry_msgs__msg__Twist>
 80107ea:	182c      	adds	r4, r5, r0
 80107ec:	2108      	movs	r1, #8
 80107ee:	4620      	mov	r0, r4
 80107f0:	f7fb fbf0 	bl	800bfd4 <ucdr_alignment>
 80107f4:	f5c5 7590 	rsb	r5, r5, #288	@ 0x120
 80107f8:	4428      	add	r0, r5
 80107fa:	4420      	add	r0, r4
 80107fc:	bd38      	pop	{r3, r4, r5, pc}
 80107fe:	bf00      	nop

08010800 <_TwistWithCovariance__cdr_deserialize>:
 8010800:	b538      	push	{r3, r4, r5, lr}
 8010802:	460c      	mov	r4, r1
 8010804:	b179      	cbz	r1, 8010826 <_TwistWithCovariance__cdr_deserialize+0x26>
 8010806:	4605      	mov	r5, r0
 8010808:	f7fa f83c 	bl	800a884 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 801080c:	6843      	ldr	r3, [r0, #4]
 801080e:	4621      	mov	r1, r4
 8010810:	68db      	ldr	r3, [r3, #12]
 8010812:	4628      	mov	r0, r5
 8010814:	4798      	blx	r3
 8010816:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801081a:	4628      	mov	r0, r5
 801081c:	2224      	movs	r2, #36	@ 0x24
 801081e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010822:	f000 b9cd 	b.w	8010bc0 <ucdr_deserialize_array_double>
 8010826:	4608      	mov	r0, r1
 8010828:	bd38      	pop	{r3, r4, r5, pc}
 801082a:	bf00      	nop

0801082c <_TwistWithCovariance__cdr_serialize>:
 801082c:	b188      	cbz	r0, 8010852 <_TwistWithCovariance__cdr_serialize+0x26>
 801082e:	b538      	push	{r3, r4, r5, lr}
 8010830:	460d      	mov	r5, r1
 8010832:	4604      	mov	r4, r0
 8010834:	f7fa f826 	bl	800a884 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8010838:	6843      	ldr	r3, [r0, #4]
 801083a:	4629      	mov	r1, r5
 801083c:	689b      	ldr	r3, [r3, #8]
 801083e:	4620      	mov	r0, r4
 8010840:	4798      	blx	r3
 8010842:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8010846:	4628      	mov	r0, r5
 8010848:	2224      	movs	r2, #36	@ 0x24
 801084a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801084e:	f000 b963 	b.w	8010b18 <ucdr_serialize_array_double>
 8010852:	4770      	bx	lr

08010854 <_TwistWithCovariance__get_serialized_size>:
 8010854:	b158      	cbz	r0, 801086e <_TwistWithCovariance__get_serialized_size+0x1a>
 8010856:	b510      	push	{r4, lr}
 8010858:	2100      	movs	r1, #0
 801085a:	f7f9 ffa3 	bl	800a7a4 <get_serialized_size_geometry_msgs__msg__Twist>
 801085e:	2108      	movs	r1, #8
 8010860:	4604      	mov	r4, r0
 8010862:	f7fb fbb7 	bl	800bfd4 <ucdr_alignment>
 8010866:	4420      	add	r0, r4
 8010868:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 801086c:	bd10      	pop	{r4, pc}
 801086e:	4770      	bx	lr

08010870 <_TwistWithCovariance__max_serialized_size>:
 8010870:	b510      	push	{r4, lr}
 8010872:	b082      	sub	sp, #8
 8010874:	2301      	movs	r3, #1
 8010876:	2100      	movs	r1, #0
 8010878:	f10d 0007 	add.w	r0, sp, #7
 801087c:	f88d 3007 	strb.w	r3, [sp, #7]
 8010880:	f7f9 fff2 	bl	800a868 <max_serialized_size_geometry_msgs__msg__Twist>
 8010884:	2108      	movs	r1, #8
 8010886:	4604      	mov	r4, r0
 8010888:	f7fb fba4 	bl	800bfd4 <ucdr_alignment>
 801088c:	4420      	add	r0, r4
 801088e:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 8010892:	b002      	add	sp, #8
 8010894:	bd10      	pop	{r4, pc}
 8010896:	bf00      	nop

08010898 <max_serialized_size_geometry_msgs__msg__TwistWithCovariance>:
 8010898:	b538      	push	{r3, r4, r5, lr}
 801089a:	2301      	movs	r3, #1
 801089c:	7003      	strb	r3, [r0, #0]
 801089e:	460c      	mov	r4, r1
 80108a0:	f7f9 ffe2 	bl	800a868 <max_serialized_size_geometry_msgs__msg__Twist>
 80108a4:	1825      	adds	r5, r4, r0
 80108a6:	2108      	movs	r1, #8
 80108a8:	4628      	mov	r0, r5
 80108aa:	f7fb fb93 	bl	800bfd4 <ucdr_alignment>
 80108ae:	f5c4 7490 	rsb	r4, r4, #288	@ 0x120
 80108b2:	4420      	add	r0, r4
 80108b4:	4428      	add	r0, r5
 80108b6:	bd38      	pop	{r3, r4, r5, pc}

080108b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>:
 80108b8:	4800      	ldr	r0, [pc, #0]	@ (80108bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x4>)
 80108ba:	4770      	bx	lr
 80108bc:	20000634 	.word	0x20000634

080108c0 <ucdr_serialize_endian_array_char>:
 80108c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108c4:	4619      	mov	r1, r3
 80108c6:	461f      	mov	r7, r3
 80108c8:	4605      	mov	r5, r0
 80108ca:	4690      	mov	r8, r2
 80108cc:	f7fb fb2a 	bl	800bf24 <ucdr_check_buffer_available_for>
 80108d0:	b9e0      	cbnz	r0, 801090c <ucdr_serialize_endian_array_char+0x4c>
 80108d2:	463e      	mov	r6, r7
 80108d4:	e009      	b.n	80108ea <ucdr_serialize_endian_array_char+0x2a>
 80108d6:	68a8      	ldr	r0, [r5, #8]
 80108d8:	f009 fa0b 	bl	8019cf2 <memcpy>
 80108dc:	68ab      	ldr	r3, [r5, #8]
 80108de:	6928      	ldr	r0, [r5, #16]
 80108e0:	4423      	add	r3, r4
 80108e2:	4420      	add	r0, r4
 80108e4:	1b36      	subs	r6, r6, r4
 80108e6:	60ab      	str	r3, [r5, #8]
 80108e8:	6128      	str	r0, [r5, #16]
 80108ea:	4631      	mov	r1, r6
 80108ec:	2201      	movs	r2, #1
 80108ee:	4628      	mov	r0, r5
 80108f0:	f7fb fba0 	bl	800c034 <ucdr_check_final_buffer_behavior_array>
 80108f4:	1bb9      	subs	r1, r7, r6
 80108f6:	4441      	add	r1, r8
 80108f8:	4604      	mov	r4, r0
 80108fa:	4602      	mov	r2, r0
 80108fc:	2800      	cmp	r0, #0
 80108fe:	d1ea      	bne.n	80108d6 <ucdr_serialize_endian_array_char+0x16>
 8010900:	2301      	movs	r3, #1
 8010902:	7da8      	ldrb	r0, [r5, #22]
 8010904:	756b      	strb	r3, [r5, #21]
 8010906:	4058      	eors	r0, r3
 8010908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801090c:	463a      	mov	r2, r7
 801090e:	68a8      	ldr	r0, [r5, #8]
 8010910:	4641      	mov	r1, r8
 8010912:	f009 f9ee 	bl	8019cf2 <memcpy>
 8010916:	68aa      	ldr	r2, [r5, #8]
 8010918:	692b      	ldr	r3, [r5, #16]
 801091a:	443a      	add	r2, r7
 801091c:	443b      	add	r3, r7
 801091e:	60aa      	str	r2, [r5, #8]
 8010920:	612b      	str	r3, [r5, #16]
 8010922:	e7ed      	b.n	8010900 <ucdr_serialize_endian_array_char+0x40>

08010924 <ucdr_deserialize_endian_array_char>:
 8010924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010928:	4619      	mov	r1, r3
 801092a:	461f      	mov	r7, r3
 801092c:	4605      	mov	r5, r0
 801092e:	4690      	mov	r8, r2
 8010930:	f7fb faf8 	bl	800bf24 <ucdr_check_buffer_available_for>
 8010934:	b9e0      	cbnz	r0, 8010970 <ucdr_deserialize_endian_array_char+0x4c>
 8010936:	463e      	mov	r6, r7
 8010938:	e009      	b.n	801094e <ucdr_deserialize_endian_array_char+0x2a>
 801093a:	68a9      	ldr	r1, [r5, #8]
 801093c:	f009 f9d9 	bl	8019cf2 <memcpy>
 8010940:	68ab      	ldr	r3, [r5, #8]
 8010942:	6928      	ldr	r0, [r5, #16]
 8010944:	4423      	add	r3, r4
 8010946:	4420      	add	r0, r4
 8010948:	1b36      	subs	r6, r6, r4
 801094a:	60ab      	str	r3, [r5, #8]
 801094c:	6128      	str	r0, [r5, #16]
 801094e:	2201      	movs	r2, #1
 8010950:	4631      	mov	r1, r6
 8010952:	4628      	mov	r0, r5
 8010954:	f7fb fb6e 	bl	800c034 <ucdr_check_final_buffer_behavior_array>
 8010958:	4604      	mov	r4, r0
 801095a:	1bb8      	subs	r0, r7, r6
 801095c:	4440      	add	r0, r8
 801095e:	4622      	mov	r2, r4
 8010960:	2c00      	cmp	r4, #0
 8010962:	d1ea      	bne.n	801093a <ucdr_deserialize_endian_array_char+0x16>
 8010964:	2301      	movs	r3, #1
 8010966:	7da8      	ldrb	r0, [r5, #22]
 8010968:	756b      	strb	r3, [r5, #21]
 801096a:	4058      	eors	r0, r3
 801096c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010970:	463a      	mov	r2, r7
 8010972:	68a9      	ldr	r1, [r5, #8]
 8010974:	4640      	mov	r0, r8
 8010976:	f009 f9bc 	bl	8019cf2 <memcpy>
 801097a:	68aa      	ldr	r2, [r5, #8]
 801097c:	692b      	ldr	r3, [r5, #16]
 801097e:	443a      	add	r2, r7
 8010980:	443b      	add	r3, r7
 8010982:	60aa      	str	r2, [r5, #8]
 8010984:	612b      	str	r3, [r5, #16]
 8010986:	e7ed      	b.n	8010964 <ucdr_deserialize_endian_array_char+0x40>

08010988 <ucdr_serialize_array_uint8_t>:
 8010988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801098c:	4688      	mov	r8, r1
 801098e:	4611      	mov	r1, r2
 8010990:	4617      	mov	r7, r2
 8010992:	4605      	mov	r5, r0
 8010994:	f7fb fac6 	bl	800bf24 <ucdr_check_buffer_available_for>
 8010998:	b9e0      	cbnz	r0, 80109d4 <ucdr_serialize_array_uint8_t+0x4c>
 801099a:	463e      	mov	r6, r7
 801099c:	e009      	b.n	80109b2 <ucdr_serialize_array_uint8_t+0x2a>
 801099e:	68a8      	ldr	r0, [r5, #8]
 80109a0:	f009 f9a7 	bl	8019cf2 <memcpy>
 80109a4:	68aa      	ldr	r2, [r5, #8]
 80109a6:	692b      	ldr	r3, [r5, #16]
 80109a8:	4422      	add	r2, r4
 80109aa:	4423      	add	r3, r4
 80109ac:	1b36      	subs	r6, r6, r4
 80109ae:	60aa      	str	r2, [r5, #8]
 80109b0:	612b      	str	r3, [r5, #16]
 80109b2:	4631      	mov	r1, r6
 80109b4:	2201      	movs	r2, #1
 80109b6:	4628      	mov	r0, r5
 80109b8:	f7fb fb3c 	bl	800c034 <ucdr_check_final_buffer_behavior_array>
 80109bc:	1bb9      	subs	r1, r7, r6
 80109be:	4441      	add	r1, r8
 80109c0:	4604      	mov	r4, r0
 80109c2:	4602      	mov	r2, r0
 80109c4:	2800      	cmp	r0, #0
 80109c6:	d1ea      	bne.n	801099e <ucdr_serialize_array_uint8_t+0x16>
 80109c8:	2301      	movs	r3, #1
 80109ca:	7da8      	ldrb	r0, [r5, #22]
 80109cc:	756b      	strb	r3, [r5, #21]
 80109ce:	4058      	eors	r0, r3
 80109d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109d4:	463a      	mov	r2, r7
 80109d6:	68a8      	ldr	r0, [r5, #8]
 80109d8:	4641      	mov	r1, r8
 80109da:	f009 f98a 	bl	8019cf2 <memcpy>
 80109de:	68aa      	ldr	r2, [r5, #8]
 80109e0:	692b      	ldr	r3, [r5, #16]
 80109e2:	443a      	add	r2, r7
 80109e4:	443b      	add	r3, r7
 80109e6:	60aa      	str	r2, [r5, #8]
 80109e8:	612b      	str	r3, [r5, #16]
 80109ea:	e7ed      	b.n	80109c8 <ucdr_serialize_array_uint8_t+0x40>

080109ec <ucdr_serialize_endian_array_uint8_t>:
 80109ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109f0:	4619      	mov	r1, r3
 80109f2:	461f      	mov	r7, r3
 80109f4:	4605      	mov	r5, r0
 80109f6:	4690      	mov	r8, r2
 80109f8:	f7fb fa94 	bl	800bf24 <ucdr_check_buffer_available_for>
 80109fc:	b9e0      	cbnz	r0, 8010a38 <ucdr_serialize_endian_array_uint8_t+0x4c>
 80109fe:	463e      	mov	r6, r7
 8010a00:	e009      	b.n	8010a16 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8010a02:	68a8      	ldr	r0, [r5, #8]
 8010a04:	f009 f975 	bl	8019cf2 <memcpy>
 8010a08:	68ab      	ldr	r3, [r5, #8]
 8010a0a:	6928      	ldr	r0, [r5, #16]
 8010a0c:	4423      	add	r3, r4
 8010a0e:	4420      	add	r0, r4
 8010a10:	1b36      	subs	r6, r6, r4
 8010a12:	60ab      	str	r3, [r5, #8]
 8010a14:	6128      	str	r0, [r5, #16]
 8010a16:	4631      	mov	r1, r6
 8010a18:	2201      	movs	r2, #1
 8010a1a:	4628      	mov	r0, r5
 8010a1c:	f7fb fb0a 	bl	800c034 <ucdr_check_final_buffer_behavior_array>
 8010a20:	1bb9      	subs	r1, r7, r6
 8010a22:	4441      	add	r1, r8
 8010a24:	4604      	mov	r4, r0
 8010a26:	4602      	mov	r2, r0
 8010a28:	2800      	cmp	r0, #0
 8010a2a:	d1ea      	bne.n	8010a02 <ucdr_serialize_endian_array_uint8_t+0x16>
 8010a2c:	2301      	movs	r3, #1
 8010a2e:	7da8      	ldrb	r0, [r5, #22]
 8010a30:	756b      	strb	r3, [r5, #21]
 8010a32:	4058      	eors	r0, r3
 8010a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a38:	463a      	mov	r2, r7
 8010a3a:	68a8      	ldr	r0, [r5, #8]
 8010a3c:	4641      	mov	r1, r8
 8010a3e:	f009 f958 	bl	8019cf2 <memcpy>
 8010a42:	68aa      	ldr	r2, [r5, #8]
 8010a44:	692b      	ldr	r3, [r5, #16]
 8010a46:	443a      	add	r2, r7
 8010a48:	443b      	add	r3, r7
 8010a4a:	60aa      	str	r2, [r5, #8]
 8010a4c:	612b      	str	r3, [r5, #16]
 8010a4e:	e7ed      	b.n	8010a2c <ucdr_serialize_endian_array_uint8_t+0x40>

08010a50 <ucdr_deserialize_array_uint8_t>:
 8010a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a54:	4688      	mov	r8, r1
 8010a56:	4611      	mov	r1, r2
 8010a58:	4617      	mov	r7, r2
 8010a5a:	4605      	mov	r5, r0
 8010a5c:	f7fb fa62 	bl	800bf24 <ucdr_check_buffer_available_for>
 8010a60:	b9e0      	cbnz	r0, 8010a9c <ucdr_deserialize_array_uint8_t+0x4c>
 8010a62:	463e      	mov	r6, r7
 8010a64:	e009      	b.n	8010a7a <ucdr_deserialize_array_uint8_t+0x2a>
 8010a66:	68a9      	ldr	r1, [r5, #8]
 8010a68:	f009 f943 	bl	8019cf2 <memcpy>
 8010a6c:	68aa      	ldr	r2, [r5, #8]
 8010a6e:	692b      	ldr	r3, [r5, #16]
 8010a70:	4422      	add	r2, r4
 8010a72:	4423      	add	r3, r4
 8010a74:	1b36      	subs	r6, r6, r4
 8010a76:	60aa      	str	r2, [r5, #8]
 8010a78:	612b      	str	r3, [r5, #16]
 8010a7a:	2201      	movs	r2, #1
 8010a7c:	4631      	mov	r1, r6
 8010a7e:	4628      	mov	r0, r5
 8010a80:	f7fb fad8 	bl	800c034 <ucdr_check_final_buffer_behavior_array>
 8010a84:	4604      	mov	r4, r0
 8010a86:	1bb8      	subs	r0, r7, r6
 8010a88:	4440      	add	r0, r8
 8010a8a:	4622      	mov	r2, r4
 8010a8c:	2c00      	cmp	r4, #0
 8010a8e:	d1ea      	bne.n	8010a66 <ucdr_deserialize_array_uint8_t+0x16>
 8010a90:	2301      	movs	r3, #1
 8010a92:	7da8      	ldrb	r0, [r5, #22]
 8010a94:	756b      	strb	r3, [r5, #21]
 8010a96:	4058      	eors	r0, r3
 8010a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a9c:	463a      	mov	r2, r7
 8010a9e:	68a9      	ldr	r1, [r5, #8]
 8010aa0:	4640      	mov	r0, r8
 8010aa2:	f009 f926 	bl	8019cf2 <memcpy>
 8010aa6:	68aa      	ldr	r2, [r5, #8]
 8010aa8:	692b      	ldr	r3, [r5, #16]
 8010aaa:	443a      	add	r2, r7
 8010aac:	443b      	add	r3, r7
 8010aae:	60aa      	str	r2, [r5, #8]
 8010ab0:	612b      	str	r3, [r5, #16]
 8010ab2:	e7ed      	b.n	8010a90 <ucdr_deserialize_array_uint8_t+0x40>

08010ab4 <ucdr_deserialize_endian_array_uint8_t>:
 8010ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ab8:	4619      	mov	r1, r3
 8010aba:	461f      	mov	r7, r3
 8010abc:	4605      	mov	r5, r0
 8010abe:	4690      	mov	r8, r2
 8010ac0:	f7fb fa30 	bl	800bf24 <ucdr_check_buffer_available_for>
 8010ac4:	b9e0      	cbnz	r0, 8010b00 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8010ac6:	463e      	mov	r6, r7
 8010ac8:	e009      	b.n	8010ade <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8010aca:	68a9      	ldr	r1, [r5, #8]
 8010acc:	f009 f911 	bl	8019cf2 <memcpy>
 8010ad0:	68ab      	ldr	r3, [r5, #8]
 8010ad2:	6928      	ldr	r0, [r5, #16]
 8010ad4:	4423      	add	r3, r4
 8010ad6:	4420      	add	r0, r4
 8010ad8:	1b36      	subs	r6, r6, r4
 8010ada:	60ab      	str	r3, [r5, #8]
 8010adc:	6128      	str	r0, [r5, #16]
 8010ade:	2201      	movs	r2, #1
 8010ae0:	4631      	mov	r1, r6
 8010ae2:	4628      	mov	r0, r5
 8010ae4:	f7fb faa6 	bl	800c034 <ucdr_check_final_buffer_behavior_array>
 8010ae8:	4604      	mov	r4, r0
 8010aea:	1bb8      	subs	r0, r7, r6
 8010aec:	4440      	add	r0, r8
 8010aee:	4622      	mov	r2, r4
 8010af0:	2c00      	cmp	r4, #0
 8010af2:	d1ea      	bne.n	8010aca <ucdr_deserialize_endian_array_uint8_t+0x16>
 8010af4:	2301      	movs	r3, #1
 8010af6:	7da8      	ldrb	r0, [r5, #22]
 8010af8:	756b      	strb	r3, [r5, #21]
 8010afa:	4058      	eors	r0, r3
 8010afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b00:	463a      	mov	r2, r7
 8010b02:	68a9      	ldr	r1, [r5, #8]
 8010b04:	4640      	mov	r0, r8
 8010b06:	f009 f8f4 	bl	8019cf2 <memcpy>
 8010b0a:	68aa      	ldr	r2, [r5, #8]
 8010b0c:	692b      	ldr	r3, [r5, #16]
 8010b0e:	443a      	add	r2, r7
 8010b10:	443b      	add	r3, r7
 8010b12:	60aa      	str	r2, [r5, #8]
 8010b14:	612b      	str	r3, [r5, #16]
 8010b16:	e7ed      	b.n	8010af4 <ucdr_deserialize_endian_array_uint8_t+0x40>

08010b18 <ucdr_serialize_array_double>:
 8010b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b1c:	460e      	mov	r6, r1
 8010b1e:	2108      	movs	r1, #8
 8010b20:	4604      	mov	r4, r0
 8010b22:	4617      	mov	r7, r2
 8010b24:	f7fb fa5e 	bl	800bfe4 <ucdr_buffer_alignment>
 8010b28:	4601      	mov	r1, r0
 8010b2a:	4620      	mov	r0, r4
 8010b2c:	7d65      	ldrb	r5, [r4, #21]
 8010b2e:	f7fb fa9d 	bl	800c06c <ucdr_advance_buffer>
 8010b32:	7d21      	ldrb	r1, [r4, #20]
 8010b34:	7565      	strb	r5, [r4, #21]
 8010b36:	2901      	cmp	r1, #1
 8010b38:	d010      	beq.n	8010b5c <ucdr_serialize_array_double+0x44>
 8010b3a:	b157      	cbz	r7, 8010b52 <ucdr_serialize_array_double+0x3a>
 8010b3c:	2500      	movs	r5, #0
 8010b3e:	e000      	b.n	8010b42 <ucdr_serialize_array_double+0x2a>
 8010b40:	7d21      	ldrb	r1, [r4, #20]
 8010b42:	ecb6 0b02 	vldmia	r6!, {d0}
 8010b46:	4620      	mov	r0, r4
 8010b48:	3501      	adds	r5, #1
 8010b4a:	f7fa ff85 	bl	800ba58 <ucdr_serialize_endian_double>
 8010b4e:	42af      	cmp	r7, r5
 8010b50:	d1f6      	bne.n	8010b40 <ucdr_serialize_array_double+0x28>
 8010b52:	7da0      	ldrb	r0, [r4, #22]
 8010b54:	f080 0001 	eor.w	r0, r0, #1
 8010b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b5c:	00ff      	lsls	r7, r7, #3
 8010b5e:	4639      	mov	r1, r7
 8010b60:	4620      	mov	r0, r4
 8010b62:	f7fb f9df 	bl	800bf24 <ucdr_check_buffer_available_for>
 8010b66:	b9f8      	cbnz	r0, 8010ba8 <ucdr_serialize_array_double+0x90>
 8010b68:	46b8      	mov	r8, r7
 8010b6a:	e00a      	b.n	8010b82 <ucdr_serialize_array_double+0x6a>
 8010b6c:	68a0      	ldr	r0, [r4, #8]
 8010b6e:	f009 f8c0 	bl	8019cf2 <memcpy>
 8010b72:	68a2      	ldr	r2, [r4, #8]
 8010b74:	6923      	ldr	r3, [r4, #16]
 8010b76:	442a      	add	r2, r5
 8010b78:	442b      	add	r3, r5
 8010b7a:	eba8 0805 	sub.w	r8, r8, r5
 8010b7e:	60a2      	str	r2, [r4, #8]
 8010b80:	6123      	str	r3, [r4, #16]
 8010b82:	4641      	mov	r1, r8
 8010b84:	2208      	movs	r2, #8
 8010b86:	4620      	mov	r0, r4
 8010b88:	f7fb fa54 	bl	800c034 <ucdr_check_final_buffer_behavior_array>
 8010b8c:	eba7 0108 	sub.w	r1, r7, r8
 8010b90:	4431      	add	r1, r6
 8010b92:	4605      	mov	r5, r0
 8010b94:	4602      	mov	r2, r0
 8010b96:	2800      	cmp	r0, #0
 8010b98:	d1e8      	bne.n	8010b6c <ucdr_serialize_array_double+0x54>
 8010b9a:	7da0      	ldrb	r0, [r4, #22]
 8010b9c:	2308      	movs	r3, #8
 8010b9e:	7563      	strb	r3, [r4, #21]
 8010ba0:	f080 0001 	eor.w	r0, r0, #1
 8010ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ba8:	463a      	mov	r2, r7
 8010baa:	68a0      	ldr	r0, [r4, #8]
 8010bac:	4631      	mov	r1, r6
 8010bae:	f009 f8a0 	bl	8019cf2 <memcpy>
 8010bb2:	68a2      	ldr	r2, [r4, #8]
 8010bb4:	6923      	ldr	r3, [r4, #16]
 8010bb6:	443a      	add	r2, r7
 8010bb8:	441f      	add	r7, r3
 8010bba:	60a2      	str	r2, [r4, #8]
 8010bbc:	6127      	str	r7, [r4, #16]
 8010bbe:	e7ec      	b.n	8010b9a <ucdr_serialize_array_double+0x82>

08010bc0 <ucdr_deserialize_array_double>:
 8010bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bc4:	460e      	mov	r6, r1
 8010bc6:	2108      	movs	r1, #8
 8010bc8:	4604      	mov	r4, r0
 8010bca:	4617      	mov	r7, r2
 8010bcc:	f7fb fa0a 	bl	800bfe4 <ucdr_buffer_alignment>
 8010bd0:	4601      	mov	r1, r0
 8010bd2:	4620      	mov	r0, r4
 8010bd4:	7d65      	ldrb	r5, [r4, #21]
 8010bd6:	f7fb fa49 	bl	800c06c <ucdr_advance_buffer>
 8010bda:	7d21      	ldrb	r1, [r4, #20]
 8010bdc:	7565      	strb	r5, [r4, #21]
 8010bde:	2901      	cmp	r1, #1
 8010be0:	d011      	beq.n	8010c06 <ucdr_deserialize_array_double+0x46>
 8010be2:	b15f      	cbz	r7, 8010bfc <ucdr_deserialize_array_double+0x3c>
 8010be4:	2500      	movs	r5, #0
 8010be6:	e000      	b.n	8010bea <ucdr_deserialize_array_double+0x2a>
 8010be8:	7d21      	ldrb	r1, [r4, #20]
 8010bea:	4632      	mov	r2, r6
 8010bec:	4620      	mov	r0, r4
 8010bee:	3501      	adds	r5, #1
 8010bf0:	f7fb f8ca 	bl	800bd88 <ucdr_deserialize_endian_double>
 8010bf4:	42af      	cmp	r7, r5
 8010bf6:	f106 0608 	add.w	r6, r6, #8
 8010bfa:	d1f5      	bne.n	8010be8 <ucdr_deserialize_array_double+0x28>
 8010bfc:	7da0      	ldrb	r0, [r4, #22]
 8010bfe:	f080 0001 	eor.w	r0, r0, #1
 8010c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c06:	00ff      	lsls	r7, r7, #3
 8010c08:	4639      	mov	r1, r7
 8010c0a:	4620      	mov	r0, r4
 8010c0c:	f7fb f98a 	bl	800bf24 <ucdr_check_buffer_available_for>
 8010c10:	b9f8      	cbnz	r0, 8010c52 <ucdr_deserialize_array_double+0x92>
 8010c12:	46b8      	mov	r8, r7
 8010c14:	e00a      	b.n	8010c2c <ucdr_deserialize_array_double+0x6c>
 8010c16:	68a1      	ldr	r1, [r4, #8]
 8010c18:	f009 f86b 	bl	8019cf2 <memcpy>
 8010c1c:	68a2      	ldr	r2, [r4, #8]
 8010c1e:	6923      	ldr	r3, [r4, #16]
 8010c20:	442a      	add	r2, r5
 8010c22:	442b      	add	r3, r5
 8010c24:	eba8 0805 	sub.w	r8, r8, r5
 8010c28:	60a2      	str	r2, [r4, #8]
 8010c2a:	6123      	str	r3, [r4, #16]
 8010c2c:	2208      	movs	r2, #8
 8010c2e:	4641      	mov	r1, r8
 8010c30:	4620      	mov	r0, r4
 8010c32:	f7fb f9ff 	bl	800c034 <ucdr_check_final_buffer_behavior_array>
 8010c36:	4605      	mov	r5, r0
 8010c38:	eba7 0008 	sub.w	r0, r7, r8
 8010c3c:	4430      	add	r0, r6
 8010c3e:	462a      	mov	r2, r5
 8010c40:	2d00      	cmp	r5, #0
 8010c42:	d1e8      	bne.n	8010c16 <ucdr_deserialize_array_double+0x56>
 8010c44:	7da0      	ldrb	r0, [r4, #22]
 8010c46:	2308      	movs	r3, #8
 8010c48:	7563      	strb	r3, [r4, #21]
 8010c4a:	f080 0001 	eor.w	r0, r0, #1
 8010c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c52:	463a      	mov	r2, r7
 8010c54:	68a1      	ldr	r1, [r4, #8]
 8010c56:	4630      	mov	r0, r6
 8010c58:	f009 f84b 	bl	8019cf2 <memcpy>
 8010c5c:	68a2      	ldr	r2, [r4, #8]
 8010c5e:	6923      	ldr	r3, [r4, #16]
 8010c60:	443a      	add	r2, r7
 8010c62:	441f      	add	r7, r3
 8010c64:	60a2      	str	r2, [r4, #8]
 8010c66:	6127      	str	r7, [r4, #16]
 8010c68:	e7ec      	b.n	8010c44 <ucdr_deserialize_array_double+0x84>
 8010c6a:	bf00      	nop

08010c6c <ucdr_serialize_sequence_char>:
 8010c6c:	b570      	push	{r4, r5, r6, lr}
 8010c6e:	4615      	mov	r5, r2
 8010c70:	460e      	mov	r6, r1
 8010c72:	7d01      	ldrb	r1, [r0, #20]
 8010c74:	4604      	mov	r4, r0
 8010c76:	f7fa f975 	bl	800af64 <ucdr_serialize_endian_uint32_t>
 8010c7a:	b90d      	cbnz	r5, 8010c80 <ucdr_serialize_sequence_char+0x14>
 8010c7c:	2001      	movs	r0, #1
 8010c7e:	bd70      	pop	{r4, r5, r6, pc}
 8010c80:	7d21      	ldrb	r1, [r4, #20]
 8010c82:	462b      	mov	r3, r5
 8010c84:	4632      	mov	r2, r6
 8010c86:	4620      	mov	r0, r4
 8010c88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010c8c:	f7ff be18 	b.w	80108c0 <ucdr_serialize_endian_array_char>

08010c90 <ucdr_deserialize_sequence_char>:
 8010c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c94:	461d      	mov	r5, r3
 8010c96:	4616      	mov	r6, r2
 8010c98:	460f      	mov	r7, r1
 8010c9a:	461a      	mov	r2, r3
 8010c9c:	7d01      	ldrb	r1, [r0, #20]
 8010c9e:	4604      	mov	r4, r0
 8010ca0:	f7fa fa88 	bl	800b1b4 <ucdr_deserialize_endian_uint32_t>
 8010ca4:	682b      	ldr	r3, [r5, #0]
 8010ca6:	429e      	cmp	r6, r3
 8010ca8:	bf3c      	itt	cc
 8010caa:	2201      	movcc	r2, #1
 8010cac:	75a2      	strbcc	r2, [r4, #22]
 8010cae:	b913      	cbnz	r3, 8010cb6 <ucdr_deserialize_sequence_char+0x26>
 8010cb0:	2001      	movs	r0, #1
 8010cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cb6:	7d21      	ldrb	r1, [r4, #20]
 8010cb8:	463a      	mov	r2, r7
 8010cba:	4620      	mov	r0, r4
 8010cbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010cc0:	f7ff be30 	b.w	8010924 <ucdr_deserialize_endian_array_char>

08010cc4 <ucdr_serialize_sequence_uint8_t>:
 8010cc4:	b570      	push	{r4, r5, r6, lr}
 8010cc6:	4615      	mov	r5, r2
 8010cc8:	460e      	mov	r6, r1
 8010cca:	7d01      	ldrb	r1, [r0, #20]
 8010ccc:	4604      	mov	r4, r0
 8010cce:	f7fa f949 	bl	800af64 <ucdr_serialize_endian_uint32_t>
 8010cd2:	b90d      	cbnz	r5, 8010cd8 <ucdr_serialize_sequence_uint8_t+0x14>
 8010cd4:	2001      	movs	r0, #1
 8010cd6:	bd70      	pop	{r4, r5, r6, pc}
 8010cd8:	7d21      	ldrb	r1, [r4, #20]
 8010cda:	462b      	mov	r3, r5
 8010cdc:	4632      	mov	r2, r6
 8010cde:	4620      	mov	r0, r4
 8010ce0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010ce4:	f7ff be82 	b.w	80109ec <ucdr_serialize_endian_array_uint8_t>

08010ce8 <ucdr_deserialize_sequence_uint8_t>:
 8010ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cec:	461d      	mov	r5, r3
 8010cee:	4616      	mov	r6, r2
 8010cf0:	460f      	mov	r7, r1
 8010cf2:	461a      	mov	r2, r3
 8010cf4:	7d01      	ldrb	r1, [r0, #20]
 8010cf6:	4604      	mov	r4, r0
 8010cf8:	f7fa fa5c 	bl	800b1b4 <ucdr_deserialize_endian_uint32_t>
 8010cfc:	682b      	ldr	r3, [r5, #0]
 8010cfe:	429e      	cmp	r6, r3
 8010d00:	bf3c      	itt	cc
 8010d02:	2201      	movcc	r2, #1
 8010d04:	75a2      	strbcc	r2, [r4, #22]
 8010d06:	b913      	cbnz	r3, 8010d0e <ucdr_deserialize_sequence_uint8_t+0x26>
 8010d08:	2001      	movs	r0, #1
 8010d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d0e:	7d21      	ldrb	r1, [r4, #20]
 8010d10:	463a      	mov	r2, r7
 8010d12:	4620      	mov	r0, r4
 8010d14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d18:	f7ff becc 	b.w	8010ab4 <ucdr_deserialize_endian_array_uint8_t>

08010d1c <uxr_buffer_delete_entity>:
 8010d1c:	b510      	push	{r4, lr}
 8010d1e:	2300      	movs	r3, #0
 8010d20:	b08e      	sub	sp, #56	@ 0x38
 8010d22:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8010d26:	2303      	movs	r3, #3
 8010d28:	9300      	str	r3, [sp, #0]
 8010d2a:	2204      	movs	r2, #4
 8010d2c:	ab06      	add	r3, sp, #24
 8010d2e:	4604      	mov	r4, r0
 8010d30:	9103      	str	r1, [sp, #12]
 8010d32:	f001 fc71 	bl	8012618 <uxr_prepare_stream_to_write_submessage>
 8010d36:	b918      	cbnz	r0, 8010d40 <uxr_buffer_delete_entity+0x24>
 8010d38:	4604      	mov	r4, r0
 8010d3a:	4620      	mov	r0, r4
 8010d3c:	b00e      	add	sp, #56	@ 0x38
 8010d3e:	bd10      	pop	{r4, pc}
 8010d40:	9902      	ldr	r1, [sp, #8]
 8010d42:	aa05      	add	r2, sp, #20
 8010d44:	4620      	mov	r0, r4
 8010d46:	f001 fd9d 	bl	8012884 <uxr_init_base_object_request>
 8010d4a:	a905      	add	r1, sp, #20
 8010d4c:	4604      	mov	r4, r0
 8010d4e:	a806      	add	r0, sp, #24
 8010d50:	f003 fc94 	bl	801467c <uxr_serialize_DELETE_Payload>
 8010d54:	4620      	mov	r0, r4
 8010d56:	b00e      	add	sp, #56	@ 0x38
 8010d58:	bd10      	pop	{r4, pc}
 8010d5a:	bf00      	nop

08010d5c <uxr_common_create_entity>:
 8010d5c:	b510      	push	{r4, lr}
 8010d5e:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8010d62:	b08c      	sub	sp, #48	@ 0x30
 8010d64:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8010d68:	f1bc 0f01 	cmp.w	ip, #1
 8010d6c:	bf0c      	ite	eq
 8010d6e:	f003 0201 	andeq.w	r2, r3, #1
 8010d72:	2200      	movne	r2, #0
 8010d74:	330e      	adds	r3, #14
 8010d76:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8010d7a:	9101      	str	r1, [sp, #4]
 8010d7c:	441a      	add	r2, r3
 8010d7e:	2301      	movs	r3, #1
 8010d80:	9300      	str	r3, [sp, #0]
 8010d82:	9903      	ldr	r1, [sp, #12]
 8010d84:	ab04      	add	r3, sp, #16
 8010d86:	b292      	uxth	r2, r2
 8010d88:	4604      	mov	r4, r0
 8010d8a:	f001 fc45 	bl	8012618 <uxr_prepare_stream_to_write_submessage>
 8010d8e:	b918      	cbnz	r0, 8010d98 <uxr_common_create_entity+0x3c>
 8010d90:	4604      	mov	r4, r0
 8010d92:	4620      	mov	r0, r4
 8010d94:	b00c      	add	sp, #48	@ 0x30
 8010d96:	bd10      	pop	{r4, pc}
 8010d98:	9902      	ldr	r1, [sp, #8]
 8010d9a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010d9c:	4620      	mov	r0, r4
 8010d9e:	f001 fd71 	bl	8012884 <uxr_init_base_object_request>
 8010da2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010da4:	4604      	mov	r4, r0
 8010da6:	a804      	add	r0, sp, #16
 8010da8:	f003 fbb0 	bl	801450c <uxr_serialize_CREATE_Payload>
 8010dac:	4620      	mov	r0, r4
 8010dae:	b00c      	add	sp, #48	@ 0x30
 8010db0:	bd10      	pop	{r4, pc}
 8010db2:	bf00      	nop

08010db4 <uxr_buffer_create_participant_bin>:
 8010db4:	b570      	push	{r4, r5, r6, lr}
 8010db6:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8010dba:	ac11      	add	r4, sp, #68	@ 0x44
 8010dbc:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8010dc0:	2303      	movs	r3, #3
 8010dc2:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8010dc6:	7223      	strb	r3, [r4, #8]
 8010dc8:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8010dca:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8010dce:	2201      	movs	r2, #1
 8010dd0:	2100      	movs	r1, #0
 8010dd2:	4605      	mov	r5, r0
 8010dd4:	7122      	strb	r2, [r4, #4]
 8010dd6:	f88d 1014 	strb.w	r1, [sp, #20]
 8010dda:	b1cb      	cbz	r3, 8010e10 <uxr_buffer_create_participant_bin+0x5c>
 8010ddc:	f88d 201c 	strb.w	r2, [sp, #28]
 8010de0:	9308      	str	r3, [sp, #32]
 8010de2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010de6:	a915      	add	r1, sp, #84	@ 0x54
 8010de8:	a809      	add	r0, sp, #36	@ 0x24
 8010dea:	f7fb f8ef 	bl	800bfcc <ucdr_init_buffer>
 8010dee:	a905      	add	r1, sp, #20
 8010df0:	a809      	add	r0, sp, #36	@ 0x24
 8010df2:	f002 ff6d 	bl	8013cd0 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8010df6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010df8:	9600      	str	r6, [sp, #0]
 8010dfa:	9401      	str	r4, [sp, #4]
 8010dfc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010e00:	60e3      	str	r3, [r4, #12]
 8010e02:	4628      	mov	r0, r5
 8010e04:	b29b      	uxth	r3, r3
 8010e06:	f7ff ffa9 	bl	8010d5c <uxr_common_create_entity>
 8010e0a:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8010e0e:	bd70      	pop	{r4, r5, r6, pc}
 8010e10:	f88d 301c 	strb.w	r3, [sp, #28]
 8010e14:	e7e5      	b.n	8010de2 <uxr_buffer_create_participant_bin+0x2e>
 8010e16:	bf00      	nop

08010e18 <uxr_buffer_create_topic_bin>:
 8010e18:	b570      	push	{r4, r5, r6, lr}
 8010e1a:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8010e1e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010e22:	9105      	str	r1, [sp, #20]
 8010e24:	4605      	mov	r5, r0
 8010e26:	a997      	add	r1, sp, #604	@ 0x25c
 8010e28:	4618      	mov	r0, r3
 8010e2a:	2302      	movs	r3, #2
 8010e2c:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8010e30:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8010e34:	f000 fa58 	bl	80112e8 <uxr_object_id_to_raw>
 8010e38:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8010e3a:	9306      	str	r3, [sp, #24]
 8010e3c:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8010e3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010e40:	2303      	movs	r3, #3
 8010e42:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8010e46:	2301      	movs	r3, #1
 8010e48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010e4c:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8010e50:	a917      	add	r1, sp, #92	@ 0x5c
 8010e52:	2300      	movs	r3, #0
 8010e54:	a80b      	add	r0, sp, #44	@ 0x2c
 8010e56:	f88d 301c 	strb.w	r3, [sp, #28]
 8010e5a:	f7fb f8b7 	bl	800bfcc <ucdr_init_buffer>
 8010e5e:	a906      	add	r1, sp, #24
 8010e60:	a80b      	add	r0, sp, #44	@ 0x2c
 8010e62:	f002 ff57 	bl	8013d14 <uxr_serialize_OBJK_Topic_Binary>
 8010e66:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e68:	9316      	str	r3, [sp, #88]	@ 0x58
 8010e6a:	ac13      	add	r4, sp, #76	@ 0x4c
 8010e6c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010e70:	9600      	str	r6, [sp, #0]
 8010e72:	9401      	str	r4, [sp, #4]
 8010e74:	b29b      	uxth	r3, r3
 8010e76:	4628      	mov	r0, r5
 8010e78:	f7ff ff70 	bl	8010d5c <uxr_common_create_entity>
 8010e7c:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8010e80:	bd70      	pop	{r4, r5, r6, pc}
 8010e82:	bf00      	nop

08010e84 <uxr_buffer_create_publisher_bin>:
 8010e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e86:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8010e8a:	4605      	mov	r5, r0
 8010e8c:	9105      	str	r1, [sp, #20]
 8010e8e:	4618      	mov	r0, r3
 8010e90:	2603      	movs	r6, #3
 8010e92:	a992      	add	r1, sp, #584	@ 0x248
 8010e94:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010e98:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8010e9c:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8010ea0:	f000 fa22 	bl	80112e8 <uxr_object_id_to_raw>
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010eaa:	a912      	add	r1, sp, #72	@ 0x48
 8010eac:	a806      	add	r0, sp, #24
 8010eae:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8010eb2:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8010eb6:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8010eba:	f7fb f887 	bl	800bfcc <ucdr_init_buffer>
 8010ebe:	a993      	add	r1, sp, #588	@ 0x24c
 8010ec0:	a806      	add	r0, sp, #24
 8010ec2:	f002 ffdb 	bl	8013e7c <uxr_serialize_OBJK_Publisher_Binary>
 8010ec6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010ec8:	9311      	str	r3, [sp, #68]	@ 0x44
 8010eca:	ac0e      	add	r4, sp, #56	@ 0x38
 8010ecc:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010ed0:	9700      	str	r7, [sp, #0]
 8010ed2:	9401      	str	r4, [sp, #4]
 8010ed4:	b29b      	uxth	r3, r3
 8010ed6:	4628      	mov	r0, r5
 8010ed8:	f7ff ff40 	bl	8010d5c <uxr_common_create_entity>
 8010edc:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8010ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ee2:	bf00      	nop

08010ee4 <uxr_buffer_create_subscriber_bin>:
 8010ee4:	b570      	push	{r4, r5, r6, lr}
 8010ee6:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 8010eea:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010eee:	9105      	str	r1, [sp, #20]
 8010ef0:	4605      	mov	r5, r0
 8010ef2:	a992      	add	r1, sp, #584	@ 0x248
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	2304      	movs	r3, #4
 8010ef8:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 8010efc:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 8010f00:	f000 f9f2 	bl	80112e8 <uxr_object_id_to_raw>
 8010f04:	2300      	movs	r3, #0
 8010f06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010f0a:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8010f0e:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8010f12:	a912      	add	r1, sp, #72	@ 0x48
 8010f14:	2303      	movs	r3, #3
 8010f16:	a806      	add	r0, sp, #24
 8010f18:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8010f1c:	f7fb f856 	bl	800bfcc <ucdr_init_buffer>
 8010f20:	a993      	add	r1, sp, #588	@ 0x24c
 8010f22:	a806      	add	r0, sp, #24
 8010f24:	f003 f85a 	bl	8013fdc <uxr_serialize_OBJK_Subscriber_Binary>
 8010f28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010f2a:	9311      	str	r3, [sp, #68]	@ 0x44
 8010f2c:	ac0e      	add	r4, sp, #56	@ 0x38
 8010f2e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010f32:	9600      	str	r6, [sp, #0]
 8010f34:	9401      	str	r4, [sp, #4]
 8010f36:	b29b      	uxth	r3, r3
 8010f38:	4628      	mov	r0, r5
 8010f3a:	f7ff ff0f 	bl	8010d5c <uxr_common_create_entity>
 8010f3e:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 8010f42:	bd70      	pop	{r4, r5, r6, pc}

08010f44 <uxr_buffer_create_datawriter_bin>:
 8010f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f48:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8010f4c:	ac1d      	add	r4, sp, #116	@ 0x74
 8010f4e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010f52:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 8010f56:	9105      	str	r1, [sp, #20]
 8010f58:	4606      	mov	r6, r0
 8010f5a:	a9a1      	add	r1, sp, #644	@ 0x284
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	2305      	movs	r3, #5
 8010f60:	7123      	strb	r3, [r4, #4]
 8010f62:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 8010f66:	2703      	movs	r7, #3
 8010f68:	f000 f9be 	bl	80112e8 <uxr_object_id_to_raw>
 8010f6c:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8010f6e:	7227      	strb	r7, [r4, #8]
 8010f70:	a90e      	add	r1, sp, #56	@ 0x38
 8010f72:	f000 f9b9 	bl	80112e8 <uxr_object_id_to_raw>
 8010f76:	2300      	movs	r3, #0
 8010f78:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8010f7c:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 8010f80:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8010f84:	3d00      	subs	r5, #0
 8010f86:	bf18      	it	ne
 8010f88:	2501      	movne	r5, #1
 8010f8a:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8010f8e:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8010f92:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8010f96:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010f9a:	2301      	movs	r3, #1
 8010f9c:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8010fa0:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8010fa4:	bb8a      	cbnz	r2, 801100a <uxr_buffer_create_datawriter_bin+0xc6>
 8010fa6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010faa:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8010fae:	f04f 0c13 	mov.w	ip, #19
 8010fb2:	250b      	movs	r5, #11
 8010fb4:	2221      	movs	r2, #33	@ 0x21
 8010fb6:	2111      	movs	r1, #17
 8010fb8:	2009      	movs	r0, #9
 8010fba:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 8010fbe:	b923      	cbnz	r3, 8010fca <uxr_buffer_create_datawriter_bin+0x86>
 8010fc0:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8010fc4:	4672      	mov	r2, lr
 8010fc6:	4661      	mov	r1, ip
 8010fc8:	4628      	mov	r0, r5
 8010fca:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 8010fce:	2b01      	cmp	r3, #1
 8010fd0:	d025      	beq.n	801101e <uxr_buffer_create_datawriter_bin+0xda>
 8010fd2:	2b03      	cmp	r3, #3
 8010fd4:	d029      	beq.n	801102a <uxr_buffer_create_datawriter_bin+0xe6>
 8010fd6:	b32b      	cbz	r3, 8011024 <uxr_buffer_create_datawriter_bin+0xe0>
 8010fd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010fdc:	a921      	add	r1, sp, #132	@ 0x84
 8010fde:	a806      	add	r0, sp, #24
 8010fe0:	f7fa fff4 	bl	800bfcc <ucdr_init_buffer>
 8010fe4:	a90e      	add	r1, sp, #56	@ 0x38
 8010fe6:	a806      	add	r0, sp, #24
 8010fe8:	f003 f8aa 	bl	8014140 <uxr_serialize_OBJK_DataWriter_Binary>
 8010fec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010fee:	f8cd 8000 	str.w	r8, [sp]
 8010ff2:	9401      	str	r4, [sp, #4]
 8010ff4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010ff8:	60e3      	str	r3, [r4, #12]
 8010ffa:	4630      	mov	r0, r6
 8010ffc:	b29b      	uxth	r3, r3
 8010ffe:	f7ff fead 	bl	8010d5c <uxr_common_create_entity>
 8011002:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8011006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801100a:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 801100e:	f04f 0c12 	mov.w	ip, #18
 8011012:	250a      	movs	r5, #10
 8011014:	2220      	movs	r2, #32
 8011016:	2110      	movs	r1, #16
 8011018:	2008      	movs	r0, #8
 801101a:	2702      	movs	r7, #2
 801101c:	e7cd      	b.n	8010fba <uxr_buffer_create_datawriter_bin+0x76>
 801101e:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8011022:	e7d9      	b.n	8010fd8 <uxr_buffer_create_datawriter_bin+0x94>
 8011024:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8011028:	e7d6      	b.n	8010fd8 <uxr_buffer_create_datawriter_bin+0x94>
 801102a:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801102e:	e7d3      	b.n	8010fd8 <uxr_buffer_create_datawriter_bin+0x94>

08011030 <uxr_buffer_create_datareader_bin>:
 8011030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011034:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8011038:	ac1f      	add	r4, sp, #124	@ 0x7c
 801103a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801103e:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 8011042:	9105      	str	r1, [sp, #20]
 8011044:	4606      	mov	r6, r0
 8011046:	a9a3      	add	r1, sp, #652	@ 0x28c
 8011048:	4618      	mov	r0, r3
 801104a:	2306      	movs	r3, #6
 801104c:	7123      	strb	r3, [r4, #4]
 801104e:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 8011052:	2703      	movs	r7, #3
 8011054:	f000 f948 	bl	80112e8 <uxr_object_id_to_raw>
 8011058:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 801105a:	7227      	strb	r7, [r4, #8]
 801105c:	a90e      	add	r1, sp, #56	@ 0x38
 801105e:	f000 f943 	bl	80112e8 <uxr_object_id_to_raw>
 8011062:	2300      	movs	r3, #0
 8011064:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8011068:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 801106c:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 8011070:	3d00      	subs	r5, #0
 8011072:	bf18      	it	ne
 8011074:	2501      	movne	r5, #1
 8011076:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 801107a:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 801107e:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8011082:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8011086:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801108a:	2301      	movs	r3, #1
 801108c:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8011090:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8011094:	bb8a      	cbnz	r2, 80110fa <uxr_buffer_create_datareader_bin+0xca>
 8011096:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801109a:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 801109e:	f04f 0c13 	mov.w	ip, #19
 80110a2:	250b      	movs	r5, #11
 80110a4:	2221      	movs	r2, #33	@ 0x21
 80110a6:	2111      	movs	r1, #17
 80110a8:	2009      	movs	r0, #9
 80110aa:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 80110ae:	b923      	cbnz	r3, 80110ba <uxr_buffer_create_datareader_bin+0x8a>
 80110b0:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 80110b4:	4672      	mov	r2, lr
 80110b6:	4661      	mov	r1, ip
 80110b8:	4628      	mov	r0, r5
 80110ba:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 80110be:	2b01      	cmp	r3, #1
 80110c0:	d025      	beq.n	801110e <uxr_buffer_create_datareader_bin+0xde>
 80110c2:	2b03      	cmp	r3, #3
 80110c4:	d029      	beq.n	801111a <uxr_buffer_create_datareader_bin+0xea>
 80110c6:	b32b      	cbz	r3, 8011114 <uxr_buffer_create_datareader_bin+0xe4>
 80110c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80110cc:	a923      	add	r1, sp, #140	@ 0x8c
 80110ce:	a806      	add	r0, sp, #24
 80110d0:	f7fa ff7c 	bl	800bfcc <ucdr_init_buffer>
 80110d4:	a90e      	add	r1, sp, #56	@ 0x38
 80110d6:	a806      	add	r0, sp, #24
 80110d8:	f002 fff6 	bl	80140c8 <uxr_serialize_OBJK_DataReader_Binary>
 80110dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80110de:	f8cd 8000 	str.w	r8, [sp]
 80110e2:	9401      	str	r4, [sp, #4]
 80110e4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80110e8:	60e3      	str	r3, [r4, #12]
 80110ea:	4630      	mov	r0, r6
 80110ec:	b29b      	uxth	r3, r3
 80110ee:	f7ff fe35 	bl	8010d5c <uxr_common_create_entity>
 80110f2:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 80110f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110fa:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 80110fe:	f04f 0c12 	mov.w	ip, #18
 8011102:	250a      	movs	r5, #10
 8011104:	2220      	movs	r2, #32
 8011106:	2110      	movs	r1, #16
 8011108:	2008      	movs	r0, #8
 801110a:	2702      	movs	r7, #2
 801110c:	e7cd      	b.n	80110aa <uxr_buffer_create_datareader_bin+0x7a>
 801110e:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8011112:	e7d9      	b.n	80110c8 <uxr_buffer_create_datareader_bin+0x98>
 8011114:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8011118:	e7d6      	b.n	80110c8 <uxr_buffer_create_datareader_bin+0x98>
 801111a:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801111e:	e7d3      	b.n	80110c8 <uxr_buffer_create_datareader_bin+0x98>

08011120 <get_custom_error>:
 8011120:	4b01      	ldr	r3, [pc, #4]	@ (8011128 <get_custom_error+0x8>)
 8011122:	7818      	ldrb	r0, [r3, #0]
 8011124:	4770      	bx	lr
 8011126:	bf00      	nop
 8011128:	200119bc 	.word	0x200119bc

0801112c <recv_custom_msg>:
 801112c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011130:	4693      	mov	fp, r2
 8011132:	b089      	sub	sp, #36	@ 0x24
 8011134:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8011138:	9305      	str	r3, [sp, #20]
 801113a:	468a      	mov	sl, r1
 801113c:	2100      	movs	r1, #0
 801113e:	4604      	mov	r4, r0
 8011140:	f88d 101e 	strb.w	r1, [sp, #30]
 8011144:	b322      	cbz	r2, 8011190 <recv_custom_msg+0x64>
 8011146:	f200 2902 	addw	r9, r0, #514	@ 0x202
 801114a:	f10d 081f 	add.w	r8, sp, #31
 801114e:	af05      	add	r7, sp, #20
 8011150:	f10d 061e 	add.w	r6, sp, #30
 8011154:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8011158:	e002      	b.n	8011160 <recv_custom_msg+0x34>
 801115a:	9b05      	ldr	r3, [sp, #20]
 801115c:	2b00      	cmp	r3, #0
 801115e:	dd0f      	ble.n	8011180 <recv_custom_msg+0x54>
 8011160:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8011164:	4623      	mov	r3, r4
 8011166:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801116a:	e9cd 5600 	strd	r5, r6, [sp]
 801116e:	4622      	mov	r2, r4
 8011170:	4648      	mov	r0, r9
 8011172:	f001 fdb5 	bl	8012ce0 <uxr_read_framed_msg>
 8011176:	2800      	cmp	r0, #0
 8011178:	d0ef      	beq.n	801115a <recv_custom_msg+0x2e>
 801117a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801117e:	b1b3      	cbz	r3, 80111ae <recv_custom_msg+0x82>
 8011180:	4b0f      	ldr	r3, [pc, #60]	@ (80111c0 <recv_custom_msg+0x94>)
 8011182:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8011186:	701a      	strb	r2, [r3, #0]
 8011188:	2000      	movs	r0, #0
 801118a:	b009      	add	sp, #36	@ 0x24
 801118c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011190:	f10d 021f 	add.w	r2, sp, #31
 8011194:	9200      	str	r2, [sp, #0]
 8011196:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 801119a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801119e:	4601      	mov	r1, r0
 80111a0:	47a8      	blx	r5
 80111a2:	2800      	cmp	r0, #0
 80111a4:	d0ec      	beq.n	8011180 <recv_custom_msg+0x54>
 80111a6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d1e8      	bne.n	8011180 <recv_custom_msg+0x54>
 80111ae:	f8cb 0000 	str.w	r0, [fp]
 80111b2:	2001      	movs	r0, #1
 80111b4:	f8ca 4000 	str.w	r4, [sl]
 80111b8:	b009      	add	sp, #36	@ 0x24
 80111ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111be:	bf00      	nop
 80111c0:	200119bc 	.word	0x200119bc

080111c4 <send_custom_msg>:
 80111c4:	b530      	push	{r4, r5, lr}
 80111c6:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 80111ca:	b087      	sub	sp, #28
 80111cc:	4615      	mov	r5, r2
 80111ce:	b974      	cbnz	r4, 80111ee <send_custom_msg+0x2a>
 80111d0:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 80111d4:	f10d 0317 	add.w	r3, sp, #23
 80111d8:	47a0      	blx	r4
 80111da:	b108      	cbz	r0, 80111e0 <send_custom_msg+0x1c>
 80111dc:	42a8      	cmp	r0, r5
 80111de:	d015      	beq.n	801120c <send_custom_msg+0x48>
 80111e0:	4b0c      	ldr	r3, [pc, #48]	@ (8011214 <send_custom_msg+0x50>)
 80111e2:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80111e6:	701a      	strb	r2, [r3, #0]
 80111e8:	2000      	movs	r0, #0
 80111ea:	b007      	add	sp, #28
 80111ec:	bd30      	pop	{r4, r5, pc}
 80111ee:	460b      	mov	r3, r1
 80111f0:	2200      	movs	r2, #0
 80111f2:	f10d 0117 	add.w	r1, sp, #23
 80111f6:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80111fa:	4602      	mov	r2, r0
 80111fc:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8011200:	9500      	str	r5, [sp, #0]
 8011202:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8011206:	f001 fb73 	bl	80128f0 <uxr_write_framed_msg>
 801120a:	e7e6      	b.n	80111da <send_custom_msg+0x16>
 801120c:	2001      	movs	r0, #1
 801120e:	b007      	add	sp, #28
 8011210:	bd30      	pop	{r4, r5, pc}
 8011212:	bf00      	nop
 8011214:	200119bc 	.word	0x200119bc

08011218 <uxr_set_custom_transport_callbacks>:
 8011218:	b410      	push	{r4}
 801121a:	9c01      	ldr	r4, [sp, #4]
 801121c:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8011220:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8011224:	9b02      	ldr	r3, [sp, #8]
 8011226:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 801122a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801122e:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8011232:	4770      	bx	lr

08011234 <uxr_init_custom_transport>:
 8011234:	b538      	push	{r3, r4, r5, lr}
 8011236:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 801123a:	b303      	cbz	r3, 801127e <uxr_init_custom_transport+0x4a>
 801123c:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8011240:	4604      	mov	r4, r0
 8011242:	b1e2      	cbz	r2, 801127e <uxr_init_custom_transport+0x4a>
 8011244:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8011248:	b1ca      	cbz	r2, 801127e <uxr_init_custom_transport+0x4a>
 801124a:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 801124e:	b1b2      	cbz	r2, 801127e <uxr_init_custom_transport+0x4a>
 8011250:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8011254:	4798      	blx	r3
 8011256:	4605      	mov	r5, r0
 8011258:	b188      	cbz	r0, 801127e <uxr_init_custom_transport+0x4a>
 801125a:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 801125e:	b98b      	cbnz	r3, 8011284 <uxr_init_custom_transport+0x50>
 8011260:	490b      	ldr	r1, [pc, #44]	@ (8011290 <uxr_init_custom_transport+0x5c>)
 8011262:	4b0c      	ldr	r3, [pc, #48]	@ (8011294 <uxr_init_custom_transport+0x60>)
 8011264:	4a0c      	ldr	r2, [pc, #48]	@ (8011298 <uxr_init_custom_transport+0x64>)
 8011266:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 801126a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801126e:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8011272:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8011276:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 801127a:	4628      	mov	r0, r5
 801127c:	bd38      	pop	{r3, r4, r5, pc}
 801127e:	2500      	movs	r5, #0
 8011280:	4628      	mov	r0, r5
 8011282:	bd38      	pop	{r3, r4, r5, pc}
 8011284:	2100      	movs	r1, #0
 8011286:	f204 2002 	addw	r0, r4, #514	@ 0x202
 801128a:	f001 fb2b 	bl	80128e4 <uxr_init_framing_io>
 801128e:	e7e7      	b.n	8011260 <uxr_init_custom_transport+0x2c>
 8011290:	080111c5 	.word	0x080111c5
 8011294:	0801112d 	.word	0x0801112d
 8011298:	08011121 	.word	0x08011121

0801129c <uxr_close_custom_transport>:
 801129c:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 80112a0:	4718      	bx	r3
 80112a2:	bf00      	nop

080112a4 <uxr_object_id>:
 80112a4:	b082      	sub	sp, #8
 80112a6:	2300      	movs	r3, #0
 80112a8:	f88d 1006 	strb.w	r1, [sp, #6]
 80112ac:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80112b0:	f360 030f 	bfi	r3, r0, #0, #16
 80112b4:	f362 431f 	bfi	r3, r2, #16, #16
 80112b8:	4618      	mov	r0, r3
 80112ba:	b002      	add	sp, #8
 80112bc:	4770      	bx	lr
 80112be:	bf00      	nop

080112c0 <uxr_object_id_from_raw>:
 80112c0:	7843      	ldrb	r3, [r0, #1]
 80112c2:	7801      	ldrb	r1, [r0, #0]
 80112c4:	b082      	sub	sp, #8
 80112c6:	f003 020f 	and.w	r2, r3, #15
 80112ca:	f88d 2006 	strb.w	r2, [sp, #6]
 80112ce:	091b      	lsrs	r3, r3, #4
 80112d0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80112d4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80112d8:	2000      	movs	r0, #0
 80112da:	f363 000f 	bfi	r0, r3, #0, #16
 80112de:	f362 401f 	bfi	r0, r2, #16, #16
 80112e2:	b002      	add	sp, #8
 80112e4:	4770      	bx	lr
 80112e6:	bf00      	nop

080112e8 <uxr_object_id_to_raw>:
 80112e8:	4602      	mov	r2, r0
 80112ea:	f3c0 4303 	ubfx	r3, r0, #16, #4
 80112ee:	b082      	sub	sp, #8
 80112f0:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 80112f4:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 80112f8:	f881 c000 	strb.w	ip, [r1]
 80112fc:	7048      	strb	r0, [r1, #1]
 80112fe:	b002      	add	sp, #8
 8011300:	4770      	bx	lr
 8011302:	bf00      	nop

08011304 <uxr_ping_agent_session>:
 8011304:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011308:	4617      	mov	r7, r2
 801130a:	b091      	sub	sp, #68	@ 0x44
 801130c:	2210      	movs	r2, #16
 801130e:	4606      	mov	r6, r0
 8011310:	4688      	mov	r8, r1
 8011312:	a808      	add	r0, sp, #32
 8011314:	eb0d 0102 	add.w	r1, sp, r2
 8011318:	f7fa fe58 	bl	800bfcc <ucdr_init_buffer>
 801131c:	4b1e      	ldr	r3, [pc, #120]	@ (8011398 <uxr_ping_agent_session+0x94>)
 801131e:	2500      	movs	r5, #0
 8011320:	881b      	ldrh	r3, [r3, #0]
 8011322:	f8ad 300a 	strh.w	r3, [sp, #10]
 8011326:	9500      	str	r5, [sp, #0]
 8011328:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 801132c:	2402      	movs	r4, #2
 801132e:	7831      	ldrb	r1, [r6, #0]
 8011330:	f8ad 3008 	strh.w	r3, [sp, #8]
 8011334:	462a      	mov	r2, r5
 8011336:	a808      	add	r0, sp, #32
 8011338:	462b      	mov	r3, r5
 801133a:	9403      	str	r4, [sp, #12]
 801133c:	f002 fa96 	bl	801386c <uxr_serialize_message_header>
 8011340:	4621      	mov	r1, r4
 8011342:	462b      	mov	r3, r5
 8011344:	2208      	movs	r2, #8
 8011346:	a808      	add	r0, sp, #32
 8011348:	f002 f896 	bl	8013478 <uxr_buffer_submessage_header>
 801134c:	a902      	add	r1, sp, #8
 801134e:	4604      	mov	r4, r0
 8011350:	a808      	add	r0, sp, #32
 8011352:	f003 f96b 	bl	801462c <uxr_serialize_GET_INFO_Payload>
 8011356:	b104      	cbz	r4, 801135a <uxr_ping_agent_session+0x56>
 8011358:	b918      	cbnz	r0, 8011362 <uxr_ping_agent_session+0x5e>
 801135a:	2000      	movs	r0, #0
 801135c:	b011      	add	sp, #68	@ 0x44
 801135e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011362:	a808      	add	r0, sp, #32
 8011364:	f7fa fe5e 	bl	800c024 <ucdr_buffer_length>
 8011368:	4681      	mov	r9, r0
 801136a:	e00d      	b.n	8011388 <uxr_ping_agent_session+0x84>
 801136c:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 801136e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011372:	47a0      	blx	r4
 8011374:	4641      	mov	r1, r8
 8011376:	4604      	mov	r4, r0
 8011378:	4630      	mov	r0, r6
 801137a:	f000 ff4d 	bl	8012218 <uxr_run_session_until_pong>
 801137e:	ea04 0c00 	and.w	ip, r4, r0
 8011382:	f01c 00ff 	ands.w	r0, ip, #255	@ 0xff
 8011386:	d1e9      	bne.n	801135c <uxr_ping_agent_session+0x58>
 8011388:	42af      	cmp	r7, r5
 801138a:	464a      	mov	r2, r9
 801138c:	a904      	add	r1, sp, #16
 801138e:	f105 0501 	add.w	r5, r5, #1
 8011392:	d1eb      	bne.n	801136c <uxr_ping_agent_session+0x68>
 8011394:	e7e1      	b.n	801135a <uxr_ping_agent_session+0x56>
 8011396:	bf00      	nop
 8011398:	0801aa28 	.word	0x0801aa28

0801139c <uxr_ping_agent_attempts>:
 801139c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113a0:	ed2d 8b02 	vpush	{d8}
 80113a4:	b0d1      	sub	sp, #324	@ 0x144
 80113a6:	4606      	mov	r6, r0
 80113a8:	4688      	mov	r8, r1
 80113aa:	a80e      	add	r0, sp, #56	@ 0x38
 80113ac:	a90a      	add	r1, sp, #40	@ 0x28
 80113ae:	4615      	mov	r5, r2
 80113b0:	2210      	movs	r2, #16
 80113b2:	f7fa fe0b 	bl	800bfcc <ucdr_init_buffer>
 80113b6:	4b54      	ldr	r3, [pc, #336]	@ (8011508 <uxr_ping_agent_attempts+0x16c>)
 80113b8:	881b      	ldrh	r3, [r3, #0]
 80113ba:	f8ad 307a 	strh.w	r3, [sp, #122]	@ 0x7a
 80113be:	2300      	movs	r3, #0
 80113c0:	2402      	movs	r4, #2
 80113c2:	461a      	mov	r2, r3
 80113c4:	9300      	str	r3, [sp, #0]
 80113c6:	2180      	movs	r1, #128	@ 0x80
 80113c8:	a80e      	add	r0, sp, #56	@ 0x38
 80113ca:	f44f 6720 	mov.w	r7, #2560	@ 0xa00
 80113ce:	941f      	str	r4, [sp, #124]	@ 0x7c
 80113d0:	f8ad 7078 	strh.w	r7, [sp, #120]	@ 0x78
 80113d4:	f002 fa4a 	bl	801386c <uxr_serialize_message_header>
 80113d8:	4621      	mov	r1, r4
 80113da:	2300      	movs	r3, #0
 80113dc:	2208      	movs	r2, #8
 80113de:	a80e      	add	r0, sp, #56	@ 0x38
 80113e0:	f002 f84a 	bl	8013478 <uxr_buffer_submessage_header>
 80113e4:	a91e      	add	r1, sp, #120	@ 0x78
 80113e6:	4604      	mov	r4, r0
 80113e8:	a80e      	add	r0, sp, #56	@ 0x38
 80113ea:	f003 f91f 	bl	801462c <uxr_serialize_GET_INFO_Payload>
 80113ee:	b104      	cbz	r4, 80113f2 <uxr_ping_agent_attempts+0x56>
 80113f0:	b938      	cbnz	r0, 8011402 <uxr_ping_agent_attempts+0x66>
 80113f2:	f04f 0b00 	mov.w	fp, #0
 80113f6:	4658      	mov	r0, fp
 80113f8:	b051      	add	sp, #324	@ 0x144
 80113fa:	ecbd 8b02 	vpop	{d8}
 80113fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011402:	a80e      	add	r0, sp, #56	@ 0x38
 8011404:	f7fa fe0e 	bl	800c024 <ucdr_buffer_length>
 8011408:	1c6b      	adds	r3, r5, #1
 801140a:	ee08 0a10 	vmov	s16, r0
 801140e:	9303      	str	r3, [sp, #12]
 8011410:	f04f 0901 	mov.w	r9, #1
 8011414:	9b03      	ldr	r3, [sp, #12]
 8011416:	454b      	cmp	r3, r9
 8011418:	d0eb      	beq.n	80113f2 <uxr_ping_agent_attempts+0x56>
 801141a:	e9d6 0300 	ldrd	r0, r3, [r6]
 801141e:	ee18 2a10 	vmov	r2, s16
 8011422:	a90a      	add	r1, sp, #40	@ 0x28
 8011424:	4798      	blx	r3
 8011426:	f002 f86d 	bl	8013504 <uxr_millis>
 801142a:	4645      	mov	r5, r8
 801142c:	4604      	mov	r4, r0
 801142e:	f04f 0a00 	mov.w	sl, #0
 8011432:	68b7      	ldr	r7, [r6, #8]
 8011434:	6830      	ldr	r0, [r6, #0]
 8011436:	f8cd a018 	str.w	sl, [sp, #24]
 801143a:	4643      	mov	r3, r8
 801143c:	aa07      	add	r2, sp, #28
 801143e:	a906      	add	r1, sp, #24
 8011440:	47b8      	blx	r7
 8011442:	4607      	mov	r7, r0
 8011444:	b958      	cbnz	r0, 801145e <uxr_ping_agent_attempts+0xc2>
 8011446:	f002 f85d 	bl	8013504 <uxr_millis>
 801144a:	1b00      	subs	r0, r0, r4
 801144c:	1a2d      	subs	r5, r5, r0
 801144e:	f002 f859 	bl	8013504 <uxr_millis>
 8011452:	2d00      	cmp	r5, #0
 8011454:	4604      	mov	r4, r0
 8011456:	dcec      	bgt.n	8011432 <uxr_ping_agent_attempts+0x96>
 8011458:	f109 0901 	add.w	r9, r9, #1
 801145c:	e7da      	b.n	8011414 <uxr_ping_agent_attempts+0x78>
 801145e:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8011462:	a816      	add	r0, sp, #88	@ 0x58
 8011464:	f7fa fdb2 	bl	800bfcc <ucdr_init_buffer>
 8011468:	ab05      	add	r3, sp, #20
 801146a:	f10d 0211 	add.w	r2, sp, #17
 801146e:	a916      	add	r1, sp, #88	@ 0x58
 8011470:	a808      	add	r0, sp, #32
 8011472:	e9cd aa08 	strd	sl, sl, [sp, #32]
 8011476:	f001 f9bb 	bl	80127f0 <uxr_read_session_header>
 801147a:	22c8      	movs	r2, #200	@ 0xc8
 801147c:	2100      	movs	r1, #0
 801147e:	a81e      	add	r0, sp, #120	@ 0x78
 8011480:	f008 fb10 	bl	8019aa4 <memset>
 8011484:	a816      	add	r0, sp, #88	@ 0x58
 8011486:	f7fa fdd1 	bl	800c02c <ucdr_buffer_remaining>
 801148a:	2804      	cmp	r0, #4
 801148c:	d814      	bhi.n	80114b8 <uxr_ping_agent_attempts+0x11c>
 801148e:	f89d b12d 	ldrb.w	fp, [sp, #301]	@ 0x12d
 8011492:	f002 f837 	bl	8013504 <uxr_millis>
 8011496:	1b00      	subs	r0, r0, r4
 8011498:	1a2d      	subs	r5, r5, r0
 801149a:	f002 f833 	bl	8013504 <uxr_millis>
 801149e:	2d00      	cmp	r5, #0
 80114a0:	4604      	mov	r4, r0
 80114a2:	dd2a      	ble.n	80114fa <uxr_ping_agent_attempts+0x15e>
 80114a4:	f1bb 0f00 	cmp.w	fp, #0
 80114a8:	d0c3      	beq.n	8011432 <uxr_ping_agent_attempts+0x96>
 80114aa:	46bb      	mov	fp, r7
 80114ac:	4658      	mov	r0, fp
 80114ae:	b051      	add	sp, #324	@ 0x144
 80114b0:	ecbd 8b02 	vpop	{d8}
 80114b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114b8:	f10d 0316 	add.w	r3, sp, #22
 80114bc:	f10d 0213 	add.w	r2, sp, #19
 80114c0:	f10d 0112 	add.w	r1, sp, #18
 80114c4:	a816      	add	r0, sp, #88	@ 0x58
 80114c6:	f88d a012 	strb.w	sl, [sp, #18]
 80114ca:	f8ad a016 	strh.w	sl, [sp, #22]
 80114ce:	f88d a013 	strb.w	sl, [sp, #19]
 80114d2:	f002 fa1d 	bl	8013910 <uxr_deserialize_submessage_header>
 80114d6:	a816      	add	r0, sp, #88	@ 0x58
 80114d8:	f7fa fda8 	bl	800c02c <ucdr_buffer_remaining>
 80114dc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80114e0:	4298      	cmp	r0, r3
 80114e2:	d3d4      	bcc.n	801148e <uxr_ping_agent_attempts+0xf2>
 80114e4:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80114e8:	2b06      	cmp	r3, #6
 80114ea:	d1d0      	bne.n	801148e <uxr_ping_agent_attempts+0xf2>
 80114ec:	a916      	add	r1, sp, #88	@ 0x58
 80114ee:	a81e      	add	r0, sp, #120	@ 0x78
 80114f0:	f88d a12d 	strb.w	sl, [sp, #301]	@ 0x12d
 80114f4:	f000 face 	bl	8011a94 <read_submessage_info>
 80114f8:	e7c9      	b.n	801148e <uxr_ping_agent_attempts+0xf2>
 80114fa:	f1bb 0f00 	cmp.w	fp, #0
 80114fe:	d1d4      	bne.n	80114aa <uxr_ping_agent_attempts+0x10e>
 8011500:	f109 0901 	add.w	r9, r9, #1
 8011504:	e786      	b.n	8011414 <uxr_ping_agent_attempts+0x78>
 8011506:	bf00      	nop
 8011508:	0801aa28 	.word	0x0801aa28

0801150c <uxr_buffer_request_data>:
 801150c:	b530      	push	{r4, r5, lr}
 801150e:	b095      	sub	sp, #84	@ 0x54
 8011510:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8011514:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8011516:	9303      	str	r3, [sp, #12]
 8011518:	2200      	movs	r2, #0
 801151a:	2d00      	cmp	r5, #0
 801151c:	bf14      	ite	ne
 801151e:	2101      	movne	r1, #1
 8011520:	4611      	moveq	r1, r2
 8011522:	4604      	mov	r4, r0
 8011524:	f88d 301c 	strb.w	r3, [sp, #28]
 8011528:	f88d 201d 	strb.w	r2, [sp, #29]
 801152c:	f88d 201e 	strb.w	r2, [sp, #30]
 8011530:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8011534:	d021      	beq.n	801157a <uxr_buffer_request_data+0x6e>
 8011536:	682a      	ldr	r2, [r5, #0]
 8011538:	686b      	ldr	r3, [r5, #4]
 801153a:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 801153e:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8011542:	2210      	movs	r2, #16
 8011544:	2308      	movs	r3, #8
 8011546:	2100      	movs	r1, #0
 8011548:	e9cd 3100 	strd	r3, r1, [sp]
 801154c:	4620      	mov	r0, r4
 801154e:	9905      	ldr	r1, [sp, #20]
 8011550:	ab0c      	add	r3, sp, #48	@ 0x30
 8011552:	f001 f861 	bl	8012618 <uxr_prepare_stream_to_write_submessage>
 8011556:	b918      	cbnz	r0, 8011560 <uxr_buffer_request_data+0x54>
 8011558:	4604      	mov	r4, r0
 801155a:	4620      	mov	r0, r4
 801155c:	b015      	add	sp, #84	@ 0x54
 801155e:	bd30      	pop	{r4, r5, pc}
 8011560:	9904      	ldr	r1, [sp, #16]
 8011562:	aa06      	add	r2, sp, #24
 8011564:	4620      	mov	r0, r4
 8011566:	f001 f98d 	bl	8012884 <uxr_init_base_object_request>
 801156a:	a906      	add	r1, sp, #24
 801156c:	4604      	mov	r4, r0
 801156e:	a80c      	add	r0, sp, #48	@ 0x30
 8011570:	f003 f92e 	bl	80147d0 <uxr_serialize_READ_DATA_Payload>
 8011574:	4620      	mov	r0, r4
 8011576:	b015      	add	sp, #84	@ 0x54
 8011578:	bd30      	pop	{r4, r5, pc}
 801157a:	2208      	movs	r2, #8
 801157c:	e7e2      	b.n	8011544 <uxr_buffer_request_data+0x38>
 801157e:	bf00      	nop

08011580 <uxr_buffer_cancel_data>:
 8011580:	b510      	push	{r4, lr}
 8011582:	b094      	sub	sp, #80	@ 0x50
 8011584:	2300      	movs	r3, #0
 8011586:	9202      	str	r2, [sp, #8]
 8011588:	9205      	str	r2, [sp, #20]
 801158a:	9301      	str	r3, [sp, #4]
 801158c:	2201      	movs	r2, #1
 801158e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011592:	f88d 301e 	strb.w	r3, [sp, #30]
 8011596:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 801159a:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801159e:	2308      	movs	r3, #8
 80115a0:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 80115a4:	9300      	str	r3, [sp, #0]
 80115a6:	2210      	movs	r2, #16
 80115a8:	ab0c      	add	r3, sp, #48	@ 0x30
 80115aa:	4604      	mov	r4, r0
 80115ac:	9103      	str	r1, [sp, #12]
 80115ae:	f001 f833 	bl	8012618 <uxr_prepare_stream_to_write_submessage>
 80115b2:	b918      	cbnz	r0, 80115bc <uxr_buffer_cancel_data+0x3c>
 80115b4:	4604      	mov	r4, r0
 80115b6:	4620      	mov	r0, r4
 80115b8:	b014      	add	sp, #80	@ 0x50
 80115ba:	bd10      	pop	{r4, pc}
 80115bc:	9905      	ldr	r1, [sp, #20]
 80115be:	aa06      	add	r2, sp, #24
 80115c0:	4620      	mov	r0, r4
 80115c2:	f001 f95f 	bl	8012884 <uxr_init_base_object_request>
 80115c6:	a906      	add	r1, sp, #24
 80115c8:	4604      	mov	r4, r0
 80115ca:	a80c      	add	r0, sp, #48	@ 0x30
 80115cc:	f003 f900 	bl	80147d0 <uxr_serialize_READ_DATA_Payload>
 80115d0:	4620      	mov	r0, r4
 80115d2:	b014      	add	sp, #80	@ 0x50
 80115d4:	bd10      	pop	{r4, pc}
 80115d6:	bf00      	nop

080115d8 <read_submessage_format>:
 80115d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80115dc:	b095      	sub	sp, #84	@ 0x54
 80115de:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 80115e2:	b113      	cbz	r3, 80115ea <read_submessage_format+0x12>
 80115e4:	b015      	add	sp, #84	@ 0x54
 80115e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80115ea:	460c      	mov	r4, r1
 80115ec:	4615      	mov	r5, r2
 80115ee:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80115f2:	4607      	mov	r7, r0
 80115f4:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80115f6:	9004      	str	r0, [sp, #16]
 80115f8:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80115fa:	9005      	str	r0, [sp, #20]
 80115fc:	1a52      	subs	r2, r2, r1
 80115fe:	a80c      	add	r0, sp, #48	@ 0x30
 8011600:	4699      	mov	r9, r3
 8011602:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8011606:	f7fa fce1 	bl	800bfcc <ucdr_init_buffer>
 801160a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801160e:	a80c      	add	r0, sp, #48	@ 0x30
 8011610:	f7fa fcb0 	bl	800bf74 <ucdr_set_on_full_buffer_callback>
 8011614:	69e2      	ldr	r2, [r4, #28]
 8011616:	b19a      	cbz	r2, 8011640 <read_submessage_format+0x68>
 8011618:	f1b8 0f07 	cmp.w	r8, #7
 801161c:	f882 9014 	strb.w	r9, [r2, #20]
 8011620:	d040      	beq.n	80116a4 <read_submessage_format+0xcc>
 8011622:	f1b8 0f08 	cmp.w	r8, #8
 8011626:	d02e      	beq.n	8011686 <read_submessage_format+0xae>
 8011628:	f1b8 0f06 	cmp.w	r8, #6
 801162c:	d011      	beq.n	8011652 <read_submessage_format+0x7a>
 801162e:	2301      	movs	r3, #1
 8011630:	7513      	strb	r3, [r2, #20]
 8011632:	4629      	mov	r1, r5
 8011634:	4620      	mov	r0, r4
 8011636:	f7fa fd19 	bl	800c06c <ucdr_advance_buffer>
 801163a:	b015      	add	sp, #84	@ 0x54
 801163c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011640:	f1b8 0f07 	cmp.w	r8, #7
 8011644:	d02e      	beq.n	80116a4 <read_submessage_format+0xcc>
 8011646:	f1b8 0f08 	cmp.w	r8, #8
 801164a:	d01c      	beq.n	8011686 <read_submessage_format+0xae>
 801164c:	f1b8 0f06 	cmp.w	r8, #6
 8011650:	d1ef      	bne.n	8011632 <read_submessage_format+0x5a>
 8011652:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 8011656:	f1b8 0f00 	cmp.w	r8, #0
 801165a:	d011      	beq.n	8011680 <read_submessage_format+0xa8>
 801165c:	ab0c      	add	r3, sp, #48	@ 0x30
 801165e:	e9cd 3500 	strd	r3, r5, [sp]
 8011662:	2306      	movs	r3, #6
 8011664:	f88d 3016 	strb.w	r3, [sp, #22]
 8011668:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801166c:	9302      	str	r3, [sp, #8]
 801166e:	4632      	mov	r2, r6
 8011670:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8011674:	4638      	mov	r0, r7
 8011676:	47c0      	blx	r8
 8011678:	2301      	movs	r3, #1
 801167a:	69e2      	ldr	r2, [r4, #28]
 801167c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8011680:	2a00      	cmp	r2, #0
 8011682:	d1d4      	bne.n	801162e <read_submessage_format+0x56>
 8011684:	e7d5      	b.n	8011632 <read_submessage_format+0x5a>
 8011686:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801168a:	2b00      	cmp	r3, #0
 801168c:	d0f8      	beq.n	8011680 <read_submessage_format+0xa8>
 801168e:	a906      	add	r1, sp, #24
 8011690:	a80c      	add	r0, sp, #48	@ 0x30
 8011692:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8011696:	f003 f961 	bl	801495c <uxr_deserialize_SampleIdentity>
 801169a:	b9a0      	cbnz	r0, 80116c6 <read_submessage_format+0xee>
 801169c:	69e2      	ldr	r2, [r4, #28]
 801169e:	2a00      	cmp	r2, #0
 80116a0:	d1c5      	bne.n	801162e <read_submessage_format+0x56>
 80116a2:	e7c6      	b.n	8011632 <read_submessage_format+0x5a>
 80116a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80116a8:	b13b      	cbz	r3, 80116ba <read_submessage_format+0xe2>
 80116aa:	a906      	add	r1, sp, #24
 80116ac:	a80c      	add	r0, sp, #48	@ 0x30
 80116ae:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80116b2:	f002 fe13 	bl	80142dc <uxr_deserialize_BaseObjectRequest>
 80116b6:	bb60      	cbnz	r0, 8011712 <read_submessage_format+0x13a>
 80116b8:	69e2      	ldr	r2, [r4, #28]
 80116ba:	68a3      	ldr	r3, [r4, #8]
 80116bc:	442b      	add	r3, r5
 80116be:	60a3      	str	r3, [r4, #8]
 80116c0:	2a00      	cmp	r2, #0
 80116c2:	d1b4      	bne.n	801162e <read_submessage_format+0x56>
 80116c4:	e7b5      	b.n	8011632 <read_submessage_format+0x5a>
 80116c6:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80116ca:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80116cc:	1a52      	subs	r2, r2, r1
 80116ce:	eba8 0803 	sub.w	r8, r8, r3
 80116d2:	a80c      	add	r0, sp, #48	@ 0x30
 80116d4:	f7fa fc7a 	bl	800bfcc <ucdr_init_buffer>
 80116d8:	44a8      	add	r8, r5
 80116da:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80116de:	a80c      	add	r0, sp, #48	@ 0x30
 80116e0:	f7fa fc48 	bl	800bf74 <ucdr_set_on_full_buffer_callback>
 80116e4:	fa1f f888 	uxth.w	r8, r8
 80116e8:	ab0c      	add	r3, sp, #48	@ 0x30
 80116ea:	9300      	str	r3, [sp, #0]
 80116ec:	f8cd 8004 	str.w	r8, [sp, #4]
 80116f0:	2108      	movs	r1, #8
 80116f2:	f88d 1016 	strb.w	r1, [sp, #22]
 80116f6:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80116fa:	9102      	str	r1, [sp, #8]
 80116fc:	ab06      	add	r3, sp, #24
 80116fe:	4632      	mov	r2, r6
 8011700:	9905      	ldr	r1, [sp, #20]
 8011702:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 8011706:	4638      	mov	r0, r7
 8011708:	47b0      	blx	r6
 801170a:	2301      	movs	r3, #1
 801170c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8011710:	e7c4      	b.n	801169c <read_submessage_format+0xc4>
 8011712:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8011716:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011718:	1a52      	subs	r2, r2, r1
 801171a:	a80c      	add	r0, sp, #48	@ 0x30
 801171c:	eba8 0803 	sub.w	r8, r8, r3
 8011720:	f7fa fc54 	bl	800bfcc <ucdr_init_buffer>
 8011724:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8011728:	a80c      	add	r0, sp, #48	@ 0x30
 801172a:	f7fa fc23 	bl	800bf74 <ucdr_set_on_full_buffer_callback>
 801172e:	ab0c      	add	r3, sp, #48	@ 0x30
 8011730:	9300      	str	r3, [sp, #0]
 8011732:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8011736:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801173a:	44a8      	add	r8, r5
 801173c:	fa1f f888 	uxth.w	r8, r8
 8011740:	f8cd 8004 	str.w	r8, [sp, #4]
 8011744:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8011748:	2107      	movs	r1, #7
 801174a:	f88d 1016 	strb.w	r1, [sp, #22]
 801174e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8011752:	9102      	str	r1, [sp, #8]
 8011754:	4632      	mov	r2, r6
 8011756:	b29b      	uxth	r3, r3
 8011758:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 801175c:	9905      	ldr	r1, [sp, #20]
 801175e:	4638      	mov	r0, r7
 8011760:	47b0      	blx	r6
 8011762:	2301      	movs	r3, #1
 8011764:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8011768:	e7a6      	b.n	80116b8 <read_submessage_format+0xe0>
 801176a:	bf00      	nop

0801176c <on_get_fragmentation_info>:
 801176c:	b500      	push	{lr}
 801176e:	b08b      	sub	sp, #44	@ 0x2c
 8011770:	4601      	mov	r1, r0
 8011772:	2204      	movs	r2, #4
 8011774:	a802      	add	r0, sp, #8
 8011776:	f7fa fc29 	bl	800bfcc <ucdr_init_buffer>
 801177a:	f10d 0305 	add.w	r3, sp, #5
 801177e:	f10d 0206 	add.w	r2, sp, #6
 8011782:	a901      	add	r1, sp, #4
 8011784:	a802      	add	r0, sp, #8
 8011786:	f001 fe91 	bl	80134ac <uxr_read_submessage_header>
 801178a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801178e:	2b0d      	cmp	r3, #13
 8011790:	d003      	beq.n	801179a <on_get_fragmentation_info+0x2e>
 8011792:	2000      	movs	r0, #0
 8011794:	b00b      	add	sp, #44	@ 0x2c
 8011796:	f85d fb04 	ldr.w	pc, [sp], #4
 801179a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801179e:	f013 0f02 	tst.w	r3, #2
 80117a2:	bf14      	ite	ne
 80117a4:	2002      	movne	r0, #2
 80117a6:	2001      	moveq	r0, #1
 80117a8:	b00b      	add	sp, #44	@ 0x2c
 80117aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80117ae:	bf00      	nop

080117b0 <read_submessage_get_info>:
 80117b0:	b570      	push	{r4, r5, r6, lr}
 80117b2:	2500      	movs	r5, #0
 80117b4:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 80117b8:	4604      	mov	r4, r0
 80117ba:	f44f 7224 	mov.w	r2, #656	@ 0x290
 80117be:	460e      	mov	r6, r1
 80117c0:	a810      	add	r0, sp, #64	@ 0x40
 80117c2:	4629      	mov	r1, r5
 80117c4:	e9cd 5503 	strd	r5, r5, [sp, #12]
 80117c8:	f008 f96c 	bl	8019aa4 <memset>
 80117cc:	a903      	add	r1, sp, #12
 80117ce:	4630      	mov	r0, r6
 80117d0:	f002 ff40 	bl	8014654 <uxr_deserialize_GET_INFO_Payload>
 80117d4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80117d8:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80117dc:	4620      	mov	r0, r4
 80117de:	f001 f849 	bl	8012874 <uxr_session_header_offset>
 80117e2:	462b      	mov	r3, r5
 80117e4:	9000      	str	r0, [sp, #0]
 80117e6:	220c      	movs	r2, #12
 80117e8:	a905      	add	r1, sp, #20
 80117ea:	a808      	add	r0, sp, #32
 80117ec:	f7fa fbdc 	bl	800bfa8 <ucdr_init_buffer_origin_offset>
 80117f0:	a910      	add	r1, sp, #64	@ 0x40
 80117f2:	a808      	add	r0, sp, #32
 80117f4:	f002 ffa0 	bl	8014738 <uxr_serialize_INFO_Payload>
 80117f8:	9b08      	ldr	r3, [sp, #32]
 80117fa:	462a      	mov	r2, r5
 80117fc:	4629      	mov	r1, r5
 80117fe:	4620      	mov	r0, r4
 8011800:	f000 ffe2 	bl	80127c8 <uxr_stamp_session_header>
 8011804:	a808      	add	r0, sp, #32
 8011806:	f7fa fc0d 	bl	800c024 <ucdr_buffer_length>
 801180a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801180c:	4602      	mov	r2, r0
 801180e:	a905      	add	r1, sp, #20
 8011810:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011814:	47a0      	blx	r4
 8011816:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 801181a:	bd70      	pop	{r4, r5, r6, pc}

0801181c <write_submessage_acknack.isra.0>:
 801181c:	b570      	push	{r4, r5, r6, lr}
 801181e:	b092      	sub	sp, #72	@ 0x48
 8011820:	4605      	mov	r5, r0
 8011822:	460e      	mov	r6, r1
 8011824:	4614      	mov	r4, r2
 8011826:	f001 f825 	bl	8012874 <uxr_session_header_offset>
 801182a:	a905      	add	r1, sp, #20
 801182c:	9000      	str	r0, [sp, #0]
 801182e:	2300      	movs	r3, #0
 8011830:	a80a      	add	r0, sp, #40	@ 0x28
 8011832:	2211      	movs	r2, #17
 8011834:	f7fa fbb8 	bl	800bfa8 <ucdr_init_buffer_origin_offset>
 8011838:	2218      	movs	r2, #24
 801183a:	fb02 5404 	mla	r4, r2, r4, r5
 801183e:	2300      	movs	r3, #0
 8011840:	2205      	movs	r2, #5
 8011842:	3450      	adds	r4, #80	@ 0x50
 8011844:	210a      	movs	r1, #10
 8011846:	a80a      	add	r0, sp, #40	@ 0x28
 8011848:	f001 fe16 	bl	8013478 <uxr_buffer_submessage_header>
 801184c:	a903      	add	r1, sp, #12
 801184e:	4620      	mov	r0, r4
 8011850:	f006 fd18 	bl	8018284 <uxr_compute_acknack>
 8011854:	ba40      	rev16	r0, r0
 8011856:	f8ad 000e 	strh.w	r0, [sp, #14]
 801185a:	a903      	add	r1, sp, #12
 801185c:	a80a      	add	r0, sp, #40	@ 0x28
 801185e:	f88d 6010 	strb.w	r6, [sp, #16]
 8011862:	f002 ffd9 	bl	8014818 <uxr_serialize_ACKNACK_Payload>
 8011866:	2200      	movs	r2, #0
 8011868:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801186a:	4611      	mov	r1, r2
 801186c:	4628      	mov	r0, r5
 801186e:	f000 ffab 	bl	80127c8 <uxr_stamp_session_header>
 8011872:	a80a      	add	r0, sp, #40	@ 0x28
 8011874:	f7fa fbd6 	bl	800c024 <ucdr_buffer_length>
 8011878:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 801187a:	4602      	mov	r2, r0
 801187c:	a905      	add	r1, sp, #20
 801187e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011882:	47a0      	blx	r4
 8011884:	b012      	add	sp, #72	@ 0x48
 8011886:	bd70      	pop	{r4, r5, r6, pc}

08011888 <uxr_init_session>:
 8011888:	b510      	push	{r4, lr}
 801188a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80118c0 <uxr_init_session+0x38>
 801188e:	2300      	movs	r3, #0
 8011890:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8011894:	4604      	mov	r4, r0
 8011896:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 801189a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 801189e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 80118a2:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 80118a6:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 80118aa:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 80118ae:	2181      	movs	r1, #129	@ 0x81
 80118b0:	f000 fef6 	bl	80126a0 <uxr_init_session_info>
 80118b4:	f104 0008 	add.w	r0, r4, #8
 80118b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80118bc:	f001 bcf8 	b.w	80132b0 <uxr_init_stream_storage>
	...

080118c8 <uxr_set_status_callback>:
 80118c8:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 80118cc:	4770      	bx	lr
 80118ce:	bf00      	nop

080118d0 <uxr_set_topic_callback>:
 80118d0:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 80118d4:	4770      	bx	lr
 80118d6:	bf00      	nop

080118d8 <uxr_set_request_callback>:
 80118d8:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 80118dc:	4770      	bx	lr
 80118de:	bf00      	nop

080118e0 <uxr_set_reply_callback>:
 80118e0:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 80118e4:	4770      	bx	lr
 80118e6:	bf00      	nop

080118e8 <uxr_create_output_best_effort_stream>:
 80118e8:	b510      	push	{r4, lr}
 80118ea:	b084      	sub	sp, #16
 80118ec:	e9cd 2100 	strd	r2, r1, [sp]
 80118f0:	4604      	mov	r4, r0
 80118f2:	f000 ffbf 	bl	8012874 <uxr_session_header_offset>
 80118f6:	e9dd 2100 	ldrd	r2, r1, [sp]
 80118fa:	4603      	mov	r3, r0
 80118fc:	f104 0008 	add.w	r0, r4, #8
 8011900:	b004      	add	sp, #16
 8011902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011906:	f001 bd1d 	b.w	8013344 <uxr_add_output_best_effort_buffer>
 801190a:	bf00      	nop

0801190c <uxr_create_output_reliable_stream>:
 801190c:	b510      	push	{r4, lr}
 801190e:	b088      	sub	sp, #32
 8011910:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8011914:	4604      	mov	r4, r0
 8011916:	9303      	str	r3, [sp, #12]
 8011918:	f000 ffac 	bl	8012874 <uxr_session_header_offset>
 801191c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8011920:	9000      	str	r0, [sp, #0]
 8011922:	9905      	ldr	r1, [sp, #20]
 8011924:	f104 0008 	add.w	r0, r4, #8
 8011928:	f001 fd20 	bl	801336c <uxr_add_output_reliable_buffer>
 801192c:	2200      	movs	r2, #0
 801192e:	b2c3      	uxtb	r3, r0
 8011930:	f363 0207 	bfi	r2, r3, #0, #8
 8011934:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011938:	f363 220f 	bfi	r2, r3, #8, #8
 801193c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011940:	f363 4217 	bfi	r2, r3, #16, #8
 8011944:	0e03      	lsrs	r3, r0, #24
 8011946:	f363 621f 	bfi	r2, r3, #24, #8
 801194a:	4610      	mov	r0, r2
 801194c:	b008      	add	sp, #32
 801194e:	bd10      	pop	{r4, pc}

08011950 <uxr_create_input_best_effort_stream>:
 8011950:	b082      	sub	sp, #8
 8011952:	3008      	adds	r0, #8
 8011954:	b002      	add	sp, #8
 8011956:	f001 bd23 	b.w	80133a0 <uxr_add_input_best_effort_buffer>
 801195a:	bf00      	nop

0801195c <uxr_create_input_reliable_stream>:
 801195c:	b510      	push	{r4, lr}
 801195e:	b084      	sub	sp, #16
 8011960:	4c0b      	ldr	r4, [pc, #44]	@ (8011990 <uxr_create_input_reliable_stream+0x34>)
 8011962:	9400      	str	r4, [sp, #0]
 8011964:	3008      	adds	r0, #8
 8011966:	f001 fd31 	bl	80133cc <uxr_add_input_reliable_buffer>
 801196a:	2200      	movs	r2, #0
 801196c:	b2c3      	uxtb	r3, r0
 801196e:	f363 0207 	bfi	r2, r3, #0, #8
 8011972:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011976:	f363 220f 	bfi	r2, r3, #8, #8
 801197a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801197e:	f363 4217 	bfi	r2, r3, #16, #8
 8011982:	0e03      	lsrs	r3, r0, #24
 8011984:	f363 621f 	bfi	r2, r3, #24, #8
 8011988:	4610      	mov	r0, r2
 801198a:	b004      	add	sp, #16
 801198c:	bd10      	pop	{r4, pc}
 801198e:	bf00      	nop
 8011990:	0801176d 	.word	0x0801176d

08011994 <uxr_epoch_nanos>:
 8011994:	b510      	push	{r4, lr}
 8011996:	4604      	mov	r4, r0
 8011998:	f001 fdce 	bl	8013538 <uxr_nanos>
 801199c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 80119a0:	1ac0      	subs	r0, r0, r3
 80119a2:	eb61 0102 	sbc.w	r1, r1, r2
 80119a6:	bd10      	pop	{r4, pc}

080119a8 <uxr_flash_output_streams>:
 80119a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119ac:	7e03      	ldrb	r3, [r0, #24]
 80119ae:	b084      	sub	sp, #16
 80119b0:	4604      	mov	r4, r0
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d035      	beq.n	8011a22 <uxr_flash_output_streams+0x7a>
 80119b6:	f04f 0900 	mov.w	r9, #0
 80119ba:	4648      	mov	r0, r9
 80119bc:	f10d 0802 	add.w	r8, sp, #2
 80119c0:	af03      	add	r7, sp, #12
 80119c2:	ae02      	add	r6, sp, #8
 80119c4:	e006      	b.n	80119d4 <uxr_flash_output_streams+0x2c>
 80119c6:	7e23      	ldrb	r3, [r4, #24]
 80119c8:	f109 0901 	add.w	r9, r9, #1
 80119cc:	fa5f f089 	uxtb.w	r0, r9
 80119d0:	4283      	cmp	r3, r0
 80119d2:	d926      	bls.n	8011a22 <uxr_flash_output_streams+0x7a>
 80119d4:	2201      	movs	r2, #1
 80119d6:	4611      	mov	r1, r2
 80119d8:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 80119dc:	f001 fc14 	bl	8013208 <uxr_stream_id>
 80119e0:	3508      	adds	r5, #8
 80119e2:	4684      	mov	ip, r0
 80119e4:	4643      	mov	r3, r8
 80119e6:	463a      	mov	r2, r7
 80119e8:	4631      	mov	r1, r6
 80119ea:	4628      	mov	r0, r5
 80119ec:	f8cd c004 	str.w	ip, [sp, #4]
 80119f0:	f006 fcce 	bl	8018390 <uxr_prepare_best_effort_buffer_to_send>
 80119f4:	2800      	cmp	r0, #0
 80119f6:	d0e6      	beq.n	80119c6 <uxr_flash_output_streams+0x1e>
 80119f8:	9b02      	ldr	r3, [sp, #8]
 80119fa:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80119fe:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8011a02:	4620      	mov	r0, r4
 8011a04:	f000 fee0 	bl	80127c8 <uxr_stamp_session_header>
 8011a08:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011a0a:	9a03      	ldr	r2, [sp, #12]
 8011a0c:	685d      	ldr	r5, [r3, #4]
 8011a0e:	6818      	ldr	r0, [r3, #0]
 8011a10:	9902      	ldr	r1, [sp, #8]
 8011a12:	47a8      	blx	r5
 8011a14:	f109 0901 	add.w	r9, r9, #1
 8011a18:	7e23      	ldrb	r3, [r4, #24]
 8011a1a:	fa5f f089 	uxtb.w	r0, r9
 8011a1e:	4283      	cmp	r3, r0
 8011a20:	d8d8      	bhi.n	80119d4 <uxr_flash_output_streams+0x2c>
 8011a22:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8011a26:	b38b      	cbz	r3, 8011a8c <uxr_flash_output_streams+0xe4>
 8011a28:	f04f 0900 	mov.w	r9, #0
 8011a2c:	f10d 0802 	add.w	r8, sp, #2
 8011a30:	af03      	add	r7, sp, #12
 8011a32:	ae02      	add	r6, sp, #8
 8011a34:	4648      	mov	r0, r9
 8011a36:	2201      	movs	r2, #1
 8011a38:	2102      	movs	r1, #2
 8011a3a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8011a3e:	f001 fbe3 	bl	8013208 <uxr_stream_id>
 8011a42:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8011a46:	3520      	adds	r5, #32
 8011a48:	9001      	str	r0, [sp, #4]
 8011a4a:	e00d      	b.n	8011a68 <uxr_flash_output_streams+0xc0>
 8011a4c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8011a50:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8011a54:	9b02      	ldr	r3, [sp, #8]
 8011a56:	f000 feb7 	bl	80127c8 <uxr_stamp_session_header>
 8011a5a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011a5c:	9a03      	ldr	r2, [sp, #12]
 8011a5e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8011a62:	9902      	ldr	r1, [sp, #8]
 8011a64:	6818      	ldr	r0, [r3, #0]
 8011a66:	47d0      	blx	sl
 8011a68:	4643      	mov	r3, r8
 8011a6a:	463a      	mov	r2, r7
 8011a6c:	4631      	mov	r1, r6
 8011a6e:	4628      	mov	r0, r5
 8011a70:	f006 feac 	bl	80187cc <uxr_prepare_next_reliable_buffer_to_send>
 8011a74:	4603      	mov	r3, r0
 8011a76:	4620      	mov	r0, r4
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d1e7      	bne.n	8011a4c <uxr_flash_output_streams+0xa4>
 8011a7c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8011a80:	f109 0901 	add.w	r9, r9, #1
 8011a84:	fa5f f089 	uxtb.w	r0, r9
 8011a88:	4283      	cmp	r3, r0
 8011a8a:	d8d4      	bhi.n	8011a36 <uxr_flash_output_streams+0x8e>
 8011a8c:	b004      	add	sp, #16
 8011a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a92:	bf00      	nop

08011a94 <read_submessage_info>:
 8011a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a98:	460d      	mov	r5, r1
 8011a9a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8011a9e:	4669      	mov	r1, sp
 8011aa0:	4607      	mov	r7, r0
 8011aa2:	4628      	mov	r0, r5
 8011aa4:	f002 fcd0 	bl	8014448 <uxr_deserialize_BaseObjectReply>
 8011aa8:	a902      	add	r1, sp, #8
 8011aaa:	4604      	mov	r4, r0
 8011aac:	4628      	mov	r0, r5
 8011aae:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8011ab2:	f7f8 ff91 	bl	800a9d8 <ucdr_deserialize_bool>
 8011ab6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8011aba:	4004      	ands	r4, r0
 8011abc:	b2e4      	uxtb	r4, r4
 8011abe:	b95b      	cbnz	r3, 8011ad8 <read_submessage_info+0x44>
 8011ac0:	a987      	add	r1, sp, #540	@ 0x21c
 8011ac2:	4628      	mov	r0, r5
 8011ac4:	f7f8 ff88 	bl	800a9d8 <ucdr_deserialize_bool>
 8011ac8:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8011acc:	4606      	mov	r6, r0
 8011ace:	b94b      	cbnz	r3, 8011ae4 <read_submessage_info+0x50>
 8011ad0:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8011ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ad8:	a903      	add	r1, sp, #12
 8011ada:	4628      	mov	r0, r5
 8011adc:	f002 fb5c 	bl	8014198 <uxr_deserialize_ObjectVariant>
 8011ae0:	4004      	ands	r4, r0
 8011ae2:	e7ed      	b.n	8011ac0 <read_submessage_info+0x2c>
 8011ae4:	a988      	add	r1, sp, #544	@ 0x220
 8011ae6:	4628      	mov	r0, r5
 8011ae8:	f7f8 ffa4 	bl	800aa34 <ucdr_deserialize_uint8_t>
 8011aec:	4234      	tst	r4, r6
 8011aee:	d0ef      	beq.n	8011ad0 <read_submessage_info+0x3c>
 8011af0:	2800      	cmp	r0, #0
 8011af2:	d0ed      	beq.n	8011ad0 <read_submessage_info+0x3c>
 8011af4:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8011af8:	2b0d      	cmp	r3, #13
 8011afa:	d1e9      	bne.n	8011ad0 <read_submessage_info+0x3c>
 8011afc:	a98a      	add	r1, sp, #552	@ 0x228
 8011afe:	4628      	mov	r0, r5
 8011b00:	f7f9 fd3e 	bl	800b580 <ucdr_deserialize_int16_t>
 8011b04:	b140      	cbz	r0, 8011b18 <read_submessage_info+0x84>
 8011b06:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	dd07      	ble.n	8011b1e <read_submessage_info+0x8a>
 8011b0e:	f1b8 0f00 	cmp.w	r8, #0
 8011b12:	bf14      	ite	ne
 8011b14:	2001      	movne	r0, #1
 8011b16:	2002      	moveq	r0, #2
 8011b18:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 8011b1c:	e7d8      	b.n	8011ad0 <read_submessage_info+0x3c>
 8011b1e:	2000      	movs	r0, #0
 8011b20:	e7fa      	b.n	8011b18 <read_submessage_info+0x84>
 8011b22:	bf00      	nop

08011b24 <read_submessage_list>:
 8011b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b28:	b097      	sub	sp, #92	@ 0x5c
 8011b2a:	4ec1      	ldr	r6, [pc, #772]	@ (8011e30 <read_submessage_list+0x30c>)
 8011b2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8011b2e:	4604      	mov	r4, r0
 8011b30:	460d      	mov	r5, r1
 8011b32:	f04f 0801 	mov.w	r8, #1
 8011b36:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8011b3a:	aa0c      	add	r2, sp, #48	@ 0x30
 8011b3c:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8011b40:	4628      	mov	r0, r5
 8011b42:	f001 fcb3 	bl	80134ac <uxr_read_submessage_header>
 8011b46:	2800      	cmp	r0, #0
 8011b48:	f000 813e 	beq.w	8011dc8 <read_submessage_list+0x2a4>
 8011b4c:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8011b50:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8011b54:	3b02      	subs	r3, #2
 8011b56:	2b0d      	cmp	r3, #13
 8011b58:	d8ed      	bhi.n	8011b36 <read_submessage_list+0x12>
 8011b5a:	a101      	add	r1, pc, #4	@ (adr r1, 8011b60 <read_submessage_list+0x3c>)
 8011b5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011b60:	08011dbf 	.word	0x08011dbf
 8011b64:	08011b37 	.word	0x08011b37
 8011b68:	08011daf 	.word	0x08011daf
 8011b6c:	08011d4d 	.word	0x08011d4d
 8011b70:	08011d43 	.word	0x08011d43
 8011b74:	08011b37 	.word	0x08011b37
 8011b78:	08011b37 	.word	0x08011b37
 8011b7c:	08011ca3 	.word	0x08011ca3
 8011b80:	08011c33 	.word	0x08011c33
 8011b84:	08011bf3 	.word	0x08011bf3
 8011b88:	08011b37 	.word	0x08011b37
 8011b8c:	08011b37 	.word	0x08011b37
 8011b90:	08011b37 	.word	0x08011b37
 8011b94:	08011b99 	.word	0x08011b99
 8011b98:	a910      	add	r1, sp, #64	@ 0x40
 8011b9a:	4628      	mov	r0, r5
 8011b9c:	f002 fe8c 	bl	80148b8 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8011ba0:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 8011ba4:	f1b9 0f00 	cmp.w	r9, #0
 8011ba8:	f000 8116 	beq.w	8011dd8 <read_submessage_list+0x2b4>
 8011bac:	f001 fcc4 	bl	8013538 <uxr_nanos>
 8011bb0:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8011bb2:	4602      	mov	r2, r0
 8011bb4:	460b      	mov	r3, r1
 8011bb6:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8011bb8:	2100      	movs	r1, #0
 8011bba:	468c      	mov	ip, r1
 8011bbc:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8011bc0:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8011bc4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8011bc6:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8011bc8:	468c      	mov	ip, r1
 8011bca:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8011bce:	46e2      	mov	sl, ip
 8011bd0:	46bc      	mov	ip, r7
 8011bd2:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 8011bd6:	fbc0 7106 	smlal	r7, r1, r0, r6
 8011bda:	e9cd ca02 	strd	ip, sl, [sp, #8]
 8011bde:	e9cd 7100 	strd	r7, r1, [sp]
 8011be2:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8011be6:	9106      	str	r1, [sp, #24]
 8011be8:	4620      	mov	r0, r4
 8011bea:	47c8      	blx	r9
 8011bec:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 8011bf0:	e7a1      	b.n	8011b36 <read_submessage_list+0x12>
 8011bf2:	a910      	add	r1, sp, #64	@ 0x40
 8011bf4:	4628      	mov	r0, r5
 8011bf6:	f002 fe4d 	bl	8014894 <uxr_deserialize_HEARTBEAT_Payload>
 8011bfa:	2100      	movs	r1, #0
 8011bfc:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8011c00:	f001 fb2c 	bl	801325c <uxr_stream_id_from_raw>
 8011c04:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8011c08:	900f      	str	r0, [sp, #60]	@ 0x3c
 8011c0a:	4639      	mov	r1, r7
 8011c0c:	f104 0008 	add.w	r0, r4, #8
 8011c10:	f001 fc12 	bl	8013438 <uxr_get_input_reliable_stream>
 8011c14:	2800      	cmp	r0, #0
 8011c16:	d08e      	beq.n	8011b36 <read_submessage_list+0x12>
 8011c18:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8011c1c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8011c20:	f006 fb24 	bl	801826c <uxr_process_heartbeat>
 8011c24:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8011c28:	463a      	mov	r2, r7
 8011c2a:	4620      	mov	r0, r4
 8011c2c:	f7ff fdf6 	bl	801181c <write_submessage_acknack.isra.0>
 8011c30:	e781      	b.n	8011b36 <read_submessage_list+0x12>
 8011c32:	a910      	add	r1, sp, #64	@ 0x40
 8011c34:	4628      	mov	r0, r5
 8011c36:	f002 fe05 	bl	8014844 <uxr_deserialize_ACKNACK_Payload>
 8011c3a:	2100      	movs	r1, #0
 8011c3c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8011c40:	f001 fb0c 	bl	801325c <uxr_stream_id_from_raw>
 8011c44:	900d      	str	r0, [sp, #52]	@ 0x34
 8011c46:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8011c4a:	f104 0008 	add.w	r0, r4, #8
 8011c4e:	f001 fbdf 	bl	8013410 <uxr_get_output_reliable_stream>
 8011c52:	4607      	mov	r7, r0
 8011c54:	2800      	cmp	r0, #0
 8011c56:	f43f af6e 	beq.w	8011b36 <read_submessage_list+0x12>
 8011c5a:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 8011c5e:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8011c62:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8011c66:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8011c6a:	b289      	uxth	r1, r1
 8011c6c:	f006 fe58 	bl	8018920 <uxr_process_acknack>
 8011c70:	4638      	mov	r0, r7
 8011c72:	f006 fe15 	bl	80188a0 <uxr_begin_output_nack_buffer_it>
 8011c76:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8011c7a:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8011c7e:	e006      	b.n	8011c8e <read_submessage_list+0x16a>
 8011c80:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011c82:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011c84:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8011c88:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011c8a:	6818      	ldr	r0, [r3, #0]
 8011c8c:	47c8      	blx	r9
 8011c8e:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8011c92:	aa0f      	add	r2, sp, #60	@ 0x3c
 8011c94:	4651      	mov	r1, sl
 8011c96:	4638      	mov	r0, r7
 8011c98:	f006 fe04 	bl	80188a4 <uxr_next_reliable_nack_buffer_to_send>
 8011c9c:	2800      	cmp	r0, #0
 8011c9e:	d1ef      	bne.n	8011c80 <read_submessage_list+0x15c>
 8011ca0:	e749      	b.n	8011b36 <read_submessage_list+0x12>
 8011ca2:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8011ca6:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8011caa:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8011cae:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8011cb2:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8011cb6:	4651      	mov	r1, sl
 8011cb8:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8011cbc:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 8011cc0:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8011cc4:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8011cc8:	4628      	mov	r0, r5
 8011cca:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8011cce:	f002 fb05 	bl	80142dc <uxr_deserialize_BaseObjectRequest>
 8011cd2:	4650      	mov	r0, sl
 8011cd4:	a90f      	add	r1, sp, #60	@ 0x3c
 8011cd6:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8011cda:	f000 fdf1 	bl	80128c0 <uxr_parse_base_object_request>
 8011cde:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8011ce2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011ce4:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8011ce8:	9110      	str	r1, [sp, #64]	@ 0x40
 8011cea:	3f04      	subs	r7, #4
 8011cec:	f009 090e 	and.w	r9, r9, #14
 8011cf0:	b2bf      	uxth	r7, r7
 8011cf2:	f1bb 0f00 	cmp.w	fp, #0
 8011cf6:	d006      	beq.n	8011d06 <read_submessage_list+0x1e2>
 8011cf8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8011cfc:	9300      	str	r3, [sp, #0]
 8011cfe:	4652      	mov	r2, sl
 8011d00:	2300      	movs	r3, #0
 8011d02:	4620      	mov	r0, r4
 8011d04:	47d8      	blx	fp
 8011d06:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8011d08:	b16a      	cbz	r2, 8011d26 <read_submessage_list+0x202>
 8011d0a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8011d0c:	2100      	movs	r1, #0
 8011d0e:	3802      	subs	r0, #2
 8011d10:	e002      	b.n	8011d18 <read_submessage_list+0x1f4>
 8011d12:	3101      	adds	r1, #1
 8011d14:	4291      	cmp	r1, r2
 8011d16:	d006      	beq.n	8011d26 <read_submessage_list+0x202>
 8011d18:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8011d1c:	4553      	cmp	r3, sl
 8011d1e:	d1f8      	bne.n	8011d12 <read_submessage_list+0x1ee>
 8011d20:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8011d22:	2200      	movs	r2, #0
 8011d24:	545a      	strb	r2, [r3, r1]
 8011d26:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8011d2a:	9102      	str	r1, [sp, #8]
 8011d2c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011d2e:	9101      	str	r1, [sp, #4]
 8011d30:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8011d32:	9100      	str	r1, [sp, #0]
 8011d34:	464b      	mov	r3, r9
 8011d36:	463a      	mov	r2, r7
 8011d38:	4629      	mov	r1, r5
 8011d3a:	4620      	mov	r0, r4
 8011d3c:	f7ff fc4c 	bl	80115d8 <read_submessage_format>
 8011d40:	e6f9      	b.n	8011b36 <read_submessage_list+0x12>
 8011d42:	4629      	mov	r1, r5
 8011d44:	4620      	mov	r0, r4
 8011d46:	f7ff fea5 	bl	8011a94 <read_submessage_info>
 8011d4a:	e6f4      	b.n	8011b36 <read_submessage_list+0x12>
 8011d4c:	2a00      	cmp	r2, #0
 8011d4e:	d03e      	beq.n	8011dce <read_submessage_list+0x2aa>
 8011d50:	a910      	add	r1, sp, #64	@ 0x40
 8011d52:	4628      	mov	r0, r5
 8011d54:	f002 fcd2 	bl	80146fc <uxr_deserialize_STATUS_Payload>
 8011d58:	a90e      	add	r1, sp, #56	@ 0x38
 8011d5a:	aa0d      	add	r2, sp, #52	@ 0x34
 8011d5c:	a810      	add	r0, sp, #64	@ 0x40
 8011d5e:	f000 fdaf 	bl	80128c0 <uxr_parse_base_object_request>
 8011d62:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8011d66:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011d68:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8011d6c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8011d70:	910f      	str	r1, [sp, #60]	@ 0x3c
 8011d72:	f1ba 0f00 	cmp.w	sl, #0
 8011d76:	d006      	beq.n	8011d86 <read_submessage_list+0x262>
 8011d78:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8011d7c:	9300      	str	r3, [sp, #0]
 8011d7e:	463a      	mov	r2, r7
 8011d80:	464b      	mov	r3, r9
 8011d82:	4620      	mov	r0, r4
 8011d84:	47d0      	blx	sl
 8011d86:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8011d88:	2a00      	cmp	r2, #0
 8011d8a:	f43f aed4 	beq.w	8011b36 <read_submessage_list+0x12>
 8011d8e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8011d90:	2100      	movs	r1, #0
 8011d92:	3802      	subs	r0, #2
 8011d94:	e003      	b.n	8011d9e <read_submessage_list+0x27a>
 8011d96:	3101      	adds	r1, #1
 8011d98:	4291      	cmp	r1, r2
 8011d9a:	f43f aecc 	beq.w	8011b36 <read_submessage_list+0x12>
 8011d9e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8011da2:	42bb      	cmp	r3, r7
 8011da4:	d1f7      	bne.n	8011d96 <read_submessage_list+0x272>
 8011da6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8011da8:	f803 9001 	strb.w	r9, [r3, r1]
 8011dac:	e6c3      	b.n	8011b36 <read_submessage_list+0x12>
 8011dae:	2a00      	cmp	r2, #0
 8011db0:	f47f aec1 	bne.w	8011b36 <read_submessage_list+0x12>
 8011db4:	4629      	mov	r1, r5
 8011db6:	4620      	mov	r0, r4
 8011db8:	f000 fcc8 	bl	801274c <uxr_read_create_session_status>
 8011dbc:	e6bb      	b.n	8011b36 <read_submessage_list+0x12>
 8011dbe:	4629      	mov	r1, r5
 8011dc0:	4620      	mov	r0, r4
 8011dc2:	f7ff fcf5 	bl	80117b0 <read_submessage_get_info>
 8011dc6:	e6b6      	b.n	8011b36 <read_submessage_list+0x12>
 8011dc8:	b017      	add	sp, #92	@ 0x5c
 8011dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dce:	4629      	mov	r1, r5
 8011dd0:	4620      	mov	r0, r4
 8011dd2:	f000 fcc7 	bl	8012764 <uxr_read_delete_session_status>
 8011dd6:	e6ae      	b.n	8011b36 <read_submessage_list+0x12>
 8011dd8:	f001 fbae 	bl	8013538 <uxr_nanos>
 8011ddc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011dde:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8011de0:	464f      	mov	r7, r9
 8011de2:	fbc3 2706 	smlal	r2, r7, r3, r6
 8011de6:	1812      	adds	r2, r2, r0
 8011de8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011dea:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8011dec:	eb47 0101 	adc.w	r1, r7, r1
 8011df0:	464f      	mov	r7, r9
 8011df2:	fbc3 0706 	smlal	r0, r7, r3, r6
 8011df6:	463b      	mov	r3, r7
 8011df8:	4684      	mov	ip, r0
 8011dfa:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 8011dfe:	fbc7 0906 	smlal	r0, r9, r7, r6
 8011e02:	eb1c 0c00 	adds.w	ip, ip, r0
 8011e06:	464f      	mov	r7, r9
 8011e08:	eb43 0307 	adc.w	r3, r3, r7
 8011e0c:	ebb2 0c0c 	subs.w	ip, r2, ip
 8011e10:	eb61 0303 	sbc.w	r3, r1, r3
 8011e14:	0fda      	lsrs	r2, r3, #31
 8011e16:	eb12 020c 	adds.w	r2, r2, ip
 8011e1a:	f143 0300 	adc.w	r3, r3, #0
 8011e1e:	0852      	lsrs	r2, r2, #1
 8011e20:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8011e24:	105b      	asrs	r3, r3, #1
 8011e26:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 8011e2a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8011e2e:	e6dd      	b.n	8011bec <read_submessage_list+0xc8>
 8011e30:	3b9aca00 	.word	0x3b9aca00

08011e34 <listen_message_reliably>:
 8011e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e38:	1e0b      	subs	r3, r1, #0
 8011e3a:	b09d      	sub	sp, #116	@ 0x74
 8011e3c:	bfb8      	it	lt
 8011e3e:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8011e42:	4680      	mov	r8, r0
 8011e44:	9305      	str	r3, [sp, #20]
 8011e46:	f001 fb5d 	bl	8013504 <uxr_millis>
 8011e4a:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 8011e4e:	4681      	mov	r9, r0
 8011e50:	2a00      	cmp	r2, #0
 8011e52:	f000 80a1 	beq.w	8011f98 <listen_message_reliably+0x164>
 8011e56:	2600      	movs	r6, #0
 8011e58:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011e5c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8011e60:	9303      	str	r3, [sp, #12]
 8011e62:	4630      	mov	r0, r6
 8011e64:	460f      	mov	r7, r1
 8011e66:	e00f      	b.n	8011e88 <listen_message_reliably+0x54>
 8011e68:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8011e6c:	9903      	ldr	r1, [sp, #12]
 8011e6e:	455a      	cmp	r2, fp
 8011e70:	f106 0601 	add.w	r6, r6, #1
 8011e74:	eb73 0101 	sbcs.w	r1, r3, r1
 8011e78:	b2f0      	uxtb	r0, r6
 8011e7a:	da01      	bge.n	8011e80 <listen_message_reliably+0x4c>
 8011e7c:	4693      	mov	fp, r2
 8011e7e:	9303      	str	r3, [sp, #12]
 8011e80:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8011e84:	4283      	cmp	r3, r0
 8011e86:	d960      	bls.n	8011f4a <listen_message_reliably+0x116>
 8011e88:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8011e8c:	2102      	movs	r1, #2
 8011e8e:	2201      	movs	r2, #1
 8011e90:	f001 f9ba 	bl	8013208 <uxr_stream_id>
 8011e94:	00e4      	lsls	r4, r4, #3
 8011e96:	f104 0520 	add.w	r5, r4, #32
 8011e9a:	4445      	add	r5, r8
 8011e9c:	4601      	mov	r1, r0
 8011e9e:	463b      	mov	r3, r7
 8011ea0:	464a      	mov	r2, r9
 8011ea2:	4628      	mov	r0, r5
 8011ea4:	9109      	str	r1, [sp, #36]	@ 0x24
 8011ea6:	f006 fcd1 	bl	801884c <uxr_update_output_stream_heartbeat_timestamp>
 8011eaa:	eb08 0304 	add.w	r3, r8, r4
 8011eae:	2800      	cmp	r0, #0
 8011eb0:	d0da      	beq.n	8011e68 <listen_message_reliably+0x34>
 8011eb2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8011eb6:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8011eba:	9304      	str	r3, [sp, #16]
 8011ebc:	4640      	mov	r0, r8
 8011ebe:	f000 fcd9 	bl	8012874 <uxr_session_header_offset>
 8011ec2:	3501      	adds	r5, #1
 8011ec4:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8011ec8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8011ecc:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8011ed0:	2300      	movs	r3, #0
 8011ed2:	2211      	movs	r2, #17
 8011ed4:	9000      	str	r0, [sp, #0]
 8011ed6:	a90c      	add	r1, sp, #48	@ 0x30
 8011ed8:	4650      	mov	r0, sl
 8011eda:	f7fa f865 	bl	800bfa8 <ucdr_init_buffer_origin_offset>
 8011ede:	2300      	movs	r3, #0
 8011ee0:	2205      	movs	r2, #5
 8011ee2:	210b      	movs	r1, #11
 8011ee4:	4650      	mov	r0, sl
 8011ee6:	f001 fac7 	bl	8013478 <uxr_buffer_submessage_header>
 8011eea:	8968      	ldrh	r0, [r5, #10]
 8011eec:	2101      	movs	r1, #1
 8011eee:	f006 fd6f 	bl	80189d0 <uxr_seq_num_add>
 8011ef2:	892b      	ldrh	r3, [r5, #8]
 8011ef4:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8011ef8:	4602      	mov	r2, r0
 8011efa:	9b04      	ldr	r3, [sp, #16]
 8011efc:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8011f00:	a90a      	add	r1, sp, #40	@ 0x28
 8011f02:	4650      	mov	r0, sl
 8011f04:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8011f08:	f002 fcb0 	bl	801486c <uxr_serialize_HEARTBEAT_Payload>
 8011f0c:	2200      	movs	r2, #0
 8011f0e:	4611      	mov	r1, r2
 8011f10:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011f12:	4640      	mov	r0, r8
 8011f14:	f000 fc58 	bl	80127c8 <uxr_stamp_session_header>
 8011f18:	4650      	mov	r0, sl
 8011f1a:	f7fa f883 	bl	800c024 <ucdr_buffer_length>
 8011f1e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8011f22:	4602      	mov	r2, r0
 8011f24:	a90c      	add	r1, sp, #48	@ 0x30
 8011f26:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011f2a:	4444      	add	r4, r8
 8011f2c:	47a8      	blx	r5
 8011f2e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8011f32:	9903      	ldr	r1, [sp, #12]
 8011f34:	455a      	cmp	r2, fp
 8011f36:	f106 0601 	add.w	r6, r6, #1
 8011f3a:	eb73 0101 	sbcs.w	r1, r3, r1
 8011f3e:	b2f0      	uxtb	r0, r6
 8011f40:	db9c      	blt.n	8011e7c <listen_message_reliably+0x48>
 8011f42:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8011f46:	4283      	cmp	r3, r0
 8011f48:	d89e      	bhi.n	8011e88 <listen_message_reliably+0x54>
 8011f4a:	9a03      	ldr	r2, [sp, #12]
 8011f4c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011f50:	429a      	cmp	r2, r3
 8011f52:	bf08      	it	eq
 8011f54:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8011f58:	d01e      	beq.n	8011f98 <listen_message_reliably+0x164>
 8011f5a:	ebab 0309 	sub.w	r3, fp, r9
 8011f5e:	9905      	ldr	r1, [sp, #20]
 8011f60:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	bf08      	it	eq
 8011f68:	2301      	moveq	r3, #1
 8011f6a:	4299      	cmp	r1, r3
 8011f6c:	bfa8      	it	ge
 8011f6e:	4619      	movge	r1, r3
 8011f70:	6894      	ldr	r4, [r2, #8]
 8011f72:	6810      	ldr	r0, [r2, #0]
 8011f74:	4689      	mov	r9, r1
 8011f76:	460b      	mov	r3, r1
 8011f78:	aa08      	add	r2, sp, #32
 8011f7a:	a907      	add	r1, sp, #28
 8011f7c:	47a0      	blx	r4
 8011f7e:	b968      	cbnz	r0, 8011f9c <listen_message_reliably+0x168>
 8011f80:	9b05      	ldr	r3, [sp, #20]
 8011f82:	eba3 0309 	sub.w	r3, r3, r9
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	9305      	str	r3, [sp, #20]
 8011f8a:	f73f af5c 	bgt.w	8011e46 <listen_message_reliably+0x12>
 8011f8e:	4604      	mov	r4, r0
 8011f90:	4620      	mov	r0, r4
 8011f92:	b01d      	add	sp, #116	@ 0x74
 8011f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f98:	9b05      	ldr	r3, [sp, #20]
 8011f9a:	e7e0      	b.n	8011f5e <listen_message_reliably+0x12a>
 8011f9c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8011fa0:	4604      	mov	r4, r0
 8011fa2:	a80c      	add	r0, sp, #48	@ 0x30
 8011fa4:	f7fa f812 	bl	800bfcc <ucdr_init_buffer>
 8011fa8:	2500      	movs	r5, #0
 8011faa:	f10d 031a 	add.w	r3, sp, #26
 8011fae:	aa06      	add	r2, sp, #24
 8011fb0:	a90c      	add	r1, sp, #48	@ 0x30
 8011fb2:	4640      	mov	r0, r8
 8011fb4:	f88d 5018 	strb.w	r5, [sp, #24]
 8011fb8:	f000 fc1a 	bl	80127f0 <uxr_read_session_header>
 8011fbc:	b918      	cbnz	r0, 8011fc6 <listen_message_reliably+0x192>
 8011fbe:	4620      	mov	r0, r4
 8011fc0:	b01d      	add	sp, #116	@ 0x74
 8011fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fc6:	4629      	mov	r1, r5
 8011fc8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011fcc:	f001 f946 	bl	801325c <uxr_stream_id_from_raw>
 8011fd0:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8011fd4:	2d01      	cmp	r5, #1
 8011fd6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8011fda:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8011fde:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8011fe2:	d04b      	beq.n	801207c <listen_message_reliably+0x248>
 8011fe4:	2d02      	cmp	r5, #2
 8011fe6:	d00f      	beq.n	8012008 <listen_message_reliably+0x1d4>
 8011fe8:	2d00      	cmp	r5, #0
 8011fea:	d1e8      	bne.n	8011fbe <listen_message_reliably+0x18a>
 8011fec:	4629      	mov	r1, r5
 8011fee:	4628      	mov	r0, r5
 8011ff0:	f001 f934 	bl	801325c <uxr_stream_id_from_raw>
 8011ff4:	a90c      	add	r1, sp, #48	@ 0x30
 8011ff6:	4602      	mov	r2, r0
 8011ff8:	4640      	mov	r0, r8
 8011ffa:	920a      	str	r2, [sp, #40]	@ 0x28
 8011ffc:	f7ff fd92 	bl	8011b24 <read_submessage_list>
 8012000:	4620      	mov	r0, r4
 8012002:	b01d      	add	sp, #116	@ 0x74
 8012004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012008:	4631      	mov	r1, r6
 801200a:	f108 0008 	add.w	r0, r8, #8
 801200e:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8012012:	f001 fa11 	bl	8013438 <uxr_get_input_reliable_stream>
 8012016:	4607      	mov	r7, r0
 8012018:	b338      	cbz	r0, 801206a <listen_message_reliably+0x236>
 801201a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801201c:	9203      	str	r2, [sp, #12]
 801201e:	a80c      	add	r0, sp, #48	@ 0x30
 8012020:	f7fa f804 	bl	800c02c <ucdr_buffer_remaining>
 8012024:	4603      	mov	r3, r0
 8012026:	f10d 0019 	add.w	r0, sp, #25
 801202a:	9000      	str	r0, [sp, #0]
 801202c:	9a03      	ldr	r2, [sp, #12]
 801202e:	4651      	mov	r1, sl
 8012030:	4638      	mov	r0, r7
 8012032:	f006 f821 	bl	8018078 <uxr_receive_reliable_message>
 8012036:	b1c0      	cbz	r0, 801206a <listen_message_reliably+0x236>
 8012038:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801203c:	b393      	cbz	r3, 80120a4 <listen_message_reliably+0x270>
 801203e:	ad14      	add	r5, sp, #80	@ 0x50
 8012040:	f04f 0a02 	mov.w	sl, #2
 8012044:	e00a      	b.n	801205c <listen_message_reliably+0x228>
 8012046:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 801204a:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 801204e:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8012052:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012054:	4629      	mov	r1, r5
 8012056:	4640      	mov	r0, r8
 8012058:	f7ff fd64 	bl	8011b24 <read_submessage_list>
 801205c:	2204      	movs	r2, #4
 801205e:	4629      	mov	r1, r5
 8012060:	4638      	mov	r0, r7
 8012062:	f006 f889 	bl	8018178 <uxr_next_input_reliable_buffer_available>
 8012066:	2800      	cmp	r0, #0
 8012068:	d1ed      	bne.n	8012046 <listen_message_reliably+0x212>
 801206a:	4640      	mov	r0, r8
 801206c:	4632      	mov	r2, r6
 801206e:	4649      	mov	r1, r9
 8012070:	f7ff fbd4 	bl	801181c <write_submessage_acknack.isra.0>
 8012074:	4620      	mov	r0, r4
 8012076:	b01d      	add	sp, #116	@ 0x74
 8012078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801207c:	4631      	mov	r1, r6
 801207e:	f108 0008 	add.w	r0, r8, #8
 8012082:	f001 f9cf 	bl	8013424 <uxr_get_input_best_effort_stream>
 8012086:	2800      	cmp	r0, #0
 8012088:	d099      	beq.n	8011fbe <listen_message_reliably+0x18a>
 801208a:	4651      	mov	r1, sl
 801208c:	f005 ff60 	bl	8017f50 <uxr_receive_best_effort_message>
 8012090:	2800      	cmp	r0, #0
 8012092:	d094      	beq.n	8011fbe <listen_message_reliably+0x18a>
 8012094:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8012098:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801209a:	a90c      	add	r1, sp, #48	@ 0x30
 801209c:	4640      	mov	r0, r8
 801209e:	f7ff fd41 	bl	8011b24 <read_submessage_list>
 80120a2:	e78c      	b.n	8011fbe <listen_message_reliably+0x18a>
 80120a4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 80120a8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80120aa:	a90c      	add	r1, sp, #48	@ 0x30
 80120ac:	4640      	mov	r0, r8
 80120ae:	f7ff fd39 	bl	8011b24 <read_submessage_list>
 80120b2:	e7c4      	b.n	801203e <listen_message_reliably+0x20a>

080120b4 <uxr_run_session_timeout>:
 80120b4:	b570      	push	{r4, r5, r6, lr}
 80120b6:	4604      	mov	r4, r0
 80120b8:	460d      	mov	r5, r1
 80120ba:	f001 fa23 	bl	8013504 <uxr_millis>
 80120be:	4606      	mov	r6, r0
 80120c0:	4620      	mov	r0, r4
 80120c2:	f7ff fc71 	bl	80119a8 <uxr_flash_output_streams>
 80120c6:	4629      	mov	r1, r5
 80120c8:	4620      	mov	r0, r4
 80120ca:	f7ff feb3 	bl	8011e34 <listen_message_reliably>
 80120ce:	f001 fa19 	bl	8013504 <uxr_millis>
 80120d2:	1b83      	subs	r3, r0, r6
 80120d4:	1ae9      	subs	r1, r5, r3
 80120d6:	2900      	cmp	r1, #0
 80120d8:	dcf6      	bgt.n	80120c8 <uxr_run_session_timeout+0x14>
 80120da:	f104 0008 	add.w	r0, r4, #8
 80120de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80120e2:	f001 b9b3 	b.w	801344c <uxr_output_streams_confirmed>
 80120e6:	bf00      	nop

080120e8 <uxr_run_session_until_data>:
 80120e8:	b570      	push	{r4, r5, r6, lr}
 80120ea:	4604      	mov	r4, r0
 80120ec:	460d      	mov	r5, r1
 80120ee:	f001 fa09 	bl	8013504 <uxr_millis>
 80120f2:	4606      	mov	r6, r0
 80120f4:	4620      	mov	r0, r4
 80120f6:	f7ff fc57 	bl	80119a8 <uxr_flash_output_streams>
 80120fa:	2300      	movs	r3, #0
 80120fc:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8012100:	4629      	mov	r1, r5
 8012102:	e005      	b.n	8012110 <uxr_run_session_until_data+0x28>
 8012104:	f001 f9fe 	bl	8013504 <uxr_millis>
 8012108:	1b83      	subs	r3, r0, r6
 801210a:	1ae9      	subs	r1, r5, r3
 801210c:	2900      	cmp	r1, #0
 801210e:	dd07      	ble.n	8012120 <uxr_run_session_until_data+0x38>
 8012110:	4620      	mov	r0, r4
 8012112:	f7ff fe8f 	bl	8011e34 <listen_message_reliably>
 8012116:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 801211a:	2800      	cmp	r0, #0
 801211c:	d0f2      	beq.n	8012104 <uxr_run_session_until_data+0x1c>
 801211e:	bd70      	pop	{r4, r5, r6, pc}
 8012120:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8012124:	bd70      	pop	{r4, r5, r6, pc}
 8012126:	bf00      	nop

08012128 <uxr_run_session_until_confirm_delivery>:
 8012128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801212c:	4606      	mov	r6, r0
 801212e:	460d      	mov	r5, r1
 8012130:	f001 f9e8 	bl	8013504 <uxr_millis>
 8012134:	4607      	mov	r7, r0
 8012136:	4630      	mov	r0, r6
 8012138:	f7ff fc36 	bl	80119a8 <uxr_flash_output_streams>
 801213c:	2d00      	cmp	r5, #0
 801213e:	f106 0808 	add.w	r8, r6, #8
 8012142:	bfa8      	it	ge
 8012144:	462c      	movge	r4, r5
 8012146:	da07      	bge.n	8012158 <uxr_run_session_until_confirm_delivery+0x30>
 8012148:	e00e      	b.n	8012168 <uxr_run_session_until_confirm_delivery+0x40>
 801214a:	f7ff fe73 	bl	8011e34 <listen_message_reliably>
 801214e:	f001 f9d9 	bl	8013504 <uxr_millis>
 8012152:	1bc3      	subs	r3, r0, r7
 8012154:	1aec      	subs	r4, r5, r3
 8012156:	d407      	bmi.n	8012168 <uxr_run_session_until_confirm_delivery+0x40>
 8012158:	4640      	mov	r0, r8
 801215a:	f001 f977 	bl	801344c <uxr_output_streams_confirmed>
 801215e:	4603      	mov	r3, r0
 8012160:	4621      	mov	r1, r4
 8012162:	4630      	mov	r0, r6
 8012164:	2b00      	cmp	r3, #0
 8012166:	d0f0      	beq.n	801214a <uxr_run_session_until_confirm_delivery+0x22>
 8012168:	4640      	mov	r0, r8
 801216a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801216e:	f001 b96d 	b.w	801344c <uxr_output_streams_confirmed>
 8012172:	bf00      	nop

08012174 <uxr_run_session_until_all_status>:
 8012174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012178:	9c08      	ldr	r4, [sp, #32]
 801217a:	4606      	mov	r6, r0
 801217c:	460f      	mov	r7, r1
 801217e:	4691      	mov	r9, r2
 8012180:	461d      	mov	r5, r3
 8012182:	f7ff fc11 	bl	80119a8 <uxr_flash_output_streams>
 8012186:	b124      	cbz	r4, 8012192 <uxr_run_session_until_all_status+0x1e>
 8012188:	4622      	mov	r2, r4
 801218a:	21ff      	movs	r1, #255	@ 0xff
 801218c:	4628      	mov	r0, r5
 801218e:	f007 fc89 	bl	8019aa4 <memset>
 8012192:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 8012196:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8012198:	f001 f9b4 	bl	8013504 <uxr_millis>
 801219c:	3d01      	subs	r5, #1
 801219e:	f1a9 0902 	sub.w	r9, r9, #2
 80121a2:	4680      	mov	r8, r0
 80121a4:	4639      	mov	r1, r7
 80121a6:	4630      	mov	r0, r6
 80121a8:	f7ff fe44 	bl	8011e34 <listen_message_reliably>
 80121ac:	f001 f9aa 	bl	8013504 <uxr_millis>
 80121b0:	eba0 0008 	sub.w	r0, r0, r8
 80121b4:	1a39      	subs	r1, r7, r0
 80121b6:	b344      	cbz	r4, 801220a <uxr_run_session_until_all_status+0x96>
 80121b8:	4628      	mov	r0, r5
 80121ba:	46ac      	mov	ip, r5
 80121bc:	2301      	movs	r3, #1
 80121be:	e002      	b.n	80121c6 <uxr_run_session_until_all_status+0x52>
 80121c0:	42a3      	cmp	r3, r4
 80121c2:	d20d      	bcs.n	80121e0 <uxr_run_session_until_all_status+0x6c>
 80121c4:	3301      	adds	r3, #1
 80121c6:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 80121ca:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80121ce:	d1f7      	bne.n	80121c0 <uxr_run_session_until_all_status+0x4c>
 80121d0:	42a3      	cmp	r3, r4
 80121d2:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 80121d6:	d213      	bcs.n	8012200 <uxr_run_session_until_all_status+0x8c>
 80121d8:	2a00      	cmp	r2, #0
 80121da:	d0f3      	beq.n	80121c4 <uxr_run_session_until_all_status+0x50>
 80121dc:	2900      	cmp	r1, #0
 80121de:	dce2      	bgt.n	80121a6 <uxr_run_session_until_all_status+0x32>
 80121e0:	2300      	movs	r3, #0
 80121e2:	67f3      	str	r3, [r6, #124]	@ 0x7c
 80121e4:	442c      	add	r4, r5
 80121e6:	e001      	b.n	80121ec <uxr_run_session_until_all_status+0x78>
 80121e8:	2b01      	cmp	r3, #1
 80121ea:	d812      	bhi.n	8012212 <uxr_run_session_until_all_status+0x9e>
 80121ec:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80121f0:	4284      	cmp	r4, r0
 80121f2:	d1f9      	bne.n	80121e8 <uxr_run_session_until_all_status+0x74>
 80121f4:	2b01      	cmp	r3, #1
 80121f6:	bf8c      	ite	hi
 80121f8:	2000      	movhi	r0, #0
 80121fa:	2001      	movls	r0, #1
 80121fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012200:	2900      	cmp	r1, #0
 8012202:	dded      	ble.n	80121e0 <uxr_run_session_until_all_status+0x6c>
 8012204:	2a00      	cmp	r2, #0
 8012206:	d1ce      	bne.n	80121a6 <uxr_run_session_until_all_status+0x32>
 8012208:	e7ea      	b.n	80121e0 <uxr_run_session_until_all_status+0x6c>
 801220a:	67f4      	str	r4, [r6, #124]	@ 0x7c
 801220c:	2001      	movs	r0, #1
 801220e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012212:	2000      	movs	r0, #0
 8012214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08012218 <uxr_run_session_until_pong>:
 8012218:	b570      	push	{r4, r5, r6, lr}
 801221a:	4604      	mov	r4, r0
 801221c:	460d      	mov	r5, r1
 801221e:	f001 f971 	bl	8013504 <uxr_millis>
 8012222:	4606      	mov	r6, r0
 8012224:	4620      	mov	r0, r4
 8012226:	f7ff fbbf 	bl	80119a8 <uxr_flash_output_streams>
 801222a:	2300      	movs	r3, #0
 801222c:	f884 30b5 	strb.w	r3, [r4, #181]	@ 0xb5
 8012230:	4629      	mov	r1, r5
 8012232:	e005      	b.n	8012240 <uxr_run_session_until_pong+0x28>
 8012234:	f001 f966 	bl	8013504 <uxr_millis>
 8012238:	1b83      	subs	r3, r0, r6
 801223a:	1ae9      	subs	r1, r5, r3
 801223c:	2900      	cmp	r1, #0
 801223e:	dd0c      	ble.n	801225a <uxr_run_session_until_pong+0x42>
 8012240:	4620      	mov	r0, r4
 8012242:	f7ff fdf7 	bl	8011e34 <listen_message_reliably>
 8012246:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 801224a:	2800      	cmp	r0, #0
 801224c:	d0f2      	beq.n	8012234 <uxr_run_session_until_pong+0x1c>
 801224e:	f1a0 0001 	sub.w	r0, r0, #1
 8012252:	fab0 f080 	clz	r0, r0
 8012256:	0940      	lsrs	r0, r0, #5
 8012258:	bd70      	pop	{r4, r5, r6, pc}
 801225a:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 801225e:	f1a0 0001 	sub.w	r0, r0, #1
 8012262:	fab0 f080 	clz	r0, r0
 8012266:	0940      	lsrs	r0, r0, #5
 8012268:	bd70      	pop	{r4, r5, r6, pc}
 801226a:	bf00      	nop

0801226c <wait_session_status>:
 801226c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012270:	4604      	mov	r4, r0
 8012272:	b09d      	sub	sp, #116	@ 0x74
 8012274:	20ff      	movs	r0, #255	@ 0xff
 8012276:	7160      	strb	r0, [r4, #5]
 8012278:	9303      	str	r3, [sp, #12]
 801227a:	2b00      	cmp	r3, #0
 801227c:	f000 80b6 	beq.w	80123ec <wait_session_status+0x180>
 8012280:	468a      	mov	sl, r1
 8012282:	4691      	mov	r9, r2
 8012284:	f04f 0b00 	mov.w	fp, #0
 8012288:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801228a:	464a      	mov	r2, r9
 801228c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012290:	4651      	mov	r1, sl
 8012292:	47a8      	blx	r5
 8012294:	f001 f936 	bl	8013504 <uxr_millis>
 8012298:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801229c:	4605      	mov	r5, r0
 801229e:	e009      	b.n	80122b4 <wait_session_status+0x48>
 80122a0:	f001 f930 	bl	8013504 <uxr_millis>
 80122a4:	1b40      	subs	r0, r0, r5
 80122a6:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	dd40      	ble.n	8012330 <wait_session_status+0xc4>
 80122ae:	7960      	ldrb	r0, [r4, #5]
 80122b0:	28ff      	cmp	r0, #255	@ 0xff
 80122b2:	d145      	bne.n	8012340 <wait_session_status+0xd4>
 80122b4:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 80122b6:	a908      	add	r1, sp, #32
 80122b8:	6896      	ldr	r6, [r2, #8]
 80122ba:	6810      	ldr	r0, [r2, #0]
 80122bc:	aa09      	add	r2, sp, #36	@ 0x24
 80122be:	47b0      	blx	r6
 80122c0:	2800      	cmp	r0, #0
 80122c2:	d0ed      	beq.n	80122a0 <wait_session_status+0x34>
 80122c4:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80122c8:	a80c      	add	r0, sp, #48	@ 0x30
 80122ca:	f7f9 fe7f 	bl	800bfcc <ucdr_init_buffer>
 80122ce:	2600      	movs	r6, #0
 80122d0:	f10d 031e 	add.w	r3, sp, #30
 80122d4:	aa07      	add	r2, sp, #28
 80122d6:	a90c      	add	r1, sp, #48	@ 0x30
 80122d8:	4620      	mov	r0, r4
 80122da:	f88d 601c 	strb.w	r6, [sp, #28]
 80122de:	f000 fa87 	bl	80127f0 <uxr_read_session_header>
 80122e2:	2800      	cmp	r0, #0
 80122e4:	d0dc      	beq.n	80122a0 <wait_session_status+0x34>
 80122e6:	4631      	mov	r1, r6
 80122e8:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80122ec:	f000 ffb6 	bl	801325c <uxr_stream_id_from_raw>
 80122f0:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80122f4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80122f8:	9302      	str	r3, [sp, #8]
 80122fa:	2f01      	cmp	r7, #1
 80122fc:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8012300:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8012304:	d05c      	beq.n	80123c0 <wait_session_status+0x154>
 8012306:	2f02      	cmp	r7, #2
 8012308:	d020      	beq.n	801234c <wait_session_status+0xe0>
 801230a:	2f00      	cmp	r7, #0
 801230c:	d1c8      	bne.n	80122a0 <wait_session_status+0x34>
 801230e:	4639      	mov	r1, r7
 8012310:	4638      	mov	r0, r7
 8012312:	f000 ffa3 	bl	801325c <uxr_stream_id_from_raw>
 8012316:	a90c      	add	r1, sp, #48	@ 0x30
 8012318:	4602      	mov	r2, r0
 801231a:	900b      	str	r0, [sp, #44]	@ 0x2c
 801231c:	4620      	mov	r0, r4
 801231e:	f7ff fc01 	bl	8011b24 <read_submessage_list>
 8012322:	f001 f8ef 	bl	8013504 <uxr_millis>
 8012326:	1b40      	subs	r0, r0, r5
 8012328:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801232c:	2b00      	cmp	r3, #0
 801232e:	dcbe      	bgt.n	80122ae <wait_session_status+0x42>
 8012330:	9b03      	ldr	r3, [sp, #12]
 8012332:	7960      	ldrb	r0, [r4, #5]
 8012334:	f10b 0b01 	add.w	fp, fp, #1
 8012338:	455b      	cmp	r3, fp
 801233a:	d001      	beq.n	8012340 <wait_session_status+0xd4>
 801233c:	28ff      	cmp	r0, #255	@ 0xff
 801233e:	d0a3      	beq.n	8012288 <wait_session_status+0x1c>
 8012340:	38ff      	subs	r0, #255	@ 0xff
 8012342:	bf18      	it	ne
 8012344:	2001      	movne	r0, #1
 8012346:	b01d      	add	sp, #116	@ 0x74
 8012348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801234c:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8012350:	9304      	str	r3, [sp, #16]
 8012352:	4631      	mov	r1, r6
 8012354:	f104 0008 	add.w	r0, r4, #8
 8012358:	f001 f86e 	bl	8013438 <uxr_get_input_reliable_stream>
 801235c:	4680      	mov	r8, r0
 801235e:	b348      	cbz	r0, 80123b4 <wait_session_status+0x148>
 8012360:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012362:	9205      	str	r2, [sp, #20]
 8012364:	a80c      	add	r0, sp, #48	@ 0x30
 8012366:	f7f9 fe61 	bl	800c02c <ucdr_buffer_remaining>
 801236a:	4603      	mov	r3, r0
 801236c:	f10d 001d 	add.w	r0, sp, #29
 8012370:	9000      	str	r0, [sp, #0]
 8012372:	9a05      	ldr	r2, [sp, #20]
 8012374:	9902      	ldr	r1, [sp, #8]
 8012376:	4640      	mov	r0, r8
 8012378:	f005 fe7e 	bl	8018078 <uxr_receive_reliable_message>
 801237c:	b1d0      	cbz	r0, 80123b4 <wait_session_status+0x148>
 801237e:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8012382:	2b00      	cmp	r3, #0
 8012384:	d03a      	beq.n	80123fc <wait_session_status+0x190>
 8012386:	9f04      	ldr	r7, [sp, #16]
 8012388:	e00a      	b.n	80123a0 <wait_session_status+0x134>
 801238a:	f04f 0302 	mov.w	r3, #2
 801238e:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 8012392:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8012396:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 801239a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801239c:	f7ff fbc2 	bl	8011b24 <read_submessage_list>
 80123a0:	a914      	add	r1, sp, #80	@ 0x50
 80123a2:	2204      	movs	r2, #4
 80123a4:	4640      	mov	r0, r8
 80123a6:	f005 fee7 	bl	8018178 <uxr_next_input_reliable_buffer_available>
 80123aa:	4603      	mov	r3, r0
 80123ac:	a914      	add	r1, sp, #80	@ 0x50
 80123ae:	4620      	mov	r0, r4
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d1ea      	bne.n	801238a <wait_session_status+0x11e>
 80123b4:	9904      	ldr	r1, [sp, #16]
 80123b6:	4632      	mov	r2, r6
 80123b8:	4620      	mov	r0, r4
 80123ba:	f7ff fa2f 	bl	801181c <write_submessage_acknack.isra.0>
 80123be:	e76f      	b.n	80122a0 <wait_session_status+0x34>
 80123c0:	4631      	mov	r1, r6
 80123c2:	f104 0008 	add.w	r0, r4, #8
 80123c6:	f001 f82d 	bl	8013424 <uxr_get_input_best_effort_stream>
 80123ca:	2800      	cmp	r0, #0
 80123cc:	f43f af68 	beq.w	80122a0 <wait_session_status+0x34>
 80123d0:	9902      	ldr	r1, [sp, #8]
 80123d2:	f005 fdbd 	bl	8017f50 <uxr_receive_best_effort_message>
 80123d6:	2800      	cmp	r0, #0
 80123d8:	f43f af62 	beq.w	80122a0 <wait_session_status+0x34>
 80123dc:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 80123e0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80123e2:	a90c      	add	r1, sp, #48	@ 0x30
 80123e4:	4620      	mov	r0, r4
 80123e6:	f7ff fb9d 	bl	8011b24 <read_submessage_list>
 80123ea:	e759      	b.n	80122a0 <wait_session_status+0x34>
 80123ec:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80123ee:	e9d3 0400 	ldrd	r0, r4, [r3]
 80123f2:	47a0      	blx	r4
 80123f4:	2001      	movs	r0, #1
 80123f6:	b01d      	add	sp, #116	@ 0x74
 80123f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123fc:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8012400:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012402:	a90c      	add	r1, sp, #48	@ 0x30
 8012404:	4620      	mov	r0, r4
 8012406:	f7ff fb8d 	bl	8011b24 <read_submessage_list>
 801240a:	e7bc      	b.n	8012386 <wait_session_status+0x11a>

0801240c <uxr_delete_session_retries>:
 801240c:	b530      	push	{r4, r5, lr}
 801240e:	b08f      	sub	sp, #60	@ 0x3c
 8012410:	4604      	mov	r4, r0
 8012412:	460d      	mov	r5, r1
 8012414:	f000 fa2e 	bl	8012874 <uxr_session_header_offset>
 8012418:	2300      	movs	r3, #0
 801241a:	2210      	movs	r2, #16
 801241c:	9000      	str	r0, [sp, #0]
 801241e:	a902      	add	r1, sp, #8
 8012420:	a806      	add	r0, sp, #24
 8012422:	f7f9 fdc1 	bl	800bfa8 <ucdr_init_buffer_origin_offset>
 8012426:	a906      	add	r1, sp, #24
 8012428:	4620      	mov	r0, r4
 801242a:	f000 f973 	bl	8012714 <uxr_buffer_delete_session>
 801242e:	2200      	movs	r2, #0
 8012430:	4611      	mov	r1, r2
 8012432:	9b06      	ldr	r3, [sp, #24]
 8012434:	4620      	mov	r0, r4
 8012436:	f000 f9c7 	bl	80127c8 <uxr_stamp_session_header>
 801243a:	a806      	add	r0, sp, #24
 801243c:	f7f9 fdf2 	bl	800c024 <ucdr_buffer_length>
 8012440:	462b      	mov	r3, r5
 8012442:	4602      	mov	r2, r0
 8012444:	a902      	add	r1, sp, #8
 8012446:	4620      	mov	r0, r4
 8012448:	f7ff ff10 	bl	801226c <wait_session_status>
 801244c:	b118      	cbz	r0, 8012456 <uxr_delete_session_retries+0x4a>
 801244e:	7960      	ldrb	r0, [r4, #5]
 8012450:	fab0 f080 	clz	r0, r0
 8012454:	0940      	lsrs	r0, r0, #5
 8012456:	b00f      	add	sp, #60	@ 0x3c
 8012458:	bd30      	pop	{r4, r5, pc}
 801245a:	bf00      	nop

0801245c <uxr_create_session>:
 801245c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012460:	f100 0b08 	add.w	fp, r0, #8
 8012464:	b0ab      	sub	sp, #172	@ 0xac
 8012466:	4604      	mov	r4, r0
 8012468:	4658      	mov	r0, fp
 801246a:	f000 ff2b 	bl	80132c4 <uxr_reset_stream_storage>
 801246e:	4620      	mov	r0, r4
 8012470:	f000 fa00 	bl	8012874 <uxr_session_header_offset>
 8012474:	2300      	movs	r3, #0
 8012476:	9000      	str	r0, [sp, #0]
 8012478:	221c      	movs	r2, #28
 801247a:	a90b      	add	r1, sp, #44	@ 0x2c
 801247c:	a812      	add	r0, sp, #72	@ 0x48
 801247e:	f7f9 fd93 	bl	800bfa8 <ucdr_init_buffer_origin_offset>
 8012482:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012484:	8a1a      	ldrh	r2, [r3, #16]
 8012486:	3a04      	subs	r2, #4
 8012488:	b292      	uxth	r2, r2
 801248a:	a912      	add	r1, sp, #72	@ 0x48
 801248c:	4620      	mov	r0, r4
 801248e:	f000 f917 	bl	80126c0 <uxr_buffer_create_session>
 8012492:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8012494:	4620      	mov	r0, r4
 8012496:	f000 f983 	bl	80127a0 <uxr_stamp_create_session_header>
 801249a:	a812      	add	r0, sp, #72	@ 0x48
 801249c:	f7f9 fdc2 	bl	800c024 <ucdr_buffer_length>
 80124a0:	23ff      	movs	r3, #255	@ 0xff
 80124a2:	7163      	strb	r3, [r4, #5]
 80124a4:	230a      	movs	r3, #10
 80124a6:	46da      	mov	sl, fp
 80124a8:	9303      	str	r3, [sp, #12]
 80124aa:	4683      	mov	fp, r0
 80124ac:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80124ae:	465a      	mov	r2, fp
 80124b0:	e9d3 0500 	ldrd	r0, r5, [r3]
 80124b4:	a90b      	add	r1, sp, #44	@ 0x2c
 80124b6:	47a8      	blx	r5
 80124b8:	f001 f824 	bl	8013504 <uxr_millis>
 80124bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80124c0:	4605      	mov	r5, r0
 80124c2:	e009      	b.n	80124d8 <uxr_create_session+0x7c>
 80124c4:	f001 f81e 	bl	8013504 <uxr_millis>
 80124c8:	1b40      	subs	r0, r0, r5
 80124ca:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	7962      	ldrb	r2, [r4, #5]
 80124d2:	dd38      	ble.n	8012546 <uxr_create_session+0xea>
 80124d4:	2aff      	cmp	r2, #255	@ 0xff
 80124d6:	d13c      	bne.n	8012552 <uxr_create_session+0xf6>
 80124d8:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 80124da:	a907      	add	r1, sp, #28
 80124dc:	6896      	ldr	r6, [r2, #8]
 80124de:	6810      	ldr	r0, [r2, #0]
 80124e0:	aa08      	add	r2, sp, #32
 80124e2:	47b0      	blx	r6
 80124e4:	2800      	cmp	r0, #0
 80124e6:	d0ed      	beq.n	80124c4 <uxr_create_session+0x68>
 80124e8:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80124ec:	a81a      	add	r0, sp, #104	@ 0x68
 80124ee:	f7f9 fd6d 	bl	800bfcc <ucdr_init_buffer>
 80124f2:	2600      	movs	r6, #0
 80124f4:	f10d 031a 	add.w	r3, sp, #26
 80124f8:	aa06      	add	r2, sp, #24
 80124fa:	a91a      	add	r1, sp, #104	@ 0x68
 80124fc:	4620      	mov	r0, r4
 80124fe:	f88d 6018 	strb.w	r6, [sp, #24]
 8012502:	f000 f975 	bl	80127f0 <uxr_read_session_header>
 8012506:	2800      	cmp	r0, #0
 8012508:	d0dc      	beq.n	80124c4 <uxr_create_session+0x68>
 801250a:	4631      	mov	r1, r6
 801250c:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8012510:	f000 fea4 	bl	801325c <uxr_stream_id_from_raw>
 8012514:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8012518:	2e01      	cmp	r6, #1
 801251a:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 801251e:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 8012522:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8012526:	d053      	beq.n	80125d0 <uxr_create_session+0x174>
 8012528:	2e02      	cmp	r6, #2
 801252a:	d018      	beq.n	801255e <uxr_create_session+0x102>
 801252c:	2e00      	cmp	r6, #0
 801252e:	d1c9      	bne.n	80124c4 <uxr_create_session+0x68>
 8012530:	4631      	mov	r1, r6
 8012532:	4630      	mov	r0, r6
 8012534:	f000 fe92 	bl	801325c <uxr_stream_id_from_raw>
 8012538:	a91a      	add	r1, sp, #104	@ 0x68
 801253a:	4602      	mov	r2, r0
 801253c:	900a      	str	r0, [sp, #40]	@ 0x28
 801253e:	4620      	mov	r0, r4
 8012540:	f7ff faf0 	bl	8011b24 <read_submessage_list>
 8012544:	e7be      	b.n	80124c4 <uxr_create_session+0x68>
 8012546:	9b03      	ldr	r3, [sp, #12]
 8012548:	3b01      	subs	r3, #1
 801254a:	9303      	str	r3, [sp, #12]
 801254c:	d001      	beq.n	8012552 <uxr_create_session+0xf6>
 801254e:	2aff      	cmp	r2, #255	@ 0xff
 8012550:	d0ac      	beq.n	80124ac <uxr_create_session+0x50>
 8012552:	2a00      	cmp	r2, #0
 8012554:	d051      	beq.n	80125fa <uxr_create_session+0x19e>
 8012556:	2000      	movs	r0, #0
 8012558:	b02b      	add	sp, #172	@ 0xac
 801255a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801255e:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8012562:	9304      	str	r3, [sp, #16]
 8012564:	4639      	mov	r1, r7
 8012566:	4650      	mov	r0, sl
 8012568:	f000 ff66 	bl	8013438 <uxr_get_input_reliable_stream>
 801256c:	4680      	mov	r8, r0
 801256e:	b348      	cbz	r0, 80125c4 <uxr_create_session+0x168>
 8012570:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8012572:	9205      	str	r2, [sp, #20]
 8012574:	a81a      	add	r0, sp, #104	@ 0x68
 8012576:	f7f9 fd59 	bl	800c02c <ucdr_buffer_remaining>
 801257a:	4603      	mov	r3, r0
 801257c:	f10d 0019 	add.w	r0, sp, #25
 8012580:	9000      	str	r0, [sp, #0]
 8012582:	9a05      	ldr	r2, [sp, #20]
 8012584:	4649      	mov	r1, r9
 8012586:	4640      	mov	r0, r8
 8012588:	f005 fd76 	bl	8018078 <uxr_receive_reliable_message>
 801258c:	b1d0      	cbz	r0, 80125c4 <uxr_create_session+0x168>
 801258e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d038      	beq.n	8012608 <uxr_create_session+0x1ac>
 8012596:	9e04      	ldr	r6, [sp, #16]
 8012598:	e00a      	b.n	80125b0 <uxr_create_session+0x154>
 801259a:	f04f 0302 	mov.w	r3, #2
 801259e:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 80125a2:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 80125a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80125aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80125ac:	f7ff faba 	bl	8011b24 <read_submessage_list>
 80125b0:	a922      	add	r1, sp, #136	@ 0x88
 80125b2:	2204      	movs	r2, #4
 80125b4:	4640      	mov	r0, r8
 80125b6:	f005 fddf 	bl	8018178 <uxr_next_input_reliable_buffer_available>
 80125ba:	4603      	mov	r3, r0
 80125bc:	a922      	add	r1, sp, #136	@ 0x88
 80125be:	4620      	mov	r0, r4
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d1ea      	bne.n	801259a <uxr_create_session+0x13e>
 80125c4:	9904      	ldr	r1, [sp, #16]
 80125c6:	463a      	mov	r2, r7
 80125c8:	4620      	mov	r0, r4
 80125ca:	f7ff f927 	bl	801181c <write_submessage_acknack.isra.0>
 80125ce:	e779      	b.n	80124c4 <uxr_create_session+0x68>
 80125d0:	4639      	mov	r1, r7
 80125d2:	4650      	mov	r0, sl
 80125d4:	f000 ff26 	bl	8013424 <uxr_get_input_best_effort_stream>
 80125d8:	2800      	cmp	r0, #0
 80125da:	f43f af73 	beq.w	80124c4 <uxr_create_session+0x68>
 80125de:	4649      	mov	r1, r9
 80125e0:	f005 fcb6 	bl	8017f50 <uxr_receive_best_effort_message>
 80125e4:	2800      	cmp	r0, #0
 80125e6:	f43f af6d 	beq.w	80124c4 <uxr_create_session+0x68>
 80125ea:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 80125ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80125f0:	a91a      	add	r1, sp, #104	@ 0x68
 80125f2:	4620      	mov	r0, r4
 80125f4:	f7ff fa96 	bl	8011b24 <read_submessage_list>
 80125f8:	e764      	b.n	80124c4 <uxr_create_session+0x68>
 80125fa:	4650      	mov	r0, sl
 80125fc:	f000 fe62 	bl	80132c4 <uxr_reset_stream_storage>
 8012600:	2001      	movs	r0, #1
 8012602:	b02b      	add	sp, #172	@ 0xac
 8012604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012608:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 801260c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801260e:	a91a      	add	r1, sp, #104	@ 0x68
 8012610:	4620      	mov	r0, r4
 8012612:	f7ff fa87 	bl	8011b24 <read_submessage_list>
 8012616:	e7be      	b.n	8012596 <uxr_create_session+0x13a>

08012618 <uxr_prepare_stream_to_write_submessage>:
 8012618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801261c:	b082      	sub	sp, #8
 801261e:	4682      	mov	sl, r0
 8012620:	4610      	mov	r0, r2
 8012622:	4615      	mov	r5, r2
 8012624:	461e      	mov	r6, r3
 8012626:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 801262a:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 801262e:	9101      	str	r1, [sp, #4]
 8012630:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8012634:	f000 ff60 	bl	80134f8 <uxr_submessage_padding>
 8012638:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801263c:	f105 0904 	add.w	r9, r5, #4
 8012640:	2b01      	cmp	r3, #1
 8012642:	4481      	add	r9, r0
 8012644:	d01d      	beq.n	8012682 <uxr_prepare_stream_to_write_submessage+0x6a>
 8012646:	2b02      	cmp	r3, #2
 8012648:	d116      	bne.n	8012678 <uxr_prepare_stream_to_write_submessage+0x60>
 801264a:	4621      	mov	r1, r4
 801264c:	f10a 0008 	add.w	r0, sl, #8
 8012650:	f000 fede 	bl	8013410 <uxr_get_output_reliable_stream>
 8012654:	4604      	mov	r4, r0
 8012656:	b158      	cbz	r0, 8012670 <uxr_prepare_stream_to_write_submessage+0x58>
 8012658:	4649      	mov	r1, r9
 801265a:	4632      	mov	r2, r6
 801265c:	f005 ff48 	bl	80184f0 <uxr_prepare_reliable_buffer_to_write>
 8012660:	4604      	mov	r4, r0
 8012662:	b12c      	cbz	r4, 8012670 <uxr_prepare_stream_to_write_submessage+0x58>
 8012664:	4643      	mov	r3, r8
 8012666:	b2aa      	uxth	r2, r5
 8012668:	4639      	mov	r1, r7
 801266a:	4630      	mov	r0, r6
 801266c:	f000 ff04 	bl	8013478 <uxr_buffer_submessage_header>
 8012670:	4620      	mov	r0, r4
 8012672:	b002      	add	sp, #8
 8012674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012678:	2400      	movs	r4, #0
 801267a:	4620      	mov	r0, r4
 801267c:	b002      	add	sp, #8
 801267e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012682:	4621      	mov	r1, r4
 8012684:	f10a 0008 	add.w	r0, sl, #8
 8012688:	f000 feba 	bl	8013400 <uxr_get_output_best_effort_stream>
 801268c:	4604      	mov	r4, r0
 801268e:	2800      	cmp	r0, #0
 8012690:	d0ee      	beq.n	8012670 <uxr_prepare_stream_to_write_submessage+0x58>
 8012692:	4649      	mov	r1, r9
 8012694:	4632      	mov	r2, r6
 8012696:	f005 fe5b 	bl	8018350 <uxr_prepare_best_effort_buffer_to_write>
 801269a:	4604      	mov	r4, r0
 801269c:	e7e1      	b.n	8012662 <uxr_prepare_stream_to_write_submessage+0x4a>
 801269e:	bf00      	nop

080126a0 <uxr_init_session_info>:
 80126a0:	0e13      	lsrs	r3, r2, #24
 80126a2:	7043      	strb	r3, [r0, #1]
 80126a4:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80126a8:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80126ac:	7001      	strb	r1, [r0, #0]
 80126ae:	70c3      	strb	r3, [r0, #3]
 80126b0:	2109      	movs	r1, #9
 80126b2:	23ff      	movs	r3, #255	@ 0xff
 80126b4:	f880 c002 	strb.w	ip, [r0, #2]
 80126b8:	7102      	strb	r2, [r0, #4]
 80126ba:	80c1      	strh	r1, [r0, #6]
 80126bc:	7143      	strb	r3, [r0, #5]
 80126be:	4770      	bx	lr

080126c0 <uxr_buffer_create_session>:
 80126c0:	b530      	push	{r4, r5, lr}
 80126c2:	b089      	sub	sp, #36	@ 0x24
 80126c4:	2300      	movs	r3, #0
 80126c6:	4d12      	ldr	r5, [pc, #72]	@ (8012710 <uxr_buffer_create_session+0x50>)
 80126c8:	9307      	str	r3, [sp, #28]
 80126ca:	f8ad 201c 	strh.w	r2, [sp, #28]
 80126ce:	2201      	movs	r2, #1
 80126d0:	9301      	str	r3, [sp, #4]
 80126d2:	80c2      	strh	r2, [r0, #6]
 80126d4:	f88d 2004 	strb.w	r2, [sp, #4]
 80126d8:	682a      	ldr	r2, [r5, #0]
 80126da:	9200      	str	r2, [sp, #0]
 80126dc:	88aa      	ldrh	r2, [r5, #4]
 80126de:	f8ad 2006 	strh.w	r2, [sp, #6]
 80126e2:	f8d0 2001 	ldr.w	r2, [r0, #1]
 80126e6:	9202      	str	r2, [sp, #8]
 80126e8:	460c      	mov	r4, r1
 80126ea:	7802      	ldrb	r2, [r0, #0]
 80126ec:	9303      	str	r3, [sp, #12]
 80126ee:	4619      	mov	r1, r3
 80126f0:	f88d 200c 	strb.w	r2, [sp, #12]
 80126f4:	4620      	mov	r0, r4
 80126f6:	2210      	movs	r2, #16
 80126f8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80126fc:	9306      	str	r3, [sp, #24]
 80126fe:	f000 febb 	bl	8013478 <uxr_buffer_submessage_header>
 8012702:	4669      	mov	r1, sp
 8012704:	4620      	mov	r0, r4
 8012706:	f001 feff 	bl	8014508 <uxr_serialize_CREATE_CLIENT_Payload>
 801270a:	b009      	add	sp, #36	@ 0x24
 801270c:	bd30      	pop	{r4, r5, pc}
 801270e:	bf00      	nop
 8012710:	0801aa2c 	.word	0x0801aa2c

08012714 <uxr_buffer_delete_session>:
 8012714:	b510      	push	{r4, lr}
 8012716:	4b0c      	ldr	r3, [pc, #48]	@ (8012748 <uxr_buffer_delete_session+0x34>)
 8012718:	b082      	sub	sp, #8
 801271a:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 801271e:	f8ad c006 	strh.w	ip, [sp, #6]
 8012722:	460c      	mov	r4, r1
 8012724:	2202      	movs	r2, #2
 8012726:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801272a:	80c2      	strh	r2, [r0, #6]
 801272c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8012730:	2204      	movs	r2, #4
 8012732:	2300      	movs	r3, #0
 8012734:	2103      	movs	r1, #3
 8012736:	4620      	mov	r0, r4
 8012738:	f000 fe9e 	bl	8013478 <uxr_buffer_submessage_header>
 801273c:	a901      	add	r1, sp, #4
 801273e:	4620      	mov	r0, r4
 8012740:	f001 ff9c 	bl	801467c <uxr_serialize_DELETE_Payload>
 8012744:	b002      	add	sp, #8
 8012746:	bd10      	pop	{r4, pc}
 8012748:	0801aa2c 	.word	0x0801aa2c

0801274c <uxr_read_create_session_status>:
 801274c:	b510      	push	{r4, lr}
 801274e:	b088      	sub	sp, #32
 8012750:	4604      	mov	r4, r0
 8012752:	4608      	mov	r0, r1
 8012754:	a901      	add	r1, sp, #4
 8012756:	f001 ffa1 	bl	801469c <uxr_deserialize_STATUS_AGENT_Payload>
 801275a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801275e:	7163      	strb	r3, [r4, #5]
 8012760:	b008      	add	sp, #32
 8012762:	bd10      	pop	{r4, pc}

08012764 <uxr_read_delete_session_status>:
 8012764:	b510      	push	{r4, lr}
 8012766:	4604      	mov	r4, r0
 8012768:	b084      	sub	sp, #16
 801276a:	4608      	mov	r0, r1
 801276c:	a902      	add	r1, sp, #8
 801276e:	f001 ffc5 	bl	80146fc <uxr_deserialize_STATUS_Payload>
 8012772:	88e3      	ldrh	r3, [r4, #6]
 8012774:	2b02      	cmp	r3, #2
 8012776:	d001      	beq.n	801277c <uxr_read_delete_session_status+0x18>
 8012778:	b004      	add	sp, #16
 801277a:	bd10      	pop	{r4, pc}
 801277c:	f10d 000a 	add.w	r0, sp, #10
 8012780:	f7fe fd9e 	bl	80112c0 <uxr_object_id_from_raw>
 8012784:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8012788:	f89d 3009 	ldrb.w	r3, [sp, #9]
 801278c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8012790:	b29b      	uxth	r3, r3
 8012792:	2b02      	cmp	r3, #2
 8012794:	bf04      	itt	eq
 8012796:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 801279a:	7163      	strbeq	r3, [r4, #5]
 801279c:	b004      	add	sp, #16
 801279e:	bd10      	pop	{r4, pc}

080127a0 <uxr_stamp_create_session_header>:
 80127a0:	b510      	push	{r4, lr}
 80127a2:	2208      	movs	r2, #8
 80127a4:	b08a      	sub	sp, #40	@ 0x28
 80127a6:	4604      	mov	r4, r0
 80127a8:	eb0d 0002 	add.w	r0, sp, r2
 80127ac:	f7f9 fc0e 	bl	800bfcc <ucdr_init_buffer>
 80127b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127b4:	9400      	str	r4, [sp, #0]
 80127b6:	2300      	movs	r3, #0
 80127b8:	461a      	mov	r2, r3
 80127ba:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 80127be:	a802      	add	r0, sp, #8
 80127c0:	f001 f854 	bl	801386c <uxr_serialize_message_header>
 80127c4:	b00a      	add	sp, #40	@ 0x28
 80127c6:	bd10      	pop	{r4, pc}

080127c8 <uxr_stamp_session_header>:
 80127c8:	b530      	push	{r4, r5, lr}
 80127ca:	b08d      	sub	sp, #52	@ 0x34
 80127cc:	4604      	mov	r4, r0
 80127ce:	460d      	mov	r5, r1
 80127d0:	9203      	str	r2, [sp, #12]
 80127d2:	4619      	mov	r1, r3
 80127d4:	a804      	add	r0, sp, #16
 80127d6:	2208      	movs	r2, #8
 80127d8:	f7f9 fbf8 	bl	800bfcc <ucdr_init_buffer>
 80127dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127e0:	9b03      	ldr	r3, [sp, #12]
 80127e2:	9400      	str	r4, [sp, #0]
 80127e4:	462a      	mov	r2, r5
 80127e6:	a804      	add	r0, sp, #16
 80127e8:	f001 f840 	bl	801386c <uxr_serialize_message_header>
 80127ec:	b00d      	add	sp, #52	@ 0x34
 80127ee:	bd30      	pop	{r4, r5, pc}

080127f0 <uxr_read_session_header>:
 80127f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127f4:	4607      	mov	r7, r0
 80127f6:	b084      	sub	sp, #16
 80127f8:	4608      	mov	r0, r1
 80127fa:	460c      	mov	r4, r1
 80127fc:	4615      	mov	r5, r2
 80127fe:	461e      	mov	r6, r3
 8012800:	f7f9 fc14 	bl	800c02c <ucdr_buffer_remaining>
 8012804:	2808      	cmp	r0, #8
 8012806:	d803      	bhi.n	8012810 <uxr_read_session_header+0x20>
 8012808:	2000      	movs	r0, #0
 801280a:	b004      	add	sp, #16
 801280c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012810:	f10d 080c 	add.w	r8, sp, #12
 8012814:	4633      	mov	r3, r6
 8012816:	462a      	mov	r2, r5
 8012818:	f8cd 8000 	str.w	r8, [sp]
 801281c:	4620      	mov	r0, r4
 801281e:	f10d 010b 	add.w	r1, sp, #11
 8012822:	f001 f841 	bl	80138a8 <uxr_deserialize_message_header>
 8012826:	783a      	ldrb	r2, [r7, #0]
 8012828:	f89d 300b 	ldrb.w	r3, [sp, #11]
 801282c:	4293      	cmp	r3, r2
 801282e:	d1eb      	bne.n	8012808 <uxr_read_session_header+0x18>
 8012830:	061b      	lsls	r3, r3, #24
 8012832:	d41c      	bmi.n	801286e <uxr_read_session_header+0x7e>
 8012834:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8012838:	787b      	ldrb	r3, [r7, #1]
 801283a:	429a      	cmp	r2, r3
 801283c:	d003      	beq.n	8012846 <uxr_read_session_header+0x56>
 801283e:	2001      	movs	r0, #1
 8012840:	f080 0001 	eor.w	r0, r0, #1
 8012844:	e7e1      	b.n	801280a <uxr_read_session_header+0x1a>
 8012846:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801284a:	78bb      	ldrb	r3, [r7, #2]
 801284c:	429a      	cmp	r2, r3
 801284e:	f107 0102 	add.w	r1, r7, #2
 8012852:	d1f4      	bne.n	801283e <uxr_read_session_header+0x4e>
 8012854:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8012858:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801285c:	429a      	cmp	r2, r3
 801285e:	d1ee      	bne.n	801283e <uxr_read_session_header+0x4e>
 8012860:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8012864:	784b      	ldrb	r3, [r1, #1]
 8012866:	429a      	cmp	r2, r3
 8012868:	d1e9      	bne.n	801283e <uxr_read_session_header+0x4e>
 801286a:	2000      	movs	r0, #0
 801286c:	e7e8      	b.n	8012840 <uxr_read_session_header+0x50>
 801286e:	2001      	movs	r0, #1
 8012870:	e7cb      	b.n	801280a <uxr_read_session_header+0x1a>
 8012872:	bf00      	nop

08012874 <uxr_session_header_offset>:
 8012874:	f990 3000 	ldrsb.w	r3, [r0]
 8012878:	2b00      	cmp	r3, #0
 801287a:	bfac      	ite	ge
 801287c:	2008      	movge	r0, #8
 801287e:	2004      	movlt	r0, #4
 8012880:	4770      	bx	lr
 8012882:	bf00      	nop

08012884 <uxr_init_base_object_request>:
 8012884:	b510      	push	{r4, lr}
 8012886:	88c3      	ldrh	r3, [r0, #6]
 8012888:	b082      	sub	sp, #8
 801288a:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 801288e:	9101      	str	r1, [sp, #4]
 8012890:	f1a3 010a 	sub.w	r1, r3, #10
 8012894:	b289      	uxth	r1, r1
 8012896:	42a1      	cmp	r1, r4
 8012898:	d80e      	bhi.n	80128b8 <uxr_init_base_object_request+0x34>
 801289a:	3301      	adds	r3, #1
 801289c:	b29c      	uxth	r4, r3
 801289e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80128a2:	b2db      	uxtb	r3, r3
 80128a4:	80c4      	strh	r4, [r0, #6]
 80128a6:	9801      	ldr	r0, [sp, #4]
 80128a8:	7011      	strb	r1, [r2, #0]
 80128aa:	7053      	strb	r3, [r2, #1]
 80128ac:	1c91      	adds	r1, r2, #2
 80128ae:	f7fe fd1b 	bl	80112e8 <uxr_object_id_to_raw>
 80128b2:	4620      	mov	r0, r4
 80128b4:	b002      	add	sp, #8
 80128b6:	bd10      	pop	{r4, pc}
 80128b8:	230a      	movs	r3, #10
 80128ba:	2100      	movs	r1, #0
 80128bc:	461c      	mov	r4, r3
 80128be:	e7f1      	b.n	80128a4 <uxr_init_base_object_request+0x20>

080128c0 <uxr_parse_base_object_request>:
 80128c0:	b570      	push	{r4, r5, r6, lr}
 80128c2:	4604      	mov	r4, r0
 80128c4:	3002      	adds	r0, #2
 80128c6:	460d      	mov	r5, r1
 80128c8:	4616      	mov	r6, r2
 80128ca:	f7fe fcf9 	bl	80112c0 <uxr_object_id_from_raw>
 80128ce:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80128d2:	8028      	strh	r0, [r5, #0]
 80128d4:	806b      	strh	r3, [r5, #2]
 80128d6:	7822      	ldrb	r2, [r4, #0]
 80128d8:	7863      	ldrb	r3, [r4, #1]
 80128da:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80128de:	8033      	strh	r3, [r6, #0]
 80128e0:	bd70      	pop	{r4, r5, r6, pc}
 80128e2:	bf00      	nop

080128e4 <uxr_init_framing_io>:
 80128e4:	2300      	movs	r3, #0
 80128e6:	7041      	strb	r1, [r0, #1]
 80128e8:	7003      	strb	r3, [r0, #0]
 80128ea:	8583      	strh	r3, [r0, #44]	@ 0x2c
 80128ec:	4770      	bx	lr
 80128ee:	bf00      	nop

080128f0 <uxr_write_framed_msg>:
 80128f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128f4:	4617      	mov	r7, r2
 80128f6:	7842      	ldrb	r2, [r0, #1]
 80128f8:	b083      	sub	sp, #12
 80128fa:	460e      	mov	r6, r1
 80128fc:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8012900:	469a      	mov	sl, r3
 8012902:	2901      	cmp	r1, #1
 8012904:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8012908:	4604      	mov	r4, r0
 801290a:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801290e:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8012912:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8012916:	f240 8137 	bls.w	8012b88 <uxr_write_framed_msg+0x298>
 801291a:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801291e:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8012922:	2901      	cmp	r1, #1
 8012924:	f04f 0202 	mov.w	r2, #2
 8012928:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801292c:	f240 808f 	bls.w	8012a4e <uxr_write_framed_msg+0x15e>
 8012930:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012932:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8012936:	b2dd      	uxtb	r5, r3
 8012938:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801293c:	2203      	movs	r2, #3
 801293e:	2901      	cmp	r1, #1
 8012940:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012944:	f240 809a 	bls.w	8012a7c <uxr_write_framed_msg+0x18c>
 8012948:	18a1      	adds	r1, r4, r2
 801294a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801294c:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8012950:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8012954:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8012958:	3201      	adds	r2, #1
 801295a:	2801      	cmp	r0, #1
 801295c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012960:	f240 80a0 	bls.w	8012aa4 <uxr_write_framed_msg+0x1b4>
 8012964:	18a0      	adds	r0, r4, r2
 8012966:	3201      	adds	r2, #1
 8012968:	b2d2      	uxtb	r2, r2
 801296a:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801296e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012972:	2b00      	cmp	r3, #0
 8012974:	f000 80a9 	beq.w	8012aca <uxr_write_framed_msg+0x1da>
 8012978:	f04f 0900 	mov.w	r9, #0
 801297c:	46c8      	mov	r8, r9
 801297e:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8012982:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8012986:	2901      	cmp	r1, #1
 8012988:	f240 80c3 	bls.w	8012b12 <uxr_write_framed_msg+0x222>
 801298c:	2a29      	cmp	r2, #41	@ 0x29
 801298e:	f200 809f 	bhi.w	8012ad0 <uxr_write_framed_msg+0x1e0>
 8012992:	18a1      	adds	r1, r4, r2
 8012994:	3201      	adds	r2, #1
 8012996:	b2d2      	uxtb	r2, r2
 8012998:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 801299c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80129a0:	ea89 0303 	eor.w	r3, r9, r3
 80129a4:	498c      	ldr	r1, [pc, #560]	@ (8012bd8 <uxr_write_framed_msg+0x2e8>)
 80129a6:	b2db      	uxtb	r3, r3
 80129a8:	f108 0801 	add.w	r8, r8, #1
 80129ac:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80129b0:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 80129b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80129b6:	4543      	cmp	r3, r8
 80129b8:	d8e1      	bhi.n	801297e <uxr_write_framed_msg+0x8e>
 80129ba:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80129be:	fa5f f889 	uxtb.w	r8, r9
 80129c2:	9301      	str	r3, [sp, #4]
 80129c4:	f04f 0900 	mov.w	r9, #0
 80129c8:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 80129cc:	fa5f f18a 	uxtb.w	r1, sl
 80129d0:	2901      	cmp	r1, #1
 80129d2:	d921      	bls.n	8012a18 <uxr_write_framed_msg+0x128>
 80129d4:	2a29      	cmp	r2, #41	@ 0x29
 80129d6:	f240 80af 	bls.w	8012b38 <uxr_write_framed_msg+0x248>
 80129da:	2500      	movs	r5, #0
 80129dc:	e000      	b.n	80129e0 <uxr_write_framed_msg+0xf0>
 80129de:	b160      	cbz	r0, 80129fa <uxr_write_framed_msg+0x10a>
 80129e0:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80129e4:	1b52      	subs	r2, r2, r5
 80129e6:	465b      	mov	r3, fp
 80129e8:	4421      	add	r1, r4
 80129ea:	4638      	mov	r0, r7
 80129ec:	47b0      	blx	r6
 80129ee:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80129f2:	4405      	add	r5, r0
 80129f4:	4295      	cmp	r5, r2
 80129f6:	d3f2      	bcc.n	80129de <uxr_write_framed_msg+0xee>
 80129f8:	d003      	beq.n	8012a02 <uxr_write_framed_msg+0x112>
 80129fa:	2000      	movs	r0, #0
 80129fc:	b003      	add	sp, #12
 80129fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a02:	fa5f f18a 	uxtb.w	r1, sl
 8012a06:	f04f 0300 	mov.w	r3, #0
 8012a0a:	2901      	cmp	r1, #1
 8012a0c:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8012a10:	f04f 0200 	mov.w	r2, #0
 8012a14:	f200 8090 	bhi.w	8012b38 <uxr_write_framed_msg+0x248>
 8012a18:	1c51      	adds	r1, r2, #1
 8012a1a:	b2c9      	uxtb	r1, r1
 8012a1c:	2929      	cmp	r1, #41	@ 0x29
 8012a1e:	d8dc      	bhi.n	80129da <uxr_write_framed_msg+0xea>
 8012a20:	18a5      	adds	r5, r4, r2
 8012a22:	4421      	add	r1, r4
 8012a24:	3202      	adds	r2, #2
 8012a26:	f088 0820 	eor.w	r8, r8, #32
 8012a2a:	4648      	mov	r0, r9
 8012a2c:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8012a30:	b2d2      	uxtb	r2, r2
 8012a32:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8012a36:	f04f 0901 	mov.w	r9, #1
 8012a3a:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8012a3e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012a42:	2800      	cmp	r0, #0
 8012a44:	f040 8085 	bne.w	8012b52 <uxr_write_framed_msg+0x262>
 8012a48:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012a4c:	e7bc      	b.n	80129c8 <uxr_write_framed_msg+0xd8>
 8012a4e:	4611      	mov	r1, r2
 8012a50:	f04f 0c03 	mov.w	ip, #3
 8012a54:	2204      	movs	r2, #4
 8012a56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012a58:	4421      	add	r1, r4
 8012a5a:	b2dd      	uxtb	r5, r3
 8012a5c:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8012a60:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8012a64:	44a4      	add	ip, r4
 8012a66:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8012a6a:	f080 0020 	eor.w	r0, r0, #32
 8012a6e:	2901      	cmp	r1, #1
 8012a70:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8012a74:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012a78:	f63f af66 	bhi.w	8012948 <uxr_write_framed_msg+0x58>
 8012a7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012a7e:	18a0      	adds	r0, r4, r2
 8012a80:	f085 0520 	eor.w	r5, r5, #32
 8012a84:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8012a88:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8012a8c:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8012a90:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8012a94:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8012a98:	3202      	adds	r2, #2
 8012a9a:	2801      	cmp	r0, #1
 8012a9c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012aa0:	f63f af60 	bhi.w	8012964 <uxr_write_framed_msg+0x74>
 8012aa4:	1c50      	adds	r0, r2, #1
 8012aa6:	18a5      	adds	r5, r4, r2
 8012aa8:	fa54 f080 	uxtab	r0, r4, r0
 8012aac:	3202      	adds	r2, #2
 8012aae:	f081 0120 	eor.w	r1, r1, #32
 8012ab2:	b2d2      	uxtb	r2, r2
 8012ab4:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8012ab8:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8012abc:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8012ac0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	f47f af57 	bne.w	8012978 <uxr_write_framed_msg+0x88>
 8012aca:	9301      	str	r3, [sp, #4]
 8012acc:	4698      	mov	r8, r3
 8012ace:	e779      	b.n	80129c4 <uxr_write_framed_msg+0xd4>
 8012ad0:	2500      	movs	r5, #0
 8012ad2:	e001      	b.n	8012ad8 <uxr_write_framed_msg+0x1e8>
 8012ad4:	2800      	cmp	r0, #0
 8012ad6:	d090      	beq.n	80129fa <uxr_write_framed_msg+0x10a>
 8012ad8:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8012adc:	1b52      	subs	r2, r2, r5
 8012ade:	465b      	mov	r3, fp
 8012ae0:	4421      	add	r1, r4
 8012ae2:	4638      	mov	r0, r7
 8012ae4:	47b0      	blx	r6
 8012ae6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8012aea:	4405      	add	r5, r0
 8012aec:	4295      	cmp	r5, r2
 8012aee:	d3f1      	bcc.n	8012ad4 <uxr_write_framed_msg+0x1e4>
 8012af0:	d183      	bne.n	80129fa <uxr_write_framed_msg+0x10a>
 8012af2:	f04f 0300 	mov.w	r3, #0
 8012af6:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8012afa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012afc:	4543      	cmp	r3, r8
 8012afe:	d964      	bls.n	8012bca <uxr_write_framed_msg+0x2da>
 8012b00:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8012b04:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8012b08:	2901      	cmp	r1, #1
 8012b0a:	f04f 0200 	mov.w	r2, #0
 8012b0e:	f63f af3d 	bhi.w	801298c <uxr_write_framed_msg+0x9c>
 8012b12:	1c51      	adds	r1, r2, #1
 8012b14:	b2c9      	uxtb	r1, r1
 8012b16:	2929      	cmp	r1, #41	@ 0x29
 8012b18:	d8da      	bhi.n	8012ad0 <uxr_write_framed_msg+0x1e0>
 8012b1a:	18a0      	adds	r0, r4, r2
 8012b1c:	4421      	add	r1, r4
 8012b1e:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8012b22:	3202      	adds	r2, #2
 8012b24:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8012b28:	b2d2      	uxtb	r2, r2
 8012b2a:	f083 0020 	eor.w	r0, r3, #32
 8012b2e:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8012b32:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012b36:	e733      	b.n	80129a0 <uxr_write_framed_msg+0xb0>
 8012b38:	18a1      	adds	r1, r4, r2
 8012b3a:	3201      	adds	r2, #1
 8012b3c:	4648      	mov	r0, r9
 8012b3e:	b2d2      	uxtb	r2, r2
 8012b40:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8012b44:	f04f 0901 	mov.w	r9, #1
 8012b48:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012b4c:	2800      	cmp	r0, #0
 8012b4e:	f43f af7b 	beq.w	8012a48 <uxr_write_framed_msg+0x158>
 8012b52:	2500      	movs	r5, #0
 8012b54:	e002      	b.n	8012b5c <uxr_write_framed_msg+0x26c>
 8012b56:	2800      	cmp	r0, #0
 8012b58:	f43f af4f 	beq.w	80129fa <uxr_write_framed_msg+0x10a>
 8012b5c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8012b60:	1b52      	subs	r2, r2, r5
 8012b62:	465b      	mov	r3, fp
 8012b64:	4421      	add	r1, r4
 8012b66:	4638      	mov	r0, r7
 8012b68:	47b0      	blx	r6
 8012b6a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8012b6e:	4405      	add	r5, r0
 8012b70:	4295      	cmp	r5, r2
 8012b72:	d3f0      	bcc.n	8012b56 <uxr_write_framed_msg+0x266>
 8012b74:	f47f af41 	bne.w	80129fa <uxr_write_framed_msg+0x10a>
 8012b78:	2300      	movs	r3, #0
 8012b7a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8012b7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012b80:	b298      	uxth	r0, r3
 8012b82:	b003      	add	sp, #12
 8012b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b88:	217d      	movs	r1, #125	@ 0x7d
 8012b8a:	f082 0220 	eor.w	r2, r2, #32
 8012b8e:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8012b92:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8012b96:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8012b9a:	2901      	cmp	r1, #1
 8012b9c:	f04f 0203 	mov.w	r2, #3
 8012ba0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012ba4:	d804      	bhi.n	8012bb0 <uxr_write_framed_msg+0x2c0>
 8012ba6:	4611      	mov	r1, r2
 8012ba8:	f04f 0c04 	mov.w	ip, #4
 8012bac:	2205      	movs	r2, #5
 8012bae:	e752      	b.n	8012a56 <uxr_write_framed_msg+0x166>
 8012bb0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012bb2:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8012bb6:	b2dd      	uxtb	r5, r3
 8012bb8:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8012bbc:	2204      	movs	r2, #4
 8012bbe:	2901      	cmp	r1, #1
 8012bc0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012bc4:	f63f aec0 	bhi.w	8012948 <uxr_write_framed_msg+0x58>
 8012bc8:	e758      	b.n	8012a7c <uxr_write_framed_msg+0x18c>
 8012bca:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8012bce:	fa5f f889 	uxtb.w	r8, r9
 8012bd2:	9301      	str	r3, [sp, #4]
 8012bd4:	2200      	movs	r2, #0
 8012bd6:	e6f5      	b.n	80129c4 <uxr_write_framed_msg+0xd4>
 8012bd8:	0801b6fc 	.word	0x0801b6fc

08012bdc <uxr_framing_read_transport>:
 8012bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012be0:	4604      	mov	r4, r0
 8012be2:	b083      	sub	sp, #12
 8012be4:	461f      	mov	r7, r3
 8012be6:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8012bea:	4689      	mov	r9, r1
 8012bec:	4692      	mov	sl, r2
 8012bee:	f000 fc89 	bl	8013504 <uxr_millis>
 8012bf2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012bf6:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8012bfa:	42b3      	cmp	r3, r6
 8012bfc:	4680      	mov	r8, r0
 8012bfe:	d061      	beq.n	8012cc4 <uxr_framing_read_transport+0xe8>
 8012c00:	d81c      	bhi.n	8012c3c <uxr_framing_read_transport+0x60>
 8012c02:	1e75      	subs	r5, r6, #1
 8012c04:	1aed      	subs	r5, r5, r3
 8012c06:	b2ed      	uxtb	r5, r5
 8012c08:	2600      	movs	r6, #0
 8012c0a:	455d      	cmp	r5, fp
 8012c0c:	d81f      	bhi.n	8012c4e <uxr_framing_read_transport+0x72>
 8012c0e:	19ab      	adds	r3, r5, r6
 8012c10:	455b      	cmp	r3, fp
 8012c12:	bf84      	itt	hi
 8012c14:	ebab 0605 	subhi.w	r6, fp, r5
 8012c18:	b2f6      	uxtbhi	r6, r6
 8012c1a:	b9ed      	cbnz	r5, 8012c58 <uxr_framing_read_transport+0x7c>
 8012c1c:	f04f 0b00 	mov.w	fp, #0
 8012c20:	f000 fc70 	bl	8013504 <uxr_millis>
 8012c24:	683b      	ldr	r3, [r7, #0]
 8012c26:	eba0 0808 	sub.w	r8, r0, r8
 8012c2a:	eba3 0308 	sub.w	r3, r3, r8
 8012c2e:	4658      	mov	r0, fp
 8012c30:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012c34:	603b      	str	r3, [r7, #0]
 8012c36:	b003      	add	sp, #12
 8012c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c3c:	2e00      	cmp	r6, #0
 8012c3e:	d049      	beq.n	8012cd4 <uxr_framing_read_transport+0xf8>
 8012c40:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8012c44:	b2ed      	uxtb	r5, r5
 8012c46:	3e01      	subs	r6, #1
 8012c48:	455d      	cmp	r5, fp
 8012c4a:	b2f6      	uxtb	r6, r6
 8012c4c:	d9df      	bls.n	8012c0e <uxr_framing_read_transport+0x32>
 8012c4e:	fa5f f58b 	uxtb.w	r5, fp
 8012c52:	2600      	movs	r6, #0
 8012c54:	2d00      	cmp	r5, #0
 8012c56:	d0e1      	beq.n	8012c1c <uxr_framing_read_transport+0x40>
 8012c58:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012c5c:	3102      	adds	r1, #2
 8012c5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012c60:	9300      	str	r3, [sp, #0]
 8012c62:	683b      	ldr	r3, [r7, #0]
 8012c64:	4421      	add	r1, r4
 8012c66:	462a      	mov	r2, r5
 8012c68:	4650      	mov	r0, sl
 8012c6a:	47c8      	blx	r9
 8012c6c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012c70:	4a1a      	ldr	r2, [pc, #104]	@ (8012cdc <uxr_framing_read_transport+0x100>)
 8012c72:	4403      	add	r3, r0
 8012c74:	0859      	lsrs	r1, r3, #1
 8012c76:	fba2 2101 	umull	r2, r1, r2, r1
 8012c7a:	0889      	lsrs	r1, r1, #2
 8012c7c:	222a      	movs	r2, #42	@ 0x2a
 8012c7e:	fb02 3111 	mls	r1, r2, r1, r3
 8012c82:	4683      	mov	fp, r0
 8012c84:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8012c88:	2800      	cmp	r0, #0
 8012c8a:	d0c7      	beq.n	8012c1c <uxr_framing_read_transport+0x40>
 8012c8c:	42a8      	cmp	r0, r5
 8012c8e:	d1c7      	bne.n	8012c20 <uxr_framing_read_transport+0x44>
 8012c90:	2e00      	cmp	r6, #0
 8012c92:	d0c5      	beq.n	8012c20 <uxr_framing_read_transport+0x44>
 8012c94:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012c96:	9300      	str	r3, [sp, #0]
 8012c98:	3102      	adds	r1, #2
 8012c9a:	4632      	mov	r2, r6
 8012c9c:	4421      	add	r1, r4
 8012c9e:	2300      	movs	r3, #0
 8012ca0:	4650      	mov	r0, sl
 8012ca2:	47c8      	blx	r9
 8012ca4:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012ca8:	4a0c      	ldr	r2, [pc, #48]	@ (8012cdc <uxr_framing_read_transport+0x100>)
 8012caa:	180b      	adds	r3, r1, r0
 8012cac:	0859      	lsrs	r1, r3, #1
 8012cae:	fba2 1201 	umull	r1, r2, r2, r1
 8012cb2:	0892      	lsrs	r2, r2, #2
 8012cb4:	212a      	movs	r1, #42	@ 0x2a
 8012cb6:	fb01 3312 	mls	r3, r1, r2, r3
 8012cba:	eb00 0b05 	add.w	fp, r0, r5
 8012cbe:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8012cc2:	e7ad      	b.n	8012c20 <uxr_framing_read_transport+0x44>
 8012cc4:	2600      	movs	r6, #0
 8012cc6:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8012cca:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8012ccc:	d9bf      	bls.n	8012c4e <uxr_framing_read_transport+0x72>
 8012cce:	2102      	movs	r1, #2
 8012cd0:	2529      	movs	r5, #41	@ 0x29
 8012cd2:	e7c4      	b.n	8012c5e <uxr_framing_read_transport+0x82>
 8012cd4:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8012cd8:	b2ed      	uxtb	r5, r5
 8012cda:	e796      	b.n	8012c0a <uxr_framing_read_transport+0x2e>
 8012cdc:	30c30c31 	.word	0x30c30c31

08012ce0 <uxr_read_framed_msg>:
 8012ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ce4:	461e      	mov	r6, r3
 8012ce6:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8012cea:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8012cee:	429d      	cmp	r5, r3
 8012cf0:	b083      	sub	sp, #12
 8012cf2:	4604      	mov	r4, r0
 8012cf4:	4688      	mov	r8, r1
 8012cf6:	4691      	mov	r9, r2
 8012cf8:	f000 8188 	beq.w	801300c <uxr_read_framed_msg+0x32c>
 8012cfc:	7823      	ldrb	r3, [r4, #0]
 8012cfe:	4dc1      	ldr	r5, [pc, #772]	@ (8013004 <uxr_read_framed_msg+0x324>)
 8012d00:	4fc1      	ldr	r7, [pc, #772]	@ (8013008 <uxr_read_framed_msg+0x328>)
 8012d02:	2b07      	cmp	r3, #7
 8012d04:	d8fd      	bhi.n	8012d02 <uxr_read_framed_msg+0x22>
 8012d06:	e8df f013 	tbh	[pc, r3, lsl #1]
 8012d0a:	0115      	.short	0x0115
 8012d0c:	00d600f6 	.word	0x00d600f6
 8012d10:	009000b9 	.word	0x009000b9
 8012d14:	0030004d 	.word	0x0030004d
 8012d18:	0008      	.short	0x0008
 8012d1a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012d1e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012d22:	4299      	cmp	r1, r3
 8012d24:	f000 814a 	beq.w	8012fbc <uxr_read_framed_msg+0x2dc>
 8012d28:	18e2      	adds	r2, r4, r3
 8012d2a:	7892      	ldrb	r2, [r2, #2]
 8012d2c:	2a7d      	cmp	r2, #125	@ 0x7d
 8012d2e:	f000 8199 	beq.w	8013064 <uxr_read_framed_msg+0x384>
 8012d32:	3301      	adds	r3, #1
 8012d34:	0858      	lsrs	r0, r3, #1
 8012d36:	fba5 1000 	umull	r1, r0, r5, r0
 8012d3a:	0880      	lsrs	r0, r0, #2
 8012d3c:	212a      	movs	r1, #42	@ 0x2a
 8012d3e:	fb01 3310 	mls	r3, r1, r0, r3
 8012d42:	2a7e      	cmp	r2, #126	@ 0x7e
 8012d44:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012d48:	f000 8252 	beq.w	80131f0 <uxr_read_framed_msg+0x510>
 8012d4c:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8012d4e:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8012d50:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8012d54:	b29b      	uxth	r3, r3
 8012d56:	2200      	movs	r2, #0
 8012d58:	4299      	cmp	r1, r3
 8012d5a:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8012d5c:	7022      	strb	r2, [r4, #0]
 8012d5e:	f000 8179 	beq.w	8013054 <uxr_read_framed_msg+0x374>
 8012d62:	2000      	movs	r0, #0
 8012d64:	b003      	add	sp, #12
 8012d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d6a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012d6e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012d72:	4299      	cmp	r1, r3
 8012d74:	f000 8131 	beq.w	8012fda <uxr_read_framed_msg+0x2fa>
 8012d78:	18e2      	adds	r2, r4, r3
 8012d7a:	7890      	ldrb	r0, [r2, #2]
 8012d7c:	287d      	cmp	r0, #125	@ 0x7d
 8012d7e:	f000 8190 	beq.w	80130a2 <uxr_read_framed_msg+0x3c2>
 8012d82:	3301      	adds	r3, #1
 8012d84:	085a      	lsrs	r2, r3, #1
 8012d86:	fba5 1202 	umull	r1, r2, r5, r2
 8012d8a:	0892      	lsrs	r2, r2, #2
 8012d8c:	212a      	movs	r1, #42	@ 0x2a
 8012d8e:	fb01 3312 	mls	r3, r1, r2, r3
 8012d92:	287e      	cmp	r0, #126	@ 0x7e
 8012d94:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012d98:	f000 821a 	beq.w	80131d0 <uxr_read_framed_msg+0x4f0>
 8012d9c:	2307      	movs	r3, #7
 8012d9e:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8012da0:	7023      	strb	r3, [r4, #0]
 8012da2:	e7ae      	b.n	8012d02 <uxr_read_framed_msg+0x22>
 8012da4:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8012da6:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8012daa:	459e      	cmp	lr, r3
 8012dac:	d938      	bls.n	8012e20 <uxr_read_framed_msg+0x140>
 8012dae:	ee07 8a90 	vmov	s15, r8
 8012db2:	212a      	movs	r1, #42	@ 0x2a
 8012db4:	e020      	b.n	8012df8 <uxr_read_framed_msg+0x118>
 8012db6:	f89b c002 	ldrb.w	ip, [fp, #2]
 8012dba:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8012dbe:	f000 80d4 	beq.w	8012f6a <uxr_read_framed_msg+0x28a>
 8012dc2:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8012dc6:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012dca:	f000 8219 	beq.w	8013200 <uxr_read_framed_msg+0x520>
 8012dce:	f806 c003 	strb.w	ip, [r6, r3]
 8012dd2:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8012dd6:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8012dd8:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8012ddc:	ea8a 000c 	eor.w	r0, sl, ip
 8012de0:	b2c0      	uxtb	r0, r0
 8012de2:	3301      	adds	r3, #1
 8012de4:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8012de8:	b29b      	uxth	r3, r3
 8012dea:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8012dee:	4573      	cmp	r3, lr
 8012df0:	8663      	strh	r3, [r4, #50]	@ 0x32
 8012df2:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8012df4:	f080 8120 	bcs.w	8013038 <uxr_read_framed_msg+0x358>
 8012df8:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8012dfc:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8012e00:	f100 0c01 	add.w	ip, r0, #1
 8012e04:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012e08:	fba5 8202 	umull	r8, r2, r5, r2
 8012e0c:	0892      	lsrs	r2, r2, #2
 8012e0e:	4582      	cmp	sl, r0
 8012e10:	eb04 0b00 	add.w	fp, r4, r0
 8012e14:	fb01 c212 	mls	r2, r1, r2, ip
 8012e18:	d1cd      	bne.n	8012db6 <uxr_read_framed_msg+0xd6>
 8012e1a:	ee17 8a90 	vmov	r8, s15
 8012e1e:	459e      	cmp	lr, r3
 8012e20:	f040 8111 	bne.w	8013046 <uxr_read_framed_msg+0x366>
 8012e24:	2306      	movs	r3, #6
 8012e26:	7023      	strb	r3, [r4, #0]
 8012e28:	e76b      	b.n	8012d02 <uxr_read_framed_msg+0x22>
 8012e2a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8012e2e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012e32:	4298      	cmp	r0, r3
 8012e34:	f000 80c2 	beq.w	8012fbc <uxr_read_framed_msg+0x2dc>
 8012e38:	18e2      	adds	r2, r4, r3
 8012e3a:	7891      	ldrb	r1, [r2, #2]
 8012e3c:	297d      	cmp	r1, #125	@ 0x7d
 8012e3e:	f000 814c 	beq.w	80130da <uxr_read_framed_msg+0x3fa>
 8012e42:	3301      	adds	r3, #1
 8012e44:	085a      	lsrs	r2, r3, #1
 8012e46:	fba5 0202 	umull	r0, r2, r5, r2
 8012e4a:	0892      	lsrs	r2, r2, #2
 8012e4c:	202a      	movs	r0, #42	@ 0x2a
 8012e4e:	fb00 3312 	mls	r3, r0, r2, r3
 8012e52:	297e      	cmp	r1, #126	@ 0x7e
 8012e54:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012e58:	f000 81ca 	beq.w	80131f0 <uxr_read_framed_msg+0x510>
 8012e5c:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8012e5e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8012e62:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012e64:	b29b      	uxth	r3, r3
 8012e66:	2000      	movs	r0, #0
 8012e68:	428b      	cmp	r3, r1
 8012e6a:	8623      	strh	r3, [r4, #48]	@ 0x30
 8012e6c:	8660      	strh	r0, [r4, #50]	@ 0x32
 8012e6e:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8012e70:	f240 80df 	bls.w	8013032 <uxr_read_framed_msg+0x352>
 8012e74:	7020      	strb	r0, [r4, #0]
 8012e76:	b003      	add	sp, #12
 8012e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e7c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012e80:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012e84:	4299      	cmp	r1, r3
 8012e86:	f000 80a8 	beq.w	8012fda <uxr_read_framed_msg+0x2fa>
 8012e8a:	18e2      	adds	r2, r4, r3
 8012e8c:	7890      	ldrb	r0, [r2, #2]
 8012e8e:	287d      	cmp	r0, #125	@ 0x7d
 8012e90:	f000 8164 	beq.w	801315c <uxr_read_framed_msg+0x47c>
 8012e94:	3301      	adds	r3, #1
 8012e96:	085a      	lsrs	r2, r3, #1
 8012e98:	fba5 1202 	umull	r1, r2, r5, r2
 8012e9c:	0892      	lsrs	r2, r2, #2
 8012e9e:	212a      	movs	r1, #42	@ 0x2a
 8012ea0:	fb01 3312 	mls	r3, r1, r2, r3
 8012ea4:	287e      	cmp	r0, #126	@ 0x7e
 8012ea6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012eaa:	f000 8191 	beq.w	80131d0 <uxr_read_framed_msg+0x4f0>
 8012eae:	2304      	movs	r3, #4
 8012eb0:	8620      	strh	r0, [r4, #48]	@ 0x30
 8012eb2:	7023      	strb	r3, [r4, #0]
 8012eb4:	e725      	b.n	8012d02 <uxr_read_framed_msg+0x22>
 8012eb6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8012eba:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8012ebe:	4290      	cmp	r0, r2
 8012ec0:	f000 80b3 	beq.w	801302a <uxr_read_framed_msg+0x34a>
 8012ec4:	18a3      	adds	r3, r4, r2
 8012ec6:	7899      	ldrb	r1, [r3, #2]
 8012ec8:	297d      	cmp	r1, #125	@ 0x7d
 8012eca:	f000 8164 	beq.w	8013196 <uxr_read_framed_msg+0x4b6>
 8012ece:	3201      	adds	r2, #1
 8012ed0:	0850      	lsrs	r0, r2, #1
 8012ed2:	fba5 3000 	umull	r3, r0, r5, r0
 8012ed6:	0880      	lsrs	r0, r0, #2
 8012ed8:	232a      	movs	r3, #42	@ 0x2a
 8012eda:	fb03 2210 	mls	r2, r3, r0, r2
 8012ede:	297e      	cmp	r1, #126	@ 0x7e
 8012ee0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012ee4:	f000 8188 	beq.w	80131f8 <uxr_read_framed_msg+0x518>
 8012ee8:	7863      	ldrb	r3, [r4, #1]
 8012eea:	428b      	cmp	r3, r1
 8012eec:	bf0c      	ite	eq
 8012eee:	2303      	moveq	r3, #3
 8012ef0:	2300      	movne	r3, #0
 8012ef2:	7023      	strb	r3, [r4, #0]
 8012ef4:	e705      	b.n	8012d02 <uxr_read_framed_msg+0x22>
 8012ef6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012efa:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012efe:	2200      	movs	r2, #0
 8012f00:	4299      	cmp	r1, r3
 8012f02:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8012f06:	d06c      	beq.n	8012fe2 <uxr_read_framed_msg+0x302>
 8012f08:	18e2      	adds	r2, r4, r3
 8012f0a:	7890      	ldrb	r0, [r2, #2]
 8012f0c:	287d      	cmp	r0, #125	@ 0x7d
 8012f0e:	f000 8101 	beq.w	8013114 <uxr_read_framed_msg+0x434>
 8012f12:	3301      	adds	r3, #1
 8012f14:	085a      	lsrs	r2, r3, #1
 8012f16:	fba5 1202 	umull	r1, r2, r5, r2
 8012f1a:	0892      	lsrs	r2, r2, #2
 8012f1c:	212a      	movs	r1, #42	@ 0x2a
 8012f1e:	fb01 3312 	mls	r3, r1, r2, r3
 8012f22:	287e      	cmp	r0, #126	@ 0x7e
 8012f24:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8012f28:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012f2c:	d059      	beq.n	8012fe2 <uxr_read_framed_msg+0x302>
 8012f2e:	2302      	movs	r3, #2
 8012f30:	7023      	strb	r3, [r4, #0]
 8012f32:	e6e6      	b.n	8012d02 <uxr_read_framed_msg+0x22>
 8012f34:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8012f38:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8012f3c:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8012f40:	1c51      	adds	r1, r2, #1
 8012f42:	084b      	lsrs	r3, r1, #1
 8012f44:	fba5 c303 	umull	ip, r3, r5, r3
 8012f48:	089b      	lsrs	r3, r3, #2
 8012f4a:	fb0e 1313 	mls	r3, lr, r3, r1
 8012f4e:	4592      	cmp	sl, r2
 8012f50:	eb04 0002 	add.w	r0, r4, r2
 8012f54:	b2da      	uxtb	r2, r3
 8012f56:	f43f af04 	beq.w	8012d62 <uxr_read_framed_msg+0x82>
 8012f5a:	7883      	ldrb	r3, [r0, #2]
 8012f5c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012f60:	2b7e      	cmp	r3, #126	@ 0x7e
 8012f62:	d1ed      	bne.n	8012f40 <uxr_read_framed_msg+0x260>
 8012f64:	2301      	movs	r3, #1
 8012f66:	7023      	strb	r3, [r4, #0]
 8012f68:	e6cb      	b.n	8012d02 <uxr_read_framed_msg+0x22>
 8012f6a:	f100 0c01 	add.w	ip, r0, #1
 8012f6e:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012f72:	fba5 8202 	umull	r8, r2, r5, r2
 8012f76:	0892      	lsrs	r2, r2, #2
 8012f78:	fb01 c212 	mls	r2, r1, r2, ip
 8012f7c:	eb04 0c02 	add.w	ip, r4, r2
 8012f80:	b2d2      	uxtb	r2, r2
 8012f82:	4592      	cmp	sl, r2
 8012f84:	f100 0002 	add.w	r0, r0, #2
 8012f88:	f43f af47 	beq.w	8012e1a <uxr_read_framed_msg+0x13a>
 8012f8c:	0842      	lsrs	r2, r0, #1
 8012f8e:	f89c a002 	ldrb.w	sl, [ip, #2]
 8012f92:	fba5 8202 	umull	r8, r2, r5, r2
 8012f96:	0892      	lsrs	r2, r2, #2
 8012f98:	fb01 0012 	mls	r0, r1, r2, r0
 8012f9c:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8012fa0:	f08a 0c20 	eor.w	ip, sl, #32
 8012fa4:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8012fa8:	f47f af11 	bne.w	8012dce <uxr_read_framed_msg+0xee>
 8012fac:	459e      	cmp	lr, r3
 8012fae:	ee17 8a90 	vmov	r8, s15
 8012fb2:	f43f af37 	beq.w	8012e24 <uxr_read_framed_msg+0x144>
 8012fb6:	2301      	movs	r3, #1
 8012fb8:	7023      	strb	r3, [r4, #0]
 8012fba:	e6a2      	b.n	8012d02 <uxr_read_framed_msg+0x22>
 8012fbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012fbe:	9300      	str	r3, [sp, #0]
 8012fc0:	2301      	movs	r3, #1
 8012fc2:	9301      	str	r3, [sp, #4]
 8012fc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012fc6:	464a      	mov	r2, r9
 8012fc8:	4641      	mov	r1, r8
 8012fca:	4620      	mov	r0, r4
 8012fcc:	f7ff fe06 	bl	8012bdc <uxr_framing_read_transport>
 8012fd0:	2800      	cmp	r0, #0
 8012fd2:	f43f aec6 	beq.w	8012d62 <uxr_read_framed_msg+0x82>
 8012fd6:	7823      	ldrb	r3, [r4, #0]
 8012fd8:	e693      	b.n	8012d02 <uxr_read_framed_msg+0x22>
 8012fda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012fdc:	9300      	str	r3, [sp, #0]
 8012fde:	2302      	movs	r3, #2
 8012fe0:	e7ef      	b.n	8012fc2 <uxr_read_framed_msg+0x2e2>
 8012fe2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012fe4:	9300      	str	r3, [sp, #0]
 8012fe6:	2304      	movs	r3, #4
 8012fe8:	9301      	str	r3, [sp, #4]
 8012fea:	464a      	mov	r2, r9
 8012fec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012fee:	4641      	mov	r1, r8
 8012ff0:	4620      	mov	r0, r4
 8012ff2:	f7ff fdf3 	bl	8012bdc <uxr_framing_read_transport>
 8012ff6:	2800      	cmp	r0, #0
 8012ff8:	d1ed      	bne.n	8012fd6 <uxr_read_framed_msg+0x2f6>
 8012ffa:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8012ffe:	2b7e      	cmp	r3, #126	@ 0x7e
 8013000:	d0e9      	beq.n	8012fd6 <uxr_read_framed_msg+0x2f6>
 8013002:	e6ae      	b.n	8012d62 <uxr_read_framed_msg+0x82>
 8013004:	30c30c31 	.word	0x30c30c31
 8013008:	0801b6fc 	.word	0x0801b6fc
 801300c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801300e:	9300      	str	r3, [sp, #0]
 8013010:	2305      	movs	r3, #5
 8013012:	9301      	str	r3, [sp, #4]
 8013014:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013016:	f7ff fde1 	bl	8012bdc <uxr_framing_read_transport>
 801301a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801301e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8013022:	429a      	cmp	r2, r3
 8013024:	f43f ae9d 	beq.w	8012d62 <uxr_read_framed_msg+0x82>
 8013028:	e668      	b.n	8012cfc <uxr_read_framed_msg+0x1c>
 801302a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801302c:	9300      	str	r3, [sp, #0]
 801302e:	2303      	movs	r3, #3
 8013030:	e7c7      	b.n	8012fc2 <uxr_read_framed_msg+0x2e2>
 8013032:	2305      	movs	r3, #5
 8013034:	7023      	strb	r3, [r4, #0]
 8013036:	e664      	b.n	8012d02 <uxr_read_framed_msg+0x22>
 8013038:	ee17 8a90 	vmov	r8, s15
 801303c:	f43f aef2 	beq.w	8012e24 <uxr_read_framed_msg+0x144>
 8013040:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8013044:	d08e      	beq.n	8012f64 <uxr_read_framed_msg+0x284>
 8013046:	ebae 0303 	sub.w	r3, lr, r3
 801304a:	3302      	adds	r3, #2
 801304c:	9301      	str	r3, [sp, #4]
 801304e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013050:	9300      	str	r3, [sp, #0]
 8013052:	e7b7      	b.n	8012fc4 <uxr_read_framed_msg+0x2e4>
 8013054:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013056:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801305a:	7013      	strb	r3, [r2, #0]
 801305c:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 801305e:	b003      	add	sp, #12
 8013060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013064:	f103 0c01 	add.w	ip, r3, #1
 8013068:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801306c:	fba5 0202 	umull	r0, r2, r5, r2
 8013070:	0892      	lsrs	r2, r2, #2
 8013072:	202a      	movs	r0, #42	@ 0x2a
 8013074:	fb00 c212 	mls	r2, r0, r2, ip
 8013078:	fa5f fc82 	uxtb.w	ip, r2
 801307c:	4561      	cmp	r1, ip
 801307e:	d09d      	beq.n	8012fbc <uxr_read_framed_msg+0x2dc>
 8013080:	3302      	adds	r3, #2
 8013082:	4422      	add	r2, r4
 8013084:	0859      	lsrs	r1, r3, #1
 8013086:	7892      	ldrb	r2, [r2, #2]
 8013088:	fba5 c101 	umull	ip, r1, r5, r1
 801308c:	0889      	lsrs	r1, r1, #2
 801308e:	fb00 3311 	mls	r3, r0, r1, r3
 8013092:	2a7e      	cmp	r2, #126	@ 0x7e
 8013094:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8013098:	f000 80aa 	beq.w	80131f0 <uxr_read_framed_msg+0x510>
 801309c:	f082 0220 	eor.w	r2, r2, #32
 80130a0:	e654      	b.n	8012d4c <uxr_read_framed_msg+0x6c>
 80130a2:	1c58      	adds	r0, r3, #1
 80130a4:	0842      	lsrs	r2, r0, #1
 80130a6:	fba5 c202 	umull	ip, r2, r5, r2
 80130aa:	0892      	lsrs	r2, r2, #2
 80130ac:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80130b0:	fb0c 0212 	mls	r2, ip, r2, r0
 80130b4:	b2d0      	uxtb	r0, r2
 80130b6:	4281      	cmp	r1, r0
 80130b8:	d08f      	beq.n	8012fda <uxr_read_framed_msg+0x2fa>
 80130ba:	4422      	add	r2, r4
 80130bc:	3302      	adds	r3, #2
 80130be:	7890      	ldrb	r0, [r2, #2]
 80130c0:	085a      	lsrs	r2, r3, #1
 80130c2:	fba5 1202 	umull	r1, r2, r5, r2
 80130c6:	0892      	lsrs	r2, r2, #2
 80130c8:	fb0c 3312 	mls	r3, ip, r2, r3
 80130cc:	287e      	cmp	r0, #126	@ 0x7e
 80130ce:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80130d2:	d07d      	beq.n	80131d0 <uxr_read_framed_msg+0x4f0>
 80130d4:	f080 0020 	eor.w	r0, r0, #32
 80130d8:	e660      	b.n	8012d9c <uxr_read_framed_msg+0xbc>
 80130da:	1c59      	adds	r1, r3, #1
 80130dc:	084a      	lsrs	r2, r1, #1
 80130de:	fba5 c202 	umull	ip, r2, r5, r2
 80130e2:	0892      	lsrs	r2, r2, #2
 80130e4:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80130e8:	fb0c 1212 	mls	r2, ip, r2, r1
 80130ec:	b2d1      	uxtb	r1, r2
 80130ee:	4288      	cmp	r0, r1
 80130f0:	f43f af64 	beq.w	8012fbc <uxr_read_framed_msg+0x2dc>
 80130f4:	4422      	add	r2, r4
 80130f6:	3302      	adds	r3, #2
 80130f8:	7891      	ldrb	r1, [r2, #2]
 80130fa:	085a      	lsrs	r2, r3, #1
 80130fc:	fba5 0202 	umull	r0, r2, r5, r2
 8013100:	0892      	lsrs	r2, r2, #2
 8013102:	fb0c 3312 	mls	r3, ip, r2, r3
 8013106:	297e      	cmp	r1, #126	@ 0x7e
 8013108:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801310c:	d070      	beq.n	80131f0 <uxr_read_framed_msg+0x510>
 801310e:	f081 0120 	eor.w	r1, r1, #32
 8013112:	e6a3      	b.n	8012e5c <uxr_read_framed_msg+0x17c>
 8013114:	f103 0c01 	add.w	ip, r3, #1
 8013118:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801311c:	fba5 0202 	umull	r0, r2, r5, r2
 8013120:	0892      	lsrs	r2, r2, #2
 8013122:	202a      	movs	r0, #42	@ 0x2a
 8013124:	fb00 c212 	mls	r2, r0, r2, ip
 8013128:	fa5f fc82 	uxtb.w	ip, r2
 801312c:	4561      	cmp	r1, ip
 801312e:	f43f af58 	beq.w	8012fe2 <uxr_read_framed_msg+0x302>
 8013132:	4422      	add	r2, r4
 8013134:	3302      	adds	r3, #2
 8013136:	7891      	ldrb	r1, [r2, #2]
 8013138:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801313c:	085a      	lsrs	r2, r3, #1
 801313e:	fba5 c202 	umull	ip, r2, r5, r2
 8013142:	0892      	lsrs	r2, r2, #2
 8013144:	fb00 3312 	mls	r3, r0, r2, r3
 8013148:	297e      	cmp	r1, #126	@ 0x7e
 801314a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801314e:	f43f af48 	beq.w	8012fe2 <uxr_read_framed_msg+0x302>
 8013152:	f081 0120 	eor.w	r1, r1, #32
 8013156:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801315a:	e6e8      	b.n	8012f2e <uxr_read_framed_msg+0x24e>
 801315c:	1c58      	adds	r0, r3, #1
 801315e:	0842      	lsrs	r2, r0, #1
 8013160:	fba5 c202 	umull	ip, r2, r5, r2
 8013164:	0892      	lsrs	r2, r2, #2
 8013166:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801316a:	fb0c 0212 	mls	r2, ip, r2, r0
 801316e:	b2d0      	uxtb	r0, r2
 8013170:	4281      	cmp	r1, r0
 8013172:	f43f af32 	beq.w	8012fda <uxr_read_framed_msg+0x2fa>
 8013176:	4422      	add	r2, r4
 8013178:	3302      	adds	r3, #2
 801317a:	7890      	ldrb	r0, [r2, #2]
 801317c:	085a      	lsrs	r2, r3, #1
 801317e:	fba5 1202 	umull	r1, r2, r5, r2
 8013182:	0892      	lsrs	r2, r2, #2
 8013184:	fb0c 3312 	mls	r3, ip, r2, r3
 8013188:	287e      	cmp	r0, #126	@ 0x7e
 801318a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801318e:	d01f      	beq.n	80131d0 <uxr_read_framed_msg+0x4f0>
 8013190:	f080 0020 	eor.w	r0, r0, #32
 8013194:	e68b      	b.n	8012eae <uxr_read_framed_msg+0x1ce>
 8013196:	1c51      	adds	r1, r2, #1
 8013198:	084b      	lsrs	r3, r1, #1
 801319a:	fba5 c303 	umull	ip, r3, r5, r3
 801319e:	089b      	lsrs	r3, r3, #2
 80131a0:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80131a4:	fb0c 1313 	mls	r3, ip, r3, r1
 80131a8:	b2d9      	uxtb	r1, r3
 80131aa:	4288      	cmp	r0, r1
 80131ac:	f43f af3d 	beq.w	801302a <uxr_read_framed_msg+0x34a>
 80131b0:	3202      	adds	r2, #2
 80131b2:	4423      	add	r3, r4
 80131b4:	0850      	lsrs	r0, r2, #1
 80131b6:	789b      	ldrb	r3, [r3, #2]
 80131b8:	fba5 1000 	umull	r1, r0, r5, r0
 80131bc:	0880      	lsrs	r0, r0, #2
 80131be:	fb0c 2210 	mls	r2, ip, r0, r2
 80131c2:	2b7e      	cmp	r3, #126	@ 0x7e
 80131c4:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80131c8:	d016      	beq.n	80131f8 <uxr_read_framed_msg+0x518>
 80131ca:	f083 0120 	eor.w	r1, r3, #32
 80131ce:	e68b      	b.n	8012ee8 <uxr_read_framed_msg+0x208>
 80131d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80131d2:	9300      	str	r3, [sp, #0]
 80131d4:	2302      	movs	r3, #2
 80131d6:	9301      	str	r3, [sp, #4]
 80131d8:	464a      	mov	r2, r9
 80131da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80131dc:	4641      	mov	r1, r8
 80131de:	4620      	mov	r0, r4
 80131e0:	f7ff fcfc 	bl	8012bdc <uxr_framing_read_transport>
 80131e4:	2800      	cmp	r0, #0
 80131e6:	f47f aef6 	bne.w	8012fd6 <uxr_read_framed_msg+0x2f6>
 80131ea:	2301      	movs	r3, #1
 80131ec:	7023      	strb	r3, [r4, #0]
 80131ee:	e588      	b.n	8012d02 <uxr_read_framed_msg+0x22>
 80131f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80131f2:	9300      	str	r3, [sp, #0]
 80131f4:	2301      	movs	r3, #1
 80131f6:	e7ee      	b.n	80131d6 <uxr_read_framed_msg+0x4f6>
 80131f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80131fa:	9300      	str	r3, [sp, #0]
 80131fc:	2303      	movs	r3, #3
 80131fe:	e7ea      	b.n	80131d6 <uxr_read_framed_msg+0x4f6>
 8013200:	ee17 8a90 	vmov	r8, s15
 8013204:	e6ae      	b.n	8012f64 <uxr_read_framed_msg+0x284>
 8013206:	bf00      	nop

08013208 <uxr_stream_id>:
 8013208:	2901      	cmp	r1, #1
 801320a:	b082      	sub	sp, #8
 801320c:	d01d      	beq.n	801324a <uxr_stream_id+0x42>
 801320e:	2902      	cmp	r1, #2
 8013210:	f04f 0c00 	mov.w	ip, #0
 8013214:	d01e      	beq.n	8013254 <uxr_stream_id+0x4c>
 8013216:	2300      	movs	r3, #0
 8013218:	f36c 0307 	bfi	r3, ip, #0, #8
 801321c:	f360 230f 	bfi	r3, r0, #8, #8
 8013220:	f361 4317 	bfi	r3, r1, #16, #8
 8013224:	f362 631f 	bfi	r3, r2, #24, #8
 8013228:	b2da      	uxtb	r2, r3
 801322a:	2000      	movs	r0, #0
 801322c:	f362 0007 	bfi	r0, r2, #0, #8
 8013230:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8013234:	f362 200f 	bfi	r0, r2, #8, #8
 8013238:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801323c:	f362 4017 	bfi	r0, r2, #16, #8
 8013240:	0e1b      	lsrs	r3, r3, #24
 8013242:	f363 601f 	bfi	r0, r3, #24, #8
 8013246:	b002      	add	sp, #8
 8013248:	4770      	bx	lr
 801324a:	f100 0c01 	add.w	ip, r0, #1
 801324e:	fa5f fc8c 	uxtb.w	ip, ip
 8013252:	e7e0      	b.n	8013216 <uxr_stream_id+0xe>
 8013254:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8013258:	e7dd      	b.n	8013216 <uxr_stream_id+0xe>
 801325a:	bf00      	nop

0801325c <uxr_stream_id_from_raw>:
 801325c:	b082      	sub	sp, #8
 801325e:	b130      	cbz	r0, 801326e <uxr_stream_id_from_raw+0x12>
 8013260:	0603      	lsls	r3, r0, #24
 8013262:	d420      	bmi.n	80132a6 <uxr_stream_id_from_raw+0x4a>
 8013264:	1e42      	subs	r2, r0, #1
 8013266:	b2d2      	uxtb	r2, r2
 8013268:	f04f 0c01 	mov.w	ip, #1
 801326c:	e001      	b.n	8013272 <uxr_stream_id_from_raw+0x16>
 801326e:	4684      	mov	ip, r0
 8013270:	4602      	mov	r2, r0
 8013272:	2300      	movs	r3, #0
 8013274:	f360 0307 	bfi	r3, r0, #0, #8
 8013278:	f362 230f 	bfi	r3, r2, #8, #8
 801327c:	f36c 4317 	bfi	r3, ip, #16, #8
 8013280:	f361 631f 	bfi	r3, r1, #24, #8
 8013284:	b2da      	uxtb	r2, r3
 8013286:	2000      	movs	r0, #0
 8013288:	f362 0007 	bfi	r0, r2, #0, #8
 801328c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8013290:	f362 200f 	bfi	r0, r2, #8, #8
 8013294:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8013298:	f362 4017 	bfi	r0, r2, #16, #8
 801329c:	0e1b      	lsrs	r3, r3, #24
 801329e:	f363 601f 	bfi	r0, r3, #24, #8
 80132a2:	b002      	add	sp, #8
 80132a4:	4770      	bx	lr
 80132a6:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 80132aa:	f04f 0c02 	mov.w	ip, #2
 80132ae:	e7e0      	b.n	8013272 <uxr_stream_id_from_raw+0x16>

080132b0 <uxr_init_stream_storage>:
 80132b0:	2300      	movs	r3, #0
 80132b2:	7403      	strb	r3, [r0, #16]
 80132b4:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 80132b8:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 80132bc:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 80132c0:	4770      	bx	lr
 80132c2:	bf00      	nop

080132c4 <uxr_reset_stream_storage>:
 80132c4:	b570      	push	{r4, r5, r6, lr}
 80132c6:	7c03      	ldrb	r3, [r0, #16]
 80132c8:	4604      	mov	r4, r0
 80132ca:	b153      	cbz	r3, 80132e2 <uxr_reset_stream_storage+0x1e>
 80132cc:	4606      	mov	r6, r0
 80132ce:	2500      	movs	r5, #0
 80132d0:	4630      	mov	r0, r6
 80132d2:	f005 f837 	bl	8018344 <uxr_reset_output_best_effort_stream>
 80132d6:	7c23      	ldrb	r3, [r4, #16]
 80132d8:	3501      	adds	r5, #1
 80132da:	42ab      	cmp	r3, r5
 80132dc:	f106 0610 	add.w	r6, r6, #16
 80132e0:	d8f6      	bhi.n	80132d0 <uxr_reset_stream_storage+0xc>
 80132e2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80132e6:	b163      	cbz	r3, 8013302 <uxr_reset_stream_storage+0x3e>
 80132e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80132ec:	2500      	movs	r5, #0
 80132ee:	4630      	mov	r0, r6
 80132f0:	f004 fe2a 	bl	8017f48 <uxr_reset_input_best_effort_stream>
 80132f4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80132f8:	3501      	adds	r5, #1
 80132fa:	42ab      	cmp	r3, r5
 80132fc:	f106 0602 	add.w	r6, r6, #2
 8013300:	d8f5      	bhi.n	80132ee <uxr_reset_stream_storage+0x2a>
 8013302:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8013306:	b163      	cbz	r3, 8013322 <uxr_reset_stream_storage+0x5e>
 8013308:	f104 0618 	add.w	r6, r4, #24
 801330c:	2500      	movs	r5, #0
 801330e:	4630      	mov	r0, r6
 8013310:	f005 f8c4 	bl	801849c <uxr_reset_output_reliable_stream>
 8013314:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8013318:	3501      	adds	r5, #1
 801331a:	42ab      	cmp	r3, r5
 801331c:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8013320:	d8f5      	bhi.n	801330e <uxr_reset_stream_storage+0x4a>
 8013322:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8013326:	b163      	cbz	r3, 8013342 <uxr_reset_stream_storage+0x7e>
 8013328:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 801332c:	2500      	movs	r5, #0
 801332e:	4630      	mov	r0, r6
 8013330:	f004 fe7e 	bl	8018030 <uxr_reset_input_reliable_stream>
 8013334:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8013338:	3501      	adds	r5, #1
 801333a:	42ab      	cmp	r3, r5
 801333c:	f106 0618 	add.w	r6, r6, #24
 8013340:	d8f5      	bhi.n	801332e <uxr_reset_stream_storage+0x6a>
 8013342:	bd70      	pop	{r4, r5, r6, pc}

08013344 <uxr_add_output_best_effort_buffer>:
 8013344:	b510      	push	{r4, lr}
 8013346:	7c04      	ldrb	r4, [r0, #16]
 8013348:	f104 0c01 	add.w	ip, r4, #1
 801334c:	b082      	sub	sp, #8
 801334e:	f880 c010 	strb.w	ip, [r0, #16]
 8013352:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8013356:	f004 ffeb 	bl	8018330 <uxr_init_output_best_effort_stream>
 801335a:	2201      	movs	r2, #1
 801335c:	4611      	mov	r1, r2
 801335e:	4620      	mov	r0, r4
 8013360:	b002      	add	sp, #8
 8013362:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013366:	f7ff bf4f 	b.w	8013208 <uxr_stream_id>
 801336a:	bf00      	nop

0801336c <uxr_add_output_reliable_buffer>:
 801336c:	b510      	push	{r4, lr}
 801336e:	b084      	sub	sp, #16
 8013370:	4684      	mov	ip, r0
 8013372:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8013376:	9000      	str	r0, [sp, #0]
 8013378:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 801337c:	2028      	movs	r0, #40	@ 0x28
 801337e:	fb00 c004 	mla	r0, r0, r4, ip
 8013382:	f104 0e01 	add.w	lr, r4, #1
 8013386:	3018      	adds	r0, #24
 8013388:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 801338c:	f005 f84e 	bl	801842c <uxr_init_output_reliable_stream>
 8013390:	2201      	movs	r2, #1
 8013392:	2102      	movs	r1, #2
 8013394:	4620      	mov	r0, r4
 8013396:	b004      	add	sp, #16
 8013398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801339c:	f7ff bf34 	b.w	8013208 <uxr_stream_id>

080133a0 <uxr_add_input_best_effort_buffer>:
 80133a0:	b510      	push	{r4, lr}
 80133a2:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 80133a6:	4603      	mov	r3, r0
 80133a8:	1c62      	adds	r2, r4, #1
 80133aa:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 80133ae:	b082      	sub	sp, #8
 80133b0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80133b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80133b8:	f004 fdc2 	bl	8017f40 <uxr_init_input_best_effort_stream>
 80133bc:	2200      	movs	r2, #0
 80133be:	2101      	movs	r1, #1
 80133c0:	4620      	mov	r0, r4
 80133c2:	b002      	add	sp, #8
 80133c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80133c8:	f7ff bf1e 	b.w	8013208 <uxr_stream_id>

080133cc <uxr_add_input_reliable_buffer>:
 80133cc:	b510      	push	{r4, lr}
 80133ce:	b084      	sub	sp, #16
 80133d0:	4684      	mov	ip, r0
 80133d2:	9806      	ldr	r0, [sp, #24]
 80133d4:	9000      	str	r0, [sp, #0]
 80133d6:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 80133da:	2018      	movs	r0, #24
 80133dc:	fb00 c004 	mla	r0, r0, r4, ip
 80133e0:	f104 0e01 	add.w	lr, r4, #1
 80133e4:	3048      	adds	r0, #72	@ 0x48
 80133e6:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 80133ea:	f004 fdf5 	bl	8017fd8 <uxr_init_input_reliable_stream>
 80133ee:	2200      	movs	r2, #0
 80133f0:	2102      	movs	r1, #2
 80133f2:	4620      	mov	r0, r4
 80133f4:	b004      	add	sp, #16
 80133f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80133fa:	f7ff bf05 	b.w	8013208 <uxr_stream_id>
 80133fe:	bf00      	nop

08013400 <uxr_get_output_best_effort_stream>:
 8013400:	7c03      	ldrb	r3, [r0, #16]
 8013402:	428b      	cmp	r3, r1
 8013404:	bf8c      	ite	hi
 8013406:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801340a:	2000      	movls	r0, #0
 801340c:	4770      	bx	lr
 801340e:	bf00      	nop

08013410 <uxr_get_output_reliable_stream>:
 8013410:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8013414:	428b      	cmp	r3, r1
 8013416:	bf83      	ittte	hi
 8013418:	2328      	movhi	r3, #40	@ 0x28
 801341a:	fb03 0001 	mlahi	r0, r3, r1, r0
 801341e:	3018      	addhi	r0, #24
 8013420:	2000      	movls	r0, #0
 8013422:	4770      	bx	lr

08013424 <uxr_get_input_best_effort_stream>:
 8013424:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8013428:	428b      	cmp	r3, r1
 801342a:	bf86      	itte	hi
 801342c:	3121      	addhi	r1, #33	@ 0x21
 801342e:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8013432:	2000      	movls	r0, #0
 8013434:	4770      	bx	lr
 8013436:	bf00      	nop

08013438 <uxr_get_input_reliable_stream>:
 8013438:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 801343c:	428b      	cmp	r3, r1
 801343e:	bf83      	ittte	hi
 8013440:	2318      	movhi	r3, #24
 8013442:	fb03 0001 	mlahi	r0, r3, r1, r0
 8013446:	3048      	addhi	r0, #72	@ 0x48
 8013448:	2000      	movls	r0, #0
 801344a:	4770      	bx	lr

0801344c <uxr_output_streams_confirmed>:
 801344c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8013450:	b183      	cbz	r3, 8013474 <uxr_output_streams_confirmed+0x28>
 8013452:	b570      	push	{r4, r5, r6, lr}
 8013454:	4606      	mov	r6, r0
 8013456:	f100 0518 	add.w	r5, r0, #24
 801345a:	2400      	movs	r4, #0
 801345c:	e001      	b.n	8013462 <uxr_output_streams_confirmed+0x16>
 801345e:	3528      	adds	r5, #40	@ 0x28
 8013460:	b138      	cbz	r0, 8013472 <uxr_output_streams_confirmed+0x26>
 8013462:	4628      	mov	r0, r5
 8013464:	f005 fa8a 	bl	801897c <uxr_is_output_up_to_date>
 8013468:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 801346c:	3401      	adds	r4, #1
 801346e:	42a3      	cmp	r3, r4
 8013470:	d8f5      	bhi.n	801345e <uxr_output_streams_confirmed+0x12>
 8013472:	bd70      	pop	{r4, r5, r6, pc}
 8013474:	2001      	movs	r0, #1
 8013476:	4770      	bx	lr

08013478 <uxr_buffer_submessage_header>:
 8013478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801347a:	4604      	mov	r4, r0
 801347c:	460e      	mov	r6, r1
 801347e:	2104      	movs	r1, #4
 8013480:	4615      	mov	r5, r2
 8013482:	461f      	mov	r7, r3
 8013484:	f7f8 fdbc 	bl	800c000 <ucdr_align_to>
 8013488:	2301      	movs	r3, #1
 801348a:	ea47 0203 	orr.w	r2, r7, r3
 801348e:	4631      	mov	r1, r6
 8013490:	7523      	strb	r3, [r4, #20]
 8013492:	4620      	mov	r0, r4
 8013494:	462b      	mov	r3, r5
 8013496:	f000 fa27 	bl	80138e8 <uxr_serialize_submessage_header>
 801349a:	4620      	mov	r0, r4
 801349c:	f7f8 fdc6 	bl	800c02c <ucdr_buffer_remaining>
 80134a0:	42a8      	cmp	r0, r5
 80134a2:	bf34      	ite	cc
 80134a4:	2000      	movcc	r0, #0
 80134a6:	2001      	movcs	r0, #1
 80134a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80134aa:	bf00      	nop

080134ac <uxr_read_submessage_header>:
 80134ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134b0:	4604      	mov	r4, r0
 80134b2:	460d      	mov	r5, r1
 80134b4:	2104      	movs	r1, #4
 80134b6:	4616      	mov	r6, r2
 80134b8:	4698      	mov	r8, r3
 80134ba:	f7f8 fda1 	bl	800c000 <ucdr_align_to>
 80134be:	4620      	mov	r0, r4
 80134c0:	f7f8 fdb4 	bl	800c02c <ucdr_buffer_remaining>
 80134c4:	2803      	cmp	r0, #3
 80134c6:	bf8c      	ite	hi
 80134c8:	2701      	movhi	r7, #1
 80134ca:	2700      	movls	r7, #0
 80134cc:	d802      	bhi.n	80134d4 <uxr_read_submessage_header+0x28>
 80134ce:	4638      	mov	r0, r7
 80134d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134d4:	4633      	mov	r3, r6
 80134d6:	4642      	mov	r2, r8
 80134d8:	4620      	mov	r0, r4
 80134da:	4629      	mov	r1, r5
 80134dc:	f000 fa18 	bl	8013910 <uxr_deserialize_submessage_header>
 80134e0:	f898 3000 	ldrb.w	r3, [r8]
 80134e4:	f003 0201 	and.w	r2, r3, #1
 80134e8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80134ec:	f888 3000 	strb.w	r3, [r8]
 80134f0:	7522      	strb	r2, [r4, #20]
 80134f2:	4638      	mov	r0, r7
 80134f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080134f8 <uxr_submessage_padding>:
 80134f8:	f010 0003 	ands.w	r0, r0, #3
 80134fc:	bf18      	it	ne
 80134fe:	f1c0 0004 	rsbne	r0, r0, #4
 8013502:	4770      	bx	lr

08013504 <uxr_millis>:
 8013504:	b510      	push	{r4, lr}
 8013506:	b084      	sub	sp, #16
 8013508:	4669      	mov	r1, sp
 801350a:	2001      	movs	r0, #1
 801350c:	f7ef fb2c 	bl	8002b68 <clock_gettime>
 8013510:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8013514:	4906      	ldr	r1, [pc, #24]	@ (8013530 <uxr_millis+0x2c>)
 8013516:	fba0 0301 	umull	r0, r3, r0, r1
 801351a:	1900      	adds	r0, r0, r4
 801351c:	fb01 3102 	mla	r1, r1, r2, r3
 8013520:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8013524:	4a03      	ldr	r2, [pc, #12]	@ (8013534 <uxr_millis+0x30>)
 8013526:	2300      	movs	r3, #0
 8013528:	f7ed faf8 	bl	8000b1c <__aeabi_ldivmod>
 801352c:	b004      	add	sp, #16
 801352e:	bd10      	pop	{r4, pc}
 8013530:	3b9aca00 	.word	0x3b9aca00
 8013534:	000f4240 	.word	0x000f4240

08013538 <uxr_nanos>:
 8013538:	b510      	push	{r4, lr}
 801353a:	b084      	sub	sp, #16
 801353c:	4669      	mov	r1, sp
 801353e:	2001      	movs	r0, #1
 8013540:	f7ef fb12 	bl	8002b68 <clock_gettime>
 8013544:	4a06      	ldr	r2, [pc, #24]	@ (8013560 <uxr_nanos+0x28>)
 8013546:	9800      	ldr	r0, [sp, #0]
 8013548:	9902      	ldr	r1, [sp, #8]
 801354a:	9c01      	ldr	r4, [sp, #4]
 801354c:	fba0 0302 	umull	r0, r3, r0, r2
 8013550:	1840      	adds	r0, r0, r1
 8013552:	fb02 3304 	mla	r3, r2, r4, r3
 8013556:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 801355a:	b004      	add	sp, #16
 801355c:	bd10      	pop	{r4, pc}
 801355e:	bf00      	nop
 8013560:	3b9aca00 	.word	0x3b9aca00

08013564 <on_full_output_buffer_fragmented>:
 8013564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013568:	460c      	mov	r4, r1
 801356a:	b08a      	sub	sp, #40	@ 0x28
 801356c:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8013570:	4606      	mov	r6, r0
 8013572:	f104 0008 	add.w	r0, r4, #8
 8013576:	f7ff ff4b 	bl	8013410 <uxr_get_output_reliable_stream>
 801357a:	4605      	mov	r5, r0
 801357c:	f005 fa08 	bl	8018990 <get_available_free_slots>
 8013580:	b968      	cbnz	r0, 801359e <on_full_output_buffer_fragmented+0x3a>
 8013582:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8013586:	4620      	mov	r0, r4
 8013588:	4798      	blx	r3
 801358a:	b918      	cbnz	r0, 8013594 <on_full_output_buffer_fragmented+0x30>
 801358c:	2001      	movs	r0, #1
 801358e:	b00a      	add	sp, #40	@ 0x28
 8013590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013594:	4628      	mov	r0, r5
 8013596:	f005 f9fb 	bl	8018990 <get_available_free_slots>
 801359a:	2800      	cmp	r0, #0
 801359c:	d0f6      	beq.n	801358c <on_full_output_buffer_fragmented+0x28>
 801359e:	8929      	ldrh	r1, [r5, #8]
 80135a0:	89eb      	ldrh	r3, [r5, #14]
 80135a2:	7b28      	ldrb	r0, [r5, #12]
 80135a4:	686a      	ldr	r2, [r5, #4]
 80135a6:	fbb2 f8f1 	udiv	r8, r2, r1
 80135aa:	fbb3 f2f1 	udiv	r2, r3, r1
 80135ae:	fb01 3112 	mls	r1, r1, r2, r3
 80135b2:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 80135b6:	b289      	uxth	r1, r1
 80135b8:	fb08 f101 	mul.w	r1, r8, r1
 80135bc:	30fc      	adds	r0, #252	@ 0xfc
 80135be:	f1a8 0804 	sub.w	r8, r8, #4
 80135c2:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 80135c6:	4440      	add	r0, r8
 80135c8:	b287      	uxth	r7, r0
 80135ca:	1bdb      	subs	r3, r3, r7
 80135cc:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 80135d0:	682b      	ldr	r3, [r5, #0]
 80135d2:	3104      	adds	r1, #4
 80135d4:	4419      	add	r1, r3
 80135d6:	4642      	mov	r2, r8
 80135d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80135dc:	9300      	str	r3, [sp, #0]
 80135de:	a802      	add	r0, sp, #8
 80135e0:	2300      	movs	r3, #0
 80135e2:	f7f8 fce1 	bl	800bfa8 <ucdr_init_buffer_origin_offset>
 80135e6:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 80135ea:	f102 0308 	add.w	r3, r2, #8
 80135ee:	4543      	cmp	r3, r8
 80135f0:	d928      	bls.n	8013644 <on_full_output_buffer_fragmented+0xe0>
 80135f2:	463a      	mov	r2, r7
 80135f4:	2300      	movs	r3, #0
 80135f6:	210d      	movs	r1, #13
 80135f8:	a802      	add	r0, sp, #8
 80135fa:	f7ff ff3d 	bl	8013478 <uxr_buffer_submessage_header>
 80135fe:	8929      	ldrh	r1, [r5, #8]
 8013600:	89eb      	ldrh	r3, [r5, #14]
 8013602:	fbb3 f2f1 	udiv	r2, r3, r1
 8013606:	fb01 3312 	mls	r3, r1, r2, r3
 801360a:	b29b      	uxth	r3, r3
 801360c:	686a      	ldr	r2, [r5, #4]
 801360e:	fbb2 f2f1 	udiv	r2, r2, r1
 8013612:	fb02 f303 	mul.w	r3, r2, r3
 8013616:	682a      	ldr	r2, [r5, #0]
 8013618:	f842 8003 	str.w	r8, [r2, r3]
 801361c:	89e8      	ldrh	r0, [r5, #14]
 801361e:	2101      	movs	r1, #1
 8013620:	f005 f9d6 	bl	80189d0 <uxr_seq_num_add>
 8013624:	9904      	ldr	r1, [sp, #16]
 8013626:	9a03      	ldr	r2, [sp, #12]
 8013628:	81e8      	strh	r0, [r5, #14]
 801362a:	1a52      	subs	r2, r2, r1
 801362c:	4630      	mov	r0, r6
 801362e:	f7f8 fccd 	bl	800bfcc <ucdr_init_buffer>
 8013632:	4630      	mov	r0, r6
 8013634:	490f      	ldr	r1, [pc, #60]	@ (8013674 <on_full_output_buffer_fragmented+0x110>)
 8013636:	4622      	mov	r2, r4
 8013638:	f7f8 fc9c 	bl	800bf74 <ucdr_set_on_full_buffer_callback>
 801363c:	2000      	movs	r0, #0
 801363e:	b00a      	add	sp, #40	@ 0x28
 8013640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013644:	b292      	uxth	r2, r2
 8013646:	2302      	movs	r3, #2
 8013648:	210d      	movs	r1, #13
 801364a:	a802      	add	r0, sp, #8
 801364c:	f7ff ff14 	bl	8013478 <uxr_buffer_submessage_header>
 8013650:	8928      	ldrh	r0, [r5, #8]
 8013652:	89eb      	ldrh	r3, [r5, #14]
 8013654:	fbb3 f1f0 	udiv	r1, r3, r0
 8013658:	fb00 3311 	mls	r3, r0, r1, r3
 801365c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8013660:	6869      	ldr	r1, [r5, #4]
 8013662:	fbb1 f1f0 	udiv	r1, r1, r0
 8013666:	b29b      	uxth	r3, r3
 8013668:	fb01 f303 	mul.w	r3, r1, r3
 801366c:	6829      	ldr	r1, [r5, #0]
 801366e:	3208      	adds	r2, #8
 8013670:	50ca      	str	r2, [r1, r3]
 8013672:	e7d3      	b.n	801361c <on_full_output_buffer_fragmented+0xb8>
 8013674:	08013565 	.word	0x08013565

08013678 <uxr_prepare_output_stream>:
 8013678:	b5f0      	push	{r4, r5, r6, r7, lr}
 801367a:	b087      	sub	sp, #28
 801367c:	2707      	movs	r7, #7
 801367e:	9202      	str	r2, [sp, #8]
 8013680:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8013682:	9103      	str	r1, [sp, #12]
 8013684:	2500      	movs	r5, #0
 8013686:	3204      	adds	r2, #4
 8013688:	e9cd 7500 	strd	r7, r5, [sp]
 801368c:	461c      	mov	r4, r3
 801368e:	4606      	mov	r6, r0
 8013690:	f7fe ffc2 	bl	8012618 <uxr_prepare_stream_to_write_submessage>
 8013694:	f080 0201 	eor.w	r2, r0, #1
 8013698:	b2d2      	uxtb	r2, r2
 801369a:	75a2      	strb	r2, [r4, #22]
 801369c:	b112      	cbz	r2, 80136a4 <uxr_prepare_output_stream+0x2c>
 801369e:	4628      	mov	r0, r5
 80136a0:	b007      	add	sp, #28
 80136a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80136a4:	aa05      	add	r2, sp, #20
 80136a6:	9902      	ldr	r1, [sp, #8]
 80136a8:	4630      	mov	r0, r6
 80136aa:	f7ff f8eb 	bl	8012884 <uxr_init_base_object_request>
 80136ae:	a905      	add	r1, sp, #20
 80136b0:	4605      	mov	r5, r0
 80136b2:	4620      	mov	r0, r4
 80136b4:	f001 f8a0 	bl	80147f8 <uxr_serialize_WRITE_DATA_Payload_Data>
 80136b8:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 80136bc:	69a6      	ldr	r6, [r4, #24]
 80136be:	69e7      	ldr	r7, [r4, #28]
 80136c0:	1a52      	subs	r2, r2, r1
 80136c2:	4620      	mov	r0, r4
 80136c4:	f7f8 fc82 	bl	800bfcc <ucdr_init_buffer>
 80136c8:	4620      	mov	r0, r4
 80136ca:	463a      	mov	r2, r7
 80136cc:	4631      	mov	r1, r6
 80136ce:	f7f8 fc51 	bl	800bf74 <ucdr_set_on_full_buffer_callback>
 80136d2:	4628      	mov	r0, r5
 80136d4:	b007      	add	sp, #28
 80136d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080136d8 <uxr_prepare_output_stream_fragmented>:
 80136d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136dc:	b091      	sub	sp, #68	@ 0x44
 80136de:	4605      	mov	r5, r0
 80136e0:	9105      	str	r1, [sp, #20]
 80136e2:	3008      	adds	r0, #8
 80136e4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80136e8:	461e      	mov	r6, r3
 80136ea:	9204      	str	r2, [sp, #16]
 80136ec:	f7ff fe90 	bl	8013410 <uxr_get_output_reliable_stream>
 80136f0:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80136f4:	2b01      	cmp	r3, #1
 80136f6:	f000 8091 	beq.w	801381c <uxr_prepare_output_stream_fragmented+0x144>
 80136fa:	4604      	mov	r4, r0
 80136fc:	2800      	cmp	r0, #0
 80136fe:	f000 808d 	beq.w	801381c <uxr_prepare_output_stream_fragmented+0x144>
 8013702:	f005 f945 	bl	8018990 <get_available_free_slots>
 8013706:	2800      	cmp	r0, #0
 8013708:	f000 8083 	beq.w	8013812 <uxr_prepare_output_stream_fragmented+0x13a>
 801370c:	8922      	ldrh	r2, [r4, #8]
 801370e:	89e7      	ldrh	r7, [r4, #14]
 8013710:	fbb7 f9f2 	udiv	r9, r7, r2
 8013714:	fb02 7919 	mls	r9, r2, r9, r7
 8013718:	fa1f f989 	uxth.w	r9, r9
 801371c:	6863      	ldr	r3, [r4, #4]
 801371e:	fbb3 f2f2 	udiv	r2, r3, r2
 8013722:	6823      	ldr	r3, [r4, #0]
 8013724:	9203      	str	r2, [sp, #12]
 8013726:	fb02 f909 	mul.w	r9, r2, r9
 801372a:	f109 0904 	add.w	r9, r9, #4
 801372e:	4499      	add	r9, r3
 8013730:	7b23      	ldrb	r3, [r4, #12]
 8013732:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8013736:	4543      	cmp	r3, r8
 8013738:	f1a2 0b04 	sub.w	fp, r2, #4
 801373c:	d37a      	bcc.n	8013834 <uxr_prepare_output_stream_fragmented+0x15c>
 801373e:	f1ab 0a04 	sub.w	sl, fp, #4
 8013742:	ebaa 0a03 	sub.w	sl, sl, r3
 8013746:	465a      	mov	r2, fp
 8013748:	2300      	movs	r3, #0
 801374a:	4649      	mov	r1, r9
 801374c:	a808      	add	r0, sp, #32
 801374e:	f8cd 8000 	str.w	r8, [sp]
 8013752:	f7f8 fc29 	bl	800bfa8 <ucdr_init_buffer_origin_offset>
 8013756:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8013758:	fa1f fa8a 	uxth.w	sl, sl
 801375c:	4652      	mov	r2, sl
 801375e:	f103 0a08 	add.w	sl, r3, #8
 8013762:	45da      	cmp	sl, fp
 8013764:	bf34      	ite	cc
 8013766:	2302      	movcc	r3, #2
 8013768:	2300      	movcs	r3, #0
 801376a:	210d      	movs	r1, #13
 801376c:	a808      	add	r0, sp, #32
 801376e:	f7ff fe83 	bl	8013478 <uxr_buffer_submessage_header>
 8013772:	8921      	ldrh	r1, [r4, #8]
 8013774:	fbb7 f2f1 	udiv	r2, r7, r1
 8013778:	fb01 7212 	mls	r2, r1, r2, r7
 801377c:	b292      	uxth	r2, r2
 801377e:	6863      	ldr	r3, [r4, #4]
 8013780:	fbb3 f3f1 	udiv	r3, r3, r1
 8013784:	fb02 f303 	mul.w	r3, r2, r3
 8013788:	6822      	ldr	r2, [r4, #0]
 801378a:	4638      	mov	r0, r7
 801378c:	f842 b003 	str.w	fp, [r2, r3]
 8013790:	2101      	movs	r1, #1
 8013792:	f005 f91d 	bl	80189d0 <uxr_seq_num_add>
 8013796:	9b03      	ldr	r3, [sp, #12]
 8013798:	f108 0104 	add.w	r1, r8, #4
 801379c:	f1a3 0208 	sub.w	r2, r3, #8
 80137a0:	eba2 0208 	sub.w	r2, r2, r8
 80137a4:	4449      	add	r1, r9
 80137a6:	4607      	mov	r7, r0
 80137a8:	4630      	mov	r0, r6
 80137aa:	f7f8 fc0f 	bl	800bfcc <ucdr_init_buffer>
 80137ae:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80137b0:	81e7      	strh	r7, [r4, #14]
 80137b2:	1d1a      	adds	r2, r3, #4
 80137b4:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80137b8:	bf28      	it	cs
 80137ba:	2200      	movcs	r2, #0
 80137bc:	2300      	movs	r3, #0
 80137be:	b292      	uxth	r2, r2
 80137c0:	2107      	movs	r1, #7
 80137c2:	4630      	mov	r0, r6
 80137c4:	f7ff fe58 	bl	8013478 <uxr_buffer_submessage_header>
 80137c8:	9904      	ldr	r1, [sp, #16]
 80137ca:	aa07      	add	r2, sp, #28
 80137cc:	4628      	mov	r0, r5
 80137ce:	f7ff f859 	bl	8012884 <uxr_init_base_object_request>
 80137d2:	4604      	mov	r4, r0
 80137d4:	b318      	cbz	r0, 801381e <uxr_prepare_output_stream_fragmented+0x146>
 80137d6:	a907      	add	r1, sp, #28
 80137d8:	4630      	mov	r0, r6
 80137da:	f001 f80d 	bl	80147f8 <uxr_serialize_WRITE_DATA_Payload_Data>
 80137de:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80137e2:	4630      	mov	r0, r6
 80137e4:	1a52      	subs	r2, r2, r1
 80137e6:	f7f8 fbf1 	bl	800bfcc <ucdr_init_buffer>
 80137ea:	9b05      	ldr	r3, [sp, #20]
 80137ec:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 80137f0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80137f2:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 80137f6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80137f8:	491b      	ldr	r1, [pc, #108]	@ (8013868 <uxr_prepare_output_stream_fragmented+0x190>)
 80137fa:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 80137fe:	4630      	mov	r0, r6
 8013800:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8013804:	462a      	mov	r2, r5
 8013806:	f7f8 fbb5 	bl	800bf74 <ucdr_set_on_full_buffer_callback>
 801380a:	4620      	mov	r0, r4
 801380c:	b011      	add	sp, #68	@ 0x44
 801380e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013812:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8013814:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8013816:	4628      	mov	r0, r5
 8013818:	4798      	blx	r3
 801381a:	b920      	cbnz	r0, 8013826 <uxr_prepare_output_stream_fragmented+0x14e>
 801381c:	2400      	movs	r4, #0
 801381e:	4620      	mov	r0, r4
 8013820:	b011      	add	sp, #68	@ 0x44
 8013822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013826:	4620      	mov	r0, r4
 8013828:	f005 f8b2 	bl	8018990 <get_available_free_slots>
 801382c:	2800      	cmp	r0, #0
 801382e:	f47f af6d 	bne.w	801370c <uxr_prepare_output_stream_fragmented+0x34>
 8013832:	e7f3      	b.n	801381c <uxr_prepare_output_stream_fragmented+0x144>
 8013834:	4638      	mov	r0, r7
 8013836:	2101      	movs	r1, #1
 8013838:	f005 f8ca 	bl	80189d0 <uxr_seq_num_add>
 801383c:	8921      	ldrh	r1, [r4, #8]
 801383e:	fbb0 f2f1 	udiv	r2, r0, r1
 8013842:	fb01 0912 	mls	r9, r1, r2, r0
 8013846:	fa1f f289 	uxth.w	r2, r9
 801384a:	6863      	ldr	r3, [r4, #4]
 801384c:	fbb3 f9f1 	udiv	r9, r3, r1
 8013850:	6823      	ldr	r3, [r4, #0]
 8013852:	fb02 f909 	mul.w	r9, r2, r9
 8013856:	f109 0904 	add.w	r9, r9, #4
 801385a:	4499      	add	r9, r3
 801385c:	4607      	mov	r7, r0
 801385e:	7b23      	ldrb	r3, [r4, #12]
 8013860:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8013864:	e76b      	b.n	801373e <uxr_prepare_output_stream_fragmented+0x66>
 8013866:	bf00      	nop
 8013868:	08013565 	.word	0x08013565

0801386c <uxr_serialize_message_header>:
 801386c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801386e:	b083      	sub	sp, #12
 8013870:	4616      	mov	r6, r2
 8013872:	4604      	mov	r4, r0
 8013874:	9301      	str	r3, [sp, #4]
 8013876:	460d      	mov	r5, r1
 8013878:	9f08      	ldr	r7, [sp, #32]
 801387a:	f7f7 f8c5 	bl	800aa08 <ucdr_serialize_uint8_t>
 801387e:	4631      	mov	r1, r6
 8013880:	4620      	mov	r0, r4
 8013882:	f7f7 f8c1 	bl	800aa08 <ucdr_serialize_uint8_t>
 8013886:	9a01      	ldr	r2, [sp, #4]
 8013888:	2101      	movs	r1, #1
 801388a:	4620      	mov	r0, r4
 801388c:	f7f7 f968 	bl	800ab60 <ucdr_serialize_endian_uint16_t>
 8013890:	062b      	lsls	r3, r5, #24
 8013892:	d501      	bpl.n	8013898 <uxr_serialize_message_header+0x2c>
 8013894:	b003      	add	sp, #12
 8013896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013898:	2204      	movs	r2, #4
 801389a:	4639      	mov	r1, r7
 801389c:	4620      	mov	r0, r4
 801389e:	b003      	add	sp, #12
 80138a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80138a4:	f7fd b870 	b.w	8010988 <ucdr_serialize_array_uint8_t>

080138a8 <uxr_deserialize_message_header>:
 80138a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80138aa:	b083      	sub	sp, #12
 80138ac:	4616      	mov	r6, r2
 80138ae:	4604      	mov	r4, r0
 80138b0:	9301      	str	r3, [sp, #4]
 80138b2:	460d      	mov	r5, r1
 80138b4:	9f08      	ldr	r7, [sp, #32]
 80138b6:	f7f7 f8bd 	bl	800aa34 <ucdr_deserialize_uint8_t>
 80138ba:	4631      	mov	r1, r6
 80138bc:	4620      	mov	r0, r4
 80138be:	f7f7 f8b9 	bl	800aa34 <ucdr_deserialize_uint8_t>
 80138c2:	9a01      	ldr	r2, [sp, #4]
 80138c4:	2101      	movs	r1, #1
 80138c6:	4620      	mov	r0, r4
 80138c8:	f7f7 fa3e 	bl	800ad48 <ucdr_deserialize_endian_uint16_t>
 80138cc:	f995 3000 	ldrsb.w	r3, [r5]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	da01      	bge.n	80138d8 <uxr_deserialize_message_header+0x30>
 80138d4:	b003      	add	sp, #12
 80138d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138d8:	2204      	movs	r2, #4
 80138da:	4639      	mov	r1, r7
 80138dc:	4620      	mov	r0, r4
 80138de:	b003      	add	sp, #12
 80138e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80138e4:	f7fd b8b4 	b.w	8010a50 <ucdr_deserialize_array_uint8_t>

080138e8 <uxr_serialize_submessage_header>:
 80138e8:	b530      	push	{r4, r5, lr}
 80138ea:	b083      	sub	sp, #12
 80138ec:	4615      	mov	r5, r2
 80138ee:	4604      	mov	r4, r0
 80138f0:	9301      	str	r3, [sp, #4]
 80138f2:	f7f7 f889 	bl	800aa08 <ucdr_serialize_uint8_t>
 80138f6:	4629      	mov	r1, r5
 80138f8:	4620      	mov	r0, r4
 80138fa:	f7f7 f885 	bl	800aa08 <ucdr_serialize_uint8_t>
 80138fe:	9a01      	ldr	r2, [sp, #4]
 8013900:	2101      	movs	r1, #1
 8013902:	4620      	mov	r0, r4
 8013904:	b003      	add	sp, #12
 8013906:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801390a:	f7f7 b929 	b.w	800ab60 <ucdr_serialize_endian_uint16_t>
 801390e:	bf00      	nop

08013910 <uxr_deserialize_submessage_header>:
 8013910:	b530      	push	{r4, r5, lr}
 8013912:	b083      	sub	sp, #12
 8013914:	4615      	mov	r5, r2
 8013916:	4604      	mov	r4, r0
 8013918:	9301      	str	r3, [sp, #4]
 801391a:	f7f7 f88b 	bl	800aa34 <ucdr_deserialize_uint8_t>
 801391e:	4629      	mov	r1, r5
 8013920:	4620      	mov	r0, r4
 8013922:	f7f7 f887 	bl	800aa34 <ucdr_deserialize_uint8_t>
 8013926:	9a01      	ldr	r2, [sp, #4]
 8013928:	2101      	movs	r1, #1
 801392a:	4620      	mov	r0, r4
 801392c:	b003      	add	sp, #12
 801392e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013932:	f7f7 ba09 	b.w	800ad48 <ucdr_deserialize_endian_uint16_t>
 8013936:	bf00      	nop

08013938 <uxr_serialize_CLIENT_Representation>:
 8013938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801393c:	2204      	movs	r2, #4
 801393e:	460e      	mov	r6, r1
 8013940:	4605      	mov	r5, r0
 8013942:	f7fd f821 	bl	8010988 <ucdr_serialize_array_uint8_t>
 8013946:	2202      	movs	r2, #2
 8013948:	4607      	mov	r7, r0
 801394a:	1d31      	adds	r1, r6, #4
 801394c:	4628      	mov	r0, r5
 801394e:	f7fd f81b 	bl	8010988 <ucdr_serialize_array_uint8_t>
 8013952:	4038      	ands	r0, r7
 8013954:	2202      	movs	r2, #2
 8013956:	1db1      	adds	r1, r6, #6
 8013958:	b2c7      	uxtb	r7, r0
 801395a:	4628      	mov	r0, r5
 801395c:	f7fd f814 	bl	8010988 <ucdr_serialize_array_uint8_t>
 8013960:	2204      	movs	r2, #4
 8013962:	4007      	ands	r7, r0
 8013964:	f106 0108 	add.w	r1, r6, #8
 8013968:	4628      	mov	r0, r5
 801396a:	f7fd f80d 	bl	8010988 <ucdr_serialize_array_uint8_t>
 801396e:	7b31      	ldrb	r1, [r6, #12]
 8013970:	4007      	ands	r7, r0
 8013972:	4628      	mov	r0, r5
 8013974:	f7f7 f848 	bl	800aa08 <ucdr_serialize_uint8_t>
 8013978:	7b71      	ldrb	r1, [r6, #13]
 801397a:	4007      	ands	r7, r0
 801397c:	4628      	mov	r0, r5
 801397e:	f7f7 f815 	bl	800a9ac <ucdr_serialize_bool>
 8013982:	7b73      	ldrb	r3, [r6, #13]
 8013984:	ea07 0800 	and.w	r8, r7, r0
 8013988:	b93b      	cbnz	r3, 801399a <uxr_serialize_CLIENT_Representation+0x62>
 801398a:	8bb1      	ldrh	r1, [r6, #28]
 801398c:	4628      	mov	r0, r5
 801398e:	f7f7 f867 	bl	800aa60 <ucdr_serialize_uint16_t>
 8013992:	ea08 0000 	and.w	r0, r8, r0
 8013996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801399a:	6931      	ldr	r1, [r6, #16]
 801399c:	4628      	mov	r0, r5
 801399e:	f7f7 fa49 	bl	800ae34 <ucdr_serialize_uint32_t>
 80139a2:	6933      	ldr	r3, [r6, #16]
 80139a4:	b1e3      	cbz	r3, 80139e0 <uxr_serialize_CLIENT_Representation+0xa8>
 80139a6:	b1c0      	cbz	r0, 80139da <uxr_serialize_CLIENT_Representation+0xa2>
 80139a8:	4637      	mov	r7, r6
 80139aa:	f04f 0900 	mov.w	r9, #0
 80139ae:	e001      	b.n	80139b4 <uxr_serialize_CLIENT_Representation+0x7c>
 80139b0:	3708      	adds	r7, #8
 80139b2:	b194      	cbz	r4, 80139da <uxr_serialize_CLIENT_Representation+0xa2>
 80139b4:	6979      	ldr	r1, [r7, #20]
 80139b6:	4628      	mov	r0, r5
 80139b8:	f004 faaa 	bl	8017f10 <ucdr_serialize_string>
 80139bc:	69b9      	ldr	r1, [r7, #24]
 80139be:	4604      	mov	r4, r0
 80139c0:	4628      	mov	r0, r5
 80139c2:	f004 faa5 	bl	8017f10 <ucdr_serialize_string>
 80139c6:	6933      	ldr	r3, [r6, #16]
 80139c8:	f109 0901 	add.w	r9, r9, #1
 80139cc:	4004      	ands	r4, r0
 80139ce:	4599      	cmp	r9, r3
 80139d0:	b2e4      	uxtb	r4, r4
 80139d2:	d3ed      	bcc.n	80139b0 <uxr_serialize_CLIENT_Representation+0x78>
 80139d4:	ea08 0804 	and.w	r8, r8, r4
 80139d8:	e7d7      	b.n	801398a <uxr_serialize_CLIENT_Representation+0x52>
 80139da:	f04f 0800 	mov.w	r8, #0
 80139de:	e7d4      	b.n	801398a <uxr_serialize_CLIENT_Representation+0x52>
 80139e0:	ea08 0800 	and.w	r8, r8, r0
 80139e4:	e7d1      	b.n	801398a <uxr_serialize_CLIENT_Representation+0x52>
 80139e6:	bf00      	nop

080139e8 <uxr_deserialize_CLIENT_Representation>:
 80139e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80139ec:	2204      	movs	r2, #4
 80139ee:	460c      	mov	r4, r1
 80139f0:	4605      	mov	r5, r0
 80139f2:	f7fd f82d 	bl	8010a50 <ucdr_deserialize_array_uint8_t>
 80139f6:	2202      	movs	r2, #2
 80139f8:	4607      	mov	r7, r0
 80139fa:	1d21      	adds	r1, r4, #4
 80139fc:	4628      	mov	r0, r5
 80139fe:	f7fd f827 	bl	8010a50 <ucdr_deserialize_array_uint8_t>
 8013a02:	4038      	ands	r0, r7
 8013a04:	2202      	movs	r2, #2
 8013a06:	1da1      	adds	r1, r4, #6
 8013a08:	b2c6      	uxtb	r6, r0
 8013a0a:	4628      	mov	r0, r5
 8013a0c:	f7fd f820 	bl	8010a50 <ucdr_deserialize_array_uint8_t>
 8013a10:	2204      	movs	r2, #4
 8013a12:	4006      	ands	r6, r0
 8013a14:	f104 0108 	add.w	r1, r4, #8
 8013a18:	4628      	mov	r0, r5
 8013a1a:	f7fd f819 	bl	8010a50 <ucdr_deserialize_array_uint8_t>
 8013a1e:	f104 010c 	add.w	r1, r4, #12
 8013a22:	4006      	ands	r6, r0
 8013a24:	4628      	mov	r0, r5
 8013a26:	f7f7 f805 	bl	800aa34 <ucdr_deserialize_uint8_t>
 8013a2a:	f104 010d 	add.w	r1, r4, #13
 8013a2e:	ea06 0700 	and.w	r7, r6, r0
 8013a32:	4628      	mov	r0, r5
 8013a34:	f7f6 ffd0 	bl	800a9d8 <ucdr_deserialize_bool>
 8013a38:	7b63      	ldrb	r3, [r4, #13]
 8013a3a:	4007      	ands	r7, r0
 8013a3c:	b93b      	cbnz	r3, 8013a4e <uxr_deserialize_CLIENT_Representation+0x66>
 8013a3e:	f104 011c 	add.w	r1, r4, #28
 8013a42:	4628      	mov	r0, r5
 8013a44:	f7f7 f90c 	bl	800ac60 <ucdr_deserialize_uint16_t>
 8013a48:	4038      	ands	r0, r7
 8013a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a4e:	f104 0110 	add.w	r1, r4, #16
 8013a52:	4628      	mov	r0, r5
 8013a54:	f7f7 fb1e 	bl	800b094 <ucdr_deserialize_uint32_t>
 8013a58:	6923      	ldr	r3, [r4, #16]
 8013a5a:	2b01      	cmp	r3, #1
 8013a5c:	d903      	bls.n	8013a66 <uxr_deserialize_CLIENT_Representation+0x7e>
 8013a5e:	2301      	movs	r3, #1
 8013a60:	75ab      	strb	r3, [r5, #22]
 8013a62:	2700      	movs	r7, #0
 8013a64:	e7eb      	b.n	8013a3e <uxr_deserialize_CLIENT_Representation+0x56>
 8013a66:	b30b      	cbz	r3, 8013aac <uxr_deserialize_CLIENT_Representation+0xc4>
 8013a68:	2800      	cmp	r0, #0
 8013a6a:	d0fa      	beq.n	8013a62 <uxr_deserialize_CLIENT_Representation+0x7a>
 8013a6c:	46a0      	mov	r8, r4
 8013a6e:	f04f 0900 	mov.w	r9, #0
 8013a72:	e001      	b.n	8013a78 <uxr_deserialize_CLIENT_Representation+0x90>
 8013a74:	2e00      	cmp	r6, #0
 8013a76:	d0f4      	beq.n	8013a62 <uxr_deserialize_CLIENT_Representation+0x7a>
 8013a78:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013a7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013a80:	4628      	mov	r0, r5
 8013a82:	f004 fa55 	bl	8017f30 <ucdr_deserialize_string>
 8013a86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013a8a:	4606      	mov	r6, r0
 8013a8c:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8013a90:	4628      	mov	r0, r5
 8013a92:	f004 fa4d 	bl	8017f30 <ucdr_deserialize_string>
 8013a96:	6923      	ldr	r3, [r4, #16]
 8013a98:	f109 0901 	add.w	r9, r9, #1
 8013a9c:	4006      	ands	r6, r0
 8013a9e:	4599      	cmp	r9, r3
 8013aa0:	f108 0808 	add.w	r8, r8, #8
 8013aa4:	b2f6      	uxtb	r6, r6
 8013aa6:	d3e5      	bcc.n	8013a74 <uxr_deserialize_CLIENT_Representation+0x8c>
 8013aa8:	4037      	ands	r7, r6
 8013aaa:	e7c8      	b.n	8013a3e <uxr_deserialize_CLIENT_Representation+0x56>
 8013aac:	4007      	ands	r7, r0
 8013aae:	e7c6      	b.n	8013a3e <uxr_deserialize_CLIENT_Representation+0x56>

08013ab0 <uxr_serialize_AGENT_Representation>:
 8013ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ab4:	2204      	movs	r2, #4
 8013ab6:	460f      	mov	r7, r1
 8013ab8:	4605      	mov	r5, r0
 8013aba:	f7fc ff65 	bl	8010988 <ucdr_serialize_array_uint8_t>
 8013abe:	2202      	movs	r2, #2
 8013ac0:	4604      	mov	r4, r0
 8013ac2:	1d39      	adds	r1, r7, #4
 8013ac4:	4628      	mov	r0, r5
 8013ac6:	f7fc ff5f 	bl	8010988 <ucdr_serialize_array_uint8_t>
 8013aca:	4020      	ands	r0, r4
 8013acc:	2202      	movs	r2, #2
 8013ace:	1db9      	adds	r1, r7, #6
 8013ad0:	b2c4      	uxtb	r4, r0
 8013ad2:	4628      	mov	r0, r5
 8013ad4:	f7fc ff58 	bl	8010988 <ucdr_serialize_array_uint8_t>
 8013ad8:	7a39      	ldrb	r1, [r7, #8]
 8013ada:	4004      	ands	r4, r0
 8013adc:	4628      	mov	r0, r5
 8013ade:	f7f6 ff65 	bl	800a9ac <ucdr_serialize_bool>
 8013ae2:	7a3b      	ldrb	r3, [r7, #8]
 8013ae4:	ea00 0804 	and.w	r8, r0, r4
 8013ae8:	b913      	cbnz	r3, 8013af0 <uxr_serialize_AGENT_Representation+0x40>
 8013aea:	4640      	mov	r0, r8
 8013aec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013af0:	68f9      	ldr	r1, [r7, #12]
 8013af2:	4628      	mov	r0, r5
 8013af4:	f7f7 f99e 	bl	800ae34 <ucdr_serialize_uint32_t>
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	b303      	cbz	r3, 8013b3e <uxr_serialize_AGENT_Representation+0x8e>
 8013afc:	b1d0      	cbz	r0, 8013b34 <uxr_serialize_AGENT_Representation+0x84>
 8013afe:	463e      	mov	r6, r7
 8013b00:	f04f 0900 	mov.w	r9, #0
 8013b04:	e001      	b.n	8013b0a <uxr_serialize_AGENT_Representation+0x5a>
 8013b06:	3608      	adds	r6, #8
 8013b08:	b1a4      	cbz	r4, 8013b34 <uxr_serialize_AGENT_Representation+0x84>
 8013b0a:	6931      	ldr	r1, [r6, #16]
 8013b0c:	4628      	mov	r0, r5
 8013b0e:	f004 f9ff 	bl	8017f10 <ucdr_serialize_string>
 8013b12:	6971      	ldr	r1, [r6, #20]
 8013b14:	4604      	mov	r4, r0
 8013b16:	4628      	mov	r0, r5
 8013b18:	f004 f9fa 	bl	8017f10 <ucdr_serialize_string>
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	f109 0901 	add.w	r9, r9, #1
 8013b22:	4004      	ands	r4, r0
 8013b24:	4599      	cmp	r9, r3
 8013b26:	b2e4      	uxtb	r4, r4
 8013b28:	d3ed      	bcc.n	8013b06 <uxr_serialize_AGENT_Representation+0x56>
 8013b2a:	ea08 0804 	and.w	r8, r8, r4
 8013b2e:	4640      	mov	r0, r8
 8013b30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b34:	f04f 0800 	mov.w	r8, #0
 8013b38:	4640      	mov	r0, r8
 8013b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b3e:	ea08 0800 	and.w	r8, r8, r0
 8013b42:	e7d2      	b.n	8013aea <uxr_serialize_AGENT_Representation+0x3a>

08013b44 <uxr_serialize_DATAWRITER_Representation>:
 8013b44:	b570      	push	{r4, r5, r6, lr}
 8013b46:	460d      	mov	r5, r1
 8013b48:	7809      	ldrb	r1, [r1, #0]
 8013b4a:	4606      	mov	r6, r0
 8013b4c:	f7f6 ff5c 	bl	800aa08 <ucdr_serialize_uint8_t>
 8013b50:	4604      	mov	r4, r0
 8013b52:	b130      	cbz	r0, 8013b62 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8013b54:	782b      	ldrb	r3, [r5, #0]
 8013b56:	2b02      	cmp	r3, #2
 8013b58:	d00c      	beq.n	8013b74 <uxr_serialize_DATAWRITER_Representation+0x30>
 8013b5a:	2b03      	cmp	r3, #3
 8013b5c:	d010      	beq.n	8013b80 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8013b5e:	2b01      	cmp	r3, #1
 8013b60:	d008      	beq.n	8013b74 <uxr_serialize_DATAWRITER_Representation+0x30>
 8013b62:	2202      	movs	r2, #2
 8013b64:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8013b68:	4630      	mov	r0, r6
 8013b6a:	f7fc ff0d 	bl	8010988 <ucdr_serialize_array_uint8_t>
 8013b6e:	4020      	ands	r0, r4
 8013b70:	b2c0      	uxtb	r0, r0
 8013b72:	bd70      	pop	{r4, r5, r6, pc}
 8013b74:	6869      	ldr	r1, [r5, #4]
 8013b76:	4630      	mov	r0, r6
 8013b78:	f004 f9ca 	bl	8017f10 <ucdr_serialize_string>
 8013b7c:	4604      	mov	r4, r0
 8013b7e:	e7f0      	b.n	8013b62 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8013b80:	4629      	mov	r1, r5
 8013b82:	4630      	mov	r0, r6
 8013b84:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8013b88:	3104      	adds	r1, #4
 8013b8a:	f7fd f89b 	bl	8010cc4 <ucdr_serialize_sequence_uint8_t>
 8013b8e:	4604      	mov	r4, r0
 8013b90:	e7e7      	b.n	8013b62 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8013b92:	bf00      	nop

08013b94 <uxr_serialize_ObjectVariant.part.0>:
 8013b94:	b570      	push	{r4, r5, r6, lr}
 8013b96:	780b      	ldrb	r3, [r1, #0]
 8013b98:	3b01      	subs	r3, #1
 8013b9a:	460c      	mov	r4, r1
 8013b9c:	4605      	mov	r5, r0
 8013b9e:	2b0d      	cmp	r3, #13
 8013ba0:	d854      	bhi.n	8013c4c <uxr_serialize_ObjectVariant.part.0+0xb8>
 8013ba2:	e8df f003 	tbb	[pc, r3]
 8013ba6:	0730      	.short	0x0730
 8013ba8:	07071b1b 	.word	0x07071b1b
 8013bac:	0c530707 	.word	0x0c530707
 8013bb0:	494e0c0c 	.word	0x494e0c0c
 8013bb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013bb8:	3104      	adds	r1, #4
 8013bba:	f7ff bfc3 	b.w	8013b44 <uxr_serialize_DATAWRITER_Representation>
 8013bbe:	7909      	ldrb	r1, [r1, #4]
 8013bc0:	f7f6 ff22 	bl	800aa08 <ucdr_serialize_uint8_t>
 8013bc4:	b1e8      	cbz	r0, 8013c02 <uxr_serialize_ObjectVariant.part.0+0x6e>
 8013bc6:	7923      	ldrb	r3, [r4, #4]
 8013bc8:	2b01      	cmp	r3, #1
 8013bca:	d001      	beq.n	8013bd0 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8013bcc:	2b02      	cmp	r3, #2
 8013bce:	d13d      	bne.n	8013c4c <uxr_serialize_ObjectVariant.part.0+0xb8>
 8013bd0:	68a1      	ldr	r1, [r4, #8]
 8013bd2:	4628      	mov	r0, r5
 8013bd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013bd8:	f004 b99a 	b.w	8017f10 <ucdr_serialize_string>
 8013bdc:	7909      	ldrb	r1, [r1, #4]
 8013bde:	f7f6 ff13 	bl	800aa08 <ucdr_serialize_uint8_t>
 8013be2:	4606      	mov	r6, r0
 8013be4:	b120      	cbz	r0, 8013bf0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8013be6:	7923      	ldrb	r3, [r4, #4]
 8013be8:	2b02      	cmp	r3, #2
 8013bea:	d039      	beq.n	8013c60 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8013bec:	2b03      	cmp	r3, #3
 8013bee:	d02f      	beq.n	8013c50 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8013bf0:	2202      	movs	r2, #2
 8013bf2:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8013bf6:	4628      	mov	r0, r5
 8013bf8:	f7fc fec6 	bl	8010988 <ucdr_serialize_array_uint8_t>
 8013bfc:	4030      	ands	r0, r6
 8013bfe:	b2c0      	uxtb	r0, r0
 8013c00:	bd70      	pop	{r4, r5, r6, pc}
 8013c02:	2000      	movs	r0, #0
 8013c04:	bd70      	pop	{r4, r5, r6, pc}
 8013c06:	7909      	ldrb	r1, [r1, #4]
 8013c08:	f7f6 fefe 	bl	800aa08 <ucdr_serialize_uint8_t>
 8013c0c:	4606      	mov	r6, r0
 8013c0e:	b158      	cbz	r0, 8013c28 <uxr_serialize_ObjectVariant.part.0+0x94>
 8013c10:	7923      	ldrb	r3, [r4, #4]
 8013c12:	2b02      	cmp	r3, #2
 8013c14:	d003      	beq.n	8013c1e <uxr_serialize_ObjectVariant.part.0+0x8a>
 8013c16:	2b03      	cmp	r3, #3
 8013c18:	d028      	beq.n	8013c6c <uxr_serialize_ObjectVariant.part.0+0xd8>
 8013c1a:	2b01      	cmp	r3, #1
 8013c1c:	d104      	bne.n	8013c28 <uxr_serialize_ObjectVariant.part.0+0x94>
 8013c1e:	68a1      	ldr	r1, [r4, #8]
 8013c20:	4628      	mov	r0, r5
 8013c22:	f004 f975 	bl	8017f10 <ucdr_serialize_string>
 8013c26:	4606      	mov	r6, r0
 8013c28:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8013c2c:	4628      	mov	r0, r5
 8013c2e:	f7f7 fc27 	bl	800b480 <ucdr_serialize_int16_t>
 8013c32:	4030      	ands	r0, r6
 8013c34:	b2c0      	uxtb	r0, r0
 8013c36:	bd70      	pop	{r4, r5, r6, pc}
 8013c38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013c3c:	3104      	adds	r1, #4
 8013c3e:	f7ff be7b 	b.w	8013938 <uxr_serialize_CLIENT_Representation>
 8013c42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013c46:	3104      	adds	r1, #4
 8013c48:	f7ff bf32 	b.w	8013ab0 <uxr_serialize_AGENT_Representation>
 8013c4c:	2001      	movs	r0, #1
 8013c4e:	bd70      	pop	{r4, r5, r6, pc}
 8013c50:	68a2      	ldr	r2, [r4, #8]
 8013c52:	f104 010c 	add.w	r1, r4, #12
 8013c56:	4628      	mov	r0, r5
 8013c58:	f7fd f834 	bl	8010cc4 <ucdr_serialize_sequence_uint8_t>
 8013c5c:	4606      	mov	r6, r0
 8013c5e:	e7c7      	b.n	8013bf0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8013c60:	68a1      	ldr	r1, [r4, #8]
 8013c62:	4628      	mov	r0, r5
 8013c64:	f004 f954 	bl	8017f10 <ucdr_serialize_string>
 8013c68:	4606      	mov	r6, r0
 8013c6a:	e7c1      	b.n	8013bf0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8013c6c:	68a2      	ldr	r2, [r4, #8]
 8013c6e:	f104 010c 	add.w	r1, r4, #12
 8013c72:	4628      	mov	r0, r5
 8013c74:	f7fd f826 	bl	8010cc4 <ucdr_serialize_sequence_uint8_t>
 8013c78:	4606      	mov	r6, r0
 8013c7a:	e7d5      	b.n	8013c28 <uxr_serialize_ObjectVariant.part.0+0x94>

08013c7c <uxr_deserialize_DATAWRITER_Representation>:
 8013c7c:	b570      	push	{r4, r5, r6, lr}
 8013c7e:	4606      	mov	r6, r0
 8013c80:	460d      	mov	r5, r1
 8013c82:	f7f6 fed7 	bl	800aa34 <ucdr_deserialize_uint8_t>
 8013c86:	4604      	mov	r4, r0
 8013c88:	b130      	cbz	r0, 8013c98 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8013c8a:	782b      	ldrb	r3, [r5, #0]
 8013c8c:	2b02      	cmp	r3, #2
 8013c8e:	d00c      	beq.n	8013caa <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8013c90:	2b03      	cmp	r3, #3
 8013c92:	d012      	beq.n	8013cba <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8013c94:	2b01      	cmp	r3, #1
 8013c96:	d008      	beq.n	8013caa <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8013c98:	2202      	movs	r2, #2
 8013c9a:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8013c9e:	4630      	mov	r0, r6
 8013ca0:	f7fc fed6 	bl	8010a50 <ucdr_deserialize_array_uint8_t>
 8013ca4:	4020      	ands	r0, r4
 8013ca6:	b2c0      	uxtb	r0, r0
 8013ca8:	bd70      	pop	{r4, r5, r6, pc}
 8013caa:	6869      	ldr	r1, [r5, #4]
 8013cac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013cb0:	4630      	mov	r0, r6
 8013cb2:	f004 f93d 	bl	8017f30 <ucdr_deserialize_string>
 8013cb6:	4604      	mov	r4, r0
 8013cb8:	e7ee      	b.n	8013c98 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8013cba:	1d2b      	adds	r3, r5, #4
 8013cbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013cc0:	f105 0108 	add.w	r1, r5, #8
 8013cc4:	4630      	mov	r0, r6
 8013cc6:	f7fd f80f 	bl	8010ce8 <ucdr_deserialize_sequence_uint8_t>
 8013cca:	4604      	mov	r4, r0
 8013ccc:	e7e4      	b.n	8013c98 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8013cce:	bf00      	nop

08013cd0 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8013cd0:	b570      	push	{r4, r5, r6, lr}
 8013cd2:	460d      	mov	r5, r1
 8013cd4:	7809      	ldrb	r1, [r1, #0]
 8013cd6:	4606      	mov	r6, r0
 8013cd8:	f7f6 fe68 	bl	800a9ac <ucdr_serialize_bool>
 8013cdc:	782b      	ldrb	r3, [r5, #0]
 8013cde:	4604      	mov	r4, r0
 8013ce0:	b94b      	cbnz	r3, 8013cf6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8013ce2:	7a29      	ldrb	r1, [r5, #8]
 8013ce4:	4630      	mov	r0, r6
 8013ce6:	f7f6 fe61 	bl	800a9ac <ucdr_serialize_bool>
 8013cea:	7a2b      	ldrb	r3, [r5, #8]
 8013cec:	4004      	ands	r4, r0
 8013cee:	b2e4      	uxtb	r4, r4
 8013cf0:	b943      	cbnz	r3, 8013d04 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8013cf2:	4620      	mov	r0, r4
 8013cf4:	bd70      	pop	{r4, r5, r6, pc}
 8013cf6:	6869      	ldr	r1, [r5, #4]
 8013cf8:	4630      	mov	r0, r6
 8013cfa:	f004 f909 	bl	8017f10 <ucdr_serialize_string>
 8013cfe:	4004      	ands	r4, r0
 8013d00:	b2e4      	uxtb	r4, r4
 8013d02:	e7ee      	b.n	8013ce2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8013d04:	68e9      	ldr	r1, [r5, #12]
 8013d06:	4630      	mov	r0, r6
 8013d08:	f004 f902 	bl	8017f10 <ucdr_serialize_string>
 8013d0c:	4004      	ands	r4, r0
 8013d0e:	4620      	mov	r0, r4
 8013d10:	bd70      	pop	{r4, r5, r6, pc}
 8013d12:	bf00      	nop

08013d14 <uxr_serialize_OBJK_Topic_Binary>:
 8013d14:	b570      	push	{r4, r5, r6, lr}
 8013d16:	460d      	mov	r5, r1
 8013d18:	6809      	ldr	r1, [r1, #0]
 8013d1a:	4606      	mov	r6, r0
 8013d1c:	f004 f8f8 	bl	8017f10 <ucdr_serialize_string>
 8013d20:	7929      	ldrb	r1, [r5, #4]
 8013d22:	4604      	mov	r4, r0
 8013d24:	4630      	mov	r0, r6
 8013d26:	f7f6 fe41 	bl	800a9ac <ucdr_serialize_bool>
 8013d2a:	792b      	ldrb	r3, [r5, #4]
 8013d2c:	4004      	ands	r4, r0
 8013d2e:	b2e4      	uxtb	r4, r4
 8013d30:	b943      	cbnz	r3, 8013d44 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8013d32:	7b29      	ldrb	r1, [r5, #12]
 8013d34:	4630      	mov	r0, r6
 8013d36:	f7f6 fe39 	bl	800a9ac <ucdr_serialize_bool>
 8013d3a:	7b2b      	ldrb	r3, [r5, #12]
 8013d3c:	4004      	ands	r4, r0
 8013d3e:	b93b      	cbnz	r3, 8013d50 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8013d40:	4620      	mov	r0, r4
 8013d42:	bd70      	pop	{r4, r5, r6, pc}
 8013d44:	68a9      	ldr	r1, [r5, #8]
 8013d46:	4630      	mov	r0, r6
 8013d48:	f004 f8e2 	bl	8017f10 <ucdr_serialize_string>
 8013d4c:	4004      	ands	r4, r0
 8013d4e:	e7f0      	b.n	8013d32 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8013d50:	6929      	ldr	r1, [r5, #16]
 8013d52:	4630      	mov	r0, r6
 8013d54:	f004 f8dc 	bl	8017f10 <ucdr_serialize_string>
 8013d58:	4004      	ands	r4, r0
 8013d5a:	b2e4      	uxtb	r4, r4
 8013d5c:	4620      	mov	r0, r4
 8013d5e:	bd70      	pop	{r4, r5, r6, pc}

08013d60 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8013d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d64:	460c      	mov	r4, r1
 8013d66:	7809      	ldrb	r1, [r1, #0]
 8013d68:	4606      	mov	r6, r0
 8013d6a:	f7f6 fe1f 	bl	800a9ac <ucdr_serialize_bool>
 8013d6e:	7823      	ldrb	r3, [r4, #0]
 8013d70:	4605      	mov	r5, r0
 8013d72:	b96b      	cbnz	r3, 8013d90 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8013d74:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8013d78:	4630      	mov	r0, r6
 8013d7a:	f7f6 fe17 	bl	800a9ac <ucdr_serialize_bool>
 8013d7e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8013d82:	4005      	ands	r5, r0
 8013d84:	b2ed      	uxtb	r5, r5
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d169      	bne.n	8013e5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8013d8a:	4628      	mov	r0, r5
 8013d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d90:	6861      	ldr	r1, [r4, #4]
 8013d92:	4630      	mov	r0, r6
 8013d94:	f7f7 f84e 	bl	800ae34 <ucdr_serialize_uint32_t>
 8013d98:	6863      	ldr	r3, [r4, #4]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d06b      	beq.n	8013e76 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8013d9e:	2800      	cmp	r0, #0
 8013da0:	d067      	beq.n	8013e72 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013da2:	68a1      	ldr	r1, [r4, #8]
 8013da4:	4630      	mov	r0, r6
 8013da6:	f004 f8b3 	bl	8017f10 <ucdr_serialize_string>
 8013daa:	6863      	ldr	r3, [r4, #4]
 8013dac:	2b01      	cmp	r3, #1
 8013dae:	d953      	bls.n	8013e58 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013db0:	2800      	cmp	r0, #0
 8013db2:	d05e      	beq.n	8013e72 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013db4:	68e1      	ldr	r1, [r4, #12]
 8013db6:	4630      	mov	r0, r6
 8013db8:	f004 f8aa 	bl	8017f10 <ucdr_serialize_string>
 8013dbc:	6863      	ldr	r3, [r4, #4]
 8013dbe:	2b02      	cmp	r3, #2
 8013dc0:	d94a      	bls.n	8013e58 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013dc2:	2800      	cmp	r0, #0
 8013dc4:	d055      	beq.n	8013e72 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013dc6:	6921      	ldr	r1, [r4, #16]
 8013dc8:	4630      	mov	r0, r6
 8013dca:	f004 f8a1 	bl	8017f10 <ucdr_serialize_string>
 8013dce:	6863      	ldr	r3, [r4, #4]
 8013dd0:	2b03      	cmp	r3, #3
 8013dd2:	d941      	bls.n	8013e58 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013dd4:	2800      	cmp	r0, #0
 8013dd6:	d04c      	beq.n	8013e72 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013dd8:	6961      	ldr	r1, [r4, #20]
 8013dda:	4630      	mov	r0, r6
 8013ddc:	f004 f898 	bl	8017f10 <ucdr_serialize_string>
 8013de0:	6863      	ldr	r3, [r4, #4]
 8013de2:	2b04      	cmp	r3, #4
 8013de4:	d938      	bls.n	8013e58 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013de6:	2800      	cmp	r0, #0
 8013de8:	d043      	beq.n	8013e72 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013dea:	69a1      	ldr	r1, [r4, #24]
 8013dec:	4630      	mov	r0, r6
 8013dee:	f004 f88f 	bl	8017f10 <ucdr_serialize_string>
 8013df2:	6863      	ldr	r3, [r4, #4]
 8013df4:	2b05      	cmp	r3, #5
 8013df6:	d92f      	bls.n	8013e58 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013df8:	2800      	cmp	r0, #0
 8013dfa:	d03a      	beq.n	8013e72 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013dfc:	69e1      	ldr	r1, [r4, #28]
 8013dfe:	4630      	mov	r0, r6
 8013e00:	f004 f886 	bl	8017f10 <ucdr_serialize_string>
 8013e04:	6863      	ldr	r3, [r4, #4]
 8013e06:	2b06      	cmp	r3, #6
 8013e08:	d926      	bls.n	8013e58 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013e0a:	b390      	cbz	r0, 8013e72 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013e0c:	6a21      	ldr	r1, [r4, #32]
 8013e0e:	4630      	mov	r0, r6
 8013e10:	f004 f87e 	bl	8017f10 <ucdr_serialize_string>
 8013e14:	6863      	ldr	r3, [r4, #4]
 8013e16:	2b07      	cmp	r3, #7
 8013e18:	d91e      	bls.n	8013e58 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013e1a:	b350      	cbz	r0, 8013e72 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013e1c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8013e1e:	4630      	mov	r0, r6
 8013e20:	f004 f876 	bl	8017f10 <ucdr_serialize_string>
 8013e24:	6863      	ldr	r3, [r4, #4]
 8013e26:	2b08      	cmp	r3, #8
 8013e28:	d916      	bls.n	8013e58 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013e2a:	b310      	cbz	r0, 8013e72 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013e2c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8013e2e:	4630      	mov	r0, r6
 8013e30:	f004 f86e 	bl	8017f10 <ucdr_serialize_string>
 8013e34:	6863      	ldr	r3, [r4, #4]
 8013e36:	2b09      	cmp	r3, #9
 8013e38:	d90e      	bls.n	8013e58 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013e3a:	b1d0      	cbz	r0, 8013e72 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013e3c:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8013e40:	2709      	movs	r7, #9
 8013e42:	e000      	b.n	8013e46 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8013e44:	b1a8      	cbz	r0, 8013e72 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013e46:	f858 1b04 	ldr.w	r1, [r8], #4
 8013e4a:	4630      	mov	r0, r6
 8013e4c:	f004 f860 	bl	8017f10 <ucdr_serialize_string>
 8013e50:	6862      	ldr	r2, [r4, #4]
 8013e52:	3701      	adds	r7, #1
 8013e54:	4297      	cmp	r7, r2
 8013e56:	d3f5      	bcc.n	8013e44 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8013e58:	4005      	ands	r5, r0
 8013e5a:	b2ed      	uxtb	r5, r5
 8013e5c:	e78a      	b.n	8013d74 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8013e5e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013e60:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8013e64:	4630      	mov	r0, r6
 8013e66:	f7fc ff2d 	bl	8010cc4 <ucdr_serialize_sequence_uint8_t>
 8013e6a:	4005      	ands	r5, r0
 8013e6c:	4628      	mov	r0, r5
 8013e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e72:	2500      	movs	r5, #0
 8013e74:	e77e      	b.n	8013d74 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8013e76:	4028      	ands	r0, r5
 8013e78:	b2c5      	uxtb	r5, r0
 8013e7a:	e77b      	b.n	8013d74 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08013e7c <uxr_serialize_OBJK_Publisher_Binary>:
 8013e7c:	b570      	push	{r4, r5, r6, lr}
 8013e7e:	460d      	mov	r5, r1
 8013e80:	7809      	ldrb	r1, [r1, #0]
 8013e82:	4606      	mov	r6, r0
 8013e84:	f7f6 fd92 	bl	800a9ac <ucdr_serialize_bool>
 8013e88:	782b      	ldrb	r3, [r5, #0]
 8013e8a:	4604      	mov	r4, r0
 8013e8c:	b94b      	cbnz	r3, 8013ea2 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8013e8e:	7a29      	ldrb	r1, [r5, #8]
 8013e90:	4630      	mov	r0, r6
 8013e92:	f7f6 fd8b 	bl	800a9ac <ucdr_serialize_bool>
 8013e96:	7a2b      	ldrb	r3, [r5, #8]
 8013e98:	4004      	ands	r4, r0
 8013e9a:	b2e4      	uxtb	r4, r4
 8013e9c:	b943      	cbnz	r3, 8013eb0 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8013e9e:	4620      	mov	r0, r4
 8013ea0:	bd70      	pop	{r4, r5, r6, pc}
 8013ea2:	6869      	ldr	r1, [r5, #4]
 8013ea4:	4630      	mov	r0, r6
 8013ea6:	f004 f833 	bl	8017f10 <ucdr_serialize_string>
 8013eaa:	4004      	ands	r4, r0
 8013eac:	b2e4      	uxtb	r4, r4
 8013eae:	e7ee      	b.n	8013e8e <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8013eb0:	f105 010c 	add.w	r1, r5, #12
 8013eb4:	4630      	mov	r0, r6
 8013eb6:	f7ff ff53 	bl	8013d60 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8013eba:	4004      	ands	r4, r0
 8013ebc:	4620      	mov	r0, r4
 8013ebe:	bd70      	pop	{r4, r5, r6, pc}

08013ec0 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8013ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ec4:	460c      	mov	r4, r1
 8013ec6:	7809      	ldrb	r1, [r1, #0]
 8013ec8:	4606      	mov	r6, r0
 8013eca:	f7f6 fd6f 	bl	800a9ac <ucdr_serialize_bool>
 8013ece:	7823      	ldrb	r3, [r4, #0]
 8013ed0:	4605      	mov	r5, r0
 8013ed2:	b96b      	cbnz	r3, 8013ef0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8013ed4:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8013ed8:	4630      	mov	r0, r6
 8013eda:	f7f6 fd67 	bl	800a9ac <ucdr_serialize_bool>
 8013ede:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8013ee2:	4005      	ands	r5, r0
 8013ee4:	b2ed      	uxtb	r5, r5
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d169      	bne.n	8013fbe <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8013eea:	4628      	mov	r0, r5
 8013eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ef0:	6861      	ldr	r1, [r4, #4]
 8013ef2:	4630      	mov	r0, r6
 8013ef4:	f7f6 ff9e 	bl	800ae34 <ucdr_serialize_uint32_t>
 8013ef8:	6863      	ldr	r3, [r4, #4]
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d06b      	beq.n	8013fd6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8013efe:	2800      	cmp	r0, #0
 8013f00:	d067      	beq.n	8013fd2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013f02:	68a1      	ldr	r1, [r4, #8]
 8013f04:	4630      	mov	r0, r6
 8013f06:	f004 f803 	bl	8017f10 <ucdr_serialize_string>
 8013f0a:	6863      	ldr	r3, [r4, #4]
 8013f0c:	2b01      	cmp	r3, #1
 8013f0e:	d953      	bls.n	8013fb8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013f10:	2800      	cmp	r0, #0
 8013f12:	d05e      	beq.n	8013fd2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013f14:	68e1      	ldr	r1, [r4, #12]
 8013f16:	4630      	mov	r0, r6
 8013f18:	f003 fffa 	bl	8017f10 <ucdr_serialize_string>
 8013f1c:	6863      	ldr	r3, [r4, #4]
 8013f1e:	2b02      	cmp	r3, #2
 8013f20:	d94a      	bls.n	8013fb8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013f22:	2800      	cmp	r0, #0
 8013f24:	d055      	beq.n	8013fd2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013f26:	6921      	ldr	r1, [r4, #16]
 8013f28:	4630      	mov	r0, r6
 8013f2a:	f003 fff1 	bl	8017f10 <ucdr_serialize_string>
 8013f2e:	6863      	ldr	r3, [r4, #4]
 8013f30:	2b03      	cmp	r3, #3
 8013f32:	d941      	bls.n	8013fb8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013f34:	2800      	cmp	r0, #0
 8013f36:	d04c      	beq.n	8013fd2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013f38:	6961      	ldr	r1, [r4, #20]
 8013f3a:	4630      	mov	r0, r6
 8013f3c:	f003 ffe8 	bl	8017f10 <ucdr_serialize_string>
 8013f40:	6863      	ldr	r3, [r4, #4]
 8013f42:	2b04      	cmp	r3, #4
 8013f44:	d938      	bls.n	8013fb8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013f46:	2800      	cmp	r0, #0
 8013f48:	d043      	beq.n	8013fd2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013f4a:	69a1      	ldr	r1, [r4, #24]
 8013f4c:	4630      	mov	r0, r6
 8013f4e:	f003 ffdf 	bl	8017f10 <ucdr_serialize_string>
 8013f52:	6863      	ldr	r3, [r4, #4]
 8013f54:	2b05      	cmp	r3, #5
 8013f56:	d92f      	bls.n	8013fb8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013f58:	2800      	cmp	r0, #0
 8013f5a:	d03a      	beq.n	8013fd2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013f5c:	69e1      	ldr	r1, [r4, #28]
 8013f5e:	4630      	mov	r0, r6
 8013f60:	f003 ffd6 	bl	8017f10 <ucdr_serialize_string>
 8013f64:	6863      	ldr	r3, [r4, #4]
 8013f66:	2b06      	cmp	r3, #6
 8013f68:	d926      	bls.n	8013fb8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013f6a:	b390      	cbz	r0, 8013fd2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013f6c:	6a21      	ldr	r1, [r4, #32]
 8013f6e:	4630      	mov	r0, r6
 8013f70:	f003 ffce 	bl	8017f10 <ucdr_serialize_string>
 8013f74:	6863      	ldr	r3, [r4, #4]
 8013f76:	2b07      	cmp	r3, #7
 8013f78:	d91e      	bls.n	8013fb8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013f7a:	b350      	cbz	r0, 8013fd2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013f7c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8013f7e:	4630      	mov	r0, r6
 8013f80:	f003 ffc6 	bl	8017f10 <ucdr_serialize_string>
 8013f84:	6863      	ldr	r3, [r4, #4]
 8013f86:	2b08      	cmp	r3, #8
 8013f88:	d916      	bls.n	8013fb8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013f8a:	b310      	cbz	r0, 8013fd2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013f8c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8013f8e:	4630      	mov	r0, r6
 8013f90:	f003 ffbe 	bl	8017f10 <ucdr_serialize_string>
 8013f94:	6863      	ldr	r3, [r4, #4]
 8013f96:	2b09      	cmp	r3, #9
 8013f98:	d90e      	bls.n	8013fb8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013f9a:	b1d0      	cbz	r0, 8013fd2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013f9c:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8013fa0:	2709      	movs	r7, #9
 8013fa2:	e000      	b.n	8013fa6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8013fa4:	b1a8      	cbz	r0, 8013fd2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013fa6:	f858 1b04 	ldr.w	r1, [r8], #4
 8013faa:	4630      	mov	r0, r6
 8013fac:	f003 ffb0 	bl	8017f10 <ucdr_serialize_string>
 8013fb0:	6862      	ldr	r2, [r4, #4]
 8013fb2:	3701      	adds	r7, #1
 8013fb4:	4297      	cmp	r7, r2
 8013fb6:	d3f5      	bcc.n	8013fa4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8013fb8:	4005      	ands	r5, r0
 8013fba:	b2ed      	uxtb	r5, r5
 8013fbc:	e78a      	b.n	8013ed4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8013fbe:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013fc0:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8013fc4:	4630      	mov	r0, r6
 8013fc6:	f7fc fe7d 	bl	8010cc4 <ucdr_serialize_sequence_uint8_t>
 8013fca:	4005      	ands	r5, r0
 8013fcc:	4628      	mov	r0, r5
 8013fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fd2:	2500      	movs	r5, #0
 8013fd4:	e77e      	b.n	8013ed4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8013fd6:	4028      	ands	r0, r5
 8013fd8:	b2c5      	uxtb	r5, r0
 8013fda:	e77b      	b.n	8013ed4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08013fdc <uxr_serialize_OBJK_Subscriber_Binary>:
 8013fdc:	b570      	push	{r4, r5, r6, lr}
 8013fde:	460d      	mov	r5, r1
 8013fe0:	7809      	ldrb	r1, [r1, #0]
 8013fe2:	4606      	mov	r6, r0
 8013fe4:	f7f6 fce2 	bl	800a9ac <ucdr_serialize_bool>
 8013fe8:	782b      	ldrb	r3, [r5, #0]
 8013fea:	4604      	mov	r4, r0
 8013fec:	b94b      	cbnz	r3, 8014002 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8013fee:	7a29      	ldrb	r1, [r5, #8]
 8013ff0:	4630      	mov	r0, r6
 8013ff2:	f7f6 fcdb 	bl	800a9ac <ucdr_serialize_bool>
 8013ff6:	7a2b      	ldrb	r3, [r5, #8]
 8013ff8:	4004      	ands	r4, r0
 8013ffa:	b2e4      	uxtb	r4, r4
 8013ffc:	b943      	cbnz	r3, 8014010 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8013ffe:	4620      	mov	r0, r4
 8014000:	bd70      	pop	{r4, r5, r6, pc}
 8014002:	6869      	ldr	r1, [r5, #4]
 8014004:	4630      	mov	r0, r6
 8014006:	f003 ff83 	bl	8017f10 <ucdr_serialize_string>
 801400a:	4004      	ands	r4, r0
 801400c:	b2e4      	uxtb	r4, r4
 801400e:	e7ee      	b.n	8013fee <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8014010:	f105 010c 	add.w	r1, r5, #12
 8014014:	4630      	mov	r0, r6
 8014016:	f7ff ff53 	bl	8013ec0 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 801401a:	4004      	ands	r4, r0
 801401c:	4620      	mov	r0, r4
 801401e:	bd70      	pop	{r4, r5, r6, pc}

08014020 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8014020:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8014024:	4688      	mov	r8, r1
 8014026:	8809      	ldrh	r1, [r1, #0]
 8014028:	4681      	mov	r9, r0
 801402a:	f7f6 fd19 	bl	800aa60 <ucdr_serialize_uint16_t>
 801402e:	f898 1002 	ldrb.w	r1, [r8, #2]
 8014032:	4606      	mov	r6, r0
 8014034:	4648      	mov	r0, r9
 8014036:	f7f6 fcb9 	bl	800a9ac <ucdr_serialize_bool>
 801403a:	f898 3002 	ldrb.w	r3, [r8, #2]
 801403e:	4006      	ands	r6, r0
 8014040:	b2f5      	uxtb	r5, r6
 8014042:	b9eb      	cbnz	r3, 8014080 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8014044:	f898 1006 	ldrb.w	r1, [r8, #6]
 8014048:	4648      	mov	r0, r9
 801404a:	f7f6 fcaf 	bl	800a9ac <ucdr_serialize_bool>
 801404e:	f898 3006 	ldrb.w	r3, [r8, #6]
 8014052:	4005      	ands	r5, r0
 8014054:	bb7b      	cbnz	r3, 80140b6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8014056:	f898 100c 	ldrb.w	r1, [r8, #12]
 801405a:	4648      	mov	r0, r9
 801405c:	f7f6 fca6 	bl	800a9ac <ucdr_serialize_bool>
 8014060:	f898 300c 	ldrb.w	r3, [r8, #12]
 8014064:	4005      	ands	r5, r0
 8014066:	b9f3      	cbnz	r3, 80140a6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8014068:	f898 1014 	ldrb.w	r1, [r8, #20]
 801406c:	4648      	mov	r0, r9
 801406e:	f7f6 fc9d 	bl	800a9ac <ucdr_serialize_bool>
 8014072:	f898 3014 	ldrb.w	r3, [r8, #20]
 8014076:	4005      	ands	r5, r0
 8014078:	b94b      	cbnz	r3, 801408e <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801407a:	4628      	mov	r0, r5
 801407c:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8014080:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8014084:	4648      	mov	r0, r9
 8014086:	f7f6 fceb 	bl	800aa60 <ucdr_serialize_uint16_t>
 801408a:	4005      	ands	r5, r0
 801408c:	e7da      	b.n	8014044 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 801408e:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8014092:	f108 011c 	add.w	r1, r8, #28
 8014096:	4648      	mov	r0, r9
 8014098:	f7fc fe14 	bl	8010cc4 <ucdr_serialize_sequence_uint8_t>
 801409c:	4028      	ands	r0, r5
 801409e:	b2c5      	uxtb	r5, r0
 80140a0:	4628      	mov	r0, r5
 80140a2:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80140a6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80140aa:	4648      	mov	r0, r9
 80140ac:	f7f6 fec2 	bl	800ae34 <ucdr_serialize_uint32_t>
 80140b0:	4028      	ands	r0, r5
 80140b2:	b2c5      	uxtb	r5, r0
 80140b4:	e7d8      	b.n	8014068 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 80140b6:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80140ba:	4648      	mov	r0, r9
 80140bc:	f7f6 feba 	bl	800ae34 <ucdr_serialize_uint32_t>
 80140c0:	4028      	ands	r0, r5
 80140c2:	b2c5      	uxtb	r5, r0
 80140c4:	e7c7      	b.n	8014056 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 80140c6:	bf00      	nop

080140c8 <uxr_serialize_OBJK_DataReader_Binary>:
 80140c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140ca:	2202      	movs	r2, #2
 80140cc:	460c      	mov	r4, r1
 80140ce:	4606      	mov	r6, r0
 80140d0:	f7fc fc5a 	bl	8010988 <ucdr_serialize_array_uint8_t>
 80140d4:	78a1      	ldrb	r1, [r4, #2]
 80140d6:	4605      	mov	r5, r0
 80140d8:	4630      	mov	r0, r6
 80140da:	f7f6 fc67 	bl	800a9ac <ucdr_serialize_bool>
 80140de:	78a3      	ldrb	r3, [r4, #2]
 80140e0:	4005      	ands	r5, r0
 80140e2:	b2ed      	uxtb	r5, r5
 80140e4:	b90b      	cbnz	r3, 80140ea <uxr_serialize_OBJK_DataReader_Binary+0x22>
 80140e6:	4628      	mov	r0, r5
 80140e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140ea:	f104 0108 	add.w	r1, r4, #8
 80140ee:	4630      	mov	r0, r6
 80140f0:	f7ff ff96 	bl	8014020 <uxr_serialize_OBJK_Endpoint_QosBinary>
 80140f4:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80140f8:	4607      	mov	r7, r0
 80140fa:	4630      	mov	r0, r6
 80140fc:	f7f6 fc56 	bl	800a9ac <ucdr_serialize_bool>
 8014100:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8014104:	4038      	ands	r0, r7
 8014106:	b2c7      	uxtb	r7, r0
 8014108:	b95b      	cbnz	r3, 8014122 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 801410a:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 801410e:	4630      	mov	r0, r6
 8014110:	f7f6 fc4c 	bl	800a9ac <ucdr_serialize_bool>
 8014114:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8014118:	4007      	ands	r7, r0
 801411a:	b94b      	cbnz	r3, 8014130 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 801411c:	403d      	ands	r5, r7
 801411e:	4628      	mov	r0, r5
 8014120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014122:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 8014126:	4630      	mov	r0, r6
 8014128:	f7f7 f8da 	bl	800b2e0 <ucdr_serialize_uint64_t>
 801412c:	4007      	ands	r7, r0
 801412e:	e7ec      	b.n	801410a <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8014130:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8014132:	4630      	mov	r0, r6
 8014134:	f003 feec 	bl	8017f10 <ucdr_serialize_string>
 8014138:	4007      	ands	r7, r0
 801413a:	b2ff      	uxtb	r7, r7
 801413c:	e7ee      	b.n	801411c <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801413e:	bf00      	nop

08014140 <uxr_serialize_OBJK_DataWriter_Binary>:
 8014140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014142:	2202      	movs	r2, #2
 8014144:	460d      	mov	r5, r1
 8014146:	4606      	mov	r6, r0
 8014148:	f7fc fc1e 	bl	8010988 <ucdr_serialize_array_uint8_t>
 801414c:	78a9      	ldrb	r1, [r5, #2]
 801414e:	4604      	mov	r4, r0
 8014150:	4630      	mov	r0, r6
 8014152:	f7f6 fc2b 	bl	800a9ac <ucdr_serialize_bool>
 8014156:	78ab      	ldrb	r3, [r5, #2]
 8014158:	4004      	ands	r4, r0
 801415a:	b2e4      	uxtb	r4, r4
 801415c:	b90b      	cbnz	r3, 8014162 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801415e:	4620      	mov	r0, r4
 8014160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014162:	f105 0108 	add.w	r1, r5, #8
 8014166:	4630      	mov	r0, r6
 8014168:	f7ff ff5a 	bl	8014020 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801416c:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8014170:	4607      	mov	r7, r0
 8014172:	4630      	mov	r0, r6
 8014174:	f7f6 fc1a 	bl	800a9ac <ucdr_serialize_bool>
 8014178:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 801417c:	4038      	ands	r0, r7
 801417e:	b2c7      	uxtb	r7, r0
 8014180:	b913      	cbnz	r3, 8014188 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8014182:	403c      	ands	r4, r7
 8014184:	4620      	mov	r0, r4
 8014186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014188:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 801418c:	4630      	mov	r0, r6
 801418e:	f7f7 f8a7 	bl	800b2e0 <ucdr_serialize_uint64_t>
 8014192:	4007      	ands	r7, r0
 8014194:	e7f5      	b.n	8014182 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8014196:	bf00      	nop

08014198 <uxr_deserialize_ObjectVariant>:
 8014198:	b570      	push	{r4, r5, r6, lr}
 801419a:	4605      	mov	r5, r0
 801419c:	460e      	mov	r6, r1
 801419e:	f7f6 fc49 	bl	800aa34 <ucdr_deserialize_uint8_t>
 80141a2:	b168      	cbz	r0, 80141c0 <uxr_deserialize_ObjectVariant+0x28>
 80141a4:	7833      	ldrb	r3, [r6, #0]
 80141a6:	3b01      	subs	r3, #1
 80141a8:	4604      	mov	r4, r0
 80141aa:	2b0d      	cmp	r3, #13
 80141ac:	d809      	bhi.n	80141c2 <uxr_deserialize_ObjectVariant+0x2a>
 80141ae:	e8df f003 	tbb	[pc, r3]
 80141b2:	0a41      	.short	0x0a41
 80141b4:	0a0a2323 	.word	0x0a0a2323
 80141b8:	10080a0a 	.word	0x10080a0a
 80141bc:	565c1010 	.word	0x565c1010
 80141c0:	2400      	movs	r4, #0
 80141c2:	4620      	mov	r0, r4
 80141c4:	bd70      	pop	{r4, r5, r6, pc}
 80141c6:	1d31      	adds	r1, r6, #4
 80141c8:	4628      	mov	r0, r5
 80141ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80141ce:	f7ff bd55 	b.w	8013c7c <uxr_deserialize_DATAWRITER_Representation>
 80141d2:	1d31      	adds	r1, r6, #4
 80141d4:	4628      	mov	r0, r5
 80141d6:	f7f6 fc2d 	bl	800aa34 <ucdr_deserialize_uint8_t>
 80141da:	2800      	cmp	r0, #0
 80141dc:	d0f0      	beq.n	80141c0 <uxr_deserialize_ObjectVariant+0x28>
 80141de:	7933      	ldrb	r3, [r6, #4]
 80141e0:	2b01      	cmp	r3, #1
 80141e2:	d001      	beq.n	80141e8 <uxr_deserialize_ObjectVariant+0x50>
 80141e4:	2b02      	cmp	r3, #2
 80141e6:	d1ec      	bne.n	80141c2 <uxr_deserialize_ObjectVariant+0x2a>
 80141e8:	68b1      	ldr	r1, [r6, #8]
 80141ea:	4628      	mov	r0, r5
 80141ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80141f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80141f4:	f003 be9c 	b.w	8017f30 <ucdr_deserialize_string>
 80141f8:	1d31      	adds	r1, r6, #4
 80141fa:	4628      	mov	r0, r5
 80141fc:	f7f6 fc1a 	bl	800aa34 <ucdr_deserialize_uint8_t>
 8014200:	4604      	mov	r4, r0
 8014202:	b170      	cbz	r0, 8014222 <uxr_deserialize_ObjectVariant+0x8a>
 8014204:	7933      	ldrb	r3, [r6, #4]
 8014206:	2b02      	cmp	r3, #2
 8014208:	d04c      	beq.n	80142a4 <uxr_deserialize_ObjectVariant+0x10c>
 801420a:	2b03      	cmp	r3, #3
 801420c:	d109      	bne.n	8014222 <uxr_deserialize_ObjectVariant+0x8a>
 801420e:	f106 0308 	add.w	r3, r6, #8
 8014212:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014216:	f106 010c 	add.w	r1, r6, #12
 801421a:	4628      	mov	r0, r5
 801421c:	f7fc fd64 	bl	8010ce8 <ucdr_deserialize_sequence_uint8_t>
 8014220:	4604      	mov	r4, r0
 8014222:	2202      	movs	r2, #2
 8014224:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8014228:	4628      	mov	r0, r5
 801422a:	f7fc fc11 	bl	8010a50 <ucdr_deserialize_array_uint8_t>
 801422e:	4020      	ands	r0, r4
 8014230:	b2c4      	uxtb	r4, r0
 8014232:	e7c6      	b.n	80141c2 <uxr_deserialize_ObjectVariant+0x2a>
 8014234:	1d31      	adds	r1, r6, #4
 8014236:	4628      	mov	r0, r5
 8014238:	f7f6 fbfc 	bl	800aa34 <ucdr_deserialize_uint8_t>
 801423c:	4604      	mov	r4, r0
 801423e:	b130      	cbz	r0, 801424e <uxr_deserialize_ObjectVariant+0xb6>
 8014240:	7933      	ldrb	r3, [r6, #4]
 8014242:	2b02      	cmp	r3, #2
 8014244:	d036      	beq.n	80142b4 <uxr_deserialize_ObjectVariant+0x11c>
 8014246:	2b03      	cmp	r3, #3
 8014248:	d03c      	beq.n	80142c4 <uxr_deserialize_ObjectVariant+0x12c>
 801424a:	2b01      	cmp	r3, #1
 801424c:	d032      	beq.n	80142b4 <uxr_deserialize_ObjectVariant+0x11c>
 801424e:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8014252:	4628      	mov	r0, r5
 8014254:	f7f7 f994 	bl	800b580 <ucdr_deserialize_int16_t>
 8014258:	4020      	ands	r0, r4
 801425a:	b2c4      	uxtb	r4, r0
 801425c:	e7b1      	b.n	80141c2 <uxr_deserialize_ObjectVariant+0x2a>
 801425e:	1d31      	adds	r1, r6, #4
 8014260:	4628      	mov	r0, r5
 8014262:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014266:	f7ff bbbf 	b.w	80139e8 <uxr_deserialize_CLIENT_Representation>
 801426a:	2204      	movs	r2, #4
 801426c:	18b1      	adds	r1, r6, r2
 801426e:	4628      	mov	r0, r5
 8014270:	f7fc fbee 	bl	8010a50 <ucdr_deserialize_array_uint8_t>
 8014274:	2202      	movs	r2, #2
 8014276:	f106 0108 	add.w	r1, r6, #8
 801427a:	4604      	mov	r4, r0
 801427c:	4628      	mov	r0, r5
 801427e:	f7fc fbe7 	bl	8010a50 <ucdr_deserialize_array_uint8_t>
 8014282:	2202      	movs	r2, #2
 8014284:	4004      	ands	r4, r0
 8014286:	f106 010a 	add.w	r1, r6, #10
 801428a:	4628      	mov	r0, r5
 801428c:	f7fc fbe0 	bl	8010a50 <ucdr_deserialize_array_uint8_t>
 8014290:	b2e4      	uxtb	r4, r4
 8014292:	4603      	mov	r3, r0
 8014294:	f106 010c 	add.w	r1, r6, #12
 8014298:	4628      	mov	r0, r5
 801429a:	401c      	ands	r4, r3
 801429c:	f7f6 fb9c 	bl	800a9d8 <ucdr_deserialize_bool>
 80142a0:	4004      	ands	r4, r0
 80142a2:	e78e      	b.n	80141c2 <uxr_deserialize_ObjectVariant+0x2a>
 80142a4:	68b1      	ldr	r1, [r6, #8]
 80142a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80142aa:	4628      	mov	r0, r5
 80142ac:	f003 fe40 	bl	8017f30 <ucdr_deserialize_string>
 80142b0:	4604      	mov	r4, r0
 80142b2:	e7b6      	b.n	8014222 <uxr_deserialize_ObjectVariant+0x8a>
 80142b4:	68b1      	ldr	r1, [r6, #8]
 80142b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80142ba:	4628      	mov	r0, r5
 80142bc:	f003 fe38 	bl	8017f30 <ucdr_deserialize_string>
 80142c0:	4604      	mov	r4, r0
 80142c2:	e7c4      	b.n	801424e <uxr_deserialize_ObjectVariant+0xb6>
 80142c4:	f106 0308 	add.w	r3, r6, #8
 80142c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80142cc:	f106 010c 	add.w	r1, r6, #12
 80142d0:	4628      	mov	r0, r5
 80142d2:	f7fc fd09 	bl	8010ce8 <ucdr_deserialize_sequence_uint8_t>
 80142d6:	4604      	mov	r4, r0
 80142d8:	e7b9      	b.n	801424e <uxr_deserialize_ObjectVariant+0xb6>
 80142da:	bf00      	nop

080142dc <uxr_deserialize_BaseObjectRequest>:
 80142dc:	b570      	push	{r4, r5, r6, lr}
 80142de:	2202      	movs	r2, #2
 80142e0:	4605      	mov	r5, r0
 80142e2:	460e      	mov	r6, r1
 80142e4:	f7fc fbb4 	bl	8010a50 <ucdr_deserialize_array_uint8_t>
 80142e8:	2202      	movs	r2, #2
 80142ea:	4604      	mov	r4, r0
 80142ec:	18b1      	adds	r1, r6, r2
 80142ee:	4628      	mov	r0, r5
 80142f0:	f7fc fbae 	bl	8010a50 <ucdr_deserialize_array_uint8_t>
 80142f4:	4020      	ands	r0, r4
 80142f6:	b2c0      	uxtb	r0, r0
 80142f8:	bd70      	pop	{r4, r5, r6, pc}
 80142fa:	bf00      	nop

080142fc <uxr_serialize_ActivityInfoVariant>:
 80142fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014300:	460d      	mov	r5, r1
 8014302:	7809      	ldrb	r1, [r1, #0]
 8014304:	4607      	mov	r7, r0
 8014306:	f7f6 fb7f 	bl	800aa08 <ucdr_serialize_uint8_t>
 801430a:	4681      	mov	r9, r0
 801430c:	b138      	cbz	r0, 801431e <uxr_serialize_ActivityInfoVariant+0x22>
 801430e:	782b      	ldrb	r3, [r5, #0]
 8014310:	2b06      	cmp	r3, #6
 8014312:	f000 8082 	beq.w	801441a <uxr_serialize_ActivityInfoVariant+0x11e>
 8014316:	2b0d      	cmp	r3, #13
 8014318:	d016      	beq.n	8014348 <uxr_serialize_ActivityInfoVariant+0x4c>
 801431a:	2b05      	cmp	r3, #5
 801431c:	d002      	beq.n	8014324 <uxr_serialize_ActivityInfoVariant+0x28>
 801431e:	4648      	mov	r0, r9
 8014320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014324:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8014328:	4638      	mov	r0, r7
 801432a:	f7f7 f8a9 	bl	800b480 <ucdr_serialize_int16_t>
 801432e:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8014332:	4681      	mov	r9, r0
 8014334:	4638      	mov	r0, r7
 8014336:	f7f6 ffd3 	bl	800b2e0 <ucdr_serialize_uint64_t>
 801433a:	ea09 0000 	and.w	r0, r9, r0
 801433e:	fa5f f980 	uxtb.w	r9, r0
 8014342:	4648      	mov	r0, r9
 8014344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014348:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801434c:	4638      	mov	r0, r7
 801434e:	f7f7 f897 	bl	800b480 <ucdr_serialize_int16_t>
 8014352:	68e9      	ldr	r1, [r5, #12]
 8014354:	4681      	mov	r9, r0
 8014356:	4638      	mov	r0, r7
 8014358:	f7f6 fd6c 	bl	800ae34 <ucdr_serialize_uint32_t>
 801435c:	68eb      	ldr	r3, [r5, #12]
 801435e:	2b00      	cmp	r3, #0
 8014360:	d0eb      	beq.n	801433a <uxr_serialize_ActivityInfoVariant+0x3e>
 8014362:	b320      	cbz	r0, 80143ae <uxr_serialize_ActivityInfoVariant+0xb2>
 8014364:	f105 080c 	add.w	r8, r5, #12
 8014368:	2600      	movs	r6, #0
 801436a:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 801436e:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8014372:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8014376:	4638      	mov	r0, r7
 8014378:	f7f6 fb46 	bl	800aa08 <ucdr_serialize_uint8_t>
 801437c:	2800      	cmp	r0, #0
 801437e:	d053      	beq.n	8014428 <uxr_serialize_ActivityInfoVariant+0x12c>
 8014380:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8014384:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8014388:	0074      	lsls	r4, r6, #1
 801438a:	00c9      	lsls	r1, r1, #3
 801438c:	2b03      	cmp	r3, #3
 801438e:	d854      	bhi.n	801443a <uxr_serialize_ActivityInfoVariant+0x13e>
 8014390:	e8df f003 	tbb	[pc, r3]
 8014394:	02102132 	.word	0x02102132
 8014398:	4441      	add	r1, r8
 801439a:	4638      	mov	r0, r7
 801439c:	6889      	ldr	r1, [r1, #8]
 801439e:	f003 fdb7 	bl	8017f10 <ucdr_serialize_string>
 80143a2:	68ea      	ldr	r2, [r5, #12]
 80143a4:	3601      	adds	r6, #1
 80143a6:	4296      	cmp	r6, r2
 80143a8:	d242      	bcs.n	8014430 <uxr_serialize_ActivityInfoVariant+0x134>
 80143aa:	2800      	cmp	r0, #0
 80143ac:	d1dd      	bne.n	801436a <uxr_serialize_ActivityInfoVariant+0x6e>
 80143ae:	f04f 0900 	mov.w	r9, #0
 80143b2:	e7b4      	b.n	801431e <uxr_serialize_ActivityInfoVariant+0x22>
 80143b4:	3108      	adds	r1, #8
 80143b6:	4441      	add	r1, r8
 80143b8:	2210      	movs	r2, #16
 80143ba:	4638      	mov	r0, r7
 80143bc:	f7fc fae4 	bl	8010988 <ucdr_serialize_array_uint8_t>
 80143c0:	4434      	add	r4, r6
 80143c2:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80143c6:	4604      	mov	r4, r0
 80143c8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80143ca:	4638      	mov	r0, r7
 80143cc:	f7f6 fd32 	bl	800ae34 <ucdr_serialize_uint32_t>
 80143d0:	4020      	ands	r0, r4
 80143d2:	b2c0      	uxtb	r0, r0
 80143d4:	e7e5      	b.n	80143a2 <uxr_serialize_ActivityInfoVariant+0xa6>
 80143d6:	3108      	adds	r1, #8
 80143d8:	4441      	add	r1, r8
 80143da:	2204      	movs	r2, #4
 80143dc:	4638      	mov	r0, r7
 80143de:	f7fc fad3 	bl	8010988 <ucdr_serialize_array_uint8_t>
 80143e2:	4434      	add	r4, r6
 80143e4:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80143e8:	4604      	mov	r4, r0
 80143ea:	8b19      	ldrh	r1, [r3, #24]
 80143ec:	4638      	mov	r0, r7
 80143ee:	f7f6 fb37 	bl	800aa60 <ucdr_serialize_uint16_t>
 80143f2:	4020      	ands	r0, r4
 80143f4:	b2c0      	uxtb	r0, r0
 80143f6:	e7d4      	b.n	80143a2 <uxr_serialize_ActivityInfoVariant+0xa6>
 80143f8:	3108      	adds	r1, #8
 80143fa:	4441      	add	r1, r8
 80143fc:	2202      	movs	r2, #2
 80143fe:	4638      	mov	r0, r7
 8014400:	f7fc fac2 	bl	8010988 <ucdr_serialize_array_uint8_t>
 8014404:	4434      	add	r4, r6
 8014406:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801440a:	4604      	mov	r4, r0
 801440c:	7d99      	ldrb	r1, [r3, #22]
 801440e:	4638      	mov	r0, r7
 8014410:	f7f6 fafa 	bl	800aa08 <ucdr_serialize_uint8_t>
 8014414:	4020      	ands	r0, r4
 8014416:	b2c0      	uxtb	r0, r0
 8014418:	e7c3      	b.n	80143a2 <uxr_serialize_ActivityInfoVariant+0xa6>
 801441a:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801441e:	4638      	mov	r0, r7
 8014420:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014424:	f7f7 b82c 	b.w	800b480 <ucdr_serialize_int16_t>
 8014428:	68ea      	ldr	r2, [r5, #12]
 801442a:	3601      	adds	r6, #1
 801442c:	42b2      	cmp	r2, r6
 801442e:	d8be      	bhi.n	80143ae <uxr_serialize_ActivityInfoVariant+0xb2>
 8014430:	ea09 0900 	and.w	r9, r9, r0
 8014434:	fa5f f989 	uxtb.w	r9, r9
 8014438:	e771      	b.n	801431e <uxr_serialize_ActivityInfoVariant+0x22>
 801443a:	68eb      	ldr	r3, [r5, #12]
 801443c:	3601      	adds	r6, #1
 801443e:	429e      	cmp	r6, r3
 8014440:	f10a 0a18 	add.w	sl, sl, #24
 8014444:	d395      	bcc.n	8014372 <uxr_serialize_ActivityInfoVariant+0x76>
 8014446:	e76a      	b.n	801431e <uxr_serialize_ActivityInfoVariant+0x22>

08014448 <uxr_deserialize_BaseObjectReply>:
 8014448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801444c:	2202      	movs	r2, #2
 801444e:	4606      	mov	r6, r0
 8014450:	460f      	mov	r7, r1
 8014452:	f7fc fafd 	bl	8010a50 <ucdr_deserialize_array_uint8_t>
 8014456:	2202      	movs	r2, #2
 8014458:	18b9      	adds	r1, r7, r2
 801445a:	4605      	mov	r5, r0
 801445c:	4630      	mov	r0, r6
 801445e:	f7fc faf7 	bl	8010a50 <ucdr_deserialize_array_uint8_t>
 8014462:	1d39      	adds	r1, r7, #4
 8014464:	4680      	mov	r8, r0
 8014466:	4630      	mov	r0, r6
 8014468:	f7f6 fae4 	bl	800aa34 <ucdr_deserialize_uint8_t>
 801446c:	1d79      	adds	r1, r7, #5
 801446e:	4604      	mov	r4, r0
 8014470:	4630      	mov	r0, r6
 8014472:	f7f6 fadf 	bl	800aa34 <ucdr_deserialize_uint8_t>
 8014476:	ea05 0508 	and.w	r5, r5, r8
 801447a:	402c      	ands	r4, r5
 801447c:	4020      	ands	r0, r4
 801447e:	b2c0      	uxtb	r0, r0
 8014480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014484 <uxr_serialize_ReadSpecification>:
 8014484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014488:	460e      	mov	r6, r1
 801448a:	7809      	ldrb	r1, [r1, #0]
 801448c:	4607      	mov	r7, r0
 801448e:	f7f6 fabb 	bl	800aa08 <ucdr_serialize_uint8_t>
 8014492:	7871      	ldrb	r1, [r6, #1]
 8014494:	4604      	mov	r4, r0
 8014496:	4638      	mov	r0, r7
 8014498:	f7f6 fab6 	bl	800aa08 <ucdr_serialize_uint8_t>
 801449c:	78b1      	ldrb	r1, [r6, #2]
 801449e:	4004      	ands	r4, r0
 80144a0:	4638      	mov	r0, r7
 80144a2:	f7f6 fa83 	bl	800a9ac <ucdr_serialize_bool>
 80144a6:	78b3      	ldrb	r3, [r6, #2]
 80144a8:	b2e4      	uxtb	r4, r4
 80144aa:	4004      	ands	r4, r0
 80144ac:	b94b      	cbnz	r3, 80144c2 <uxr_serialize_ReadSpecification+0x3e>
 80144ae:	7a31      	ldrb	r1, [r6, #8]
 80144b0:	4638      	mov	r0, r7
 80144b2:	f7f6 fa7b 	bl	800a9ac <ucdr_serialize_bool>
 80144b6:	7a33      	ldrb	r3, [r6, #8]
 80144b8:	4004      	ands	r4, r0
 80144ba:	b943      	cbnz	r3, 80144ce <uxr_serialize_ReadSpecification+0x4a>
 80144bc:	4620      	mov	r0, r4
 80144be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144c2:	6871      	ldr	r1, [r6, #4]
 80144c4:	4638      	mov	r0, r7
 80144c6:	f003 fd23 	bl	8017f10 <ucdr_serialize_string>
 80144ca:	4004      	ands	r4, r0
 80144cc:	e7ef      	b.n	80144ae <uxr_serialize_ReadSpecification+0x2a>
 80144ce:	8971      	ldrh	r1, [r6, #10]
 80144d0:	4638      	mov	r0, r7
 80144d2:	f7f6 fac5 	bl	800aa60 <ucdr_serialize_uint16_t>
 80144d6:	89b1      	ldrh	r1, [r6, #12]
 80144d8:	4605      	mov	r5, r0
 80144da:	4638      	mov	r0, r7
 80144dc:	f7f6 fac0 	bl	800aa60 <ucdr_serialize_uint16_t>
 80144e0:	89f1      	ldrh	r1, [r6, #14]
 80144e2:	4005      	ands	r5, r0
 80144e4:	4638      	mov	r0, r7
 80144e6:	f7f6 fabb 	bl	800aa60 <ucdr_serialize_uint16_t>
 80144ea:	8a31      	ldrh	r1, [r6, #16]
 80144ec:	4680      	mov	r8, r0
 80144ee:	4638      	mov	r0, r7
 80144f0:	f7f6 fab6 	bl	800aa60 <ucdr_serialize_uint16_t>
 80144f4:	b2ed      	uxtb	r5, r5
 80144f6:	4025      	ands	r5, r4
 80144f8:	ea08 0505 	and.w	r5, r8, r5
 80144fc:	ea00 0405 	and.w	r4, r0, r5
 8014500:	4620      	mov	r0, r4
 8014502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014506:	bf00      	nop

08014508 <uxr_serialize_CREATE_CLIENT_Payload>:
 8014508:	f7ff ba16 	b.w	8013938 <uxr_serialize_CLIENT_Representation>

0801450c <uxr_serialize_CREATE_Payload>:
 801450c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801450e:	2202      	movs	r2, #2
 8014510:	4607      	mov	r7, r0
 8014512:	460e      	mov	r6, r1
 8014514:	f7fc fa38 	bl	8010988 <ucdr_serialize_array_uint8_t>
 8014518:	2202      	movs	r2, #2
 801451a:	18b1      	adds	r1, r6, r2
 801451c:	4605      	mov	r5, r0
 801451e:	4638      	mov	r0, r7
 8014520:	f7fc fa32 	bl	8010988 <ucdr_serialize_array_uint8_t>
 8014524:	7931      	ldrb	r1, [r6, #4]
 8014526:	4604      	mov	r4, r0
 8014528:	4638      	mov	r0, r7
 801452a:	f7f6 fa6d 	bl	800aa08 <ucdr_serialize_uint8_t>
 801452e:	b170      	cbz	r0, 801454e <uxr_serialize_CREATE_Payload+0x42>
 8014530:	7933      	ldrb	r3, [r6, #4]
 8014532:	402c      	ands	r4, r5
 8014534:	3b01      	subs	r3, #1
 8014536:	b2e4      	uxtb	r4, r4
 8014538:	2b0d      	cmp	r3, #13
 801453a:	d809      	bhi.n	8014550 <uxr_serialize_CREATE_Payload+0x44>
 801453c:	e8df f003 	tbb	[pc, r3]
 8014540:	23230a4c 	.word	0x23230a4c
 8014544:	0a0a0a0a 	.word	0x0a0a0a0a
 8014548:	12121208 	.word	0x12121208
 801454c:	3e45      	.short	0x3e45
 801454e:	2400      	movs	r4, #0
 8014550:	4620      	mov	r0, r4
 8014552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014554:	f106 0108 	add.w	r1, r6, #8
 8014558:	4638      	mov	r0, r7
 801455a:	f7ff faf3 	bl	8013b44 <uxr_serialize_DATAWRITER_Representation>
 801455e:	4004      	ands	r4, r0
 8014560:	4620      	mov	r0, r4
 8014562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014564:	7a31      	ldrb	r1, [r6, #8]
 8014566:	4638      	mov	r0, r7
 8014568:	f7f6 fa4e 	bl	800aa08 <ucdr_serialize_uint8_t>
 801456c:	2800      	cmp	r0, #0
 801456e:	d0ee      	beq.n	801454e <uxr_serialize_CREATE_Payload+0x42>
 8014570:	7a33      	ldrb	r3, [r6, #8]
 8014572:	2b01      	cmp	r3, #1
 8014574:	d001      	beq.n	801457a <uxr_serialize_CREATE_Payload+0x6e>
 8014576:	2b02      	cmp	r3, #2
 8014578:	d1ea      	bne.n	8014550 <uxr_serialize_CREATE_Payload+0x44>
 801457a:	68f1      	ldr	r1, [r6, #12]
 801457c:	4638      	mov	r0, r7
 801457e:	f003 fcc7 	bl	8017f10 <ucdr_serialize_string>
 8014582:	4004      	ands	r4, r0
 8014584:	e7e4      	b.n	8014550 <uxr_serialize_CREATE_Payload+0x44>
 8014586:	7a31      	ldrb	r1, [r6, #8]
 8014588:	4638      	mov	r0, r7
 801458a:	f7f6 fa3d 	bl	800aa08 <ucdr_serialize_uint8_t>
 801458e:	4605      	mov	r5, r0
 8014590:	b158      	cbz	r0, 80145aa <uxr_serialize_CREATE_Payload+0x9e>
 8014592:	7a33      	ldrb	r3, [r6, #8]
 8014594:	2b02      	cmp	r3, #2
 8014596:	d034      	beq.n	8014602 <uxr_serialize_CREATE_Payload+0xf6>
 8014598:	2b03      	cmp	r3, #3
 801459a:	d106      	bne.n	80145aa <uxr_serialize_CREATE_Payload+0x9e>
 801459c:	68f2      	ldr	r2, [r6, #12]
 801459e:	f106 0110 	add.w	r1, r6, #16
 80145a2:	4638      	mov	r0, r7
 80145a4:	f7fc fb8e 	bl	8010cc4 <ucdr_serialize_sequence_uint8_t>
 80145a8:	4605      	mov	r5, r0
 80145aa:	2202      	movs	r2, #2
 80145ac:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 80145b0:	4638      	mov	r0, r7
 80145b2:	f7fc f9e9 	bl	8010988 <ucdr_serialize_array_uint8_t>
 80145b6:	4028      	ands	r0, r5
 80145b8:	4004      	ands	r4, r0
 80145ba:	e7c9      	b.n	8014550 <uxr_serialize_CREATE_Payload+0x44>
 80145bc:	f106 0108 	add.w	r1, r6, #8
 80145c0:	4638      	mov	r0, r7
 80145c2:	f7ff f9b9 	bl	8013938 <uxr_serialize_CLIENT_Representation>
 80145c6:	4004      	ands	r4, r0
 80145c8:	e7c2      	b.n	8014550 <uxr_serialize_CREATE_Payload+0x44>
 80145ca:	f106 0108 	add.w	r1, r6, #8
 80145ce:	4638      	mov	r0, r7
 80145d0:	f7ff fa6e 	bl	8013ab0 <uxr_serialize_AGENT_Representation>
 80145d4:	4004      	ands	r4, r0
 80145d6:	e7bb      	b.n	8014550 <uxr_serialize_CREATE_Payload+0x44>
 80145d8:	7a31      	ldrb	r1, [r6, #8]
 80145da:	4638      	mov	r0, r7
 80145dc:	f7f6 fa14 	bl	800aa08 <ucdr_serialize_uint8_t>
 80145e0:	4605      	mov	r5, r0
 80145e2:	b130      	cbz	r0, 80145f2 <uxr_serialize_CREATE_Payload+0xe6>
 80145e4:	7a33      	ldrb	r3, [r6, #8]
 80145e6:	2b02      	cmp	r3, #2
 80145e8:	d011      	beq.n	801460e <uxr_serialize_CREATE_Payload+0x102>
 80145ea:	2b03      	cmp	r3, #3
 80145ec:	d015      	beq.n	801461a <uxr_serialize_CREATE_Payload+0x10e>
 80145ee:	2b01      	cmp	r3, #1
 80145f0:	d00d      	beq.n	801460e <uxr_serialize_CREATE_Payload+0x102>
 80145f2:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 80145f6:	4638      	mov	r0, r7
 80145f8:	f7f6 ff42 	bl	800b480 <ucdr_serialize_int16_t>
 80145fc:	4028      	ands	r0, r5
 80145fe:	4004      	ands	r4, r0
 8014600:	e7a6      	b.n	8014550 <uxr_serialize_CREATE_Payload+0x44>
 8014602:	68f1      	ldr	r1, [r6, #12]
 8014604:	4638      	mov	r0, r7
 8014606:	f003 fc83 	bl	8017f10 <ucdr_serialize_string>
 801460a:	4605      	mov	r5, r0
 801460c:	e7cd      	b.n	80145aa <uxr_serialize_CREATE_Payload+0x9e>
 801460e:	68f1      	ldr	r1, [r6, #12]
 8014610:	4638      	mov	r0, r7
 8014612:	f003 fc7d 	bl	8017f10 <ucdr_serialize_string>
 8014616:	4605      	mov	r5, r0
 8014618:	e7eb      	b.n	80145f2 <uxr_serialize_CREATE_Payload+0xe6>
 801461a:	68f2      	ldr	r2, [r6, #12]
 801461c:	f106 0110 	add.w	r1, r6, #16
 8014620:	4638      	mov	r0, r7
 8014622:	f7fc fb4f 	bl	8010cc4 <ucdr_serialize_sequence_uint8_t>
 8014626:	4605      	mov	r5, r0
 8014628:	e7e3      	b.n	80145f2 <uxr_serialize_CREATE_Payload+0xe6>
 801462a:	bf00      	nop

0801462c <uxr_serialize_GET_INFO_Payload>:
 801462c:	b570      	push	{r4, r5, r6, lr}
 801462e:	2202      	movs	r2, #2
 8014630:	4605      	mov	r5, r0
 8014632:	460e      	mov	r6, r1
 8014634:	f7fc f9a8 	bl	8010988 <ucdr_serialize_array_uint8_t>
 8014638:	2202      	movs	r2, #2
 801463a:	18b1      	adds	r1, r6, r2
 801463c:	4604      	mov	r4, r0
 801463e:	4628      	mov	r0, r5
 8014640:	f7fc f9a2 	bl	8010988 <ucdr_serialize_array_uint8_t>
 8014644:	6871      	ldr	r1, [r6, #4]
 8014646:	4004      	ands	r4, r0
 8014648:	4628      	mov	r0, r5
 801464a:	f7f6 fbf3 	bl	800ae34 <ucdr_serialize_uint32_t>
 801464e:	b2e4      	uxtb	r4, r4
 8014650:	4020      	ands	r0, r4
 8014652:	bd70      	pop	{r4, r5, r6, pc}

08014654 <uxr_deserialize_GET_INFO_Payload>:
 8014654:	b570      	push	{r4, r5, r6, lr}
 8014656:	2202      	movs	r2, #2
 8014658:	4605      	mov	r5, r0
 801465a:	460e      	mov	r6, r1
 801465c:	f7fc f9f8 	bl	8010a50 <ucdr_deserialize_array_uint8_t>
 8014660:	2202      	movs	r2, #2
 8014662:	18b1      	adds	r1, r6, r2
 8014664:	4604      	mov	r4, r0
 8014666:	4628      	mov	r0, r5
 8014668:	f7fc f9f2 	bl	8010a50 <ucdr_deserialize_array_uint8_t>
 801466c:	1d31      	adds	r1, r6, #4
 801466e:	4004      	ands	r4, r0
 8014670:	4628      	mov	r0, r5
 8014672:	f7f6 fd0f 	bl	800b094 <ucdr_deserialize_uint32_t>
 8014676:	b2e4      	uxtb	r4, r4
 8014678:	4020      	ands	r0, r4
 801467a:	bd70      	pop	{r4, r5, r6, pc}

0801467c <uxr_serialize_DELETE_Payload>:
 801467c:	b570      	push	{r4, r5, r6, lr}
 801467e:	2202      	movs	r2, #2
 8014680:	4605      	mov	r5, r0
 8014682:	460e      	mov	r6, r1
 8014684:	f7fc f980 	bl	8010988 <ucdr_serialize_array_uint8_t>
 8014688:	2202      	movs	r2, #2
 801468a:	4604      	mov	r4, r0
 801468c:	18b1      	adds	r1, r6, r2
 801468e:	4628      	mov	r0, r5
 8014690:	f7fc f97a 	bl	8010988 <ucdr_serialize_array_uint8_t>
 8014694:	4020      	ands	r0, r4
 8014696:	b2c0      	uxtb	r0, r0
 8014698:	bd70      	pop	{r4, r5, r6, pc}
 801469a:	bf00      	nop

0801469c <uxr_deserialize_STATUS_AGENT_Payload>:
 801469c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146a0:	4605      	mov	r5, r0
 80146a2:	460e      	mov	r6, r1
 80146a4:	f7f6 f9c6 	bl	800aa34 <ucdr_deserialize_uint8_t>
 80146a8:	1c71      	adds	r1, r6, #1
 80146aa:	4604      	mov	r4, r0
 80146ac:	4628      	mov	r0, r5
 80146ae:	f7f6 f9c1 	bl	800aa34 <ucdr_deserialize_uint8_t>
 80146b2:	2204      	movs	r2, #4
 80146b4:	18b1      	adds	r1, r6, r2
 80146b6:	4680      	mov	r8, r0
 80146b8:	4628      	mov	r0, r5
 80146ba:	f7fc f9c9 	bl	8010a50 <ucdr_deserialize_array_uint8_t>
 80146be:	f106 0108 	add.w	r1, r6, #8
 80146c2:	4607      	mov	r7, r0
 80146c4:	2202      	movs	r2, #2
 80146c6:	4628      	mov	r0, r5
 80146c8:	f7fc f9c2 	bl	8010a50 <ucdr_deserialize_array_uint8_t>
 80146cc:	ea04 0308 	and.w	r3, r4, r8
 80146d0:	b2db      	uxtb	r3, r3
 80146d2:	ea03 0407 	and.w	r4, r3, r7
 80146d6:	2202      	movs	r2, #2
 80146d8:	4607      	mov	r7, r0
 80146da:	f106 010a 	add.w	r1, r6, #10
 80146de:	4628      	mov	r0, r5
 80146e0:	f7fc f9b6 	bl	8010a50 <ucdr_deserialize_array_uint8_t>
 80146e4:	f106 010c 	add.w	r1, r6, #12
 80146e8:	4603      	mov	r3, r0
 80146ea:	4628      	mov	r0, r5
 80146ec:	461d      	mov	r5, r3
 80146ee:	f7f6 f973 	bl	800a9d8 <ucdr_deserialize_bool>
 80146f2:	403c      	ands	r4, r7
 80146f4:	4025      	ands	r5, r4
 80146f6:	4028      	ands	r0, r5
 80146f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080146fc <uxr_deserialize_STATUS_Payload>:
 80146fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014700:	2202      	movs	r2, #2
 8014702:	4606      	mov	r6, r0
 8014704:	460f      	mov	r7, r1
 8014706:	f7fc f9a3 	bl	8010a50 <ucdr_deserialize_array_uint8_t>
 801470a:	2202      	movs	r2, #2
 801470c:	18b9      	adds	r1, r7, r2
 801470e:	4605      	mov	r5, r0
 8014710:	4630      	mov	r0, r6
 8014712:	f7fc f99d 	bl	8010a50 <ucdr_deserialize_array_uint8_t>
 8014716:	1d39      	adds	r1, r7, #4
 8014718:	4680      	mov	r8, r0
 801471a:	4630      	mov	r0, r6
 801471c:	f7f6 f98a 	bl	800aa34 <ucdr_deserialize_uint8_t>
 8014720:	1d79      	adds	r1, r7, #5
 8014722:	4604      	mov	r4, r0
 8014724:	4630      	mov	r0, r6
 8014726:	f7f6 f985 	bl	800aa34 <ucdr_deserialize_uint8_t>
 801472a:	ea05 0508 	and.w	r5, r5, r8
 801472e:	402c      	ands	r4, r5
 8014730:	4020      	ands	r0, r4
 8014732:	b2c0      	uxtb	r0, r0
 8014734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014738 <uxr_serialize_INFO_Payload>:
 8014738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801473c:	2202      	movs	r2, #2
 801473e:	460c      	mov	r4, r1
 8014740:	4605      	mov	r5, r0
 8014742:	f7fc f921 	bl	8010988 <ucdr_serialize_array_uint8_t>
 8014746:	2202      	movs	r2, #2
 8014748:	18a1      	adds	r1, r4, r2
 801474a:	4680      	mov	r8, r0
 801474c:	4628      	mov	r0, r5
 801474e:	f7fc f91b 	bl	8010988 <ucdr_serialize_array_uint8_t>
 8014752:	7921      	ldrb	r1, [r4, #4]
 8014754:	4607      	mov	r7, r0
 8014756:	4628      	mov	r0, r5
 8014758:	f7f6 f956 	bl	800aa08 <ucdr_serialize_uint8_t>
 801475c:	7961      	ldrb	r1, [r4, #5]
 801475e:	4606      	mov	r6, r0
 8014760:	4628      	mov	r0, r5
 8014762:	f7f6 f951 	bl	800aa08 <ucdr_serialize_uint8_t>
 8014766:	ea08 0807 	and.w	r8, r8, r7
 801476a:	ea06 0608 	and.w	r6, r6, r8
 801476e:	4006      	ands	r6, r0
 8014770:	7a21      	ldrb	r1, [r4, #8]
 8014772:	4628      	mov	r0, r5
 8014774:	f7f6 f91a 	bl	800a9ac <ucdr_serialize_bool>
 8014778:	7a23      	ldrb	r3, [r4, #8]
 801477a:	b2f7      	uxtb	r7, r6
 801477c:	4606      	mov	r6, r0
 801477e:	b96b      	cbnz	r3, 801479c <uxr_serialize_INFO_Payload+0x64>
 8014780:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8014784:	4628      	mov	r0, r5
 8014786:	f7f6 f911 	bl	800a9ac <ucdr_serialize_bool>
 801478a:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 801478e:	4030      	ands	r0, r6
 8014790:	b2c6      	uxtb	r6, r0
 8014792:	b983      	cbnz	r3, 80147b6 <uxr_serialize_INFO_Payload+0x7e>
 8014794:	ea06 0007 	and.w	r0, r6, r7
 8014798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801479c:	7b21      	ldrb	r1, [r4, #12]
 801479e:	4628      	mov	r0, r5
 80147a0:	f7f6 f932 	bl	800aa08 <ucdr_serialize_uint8_t>
 80147a4:	b188      	cbz	r0, 80147ca <uxr_serialize_INFO_Payload+0x92>
 80147a6:	f104 010c 	add.w	r1, r4, #12
 80147aa:	4628      	mov	r0, r5
 80147ac:	f7ff f9f2 	bl	8013b94 <uxr_serialize_ObjectVariant.part.0>
 80147b0:	4030      	ands	r0, r6
 80147b2:	b2c6      	uxtb	r6, r0
 80147b4:	e7e4      	b.n	8014780 <uxr_serialize_INFO_Payload+0x48>
 80147b6:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 80147ba:	4628      	mov	r0, r5
 80147bc:	f7ff fd9e 	bl	80142fc <uxr_serialize_ActivityInfoVariant>
 80147c0:	4006      	ands	r6, r0
 80147c2:	ea06 0007 	and.w	r0, r6, r7
 80147c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147ca:	4606      	mov	r6, r0
 80147cc:	e7d8      	b.n	8014780 <uxr_serialize_INFO_Payload+0x48>
 80147ce:	bf00      	nop

080147d0 <uxr_serialize_READ_DATA_Payload>:
 80147d0:	b570      	push	{r4, r5, r6, lr}
 80147d2:	2202      	movs	r2, #2
 80147d4:	4605      	mov	r5, r0
 80147d6:	460e      	mov	r6, r1
 80147d8:	f7fc f8d6 	bl	8010988 <ucdr_serialize_array_uint8_t>
 80147dc:	2202      	movs	r2, #2
 80147de:	18b1      	adds	r1, r6, r2
 80147e0:	4604      	mov	r4, r0
 80147e2:	4628      	mov	r0, r5
 80147e4:	f7fc f8d0 	bl	8010988 <ucdr_serialize_array_uint8_t>
 80147e8:	1d31      	adds	r1, r6, #4
 80147ea:	4004      	ands	r4, r0
 80147ec:	4628      	mov	r0, r5
 80147ee:	f7ff fe49 	bl	8014484 <uxr_serialize_ReadSpecification>
 80147f2:	b2e4      	uxtb	r4, r4
 80147f4:	4020      	ands	r0, r4
 80147f6:	bd70      	pop	{r4, r5, r6, pc}

080147f8 <uxr_serialize_WRITE_DATA_Payload_Data>:
 80147f8:	b570      	push	{r4, r5, r6, lr}
 80147fa:	2202      	movs	r2, #2
 80147fc:	4605      	mov	r5, r0
 80147fe:	460e      	mov	r6, r1
 8014800:	f7fc f8c2 	bl	8010988 <ucdr_serialize_array_uint8_t>
 8014804:	2202      	movs	r2, #2
 8014806:	4604      	mov	r4, r0
 8014808:	18b1      	adds	r1, r6, r2
 801480a:	4628      	mov	r0, r5
 801480c:	f7fc f8bc 	bl	8010988 <ucdr_serialize_array_uint8_t>
 8014810:	4020      	ands	r0, r4
 8014812:	b2c0      	uxtb	r0, r0
 8014814:	bd70      	pop	{r4, r5, r6, pc}
 8014816:	bf00      	nop

08014818 <uxr_serialize_ACKNACK_Payload>:
 8014818:	b570      	push	{r4, r5, r6, lr}
 801481a:	460c      	mov	r4, r1
 801481c:	460e      	mov	r6, r1
 801481e:	f834 1b02 	ldrh.w	r1, [r4], #2
 8014822:	4605      	mov	r5, r0
 8014824:	f7f6 f91c 	bl	800aa60 <ucdr_serialize_uint16_t>
 8014828:	2202      	movs	r2, #2
 801482a:	4621      	mov	r1, r4
 801482c:	4604      	mov	r4, r0
 801482e:	4628      	mov	r0, r5
 8014830:	f7fc f8aa 	bl	8010988 <ucdr_serialize_array_uint8_t>
 8014834:	7931      	ldrb	r1, [r6, #4]
 8014836:	4004      	ands	r4, r0
 8014838:	4628      	mov	r0, r5
 801483a:	f7f6 f8e5 	bl	800aa08 <ucdr_serialize_uint8_t>
 801483e:	b2e4      	uxtb	r4, r4
 8014840:	4020      	ands	r0, r4
 8014842:	bd70      	pop	{r4, r5, r6, pc}

08014844 <uxr_deserialize_ACKNACK_Payload>:
 8014844:	b570      	push	{r4, r5, r6, lr}
 8014846:	4605      	mov	r5, r0
 8014848:	460e      	mov	r6, r1
 801484a:	f7f6 fa09 	bl	800ac60 <ucdr_deserialize_uint16_t>
 801484e:	2202      	movs	r2, #2
 8014850:	18b1      	adds	r1, r6, r2
 8014852:	4604      	mov	r4, r0
 8014854:	4628      	mov	r0, r5
 8014856:	f7fc f8fb 	bl	8010a50 <ucdr_deserialize_array_uint8_t>
 801485a:	1d31      	adds	r1, r6, #4
 801485c:	4004      	ands	r4, r0
 801485e:	4628      	mov	r0, r5
 8014860:	f7f6 f8e8 	bl	800aa34 <ucdr_deserialize_uint8_t>
 8014864:	b2e4      	uxtb	r4, r4
 8014866:	4020      	ands	r0, r4
 8014868:	bd70      	pop	{r4, r5, r6, pc}
 801486a:	bf00      	nop

0801486c <uxr_serialize_HEARTBEAT_Payload>:
 801486c:	b570      	push	{r4, r5, r6, lr}
 801486e:	460d      	mov	r5, r1
 8014870:	8809      	ldrh	r1, [r1, #0]
 8014872:	4606      	mov	r6, r0
 8014874:	f7f6 f8f4 	bl	800aa60 <ucdr_serialize_uint16_t>
 8014878:	8869      	ldrh	r1, [r5, #2]
 801487a:	4604      	mov	r4, r0
 801487c:	4630      	mov	r0, r6
 801487e:	f7f6 f8ef 	bl	800aa60 <ucdr_serialize_uint16_t>
 8014882:	7929      	ldrb	r1, [r5, #4]
 8014884:	4004      	ands	r4, r0
 8014886:	4630      	mov	r0, r6
 8014888:	f7f6 f8be 	bl	800aa08 <ucdr_serialize_uint8_t>
 801488c:	b2e4      	uxtb	r4, r4
 801488e:	4020      	ands	r0, r4
 8014890:	bd70      	pop	{r4, r5, r6, pc}
 8014892:	bf00      	nop

08014894 <uxr_deserialize_HEARTBEAT_Payload>:
 8014894:	b570      	push	{r4, r5, r6, lr}
 8014896:	4605      	mov	r5, r0
 8014898:	460e      	mov	r6, r1
 801489a:	f7f6 f9e1 	bl	800ac60 <ucdr_deserialize_uint16_t>
 801489e:	1cb1      	adds	r1, r6, #2
 80148a0:	4604      	mov	r4, r0
 80148a2:	4628      	mov	r0, r5
 80148a4:	f7f6 f9dc 	bl	800ac60 <ucdr_deserialize_uint16_t>
 80148a8:	1d31      	adds	r1, r6, #4
 80148aa:	4004      	ands	r4, r0
 80148ac:	4628      	mov	r0, r5
 80148ae:	f7f6 f8c1 	bl	800aa34 <ucdr_deserialize_uint8_t>
 80148b2:	b2e4      	uxtb	r4, r4
 80148b4:	4020      	ands	r0, r4
 80148b6:	bd70      	pop	{r4, r5, r6, pc}

080148b8 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80148b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148bc:	4605      	mov	r5, r0
 80148be:	460e      	mov	r6, r1
 80148c0:	f7f6 ff6a 	bl	800b798 <ucdr_deserialize_int32_t>
 80148c4:	1d31      	adds	r1, r6, #4
 80148c6:	4607      	mov	r7, r0
 80148c8:	4628      	mov	r0, r5
 80148ca:	f7f6 fbe3 	bl	800b094 <ucdr_deserialize_uint32_t>
 80148ce:	f106 0108 	add.w	r1, r6, #8
 80148d2:	4680      	mov	r8, r0
 80148d4:	4628      	mov	r0, r5
 80148d6:	f7f6 ff5f 	bl	800b798 <ucdr_deserialize_int32_t>
 80148da:	f106 010c 	add.w	r1, r6, #12
 80148de:	4604      	mov	r4, r0
 80148e0:	4628      	mov	r0, r5
 80148e2:	f7f6 fbd7 	bl	800b094 <ucdr_deserialize_uint32_t>
 80148e6:	ea07 0708 	and.w	r7, r7, r8
 80148ea:	403c      	ands	r4, r7
 80148ec:	f106 0110 	add.w	r1, r6, #16
 80148f0:	4004      	ands	r4, r0
 80148f2:	4628      	mov	r0, r5
 80148f4:	f7f6 ff50 	bl	800b798 <ucdr_deserialize_int32_t>
 80148f8:	f106 0114 	add.w	r1, r6, #20
 80148fc:	4607      	mov	r7, r0
 80148fe:	4628      	mov	r0, r5
 8014900:	f7f6 fbc8 	bl	800b094 <ucdr_deserialize_uint32_t>
 8014904:	b2e4      	uxtb	r4, r4
 8014906:	403c      	ands	r4, r7
 8014908:	4020      	ands	r0, r4
 801490a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801490e:	bf00      	nop

08014910 <uxr_serialize_SampleIdentity>:
 8014910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014914:	220c      	movs	r2, #12
 8014916:	4604      	mov	r4, r0
 8014918:	460d      	mov	r5, r1
 801491a:	f7fc f835 	bl	8010988 <ucdr_serialize_array_uint8_t>
 801491e:	2203      	movs	r2, #3
 8014920:	f105 010c 	add.w	r1, r5, #12
 8014924:	4607      	mov	r7, r0
 8014926:	4620      	mov	r0, r4
 8014928:	f7fc f82e 	bl	8010988 <ucdr_serialize_array_uint8_t>
 801492c:	7be9      	ldrb	r1, [r5, #15]
 801492e:	4680      	mov	r8, r0
 8014930:	4620      	mov	r0, r4
 8014932:	f7f6 f869 	bl	800aa08 <ucdr_serialize_uint8_t>
 8014936:	6929      	ldr	r1, [r5, #16]
 8014938:	4606      	mov	r6, r0
 801493a:	4620      	mov	r0, r4
 801493c:	f7f6 fe94 	bl	800b668 <ucdr_serialize_int32_t>
 8014940:	6969      	ldr	r1, [r5, #20]
 8014942:	4603      	mov	r3, r0
 8014944:	4620      	mov	r0, r4
 8014946:	ea07 0708 	and.w	r7, r7, r8
 801494a:	461c      	mov	r4, r3
 801494c:	f7f6 fa72 	bl	800ae34 <ucdr_serialize_uint32_t>
 8014950:	403e      	ands	r6, r7
 8014952:	4034      	ands	r4, r6
 8014954:	4020      	ands	r0, r4
 8014956:	b2c0      	uxtb	r0, r0
 8014958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801495c <uxr_deserialize_SampleIdentity>:
 801495c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014960:	220c      	movs	r2, #12
 8014962:	4604      	mov	r4, r0
 8014964:	460d      	mov	r5, r1
 8014966:	f7fc f873 	bl	8010a50 <ucdr_deserialize_array_uint8_t>
 801496a:	2203      	movs	r2, #3
 801496c:	f105 010c 	add.w	r1, r5, #12
 8014970:	4607      	mov	r7, r0
 8014972:	4620      	mov	r0, r4
 8014974:	f7fc f86c 	bl	8010a50 <ucdr_deserialize_array_uint8_t>
 8014978:	f105 010f 	add.w	r1, r5, #15
 801497c:	4680      	mov	r8, r0
 801497e:	4620      	mov	r0, r4
 8014980:	f7f6 f858 	bl	800aa34 <ucdr_deserialize_uint8_t>
 8014984:	f105 0110 	add.w	r1, r5, #16
 8014988:	4606      	mov	r6, r0
 801498a:	4620      	mov	r0, r4
 801498c:	f7f6 ff04 	bl	800b798 <ucdr_deserialize_int32_t>
 8014990:	f105 0114 	add.w	r1, r5, #20
 8014994:	4603      	mov	r3, r0
 8014996:	4620      	mov	r0, r4
 8014998:	ea07 0708 	and.w	r7, r7, r8
 801499c:	461c      	mov	r4, r3
 801499e:	f7f6 fb79 	bl	800b094 <ucdr_deserialize_uint32_t>
 80149a2:	403e      	ands	r6, r7
 80149a4:	4034      	ands	r4, r6
 80149a6:	4020      	ands	r0, r4
 80149a8:	b2c0      	uxtb	r0, r0
 80149aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149ae:	bf00      	nop

080149b0 <nav_msgs__msg__Odometry__init>:
 80149b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149b4:	4605      	mov	r5, r0
 80149b6:	b3c0      	cbz	r0, 8014a2a <nav_msgs__msg__Odometry__init+0x7a>
 80149b8:	f003 f8e8 	bl	8017b8c <std_msgs__msg__Header__init>
 80149bc:	4604      	mov	r4, r0
 80149be:	b310      	cbz	r0, 8014a06 <nav_msgs__msg__Odometry__init+0x56>
 80149c0:	f105 0614 	add.w	r6, r5, #20
 80149c4:	4630      	mov	r0, r6
 80149c6:	f003 f883 	bl	8017ad0 <rosidl_runtime_c__String__init>
 80149ca:	4604      	mov	r4, r0
 80149cc:	2800      	cmp	r0, #0
 80149ce:	d040      	beq.n	8014a52 <nav_msgs__msg__Odometry__init+0xa2>
 80149d0:	f105 0720 	add.w	r7, r5, #32
 80149d4:	4638      	mov	r0, r7
 80149d6:	f003 f915 	bl	8017c04 <geometry_msgs__msg__PoseWithCovariance__init>
 80149da:	4604      	mov	r4, r0
 80149dc:	b348      	cbz	r0, 8014a32 <nav_msgs__msg__Odometry__init+0x82>
 80149de:	f505 78bc 	add.w	r8, r5, #376	@ 0x178
 80149e2:	4640      	mov	r0, r8
 80149e4:	f003 f924 	bl	8017c30 <geometry_msgs__msg__TwistWithCovariance__init>
 80149e8:	4604      	mov	r4, r0
 80149ea:	b9d8      	cbnz	r0, 8014a24 <nav_msgs__msg__Odometry__init+0x74>
 80149ec:	4628      	mov	r0, r5
 80149ee:	f003 f8f1 	bl	8017bd4 <std_msgs__msg__Header__fini>
 80149f2:	4630      	mov	r0, r6
 80149f4:	f003 f882 	bl	8017afc <rosidl_runtime_c__String__fini>
 80149f8:	4638      	mov	r0, r7
 80149fa:	f003 f915 	bl	8017c28 <geometry_msgs__msg__PoseWithCovariance__fini>
 80149fe:	4640      	mov	r0, r8
 8014a00:	f003 f928 	bl	8017c54 <geometry_msgs__msg__TwistWithCovariance__fini>
 8014a04:	e00e      	b.n	8014a24 <nav_msgs__msg__Odometry__init+0x74>
 8014a06:	4628      	mov	r0, r5
 8014a08:	f003 f8e4 	bl	8017bd4 <std_msgs__msg__Header__fini>
 8014a0c:	f105 0014 	add.w	r0, r5, #20
 8014a10:	f003 f874 	bl	8017afc <rosidl_runtime_c__String__fini>
 8014a14:	f105 0020 	add.w	r0, r5, #32
 8014a18:	f003 f906 	bl	8017c28 <geometry_msgs__msg__PoseWithCovariance__fini>
 8014a1c:	f505 70bc 	add.w	r0, r5, #376	@ 0x178
 8014a20:	f003 f918 	bl	8017c54 <geometry_msgs__msg__TwistWithCovariance__fini>
 8014a24:	4620      	mov	r0, r4
 8014a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a2a:	4604      	mov	r4, r0
 8014a2c:	4620      	mov	r0, r4
 8014a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a32:	4628      	mov	r0, r5
 8014a34:	f003 f8ce 	bl	8017bd4 <std_msgs__msg__Header__fini>
 8014a38:	4630      	mov	r0, r6
 8014a3a:	f003 f85f 	bl	8017afc <rosidl_runtime_c__String__fini>
 8014a3e:	4638      	mov	r0, r7
 8014a40:	f003 f8f2 	bl	8017c28 <geometry_msgs__msg__PoseWithCovariance__fini>
 8014a44:	f505 70bc 	add.w	r0, r5, #376	@ 0x178
 8014a48:	f003 f904 	bl	8017c54 <geometry_msgs__msg__TwistWithCovariance__fini>
 8014a4c:	4620      	mov	r0, r4
 8014a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a52:	4628      	mov	r0, r5
 8014a54:	f003 f8be 	bl	8017bd4 <std_msgs__msg__Header__fini>
 8014a58:	4630      	mov	r0, r6
 8014a5a:	e7d9      	b.n	8014a10 <nav_msgs__msg__Odometry__init+0x60>

08014a5c <nav_msgs__msg__Odometry__fini>:
 8014a5c:	b188      	cbz	r0, 8014a82 <nav_msgs__msg__Odometry__fini+0x26>
 8014a5e:	b510      	push	{r4, lr}
 8014a60:	4604      	mov	r4, r0
 8014a62:	f003 f8b7 	bl	8017bd4 <std_msgs__msg__Header__fini>
 8014a66:	f104 0014 	add.w	r0, r4, #20
 8014a6a:	f003 f847 	bl	8017afc <rosidl_runtime_c__String__fini>
 8014a6e:	f104 0020 	add.w	r0, r4, #32
 8014a72:	f003 f8d9 	bl	8017c28 <geometry_msgs__msg__PoseWithCovariance__fini>
 8014a76:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 8014a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014a7e:	f003 b8e9 	b.w	8017c54 <geometry_msgs__msg__TwistWithCovariance__fini>
 8014a82:	4770      	bx	lr

08014a84 <rcl_client_get_rmw_handle>:
 8014a84:	b118      	cbz	r0, 8014a8e <rcl_client_get_rmw_handle+0xa>
 8014a86:	6800      	ldr	r0, [r0, #0]
 8014a88:	b108      	cbz	r0, 8014a8e <rcl_client_get_rmw_handle+0xa>
 8014a8a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8014a8e:	4770      	bx	lr

08014a90 <rcl_send_request>:
 8014a90:	b570      	push	{r4, r5, r6, lr}
 8014a92:	b082      	sub	sp, #8
 8014a94:	b1e8      	cbz	r0, 8014ad2 <rcl_send_request+0x42>
 8014a96:	4604      	mov	r4, r0
 8014a98:	6800      	ldr	r0, [r0, #0]
 8014a9a:	b1d0      	cbz	r0, 8014ad2 <rcl_send_request+0x42>
 8014a9c:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8014aa0:	b1bb      	cbz	r3, 8014ad2 <rcl_send_request+0x42>
 8014aa2:	460e      	mov	r6, r1
 8014aa4:	b1d1      	cbz	r1, 8014adc <rcl_send_request+0x4c>
 8014aa6:	4615      	mov	r5, r2
 8014aa8:	b1c2      	cbz	r2, 8014adc <rcl_send_request+0x4c>
 8014aaa:	2105      	movs	r1, #5
 8014aac:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8014ab0:	f7f9 fca8 	bl	800e404 <__atomic_load_8>
 8014ab4:	6823      	ldr	r3, [r4, #0]
 8014ab6:	e9c5 0100 	strd	r0, r1, [r5]
 8014aba:	462a      	mov	r2, r5
 8014abc:	4631      	mov	r1, r6
 8014abe:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8014ac2:	f002 fcff 	bl	80174c4 <rmw_send_request>
 8014ac6:	4606      	mov	r6, r0
 8014ac8:	b160      	cbz	r0, 8014ae4 <rcl_send_request+0x54>
 8014aca:	2601      	movs	r6, #1
 8014acc:	4630      	mov	r0, r6
 8014ace:	b002      	add	sp, #8
 8014ad0:	bd70      	pop	{r4, r5, r6, pc}
 8014ad2:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8014ad6:	4630      	mov	r0, r6
 8014ad8:	b002      	add	sp, #8
 8014ada:	bd70      	pop	{r4, r5, r6, pc}
 8014adc:	260b      	movs	r6, #11
 8014ade:	4630      	mov	r0, r6
 8014ae0:	b002      	add	sp, #8
 8014ae2:	bd70      	pop	{r4, r5, r6, pc}
 8014ae4:	6820      	ldr	r0, [r4, #0]
 8014ae6:	2105      	movs	r1, #5
 8014ae8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014aec:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8014af0:	9100      	str	r1, [sp, #0]
 8014af2:	f7f9 fcf3 	bl	800e4dc <__atomic_exchange_8>
 8014af6:	4630      	mov	r0, r6
 8014af8:	b002      	add	sp, #8
 8014afa:	bd70      	pop	{r4, r5, r6, pc}
 8014afc:	0000      	movs	r0, r0
	...

08014b00 <rcl_take_response>:
 8014b00:	b570      	push	{r4, r5, r6, lr}
 8014b02:	468e      	mov	lr, r1
 8014b04:	460c      	mov	r4, r1
 8014b06:	4616      	mov	r6, r2
 8014b08:	4605      	mov	r5, r0
 8014b0a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014b0e:	b08c      	sub	sp, #48	@ 0x30
 8014b10:	f10d 0c18 	add.w	ip, sp, #24
 8014b14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014b18:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014b1c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014b20:	b35d      	cbz	r5, 8014b7a <rcl_take_response+0x7a>
 8014b22:	682b      	ldr	r3, [r5, #0]
 8014b24:	b34b      	cbz	r3, 8014b7a <rcl_take_response+0x7a>
 8014b26:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8014b2a:	b330      	cbz	r0, 8014b7a <rcl_take_response+0x7a>
 8014b2c:	b346      	cbz	r6, 8014b80 <rcl_take_response+0x80>
 8014b2e:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8014b88 <rcl_take_response+0x88>
 8014b32:	2300      	movs	r3, #0
 8014b34:	f88d 3007 	strb.w	r3, [sp, #7]
 8014b38:	4632      	mov	r2, r6
 8014b3a:	f10d 0307 	add.w	r3, sp, #7
 8014b3e:	a902      	add	r1, sp, #8
 8014b40:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014b44:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014b48:	f002 fdc4 	bl	80176d4 <rmw_take_response>
 8014b4c:	4605      	mov	r5, r0
 8014b4e:	b9c8      	cbnz	r0, 8014b84 <rcl_take_response+0x84>
 8014b50:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014b54:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8014b58:	2a00      	cmp	r2, #0
 8014b5a:	bf08      	it	eq
 8014b5c:	461d      	moveq	r5, r3
 8014b5e:	f10d 0e18 	add.w	lr, sp, #24
 8014b62:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014b66:	46a4      	mov	ip, r4
 8014b68:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014b6c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014b70:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014b74:	4628      	mov	r0, r5
 8014b76:	b00c      	add	sp, #48	@ 0x30
 8014b78:	bd70      	pop	{r4, r5, r6, pc}
 8014b7a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8014b7e:	e7ee      	b.n	8014b5e <rcl_take_response+0x5e>
 8014b80:	250b      	movs	r5, #11
 8014b82:	e7ec      	b.n	8014b5e <rcl_take_response+0x5e>
 8014b84:	2501      	movs	r5, #1
 8014b86:	e7ea      	b.n	8014b5e <rcl_take_response+0x5e>
	...

08014b90 <rcl_client_is_valid>:
 8014b90:	b130      	cbz	r0, 8014ba0 <rcl_client_is_valid+0x10>
 8014b92:	6800      	ldr	r0, [r0, #0]
 8014b94:	b120      	cbz	r0, 8014ba0 <rcl_client_is_valid+0x10>
 8014b96:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8014b9a:	3800      	subs	r0, #0
 8014b9c:	bf18      	it	ne
 8014b9e:	2001      	movne	r0, #1
 8014ba0:	4770      	bx	lr
 8014ba2:	bf00      	nop

08014ba4 <rcl_convert_rmw_ret_to_rcl_ret>:
 8014ba4:	280b      	cmp	r0, #11
 8014ba6:	dc0d      	bgt.n	8014bc4 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8014ba8:	2800      	cmp	r0, #0
 8014baa:	db09      	blt.n	8014bc0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8014bac:	280b      	cmp	r0, #11
 8014bae:	d807      	bhi.n	8014bc0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8014bb0:	e8df f000 	tbb	[pc, r0]
 8014bb4:	07060607 	.word	0x07060607
 8014bb8:	06060606 	.word	0x06060606
 8014bbc:	07070606 	.word	0x07070606
 8014bc0:	2001      	movs	r0, #1
 8014bc2:	4770      	bx	lr
 8014bc4:	28cb      	cmp	r0, #203	@ 0xcb
 8014bc6:	bf18      	it	ne
 8014bc8:	2001      	movne	r0, #1
 8014bca:	4770      	bx	lr

08014bcc <rcl_get_zero_initialized_guard_condition>:
 8014bcc:	4a03      	ldr	r2, [pc, #12]	@ (8014bdc <rcl_get_zero_initialized_guard_condition+0x10>)
 8014bce:	4603      	mov	r3, r0
 8014bd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014bd4:	e883 0003 	stmia.w	r3, {r0, r1}
 8014bd8:	4618      	mov	r0, r3
 8014bda:	4770      	bx	lr
 8014bdc:	0801b8fc 	.word	0x0801b8fc

08014be0 <rcl_guard_condition_init>:
 8014be0:	b082      	sub	sp, #8
 8014be2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014be4:	b087      	sub	sp, #28
 8014be6:	ac0c      	add	r4, sp, #48	@ 0x30
 8014be8:	e884 000c 	stmia.w	r4, {r2, r3}
 8014bec:	46a6      	mov	lr, r4
 8014bee:	460d      	mov	r5, r1
 8014bf0:	4604      	mov	r4, r0
 8014bf2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014bf6:	f10d 0c04 	add.w	ip, sp, #4
 8014bfa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014bfe:	f8de 3000 	ldr.w	r3, [lr]
 8014c02:	f8cc 3000 	str.w	r3, [ip]
 8014c06:	a801      	add	r0, sp, #4
 8014c08:	f7f9 fbee 	bl	800e3e8 <rcutils_allocator_is_valid>
 8014c0c:	b338      	cbz	r0, 8014c5e <rcl_guard_condition_init+0x7e>
 8014c0e:	b334      	cbz	r4, 8014c5e <rcl_guard_condition_init+0x7e>
 8014c10:	6866      	ldr	r6, [r4, #4]
 8014c12:	b9ee      	cbnz	r6, 8014c50 <rcl_guard_condition_init+0x70>
 8014c14:	b31d      	cbz	r5, 8014c5e <rcl_guard_condition_init+0x7e>
 8014c16:	4628      	mov	r0, r5
 8014c18:	f7f7 fb50 	bl	800c2bc <rcl_context_is_valid>
 8014c1c:	b308      	cbz	r0, 8014c62 <rcl_guard_condition_init+0x82>
 8014c1e:	9b01      	ldr	r3, [sp, #4]
 8014c20:	9905      	ldr	r1, [sp, #20]
 8014c22:	201c      	movs	r0, #28
 8014c24:	4798      	blx	r3
 8014c26:	4607      	mov	r7, r0
 8014c28:	6060      	str	r0, [r4, #4]
 8014c2a:	b310      	cbz	r0, 8014c72 <rcl_guard_condition_init+0x92>
 8014c2c:	6828      	ldr	r0, [r5, #0]
 8014c2e:	3028      	adds	r0, #40	@ 0x28
 8014c30:	f002 fbae 	bl	8017390 <rmw_create_guard_condition>
 8014c34:	6038      	str	r0, [r7, #0]
 8014c36:	6860      	ldr	r0, [r4, #4]
 8014c38:	6805      	ldr	r5, [r0, #0]
 8014c3a:	b1a5      	cbz	r5, 8014c66 <rcl_guard_condition_init+0x86>
 8014c3c:	2301      	movs	r3, #1
 8014c3e:	ac01      	add	r4, sp, #4
 8014c40:	7103      	strb	r3, [r0, #4]
 8014c42:	f100 0708 	add.w	r7, r0, #8
 8014c46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014c48:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8014c4a:	6823      	ldr	r3, [r4, #0]
 8014c4c:	603b      	str	r3, [r7, #0]
 8014c4e:	e000      	b.n	8014c52 <rcl_guard_condition_init+0x72>
 8014c50:	2664      	movs	r6, #100	@ 0x64
 8014c52:	4630      	mov	r0, r6
 8014c54:	b007      	add	sp, #28
 8014c56:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014c5a:	b002      	add	sp, #8
 8014c5c:	4770      	bx	lr
 8014c5e:	260b      	movs	r6, #11
 8014c60:	e7f7      	b.n	8014c52 <rcl_guard_condition_init+0x72>
 8014c62:	2665      	movs	r6, #101	@ 0x65
 8014c64:	e7f5      	b.n	8014c52 <rcl_guard_condition_init+0x72>
 8014c66:	9b02      	ldr	r3, [sp, #8]
 8014c68:	9905      	ldr	r1, [sp, #20]
 8014c6a:	4798      	blx	r3
 8014c6c:	2601      	movs	r6, #1
 8014c6e:	6065      	str	r5, [r4, #4]
 8014c70:	e7ef      	b.n	8014c52 <rcl_guard_condition_init+0x72>
 8014c72:	260a      	movs	r6, #10
 8014c74:	e7ed      	b.n	8014c52 <rcl_guard_condition_init+0x72>
 8014c76:	bf00      	nop

08014c78 <rcl_guard_condition_init_from_rmw>:
 8014c78:	b082      	sub	sp, #8
 8014c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c7e:	b086      	sub	sp, #24
 8014c80:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8014c84:	4604      	mov	r4, r0
 8014c86:	f84c 3f04 	str.w	r3, [ip, #4]!
 8014c8a:	460e      	mov	r6, r1
 8014c8c:	4617      	mov	r7, r2
 8014c8e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014c92:	f10d 0e04 	add.w	lr, sp, #4
 8014c96:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014c9a:	f8dc 3000 	ldr.w	r3, [ip]
 8014c9e:	f8ce 3000 	str.w	r3, [lr]
 8014ca2:	a801      	add	r0, sp, #4
 8014ca4:	f7f9 fba0 	bl	800e3e8 <rcutils_allocator_is_valid>
 8014ca8:	b350      	cbz	r0, 8014d00 <rcl_guard_condition_init_from_rmw+0x88>
 8014caa:	b34c      	cbz	r4, 8014d00 <rcl_guard_condition_init_from_rmw+0x88>
 8014cac:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8014cb0:	f1b8 0f00 	cmp.w	r8, #0
 8014cb4:	d11e      	bne.n	8014cf4 <rcl_guard_condition_init_from_rmw+0x7c>
 8014cb6:	b31f      	cbz	r7, 8014d00 <rcl_guard_condition_init_from_rmw+0x88>
 8014cb8:	4638      	mov	r0, r7
 8014cba:	f7f7 faff 	bl	800c2bc <rcl_context_is_valid>
 8014cbe:	b328      	cbz	r0, 8014d0c <rcl_guard_condition_init_from_rmw+0x94>
 8014cc0:	9b01      	ldr	r3, [sp, #4]
 8014cc2:	9905      	ldr	r1, [sp, #20]
 8014cc4:	201c      	movs	r0, #28
 8014cc6:	4798      	blx	r3
 8014cc8:	4605      	mov	r5, r0
 8014cca:	6060      	str	r0, [r4, #4]
 8014ccc:	b358      	cbz	r0, 8014d26 <rcl_guard_condition_init_from_rmw+0xae>
 8014cce:	b1fe      	cbz	r6, 8014d10 <rcl_guard_condition_init_from_rmw+0x98>
 8014cd0:	6006      	str	r6, [r0, #0]
 8014cd2:	f880 8004 	strb.w	r8, [r0, #4]
 8014cd6:	ac01      	add	r4, sp, #4
 8014cd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014cda:	f105 0c08 	add.w	ip, r5, #8
 8014cde:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014ce2:	6823      	ldr	r3, [r4, #0]
 8014ce4:	f8cc 3000 	str.w	r3, [ip]
 8014ce8:	2000      	movs	r0, #0
 8014cea:	b006      	add	sp, #24
 8014cec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014cf0:	b002      	add	sp, #8
 8014cf2:	4770      	bx	lr
 8014cf4:	2064      	movs	r0, #100	@ 0x64
 8014cf6:	b006      	add	sp, #24
 8014cf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014cfc:	b002      	add	sp, #8
 8014cfe:	4770      	bx	lr
 8014d00:	200b      	movs	r0, #11
 8014d02:	b006      	add	sp, #24
 8014d04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014d08:	b002      	add	sp, #8
 8014d0a:	4770      	bx	lr
 8014d0c:	2065      	movs	r0, #101	@ 0x65
 8014d0e:	e7f2      	b.n	8014cf6 <rcl_guard_condition_init_from_rmw+0x7e>
 8014d10:	6838      	ldr	r0, [r7, #0]
 8014d12:	3028      	adds	r0, #40	@ 0x28
 8014d14:	f002 fb3c 	bl	8017390 <rmw_create_guard_condition>
 8014d18:	6028      	str	r0, [r5, #0]
 8014d1a:	6865      	ldr	r5, [r4, #4]
 8014d1c:	682e      	ldr	r6, [r5, #0]
 8014d1e:	b126      	cbz	r6, 8014d2a <rcl_guard_condition_init_from_rmw+0xb2>
 8014d20:	2301      	movs	r3, #1
 8014d22:	712b      	strb	r3, [r5, #4]
 8014d24:	e7d7      	b.n	8014cd6 <rcl_guard_condition_init_from_rmw+0x5e>
 8014d26:	200a      	movs	r0, #10
 8014d28:	e7e5      	b.n	8014cf6 <rcl_guard_condition_init_from_rmw+0x7e>
 8014d2a:	4628      	mov	r0, r5
 8014d2c:	9b02      	ldr	r3, [sp, #8]
 8014d2e:	9905      	ldr	r1, [sp, #20]
 8014d30:	4798      	blx	r3
 8014d32:	6066      	str	r6, [r4, #4]
 8014d34:	2001      	movs	r0, #1
 8014d36:	e7de      	b.n	8014cf6 <rcl_guard_condition_init_from_rmw+0x7e>

08014d38 <rcl_guard_condition_fini>:
 8014d38:	b570      	push	{r4, r5, r6, lr}
 8014d3a:	b082      	sub	sp, #8
 8014d3c:	b1f0      	cbz	r0, 8014d7c <rcl_guard_condition_fini+0x44>
 8014d3e:	6843      	ldr	r3, [r0, #4]
 8014d40:	4604      	mov	r4, r0
 8014d42:	b163      	cbz	r3, 8014d5e <rcl_guard_condition_fini+0x26>
 8014d44:	6818      	ldr	r0, [r3, #0]
 8014d46:	68de      	ldr	r6, [r3, #12]
 8014d48:	6999      	ldr	r1, [r3, #24]
 8014d4a:	b160      	cbz	r0, 8014d66 <rcl_guard_condition_fini+0x2e>
 8014d4c:	791d      	ldrb	r5, [r3, #4]
 8014d4e:	b965      	cbnz	r5, 8014d6a <rcl_guard_condition_fini+0x32>
 8014d50:	4618      	mov	r0, r3
 8014d52:	47b0      	blx	r6
 8014d54:	2300      	movs	r3, #0
 8014d56:	4628      	mov	r0, r5
 8014d58:	6063      	str	r3, [r4, #4]
 8014d5a:	b002      	add	sp, #8
 8014d5c:	bd70      	pop	{r4, r5, r6, pc}
 8014d5e:	461d      	mov	r5, r3
 8014d60:	4628      	mov	r0, r5
 8014d62:	b002      	add	sp, #8
 8014d64:	bd70      	pop	{r4, r5, r6, pc}
 8014d66:	4605      	mov	r5, r0
 8014d68:	e7f2      	b.n	8014d50 <rcl_guard_condition_fini+0x18>
 8014d6a:	9101      	str	r1, [sp, #4]
 8014d6c:	f002 fb24 	bl	80173b8 <rmw_destroy_guard_condition>
 8014d70:	1e05      	subs	r5, r0, #0
 8014d72:	6863      	ldr	r3, [r4, #4]
 8014d74:	9901      	ldr	r1, [sp, #4]
 8014d76:	bf18      	it	ne
 8014d78:	2501      	movne	r5, #1
 8014d7a:	e7e9      	b.n	8014d50 <rcl_guard_condition_fini+0x18>
 8014d7c:	250b      	movs	r5, #11
 8014d7e:	4628      	mov	r0, r5
 8014d80:	b002      	add	sp, #8
 8014d82:	bd70      	pop	{r4, r5, r6, pc}

08014d84 <rcl_guard_condition_get_default_options>:
 8014d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d86:	b087      	sub	sp, #28
 8014d88:	4606      	mov	r6, r0
 8014d8a:	4668      	mov	r0, sp
 8014d8c:	f7f9 fb1e 	bl	800e3cc <rcutils_get_default_allocator>
 8014d90:	4b09      	ldr	r3, [pc, #36]	@ (8014db8 <rcl_guard_condition_get_default_options+0x34>)
 8014d92:	46ee      	mov	lr, sp
 8014d94:	469c      	mov	ip, r3
 8014d96:	461d      	mov	r5, r3
 8014d98:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014d9c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014da0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014da2:	4634      	mov	r4, r6
 8014da4:	f8de 7000 	ldr.w	r7, [lr]
 8014da8:	f8cc 7000 	str.w	r7, [ip]
 8014dac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014dae:	4630      	mov	r0, r6
 8014db0:	6027      	str	r7, [r4, #0]
 8014db2:	b007      	add	sp, #28
 8014db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014db6:	bf00      	nop
 8014db8:	200119c0 	.word	0x200119c0

08014dbc <rcl_trigger_guard_condition>:
 8014dbc:	b148      	cbz	r0, 8014dd2 <rcl_trigger_guard_condition+0x16>
 8014dbe:	b508      	push	{r3, lr}
 8014dc0:	6843      	ldr	r3, [r0, #4]
 8014dc2:	b143      	cbz	r3, 8014dd6 <rcl_trigger_guard_condition+0x1a>
 8014dc4:	6818      	ldr	r0, [r3, #0]
 8014dc6:	f002 fccf 	bl	8017768 <rmw_trigger_guard_condition>
 8014dca:	3800      	subs	r0, #0
 8014dcc:	bf18      	it	ne
 8014dce:	2001      	movne	r0, #1
 8014dd0:	bd08      	pop	{r3, pc}
 8014dd2:	200b      	movs	r0, #11
 8014dd4:	4770      	bx	lr
 8014dd6:	200b      	movs	r0, #11
 8014dd8:	bd08      	pop	{r3, pc}
 8014dda:	bf00      	nop

08014ddc <rcl_guard_condition_get_rmw_handle>:
 8014ddc:	b110      	cbz	r0, 8014de4 <rcl_guard_condition_get_rmw_handle+0x8>
 8014dde:	6840      	ldr	r0, [r0, #4]
 8014de0:	b100      	cbz	r0, 8014de4 <rcl_guard_condition_get_rmw_handle+0x8>
 8014de2:	6800      	ldr	r0, [r0, #0]
 8014de4:	4770      	bx	lr
 8014de6:	bf00      	nop

08014de8 <rcl_init>:
 8014de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014dec:	1e05      	subs	r5, r0, #0
 8014dee:	b09c      	sub	sp, #112	@ 0x70
 8014df0:	460e      	mov	r6, r1
 8014df2:	4690      	mov	r8, r2
 8014df4:	461f      	mov	r7, r3
 8014df6:	f340 8099 	ble.w	8014f2c <rcl_init+0x144>
 8014dfa:	2900      	cmp	r1, #0
 8014dfc:	f000 8099 	beq.w	8014f32 <rcl_init+0x14a>
 8014e00:	f1a1 0e04 	sub.w	lr, r1, #4
 8014e04:	f04f 0c00 	mov.w	ip, #0
 8014e08:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8014e0c:	f10c 0c01 	add.w	ip, ip, #1
 8014e10:	2c00      	cmp	r4, #0
 8014e12:	f000 808e 	beq.w	8014f32 <rcl_init+0x14a>
 8014e16:	4565      	cmp	r5, ip
 8014e18:	d1f6      	bne.n	8014e08 <rcl_init+0x20>
 8014e1a:	f1b8 0f00 	cmp.w	r8, #0
 8014e1e:	f000 8088 	beq.w	8014f32 <rcl_init+0x14a>
 8014e22:	f8d8 4000 	ldr.w	r4, [r8]
 8014e26:	2c00      	cmp	r4, #0
 8014e28:	f000 8083 	beq.w	8014f32 <rcl_init+0x14a>
 8014e2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014e2e:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 8014e32:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014e36:	6823      	ldr	r3, [r4, #0]
 8014e38:	f8cc 3000 	str.w	r3, [ip]
 8014e3c:	a817      	add	r0, sp, #92	@ 0x5c
 8014e3e:	f7f9 fad3 	bl	800e3e8 <rcutils_allocator_is_valid>
 8014e42:	2800      	cmp	r0, #0
 8014e44:	d075      	beq.n	8014f32 <rcl_init+0x14a>
 8014e46:	2f00      	cmp	r7, #0
 8014e48:	d073      	beq.n	8014f32 <rcl_init+0x14a>
 8014e4a:	683b      	ldr	r3, [r7, #0]
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d175      	bne.n	8014f3c <rcl_init+0x154>
 8014e50:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 8014e54:	2178      	movs	r1, #120	@ 0x78
 8014e56:	2001      	movs	r0, #1
 8014e58:	4798      	blx	r3
 8014e5a:	4604      	mov	r4, r0
 8014e5c:	6038      	str	r0, [r7, #0]
 8014e5e:	2800      	cmp	r0, #0
 8014e60:	f000 80a0 	beq.w	8014fa4 <rcl_init+0x1bc>
 8014e64:	a802      	add	r0, sp, #8
 8014e66:	f002 f833 	bl	8016ed0 <rmw_get_zero_initialized_context>
 8014e6a:	a902      	add	r1, sp, #8
 8014e6c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8014e70:	2250      	movs	r2, #80	@ 0x50
 8014e72:	ac17      	add	r4, sp, #92	@ 0x5c
 8014e74:	f004 ff3d 	bl	8019cf2 <memcpy>
 8014e78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014e7a:	f8d7 e000 	ldr.w	lr, [r7]
 8014e7e:	46f4      	mov	ip, lr
 8014e80:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014e84:	6823      	ldr	r3, [r4, #0]
 8014e86:	f8cc 3000 	str.w	r3, [ip]
 8014e8a:	f10e 0114 	add.w	r1, lr, #20
 8014e8e:	4640      	mov	r0, r8
 8014e90:	f7f7 fb26 	bl	800c4e0 <rcl_init_options_copy>
 8014e94:	4604      	mov	r4, r0
 8014e96:	2800      	cmp	r0, #0
 8014e98:	d144      	bne.n	8014f24 <rcl_init+0x13c>
 8014e9a:	f8d7 9000 	ldr.w	r9, [r7]
 8014e9e:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8014ea2:	f8c9 0020 	str.w	r0, [r9, #32]
 8014ea6:	f8c9 5018 	str.w	r5, [r9, #24]
 8014eaa:	f8c9 801c 	str.w	r8, [r9, #28]
 8014eae:	2d00      	cmp	r5, #0
 8014eb0:	d04b      	beq.n	8014f4a <rcl_init+0x162>
 8014eb2:	2e00      	cmp	r6, #0
 8014eb4:	d049      	beq.n	8014f4a <rcl_init+0x162>
 8014eb6:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 8014eba:	2104      	movs	r1, #4
 8014ebc:	4628      	mov	r0, r5
 8014ebe:	4798      	blx	r3
 8014ec0:	f8c9 0020 	str.w	r0, [r9, #32]
 8014ec4:	f8d7 9000 	ldr.w	r9, [r7]
 8014ec8:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8014ecc:	46ca      	mov	sl, r9
 8014ece:	b343      	cbz	r3, 8014f22 <rcl_init+0x13a>
 8014ed0:	2d01      	cmp	r5, #1
 8014ed2:	f178 0300 	sbcs.w	r3, r8, #0
 8014ed6:	db38      	blt.n	8014f4a <rcl_init+0x162>
 8014ed8:	2400      	movs	r4, #0
 8014eda:	3e04      	subs	r6, #4
 8014edc:	46a1      	mov	r9, r4
 8014ede:	e00b      	b.n	8014ef8 <rcl_init+0x110>
 8014ee0:	6831      	ldr	r1, [r6, #0]
 8014ee2:	f004 ff06 	bl	8019cf2 <memcpy>
 8014ee6:	3401      	adds	r4, #1
 8014ee8:	f149 0900 	adc.w	r9, r9, #0
 8014eec:	45c8      	cmp	r8, r9
 8014eee:	bf08      	it	eq
 8014ef0:	42a5      	cmpeq	r5, r4
 8014ef2:	d028      	beq.n	8014f46 <rcl_init+0x15e>
 8014ef4:	f8d7 a000 	ldr.w	sl, [r7]
 8014ef8:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8014efc:	f7eb f992 	bl	8000224 <strlen>
 8014f00:	1c42      	adds	r2, r0, #1
 8014f02:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8014f04:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8014f06:	f8da a020 	ldr.w	sl, [sl, #32]
 8014f0a:	9201      	str	r2, [sp, #4]
 8014f0c:	4610      	mov	r0, r2
 8014f0e:	4798      	blx	r3
 8014f10:	683b      	ldr	r3, [r7, #0]
 8014f12:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8014f16:	6a1b      	ldr	r3, [r3, #32]
 8014f18:	9a01      	ldr	r2, [sp, #4]
 8014f1a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014f1e:	2800      	cmp	r0, #0
 8014f20:	d1de      	bne.n	8014ee0 <rcl_init+0xf8>
 8014f22:	240a      	movs	r4, #10
 8014f24:	4638      	mov	r0, r7
 8014f26:	f7f7 f9d5 	bl	800c2d4 <__cleanup_context>
 8014f2a:	e003      	b.n	8014f34 <rcl_init+0x14c>
 8014f2c:	2900      	cmp	r1, #0
 8014f2e:	f43f af74 	beq.w	8014e1a <rcl_init+0x32>
 8014f32:	240b      	movs	r4, #11
 8014f34:	4620      	mov	r0, r4
 8014f36:	b01c      	add	sp, #112	@ 0x70
 8014f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f3c:	2464      	movs	r4, #100	@ 0x64
 8014f3e:	4620      	mov	r0, r4
 8014f40:	b01c      	add	sp, #112	@ 0x70
 8014f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f46:	f8d7 9000 	ldr.w	r9, [r7]
 8014f4a:	491d      	ldr	r1, [pc, #116]	@ (8014fc0 <rcl_init+0x1d8>)
 8014f4c:	680b      	ldr	r3, [r1, #0]
 8014f4e:	3301      	adds	r3, #1
 8014f50:	d023      	beq.n	8014f9a <rcl_init+0x1b2>
 8014f52:	600b      	str	r3, [r1, #0]
 8014f54:	461a      	mov	r2, r3
 8014f56:	2400      	movs	r4, #0
 8014f58:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8014f5c:	607b      	str	r3, [r7, #4]
 8014f5e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8014f60:	6182      	str	r2, [r0, #24]
 8014f62:	3301      	adds	r3, #1
 8014f64:	61c4      	str	r4, [r0, #28]
 8014f66:	d01f      	beq.n	8014fa8 <rcl_init+0x1c0>
 8014f68:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8014f6c:	b94b      	cbnz	r3, 8014f82 <rcl_init+0x19a>
 8014f6e:	3030      	adds	r0, #48	@ 0x30
 8014f70:	f000 f846 	bl	8015000 <rcl_get_localhost_only>
 8014f74:	4604      	mov	r4, r0
 8014f76:	2800      	cmp	r0, #0
 8014f78:	d1d4      	bne.n	8014f24 <rcl_init+0x13c>
 8014f7a:	f8d7 9000 	ldr.w	r9, [r7]
 8014f7e:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8014f82:	f109 0128 	add.w	r1, r9, #40	@ 0x28
 8014f86:	3018      	adds	r0, #24
 8014f88:	f7f9 ff5e 	bl	800ee48 <rmw_init>
 8014f8c:	4604      	mov	r4, r0
 8014f8e:	2800      	cmp	r0, #0
 8014f90:	d0d0      	beq.n	8014f34 <rcl_init+0x14c>
 8014f92:	f7ff fe07 	bl	8014ba4 <rcl_convert_rmw_ret_to_rcl_ret>
 8014f96:	4604      	mov	r4, r0
 8014f98:	e7c4      	b.n	8014f24 <rcl_init+0x13c>
 8014f9a:	2201      	movs	r2, #1
 8014f9c:	461c      	mov	r4, r3
 8014f9e:	600a      	str	r2, [r1, #0]
 8014fa0:	4613      	mov	r3, r2
 8014fa2:	e7d9      	b.n	8014f58 <rcl_init+0x170>
 8014fa4:	240a      	movs	r4, #10
 8014fa6:	e7c5      	b.n	8014f34 <rcl_init+0x14c>
 8014fa8:	3024      	adds	r0, #36	@ 0x24
 8014faa:	f003 fd31 	bl	8018a10 <rcl_get_default_domain_id>
 8014fae:	4604      	mov	r4, r0
 8014fb0:	2800      	cmp	r0, #0
 8014fb2:	d1b7      	bne.n	8014f24 <rcl_init+0x13c>
 8014fb4:	f8d7 9000 	ldr.w	r9, [r7]
 8014fb8:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8014fbc:	e7d4      	b.n	8014f68 <rcl_init+0x180>
 8014fbe:	bf00      	nop
 8014fc0:	200119d4 	.word	0x200119d4

08014fc4 <rcl_shutdown>:
 8014fc4:	b1a8      	cbz	r0, 8014ff2 <rcl_shutdown+0x2e>
 8014fc6:	6803      	ldr	r3, [r0, #0]
 8014fc8:	b510      	push	{r4, lr}
 8014fca:	4604      	mov	r4, r0
 8014fcc:	b173      	cbz	r3, 8014fec <rcl_shutdown+0x28>
 8014fce:	f7f7 f975 	bl	800c2bc <rcl_context_is_valid>
 8014fd2:	b140      	cbz	r0, 8014fe6 <rcl_shutdown+0x22>
 8014fd4:	6820      	ldr	r0, [r4, #0]
 8014fd6:	3028      	adds	r0, #40	@ 0x28
 8014fd8:	f7fa f86c 	bl	800f0b4 <rmw_shutdown>
 8014fdc:	4603      	mov	r3, r0
 8014fde:	b958      	cbnz	r0, 8014ff8 <rcl_shutdown+0x34>
 8014fe0:	6060      	str	r0, [r4, #4]
 8014fe2:	4618      	mov	r0, r3
 8014fe4:	bd10      	pop	{r4, pc}
 8014fe6:	236a      	movs	r3, #106	@ 0x6a
 8014fe8:	4618      	mov	r0, r3
 8014fea:	bd10      	pop	{r4, pc}
 8014fec:	230b      	movs	r3, #11
 8014fee:	4618      	mov	r0, r3
 8014ff0:	bd10      	pop	{r4, pc}
 8014ff2:	230b      	movs	r3, #11
 8014ff4:	4618      	mov	r0, r3
 8014ff6:	4770      	bx	lr
 8014ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ffc:	f7ff bdd2 	b.w	8014ba4 <rcl_convert_rmw_ret_to_rcl_ret>

08015000 <rcl_get_localhost_only>:
 8015000:	b510      	push	{r4, lr}
 8015002:	b082      	sub	sp, #8
 8015004:	2300      	movs	r3, #0
 8015006:	9301      	str	r3, [sp, #4]
 8015008:	b1b8      	cbz	r0, 801503a <rcl_get_localhost_only+0x3a>
 801500a:	4604      	mov	r4, r0
 801500c:	a901      	add	r1, sp, #4
 801500e:	480c      	ldr	r0, [pc, #48]	@ (8015040 <rcl_get_localhost_only+0x40>)
 8015010:	f7f9 fa9c 	bl	800e54c <rcutils_get_env>
 8015014:	b110      	cbz	r0, 801501c <rcl_get_localhost_only+0x1c>
 8015016:	2001      	movs	r0, #1
 8015018:	b002      	add	sp, #8
 801501a:	bd10      	pop	{r4, pc}
 801501c:	9b01      	ldr	r3, [sp, #4]
 801501e:	b113      	cbz	r3, 8015026 <rcl_get_localhost_only+0x26>
 8015020:	781a      	ldrb	r2, [r3, #0]
 8015022:	2a31      	cmp	r2, #49	@ 0x31
 8015024:	d004      	beq.n	8015030 <rcl_get_localhost_only+0x30>
 8015026:	2302      	movs	r3, #2
 8015028:	2000      	movs	r0, #0
 801502a:	7023      	strb	r3, [r4, #0]
 801502c:	b002      	add	sp, #8
 801502e:	bd10      	pop	{r4, pc}
 8015030:	785b      	ldrb	r3, [r3, #1]
 8015032:	2b00      	cmp	r3, #0
 8015034:	d1f7      	bne.n	8015026 <rcl_get_localhost_only+0x26>
 8015036:	2301      	movs	r3, #1
 8015038:	e7f6      	b.n	8015028 <rcl_get_localhost_only+0x28>
 801503a:	200b      	movs	r0, #11
 801503c:	b002      	add	sp, #8
 801503e:	bd10      	pop	{r4, pc}
 8015040:	0801b1ec 	.word	0x0801b1ec

08015044 <rcl_node_resolve_name>:
 8015044:	b082      	sub	sp, #8
 8015046:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801504a:	b091      	sub	sp, #68	@ 0x44
 801504c:	ac1a      	add	r4, sp, #104	@ 0x68
 801504e:	e884 000c 	stmia.w	r4, {r2, r3}
 8015052:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8015056:	2800      	cmp	r0, #0
 8015058:	d03b      	beq.n	80150d2 <rcl_node_resolve_name+0x8e>
 801505a:	460c      	mov	r4, r1
 801505c:	4605      	mov	r5, r0
 801505e:	f7f7 fc4f 	bl	800c900 <rcl_node_get_options>
 8015062:	2800      	cmp	r0, #0
 8015064:	d037      	beq.n	80150d6 <rcl_node_resolve_name+0x92>
 8015066:	4628      	mov	r0, r5
 8015068:	f7f7 fc3a 	bl	800c8e0 <rcl_node_get_name>
 801506c:	4606      	mov	r6, r0
 801506e:	4628      	mov	r0, r5
 8015070:	f7f7 fc3e 	bl	800c8f0 <rcl_node_get_namespace>
 8015074:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8015078:	4681      	mov	r9, r0
 801507a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801507e:	ad0b      	add	r5, sp, #44	@ 0x2c
 8015080:	46ac      	mov	ip, r5
 8015082:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015086:	f8de 3000 	ldr.w	r3, [lr]
 801508a:	f8cc 3000 	str.w	r3, [ip]
 801508e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015090:	b1fb      	cbz	r3, 80150d2 <rcl_node_resolve_name+0x8e>
 8015092:	468a      	mov	sl, r1
 8015094:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8015098:	f001 fdee 	bl	8016c78 <rcutils_get_zero_initialized_string_map>
 801509c:	ab10      	add	r3, sp, #64	@ 0x40
 801509e:	9008      	str	r0, [sp, #32]
 80150a0:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80150a4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80150a8:	2100      	movs	r1, #0
 80150aa:	e895 000c 	ldmia.w	r5, {r2, r3}
 80150ae:	a808      	add	r0, sp, #32
 80150b0:	f001 fe5a 	bl	8016d68 <rcutils_string_map_init>
 80150b4:	4607      	mov	r7, r0
 80150b6:	b180      	cbz	r0, 80150da <rcl_node_resolve_name+0x96>
 80150b8:	f7f9 fa60 	bl	800e57c <rcutils_get_error_string>
 80150bc:	f7f9 fa74 	bl	800e5a8 <rcutils_reset_error>
 80150c0:	2f0a      	cmp	r7, #10
 80150c2:	bf18      	it	ne
 80150c4:	2701      	movne	r7, #1
 80150c6:	4638      	mov	r0, r7
 80150c8:	b011      	add	sp, #68	@ 0x44
 80150ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150ce:	b002      	add	sp, #8
 80150d0:	4770      	bx	lr
 80150d2:	270b      	movs	r7, #11
 80150d4:	e7f7      	b.n	80150c6 <rcl_node_resolve_name+0x82>
 80150d6:	2701      	movs	r7, #1
 80150d8:	e7f5      	b.n	80150c6 <rcl_node_resolve_name+0x82>
 80150da:	9009      	str	r0, [sp, #36]	@ 0x24
 80150dc:	9007      	str	r0, [sp, #28]
 80150de:	a808      	add	r0, sp, #32
 80150e0:	f003 fe28 	bl	8018d34 <rcl_get_default_topic_name_substitutions>
 80150e4:	4607      	mov	r7, r0
 80150e6:	b1a8      	cbz	r0, 8015114 <rcl_node_resolve_name+0xd0>
 80150e8:	280a      	cmp	r0, #10
 80150ea:	9c07      	ldr	r4, [sp, #28]
 80150ec:	d000      	beq.n	80150f0 <rcl_node_resolve_name+0xac>
 80150ee:	2701      	movs	r7, #1
 80150f0:	a808      	add	r0, sp, #32
 80150f2:	f001 fe79 	bl	8016de8 <rcutils_string_map_fini>
 80150f6:	2800      	cmp	r0, #0
 80150f8:	d13d      	bne.n	8015176 <rcl_node_resolve_name+0x132>
 80150fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80150fc:	4659      	mov	r1, fp
 80150fe:	47d0      	blx	sl
 8015100:	4659      	mov	r1, fp
 8015102:	4620      	mov	r0, r4
 8015104:	47d0      	blx	sl
 8015106:	f1b8 0f00 	cmp.w	r8, #0
 801510a:	d0dc      	beq.n	80150c6 <rcl_node_resolve_name+0x82>
 801510c:	2f67      	cmp	r7, #103	@ 0x67
 801510e:	bf08      	it	eq
 8015110:	2768      	moveq	r7, #104	@ 0x68
 8015112:	e7d8      	b.n	80150c6 <rcl_node_resolve_name+0x82>
 8015114:	ab09      	add	r3, sp, #36	@ 0x24
 8015116:	9305      	str	r3, [sp, #20]
 8015118:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801511a:	46ec      	mov	ip, sp
 801511c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015120:	682b      	ldr	r3, [r5, #0]
 8015122:	f8cc 3000 	str.w	r3, [ip]
 8015126:	464a      	mov	r2, r9
 8015128:	4631      	mov	r1, r6
 801512a:	4620      	mov	r0, r4
 801512c:	ab08      	add	r3, sp, #32
 801512e:	f003 fca3 	bl	8018a78 <rcl_expand_topic_name>
 8015132:	4607      	mov	r7, r0
 8015134:	b9b8      	cbnz	r0, 8015166 <rcl_node_resolve_name+0x122>
 8015136:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8015138:	9009      	str	r0, [sp, #36]	@ 0x24
 801513a:	4602      	mov	r2, r0
 801513c:	a90a      	add	r1, sp, #40	@ 0x28
 801513e:	4620      	mov	r0, r4
 8015140:	f001 ff5a 	bl	8016ff8 <rmw_validate_full_topic_name>
 8015144:	b988      	cbnz	r0, 801516a <rcl_node_resolve_name+0x126>
 8015146:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8015148:	b9d5      	cbnz	r5, 8015180 <rcl_node_resolve_name+0x13c>
 801514a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801514c:	a808      	add	r0, sp, #32
 801514e:	601c      	str	r4, [r3, #0]
 8015150:	f001 fe4a 	bl	8016de8 <rcutils_string_map_fini>
 8015154:	4607      	mov	r7, r0
 8015156:	b1a8      	cbz	r0, 8015184 <rcl_node_resolve_name+0x140>
 8015158:	f7f9 fa10 	bl	800e57c <rcutils_get_error_string>
 801515c:	462c      	mov	r4, r5
 801515e:	f7f9 fa23 	bl	800e5a8 <rcutils_reset_error>
 8015162:	2701      	movs	r7, #1
 8015164:	e7c9      	b.n	80150fa <rcl_node_resolve_name+0xb6>
 8015166:	9c07      	ldr	r4, [sp, #28]
 8015168:	e7c2      	b.n	80150f0 <rcl_node_resolve_name+0xac>
 801516a:	f7f9 fa07 	bl	800e57c <rcutils_get_error_string>
 801516e:	2701      	movs	r7, #1
 8015170:	f7f9 fa1a 	bl	800e5a8 <rcutils_reset_error>
 8015174:	e7bc      	b.n	80150f0 <rcl_node_resolve_name+0xac>
 8015176:	f7f9 fa01 	bl	800e57c <rcutils_get_error_string>
 801517a:	f7f9 fa15 	bl	800e5a8 <rcutils_reset_error>
 801517e:	e7bc      	b.n	80150fa <rcl_node_resolve_name+0xb6>
 8015180:	2767      	movs	r7, #103	@ 0x67
 8015182:	e7b5      	b.n	80150f0 <rcl_node_resolve_name+0xac>
 8015184:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015186:	4659      	mov	r1, fp
 8015188:	47d0      	blx	sl
 801518a:	4659      	mov	r1, fp
 801518c:	4638      	mov	r0, r7
 801518e:	47d0      	blx	sl
 8015190:	e799      	b.n	80150c6 <rcl_node_resolve_name+0x82>
 8015192:	bf00      	nop

08015194 <rcl_service_get_rmw_handle>:
 8015194:	b118      	cbz	r0, 801519e <rcl_service_get_rmw_handle+0xa>
 8015196:	6800      	ldr	r0, [r0, #0]
 8015198:	b108      	cbz	r0, 801519e <rcl_service_get_rmw_handle+0xa>
 801519a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801519e:	4770      	bx	lr

080151a0 <rcl_take_request>:
 80151a0:	b570      	push	{r4, r5, r6, lr}
 80151a2:	468e      	mov	lr, r1
 80151a4:	460c      	mov	r4, r1
 80151a6:	4616      	mov	r6, r2
 80151a8:	4605      	mov	r5, r0
 80151aa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80151ae:	b08c      	sub	sp, #48	@ 0x30
 80151b0:	f10d 0c18 	add.w	ip, sp, #24
 80151b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80151b8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80151bc:	e88c 0003 	stmia.w	ip, {r0, r1}
 80151c0:	b30d      	cbz	r5, 8015206 <rcl_take_request+0x66>
 80151c2:	682b      	ldr	r3, [r5, #0]
 80151c4:	b1fb      	cbz	r3, 8015206 <rcl_take_request+0x66>
 80151c6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80151ca:	b1e0      	cbz	r0, 8015206 <rcl_take_request+0x66>
 80151cc:	b336      	cbz	r6, 801521c <rcl_take_request+0x7c>
 80151ce:	2300      	movs	r3, #0
 80151d0:	f88d 3007 	strb.w	r3, [sp, #7]
 80151d4:	4632      	mov	r2, r6
 80151d6:	f10d 0307 	add.w	r3, sp, #7
 80151da:	a902      	add	r1, sp, #8
 80151dc:	f002 f9c0 	bl	8017560 <rmw_take_request>
 80151e0:	4605      	mov	r5, r0
 80151e2:	b198      	cbz	r0, 801520c <rcl_take_request+0x6c>
 80151e4:	280a      	cmp	r0, #10
 80151e6:	bf18      	it	ne
 80151e8:	2501      	movne	r5, #1
 80151ea:	f10d 0e18 	add.w	lr, sp, #24
 80151ee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80151f2:	46a4      	mov	ip, r4
 80151f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80151f8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80151fc:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015200:	4628      	mov	r0, r5
 8015202:	b00c      	add	sp, #48	@ 0x30
 8015204:	bd70      	pop	{r4, r5, r6, pc}
 8015206:	f44f 7516 	mov.w	r5, #600	@ 0x258
 801520a:	e7ee      	b.n	80151ea <rcl_take_request+0x4a>
 801520c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8015210:	f240 2359 	movw	r3, #601	@ 0x259
 8015214:	2a00      	cmp	r2, #0
 8015216:	bf08      	it	eq
 8015218:	461d      	moveq	r5, r3
 801521a:	e7e6      	b.n	80151ea <rcl_take_request+0x4a>
 801521c:	250b      	movs	r5, #11
 801521e:	e7e4      	b.n	80151ea <rcl_take_request+0x4a>

08015220 <rcl_send_response>:
 8015220:	b170      	cbz	r0, 8015240 <rcl_send_response+0x20>
 8015222:	6800      	ldr	r0, [r0, #0]
 8015224:	b160      	cbz	r0, 8015240 <rcl_send_response+0x20>
 8015226:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801522a:	b148      	cbz	r0, 8015240 <rcl_send_response+0x20>
 801522c:	b159      	cbz	r1, 8015246 <rcl_send_response+0x26>
 801522e:	b510      	push	{r4, lr}
 8015230:	b15a      	cbz	r2, 801524a <rcl_send_response+0x2a>
 8015232:	f002 f9f3 	bl	801761c <rmw_send_response>
 8015236:	b110      	cbz	r0, 801523e <rcl_send_response+0x1e>
 8015238:	2802      	cmp	r0, #2
 801523a:	bf18      	it	ne
 801523c:	2001      	movne	r0, #1
 801523e:	bd10      	pop	{r4, pc}
 8015240:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8015244:	4770      	bx	lr
 8015246:	200b      	movs	r0, #11
 8015248:	4770      	bx	lr
 801524a:	200b      	movs	r0, #11
 801524c:	bd10      	pop	{r4, pc}
 801524e:	bf00      	nop

08015250 <rcl_service_is_valid>:
 8015250:	b130      	cbz	r0, 8015260 <rcl_service_is_valid+0x10>
 8015252:	6800      	ldr	r0, [r0, #0]
 8015254:	b120      	cbz	r0, 8015260 <rcl_service_is_valid+0x10>
 8015256:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801525a:	3800      	subs	r0, #0
 801525c:	bf18      	it	ne
 801525e:	2001      	movne	r0, #1
 8015260:	4770      	bx	lr
 8015262:	bf00      	nop

08015264 <rcl_get_system_time>:
 8015264:	4608      	mov	r0, r1
 8015266:	f7f9 bb13 	b.w	800e890 <rcutils_system_time_now>
 801526a:	bf00      	nop

0801526c <rcl_get_steady_time>:
 801526c:	4608      	mov	r0, r1
 801526e:	f7f9 bb37 	b.w	800e8e0 <rcutils_steady_time_now>
 8015272:	bf00      	nop

08015274 <rcl_get_ros_time>:
 8015274:	7a03      	ldrb	r3, [r0, #8]
 8015276:	b510      	push	{r4, lr}
 8015278:	460c      	mov	r4, r1
 801527a:	b133      	cbz	r3, 801528a <rcl_get_ros_time+0x16>
 801527c:	2105      	movs	r1, #5
 801527e:	f7f9 f8c1 	bl	800e404 <__atomic_load_8>
 8015282:	e9c4 0100 	strd	r0, r1, [r4]
 8015286:	2000      	movs	r0, #0
 8015288:	bd10      	pop	{r4, pc}
 801528a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801528e:	4608      	mov	r0, r1
 8015290:	f7f9 bafe 	b.w	800e890 <rcutils_system_time_now>

08015294 <rcl_clock_init>:
 8015294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015296:	4605      	mov	r5, r0
 8015298:	4610      	mov	r0, r2
 801529a:	4614      	mov	r4, r2
 801529c:	460e      	mov	r6, r1
 801529e:	f7f9 f8a3 	bl	800e3e8 <rcutils_allocator_is_valid>
 80152a2:	b128      	cbz	r0, 80152b0 <rcl_clock_init+0x1c>
 80152a4:	2d03      	cmp	r5, #3
 80152a6:	d803      	bhi.n	80152b0 <rcl_clock_init+0x1c>
 80152a8:	e8df f005 	tbb	[pc, r5]
 80152ac:	06532e1d 	.word	0x06532e1d
 80152b0:	f04f 0c0b 	mov.w	ip, #11
 80152b4:	4660      	mov	r0, ip
 80152b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80152b8:	2e00      	cmp	r6, #0
 80152ba:	d0f9      	beq.n	80152b0 <rcl_clock_init+0x1c>
 80152bc:	2c00      	cmp	r4, #0
 80152be:	d0f7      	beq.n	80152b0 <rcl_clock_init+0x1c>
 80152c0:	2300      	movs	r3, #0
 80152c2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80152c6:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 801537c <rcl_clock_init+0xe8>
 80152ca:	6133      	str	r3, [r6, #16]
 80152cc:	f106 0514 	add.w	r5, r6, #20
 80152d0:	469c      	mov	ip, r3
 80152d2:	2703      	movs	r7, #3
 80152d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80152d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80152d8:	6823      	ldr	r3, [r4, #0]
 80152da:	602b      	str	r3, [r5, #0]
 80152dc:	7037      	strb	r7, [r6, #0]
 80152de:	f8c6 e00c 	str.w	lr, [r6, #12]
 80152e2:	4660      	mov	r0, ip
 80152e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80152e6:	2e00      	cmp	r6, #0
 80152e8:	d0e2      	beq.n	80152b0 <rcl_clock_init+0x1c>
 80152ea:	2300      	movs	r3, #0
 80152ec:	7033      	strb	r3, [r6, #0]
 80152ee:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80152f2:	e9c6 3303 	strd	r3, r3, [r6, #12]
 80152f6:	469c      	mov	ip, r3
 80152f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80152fa:	f106 0514 	add.w	r5, r6, #20
 80152fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015300:	6823      	ldr	r3, [r4, #0]
 8015302:	602b      	str	r3, [r5, #0]
 8015304:	4660      	mov	r0, ip
 8015306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015308:	2e00      	cmp	r6, #0
 801530a:	d0d1      	beq.n	80152b0 <rcl_clock_init+0x1c>
 801530c:	2c00      	cmp	r4, #0
 801530e:	d0cf      	beq.n	80152b0 <rcl_clock_init+0x1c>
 8015310:	2700      	movs	r7, #0
 8015312:	7037      	strb	r7, [r6, #0]
 8015314:	46a4      	mov	ip, r4
 8015316:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801531a:	f106 0514 	add.w	r5, r6, #20
 801531e:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8015322:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8015326:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015328:	f8dc 3000 	ldr.w	r3, [ip]
 801532c:	602b      	str	r3, [r5, #0]
 801532e:	6921      	ldr	r1, [r4, #16]
 8015330:	6823      	ldr	r3, [r4, #0]
 8015332:	2010      	movs	r0, #16
 8015334:	4798      	blx	r3
 8015336:	6130      	str	r0, [r6, #16]
 8015338:	b1d0      	cbz	r0, 8015370 <rcl_clock_init+0xdc>
 801533a:	2200      	movs	r2, #0
 801533c:	2300      	movs	r3, #0
 801533e:	e9c0 2300 	strd	r2, r3, [r0]
 8015342:	2301      	movs	r3, #1
 8015344:	7207      	strb	r7, [r0, #8]
 8015346:	4a0c      	ldr	r2, [pc, #48]	@ (8015378 <rcl_clock_init+0xe4>)
 8015348:	7033      	strb	r3, [r6, #0]
 801534a:	46bc      	mov	ip, r7
 801534c:	60f2      	str	r2, [r6, #12]
 801534e:	4660      	mov	r0, ip
 8015350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015352:	2e00      	cmp	r6, #0
 8015354:	d0ac      	beq.n	80152b0 <rcl_clock_init+0x1c>
 8015356:	2c00      	cmp	r4, #0
 8015358:	d0aa      	beq.n	80152b0 <rcl_clock_init+0x1c>
 801535a:	2300      	movs	r3, #0
 801535c:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8015360:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8015380 <rcl_clock_init+0xec>
 8015364:	6133      	str	r3, [r6, #16]
 8015366:	f106 0514 	add.w	r5, r6, #20
 801536a:	469c      	mov	ip, r3
 801536c:	2702      	movs	r7, #2
 801536e:	e7b1      	b.n	80152d4 <rcl_clock_init+0x40>
 8015370:	f04f 0c0a 	mov.w	ip, #10
 8015374:	e79e      	b.n	80152b4 <rcl_clock_init+0x20>
 8015376:	bf00      	nop
 8015378:	08015275 	.word	0x08015275
 801537c:	0801526d 	.word	0x0801526d
 8015380:	08015265 	.word	0x08015265

08015384 <rcl_clock_fini>:
 8015384:	2800      	cmp	r0, #0
 8015386:	d02c      	beq.n	80153e2 <rcl_clock_fini+0x5e>
 8015388:	b538      	push	{r3, r4, r5, lr}
 801538a:	4604      	mov	r4, r0
 801538c:	3014      	adds	r0, #20
 801538e:	f7f9 f82b 	bl	800e3e8 <rcutils_allocator_is_valid>
 8015392:	b140      	cbz	r0, 80153a6 <rcl_clock_fini+0x22>
 8015394:	7823      	ldrb	r3, [r4, #0]
 8015396:	2b02      	cmp	r3, #2
 8015398:	d007      	beq.n	80153aa <rcl_clock_fini+0x26>
 801539a:	2b03      	cmp	r3, #3
 801539c:	d005      	beq.n	80153aa <rcl_clock_fini+0x26>
 801539e:	2b01      	cmp	r3, #1
 80153a0:	d00f      	beq.n	80153c2 <rcl_clock_fini+0x3e>
 80153a2:	200b      	movs	r0, #11
 80153a4:	bd38      	pop	{r3, r4, r5, pc}
 80153a6:	2001      	movs	r0, #1
 80153a8:	bd38      	pop	{r3, r4, r5, pc}
 80153aa:	68a0      	ldr	r0, [r4, #8]
 80153ac:	2800      	cmp	r0, #0
 80153ae:	d0f9      	beq.n	80153a4 <rcl_clock_fini+0x20>
 80153b0:	2500      	movs	r5, #0
 80153b2:	6860      	ldr	r0, [r4, #4]
 80153b4:	69a3      	ldr	r3, [r4, #24]
 80153b6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80153b8:	60a5      	str	r5, [r4, #8]
 80153ba:	4798      	blx	r3
 80153bc:	6065      	str	r5, [r4, #4]
 80153be:	4628      	mov	r0, r5
 80153c0:	bd38      	pop	{r3, r4, r5, pc}
 80153c2:	68a3      	ldr	r3, [r4, #8]
 80153c4:	b133      	cbz	r3, 80153d4 <rcl_clock_fini+0x50>
 80153c6:	2500      	movs	r5, #0
 80153c8:	69a3      	ldr	r3, [r4, #24]
 80153ca:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80153cc:	6860      	ldr	r0, [r4, #4]
 80153ce:	60a5      	str	r5, [r4, #8]
 80153d0:	4798      	blx	r3
 80153d2:	6065      	str	r5, [r4, #4]
 80153d4:	6920      	ldr	r0, [r4, #16]
 80153d6:	69a3      	ldr	r3, [r4, #24]
 80153d8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80153da:	4798      	blx	r3
 80153dc:	2000      	movs	r0, #0
 80153de:	6120      	str	r0, [r4, #16]
 80153e0:	bd38      	pop	{r3, r4, r5, pc}
 80153e2:	200b      	movs	r0, #11
 80153e4:	4770      	bx	lr
 80153e6:	bf00      	nop

080153e8 <rcl_clock_get_now>:
 80153e8:	b140      	cbz	r0, 80153fc <rcl_clock_get_now+0x14>
 80153ea:	b139      	cbz	r1, 80153fc <rcl_clock_get_now+0x14>
 80153ec:	7803      	ldrb	r3, [r0, #0]
 80153ee:	b11b      	cbz	r3, 80153f8 <rcl_clock_get_now+0x10>
 80153f0:	68c3      	ldr	r3, [r0, #12]
 80153f2:	b10b      	cbz	r3, 80153f8 <rcl_clock_get_now+0x10>
 80153f4:	6900      	ldr	r0, [r0, #16]
 80153f6:	4718      	bx	r3
 80153f8:	2001      	movs	r0, #1
 80153fa:	4770      	bx	lr
 80153fc:	200b      	movs	r0, #11
 80153fe:	4770      	bx	lr

08015400 <rcl_clock_add_jump_callback>:
 8015400:	b082      	sub	sp, #8
 8015402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015406:	a906      	add	r1, sp, #24
 8015408:	e881 000c 	stmia.w	r1, {r2, r3}
 801540c:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 8015410:	b320      	cbz	r0, 801545c <rcl_clock_add_jump_callback+0x5c>
 8015412:	4604      	mov	r4, r0
 8015414:	3014      	adds	r0, #20
 8015416:	f7f8 ffe7 	bl	800e3e8 <rcutils_allocator_is_valid>
 801541a:	b1f8      	cbz	r0, 801545c <rcl_clock_add_jump_callback+0x5c>
 801541c:	b1f6      	cbz	r6, 801545c <rcl_clock_add_jump_callback+0x5c>
 801541e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015420:	2b00      	cmp	r3, #0
 8015422:	db1b      	blt.n	801545c <rcl_clock_add_jump_callback+0x5c>
 8015424:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8015428:	2a01      	cmp	r2, #1
 801542a:	f173 0300 	sbcs.w	r3, r3, #0
 801542e:	da15      	bge.n	801545c <rcl_clock_add_jump_callback+0x5c>
 8015430:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8015434:	2f00      	cmp	r7, #0
 8015436:	d042      	beq.n	80154be <rcl_clock_add_jump_callback+0xbe>
 8015438:	2300      	movs	r3, #0
 801543a:	4602      	mov	r2, r0
 801543c:	e003      	b.n	8015446 <rcl_clock_add_jump_callback+0x46>
 801543e:	42bb      	cmp	r3, r7
 8015440:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8015444:	d011      	beq.n	801546a <rcl_clock_add_jump_callback+0x6a>
 8015446:	6811      	ldr	r1, [r2, #0]
 8015448:	42b1      	cmp	r1, r6
 801544a:	f103 0301 	add.w	r3, r3, #1
 801544e:	d1f6      	bne.n	801543e <rcl_clock_add_jump_callback+0x3e>
 8015450:	6a11      	ldr	r1, [r2, #32]
 8015452:	42a9      	cmp	r1, r5
 8015454:	d1f3      	bne.n	801543e <rcl_clock_add_jump_callback+0x3e>
 8015456:	f04f 0e01 	mov.w	lr, #1
 801545a:	e001      	b.n	8015460 <rcl_clock_add_jump_callback+0x60>
 801545c:	f04f 0e0b 	mov.w	lr, #11
 8015460:	4670      	mov	r0, lr
 8015462:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015466:	b002      	add	sp, #8
 8015468:	4770      	bx	lr
 801546a:	3301      	adds	r3, #1
 801546c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015470:	00d9      	lsls	r1, r3, #3
 8015472:	69e3      	ldr	r3, [r4, #28]
 8015474:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8015476:	4798      	blx	r3
 8015478:	b1f0      	cbz	r0, 80154b8 <rcl_clock_add_jump_callback+0xb8>
 801547a:	68a3      	ldr	r3, [r4, #8]
 801547c:	6060      	str	r0, [r4, #4]
 801547e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8015482:	f10d 0c18 	add.w	ip, sp, #24
 8015486:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 801548a:	f103 0801 	add.w	r8, r3, #1
 801548e:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8015492:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015496:	f106 0708 	add.w	r7, r6, #8
 801549a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801549c:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80154a0:	f04f 0e00 	mov.w	lr, #0
 80154a4:	e887 0003 	stmia.w	r7, {r0, r1}
 80154a8:	6235      	str	r5, [r6, #32]
 80154aa:	4670      	mov	r0, lr
 80154ac:	f8c4 8008 	str.w	r8, [r4, #8]
 80154b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80154b4:	b002      	add	sp, #8
 80154b6:	4770      	bx	lr
 80154b8:	f04f 0e0a 	mov.w	lr, #10
 80154bc:	e7d0      	b.n	8015460 <rcl_clock_add_jump_callback+0x60>
 80154be:	2128      	movs	r1, #40	@ 0x28
 80154c0:	e7d7      	b.n	8015472 <rcl_clock_add_jump_callback+0x72>
 80154c2:	bf00      	nop

080154c4 <rcl_clock_remove_jump_callback>:
 80154c4:	2800      	cmp	r0, #0
 80154c6:	d057      	beq.n	8015578 <rcl_clock_remove_jump_callback+0xb4>
 80154c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80154cc:	4605      	mov	r5, r0
 80154ce:	3014      	adds	r0, #20
 80154d0:	4688      	mov	r8, r1
 80154d2:	4692      	mov	sl, r2
 80154d4:	f7f8 ff88 	bl	800e3e8 <rcutils_allocator_is_valid>
 80154d8:	2800      	cmp	r0, #0
 80154da:	d03b      	beq.n	8015554 <rcl_clock_remove_jump_callback+0x90>
 80154dc:	f1b8 0f00 	cmp.w	r8, #0
 80154e0:	d038      	beq.n	8015554 <rcl_clock_remove_jump_callback+0x90>
 80154e2:	68ae      	ldr	r6, [r5, #8]
 80154e4:	b166      	cbz	r6, 8015500 <rcl_clock_remove_jump_callback+0x3c>
 80154e6:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80154ea:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 80154ee:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 80154f2:	464c      	mov	r4, r9
 80154f4:	6823      	ldr	r3, [r4, #0]
 80154f6:	4543      	cmp	r3, r8
 80154f8:	d005      	beq.n	8015506 <rcl_clock_remove_jump_callback+0x42>
 80154fa:	3428      	adds	r4, #40	@ 0x28
 80154fc:	42a7      	cmp	r7, r4
 80154fe:	d1f9      	bne.n	80154f4 <rcl_clock_remove_jump_callback+0x30>
 8015500:	2001      	movs	r0, #1
 8015502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015506:	6a23      	ldr	r3, [r4, #32]
 8015508:	3428      	adds	r4, #40	@ 0x28
 801550a:	42bc      	cmp	r4, r7
 801550c:	d02d      	beq.n	801556a <rcl_clock_remove_jump_callback+0xa6>
 801550e:	4553      	cmp	r3, sl
 8015510:	d1f0      	bne.n	80154f4 <rcl_clock_remove_jump_callback+0x30>
 8015512:	46a6      	mov	lr, r4
 8015514:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015518:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 801551c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015520:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015524:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015528:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801552c:	3428      	adds	r4, #40	@ 0x28
 801552e:	42a7      	cmp	r7, r4
 8015530:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015534:	d1ed      	bne.n	8015512 <rcl_clock_remove_jump_callback+0x4e>
 8015536:	3e01      	subs	r6, #1
 8015538:	60ae      	str	r6, [r5, #8]
 801553a:	b176      	cbz	r6, 801555a <rcl_clock_remove_jump_callback+0x96>
 801553c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8015540:	69eb      	ldr	r3, [r5, #28]
 8015542:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8015544:	00f1      	lsls	r1, r6, #3
 8015546:	4648      	mov	r0, r9
 8015548:	4798      	blx	r3
 801554a:	b1b8      	cbz	r0, 801557c <rcl_clock_remove_jump_callback+0xb8>
 801554c:	6068      	str	r0, [r5, #4]
 801554e:	2000      	movs	r0, #0
 8015550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015554:	200b      	movs	r0, #11
 8015556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801555a:	4648      	mov	r0, r9
 801555c:	69ab      	ldr	r3, [r5, #24]
 801555e:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8015560:	4798      	blx	r3
 8015562:	606e      	str	r6, [r5, #4]
 8015564:	4630      	mov	r0, r6
 8015566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801556a:	4553      	cmp	r3, sl
 801556c:	d1c8      	bne.n	8015500 <rcl_clock_remove_jump_callback+0x3c>
 801556e:	3e01      	subs	r6, #1
 8015570:	60ae      	str	r6, [r5, #8]
 8015572:	2e00      	cmp	r6, #0
 8015574:	d1e2      	bne.n	801553c <rcl_clock_remove_jump_callback+0x78>
 8015576:	e7f0      	b.n	801555a <rcl_clock_remove_jump_callback+0x96>
 8015578:	200b      	movs	r0, #11
 801557a:	4770      	bx	lr
 801557c:	200a      	movs	r0, #10
 801557e:	e7ea      	b.n	8015556 <rcl_clock_remove_jump_callback+0x92>

08015580 <rcl_get_zero_initialized_wait_set>:
 8015580:	b510      	push	{r4, lr}
 8015582:	4c08      	ldr	r4, [pc, #32]	@ (80155a4 <rcl_get_zero_initialized_wait_set+0x24>)
 8015584:	4686      	mov	lr, r0
 8015586:	4684      	mov	ip, r0
 8015588:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801558a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801558e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015590:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015594:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015596:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801559a:	6823      	ldr	r3, [r4, #0]
 801559c:	f8cc 3000 	str.w	r3, [ip]
 80155a0:	4670      	mov	r0, lr
 80155a2:	bd10      	pop	{r4, pc}
 80155a4:	0801b904 	.word	0x0801b904

080155a8 <rcl_wait_set_is_valid>:
 80155a8:	b118      	cbz	r0, 80155b2 <rcl_wait_set_is_valid+0xa>
 80155aa:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80155ac:	3800      	subs	r0, #0
 80155ae:	bf18      	it	ne
 80155b0:	2001      	movne	r0, #1
 80155b2:	4770      	bx	lr

080155b4 <rcl_wait_set_fini>:
 80155b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155b8:	b082      	sub	sp, #8
 80155ba:	2800      	cmp	r0, #0
 80155bc:	f000 8095 	beq.w	80156ea <rcl_wait_set_fini+0x136>
 80155c0:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80155c2:	4604      	mov	r4, r0
 80155c4:	2e00      	cmp	r6, #0
 80155c6:	f000 808c 	beq.w	80156e2 <rcl_wait_set_fini+0x12e>
 80155ca:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 80155cc:	f002 fa5e 	bl	8017a8c <rmw_destroy_wait_set>
 80155d0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80155d2:	1e06      	subs	r6, r0, #0
 80155d4:	bf18      	it	ne
 80155d6:	f44f 7661 	movne.w	r6, #900	@ 0x384
 80155da:	2d00      	cmp	r5, #0
 80155dc:	f000 8081 	beq.w	80156e2 <rcl_wait_set_fini+0x12e>
 80155e0:	6820      	ldr	r0, [r4, #0]
 80155e2:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80155e6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80155e8:	2700      	movs	r7, #0
 80155ea:	6067      	str	r7, [r4, #4]
 80155ec:	602f      	str	r7, [r5, #0]
 80155ee:	b120      	cbz	r0, 80155fa <rcl_wait_set_fini+0x46>
 80155f0:	9101      	str	r1, [sp, #4]
 80155f2:	47c0      	blx	r8
 80155f4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80155f6:	9901      	ldr	r1, [sp, #4]
 80155f8:	6027      	str	r7, [r4, #0]
 80155fa:	68a8      	ldr	r0, [r5, #8]
 80155fc:	b120      	cbz	r0, 8015608 <rcl_wait_set_fini+0x54>
 80155fe:	47c0      	blx	r8
 8015600:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015602:	2300      	movs	r3, #0
 8015604:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8015608:	68a0      	ldr	r0, [r4, #8]
 801560a:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801560c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801560e:	f04f 0800 	mov.w	r8, #0
 8015612:	f8c4 800c 	str.w	r8, [r4, #12]
 8015616:	f8c5 800c 	str.w	r8, [r5, #12]
 801561a:	b128      	cbz	r0, 8015628 <rcl_wait_set_fini+0x74>
 801561c:	47b8      	blx	r7
 801561e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015620:	f8c4 8008 	str.w	r8, [r4, #8]
 8015624:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8015626:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015628:	6968      	ldr	r0, [r5, #20]
 801562a:	f04f 0800 	mov.w	r8, #0
 801562e:	f8c5 8010 	str.w	r8, [r5, #16]
 8015632:	b128      	cbz	r0, 8015640 <rcl_wait_set_fini+0x8c>
 8015634:	47b8      	blx	r7
 8015636:	f8c5 8014 	str.w	r8, [r5, #20]
 801563a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801563c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801563e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015640:	6920      	ldr	r0, [r4, #16]
 8015642:	f04f 0800 	mov.w	r8, #0
 8015646:	f8c4 8014 	str.w	r8, [r4, #20]
 801564a:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 801564e:	b128      	cbz	r0, 801565c <rcl_wait_set_fini+0xa8>
 8015650:	47b8      	blx	r7
 8015652:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015654:	f8c4 8010 	str.w	r8, [r4, #16]
 8015658:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801565a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801565c:	69a0      	ldr	r0, [r4, #24]
 801565e:	f04f 0800 	mov.w	r8, #0
 8015662:	f8c4 801c 	str.w	r8, [r4, #28]
 8015666:	f8c5 8018 	str.w	r8, [r5, #24]
 801566a:	b128      	cbz	r0, 8015678 <rcl_wait_set_fini+0xc4>
 801566c:	9101      	str	r1, [sp, #4]
 801566e:	47b8      	blx	r7
 8015670:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015672:	9901      	ldr	r1, [sp, #4]
 8015674:	f8c4 8018 	str.w	r8, [r4, #24]
 8015678:	6a28      	ldr	r0, [r5, #32]
 801567a:	b120      	cbz	r0, 8015686 <rcl_wait_set_fini+0xd2>
 801567c:	47b8      	blx	r7
 801567e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015680:	2300      	movs	r3, #0
 8015682:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8015686:	6a20      	ldr	r0, [r4, #32]
 8015688:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801568c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801568e:	2700      	movs	r7, #0
 8015690:	6267      	str	r7, [r4, #36]	@ 0x24
 8015692:	626f      	str	r7, [r5, #36]	@ 0x24
 8015694:	b120      	cbz	r0, 80156a0 <rcl_wait_set_fini+0xec>
 8015696:	9101      	str	r1, [sp, #4]
 8015698:	47c0      	blx	r8
 801569a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801569c:	9901      	ldr	r1, [sp, #4]
 801569e:	6227      	str	r7, [r4, #32]
 80156a0:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80156a2:	b120      	cbz	r0, 80156ae <rcl_wait_set_fini+0xfa>
 80156a4:	47c0      	blx	r8
 80156a6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80156a8:	2300      	movs	r3, #0
 80156aa:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 80156ae:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80156b0:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80156b4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80156b6:	2700      	movs	r7, #0
 80156b8:	62e7      	str	r7, [r4, #44]	@ 0x2c
 80156ba:	632f      	str	r7, [r5, #48]	@ 0x30
 80156bc:	b120      	cbz	r0, 80156c8 <rcl_wait_set_fini+0x114>
 80156be:	9101      	str	r1, [sp, #4]
 80156c0:	47c0      	blx	r8
 80156c2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80156c4:	9901      	ldr	r1, [sp, #4]
 80156c6:	62a7      	str	r7, [r4, #40]	@ 0x28
 80156c8:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80156ca:	b120      	cbz	r0, 80156d6 <rcl_wait_set_fini+0x122>
 80156cc:	47c0      	blx	r8
 80156ce:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80156d0:	2300      	movs	r3, #0
 80156d2:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 80156d6:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80156d8:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80156da:	4628      	mov	r0, r5
 80156dc:	4798      	blx	r3
 80156de:	2300      	movs	r3, #0
 80156e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80156e2:	4630      	mov	r0, r6
 80156e4:	b002      	add	sp, #8
 80156e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156ea:	260b      	movs	r6, #11
 80156ec:	4630      	mov	r0, r6
 80156ee:	b002      	add	sp, #8
 80156f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080156f4 <rcl_wait_set_add_subscription>:
 80156f4:	b318      	cbz	r0, 801573e <rcl_wait_set_add_subscription+0x4a>
 80156f6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80156f8:	b570      	push	{r4, r5, r6, lr}
 80156fa:	4604      	mov	r4, r0
 80156fc:	b30b      	cbz	r3, 8015742 <rcl_wait_set_add_subscription+0x4e>
 80156fe:	b319      	cbz	r1, 8015748 <rcl_wait_set_add_subscription+0x54>
 8015700:	681d      	ldr	r5, [r3, #0]
 8015702:	6840      	ldr	r0, [r0, #4]
 8015704:	4285      	cmp	r5, r0
 8015706:	d217      	bcs.n	8015738 <rcl_wait_set_add_subscription+0x44>
 8015708:	6820      	ldr	r0, [r4, #0]
 801570a:	1c6e      	adds	r6, r5, #1
 801570c:	601e      	str	r6, [r3, #0]
 801570e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015712:	b102      	cbz	r2, 8015716 <rcl_wait_set_add_subscription+0x22>
 8015714:	6015      	str	r5, [r2, #0]
 8015716:	4608      	mov	r0, r1
 8015718:	f7f7 fbf6 	bl	800cf08 <rcl_subscription_get_rmw_handle>
 801571c:	b150      	cbz	r0, 8015734 <rcl_wait_set_add_subscription+0x40>
 801571e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015720:	6842      	ldr	r2, [r0, #4]
 8015722:	689b      	ldr	r3, [r3, #8]
 8015724:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015728:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801572a:	6853      	ldr	r3, [r2, #4]
 801572c:	3301      	adds	r3, #1
 801572e:	2000      	movs	r0, #0
 8015730:	6053      	str	r3, [r2, #4]
 8015732:	bd70      	pop	{r4, r5, r6, pc}
 8015734:	2001      	movs	r0, #1
 8015736:	bd70      	pop	{r4, r5, r6, pc}
 8015738:	f240 3086 	movw	r0, #902	@ 0x386
 801573c:	bd70      	pop	{r4, r5, r6, pc}
 801573e:	200b      	movs	r0, #11
 8015740:	4770      	bx	lr
 8015742:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015746:	bd70      	pop	{r4, r5, r6, pc}
 8015748:	200b      	movs	r0, #11
 801574a:	bd70      	pop	{r4, r5, r6, pc}

0801574c <rcl_wait_set_clear>:
 801574c:	2800      	cmp	r0, #0
 801574e:	d073      	beq.n	8015838 <rcl_wait_set_clear+0xec>
 8015750:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015752:	b510      	push	{r4, lr}
 8015754:	4604      	mov	r4, r0
 8015756:	2b00      	cmp	r3, #0
 8015758:	d070      	beq.n	801583c <rcl_wait_set_clear+0xf0>
 801575a:	6800      	ldr	r0, [r0, #0]
 801575c:	b138      	cbz	r0, 801576e <rcl_wait_set_clear+0x22>
 801575e:	6862      	ldr	r2, [r4, #4]
 8015760:	2100      	movs	r1, #0
 8015762:	0092      	lsls	r2, r2, #2
 8015764:	f004 f99e 	bl	8019aa4 <memset>
 8015768:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801576a:	2200      	movs	r2, #0
 801576c:	601a      	str	r2, [r3, #0]
 801576e:	68a0      	ldr	r0, [r4, #8]
 8015770:	b138      	cbz	r0, 8015782 <rcl_wait_set_clear+0x36>
 8015772:	68e2      	ldr	r2, [r4, #12]
 8015774:	2100      	movs	r1, #0
 8015776:	0092      	lsls	r2, r2, #2
 8015778:	f004 f994 	bl	8019aa4 <memset>
 801577c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801577e:	2200      	movs	r2, #0
 8015780:	60da      	str	r2, [r3, #12]
 8015782:	69a0      	ldr	r0, [r4, #24]
 8015784:	b138      	cbz	r0, 8015796 <rcl_wait_set_clear+0x4a>
 8015786:	69e2      	ldr	r2, [r4, #28]
 8015788:	2100      	movs	r1, #0
 801578a:	0092      	lsls	r2, r2, #2
 801578c:	f004 f98a 	bl	8019aa4 <memset>
 8015790:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015792:	2200      	movs	r2, #0
 8015794:	619a      	str	r2, [r3, #24]
 8015796:	6a20      	ldr	r0, [r4, #32]
 8015798:	b138      	cbz	r0, 80157aa <rcl_wait_set_clear+0x5e>
 801579a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801579c:	2100      	movs	r1, #0
 801579e:	0092      	lsls	r2, r2, #2
 80157a0:	f004 f980 	bl	8019aa4 <memset>
 80157a4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80157a6:	2200      	movs	r2, #0
 80157a8:	625a      	str	r2, [r3, #36]	@ 0x24
 80157aa:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80157ac:	b138      	cbz	r0, 80157be <rcl_wait_set_clear+0x72>
 80157ae:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80157b0:	2100      	movs	r1, #0
 80157b2:	0092      	lsls	r2, r2, #2
 80157b4:	f004 f976 	bl	8019aa4 <memset>
 80157b8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80157ba:	2200      	movs	r2, #0
 80157bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80157be:	6920      	ldr	r0, [r4, #16]
 80157c0:	b138      	cbz	r0, 80157d2 <rcl_wait_set_clear+0x86>
 80157c2:	6962      	ldr	r2, [r4, #20]
 80157c4:	2100      	movs	r1, #0
 80157c6:	0092      	lsls	r2, r2, #2
 80157c8:	f004 f96c 	bl	8019aa4 <memset>
 80157cc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80157ce:	2200      	movs	r2, #0
 80157d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80157d2:	6898      	ldr	r0, [r3, #8]
 80157d4:	b138      	cbz	r0, 80157e6 <rcl_wait_set_clear+0x9a>
 80157d6:	685a      	ldr	r2, [r3, #4]
 80157d8:	2100      	movs	r1, #0
 80157da:	0092      	lsls	r2, r2, #2
 80157dc:	f004 f962 	bl	8019aa4 <memset>
 80157e0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80157e2:	2200      	movs	r2, #0
 80157e4:	605a      	str	r2, [r3, #4]
 80157e6:	6958      	ldr	r0, [r3, #20]
 80157e8:	b138      	cbz	r0, 80157fa <rcl_wait_set_clear+0xae>
 80157ea:	691a      	ldr	r2, [r3, #16]
 80157ec:	2100      	movs	r1, #0
 80157ee:	0092      	lsls	r2, r2, #2
 80157f0:	f004 f958 	bl	8019aa4 <memset>
 80157f4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80157f6:	2200      	movs	r2, #0
 80157f8:	611a      	str	r2, [r3, #16]
 80157fa:	6a18      	ldr	r0, [r3, #32]
 80157fc:	b138      	cbz	r0, 801580e <rcl_wait_set_clear+0xc2>
 80157fe:	69da      	ldr	r2, [r3, #28]
 8015800:	2100      	movs	r1, #0
 8015802:	0092      	lsls	r2, r2, #2
 8015804:	f004 f94e 	bl	8019aa4 <memset>
 8015808:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801580a:	2200      	movs	r2, #0
 801580c:	61da      	str	r2, [r3, #28]
 801580e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8015810:	b138      	cbz	r0, 8015822 <rcl_wait_set_clear+0xd6>
 8015812:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015814:	2100      	movs	r1, #0
 8015816:	0092      	lsls	r2, r2, #2
 8015818:	f004 f944 	bl	8019aa4 <memset>
 801581c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801581e:	2200      	movs	r2, #0
 8015820:	629a      	str	r2, [r3, #40]	@ 0x28
 8015822:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8015824:	b138      	cbz	r0, 8015836 <rcl_wait_set_clear+0xea>
 8015826:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015828:	2100      	movs	r1, #0
 801582a:	0092      	lsls	r2, r2, #2
 801582c:	f004 f93a 	bl	8019aa4 <memset>
 8015830:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015832:	2000      	movs	r0, #0
 8015834:	6358      	str	r0, [r3, #52]	@ 0x34
 8015836:	bd10      	pop	{r4, pc}
 8015838:	200b      	movs	r0, #11
 801583a:	4770      	bx	lr
 801583c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015840:	bd10      	pop	{r4, pc}
 8015842:	bf00      	nop

08015844 <rcl_wait_set_resize>:
 8015844:	2800      	cmp	r0, #0
 8015846:	f000 8185 	beq.w	8015b54 <rcl_wait_set_resize+0x310>
 801584a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801584e:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8015850:	b083      	sub	sp, #12
 8015852:	4605      	mov	r5, r0
 8015854:	2c00      	cmp	r4, #0
 8015856:	f000 817f 	beq.w	8015b58 <rcl_wait_set_resize+0x314>
 801585a:	f04f 0900 	mov.w	r9, #0
 801585e:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8015862:	461f      	mov	r7, r3
 8015864:	4688      	mov	r8, r1
 8015866:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 801586a:	4616      	mov	r6, r2
 801586c:	f8c0 9004 	str.w	r9, [r0, #4]
 8015870:	f8c4 9000 	str.w	r9, [r4]
 8015874:	2900      	cmp	r1, #0
 8015876:	f000 80bd 	beq.w	80159f4 <rcl_wait_set_resize+0x1b0>
 801587a:	008c      	lsls	r4, r1, #2
 801587c:	6800      	ldr	r0, [r0, #0]
 801587e:	9301      	str	r3, [sp, #4]
 8015880:	4652      	mov	r2, sl
 8015882:	4621      	mov	r1, r4
 8015884:	4798      	blx	r3
 8015886:	9b01      	ldr	r3, [sp, #4]
 8015888:	6028      	str	r0, [r5, #0]
 801588a:	2800      	cmp	r0, #0
 801588c:	f000 80cb 	beq.w	8015a26 <rcl_wait_set_resize+0x1e2>
 8015890:	4622      	mov	r2, r4
 8015892:	4649      	mov	r1, r9
 8015894:	9301      	str	r3, [sp, #4]
 8015896:	f004 f905 	bl	8019aa4 <memset>
 801589a:	f8c5 8004 	str.w	r8, [r5, #4]
 801589e:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 80158a2:	9b01      	ldr	r3, [sp, #4]
 80158a4:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80158a8:	f8c8 9004 	str.w	r9, [r8, #4]
 80158ac:	4652      	mov	r2, sl
 80158ae:	4621      	mov	r1, r4
 80158b0:	4798      	blx	r3
 80158b2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80158b4:	f8c8 0008 	str.w	r0, [r8, #8]
 80158b8:	689b      	ldr	r3, [r3, #8]
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	f000 80ac 	beq.w	8015a18 <rcl_wait_set_resize+0x1d4>
 80158c0:	4622      	mov	r2, r4
 80158c2:	4649      	mov	r1, r9
 80158c4:	4618      	mov	r0, r3
 80158c6:	f004 f8ed 	bl	8019aa4 <memset>
 80158ca:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80158cc:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80158d0:	f04f 0800 	mov.w	r8, #0
 80158d4:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 80158d8:	f8c5 800c 	str.w	r8, [r5, #12]
 80158dc:	f8c4 800c 	str.w	r8, [r4, #12]
 80158e0:	2e00      	cmp	r6, #0
 80158e2:	f040 80a4 	bne.w	8015a2e <rcl_wait_set_resize+0x1ea>
 80158e6:	68a8      	ldr	r0, [r5, #8]
 80158e8:	b128      	cbz	r0, 80158f6 <rcl_wait_set_resize+0xb2>
 80158ea:	4649      	mov	r1, r9
 80158ec:	4790      	blx	r2
 80158ee:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80158f0:	60ae      	str	r6, [r5, #8]
 80158f2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80158f6:	f04f 0800 	mov.w	r8, #0
 80158fa:	19f6      	adds	r6, r6, r7
 80158fc:	f8c4 8010 	str.w	r8, [r4, #16]
 8015900:	f040 80ac 	bne.w	8015a5c <rcl_wait_set_resize+0x218>
 8015904:	6960      	ldr	r0, [r4, #20]
 8015906:	b130      	cbz	r0, 8015916 <rcl_wait_set_resize+0xd2>
 8015908:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801590a:	4649      	mov	r1, r9
 801590c:	4798      	blx	r3
 801590e:	6166      	str	r6, [r4, #20]
 8015910:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015912:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015916:	2600      	movs	r6, #0
 8015918:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801591c:	616e      	str	r6, [r5, #20]
 801591e:	6426      	str	r6, [r4, #64]	@ 0x40
 8015920:	2f00      	cmp	r7, #0
 8015922:	f040 80ad 	bne.w	8015a80 <rcl_wait_set_resize+0x23c>
 8015926:	6928      	ldr	r0, [r5, #16]
 8015928:	b138      	cbz	r0, 801593a <rcl_wait_set_resize+0xf6>
 801592a:	4649      	mov	r1, r9
 801592c:	47d0      	blx	sl
 801592e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015930:	612f      	str	r7, [r5, #16]
 8015932:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8015936:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801593a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801593c:	2600      	movs	r6, #0
 801593e:	61ee      	str	r6, [r5, #28]
 8015940:	61a6      	str	r6, [r4, #24]
 8015942:	2b00      	cmp	r3, #0
 8015944:	f040 80af 	bne.w	8015aa6 <rcl_wait_set_resize+0x262>
 8015948:	69a8      	ldr	r0, [r5, #24]
 801594a:	b120      	cbz	r0, 8015956 <rcl_wait_set_resize+0x112>
 801594c:	4649      	mov	r1, r9
 801594e:	47d0      	blx	sl
 8015950:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015952:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015954:	61ab      	str	r3, [r5, #24]
 8015956:	6a20      	ldr	r0, [r4, #32]
 8015958:	b128      	cbz	r0, 8015966 <rcl_wait_set_resize+0x122>
 801595a:	4649      	mov	r1, r9
 801595c:	47d0      	blx	sl
 801595e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015960:	2300      	movs	r3, #0
 8015962:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8015966:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015968:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801596a:	2600      	movs	r6, #0
 801596c:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8015970:	626e      	str	r6, [r5, #36]	@ 0x24
 8015972:	6266      	str	r6, [r4, #36]	@ 0x24
 8015974:	2b00      	cmp	r3, #0
 8015976:	f000 80b6 	beq.w	8015ae6 <rcl_wait_set_resize+0x2a2>
 801597a:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801597e:	6a28      	ldr	r0, [r5, #32]
 8015980:	463a      	mov	r2, r7
 8015982:	4651      	mov	r1, sl
 8015984:	47c8      	blx	r9
 8015986:	6228      	str	r0, [r5, #32]
 8015988:	2800      	cmp	r0, #0
 801598a:	d04c      	beq.n	8015a26 <rcl_wait_set_resize+0x1e2>
 801598c:	4652      	mov	r2, sl
 801598e:	4631      	mov	r1, r6
 8015990:	f004 f888 	bl	8019aa4 <memset>
 8015994:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015996:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015998:	626b      	str	r3, [r5, #36]	@ 0x24
 801599a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801599c:	62a6      	str	r6, [r4, #40]	@ 0x28
 801599e:	463a      	mov	r2, r7
 80159a0:	4651      	mov	r1, sl
 80159a2:	47c8      	blx	r9
 80159a4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80159a6:	62e0      	str	r0, [r4, #44]	@ 0x2c
 80159a8:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 80159aa:	2c00      	cmp	r4, #0
 80159ac:	f000 80f0 	beq.w	8015b90 <rcl_wait_set_resize+0x34c>
 80159b0:	4620      	mov	r0, r4
 80159b2:	4652      	mov	r2, sl
 80159b4:	4631      	mov	r1, r6
 80159b6:	f004 f875 	bl	8019aa4 <memset>
 80159ba:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80159bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80159be:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80159c0:	2600      	movs	r6, #0
 80159c2:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80159c6:	62ee      	str	r6, [r5, #44]	@ 0x2c
 80159c8:	6326      	str	r6, [r4, #48]	@ 0x30
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	f040 809d 	bne.w	8015b0a <rcl_wait_set_resize+0x2c6>
 80159d0:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80159d2:	b120      	cbz	r0, 80159de <rcl_wait_set_resize+0x19a>
 80159d4:	4639      	mov	r1, r7
 80159d6:	47c0      	blx	r8
 80159d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80159da:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80159dc:	62ab      	str	r3, [r5, #40]	@ 0x28
 80159de:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80159e0:	b310      	cbz	r0, 8015a28 <rcl_wait_set_resize+0x1e4>
 80159e2:	4639      	mov	r1, r7
 80159e4:	47c0      	blx	r8
 80159e6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80159e8:	2000      	movs	r0, #0
 80159ea:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 80159ee:	b003      	add	sp, #12
 80159f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159f4:	6800      	ldr	r0, [r0, #0]
 80159f6:	b120      	cbz	r0, 8015a02 <rcl_wait_set_resize+0x1be>
 80159f8:	4651      	mov	r1, sl
 80159fa:	47d8      	blx	fp
 80159fc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80159fe:	f8c5 8000 	str.w	r8, [r5]
 8015a02:	68a0      	ldr	r0, [r4, #8]
 8015a04:	2800      	cmp	r0, #0
 8015a06:	f43f af61 	beq.w	80158cc <rcl_wait_set_resize+0x88>
 8015a0a:	4651      	mov	r1, sl
 8015a0c:	47d8      	blx	fp
 8015a0e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015a10:	2300      	movs	r3, #0
 8015a12:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8015a16:	e759      	b.n	80158cc <rcl_wait_set_resize+0x88>
 8015a18:	6828      	ldr	r0, [r5, #0]
 8015a1a:	9301      	str	r3, [sp, #4]
 8015a1c:	4651      	mov	r1, sl
 8015a1e:	47d8      	blx	fp
 8015a20:	9b01      	ldr	r3, [sp, #4]
 8015a22:	e9c5 3300 	strd	r3, r3, [r5]
 8015a26:	200a      	movs	r0, #10
 8015a28:	b003      	add	sp, #12
 8015a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a2e:	00b4      	lsls	r4, r6, #2
 8015a30:	68a8      	ldr	r0, [r5, #8]
 8015a32:	464a      	mov	r2, r9
 8015a34:	4621      	mov	r1, r4
 8015a36:	4798      	blx	r3
 8015a38:	60a8      	str	r0, [r5, #8]
 8015a3a:	2800      	cmp	r0, #0
 8015a3c:	d0f3      	beq.n	8015a26 <rcl_wait_set_resize+0x1e2>
 8015a3e:	4622      	mov	r2, r4
 8015a40:	4641      	mov	r1, r8
 8015a42:	f004 f82f 	bl	8019aa4 <memset>
 8015a46:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015a48:	60ee      	str	r6, [r5, #12]
 8015a4a:	f04f 0800 	mov.w	r8, #0
 8015a4e:	19f6      	adds	r6, r6, r7
 8015a50:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015a54:	f8c4 8010 	str.w	r8, [r4, #16]
 8015a58:	f43f af54 	beq.w	8015904 <rcl_wait_set_resize+0xc0>
 8015a5c:	00b6      	lsls	r6, r6, #2
 8015a5e:	464a      	mov	r2, r9
 8015a60:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8015a62:	6960      	ldr	r0, [r4, #20]
 8015a64:	4631      	mov	r1, r6
 8015a66:	4798      	blx	r3
 8015a68:	4681      	mov	r9, r0
 8015a6a:	6160      	str	r0, [r4, #20]
 8015a6c:	2800      	cmp	r0, #0
 8015a6e:	d076      	beq.n	8015b5e <rcl_wait_set_resize+0x31a>
 8015a70:	4632      	mov	r2, r6
 8015a72:	4641      	mov	r1, r8
 8015a74:	f004 f816 	bl	8019aa4 <memset>
 8015a78:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015a7a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015a7e:	e74a      	b.n	8015916 <rcl_wait_set_resize+0xd2>
 8015a80:	00bc      	lsls	r4, r7, #2
 8015a82:	6928      	ldr	r0, [r5, #16]
 8015a84:	464a      	mov	r2, r9
 8015a86:	4621      	mov	r1, r4
 8015a88:	47c0      	blx	r8
 8015a8a:	6128      	str	r0, [r5, #16]
 8015a8c:	2800      	cmp	r0, #0
 8015a8e:	d0ca      	beq.n	8015a26 <rcl_wait_set_resize+0x1e2>
 8015a90:	4622      	mov	r2, r4
 8015a92:	4631      	mov	r1, r6
 8015a94:	f004 f806 	bl	8019aa4 <memset>
 8015a98:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015a9a:	616f      	str	r7, [r5, #20]
 8015a9c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8015aa0:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015aa4:	e749      	b.n	801593a <rcl_wait_set_resize+0xf6>
 8015aa6:	009c      	lsls	r4, r3, #2
 8015aa8:	69a8      	ldr	r0, [r5, #24]
 8015aaa:	464a      	mov	r2, r9
 8015aac:	4621      	mov	r1, r4
 8015aae:	47c0      	blx	r8
 8015ab0:	61a8      	str	r0, [r5, #24]
 8015ab2:	2800      	cmp	r0, #0
 8015ab4:	d0b7      	beq.n	8015a26 <rcl_wait_set_resize+0x1e2>
 8015ab6:	4622      	mov	r2, r4
 8015ab8:	4631      	mov	r1, r6
 8015aba:	f003 fff3 	bl	8019aa4 <memset>
 8015abe:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8015ac0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015ac2:	61eb      	str	r3, [r5, #28]
 8015ac4:	6a38      	ldr	r0, [r7, #32]
 8015ac6:	61fe      	str	r6, [r7, #28]
 8015ac8:	464a      	mov	r2, r9
 8015aca:	4621      	mov	r1, r4
 8015acc:	47c0      	blx	r8
 8015ace:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015ad0:	6238      	str	r0, [r7, #32]
 8015ad2:	6a1f      	ldr	r7, [r3, #32]
 8015ad4:	2f00      	cmp	r7, #0
 8015ad6:	d054      	beq.n	8015b82 <rcl_wait_set_resize+0x33e>
 8015ad8:	4622      	mov	r2, r4
 8015ada:	4631      	mov	r1, r6
 8015adc:	4638      	mov	r0, r7
 8015ade:	f003 ffe1 	bl	8019aa4 <memset>
 8015ae2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015ae4:	e73f      	b.n	8015966 <rcl_wait_set_resize+0x122>
 8015ae6:	6a28      	ldr	r0, [r5, #32]
 8015ae8:	b120      	cbz	r0, 8015af4 <rcl_wait_set_resize+0x2b0>
 8015aea:	4639      	mov	r1, r7
 8015aec:	47c0      	blx	r8
 8015aee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015af0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015af2:	622b      	str	r3, [r5, #32]
 8015af4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8015af6:	2800      	cmp	r0, #0
 8015af8:	f43f af60 	beq.w	80159bc <rcl_wait_set_resize+0x178>
 8015afc:	4639      	mov	r1, r7
 8015afe:	47c0      	blx	r8
 8015b00:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015b02:	2300      	movs	r3, #0
 8015b04:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8015b08:	e758      	b.n	80159bc <rcl_wait_set_resize+0x178>
 8015b0a:	009c      	lsls	r4, r3, #2
 8015b0c:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8015b0e:	463a      	mov	r2, r7
 8015b10:	4621      	mov	r1, r4
 8015b12:	47c8      	blx	r9
 8015b14:	62a8      	str	r0, [r5, #40]	@ 0x28
 8015b16:	2800      	cmp	r0, #0
 8015b18:	d085      	beq.n	8015a26 <rcl_wait_set_resize+0x1e2>
 8015b1a:	4622      	mov	r2, r4
 8015b1c:	4631      	mov	r1, r6
 8015b1e:	f003 ffc1 	bl	8019aa4 <memset>
 8015b22:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8015b26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015b28:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8015b2a:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8015b2e:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8015b32:	463a      	mov	r2, r7
 8015b34:	4621      	mov	r1, r4
 8015b36:	47c8      	blx	r9
 8015b38:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015b3a:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8015b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015b40:	b36b      	cbz	r3, 8015b9e <rcl_wait_set_resize+0x35a>
 8015b42:	4622      	mov	r2, r4
 8015b44:	4631      	mov	r1, r6
 8015b46:	4618      	mov	r0, r3
 8015b48:	f003 ffac 	bl	8019aa4 <memset>
 8015b4c:	4630      	mov	r0, r6
 8015b4e:	b003      	add	sp, #12
 8015b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b54:	200b      	movs	r0, #11
 8015b56:	4770      	bx	lr
 8015b58:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015b5c:	e764      	b.n	8015a28 <rcl_wait_set_resize+0x1e4>
 8015b5e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015b60:	68a8      	ldr	r0, [r5, #8]
 8015b62:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8015b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015b66:	4798      	blx	r3
 8015b68:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015b6a:	6928      	ldr	r0, [r5, #16]
 8015b6c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015b6e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8015b70:	f8c5 900c 	str.w	r9, [r5, #12]
 8015b74:	f8c5 9008 	str.w	r9, [r5, #8]
 8015b78:	4790      	blx	r2
 8015b7a:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8015b7e:	200a      	movs	r0, #10
 8015b80:	e752      	b.n	8015a28 <rcl_wait_set_resize+0x1e4>
 8015b82:	69a8      	ldr	r0, [r5, #24]
 8015b84:	4649      	mov	r1, r9
 8015b86:	47d0      	blx	sl
 8015b88:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8015b8c:	200a      	movs	r0, #10
 8015b8e:	e74b      	b.n	8015a28 <rcl_wait_set_resize+0x1e4>
 8015b90:	6a28      	ldr	r0, [r5, #32]
 8015b92:	4639      	mov	r1, r7
 8015b94:	47c0      	blx	r8
 8015b96:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8015b9a:	200a      	movs	r0, #10
 8015b9c:	e744      	b.n	8015a28 <rcl_wait_set_resize+0x1e4>
 8015b9e:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8015ba0:	9301      	str	r3, [sp, #4]
 8015ba2:	4639      	mov	r1, r7
 8015ba4:	47c0      	blx	r8
 8015ba6:	9b01      	ldr	r3, [sp, #4]
 8015ba8:	200a      	movs	r0, #10
 8015baa:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8015bae:	e73b      	b.n	8015a28 <rcl_wait_set_resize+0x1e4>

08015bb0 <rcl_wait_set_init>:
 8015bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015bb4:	b084      	sub	sp, #16
 8015bb6:	4604      	mov	r4, r0
 8015bb8:	a810      	add	r0, sp, #64	@ 0x40
 8015bba:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8015bbe:	460f      	mov	r7, r1
 8015bc0:	4690      	mov	r8, r2
 8015bc2:	4699      	mov	r9, r3
 8015bc4:	f7f8 fc10 	bl	800e3e8 <rcutils_allocator_is_valid>
 8015bc8:	2800      	cmp	r0, #0
 8015bca:	d06b      	beq.n	8015ca4 <rcl_wait_set_init+0xf4>
 8015bcc:	2c00      	cmp	r4, #0
 8015bce:	d069      	beq.n	8015ca4 <rcl_wait_set_init+0xf4>
 8015bd0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015bd2:	b125      	cbz	r5, 8015bde <rcl_wait_set_init+0x2e>
 8015bd4:	2564      	movs	r5, #100	@ 0x64
 8015bd6:	4628      	mov	r0, r5
 8015bd8:	b004      	add	sp, #16
 8015bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015bde:	f1ba 0f00 	cmp.w	sl, #0
 8015be2:	d05f      	beq.n	8015ca4 <rcl_wait_set_init+0xf4>
 8015be4:	4650      	mov	r0, sl
 8015be6:	f7f6 fb69 	bl	800c2bc <rcl_context_is_valid>
 8015bea:	2800      	cmp	r0, #0
 8015bec:	d067      	beq.n	8015cbe <rcl_wait_set_init+0x10e>
 8015bee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015bf0:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8015bf2:	205c      	movs	r0, #92	@ 0x5c
 8015bf4:	4798      	blx	r3
 8015bf6:	6320      	str	r0, [r4, #48]	@ 0x30
 8015bf8:	2800      	cmp	r0, #0
 8015bfa:	d062      	beq.n	8015cc2 <rcl_wait_set_init+0x112>
 8015bfc:	4629      	mov	r1, r5
 8015bfe:	225c      	movs	r2, #92	@ 0x5c
 8015c00:	f003 ff50 	bl	8019aa4 <memset>
 8015c04:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8015c08:	eb03 0e02 	add.w	lr, r3, r2
 8015c0c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015c0e:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8015c10:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8015c14:	449e      	add	lr, r3
 8015c16:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015c1a:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8015c1e:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8015c22:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8015c26:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8015c2a:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8015c2e:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8015c32:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8015c36:	f8da a000 	ldr.w	sl, [sl]
 8015c3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015c3c:	44c6      	add	lr, r8
 8015c3e:	f8dc 3000 	ldr.w	r3, [ip]
 8015c42:	602b      	str	r3, [r5, #0]
 8015c44:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8015c48:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8015c4c:	f001 ff14 	bl	8017a78 <rmw_create_wait_set>
 8015c50:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015c52:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8015c54:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8015c56:	b350      	cbz	r0, 8015cae <rcl_wait_set_init+0xfe>
 8015c58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015c5a:	9302      	str	r3, [sp, #8]
 8015c5c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015c5e:	9301      	str	r3, [sp, #4]
 8015c60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015c62:	9300      	str	r3, [sp, #0]
 8015c64:	4642      	mov	r2, r8
 8015c66:	464b      	mov	r3, r9
 8015c68:	4639      	mov	r1, r7
 8015c6a:	4620      	mov	r0, r4
 8015c6c:	f7ff fdea 	bl	8015844 <rcl_wait_set_resize>
 8015c70:	4605      	mov	r5, r0
 8015c72:	2800      	cmp	r0, #0
 8015c74:	d0af      	beq.n	8015bd6 <rcl_wait_set_init+0x26>
 8015c76:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015c78:	bb2b      	cbnz	r3, 8015cc6 <rcl_wait_set_init+0x116>
 8015c7a:	2600      	movs	r6, #0
 8015c7c:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8015c80:	9600      	str	r6, [sp, #0]
 8015c82:	4633      	mov	r3, r6
 8015c84:	4632      	mov	r2, r6
 8015c86:	4631      	mov	r1, r6
 8015c88:	4620      	mov	r0, r4
 8015c8a:	f7ff fddb 	bl	8015844 <rcl_wait_set_resize>
 8015c8e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8015c90:	2800      	cmp	r0, #0
 8015c92:	d0a0      	beq.n	8015bd6 <rcl_wait_set_init+0x26>
 8015c94:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8015c96:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8015c98:	4798      	blx	r3
 8015c9a:	4628      	mov	r0, r5
 8015c9c:	6326      	str	r6, [r4, #48]	@ 0x30
 8015c9e:	b004      	add	sp, #16
 8015ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ca4:	250b      	movs	r5, #11
 8015ca6:	4628      	mov	r0, r5
 8015ca8:	b004      	add	sp, #16
 8015caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015cae:	2501      	movs	r5, #1
 8015cb0:	f001 feec 	bl	8017a8c <rmw_destroy_wait_set>
 8015cb4:	2800      	cmp	r0, #0
 8015cb6:	bf18      	it	ne
 8015cb8:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8015cbc:	e7dd      	b.n	8015c7a <rcl_wait_set_init+0xca>
 8015cbe:	2565      	movs	r5, #101	@ 0x65
 8015cc0:	e789      	b.n	8015bd6 <rcl_wait_set_init+0x26>
 8015cc2:	250a      	movs	r5, #10
 8015cc4:	e787      	b.n	8015bd6 <rcl_wait_set_init+0x26>
 8015cc6:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8015cc8:	e7f2      	b.n	8015cb0 <rcl_wait_set_init+0x100>
 8015cca:	bf00      	nop

08015ccc <rcl_wait_set_add_guard_condition>:
 8015ccc:	b318      	cbz	r0, 8015d16 <rcl_wait_set_add_guard_condition+0x4a>
 8015cce:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015cd0:	b570      	push	{r4, r5, r6, lr}
 8015cd2:	4604      	mov	r4, r0
 8015cd4:	b30b      	cbz	r3, 8015d1a <rcl_wait_set_add_guard_condition+0x4e>
 8015cd6:	b319      	cbz	r1, 8015d20 <rcl_wait_set_add_guard_condition+0x54>
 8015cd8:	68dd      	ldr	r5, [r3, #12]
 8015cda:	68c0      	ldr	r0, [r0, #12]
 8015cdc:	4285      	cmp	r5, r0
 8015cde:	d217      	bcs.n	8015d10 <rcl_wait_set_add_guard_condition+0x44>
 8015ce0:	68a0      	ldr	r0, [r4, #8]
 8015ce2:	1c6e      	adds	r6, r5, #1
 8015ce4:	60de      	str	r6, [r3, #12]
 8015ce6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015cea:	b102      	cbz	r2, 8015cee <rcl_wait_set_add_guard_condition+0x22>
 8015cec:	6015      	str	r5, [r2, #0]
 8015cee:	4608      	mov	r0, r1
 8015cf0:	f7ff f874 	bl	8014ddc <rcl_guard_condition_get_rmw_handle>
 8015cf4:	b150      	cbz	r0, 8015d0c <rcl_wait_set_add_guard_condition+0x40>
 8015cf6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015cf8:	6842      	ldr	r2, [r0, #4]
 8015cfa:	695b      	ldr	r3, [r3, #20]
 8015cfc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015d00:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015d02:	6913      	ldr	r3, [r2, #16]
 8015d04:	3301      	adds	r3, #1
 8015d06:	2000      	movs	r0, #0
 8015d08:	6113      	str	r3, [r2, #16]
 8015d0a:	bd70      	pop	{r4, r5, r6, pc}
 8015d0c:	2001      	movs	r0, #1
 8015d0e:	bd70      	pop	{r4, r5, r6, pc}
 8015d10:	f240 3086 	movw	r0, #902	@ 0x386
 8015d14:	bd70      	pop	{r4, r5, r6, pc}
 8015d16:	200b      	movs	r0, #11
 8015d18:	4770      	bx	lr
 8015d1a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015d1e:	bd70      	pop	{r4, r5, r6, pc}
 8015d20:	200b      	movs	r0, #11
 8015d22:	bd70      	pop	{r4, r5, r6, pc}

08015d24 <rcl_wait_set_add_timer>:
 8015d24:	b328      	cbz	r0, 8015d72 <rcl_wait_set_add_timer+0x4e>
 8015d26:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015d28:	b570      	push	{r4, r5, r6, lr}
 8015d2a:	4604      	mov	r4, r0
 8015d2c:	b31b      	cbz	r3, 8015d76 <rcl_wait_set_add_timer+0x52>
 8015d2e:	b329      	cbz	r1, 8015d7c <rcl_wait_set_add_timer+0x58>
 8015d30:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8015d32:	6965      	ldr	r5, [r4, #20]
 8015d34:	42a8      	cmp	r0, r5
 8015d36:	d219      	bcs.n	8015d6c <rcl_wait_set_add_timer+0x48>
 8015d38:	6925      	ldr	r5, [r4, #16]
 8015d3a:	1c46      	adds	r6, r0, #1
 8015d3c:	641e      	str	r6, [r3, #64]	@ 0x40
 8015d3e:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8015d42:	b102      	cbz	r2, 8015d46 <rcl_wait_set_add_timer+0x22>
 8015d44:	6010      	str	r0, [r2, #0]
 8015d46:	4608      	mov	r0, r1
 8015d48:	f7f7 fb5e 	bl	800d408 <rcl_timer_get_guard_condition>
 8015d4c:	b168      	cbz	r0, 8015d6a <rcl_wait_set_add_timer+0x46>
 8015d4e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015d50:	68e3      	ldr	r3, [r4, #12]
 8015d52:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8015d54:	3b01      	subs	r3, #1
 8015d56:	441d      	add	r5, r3
 8015d58:	f7ff f840 	bl	8014ddc <rcl_guard_condition_get_rmw_handle>
 8015d5c:	b180      	cbz	r0, 8015d80 <rcl_wait_set_add_timer+0x5c>
 8015d5e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015d60:	6842      	ldr	r2, [r0, #4]
 8015d62:	695b      	ldr	r3, [r3, #20]
 8015d64:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015d68:	2000      	movs	r0, #0
 8015d6a:	bd70      	pop	{r4, r5, r6, pc}
 8015d6c:	f240 3086 	movw	r0, #902	@ 0x386
 8015d70:	bd70      	pop	{r4, r5, r6, pc}
 8015d72:	200b      	movs	r0, #11
 8015d74:	4770      	bx	lr
 8015d76:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015d7a:	bd70      	pop	{r4, r5, r6, pc}
 8015d7c:	200b      	movs	r0, #11
 8015d7e:	bd70      	pop	{r4, r5, r6, pc}
 8015d80:	2001      	movs	r0, #1
 8015d82:	bd70      	pop	{r4, r5, r6, pc}

08015d84 <rcl_wait_set_add_client>:
 8015d84:	b318      	cbz	r0, 8015dce <rcl_wait_set_add_client+0x4a>
 8015d86:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015d88:	b570      	push	{r4, r5, r6, lr}
 8015d8a:	4604      	mov	r4, r0
 8015d8c:	b30b      	cbz	r3, 8015dd2 <rcl_wait_set_add_client+0x4e>
 8015d8e:	b319      	cbz	r1, 8015dd8 <rcl_wait_set_add_client+0x54>
 8015d90:	699d      	ldr	r5, [r3, #24]
 8015d92:	69c0      	ldr	r0, [r0, #28]
 8015d94:	4285      	cmp	r5, r0
 8015d96:	d217      	bcs.n	8015dc8 <rcl_wait_set_add_client+0x44>
 8015d98:	69a0      	ldr	r0, [r4, #24]
 8015d9a:	1c6e      	adds	r6, r5, #1
 8015d9c:	619e      	str	r6, [r3, #24]
 8015d9e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015da2:	b102      	cbz	r2, 8015da6 <rcl_wait_set_add_client+0x22>
 8015da4:	6015      	str	r5, [r2, #0]
 8015da6:	4608      	mov	r0, r1
 8015da8:	f7fe fe6c 	bl	8014a84 <rcl_client_get_rmw_handle>
 8015dac:	b150      	cbz	r0, 8015dc4 <rcl_wait_set_add_client+0x40>
 8015dae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015db0:	6842      	ldr	r2, [r0, #4]
 8015db2:	6a1b      	ldr	r3, [r3, #32]
 8015db4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015db8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015dba:	69d3      	ldr	r3, [r2, #28]
 8015dbc:	3301      	adds	r3, #1
 8015dbe:	2000      	movs	r0, #0
 8015dc0:	61d3      	str	r3, [r2, #28]
 8015dc2:	bd70      	pop	{r4, r5, r6, pc}
 8015dc4:	2001      	movs	r0, #1
 8015dc6:	bd70      	pop	{r4, r5, r6, pc}
 8015dc8:	f240 3086 	movw	r0, #902	@ 0x386
 8015dcc:	bd70      	pop	{r4, r5, r6, pc}
 8015dce:	200b      	movs	r0, #11
 8015dd0:	4770      	bx	lr
 8015dd2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015dd6:	bd70      	pop	{r4, r5, r6, pc}
 8015dd8:	200b      	movs	r0, #11
 8015dda:	bd70      	pop	{r4, r5, r6, pc}

08015ddc <rcl_wait_set_add_service>:
 8015ddc:	b318      	cbz	r0, 8015e26 <rcl_wait_set_add_service+0x4a>
 8015dde:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015de0:	b570      	push	{r4, r5, r6, lr}
 8015de2:	4604      	mov	r4, r0
 8015de4:	b30b      	cbz	r3, 8015e2a <rcl_wait_set_add_service+0x4e>
 8015de6:	b319      	cbz	r1, 8015e30 <rcl_wait_set_add_service+0x54>
 8015de8:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8015dea:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8015dec:	4285      	cmp	r5, r0
 8015dee:	d217      	bcs.n	8015e20 <rcl_wait_set_add_service+0x44>
 8015df0:	6a20      	ldr	r0, [r4, #32]
 8015df2:	1c6e      	adds	r6, r5, #1
 8015df4:	625e      	str	r6, [r3, #36]	@ 0x24
 8015df6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015dfa:	b102      	cbz	r2, 8015dfe <rcl_wait_set_add_service+0x22>
 8015dfc:	6015      	str	r5, [r2, #0]
 8015dfe:	4608      	mov	r0, r1
 8015e00:	f7ff f9c8 	bl	8015194 <rcl_service_get_rmw_handle>
 8015e04:	b150      	cbz	r0, 8015e1c <rcl_wait_set_add_service+0x40>
 8015e06:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015e08:	6842      	ldr	r2, [r0, #4]
 8015e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015e0c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015e10:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015e12:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8015e14:	3301      	adds	r3, #1
 8015e16:	2000      	movs	r0, #0
 8015e18:	6293      	str	r3, [r2, #40]	@ 0x28
 8015e1a:	bd70      	pop	{r4, r5, r6, pc}
 8015e1c:	2001      	movs	r0, #1
 8015e1e:	bd70      	pop	{r4, r5, r6, pc}
 8015e20:	f240 3086 	movw	r0, #902	@ 0x386
 8015e24:	bd70      	pop	{r4, r5, r6, pc}
 8015e26:	200b      	movs	r0, #11
 8015e28:	4770      	bx	lr
 8015e2a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015e2e:	bd70      	pop	{r4, r5, r6, pc}
 8015e30:	200b      	movs	r0, #11
 8015e32:	bd70      	pop	{r4, r5, r6, pc}
 8015e34:	0000      	movs	r0, r0
	...

08015e38 <rcl_wait>:
 8015e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e3c:	ed2d 8b02 	vpush	{d8}
 8015e40:	b08d      	sub	sp, #52	@ 0x34
 8015e42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015e46:	2800      	cmp	r0, #0
 8015e48:	f000 8143 	beq.w	80160d2 <rcl_wait+0x29a>
 8015e4c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8015e4e:	4605      	mov	r5, r0
 8015e50:	2e00      	cmp	r6, #0
 8015e52:	f000 8112 	beq.w	801607a <rcl_wait+0x242>
 8015e56:	6843      	ldr	r3, [r0, #4]
 8015e58:	b983      	cbnz	r3, 8015e7c <rcl_wait+0x44>
 8015e5a:	68eb      	ldr	r3, [r5, #12]
 8015e5c:	b973      	cbnz	r3, 8015e7c <rcl_wait+0x44>
 8015e5e:	696b      	ldr	r3, [r5, #20]
 8015e60:	b963      	cbnz	r3, 8015e7c <rcl_wait+0x44>
 8015e62:	69eb      	ldr	r3, [r5, #28]
 8015e64:	b953      	cbnz	r3, 8015e7c <rcl_wait+0x44>
 8015e66:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8015e68:	b943      	cbnz	r3, 8015e7c <rcl_wait+0x44>
 8015e6a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8015e6c:	b933      	cbnz	r3, 8015e7c <rcl_wait+0x44>
 8015e6e:	f240 3085 	movw	r0, #901	@ 0x385
 8015e72:	b00d      	add	sp, #52	@ 0x34
 8015e74:	ecbd 8b02 	vpop	{d8}
 8015e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e7c:	9b04      	ldr	r3, [sp, #16]
 8015e7e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8015e80:	2b01      	cmp	r3, #1
 8015e82:	9b05      	ldr	r3, [sp, #20]
 8015e84:	f173 0300 	sbcs.w	r3, r3, #0
 8015e88:	f2c0 80f0 	blt.w	801606c <rcl_wait+0x234>
 8015e8c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8015e90:	4643      	mov	r3, r8
 8015e92:	2a00      	cmp	r2, #0
 8015e94:	f000 8133 	beq.w	80160fe <rcl_wait+0x2c6>
 8015e98:	2400      	movs	r4, #0
 8015e9a:	4613      	mov	r3, r2
 8015e9c:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8016110 <rcl_wait+0x2d8>
 8015ea0:	46a2      	mov	sl, r4
 8015ea2:	46a3      	mov	fp, r4
 8015ea4:	f240 3921 	movw	r9, #801	@ 0x321
 8015ea8:	4632      	mov	r2, r6
 8015eaa:	e014      	b.n	8015ed6 <rcl_wait+0x9e>
 8015eac:	2800      	cmp	r0, #0
 8015eae:	d1e0      	bne.n	8015e72 <rcl_wait+0x3a>
 8015eb0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015eb4:	4542      	cmp	r2, r8
 8015eb6:	eb73 0107 	sbcs.w	r1, r3, r7
 8015eba:	da03      	bge.n	8015ec4 <rcl_wait+0x8c>
 8015ebc:	4690      	mov	r8, r2
 8015ebe:	461f      	mov	r7, r3
 8015ec0:	f04f 0b01 	mov.w	fp, #1
 8015ec4:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8015ec6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8015ec8:	3401      	adds	r4, #1
 8015eca:	f14a 0a00 	adc.w	sl, sl, #0
 8015ece:	429c      	cmp	r4, r3
 8015ed0:	f17a 0100 	sbcs.w	r1, sl, #0
 8015ed4:	d228      	bcs.n	8015f28 <rcl_wait+0xf0>
 8015ed6:	6928      	ldr	r0, [r5, #16]
 8015ed8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8015edc:	a908      	add	r1, sp, #32
 8015ede:	00a6      	lsls	r6, r4, #2
 8015ee0:	2800      	cmp	r0, #0
 8015ee2:	d0f1      	beq.n	8015ec8 <rcl_wait+0x90>
 8015ee4:	68eb      	ldr	r3, [r5, #12]
 8015ee6:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8015eea:	4423      	add	r3, r4
 8015eec:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8015ef0:	f1be 0f00 	cmp.w	lr, #0
 8015ef4:	d006      	beq.n	8015f04 <rcl_wait+0xcc>
 8015ef6:	6913      	ldr	r3, [r2, #16]
 8015ef8:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8015efc:	3301      	adds	r3, #1
 8015efe:	6113      	str	r3, [r2, #16]
 8015f00:	692b      	ldr	r3, [r5, #16]
 8015f02:	5998      	ldr	r0, [r3, r6]
 8015f04:	ed8d 8b08 	vstr	d8, [sp, #32]
 8015f08:	f7f7 fa4c 	bl	800d3a4 <rcl_timer_get_time_until_next_call>
 8015f0c:	4548      	cmp	r0, r9
 8015f0e:	d1cd      	bne.n	8015eac <rcl_wait+0x74>
 8015f10:	692b      	ldr	r3, [r5, #16]
 8015f12:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8015f14:	2100      	movs	r1, #0
 8015f16:	5199      	str	r1, [r3, r6]
 8015f18:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8015f1a:	3401      	adds	r4, #1
 8015f1c:	f14a 0a00 	adc.w	sl, sl, #0
 8015f20:	429c      	cmp	r4, r3
 8015f22:	f17a 0100 	sbcs.w	r1, sl, #0
 8015f26:	d3d6      	bcc.n	8015ed6 <rcl_wait+0x9e>
 8015f28:	4616      	mov	r6, r2
 8015f2a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8015f2e:	4313      	orrs	r3, r2
 8015f30:	46d9      	mov	r9, fp
 8015f32:	f040 80a9 	bne.w	8016088 <rcl_wait+0x250>
 8015f36:	2300      	movs	r3, #0
 8015f38:	2200      	movs	r2, #0
 8015f3a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015f3e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8015f42:	ab08      	add	r3, sp, #32
 8015f44:	9302      	str	r3, [sp, #8]
 8015f46:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8015f48:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8015f4c:	e9cd 3200 	strd	r3, r2, [sp]
 8015f50:	f106 0110 	add.w	r1, r6, #16
 8015f54:	f106 031c 	add.w	r3, r6, #28
 8015f58:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8015f5c:	1d30      	adds	r0, r6, #4
 8015f5e:	f001 fc13 	bl	8017788 <rmw_wait>
 8015f62:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015f64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015f66:	4680      	mov	r8, r0
 8015f68:	b1ca      	cbz	r2, 8015f9e <rcl_wait+0x166>
 8015f6a:	2400      	movs	r4, #0
 8015f6c:	4627      	mov	r7, r4
 8015f6e:	692a      	ldr	r2, [r5, #16]
 8015f70:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8015f74:	f10d 011f 	add.w	r1, sp, #31
 8015f78:	00a6      	lsls	r6, r4, #2
 8015f7a:	b160      	cbz	r0, 8015f96 <rcl_wait+0x15e>
 8015f7c:	f88d 701f 	strb.w	r7, [sp, #31]
 8015f80:	f7f7 f9d6 	bl	800d330 <rcl_timer_is_ready>
 8015f84:	2800      	cmp	r0, #0
 8015f86:	f47f af74 	bne.w	8015e72 <rcl_wait+0x3a>
 8015f8a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8015f8e:	b90b      	cbnz	r3, 8015f94 <rcl_wait+0x15c>
 8015f90:	692a      	ldr	r2, [r5, #16]
 8015f92:	5193      	str	r3, [r2, r6]
 8015f94:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015f96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015f98:	3401      	adds	r4, #1
 8015f9a:	42a2      	cmp	r2, r4
 8015f9c:	d8e7      	bhi.n	8015f6e <rcl_wait+0x136>
 8015f9e:	f038 0002 	bics.w	r0, r8, #2
 8015fa2:	f040 8090 	bne.w	80160c6 <rcl_wait+0x28e>
 8015fa6:	686e      	ldr	r6, [r5, #4]
 8015fa8:	4602      	mov	r2, r0
 8015faa:	b91e      	cbnz	r6, 8015fb4 <rcl_wait+0x17c>
 8015fac:	e00d      	b.n	8015fca <rcl_wait+0x192>
 8015fae:	3201      	adds	r2, #1
 8015fb0:	42b2      	cmp	r2, r6
 8015fb2:	d00a      	beq.n	8015fca <rcl_wait+0x192>
 8015fb4:	6899      	ldr	r1, [r3, #8]
 8015fb6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015fba:	2900      	cmp	r1, #0
 8015fbc:	d1f7      	bne.n	8015fae <rcl_wait+0x176>
 8015fbe:	682c      	ldr	r4, [r5, #0]
 8015fc0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015fc4:	3201      	adds	r2, #1
 8015fc6:	42b2      	cmp	r2, r6
 8015fc8:	d1f4      	bne.n	8015fb4 <rcl_wait+0x17c>
 8015fca:	68ee      	ldr	r6, [r5, #12]
 8015fcc:	2200      	movs	r2, #0
 8015fce:	b91e      	cbnz	r6, 8015fd8 <rcl_wait+0x1a0>
 8015fd0:	e00d      	b.n	8015fee <rcl_wait+0x1b6>
 8015fd2:	3201      	adds	r2, #1
 8015fd4:	42b2      	cmp	r2, r6
 8015fd6:	d00a      	beq.n	8015fee <rcl_wait+0x1b6>
 8015fd8:	6959      	ldr	r1, [r3, #20]
 8015fda:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015fde:	2900      	cmp	r1, #0
 8015fe0:	d1f7      	bne.n	8015fd2 <rcl_wait+0x19a>
 8015fe2:	68ac      	ldr	r4, [r5, #8]
 8015fe4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015fe8:	3201      	adds	r2, #1
 8015fea:	42b2      	cmp	r2, r6
 8015fec:	d1f4      	bne.n	8015fd8 <rcl_wait+0x1a0>
 8015fee:	69ee      	ldr	r6, [r5, #28]
 8015ff0:	2200      	movs	r2, #0
 8015ff2:	b91e      	cbnz	r6, 8015ffc <rcl_wait+0x1c4>
 8015ff4:	e00d      	b.n	8016012 <rcl_wait+0x1da>
 8015ff6:	3201      	adds	r2, #1
 8015ff8:	42b2      	cmp	r2, r6
 8015ffa:	d00a      	beq.n	8016012 <rcl_wait+0x1da>
 8015ffc:	6a19      	ldr	r1, [r3, #32]
 8015ffe:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016002:	2900      	cmp	r1, #0
 8016004:	d1f7      	bne.n	8015ff6 <rcl_wait+0x1be>
 8016006:	69ac      	ldr	r4, [r5, #24]
 8016008:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801600c:	3201      	adds	r2, #1
 801600e:	42b2      	cmp	r2, r6
 8016010:	d1f4      	bne.n	8015ffc <rcl_wait+0x1c4>
 8016012:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8016014:	2200      	movs	r2, #0
 8016016:	b91e      	cbnz	r6, 8016020 <rcl_wait+0x1e8>
 8016018:	e00d      	b.n	8016036 <rcl_wait+0x1fe>
 801601a:	3201      	adds	r2, #1
 801601c:	4296      	cmp	r6, r2
 801601e:	d00a      	beq.n	8016036 <rcl_wait+0x1fe>
 8016020:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8016022:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016026:	2900      	cmp	r1, #0
 8016028:	d1f7      	bne.n	801601a <rcl_wait+0x1e2>
 801602a:	6a2c      	ldr	r4, [r5, #32]
 801602c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8016030:	3201      	adds	r2, #1
 8016032:	4296      	cmp	r6, r2
 8016034:	d1f4      	bne.n	8016020 <rcl_wait+0x1e8>
 8016036:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8016038:	2200      	movs	r2, #0
 801603a:	b91e      	cbnz	r6, 8016044 <rcl_wait+0x20c>
 801603c:	e00d      	b.n	801605a <rcl_wait+0x222>
 801603e:	3201      	adds	r2, #1
 8016040:	42b2      	cmp	r2, r6
 8016042:	d00a      	beq.n	801605a <rcl_wait+0x222>
 8016044:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8016046:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801604a:	2900      	cmp	r1, #0
 801604c:	d1f7      	bne.n	801603e <rcl_wait+0x206>
 801604e:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8016050:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8016054:	3201      	adds	r2, #1
 8016056:	42b2      	cmp	r2, r6
 8016058:	d1f4      	bne.n	8016044 <rcl_wait+0x20c>
 801605a:	f1b8 0f02 	cmp.w	r8, #2
 801605e:	f47f af08 	bne.w	8015e72 <rcl_wait+0x3a>
 8016062:	464b      	mov	r3, r9
 8016064:	2b00      	cmp	r3, #0
 8016066:	bf08      	it	eq
 8016068:	2002      	moveq	r0, #2
 801606a:	e702      	b.n	8015e72 <rcl_wait+0x3a>
 801606c:	2a00      	cmp	r2, #0
 801606e:	d03a      	beq.n	80160e6 <rcl_wait+0x2ae>
 8016070:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8016074:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8016078:	e70e      	b.n	8015e98 <rcl_wait+0x60>
 801607a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801607e:	b00d      	add	sp, #52	@ 0x34
 8016080:	ecbd 8b02 	vpop	{d8}
 8016084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016088:	9b04      	ldr	r3, [sp, #16]
 801608a:	2b01      	cmp	r3, #1
 801608c:	9b05      	ldr	r3, [sp, #20]
 801608e:	f173 0300 	sbcs.w	r3, r3, #0
 8016092:	db24      	blt.n	80160de <rcl_wait+0x2a6>
 8016094:	2f00      	cmp	r7, #0
 8016096:	bfbc      	itt	lt
 8016098:	f04f 0800 	movlt.w	r8, #0
 801609c:	4647      	movlt	r7, r8
 801609e:	a31e      	add	r3, pc, #120	@ (adr r3, 8016118 <rcl_wait+0x2e0>)
 80160a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160a4:	4640      	mov	r0, r8
 80160a6:	4639      	mov	r1, r7
 80160a8:	f7ea fd38 	bl	8000b1c <__aeabi_ldivmod>
 80160ac:	a31a      	add	r3, pc, #104	@ (adr r3, 8016118 <rcl_wait+0x2e0>)
 80160ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160b2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80160b6:	4640      	mov	r0, r8
 80160b8:	4639      	mov	r1, r7
 80160ba:	f7ea fd2f 	bl	8000b1c <__aeabi_ldivmod>
 80160be:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80160c2:	ab08      	add	r3, sp, #32
 80160c4:	e73e      	b.n	8015f44 <rcl_wait+0x10c>
 80160c6:	2001      	movs	r0, #1
 80160c8:	b00d      	add	sp, #52	@ 0x34
 80160ca:	ecbd 8b02 	vpop	{d8}
 80160ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160d2:	200b      	movs	r0, #11
 80160d4:	b00d      	add	sp, #52	@ 0x34
 80160d6:	ecbd 8b02 	vpop	{d8}
 80160da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160de:	465b      	mov	r3, fp
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d1d7      	bne.n	8016094 <rcl_wait+0x25c>
 80160e4:	e72e      	b.n	8015f44 <rcl_wait+0x10c>
 80160e6:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80160ea:	430b      	orrs	r3, r1
 80160ec:	bf08      	it	eq
 80160ee:	4691      	moveq	r9, r2
 80160f0:	f43f af21 	beq.w	8015f36 <rcl_wait+0xfe>
 80160f4:	9b04      	ldr	r3, [sp, #16]
 80160f6:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80160fa:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80160fe:	2b01      	cmp	r3, #1
 8016100:	9b05      	ldr	r3, [sp, #20]
 8016102:	f173 0300 	sbcs.w	r3, r3, #0
 8016106:	f04f 0300 	mov.w	r3, #0
 801610a:	4699      	mov	r9, r3
 801610c:	dac2      	bge.n	8016094 <rcl_wait+0x25c>
 801610e:	e719      	b.n	8015f44 <rcl_wait+0x10c>
 8016110:	ffffffff 	.word	0xffffffff
 8016114:	7fffffff 	.word	0x7fffffff
 8016118:	3b9aca00 	.word	0x3b9aca00
 801611c:	00000000 	.word	0x00000000

08016120 <rcl_action_take_goal_response>:
 8016120:	2800      	cmp	r0, #0
 8016122:	d039      	beq.n	8016198 <rcl_action_take_goal_response+0x78>
 8016124:	b570      	push	{r4, r5, r6, lr}
 8016126:	4604      	mov	r4, r0
 8016128:	6800      	ldr	r0, [r0, #0]
 801612a:	b380      	cbz	r0, 801618e <rcl_action_take_goal_response+0x6e>
 801612c:	460d      	mov	r5, r1
 801612e:	4616      	mov	r6, r2
 8016130:	f7fe fd2e 	bl	8014b90 <rcl_client_is_valid>
 8016134:	b330      	cbz	r0, 8016184 <rcl_action_take_goal_response+0x64>
 8016136:	6820      	ldr	r0, [r4, #0]
 8016138:	3004      	adds	r0, #4
 801613a:	f7fe fd29 	bl	8014b90 <rcl_client_is_valid>
 801613e:	b308      	cbz	r0, 8016184 <rcl_action_take_goal_response+0x64>
 8016140:	6820      	ldr	r0, [r4, #0]
 8016142:	3008      	adds	r0, #8
 8016144:	f7fe fd24 	bl	8014b90 <rcl_client_is_valid>
 8016148:	b1e0      	cbz	r0, 8016184 <rcl_action_take_goal_response+0x64>
 801614a:	6820      	ldr	r0, [r4, #0]
 801614c:	300c      	adds	r0, #12
 801614e:	f7f6 fee1 	bl	800cf14 <rcl_subscription_is_valid>
 8016152:	b1b8      	cbz	r0, 8016184 <rcl_action_take_goal_response+0x64>
 8016154:	6820      	ldr	r0, [r4, #0]
 8016156:	3010      	adds	r0, #16
 8016158:	f7f6 fedc 	bl	800cf14 <rcl_subscription_is_valid>
 801615c:	b190      	cbz	r0, 8016184 <rcl_action_take_goal_response+0x64>
 801615e:	b1cd      	cbz	r5, 8016194 <rcl_action_take_goal_response+0x74>
 8016160:	b1c6      	cbz	r6, 8016194 <rcl_action_take_goal_response+0x74>
 8016162:	6820      	ldr	r0, [r4, #0]
 8016164:	4632      	mov	r2, r6
 8016166:	4629      	mov	r1, r5
 8016168:	f7fe fcca 	bl	8014b00 <rcl_take_response>
 801616c:	b148      	cbz	r0, 8016182 <rcl_action_take_goal_response+0x62>
 801616e:	280a      	cmp	r0, #10
 8016170:	d007      	beq.n	8016182 <rcl_action_take_goal_response+0x62>
 8016172:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8016176:	f640 0337 	movw	r3, #2103	@ 0x837
 801617a:	4290      	cmp	r0, r2
 801617c:	bf0c      	ite	eq
 801617e:	4618      	moveq	r0, r3
 8016180:	2001      	movne	r0, #1
 8016182:	bd70      	pop	{r4, r5, r6, pc}
 8016184:	f7f8 fa10 	bl	800e5a8 <rcutils_reset_error>
 8016188:	f640 0036 	movw	r0, #2102	@ 0x836
 801618c:	bd70      	pop	{r4, r5, r6, pc}
 801618e:	f640 0036 	movw	r0, #2102	@ 0x836
 8016192:	bd70      	pop	{r4, r5, r6, pc}
 8016194:	200b      	movs	r0, #11
 8016196:	bd70      	pop	{r4, r5, r6, pc}
 8016198:	f640 0036 	movw	r0, #2102	@ 0x836
 801619c:	4770      	bx	lr
 801619e:	bf00      	nop

080161a0 <rcl_action_send_result_request>:
 80161a0:	b390      	cbz	r0, 8016208 <rcl_action_send_result_request+0x68>
 80161a2:	b570      	push	{r4, r5, r6, lr}
 80161a4:	4604      	mov	r4, r0
 80161a6:	6800      	ldr	r0, [r0, #0]
 80161a8:	b348      	cbz	r0, 80161fe <rcl_action_send_result_request+0x5e>
 80161aa:	460d      	mov	r5, r1
 80161ac:	4616      	mov	r6, r2
 80161ae:	f7fe fcef 	bl	8014b90 <rcl_client_is_valid>
 80161b2:	b1f8      	cbz	r0, 80161f4 <rcl_action_send_result_request+0x54>
 80161b4:	6820      	ldr	r0, [r4, #0]
 80161b6:	3004      	adds	r0, #4
 80161b8:	f7fe fcea 	bl	8014b90 <rcl_client_is_valid>
 80161bc:	b1d0      	cbz	r0, 80161f4 <rcl_action_send_result_request+0x54>
 80161be:	6820      	ldr	r0, [r4, #0]
 80161c0:	3008      	adds	r0, #8
 80161c2:	f7fe fce5 	bl	8014b90 <rcl_client_is_valid>
 80161c6:	b1a8      	cbz	r0, 80161f4 <rcl_action_send_result_request+0x54>
 80161c8:	6820      	ldr	r0, [r4, #0]
 80161ca:	300c      	adds	r0, #12
 80161cc:	f7f6 fea2 	bl	800cf14 <rcl_subscription_is_valid>
 80161d0:	b180      	cbz	r0, 80161f4 <rcl_action_send_result_request+0x54>
 80161d2:	6820      	ldr	r0, [r4, #0]
 80161d4:	3010      	adds	r0, #16
 80161d6:	f7f6 fe9d 	bl	800cf14 <rcl_subscription_is_valid>
 80161da:	b158      	cbz	r0, 80161f4 <rcl_action_send_result_request+0x54>
 80161dc:	b195      	cbz	r5, 8016204 <rcl_action_send_result_request+0x64>
 80161de:	b18e      	cbz	r6, 8016204 <rcl_action_send_result_request+0x64>
 80161e0:	6820      	ldr	r0, [r4, #0]
 80161e2:	4632      	mov	r2, r6
 80161e4:	4629      	mov	r1, r5
 80161e6:	3008      	adds	r0, #8
 80161e8:	f7fe fc52 	bl	8014a90 <rcl_send_request>
 80161ec:	3800      	subs	r0, #0
 80161ee:	bf18      	it	ne
 80161f0:	2001      	movne	r0, #1
 80161f2:	bd70      	pop	{r4, r5, r6, pc}
 80161f4:	f7f8 f9d8 	bl	800e5a8 <rcutils_reset_error>
 80161f8:	f640 0036 	movw	r0, #2102	@ 0x836
 80161fc:	bd70      	pop	{r4, r5, r6, pc}
 80161fe:	f640 0036 	movw	r0, #2102	@ 0x836
 8016202:	bd70      	pop	{r4, r5, r6, pc}
 8016204:	200b      	movs	r0, #11
 8016206:	bd70      	pop	{r4, r5, r6, pc}
 8016208:	f640 0036 	movw	r0, #2102	@ 0x836
 801620c:	4770      	bx	lr
 801620e:	bf00      	nop

08016210 <rcl_action_take_result_response>:
 8016210:	2800      	cmp	r0, #0
 8016212:	d03a      	beq.n	801628a <rcl_action_take_result_response+0x7a>
 8016214:	b570      	push	{r4, r5, r6, lr}
 8016216:	4604      	mov	r4, r0
 8016218:	6800      	ldr	r0, [r0, #0]
 801621a:	b388      	cbz	r0, 8016280 <rcl_action_take_result_response+0x70>
 801621c:	460d      	mov	r5, r1
 801621e:	4616      	mov	r6, r2
 8016220:	f7fe fcb6 	bl	8014b90 <rcl_client_is_valid>
 8016224:	b338      	cbz	r0, 8016276 <rcl_action_take_result_response+0x66>
 8016226:	6820      	ldr	r0, [r4, #0]
 8016228:	3004      	adds	r0, #4
 801622a:	f7fe fcb1 	bl	8014b90 <rcl_client_is_valid>
 801622e:	b310      	cbz	r0, 8016276 <rcl_action_take_result_response+0x66>
 8016230:	6820      	ldr	r0, [r4, #0]
 8016232:	3008      	adds	r0, #8
 8016234:	f7fe fcac 	bl	8014b90 <rcl_client_is_valid>
 8016238:	b1e8      	cbz	r0, 8016276 <rcl_action_take_result_response+0x66>
 801623a:	6820      	ldr	r0, [r4, #0]
 801623c:	300c      	adds	r0, #12
 801623e:	f7f6 fe69 	bl	800cf14 <rcl_subscription_is_valid>
 8016242:	b1c0      	cbz	r0, 8016276 <rcl_action_take_result_response+0x66>
 8016244:	6820      	ldr	r0, [r4, #0]
 8016246:	3010      	adds	r0, #16
 8016248:	f7f6 fe64 	bl	800cf14 <rcl_subscription_is_valid>
 801624c:	b198      	cbz	r0, 8016276 <rcl_action_take_result_response+0x66>
 801624e:	b1d5      	cbz	r5, 8016286 <rcl_action_take_result_response+0x76>
 8016250:	b1ce      	cbz	r6, 8016286 <rcl_action_take_result_response+0x76>
 8016252:	6820      	ldr	r0, [r4, #0]
 8016254:	4632      	mov	r2, r6
 8016256:	4629      	mov	r1, r5
 8016258:	3008      	adds	r0, #8
 801625a:	f7fe fc51 	bl	8014b00 <rcl_take_response>
 801625e:	b148      	cbz	r0, 8016274 <rcl_action_take_result_response+0x64>
 8016260:	280a      	cmp	r0, #10
 8016262:	d007      	beq.n	8016274 <rcl_action_take_result_response+0x64>
 8016264:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8016268:	f640 0337 	movw	r3, #2103	@ 0x837
 801626c:	4290      	cmp	r0, r2
 801626e:	bf0c      	ite	eq
 8016270:	4618      	moveq	r0, r3
 8016272:	2001      	movne	r0, #1
 8016274:	bd70      	pop	{r4, r5, r6, pc}
 8016276:	f7f8 f997 	bl	800e5a8 <rcutils_reset_error>
 801627a:	f640 0036 	movw	r0, #2102	@ 0x836
 801627e:	bd70      	pop	{r4, r5, r6, pc}
 8016280:	f640 0036 	movw	r0, #2102	@ 0x836
 8016284:	bd70      	pop	{r4, r5, r6, pc}
 8016286:	200b      	movs	r0, #11
 8016288:	bd70      	pop	{r4, r5, r6, pc}
 801628a:	f640 0036 	movw	r0, #2102	@ 0x836
 801628e:	4770      	bx	lr

08016290 <rcl_action_take_cancel_response>:
 8016290:	2800      	cmp	r0, #0
 8016292:	d03a      	beq.n	801630a <rcl_action_take_cancel_response+0x7a>
 8016294:	b570      	push	{r4, r5, r6, lr}
 8016296:	4604      	mov	r4, r0
 8016298:	6800      	ldr	r0, [r0, #0]
 801629a:	b388      	cbz	r0, 8016300 <rcl_action_take_cancel_response+0x70>
 801629c:	460d      	mov	r5, r1
 801629e:	4616      	mov	r6, r2
 80162a0:	f7fe fc76 	bl	8014b90 <rcl_client_is_valid>
 80162a4:	b338      	cbz	r0, 80162f6 <rcl_action_take_cancel_response+0x66>
 80162a6:	6820      	ldr	r0, [r4, #0]
 80162a8:	3004      	adds	r0, #4
 80162aa:	f7fe fc71 	bl	8014b90 <rcl_client_is_valid>
 80162ae:	b310      	cbz	r0, 80162f6 <rcl_action_take_cancel_response+0x66>
 80162b0:	6820      	ldr	r0, [r4, #0]
 80162b2:	3008      	adds	r0, #8
 80162b4:	f7fe fc6c 	bl	8014b90 <rcl_client_is_valid>
 80162b8:	b1e8      	cbz	r0, 80162f6 <rcl_action_take_cancel_response+0x66>
 80162ba:	6820      	ldr	r0, [r4, #0]
 80162bc:	300c      	adds	r0, #12
 80162be:	f7f6 fe29 	bl	800cf14 <rcl_subscription_is_valid>
 80162c2:	b1c0      	cbz	r0, 80162f6 <rcl_action_take_cancel_response+0x66>
 80162c4:	6820      	ldr	r0, [r4, #0]
 80162c6:	3010      	adds	r0, #16
 80162c8:	f7f6 fe24 	bl	800cf14 <rcl_subscription_is_valid>
 80162cc:	b198      	cbz	r0, 80162f6 <rcl_action_take_cancel_response+0x66>
 80162ce:	b1d5      	cbz	r5, 8016306 <rcl_action_take_cancel_response+0x76>
 80162d0:	b1ce      	cbz	r6, 8016306 <rcl_action_take_cancel_response+0x76>
 80162d2:	6820      	ldr	r0, [r4, #0]
 80162d4:	4632      	mov	r2, r6
 80162d6:	4629      	mov	r1, r5
 80162d8:	3004      	adds	r0, #4
 80162da:	f7fe fc11 	bl	8014b00 <rcl_take_response>
 80162de:	b148      	cbz	r0, 80162f4 <rcl_action_take_cancel_response+0x64>
 80162e0:	280a      	cmp	r0, #10
 80162e2:	d007      	beq.n	80162f4 <rcl_action_take_cancel_response+0x64>
 80162e4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80162e8:	f640 0337 	movw	r3, #2103	@ 0x837
 80162ec:	4290      	cmp	r0, r2
 80162ee:	bf0c      	ite	eq
 80162f0:	4618      	moveq	r0, r3
 80162f2:	2001      	movne	r0, #1
 80162f4:	bd70      	pop	{r4, r5, r6, pc}
 80162f6:	f7f8 f957 	bl	800e5a8 <rcutils_reset_error>
 80162fa:	f640 0036 	movw	r0, #2102	@ 0x836
 80162fe:	bd70      	pop	{r4, r5, r6, pc}
 8016300:	f640 0036 	movw	r0, #2102	@ 0x836
 8016304:	bd70      	pop	{r4, r5, r6, pc}
 8016306:	200b      	movs	r0, #11
 8016308:	bd70      	pop	{r4, r5, r6, pc}
 801630a:	f640 0036 	movw	r0, #2102	@ 0x836
 801630e:	4770      	bx	lr

08016310 <rcl_action_take_feedback>:
 8016310:	2800      	cmp	r0, #0
 8016312:	d038      	beq.n	8016386 <rcl_action_take_feedback+0x76>
 8016314:	b530      	push	{r4, r5, lr}
 8016316:	4604      	mov	r4, r0
 8016318:	6800      	ldr	r0, [r0, #0]
 801631a:	b091      	sub	sp, #68	@ 0x44
 801631c:	b378      	cbz	r0, 801637e <rcl_action_take_feedback+0x6e>
 801631e:	460d      	mov	r5, r1
 8016320:	f7fe fc36 	bl	8014b90 <rcl_client_is_valid>
 8016324:	b328      	cbz	r0, 8016372 <rcl_action_take_feedback+0x62>
 8016326:	6820      	ldr	r0, [r4, #0]
 8016328:	3004      	adds	r0, #4
 801632a:	f7fe fc31 	bl	8014b90 <rcl_client_is_valid>
 801632e:	b300      	cbz	r0, 8016372 <rcl_action_take_feedback+0x62>
 8016330:	6820      	ldr	r0, [r4, #0]
 8016332:	3008      	adds	r0, #8
 8016334:	f7fe fc2c 	bl	8014b90 <rcl_client_is_valid>
 8016338:	b1d8      	cbz	r0, 8016372 <rcl_action_take_feedback+0x62>
 801633a:	6820      	ldr	r0, [r4, #0]
 801633c:	300c      	adds	r0, #12
 801633e:	f7f6 fde9 	bl	800cf14 <rcl_subscription_is_valid>
 8016342:	b1b0      	cbz	r0, 8016372 <rcl_action_take_feedback+0x62>
 8016344:	6820      	ldr	r0, [r4, #0]
 8016346:	3010      	adds	r0, #16
 8016348:	f7f6 fde4 	bl	800cf14 <rcl_subscription_is_valid>
 801634c:	b188      	cbz	r0, 8016372 <rcl_action_take_feedback+0x62>
 801634e:	b1ed      	cbz	r5, 801638c <rcl_action_take_feedback+0x7c>
 8016350:	6820      	ldr	r0, [r4, #0]
 8016352:	2300      	movs	r3, #0
 8016354:	466a      	mov	r2, sp
 8016356:	4629      	mov	r1, r5
 8016358:	300c      	adds	r0, #12
 801635a:	f7f6 fd7d 	bl	800ce58 <rcl_take>
 801635e:	b160      	cbz	r0, 801637a <rcl_action_take_feedback+0x6a>
 8016360:	f240 1391 	movw	r3, #401	@ 0x191
 8016364:	4298      	cmp	r0, r3
 8016366:	d014      	beq.n	8016392 <rcl_action_take_feedback+0x82>
 8016368:	280a      	cmp	r0, #10
 801636a:	bf18      	it	ne
 801636c:	2001      	movne	r0, #1
 801636e:	b011      	add	sp, #68	@ 0x44
 8016370:	bd30      	pop	{r4, r5, pc}
 8016372:	f7f8 f919 	bl	800e5a8 <rcutils_reset_error>
 8016376:	f640 0036 	movw	r0, #2102	@ 0x836
 801637a:	b011      	add	sp, #68	@ 0x44
 801637c:	bd30      	pop	{r4, r5, pc}
 801637e:	f640 0036 	movw	r0, #2102	@ 0x836
 8016382:	b011      	add	sp, #68	@ 0x44
 8016384:	bd30      	pop	{r4, r5, pc}
 8016386:	f640 0036 	movw	r0, #2102	@ 0x836
 801638a:	4770      	bx	lr
 801638c:	200b      	movs	r0, #11
 801638e:	b011      	add	sp, #68	@ 0x44
 8016390:	bd30      	pop	{r4, r5, pc}
 8016392:	f640 0037 	movw	r0, #2103	@ 0x837
 8016396:	e7f0      	b.n	801637a <rcl_action_take_feedback+0x6a>

08016398 <rcl_action_wait_set_add_action_client>:
 8016398:	2800      	cmp	r0, #0
 801639a:	d048      	beq.n	801642e <rcl_action_wait_set_add_action_client+0x96>
 801639c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801639e:	460c      	mov	r4, r1
 80163a0:	2900      	cmp	r1, #0
 80163a2:	d03c      	beq.n	801641e <rcl_action_wait_set_add_action_client+0x86>
 80163a4:	4605      	mov	r5, r0
 80163a6:	6808      	ldr	r0, [r1, #0]
 80163a8:	2800      	cmp	r0, #0
 80163aa:	d038      	beq.n	801641e <rcl_action_wait_set_add_action_client+0x86>
 80163ac:	4617      	mov	r7, r2
 80163ae:	461e      	mov	r6, r3
 80163b0:	f7fe fbee 	bl	8014b90 <rcl_client_is_valid>
 80163b4:	b3b0      	cbz	r0, 8016424 <rcl_action_wait_set_add_action_client+0x8c>
 80163b6:	6820      	ldr	r0, [r4, #0]
 80163b8:	3004      	adds	r0, #4
 80163ba:	f7fe fbe9 	bl	8014b90 <rcl_client_is_valid>
 80163be:	b388      	cbz	r0, 8016424 <rcl_action_wait_set_add_action_client+0x8c>
 80163c0:	6820      	ldr	r0, [r4, #0]
 80163c2:	3008      	adds	r0, #8
 80163c4:	f7fe fbe4 	bl	8014b90 <rcl_client_is_valid>
 80163c8:	b360      	cbz	r0, 8016424 <rcl_action_wait_set_add_action_client+0x8c>
 80163ca:	6820      	ldr	r0, [r4, #0]
 80163cc:	300c      	adds	r0, #12
 80163ce:	f7f6 fda1 	bl	800cf14 <rcl_subscription_is_valid>
 80163d2:	b338      	cbz	r0, 8016424 <rcl_action_wait_set_add_action_client+0x8c>
 80163d4:	6820      	ldr	r0, [r4, #0]
 80163d6:	3010      	adds	r0, #16
 80163d8:	f7f6 fd9c 	bl	800cf14 <rcl_subscription_is_valid>
 80163dc:	b310      	cbz	r0, 8016424 <rcl_action_wait_set_add_action_client+0x8c>
 80163de:	6821      	ldr	r1, [r4, #0]
 80163e0:	4628      	mov	r0, r5
 80163e2:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 80163e6:	f7ff fccd 	bl	8015d84 <rcl_wait_set_add_client>
 80163ea:	b9b8      	cbnz	r0, 801641c <rcl_action_wait_set_add_action_client+0x84>
 80163ec:	6821      	ldr	r1, [r4, #0]
 80163ee:	4628      	mov	r0, r5
 80163f0:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 80163f4:	3104      	adds	r1, #4
 80163f6:	f7ff fcc5 	bl	8015d84 <rcl_wait_set_add_client>
 80163fa:	b978      	cbnz	r0, 801641c <rcl_action_wait_set_add_action_client+0x84>
 80163fc:	6821      	ldr	r1, [r4, #0]
 80163fe:	4628      	mov	r0, r5
 8016400:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8016404:	3108      	adds	r1, #8
 8016406:	f7ff fcbd 	bl	8015d84 <rcl_wait_set_add_client>
 801640a:	b938      	cbnz	r0, 801641c <rcl_action_wait_set_add_action_client+0x84>
 801640c:	6821      	ldr	r1, [r4, #0]
 801640e:	4628      	mov	r0, r5
 8016410:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8016414:	310c      	adds	r1, #12
 8016416:	f7ff f96d 	bl	80156f4 <rcl_wait_set_add_subscription>
 801641a:	b158      	cbz	r0, 8016434 <rcl_action_wait_set_add_action_client+0x9c>
 801641c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801641e:	f640 0036 	movw	r0, #2102	@ 0x836
 8016422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016424:	f7f8 f8c0 	bl	800e5a8 <rcutils_reset_error>
 8016428:	f640 0036 	movw	r0, #2102	@ 0x836
 801642c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801642e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016432:	4770      	bx	lr
 8016434:	6821      	ldr	r1, [r4, #0]
 8016436:	4628      	mov	r0, r5
 8016438:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 801643c:	3110      	adds	r1, #16
 801643e:	f7ff f959 	bl	80156f4 <rcl_wait_set_add_subscription>
 8016442:	2800      	cmp	r0, #0
 8016444:	d1ea      	bne.n	801641c <rcl_action_wait_set_add_action_client+0x84>
 8016446:	b11f      	cbz	r7, 8016450 <rcl_action_wait_set_add_action_client+0xb8>
 8016448:	6823      	ldr	r3, [r4, #0]
 801644a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801644e:	603b      	str	r3, [r7, #0]
 8016450:	2e00      	cmp	r6, #0
 8016452:	d0e3      	beq.n	801641c <rcl_action_wait_set_add_action_client+0x84>
 8016454:	6823      	ldr	r3, [r4, #0]
 8016456:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 801645a:	6033      	str	r3, [r6, #0]
 801645c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801645e:	bf00      	nop

08016460 <rcl_action_client_wait_set_get_entities_ready>:
 8016460:	2800      	cmp	r0, #0
 8016462:	f000 808d 	beq.w	8016580 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8016466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801646a:	460c      	mov	r4, r1
 801646c:	2900      	cmp	r1, #0
 801646e:	d077      	beq.n	8016560 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8016470:	4605      	mov	r5, r0
 8016472:	6808      	ldr	r0, [r1, #0]
 8016474:	2800      	cmp	r0, #0
 8016476:	d073      	beq.n	8016560 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8016478:	4616      	mov	r6, r2
 801647a:	461f      	mov	r7, r3
 801647c:	f7fe fb88 	bl	8014b90 <rcl_client_is_valid>
 8016480:	2800      	cmp	r0, #0
 8016482:	d071      	beq.n	8016568 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8016484:	6820      	ldr	r0, [r4, #0]
 8016486:	3004      	adds	r0, #4
 8016488:	f7fe fb82 	bl	8014b90 <rcl_client_is_valid>
 801648c:	2800      	cmp	r0, #0
 801648e:	d06b      	beq.n	8016568 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8016490:	6820      	ldr	r0, [r4, #0]
 8016492:	3008      	adds	r0, #8
 8016494:	f7fe fb7c 	bl	8014b90 <rcl_client_is_valid>
 8016498:	2800      	cmp	r0, #0
 801649a:	d065      	beq.n	8016568 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801649c:	6820      	ldr	r0, [r4, #0]
 801649e:	300c      	adds	r0, #12
 80164a0:	f7f6 fd38 	bl	800cf14 <rcl_subscription_is_valid>
 80164a4:	2800      	cmp	r0, #0
 80164a6:	d05f      	beq.n	8016568 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80164a8:	6820      	ldr	r0, [r4, #0]
 80164aa:	3010      	adds	r0, #16
 80164ac:	f7f6 fd32 	bl	800cf14 <rcl_subscription_is_valid>
 80164b0:	2800      	cmp	r0, #0
 80164b2:	d059      	beq.n	8016568 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80164b4:	2e00      	cmp	r6, #0
 80164b6:	d060      	beq.n	801657a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80164b8:	2f00      	cmp	r7, #0
 80164ba:	d05e      	beq.n	801657a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80164bc:	9b06      	ldr	r3, [sp, #24]
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d05b      	beq.n	801657a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80164c2:	9b07      	ldr	r3, [sp, #28]
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	d058      	beq.n	801657a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80164c8:	9b08      	ldr	r3, [sp, #32]
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d055      	beq.n	801657a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80164ce:	6823      	ldr	r3, [r4, #0]
 80164d0:	686a      	ldr	r2, [r5, #4]
 80164d2:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 80164d6:	428a      	cmp	r2, r1
 80164d8:	d94c      	bls.n	8016574 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80164da:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 80164de:	4282      	cmp	r2, r0
 80164e0:	d948      	bls.n	8016574 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80164e2:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 80164e6:	69ea      	ldr	r2, [r5, #28]
 80164e8:	42a2      	cmp	r2, r4
 80164ea:	d943      	bls.n	8016574 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80164ec:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 80164f0:	4562      	cmp	r2, ip
 80164f2:	d93f      	bls.n	8016574 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80164f4:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 80164f8:	4572      	cmp	r2, lr
 80164fa:	d93b      	bls.n	8016574 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80164fc:	69aa      	ldr	r2, [r5, #24]
 80164fe:	682d      	ldr	r5, [r5, #0]
 8016500:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8016504:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8016508:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 801650c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8016510:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8016514:	f103 0c0c 	add.w	ip, r3, #12
 8016518:	eba5 050c 	sub.w	r5, r5, ip
 801651c:	fab5 f585 	clz	r5, r5
 8016520:	096d      	lsrs	r5, r5, #5
 8016522:	7035      	strb	r5, [r6, #0]
 8016524:	f103 0510 	add.w	r5, r3, #16
 8016528:	1b64      	subs	r4, r4, r5
 801652a:	fab4 f484 	clz	r4, r4
 801652e:	0964      	lsrs	r4, r4, #5
 8016530:	703c      	strb	r4, [r7, #0]
 8016532:	eba3 0008 	sub.w	r0, r3, r8
 8016536:	1d1c      	adds	r4, r3, #4
 8016538:	3308      	adds	r3, #8
 801653a:	1ad3      	subs	r3, r2, r3
 801653c:	fab0 f080 	clz	r0, r0
 8016540:	9a06      	ldr	r2, [sp, #24]
 8016542:	0940      	lsrs	r0, r0, #5
 8016544:	1b09      	subs	r1, r1, r4
 8016546:	7010      	strb	r0, [r2, #0]
 8016548:	fab1 f181 	clz	r1, r1
 801654c:	9a07      	ldr	r2, [sp, #28]
 801654e:	0949      	lsrs	r1, r1, #5
 8016550:	7011      	strb	r1, [r2, #0]
 8016552:	fab3 f383 	clz	r3, r3
 8016556:	9a08      	ldr	r2, [sp, #32]
 8016558:	095b      	lsrs	r3, r3, #5
 801655a:	2000      	movs	r0, #0
 801655c:	7013      	strb	r3, [r2, #0]
 801655e:	e001      	b.n	8016564 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8016560:	f640 0036 	movw	r0, #2102	@ 0x836
 8016564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016568:	f7f8 f81e 	bl	800e5a8 <rcutils_reset_error>
 801656c:	f640 0036 	movw	r0, #2102	@ 0x836
 8016570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016574:	2001      	movs	r0, #1
 8016576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801657a:	200b      	movs	r0, #11
 801657c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016580:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016584:	4770      	bx	lr
 8016586:	bf00      	nop

08016588 <rcl_action_take_goal_request>:
 8016588:	2800      	cmp	r0, #0
 801658a:	d039      	beq.n	8016600 <rcl_action_take_goal_request+0x78>
 801658c:	b570      	push	{r4, r5, r6, lr}
 801658e:	4604      	mov	r4, r0
 8016590:	6800      	ldr	r0, [r0, #0]
 8016592:	b380      	cbz	r0, 80165f6 <rcl_action_take_goal_request+0x6e>
 8016594:	460d      	mov	r5, r1
 8016596:	4616      	mov	r6, r2
 8016598:	f7fe fe5a 	bl	8015250 <rcl_service_is_valid>
 801659c:	b330      	cbz	r0, 80165ec <rcl_action_take_goal_request+0x64>
 801659e:	6820      	ldr	r0, [r4, #0]
 80165a0:	3004      	adds	r0, #4
 80165a2:	f7fe fe55 	bl	8015250 <rcl_service_is_valid>
 80165a6:	b308      	cbz	r0, 80165ec <rcl_action_take_goal_request+0x64>
 80165a8:	6820      	ldr	r0, [r4, #0]
 80165aa:	3008      	adds	r0, #8
 80165ac:	f7fe fe50 	bl	8015250 <rcl_service_is_valid>
 80165b0:	b1e0      	cbz	r0, 80165ec <rcl_action_take_goal_request+0x64>
 80165b2:	6820      	ldr	r0, [r4, #0]
 80165b4:	300c      	adds	r0, #12
 80165b6:	f7f6 fafd 	bl	800cbb4 <rcl_publisher_is_valid>
 80165ba:	b1b8      	cbz	r0, 80165ec <rcl_action_take_goal_request+0x64>
 80165bc:	6820      	ldr	r0, [r4, #0]
 80165be:	3010      	adds	r0, #16
 80165c0:	f7f6 faf8 	bl	800cbb4 <rcl_publisher_is_valid>
 80165c4:	b190      	cbz	r0, 80165ec <rcl_action_take_goal_request+0x64>
 80165c6:	b1cd      	cbz	r5, 80165fc <rcl_action_take_goal_request+0x74>
 80165c8:	b1c6      	cbz	r6, 80165fc <rcl_action_take_goal_request+0x74>
 80165ca:	6820      	ldr	r0, [r4, #0]
 80165cc:	4632      	mov	r2, r6
 80165ce:	4629      	mov	r1, r5
 80165d0:	f7fe fde6 	bl	80151a0 <rcl_take_request>
 80165d4:	b148      	cbz	r0, 80165ea <rcl_action_take_goal_request+0x62>
 80165d6:	280a      	cmp	r0, #10
 80165d8:	d007      	beq.n	80165ea <rcl_action_take_goal_request+0x62>
 80165da:	f240 2259 	movw	r2, #601	@ 0x259
 80165de:	f640 0399 	movw	r3, #2201	@ 0x899
 80165e2:	4290      	cmp	r0, r2
 80165e4:	bf0c      	ite	eq
 80165e6:	4618      	moveq	r0, r3
 80165e8:	2001      	movne	r0, #1
 80165ea:	bd70      	pop	{r4, r5, r6, pc}
 80165ec:	f7f7 ffdc 	bl	800e5a8 <rcutils_reset_error>
 80165f0:	f640 0098 	movw	r0, #2200	@ 0x898
 80165f4:	bd70      	pop	{r4, r5, r6, pc}
 80165f6:	f640 0098 	movw	r0, #2200	@ 0x898
 80165fa:	bd70      	pop	{r4, r5, r6, pc}
 80165fc:	200b      	movs	r0, #11
 80165fe:	bd70      	pop	{r4, r5, r6, pc}
 8016600:	f640 0098 	movw	r0, #2200	@ 0x898
 8016604:	4770      	bx	lr
 8016606:	bf00      	nop

08016608 <rcl_action_send_goal_response>:
 8016608:	b390      	cbz	r0, 8016670 <rcl_action_send_goal_response+0x68>
 801660a:	b570      	push	{r4, r5, r6, lr}
 801660c:	4604      	mov	r4, r0
 801660e:	6800      	ldr	r0, [r0, #0]
 8016610:	b348      	cbz	r0, 8016666 <rcl_action_send_goal_response+0x5e>
 8016612:	460d      	mov	r5, r1
 8016614:	4616      	mov	r6, r2
 8016616:	f7fe fe1b 	bl	8015250 <rcl_service_is_valid>
 801661a:	b1f8      	cbz	r0, 801665c <rcl_action_send_goal_response+0x54>
 801661c:	6820      	ldr	r0, [r4, #0]
 801661e:	3004      	adds	r0, #4
 8016620:	f7fe fe16 	bl	8015250 <rcl_service_is_valid>
 8016624:	b1d0      	cbz	r0, 801665c <rcl_action_send_goal_response+0x54>
 8016626:	6820      	ldr	r0, [r4, #0]
 8016628:	3008      	adds	r0, #8
 801662a:	f7fe fe11 	bl	8015250 <rcl_service_is_valid>
 801662e:	b1a8      	cbz	r0, 801665c <rcl_action_send_goal_response+0x54>
 8016630:	6820      	ldr	r0, [r4, #0]
 8016632:	300c      	adds	r0, #12
 8016634:	f7f6 fabe 	bl	800cbb4 <rcl_publisher_is_valid>
 8016638:	b180      	cbz	r0, 801665c <rcl_action_send_goal_response+0x54>
 801663a:	6820      	ldr	r0, [r4, #0]
 801663c:	3010      	adds	r0, #16
 801663e:	f7f6 fab9 	bl	800cbb4 <rcl_publisher_is_valid>
 8016642:	b158      	cbz	r0, 801665c <rcl_action_send_goal_response+0x54>
 8016644:	b195      	cbz	r5, 801666c <rcl_action_send_goal_response+0x64>
 8016646:	b18e      	cbz	r6, 801666c <rcl_action_send_goal_response+0x64>
 8016648:	6820      	ldr	r0, [r4, #0]
 801664a:	4632      	mov	r2, r6
 801664c:	4629      	mov	r1, r5
 801664e:	f7fe fde7 	bl	8015220 <rcl_send_response>
 8016652:	b110      	cbz	r0, 801665a <rcl_action_send_goal_response+0x52>
 8016654:	2802      	cmp	r0, #2
 8016656:	bf18      	it	ne
 8016658:	2001      	movne	r0, #1
 801665a:	bd70      	pop	{r4, r5, r6, pc}
 801665c:	f7f7 ffa4 	bl	800e5a8 <rcutils_reset_error>
 8016660:	f640 0098 	movw	r0, #2200	@ 0x898
 8016664:	bd70      	pop	{r4, r5, r6, pc}
 8016666:	f640 0098 	movw	r0, #2200	@ 0x898
 801666a:	bd70      	pop	{r4, r5, r6, pc}
 801666c:	200b      	movs	r0, #11
 801666e:	bd70      	pop	{r4, r5, r6, pc}
 8016670:	f640 0098 	movw	r0, #2200	@ 0x898
 8016674:	4770      	bx	lr
 8016676:	bf00      	nop

08016678 <rcl_action_take_result_request>:
 8016678:	2800      	cmp	r0, #0
 801667a:	d03a      	beq.n	80166f2 <rcl_action_take_result_request+0x7a>
 801667c:	b570      	push	{r4, r5, r6, lr}
 801667e:	4604      	mov	r4, r0
 8016680:	6800      	ldr	r0, [r0, #0]
 8016682:	b388      	cbz	r0, 80166e8 <rcl_action_take_result_request+0x70>
 8016684:	460d      	mov	r5, r1
 8016686:	4616      	mov	r6, r2
 8016688:	f7fe fde2 	bl	8015250 <rcl_service_is_valid>
 801668c:	b338      	cbz	r0, 80166de <rcl_action_take_result_request+0x66>
 801668e:	6820      	ldr	r0, [r4, #0]
 8016690:	3004      	adds	r0, #4
 8016692:	f7fe fddd 	bl	8015250 <rcl_service_is_valid>
 8016696:	b310      	cbz	r0, 80166de <rcl_action_take_result_request+0x66>
 8016698:	6820      	ldr	r0, [r4, #0]
 801669a:	3008      	adds	r0, #8
 801669c:	f7fe fdd8 	bl	8015250 <rcl_service_is_valid>
 80166a0:	b1e8      	cbz	r0, 80166de <rcl_action_take_result_request+0x66>
 80166a2:	6820      	ldr	r0, [r4, #0]
 80166a4:	300c      	adds	r0, #12
 80166a6:	f7f6 fa85 	bl	800cbb4 <rcl_publisher_is_valid>
 80166aa:	b1c0      	cbz	r0, 80166de <rcl_action_take_result_request+0x66>
 80166ac:	6820      	ldr	r0, [r4, #0]
 80166ae:	3010      	adds	r0, #16
 80166b0:	f7f6 fa80 	bl	800cbb4 <rcl_publisher_is_valid>
 80166b4:	b198      	cbz	r0, 80166de <rcl_action_take_result_request+0x66>
 80166b6:	b1d5      	cbz	r5, 80166ee <rcl_action_take_result_request+0x76>
 80166b8:	b1ce      	cbz	r6, 80166ee <rcl_action_take_result_request+0x76>
 80166ba:	6820      	ldr	r0, [r4, #0]
 80166bc:	4632      	mov	r2, r6
 80166be:	4629      	mov	r1, r5
 80166c0:	3008      	adds	r0, #8
 80166c2:	f7fe fd6d 	bl	80151a0 <rcl_take_request>
 80166c6:	b148      	cbz	r0, 80166dc <rcl_action_take_result_request+0x64>
 80166c8:	280a      	cmp	r0, #10
 80166ca:	d007      	beq.n	80166dc <rcl_action_take_result_request+0x64>
 80166cc:	f240 2259 	movw	r2, #601	@ 0x259
 80166d0:	f640 0399 	movw	r3, #2201	@ 0x899
 80166d4:	4290      	cmp	r0, r2
 80166d6:	bf0c      	ite	eq
 80166d8:	4618      	moveq	r0, r3
 80166da:	2001      	movne	r0, #1
 80166dc:	bd70      	pop	{r4, r5, r6, pc}
 80166de:	f7f7 ff63 	bl	800e5a8 <rcutils_reset_error>
 80166e2:	f640 0098 	movw	r0, #2200	@ 0x898
 80166e6:	bd70      	pop	{r4, r5, r6, pc}
 80166e8:	f640 0098 	movw	r0, #2200	@ 0x898
 80166ec:	bd70      	pop	{r4, r5, r6, pc}
 80166ee:	200b      	movs	r0, #11
 80166f0:	bd70      	pop	{r4, r5, r6, pc}
 80166f2:	f640 0098 	movw	r0, #2200	@ 0x898
 80166f6:	4770      	bx	lr

080166f8 <rcl_action_take_cancel_request>:
 80166f8:	2800      	cmp	r0, #0
 80166fa:	d03a      	beq.n	8016772 <rcl_action_take_cancel_request+0x7a>
 80166fc:	b570      	push	{r4, r5, r6, lr}
 80166fe:	4604      	mov	r4, r0
 8016700:	6800      	ldr	r0, [r0, #0]
 8016702:	b388      	cbz	r0, 8016768 <rcl_action_take_cancel_request+0x70>
 8016704:	460d      	mov	r5, r1
 8016706:	4616      	mov	r6, r2
 8016708:	f7fe fda2 	bl	8015250 <rcl_service_is_valid>
 801670c:	b338      	cbz	r0, 801675e <rcl_action_take_cancel_request+0x66>
 801670e:	6820      	ldr	r0, [r4, #0]
 8016710:	3004      	adds	r0, #4
 8016712:	f7fe fd9d 	bl	8015250 <rcl_service_is_valid>
 8016716:	b310      	cbz	r0, 801675e <rcl_action_take_cancel_request+0x66>
 8016718:	6820      	ldr	r0, [r4, #0]
 801671a:	3008      	adds	r0, #8
 801671c:	f7fe fd98 	bl	8015250 <rcl_service_is_valid>
 8016720:	b1e8      	cbz	r0, 801675e <rcl_action_take_cancel_request+0x66>
 8016722:	6820      	ldr	r0, [r4, #0]
 8016724:	300c      	adds	r0, #12
 8016726:	f7f6 fa45 	bl	800cbb4 <rcl_publisher_is_valid>
 801672a:	b1c0      	cbz	r0, 801675e <rcl_action_take_cancel_request+0x66>
 801672c:	6820      	ldr	r0, [r4, #0]
 801672e:	3010      	adds	r0, #16
 8016730:	f7f6 fa40 	bl	800cbb4 <rcl_publisher_is_valid>
 8016734:	b198      	cbz	r0, 801675e <rcl_action_take_cancel_request+0x66>
 8016736:	b1d5      	cbz	r5, 801676e <rcl_action_take_cancel_request+0x76>
 8016738:	b1ce      	cbz	r6, 801676e <rcl_action_take_cancel_request+0x76>
 801673a:	6820      	ldr	r0, [r4, #0]
 801673c:	4632      	mov	r2, r6
 801673e:	4629      	mov	r1, r5
 8016740:	3004      	adds	r0, #4
 8016742:	f7fe fd2d 	bl	80151a0 <rcl_take_request>
 8016746:	b148      	cbz	r0, 801675c <rcl_action_take_cancel_request+0x64>
 8016748:	280a      	cmp	r0, #10
 801674a:	d007      	beq.n	801675c <rcl_action_take_cancel_request+0x64>
 801674c:	f240 2259 	movw	r2, #601	@ 0x259
 8016750:	f640 0399 	movw	r3, #2201	@ 0x899
 8016754:	4290      	cmp	r0, r2
 8016756:	bf0c      	ite	eq
 8016758:	4618      	moveq	r0, r3
 801675a:	2001      	movne	r0, #1
 801675c:	bd70      	pop	{r4, r5, r6, pc}
 801675e:	f7f7 ff23 	bl	800e5a8 <rcutils_reset_error>
 8016762:	f640 0098 	movw	r0, #2200	@ 0x898
 8016766:	bd70      	pop	{r4, r5, r6, pc}
 8016768:	f640 0098 	movw	r0, #2200	@ 0x898
 801676c:	bd70      	pop	{r4, r5, r6, pc}
 801676e:	200b      	movs	r0, #11
 8016770:	bd70      	pop	{r4, r5, r6, pc}
 8016772:	f640 0098 	movw	r0, #2200	@ 0x898
 8016776:	4770      	bx	lr

08016778 <rcl_action_send_cancel_response>:
 8016778:	b398      	cbz	r0, 80167e2 <rcl_action_send_cancel_response+0x6a>
 801677a:	b570      	push	{r4, r5, r6, lr}
 801677c:	4604      	mov	r4, r0
 801677e:	6800      	ldr	r0, [r0, #0]
 8016780:	b350      	cbz	r0, 80167d8 <rcl_action_send_cancel_response+0x60>
 8016782:	460d      	mov	r5, r1
 8016784:	4616      	mov	r6, r2
 8016786:	f7fe fd63 	bl	8015250 <rcl_service_is_valid>
 801678a:	b300      	cbz	r0, 80167ce <rcl_action_send_cancel_response+0x56>
 801678c:	6820      	ldr	r0, [r4, #0]
 801678e:	3004      	adds	r0, #4
 8016790:	f7fe fd5e 	bl	8015250 <rcl_service_is_valid>
 8016794:	b1d8      	cbz	r0, 80167ce <rcl_action_send_cancel_response+0x56>
 8016796:	6820      	ldr	r0, [r4, #0]
 8016798:	3008      	adds	r0, #8
 801679a:	f7fe fd59 	bl	8015250 <rcl_service_is_valid>
 801679e:	b1b0      	cbz	r0, 80167ce <rcl_action_send_cancel_response+0x56>
 80167a0:	6820      	ldr	r0, [r4, #0]
 80167a2:	300c      	adds	r0, #12
 80167a4:	f7f6 fa06 	bl	800cbb4 <rcl_publisher_is_valid>
 80167a8:	b188      	cbz	r0, 80167ce <rcl_action_send_cancel_response+0x56>
 80167aa:	6820      	ldr	r0, [r4, #0]
 80167ac:	3010      	adds	r0, #16
 80167ae:	f7f6 fa01 	bl	800cbb4 <rcl_publisher_is_valid>
 80167b2:	b160      	cbz	r0, 80167ce <rcl_action_send_cancel_response+0x56>
 80167b4:	b19d      	cbz	r5, 80167de <rcl_action_send_cancel_response+0x66>
 80167b6:	b196      	cbz	r6, 80167de <rcl_action_send_cancel_response+0x66>
 80167b8:	6820      	ldr	r0, [r4, #0]
 80167ba:	4632      	mov	r2, r6
 80167bc:	4629      	mov	r1, r5
 80167be:	3004      	adds	r0, #4
 80167c0:	f7fe fd2e 	bl	8015220 <rcl_send_response>
 80167c4:	b110      	cbz	r0, 80167cc <rcl_action_send_cancel_response+0x54>
 80167c6:	2802      	cmp	r0, #2
 80167c8:	bf18      	it	ne
 80167ca:	2001      	movne	r0, #1
 80167cc:	bd70      	pop	{r4, r5, r6, pc}
 80167ce:	f7f7 feeb 	bl	800e5a8 <rcutils_reset_error>
 80167d2:	f640 0098 	movw	r0, #2200	@ 0x898
 80167d6:	bd70      	pop	{r4, r5, r6, pc}
 80167d8:	f640 0098 	movw	r0, #2200	@ 0x898
 80167dc:	bd70      	pop	{r4, r5, r6, pc}
 80167de:	200b      	movs	r0, #11
 80167e0:	bd70      	pop	{r4, r5, r6, pc}
 80167e2:	f640 0098 	movw	r0, #2200	@ 0x898
 80167e6:	4770      	bx	lr

080167e8 <rcl_action_wait_set_add_action_server>:
 80167e8:	2800      	cmp	r0, #0
 80167ea:	d04d      	beq.n	8016888 <rcl_action_wait_set_add_action_server+0xa0>
 80167ec:	b570      	push	{r4, r5, r6, lr}
 80167ee:	460c      	mov	r4, r1
 80167f0:	b159      	cbz	r1, 801680a <rcl_action_wait_set_add_action_server+0x22>
 80167f2:	4605      	mov	r5, r0
 80167f4:	6808      	ldr	r0, [r1, #0]
 80167f6:	b140      	cbz	r0, 801680a <rcl_action_wait_set_add_action_server+0x22>
 80167f8:	4616      	mov	r6, r2
 80167fa:	f7fe fd29 	bl	8015250 <rcl_service_is_valid>
 80167fe:	b120      	cbz	r0, 801680a <rcl_action_wait_set_add_action_server+0x22>
 8016800:	6820      	ldr	r0, [r4, #0]
 8016802:	3004      	adds	r0, #4
 8016804:	f7fe fd24 	bl	8015250 <rcl_service_is_valid>
 8016808:	b910      	cbnz	r0, 8016810 <rcl_action_wait_set_add_action_server+0x28>
 801680a:	f640 0098 	movw	r0, #2200	@ 0x898
 801680e:	bd70      	pop	{r4, r5, r6, pc}
 8016810:	6820      	ldr	r0, [r4, #0]
 8016812:	3008      	adds	r0, #8
 8016814:	f7fe fd1c 	bl	8015250 <rcl_service_is_valid>
 8016818:	2800      	cmp	r0, #0
 801681a:	d0f6      	beq.n	801680a <rcl_action_wait_set_add_action_server+0x22>
 801681c:	6820      	ldr	r0, [r4, #0]
 801681e:	300c      	adds	r0, #12
 8016820:	f7f6 f9e0 	bl	800cbe4 <rcl_publisher_is_valid_except_context>
 8016824:	2800      	cmp	r0, #0
 8016826:	d0f0      	beq.n	801680a <rcl_action_wait_set_add_action_server+0x22>
 8016828:	6820      	ldr	r0, [r4, #0]
 801682a:	3010      	adds	r0, #16
 801682c:	f7f6 f9da 	bl	800cbe4 <rcl_publisher_is_valid_except_context>
 8016830:	2800      	cmp	r0, #0
 8016832:	d0ea      	beq.n	801680a <rcl_action_wait_set_add_action_server+0x22>
 8016834:	6821      	ldr	r1, [r4, #0]
 8016836:	4628      	mov	r0, r5
 8016838:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 801683c:	f7ff face 	bl	8015ddc <rcl_wait_set_add_service>
 8016840:	2800      	cmp	r0, #0
 8016842:	d1e4      	bne.n	801680e <rcl_action_wait_set_add_action_server+0x26>
 8016844:	6821      	ldr	r1, [r4, #0]
 8016846:	4628      	mov	r0, r5
 8016848:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 801684c:	3104      	adds	r1, #4
 801684e:	f7ff fac5 	bl	8015ddc <rcl_wait_set_add_service>
 8016852:	2800      	cmp	r0, #0
 8016854:	d1db      	bne.n	801680e <rcl_action_wait_set_add_action_server+0x26>
 8016856:	6821      	ldr	r1, [r4, #0]
 8016858:	4628      	mov	r0, r5
 801685a:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 801685e:	3108      	adds	r1, #8
 8016860:	f7ff fabc 	bl	8015ddc <rcl_wait_set_add_service>
 8016864:	2800      	cmp	r0, #0
 8016866:	d1d2      	bne.n	801680e <rcl_action_wait_set_add_action_server+0x26>
 8016868:	6821      	ldr	r1, [r4, #0]
 801686a:	4628      	mov	r0, r5
 801686c:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8016870:	3114      	adds	r1, #20
 8016872:	f7ff fa57 	bl	8015d24 <rcl_wait_set_add_timer>
 8016876:	2800      	cmp	r0, #0
 8016878:	d1c9      	bne.n	801680e <rcl_action_wait_set_add_action_server+0x26>
 801687a:	2e00      	cmp	r6, #0
 801687c:	d0c7      	beq.n	801680e <rcl_action_wait_set_add_action_server+0x26>
 801687e:	6823      	ldr	r3, [r4, #0]
 8016880:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8016884:	6033      	str	r3, [r6, #0]
 8016886:	bd70      	pop	{r4, r5, r6, pc}
 8016888:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801688c:	4770      	bx	lr
 801688e:	bf00      	nop

08016890 <rcl_action_server_wait_set_get_entities_ready>:
 8016890:	2800      	cmp	r0, #0
 8016892:	d05a      	beq.n	801694a <rcl_action_server_wait_set_get_entities_ready+0xba>
 8016894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016896:	460c      	mov	r4, r1
 8016898:	b161      	cbz	r1, 80168b4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801689a:	4605      	mov	r5, r0
 801689c:	6808      	ldr	r0, [r1, #0]
 801689e:	b148      	cbz	r0, 80168b4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80168a0:	4616      	mov	r6, r2
 80168a2:	461f      	mov	r7, r3
 80168a4:	f7fe fcd4 	bl	8015250 <rcl_service_is_valid>
 80168a8:	b120      	cbz	r0, 80168b4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80168aa:	6820      	ldr	r0, [r4, #0]
 80168ac:	3004      	adds	r0, #4
 80168ae:	f7fe fccf 	bl	8015250 <rcl_service_is_valid>
 80168b2:	b910      	cbnz	r0, 80168ba <rcl_action_server_wait_set_get_entities_ready+0x2a>
 80168b4:	f640 0098 	movw	r0, #2200	@ 0x898
 80168b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80168ba:	6820      	ldr	r0, [r4, #0]
 80168bc:	3008      	adds	r0, #8
 80168be:	f7fe fcc7 	bl	8015250 <rcl_service_is_valid>
 80168c2:	2800      	cmp	r0, #0
 80168c4:	d0f6      	beq.n	80168b4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80168c6:	6820      	ldr	r0, [r4, #0]
 80168c8:	300c      	adds	r0, #12
 80168ca:	f7f6 f98b 	bl	800cbe4 <rcl_publisher_is_valid_except_context>
 80168ce:	2800      	cmp	r0, #0
 80168d0:	d0f0      	beq.n	80168b4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80168d2:	6820      	ldr	r0, [r4, #0]
 80168d4:	3010      	adds	r0, #16
 80168d6:	f7f6 f985 	bl	800cbe4 <rcl_publisher_is_valid_except_context>
 80168da:	2800      	cmp	r0, #0
 80168dc:	d0ea      	beq.n	80168b4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80168de:	b3be      	cbz	r6, 8016950 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80168e0:	b3b7      	cbz	r7, 8016950 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80168e2:	9b06      	ldr	r3, [sp, #24]
 80168e4:	b3a3      	cbz	r3, 8016950 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80168e6:	9b07      	ldr	r3, [sp, #28]
 80168e8:	b393      	cbz	r3, 8016950 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80168ea:	6821      	ldr	r1, [r4, #0]
 80168ec:	692a      	ldr	r2, [r5, #16]
 80168ee:	6a2c      	ldr	r4, [r5, #32]
 80168f0:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 80168f4:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 80168f8:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 80168fc:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8016900:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8016904:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8016908:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801690c:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8016910:	1a64      	subs	r4, r4, r1
 8016912:	fab4 f484 	clz	r4, r4
 8016916:	0964      	lsrs	r4, r4, #5
 8016918:	7034      	strb	r4, [r6, #0]
 801691a:	1d0c      	adds	r4, r1, #4
 801691c:	1b1b      	subs	r3, r3, r4
 801691e:	fab3 f383 	clz	r3, r3
 8016922:	095b      	lsrs	r3, r3, #5
 8016924:	f101 0408 	add.w	r4, r1, #8
 8016928:	703b      	strb	r3, [r7, #0]
 801692a:	f101 0314 	add.w	r3, r1, #20
 801692e:	1b01      	subs	r1, r0, r4
 8016930:	1ad3      	subs	r3, r2, r3
 8016932:	fab1 f181 	clz	r1, r1
 8016936:	9a06      	ldr	r2, [sp, #24]
 8016938:	0949      	lsrs	r1, r1, #5
 801693a:	7011      	strb	r1, [r2, #0]
 801693c:	fab3 f383 	clz	r3, r3
 8016940:	9a07      	ldr	r2, [sp, #28]
 8016942:	095b      	lsrs	r3, r3, #5
 8016944:	2000      	movs	r0, #0
 8016946:	7013      	strb	r3, [r2, #0]
 8016948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801694a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801694e:	4770      	bx	lr
 8016950:	200b      	movs	r0, #11
 8016952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016954 <_execute_event_handler>:
 8016954:	2002      	movs	r0, #2
 8016956:	4770      	bx	lr

08016958 <_cancel_goal_event_handler>:
 8016958:	2003      	movs	r0, #3
 801695a:	4770      	bx	lr

0801695c <_succeed_event_handler>:
 801695c:	2004      	movs	r0, #4
 801695e:	4770      	bx	lr

08016960 <_abort_event_handler>:
 8016960:	2006      	movs	r0, #6
 8016962:	4770      	bx	lr

08016964 <_canceled_event_handler>:
 8016964:	2005      	movs	r0, #5
 8016966:	4770      	bx	lr

08016968 <rcl_action_transition_goal_state>:
 8016968:	b2c2      	uxtb	r2, r0
 801696a:	2a06      	cmp	r2, #6
 801696c:	d80c      	bhi.n	8016988 <rcl_action_transition_goal_state+0x20>
 801696e:	2904      	cmp	r1, #4
 8016970:	d80a      	bhi.n	8016988 <rcl_action_transition_goal_state+0x20>
 8016972:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8016976:	b410      	push	{r4}
 8016978:	1853      	adds	r3, r2, r1
 801697a:	4c06      	ldr	r4, [pc, #24]	@ (8016994 <rcl_action_transition_goal_state+0x2c>)
 801697c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8016980:	b123      	cbz	r3, 801698c <rcl_action_transition_goal_state+0x24>
 8016982:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016986:	4718      	bx	r3
 8016988:	2000      	movs	r0, #0
 801698a:	4770      	bx	lr
 801698c:	2000      	movs	r0, #0
 801698e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016992:	4770      	bx	lr
 8016994:	0801b938 	.word	0x0801b938

08016998 <rcl_action_get_zero_initialized_cancel_response>:
 8016998:	b510      	push	{r4, lr}
 801699a:	4c07      	ldr	r4, [pc, #28]	@ (80169b8 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801699c:	4686      	mov	lr, r0
 801699e:	4684      	mov	ip, r0
 80169a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80169a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80169a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80169a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80169ac:	6823      	ldr	r3, [r4, #0]
 80169ae:	f8cc 3000 	str.w	r3, [ip]
 80169b2:	4670      	mov	r0, lr
 80169b4:	bd10      	pop	{r4, pc}
 80169b6:	bf00      	nop
 80169b8:	0801b9c4 	.word	0x0801b9c4

080169bc <rclc_action_send_result_request>:
 80169bc:	b1d0      	cbz	r0, 80169f4 <rclc_action_send_result_request+0x38>
 80169be:	b500      	push	{lr}
 80169c0:	4684      	mov	ip, r0
 80169c2:	b087      	sub	sp, #28
 80169c4:	f8d0 0009 	ldr.w	r0, [r0, #9]
 80169c8:	f8dc 100d 	ldr.w	r1, [ip, #13]
 80169cc:	f8dc 2011 	ldr.w	r2, [ip, #17]
 80169d0:	f8dc 3015 	ldr.w	r3, [ip, #21]
 80169d4:	f10d 0e08 	add.w	lr, sp, #8
 80169d8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80169dc:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80169e0:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 80169e4:	a902      	add	r1, sp, #8
 80169e6:	3010      	adds	r0, #16
 80169e8:	f7ff fbda 	bl	80161a0 <rcl_action_send_result_request>
 80169ec:	b920      	cbnz	r0, 80169f8 <rclc_action_send_result_request+0x3c>
 80169ee:	b007      	add	sp, #28
 80169f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80169f4:	200b      	movs	r0, #11
 80169f6:	4770      	bx	lr
 80169f8:	9001      	str	r0, [sp, #4]
 80169fa:	f7f7 fdd5 	bl	800e5a8 <rcutils_reset_error>
 80169fe:	9801      	ldr	r0, [sp, #4]
 8016a00:	b007      	add	sp, #28
 8016a02:	f85d fb04 	ldr.w	pc, [sp], #4
 8016a06:	bf00      	nop

08016a08 <rclc_action_take_goal_handle>:
 8016a08:	b160      	cbz	r0, 8016a24 <rclc_action_take_goal_handle+0x1c>
 8016a0a:	6883      	ldr	r3, [r0, #8]
 8016a0c:	b143      	cbz	r3, 8016a20 <rclc_action_take_goal_handle+0x18>
 8016a0e:	6819      	ldr	r1, [r3, #0]
 8016a10:	6081      	str	r1, [r0, #8]
 8016a12:	2200      	movs	r2, #0
 8016a14:	721a      	strb	r2, [r3, #8]
 8016a16:	68c1      	ldr	r1, [r0, #12]
 8016a18:	6019      	str	r1, [r3, #0]
 8016a1a:	621a      	str	r2, [r3, #32]
 8016a1c:	849a      	strh	r2, [r3, #36]	@ 0x24
 8016a1e:	60c3      	str	r3, [r0, #12]
 8016a20:	4618      	mov	r0, r3
 8016a22:	4770      	bx	lr
 8016a24:	4603      	mov	r3, r0
 8016a26:	e7fb      	b.n	8016a20 <rclc_action_take_goal_handle+0x18>

08016a28 <rclc_action_remove_used_goal_handle>:
 8016a28:	b180      	cbz	r0, 8016a4c <rclc_action_remove_used_goal_handle+0x24>
 8016a2a:	b179      	cbz	r1, 8016a4c <rclc_action_remove_used_goal_handle+0x24>
 8016a2c:	68c3      	ldr	r3, [r0, #12]
 8016a2e:	4299      	cmp	r1, r3
 8016a30:	d00d      	beq.n	8016a4e <rclc_action_remove_used_goal_handle+0x26>
 8016a32:	b12b      	cbz	r3, 8016a40 <rclc_action_remove_used_goal_handle+0x18>
 8016a34:	681a      	ldr	r2, [r3, #0]
 8016a36:	4291      	cmp	r1, r2
 8016a38:	d003      	beq.n	8016a42 <rclc_action_remove_used_goal_handle+0x1a>
 8016a3a:	4613      	mov	r3, r2
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d1f9      	bne.n	8016a34 <rclc_action_remove_used_goal_handle+0xc>
 8016a40:	4770      	bx	lr
 8016a42:	680a      	ldr	r2, [r1, #0]
 8016a44:	601a      	str	r2, [r3, #0]
 8016a46:	6883      	ldr	r3, [r0, #8]
 8016a48:	600b      	str	r3, [r1, #0]
 8016a4a:	6081      	str	r1, [r0, #8]
 8016a4c:	4770      	bx	lr
 8016a4e:	680b      	ldr	r3, [r1, #0]
 8016a50:	60c3      	str	r3, [r0, #12]
 8016a52:	e7f8      	b.n	8016a46 <rclc_action_remove_used_goal_handle+0x1e>

08016a54 <rclc_action_find_goal_handle_by_uuid>:
 8016a54:	b538      	push	{r3, r4, r5, lr}
 8016a56:	b180      	cbz	r0, 8016a7a <rclc_action_find_goal_handle_by_uuid+0x26>
 8016a58:	460d      	mov	r5, r1
 8016a5a:	b181      	cbz	r1, 8016a7e <rclc_action_find_goal_handle_by_uuid+0x2a>
 8016a5c:	68c4      	ldr	r4, [r0, #12]
 8016a5e:	b914      	cbnz	r4, 8016a66 <rclc_action_find_goal_handle_by_uuid+0x12>
 8016a60:	e009      	b.n	8016a76 <rclc_action_find_goal_handle_by_uuid+0x22>
 8016a62:	6824      	ldr	r4, [r4, #0]
 8016a64:	b13c      	cbz	r4, 8016a76 <rclc_action_find_goal_handle_by_uuid+0x22>
 8016a66:	f104 0009 	add.w	r0, r4, #9
 8016a6a:	2210      	movs	r2, #16
 8016a6c:	4629      	mov	r1, r5
 8016a6e:	f002 ffef 	bl	8019a50 <memcmp>
 8016a72:	2800      	cmp	r0, #0
 8016a74:	d1f5      	bne.n	8016a62 <rclc_action_find_goal_handle_by_uuid+0xe>
 8016a76:	4620      	mov	r0, r4
 8016a78:	bd38      	pop	{r3, r4, r5, pc}
 8016a7a:	4604      	mov	r4, r0
 8016a7c:	e7fb      	b.n	8016a76 <rclc_action_find_goal_handle_by_uuid+0x22>
 8016a7e:	460c      	mov	r4, r1
 8016a80:	e7f9      	b.n	8016a76 <rclc_action_find_goal_handle_by_uuid+0x22>
 8016a82:	bf00      	nop

08016a84 <rclc_action_find_first_handle_by_status>:
 8016a84:	b140      	cbz	r0, 8016a98 <rclc_action_find_first_handle_by_status+0x14>
 8016a86:	68c0      	ldr	r0, [r0, #12]
 8016a88:	b910      	cbnz	r0, 8016a90 <rclc_action_find_first_handle_by_status+0xc>
 8016a8a:	e005      	b.n	8016a98 <rclc_action_find_first_handle_by_status+0x14>
 8016a8c:	6800      	ldr	r0, [r0, #0]
 8016a8e:	b118      	cbz	r0, 8016a98 <rclc_action_find_first_handle_by_status+0x14>
 8016a90:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8016a94:	428b      	cmp	r3, r1
 8016a96:	d1f9      	bne.n	8016a8c <rclc_action_find_first_handle_by_status+0x8>
 8016a98:	4770      	bx	lr
 8016a9a:	bf00      	nop

08016a9c <rclc_action_find_first_terminated_handle>:
 8016a9c:	b140      	cbz	r0, 8016ab0 <rclc_action_find_first_terminated_handle+0x14>
 8016a9e:	68c0      	ldr	r0, [r0, #12]
 8016aa0:	b910      	cbnz	r0, 8016aa8 <rclc_action_find_first_terminated_handle+0xc>
 8016aa2:	e005      	b.n	8016ab0 <rclc_action_find_first_terminated_handle+0x14>
 8016aa4:	6800      	ldr	r0, [r0, #0]
 8016aa6:	b118      	cbz	r0, 8016ab0 <rclc_action_find_first_terminated_handle+0x14>
 8016aa8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8016aac:	2b03      	cmp	r3, #3
 8016aae:	ddf9      	ble.n	8016aa4 <rclc_action_find_first_terminated_handle+0x8>
 8016ab0:	4770      	bx	lr
 8016ab2:	bf00      	nop

08016ab4 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8016ab4:	b170      	cbz	r0, 8016ad4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8016ab6:	68c0      	ldr	r0, [r0, #12]
 8016ab8:	b160      	cbz	r0, 8016ad4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8016aba:	b410      	push	{r4}
 8016abc:	e001      	b.n	8016ac2 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8016abe:	6800      	ldr	r0, [r0, #0]
 8016ac0:	b128      	cbz	r0, 8016ace <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8016ac2:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8016ac6:	4299      	cmp	r1, r3
 8016ac8:	bf08      	it	eq
 8016aca:	4294      	cmpeq	r4, r2
 8016acc:	d1f7      	bne.n	8016abe <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8016ace:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016ad2:	4770      	bx	lr
 8016ad4:	4770      	bx	lr
 8016ad6:	bf00      	nop

08016ad8 <rclc_action_find_handle_by_result_request_sequence_number>:
 8016ad8:	b170      	cbz	r0, 8016af8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8016ada:	68c0      	ldr	r0, [r0, #12]
 8016adc:	b160      	cbz	r0, 8016af8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8016ade:	b410      	push	{r4}
 8016ae0:	e001      	b.n	8016ae6 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8016ae2:	6800      	ldr	r0, [r0, #0]
 8016ae4:	b128      	cbz	r0, 8016af2 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8016ae6:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8016aea:	4299      	cmp	r1, r3
 8016aec:	bf08      	it	eq
 8016aee:	4294      	cmpeq	r4, r2
 8016af0:	d1f7      	bne.n	8016ae2 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8016af2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016af6:	4770      	bx	lr
 8016af8:	4770      	bx	lr
 8016afa:	bf00      	nop

08016afc <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8016afc:	b170      	cbz	r0, 8016b1c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8016afe:	68c0      	ldr	r0, [r0, #12]
 8016b00:	b160      	cbz	r0, 8016b1c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8016b02:	b410      	push	{r4}
 8016b04:	e001      	b.n	8016b0a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8016b06:	6800      	ldr	r0, [r0, #0]
 8016b08:	b128      	cbz	r0, 8016b16 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8016b0a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8016b0e:	4299      	cmp	r1, r3
 8016b10:	bf08      	it	eq
 8016b12:	4294      	cmpeq	r4, r2
 8016b14:	d1f7      	bne.n	8016b06 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8016b16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016b1a:	4770      	bx	lr
 8016b1c:	4770      	bx	lr
 8016b1e:	bf00      	nop

08016b20 <rclc_action_find_first_handle_with_goal_response>:
 8016b20:	b140      	cbz	r0, 8016b34 <rclc_action_find_first_handle_with_goal_response+0x14>
 8016b22:	68c0      	ldr	r0, [r0, #12]
 8016b24:	b910      	cbnz	r0, 8016b2c <rclc_action_find_first_handle_with_goal_response+0xc>
 8016b26:	e005      	b.n	8016b34 <rclc_action_find_first_handle_with_goal_response+0x14>
 8016b28:	6800      	ldr	r0, [r0, #0]
 8016b2a:	b118      	cbz	r0, 8016b34 <rclc_action_find_first_handle_with_goal_response+0x14>
 8016b2c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	d0f9      	beq.n	8016b28 <rclc_action_find_first_handle_with_goal_response+0x8>
 8016b34:	4770      	bx	lr
 8016b36:	bf00      	nop

08016b38 <rclc_action_find_first_handle_with_result_response>:
 8016b38:	b140      	cbz	r0, 8016b4c <rclc_action_find_first_handle_with_result_response+0x14>
 8016b3a:	68c0      	ldr	r0, [r0, #12]
 8016b3c:	b910      	cbnz	r0, 8016b44 <rclc_action_find_first_handle_with_result_response+0xc>
 8016b3e:	e005      	b.n	8016b4c <rclc_action_find_first_handle_with_result_response+0x14>
 8016b40:	6800      	ldr	r0, [r0, #0]
 8016b42:	b118      	cbz	r0, 8016b4c <rclc_action_find_first_handle_with_result_response+0x14>
 8016b44:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	d0f9      	beq.n	8016b40 <rclc_action_find_first_handle_with_result_response+0x8>
 8016b4c:	4770      	bx	lr
 8016b4e:	bf00      	nop

08016b50 <rclc_action_server_response_goal_request>:
 8016b50:	b198      	cbz	r0, 8016b7a <rclc_action_server_response_goal_request+0x2a>
 8016b52:	b510      	push	{r4, lr}
 8016b54:	6844      	ldr	r4, [r0, #4]
 8016b56:	b086      	sub	sp, #24
 8016b58:	2200      	movs	r2, #0
 8016b5a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8016b5e:	460b      	mov	r3, r1
 8016b60:	9205      	str	r2, [sp, #20]
 8016b62:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8016b66:	aa03      	add	r2, sp, #12
 8016b68:	f104 0010 	add.w	r0, r4, #16
 8016b6c:	f88d 300c 	strb.w	r3, [sp, #12]
 8016b70:	f7ff fd4a 	bl	8016608 <rcl_action_send_goal_response>
 8016b74:	b918      	cbnz	r0, 8016b7e <rclc_action_server_response_goal_request+0x2e>
 8016b76:	b006      	add	sp, #24
 8016b78:	bd10      	pop	{r4, pc}
 8016b7a:	200b      	movs	r0, #11
 8016b7c:	4770      	bx	lr
 8016b7e:	9001      	str	r0, [sp, #4]
 8016b80:	f7f7 fd12 	bl	800e5a8 <rcutils_reset_error>
 8016b84:	9801      	ldr	r0, [sp, #4]
 8016b86:	b006      	add	sp, #24
 8016b88:	bd10      	pop	{r4, pc}
 8016b8a:	bf00      	nop
 8016b8c:	0000      	movs	r0, r0
	...

08016b90 <rclc_action_server_goal_cancel_accept>:
 8016b90:	b310      	cbz	r0, 8016bd8 <rclc_action_server_goal_cancel_accept+0x48>
 8016b92:	b510      	push	{r4, lr}
 8016b94:	b090      	sub	sp, #64	@ 0x40
 8016b96:	4604      	mov	r4, r0
 8016b98:	a806      	add	r0, sp, #24
 8016b9a:	f7ff fefd 	bl	8016998 <rcl_action_get_zero_initialized_cancel_response>
 8016b9e:	2300      	movs	r3, #0
 8016ba0:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8016ba4:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8016ba8:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8016bac:	f88d 3018 	strb.w	r3, [sp, #24]
 8016bb0:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8016bb4:	f8cd d01c 	str.w	sp, [sp, #28]
 8016bb8:	46ec      	mov	ip, sp
 8016bba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016bbe:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8016be0 <rclc_action_server_goal_cancel_accept+0x50>
 8016bc2:	6860      	ldr	r0, [r4, #4]
 8016bc4:	aa06      	add	r2, sp, #24
 8016bc6:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8016bca:	3010      	adds	r0, #16
 8016bcc:	ed8d 7b08 	vstr	d7, [sp, #32]
 8016bd0:	f7ff fdd2 	bl	8016778 <rcl_action_send_cancel_response>
 8016bd4:	b010      	add	sp, #64	@ 0x40
 8016bd6:	bd10      	pop	{r4, pc}
 8016bd8:	200b      	movs	r0, #11
 8016bda:	4770      	bx	lr
 8016bdc:	f3af 8000 	nop.w
 8016be0:	00000001 	.word	0x00000001
 8016be4:	00000001 	.word	0x00000001

08016be8 <rclc_action_server_goal_cancel_reject>:
 8016be8:	b082      	sub	sp, #8
 8016bea:	b530      	push	{r4, r5, lr}
 8016bec:	b08b      	sub	sp, #44	@ 0x2c
 8016bee:	ac0e      	add	r4, sp, #56	@ 0x38
 8016bf0:	e884 000c 	stmia.w	r4, {r2, r3}
 8016bf4:	b188      	cbz	r0, 8016c1a <rclc_action_server_goal_cancel_reject+0x32>
 8016bf6:	4604      	mov	r4, r0
 8016bf8:	a801      	add	r0, sp, #4
 8016bfa:	460d      	mov	r5, r1
 8016bfc:	f7ff fecc 	bl	8016998 <rcl_action_get_zero_initialized_cancel_response>
 8016c00:	aa01      	add	r2, sp, #4
 8016c02:	a90e      	add	r1, sp, #56	@ 0x38
 8016c04:	f104 0010 	add.w	r0, r4, #16
 8016c08:	f88d 5004 	strb.w	r5, [sp, #4]
 8016c0c:	f7ff fdb4 	bl	8016778 <rcl_action_send_cancel_response>
 8016c10:	b00b      	add	sp, #44	@ 0x2c
 8016c12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016c16:	b002      	add	sp, #8
 8016c18:	4770      	bx	lr
 8016c1a:	200b      	movs	r0, #11
 8016c1c:	b00b      	add	sp, #44	@ 0x2c
 8016c1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016c22:	b002      	add	sp, #8
 8016c24:	4770      	bx	lr
 8016c26:	bf00      	nop

08016c28 <rcutils_string_array_fini>:
 8016c28:	b320      	cbz	r0, 8016c74 <rcutils_string_array_fini+0x4c>
 8016c2a:	b570      	push	{r4, r5, r6, lr}
 8016c2c:	4604      	mov	r4, r0
 8016c2e:	6840      	ldr	r0, [r0, #4]
 8016c30:	b1d8      	cbz	r0, 8016c6a <rcutils_string_array_fini+0x42>
 8016c32:	f104 0008 	add.w	r0, r4, #8
 8016c36:	f7f7 fbd7 	bl	800e3e8 <rcutils_allocator_is_valid>
 8016c3a:	b1b8      	cbz	r0, 8016c6c <rcutils_string_array_fini+0x44>
 8016c3c:	6823      	ldr	r3, [r4, #0]
 8016c3e:	b1bb      	cbz	r3, 8016c70 <rcutils_string_array_fini+0x48>
 8016c40:	2500      	movs	r5, #0
 8016c42:	6860      	ldr	r0, [r4, #4]
 8016c44:	462e      	mov	r6, r5
 8016c46:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8016c4a:	68e3      	ldr	r3, [r4, #12]
 8016c4c:	69a1      	ldr	r1, [r4, #24]
 8016c4e:	4798      	blx	r3
 8016c50:	e9d4 3000 	ldrd	r3, r0, [r4]
 8016c54:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8016c58:	3501      	adds	r5, #1
 8016c5a:	429d      	cmp	r5, r3
 8016c5c:	d3f3      	bcc.n	8016c46 <rcutils_string_array_fini+0x1e>
 8016c5e:	68e3      	ldr	r3, [r4, #12]
 8016c60:	69a1      	ldr	r1, [r4, #24]
 8016c62:	4798      	blx	r3
 8016c64:	2000      	movs	r0, #0
 8016c66:	e9c4 0000 	strd	r0, r0, [r4]
 8016c6a:	bd70      	pop	{r4, r5, r6, pc}
 8016c6c:	200b      	movs	r0, #11
 8016c6e:	bd70      	pop	{r4, r5, r6, pc}
 8016c70:	6860      	ldr	r0, [r4, #4]
 8016c72:	e7f4      	b.n	8016c5e <rcutils_string_array_fini+0x36>
 8016c74:	200b      	movs	r0, #11
 8016c76:	4770      	bx	lr

08016c78 <rcutils_get_zero_initialized_string_map>:
 8016c78:	4b01      	ldr	r3, [pc, #4]	@ (8016c80 <rcutils_get_zero_initialized_string_map+0x8>)
 8016c7a:	2000      	movs	r0, #0
 8016c7c:	6018      	str	r0, [r3, #0]
 8016c7e:	4770      	bx	lr
 8016c80:	200119d8 	.word	0x200119d8

08016c84 <rcutils_string_map_reserve>:
 8016c84:	2800      	cmp	r0, #0
 8016c86:	d05f      	beq.n	8016d48 <rcutils_string_map_reserve+0xc4>
 8016c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c8c:	460c      	mov	r4, r1
 8016c8e:	6801      	ldr	r1, [r0, #0]
 8016c90:	b082      	sub	sp, #8
 8016c92:	4605      	mov	r5, r0
 8016c94:	b129      	cbz	r1, 8016ca2 <rcutils_string_map_reserve+0x1e>
 8016c96:	68cb      	ldr	r3, [r1, #12]
 8016c98:	42a3      	cmp	r3, r4
 8016c9a:	d906      	bls.n	8016caa <rcutils_string_map_reserve+0x26>
 8016c9c:	461c      	mov	r4, r3
 8016c9e:	2900      	cmp	r1, #0
 8016ca0:	d1f9      	bne.n	8016c96 <rcutils_string_map_reserve+0x12>
 8016ca2:	201f      	movs	r0, #31
 8016ca4:	b002      	add	sp, #8
 8016ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016caa:	688b      	ldr	r3, [r1, #8]
 8016cac:	42a3      	cmp	r3, r4
 8016cae:	d047      	beq.n	8016d40 <rcutils_string_map_reserve+0xbc>
 8016cb0:	6a0e      	ldr	r6, [r1, #32]
 8016cb2:	2c00      	cmp	r4, #0
 8016cb4:	d034      	beq.n	8016d20 <rcutils_string_map_reserve+0x9c>
 8016cb6:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8016cba:	d243      	bcs.n	8016d44 <rcutils_string_map_reserve+0xc0>
 8016cbc:	00a7      	lsls	r7, r4, #2
 8016cbe:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8016cc2:	6808      	ldr	r0, [r1, #0]
 8016cc4:	4632      	mov	r2, r6
 8016cc6:	4639      	mov	r1, r7
 8016cc8:	47c0      	blx	r8
 8016cca:	2800      	cmp	r0, #0
 8016ccc:	d03a      	beq.n	8016d44 <rcutils_string_map_reserve+0xc0>
 8016cce:	682b      	ldr	r3, [r5, #0]
 8016cd0:	4632      	mov	r2, r6
 8016cd2:	6018      	str	r0, [r3, #0]
 8016cd4:	4639      	mov	r1, r7
 8016cd6:	6858      	ldr	r0, [r3, #4]
 8016cd8:	47c0      	blx	r8
 8016cda:	2800      	cmp	r0, #0
 8016cdc:	d032      	beq.n	8016d44 <rcutils_string_map_reserve+0xc0>
 8016cde:	682d      	ldr	r5, [r5, #0]
 8016ce0:	68ab      	ldr	r3, [r5, #8]
 8016ce2:	6068      	str	r0, [r5, #4]
 8016ce4:	42a3      	cmp	r3, r4
 8016ce6:	d226      	bcs.n	8016d36 <rcutils_string_map_reserve+0xb2>
 8016ce8:	682a      	ldr	r2, [r5, #0]
 8016cea:	eb00 0c07 	add.w	ip, r0, r7
 8016cee:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8016cf2:	45e6      	cmp	lr, ip
 8016cf4:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8016cf8:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8016cfc:	d203      	bcs.n	8016d06 <rcutils_string_map_reserve+0x82>
 8016cfe:	eb02 0c07 	add.w	ip, r2, r7
 8016d02:	4566      	cmp	r6, ip
 8016d04:	d322      	bcc.n	8016d4c <rcutils_string_map_reserve+0xc8>
 8016d06:	1ae3      	subs	r3, r4, r3
 8016d08:	009a      	lsls	r2, r3, #2
 8016d0a:	4670      	mov	r0, lr
 8016d0c:	2100      	movs	r1, #0
 8016d0e:	9201      	str	r2, [sp, #4]
 8016d10:	f002 fec8 	bl	8019aa4 <memset>
 8016d14:	9a01      	ldr	r2, [sp, #4]
 8016d16:	2100      	movs	r1, #0
 8016d18:	4630      	mov	r0, r6
 8016d1a:	f002 fec3 	bl	8019aa4 <memset>
 8016d1e:	e00a      	b.n	8016d36 <rcutils_string_map_reserve+0xb2>
 8016d20:	694f      	ldr	r7, [r1, #20]
 8016d22:	6808      	ldr	r0, [r1, #0]
 8016d24:	4631      	mov	r1, r6
 8016d26:	47b8      	blx	r7
 8016d28:	682b      	ldr	r3, [r5, #0]
 8016d2a:	4631      	mov	r1, r6
 8016d2c:	6858      	ldr	r0, [r3, #4]
 8016d2e:	601c      	str	r4, [r3, #0]
 8016d30:	47b8      	blx	r7
 8016d32:	682d      	ldr	r5, [r5, #0]
 8016d34:	606c      	str	r4, [r5, #4]
 8016d36:	2000      	movs	r0, #0
 8016d38:	60ac      	str	r4, [r5, #8]
 8016d3a:	b002      	add	sp, #8
 8016d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d40:	2000      	movs	r0, #0
 8016d42:	e7af      	b.n	8016ca4 <rcutils_string_map_reserve+0x20>
 8016d44:	200a      	movs	r0, #10
 8016d46:	e7ad      	b.n	8016ca4 <rcutils_string_map_reserve+0x20>
 8016d48:	200b      	movs	r0, #11
 8016d4a:	4770      	bx	lr
 8016d4c:	1f0b      	subs	r3, r1, #4
 8016d4e:	4418      	add	r0, r3
 8016d50:	4413      	add	r3, r2
 8016d52:	3a04      	subs	r2, #4
 8016d54:	4417      	add	r7, r2
 8016d56:	2200      	movs	r2, #0
 8016d58:	f843 2f04 	str.w	r2, [r3, #4]!
 8016d5c:	42bb      	cmp	r3, r7
 8016d5e:	f840 2f04 	str.w	r2, [r0, #4]!
 8016d62:	d1f9      	bne.n	8016d58 <rcutils_string_map_reserve+0xd4>
 8016d64:	e7e7      	b.n	8016d36 <rcutils_string_map_reserve+0xb2>
 8016d66:	bf00      	nop

08016d68 <rcutils_string_map_init>:
 8016d68:	b082      	sub	sp, #8
 8016d6a:	b570      	push	{r4, r5, r6, lr}
 8016d6c:	ac04      	add	r4, sp, #16
 8016d6e:	e884 000c 	stmia.w	r4, {r2, r3}
 8016d72:	b380      	cbz	r0, 8016dd6 <rcutils_string_map_init+0x6e>
 8016d74:	6806      	ldr	r6, [r0, #0]
 8016d76:	4604      	mov	r4, r0
 8016d78:	b12e      	cbz	r6, 8016d86 <rcutils_string_map_init+0x1e>
 8016d7a:	251e      	movs	r5, #30
 8016d7c:	4628      	mov	r0, r5
 8016d7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016d82:	b002      	add	sp, #8
 8016d84:	4770      	bx	lr
 8016d86:	a804      	add	r0, sp, #16
 8016d88:	460d      	mov	r5, r1
 8016d8a:	f7f7 fb2d 	bl	800e3e8 <rcutils_allocator_is_valid>
 8016d8e:	b310      	cbz	r0, 8016dd6 <rcutils_string_map_init+0x6e>
 8016d90:	9b04      	ldr	r3, [sp, #16]
 8016d92:	9908      	ldr	r1, [sp, #32]
 8016d94:	2024      	movs	r0, #36	@ 0x24
 8016d96:	4798      	blx	r3
 8016d98:	6020      	str	r0, [r4, #0]
 8016d9a:	b310      	cbz	r0, 8016de2 <rcutils_string_map_init+0x7a>
 8016d9c:	f10d 0e10 	add.w	lr, sp, #16
 8016da0:	e9c0 6600 	strd	r6, r6, [r0]
 8016da4:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8016da8:	f100 0c10 	add.w	ip, r0, #16
 8016dac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016db0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016db4:	f8de 3000 	ldr.w	r3, [lr]
 8016db8:	f8cc 3000 	str.w	r3, [ip]
 8016dbc:	4629      	mov	r1, r5
 8016dbe:	4620      	mov	r0, r4
 8016dc0:	f7ff ff60 	bl	8016c84 <rcutils_string_map_reserve>
 8016dc4:	4605      	mov	r5, r0
 8016dc6:	2800      	cmp	r0, #0
 8016dc8:	d0d8      	beq.n	8016d7c <rcutils_string_map_init+0x14>
 8016dca:	9b05      	ldr	r3, [sp, #20]
 8016dcc:	9908      	ldr	r1, [sp, #32]
 8016dce:	6820      	ldr	r0, [r4, #0]
 8016dd0:	4798      	blx	r3
 8016dd2:	6026      	str	r6, [r4, #0]
 8016dd4:	e7d2      	b.n	8016d7c <rcutils_string_map_init+0x14>
 8016dd6:	250b      	movs	r5, #11
 8016dd8:	4628      	mov	r0, r5
 8016dda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016dde:	b002      	add	sp, #8
 8016de0:	4770      	bx	lr
 8016de2:	250a      	movs	r5, #10
 8016de4:	e7ca      	b.n	8016d7c <rcutils_string_map_init+0x14>
 8016de6:	bf00      	nop

08016de8 <rcutils_string_map_fini>:
 8016de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016dec:	b082      	sub	sp, #8
 8016dee:	2800      	cmp	r0, #0
 8016df0:	d03a      	beq.n	8016e68 <rcutils_string_map_fini+0x80>
 8016df2:	6804      	ldr	r4, [r0, #0]
 8016df4:	4606      	mov	r6, r0
 8016df6:	2c00      	cmp	r4, #0
 8016df8:	d032      	beq.n	8016e60 <rcutils_string_map_fini+0x78>
 8016dfa:	68a3      	ldr	r3, [r4, #8]
 8016dfc:	b32b      	cbz	r3, 8016e4a <rcutils_string_map_fini+0x62>
 8016dfe:	2500      	movs	r5, #0
 8016e00:	6822      	ldr	r2, [r4, #0]
 8016e02:	462f      	mov	r7, r5
 8016e04:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8016e08:	b1e0      	cbz	r0, 8016e44 <rcutils_string_map_fini+0x5c>
 8016e0a:	6a21      	ldr	r1, [r4, #32]
 8016e0c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8016e10:	9101      	str	r1, [sp, #4]
 8016e12:	47c0      	blx	r8
 8016e14:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016e18:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8016e1c:	9901      	ldr	r1, [sp, #4]
 8016e1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016e22:	47c0      	blx	r8
 8016e24:	68e3      	ldr	r3, [r4, #12]
 8016e26:	6862      	ldr	r2, [r4, #4]
 8016e28:	3b01      	subs	r3, #1
 8016e2a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8016e2e:	60e3      	str	r3, [r4, #12]
 8016e30:	6834      	ldr	r4, [r6, #0]
 8016e32:	68a3      	ldr	r3, [r4, #8]
 8016e34:	3501      	adds	r5, #1
 8016e36:	429d      	cmp	r5, r3
 8016e38:	d207      	bcs.n	8016e4a <rcutils_string_map_fini+0x62>
 8016e3a:	6822      	ldr	r2, [r4, #0]
 8016e3c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8016e40:	2800      	cmp	r0, #0
 8016e42:	d1e2      	bne.n	8016e0a <rcutils_string_map_fini+0x22>
 8016e44:	3501      	adds	r5, #1
 8016e46:	429d      	cmp	r5, r3
 8016e48:	d3dc      	bcc.n	8016e04 <rcutils_string_map_fini+0x1c>
 8016e4a:	2100      	movs	r1, #0
 8016e4c:	4630      	mov	r0, r6
 8016e4e:	f7ff ff19 	bl	8016c84 <rcutils_string_map_reserve>
 8016e52:	4604      	mov	r4, r0
 8016e54:	b920      	cbnz	r0, 8016e60 <rcutils_string_map_fini+0x78>
 8016e56:	6830      	ldr	r0, [r6, #0]
 8016e58:	6943      	ldr	r3, [r0, #20]
 8016e5a:	6a01      	ldr	r1, [r0, #32]
 8016e5c:	4798      	blx	r3
 8016e5e:	6034      	str	r4, [r6, #0]
 8016e60:	4620      	mov	r0, r4
 8016e62:	b002      	add	sp, #8
 8016e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e68:	240b      	movs	r4, #11
 8016e6a:	4620      	mov	r0, r4
 8016e6c:	b002      	add	sp, #8
 8016e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e72:	bf00      	nop

08016e74 <rcutils_string_map_getn>:
 8016e74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e78:	b300      	cbz	r0, 8016ebc <rcutils_string_map_getn+0x48>
 8016e7a:	6807      	ldr	r7, [r0, #0]
 8016e7c:	b1ff      	cbz	r7, 8016ebe <rcutils_string_map_getn+0x4a>
 8016e7e:	4688      	mov	r8, r1
 8016e80:	b1e1      	cbz	r1, 8016ebc <rcutils_string_map_getn+0x48>
 8016e82:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8016e86:	683e      	ldr	r6, [r7, #0]
 8016e88:	f1ba 0f00 	cmp.w	sl, #0
 8016e8c:	d016      	beq.n	8016ebc <rcutils_string_map_getn+0x48>
 8016e8e:	4691      	mov	r9, r2
 8016e90:	3e04      	subs	r6, #4
 8016e92:	2400      	movs	r4, #0
 8016e94:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8016e98:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8016e9c:	4628      	mov	r0, r5
 8016e9e:	3401      	adds	r4, #1
 8016ea0:	b155      	cbz	r5, 8016eb8 <rcutils_string_map_getn+0x44>
 8016ea2:	f7e9 f9bf 	bl	8000224 <strlen>
 8016ea6:	4548      	cmp	r0, r9
 8016ea8:	4602      	mov	r2, r0
 8016eaa:	4629      	mov	r1, r5
 8016eac:	bf38      	it	cc
 8016eae:	464a      	movcc	r2, r9
 8016eb0:	4640      	mov	r0, r8
 8016eb2:	f002 fe0c 	bl	8019ace <strncmp>
 8016eb6:	b128      	cbz	r0, 8016ec4 <rcutils_string_map_getn+0x50>
 8016eb8:	45a2      	cmp	sl, r4
 8016eba:	d1eb      	bne.n	8016e94 <rcutils_string_map_getn+0x20>
 8016ebc:	2700      	movs	r7, #0
 8016ebe:	4638      	mov	r0, r7
 8016ec0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	f853 700b 	ldr.w	r7, [r3, fp]
 8016eca:	4638      	mov	r0, r7
 8016ecc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016ed0 <rmw_get_zero_initialized_context>:
 8016ed0:	b510      	push	{r4, lr}
 8016ed2:	4604      	mov	r4, r0
 8016ed4:	3010      	adds	r0, #16
 8016ed6:	f7f7 fd2b 	bl	800e930 <rmw_get_zero_initialized_init_options>
 8016eda:	2300      	movs	r3, #0
 8016edc:	2000      	movs	r0, #0
 8016ede:	2100      	movs	r1, #0
 8016ee0:	e9c4 0100 	strd	r0, r1, [r4]
 8016ee4:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8016ee8:	60a3      	str	r3, [r4, #8]
 8016eea:	4620      	mov	r0, r4
 8016eec:	bd10      	pop	{r4, pc}
 8016eee:	bf00      	nop

08016ef0 <rmw_time_equal>:
 8016ef0:	b4f0      	push	{r4, r5, r6, r7}
 8016ef2:	b084      	sub	sp, #16
 8016ef4:	ac04      	add	r4, sp, #16
 8016ef6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8016efa:	4603      	mov	r3, r0
 8016efc:	4924      	ldr	r1, [pc, #144]	@ (8016f90 <rmw_time_equal+0xa0>)
 8016efe:	9e03      	ldr	r6, [sp, #12]
 8016f00:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8016f04:	2202      	movs	r2, #2
 8016f06:	4299      	cmp	r1, r3
 8016f08:	41aa      	sbcs	r2, r5
 8016f0a:	d330      	bcc.n	8016f6e <rmw_time_equal+0x7e>
 8016f0c:	4c21      	ldr	r4, [pc, #132]	@ (8016f94 <rmw_time_equal+0xa4>)
 8016f0e:	fba3 3204 	umull	r3, r2, r3, r4
 8016f12:	fb04 2205 	mla	r2, r4, r5, r2
 8016f16:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016f1a:	43dd      	mvns	r5, r3
 8016f1c:	1a8c      	subs	r4, r1, r2
 8016f1e:	4285      	cmp	r5, r0
 8016f20:	41b4      	sbcs	r4, r6
 8016f22:	d332      	bcc.n	8016f8a <rmw_time_equal+0x9a>
 8016f24:	eb10 0c03 	adds.w	ip, r0, r3
 8016f28:	eb42 0106 	adc.w	r1, r2, r6
 8016f2c:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8016f30:	4817      	ldr	r0, [pc, #92]	@ (8016f90 <rmw_time_equal+0xa0>)
 8016f32:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8016f34:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8016f36:	2202      	movs	r2, #2
 8016f38:	4298      	cmp	r0, r3
 8016f3a:	41b2      	sbcs	r2, r6
 8016f3c:	d31c      	bcc.n	8016f78 <rmw_time_equal+0x88>
 8016f3e:	4c15      	ldr	r4, [pc, #84]	@ (8016f94 <rmw_time_equal+0xa4>)
 8016f40:	fba3 3204 	umull	r3, r2, r3, r4
 8016f44:	fb04 2206 	mla	r2, r4, r6, r2
 8016f48:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8016f4c:	43de      	mvns	r6, r3
 8016f4e:	1a84      	subs	r4, r0, r2
 8016f50:	42ae      	cmp	r6, r5
 8016f52:	41bc      	sbcs	r4, r7
 8016f54:	d315      	bcc.n	8016f82 <rmw_time_equal+0x92>
 8016f56:	195b      	adds	r3, r3, r5
 8016f58:	eb42 0207 	adc.w	r2, r2, r7
 8016f5c:	428a      	cmp	r2, r1
 8016f5e:	bf08      	it	eq
 8016f60:	4563      	cmpeq	r3, ip
 8016f62:	bf0c      	ite	eq
 8016f64:	2001      	moveq	r0, #1
 8016f66:	2000      	movne	r0, #0
 8016f68:	b004      	add	sp, #16
 8016f6a:	bcf0      	pop	{r4, r5, r6, r7}
 8016f6c:	4770      	bx	lr
 8016f6e:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8016f72:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016f76:	e7d9      	b.n	8016f2c <rmw_time_equal+0x3c>
 8016f78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016f7c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8016f80:	e7ec      	b.n	8016f5c <rmw_time_equal+0x6c>
 8016f82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016f86:	4602      	mov	r2, r0
 8016f88:	e7e8      	b.n	8016f5c <rmw_time_equal+0x6c>
 8016f8a:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8016f8e:	e7cd      	b.n	8016f2c <rmw_time_equal+0x3c>
 8016f90:	25c17d04 	.word	0x25c17d04
 8016f94:	3b9aca00 	.word	0x3b9aca00

08016f98 <rmw_time_total_nsec>:
 8016f98:	b470      	push	{r4, r5, r6}
 8016f9a:	b085      	sub	sp, #20
 8016f9c:	ac04      	add	r4, sp, #16
 8016f9e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8016fa2:	4603      	mov	r3, r0
 8016fa4:	4912      	ldr	r1, [pc, #72]	@ (8016ff0 <rmw_time_total_nsec+0x58>)
 8016fa6:	9e03      	ldr	r6, [sp, #12]
 8016fa8:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8016fac:	2202      	movs	r2, #2
 8016fae:	4299      	cmp	r1, r3
 8016fb0:	41aa      	sbcs	r2, r5
 8016fb2:	d311      	bcc.n	8016fd8 <rmw_time_total_nsec+0x40>
 8016fb4:	4c0f      	ldr	r4, [pc, #60]	@ (8016ff4 <rmw_time_total_nsec+0x5c>)
 8016fb6:	fba3 3204 	umull	r3, r2, r3, r4
 8016fba:	fb04 2205 	mla	r2, r4, r5, r2
 8016fbe:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016fc2:	43dd      	mvns	r5, r3
 8016fc4:	1a8c      	subs	r4, r1, r2
 8016fc6:	4285      	cmp	r5, r0
 8016fc8:	41b4      	sbcs	r4, r6
 8016fca:	d30c      	bcc.n	8016fe6 <rmw_time_total_nsec+0x4e>
 8016fcc:	1818      	adds	r0, r3, r0
 8016fce:	eb42 0106 	adc.w	r1, r2, r6
 8016fd2:	b005      	add	sp, #20
 8016fd4:	bc70      	pop	{r4, r5, r6}
 8016fd6:	4770      	bx	lr
 8016fd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016fdc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016fe0:	b005      	add	sp, #20
 8016fe2:	bc70      	pop	{r4, r5, r6}
 8016fe4:	4770      	bx	lr
 8016fe6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016fea:	b005      	add	sp, #20
 8016fec:	bc70      	pop	{r4, r5, r6}
 8016fee:	4770      	bx	lr
 8016ff0:	25c17d04 	.word	0x25c17d04
 8016ff4:	3b9aca00 	.word	0x3b9aca00

08016ff8 <rmw_validate_full_topic_name>:
 8016ff8:	2800      	cmp	r0, #0
 8016ffa:	d057      	beq.n	80170ac <rmw_validate_full_topic_name+0xb4>
 8016ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017000:	460d      	mov	r5, r1
 8017002:	2900      	cmp	r1, #0
 8017004:	d054      	beq.n	80170b0 <rmw_validate_full_topic_name+0xb8>
 8017006:	4616      	mov	r6, r2
 8017008:	4604      	mov	r4, r0
 801700a:	f7e9 f90b 	bl	8000224 <strlen>
 801700e:	b148      	cbz	r0, 8017024 <rmw_validate_full_topic_name+0x2c>
 8017010:	7823      	ldrb	r3, [r4, #0]
 8017012:	2b2f      	cmp	r3, #47	@ 0x2f
 8017014:	d00d      	beq.n	8017032 <rmw_validate_full_topic_name+0x3a>
 8017016:	2302      	movs	r3, #2
 8017018:	602b      	str	r3, [r5, #0]
 801701a:	b13e      	cbz	r6, 801702c <rmw_validate_full_topic_name+0x34>
 801701c:	2000      	movs	r0, #0
 801701e:	6030      	str	r0, [r6, #0]
 8017020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017024:	2301      	movs	r3, #1
 8017026:	602b      	str	r3, [r5, #0]
 8017028:	2e00      	cmp	r6, #0
 801702a:	d1f7      	bne.n	801701c <rmw_validate_full_topic_name+0x24>
 801702c:	2000      	movs	r0, #0
 801702e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017032:	1e43      	subs	r3, r0, #1
 8017034:	5ce2      	ldrb	r2, [r4, r3]
 8017036:	2a2f      	cmp	r2, #47	@ 0x2f
 8017038:	d03c      	beq.n	80170b4 <rmw_validate_full_topic_name+0xbc>
 801703a:	1e63      	subs	r3, r4, #1
 801703c:	eb03 0800 	add.w	r8, r3, r0
 8017040:	f1c4 0e01 	rsb	lr, r4, #1
 8017044:	eb0e 0703 	add.w	r7, lr, r3
 8017048:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 801704c:	f021 0220 	bic.w	r2, r1, #32
 8017050:	3a41      	subs	r2, #65	@ 0x41
 8017052:	2a19      	cmp	r2, #25
 8017054:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8017058:	d90b      	bls.n	8017072 <rmw_validate_full_topic_name+0x7a>
 801705a:	295f      	cmp	r1, #95	@ 0x5f
 801705c:	d009      	beq.n	8017072 <rmw_validate_full_topic_name+0x7a>
 801705e:	f1bc 0f0a 	cmp.w	ip, #10
 8017062:	d906      	bls.n	8017072 <rmw_validate_full_topic_name+0x7a>
 8017064:	2304      	movs	r3, #4
 8017066:	602b      	str	r3, [r5, #0]
 8017068:	2e00      	cmp	r6, #0
 801706a:	d0df      	beq.n	801702c <rmw_validate_full_topic_name+0x34>
 801706c:	6037      	str	r7, [r6, #0]
 801706e:	2000      	movs	r0, #0
 8017070:	e7d6      	b.n	8017020 <rmw_validate_full_topic_name+0x28>
 8017072:	4543      	cmp	r3, r8
 8017074:	d1e6      	bne.n	8017044 <rmw_validate_full_topic_name+0x4c>
 8017076:	4f1a      	ldr	r7, [pc, #104]	@ (80170e0 <rmw_validate_full_topic_name+0xe8>)
 8017078:	2301      	movs	r3, #1
 801707a:	e004      	b.n	8017086 <rmw_validate_full_topic_name+0x8e>
 801707c:	4298      	cmp	r0, r3
 801707e:	f104 0401 	add.w	r4, r4, #1
 8017082:	d91c      	bls.n	80170be <rmw_validate_full_topic_name+0xc6>
 8017084:	4613      	mov	r3, r2
 8017086:	4298      	cmp	r0, r3
 8017088:	f103 0201 	add.w	r2, r3, #1
 801708c:	d0f6      	beq.n	801707c <rmw_validate_full_topic_name+0x84>
 801708e:	7821      	ldrb	r1, [r4, #0]
 8017090:	292f      	cmp	r1, #47	@ 0x2f
 8017092:	d1f3      	bne.n	801707c <rmw_validate_full_topic_name+0x84>
 8017094:	7861      	ldrb	r1, [r4, #1]
 8017096:	292f      	cmp	r1, #47	@ 0x2f
 8017098:	d01c      	beq.n	80170d4 <rmw_validate_full_topic_name+0xdc>
 801709a:	5dc9      	ldrb	r1, [r1, r7]
 801709c:	0749      	lsls	r1, r1, #29
 801709e:	d5ed      	bpl.n	801707c <rmw_validate_full_topic_name+0x84>
 80170a0:	2206      	movs	r2, #6
 80170a2:	602a      	str	r2, [r5, #0]
 80170a4:	2e00      	cmp	r6, #0
 80170a6:	d0c1      	beq.n	801702c <rmw_validate_full_topic_name+0x34>
 80170a8:	6033      	str	r3, [r6, #0]
 80170aa:	e7bf      	b.n	801702c <rmw_validate_full_topic_name+0x34>
 80170ac:	200b      	movs	r0, #11
 80170ae:	4770      	bx	lr
 80170b0:	200b      	movs	r0, #11
 80170b2:	e7b5      	b.n	8017020 <rmw_validate_full_topic_name+0x28>
 80170b4:	2203      	movs	r2, #3
 80170b6:	602a      	str	r2, [r5, #0]
 80170b8:	2e00      	cmp	r6, #0
 80170ba:	d1f5      	bne.n	80170a8 <rmw_validate_full_topic_name+0xb0>
 80170bc:	e7b6      	b.n	801702c <rmw_validate_full_topic_name+0x34>
 80170be:	28f7      	cmp	r0, #247	@ 0xf7
 80170c0:	d802      	bhi.n	80170c8 <rmw_validate_full_topic_name+0xd0>
 80170c2:	2000      	movs	r0, #0
 80170c4:	6028      	str	r0, [r5, #0]
 80170c6:	e7ab      	b.n	8017020 <rmw_validate_full_topic_name+0x28>
 80170c8:	2307      	movs	r3, #7
 80170ca:	602b      	str	r3, [r5, #0]
 80170cc:	2e00      	cmp	r6, #0
 80170ce:	d0ad      	beq.n	801702c <rmw_validate_full_topic_name+0x34>
 80170d0:	23f6      	movs	r3, #246	@ 0xf6
 80170d2:	e7e9      	b.n	80170a8 <rmw_validate_full_topic_name+0xb0>
 80170d4:	2205      	movs	r2, #5
 80170d6:	602a      	str	r2, [r5, #0]
 80170d8:	2e00      	cmp	r6, #0
 80170da:	d1e5      	bne.n	80170a8 <rmw_validate_full_topic_name+0xb0>
 80170dc:	e7a6      	b.n	801702c <rmw_validate_full_topic_name+0x34>
 80170de:	bf00      	nop
 80170e0:	0801bb1f 	.word	0x0801bb1f

080170e4 <on_status>:
 80170e4:	b082      	sub	sp, #8
 80170e6:	b002      	add	sp, #8
 80170e8:	4770      	bx	lr
 80170ea:	bf00      	nop

080170ec <on_topic>:
 80170ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170f0:	4a22      	ldr	r2, [pc, #136]	@ (801717c <on_topic+0x90>)
 80170f2:	b094      	sub	sp, #80	@ 0x50
 80170f4:	6812      	ldr	r2, [r2, #0]
 80170f6:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 80170f8:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80170fc:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8017100:	b3c2      	cbz	r2, 8017174 <on_topic+0x88>
 8017102:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8017106:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801710a:	e001      	b.n	8017110 <on_topic+0x24>
 801710c:	6852      	ldr	r2, [r2, #4]
 801710e:	b38a      	cbz	r2, 8017174 <on_topic+0x88>
 8017110:	6894      	ldr	r4, [r2, #8]
 8017112:	8aa3      	ldrh	r3, [r4, #20]
 8017114:	428b      	cmp	r3, r1
 8017116:	d1f9      	bne.n	801710c <on_topic+0x20>
 8017118:	7da3      	ldrb	r3, [r4, #22]
 801711a:	4283      	cmp	r3, r0
 801711c:	d1f6      	bne.n	801710c <on_topic+0x20>
 801711e:	2248      	movs	r2, #72	@ 0x48
 8017120:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8017124:	4668      	mov	r0, sp
 8017126:	f002 fde4 	bl	8019cf2 <memcpy>
 801712a:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801712e:	cb0c      	ldmia	r3, {r2, r3}
 8017130:	4620      	mov	r0, r4
 8017132:	f7f8 ff09 	bl	800ff48 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017136:	4607      	mov	r7, r0
 8017138:	b1e0      	cbz	r0, 8017174 <on_topic+0x88>
 801713a:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801713e:	4632      	mov	r2, r6
 8017140:	4628      	mov	r0, r5
 8017142:	f108 0110 	add.w	r1, r8, #16
 8017146:	f7f9 fc83 	bl	8010a50 <ucdr_deserialize_array_uint8_t>
 801714a:	b930      	cbnz	r0, 801715a <on_topic+0x6e>
 801714c:	480c      	ldr	r0, [pc, #48]	@ (8017180 <on_topic+0x94>)
 801714e:	4639      	mov	r1, r7
 8017150:	b014      	add	sp, #80	@ 0x50
 8017152:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017156:	f000 b8bd 	b.w	80172d4 <put_memory>
 801715a:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801715e:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8017162:	f000 fca7 	bl	8017ab4 <rmw_uros_epoch_nanos>
 8017166:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 801716a:	2305      	movs	r3, #5
 801716c:	e942 0102 	strd	r0, r1, [r2, #-8]
 8017170:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8017174:	b014      	add	sp, #80	@ 0x50
 8017176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801717a:	bf00      	nop
 801717c:	2001198c 	.word	0x2001198c
 8017180:	2001197c 	.word	0x2001197c

08017184 <on_request>:
 8017184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017188:	4823      	ldr	r0, [pc, #140]	@ (8017218 <on_request+0x94>)
 801718a:	b094      	sub	sp, #80	@ 0x50
 801718c:	6800      	ldr	r0, [r0, #0]
 801718e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8017190:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8017194:	9113      	str	r1, [sp, #76]	@ 0x4c
 8017196:	2800      	cmp	r0, #0
 8017198:	d03b      	beq.n	8017212 <on_request+0x8e>
 801719a:	461d      	mov	r5, r3
 801719c:	e001      	b.n	80171a2 <on_request+0x1e>
 801719e:	6840      	ldr	r0, [r0, #4]
 80171a0:	b3b8      	cbz	r0, 8017212 <on_request+0x8e>
 80171a2:	6884      	ldr	r4, [r0, #8]
 80171a4:	8b21      	ldrh	r1, [r4, #24]
 80171a6:	4291      	cmp	r1, r2
 80171a8:	d1f9      	bne.n	801719e <on_request+0x1a>
 80171aa:	2248      	movs	r2, #72	@ 0x48
 80171ac:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80171b0:	4668      	mov	r0, sp
 80171b2:	f002 fd9e 	bl	8019cf2 <memcpy>
 80171b6:	f104 0320 	add.w	r3, r4, #32
 80171ba:	cb0c      	ldmia	r3, {r2, r3}
 80171bc:	4620      	mov	r0, r4
 80171be:	f7f8 fec3 	bl	800ff48 <rmw_uxrce_get_static_input_buffer_for_entity>
 80171c2:	4680      	mov	r8, r0
 80171c4:	b328      	cbz	r0, 8017212 <on_request+0x8e>
 80171c6:	4638      	mov	r0, r7
 80171c8:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80171cc:	4632      	mov	r2, r6
 80171ce:	f107 0110 	add.w	r1, r7, #16
 80171d2:	f7f9 fc3d 	bl	8010a50 <ucdr_deserialize_array_uint8_t>
 80171d6:	b930      	cbnz	r0, 80171e6 <on_request+0x62>
 80171d8:	4810      	ldr	r0, [pc, #64]	@ (801721c <on_request+0x98>)
 80171da:	4641      	mov	r1, r8
 80171dc:	b014      	add	sp, #80	@ 0x50
 80171de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80171e2:	f000 b877 	b.w	80172d4 <put_memory>
 80171e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80171e8:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 80171ec:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80171f0:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 80171f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80171f8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80171fc:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017200:	f000 fc58 	bl	8017ab4 <rmw_uros_epoch_nanos>
 8017204:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8017208:	2303      	movs	r3, #3
 801720a:	e942 0102 	strd	r0, r1, [r2, #-8]
 801720e:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8017212:	b014      	add	sp, #80	@ 0x50
 8017214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017218:	2001195c 	.word	0x2001195c
 801721c:	2001197c 	.word	0x2001197c

08017220 <on_reply>:
 8017220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017224:	4821      	ldr	r0, [pc, #132]	@ (80172ac <on_reply+0x8c>)
 8017226:	b094      	sub	sp, #80	@ 0x50
 8017228:	6800      	ldr	r0, [r0, #0]
 801722a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801722c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8017230:	9113      	str	r1, [sp, #76]	@ 0x4c
 8017232:	b3b8      	cbz	r0, 80172a4 <on_reply+0x84>
 8017234:	461d      	mov	r5, r3
 8017236:	e001      	b.n	801723c <on_reply+0x1c>
 8017238:	6840      	ldr	r0, [r0, #4]
 801723a:	b398      	cbz	r0, 80172a4 <on_reply+0x84>
 801723c:	6884      	ldr	r4, [r0, #8]
 801723e:	8b21      	ldrh	r1, [r4, #24]
 8017240:	4291      	cmp	r1, r2
 8017242:	d1f9      	bne.n	8017238 <on_reply+0x18>
 8017244:	2248      	movs	r2, #72	@ 0x48
 8017246:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801724a:	4668      	mov	r0, sp
 801724c:	f002 fd51 	bl	8019cf2 <memcpy>
 8017250:	f104 0320 	add.w	r3, r4, #32
 8017254:	cb0c      	ldmia	r3, {r2, r3}
 8017256:	4620      	mov	r0, r4
 8017258:	f7f8 fe76 	bl	800ff48 <rmw_uxrce_get_static_input_buffer_for_entity>
 801725c:	4680      	mov	r8, r0
 801725e:	b308      	cbz	r0, 80172a4 <on_reply+0x84>
 8017260:	4638      	mov	r0, r7
 8017262:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8017266:	4632      	mov	r2, r6
 8017268:	f107 0110 	add.w	r1, r7, #16
 801726c:	f7f9 fbf0 	bl	8010a50 <ucdr_deserialize_array_uint8_t>
 8017270:	b930      	cbnz	r0, 8017280 <on_reply+0x60>
 8017272:	480f      	ldr	r0, [pc, #60]	@ (80172b0 <on_reply+0x90>)
 8017274:	4641      	mov	r1, r8
 8017276:	b014      	add	sp, #80	@ 0x50
 8017278:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801727c:	f000 b82a 	b.w	80172d4 <put_memory>
 8017280:	2200      	movs	r2, #0
 8017282:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8017286:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801728a:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801728e:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8017292:	f000 fc0f 	bl	8017ab4 <rmw_uros_epoch_nanos>
 8017296:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801729a:	2304      	movs	r3, #4
 801729c:	e942 0102 	strd	r0, r1, [r2, #-8]
 80172a0:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80172a4:	b014      	add	sp, #80	@ 0x50
 80172a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80172aa:	bf00      	nop
 80172ac:	2000d06c 	.word	0x2000d06c
 80172b0:	2001197c 	.word	0x2001197c

080172b4 <get_memory>:
 80172b4:	4603      	mov	r3, r0
 80172b6:	6840      	ldr	r0, [r0, #4]
 80172b8:	b158      	cbz	r0, 80172d2 <get_memory+0x1e>
 80172ba:	6842      	ldr	r2, [r0, #4]
 80172bc:	605a      	str	r2, [r3, #4]
 80172be:	b10a      	cbz	r2, 80172c4 <get_memory+0x10>
 80172c0:	2100      	movs	r1, #0
 80172c2:	6011      	str	r1, [r2, #0]
 80172c4:	681a      	ldr	r2, [r3, #0]
 80172c6:	6042      	str	r2, [r0, #4]
 80172c8:	b102      	cbz	r2, 80172cc <get_memory+0x18>
 80172ca:	6010      	str	r0, [r2, #0]
 80172cc:	2200      	movs	r2, #0
 80172ce:	6002      	str	r2, [r0, #0]
 80172d0:	6018      	str	r0, [r3, #0]
 80172d2:	4770      	bx	lr

080172d4 <put_memory>:
 80172d4:	680b      	ldr	r3, [r1, #0]
 80172d6:	b10b      	cbz	r3, 80172dc <put_memory+0x8>
 80172d8:	684a      	ldr	r2, [r1, #4]
 80172da:	605a      	str	r2, [r3, #4]
 80172dc:	684a      	ldr	r2, [r1, #4]
 80172de:	b102      	cbz	r2, 80172e2 <put_memory+0xe>
 80172e0:	6013      	str	r3, [r2, #0]
 80172e2:	6803      	ldr	r3, [r0, #0]
 80172e4:	428b      	cmp	r3, r1
 80172e6:	6843      	ldr	r3, [r0, #4]
 80172e8:	bf08      	it	eq
 80172ea:	6002      	streq	r2, [r0, #0]
 80172ec:	604b      	str	r3, [r1, #4]
 80172ee:	b103      	cbz	r3, 80172f2 <put_memory+0x1e>
 80172f0:	6019      	str	r1, [r3, #0]
 80172f2:	2300      	movs	r3, #0
 80172f4:	600b      	str	r3, [r1, #0]
 80172f6:	6041      	str	r1, [r0, #4]
 80172f8:	4770      	bx	lr
 80172fa:	bf00      	nop

080172fc <rmw_destroy_client>:
 80172fc:	b570      	push	{r4, r5, r6, lr}
 80172fe:	b128      	cbz	r0, 801730c <rmw_destroy_client+0x10>
 8017300:	4604      	mov	r4, r0
 8017302:	6800      	ldr	r0, [r0, #0]
 8017304:	460d      	mov	r5, r1
 8017306:	f7f8 ff95 	bl	8010234 <is_uxrce_rmw_identifier_valid>
 801730a:	b910      	cbnz	r0, 8017312 <rmw_destroy_client+0x16>
 801730c:	2401      	movs	r4, #1
 801730e:	4620      	mov	r0, r4
 8017310:	bd70      	pop	{r4, r5, r6, pc}
 8017312:	6863      	ldr	r3, [r4, #4]
 8017314:	2b00      	cmp	r3, #0
 8017316:	d0f9      	beq.n	801730c <rmw_destroy_client+0x10>
 8017318:	2d00      	cmp	r5, #0
 801731a:	d0f7      	beq.n	801730c <rmw_destroy_client+0x10>
 801731c:	6828      	ldr	r0, [r5, #0]
 801731e:	f7f8 ff89 	bl	8010234 <is_uxrce_rmw_identifier_valid>
 8017322:	2800      	cmp	r0, #0
 8017324:	d0f2      	beq.n	801730c <rmw_destroy_client+0x10>
 8017326:	686e      	ldr	r6, [r5, #4]
 8017328:	2e00      	cmp	r6, #0
 801732a:	d0ef      	beq.n	801730c <rmw_destroy_client+0x10>
 801732c:	6864      	ldr	r4, [r4, #4]
 801732e:	6932      	ldr	r2, [r6, #16]
 8017330:	6920      	ldr	r0, [r4, #16]
 8017332:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017336:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801733a:	6819      	ldr	r1, [r3, #0]
 801733c:	f7fa f920 	bl	8011580 <uxr_buffer_cancel_data>
 8017340:	4602      	mov	r2, r0
 8017342:	6920      	ldr	r0, [r4, #16]
 8017344:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017348:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801734c:	f7f8 fef2 	bl	8010134 <run_xrce_session>
 8017350:	6920      	ldr	r0, [r4, #16]
 8017352:	6932      	ldr	r2, [r6, #16]
 8017354:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017358:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801735c:	6819      	ldr	r1, [r3, #0]
 801735e:	f7f9 fcdd 	bl	8010d1c <uxr_buffer_delete_entity>
 8017362:	4602      	mov	r2, r0
 8017364:	6920      	ldr	r0, [r4, #16]
 8017366:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801736a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801736e:	f7f8 fee1 	bl	8010134 <run_xrce_session>
 8017372:	2800      	cmp	r0, #0
 8017374:	4628      	mov	r0, r5
 8017376:	bf14      	ite	ne
 8017378:	2400      	movne	r4, #0
 801737a:	2402      	moveq	r4, #2
 801737c:	f7f8 fdc2 	bl	800ff04 <rmw_uxrce_fini_client_memory>
 8017380:	e7c5      	b.n	801730e <rmw_destroy_client+0x12>
 8017382:	bf00      	nop

08017384 <rmw_get_implementation_identifier>:
 8017384:	4b01      	ldr	r3, [pc, #4]	@ (801738c <rmw_get_implementation_identifier+0x8>)
 8017386:	6818      	ldr	r0, [r3, #0]
 8017388:	4770      	bx	lr
 801738a:	bf00      	nop
 801738c:	0801b9e8 	.word	0x0801b9e8

08017390 <rmw_create_guard_condition>:
 8017390:	b538      	push	{r3, r4, r5, lr}
 8017392:	4605      	mov	r5, r0
 8017394:	4807      	ldr	r0, [pc, #28]	@ (80173b4 <rmw_create_guard_condition+0x24>)
 8017396:	f7ff ff8d 	bl	80172b4 <get_memory>
 801739a:	b148      	cbz	r0, 80173b0 <rmw_create_guard_condition+0x20>
 801739c:	6884      	ldr	r4, [r0, #8]
 801739e:	2300      	movs	r3, #0
 80173a0:	7423      	strb	r3, [r4, #16]
 80173a2:	61e5      	str	r5, [r4, #28]
 80173a4:	f7ff ffee 	bl	8017384 <rmw_get_implementation_identifier>
 80173a8:	e9c4 0405 	strd	r0, r4, [r4, #20]
 80173ac:	f104 0014 	add.w	r0, r4, #20
 80173b0:	bd38      	pop	{r3, r4, r5, pc}
 80173b2:	bf00      	nop
 80173b4:	2001191c 	.word	0x2001191c

080173b8 <rmw_destroy_guard_condition>:
 80173b8:	b508      	push	{r3, lr}
 80173ba:	4b08      	ldr	r3, [pc, #32]	@ (80173dc <rmw_destroy_guard_condition+0x24>)
 80173bc:	6819      	ldr	r1, [r3, #0]
 80173be:	b911      	cbnz	r1, 80173c6 <rmw_destroy_guard_condition+0xe>
 80173c0:	e00a      	b.n	80173d8 <rmw_destroy_guard_condition+0x20>
 80173c2:	6849      	ldr	r1, [r1, #4]
 80173c4:	b141      	cbz	r1, 80173d8 <rmw_destroy_guard_condition+0x20>
 80173c6:	688b      	ldr	r3, [r1, #8]
 80173c8:	3314      	adds	r3, #20
 80173ca:	4298      	cmp	r0, r3
 80173cc:	d1f9      	bne.n	80173c2 <rmw_destroy_guard_condition+0xa>
 80173ce:	4803      	ldr	r0, [pc, #12]	@ (80173dc <rmw_destroy_guard_condition+0x24>)
 80173d0:	f7ff ff80 	bl	80172d4 <put_memory>
 80173d4:	2000      	movs	r0, #0
 80173d6:	bd08      	pop	{r3, pc}
 80173d8:	2001      	movs	r0, #1
 80173da:	bd08      	pop	{r3, pc}
 80173dc:	2001191c 	.word	0x2001191c

080173e0 <create_topic>:
 80173e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173e4:	4605      	mov	r5, r0
 80173e6:	b084      	sub	sp, #16
 80173e8:	4822      	ldr	r0, [pc, #136]	@ (8017474 <create_topic+0x94>)
 80173ea:	460f      	mov	r7, r1
 80173ec:	4616      	mov	r6, r2
 80173ee:	f7ff ff61 	bl	80172b4 <get_memory>
 80173f2:	4604      	mov	r4, r0
 80173f4:	2800      	cmp	r0, #0
 80173f6:	d039      	beq.n	801746c <create_topic+0x8c>
 80173f8:	692b      	ldr	r3, [r5, #16]
 80173fa:	6884      	ldr	r4, [r0, #8]
 80173fc:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 801747c <create_topic+0x9c>
 8017400:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017404:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8017408:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 801740c:	1c42      	adds	r2, r0, #1
 801740e:	2102      	movs	r1, #2
 8017410:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8017414:	f7f9 ff46 	bl	80112a4 <uxr_object_id>
 8017418:	223c      	movs	r2, #60	@ 0x3c
 801741a:	6120      	str	r0, [r4, #16]
 801741c:	4641      	mov	r1, r8
 801741e:	4638      	mov	r0, r7
 8017420:	f7f8 feee 	bl	8010200 <generate_topic_name>
 8017424:	b1f0      	cbz	r0, 8017464 <create_topic+0x84>
 8017426:	4f14      	ldr	r7, [pc, #80]	@ (8017478 <create_topic+0x98>)
 8017428:	4630      	mov	r0, r6
 801742a:	2264      	movs	r2, #100	@ 0x64
 801742c:	4639      	mov	r1, r7
 801742e:	f7f8 feb7 	bl	80101a0 <generate_type_name>
 8017432:	b1b8      	cbz	r0, 8017464 <create_topic+0x84>
 8017434:	6928      	ldr	r0, [r5, #16]
 8017436:	2306      	movs	r3, #6
 8017438:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801743c:	f8cd 8000 	str.w	r8, [sp]
 8017440:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8017444:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017448:	6811      	ldr	r1, [r2, #0]
 801744a:	696b      	ldr	r3, [r5, #20]
 801744c:	6922      	ldr	r2, [r4, #16]
 801744e:	f7f9 fce3 	bl	8010e18 <uxr_buffer_create_topic_bin>
 8017452:	4602      	mov	r2, r0
 8017454:	6928      	ldr	r0, [r5, #16]
 8017456:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801745a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801745e:	f7f8 fe69 	bl	8010134 <run_xrce_session>
 8017462:	b918      	cbnz	r0, 801746c <create_topic+0x8c>
 8017464:	4620      	mov	r0, r4
 8017466:	f7f8 fd63 	bl	800ff30 <rmw_uxrce_fini_topic_memory>
 801746a:	2400      	movs	r4, #0
 801746c:	4620      	mov	r0, r4
 801746e:	b004      	add	sp, #16
 8017470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017474:	2001199c 	.word	0x2001199c
 8017478:	20011a18 	.word	0x20011a18
 801747c:	200119dc 	.word	0x200119dc

08017480 <destroy_topic>:
 8017480:	b538      	push	{r3, r4, r5, lr}
 8017482:	6985      	ldr	r5, [r0, #24]
 8017484:	b1d5      	cbz	r5, 80174bc <destroy_topic+0x3c>
 8017486:	4604      	mov	r4, r0
 8017488:	6928      	ldr	r0, [r5, #16]
 801748a:	6922      	ldr	r2, [r4, #16]
 801748c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017490:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017494:	6819      	ldr	r1, [r3, #0]
 8017496:	f7f9 fc41 	bl	8010d1c <uxr_buffer_delete_entity>
 801749a:	4602      	mov	r2, r0
 801749c:	6928      	ldr	r0, [r5, #16]
 801749e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80174a2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80174a6:	f7f8 fe45 	bl	8010134 <run_xrce_session>
 80174aa:	2800      	cmp	r0, #0
 80174ac:	4620      	mov	r0, r4
 80174ae:	bf14      	ite	ne
 80174b0:	2400      	movne	r4, #0
 80174b2:	2402      	moveq	r4, #2
 80174b4:	f7f8 fd3c 	bl	800ff30 <rmw_uxrce_fini_topic_memory>
 80174b8:	4620      	mov	r0, r4
 80174ba:	bd38      	pop	{r3, r4, r5, pc}
 80174bc:	2401      	movs	r4, #1
 80174be:	4620      	mov	r0, r4
 80174c0:	bd38      	pop	{r3, r4, r5, pc}
 80174c2:	bf00      	nop

080174c4 <rmw_send_request>:
 80174c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80174c8:	4604      	mov	r4, r0
 80174ca:	6800      	ldr	r0, [r0, #0]
 80174cc:	b08b      	sub	sp, #44	@ 0x2c
 80174ce:	460e      	mov	r6, r1
 80174d0:	4615      	mov	r5, r2
 80174d2:	b128      	cbz	r0, 80174e0 <rmw_send_request+0x1c>
 80174d4:	4b21      	ldr	r3, [pc, #132]	@ (801755c <rmw_send_request+0x98>)
 80174d6:	6819      	ldr	r1, [r3, #0]
 80174d8:	f7e8 fe9a 	bl	8000210 <strcmp>
 80174dc:	2800      	cmp	r0, #0
 80174de:	d139      	bne.n	8017554 <rmw_send_request+0x90>
 80174e0:	6864      	ldr	r4, [r4, #4]
 80174e2:	6963      	ldr	r3, [r4, #20]
 80174e4:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 80174e8:	689b      	ldr	r3, [r3, #8]
 80174ea:	4798      	blx	r3
 80174ec:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80174f0:	4630      	mov	r0, r6
 80174f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80174f6:	4798      	blx	r3
 80174f8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80174fc:	9000      	str	r0, [sp, #0]
 80174fe:	6922      	ldr	r2, [r4, #16]
 8017500:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8017502:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8017506:	ab02      	add	r3, sp, #8
 8017508:	f7fc f8b6 	bl	8013678 <uxr_prepare_output_stream>
 801750c:	2700      	movs	r7, #0
 801750e:	6028      	str	r0, [r5, #0]
 8017510:	606f      	str	r7, [r5, #4]
 8017512:	b198      	cbz	r0, 801753c <rmw_send_request+0x78>
 8017514:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8017518:	a902      	add	r1, sp, #8
 801751a:	4630      	mov	r0, r6
 801751c:	4798      	blx	r3
 801751e:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8017522:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8017526:	2b01      	cmp	r3, #1
 8017528:	d00c      	beq.n	8017544 <rmw_send_request+0x80>
 801752a:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801752c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017530:	f7fa fdfa 	bl	8012128 <uxr_run_session_until_confirm_delivery>
 8017534:	4638      	mov	r0, r7
 8017536:	b00b      	add	sp, #44	@ 0x2c
 8017538:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801753c:	2001      	movs	r0, #1
 801753e:	b00b      	add	sp, #44	@ 0x2c
 8017540:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017544:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017548:	f7fa fa2e 	bl	80119a8 <uxr_flash_output_streams>
 801754c:	4638      	mov	r0, r7
 801754e:	b00b      	add	sp, #44	@ 0x2c
 8017550:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017554:	200c      	movs	r0, #12
 8017556:	b00b      	add	sp, #44	@ 0x2c
 8017558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801755c:	0801b9e8 	.word	0x0801b9e8

08017560 <rmw_take_request>:
 8017560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017564:	4605      	mov	r5, r0
 8017566:	6800      	ldr	r0, [r0, #0]
 8017568:	b089      	sub	sp, #36	@ 0x24
 801756a:	460c      	mov	r4, r1
 801756c:	4690      	mov	r8, r2
 801756e:	461e      	mov	r6, r3
 8017570:	b128      	cbz	r0, 801757e <rmw_take_request+0x1e>
 8017572:	4b28      	ldr	r3, [pc, #160]	@ (8017614 <rmw_take_request+0xb4>)
 8017574:	6819      	ldr	r1, [r3, #0]
 8017576:	f7e8 fe4b 	bl	8000210 <strcmp>
 801757a:	2800      	cmp	r0, #0
 801757c:	d146      	bne.n	801760c <rmw_take_request+0xac>
 801757e:	b10e      	cbz	r6, 8017584 <rmw_take_request+0x24>
 8017580:	2300      	movs	r3, #0
 8017582:	7033      	strb	r3, [r6, #0]
 8017584:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8017588:	f7f8 fd56 	bl	8010038 <rmw_uxrce_clean_expired_static_input_buffer>
 801758c:	4648      	mov	r0, r9
 801758e:	f7f8 fd2b 	bl	800ffe8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017592:	4607      	mov	r7, r0
 8017594:	b3b0      	cbz	r0, 8017604 <rmw_take_request+0xa4>
 8017596:	6885      	ldr	r5, [r0, #8]
 8017598:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 801759c:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 80175a0:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80175a4:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 80175a8:	7423      	strb	r3, [r4, #16]
 80175aa:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 80175ae:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 80175b2:	74e2      	strb	r2, [r4, #19]
 80175b4:	f8a4 3011 	strh.w	r3, [r4, #17]
 80175b8:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 80175bc:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 80175c0:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 80175c4:	61e1      	str	r1, [r4, #28]
 80175c6:	6162      	str	r2, [r4, #20]
 80175c8:	61a3      	str	r3, [r4, #24]
 80175ca:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80175ce:	689b      	ldr	r3, [r3, #8]
 80175d0:	4798      	blx	r3
 80175d2:	6844      	ldr	r4, [r0, #4]
 80175d4:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 80175d8:	f105 0110 	add.w	r1, r5, #16
 80175dc:	4668      	mov	r0, sp
 80175de:	f7f4 fcf5 	bl	800bfcc <ucdr_init_buffer>
 80175e2:	68e3      	ldr	r3, [r4, #12]
 80175e4:	4641      	mov	r1, r8
 80175e6:	4668      	mov	r0, sp
 80175e8:	4798      	blx	r3
 80175ea:	4639      	mov	r1, r7
 80175ec:	4604      	mov	r4, r0
 80175ee:	480a      	ldr	r0, [pc, #40]	@ (8017618 <rmw_take_request+0xb8>)
 80175f0:	f7ff fe70 	bl	80172d4 <put_memory>
 80175f4:	b106      	cbz	r6, 80175f8 <rmw_take_request+0x98>
 80175f6:	7034      	strb	r4, [r6, #0]
 80175f8:	f084 0001 	eor.w	r0, r4, #1
 80175fc:	b2c0      	uxtb	r0, r0
 80175fe:	b009      	add	sp, #36	@ 0x24
 8017600:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017604:	2001      	movs	r0, #1
 8017606:	b009      	add	sp, #36	@ 0x24
 8017608:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801760c:	200c      	movs	r0, #12
 801760e:	b009      	add	sp, #36	@ 0x24
 8017610:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017614:	0801b9e8 	.word	0x0801b9e8
 8017618:	2001197c 	.word	0x2001197c

0801761c <rmw_send_response>:
 801761c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801761e:	4605      	mov	r5, r0
 8017620:	6800      	ldr	r0, [r0, #0]
 8017622:	b091      	sub	sp, #68	@ 0x44
 8017624:	460c      	mov	r4, r1
 8017626:	4616      	mov	r6, r2
 8017628:	b128      	cbz	r0, 8017636 <rmw_send_response+0x1a>
 801762a:	4b29      	ldr	r3, [pc, #164]	@ (80176d0 <rmw_send_response+0xb4>)
 801762c:	6819      	ldr	r1, [r3, #0]
 801762e:	f7e8 fdef 	bl	8000210 <strcmp>
 8017632:	2800      	cmp	r0, #0
 8017634:	d141      	bne.n	80176ba <rmw_send_response+0x9e>
 8017636:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801763a:	9306      	str	r3, [sp, #24]
 801763c:	4623      	mov	r3, r4
 801763e:	9207      	str	r2, [sp, #28]
 8017640:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017644:	686d      	ldr	r5, [r5, #4]
 8017646:	789b      	ldrb	r3, [r3, #2]
 8017648:	68a1      	ldr	r1, [r4, #8]
 801764a:	f88d 2017 	strb.w	r2, [sp, #23]
 801764e:	f88d 3016 	strb.w	r3, [sp, #22]
 8017652:	68e2      	ldr	r2, [r4, #12]
 8017654:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8017658:	6860      	ldr	r0, [r4, #4]
 801765a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801765e:	ab02      	add	r3, sp, #8
 8017660:	c307      	stmia	r3!, {r0, r1, r2}
 8017662:	696b      	ldr	r3, [r5, #20]
 8017664:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8017666:	68db      	ldr	r3, [r3, #12]
 8017668:	4798      	blx	r3
 801766a:	6844      	ldr	r4, [r0, #4]
 801766c:	4630      	mov	r0, r6
 801766e:	6923      	ldr	r3, [r4, #16]
 8017670:	4798      	blx	r3
 8017672:	f100 0318 	add.w	r3, r0, #24
 8017676:	6938      	ldr	r0, [r7, #16]
 8017678:	9300      	str	r3, [sp, #0]
 801767a:	692a      	ldr	r2, [r5, #16]
 801767c:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 801767e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017682:	ab08      	add	r3, sp, #32
 8017684:	f7fb fff8 	bl	8013678 <uxr_prepare_output_stream>
 8017688:	b910      	cbnz	r0, 8017690 <rmw_send_response+0x74>
 801768a:	2001      	movs	r0, #1
 801768c:	b011      	add	sp, #68	@ 0x44
 801768e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017690:	a902      	add	r1, sp, #8
 8017692:	a808      	add	r0, sp, #32
 8017694:	f7fd f93c 	bl	8014910 <uxr_serialize_SampleIdentity>
 8017698:	68a3      	ldr	r3, [r4, #8]
 801769a:	a908      	add	r1, sp, #32
 801769c:	4630      	mov	r0, r6
 801769e:	4798      	blx	r3
 80176a0:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 80176a4:	6938      	ldr	r0, [r7, #16]
 80176a6:	2b01      	cmp	r3, #1
 80176a8:	d00a      	beq.n	80176c0 <rmw_send_response+0xa4>
 80176aa:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 80176ac:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80176b0:	f7fa fd3a 	bl	8012128 <uxr_run_session_until_confirm_delivery>
 80176b4:	2000      	movs	r0, #0
 80176b6:	b011      	add	sp, #68	@ 0x44
 80176b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80176ba:	200c      	movs	r0, #12
 80176bc:	b011      	add	sp, #68	@ 0x44
 80176be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80176c0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80176c4:	f7fa f970 	bl	80119a8 <uxr_flash_output_streams>
 80176c8:	2000      	movs	r0, #0
 80176ca:	b011      	add	sp, #68	@ 0x44
 80176cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80176ce:	bf00      	nop
 80176d0:	0801b9e8 	.word	0x0801b9e8

080176d4 <rmw_take_response>:
 80176d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176d8:	4604      	mov	r4, r0
 80176da:	6800      	ldr	r0, [r0, #0]
 80176dc:	b088      	sub	sp, #32
 80176de:	4688      	mov	r8, r1
 80176e0:	4617      	mov	r7, r2
 80176e2:	461d      	mov	r5, r3
 80176e4:	b120      	cbz	r0, 80176f0 <rmw_take_response+0x1c>
 80176e6:	4b1e      	ldr	r3, [pc, #120]	@ (8017760 <rmw_take_response+0x8c>)
 80176e8:	6819      	ldr	r1, [r3, #0]
 80176ea:	f7e8 fd91 	bl	8000210 <strcmp>
 80176ee:	bb78      	cbnz	r0, 8017750 <rmw_take_response+0x7c>
 80176f0:	b10d      	cbz	r5, 80176f6 <rmw_take_response+0x22>
 80176f2:	2300      	movs	r3, #0
 80176f4:	702b      	strb	r3, [r5, #0]
 80176f6:	6864      	ldr	r4, [r4, #4]
 80176f8:	f7f8 fc9e 	bl	8010038 <rmw_uxrce_clean_expired_static_input_buffer>
 80176fc:	4620      	mov	r0, r4
 80176fe:	f7f8 fc73 	bl	800ffe8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017702:	4606      	mov	r6, r0
 8017704:	b340      	cbz	r0, 8017758 <rmw_take_response+0x84>
 8017706:	6963      	ldr	r3, [r4, #20]
 8017708:	6884      	ldr	r4, [r0, #8]
 801770a:	68db      	ldr	r3, [r3, #12]
 801770c:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8017710:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8017714:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8017718:	4798      	blx	r3
 801771a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801771e:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8017722:	f104 0110 	add.w	r1, r4, #16
 8017726:	4668      	mov	r0, sp
 8017728:	f7f4 fc50 	bl	800bfcc <ucdr_init_buffer>
 801772c:	4639      	mov	r1, r7
 801772e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017732:	4668      	mov	r0, sp
 8017734:	4798      	blx	r3
 8017736:	4631      	mov	r1, r6
 8017738:	4604      	mov	r4, r0
 801773a:	480a      	ldr	r0, [pc, #40]	@ (8017764 <rmw_take_response+0x90>)
 801773c:	f7ff fdca 	bl	80172d4 <put_memory>
 8017740:	b105      	cbz	r5, 8017744 <rmw_take_response+0x70>
 8017742:	702c      	strb	r4, [r5, #0]
 8017744:	f084 0001 	eor.w	r0, r4, #1
 8017748:	b2c0      	uxtb	r0, r0
 801774a:	b008      	add	sp, #32
 801774c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017750:	200c      	movs	r0, #12
 8017752:	b008      	add	sp, #32
 8017754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017758:	2001      	movs	r0, #1
 801775a:	b008      	add	sp, #32
 801775c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017760:	0801b9e8 	.word	0x0801b9e8
 8017764:	2001197c 	.word	0x2001197c

08017768 <rmw_trigger_guard_condition>:
 8017768:	b160      	cbz	r0, 8017784 <rmw_trigger_guard_condition+0x1c>
 801776a:	b510      	push	{r4, lr}
 801776c:	4604      	mov	r4, r0
 801776e:	6800      	ldr	r0, [r0, #0]
 8017770:	f7f8 fd60 	bl	8010234 <is_uxrce_rmw_identifier_valid>
 8017774:	b908      	cbnz	r0, 801777a <rmw_trigger_guard_condition+0x12>
 8017776:	2001      	movs	r0, #1
 8017778:	bd10      	pop	{r4, pc}
 801777a:	6863      	ldr	r3, [r4, #4]
 801777c:	2201      	movs	r2, #1
 801777e:	741a      	strb	r2, [r3, #16]
 8017780:	2000      	movs	r0, #0
 8017782:	bd10      	pop	{r4, pc}
 8017784:	2001      	movs	r0, #1
 8017786:	4770      	bx	lr

08017788 <rmw_wait>:
 8017788:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801778c:	b089      	sub	sp, #36	@ 0x24
 801778e:	4605      	mov	r5, r0
 8017790:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8017792:	460e      	mov	r6, r1
 8017794:	4698      	mov	r8, r3
 8017796:	4691      	mov	r9, r2
 8017798:	2a00      	cmp	r2, #0
 801779a:	f000 810a 	beq.w	80179b2 <rmw_wait+0x22a>
 801779e:	b16c      	cbz	r4, 80177bc <rmw_wait+0x34>
 80177a0:	4bae      	ldr	r3, [pc, #696]	@ (8017a5c <rmw_wait+0x2d4>)
 80177a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80177a4:	af04      	add	r7, sp, #16
 80177a6:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80177aa:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80177ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80177b2:	f7ff fb9d 	bl	8016ef0 <rmw_time_equal>
 80177b6:	2800      	cmp	r0, #0
 80177b8:	f000 8127 	beq.w	8017a0a <rmw_wait+0x282>
 80177bc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80177c0:	f7f8 fc3a 	bl	8010038 <rmw_uxrce_clean_expired_static_input_buffer>
 80177c4:	4ba6      	ldr	r3, [pc, #664]	@ (8017a60 <rmw_wait+0x2d8>)
 80177c6:	681c      	ldr	r4, [r3, #0]
 80177c8:	b14c      	cbz	r4, 80177de <rmw_wait+0x56>
 80177ca:	4623      	mov	r3, r4
 80177cc:	2100      	movs	r1, #0
 80177ce:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 80177d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80177d6:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d1f7      	bne.n	80177ce <rmw_wait+0x46>
 80177de:	f1b9 0f00 	cmp.w	r9, #0
 80177e2:	d011      	beq.n	8017808 <rmw_wait+0x80>
 80177e4:	f8d9 1000 	ldr.w	r1, [r9]
 80177e8:	b171      	cbz	r1, 8017808 <rmw_wait+0x80>
 80177ea:	f8d9 c004 	ldr.w	ip, [r9, #4]
 80177ee:	2300      	movs	r3, #0
 80177f0:	2001      	movs	r0, #1
 80177f2:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80177f6:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80177f8:	6912      	ldr	r2, [r2, #16]
 80177fa:	3301      	adds	r3, #1
 80177fc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017800:	4299      	cmp	r1, r3
 8017802:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8017806:	d1f4      	bne.n	80177f2 <rmw_wait+0x6a>
 8017808:	f1b8 0f00 	cmp.w	r8, #0
 801780c:	d011      	beq.n	8017832 <rmw_wait+0xaa>
 801780e:	f8d8 1000 	ldr.w	r1, [r8]
 8017812:	b171      	cbz	r1, 8017832 <rmw_wait+0xaa>
 8017814:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8017818:	2300      	movs	r3, #0
 801781a:	2001      	movs	r0, #1
 801781c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017820:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8017822:	6912      	ldr	r2, [r2, #16]
 8017824:	3301      	adds	r3, #1
 8017826:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801782a:	4299      	cmp	r1, r3
 801782c:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8017830:	d1f4      	bne.n	801781c <rmw_wait+0x94>
 8017832:	b185      	cbz	r5, 8017856 <rmw_wait+0xce>
 8017834:	6829      	ldr	r1, [r5, #0]
 8017836:	b171      	cbz	r1, 8017856 <rmw_wait+0xce>
 8017838:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801783c:	2300      	movs	r3, #0
 801783e:	2001      	movs	r0, #1
 8017840:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017844:	6a12      	ldr	r2, [r2, #32]
 8017846:	6912      	ldr	r2, [r2, #16]
 8017848:	3301      	adds	r3, #1
 801784a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801784e:	4299      	cmp	r1, r3
 8017850:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8017854:	d1f4      	bne.n	8017840 <rmw_wait+0xb8>
 8017856:	b34c      	cbz	r4, 80178ac <rmw_wait+0x124>
 8017858:	4622      	mov	r2, r4
 801785a:	2300      	movs	r3, #0
 801785c:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8017860:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8017864:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8017868:	440b      	add	r3, r1
 801786a:	b2db      	uxtb	r3, r3
 801786c:	2a00      	cmp	r2, #0
 801786e:	d1f5      	bne.n	801785c <rmw_wait+0xd4>
 8017870:	2b00      	cmp	r3, #0
 8017872:	f000 8084 	beq.w	801797e <rmw_wait+0x1f6>
 8017876:	1c7a      	adds	r2, r7, #1
 8017878:	d00d      	beq.n	8017896 <rmw_wait+0x10e>
 801787a:	ee07 7a90 	vmov	s15, r7
 801787e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8017882:	ee07 3a90 	vmov	s15, r3
 8017886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801788a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801788e:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8017892:	ee17 7a90 	vmov	r7, s15
 8017896:	68a0      	ldr	r0, [r4, #8]
 8017898:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 801789c:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 80178a0:	2b00      	cmp	r3, #0
 80178a2:	f040 8090 	bne.w	80179c6 <rmw_wait+0x23e>
 80178a6:	6864      	ldr	r4, [r4, #4]
 80178a8:	2c00      	cmp	r4, #0
 80178aa:	d1f4      	bne.n	8017896 <rmw_wait+0x10e>
 80178ac:	f1b9 0f00 	cmp.w	r9, #0
 80178b0:	f000 80bc 	beq.w	8017a2c <rmw_wait+0x2a4>
 80178b4:	f8d9 7000 	ldr.w	r7, [r9]
 80178b8:	2f00      	cmp	r7, #0
 80178ba:	f000 808e 	beq.w	80179da <rmw_wait+0x252>
 80178be:	2400      	movs	r4, #0
 80178c0:	4627      	mov	r7, r4
 80178c2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80178c6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80178ca:	f7f8 fb8d 	bl	800ffe8 <rmw_uxrce_find_static_input_buffer_by_owner>
 80178ce:	2800      	cmp	r0, #0
 80178d0:	d05f      	beq.n	8017992 <rmw_wait+0x20a>
 80178d2:	f8d9 3000 	ldr.w	r3, [r9]
 80178d6:	3401      	adds	r4, #1
 80178d8:	42a3      	cmp	r3, r4
 80178da:	f04f 0701 	mov.w	r7, #1
 80178de:	d8f0      	bhi.n	80178c2 <rmw_wait+0x13a>
 80178e0:	f1b8 0f00 	cmp.w	r8, #0
 80178e4:	d012      	beq.n	801790c <rmw_wait+0x184>
 80178e6:	f8d8 3000 	ldr.w	r3, [r8]
 80178ea:	b17b      	cbz	r3, 801790c <rmw_wait+0x184>
 80178ec:	2400      	movs	r4, #0
 80178ee:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80178f2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80178f6:	f7f8 fb77 	bl	800ffe8 <rmw_uxrce_find_static_input_buffer_by_owner>
 80178fa:	2800      	cmp	r0, #0
 80178fc:	d051      	beq.n	80179a2 <rmw_wait+0x21a>
 80178fe:	f8d8 3000 	ldr.w	r3, [r8]
 8017902:	3401      	adds	r4, #1
 8017904:	42a3      	cmp	r3, r4
 8017906:	f04f 0701 	mov.w	r7, #1
 801790a:	d8f0      	bhi.n	80178ee <rmw_wait+0x166>
 801790c:	b1dd      	cbz	r5, 8017946 <rmw_wait+0x1be>
 801790e:	682b      	ldr	r3, [r5, #0]
 8017910:	b1cb      	cbz	r3, 8017946 <rmw_wait+0x1be>
 8017912:	2400      	movs	r4, #0
 8017914:	686b      	ldr	r3, [r5, #4]
 8017916:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801791a:	f7f8 fb65 	bl	800ffe8 <rmw_uxrce_find_static_input_buffer_by_owner>
 801791e:	b158      	cbz	r0, 8017938 <rmw_wait+0x1b0>
 8017920:	682b      	ldr	r3, [r5, #0]
 8017922:	3401      	adds	r4, #1
 8017924:	42a3      	cmp	r3, r4
 8017926:	d969      	bls.n	80179fc <rmw_wait+0x274>
 8017928:	686b      	ldr	r3, [r5, #4]
 801792a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801792e:	2701      	movs	r7, #1
 8017930:	f7f8 fb5a 	bl	800ffe8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017934:	2800      	cmp	r0, #0
 8017936:	d1f3      	bne.n	8017920 <rmw_wait+0x198>
 8017938:	e9d5 3200 	ldrd	r3, r2, [r5]
 801793c:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017940:	3401      	adds	r4, #1
 8017942:	42a3      	cmp	r3, r4
 8017944:	d8e6      	bhi.n	8017914 <rmw_wait+0x18c>
 8017946:	b1a6      	cbz	r6, 8017972 <rmw_wait+0x1ea>
 8017948:	6834      	ldr	r4, [r6, #0]
 801794a:	b194      	cbz	r4, 8017972 <rmw_wait+0x1ea>
 801794c:	2300      	movs	r3, #0
 801794e:	461d      	mov	r5, r3
 8017950:	e004      	b.n	801795c <rmw_wait+0x1d4>
 8017952:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8017956:	3301      	adds	r3, #1
 8017958:	42a3      	cmp	r3, r4
 801795a:	d00a      	beq.n	8017972 <rmw_wait+0x1ea>
 801795c:	6870      	ldr	r0, [r6, #4]
 801795e:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8017962:	7c0a      	ldrb	r2, [r1, #16]
 8017964:	2a00      	cmp	r2, #0
 8017966:	d0f4      	beq.n	8017952 <rmw_wait+0x1ca>
 8017968:	3301      	adds	r3, #1
 801796a:	42a3      	cmp	r3, r4
 801796c:	740d      	strb	r5, [r1, #16]
 801796e:	4617      	mov	r7, r2
 8017970:	d1f4      	bne.n	801795c <rmw_wait+0x1d4>
 8017972:	2f00      	cmp	r7, #0
 8017974:	d03e      	beq.n	80179f4 <rmw_wait+0x26c>
 8017976:	2000      	movs	r0, #0
 8017978:	b009      	add	sp, #36	@ 0x24
 801797a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801797e:	68a0      	ldr	r0, [r4, #8]
 8017980:	2100      	movs	r1, #0
 8017982:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017986:	f7fa fb95 	bl	80120b4 <uxr_run_session_timeout>
 801798a:	6864      	ldr	r4, [r4, #4]
 801798c:	2c00      	cmp	r4, #0
 801798e:	d1f6      	bne.n	801797e <rmw_wait+0x1f6>
 8017990:	e78c      	b.n	80178ac <rmw_wait+0x124>
 8017992:	e9d9 3200 	ldrd	r3, r2, [r9]
 8017996:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801799a:	3401      	adds	r4, #1
 801799c:	42a3      	cmp	r3, r4
 801799e:	d890      	bhi.n	80178c2 <rmw_wait+0x13a>
 80179a0:	e79e      	b.n	80178e0 <rmw_wait+0x158>
 80179a2:	e9d8 3200 	ldrd	r3, r2, [r8]
 80179a6:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80179aa:	3401      	adds	r4, #1
 80179ac:	429c      	cmp	r4, r3
 80179ae:	d39e      	bcc.n	80178ee <rmw_wait+0x166>
 80179b0:	e7ac      	b.n	801790c <rmw_wait+0x184>
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	f47f aef3 	bne.w	801779e <rmw_wait+0x16>
 80179b8:	2800      	cmp	r0, #0
 80179ba:	f47f aef0 	bne.w	801779e <rmw_wait+0x16>
 80179be:	2900      	cmp	r1, #0
 80179c0:	f47f aeed 	bne.w	801779e <rmw_wait+0x16>
 80179c4:	e7d7      	b.n	8017976 <rmw_wait+0x1ee>
 80179c6:	4639      	mov	r1, r7
 80179c8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80179cc:	f7fa fb8c 	bl	80120e8 <uxr_run_session_until_data>
 80179d0:	6864      	ldr	r4, [r4, #4]
 80179d2:	2c00      	cmp	r4, #0
 80179d4:	f47f af5f 	bne.w	8017896 <rmw_wait+0x10e>
 80179d8:	e768      	b.n	80178ac <rmw_wait+0x124>
 80179da:	f1b8 0f00 	cmp.w	r8, #0
 80179de:	d032      	beq.n	8017a46 <rmw_wait+0x2be>
 80179e0:	f8d8 3000 	ldr.w	r3, [r8]
 80179e4:	2b00      	cmp	r3, #0
 80179e6:	d181      	bne.n	80178ec <rmw_wait+0x164>
 80179e8:	461f      	mov	r7, r3
 80179ea:	2d00      	cmp	r5, #0
 80179ec:	d18f      	bne.n	801790e <rmw_wait+0x186>
 80179ee:	462f      	mov	r7, r5
 80179f0:	2e00      	cmp	r6, #0
 80179f2:	d1a9      	bne.n	8017948 <rmw_wait+0x1c0>
 80179f4:	2002      	movs	r0, #2
 80179f6:	b009      	add	sp, #36	@ 0x24
 80179f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80179fc:	2e00      	cmp	r6, #0
 80179fe:	d0ba      	beq.n	8017976 <rmw_wait+0x1ee>
 8017a00:	6834      	ldr	r4, [r6, #0]
 8017a02:	2701      	movs	r7, #1
 8017a04:	2c00      	cmp	r4, #0
 8017a06:	d1a1      	bne.n	801794c <rmw_wait+0x1c4>
 8017a08:	e7b5      	b.n	8017976 <rmw_wait+0x1ee>
 8017a0a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8017a0e:	f7ff fac3 	bl	8016f98 <rmw_time_total_nsec>
 8017a12:	2300      	movs	r3, #0
 8017a14:	4a13      	ldr	r2, [pc, #76]	@ (8017a64 <rmw_wait+0x2dc>)
 8017a16:	f7e9 f8d1 	bl	8000bbc <__aeabi_uldivmod>
 8017a1a:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8017a1e:	f171 0300 	sbcs.w	r3, r1, #0
 8017a22:	4607      	mov	r7, r0
 8017a24:	bfa8      	it	ge
 8017a26:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8017a2a:	e6c9      	b.n	80177c0 <rmw_wait+0x38>
 8017a2c:	f1b8 0f00 	cmp.w	r8, #0
 8017a30:	d009      	beq.n	8017a46 <rmw_wait+0x2be>
 8017a32:	f8d8 3000 	ldr.w	r3, [r8]
 8017a36:	464f      	mov	r7, r9
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	f47f af57 	bne.w	80178ec <rmw_wait+0x164>
 8017a3e:	2d00      	cmp	r5, #0
 8017a40:	f47f af65 	bne.w	801790e <rmw_wait+0x186>
 8017a44:	e7d3      	b.n	80179ee <rmw_wait+0x266>
 8017a46:	b17d      	cbz	r5, 8017a68 <rmw_wait+0x2e0>
 8017a48:	682b      	ldr	r3, [r5, #0]
 8017a4a:	4647      	mov	r7, r8
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	f47f af60 	bne.w	8017912 <rmw_wait+0x18a>
 8017a52:	2e00      	cmp	r6, #0
 8017a54:	f47f af78 	bne.w	8017948 <rmw_wait+0x1c0>
 8017a58:	e7cc      	b.n	80179f4 <rmw_wait+0x26c>
 8017a5a:	bf00      	nop
 8017a5c:	0801aa38 	.word	0x0801aa38
 8017a60:	2001196c 	.word	0x2001196c
 8017a64:	000f4240 	.word	0x000f4240
 8017a68:	2e00      	cmp	r6, #0
 8017a6a:	d0c3      	beq.n	80179f4 <rmw_wait+0x26c>
 8017a6c:	6834      	ldr	r4, [r6, #0]
 8017a6e:	462f      	mov	r7, r5
 8017a70:	2c00      	cmp	r4, #0
 8017a72:	f47f af6b 	bne.w	801794c <rmw_wait+0x1c4>
 8017a76:	e7bd      	b.n	80179f4 <rmw_wait+0x26c>

08017a78 <rmw_create_wait_set>:
 8017a78:	b508      	push	{r3, lr}
 8017a7a:	4803      	ldr	r0, [pc, #12]	@ (8017a88 <rmw_create_wait_set+0x10>)
 8017a7c:	f7ff fc1a 	bl	80172b4 <get_memory>
 8017a80:	b108      	cbz	r0, 8017a86 <rmw_create_wait_set+0xe>
 8017a82:	6880      	ldr	r0, [r0, #8]
 8017a84:	3010      	adds	r0, #16
 8017a86:	bd08      	pop	{r3, pc}
 8017a88:	200119ac 	.word	0x200119ac

08017a8c <rmw_destroy_wait_set>:
 8017a8c:	b508      	push	{r3, lr}
 8017a8e:	4b08      	ldr	r3, [pc, #32]	@ (8017ab0 <rmw_destroy_wait_set+0x24>)
 8017a90:	6819      	ldr	r1, [r3, #0]
 8017a92:	b911      	cbnz	r1, 8017a9a <rmw_destroy_wait_set+0xe>
 8017a94:	e00a      	b.n	8017aac <rmw_destroy_wait_set+0x20>
 8017a96:	6849      	ldr	r1, [r1, #4]
 8017a98:	b141      	cbz	r1, 8017aac <rmw_destroy_wait_set+0x20>
 8017a9a:	688b      	ldr	r3, [r1, #8]
 8017a9c:	3310      	adds	r3, #16
 8017a9e:	4298      	cmp	r0, r3
 8017aa0:	d1f9      	bne.n	8017a96 <rmw_destroy_wait_set+0xa>
 8017aa2:	4803      	ldr	r0, [pc, #12]	@ (8017ab0 <rmw_destroy_wait_set+0x24>)
 8017aa4:	f7ff fc16 	bl	80172d4 <put_memory>
 8017aa8:	2000      	movs	r0, #0
 8017aaa:	bd08      	pop	{r3, pc}
 8017aac:	2001      	movs	r0, #1
 8017aae:	bd08      	pop	{r3, pc}
 8017ab0:	200119ac 	.word	0x200119ac

08017ab4 <rmw_uros_epoch_nanos>:
 8017ab4:	4b05      	ldr	r3, [pc, #20]	@ (8017acc <rmw_uros_epoch_nanos+0x18>)
 8017ab6:	681b      	ldr	r3, [r3, #0]
 8017ab8:	b123      	cbz	r3, 8017ac4 <rmw_uros_epoch_nanos+0x10>
 8017aba:	6898      	ldr	r0, [r3, #8]
 8017abc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017ac0:	f7f9 bf68 	b.w	8011994 <uxr_epoch_nanos>
 8017ac4:	2000      	movs	r0, #0
 8017ac6:	2100      	movs	r1, #0
 8017ac8:	4770      	bx	lr
 8017aca:	bf00      	nop
 8017acc:	2001196c 	.word	0x2001196c

08017ad0 <rosidl_runtime_c__String__init>:
 8017ad0:	b510      	push	{r4, lr}
 8017ad2:	4604      	mov	r4, r0
 8017ad4:	b086      	sub	sp, #24
 8017ad6:	b170      	cbz	r0, 8017af6 <rosidl_runtime_c__String__init+0x26>
 8017ad8:	a801      	add	r0, sp, #4
 8017ada:	f7f6 fc77 	bl	800e3cc <rcutils_get_default_allocator>
 8017ade:	9b01      	ldr	r3, [sp, #4]
 8017ae0:	9905      	ldr	r1, [sp, #20]
 8017ae2:	2001      	movs	r0, #1
 8017ae4:	4798      	blx	r3
 8017ae6:	6020      	str	r0, [r4, #0]
 8017ae8:	b128      	cbz	r0, 8017af6 <rosidl_runtime_c__String__init+0x26>
 8017aea:	2100      	movs	r1, #0
 8017aec:	2201      	movs	r2, #1
 8017aee:	7001      	strb	r1, [r0, #0]
 8017af0:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8017af4:	4610      	mov	r0, r2
 8017af6:	b006      	add	sp, #24
 8017af8:	bd10      	pop	{r4, pc}
 8017afa:	bf00      	nop

08017afc <rosidl_runtime_c__String__fini>:
 8017afc:	b320      	cbz	r0, 8017b48 <rosidl_runtime_c__String__fini+0x4c>
 8017afe:	b510      	push	{r4, lr}
 8017b00:	6803      	ldr	r3, [r0, #0]
 8017b02:	b086      	sub	sp, #24
 8017b04:	4604      	mov	r4, r0
 8017b06:	b173      	cbz	r3, 8017b26 <rosidl_runtime_c__String__fini+0x2a>
 8017b08:	6883      	ldr	r3, [r0, #8]
 8017b0a:	b1f3      	cbz	r3, 8017b4a <rosidl_runtime_c__String__fini+0x4e>
 8017b0c:	a801      	add	r0, sp, #4
 8017b0e:	f7f6 fc5d 	bl	800e3cc <rcutils_get_default_allocator>
 8017b12:	9b02      	ldr	r3, [sp, #8]
 8017b14:	9905      	ldr	r1, [sp, #20]
 8017b16:	6820      	ldr	r0, [r4, #0]
 8017b18:	4798      	blx	r3
 8017b1a:	2300      	movs	r3, #0
 8017b1c:	e9c4 3300 	strd	r3, r3, [r4]
 8017b20:	60a3      	str	r3, [r4, #8]
 8017b22:	b006      	add	sp, #24
 8017b24:	bd10      	pop	{r4, pc}
 8017b26:	6843      	ldr	r3, [r0, #4]
 8017b28:	b9db      	cbnz	r3, 8017b62 <rosidl_runtime_c__String__fini+0x66>
 8017b2a:	6883      	ldr	r3, [r0, #8]
 8017b2c:	2b00      	cmp	r3, #0
 8017b2e:	d0f8      	beq.n	8017b22 <rosidl_runtime_c__String__fini+0x26>
 8017b30:	4b12      	ldr	r3, [pc, #72]	@ (8017b7c <rosidl_runtime_c__String__fini+0x80>)
 8017b32:	4813      	ldr	r0, [pc, #76]	@ (8017b80 <rosidl_runtime_c__String__fini+0x84>)
 8017b34:	681b      	ldr	r3, [r3, #0]
 8017b36:	2251      	movs	r2, #81	@ 0x51
 8017b38:	68db      	ldr	r3, [r3, #12]
 8017b3a:	2101      	movs	r1, #1
 8017b3c:	f001 fe1e 	bl	801977c <fwrite>
 8017b40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017b44:	f001 fada 	bl	80190fc <exit>
 8017b48:	4770      	bx	lr
 8017b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8017b7c <rosidl_runtime_c__String__fini+0x80>)
 8017b4c:	480d      	ldr	r0, [pc, #52]	@ (8017b84 <rosidl_runtime_c__String__fini+0x88>)
 8017b4e:	681b      	ldr	r3, [r3, #0]
 8017b50:	224c      	movs	r2, #76	@ 0x4c
 8017b52:	68db      	ldr	r3, [r3, #12]
 8017b54:	2101      	movs	r1, #1
 8017b56:	f001 fe11 	bl	801977c <fwrite>
 8017b5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017b5e:	f001 facd 	bl	80190fc <exit>
 8017b62:	4b06      	ldr	r3, [pc, #24]	@ (8017b7c <rosidl_runtime_c__String__fini+0x80>)
 8017b64:	4808      	ldr	r0, [pc, #32]	@ (8017b88 <rosidl_runtime_c__String__fini+0x8c>)
 8017b66:	681b      	ldr	r3, [r3, #0]
 8017b68:	224e      	movs	r2, #78	@ 0x4e
 8017b6a:	68db      	ldr	r3, [r3, #12]
 8017b6c:	2101      	movs	r1, #1
 8017b6e:	f001 fe05 	bl	801977c <fwrite>
 8017b72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017b76:	f001 fac1 	bl	80190fc <exit>
 8017b7a:	bf00      	nop
 8017b7c:	20000920 	.word	0x20000920
 8017b80:	0801b2b8 	.word	0x0801b2b8
 8017b84:	0801b218 	.word	0x0801b218
 8017b88:	0801b268 	.word	0x0801b268

08017b8c <std_msgs__msg__Header__init>:
 8017b8c:	b570      	push	{r4, r5, r6, lr}
 8017b8e:	4605      	mov	r5, r0
 8017b90:	b1a8      	cbz	r0, 8017bbe <std_msgs__msg__Header__init+0x32>
 8017b92:	f000 f831 	bl	8017bf8 <builtin_interfaces__msg__Time__init>
 8017b96:	4604      	mov	r4, r0
 8017b98:	b140      	cbz	r0, 8017bac <std_msgs__msg__Header__init+0x20>
 8017b9a:	f105 0608 	add.w	r6, r5, #8
 8017b9e:	4630      	mov	r0, r6
 8017ba0:	f7ff ff96 	bl	8017ad0 <rosidl_runtime_c__String__init>
 8017ba4:	4604      	mov	r4, r0
 8017ba6:	b168      	cbz	r0, 8017bc4 <std_msgs__msg__Header__init+0x38>
 8017ba8:	4620      	mov	r0, r4
 8017baa:	bd70      	pop	{r4, r5, r6, pc}
 8017bac:	4628      	mov	r0, r5
 8017bae:	f000 f827 	bl	8017c00 <builtin_interfaces__msg__Time__fini>
 8017bb2:	f105 0008 	add.w	r0, r5, #8
 8017bb6:	f7ff ffa1 	bl	8017afc <rosidl_runtime_c__String__fini>
 8017bba:	4620      	mov	r0, r4
 8017bbc:	bd70      	pop	{r4, r5, r6, pc}
 8017bbe:	4604      	mov	r4, r0
 8017bc0:	4620      	mov	r0, r4
 8017bc2:	bd70      	pop	{r4, r5, r6, pc}
 8017bc4:	4628      	mov	r0, r5
 8017bc6:	f000 f81b 	bl	8017c00 <builtin_interfaces__msg__Time__fini>
 8017bca:	4630      	mov	r0, r6
 8017bcc:	f7ff ff96 	bl	8017afc <rosidl_runtime_c__String__fini>
 8017bd0:	e7ea      	b.n	8017ba8 <std_msgs__msg__Header__init+0x1c>
 8017bd2:	bf00      	nop

08017bd4 <std_msgs__msg__Header__fini>:
 8017bd4:	b148      	cbz	r0, 8017bea <std_msgs__msg__Header__fini+0x16>
 8017bd6:	b510      	push	{r4, lr}
 8017bd8:	4604      	mov	r4, r0
 8017bda:	f000 f811 	bl	8017c00 <builtin_interfaces__msg__Time__fini>
 8017bde:	f104 0008 	add.w	r0, r4, #8
 8017be2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017be6:	f7ff bf89 	b.w	8017afc <rosidl_runtime_c__String__fini>
 8017bea:	4770      	bx	lr

08017bec <std_msgs__msg__Int32__init>:
 8017bec:	3800      	subs	r0, #0
 8017bee:	bf18      	it	ne
 8017bf0:	2001      	movne	r0, #1
 8017bf2:	4770      	bx	lr

08017bf4 <std_msgs__msg__Int32__fini>:
 8017bf4:	4770      	bx	lr
 8017bf6:	bf00      	nop

08017bf8 <builtin_interfaces__msg__Time__init>:
 8017bf8:	3800      	subs	r0, #0
 8017bfa:	bf18      	it	ne
 8017bfc:	2001      	movne	r0, #1
 8017bfe:	4770      	bx	lr

08017c00 <builtin_interfaces__msg__Time__fini>:
 8017c00:	4770      	bx	lr
 8017c02:	bf00      	nop

08017c04 <geometry_msgs__msg__PoseWithCovariance__init>:
 8017c04:	b538      	push	{r3, r4, r5, lr}
 8017c06:	4604      	mov	r4, r0
 8017c08:	b128      	cbz	r0, 8017c16 <geometry_msgs__msg__PoseWithCovariance__init+0x12>
 8017c0a:	f001 f96b 	bl	8018ee4 <geometry_msgs__msg__Pose__init>
 8017c0e:	4605      	mov	r5, r0
 8017c10:	b120      	cbz	r0, 8017c1c <geometry_msgs__msg__PoseWithCovariance__init+0x18>
 8017c12:	4628      	mov	r0, r5
 8017c14:	bd38      	pop	{r3, r4, r5, pc}
 8017c16:	4605      	mov	r5, r0
 8017c18:	4628      	mov	r0, r5
 8017c1a:	bd38      	pop	{r3, r4, r5, pc}
 8017c1c:	4620      	mov	r0, r4
 8017c1e:	f001 f985 	bl	8018f2c <geometry_msgs__msg__Pose__fini>
 8017c22:	4628      	mov	r0, r5
 8017c24:	bd38      	pop	{r3, r4, r5, pc}
 8017c26:	bf00      	nop

08017c28 <geometry_msgs__msg__PoseWithCovariance__fini>:
 8017c28:	b108      	cbz	r0, 8017c2e <geometry_msgs__msg__PoseWithCovariance__fini+0x6>
 8017c2a:	f001 b97f 	b.w	8018f2c <geometry_msgs__msg__Pose__fini>
 8017c2e:	4770      	bx	lr

08017c30 <geometry_msgs__msg__TwistWithCovariance__init>:
 8017c30:	b538      	push	{r3, r4, r5, lr}
 8017c32:	4604      	mov	r4, r0
 8017c34:	b128      	cbz	r0, 8017c42 <geometry_msgs__msg__TwistWithCovariance__init+0x12>
 8017c36:	f7f8 fcc5 	bl	80105c4 <geometry_msgs__msg__Twist__init>
 8017c3a:	4605      	mov	r5, r0
 8017c3c:	b120      	cbz	r0, 8017c48 <geometry_msgs__msg__TwistWithCovariance__init+0x18>
 8017c3e:	4628      	mov	r0, r5
 8017c40:	bd38      	pop	{r3, r4, r5, pc}
 8017c42:	4605      	mov	r5, r0
 8017c44:	4628      	mov	r0, r5
 8017c46:	bd38      	pop	{r3, r4, r5, pc}
 8017c48:	4620      	mov	r0, r4
 8017c4a:	f7f8 fcdf 	bl	801060c <geometry_msgs__msg__Twist__fini>
 8017c4e:	4628      	mov	r0, r5
 8017c50:	bd38      	pop	{r3, r4, r5, pc}
 8017c52:	bf00      	nop

08017c54 <geometry_msgs__msg__TwistWithCovariance__fini>:
 8017c54:	b108      	cbz	r0, 8017c5a <geometry_msgs__msg__TwistWithCovariance__fini+0x6>
 8017c56:	f7f8 bcd9 	b.w	801060c <geometry_msgs__msg__Twist__fini>
 8017c5a:	4770      	bx	lr

08017c5c <geometry_msgs__msg__Pose__rosidl_typesupport_introspection_c__Pose_init_function>:
 8017c5c:	f001 b942 	b.w	8018ee4 <geometry_msgs__msg__Pose__init>

08017c60 <geometry_msgs__msg__Pose__rosidl_typesupport_introspection_c__Pose_fini_function>:
 8017c60:	f001 b964 	b.w	8018f2c <geometry_msgs__msg__Pose__fini>

08017c64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose>:
 8017c64:	b510      	push	{r4, lr}
 8017c66:	f001 f989 	bl	8018f7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 8017c6a:	4c07      	ldr	r4, [pc, #28]	@ (8017c88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x24>)
 8017c6c:	60e0      	str	r0, [r4, #12]
 8017c6e:	f000 f815 	bl	8017c9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8017c72:	4b06      	ldr	r3, [pc, #24]	@ (8017c8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x28>)
 8017c74:	64a0      	str	r0, [r4, #72]	@ 0x48
 8017c76:	681a      	ldr	r2, [r3, #0]
 8017c78:	b10a      	cbz	r2, 8017c7e <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x1a>
 8017c7a:	4804      	ldr	r0, [pc, #16]	@ (8017c8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x28>)
 8017c7c:	bd10      	pop	{r4, pc}
 8017c7e:	4a04      	ldr	r2, [pc, #16]	@ (8017c90 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x2c>)
 8017c80:	4802      	ldr	r0, [pc, #8]	@ (8017c8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x28>)
 8017c82:	6812      	ldr	r2, [r2, #0]
 8017c84:	601a      	str	r2, [r3, #0]
 8017c86:	bd10      	pop	{r4, pc}
 8017c88:	2000065c 	.word	0x2000065c
 8017c8c:	200006d4 	.word	0x200006d4
 8017c90:	20000324 	.word	0x20000324

08017c94 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 8017c94:	f001 b958 	b.w	8018f48 <geometry_msgs__msg__Quaternion__init>

08017c98 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 8017c98:	f001 b96a 	b.w	8018f70 <geometry_msgs__msg__Quaternion__fini>

08017c9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 8017c9c:	4b04      	ldr	r3, [pc, #16]	@ (8017cb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8017c9e:	681a      	ldr	r2, [r3, #0]
 8017ca0:	b10a      	cbz	r2, 8017ca6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 8017ca2:	4803      	ldr	r0, [pc, #12]	@ (8017cb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8017ca4:	4770      	bx	lr
 8017ca6:	4a03      	ldr	r2, [pc, #12]	@ (8017cb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 8017ca8:	4801      	ldr	r0, [pc, #4]	@ (8017cb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8017caa:	6812      	ldr	r2, [r2, #0]
 8017cac:	601a      	str	r2, [r3, #0]
 8017cae:	4770      	bx	lr
 8017cb0:	200007d0 	.word	0x200007d0
 8017cb4:	20000324 	.word	0x20000324

08017cb8 <get_serialized_size_geometry_msgs__msg__Pose>:
 8017cb8:	b570      	push	{r4, r5, r6, lr}
 8017cba:	4604      	mov	r4, r0
 8017cbc:	b148      	cbz	r0, 8017cd2 <get_serialized_size_geometry_msgs__msg__Pose+0x1a>
 8017cbe:	460d      	mov	r5, r1
 8017cc0:	f001 f96a 	bl	8018f98 <get_serialized_size_geometry_msgs__msg__Point>
 8017cc4:	4606      	mov	r6, r0
 8017cc6:	1829      	adds	r1, r5, r0
 8017cc8:	f104 0018 	add.w	r0, r4, #24
 8017ccc:	f000 f868 	bl	8017da0 <get_serialized_size_geometry_msgs__msg__Quaternion>
 8017cd0:	4430      	add	r0, r6
 8017cd2:	bd70      	pop	{r4, r5, r6, pc}

08017cd4 <_Pose__cdr_deserialize>:
 8017cd4:	b570      	push	{r4, r5, r6, lr}
 8017cd6:	460c      	mov	r4, r1
 8017cd8:	b189      	cbz	r1, 8017cfe <_Pose__cdr_deserialize+0x2a>
 8017cda:	4605      	mov	r5, r0
 8017cdc:	f001 f9e8 	bl	80190b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 8017ce0:	6843      	ldr	r3, [r0, #4]
 8017ce2:	4621      	mov	r1, r4
 8017ce4:	68db      	ldr	r3, [r3, #12]
 8017ce6:	4628      	mov	r0, r5
 8017ce8:	4798      	blx	r3
 8017cea:	f000 f90d 	bl	8017f08 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8017cee:	6843      	ldr	r3, [r0, #4]
 8017cf0:	f104 0118 	add.w	r1, r4, #24
 8017cf4:	4628      	mov	r0, r5
 8017cf6:	68db      	ldr	r3, [r3, #12]
 8017cf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017cfc:	4718      	bx	r3
 8017cfe:	4608      	mov	r0, r1
 8017d00:	bd70      	pop	{r4, r5, r6, pc}
 8017d02:	bf00      	nop

08017d04 <_Pose__cdr_serialize>:
 8017d04:	b510      	push	{r4, lr}
 8017d06:	b082      	sub	sp, #8
 8017d08:	9101      	str	r1, [sp, #4]
 8017d0a:	b190      	cbz	r0, 8017d32 <_Pose__cdr_serialize+0x2e>
 8017d0c:	4604      	mov	r4, r0
 8017d0e:	f001 f9cf 	bl	80190b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 8017d12:	6843      	ldr	r3, [r0, #4]
 8017d14:	9901      	ldr	r1, [sp, #4]
 8017d16:	689b      	ldr	r3, [r3, #8]
 8017d18:	4620      	mov	r0, r4
 8017d1a:	4798      	blx	r3
 8017d1c:	f000 f8f4 	bl	8017f08 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8017d20:	6843      	ldr	r3, [r0, #4]
 8017d22:	9901      	ldr	r1, [sp, #4]
 8017d24:	689b      	ldr	r3, [r3, #8]
 8017d26:	f104 0018 	add.w	r0, r4, #24
 8017d2a:	b002      	add	sp, #8
 8017d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017d30:	4718      	bx	r3
 8017d32:	b002      	add	sp, #8
 8017d34:	bd10      	pop	{r4, pc}
 8017d36:	bf00      	nop

08017d38 <_Pose__get_serialized_size>:
 8017d38:	b538      	push	{r3, r4, r5, lr}
 8017d3a:	4604      	mov	r4, r0
 8017d3c:	b148      	cbz	r0, 8017d52 <_Pose__get_serialized_size+0x1a>
 8017d3e:	2100      	movs	r1, #0
 8017d40:	f001 f92a 	bl	8018f98 <get_serialized_size_geometry_msgs__msg__Point>
 8017d44:	4605      	mov	r5, r0
 8017d46:	4601      	mov	r1, r0
 8017d48:	f104 0018 	add.w	r0, r4, #24
 8017d4c:	f000 f828 	bl	8017da0 <get_serialized_size_geometry_msgs__msg__Quaternion>
 8017d50:	4428      	add	r0, r5
 8017d52:	bd38      	pop	{r3, r4, r5, pc}

08017d54 <_Pose__max_serialized_size>:
 8017d54:	b510      	push	{r4, lr}
 8017d56:	b082      	sub	sp, #8
 8017d58:	2301      	movs	r3, #1
 8017d5a:	2100      	movs	r1, #0
 8017d5c:	f10d 0007 	add.w	r0, sp, #7
 8017d60:	f88d 3007 	strb.w	r3, [sp, #7]
 8017d64:	f001 f988 	bl	8019078 <max_serialized_size_geometry_msgs__msg__Point>
 8017d68:	4604      	mov	r4, r0
 8017d6a:	4601      	mov	r1, r0
 8017d6c:	f10d 0007 	add.w	r0, sp, #7
 8017d70:	f000 f8a8 	bl	8017ec4 <max_serialized_size_geometry_msgs__msg__Quaternion>
 8017d74:	4420      	add	r0, r4
 8017d76:	b002      	add	sp, #8
 8017d78:	bd10      	pop	{r4, pc}
 8017d7a:	bf00      	nop

08017d7c <max_serialized_size_geometry_msgs__msg__Pose>:
 8017d7c:	2301      	movs	r3, #1
 8017d7e:	b570      	push	{r4, r5, r6, lr}
 8017d80:	7003      	strb	r3, [r0, #0]
 8017d82:	4605      	mov	r5, r0
 8017d84:	460e      	mov	r6, r1
 8017d86:	f001 f977 	bl	8019078 <max_serialized_size_geometry_msgs__msg__Point>
 8017d8a:	4604      	mov	r4, r0
 8017d8c:	1831      	adds	r1, r6, r0
 8017d8e:	4628      	mov	r0, r5
 8017d90:	f000 f898 	bl	8017ec4 <max_serialized_size_geometry_msgs__msg__Quaternion>
 8017d94:	4420      	add	r0, r4
 8017d96:	bd70      	pop	{r4, r5, r6, pc}

08017d98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>:
 8017d98:	4800      	ldr	r0, [pc, #0]	@ (8017d9c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x4>)
 8017d9a:	4770      	bx	lr
 8017d9c:	200007dc 	.word	0x200007dc

08017da0 <get_serialized_size_geometry_msgs__msg__Quaternion>:
 8017da0:	b1f0      	cbz	r0, 8017de0 <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 8017da2:	b570      	push	{r4, r5, r6, lr}
 8017da4:	460d      	mov	r5, r1
 8017da6:	4628      	mov	r0, r5
 8017da8:	2108      	movs	r1, #8
 8017daa:	f7f4 f913 	bl	800bfd4 <ucdr_alignment>
 8017dae:	f105 0308 	add.w	r3, r5, #8
 8017db2:	181e      	adds	r6, r3, r0
 8017db4:	2108      	movs	r1, #8
 8017db6:	4630      	mov	r0, r6
 8017db8:	f7f4 f90c 	bl	800bfd4 <ucdr_alignment>
 8017dbc:	f100 0408 	add.w	r4, r0, #8
 8017dc0:	4434      	add	r4, r6
 8017dc2:	2108      	movs	r1, #8
 8017dc4:	4620      	mov	r0, r4
 8017dc6:	f7f4 f905 	bl	800bfd4 <ucdr_alignment>
 8017dca:	3008      	adds	r0, #8
 8017dcc:	4404      	add	r4, r0
 8017dce:	2108      	movs	r1, #8
 8017dd0:	4620      	mov	r0, r4
 8017dd2:	f7f4 f8ff 	bl	800bfd4 <ucdr_alignment>
 8017dd6:	f1c5 0508 	rsb	r5, r5, #8
 8017dda:	4428      	add	r0, r5
 8017ddc:	4420      	add	r0, r4
 8017dde:	bd70      	pop	{r4, r5, r6, pc}
 8017de0:	4770      	bx	lr
 8017de2:	bf00      	nop

08017de4 <_Quaternion__cdr_deserialize>:
 8017de4:	b538      	push	{r3, r4, r5, lr}
 8017de6:	460c      	mov	r4, r1
 8017de8:	b199      	cbz	r1, 8017e12 <_Quaternion__cdr_deserialize+0x2e>
 8017dea:	4605      	mov	r5, r0
 8017dec:	f7f3 ff06 	bl	800bbfc <ucdr_deserialize_double>
 8017df0:	f104 0108 	add.w	r1, r4, #8
 8017df4:	4628      	mov	r0, r5
 8017df6:	f7f3 ff01 	bl	800bbfc <ucdr_deserialize_double>
 8017dfa:	f104 0110 	add.w	r1, r4, #16
 8017dfe:	4628      	mov	r0, r5
 8017e00:	f7f3 fefc 	bl	800bbfc <ucdr_deserialize_double>
 8017e04:	f104 0118 	add.w	r1, r4, #24
 8017e08:	4628      	mov	r0, r5
 8017e0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017e0e:	f7f3 bef5 	b.w	800bbfc <ucdr_deserialize_double>
 8017e12:	4608      	mov	r0, r1
 8017e14:	bd38      	pop	{r3, r4, r5, pc}
 8017e16:	bf00      	nop

08017e18 <_Quaternion__cdr_serialize>:
 8017e18:	b1c0      	cbz	r0, 8017e4c <_Quaternion__cdr_serialize+0x34>
 8017e1a:	b538      	push	{r3, r4, r5, lr}
 8017e1c:	ed90 0b00 	vldr	d0, [r0]
 8017e20:	460d      	mov	r5, r1
 8017e22:	4604      	mov	r4, r0
 8017e24:	4608      	mov	r0, r1
 8017e26:	f7f3 fd47 	bl	800b8b8 <ucdr_serialize_double>
 8017e2a:	ed94 0b02 	vldr	d0, [r4, #8]
 8017e2e:	4628      	mov	r0, r5
 8017e30:	f7f3 fd42 	bl	800b8b8 <ucdr_serialize_double>
 8017e34:	ed94 0b04 	vldr	d0, [r4, #16]
 8017e38:	4628      	mov	r0, r5
 8017e3a:	f7f3 fd3d 	bl	800b8b8 <ucdr_serialize_double>
 8017e3e:	ed94 0b06 	vldr	d0, [r4, #24]
 8017e42:	4628      	mov	r0, r5
 8017e44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017e48:	f7f3 bd36 	b.w	800b8b8 <ucdr_serialize_double>
 8017e4c:	4770      	bx	lr
 8017e4e:	bf00      	nop

08017e50 <_Quaternion__get_serialized_size>:
 8017e50:	b1d0      	cbz	r0, 8017e88 <_Quaternion__get_serialized_size+0x38>
 8017e52:	b538      	push	{r3, r4, r5, lr}
 8017e54:	2108      	movs	r1, #8
 8017e56:	2000      	movs	r0, #0
 8017e58:	f7f4 f8bc 	bl	800bfd4 <ucdr_alignment>
 8017e5c:	f100 0508 	add.w	r5, r0, #8
 8017e60:	2108      	movs	r1, #8
 8017e62:	4628      	mov	r0, r5
 8017e64:	f7f4 f8b6 	bl	800bfd4 <ucdr_alignment>
 8017e68:	f100 0408 	add.w	r4, r0, #8
 8017e6c:	442c      	add	r4, r5
 8017e6e:	2108      	movs	r1, #8
 8017e70:	4620      	mov	r0, r4
 8017e72:	f7f4 f8af 	bl	800bfd4 <ucdr_alignment>
 8017e76:	3008      	adds	r0, #8
 8017e78:	4404      	add	r4, r0
 8017e7a:	2108      	movs	r1, #8
 8017e7c:	4620      	mov	r0, r4
 8017e7e:	f7f4 f8a9 	bl	800bfd4 <ucdr_alignment>
 8017e82:	3008      	adds	r0, #8
 8017e84:	4420      	add	r0, r4
 8017e86:	bd38      	pop	{r3, r4, r5, pc}
 8017e88:	4770      	bx	lr
 8017e8a:	bf00      	nop

08017e8c <_Quaternion__max_serialized_size>:
 8017e8c:	b538      	push	{r3, r4, r5, lr}
 8017e8e:	2108      	movs	r1, #8
 8017e90:	2000      	movs	r0, #0
 8017e92:	f7f4 f89f 	bl	800bfd4 <ucdr_alignment>
 8017e96:	f100 0508 	add.w	r5, r0, #8
 8017e9a:	2108      	movs	r1, #8
 8017e9c:	4628      	mov	r0, r5
 8017e9e:	f7f4 f899 	bl	800bfd4 <ucdr_alignment>
 8017ea2:	f100 0408 	add.w	r4, r0, #8
 8017ea6:	442c      	add	r4, r5
 8017ea8:	2108      	movs	r1, #8
 8017eaa:	4620      	mov	r0, r4
 8017eac:	f7f4 f892 	bl	800bfd4 <ucdr_alignment>
 8017eb0:	3008      	adds	r0, #8
 8017eb2:	4404      	add	r4, r0
 8017eb4:	2108      	movs	r1, #8
 8017eb6:	4620      	mov	r0, r4
 8017eb8:	f7f4 f88c 	bl	800bfd4 <ucdr_alignment>
 8017ebc:	3008      	adds	r0, #8
 8017ebe:	4420      	add	r0, r4
 8017ec0:	bd38      	pop	{r3, r4, r5, pc}
 8017ec2:	bf00      	nop

08017ec4 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 8017ec4:	b570      	push	{r4, r5, r6, lr}
 8017ec6:	2301      	movs	r3, #1
 8017ec8:	460c      	mov	r4, r1
 8017eca:	7003      	strb	r3, [r0, #0]
 8017ecc:	2108      	movs	r1, #8
 8017ece:	4620      	mov	r0, r4
 8017ed0:	f7f4 f880 	bl	800bfd4 <ucdr_alignment>
 8017ed4:	f104 0508 	add.w	r5, r4, #8
 8017ed8:	1946      	adds	r6, r0, r5
 8017eda:	2108      	movs	r1, #8
 8017edc:	4630      	mov	r0, r6
 8017ede:	f7f4 f879 	bl	800bfd4 <ucdr_alignment>
 8017ee2:	f100 0508 	add.w	r5, r0, #8
 8017ee6:	4435      	add	r5, r6
 8017ee8:	2108      	movs	r1, #8
 8017eea:	4628      	mov	r0, r5
 8017eec:	f7f4 f872 	bl	800bfd4 <ucdr_alignment>
 8017ef0:	3008      	adds	r0, #8
 8017ef2:	4405      	add	r5, r0
 8017ef4:	2108      	movs	r1, #8
 8017ef6:	4628      	mov	r0, r5
 8017ef8:	f7f4 f86c 	bl	800bfd4 <ucdr_alignment>
 8017efc:	f1c4 0408 	rsb	r4, r4, #8
 8017f00:	4420      	add	r0, r4
 8017f02:	4428      	add	r0, r5
 8017f04:	bd70      	pop	{r4, r5, r6, pc}
 8017f06:	bf00      	nop

08017f08 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 8017f08:	4800      	ldr	r0, [pc, #0]	@ (8017f0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 8017f0a:	4770      	bx	lr
 8017f0c:	20000804 	.word	0x20000804

08017f10 <ucdr_serialize_string>:
 8017f10:	b510      	push	{r4, lr}
 8017f12:	b082      	sub	sp, #8
 8017f14:	4604      	mov	r4, r0
 8017f16:	4608      	mov	r0, r1
 8017f18:	9101      	str	r1, [sp, #4]
 8017f1a:	f7e8 f983 	bl	8000224 <strlen>
 8017f1e:	9901      	ldr	r1, [sp, #4]
 8017f20:	1c42      	adds	r2, r0, #1
 8017f22:	4620      	mov	r0, r4
 8017f24:	b002      	add	sp, #8
 8017f26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f2a:	f7f8 be9f 	b.w	8010c6c <ucdr_serialize_sequence_char>
 8017f2e:	bf00      	nop

08017f30 <ucdr_deserialize_string>:
 8017f30:	b500      	push	{lr}
 8017f32:	b083      	sub	sp, #12
 8017f34:	ab01      	add	r3, sp, #4
 8017f36:	f7f8 feab 	bl	8010c90 <ucdr_deserialize_sequence_char>
 8017f3a:	b003      	add	sp, #12
 8017f3c:	f85d fb04 	ldr.w	pc, [sp], #4

08017f40 <uxr_init_input_best_effort_stream>:
 8017f40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017f44:	8003      	strh	r3, [r0, #0]
 8017f46:	4770      	bx	lr

08017f48 <uxr_reset_input_best_effort_stream>:
 8017f48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017f4c:	8003      	strh	r3, [r0, #0]
 8017f4e:	4770      	bx	lr

08017f50 <uxr_receive_best_effort_message>:
 8017f50:	b538      	push	{r3, r4, r5, lr}
 8017f52:	4604      	mov	r4, r0
 8017f54:	8800      	ldrh	r0, [r0, #0]
 8017f56:	460d      	mov	r5, r1
 8017f58:	f000 fd42 	bl	80189e0 <uxr_seq_num_cmp>
 8017f5c:	4603      	mov	r3, r0
 8017f5e:	2b00      	cmp	r3, #0
 8017f60:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8017f64:	bfb8      	it	lt
 8017f66:	8025      	strhlt	r5, [r4, #0]
 8017f68:	bd38      	pop	{r3, r4, r5, pc}
 8017f6a:	bf00      	nop

08017f6c <on_full_input_buffer>:
 8017f6c:	b570      	push	{r4, r5, r6, lr}
 8017f6e:	4605      	mov	r5, r0
 8017f70:	460c      	mov	r4, r1
 8017f72:	682b      	ldr	r3, [r5, #0]
 8017f74:	6809      	ldr	r1, [r1, #0]
 8017f76:	8920      	ldrh	r0, [r4, #8]
 8017f78:	6862      	ldr	r2, [r4, #4]
 8017f7a:	fbb2 f2f0 	udiv	r2, r2, r0
 8017f7e:	eba3 0c01 	sub.w	ip, r3, r1
 8017f82:	fbbc fcf2 	udiv	ip, ip, r2
 8017f86:	f10c 0c01 	add.w	ip, ip, #1
 8017f8a:	fa1f f38c 	uxth.w	r3, ip
 8017f8e:	fbb3 f6f0 	udiv	r6, r3, r0
 8017f92:	fb00 3316 	mls	r3, r0, r6, r3
 8017f96:	b29b      	uxth	r3, r3
 8017f98:	fb02 f303 	mul.w	r3, r2, r3
 8017f9c:	1d18      	adds	r0, r3, #4
 8017f9e:	4408      	add	r0, r1
 8017fa0:	7d26      	ldrb	r6, [r4, #20]
 8017fa2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8017fa6:	b116      	cbz	r6, 8017fae <on_full_input_buffer+0x42>
 8017fa8:	2600      	movs	r6, #0
 8017faa:	f840 6c04 	str.w	r6, [r0, #-4]
 8017fae:	2a03      	cmp	r2, #3
 8017fb0:	d801      	bhi.n	8017fb6 <on_full_input_buffer+0x4a>
 8017fb2:	2001      	movs	r0, #1
 8017fb4:	bd70      	pop	{r4, r5, r6, pc}
 8017fb6:	3308      	adds	r3, #8
 8017fb8:	4419      	add	r1, r3
 8017fba:	4628      	mov	r0, r5
 8017fbc:	692b      	ldr	r3, [r5, #16]
 8017fbe:	3a04      	subs	r2, #4
 8017fc0:	f7f3 fffc 	bl	800bfbc <ucdr_init_buffer_origin>
 8017fc4:	4628      	mov	r0, r5
 8017fc6:	4903      	ldr	r1, [pc, #12]	@ (8017fd4 <on_full_input_buffer+0x68>)
 8017fc8:	4622      	mov	r2, r4
 8017fca:	f7f3 ffd3 	bl	800bf74 <ucdr_set_on_full_buffer_callback>
 8017fce:	2000      	movs	r0, #0
 8017fd0:	bd70      	pop	{r4, r5, r6, pc}
 8017fd2:	bf00      	nop
 8017fd4:	08017f6d 	.word	0x08017f6d

08017fd8 <uxr_init_input_reliable_stream>:
 8017fd8:	b500      	push	{lr}
 8017fda:	e9c0 1200 	strd	r1, r2, [r0]
 8017fde:	f04f 0e00 	mov.w	lr, #0
 8017fe2:	9a01      	ldr	r2, [sp, #4]
 8017fe4:	8103      	strh	r3, [r0, #8]
 8017fe6:	6102      	str	r2, [r0, #16]
 8017fe8:	f880 e014 	strb.w	lr, [r0, #20]
 8017fec:	b1d3      	cbz	r3, 8018024 <uxr_init_input_reliable_stream+0x4c>
 8017fee:	f8c1 e000 	str.w	lr, [r1]
 8017ff2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8017ff6:	f1bc 0f01 	cmp.w	ip, #1
 8017ffa:	d913      	bls.n	8018024 <uxr_init_input_reliable_stream+0x4c>
 8017ffc:	2301      	movs	r3, #1
 8017ffe:	fbb3 f1fc 	udiv	r1, r3, ip
 8018002:	fb0c 3111 	mls	r1, ip, r1, r3
 8018006:	b289      	uxth	r1, r1
 8018008:	6842      	ldr	r2, [r0, #4]
 801800a:	fbb2 f2fc 	udiv	r2, r2, ip
 801800e:	fb01 f202 	mul.w	r2, r1, r2
 8018012:	6801      	ldr	r1, [r0, #0]
 8018014:	f841 e002 	str.w	lr, [r1, r2]
 8018018:	3301      	adds	r3, #1
 801801a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801801e:	b29b      	uxth	r3, r3
 8018020:	459c      	cmp	ip, r3
 8018022:	d8ec      	bhi.n	8017ffe <uxr_init_input_reliable_stream+0x26>
 8018024:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018028:	60c3      	str	r3, [r0, #12]
 801802a:	f85d fb04 	ldr.w	pc, [sp], #4
 801802e:	bf00      	nop

08018030 <uxr_reset_input_reliable_stream>:
 8018030:	8901      	ldrh	r1, [r0, #8]
 8018032:	b1e9      	cbz	r1, 8018070 <uxr_reset_input_reliable_stream+0x40>
 8018034:	f04f 0c00 	mov.w	ip, #0
 8018038:	b500      	push	{lr}
 801803a:	4663      	mov	r3, ip
 801803c:	46e6      	mov	lr, ip
 801803e:	fbb3 f2f1 	udiv	r2, r3, r1
 8018042:	fb01 3312 	mls	r3, r1, r2, r3
 8018046:	b29b      	uxth	r3, r3
 8018048:	6842      	ldr	r2, [r0, #4]
 801804a:	fbb2 f2f1 	udiv	r2, r2, r1
 801804e:	fb02 f303 	mul.w	r3, r2, r3
 8018052:	6802      	ldr	r2, [r0, #0]
 8018054:	f842 e003 	str.w	lr, [r2, r3]
 8018058:	f10c 0c01 	add.w	ip, ip, #1
 801805c:	8901      	ldrh	r1, [r0, #8]
 801805e:	fa1f f38c 	uxth.w	r3, ip
 8018062:	4299      	cmp	r1, r3
 8018064:	d8eb      	bhi.n	801803e <uxr_reset_input_reliable_stream+0xe>
 8018066:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801806a:	60c3      	str	r3, [r0, #12]
 801806c:	f85d fb04 	ldr.w	pc, [sp], #4
 8018070:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018074:	60c3      	str	r3, [r0, #12]
 8018076:	4770      	bx	lr

08018078 <uxr_receive_reliable_message>:
 8018078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801807c:	4604      	mov	r4, r0
 801807e:	460d      	mov	r5, r1
 8018080:	8901      	ldrh	r1, [r0, #8]
 8018082:	8980      	ldrh	r0, [r0, #12]
 8018084:	4690      	mov	r8, r2
 8018086:	461f      	mov	r7, r3
 8018088:	f000 fca2 	bl	80189d0 <uxr_seq_num_add>
 801808c:	4629      	mov	r1, r5
 801808e:	4606      	mov	r6, r0
 8018090:	89a0      	ldrh	r0, [r4, #12]
 8018092:	f000 fca5 	bl	80189e0 <uxr_seq_num_cmp>
 8018096:	2800      	cmp	r0, #0
 8018098:	db0a      	blt.n	80180b0 <uxr_receive_reliable_message+0x38>
 801809a:	2600      	movs	r6, #0
 801809c:	89e0      	ldrh	r0, [r4, #14]
 801809e:	4629      	mov	r1, r5
 80180a0:	f000 fc9e 	bl	80189e0 <uxr_seq_num_cmp>
 80180a4:	2800      	cmp	r0, #0
 80180a6:	da00      	bge.n	80180aa <uxr_receive_reliable_message+0x32>
 80180a8:	81e5      	strh	r5, [r4, #14]
 80180aa:	4630      	mov	r0, r6
 80180ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80180b0:	4630      	mov	r0, r6
 80180b2:	4629      	mov	r1, r5
 80180b4:	f000 fc94 	bl	80189e0 <uxr_seq_num_cmp>
 80180b8:	2800      	cmp	r0, #0
 80180ba:	dbee      	blt.n	801809a <uxr_receive_reliable_message+0x22>
 80180bc:	6923      	ldr	r3, [r4, #16]
 80180be:	4640      	mov	r0, r8
 80180c0:	4798      	blx	r3
 80180c2:	2101      	movs	r1, #1
 80180c4:	4681      	mov	r9, r0
 80180c6:	89a0      	ldrh	r0, [r4, #12]
 80180c8:	f000 fc82 	bl	80189d0 <uxr_seq_num_add>
 80180cc:	f1b9 0f00 	cmp.w	r9, #0
 80180d0:	d101      	bne.n	80180d6 <uxr_receive_reliable_message+0x5e>
 80180d2:	4285      	cmp	r5, r0
 80180d4:	d047      	beq.n	8018166 <uxr_receive_reliable_message+0xee>
 80180d6:	8922      	ldrh	r2, [r4, #8]
 80180d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80180dc:	fb02 5010 	mls	r0, r2, r0, r5
 80180e0:	b280      	uxth	r0, r0
 80180e2:	6863      	ldr	r3, [r4, #4]
 80180e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80180e8:	fb00 f303 	mul.w	r3, r0, r3
 80180ec:	6820      	ldr	r0, [r4, #0]
 80180ee:	3304      	adds	r3, #4
 80180f0:	4418      	add	r0, r3
 80180f2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80180f6:	2b00      	cmp	r3, #0
 80180f8:	d1cf      	bne.n	801809a <uxr_receive_reliable_message+0x22>
 80180fa:	4641      	mov	r1, r8
 80180fc:	463a      	mov	r2, r7
 80180fe:	f001 fdf8 	bl	8019cf2 <memcpy>
 8018102:	8921      	ldrh	r1, [r4, #8]
 8018104:	fbb5 f2f1 	udiv	r2, r5, r1
 8018108:	fb01 5212 	mls	r2, r1, r2, r5
 801810c:	b292      	uxth	r2, r2
 801810e:	6863      	ldr	r3, [r4, #4]
 8018110:	fbb3 f3f1 	udiv	r3, r3, r1
 8018114:	fb02 f303 	mul.w	r3, r2, r3
 8018118:	6822      	ldr	r2, [r4, #0]
 801811a:	50d7      	str	r7, [r2, r3]
 801811c:	9a08      	ldr	r2, [sp, #32]
 801811e:	2301      	movs	r3, #1
 8018120:	7013      	strb	r3, [r2, #0]
 8018122:	f1b9 0f00 	cmp.w	r9, #0
 8018126:	d0b8      	beq.n	801809a <uxr_receive_reliable_message+0x22>
 8018128:	89a6      	ldrh	r6, [r4, #12]
 801812a:	4630      	mov	r0, r6
 801812c:	2101      	movs	r1, #1
 801812e:	f000 fc4f 	bl	80189d0 <uxr_seq_num_add>
 8018132:	8922      	ldrh	r2, [r4, #8]
 8018134:	6863      	ldr	r3, [r4, #4]
 8018136:	fbb3 f3f2 	udiv	r3, r3, r2
 801813a:	4606      	mov	r6, r0
 801813c:	fbb0 f0f2 	udiv	r0, r0, r2
 8018140:	fb02 6010 	mls	r0, r2, r0, r6
 8018144:	b280      	uxth	r0, r0
 8018146:	fb00 f303 	mul.w	r3, r0, r3
 801814a:	6820      	ldr	r0, [r4, #0]
 801814c:	3304      	adds	r3, #4
 801814e:	4418      	add	r0, r3
 8018150:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018154:	2b00      	cmp	r3, #0
 8018156:	d0a0      	beq.n	801809a <uxr_receive_reliable_message+0x22>
 8018158:	6923      	ldr	r3, [r4, #16]
 801815a:	4798      	blx	r3
 801815c:	2802      	cmp	r0, #2
 801815e:	d008      	beq.n	8018172 <uxr_receive_reliable_message+0xfa>
 8018160:	2801      	cmp	r0, #1
 8018162:	d0e2      	beq.n	801812a <uxr_receive_reliable_message+0xb2>
 8018164:	e799      	b.n	801809a <uxr_receive_reliable_message+0x22>
 8018166:	9b08      	ldr	r3, [sp, #32]
 8018168:	81a5      	strh	r5, [r4, #12]
 801816a:	2601      	movs	r6, #1
 801816c:	f883 9000 	strb.w	r9, [r3]
 8018170:	e794      	b.n	801809c <uxr_receive_reliable_message+0x24>
 8018172:	2601      	movs	r6, #1
 8018174:	e792      	b.n	801809c <uxr_receive_reliable_message+0x24>
 8018176:	bf00      	nop

08018178 <uxr_next_input_reliable_buffer_available>:
 8018178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801817c:	4604      	mov	r4, r0
 801817e:	460f      	mov	r7, r1
 8018180:	8980      	ldrh	r0, [r0, #12]
 8018182:	2101      	movs	r1, #1
 8018184:	4690      	mov	r8, r2
 8018186:	f000 fc23 	bl	80189d0 <uxr_seq_num_add>
 801818a:	8922      	ldrh	r2, [r4, #8]
 801818c:	fbb0 f6f2 	udiv	r6, r0, r2
 8018190:	fb02 0616 	mls	r6, r2, r6, r0
 8018194:	b2b6      	uxth	r6, r6
 8018196:	6863      	ldr	r3, [r4, #4]
 8018198:	fbb3 f3f2 	udiv	r3, r3, r2
 801819c:	fb06 f303 	mul.w	r3, r6, r3
 80181a0:	6826      	ldr	r6, [r4, #0]
 80181a2:	3304      	adds	r3, #4
 80181a4:	441e      	add	r6, r3
 80181a6:	f856 9c04 	ldr.w	r9, [r6, #-4]
 80181aa:	f1b9 0f00 	cmp.w	r9, #0
 80181ae:	d023      	beq.n	80181f8 <uxr_next_input_reliable_buffer_available+0x80>
 80181b0:	6923      	ldr	r3, [r4, #16]
 80181b2:	4605      	mov	r5, r0
 80181b4:	4630      	mov	r0, r6
 80181b6:	4798      	blx	r3
 80181b8:	4682      	mov	sl, r0
 80181ba:	b300      	cbz	r0, 80181fe <uxr_next_input_reliable_buffer_available+0x86>
 80181bc:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80181c0:	2101      	movs	r1, #1
 80181c2:	4650      	mov	r0, sl
 80181c4:	f000 fc04 	bl	80189d0 <uxr_seq_num_add>
 80181c8:	8921      	ldrh	r1, [r4, #8]
 80181ca:	fbb0 f2f1 	udiv	r2, r0, r1
 80181ce:	4682      	mov	sl, r0
 80181d0:	fb01 0212 	mls	r2, r1, r2, r0
 80181d4:	e9d4 0300 	ldrd	r0, r3, [r4]
 80181d8:	b292      	uxth	r2, r2
 80181da:	fbb3 f3f1 	udiv	r3, r3, r1
 80181de:	fb02 f303 	mul.w	r3, r2, r3
 80181e2:	3304      	adds	r3, #4
 80181e4:	4418      	add	r0, r3
 80181e6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80181ea:	b12b      	cbz	r3, 80181f8 <uxr_next_input_reliable_buffer_available+0x80>
 80181ec:	6923      	ldr	r3, [r4, #16]
 80181ee:	4798      	blx	r3
 80181f0:	2802      	cmp	r0, #2
 80181f2:	d01b      	beq.n	801822c <uxr_next_input_reliable_buffer_available+0xb4>
 80181f4:	2801      	cmp	r0, #1
 80181f6:	d0e3      	beq.n	80181c0 <uxr_next_input_reliable_buffer_available+0x48>
 80181f8:	2000      	movs	r0, #0
 80181fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80181fe:	464a      	mov	r2, r9
 8018200:	4631      	mov	r1, r6
 8018202:	4638      	mov	r0, r7
 8018204:	f7f3 fee2 	bl	800bfcc <ucdr_init_buffer>
 8018208:	8921      	ldrh	r1, [r4, #8]
 801820a:	fbb5 f2f1 	udiv	r2, r5, r1
 801820e:	fb01 5212 	mls	r2, r1, r2, r5
 8018212:	b292      	uxth	r2, r2
 8018214:	6863      	ldr	r3, [r4, #4]
 8018216:	fbb3 f3f1 	udiv	r3, r3, r1
 801821a:	fb02 f303 	mul.w	r3, r2, r3
 801821e:	6822      	ldr	r2, [r4, #0]
 8018220:	f842 a003 	str.w	sl, [r2, r3]
 8018224:	2001      	movs	r0, #1
 8018226:	81a5      	strh	r5, [r4, #12]
 8018228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801822c:	8920      	ldrh	r0, [r4, #8]
 801822e:	fbb5 f3f0 	udiv	r3, r5, r0
 8018232:	fb00 5513 	mls	r5, r0, r3, r5
 8018236:	b2ad      	uxth	r5, r5
 8018238:	6863      	ldr	r3, [r4, #4]
 801823a:	fbb3 f3f0 	udiv	r3, r3, r0
 801823e:	fb03 f505 	mul.w	r5, r3, r5
 8018242:	6823      	ldr	r3, [r4, #0]
 8018244:	2000      	movs	r0, #0
 8018246:	5158      	str	r0, [r3, r5]
 8018248:	eb06 0108 	add.w	r1, r6, r8
 801824c:	eba9 0208 	sub.w	r2, r9, r8
 8018250:	4638      	mov	r0, r7
 8018252:	f7f3 febb 	bl	800bfcc <ucdr_init_buffer>
 8018256:	4638      	mov	r0, r7
 8018258:	4903      	ldr	r1, [pc, #12]	@ (8018268 <uxr_next_input_reliable_buffer_available+0xf0>)
 801825a:	4622      	mov	r2, r4
 801825c:	f7f3 fe8a 	bl	800bf74 <ucdr_set_on_full_buffer_callback>
 8018260:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8018264:	2001      	movs	r0, #1
 8018266:	e7c8      	b.n	80181fa <uxr_next_input_reliable_buffer_available+0x82>
 8018268:	08017f6d 	.word	0x08017f6d

0801826c <uxr_process_heartbeat>:
 801826c:	b538      	push	{r3, r4, r5, lr}
 801826e:	4611      	mov	r1, r2
 8018270:	4604      	mov	r4, r0
 8018272:	89c0      	ldrh	r0, [r0, #14]
 8018274:	4615      	mov	r5, r2
 8018276:	f000 fbb3 	bl	80189e0 <uxr_seq_num_cmp>
 801827a:	2800      	cmp	r0, #0
 801827c:	bfb8      	it	lt
 801827e:	81e5      	strhlt	r5, [r4, #14]
 8018280:	bd38      	pop	{r3, r4, r5, pc}
 8018282:	bf00      	nop

08018284 <uxr_compute_acknack>:
 8018284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018288:	8903      	ldrh	r3, [r0, #8]
 801828a:	8985      	ldrh	r5, [r0, #12]
 801828c:	4604      	mov	r4, r0
 801828e:	460e      	mov	r6, r1
 8018290:	b1d3      	cbz	r3, 80182c8 <uxr_compute_acknack+0x44>
 8018292:	4628      	mov	r0, r5
 8018294:	2701      	movs	r7, #1
 8018296:	e003      	b.n	80182a0 <uxr_compute_acknack+0x1c>
 8018298:	4567      	cmp	r7, ip
 801829a:	d215      	bcs.n	80182c8 <uxr_compute_acknack+0x44>
 801829c:	89a0      	ldrh	r0, [r4, #12]
 801829e:	3701      	adds	r7, #1
 80182a0:	b2b9      	uxth	r1, r7
 80182a2:	f000 fb95 	bl	80189d0 <uxr_seq_num_add>
 80182a6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80182aa:	fbb0 f3fc 	udiv	r3, r0, ip
 80182ae:	fb0c 0313 	mls	r3, ip, r3, r0
 80182b2:	b29a      	uxth	r2, r3
 80182b4:	e9d4 1300 	ldrd	r1, r3, [r4]
 80182b8:	fbb3 f3fc 	udiv	r3, r3, ip
 80182bc:	fb02 f303 	mul.w	r3, r2, r3
 80182c0:	58cb      	ldr	r3, [r1, r3]
 80182c2:	2b00      	cmp	r3, #0
 80182c4:	d1e8      	bne.n	8018298 <uxr_compute_acknack+0x14>
 80182c6:	4605      	mov	r5, r0
 80182c8:	8035      	strh	r5, [r6, #0]
 80182ca:	2101      	movs	r1, #1
 80182cc:	4628      	mov	r0, r5
 80182ce:	89e7      	ldrh	r7, [r4, #14]
 80182d0:	f000 fb82 	bl	80189d8 <uxr_seq_num_sub>
 80182d4:	4601      	mov	r1, r0
 80182d6:	4638      	mov	r0, r7
 80182d8:	f000 fb7e 	bl	80189d8 <uxr_seq_num_sub>
 80182dc:	4605      	mov	r5, r0
 80182de:	b318      	cbz	r0, 8018328 <uxr_compute_acknack+0xa4>
 80182e0:	f04f 0900 	mov.w	r9, #0
 80182e4:	464f      	mov	r7, r9
 80182e6:	f04f 0801 	mov.w	r8, #1
 80182ea:	fa1f f189 	uxth.w	r1, r9
 80182ee:	8830      	ldrh	r0, [r6, #0]
 80182f0:	f000 fb6e 	bl	80189d0 <uxr_seq_num_add>
 80182f4:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80182f8:	fbb0 f3fc 	udiv	r3, r0, ip
 80182fc:	e9d4 1200 	ldrd	r1, r2, [r4]
 8018300:	fb03 001c 	mls	r0, r3, ip, r0
 8018304:	b283      	uxth	r3, r0
 8018306:	fbb2 f2fc 	udiv	r2, r2, ip
 801830a:	fb02 f303 	mul.w	r3, r2, r3
 801830e:	fa08 f209 	lsl.w	r2, r8, r9
 8018312:	58cb      	ldr	r3, [r1, r3]
 8018314:	f109 0901 	add.w	r9, r9, #1
 8018318:	b90b      	cbnz	r3, 801831e <uxr_compute_acknack+0x9a>
 801831a:	4317      	orrs	r7, r2
 801831c:	b2bf      	uxth	r7, r7
 801831e:	454d      	cmp	r5, r9
 8018320:	d1e3      	bne.n	80182ea <uxr_compute_acknack+0x66>
 8018322:	4638      	mov	r0, r7
 8018324:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018328:	4607      	mov	r7, r0
 801832a:	4638      	mov	r0, r7
 801832c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08018330 <uxr_init_output_best_effort_stream>:
 8018330:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8018334:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8018338:	6001      	str	r1, [r0, #0]
 801833a:	7303      	strb	r3, [r0, #12]
 801833c:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8018340:	4770      	bx	lr
 8018342:	bf00      	nop

08018344 <uxr_reset_output_best_effort_stream>:
 8018344:	7b02      	ldrb	r2, [r0, #12]
 8018346:	6042      	str	r2, [r0, #4]
 8018348:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801834c:	81c3      	strh	r3, [r0, #14]
 801834e:	4770      	bx	lr

08018350 <uxr_prepare_best_effort_buffer_to_write>:
 8018350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018352:	4604      	mov	r4, r0
 8018354:	b083      	sub	sp, #12
 8018356:	6840      	ldr	r0, [r0, #4]
 8018358:	460d      	mov	r5, r1
 801835a:	4616      	mov	r6, r2
 801835c:	f7fb f8cc 	bl	80134f8 <uxr_submessage_padding>
 8018360:	6863      	ldr	r3, [r4, #4]
 8018362:	4418      	add	r0, r3
 8018364:	68a3      	ldr	r3, [r4, #8]
 8018366:	1942      	adds	r2, r0, r5
 8018368:	4293      	cmp	r3, r2
 801836a:	bf2c      	ite	cs
 801836c:	2701      	movcs	r7, #1
 801836e:	2700      	movcc	r7, #0
 8018370:	d202      	bcs.n	8018378 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8018372:	4638      	mov	r0, r7
 8018374:	b003      	add	sp, #12
 8018376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018378:	9000      	str	r0, [sp, #0]
 801837a:	6821      	ldr	r1, [r4, #0]
 801837c:	4630      	mov	r0, r6
 801837e:	2300      	movs	r3, #0
 8018380:	f7f3 fe12 	bl	800bfa8 <ucdr_init_buffer_origin_offset>
 8018384:	6861      	ldr	r1, [r4, #4]
 8018386:	4638      	mov	r0, r7
 8018388:	4429      	add	r1, r5
 801838a:	6061      	str	r1, [r4, #4]
 801838c:	b003      	add	sp, #12
 801838e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018390 <uxr_prepare_best_effort_buffer_to_send>:
 8018390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018394:	4604      	mov	r4, r0
 8018396:	461d      	mov	r5, r3
 8018398:	6840      	ldr	r0, [r0, #4]
 801839a:	7b23      	ldrb	r3, [r4, #12]
 801839c:	4298      	cmp	r0, r3
 801839e:	bf8c      	ite	hi
 80183a0:	2601      	movhi	r6, #1
 80183a2:	2600      	movls	r6, #0
 80183a4:	d802      	bhi.n	80183ac <uxr_prepare_best_effort_buffer_to_send+0x1c>
 80183a6:	4630      	mov	r0, r6
 80183a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80183ac:	4688      	mov	r8, r1
 80183ae:	89e0      	ldrh	r0, [r4, #14]
 80183b0:	2101      	movs	r1, #1
 80183b2:	4617      	mov	r7, r2
 80183b4:	f000 fb0c 	bl	80189d0 <uxr_seq_num_add>
 80183b8:	6823      	ldr	r3, [r4, #0]
 80183ba:	81e0      	strh	r0, [r4, #14]
 80183bc:	8028      	strh	r0, [r5, #0]
 80183be:	f8c8 3000 	str.w	r3, [r8]
 80183c2:	6863      	ldr	r3, [r4, #4]
 80183c4:	603b      	str	r3, [r7, #0]
 80183c6:	7b23      	ldrb	r3, [r4, #12]
 80183c8:	6063      	str	r3, [r4, #4]
 80183ca:	4630      	mov	r0, r6
 80183cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080183d0 <on_full_output_buffer>:
 80183d0:	b538      	push	{r3, r4, r5, lr}
 80183d2:	6802      	ldr	r2, [r0, #0]
 80183d4:	460c      	mov	r4, r1
 80183d6:	6809      	ldr	r1, [r1, #0]
 80183d8:	8923      	ldrh	r3, [r4, #8]
 80183da:	eba2 0c01 	sub.w	ip, r2, r1
 80183de:	6862      	ldr	r2, [r4, #4]
 80183e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80183e4:	fbbc fcf2 	udiv	ip, ip, r2
 80183e8:	f10c 0c01 	add.w	ip, ip, #1
 80183ec:	fa1f fc8c 	uxth.w	ip, ip
 80183f0:	fbbc fef3 	udiv	lr, ip, r3
 80183f4:	fb03 c31e 	mls	r3, r3, lr, ip
 80183f8:	b29b      	uxth	r3, r3
 80183fa:	fb02 f303 	mul.w	r3, r2, r3
 80183fe:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8018402:	58ca      	ldr	r2, [r1, r3]
 8018404:	4463      	add	r3, ip
 8018406:	eba2 020c 	sub.w	r2, r2, ip
 801840a:	3308      	adds	r3, #8
 801840c:	4605      	mov	r5, r0
 801840e:	4419      	add	r1, r3
 8018410:	3a04      	subs	r2, #4
 8018412:	6903      	ldr	r3, [r0, #16]
 8018414:	f7f3 fdd2 	bl	800bfbc <ucdr_init_buffer_origin>
 8018418:	4628      	mov	r0, r5
 801841a:	4903      	ldr	r1, [pc, #12]	@ (8018428 <on_full_output_buffer+0x58>)
 801841c:	4622      	mov	r2, r4
 801841e:	f7f3 fda9 	bl	800bf74 <ucdr_set_on_full_buffer_callback>
 8018422:	2000      	movs	r0, #0
 8018424:	bd38      	pop	{r3, r4, r5, pc}
 8018426:	bf00      	nop
 8018428:	080183d1 	.word	0x080183d1

0801842c <uxr_init_output_reliable_stream>:
 801842c:	b410      	push	{r4}
 801842e:	f89d c004 	ldrb.w	ip, [sp, #4]
 8018432:	8103      	strh	r3, [r0, #8]
 8018434:	e9c0 1200 	strd	r1, r2, [r0]
 8018438:	f880 c00c 	strb.w	ip, [r0, #12]
 801843c:	b1d3      	cbz	r3, 8018474 <uxr_init_output_reliable_stream+0x48>
 801843e:	f8c1 c000 	str.w	ip, [r1]
 8018442:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8018446:	f1bc 0f01 	cmp.w	ip, #1
 801844a:	d913      	bls.n	8018474 <uxr_init_output_reliable_stream+0x48>
 801844c:	2301      	movs	r3, #1
 801844e:	fbb3 f1fc 	udiv	r1, r3, ip
 8018452:	fb0c 3111 	mls	r1, ip, r1, r3
 8018456:	b289      	uxth	r1, r1
 8018458:	6842      	ldr	r2, [r0, #4]
 801845a:	6804      	ldr	r4, [r0, #0]
 801845c:	fbb2 f2fc 	udiv	r2, r2, ip
 8018460:	fb01 f202 	mul.w	r2, r1, r2
 8018464:	7b01      	ldrb	r1, [r0, #12]
 8018466:	50a1      	str	r1, [r4, r2]
 8018468:	3301      	adds	r3, #1
 801846a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801846e:	b29b      	uxth	r3, r3
 8018470:	459c      	cmp	ip, r3
 8018472:	d8ec      	bhi.n	801844e <uxr_init_output_reliable_stream+0x22>
 8018474:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018478:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801847c:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8018480:	4905      	ldr	r1, [pc, #20]	@ (8018498 <uxr_init_output_reliable_stream+0x6c>)
 8018482:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018486:	f8c0 100e 	str.w	r1, [r0, #14]
 801848a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801848e:	2300      	movs	r3, #0
 8018490:	8242      	strh	r2, [r0, #18]
 8018492:	8403      	strh	r3, [r0, #32]
 8018494:	4770      	bx	lr
 8018496:	bf00      	nop
 8018498:	ffff0000 	.word	0xffff0000

0801849c <uxr_reset_output_reliable_stream>:
 801849c:	8901      	ldrh	r1, [r0, #8]
 801849e:	b1b1      	cbz	r1, 80184ce <uxr_reset_output_reliable_stream+0x32>
 80184a0:	f04f 0c00 	mov.w	ip, #0
 80184a4:	4663      	mov	r3, ip
 80184a6:	fbb3 f2f1 	udiv	r2, r3, r1
 80184aa:	fb01 3312 	mls	r3, r1, r2, r3
 80184ae:	b29b      	uxth	r3, r3
 80184b0:	6842      	ldr	r2, [r0, #4]
 80184b2:	fbb2 f2f1 	udiv	r2, r2, r1
 80184b6:	6801      	ldr	r1, [r0, #0]
 80184b8:	fb02 f303 	mul.w	r3, r2, r3
 80184bc:	7b02      	ldrb	r2, [r0, #12]
 80184be:	50ca      	str	r2, [r1, r3]
 80184c0:	f10c 0c01 	add.w	ip, ip, #1
 80184c4:	8901      	ldrh	r1, [r0, #8]
 80184c6:	fa1f f38c 	uxth.w	r3, ip
 80184ca:	4299      	cmp	r1, r3
 80184cc:	d8eb      	bhi.n	80184a6 <uxr_reset_output_reliable_stream+0xa>
 80184ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80184d2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80184d6:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80184da:	4904      	ldr	r1, [pc, #16]	@ (80184ec <uxr_reset_output_reliable_stream+0x50>)
 80184dc:	f8c0 100e 	str.w	r1, [r0, #14]
 80184e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80184e4:	2300      	movs	r3, #0
 80184e6:	8242      	strh	r2, [r0, #18]
 80184e8:	8403      	strh	r3, [r0, #32]
 80184ea:	4770      	bx	lr
 80184ec:	ffff0000 	.word	0xffff0000

080184f0 <uxr_prepare_reliable_buffer_to_write>:
 80184f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184f4:	4604      	mov	r4, r0
 80184f6:	b091      	sub	sp, #68	@ 0x44
 80184f8:	8900      	ldrh	r0, [r0, #8]
 80184fa:	89e6      	ldrh	r6, [r4, #14]
 80184fc:	6823      	ldr	r3, [r4, #0]
 80184fe:	9204      	str	r2, [sp, #16]
 8018500:	fbb6 f2f0 	udiv	r2, r6, r0
 8018504:	fb00 6212 	mls	r2, r0, r2, r6
 8018508:	b292      	uxth	r2, r2
 801850a:	6865      	ldr	r5, [r4, #4]
 801850c:	fbb5 f5f0 	udiv	r5, r5, r0
 8018510:	fb05 3202 	mla	r2, r5, r2, r3
 8018514:	3204      	adds	r2, #4
 8018516:	f852 8c04 	ldr.w	r8, [r2, #-4]
 801851a:	f894 900c 	ldrb.w	r9, [r4, #12]
 801851e:	9203      	str	r2, [sp, #12]
 8018520:	468b      	mov	fp, r1
 8018522:	1f2f      	subs	r7, r5, #4
 8018524:	2800      	cmp	r0, #0
 8018526:	f000 814c 	beq.w	80187c2 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801852a:	f04f 0c00 	mov.w	ip, #0
 801852e:	46e2      	mov	sl, ip
 8018530:	4661      	mov	r1, ip
 8018532:	fbb1 f2f0 	udiv	r2, r1, r0
 8018536:	fb00 1212 	mls	r2, r0, r2, r1
 801853a:	b292      	uxth	r2, r2
 801853c:	fb05 f202 	mul.w	r2, r5, r2
 8018540:	f10c 0c01 	add.w	ip, ip, #1
 8018544:	589a      	ldr	r2, [r3, r2]
 8018546:	454a      	cmp	r2, r9
 8018548:	bf08      	it	eq
 801854a:	f10a 0a01 	addeq.w	sl, sl, #1
 801854e:	fa1f f18c 	uxth.w	r1, ip
 8018552:	bf08      	it	eq
 8018554:	fa1f fa8a 	uxtheq.w	sl, sl
 8018558:	4281      	cmp	r1, r0
 801855a:	d3ea      	bcc.n	8018532 <uxr_prepare_reliable_buffer_to_write+0x42>
 801855c:	4640      	mov	r0, r8
 801855e:	2104      	movs	r1, #4
 8018560:	f8cd a014 	str.w	sl, [sp, #20]
 8018564:	f7f3 fd36 	bl	800bfd4 <ucdr_alignment>
 8018568:	4480      	add	r8, r0
 801856a:	eb08 020b 	add.w	r2, r8, fp
 801856e:	42ba      	cmp	r2, r7
 8018570:	f240 80cd 	bls.w	801870e <uxr_prepare_reliable_buffer_to_write+0x21e>
 8018574:	7b22      	ldrb	r2, [r4, #12]
 8018576:	445a      	add	r2, fp
 8018578:	42ba      	cmp	r2, r7
 801857a:	f240 80b5 	bls.w	80186e8 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 801857e:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8018582:	33fc      	adds	r3, #252	@ 0xfc
 8018584:	b2ba      	uxth	r2, r7
 8018586:	4413      	add	r3, r2
 8018588:	b29b      	uxth	r3, r3
 801858a:	fb0a f903 	mul.w	r9, sl, r3
 801858e:	45d9      	cmp	r9, fp
 8018590:	9305      	str	r3, [sp, #20]
 8018592:	9306      	str	r3, [sp, #24]
 8018594:	f0c0 80b7 	bcc.w	8018706 <uxr_prepare_reliable_buffer_to_write+0x216>
 8018598:	f108 0304 	add.w	r3, r8, #4
 801859c:	42bb      	cmp	r3, r7
 801859e:	f080 80db 	bcs.w	8018758 <uxr_prepare_reliable_buffer_to_write+0x268>
 80185a2:	f1a2 0904 	sub.w	r9, r2, #4
 80185a6:	eba9 0908 	sub.w	r9, r9, r8
 80185aa:	9b05      	ldr	r3, [sp, #20]
 80185ac:	fa1f f989 	uxth.w	r9, r9
 80185b0:	ebab 0b09 	sub.w	fp, fp, r9
 80185b4:	fbbb f2f3 	udiv	r2, fp, r3
 80185b8:	fb03 b312 	mls	r3, r3, r2, fp
 80185bc:	2b00      	cmp	r3, #0
 80185be:	f000 80c8 	beq.w	8018752 <uxr_prepare_reliable_buffer_to_write+0x262>
 80185c2:	3201      	adds	r2, #1
 80185c4:	b292      	uxth	r2, r2
 80185c6:	9306      	str	r3, [sp, #24]
 80185c8:	4552      	cmp	r2, sl
 80185ca:	f200 809c 	bhi.w	8018706 <uxr_prepare_reliable_buffer_to_write+0x216>
 80185ce:	f10d 0b20 	add.w	fp, sp, #32
 80185d2:	2a00      	cmp	r2, #0
 80185d4:	d042      	beq.n	801865c <uxr_prepare_reliable_buffer_to_write+0x16c>
 80185d6:	f8cd 801c 	str.w	r8, [sp, #28]
 80185da:	f04f 0a00 	mov.w	sl, #0
 80185de:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80185e2:	9505      	str	r5, [sp, #20]
 80185e4:	f10d 0b20 	add.w	fp, sp, #32
 80185e8:	4615      	mov	r5, r2
 80185ea:	e000      	b.n	80185ee <uxr_prepare_reliable_buffer_to_write+0xfe>
 80185ec:	46c1      	mov	r9, r8
 80185ee:	8920      	ldrh	r0, [r4, #8]
 80185f0:	fbb6 f2f0 	udiv	r2, r6, r0
 80185f4:	fb00 6112 	mls	r1, r0, r2, r6
 80185f8:	b28a      	uxth	r2, r1
 80185fa:	6863      	ldr	r3, [r4, #4]
 80185fc:	fbb3 f1f0 	udiv	r1, r3, r0
 8018600:	6823      	ldr	r3, [r4, #0]
 8018602:	fb02 f101 	mul.w	r1, r2, r1
 8018606:	3104      	adds	r1, #4
 8018608:	4419      	add	r1, r3
 801860a:	4658      	mov	r0, fp
 801860c:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8018610:	9200      	str	r2, [sp, #0]
 8018612:	2300      	movs	r3, #0
 8018614:	463a      	mov	r2, r7
 8018616:	f7f3 fcc7 	bl	800bfa8 <ucdr_init_buffer_origin_offset>
 801861a:	464a      	mov	r2, r9
 801861c:	2300      	movs	r3, #0
 801861e:	210d      	movs	r1, #13
 8018620:	4658      	mov	r0, fp
 8018622:	f7fa ff29 	bl	8013478 <uxr_buffer_submessage_header>
 8018626:	8921      	ldrh	r1, [r4, #8]
 8018628:	fbb6 f2f1 	udiv	r2, r6, r1
 801862c:	fb01 6212 	mls	r2, r1, r2, r6
 8018630:	b292      	uxth	r2, r2
 8018632:	6863      	ldr	r3, [r4, #4]
 8018634:	fbb3 f3f1 	udiv	r3, r3, r1
 8018638:	fb02 f303 	mul.w	r3, r2, r3
 801863c:	6822      	ldr	r2, [r4, #0]
 801863e:	4630      	mov	r0, r6
 8018640:	50d7      	str	r7, [r2, r3]
 8018642:	2101      	movs	r1, #1
 8018644:	f000 f9c4 	bl	80189d0 <uxr_seq_num_add>
 8018648:	f10a 0a01 	add.w	sl, sl, #1
 801864c:	fa1f f38a 	uxth.w	r3, sl
 8018650:	429d      	cmp	r5, r3
 8018652:	4606      	mov	r6, r0
 8018654:	d8ca      	bhi.n	80185ec <uxr_prepare_reliable_buffer_to_write+0xfc>
 8018656:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801865a:	9d05      	ldr	r5, [sp, #20]
 801865c:	8920      	ldrh	r0, [r4, #8]
 801865e:	fbb6 f3f0 	udiv	r3, r6, r0
 8018662:	fb00 6313 	mls	r3, r0, r3, r6
 8018666:	b299      	uxth	r1, r3
 8018668:	6863      	ldr	r3, [r4, #4]
 801866a:	fbb3 f3f0 	udiv	r3, r3, r0
 801866e:	fb01 f303 	mul.w	r3, r1, r3
 8018672:	6821      	ldr	r1, [r4, #0]
 8018674:	3304      	adds	r3, #4
 8018676:	4419      	add	r1, r3
 8018678:	463a      	mov	r2, r7
 801867a:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801867e:	9000      	str	r0, [sp, #0]
 8018680:	2300      	movs	r3, #0
 8018682:	4658      	mov	r0, fp
 8018684:	f7f3 fc90 	bl	800bfa8 <ucdr_init_buffer_origin_offset>
 8018688:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801868c:	4658      	mov	r0, fp
 801868e:	fa1f f289 	uxth.w	r2, r9
 8018692:	2302      	movs	r3, #2
 8018694:	210d      	movs	r1, #13
 8018696:	f7fa feef 	bl	8013478 <uxr_buffer_submessage_header>
 801869a:	9b03      	ldr	r3, [sp, #12]
 801869c:	8927      	ldrh	r7, [r4, #8]
 801869e:	7b20      	ldrb	r0, [r4, #12]
 80186a0:	f108 0104 	add.w	r1, r8, #4
 80186a4:	440b      	add	r3, r1
 80186a6:	4619      	mov	r1, r3
 80186a8:	fbb6 f3f7 	udiv	r3, r6, r7
 80186ac:	fb07 6313 	mls	r3, r7, r3, r6
 80186b0:	f1a5 0208 	sub.w	r2, r5, #8
 80186b4:	b29d      	uxth	r5, r3
 80186b6:	3004      	adds	r0, #4
 80186b8:	6863      	ldr	r3, [r4, #4]
 80186ba:	fbb3 f3f7 	udiv	r3, r3, r7
 80186be:	fb05 f303 	mul.w	r3, r5, r3
 80186c2:	6825      	ldr	r5, [r4, #0]
 80186c4:	4448      	add	r0, r9
 80186c6:	50e8      	str	r0, [r5, r3]
 80186c8:	9d04      	ldr	r5, [sp, #16]
 80186ca:	eba2 0208 	sub.w	r2, r2, r8
 80186ce:	4628      	mov	r0, r5
 80186d0:	f7f3 fc7c 	bl	800bfcc <ucdr_init_buffer>
 80186d4:	4628      	mov	r0, r5
 80186d6:	493c      	ldr	r1, [pc, #240]	@ (80187c8 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 80186d8:	4622      	mov	r2, r4
 80186da:	f7f3 fc4b 	bl	800bf74 <ucdr_set_on_full_buffer_callback>
 80186de:	2001      	movs	r0, #1
 80186e0:	81e6      	strh	r6, [r4, #14]
 80186e2:	b011      	add	sp, #68	@ 0x44
 80186e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186e8:	2101      	movs	r1, #1
 80186ea:	89e0      	ldrh	r0, [r4, #14]
 80186ec:	f000 f970 	bl	80189d0 <uxr_seq_num_add>
 80186f0:	8921      	ldrh	r1, [r4, #8]
 80186f2:	4605      	mov	r5, r0
 80186f4:	8a60      	ldrh	r0, [r4, #18]
 80186f6:	f000 f96b 	bl	80189d0 <uxr_seq_num_add>
 80186fa:	4601      	mov	r1, r0
 80186fc:	4628      	mov	r0, r5
 80186fe:	f000 f96f 	bl	80189e0 <uxr_seq_num_cmp>
 8018702:	2800      	cmp	r0, #0
 8018704:	dd42      	ble.n	801878c <uxr_prepare_reliable_buffer_to_write+0x29c>
 8018706:	2000      	movs	r0, #0
 8018708:	b011      	add	sp, #68	@ 0x44
 801870a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801870e:	8921      	ldrh	r1, [r4, #8]
 8018710:	8a60      	ldrh	r0, [r4, #18]
 8018712:	9205      	str	r2, [sp, #20]
 8018714:	f000 f95c 	bl	80189d0 <uxr_seq_num_add>
 8018718:	4601      	mov	r1, r0
 801871a:	4630      	mov	r0, r6
 801871c:	f000 f960 	bl	80189e0 <uxr_seq_num_cmp>
 8018720:	2800      	cmp	r0, #0
 8018722:	9a05      	ldr	r2, [sp, #20]
 8018724:	dcef      	bgt.n	8018706 <uxr_prepare_reliable_buffer_to_write+0x216>
 8018726:	8927      	ldrh	r7, [r4, #8]
 8018728:	fbb6 f3f7 	udiv	r3, r6, r7
 801872c:	fb07 6313 	mls	r3, r7, r3, r6
 8018730:	b29d      	uxth	r5, r3
 8018732:	6863      	ldr	r3, [r4, #4]
 8018734:	6824      	ldr	r4, [r4, #0]
 8018736:	fbb3 f3f7 	udiv	r3, r3, r7
 801873a:	fb05 f303 	mul.w	r3, r5, r3
 801873e:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8018742:	50e2      	str	r2, [r4, r3]
 8018744:	2300      	movs	r3, #0
 8018746:	f8cd 8000 	str.w	r8, [sp]
 801874a:	f7f3 fc2d 	bl	800bfa8 <ucdr_init_buffer_origin_offset>
 801874e:	2001      	movs	r0, #1
 8018750:	e7da      	b.n	8018708 <uxr_prepare_reliable_buffer_to_write+0x218>
 8018752:	b293      	uxth	r3, r2
 8018754:	461a      	mov	r2, r3
 8018756:	e737      	b.n	80185c8 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8018758:	4630      	mov	r0, r6
 801875a:	2101      	movs	r1, #1
 801875c:	9207      	str	r2, [sp, #28]
 801875e:	f000 f937 	bl	80189d0 <uxr_seq_num_add>
 8018762:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018766:	fbb0 f1fc 	udiv	r1, r0, ip
 801876a:	fb0c 0111 	mls	r1, ip, r1, r0
 801876e:	4606      	mov	r6, r0
 8018770:	b288      	uxth	r0, r1
 8018772:	6863      	ldr	r3, [r4, #4]
 8018774:	fbb3 f1fc 	udiv	r1, r3, ip
 8018778:	6823      	ldr	r3, [r4, #0]
 801877a:	9a07      	ldr	r2, [sp, #28]
 801877c:	fb00 f101 	mul.w	r1, r0, r1
 8018780:	3104      	adds	r1, #4
 8018782:	440b      	add	r3, r1
 8018784:	9303      	str	r3, [sp, #12]
 8018786:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801878a:	e70a      	b.n	80185a2 <uxr_prepare_reliable_buffer_to_write+0xb2>
 801878c:	8921      	ldrh	r1, [r4, #8]
 801878e:	fbb5 f3f1 	udiv	r3, r5, r1
 8018792:	fb01 5313 	mls	r3, r1, r3, r5
 8018796:	b29a      	uxth	r2, r3
 8018798:	6863      	ldr	r3, [r4, #4]
 801879a:	fbb3 f3f1 	udiv	r3, r3, r1
 801879e:	6821      	ldr	r1, [r4, #0]
 80187a0:	9804      	ldr	r0, [sp, #16]
 80187a2:	fb02 f303 	mul.w	r3, r2, r3
 80187a6:	3304      	adds	r3, #4
 80187a8:	7b22      	ldrb	r2, [r4, #12]
 80187aa:	4419      	add	r1, r3
 80187ac:	445a      	add	r2, fp
 80187ae:	f841 2c04 	str.w	r2, [r1, #-4]
 80187b2:	7b23      	ldrb	r3, [r4, #12]
 80187b4:	9300      	str	r3, [sp, #0]
 80187b6:	2300      	movs	r3, #0
 80187b8:	f7f3 fbf6 	bl	800bfa8 <ucdr_init_buffer_origin_offset>
 80187bc:	81e5      	strh	r5, [r4, #14]
 80187be:	2001      	movs	r0, #1
 80187c0:	e7a2      	b.n	8018708 <uxr_prepare_reliable_buffer_to_write+0x218>
 80187c2:	4682      	mov	sl, r0
 80187c4:	e6ca      	b.n	801855c <uxr_prepare_reliable_buffer_to_write+0x6c>
 80187c6:	bf00      	nop
 80187c8:	080183d1 	.word	0x080183d1

080187cc <uxr_prepare_next_reliable_buffer_to_send>:
 80187cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187ce:	4604      	mov	r4, r0
 80187d0:	460f      	mov	r7, r1
 80187d2:	8a00      	ldrh	r0, [r0, #16]
 80187d4:	2101      	movs	r1, #1
 80187d6:	4616      	mov	r6, r2
 80187d8:	461d      	mov	r5, r3
 80187da:	f000 f8f9 	bl	80189d0 <uxr_seq_num_add>
 80187de:	8028      	strh	r0, [r5, #0]
 80187e0:	8922      	ldrh	r2, [r4, #8]
 80187e2:	fbb0 f3f2 	udiv	r3, r0, r2
 80187e6:	fb02 0c13 	mls	ip, r2, r3, r0
 80187ea:	fa1f fc8c 	uxth.w	ip, ip
 80187ee:	6863      	ldr	r3, [r4, #4]
 80187f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80187f4:	fb0c fc03 	mul.w	ip, ip, r3
 80187f8:	6823      	ldr	r3, [r4, #0]
 80187fa:	89e1      	ldrh	r1, [r4, #14]
 80187fc:	f10c 0c04 	add.w	ip, ip, #4
 8018800:	4463      	add	r3, ip
 8018802:	603b      	str	r3, [r7, #0]
 8018804:	6823      	ldr	r3, [r4, #0]
 8018806:	449c      	add	ip, r3
 8018808:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801880c:	6033      	str	r3, [r6, #0]
 801880e:	f000 f8e7 	bl	80189e0 <uxr_seq_num_cmp>
 8018812:	2800      	cmp	r0, #0
 8018814:	dd01      	ble.n	801881a <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8018816:	2000      	movs	r0, #0
 8018818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801881a:	7b23      	ldrb	r3, [r4, #12]
 801881c:	6832      	ldr	r2, [r6, #0]
 801881e:	429a      	cmp	r2, r3
 8018820:	d9f9      	bls.n	8018816 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018822:	8a61      	ldrh	r1, [r4, #18]
 8018824:	8a20      	ldrh	r0, [r4, #16]
 8018826:	f000 f8d7 	bl	80189d8 <uxr_seq_num_sub>
 801882a:	8923      	ldrh	r3, [r4, #8]
 801882c:	4283      	cmp	r3, r0
 801882e:	d0f2      	beq.n	8018816 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018830:	8828      	ldrh	r0, [r5, #0]
 8018832:	89e3      	ldrh	r3, [r4, #14]
 8018834:	8220      	strh	r0, [r4, #16]
 8018836:	4298      	cmp	r0, r3
 8018838:	d001      	beq.n	801883e <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801883a:	2001      	movs	r0, #1
 801883c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801883e:	2101      	movs	r1, #1
 8018840:	f000 f8c6 	bl	80189d0 <uxr_seq_num_add>
 8018844:	81e0      	strh	r0, [r4, #14]
 8018846:	2001      	movs	r0, #1
 8018848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801884a:	bf00      	nop

0801884c <uxr_update_output_stream_heartbeat_timestamp>:
 801884c:	b570      	push	{r4, r5, r6, lr}
 801884e:	8a01      	ldrh	r1, [r0, #16]
 8018850:	4604      	mov	r4, r0
 8018852:	8a40      	ldrh	r0, [r0, #18]
 8018854:	4615      	mov	r5, r2
 8018856:	461e      	mov	r6, r3
 8018858:	f000 f8c2 	bl	80189e0 <uxr_seq_num_cmp>
 801885c:	2800      	cmp	r0, #0
 801885e:	db07      	blt.n	8018870 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8018860:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018864:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8018868:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801886c:	2000      	movs	r0, #0
 801886e:	bd70      	pop	{r4, r5, r6, pc}
 8018870:	f894 0020 	ldrb.w	r0, [r4, #32]
 8018874:	b940      	cbnz	r0, 8018888 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8018876:	2301      	movs	r3, #1
 8018878:	f884 3020 	strb.w	r3, [r4, #32]
 801887c:	3564      	adds	r5, #100	@ 0x64
 801887e:	f146 0600 	adc.w	r6, r6, #0
 8018882:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8018886:	bd70      	pop	{r4, r5, r6, pc}
 8018888:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801888c:	4295      	cmp	r5, r2
 801888e:	eb76 0303 	sbcs.w	r3, r6, r3
 8018892:	bfa5      	ittet	ge
 8018894:	3001      	addge	r0, #1
 8018896:	f884 0020 	strbge.w	r0, [r4, #32]
 801889a:	2000      	movlt	r0, #0
 801889c:	2001      	movge	r0, #1
 801889e:	e7ed      	b.n	801887c <uxr_update_output_stream_heartbeat_timestamp+0x30>

080188a0 <uxr_begin_output_nack_buffer_it>:
 80188a0:	8a40      	ldrh	r0, [r0, #18]
 80188a2:	4770      	bx	lr

080188a4 <uxr_next_reliable_nack_buffer_to_send>:
 80188a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188a8:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 80188ac:	b082      	sub	sp, #8
 80188ae:	f1b8 0f00 	cmp.w	r8, #0
 80188b2:	d011      	beq.n	80188d8 <uxr_next_reliable_nack_buffer_to_send+0x34>
 80188b4:	4604      	mov	r4, r0
 80188b6:	8818      	ldrh	r0, [r3, #0]
 80188b8:	460e      	mov	r6, r1
 80188ba:	4617      	mov	r7, r2
 80188bc:	461d      	mov	r5, r3
 80188be:	2101      	movs	r1, #1
 80188c0:	f000 f886 	bl	80189d0 <uxr_seq_num_add>
 80188c4:	8028      	strh	r0, [r5, #0]
 80188c6:	8a21      	ldrh	r1, [r4, #16]
 80188c8:	f000 f88a 	bl	80189e0 <uxr_seq_num_cmp>
 80188cc:	2800      	cmp	r0, #0
 80188ce:	dd07      	ble.n	80188e0 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 80188d0:	f04f 0800 	mov.w	r8, #0
 80188d4:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 80188d8:	4640      	mov	r0, r8
 80188da:	b002      	add	sp, #8
 80188dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80188e0:	8921      	ldrh	r1, [r4, #8]
 80188e2:	8828      	ldrh	r0, [r5, #0]
 80188e4:	6823      	ldr	r3, [r4, #0]
 80188e6:	fbb0 f2f1 	udiv	r2, r0, r1
 80188ea:	fb01 0c12 	mls	ip, r1, r2, r0
 80188ee:	fa1f f28c 	uxth.w	r2, ip
 80188f2:	9301      	str	r3, [sp, #4]
 80188f4:	6863      	ldr	r3, [r4, #4]
 80188f6:	fbb3 fcf1 	udiv	ip, r3, r1
 80188fa:	9b01      	ldr	r3, [sp, #4]
 80188fc:	fb02 fc0c 	mul.w	ip, r2, ip
 8018900:	f10c 0c04 	add.w	ip, ip, #4
 8018904:	4463      	add	r3, ip
 8018906:	6033      	str	r3, [r6, #0]
 8018908:	6823      	ldr	r3, [r4, #0]
 801890a:	4463      	add	r3, ip
 801890c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8018910:	603b      	str	r3, [r7, #0]
 8018912:	7b22      	ldrb	r2, [r4, #12]
 8018914:	429a      	cmp	r2, r3
 8018916:	d0d2      	beq.n	80188be <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8018918:	4640      	mov	r0, r8
 801891a:	b002      	add	sp, #8
 801891c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018920 <uxr_process_acknack>:
 8018920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018922:	4604      	mov	r4, r0
 8018924:	460e      	mov	r6, r1
 8018926:	4610      	mov	r0, r2
 8018928:	2101      	movs	r1, #1
 801892a:	f000 f855 	bl	80189d8 <uxr_seq_num_sub>
 801892e:	8a61      	ldrh	r1, [r4, #18]
 8018930:	f000 f852 	bl	80189d8 <uxr_seq_num_sub>
 8018934:	b1c0      	cbz	r0, 8018968 <uxr_process_acknack+0x48>
 8018936:	4605      	mov	r5, r0
 8018938:	2700      	movs	r7, #0
 801893a:	2101      	movs	r1, #1
 801893c:	8a60      	ldrh	r0, [r4, #18]
 801893e:	f000 f847 	bl	80189d0 <uxr_seq_num_add>
 8018942:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018946:	fbb0 f1fc 	udiv	r1, r0, ip
 801894a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801894e:	fb0c 0111 	mls	r1, ip, r1, r0
 8018952:	b289      	uxth	r1, r1
 8018954:	3701      	adds	r7, #1
 8018956:	fbb3 f3fc 	udiv	r3, r3, ip
 801895a:	fb01 f303 	mul.w	r3, r1, r3
 801895e:	42bd      	cmp	r5, r7
 8018960:	7b21      	ldrb	r1, [r4, #12]
 8018962:	8260      	strh	r0, [r4, #18]
 8018964:	50d1      	str	r1, [r2, r3]
 8018966:	d1e8      	bne.n	801893a <uxr_process_acknack+0x1a>
 8018968:	3e00      	subs	r6, #0
 801896a:	f04f 0300 	mov.w	r3, #0
 801896e:	bf18      	it	ne
 8018970:	2601      	movne	r6, #1
 8018972:	f884 3020 	strb.w	r3, [r4, #32]
 8018976:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801897a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801897c <uxr_is_output_up_to_date>:
 801897c:	8a01      	ldrh	r1, [r0, #16]
 801897e:	8a40      	ldrh	r0, [r0, #18]
 8018980:	b508      	push	{r3, lr}
 8018982:	f000 f82d 	bl	80189e0 <uxr_seq_num_cmp>
 8018986:	fab0 f080 	clz	r0, r0
 801898a:	0940      	lsrs	r0, r0, #5
 801898c:	bd08      	pop	{r3, pc}
 801898e:	bf00      	nop

08018990 <get_available_free_slots>:
 8018990:	8902      	ldrh	r2, [r0, #8]
 8018992:	b1da      	cbz	r2, 80189cc <get_available_free_slots+0x3c>
 8018994:	b530      	push	{r4, r5, lr}
 8018996:	2100      	movs	r1, #0
 8018998:	6843      	ldr	r3, [r0, #4]
 801899a:	6805      	ldr	r5, [r0, #0]
 801899c:	7b04      	ldrb	r4, [r0, #12]
 801899e:	fbb3 fef2 	udiv	lr, r3, r2
 80189a2:	4608      	mov	r0, r1
 80189a4:	460b      	mov	r3, r1
 80189a6:	fbb3 fcf2 	udiv	ip, r3, r2
 80189aa:	fb02 331c 	mls	r3, r2, ip, r3
 80189ae:	b29b      	uxth	r3, r3
 80189b0:	fb0e f303 	mul.w	r3, lr, r3
 80189b4:	3101      	adds	r1, #1
 80189b6:	f855 c003 	ldr.w	ip, [r5, r3]
 80189ba:	4564      	cmp	r4, ip
 80189bc:	bf08      	it	eq
 80189be:	3001      	addeq	r0, #1
 80189c0:	b28b      	uxth	r3, r1
 80189c2:	bf08      	it	eq
 80189c4:	b280      	uxtheq	r0, r0
 80189c6:	4293      	cmp	r3, r2
 80189c8:	d3ed      	bcc.n	80189a6 <get_available_free_slots+0x16>
 80189ca:	bd30      	pop	{r4, r5, pc}
 80189cc:	4610      	mov	r0, r2
 80189ce:	4770      	bx	lr

080189d0 <uxr_seq_num_add>:
 80189d0:	4408      	add	r0, r1
 80189d2:	b280      	uxth	r0, r0
 80189d4:	4770      	bx	lr
 80189d6:	bf00      	nop

080189d8 <uxr_seq_num_sub>:
 80189d8:	1a40      	subs	r0, r0, r1
 80189da:	b280      	uxth	r0, r0
 80189dc:	4770      	bx	lr
 80189de:	bf00      	nop

080189e0 <uxr_seq_num_cmp>:
 80189e0:	4288      	cmp	r0, r1
 80189e2:	d011      	beq.n	8018a08 <uxr_seq_num_cmp+0x28>
 80189e4:	d309      	bcc.n	80189fa <uxr_seq_num_cmp+0x1a>
 80189e6:	4288      	cmp	r0, r1
 80189e8:	d910      	bls.n	8018a0c <uxr_seq_num_cmp+0x2c>
 80189ea:	1a40      	subs	r0, r0, r1
 80189ec:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80189f0:	bfd4      	ite	le
 80189f2:	2001      	movle	r0, #1
 80189f4:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 80189f8:	4770      	bx	lr
 80189fa:	1a0b      	subs	r3, r1, r0
 80189fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8018a00:	daf1      	bge.n	80189e6 <uxr_seq_num_cmp+0x6>
 8018a02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018a06:	4770      	bx	lr
 8018a08:	2000      	movs	r0, #0
 8018a0a:	4770      	bx	lr
 8018a0c:	2001      	movs	r0, #1
 8018a0e:	4770      	bx	lr

08018a10 <rcl_get_default_domain_id>:
 8018a10:	b530      	push	{r4, r5, lr}
 8018a12:	b083      	sub	sp, #12
 8018a14:	2300      	movs	r3, #0
 8018a16:	9300      	str	r3, [sp, #0]
 8018a18:	b1d0      	cbz	r0, 8018a50 <rcl_get_default_domain_id+0x40>
 8018a1a:	4604      	mov	r4, r0
 8018a1c:	4669      	mov	r1, sp
 8018a1e:	4815      	ldr	r0, [pc, #84]	@ (8018a74 <rcl_get_default_domain_id+0x64>)
 8018a20:	f7f5 fd94 	bl	800e54c <rcutils_get_env>
 8018a24:	4602      	mov	r2, r0
 8018a26:	b110      	cbz	r0, 8018a2e <rcl_get_default_domain_id+0x1e>
 8018a28:	2001      	movs	r0, #1
 8018a2a:	b003      	add	sp, #12
 8018a2c:	bd30      	pop	{r4, r5, pc}
 8018a2e:	9b00      	ldr	r3, [sp, #0]
 8018a30:	b18b      	cbz	r3, 8018a56 <rcl_get_default_domain_id+0x46>
 8018a32:	7818      	ldrb	r0, [r3, #0]
 8018a34:	2800      	cmp	r0, #0
 8018a36:	d0f8      	beq.n	8018a2a <rcl_get_default_domain_id+0x1a>
 8018a38:	a901      	add	r1, sp, #4
 8018a3a:	4618      	mov	r0, r3
 8018a3c:	9201      	str	r2, [sp, #4]
 8018a3e:	f000 fd85 	bl	801954c <strtoul>
 8018a42:	4605      	mov	r5, r0
 8018a44:	b150      	cbz	r0, 8018a5c <rcl_get_default_domain_id+0x4c>
 8018a46:	1c43      	adds	r3, r0, #1
 8018a48:	d00d      	beq.n	8018a66 <rcl_get_default_domain_id+0x56>
 8018a4a:	6025      	str	r5, [r4, #0]
 8018a4c:	2000      	movs	r0, #0
 8018a4e:	e7ec      	b.n	8018a2a <rcl_get_default_domain_id+0x1a>
 8018a50:	200b      	movs	r0, #11
 8018a52:	b003      	add	sp, #12
 8018a54:	bd30      	pop	{r4, r5, pc}
 8018a56:	4618      	mov	r0, r3
 8018a58:	b003      	add	sp, #12
 8018a5a:	bd30      	pop	{r4, r5, pc}
 8018a5c:	9b01      	ldr	r3, [sp, #4]
 8018a5e:	781b      	ldrb	r3, [r3, #0]
 8018a60:	2b00      	cmp	r3, #0
 8018a62:	d0f2      	beq.n	8018a4a <rcl_get_default_domain_id+0x3a>
 8018a64:	e7e0      	b.n	8018a28 <rcl_get_default_domain_id+0x18>
 8018a66:	f001 f90f 	bl	8019c88 <__errno>
 8018a6a:	6803      	ldr	r3, [r0, #0]
 8018a6c:	2b22      	cmp	r3, #34	@ 0x22
 8018a6e:	d1ec      	bne.n	8018a4a <rcl_get_default_domain_id+0x3a>
 8018a70:	e7da      	b.n	8018a28 <rcl_get_default_domain_id+0x18>
 8018a72:	bf00      	nop
 8018a74:	0801b33c 	.word	0x0801b33c

08018a78 <rcl_expand_topic_name>:
 8018a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a7c:	b08b      	sub	sp, #44	@ 0x2c
 8018a7e:	9306      	str	r3, [sp, #24]
 8018a80:	2800      	cmp	r0, #0
 8018a82:	f000 80ad 	beq.w	8018be0 <rcl_expand_topic_name+0x168>
 8018a86:	460e      	mov	r6, r1
 8018a88:	2900      	cmp	r1, #0
 8018a8a:	f000 80a9 	beq.w	8018be0 <rcl_expand_topic_name+0x168>
 8018a8e:	4617      	mov	r7, r2
 8018a90:	2a00      	cmp	r2, #0
 8018a92:	f000 80a5 	beq.w	8018be0 <rcl_expand_topic_name+0x168>
 8018a96:	2b00      	cmp	r3, #0
 8018a98:	f000 80a2 	beq.w	8018be0 <rcl_expand_topic_name+0x168>
 8018a9c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018a9e:	2b00      	cmp	r3, #0
 8018aa0:	f000 809e 	beq.w	8018be0 <rcl_expand_topic_name+0x168>
 8018aa4:	2200      	movs	r2, #0
 8018aa6:	a909      	add	r1, sp, #36	@ 0x24
 8018aa8:	4680      	mov	r8, r0
 8018aaa:	f000 f949 	bl	8018d40 <rcl_validate_topic_name>
 8018aae:	4604      	mov	r4, r0
 8018ab0:	2800      	cmp	r0, #0
 8018ab2:	f040 8096 	bne.w	8018be2 <rcl_expand_topic_name+0x16a>
 8018ab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018ab8:	2b00      	cmp	r3, #0
 8018aba:	f040 809a 	bne.w	8018bf2 <rcl_expand_topic_name+0x17a>
 8018abe:	4602      	mov	r2, r0
 8018ac0:	a909      	add	r1, sp, #36	@ 0x24
 8018ac2:	4630      	mov	r0, r6
 8018ac4:	f7f5 ffe0 	bl	800ea88 <rmw_validate_node_name>
 8018ac8:	2800      	cmp	r0, #0
 8018aca:	f040 808e 	bne.w	8018bea <rcl_expand_topic_name+0x172>
 8018ace:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018ad0:	2a00      	cmp	r2, #0
 8018ad2:	f040 8093 	bne.w	8018bfc <rcl_expand_topic_name+0x184>
 8018ad6:	a909      	add	r1, sp, #36	@ 0x24
 8018ad8:	4638      	mov	r0, r7
 8018ada:	f7f5 ffb7 	bl	800ea4c <rmw_validate_namespace>
 8018ade:	2800      	cmp	r0, #0
 8018ae0:	f040 8083 	bne.w	8018bea <rcl_expand_topic_name+0x172>
 8018ae4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8018ae6:	2c00      	cmp	r4, #0
 8018ae8:	f040 80ed 	bne.w	8018cc6 <rcl_expand_topic_name+0x24e>
 8018aec:	217b      	movs	r1, #123	@ 0x7b
 8018aee:	4640      	mov	r0, r8
 8018af0:	f000 ffe0 	bl	8019ab4 <strchr>
 8018af4:	f898 3000 	ldrb.w	r3, [r8]
 8018af8:	2b2f      	cmp	r3, #47	@ 0x2f
 8018afa:	4605      	mov	r5, r0
 8018afc:	f000 809e 	beq.w	8018c3c <rcl_expand_topic_name+0x1c4>
 8018b00:	2b7e      	cmp	r3, #126	@ 0x7e
 8018b02:	f040 80a2 	bne.w	8018c4a <rcl_expand_topic_name+0x1d2>
 8018b06:	4638      	mov	r0, r7
 8018b08:	f7e7 fb8c 	bl	8000224 <strlen>
 8018b0c:	4a82      	ldr	r2, [pc, #520]	@ (8018d18 <rcl_expand_topic_name+0x2a0>)
 8018b0e:	4b83      	ldr	r3, [pc, #524]	@ (8018d1c <rcl_expand_topic_name+0x2a4>)
 8018b10:	2801      	cmp	r0, #1
 8018b12:	bf18      	it	ne
 8018b14:	4613      	movne	r3, r2
 8018b16:	9302      	str	r3, [sp, #8]
 8018b18:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8018b1a:	9300      	str	r3, [sp, #0]
 8018b1c:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8018b20:	f108 0301 	add.w	r3, r8, #1
 8018b24:	9305      	str	r3, [sp, #20]
 8018b26:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8018b2a:	9301      	str	r3, [sp, #4]
 8018b2c:	ab14      	add	r3, sp, #80	@ 0x50
 8018b2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018b30:	f7f5 fd56 	bl	800e5e0 <rcutils_format_string_limit>
 8018b34:	4682      	mov	sl, r0
 8018b36:	2800      	cmp	r0, #0
 8018b38:	f000 80c7 	beq.w	8018cca <rcl_expand_topic_name+0x252>
 8018b3c:	2d00      	cmp	r5, #0
 8018b3e:	f000 80a2 	beq.w	8018c86 <rcl_expand_topic_name+0x20e>
 8018b42:	217b      	movs	r1, #123	@ 0x7b
 8018b44:	f000 ffb6 	bl	8019ab4 <strchr>
 8018b48:	46d1      	mov	r9, sl
 8018b4a:	4605      	mov	r5, r0
 8018b4c:	9407      	str	r4, [sp, #28]
 8018b4e:	46d3      	mov	fp, sl
 8018b50:	464c      	mov	r4, r9
 8018b52:	2d00      	cmp	r5, #0
 8018b54:	f000 80be 	beq.w	8018cd4 <rcl_expand_topic_name+0x25c>
 8018b58:	217d      	movs	r1, #125	@ 0x7d
 8018b5a:	4620      	mov	r0, r4
 8018b5c:	f000 ffaa 	bl	8019ab4 <strchr>
 8018b60:	eba0 0905 	sub.w	r9, r0, r5
 8018b64:	f109 0a01 	add.w	sl, r9, #1
 8018b68:	486d      	ldr	r0, [pc, #436]	@ (8018d20 <rcl_expand_topic_name+0x2a8>)
 8018b6a:	4652      	mov	r2, sl
 8018b6c:	4629      	mov	r1, r5
 8018b6e:	f000 ffae 	bl	8019ace <strncmp>
 8018b72:	2800      	cmp	r0, #0
 8018b74:	d067      	beq.n	8018c46 <rcl_expand_topic_name+0x1ce>
 8018b76:	486b      	ldr	r0, [pc, #428]	@ (8018d24 <rcl_expand_topic_name+0x2ac>)
 8018b78:	4652      	mov	r2, sl
 8018b7a:	4629      	mov	r1, r5
 8018b7c:	f000 ffa7 	bl	8019ace <strncmp>
 8018b80:	b130      	cbz	r0, 8018b90 <rcl_expand_topic_name+0x118>
 8018b82:	4869      	ldr	r0, [pc, #420]	@ (8018d28 <rcl_expand_topic_name+0x2b0>)
 8018b84:	4652      	mov	r2, sl
 8018b86:	4629      	mov	r1, r5
 8018b88:	f000 ffa1 	bl	8019ace <strncmp>
 8018b8c:	2800      	cmp	r0, #0
 8018b8e:	d137      	bne.n	8018c00 <rcl_expand_topic_name+0x188>
 8018b90:	46b9      	mov	r9, r7
 8018b92:	ab16      	add	r3, sp, #88	@ 0x58
 8018b94:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018b98:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8018b9c:	ab14      	add	r3, sp, #80	@ 0x50
 8018b9e:	4628      	mov	r0, r5
 8018ba0:	cb0c      	ldmia	r3, {r2, r3}
 8018ba2:	4651      	mov	r1, sl
 8018ba4:	f7f5 fe58 	bl	800e858 <rcutils_strndup>
 8018ba8:	4605      	mov	r5, r0
 8018baa:	2800      	cmp	r0, #0
 8018bac:	f000 809c 	beq.w	8018ce8 <rcl_expand_topic_name+0x270>
 8018bb0:	464a      	mov	r2, r9
 8018bb2:	4620      	mov	r0, r4
 8018bb4:	ab14      	add	r3, sp, #80	@ 0x50
 8018bb6:	4629      	mov	r1, r5
 8018bb8:	f7f5 fd4c 	bl	800e654 <rcutils_repl_str>
 8018bbc:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018bbe:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018bc0:	4604      	mov	r4, r0
 8018bc2:	4628      	mov	r0, r5
 8018bc4:	4798      	blx	r3
 8018bc6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018bc8:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018bca:	4658      	mov	r0, fp
 8018bcc:	4798      	blx	r3
 8018bce:	2c00      	cmp	r4, #0
 8018bd0:	d07b      	beq.n	8018cca <rcl_expand_topic_name+0x252>
 8018bd2:	217b      	movs	r1, #123	@ 0x7b
 8018bd4:	4620      	mov	r0, r4
 8018bd6:	f000 ff6d 	bl	8019ab4 <strchr>
 8018bda:	46a3      	mov	fp, r4
 8018bdc:	4605      	mov	r5, r0
 8018bde:	e7b8      	b.n	8018b52 <rcl_expand_topic_name+0xda>
 8018be0:	240b      	movs	r4, #11
 8018be2:	4620      	mov	r0, r4
 8018be4:	b00b      	add	sp, #44	@ 0x2c
 8018be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bea:	f7fb ffdb 	bl	8014ba4 <rcl_convert_rmw_ret_to_rcl_ret>
 8018bee:	4604      	mov	r4, r0
 8018bf0:	e7f7      	b.n	8018be2 <rcl_expand_topic_name+0x16a>
 8018bf2:	2467      	movs	r4, #103	@ 0x67
 8018bf4:	4620      	mov	r0, r4
 8018bf6:	b00b      	add	sp, #44	@ 0x2c
 8018bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bfc:	24c9      	movs	r4, #201	@ 0xc9
 8018bfe:	e7f0      	b.n	8018be2 <rcl_expand_topic_name+0x16a>
 8018c00:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8018c04:	9806      	ldr	r0, [sp, #24]
 8018c06:	1c69      	adds	r1, r5, #1
 8018c08:	f7fe f934 	bl	8016e74 <rcutils_string_map_getn>
 8018c0c:	4681      	mov	r9, r0
 8018c0e:	2800      	cmp	r0, #0
 8018c10:	d1bf      	bne.n	8018b92 <rcl_expand_topic_name+0x11a>
 8018c12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018c14:	aa16      	add	r2, sp, #88	@ 0x58
 8018c16:	6018      	str	r0, [r3, #0]
 8018c18:	ca07      	ldmia	r2, {r0, r1, r2}
 8018c1a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8018c1e:	ab14      	add	r3, sp, #80	@ 0x50
 8018c20:	cb0c      	ldmia	r3, {r2, r3}
 8018c22:	4651      	mov	r1, sl
 8018c24:	4628      	mov	r0, r5
 8018c26:	f7f5 fe17 	bl	800e858 <rcutils_strndup>
 8018c2a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018c2c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018c2e:	4798      	blx	r3
 8018c30:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018c32:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018c34:	4658      	mov	r0, fp
 8018c36:	2469      	movs	r4, #105	@ 0x69
 8018c38:	4798      	blx	r3
 8018c3a:	e7d2      	b.n	8018be2 <rcl_expand_topic_name+0x16a>
 8018c3c:	2800      	cmp	r0, #0
 8018c3e:	d05b      	beq.n	8018cf8 <rcl_expand_topic_name+0x280>
 8018c40:	46c1      	mov	r9, r8
 8018c42:	46a2      	mov	sl, r4
 8018c44:	e782      	b.n	8018b4c <rcl_expand_topic_name+0xd4>
 8018c46:	46b1      	mov	r9, r6
 8018c48:	e7a3      	b.n	8018b92 <rcl_expand_topic_name+0x11a>
 8018c4a:	2800      	cmp	r0, #0
 8018c4c:	d1f8      	bne.n	8018c40 <rcl_expand_topic_name+0x1c8>
 8018c4e:	4638      	mov	r0, r7
 8018c50:	f7e7 fae8 	bl	8000224 <strlen>
 8018c54:	4a35      	ldr	r2, [pc, #212]	@ (8018d2c <rcl_expand_topic_name+0x2b4>)
 8018c56:	4b36      	ldr	r3, [pc, #216]	@ (8018d30 <rcl_expand_topic_name+0x2b8>)
 8018c58:	f8cd 8010 	str.w	r8, [sp, #16]
 8018c5c:	2801      	cmp	r0, #1
 8018c5e:	bf18      	it	ne
 8018c60:	4613      	movne	r3, r2
 8018c62:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8018c66:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8018c6a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8018c6c:	9703      	str	r7, [sp, #12]
 8018c6e:	9200      	str	r2, [sp, #0]
 8018c70:	ab14      	add	r3, sp, #80	@ 0x50
 8018c72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018c74:	f7f5 fcb4 	bl	800e5e0 <rcutils_format_string_limit>
 8018c78:	4682      	mov	sl, r0
 8018c7a:	4653      	mov	r3, sl
 8018c7c:	b32b      	cbz	r3, 8018cca <rcl_expand_topic_name+0x252>
 8018c7e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018c80:	f8c3 a000 	str.w	sl, [r3]
 8018c84:	e7ad      	b.n	8018be2 <rcl_expand_topic_name+0x16a>
 8018c86:	f89a 3000 	ldrb.w	r3, [sl]
 8018c8a:	2b2f      	cmp	r3, #47	@ 0x2f
 8018c8c:	d0f7      	beq.n	8018c7e <rcl_expand_topic_name+0x206>
 8018c8e:	4638      	mov	r0, r7
 8018c90:	f7e7 fac8 	bl	8000224 <strlen>
 8018c94:	4a25      	ldr	r2, [pc, #148]	@ (8018d2c <rcl_expand_topic_name+0x2b4>)
 8018c96:	4b26      	ldr	r3, [pc, #152]	@ (8018d30 <rcl_expand_topic_name+0x2b8>)
 8018c98:	f8cd a010 	str.w	sl, [sp, #16]
 8018c9c:	2801      	cmp	r0, #1
 8018c9e:	bf18      	it	ne
 8018ca0:	4613      	movne	r3, r2
 8018ca2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8018ca6:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8018caa:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8018cac:	9703      	str	r7, [sp, #12]
 8018cae:	9200      	str	r2, [sp, #0]
 8018cb0:	ab14      	add	r3, sp, #80	@ 0x50
 8018cb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018cb4:	f7f5 fc94 	bl	800e5e0 <rcutils_format_string_limit>
 8018cb8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018cba:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018cbc:	4605      	mov	r5, r0
 8018cbe:	4650      	mov	r0, sl
 8018cc0:	4798      	blx	r3
 8018cc2:	46aa      	mov	sl, r5
 8018cc4:	e7d9      	b.n	8018c7a <rcl_expand_topic_name+0x202>
 8018cc6:	24ca      	movs	r4, #202	@ 0xca
 8018cc8:	e78b      	b.n	8018be2 <rcl_expand_topic_name+0x16a>
 8018cca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8018ccc:	2300      	movs	r3, #0
 8018cce:	6013      	str	r3, [r2, #0]
 8018cd0:	240a      	movs	r4, #10
 8018cd2:	e786      	b.n	8018be2 <rcl_expand_topic_name+0x16a>
 8018cd4:	465b      	mov	r3, fp
 8018cd6:	9c07      	ldr	r4, [sp, #28]
 8018cd8:	46da      	mov	sl, fp
 8018cda:	2b00      	cmp	r3, #0
 8018cdc:	d1d3      	bne.n	8018c86 <rcl_expand_topic_name+0x20e>
 8018cde:	f898 3000 	ldrb.w	r3, [r8]
 8018ce2:	2b2f      	cmp	r3, #47	@ 0x2f
 8018ce4:	d0cb      	beq.n	8018c7e <rcl_expand_topic_name+0x206>
 8018ce6:	e7b2      	b.n	8018c4e <rcl_expand_topic_name+0x1d6>
 8018ce8:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8018cec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018cee:	6015      	str	r5, [r2, #0]
 8018cf0:	4658      	mov	r0, fp
 8018cf2:	4798      	blx	r3
 8018cf4:	240a      	movs	r4, #10
 8018cf6:	e774      	b.n	8018be2 <rcl_expand_topic_name+0x16a>
 8018cf8:	ab17      	add	r3, sp, #92	@ 0x5c
 8018cfa:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018cfe:	e88d 0003 	stmia.w	sp, {r0, r1}
 8018d02:	ab14      	add	r3, sp, #80	@ 0x50
 8018d04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8018d06:	4640      	mov	r0, r8
 8018d08:	f7f5 fd84 	bl	800e814 <rcutils_strdup>
 8018d0c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018d0e:	2800      	cmp	r0, #0
 8018d10:	6018      	str	r0, [r3, #0]
 8018d12:	bf08      	it	eq
 8018d14:	240a      	moveq	r4, #10
 8018d16:	e764      	b.n	8018be2 <rcl_expand_topic_name+0x16a>
 8018d18:	0801b34c 	.word	0x0801b34c
 8018d1c:	0801b048 	.word	0x0801b048
 8018d20:	0801b354 	.word	0x0801b354
 8018d24:	0801b35c 	.word	0x0801b35c
 8018d28:	0801b364 	.word	0x0801b364
 8018d2c:	0801ad14 	.word	0x0801ad14
 8018d30:	0801ad0c 	.word	0x0801ad0c

08018d34 <rcl_get_default_topic_name_substitutions>:
 8018d34:	2800      	cmp	r0, #0
 8018d36:	bf0c      	ite	eq
 8018d38:	200b      	moveq	r0, #11
 8018d3a:	2000      	movne	r0, #0
 8018d3c:	4770      	bx	lr
 8018d3e:	bf00      	nop

08018d40 <rcl_validate_topic_name>:
 8018d40:	2800      	cmp	r0, #0
 8018d42:	d07a      	beq.n	8018e3a <rcl_validate_topic_name+0xfa>
 8018d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d48:	460e      	mov	r6, r1
 8018d4a:	2900      	cmp	r1, #0
 8018d4c:	d07c      	beq.n	8018e48 <rcl_validate_topic_name+0x108>
 8018d4e:	4617      	mov	r7, r2
 8018d50:	4605      	mov	r5, r0
 8018d52:	f7e7 fa67 	bl	8000224 <strlen>
 8018d56:	b1b0      	cbz	r0, 8018d86 <rcl_validate_topic_name+0x46>
 8018d58:	f895 9000 	ldrb.w	r9, [r5]
 8018d5c:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8018ee0 <rcl_validate_topic_name+0x1a0>
 8018d60:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8018d64:	f013 0304 	ands.w	r3, r3, #4
 8018d68:	d169      	bne.n	8018e3e <rcl_validate_topic_name+0xfe>
 8018d6a:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8018d6e:	f815 2008 	ldrb.w	r2, [r5, r8]
 8018d72:	2a2f      	cmp	r2, #47	@ 0x2f
 8018d74:	d10e      	bne.n	8018d94 <rcl_validate_topic_name+0x54>
 8018d76:	2202      	movs	r2, #2
 8018d78:	6032      	str	r2, [r6, #0]
 8018d7a:	b36f      	cbz	r7, 8018dd8 <rcl_validate_topic_name+0x98>
 8018d7c:	f8c7 8000 	str.w	r8, [r7]
 8018d80:	4618      	mov	r0, r3
 8018d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d86:	2301      	movs	r3, #1
 8018d88:	6033      	str	r3, [r6, #0]
 8018d8a:	b32f      	cbz	r7, 8018dd8 <rcl_validate_topic_name+0x98>
 8018d8c:	2000      	movs	r0, #0
 8018d8e:	6038      	str	r0, [r7, #0]
 8018d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d94:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8018d98:	461c      	mov	r4, r3
 8018d9a:	4619      	mov	r1, r3
 8018d9c:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8018da0:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8018da4:	f1be 0f09 	cmp.w	lr, #9
 8018da8:	d919      	bls.n	8018dde <rcl_validate_topic_name+0x9e>
 8018daa:	f022 0e20 	bic.w	lr, r2, #32
 8018dae:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8018db2:	f1be 0f19 	cmp.w	lr, #25
 8018db6:	d912      	bls.n	8018dde <rcl_validate_topic_name+0x9e>
 8018db8:	2a5f      	cmp	r2, #95	@ 0x5f
 8018dba:	d019      	beq.n	8018df0 <rcl_validate_topic_name+0xb0>
 8018dbc:	2a2f      	cmp	r2, #47	@ 0x2f
 8018dbe:	d051      	beq.n	8018e64 <rcl_validate_topic_name+0x124>
 8018dc0:	2a7e      	cmp	r2, #126	@ 0x7e
 8018dc2:	d048      	beq.n	8018e56 <rcl_validate_topic_name+0x116>
 8018dc4:	2a7b      	cmp	r2, #123	@ 0x7b
 8018dc6:	d054      	beq.n	8018e72 <rcl_validate_topic_name+0x132>
 8018dc8:	2a7d      	cmp	r2, #125	@ 0x7d
 8018dca:	d161      	bne.n	8018e90 <rcl_validate_topic_name+0x150>
 8018dcc:	2c00      	cmp	r4, #0
 8018dce:	d155      	bne.n	8018e7c <rcl_validate_topic_name+0x13c>
 8018dd0:	2305      	movs	r3, #5
 8018dd2:	6033      	str	r3, [r6, #0]
 8018dd4:	b107      	cbz	r7, 8018dd8 <rcl_validate_topic_name+0x98>
 8018dd6:	6039      	str	r1, [r7, #0]
 8018dd8:	2000      	movs	r0, #0
 8018dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018dde:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8018de2:	0752      	lsls	r2, r2, #29
 8018de4:	d504      	bpl.n	8018df0 <rcl_validate_topic_name+0xb0>
 8018de6:	b11c      	cbz	r4, 8018df0 <rcl_validate_topic_name+0xb0>
 8018de8:	b111      	cbz	r1, 8018df0 <rcl_validate_topic_name+0xb0>
 8018dea:	1e4a      	subs	r2, r1, #1
 8018dec:	429a      	cmp	r2, r3
 8018dee:	d02d      	beq.n	8018e4c <rcl_validate_topic_name+0x10c>
 8018df0:	3101      	adds	r1, #1
 8018df2:	4288      	cmp	r0, r1
 8018df4:	d1d2      	bne.n	8018d9c <rcl_validate_topic_name+0x5c>
 8018df6:	2c00      	cmp	r4, #0
 8018df8:	d145      	bne.n	8018e86 <rcl_validate_topic_name+0x146>
 8018dfa:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8018dfe:	d04f      	beq.n	8018ea0 <rcl_validate_topic_name+0x160>
 8018e00:	4620      	mov	r0, r4
 8018e02:	2301      	movs	r3, #1
 8018e04:	e006      	b.n	8018e14 <rcl_validate_topic_name+0xd4>
 8018e06:	428b      	cmp	r3, r1
 8018e08:	f105 0501 	add.w	r5, r5, #1
 8018e0c:	f103 0201 	add.w	r2, r3, #1
 8018e10:	d236      	bcs.n	8018e80 <rcl_validate_topic_name+0x140>
 8018e12:	4613      	mov	r3, r2
 8018e14:	4580      	cmp	r8, r0
 8018e16:	f100 0001 	add.w	r0, r0, #1
 8018e1a:	d0f4      	beq.n	8018e06 <rcl_validate_topic_name+0xc6>
 8018e1c:	782a      	ldrb	r2, [r5, #0]
 8018e1e:	2a2f      	cmp	r2, #47	@ 0x2f
 8018e20:	d1f1      	bne.n	8018e06 <rcl_validate_topic_name+0xc6>
 8018e22:	786a      	ldrb	r2, [r5, #1]
 8018e24:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8018e28:	0754      	lsls	r4, r2, #29
 8018e2a:	d5ec      	bpl.n	8018e06 <rcl_validate_topic_name+0xc6>
 8018e2c:	2204      	movs	r2, #4
 8018e2e:	6032      	str	r2, [r6, #0]
 8018e30:	2f00      	cmp	r7, #0
 8018e32:	d0d1      	beq.n	8018dd8 <rcl_validate_topic_name+0x98>
 8018e34:	603b      	str	r3, [r7, #0]
 8018e36:	2000      	movs	r0, #0
 8018e38:	e7aa      	b.n	8018d90 <rcl_validate_topic_name+0x50>
 8018e3a:	200b      	movs	r0, #11
 8018e3c:	4770      	bx	lr
 8018e3e:	2304      	movs	r3, #4
 8018e40:	6033      	str	r3, [r6, #0]
 8018e42:	2f00      	cmp	r7, #0
 8018e44:	d1a2      	bne.n	8018d8c <rcl_validate_topic_name+0x4c>
 8018e46:	e7c7      	b.n	8018dd8 <rcl_validate_topic_name+0x98>
 8018e48:	200b      	movs	r0, #11
 8018e4a:	e7a1      	b.n	8018d90 <rcl_validate_topic_name+0x50>
 8018e4c:	2309      	movs	r3, #9
 8018e4e:	6033      	str	r3, [r6, #0]
 8018e50:	2f00      	cmp	r7, #0
 8018e52:	d1c0      	bne.n	8018dd6 <rcl_validate_topic_name+0x96>
 8018e54:	e7c0      	b.n	8018dd8 <rcl_validate_topic_name+0x98>
 8018e56:	2900      	cmp	r1, #0
 8018e58:	d0ca      	beq.n	8018df0 <rcl_validate_topic_name+0xb0>
 8018e5a:	2306      	movs	r3, #6
 8018e5c:	6033      	str	r3, [r6, #0]
 8018e5e:	2f00      	cmp	r7, #0
 8018e60:	d1b9      	bne.n	8018dd6 <rcl_validate_topic_name+0x96>
 8018e62:	e7b9      	b.n	8018dd8 <rcl_validate_topic_name+0x98>
 8018e64:	2c00      	cmp	r4, #0
 8018e66:	d0c3      	beq.n	8018df0 <rcl_validate_topic_name+0xb0>
 8018e68:	2308      	movs	r3, #8
 8018e6a:	6033      	str	r3, [r6, #0]
 8018e6c:	2f00      	cmp	r7, #0
 8018e6e:	d1b2      	bne.n	8018dd6 <rcl_validate_topic_name+0x96>
 8018e70:	e7b2      	b.n	8018dd8 <rcl_validate_topic_name+0x98>
 8018e72:	2c00      	cmp	r4, #0
 8018e74:	d1f8      	bne.n	8018e68 <rcl_validate_topic_name+0x128>
 8018e76:	460b      	mov	r3, r1
 8018e78:	2401      	movs	r4, #1
 8018e7a:	e7b9      	b.n	8018df0 <rcl_validate_topic_name+0xb0>
 8018e7c:	2400      	movs	r4, #0
 8018e7e:	e7b7      	b.n	8018df0 <rcl_validate_topic_name+0xb0>
 8018e80:	2000      	movs	r0, #0
 8018e82:	6030      	str	r0, [r6, #0]
 8018e84:	e784      	b.n	8018d90 <rcl_validate_topic_name+0x50>
 8018e86:	2205      	movs	r2, #5
 8018e88:	6032      	str	r2, [r6, #0]
 8018e8a:	2f00      	cmp	r7, #0
 8018e8c:	d1d2      	bne.n	8018e34 <rcl_validate_topic_name+0xf4>
 8018e8e:	e7a3      	b.n	8018dd8 <rcl_validate_topic_name+0x98>
 8018e90:	2c00      	cmp	r4, #0
 8018e92:	bf14      	ite	ne
 8018e94:	2308      	movne	r3, #8
 8018e96:	2303      	moveq	r3, #3
 8018e98:	6033      	str	r3, [r6, #0]
 8018e9a:	2f00      	cmp	r7, #0
 8018e9c:	d19b      	bne.n	8018dd6 <rcl_validate_topic_name+0x96>
 8018e9e:	e79b      	b.n	8018dd8 <rcl_validate_topic_name+0x98>
 8018ea0:	2301      	movs	r3, #1
 8018ea2:	e00a      	b.n	8018eba <rcl_validate_topic_name+0x17a>
 8018ea4:	2c01      	cmp	r4, #1
 8018ea6:	d013      	beq.n	8018ed0 <rcl_validate_topic_name+0x190>
 8018ea8:	4299      	cmp	r1, r3
 8018eaa:	f104 0401 	add.w	r4, r4, #1
 8018eae:	f105 0501 	add.w	r5, r5, #1
 8018eb2:	f103 0201 	add.w	r2, r3, #1
 8018eb6:	d9e3      	bls.n	8018e80 <rcl_validate_topic_name+0x140>
 8018eb8:	4613      	mov	r3, r2
 8018eba:	45a0      	cmp	r8, r4
 8018ebc:	d0f4      	beq.n	8018ea8 <rcl_validate_topic_name+0x168>
 8018ebe:	782a      	ldrb	r2, [r5, #0]
 8018ec0:	2a2f      	cmp	r2, #47	@ 0x2f
 8018ec2:	d1ef      	bne.n	8018ea4 <rcl_validate_topic_name+0x164>
 8018ec4:	786a      	ldrb	r2, [r5, #1]
 8018ec6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8018eca:	0752      	lsls	r2, r2, #29
 8018ecc:	d5ec      	bpl.n	8018ea8 <rcl_validate_topic_name+0x168>
 8018ece:	e7ad      	b.n	8018e2c <rcl_validate_topic_name+0xec>
 8018ed0:	2307      	movs	r3, #7
 8018ed2:	6033      	str	r3, [r6, #0]
 8018ed4:	2f00      	cmp	r7, #0
 8018ed6:	f43f af7f 	beq.w	8018dd8 <rcl_validate_topic_name+0x98>
 8018eda:	603c      	str	r4, [r7, #0]
 8018edc:	2000      	movs	r0, #0
 8018ede:	e757      	b.n	8018d90 <rcl_validate_topic_name+0x50>
 8018ee0:	0801bb1f 	.word	0x0801bb1f

08018ee4 <geometry_msgs__msg__Pose__init>:
 8018ee4:	b570      	push	{r4, r5, r6, lr}
 8018ee6:	4605      	mov	r5, r0
 8018ee8:	b1a8      	cbz	r0, 8018f16 <geometry_msgs__msg__Pose__init+0x32>
 8018eea:	f000 f8e5 	bl	80190b8 <geometry_msgs__msg__Point__init>
 8018eee:	4604      	mov	r4, r0
 8018ef0:	b140      	cbz	r0, 8018f04 <geometry_msgs__msg__Pose__init+0x20>
 8018ef2:	f105 0618 	add.w	r6, r5, #24
 8018ef6:	4630      	mov	r0, r6
 8018ef8:	f000 f826 	bl	8018f48 <geometry_msgs__msg__Quaternion__init>
 8018efc:	4604      	mov	r4, r0
 8018efe:	b168      	cbz	r0, 8018f1c <geometry_msgs__msg__Pose__init+0x38>
 8018f00:	4620      	mov	r0, r4
 8018f02:	bd70      	pop	{r4, r5, r6, pc}
 8018f04:	4628      	mov	r0, r5
 8018f06:	f000 f8db 	bl	80190c0 <geometry_msgs__msg__Point__fini>
 8018f0a:	f105 0018 	add.w	r0, r5, #24
 8018f0e:	f000 f82f 	bl	8018f70 <geometry_msgs__msg__Quaternion__fini>
 8018f12:	4620      	mov	r0, r4
 8018f14:	bd70      	pop	{r4, r5, r6, pc}
 8018f16:	4604      	mov	r4, r0
 8018f18:	4620      	mov	r0, r4
 8018f1a:	bd70      	pop	{r4, r5, r6, pc}
 8018f1c:	4628      	mov	r0, r5
 8018f1e:	f000 f8cf 	bl	80190c0 <geometry_msgs__msg__Point__fini>
 8018f22:	4630      	mov	r0, r6
 8018f24:	f000 f824 	bl	8018f70 <geometry_msgs__msg__Quaternion__fini>
 8018f28:	e7ea      	b.n	8018f00 <geometry_msgs__msg__Pose__init+0x1c>
 8018f2a:	bf00      	nop

08018f2c <geometry_msgs__msg__Pose__fini>:
 8018f2c:	b148      	cbz	r0, 8018f42 <geometry_msgs__msg__Pose__fini+0x16>
 8018f2e:	b510      	push	{r4, lr}
 8018f30:	4604      	mov	r4, r0
 8018f32:	f000 f8c5 	bl	80190c0 <geometry_msgs__msg__Point__fini>
 8018f36:	f104 0018 	add.w	r0, r4, #24
 8018f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018f3e:	f000 b817 	b.w	8018f70 <geometry_msgs__msg__Quaternion__fini>
 8018f42:	4770      	bx	lr
 8018f44:	0000      	movs	r0, r0
	...

08018f48 <geometry_msgs__msg__Quaternion__init>:
 8018f48:	b160      	cbz	r0, 8018f64 <geometry_msgs__msg__Quaternion__init+0x1c>
 8018f4a:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8018f68 <geometry_msgs__msg__Quaternion__init+0x20>
 8018f4e:	2200      	movs	r2, #0
 8018f50:	2300      	movs	r3, #0
 8018f52:	e9c0 2300 	strd	r2, r3, [r0]
 8018f56:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8018f5a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8018f5e:	ed80 7b06 	vstr	d7, [r0, #24]
 8018f62:	2001      	movs	r0, #1
 8018f64:	4770      	bx	lr
 8018f66:	bf00      	nop
 8018f68:	00000000 	.word	0x00000000
 8018f6c:	3ff00000 	.word	0x3ff00000

08018f70 <geometry_msgs__msg__Quaternion__fini>:
 8018f70:	4770      	bx	lr
 8018f72:	bf00      	nop

08018f74 <geometry_msgs__msg__Point__rosidl_typesupport_introspection_c__Point_init_function>:
 8018f74:	f000 b8a0 	b.w	80190b8 <geometry_msgs__msg__Point__init>

08018f78 <geometry_msgs__msg__Point__rosidl_typesupport_introspection_c__Point_fini_function>:
 8018f78:	f000 b8a2 	b.w	80190c0 <geometry_msgs__msg__Point__fini>

08018f7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point>:
 8018f7c:	4b04      	ldr	r3, [pc, #16]	@ (8018f90 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x14>)
 8018f7e:	681a      	ldr	r2, [r3, #0]
 8018f80:	b10a      	cbz	r2, 8018f86 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0xa>
 8018f82:	4803      	ldr	r0, [pc, #12]	@ (8018f90 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x14>)
 8018f84:	4770      	bx	lr
 8018f86:	4a03      	ldr	r2, [pc, #12]	@ (8018f94 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x18>)
 8018f88:	4801      	ldr	r0, [pc, #4]	@ (8018f90 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x14>)
 8018f8a:	6812      	ldr	r2, [r2, #0]
 8018f8c:	601a      	str	r2, [r3, #0]
 8018f8e:	4770      	bx	lr
 8018f90:	200008e0 	.word	0x200008e0
 8018f94:	20000324 	.word	0x20000324

08018f98 <get_serialized_size_geometry_msgs__msg__Point>:
 8018f98:	b1b8      	cbz	r0, 8018fca <get_serialized_size_geometry_msgs__msg__Point+0x32>
 8018f9a:	b538      	push	{r3, r4, r5, lr}
 8018f9c:	460d      	mov	r5, r1
 8018f9e:	4628      	mov	r0, r5
 8018fa0:	2108      	movs	r1, #8
 8018fa2:	f7f3 f817 	bl	800bfd4 <ucdr_alignment>
 8018fa6:	f105 0308 	add.w	r3, r5, #8
 8018faa:	181c      	adds	r4, r3, r0
 8018fac:	2108      	movs	r1, #8
 8018fae:	4620      	mov	r0, r4
 8018fb0:	f7f3 f810 	bl	800bfd4 <ucdr_alignment>
 8018fb4:	3008      	adds	r0, #8
 8018fb6:	4404      	add	r4, r0
 8018fb8:	2108      	movs	r1, #8
 8018fba:	4620      	mov	r0, r4
 8018fbc:	f7f3 f80a 	bl	800bfd4 <ucdr_alignment>
 8018fc0:	f1c5 0508 	rsb	r5, r5, #8
 8018fc4:	4428      	add	r0, r5
 8018fc6:	4420      	add	r0, r4
 8018fc8:	bd38      	pop	{r3, r4, r5, pc}
 8018fca:	4770      	bx	lr

08018fcc <_Point__cdr_deserialize>:
 8018fcc:	b538      	push	{r3, r4, r5, lr}
 8018fce:	460c      	mov	r4, r1
 8018fd0:	b171      	cbz	r1, 8018ff0 <_Point__cdr_deserialize+0x24>
 8018fd2:	4605      	mov	r5, r0
 8018fd4:	f7f2 fe12 	bl	800bbfc <ucdr_deserialize_double>
 8018fd8:	f104 0108 	add.w	r1, r4, #8
 8018fdc:	4628      	mov	r0, r5
 8018fde:	f7f2 fe0d 	bl	800bbfc <ucdr_deserialize_double>
 8018fe2:	f104 0110 	add.w	r1, r4, #16
 8018fe6:	4628      	mov	r0, r5
 8018fe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018fec:	f7f2 be06 	b.w	800bbfc <ucdr_deserialize_double>
 8018ff0:	4608      	mov	r0, r1
 8018ff2:	bd38      	pop	{r3, r4, r5, pc}

08018ff4 <_Point__cdr_serialize>:
 8018ff4:	b198      	cbz	r0, 801901e <_Point__cdr_serialize+0x2a>
 8018ff6:	b538      	push	{r3, r4, r5, lr}
 8018ff8:	ed90 0b00 	vldr	d0, [r0]
 8018ffc:	460d      	mov	r5, r1
 8018ffe:	4604      	mov	r4, r0
 8019000:	4608      	mov	r0, r1
 8019002:	f7f2 fc59 	bl	800b8b8 <ucdr_serialize_double>
 8019006:	ed94 0b02 	vldr	d0, [r4, #8]
 801900a:	4628      	mov	r0, r5
 801900c:	f7f2 fc54 	bl	800b8b8 <ucdr_serialize_double>
 8019010:	ed94 0b04 	vldr	d0, [r4, #16]
 8019014:	4628      	mov	r0, r5
 8019016:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801901a:	f7f2 bc4d 	b.w	800b8b8 <ucdr_serialize_double>
 801901e:	4770      	bx	lr

08019020 <_Point__get_serialized_size>:
 8019020:	b198      	cbz	r0, 801904a <_Point__get_serialized_size+0x2a>
 8019022:	b510      	push	{r4, lr}
 8019024:	2108      	movs	r1, #8
 8019026:	2000      	movs	r0, #0
 8019028:	f7f2 ffd4 	bl	800bfd4 <ucdr_alignment>
 801902c:	f100 0408 	add.w	r4, r0, #8
 8019030:	2108      	movs	r1, #8
 8019032:	4620      	mov	r0, r4
 8019034:	f7f2 ffce 	bl	800bfd4 <ucdr_alignment>
 8019038:	3008      	adds	r0, #8
 801903a:	4404      	add	r4, r0
 801903c:	2108      	movs	r1, #8
 801903e:	4620      	mov	r0, r4
 8019040:	f7f2 ffc8 	bl	800bfd4 <ucdr_alignment>
 8019044:	3008      	adds	r0, #8
 8019046:	4420      	add	r0, r4
 8019048:	bd10      	pop	{r4, pc}
 801904a:	4770      	bx	lr

0801904c <_Point__max_serialized_size>:
 801904c:	b538      	push	{r3, r4, r5, lr}
 801904e:	2108      	movs	r1, #8
 8019050:	2000      	movs	r0, #0
 8019052:	f7f2 ffbf 	bl	800bfd4 <ucdr_alignment>
 8019056:	f100 0508 	add.w	r5, r0, #8
 801905a:	2108      	movs	r1, #8
 801905c:	4628      	mov	r0, r5
 801905e:	f7f2 ffb9 	bl	800bfd4 <ucdr_alignment>
 8019062:	f100 0408 	add.w	r4, r0, #8
 8019066:	442c      	add	r4, r5
 8019068:	2108      	movs	r1, #8
 801906a:	4620      	mov	r0, r4
 801906c:	f7f2 ffb2 	bl	800bfd4 <ucdr_alignment>
 8019070:	3008      	adds	r0, #8
 8019072:	4420      	add	r0, r4
 8019074:	bd38      	pop	{r3, r4, r5, pc}
 8019076:	bf00      	nop

08019078 <max_serialized_size_geometry_msgs__msg__Point>:
 8019078:	b570      	push	{r4, r5, r6, lr}
 801907a:	2301      	movs	r3, #1
 801907c:	460c      	mov	r4, r1
 801907e:	7003      	strb	r3, [r0, #0]
 8019080:	2108      	movs	r1, #8
 8019082:	4620      	mov	r0, r4
 8019084:	f7f2 ffa6 	bl	800bfd4 <ucdr_alignment>
 8019088:	f104 0508 	add.w	r5, r4, #8
 801908c:	1946      	adds	r6, r0, r5
 801908e:	2108      	movs	r1, #8
 8019090:	4630      	mov	r0, r6
 8019092:	f7f2 ff9f 	bl	800bfd4 <ucdr_alignment>
 8019096:	f100 0508 	add.w	r5, r0, #8
 801909a:	4435      	add	r5, r6
 801909c:	2108      	movs	r1, #8
 801909e:	4628      	mov	r0, r5
 80190a0:	f7f2 ff98 	bl	800bfd4 <ucdr_alignment>
 80190a4:	f1c4 0408 	rsb	r4, r4, #8
 80190a8:	4420      	add	r0, r4
 80190aa:	4428      	add	r0, r5
 80190ac:	bd70      	pop	{r4, r5, r6, pc}
 80190ae:	bf00      	nop

080190b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>:
 80190b0:	4800      	ldr	r0, [pc, #0]	@ (80190b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x4>)
 80190b2:	4770      	bx	lr
 80190b4:	200008ec 	.word	0x200008ec

080190b8 <geometry_msgs__msg__Point__init>:
 80190b8:	3800      	subs	r0, #0
 80190ba:	bf18      	it	ne
 80190bc:	2001      	movne	r0, #1
 80190be:	4770      	bx	lr

080190c0 <geometry_msgs__msg__Point__fini>:
 80190c0:	4770      	bx	lr
 80190c2:	bf00      	nop

080190c4 <calloc>:
 80190c4:	4b02      	ldr	r3, [pc, #8]	@ (80190d0 <calloc+0xc>)
 80190c6:	460a      	mov	r2, r1
 80190c8:	4601      	mov	r1, r0
 80190ca:	6818      	ldr	r0, [r3, #0]
 80190cc:	f000 b802 	b.w	80190d4 <_calloc_r>
 80190d0:	20000920 	.word	0x20000920

080190d4 <_calloc_r>:
 80190d4:	b570      	push	{r4, r5, r6, lr}
 80190d6:	fba1 5402 	umull	r5, r4, r1, r2
 80190da:	b934      	cbnz	r4, 80190ea <_calloc_r+0x16>
 80190dc:	4629      	mov	r1, r5
 80190de:	f000 f899 	bl	8019214 <_malloc_r>
 80190e2:	4606      	mov	r6, r0
 80190e4:	b928      	cbnz	r0, 80190f2 <_calloc_r+0x1e>
 80190e6:	4630      	mov	r0, r6
 80190e8:	bd70      	pop	{r4, r5, r6, pc}
 80190ea:	220c      	movs	r2, #12
 80190ec:	6002      	str	r2, [r0, #0]
 80190ee:	2600      	movs	r6, #0
 80190f0:	e7f9      	b.n	80190e6 <_calloc_r+0x12>
 80190f2:	462a      	mov	r2, r5
 80190f4:	4621      	mov	r1, r4
 80190f6:	f000 fcd5 	bl	8019aa4 <memset>
 80190fa:	e7f4      	b.n	80190e6 <_calloc_r+0x12>

080190fc <exit>:
 80190fc:	b508      	push	{r3, lr}
 80190fe:	4b06      	ldr	r3, [pc, #24]	@ (8019118 <exit+0x1c>)
 8019100:	4604      	mov	r4, r0
 8019102:	b113      	cbz	r3, 801910a <exit+0xe>
 8019104:	2100      	movs	r1, #0
 8019106:	f3af 8000 	nop.w
 801910a:	4b04      	ldr	r3, [pc, #16]	@ (801911c <exit+0x20>)
 801910c:	681b      	ldr	r3, [r3, #0]
 801910e:	b103      	cbz	r3, 8019112 <exit+0x16>
 8019110:	4798      	blx	r3
 8019112:	4620      	mov	r0, r4
 8019114:	f7ea f90e 	bl	8003334 <_exit>
 8019118:	00000000 	.word	0x00000000
 801911c:	20011bbc 	.word	0x20011bbc

08019120 <getenv>:
 8019120:	b507      	push	{r0, r1, r2, lr}
 8019122:	4b04      	ldr	r3, [pc, #16]	@ (8019134 <getenv+0x14>)
 8019124:	4601      	mov	r1, r0
 8019126:	aa01      	add	r2, sp, #4
 8019128:	6818      	ldr	r0, [r3, #0]
 801912a:	f000 f805 	bl	8019138 <_findenv_r>
 801912e:	b003      	add	sp, #12
 8019130:	f85d fb04 	ldr.w	pc, [sp], #4
 8019134:	20000920 	.word	0x20000920

08019138 <_findenv_r>:
 8019138:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801913c:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 80191ac <_findenv_r+0x74>
 8019140:	4606      	mov	r6, r0
 8019142:	4689      	mov	r9, r1
 8019144:	4617      	mov	r7, r2
 8019146:	f000 fe01 	bl	8019d4c <__env_lock>
 801914a:	f8da 4000 	ldr.w	r4, [sl]
 801914e:	b134      	cbz	r4, 801915e <_findenv_r+0x26>
 8019150:	464b      	mov	r3, r9
 8019152:	4698      	mov	r8, r3
 8019154:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019158:	b13a      	cbz	r2, 801916a <_findenv_r+0x32>
 801915a:	2a3d      	cmp	r2, #61	@ 0x3d
 801915c:	d1f9      	bne.n	8019152 <_findenv_r+0x1a>
 801915e:	4630      	mov	r0, r6
 8019160:	f000 fdfa 	bl	8019d58 <__env_unlock>
 8019164:	2000      	movs	r0, #0
 8019166:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801916a:	eba8 0809 	sub.w	r8, r8, r9
 801916e:	46a3      	mov	fp, r4
 8019170:	f854 0b04 	ldr.w	r0, [r4], #4
 8019174:	2800      	cmp	r0, #0
 8019176:	d0f2      	beq.n	801915e <_findenv_r+0x26>
 8019178:	4642      	mov	r2, r8
 801917a:	4649      	mov	r1, r9
 801917c:	f000 fca7 	bl	8019ace <strncmp>
 8019180:	2800      	cmp	r0, #0
 8019182:	d1f4      	bne.n	801916e <_findenv_r+0x36>
 8019184:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8019188:	eb03 0508 	add.w	r5, r3, r8
 801918c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8019190:	2b3d      	cmp	r3, #61	@ 0x3d
 8019192:	d1ec      	bne.n	801916e <_findenv_r+0x36>
 8019194:	f8da 3000 	ldr.w	r3, [sl]
 8019198:	ebab 0303 	sub.w	r3, fp, r3
 801919c:	109b      	asrs	r3, r3, #2
 801919e:	4630      	mov	r0, r6
 80191a0:	603b      	str	r3, [r7, #0]
 80191a2:	f000 fdd9 	bl	8019d58 <__env_unlock>
 80191a6:	1c68      	adds	r0, r5, #1
 80191a8:	e7dd      	b.n	8019166 <_findenv_r+0x2e>
 80191aa:	bf00      	nop
 80191ac:	20000018 	.word	0x20000018

080191b0 <malloc>:
 80191b0:	4b02      	ldr	r3, [pc, #8]	@ (80191bc <malloc+0xc>)
 80191b2:	4601      	mov	r1, r0
 80191b4:	6818      	ldr	r0, [r3, #0]
 80191b6:	f000 b82d 	b.w	8019214 <_malloc_r>
 80191ba:	bf00      	nop
 80191bc:	20000920 	.word	0x20000920

080191c0 <free>:
 80191c0:	4b02      	ldr	r3, [pc, #8]	@ (80191cc <free+0xc>)
 80191c2:	4601      	mov	r1, r0
 80191c4:	6818      	ldr	r0, [r3, #0]
 80191c6:	f000 bdcd 	b.w	8019d64 <_free_r>
 80191ca:	bf00      	nop
 80191cc:	20000920 	.word	0x20000920

080191d0 <sbrk_aligned>:
 80191d0:	b570      	push	{r4, r5, r6, lr}
 80191d2:	4e0f      	ldr	r6, [pc, #60]	@ (8019210 <sbrk_aligned+0x40>)
 80191d4:	460c      	mov	r4, r1
 80191d6:	6831      	ldr	r1, [r6, #0]
 80191d8:	4605      	mov	r5, r0
 80191da:	b911      	cbnz	r1, 80191e2 <sbrk_aligned+0x12>
 80191dc:	f000 fd32 	bl	8019c44 <_sbrk_r>
 80191e0:	6030      	str	r0, [r6, #0]
 80191e2:	4621      	mov	r1, r4
 80191e4:	4628      	mov	r0, r5
 80191e6:	f000 fd2d 	bl	8019c44 <_sbrk_r>
 80191ea:	1c43      	adds	r3, r0, #1
 80191ec:	d103      	bne.n	80191f6 <sbrk_aligned+0x26>
 80191ee:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80191f2:	4620      	mov	r0, r4
 80191f4:	bd70      	pop	{r4, r5, r6, pc}
 80191f6:	1cc4      	adds	r4, r0, #3
 80191f8:	f024 0403 	bic.w	r4, r4, #3
 80191fc:	42a0      	cmp	r0, r4
 80191fe:	d0f8      	beq.n	80191f2 <sbrk_aligned+0x22>
 8019200:	1a21      	subs	r1, r4, r0
 8019202:	4628      	mov	r0, r5
 8019204:	f000 fd1e 	bl	8019c44 <_sbrk_r>
 8019208:	3001      	adds	r0, #1
 801920a:	d1f2      	bne.n	80191f2 <sbrk_aligned+0x22>
 801920c:	e7ef      	b.n	80191ee <sbrk_aligned+0x1e>
 801920e:	bf00      	nop
 8019210:	20011a7c 	.word	0x20011a7c

08019214 <_malloc_r>:
 8019214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019218:	1ccd      	adds	r5, r1, #3
 801921a:	f025 0503 	bic.w	r5, r5, #3
 801921e:	3508      	adds	r5, #8
 8019220:	2d0c      	cmp	r5, #12
 8019222:	bf38      	it	cc
 8019224:	250c      	movcc	r5, #12
 8019226:	2d00      	cmp	r5, #0
 8019228:	4606      	mov	r6, r0
 801922a:	db01      	blt.n	8019230 <_malloc_r+0x1c>
 801922c:	42a9      	cmp	r1, r5
 801922e:	d904      	bls.n	801923a <_malloc_r+0x26>
 8019230:	230c      	movs	r3, #12
 8019232:	6033      	str	r3, [r6, #0]
 8019234:	2000      	movs	r0, #0
 8019236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801923a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8019310 <_malloc_r+0xfc>
 801923e:	f000 f869 	bl	8019314 <__malloc_lock>
 8019242:	f8d8 3000 	ldr.w	r3, [r8]
 8019246:	461c      	mov	r4, r3
 8019248:	bb44      	cbnz	r4, 801929c <_malloc_r+0x88>
 801924a:	4629      	mov	r1, r5
 801924c:	4630      	mov	r0, r6
 801924e:	f7ff ffbf 	bl	80191d0 <sbrk_aligned>
 8019252:	1c43      	adds	r3, r0, #1
 8019254:	4604      	mov	r4, r0
 8019256:	d158      	bne.n	801930a <_malloc_r+0xf6>
 8019258:	f8d8 4000 	ldr.w	r4, [r8]
 801925c:	4627      	mov	r7, r4
 801925e:	2f00      	cmp	r7, #0
 8019260:	d143      	bne.n	80192ea <_malloc_r+0xd6>
 8019262:	2c00      	cmp	r4, #0
 8019264:	d04b      	beq.n	80192fe <_malloc_r+0xea>
 8019266:	6823      	ldr	r3, [r4, #0]
 8019268:	4639      	mov	r1, r7
 801926a:	4630      	mov	r0, r6
 801926c:	eb04 0903 	add.w	r9, r4, r3
 8019270:	f000 fce8 	bl	8019c44 <_sbrk_r>
 8019274:	4581      	cmp	r9, r0
 8019276:	d142      	bne.n	80192fe <_malloc_r+0xea>
 8019278:	6821      	ldr	r1, [r4, #0]
 801927a:	1a6d      	subs	r5, r5, r1
 801927c:	4629      	mov	r1, r5
 801927e:	4630      	mov	r0, r6
 8019280:	f7ff ffa6 	bl	80191d0 <sbrk_aligned>
 8019284:	3001      	adds	r0, #1
 8019286:	d03a      	beq.n	80192fe <_malloc_r+0xea>
 8019288:	6823      	ldr	r3, [r4, #0]
 801928a:	442b      	add	r3, r5
 801928c:	6023      	str	r3, [r4, #0]
 801928e:	f8d8 3000 	ldr.w	r3, [r8]
 8019292:	685a      	ldr	r2, [r3, #4]
 8019294:	bb62      	cbnz	r2, 80192f0 <_malloc_r+0xdc>
 8019296:	f8c8 7000 	str.w	r7, [r8]
 801929a:	e00f      	b.n	80192bc <_malloc_r+0xa8>
 801929c:	6822      	ldr	r2, [r4, #0]
 801929e:	1b52      	subs	r2, r2, r5
 80192a0:	d420      	bmi.n	80192e4 <_malloc_r+0xd0>
 80192a2:	2a0b      	cmp	r2, #11
 80192a4:	d917      	bls.n	80192d6 <_malloc_r+0xc2>
 80192a6:	1961      	adds	r1, r4, r5
 80192a8:	42a3      	cmp	r3, r4
 80192aa:	6025      	str	r5, [r4, #0]
 80192ac:	bf18      	it	ne
 80192ae:	6059      	strne	r1, [r3, #4]
 80192b0:	6863      	ldr	r3, [r4, #4]
 80192b2:	bf08      	it	eq
 80192b4:	f8c8 1000 	streq.w	r1, [r8]
 80192b8:	5162      	str	r2, [r4, r5]
 80192ba:	604b      	str	r3, [r1, #4]
 80192bc:	4630      	mov	r0, r6
 80192be:	f000 f82f 	bl	8019320 <__malloc_unlock>
 80192c2:	f104 000b 	add.w	r0, r4, #11
 80192c6:	1d23      	adds	r3, r4, #4
 80192c8:	f020 0007 	bic.w	r0, r0, #7
 80192cc:	1ac2      	subs	r2, r0, r3
 80192ce:	bf1c      	itt	ne
 80192d0:	1a1b      	subne	r3, r3, r0
 80192d2:	50a3      	strne	r3, [r4, r2]
 80192d4:	e7af      	b.n	8019236 <_malloc_r+0x22>
 80192d6:	6862      	ldr	r2, [r4, #4]
 80192d8:	42a3      	cmp	r3, r4
 80192da:	bf0c      	ite	eq
 80192dc:	f8c8 2000 	streq.w	r2, [r8]
 80192e0:	605a      	strne	r2, [r3, #4]
 80192e2:	e7eb      	b.n	80192bc <_malloc_r+0xa8>
 80192e4:	4623      	mov	r3, r4
 80192e6:	6864      	ldr	r4, [r4, #4]
 80192e8:	e7ae      	b.n	8019248 <_malloc_r+0x34>
 80192ea:	463c      	mov	r4, r7
 80192ec:	687f      	ldr	r7, [r7, #4]
 80192ee:	e7b6      	b.n	801925e <_malloc_r+0x4a>
 80192f0:	461a      	mov	r2, r3
 80192f2:	685b      	ldr	r3, [r3, #4]
 80192f4:	42a3      	cmp	r3, r4
 80192f6:	d1fb      	bne.n	80192f0 <_malloc_r+0xdc>
 80192f8:	2300      	movs	r3, #0
 80192fa:	6053      	str	r3, [r2, #4]
 80192fc:	e7de      	b.n	80192bc <_malloc_r+0xa8>
 80192fe:	230c      	movs	r3, #12
 8019300:	6033      	str	r3, [r6, #0]
 8019302:	4630      	mov	r0, r6
 8019304:	f000 f80c 	bl	8019320 <__malloc_unlock>
 8019308:	e794      	b.n	8019234 <_malloc_r+0x20>
 801930a:	6005      	str	r5, [r0, #0]
 801930c:	e7d6      	b.n	80192bc <_malloc_r+0xa8>
 801930e:	bf00      	nop
 8019310:	20011a80 	.word	0x20011a80

08019314 <__malloc_lock>:
 8019314:	4801      	ldr	r0, [pc, #4]	@ (801931c <__malloc_lock+0x8>)
 8019316:	f000 bce2 	b.w	8019cde <__retarget_lock_acquire_recursive>
 801931a:	bf00      	nop
 801931c:	20011bc5 	.word	0x20011bc5

08019320 <__malloc_unlock>:
 8019320:	4801      	ldr	r0, [pc, #4]	@ (8019328 <__malloc_unlock+0x8>)
 8019322:	f000 bcdd 	b.w	8019ce0 <__retarget_lock_release_recursive>
 8019326:	bf00      	nop
 8019328:	20011bc5 	.word	0x20011bc5

0801932c <srand>:
 801932c:	b538      	push	{r3, r4, r5, lr}
 801932e:	4b10      	ldr	r3, [pc, #64]	@ (8019370 <srand+0x44>)
 8019330:	681d      	ldr	r5, [r3, #0]
 8019332:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8019334:	4604      	mov	r4, r0
 8019336:	b9b3      	cbnz	r3, 8019366 <srand+0x3a>
 8019338:	2018      	movs	r0, #24
 801933a:	f7ff ff39 	bl	80191b0 <malloc>
 801933e:	4602      	mov	r2, r0
 8019340:	6328      	str	r0, [r5, #48]	@ 0x30
 8019342:	b920      	cbnz	r0, 801934e <srand+0x22>
 8019344:	4b0b      	ldr	r3, [pc, #44]	@ (8019374 <srand+0x48>)
 8019346:	480c      	ldr	r0, [pc, #48]	@ (8019378 <srand+0x4c>)
 8019348:	2146      	movs	r1, #70	@ 0x46
 801934a:	f000 fce1 	bl	8019d10 <__assert_func>
 801934e:	490b      	ldr	r1, [pc, #44]	@ (801937c <srand+0x50>)
 8019350:	4b0b      	ldr	r3, [pc, #44]	@ (8019380 <srand+0x54>)
 8019352:	e9c0 1300 	strd	r1, r3, [r0]
 8019356:	4b0b      	ldr	r3, [pc, #44]	@ (8019384 <srand+0x58>)
 8019358:	6083      	str	r3, [r0, #8]
 801935a:	230b      	movs	r3, #11
 801935c:	8183      	strh	r3, [r0, #12]
 801935e:	2100      	movs	r1, #0
 8019360:	2001      	movs	r0, #1
 8019362:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019366:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8019368:	2200      	movs	r2, #0
 801936a:	611c      	str	r4, [r3, #16]
 801936c:	615a      	str	r2, [r3, #20]
 801936e:	bd38      	pop	{r3, r4, r5, pc}
 8019370:	20000920 	.word	0x20000920
 8019374:	0801ba40 	.word	0x0801ba40
 8019378:	0801ba57 	.word	0x0801ba57
 801937c:	abcd330e 	.word	0xabcd330e
 8019380:	e66d1234 	.word	0xe66d1234
 8019384:	0005deec 	.word	0x0005deec

08019388 <rand>:
 8019388:	4b16      	ldr	r3, [pc, #88]	@ (80193e4 <rand+0x5c>)
 801938a:	b510      	push	{r4, lr}
 801938c:	681c      	ldr	r4, [r3, #0]
 801938e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019390:	b9b3      	cbnz	r3, 80193c0 <rand+0x38>
 8019392:	2018      	movs	r0, #24
 8019394:	f7ff ff0c 	bl	80191b0 <malloc>
 8019398:	4602      	mov	r2, r0
 801939a:	6320      	str	r0, [r4, #48]	@ 0x30
 801939c:	b920      	cbnz	r0, 80193a8 <rand+0x20>
 801939e:	4b12      	ldr	r3, [pc, #72]	@ (80193e8 <rand+0x60>)
 80193a0:	4812      	ldr	r0, [pc, #72]	@ (80193ec <rand+0x64>)
 80193a2:	2152      	movs	r1, #82	@ 0x52
 80193a4:	f000 fcb4 	bl	8019d10 <__assert_func>
 80193a8:	4911      	ldr	r1, [pc, #68]	@ (80193f0 <rand+0x68>)
 80193aa:	4b12      	ldr	r3, [pc, #72]	@ (80193f4 <rand+0x6c>)
 80193ac:	e9c0 1300 	strd	r1, r3, [r0]
 80193b0:	4b11      	ldr	r3, [pc, #68]	@ (80193f8 <rand+0x70>)
 80193b2:	6083      	str	r3, [r0, #8]
 80193b4:	230b      	movs	r3, #11
 80193b6:	8183      	strh	r3, [r0, #12]
 80193b8:	2100      	movs	r1, #0
 80193ba:	2001      	movs	r0, #1
 80193bc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80193c0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80193c2:	480e      	ldr	r0, [pc, #56]	@ (80193fc <rand+0x74>)
 80193c4:	690b      	ldr	r3, [r1, #16]
 80193c6:	694c      	ldr	r4, [r1, #20]
 80193c8:	4a0d      	ldr	r2, [pc, #52]	@ (8019400 <rand+0x78>)
 80193ca:	4358      	muls	r0, r3
 80193cc:	fb02 0004 	mla	r0, r2, r4, r0
 80193d0:	fba3 3202 	umull	r3, r2, r3, r2
 80193d4:	3301      	adds	r3, #1
 80193d6:	eb40 0002 	adc.w	r0, r0, r2
 80193da:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80193de:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80193e2:	bd10      	pop	{r4, pc}
 80193e4:	20000920 	.word	0x20000920
 80193e8:	0801ba40 	.word	0x0801ba40
 80193ec:	0801ba57 	.word	0x0801ba57
 80193f0:	abcd330e 	.word	0xabcd330e
 80193f4:	e66d1234 	.word	0xe66d1234
 80193f8:	0005deec 	.word	0x0005deec
 80193fc:	5851f42d 	.word	0x5851f42d
 8019400:	4c957f2d 	.word	0x4c957f2d

08019404 <realloc>:
 8019404:	4b02      	ldr	r3, [pc, #8]	@ (8019410 <realloc+0xc>)
 8019406:	460a      	mov	r2, r1
 8019408:	4601      	mov	r1, r0
 801940a:	6818      	ldr	r0, [r3, #0]
 801940c:	f000 b802 	b.w	8019414 <_realloc_r>
 8019410:	20000920 	.word	0x20000920

08019414 <_realloc_r>:
 8019414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019418:	4607      	mov	r7, r0
 801941a:	4614      	mov	r4, r2
 801941c:	460d      	mov	r5, r1
 801941e:	b921      	cbnz	r1, 801942a <_realloc_r+0x16>
 8019420:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019424:	4611      	mov	r1, r2
 8019426:	f7ff bef5 	b.w	8019214 <_malloc_r>
 801942a:	b92a      	cbnz	r2, 8019438 <_realloc_r+0x24>
 801942c:	f000 fc9a 	bl	8019d64 <_free_r>
 8019430:	4625      	mov	r5, r4
 8019432:	4628      	mov	r0, r5
 8019434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019438:	f000 fcde 	bl	8019df8 <_malloc_usable_size_r>
 801943c:	4284      	cmp	r4, r0
 801943e:	4606      	mov	r6, r0
 8019440:	d802      	bhi.n	8019448 <_realloc_r+0x34>
 8019442:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8019446:	d8f4      	bhi.n	8019432 <_realloc_r+0x1e>
 8019448:	4621      	mov	r1, r4
 801944a:	4638      	mov	r0, r7
 801944c:	f7ff fee2 	bl	8019214 <_malloc_r>
 8019450:	4680      	mov	r8, r0
 8019452:	b908      	cbnz	r0, 8019458 <_realloc_r+0x44>
 8019454:	4645      	mov	r5, r8
 8019456:	e7ec      	b.n	8019432 <_realloc_r+0x1e>
 8019458:	42b4      	cmp	r4, r6
 801945a:	4622      	mov	r2, r4
 801945c:	4629      	mov	r1, r5
 801945e:	bf28      	it	cs
 8019460:	4632      	movcs	r2, r6
 8019462:	f000 fc46 	bl	8019cf2 <memcpy>
 8019466:	4629      	mov	r1, r5
 8019468:	4638      	mov	r0, r7
 801946a:	f000 fc7b 	bl	8019d64 <_free_r>
 801946e:	e7f1      	b.n	8019454 <_realloc_r+0x40>

08019470 <_strtoul_l.isra.0>:
 8019470:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019474:	4e34      	ldr	r6, [pc, #208]	@ (8019548 <_strtoul_l.isra.0+0xd8>)
 8019476:	4686      	mov	lr, r0
 8019478:	460d      	mov	r5, r1
 801947a:	4628      	mov	r0, r5
 801947c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019480:	5d37      	ldrb	r7, [r6, r4]
 8019482:	f017 0708 	ands.w	r7, r7, #8
 8019486:	d1f8      	bne.n	801947a <_strtoul_l.isra.0+0xa>
 8019488:	2c2d      	cmp	r4, #45	@ 0x2d
 801948a:	d110      	bne.n	80194ae <_strtoul_l.isra.0+0x3e>
 801948c:	782c      	ldrb	r4, [r5, #0]
 801948e:	2701      	movs	r7, #1
 8019490:	1c85      	adds	r5, r0, #2
 8019492:	f033 0010 	bics.w	r0, r3, #16
 8019496:	d115      	bne.n	80194c4 <_strtoul_l.isra.0+0x54>
 8019498:	2c30      	cmp	r4, #48	@ 0x30
 801949a:	d10d      	bne.n	80194b8 <_strtoul_l.isra.0+0x48>
 801949c:	7828      	ldrb	r0, [r5, #0]
 801949e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80194a2:	2858      	cmp	r0, #88	@ 0x58
 80194a4:	d108      	bne.n	80194b8 <_strtoul_l.isra.0+0x48>
 80194a6:	786c      	ldrb	r4, [r5, #1]
 80194a8:	3502      	adds	r5, #2
 80194aa:	2310      	movs	r3, #16
 80194ac:	e00a      	b.n	80194c4 <_strtoul_l.isra.0+0x54>
 80194ae:	2c2b      	cmp	r4, #43	@ 0x2b
 80194b0:	bf04      	itt	eq
 80194b2:	782c      	ldrbeq	r4, [r5, #0]
 80194b4:	1c85      	addeq	r5, r0, #2
 80194b6:	e7ec      	b.n	8019492 <_strtoul_l.isra.0+0x22>
 80194b8:	2b00      	cmp	r3, #0
 80194ba:	d1f6      	bne.n	80194aa <_strtoul_l.isra.0+0x3a>
 80194bc:	2c30      	cmp	r4, #48	@ 0x30
 80194be:	bf14      	ite	ne
 80194c0:	230a      	movne	r3, #10
 80194c2:	2308      	moveq	r3, #8
 80194c4:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80194c8:	2600      	movs	r6, #0
 80194ca:	fbb8 f8f3 	udiv	r8, r8, r3
 80194ce:	fb03 f908 	mul.w	r9, r3, r8
 80194d2:	ea6f 0909 	mvn.w	r9, r9
 80194d6:	4630      	mov	r0, r6
 80194d8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80194dc:	f1bc 0f09 	cmp.w	ip, #9
 80194e0:	d810      	bhi.n	8019504 <_strtoul_l.isra.0+0x94>
 80194e2:	4664      	mov	r4, ip
 80194e4:	42a3      	cmp	r3, r4
 80194e6:	dd1e      	ble.n	8019526 <_strtoul_l.isra.0+0xb6>
 80194e8:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80194ec:	d007      	beq.n	80194fe <_strtoul_l.isra.0+0x8e>
 80194ee:	4580      	cmp	r8, r0
 80194f0:	d316      	bcc.n	8019520 <_strtoul_l.isra.0+0xb0>
 80194f2:	d101      	bne.n	80194f8 <_strtoul_l.isra.0+0x88>
 80194f4:	45a1      	cmp	r9, r4
 80194f6:	db13      	blt.n	8019520 <_strtoul_l.isra.0+0xb0>
 80194f8:	fb00 4003 	mla	r0, r0, r3, r4
 80194fc:	2601      	movs	r6, #1
 80194fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019502:	e7e9      	b.n	80194d8 <_strtoul_l.isra.0+0x68>
 8019504:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8019508:	f1bc 0f19 	cmp.w	ip, #25
 801950c:	d801      	bhi.n	8019512 <_strtoul_l.isra.0+0xa2>
 801950e:	3c37      	subs	r4, #55	@ 0x37
 8019510:	e7e8      	b.n	80194e4 <_strtoul_l.isra.0+0x74>
 8019512:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8019516:	f1bc 0f19 	cmp.w	ip, #25
 801951a:	d804      	bhi.n	8019526 <_strtoul_l.isra.0+0xb6>
 801951c:	3c57      	subs	r4, #87	@ 0x57
 801951e:	e7e1      	b.n	80194e4 <_strtoul_l.isra.0+0x74>
 8019520:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8019524:	e7eb      	b.n	80194fe <_strtoul_l.isra.0+0x8e>
 8019526:	1c73      	adds	r3, r6, #1
 8019528:	d106      	bne.n	8019538 <_strtoul_l.isra.0+0xc8>
 801952a:	2322      	movs	r3, #34	@ 0x22
 801952c:	f8ce 3000 	str.w	r3, [lr]
 8019530:	4630      	mov	r0, r6
 8019532:	b932      	cbnz	r2, 8019542 <_strtoul_l.isra.0+0xd2>
 8019534:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019538:	b107      	cbz	r7, 801953c <_strtoul_l.isra.0+0xcc>
 801953a:	4240      	negs	r0, r0
 801953c:	2a00      	cmp	r2, #0
 801953e:	d0f9      	beq.n	8019534 <_strtoul_l.isra.0+0xc4>
 8019540:	b106      	cbz	r6, 8019544 <_strtoul_l.isra.0+0xd4>
 8019542:	1e69      	subs	r1, r5, #1
 8019544:	6011      	str	r1, [r2, #0]
 8019546:	e7f5      	b.n	8019534 <_strtoul_l.isra.0+0xc4>
 8019548:	0801bb1f 	.word	0x0801bb1f

0801954c <strtoul>:
 801954c:	4613      	mov	r3, r2
 801954e:	460a      	mov	r2, r1
 8019550:	4601      	mov	r1, r0
 8019552:	4802      	ldr	r0, [pc, #8]	@ (801955c <strtoul+0x10>)
 8019554:	6800      	ldr	r0, [r0, #0]
 8019556:	f7ff bf8b 	b.w	8019470 <_strtoul_l.isra.0>
 801955a:	bf00      	nop
 801955c:	20000920 	.word	0x20000920

08019560 <std>:
 8019560:	2300      	movs	r3, #0
 8019562:	b510      	push	{r4, lr}
 8019564:	4604      	mov	r4, r0
 8019566:	e9c0 3300 	strd	r3, r3, [r0]
 801956a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801956e:	6083      	str	r3, [r0, #8]
 8019570:	8181      	strh	r1, [r0, #12]
 8019572:	6643      	str	r3, [r0, #100]	@ 0x64
 8019574:	81c2      	strh	r2, [r0, #14]
 8019576:	6183      	str	r3, [r0, #24]
 8019578:	4619      	mov	r1, r3
 801957a:	2208      	movs	r2, #8
 801957c:	305c      	adds	r0, #92	@ 0x5c
 801957e:	f000 fa91 	bl	8019aa4 <memset>
 8019582:	4b0d      	ldr	r3, [pc, #52]	@ (80195b8 <std+0x58>)
 8019584:	6263      	str	r3, [r4, #36]	@ 0x24
 8019586:	4b0d      	ldr	r3, [pc, #52]	@ (80195bc <std+0x5c>)
 8019588:	62a3      	str	r3, [r4, #40]	@ 0x28
 801958a:	4b0d      	ldr	r3, [pc, #52]	@ (80195c0 <std+0x60>)
 801958c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801958e:	4b0d      	ldr	r3, [pc, #52]	@ (80195c4 <std+0x64>)
 8019590:	6323      	str	r3, [r4, #48]	@ 0x30
 8019592:	4b0d      	ldr	r3, [pc, #52]	@ (80195c8 <std+0x68>)
 8019594:	6224      	str	r4, [r4, #32]
 8019596:	429c      	cmp	r4, r3
 8019598:	d006      	beq.n	80195a8 <std+0x48>
 801959a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801959e:	4294      	cmp	r4, r2
 80195a0:	d002      	beq.n	80195a8 <std+0x48>
 80195a2:	33d0      	adds	r3, #208	@ 0xd0
 80195a4:	429c      	cmp	r4, r3
 80195a6:	d105      	bne.n	80195b4 <std+0x54>
 80195a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80195ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80195b0:	f000 bb94 	b.w	8019cdc <__retarget_lock_init_recursive>
 80195b4:	bd10      	pop	{r4, pc}
 80195b6:	bf00      	nop
 80195b8:	08019829 	.word	0x08019829
 80195bc:	0801984b 	.word	0x0801984b
 80195c0:	08019883 	.word	0x08019883
 80195c4:	080198a7 	.word	0x080198a7
 80195c8:	20011a84 	.word	0x20011a84

080195cc <stdio_exit_handler>:
 80195cc:	4a02      	ldr	r2, [pc, #8]	@ (80195d8 <stdio_exit_handler+0xc>)
 80195ce:	4903      	ldr	r1, [pc, #12]	@ (80195dc <stdio_exit_handler+0x10>)
 80195d0:	4803      	ldr	r0, [pc, #12]	@ (80195e0 <stdio_exit_handler+0x14>)
 80195d2:	f000 b869 	b.w	80196a8 <_fwalk_sglue>
 80195d6:	bf00      	nop
 80195d8:	20000914 	.word	0x20000914
 80195dc:	0801a75d 	.word	0x0801a75d
 80195e0:	20000924 	.word	0x20000924

080195e4 <cleanup_stdio>:
 80195e4:	6841      	ldr	r1, [r0, #4]
 80195e6:	4b0c      	ldr	r3, [pc, #48]	@ (8019618 <cleanup_stdio+0x34>)
 80195e8:	4299      	cmp	r1, r3
 80195ea:	b510      	push	{r4, lr}
 80195ec:	4604      	mov	r4, r0
 80195ee:	d001      	beq.n	80195f4 <cleanup_stdio+0x10>
 80195f0:	f001 f8b4 	bl	801a75c <_fflush_r>
 80195f4:	68a1      	ldr	r1, [r4, #8]
 80195f6:	4b09      	ldr	r3, [pc, #36]	@ (801961c <cleanup_stdio+0x38>)
 80195f8:	4299      	cmp	r1, r3
 80195fa:	d002      	beq.n	8019602 <cleanup_stdio+0x1e>
 80195fc:	4620      	mov	r0, r4
 80195fe:	f001 f8ad 	bl	801a75c <_fflush_r>
 8019602:	68e1      	ldr	r1, [r4, #12]
 8019604:	4b06      	ldr	r3, [pc, #24]	@ (8019620 <cleanup_stdio+0x3c>)
 8019606:	4299      	cmp	r1, r3
 8019608:	d004      	beq.n	8019614 <cleanup_stdio+0x30>
 801960a:	4620      	mov	r0, r4
 801960c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019610:	f001 b8a4 	b.w	801a75c <_fflush_r>
 8019614:	bd10      	pop	{r4, pc}
 8019616:	bf00      	nop
 8019618:	20011a84 	.word	0x20011a84
 801961c:	20011aec 	.word	0x20011aec
 8019620:	20011b54 	.word	0x20011b54

08019624 <global_stdio_init.part.0>:
 8019624:	b510      	push	{r4, lr}
 8019626:	4b0b      	ldr	r3, [pc, #44]	@ (8019654 <global_stdio_init.part.0+0x30>)
 8019628:	4c0b      	ldr	r4, [pc, #44]	@ (8019658 <global_stdio_init.part.0+0x34>)
 801962a:	4a0c      	ldr	r2, [pc, #48]	@ (801965c <global_stdio_init.part.0+0x38>)
 801962c:	601a      	str	r2, [r3, #0]
 801962e:	4620      	mov	r0, r4
 8019630:	2200      	movs	r2, #0
 8019632:	2104      	movs	r1, #4
 8019634:	f7ff ff94 	bl	8019560 <std>
 8019638:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801963c:	2201      	movs	r2, #1
 801963e:	2109      	movs	r1, #9
 8019640:	f7ff ff8e 	bl	8019560 <std>
 8019644:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8019648:	2202      	movs	r2, #2
 801964a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801964e:	2112      	movs	r1, #18
 8019650:	f7ff bf86 	b.w	8019560 <std>
 8019654:	20011bbc 	.word	0x20011bbc
 8019658:	20011a84 	.word	0x20011a84
 801965c:	080195cd 	.word	0x080195cd

08019660 <__sfp_lock_acquire>:
 8019660:	4801      	ldr	r0, [pc, #4]	@ (8019668 <__sfp_lock_acquire+0x8>)
 8019662:	f000 bb3c 	b.w	8019cde <__retarget_lock_acquire_recursive>
 8019666:	bf00      	nop
 8019668:	20011bc6 	.word	0x20011bc6

0801966c <__sfp_lock_release>:
 801966c:	4801      	ldr	r0, [pc, #4]	@ (8019674 <__sfp_lock_release+0x8>)
 801966e:	f000 bb37 	b.w	8019ce0 <__retarget_lock_release_recursive>
 8019672:	bf00      	nop
 8019674:	20011bc6 	.word	0x20011bc6

08019678 <__sinit>:
 8019678:	b510      	push	{r4, lr}
 801967a:	4604      	mov	r4, r0
 801967c:	f7ff fff0 	bl	8019660 <__sfp_lock_acquire>
 8019680:	6a23      	ldr	r3, [r4, #32]
 8019682:	b11b      	cbz	r3, 801968c <__sinit+0x14>
 8019684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019688:	f7ff bff0 	b.w	801966c <__sfp_lock_release>
 801968c:	4b04      	ldr	r3, [pc, #16]	@ (80196a0 <__sinit+0x28>)
 801968e:	6223      	str	r3, [r4, #32]
 8019690:	4b04      	ldr	r3, [pc, #16]	@ (80196a4 <__sinit+0x2c>)
 8019692:	681b      	ldr	r3, [r3, #0]
 8019694:	2b00      	cmp	r3, #0
 8019696:	d1f5      	bne.n	8019684 <__sinit+0xc>
 8019698:	f7ff ffc4 	bl	8019624 <global_stdio_init.part.0>
 801969c:	e7f2      	b.n	8019684 <__sinit+0xc>
 801969e:	bf00      	nop
 80196a0:	080195e5 	.word	0x080195e5
 80196a4:	20011bbc 	.word	0x20011bbc

080196a8 <_fwalk_sglue>:
 80196a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80196ac:	4607      	mov	r7, r0
 80196ae:	4688      	mov	r8, r1
 80196b0:	4614      	mov	r4, r2
 80196b2:	2600      	movs	r6, #0
 80196b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80196b8:	f1b9 0901 	subs.w	r9, r9, #1
 80196bc:	d505      	bpl.n	80196ca <_fwalk_sglue+0x22>
 80196be:	6824      	ldr	r4, [r4, #0]
 80196c0:	2c00      	cmp	r4, #0
 80196c2:	d1f7      	bne.n	80196b4 <_fwalk_sglue+0xc>
 80196c4:	4630      	mov	r0, r6
 80196c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80196ca:	89ab      	ldrh	r3, [r5, #12]
 80196cc:	2b01      	cmp	r3, #1
 80196ce:	d907      	bls.n	80196e0 <_fwalk_sglue+0x38>
 80196d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80196d4:	3301      	adds	r3, #1
 80196d6:	d003      	beq.n	80196e0 <_fwalk_sglue+0x38>
 80196d8:	4629      	mov	r1, r5
 80196da:	4638      	mov	r0, r7
 80196dc:	47c0      	blx	r8
 80196de:	4306      	orrs	r6, r0
 80196e0:	3568      	adds	r5, #104	@ 0x68
 80196e2:	e7e9      	b.n	80196b8 <_fwalk_sglue+0x10>

080196e4 <_fwrite_r>:
 80196e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80196e8:	9c08      	ldr	r4, [sp, #32]
 80196ea:	468a      	mov	sl, r1
 80196ec:	4690      	mov	r8, r2
 80196ee:	fb02 f903 	mul.w	r9, r2, r3
 80196f2:	4606      	mov	r6, r0
 80196f4:	b118      	cbz	r0, 80196fe <_fwrite_r+0x1a>
 80196f6:	6a03      	ldr	r3, [r0, #32]
 80196f8:	b90b      	cbnz	r3, 80196fe <_fwrite_r+0x1a>
 80196fa:	f7ff ffbd 	bl	8019678 <__sinit>
 80196fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019700:	07dd      	lsls	r5, r3, #31
 8019702:	d405      	bmi.n	8019710 <_fwrite_r+0x2c>
 8019704:	89a3      	ldrh	r3, [r4, #12]
 8019706:	0598      	lsls	r0, r3, #22
 8019708:	d402      	bmi.n	8019710 <_fwrite_r+0x2c>
 801970a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801970c:	f000 fae7 	bl	8019cde <__retarget_lock_acquire_recursive>
 8019710:	89a3      	ldrh	r3, [r4, #12]
 8019712:	0719      	lsls	r1, r3, #28
 8019714:	d516      	bpl.n	8019744 <_fwrite_r+0x60>
 8019716:	6923      	ldr	r3, [r4, #16]
 8019718:	b1a3      	cbz	r3, 8019744 <_fwrite_r+0x60>
 801971a:	2500      	movs	r5, #0
 801971c:	454d      	cmp	r5, r9
 801971e:	d01f      	beq.n	8019760 <_fwrite_r+0x7c>
 8019720:	68a7      	ldr	r7, [r4, #8]
 8019722:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8019726:	3f01      	subs	r7, #1
 8019728:	2f00      	cmp	r7, #0
 801972a:	60a7      	str	r7, [r4, #8]
 801972c:	da04      	bge.n	8019738 <_fwrite_r+0x54>
 801972e:	69a3      	ldr	r3, [r4, #24]
 8019730:	429f      	cmp	r7, r3
 8019732:	db0f      	blt.n	8019754 <_fwrite_r+0x70>
 8019734:	290a      	cmp	r1, #10
 8019736:	d00d      	beq.n	8019754 <_fwrite_r+0x70>
 8019738:	6823      	ldr	r3, [r4, #0]
 801973a:	1c5a      	adds	r2, r3, #1
 801973c:	6022      	str	r2, [r4, #0]
 801973e:	7019      	strb	r1, [r3, #0]
 8019740:	3501      	adds	r5, #1
 8019742:	e7eb      	b.n	801971c <_fwrite_r+0x38>
 8019744:	4621      	mov	r1, r4
 8019746:	4630      	mov	r0, r6
 8019748:	f000 f92c 	bl	80199a4 <__swsetup_r>
 801974c:	2800      	cmp	r0, #0
 801974e:	d0e4      	beq.n	801971a <_fwrite_r+0x36>
 8019750:	2500      	movs	r5, #0
 8019752:	e005      	b.n	8019760 <_fwrite_r+0x7c>
 8019754:	4622      	mov	r2, r4
 8019756:	4630      	mov	r0, r6
 8019758:	f000 f8e6 	bl	8019928 <__swbuf_r>
 801975c:	3001      	adds	r0, #1
 801975e:	d1ef      	bne.n	8019740 <_fwrite_r+0x5c>
 8019760:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019762:	07da      	lsls	r2, r3, #31
 8019764:	d405      	bmi.n	8019772 <_fwrite_r+0x8e>
 8019766:	89a3      	ldrh	r3, [r4, #12]
 8019768:	059b      	lsls	r3, r3, #22
 801976a:	d402      	bmi.n	8019772 <_fwrite_r+0x8e>
 801976c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801976e:	f000 fab7 	bl	8019ce0 <__retarget_lock_release_recursive>
 8019772:	fbb5 f0f8 	udiv	r0, r5, r8
 8019776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801977c <fwrite>:
 801977c:	b507      	push	{r0, r1, r2, lr}
 801977e:	9300      	str	r3, [sp, #0]
 8019780:	4613      	mov	r3, r2
 8019782:	460a      	mov	r2, r1
 8019784:	4601      	mov	r1, r0
 8019786:	4803      	ldr	r0, [pc, #12]	@ (8019794 <fwrite+0x18>)
 8019788:	6800      	ldr	r0, [r0, #0]
 801978a:	f7ff ffab 	bl	80196e4 <_fwrite_r>
 801978e:	b003      	add	sp, #12
 8019790:	f85d fb04 	ldr.w	pc, [sp], #4
 8019794:	20000920 	.word	0x20000920

08019798 <iprintf>:
 8019798:	b40f      	push	{r0, r1, r2, r3}
 801979a:	b507      	push	{r0, r1, r2, lr}
 801979c:	4906      	ldr	r1, [pc, #24]	@ (80197b8 <iprintf+0x20>)
 801979e:	ab04      	add	r3, sp, #16
 80197a0:	6808      	ldr	r0, [r1, #0]
 80197a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80197a6:	6881      	ldr	r1, [r0, #8]
 80197a8:	9301      	str	r3, [sp, #4]
 80197aa:	f000 fcaf 	bl	801a10c <_vfiprintf_r>
 80197ae:	b003      	add	sp, #12
 80197b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80197b4:	b004      	add	sp, #16
 80197b6:	4770      	bx	lr
 80197b8:	20000920 	.word	0x20000920

080197bc <sniprintf>:
 80197bc:	b40c      	push	{r2, r3}
 80197be:	b530      	push	{r4, r5, lr}
 80197c0:	4b18      	ldr	r3, [pc, #96]	@ (8019824 <sniprintf+0x68>)
 80197c2:	1e0c      	subs	r4, r1, #0
 80197c4:	681d      	ldr	r5, [r3, #0]
 80197c6:	b09d      	sub	sp, #116	@ 0x74
 80197c8:	da08      	bge.n	80197dc <sniprintf+0x20>
 80197ca:	238b      	movs	r3, #139	@ 0x8b
 80197cc:	602b      	str	r3, [r5, #0]
 80197ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80197d2:	b01d      	add	sp, #116	@ 0x74
 80197d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80197d8:	b002      	add	sp, #8
 80197da:	4770      	bx	lr
 80197dc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80197e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80197e4:	f04f 0300 	mov.w	r3, #0
 80197e8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80197ea:	bf14      	ite	ne
 80197ec:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80197f0:	4623      	moveq	r3, r4
 80197f2:	9304      	str	r3, [sp, #16]
 80197f4:	9307      	str	r3, [sp, #28]
 80197f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80197fa:	9002      	str	r0, [sp, #8]
 80197fc:	9006      	str	r0, [sp, #24]
 80197fe:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019802:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8019804:	ab21      	add	r3, sp, #132	@ 0x84
 8019806:	a902      	add	r1, sp, #8
 8019808:	4628      	mov	r0, r5
 801980a:	9301      	str	r3, [sp, #4]
 801980c:	f000 fb58 	bl	8019ec0 <_svfiprintf_r>
 8019810:	1c43      	adds	r3, r0, #1
 8019812:	bfbc      	itt	lt
 8019814:	238b      	movlt	r3, #139	@ 0x8b
 8019816:	602b      	strlt	r3, [r5, #0]
 8019818:	2c00      	cmp	r4, #0
 801981a:	d0da      	beq.n	80197d2 <sniprintf+0x16>
 801981c:	9b02      	ldr	r3, [sp, #8]
 801981e:	2200      	movs	r2, #0
 8019820:	701a      	strb	r2, [r3, #0]
 8019822:	e7d6      	b.n	80197d2 <sniprintf+0x16>
 8019824:	20000920 	.word	0x20000920

08019828 <__sread>:
 8019828:	b510      	push	{r4, lr}
 801982a:	460c      	mov	r4, r1
 801982c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019830:	f000 f9f6 	bl	8019c20 <_read_r>
 8019834:	2800      	cmp	r0, #0
 8019836:	bfab      	itete	ge
 8019838:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801983a:	89a3      	ldrhlt	r3, [r4, #12]
 801983c:	181b      	addge	r3, r3, r0
 801983e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8019842:	bfac      	ite	ge
 8019844:	6563      	strge	r3, [r4, #84]	@ 0x54
 8019846:	81a3      	strhlt	r3, [r4, #12]
 8019848:	bd10      	pop	{r4, pc}

0801984a <__swrite>:
 801984a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801984e:	461f      	mov	r7, r3
 8019850:	898b      	ldrh	r3, [r1, #12]
 8019852:	05db      	lsls	r3, r3, #23
 8019854:	4605      	mov	r5, r0
 8019856:	460c      	mov	r4, r1
 8019858:	4616      	mov	r6, r2
 801985a:	d505      	bpl.n	8019868 <__swrite+0x1e>
 801985c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019860:	2302      	movs	r3, #2
 8019862:	2200      	movs	r2, #0
 8019864:	f000 f9ca 	bl	8019bfc <_lseek_r>
 8019868:	89a3      	ldrh	r3, [r4, #12]
 801986a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801986e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8019872:	81a3      	strh	r3, [r4, #12]
 8019874:	4632      	mov	r2, r6
 8019876:	463b      	mov	r3, r7
 8019878:	4628      	mov	r0, r5
 801987a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801987e:	f000 b9f1 	b.w	8019c64 <_write_r>

08019882 <__sseek>:
 8019882:	b510      	push	{r4, lr}
 8019884:	460c      	mov	r4, r1
 8019886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801988a:	f000 f9b7 	bl	8019bfc <_lseek_r>
 801988e:	1c43      	adds	r3, r0, #1
 8019890:	89a3      	ldrh	r3, [r4, #12]
 8019892:	bf15      	itete	ne
 8019894:	6560      	strne	r0, [r4, #84]	@ 0x54
 8019896:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801989a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801989e:	81a3      	strheq	r3, [r4, #12]
 80198a0:	bf18      	it	ne
 80198a2:	81a3      	strhne	r3, [r4, #12]
 80198a4:	bd10      	pop	{r4, pc}

080198a6 <__sclose>:
 80198a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80198aa:	f000 b939 	b.w	8019b20 <_close_r>

080198ae <_vsniprintf_r>:
 80198ae:	b530      	push	{r4, r5, lr}
 80198b0:	4614      	mov	r4, r2
 80198b2:	2c00      	cmp	r4, #0
 80198b4:	b09b      	sub	sp, #108	@ 0x6c
 80198b6:	4605      	mov	r5, r0
 80198b8:	461a      	mov	r2, r3
 80198ba:	da05      	bge.n	80198c8 <_vsniprintf_r+0x1a>
 80198bc:	238b      	movs	r3, #139	@ 0x8b
 80198be:	6003      	str	r3, [r0, #0]
 80198c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80198c4:	b01b      	add	sp, #108	@ 0x6c
 80198c6:	bd30      	pop	{r4, r5, pc}
 80198c8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80198cc:	f8ad 300c 	strh.w	r3, [sp, #12]
 80198d0:	f04f 0300 	mov.w	r3, #0
 80198d4:	9319      	str	r3, [sp, #100]	@ 0x64
 80198d6:	bf14      	ite	ne
 80198d8:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80198dc:	4623      	moveq	r3, r4
 80198de:	9302      	str	r3, [sp, #8]
 80198e0:	9305      	str	r3, [sp, #20]
 80198e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80198e6:	9100      	str	r1, [sp, #0]
 80198e8:	9104      	str	r1, [sp, #16]
 80198ea:	f8ad 300e 	strh.w	r3, [sp, #14]
 80198ee:	4669      	mov	r1, sp
 80198f0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80198f2:	f000 fae5 	bl	8019ec0 <_svfiprintf_r>
 80198f6:	1c43      	adds	r3, r0, #1
 80198f8:	bfbc      	itt	lt
 80198fa:	238b      	movlt	r3, #139	@ 0x8b
 80198fc:	602b      	strlt	r3, [r5, #0]
 80198fe:	2c00      	cmp	r4, #0
 8019900:	d0e0      	beq.n	80198c4 <_vsniprintf_r+0x16>
 8019902:	9b00      	ldr	r3, [sp, #0]
 8019904:	2200      	movs	r2, #0
 8019906:	701a      	strb	r2, [r3, #0]
 8019908:	e7dc      	b.n	80198c4 <_vsniprintf_r+0x16>
	...

0801990c <vsniprintf>:
 801990c:	b507      	push	{r0, r1, r2, lr}
 801990e:	9300      	str	r3, [sp, #0]
 8019910:	4613      	mov	r3, r2
 8019912:	460a      	mov	r2, r1
 8019914:	4601      	mov	r1, r0
 8019916:	4803      	ldr	r0, [pc, #12]	@ (8019924 <vsniprintf+0x18>)
 8019918:	6800      	ldr	r0, [r0, #0]
 801991a:	f7ff ffc8 	bl	80198ae <_vsniprintf_r>
 801991e:	b003      	add	sp, #12
 8019920:	f85d fb04 	ldr.w	pc, [sp], #4
 8019924:	20000920 	.word	0x20000920

08019928 <__swbuf_r>:
 8019928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801992a:	460e      	mov	r6, r1
 801992c:	4614      	mov	r4, r2
 801992e:	4605      	mov	r5, r0
 8019930:	b118      	cbz	r0, 801993a <__swbuf_r+0x12>
 8019932:	6a03      	ldr	r3, [r0, #32]
 8019934:	b90b      	cbnz	r3, 801993a <__swbuf_r+0x12>
 8019936:	f7ff fe9f 	bl	8019678 <__sinit>
 801993a:	69a3      	ldr	r3, [r4, #24]
 801993c:	60a3      	str	r3, [r4, #8]
 801993e:	89a3      	ldrh	r3, [r4, #12]
 8019940:	071a      	lsls	r2, r3, #28
 8019942:	d501      	bpl.n	8019948 <__swbuf_r+0x20>
 8019944:	6923      	ldr	r3, [r4, #16]
 8019946:	b943      	cbnz	r3, 801995a <__swbuf_r+0x32>
 8019948:	4621      	mov	r1, r4
 801994a:	4628      	mov	r0, r5
 801994c:	f000 f82a 	bl	80199a4 <__swsetup_r>
 8019950:	b118      	cbz	r0, 801995a <__swbuf_r+0x32>
 8019952:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8019956:	4638      	mov	r0, r7
 8019958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801995a:	6823      	ldr	r3, [r4, #0]
 801995c:	6922      	ldr	r2, [r4, #16]
 801995e:	1a98      	subs	r0, r3, r2
 8019960:	6963      	ldr	r3, [r4, #20]
 8019962:	b2f6      	uxtb	r6, r6
 8019964:	4283      	cmp	r3, r0
 8019966:	4637      	mov	r7, r6
 8019968:	dc05      	bgt.n	8019976 <__swbuf_r+0x4e>
 801996a:	4621      	mov	r1, r4
 801996c:	4628      	mov	r0, r5
 801996e:	f000 fef5 	bl	801a75c <_fflush_r>
 8019972:	2800      	cmp	r0, #0
 8019974:	d1ed      	bne.n	8019952 <__swbuf_r+0x2a>
 8019976:	68a3      	ldr	r3, [r4, #8]
 8019978:	3b01      	subs	r3, #1
 801997a:	60a3      	str	r3, [r4, #8]
 801997c:	6823      	ldr	r3, [r4, #0]
 801997e:	1c5a      	adds	r2, r3, #1
 8019980:	6022      	str	r2, [r4, #0]
 8019982:	701e      	strb	r6, [r3, #0]
 8019984:	6962      	ldr	r2, [r4, #20]
 8019986:	1c43      	adds	r3, r0, #1
 8019988:	429a      	cmp	r2, r3
 801998a:	d004      	beq.n	8019996 <__swbuf_r+0x6e>
 801998c:	89a3      	ldrh	r3, [r4, #12]
 801998e:	07db      	lsls	r3, r3, #31
 8019990:	d5e1      	bpl.n	8019956 <__swbuf_r+0x2e>
 8019992:	2e0a      	cmp	r6, #10
 8019994:	d1df      	bne.n	8019956 <__swbuf_r+0x2e>
 8019996:	4621      	mov	r1, r4
 8019998:	4628      	mov	r0, r5
 801999a:	f000 fedf 	bl	801a75c <_fflush_r>
 801999e:	2800      	cmp	r0, #0
 80199a0:	d0d9      	beq.n	8019956 <__swbuf_r+0x2e>
 80199a2:	e7d6      	b.n	8019952 <__swbuf_r+0x2a>

080199a4 <__swsetup_r>:
 80199a4:	b538      	push	{r3, r4, r5, lr}
 80199a6:	4b29      	ldr	r3, [pc, #164]	@ (8019a4c <__swsetup_r+0xa8>)
 80199a8:	4605      	mov	r5, r0
 80199aa:	6818      	ldr	r0, [r3, #0]
 80199ac:	460c      	mov	r4, r1
 80199ae:	b118      	cbz	r0, 80199b8 <__swsetup_r+0x14>
 80199b0:	6a03      	ldr	r3, [r0, #32]
 80199b2:	b90b      	cbnz	r3, 80199b8 <__swsetup_r+0x14>
 80199b4:	f7ff fe60 	bl	8019678 <__sinit>
 80199b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80199bc:	0719      	lsls	r1, r3, #28
 80199be:	d422      	bmi.n	8019a06 <__swsetup_r+0x62>
 80199c0:	06da      	lsls	r2, r3, #27
 80199c2:	d407      	bmi.n	80199d4 <__swsetup_r+0x30>
 80199c4:	2209      	movs	r2, #9
 80199c6:	602a      	str	r2, [r5, #0]
 80199c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80199cc:	81a3      	strh	r3, [r4, #12]
 80199ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80199d2:	e033      	b.n	8019a3c <__swsetup_r+0x98>
 80199d4:	0758      	lsls	r0, r3, #29
 80199d6:	d512      	bpl.n	80199fe <__swsetup_r+0x5a>
 80199d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80199da:	b141      	cbz	r1, 80199ee <__swsetup_r+0x4a>
 80199dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80199e0:	4299      	cmp	r1, r3
 80199e2:	d002      	beq.n	80199ea <__swsetup_r+0x46>
 80199e4:	4628      	mov	r0, r5
 80199e6:	f000 f9bd 	bl	8019d64 <_free_r>
 80199ea:	2300      	movs	r3, #0
 80199ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80199ee:	89a3      	ldrh	r3, [r4, #12]
 80199f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80199f4:	81a3      	strh	r3, [r4, #12]
 80199f6:	2300      	movs	r3, #0
 80199f8:	6063      	str	r3, [r4, #4]
 80199fa:	6923      	ldr	r3, [r4, #16]
 80199fc:	6023      	str	r3, [r4, #0]
 80199fe:	89a3      	ldrh	r3, [r4, #12]
 8019a00:	f043 0308 	orr.w	r3, r3, #8
 8019a04:	81a3      	strh	r3, [r4, #12]
 8019a06:	6923      	ldr	r3, [r4, #16]
 8019a08:	b94b      	cbnz	r3, 8019a1e <__swsetup_r+0x7a>
 8019a0a:	89a3      	ldrh	r3, [r4, #12]
 8019a0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8019a10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019a14:	d003      	beq.n	8019a1e <__swsetup_r+0x7a>
 8019a16:	4621      	mov	r1, r4
 8019a18:	4628      	mov	r0, r5
 8019a1a:	f000 feff 	bl	801a81c <__smakebuf_r>
 8019a1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019a22:	f013 0201 	ands.w	r2, r3, #1
 8019a26:	d00a      	beq.n	8019a3e <__swsetup_r+0x9a>
 8019a28:	2200      	movs	r2, #0
 8019a2a:	60a2      	str	r2, [r4, #8]
 8019a2c:	6962      	ldr	r2, [r4, #20]
 8019a2e:	4252      	negs	r2, r2
 8019a30:	61a2      	str	r2, [r4, #24]
 8019a32:	6922      	ldr	r2, [r4, #16]
 8019a34:	b942      	cbnz	r2, 8019a48 <__swsetup_r+0xa4>
 8019a36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8019a3a:	d1c5      	bne.n	80199c8 <__swsetup_r+0x24>
 8019a3c:	bd38      	pop	{r3, r4, r5, pc}
 8019a3e:	0799      	lsls	r1, r3, #30
 8019a40:	bf58      	it	pl
 8019a42:	6962      	ldrpl	r2, [r4, #20]
 8019a44:	60a2      	str	r2, [r4, #8]
 8019a46:	e7f4      	b.n	8019a32 <__swsetup_r+0x8e>
 8019a48:	2000      	movs	r0, #0
 8019a4a:	e7f7      	b.n	8019a3c <__swsetup_r+0x98>
 8019a4c:	20000920 	.word	0x20000920

08019a50 <memcmp>:
 8019a50:	b510      	push	{r4, lr}
 8019a52:	3901      	subs	r1, #1
 8019a54:	4402      	add	r2, r0
 8019a56:	4290      	cmp	r0, r2
 8019a58:	d101      	bne.n	8019a5e <memcmp+0xe>
 8019a5a:	2000      	movs	r0, #0
 8019a5c:	e005      	b.n	8019a6a <memcmp+0x1a>
 8019a5e:	7803      	ldrb	r3, [r0, #0]
 8019a60:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019a64:	42a3      	cmp	r3, r4
 8019a66:	d001      	beq.n	8019a6c <memcmp+0x1c>
 8019a68:	1b18      	subs	r0, r3, r4
 8019a6a:	bd10      	pop	{r4, pc}
 8019a6c:	3001      	adds	r0, #1
 8019a6e:	e7f2      	b.n	8019a56 <memcmp+0x6>

08019a70 <memmove>:
 8019a70:	4288      	cmp	r0, r1
 8019a72:	b510      	push	{r4, lr}
 8019a74:	eb01 0402 	add.w	r4, r1, r2
 8019a78:	d902      	bls.n	8019a80 <memmove+0x10>
 8019a7a:	4284      	cmp	r4, r0
 8019a7c:	4623      	mov	r3, r4
 8019a7e:	d807      	bhi.n	8019a90 <memmove+0x20>
 8019a80:	1e43      	subs	r3, r0, #1
 8019a82:	42a1      	cmp	r1, r4
 8019a84:	d008      	beq.n	8019a98 <memmove+0x28>
 8019a86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019a8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019a8e:	e7f8      	b.n	8019a82 <memmove+0x12>
 8019a90:	4402      	add	r2, r0
 8019a92:	4601      	mov	r1, r0
 8019a94:	428a      	cmp	r2, r1
 8019a96:	d100      	bne.n	8019a9a <memmove+0x2a>
 8019a98:	bd10      	pop	{r4, pc}
 8019a9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019a9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019aa2:	e7f7      	b.n	8019a94 <memmove+0x24>

08019aa4 <memset>:
 8019aa4:	4402      	add	r2, r0
 8019aa6:	4603      	mov	r3, r0
 8019aa8:	4293      	cmp	r3, r2
 8019aaa:	d100      	bne.n	8019aae <memset+0xa>
 8019aac:	4770      	bx	lr
 8019aae:	f803 1b01 	strb.w	r1, [r3], #1
 8019ab2:	e7f9      	b.n	8019aa8 <memset+0x4>

08019ab4 <strchr>:
 8019ab4:	b2c9      	uxtb	r1, r1
 8019ab6:	4603      	mov	r3, r0
 8019ab8:	4618      	mov	r0, r3
 8019aba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019abe:	b112      	cbz	r2, 8019ac6 <strchr+0x12>
 8019ac0:	428a      	cmp	r2, r1
 8019ac2:	d1f9      	bne.n	8019ab8 <strchr+0x4>
 8019ac4:	4770      	bx	lr
 8019ac6:	2900      	cmp	r1, #0
 8019ac8:	bf18      	it	ne
 8019aca:	2000      	movne	r0, #0
 8019acc:	4770      	bx	lr

08019ace <strncmp>:
 8019ace:	b510      	push	{r4, lr}
 8019ad0:	b16a      	cbz	r2, 8019aee <strncmp+0x20>
 8019ad2:	3901      	subs	r1, #1
 8019ad4:	1884      	adds	r4, r0, r2
 8019ad6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019ada:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8019ade:	429a      	cmp	r2, r3
 8019ae0:	d103      	bne.n	8019aea <strncmp+0x1c>
 8019ae2:	42a0      	cmp	r0, r4
 8019ae4:	d001      	beq.n	8019aea <strncmp+0x1c>
 8019ae6:	2a00      	cmp	r2, #0
 8019ae8:	d1f5      	bne.n	8019ad6 <strncmp+0x8>
 8019aea:	1ad0      	subs	r0, r2, r3
 8019aec:	bd10      	pop	{r4, pc}
 8019aee:	4610      	mov	r0, r2
 8019af0:	e7fc      	b.n	8019aec <strncmp+0x1e>

08019af2 <strstr>:
 8019af2:	780a      	ldrb	r2, [r1, #0]
 8019af4:	b570      	push	{r4, r5, r6, lr}
 8019af6:	b96a      	cbnz	r2, 8019b14 <strstr+0x22>
 8019af8:	bd70      	pop	{r4, r5, r6, pc}
 8019afa:	429a      	cmp	r2, r3
 8019afc:	d109      	bne.n	8019b12 <strstr+0x20>
 8019afe:	460c      	mov	r4, r1
 8019b00:	4605      	mov	r5, r0
 8019b02:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8019b06:	2b00      	cmp	r3, #0
 8019b08:	d0f6      	beq.n	8019af8 <strstr+0x6>
 8019b0a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8019b0e:	429e      	cmp	r6, r3
 8019b10:	d0f7      	beq.n	8019b02 <strstr+0x10>
 8019b12:	3001      	adds	r0, #1
 8019b14:	7803      	ldrb	r3, [r0, #0]
 8019b16:	2b00      	cmp	r3, #0
 8019b18:	d1ef      	bne.n	8019afa <strstr+0x8>
 8019b1a:	4618      	mov	r0, r3
 8019b1c:	e7ec      	b.n	8019af8 <strstr+0x6>
	...

08019b20 <_close_r>:
 8019b20:	b538      	push	{r3, r4, r5, lr}
 8019b22:	4d06      	ldr	r5, [pc, #24]	@ (8019b3c <_close_r+0x1c>)
 8019b24:	2300      	movs	r3, #0
 8019b26:	4604      	mov	r4, r0
 8019b28:	4608      	mov	r0, r1
 8019b2a:	602b      	str	r3, [r5, #0]
 8019b2c:	f7e9 fc46 	bl	80033bc <_close>
 8019b30:	1c43      	adds	r3, r0, #1
 8019b32:	d102      	bne.n	8019b3a <_close_r+0x1a>
 8019b34:	682b      	ldr	r3, [r5, #0]
 8019b36:	b103      	cbz	r3, 8019b3a <_close_r+0x1a>
 8019b38:	6023      	str	r3, [r4, #0]
 8019b3a:	bd38      	pop	{r3, r4, r5, pc}
 8019b3c:	20011bc0 	.word	0x20011bc0

08019b40 <_reclaim_reent>:
 8019b40:	4b2d      	ldr	r3, [pc, #180]	@ (8019bf8 <_reclaim_reent+0xb8>)
 8019b42:	681b      	ldr	r3, [r3, #0]
 8019b44:	4283      	cmp	r3, r0
 8019b46:	b570      	push	{r4, r5, r6, lr}
 8019b48:	4604      	mov	r4, r0
 8019b4a:	d053      	beq.n	8019bf4 <_reclaim_reent+0xb4>
 8019b4c:	69c3      	ldr	r3, [r0, #28]
 8019b4e:	b31b      	cbz	r3, 8019b98 <_reclaim_reent+0x58>
 8019b50:	68db      	ldr	r3, [r3, #12]
 8019b52:	b163      	cbz	r3, 8019b6e <_reclaim_reent+0x2e>
 8019b54:	2500      	movs	r5, #0
 8019b56:	69e3      	ldr	r3, [r4, #28]
 8019b58:	68db      	ldr	r3, [r3, #12]
 8019b5a:	5959      	ldr	r1, [r3, r5]
 8019b5c:	b9b1      	cbnz	r1, 8019b8c <_reclaim_reent+0x4c>
 8019b5e:	3504      	adds	r5, #4
 8019b60:	2d80      	cmp	r5, #128	@ 0x80
 8019b62:	d1f8      	bne.n	8019b56 <_reclaim_reent+0x16>
 8019b64:	69e3      	ldr	r3, [r4, #28]
 8019b66:	4620      	mov	r0, r4
 8019b68:	68d9      	ldr	r1, [r3, #12]
 8019b6a:	f000 f8fb 	bl	8019d64 <_free_r>
 8019b6e:	69e3      	ldr	r3, [r4, #28]
 8019b70:	6819      	ldr	r1, [r3, #0]
 8019b72:	b111      	cbz	r1, 8019b7a <_reclaim_reent+0x3a>
 8019b74:	4620      	mov	r0, r4
 8019b76:	f000 f8f5 	bl	8019d64 <_free_r>
 8019b7a:	69e3      	ldr	r3, [r4, #28]
 8019b7c:	689d      	ldr	r5, [r3, #8]
 8019b7e:	b15d      	cbz	r5, 8019b98 <_reclaim_reent+0x58>
 8019b80:	4629      	mov	r1, r5
 8019b82:	4620      	mov	r0, r4
 8019b84:	682d      	ldr	r5, [r5, #0]
 8019b86:	f000 f8ed 	bl	8019d64 <_free_r>
 8019b8a:	e7f8      	b.n	8019b7e <_reclaim_reent+0x3e>
 8019b8c:	680e      	ldr	r6, [r1, #0]
 8019b8e:	4620      	mov	r0, r4
 8019b90:	f000 f8e8 	bl	8019d64 <_free_r>
 8019b94:	4631      	mov	r1, r6
 8019b96:	e7e1      	b.n	8019b5c <_reclaim_reent+0x1c>
 8019b98:	6961      	ldr	r1, [r4, #20]
 8019b9a:	b111      	cbz	r1, 8019ba2 <_reclaim_reent+0x62>
 8019b9c:	4620      	mov	r0, r4
 8019b9e:	f000 f8e1 	bl	8019d64 <_free_r>
 8019ba2:	69e1      	ldr	r1, [r4, #28]
 8019ba4:	b111      	cbz	r1, 8019bac <_reclaim_reent+0x6c>
 8019ba6:	4620      	mov	r0, r4
 8019ba8:	f000 f8dc 	bl	8019d64 <_free_r>
 8019bac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8019bae:	b111      	cbz	r1, 8019bb6 <_reclaim_reent+0x76>
 8019bb0:	4620      	mov	r0, r4
 8019bb2:	f000 f8d7 	bl	8019d64 <_free_r>
 8019bb6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019bb8:	b111      	cbz	r1, 8019bc0 <_reclaim_reent+0x80>
 8019bba:	4620      	mov	r0, r4
 8019bbc:	f000 f8d2 	bl	8019d64 <_free_r>
 8019bc0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8019bc2:	b111      	cbz	r1, 8019bca <_reclaim_reent+0x8a>
 8019bc4:	4620      	mov	r0, r4
 8019bc6:	f000 f8cd 	bl	8019d64 <_free_r>
 8019bca:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8019bcc:	b111      	cbz	r1, 8019bd4 <_reclaim_reent+0x94>
 8019bce:	4620      	mov	r0, r4
 8019bd0:	f000 f8c8 	bl	8019d64 <_free_r>
 8019bd4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8019bd6:	b111      	cbz	r1, 8019bde <_reclaim_reent+0x9e>
 8019bd8:	4620      	mov	r0, r4
 8019bda:	f000 f8c3 	bl	8019d64 <_free_r>
 8019bde:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8019be0:	b111      	cbz	r1, 8019be8 <_reclaim_reent+0xa8>
 8019be2:	4620      	mov	r0, r4
 8019be4:	f000 f8be 	bl	8019d64 <_free_r>
 8019be8:	6a23      	ldr	r3, [r4, #32]
 8019bea:	b11b      	cbz	r3, 8019bf4 <_reclaim_reent+0xb4>
 8019bec:	4620      	mov	r0, r4
 8019bee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019bf2:	4718      	bx	r3
 8019bf4:	bd70      	pop	{r4, r5, r6, pc}
 8019bf6:	bf00      	nop
 8019bf8:	20000920 	.word	0x20000920

08019bfc <_lseek_r>:
 8019bfc:	b538      	push	{r3, r4, r5, lr}
 8019bfe:	4d07      	ldr	r5, [pc, #28]	@ (8019c1c <_lseek_r+0x20>)
 8019c00:	4604      	mov	r4, r0
 8019c02:	4608      	mov	r0, r1
 8019c04:	4611      	mov	r1, r2
 8019c06:	2200      	movs	r2, #0
 8019c08:	602a      	str	r2, [r5, #0]
 8019c0a:	461a      	mov	r2, r3
 8019c0c:	f7e9 fbfd 	bl	800340a <_lseek>
 8019c10:	1c43      	adds	r3, r0, #1
 8019c12:	d102      	bne.n	8019c1a <_lseek_r+0x1e>
 8019c14:	682b      	ldr	r3, [r5, #0]
 8019c16:	b103      	cbz	r3, 8019c1a <_lseek_r+0x1e>
 8019c18:	6023      	str	r3, [r4, #0]
 8019c1a:	bd38      	pop	{r3, r4, r5, pc}
 8019c1c:	20011bc0 	.word	0x20011bc0

08019c20 <_read_r>:
 8019c20:	b538      	push	{r3, r4, r5, lr}
 8019c22:	4d07      	ldr	r5, [pc, #28]	@ (8019c40 <_read_r+0x20>)
 8019c24:	4604      	mov	r4, r0
 8019c26:	4608      	mov	r0, r1
 8019c28:	4611      	mov	r1, r2
 8019c2a:	2200      	movs	r2, #0
 8019c2c:	602a      	str	r2, [r5, #0]
 8019c2e:	461a      	mov	r2, r3
 8019c30:	f7e9 fb8b 	bl	800334a <_read>
 8019c34:	1c43      	adds	r3, r0, #1
 8019c36:	d102      	bne.n	8019c3e <_read_r+0x1e>
 8019c38:	682b      	ldr	r3, [r5, #0]
 8019c3a:	b103      	cbz	r3, 8019c3e <_read_r+0x1e>
 8019c3c:	6023      	str	r3, [r4, #0]
 8019c3e:	bd38      	pop	{r3, r4, r5, pc}
 8019c40:	20011bc0 	.word	0x20011bc0

08019c44 <_sbrk_r>:
 8019c44:	b538      	push	{r3, r4, r5, lr}
 8019c46:	4d06      	ldr	r5, [pc, #24]	@ (8019c60 <_sbrk_r+0x1c>)
 8019c48:	2300      	movs	r3, #0
 8019c4a:	4604      	mov	r4, r0
 8019c4c:	4608      	mov	r0, r1
 8019c4e:	602b      	str	r3, [r5, #0]
 8019c50:	f7e9 fbe8 	bl	8003424 <_sbrk>
 8019c54:	1c43      	adds	r3, r0, #1
 8019c56:	d102      	bne.n	8019c5e <_sbrk_r+0x1a>
 8019c58:	682b      	ldr	r3, [r5, #0]
 8019c5a:	b103      	cbz	r3, 8019c5e <_sbrk_r+0x1a>
 8019c5c:	6023      	str	r3, [r4, #0]
 8019c5e:	bd38      	pop	{r3, r4, r5, pc}
 8019c60:	20011bc0 	.word	0x20011bc0

08019c64 <_write_r>:
 8019c64:	b538      	push	{r3, r4, r5, lr}
 8019c66:	4d07      	ldr	r5, [pc, #28]	@ (8019c84 <_write_r+0x20>)
 8019c68:	4604      	mov	r4, r0
 8019c6a:	4608      	mov	r0, r1
 8019c6c:	4611      	mov	r1, r2
 8019c6e:	2200      	movs	r2, #0
 8019c70:	602a      	str	r2, [r5, #0]
 8019c72:	461a      	mov	r2, r3
 8019c74:	f7e9 fb86 	bl	8003384 <_write>
 8019c78:	1c43      	adds	r3, r0, #1
 8019c7a:	d102      	bne.n	8019c82 <_write_r+0x1e>
 8019c7c:	682b      	ldr	r3, [r5, #0]
 8019c7e:	b103      	cbz	r3, 8019c82 <_write_r+0x1e>
 8019c80:	6023      	str	r3, [r4, #0]
 8019c82:	bd38      	pop	{r3, r4, r5, pc}
 8019c84:	20011bc0 	.word	0x20011bc0

08019c88 <__errno>:
 8019c88:	4b01      	ldr	r3, [pc, #4]	@ (8019c90 <__errno+0x8>)
 8019c8a:	6818      	ldr	r0, [r3, #0]
 8019c8c:	4770      	bx	lr
 8019c8e:	bf00      	nop
 8019c90:	20000920 	.word	0x20000920

08019c94 <__libc_init_array>:
 8019c94:	b570      	push	{r4, r5, r6, lr}
 8019c96:	4d0d      	ldr	r5, [pc, #52]	@ (8019ccc <__libc_init_array+0x38>)
 8019c98:	4c0d      	ldr	r4, [pc, #52]	@ (8019cd0 <__libc_init_array+0x3c>)
 8019c9a:	1b64      	subs	r4, r4, r5
 8019c9c:	10a4      	asrs	r4, r4, #2
 8019c9e:	2600      	movs	r6, #0
 8019ca0:	42a6      	cmp	r6, r4
 8019ca2:	d109      	bne.n	8019cb8 <__libc_init_array+0x24>
 8019ca4:	4d0b      	ldr	r5, [pc, #44]	@ (8019cd4 <__libc_init_array+0x40>)
 8019ca6:	4c0c      	ldr	r4, [pc, #48]	@ (8019cd8 <__libc_init_array+0x44>)
 8019ca8:	f000 fe62 	bl	801a970 <_init>
 8019cac:	1b64      	subs	r4, r4, r5
 8019cae:	10a4      	asrs	r4, r4, #2
 8019cb0:	2600      	movs	r6, #0
 8019cb2:	42a6      	cmp	r6, r4
 8019cb4:	d105      	bne.n	8019cc2 <__libc_init_array+0x2e>
 8019cb6:	bd70      	pop	{r4, r5, r6, pc}
 8019cb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8019cbc:	4798      	blx	r3
 8019cbe:	3601      	adds	r6, #1
 8019cc0:	e7ee      	b.n	8019ca0 <__libc_init_array+0xc>
 8019cc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8019cc6:	4798      	blx	r3
 8019cc8:	3601      	adds	r6, #1
 8019cca:	e7f2      	b.n	8019cb2 <__libc_init_array+0x1e>
 8019ccc:	0801bc28 	.word	0x0801bc28
 8019cd0:	0801bc28 	.word	0x0801bc28
 8019cd4:	0801bc28 	.word	0x0801bc28
 8019cd8:	0801bc3c 	.word	0x0801bc3c

08019cdc <__retarget_lock_init_recursive>:
 8019cdc:	4770      	bx	lr

08019cde <__retarget_lock_acquire_recursive>:
 8019cde:	4770      	bx	lr

08019ce0 <__retarget_lock_release_recursive>:
 8019ce0:	4770      	bx	lr

08019ce2 <strcpy>:
 8019ce2:	4603      	mov	r3, r0
 8019ce4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019ce8:	f803 2b01 	strb.w	r2, [r3], #1
 8019cec:	2a00      	cmp	r2, #0
 8019cee:	d1f9      	bne.n	8019ce4 <strcpy+0x2>
 8019cf0:	4770      	bx	lr

08019cf2 <memcpy>:
 8019cf2:	440a      	add	r2, r1
 8019cf4:	4291      	cmp	r1, r2
 8019cf6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8019cfa:	d100      	bne.n	8019cfe <memcpy+0xc>
 8019cfc:	4770      	bx	lr
 8019cfe:	b510      	push	{r4, lr}
 8019d00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019d04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019d08:	4291      	cmp	r1, r2
 8019d0a:	d1f9      	bne.n	8019d00 <memcpy+0xe>
 8019d0c:	bd10      	pop	{r4, pc}
	...

08019d10 <__assert_func>:
 8019d10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019d12:	4614      	mov	r4, r2
 8019d14:	461a      	mov	r2, r3
 8019d16:	4b09      	ldr	r3, [pc, #36]	@ (8019d3c <__assert_func+0x2c>)
 8019d18:	681b      	ldr	r3, [r3, #0]
 8019d1a:	4605      	mov	r5, r0
 8019d1c:	68d8      	ldr	r0, [r3, #12]
 8019d1e:	b14c      	cbz	r4, 8019d34 <__assert_func+0x24>
 8019d20:	4b07      	ldr	r3, [pc, #28]	@ (8019d40 <__assert_func+0x30>)
 8019d22:	9100      	str	r1, [sp, #0]
 8019d24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019d28:	4906      	ldr	r1, [pc, #24]	@ (8019d44 <__assert_func+0x34>)
 8019d2a:	462b      	mov	r3, r5
 8019d2c:	f000 fd3e 	bl	801a7ac <fiprintf>
 8019d30:	f000 fdd2 	bl	801a8d8 <abort>
 8019d34:	4b04      	ldr	r3, [pc, #16]	@ (8019d48 <__assert_func+0x38>)
 8019d36:	461c      	mov	r4, r3
 8019d38:	e7f3      	b.n	8019d22 <__assert_func+0x12>
 8019d3a:	bf00      	nop
 8019d3c:	20000920 	.word	0x20000920
 8019d40:	0801baaf 	.word	0x0801baaf
 8019d44:	0801babc 	.word	0x0801babc
 8019d48:	0801baea 	.word	0x0801baea

08019d4c <__env_lock>:
 8019d4c:	4801      	ldr	r0, [pc, #4]	@ (8019d54 <__env_lock+0x8>)
 8019d4e:	f7ff bfc6 	b.w	8019cde <__retarget_lock_acquire_recursive>
 8019d52:	bf00      	nop
 8019d54:	20011bc4 	.word	0x20011bc4

08019d58 <__env_unlock>:
 8019d58:	4801      	ldr	r0, [pc, #4]	@ (8019d60 <__env_unlock+0x8>)
 8019d5a:	f7ff bfc1 	b.w	8019ce0 <__retarget_lock_release_recursive>
 8019d5e:	bf00      	nop
 8019d60:	20011bc4 	.word	0x20011bc4

08019d64 <_free_r>:
 8019d64:	b538      	push	{r3, r4, r5, lr}
 8019d66:	4605      	mov	r5, r0
 8019d68:	2900      	cmp	r1, #0
 8019d6a:	d041      	beq.n	8019df0 <_free_r+0x8c>
 8019d6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019d70:	1f0c      	subs	r4, r1, #4
 8019d72:	2b00      	cmp	r3, #0
 8019d74:	bfb8      	it	lt
 8019d76:	18e4      	addlt	r4, r4, r3
 8019d78:	f7ff facc 	bl	8019314 <__malloc_lock>
 8019d7c:	4a1d      	ldr	r2, [pc, #116]	@ (8019df4 <_free_r+0x90>)
 8019d7e:	6813      	ldr	r3, [r2, #0]
 8019d80:	b933      	cbnz	r3, 8019d90 <_free_r+0x2c>
 8019d82:	6063      	str	r3, [r4, #4]
 8019d84:	6014      	str	r4, [r2, #0]
 8019d86:	4628      	mov	r0, r5
 8019d88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019d8c:	f7ff bac8 	b.w	8019320 <__malloc_unlock>
 8019d90:	42a3      	cmp	r3, r4
 8019d92:	d908      	bls.n	8019da6 <_free_r+0x42>
 8019d94:	6820      	ldr	r0, [r4, #0]
 8019d96:	1821      	adds	r1, r4, r0
 8019d98:	428b      	cmp	r3, r1
 8019d9a:	bf01      	itttt	eq
 8019d9c:	6819      	ldreq	r1, [r3, #0]
 8019d9e:	685b      	ldreq	r3, [r3, #4]
 8019da0:	1809      	addeq	r1, r1, r0
 8019da2:	6021      	streq	r1, [r4, #0]
 8019da4:	e7ed      	b.n	8019d82 <_free_r+0x1e>
 8019da6:	461a      	mov	r2, r3
 8019da8:	685b      	ldr	r3, [r3, #4]
 8019daa:	b10b      	cbz	r3, 8019db0 <_free_r+0x4c>
 8019dac:	42a3      	cmp	r3, r4
 8019dae:	d9fa      	bls.n	8019da6 <_free_r+0x42>
 8019db0:	6811      	ldr	r1, [r2, #0]
 8019db2:	1850      	adds	r0, r2, r1
 8019db4:	42a0      	cmp	r0, r4
 8019db6:	d10b      	bne.n	8019dd0 <_free_r+0x6c>
 8019db8:	6820      	ldr	r0, [r4, #0]
 8019dba:	4401      	add	r1, r0
 8019dbc:	1850      	adds	r0, r2, r1
 8019dbe:	4283      	cmp	r3, r0
 8019dc0:	6011      	str	r1, [r2, #0]
 8019dc2:	d1e0      	bne.n	8019d86 <_free_r+0x22>
 8019dc4:	6818      	ldr	r0, [r3, #0]
 8019dc6:	685b      	ldr	r3, [r3, #4]
 8019dc8:	6053      	str	r3, [r2, #4]
 8019dca:	4408      	add	r0, r1
 8019dcc:	6010      	str	r0, [r2, #0]
 8019dce:	e7da      	b.n	8019d86 <_free_r+0x22>
 8019dd0:	d902      	bls.n	8019dd8 <_free_r+0x74>
 8019dd2:	230c      	movs	r3, #12
 8019dd4:	602b      	str	r3, [r5, #0]
 8019dd6:	e7d6      	b.n	8019d86 <_free_r+0x22>
 8019dd8:	6820      	ldr	r0, [r4, #0]
 8019dda:	1821      	adds	r1, r4, r0
 8019ddc:	428b      	cmp	r3, r1
 8019dde:	bf04      	itt	eq
 8019de0:	6819      	ldreq	r1, [r3, #0]
 8019de2:	685b      	ldreq	r3, [r3, #4]
 8019de4:	6063      	str	r3, [r4, #4]
 8019de6:	bf04      	itt	eq
 8019de8:	1809      	addeq	r1, r1, r0
 8019dea:	6021      	streq	r1, [r4, #0]
 8019dec:	6054      	str	r4, [r2, #4]
 8019dee:	e7ca      	b.n	8019d86 <_free_r+0x22>
 8019df0:	bd38      	pop	{r3, r4, r5, pc}
 8019df2:	bf00      	nop
 8019df4:	20011a80 	.word	0x20011a80

08019df8 <_malloc_usable_size_r>:
 8019df8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019dfc:	1f18      	subs	r0, r3, #4
 8019dfe:	2b00      	cmp	r3, #0
 8019e00:	bfbc      	itt	lt
 8019e02:	580b      	ldrlt	r3, [r1, r0]
 8019e04:	18c0      	addlt	r0, r0, r3
 8019e06:	4770      	bx	lr

08019e08 <__ssputs_r>:
 8019e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019e0c:	688e      	ldr	r6, [r1, #8]
 8019e0e:	461f      	mov	r7, r3
 8019e10:	42be      	cmp	r6, r7
 8019e12:	680b      	ldr	r3, [r1, #0]
 8019e14:	4682      	mov	sl, r0
 8019e16:	460c      	mov	r4, r1
 8019e18:	4690      	mov	r8, r2
 8019e1a:	d82d      	bhi.n	8019e78 <__ssputs_r+0x70>
 8019e1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019e20:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8019e24:	d026      	beq.n	8019e74 <__ssputs_r+0x6c>
 8019e26:	6965      	ldr	r5, [r4, #20]
 8019e28:	6909      	ldr	r1, [r1, #16]
 8019e2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019e2e:	eba3 0901 	sub.w	r9, r3, r1
 8019e32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019e36:	1c7b      	adds	r3, r7, #1
 8019e38:	444b      	add	r3, r9
 8019e3a:	106d      	asrs	r5, r5, #1
 8019e3c:	429d      	cmp	r5, r3
 8019e3e:	bf38      	it	cc
 8019e40:	461d      	movcc	r5, r3
 8019e42:	0553      	lsls	r3, r2, #21
 8019e44:	d527      	bpl.n	8019e96 <__ssputs_r+0x8e>
 8019e46:	4629      	mov	r1, r5
 8019e48:	f7ff f9e4 	bl	8019214 <_malloc_r>
 8019e4c:	4606      	mov	r6, r0
 8019e4e:	b360      	cbz	r0, 8019eaa <__ssputs_r+0xa2>
 8019e50:	6921      	ldr	r1, [r4, #16]
 8019e52:	464a      	mov	r2, r9
 8019e54:	f7ff ff4d 	bl	8019cf2 <memcpy>
 8019e58:	89a3      	ldrh	r3, [r4, #12]
 8019e5a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8019e5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019e62:	81a3      	strh	r3, [r4, #12]
 8019e64:	6126      	str	r6, [r4, #16]
 8019e66:	6165      	str	r5, [r4, #20]
 8019e68:	444e      	add	r6, r9
 8019e6a:	eba5 0509 	sub.w	r5, r5, r9
 8019e6e:	6026      	str	r6, [r4, #0]
 8019e70:	60a5      	str	r5, [r4, #8]
 8019e72:	463e      	mov	r6, r7
 8019e74:	42be      	cmp	r6, r7
 8019e76:	d900      	bls.n	8019e7a <__ssputs_r+0x72>
 8019e78:	463e      	mov	r6, r7
 8019e7a:	6820      	ldr	r0, [r4, #0]
 8019e7c:	4632      	mov	r2, r6
 8019e7e:	4641      	mov	r1, r8
 8019e80:	f7ff fdf6 	bl	8019a70 <memmove>
 8019e84:	68a3      	ldr	r3, [r4, #8]
 8019e86:	1b9b      	subs	r3, r3, r6
 8019e88:	60a3      	str	r3, [r4, #8]
 8019e8a:	6823      	ldr	r3, [r4, #0]
 8019e8c:	4433      	add	r3, r6
 8019e8e:	6023      	str	r3, [r4, #0]
 8019e90:	2000      	movs	r0, #0
 8019e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e96:	462a      	mov	r2, r5
 8019e98:	f7ff fabc 	bl	8019414 <_realloc_r>
 8019e9c:	4606      	mov	r6, r0
 8019e9e:	2800      	cmp	r0, #0
 8019ea0:	d1e0      	bne.n	8019e64 <__ssputs_r+0x5c>
 8019ea2:	6921      	ldr	r1, [r4, #16]
 8019ea4:	4650      	mov	r0, sl
 8019ea6:	f7ff ff5d 	bl	8019d64 <_free_r>
 8019eaa:	230c      	movs	r3, #12
 8019eac:	f8ca 3000 	str.w	r3, [sl]
 8019eb0:	89a3      	ldrh	r3, [r4, #12]
 8019eb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019eb6:	81a3      	strh	r3, [r4, #12]
 8019eb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019ebc:	e7e9      	b.n	8019e92 <__ssputs_r+0x8a>
	...

08019ec0 <_svfiprintf_r>:
 8019ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ec4:	4698      	mov	r8, r3
 8019ec6:	898b      	ldrh	r3, [r1, #12]
 8019ec8:	061b      	lsls	r3, r3, #24
 8019eca:	b09d      	sub	sp, #116	@ 0x74
 8019ecc:	4607      	mov	r7, r0
 8019ece:	460d      	mov	r5, r1
 8019ed0:	4614      	mov	r4, r2
 8019ed2:	d510      	bpl.n	8019ef6 <_svfiprintf_r+0x36>
 8019ed4:	690b      	ldr	r3, [r1, #16]
 8019ed6:	b973      	cbnz	r3, 8019ef6 <_svfiprintf_r+0x36>
 8019ed8:	2140      	movs	r1, #64	@ 0x40
 8019eda:	f7ff f99b 	bl	8019214 <_malloc_r>
 8019ede:	6028      	str	r0, [r5, #0]
 8019ee0:	6128      	str	r0, [r5, #16]
 8019ee2:	b930      	cbnz	r0, 8019ef2 <_svfiprintf_r+0x32>
 8019ee4:	230c      	movs	r3, #12
 8019ee6:	603b      	str	r3, [r7, #0]
 8019ee8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019eec:	b01d      	add	sp, #116	@ 0x74
 8019eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ef2:	2340      	movs	r3, #64	@ 0x40
 8019ef4:	616b      	str	r3, [r5, #20]
 8019ef6:	2300      	movs	r3, #0
 8019ef8:	9309      	str	r3, [sp, #36]	@ 0x24
 8019efa:	2320      	movs	r3, #32
 8019efc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019f00:	f8cd 800c 	str.w	r8, [sp, #12]
 8019f04:	2330      	movs	r3, #48	@ 0x30
 8019f06:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801a0a4 <_svfiprintf_r+0x1e4>
 8019f0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019f0e:	f04f 0901 	mov.w	r9, #1
 8019f12:	4623      	mov	r3, r4
 8019f14:	469a      	mov	sl, r3
 8019f16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019f1a:	b10a      	cbz	r2, 8019f20 <_svfiprintf_r+0x60>
 8019f1c:	2a25      	cmp	r2, #37	@ 0x25
 8019f1e:	d1f9      	bne.n	8019f14 <_svfiprintf_r+0x54>
 8019f20:	ebba 0b04 	subs.w	fp, sl, r4
 8019f24:	d00b      	beq.n	8019f3e <_svfiprintf_r+0x7e>
 8019f26:	465b      	mov	r3, fp
 8019f28:	4622      	mov	r2, r4
 8019f2a:	4629      	mov	r1, r5
 8019f2c:	4638      	mov	r0, r7
 8019f2e:	f7ff ff6b 	bl	8019e08 <__ssputs_r>
 8019f32:	3001      	adds	r0, #1
 8019f34:	f000 80a7 	beq.w	801a086 <_svfiprintf_r+0x1c6>
 8019f38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019f3a:	445a      	add	r2, fp
 8019f3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8019f3e:	f89a 3000 	ldrb.w	r3, [sl]
 8019f42:	2b00      	cmp	r3, #0
 8019f44:	f000 809f 	beq.w	801a086 <_svfiprintf_r+0x1c6>
 8019f48:	2300      	movs	r3, #0
 8019f4a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019f4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019f52:	f10a 0a01 	add.w	sl, sl, #1
 8019f56:	9304      	str	r3, [sp, #16]
 8019f58:	9307      	str	r3, [sp, #28]
 8019f5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019f5e:	931a      	str	r3, [sp, #104]	@ 0x68
 8019f60:	4654      	mov	r4, sl
 8019f62:	2205      	movs	r2, #5
 8019f64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019f68:	484e      	ldr	r0, [pc, #312]	@ (801a0a4 <_svfiprintf_r+0x1e4>)
 8019f6a:	f7e6 f969 	bl	8000240 <memchr>
 8019f6e:	9a04      	ldr	r2, [sp, #16]
 8019f70:	b9d8      	cbnz	r0, 8019faa <_svfiprintf_r+0xea>
 8019f72:	06d0      	lsls	r0, r2, #27
 8019f74:	bf44      	itt	mi
 8019f76:	2320      	movmi	r3, #32
 8019f78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019f7c:	0711      	lsls	r1, r2, #28
 8019f7e:	bf44      	itt	mi
 8019f80:	232b      	movmi	r3, #43	@ 0x2b
 8019f82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019f86:	f89a 3000 	ldrb.w	r3, [sl]
 8019f8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8019f8c:	d015      	beq.n	8019fba <_svfiprintf_r+0xfa>
 8019f8e:	9a07      	ldr	r2, [sp, #28]
 8019f90:	4654      	mov	r4, sl
 8019f92:	2000      	movs	r0, #0
 8019f94:	f04f 0c0a 	mov.w	ip, #10
 8019f98:	4621      	mov	r1, r4
 8019f9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019f9e:	3b30      	subs	r3, #48	@ 0x30
 8019fa0:	2b09      	cmp	r3, #9
 8019fa2:	d94b      	bls.n	801a03c <_svfiprintf_r+0x17c>
 8019fa4:	b1b0      	cbz	r0, 8019fd4 <_svfiprintf_r+0x114>
 8019fa6:	9207      	str	r2, [sp, #28]
 8019fa8:	e014      	b.n	8019fd4 <_svfiprintf_r+0x114>
 8019faa:	eba0 0308 	sub.w	r3, r0, r8
 8019fae:	fa09 f303 	lsl.w	r3, r9, r3
 8019fb2:	4313      	orrs	r3, r2
 8019fb4:	9304      	str	r3, [sp, #16]
 8019fb6:	46a2      	mov	sl, r4
 8019fb8:	e7d2      	b.n	8019f60 <_svfiprintf_r+0xa0>
 8019fba:	9b03      	ldr	r3, [sp, #12]
 8019fbc:	1d19      	adds	r1, r3, #4
 8019fbe:	681b      	ldr	r3, [r3, #0]
 8019fc0:	9103      	str	r1, [sp, #12]
 8019fc2:	2b00      	cmp	r3, #0
 8019fc4:	bfbb      	ittet	lt
 8019fc6:	425b      	neglt	r3, r3
 8019fc8:	f042 0202 	orrlt.w	r2, r2, #2
 8019fcc:	9307      	strge	r3, [sp, #28]
 8019fce:	9307      	strlt	r3, [sp, #28]
 8019fd0:	bfb8      	it	lt
 8019fd2:	9204      	strlt	r2, [sp, #16]
 8019fd4:	7823      	ldrb	r3, [r4, #0]
 8019fd6:	2b2e      	cmp	r3, #46	@ 0x2e
 8019fd8:	d10a      	bne.n	8019ff0 <_svfiprintf_r+0x130>
 8019fda:	7863      	ldrb	r3, [r4, #1]
 8019fdc:	2b2a      	cmp	r3, #42	@ 0x2a
 8019fde:	d132      	bne.n	801a046 <_svfiprintf_r+0x186>
 8019fe0:	9b03      	ldr	r3, [sp, #12]
 8019fe2:	1d1a      	adds	r2, r3, #4
 8019fe4:	681b      	ldr	r3, [r3, #0]
 8019fe6:	9203      	str	r2, [sp, #12]
 8019fe8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019fec:	3402      	adds	r4, #2
 8019fee:	9305      	str	r3, [sp, #20]
 8019ff0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801a0b4 <_svfiprintf_r+0x1f4>
 8019ff4:	7821      	ldrb	r1, [r4, #0]
 8019ff6:	2203      	movs	r2, #3
 8019ff8:	4650      	mov	r0, sl
 8019ffa:	f7e6 f921 	bl	8000240 <memchr>
 8019ffe:	b138      	cbz	r0, 801a010 <_svfiprintf_r+0x150>
 801a000:	9b04      	ldr	r3, [sp, #16]
 801a002:	eba0 000a 	sub.w	r0, r0, sl
 801a006:	2240      	movs	r2, #64	@ 0x40
 801a008:	4082      	lsls	r2, r0
 801a00a:	4313      	orrs	r3, r2
 801a00c:	3401      	adds	r4, #1
 801a00e:	9304      	str	r3, [sp, #16]
 801a010:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a014:	4824      	ldr	r0, [pc, #144]	@ (801a0a8 <_svfiprintf_r+0x1e8>)
 801a016:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a01a:	2206      	movs	r2, #6
 801a01c:	f7e6 f910 	bl	8000240 <memchr>
 801a020:	2800      	cmp	r0, #0
 801a022:	d036      	beq.n	801a092 <_svfiprintf_r+0x1d2>
 801a024:	4b21      	ldr	r3, [pc, #132]	@ (801a0ac <_svfiprintf_r+0x1ec>)
 801a026:	bb1b      	cbnz	r3, 801a070 <_svfiprintf_r+0x1b0>
 801a028:	9b03      	ldr	r3, [sp, #12]
 801a02a:	3307      	adds	r3, #7
 801a02c:	f023 0307 	bic.w	r3, r3, #7
 801a030:	3308      	adds	r3, #8
 801a032:	9303      	str	r3, [sp, #12]
 801a034:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a036:	4433      	add	r3, r6
 801a038:	9309      	str	r3, [sp, #36]	@ 0x24
 801a03a:	e76a      	b.n	8019f12 <_svfiprintf_r+0x52>
 801a03c:	fb0c 3202 	mla	r2, ip, r2, r3
 801a040:	460c      	mov	r4, r1
 801a042:	2001      	movs	r0, #1
 801a044:	e7a8      	b.n	8019f98 <_svfiprintf_r+0xd8>
 801a046:	2300      	movs	r3, #0
 801a048:	3401      	adds	r4, #1
 801a04a:	9305      	str	r3, [sp, #20]
 801a04c:	4619      	mov	r1, r3
 801a04e:	f04f 0c0a 	mov.w	ip, #10
 801a052:	4620      	mov	r0, r4
 801a054:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a058:	3a30      	subs	r2, #48	@ 0x30
 801a05a:	2a09      	cmp	r2, #9
 801a05c:	d903      	bls.n	801a066 <_svfiprintf_r+0x1a6>
 801a05e:	2b00      	cmp	r3, #0
 801a060:	d0c6      	beq.n	8019ff0 <_svfiprintf_r+0x130>
 801a062:	9105      	str	r1, [sp, #20]
 801a064:	e7c4      	b.n	8019ff0 <_svfiprintf_r+0x130>
 801a066:	fb0c 2101 	mla	r1, ip, r1, r2
 801a06a:	4604      	mov	r4, r0
 801a06c:	2301      	movs	r3, #1
 801a06e:	e7f0      	b.n	801a052 <_svfiprintf_r+0x192>
 801a070:	ab03      	add	r3, sp, #12
 801a072:	9300      	str	r3, [sp, #0]
 801a074:	462a      	mov	r2, r5
 801a076:	4b0e      	ldr	r3, [pc, #56]	@ (801a0b0 <_svfiprintf_r+0x1f0>)
 801a078:	a904      	add	r1, sp, #16
 801a07a:	4638      	mov	r0, r7
 801a07c:	f3af 8000 	nop.w
 801a080:	1c42      	adds	r2, r0, #1
 801a082:	4606      	mov	r6, r0
 801a084:	d1d6      	bne.n	801a034 <_svfiprintf_r+0x174>
 801a086:	89ab      	ldrh	r3, [r5, #12]
 801a088:	065b      	lsls	r3, r3, #25
 801a08a:	f53f af2d 	bmi.w	8019ee8 <_svfiprintf_r+0x28>
 801a08e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a090:	e72c      	b.n	8019eec <_svfiprintf_r+0x2c>
 801a092:	ab03      	add	r3, sp, #12
 801a094:	9300      	str	r3, [sp, #0]
 801a096:	462a      	mov	r2, r5
 801a098:	4b05      	ldr	r3, [pc, #20]	@ (801a0b0 <_svfiprintf_r+0x1f0>)
 801a09a:	a904      	add	r1, sp, #16
 801a09c:	4638      	mov	r0, r7
 801a09e:	f000 f9bb 	bl	801a418 <_printf_i>
 801a0a2:	e7ed      	b.n	801a080 <_svfiprintf_r+0x1c0>
 801a0a4:	0801baeb 	.word	0x0801baeb
 801a0a8:	0801baf5 	.word	0x0801baf5
 801a0ac:	00000000 	.word	0x00000000
 801a0b0:	08019e09 	.word	0x08019e09
 801a0b4:	0801baf1 	.word	0x0801baf1

0801a0b8 <__sfputc_r>:
 801a0b8:	6893      	ldr	r3, [r2, #8]
 801a0ba:	3b01      	subs	r3, #1
 801a0bc:	2b00      	cmp	r3, #0
 801a0be:	b410      	push	{r4}
 801a0c0:	6093      	str	r3, [r2, #8]
 801a0c2:	da08      	bge.n	801a0d6 <__sfputc_r+0x1e>
 801a0c4:	6994      	ldr	r4, [r2, #24]
 801a0c6:	42a3      	cmp	r3, r4
 801a0c8:	db01      	blt.n	801a0ce <__sfputc_r+0x16>
 801a0ca:	290a      	cmp	r1, #10
 801a0cc:	d103      	bne.n	801a0d6 <__sfputc_r+0x1e>
 801a0ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a0d2:	f7ff bc29 	b.w	8019928 <__swbuf_r>
 801a0d6:	6813      	ldr	r3, [r2, #0]
 801a0d8:	1c58      	adds	r0, r3, #1
 801a0da:	6010      	str	r0, [r2, #0]
 801a0dc:	7019      	strb	r1, [r3, #0]
 801a0de:	4608      	mov	r0, r1
 801a0e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a0e4:	4770      	bx	lr

0801a0e6 <__sfputs_r>:
 801a0e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a0e8:	4606      	mov	r6, r0
 801a0ea:	460f      	mov	r7, r1
 801a0ec:	4614      	mov	r4, r2
 801a0ee:	18d5      	adds	r5, r2, r3
 801a0f0:	42ac      	cmp	r4, r5
 801a0f2:	d101      	bne.n	801a0f8 <__sfputs_r+0x12>
 801a0f4:	2000      	movs	r0, #0
 801a0f6:	e007      	b.n	801a108 <__sfputs_r+0x22>
 801a0f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a0fc:	463a      	mov	r2, r7
 801a0fe:	4630      	mov	r0, r6
 801a100:	f7ff ffda 	bl	801a0b8 <__sfputc_r>
 801a104:	1c43      	adds	r3, r0, #1
 801a106:	d1f3      	bne.n	801a0f0 <__sfputs_r+0xa>
 801a108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a10c <_vfiprintf_r>:
 801a10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a110:	460d      	mov	r5, r1
 801a112:	b09d      	sub	sp, #116	@ 0x74
 801a114:	4614      	mov	r4, r2
 801a116:	4698      	mov	r8, r3
 801a118:	4606      	mov	r6, r0
 801a11a:	b118      	cbz	r0, 801a124 <_vfiprintf_r+0x18>
 801a11c:	6a03      	ldr	r3, [r0, #32]
 801a11e:	b90b      	cbnz	r3, 801a124 <_vfiprintf_r+0x18>
 801a120:	f7ff faaa 	bl	8019678 <__sinit>
 801a124:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a126:	07d9      	lsls	r1, r3, #31
 801a128:	d405      	bmi.n	801a136 <_vfiprintf_r+0x2a>
 801a12a:	89ab      	ldrh	r3, [r5, #12]
 801a12c:	059a      	lsls	r2, r3, #22
 801a12e:	d402      	bmi.n	801a136 <_vfiprintf_r+0x2a>
 801a130:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a132:	f7ff fdd4 	bl	8019cde <__retarget_lock_acquire_recursive>
 801a136:	89ab      	ldrh	r3, [r5, #12]
 801a138:	071b      	lsls	r3, r3, #28
 801a13a:	d501      	bpl.n	801a140 <_vfiprintf_r+0x34>
 801a13c:	692b      	ldr	r3, [r5, #16]
 801a13e:	b99b      	cbnz	r3, 801a168 <_vfiprintf_r+0x5c>
 801a140:	4629      	mov	r1, r5
 801a142:	4630      	mov	r0, r6
 801a144:	f7ff fc2e 	bl	80199a4 <__swsetup_r>
 801a148:	b170      	cbz	r0, 801a168 <_vfiprintf_r+0x5c>
 801a14a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a14c:	07dc      	lsls	r4, r3, #31
 801a14e:	d504      	bpl.n	801a15a <_vfiprintf_r+0x4e>
 801a150:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a154:	b01d      	add	sp, #116	@ 0x74
 801a156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a15a:	89ab      	ldrh	r3, [r5, #12]
 801a15c:	0598      	lsls	r0, r3, #22
 801a15e:	d4f7      	bmi.n	801a150 <_vfiprintf_r+0x44>
 801a160:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a162:	f7ff fdbd 	bl	8019ce0 <__retarget_lock_release_recursive>
 801a166:	e7f3      	b.n	801a150 <_vfiprintf_r+0x44>
 801a168:	2300      	movs	r3, #0
 801a16a:	9309      	str	r3, [sp, #36]	@ 0x24
 801a16c:	2320      	movs	r3, #32
 801a16e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a172:	f8cd 800c 	str.w	r8, [sp, #12]
 801a176:	2330      	movs	r3, #48	@ 0x30
 801a178:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801a328 <_vfiprintf_r+0x21c>
 801a17c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a180:	f04f 0901 	mov.w	r9, #1
 801a184:	4623      	mov	r3, r4
 801a186:	469a      	mov	sl, r3
 801a188:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a18c:	b10a      	cbz	r2, 801a192 <_vfiprintf_r+0x86>
 801a18e:	2a25      	cmp	r2, #37	@ 0x25
 801a190:	d1f9      	bne.n	801a186 <_vfiprintf_r+0x7a>
 801a192:	ebba 0b04 	subs.w	fp, sl, r4
 801a196:	d00b      	beq.n	801a1b0 <_vfiprintf_r+0xa4>
 801a198:	465b      	mov	r3, fp
 801a19a:	4622      	mov	r2, r4
 801a19c:	4629      	mov	r1, r5
 801a19e:	4630      	mov	r0, r6
 801a1a0:	f7ff ffa1 	bl	801a0e6 <__sfputs_r>
 801a1a4:	3001      	adds	r0, #1
 801a1a6:	f000 80a7 	beq.w	801a2f8 <_vfiprintf_r+0x1ec>
 801a1aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a1ac:	445a      	add	r2, fp
 801a1ae:	9209      	str	r2, [sp, #36]	@ 0x24
 801a1b0:	f89a 3000 	ldrb.w	r3, [sl]
 801a1b4:	2b00      	cmp	r3, #0
 801a1b6:	f000 809f 	beq.w	801a2f8 <_vfiprintf_r+0x1ec>
 801a1ba:	2300      	movs	r3, #0
 801a1bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a1c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a1c4:	f10a 0a01 	add.w	sl, sl, #1
 801a1c8:	9304      	str	r3, [sp, #16]
 801a1ca:	9307      	str	r3, [sp, #28]
 801a1cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a1d0:	931a      	str	r3, [sp, #104]	@ 0x68
 801a1d2:	4654      	mov	r4, sl
 801a1d4:	2205      	movs	r2, #5
 801a1d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a1da:	4853      	ldr	r0, [pc, #332]	@ (801a328 <_vfiprintf_r+0x21c>)
 801a1dc:	f7e6 f830 	bl	8000240 <memchr>
 801a1e0:	9a04      	ldr	r2, [sp, #16]
 801a1e2:	b9d8      	cbnz	r0, 801a21c <_vfiprintf_r+0x110>
 801a1e4:	06d1      	lsls	r1, r2, #27
 801a1e6:	bf44      	itt	mi
 801a1e8:	2320      	movmi	r3, #32
 801a1ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a1ee:	0713      	lsls	r3, r2, #28
 801a1f0:	bf44      	itt	mi
 801a1f2:	232b      	movmi	r3, #43	@ 0x2b
 801a1f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a1f8:	f89a 3000 	ldrb.w	r3, [sl]
 801a1fc:	2b2a      	cmp	r3, #42	@ 0x2a
 801a1fe:	d015      	beq.n	801a22c <_vfiprintf_r+0x120>
 801a200:	9a07      	ldr	r2, [sp, #28]
 801a202:	4654      	mov	r4, sl
 801a204:	2000      	movs	r0, #0
 801a206:	f04f 0c0a 	mov.w	ip, #10
 801a20a:	4621      	mov	r1, r4
 801a20c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a210:	3b30      	subs	r3, #48	@ 0x30
 801a212:	2b09      	cmp	r3, #9
 801a214:	d94b      	bls.n	801a2ae <_vfiprintf_r+0x1a2>
 801a216:	b1b0      	cbz	r0, 801a246 <_vfiprintf_r+0x13a>
 801a218:	9207      	str	r2, [sp, #28]
 801a21a:	e014      	b.n	801a246 <_vfiprintf_r+0x13a>
 801a21c:	eba0 0308 	sub.w	r3, r0, r8
 801a220:	fa09 f303 	lsl.w	r3, r9, r3
 801a224:	4313      	orrs	r3, r2
 801a226:	9304      	str	r3, [sp, #16]
 801a228:	46a2      	mov	sl, r4
 801a22a:	e7d2      	b.n	801a1d2 <_vfiprintf_r+0xc6>
 801a22c:	9b03      	ldr	r3, [sp, #12]
 801a22e:	1d19      	adds	r1, r3, #4
 801a230:	681b      	ldr	r3, [r3, #0]
 801a232:	9103      	str	r1, [sp, #12]
 801a234:	2b00      	cmp	r3, #0
 801a236:	bfbb      	ittet	lt
 801a238:	425b      	neglt	r3, r3
 801a23a:	f042 0202 	orrlt.w	r2, r2, #2
 801a23e:	9307      	strge	r3, [sp, #28]
 801a240:	9307      	strlt	r3, [sp, #28]
 801a242:	bfb8      	it	lt
 801a244:	9204      	strlt	r2, [sp, #16]
 801a246:	7823      	ldrb	r3, [r4, #0]
 801a248:	2b2e      	cmp	r3, #46	@ 0x2e
 801a24a:	d10a      	bne.n	801a262 <_vfiprintf_r+0x156>
 801a24c:	7863      	ldrb	r3, [r4, #1]
 801a24e:	2b2a      	cmp	r3, #42	@ 0x2a
 801a250:	d132      	bne.n	801a2b8 <_vfiprintf_r+0x1ac>
 801a252:	9b03      	ldr	r3, [sp, #12]
 801a254:	1d1a      	adds	r2, r3, #4
 801a256:	681b      	ldr	r3, [r3, #0]
 801a258:	9203      	str	r2, [sp, #12]
 801a25a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a25e:	3402      	adds	r4, #2
 801a260:	9305      	str	r3, [sp, #20]
 801a262:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801a338 <_vfiprintf_r+0x22c>
 801a266:	7821      	ldrb	r1, [r4, #0]
 801a268:	2203      	movs	r2, #3
 801a26a:	4650      	mov	r0, sl
 801a26c:	f7e5 ffe8 	bl	8000240 <memchr>
 801a270:	b138      	cbz	r0, 801a282 <_vfiprintf_r+0x176>
 801a272:	9b04      	ldr	r3, [sp, #16]
 801a274:	eba0 000a 	sub.w	r0, r0, sl
 801a278:	2240      	movs	r2, #64	@ 0x40
 801a27a:	4082      	lsls	r2, r0
 801a27c:	4313      	orrs	r3, r2
 801a27e:	3401      	adds	r4, #1
 801a280:	9304      	str	r3, [sp, #16]
 801a282:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a286:	4829      	ldr	r0, [pc, #164]	@ (801a32c <_vfiprintf_r+0x220>)
 801a288:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a28c:	2206      	movs	r2, #6
 801a28e:	f7e5 ffd7 	bl	8000240 <memchr>
 801a292:	2800      	cmp	r0, #0
 801a294:	d03f      	beq.n	801a316 <_vfiprintf_r+0x20a>
 801a296:	4b26      	ldr	r3, [pc, #152]	@ (801a330 <_vfiprintf_r+0x224>)
 801a298:	bb1b      	cbnz	r3, 801a2e2 <_vfiprintf_r+0x1d6>
 801a29a:	9b03      	ldr	r3, [sp, #12]
 801a29c:	3307      	adds	r3, #7
 801a29e:	f023 0307 	bic.w	r3, r3, #7
 801a2a2:	3308      	adds	r3, #8
 801a2a4:	9303      	str	r3, [sp, #12]
 801a2a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a2a8:	443b      	add	r3, r7
 801a2aa:	9309      	str	r3, [sp, #36]	@ 0x24
 801a2ac:	e76a      	b.n	801a184 <_vfiprintf_r+0x78>
 801a2ae:	fb0c 3202 	mla	r2, ip, r2, r3
 801a2b2:	460c      	mov	r4, r1
 801a2b4:	2001      	movs	r0, #1
 801a2b6:	e7a8      	b.n	801a20a <_vfiprintf_r+0xfe>
 801a2b8:	2300      	movs	r3, #0
 801a2ba:	3401      	adds	r4, #1
 801a2bc:	9305      	str	r3, [sp, #20]
 801a2be:	4619      	mov	r1, r3
 801a2c0:	f04f 0c0a 	mov.w	ip, #10
 801a2c4:	4620      	mov	r0, r4
 801a2c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a2ca:	3a30      	subs	r2, #48	@ 0x30
 801a2cc:	2a09      	cmp	r2, #9
 801a2ce:	d903      	bls.n	801a2d8 <_vfiprintf_r+0x1cc>
 801a2d0:	2b00      	cmp	r3, #0
 801a2d2:	d0c6      	beq.n	801a262 <_vfiprintf_r+0x156>
 801a2d4:	9105      	str	r1, [sp, #20]
 801a2d6:	e7c4      	b.n	801a262 <_vfiprintf_r+0x156>
 801a2d8:	fb0c 2101 	mla	r1, ip, r1, r2
 801a2dc:	4604      	mov	r4, r0
 801a2de:	2301      	movs	r3, #1
 801a2e0:	e7f0      	b.n	801a2c4 <_vfiprintf_r+0x1b8>
 801a2e2:	ab03      	add	r3, sp, #12
 801a2e4:	9300      	str	r3, [sp, #0]
 801a2e6:	462a      	mov	r2, r5
 801a2e8:	4b12      	ldr	r3, [pc, #72]	@ (801a334 <_vfiprintf_r+0x228>)
 801a2ea:	a904      	add	r1, sp, #16
 801a2ec:	4630      	mov	r0, r6
 801a2ee:	f3af 8000 	nop.w
 801a2f2:	4607      	mov	r7, r0
 801a2f4:	1c78      	adds	r0, r7, #1
 801a2f6:	d1d6      	bne.n	801a2a6 <_vfiprintf_r+0x19a>
 801a2f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a2fa:	07d9      	lsls	r1, r3, #31
 801a2fc:	d405      	bmi.n	801a30a <_vfiprintf_r+0x1fe>
 801a2fe:	89ab      	ldrh	r3, [r5, #12]
 801a300:	059a      	lsls	r2, r3, #22
 801a302:	d402      	bmi.n	801a30a <_vfiprintf_r+0x1fe>
 801a304:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a306:	f7ff fceb 	bl	8019ce0 <__retarget_lock_release_recursive>
 801a30a:	89ab      	ldrh	r3, [r5, #12]
 801a30c:	065b      	lsls	r3, r3, #25
 801a30e:	f53f af1f 	bmi.w	801a150 <_vfiprintf_r+0x44>
 801a312:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a314:	e71e      	b.n	801a154 <_vfiprintf_r+0x48>
 801a316:	ab03      	add	r3, sp, #12
 801a318:	9300      	str	r3, [sp, #0]
 801a31a:	462a      	mov	r2, r5
 801a31c:	4b05      	ldr	r3, [pc, #20]	@ (801a334 <_vfiprintf_r+0x228>)
 801a31e:	a904      	add	r1, sp, #16
 801a320:	4630      	mov	r0, r6
 801a322:	f000 f879 	bl	801a418 <_printf_i>
 801a326:	e7e4      	b.n	801a2f2 <_vfiprintf_r+0x1e6>
 801a328:	0801baeb 	.word	0x0801baeb
 801a32c:	0801baf5 	.word	0x0801baf5
 801a330:	00000000 	.word	0x00000000
 801a334:	0801a0e7 	.word	0x0801a0e7
 801a338:	0801baf1 	.word	0x0801baf1

0801a33c <_printf_common>:
 801a33c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a340:	4616      	mov	r6, r2
 801a342:	4698      	mov	r8, r3
 801a344:	688a      	ldr	r2, [r1, #8]
 801a346:	690b      	ldr	r3, [r1, #16]
 801a348:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a34c:	4293      	cmp	r3, r2
 801a34e:	bfb8      	it	lt
 801a350:	4613      	movlt	r3, r2
 801a352:	6033      	str	r3, [r6, #0]
 801a354:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801a358:	4607      	mov	r7, r0
 801a35a:	460c      	mov	r4, r1
 801a35c:	b10a      	cbz	r2, 801a362 <_printf_common+0x26>
 801a35e:	3301      	adds	r3, #1
 801a360:	6033      	str	r3, [r6, #0]
 801a362:	6823      	ldr	r3, [r4, #0]
 801a364:	0699      	lsls	r1, r3, #26
 801a366:	bf42      	ittt	mi
 801a368:	6833      	ldrmi	r3, [r6, #0]
 801a36a:	3302      	addmi	r3, #2
 801a36c:	6033      	strmi	r3, [r6, #0]
 801a36e:	6825      	ldr	r5, [r4, #0]
 801a370:	f015 0506 	ands.w	r5, r5, #6
 801a374:	d106      	bne.n	801a384 <_printf_common+0x48>
 801a376:	f104 0a19 	add.w	sl, r4, #25
 801a37a:	68e3      	ldr	r3, [r4, #12]
 801a37c:	6832      	ldr	r2, [r6, #0]
 801a37e:	1a9b      	subs	r3, r3, r2
 801a380:	42ab      	cmp	r3, r5
 801a382:	dc26      	bgt.n	801a3d2 <_printf_common+0x96>
 801a384:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801a388:	6822      	ldr	r2, [r4, #0]
 801a38a:	3b00      	subs	r3, #0
 801a38c:	bf18      	it	ne
 801a38e:	2301      	movne	r3, #1
 801a390:	0692      	lsls	r2, r2, #26
 801a392:	d42b      	bmi.n	801a3ec <_printf_common+0xb0>
 801a394:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801a398:	4641      	mov	r1, r8
 801a39a:	4638      	mov	r0, r7
 801a39c:	47c8      	blx	r9
 801a39e:	3001      	adds	r0, #1
 801a3a0:	d01e      	beq.n	801a3e0 <_printf_common+0xa4>
 801a3a2:	6823      	ldr	r3, [r4, #0]
 801a3a4:	6922      	ldr	r2, [r4, #16]
 801a3a6:	f003 0306 	and.w	r3, r3, #6
 801a3aa:	2b04      	cmp	r3, #4
 801a3ac:	bf02      	ittt	eq
 801a3ae:	68e5      	ldreq	r5, [r4, #12]
 801a3b0:	6833      	ldreq	r3, [r6, #0]
 801a3b2:	1aed      	subeq	r5, r5, r3
 801a3b4:	68a3      	ldr	r3, [r4, #8]
 801a3b6:	bf0c      	ite	eq
 801a3b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a3bc:	2500      	movne	r5, #0
 801a3be:	4293      	cmp	r3, r2
 801a3c0:	bfc4      	itt	gt
 801a3c2:	1a9b      	subgt	r3, r3, r2
 801a3c4:	18ed      	addgt	r5, r5, r3
 801a3c6:	2600      	movs	r6, #0
 801a3c8:	341a      	adds	r4, #26
 801a3ca:	42b5      	cmp	r5, r6
 801a3cc:	d11a      	bne.n	801a404 <_printf_common+0xc8>
 801a3ce:	2000      	movs	r0, #0
 801a3d0:	e008      	b.n	801a3e4 <_printf_common+0xa8>
 801a3d2:	2301      	movs	r3, #1
 801a3d4:	4652      	mov	r2, sl
 801a3d6:	4641      	mov	r1, r8
 801a3d8:	4638      	mov	r0, r7
 801a3da:	47c8      	blx	r9
 801a3dc:	3001      	adds	r0, #1
 801a3de:	d103      	bne.n	801a3e8 <_printf_common+0xac>
 801a3e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a3e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a3e8:	3501      	adds	r5, #1
 801a3ea:	e7c6      	b.n	801a37a <_printf_common+0x3e>
 801a3ec:	18e1      	adds	r1, r4, r3
 801a3ee:	1c5a      	adds	r2, r3, #1
 801a3f0:	2030      	movs	r0, #48	@ 0x30
 801a3f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801a3f6:	4422      	add	r2, r4
 801a3f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801a3fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801a400:	3302      	adds	r3, #2
 801a402:	e7c7      	b.n	801a394 <_printf_common+0x58>
 801a404:	2301      	movs	r3, #1
 801a406:	4622      	mov	r2, r4
 801a408:	4641      	mov	r1, r8
 801a40a:	4638      	mov	r0, r7
 801a40c:	47c8      	blx	r9
 801a40e:	3001      	adds	r0, #1
 801a410:	d0e6      	beq.n	801a3e0 <_printf_common+0xa4>
 801a412:	3601      	adds	r6, #1
 801a414:	e7d9      	b.n	801a3ca <_printf_common+0x8e>
	...

0801a418 <_printf_i>:
 801a418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a41c:	7e0f      	ldrb	r7, [r1, #24]
 801a41e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801a420:	2f78      	cmp	r7, #120	@ 0x78
 801a422:	4691      	mov	r9, r2
 801a424:	4680      	mov	r8, r0
 801a426:	460c      	mov	r4, r1
 801a428:	469a      	mov	sl, r3
 801a42a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801a42e:	d807      	bhi.n	801a440 <_printf_i+0x28>
 801a430:	2f62      	cmp	r7, #98	@ 0x62
 801a432:	d80a      	bhi.n	801a44a <_printf_i+0x32>
 801a434:	2f00      	cmp	r7, #0
 801a436:	f000 80d1 	beq.w	801a5dc <_printf_i+0x1c4>
 801a43a:	2f58      	cmp	r7, #88	@ 0x58
 801a43c:	f000 80b8 	beq.w	801a5b0 <_printf_i+0x198>
 801a440:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a444:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801a448:	e03a      	b.n	801a4c0 <_printf_i+0xa8>
 801a44a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801a44e:	2b15      	cmp	r3, #21
 801a450:	d8f6      	bhi.n	801a440 <_printf_i+0x28>
 801a452:	a101      	add	r1, pc, #4	@ (adr r1, 801a458 <_printf_i+0x40>)
 801a454:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a458:	0801a4b1 	.word	0x0801a4b1
 801a45c:	0801a4c5 	.word	0x0801a4c5
 801a460:	0801a441 	.word	0x0801a441
 801a464:	0801a441 	.word	0x0801a441
 801a468:	0801a441 	.word	0x0801a441
 801a46c:	0801a441 	.word	0x0801a441
 801a470:	0801a4c5 	.word	0x0801a4c5
 801a474:	0801a441 	.word	0x0801a441
 801a478:	0801a441 	.word	0x0801a441
 801a47c:	0801a441 	.word	0x0801a441
 801a480:	0801a441 	.word	0x0801a441
 801a484:	0801a5c3 	.word	0x0801a5c3
 801a488:	0801a4ef 	.word	0x0801a4ef
 801a48c:	0801a57d 	.word	0x0801a57d
 801a490:	0801a441 	.word	0x0801a441
 801a494:	0801a441 	.word	0x0801a441
 801a498:	0801a5e5 	.word	0x0801a5e5
 801a49c:	0801a441 	.word	0x0801a441
 801a4a0:	0801a4ef 	.word	0x0801a4ef
 801a4a4:	0801a441 	.word	0x0801a441
 801a4a8:	0801a441 	.word	0x0801a441
 801a4ac:	0801a585 	.word	0x0801a585
 801a4b0:	6833      	ldr	r3, [r6, #0]
 801a4b2:	1d1a      	adds	r2, r3, #4
 801a4b4:	681b      	ldr	r3, [r3, #0]
 801a4b6:	6032      	str	r2, [r6, #0]
 801a4b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a4bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801a4c0:	2301      	movs	r3, #1
 801a4c2:	e09c      	b.n	801a5fe <_printf_i+0x1e6>
 801a4c4:	6833      	ldr	r3, [r6, #0]
 801a4c6:	6820      	ldr	r0, [r4, #0]
 801a4c8:	1d19      	adds	r1, r3, #4
 801a4ca:	6031      	str	r1, [r6, #0]
 801a4cc:	0606      	lsls	r6, r0, #24
 801a4ce:	d501      	bpl.n	801a4d4 <_printf_i+0xbc>
 801a4d0:	681d      	ldr	r5, [r3, #0]
 801a4d2:	e003      	b.n	801a4dc <_printf_i+0xc4>
 801a4d4:	0645      	lsls	r5, r0, #25
 801a4d6:	d5fb      	bpl.n	801a4d0 <_printf_i+0xb8>
 801a4d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 801a4dc:	2d00      	cmp	r5, #0
 801a4de:	da03      	bge.n	801a4e8 <_printf_i+0xd0>
 801a4e0:	232d      	movs	r3, #45	@ 0x2d
 801a4e2:	426d      	negs	r5, r5
 801a4e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a4e8:	4858      	ldr	r0, [pc, #352]	@ (801a64c <_printf_i+0x234>)
 801a4ea:	230a      	movs	r3, #10
 801a4ec:	e011      	b.n	801a512 <_printf_i+0xfa>
 801a4ee:	6821      	ldr	r1, [r4, #0]
 801a4f0:	6833      	ldr	r3, [r6, #0]
 801a4f2:	0608      	lsls	r0, r1, #24
 801a4f4:	f853 5b04 	ldr.w	r5, [r3], #4
 801a4f8:	d402      	bmi.n	801a500 <_printf_i+0xe8>
 801a4fa:	0649      	lsls	r1, r1, #25
 801a4fc:	bf48      	it	mi
 801a4fe:	b2ad      	uxthmi	r5, r5
 801a500:	2f6f      	cmp	r7, #111	@ 0x6f
 801a502:	4852      	ldr	r0, [pc, #328]	@ (801a64c <_printf_i+0x234>)
 801a504:	6033      	str	r3, [r6, #0]
 801a506:	bf14      	ite	ne
 801a508:	230a      	movne	r3, #10
 801a50a:	2308      	moveq	r3, #8
 801a50c:	2100      	movs	r1, #0
 801a50e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801a512:	6866      	ldr	r6, [r4, #4]
 801a514:	60a6      	str	r6, [r4, #8]
 801a516:	2e00      	cmp	r6, #0
 801a518:	db05      	blt.n	801a526 <_printf_i+0x10e>
 801a51a:	6821      	ldr	r1, [r4, #0]
 801a51c:	432e      	orrs	r6, r5
 801a51e:	f021 0104 	bic.w	r1, r1, #4
 801a522:	6021      	str	r1, [r4, #0]
 801a524:	d04b      	beq.n	801a5be <_printf_i+0x1a6>
 801a526:	4616      	mov	r6, r2
 801a528:	fbb5 f1f3 	udiv	r1, r5, r3
 801a52c:	fb03 5711 	mls	r7, r3, r1, r5
 801a530:	5dc7      	ldrb	r7, [r0, r7]
 801a532:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a536:	462f      	mov	r7, r5
 801a538:	42bb      	cmp	r3, r7
 801a53a:	460d      	mov	r5, r1
 801a53c:	d9f4      	bls.n	801a528 <_printf_i+0x110>
 801a53e:	2b08      	cmp	r3, #8
 801a540:	d10b      	bne.n	801a55a <_printf_i+0x142>
 801a542:	6823      	ldr	r3, [r4, #0]
 801a544:	07df      	lsls	r7, r3, #31
 801a546:	d508      	bpl.n	801a55a <_printf_i+0x142>
 801a548:	6923      	ldr	r3, [r4, #16]
 801a54a:	6861      	ldr	r1, [r4, #4]
 801a54c:	4299      	cmp	r1, r3
 801a54e:	bfde      	ittt	le
 801a550:	2330      	movle	r3, #48	@ 0x30
 801a552:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a556:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801a55a:	1b92      	subs	r2, r2, r6
 801a55c:	6122      	str	r2, [r4, #16]
 801a55e:	f8cd a000 	str.w	sl, [sp]
 801a562:	464b      	mov	r3, r9
 801a564:	aa03      	add	r2, sp, #12
 801a566:	4621      	mov	r1, r4
 801a568:	4640      	mov	r0, r8
 801a56a:	f7ff fee7 	bl	801a33c <_printf_common>
 801a56e:	3001      	adds	r0, #1
 801a570:	d14a      	bne.n	801a608 <_printf_i+0x1f0>
 801a572:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a576:	b004      	add	sp, #16
 801a578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a57c:	6823      	ldr	r3, [r4, #0]
 801a57e:	f043 0320 	orr.w	r3, r3, #32
 801a582:	6023      	str	r3, [r4, #0]
 801a584:	4832      	ldr	r0, [pc, #200]	@ (801a650 <_printf_i+0x238>)
 801a586:	2778      	movs	r7, #120	@ 0x78
 801a588:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801a58c:	6823      	ldr	r3, [r4, #0]
 801a58e:	6831      	ldr	r1, [r6, #0]
 801a590:	061f      	lsls	r7, r3, #24
 801a592:	f851 5b04 	ldr.w	r5, [r1], #4
 801a596:	d402      	bmi.n	801a59e <_printf_i+0x186>
 801a598:	065f      	lsls	r7, r3, #25
 801a59a:	bf48      	it	mi
 801a59c:	b2ad      	uxthmi	r5, r5
 801a59e:	6031      	str	r1, [r6, #0]
 801a5a0:	07d9      	lsls	r1, r3, #31
 801a5a2:	bf44      	itt	mi
 801a5a4:	f043 0320 	orrmi.w	r3, r3, #32
 801a5a8:	6023      	strmi	r3, [r4, #0]
 801a5aa:	b11d      	cbz	r5, 801a5b4 <_printf_i+0x19c>
 801a5ac:	2310      	movs	r3, #16
 801a5ae:	e7ad      	b.n	801a50c <_printf_i+0xf4>
 801a5b0:	4826      	ldr	r0, [pc, #152]	@ (801a64c <_printf_i+0x234>)
 801a5b2:	e7e9      	b.n	801a588 <_printf_i+0x170>
 801a5b4:	6823      	ldr	r3, [r4, #0]
 801a5b6:	f023 0320 	bic.w	r3, r3, #32
 801a5ba:	6023      	str	r3, [r4, #0]
 801a5bc:	e7f6      	b.n	801a5ac <_printf_i+0x194>
 801a5be:	4616      	mov	r6, r2
 801a5c0:	e7bd      	b.n	801a53e <_printf_i+0x126>
 801a5c2:	6833      	ldr	r3, [r6, #0]
 801a5c4:	6825      	ldr	r5, [r4, #0]
 801a5c6:	6961      	ldr	r1, [r4, #20]
 801a5c8:	1d18      	adds	r0, r3, #4
 801a5ca:	6030      	str	r0, [r6, #0]
 801a5cc:	062e      	lsls	r6, r5, #24
 801a5ce:	681b      	ldr	r3, [r3, #0]
 801a5d0:	d501      	bpl.n	801a5d6 <_printf_i+0x1be>
 801a5d2:	6019      	str	r1, [r3, #0]
 801a5d4:	e002      	b.n	801a5dc <_printf_i+0x1c4>
 801a5d6:	0668      	lsls	r0, r5, #25
 801a5d8:	d5fb      	bpl.n	801a5d2 <_printf_i+0x1ba>
 801a5da:	8019      	strh	r1, [r3, #0]
 801a5dc:	2300      	movs	r3, #0
 801a5de:	6123      	str	r3, [r4, #16]
 801a5e0:	4616      	mov	r6, r2
 801a5e2:	e7bc      	b.n	801a55e <_printf_i+0x146>
 801a5e4:	6833      	ldr	r3, [r6, #0]
 801a5e6:	1d1a      	adds	r2, r3, #4
 801a5e8:	6032      	str	r2, [r6, #0]
 801a5ea:	681e      	ldr	r6, [r3, #0]
 801a5ec:	6862      	ldr	r2, [r4, #4]
 801a5ee:	2100      	movs	r1, #0
 801a5f0:	4630      	mov	r0, r6
 801a5f2:	f7e5 fe25 	bl	8000240 <memchr>
 801a5f6:	b108      	cbz	r0, 801a5fc <_printf_i+0x1e4>
 801a5f8:	1b80      	subs	r0, r0, r6
 801a5fa:	6060      	str	r0, [r4, #4]
 801a5fc:	6863      	ldr	r3, [r4, #4]
 801a5fe:	6123      	str	r3, [r4, #16]
 801a600:	2300      	movs	r3, #0
 801a602:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a606:	e7aa      	b.n	801a55e <_printf_i+0x146>
 801a608:	6923      	ldr	r3, [r4, #16]
 801a60a:	4632      	mov	r2, r6
 801a60c:	4649      	mov	r1, r9
 801a60e:	4640      	mov	r0, r8
 801a610:	47d0      	blx	sl
 801a612:	3001      	adds	r0, #1
 801a614:	d0ad      	beq.n	801a572 <_printf_i+0x15a>
 801a616:	6823      	ldr	r3, [r4, #0]
 801a618:	079b      	lsls	r3, r3, #30
 801a61a:	d413      	bmi.n	801a644 <_printf_i+0x22c>
 801a61c:	68e0      	ldr	r0, [r4, #12]
 801a61e:	9b03      	ldr	r3, [sp, #12]
 801a620:	4298      	cmp	r0, r3
 801a622:	bfb8      	it	lt
 801a624:	4618      	movlt	r0, r3
 801a626:	e7a6      	b.n	801a576 <_printf_i+0x15e>
 801a628:	2301      	movs	r3, #1
 801a62a:	4632      	mov	r2, r6
 801a62c:	4649      	mov	r1, r9
 801a62e:	4640      	mov	r0, r8
 801a630:	47d0      	blx	sl
 801a632:	3001      	adds	r0, #1
 801a634:	d09d      	beq.n	801a572 <_printf_i+0x15a>
 801a636:	3501      	adds	r5, #1
 801a638:	68e3      	ldr	r3, [r4, #12]
 801a63a:	9903      	ldr	r1, [sp, #12]
 801a63c:	1a5b      	subs	r3, r3, r1
 801a63e:	42ab      	cmp	r3, r5
 801a640:	dcf2      	bgt.n	801a628 <_printf_i+0x210>
 801a642:	e7eb      	b.n	801a61c <_printf_i+0x204>
 801a644:	2500      	movs	r5, #0
 801a646:	f104 0619 	add.w	r6, r4, #25
 801a64a:	e7f5      	b.n	801a638 <_printf_i+0x220>
 801a64c:	0801bafc 	.word	0x0801bafc
 801a650:	0801bb0d 	.word	0x0801bb0d

0801a654 <__sflush_r>:
 801a654:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a65c:	0716      	lsls	r6, r2, #28
 801a65e:	4605      	mov	r5, r0
 801a660:	460c      	mov	r4, r1
 801a662:	d454      	bmi.n	801a70e <__sflush_r+0xba>
 801a664:	684b      	ldr	r3, [r1, #4]
 801a666:	2b00      	cmp	r3, #0
 801a668:	dc02      	bgt.n	801a670 <__sflush_r+0x1c>
 801a66a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801a66c:	2b00      	cmp	r3, #0
 801a66e:	dd48      	ble.n	801a702 <__sflush_r+0xae>
 801a670:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a672:	2e00      	cmp	r6, #0
 801a674:	d045      	beq.n	801a702 <__sflush_r+0xae>
 801a676:	2300      	movs	r3, #0
 801a678:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801a67c:	682f      	ldr	r7, [r5, #0]
 801a67e:	6a21      	ldr	r1, [r4, #32]
 801a680:	602b      	str	r3, [r5, #0]
 801a682:	d030      	beq.n	801a6e6 <__sflush_r+0x92>
 801a684:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801a686:	89a3      	ldrh	r3, [r4, #12]
 801a688:	0759      	lsls	r1, r3, #29
 801a68a:	d505      	bpl.n	801a698 <__sflush_r+0x44>
 801a68c:	6863      	ldr	r3, [r4, #4]
 801a68e:	1ad2      	subs	r2, r2, r3
 801a690:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a692:	b10b      	cbz	r3, 801a698 <__sflush_r+0x44>
 801a694:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801a696:	1ad2      	subs	r2, r2, r3
 801a698:	2300      	movs	r3, #0
 801a69a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a69c:	6a21      	ldr	r1, [r4, #32]
 801a69e:	4628      	mov	r0, r5
 801a6a0:	47b0      	blx	r6
 801a6a2:	1c43      	adds	r3, r0, #1
 801a6a4:	89a3      	ldrh	r3, [r4, #12]
 801a6a6:	d106      	bne.n	801a6b6 <__sflush_r+0x62>
 801a6a8:	6829      	ldr	r1, [r5, #0]
 801a6aa:	291d      	cmp	r1, #29
 801a6ac:	d82b      	bhi.n	801a706 <__sflush_r+0xb2>
 801a6ae:	4a2a      	ldr	r2, [pc, #168]	@ (801a758 <__sflush_r+0x104>)
 801a6b0:	40ca      	lsrs	r2, r1
 801a6b2:	07d6      	lsls	r6, r2, #31
 801a6b4:	d527      	bpl.n	801a706 <__sflush_r+0xb2>
 801a6b6:	2200      	movs	r2, #0
 801a6b8:	6062      	str	r2, [r4, #4]
 801a6ba:	04d9      	lsls	r1, r3, #19
 801a6bc:	6922      	ldr	r2, [r4, #16]
 801a6be:	6022      	str	r2, [r4, #0]
 801a6c0:	d504      	bpl.n	801a6cc <__sflush_r+0x78>
 801a6c2:	1c42      	adds	r2, r0, #1
 801a6c4:	d101      	bne.n	801a6ca <__sflush_r+0x76>
 801a6c6:	682b      	ldr	r3, [r5, #0]
 801a6c8:	b903      	cbnz	r3, 801a6cc <__sflush_r+0x78>
 801a6ca:	6560      	str	r0, [r4, #84]	@ 0x54
 801a6cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a6ce:	602f      	str	r7, [r5, #0]
 801a6d0:	b1b9      	cbz	r1, 801a702 <__sflush_r+0xae>
 801a6d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a6d6:	4299      	cmp	r1, r3
 801a6d8:	d002      	beq.n	801a6e0 <__sflush_r+0x8c>
 801a6da:	4628      	mov	r0, r5
 801a6dc:	f7ff fb42 	bl	8019d64 <_free_r>
 801a6e0:	2300      	movs	r3, #0
 801a6e2:	6363      	str	r3, [r4, #52]	@ 0x34
 801a6e4:	e00d      	b.n	801a702 <__sflush_r+0xae>
 801a6e6:	2301      	movs	r3, #1
 801a6e8:	4628      	mov	r0, r5
 801a6ea:	47b0      	blx	r6
 801a6ec:	4602      	mov	r2, r0
 801a6ee:	1c50      	adds	r0, r2, #1
 801a6f0:	d1c9      	bne.n	801a686 <__sflush_r+0x32>
 801a6f2:	682b      	ldr	r3, [r5, #0]
 801a6f4:	2b00      	cmp	r3, #0
 801a6f6:	d0c6      	beq.n	801a686 <__sflush_r+0x32>
 801a6f8:	2b1d      	cmp	r3, #29
 801a6fa:	d001      	beq.n	801a700 <__sflush_r+0xac>
 801a6fc:	2b16      	cmp	r3, #22
 801a6fe:	d11e      	bne.n	801a73e <__sflush_r+0xea>
 801a700:	602f      	str	r7, [r5, #0]
 801a702:	2000      	movs	r0, #0
 801a704:	e022      	b.n	801a74c <__sflush_r+0xf8>
 801a706:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a70a:	b21b      	sxth	r3, r3
 801a70c:	e01b      	b.n	801a746 <__sflush_r+0xf2>
 801a70e:	690f      	ldr	r7, [r1, #16]
 801a710:	2f00      	cmp	r7, #0
 801a712:	d0f6      	beq.n	801a702 <__sflush_r+0xae>
 801a714:	0793      	lsls	r3, r2, #30
 801a716:	680e      	ldr	r6, [r1, #0]
 801a718:	bf08      	it	eq
 801a71a:	694b      	ldreq	r3, [r1, #20]
 801a71c:	600f      	str	r7, [r1, #0]
 801a71e:	bf18      	it	ne
 801a720:	2300      	movne	r3, #0
 801a722:	eba6 0807 	sub.w	r8, r6, r7
 801a726:	608b      	str	r3, [r1, #8]
 801a728:	f1b8 0f00 	cmp.w	r8, #0
 801a72c:	dde9      	ble.n	801a702 <__sflush_r+0xae>
 801a72e:	6a21      	ldr	r1, [r4, #32]
 801a730:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801a732:	4643      	mov	r3, r8
 801a734:	463a      	mov	r2, r7
 801a736:	4628      	mov	r0, r5
 801a738:	47b0      	blx	r6
 801a73a:	2800      	cmp	r0, #0
 801a73c:	dc08      	bgt.n	801a750 <__sflush_r+0xfc>
 801a73e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a742:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a746:	81a3      	strh	r3, [r4, #12]
 801a748:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a750:	4407      	add	r7, r0
 801a752:	eba8 0800 	sub.w	r8, r8, r0
 801a756:	e7e7      	b.n	801a728 <__sflush_r+0xd4>
 801a758:	20400001 	.word	0x20400001

0801a75c <_fflush_r>:
 801a75c:	b538      	push	{r3, r4, r5, lr}
 801a75e:	690b      	ldr	r3, [r1, #16]
 801a760:	4605      	mov	r5, r0
 801a762:	460c      	mov	r4, r1
 801a764:	b913      	cbnz	r3, 801a76c <_fflush_r+0x10>
 801a766:	2500      	movs	r5, #0
 801a768:	4628      	mov	r0, r5
 801a76a:	bd38      	pop	{r3, r4, r5, pc}
 801a76c:	b118      	cbz	r0, 801a776 <_fflush_r+0x1a>
 801a76e:	6a03      	ldr	r3, [r0, #32]
 801a770:	b90b      	cbnz	r3, 801a776 <_fflush_r+0x1a>
 801a772:	f7fe ff81 	bl	8019678 <__sinit>
 801a776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a77a:	2b00      	cmp	r3, #0
 801a77c:	d0f3      	beq.n	801a766 <_fflush_r+0xa>
 801a77e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801a780:	07d0      	lsls	r0, r2, #31
 801a782:	d404      	bmi.n	801a78e <_fflush_r+0x32>
 801a784:	0599      	lsls	r1, r3, #22
 801a786:	d402      	bmi.n	801a78e <_fflush_r+0x32>
 801a788:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a78a:	f7ff faa8 	bl	8019cde <__retarget_lock_acquire_recursive>
 801a78e:	4628      	mov	r0, r5
 801a790:	4621      	mov	r1, r4
 801a792:	f7ff ff5f 	bl	801a654 <__sflush_r>
 801a796:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a798:	07da      	lsls	r2, r3, #31
 801a79a:	4605      	mov	r5, r0
 801a79c:	d4e4      	bmi.n	801a768 <_fflush_r+0xc>
 801a79e:	89a3      	ldrh	r3, [r4, #12]
 801a7a0:	059b      	lsls	r3, r3, #22
 801a7a2:	d4e1      	bmi.n	801a768 <_fflush_r+0xc>
 801a7a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a7a6:	f7ff fa9b 	bl	8019ce0 <__retarget_lock_release_recursive>
 801a7aa:	e7dd      	b.n	801a768 <_fflush_r+0xc>

0801a7ac <fiprintf>:
 801a7ac:	b40e      	push	{r1, r2, r3}
 801a7ae:	b503      	push	{r0, r1, lr}
 801a7b0:	4601      	mov	r1, r0
 801a7b2:	ab03      	add	r3, sp, #12
 801a7b4:	4805      	ldr	r0, [pc, #20]	@ (801a7cc <fiprintf+0x20>)
 801a7b6:	f853 2b04 	ldr.w	r2, [r3], #4
 801a7ba:	6800      	ldr	r0, [r0, #0]
 801a7bc:	9301      	str	r3, [sp, #4]
 801a7be:	f7ff fca5 	bl	801a10c <_vfiprintf_r>
 801a7c2:	b002      	add	sp, #8
 801a7c4:	f85d eb04 	ldr.w	lr, [sp], #4
 801a7c8:	b003      	add	sp, #12
 801a7ca:	4770      	bx	lr
 801a7cc:	20000920 	.word	0x20000920

0801a7d0 <__swhatbuf_r>:
 801a7d0:	b570      	push	{r4, r5, r6, lr}
 801a7d2:	460c      	mov	r4, r1
 801a7d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a7d8:	2900      	cmp	r1, #0
 801a7da:	b096      	sub	sp, #88	@ 0x58
 801a7dc:	4615      	mov	r5, r2
 801a7de:	461e      	mov	r6, r3
 801a7e0:	da0d      	bge.n	801a7fe <__swhatbuf_r+0x2e>
 801a7e2:	89a3      	ldrh	r3, [r4, #12]
 801a7e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801a7e8:	f04f 0100 	mov.w	r1, #0
 801a7ec:	bf14      	ite	ne
 801a7ee:	2340      	movne	r3, #64	@ 0x40
 801a7f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801a7f4:	2000      	movs	r0, #0
 801a7f6:	6031      	str	r1, [r6, #0]
 801a7f8:	602b      	str	r3, [r5, #0]
 801a7fa:	b016      	add	sp, #88	@ 0x58
 801a7fc:	bd70      	pop	{r4, r5, r6, pc}
 801a7fe:	466a      	mov	r2, sp
 801a800:	f000 f848 	bl	801a894 <_fstat_r>
 801a804:	2800      	cmp	r0, #0
 801a806:	dbec      	blt.n	801a7e2 <__swhatbuf_r+0x12>
 801a808:	9901      	ldr	r1, [sp, #4]
 801a80a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801a80e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801a812:	4259      	negs	r1, r3
 801a814:	4159      	adcs	r1, r3
 801a816:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801a81a:	e7eb      	b.n	801a7f4 <__swhatbuf_r+0x24>

0801a81c <__smakebuf_r>:
 801a81c:	898b      	ldrh	r3, [r1, #12]
 801a81e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a820:	079d      	lsls	r5, r3, #30
 801a822:	4606      	mov	r6, r0
 801a824:	460c      	mov	r4, r1
 801a826:	d507      	bpl.n	801a838 <__smakebuf_r+0x1c>
 801a828:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801a82c:	6023      	str	r3, [r4, #0]
 801a82e:	6123      	str	r3, [r4, #16]
 801a830:	2301      	movs	r3, #1
 801a832:	6163      	str	r3, [r4, #20]
 801a834:	b003      	add	sp, #12
 801a836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a838:	ab01      	add	r3, sp, #4
 801a83a:	466a      	mov	r2, sp
 801a83c:	f7ff ffc8 	bl	801a7d0 <__swhatbuf_r>
 801a840:	9f00      	ldr	r7, [sp, #0]
 801a842:	4605      	mov	r5, r0
 801a844:	4639      	mov	r1, r7
 801a846:	4630      	mov	r0, r6
 801a848:	f7fe fce4 	bl	8019214 <_malloc_r>
 801a84c:	b948      	cbnz	r0, 801a862 <__smakebuf_r+0x46>
 801a84e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a852:	059a      	lsls	r2, r3, #22
 801a854:	d4ee      	bmi.n	801a834 <__smakebuf_r+0x18>
 801a856:	f023 0303 	bic.w	r3, r3, #3
 801a85a:	f043 0302 	orr.w	r3, r3, #2
 801a85e:	81a3      	strh	r3, [r4, #12]
 801a860:	e7e2      	b.n	801a828 <__smakebuf_r+0xc>
 801a862:	89a3      	ldrh	r3, [r4, #12]
 801a864:	6020      	str	r0, [r4, #0]
 801a866:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a86a:	81a3      	strh	r3, [r4, #12]
 801a86c:	9b01      	ldr	r3, [sp, #4]
 801a86e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801a872:	b15b      	cbz	r3, 801a88c <__smakebuf_r+0x70>
 801a874:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a878:	4630      	mov	r0, r6
 801a87a:	f000 f81d 	bl	801a8b8 <_isatty_r>
 801a87e:	b128      	cbz	r0, 801a88c <__smakebuf_r+0x70>
 801a880:	89a3      	ldrh	r3, [r4, #12]
 801a882:	f023 0303 	bic.w	r3, r3, #3
 801a886:	f043 0301 	orr.w	r3, r3, #1
 801a88a:	81a3      	strh	r3, [r4, #12]
 801a88c:	89a3      	ldrh	r3, [r4, #12]
 801a88e:	431d      	orrs	r5, r3
 801a890:	81a5      	strh	r5, [r4, #12]
 801a892:	e7cf      	b.n	801a834 <__smakebuf_r+0x18>

0801a894 <_fstat_r>:
 801a894:	b538      	push	{r3, r4, r5, lr}
 801a896:	4d07      	ldr	r5, [pc, #28]	@ (801a8b4 <_fstat_r+0x20>)
 801a898:	2300      	movs	r3, #0
 801a89a:	4604      	mov	r4, r0
 801a89c:	4608      	mov	r0, r1
 801a89e:	4611      	mov	r1, r2
 801a8a0:	602b      	str	r3, [r5, #0]
 801a8a2:	f7e8 fd97 	bl	80033d4 <_fstat>
 801a8a6:	1c43      	adds	r3, r0, #1
 801a8a8:	d102      	bne.n	801a8b0 <_fstat_r+0x1c>
 801a8aa:	682b      	ldr	r3, [r5, #0]
 801a8ac:	b103      	cbz	r3, 801a8b0 <_fstat_r+0x1c>
 801a8ae:	6023      	str	r3, [r4, #0]
 801a8b0:	bd38      	pop	{r3, r4, r5, pc}
 801a8b2:	bf00      	nop
 801a8b4:	20011bc0 	.word	0x20011bc0

0801a8b8 <_isatty_r>:
 801a8b8:	b538      	push	{r3, r4, r5, lr}
 801a8ba:	4d06      	ldr	r5, [pc, #24]	@ (801a8d4 <_isatty_r+0x1c>)
 801a8bc:	2300      	movs	r3, #0
 801a8be:	4604      	mov	r4, r0
 801a8c0:	4608      	mov	r0, r1
 801a8c2:	602b      	str	r3, [r5, #0]
 801a8c4:	f7e8 fd96 	bl	80033f4 <_isatty>
 801a8c8:	1c43      	adds	r3, r0, #1
 801a8ca:	d102      	bne.n	801a8d2 <_isatty_r+0x1a>
 801a8cc:	682b      	ldr	r3, [r5, #0]
 801a8ce:	b103      	cbz	r3, 801a8d2 <_isatty_r+0x1a>
 801a8d0:	6023      	str	r3, [r4, #0]
 801a8d2:	bd38      	pop	{r3, r4, r5, pc}
 801a8d4:	20011bc0 	.word	0x20011bc0

0801a8d8 <abort>:
 801a8d8:	b508      	push	{r3, lr}
 801a8da:	2006      	movs	r0, #6
 801a8dc:	f000 f82c 	bl	801a938 <raise>
 801a8e0:	2001      	movs	r0, #1
 801a8e2:	f7e8 fd27 	bl	8003334 <_exit>

0801a8e6 <_raise_r>:
 801a8e6:	291f      	cmp	r1, #31
 801a8e8:	b538      	push	{r3, r4, r5, lr}
 801a8ea:	4605      	mov	r5, r0
 801a8ec:	460c      	mov	r4, r1
 801a8ee:	d904      	bls.n	801a8fa <_raise_r+0x14>
 801a8f0:	2316      	movs	r3, #22
 801a8f2:	6003      	str	r3, [r0, #0]
 801a8f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a8f8:	bd38      	pop	{r3, r4, r5, pc}
 801a8fa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801a8fc:	b112      	cbz	r2, 801a904 <_raise_r+0x1e>
 801a8fe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a902:	b94b      	cbnz	r3, 801a918 <_raise_r+0x32>
 801a904:	4628      	mov	r0, r5
 801a906:	f000 f831 	bl	801a96c <_getpid_r>
 801a90a:	4622      	mov	r2, r4
 801a90c:	4601      	mov	r1, r0
 801a90e:	4628      	mov	r0, r5
 801a910:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a914:	f000 b818 	b.w	801a948 <_kill_r>
 801a918:	2b01      	cmp	r3, #1
 801a91a:	d00a      	beq.n	801a932 <_raise_r+0x4c>
 801a91c:	1c59      	adds	r1, r3, #1
 801a91e:	d103      	bne.n	801a928 <_raise_r+0x42>
 801a920:	2316      	movs	r3, #22
 801a922:	6003      	str	r3, [r0, #0]
 801a924:	2001      	movs	r0, #1
 801a926:	e7e7      	b.n	801a8f8 <_raise_r+0x12>
 801a928:	2100      	movs	r1, #0
 801a92a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801a92e:	4620      	mov	r0, r4
 801a930:	4798      	blx	r3
 801a932:	2000      	movs	r0, #0
 801a934:	e7e0      	b.n	801a8f8 <_raise_r+0x12>
	...

0801a938 <raise>:
 801a938:	4b02      	ldr	r3, [pc, #8]	@ (801a944 <raise+0xc>)
 801a93a:	4601      	mov	r1, r0
 801a93c:	6818      	ldr	r0, [r3, #0]
 801a93e:	f7ff bfd2 	b.w	801a8e6 <_raise_r>
 801a942:	bf00      	nop
 801a944:	20000920 	.word	0x20000920

0801a948 <_kill_r>:
 801a948:	b538      	push	{r3, r4, r5, lr}
 801a94a:	4d07      	ldr	r5, [pc, #28]	@ (801a968 <_kill_r+0x20>)
 801a94c:	2300      	movs	r3, #0
 801a94e:	4604      	mov	r4, r0
 801a950:	4608      	mov	r0, r1
 801a952:	4611      	mov	r1, r2
 801a954:	602b      	str	r3, [r5, #0]
 801a956:	f7e8 fcdd 	bl	8003314 <_kill>
 801a95a:	1c43      	adds	r3, r0, #1
 801a95c:	d102      	bne.n	801a964 <_kill_r+0x1c>
 801a95e:	682b      	ldr	r3, [r5, #0]
 801a960:	b103      	cbz	r3, 801a964 <_kill_r+0x1c>
 801a962:	6023      	str	r3, [r4, #0]
 801a964:	bd38      	pop	{r3, r4, r5, pc}
 801a966:	bf00      	nop
 801a968:	20011bc0 	.word	0x20011bc0

0801a96c <_getpid_r>:
 801a96c:	f7e8 bcca 	b.w	8003304 <_getpid>

0801a970 <_init>:
 801a970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a972:	bf00      	nop
 801a974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a976:	bc08      	pop	{r3}
 801a978:	469e      	mov	lr, r3
 801a97a:	4770      	bx	lr

0801a97c <_fini>:
 801a97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a97e:	bf00      	nop
 801a980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a982:	bc08      	pop	{r3}
 801a984:	469e      	mov	lr, r3
 801a986:	4770      	bx	lr
