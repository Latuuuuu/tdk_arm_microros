
tdk_arm_microros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000197a8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d9c  08019978  08019978  0001a978  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a714  0801a714  0001c144  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801a714  0801a714  0001b714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a71c  0801a71c  0001c144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0801a71c  0801a71c  0001b71c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801a728  0801a728  0001b728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000144  20000000  0801a72c  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010fd0  20000148  0801a870  0001c148  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20011118  0801a870  0001d118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001c144  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ac72  00000000  00000000  0001c174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000056e6  00000000  00000000  00046de6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c18  00000000  00000000  0004c4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015cf  00000000  00000000  0004e0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d5aa  00000000  00000000  0004f6b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000268fb  00000000  00000000  0007cc61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eea80  00000000  00000000  000a355c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  00191fdc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000083ec  00000000  00000000  00192054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0019a440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000148 	.word	0x20000148
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08019960 	.word	0x08019960

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000014c 	.word	0x2000014c
 800020c:	08019960 	.word	0x08019960

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__aeabi_d2f>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a84:	bf24      	itt	cs
 8000a86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a8e:	d90d      	bls.n	8000aac <__aeabi_d2f+0x30>
 8000a90:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a9c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aa0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa4:	bf08      	it	eq
 8000aa6:	f020 0001 	biceq.w	r0, r0, #1
 8000aaa:	4770      	bx	lr
 8000aac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ab0:	d121      	bne.n	8000af6 <__aeabi_d2f+0x7a>
 8000ab2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ab6:	bfbc      	itt	lt
 8000ab8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000abc:	4770      	bxlt	lr
 8000abe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ac2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac6:	f1c2 0218 	rsb	r2, r2, #24
 8000aca:	f1c2 0c20 	rsb	ip, r2, #32
 8000ace:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	f040 0001 	orrne.w	r0, r0, #1
 8000adc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae8:	ea40 000c 	orr.w	r0, r0, ip
 8000aec:	fa23 f302 	lsr.w	r3, r3, r2
 8000af0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af4:	e7cc      	b.n	8000a90 <__aeabi_d2f+0x14>
 8000af6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afa:	d107      	bne.n	8000b0c <__aeabi_d2f+0x90>
 8000afc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b00:	bf1e      	ittt	ne
 8000b02:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b06:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b0a:	4770      	bxne	lr
 8000b0c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_ldivmod>:
 8000b1c:	b97b      	cbnz	r3, 8000b3e <__aeabi_ldivmod+0x22>
 8000b1e:	b972      	cbnz	r2, 8000b3e <__aeabi_ldivmod+0x22>
 8000b20:	2900      	cmp	r1, #0
 8000b22:	bfbe      	ittt	lt
 8000b24:	2000      	movlt	r0, #0
 8000b26:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000b2a:	e006      	blt.n	8000b3a <__aeabi_ldivmod+0x1e>
 8000b2c:	bf08      	it	eq
 8000b2e:	2800      	cmpeq	r0, #0
 8000b30:	bf1c      	itt	ne
 8000b32:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000b36:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b3a:	f000 b9d3 	b.w	8000ee4 <__aeabi_idiv0>
 8000b3e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b42:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b46:	2900      	cmp	r1, #0
 8000b48:	db09      	blt.n	8000b5e <__aeabi_ldivmod+0x42>
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	db1a      	blt.n	8000b84 <__aeabi_ldivmod+0x68>
 8000b4e:	f000 f84d 	bl	8000bec <__udivmoddi4>
 8000b52:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b5a:	b004      	add	sp, #16
 8000b5c:	4770      	bx	lr
 8000b5e:	4240      	negs	r0, r0
 8000b60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	db1b      	blt.n	8000ba0 <__aeabi_ldivmod+0x84>
 8000b68:	f000 f840 	bl	8000bec <__udivmoddi4>
 8000b6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b74:	b004      	add	sp, #16
 8000b76:	4240      	negs	r0, r0
 8000b78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b7c:	4252      	negs	r2, r2
 8000b7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b82:	4770      	bx	lr
 8000b84:	4252      	negs	r2, r2
 8000b86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b8a:	f000 f82f 	bl	8000bec <__udivmoddi4>
 8000b8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b96:	b004      	add	sp, #16
 8000b98:	4240      	negs	r0, r0
 8000b9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b9e:	4770      	bx	lr
 8000ba0:	4252      	negs	r2, r2
 8000ba2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ba6:	f000 f821 	bl	8000bec <__udivmoddi4>
 8000baa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb2:	b004      	add	sp, #16
 8000bb4:	4252      	negs	r2, r2
 8000bb6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bd0:	f000 b988 	b.w	8000ee4 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9d08      	ldr	r5, [sp, #32]
 8000bf2:	468e      	mov	lr, r1
 8000bf4:	4604      	mov	r4, r0
 8000bf6:	4688      	mov	r8, r1
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d14a      	bne.n	8000c92 <__udivmoddi4+0xa6>
 8000bfc:	428a      	cmp	r2, r1
 8000bfe:	4617      	mov	r7, r2
 8000c00:	d962      	bls.n	8000cc8 <__udivmoddi4+0xdc>
 8000c02:	fab2 f682 	clz	r6, r2
 8000c06:	b14e      	cbz	r6, 8000c1c <__udivmoddi4+0x30>
 8000c08:	f1c6 0320 	rsb	r3, r6, #32
 8000c0c:	fa01 f806 	lsl.w	r8, r1, r6
 8000c10:	fa20 f303 	lsr.w	r3, r0, r3
 8000c14:	40b7      	lsls	r7, r6
 8000c16:	ea43 0808 	orr.w	r8, r3, r8
 8000c1a:	40b4      	lsls	r4, r6
 8000c1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c20:	fa1f fc87 	uxth.w	ip, r7
 8000c24:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c28:	0c23      	lsrs	r3, r4, #16
 8000c2a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c32:	fb01 f20c 	mul.w	r2, r1, ip
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d909      	bls.n	8000c4e <__udivmoddi4+0x62>
 8000c3a:	18fb      	adds	r3, r7, r3
 8000c3c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c40:	f080 80ea 	bcs.w	8000e18 <__udivmoddi4+0x22c>
 8000c44:	429a      	cmp	r2, r3
 8000c46:	f240 80e7 	bls.w	8000e18 <__udivmoddi4+0x22c>
 8000c4a:	3902      	subs	r1, #2
 8000c4c:	443b      	add	r3, r7
 8000c4e:	1a9a      	subs	r2, r3, r2
 8000c50:	b2a3      	uxth	r3, r4
 8000c52:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c56:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c62:	459c      	cmp	ip, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x8e>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c6c:	f080 80d6 	bcs.w	8000e1c <__udivmoddi4+0x230>
 8000c70:	459c      	cmp	ip, r3
 8000c72:	f240 80d3 	bls.w	8000e1c <__udivmoddi4+0x230>
 8000c76:	443b      	add	r3, r7
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7e:	eba3 030c 	sub.w	r3, r3, ip
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa2>
 8000c86:	40f3      	lsrs	r3, r6
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xb6>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb0>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x14c>
 8000caa:	4573      	cmp	r3, lr
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xc8>
 8000cae:	4282      	cmp	r2, r0
 8000cb0:	f200 8105 	bhi.w	8000ebe <__udivmoddi4+0x2d2>
 8000cb4:	1a84      	subs	r4, r0, r2
 8000cb6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	4690      	mov	r8, r2
 8000cbe:	2d00      	cmp	r5, #0
 8000cc0:	d0e5      	beq.n	8000c8e <__udivmoddi4+0xa2>
 8000cc2:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc6:	e7e2      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f000 8090 	beq.w	8000dee <__udivmoddi4+0x202>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f040 80a4 	bne.w	8000e20 <__udivmoddi4+0x234>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	0c03      	lsrs	r3, r0, #16
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	b280      	uxth	r0, r0
 8000ce2:	b2bc      	uxth	r4, r7
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cea:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cf2:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d907      	bls.n	8000d0a <__udivmoddi4+0x11e>
 8000cfa:	18fb      	adds	r3, r7, r3
 8000cfc:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d00:	d202      	bcs.n	8000d08 <__udivmoddi4+0x11c>
 8000d02:	429a      	cmp	r2, r3
 8000d04:	f200 80e0 	bhi.w	8000ec8 <__udivmoddi4+0x2dc>
 8000d08:	46c4      	mov	ip, r8
 8000d0a:	1a9b      	subs	r3, r3, r2
 8000d0c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d10:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d14:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d18:	fb02 f404 	mul.w	r4, r2, r4
 8000d1c:	429c      	cmp	r4, r3
 8000d1e:	d907      	bls.n	8000d30 <__udivmoddi4+0x144>
 8000d20:	18fb      	adds	r3, r7, r3
 8000d22:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x142>
 8000d28:	429c      	cmp	r4, r3
 8000d2a:	f200 80ca 	bhi.w	8000ec2 <__udivmoddi4+0x2d6>
 8000d2e:	4602      	mov	r2, r0
 8000d30:	1b1b      	subs	r3, r3, r4
 8000d32:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x98>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa0e f401 	lsl.w	r4, lr, r1
 8000d48:	fa20 f306 	lsr.w	r3, r0, r6
 8000d4c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d50:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d54:	4323      	orrs	r3, r4
 8000d56:	fa00 f801 	lsl.w	r8, r0, r1
 8000d5a:	fa1f fc87 	uxth.w	ip, r7
 8000d5e:	fbbe f0f9 	udiv	r0, lr, r9
 8000d62:	0c1c      	lsrs	r4, r3, #16
 8000d64:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d68:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d6c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d70:	45a6      	cmp	lr, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d909      	bls.n	8000d8c <__udivmoddi4+0x1a0>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d7e:	f080 809c 	bcs.w	8000eba <__udivmoddi4+0x2ce>
 8000d82:	45a6      	cmp	lr, r4
 8000d84:	f240 8099 	bls.w	8000eba <__udivmoddi4+0x2ce>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	443c      	add	r4, r7
 8000d8c:	eba4 040e 	sub.w	r4, r4, lr
 8000d90:	fa1f fe83 	uxth.w	lr, r3
 8000d94:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d98:	fb09 4413 	mls	r4, r9, r3, r4
 8000d9c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000da0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da4:	45a4      	cmp	ip, r4
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1ce>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000dae:	f080 8082 	bcs.w	8000eb6 <__udivmoddi4+0x2ca>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d97f      	bls.n	8000eb6 <__udivmoddi4+0x2ca>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dbe:	eba4 040c 	sub.w	r4, r4, ip
 8000dc2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc6:	4564      	cmp	r4, ip
 8000dc8:	4673      	mov	r3, lr
 8000dca:	46e1      	mov	r9, ip
 8000dcc:	d362      	bcc.n	8000e94 <__udivmoddi4+0x2a8>
 8000dce:	d05f      	beq.n	8000e90 <__udivmoddi4+0x2a4>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x1fe>
 8000dd2:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd6:	eb64 0409 	sbc.w	r4, r4, r9
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	fa22 f301 	lsr.w	r3, r2, r1
 8000de2:	431e      	orrs	r6, r3
 8000de4:	40cc      	lsrs	r4, r1
 8000de6:	e9c5 6400 	strd	r6, r4, [r5]
 8000dea:	2100      	movs	r1, #0
 8000dec:	e74f      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000dee:	fbb1 fcf2 	udiv	ip, r1, r2
 8000df2:	0c01      	lsrs	r1, r0, #16
 8000df4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df8:	b280      	uxth	r0, r0
 8000dfa:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfe:	463b      	mov	r3, r7
 8000e00:	4638      	mov	r0, r7
 8000e02:	463c      	mov	r4, r7
 8000e04:	46b8      	mov	r8, r7
 8000e06:	46be      	mov	lr, r7
 8000e08:	2620      	movs	r6, #32
 8000e0a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0e:	eba2 0208 	sub.w	r2, r2, r8
 8000e12:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e16:	e766      	b.n	8000ce6 <__udivmoddi4+0xfa>
 8000e18:	4601      	mov	r1, r0
 8000e1a:	e718      	b.n	8000c4e <__udivmoddi4+0x62>
 8000e1c:	4610      	mov	r0, r2
 8000e1e:	e72c      	b.n	8000c7a <__udivmoddi4+0x8e>
 8000e20:	f1c6 0220 	rsb	r2, r6, #32
 8000e24:	fa2e f302 	lsr.w	r3, lr, r2
 8000e28:	40b7      	lsls	r7, r6
 8000e2a:	40b1      	lsls	r1, r6
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e34:	430a      	orrs	r2, r1
 8000e36:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e40:	0c11      	lsrs	r1, r2, #16
 8000e42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e46:	fb08 f904 	mul.w	r9, r8, r4
 8000e4a:	40b0      	lsls	r0, r6
 8000e4c:	4589      	cmp	r9, r1
 8000e4e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e52:	b280      	uxth	r0, r0
 8000e54:	d93e      	bls.n	8000ed4 <__udivmoddi4+0x2e8>
 8000e56:	1879      	adds	r1, r7, r1
 8000e58:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e5c:	d201      	bcs.n	8000e62 <__udivmoddi4+0x276>
 8000e5e:	4589      	cmp	r9, r1
 8000e60:	d81f      	bhi.n	8000ea2 <__udivmoddi4+0x2b6>
 8000e62:	eba1 0109 	sub.w	r1, r1, r9
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fb09 f804 	mul.w	r8, r9, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	b292      	uxth	r2, r2
 8000e74:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e78:	4542      	cmp	r2, r8
 8000e7a:	d229      	bcs.n	8000ed0 <__udivmoddi4+0x2e4>
 8000e7c:	18ba      	adds	r2, r7, r2
 8000e7e:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e82:	d2c4      	bcs.n	8000e0e <__udivmoddi4+0x222>
 8000e84:	4542      	cmp	r2, r8
 8000e86:	d2c2      	bcs.n	8000e0e <__udivmoddi4+0x222>
 8000e88:	f1a9 0102 	sub.w	r1, r9, #2
 8000e8c:	443a      	add	r2, r7
 8000e8e:	e7be      	b.n	8000e0e <__udivmoddi4+0x222>
 8000e90:	45f0      	cmp	r8, lr
 8000e92:	d29d      	bcs.n	8000dd0 <__udivmoddi4+0x1e4>
 8000e94:	ebbe 0302 	subs.w	r3, lr, r2
 8000e98:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e9c:	3801      	subs	r0, #1
 8000e9e:	46e1      	mov	r9, ip
 8000ea0:	e796      	b.n	8000dd0 <__udivmoddi4+0x1e4>
 8000ea2:	eba7 0909 	sub.w	r9, r7, r9
 8000ea6:	4449      	add	r1, r9
 8000ea8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000eac:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eb0:	fb09 f804 	mul.w	r8, r9, r4
 8000eb4:	e7db      	b.n	8000e6e <__udivmoddi4+0x282>
 8000eb6:	4673      	mov	r3, lr
 8000eb8:	e77f      	b.n	8000dba <__udivmoddi4+0x1ce>
 8000eba:	4650      	mov	r0, sl
 8000ebc:	e766      	b.n	8000d8c <__udivmoddi4+0x1a0>
 8000ebe:	4608      	mov	r0, r1
 8000ec0:	e6fd      	b.n	8000cbe <__udivmoddi4+0xd2>
 8000ec2:	443b      	add	r3, r7
 8000ec4:	3a02      	subs	r2, #2
 8000ec6:	e733      	b.n	8000d30 <__udivmoddi4+0x144>
 8000ec8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ecc:	443b      	add	r3, r7
 8000ece:	e71c      	b.n	8000d0a <__udivmoddi4+0x11e>
 8000ed0:	4649      	mov	r1, r9
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x222>
 8000ed4:	eba1 0109 	sub.w	r1, r1, r9
 8000ed8:	46c4      	mov	ip, r8
 8000eda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ede:	fb09 f804 	mul.w	r8, r9, r4
 8000ee2:	e7c4      	b.n	8000e6e <__udivmoddi4+0x282>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <_ZN10UART_servo9UART_SendEh>:
//servo control variale
//declare struct
//servo control function
//servo control variale
//servo control function
void UART_servo::UART_Send(uint8_t u8_data) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	70fb      	strb	r3, [r7, #3]
	uint8_t *u8_pointer = &u8_data;
 8000ef4:	1cfb      	adds	r3, r7, #3
 8000ef6:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart3, u8_pointer, 1, 100);
 8000ef8:	2364      	movs	r3, #100	@ 0x64
 8000efa:	2201      	movs	r2, #1
 8000efc:	68f9      	ldr	r1, [r7, #12]
 8000efe:	4807      	ldr	r0, [pc, #28]	@ (8000f1c <_ZN10UART_servo9UART_SendEh+0x34>)
 8000f00:	f005 ff02 	bl	8006d08 <HAL_UART_Transmit>
	Checksum_Calc += u8_data;
 8000f04:	78fb      	ldrb	r3, [r7, #3]
 8000f06:	461a      	mov	r2, r3
 8000f08:	4b05      	ldr	r3, [pc, #20]	@ (8000f20 <_ZN10UART_servo9UART_SendEh+0x38>)
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	4b03      	ldr	r3, [pc, #12]	@ (8000f20 <_ZN10UART_servo9UART_SendEh+0x38>)
 8000f12:	801a      	strh	r2, [r3, #0]
}
 8000f14:	bf00      	nop
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20004974 	.word	0x20004974
 8000f20:	20000164 	.word	0x20000164

08000f24 <_ZN10UART_servo26UART_Send_SetMotorPositionEttt>:
void UART_servo::UART_Send_SetMotorPosition(uint16_t motorId, uint16_t Position, uint16_t Time) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	4611      	mov	r1, r2
 8000f30:	461a      	mov	r2, r3
 8000f32:	4603      	mov	r3, r0
 8000f34:	817b      	strh	r3, [r7, #10]
 8000f36:	460b      	mov	r3, r1
 8000f38:	813b      	strh	r3, [r7, #8]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	80fb      	strh	r3, [r7, #6]
	Checksum_Calc = 0;
 8000f3e:	4b20      	ldr	r3, [pc, #128]	@ (8000fc0 <_ZN10UART_servo26UART_Send_SetMotorPositionEttt+0x9c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	801a      	strh	r2, [r3, #0]
	UART_Send(0x80 + motorId);    //header mark & broadcast ID
 8000f44:	897b      	ldrh	r3, [r7, #10]
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	3b80      	subs	r3, #128	@ 0x80
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	68f8      	ldr	r0, [r7, #12]
 8000f50:	f7ff ffca 	bl	8000ee8 <_ZN10UART_servo9UART_SendEh>
	UART_Send(0x83);              //header mark & command code
 8000f54:	2183      	movs	r1, #131	@ 0x83
 8000f56:	68f8      	ldr	r0, [r7, #12]
 8000f58:	f7ff ffc6 	bl	8000ee8 <_ZN10UART_servo9UART_SendEh>
	UART_Send(0x05);              //total data length
 8000f5c:	2105      	movs	r1, #5
 8000f5e:	68f8      	ldr	r0, [r7, #12]
 8000f60:	f7ff ffc2 	bl	8000ee8 <_ZN10UART_servo9UART_SendEh>
	UART_Send((Position / 256) & 0x7F);  //Servo Pos_H
 8000f64:	893b      	ldrh	r3, [r7, #8]
 8000f66:	0a1b      	lsrs	r3, r3, #8
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	4619      	mov	r1, r3
 8000f74:	68f8      	ldr	r0, [r7, #12]
 8000f76:	f7ff ffb7 	bl	8000ee8 <_ZN10UART_servo9UART_SendEh>
	UART_Send(Position % 256);           //Servo Pos_L
 8000f7a:	893b      	ldrh	r3, [r7, #8]
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	4619      	mov	r1, r3
 8000f80:	68f8      	ldr	r0, [r7, #12]
 8000f82:	f7ff ffb1 	bl	8000ee8 <_ZN10UART_servo9UART_SendEh>
	UART_Send((Time / 256) & 0x7F); //Servo Time_H
 8000f86:	88fb      	ldrh	r3, [r7, #6]
 8000f88:	0a1b      	lsrs	r3, r3, #8
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	4619      	mov	r1, r3
 8000f96:	68f8      	ldr	r0, [r7, #12]
 8000f98:	f7ff ffa6 	bl	8000ee8 <_ZN10UART_servo9UART_SendEh>
	UART_Send(Time % 256);          //Servo Time_L
 8000f9c:	88fb      	ldrh	r3, [r7, #6]
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	68f8      	ldr	r0, [r7, #12]
 8000fa4:	f7ff ffa0 	bl	8000ee8 <_ZN10UART_servo9UART_SendEh>
	UART_Send(Checksum_Calc);     //data length (one servo with time and speed)
 8000fa8:	4b05      	ldr	r3, [pc, #20]	@ (8000fc0 <_ZN10UART_servo26UART_Send_SetMotorPositionEttt+0x9c>)
 8000faa:	881b      	ldrh	r3, [r3, #0]
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	4619      	mov	r1, r3
 8000fb0:	68f8      	ldr	r0, [r7, #12]
 8000fb2:	f7ff ff99 	bl	8000ee8 <_ZN10UART_servo9UART_SendEh>
}
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000164 	.word	0x20000164

08000fc4 <_ZN10UART_servo3runEv>:
void UART_servo::run(){//put in timer IT
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	UART_Send_SetMotorPosition(motorId,(uint16_t)(800+7*pos),reflectime);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	8819      	ldrh	r1, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	00d2      	lsls	r2, r2, #3
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 8000fe2:	b29a      	uxth	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	891b      	ldrh	r3, [r3, #8]
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff ff9b 	bl	8000f24 <_ZN10UART_servo26UART_Send_SetMotorPositionEttt>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <_ZN10UART_servo10update_posEi>:
void UART_servo::update_pos(int _pos){
 8000ff6:	b480      	push	{r7}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
 8000ffe:	6039      	str	r1, [r7, #0]
	pos = _pos;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	683a      	ldr	r2, [r7, #0]
 8001004:	605a      	str	r2, [r3, #4]
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <_ZN10UART_servoC1EttP20__UART_HandleTypeDef>:
public:
	void UART_Send(uint8_t u8_data);
	void UART_Send_SetMotorPosition(uint16_t motorId, uint16_t Position, uint16_t Time);
	void update_pos(int pos);
	void run();
    UART_servo(uint16_t id, uint16_t _reflect_time, UART_HandleTypeDef* _servo_uart)
 8001012:	b480      	push	{r7}
 8001014:	b085      	sub	sp, #20
 8001016:	af00      	add	r7, sp, #0
 8001018:	60f8      	str	r0, [r7, #12]
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	460b      	mov	r3, r1
 800101e:	817b      	strh	r3, [r7, #10]
 8001020:	4613      	mov	r3, r2
 8001022:	813b      	strh	r3, [r7, #8]
        : motorId(id), reflectime(_reflect_time), servo_uart(_servo_uart) {
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	897a      	ldrh	r2, [r7, #10]
 8001028:	801a      	strh	r2, [r3, #0]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	893a      	ldrh	r2, [r7, #8]
 800102e:	811a      	strh	r2, [r3, #8]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	60da      	str	r2, [r3, #12]
        // 初始化其他成員變數
        Position = 0;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	2200      	movs	r2, #0
 800103a:	805a      	strh	r2, [r3, #2]
        pos = 0;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2200      	movs	r2, #0
 8001040:	605a      	str	r2, [r3, #4]
    }
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	4618      	mov	r0, r3
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftddd>:
#include "math.h"
#include "motor_config.h"

class MotorController{
public:
    MotorController(TIM_HandleTypeDef* enc, TIM_HandleTypeDef* pwm, uint32_t channel, GPIO_TypeDef* BGPIO, uint16_t BPin, double kp, double ki, double kd):
 8001050:	b580      	push	{r7, lr}
 8001052:	b08a      	sub	sp, #40	@ 0x28
 8001054:	af00      	add	r7, sp, #0
 8001056:	6278      	str	r0, [r7, #36]	@ 0x24
 8001058:	6239      	str	r1, [r7, #32]
 800105a:	61fa      	str	r2, [r7, #28]
 800105c:	61bb      	str	r3, [r7, #24]
 800105e:	ed87 0b04 	vstr	d0, [r7, #16]
 8001062:	ed87 1b02 	vstr	d1, [r7, #8]
 8001066:	ed87 2b00 	vstr	d2, [r7]
        _enc(enc), _pwm(pwm), _channel(channel), _BGPIO(BGPIO), _BPin(BPin), _kp(kp), _ki(ki), _kd(kd){}
 800106a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800106c:	4a3d      	ldr	r2, [pc, #244]	@ (8001164 <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftddd+0x114>)
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001072:	6a3a      	ldr	r2, [r7, #32]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001078:	69fa      	ldr	r2, [r7, #28]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001084:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001086:	619a      	str	r2, [r3, #24]
 8001088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800108a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800108c:	839a      	strh	r2, [r3, #28]
 800108e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001092:	f7ff fcf3 	bl	8000a7c <__aeabi_d2f>
 8001096:	4602      	mov	r2, r0
 8001098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800109a:	621a      	str	r2, [r3, #32]
 800109c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010a0:	f7ff fcec 	bl	8000a7c <__aeabi_d2f>
 80010a4:	4602      	mov	r2, r0
 80010a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a8:	625a      	str	r2, [r3, #36]	@ 0x24
 80010aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010ae:	f7ff fce5 	bl	8000a7c <__aeabi_d2f>
 80010b2:	4602      	mov	r2, r0
 80010b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80010b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 80010c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c2:	2200      	movs	r2, #0
 80010c4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 80010c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ca:	2200      	movs	r2, #0
 80010cc:	85da      	strh	r2, [r3, #46]	@ 0x2e
 80010ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d0:	2200      	movs	r2, #0
 80010d2:	861a      	strh	r2, [r3, #48]	@ 0x30
 80010d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d6:	2200      	movs	r2, #0
 80010d8:	865a      	strh	r2, [r3, #50]	@ 0x32
 80010da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010dc:	f04f 0200 	mov.w	r2, #0
 80010e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80010e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e4:	f04f 0200 	mov.w	r2, #0
 80010e8:	639a      	str	r2, [r3, #56]	@ 0x38
 80010ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ec:	f04f 0200 	mov.w	r2, #0
 80010f0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80010f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f4:	f04f 0200 	mov.w	r2, #0
 80010f8:	641a      	str	r2, [r3, #64]	@ 0x40
 80010fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010fc:	f04f 0200 	mov.w	r2, #0
 8001100:	645a      	str	r2, [r3, #68]	@ 0x44
 8001102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001104:	f04f 0200 	mov.w	r2, #0
 8001108:	649a      	str	r2, [r3, #72]	@ 0x48
 800110a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800110c:	f04f 0200 	mov.w	r2, #0
 8001110:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001114:	4a14      	ldr	r2, [pc, #80]	@ (8001168 <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftddd+0x118>)
 8001116:	651a      	str	r2, [r3, #80]	@ 0x50
 8001118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800111a:	2200      	movs	r2, #0
 800111c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
 8001120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001122:	2200      	movs	r2, #0
 8001124:	659a      	str	r2, [r3, #88]	@ 0x58
 8001126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001128:	2200      	movs	r2, #0
 800112a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800112c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112e:	2200      	movs	r2, #0
 8001130:	661a      	str	r2, [r3, #96]	@ 0x60
 8001132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001134:	2200      	movs	r2, #0
 8001136:	665a      	str	r2, [r3, #100]	@ 0x64
 8001138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800113a:	2200      	movs	r2, #0
 800113c:	669a      	str	r2, [r3, #104]	@ 0x68
 800113e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001140:	4a08      	ldr	r2, [pc, #32]	@ (8001164 <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftddd+0x114>)
 8001142:	66da      	str	r2, [r3, #108]	@ 0x6c
 8001144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	675a      	str	r2, [r3, #116]	@ 0x74
 800114c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800114e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001152:	679a      	str	r2, [r3, #120]	@ 0x78
 8001154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001156:	2232      	movs	r2, #50	@ 0x32
 8001158:	67da      	str	r2, [r3, #124]	@ 0x7c
 800115a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800115c:	4618      	mov	r0, r3
 800115e:	3728      	adds	r7, #40	@ 0x28
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	437a0000 	.word	0x437a0000
 8001168:	42c80000 	.word	0x42c80000

0800116c <arm_init>:
#define CASCADE_STARTHIGHT 250.0f
float cascade_height = CASCADE_STARTHIGHT; //cascade起始高度
MotorController Motor_cas(&htim1, &htim12, TIM_CHANNEL_2, GPIOB, GPIO_PIN_12, 0.6, 30, 0);


void arm_init(void) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af02      	add	r7, sp, #8
	// 手臂初始化邏輯
	HAL_Init();
 8001172:	f002 fe11 	bl	8003d98 <HAL_Init>
	// 啟動 Encoder 與 PWM
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001176:	213c      	movs	r1, #60	@ 0x3c
 8001178:	4837      	ldr	r0, [pc, #220]	@ (8001258 <arm_init+0xec>)
 800117a:	f004 fe9f 	bl	8005ebc <HAL_TIM_Encoder_Start>
//	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 800117e:	2104      	movs	r1, #4
 8001180:	4836      	ldr	r0, [pc, #216]	@ (800125c <arm_init+0xf0>)
 8001182:	f004 fd2d 	bl	8005be0 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001186:	2201      	movs	r2, #1
 8001188:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800118c:	4834      	ldr	r0, [pc, #208]	@ (8001260 <arm_init+0xf4>)
 800118e:	f003 fcbd 	bl	8004b0c <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001192:	2100      	movs	r1, #0
 8001194:	4833      	ldr	r0, [pc, #204]	@ (8001264 <arm_init+0xf8>)
 8001196:	f004 fd23 	bl	8005be0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800119a:	2100      	movs	r1, #0
 800119c:	4832      	ldr	r0, [pc, #200]	@ (8001268 <arm_init+0xfc>)
 800119e:	f004 fd1f 	bl	8005be0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80011a2:	2104      	movs	r1, #4
 80011a4:	4830      	ldr	r0, [pc, #192]	@ (8001268 <arm_init+0xfc>)
 80011a6:	f004 fd1b 	bl	8005be0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80011aa:	2108      	movs	r1, #8
 80011ac:	482e      	ldr	r0, [pc, #184]	@ (8001268 <arm_init+0xfc>)
 80011ae:	f004 fd17 	bl	8005be0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80011b2:	210c      	movs	r1, #12
 80011b4:	482c      	ldr	r0, [pc, #176]	@ (8001268 <arm_init+0xfc>)
 80011b6:	f004 fd13 	bl	8005be0 <HAL_TIM_PWM_Start>

	servo1.update_pos(servo1_pos);
 80011ba:	4b2c      	ldr	r3, [pc, #176]	@ (800126c <arm_init+0x100>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4619      	mov	r1, r3
 80011c0:	482b      	ldr	r0, [pc, #172]	@ (8001270 <arm_init+0x104>)
 80011c2:	f7ff ff18 	bl	8000ff6 <_ZN10UART_servo10update_posEi>
	servo2.update_pos(servo2_pos);
 80011c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001274 <arm_init+0x108>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4619      	mov	r1, r3
 80011cc:	482a      	ldr	r0, [pc, #168]	@ (8001278 <arm_init+0x10c>)
 80011ce:	f7ff ff12 	bl	8000ff6 <_ZN10UART_servo10update_posEi>
	servo3.update_pos(servo3_pos);
 80011d2:	4b2a      	ldr	r3, [pc, #168]	@ (800127c <arm_init+0x110>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4619      	mov	r1, r3
 80011d8:	4829      	ldr	r0, [pc, #164]	@ (8001280 <arm_init+0x114>)
 80011da:	f7ff ff0c 	bl	8000ff6 <_ZN10UART_servo10update_posEi>

	servo1.run();
 80011de:	4824      	ldr	r0, [pc, #144]	@ (8001270 <arm_init+0x104>)
 80011e0:	f7ff fef0 	bl	8000fc4 <_ZN10UART_servo3runEv>
	servo2.run();
 80011e4:	4824      	ldr	r0, [pc, #144]	@ (8001278 <arm_init+0x10c>)
 80011e6:	f7ff feed 	bl	8000fc4 <_ZN10UART_servo3runEv>
	servo3.run();
 80011ea:	4825      	ldr	r0, [pc, #148]	@ (8001280 <arm_init+0x114>)
 80011ec:	f7ff feea 	bl	8000fc4 <_ZN10UART_servo3runEv>

	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, camera_servo_pos);
 80011f0:	4b24      	ldr	r3, [pc, #144]	@ (8001284 <arm_init+0x118>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001264 <arm_init+0xf8>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, doll_arm_pos);
 80011fa:	4b23      	ldr	r3, [pc, #140]	@ (8001288 <arm_init+0x11c>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001268 <arm_init+0xfc>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, doll_claw_pos);
 8001204:	4b21      	ldr	r3, [pc, #132]	@ (800128c <arm_init+0x120>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4b17      	ldr	r3, [pc, #92]	@ (8001268 <arm_init+0xfc>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, basket_right_pos);
 800120e:	4b20      	ldr	r3, [pc, #128]	@ (8001290 <arm_init+0x124>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	4b15      	ldr	r3, [pc, #84]	@ (8001268 <arm_init+0xfc>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, basket_left_pos);
 8001218:	4b1e      	ldr	r3, [pc, #120]	@ (8001294 <arm_init+0x128>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4b12      	ldr	r3, [pc, #72]	@ (8001268 <arm_init+0xfc>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	641a      	str	r2, [r3, #64]	@ 0x40

	// 初始化 Cascade
	Motor_cas.init(-1,-1);								// 初始化 Cascade 馬達控制器
 8001222:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001226:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800122a:	481b      	ldr	r0, [pc, #108]	@ (8001298 <arm_init+0x12c>)
 800122c:	f000 f9c5 	bl	80015ba <_ZN15MotorController4initEii>
	Motor_cas.setSpeed(0.0);							// 停止移動
 8001230:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 800129c <arm_init+0x130>
 8001234:	4818      	ldr	r0, [pc, #96]	@ (8001298 <arm_init+0x12c>)
 8001236:	f000 fa5b 	bl	80016f0 <_ZN15MotorController8setSpeedEf>
	xTaskCreate(arm_cascade_set_to_zero, "arm_cascade_set_to_zero", 512, NULL, 2, NULL); // 開啟 Cascade 歸零任務
 800123a:	2300      	movs	r3, #0
 800123c:	9301      	str	r3, [sp, #4]
 800123e:	2302      	movs	r3, #2
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	2300      	movs	r3, #0
 8001244:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001248:	4915      	ldr	r1, [pc, #84]	@ (80012a0 <arm_init+0x134>)
 800124a:	4816      	ldr	r0, [pc, #88]	@ (80012a4 <arm_init+0x138>)
 800124c:	f007 fffc 	bl	8009248 <xTaskCreate>
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200047c4 	.word	0x200047c4
 800125c:	200048e4 	.word	0x200048e4
 8001260:	40020400 	.word	0x40020400
 8001264:	2000489c 	.word	0x2000489c
 8001268:	2000480c 	.word	0x2000480c
 800126c:	20000198 	.word	0x20000198
 8001270:	20000168 	.word	0x20000168
 8001274:	2000019c 	.word	0x2000019c
 8001278:	20000178 	.word	0x20000178
 800127c:	200001a0 	.word	0x200001a0
 8001280:	20000188 	.word	0x20000188
 8001284:	200001b8 	.word	0x200001b8
 8001288:	200001b0 	.word	0x200001b0
 800128c:	200001b4 	.word	0x200001b4
 8001290:	200001a8 	.word	0x200001a8
 8001294:	200001ac 	.word	0x200001ac
 8001298:	200001c4 	.word	0x200001c4
 800129c:	00000000 	.word	0x00000000
 80012a0:	08019978 	.word	0x08019978
 80012a4:	08001379 	.word	0x08001379

080012a8 <arm_timer_callback>:


void arm_timer_callback(void) {							// constantly run the servo in timer callback
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
	if(started) Motor_cas.setgoal(cascade_height); 		// after the system is fully initialized, keep updating the goal position
 80012ac:	4b22      	ldr	r3, [pc, #136]	@ (8001338 <arm_timer_callback+0x90>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d007      	beq.n	80012c4 <arm_timer_callback+0x1c>
 80012b4:	4b21      	ldr	r3, [pc, #132]	@ (800133c <arm_timer_callback+0x94>)
 80012b6:	edd3 7a00 	vldr	s15, [r3]
 80012ba:	eeb0 0a67 	vmov.f32	s0, s15
 80012be:	4820      	ldr	r0, [pc, #128]	@ (8001340 <arm_timer_callback+0x98>)
 80012c0:	f000 fb7c 	bl	80019bc <_ZN15MotorController7setgoalEf>
	Motor_cas.MotorOutput();							// update the motor PWM output	
 80012c4:	481e      	ldr	r0, [pc, #120]	@ (8001340 <arm_timer_callback+0x98>)
 80012c6:	f000 f997 	bl	80015f8 <_ZN15MotorController11MotorOutputEv>
	servo1.update_pos(servo1_pos);
 80012ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001344 <arm_timer_callback+0x9c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4619      	mov	r1, r3
 80012d0:	481d      	ldr	r0, [pc, #116]	@ (8001348 <arm_timer_callback+0xa0>)
 80012d2:	f7ff fe90 	bl	8000ff6 <_ZN10UART_servo10update_posEi>
	servo2.update_pos(servo2_pos);
 80012d6:	4b1d      	ldr	r3, [pc, #116]	@ (800134c <arm_timer_callback+0xa4>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4619      	mov	r1, r3
 80012dc:	481c      	ldr	r0, [pc, #112]	@ (8001350 <arm_timer_callback+0xa8>)
 80012de:	f7ff fe8a 	bl	8000ff6 <_ZN10UART_servo10update_posEi>
	servo3.update_pos(servo3_pos);
 80012e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001354 <arm_timer_callback+0xac>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4619      	mov	r1, r3
 80012e8:	481b      	ldr	r0, [pc, #108]	@ (8001358 <arm_timer_callback+0xb0>)
 80012ea:	f7ff fe84 	bl	8000ff6 <_ZN10UART_servo10update_posEi>
	servo1.run();
 80012ee:	4816      	ldr	r0, [pc, #88]	@ (8001348 <arm_timer_callback+0xa0>)
 80012f0:	f7ff fe68 	bl	8000fc4 <_ZN10UART_servo3runEv>
	servo2.run();
 80012f4:	4816      	ldr	r0, [pc, #88]	@ (8001350 <arm_timer_callback+0xa8>)
 80012f6:	f7ff fe65 	bl	8000fc4 <_ZN10UART_servo3runEv>
	servo3.run();
 80012fa:	4817      	ldr	r0, [pc, #92]	@ (8001358 <arm_timer_callback+0xb0>)
 80012fc:	f7ff fe62 	bl	8000fc4 <_ZN10UART_servo3runEv>
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, camera_servo_pos);
 8001300:	4b16      	ldr	r3, [pc, #88]	@ (800135c <arm_timer_callback+0xb4>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4b16      	ldr	r3, [pc, #88]	@ (8001360 <arm_timer_callback+0xb8>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, doll_arm_pos);
 800130a:	4b16      	ldr	r3, [pc, #88]	@ (8001364 <arm_timer_callback+0xbc>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	4b16      	ldr	r3, [pc, #88]	@ (8001368 <arm_timer_callback+0xc0>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, doll_claw_pos);
 8001314:	4b15      	ldr	r3, [pc, #84]	@ (800136c <arm_timer_callback+0xc4>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b13      	ldr	r3, [pc, #76]	@ (8001368 <arm_timer_callback+0xc0>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, basket_right_pos);
 800131e:	4b14      	ldr	r3, [pc, #80]	@ (8001370 <arm_timer_callback+0xc8>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <arm_timer_callback+0xc0>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, basket_left_pos);
 8001328:	4b12      	ldr	r3, [pc, #72]	@ (8001374 <arm_timer_callback+0xcc>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4b0e      	ldr	r3, [pc, #56]	@ (8001368 <arm_timer_callback+0xc0>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	200001c0 	.word	0x200001c0
 800133c:	20000028 	.word	0x20000028
 8001340:	200001c4 	.word	0x200001c4
 8001344:	20000198 	.word	0x20000198
 8001348:	20000168 	.word	0x20000168
 800134c:	2000019c 	.word	0x2000019c
 8001350:	20000178 	.word	0x20000178
 8001354:	200001a0 	.word	0x200001a0
 8001358:	20000188 	.word	0x20000188
 800135c:	200001b8 	.word	0x200001b8
 8001360:	2000489c 	.word	0x2000489c
 8001364:	200001b0 	.word	0x200001b0
 8001368:	2000480c 	.word	0x2000480c
 800136c:	200001b4 	.word	0x200001b4
 8001370:	200001a8 	.word	0x200001a8
 8001374:	200001ac 	.word	0x200001ac

08001378 <arm_cascade_set_to_zero>:


void arm_cascade_set_to_zero(void* pvParameters){
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	set_to_zero = 0;
 8001380:	4b1a      	ldr	r3, [pc, #104]	@ (80013ec <arm_cascade_set_to_zero+0x74>)
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
	cascade_height = CASCADE_STARTHIGHT + 30.0f; 		// 設定目標高度為目前位置向上30mm
 8001386:	4b1a      	ldr	r3, [pc, #104]	@ (80013f0 <arm_cascade_set_to_zero+0x78>)
 8001388:	4a1a      	ldr	r2, [pc, #104]	@ (80013f4 <arm_cascade_set_to_zero+0x7c>)
 800138a:	601a      	str	r2, [r3, #0]
	while(!Motor_cas.goal_reached()){
 800138c:	e00a      	b.n	80013a4 <arm_cascade_set_to_zero+0x2c>
		Motor_cas.setgoal(cascade_height); 				// 往上移動一點點，防止原本已經在底部
 800138e:	4b18      	ldr	r3, [pc, #96]	@ (80013f0 <arm_cascade_set_to_zero+0x78>)
 8001390:	edd3 7a00 	vldr	s15, [r3]
 8001394:	eeb0 0a67 	vmov.f32	s0, s15
 8001398:	4817      	ldr	r0, [pc, #92]	@ (80013f8 <arm_cascade_set_to_zero+0x80>)
 800139a:	f000 fb0f 	bl	80019bc <_ZN15MotorController7setgoalEf>
		osDelay(10);									// delay 10ms to avoid too high refreshing rate
 800139e:	200a      	movs	r0, #10
 80013a0:	f007 f8f4 	bl	800858c <osDelay>
	while(!Motor_cas.goal_reached()){
 80013a4:	4814      	ldr	r0, [pc, #80]	@ (80013f8 <arm_cascade_set_to_zero+0x80>)
 80013a6:	f000 fb5d 	bl	8001a64 <_ZN15MotorController12goal_reachedEv>
 80013aa:	4603      	mov	r3, r0
 80013ac:	f083 0301 	eor.w	r3, r3, #1
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1eb      	bne.n	800138e <arm_cascade_set_to_zero+0x16>
	}
	while(!set_to_zero){
 80013b6:	e007      	b.n	80013c8 <arm_cascade_set_to_zero+0x50>
		Motor_cas.setSpeed(-0.3f); 						// 以固定速度往下移動
 80013b8:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 80013fc <arm_cascade_set_to_zero+0x84>
 80013bc:	480e      	ldr	r0, [pc, #56]	@ (80013f8 <arm_cascade_set_to_zero+0x80>)
 80013be:	f000 f997 	bl	80016f0 <_ZN15MotorController8setSpeedEf>
		osDelay(10);									// delay 10ms to avoid too high refreshing rate
 80013c2:	200a      	movs	r0, #10
 80013c4:	f007 f8e2 	bl	800858c <osDelay>
	while(!set_to_zero){
 80013c8:	4b08      	ldr	r3, [pc, #32]	@ (80013ec <arm_cascade_set_to_zero+0x74>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d0f3      	beq.n	80013b8 <arm_cascade_set_to_zero+0x40>
	}
	started = 1;										// 系統初始化完成，可以開始移動 Cascade
 80013d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001400 <arm_cascade_set_to_zero+0x88>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	601a      	str	r2, [r3, #0]
	cascade_height = 280;
 80013d6:	4b06      	ldr	r3, [pc, #24]	@ (80013f0 <arm_cascade_set_to_zero+0x78>)
 80013d8:	4a06      	ldr	r2, [pc, #24]	@ (80013f4 <arm_cascade_set_to_zero+0x7c>)
 80013da:	601a      	str	r2, [r3, #0]
	vTaskDelete(NULL);  // Delete current task when mission is complete
 80013dc:	2000      	movs	r0, #0
 80013de:	f008 f891 	bl	8009504 <vTaskDelete>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	200001bc 	.word	0x200001bc
 80013f0:	20000028 	.word	0x20000028
 80013f4:	438c0000 	.word	0x438c0000
 80013f8:	200001c4 	.word	0x200001c4
 80013fc:	be99999a 	.word	0xbe99999a
 8001400:	200001c0 	.word	0x200001c0

08001404 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2) {
 800140e:	88fb      	ldrh	r3, [r7, #6]
 8001410:	2b04      	cmp	r3, #4
 8001412:	d10d      	bne.n	8001430 <HAL_GPIO_EXTI_Callback+0x2c>
		set_to_zero = 1;								// 設定 Cascade 歸零旗標
 8001414:	4b08      	ldr	r3, [pc, #32]	@ (8001438 <HAL_GPIO_EXTI_Callback+0x34>)
 8001416:	2201      	movs	r2, #1
 8001418:	601a      	str	r2, [r3, #0]
		Motor_cas.setSpeed(0.0f);						// 停止移動
 800141a:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800143c <HAL_GPIO_EXTI_Callback+0x38>
 800141e:	4808      	ldr	r0, [pc, #32]	@ (8001440 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001420:	f000 f966 	bl	80016f0 <_ZN15MotorController8setSpeedEf>
		Motor_cas._cascade_height = CASCADE_STARTHIGHT;	// 重置 Cascade 量測高度
 8001424:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001426:	4a07      	ldr	r2, [pc, #28]	@ (8001444 <HAL_GPIO_EXTI_Callback+0x40>)
 8001428:	601a      	str	r2, [r3, #0]
		cascade_height = CASCADE_STARTHIGHT;			// 重置 Cascade 目標高度
 800142a:	4b07      	ldr	r3, [pc, #28]	@ (8001448 <HAL_GPIO_EXTI_Callback+0x44>)
 800142c:	4a05      	ldr	r2, [pc, #20]	@ (8001444 <HAL_GPIO_EXTI_Callback+0x40>)
 800142e:	601a      	str	r2, [r3, #0]
	}
}
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	200001bc 	.word	0x200001bc
 800143c:	00000000 	.word	0x00000000
 8001440:	200001c4 	.word	0x200001c4
 8001444:	437a0000 	.word	0x437a0000
 8001448:	20000028 	.word	0x20000028
 800144c:	00000000 	.word	0x00000000

08001450 <_Z41__static_initialization_and_destruction_0v>:
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af02      	add	r7, sp, #8
UART_servo servo1(1, 1000, &huart3);
 8001456:	4b36      	ldr	r3, [pc, #216]	@ (8001530 <_Z41__static_initialization_and_destruction_0v+0xe0>)
 8001458:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800145c:	2101      	movs	r1, #1
 800145e:	4835      	ldr	r0, [pc, #212]	@ (8001534 <_Z41__static_initialization_and_destruction_0v+0xe4>)
 8001460:	f7ff fdd7 	bl	8001012 <_ZN10UART_servoC1EttP20__UART_HandleTypeDef>
UART_servo servo2(3, 1000, &huart3);
 8001464:	4b32      	ldr	r3, [pc, #200]	@ (8001530 <_Z41__static_initialization_and_destruction_0v+0xe0>)
 8001466:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800146a:	2103      	movs	r1, #3
 800146c:	4832      	ldr	r0, [pc, #200]	@ (8001538 <_Z41__static_initialization_and_destruction_0v+0xe8>)
 800146e:	f7ff fdd0 	bl	8001012 <_ZN10UART_servoC1EttP20__UART_HandleTypeDef>
UART_servo servo3(4, 1000, &huart3);
 8001472:	4b2f      	ldr	r3, [pc, #188]	@ (8001530 <_Z41__static_initialization_and_destruction_0v+0xe0>)
 8001474:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001478:	2104      	movs	r1, #4
 800147a:	4830      	ldr	r0, [pc, #192]	@ (800153c <_Z41__static_initialization_and_destruction_0v+0xec>)
 800147c:	f7ff fdc9 	bl	8001012 <_ZN10UART_servoC1EttP20__UART_HandleTypeDef>
int servo1_pos = standard_pos_1 + 90, servo2_pos = standard_pos_2 + 100, servo3_pos = gripper_close; 	// servo 初始位置
 8001480:	4b2f      	ldr	r3, [pc, #188]	@ (8001540 <_Z41__static_initialization_and_destruction_0v+0xf0>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	335a      	adds	r3, #90	@ 0x5a
 8001486:	4a2f      	ldr	r2, [pc, #188]	@ (8001544 <_Z41__static_initialization_and_destruction_0v+0xf4>)
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	4b2f      	ldr	r3, [pc, #188]	@ (8001548 <_Z41__static_initialization_and_destruction_0v+0xf8>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	3364      	adds	r3, #100	@ 0x64
 8001490:	4a2e      	ldr	r2, [pc, #184]	@ (800154c <_Z41__static_initialization_and_destruction_0v+0xfc>)
 8001492:	6013      	str	r3, [r2, #0]
 8001494:	4b2e      	ldr	r3, [pc, #184]	@ (8001550 <_Z41__static_initialization_and_destruction_0v+0x100>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a2e      	ldr	r2, [pc, #184]	@ (8001554 <_Z41__static_initialization_and_destruction_0v+0x104>)
 800149a:	6013      	str	r3, [r2, #0]
int basket_right_pos = 500+200/180*basket_pos1, basket_left_pos = 500+1200/180*basket_pos2;
 800149c:	4b2e      	ldr	r3, [pc, #184]	@ (8001558 <_Z41__static_initialization_and_destruction_0v+0x108>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80014a4:	4a2d      	ldr	r2, [pc, #180]	@ (800155c <_Z41__static_initialization_and_destruction_0v+0x10c>)
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001560 <_Z41__static_initialization_and_destruction_0v+0x110>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4613      	mov	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4413      	add	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80014b8:	4a2a      	ldr	r2, [pc, #168]	@ (8001564 <_Z41__static_initialization_and_destruction_0v+0x114>)
 80014ba:	6013      	str	r3, [r2, #0]
int doll_arm_pos = 500+1200/180*doll_pos1, doll_claw_pos = 500+1200/180*doll_pos2;
 80014bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001568 <_Z41__static_initialization_and_destruction_0v+0x118>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4613      	mov	r3, r2
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	4413      	add	r3, r2
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80014cc:	4a27      	ldr	r2, [pc, #156]	@ (800156c <_Z41__static_initialization_and_destruction_0v+0x11c>)
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	4b27      	ldr	r3, [pc, #156]	@ (8001570 <_Z41__static_initialization_and_destruction_0v+0x120>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4613      	mov	r3, r2
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	4413      	add	r3, r2
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80014e0:	4a24      	ldr	r2, [pc, #144]	@ (8001574 <_Z41__static_initialization_and_destruction_0v+0x124>)
 80014e2:	6013      	str	r3, [r2, #0]
int camera_servo_pos = camera_front;
 80014e4:	4b24      	ldr	r3, [pc, #144]	@ (8001578 <_Z41__static_initialization_and_destruction_0v+0x128>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a24      	ldr	r2, [pc, #144]	@ (800157c <_Z41__static_initialization_and_destruction_0v+0x12c>)
 80014ea:	6013      	str	r3, [r2, #0]
MotorController Motor_cas(&htim1, &htim12, TIM_CHANNEL_2, GPIOB, GPIO_PIN_12, 0.6, 30, 0);
 80014ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014f0:	9301      	str	r3, [sp, #4]
 80014f2:	4b23      	ldr	r3, [pc, #140]	@ (8001580 <_Z41__static_initialization_and_destruction_0v+0x130>)
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	ed9f 2b08 	vldr	d2, [pc, #32]	@ 8001518 <_Z41__static_initialization_and_destruction_0v+0xc8>
 80014fa:	ed9f 1b09 	vldr	d1, [pc, #36]	@ 8001520 <_Z41__static_initialization_and_destruction_0v+0xd0>
 80014fe:	ed9f 0b0a 	vldr	d0, [pc, #40]	@ 8001528 <_Z41__static_initialization_and_destruction_0v+0xd8>
 8001502:	2304      	movs	r3, #4
 8001504:	4a1f      	ldr	r2, [pc, #124]	@ (8001584 <_Z41__static_initialization_and_destruction_0v+0x134>)
 8001506:	4920      	ldr	r1, [pc, #128]	@ (8001588 <_Z41__static_initialization_and_destruction_0v+0x138>)
 8001508:	4820      	ldr	r0, [pc, #128]	@ (800158c <_Z41__static_initialization_and_destruction_0v+0x13c>)
 800150a:	f7ff fda1 	bl	8001050 <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftddd>
}
 800150e:	bf00      	nop
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	f3af 8000 	nop.w
	...
 8001524:	403e0000 	.word	0x403e0000
 8001528:	33333333 	.word	0x33333333
 800152c:	3fe33333 	.word	0x3fe33333
 8001530:	20004974 	.word	0x20004974
 8001534:	20000168 	.word	0x20000168
 8001538:	20000178 	.word	0x20000178
 800153c:	20000188 	.word	0x20000188
 8001540:	20000000 	.word	0x20000000
 8001544:	20000198 	.word	0x20000198
 8001548:	20000004 	.word	0x20000004
 800154c:	2000019c 	.word	0x2000019c
 8001550:	2000000c 	.word	0x2000000c
 8001554:	200001a0 	.word	0x200001a0
 8001558:	20000010 	.word	0x20000010
 800155c:	200001a8 	.word	0x200001a8
 8001560:	200001a4 	.word	0x200001a4
 8001564:	200001ac 	.word	0x200001ac
 8001568:	20000018 	.word	0x20000018
 800156c:	200001b0 	.word	0x200001b0
 8001570:	2000001c 	.word	0x2000001c
 8001574:	200001b4 	.word	0x200001b4
 8001578:	20000020 	.word	0x20000020
 800157c:	200001b8 	.word	0x200001b8
 8001580:	40020400 	.word	0x40020400
 8001584:	200048e4 	.word	0x200048e4
 8001588:	200047c4 	.word	0x200047c4
 800158c:	200001c4 	.word	0x200001c4

08001590 <_GLOBAL__sub_I_servo1>:
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
 8001594:	f7ff ff5c 	bl	8001450 <_Z41__static_initialization_and_destruction_0v>
 8001598:	bd80      	pop	{r7, pc}

0800159a <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	ed87 0a01 	vstr	s0, [r7, #4]
 80015a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80015a8:	eef0 7ae7 	vabs.f32	s15, s15
 80015ac:	eeb0 0a67 	vmov.f32	s0, s15
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <_ZN15MotorController4initEii>:
int times = 0;
uint32_t current_cnt;
float v = 0.5;
float e = 1.0;

void MotorController::init(int en_ctrl,int dir_ctrl) {
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b084      	sub	sp, #16
 80015be:	af00      	add	r7, sp, #0
 80015c0:	60f8      	str	r0, [r7, #12]
 80015c2:	60b9      	str	r1, [r7, #8]
 80015c4:	607a      	str	r2, [r7, #4]
    HAL_TIM_Encoder_Start(_enc, TIM_CHANNEL_ALL);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	213c      	movs	r1, #60	@ 0x3c
 80015cc:	4618      	mov	r0, r3
 80015ce:	f004 fc75 	bl	8005ebc <HAL_TIM_Encoder_Start>
    HAL_TIM_PWM_Start(_pwm, _channel);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	4619      	mov	r1, r3
 80015dc:	4610      	mov	r0, r2
 80015de:	f004 faff 	bl	8005be0 <HAL_TIM_PWM_Start>
    _dir_ctrl = dir_ctrl;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	65da      	str	r2, [r3, #92]	@ 0x5c
    _en_ctrl = en_ctrl;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	68ba      	ldr	r2, [r7, #8]
 80015ec:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80015ee:	bf00      	nop
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <_ZN15MotorController11MotorOutputEv>:

void MotorController::MotorOutput(void) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
    ComputePID();
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f000 f885 	bl	8001710 <_ZN15MotorController10ComputePIDEv>

    if (_dir_ctrl == 1){
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800160a:	2b01      	cmp	r3, #1
 800160c:	d112      	bne.n	8001634 <_ZN15MotorController11MotorOutputEv+0x3c>
    	HAL_GPIO_WritePin(_BGPIO, _BPin, _pidOutput >= 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6998      	ldr	r0, [r3, #24]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	8b99      	ldrh	r1, [r3, #28]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800161c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001624:	db01      	blt.n	800162a <_ZN15MotorController11MotorOutputEv+0x32>
 8001626:	2301      	movs	r3, #1
 8001628:	e000      	b.n	800162c <_ZN15MotorController11MotorOutputEv+0x34>
 800162a:	2300      	movs	r3, #0
 800162c:	461a      	mov	r2, r3
 800162e:	f003 fa6d 	bl	8004b0c <HAL_GPIO_WritePin>
 8001632:	e014      	b.n	800165e <_ZN15MotorController11MotorOutputEv+0x66>
    }else{
    	HAL_GPIO_WritePin(_BGPIO, _BPin, _pidOutput >= 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6998      	ldr	r0, [r3, #24]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	8b99      	ldrh	r1, [r3, #28]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001642:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164a:	bfac      	ite	ge
 800164c:	2301      	movge	r3, #1
 800164e:	2300      	movlt	r3, #0
 8001650:	b2db      	uxtb	r3, r3
 8001652:	f083 0301 	eor.w	r3, r3, #1
 8001656:	b2db      	uxtb	r3, r3
 8001658:	461a      	mov	r2, r3
 800165a:	f003 fa57 	bl	8004b0c <HAL_GPIO_WritePin>
    }
    _pwmValue = (uint16_t)(fabs(_pidOutput) * PWM_ARR );///  10.0);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001664:	eeb0 0a67 	vmov.f32	s0, s15
 8001668:	f7ff ff97 	bl	800159a <_ZSt4fabsf>
 800166c:	eef0 7a40 	vmov.f32	s15, s0
 8001670:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80016ec <_ZN15MotorController11MotorOutputEv+0xf4>
 8001674:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001678:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800167c:	ee17 3a90 	vmov	r3, s15
 8001680:	b29a      	uxth	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	865a      	strh	r2, [r3, #50]	@ 0x32
    if (_pwmValue < 10) _pwmValue = 0;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800168a:	2b09      	cmp	r3, #9
 800168c:	d802      	bhi.n	8001694 <_ZN15MotorController11MotorOutputEv+0x9c>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	865a      	strh	r2, [r3, #50]	@ 0x32
    __HAL_TIM_SET_COMPARE(_pwm, _channel, _pwmValue);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d106      	bne.n	80016aa <_ZN15MotorController11MotorOutputEv+0xb2>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80016a8:	e01b      	b.n	80016e2 <_ZN15MotorController11MotorOutputEv+0xea>
    __HAL_TIM_SET_COMPARE(_pwm, _channel, _pwmValue);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	d106      	bne.n	80016c0 <_ZN15MotorController11MotorOutputEv+0xc8>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80016be:	e010      	b.n	80016e2 <_ZN15MotorController11MotorOutputEv+0xea>
    __HAL_TIM_SET_COMPARE(_pwm, _channel, _pwmValue);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	2b08      	cmp	r3, #8
 80016c6:	d106      	bne.n	80016d6 <_ZN15MotorController11MotorOutputEv+0xde>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80016d4:	e005      	b.n	80016e2 <_ZN15MotorController11MotorOutputEv+0xea>
    __HAL_TIM_SET_COMPARE(_pwm, _channel, _pwmValue);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	447a0000 	.word	0x447a0000

080016f0 <_ZN15MotorController8setSpeedEf>:

void MotorController::setSpeed(float speed) {
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	ed87 0a00 	vstr	s0, [r7]
    _targetSpeed = speed;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
	...

08001710 <_ZN15MotorController10ComputePIDEv>:

float MotorController::getSpeed() {
    return _currentSpeed;
}

float MotorController::ComputePID() {
 8001710:	b5b0      	push	{r4, r5, r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
    updateSpeed();
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f000 f8a9 	bl	8001870 <_ZN15MotorController11updateSpeedEv>
    _error = _targetSpeed - _currentSpeed;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800172a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    _integral += _error * (DT / 1000.0);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe ff35 	bl	80005a8 <__aeabi_f2d>
 800173e:	4604      	mov	r4, r0
 8001740:	460d      	mov	r5, r1
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001746:	4618      	mov	r0, r3
 8001748:	f7fe ff2e 	bl	80005a8 <__aeabi_f2d>
 800174c:	a345      	add	r3, pc, #276	@ (adr r3, 8001864 <_ZN15MotorController10ComputePIDEv+0x154>)
 800174e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001752:	f7fe ff81 	bl	8000658 <__aeabi_dmul>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4620      	mov	r0, r4
 800175c:	4629      	mov	r1, r5
 800175e:	f7fe fdc5 	bl	80002ec <__adddf3>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4610      	mov	r0, r2
 8001768:	4619      	mov	r1, r3
 800176a:	f7ff f987 	bl	8000a7c <__aeabi_d2f>
 800176e:	4602      	mov	r2, r0
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	64da      	str	r2, [r3, #76]	@ 0x4c
    if(_integral >= INTEGRAL_LIMIT) _integral = INTEGRAL_LIMIT;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800177a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800177e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001786:	db04      	blt.n	8001792 <_ZN15MotorController10ComputePIDEv+0x82>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800178e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001790:	e00d      	b.n	80017ae <_ZN15MotorController10ComputePIDEv+0x9e>
    else if(_integral <= -INTEGRAL_LIMIT) _integral = -INTEGRAL_LIMIT;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001798:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800179c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a4:	d803      	bhi.n	80017ae <_ZN15MotorController10ComputePIDEv+0x9e>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f04f 423f 	mov.w	r2, #3204448256	@ 0xbf000000
 80017ac:	64da      	str	r2, [r3, #76]	@ 0x4c


    float derivative = (_error - _lastError) / (DT / 1000.0);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80017ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017be:	ee17 0a90 	vmov	r0, s15
 80017c2:	f7fe fef1 	bl	80005a8 <__aeabi_f2d>
 80017c6:	a327      	add	r3, pc, #156	@ (adr r3, 8001864 <_ZN15MotorController10ComputePIDEv+0x154>)
 80017c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017cc:	f7ff f86e 	bl	80008ac <__aeabi_ddiv>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	f7ff f950 	bl	8000a7c <__aeabi_d2f>
 80017dc:	4603      	mov	r3, r0
 80017de:	60fb      	str	r3, [r7, #12]

    _pidOutput = (_kp * _error) + (_ki * _integral); //+ (_kd * derivative);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	ed93 7a08 	vldr	s14, [r3, #32]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80017ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80017fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001800:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

    // Update last error
    _lastError = _error;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	649a      	str	r2, [r3, #72]	@ 0x48
    if(_pidOutput > 1) _pidOutput = 1;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001818:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800181c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001824:	dd04      	ble.n	8001830 <_ZN15MotorController10ComputePIDEv+0x120>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800182c:	635a      	str	r2, [r3, #52]	@ 0x34
 800182e:	e00c      	b.n	800184a <_ZN15MotorController10ComputePIDEv+0x13a>
    else if (_pidOutput < -1) _pidOutput = -1;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001836:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800183a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800183e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001842:	d502      	bpl.n	800184a <_ZN15MotorController10ComputePIDEv+0x13a>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a06      	ldr	r2, [pc, #24]	@ (8001860 <_ZN15MotorController10ComputePIDEv+0x150>)
 8001848:	635a      	str	r2, [r3, #52]	@ 0x34
    return _pidOutput;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
	_pidOutput = _kp * _error + _ki * _integral ;

	if (_pidOutput > 1) _pidOutput = 1;
	else if (_pidOutput < -1) _pidOutput = -1;
    return _pidOutput;
}
 800184e:	ee07 3a90 	vmov	s15, r3
 8001852:	eeb0 0a67 	vmov.f32	s0, s15
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bdb0      	pop	{r4, r5, r7, pc}
 800185c:	f3af 8000 	nop.w
 8001860:	bf800000 	.word	0xbf800000
 8001864:	47ae147b 	.word	0x47ae147b
 8001868:	3f847ae1 	.word	0x3f847ae1
 800186c:	00000000 	.word	0x00000000

08001870 <_ZN15MotorController11updateSpeedEv>:

float MotorController::updateSpeed() {
 8001870:	b5b0      	push	{r4, r5, r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
	cnt = __HAL_TIM_GetCounter(_enc);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001880:	b21a      	sxth	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	861a      	strh	r2, [r3, #48]	@ 0x30
	_cascade_height += -(float)cnt / (4.0f * ENCODER_RESOLUTION * REDUCTION_RATIO) * 3.14 * 35;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fe8c 	bl	80005a8 <__aeabi_f2d>
 8001890:	4604      	mov	r4, r0
 8001892:	460d      	mov	r5, r1
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800189a:	ee07 3a90 	vmov	s15, r3
 800189e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018a2:	eef1 7a67 	vneg.f32	s15, s15
 80018a6:	ee17 3a90 	vmov	r3, s15
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7fe fe7c 	bl	80005a8 <__aeabi_f2d>
 80018b0:	f04f 0200 	mov.w	r2, #0
 80018b4:	4b3c      	ldr	r3, [pc, #240]	@ (80019a8 <_ZN15MotorController11updateSpeedEv+0x138>)
 80018b6:	f7fe fff9 	bl	80008ac <__aeabi_ddiv>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	4610      	mov	r0, r2
 80018c0:	4619      	mov	r1, r3
 80018c2:	a335      	add	r3, pc, #212	@ (adr r3, 8001998 <_ZN15MotorController11updateSpeedEv+0x128>)
 80018c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c8:	f7fe fec6 	bl	8000658 <__aeabi_dmul>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4610      	mov	r0, r2
 80018d2:	4619      	mov	r1, r3
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	4b34      	ldr	r3, [pc, #208]	@ (80019ac <_ZN15MotorController11updateSpeedEv+0x13c>)
 80018da:	f7fe febd 	bl	8000658 <__aeabi_dmul>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4620      	mov	r0, r4
 80018e4:	4629      	mov	r1, r5
 80018e6:	f7fe fd01 	bl	80002ec <__adddf3>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	4610      	mov	r0, r2
 80018f0:	4619      	mov	r1, r3
 80018f2:	f7ff f8c3 	bl	8000a7c <__aeabi_d2f>
 80018f6:	4602      	mov	r2, r0
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	601a      	str	r2, [r3, #0]
	_currentSpeed = (cnt/ENCODER_RESOLUTION / REDUCTION_RATIO / 4) / (DT / 1000.0);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8001902:	4618      	mov	r0, r3
 8001904:	f7fe fe3e 	bl	8000584 <__aeabi_i2d>
 8001908:	f04f 0200 	mov.w	r2, #0
 800190c:	4b28      	ldr	r3, [pc, #160]	@ (80019b0 <_ZN15MotorController11updateSpeedEv+0x140>)
 800190e:	f7fe ffcd 	bl	80008ac <__aeabi_ddiv>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4610      	mov	r0, r2
 8001918:	4619      	mov	r1, r3
 800191a:	f04f 0200 	mov.w	r2, #0
 800191e:	4b25      	ldr	r3, [pc, #148]	@ (80019b4 <_ZN15MotorController11updateSpeedEv+0x144>)
 8001920:	f7fe ffc4 	bl	80008ac <__aeabi_ddiv>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4610      	mov	r0, r2
 800192a:	4619      	mov	r1, r3
 800192c:	f04f 0200 	mov.w	r2, #0
 8001930:	4b21      	ldr	r3, [pc, #132]	@ (80019b8 <_ZN15MotorController11updateSpeedEv+0x148>)
 8001932:	f7fe ffbb 	bl	80008ac <__aeabi_ddiv>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	4610      	mov	r0, r2
 800193c:	4619      	mov	r1, r3
 800193e:	a318      	add	r3, pc, #96	@ (adr r3, 80019a0 <_ZN15MotorController11updateSpeedEv+0x130>)
 8001940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001944:	f7fe ffb2 	bl	80008ac <__aeabi_ddiv>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4610      	mov	r0, r2
 800194e:	4619      	mov	r1, r3
 8001950:	f7ff f894 	bl	8000a7c <__aeabi_d2f>
 8001954:	4602      	mov	r2, r0
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COUNTER(_enc, 0);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2200      	movs	r2, #0
 8001962:	625a      	str	r2, [r3, #36]	@ 0x24
    _currentSpeed *= _en_ctrl;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800196e:	ee07 3a90 	vmov	s15, r3
 8001972:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
    return _currentSpeed;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001984:	ee07 3a90 	vmov	s15, r3
}
 8001988:	eeb0 0a67 	vmov.f32	s0, s15
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bdb0      	pop	{r4, r5, r7, pc}
 8001992:	bf00      	nop
 8001994:	f3af 8000 	nop.w
 8001998:	51eb851f 	.word	0x51eb851f
 800199c:	40091eb8 	.word	0x40091eb8
 80019a0:	47ae147b 	.word	0x47ae147b
 80019a4:	3f847ae1 	.word	0x3f847ae1
 80019a8:	40d80000 	.word	0x40d80000
 80019ac:	40418000 	.word	0x40418000
 80019b0:	40700000 	.word	0x40700000
 80019b4:	40380000 	.word	0x40380000
 80019b8:	40100000 	.word	0x40100000

080019bc <_ZN15MotorController7setgoalEf>:

void MotorController::setgoal(float target_height) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	ed87 0a00 	vstr	s0, [r7]
	_targrt_height  = target_height;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	641a      	str	r2, [r3, #64]	@ 0x40
	if(fabs(_targrt_height - _cascade_height) <= e){
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	edd3 7a00 	vldr	s15, [r3]
 80019da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019de:	eeb0 0a67 	vmov.f32	s0, s15
 80019e2:	f7ff fdda 	bl	800159a <_ZSt4fabsf>
 80019e6:	eeb0 7a40 	vmov.f32	s14, s0
 80019ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001a58 <_ZN15MotorController7setgoalEf+0x9c>)
 80019ec:	edd3 7a00 	vldr	s15, [r3]
 80019f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f8:	bf94      	ite	ls
 80019fa:	2301      	movls	r3, #1
 80019fc:	2300      	movhi	r3, #0
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d005      	beq.n	8001a10 <_ZN15MotorController7setgoalEf+0x54>
		setSpeed(0.0);
 8001a04:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8001a5c <_ZN15MotorController7setgoalEf+0xa0>
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff fe71 	bl	80016f0 <_ZN15MotorController8setSpeedEf>
	}
	else if(_targrt_height - _cascade_height>0) setSpeed(v);
	else setSpeed(-v);
}
 8001a0e:	e01f      	b.n	8001a50 <_ZN15MotorController7setgoalEf+0x94>
	else if(_targrt_height - _cascade_height>0) setSpeed(v);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	edd3 7a00 	vldr	s15, [r3]
 8001a1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a28:	dd08      	ble.n	8001a3c <_ZN15MotorController7setgoalEf+0x80>
 8001a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a60 <_ZN15MotorController7setgoalEf+0xa4>)
 8001a2c:	edd3 7a00 	vldr	s15, [r3]
 8001a30:	eeb0 0a67 	vmov.f32	s0, s15
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff fe5b 	bl	80016f0 <_ZN15MotorController8setSpeedEf>
}
 8001a3a:	e009      	b.n	8001a50 <_ZN15MotorController7setgoalEf+0x94>
	else setSpeed(-v);
 8001a3c:	4b08      	ldr	r3, [pc, #32]	@ (8001a60 <_ZN15MotorController7setgoalEf+0xa4>)
 8001a3e:	edd3 7a00 	vldr	s15, [r3]
 8001a42:	eef1 7a67 	vneg.f32	s15, s15
 8001a46:	eeb0 0a67 	vmov.f32	s0, s15
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff fe50 	bl	80016f0 <_ZN15MotorController8setSpeedEf>
}
 8001a50:	bf00      	nop
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20000030 	.word	0x20000030
 8001a5c:	00000000 	.word	0x00000000
 8001a60:	2000002c 	.word	0x2000002c

08001a64 <_ZN15MotorController12goal_reachedEv>:

bool MotorController::goal_reached(){
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
    if(fabs(_cascade_height-_targrt_height )<= e){
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	ed93 7a00 	vldr	s14, [r3]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001a78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a7c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a80:	f7ff fd8b 	bl	800159a <_ZSt4fabsf>
 8001a84:	eeb0 7a40 	vmov.f32	s14, s0
 8001a88:	4b09      	ldr	r3, [pc, #36]	@ (8001ab0 <_ZN15MotorController12goal_reachedEv+0x4c>)
 8001a8a:	edd3 7a00 	vldr	s15, [r3]
 8001a8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a96:	bf94      	ite	ls
 8001a98:	2301      	movls	r3, #1
 8001a9a:	2300      	movhi	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <_ZN15MotorController12goal_reachedEv+0x42>
        return true;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e000      	b.n	8001aa8 <_ZN15MotorController12goal_reachedEv+0x44>
    } else
        return false;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20000030 	.word	0x20000030

08001ab4 <mission_ctrl>:

void mission_init(void){
    arm_init();
}

void mission_ctrl(void){
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af02      	add	r7, sp, #8
    if(prev_mission_type != mission_type){
 8001aba:	4b51      	ldr	r3, [pc, #324]	@ (8001c00 <mission_ctrl+0x14c>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	4b51      	ldr	r3, [pc, #324]	@ (8001c04 <mission_ctrl+0x150>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	f000 8099 	beq.w	8001bfa <mission_ctrl+0x146>
        prev_mission_type = mission_type;
 8001ac8:	4b4e      	ldr	r3, [pc, #312]	@ (8001c04 <mission_ctrl+0x150>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a4c      	ldr	r2, [pc, #304]	@ (8001c00 <mission_ctrl+0x14c>)
 8001ace:	6013      	str	r3, [r2, #0]
        switch (mission_type)
 8001ad0:	4b4c      	ldr	r3, [pc, #304]	@ (8001c04 <mission_ctrl+0x150>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	2b05      	cmp	r3, #5
 8001ad8:	f200 8082 	bhi.w	8001be0 <mission_ctrl+0x12c>
 8001adc:	a201      	add	r2, pc, #4	@ (adr r2, 8001ae4 <mission_ctrl+0x30>)
 8001ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ae2:	bf00      	nop
 8001ae4:	08001afd 	.word	0x08001afd
 8001ae8:	08001b23 	.word	0x08001b23
 8001aec:	08001b49 	.word	0x08001b49
 8001af0:	08001b6f 	.word	0x08001b6f
 8001af4:	08001b95 	.word	0x08001b95
 8001af8:	08001bbb 	.word	0x08001bbb
        {
        case 1:
            if (!task_created) {
 8001afc:	4b42      	ldr	r3, [pc, #264]	@ (8001c08 <mission_ctrl+0x154>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d16f      	bne.n	8001be4 <mission_ctrl+0x130>
                task_created = 1;
 8001b04:	4b40      	ldr	r3, [pc, #256]	@ (8001c08 <mission_ctrl+0x154>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	601a      	str	r2, [r3, #0]
                xTaskCreate(mission_1, "mission_1", 512, NULL, 2, NULL);
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	9301      	str	r3, [sp, #4]
 8001b0e:	2302      	movs	r3, #2
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	2300      	movs	r3, #0
 8001b14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b18:	493c      	ldr	r1, [pc, #240]	@ (8001c0c <mission_ctrl+0x158>)
 8001b1a:	483d      	ldr	r0, [pc, #244]	@ (8001c10 <mission_ctrl+0x15c>)
 8001b1c:	f007 fb94 	bl	8009248 <xTaskCreate>
            }
            break;
 8001b20:	e060      	b.n	8001be4 <mission_ctrl+0x130>
        case 2:
			if (!task_created) {
 8001b22:	4b39      	ldr	r3, [pc, #228]	@ (8001c08 <mission_ctrl+0x154>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d15e      	bne.n	8001be8 <mission_ctrl+0x134>
				task_created = 1;
 8001b2a:	4b37      	ldr	r3, [pc, #220]	@ (8001c08 <mission_ctrl+0x154>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]
				xTaskCreate(mission_2, "mission_2", 512, NULL, 2, NULL);
 8001b30:	2300      	movs	r3, #0
 8001b32:	9301      	str	r3, [sp, #4]
 8001b34:	2302      	movs	r3, #2
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b3e:	4935      	ldr	r1, [pc, #212]	@ (8001c14 <mission_ctrl+0x160>)
 8001b40:	4835      	ldr	r0, [pc, #212]	@ (8001c18 <mission_ctrl+0x164>)
 8001b42:	f007 fb81 	bl	8009248 <xTaskCreate>
			}
			break;
 8001b46:	e04f      	b.n	8001be8 <mission_ctrl+0x134>
        case 3:
			if (!task_created) {
 8001b48:	4b2f      	ldr	r3, [pc, #188]	@ (8001c08 <mission_ctrl+0x154>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d14d      	bne.n	8001bec <mission_ctrl+0x138>
				task_created = 1;
 8001b50:	4b2d      	ldr	r3, [pc, #180]	@ (8001c08 <mission_ctrl+0x154>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	601a      	str	r2, [r3, #0]
				xTaskCreate(mission_3, "mission_3", 512, NULL, 2, NULL);
 8001b56:	2300      	movs	r3, #0
 8001b58:	9301      	str	r3, [sp, #4]
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	2300      	movs	r3, #0
 8001b60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b64:	492d      	ldr	r1, [pc, #180]	@ (8001c1c <mission_ctrl+0x168>)
 8001b66:	482e      	ldr	r0, [pc, #184]	@ (8001c20 <mission_ctrl+0x16c>)
 8001b68:	f007 fb6e 	bl	8009248 <xTaskCreate>
			}
			break;
 8001b6c:	e03e      	b.n	8001bec <mission_ctrl+0x138>
        case 4:
			if (!task_created) {
 8001b6e:	4b26      	ldr	r3, [pc, #152]	@ (8001c08 <mission_ctrl+0x154>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d13c      	bne.n	8001bf0 <mission_ctrl+0x13c>
				task_created = 1;
 8001b76:	4b24      	ldr	r3, [pc, #144]	@ (8001c08 <mission_ctrl+0x154>)
 8001b78:	2201      	movs	r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]
				xTaskCreate(mission_4, "mission_4", 512, NULL, 2, NULL);
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	9301      	str	r3, [sp, #4]
 8001b80:	2302      	movs	r3, #2
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	2300      	movs	r3, #0
 8001b86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b8a:	4926      	ldr	r1, [pc, #152]	@ (8001c24 <mission_ctrl+0x170>)
 8001b8c:	4826      	ldr	r0, [pc, #152]	@ (8001c28 <mission_ctrl+0x174>)
 8001b8e:	f007 fb5b 	bl	8009248 <xTaskCreate>
			}
			break;
 8001b92:	e02d      	b.n	8001bf0 <mission_ctrl+0x13c>
        case 5:
			if (!task_created) {
 8001b94:	4b1c      	ldr	r3, [pc, #112]	@ (8001c08 <mission_ctrl+0x154>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d12b      	bne.n	8001bf4 <mission_ctrl+0x140>
				task_created = 1;
 8001b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001c08 <mission_ctrl+0x154>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	601a      	str	r2, [r3, #0]
				xTaskCreate(mission_5, "mission_5", 512, NULL, 2, NULL);
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	9301      	str	r3, [sp, #4]
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	2300      	movs	r3, #0
 8001bac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bb0:	491e      	ldr	r1, [pc, #120]	@ (8001c2c <mission_ctrl+0x178>)
 8001bb2:	481f      	ldr	r0, [pc, #124]	@ (8001c30 <mission_ctrl+0x17c>)
 8001bb4:	f007 fb48 	bl	8009248 <xTaskCreate>
			}
			break;
 8001bb8:	e01c      	b.n	8001bf4 <mission_ctrl+0x140>
        case 6:
			if (!task_created) {
 8001bba:	4b13      	ldr	r3, [pc, #76]	@ (8001c08 <mission_ctrl+0x154>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d11a      	bne.n	8001bf8 <mission_ctrl+0x144>
				task_created = 1;
 8001bc2:	4b11      	ldr	r3, [pc, #68]	@ (8001c08 <mission_ctrl+0x154>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	601a      	str	r2, [r3, #0]
				xTaskCreate(mission_6, "mission_6", 512, NULL, 2, NULL);
 8001bc8:	2300      	movs	r3, #0
 8001bca:	9301      	str	r3, [sp, #4]
 8001bcc:	2302      	movs	r3, #2
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bd6:	4917      	ldr	r1, [pc, #92]	@ (8001c34 <mission_ctrl+0x180>)
 8001bd8:	4817      	ldr	r0, [pc, #92]	@ (8001c38 <mission_ctrl+0x184>)
 8001bda:	f007 fb35 	bl	8009248 <xTaskCreate>
			}
			break;
 8001bde:	e00b      	b.n	8001bf8 <mission_ctrl+0x144>
        default:
            break;
 8001be0:	bf00      	nop
 8001be2:	e00a      	b.n	8001bfa <mission_ctrl+0x146>
            break;
 8001be4:	bf00      	nop
 8001be6:	e008      	b.n	8001bfa <mission_ctrl+0x146>
			break;
 8001be8:	bf00      	nop
 8001bea:	e006      	b.n	8001bfa <mission_ctrl+0x146>
			break;
 8001bec:	bf00      	nop
 8001bee:	e004      	b.n	8001bfa <mission_ctrl+0x146>
			break;
 8001bf0:	bf00      	nop
 8001bf2:	e002      	b.n	8001bfa <mission_ctrl+0x146>
			break;
 8001bf4:	bf00      	nop
 8001bf6:	e000      	b.n	8001bfa <mission_ctrl+0x146>
			break;
 8001bf8:	bf00      	nop
        }
    }
}
 8001bfa:	bf00      	nop
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20000248 	.word	0x20000248
 8001c04:	20000244 	.word	0x20000244
 8001c08:	20000250 	.word	0x20000250
 8001c0c:	08019990 	.word	0x08019990
 8001c10:	08001c3d 	.word	0x08001c3d
 8001c14:	0801999c 	.word	0x0801999c
 8001c18:	08001ccd 	.word	0x08001ccd
 8001c1c:	080199a8 	.word	0x080199a8
 8001c20:	08001da1 	.word	0x08001da1
 8001c24:	080199b4 	.word	0x080199b4
 8001c28:	08001e31 	.word	0x08001e31
 8001c2c:	080199c0 	.word	0x080199c0
 8001c30:	08001f05 	.word	0x08001f05
 8001c34:	080199cc 	.word	0x080199cc
 8001c38:	08001f85 	.word	0x08001f85

08001c3c <mission_1>:

void mission_1(void *pvParameters){
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
    mission_status = 0;
 8001c44:	4b14      	ldr	r3, [pc, #80]	@ (8001c98 <mission_1+0x5c>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
    
    /* add motion here */
    cascade_height = 300;
 8001c4a:	4b14      	ldr	r3, [pc, #80]	@ (8001c9c <mission_1+0x60>)
 8001c4c:	4a14      	ldr	r2, [pc, #80]	@ (8001ca0 <mission_1+0x64>)
 8001c4e:	601a      	str	r2, [r3, #0]
    servo1_pos = standard_pos_1 + 70;
 8001c50:	4b14      	ldr	r3, [pc, #80]	@ (8001ca4 <mission_1+0x68>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	3346      	adds	r3, #70	@ 0x46
 8001c56:	4a14      	ldr	r2, [pc, #80]	@ (8001ca8 <mission_1+0x6c>)
 8001c58:	6013      	str	r3, [r2, #0]
    servo2_pos = standard_pos_2 + 75;
 8001c5a:	4b14      	ldr	r3, [pc, #80]	@ (8001cac <mission_1+0x70>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	334b      	adds	r3, #75	@ 0x4b
 8001c60:	4a13      	ldr	r2, [pc, #76]	@ (8001cb0 <mission_1+0x74>)
 8001c62:	6013      	str	r3, [r2, #0]
    servo3_pos = gripper_open;
 8001c64:	4b13      	ldr	r3, [pc, #76]	@ (8001cb4 <mission_1+0x78>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a13      	ldr	r2, [pc, #76]	@ (8001cb8 <mission_1+0x7c>)
 8001c6a:	6013      	str	r3, [r2, #0]
	camera_servo_pos = camera_front;
 8001c6c:	4b13      	ldr	r3, [pc, #76]	@ (8001cbc <mission_1+0x80>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a13      	ldr	r2, [pc, #76]	@ (8001cc0 <mission_1+0x84>)
 8001c72:	6013      	str	r3, [r2, #0]
	osDelay(1500);
 8001c74:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001c78:	f006 fc88 	bl	800858c <osDelay>
//	osDelay(5000);
    /* add motion here */

    mission_status = mission_type;
 8001c7c:	4b11      	ldr	r3, [pc, #68]	@ (8001cc4 <mission_1+0x88>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a05      	ldr	r2, [pc, #20]	@ (8001c98 <mission_1+0x5c>)
 8001c82:	6013      	str	r3, [r2, #0]
    task_created = 0;
 8001c84:	4b10      	ldr	r3, [pc, #64]	@ (8001cc8 <mission_1+0x8c>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
    vTaskDelete(NULL);  // Delete current task when mission is complete
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	f007 fc3a 	bl	8009504 <vTaskDelete>
}
 8001c90:	bf00      	nop
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	2000024c 	.word	0x2000024c
 8001c9c:	20000028 	.word	0x20000028
 8001ca0:	43960000 	.word	0x43960000
 8001ca4:	20000000 	.word	0x20000000
 8001ca8:	20000198 	.word	0x20000198
 8001cac:	20000004 	.word	0x20000004
 8001cb0:	2000019c 	.word	0x2000019c
 8001cb4:	20000008 	.word	0x20000008
 8001cb8:	200001a0 	.word	0x200001a0
 8001cbc:	20000020 	.word	0x20000020
 8001cc0:	200001b8 	.word	0x200001b8
 8001cc4:	20000244 	.word	0x20000244
 8001cc8:	20000250 	.word	0x20000250

08001ccc <mission_2>:

void mission_2(void *pvParameters){
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
    mission_status = 0;
 8001cd4:	4b23      	ldr	r3, [pc, #140]	@ (8001d64 <mission_2+0x98>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]

    /* add motion here */
    cascade_height = 447;
 8001cda:	4b23      	ldr	r3, [pc, #140]	@ (8001d68 <mission_2+0x9c>)
 8001cdc:	4a23      	ldr	r2, [pc, #140]	@ (8001d6c <mission_2+0xa0>)
 8001cde:	601a      	str	r2, [r3, #0]
    osDelay(2000);
 8001ce0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001ce4:	f006 fc52 	bl	800858c <osDelay>
	servo1_pos = standard_pos_1 - 20;
 8001ce8:	4b21      	ldr	r3, [pc, #132]	@ (8001d70 <mission_2+0xa4>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	3b14      	subs	r3, #20
 8001cee:	4a21      	ldr	r2, [pc, #132]	@ (8001d74 <mission_2+0xa8>)
 8001cf0:	6013      	str	r3, [r2, #0]
	servo2_pos = standard_pos_2 - 5;
 8001cf2:	4b21      	ldr	r3, [pc, #132]	@ (8001d78 <mission_2+0xac>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	3b05      	subs	r3, #5
 8001cf8:	4a20      	ldr	r2, [pc, #128]	@ (8001d7c <mission_2+0xb0>)
 8001cfa:	6013      	str	r3, [r2, #0]
	servo3_pos = gripper_open;
 8001cfc:	4b20      	ldr	r3, [pc, #128]	@ (8001d80 <mission_2+0xb4>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a20      	ldr	r2, [pc, #128]	@ (8001d84 <mission_2+0xb8>)
 8001d02:	6013      	str	r3, [r2, #0]
	camera_servo_pos = camera_front;
 8001d04:	4b20      	ldr	r3, [pc, #128]	@ (8001d88 <mission_2+0xbc>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a20      	ldr	r2, [pc, #128]	@ (8001d8c <mission_2+0xc0>)
 8001d0a:	6013      	str	r3, [r2, #0]
    osDelay(1500);
 8001d0c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001d10:	f006 fc3c 	bl	800858c <osDelay>
	servo3_pos = gripper_close;
 8001d14:	4b1e      	ldr	r3, [pc, #120]	@ (8001d90 <mission_2+0xc4>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a1a      	ldr	r2, [pc, #104]	@ (8001d84 <mission_2+0xb8>)
 8001d1a:	6013      	str	r3, [r2, #0]
    osDelay(1200);
 8001d1c:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8001d20:	f006 fc34 	bl	800858c <osDelay>
    cascade_height = 497;
 8001d24:	4b10      	ldr	r3, [pc, #64]	@ (8001d68 <mission_2+0x9c>)
 8001d26:	4a1b      	ldr	r2, [pc, #108]	@ (8001d94 <mission_2+0xc8>)
 8001d28:	601a      	str	r2, [r3, #0]
    servo1_pos = standard_pos_1 + 77;
 8001d2a:	4b11      	ldr	r3, [pc, #68]	@ (8001d70 <mission_2+0xa4>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	334d      	adds	r3, #77	@ 0x4d
 8001d30:	4a10      	ldr	r2, [pc, #64]	@ (8001d74 <mission_2+0xa8>)
 8001d32:	6013      	str	r3, [r2, #0]
    servo2_pos = standard_pos_2 + 77;
 8001d34:	4b10      	ldr	r3, [pc, #64]	@ (8001d78 <mission_2+0xac>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	334d      	adds	r3, #77	@ 0x4d
 8001d3a:	4a10      	ldr	r2, [pc, #64]	@ (8001d7c <mission_2+0xb0>)
 8001d3c:	6013      	str	r3, [r2, #0]
	osDelay(1200);
 8001d3e:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8001d42:	f006 fc23 	bl	800858c <osDelay>
    /* add motion here */

    mission_status = mission_type;//第一關終點
 8001d46:	4b14      	ldr	r3, [pc, #80]	@ (8001d98 <mission_2+0xcc>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a06      	ldr	r2, [pc, #24]	@ (8001d64 <mission_2+0x98>)
 8001d4c:	6013      	str	r3, [r2, #0]
    // goals_.push_back(create_goal(0, 0.0, 616.0, 4.71, 21, 0, 0, 20.0, 0.5));
    // goals_.push_back(create_goal(0, 0.0, 616.0, 4.71, 10, 0, 0, 20.0, 0.5));
    task_created = 0;
 8001d4e:	4b13      	ldr	r3, [pc, #76]	@ (8001d9c <mission_2+0xd0>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
    vTaskDelete(NULL);  // Delete current task when mission is complete
 8001d54:	2000      	movs	r0, #0
 8001d56:	f007 fbd5 	bl	8009504 <vTaskDelete>
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	2000024c 	.word	0x2000024c
 8001d68:	20000028 	.word	0x20000028
 8001d6c:	43df8000 	.word	0x43df8000
 8001d70:	20000000 	.word	0x20000000
 8001d74:	20000198 	.word	0x20000198
 8001d78:	20000004 	.word	0x20000004
 8001d7c:	2000019c 	.word	0x2000019c
 8001d80:	20000008 	.word	0x20000008
 8001d84:	200001a0 	.word	0x200001a0
 8001d88:	20000020 	.word	0x20000020
 8001d8c:	200001b8 	.word	0x200001b8
 8001d90:	2000000c 	.word	0x2000000c
 8001d94:	43f88000 	.word	0x43f88000
 8001d98:	20000244 	.word	0x20000244
 8001d9c:	20000250 	.word	0x20000250

08001da0 <mission_3>:
void mission_3(void *pvParameters){ //夾咖啡杯47
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
    mission_status = 0;
 8001da8:	4b14      	ldr	r3, [pc, #80]	@ (8001dfc <mission_3+0x5c>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]

    /* add motion here */
    cascade_height = 370;
 8001dae:	4b14      	ldr	r3, [pc, #80]	@ (8001e00 <mission_3+0x60>)
 8001db0:	4a14      	ldr	r2, [pc, #80]	@ (8001e04 <mission_3+0x64>)
 8001db2:	601a      	str	r2, [r3, #0]
	servo1_pos = standard_pos_1 - 23;
 8001db4:	4b14      	ldr	r3, [pc, #80]	@ (8001e08 <mission_3+0x68>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	3b17      	subs	r3, #23
 8001dba:	4a14      	ldr	r2, [pc, #80]	@ (8001e0c <mission_3+0x6c>)
 8001dbc:	6013      	str	r3, [r2, #0]
	servo2_pos = standard_pos_2 - 20;
 8001dbe:	4b14      	ldr	r3, [pc, #80]	@ (8001e10 <mission_3+0x70>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	3b14      	subs	r3, #20
 8001dc4:	4a13      	ldr	r2, [pc, #76]	@ (8001e14 <mission_3+0x74>)
 8001dc6:	6013      	str	r3, [r2, #0]
	servo3_pos = gripper_close;
 8001dc8:	4b13      	ldr	r3, [pc, #76]	@ (8001e18 <mission_3+0x78>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a13      	ldr	r2, [pc, #76]	@ (8001e1c <mission_3+0x7c>)
 8001dce:	6013      	str	r3, [r2, #0]
	camera_servo_pos = camera_down;
 8001dd0:	4b13      	ldr	r3, [pc, #76]	@ (8001e20 <mission_3+0x80>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a13      	ldr	r2, [pc, #76]	@ (8001e24 <mission_3+0x84>)
 8001dd6:	6013      	str	r3, [r2, #0]
	osDelay(1500);
 8001dd8:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001ddc:	f006 fbd6 	bl	800858c <osDelay>
    /* add motion here */

    mission_status = mission_type;
 8001de0:	4b11      	ldr	r3, [pc, #68]	@ (8001e28 <mission_3+0x88>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a05      	ldr	r2, [pc, #20]	@ (8001dfc <mission_3+0x5c>)
 8001de6:	6013      	str	r3, [r2, #0]
    task_created = 0;
 8001de8:	4b10      	ldr	r3, [pc, #64]	@ (8001e2c <mission_3+0x8c>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
    vTaskDelete(NULL);  // Delete current task when mission is complete
 8001dee:	2000      	movs	r0, #0
 8001df0:	f007 fb88 	bl	8009504 <vTaskDelete>
}
 8001df4:	bf00      	nop
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	2000024c 	.word	0x2000024c
 8001e00:	20000028 	.word	0x20000028
 8001e04:	43b90000 	.word	0x43b90000
 8001e08:	20000000 	.word	0x20000000
 8001e0c:	20000198 	.word	0x20000198
 8001e10:	20000004 	.word	0x20000004
 8001e14:	2000019c 	.word	0x2000019c
 8001e18:	2000000c 	.word	0x2000000c
 8001e1c:	200001a0 	.word	0x200001a0
 8001e20:	20000024 	.word	0x20000024
 8001e24:	200001b8 	.word	0x200001b8
 8001e28:	20000244 	.word	0x20000244
 8001e2c:	20000250 	.word	0x20000250

08001e30 <mission_4>:

void mission_4(void *pvParameters){
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
    mission_status = 0;
 8001e38:	4b22      	ldr	r3, [pc, #136]	@ (8001ec4 <mission_4+0x94>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]

    /* add motion here */
    cascade_height = 323;
 8001e3e:	4b22      	ldr	r3, [pc, #136]	@ (8001ec8 <mission_4+0x98>)
 8001e40:	4a22      	ldr	r2, [pc, #136]	@ (8001ecc <mission_4+0x9c>)
 8001e42:	601a      	str	r2, [r3, #0]
	servo1_pos = standard_pos_1 - 50;
 8001e44:	4b22      	ldr	r3, [pc, #136]	@ (8001ed0 <mission_4+0xa0>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	3b32      	subs	r3, #50	@ 0x32
 8001e4a:	4a22      	ldr	r2, [pc, #136]	@ (8001ed4 <mission_4+0xa4>)
 8001e4c:	6013      	str	r3, [r2, #0]
	servo2_pos = standard_pos_2 - 42;
 8001e4e:	4b22      	ldr	r3, [pc, #136]	@ (8001ed8 <mission_4+0xa8>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	3b2a      	subs	r3, #42	@ 0x2a
 8001e54:	4a21      	ldr	r2, [pc, #132]	@ (8001edc <mission_4+0xac>)
 8001e56:	6013      	str	r3, [r2, #0]
	servo3_pos = gripper_close;
 8001e58:	4b21      	ldr	r3, [pc, #132]	@ (8001ee0 <mission_4+0xb0>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a21      	ldr	r2, [pc, #132]	@ (8001ee4 <mission_4+0xb4>)
 8001e5e:	6013      	str	r3, [r2, #0]
	camera_servo_pos = camera_front;
 8001e60:	4b21      	ldr	r3, [pc, #132]	@ (8001ee8 <mission_4+0xb8>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a21      	ldr	r2, [pc, #132]	@ (8001eec <mission_4+0xbc>)
 8001e66:	6013      	str	r3, [r2, #0]
	osDelay(1200);
 8001e68:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8001e6c:	f006 fb8e 	bl	800858c <osDelay>
	servo3_pos = gripper_open;
 8001e70:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef0 <mission_4+0xc0>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a1b      	ldr	r2, [pc, #108]	@ (8001ee4 <mission_4+0xb4>)
 8001e76:	6013      	str	r3, [r2, #0]
	cascade_height = 473;
 8001e78:	4b13      	ldr	r3, [pc, #76]	@ (8001ec8 <mission_4+0x98>)
 8001e7a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ef4 <mission_4+0xc4>)
 8001e7c:	601a      	str	r2, [r3, #0]
	osDelay(1200);
 8001e7e:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8001e82:	f006 fb83 	bl	800858c <osDelay>
	cascade_height = 250;
 8001e86:	4b10      	ldr	r3, [pc, #64]	@ (8001ec8 <mission_4+0x98>)
 8001e88:	4a1b      	ldr	r2, [pc, #108]	@ (8001ef8 <mission_4+0xc8>)
 8001e8a:	601a      	str	r2, [r3, #0]
	servo1_pos = standard_pos_1 + 77;
 8001e8c:	4b10      	ldr	r3, [pc, #64]	@ (8001ed0 <mission_4+0xa0>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	334d      	adds	r3, #77	@ 0x4d
 8001e92:	4a10      	ldr	r2, [pc, #64]	@ (8001ed4 <mission_4+0xa4>)
 8001e94:	6013      	str	r3, [r2, #0]
	servo2_pos = standard_pos_2 + 77;
 8001e96:	4b10      	ldr	r3, [pc, #64]	@ (8001ed8 <mission_4+0xa8>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	334d      	adds	r3, #77	@ 0x4d
 8001e9c:	4a0f      	ldr	r2, [pc, #60]	@ (8001edc <mission_4+0xac>)
 8001e9e:	6013      	str	r3, [r2, #0]
	servo3_pos = gripper_close;
 8001ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee0 <mission_4+0xb0>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a0f      	ldr	r2, [pc, #60]	@ (8001ee4 <mission_4+0xb4>)
 8001ea6:	6013      	str	r3, [r2, #0]
    /* add motion here */

    mission_status = mission_type;
 8001ea8:	4b14      	ldr	r3, [pc, #80]	@ (8001efc <mission_4+0xcc>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a05      	ldr	r2, [pc, #20]	@ (8001ec4 <mission_4+0x94>)
 8001eae:	6013      	str	r3, [r2, #0]
    task_created = 0;
 8001eb0:	4b13      	ldr	r3, [pc, #76]	@ (8001f00 <mission_4+0xd0>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]
    vTaskDelete(NULL);  // Delete current task when mission is complete
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f007 fb24 	bl	8009504 <vTaskDelete>
}
 8001ebc:	bf00      	nop
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	2000024c 	.word	0x2000024c
 8001ec8:	20000028 	.word	0x20000028
 8001ecc:	43a18000 	.word	0x43a18000
 8001ed0:	20000000 	.word	0x20000000
 8001ed4:	20000198 	.word	0x20000198
 8001ed8:	20000004 	.word	0x20000004
 8001edc:	2000019c 	.word	0x2000019c
 8001ee0:	2000000c 	.word	0x2000000c
 8001ee4:	200001a0 	.word	0x200001a0
 8001ee8:	20000020 	.word	0x20000020
 8001eec:	200001b8 	.word	0x200001b8
 8001ef0:	20000008 	.word	0x20000008
 8001ef4:	43ec8000 	.word	0x43ec8000
 8001ef8:	437a0000 	.word	0x437a0000
 8001efc:	20000244 	.word	0x20000244
 8001f00:	20000250 	.word	0x20000250

08001f04 <mission_5>:

void mission_5(void *pvParameters){ //竹簍關
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
    mission_status = 0;
 8001f0c:	4b15      	ldr	r3, [pc, #84]	@ (8001f64 <mission_5+0x60>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]

    /* add motion here */
    basket_right_pos = 500+200/180*(basket_pos1-basket_grab);
 8001f12:	4b15      	ldr	r3, [pc, #84]	@ (8001f68 <mission_5+0x64>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	4b15      	ldr	r3, [pc, #84]	@ (8001f6c <mission_5+0x68>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001f20:	4a13      	ldr	r2, [pc, #76]	@ (8001f70 <mission_5+0x6c>)
 8001f22:	6013      	str	r3, [r2, #0]
    basket_left_pos = 500+1200/180*(basket_pos2+basket_grab);
 8001f24:	4b13      	ldr	r3, [pc, #76]	@ (8001f74 <mission_5+0x70>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	4b10      	ldr	r3, [pc, #64]	@ (8001f6c <mission_5+0x68>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	441a      	add	r2, r3
 8001f2e:	4613      	mov	r3, r2
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	4413      	add	r3, r2
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001f3a:	4a0f      	ldr	r2, [pc, #60]	@ (8001f78 <mission_5+0x74>)
 8001f3c:	6013      	str	r3, [r2, #0]
	osDelay(1200);
 8001f3e:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8001f42:	f006 fb23 	bl	800858c <osDelay>
    /* add motion here */

    mission_status = mission_type;
 8001f46:	4b0d      	ldr	r3, [pc, #52]	@ (8001f7c <mission_5+0x78>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a06      	ldr	r2, [pc, #24]	@ (8001f64 <mission_5+0x60>)
 8001f4c:	6013      	str	r3, [r2, #0]
    task_created = 0;
 8001f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f80 <mission_5+0x7c>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
    vTaskDelete(NULL);  // Delete current task when mission is complete
 8001f54:	2000      	movs	r0, #0
 8001f56:	f007 fad5 	bl	8009504 <vTaskDelete>
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	2000024c 	.word	0x2000024c
 8001f68:	20000010 	.word	0x20000010
 8001f6c:	20000014 	.word	0x20000014
 8001f70:	200001a8 	.word	0x200001a8
 8001f74:	200001a4 	.word	0x200001a4
 8001f78:	200001ac 	.word	0x200001ac
 8001f7c:	20000244 	.word	0x20000244
 8001f80:	20000250 	.word	0x20000250

08001f84 <mission_6>:

void mission_6(void *pvParameters){ //竹簍開
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
    mission_status = 0;
 8001f8c:	4b12      	ldr	r3, [pc, #72]	@ (8001fd8 <mission_6+0x54>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]

    /* add motion here */
    basket_right_pos = 500+200/180*basket_pos1;
 8001f92:	4b12      	ldr	r3, [pc, #72]	@ (8001fdc <mission_6+0x58>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001f9a:	4a11      	ldr	r2, [pc, #68]	@ (8001fe0 <mission_6+0x5c>)
 8001f9c:	6013      	str	r3, [r2, #0]
    basket_left_pos = 500+1200/180*basket_pos2;
 8001f9e:	4b11      	ldr	r3, [pc, #68]	@ (8001fe4 <mission_6+0x60>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	4413      	add	r3, r2
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001fae:	4a0e      	ldr	r2, [pc, #56]	@ (8001fe8 <mission_6+0x64>)
 8001fb0:	6013      	str	r3, [r2, #0]
	osDelay(1200);
 8001fb2:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8001fb6:	f006 fae9 	bl	800858c <osDelay>
    /* add motion here */

    mission_status = mission_type;
 8001fba:	4b0c      	ldr	r3, [pc, #48]	@ (8001fec <mission_6+0x68>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a06      	ldr	r2, [pc, #24]	@ (8001fd8 <mission_6+0x54>)
 8001fc0:	6013      	str	r3, [r2, #0]
    task_created = 0;
 8001fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff0 <mission_6+0x6c>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
    vTaskDelete(NULL);  // Delete current task when mission is complete
 8001fc8:	2000      	movs	r0, #0
 8001fca:	f007 fa9b 	bl	8009504 <vTaskDelete>
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	2000024c 	.word	0x2000024c
 8001fdc:	20000010 	.word	0x20000010
 8001fe0:	200001a8 	.word	0x200001a8
 8001fe4:	200001a4 	.word	0x200001a4
 8001fe8:	200001ac 	.word	0x200001ac
 8001fec:	20000244 	.word	0x20000244
 8001ff0:	20000250 	.word	0x20000250

08001ff4 <uros_init>:
#define MAX_PING_FAIL_COUNT 5


extern UART_HandleTypeDef USARTx;

void uros_init(void) {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b088      	sub	sp, #32
 8001ff8:	af02      	add	r7, sp, #8
  // Initialize micro-ROS
  rmw_uros_set_custom_transport(
 8001ffa:	4b14      	ldr	r3, [pc, #80]	@ (800204c <uros_init+0x58>)
 8001ffc:	9301      	str	r3, [sp, #4]
 8001ffe:	4b14      	ldr	r3, [pc, #80]	@ (8002050 <uros_init+0x5c>)
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	4b14      	ldr	r3, [pc, #80]	@ (8002054 <uros_init+0x60>)
 8002004:	4a14      	ldr	r2, [pc, #80]	@ (8002058 <uros_init+0x64>)
 8002006:	4915      	ldr	r1, [pc, #84]	@ (800205c <uros_init+0x68>)
 8002008:	2001      	movs	r0, #1
 800200a:	f00b fc7b 	bl	800d904 <rmw_uros_set_custom_transport>
    cubemx_transport_open,
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);
  
  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 800200e:	1d3b      	adds	r3, r7, #4
 8002010:	4618      	mov	r0, r3
 8002012:	f00b f88f 	bl	800d134 <rcutils_get_zero_initialized_allocator>

  freeRTOS_allocator.allocate = microros_allocate;
 8002016:	4b12      	ldr	r3, [pc, #72]	@ (8002060 <uros_init+0x6c>)
 8002018:	607b      	str	r3, [r7, #4]
  freeRTOS_allocator.deallocate = microros_deallocate;
 800201a:	4b12      	ldr	r3, [pc, #72]	@ (8002064 <uros_init+0x70>)
 800201c:	60bb      	str	r3, [r7, #8]
  freeRTOS_allocator.reallocate = microros_reallocate;
 800201e:	4b12      	ldr	r3, [pc, #72]	@ (8002068 <uros_init+0x74>)
 8002020:	60fb      	str	r3, [r7, #12]
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8002022:	4b12      	ldr	r3, [pc, #72]	@ (800206c <uros_init+0x78>)
 8002024:	613b      	str	r3, [r7, #16]

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8002026:	1d3b      	adds	r3, r7, #4
 8002028:	4618      	mov	r0, r3
 800202a:	f00b f891 	bl	800d150 <rcutils_set_default_allocator>
 800202e:	4603      	mov	r3, r0
 8002030:	f083 0301 	eor.w	r3, r3, #1
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <uros_init+0x4e>
  printf("Error on default allocators (line %d)\n", __LINE__); 
 800203a:	2138      	movs	r1, #56	@ 0x38
 800203c:	480c      	ldr	r0, [pc, #48]	@ (8002070 <uros_init+0x7c>)
 800203e:	f016 fba3 	bl	8018788 <iprintf>
  }
}
 8002042:	bf00      	nop
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	08002919 	.word	0x08002919
 8002050:	080028b1 	.word	0x080028b1
 8002054:	08002891 	.word	0x08002891
 8002058:	08002865 	.word	0x08002865
 800205c:	2000492c 	.word	0x2000492c
 8002060:	08003121 	.word	0x08003121
 8002064:	08003165 	.word	0x08003165
 8002068:	0800319d 	.word	0x0800319d
 800206c:	08003209 	.word	0x08003209
 8002070:	080199d8 	.word	0x080199d8

08002074 <uros_agent_status_check>:

void uros_agent_status_check(void) {
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  switch (status) {
 8002078:	4b11      	ldr	r3, [pc, #68]	@ (80020c0 <uros_agent_status_check+0x4c>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	2b04      	cmp	r3, #4
 800207e:	d81c      	bhi.n	80020ba <uros_agent_status_check+0x46>
 8002080:	a201      	add	r2, pc, #4	@ (adr r2, 8002088 <uros_agent_status_check+0x14>)
 8002082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002086:	bf00      	nop
 8002088:	0800209d 	.word	0x0800209d
 800208c:	080020a3 	.word	0x080020a3
 8002090:	080020a9 	.word	0x080020a9
 8002094:	080020af 	.word	0x080020af
 8002098:	080020b5 	.word	0x080020b5
    case AGENT_WAITING:
      handle_state_agent_waiting();
 800209c:	f000 f812 	bl	80020c4 <handle_state_agent_waiting>
      break;
 80020a0:	e00c      	b.n	80020bc <uros_agent_status_check+0x48>
    case AGENT_AVAILABLE:
      handle_state_agent_available();
 80020a2:	f000 f821 	bl	80020e8 <handle_state_agent_available>
      break;
 80020a6:	e009      	b.n	80020bc <uros_agent_status_check+0x48>
    case AGENT_CONNECTED:
      handle_state_agent_connected();
 80020a8:	f000 f82a 	bl	8002100 <handle_state_agent_connected>
      break;
 80020ac:	e006      	b.n	80020bc <uros_agent_status_check+0x48>
    case AGENT_TRYING:
      handle_state_agent_trying();
 80020ae:	f000 f859 	bl	8002164 <handle_state_agent_trying>
      break;
 80020b2:	e003      	b.n	80020bc <uros_agent_status_check+0x48>
    case AGENT_DISCONNECTED:
      handle_state_agent_disconnected();
 80020b4:	f000 f880 	bl	80021b8 <handle_state_agent_disconnected>
      break;
 80020b8:	e000      	b.n	80020bc <uros_agent_status_check+0x48>
    default:
      break;
 80020ba:	bf00      	nop
  }
}
 80020bc:	bf00      	nop
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	20000348 	.word	0x20000348

080020c4 <handle_state_agent_waiting>:

void handle_state_agent_waiting(void) {
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  status = (rmw_uros_ping_agent(100, 10) == RMW_RET_OK) ? AGENT_AVAILABLE : AGENT_WAITING;
 80020c8:	210a      	movs	r1, #10
 80020ca:	2064      	movs	r0, #100	@ 0x64
 80020cc:	f00b fc30 	bl	800d930 <rmw_uros_ping_agent>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <handle_state_agent_waiting+0x16>
 80020d6:	2201      	movs	r2, #1
 80020d8:	e000      	b.n	80020dc <handle_state_agent_waiting+0x18>
 80020da:	2200      	movs	r2, #0
 80020dc:	4b01      	ldr	r3, [pc, #4]	@ (80020e4 <handle_state_agent_waiting+0x20>)
 80020de:	701a      	strb	r2, [r3, #0]
}
 80020e0:	bf00      	nop
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	20000348 	.word	0x20000348

080020e8 <handle_state_agent_available>:
void handle_state_agent_available(void) {
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  uros_create_entities();
 80020ec:	f000 f870 	bl	80021d0 <uros_create_entities>
  status = AGENT_CONNECTED;
 80020f0:	4b02      	ldr	r3, [pc, #8]	@ (80020fc <handle_state_agent_available+0x14>)
 80020f2:	2202      	movs	r2, #2
 80020f4:	701a      	strb	r2, [r3, #0]
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000348 	.word	0x20000348

08002100 <handle_state_agent_connected>:
void handle_state_agent_connected(void) {
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  if(rmw_uros_ping_agent(20, 5) == RMW_RET_OK){
 8002104:	2105      	movs	r1, #5
 8002106:	2014      	movs	r0, #20
 8002108:	f00b fc12 	bl	800d930 <rmw_uros_ping_agent>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	bf0c      	ite	eq
 8002112:	2301      	moveq	r3, #1
 8002114:	2300      	movne	r3, #0
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b00      	cmp	r3, #0
 800211a:	d009      	beq.n	8002130 <handle_state_agent_connected+0x30>
    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(50));
 800211c:	a30f      	add	r3, pc, #60	@ (adr r3, 800215c <handle_state_agent_connected+0x5c>)
 800211e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002122:	480b      	ldr	r0, [pc, #44]	@ (8002150 <handle_state_agent_connected+0x50>)
 8002124:	f00a fe92 	bl	800ce4c <rclc_executor_spin_some>
    ping_fail_count = 0; // Reset ping fail count
 8002128:	4b0a      	ldr	r3, [pc, #40]	@ (8002154 <handle_state_agent_connected+0x54>)
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
    ping_fail_count++;
    if(ping_fail_count >= MAX_PING_FAIL_COUNT){
      status = AGENT_TRYING;
    }
  }
}
 800212e:	e00b      	b.n	8002148 <handle_state_agent_connected+0x48>
    ping_fail_count++;
 8002130:	4b08      	ldr	r3, [pc, #32]	@ (8002154 <handle_state_agent_connected+0x54>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	3301      	adds	r3, #1
 8002136:	4a07      	ldr	r2, [pc, #28]	@ (8002154 <handle_state_agent_connected+0x54>)
 8002138:	6013      	str	r3, [r2, #0]
    if(ping_fail_count >= MAX_PING_FAIL_COUNT){
 800213a:	4b06      	ldr	r3, [pc, #24]	@ (8002154 <handle_state_agent_connected+0x54>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2b04      	cmp	r3, #4
 8002140:	dd02      	ble.n	8002148 <handle_state_agent_connected+0x48>
      status = AGENT_TRYING;
 8002142:	4b05      	ldr	r3, [pc, #20]	@ (8002158 <handle_state_agent_connected+0x58>)
 8002144:	2203      	movs	r2, #3
 8002146:	701a      	strb	r2, [r3, #0]
}
 8002148:	bf00      	nop
 800214a:	bd80      	pop	{r7, pc}
 800214c:	f3af 8000 	nop.w
 8002150:	200002c0 	.word	0x200002c0
 8002154:	2000034c 	.word	0x2000034c
 8002158:	20000348 	.word	0x20000348
 800215c:	02faf080 	.word	0x02faf080
 8002160:	00000000 	.word	0x00000000

08002164 <handle_state_agent_trying>:
void handle_state_agent_trying(void) {
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  if(rmw_uros_ping_agent(50, 10) == RMW_RET_OK){
 8002168:	210a      	movs	r1, #10
 800216a:	2032      	movs	r0, #50	@ 0x32
 800216c:	f00b fbe0 	bl	800d930 <rmw_uros_ping_agent>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	bf0c      	ite	eq
 8002176:	2301      	moveq	r3, #1
 8002178:	2300      	movne	r3, #0
 800217a:	b2db      	uxtb	r3, r3
 800217c:	2b00      	cmp	r3, #0
 800217e:	d006      	beq.n	800218e <handle_state_agent_trying+0x2a>
    status = AGENT_CONNECTED;
 8002180:	4b0b      	ldr	r3, [pc, #44]	@ (80021b0 <handle_state_agent_trying+0x4c>)
 8002182:	2202      	movs	r2, #2
 8002184:	701a      	strb	r2, [r3, #0]
    ping_fail_count = 0; // Reset ping fail count
 8002186:	4b0b      	ldr	r3, [pc, #44]	@ (80021b4 <handle_state_agent_trying+0x50>)
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
    if(ping_fail_count >= MAX_PING_FAIL_COUNT){
      status = AGENT_DISCONNECTED;
      ping_fail_count = 0;
    }
  }
}
 800218c:	e00e      	b.n	80021ac <handle_state_agent_trying+0x48>
    ping_fail_count++;
 800218e:	4b09      	ldr	r3, [pc, #36]	@ (80021b4 <handle_state_agent_trying+0x50>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	3301      	adds	r3, #1
 8002194:	4a07      	ldr	r2, [pc, #28]	@ (80021b4 <handle_state_agent_trying+0x50>)
 8002196:	6013      	str	r3, [r2, #0]
    if(ping_fail_count >= MAX_PING_FAIL_COUNT){
 8002198:	4b06      	ldr	r3, [pc, #24]	@ (80021b4 <handle_state_agent_trying+0x50>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2b04      	cmp	r3, #4
 800219e:	dd05      	ble.n	80021ac <handle_state_agent_trying+0x48>
      status = AGENT_DISCONNECTED;
 80021a0:	4b03      	ldr	r3, [pc, #12]	@ (80021b0 <handle_state_agent_trying+0x4c>)
 80021a2:	2204      	movs	r2, #4
 80021a4:	701a      	strb	r2, [r3, #0]
      ping_fail_count = 0;
 80021a6:	4b03      	ldr	r3, [pc, #12]	@ (80021b4 <handle_state_agent_trying+0x50>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
}
 80021ac:	bf00      	nop
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	20000348 	.word	0x20000348
 80021b4:	2000034c 	.word	0x2000034c

080021b8 <handle_state_agent_disconnected>:
void handle_state_agent_disconnected(void) {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  uros_destroy_entities();
 80021bc:	f000 f8a0 	bl	8002300 <uros_destroy_entities>
  status = AGENT_WAITING;
 80021c0:	4b02      	ldr	r3, [pc, #8]	@ (80021cc <handle_state_agent_disconnected+0x14>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	701a      	strb	r2, [r3, #0]
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000348 	.word	0x20000348

080021d0 <uros_create_entities>:


void uros_create_entities(void) {
 80021d0:	b5b0      	push	{r4, r5, r7, lr}
 80021d2:	b088      	sub	sp, #32
 80021d4:	af02      	add	r7, sp, #8
  allocator = rcl_get_default_allocator();
 80021d6:	4c3a      	ldr	r4, [pc, #232]	@ (80022c0 <uros_create_entities+0xf0>)
 80021d8:	463b      	mov	r3, r7
 80021da:	4618      	mov	r0, r3
 80021dc:	f00a ffd6 	bl	800d18c <rcutils_get_default_allocator>
 80021e0:	4625      	mov	r5, r4
 80021e2:	463c      	mov	r4, r7
 80021e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021e8:	6823      	ldr	r3, [r4, #0]
 80021ea:	602b      	str	r3, [r5, #0]

  init_options = rcl_get_zero_initialized_init_options();
 80021ec:	f008 ffc6 	bl	800b17c <rcl_get_zero_initialized_init_options>
 80021f0:	4603      	mov	r3, r0
 80021f2:	4a34      	ldr	r2, [pc, #208]	@ (80022c4 <uros_create_entities+0xf4>)
 80021f4:	6013      	str	r3, [r2, #0]
  rcl_init_options_init(&init_options, allocator);
 80021f6:	4b32      	ldr	r3, [pc, #200]	@ (80022c0 <uros_create_entities+0xf0>)
 80021f8:	466c      	mov	r4, sp
 80021fa:	f103 020c 	add.w	r2, r3, #12
 80021fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002202:	e884 0003 	stmia.w	r4, {r0, r1}
 8002206:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002208:	482e      	ldr	r0, [pc, #184]	@ (80022c4 <uros_create_entities+0xf4>)
 800220a:	f008 ffb9 	bl	800b180 <rcl_init_options_init>
  rcl_init_options_set_domain_id(&init_options, DOMAIN_ID);
 800220e:	2100      	movs	r1, #0
 8002210:	482c      	ldr	r0, [pc, #176]	@ (80022c4 <uros_create_entities+0xf4>)
 8002212:	f009 f8b1 	bl	800b378 <rcl_init_options_set_domain_id>

  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator); // Initialize support structure
 8002216:	4b2a      	ldr	r3, [pc, #168]	@ (80022c0 <uros_create_entities+0xf0>)
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	4b2a      	ldr	r3, [pc, #168]	@ (80022c4 <uros_create_entities+0xf4>)
 800221c:	2200      	movs	r2, #0
 800221e:	2100      	movs	r1, #0
 8002220:	4829      	ldr	r0, [pc, #164]	@ (80022c8 <uros_create_entities+0xf8>)
 8002222:	f00a fe4d 	bl	800cec0 <rclc_support_init_with_options>

  rcl_init_options_fini(&init_options);
 8002226:	4827      	ldr	r0, [pc, #156]	@ (80022c4 <uros_create_entities+0xf4>)
 8002228:	f009 f810 	bl	800b24c <rcl_init_options_fini>
  
  rclc_node_init_default(&node, NODE_NAME, "", &support);                       // Initialize node
 800222c:	4b26      	ldr	r3, [pc, #152]	@ (80022c8 <uros_create_entities+0xf8>)
 800222e:	4a27      	ldr	r2, [pc, #156]	@ (80022cc <uros_create_entities+0xfc>)
 8002230:	4927      	ldr	r1, [pc, #156]	@ (80022d0 <uros_create_entities+0x100>)
 8002232:	4828      	ldr	r0, [pc, #160]	@ (80022d4 <uros_create_entities+0x104>)
 8002234:	f00a fea2 	bl	800cf7c <rclc_node_init_default>

  rclc_publisher_init_default(                                                  // Initialize publisher for pose
 8002238:	f00c fef6 	bl	800f028 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 800223c:	4602      	mov	r2, r0
 800223e:	4b26      	ldr	r3, [pc, #152]	@ (80022d8 <uros_create_entities+0x108>)
 8002240:	4924      	ldr	r1, [pc, #144]	@ (80022d4 <uros_create_entities+0x104>)
 8002242:	4826      	ldr	r0, [pc, #152]	@ (80022dc <uros_create_entities+0x10c>)
 8002244:	f00a fed6 	bl	800cff4 <rclc_publisher_init_default>
    &arm_pub,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
    "robot/arm_status");
  arm_msg.data = -1;
 8002248:	4b25      	ldr	r3, [pc, #148]	@ (80022e0 <uros_create_entities+0x110>)
 800224a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800224e:	601a      	str	r2, [r3, #0]

  rmw_uros_set_publisher_session_timeout(                                       // Set session timeout for publisher
 8002250:	4822      	ldr	r0, [pc, #136]	@ (80022dc <uros_create_entities+0x10c>)
 8002252:	f009 fb89 	bl	800b968 <rcl_publisher_get_rmw_handle>
 8002256:	4603      	mov	r3, r0
 8002258:	210a      	movs	r1, #10
 800225a:	4618      	mov	r0, r3
 800225c:	f00c fb5a 	bl	800e914 <rmw_uros_set_publisher_session_timeout>
    rcl_publisher_get_rmw_handle(&arm_pub),
    10);

  rclc_subscription_init_default(                                               // Initialize subscriber for arm command
 8002260:	f00c fee2 	bl	800f028 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8002264:	4602      	mov	r2, r0
 8002266:	4b1f      	ldr	r3, [pc, #124]	@ (80022e4 <uros_create_entities+0x114>)
 8002268:	491a      	ldr	r1, [pc, #104]	@ (80022d4 <uros_create_entities+0x104>)
 800226a:	481f      	ldr	r0, [pc, #124]	@ (80022e8 <uros_create_entities+0x118>)
 800226c:	f00a fef6 	bl	800d05c <rclc_subscription_init_default>
    &cmd_arm_sub,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
    "robot/cmd_arm");
  cmd_arm_msg.data = -1;
 8002270:	4b1e      	ldr	r3, [pc, #120]	@ (80022ec <uros_create_entities+0x11c>)
 8002272:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002276:	601a      	str	r2, [r3, #0]

  rclc_timer_init_default(                                                      // Initialize timer for publishing pose
 8002278:	4b1d      	ldr	r3, [pc, #116]	@ (80022f0 <uros_create_entities+0x120>)
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	a30e      	add	r3, pc, #56	@ (adr r3, 80022b8 <uros_create_entities+0xe8>)
 800227e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002282:	4911      	ldr	r1, [pc, #68]	@ (80022c8 <uros_create_entities+0xf8>)
 8002284:	481b      	ldr	r0, [pc, #108]	@ (80022f4 <uros_create_entities+0x124>)
 8002286:	f00a ff1d 	bl	800d0c4 <rclc_timer_init_default>
    &pub_timer,
    &support,
    RCL_MS_TO_NS(100),
    pub_timer_cb);

  rclc_executor_init(&executor, &support.context, 2, &allocator);               // Create executor (1 timer + 2 subscriptions)
 800228a:	4b0d      	ldr	r3, [pc, #52]	@ (80022c0 <uros_create_entities+0xf0>)
 800228c:	2202      	movs	r2, #2
 800228e:	490e      	ldr	r1, [pc, #56]	@ (80022c8 <uros_create_entities+0xf8>)
 8002290:	4819      	ldr	r0, [pc, #100]	@ (80022f8 <uros_create_entities+0x128>)
 8002292:	f00a faed 	bl	800c870 <rclc_executor_init>
  rclc_executor_add_subscription(&executor, &cmd_arm_sub, &cmd_arm_msg, &cmd_arm_sub_cb, ON_NEW_DATA); // Add arm subscriber to executor
 8002296:	2300      	movs	r3, #0
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	4b18      	ldr	r3, [pc, #96]	@ (80022fc <uros_create_entities+0x12c>)
 800229c:	4a13      	ldr	r2, [pc, #76]	@ (80022ec <uros_create_entities+0x11c>)
 800229e:	4912      	ldr	r1, [pc, #72]	@ (80022e8 <uros_create_entities+0x118>)
 80022a0:	4815      	ldr	r0, [pc, #84]	@ (80022f8 <uros_create_entities+0x128>)
 80022a2:	f00a fb89 	bl	800c9b8 <rclc_executor_add_subscription>
  rclc_executor_add_timer(&executor, &pub_timer); // Add pose publisher timer to executor
 80022a6:	4913      	ldr	r1, [pc, #76]	@ (80022f4 <uros_create_entities+0x124>)
 80022a8:	4813      	ldr	r0, [pc, #76]	@ (80022f8 <uros_create_entities+0x128>)
 80022aa:	f00a fbb9 	bl	800ca20 <rclc_executor_add_timer>
}
 80022ae:	bf00      	nop
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bdb0      	pop	{r4, r5, r7, pc}
 80022b6:	bf00      	nop
 80022b8:	05f5e100 	.word	0x05f5e100
 80022bc:	00000000 	.word	0x00000000
 80022c0:	2000029c 	.word	0x2000029c
 80022c4:	200002b8 	.word	0x200002b8
 80022c8:	20000268 	.word	0x20000268
 80022cc:	08019a00 	.word	0x08019a00
 80022d0:	08019a04 	.word	0x08019a04
 80022d4:	200002b0 	.word	0x200002b0
 80022d8:	08019a14 	.word	0x08019a14
 80022dc:	20000254 	.word	0x20000254
 80022e0:	20000258 	.word	0x20000258
 80022e4:	08019a28 	.word	0x08019a28
 80022e8:	2000025c 	.word	0x2000025c
 80022ec:	20000260 	.word	0x20000260
 80022f0:	08002391 	.word	0x08002391
 80022f4:	20000264 	.word	0x20000264
 80022f8:	200002c0 	.word	0x200002c0
 80022fc:	08002361 	.word	0x08002361

08002300 <uros_destroy_entities>:
void uros_destroy_entities(void) {
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
  rmw_context_t* rmw_context = rcl_context_get_rmw_context(&support.context);
 8002306:	4810      	ldr	r0, [pc, #64]	@ (8002348 <uros_destroy_entities+0x48>)
 8002308:	f008 febe 	bl	800b088 <rcl_context_get_rmw_context>
 800230c:	6078      	str	r0, [r7, #4]
  (void) rmw_uros_set_context_entity_destroy_session_timeout(rmw_context, 0);
 800230e:	2100      	movs	r1, #0
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f00c fb07 	bl	800e924 <rmw_uros_set_context_entity_destroy_session_timeout>

  // Destroy publisher
  rcl_publisher_fini(&arm_pub, &node);
 8002316:	490d      	ldr	r1, [pc, #52]	@ (800234c <uros_destroy_entities+0x4c>)
 8002318:	480d      	ldr	r0, [pc, #52]	@ (8002350 <uros_destroy_entities+0x50>)
 800231a:	f009 faa7 	bl	800b86c <rcl_publisher_fini>

  // Destroy subscription
  rcl_subscription_fini(&cmd_arm_sub, &node);
 800231e:	490b      	ldr	r1, [pc, #44]	@ (800234c <uros_destroy_entities+0x4c>)
 8002320:	480c      	ldr	r0, [pc, #48]	@ (8002354 <uros_destroy_entities+0x54>)
 8002322:	f009 fbf7 	bl	800bb14 <rcl_subscription_fini>

  // Destroy timer
  rcl_timer_fini(&pub_timer);
 8002326:	480c      	ldr	r0, [pc, #48]	@ (8002358 <uros_destroy_entities+0x58>)
 8002328:	f009 fe28 	bl	800bf7c <rcl_timer_fini>

  // Destroy executor
  rclc_executor_fini(&executor);
 800232c:	480b      	ldr	r0, [pc, #44]	@ (800235c <uros_destroy_entities+0x5c>)
 800232e:	f00a fb0f 	bl	800c950 <rclc_executor_fini>

  // Destroy node
  rcl_node_fini(&node);
 8002332:	4806      	ldr	r0, [pc, #24]	@ (800234c <uros_destroy_entities+0x4c>)
 8002334:	f009 f978 	bl	800b628 <rcl_node_fini>
  rclc_support_fini(&support);
 8002338:	4803      	ldr	r0, [pc, #12]	@ (8002348 <uros_destroy_entities+0x48>)
 800233a:	f00a fdf5 	bl	800cf28 <rclc_support_fini>
}
 800233e:	bf00      	nop
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	20000268 	.word	0x20000268
 800234c:	200002b0 	.word	0x200002b0
 8002350:	20000254 	.word	0x20000254
 8002354:	2000025c 	.word	0x2000025c
 8002358:	20000264 	.word	0x20000264
 800235c:	200002c0 	.word	0x200002c0

08002360 <cmd_arm_sub_cb>:


void cmd_arm_sub_cb(const void* msgin) {
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  const std_msgs__msg__Int32 * msg = (const std_msgs__msg__Int32 *)msgin;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	60fb      	str	r3, [r7, #12]
  cmd_arm_msg = *msg;
 800236c:	4a06      	ldr	r2, [pc, #24]	@ (8002388 <cmd_arm_sub_cb+0x28>)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6013      	str	r3, [r2, #0]
  mission_type = cmd_arm_msg.data;
 8002374:	4b04      	ldr	r3, [pc, #16]	@ (8002388 <cmd_arm_sub_cb+0x28>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a04      	ldr	r2, [pc, #16]	@ (800238c <cmd_arm_sub_cb+0x2c>)
 800237a:	6013      	str	r3, [r2, #0]
  mission_ctrl();
 800237c:	f7ff fb9a 	bl	8001ab4 <mission_ctrl>
}
 8002380:	bf00      	nop
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	20000260 	.word	0x20000260
 800238c:	20000244 	.word	0x20000244

08002390 <pub_timer_cb>:

void pub_timer_cb(rcl_timer_t * timer, int64_t last_call_time){
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	e9c7 2300 	strd	r2, r3, [r7]
  arm_msg.data = mission_status;
 800239c:	4b06      	ldr	r3, [pc, #24]	@ (80023b8 <pub_timer_cb+0x28>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a06      	ldr	r2, [pc, #24]	@ (80023bc <pub_timer_cb+0x2c>)
 80023a2:	6013      	str	r3, [r2, #0]
	rcl_publish(&arm_pub, &arm_msg, NULL);
 80023a4:	2200      	movs	r2, #0
 80023a6:	4905      	ldr	r1, [pc, #20]	@ (80023bc <pub_timer_cb+0x2c>)
 80023a8:	4805      	ldr	r0, [pc, #20]	@ (80023c0 <pub_timer_cb+0x30>)
 80023aa:	f009 fab9 	bl	800b920 <rcl_publish>
}
 80023ae:	bf00      	nop
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	2000024c 	.word	0x2000024c
 80023bc:	20000258 	.word	0x20000258
 80023c0:	20000254 	.word	0x20000254

080023c4 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08a      	sub	sp, #40	@ 0x28
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80023d0:	f007 f9b2 	bl	8009738 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80023d4:	4b5a      	ldr	r3, [pc, #360]	@ (8002540 <pvPortMallocMicroROS+0x17c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80023dc:	f000 f986 	bl	80026ec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80023e0:	4b58      	ldr	r3, [pc, #352]	@ (8002544 <pvPortMallocMicroROS+0x180>)
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4013      	ands	r3, r2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f040 8090 	bne.w	800250e <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d01e      	beq.n	8002432 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80023f4:	2208      	movs	r2, #8
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4413      	add	r3, r2
 80023fa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	2b00      	cmp	r3, #0
 8002404:	d015      	beq.n	8002432 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f023 0307 	bic.w	r3, r3, #7
 800240c:	3308      	adds	r3, #8
 800240e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00b      	beq.n	8002432 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800241a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800241e:	f383 8811 	msr	BASEPRI, r3
 8002422:	f3bf 8f6f 	isb	sy
 8002426:	f3bf 8f4f 	dsb	sy
 800242a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800242c:	bf00      	nop
 800242e:	bf00      	nop
 8002430:	e7fd      	b.n	800242e <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d06a      	beq.n	800250e <pvPortMallocMicroROS+0x14a>
 8002438:	4b43      	ldr	r3, [pc, #268]	@ (8002548 <pvPortMallocMicroROS+0x184>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	429a      	cmp	r2, r3
 8002440:	d865      	bhi.n	800250e <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002442:	4b42      	ldr	r3, [pc, #264]	@ (800254c <pvPortMallocMicroROS+0x188>)
 8002444:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002446:	4b41      	ldr	r3, [pc, #260]	@ (800254c <pvPortMallocMicroROS+0x188>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800244c:	e004      	b.n	8002458 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 800244e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002450:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	429a      	cmp	r2, r3
 8002460:	d903      	bls.n	800246a <pvPortMallocMicroROS+0xa6>
 8002462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f1      	bne.n	800244e <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800246a:	4b35      	ldr	r3, [pc, #212]	@ (8002540 <pvPortMallocMicroROS+0x17c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002470:	429a      	cmp	r2, r3
 8002472:	d04c      	beq.n	800250e <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002474:	6a3b      	ldr	r3, [r7, #32]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2208      	movs	r2, #8
 800247a:	4413      	add	r3, r2
 800247c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800247e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	6a3b      	ldr	r3, [r7, #32]
 8002484:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	1ad2      	subs	r2, r2, r3
 800248e:	2308      	movs	r3, #8
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	429a      	cmp	r2, r3
 8002494:	d920      	bls.n	80024d8 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4413      	add	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00b      	beq.n	80024c0 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 80024a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024ac:	f383 8811 	msr	BASEPRI, r3
 80024b0:	f3bf 8f6f 	isb	sy
 80024b4:	f3bf 8f4f 	dsb	sy
 80024b8:	613b      	str	r3, [r7, #16]
}
 80024ba:	bf00      	nop
 80024bc:	bf00      	nop
 80024be:	e7fd      	b.n	80024bc <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80024c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	1ad2      	subs	r2, r2, r3
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80024cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80024d2:	69b8      	ldr	r0, [r7, #24]
 80024d4:	f000 f96c 	bl	80027b0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80024d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002548 <pvPortMallocMicroROS+0x184>)
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	4a19      	ldr	r2, [pc, #100]	@ (8002548 <pvPortMallocMicroROS+0x184>)
 80024e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80024e6:	4b18      	ldr	r3, [pc, #96]	@ (8002548 <pvPortMallocMicroROS+0x184>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	4b19      	ldr	r3, [pc, #100]	@ (8002550 <pvPortMallocMicroROS+0x18c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d203      	bcs.n	80024fa <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80024f2:	4b15      	ldr	r3, [pc, #84]	@ (8002548 <pvPortMallocMicroROS+0x184>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a16      	ldr	r2, [pc, #88]	@ (8002550 <pvPortMallocMicroROS+0x18c>)
 80024f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80024fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	4b11      	ldr	r3, [pc, #68]	@ (8002544 <pvPortMallocMicroROS+0x180>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	431a      	orrs	r2, r3
 8002504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002506:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800250e:	f007 f921 	bl	8009754 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00b      	beq.n	8002534 <pvPortMallocMicroROS+0x170>
	__asm volatile
 800251c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002520:	f383 8811 	msr	BASEPRI, r3
 8002524:	f3bf 8f6f 	isb	sy
 8002528:	f3bf 8f4f 	dsb	sy
 800252c:	60fb      	str	r3, [r7, #12]
}
 800252e:	bf00      	nop
 8002530:	bf00      	nop
 8002532:	e7fd      	b.n	8002530 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8002534:	69fb      	ldr	r3, [r7, #28]
}
 8002536:	4618      	mov	r0, r3
 8002538:	3728      	adds	r7, #40	@ 0x28
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	20003f58 	.word	0x20003f58
 8002544:	20003f64 	.word	0x20003f64
 8002548:	20003f5c 	.word	0x20003f5c
 800254c:	20003f50 	.word	0x20003f50
 8002550:	20003f60 	.word	0x20003f60

08002554 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d04a      	beq.n	80025fc <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002566:	2308      	movs	r3, #8
 8002568:	425b      	negs	r3, r3
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	4413      	add	r3, r2
 800256e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	4b22      	ldr	r3, [pc, #136]	@ (8002604 <vPortFreeMicroROS+0xb0>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4013      	ands	r3, r2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10b      	bne.n	800259a <vPortFreeMicroROS+0x46>
	__asm volatile
 8002582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002586:	f383 8811 	msr	BASEPRI, r3
 800258a:	f3bf 8f6f 	isb	sy
 800258e:	f3bf 8f4f 	dsb	sy
 8002592:	60fb      	str	r3, [r7, #12]
}
 8002594:	bf00      	nop
 8002596:	bf00      	nop
 8002598:	e7fd      	b.n	8002596 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00b      	beq.n	80025ba <vPortFreeMicroROS+0x66>
	__asm volatile
 80025a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025a6:	f383 8811 	msr	BASEPRI, r3
 80025aa:	f3bf 8f6f 	isb	sy
 80025ae:	f3bf 8f4f 	dsb	sy
 80025b2:	60bb      	str	r3, [r7, #8]
}
 80025b4:	bf00      	nop
 80025b6:	bf00      	nop
 80025b8:	e7fd      	b.n	80025b6 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	4b11      	ldr	r3, [pc, #68]	@ (8002604 <vPortFreeMicroROS+0xb0>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4013      	ands	r3, r2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d019      	beq.n	80025fc <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d115      	bne.n	80025fc <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	685a      	ldr	r2, [r3, #4]
 80025d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002604 <vPortFreeMicroROS+0xb0>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	43db      	mvns	r3, r3
 80025da:	401a      	ands	r2, r3
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80025e0:	f007 f8aa 	bl	8009738 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	4b07      	ldr	r3, [pc, #28]	@ (8002608 <vPortFreeMicroROS+0xb4>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4413      	add	r3, r2
 80025ee:	4a06      	ldr	r2, [pc, #24]	@ (8002608 <vPortFreeMicroROS+0xb4>)
 80025f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80025f2:	6938      	ldr	r0, [r7, #16]
 80025f4:	f000 f8dc 	bl	80027b0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80025f8:	f007 f8ac 	bl	8009754 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80025fc:	bf00      	nop
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	20003f64 	.word	0x20003f64
 8002608:	20003f5c 	.word	0x20003f5c

0800260c <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 800260c:	b480      	push	{r7}
 800260e:	b087      	sub	sp, #28
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8002618:	2308      	movs	r3, #8
 800261a:	425b      	negs	r3, r3
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	4413      	add	r3, r2
 8002620:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	685a      	ldr	r2, [r3, #4]
 800262a:	4b06      	ldr	r3, [pc, #24]	@ (8002644 <getBlockSize+0x38>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	43db      	mvns	r3, r3
 8002630:	4013      	ands	r3, r2
 8002632:	60fb      	str	r3, [r7, #12]

	return count;
 8002634:	68fb      	ldr	r3, [r7, #12]
}
 8002636:	4618      	mov	r0, r3
 8002638:	371c      	adds	r7, #28
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	20003f64 	.word	0x20003f64

08002648 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8002652:	f007 f871 	bl	8009738 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8002656:	6838      	ldr	r0, [r7, #0]
 8002658:	f7ff feb4 	bl	80023c4 <pvPortMallocMicroROS>
 800265c:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d017      	beq.n	8002694 <pvPortReallocMicroROS+0x4c>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d014      	beq.n	8002694 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7ff ffce 	bl	800260c <getBlockSize>
 8002670:	4603      	mov	r3, r0
 8002672:	2208      	movs	r2, #8
 8002674:	1a9b      	subs	r3, r3, r2
 8002676:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	429a      	cmp	r2, r3
 800267e:	d201      	bcs.n	8002684 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	6879      	ldr	r1, [r7, #4]
 8002688:	68b8      	ldr	r0, [r7, #8]
 800268a:	f016 fa96 	bl	8018bba <memcpy>

		vPortFreeMicroROS(pv);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7ff ff60 	bl	8002554 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8002694:	f007 f85e 	bl	8009754 <xTaskResumeAll>

	return newmem;
 8002698:	68bb      	ldr	r3, [r7, #8]
}
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b086      	sub	sp, #24
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
 80026aa:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80026ac:	f007 f844 	bl	8009738 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	fb02 f303 	mul.w	r3, r2, r3
 80026b8:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80026ba:	6978      	ldr	r0, [r7, #20]
 80026bc:	f7ff fe82 	bl	80023c4 <pvPortMallocMicroROS>
 80026c0:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	613b      	str	r3, [r7, #16]

  	while(count--)
 80026c6:	e004      	b.n	80026d2 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	613a      	str	r2, [r7, #16]
 80026ce:	2200      	movs	r2, #0
 80026d0:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	1e5a      	subs	r2, r3, #1
 80026d6:	617a      	str	r2, [r7, #20]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1f5      	bne.n	80026c8 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80026dc:	f007 f83a 	bl	8009754 <xTaskResumeAll>
  	return mem;
 80026e0:	68fb      	ldr	r3, [r7, #12]
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80026f2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80026f6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80026f8:	4b27      	ldr	r3, [pc, #156]	@ (8002798 <prvHeapInit+0xac>)
 80026fa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00c      	beq.n	8002720 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	3307      	adds	r3, #7
 800270a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f023 0307 	bic.w	r3, r3, #7
 8002712:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002714:	68ba      	ldr	r2, [r7, #8]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	4a1f      	ldr	r2, [pc, #124]	@ (8002798 <prvHeapInit+0xac>)
 800271c:	4413      	add	r3, r2
 800271e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002724:	4a1d      	ldr	r2, [pc, #116]	@ (800279c <prvHeapInit+0xb0>)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800272a:	4b1c      	ldr	r3, [pc, #112]	@ (800279c <prvHeapInit+0xb0>)
 800272c:	2200      	movs	r2, #0
 800272e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	4413      	add	r3, r2
 8002736:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002738:	2208      	movs	r2, #8
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	1a9b      	subs	r3, r3, r2
 800273e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f023 0307 	bic.w	r3, r3, #7
 8002746:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4a15      	ldr	r2, [pc, #84]	@ (80027a0 <prvHeapInit+0xb4>)
 800274c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800274e:	4b14      	ldr	r3, [pc, #80]	@ (80027a0 <prvHeapInit+0xb4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2200      	movs	r2, #0
 8002754:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002756:	4b12      	ldr	r3, [pc, #72]	@ (80027a0 <prvHeapInit+0xb4>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	1ad2      	subs	r2, r2, r3
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800276c:	4b0c      	ldr	r3, [pc, #48]	@ (80027a0 <prvHeapInit+0xb4>)
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	4a0a      	ldr	r2, [pc, #40]	@ (80027a4 <prvHeapInit+0xb8>)
 800277a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	4a09      	ldr	r2, [pc, #36]	@ (80027a8 <prvHeapInit+0xbc>)
 8002782:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002784:	4b09      	ldr	r3, [pc, #36]	@ (80027ac <prvHeapInit+0xc0>)
 8002786:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800278a:	601a      	str	r2, [r3, #0]
}
 800278c:	bf00      	nop
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	20000350 	.word	0x20000350
 800279c:	20003f50 	.word	0x20003f50
 80027a0:	20003f58 	.word	0x20003f58
 80027a4:	20003f60 	.word	0x20003f60
 80027a8:	20003f5c 	.word	0x20003f5c
 80027ac:	20003f64 	.word	0x20003f64

080027b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80027b8:	4b28      	ldr	r3, [pc, #160]	@ (800285c <prvInsertBlockIntoFreeList+0xac>)
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	e002      	b.n	80027c4 <prvInsertBlockIntoFreeList+0x14>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d8f7      	bhi.n	80027be <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	4413      	add	r3, r2
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d108      	bne.n	80027f2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	441a      	add	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	441a      	add	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d118      	bne.n	8002838 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	4b15      	ldr	r3, [pc, #84]	@ (8002860 <prvInsertBlockIntoFreeList+0xb0>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	d00d      	beq.n	800282e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	441a      	add	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	e008      	b.n	8002840 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800282e:	4b0c      	ldr	r3, [pc, #48]	@ (8002860 <prvInsertBlockIntoFreeList+0xb0>)
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	e003      	b.n	8002840 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	429a      	cmp	r2, r3
 8002846:	d002      	beq.n	800284e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800284e:	bf00      	nop
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	20003f50 	.word	0x20003f50
 8002860:	20003f58 	.word	0x20003f58

08002864 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002872:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8002874:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002878:	4904      	ldr	r1, [pc, #16]	@ (800288c <cubemx_transport_open+0x28>)
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f004 fb4c 	bl	8006f18 <HAL_UART_Receive_DMA>
    return true;
 8002880:	2301      	movs	r3, #1
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20003f68 	.word	0x20003f68

08002890 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800289e:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f004 fb5e 	bl	8006f62 <HAL_UART_DMAStop>
    return true;
 80028a6:	2301      	movs	r3, #1
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
 80028bc:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80028c4:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b20      	cmp	r3, #32
 80028d0:	d11c      	bne.n	800290c <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	461a      	mov	r2, r3
 80028d8:	68b9      	ldr	r1, [r7, #8]
 80028da:	6978      	ldr	r0, [r7, #20]
 80028dc:	f004 faa0 	bl	8006e20 <HAL_UART_Transmit_DMA>
 80028e0:	4603      	mov	r3, r0
 80028e2:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80028e4:	e002      	b.n	80028ec <cubemx_transport_write+0x3c>
            osDelay(1);
 80028e6:	2001      	movs	r0, #1
 80028e8:	f005 fe50 	bl	800858c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80028ec:	7cfb      	ldrb	r3, [r7, #19]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d105      	bne.n	80028fe <cubemx_transport_write+0x4e>
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b20      	cmp	r3, #32
 80028fc:	d1f3      	bne.n	80028e6 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 80028fe:	7cfb      	ldrb	r3, [r7, #19]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <cubemx_transport_write+0x58>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	e002      	b.n	800290e <cubemx_transport_write+0x5e>
 8002908:	2300      	movs	r3, #0
 800290a:	e000      	b.n	800290e <cubemx_transport_write+0x5e>
    }else{
        return 0;
 800290c:	2300      	movs	r3, #0
    }
}
 800290e:	4618      	mov	r0, r3
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
	...

08002918 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8002918:	b580      	push	{r7, lr}
 800291a:	b088      	sub	sp, #32
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
 8002924:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800292c:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 800292e:	2300      	movs	r3, #0
 8002930:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002932:	b672      	cpsid	i
}
 8002934:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8002942:	4a1c      	ldr	r2, [pc, #112]	@ (80029b4 <cubemx_transport_read+0x9c>)
 8002944:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002946:	b662      	cpsie	i
}
 8002948:	bf00      	nop
        __enable_irq();
        ms_used++;
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	3301      	adds	r3, #1
 800294e:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8002950:	2001      	movs	r0, #1
 8002952:	f005 fe1b 	bl	800858c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8002956:	4b18      	ldr	r3, [pc, #96]	@ (80029b8 <cubemx_transport_read+0xa0>)
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	4b16      	ldr	r3, [pc, #88]	@ (80029b4 <cubemx_transport_read+0x9c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	429a      	cmp	r2, r3
 8002960:	d103      	bne.n	800296a <cubemx_transport_read+0x52>
 8002962:	69fa      	ldr	r2, [r7, #28]
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	429a      	cmp	r2, r3
 8002968:	dbe3      	blt.n	8002932 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 800296a:	2300      	movs	r3, #0
 800296c:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800296e:	e011      	b.n	8002994 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8002970:	4b11      	ldr	r3, [pc, #68]	@ (80029b8 <cubemx_transport_read+0xa0>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68b9      	ldr	r1, [r7, #8]
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	440b      	add	r3, r1
 800297a:	4910      	ldr	r1, [pc, #64]	@ (80029bc <cubemx_transport_read+0xa4>)
 800297c:	5c8a      	ldrb	r2, [r1, r2]
 800297e:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8002980:	4b0d      	ldr	r3, [pc, #52]	@ (80029b8 <cubemx_transport_read+0xa0>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	3301      	adds	r3, #1
 8002986:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800298a:	4a0b      	ldr	r2, [pc, #44]	@ (80029b8 <cubemx_transport_read+0xa0>)
 800298c:	6013      	str	r3, [r2, #0]
        wrote++;
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	3301      	adds	r3, #1
 8002992:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002994:	4b08      	ldr	r3, [pc, #32]	@ (80029b8 <cubemx_transport_read+0xa0>)
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	4b06      	ldr	r3, [pc, #24]	@ (80029b4 <cubemx_transport_read+0x9c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	429a      	cmp	r2, r3
 800299e:	d003      	beq.n	80029a8 <cubemx_transport_read+0x90>
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d3e3      	bcc.n	8002970 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 80029a8:	69bb      	ldr	r3, [r7, #24]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3720      	adds	r7, #32
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	2000476c 	.word	0x2000476c
 80029b8:	20004768 	.word	0x20004768
 80029bc:	20003f68 	.word	0x20003f68

080029c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 80029c4:	f001 f9e8 	bl	8003d98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029c8:	f000 f828 	bl	8002a1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029cc:	f000 fb16 	bl	8002ffc <MX_GPIO_Init>
  MX_DMA_Init();
 80029d0:	f000 faec 	bl	8002fac <MX_DMA_Init>
  MX_USART2_UART_Init();
 80029d4:	f000 fa96 	bl	8002f04 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80029d8:	f000 f8c0 	bl	8002b5c <MX_TIM1_Init>
  MX_TIM5_Init();
 80029dc:	f000 f9de 	bl	8002d9c <MX_TIM5_Init>
  MX_USART3_UART_Init();
 80029e0:	f000 faba 	bl	8002f58 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80029e4:	f000 f88c 	bl	8002b00 <MX_I2C1_Init>
  MX_TIM4_Init();
 80029e8:	f000 f98a 	bl	8002d00 <MX_TIM4_Init>
  MX_TIM12_Init();
 80029ec:	f000 fa3a 	bl	8002e64 <MX_TIM12_Init>
  MX_TIM3_Init();
 80029f0:	f000 f90c 	bl	8002c0c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80029f4:	f005 fcee 	bl	80083d4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80029f8:	4a05      	ldr	r2, [pc, #20]	@ (8002a10 <main+0x50>)
 80029fa:	2100      	movs	r1, #0
 80029fc:	4805      	ldr	r0, [pc, #20]	@ (8002a14 <main+0x54>)
 80029fe:	f005 fd33 	bl	8008468 <osThreadNew>
 8002a02:	4603      	mov	r3, r0
 8002a04:	4a04      	ldr	r2, [pc, #16]	@ (8002a18 <main+0x58>)
 8002a06:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002a08:	f005 fd08 	bl	800841c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002a0c:	bf00      	nop
 8002a0e:	e7fd      	b.n	8002a0c <main+0x4c>
 8002a10:	08019a80 	.word	0x08019a80
 8002a14:	08003cc9 	.word	0x08003cc9
 8002a18:	20004a7c 	.word	0x20004a7c

08002a1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b094      	sub	sp, #80	@ 0x50
 8002a20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a22:	f107 031c 	add.w	r3, r7, #28
 8002a26:	2234      	movs	r2, #52	@ 0x34
 8002a28:	2100      	movs	r1, #0
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f015 ff9e 	bl	801896c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a30:	f107 0308 	add.w	r3, r7, #8
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	605a      	str	r2, [r3, #4]
 8002a3a:	609a      	str	r2, [r3, #8]
 8002a3c:	60da      	str	r2, [r3, #12]
 8002a3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a40:	2300      	movs	r3, #0
 8002a42:	607b      	str	r3, [r7, #4]
 8002a44:	4b2c      	ldr	r3, [pc, #176]	@ (8002af8 <SystemClock_Config+0xdc>)
 8002a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a48:	4a2b      	ldr	r2, [pc, #172]	@ (8002af8 <SystemClock_Config+0xdc>)
 8002a4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a50:	4b29      	ldr	r3, [pc, #164]	@ (8002af8 <SystemClock_Config+0xdc>)
 8002a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a58:	607b      	str	r3, [r7, #4]
 8002a5a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	603b      	str	r3, [r7, #0]
 8002a60:	4b26      	ldr	r3, [pc, #152]	@ (8002afc <SystemClock_Config+0xe0>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a25      	ldr	r2, [pc, #148]	@ (8002afc <SystemClock_Config+0xe0>)
 8002a66:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a6a:	6013      	str	r3, [r2, #0]
 8002a6c:	4b23      	ldr	r3, [pc, #140]	@ (8002afc <SystemClock_Config+0xe0>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002a74:	603b      	str	r3, [r7, #0]
 8002a76:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a78:	2302      	movs	r3, #2
 8002a7a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a80:	2310      	movs	r3, #16
 8002a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a84:	2302      	movs	r3, #2
 8002a86:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002a8c:	2308      	movs	r3, #8
 8002a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002a90:	23b4      	movs	r3, #180	@ 0xb4
 8002a92:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a94:	2302      	movs	r3, #2
 8002a96:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002a98:	2302      	movs	r3, #2
 8002a9a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002aa0:	f107 031c 	add.w	r3, r7, #28
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f002 fced 	bl	8005484 <HAL_RCC_OscConfig>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002ab0:	f000 fb30 	bl	8003114 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002ab4:	f002 f9a0 	bl	8004df8 <HAL_PWREx_EnableOverDrive>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002abe:	f000 fb29 	bl	8003114 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ac2:	230f      	movs	r3, #15
 8002ac4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002aca:	2300      	movs	r3, #0
 8002acc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002ace:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002ad2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002ad4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ad8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002ada:	f107 0308 	add.w	r3, r7, #8
 8002ade:	2105      	movs	r1, #5
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f002 f9d9 	bl	8004e98 <HAL_RCC_ClockConfig>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002aec:	f000 fb12 	bl	8003114 <Error_Handler>
  }
}
 8002af0:	bf00      	nop
 8002af2:	3750      	adds	r7, #80	@ 0x50
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40023800 	.word	0x40023800
 8002afc:	40007000 	.word	0x40007000

08002b00 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002b04:	4b12      	ldr	r3, [pc, #72]	@ (8002b50 <MX_I2C1_Init+0x50>)
 8002b06:	4a13      	ldr	r2, [pc, #76]	@ (8002b54 <MX_I2C1_Init+0x54>)
 8002b08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002b0a:	4b11      	ldr	r3, [pc, #68]	@ (8002b50 <MX_I2C1_Init+0x50>)
 8002b0c:	4a12      	ldr	r2, [pc, #72]	@ (8002b58 <MX_I2C1_Init+0x58>)
 8002b0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b10:	4b0f      	ldr	r3, [pc, #60]	@ (8002b50 <MX_I2C1_Init+0x50>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002b16:	4b0e      	ldr	r3, [pc, #56]	@ (8002b50 <MX_I2C1_Init+0x50>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b50 <MX_I2C1_Init+0x50>)
 8002b1e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002b22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b24:	4b0a      	ldr	r3, [pc, #40]	@ (8002b50 <MX_I2C1_Init+0x50>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002b2a:	4b09      	ldr	r3, [pc, #36]	@ (8002b50 <MX_I2C1_Init+0x50>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b30:	4b07      	ldr	r3, [pc, #28]	@ (8002b50 <MX_I2C1_Init+0x50>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b36:	4b06      	ldr	r3, [pc, #24]	@ (8002b50 <MX_I2C1_Init+0x50>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b3c:	4804      	ldr	r0, [pc, #16]	@ (8002b50 <MX_I2C1_Init+0x50>)
 8002b3e:	f002 f817 	bl	8004b70 <HAL_I2C_Init>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002b48:	f000 fae4 	bl	8003114 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b4c:	bf00      	nop
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	20004770 	.word	0x20004770
 8002b54:	40005400 	.word	0x40005400
 8002b58:	000186a0 	.word	0x000186a0

08002b5c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b08c      	sub	sp, #48	@ 0x30
 8002b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b62:	f107 030c 	add.w	r3, r7, #12
 8002b66:	2224      	movs	r2, #36	@ 0x24
 8002b68:	2100      	movs	r1, #0
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f015 fefe 	bl	801896c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b70:	1d3b      	adds	r3, r7, #4
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b78:	4b22      	ldr	r3, [pc, #136]	@ (8002c04 <MX_TIM1_Init+0xa8>)
 8002b7a:	4a23      	ldr	r2, [pc, #140]	@ (8002c08 <MX_TIM1_Init+0xac>)
 8002b7c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002b7e:	4b21      	ldr	r3, [pc, #132]	@ (8002c04 <MX_TIM1_Init+0xa8>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b84:	4b1f      	ldr	r3, [pc, #124]	@ (8002c04 <MX_TIM1_Init+0xa8>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002b8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002c04 <MX_TIM1_Init+0xa8>)
 8002b8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b90:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b92:	4b1c      	ldr	r3, [pc, #112]	@ (8002c04 <MX_TIM1_Init+0xa8>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b98:	4b1a      	ldr	r3, [pc, #104]	@ (8002c04 <MX_TIM1_Init+0xa8>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b9e:	4b19      	ldr	r3, [pc, #100]	@ (8002c04 <MX_TIM1_Init+0xa8>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002bac:	2301      	movs	r3, #1
 8002bae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002bc8:	f107 030c 	add.w	r3, r7, #12
 8002bcc:	4619      	mov	r1, r3
 8002bce:	480d      	ldr	r0, [pc, #52]	@ (8002c04 <MX_TIM1_Init+0xa8>)
 8002bd0:	f003 f8ce 	bl	8005d70 <HAL_TIM_Encoder_Init>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002bda:	f000 fa9b 	bl	8003114 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bde:	2300      	movs	r3, #0
 8002be0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002be2:	2300      	movs	r3, #0
 8002be4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002be6:	1d3b      	adds	r3, r7, #4
 8002be8:	4619      	mov	r1, r3
 8002bea:	4806      	ldr	r0, [pc, #24]	@ (8002c04 <MX_TIM1_Init+0xa8>)
 8002bec:	f003 ffac 	bl	8006b48 <HAL_TIMEx_MasterConfigSynchronization>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002bf6:	f000 fa8d 	bl	8003114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002bfa:	bf00      	nop
 8002bfc:	3730      	adds	r7, #48	@ 0x30
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	200047c4 	.word	0x200047c4
 8002c08:	40010000 	.word	0x40010000

08002c0c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b08a      	sub	sp, #40	@ 0x28
 8002c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c12:	f107 0320 	add.w	r3, r7, #32
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c1c:	1d3b      	adds	r3, r7, #4
 8002c1e:	2200      	movs	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	605a      	str	r2, [r3, #4]
 8002c24:	609a      	str	r2, [r3, #8]
 8002c26:	60da      	str	r2, [r3, #12]
 8002c28:	611a      	str	r2, [r3, #16]
 8002c2a:	615a      	str	r2, [r3, #20]
 8002c2c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c2e:	4b32      	ldr	r3, [pc, #200]	@ (8002cf8 <MX_TIM3_Init+0xec>)
 8002c30:	4a32      	ldr	r2, [pc, #200]	@ (8002cfc <MX_TIM3_Init+0xf0>)
 8002c32:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8002c34:	4b30      	ldr	r3, [pc, #192]	@ (8002cf8 <MX_TIM3_Init+0xec>)
 8002c36:	2259      	movs	r2, #89	@ 0x59
 8002c38:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c3a:	4b2f      	ldr	r3, [pc, #188]	@ (8002cf8 <MX_TIM3_Init+0xec>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8002c40:	4b2d      	ldr	r3, [pc, #180]	@ (8002cf8 <MX_TIM3_Init+0xec>)
 8002c42:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002c46:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c48:	4b2b      	ldr	r3, [pc, #172]	@ (8002cf8 <MX_TIM3_Init+0xec>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c4e:	4b2a      	ldr	r3, [pc, #168]	@ (8002cf8 <MX_TIM3_Init+0xec>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002c54:	4828      	ldr	r0, [pc, #160]	@ (8002cf8 <MX_TIM3_Init+0xec>)
 8002c56:	f002 ff73 	bl	8005b40 <HAL_TIM_PWM_Init>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002c60:	f000 fa58 	bl	8003114 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c64:	2300      	movs	r3, #0
 8002c66:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c6c:	f107 0320 	add.w	r3, r7, #32
 8002c70:	4619      	mov	r1, r3
 8002c72:	4821      	ldr	r0, [pc, #132]	@ (8002cf8 <MX_TIM3_Init+0xec>)
 8002c74:	f003 ff68 	bl	8006b48 <HAL_TIMEx_MasterConfigSynchronization>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002c7e:	f000 fa49 	bl	8003114 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c82:	2360      	movs	r3, #96	@ 0x60
 8002c84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002c86:	2300      	movs	r3, #0
 8002c88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c92:	1d3b      	adds	r3, r7, #4
 8002c94:	2200      	movs	r2, #0
 8002c96:	4619      	mov	r1, r3
 8002c98:	4817      	ldr	r0, [pc, #92]	@ (8002cf8 <MX_TIM3_Init+0xec>)
 8002c9a:	f003 fa8d 	bl	80061b8 <HAL_TIM_PWM_ConfigChannel>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002ca4:	f000 fa36 	bl	8003114 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ca8:	1d3b      	adds	r3, r7, #4
 8002caa:	2204      	movs	r2, #4
 8002cac:	4619      	mov	r1, r3
 8002cae:	4812      	ldr	r0, [pc, #72]	@ (8002cf8 <MX_TIM3_Init+0xec>)
 8002cb0:	f003 fa82 	bl	80061b8 <HAL_TIM_PWM_ConfigChannel>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002cba:	f000 fa2b 	bl	8003114 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002cbe:	1d3b      	adds	r3, r7, #4
 8002cc0:	2208      	movs	r2, #8
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	480c      	ldr	r0, [pc, #48]	@ (8002cf8 <MX_TIM3_Init+0xec>)
 8002cc6:	f003 fa77 	bl	80061b8 <HAL_TIM_PWM_ConfigChannel>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8002cd0:	f000 fa20 	bl	8003114 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002cd4:	1d3b      	adds	r3, r7, #4
 8002cd6:	220c      	movs	r2, #12
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4807      	ldr	r0, [pc, #28]	@ (8002cf8 <MX_TIM3_Init+0xec>)
 8002cdc:	f003 fa6c 	bl	80061b8 <HAL_TIM_PWM_ConfigChannel>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8002ce6:	f000 fa15 	bl	8003114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002cea:	4803      	ldr	r0, [pc, #12]	@ (8002cf8 <MX_TIM3_Init+0xec>)
 8002cec:	f000 fcae 	bl	800364c <HAL_TIM_MspPostInit>

}
 8002cf0:	bf00      	nop
 8002cf2:	3728      	adds	r7, #40	@ 0x28
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	2000480c 	.word	0x2000480c
 8002cfc:	40000400 	.word	0x40000400

08002d00 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d06:	f107 0308 	add.w	r3, r7, #8
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	605a      	str	r2, [r3, #4]
 8002d10:	609a      	str	r2, [r3, #8]
 8002d12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d14:	463b      	mov	r3, r7
 8002d16:	2200      	movs	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002d1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002d94 <MX_TIM4_Init+0x94>)
 8002d1e:	4a1e      	ldr	r2, [pc, #120]	@ (8002d98 <MX_TIM4_Init+0x98>)
 8002d20:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 90-1;
 8002d22:	4b1c      	ldr	r3, [pc, #112]	@ (8002d94 <MX_TIM4_Init+0x94>)
 8002d24:	2259      	movs	r2, #89	@ 0x59
 8002d26:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d28:	4b1a      	ldr	r3, [pc, #104]	@ (8002d94 <MX_TIM4_Init+0x94>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8002d2e:	4b19      	ldr	r3, [pc, #100]	@ (8002d94 <MX_TIM4_Init+0x94>)
 8002d30:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002d34:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d36:	4b17      	ldr	r3, [pc, #92]	@ (8002d94 <MX_TIM4_Init+0x94>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d3c:	4b15      	ldr	r3, [pc, #84]	@ (8002d94 <MX_TIM4_Init+0x94>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002d42:	4814      	ldr	r0, [pc, #80]	@ (8002d94 <MX_TIM4_Init+0x94>)
 8002d44:	f002 fe3c 	bl	80059c0 <HAL_TIM_Base_Init>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002d4e:	f000 f9e1 	bl	8003114 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d56:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002d58:	f107 0308 	add.w	r3, r7, #8
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	480d      	ldr	r0, [pc, #52]	@ (8002d94 <MX_TIM4_Init+0x94>)
 8002d60:	f003 faec 	bl	800633c <HAL_TIM_ConfigClockSource>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002d6a:	f000 f9d3 	bl	8003114 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d72:	2300      	movs	r3, #0
 8002d74:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d76:	463b      	mov	r3, r7
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4806      	ldr	r0, [pc, #24]	@ (8002d94 <MX_TIM4_Init+0x94>)
 8002d7c:	f003 fee4 	bl	8006b48 <HAL_TIMEx_MasterConfigSynchronization>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002d86:	f000 f9c5 	bl	8003114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002d8a:	bf00      	nop
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	20004854 	.word	0x20004854
 8002d98:	40000800 	.word	0x40000800

08002d9c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b08a      	sub	sp, #40	@ 0x28
 8002da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002da2:	f107 0320 	add.w	r3, r7, #32
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dac:	1d3b      	adds	r3, r7, #4
 8002dae:	2200      	movs	r2, #0
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	605a      	str	r2, [r3, #4]
 8002db4:	609a      	str	r2, [r3, #8]
 8002db6:	60da      	str	r2, [r3, #12]
 8002db8:	611a      	str	r2, [r3, #16]
 8002dba:	615a      	str	r2, [r3, #20]
 8002dbc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002dbe:	4b27      	ldr	r3, [pc, #156]	@ (8002e5c <MX_TIM5_Init+0xc0>)
 8002dc0:	4a27      	ldr	r2, [pc, #156]	@ (8002e60 <MX_TIM5_Init+0xc4>)
 8002dc2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 90-1;
 8002dc4:	4b25      	ldr	r3, [pc, #148]	@ (8002e5c <MX_TIM5_Init+0xc0>)
 8002dc6:	2259      	movs	r2, #89	@ 0x59
 8002dc8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dca:	4b24      	ldr	r3, [pc, #144]	@ (8002e5c <MX_TIM5_Init+0xc0>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000-1;
 8002dd0:	4b22      	ldr	r3, [pc, #136]	@ (8002e5c <MX_TIM5_Init+0xc0>)
 8002dd2:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002dd6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dd8:	4b20      	ldr	r3, [pc, #128]	@ (8002e5c <MX_TIM5_Init+0xc0>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dde:	4b1f      	ldr	r3, [pc, #124]	@ (8002e5c <MX_TIM5_Init+0xc0>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002de4:	481d      	ldr	r0, [pc, #116]	@ (8002e5c <MX_TIM5_Init+0xc0>)
 8002de6:	f002 feab 	bl	8005b40 <HAL_TIM_PWM_Init>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002df0:	f000 f990 	bl	8003114 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002df4:	2300      	movs	r3, #0
 8002df6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002dfc:	f107 0320 	add.w	r3, r7, #32
 8002e00:	4619      	mov	r1, r3
 8002e02:	4816      	ldr	r0, [pc, #88]	@ (8002e5c <MX_TIM5_Init+0xc0>)
 8002e04:	f003 fea0 	bl	8006b48 <HAL_TIMEx_MasterConfigSynchronization>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8002e0e:	f000 f981 	bl	8003114 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e12:	2360      	movs	r3, #96	@ 0x60
 8002e14:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002e16:	2300      	movs	r3, #0
 8002e18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e22:	1d3b      	adds	r3, r7, #4
 8002e24:	2200      	movs	r2, #0
 8002e26:	4619      	mov	r1, r3
 8002e28:	480c      	ldr	r0, [pc, #48]	@ (8002e5c <MX_TIM5_Init+0xc0>)
 8002e2a:	f003 f9c5 	bl	80061b8 <HAL_TIM_PWM_ConfigChannel>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002e34:	f000 f96e 	bl	8003114 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e38:	1d3b      	adds	r3, r7, #4
 8002e3a:	2204      	movs	r2, #4
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4807      	ldr	r0, [pc, #28]	@ (8002e5c <MX_TIM5_Init+0xc0>)
 8002e40:	f003 f9ba 	bl	80061b8 <HAL_TIM_PWM_ConfigChannel>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002e4a:	f000 f963 	bl	8003114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002e4e:	4803      	ldr	r0, [pc, #12]	@ (8002e5c <MX_TIM5_Init+0xc0>)
 8002e50:	f000 fbfc 	bl	800364c <HAL_TIM_MspPostInit>

}
 8002e54:	bf00      	nop
 8002e56:	3728      	adds	r7, #40	@ 0x28
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	2000489c 	.word	0x2000489c
 8002e60:	40000c00 	.word	0x40000c00

08002e64 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b088      	sub	sp, #32
 8002e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e6a:	1d3b      	adds	r3, r7, #4
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	605a      	str	r2, [r3, #4]
 8002e72:	609a      	str	r2, [r3, #8]
 8002e74:	60da      	str	r2, [r3, #12]
 8002e76:	611a      	str	r2, [r3, #16]
 8002e78:	615a      	str	r2, [r3, #20]
 8002e7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002e7c:	4b1f      	ldr	r3, [pc, #124]	@ (8002efc <MX_TIM12_Init+0x98>)
 8002e7e:	4a20      	ldr	r2, [pc, #128]	@ (8002f00 <MX_TIM12_Init+0x9c>)
 8002e80:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 90-1;
 8002e82:	4b1e      	ldr	r3, [pc, #120]	@ (8002efc <MX_TIM12_Init+0x98>)
 8002e84:	2259      	movs	r2, #89	@ 0x59
 8002e86:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e88:	4b1c      	ldr	r3, [pc, #112]	@ (8002efc <MX_TIM12_Init+0x98>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 8002e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8002efc <MX_TIM12_Init+0x98>)
 8002e90:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002e94:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e96:	4b19      	ldr	r3, [pc, #100]	@ (8002efc <MX_TIM12_Init+0x98>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e9c:	4b17      	ldr	r3, [pc, #92]	@ (8002efc <MX_TIM12_Init+0x98>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002ea2:	4816      	ldr	r0, [pc, #88]	@ (8002efc <MX_TIM12_Init+0x98>)
 8002ea4:	f002 fe4c 	bl	8005b40 <HAL_TIM_PWM_Init>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8002eae:	f000 f931 	bl	8003114 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002eb2:	2360      	movs	r3, #96	@ 0x60
 8002eb4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ec2:	1d3b      	adds	r3, r7, #4
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	480c      	ldr	r0, [pc, #48]	@ (8002efc <MX_TIM12_Init+0x98>)
 8002eca:	f003 f975 	bl	80061b8 <HAL_TIM_PWM_ConfigChannel>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002ed4:	f000 f91e 	bl	8003114 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ed8:	1d3b      	adds	r3, r7, #4
 8002eda:	2204      	movs	r2, #4
 8002edc:	4619      	mov	r1, r3
 8002ede:	4807      	ldr	r0, [pc, #28]	@ (8002efc <MX_TIM12_Init+0x98>)
 8002ee0:	f003 f96a 	bl	80061b8 <HAL_TIM_PWM_ConfigChannel>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8002eea:	f000 f913 	bl	8003114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002eee:	4803      	ldr	r0, [pc, #12]	@ (8002efc <MX_TIM12_Init+0x98>)
 8002ef0:	f000 fbac 	bl	800364c <HAL_TIM_MspPostInit>

}
 8002ef4:	bf00      	nop
 8002ef6:	3720      	adds	r7, #32
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	200048e4 	.word	0x200048e4
 8002f00:	40001800 	.word	0x40001800

08002f04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f08:	4b11      	ldr	r3, [pc, #68]	@ (8002f50 <MX_USART2_UART_Init+0x4c>)
 8002f0a:	4a12      	ldr	r2, [pc, #72]	@ (8002f54 <MX_USART2_UART_Init+0x50>)
 8002f0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f0e:	4b10      	ldr	r3, [pc, #64]	@ (8002f50 <MX_USART2_UART_Init+0x4c>)
 8002f10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f16:	4b0e      	ldr	r3, [pc, #56]	@ (8002f50 <MX_USART2_UART_Init+0x4c>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f50 <MX_USART2_UART_Init+0x4c>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f22:	4b0b      	ldr	r3, [pc, #44]	@ (8002f50 <MX_USART2_UART_Init+0x4c>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f28:	4b09      	ldr	r3, [pc, #36]	@ (8002f50 <MX_USART2_UART_Init+0x4c>)
 8002f2a:	220c      	movs	r2, #12
 8002f2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f2e:	4b08      	ldr	r3, [pc, #32]	@ (8002f50 <MX_USART2_UART_Init+0x4c>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f34:	4b06      	ldr	r3, [pc, #24]	@ (8002f50 <MX_USART2_UART_Init+0x4c>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f3a:	4805      	ldr	r0, [pc, #20]	@ (8002f50 <MX_USART2_UART_Init+0x4c>)
 8002f3c:	f003 fe94 	bl	8006c68 <HAL_UART_Init>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002f46:	f000 f8e5 	bl	8003114 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f4a:	bf00      	nop
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	2000492c 	.word	0x2000492c
 8002f54:	40004400 	.word	0x40004400

08002f58 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002f5c:	4b10      	ldr	r3, [pc, #64]	@ (8002fa0 <MX_USART3_UART_Init+0x48>)
 8002f5e:	4a11      	ldr	r2, [pc, #68]	@ (8002fa4 <MX_USART3_UART_Init+0x4c>)
 8002f60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 500000;
 8002f62:	4b0f      	ldr	r3, [pc, #60]	@ (8002fa0 <MX_USART3_UART_Init+0x48>)
 8002f64:	4a10      	ldr	r2, [pc, #64]	@ (8002fa8 <MX_USART3_UART_Init+0x50>)
 8002f66:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f68:	4b0d      	ldr	r3, [pc, #52]	@ (8002fa0 <MX_USART3_UART_Init+0x48>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8002fa0 <MX_USART3_UART_Init+0x48>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002f74:	4b0a      	ldr	r3, [pc, #40]	@ (8002fa0 <MX_USART3_UART_Init+0x48>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f7a:	4b09      	ldr	r3, [pc, #36]	@ (8002fa0 <MX_USART3_UART_Init+0x48>)
 8002f7c:	220c      	movs	r2, #12
 8002f7e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f80:	4b07      	ldr	r3, [pc, #28]	@ (8002fa0 <MX_USART3_UART_Init+0x48>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f86:	4b06      	ldr	r3, [pc, #24]	@ (8002fa0 <MX_USART3_UART_Init+0x48>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f8c:	4804      	ldr	r0, [pc, #16]	@ (8002fa0 <MX_USART3_UART_Init+0x48>)
 8002f8e:	f003 fe6b 	bl	8006c68 <HAL_UART_Init>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8002f98:	f000 f8bc 	bl	8003114 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002f9c:	bf00      	nop
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	20004974 	.word	0x20004974
 8002fa4:	40004800 	.word	0x40004800
 8002fa8:	0007a120 	.word	0x0007a120

08002fac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	607b      	str	r3, [r7, #4]
 8002fb6:	4b10      	ldr	r3, [pc, #64]	@ (8002ff8 <MX_DMA_Init+0x4c>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fba:	4a0f      	ldr	r2, [pc, #60]	@ (8002ff8 <MX_DMA_Init+0x4c>)
 8002fbc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ff8 <MX_DMA_Init+0x4c>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fca:	607b      	str	r3, [r7, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002fce:	2200      	movs	r2, #0
 8002fd0:	2105      	movs	r1, #5
 8002fd2:	2010      	movs	r0, #16
 8002fd4:	f000 ffda 	bl	8003f8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002fd8:	2010      	movs	r0, #16
 8002fda:	f000 fff3 	bl	8003fc4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8002fde:	2200      	movs	r2, #0
 8002fe0:	2105      	movs	r1, #5
 8002fe2:	2011      	movs	r0, #17
 8002fe4:	f000 ffd2 	bl	8003f8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002fe8:	2011      	movs	r0, #17
 8002fea:	f000 ffeb 	bl	8003fc4 <HAL_NVIC_EnableIRQ>

}
 8002fee:	bf00      	nop
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	40023800 	.word	0x40023800

08002ffc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b08a      	sub	sp, #40	@ 0x28
 8003000:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003002:	f107 0314 	add.w	r3, r7, #20
 8003006:	2200      	movs	r2, #0
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	605a      	str	r2, [r3, #4]
 800300c:	609a      	str	r2, [r3, #8]
 800300e:	60da      	str	r2, [r3, #12]
 8003010:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003012:	2300      	movs	r3, #0
 8003014:	613b      	str	r3, [r7, #16]
 8003016:	4b3b      	ldr	r3, [pc, #236]	@ (8003104 <MX_GPIO_Init+0x108>)
 8003018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301a:	4a3a      	ldr	r2, [pc, #232]	@ (8003104 <MX_GPIO_Init+0x108>)
 800301c:	f043 0301 	orr.w	r3, r3, #1
 8003020:	6313      	str	r3, [r2, #48]	@ 0x30
 8003022:	4b38      	ldr	r3, [pc, #224]	@ (8003104 <MX_GPIO_Init+0x108>)
 8003024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	613b      	str	r3, [r7, #16]
 800302c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800302e:	2300      	movs	r3, #0
 8003030:	60fb      	str	r3, [r7, #12]
 8003032:	4b34      	ldr	r3, [pc, #208]	@ (8003104 <MX_GPIO_Init+0x108>)
 8003034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003036:	4a33      	ldr	r2, [pc, #204]	@ (8003104 <MX_GPIO_Init+0x108>)
 8003038:	f043 0304 	orr.w	r3, r3, #4
 800303c:	6313      	str	r3, [r2, #48]	@ 0x30
 800303e:	4b31      	ldr	r3, [pc, #196]	@ (8003104 <MX_GPIO_Init+0x108>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003042:	f003 0304 	and.w	r3, r3, #4
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800304a:	2300      	movs	r3, #0
 800304c:	60bb      	str	r3, [r7, #8]
 800304e:	4b2d      	ldr	r3, [pc, #180]	@ (8003104 <MX_GPIO_Init+0x108>)
 8003050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003052:	4a2c      	ldr	r2, [pc, #176]	@ (8003104 <MX_GPIO_Init+0x108>)
 8003054:	f043 0302 	orr.w	r3, r3, #2
 8003058:	6313      	str	r3, [r2, #48]	@ 0x30
 800305a:	4b2a      	ldr	r3, [pc, #168]	@ (8003104 <MX_GPIO_Init+0x108>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	60bb      	str	r3, [r7, #8]
 8003064:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003066:	2300      	movs	r3, #0
 8003068:	607b      	str	r3, [r7, #4]
 800306a:	4b26      	ldr	r3, [pc, #152]	@ (8003104 <MX_GPIO_Init+0x108>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306e:	4a25      	ldr	r2, [pc, #148]	@ (8003104 <MX_GPIO_Init+0x108>)
 8003070:	f043 0308 	orr.w	r3, r3, #8
 8003074:	6313      	str	r3, [r2, #48]	@ 0x30
 8003076:	4b23      	ldr	r3, [pc, #140]	@ (8003104 <MX_GPIO_Init+0x108>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307a:	f003 0308 	and.w	r3, r3, #8
 800307e:	607b      	str	r3, [r7, #4]
 8003080:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8003082:	2200      	movs	r2, #0
 8003084:	2110      	movs	r1, #16
 8003086:	4820      	ldr	r0, [pc, #128]	@ (8003108 <MX_GPIO_Init+0x10c>)
 8003088:	f001 fd40 	bl	8004b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800308c:	2200      	movs	r2, #0
 800308e:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8003092:	481e      	ldr	r0, [pc, #120]	@ (800310c <MX_GPIO_Init+0x110>)
 8003094:	f001 fd3a 	bl	8004b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003098:	2310      	movs	r3, #16
 800309a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800309c:	2301      	movs	r3, #1
 800309e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a0:	2300      	movs	r3, #0
 80030a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a4:	2300      	movs	r3, #0
 80030a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030a8:	f107 0314 	add.w	r3, r7, #20
 80030ac:	4619      	mov	r1, r3
 80030ae:	4816      	ldr	r0, [pc, #88]	@ (8003108 <MX_GPIO_Init+0x10c>)
 80030b0:	f001 fb98 	bl	80047e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80030b4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80030b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030ba:	2301      	movs	r3, #1
 80030bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030be:	2300      	movs	r3, #0
 80030c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c2:	2300      	movs	r3, #0
 80030c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030c6:	f107 0314 	add.w	r3, r7, #20
 80030ca:	4619      	mov	r1, r3
 80030cc:	480f      	ldr	r0, [pc, #60]	@ (800310c <MX_GPIO_Init+0x110>)
 80030ce:	f001 fb89 	bl	80047e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80030d2:	2304      	movs	r3, #4
 80030d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80030d6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80030da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030dc:	2301      	movs	r3, #1
 80030de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030e0:	f107 0314 	add.w	r3, r7, #20
 80030e4:	4619      	mov	r1, r3
 80030e6:	480a      	ldr	r0, [pc, #40]	@ (8003110 <MX_GPIO_Init+0x114>)
 80030e8:	f001 fb7c 	bl	80047e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80030ec:	2200      	movs	r2, #0
 80030ee:	2105      	movs	r1, #5
 80030f0:	2008      	movs	r0, #8
 80030f2:	f000 ff4b 	bl	8003f8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80030f6:	2008      	movs	r0, #8
 80030f8:	f000 ff64 	bl	8003fc4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80030fc:	bf00      	nop
 80030fe:	3728      	adds	r7, #40	@ 0x28
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40023800 	.word	0x40023800
 8003108:	40020800 	.word	0x40020800
 800310c:	40020400 	.word	0x40020400
 8003110:	40020c00 	.word	0x40020c00

08003114 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003118:	b672      	cpsid	i
}
 800311a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800311c:	bf00      	nop
 800311e:	e7fd      	b.n	800311c <Error_Handler+0x8>

08003120 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800312a:	4b0c      	ldr	r3, [pc, #48]	@ (800315c <microros_allocate+0x3c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	461a      	mov	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4413      	add	r3, r2
 8003134:	461a      	mov	r2, r3
 8003136:	4b09      	ldr	r3, [pc, #36]	@ (800315c <microros_allocate+0x3c>)
 8003138:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800313a:	4b09      	ldr	r3, [pc, #36]	@ (8003160 <microros_allocate+0x40>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	461a      	mov	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4413      	add	r3, r2
 8003144:	461a      	mov	r2, r3
 8003146:	4b06      	ldr	r3, [pc, #24]	@ (8003160 <microros_allocate+0x40>)
 8003148:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7ff f93a 	bl	80023c4 <pvPortMallocMicroROS>
 8003150:	4603      	mov	r3, r0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	20007a08 	.word	0x20007a08
 8003160:	20007a0c 	.word	0x20007a0c

08003164 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00c      	beq.n	800318e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7ff fa49 	bl	800260c <getBlockSize>
 800317a:	4603      	mov	r3, r0
 800317c:	4a06      	ldr	r2, [pc, #24]	@ (8003198 <microros_deallocate+0x34>)
 800317e:	6812      	ldr	r2, [r2, #0]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	461a      	mov	r2, r3
 8003184:	4b04      	ldr	r3, [pc, #16]	@ (8003198 <microros_deallocate+0x34>)
 8003186:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f7ff f9e3 	bl	8002554 <vPortFreeMicroROS>
  }
}
 800318e:	bf00      	nop
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	20007a0c 	.word	0x20007a0c

0800319c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80031a8:	4b15      	ldr	r3, [pc, #84]	@ (8003200 <microros_reallocate+0x64>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	461a      	mov	r2, r3
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	4413      	add	r3, r2
 80031b2:	461a      	mov	r2, r3
 80031b4:	4b12      	ldr	r3, [pc, #72]	@ (8003200 <microros_reallocate+0x64>)
 80031b6:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80031b8:	4b12      	ldr	r3, [pc, #72]	@ (8003204 <microros_reallocate+0x68>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	461a      	mov	r2, r3
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	4413      	add	r3, r2
 80031c2:	461a      	mov	r2, r3
 80031c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003204 <microros_reallocate+0x68>)
 80031c6:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d104      	bne.n	80031d8 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80031ce:	68b8      	ldr	r0, [r7, #8]
 80031d0:	f7ff f8f8 	bl	80023c4 <pvPortMallocMicroROS>
 80031d4:	4603      	mov	r3, r0
 80031d6:	e00e      	b.n	80031f6 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f7ff fa17 	bl	800260c <getBlockSize>
 80031de:	4603      	mov	r3, r0
 80031e0:	4a08      	ldr	r2, [pc, #32]	@ (8003204 <microros_reallocate+0x68>)
 80031e2:	6812      	ldr	r2, [r2, #0]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	461a      	mov	r2, r3
 80031e8:	4b06      	ldr	r3, [pc, #24]	@ (8003204 <microros_reallocate+0x68>)
 80031ea:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80031ec:	68b9      	ldr	r1, [r7, #8]
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f7ff fa2a 	bl	8002648 <pvPortReallocMicroROS>
 80031f4:	4603      	mov	r3, r0
  }
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	20007a08 	.word	0x20007a08
 8003204:	20007a0c 	.word	0x20007a0c

08003208 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	68ba      	ldr	r2, [r7, #8]
 8003218:	fb02 f303 	mul.w	r3, r2, r3
 800321c:	4a0c      	ldr	r2, [pc, #48]	@ (8003250 <microros_zero_allocate+0x48>)
 800321e:	6812      	ldr	r2, [r2, #0]
 8003220:	4413      	add	r3, r2
 8003222:	461a      	mov	r2, r3
 8003224:	4b0a      	ldr	r3, [pc, #40]	@ (8003250 <microros_zero_allocate+0x48>)
 8003226:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	fb02 f303 	mul.w	r3, r2, r3
 8003230:	4a08      	ldr	r2, [pc, #32]	@ (8003254 <microros_zero_allocate+0x4c>)
 8003232:	6812      	ldr	r2, [r2, #0]
 8003234:	4413      	add	r3, r2
 8003236:	461a      	mov	r2, r3
 8003238:	4b06      	ldr	r3, [pc, #24]	@ (8003254 <microros_zero_allocate+0x4c>)
 800323a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 800323c:	68b9      	ldr	r1, [r7, #8]
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f7ff fa2f 	bl	80026a2 <pvPortCallocMicroROS>
 8003244:	4603      	mov	r3, r0
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	20007a08 	.word	0x20007a08
 8003254:	20007a0c 	.word	0x20007a0c

08003258 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8003258:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800325c:	b086      	sub	sp, #24
 800325e:	af00      	add	r7, sp, #0
 8003260:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003264:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8003266:	2300      	movs	r3, #0
 8003268:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800326a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800326e:	a320      	add	r3, pc, #128	@ (adr r3, 80032f0 <UTILS_NanosecondsToTimespec+0x98>)
 8003270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003274:	f7fd fc52 	bl	8000b1c <__aeabi_ldivmod>
 8003278:	4602      	mov	r2, r0
 800327a:	460b      	mov	r3, r1
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8003282:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003286:	a31a      	add	r3, pc, #104	@ (adr r3, 80032f0 <UTILS_NanosecondsToTimespec+0x98>)
 8003288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328c:	f7fd fc46 	bl	8000b1c <__aeabi_ldivmod>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2b00      	cmp	r3, #0
 800329a:	da20      	bge.n	80032de <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	4a11      	ldr	r2, [pc, #68]	@ (80032e8 <UTILS_NanosecondsToTimespec+0x90>)
 80032a2:	fb82 1203 	smull	r1, r2, r2, r3
 80032a6:	1712      	asrs	r2, r2, #28
 80032a8:	17db      	asrs	r3, r3, #31
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	3301      	adds	r3, #1
 80032ae:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b6:	6979      	ldr	r1, [r7, #20]
 80032b8:	17c8      	asrs	r0, r1, #31
 80032ba:	460c      	mov	r4, r1
 80032bc:	4605      	mov	r5, r0
 80032be:	ebb2 0804 	subs.w	r8, r2, r4
 80032c2:	eb63 0905 	sbc.w	r9, r3, r5
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	4906      	ldr	r1, [pc, #24]	@ (80032ec <UTILS_NanosecondsToTimespec+0x94>)
 80032d4:	fb01 f303 	mul.w	r3, r1, r3
 80032d8:	441a      	add	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	609a      	str	r2, [r3, #8]
    }
}
 80032de:	bf00      	nop
 80032e0:	3718      	adds	r7, #24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80032e8:	44b82fa1 	.word	0x44b82fa1
 80032ec:	3b9aca00 	.word	0x3b9aca00
 80032f0:	3b9aca00 	.word	0x3b9aca00
 80032f4:	00000000 	.word	0x00000000

080032f8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80032f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032fc:	b08e      	sub	sp, #56	@ 0x38
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6278      	str	r0, [r7, #36]	@ 0x24
 8003302:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8003304:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003308:	2300      	movs	r3, #0
 800330a:	6013      	str	r3, [r2, #0]
 800330c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800330e:	f04f 0200 	mov.w	r2, #0
 8003312:	f04f 0300 	mov.w	r3, #0
 8003316:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800331a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800331e:	4618      	mov	r0, r3
 8003320:	f006 fc9c 	bl	8009c5c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8003324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003326:	17da      	asrs	r2, r3, #31
 8003328:	61bb      	str	r3, [r7, #24]
 800332a:	61fa      	str	r2, [r7, #28]
 800332c:	f04f 0200 	mov.w	r2, #0
 8003330:	f04f 0300 	mov.w	r3, #0
 8003334:	69b9      	ldr	r1, [r7, #24]
 8003336:	000b      	movs	r3, r1
 8003338:	2200      	movs	r2, #0
 800333a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800333e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003340:	2200      	movs	r2, #0
 8003342:	461c      	mov	r4, r3
 8003344:	4615      	mov	r5, r2
 8003346:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800334a:	1911      	adds	r1, r2, r4
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	416b      	adcs	r3, r5
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003356:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800335a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800335e:	4602      	mov	r2, r0
 8003360:	460b      	mov	r3, r1
 8003362:	f04f 0400 	mov.w	r4, #0
 8003366:	f04f 0500 	mov.w	r5, #0
 800336a:	015d      	lsls	r5, r3, #5
 800336c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8003370:	0154      	lsls	r4, r2, #5
 8003372:	4622      	mov	r2, r4
 8003374:	462b      	mov	r3, r5
 8003376:	ebb2 0800 	subs.w	r8, r2, r0
 800337a:	eb63 0901 	sbc.w	r9, r3, r1
 800337e:	f04f 0200 	mov.w	r2, #0
 8003382:	f04f 0300 	mov.w	r3, #0
 8003386:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800338a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800338e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8003392:	4690      	mov	r8, r2
 8003394:	4699      	mov	r9, r3
 8003396:	eb18 0a00 	adds.w	sl, r8, r0
 800339a:	eb49 0b01 	adc.w	fp, r9, r1
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	f04f 0300 	mov.w	r3, #0
 80033a6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033aa:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033ae:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033b2:	ebb2 040a 	subs.w	r4, r2, sl
 80033b6:	603c      	str	r4, [r7, #0]
 80033b8:	eb63 030b 	sbc.w	r3, r3, fp
 80033bc:	607b      	str	r3, [r7, #4]
 80033be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033c2:	4623      	mov	r3, r4
 80033c4:	181b      	adds	r3, r3, r0
 80033c6:	613b      	str	r3, [r7, #16]
 80033c8:	462b      	mov	r3, r5
 80033ca:	eb41 0303 	adc.w	r3, r1, r3
 80033ce:	617b      	str	r3, [r7, #20]
 80033d0:	6a3a      	ldr	r2, [r7, #32]
 80033d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033d6:	f7ff ff3f 	bl	8003258 <UTILS_NanosecondsToTimespec>

    return 0;
 80033da:	2300      	movs	r3, #0
 80033dc:	4618      	mov	r0, r3
 80033de:	3738      	adds	r7, #56	@ 0x38
 80033e0:	46bd      	mov	sp, r7
 80033e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080033e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ee:	2300      	movs	r3, #0
 80033f0:	607b      	str	r3, [r7, #4]
 80033f2:	4b12      	ldr	r3, [pc, #72]	@ (800343c <HAL_MspInit+0x54>)
 80033f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033f6:	4a11      	ldr	r2, [pc, #68]	@ (800343c <HAL_MspInit+0x54>)
 80033f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80033fe:	4b0f      	ldr	r3, [pc, #60]	@ (800343c <HAL_MspInit+0x54>)
 8003400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003402:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003406:	607b      	str	r3, [r7, #4]
 8003408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800340a:	2300      	movs	r3, #0
 800340c:	603b      	str	r3, [r7, #0]
 800340e:	4b0b      	ldr	r3, [pc, #44]	@ (800343c <HAL_MspInit+0x54>)
 8003410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003412:	4a0a      	ldr	r2, [pc, #40]	@ (800343c <HAL_MspInit+0x54>)
 8003414:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003418:	6413      	str	r3, [r2, #64]	@ 0x40
 800341a:	4b08      	ldr	r3, [pc, #32]	@ (800343c <HAL_MspInit+0x54>)
 800341c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003422:	603b      	str	r3, [r7, #0]
 8003424:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003426:	2200      	movs	r2, #0
 8003428:	210f      	movs	r1, #15
 800342a:	f06f 0001 	mvn.w	r0, #1
 800342e:	f000 fdad 	bl	8003f8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003432:	bf00      	nop
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40023800 	.word	0x40023800

08003440 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b08a      	sub	sp, #40	@ 0x28
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003448:	f107 0314 	add.w	r3, r7, #20
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	605a      	str	r2, [r3, #4]
 8003452:	609a      	str	r2, [r3, #8]
 8003454:	60da      	str	r2, [r3, #12]
 8003456:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a19      	ldr	r2, [pc, #100]	@ (80034c4 <HAL_I2C_MspInit+0x84>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d12b      	bne.n	80034ba <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003462:	2300      	movs	r3, #0
 8003464:	613b      	str	r3, [r7, #16]
 8003466:	4b18      	ldr	r3, [pc, #96]	@ (80034c8 <HAL_I2C_MspInit+0x88>)
 8003468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800346a:	4a17      	ldr	r2, [pc, #92]	@ (80034c8 <HAL_I2C_MspInit+0x88>)
 800346c:	f043 0302 	orr.w	r3, r3, #2
 8003470:	6313      	str	r3, [r2, #48]	@ 0x30
 8003472:	4b15      	ldr	r3, [pc, #84]	@ (80034c8 <HAL_I2C_MspInit+0x88>)
 8003474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	613b      	str	r3, [r7, #16]
 800347c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800347e:	23c0      	movs	r3, #192	@ 0xc0
 8003480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003482:	2312      	movs	r3, #18
 8003484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003486:	2300      	movs	r3, #0
 8003488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800348a:	2303      	movs	r3, #3
 800348c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800348e:	2304      	movs	r3, #4
 8003490:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003492:	f107 0314 	add.w	r3, r7, #20
 8003496:	4619      	mov	r1, r3
 8003498:	480c      	ldr	r0, [pc, #48]	@ (80034cc <HAL_I2C_MspInit+0x8c>)
 800349a:	f001 f9a3 	bl	80047e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800349e:	2300      	movs	r3, #0
 80034a0:	60fb      	str	r3, [r7, #12]
 80034a2:	4b09      	ldr	r3, [pc, #36]	@ (80034c8 <HAL_I2C_MspInit+0x88>)
 80034a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a6:	4a08      	ldr	r2, [pc, #32]	@ (80034c8 <HAL_I2C_MspInit+0x88>)
 80034a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80034ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80034ae:	4b06      	ldr	r3, [pc, #24]	@ (80034c8 <HAL_I2C_MspInit+0x88>)
 80034b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80034ba:	bf00      	nop
 80034bc:	3728      	adds	r7, #40	@ 0x28
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	40005400 	.word	0x40005400
 80034c8:	40023800 	.word	0x40023800
 80034cc:	40020400 	.word	0x40020400

080034d0 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b08a      	sub	sp, #40	@ 0x28
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d8:	f107 0314 	add.w	r3, r7, #20
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	605a      	str	r2, [r3, #4]
 80034e2:	609a      	str	r2, [r3, #8]
 80034e4:	60da      	str	r2, [r3, #12]
 80034e6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a19      	ldr	r2, [pc, #100]	@ (8003554 <HAL_TIM_Encoder_MspInit+0x84>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d12c      	bne.n	800354c <HAL_TIM_Encoder_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80034f2:	2300      	movs	r3, #0
 80034f4:	613b      	str	r3, [r7, #16]
 80034f6:	4b18      	ldr	r3, [pc, #96]	@ (8003558 <HAL_TIM_Encoder_MspInit+0x88>)
 80034f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034fa:	4a17      	ldr	r2, [pc, #92]	@ (8003558 <HAL_TIM_Encoder_MspInit+0x88>)
 80034fc:	f043 0301 	orr.w	r3, r3, #1
 8003500:	6453      	str	r3, [r2, #68]	@ 0x44
 8003502:	4b15      	ldr	r3, [pc, #84]	@ (8003558 <HAL_TIM_Encoder_MspInit+0x88>)
 8003504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	613b      	str	r3, [r7, #16]
 800350c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800350e:	2300      	movs	r3, #0
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	4b11      	ldr	r3, [pc, #68]	@ (8003558 <HAL_TIM_Encoder_MspInit+0x88>)
 8003514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003516:	4a10      	ldr	r2, [pc, #64]	@ (8003558 <HAL_TIM_Encoder_MspInit+0x88>)
 8003518:	f043 0301 	orr.w	r3, r3, #1
 800351c:	6313      	str	r3, [r2, #48]	@ 0x30
 800351e:	4b0e      	ldr	r3, [pc, #56]	@ (8003558 <HAL_TIM_Encoder_MspInit+0x88>)
 8003520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800352a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800352e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003530:	2302      	movs	r3, #2
 8003532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003534:	2300      	movs	r3, #0
 8003536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003538:	2300      	movs	r3, #0
 800353a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800353c:	2301      	movs	r3, #1
 800353e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003540:	f107 0314 	add.w	r3, r7, #20
 8003544:	4619      	mov	r1, r3
 8003546:	4805      	ldr	r0, [pc, #20]	@ (800355c <HAL_TIM_Encoder_MspInit+0x8c>)
 8003548:	f001 f94c 	bl	80047e4 <HAL_GPIO_Init>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800354c:	bf00      	nop
 800354e:	3728      	adds	r7, #40	@ 0x28
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40010000 	.word	0x40010000
 8003558:	40023800 	.word	0x40023800
 800355c:	40020000 	.word	0x40020000

08003560 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003560:	b480      	push	{r7}
 8003562:	b087      	sub	sp, #28
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a1f      	ldr	r2, [pc, #124]	@ (80035ec <HAL_TIM_PWM_MspInit+0x8c>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d10e      	bne.n	8003590 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003572:	2300      	movs	r3, #0
 8003574:	617b      	str	r3, [r7, #20]
 8003576:	4b1e      	ldr	r3, [pc, #120]	@ (80035f0 <HAL_TIM_PWM_MspInit+0x90>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357a:	4a1d      	ldr	r2, [pc, #116]	@ (80035f0 <HAL_TIM_PWM_MspInit+0x90>)
 800357c:	f043 0302 	orr.w	r3, r3, #2
 8003580:	6413      	str	r3, [r2, #64]	@ 0x40
 8003582:	4b1b      	ldr	r3, [pc, #108]	@ (80035f0 <HAL_TIM_PWM_MspInit+0x90>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	617b      	str	r3, [r7, #20]
 800358c:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM12_MspInit 1 */

    /* USER CODE END TIM12_MspInit 1 */
  }

}
 800358e:	e026      	b.n	80035de <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM5)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a17      	ldr	r2, [pc, #92]	@ (80035f4 <HAL_TIM_PWM_MspInit+0x94>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d10e      	bne.n	80035b8 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800359a:	2300      	movs	r3, #0
 800359c:	613b      	str	r3, [r7, #16]
 800359e:	4b14      	ldr	r3, [pc, #80]	@ (80035f0 <HAL_TIM_PWM_MspInit+0x90>)
 80035a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a2:	4a13      	ldr	r2, [pc, #76]	@ (80035f0 <HAL_TIM_PWM_MspInit+0x90>)
 80035a4:	f043 0308 	orr.w	r3, r3, #8
 80035a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80035aa:	4b11      	ldr	r3, [pc, #68]	@ (80035f0 <HAL_TIM_PWM_MspInit+0x90>)
 80035ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	613b      	str	r3, [r7, #16]
 80035b4:	693b      	ldr	r3, [r7, #16]
}
 80035b6:	e012      	b.n	80035de <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM12)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a0e      	ldr	r2, [pc, #56]	@ (80035f8 <HAL_TIM_PWM_MspInit+0x98>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d10d      	bne.n	80035de <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80035c2:	2300      	movs	r3, #0
 80035c4:	60fb      	str	r3, [r7, #12]
 80035c6:	4b0a      	ldr	r3, [pc, #40]	@ (80035f0 <HAL_TIM_PWM_MspInit+0x90>)
 80035c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ca:	4a09      	ldr	r2, [pc, #36]	@ (80035f0 <HAL_TIM_PWM_MspInit+0x90>)
 80035cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80035d2:	4b07      	ldr	r3, [pc, #28]	@ (80035f0 <HAL_TIM_PWM_MspInit+0x90>)
 80035d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	68fb      	ldr	r3, [r7, #12]
}
 80035de:	bf00      	nop
 80035e0:	371c      	adds	r7, #28
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	40000400 	.word	0x40000400
 80035f0:	40023800 	.word	0x40023800
 80035f4:	40000c00 	.word	0x40000c00
 80035f8:	40001800 	.word	0x40001800

080035fc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a0e      	ldr	r2, [pc, #56]	@ (8003644 <HAL_TIM_Base_MspInit+0x48>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d115      	bne.n	800363a <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800360e:	2300      	movs	r3, #0
 8003610:	60fb      	str	r3, [r7, #12]
 8003612:	4b0d      	ldr	r3, [pc, #52]	@ (8003648 <HAL_TIM_Base_MspInit+0x4c>)
 8003614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003616:	4a0c      	ldr	r2, [pc, #48]	@ (8003648 <HAL_TIM_Base_MspInit+0x4c>)
 8003618:	f043 0304 	orr.w	r3, r3, #4
 800361c:	6413      	str	r3, [r2, #64]	@ 0x40
 800361e:	4b0a      	ldr	r3, [pc, #40]	@ (8003648 <HAL_TIM_Base_MspInit+0x4c>)
 8003620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003622:	f003 0304 	and.w	r3, r3, #4
 8003626:	60fb      	str	r3, [r7, #12]
 8003628:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800362a:	2200      	movs	r2, #0
 800362c:	2105      	movs	r1, #5
 800362e:	201e      	movs	r0, #30
 8003630:	f000 fcac 	bl	8003f8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003634:	201e      	movs	r0, #30
 8003636:	f000 fcc5 	bl	8003fc4 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 800363a:	bf00      	nop
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40000800 	.word	0x40000800
 8003648:	40023800 	.word	0x40023800

0800364c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b08a      	sub	sp, #40	@ 0x28
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003654:	f107 0314 	add.w	r3, r7, #20
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	605a      	str	r2, [r3, #4]
 800365e:	609a      	str	r2, [r3, #8]
 8003660:	60da      	str	r2, [r3, #12]
 8003662:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a36      	ldr	r2, [pc, #216]	@ (8003744 <HAL_TIM_MspPostInit+0xf8>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d11e      	bne.n	80036ac <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800366e:	2300      	movs	r3, #0
 8003670:	613b      	str	r3, [r7, #16]
 8003672:	4b35      	ldr	r3, [pc, #212]	@ (8003748 <HAL_TIM_MspPostInit+0xfc>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003676:	4a34      	ldr	r2, [pc, #208]	@ (8003748 <HAL_TIM_MspPostInit+0xfc>)
 8003678:	f043 0302 	orr.w	r3, r3, #2
 800367c:	6313      	str	r3, [r2, #48]	@ 0x30
 800367e:	4b32      	ldr	r3, [pc, #200]	@ (8003748 <HAL_TIM_MspPostInit+0xfc>)
 8003680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	613b      	str	r3, [r7, #16]
 8003688:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800368a:	2303      	movs	r3, #3
 800368c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368e:	2302      	movs	r3, #2
 8003690:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003692:	2300      	movs	r3, #0
 8003694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003696:	2300      	movs	r3, #0
 8003698:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800369a:	2302      	movs	r3, #2
 800369c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800369e:	f107 0314 	add.w	r3, r7, #20
 80036a2:	4619      	mov	r1, r3
 80036a4:	4829      	ldr	r0, [pc, #164]	@ (800374c <HAL_TIM_MspPostInit+0x100>)
 80036a6:	f001 f89d 	bl	80047e4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM12_MspPostInit 1 */

    /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80036aa:	e047      	b.n	800373c <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM5)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a27      	ldr	r2, [pc, #156]	@ (8003750 <HAL_TIM_MspPostInit+0x104>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d11e      	bne.n	80036f4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036b6:	2300      	movs	r3, #0
 80036b8:	60fb      	str	r3, [r7, #12]
 80036ba:	4b23      	ldr	r3, [pc, #140]	@ (8003748 <HAL_TIM_MspPostInit+0xfc>)
 80036bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036be:	4a22      	ldr	r2, [pc, #136]	@ (8003748 <HAL_TIM_MspPostInit+0xfc>)
 80036c0:	f043 0301 	orr.w	r3, r3, #1
 80036c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80036c6:	4b20      	ldr	r3, [pc, #128]	@ (8003748 <HAL_TIM_MspPostInit+0xfc>)
 80036c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	60fb      	str	r3, [r7, #12]
 80036d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80036d2:	2303      	movs	r3, #3
 80036d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d6:	2302      	movs	r3, #2
 80036d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036da:	2300      	movs	r3, #0
 80036dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036de:	2300      	movs	r3, #0
 80036e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80036e2:	2302      	movs	r3, #2
 80036e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036e6:	f107 0314 	add.w	r3, r7, #20
 80036ea:	4619      	mov	r1, r3
 80036ec:	4819      	ldr	r0, [pc, #100]	@ (8003754 <HAL_TIM_MspPostInit+0x108>)
 80036ee:	f001 f879 	bl	80047e4 <HAL_GPIO_Init>
}
 80036f2:	e023      	b.n	800373c <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM12)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a17      	ldr	r2, [pc, #92]	@ (8003758 <HAL_TIM_MspPostInit+0x10c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d11e      	bne.n	800373c <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036fe:	2300      	movs	r3, #0
 8003700:	60bb      	str	r3, [r7, #8]
 8003702:	4b11      	ldr	r3, [pc, #68]	@ (8003748 <HAL_TIM_MspPostInit+0xfc>)
 8003704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003706:	4a10      	ldr	r2, [pc, #64]	@ (8003748 <HAL_TIM_MspPostInit+0xfc>)
 8003708:	f043 0302 	orr.w	r3, r3, #2
 800370c:	6313      	str	r3, [r2, #48]	@ 0x30
 800370e:	4b0e      	ldr	r3, [pc, #56]	@ (8003748 <HAL_TIM_MspPostInit+0xfc>)
 8003710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	60bb      	str	r3, [r7, #8]
 8003718:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800371a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800371e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003720:	2302      	movs	r3, #2
 8003722:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003724:	2300      	movs	r3, #0
 8003726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003728:	2300      	movs	r3, #0
 800372a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800372c:	2309      	movs	r3, #9
 800372e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003730:	f107 0314 	add.w	r3, r7, #20
 8003734:	4619      	mov	r1, r3
 8003736:	4805      	ldr	r0, [pc, #20]	@ (800374c <HAL_TIM_MspPostInit+0x100>)
 8003738:	f001 f854 	bl	80047e4 <HAL_GPIO_Init>
}
 800373c:	bf00      	nop
 800373e:	3728      	adds	r7, #40	@ 0x28
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40000400 	.word	0x40000400
 8003748:	40023800 	.word	0x40023800
 800374c:	40020400 	.word	0x40020400
 8003750:	40000c00 	.word	0x40000c00
 8003754:	40020000 	.word	0x40020000
 8003758:	40001800 	.word	0x40001800

0800375c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b08c      	sub	sp, #48	@ 0x30
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003764:	f107 031c 	add.w	r3, r7, #28
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	605a      	str	r2, [r3, #4]
 800376e:	609a      	str	r2, [r3, #8]
 8003770:	60da      	str	r2, [r3, #12]
 8003772:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a75      	ldr	r2, [pc, #468]	@ (8003950 <HAL_UART_MspInit+0x1f4>)
 800377a:	4293      	cmp	r3, r2
 800377c:	f040 8094 	bne.w	80038a8 <HAL_UART_MspInit+0x14c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003780:	2300      	movs	r3, #0
 8003782:	61bb      	str	r3, [r7, #24]
 8003784:	4b73      	ldr	r3, [pc, #460]	@ (8003954 <HAL_UART_MspInit+0x1f8>)
 8003786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003788:	4a72      	ldr	r2, [pc, #456]	@ (8003954 <HAL_UART_MspInit+0x1f8>)
 800378a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800378e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003790:	4b70      	ldr	r3, [pc, #448]	@ (8003954 <HAL_UART_MspInit+0x1f8>)
 8003792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003794:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003798:	61bb      	str	r3, [r7, #24]
 800379a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800379c:	2300      	movs	r3, #0
 800379e:	617b      	str	r3, [r7, #20]
 80037a0:	4b6c      	ldr	r3, [pc, #432]	@ (8003954 <HAL_UART_MspInit+0x1f8>)
 80037a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a4:	4a6b      	ldr	r2, [pc, #428]	@ (8003954 <HAL_UART_MspInit+0x1f8>)
 80037a6:	f043 0301 	orr.w	r3, r3, #1
 80037aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80037ac:	4b69      	ldr	r3, [pc, #420]	@ (8003954 <HAL_UART_MspInit+0x1f8>)
 80037ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	617b      	str	r3, [r7, #20]
 80037b6:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80037b8:	230c      	movs	r3, #12
 80037ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037bc:	2302      	movs	r3, #2
 80037be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c0:	2300      	movs	r3, #0
 80037c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037c4:	2303      	movs	r3, #3
 80037c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80037c8:	2307      	movs	r3, #7
 80037ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037cc:	f107 031c 	add.w	r3, r7, #28
 80037d0:	4619      	mov	r1, r3
 80037d2:	4861      	ldr	r0, [pc, #388]	@ (8003958 <HAL_UART_MspInit+0x1fc>)
 80037d4:	f001 f806 	bl	80047e4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80037d8:	4b60      	ldr	r3, [pc, #384]	@ (800395c <HAL_UART_MspInit+0x200>)
 80037da:	4a61      	ldr	r2, [pc, #388]	@ (8003960 <HAL_UART_MspInit+0x204>)
 80037dc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80037de:	4b5f      	ldr	r3, [pc, #380]	@ (800395c <HAL_UART_MspInit+0x200>)
 80037e0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80037e4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037e6:	4b5d      	ldr	r3, [pc, #372]	@ (800395c <HAL_UART_MspInit+0x200>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037ec:	4b5b      	ldr	r3, [pc, #364]	@ (800395c <HAL_UART_MspInit+0x200>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037f2:	4b5a      	ldr	r3, [pc, #360]	@ (800395c <HAL_UART_MspInit+0x200>)
 80037f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037f8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037fa:	4b58      	ldr	r3, [pc, #352]	@ (800395c <HAL_UART_MspInit+0x200>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003800:	4b56      	ldr	r3, [pc, #344]	@ (800395c <HAL_UART_MspInit+0x200>)
 8003802:	2200      	movs	r2, #0
 8003804:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003806:	4b55      	ldr	r3, [pc, #340]	@ (800395c <HAL_UART_MspInit+0x200>)
 8003808:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800380c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800380e:	4b53      	ldr	r3, [pc, #332]	@ (800395c <HAL_UART_MspInit+0x200>)
 8003810:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003814:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003816:	4b51      	ldr	r3, [pc, #324]	@ (800395c <HAL_UART_MspInit+0x200>)
 8003818:	2200      	movs	r2, #0
 800381a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800381c:	484f      	ldr	r0, [pc, #316]	@ (800395c <HAL_UART_MspInit+0x200>)
 800381e:	f000 fbdf 	bl	8003fe0 <HAL_DMA_Init>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8003828:	f7ff fc74 	bl	8003114 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a4b      	ldr	r2, [pc, #300]	@ (800395c <HAL_UART_MspInit+0x200>)
 8003830:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003832:	4a4a      	ldr	r2, [pc, #296]	@ (800395c <HAL_UART_MspInit+0x200>)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003838:	4b4a      	ldr	r3, [pc, #296]	@ (8003964 <HAL_UART_MspInit+0x208>)
 800383a:	4a4b      	ldr	r2, [pc, #300]	@ (8003968 <HAL_UART_MspInit+0x20c>)
 800383c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800383e:	4b49      	ldr	r3, [pc, #292]	@ (8003964 <HAL_UART_MspInit+0x208>)
 8003840:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003844:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003846:	4b47      	ldr	r3, [pc, #284]	@ (8003964 <HAL_UART_MspInit+0x208>)
 8003848:	2240      	movs	r2, #64	@ 0x40
 800384a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800384c:	4b45      	ldr	r3, [pc, #276]	@ (8003964 <HAL_UART_MspInit+0x208>)
 800384e:	2200      	movs	r2, #0
 8003850:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003852:	4b44      	ldr	r3, [pc, #272]	@ (8003964 <HAL_UART_MspInit+0x208>)
 8003854:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003858:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800385a:	4b42      	ldr	r3, [pc, #264]	@ (8003964 <HAL_UART_MspInit+0x208>)
 800385c:	2200      	movs	r2, #0
 800385e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003860:	4b40      	ldr	r3, [pc, #256]	@ (8003964 <HAL_UART_MspInit+0x208>)
 8003862:	2200      	movs	r2, #0
 8003864:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003866:	4b3f      	ldr	r3, [pc, #252]	@ (8003964 <HAL_UART_MspInit+0x208>)
 8003868:	2200      	movs	r2, #0
 800386a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800386c:	4b3d      	ldr	r3, [pc, #244]	@ (8003964 <HAL_UART_MspInit+0x208>)
 800386e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003872:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003874:	4b3b      	ldr	r3, [pc, #236]	@ (8003964 <HAL_UART_MspInit+0x208>)
 8003876:	2200      	movs	r2, #0
 8003878:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800387a:	483a      	ldr	r0, [pc, #232]	@ (8003964 <HAL_UART_MspInit+0x208>)
 800387c:	f000 fbb0 	bl	8003fe0 <HAL_DMA_Init>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8003886:	f7ff fc45 	bl	8003114 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a35      	ldr	r2, [pc, #212]	@ (8003964 <HAL_UART_MspInit+0x208>)
 800388e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003890:	4a34      	ldr	r2, [pc, #208]	@ (8003964 <HAL_UART_MspInit+0x208>)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003896:	2200      	movs	r2, #0
 8003898:	2105      	movs	r1, #5
 800389a:	2026      	movs	r0, #38	@ 0x26
 800389c:	f000 fb76 	bl	8003f8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80038a0:	2026      	movs	r0, #38	@ 0x26
 80038a2:	f000 fb8f 	bl	8003fc4 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80038a6:	e04f      	b.n	8003948 <HAL_UART_MspInit+0x1ec>
  else if(huart->Instance==USART3)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a2f      	ldr	r2, [pc, #188]	@ (800396c <HAL_UART_MspInit+0x210>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d14a      	bne.n	8003948 <HAL_UART_MspInit+0x1ec>
    __HAL_RCC_USART3_CLK_ENABLE();
 80038b2:	2300      	movs	r3, #0
 80038b4:	613b      	str	r3, [r7, #16]
 80038b6:	4b27      	ldr	r3, [pc, #156]	@ (8003954 <HAL_UART_MspInit+0x1f8>)
 80038b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ba:	4a26      	ldr	r2, [pc, #152]	@ (8003954 <HAL_UART_MspInit+0x1f8>)
 80038bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80038c2:	4b24      	ldr	r3, [pc, #144]	@ (8003954 <HAL_UART_MspInit+0x1f8>)
 80038c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038ca:	613b      	str	r3, [r7, #16]
 80038cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038ce:	2300      	movs	r3, #0
 80038d0:	60fb      	str	r3, [r7, #12]
 80038d2:	4b20      	ldr	r3, [pc, #128]	@ (8003954 <HAL_UART_MspInit+0x1f8>)
 80038d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d6:	4a1f      	ldr	r2, [pc, #124]	@ (8003954 <HAL_UART_MspInit+0x1f8>)
 80038d8:	f043 0304 	orr.w	r3, r3, #4
 80038dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80038de:	4b1d      	ldr	r3, [pc, #116]	@ (8003954 <HAL_UART_MspInit+0x1f8>)
 80038e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e2:	f003 0304 	and.w	r3, r3, #4
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038ea:	2300      	movs	r3, #0
 80038ec:	60bb      	str	r3, [r7, #8]
 80038ee:	4b19      	ldr	r3, [pc, #100]	@ (8003954 <HAL_UART_MspInit+0x1f8>)
 80038f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f2:	4a18      	ldr	r2, [pc, #96]	@ (8003954 <HAL_UART_MspInit+0x1f8>)
 80038f4:	f043 0302 	orr.w	r3, r3, #2
 80038f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80038fa:	4b16      	ldr	r3, [pc, #88]	@ (8003954 <HAL_UART_MspInit+0x1f8>)
 80038fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	60bb      	str	r3, [r7, #8]
 8003904:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003906:	2320      	movs	r3, #32
 8003908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800390a:	2302      	movs	r3, #2
 800390c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390e:	2300      	movs	r3, #0
 8003910:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003912:	2303      	movs	r3, #3
 8003914:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003916:	2307      	movs	r3, #7
 8003918:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800391a:	f107 031c 	add.w	r3, r7, #28
 800391e:	4619      	mov	r1, r3
 8003920:	4813      	ldr	r0, [pc, #76]	@ (8003970 <HAL_UART_MspInit+0x214>)
 8003922:	f000 ff5f 	bl	80047e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003926:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800392a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800392c:	2302      	movs	r3, #2
 800392e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003930:	2300      	movs	r3, #0
 8003932:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003934:	2303      	movs	r3, #3
 8003936:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003938:	2307      	movs	r3, #7
 800393a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800393c:	f107 031c 	add.w	r3, r7, #28
 8003940:	4619      	mov	r1, r3
 8003942:	480c      	ldr	r0, [pc, #48]	@ (8003974 <HAL_UART_MspInit+0x218>)
 8003944:	f000 ff4e 	bl	80047e4 <HAL_GPIO_Init>
}
 8003948:	bf00      	nop
 800394a:	3730      	adds	r7, #48	@ 0x30
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40004400 	.word	0x40004400
 8003954:	40023800 	.word	0x40023800
 8003958:	40020000 	.word	0x40020000
 800395c:	200049bc 	.word	0x200049bc
 8003960:	40026088 	.word	0x40026088
 8003964:	20004a1c 	.word	0x20004a1c
 8003968:	400260a0 	.word	0x400260a0
 800396c:	40004800 	.word	0x40004800
 8003970:	40020800 	.word	0x40020800
 8003974:	40020400 	.word	0x40020400

08003978 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b08e      	sub	sp, #56	@ 0x38
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003980:	2300      	movs	r3, #0
 8003982:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003984:	2300      	movs	r3, #0
 8003986:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003988:	2300      	movs	r3, #0
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	4b33      	ldr	r3, [pc, #204]	@ (8003a5c <HAL_InitTick+0xe4>)
 800398e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003990:	4a32      	ldr	r2, [pc, #200]	@ (8003a5c <HAL_InitTick+0xe4>)
 8003992:	f043 0310 	orr.w	r3, r3, #16
 8003996:	6413      	str	r3, [r2, #64]	@ 0x40
 8003998:	4b30      	ldr	r3, [pc, #192]	@ (8003a5c <HAL_InitTick+0xe4>)
 800399a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399c:	f003 0310 	and.w	r3, r3, #16
 80039a0:	60fb      	str	r3, [r7, #12]
 80039a2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80039a4:	f107 0210 	add.w	r2, r7, #16
 80039a8:	f107 0314 	add.w	r3, r7, #20
 80039ac:	4611      	mov	r1, r2
 80039ae:	4618      	mov	r0, r3
 80039b0:	f001 fb8c 	bl	80050cc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80039b4:	6a3b      	ldr	r3, [r7, #32]
 80039b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80039b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d103      	bne.n	80039c6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80039be:	f001 fb5d 	bl	800507c <HAL_RCC_GetPCLK1Freq>
 80039c2:	6378      	str	r0, [r7, #52]	@ 0x34
 80039c4:	e004      	b.n	80039d0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80039c6:	f001 fb59 	bl	800507c <HAL_RCC_GetPCLK1Freq>
 80039ca:	4603      	mov	r3, r0
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80039d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039d2:	4a23      	ldr	r2, [pc, #140]	@ (8003a60 <HAL_InitTick+0xe8>)
 80039d4:	fba2 2303 	umull	r2, r3, r2, r3
 80039d8:	0c9b      	lsrs	r3, r3, #18
 80039da:	3b01      	subs	r3, #1
 80039dc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80039de:	4b21      	ldr	r3, [pc, #132]	@ (8003a64 <HAL_InitTick+0xec>)
 80039e0:	4a21      	ldr	r2, [pc, #132]	@ (8003a68 <HAL_InitTick+0xf0>)
 80039e2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80039e4:	4b1f      	ldr	r3, [pc, #124]	@ (8003a64 <HAL_InitTick+0xec>)
 80039e6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80039ea:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80039ec:	4a1d      	ldr	r2, [pc, #116]	@ (8003a64 <HAL_InitTick+0xec>)
 80039ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039f0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80039f2:	4b1c      	ldr	r3, [pc, #112]	@ (8003a64 <HAL_InitTick+0xec>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003a64 <HAL_InitTick+0xec>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039fe:	4b19      	ldr	r3, [pc, #100]	@ (8003a64 <HAL_InitTick+0xec>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003a04:	4817      	ldr	r0, [pc, #92]	@ (8003a64 <HAL_InitTick+0xec>)
 8003a06:	f001 ffdb 	bl	80059c0 <HAL_TIM_Base_Init>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003a10:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d11b      	bne.n	8003a50 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003a18:	4812      	ldr	r0, [pc, #72]	@ (8003a64 <HAL_InitTick+0xec>)
 8003a1a:	f002 f821 	bl	8005a60 <HAL_TIM_Base_Start_IT>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003a24:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d111      	bne.n	8003a50 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003a2c:	2036      	movs	r0, #54	@ 0x36
 8003a2e:	f000 fac9 	bl	8003fc4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b0f      	cmp	r3, #15
 8003a36:	d808      	bhi.n	8003a4a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003a38:	2200      	movs	r2, #0
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	2036      	movs	r0, #54	@ 0x36
 8003a3e:	f000 faa5 	bl	8003f8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003a42:	4a0a      	ldr	r2, [pc, #40]	@ (8003a6c <HAL_InitTick+0xf4>)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6013      	str	r3, [r2, #0]
 8003a48:	e002      	b.n	8003a50 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003a50:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3738      	adds	r7, #56	@ 0x38
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	40023800 	.word	0x40023800
 8003a60:	431bde83 	.word	0x431bde83
 8003a64:	20007a10 	.word	0x20007a10
 8003a68:	40001000 	.word	0x40001000
 8003a6c:	2000003c 	.word	0x2000003c

08003a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a70:	b480      	push	{r7}
 8003a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003a74:	bf00      	nop
 8003a76:	e7fd      	b.n	8003a74 <NMI_Handler+0x4>

08003a78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a7c:	bf00      	nop
 8003a7e:	e7fd      	b.n	8003a7c <HardFault_Handler+0x4>

08003a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a84:	bf00      	nop
 8003a86:	e7fd      	b.n	8003a84 <MemManage_Handler+0x4>

08003a88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a8c:	bf00      	nop
 8003a8e:	e7fd      	b.n	8003a8c <BusFault_Handler+0x4>

08003a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a94:	bf00      	nop
 8003a96:	e7fd      	b.n	8003a94 <UsageFault_Handler+0x4>

08003a98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a9c:	bf00      	nop
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003aaa:	2004      	movs	r0, #4
 8003aac:	f001 f848 	bl	8004b40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003ab0:	bf00      	nop
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003ab8:	4802      	ldr	r0, [pc, #8]	@ (8003ac4 <DMA1_Stream5_IRQHandler+0x10>)
 8003aba:	f000 fc29 	bl	8004310 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003abe:	bf00      	nop
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	200049bc 	.word	0x200049bc

08003ac8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003acc:	4802      	ldr	r0, [pc, #8]	@ (8003ad8 <DMA1_Stream6_IRQHandler+0x10>)
 8003ace:	f000 fc1f 	bl	8004310 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003ad2:	bf00      	nop
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	20004a1c 	.word	0x20004a1c

08003adc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003ae0:	4802      	ldr	r0, [pc, #8]	@ (8003aec <TIM4_IRQHandler+0x10>)
 8003ae2:	f002 fa79 	bl	8005fd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003ae6:	bf00      	nop
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	20004854 	.word	0x20004854

08003af0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003af4:	4802      	ldr	r0, [pc, #8]	@ (8003b00 <USART2_IRQHandler+0x10>)
 8003af6:	f003 fab3 	bl	8007060 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003afa:	bf00      	nop
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	2000492c 	.word	0x2000492c

08003b04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003b08:	4802      	ldr	r0, [pc, #8]	@ (8003b14 <TIM6_DAC_IRQHandler+0x10>)
 8003b0a:	f002 fa65 	bl	8005fd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003b0e:	bf00      	nop
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	20007a10 	.word	0x20007a10

08003b18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  return 1;
 8003b1c:	2301      	movs	r3, #1
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <_kill>:

int _kill(int pid, int sig)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003b32:	f015 f80d 	bl	8018b50 <__errno>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2216      	movs	r2, #22
 8003b3a:	601a      	str	r2, [r3, #0]
  return -1;
 8003b3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <_exit>:

void _exit (int status)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003b50:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f7ff ffe7 	bl	8003b28 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003b5a:	bf00      	nop
 8003b5c:	e7fd      	b.n	8003b5a <_exit+0x12>

08003b5e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b086      	sub	sp, #24
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	60f8      	str	r0, [r7, #12]
 8003b66:	60b9      	str	r1, [r7, #8]
 8003b68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	617b      	str	r3, [r7, #20]
 8003b6e:	e00a      	b.n	8003b86 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003b70:	f3af 8000 	nop.w
 8003b74:	4601      	mov	r1, r0
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	1c5a      	adds	r2, r3, #1
 8003b7a:	60ba      	str	r2, [r7, #8]
 8003b7c:	b2ca      	uxtb	r2, r1
 8003b7e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	3301      	adds	r3, #1
 8003b84:	617b      	str	r3, [r7, #20]
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	dbf0      	blt.n	8003b70 <_read+0x12>
  }

  return len;
 8003b8e:	687b      	ldr	r3, [r7, #4]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3718      	adds	r7, #24
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	617b      	str	r3, [r7, #20]
 8003ba8:	e009      	b.n	8003bbe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	1c5a      	adds	r2, r3, #1
 8003bae:	60ba      	str	r2, [r7, #8]
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	617b      	str	r3, [r7, #20]
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	dbf1      	blt.n	8003baa <_write+0x12>
  }
  return len;
 8003bc6:	687b      	ldr	r3, [r7, #4]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3718      	adds	r7, #24
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <_close>:

int _close(int file)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003bd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003bf8:	605a      	str	r2, [r3, #4]
  return 0;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <_isatty>:

int _isatty(int file)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003c10:	2301      	movs	r3, #1
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr

08003c1e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b085      	sub	sp, #20
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	60f8      	str	r0, [r7, #12]
 8003c26:	60b9      	str	r1, [r7, #8]
 8003c28:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3714      	adds	r7, #20
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c40:	4a14      	ldr	r2, [pc, #80]	@ (8003c94 <_sbrk+0x5c>)
 8003c42:	4b15      	ldr	r3, [pc, #84]	@ (8003c98 <_sbrk+0x60>)
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c4c:	4b13      	ldr	r3, [pc, #76]	@ (8003c9c <_sbrk+0x64>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d102      	bne.n	8003c5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c54:	4b11      	ldr	r3, [pc, #68]	@ (8003c9c <_sbrk+0x64>)
 8003c56:	4a12      	ldr	r2, [pc, #72]	@ (8003ca0 <_sbrk+0x68>)
 8003c58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c5a:	4b10      	ldr	r3, [pc, #64]	@ (8003c9c <_sbrk+0x64>)
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4413      	add	r3, r2
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d207      	bcs.n	8003c78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c68:	f014 ff72 	bl	8018b50 <__errno>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	220c      	movs	r2, #12
 8003c70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003c76:	e009      	b.n	8003c8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c78:	4b08      	ldr	r3, [pc, #32]	@ (8003c9c <_sbrk+0x64>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c7e:	4b07      	ldr	r3, [pc, #28]	@ (8003c9c <_sbrk+0x64>)
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4413      	add	r3, r2
 8003c86:	4a05      	ldr	r2, [pc, #20]	@ (8003c9c <_sbrk+0x64>)
 8003c88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3718      	adds	r7, #24
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	20020000 	.word	0x20020000
 8003c98:	00000400 	.word	0x00000400
 8003c9c:	20007a5c 	.word	0x20007a5c
 8003ca0:	20011118 	.word	0x20011118

08003ca4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ca8:	4b06      	ldr	r3, [pc, #24]	@ (8003cc4 <SystemInit+0x20>)
 8003caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cae:	4a05      	ldr	r2, [pc, #20]	@ (8003cc4 <SystemInit+0x20>)
 8003cb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003cb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003cb8:	bf00      	nop
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	e000ed00 	.word	0xe000ed00

08003cc8 <StartDefaultTask>:
int currentsp = 0;
int sec = 0;


void StartDefaultTask(void *argument)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(&htim4);
 8003cd0:	4809      	ldr	r0, [pc, #36]	@ (8003cf8 <StartDefaultTask+0x30>)
 8003cd2:	f001 fec5 	bl	8005a60 <HAL_TIM_Base_Start_IT>
	uros_init();
 8003cd6:	f7fe f98d 	bl	8001ff4 <uros_init>
	arm_init();
 8003cda:	f7fd fa47 	bl	800116c <arm_init>

    for(;;){
        uros_agent_status_check();
 8003cde:	f7fe f9c9 	bl	8002074 <uros_agent_status_check>
        osDelay(50);
 8003ce2:	2032      	movs	r0, #50	@ 0x32
 8003ce4:	f004 fc52 	bl	800858c <osDelay>
		currentsp ++;
 8003ce8:	4b04      	ldr	r3, [pc, #16]	@ (8003cfc <StartDefaultTask+0x34>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	3301      	adds	r3, #1
 8003cee:	4a03      	ldr	r2, [pc, #12]	@ (8003cfc <StartDefaultTask+0x34>)
 8003cf0:	6013      	str	r3, [r2, #0]
        uros_agent_status_check();
 8003cf2:	bf00      	nop
 8003cf4:	e7f3      	b.n	8003cde <StartDefaultTask+0x16>
 8003cf6:	bf00      	nop
 8003cf8:	20004854 	.word	0x20004854
 8003cfc:	20007a60 	.word	0x20007a60

08003d00 <HAL_TIM_PeriodElapsedCallback>:
    }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM4)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a0a      	ldr	r2, [pc, #40]	@ (8003d38 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d106      	bne.n	8003d20 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		arm_timer_callback();
 8003d12:	f7fd fac9 	bl	80012a8 <arm_timer_callback>
		sec ++;
 8003d16:	4b09      	ldr	r3, [pc, #36]	@ (8003d3c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	4a07      	ldr	r2, [pc, #28]	@ (8003d3c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003d1e:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END Callback 0 */
	if (htim->Instance == TIM6)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a06      	ldr	r2, [pc, #24]	@ (8003d40 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d101      	bne.n	8003d2e <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		HAL_IncTick();
 8003d2a:	f000 f857 	bl	8003ddc <HAL_IncTick>
	}
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8003d2e:	bf00      	nop
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	40000800 	.word	0x40000800
 8003d3c:	20007a64 	.word	0x20007a64
 8003d40:	40001000 	.word	0x40001000

08003d44 <Reset_Handler>:
 8003d44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003d7c <LoopFillZerobss+0xe>
 8003d48:	f7ff ffac 	bl	8003ca4 <SystemInit>
 8003d4c:	480c      	ldr	r0, [pc, #48]	@ (8003d80 <LoopFillZerobss+0x12>)
 8003d4e:	490d      	ldr	r1, [pc, #52]	@ (8003d84 <LoopFillZerobss+0x16>)
 8003d50:	4a0d      	ldr	r2, [pc, #52]	@ (8003d88 <LoopFillZerobss+0x1a>)
 8003d52:	2300      	movs	r3, #0
 8003d54:	e002      	b.n	8003d5c <LoopCopyDataInit>

08003d56 <CopyDataInit>:
 8003d56:	58d4      	ldr	r4, [r2, r3]
 8003d58:	50c4      	str	r4, [r0, r3]
 8003d5a:	3304      	adds	r3, #4

08003d5c <LoopCopyDataInit>:
 8003d5c:	18c4      	adds	r4, r0, r3
 8003d5e:	428c      	cmp	r4, r1
 8003d60:	d3f9      	bcc.n	8003d56 <CopyDataInit>
 8003d62:	4a0a      	ldr	r2, [pc, #40]	@ (8003d8c <LoopFillZerobss+0x1e>)
 8003d64:	4c0a      	ldr	r4, [pc, #40]	@ (8003d90 <LoopFillZerobss+0x22>)
 8003d66:	2300      	movs	r3, #0
 8003d68:	e001      	b.n	8003d6e <LoopFillZerobss>

08003d6a <FillZerobss>:
 8003d6a:	6013      	str	r3, [r2, #0]
 8003d6c:	3204      	adds	r2, #4

08003d6e <LoopFillZerobss>:
 8003d6e:	42a2      	cmp	r2, r4
 8003d70:	d3fb      	bcc.n	8003d6a <FillZerobss>
 8003d72:	f014 fef3 	bl	8018b5c <__libc_init_array>
 8003d76:	f7fe fe23 	bl	80029c0 <main>
 8003d7a:	4770      	bx	lr
 8003d7c:	20020000 	.word	0x20020000
 8003d80:	20000000 	.word	0x20000000
 8003d84:	20000144 	.word	0x20000144
 8003d88:	0801a72c 	.word	0x0801a72c
 8003d8c:	20000148 	.word	0x20000148
 8003d90:	20011118 	.word	0x20011118

08003d94 <ADC_IRQHandler>:
 8003d94:	e7fe      	b.n	8003d94 <ADC_IRQHandler>
	...

08003d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8003dd8 <HAL_Init+0x40>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a0d      	ldr	r2, [pc, #52]	@ (8003dd8 <HAL_Init+0x40>)
 8003da2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003da6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003da8:	4b0b      	ldr	r3, [pc, #44]	@ (8003dd8 <HAL_Init+0x40>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a0a      	ldr	r2, [pc, #40]	@ (8003dd8 <HAL_Init+0x40>)
 8003dae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003db2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003db4:	4b08      	ldr	r3, [pc, #32]	@ (8003dd8 <HAL_Init+0x40>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a07      	ldr	r2, [pc, #28]	@ (8003dd8 <HAL_Init+0x40>)
 8003dba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003dc0:	2003      	movs	r0, #3
 8003dc2:	f000 f8d8 	bl	8003f76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003dc6:	200f      	movs	r0, #15
 8003dc8:	f7ff fdd6 	bl	8003978 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003dcc:	f7ff fb0c 	bl	80033e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	40023c00 	.word	0x40023c00

08003ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003de0:	4b06      	ldr	r3, [pc, #24]	@ (8003dfc <HAL_IncTick+0x20>)
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	461a      	mov	r2, r3
 8003de6:	4b06      	ldr	r3, [pc, #24]	@ (8003e00 <HAL_IncTick+0x24>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4413      	add	r3, r2
 8003dec:	4a04      	ldr	r2, [pc, #16]	@ (8003e00 <HAL_IncTick+0x24>)
 8003dee:	6013      	str	r3, [r2, #0]
}
 8003df0:	bf00      	nop
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	20000040 	.word	0x20000040
 8003e00:	20007a68 	.word	0x20007a68

08003e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
  return uwTick;
 8003e08:	4b03      	ldr	r3, [pc, #12]	@ (8003e18 <HAL_GetTick+0x14>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	20007a68 	.word	0x20007a68

08003e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f003 0307 	and.w	r3, r3, #7
 8003e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e60 <__NVIC_SetPriorityGrouping+0x44>)
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e38:	4013      	ands	r3, r2
 8003e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003e48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e4e:	4a04      	ldr	r2, [pc, #16]	@ (8003e60 <__NVIC_SetPriorityGrouping+0x44>)
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	60d3      	str	r3, [r2, #12]
}
 8003e54:	bf00      	nop
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	e000ed00 	.word	0xe000ed00

08003e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e68:	4b04      	ldr	r3, [pc, #16]	@ (8003e7c <__NVIC_GetPriorityGrouping+0x18>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	0a1b      	lsrs	r3, r3, #8
 8003e6e:	f003 0307 	and.w	r3, r3, #7
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	e000ed00 	.word	0xe000ed00

08003e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	4603      	mov	r3, r0
 8003e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	db0b      	blt.n	8003eaa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e92:	79fb      	ldrb	r3, [r7, #7]
 8003e94:	f003 021f 	and.w	r2, r3, #31
 8003e98:	4907      	ldr	r1, [pc, #28]	@ (8003eb8 <__NVIC_EnableIRQ+0x38>)
 8003e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e9e:	095b      	lsrs	r3, r3, #5
 8003ea0:	2001      	movs	r0, #1
 8003ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003eaa:	bf00      	nop
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	e000e100 	.word	0xe000e100

08003ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	6039      	str	r1, [r7, #0]
 8003ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	db0a      	blt.n	8003ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	b2da      	uxtb	r2, r3
 8003ed4:	490c      	ldr	r1, [pc, #48]	@ (8003f08 <__NVIC_SetPriority+0x4c>)
 8003ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eda:	0112      	lsls	r2, r2, #4
 8003edc:	b2d2      	uxtb	r2, r2
 8003ede:	440b      	add	r3, r1
 8003ee0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ee4:	e00a      	b.n	8003efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	b2da      	uxtb	r2, r3
 8003eea:	4908      	ldr	r1, [pc, #32]	@ (8003f0c <__NVIC_SetPriority+0x50>)
 8003eec:	79fb      	ldrb	r3, [r7, #7]
 8003eee:	f003 030f 	and.w	r3, r3, #15
 8003ef2:	3b04      	subs	r3, #4
 8003ef4:	0112      	lsls	r2, r2, #4
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	440b      	add	r3, r1
 8003efa:	761a      	strb	r2, [r3, #24]
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr
 8003f08:	e000e100 	.word	0xe000e100
 8003f0c:	e000ed00 	.word	0xe000ed00

08003f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b089      	sub	sp, #36	@ 0x24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f003 0307 	and.w	r3, r3, #7
 8003f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	f1c3 0307 	rsb	r3, r3, #7
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	bf28      	it	cs
 8003f2e:	2304      	movcs	r3, #4
 8003f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	3304      	adds	r3, #4
 8003f36:	2b06      	cmp	r3, #6
 8003f38:	d902      	bls.n	8003f40 <NVIC_EncodePriority+0x30>
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	3b03      	subs	r3, #3
 8003f3e:	e000      	b.n	8003f42 <NVIC_EncodePriority+0x32>
 8003f40:	2300      	movs	r3, #0
 8003f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4e:	43da      	mvns	r2, r3
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	401a      	ands	r2, r3
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f58:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f62:	43d9      	mvns	r1, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f68:	4313      	orrs	r3, r2
         );
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3724      	adds	r7, #36	@ 0x24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b082      	sub	sp, #8
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7ff ff4c 	bl	8003e1c <__NVIC_SetPriorityGrouping>
}
 8003f84:	bf00      	nop
 8003f86:	3708      	adds	r7, #8
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	4603      	mov	r3, r0
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
 8003f98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f9e:	f7ff ff61 	bl	8003e64 <__NVIC_GetPriorityGrouping>
 8003fa2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	68b9      	ldr	r1, [r7, #8]
 8003fa8:	6978      	ldr	r0, [r7, #20]
 8003faa:	f7ff ffb1 	bl	8003f10 <NVIC_EncodePriority>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fb4:	4611      	mov	r1, r2
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7ff ff80 	bl	8003ebc <__NVIC_SetPriority>
}
 8003fbc:	bf00      	nop
 8003fbe:	3718      	adds	r7, #24
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	4603      	mov	r3, r0
 8003fcc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7ff ff54 	bl	8003e80 <__NVIC_EnableIRQ>
}
 8003fd8:	bf00      	nop
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003fec:	f7ff ff0a 	bl	8003e04 <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e099      	b.n	8004130 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2202      	movs	r2, #2
 8004000:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f022 0201 	bic.w	r2, r2, #1
 800401a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800401c:	e00f      	b.n	800403e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800401e:	f7ff fef1 	bl	8003e04 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b05      	cmp	r3, #5
 800402a:	d908      	bls.n	800403e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2220      	movs	r2, #32
 8004030:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2203      	movs	r2, #3
 8004036:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e078      	b.n	8004130 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1e8      	bne.n	800401e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	4b38      	ldr	r3, [pc, #224]	@ (8004138 <HAL_DMA_Init+0x158>)
 8004058:	4013      	ands	r3, r2
 800405a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800406a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004076:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004082:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	4313      	orrs	r3, r2
 800408e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004094:	2b04      	cmp	r3, #4
 8004096:	d107      	bne.n	80040a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a0:	4313      	orrs	r3, r2
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	f023 0307 	bic.w	r3, r3, #7
 80040be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	d117      	bne.n	8004102 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	4313      	orrs	r3, r2
 80040da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00e      	beq.n	8004102 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 fb01 	bl	80046ec <DMA_CheckFifoParam>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d008      	beq.n	8004102 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2240      	movs	r2, #64	@ 0x40
 80040f4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80040fe:	2301      	movs	r3, #1
 8004100:	e016      	b.n	8004130 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 fab8 	bl	8004680 <DMA_CalcBaseAndBitshift>
 8004110:	4603      	mov	r3, r0
 8004112:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004118:	223f      	movs	r2, #63	@ 0x3f
 800411a:	409a      	lsls	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3718      	adds	r7, #24
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	f010803f 	.word	0xf010803f

0800413c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
 8004148:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800414a:	2300      	movs	r3, #0
 800414c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004152:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800415a:	2b01      	cmp	r3, #1
 800415c:	d101      	bne.n	8004162 <HAL_DMA_Start_IT+0x26>
 800415e:	2302      	movs	r3, #2
 8004160:	e040      	b.n	80041e4 <HAL_DMA_Start_IT+0xa8>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b01      	cmp	r3, #1
 8004174:	d12f      	bne.n	80041d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2202      	movs	r2, #2
 800417a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	68b9      	ldr	r1, [r7, #8]
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 fa4a 	bl	8004624 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004194:	223f      	movs	r2, #63	@ 0x3f
 8004196:	409a      	lsls	r2, r3
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f042 0216 	orr.w	r2, r2, #22
 80041aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d007      	beq.n	80041c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0208 	orr.w	r2, r2, #8
 80041c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f042 0201 	orr.w	r2, r2, #1
 80041d2:	601a      	str	r2, [r3, #0]
 80041d4:	e005      	b.n	80041e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80041de:	2302      	movs	r3, #2
 80041e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80041e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3718      	adds	r7, #24
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80041fa:	f7ff fe03 	bl	8003e04 <HAL_GetTick>
 80041fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d008      	beq.n	800421e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2280      	movs	r2, #128	@ 0x80
 8004210:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e052      	b.n	80042c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 0216 	bic.w	r2, r2, #22
 800422c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	695a      	ldr	r2, [r3, #20]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800423c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004242:	2b00      	cmp	r3, #0
 8004244:	d103      	bne.n	800424e <HAL_DMA_Abort+0x62>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800424a:	2b00      	cmp	r3, #0
 800424c:	d007      	beq.n	800425e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 0208 	bic.w	r2, r2, #8
 800425c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 0201 	bic.w	r2, r2, #1
 800426c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800426e:	e013      	b.n	8004298 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004270:	f7ff fdc8 	bl	8003e04 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b05      	cmp	r3, #5
 800427c:	d90c      	bls.n	8004298 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2220      	movs	r2, #32
 8004282:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2203      	movs	r2, #3
 8004288:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e015      	b.n	80042c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1e4      	bne.n	8004270 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042aa:	223f      	movs	r2, #63	@ 0x3f
 80042ac:	409a      	lsls	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d004      	beq.n	80042ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2280      	movs	r2, #128	@ 0x80
 80042e4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e00c      	b.n	8004304 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2205      	movs	r2, #5
 80042ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f022 0201 	bic.w	r2, r2, #1
 8004300:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004318:	2300      	movs	r3, #0
 800431a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800431c:	4b8e      	ldr	r3, [pc, #568]	@ (8004558 <HAL_DMA_IRQHandler+0x248>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a8e      	ldr	r2, [pc, #568]	@ (800455c <HAL_DMA_IRQHandler+0x24c>)
 8004322:	fba2 2303 	umull	r2, r3, r2, r3
 8004326:	0a9b      	lsrs	r3, r3, #10
 8004328:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800432e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800433a:	2208      	movs	r2, #8
 800433c:	409a      	lsls	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4013      	ands	r3, r2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d01a      	beq.n	800437c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0304 	and.w	r3, r3, #4
 8004350:	2b00      	cmp	r3, #0
 8004352:	d013      	beq.n	800437c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 0204 	bic.w	r2, r2, #4
 8004362:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004368:	2208      	movs	r2, #8
 800436a:	409a      	lsls	r2, r3
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004374:	f043 0201 	orr.w	r2, r3, #1
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004380:	2201      	movs	r2, #1
 8004382:	409a      	lsls	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4013      	ands	r3, r2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d012      	beq.n	80043b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00b      	beq.n	80043b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800439e:	2201      	movs	r2, #1
 80043a0:	409a      	lsls	r2, r3
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043aa:	f043 0202 	orr.w	r2, r3, #2
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043b6:	2204      	movs	r2, #4
 80043b8:	409a      	lsls	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	4013      	ands	r3, r2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d012      	beq.n	80043e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00b      	beq.n	80043e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043d4:	2204      	movs	r2, #4
 80043d6:	409a      	lsls	r2, r3
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043e0:	f043 0204 	orr.w	r2, r3, #4
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ec:	2210      	movs	r2, #16
 80043ee:	409a      	lsls	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	4013      	ands	r3, r2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d043      	beq.n	8004480 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0308 	and.w	r3, r3, #8
 8004402:	2b00      	cmp	r3, #0
 8004404:	d03c      	beq.n	8004480 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800440a:	2210      	movs	r2, #16
 800440c:	409a      	lsls	r2, r3
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d018      	beq.n	8004452 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d108      	bne.n	8004440 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004432:	2b00      	cmp	r3, #0
 8004434:	d024      	beq.n	8004480 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	4798      	blx	r3
 800443e:	e01f      	b.n	8004480 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004444:	2b00      	cmp	r3, #0
 8004446:	d01b      	beq.n	8004480 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	4798      	blx	r3
 8004450:	e016      	b.n	8004480 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800445c:	2b00      	cmp	r3, #0
 800445e:	d107      	bne.n	8004470 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0208 	bic.w	r2, r2, #8
 800446e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004474:	2b00      	cmp	r3, #0
 8004476:	d003      	beq.n	8004480 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004484:	2220      	movs	r2, #32
 8004486:	409a      	lsls	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	4013      	ands	r3, r2
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 808f 	beq.w	80045b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0310 	and.w	r3, r3, #16
 800449c:	2b00      	cmp	r3, #0
 800449e:	f000 8087 	beq.w	80045b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044a6:	2220      	movs	r2, #32
 80044a8:	409a      	lsls	r2, r3
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b05      	cmp	r3, #5
 80044b8:	d136      	bne.n	8004528 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 0216 	bic.w	r2, r2, #22
 80044c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	695a      	ldr	r2, [r3, #20]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80044d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d103      	bne.n	80044ea <HAL_DMA_IRQHandler+0x1da>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d007      	beq.n	80044fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 0208 	bic.w	r2, r2, #8
 80044f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044fe:	223f      	movs	r2, #63	@ 0x3f
 8004500:	409a      	lsls	r2, r3
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800451a:	2b00      	cmp	r3, #0
 800451c:	d07e      	beq.n	800461c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	4798      	blx	r3
        }
        return;
 8004526:	e079      	b.n	800461c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d01d      	beq.n	8004572 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10d      	bne.n	8004560 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004548:	2b00      	cmp	r3, #0
 800454a:	d031      	beq.n	80045b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	4798      	blx	r3
 8004554:	e02c      	b.n	80045b0 <HAL_DMA_IRQHandler+0x2a0>
 8004556:	bf00      	nop
 8004558:	20000038 	.word	0x20000038
 800455c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004564:	2b00      	cmp	r3, #0
 8004566:	d023      	beq.n	80045b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	4798      	blx	r3
 8004570:	e01e      	b.n	80045b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800457c:	2b00      	cmp	r3, #0
 800457e:	d10f      	bne.n	80045a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 0210 	bic.w	r2, r2, #16
 800458e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d003      	beq.n	80045b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d032      	beq.n	800461e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d022      	beq.n	800460a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2205      	movs	r2, #5
 80045c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 0201 	bic.w	r2, r2, #1
 80045da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	3301      	adds	r3, #1
 80045e0:	60bb      	str	r3, [r7, #8]
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d307      	bcc.n	80045f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1f2      	bne.n	80045dc <HAL_DMA_IRQHandler+0x2cc>
 80045f6:	e000      	b.n	80045fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80045f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800460e:	2b00      	cmp	r3, #0
 8004610:	d005      	beq.n	800461e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	4798      	blx	r3
 800461a:	e000      	b.n	800461e <HAL_DMA_IRQHandler+0x30e>
        return;
 800461c:	bf00      	nop
    }
  }
}
 800461e:	3718      	adds	r7, #24
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
 8004630:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004640:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	2b40      	cmp	r3, #64	@ 0x40
 8004650:	d108      	bne.n	8004664 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004662:	e007      	b.n	8004674 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	60da      	str	r2, [r3, #12]
}
 8004674:	bf00      	nop
 8004676:	3714      	adds	r7, #20
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	b2db      	uxtb	r3, r3
 800468e:	3b10      	subs	r3, #16
 8004690:	4a14      	ldr	r2, [pc, #80]	@ (80046e4 <DMA_CalcBaseAndBitshift+0x64>)
 8004692:	fba2 2303 	umull	r2, r3, r2, r3
 8004696:	091b      	lsrs	r3, r3, #4
 8004698:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800469a:	4a13      	ldr	r2, [pc, #76]	@ (80046e8 <DMA_CalcBaseAndBitshift+0x68>)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4413      	add	r3, r2
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	461a      	mov	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2b03      	cmp	r3, #3
 80046ac:	d909      	bls.n	80046c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80046b6:	f023 0303 	bic.w	r3, r3, #3
 80046ba:	1d1a      	adds	r2, r3, #4
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	659a      	str	r2, [r3, #88]	@ 0x58
 80046c0:	e007      	b.n	80046d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80046ca:	f023 0303 	bic.w	r3, r3, #3
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	aaaaaaab 	.word	0xaaaaaaab
 80046e8:	08019abc 	.word	0x08019abc

080046ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046f4:	2300      	movs	r3, #0
 80046f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d11f      	bne.n	8004746 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	2b03      	cmp	r3, #3
 800470a:	d856      	bhi.n	80047ba <DMA_CheckFifoParam+0xce>
 800470c:	a201      	add	r2, pc, #4	@ (adr r2, 8004714 <DMA_CheckFifoParam+0x28>)
 800470e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004712:	bf00      	nop
 8004714:	08004725 	.word	0x08004725
 8004718:	08004737 	.word	0x08004737
 800471c:	08004725 	.word	0x08004725
 8004720:	080047bb 	.word	0x080047bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004728:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d046      	beq.n	80047be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004734:	e043      	b.n	80047be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800473a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800473e:	d140      	bne.n	80047c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004744:	e03d      	b.n	80047c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800474e:	d121      	bne.n	8004794 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	2b03      	cmp	r3, #3
 8004754:	d837      	bhi.n	80047c6 <DMA_CheckFifoParam+0xda>
 8004756:	a201      	add	r2, pc, #4	@ (adr r2, 800475c <DMA_CheckFifoParam+0x70>)
 8004758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475c:	0800476d 	.word	0x0800476d
 8004760:	08004773 	.word	0x08004773
 8004764:	0800476d 	.word	0x0800476d
 8004768:	08004785 	.word	0x08004785
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	73fb      	strb	r3, [r7, #15]
      break;
 8004770:	e030      	b.n	80047d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004776:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d025      	beq.n	80047ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004782:	e022      	b.n	80047ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004788:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800478c:	d11f      	bne.n	80047ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004792:	e01c      	b.n	80047ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	2b02      	cmp	r3, #2
 8004798:	d903      	bls.n	80047a2 <DMA_CheckFifoParam+0xb6>
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	2b03      	cmp	r3, #3
 800479e:	d003      	beq.n	80047a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80047a0:	e018      	b.n	80047d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	73fb      	strb	r3, [r7, #15]
      break;
 80047a6:	e015      	b.n	80047d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00e      	beq.n	80047d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	73fb      	strb	r3, [r7, #15]
      break;
 80047b8:	e00b      	b.n	80047d2 <DMA_CheckFifoParam+0xe6>
      break;
 80047ba:	bf00      	nop
 80047bc:	e00a      	b.n	80047d4 <DMA_CheckFifoParam+0xe8>
      break;
 80047be:	bf00      	nop
 80047c0:	e008      	b.n	80047d4 <DMA_CheckFifoParam+0xe8>
      break;
 80047c2:	bf00      	nop
 80047c4:	e006      	b.n	80047d4 <DMA_CheckFifoParam+0xe8>
      break;
 80047c6:	bf00      	nop
 80047c8:	e004      	b.n	80047d4 <DMA_CheckFifoParam+0xe8>
      break;
 80047ca:	bf00      	nop
 80047cc:	e002      	b.n	80047d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80047ce:	bf00      	nop
 80047d0:	e000      	b.n	80047d4 <DMA_CheckFifoParam+0xe8>
      break;
 80047d2:	bf00      	nop
    }
  } 
  
  return status; 
 80047d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3714      	adds	r7, #20
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop

080047e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b089      	sub	sp, #36	@ 0x24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80047ee:	2300      	movs	r3, #0
 80047f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80047f2:	2300      	movs	r3, #0
 80047f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80047f6:	2300      	movs	r3, #0
 80047f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047fa:	2300      	movs	r3, #0
 80047fc:	61fb      	str	r3, [r7, #28]
 80047fe:	e165      	b.n	8004acc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004800:	2201      	movs	r2, #1
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	fa02 f303 	lsl.w	r3, r2, r3
 8004808:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	4013      	ands	r3, r2
 8004812:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	429a      	cmp	r2, r3
 800481a:	f040 8154 	bne.w	8004ac6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f003 0303 	and.w	r3, r3, #3
 8004826:	2b01      	cmp	r3, #1
 8004828:	d005      	beq.n	8004836 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004832:	2b02      	cmp	r3, #2
 8004834:	d130      	bne.n	8004898 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	2203      	movs	r2, #3
 8004842:	fa02 f303 	lsl.w	r3, r2, r3
 8004846:	43db      	mvns	r3, r3
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	4013      	ands	r3, r2
 800484c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	68da      	ldr	r2, [r3, #12]
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	fa02 f303 	lsl.w	r3, r2, r3
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	4313      	orrs	r3, r2
 800485e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800486c:	2201      	movs	r2, #1
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	fa02 f303 	lsl.w	r3, r2, r3
 8004874:	43db      	mvns	r3, r3
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	4013      	ands	r3, r2
 800487a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	091b      	lsrs	r3, r3, #4
 8004882:	f003 0201 	and.w	r2, r3, #1
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	fa02 f303 	lsl.w	r3, r2, r3
 800488c:	69ba      	ldr	r2, [r7, #24]
 800488e:	4313      	orrs	r3, r2
 8004890:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f003 0303 	and.w	r3, r3, #3
 80048a0:	2b03      	cmp	r3, #3
 80048a2:	d017      	beq.n	80048d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	005b      	lsls	r3, r3, #1
 80048ae:	2203      	movs	r2, #3
 80048b0:	fa02 f303 	lsl.w	r3, r2, r3
 80048b4:	43db      	mvns	r3, r3
 80048b6:	69ba      	ldr	r2, [r7, #24]
 80048b8:	4013      	ands	r3, r2
 80048ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	005b      	lsls	r3, r3, #1
 80048c4:	fa02 f303 	lsl.w	r3, r2, r3
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f003 0303 	and.w	r3, r3, #3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d123      	bne.n	8004928 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	08da      	lsrs	r2, r3, #3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	3208      	adds	r2, #8
 80048e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	f003 0307 	and.w	r3, r3, #7
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	220f      	movs	r2, #15
 80048f8:	fa02 f303 	lsl.w	r3, r2, r3
 80048fc:	43db      	mvns	r3, r3
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	4013      	ands	r3, r2
 8004902:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	691a      	ldr	r2, [r3, #16]
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	f003 0307 	and.w	r3, r3, #7
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	4313      	orrs	r3, r2
 8004918:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	08da      	lsrs	r2, r3, #3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	3208      	adds	r2, #8
 8004922:	69b9      	ldr	r1, [r7, #24]
 8004924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	005b      	lsls	r3, r3, #1
 8004932:	2203      	movs	r2, #3
 8004934:	fa02 f303 	lsl.w	r3, r2, r3
 8004938:	43db      	mvns	r3, r3
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	4013      	ands	r3, r2
 800493e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f003 0203 	and.w	r2, r3, #3
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	005b      	lsls	r3, r3, #1
 800494c:	fa02 f303 	lsl.w	r3, r2, r3
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	4313      	orrs	r3, r2
 8004954:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004964:	2b00      	cmp	r3, #0
 8004966:	f000 80ae 	beq.w	8004ac6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800496a:	2300      	movs	r3, #0
 800496c:	60fb      	str	r3, [r7, #12]
 800496e:	4b5d      	ldr	r3, [pc, #372]	@ (8004ae4 <HAL_GPIO_Init+0x300>)
 8004970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004972:	4a5c      	ldr	r2, [pc, #368]	@ (8004ae4 <HAL_GPIO_Init+0x300>)
 8004974:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004978:	6453      	str	r3, [r2, #68]	@ 0x44
 800497a:	4b5a      	ldr	r3, [pc, #360]	@ (8004ae4 <HAL_GPIO_Init+0x300>)
 800497c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800497e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004982:	60fb      	str	r3, [r7, #12]
 8004984:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004986:	4a58      	ldr	r2, [pc, #352]	@ (8004ae8 <HAL_GPIO_Init+0x304>)
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	089b      	lsrs	r3, r3, #2
 800498c:	3302      	adds	r3, #2
 800498e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004992:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	f003 0303 	and.w	r3, r3, #3
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	220f      	movs	r2, #15
 800499e:	fa02 f303 	lsl.w	r3, r2, r3
 80049a2:	43db      	mvns	r3, r3
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	4013      	ands	r3, r2
 80049a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a4f      	ldr	r2, [pc, #316]	@ (8004aec <HAL_GPIO_Init+0x308>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d025      	beq.n	80049fe <HAL_GPIO_Init+0x21a>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a4e      	ldr	r2, [pc, #312]	@ (8004af0 <HAL_GPIO_Init+0x30c>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d01f      	beq.n	80049fa <HAL_GPIO_Init+0x216>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a4d      	ldr	r2, [pc, #308]	@ (8004af4 <HAL_GPIO_Init+0x310>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d019      	beq.n	80049f6 <HAL_GPIO_Init+0x212>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a4c      	ldr	r2, [pc, #304]	@ (8004af8 <HAL_GPIO_Init+0x314>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d013      	beq.n	80049f2 <HAL_GPIO_Init+0x20e>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a4b      	ldr	r2, [pc, #300]	@ (8004afc <HAL_GPIO_Init+0x318>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d00d      	beq.n	80049ee <HAL_GPIO_Init+0x20a>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a4a      	ldr	r2, [pc, #296]	@ (8004b00 <HAL_GPIO_Init+0x31c>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d007      	beq.n	80049ea <HAL_GPIO_Init+0x206>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a49      	ldr	r2, [pc, #292]	@ (8004b04 <HAL_GPIO_Init+0x320>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d101      	bne.n	80049e6 <HAL_GPIO_Init+0x202>
 80049e2:	2306      	movs	r3, #6
 80049e4:	e00c      	b.n	8004a00 <HAL_GPIO_Init+0x21c>
 80049e6:	2307      	movs	r3, #7
 80049e8:	e00a      	b.n	8004a00 <HAL_GPIO_Init+0x21c>
 80049ea:	2305      	movs	r3, #5
 80049ec:	e008      	b.n	8004a00 <HAL_GPIO_Init+0x21c>
 80049ee:	2304      	movs	r3, #4
 80049f0:	e006      	b.n	8004a00 <HAL_GPIO_Init+0x21c>
 80049f2:	2303      	movs	r3, #3
 80049f4:	e004      	b.n	8004a00 <HAL_GPIO_Init+0x21c>
 80049f6:	2302      	movs	r3, #2
 80049f8:	e002      	b.n	8004a00 <HAL_GPIO_Init+0x21c>
 80049fa:	2301      	movs	r3, #1
 80049fc:	e000      	b.n	8004a00 <HAL_GPIO_Init+0x21c>
 80049fe:	2300      	movs	r3, #0
 8004a00:	69fa      	ldr	r2, [r7, #28]
 8004a02:	f002 0203 	and.w	r2, r2, #3
 8004a06:	0092      	lsls	r2, r2, #2
 8004a08:	4093      	lsls	r3, r2
 8004a0a:	69ba      	ldr	r2, [r7, #24]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a10:	4935      	ldr	r1, [pc, #212]	@ (8004ae8 <HAL_GPIO_Init+0x304>)
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	089b      	lsrs	r3, r3, #2
 8004a16:	3302      	adds	r3, #2
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a1e:	4b3a      	ldr	r3, [pc, #232]	@ (8004b08 <HAL_GPIO_Init+0x324>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	43db      	mvns	r3, r3
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d003      	beq.n	8004a42 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004a3a:	69ba      	ldr	r2, [r7, #24]
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a42:	4a31      	ldr	r2, [pc, #196]	@ (8004b08 <HAL_GPIO_Init+0x324>)
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a48:	4b2f      	ldr	r3, [pc, #188]	@ (8004b08 <HAL_GPIO_Init+0x324>)
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	43db      	mvns	r3, r3
 8004a52:	69ba      	ldr	r2, [r7, #24]
 8004a54:	4013      	ands	r3, r2
 8004a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d003      	beq.n	8004a6c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a6c:	4a26      	ldr	r2, [pc, #152]	@ (8004b08 <HAL_GPIO_Init+0x324>)
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a72:	4b25      	ldr	r3, [pc, #148]	@ (8004b08 <HAL_GPIO_Init+0x324>)
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	43db      	mvns	r3, r3
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	4013      	ands	r3, r2
 8004a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a96:	4a1c      	ldr	r2, [pc, #112]	@ (8004b08 <HAL_GPIO_Init+0x324>)
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a9c:	4b1a      	ldr	r3, [pc, #104]	@ (8004b08 <HAL_GPIO_Init+0x324>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	43db      	mvns	r3, r3
 8004aa6:	69ba      	ldr	r2, [r7, #24]
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d003      	beq.n	8004ac0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ac0:	4a11      	ldr	r2, [pc, #68]	@ (8004b08 <HAL_GPIO_Init+0x324>)
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	61fb      	str	r3, [r7, #28]
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	2b0f      	cmp	r3, #15
 8004ad0:	f67f ae96 	bls.w	8004800 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ad4:	bf00      	nop
 8004ad6:	bf00      	nop
 8004ad8:	3724      	adds	r7, #36	@ 0x24
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	40023800 	.word	0x40023800
 8004ae8:	40013800 	.word	0x40013800
 8004aec:	40020000 	.word	0x40020000
 8004af0:	40020400 	.word	0x40020400
 8004af4:	40020800 	.word	0x40020800
 8004af8:	40020c00 	.word	0x40020c00
 8004afc:	40021000 	.word	0x40021000
 8004b00:	40021400 	.word	0x40021400
 8004b04:	40021800 	.word	0x40021800
 8004b08:	40013c00 	.word	0x40013c00

08004b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	460b      	mov	r3, r1
 8004b16:	807b      	strh	r3, [r7, #2]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b1c:	787b      	ldrb	r3, [r7, #1]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d003      	beq.n	8004b2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b22:	887a      	ldrh	r2, [r7, #2]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b28:	e003      	b.n	8004b32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b2a:	887b      	ldrh	r3, [r7, #2]
 8004b2c:	041a      	lsls	r2, r3, #16
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	619a      	str	r2, [r3, #24]
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
	...

08004b40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	4603      	mov	r3, r0
 8004b48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004b4a:	4b08      	ldr	r3, [pc, #32]	@ (8004b6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b4c:	695a      	ldr	r2, [r3, #20]
 8004b4e:	88fb      	ldrh	r3, [r7, #6]
 8004b50:	4013      	ands	r3, r2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d006      	beq.n	8004b64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b56:	4a05      	ldr	r2, [pc, #20]	@ (8004b6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b58:	88fb      	ldrh	r3, [r7, #6]
 8004b5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b5c:	88fb      	ldrh	r3, [r7, #6]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7fc fc50 	bl	8001404 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b64:	bf00      	nop
 8004b66:	3708      	adds	r7, #8
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	40013c00 	.word	0x40013c00

08004b70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e12b      	b.n	8004dda <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d106      	bne.n	8004b9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f7fe fc52 	bl	8003440 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2224      	movs	r2, #36	@ 0x24
 8004ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 0201 	bic.w	r2, r2, #1
 8004bb2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004bc2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004bd2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004bd4:	f000 fa52 	bl	800507c <HAL_RCC_GetPCLK1Freq>
 8004bd8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	4a81      	ldr	r2, [pc, #516]	@ (8004de4 <HAL_I2C_Init+0x274>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d807      	bhi.n	8004bf4 <HAL_I2C_Init+0x84>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	4a80      	ldr	r2, [pc, #512]	@ (8004de8 <HAL_I2C_Init+0x278>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	bf94      	ite	ls
 8004bec:	2301      	movls	r3, #1
 8004bee:	2300      	movhi	r3, #0
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	e006      	b.n	8004c02 <HAL_I2C_Init+0x92>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4a7d      	ldr	r2, [pc, #500]	@ (8004dec <HAL_I2C_Init+0x27c>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	bf94      	ite	ls
 8004bfc:	2301      	movls	r3, #1
 8004bfe:	2300      	movhi	r3, #0
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d001      	beq.n	8004c0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e0e7      	b.n	8004dda <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	4a78      	ldr	r2, [pc, #480]	@ (8004df0 <HAL_I2C_Init+0x280>)
 8004c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c12:	0c9b      	lsrs	r3, r3, #18
 8004c14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68ba      	ldr	r2, [r7, #8]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	6a1b      	ldr	r3, [r3, #32]
 8004c30:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	4a6a      	ldr	r2, [pc, #424]	@ (8004de4 <HAL_I2C_Init+0x274>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d802      	bhi.n	8004c44 <HAL_I2C_Init+0xd4>
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	3301      	adds	r3, #1
 8004c42:	e009      	b.n	8004c58 <HAL_I2C_Init+0xe8>
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004c4a:	fb02 f303 	mul.w	r3, r2, r3
 8004c4e:	4a69      	ldr	r2, [pc, #420]	@ (8004df4 <HAL_I2C_Init+0x284>)
 8004c50:	fba2 2303 	umull	r2, r3, r2, r3
 8004c54:	099b      	lsrs	r3, r3, #6
 8004c56:	3301      	adds	r3, #1
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	6812      	ldr	r2, [r2, #0]
 8004c5c:	430b      	orrs	r3, r1
 8004c5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004c6a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	495c      	ldr	r1, [pc, #368]	@ (8004de4 <HAL_I2C_Init+0x274>)
 8004c74:	428b      	cmp	r3, r1
 8004c76:	d819      	bhi.n	8004cac <HAL_I2C_Init+0x13c>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	1e59      	subs	r1, r3, #1
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	005b      	lsls	r3, r3, #1
 8004c82:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c86:	1c59      	adds	r1, r3, #1
 8004c88:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004c8c:	400b      	ands	r3, r1
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00a      	beq.n	8004ca8 <HAL_I2C_Init+0x138>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	1e59      	subs	r1, r3, #1
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	005b      	lsls	r3, r3, #1
 8004c9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ca6:	e051      	b.n	8004d4c <HAL_I2C_Init+0x1dc>
 8004ca8:	2304      	movs	r3, #4
 8004caa:	e04f      	b.n	8004d4c <HAL_I2C_Init+0x1dc>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d111      	bne.n	8004cd8 <HAL_I2C_Init+0x168>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	1e58      	subs	r0, r3, #1
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6859      	ldr	r1, [r3, #4]
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	005b      	lsls	r3, r3, #1
 8004cc0:	440b      	add	r3, r1
 8004cc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	bf0c      	ite	eq
 8004cd0:	2301      	moveq	r3, #1
 8004cd2:	2300      	movne	r3, #0
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	e012      	b.n	8004cfe <HAL_I2C_Init+0x18e>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	1e58      	subs	r0, r3, #1
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6859      	ldr	r1, [r3, #4]
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	440b      	add	r3, r1
 8004ce6:	0099      	lsls	r1, r3, #2
 8004ce8:	440b      	add	r3, r1
 8004cea:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cee:	3301      	adds	r3, #1
 8004cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	bf0c      	ite	eq
 8004cf8:	2301      	moveq	r3, #1
 8004cfa:	2300      	movne	r3, #0
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d001      	beq.n	8004d06 <HAL_I2C_Init+0x196>
 8004d02:	2301      	movs	r3, #1
 8004d04:	e022      	b.n	8004d4c <HAL_I2C_Init+0x1dc>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10e      	bne.n	8004d2c <HAL_I2C_Init+0x1bc>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	1e58      	subs	r0, r3, #1
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6859      	ldr	r1, [r3, #4]
 8004d16:	460b      	mov	r3, r1
 8004d18:	005b      	lsls	r3, r3, #1
 8004d1a:	440b      	add	r3, r1
 8004d1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d20:	3301      	adds	r3, #1
 8004d22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d2a:	e00f      	b.n	8004d4c <HAL_I2C_Init+0x1dc>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	1e58      	subs	r0, r3, #1
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6859      	ldr	r1, [r3, #4]
 8004d34:	460b      	mov	r3, r1
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	440b      	add	r3, r1
 8004d3a:	0099      	lsls	r1, r3, #2
 8004d3c:	440b      	add	r3, r1
 8004d3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d42:	3301      	adds	r3, #1
 8004d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d48:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d4c:	6879      	ldr	r1, [r7, #4]
 8004d4e:	6809      	ldr	r1, [r1, #0]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	69da      	ldr	r2, [r3, #28]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	431a      	orrs	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004d7a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	6911      	ldr	r1, [r2, #16]
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	68d2      	ldr	r2, [r2, #12]
 8004d86:	4311      	orrs	r1, r2
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	6812      	ldr	r2, [r2, #0]
 8004d8c:	430b      	orrs	r3, r1
 8004d8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	695a      	ldr	r2, [r3, #20]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	431a      	orrs	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	430a      	orrs	r2, r1
 8004daa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f042 0201 	orr.w	r2, r2, #1
 8004dba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2220      	movs	r2, #32
 8004dc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	000186a0 	.word	0x000186a0
 8004de8:	001e847f 	.word	0x001e847f
 8004dec:	003d08ff 	.word	0x003d08ff
 8004df0:	431bde83 	.word	0x431bde83
 8004df4:	10624dd3 	.word	0x10624dd3

08004df8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004e02:	2300      	movs	r3, #0
 8004e04:	603b      	str	r3, [r7, #0]
 8004e06:	4b20      	ldr	r3, [pc, #128]	@ (8004e88 <HAL_PWREx_EnableOverDrive+0x90>)
 8004e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0a:	4a1f      	ldr	r2, [pc, #124]	@ (8004e88 <HAL_PWREx_EnableOverDrive+0x90>)
 8004e0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e10:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e12:	4b1d      	ldr	r3, [pc, #116]	@ (8004e88 <HAL_PWREx_EnableOverDrive+0x90>)
 8004e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e1a:	603b      	str	r3, [r7, #0]
 8004e1c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004e1e:	4b1b      	ldr	r3, [pc, #108]	@ (8004e8c <HAL_PWREx_EnableOverDrive+0x94>)
 8004e20:	2201      	movs	r2, #1
 8004e22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e24:	f7fe ffee 	bl	8003e04 <HAL_GetTick>
 8004e28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004e2a:	e009      	b.n	8004e40 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004e2c:	f7fe ffea 	bl	8003e04 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004e3a:	d901      	bls.n	8004e40 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e01f      	b.n	8004e80 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004e40:	4b13      	ldr	r3, [pc, #76]	@ (8004e90 <HAL_PWREx_EnableOverDrive+0x98>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e4c:	d1ee      	bne.n	8004e2c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004e4e:	4b11      	ldr	r3, [pc, #68]	@ (8004e94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e50:	2201      	movs	r2, #1
 8004e52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e54:	f7fe ffd6 	bl	8003e04 <HAL_GetTick>
 8004e58:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004e5a:	e009      	b.n	8004e70 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004e5c:	f7fe ffd2 	bl	8003e04 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004e6a:	d901      	bls.n	8004e70 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e007      	b.n	8004e80 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004e70:	4b07      	ldr	r3, [pc, #28]	@ (8004e90 <HAL_PWREx_EnableOverDrive+0x98>)
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e7c:	d1ee      	bne.n	8004e5c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3708      	adds	r7, #8
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	40023800 	.word	0x40023800
 8004e8c:	420e0040 	.word	0x420e0040
 8004e90:	40007000 	.word	0x40007000
 8004e94:	420e0044 	.word	0x420e0044

08004e98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d101      	bne.n	8004eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e0cc      	b.n	8005046 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004eac:	4b68      	ldr	r3, [pc, #416]	@ (8005050 <HAL_RCC_ClockConfig+0x1b8>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 030f 	and.w	r3, r3, #15
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d90c      	bls.n	8004ed4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eba:	4b65      	ldr	r3, [pc, #404]	@ (8005050 <HAL_RCC_ClockConfig+0x1b8>)
 8004ebc:	683a      	ldr	r2, [r7, #0]
 8004ebe:	b2d2      	uxtb	r2, r2
 8004ec0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ec2:	4b63      	ldr	r3, [pc, #396]	@ (8005050 <HAL_RCC_ClockConfig+0x1b8>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 030f 	and.w	r3, r3, #15
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d001      	beq.n	8004ed4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e0b8      	b.n	8005046 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d020      	beq.n	8004f22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d005      	beq.n	8004ef8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004eec:	4b59      	ldr	r3, [pc, #356]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	4a58      	ldr	r2, [pc, #352]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004ef6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0308 	and.w	r3, r3, #8
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d005      	beq.n	8004f10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f04:	4b53      	ldr	r3, [pc, #332]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	4a52      	ldr	r2, [pc, #328]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004f0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f10:	4b50      	ldr	r3, [pc, #320]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	494d      	ldr	r1, [pc, #308]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d044      	beq.n	8004fb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d107      	bne.n	8004f46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f36:	4b47      	ldr	r3, [pc, #284]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d119      	bne.n	8004f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e07f      	b.n	8005046 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d003      	beq.n	8004f56 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f52:	2b03      	cmp	r3, #3
 8004f54:	d107      	bne.n	8004f66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f56:	4b3f      	ldr	r3, [pc, #252]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d109      	bne.n	8004f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e06f      	b.n	8005046 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f66:	4b3b      	ldr	r3, [pc, #236]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e067      	b.n	8005046 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f76:	4b37      	ldr	r3, [pc, #220]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f023 0203 	bic.w	r2, r3, #3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	4934      	ldr	r1, [pc, #208]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f88:	f7fe ff3c 	bl	8003e04 <HAL_GetTick>
 8004f8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f8e:	e00a      	b.n	8004fa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f90:	f7fe ff38 	bl	8003e04 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e04f      	b.n	8005046 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fa6:	4b2b      	ldr	r3, [pc, #172]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 020c 	and.w	r2, r3, #12
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d1eb      	bne.n	8004f90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fb8:	4b25      	ldr	r3, [pc, #148]	@ (8005050 <HAL_RCC_ClockConfig+0x1b8>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 030f 	and.w	r3, r3, #15
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d20c      	bcs.n	8004fe0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fc6:	4b22      	ldr	r3, [pc, #136]	@ (8005050 <HAL_RCC_ClockConfig+0x1b8>)
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	b2d2      	uxtb	r2, r2
 8004fcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fce:	4b20      	ldr	r3, [pc, #128]	@ (8005050 <HAL_RCC_ClockConfig+0x1b8>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 030f 	and.w	r3, r3, #15
 8004fd6:	683a      	ldr	r2, [r7, #0]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d001      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e032      	b.n	8005046 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0304 	and.w	r3, r3, #4
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d008      	beq.n	8004ffe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fec:	4b19      	ldr	r3, [pc, #100]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	4916      	ldr	r1, [pc, #88]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0308 	and.w	r3, r3, #8
 8005006:	2b00      	cmp	r3, #0
 8005008:	d009      	beq.n	800501e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800500a:	4b12      	ldr	r3, [pc, #72]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	00db      	lsls	r3, r3, #3
 8005018:	490e      	ldr	r1, [pc, #56]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 800501a:	4313      	orrs	r3, r2
 800501c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800501e:	f000 f887 	bl	8005130 <HAL_RCC_GetSysClockFreq>
 8005022:	4602      	mov	r2, r0
 8005024:	4b0b      	ldr	r3, [pc, #44]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	091b      	lsrs	r3, r3, #4
 800502a:	f003 030f 	and.w	r3, r3, #15
 800502e:	490a      	ldr	r1, [pc, #40]	@ (8005058 <HAL_RCC_ClockConfig+0x1c0>)
 8005030:	5ccb      	ldrb	r3, [r1, r3]
 8005032:	fa22 f303 	lsr.w	r3, r2, r3
 8005036:	4a09      	ldr	r2, [pc, #36]	@ (800505c <HAL_RCC_ClockConfig+0x1c4>)
 8005038:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800503a:	4b09      	ldr	r3, [pc, #36]	@ (8005060 <HAL_RCC_ClockConfig+0x1c8>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4618      	mov	r0, r3
 8005040:	f7fe fc9a 	bl	8003978 <HAL_InitTick>

  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	40023c00 	.word	0x40023c00
 8005054:	40023800 	.word	0x40023800
 8005058:	08019aa4 	.word	0x08019aa4
 800505c:	20000038 	.word	0x20000038
 8005060:	2000003c 	.word	0x2000003c

08005064 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005064:	b480      	push	{r7}
 8005066:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005068:	4b03      	ldr	r3, [pc, #12]	@ (8005078 <HAL_RCC_GetHCLKFreq+0x14>)
 800506a:	681b      	ldr	r3, [r3, #0]
}
 800506c:	4618      	mov	r0, r3
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	20000038 	.word	0x20000038

0800507c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005080:	f7ff fff0 	bl	8005064 <HAL_RCC_GetHCLKFreq>
 8005084:	4602      	mov	r2, r0
 8005086:	4b05      	ldr	r3, [pc, #20]	@ (800509c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	0a9b      	lsrs	r3, r3, #10
 800508c:	f003 0307 	and.w	r3, r3, #7
 8005090:	4903      	ldr	r1, [pc, #12]	@ (80050a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005092:	5ccb      	ldrb	r3, [r1, r3]
 8005094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005098:	4618      	mov	r0, r3
 800509a:	bd80      	pop	{r7, pc}
 800509c:	40023800 	.word	0x40023800
 80050a0:	08019ab4 	.word	0x08019ab4

080050a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80050a8:	f7ff ffdc 	bl	8005064 <HAL_RCC_GetHCLKFreq>
 80050ac:	4602      	mov	r2, r0
 80050ae:	4b05      	ldr	r3, [pc, #20]	@ (80050c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	0b5b      	lsrs	r3, r3, #13
 80050b4:	f003 0307 	and.w	r3, r3, #7
 80050b8:	4903      	ldr	r1, [pc, #12]	@ (80050c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050ba:	5ccb      	ldrb	r3, [r1, r3]
 80050bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	40023800 	.word	0x40023800
 80050c8:	08019ab4 	.word	0x08019ab4

080050cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	220f      	movs	r2, #15
 80050da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80050dc:	4b12      	ldr	r3, [pc, #72]	@ (8005128 <HAL_RCC_GetClockConfig+0x5c>)
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f003 0203 	and.w	r2, r3, #3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80050e8:	4b0f      	ldr	r3, [pc, #60]	@ (8005128 <HAL_RCC_GetClockConfig+0x5c>)
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80050f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005128 <HAL_RCC_GetClockConfig+0x5c>)
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005100:	4b09      	ldr	r3, [pc, #36]	@ (8005128 <HAL_RCC_GetClockConfig+0x5c>)
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	08db      	lsrs	r3, r3, #3
 8005106:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800510e:	4b07      	ldr	r3, [pc, #28]	@ (800512c <HAL_RCC_GetClockConfig+0x60>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 020f 	and.w	r2, r3, #15
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	601a      	str	r2, [r3, #0]
}
 800511a:	bf00      	nop
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	40023800 	.word	0x40023800
 800512c:	40023c00 	.word	0x40023c00

08005130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005134:	b0a6      	sub	sp, #152	@ 0x98
 8005136:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005138:	2300      	movs	r3, #0
 800513a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800513e:	2300      	movs	r3, #0
 8005140:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8005144:	2300      	movs	r3, #0
 8005146:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800514a:	2300      	movs	r3, #0
 800514c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8005150:	2300      	movs	r3, #0
 8005152:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005156:	4bc8      	ldr	r3, [pc, #800]	@ (8005478 <HAL_RCC_GetSysClockFreq+0x348>)
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f003 030c 	and.w	r3, r3, #12
 800515e:	2b0c      	cmp	r3, #12
 8005160:	f200 817e 	bhi.w	8005460 <HAL_RCC_GetSysClockFreq+0x330>
 8005164:	a201      	add	r2, pc, #4	@ (adr r2, 800516c <HAL_RCC_GetSysClockFreq+0x3c>)
 8005166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800516a:	bf00      	nop
 800516c:	080051a1 	.word	0x080051a1
 8005170:	08005461 	.word	0x08005461
 8005174:	08005461 	.word	0x08005461
 8005178:	08005461 	.word	0x08005461
 800517c:	080051a9 	.word	0x080051a9
 8005180:	08005461 	.word	0x08005461
 8005184:	08005461 	.word	0x08005461
 8005188:	08005461 	.word	0x08005461
 800518c:	080051b1 	.word	0x080051b1
 8005190:	08005461 	.word	0x08005461
 8005194:	08005461 	.word	0x08005461
 8005198:	08005461 	.word	0x08005461
 800519c:	0800531b 	.word	0x0800531b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051a0:	4bb6      	ldr	r3, [pc, #728]	@ (800547c <HAL_RCC_GetSysClockFreq+0x34c>)
 80051a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80051a6:	e15f      	b.n	8005468 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051a8:	4bb5      	ldr	r3, [pc, #724]	@ (8005480 <HAL_RCC_GetSysClockFreq+0x350>)
 80051aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80051ae:	e15b      	b.n	8005468 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051b0:	4bb1      	ldr	r3, [pc, #708]	@ (8005478 <HAL_RCC_GetSysClockFreq+0x348>)
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051bc:	4bae      	ldr	r3, [pc, #696]	@ (8005478 <HAL_RCC_GetSysClockFreq+0x348>)
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d031      	beq.n	800522c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051c8:	4bab      	ldr	r3, [pc, #684]	@ (8005478 <HAL_RCC_GetSysClockFreq+0x348>)
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	099b      	lsrs	r3, r3, #6
 80051ce:	2200      	movs	r2, #0
 80051d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80051d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80051d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051da:	663b      	str	r3, [r7, #96]	@ 0x60
 80051dc:	2300      	movs	r3, #0
 80051de:	667b      	str	r3, [r7, #100]	@ 0x64
 80051e0:	4ba7      	ldr	r3, [pc, #668]	@ (8005480 <HAL_RCC_GetSysClockFreq+0x350>)
 80051e2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80051e6:	462a      	mov	r2, r5
 80051e8:	fb03 f202 	mul.w	r2, r3, r2
 80051ec:	2300      	movs	r3, #0
 80051ee:	4621      	mov	r1, r4
 80051f0:	fb01 f303 	mul.w	r3, r1, r3
 80051f4:	4413      	add	r3, r2
 80051f6:	4aa2      	ldr	r2, [pc, #648]	@ (8005480 <HAL_RCC_GetSysClockFreq+0x350>)
 80051f8:	4621      	mov	r1, r4
 80051fa:	fba1 1202 	umull	r1, r2, r1, r2
 80051fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005200:	460a      	mov	r2, r1
 8005202:	67ba      	str	r2, [r7, #120]	@ 0x78
 8005204:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005206:	4413      	add	r3, r2
 8005208:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800520a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800520e:	2200      	movs	r2, #0
 8005210:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005212:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005214:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005218:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800521c:	f7fb fcce 	bl	8000bbc <__aeabi_uldivmod>
 8005220:	4602      	mov	r2, r0
 8005222:	460b      	mov	r3, r1
 8005224:	4613      	mov	r3, r2
 8005226:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800522a:	e064      	b.n	80052f6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800522c:	4b92      	ldr	r3, [pc, #584]	@ (8005478 <HAL_RCC_GetSysClockFreq+0x348>)
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	099b      	lsrs	r3, r3, #6
 8005232:	2200      	movs	r2, #0
 8005234:	653b      	str	r3, [r7, #80]	@ 0x50
 8005236:	657a      	str	r2, [r7, #84]	@ 0x54
 8005238:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800523a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800523e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005240:	2300      	movs	r3, #0
 8005242:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005244:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8005248:	4622      	mov	r2, r4
 800524a:	462b      	mov	r3, r5
 800524c:	f04f 0000 	mov.w	r0, #0
 8005250:	f04f 0100 	mov.w	r1, #0
 8005254:	0159      	lsls	r1, r3, #5
 8005256:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800525a:	0150      	lsls	r0, r2, #5
 800525c:	4602      	mov	r2, r0
 800525e:	460b      	mov	r3, r1
 8005260:	4621      	mov	r1, r4
 8005262:	1a51      	subs	r1, r2, r1
 8005264:	6139      	str	r1, [r7, #16]
 8005266:	4629      	mov	r1, r5
 8005268:	eb63 0301 	sbc.w	r3, r3, r1
 800526c:	617b      	str	r3, [r7, #20]
 800526e:	f04f 0200 	mov.w	r2, #0
 8005272:	f04f 0300 	mov.w	r3, #0
 8005276:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800527a:	4659      	mov	r1, fp
 800527c:	018b      	lsls	r3, r1, #6
 800527e:	4651      	mov	r1, sl
 8005280:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005284:	4651      	mov	r1, sl
 8005286:	018a      	lsls	r2, r1, #6
 8005288:	4651      	mov	r1, sl
 800528a:	ebb2 0801 	subs.w	r8, r2, r1
 800528e:	4659      	mov	r1, fp
 8005290:	eb63 0901 	sbc.w	r9, r3, r1
 8005294:	f04f 0200 	mov.w	r2, #0
 8005298:	f04f 0300 	mov.w	r3, #0
 800529c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052a0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052a4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052a8:	4690      	mov	r8, r2
 80052aa:	4699      	mov	r9, r3
 80052ac:	4623      	mov	r3, r4
 80052ae:	eb18 0303 	adds.w	r3, r8, r3
 80052b2:	60bb      	str	r3, [r7, #8]
 80052b4:	462b      	mov	r3, r5
 80052b6:	eb49 0303 	adc.w	r3, r9, r3
 80052ba:	60fb      	str	r3, [r7, #12]
 80052bc:	f04f 0200 	mov.w	r2, #0
 80052c0:	f04f 0300 	mov.w	r3, #0
 80052c4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80052c8:	4629      	mov	r1, r5
 80052ca:	028b      	lsls	r3, r1, #10
 80052cc:	4621      	mov	r1, r4
 80052ce:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052d2:	4621      	mov	r1, r4
 80052d4:	028a      	lsls	r2, r1, #10
 80052d6:	4610      	mov	r0, r2
 80052d8:	4619      	mov	r1, r3
 80052da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052de:	2200      	movs	r2, #0
 80052e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80052e2:	647a      	str	r2, [r7, #68]	@ 0x44
 80052e4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80052e8:	f7fb fc68 	bl	8000bbc <__aeabi_uldivmod>
 80052ec:	4602      	mov	r2, r0
 80052ee:	460b      	mov	r3, r1
 80052f0:	4613      	mov	r3, r2
 80052f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80052f6:	4b60      	ldr	r3, [pc, #384]	@ (8005478 <HAL_RCC_GetSysClockFreq+0x348>)
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	0c1b      	lsrs	r3, r3, #16
 80052fc:	f003 0303 	and.w	r3, r3, #3
 8005300:	3301      	adds	r3, #1
 8005302:	005b      	lsls	r3, r3, #1
 8005304:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8005308:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800530c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005310:	fbb2 f3f3 	udiv	r3, r2, r3
 8005314:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005318:	e0a6      	b.n	8005468 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800531a:	4b57      	ldr	r3, [pc, #348]	@ (8005478 <HAL_RCC_GetSysClockFreq+0x348>)
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005322:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005326:	4b54      	ldr	r3, [pc, #336]	@ (8005478 <HAL_RCC_GetSysClockFreq+0x348>)
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d02a      	beq.n	8005388 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005332:	4b51      	ldr	r3, [pc, #324]	@ (8005478 <HAL_RCC_GetSysClockFreq+0x348>)
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	099b      	lsrs	r3, r3, #6
 8005338:	2200      	movs	r2, #0
 800533a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800533c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800533e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005340:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005344:	2100      	movs	r1, #0
 8005346:	4b4e      	ldr	r3, [pc, #312]	@ (8005480 <HAL_RCC_GetSysClockFreq+0x350>)
 8005348:	fb03 f201 	mul.w	r2, r3, r1
 800534c:	2300      	movs	r3, #0
 800534e:	fb00 f303 	mul.w	r3, r0, r3
 8005352:	4413      	add	r3, r2
 8005354:	4a4a      	ldr	r2, [pc, #296]	@ (8005480 <HAL_RCC_GetSysClockFreq+0x350>)
 8005356:	fba0 1202 	umull	r1, r2, r0, r2
 800535a:	677a      	str	r2, [r7, #116]	@ 0x74
 800535c:	460a      	mov	r2, r1
 800535e:	673a      	str	r2, [r7, #112]	@ 0x70
 8005360:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005362:	4413      	add	r3, r2
 8005364:	677b      	str	r3, [r7, #116]	@ 0x74
 8005366:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800536a:	2200      	movs	r2, #0
 800536c:	633b      	str	r3, [r7, #48]	@ 0x30
 800536e:	637a      	str	r2, [r7, #52]	@ 0x34
 8005370:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8005374:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8005378:	f7fb fc20 	bl	8000bbc <__aeabi_uldivmod>
 800537c:	4602      	mov	r2, r0
 800537e:	460b      	mov	r3, r1
 8005380:	4613      	mov	r3, r2
 8005382:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005386:	e05b      	b.n	8005440 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005388:	4b3b      	ldr	r3, [pc, #236]	@ (8005478 <HAL_RCC_GetSysClockFreq+0x348>)
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	099b      	lsrs	r3, r3, #6
 800538e:	2200      	movs	r2, #0
 8005390:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005392:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800539a:	623b      	str	r3, [r7, #32]
 800539c:	2300      	movs	r3, #0
 800539e:	627b      	str	r3, [r7, #36]	@ 0x24
 80053a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80053a4:	4642      	mov	r2, r8
 80053a6:	464b      	mov	r3, r9
 80053a8:	f04f 0000 	mov.w	r0, #0
 80053ac:	f04f 0100 	mov.w	r1, #0
 80053b0:	0159      	lsls	r1, r3, #5
 80053b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053b6:	0150      	lsls	r0, r2, #5
 80053b8:	4602      	mov	r2, r0
 80053ba:	460b      	mov	r3, r1
 80053bc:	4641      	mov	r1, r8
 80053be:	ebb2 0a01 	subs.w	sl, r2, r1
 80053c2:	4649      	mov	r1, r9
 80053c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80053c8:	f04f 0200 	mov.w	r2, #0
 80053cc:	f04f 0300 	mov.w	r3, #0
 80053d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80053d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80053d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80053dc:	ebb2 040a 	subs.w	r4, r2, sl
 80053e0:	eb63 050b 	sbc.w	r5, r3, fp
 80053e4:	f04f 0200 	mov.w	r2, #0
 80053e8:	f04f 0300 	mov.w	r3, #0
 80053ec:	00eb      	lsls	r3, r5, #3
 80053ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053f2:	00e2      	lsls	r2, r4, #3
 80053f4:	4614      	mov	r4, r2
 80053f6:	461d      	mov	r5, r3
 80053f8:	4643      	mov	r3, r8
 80053fa:	18e3      	adds	r3, r4, r3
 80053fc:	603b      	str	r3, [r7, #0]
 80053fe:	464b      	mov	r3, r9
 8005400:	eb45 0303 	adc.w	r3, r5, r3
 8005404:	607b      	str	r3, [r7, #4]
 8005406:	f04f 0200 	mov.w	r2, #0
 800540a:	f04f 0300 	mov.w	r3, #0
 800540e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005412:	4629      	mov	r1, r5
 8005414:	028b      	lsls	r3, r1, #10
 8005416:	4621      	mov	r1, r4
 8005418:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800541c:	4621      	mov	r1, r4
 800541e:	028a      	lsls	r2, r1, #10
 8005420:	4610      	mov	r0, r2
 8005422:	4619      	mov	r1, r3
 8005424:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005428:	2200      	movs	r2, #0
 800542a:	61bb      	str	r3, [r7, #24]
 800542c:	61fa      	str	r2, [r7, #28]
 800542e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005432:	f7fb fbc3 	bl	8000bbc <__aeabi_uldivmod>
 8005436:	4602      	mov	r2, r0
 8005438:	460b      	mov	r3, r1
 800543a:	4613      	mov	r3, r2
 800543c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005440:	4b0d      	ldr	r3, [pc, #52]	@ (8005478 <HAL_RCC_GetSysClockFreq+0x348>)
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	0f1b      	lsrs	r3, r3, #28
 8005446:	f003 0307 	and.w	r3, r3, #7
 800544a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 800544e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005452:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005456:	fbb2 f3f3 	udiv	r3, r2, r3
 800545a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800545e:	e003      	b.n	8005468 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005460:	4b06      	ldr	r3, [pc, #24]	@ (800547c <HAL_RCC_GetSysClockFreq+0x34c>)
 8005462:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005466:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005468:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 800546c:	4618      	mov	r0, r3
 800546e:	3798      	adds	r7, #152	@ 0x98
 8005470:	46bd      	mov	sp, r7
 8005472:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005476:	bf00      	nop
 8005478:	40023800 	.word	0x40023800
 800547c:	00f42400 	.word	0x00f42400
 8005480:	017d7840 	.word	0x017d7840

08005484 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e28d      	b.n	80059b2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b00      	cmp	r3, #0
 80054a0:	f000 8083 	beq.w	80055aa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80054a4:	4b94      	ldr	r3, [pc, #592]	@ (80056f8 <HAL_RCC_OscConfig+0x274>)
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f003 030c 	and.w	r3, r3, #12
 80054ac:	2b04      	cmp	r3, #4
 80054ae:	d019      	beq.n	80054e4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80054b0:	4b91      	ldr	r3, [pc, #580]	@ (80056f8 <HAL_RCC_OscConfig+0x274>)
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f003 030c 	and.w	r3, r3, #12
        || \
 80054b8:	2b08      	cmp	r3, #8
 80054ba:	d106      	bne.n	80054ca <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80054bc:	4b8e      	ldr	r3, [pc, #568]	@ (80056f8 <HAL_RCC_OscConfig+0x274>)
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054c8:	d00c      	beq.n	80054e4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054ca:	4b8b      	ldr	r3, [pc, #556]	@ (80056f8 <HAL_RCC_OscConfig+0x274>)
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80054d2:	2b0c      	cmp	r3, #12
 80054d4:	d112      	bne.n	80054fc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054d6:	4b88      	ldr	r3, [pc, #544]	@ (80056f8 <HAL_RCC_OscConfig+0x274>)
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054e2:	d10b      	bne.n	80054fc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054e4:	4b84      	ldr	r3, [pc, #528]	@ (80056f8 <HAL_RCC_OscConfig+0x274>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d05b      	beq.n	80055a8 <HAL_RCC_OscConfig+0x124>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d157      	bne.n	80055a8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e25a      	b.n	80059b2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005504:	d106      	bne.n	8005514 <HAL_RCC_OscConfig+0x90>
 8005506:	4b7c      	ldr	r3, [pc, #496]	@ (80056f8 <HAL_RCC_OscConfig+0x274>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a7b      	ldr	r2, [pc, #492]	@ (80056f8 <HAL_RCC_OscConfig+0x274>)
 800550c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005510:	6013      	str	r3, [r2, #0]
 8005512:	e01d      	b.n	8005550 <HAL_RCC_OscConfig+0xcc>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800551c:	d10c      	bne.n	8005538 <HAL_RCC_OscConfig+0xb4>
 800551e:	4b76      	ldr	r3, [pc, #472]	@ (80056f8 <HAL_RCC_OscConfig+0x274>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a75      	ldr	r2, [pc, #468]	@ (80056f8 <HAL_RCC_OscConfig+0x274>)
 8005524:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005528:	6013      	str	r3, [r2, #0]
 800552a:	4b73      	ldr	r3, [pc, #460]	@ (80056f8 <HAL_RCC_OscConfig+0x274>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a72      	ldr	r2, [pc, #456]	@ (80056f8 <HAL_RCC_OscConfig+0x274>)
 8005530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005534:	6013      	str	r3, [r2, #0]
 8005536:	e00b      	b.n	8005550 <HAL_RCC_OscConfig+0xcc>
 8005538:	4b6f      	ldr	r3, [pc, #444]	@ (80056f8 <HAL_RCC_OscConfig+0x274>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a6e      	ldr	r2, [pc, #440]	@ (80056f8 <HAL_RCC_OscConfig+0x274>)
 800553e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005542:	6013      	str	r3, [r2, #0]
 8005544:	4b6c      	ldr	r3, [pc, #432]	@ (80056f8 <HAL_RCC_OscConfig+0x274>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a6b      	ldr	r2, [pc, #428]	@ (80056f8 <HAL_RCC_OscConfig+0x274>)
 800554a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800554e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d013      	beq.n	8005580 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005558:	f7fe fc54 	bl	8003e04 <HAL_GetTick>
 800555c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800555e:	e008      	b.n	8005572 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005560:	f7fe fc50 	bl	8003e04 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	2b64      	cmp	r3, #100	@ 0x64
 800556c:	d901      	bls.n	8005572 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e21f      	b.n	80059b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005572:	4b61      	ldr	r3, [pc, #388]	@ (80056f8 <HAL_RCC_OscConfig+0x274>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d0f0      	beq.n	8005560 <HAL_RCC_OscConfig+0xdc>
 800557e:	e014      	b.n	80055aa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005580:	f7fe fc40 	bl	8003e04 <HAL_GetTick>
 8005584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005586:	e008      	b.n	800559a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005588:	f7fe fc3c 	bl	8003e04 <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	2b64      	cmp	r3, #100	@ 0x64
 8005594:	d901      	bls.n	800559a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e20b      	b.n	80059b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800559a:	4b57      	ldr	r3, [pc, #348]	@ (80056f8 <HAL_RCC_OscConfig+0x274>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1f0      	bne.n	8005588 <HAL_RCC_OscConfig+0x104>
 80055a6:	e000      	b.n	80055aa <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0302 	and.w	r3, r3, #2
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d06f      	beq.n	8005696 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80055b6:	4b50      	ldr	r3, [pc, #320]	@ (80056f8 <HAL_RCC_OscConfig+0x274>)
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f003 030c 	and.w	r3, r3, #12
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d017      	beq.n	80055f2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80055c2:	4b4d      	ldr	r3, [pc, #308]	@ (80056f8 <HAL_RCC_OscConfig+0x274>)
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f003 030c 	and.w	r3, r3, #12
        || \
 80055ca:	2b08      	cmp	r3, #8
 80055cc:	d105      	bne.n	80055da <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80055ce:	4b4a      	ldr	r3, [pc, #296]	@ (80056f8 <HAL_RCC_OscConfig+0x274>)
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00b      	beq.n	80055f2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055da:	4b47      	ldr	r3, [pc, #284]	@ (80056f8 <HAL_RCC_OscConfig+0x274>)
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80055e2:	2b0c      	cmp	r3, #12
 80055e4:	d11c      	bne.n	8005620 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055e6:	4b44      	ldr	r3, [pc, #272]	@ (80056f8 <HAL_RCC_OscConfig+0x274>)
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d116      	bne.n	8005620 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055f2:	4b41      	ldr	r3, [pc, #260]	@ (80056f8 <HAL_RCC_OscConfig+0x274>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0302 	and.w	r3, r3, #2
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d005      	beq.n	800560a <HAL_RCC_OscConfig+0x186>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d001      	beq.n	800560a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e1d3      	b.n	80059b2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800560a:	4b3b      	ldr	r3, [pc, #236]	@ (80056f8 <HAL_RCC_OscConfig+0x274>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	00db      	lsls	r3, r3, #3
 8005618:	4937      	ldr	r1, [pc, #220]	@ (80056f8 <HAL_RCC_OscConfig+0x274>)
 800561a:	4313      	orrs	r3, r2
 800561c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800561e:	e03a      	b.n	8005696 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d020      	beq.n	800566a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005628:	4b34      	ldr	r3, [pc, #208]	@ (80056fc <HAL_RCC_OscConfig+0x278>)
 800562a:	2201      	movs	r2, #1
 800562c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800562e:	f7fe fbe9 	bl	8003e04 <HAL_GetTick>
 8005632:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005634:	e008      	b.n	8005648 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005636:	f7fe fbe5 	bl	8003e04 <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	2b02      	cmp	r3, #2
 8005642:	d901      	bls.n	8005648 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e1b4      	b.n	80059b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005648:	4b2b      	ldr	r3, [pc, #172]	@ (80056f8 <HAL_RCC_OscConfig+0x274>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0302 	and.w	r3, r3, #2
 8005650:	2b00      	cmp	r3, #0
 8005652:	d0f0      	beq.n	8005636 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005654:	4b28      	ldr	r3, [pc, #160]	@ (80056f8 <HAL_RCC_OscConfig+0x274>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	00db      	lsls	r3, r3, #3
 8005662:	4925      	ldr	r1, [pc, #148]	@ (80056f8 <HAL_RCC_OscConfig+0x274>)
 8005664:	4313      	orrs	r3, r2
 8005666:	600b      	str	r3, [r1, #0]
 8005668:	e015      	b.n	8005696 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800566a:	4b24      	ldr	r3, [pc, #144]	@ (80056fc <HAL_RCC_OscConfig+0x278>)
 800566c:	2200      	movs	r2, #0
 800566e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005670:	f7fe fbc8 	bl	8003e04 <HAL_GetTick>
 8005674:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005676:	e008      	b.n	800568a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005678:	f7fe fbc4 	bl	8003e04 <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	2b02      	cmp	r3, #2
 8005684:	d901      	bls.n	800568a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e193      	b.n	80059b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800568a:	4b1b      	ldr	r3, [pc, #108]	@ (80056f8 <HAL_RCC_OscConfig+0x274>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0302 	and.w	r3, r3, #2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1f0      	bne.n	8005678 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0308 	and.w	r3, r3, #8
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d036      	beq.n	8005710 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d016      	beq.n	80056d8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056aa:	4b15      	ldr	r3, [pc, #84]	@ (8005700 <HAL_RCC_OscConfig+0x27c>)
 80056ac:	2201      	movs	r2, #1
 80056ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056b0:	f7fe fba8 	bl	8003e04 <HAL_GetTick>
 80056b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056b6:	e008      	b.n	80056ca <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056b8:	f7fe fba4 	bl	8003e04 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e173      	b.n	80059b2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056ca:	4b0b      	ldr	r3, [pc, #44]	@ (80056f8 <HAL_RCC_OscConfig+0x274>)
 80056cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d0f0      	beq.n	80056b8 <HAL_RCC_OscConfig+0x234>
 80056d6:	e01b      	b.n	8005710 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056d8:	4b09      	ldr	r3, [pc, #36]	@ (8005700 <HAL_RCC_OscConfig+0x27c>)
 80056da:	2200      	movs	r2, #0
 80056dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056de:	f7fe fb91 	bl	8003e04 <HAL_GetTick>
 80056e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056e4:	e00e      	b.n	8005704 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056e6:	f7fe fb8d 	bl	8003e04 <HAL_GetTick>
 80056ea:	4602      	mov	r2, r0
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d907      	bls.n	8005704 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e15c      	b.n	80059b2 <HAL_RCC_OscConfig+0x52e>
 80056f8:	40023800 	.word	0x40023800
 80056fc:	42470000 	.word	0x42470000
 8005700:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005704:	4b8a      	ldr	r3, [pc, #552]	@ (8005930 <HAL_RCC_OscConfig+0x4ac>)
 8005706:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005708:	f003 0302 	and.w	r3, r3, #2
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1ea      	bne.n	80056e6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0304 	and.w	r3, r3, #4
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 8097 	beq.w	800584c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800571e:	2300      	movs	r3, #0
 8005720:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005722:	4b83      	ldr	r3, [pc, #524]	@ (8005930 <HAL_RCC_OscConfig+0x4ac>)
 8005724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10f      	bne.n	800574e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800572e:	2300      	movs	r3, #0
 8005730:	60bb      	str	r3, [r7, #8]
 8005732:	4b7f      	ldr	r3, [pc, #508]	@ (8005930 <HAL_RCC_OscConfig+0x4ac>)
 8005734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005736:	4a7e      	ldr	r2, [pc, #504]	@ (8005930 <HAL_RCC_OscConfig+0x4ac>)
 8005738:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800573c:	6413      	str	r3, [r2, #64]	@ 0x40
 800573e:	4b7c      	ldr	r3, [pc, #496]	@ (8005930 <HAL_RCC_OscConfig+0x4ac>)
 8005740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005746:	60bb      	str	r3, [r7, #8]
 8005748:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800574a:	2301      	movs	r3, #1
 800574c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800574e:	4b79      	ldr	r3, [pc, #484]	@ (8005934 <HAL_RCC_OscConfig+0x4b0>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005756:	2b00      	cmp	r3, #0
 8005758:	d118      	bne.n	800578c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800575a:	4b76      	ldr	r3, [pc, #472]	@ (8005934 <HAL_RCC_OscConfig+0x4b0>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a75      	ldr	r2, [pc, #468]	@ (8005934 <HAL_RCC_OscConfig+0x4b0>)
 8005760:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005766:	f7fe fb4d 	bl	8003e04 <HAL_GetTick>
 800576a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800576c:	e008      	b.n	8005780 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800576e:	f7fe fb49 	bl	8003e04 <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	2b02      	cmp	r3, #2
 800577a:	d901      	bls.n	8005780 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e118      	b.n	80059b2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005780:	4b6c      	ldr	r3, [pc, #432]	@ (8005934 <HAL_RCC_OscConfig+0x4b0>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005788:	2b00      	cmp	r3, #0
 800578a:	d0f0      	beq.n	800576e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d106      	bne.n	80057a2 <HAL_RCC_OscConfig+0x31e>
 8005794:	4b66      	ldr	r3, [pc, #408]	@ (8005930 <HAL_RCC_OscConfig+0x4ac>)
 8005796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005798:	4a65      	ldr	r2, [pc, #404]	@ (8005930 <HAL_RCC_OscConfig+0x4ac>)
 800579a:	f043 0301 	orr.w	r3, r3, #1
 800579e:	6713      	str	r3, [r2, #112]	@ 0x70
 80057a0:	e01c      	b.n	80057dc <HAL_RCC_OscConfig+0x358>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	2b05      	cmp	r3, #5
 80057a8:	d10c      	bne.n	80057c4 <HAL_RCC_OscConfig+0x340>
 80057aa:	4b61      	ldr	r3, [pc, #388]	@ (8005930 <HAL_RCC_OscConfig+0x4ac>)
 80057ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ae:	4a60      	ldr	r2, [pc, #384]	@ (8005930 <HAL_RCC_OscConfig+0x4ac>)
 80057b0:	f043 0304 	orr.w	r3, r3, #4
 80057b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80057b6:	4b5e      	ldr	r3, [pc, #376]	@ (8005930 <HAL_RCC_OscConfig+0x4ac>)
 80057b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ba:	4a5d      	ldr	r2, [pc, #372]	@ (8005930 <HAL_RCC_OscConfig+0x4ac>)
 80057bc:	f043 0301 	orr.w	r3, r3, #1
 80057c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80057c2:	e00b      	b.n	80057dc <HAL_RCC_OscConfig+0x358>
 80057c4:	4b5a      	ldr	r3, [pc, #360]	@ (8005930 <HAL_RCC_OscConfig+0x4ac>)
 80057c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057c8:	4a59      	ldr	r2, [pc, #356]	@ (8005930 <HAL_RCC_OscConfig+0x4ac>)
 80057ca:	f023 0301 	bic.w	r3, r3, #1
 80057ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80057d0:	4b57      	ldr	r3, [pc, #348]	@ (8005930 <HAL_RCC_OscConfig+0x4ac>)
 80057d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057d4:	4a56      	ldr	r2, [pc, #344]	@ (8005930 <HAL_RCC_OscConfig+0x4ac>)
 80057d6:	f023 0304 	bic.w	r3, r3, #4
 80057da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d015      	beq.n	8005810 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e4:	f7fe fb0e 	bl	8003e04 <HAL_GetTick>
 80057e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057ea:	e00a      	b.n	8005802 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057ec:	f7fe fb0a 	bl	8003e04 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e0d7      	b.n	80059b2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005802:	4b4b      	ldr	r3, [pc, #300]	@ (8005930 <HAL_RCC_OscConfig+0x4ac>)
 8005804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d0ee      	beq.n	80057ec <HAL_RCC_OscConfig+0x368>
 800580e:	e014      	b.n	800583a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005810:	f7fe faf8 	bl	8003e04 <HAL_GetTick>
 8005814:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005816:	e00a      	b.n	800582e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005818:	f7fe faf4 	bl	8003e04 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005826:	4293      	cmp	r3, r2
 8005828:	d901      	bls.n	800582e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e0c1      	b.n	80059b2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800582e:	4b40      	ldr	r3, [pc, #256]	@ (8005930 <HAL_RCC_OscConfig+0x4ac>)
 8005830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1ee      	bne.n	8005818 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800583a:	7dfb      	ldrb	r3, [r7, #23]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d105      	bne.n	800584c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005840:	4b3b      	ldr	r3, [pc, #236]	@ (8005930 <HAL_RCC_OscConfig+0x4ac>)
 8005842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005844:	4a3a      	ldr	r2, [pc, #232]	@ (8005930 <HAL_RCC_OscConfig+0x4ac>)
 8005846:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800584a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	2b00      	cmp	r3, #0
 8005852:	f000 80ad 	beq.w	80059b0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005856:	4b36      	ldr	r3, [pc, #216]	@ (8005930 <HAL_RCC_OscConfig+0x4ac>)
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f003 030c 	and.w	r3, r3, #12
 800585e:	2b08      	cmp	r3, #8
 8005860:	d060      	beq.n	8005924 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	2b02      	cmp	r3, #2
 8005868:	d145      	bne.n	80058f6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800586a:	4b33      	ldr	r3, [pc, #204]	@ (8005938 <HAL_RCC_OscConfig+0x4b4>)
 800586c:	2200      	movs	r2, #0
 800586e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005870:	f7fe fac8 	bl	8003e04 <HAL_GetTick>
 8005874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005876:	e008      	b.n	800588a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005878:	f7fe fac4 	bl	8003e04 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	2b02      	cmp	r3, #2
 8005884:	d901      	bls.n	800588a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e093      	b.n	80059b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800588a:	4b29      	ldr	r3, [pc, #164]	@ (8005930 <HAL_RCC_OscConfig+0x4ac>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1f0      	bne.n	8005878 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	69da      	ldr	r2, [r3, #28]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	431a      	orrs	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a4:	019b      	lsls	r3, r3, #6
 80058a6:	431a      	orrs	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ac:	085b      	lsrs	r3, r3, #1
 80058ae:	3b01      	subs	r3, #1
 80058b0:	041b      	lsls	r3, r3, #16
 80058b2:	431a      	orrs	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b8:	061b      	lsls	r3, r3, #24
 80058ba:	431a      	orrs	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058c0:	071b      	lsls	r3, r3, #28
 80058c2:	491b      	ldr	r1, [pc, #108]	@ (8005930 <HAL_RCC_OscConfig+0x4ac>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058c8:	4b1b      	ldr	r3, [pc, #108]	@ (8005938 <HAL_RCC_OscConfig+0x4b4>)
 80058ca:	2201      	movs	r2, #1
 80058cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ce:	f7fe fa99 	bl	8003e04 <HAL_GetTick>
 80058d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058d4:	e008      	b.n	80058e8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058d6:	f7fe fa95 	bl	8003e04 <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d901      	bls.n	80058e8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e064      	b.n	80059b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058e8:	4b11      	ldr	r3, [pc, #68]	@ (8005930 <HAL_RCC_OscConfig+0x4ac>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d0f0      	beq.n	80058d6 <HAL_RCC_OscConfig+0x452>
 80058f4:	e05c      	b.n	80059b0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058f6:	4b10      	ldr	r3, [pc, #64]	@ (8005938 <HAL_RCC_OscConfig+0x4b4>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058fc:	f7fe fa82 	bl	8003e04 <HAL_GetTick>
 8005900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005902:	e008      	b.n	8005916 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005904:	f7fe fa7e 	bl	8003e04 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	2b02      	cmp	r3, #2
 8005910:	d901      	bls.n	8005916 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e04d      	b.n	80059b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005916:	4b06      	ldr	r3, [pc, #24]	@ (8005930 <HAL_RCC_OscConfig+0x4ac>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1f0      	bne.n	8005904 <HAL_RCC_OscConfig+0x480>
 8005922:	e045      	b.n	80059b0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d107      	bne.n	800593c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e040      	b.n	80059b2 <HAL_RCC_OscConfig+0x52e>
 8005930:	40023800 	.word	0x40023800
 8005934:	40007000 	.word	0x40007000
 8005938:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800593c:	4b1f      	ldr	r3, [pc, #124]	@ (80059bc <HAL_RCC_OscConfig+0x538>)
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d030      	beq.n	80059ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005954:	429a      	cmp	r2, r3
 8005956:	d129      	bne.n	80059ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005962:	429a      	cmp	r2, r3
 8005964:	d122      	bne.n	80059ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800596c:	4013      	ands	r3, r2
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005972:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005974:	4293      	cmp	r3, r2
 8005976:	d119      	bne.n	80059ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005982:	085b      	lsrs	r3, r3, #1
 8005984:	3b01      	subs	r3, #1
 8005986:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005988:	429a      	cmp	r2, r3
 800598a:	d10f      	bne.n	80059ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005996:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005998:	429a      	cmp	r2, r3
 800599a:	d107      	bne.n	80059ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059a6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d001      	beq.n	80059b0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e000      	b.n	80059b2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3718      	adds	r7, #24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	40023800 	.word	0x40023800

080059c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d101      	bne.n	80059d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e041      	b.n	8005a56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d106      	bne.n	80059ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f7fd fe08 	bl	80035fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2202      	movs	r2, #2
 80059f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	3304      	adds	r3, #4
 80059fc:	4619      	mov	r1, r3
 80059fe:	4610      	mov	r0, r2
 8005a00:	f000 fd8c 	bl	800651c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
	...

08005a60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d001      	beq.n	8005a78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e04e      	b.n	8005b16 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68da      	ldr	r2, [r3, #12]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f042 0201 	orr.w	r2, r2, #1
 8005a8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a23      	ldr	r2, [pc, #140]	@ (8005b24 <HAL_TIM_Base_Start_IT+0xc4>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d022      	beq.n	8005ae0 <HAL_TIM_Base_Start_IT+0x80>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aa2:	d01d      	beq.n	8005ae0 <HAL_TIM_Base_Start_IT+0x80>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a1f      	ldr	r2, [pc, #124]	@ (8005b28 <HAL_TIM_Base_Start_IT+0xc8>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d018      	beq.n	8005ae0 <HAL_TIM_Base_Start_IT+0x80>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a1e      	ldr	r2, [pc, #120]	@ (8005b2c <HAL_TIM_Base_Start_IT+0xcc>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d013      	beq.n	8005ae0 <HAL_TIM_Base_Start_IT+0x80>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a1c      	ldr	r2, [pc, #112]	@ (8005b30 <HAL_TIM_Base_Start_IT+0xd0>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d00e      	beq.n	8005ae0 <HAL_TIM_Base_Start_IT+0x80>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a1b      	ldr	r2, [pc, #108]	@ (8005b34 <HAL_TIM_Base_Start_IT+0xd4>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d009      	beq.n	8005ae0 <HAL_TIM_Base_Start_IT+0x80>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a19      	ldr	r2, [pc, #100]	@ (8005b38 <HAL_TIM_Base_Start_IT+0xd8>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d004      	beq.n	8005ae0 <HAL_TIM_Base_Start_IT+0x80>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a18      	ldr	r2, [pc, #96]	@ (8005b3c <HAL_TIM_Base_Start_IT+0xdc>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d111      	bne.n	8005b04 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f003 0307 	and.w	r3, r3, #7
 8005aea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2b06      	cmp	r3, #6
 8005af0:	d010      	beq.n	8005b14 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f042 0201 	orr.w	r2, r2, #1
 8005b00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b02:	e007      	b.n	8005b14 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f042 0201 	orr.w	r2, r2, #1
 8005b12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3714      	adds	r7, #20
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	40010000 	.word	0x40010000
 8005b28:	40000400 	.word	0x40000400
 8005b2c:	40000800 	.word	0x40000800
 8005b30:	40000c00 	.word	0x40000c00
 8005b34:	40010400 	.word	0x40010400
 8005b38:	40014000 	.word	0x40014000
 8005b3c:	40001800 	.word	0x40001800

08005b40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e041      	b.n	8005bd6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d106      	bne.n	8005b6c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f7fd fcfa 	bl	8003560 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2202      	movs	r2, #2
 8005b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	3304      	adds	r3, #4
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	4610      	mov	r0, r2
 8005b80:	f000 fccc 	bl	800651c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3708      	adds	r7, #8
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
	...

08005be0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d109      	bne.n	8005c04 <HAL_TIM_PWM_Start+0x24>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	bf14      	ite	ne
 8005bfc:	2301      	movne	r3, #1
 8005bfe:	2300      	moveq	r3, #0
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	e022      	b.n	8005c4a <HAL_TIM_PWM_Start+0x6a>
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	2b04      	cmp	r3, #4
 8005c08:	d109      	bne.n	8005c1e <HAL_TIM_PWM_Start+0x3e>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	bf14      	ite	ne
 8005c16:	2301      	movne	r3, #1
 8005c18:	2300      	moveq	r3, #0
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	e015      	b.n	8005c4a <HAL_TIM_PWM_Start+0x6a>
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	2b08      	cmp	r3, #8
 8005c22:	d109      	bne.n	8005c38 <HAL_TIM_PWM_Start+0x58>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	bf14      	ite	ne
 8005c30:	2301      	movne	r3, #1
 8005c32:	2300      	moveq	r3, #0
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	e008      	b.n	8005c4a <HAL_TIM_PWM_Start+0x6a>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	bf14      	ite	ne
 8005c44:	2301      	movne	r3, #1
 8005c46:	2300      	moveq	r3, #0
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d001      	beq.n	8005c52 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e07c      	b.n	8005d4c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d104      	bne.n	8005c62 <HAL_TIM_PWM_Start+0x82>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c60:	e013      	b.n	8005c8a <HAL_TIM_PWM_Start+0xaa>
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	2b04      	cmp	r3, #4
 8005c66:	d104      	bne.n	8005c72 <HAL_TIM_PWM_Start+0x92>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c70:	e00b      	b.n	8005c8a <HAL_TIM_PWM_Start+0xaa>
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	2b08      	cmp	r3, #8
 8005c76:	d104      	bne.n	8005c82 <HAL_TIM_PWM_Start+0xa2>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c80:	e003      	b.n	8005c8a <HAL_TIM_PWM_Start+0xaa>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2202      	movs	r2, #2
 8005c86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	6839      	ldr	r1, [r7, #0]
 8005c92:	4618      	mov	r0, r3
 8005c94:	f000 ff32 	bl	8006afc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a2d      	ldr	r2, [pc, #180]	@ (8005d54 <HAL_TIM_PWM_Start+0x174>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d004      	beq.n	8005cac <HAL_TIM_PWM_Start+0xcc>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a2c      	ldr	r2, [pc, #176]	@ (8005d58 <HAL_TIM_PWM_Start+0x178>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d101      	bne.n	8005cb0 <HAL_TIM_PWM_Start+0xd0>
 8005cac:	2301      	movs	r3, #1
 8005cae:	e000      	b.n	8005cb2 <HAL_TIM_PWM_Start+0xd2>
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d007      	beq.n	8005cc6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005cc4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a22      	ldr	r2, [pc, #136]	@ (8005d54 <HAL_TIM_PWM_Start+0x174>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d022      	beq.n	8005d16 <HAL_TIM_PWM_Start+0x136>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cd8:	d01d      	beq.n	8005d16 <HAL_TIM_PWM_Start+0x136>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a1f      	ldr	r2, [pc, #124]	@ (8005d5c <HAL_TIM_PWM_Start+0x17c>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d018      	beq.n	8005d16 <HAL_TIM_PWM_Start+0x136>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8005d60 <HAL_TIM_PWM_Start+0x180>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d013      	beq.n	8005d16 <HAL_TIM_PWM_Start+0x136>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a1c      	ldr	r2, [pc, #112]	@ (8005d64 <HAL_TIM_PWM_Start+0x184>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d00e      	beq.n	8005d16 <HAL_TIM_PWM_Start+0x136>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a16      	ldr	r2, [pc, #88]	@ (8005d58 <HAL_TIM_PWM_Start+0x178>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d009      	beq.n	8005d16 <HAL_TIM_PWM_Start+0x136>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a18      	ldr	r2, [pc, #96]	@ (8005d68 <HAL_TIM_PWM_Start+0x188>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d004      	beq.n	8005d16 <HAL_TIM_PWM_Start+0x136>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a16      	ldr	r2, [pc, #88]	@ (8005d6c <HAL_TIM_PWM_Start+0x18c>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d111      	bne.n	8005d3a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f003 0307 	and.w	r3, r3, #7
 8005d20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2b06      	cmp	r3, #6
 8005d26:	d010      	beq.n	8005d4a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f042 0201 	orr.w	r2, r2, #1
 8005d36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d38:	e007      	b.n	8005d4a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f042 0201 	orr.w	r2, r2, #1
 8005d48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	40010000 	.word	0x40010000
 8005d58:	40010400 	.word	0x40010400
 8005d5c:	40000400 	.word	0x40000400
 8005d60:	40000800 	.word	0x40000800
 8005d64:	40000c00 	.word	0x40000c00
 8005d68:	40014000 	.word	0x40014000
 8005d6c:	40001800 	.word	0x40001800

08005d70 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d101      	bne.n	8005d84 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e097      	b.n	8005eb4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d106      	bne.n	8005d9e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f7fd fb99 	bl	80034d0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2202      	movs	r2, #2
 8005da2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	6812      	ldr	r2, [r2, #0]
 8005db0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005db4:	f023 0307 	bic.w	r3, r3, #7
 8005db8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	3304      	adds	r3, #4
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	4610      	mov	r0, r2
 8005dc6:	f000 fba9 	bl	800651c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	699b      	ldr	r3, [r3, #24]
 8005dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	6a1b      	ldr	r3, [r3, #32]
 8005de0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005df2:	f023 0303 	bic.w	r3, r3, #3
 8005df6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	689a      	ldr	r2, [r3, #8]
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	021b      	lsls	r3, r3, #8
 8005e02:	4313      	orrs	r3, r2
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005e10:	f023 030c 	bic.w	r3, r3, #12
 8005e14:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e1c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	68da      	ldr	r2, [r3, #12]
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	69db      	ldr	r3, [r3, #28]
 8005e2a:	021b      	lsls	r3, r3, #8
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	011a      	lsls	r2, r3, #4
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	6a1b      	ldr	r3, [r3, #32]
 8005e3e:	031b      	lsls	r3, r3, #12
 8005e40:	4313      	orrs	r3, r2
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005e4e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005e56:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	685a      	ldr	r2, [r3, #4]
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	695b      	ldr	r3, [r3, #20]
 8005e60:	011b      	lsls	r3, r3, #4
 8005e62:	4313      	orrs	r3, r2
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3718      	adds	r7, #24
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ecc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005ed4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005edc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005ee4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d110      	bne.n	8005f0e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005eec:	7bfb      	ldrb	r3, [r7, #15]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d102      	bne.n	8005ef8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ef2:	7b7b      	ldrb	r3, [r7, #13]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d001      	beq.n	8005efc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e069      	b.n	8005fd0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2202      	movs	r2, #2
 8005f00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2202      	movs	r2, #2
 8005f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f0c:	e031      	b.n	8005f72 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	2b04      	cmp	r3, #4
 8005f12:	d110      	bne.n	8005f36 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f14:	7bbb      	ldrb	r3, [r7, #14]
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d102      	bne.n	8005f20 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f1a:	7b3b      	ldrb	r3, [r7, #12]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d001      	beq.n	8005f24 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e055      	b.n	8005fd0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2202      	movs	r2, #2
 8005f28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2202      	movs	r2, #2
 8005f30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f34:	e01d      	b.n	8005f72 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f36:	7bfb      	ldrb	r3, [r7, #15]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d108      	bne.n	8005f4e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f3c:	7bbb      	ldrb	r3, [r7, #14]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d105      	bne.n	8005f4e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f42:	7b7b      	ldrb	r3, [r7, #13]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d102      	bne.n	8005f4e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f48:	7b3b      	ldrb	r3, [r7, #12]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d001      	beq.n	8005f52 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e03e      	b.n	8005fd0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2202      	movs	r2, #2
 8005f56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2202      	movs	r2, #2
 8005f5e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2202      	movs	r2, #2
 8005f66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2202      	movs	r2, #2
 8005f6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d003      	beq.n	8005f80 <HAL_TIM_Encoder_Start+0xc4>
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	2b04      	cmp	r3, #4
 8005f7c:	d008      	beq.n	8005f90 <HAL_TIM_Encoder_Start+0xd4>
 8005f7e:	e00f      	b.n	8005fa0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2201      	movs	r2, #1
 8005f86:	2100      	movs	r1, #0
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f000 fdb7 	bl	8006afc <TIM_CCxChannelCmd>
      break;
 8005f8e:	e016      	b.n	8005fbe <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2201      	movs	r2, #1
 8005f96:	2104      	movs	r1, #4
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f000 fdaf 	bl	8006afc <TIM_CCxChannelCmd>
      break;
 8005f9e:	e00e      	b.n	8005fbe <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	2100      	movs	r1, #0
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f000 fda7 	bl	8006afc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	2104      	movs	r1, #4
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f000 fda0 	bl	8006afc <TIM_CCxChannelCmd>
      break;
 8005fbc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f042 0201 	orr.w	r2, r2, #1
 8005fcc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3710      	adds	r7, #16
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	f003 0302 	and.w	r3, r3, #2
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d020      	beq.n	800603c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f003 0302 	and.w	r3, r3, #2
 8006000:	2b00      	cmp	r3, #0
 8006002:	d01b      	beq.n	800603c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f06f 0202 	mvn.w	r2, #2
 800600c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2201      	movs	r2, #1
 8006012:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	699b      	ldr	r3, [r3, #24]
 800601a:	f003 0303 	and.w	r3, r3, #3
 800601e:	2b00      	cmp	r3, #0
 8006020:	d003      	beq.n	800602a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 fa5b 	bl	80064de <HAL_TIM_IC_CaptureCallback>
 8006028:	e005      	b.n	8006036 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 fa4d 	bl	80064ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 fa5e 	bl	80064f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	f003 0304 	and.w	r3, r3, #4
 8006042:	2b00      	cmp	r3, #0
 8006044:	d020      	beq.n	8006088 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f003 0304 	and.w	r3, r3, #4
 800604c:	2b00      	cmp	r3, #0
 800604e:	d01b      	beq.n	8006088 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f06f 0204 	mvn.w	r2, #4
 8006058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2202      	movs	r2, #2
 800605e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800606a:	2b00      	cmp	r3, #0
 800606c:	d003      	beq.n	8006076 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 fa35 	bl	80064de <HAL_TIM_IC_CaptureCallback>
 8006074:	e005      	b.n	8006082 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 fa27 	bl	80064ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 fa38 	bl	80064f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	f003 0308 	and.w	r3, r3, #8
 800608e:	2b00      	cmp	r3, #0
 8006090:	d020      	beq.n	80060d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f003 0308 	and.w	r3, r3, #8
 8006098:	2b00      	cmp	r3, #0
 800609a:	d01b      	beq.n	80060d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f06f 0208 	mvn.w	r2, #8
 80060a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2204      	movs	r2, #4
 80060aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	69db      	ldr	r3, [r3, #28]
 80060b2:	f003 0303 	and.w	r3, r3, #3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d003      	beq.n	80060c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 fa0f 	bl	80064de <HAL_TIM_IC_CaptureCallback>
 80060c0:	e005      	b.n	80060ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 fa01 	bl	80064ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 fa12 	bl	80064f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	f003 0310 	and.w	r3, r3, #16
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d020      	beq.n	8006120 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f003 0310 	and.w	r3, r3, #16
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d01b      	beq.n	8006120 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f06f 0210 	mvn.w	r2, #16
 80060f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2208      	movs	r2, #8
 80060f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	69db      	ldr	r3, [r3, #28]
 80060fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006102:	2b00      	cmp	r3, #0
 8006104:	d003      	beq.n	800610e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 f9e9 	bl	80064de <HAL_TIM_IC_CaptureCallback>
 800610c:	e005      	b.n	800611a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f9db 	bl	80064ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 f9ec 	bl	80064f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	f003 0301 	and.w	r3, r3, #1
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00c      	beq.n	8006144 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f003 0301 	and.w	r3, r3, #1
 8006130:	2b00      	cmp	r3, #0
 8006132:	d007      	beq.n	8006144 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f06f 0201 	mvn.w	r2, #1
 800613c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f7fd fdde 	bl	8003d00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00c      	beq.n	8006168 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006154:	2b00      	cmp	r3, #0
 8006156:	d007      	beq.n	8006168 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 fd76 	bl	8006c54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00c      	beq.n	800618c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006178:	2b00      	cmp	r3, #0
 800617a:	d007      	beq.n	800618c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 f9bd 	bl	8006506 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	f003 0320 	and.w	r3, r3, #32
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00c      	beq.n	80061b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f003 0320 	and.w	r3, r3, #32
 800619c:	2b00      	cmp	r3, #0
 800619e:	d007      	beq.n	80061b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f06f 0220 	mvn.w	r2, #32
 80061a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 fd48 	bl	8006c40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061b0:	bf00      	nop
 80061b2:	3710      	adds	r7, #16
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b086      	sub	sp, #24
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061c4:	2300      	movs	r3, #0
 80061c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d101      	bne.n	80061d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80061d2:	2302      	movs	r3, #2
 80061d4:	e0ae      	b.n	8006334 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2201      	movs	r2, #1
 80061da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2b0c      	cmp	r3, #12
 80061e2:	f200 809f 	bhi.w	8006324 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80061e6:	a201      	add	r2, pc, #4	@ (adr r2, 80061ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80061e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ec:	08006221 	.word	0x08006221
 80061f0:	08006325 	.word	0x08006325
 80061f4:	08006325 	.word	0x08006325
 80061f8:	08006325 	.word	0x08006325
 80061fc:	08006261 	.word	0x08006261
 8006200:	08006325 	.word	0x08006325
 8006204:	08006325 	.word	0x08006325
 8006208:	08006325 	.word	0x08006325
 800620c:	080062a3 	.word	0x080062a3
 8006210:	08006325 	.word	0x08006325
 8006214:	08006325 	.word	0x08006325
 8006218:	08006325 	.word	0x08006325
 800621c:	080062e3 	.word	0x080062e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68b9      	ldr	r1, [r7, #8]
 8006226:	4618      	mov	r0, r3
 8006228:	f000 fa1e 	bl	8006668 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	699a      	ldr	r2, [r3, #24]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f042 0208 	orr.w	r2, r2, #8
 800623a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	699a      	ldr	r2, [r3, #24]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f022 0204 	bic.w	r2, r2, #4
 800624a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6999      	ldr	r1, [r3, #24]
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	691a      	ldr	r2, [r3, #16]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	430a      	orrs	r2, r1
 800625c:	619a      	str	r2, [r3, #24]
      break;
 800625e:	e064      	b.n	800632a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68b9      	ldr	r1, [r7, #8]
 8006266:	4618      	mov	r0, r3
 8006268:	f000 fa6e 	bl	8006748 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	699a      	ldr	r2, [r3, #24]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800627a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	699a      	ldr	r2, [r3, #24]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800628a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6999      	ldr	r1, [r3, #24]
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	021a      	lsls	r2, r3, #8
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	430a      	orrs	r2, r1
 800629e:	619a      	str	r2, [r3, #24]
      break;
 80062a0:	e043      	b.n	800632a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68b9      	ldr	r1, [r7, #8]
 80062a8:	4618      	mov	r0, r3
 80062aa:	f000 fac3 	bl	8006834 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	69da      	ldr	r2, [r3, #28]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f042 0208 	orr.w	r2, r2, #8
 80062bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	69da      	ldr	r2, [r3, #28]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f022 0204 	bic.w	r2, r2, #4
 80062cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	69d9      	ldr	r1, [r3, #28]
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	691a      	ldr	r2, [r3, #16]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	430a      	orrs	r2, r1
 80062de:	61da      	str	r2, [r3, #28]
      break;
 80062e0:	e023      	b.n	800632a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68b9      	ldr	r1, [r7, #8]
 80062e8:	4618      	mov	r0, r3
 80062ea:	f000 fb17 	bl	800691c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	69da      	ldr	r2, [r3, #28]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	69da      	ldr	r2, [r3, #28]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800630c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	69d9      	ldr	r1, [r3, #28]
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	021a      	lsls	r2, r3, #8
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	430a      	orrs	r2, r1
 8006320:	61da      	str	r2, [r3, #28]
      break;
 8006322:	e002      	b.n	800632a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	75fb      	strb	r3, [r7, #23]
      break;
 8006328:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006332:	7dfb      	ldrb	r3, [r7, #23]
}
 8006334:	4618      	mov	r0, r3
 8006336:	3718      	adds	r7, #24
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006346:	2300      	movs	r3, #0
 8006348:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006350:	2b01      	cmp	r3, #1
 8006352:	d101      	bne.n	8006358 <HAL_TIM_ConfigClockSource+0x1c>
 8006354:	2302      	movs	r3, #2
 8006356:	e0b4      	b.n	80064c2 <HAL_TIM_ConfigClockSource+0x186>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2202      	movs	r2, #2
 8006364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006376:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800637e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68ba      	ldr	r2, [r7, #8]
 8006386:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006390:	d03e      	beq.n	8006410 <HAL_TIM_ConfigClockSource+0xd4>
 8006392:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006396:	f200 8087 	bhi.w	80064a8 <HAL_TIM_ConfigClockSource+0x16c>
 800639a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800639e:	f000 8086 	beq.w	80064ae <HAL_TIM_ConfigClockSource+0x172>
 80063a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063a6:	d87f      	bhi.n	80064a8 <HAL_TIM_ConfigClockSource+0x16c>
 80063a8:	2b70      	cmp	r3, #112	@ 0x70
 80063aa:	d01a      	beq.n	80063e2 <HAL_TIM_ConfigClockSource+0xa6>
 80063ac:	2b70      	cmp	r3, #112	@ 0x70
 80063ae:	d87b      	bhi.n	80064a8 <HAL_TIM_ConfigClockSource+0x16c>
 80063b0:	2b60      	cmp	r3, #96	@ 0x60
 80063b2:	d050      	beq.n	8006456 <HAL_TIM_ConfigClockSource+0x11a>
 80063b4:	2b60      	cmp	r3, #96	@ 0x60
 80063b6:	d877      	bhi.n	80064a8 <HAL_TIM_ConfigClockSource+0x16c>
 80063b8:	2b50      	cmp	r3, #80	@ 0x50
 80063ba:	d03c      	beq.n	8006436 <HAL_TIM_ConfigClockSource+0xfa>
 80063bc:	2b50      	cmp	r3, #80	@ 0x50
 80063be:	d873      	bhi.n	80064a8 <HAL_TIM_ConfigClockSource+0x16c>
 80063c0:	2b40      	cmp	r3, #64	@ 0x40
 80063c2:	d058      	beq.n	8006476 <HAL_TIM_ConfigClockSource+0x13a>
 80063c4:	2b40      	cmp	r3, #64	@ 0x40
 80063c6:	d86f      	bhi.n	80064a8 <HAL_TIM_ConfigClockSource+0x16c>
 80063c8:	2b30      	cmp	r3, #48	@ 0x30
 80063ca:	d064      	beq.n	8006496 <HAL_TIM_ConfigClockSource+0x15a>
 80063cc:	2b30      	cmp	r3, #48	@ 0x30
 80063ce:	d86b      	bhi.n	80064a8 <HAL_TIM_ConfigClockSource+0x16c>
 80063d0:	2b20      	cmp	r3, #32
 80063d2:	d060      	beq.n	8006496 <HAL_TIM_ConfigClockSource+0x15a>
 80063d4:	2b20      	cmp	r3, #32
 80063d6:	d867      	bhi.n	80064a8 <HAL_TIM_ConfigClockSource+0x16c>
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d05c      	beq.n	8006496 <HAL_TIM_ConfigClockSource+0x15a>
 80063dc:	2b10      	cmp	r3, #16
 80063de:	d05a      	beq.n	8006496 <HAL_TIM_ConfigClockSource+0x15a>
 80063e0:	e062      	b.n	80064a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063f2:	f000 fb63 	bl	8006abc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006404:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	609a      	str	r2, [r3, #8]
      break;
 800640e:	e04f      	b.n	80064b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006420:	f000 fb4c 	bl	8006abc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	689a      	ldr	r2, [r3, #8]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006432:	609a      	str	r2, [r3, #8]
      break;
 8006434:	e03c      	b.n	80064b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006442:	461a      	mov	r2, r3
 8006444:	f000 fac0 	bl	80069c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2150      	movs	r1, #80	@ 0x50
 800644e:	4618      	mov	r0, r3
 8006450:	f000 fb19 	bl	8006a86 <TIM_ITRx_SetConfig>
      break;
 8006454:	e02c      	b.n	80064b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006462:	461a      	mov	r2, r3
 8006464:	f000 fadf 	bl	8006a26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2160      	movs	r1, #96	@ 0x60
 800646e:	4618      	mov	r0, r3
 8006470:	f000 fb09 	bl	8006a86 <TIM_ITRx_SetConfig>
      break;
 8006474:	e01c      	b.n	80064b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006482:	461a      	mov	r2, r3
 8006484:	f000 faa0 	bl	80069c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2140      	movs	r1, #64	@ 0x40
 800648e:	4618      	mov	r0, r3
 8006490:	f000 faf9 	bl	8006a86 <TIM_ITRx_SetConfig>
      break;
 8006494:	e00c      	b.n	80064b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4619      	mov	r1, r3
 80064a0:	4610      	mov	r0, r2
 80064a2:	f000 faf0 	bl	8006a86 <TIM_ITRx_SetConfig>
      break;
 80064a6:	e003      	b.n	80064b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	73fb      	strb	r3, [r7, #15]
      break;
 80064ac:	e000      	b.n	80064b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80064ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80064c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3710      	adds	r7, #16
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064ca:	b480      	push	{r7}
 80064cc:	b083      	sub	sp, #12
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064d2:	bf00      	nop
 80064d4:	370c      	adds	r7, #12
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr

080064de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064de:	b480      	push	{r7}
 80064e0:	b083      	sub	sp, #12
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064e6:	bf00      	nop
 80064e8:	370c      	adds	r7, #12
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064f2:	b480      	push	{r7}
 80064f4:	b083      	sub	sp, #12
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064fa:	bf00      	nop
 80064fc:	370c      	adds	r7, #12
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr

08006506 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006506:	b480      	push	{r7}
 8006508:	b083      	sub	sp, #12
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800650e:	bf00      	nop
 8006510:	370c      	adds	r7, #12
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
	...

0800651c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a43      	ldr	r2, [pc, #268]	@ (800663c <TIM_Base_SetConfig+0x120>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d013      	beq.n	800655c <TIM_Base_SetConfig+0x40>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800653a:	d00f      	beq.n	800655c <TIM_Base_SetConfig+0x40>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a40      	ldr	r2, [pc, #256]	@ (8006640 <TIM_Base_SetConfig+0x124>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d00b      	beq.n	800655c <TIM_Base_SetConfig+0x40>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a3f      	ldr	r2, [pc, #252]	@ (8006644 <TIM_Base_SetConfig+0x128>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d007      	beq.n	800655c <TIM_Base_SetConfig+0x40>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a3e      	ldr	r2, [pc, #248]	@ (8006648 <TIM_Base_SetConfig+0x12c>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d003      	beq.n	800655c <TIM_Base_SetConfig+0x40>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a3d      	ldr	r2, [pc, #244]	@ (800664c <TIM_Base_SetConfig+0x130>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d108      	bne.n	800656e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006562:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	4313      	orrs	r3, r2
 800656c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a32      	ldr	r2, [pc, #200]	@ (800663c <TIM_Base_SetConfig+0x120>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d02b      	beq.n	80065ce <TIM_Base_SetConfig+0xb2>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800657c:	d027      	beq.n	80065ce <TIM_Base_SetConfig+0xb2>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a2f      	ldr	r2, [pc, #188]	@ (8006640 <TIM_Base_SetConfig+0x124>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d023      	beq.n	80065ce <TIM_Base_SetConfig+0xb2>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a2e      	ldr	r2, [pc, #184]	@ (8006644 <TIM_Base_SetConfig+0x128>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d01f      	beq.n	80065ce <TIM_Base_SetConfig+0xb2>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a2d      	ldr	r2, [pc, #180]	@ (8006648 <TIM_Base_SetConfig+0x12c>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d01b      	beq.n	80065ce <TIM_Base_SetConfig+0xb2>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a2c      	ldr	r2, [pc, #176]	@ (800664c <TIM_Base_SetConfig+0x130>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d017      	beq.n	80065ce <TIM_Base_SetConfig+0xb2>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a2b      	ldr	r2, [pc, #172]	@ (8006650 <TIM_Base_SetConfig+0x134>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d013      	beq.n	80065ce <TIM_Base_SetConfig+0xb2>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a2a      	ldr	r2, [pc, #168]	@ (8006654 <TIM_Base_SetConfig+0x138>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d00f      	beq.n	80065ce <TIM_Base_SetConfig+0xb2>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a29      	ldr	r2, [pc, #164]	@ (8006658 <TIM_Base_SetConfig+0x13c>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d00b      	beq.n	80065ce <TIM_Base_SetConfig+0xb2>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a28      	ldr	r2, [pc, #160]	@ (800665c <TIM_Base_SetConfig+0x140>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d007      	beq.n	80065ce <TIM_Base_SetConfig+0xb2>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a27      	ldr	r2, [pc, #156]	@ (8006660 <TIM_Base_SetConfig+0x144>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d003      	beq.n	80065ce <TIM_Base_SetConfig+0xb2>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a26      	ldr	r2, [pc, #152]	@ (8006664 <TIM_Base_SetConfig+0x148>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d108      	bne.n	80065e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	4313      	orrs	r3, r2
 80065de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	689a      	ldr	r2, [r3, #8]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a0e      	ldr	r2, [pc, #56]	@ (800663c <TIM_Base_SetConfig+0x120>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d003      	beq.n	800660e <TIM_Base_SetConfig+0xf2>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a10      	ldr	r2, [pc, #64]	@ (800664c <TIM_Base_SetConfig+0x130>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d103      	bne.n	8006616 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	691a      	ldr	r2, [r3, #16]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f043 0204 	orr.w	r2, r3, #4
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2201      	movs	r2, #1
 8006626:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	601a      	str	r2, [r3, #0]
}
 800662e:	bf00      	nop
 8006630:	3714      	adds	r7, #20
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	40010000 	.word	0x40010000
 8006640:	40000400 	.word	0x40000400
 8006644:	40000800 	.word	0x40000800
 8006648:	40000c00 	.word	0x40000c00
 800664c:	40010400 	.word	0x40010400
 8006650:	40014000 	.word	0x40014000
 8006654:	40014400 	.word	0x40014400
 8006658:	40014800 	.word	0x40014800
 800665c:	40001800 	.word	0x40001800
 8006660:	40001c00 	.word	0x40001c00
 8006664:	40002000 	.word	0x40002000

08006668 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006668:	b480      	push	{r7}
 800666a:	b087      	sub	sp, #28
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a1b      	ldr	r3, [r3, #32]
 8006676:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a1b      	ldr	r3, [r3, #32]
 800667c:	f023 0201 	bic.w	r2, r3, #1
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f023 0303 	bic.w	r3, r3, #3
 800669e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f023 0302 	bic.w	r3, r3, #2
 80066b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a20      	ldr	r2, [pc, #128]	@ (8006740 <TIM_OC1_SetConfig+0xd8>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d003      	beq.n	80066cc <TIM_OC1_SetConfig+0x64>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a1f      	ldr	r2, [pc, #124]	@ (8006744 <TIM_OC1_SetConfig+0xdc>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d10c      	bne.n	80066e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	f023 0308 	bic.w	r3, r3, #8
 80066d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	697a      	ldr	r2, [r7, #20]
 80066da:	4313      	orrs	r3, r2
 80066dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	f023 0304 	bic.w	r3, r3, #4
 80066e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a15      	ldr	r2, [pc, #84]	@ (8006740 <TIM_OC1_SetConfig+0xd8>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d003      	beq.n	80066f6 <TIM_OC1_SetConfig+0x8e>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a14      	ldr	r2, [pc, #80]	@ (8006744 <TIM_OC1_SetConfig+0xdc>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d111      	bne.n	800671a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006704:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	695b      	ldr	r3, [r3, #20]
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	4313      	orrs	r3, r2
 800670e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	4313      	orrs	r3, r2
 8006718:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	693a      	ldr	r2, [r7, #16]
 800671e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	685a      	ldr	r2, [r3, #4]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	697a      	ldr	r2, [r7, #20]
 8006732:	621a      	str	r2, [r3, #32]
}
 8006734:	bf00      	nop
 8006736:	371c      	adds	r7, #28
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr
 8006740:	40010000 	.word	0x40010000
 8006744:	40010400 	.word	0x40010400

08006748 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006748:	b480      	push	{r7}
 800674a:	b087      	sub	sp, #28
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a1b      	ldr	r3, [r3, #32]
 800675c:	f023 0210 	bic.w	r2, r3, #16
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800677e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	021b      	lsls	r3, r3, #8
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	4313      	orrs	r3, r2
 800678a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	f023 0320 	bic.w	r3, r3, #32
 8006792:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	011b      	lsls	r3, r3, #4
 800679a:	697a      	ldr	r2, [r7, #20]
 800679c:	4313      	orrs	r3, r2
 800679e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a22      	ldr	r2, [pc, #136]	@ (800682c <TIM_OC2_SetConfig+0xe4>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d003      	beq.n	80067b0 <TIM_OC2_SetConfig+0x68>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a21      	ldr	r2, [pc, #132]	@ (8006830 <TIM_OC2_SetConfig+0xe8>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d10d      	bne.n	80067cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	011b      	lsls	r3, r3, #4
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a17      	ldr	r2, [pc, #92]	@ (800682c <TIM_OC2_SetConfig+0xe4>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d003      	beq.n	80067dc <TIM_OC2_SetConfig+0x94>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a16      	ldr	r2, [pc, #88]	@ (8006830 <TIM_OC2_SetConfig+0xe8>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d113      	bne.n	8006804 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80067ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	695b      	ldr	r3, [r3, #20]
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	693a      	ldr	r2, [r7, #16]
 8006800:	4313      	orrs	r3, r2
 8006802:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	685a      	ldr	r2, [r3, #4]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	697a      	ldr	r2, [r7, #20]
 800681c:	621a      	str	r2, [r3, #32]
}
 800681e:	bf00      	nop
 8006820:	371c      	adds	r7, #28
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	40010000 	.word	0x40010000
 8006830:	40010400 	.word	0x40010400

08006834 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006834:	b480      	push	{r7}
 8006836:	b087      	sub	sp, #28
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a1b      	ldr	r3, [r3, #32]
 8006848:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	69db      	ldr	r3, [r3, #28]
 800685a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f023 0303 	bic.w	r3, r3, #3
 800686a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	4313      	orrs	r3, r2
 8006874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800687c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	021b      	lsls	r3, r3, #8
 8006884:	697a      	ldr	r2, [r7, #20]
 8006886:	4313      	orrs	r3, r2
 8006888:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a21      	ldr	r2, [pc, #132]	@ (8006914 <TIM_OC3_SetConfig+0xe0>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d003      	beq.n	800689a <TIM_OC3_SetConfig+0x66>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a20      	ldr	r2, [pc, #128]	@ (8006918 <TIM_OC3_SetConfig+0xe4>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d10d      	bne.n	80068b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80068a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	021b      	lsls	r3, r3, #8
 80068a8:	697a      	ldr	r2, [r7, #20]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80068b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a16      	ldr	r2, [pc, #88]	@ (8006914 <TIM_OC3_SetConfig+0xe0>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d003      	beq.n	80068c6 <TIM_OC3_SetConfig+0x92>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a15      	ldr	r2, [pc, #84]	@ (8006918 <TIM_OC3_SetConfig+0xe4>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d113      	bne.n	80068ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80068d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	011b      	lsls	r3, r3, #4
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	4313      	orrs	r3, r2
 80068e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	011b      	lsls	r3, r3, #4
 80068e8:	693a      	ldr	r2, [r7, #16]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	693a      	ldr	r2, [r7, #16]
 80068f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	685a      	ldr	r2, [r3, #4]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	697a      	ldr	r2, [r7, #20]
 8006906:	621a      	str	r2, [r3, #32]
}
 8006908:	bf00      	nop
 800690a:	371c      	adds	r7, #28
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr
 8006914:	40010000 	.word	0x40010000
 8006918:	40010400 	.word	0x40010400

0800691c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800691c:	b480      	push	{r7}
 800691e:	b087      	sub	sp, #28
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a1b      	ldr	r3, [r3, #32]
 800692a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a1b      	ldr	r3, [r3, #32]
 8006930:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	69db      	ldr	r3, [r3, #28]
 8006942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800694a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006952:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	021b      	lsls	r3, r3, #8
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	4313      	orrs	r3, r2
 800695e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006966:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	031b      	lsls	r3, r3, #12
 800696e:	693a      	ldr	r2, [r7, #16]
 8006970:	4313      	orrs	r3, r2
 8006972:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a12      	ldr	r2, [pc, #72]	@ (80069c0 <TIM_OC4_SetConfig+0xa4>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d003      	beq.n	8006984 <TIM_OC4_SetConfig+0x68>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a11      	ldr	r2, [pc, #68]	@ (80069c4 <TIM_OC4_SetConfig+0xa8>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d109      	bne.n	8006998 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800698a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	695b      	ldr	r3, [r3, #20]
 8006990:	019b      	lsls	r3, r3, #6
 8006992:	697a      	ldr	r2, [r7, #20]
 8006994:	4313      	orrs	r3, r2
 8006996:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	685a      	ldr	r2, [r3, #4]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	621a      	str	r2, [r3, #32]
}
 80069b2:	bf00      	nop
 80069b4:	371c      	adds	r7, #28
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop
 80069c0:	40010000 	.word	0x40010000
 80069c4:	40010400 	.word	0x40010400

080069c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b087      	sub	sp, #28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6a1b      	ldr	r3, [r3, #32]
 80069d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	f023 0201 	bic.w	r2, r3, #1
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	011b      	lsls	r3, r3, #4
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	f023 030a 	bic.w	r3, r3, #10
 8006a04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	693a      	ldr	r2, [r7, #16]
 8006a12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	621a      	str	r2, [r3, #32]
}
 8006a1a:	bf00      	nop
 8006a1c:	371c      	adds	r7, #28
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr

08006a26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a26:	b480      	push	{r7}
 8006a28:	b087      	sub	sp, #28
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	60f8      	str	r0, [r7, #12]
 8006a2e:	60b9      	str	r1, [r7, #8]
 8006a30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6a1b      	ldr	r3, [r3, #32]
 8006a36:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6a1b      	ldr	r3, [r3, #32]
 8006a3c:	f023 0210 	bic.w	r2, r3, #16
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	699b      	ldr	r3, [r3, #24]
 8006a48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006a50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	031b      	lsls	r3, r3, #12
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006a62:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	011b      	lsls	r3, r3, #4
 8006a68:	697a      	ldr	r2, [r7, #20]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	693a      	ldr	r2, [r7, #16]
 8006a72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	621a      	str	r2, [r3, #32]
}
 8006a7a:	bf00      	nop
 8006a7c:	371c      	adds	r7, #28
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr

08006a86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a86:	b480      	push	{r7}
 8006a88:	b085      	sub	sp, #20
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
 8006a8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a9e:	683a      	ldr	r2, [r7, #0]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	f043 0307 	orr.w	r3, r3, #7
 8006aa8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	609a      	str	r2, [r3, #8]
}
 8006ab0:	bf00      	nop
 8006ab2:	3714      	adds	r7, #20
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b087      	sub	sp, #28
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
 8006ac8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ad6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	021a      	lsls	r2, r3, #8
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	431a      	orrs	r2, r3
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	697a      	ldr	r2, [r7, #20]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	697a      	ldr	r2, [r7, #20]
 8006aee:	609a      	str	r2, [r3, #8]
}
 8006af0:	bf00      	nop
 8006af2:	371c      	adds	r7, #28
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b087      	sub	sp, #28
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	f003 031f 	and.w	r3, r3, #31
 8006b0e:	2201      	movs	r2, #1
 8006b10:	fa02 f303 	lsl.w	r3, r2, r3
 8006b14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6a1a      	ldr	r2, [r3, #32]
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	43db      	mvns	r3, r3
 8006b1e:	401a      	ands	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6a1a      	ldr	r2, [r3, #32]
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	f003 031f 	and.w	r3, r3, #31
 8006b2e:	6879      	ldr	r1, [r7, #4]
 8006b30:	fa01 f303 	lsl.w	r3, r1, r3
 8006b34:	431a      	orrs	r2, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	621a      	str	r2, [r3, #32]
}
 8006b3a:	bf00      	nop
 8006b3c:	371c      	adds	r7, #28
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr
	...

08006b48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d101      	bne.n	8006b60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b5c:	2302      	movs	r3, #2
 8006b5e:	e05a      	b.n	8006c16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2202      	movs	r2, #2
 8006b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a21      	ldr	r2, [pc, #132]	@ (8006c24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d022      	beq.n	8006bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bac:	d01d      	beq.n	8006bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a1d      	ldr	r2, [pc, #116]	@ (8006c28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d018      	beq.n	8006bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a1b      	ldr	r2, [pc, #108]	@ (8006c2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d013      	beq.n	8006bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a1a      	ldr	r2, [pc, #104]	@ (8006c30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d00e      	beq.n	8006bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a18      	ldr	r2, [pc, #96]	@ (8006c34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d009      	beq.n	8006bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a17      	ldr	r2, [pc, #92]	@ (8006c38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d004      	beq.n	8006bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a15      	ldr	r2, [pc, #84]	@ (8006c3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d10c      	bne.n	8006c04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bf0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	68ba      	ldr	r2, [r7, #8]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68ba      	ldr	r2, [r7, #8]
 8006c02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3714      	adds	r7, #20
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	40010000 	.word	0x40010000
 8006c28:	40000400 	.word	0x40000400
 8006c2c:	40000800 	.word	0x40000800
 8006c30:	40000c00 	.word	0x40000c00
 8006c34:	40010400 	.word	0x40010400
 8006c38:	40014000 	.word	0x40014000
 8006c3c:	40001800 	.word	0x40001800

08006c40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c48:	bf00      	nop
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c5c:	bf00      	nop
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d101      	bne.n	8006c7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e042      	b.n	8006d00 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d106      	bne.n	8006c94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f7fc fd64 	bl	800375c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2224      	movs	r2, #36	@ 0x24
 8006c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68da      	ldr	r2, [r3, #12]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006caa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f001 f8d9 	bl	8007e64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	691a      	ldr	r2, [r3, #16]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006cc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	695a      	ldr	r2, [r3, #20]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006cd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68da      	ldr	r2, [r3, #12]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006ce0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2220      	movs	r2, #32
 8006cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2220      	movs	r2, #32
 8006cf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3708      	adds	r7, #8
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b08a      	sub	sp, #40	@ 0x28
 8006d0c:	af02      	add	r7, sp, #8
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	603b      	str	r3, [r7, #0]
 8006d14:	4613      	mov	r3, r2
 8006d16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	2b20      	cmp	r3, #32
 8006d26:	d175      	bne.n	8006e14 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d002      	beq.n	8006d34 <HAL_UART_Transmit+0x2c>
 8006d2e:	88fb      	ldrh	r3, [r7, #6]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d101      	bne.n	8006d38 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e06e      	b.n	8006e16 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2221      	movs	r2, #33	@ 0x21
 8006d42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d46:	f7fd f85d 	bl	8003e04 <HAL_GetTick>
 8006d4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	88fa      	ldrh	r2, [r7, #6]
 8006d50:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	88fa      	ldrh	r2, [r7, #6]
 8006d56:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d60:	d108      	bne.n	8006d74 <HAL_UART_Transmit+0x6c>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d104      	bne.n	8006d74 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	61bb      	str	r3, [r7, #24]
 8006d72:	e003      	b.n	8006d7c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d7c:	e02e      	b.n	8006ddc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	9300      	str	r3, [sp, #0]
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	2200      	movs	r2, #0
 8006d86:	2180      	movs	r1, #128	@ 0x80
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f000 fdaa 	bl	80078e2 <UART_WaitOnFlagUntilTimeout>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d005      	beq.n	8006da0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2220      	movs	r2, #32
 8006d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e03a      	b.n	8006e16 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d10b      	bne.n	8006dbe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	881b      	ldrh	r3, [r3, #0]
 8006daa:	461a      	mov	r2, r3
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006db4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	3302      	adds	r3, #2
 8006dba:	61bb      	str	r3, [r7, #24]
 8006dbc:	e007      	b.n	8006dce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	781a      	ldrb	r2, [r3, #0]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	b29a      	uxth	r2, r3
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1cb      	bne.n	8006d7e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	9300      	str	r3, [sp, #0]
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	2200      	movs	r2, #0
 8006dee:	2140      	movs	r1, #64	@ 0x40
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f000 fd76 	bl	80078e2 <UART_WaitOnFlagUntilTimeout>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d005      	beq.n	8006e08 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2220      	movs	r2, #32
 8006e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006e04:	2303      	movs	r3, #3
 8006e06:	e006      	b.n	8006e16 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2220      	movs	r2, #32
 8006e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006e10:	2300      	movs	r3, #0
 8006e12:	e000      	b.n	8006e16 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006e14:	2302      	movs	r3, #2
  }
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3720      	adds	r7, #32
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
	...

08006e20 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b08c      	sub	sp, #48	@ 0x30
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	2b20      	cmp	r3, #32
 8006e38:	d162      	bne.n	8006f00 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d002      	beq.n	8006e46 <HAL_UART_Transmit_DMA+0x26>
 8006e40:	88fb      	ldrh	r3, [r7, #6]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d101      	bne.n	8006e4a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e05b      	b.n	8006f02 <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 8006e4a:	68ba      	ldr	r2, [r7, #8]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	88fa      	ldrh	r2, [r7, #6]
 8006e54:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	88fa      	ldrh	r2, [r7, #6]
 8006e5a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2221      	movs	r2, #33	@ 0x21
 8006e66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e6e:	4a27      	ldr	r2, [pc, #156]	@ (8006f0c <HAL_UART_Transmit_DMA+0xec>)
 8006e70:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e76:	4a26      	ldr	r2, [pc, #152]	@ (8006f10 <HAL_UART_Transmit_DMA+0xf0>)
 8006e78:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e7e:	4a25      	ldr	r2, [pc, #148]	@ (8006f14 <HAL_UART_Transmit_DMA+0xf4>)
 8006e80:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e86:	2200      	movs	r2, #0
 8006e88:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006e8a:	f107 0308 	add.w	r3, r7, #8
 8006e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e96:	6819      	ldr	r1, [r3, #0]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	3304      	adds	r3, #4
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	88fb      	ldrh	r3, [r7, #6]
 8006ea2:	f7fd f94b 	bl	800413c <HAL_DMA_Start_IT>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d008      	beq.n	8006ebe <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2210      	movs	r2, #16
 8006eb0:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2220      	movs	r2, #32
 8006eb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e021      	b.n	8006f02 <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006ec6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	3314      	adds	r3, #20
 8006ece:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	e853 3f00 	ldrex	r3, [r3]
 8006ed6:	617b      	str	r3, [r7, #20]
   return(result);
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ede:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	3314      	adds	r3, #20
 8006ee6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ee8:	627a      	str	r2, [r7, #36]	@ 0x24
 8006eea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eec:	6a39      	ldr	r1, [r7, #32]
 8006eee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ef0:	e841 2300 	strex	r3, r2, [r1]
 8006ef4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1e5      	bne.n	8006ec8 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 8006efc:	2300      	movs	r3, #0
 8006efe:	e000      	b.n	8006f02 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8006f00:	2302      	movs	r3, #2
  }
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3730      	adds	r7, #48	@ 0x30
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	08007631 	.word	0x08007631
 8006f10:	080076cb 	.word	0x080076cb
 8006f14:	0800784f 	.word	0x0800784f

08006f18 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	4613      	mov	r3, r2
 8006f24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	2b20      	cmp	r3, #32
 8006f30:	d112      	bne.n	8006f58 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d002      	beq.n	8006f3e <HAL_UART_Receive_DMA+0x26>
 8006f38:	88fb      	ldrh	r3, [r7, #6]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d101      	bne.n	8006f42 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e00b      	b.n	8006f5a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2200      	movs	r2, #0
 8006f46:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006f48:	88fb      	ldrh	r3, [r7, #6]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	68b9      	ldr	r1, [r7, #8]
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	f000 fd20 	bl	8007994 <UART_Start_Receive_DMA>
 8006f54:	4603      	mov	r3, r0
 8006f56:	e000      	b.n	8006f5a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006f58:	2302      	movs	r3, #2
  }
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b090      	sub	sp, #64	@ 0x40
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	695b      	ldr	r3, [r3, #20]
 8006f74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f78:	2b80      	cmp	r3, #128	@ 0x80
 8006f7a:	bf0c      	ite	eq
 8006f7c:	2301      	moveq	r3, #1
 8006f7e:	2300      	movne	r3, #0
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	2b21      	cmp	r3, #33	@ 0x21
 8006f8e:	d128      	bne.n	8006fe2 <HAL_UART_DMAStop+0x80>
 8006f90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d025      	beq.n	8006fe2 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	3314      	adds	r3, #20
 8006f9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa0:	e853 3f00 	ldrex	r3, [r3]
 8006fa4:	623b      	str	r3, [r7, #32]
   return(result);
 8006fa6:	6a3b      	ldr	r3, [r7, #32]
 8006fa8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fac:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	3314      	adds	r3, #20
 8006fb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006fb6:	633a      	str	r2, [r7, #48]	@ 0x30
 8006fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fbe:	e841 2300 	strex	r3, r2, [r1]
 8006fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d1e5      	bne.n	8006f96 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d004      	beq.n	8006fdc <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7fd f908 	bl	80041ec <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 fd7f 	bl	8007ae0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	695b      	ldr	r3, [r3, #20]
 8006fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fec:	2b40      	cmp	r3, #64	@ 0x40
 8006fee:	bf0c      	ite	eq
 8006ff0:	2301      	moveq	r3, #1
 8006ff2:	2300      	movne	r3, #0
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	2b22      	cmp	r3, #34	@ 0x22
 8007002:	d128      	bne.n	8007056 <HAL_UART_DMAStop+0xf4>
 8007004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007006:	2b00      	cmp	r3, #0
 8007008:	d025      	beq.n	8007056 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	3314      	adds	r3, #20
 8007010:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	e853 3f00 	ldrex	r3, [r3]
 8007018:	60fb      	str	r3, [r7, #12]
   return(result);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007020:	637b      	str	r3, [r7, #52]	@ 0x34
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	3314      	adds	r3, #20
 8007028:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800702a:	61fa      	str	r2, [r7, #28]
 800702c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702e:	69b9      	ldr	r1, [r7, #24]
 8007030:	69fa      	ldr	r2, [r7, #28]
 8007032:	e841 2300 	strex	r3, r2, [r1]
 8007036:	617b      	str	r3, [r7, #20]
   return(result);
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1e5      	bne.n	800700a <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007042:	2b00      	cmp	r3, #0
 8007044:	d004      	beq.n	8007050 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800704a:	4618      	mov	r0, r3
 800704c:	f7fd f8ce 	bl	80041ec <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 fd6d 	bl	8007b30 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3740      	adds	r7, #64	@ 0x40
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b0ba      	sub	sp, #232	@ 0xe8
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	695b      	ldr	r3, [r3, #20]
 8007082:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007086:	2300      	movs	r3, #0
 8007088:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800708c:	2300      	movs	r3, #0
 800708e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007096:	f003 030f 	and.w	r3, r3, #15
 800709a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800709e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d10f      	bne.n	80070c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80070a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070aa:	f003 0320 	and.w	r3, r3, #32
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d009      	beq.n	80070c6 <HAL_UART_IRQHandler+0x66>
 80070b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070b6:	f003 0320 	and.w	r3, r3, #32
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d003      	beq.n	80070c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 fe12 	bl	8007ce8 <UART_Receive_IT>
      return;
 80070c4:	e273      	b.n	80075ae <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80070c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	f000 80de 	beq.w	800728c <HAL_UART_IRQHandler+0x22c>
 80070d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070d4:	f003 0301 	and.w	r3, r3, #1
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d106      	bne.n	80070ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80070dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070e0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f000 80d1 	beq.w	800728c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80070ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070ee:	f003 0301 	and.w	r3, r3, #1
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00b      	beq.n	800710e <HAL_UART_IRQHandler+0xae>
 80070f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d005      	beq.n	800710e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007106:	f043 0201 	orr.w	r2, r3, #1
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800710e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007112:	f003 0304 	and.w	r3, r3, #4
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00b      	beq.n	8007132 <HAL_UART_IRQHandler+0xd2>
 800711a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800711e:	f003 0301 	and.w	r3, r3, #1
 8007122:	2b00      	cmp	r3, #0
 8007124:	d005      	beq.n	8007132 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800712a:	f043 0202 	orr.w	r2, r3, #2
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007136:	f003 0302 	and.w	r3, r3, #2
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00b      	beq.n	8007156 <HAL_UART_IRQHandler+0xf6>
 800713e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007142:	f003 0301 	and.w	r3, r3, #1
 8007146:	2b00      	cmp	r3, #0
 8007148:	d005      	beq.n	8007156 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800714e:	f043 0204 	orr.w	r2, r3, #4
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800715a:	f003 0308 	and.w	r3, r3, #8
 800715e:	2b00      	cmp	r3, #0
 8007160:	d011      	beq.n	8007186 <HAL_UART_IRQHandler+0x126>
 8007162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007166:	f003 0320 	and.w	r3, r3, #32
 800716a:	2b00      	cmp	r3, #0
 800716c:	d105      	bne.n	800717a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800716e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007172:	f003 0301 	and.w	r3, r3, #1
 8007176:	2b00      	cmp	r3, #0
 8007178:	d005      	beq.n	8007186 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800717e:	f043 0208 	orr.w	r2, r3, #8
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800718a:	2b00      	cmp	r3, #0
 800718c:	f000 820a 	beq.w	80075a4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007194:	f003 0320 	and.w	r3, r3, #32
 8007198:	2b00      	cmp	r3, #0
 800719a:	d008      	beq.n	80071ae <HAL_UART_IRQHandler+0x14e>
 800719c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071a0:	f003 0320 	and.w	r3, r3, #32
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d002      	beq.n	80071ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 fd9d 	bl	8007ce8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	695b      	ldr	r3, [r3, #20]
 80071b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071b8:	2b40      	cmp	r3, #64	@ 0x40
 80071ba:	bf0c      	ite	eq
 80071bc:	2301      	moveq	r3, #1
 80071be:	2300      	movne	r3, #0
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071ca:	f003 0308 	and.w	r3, r3, #8
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d103      	bne.n	80071da <HAL_UART_IRQHandler+0x17a>
 80071d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d04f      	beq.n	800727a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 fca8 	bl	8007b30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	695b      	ldr	r3, [r3, #20]
 80071e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071ea:	2b40      	cmp	r3, #64	@ 0x40
 80071ec:	d141      	bne.n	8007272 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	3314      	adds	r3, #20
 80071f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80071fc:	e853 3f00 	ldrex	r3, [r3]
 8007200:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007204:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007208:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800720c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	3314      	adds	r3, #20
 8007216:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800721a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800721e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007222:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007226:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800722a:	e841 2300 	strex	r3, r2, [r1]
 800722e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007232:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1d9      	bne.n	80071ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800723e:	2b00      	cmp	r3, #0
 8007240:	d013      	beq.n	800726a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007246:	4a8a      	ldr	r2, [pc, #552]	@ (8007470 <HAL_UART_IRQHandler+0x410>)
 8007248:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800724e:	4618      	mov	r0, r3
 8007250:	f7fd f83c 	bl	80042cc <HAL_DMA_Abort_IT>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d016      	beq.n	8007288 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800725e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007264:	4610      	mov	r0, r2
 8007266:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007268:	e00e      	b.n	8007288 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f9ca 	bl	8007604 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007270:	e00a      	b.n	8007288 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 f9c6 	bl	8007604 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007278:	e006      	b.n	8007288 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 f9c2 	bl	8007604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007286:	e18d      	b.n	80075a4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007288:	bf00      	nop
    return;
 800728a:	e18b      	b.n	80075a4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007290:	2b01      	cmp	r3, #1
 8007292:	f040 8167 	bne.w	8007564 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800729a:	f003 0310 	and.w	r3, r3, #16
 800729e:	2b00      	cmp	r3, #0
 80072a0:	f000 8160 	beq.w	8007564 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80072a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072a8:	f003 0310 	and.w	r3, r3, #16
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	f000 8159 	beq.w	8007564 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072b2:	2300      	movs	r3, #0
 80072b4:	60bb      	str	r3, [r7, #8]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	60bb      	str	r3, [r7, #8]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	60bb      	str	r3, [r7, #8]
 80072c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	695b      	ldr	r3, [r3, #20]
 80072ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072d2:	2b40      	cmp	r3, #64	@ 0x40
 80072d4:	f040 80ce 	bne.w	8007474 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80072e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f000 80a9 	beq.w	8007440 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80072f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80072f6:	429a      	cmp	r2, r3
 80072f8:	f080 80a2 	bcs.w	8007440 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007302:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007308:	69db      	ldr	r3, [r3, #28]
 800730a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800730e:	f000 8088 	beq.w	8007422 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	330c      	adds	r3, #12
 8007318:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007320:	e853 3f00 	ldrex	r3, [r3]
 8007324:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007328:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800732c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007330:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	330c      	adds	r3, #12
 800733a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800733e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007342:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007346:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800734a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800734e:	e841 2300 	strex	r3, r2, [r1]
 8007352:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007356:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800735a:	2b00      	cmp	r3, #0
 800735c:	d1d9      	bne.n	8007312 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	3314      	adds	r3, #20
 8007364:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007366:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007368:	e853 3f00 	ldrex	r3, [r3]
 800736c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800736e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007370:	f023 0301 	bic.w	r3, r3, #1
 8007374:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	3314      	adds	r3, #20
 800737e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007382:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007386:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007388:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800738a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800738e:	e841 2300 	strex	r3, r2, [r1]
 8007392:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007394:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007396:	2b00      	cmp	r3, #0
 8007398:	d1e1      	bne.n	800735e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	3314      	adds	r3, #20
 80073a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80073a4:	e853 3f00 	ldrex	r3, [r3]
 80073a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80073aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80073ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	3314      	adds	r3, #20
 80073ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80073be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80073c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80073c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80073c6:	e841 2300 	strex	r3, r2, [r1]
 80073ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80073cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d1e3      	bne.n	800739a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2220      	movs	r2, #32
 80073d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	330c      	adds	r3, #12
 80073e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073ea:	e853 3f00 	ldrex	r3, [r3]
 80073ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80073f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073f2:	f023 0310 	bic.w	r3, r3, #16
 80073f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	330c      	adds	r3, #12
 8007400:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007404:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007406:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007408:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800740a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800740c:	e841 2300 	strex	r3, r2, [r1]
 8007410:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007412:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007414:	2b00      	cmp	r3, #0
 8007416:	d1e3      	bne.n	80073e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800741c:	4618      	mov	r0, r3
 800741e:	f7fc fee5 	bl	80041ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2202      	movs	r2, #2
 8007426:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007430:	b29b      	uxth	r3, r3
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	b29b      	uxth	r3, r3
 8007436:	4619      	mov	r1, r3
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 f8ed 	bl	8007618 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800743e:	e0b3      	b.n	80075a8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007444:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007448:	429a      	cmp	r2, r3
 800744a:	f040 80ad 	bne.w	80075a8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007452:	69db      	ldr	r3, [r3, #28]
 8007454:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007458:	f040 80a6 	bne.w	80075a8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2202      	movs	r2, #2
 8007460:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007466:	4619      	mov	r1, r3
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 f8d5 	bl	8007618 <HAL_UARTEx_RxEventCallback>
      return;
 800746e:	e09b      	b.n	80075a8 <HAL_UART_IRQHandler+0x548>
 8007470:	08007bf7 	.word	0x08007bf7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800747c:	b29b      	uxth	r3, r3
 800747e:	1ad3      	subs	r3, r2, r3
 8007480:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007488:	b29b      	uxth	r3, r3
 800748a:	2b00      	cmp	r3, #0
 800748c:	f000 808e 	beq.w	80075ac <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8007490:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007494:	2b00      	cmp	r3, #0
 8007496:	f000 8089 	beq.w	80075ac <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	330c      	adds	r3, #12
 80074a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074a4:	e853 3f00 	ldrex	r3, [r3]
 80074a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80074aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	330c      	adds	r3, #12
 80074ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80074be:	647a      	str	r2, [r7, #68]	@ 0x44
 80074c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80074c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074c6:	e841 2300 	strex	r3, r2, [r1]
 80074ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80074cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1e3      	bne.n	800749a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	3314      	adds	r3, #20
 80074d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074dc:	e853 3f00 	ldrex	r3, [r3]
 80074e0:	623b      	str	r3, [r7, #32]
   return(result);
 80074e2:	6a3b      	ldr	r3, [r7, #32]
 80074e4:	f023 0301 	bic.w	r3, r3, #1
 80074e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	3314      	adds	r3, #20
 80074f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80074f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80074f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074fe:	e841 2300 	strex	r3, r2, [r1]
 8007502:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1e3      	bne.n	80074d2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2220      	movs	r2, #32
 800750e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	330c      	adds	r3, #12
 800751e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	e853 3f00 	ldrex	r3, [r3]
 8007526:	60fb      	str	r3, [r7, #12]
   return(result);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f023 0310 	bic.w	r3, r3, #16
 800752e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	330c      	adds	r3, #12
 8007538:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800753c:	61fa      	str	r2, [r7, #28]
 800753e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007540:	69b9      	ldr	r1, [r7, #24]
 8007542:	69fa      	ldr	r2, [r7, #28]
 8007544:	e841 2300 	strex	r3, r2, [r1]
 8007548:	617b      	str	r3, [r7, #20]
   return(result);
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1e3      	bne.n	8007518 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2202      	movs	r2, #2
 8007554:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007556:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800755a:	4619      	mov	r1, r3
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 f85b 	bl	8007618 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007562:	e023      	b.n	80075ac <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007568:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800756c:	2b00      	cmp	r3, #0
 800756e:	d009      	beq.n	8007584 <HAL_UART_IRQHandler+0x524>
 8007570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007574:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007578:	2b00      	cmp	r3, #0
 800757a:	d003      	beq.n	8007584 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 fb4b 	bl	8007c18 <UART_Transmit_IT>
    return;
 8007582:	e014      	b.n	80075ae <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00e      	beq.n	80075ae <HAL_UART_IRQHandler+0x54e>
 8007590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007598:	2b00      	cmp	r3, #0
 800759a:	d008      	beq.n	80075ae <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 fb8b 	bl	8007cb8 <UART_EndTransmit_IT>
    return;
 80075a2:	e004      	b.n	80075ae <HAL_UART_IRQHandler+0x54e>
    return;
 80075a4:	bf00      	nop
 80075a6:	e002      	b.n	80075ae <HAL_UART_IRQHandler+0x54e>
      return;
 80075a8:	bf00      	nop
 80075aa:	e000      	b.n	80075ae <HAL_UART_IRQHandler+0x54e>
      return;
 80075ac:	bf00      	nop
  }
}
 80075ae:	37e8      	adds	r7, #232	@ 0xe8
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80075bc:	bf00      	nop
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80075d0:	bf00      	nop
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80075e4:	bf00      	nop
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80075f8:	bf00      	nop
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	460b      	mov	r3, r1
 8007622:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007624:	bf00      	nop
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b090      	sub	sp, #64	@ 0x40
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800763c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007648:	2b00      	cmp	r3, #0
 800764a:	d137      	bne.n	80076bc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800764c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800764e:	2200      	movs	r2, #0
 8007650:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007652:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	3314      	adds	r3, #20
 8007658:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765c:	e853 3f00 	ldrex	r3, [r3]
 8007660:	623b      	str	r3, [r7, #32]
   return(result);
 8007662:	6a3b      	ldr	r3, [r7, #32]
 8007664:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007668:	63bb      	str	r3, [r7, #56]	@ 0x38
 800766a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	3314      	adds	r3, #20
 8007670:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007672:	633a      	str	r2, [r7, #48]	@ 0x30
 8007674:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007676:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007678:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800767a:	e841 2300 	strex	r3, r2, [r1]
 800767e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007682:	2b00      	cmp	r3, #0
 8007684:	d1e5      	bne.n	8007652 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	330c      	adds	r3, #12
 800768c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	e853 3f00 	ldrex	r3, [r3]
 8007694:	60fb      	str	r3, [r7, #12]
   return(result);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800769c:	637b      	str	r3, [r7, #52]	@ 0x34
 800769e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	330c      	adds	r3, #12
 80076a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80076a6:	61fa      	str	r2, [r7, #28]
 80076a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076aa:	69b9      	ldr	r1, [r7, #24]
 80076ac:	69fa      	ldr	r2, [r7, #28]
 80076ae:	e841 2300 	strex	r3, r2, [r1]
 80076b2:	617b      	str	r3, [r7, #20]
   return(result);
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1e5      	bne.n	8007686 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80076ba:	e002      	b.n	80076c2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80076bc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80076be:	f7ff ff79 	bl	80075b4 <HAL_UART_TxCpltCallback>
}
 80076c2:	bf00      	nop
 80076c4:	3740      	adds	r7, #64	@ 0x40
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b084      	sub	sp, #16
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076d6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f7ff ff75 	bl	80075c8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076de:	bf00      	nop
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b09c      	sub	sp, #112	@ 0x70
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076f2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d172      	bne.n	80077e8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007702:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007704:	2200      	movs	r2, #0
 8007706:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007708:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	330c      	adds	r3, #12
 800770e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007710:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007712:	e853 3f00 	ldrex	r3, [r3]
 8007716:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007718:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800771a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800771e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007720:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	330c      	adds	r3, #12
 8007726:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007728:	65ba      	str	r2, [r7, #88]	@ 0x58
 800772a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800772e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007730:	e841 2300 	strex	r3, r2, [r1]
 8007734:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007736:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007738:	2b00      	cmp	r3, #0
 800773a:	d1e5      	bne.n	8007708 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800773c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	3314      	adds	r3, #20
 8007742:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007746:	e853 3f00 	ldrex	r3, [r3]
 800774a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800774c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800774e:	f023 0301 	bic.w	r3, r3, #1
 8007752:	667b      	str	r3, [r7, #100]	@ 0x64
 8007754:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	3314      	adds	r3, #20
 800775a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800775c:	647a      	str	r2, [r7, #68]	@ 0x44
 800775e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007760:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007762:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007764:	e841 2300 	strex	r3, r2, [r1]
 8007768:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800776a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800776c:	2b00      	cmp	r3, #0
 800776e:	d1e5      	bne.n	800773c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007770:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	3314      	adds	r3, #20
 8007776:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800777a:	e853 3f00 	ldrex	r3, [r3]
 800777e:	623b      	str	r3, [r7, #32]
   return(result);
 8007780:	6a3b      	ldr	r3, [r7, #32]
 8007782:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007786:	663b      	str	r3, [r7, #96]	@ 0x60
 8007788:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	3314      	adds	r3, #20
 800778e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007790:	633a      	str	r2, [r7, #48]	@ 0x30
 8007792:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007794:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007796:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007798:	e841 2300 	strex	r3, r2, [r1]
 800779c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800779e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d1e5      	bne.n	8007770 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80077a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077a6:	2220      	movs	r2, #32
 80077a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d119      	bne.n	80077e8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	330c      	adds	r3, #12
 80077ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	e853 3f00 	ldrex	r3, [r3]
 80077c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f023 0310 	bic.w	r3, r3, #16
 80077ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80077cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	330c      	adds	r3, #12
 80077d2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80077d4:	61fa      	str	r2, [r7, #28]
 80077d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d8:	69b9      	ldr	r1, [r7, #24]
 80077da:	69fa      	ldr	r2, [r7, #28]
 80077dc:	e841 2300 	strex	r3, r2, [r1]
 80077e0:	617b      	str	r3, [r7, #20]
   return(result);
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d1e5      	bne.n	80077b4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077ea:	2200      	movs	r2, #0
 80077ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d106      	bne.n	8007804 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80077fa:	4619      	mov	r1, r3
 80077fc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80077fe:	f7ff ff0b 	bl	8007618 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007802:	e002      	b.n	800780a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007804:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007806:	f7ff fee9 	bl	80075dc <HAL_UART_RxCpltCallback>
}
 800780a:	bf00      	nop
 800780c:	3770      	adds	r7, #112	@ 0x70
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007812:	b580      	push	{r7, lr}
 8007814:	b084      	sub	sp, #16
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800781e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2201      	movs	r2, #1
 8007824:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800782a:	2b01      	cmp	r3, #1
 800782c:	d108      	bne.n	8007840 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007832:	085b      	lsrs	r3, r3, #1
 8007834:	b29b      	uxth	r3, r3
 8007836:	4619      	mov	r1, r3
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	f7ff feed 	bl	8007618 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800783e:	e002      	b.n	8007846 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007840:	68f8      	ldr	r0, [r7, #12]
 8007842:	f7ff fed5 	bl	80075f0 <HAL_UART_RxHalfCpltCallback>
}
 8007846:	bf00      	nop
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}

0800784e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800784e:	b580      	push	{r7, lr}
 8007850:	b084      	sub	sp, #16
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007856:	2300      	movs	r3, #0
 8007858:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800785e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	695b      	ldr	r3, [r3, #20]
 8007866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800786a:	2b80      	cmp	r3, #128	@ 0x80
 800786c:	bf0c      	ite	eq
 800786e:	2301      	moveq	r3, #1
 8007870:	2300      	movne	r3, #0
 8007872:	b2db      	uxtb	r3, r3
 8007874:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800787c:	b2db      	uxtb	r3, r3
 800787e:	2b21      	cmp	r3, #33	@ 0x21
 8007880:	d108      	bne.n	8007894 <UART_DMAError+0x46>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d005      	beq.n	8007894 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	2200      	movs	r2, #0
 800788c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800788e:	68b8      	ldr	r0, [r7, #8]
 8007890:	f000 f926 	bl	8007ae0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	695b      	ldr	r3, [r3, #20]
 800789a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800789e:	2b40      	cmp	r3, #64	@ 0x40
 80078a0:	bf0c      	ite	eq
 80078a2:	2301      	moveq	r3, #1
 80078a4:	2300      	movne	r3, #0
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	2b22      	cmp	r3, #34	@ 0x22
 80078b4:	d108      	bne.n	80078c8 <UART_DMAError+0x7a>
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d005      	beq.n	80078c8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	2200      	movs	r2, #0
 80078c0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80078c2:	68b8      	ldr	r0, [r7, #8]
 80078c4:	f000 f934 	bl	8007b30 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078cc:	f043 0210 	orr.w	r2, r3, #16
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078d4:	68b8      	ldr	r0, [r7, #8]
 80078d6:	f7ff fe95 	bl	8007604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078da:	bf00      	nop
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b086      	sub	sp, #24
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	60f8      	str	r0, [r7, #12]
 80078ea:	60b9      	str	r1, [r7, #8]
 80078ec:	603b      	str	r3, [r7, #0]
 80078ee:	4613      	mov	r3, r2
 80078f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078f2:	e03b      	b.n	800796c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078f4:	6a3b      	ldr	r3, [r7, #32]
 80078f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80078fa:	d037      	beq.n	800796c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078fc:	f7fc fa82 	bl	8003e04 <HAL_GetTick>
 8007900:	4602      	mov	r2, r0
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	1ad3      	subs	r3, r2, r3
 8007906:	6a3a      	ldr	r2, [r7, #32]
 8007908:	429a      	cmp	r2, r3
 800790a:	d302      	bcc.n	8007912 <UART_WaitOnFlagUntilTimeout+0x30>
 800790c:	6a3b      	ldr	r3, [r7, #32]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d101      	bne.n	8007916 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007912:	2303      	movs	r3, #3
 8007914:	e03a      	b.n	800798c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	f003 0304 	and.w	r3, r3, #4
 8007920:	2b00      	cmp	r3, #0
 8007922:	d023      	beq.n	800796c <UART_WaitOnFlagUntilTimeout+0x8a>
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	2b80      	cmp	r3, #128	@ 0x80
 8007928:	d020      	beq.n	800796c <UART_WaitOnFlagUntilTimeout+0x8a>
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	2b40      	cmp	r3, #64	@ 0x40
 800792e:	d01d      	beq.n	800796c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 0308 	and.w	r3, r3, #8
 800793a:	2b08      	cmp	r3, #8
 800793c:	d116      	bne.n	800796c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800793e:	2300      	movs	r3, #0
 8007940:	617b      	str	r3, [r7, #20]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	617b      	str	r3, [r7, #20]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	617b      	str	r3, [r7, #20]
 8007952:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f000 f8eb 	bl	8007b30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2208      	movs	r2, #8
 800795e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2200      	movs	r2, #0
 8007964:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	e00f      	b.n	800798c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	4013      	ands	r3, r2
 8007976:	68ba      	ldr	r2, [r7, #8]
 8007978:	429a      	cmp	r2, r3
 800797a:	bf0c      	ite	eq
 800797c:	2301      	moveq	r3, #1
 800797e:	2300      	movne	r3, #0
 8007980:	b2db      	uxtb	r3, r3
 8007982:	461a      	mov	r2, r3
 8007984:	79fb      	ldrb	r3, [r7, #7]
 8007986:	429a      	cmp	r2, r3
 8007988:	d0b4      	beq.n	80078f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3718      	adds	r7, #24
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b098      	sub	sp, #96	@ 0x60
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	60b9      	str	r1, [r7, #8]
 800799e:	4613      	mov	r3, r2
 80079a0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80079a2:	68ba      	ldr	r2, [r7, #8]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	88fa      	ldrh	r2, [r7, #6]
 80079ac:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2222      	movs	r2, #34	@ 0x22
 80079b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079c0:	4a44      	ldr	r2, [pc, #272]	@ (8007ad4 <UART_Start_Receive_DMA+0x140>)
 80079c2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079c8:	4a43      	ldr	r2, [pc, #268]	@ (8007ad8 <UART_Start_Receive_DMA+0x144>)
 80079ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079d0:	4a42      	ldr	r2, [pc, #264]	@ (8007adc <UART_Start_Receive_DMA+0x148>)
 80079d2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079d8:	2200      	movs	r2, #0
 80079da:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80079dc:	f107 0308 	add.w	r3, r7, #8
 80079e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	3304      	adds	r3, #4
 80079ec:	4619      	mov	r1, r3
 80079ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	88fb      	ldrh	r3, [r7, #6]
 80079f4:	f7fc fba2 	bl	800413c <HAL_DMA_Start_IT>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d008      	beq.n	8007a10 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2210      	movs	r2, #16
 8007a02:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2220      	movs	r2, #32
 8007a08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e05d      	b.n	8007acc <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007a10:	2300      	movs	r3, #0
 8007a12:	613b      	str	r3, [r7, #16]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	613b      	str	r3, [r7, #16]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	613b      	str	r3, [r7, #16]
 8007a24:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d019      	beq.n	8007a62 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	330c      	adds	r3, #12
 8007a34:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a38:	e853 3f00 	ldrex	r3, [r3]
 8007a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a44:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	330c      	adds	r3, #12
 8007a4c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007a4e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007a50:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a52:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007a54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007a56:	e841 2300 	strex	r3, r2, [r1]
 8007a5a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007a5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1e5      	bne.n	8007a2e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	3314      	adds	r3, #20
 8007a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a6c:	e853 3f00 	ldrex	r3, [r3]
 8007a70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a74:	f043 0301 	orr.w	r3, r3, #1
 8007a78:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	3314      	adds	r3, #20
 8007a80:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007a82:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007a84:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a86:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007a88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007a8a:	e841 2300 	strex	r3, r2, [r1]
 8007a8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d1e5      	bne.n	8007a62 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	3314      	adds	r3, #20
 8007a9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	e853 3f00 	ldrex	r3, [r3]
 8007aa4:	617b      	str	r3, [r7, #20]
   return(result);
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007aac:	653b      	str	r3, [r7, #80]	@ 0x50
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	3314      	adds	r3, #20
 8007ab4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007ab6:	627a      	str	r2, [r7, #36]	@ 0x24
 8007ab8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aba:	6a39      	ldr	r1, [r7, #32]
 8007abc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007abe:	e841 2300 	strex	r3, r2, [r1]
 8007ac2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d1e5      	bne.n	8007a96 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3760      	adds	r7, #96	@ 0x60
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	080076e7 	.word	0x080076e7
 8007ad8:	08007813 	.word	0x08007813
 8007adc:	0800784f 	.word	0x0800784f

08007ae0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b089      	sub	sp, #36	@ 0x24
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	330c      	adds	r3, #12
 8007aee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	e853 3f00 	ldrex	r3, [r3]
 8007af6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007afe:	61fb      	str	r3, [r7, #28]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	330c      	adds	r3, #12
 8007b06:	69fa      	ldr	r2, [r7, #28]
 8007b08:	61ba      	str	r2, [r7, #24]
 8007b0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0c:	6979      	ldr	r1, [r7, #20]
 8007b0e:	69ba      	ldr	r2, [r7, #24]
 8007b10:	e841 2300 	strex	r3, r2, [r1]
 8007b14:	613b      	str	r3, [r7, #16]
   return(result);
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d1e5      	bne.n	8007ae8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2220      	movs	r2, #32
 8007b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007b24:	bf00      	nop
 8007b26:	3724      	adds	r7, #36	@ 0x24
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b095      	sub	sp, #84	@ 0x54
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	330c      	adds	r3, #12
 8007b3e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b42:	e853 3f00 	ldrex	r3, [r3]
 8007b46:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b4a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	330c      	adds	r3, #12
 8007b56:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007b58:	643a      	str	r2, [r7, #64]	@ 0x40
 8007b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b5c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b60:	e841 2300 	strex	r3, r2, [r1]
 8007b64:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d1e5      	bne.n	8007b38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	3314      	adds	r3, #20
 8007b72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b74:	6a3b      	ldr	r3, [r7, #32]
 8007b76:	e853 3f00 	ldrex	r3, [r3]
 8007b7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	f023 0301 	bic.w	r3, r3, #1
 8007b82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	3314      	adds	r3, #20
 8007b8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b94:	e841 2300 	strex	r3, r2, [r1]
 8007b98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d1e5      	bne.n	8007b6c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d119      	bne.n	8007bdc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	330c      	adds	r3, #12
 8007bae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	e853 3f00 	ldrex	r3, [r3]
 8007bb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	f023 0310 	bic.w	r3, r3, #16
 8007bbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	330c      	adds	r3, #12
 8007bc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007bc8:	61ba      	str	r2, [r7, #24]
 8007bca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bcc:	6979      	ldr	r1, [r7, #20]
 8007bce:	69ba      	ldr	r2, [r7, #24]
 8007bd0:	e841 2300 	strex	r3, r2, [r1]
 8007bd4:	613b      	str	r3, [r7, #16]
   return(result);
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d1e5      	bne.n	8007ba8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2220      	movs	r2, #32
 8007be0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007bea:	bf00      	nop
 8007bec:	3754      	adds	r7, #84	@ 0x54
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr

08007bf6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b084      	sub	sp, #16
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c02:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2200      	movs	r2, #0
 8007c08:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f7ff fcfa 	bl	8007604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c10:	bf00      	nop
 8007c12:	3710      	adds	r7, #16
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b085      	sub	sp, #20
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	2b21      	cmp	r3, #33	@ 0x21
 8007c2a:	d13e      	bne.n	8007caa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c34:	d114      	bne.n	8007c60 <UART_Transmit_IT+0x48>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d110      	bne.n	8007c60 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6a1b      	ldr	r3, [r3, #32]
 8007c42:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	881b      	ldrh	r3, [r3, #0]
 8007c48:	461a      	mov	r2, r3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c52:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6a1b      	ldr	r3, [r3, #32]
 8007c58:	1c9a      	adds	r2, r3, #2
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	621a      	str	r2, [r3, #32]
 8007c5e:	e008      	b.n	8007c72 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6a1b      	ldr	r3, [r3, #32]
 8007c64:	1c59      	adds	r1, r3, #1
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	6211      	str	r1, [r2, #32]
 8007c6a:	781a      	ldrb	r2, [r3, #0]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	4619      	mov	r1, r3
 8007c80:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d10f      	bne.n	8007ca6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	68da      	ldr	r2, [r3, #12]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007c94:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68da      	ldr	r2, [r3, #12]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ca4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	e000      	b.n	8007cac <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007caa:	2302      	movs	r3, #2
  }
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3714      	adds	r7, #20
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b082      	sub	sp, #8
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	68da      	ldr	r2, [r3, #12]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007cce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2220      	movs	r2, #32
 8007cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f7ff fc6b 	bl	80075b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3708      	adds	r7, #8
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b08c      	sub	sp, #48	@ 0x30
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	2b22      	cmp	r3, #34	@ 0x22
 8007d02:	f040 80aa 	bne.w	8007e5a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d0e:	d115      	bne.n	8007d3c <UART_Receive_IT+0x54>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d111      	bne.n	8007d3c <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d2a:	b29a      	uxth	r2, r3
 8007d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d2e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d34:	1c9a      	adds	r2, r3, #2
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	629a      	str	r2, [r3, #40]	@ 0x28
 8007d3a:	e024      	b.n	8007d86 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d4a:	d007      	beq.n	8007d5c <UART_Receive_IT+0x74>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d10a      	bne.n	8007d6a <UART_Receive_IT+0x82>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	691b      	ldr	r3, [r3, #16]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d106      	bne.n	8007d6a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	b2da      	uxtb	r2, r3
 8007d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d66:	701a      	strb	r2, [r3, #0]
 8007d68:	e008      	b.n	8007d7c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d76:	b2da      	uxtb	r2, r3
 8007d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d7a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d80:	1c5a      	adds	r2, r3, #1
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	3b01      	subs	r3, #1
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	4619      	mov	r1, r3
 8007d94:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d15d      	bne.n	8007e56 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68da      	ldr	r2, [r3, #12]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f022 0220 	bic.w	r2, r2, #32
 8007da8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	68da      	ldr	r2, [r3, #12]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007db8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	695a      	ldr	r2, [r3, #20]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f022 0201 	bic.w	r2, r2, #1
 8007dc8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2220      	movs	r2, #32
 8007dce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d135      	bne.n	8007e4c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	330c      	adds	r3, #12
 8007dec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	e853 3f00 	ldrex	r3, [r3]
 8007df4:	613b      	str	r3, [r7, #16]
   return(result);
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	f023 0310 	bic.w	r3, r3, #16
 8007dfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	330c      	adds	r3, #12
 8007e04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e06:	623a      	str	r2, [r7, #32]
 8007e08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e0a:	69f9      	ldr	r1, [r7, #28]
 8007e0c:	6a3a      	ldr	r2, [r7, #32]
 8007e0e:	e841 2300 	strex	r3, r2, [r1]
 8007e12:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e14:	69bb      	ldr	r3, [r7, #24]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d1e5      	bne.n	8007de6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f003 0310 	and.w	r3, r3, #16
 8007e24:	2b10      	cmp	r3, #16
 8007e26:	d10a      	bne.n	8007e3e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e28:	2300      	movs	r3, #0
 8007e2a:	60fb      	str	r3, [r7, #12]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	60fb      	str	r3, [r7, #12]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	60fb      	str	r3, [r7, #12]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007e42:	4619      	mov	r1, r3
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f7ff fbe7 	bl	8007618 <HAL_UARTEx_RxEventCallback>
 8007e4a:	e002      	b.n	8007e52 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f7ff fbc5 	bl	80075dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007e52:	2300      	movs	r3, #0
 8007e54:	e002      	b.n	8007e5c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007e56:	2300      	movs	r3, #0
 8007e58:	e000      	b.n	8007e5c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007e5a:	2302      	movs	r3, #2
  }
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3730      	adds	r7, #48	@ 0x30
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e68:	b0c0      	sub	sp, #256	@ 0x100
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e80:	68d9      	ldr	r1, [r3, #12]
 8007e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	ea40 0301 	orr.w	r3, r0, r1
 8007e8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e92:	689a      	ldr	r2, [r3, #8]
 8007e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e98:	691b      	ldr	r3, [r3, #16]
 8007e9a:	431a      	orrs	r2, r3
 8007e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ea0:	695b      	ldr	r3, [r3, #20]
 8007ea2:	431a      	orrs	r2, r3
 8007ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ea8:	69db      	ldr	r3, [r3, #28]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007ebc:	f021 010c 	bic.w	r1, r1, #12
 8007ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007eca:	430b      	orrs	r3, r1
 8007ecc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	695b      	ldr	r3, [r3, #20]
 8007ed6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ede:	6999      	ldr	r1, [r3, #24]
 8007ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	ea40 0301 	orr.w	r3, r0, r1
 8007eea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	4b8f      	ldr	r3, [pc, #572]	@ (8008130 <UART_SetConfig+0x2cc>)
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d005      	beq.n	8007f04 <UART_SetConfig+0xa0>
 8007ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	4b8d      	ldr	r3, [pc, #564]	@ (8008134 <UART_SetConfig+0x2d0>)
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d104      	bne.n	8007f0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007f04:	f7fd f8ce 	bl	80050a4 <HAL_RCC_GetPCLK2Freq>
 8007f08:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007f0c:	e003      	b.n	8007f16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007f0e:	f7fd f8b5 	bl	800507c <HAL_RCC_GetPCLK1Freq>
 8007f12:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f1a:	69db      	ldr	r3, [r3, #28]
 8007f1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f20:	f040 810c 	bne.w	800813c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007f24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007f2e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007f32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007f36:	4622      	mov	r2, r4
 8007f38:	462b      	mov	r3, r5
 8007f3a:	1891      	adds	r1, r2, r2
 8007f3c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007f3e:	415b      	adcs	r3, r3
 8007f40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007f46:	4621      	mov	r1, r4
 8007f48:	eb12 0801 	adds.w	r8, r2, r1
 8007f4c:	4629      	mov	r1, r5
 8007f4e:	eb43 0901 	adc.w	r9, r3, r1
 8007f52:	f04f 0200 	mov.w	r2, #0
 8007f56:	f04f 0300 	mov.w	r3, #0
 8007f5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007f5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007f62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007f66:	4690      	mov	r8, r2
 8007f68:	4699      	mov	r9, r3
 8007f6a:	4623      	mov	r3, r4
 8007f6c:	eb18 0303 	adds.w	r3, r8, r3
 8007f70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007f74:	462b      	mov	r3, r5
 8007f76:	eb49 0303 	adc.w	r3, r9, r3
 8007f7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007f8a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007f8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007f92:	460b      	mov	r3, r1
 8007f94:	18db      	adds	r3, r3, r3
 8007f96:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f98:	4613      	mov	r3, r2
 8007f9a:	eb42 0303 	adc.w	r3, r2, r3
 8007f9e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007fa0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007fa4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007fa8:	f7f8 fe08 	bl	8000bbc <__aeabi_uldivmod>
 8007fac:	4602      	mov	r2, r0
 8007fae:	460b      	mov	r3, r1
 8007fb0:	4b61      	ldr	r3, [pc, #388]	@ (8008138 <UART_SetConfig+0x2d4>)
 8007fb2:	fba3 2302 	umull	r2, r3, r3, r2
 8007fb6:	095b      	lsrs	r3, r3, #5
 8007fb8:	011c      	lsls	r4, r3, #4
 8007fba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007fc4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007fc8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007fcc:	4642      	mov	r2, r8
 8007fce:	464b      	mov	r3, r9
 8007fd0:	1891      	adds	r1, r2, r2
 8007fd2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007fd4:	415b      	adcs	r3, r3
 8007fd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fd8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007fdc:	4641      	mov	r1, r8
 8007fde:	eb12 0a01 	adds.w	sl, r2, r1
 8007fe2:	4649      	mov	r1, r9
 8007fe4:	eb43 0b01 	adc.w	fp, r3, r1
 8007fe8:	f04f 0200 	mov.w	r2, #0
 8007fec:	f04f 0300 	mov.w	r3, #0
 8007ff0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ff4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007ff8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ffc:	4692      	mov	sl, r2
 8007ffe:	469b      	mov	fp, r3
 8008000:	4643      	mov	r3, r8
 8008002:	eb1a 0303 	adds.w	r3, sl, r3
 8008006:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800800a:	464b      	mov	r3, r9
 800800c:	eb4b 0303 	adc.w	r3, fp, r3
 8008010:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008020:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008024:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008028:	460b      	mov	r3, r1
 800802a:	18db      	adds	r3, r3, r3
 800802c:	643b      	str	r3, [r7, #64]	@ 0x40
 800802e:	4613      	mov	r3, r2
 8008030:	eb42 0303 	adc.w	r3, r2, r3
 8008034:	647b      	str	r3, [r7, #68]	@ 0x44
 8008036:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800803a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800803e:	f7f8 fdbd 	bl	8000bbc <__aeabi_uldivmod>
 8008042:	4602      	mov	r2, r0
 8008044:	460b      	mov	r3, r1
 8008046:	4611      	mov	r1, r2
 8008048:	4b3b      	ldr	r3, [pc, #236]	@ (8008138 <UART_SetConfig+0x2d4>)
 800804a:	fba3 2301 	umull	r2, r3, r3, r1
 800804e:	095b      	lsrs	r3, r3, #5
 8008050:	2264      	movs	r2, #100	@ 0x64
 8008052:	fb02 f303 	mul.w	r3, r2, r3
 8008056:	1acb      	subs	r3, r1, r3
 8008058:	00db      	lsls	r3, r3, #3
 800805a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800805e:	4b36      	ldr	r3, [pc, #216]	@ (8008138 <UART_SetConfig+0x2d4>)
 8008060:	fba3 2302 	umull	r2, r3, r3, r2
 8008064:	095b      	lsrs	r3, r3, #5
 8008066:	005b      	lsls	r3, r3, #1
 8008068:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800806c:	441c      	add	r4, r3
 800806e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008072:	2200      	movs	r2, #0
 8008074:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008078:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800807c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008080:	4642      	mov	r2, r8
 8008082:	464b      	mov	r3, r9
 8008084:	1891      	adds	r1, r2, r2
 8008086:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008088:	415b      	adcs	r3, r3
 800808a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800808c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008090:	4641      	mov	r1, r8
 8008092:	1851      	adds	r1, r2, r1
 8008094:	6339      	str	r1, [r7, #48]	@ 0x30
 8008096:	4649      	mov	r1, r9
 8008098:	414b      	adcs	r3, r1
 800809a:	637b      	str	r3, [r7, #52]	@ 0x34
 800809c:	f04f 0200 	mov.w	r2, #0
 80080a0:	f04f 0300 	mov.w	r3, #0
 80080a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80080a8:	4659      	mov	r1, fp
 80080aa:	00cb      	lsls	r3, r1, #3
 80080ac:	4651      	mov	r1, sl
 80080ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080b2:	4651      	mov	r1, sl
 80080b4:	00ca      	lsls	r2, r1, #3
 80080b6:	4610      	mov	r0, r2
 80080b8:	4619      	mov	r1, r3
 80080ba:	4603      	mov	r3, r0
 80080bc:	4642      	mov	r2, r8
 80080be:	189b      	adds	r3, r3, r2
 80080c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80080c4:	464b      	mov	r3, r9
 80080c6:	460a      	mov	r2, r1
 80080c8:	eb42 0303 	adc.w	r3, r2, r3
 80080cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80080d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80080dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80080e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80080e4:	460b      	mov	r3, r1
 80080e6:	18db      	adds	r3, r3, r3
 80080e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80080ea:	4613      	mov	r3, r2
 80080ec:	eb42 0303 	adc.w	r3, r2, r3
 80080f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80080f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80080f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80080fa:	f7f8 fd5f 	bl	8000bbc <__aeabi_uldivmod>
 80080fe:	4602      	mov	r2, r0
 8008100:	460b      	mov	r3, r1
 8008102:	4b0d      	ldr	r3, [pc, #52]	@ (8008138 <UART_SetConfig+0x2d4>)
 8008104:	fba3 1302 	umull	r1, r3, r3, r2
 8008108:	095b      	lsrs	r3, r3, #5
 800810a:	2164      	movs	r1, #100	@ 0x64
 800810c:	fb01 f303 	mul.w	r3, r1, r3
 8008110:	1ad3      	subs	r3, r2, r3
 8008112:	00db      	lsls	r3, r3, #3
 8008114:	3332      	adds	r3, #50	@ 0x32
 8008116:	4a08      	ldr	r2, [pc, #32]	@ (8008138 <UART_SetConfig+0x2d4>)
 8008118:	fba2 2303 	umull	r2, r3, r2, r3
 800811c:	095b      	lsrs	r3, r3, #5
 800811e:	f003 0207 	and.w	r2, r3, #7
 8008122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4422      	add	r2, r4
 800812a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800812c:	e106      	b.n	800833c <UART_SetConfig+0x4d8>
 800812e:	bf00      	nop
 8008130:	40011000 	.word	0x40011000
 8008134:	40011400 	.word	0x40011400
 8008138:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800813c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008140:	2200      	movs	r2, #0
 8008142:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008146:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800814a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800814e:	4642      	mov	r2, r8
 8008150:	464b      	mov	r3, r9
 8008152:	1891      	adds	r1, r2, r2
 8008154:	6239      	str	r1, [r7, #32]
 8008156:	415b      	adcs	r3, r3
 8008158:	627b      	str	r3, [r7, #36]	@ 0x24
 800815a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800815e:	4641      	mov	r1, r8
 8008160:	1854      	adds	r4, r2, r1
 8008162:	4649      	mov	r1, r9
 8008164:	eb43 0501 	adc.w	r5, r3, r1
 8008168:	f04f 0200 	mov.w	r2, #0
 800816c:	f04f 0300 	mov.w	r3, #0
 8008170:	00eb      	lsls	r3, r5, #3
 8008172:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008176:	00e2      	lsls	r2, r4, #3
 8008178:	4614      	mov	r4, r2
 800817a:	461d      	mov	r5, r3
 800817c:	4643      	mov	r3, r8
 800817e:	18e3      	adds	r3, r4, r3
 8008180:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008184:	464b      	mov	r3, r9
 8008186:	eb45 0303 	adc.w	r3, r5, r3
 800818a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800818e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800819a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800819e:	f04f 0200 	mov.w	r2, #0
 80081a2:	f04f 0300 	mov.w	r3, #0
 80081a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80081aa:	4629      	mov	r1, r5
 80081ac:	008b      	lsls	r3, r1, #2
 80081ae:	4621      	mov	r1, r4
 80081b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80081b4:	4621      	mov	r1, r4
 80081b6:	008a      	lsls	r2, r1, #2
 80081b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80081bc:	f7f8 fcfe 	bl	8000bbc <__aeabi_uldivmod>
 80081c0:	4602      	mov	r2, r0
 80081c2:	460b      	mov	r3, r1
 80081c4:	4b60      	ldr	r3, [pc, #384]	@ (8008348 <UART_SetConfig+0x4e4>)
 80081c6:	fba3 2302 	umull	r2, r3, r3, r2
 80081ca:	095b      	lsrs	r3, r3, #5
 80081cc:	011c      	lsls	r4, r3, #4
 80081ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081d2:	2200      	movs	r2, #0
 80081d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80081d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80081dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80081e0:	4642      	mov	r2, r8
 80081e2:	464b      	mov	r3, r9
 80081e4:	1891      	adds	r1, r2, r2
 80081e6:	61b9      	str	r1, [r7, #24]
 80081e8:	415b      	adcs	r3, r3
 80081ea:	61fb      	str	r3, [r7, #28]
 80081ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80081f0:	4641      	mov	r1, r8
 80081f2:	1851      	adds	r1, r2, r1
 80081f4:	6139      	str	r1, [r7, #16]
 80081f6:	4649      	mov	r1, r9
 80081f8:	414b      	adcs	r3, r1
 80081fa:	617b      	str	r3, [r7, #20]
 80081fc:	f04f 0200 	mov.w	r2, #0
 8008200:	f04f 0300 	mov.w	r3, #0
 8008204:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008208:	4659      	mov	r1, fp
 800820a:	00cb      	lsls	r3, r1, #3
 800820c:	4651      	mov	r1, sl
 800820e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008212:	4651      	mov	r1, sl
 8008214:	00ca      	lsls	r2, r1, #3
 8008216:	4610      	mov	r0, r2
 8008218:	4619      	mov	r1, r3
 800821a:	4603      	mov	r3, r0
 800821c:	4642      	mov	r2, r8
 800821e:	189b      	adds	r3, r3, r2
 8008220:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008224:	464b      	mov	r3, r9
 8008226:	460a      	mov	r2, r1
 8008228:	eb42 0303 	adc.w	r3, r2, r3
 800822c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	67bb      	str	r3, [r7, #120]	@ 0x78
 800823a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800823c:	f04f 0200 	mov.w	r2, #0
 8008240:	f04f 0300 	mov.w	r3, #0
 8008244:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008248:	4649      	mov	r1, r9
 800824a:	008b      	lsls	r3, r1, #2
 800824c:	4641      	mov	r1, r8
 800824e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008252:	4641      	mov	r1, r8
 8008254:	008a      	lsls	r2, r1, #2
 8008256:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800825a:	f7f8 fcaf 	bl	8000bbc <__aeabi_uldivmod>
 800825e:	4602      	mov	r2, r0
 8008260:	460b      	mov	r3, r1
 8008262:	4611      	mov	r1, r2
 8008264:	4b38      	ldr	r3, [pc, #224]	@ (8008348 <UART_SetConfig+0x4e4>)
 8008266:	fba3 2301 	umull	r2, r3, r3, r1
 800826a:	095b      	lsrs	r3, r3, #5
 800826c:	2264      	movs	r2, #100	@ 0x64
 800826e:	fb02 f303 	mul.w	r3, r2, r3
 8008272:	1acb      	subs	r3, r1, r3
 8008274:	011b      	lsls	r3, r3, #4
 8008276:	3332      	adds	r3, #50	@ 0x32
 8008278:	4a33      	ldr	r2, [pc, #204]	@ (8008348 <UART_SetConfig+0x4e4>)
 800827a:	fba2 2303 	umull	r2, r3, r2, r3
 800827e:	095b      	lsrs	r3, r3, #5
 8008280:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008284:	441c      	add	r4, r3
 8008286:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800828a:	2200      	movs	r2, #0
 800828c:	673b      	str	r3, [r7, #112]	@ 0x70
 800828e:	677a      	str	r2, [r7, #116]	@ 0x74
 8008290:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008294:	4642      	mov	r2, r8
 8008296:	464b      	mov	r3, r9
 8008298:	1891      	adds	r1, r2, r2
 800829a:	60b9      	str	r1, [r7, #8]
 800829c:	415b      	adcs	r3, r3
 800829e:	60fb      	str	r3, [r7, #12]
 80082a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80082a4:	4641      	mov	r1, r8
 80082a6:	1851      	adds	r1, r2, r1
 80082a8:	6039      	str	r1, [r7, #0]
 80082aa:	4649      	mov	r1, r9
 80082ac:	414b      	adcs	r3, r1
 80082ae:	607b      	str	r3, [r7, #4]
 80082b0:	f04f 0200 	mov.w	r2, #0
 80082b4:	f04f 0300 	mov.w	r3, #0
 80082b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80082bc:	4659      	mov	r1, fp
 80082be:	00cb      	lsls	r3, r1, #3
 80082c0:	4651      	mov	r1, sl
 80082c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082c6:	4651      	mov	r1, sl
 80082c8:	00ca      	lsls	r2, r1, #3
 80082ca:	4610      	mov	r0, r2
 80082cc:	4619      	mov	r1, r3
 80082ce:	4603      	mov	r3, r0
 80082d0:	4642      	mov	r2, r8
 80082d2:	189b      	adds	r3, r3, r2
 80082d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80082d6:	464b      	mov	r3, r9
 80082d8:	460a      	mov	r2, r1
 80082da:	eb42 0303 	adc.w	r3, r2, r3
 80082de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80082e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80082ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80082ec:	f04f 0200 	mov.w	r2, #0
 80082f0:	f04f 0300 	mov.w	r3, #0
 80082f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80082f8:	4649      	mov	r1, r9
 80082fa:	008b      	lsls	r3, r1, #2
 80082fc:	4641      	mov	r1, r8
 80082fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008302:	4641      	mov	r1, r8
 8008304:	008a      	lsls	r2, r1, #2
 8008306:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800830a:	f7f8 fc57 	bl	8000bbc <__aeabi_uldivmod>
 800830e:	4602      	mov	r2, r0
 8008310:	460b      	mov	r3, r1
 8008312:	4b0d      	ldr	r3, [pc, #52]	@ (8008348 <UART_SetConfig+0x4e4>)
 8008314:	fba3 1302 	umull	r1, r3, r3, r2
 8008318:	095b      	lsrs	r3, r3, #5
 800831a:	2164      	movs	r1, #100	@ 0x64
 800831c:	fb01 f303 	mul.w	r3, r1, r3
 8008320:	1ad3      	subs	r3, r2, r3
 8008322:	011b      	lsls	r3, r3, #4
 8008324:	3332      	adds	r3, #50	@ 0x32
 8008326:	4a08      	ldr	r2, [pc, #32]	@ (8008348 <UART_SetConfig+0x4e4>)
 8008328:	fba2 2303 	umull	r2, r3, r2, r3
 800832c:	095b      	lsrs	r3, r3, #5
 800832e:	f003 020f 	and.w	r2, r3, #15
 8008332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4422      	add	r2, r4
 800833a:	609a      	str	r2, [r3, #8]
}
 800833c:	bf00      	nop
 800833e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008342:	46bd      	mov	sp, r7
 8008344:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008348:	51eb851f 	.word	0x51eb851f

0800834c <__NVIC_SetPriority>:
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	4603      	mov	r3, r0
 8008354:	6039      	str	r1, [r7, #0]
 8008356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800835c:	2b00      	cmp	r3, #0
 800835e:	db0a      	blt.n	8008376 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	b2da      	uxtb	r2, r3
 8008364:	490c      	ldr	r1, [pc, #48]	@ (8008398 <__NVIC_SetPriority+0x4c>)
 8008366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800836a:	0112      	lsls	r2, r2, #4
 800836c:	b2d2      	uxtb	r2, r2
 800836e:	440b      	add	r3, r1
 8008370:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008374:	e00a      	b.n	800838c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	b2da      	uxtb	r2, r3
 800837a:	4908      	ldr	r1, [pc, #32]	@ (800839c <__NVIC_SetPriority+0x50>)
 800837c:	79fb      	ldrb	r3, [r7, #7]
 800837e:	f003 030f 	and.w	r3, r3, #15
 8008382:	3b04      	subs	r3, #4
 8008384:	0112      	lsls	r2, r2, #4
 8008386:	b2d2      	uxtb	r2, r2
 8008388:	440b      	add	r3, r1
 800838a:	761a      	strb	r2, [r3, #24]
}
 800838c:	bf00      	nop
 800838e:	370c      	adds	r7, #12
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr
 8008398:	e000e100 	.word	0xe000e100
 800839c:	e000ed00 	.word	0xe000ed00

080083a0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80083a0:	b580      	push	{r7, lr}
 80083a2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80083a4:	4b05      	ldr	r3, [pc, #20]	@ (80083bc <SysTick_Handler+0x1c>)
 80083a6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80083a8:	f001 fde2 	bl	8009f70 <xTaskGetSchedulerState>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d001      	beq.n	80083b6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80083b2:	f002 fbd9 	bl	800ab68 <xPortSysTickHandler>
  }
}
 80083b6:	bf00      	nop
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop
 80083bc:	e000e010 	.word	0xe000e010

080083c0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80083c0:	b580      	push	{r7, lr}
 80083c2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80083c4:	2100      	movs	r1, #0
 80083c6:	f06f 0004 	mvn.w	r0, #4
 80083ca:	f7ff ffbf 	bl	800834c <__NVIC_SetPriority>
#endif
}
 80083ce:	bf00      	nop
 80083d0:	bd80      	pop	{r7, pc}
	...

080083d4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083da:	f3ef 8305 	mrs	r3, IPSR
 80083de:	603b      	str	r3, [r7, #0]
  return(result);
 80083e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d003      	beq.n	80083ee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80083e6:	f06f 0305 	mvn.w	r3, #5
 80083ea:	607b      	str	r3, [r7, #4]
 80083ec:	e00c      	b.n	8008408 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80083ee:	4b0a      	ldr	r3, [pc, #40]	@ (8008418 <osKernelInitialize+0x44>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d105      	bne.n	8008402 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80083f6:	4b08      	ldr	r3, [pc, #32]	@ (8008418 <osKernelInitialize+0x44>)
 80083f8:	2201      	movs	r2, #1
 80083fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80083fc:	2300      	movs	r3, #0
 80083fe:	607b      	str	r3, [r7, #4]
 8008400:	e002      	b.n	8008408 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008402:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008406:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008408:	687b      	ldr	r3, [r7, #4]
}
 800840a:	4618      	mov	r0, r3
 800840c:	370c      	adds	r7, #12
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop
 8008418:	20007a6c 	.word	0x20007a6c

0800841c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008422:	f3ef 8305 	mrs	r3, IPSR
 8008426:	603b      	str	r3, [r7, #0]
  return(result);
 8008428:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800842a:	2b00      	cmp	r3, #0
 800842c:	d003      	beq.n	8008436 <osKernelStart+0x1a>
    stat = osErrorISR;
 800842e:	f06f 0305 	mvn.w	r3, #5
 8008432:	607b      	str	r3, [r7, #4]
 8008434:	e010      	b.n	8008458 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008436:	4b0b      	ldr	r3, [pc, #44]	@ (8008464 <osKernelStart+0x48>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2b01      	cmp	r3, #1
 800843c:	d109      	bne.n	8008452 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800843e:	f7ff ffbf 	bl	80083c0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008442:	4b08      	ldr	r3, [pc, #32]	@ (8008464 <osKernelStart+0x48>)
 8008444:	2202      	movs	r2, #2
 8008446:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008448:	f001 f906 	bl	8009658 <vTaskStartScheduler>
      stat = osOK;
 800844c:	2300      	movs	r3, #0
 800844e:	607b      	str	r3, [r7, #4]
 8008450:	e002      	b.n	8008458 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008452:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008456:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008458:	687b      	ldr	r3, [r7, #4]
}
 800845a:	4618      	mov	r0, r3
 800845c:	3708      	adds	r7, #8
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	20007a6c 	.word	0x20007a6c

08008468 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008468:	b580      	push	{r7, lr}
 800846a:	b08e      	sub	sp, #56	@ 0x38
 800846c:	af04      	add	r7, sp, #16
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008474:	2300      	movs	r3, #0
 8008476:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008478:	f3ef 8305 	mrs	r3, IPSR
 800847c:	617b      	str	r3, [r7, #20]
  return(result);
 800847e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008480:	2b00      	cmp	r3, #0
 8008482:	d17e      	bne.n	8008582 <osThreadNew+0x11a>
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d07b      	beq.n	8008582 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800848a:	2380      	movs	r3, #128	@ 0x80
 800848c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800848e:	2318      	movs	r3, #24
 8008490:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008492:	2300      	movs	r3, #0
 8008494:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008496:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800849a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d045      	beq.n	800852e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d002      	beq.n	80084b0 <osThreadNew+0x48>
        name = attr->name;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	699b      	ldr	r3, [r3, #24]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d002      	beq.n	80084be <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	699b      	ldr	r3, [r3, #24]
 80084bc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80084be:	69fb      	ldr	r3, [r7, #28]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d008      	beq.n	80084d6 <osThreadNew+0x6e>
 80084c4:	69fb      	ldr	r3, [r7, #28]
 80084c6:	2b38      	cmp	r3, #56	@ 0x38
 80084c8:	d805      	bhi.n	80084d6 <osThreadNew+0x6e>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	f003 0301 	and.w	r3, r3, #1
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d001      	beq.n	80084da <osThreadNew+0x72>
        return (NULL);
 80084d6:	2300      	movs	r3, #0
 80084d8:	e054      	b.n	8008584 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	695b      	ldr	r3, [r3, #20]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d003      	beq.n	80084ea <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	695b      	ldr	r3, [r3, #20]
 80084e6:	089b      	lsrs	r3, r3, #2
 80084e8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d00e      	beq.n	8008510 <osThreadNew+0xa8>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	2ba7      	cmp	r3, #167	@ 0xa7
 80084f8:	d90a      	bls.n	8008510 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d006      	beq.n	8008510 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	695b      	ldr	r3, [r3, #20]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d002      	beq.n	8008510 <osThreadNew+0xa8>
        mem = 1;
 800850a:	2301      	movs	r3, #1
 800850c:	61bb      	str	r3, [r7, #24]
 800850e:	e010      	b.n	8008532 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d10c      	bne.n	8008532 <osThreadNew+0xca>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d108      	bne.n	8008532 <osThreadNew+0xca>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d104      	bne.n	8008532 <osThreadNew+0xca>
          mem = 0;
 8008528:	2300      	movs	r3, #0
 800852a:	61bb      	str	r3, [r7, #24]
 800852c:	e001      	b.n	8008532 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800852e:	2300      	movs	r3, #0
 8008530:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008532:	69bb      	ldr	r3, [r7, #24]
 8008534:	2b01      	cmp	r3, #1
 8008536:	d110      	bne.n	800855a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008540:	9202      	str	r2, [sp, #8]
 8008542:	9301      	str	r3, [sp, #4]
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	9300      	str	r3, [sp, #0]
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	6a3a      	ldr	r2, [r7, #32]
 800854c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800854e:	68f8      	ldr	r0, [r7, #12]
 8008550:	f000 fe1a 	bl	8009188 <xTaskCreateStatic>
 8008554:	4603      	mov	r3, r0
 8008556:	613b      	str	r3, [r7, #16]
 8008558:	e013      	b.n	8008582 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800855a:	69bb      	ldr	r3, [r7, #24]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d110      	bne.n	8008582 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008560:	6a3b      	ldr	r3, [r7, #32]
 8008562:	b29a      	uxth	r2, r3
 8008564:	f107 0310 	add.w	r3, r7, #16
 8008568:	9301      	str	r3, [sp, #4]
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	9300      	str	r3, [sp, #0]
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f000 fe68 	bl	8009248 <xTaskCreate>
 8008578:	4603      	mov	r3, r0
 800857a:	2b01      	cmp	r3, #1
 800857c:	d001      	beq.n	8008582 <osThreadNew+0x11a>
            hTask = NULL;
 800857e:	2300      	movs	r3, #0
 8008580:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008582:	693b      	ldr	r3, [r7, #16]
}
 8008584:	4618      	mov	r0, r3
 8008586:	3728      	adds	r7, #40	@ 0x28
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008594:	f3ef 8305 	mrs	r3, IPSR
 8008598:	60bb      	str	r3, [r7, #8]
  return(result);
 800859a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800859c:	2b00      	cmp	r3, #0
 800859e:	d003      	beq.n	80085a8 <osDelay+0x1c>
    stat = osErrorISR;
 80085a0:	f06f 0305 	mvn.w	r3, #5
 80085a4:	60fb      	str	r3, [r7, #12]
 80085a6:	e007      	b.n	80085b8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80085a8:	2300      	movs	r3, #0
 80085aa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d002      	beq.n	80085b8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f001 f81a 	bl	80095ec <vTaskDelay>
    }
  }

  return (stat);
 80085b8:	68fb      	ldr	r3, [r7, #12]
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3710      	adds	r7, #16
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
	...

080085c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80085c4:	b480      	push	{r7}
 80085c6:	b085      	sub	sp, #20
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	60b9      	str	r1, [r7, #8]
 80085ce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	4a07      	ldr	r2, [pc, #28]	@ (80085f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80085d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	4a06      	ldr	r2, [pc, #24]	@ (80085f4 <vApplicationGetIdleTaskMemory+0x30>)
 80085da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2280      	movs	r2, #128	@ 0x80
 80085e0:	601a      	str	r2, [r3, #0]
}
 80085e2:	bf00      	nop
 80085e4:	3714      	adds	r7, #20
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr
 80085ee:	bf00      	nop
 80085f0:	20007a70 	.word	0x20007a70
 80085f4:	20007b18 	.word	0x20007b18

080085f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80085f8:	b480      	push	{r7}
 80085fa:	b085      	sub	sp, #20
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	4a07      	ldr	r2, [pc, #28]	@ (8008624 <vApplicationGetTimerTaskMemory+0x2c>)
 8008608:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	4a06      	ldr	r2, [pc, #24]	@ (8008628 <vApplicationGetTimerTaskMemory+0x30>)
 800860e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008616:	601a      	str	r2, [r3, #0]
}
 8008618:	bf00      	nop
 800861a:	3714      	adds	r7, #20
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr
 8008624:	20007d18 	.word	0x20007d18
 8008628:	20007dc0 	.word	0x20007dc0

0800862c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f103 0208 	add.w	r2, r3, #8
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008644:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f103 0208 	add.w	r2, r3, #8
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f103 0208 	add.w	r2, r3, #8
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008660:	bf00      	nop
 8008662:	370c      	adds	r7, #12
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr

0800866c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2200      	movs	r2, #0
 8008678:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800867a:	bf00      	nop
 800867c:	370c      	adds	r7, #12
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr

08008686 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008686:	b480      	push	{r7}
 8008688:	b085      	sub	sp, #20
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
 800868e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	68fa      	ldr	r2, [r7, #12]
 800869a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	689a      	ldr	r2, [r3, #8]
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	683a      	ldr	r2, [r7, #0]
 80086aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	683a      	ldr	r2, [r7, #0]
 80086b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	1c5a      	adds	r2, r3, #1
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	601a      	str	r2, [r3, #0]
}
 80086c2:	bf00      	nop
 80086c4:	3714      	adds	r7, #20
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr

080086ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80086ce:	b480      	push	{r7}
 80086d0:	b085      	sub	sp, #20
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
 80086d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80086e4:	d103      	bne.n	80086ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	691b      	ldr	r3, [r3, #16]
 80086ea:	60fb      	str	r3, [r7, #12]
 80086ec:	e00c      	b.n	8008708 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	3308      	adds	r3, #8
 80086f2:	60fb      	str	r3, [r7, #12]
 80086f4:	e002      	b.n	80086fc <vListInsert+0x2e>
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	60fb      	str	r3, [r7, #12]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	68ba      	ldr	r2, [r7, #8]
 8008704:	429a      	cmp	r2, r3
 8008706:	d2f6      	bcs.n	80086f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	685a      	ldr	r2, [r3, #4]
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	683a      	ldr	r2, [r7, #0]
 8008716:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	68fa      	ldr	r2, [r7, #12]
 800871c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	683a      	ldr	r2, [r7, #0]
 8008722:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	1c5a      	adds	r2, r3, #1
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	601a      	str	r2, [r3, #0]
}
 8008734:	bf00      	nop
 8008736:	3714      	adds	r7, #20
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008740:	b480      	push	{r7}
 8008742:	b085      	sub	sp, #20
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	691b      	ldr	r3, [r3, #16]
 800874c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	6892      	ldr	r2, [r2, #8]
 8008756:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	689b      	ldr	r3, [r3, #8]
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	6852      	ldr	r2, [r2, #4]
 8008760:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	429a      	cmp	r2, r3
 800876a:	d103      	bne.n	8008774 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	689a      	ldr	r2, [r3, #8]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	1e5a      	subs	r2, r3, #1
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
}
 8008788:	4618      	mov	r0, r3
 800878a:	3714      	adds	r7, #20
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d10b      	bne.n	80087c0 <xQueueGenericReset+0x2c>
	__asm volatile
 80087a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ac:	f383 8811 	msr	BASEPRI, r3
 80087b0:	f3bf 8f6f 	isb	sy
 80087b4:	f3bf 8f4f 	dsb	sy
 80087b8:	60bb      	str	r3, [r7, #8]
}
 80087ba:	bf00      	nop
 80087bc:	bf00      	nop
 80087be:	e7fd      	b.n	80087bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80087c0:	f002 f942 	bl	800aa48 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087cc:	68f9      	ldr	r1, [r7, #12]
 80087ce:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80087d0:	fb01 f303 	mul.w	r3, r1, r3
 80087d4:	441a      	add	r2, r3
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2200      	movs	r2, #0
 80087de:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087f0:	3b01      	subs	r3, #1
 80087f2:	68f9      	ldr	r1, [r7, #12]
 80087f4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80087f6:	fb01 f303 	mul.w	r3, r1, r3
 80087fa:	441a      	add	r2, r3
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	22ff      	movs	r2, #255	@ 0xff
 8008804:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	22ff      	movs	r2, #255	@ 0xff
 800880c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d114      	bne.n	8008840 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d01a      	beq.n	8008854 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	3310      	adds	r3, #16
 8008822:	4618      	mov	r0, r3
 8008824:	f001 f9b6 	bl	8009b94 <xTaskRemoveFromEventList>
 8008828:	4603      	mov	r3, r0
 800882a:	2b00      	cmp	r3, #0
 800882c:	d012      	beq.n	8008854 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800882e:	4b0d      	ldr	r3, [pc, #52]	@ (8008864 <xQueueGenericReset+0xd0>)
 8008830:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008834:	601a      	str	r2, [r3, #0]
 8008836:	f3bf 8f4f 	dsb	sy
 800883a:	f3bf 8f6f 	isb	sy
 800883e:	e009      	b.n	8008854 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	3310      	adds	r3, #16
 8008844:	4618      	mov	r0, r3
 8008846:	f7ff fef1 	bl	800862c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	3324      	adds	r3, #36	@ 0x24
 800884e:	4618      	mov	r0, r3
 8008850:	f7ff feec 	bl	800862c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008854:	f002 f92a 	bl	800aaac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008858:	2301      	movs	r3, #1
}
 800885a:	4618      	mov	r0, r3
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	e000ed04 	.word	0xe000ed04

08008868 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008868:	b580      	push	{r7, lr}
 800886a:	b08e      	sub	sp, #56	@ 0x38
 800886c:	af02      	add	r7, sp, #8
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	607a      	str	r2, [r7, #4]
 8008874:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d10b      	bne.n	8008894 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800887c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008880:	f383 8811 	msr	BASEPRI, r3
 8008884:	f3bf 8f6f 	isb	sy
 8008888:	f3bf 8f4f 	dsb	sy
 800888c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800888e:	bf00      	nop
 8008890:	bf00      	nop
 8008892:	e7fd      	b.n	8008890 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d10b      	bne.n	80088b2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800889a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800889e:	f383 8811 	msr	BASEPRI, r3
 80088a2:	f3bf 8f6f 	isb	sy
 80088a6:	f3bf 8f4f 	dsb	sy
 80088aa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80088ac:	bf00      	nop
 80088ae:	bf00      	nop
 80088b0:	e7fd      	b.n	80088ae <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d002      	beq.n	80088be <xQueueGenericCreateStatic+0x56>
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d001      	beq.n	80088c2 <xQueueGenericCreateStatic+0x5a>
 80088be:	2301      	movs	r3, #1
 80088c0:	e000      	b.n	80088c4 <xQueueGenericCreateStatic+0x5c>
 80088c2:	2300      	movs	r3, #0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d10b      	bne.n	80088e0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80088c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088cc:	f383 8811 	msr	BASEPRI, r3
 80088d0:	f3bf 8f6f 	isb	sy
 80088d4:	f3bf 8f4f 	dsb	sy
 80088d8:	623b      	str	r3, [r7, #32]
}
 80088da:	bf00      	nop
 80088dc:	bf00      	nop
 80088de:	e7fd      	b.n	80088dc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d102      	bne.n	80088ec <xQueueGenericCreateStatic+0x84>
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d101      	bne.n	80088f0 <xQueueGenericCreateStatic+0x88>
 80088ec:	2301      	movs	r3, #1
 80088ee:	e000      	b.n	80088f2 <xQueueGenericCreateStatic+0x8a>
 80088f0:	2300      	movs	r3, #0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d10b      	bne.n	800890e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80088f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088fa:	f383 8811 	msr	BASEPRI, r3
 80088fe:	f3bf 8f6f 	isb	sy
 8008902:	f3bf 8f4f 	dsb	sy
 8008906:	61fb      	str	r3, [r7, #28]
}
 8008908:	bf00      	nop
 800890a:	bf00      	nop
 800890c:	e7fd      	b.n	800890a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800890e:	2350      	movs	r3, #80	@ 0x50
 8008910:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	2b50      	cmp	r3, #80	@ 0x50
 8008916:	d00b      	beq.n	8008930 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800891c:	f383 8811 	msr	BASEPRI, r3
 8008920:	f3bf 8f6f 	isb	sy
 8008924:	f3bf 8f4f 	dsb	sy
 8008928:	61bb      	str	r3, [r7, #24]
}
 800892a:	bf00      	nop
 800892c:	bf00      	nop
 800892e:	e7fd      	b.n	800892c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008930:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008938:	2b00      	cmp	r3, #0
 800893a:	d00d      	beq.n	8008958 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800893c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800893e:	2201      	movs	r2, #1
 8008940:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008944:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800894a:	9300      	str	r3, [sp, #0]
 800894c:	4613      	mov	r3, r2
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	68b9      	ldr	r1, [r7, #8]
 8008952:	68f8      	ldr	r0, [r7, #12]
 8008954:	f000 f805 	bl	8008962 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800895a:	4618      	mov	r0, r3
 800895c:	3730      	adds	r7, #48	@ 0x30
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008962:	b580      	push	{r7, lr}
 8008964:	b084      	sub	sp, #16
 8008966:	af00      	add	r7, sp, #0
 8008968:	60f8      	str	r0, [r7, #12]
 800896a:	60b9      	str	r1, [r7, #8]
 800896c:	607a      	str	r2, [r7, #4]
 800896e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d103      	bne.n	800897e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008976:	69bb      	ldr	r3, [r7, #24]
 8008978:	69ba      	ldr	r2, [r7, #24]
 800897a:	601a      	str	r2, [r3, #0]
 800897c:	e002      	b.n	8008984 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800897e:	69bb      	ldr	r3, [r7, #24]
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	68fa      	ldr	r2, [r7, #12]
 8008988:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800898a:	69bb      	ldr	r3, [r7, #24]
 800898c:	68ba      	ldr	r2, [r7, #8]
 800898e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008990:	2101      	movs	r1, #1
 8008992:	69b8      	ldr	r0, [r7, #24]
 8008994:	f7ff fefe 	bl	8008794 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008998:	69bb      	ldr	r3, [r7, #24]
 800899a:	78fa      	ldrb	r2, [r7, #3]
 800899c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80089a0:	bf00      	nop
 80089a2:	3710      	adds	r7, #16
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b08e      	sub	sp, #56	@ 0x38
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	60f8      	str	r0, [r7, #12]
 80089b0:	60b9      	str	r1, [r7, #8]
 80089b2:	607a      	str	r2, [r7, #4]
 80089b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80089b6:	2300      	movs	r3, #0
 80089b8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80089be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d10b      	bne.n	80089dc <xQueueGenericSend+0x34>
	__asm volatile
 80089c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c8:	f383 8811 	msr	BASEPRI, r3
 80089cc:	f3bf 8f6f 	isb	sy
 80089d0:	f3bf 8f4f 	dsb	sy
 80089d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80089d6:	bf00      	nop
 80089d8:	bf00      	nop
 80089da:	e7fd      	b.n	80089d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d103      	bne.n	80089ea <xQueueGenericSend+0x42>
 80089e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d101      	bne.n	80089ee <xQueueGenericSend+0x46>
 80089ea:	2301      	movs	r3, #1
 80089ec:	e000      	b.n	80089f0 <xQueueGenericSend+0x48>
 80089ee:	2300      	movs	r3, #0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d10b      	bne.n	8008a0c <xQueueGenericSend+0x64>
	__asm volatile
 80089f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089f8:	f383 8811 	msr	BASEPRI, r3
 80089fc:	f3bf 8f6f 	isb	sy
 8008a00:	f3bf 8f4f 	dsb	sy
 8008a04:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008a06:	bf00      	nop
 8008a08:	bf00      	nop
 8008a0a:	e7fd      	b.n	8008a08 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	2b02      	cmp	r3, #2
 8008a10:	d103      	bne.n	8008a1a <xQueueGenericSend+0x72>
 8008a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d101      	bne.n	8008a1e <xQueueGenericSend+0x76>
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	e000      	b.n	8008a20 <xQueueGenericSend+0x78>
 8008a1e:	2300      	movs	r3, #0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d10b      	bne.n	8008a3c <xQueueGenericSend+0x94>
	__asm volatile
 8008a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a28:	f383 8811 	msr	BASEPRI, r3
 8008a2c:	f3bf 8f6f 	isb	sy
 8008a30:	f3bf 8f4f 	dsb	sy
 8008a34:	623b      	str	r3, [r7, #32]
}
 8008a36:	bf00      	nop
 8008a38:	bf00      	nop
 8008a3a:	e7fd      	b.n	8008a38 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a3c:	f001 fa98 	bl	8009f70 <xTaskGetSchedulerState>
 8008a40:	4603      	mov	r3, r0
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d102      	bne.n	8008a4c <xQueueGenericSend+0xa4>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d101      	bne.n	8008a50 <xQueueGenericSend+0xa8>
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	e000      	b.n	8008a52 <xQueueGenericSend+0xaa>
 8008a50:	2300      	movs	r3, #0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d10b      	bne.n	8008a6e <xQueueGenericSend+0xc6>
	__asm volatile
 8008a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a5a:	f383 8811 	msr	BASEPRI, r3
 8008a5e:	f3bf 8f6f 	isb	sy
 8008a62:	f3bf 8f4f 	dsb	sy
 8008a66:	61fb      	str	r3, [r7, #28]
}
 8008a68:	bf00      	nop
 8008a6a:	bf00      	nop
 8008a6c:	e7fd      	b.n	8008a6a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a6e:	f001 ffeb 	bl	800aa48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d302      	bcc.n	8008a84 <xQueueGenericSend+0xdc>
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	2b02      	cmp	r3, #2
 8008a82:	d129      	bne.n	8008ad8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a84:	683a      	ldr	r2, [r7, #0]
 8008a86:	68b9      	ldr	r1, [r7, #8]
 8008a88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a8a:	f000 fa0f 	bl	8008eac <prvCopyDataToQueue>
 8008a8e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d010      	beq.n	8008aba <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a9a:	3324      	adds	r3, #36	@ 0x24
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f001 f879 	bl	8009b94 <xTaskRemoveFromEventList>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d013      	beq.n	8008ad0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008aa8:	4b3f      	ldr	r3, [pc, #252]	@ (8008ba8 <xQueueGenericSend+0x200>)
 8008aaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008aae:	601a      	str	r2, [r3, #0]
 8008ab0:	f3bf 8f4f 	dsb	sy
 8008ab4:	f3bf 8f6f 	isb	sy
 8008ab8:	e00a      	b.n	8008ad0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d007      	beq.n	8008ad0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008ac0:	4b39      	ldr	r3, [pc, #228]	@ (8008ba8 <xQueueGenericSend+0x200>)
 8008ac2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ac6:	601a      	str	r2, [r3, #0]
 8008ac8:	f3bf 8f4f 	dsb	sy
 8008acc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008ad0:	f001 ffec 	bl	800aaac <vPortExitCritical>
				return pdPASS;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e063      	b.n	8008ba0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d103      	bne.n	8008ae6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ade:	f001 ffe5 	bl	800aaac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	e05c      	b.n	8008ba0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d106      	bne.n	8008afa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008aec:	f107 0314 	add.w	r3, r7, #20
 8008af0:	4618      	mov	r0, r3
 8008af2:	f001 f8db 	bl	8009cac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008af6:	2301      	movs	r3, #1
 8008af8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008afa:	f001 ffd7 	bl	800aaac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008afe:	f000 fe1b 	bl	8009738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b02:	f001 ffa1 	bl	800aa48 <vPortEnterCritical>
 8008b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b0c:	b25b      	sxtb	r3, r3
 8008b0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b12:	d103      	bne.n	8008b1c <xQueueGenericSend+0x174>
 8008b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b16:	2200      	movs	r2, #0
 8008b18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b22:	b25b      	sxtb	r3, r3
 8008b24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b28:	d103      	bne.n	8008b32 <xQueueGenericSend+0x18a>
 8008b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b32:	f001 ffbb 	bl	800aaac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b36:	1d3a      	adds	r2, r7, #4
 8008b38:	f107 0314 	add.w	r3, r7, #20
 8008b3c:	4611      	mov	r1, r2
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f001 f8ca 	bl	8009cd8 <xTaskCheckForTimeOut>
 8008b44:	4603      	mov	r3, r0
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d124      	bne.n	8008b94 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008b4a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b4c:	f000 faa6 	bl	800909c <prvIsQueueFull>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d018      	beq.n	8008b88 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b58:	3310      	adds	r3, #16
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	4611      	mov	r1, r2
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f000 ffc6 	bl	8009af0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008b64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b66:	f000 fa31 	bl	8008fcc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008b6a:	f000 fdf3 	bl	8009754 <xTaskResumeAll>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f47f af7c 	bne.w	8008a6e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008b76:	4b0c      	ldr	r3, [pc, #48]	@ (8008ba8 <xQueueGenericSend+0x200>)
 8008b78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b7c:	601a      	str	r2, [r3, #0]
 8008b7e:	f3bf 8f4f 	dsb	sy
 8008b82:	f3bf 8f6f 	isb	sy
 8008b86:	e772      	b.n	8008a6e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008b88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b8a:	f000 fa1f 	bl	8008fcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b8e:	f000 fde1 	bl	8009754 <xTaskResumeAll>
 8008b92:	e76c      	b.n	8008a6e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008b94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b96:	f000 fa19 	bl	8008fcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b9a:	f000 fddb 	bl	8009754 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008b9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3738      	adds	r7, #56	@ 0x38
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	e000ed04 	.word	0xe000ed04

08008bac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b090      	sub	sp, #64	@ 0x40
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	607a      	str	r2, [r7, #4]
 8008bb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d10b      	bne.n	8008bdc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bc8:	f383 8811 	msr	BASEPRI, r3
 8008bcc:	f3bf 8f6f 	isb	sy
 8008bd0:	f3bf 8f4f 	dsb	sy
 8008bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008bd6:	bf00      	nop
 8008bd8:	bf00      	nop
 8008bda:	e7fd      	b.n	8008bd8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d103      	bne.n	8008bea <xQueueGenericSendFromISR+0x3e>
 8008be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d101      	bne.n	8008bee <xQueueGenericSendFromISR+0x42>
 8008bea:	2301      	movs	r3, #1
 8008bec:	e000      	b.n	8008bf0 <xQueueGenericSendFromISR+0x44>
 8008bee:	2300      	movs	r3, #0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d10b      	bne.n	8008c0c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bf8:	f383 8811 	msr	BASEPRI, r3
 8008bfc:	f3bf 8f6f 	isb	sy
 8008c00:	f3bf 8f4f 	dsb	sy
 8008c04:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008c06:	bf00      	nop
 8008c08:	bf00      	nop
 8008c0a:	e7fd      	b.n	8008c08 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	2b02      	cmp	r3, #2
 8008c10:	d103      	bne.n	8008c1a <xQueueGenericSendFromISR+0x6e>
 8008c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	d101      	bne.n	8008c1e <xQueueGenericSendFromISR+0x72>
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e000      	b.n	8008c20 <xQueueGenericSendFromISR+0x74>
 8008c1e:	2300      	movs	r3, #0
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d10b      	bne.n	8008c3c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c28:	f383 8811 	msr	BASEPRI, r3
 8008c2c:	f3bf 8f6f 	isb	sy
 8008c30:	f3bf 8f4f 	dsb	sy
 8008c34:	623b      	str	r3, [r7, #32]
}
 8008c36:	bf00      	nop
 8008c38:	bf00      	nop
 8008c3a:	e7fd      	b.n	8008c38 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c3c:	f001 ffe4 	bl	800ac08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008c40:	f3ef 8211 	mrs	r2, BASEPRI
 8008c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c48:	f383 8811 	msr	BASEPRI, r3
 8008c4c:	f3bf 8f6f 	isb	sy
 8008c50:	f3bf 8f4f 	dsb	sy
 8008c54:	61fa      	str	r2, [r7, #28]
 8008c56:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008c58:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c5a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d302      	bcc.n	8008c6e <xQueueGenericSendFromISR+0xc2>
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	2b02      	cmp	r3, #2
 8008c6c:	d12f      	bne.n	8008cce <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c74:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c7e:	683a      	ldr	r2, [r7, #0]
 8008c80:	68b9      	ldr	r1, [r7, #8]
 8008c82:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008c84:	f000 f912 	bl	8008eac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008c88:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008c8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c90:	d112      	bne.n	8008cb8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d016      	beq.n	8008cc8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c9c:	3324      	adds	r3, #36	@ 0x24
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f000 ff78 	bl	8009b94 <xTaskRemoveFromEventList>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00e      	beq.n	8008cc8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d00b      	beq.n	8008cc8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	601a      	str	r2, [r3, #0]
 8008cb6:	e007      	b.n	8008cc8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008cb8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	b25a      	sxtb	r2, r3
 8008cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008ccc:	e001      	b.n	8008cd2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008cd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cd4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008cdc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008cde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3740      	adds	r7, #64	@ 0x40
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b08c      	sub	sp, #48	@ 0x30
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d10b      	bne.n	8008d1a <xQueueReceive+0x32>
	__asm volatile
 8008d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d06:	f383 8811 	msr	BASEPRI, r3
 8008d0a:	f3bf 8f6f 	isb	sy
 8008d0e:	f3bf 8f4f 	dsb	sy
 8008d12:	623b      	str	r3, [r7, #32]
}
 8008d14:	bf00      	nop
 8008d16:	bf00      	nop
 8008d18:	e7fd      	b.n	8008d16 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d103      	bne.n	8008d28 <xQueueReceive+0x40>
 8008d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d101      	bne.n	8008d2c <xQueueReceive+0x44>
 8008d28:	2301      	movs	r3, #1
 8008d2a:	e000      	b.n	8008d2e <xQueueReceive+0x46>
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d10b      	bne.n	8008d4a <xQueueReceive+0x62>
	__asm volatile
 8008d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d36:	f383 8811 	msr	BASEPRI, r3
 8008d3a:	f3bf 8f6f 	isb	sy
 8008d3e:	f3bf 8f4f 	dsb	sy
 8008d42:	61fb      	str	r3, [r7, #28]
}
 8008d44:	bf00      	nop
 8008d46:	bf00      	nop
 8008d48:	e7fd      	b.n	8008d46 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d4a:	f001 f911 	bl	8009f70 <xTaskGetSchedulerState>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d102      	bne.n	8008d5a <xQueueReceive+0x72>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d101      	bne.n	8008d5e <xQueueReceive+0x76>
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	e000      	b.n	8008d60 <xQueueReceive+0x78>
 8008d5e:	2300      	movs	r3, #0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d10b      	bne.n	8008d7c <xQueueReceive+0x94>
	__asm volatile
 8008d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d68:	f383 8811 	msr	BASEPRI, r3
 8008d6c:	f3bf 8f6f 	isb	sy
 8008d70:	f3bf 8f4f 	dsb	sy
 8008d74:	61bb      	str	r3, [r7, #24]
}
 8008d76:	bf00      	nop
 8008d78:	bf00      	nop
 8008d7a:	e7fd      	b.n	8008d78 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d7c:	f001 fe64 	bl	800aa48 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d84:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d01f      	beq.n	8008dcc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d8c:	68b9      	ldr	r1, [r7, #8]
 8008d8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d90:	f000 f8f6 	bl	8008f80 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d96:	1e5a      	subs	r2, r3, #1
 8008d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d9a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d9e:	691b      	ldr	r3, [r3, #16]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d00f      	beq.n	8008dc4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008da6:	3310      	adds	r3, #16
 8008da8:	4618      	mov	r0, r3
 8008daa:	f000 fef3 	bl	8009b94 <xTaskRemoveFromEventList>
 8008dae:	4603      	mov	r3, r0
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d007      	beq.n	8008dc4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008db4:	4b3c      	ldr	r3, [pc, #240]	@ (8008ea8 <xQueueReceive+0x1c0>)
 8008db6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008dba:	601a      	str	r2, [r3, #0]
 8008dbc:	f3bf 8f4f 	dsb	sy
 8008dc0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008dc4:	f001 fe72 	bl	800aaac <vPortExitCritical>
				return pdPASS;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	e069      	b.n	8008ea0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d103      	bne.n	8008dda <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008dd2:	f001 fe6b 	bl	800aaac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	e062      	b.n	8008ea0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d106      	bne.n	8008dee <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008de0:	f107 0310 	add.w	r3, r7, #16
 8008de4:	4618      	mov	r0, r3
 8008de6:	f000 ff61 	bl	8009cac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008dea:	2301      	movs	r3, #1
 8008dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008dee:	f001 fe5d 	bl	800aaac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008df2:	f000 fca1 	bl	8009738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008df6:	f001 fe27 	bl	800aa48 <vPortEnterCritical>
 8008dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dfc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008e00:	b25b      	sxtb	r3, r3
 8008e02:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008e06:	d103      	bne.n	8008e10 <xQueueReceive+0x128>
 8008e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e16:	b25b      	sxtb	r3, r3
 8008e18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008e1c:	d103      	bne.n	8008e26 <xQueueReceive+0x13e>
 8008e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e20:	2200      	movs	r2, #0
 8008e22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e26:	f001 fe41 	bl	800aaac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e2a:	1d3a      	adds	r2, r7, #4
 8008e2c:	f107 0310 	add.w	r3, r7, #16
 8008e30:	4611      	mov	r1, r2
 8008e32:	4618      	mov	r0, r3
 8008e34:	f000 ff50 	bl	8009cd8 <xTaskCheckForTimeOut>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d123      	bne.n	8008e86 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e40:	f000 f916 	bl	8009070 <prvIsQueueEmpty>
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d017      	beq.n	8008e7a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e4c:	3324      	adds	r3, #36	@ 0x24
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	4611      	mov	r1, r2
 8008e52:	4618      	mov	r0, r3
 8008e54:	f000 fe4c 	bl	8009af0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008e58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e5a:	f000 f8b7 	bl	8008fcc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e5e:	f000 fc79 	bl	8009754 <xTaskResumeAll>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d189      	bne.n	8008d7c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008e68:	4b0f      	ldr	r3, [pc, #60]	@ (8008ea8 <xQueueReceive+0x1c0>)
 8008e6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e6e:	601a      	str	r2, [r3, #0]
 8008e70:	f3bf 8f4f 	dsb	sy
 8008e74:	f3bf 8f6f 	isb	sy
 8008e78:	e780      	b.n	8008d7c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008e7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e7c:	f000 f8a6 	bl	8008fcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e80:	f000 fc68 	bl	8009754 <xTaskResumeAll>
 8008e84:	e77a      	b.n	8008d7c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008e86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e88:	f000 f8a0 	bl	8008fcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e8c:	f000 fc62 	bl	8009754 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e92:	f000 f8ed 	bl	8009070 <prvIsQueueEmpty>
 8008e96:	4603      	mov	r3, r0
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	f43f af6f 	beq.w	8008d7c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e9e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3730      	adds	r7, #48	@ 0x30
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	e000ed04 	.word	0xe000ed04

08008eac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b086      	sub	sp, #24
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ec0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d10d      	bne.n	8008ee6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d14d      	bne.n	8008f6e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f001 f868 	bl	8009fac <xTaskPriorityDisinherit>
 8008edc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	609a      	str	r2, [r3, #8]
 8008ee4:	e043      	b.n	8008f6e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d119      	bne.n	8008f20 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	6858      	ldr	r0, [r3, #4]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	68b9      	ldr	r1, [r7, #8]
 8008ef8:	f00f fe5f 	bl	8018bba <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	685a      	ldr	r2, [r3, #4]
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f04:	441a      	add	r2, r3
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	685a      	ldr	r2, [r3, #4]
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d32b      	bcc.n	8008f6e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	605a      	str	r2, [r3, #4]
 8008f1e:	e026      	b.n	8008f6e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	68d8      	ldr	r0, [r3, #12]
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f28:	461a      	mov	r2, r3
 8008f2a:	68b9      	ldr	r1, [r7, #8]
 8008f2c:	f00f fe45 	bl	8018bba <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	68da      	ldr	r2, [r3, #12]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f38:	425b      	negs	r3, r3
 8008f3a:	441a      	add	r2, r3
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	68da      	ldr	r2, [r3, #12]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d207      	bcs.n	8008f5c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	689a      	ldr	r2, [r3, #8]
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f54:	425b      	negs	r3, r3
 8008f56:	441a      	add	r2, r3
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2b02      	cmp	r3, #2
 8008f60:	d105      	bne.n	8008f6e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d002      	beq.n	8008f6e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	3b01      	subs	r3, #1
 8008f6c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	1c5a      	adds	r2, r3, #1
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008f76:	697b      	ldr	r3, [r7, #20]
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3718      	adds	r7, #24
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d018      	beq.n	8008fc4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	68da      	ldr	r2, [r3, #12]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f9a:	441a      	add	r2, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	68da      	ldr	r2, [r3, #12]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d303      	bcc.n	8008fb4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	68d9      	ldr	r1, [r3, #12]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	6838      	ldr	r0, [r7, #0]
 8008fc0:	f00f fdfb 	bl	8018bba <memcpy>
	}
}
 8008fc4:	bf00      	nop
 8008fc6:	3708      	adds	r7, #8
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008fd4:	f001 fd38 	bl	800aa48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008fde:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fe0:	e011      	b.n	8009006 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d012      	beq.n	8009010 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	3324      	adds	r3, #36	@ 0x24
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f000 fdd0 	bl	8009b94 <xTaskRemoveFromEventList>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d001      	beq.n	8008ffe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008ffa:	f000 fed1 	bl	8009da0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008ffe:	7bfb      	ldrb	r3, [r7, #15]
 8009000:	3b01      	subs	r3, #1
 8009002:	b2db      	uxtb	r3, r3
 8009004:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800900a:	2b00      	cmp	r3, #0
 800900c:	dce9      	bgt.n	8008fe2 <prvUnlockQueue+0x16>
 800900e:	e000      	b.n	8009012 <prvUnlockQueue+0x46>
					break;
 8009010:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	22ff      	movs	r2, #255	@ 0xff
 8009016:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800901a:	f001 fd47 	bl	800aaac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800901e:	f001 fd13 	bl	800aa48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009028:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800902a:	e011      	b.n	8009050 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	691b      	ldr	r3, [r3, #16]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d012      	beq.n	800905a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	3310      	adds	r3, #16
 8009038:	4618      	mov	r0, r3
 800903a:	f000 fdab 	bl	8009b94 <xTaskRemoveFromEventList>
 800903e:	4603      	mov	r3, r0
 8009040:	2b00      	cmp	r3, #0
 8009042:	d001      	beq.n	8009048 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009044:	f000 feac 	bl	8009da0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009048:	7bbb      	ldrb	r3, [r7, #14]
 800904a:	3b01      	subs	r3, #1
 800904c:	b2db      	uxtb	r3, r3
 800904e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009050:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009054:	2b00      	cmp	r3, #0
 8009056:	dce9      	bgt.n	800902c <prvUnlockQueue+0x60>
 8009058:	e000      	b.n	800905c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800905a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	22ff      	movs	r2, #255	@ 0xff
 8009060:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009064:	f001 fd22 	bl	800aaac <vPortExitCritical>
}
 8009068:	bf00      	nop
 800906a:	3710      	adds	r7, #16
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009078:	f001 fce6 	bl	800aa48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009080:	2b00      	cmp	r3, #0
 8009082:	d102      	bne.n	800908a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009084:	2301      	movs	r3, #1
 8009086:	60fb      	str	r3, [r7, #12]
 8009088:	e001      	b.n	800908e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800908a:	2300      	movs	r3, #0
 800908c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800908e:	f001 fd0d 	bl	800aaac <vPortExitCritical>

	return xReturn;
 8009092:	68fb      	ldr	r3, [r7, #12]
}
 8009094:	4618      	mov	r0, r3
 8009096:	3710      	adds	r7, #16
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80090a4:	f001 fcd0 	bl	800aa48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d102      	bne.n	80090ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80090b4:	2301      	movs	r3, #1
 80090b6:	60fb      	str	r3, [r7, #12]
 80090b8:	e001      	b.n	80090be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80090ba:	2300      	movs	r3, #0
 80090bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80090be:	f001 fcf5 	bl	800aaac <vPortExitCritical>

	return xReturn;
 80090c2:	68fb      	ldr	r3, [r7, #12]
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3710      	adds	r7, #16
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80090cc:	b480      	push	{r7}
 80090ce:	b085      	sub	sp, #20
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090d6:	2300      	movs	r3, #0
 80090d8:	60fb      	str	r3, [r7, #12]
 80090da:	e014      	b.n	8009106 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80090dc:	4a0f      	ldr	r2, [pc, #60]	@ (800911c <vQueueAddToRegistry+0x50>)
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d10b      	bne.n	8009100 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80090e8:	490c      	ldr	r1, [pc, #48]	@ (800911c <vQueueAddToRegistry+0x50>)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	683a      	ldr	r2, [r7, #0]
 80090ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80090f2:	4a0a      	ldr	r2, [pc, #40]	@ (800911c <vQueueAddToRegistry+0x50>)
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	00db      	lsls	r3, r3, #3
 80090f8:	4413      	add	r3, r2
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80090fe:	e006      	b.n	800910e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	3301      	adds	r3, #1
 8009104:	60fb      	str	r3, [r7, #12]
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2b07      	cmp	r3, #7
 800910a:	d9e7      	bls.n	80090dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800910c:	bf00      	nop
 800910e:	bf00      	nop
 8009110:	3714      	adds	r7, #20
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr
 800911a:	bf00      	nop
 800911c:	200081c0 	.word	0x200081c0

08009120 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009120:	b580      	push	{r7, lr}
 8009122:	b086      	sub	sp, #24
 8009124:	af00      	add	r7, sp, #0
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	60b9      	str	r1, [r7, #8]
 800912a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009130:	f001 fc8a 	bl	800aa48 <vPortEnterCritical>
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800913a:	b25b      	sxtb	r3, r3
 800913c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009140:	d103      	bne.n	800914a <vQueueWaitForMessageRestricted+0x2a>
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	2200      	movs	r2, #0
 8009146:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009150:	b25b      	sxtb	r3, r3
 8009152:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009156:	d103      	bne.n	8009160 <vQueueWaitForMessageRestricted+0x40>
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	2200      	movs	r2, #0
 800915c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009160:	f001 fca4 	bl	800aaac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009168:	2b00      	cmp	r3, #0
 800916a:	d106      	bne.n	800917a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	3324      	adds	r3, #36	@ 0x24
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	68b9      	ldr	r1, [r7, #8]
 8009174:	4618      	mov	r0, r3
 8009176:	f000 fce1 	bl	8009b3c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800917a:	6978      	ldr	r0, [r7, #20]
 800917c:	f7ff ff26 	bl	8008fcc <prvUnlockQueue>
	}
 8009180:	bf00      	nop
 8009182:	3718      	adds	r7, #24
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009188:	b580      	push	{r7, lr}
 800918a:	b08e      	sub	sp, #56	@ 0x38
 800918c:	af04      	add	r7, sp, #16
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	607a      	str	r2, [r7, #4]
 8009194:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009198:	2b00      	cmp	r3, #0
 800919a:	d10b      	bne.n	80091b4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800919c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091a0:	f383 8811 	msr	BASEPRI, r3
 80091a4:	f3bf 8f6f 	isb	sy
 80091a8:	f3bf 8f4f 	dsb	sy
 80091ac:	623b      	str	r3, [r7, #32]
}
 80091ae:	bf00      	nop
 80091b0:	bf00      	nop
 80091b2:	e7fd      	b.n	80091b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80091b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d10b      	bne.n	80091d2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80091ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091be:	f383 8811 	msr	BASEPRI, r3
 80091c2:	f3bf 8f6f 	isb	sy
 80091c6:	f3bf 8f4f 	dsb	sy
 80091ca:	61fb      	str	r3, [r7, #28]
}
 80091cc:	bf00      	nop
 80091ce:	bf00      	nop
 80091d0:	e7fd      	b.n	80091ce <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80091d2:	23a8      	movs	r3, #168	@ 0xa8
 80091d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	2ba8      	cmp	r3, #168	@ 0xa8
 80091da:	d00b      	beq.n	80091f4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80091dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091e0:	f383 8811 	msr	BASEPRI, r3
 80091e4:	f3bf 8f6f 	isb	sy
 80091e8:	f3bf 8f4f 	dsb	sy
 80091ec:	61bb      	str	r3, [r7, #24]
}
 80091ee:	bf00      	nop
 80091f0:	bf00      	nop
 80091f2:	e7fd      	b.n	80091f0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80091f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80091f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d01e      	beq.n	800923a <xTaskCreateStatic+0xb2>
 80091fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d01b      	beq.n	800923a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009204:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009208:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800920a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800920c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800920e:	2202      	movs	r2, #2
 8009210:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009214:	2300      	movs	r3, #0
 8009216:	9303      	str	r3, [sp, #12]
 8009218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800921a:	9302      	str	r3, [sp, #8]
 800921c:	f107 0314 	add.w	r3, r7, #20
 8009220:	9301      	str	r3, [sp, #4]
 8009222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009224:	9300      	str	r3, [sp, #0]
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	68b9      	ldr	r1, [r7, #8]
 800922c:	68f8      	ldr	r0, [r7, #12]
 800922e:	f000 f851 	bl	80092d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009232:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009234:	f000 f8f6 	bl	8009424 <prvAddNewTaskToReadyList>
 8009238:	e001      	b.n	800923e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800923a:	2300      	movs	r3, #0
 800923c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800923e:	697b      	ldr	r3, [r7, #20]
	}
 8009240:	4618      	mov	r0, r3
 8009242:	3728      	adds	r7, #40	@ 0x28
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009248:	b580      	push	{r7, lr}
 800924a:	b08c      	sub	sp, #48	@ 0x30
 800924c:	af04      	add	r7, sp, #16
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	60b9      	str	r1, [r7, #8]
 8009252:	603b      	str	r3, [r7, #0]
 8009254:	4613      	mov	r3, r2
 8009256:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009258:	88fb      	ldrh	r3, [r7, #6]
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	4618      	mov	r0, r3
 800925e:	f001 fd15 	bl	800ac8c <pvPortMalloc>
 8009262:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d00e      	beq.n	8009288 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800926a:	20a8      	movs	r0, #168	@ 0xa8
 800926c:	f001 fd0e 	bl	800ac8c <pvPortMalloc>
 8009270:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009272:	69fb      	ldr	r3, [r7, #28]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d003      	beq.n	8009280 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	697a      	ldr	r2, [r7, #20]
 800927c:	631a      	str	r2, [r3, #48]	@ 0x30
 800927e:	e005      	b.n	800928c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009280:	6978      	ldr	r0, [r7, #20]
 8009282:	f001 fdd1 	bl	800ae28 <vPortFree>
 8009286:	e001      	b.n	800928c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009288:	2300      	movs	r3, #0
 800928a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d017      	beq.n	80092c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009292:	69fb      	ldr	r3, [r7, #28]
 8009294:	2200      	movs	r2, #0
 8009296:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800929a:	88fa      	ldrh	r2, [r7, #6]
 800929c:	2300      	movs	r3, #0
 800929e:	9303      	str	r3, [sp, #12]
 80092a0:	69fb      	ldr	r3, [r7, #28]
 80092a2:	9302      	str	r3, [sp, #8]
 80092a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092a6:	9301      	str	r3, [sp, #4]
 80092a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092aa:	9300      	str	r3, [sp, #0]
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	68b9      	ldr	r1, [r7, #8]
 80092b0:	68f8      	ldr	r0, [r7, #12]
 80092b2:	f000 f80f 	bl	80092d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80092b6:	69f8      	ldr	r0, [r7, #28]
 80092b8:	f000 f8b4 	bl	8009424 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80092bc:	2301      	movs	r3, #1
 80092be:	61bb      	str	r3, [r7, #24]
 80092c0:	e002      	b.n	80092c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80092c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80092c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80092c8:	69bb      	ldr	r3, [r7, #24]
	}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3720      	adds	r7, #32
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
	...

080092d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b088      	sub	sp, #32
 80092d8:	af00      	add	r7, sp, #0
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	607a      	str	r2, [r7, #4]
 80092e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80092e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	009b      	lsls	r3, r3, #2
 80092ea:	461a      	mov	r2, r3
 80092ec:	21a5      	movs	r1, #165	@ 0xa5
 80092ee:	f00f fb3d 	bl	801896c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80092f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80092fc:	3b01      	subs	r3, #1
 80092fe:	009b      	lsls	r3, r3, #2
 8009300:	4413      	add	r3, r2
 8009302:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009304:	69bb      	ldr	r3, [r7, #24]
 8009306:	f023 0307 	bic.w	r3, r3, #7
 800930a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800930c:	69bb      	ldr	r3, [r7, #24]
 800930e:	f003 0307 	and.w	r3, r3, #7
 8009312:	2b00      	cmp	r3, #0
 8009314:	d00b      	beq.n	800932e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800931a:	f383 8811 	msr	BASEPRI, r3
 800931e:	f3bf 8f6f 	isb	sy
 8009322:	f3bf 8f4f 	dsb	sy
 8009326:	617b      	str	r3, [r7, #20]
}
 8009328:	bf00      	nop
 800932a:	bf00      	nop
 800932c:	e7fd      	b.n	800932a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d01f      	beq.n	8009374 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009334:	2300      	movs	r3, #0
 8009336:	61fb      	str	r3, [r7, #28]
 8009338:	e012      	b.n	8009360 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800933a:	68ba      	ldr	r2, [r7, #8]
 800933c:	69fb      	ldr	r3, [r7, #28]
 800933e:	4413      	add	r3, r2
 8009340:	7819      	ldrb	r1, [r3, #0]
 8009342:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	4413      	add	r3, r2
 8009348:	3334      	adds	r3, #52	@ 0x34
 800934a:	460a      	mov	r2, r1
 800934c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800934e:	68ba      	ldr	r2, [r7, #8]
 8009350:	69fb      	ldr	r3, [r7, #28]
 8009352:	4413      	add	r3, r2
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d006      	beq.n	8009368 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800935a:	69fb      	ldr	r3, [r7, #28]
 800935c:	3301      	adds	r3, #1
 800935e:	61fb      	str	r3, [r7, #28]
 8009360:	69fb      	ldr	r3, [r7, #28]
 8009362:	2b0f      	cmp	r3, #15
 8009364:	d9e9      	bls.n	800933a <prvInitialiseNewTask+0x66>
 8009366:	e000      	b.n	800936a <prvInitialiseNewTask+0x96>
			{
				break;
 8009368:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800936a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800936c:	2200      	movs	r2, #0
 800936e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009372:	e003      	b.n	800937c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009376:	2200      	movs	r2, #0
 8009378:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800937c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800937e:	2b37      	cmp	r3, #55	@ 0x37
 8009380:	d901      	bls.n	8009386 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009382:	2337      	movs	r3, #55	@ 0x37
 8009384:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009388:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800938a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800938c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800938e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009390:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009394:	2200      	movs	r2, #0
 8009396:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800939a:	3304      	adds	r3, #4
 800939c:	4618      	mov	r0, r3
 800939e:	f7ff f965 	bl	800866c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80093a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a4:	3318      	adds	r3, #24
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7ff f960 	bl	800866c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80093ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093b0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80093b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80093bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093c0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80093c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c4:	2200      	movs	r2, #0
 80093c6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80093ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093cc:	2200      	movs	r2, #0
 80093ce:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80093d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d4:	3354      	adds	r3, #84	@ 0x54
 80093d6:	224c      	movs	r2, #76	@ 0x4c
 80093d8:	2100      	movs	r1, #0
 80093da:	4618      	mov	r0, r3
 80093dc:	f00f fac6 	bl	801896c <memset>
 80093e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e2:	4a0d      	ldr	r2, [pc, #52]	@ (8009418 <prvInitialiseNewTask+0x144>)
 80093e4:	659a      	str	r2, [r3, #88]	@ 0x58
 80093e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e8:	4a0c      	ldr	r2, [pc, #48]	@ (800941c <prvInitialiseNewTask+0x148>)
 80093ea:	65da      	str	r2, [r3, #92]	@ 0x5c
 80093ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ee:	4a0c      	ldr	r2, [pc, #48]	@ (8009420 <prvInitialiseNewTask+0x14c>)
 80093f0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80093f2:	683a      	ldr	r2, [r7, #0]
 80093f4:	68f9      	ldr	r1, [r7, #12]
 80093f6:	69b8      	ldr	r0, [r7, #24]
 80093f8:	f001 f9f6 	bl	800a7e8 <pxPortInitialiseStack>
 80093fc:	4602      	mov	r2, r0
 80093fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009400:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009404:	2b00      	cmp	r3, #0
 8009406:	d002      	beq.n	800940e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800940a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800940c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800940e:	bf00      	nop
 8009410:	3720      	adds	r7, #32
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	20010fd4 	.word	0x20010fd4
 800941c:	2001103c 	.word	0x2001103c
 8009420:	200110a4 	.word	0x200110a4

08009424 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800942c:	f001 fb0c 	bl	800aa48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009430:	4b2d      	ldr	r3, [pc, #180]	@ (80094e8 <prvAddNewTaskToReadyList+0xc4>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	3301      	adds	r3, #1
 8009436:	4a2c      	ldr	r2, [pc, #176]	@ (80094e8 <prvAddNewTaskToReadyList+0xc4>)
 8009438:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800943a:	4b2c      	ldr	r3, [pc, #176]	@ (80094ec <prvAddNewTaskToReadyList+0xc8>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d109      	bne.n	8009456 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009442:	4a2a      	ldr	r2, [pc, #168]	@ (80094ec <prvAddNewTaskToReadyList+0xc8>)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009448:	4b27      	ldr	r3, [pc, #156]	@ (80094e8 <prvAddNewTaskToReadyList+0xc4>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	2b01      	cmp	r3, #1
 800944e:	d110      	bne.n	8009472 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009450:	f000 fcca 	bl	8009de8 <prvInitialiseTaskLists>
 8009454:	e00d      	b.n	8009472 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009456:	4b26      	ldr	r3, [pc, #152]	@ (80094f0 <prvAddNewTaskToReadyList+0xcc>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d109      	bne.n	8009472 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800945e:	4b23      	ldr	r3, [pc, #140]	@ (80094ec <prvAddNewTaskToReadyList+0xc8>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009468:	429a      	cmp	r2, r3
 800946a:	d802      	bhi.n	8009472 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800946c:	4a1f      	ldr	r2, [pc, #124]	@ (80094ec <prvAddNewTaskToReadyList+0xc8>)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009472:	4b20      	ldr	r3, [pc, #128]	@ (80094f4 <prvAddNewTaskToReadyList+0xd0>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	3301      	adds	r3, #1
 8009478:	4a1e      	ldr	r2, [pc, #120]	@ (80094f4 <prvAddNewTaskToReadyList+0xd0>)
 800947a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800947c:	4b1d      	ldr	r3, [pc, #116]	@ (80094f4 <prvAddNewTaskToReadyList+0xd0>)
 800947e:	681a      	ldr	r2, [r3, #0]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009488:	4b1b      	ldr	r3, [pc, #108]	@ (80094f8 <prvAddNewTaskToReadyList+0xd4>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	429a      	cmp	r2, r3
 800948e:	d903      	bls.n	8009498 <prvAddNewTaskToReadyList+0x74>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009494:	4a18      	ldr	r2, [pc, #96]	@ (80094f8 <prvAddNewTaskToReadyList+0xd4>)
 8009496:	6013      	str	r3, [r2, #0]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800949c:	4613      	mov	r3, r2
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	4413      	add	r3, r2
 80094a2:	009b      	lsls	r3, r3, #2
 80094a4:	4a15      	ldr	r2, [pc, #84]	@ (80094fc <prvAddNewTaskToReadyList+0xd8>)
 80094a6:	441a      	add	r2, r3
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	3304      	adds	r3, #4
 80094ac:	4619      	mov	r1, r3
 80094ae:	4610      	mov	r0, r2
 80094b0:	f7ff f8e9 	bl	8008686 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80094b4:	f001 fafa 	bl	800aaac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80094b8:	4b0d      	ldr	r3, [pc, #52]	@ (80094f0 <prvAddNewTaskToReadyList+0xcc>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d00e      	beq.n	80094de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80094c0:	4b0a      	ldr	r3, [pc, #40]	@ (80094ec <prvAddNewTaskToReadyList+0xc8>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d207      	bcs.n	80094de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80094ce:	4b0c      	ldr	r3, [pc, #48]	@ (8009500 <prvAddNewTaskToReadyList+0xdc>)
 80094d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094d4:	601a      	str	r2, [r3, #0]
 80094d6:	f3bf 8f4f 	dsb	sy
 80094da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094de:	bf00      	nop
 80094e0:	3708      	adds	r7, #8
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	200086d4 	.word	0x200086d4
 80094ec:	20008200 	.word	0x20008200
 80094f0:	200086e0 	.word	0x200086e0
 80094f4:	200086f0 	.word	0x200086f0
 80094f8:	200086dc 	.word	0x200086dc
 80094fc:	20008204 	.word	0x20008204
 8009500:	e000ed04 	.word	0xe000ed04

08009504 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800950c:	f001 fa9c 	bl	800aa48 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d102      	bne.n	800951c <vTaskDelete+0x18>
 8009516:	4b2d      	ldr	r3, [pc, #180]	@ (80095cc <vTaskDelete+0xc8>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	e000      	b.n	800951e <vTaskDelete+0x1a>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	3304      	adds	r3, #4
 8009524:	4618      	mov	r0, r3
 8009526:	f7ff f90b 	bl	8008740 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800952e:	2b00      	cmp	r3, #0
 8009530:	d004      	beq.n	800953c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	3318      	adds	r3, #24
 8009536:	4618      	mov	r0, r3
 8009538:	f7ff f902 	bl	8008740 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800953c:	4b24      	ldr	r3, [pc, #144]	@ (80095d0 <vTaskDelete+0xcc>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	3301      	adds	r3, #1
 8009542:	4a23      	ldr	r2, [pc, #140]	@ (80095d0 <vTaskDelete+0xcc>)
 8009544:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8009546:	4b21      	ldr	r3, [pc, #132]	@ (80095cc <vTaskDelete+0xc8>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	68fa      	ldr	r2, [r7, #12]
 800954c:	429a      	cmp	r2, r3
 800954e:	d10b      	bne.n	8009568 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	3304      	adds	r3, #4
 8009554:	4619      	mov	r1, r3
 8009556:	481f      	ldr	r0, [pc, #124]	@ (80095d4 <vTaskDelete+0xd0>)
 8009558:	f7ff f895 	bl	8008686 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800955c:	4b1e      	ldr	r3, [pc, #120]	@ (80095d8 <vTaskDelete+0xd4>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	3301      	adds	r3, #1
 8009562:	4a1d      	ldr	r2, [pc, #116]	@ (80095d8 <vTaskDelete+0xd4>)
 8009564:	6013      	str	r3, [r2, #0]
 8009566:	e009      	b.n	800957c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8009568:	4b1c      	ldr	r3, [pc, #112]	@ (80095dc <vTaskDelete+0xd8>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	3b01      	subs	r3, #1
 800956e:	4a1b      	ldr	r2, [pc, #108]	@ (80095dc <vTaskDelete+0xd8>)
 8009570:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8009572:	68f8      	ldr	r0, [r7, #12]
 8009574:	f000 fca6 	bl	8009ec4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8009578:	f000 fcda 	bl	8009f30 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800957c:	f001 fa96 	bl	800aaac <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8009580:	4b17      	ldr	r3, [pc, #92]	@ (80095e0 <vTaskDelete+0xdc>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d01c      	beq.n	80095c2 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8009588:	4b10      	ldr	r3, [pc, #64]	@ (80095cc <vTaskDelete+0xc8>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	68fa      	ldr	r2, [r7, #12]
 800958e:	429a      	cmp	r2, r3
 8009590:	d117      	bne.n	80095c2 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8009592:	4b14      	ldr	r3, [pc, #80]	@ (80095e4 <vTaskDelete+0xe0>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d00b      	beq.n	80095b2 <vTaskDelete+0xae>
	__asm volatile
 800959a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800959e:	f383 8811 	msr	BASEPRI, r3
 80095a2:	f3bf 8f6f 	isb	sy
 80095a6:	f3bf 8f4f 	dsb	sy
 80095aa:	60bb      	str	r3, [r7, #8]
}
 80095ac:	bf00      	nop
 80095ae:	bf00      	nop
 80095b0:	e7fd      	b.n	80095ae <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80095b2:	4b0d      	ldr	r3, [pc, #52]	@ (80095e8 <vTaskDelete+0xe4>)
 80095b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095b8:	601a      	str	r2, [r3, #0]
 80095ba:	f3bf 8f4f 	dsb	sy
 80095be:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80095c2:	bf00      	nop
 80095c4:	3710      	adds	r7, #16
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
 80095ca:	bf00      	nop
 80095cc:	20008200 	.word	0x20008200
 80095d0:	200086f0 	.word	0x200086f0
 80095d4:	200086a8 	.word	0x200086a8
 80095d8:	200086bc 	.word	0x200086bc
 80095dc:	200086d4 	.word	0x200086d4
 80095e0:	200086e0 	.word	0x200086e0
 80095e4:	200086fc 	.word	0x200086fc
 80095e8:	e000ed04 	.word	0xe000ed04

080095ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80095f4:	2300      	movs	r3, #0
 80095f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d018      	beq.n	8009630 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80095fe:	4b14      	ldr	r3, [pc, #80]	@ (8009650 <vTaskDelay+0x64>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d00b      	beq.n	800961e <vTaskDelay+0x32>
	__asm volatile
 8009606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800960a:	f383 8811 	msr	BASEPRI, r3
 800960e:	f3bf 8f6f 	isb	sy
 8009612:	f3bf 8f4f 	dsb	sy
 8009616:	60bb      	str	r3, [r7, #8]
}
 8009618:	bf00      	nop
 800961a:	bf00      	nop
 800961c:	e7fd      	b.n	800961a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800961e:	f000 f88b 	bl	8009738 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009622:	2100      	movs	r1, #0
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f000 fd31 	bl	800a08c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800962a:	f000 f893 	bl	8009754 <xTaskResumeAll>
 800962e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d107      	bne.n	8009646 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009636:	4b07      	ldr	r3, [pc, #28]	@ (8009654 <vTaskDelay+0x68>)
 8009638:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800963c:	601a      	str	r2, [r3, #0]
 800963e:	f3bf 8f4f 	dsb	sy
 8009642:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009646:	bf00      	nop
 8009648:	3710      	adds	r7, #16
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
 800964e:	bf00      	nop
 8009650:	200086fc 	.word	0x200086fc
 8009654:	e000ed04 	.word	0xe000ed04

08009658 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b08a      	sub	sp, #40	@ 0x28
 800965c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800965e:	2300      	movs	r3, #0
 8009660:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009662:	2300      	movs	r3, #0
 8009664:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009666:	463a      	mov	r2, r7
 8009668:	1d39      	adds	r1, r7, #4
 800966a:	f107 0308 	add.w	r3, r7, #8
 800966e:	4618      	mov	r0, r3
 8009670:	f7fe ffa8 	bl	80085c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009674:	6839      	ldr	r1, [r7, #0]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	68ba      	ldr	r2, [r7, #8]
 800967a:	9202      	str	r2, [sp, #8]
 800967c:	9301      	str	r3, [sp, #4]
 800967e:	2300      	movs	r3, #0
 8009680:	9300      	str	r3, [sp, #0]
 8009682:	2300      	movs	r3, #0
 8009684:	460a      	mov	r2, r1
 8009686:	4924      	ldr	r1, [pc, #144]	@ (8009718 <vTaskStartScheduler+0xc0>)
 8009688:	4824      	ldr	r0, [pc, #144]	@ (800971c <vTaskStartScheduler+0xc4>)
 800968a:	f7ff fd7d 	bl	8009188 <xTaskCreateStatic>
 800968e:	4603      	mov	r3, r0
 8009690:	4a23      	ldr	r2, [pc, #140]	@ (8009720 <vTaskStartScheduler+0xc8>)
 8009692:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009694:	4b22      	ldr	r3, [pc, #136]	@ (8009720 <vTaskStartScheduler+0xc8>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d002      	beq.n	80096a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800969c:	2301      	movs	r3, #1
 800969e:	617b      	str	r3, [r7, #20]
 80096a0:	e001      	b.n	80096a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80096a2:	2300      	movs	r3, #0
 80096a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d102      	bne.n	80096b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80096ac:	f000 fd42 	bl	800a134 <xTimerCreateTimerTask>
 80096b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d11b      	bne.n	80096f0 <vTaskStartScheduler+0x98>
	__asm volatile
 80096b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096bc:	f383 8811 	msr	BASEPRI, r3
 80096c0:	f3bf 8f6f 	isb	sy
 80096c4:	f3bf 8f4f 	dsb	sy
 80096c8:	613b      	str	r3, [r7, #16]
}
 80096ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80096cc:	4b15      	ldr	r3, [pc, #84]	@ (8009724 <vTaskStartScheduler+0xcc>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	3354      	adds	r3, #84	@ 0x54
 80096d2:	4a15      	ldr	r2, [pc, #84]	@ (8009728 <vTaskStartScheduler+0xd0>)
 80096d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80096d6:	4b15      	ldr	r3, [pc, #84]	@ (800972c <vTaskStartScheduler+0xd4>)
 80096d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80096dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80096de:	4b14      	ldr	r3, [pc, #80]	@ (8009730 <vTaskStartScheduler+0xd8>)
 80096e0:	2201      	movs	r2, #1
 80096e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80096e4:	4b13      	ldr	r3, [pc, #76]	@ (8009734 <vTaskStartScheduler+0xdc>)
 80096e6:	2200      	movs	r2, #0
 80096e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80096ea:	f001 f909 	bl	800a900 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80096ee:	e00f      	b.n	8009710 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80096f6:	d10b      	bne.n	8009710 <vTaskStartScheduler+0xb8>
	__asm volatile
 80096f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096fc:	f383 8811 	msr	BASEPRI, r3
 8009700:	f3bf 8f6f 	isb	sy
 8009704:	f3bf 8f4f 	dsb	sy
 8009708:	60fb      	str	r3, [r7, #12]
}
 800970a:	bf00      	nop
 800970c:	bf00      	nop
 800970e:	e7fd      	b.n	800970c <vTaskStartScheduler+0xb4>
}
 8009710:	bf00      	nop
 8009712:	3718      	adds	r7, #24
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}
 8009718:	08019a44 	.word	0x08019a44
 800971c:	08009db9 	.word	0x08009db9
 8009720:	200086f8 	.word	0x200086f8
 8009724:	20008200 	.word	0x20008200
 8009728:	200000f4 	.word	0x200000f4
 800972c:	200086f4 	.word	0x200086f4
 8009730:	200086e0 	.word	0x200086e0
 8009734:	200086d8 	.word	0x200086d8

08009738 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009738:	b480      	push	{r7}
 800973a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800973c:	4b04      	ldr	r3, [pc, #16]	@ (8009750 <vTaskSuspendAll+0x18>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	3301      	adds	r3, #1
 8009742:	4a03      	ldr	r2, [pc, #12]	@ (8009750 <vTaskSuspendAll+0x18>)
 8009744:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009746:	bf00      	nop
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr
 8009750:	200086fc 	.word	0x200086fc

08009754 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800975a:	2300      	movs	r3, #0
 800975c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800975e:	2300      	movs	r3, #0
 8009760:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009762:	4b42      	ldr	r3, [pc, #264]	@ (800986c <xTaskResumeAll+0x118>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d10b      	bne.n	8009782 <xTaskResumeAll+0x2e>
	__asm volatile
 800976a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800976e:	f383 8811 	msr	BASEPRI, r3
 8009772:	f3bf 8f6f 	isb	sy
 8009776:	f3bf 8f4f 	dsb	sy
 800977a:	603b      	str	r3, [r7, #0]
}
 800977c:	bf00      	nop
 800977e:	bf00      	nop
 8009780:	e7fd      	b.n	800977e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009782:	f001 f961 	bl	800aa48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009786:	4b39      	ldr	r3, [pc, #228]	@ (800986c <xTaskResumeAll+0x118>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	3b01      	subs	r3, #1
 800978c:	4a37      	ldr	r2, [pc, #220]	@ (800986c <xTaskResumeAll+0x118>)
 800978e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009790:	4b36      	ldr	r3, [pc, #216]	@ (800986c <xTaskResumeAll+0x118>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d162      	bne.n	800985e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009798:	4b35      	ldr	r3, [pc, #212]	@ (8009870 <xTaskResumeAll+0x11c>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d05e      	beq.n	800985e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80097a0:	e02f      	b.n	8009802 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097a2:	4b34      	ldr	r3, [pc, #208]	@ (8009874 <xTaskResumeAll+0x120>)
 80097a4:	68db      	ldr	r3, [r3, #12]
 80097a6:	68db      	ldr	r3, [r3, #12]
 80097a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	3318      	adds	r3, #24
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7fe ffc6 	bl	8008740 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	3304      	adds	r3, #4
 80097b8:	4618      	mov	r0, r3
 80097ba:	f7fe ffc1 	bl	8008740 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097c2:	4b2d      	ldr	r3, [pc, #180]	@ (8009878 <xTaskResumeAll+0x124>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d903      	bls.n	80097d2 <xTaskResumeAll+0x7e>
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ce:	4a2a      	ldr	r2, [pc, #168]	@ (8009878 <xTaskResumeAll+0x124>)
 80097d0:	6013      	str	r3, [r2, #0]
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097d6:	4613      	mov	r3, r2
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	4413      	add	r3, r2
 80097dc:	009b      	lsls	r3, r3, #2
 80097de:	4a27      	ldr	r2, [pc, #156]	@ (800987c <xTaskResumeAll+0x128>)
 80097e0:	441a      	add	r2, r3
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	3304      	adds	r3, #4
 80097e6:	4619      	mov	r1, r3
 80097e8:	4610      	mov	r0, r2
 80097ea:	f7fe ff4c 	bl	8008686 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097f2:	4b23      	ldr	r3, [pc, #140]	@ (8009880 <xTaskResumeAll+0x12c>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097f8:	429a      	cmp	r2, r3
 80097fa:	d302      	bcc.n	8009802 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80097fc:	4b21      	ldr	r3, [pc, #132]	@ (8009884 <xTaskResumeAll+0x130>)
 80097fe:	2201      	movs	r2, #1
 8009800:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009802:	4b1c      	ldr	r3, [pc, #112]	@ (8009874 <xTaskResumeAll+0x120>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d1cb      	bne.n	80097a2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d001      	beq.n	8009814 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009810:	f000 fb8e 	bl	8009f30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009814:	4b1c      	ldr	r3, [pc, #112]	@ (8009888 <xTaskResumeAll+0x134>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d010      	beq.n	8009842 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009820:	f000 f846 	bl	80098b0 <xTaskIncrementTick>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	d002      	beq.n	8009830 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800982a:	4b16      	ldr	r3, [pc, #88]	@ (8009884 <xTaskResumeAll+0x130>)
 800982c:	2201      	movs	r2, #1
 800982e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	3b01      	subs	r3, #1
 8009834:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d1f1      	bne.n	8009820 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800983c:	4b12      	ldr	r3, [pc, #72]	@ (8009888 <xTaskResumeAll+0x134>)
 800983e:	2200      	movs	r2, #0
 8009840:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009842:	4b10      	ldr	r3, [pc, #64]	@ (8009884 <xTaskResumeAll+0x130>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d009      	beq.n	800985e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800984a:	2301      	movs	r3, #1
 800984c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800984e:	4b0f      	ldr	r3, [pc, #60]	@ (800988c <xTaskResumeAll+0x138>)
 8009850:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009854:	601a      	str	r2, [r3, #0]
 8009856:	f3bf 8f4f 	dsb	sy
 800985a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800985e:	f001 f925 	bl	800aaac <vPortExitCritical>

	return xAlreadyYielded;
 8009862:	68bb      	ldr	r3, [r7, #8]
}
 8009864:	4618      	mov	r0, r3
 8009866:	3710      	adds	r7, #16
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}
 800986c:	200086fc 	.word	0x200086fc
 8009870:	200086d4 	.word	0x200086d4
 8009874:	20008694 	.word	0x20008694
 8009878:	200086dc 	.word	0x200086dc
 800987c:	20008204 	.word	0x20008204
 8009880:	20008200 	.word	0x20008200
 8009884:	200086e8 	.word	0x200086e8
 8009888:	200086e4 	.word	0x200086e4
 800988c:	e000ed04 	.word	0xe000ed04

08009890 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009890:	b480      	push	{r7}
 8009892:	b083      	sub	sp, #12
 8009894:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009896:	4b05      	ldr	r3, [pc, #20]	@ (80098ac <xTaskGetTickCount+0x1c>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800989c:	687b      	ldr	r3, [r7, #4]
}
 800989e:	4618      	mov	r0, r3
 80098a0:	370c      	adds	r7, #12
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr
 80098aa:	bf00      	nop
 80098ac:	200086d8 	.word	0x200086d8

080098b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b086      	sub	sp, #24
 80098b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80098b6:	2300      	movs	r3, #0
 80098b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098ba:	4b4f      	ldr	r3, [pc, #316]	@ (80099f8 <xTaskIncrementTick+0x148>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	f040 8090 	bne.w	80099e4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80098c4:	4b4d      	ldr	r3, [pc, #308]	@ (80099fc <xTaskIncrementTick+0x14c>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	3301      	adds	r3, #1
 80098ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80098cc:	4a4b      	ldr	r2, [pc, #300]	@ (80099fc <xTaskIncrementTick+0x14c>)
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d121      	bne.n	800991c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80098d8:	4b49      	ldr	r3, [pc, #292]	@ (8009a00 <xTaskIncrementTick+0x150>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d00b      	beq.n	80098fa <xTaskIncrementTick+0x4a>
	__asm volatile
 80098e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098e6:	f383 8811 	msr	BASEPRI, r3
 80098ea:	f3bf 8f6f 	isb	sy
 80098ee:	f3bf 8f4f 	dsb	sy
 80098f2:	603b      	str	r3, [r7, #0]
}
 80098f4:	bf00      	nop
 80098f6:	bf00      	nop
 80098f8:	e7fd      	b.n	80098f6 <xTaskIncrementTick+0x46>
 80098fa:	4b41      	ldr	r3, [pc, #260]	@ (8009a00 <xTaskIncrementTick+0x150>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	60fb      	str	r3, [r7, #12]
 8009900:	4b40      	ldr	r3, [pc, #256]	@ (8009a04 <xTaskIncrementTick+0x154>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a3e      	ldr	r2, [pc, #248]	@ (8009a00 <xTaskIncrementTick+0x150>)
 8009906:	6013      	str	r3, [r2, #0]
 8009908:	4a3e      	ldr	r2, [pc, #248]	@ (8009a04 <xTaskIncrementTick+0x154>)
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	6013      	str	r3, [r2, #0]
 800990e:	4b3e      	ldr	r3, [pc, #248]	@ (8009a08 <xTaskIncrementTick+0x158>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	3301      	adds	r3, #1
 8009914:	4a3c      	ldr	r2, [pc, #240]	@ (8009a08 <xTaskIncrementTick+0x158>)
 8009916:	6013      	str	r3, [r2, #0]
 8009918:	f000 fb0a 	bl	8009f30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800991c:	4b3b      	ldr	r3, [pc, #236]	@ (8009a0c <xTaskIncrementTick+0x15c>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	693a      	ldr	r2, [r7, #16]
 8009922:	429a      	cmp	r2, r3
 8009924:	d349      	bcc.n	80099ba <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009926:	4b36      	ldr	r3, [pc, #216]	@ (8009a00 <xTaskIncrementTick+0x150>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d104      	bne.n	800993a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009930:	4b36      	ldr	r3, [pc, #216]	@ (8009a0c <xTaskIncrementTick+0x15c>)
 8009932:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009936:	601a      	str	r2, [r3, #0]
					break;
 8009938:	e03f      	b.n	80099ba <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800993a:	4b31      	ldr	r3, [pc, #196]	@ (8009a00 <xTaskIncrementTick+0x150>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	68db      	ldr	r3, [r3, #12]
 8009940:	68db      	ldr	r3, [r3, #12]
 8009942:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800994a:	693a      	ldr	r2, [r7, #16]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	429a      	cmp	r2, r3
 8009950:	d203      	bcs.n	800995a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009952:	4a2e      	ldr	r2, [pc, #184]	@ (8009a0c <xTaskIncrementTick+0x15c>)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009958:	e02f      	b.n	80099ba <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	3304      	adds	r3, #4
 800995e:	4618      	mov	r0, r3
 8009960:	f7fe feee 	bl	8008740 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009968:	2b00      	cmp	r3, #0
 800996a:	d004      	beq.n	8009976 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	3318      	adds	r3, #24
 8009970:	4618      	mov	r0, r3
 8009972:	f7fe fee5 	bl	8008740 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800997a:	4b25      	ldr	r3, [pc, #148]	@ (8009a10 <xTaskIncrementTick+0x160>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	429a      	cmp	r2, r3
 8009980:	d903      	bls.n	800998a <xTaskIncrementTick+0xda>
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009986:	4a22      	ldr	r2, [pc, #136]	@ (8009a10 <xTaskIncrementTick+0x160>)
 8009988:	6013      	str	r3, [r2, #0]
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800998e:	4613      	mov	r3, r2
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	4413      	add	r3, r2
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	4a1f      	ldr	r2, [pc, #124]	@ (8009a14 <xTaskIncrementTick+0x164>)
 8009998:	441a      	add	r2, r3
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	3304      	adds	r3, #4
 800999e:	4619      	mov	r1, r3
 80099a0:	4610      	mov	r0, r2
 80099a2:	f7fe fe70 	bl	8008686 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099aa:	4b1b      	ldr	r3, [pc, #108]	@ (8009a18 <xTaskIncrementTick+0x168>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d3b8      	bcc.n	8009926 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80099b4:	2301      	movs	r3, #1
 80099b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099b8:	e7b5      	b.n	8009926 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80099ba:	4b17      	ldr	r3, [pc, #92]	@ (8009a18 <xTaskIncrementTick+0x168>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099c0:	4914      	ldr	r1, [pc, #80]	@ (8009a14 <xTaskIncrementTick+0x164>)
 80099c2:	4613      	mov	r3, r2
 80099c4:	009b      	lsls	r3, r3, #2
 80099c6:	4413      	add	r3, r2
 80099c8:	009b      	lsls	r3, r3, #2
 80099ca:	440b      	add	r3, r1
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	2b01      	cmp	r3, #1
 80099d0:	d901      	bls.n	80099d6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80099d2:	2301      	movs	r3, #1
 80099d4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80099d6:	4b11      	ldr	r3, [pc, #68]	@ (8009a1c <xTaskIncrementTick+0x16c>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d007      	beq.n	80099ee <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80099de:	2301      	movs	r3, #1
 80099e0:	617b      	str	r3, [r7, #20]
 80099e2:	e004      	b.n	80099ee <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80099e4:	4b0e      	ldr	r3, [pc, #56]	@ (8009a20 <xTaskIncrementTick+0x170>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	3301      	adds	r3, #1
 80099ea:	4a0d      	ldr	r2, [pc, #52]	@ (8009a20 <xTaskIncrementTick+0x170>)
 80099ec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80099ee:	697b      	ldr	r3, [r7, #20]
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3718      	adds	r7, #24
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}
 80099f8:	200086fc 	.word	0x200086fc
 80099fc:	200086d8 	.word	0x200086d8
 8009a00:	2000868c 	.word	0x2000868c
 8009a04:	20008690 	.word	0x20008690
 8009a08:	200086ec 	.word	0x200086ec
 8009a0c:	200086f4 	.word	0x200086f4
 8009a10:	200086dc 	.word	0x200086dc
 8009a14:	20008204 	.word	0x20008204
 8009a18:	20008200 	.word	0x20008200
 8009a1c:	200086e8 	.word	0x200086e8
 8009a20:	200086e4 	.word	0x200086e4

08009a24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009a24:	b480      	push	{r7}
 8009a26:	b085      	sub	sp, #20
 8009a28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009a2a:	4b2b      	ldr	r3, [pc, #172]	@ (8009ad8 <vTaskSwitchContext+0xb4>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d003      	beq.n	8009a3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009a32:	4b2a      	ldr	r3, [pc, #168]	@ (8009adc <vTaskSwitchContext+0xb8>)
 8009a34:	2201      	movs	r2, #1
 8009a36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009a38:	e047      	b.n	8009aca <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8009a3a:	4b28      	ldr	r3, [pc, #160]	@ (8009adc <vTaskSwitchContext+0xb8>)
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a40:	4b27      	ldr	r3, [pc, #156]	@ (8009ae0 <vTaskSwitchContext+0xbc>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	60fb      	str	r3, [r7, #12]
 8009a46:	e011      	b.n	8009a6c <vTaskSwitchContext+0x48>
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d10b      	bne.n	8009a66 <vTaskSwitchContext+0x42>
	__asm volatile
 8009a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a52:	f383 8811 	msr	BASEPRI, r3
 8009a56:	f3bf 8f6f 	isb	sy
 8009a5a:	f3bf 8f4f 	dsb	sy
 8009a5e:	607b      	str	r3, [r7, #4]
}
 8009a60:	bf00      	nop
 8009a62:	bf00      	nop
 8009a64:	e7fd      	b.n	8009a62 <vTaskSwitchContext+0x3e>
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	3b01      	subs	r3, #1
 8009a6a:	60fb      	str	r3, [r7, #12]
 8009a6c:	491d      	ldr	r1, [pc, #116]	@ (8009ae4 <vTaskSwitchContext+0xc0>)
 8009a6e:	68fa      	ldr	r2, [r7, #12]
 8009a70:	4613      	mov	r3, r2
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	4413      	add	r3, r2
 8009a76:	009b      	lsls	r3, r3, #2
 8009a78:	440b      	add	r3, r1
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d0e3      	beq.n	8009a48 <vTaskSwitchContext+0x24>
 8009a80:	68fa      	ldr	r2, [r7, #12]
 8009a82:	4613      	mov	r3, r2
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	4413      	add	r3, r2
 8009a88:	009b      	lsls	r3, r3, #2
 8009a8a:	4a16      	ldr	r2, [pc, #88]	@ (8009ae4 <vTaskSwitchContext+0xc0>)
 8009a8c:	4413      	add	r3, r2
 8009a8e:	60bb      	str	r3, [r7, #8]
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	685a      	ldr	r2, [r3, #4]
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	605a      	str	r2, [r3, #4]
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	685a      	ldr	r2, [r3, #4]
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	3308      	adds	r3, #8
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d104      	bne.n	8009ab0 <vTaskSwitchContext+0x8c>
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	685a      	ldr	r2, [r3, #4]
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	605a      	str	r2, [r3, #4]
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	68db      	ldr	r3, [r3, #12]
 8009ab6:	4a0c      	ldr	r2, [pc, #48]	@ (8009ae8 <vTaskSwitchContext+0xc4>)
 8009ab8:	6013      	str	r3, [r2, #0]
 8009aba:	4a09      	ldr	r2, [pc, #36]	@ (8009ae0 <vTaskSwitchContext+0xbc>)
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009ac0:	4b09      	ldr	r3, [pc, #36]	@ (8009ae8 <vTaskSwitchContext+0xc4>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	3354      	adds	r3, #84	@ 0x54
 8009ac6:	4a09      	ldr	r2, [pc, #36]	@ (8009aec <vTaskSwitchContext+0xc8>)
 8009ac8:	6013      	str	r3, [r2, #0]
}
 8009aca:	bf00      	nop
 8009acc:	3714      	adds	r7, #20
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad4:	4770      	bx	lr
 8009ad6:	bf00      	nop
 8009ad8:	200086fc 	.word	0x200086fc
 8009adc:	200086e8 	.word	0x200086e8
 8009ae0:	200086dc 	.word	0x200086dc
 8009ae4:	20008204 	.word	0x20008204
 8009ae8:	20008200 	.word	0x20008200
 8009aec:	200000f4 	.word	0x200000f4

08009af0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d10b      	bne.n	8009b18 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b04:	f383 8811 	msr	BASEPRI, r3
 8009b08:	f3bf 8f6f 	isb	sy
 8009b0c:	f3bf 8f4f 	dsb	sy
 8009b10:	60fb      	str	r3, [r7, #12]
}
 8009b12:	bf00      	nop
 8009b14:	bf00      	nop
 8009b16:	e7fd      	b.n	8009b14 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b18:	4b07      	ldr	r3, [pc, #28]	@ (8009b38 <vTaskPlaceOnEventList+0x48>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	3318      	adds	r3, #24
 8009b1e:	4619      	mov	r1, r3
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f7fe fdd4 	bl	80086ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009b26:	2101      	movs	r1, #1
 8009b28:	6838      	ldr	r0, [r7, #0]
 8009b2a:	f000 faaf 	bl	800a08c <prvAddCurrentTaskToDelayedList>
}
 8009b2e:	bf00      	nop
 8009b30:	3710      	adds	r7, #16
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	20008200 	.word	0x20008200

08009b3c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b086      	sub	sp, #24
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	60f8      	str	r0, [r7, #12]
 8009b44:	60b9      	str	r1, [r7, #8]
 8009b46:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d10b      	bne.n	8009b66 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b52:	f383 8811 	msr	BASEPRI, r3
 8009b56:	f3bf 8f6f 	isb	sy
 8009b5a:	f3bf 8f4f 	dsb	sy
 8009b5e:	617b      	str	r3, [r7, #20]
}
 8009b60:	bf00      	nop
 8009b62:	bf00      	nop
 8009b64:	e7fd      	b.n	8009b62 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b66:	4b0a      	ldr	r3, [pc, #40]	@ (8009b90 <vTaskPlaceOnEventListRestricted+0x54>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	3318      	adds	r3, #24
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	68f8      	ldr	r0, [r7, #12]
 8009b70:	f7fe fd89 	bl	8008686 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d002      	beq.n	8009b80 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009b7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009b7e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009b80:	6879      	ldr	r1, [r7, #4]
 8009b82:	68b8      	ldr	r0, [r7, #8]
 8009b84:	f000 fa82 	bl	800a08c <prvAddCurrentTaskToDelayedList>
	}
 8009b88:	bf00      	nop
 8009b8a:	3718      	adds	r7, #24
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}
 8009b90:	20008200 	.word	0x20008200

08009b94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b086      	sub	sp, #24
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	68db      	ldr	r3, [r3, #12]
 8009ba2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d10b      	bne.n	8009bc2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bae:	f383 8811 	msr	BASEPRI, r3
 8009bb2:	f3bf 8f6f 	isb	sy
 8009bb6:	f3bf 8f4f 	dsb	sy
 8009bba:	60fb      	str	r3, [r7, #12]
}
 8009bbc:	bf00      	nop
 8009bbe:	bf00      	nop
 8009bc0:	e7fd      	b.n	8009bbe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	3318      	adds	r3, #24
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f7fe fdba 	bl	8008740 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8009c44 <xTaskRemoveFromEventList+0xb0>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d11d      	bne.n	8009c10 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	3304      	adds	r3, #4
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f7fe fdb1 	bl	8008740 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009be2:	4b19      	ldr	r3, [pc, #100]	@ (8009c48 <xTaskRemoveFromEventList+0xb4>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	429a      	cmp	r2, r3
 8009be8:	d903      	bls.n	8009bf2 <xTaskRemoveFromEventList+0x5e>
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bee:	4a16      	ldr	r2, [pc, #88]	@ (8009c48 <xTaskRemoveFromEventList+0xb4>)
 8009bf0:	6013      	str	r3, [r2, #0]
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bf6:	4613      	mov	r3, r2
 8009bf8:	009b      	lsls	r3, r3, #2
 8009bfa:	4413      	add	r3, r2
 8009bfc:	009b      	lsls	r3, r3, #2
 8009bfe:	4a13      	ldr	r2, [pc, #76]	@ (8009c4c <xTaskRemoveFromEventList+0xb8>)
 8009c00:	441a      	add	r2, r3
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	3304      	adds	r3, #4
 8009c06:	4619      	mov	r1, r3
 8009c08:	4610      	mov	r0, r2
 8009c0a:	f7fe fd3c 	bl	8008686 <vListInsertEnd>
 8009c0e:	e005      	b.n	8009c1c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	3318      	adds	r3, #24
 8009c14:	4619      	mov	r1, r3
 8009c16:	480e      	ldr	r0, [pc, #56]	@ (8009c50 <xTaskRemoveFromEventList+0xbc>)
 8009c18:	f7fe fd35 	bl	8008686 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c20:	4b0c      	ldr	r3, [pc, #48]	@ (8009c54 <xTaskRemoveFromEventList+0xc0>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d905      	bls.n	8009c36 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8009c58 <xTaskRemoveFromEventList+0xc4>)
 8009c30:	2201      	movs	r2, #1
 8009c32:	601a      	str	r2, [r3, #0]
 8009c34:	e001      	b.n	8009c3a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009c36:	2300      	movs	r3, #0
 8009c38:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009c3a:	697b      	ldr	r3, [r7, #20]
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3718      	adds	r7, #24
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}
 8009c44:	200086fc 	.word	0x200086fc
 8009c48:	200086dc 	.word	0x200086dc
 8009c4c:	20008204 	.word	0x20008204
 8009c50:	20008694 	.word	0x20008694
 8009c54:	20008200 	.word	0x20008200
 8009c58:	200086e8 	.word	0x200086e8

08009c5c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b084      	sub	sp, #16
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d10b      	bne.n	8009c82 <vTaskSetTimeOutState+0x26>
	__asm volatile
 8009c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c6e:	f383 8811 	msr	BASEPRI, r3
 8009c72:	f3bf 8f6f 	isb	sy
 8009c76:	f3bf 8f4f 	dsb	sy
 8009c7a:	60fb      	str	r3, [r7, #12]
}
 8009c7c:	bf00      	nop
 8009c7e:	bf00      	nop
 8009c80:	e7fd      	b.n	8009c7e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8009c82:	f000 fee1 	bl	800aa48 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009c86:	4b07      	ldr	r3, [pc, #28]	@ (8009ca4 <vTaskSetTimeOutState+0x48>)
 8009c88:	681a      	ldr	r2, [r3, #0]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8009c8e:	4b06      	ldr	r3, [pc, #24]	@ (8009ca8 <vTaskSetTimeOutState+0x4c>)
 8009c90:	681a      	ldr	r2, [r3, #0]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8009c96:	f000 ff09 	bl	800aaac <vPortExitCritical>
}
 8009c9a:	bf00      	nop
 8009c9c:	3710      	adds	r7, #16
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
 8009ca2:	bf00      	nop
 8009ca4:	200086ec 	.word	0x200086ec
 8009ca8:	200086d8 	.word	0x200086d8

08009cac <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009cac:	b480      	push	{r7}
 8009cae:	b083      	sub	sp, #12
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009cb4:	4b06      	ldr	r3, [pc, #24]	@ (8009cd0 <vTaskInternalSetTimeOutState+0x24>)
 8009cb6:	681a      	ldr	r2, [r3, #0]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009cbc:	4b05      	ldr	r3, [pc, #20]	@ (8009cd4 <vTaskInternalSetTimeOutState+0x28>)
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	605a      	str	r2, [r3, #4]
}
 8009cc4:	bf00      	nop
 8009cc6:	370c      	adds	r7, #12
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr
 8009cd0:	200086ec 	.word	0x200086ec
 8009cd4:	200086d8 	.word	0x200086d8

08009cd8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b088      	sub	sp, #32
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
 8009ce0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d10b      	bne.n	8009d00 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cec:	f383 8811 	msr	BASEPRI, r3
 8009cf0:	f3bf 8f6f 	isb	sy
 8009cf4:	f3bf 8f4f 	dsb	sy
 8009cf8:	613b      	str	r3, [r7, #16]
}
 8009cfa:	bf00      	nop
 8009cfc:	bf00      	nop
 8009cfe:	e7fd      	b.n	8009cfc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d10b      	bne.n	8009d1e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d0a:	f383 8811 	msr	BASEPRI, r3
 8009d0e:	f3bf 8f6f 	isb	sy
 8009d12:	f3bf 8f4f 	dsb	sy
 8009d16:	60fb      	str	r3, [r7, #12]
}
 8009d18:	bf00      	nop
 8009d1a:	bf00      	nop
 8009d1c:	e7fd      	b.n	8009d1a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009d1e:	f000 fe93 	bl	800aa48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009d22:	4b1d      	ldr	r3, [pc, #116]	@ (8009d98 <xTaskCheckForTimeOut+0xc0>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	685b      	ldr	r3, [r3, #4]
 8009d2c:	69ba      	ldr	r2, [r7, #24]
 8009d2e:	1ad3      	subs	r3, r2, r3
 8009d30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009d3a:	d102      	bne.n	8009d42 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	61fb      	str	r3, [r7, #28]
 8009d40:	e023      	b.n	8009d8a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681a      	ldr	r2, [r3, #0]
 8009d46:	4b15      	ldr	r3, [pc, #84]	@ (8009d9c <xTaskCheckForTimeOut+0xc4>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	d007      	beq.n	8009d5e <xTaskCheckForTimeOut+0x86>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	69ba      	ldr	r2, [r7, #24]
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d302      	bcc.n	8009d5e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009d58:	2301      	movs	r3, #1
 8009d5a:	61fb      	str	r3, [r7, #28]
 8009d5c:	e015      	b.n	8009d8a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	697a      	ldr	r2, [r7, #20]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d20b      	bcs.n	8009d80 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	681a      	ldr	r2, [r3, #0]
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	1ad2      	subs	r2, r2, r3
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f7ff ff99 	bl	8009cac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	61fb      	str	r3, [r7, #28]
 8009d7e:	e004      	b.n	8009d8a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	2200      	movs	r2, #0
 8009d84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009d86:	2301      	movs	r3, #1
 8009d88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009d8a:	f000 fe8f 	bl	800aaac <vPortExitCritical>

	return xReturn;
 8009d8e:	69fb      	ldr	r3, [r7, #28]
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3720      	adds	r7, #32
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	200086d8 	.word	0x200086d8
 8009d9c:	200086ec 	.word	0x200086ec

08009da0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009da0:	b480      	push	{r7}
 8009da2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009da4:	4b03      	ldr	r3, [pc, #12]	@ (8009db4 <vTaskMissedYield+0x14>)
 8009da6:	2201      	movs	r2, #1
 8009da8:	601a      	str	r2, [r3, #0]
}
 8009daa:	bf00      	nop
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr
 8009db4:	200086e8 	.word	0x200086e8

08009db8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b082      	sub	sp, #8
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009dc0:	f000 f852 	bl	8009e68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009dc4:	4b06      	ldr	r3, [pc, #24]	@ (8009de0 <prvIdleTask+0x28>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	d9f9      	bls.n	8009dc0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009dcc:	4b05      	ldr	r3, [pc, #20]	@ (8009de4 <prvIdleTask+0x2c>)
 8009dce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009dd2:	601a      	str	r2, [r3, #0]
 8009dd4:	f3bf 8f4f 	dsb	sy
 8009dd8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009ddc:	e7f0      	b.n	8009dc0 <prvIdleTask+0x8>
 8009dde:	bf00      	nop
 8009de0:	20008204 	.word	0x20008204
 8009de4:	e000ed04 	.word	0xe000ed04

08009de8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b082      	sub	sp, #8
 8009dec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009dee:	2300      	movs	r3, #0
 8009df0:	607b      	str	r3, [r7, #4]
 8009df2:	e00c      	b.n	8009e0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009df4:	687a      	ldr	r2, [r7, #4]
 8009df6:	4613      	mov	r3, r2
 8009df8:	009b      	lsls	r3, r3, #2
 8009dfa:	4413      	add	r3, r2
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	4a12      	ldr	r2, [pc, #72]	@ (8009e48 <prvInitialiseTaskLists+0x60>)
 8009e00:	4413      	add	r3, r2
 8009e02:	4618      	mov	r0, r3
 8009e04:	f7fe fc12 	bl	800862c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	607b      	str	r3, [r7, #4]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2b37      	cmp	r3, #55	@ 0x37
 8009e12:	d9ef      	bls.n	8009df4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009e14:	480d      	ldr	r0, [pc, #52]	@ (8009e4c <prvInitialiseTaskLists+0x64>)
 8009e16:	f7fe fc09 	bl	800862c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009e1a:	480d      	ldr	r0, [pc, #52]	@ (8009e50 <prvInitialiseTaskLists+0x68>)
 8009e1c:	f7fe fc06 	bl	800862c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009e20:	480c      	ldr	r0, [pc, #48]	@ (8009e54 <prvInitialiseTaskLists+0x6c>)
 8009e22:	f7fe fc03 	bl	800862c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009e26:	480c      	ldr	r0, [pc, #48]	@ (8009e58 <prvInitialiseTaskLists+0x70>)
 8009e28:	f7fe fc00 	bl	800862c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009e2c:	480b      	ldr	r0, [pc, #44]	@ (8009e5c <prvInitialiseTaskLists+0x74>)
 8009e2e:	f7fe fbfd 	bl	800862c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009e32:	4b0b      	ldr	r3, [pc, #44]	@ (8009e60 <prvInitialiseTaskLists+0x78>)
 8009e34:	4a05      	ldr	r2, [pc, #20]	@ (8009e4c <prvInitialiseTaskLists+0x64>)
 8009e36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009e38:	4b0a      	ldr	r3, [pc, #40]	@ (8009e64 <prvInitialiseTaskLists+0x7c>)
 8009e3a:	4a05      	ldr	r2, [pc, #20]	@ (8009e50 <prvInitialiseTaskLists+0x68>)
 8009e3c:	601a      	str	r2, [r3, #0]
}
 8009e3e:	bf00      	nop
 8009e40:	3708      	adds	r7, #8
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
 8009e46:	bf00      	nop
 8009e48:	20008204 	.word	0x20008204
 8009e4c:	20008664 	.word	0x20008664
 8009e50:	20008678 	.word	0x20008678
 8009e54:	20008694 	.word	0x20008694
 8009e58:	200086a8 	.word	0x200086a8
 8009e5c:	200086c0 	.word	0x200086c0
 8009e60:	2000868c 	.word	0x2000868c
 8009e64:	20008690 	.word	0x20008690

08009e68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e6e:	e019      	b.n	8009ea4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009e70:	f000 fdea 	bl	800aa48 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e74:	4b10      	ldr	r3, [pc, #64]	@ (8009eb8 <prvCheckTasksWaitingTermination+0x50>)
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	68db      	ldr	r3, [r3, #12]
 8009e7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	3304      	adds	r3, #4
 8009e80:	4618      	mov	r0, r3
 8009e82:	f7fe fc5d 	bl	8008740 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009e86:	4b0d      	ldr	r3, [pc, #52]	@ (8009ebc <prvCheckTasksWaitingTermination+0x54>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	3b01      	subs	r3, #1
 8009e8c:	4a0b      	ldr	r2, [pc, #44]	@ (8009ebc <prvCheckTasksWaitingTermination+0x54>)
 8009e8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009e90:	4b0b      	ldr	r3, [pc, #44]	@ (8009ec0 <prvCheckTasksWaitingTermination+0x58>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	3b01      	subs	r3, #1
 8009e96:	4a0a      	ldr	r2, [pc, #40]	@ (8009ec0 <prvCheckTasksWaitingTermination+0x58>)
 8009e98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009e9a:	f000 fe07 	bl	800aaac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f000 f810 	bl	8009ec4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ea4:	4b06      	ldr	r3, [pc, #24]	@ (8009ec0 <prvCheckTasksWaitingTermination+0x58>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d1e1      	bne.n	8009e70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009eac:	bf00      	nop
 8009eae:	bf00      	nop
 8009eb0:	3708      	adds	r7, #8
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
 8009eb6:	bf00      	nop
 8009eb8:	200086a8 	.word	0x200086a8
 8009ebc:	200086d4 	.word	0x200086d4
 8009ec0:	200086bc 	.word	0x200086bc

08009ec4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b084      	sub	sp, #16
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	3354      	adds	r3, #84	@ 0x54
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f00e fd99 	bl	8018a08 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d108      	bne.n	8009ef2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f000 ff9f 	bl	800ae28 <vPortFree>
				vPortFree( pxTCB );
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 ff9c 	bl	800ae28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009ef0:	e019      	b.n	8009f26 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d103      	bne.n	8009f04 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f000 ff93 	bl	800ae28 <vPortFree>
	}
 8009f02:	e010      	b.n	8009f26 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009f0a:	2b02      	cmp	r3, #2
 8009f0c:	d00b      	beq.n	8009f26 <prvDeleteTCB+0x62>
	__asm volatile
 8009f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f12:	f383 8811 	msr	BASEPRI, r3
 8009f16:	f3bf 8f6f 	isb	sy
 8009f1a:	f3bf 8f4f 	dsb	sy
 8009f1e:	60fb      	str	r3, [r7, #12]
}
 8009f20:	bf00      	nop
 8009f22:	bf00      	nop
 8009f24:	e7fd      	b.n	8009f22 <prvDeleteTCB+0x5e>
	}
 8009f26:	bf00      	nop
 8009f28:	3710      	adds	r7, #16
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
	...

08009f30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009f30:	b480      	push	{r7}
 8009f32:	b083      	sub	sp, #12
 8009f34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f36:	4b0c      	ldr	r3, [pc, #48]	@ (8009f68 <prvResetNextTaskUnblockTime+0x38>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d104      	bne.n	8009f4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009f40:	4b0a      	ldr	r3, [pc, #40]	@ (8009f6c <prvResetNextTaskUnblockTime+0x3c>)
 8009f42:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009f46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009f48:	e008      	b.n	8009f5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f4a:	4b07      	ldr	r3, [pc, #28]	@ (8009f68 <prvResetNextTaskUnblockTime+0x38>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	68db      	ldr	r3, [r3, #12]
 8009f50:	68db      	ldr	r3, [r3, #12]
 8009f52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	4a04      	ldr	r2, [pc, #16]	@ (8009f6c <prvResetNextTaskUnblockTime+0x3c>)
 8009f5a:	6013      	str	r3, [r2, #0]
}
 8009f5c:	bf00      	nop
 8009f5e:	370c      	adds	r7, #12
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr
 8009f68:	2000868c 	.word	0x2000868c
 8009f6c:	200086f4 	.word	0x200086f4

08009f70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009f70:	b480      	push	{r7}
 8009f72:	b083      	sub	sp, #12
 8009f74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009f76:	4b0b      	ldr	r3, [pc, #44]	@ (8009fa4 <xTaskGetSchedulerState+0x34>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d102      	bne.n	8009f84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	607b      	str	r3, [r7, #4]
 8009f82:	e008      	b.n	8009f96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f84:	4b08      	ldr	r3, [pc, #32]	@ (8009fa8 <xTaskGetSchedulerState+0x38>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d102      	bne.n	8009f92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009f8c:	2302      	movs	r3, #2
 8009f8e:	607b      	str	r3, [r7, #4]
 8009f90:	e001      	b.n	8009f96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009f92:	2300      	movs	r3, #0
 8009f94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009f96:	687b      	ldr	r3, [r7, #4]
	}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	370c      	adds	r7, #12
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	4770      	bx	lr
 8009fa4:	200086e0 	.word	0x200086e0
 8009fa8:	200086fc 	.word	0x200086fc

08009fac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b086      	sub	sp, #24
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d058      	beq.n	800a074 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009fc2:	4b2f      	ldr	r3, [pc, #188]	@ (800a080 <xTaskPriorityDisinherit+0xd4>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	693a      	ldr	r2, [r7, #16]
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d00b      	beq.n	8009fe4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fd0:	f383 8811 	msr	BASEPRI, r3
 8009fd4:	f3bf 8f6f 	isb	sy
 8009fd8:	f3bf 8f4f 	dsb	sy
 8009fdc:	60fb      	str	r3, [r7, #12]
}
 8009fde:	bf00      	nop
 8009fe0:	bf00      	nop
 8009fe2:	e7fd      	b.n	8009fe0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d10b      	bne.n	800a004 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ff0:	f383 8811 	msr	BASEPRI, r3
 8009ff4:	f3bf 8f6f 	isb	sy
 8009ff8:	f3bf 8f4f 	dsb	sy
 8009ffc:	60bb      	str	r3, [r7, #8]
}
 8009ffe:	bf00      	nop
 800a000:	bf00      	nop
 800a002:	e7fd      	b.n	800a000 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a008:	1e5a      	subs	r2, r3, #1
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a016:	429a      	cmp	r2, r3
 800a018:	d02c      	beq.n	800a074 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d128      	bne.n	800a074 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	3304      	adds	r3, #4
 800a026:	4618      	mov	r0, r3
 800a028:	f7fe fb8a 	bl	8008740 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a038:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a044:	4b0f      	ldr	r3, [pc, #60]	@ (800a084 <xTaskPriorityDisinherit+0xd8>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	429a      	cmp	r2, r3
 800a04a:	d903      	bls.n	800a054 <xTaskPriorityDisinherit+0xa8>
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a050:	4a0c      	ldr	r2, [pc, #48]	@ (800a084 <xTaskPriorityDisinherit+0xd8>)
 800a052:	6013      	str	r3, [r2, #0]
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a058:	4613      	mov	r3, r2
 800a05a:	009b      	lsls	r3, r3, #2
 800a05c:	4413      	add	r3, r2
 800a05e:	009b      	lsls	r3, r3, #2
 800a060:	4a09      	ldr	r2, [pc, #36]	@ (800a088 <xTaskPriorityDisinherit+0xdc>)
 800a062:	441a      	add	r2, r3
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	3304      	adds	r3, #4
 800a068:	4619      	mov	r1, r3
 800a06a:	4610      	mov	r0, r2
 800a06c:	f7fe fb0b 	bl	8008686 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a070:	2301      	movs	r3, #1
 800a072:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a074:	697b      	ldr	r3, [r7, #20]
	}
 800a076:	4618      	mov	r0, r3
 800a078:	3718      	adds	r7, #24
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	bf00      	nop
 800a080:	20008200 	.word	0x20008200
 800a084:	200086dc 	.word	0x200086dc
 800a088:	20008204 	.word	0x20008204

0800a08c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b084      	sub	sp, #16
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a096:	4b21      	ldr	r3, [pc, #132]	@ (800a11c <prvAddCurrentTaskToDelayedList+0x90>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a09c:	4b20      	ldr	r3, [pc, #128]	@ (800a120 <prvAddCurrentTaskToDelayedList+0x94>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	3304      	adds	r3, #4
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7fe fb4c 	bl	8008740 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a0ae:	d10a      	bne.n	800a0c6 <prvAddCurrentTaskToDelayedList+0x3a>
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d007      	beq.n	800a0c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0b6:	4b1a      	ldr	r3, [pc, #104]	@ (800a120 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	3304      	adds	r3, #4
 800a0bc:	4619      	mov	r1, r3
 800a0be:	4819      	ldr	r0, [pc, #100]	@ (800a124 <prvAddCurrentTaskToDelayedList+0x98>)
 800a0c0:	f7fe fae1 	bl	8008686 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a0c4:	e026      	b.n	800a114 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a0c6:	68fa      	ldr	r2, [r7, #12]
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	4413      	add	r3, r2
 800a0cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a0ce:	4b14      	ldr	r3, [pc, #80]	@ (800a120 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	68ba      	ldr	r2, [r7, #8]
 800a0d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a0d6:	68ba      	ldr	r2, [r7, #8]
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d209      	bcs.n	800a0f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0de:	4b12      	ldr	r3, [pc, #72]	@ (800a128 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a0e0:	681a      	ldr	r2, [r3, #0]
 800a0e2:	4b0f      	ldr	r3, [pc, #60]	@ (800a120 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	3304      	adds	r3, #4
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	4610      	mov	r0, r2
 800a0ec:	f7fe faef 	bl	80086ce <vListInsert>
}
 800a0f0:	e010      	b.n	800a114 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0f2:	4b0e      	ldr	r3, [pc, #56]	@ (800a12c <prvAddCurrentTaskToDelayedList+0xa0>)
 800a0f4:	681a      	ldr	r2, [r3, #0]
 800a0f6:	4b0a      	ldr	r3, [pc, #40]	@ (800a120 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	3304      	adds	r3, #4
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	4610      	mov	r0, r2
 800a100:	f7fe fae5 	bl	80086ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a104:	4b0a      	ldr	r3, [pc, #40]	@ (800a130 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	68ba      	ldr	r2, [r7, #8]
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d202      	bcs.n	800a114 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a10e:	4a08      	ldr	r2, [pc, #32]	@ (800a130 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	6013      	str	r3, [r2, #0]
}
 800a114:	bf00      	nop
 800a116:	3710      	adds	r7, #16
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}
 800a11c:	200086d8 	.word	0x200086d8
 800a120:	20008200 	.word	0x20008200
 800a124:	200086c0 	.word	0x200086c0
 800a128:	20008690 	.word	0x20008690
 800a12c:	2000868c 	.word	0x2000868c
 800a130:	200086f4 	.word	0x200086f4

0800a134 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b08a      	sub	sp, #40	@ 0x28
 800a138:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a13a:	2300      	movs	r3, #0
 800a13c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a13e:	f000 fb13 	bl	800a768 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a142:	4b1d      	ldr	r3, [pc, #116]	@ (800a1b8 <xTimerCreateTimerTask+0x84>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d021      	beq.n	800a18e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a14a:	2300      	movs	r3, #0
 800a14c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a14e:	2300      	movs	r3, #0
 800a150:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a152:	1d3a      	adds	r2, r7, #4
 800a154:	f107 0108 	add.w	r1, r7, #8
 800a158:	f107 030c 	add.w	r3, r7, #12
 800a15c:	4618      	mov	r0, r3
 800a15e:	f7fe fa4b 	bl	80085f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a162:	6879      	ldr	r1, [r7, #4]
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	68fa      	ldr	r2, [r7, #12]
 800a168:	9202      	str	r2, [sp, #8]
 800a16a:	9301      	str	r3, [sp, #4]
 800a16c:	2302      	movs	r3, #2
 800a16e:	9300      	str	r3, [sp, #0]
 800a170:	2300      	movs	r3, #0
 800a172:	460a      	mov	r2, r1
 800a174:	4911      	ldr	r1, [pc, #68]	@ (800a1bc <xTimerCreateTimerTask+0x88>)
 800a176:	4812      	ldr	r0, [pc, #72]	@ (800a1c0 <xTimerCreateTimerTask+0x8c>)
 800a178:	f7ff f806 	bl	8009188 <xTaskCreateStatic>
 800a17c:	4603      	mov	r3, r0
 800a17e:	4a11      	ldr	r2, [pc, #68]	@ (800a1c4 <xTimerCreateTimerTask+0x90>)
 800a180:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a182:	4b10      	ldr	r3, [pc, #64]	@ (800a1c4 <xTimerCreateTimerTask+0x90>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d001      	beq.n	800a18e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a18a:	2301      	movs	r3, #1
 800a18c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d10b      	bne.n	800a1ac <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a198:	f383 8811 	msr	BASEPRI, r3
 800a19c:	f3bf 8f6f 	isb	sy
 800a1a0:	f3bf 8f4f 	dsb	sy
 800a1a4:	613b      	str	r3, [r7, #16]
}
 800a1a6:	bf00      	nop
 800a1a8:	bf00      	nop
 800a1aa:	e7fd      	b.n	800a1a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a1ac:	697b      	ldr	r3, [r7, #20]
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3718      	adds	r7, #24
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	bf00      	nop
 800a1b8:	20008730 	.word	0x20008730
 800a1bc:	08019a4c 	.word	0x08019a4c
 800a1c0:	0800a301 	.word	0x0800a301
 800a1c4:	20008734 	.word	0x20008734

0800a1c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b08a      	sub	sp, #40	@ 0x28
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	60f8      	str	r0, [r7, #12]
 800a1d0:	60b9      	str	r1, [r7, #8]
 800a1d2:	607a      	str	r2, [r7, #4]
 800a1d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d10b      	bne.n	800a1f8 <xTimerGenericCommand+0x30>
	__asm volatile
 800a1e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1e4:	f383 8811 	msr	BASEPRI, r3
 800a1e8:	f3bf 8f6f 	isb	sy
 800a1ec:	f3bf 8f4f 	dsb	sy
 800a1f0:	623b      	str	r3, [r7, #32]
}
 800a1f2:	bf00      	nop
 800a1f4:	bf00      	nop
 800a1f6:	e7fd      	b.n	800a1f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a1f8:	4b19      	ldr	r3, [pc, #100]	@ (800a260 <xTimerGenericCommand+0x98>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d02a      	beq.n	800a256 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	2b05      	cmp	r3, #5
 800a210:	dc18      	bgt.n	800a244 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a212:	f7ff fead 	bl	8009f70 <xTaskGetSchedulerState>
 800a216:	4603      	mov	r3, r0
 800a218:	2b02      	cmp	r3, #2
 800a21a:	d109      	bne.n	800a230 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a21c:	4b10      	ldr	r3, [pc, #64]	@ (800a260 <xTimerGenericCommand+0x98>)
 800a21e:	6818      	ldr	r0, [r3, #0]
 800a220:	f107 0110 	add.w	r1, r7, #16
 800a224:	2300      	movs	r3, #0
 800a226:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a228:	f7fe fbbe 	bl	80089a8 <xQueueGenericSend>
 800a22c:	6278      	str	r0, [r7, #36]	@ 0x24
 800a22e:	e012      	b.n	800a256 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a230:	4b0b      	ldr	r3, [pc, #44]	@ (800a260 <xTimerGenericCommand+0x98>)
 800a232:	6818      	ldr	r0, [r3, #0]
 800a234:	f107 0110 	add.w	r1, r7, #16
 800a238:	2300      	movs	r3, #0
 800a23a:	2200      	movs	r2, #0
 800a23c:	f7fe fbb4 	bl	80089a8 <xQueueGenericSend>
 800a240:	6278      	str	r0, [r7, #36]	@ 0x24
 800a242:	e008      	b.n	800a256 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a244:	4b06      	ldr	r3, [pc, #24]	@ (800a260 <xTimerGenericCommand+0x98>)
 800a246:	6818      	ldr	r0, [r3, #0]
 800a248:	f107 0110 	add.w	r1, r7, #16
 800a24c:	2300      	movs	r3, #0
 800a24e:	683a      	ldr	r2, [r7, #0]
 800a250:	f7fe fcac 	bl	8008bac <xQueueGenericSendFromISR>
 800a254:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3728      	adds	r7, #40	@ 0x28
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}
 800a260:	20008730 	.word	0x20008730

0800a264 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b088      	sub	sp, #32
 800a268:	af02      	add	r7, sp, #8
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a26e:	4b23      	ldr	r3, [pc, #140]	@ (800a2fc <prvProcessExpiredTimer+0x98>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	68db      	ldr	r3, [r3, #12]
 800a274:	68db      	ldr	r3, [r3, #12]
 800a276:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	3304      	adds	r3, #4
 800a27c:	4618      	mov	r0, r3
 800a27e:	f7fe fa5f 	bl	8008740 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a288:	f003 0304 	and.w	r3, r3, #4
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d023      	beq.n	800a2d8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	699a      	ldr	r2, [r3, #24]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	18d1      	adds	r1, r2, r3
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	683a      	ldr	r2, [r7, #0]
 800a29c:	6978      	ldr	r0, [r7, #20]
 800a29e:	f000 f8d5 	bl	800a44c <prvInsertTimerInActiveList>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d020      	beq.n	800a2ea <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	9300      	str	r3, [sp, #0]
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	687a      	ldr	r2, [r7, #4]
 800a2b0:	2100      	movs	r1, #0
 800a2b2:	6978      	ldr	r0, [r7, #20]
 800a2b4:	f7ff ff88 	bl	800a1c8 <xTimerGenericCommand>
 800a2b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d114      	bne.n	800a2ea <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a2c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2c4:	f383 8811 	msr	BASEPRI, r3
 800a2c8:	f3bf 8f6f 	isb	sy
 800a2cc:	f3bf 8f4f 	dsb	sy
 800a2d0:	60fb      	str	r3, [r7, #12]
}
 800a2d2:	bf00      	nop
 800a2d4:	bf00      	nop
 800a2d6:	e7fd      	b.n	800a2d4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2de:	f023 0301 	bic.w	r3, r3, #1
 800a2e2:	b2da      	uxtb	r2, r3
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	6a1b      	ldr	r3, [r3, #32]
 800a2ee:	6978      	ldr	r0, [r7, #20]
 800a2f0:	4798      	blx	r3
}
 800a2f2:	bf00      	nop
 800a2f4:	3718      	adds	r7, #24
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	20008728 	.word	0x20008728

0800a300 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b084      	sub	sp, #16
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a308:	f107 0308 	add.w	r3, r7, #8
 800a30c:	4618      	mov	r0, r3
 800a30e:	f000 f859 	bl	800a3c4 <prvGetNextExpireTime>
 800a312:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	4619      	mov	r1, r3
 800a318:	68f8      	ldr	r0, [r7, #12]
 800a31a:	f000 f805 	bl	800a328 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a31e:	f000 f8d7 	bl	800a4d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a322:	bf00      	nop
 800a324:	e7f0      	b.n	800a308 <prvTimerTask+0x8>
	...

0800a328 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b084      	sub	sp, #16
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a332:	f7ff fa01 	bl	8009738 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a336:	f107 0308 	add.w	r3, r7, #8
 800a33a:	4618      	mov	r0, r3
 800a33c:	f000 f866 	bl	800a40c <prvSampleTimeNow>
 800a340:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d130      	bne.n	800a3aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d10a      	bne.n	800a364 <prvProcessTimerOrBlockTask+0x3c>
 800a34e:	687a      	ldr	r2, [r7, #4]
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	429a      	cmp	r2, r3
 800a354:	d806      	bhi.n	800a364 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a356:	f7ff f9fd 	bl	8009754 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a35a:	68f9      	ldr	r1, [r7, #12]
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f7ff ff81 	bl	800a264 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a362:	e024      	b.n	800a3ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d008      	beq.n	800a37c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a36a:	4b13      	ldr	r3, [pc, #76]	@ (800a3b8 <prvProcessTimerOrBlockTask+0x90>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d101      	bne.n	800a378 <prvProcessTimerOrBlockTask+0x50>
 800a374:	2301      	movs	r3, #1
 800a376:	e000      	b.n	800a37a <prvProcessTimerOrBlockTask+0x52>
 800a378:	2300      	movs	r3, #0
 800a37a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a37c:	4b0f      	ldr	r3, [pc, #60]	@ (800a3bc <prvProcessTimerOrBlockTask+0x94>)
 800a37e:	6818      	ldr	r0, [r3, #0]
 800a380:	687a      	ldr	r2, [r7, #4]
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	1ad3      	subs	r3, r2, r3
 800a386:	683a      	ldr	r2, [r7, #0]
 800a388:	4619      	mov	r1, r3
 800a38a:	f7fe fec9 	bl	8009120 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a38e:	f7ff f9e1 	bl	8009754 <xTaskResumeAll>
 800a392:	4603      	mov	r3, r0
 800a394:	2b00      	cmp	r3, #0
 800a396:	d10a      	bne.n	800a3ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a398:	4b09      	ldr	r3, [pc, #36]	@ (800a3c0 <prvProcessTimerOrBlockTask+0x98>)
 800a39a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a39e:	601a      	str	r2, [r3, #0]
 800a3a0:	f3bf 8f4f 	dsb	sy
 800a3a4:	f3bf 8f6f 	isb	sy
}
 800a3a8:	e001      	b.n	800a3ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a3aa:	f7ff f9d3 	bl	8009754 <xTaskResumeAll>
}
 800a3ae:	bf00      	nop
 800a3b0:	3710      	adds	r7, #16
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
 800a3b6:	bf00      	nop
 800a3b8:	2000872c 	.word	0x2000872c
 800a3bc:	20008730 	.word	0x20008730
 800a3c0:	e000ed04 	.word	0xe000ed04

0800a3c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b085      	sub	sp, #20
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a3cc:	4b0e      	ldr	r3, [pc, #56]	@ (800a408 <prvGetNextExpireTime+0x44>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d101      	bne.n	800a3da <prvGetNextExpireTime+0x16>
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	e000      	b.n	800a3dc <prvGetNextExpireTime+0x18>
 800a3da:	2200      	movs	r2, #0
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d105      	bne.n	800a3f4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a3e8:	4b07      	ldr	r3, [pc, #28]	@ (800a408 <prvGetNextExpireTime+0x44>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	68db      	ldr	r3, [r3, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	60fb      	str	r3, [r7, #12]
 800a3f2:	e001      	b.n	800a3f8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3714      	adds	r7, #20
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr
 800a406:	bf00      	nop
 800a408:	20008728 	.word	0x20008728

0800a40c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b084      	sub	sp, #16
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a414:	f7ff fa3c 	bl	8009890 <xTaskGetTickCount>
 800a418:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a41a:	4b0b      	ldr	r3, [pc, #44]	@ (800a448 <prvSampleTimeNow+0x3c>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	68fa      	ldr	r2, [r7, #12]
 800a420:	429a      	cmp	r2, r3
 800a422:	d205      	bcs.n	800a430 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a424:	f000 f93a 	bl	800a69c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2201      	movs	r2, #1
 800a42c:	601a      	str	r2, [r3, #0]
 800a42e:	e002      	b.n	800a436 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2200      	movs	r2, #0
 800a434:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a436:	4a04      	ldr	r2, [pc, #16]	@ (800a448 <prvSampleTimeNow+0x3c>)
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a43c:	68fb      	ldr	r3, [r7, #12]
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3710      	adds	r7, #16
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
 800a446:	bf00      	nop
 800a448:	20008738 	.word	0x20008738

0800a44c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b086      	sub	sp, #24
 800a450:	af00      	add	r7, sp, #0
 800a452:	60f8      	str	r0, [r7, #12]
 800a454:	60b9      	str	r1, [r7, #8]
 800a456:	607a      	str	r2, [r7, #4]
 800a458:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a45a:	2300      	movs	r3, #0
 800a45c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	68ba      	ldr	r2, [r7, #8]
 800a462:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	68fa      	ldr	r2, [r7, #12]
 800a468:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a46a:	68ba      	ldr	r2, [r7, #8]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	429a      	cmp	r2, r3
 800a470:	d812      	bhi.n	800a498 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	1ad2      	subs	r2, r2, r3
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	699b      	ldr	r3, [r3, #24]
 800a47c:	429a      	cmp	r2, r3
 800a47e:	d302      	bcc.n	800a486 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a480:	2301      	movs	r3, #1
 800a482:	617b      	str	r3, [r7, #20]
 800a484:	e01b      	b.n	800a4be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a486:	4b10      	ldr	r3, [pc, #64]	@ (800a4c8 <prvInsertTimerInActiveList+0x7c>)
 800a488:	681a      	ldr	r2, [r3, #0]
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	3304      	adds	r3, #4
 800a48e:	4619      	mov	r1, r3
 800a490:	4610      	mov	r0, r2
 800a492:	f7fe f91c 	bl	80086ce <vListInsert>
 800a496:	e012      	b.n	800a4be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a498:	687a      	ldr	r2, [r7, #4]
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d206      	bcs.n	800a4ae <prvInsertTimerInActiveList+0x62>
 800a4a0:	68ba      	ldr	r2, [r7, #8]
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d302      	bcc.n	800a4ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	617b      	str	r3, [r7, #20]
 800a4ac:	e007      	b.n	800a4be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a4ae:	4b07      	ldr	r3, [pc, #28]	@ (800a4cc <prvInsertTimerInActiveList+0x80>)
 800a4b0:	681a      	ldr	r2, [r3, #0]
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	3304      	adds	r3, #4
 800a4b6:	4619      	mov	r1, r3
 800a4b8:	4610      	mov	r0, r2
 800a4ba:	f7fe f908 	bl	80086ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a4be:	697b      	ldr	r3, [r7, #20]
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3718      	adds	r7, #24
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}
 800a4c8:	2000872c 	.word	0x2000872c
 800a4cc:	20008728 	.word	0x20008728

0800a4d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b08e      	sub	sp, #56	@ 0x38
 800a4d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a4d6:	e0ce      	b.n	800a676 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	da19      	bge.n	800a512 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a4de:	1d3b      	adds	r3, r7, #4
 800a4e0:	3304      	adds	r3, #4
 800a4e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a4e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d10b      	bne.n	800a502 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a4ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ee:	f383 8811 	msr	BASEPRI, r3
 800a4f2:	f3bf 8f6f 	isb	sy
 800a4f6:	f3bf 8f4f 	dsb	sy
 800a4fa:	61fb      	str	r3, [r7, #28]
}
 800a4fc:	bf00      	nop
 800a4fe:	bf00      	nop
 800a500:	e7fd      	b.n	800a4fe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a508:	6850      	ldr	r0, [r2, #4]
 800a50a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a50c:	6892      	ldr	r2, [r2, #8]
 800a50e:	4611      	mov	r1, r2
 800a510:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2b00      	cmp	r3, #0
 800a516:	f2c0 80ae 	blt.w	800a676 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a51e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a520:	695b      	ldr	r3, [r3, #20]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d004      	beq.n	800a530 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a528:	3304      	adds	r3, #4
 800a52a:	4618      	mov	r0, r3
 800a52c:	f7fe f908 	bl	8008740 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a530:	463b      	mov	r3, r7
 800a532:	4618      	mov	r0, r3
 800a534:	f7ff ff6a 	bl	800a40c <prvSampleTimeNow>
 800a538:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2b09      	cmp	r3, #9
 800a53e:	f200 8097 	bhi.w	800a670 <prvProcessReceivedCommands+0x1a0>
 800a542:	a201      	add	r2, pc, #4	@ (adr r2, 800a548 <prvProcessReceivedCommands+0x78>)
 800a544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a548:	0800a571 	.word	0x0800a571
 800a54c:	0800a571 	.word	0x0800a571
 800a550:	0800a571 	.word	0x0800a571
 800a554:	0800a5e7 	.word	0x0800a5e7
 800a558:	0800a5fb 	.word	0x0800a5fb
 800a55c:	0800a647 	.word	0x0800a647
 800a560:	0800a571 	.word	0x0800a571
 800a564:	0800a571 	.word	0x0800a571
 800a568:	0800a5e7 	.word	0x0800a5e7
 800a56c:	0800a5fb 	.word	0x0800a5fb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a572:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a576:	f043 0301 	orr.w	r3, r3, #1
 800a57a:	b2da      	uxtb	r2, r3
 800a57c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a57e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a582:	68ba      	ldr	r2, [r7, #8]
 800a584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a586:	699b      	ldr	r3, [r3, #24]
 800a588:	18d1      	adds	r1, r2, r3
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a58e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a590:	f7ff ff5c 	bl	800a44c <prvInsertTimerInActiveList>
 800a594:	4603      	mov	r3, r0
 800a596:	2b00      	cmp	r3, #0
 800a598:	d06c      	beq.n	800a674 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a59a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a59c:	6a1b      	ldr	r3, [r3, #32]
 800a59e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a5a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a5a8:	f003 0304 	and.w	r3, r3, #4
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d061      	beq.n	800a674 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a5b0:	68ba      	ldr	r2, [r7, #8]
 800a5b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5b4:	699b      	ldr	r3, [r3, #24]
 800a5b6:	441a      	add	r2, r3
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	9300      	str	r3, [sp, #0]
 800a5bc:	2300      	movs	r3, #0
 800a5be:	2100      	movs	r1, #0
 800a5c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5c2:	f7ff fe01 	bl	800a1c8 <xTimerGenericCommand>
 800a5c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a5c8:	6a3b      	ldr	r3, [r7, #32]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d152      	bne.n	800a674 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a5ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5d2:	f383 8811 	msr	BASEPRI, r3
 800a5d6:	f3bf 8f6f 	isb	sy
 800a5da:	f3bf 8f4f 	dsb	sy
 800a5de:	61bb      	str	r3, [r7, #24]
}
 800a5e0:	bf00      	nop
 800a5e2:	bf00      	nop
 800a5e4:	e7fd      	b.n	800a5e2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a5e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a5ec:	f023 0301 	bic.w	r3, r3, #1
 800a5f0:	b2da      	uxtb	r2, r3
 800a5f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5f4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a5f8:	e03d      	b.n	800a676 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a5fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a600:	f043 0301 	orr.w	r3, r3, #1
 800a604:	b2da      	uxtb	r2, r3
 800a606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a608:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a60c:	68ba      	ldr	r2, [r7, #8]
 800a60e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a610:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a614:	699b      	ldr	r3, [r3, #24]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d10b      	bne.n	800a632 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a61a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a61e:	f383 8811 	msr	BASEPRI, r3
 800a622:	f3bf 8f6f 	isb	sy
 800a626:	f3bf 8f4f 	dsb	sy
 800a62a:	617b      	str	r3, [r7, #20]
}
 800a62c:	bf00      	nop
 800a62e:	bf00      	nop
 800a630:	e7fd      	b.n	800a62e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a634:	699a      	ldr	r2, [r3, #24]
 800a636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a638:	18d1      	adds	r1, r2, r3
 800a63a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a63c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a63e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a640:	f7ff ff04 	bl	800a44c <prvInsertTimerInActiveList>
					break;
 800a644:	e017      	b.n	800a676 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a648:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a64c:	f003 0302 	and.w	r3, r3, #2
 800a650:	2b00      	cmp	r3, #0
 800a652:	d103      	bne.n	800a65c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a654:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a656:	f000 fbe7 	bl	800ae28 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a65a:	e00c      	b.n	800a676 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a65c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a65e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a662:	f023 0301 	bic.w	r3, r3, #1
 800a666:	b2da      	uxtb	r2, r3
 800a668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a66a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a66e:	e002      	b.n	800a676 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a670:	bf00      	nop
 800a672:	e000      	b.n	800a676 <prvProcessReceivedCommands+0x1a6>
					break;
 800a674:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a676:	4b08      	ldr	r3, [pc, #32]	@ (800a698 <prvProcessReceivedCommands+0x1c8>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	1d39      	adds	r1, r7, #4
 800a67c:	2200      	movs	r2, #0
 800a67e:	4618      	mov	r0, r3
 800a680:	f7fe fb32 	bl	8008ce8 <xQueueReceive>
 800a684:	4603      	mov	r3, r0
 800a686:	2b00      	cmp	r3, #0
 800a688:	f47f af26 	bne.w	800a4d8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a68c:	bf00      	nop
 800a68e:	bf00      	nop
 800a690:	3730      	adds	r7, #48	@ 0x30
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
 800a696:	bf00      	nop
 800a698:	20008730 	.word	0x20008730

0800a69c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b088      	sub	sp, #32
 800a6a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a6a2:	e049      	b.n	800a738 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a6a4:	4b2e      	ldr	r3, [pc, #184]	@ (800a760 <prvSwitchTimerLists+0xc4>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	68db      	ldr	r3, [r3, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6ae:	4b2c      	ldr	r3, [pc, #176]	@ (800a760 <prvSwitchTimerLists+0xc4>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	68db      	ldr	r3, [r3, #12]
 800a6b4:	68db      	ldr	r3, [r3, #12]
 800a6b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	3304      	adds	r3, #4
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f7fe f83f 	bl	8008740 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	6a1b      	ldr	r3, [r3, #32]
 800a6c6:	68f8      	ldr	r0, [r7, #12]
 800a6c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a6d0:	f003 0304 	and.w	r3, r3, #4
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d02f      	beq.n	800a738 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	699b      	ldr	r3, [r3, #24]
 800a6dc:	693a      	ldr	r2, [r7, #16]
 800a6de:	4413      	add	r3, r2
 800a6e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a6e2:	68ba      	ldr	r2, [r7, #8]
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	429a      	cmp	r2, r3
 800a6e8:	d90e      	bls.n	800a708 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	68ba      	ldr	r2, [r7, #8]
 800a6ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	68fa      	ldr	r2, [r7, #12]
 800a6f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a6f6:	4b1a      	ldr	r3, [pc, #104]	@ (800a760 <prvSwitchTimerLists+0xc4>)
 800a6f8:	681a      	ldr	r2, [r3, #0]
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	3304      	adds	r3, #4
 800a6fe:	4619      	mov	r1, r3
 800a700:	4610      	mov	r0, r2
 800a702:	f7fd ffe4 	bl	80086ce <vListInsert>
 800a706:	e017      	b.n	800a738 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a708:	2300      	movs	r3, #0
 800a70a:	9300      	str	r3, [sp, #0]
 800a70c:	2300      	movs	r3, #0
 800a70e:	693a      	ldr	r2, [r7, #16]
 800a710:	2100      	movs	r1, #0
 800a712:	68f8      	ldr	r0, [r7, #12]
 800a714:	f7ff fd58 	bl	800a1c8 <xTimerGenericCommand>
 800a718:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d10b      	bne.n	800a738 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a724:	f383 8811 	msr	BASEPRI, r3
 800a728:	f3bf 8f6f 	isb	sy
 800a72c:	f3bf 8f4f 	dsb	sy
 800a730:	603b      	str	r3, [r7, #0]
}
 800a732:	bf00      	nop
 800a734:	bf00      	nop
 800a736:	e7fd      	b.n	800a734 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a738:	4b09      	ldr	r3, [pc, #36]	@ (800a760 <prvSwitchTimerLists+0xc4>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d1b0      	bne.n	800a6a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a742:	4b07      	ldr	r3, [pc, #28]	@ (800a760 <prvSwitchTimerLists+0xc4>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a748:	4b06      	ldr	r3, [pc, #24]	@ (800a764 <prvSwitchTimerLists+0xc8>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4a04      	ldr	r2, [pc, #16]	@ (800a760 <prvSwitchTimerLists+0xc4>)
 800a74e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a750:	4a04      	ldr	r2, [pc, #16]	@ (800a764 <prvSwitchTimerLists+0xc8>)
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	6013      	str	r3, [r2, #0]
}
 800a756:	bf00      	nop
 800a758:	3718      	adds	r7, #24
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
 800a75e:	bf00      	nop
 800a760:	20008728 	.word	0x20008728
 800a764:	2000872c 	.word	0x2000872c

0800a768 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b082      	sub	sp, #8
 800a76c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a76e:	f000 f96b 	bl	800aa48 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a772:	4b15      	ldr	r3, [pc, #84]	@ (800a7c8 <prvCheckForValidListAndQueue+0x60>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d120      	bne.n	800a7bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a77a:	4814      	ldr	r0, [pc, #80]	@ (800a7cc <prvCheckForValidListAndQueue+0x64>)
 800a77c:	f7fd ff56 	bl	800862c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a780:	4813      	ldr	r0, [pc, #76]	@ (800a7d0 <prvCheckForValidListAndQueue+0x68>)
 800a782:	f7fd ff53 	bl	800862c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a786:	4b13      	ldr	r3, [pc, #76]	@ (800a7d4 <prvCheckForValidListAndQueue+0x6c>)
 800a788:	4a10      	ldr	r2, [pc, #64]	@ (800a7cc <prvCheckForValidListAndQueue+0x64>)
 800a78a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a78c:	4b12      	ldr	r3, [pc, #72]	@ (800a7d8 <prvCheckForValidListAndQueue+0x70>)
 800a78e:	4a10      	ldr	r2, [pc, #64]	@ (800a7d0 <prvCheckForValidListAndQueue+0x68>)
 800a790:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a792:	2300      	movs	r3, #0
 800a794:	9300      	str	r3, [sp, #0]
 800a796:	4b11      	ldr	r3, [pc, #68]	@ (800a7dc <prvCheckForValidListAndQueue+0x74>)
 800a798:	4a11      	ldr	r2, [pc, #68]	@ (800a7e0 <prvCheckForValidListAndQueue+0x78>)
 800a79a:	2110      	movs	r1, #16
 800a79c:	200a      	movs	r0, #10
 800a79e:	f7fe f863 	bl	8008868 <xQueueGenericCreateStatic>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	4a08      	ldr	r2, [pc, #32]	@ (800a7c8 <prvCheckForValidListAndQueue+0x60>)
 800a7a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a7a8:	4b07      	ldr	r3, [pc, #28]	@ (800a7c8 <prvCheckForValidListAndQueue+0x60>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d005      	beq.n	800a7bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a7b0:	4b05      	ldr	r3, [pc, #20]	@ (800a7c8 <prvCheckForValidListAndQueue+0x60>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	490b      	ldr	r1, [pc, #44]	@ (800a7e4 <prvCheckForValidListAndQueue+0x7c>)
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f7fe fc88 	bl	80090cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a7bc:	f000 f976 	bl	800aaac <vPortExitCritical>
}
 800a7c0:	bf00      	nop
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	20008730 	.word	0x20008730
 800a7cc:	20008700 	.word	0x20008700
 800a7d0:	20008714 	.word	0x20008714
 800a7d4:	20008728 	.word	0x20008728
 800a7d8:	2000872c 	.word	0x2000872c
 800a7dc:	200087dc 	.word	0x200087dc
 800a7e0:	2000873c 	.word	0x2000873c
 800a7e4:	08019a54 	.word	0x08019a54

0800a7e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b085      	sub	sp, #20
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	60f8      	str	r0, [r7, #12]
 800a7f0:	60b9      	str	r1, [r7, #8]
 800a7f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	3b04      	subs	r3, #4
 800a7f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a800:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	3b04      	subs	r3, #4
 800a806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	f023 0201 	bic.w	r2, r3, #1
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	3b04      	subs	r3, #4
 800a816:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a818:	4a0c      	ldr	r2, [pc, #48]	@ (800a84c <pxPortInitialiseStack+0x64>)
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	3b14      	subs	r3, #20
 800a822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a824:	687a      	ldr	r2, [r7, #4]
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	3b04      	subs	r3, #4
 800a82e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f06f 0202 	mvn.w	r2, #2
 800a836:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	3b20      	subs	r3, #32
 800a83c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a83e:	68fb      	ldr	r3, [r7, #12]
}
 800a840:	4618      	mov	r0, r3
 800a842:	3714      	adds	r7, #20
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr
 800a84c:	0800a851 	.word	0x0800a851

0800a850 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a850:	b480      	push	{r7}
 800a852:	b085      	sub	sp, #20
 800a854:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a856:	2300      	movs	r3, #0
 800a858:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a85a:	4b13      	ldr	r3, [pc, #76]	@ (800a8a8 <prvTaskExitError+0x58>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a862:	d00b      	beq.n	800a87c <prvTaskExitError+0x2c>
	__asm volatile
 800a864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a868:	f383 8811 	msr	BASEPRI, r3
 800a86c:	f3bf 8f6f 	isb	sy
 800a870:	f3bf 8f4f 	dsb	sy
 800a874:	60fb      	str	r3, [r7, #12]
}
 800a876:	bf00      	nop
 800a878:	bf00      	nop
 800a87a:	e7fd      	b.n	800a878 <prvTaskExitError+0x28>
	__asm volatile
 800a87c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a880:	f383 8811 	msr	BASEPRI, r3
 800a884:	f3bf 8f6f 	isb	sy
 800a888:	f3bf 8f4f 	dsb	sy
 800a88c:	60bb      	str	r3, [r7, #8]
}
 800a88e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a890:	bf00      	nop
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d0fc      	beq.n	800a892 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a898:	bf00      	nop
 800a89a:	bf00      	nop
 800a89c:	3714      	adds	r7, #20
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a4:	4770      	bx	lr
 800a8a6:	bf00      	nop
 800a8a8:	20000044 	.word	0x20000044
 800a8ac:	00000000 	.word	0x00000000

0800a8b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a8b0:	4b07      	ldr	r3, [pc, #28]	@ (800a8d0 <pxCurrentTCBConst2>)
 800a8b2:	6819      	ldr	r1, [r3, #0]
 800a8b4:	6808      	ldr	r0, [r1, #0]
 800a8b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ba:	f380 8809 	msr	PSP, r0
 800a8be:	f3bf 8f6f 	isb	sy
 800a8c2:	f04f 0000 	mov.w	r0, #0
 800a8c6:	f380 8811 	msr	BASEPRI, r0
 800a8ca:	4770      	bx	lr
 800a8cc:	f3af 8000 	nop.w

0800a8d0 <pxCurrentTCBConst2>:
 800a8d0:	20008200 	.word	0x20008200
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a8d4:	bf00      	nop
 800a8d6:	bf00      	nop

0800a8d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a8d8:	4808      	ldr	r0, [pc, #32]	@ (800a8fc <prvPortStartFirstTask+0x24>)
 800a8da:	6800      	ldr	r0, [r0, #0]
 800a8dc:	6800      	ldr	r0, [r0, #0]
 800a8de:	f380 8808 	msr	MSP, r0
 800a8e2:	f04f 0000 	mov.w	r0, #0
 800a8e6:	f380 8814 	msr	CONTROL, r0
 800a8ea:	b662      	cpsie	i
 800a8ec:	b661      	cpsie	f
 800a8ee:	f3bf 8f4f 	dsb	sy
 800a8f2:	f3bf 8f6f 	isb	sy
 800a8f6:	df00      	svc	0
 800a8f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a8fa:	bf00      	nop
 800a8fc:	e000ed08 	.word	0xe000ed08

0800a900 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b086      	sub	sp, #24
 800a904:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a906:	4b47      	ldr	r3, [pc, #284]	@ (800aa24 <xPortStartScheduler+0x124>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	4a47      	ldr	r2, [pc, #284]	@ (800aa28 <xPortStartScheduler+0x128>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d10b      	bne.n	800a928 <xPortStartScheduler+0x28>
	__asm volatile
 800a910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a914:	f383 8811 	msr	BASEPRI, r3
 800a918:	f3bf 8f6f 	isb	sy
 800a91c:	f3bf 8f4f 	dsb	sy
 800a920:	60fb      	str	r3, [r7, #12]
}
 800a922:	bf00      	nop
 800a924:	bf00      	nop
 800a926:	e7fd      	b.n	800a924 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a928:	4b3e      	ldr	r3, [pc, #248]	@ (800aa24 <xPortStartScheduler+0x124>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4a3f      	ldr	r2, [pc, #252]	@ (800aa2c <xPortStartScheduler+0x12c>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d10b      	bne.n	800a94a <xPortStartScheduler+0x4a>
	__asm volatile
 800a932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a936:	f383 8811 	msr	BASEPRI, r3
 800a93a:	f3bf 8f6f 	isb	sy
 800a93e:	f3bf 8f4f 	dsb	sy
 800a942:	613b      	str	r3, [r7, #16]
}
 800a944:	bf00      	nop
 800a946:	bf00      	nop
 800a948:	e7fd      	b.n	800a946 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a94a:	4b39      	ldr	r3, [pc, #228]	@ (800aa30 <xPortStartScheduler+0x130>)
 800a94c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	781b      	ldrb	r3, [r3, #0]
 800a952:	b2db      	uxtb	r3, r3
 800a954:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	22ff      	movs	r2, #255	@ 0xff
 800a95a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	781b      	ldrb	r3, [r3, #0]
 800a960:	b2db      	uxtb	r3, r3
 800a962:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a964:	78fb      	ldrb	r3, [r7, #3]
 800a966:	b2db      	uxtb	r3, r3
 800a968:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a96c:	b2da      	uxtb	r2, r3
 800a96e:	4b31      	ldr	r3, [pc, #196]	@ (800aa34 <xPortStartScheduler+0x134>)
 800a970:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a972:	4b31      	ldr	r3, [pc, #196]	@ (800aa38 <xPortStartScheduler+0x138>)
 800a974:	2207      	movs	r2, #7
 800a976:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a978:	e009      	b.n	800a98e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a97a:	4b2f      	ldr	r3, [pc, #188]	@ (800aa38 <xPortStartScheduler+0x138>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	3b01      	subs	r3, #1
 800a980:	4a2d      	ldr	r2, [pc, #180]	@ (800aa38 <xPortStartScheduler+0x138>)
 800a982:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a984:	78fb      	ldrb	r3, [r7, #3]
 800a986:	b2db      	uxtb	r3, r3
 800a988:	005b      	lsls	r3, r3, #1
 800a98a:	b2db      	uxtb	r3, r3
 800a98c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a98e:	78fb      	ldrb	r3, [r7, #3]
 800a990:	b2db      	uxtb	r3, r3
 800a992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a996:	2b80      	cmp	r3, #128	@ 0x80
 800a998:	d0ef      	beq.n	800a97a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a99a:	4b27      	ldr	r3, [pc, #156]	@ (800aa38 <xPortStartScheduler+0x138>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f1c3 0307 	rsb	r3, r3, #7
 800a9a2:	2b04      	cmp	r3, #4
 800a9a4:	d00b      	beq.n	800a9be <xPortStartScheduler+0xbe>
	__asm volatile
 800a9a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9aa:	f383 8811 	msr	BASEPRI, r3
 800a9ae:	f3bf 8f6f 	isb	sy
 800a9b2:	f3bf 8f4f 	dsb	sy
 800a9b6:	60bb      	str	r3, [r7, #8]
}
 800a9b8:	bf00      	nop
 800a9ba:	bf00      	nop
 800a9bc:	e7fd      	b.n	800a9ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a9be:	4b1e      	ldr	r3, [pc, #120]	@ (800aa38 <xPortStartScheduler+0x138>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	021b      	lsls	r3, r3, #8
 800a9c4:	4a1c      	ldr	r2, [pc, #112]	@ (800aa38 <xPortStartScheduler+0x138>)
 800a9c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a9c8:	4b1b      	ldr	r3, [pc, #108]	@ (800aa38 <xPortStartScheduler+0x138>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a9d0:	4a19      	ldr	r2, [pc, #100]	@ (800aa38 <xPortStartScheduler+0x138>)
 800a9d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	b2da      	uxtb	r2, r3
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a9dc:	4b17      	ldr	r3, [pc, #92]	@ (800aa3c <xPortStartScheduler+0x13c>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	4a16      	ldr	r2, [pc, #88]	@ (800aa3c <xPortStartScheduler+0x13c>)
 800a9e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a9e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a9e8:	4b14      	ldr	r3, [pc, #80]	@ (800aa3c <xPortStartScheduler+0x13c>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4a13      	ldr	r2, [pc, #76]	@ (800aa3c <xPortStartScheduler+0x13c>)
 800a9ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a9f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a9f4:	f000 f8da 	bl	800abac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a9f8:	4b11      	ldr	r3, [pc, #68]	@ (800aa40 <xPortStartScheduler+0x140>)
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a9fe:	f000 f8f9 	bl	800abf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aa02:	4b10      	ldr	r3, [pc, #64]	@ (800aa44 <xPortStartScheduler+0x144>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	4a0f      	ldr	r2, [pc, #60]	@ (800aa44 <xPortStartScheduler+0x144>)
 800aa08:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800aa0c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aa0e:	f7ff ff63 	bl	800a8d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aa12:	f7ff f807 	bl	8009a24 <vTaskSwitchContext>
	prvTaskExitError();
 800aa16:	f7ff ff1b 	bl	800a850 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aa1a:	2300      	movs	r3, #0
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3718      	adds	r7, #24
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}
 800aa24:	e000ed00 	.word	0xe000ed00
 800aa28:	410fc271 	.word	0x410fc271
 800aa2c:	410fc270 	.word	0x410fc270
 800aa30:	e000e400 	.word	0xe000e400
 800aa34:	2000882c 	.word	0x2000882c
 800aa38:	20008830 	.word	0x20008830
 800aa3c:	e000ed20 	.word	0xe000ed20
 800aa40:	20000044 	.word	0x20000044
 800aa44:	e000ef34 	.word	0xe000ef34

0800aa48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b083      	sub	sp, #12
 800aa4c:	af00      	add	r7, sp, #0
	__asm volatile
 800aa4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa52:	f383 8811 	msr	BASEPRI, r3
 800aa56:	f3bf 8f6f 	isb	sy
 800aa5a:	f3bf 8f4f 	dsb	sy
 800aa5e:	607b      	str	r3, [r7, #4]
}
 800aa60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aa62:	4b10      	ldr	r3, [pc, #64]	@ (800aaa4 <vPortEnterCritical+0x5c>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	3301      	adds	r3, #1
 800aa68:	4a0e      	ldr	r2, [pc, #56]	@ (800aaa4 <vPortEnterCritical+0x5c>)
 800aa6a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aa6c:	4b0d      	ldr	r3, [pc, #52]	@ (800aaa4 <vPortEnterCritical+0x5c>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	2b01      	cmp	r3, #1
 800aa72:	d110      	bne.n	800aa96 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aa74:	4b0c      	ldr	r3, [pc, #48]	@ (800aaa8 <vPortEnterCritical+0x60>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	b2db      	uxtb	r3, r3
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d00b      	beq.n	800aa96 <vPortEnterCritical+0x4e>
	__asm volatile
 800aa7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa82:	f383 8811 	msr	BASEPRI, r3
 800aa86:	f3bf 8f6f 	isb	sy
 800aa8a:	f3bf 8f4f 	dsb	sy
 800aa8e:	603b      	str	r3, [r7, #0]
}
 800aa90:	bf00      	nop
 800aa92:	bf00      	nop
 800aa94:	e7fd      	b.n	800aa92 <vPortEnterCritical+0x4a>
	}
}
 800aa96:	bf00      	nop
 800aa98:	370c      	adds	r7, #12
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa0:	4770      	bx	lr
 800aaa2:	bf00      	nop
 800aaa4:	20000044 	.word	0x20000044
 800aaa8:	e000ed04 	.word	0xe000ed04

0800aaac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aaac:	b480      	push	{r7}
 800aaae:	b083      	sub	sp, #12
 800aab0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aab2:	4b12      	ldr	r3, [pc, #72]	@ (800aafc <vPortExitCritical+0x50>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d10b      	bne.n	800aad2 <vPortExitCritical+0x26>
	__asm volatile
 800aaba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aabe:	f383 8811 	msr	BASEPRI, r3
 800aac2:	f3bf 8f6f 	isb	sy
 800aac6:	f3bf 8f4f 	dsb	sy
 800aaca:	607b      	str	r3, [r7, #4]
}
 800aacc:	bf00      	nop
 800aace:	bf00      	nop
 800aad0:	e7fd      	b.n	800aace <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800aad2:	4b0a      	ldr	r3, [pc, #40]	@ (800aafc <vPortExitCritical+0x50>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	3b01      	subs	r3, #1
 800aad8:	4a08      	ldr	r2, [pc, #32]	@ (800aafc <vPortExitCritical+0x50>)
 800aada:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aadc:	4b07      	ldr	r3, [pc, #28]	@ (800aafc <vPortExitCritical+0x50>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d105      	bne.n	800aaf0 <vPortExitCritical+0x44>
 800aae4:	2300      	movs	r3, #0
 800aae6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	f383 8811 	msr	BASEPRI, r3
}
 800aaee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aaf0:	bf00      	nop
 800aaf2:	370c      	adds	r7, #12
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr
 800aafc:	20000044 	.word	0x20000044

0800ab00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ab00:	f3ef 8009 	mrs	r0, PSP
 800ab04:	f3bf 8f6f 	isb	sy
 800ab08:	4b15      	ldr	r3, [pc, #84]	@ (800ab60 <pxCurrentTCBConst>)
 800ab0a:	681a      	ldr	r2, [r3, #0]
 800ab0c:	f01e 0f10 	tst.w	lr, #16
 800ab10:	bf08      	it	eq
 800ab12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ab16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab1a:	6010      	str	r0, [r2, #0]
 800ab1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ab20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ab24:	f380 8811 	msr	BASEPRI, r0
 800ab28:	f3bf 8f4f 	dsb	sy
 800ab2c:	f3bf 8f6f 	isb	sy
 800ab30:	f7fe ff78 	bl	8009a24 <vTaskSwitchContext>
 800ab34:	f04f 0000 	mov.w	r0, #0
 800ab38:	f380 8811 	msr	BASEPRI, r0
 800ab3c:	bc09      	pop	{r0, r3}
 800ab3e:	6819      	ldr	r1, [r3, #0]
 800ab40:	6808      	ldr	r0, [r1, #0]
 800ab42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab46:	f01e 0f10 	tst.w	lr, #16
 800ab4a:	bf08      	it	eq
 800ab4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ab50:	f380 8809 	msr	PSP, r0
 800ab54:	f3bf 8f6f 	isb	sy
 800ab58:	4770      	bx	lr
 800ab5a:	bf00      	nop
 800ab5c:	f3af 8000 	nop.w

0800ab60 <pxCurrentTCBConst>:
 800ab60:	20008200 	.word	0x20008200
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ab64:	bf00      	nop
 800ab66:	bf00      	nop

0800ab68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b082      	sub	sp, #8
 800ab6c:	af00      	add	r7, sp, #0
	__asm volatile
 800ab6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab72:	f383 8811 	msr	BASEPRI, r3
 800ab76:	f3bf 8f6f 	isb	sy
 800ab7a:	f3bf 8f4f 	dsb	sy
 800ab7e:	607b      	str	r3, [r7, #4]
}
 800ab80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ab82:	f7fe fe95 	bl	80098b0 <xTaskIncrementTick>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d003      	beq.n	800ab94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ab8c:	4b06      	ldr	r3, [pc, #24]	@ (800aba8 <xPortSysTickHandler+0x40>)
 800ab8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab92:	601a      	str	r2, [r3, #0]
 800ab94:	2300      	movs	r3, #0
 800ab96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	f383 8811 	msr	BASEPRI, r3
}
 800ab9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aba0:	bf00      	nop
 800aba2:	3708      	adds	r7, #8
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}
 800aba8:	e000ed04 	.word	0xe000ed04

0800abac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800abac:	b480      	push	{r7}
 800abae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800abb0:	4b0b      	ldr	r3, [pc, #44]	@ (800abe0 <vPortSetupTimerInterrupt+0x34>)
 800abb2:	2200      	movs	r2, #0
 800abb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800abb6:	4b0b      	ldr	r3, [pc, #44]	@ (800abe4 <vPortSetupTimerInterrupt+0x38>)
 800abb8:	2200      	movs	r2, #0
 800abba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800abbc:	4b0a      	ldr	r3, [pc, #40]	@ (800abe8 <vPortSetupTimerInterrupt+0x3c>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	4a0a      	ldr	r2, [pc, #40]	@ (800abec <vPortSetupTimerInterrupt+0x40>)
 800abc2:	fba2 2303 	umull	r2, r3, r2, r3
 800abc6:	099b      	lsrs	r3, r3, #6
 800abc8:	4a09      	ldr	r2, [pc, #36]	@ (800abf0 <vPortSetupTimerInterrupt+0x44>)
 800abca:	3b01      	subs	r3, #1
 800abcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800abce:	4b04      	ldr	r3, [pc, #16]	@ (800abe0 <vPortSetupTimerInterrupt+0x34>)
 800abd0:	2207      	movs	r2, #7
 800abd2:	601a      	str	r2, [r3, #0]
}
 800abd4:	bf00      	nop
 800abd6:	46bd      	mov	sp, r7
 800abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abdc:	4770      	bx	lr
 800abde:	bf00      	nop
 800abe0:	e000e010 	.word	0xe000e010
 800abe4:	e000e018 	.word	0xe000e018
 800abe8:	20000038 	.word	0x20000038
 800abec:	10624dd3 	.word	0x10624dd3
 800abf0:	e000e014 	.word	0xe000e014

0800abf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800abf4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ac04 <vPortEnableVFP+0x10>
 800abf8:	6801      	ldr	r1, [r0, #0]
 800abfa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800abfe:	6001      	str	r1, [r0, #0]
 800ac00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ac02:	bf00      	nop
 800ac04:	e000ed88 	.word	0xe000ed88

0800ac08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ac08:	b480      	push	{r7}
 800ac0a:	b085      	sub	sp, #20
 800ac0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ac0e:	f3ef 8305 	mrs	r3, IPSR
 800ac12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	2b0f      	cmp	r3, #15
 800ac18:	d915      	bls.n	800ac46 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ac1a:	4a18      	ldr	r2, [pc, #96]	@ (800ac7c <vPortValidateInterruptPriority+0x74>)
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	4413      	add	r3, r2
 800ac20:	781b      	ldrb	r3, [r3, #0]
 800ac22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ac24:	4b16      	ldr	r3, [pc, #88]	@ (800ac80 <vPortValidateInterruptPriority+0x78>)
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	7afa      	ldrb	r2, [r7, #11]
 800ac2a:	429a      	cmp	r2, r3
 800ac2c:	d20b      	bcs.n	800ac46 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ac2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac32:	f383 8811 	msr	BASEPRI, r3
 800ac36:	f3bf 8f6f 	isb	sy
 800ac3a:	f3bf 8f4f 	dsb	sy
 800ac3e:	607b      	str	r3, [r7, #4]
}
 800ac40:	bf00      	nop
 800ac42:	bf00      	nop
 800ac44:	e7fd      	b.n	800ac42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ac46:	4b0f      	ldr	r3, [pc, #60]	@ (800ac84 <vPortValidateInterruptPriority+0x7c>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ac4e:	4b0e      	ldr	r3, [pc, #56]	@ (800ac88 <vPortValidateInterruptPriority+0x80>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	429a      	cmp	r2, r3
 800ac54:	d90b      	bls.n	800ac6e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ac56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac5a:	f383 8811 	msr	BASEPRI, r3
 800ac5e:	f3bf 8f6f 	isb	sy
 800ac62:	f3bf 8f4f 	dsb	sy
 800ac66:	603b      	str	r3, [r7, #0]
}
 800ac68:	bf00      	nop
 800ac6a:	bf00      	nop
 800ac6c:	e7fd      	b.n	800ac6a <vPortValidateInterruptPriority+0x62>
	}
 800ac6e:	bf00      	nop
 800ac70:	3714      	adds	r7, #20
 800ac72:	46bd      	mov	sp, r7
 800ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac78:	4770      	bx	lr
 800ac7a:	bf00      	nop
 800ac7c:	e000e3f0 	.word	0xe000e3f0
 800ac80:	2000882c 	.word	0x2000882c
 800ac84:	e000ed0c 	.word	0xe000ed0c
 800ac88:	20008830 	.word	0x20008830

0800ac8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b08a      	sub	sp, #40	@ 0x28
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ac94:	2300      	movs	r3, #0
 800ac96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ac98:	f7fe fd4e 	bl	8009738 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ac9c:	4b5c      	ldr	r3, [pc, #368]	@ (800ae10 <pvPortMalloc+0x184>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d101      	bne.n	800aca8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aca4:	f000 f924 	bl	800aef0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aca8:	4b5a      	ldr	r3, [pc, #360]	@ (800ae14 <pvPortMalloc+0x188>)
 800acaa:	681a      	ldr	r2, [r3, #0]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	4013      	ands	r3, r2
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	f040 8095 	bne.w	800ade0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d01e      	beq.n	800acfa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800acbc:	2208      	movs	r2, #8
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	4413      	add	r3, r2
 800acc2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f003 0307 	and.w	r3, r3, #7
 800acca:	2b00      	cmp	r3, #0
 800accc:	d015      	beq.n	800acfa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f023 0307 	bic.w	r3, r3, #7
 800acd4:	3308      	adds	r3, #8
 800acd6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f003 0307 	and.w	r3, r3, #7
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d00b      	beq.n	800acfa <pvPortMalloc+0x6e>
	__asm volatile
 800ace2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ace6:	f383 8811 	msr	BASEPRI, r3
 800acea:	f3bf 8f6f 	isb	sy
 800acee:	f3bf 8f4f 	dsb	sy
 800acf2:	617b      	str	r3, [r7, #20]
}
 800acf4:	bf00      	nop
 800acf6:	bf00      	nop
 800acf8:	e7fd      	b.n	800acf6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d06f      	beq.n	800ade0 <pvPortMalloc+0x154>
 800ad00:	4b45      	ldr	r3, [pc, #276]	@ (800ae18 <pvPortMalloc+0x18c>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	687a      	ldr	r2, [r7, #4]
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d86a      	bhi.n	800ade0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ad0a:	4b44      	ldr	r3, [pc, #272]	@ (800ae1c <pvPortMalloc+0x190>)
 800ad0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ad0e:	4b43      	ldr	r3, [pc, #268]	@ (800ae1c <pvPortMalloc+0x190>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad14:	e004      	b.n	800ad20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ad16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ad1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	687a      	ldr	r2, [r7, #4]
 800ad26:	429a      	cmp	r2, r3
 800ad28:	d903      	bls.n	800ad32 <pvPortMalloc+0xa6>
 800ad2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d1f1      	bne.n	800ad16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ad32:	4b37      	ldr	r3, [pc, #220]	@ (800ae10 <pvPortMalloc+0x184>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	d051      	beq.n	800ade0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ad3c:	6a3b      	ldr	r3, [r7, #32]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	2208      	movs	r2, #8
 800ad42:	4413      	add	r3, r2
 800ad44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ad46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad48:	681a      	ldr	r2, [r3, #0]
 800ad4a:	6a3b      	ldr	r3, [r7, #32]
 800ad4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ad4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad50:	685a      	ldr	r2, [r3, #4]
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	1ad2      	subs	r2, r2, r3
 800ad56:	2308      	movs	r3, #8
 800ad58:	005b      	lsls	r3, r3, #1
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d920      	bls.n	800ada0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ad5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	4413      	add	r3, r2
 800ad64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad66:	69bb      	ldr	r3, [r7, #24]
 800ad68:	f003 0307 	and.w	r3, r3, #7
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d00b      	beq.n	800ad88 <pvPortMalloc+0xfc>
	__asm volatile
 800ad70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad74:	f383 8811 	msr	BASEPRI, r3
 800ad78:	f3bf 8f6f 	isb	sy
 800ad7c:	f3bf 8f4f 	dsb	sy
 800ad80:	613b      	str	r3, [r7, #16]
}
 800ad82:	bf00      	nop
 800ad84:	bf00      	nop
 800ad86:	e7fd      	b.n	800ad84 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ad88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad8a:	685a      	ldr	r2, [r3, #4]
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	1ad2      	subs	r2, r2, r3
 800ad90:	69bb      	ldr	r3, [r7, #24]
 800ad92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ad94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad96:	687a      	ldr	r2, [r7, #4]
 800ad98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ad9a:	69b8      	ldr	r0, [r7, #24]
 800ad9c:	f000 f90a 	bl	800afb4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ada0:	4b1d      	ldr	r3, [pc, #116]	@ (800ae18 <pvPortMalloc+0x18c>)
 800ada2:	681a      	ldr	r2, [r3, #0]
 800ada4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	1ad3      	subs	r3, r2, r3
 800adaa:	4a1b      	ldr	r2, [pc, #108]	@ (800ae18 <pvPortMalloc+0x18c>)
 800adac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800adae:	4b1a      	ldr	r3, [pc, #104]	@ (800ae18 <pvPortMalloc+0x18c>)
 800adb0:	681a      	ldr	r2, [r3, #0]
 800adb2:	4b1b      	ldr	r3, [pc, #108]	@ (800ae20 <pvPortMalloc+0x194>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d203      	bcs.n	800adc2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800adba:	4b17      	ldr	r3, [pc, #92]	@ (800ae18 <pvPortMalloc+0x18c>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	4a18      	ldr	r2, [pc, #96]	@ (800ae20 <pvPortMalloc+0x194>)
 800adc0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800adc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc4:	685a      	ldr	r2, [r3, #4]
 800adc6:	4b13      	ldr	r3, [pc, #76]	@ (800ae14 <pvPortMalloc+0x188>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	431a      	orrs	r2, r3
 800adcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800add0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800add2:	2200      	movs	r2, #0
 800add4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800add6:	4b13      	ldr	r3, [pc, #76]	@ (800ae24 <pvPortMalloc+0x198>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	3301      	adds	r3, #1
 800addc:	4a11      	ldr	r2, [pc, #68]	@ (800ae24 <pvPortMalloc+0x198>)
 800adde:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ade0:	f7fe fcb8 	bl	8009754 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ade4:	69fb      	ldr	r3, [r7, #28]
 800ade6:	f003 0307 	and.w	r3, r3, #7
 800adea:	2b00      	cmp	r3, #0
 800adec:	d00b      	beq.n	800ae06 <pvPortMalloc+0x17a>
	__asm volatile
 800adee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adf2:	f383 8811 	msr	BASEPRI, r3
 800adf6:	f3bf 8f6f 	isb	sy
 800adfa:	f3bf 8f4f 	dsb	sy
 800adfe:	60fb      	str	r3, [r7, #12]
}
 800ae00:	bf00      	nop
 800ae02:	bf00      	nop
 800ae04:	e7fd      	b.n	800ae02 <pvPortMalloc+0x176>
	return pvReturn;
 800ae06:	69fb      	ldr	r3, [r7, #28]
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3728      	adds	r7, #40	@ 0x28
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}
 800ae10:	2000c43c 	.word	0x2000c43c
 800ae14:	2000c450 	.word	0x2000c450
 800ae18:	2000c440 	.word	0x2000c440
 800ae1c:	2000c434 	.word	0x2000c434
 800ae20:	2000c444 	.word	0x2000c444
 800ae24:	2000c448 	.word	0x2000c448

0800ae28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b086      	sub	sp, #24
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d04f      	beq.n	800aeda <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ae3a:	2308      	movs	r3, #8
 800ae3c:	425b      	negs	r3, r3
 800ae3e:	697a      	ldr	r2, [r7, #20]
 800ae40:	4413      	add	r3, r2
 800ae42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	685a      	ldr	r2, [r3, #4]
 800ae4c:	4b25      	ldr	r3, [pc, #148]	@ (800aee4 <vPortFree+0xbc>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	4013      	ands	r3, r2
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d10b      	bne.n	800ae6e <vPortFree+0x46>
	__asm volatile
 800ae56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae5a:	f383 8811 	msr	BASEPRI, r3
 800ae5e:	f3bf 8f6f 	isb	sy
 800ae62:	f3bf 8f4f 	dsb	sy
 800ae66:	60fb      	str	r3, [r7, #12]
}
 800ae68:	bf00      	nop
 800ae6a:	bf00      	nop
 800ae6c:	e7fd      	b.n	800ae6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d00b      	beq.n	800ae8e <vPortFree+0x66>
	__asm volatile
 800ae76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae7a:	f383 8811 	msr	BASEPRI, r3
 800ae7e:	f3bf 8f6f 	isb	sy
 800ae82:	f3bf 8f4f 	dsb	sy
 800ae86:	60bb      	str	r3, [r7, #8]
}
 800ae88:	bf00      	nop
 800ae8a:	bf00      	nop
 800ae8c:	e7fd      	b.n	800ae8a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	685a      	ldr	r2, [r3, #4]
 800ae92:	4b14      	ldr	r3, [pc, #80]	@ (800aee4 <vPortFree+0xbc>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	4013      	ands	r3, r2
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d01e      	beq.n	800aeda <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d11a      	bne.n	800aeda <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	685a      	ldr	r2, [r3, #4]
 800aea8:	4b0e      	ldr	r3, [pc, #56]	@ (800aee4 <vPortFree+0xbc>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	43db      	mvns	r3, r3
 800aeae:	401a      	ands	r2, r3
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aeb4:	f7fe fc40 	bl	8009738 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	685a      	ldr	r2, [r3, #4]
 800aebc:	4b0a      	ldr	r3, [pc, #40]	@ (800aee8 <vPortFree+0xc0>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	4413      	add	r3, r2
 800aec2:	4a09      	ldr	r2, [pc, #36]	@ (800aee8 <vPortFree+0xc0>)
 800aec4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aec6:	6938      	ldr	r0, [r7, #16]
 800aec8:	f000 f874 	bl	800afb4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800aecc:	4b07      	ldr	r3, [pc, #28]	@ (800aeec <vPortFree+0xc4>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	3301      	adds	r3, #1
 800aed2:	4a06      	ldr	r2, [pc, #24]	@ (800aeec <vPortFree+0xc4>)
 800aed4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800aed6:	f7fe fc3d 	bl	8009754 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aeda:	bf00      	nop
 800aedc:	3718      	adds	r7, #24
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}
 800aee2:	bf00      	nop
 800aee4:	2000c450 	.word	0x2000c450
 800aee8:	2000c440 	.word	0x2000c440
 800aeec:	2000c44c 	.word	0x2000c44c

0800aef0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aef0:	b480      	push	{r7}
 800aef2:	b085      	sub	sp, #20
 800aef4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800aef6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800aefa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800aefc:	4b27      	ldr	r3, [pc, #156]	@ (800af9c <prvHeapInit+0xac>)
 800aefe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	f003 0307 	and.w	r3, r3, #7
 800af06:	2b00      	cmp	r3, #0
 800af08:	d00c      	beq.n	800af24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	3307      	adds	r3, #7
 800af0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f023 0307 	bic.w	r3, r3, #7
 800af16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800af18:	68ba      	ldr	r2, [r7, #8]
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	1ad3      	subs	r3, r2, r3
 800af1e:	4a1f      	ldr	r2, [pc, #124]	@ (800af9c <prvHeapInit+0xac>)
 800af20:	4413      	add	r3, r2
 800af22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800af28:	4a1d      	ldr	r2, [pc, #116]	@ (800afa0 <prvHeapInit+0xb0>)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800af2e:	4b1c      	ldr	r3, [pc, #112]	@ (800afa0 <prvHeapInit+0xb0>)
 800af30:	2200      	movs	r2, #0
 800af32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	68ba      	ldr	r2, [r7, #8]
 800af38:	4413      	add	r3, r2
 800af3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800af3c:	2208      	movs	r2, #8
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	1a9b      	subs	r3, r3, r2
 800af42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	f023 0307 	bic.w	r3, r3, #7
 800af4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	4a15      	ldr	r2, [pc, #84]	@ (800afa4 <prvHeapInit+0xb4>)
 800af50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800af52:	4b14      	ldr	r3, [pc, #80]	@ (800afa4 <prvHeapInit+0xb4>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	2200      	movs	r2, #0
 800af58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800af5a:	4b12      	ldr	r3, [pc, #72]	@ (800afa4 <prvHeapInit+0xb4>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	2200      	movs	r2, #0
 800af60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	68fa      	ldr	r2, [r7, #12]
 800af6a:	1ad2      	subs	r2, r2, r3
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800af70:	4b0c      	ldr	r3, [pc, #48]	@ (800afa4 <prvHeapInit+0xb4>)
 800af72:	681a      	ldr	r2, [r3, #0]
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	685b      	ldr	r3, [r3, #4]
 800af7c:	4a0a      	ldr	r2, [pc, #40]	@ (800afa8 <prvHeapInit+0xb8>)
 800af7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	685b      	ldr	r3, [r3, #4]
 800af84:	4a09      	ldr	r2, [pc, #36]	@ (800afac <prvHeapInit+0xbc>)
 800af86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800af88:	4b09      	ldr	r3, [pc, #36]	@ (800afb0 <prvHeapInit+0xc0>)
 800af8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800af8e:	601a      	str	r2, [r3, #0]
}
 800af90:	bf00      	nop
 800af92:	3714      	adds	r7, #20
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr
 800af9c:	20008834 	.word	0x20008834
 800afa0:	2000c434 	.word	0x2000c434
 800afa4:	2000c43c 	.word	0x2000c43c
 800afa8:	2000c444 	.word	0x2000c444
 800afac:	2000c440 	.word	0x2000c440
 800afb0:	2000c450 	.word	0x2000c450

0800afb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800afb4:	b480      	push	{r7}
 800afb6:	b085      	sub	sp, #20
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800afbc:	4b28      	ldr	r3, [pc, #160]	@ (800b060 <prvInsertBlockIntoFreeList+0xac>)
 800afbe:	60fb      	str	r3, [r7, #12]
 800afc0:	e002      	b.n	800afc8 <prvInsertBlockIntoFreeList+0x14>
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	60fb      	str	r3, [r7, #12]
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	687a      	ldr	r2, [r7, #4]
 800afce:	429a      	cmp	r2, r3
 800afd0:	d8f7      	bhi.n	800afc2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	685b      	ldr	r3, [r3, #4]
 800afda:	68ba      	ldr	r2, [r7, #8]
 800afdc:	4413      	add	r3, r2
 800afde:	687a      	ldr	r2, [r7, #4]
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d108      	bne.n	800aff6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	685a      	ldr	r2, [r3, #4]
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	441a      	add	r2, r3
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	685b      	ldr	r3, [r3, #4]
 800affe:	68ba      	ldr	r2, [r7, #8]
 800b000:	441a      	add	r2, r3
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	429a      	cmp	r2, r3
 800b008:	d118      	bne.n	800b03c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681a      	ldr	r2, [r3, #0]
 800b00e:	4b15      	ldr	r3, [pc, #84]	@ (800b064 <prvInsertBlockIntoFreeList+0xb0>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	429a      	cmp	r2, r3
 800b014:	d00d      	beq.n	800b032 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	685a      	ldr	r2, [r3, #4]
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	685b      	ldr	r3, [r3, #4]
 800b020:	441a      	add	r2, r3
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	681a      	ldr	r2, [r3, #0]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	601a      	str	r2, [r3, #0]
 800b030:	e008      	b.n	800b044 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b032:	4b0c      	ldr	r3, [pc, #48]	@ (800b064 <prvInsertBlockIntoFreeList+0xb0>)
 800b034:	681a      	ldr	r2, [r3, #0]
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	601a      	str	r2, [r3, #0]
 800b03a:	e003      	b.n	800b044 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	681a      	ldr	r2, [r3, #0]
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b044:	68fa      	ldr	r2, [r7, #12]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	429a      	cmp	r2, r3
 800b04a:	d002      	beq.n	800b052 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	687a      	ldr	r2, [r7, #4]
 800b050:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b052:	bf00      	nop
 800b054:	3714      	adds	r7, #20
 800b056:	46bd      	mov	sp, r7
 800b058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05c:	4770      	bx	lr
 800b05e:	bf00      	nop
 800b060:	2000c434 	.word	0x2000c434
 800b064:	2000c43c 	.word	0x2000c43c

0800b068 <rcl_get_zero_initialized_context>:
 800b068:	4a03      	ldr	r2, [pc, #12]	@ (800b078 <rcl_get_zero_initialized_context+0x10>)
 800b06a:	4603      	mov	r3, r0
 800b06c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b070:	e883 0003 	stmia.w	r3, {r0, r1}
 800b074:	4618      	mov	r0, r3
 800b076:	4770      	bx	lr
 800b078:	08019ac4 	.word	0x08019ac4

0800b07c <rcl_context_is_valid>:
 800b07c:	b118      	cbz	r0, 800b086 <rcl_context_is_valid+0xa>
 800b07e:	6840      	ldr	r0, [r0, #4]
 800b080:	3800      	subs	r0, #0
 800b082:	bf18      	it	ne
 800b084:	2001      	movne	r0, #1
 800b086:	4770      	bx	lr

0800b088 <rcl_context_get_rmw_context>:
 800b088:	b110      	cbz	r0, 800b090 <rcl_context_get_rmw_context+0x8>
 800b08a:	6800      	ldr	r0, [r0, #0]
 800b08c:	b100      	cbz	r0, 800b090 <rcl_context_get_rmw_context+0x8>
 800b08e:	3028      	adds	r0, #40	@ 0x28
 800b090:	4770      	bx	lr
 800b092:	bf00      	nop

0800b094 <__cleanup_context>:
 800b094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b098:	4606      	mov	r6, r0
 800b09a:	6800      	ldr	r0, [r0, #0]
 800b09c:	2300      	movs	r3, #0
 800b09e:	6073      	str	r3, [r6, #4]
 800b0a0:	2800      	cmp	r0, #0
 800b0a2:	d049      	beq.n	800b138 <__cleanup_context+0xa4>
 800b0a4:	6947      	ldr	r7, [r0, #20]
 800b0a6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800b0aa:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800b0ae:	b137      	cbz	r7, 800b0be <__cleanup_context+0x2a>
 800b0b0:	3014      	adds	r0, #20
 800b0b2:	f000 f8cb 	bl	800b24c <rcl_init_options_fini>
 800b0b6:	4607      	mov	r7, r0
 800b0b8:	2800      	cmp	r0, #0
 800b0ba:	d144      	bne.n	800b146 <__cleanup_context+0xb2>
 800b0bc:	6830      	ldr	r0, [r6, #0]
 800b0be:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800b0c0:	b143      	cbz	r3, 800b0d4 <__cleanup_context+0x40>
 800b0c2:	3028      	adds	r0, #40	@ 0x28
 800b0c4:	f002 ff3a 	bl	800df3c <rmw_context_fini>
 800b0c8:	b118      	cbz	r0, 800b0d2 <__cleanup_context+0x3e>
 800b0ca:	2f00      	cmp	r7, #0
 800b0cc:	d03e      	beq.n	800b14c <__cleanup_context+0xb8>
 800b0ce:	f002 f94b 	bl	800d368 <rcutils_reset_error>
 800b0d2:	6830      	ldr	r0, [r6, #0]
 800b0d4:	6a03      	ldr	r3, [r0, #32]
 800b0d6:	b1db      	cbz	r3, 800b110 <__cleanup_context+0x7c>
 800b0d8:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800b0dc:	2a01      	cmp	r2, #1
 800b0de:	f17c 0100 	sbcs.w	r1, ip, #0
 800b0e2:	db11      	blt.n	800b108 <__cleanup_context+0x74>
 800b0e4:	2400      	movs	r4, #0
 800b0e6:	4625      	mov	r5, r4
 800b0e8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800b0ec:	4649      	mov	r1, r9
 800b0ee:	b1b8      	cbz	r0, 800b120 <__cleanup_context+0x8c>
 800b0f0:	47c0      	blx	r8
 800b0f2:	6833      	ldr	r3, [r6, #0]
 800b0f4:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800b0f8:	3401      	adds	r4, #1
 800b0fa:	f145 0500 	adc.w	r5, r5, #0
 800b0fe:	4294      	cmp	r4, r2
 800b100:	eb75 010c 	sbcs.w	r1, r5, ip
 800b104:	6a1b      	ldr	r3, [r3, #32]
 800b106:	dbef      	blt.n	800b0e8 <__cleanup_context+0x54>
 800b108:	4618      	mov	r0, r3
 800b10a:	4649      	mov	r1, r9
 800b10c:	47c0      	blx	r8
 800b10e:	6830      	ldr	r0, [r6, #0]
 800b110:	4649      	mov	r1, r9
 800b112:	47c0      	blx	r8
 800b114:	2300      	movs	r3, #0
 800b116:	e9c6 3300 	strd	r3, r3, [r6]
 800b11a:	4638      	mov	r0, r7
 800b11c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b120:	3401      	adds	r4, #1
 800b122:	f145 0500 	adc.w	r5, r5, #0
 800b126:	4294      	cmp	r4, r2
 800b128:	eb75 010c 	sbcs.w	r1, r5, ip
 800b12c:	dbdc      	blt.n	800b0e8 <__cleanup_context+0x54>
 800b12e:	4618      	mov	r0, r3
 800b130:	4649      	mov	r1, r9
 800b132:	47c0      	blx	r8
 800b134:	6830      	ldr	r0, [r6, #0]
 800b136:	e7eb      	b.n	800b110 <__cleanup_context+0x7c>
 800b138:	4607      	mov	r7, r0
 800b13a:	2300      	movs	r3, #0
 800b13c:	e9c6 3300 	strd	r3, r3, [r6]
 800b140:	4638      	mov	r0, r7
 800b142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b146:	f002 f90f 	bl	800d368 <rcutils_reset_error>
 800b14a:	e7b7      	b.n	800b0bc <__cleanup_context+0x28>
 800b14c:	f008 fee6 	bl	8013f1c <rcl_convert_rmw_ret_to_rcl_ret>
 800b150:	4607      	mov	r7, r0
 800b152:	e7bc      	b.n	800b0ce <__cleanup_context+0x3a>

0800b154 <rcl_context_fini>:
 800b154:	b178      	cbz	r0, 800b176 <rcl_context_fini+0x22>
 800b156:	b510      	push	{r4, lr}
 800b158:	4604      	mov	r4, r0
 800b15a:	6800      	ldr	r0, [r0, #0]
 800b15c:	b150      	cbz	r0, 800b174 <rcl_context_fini+0x20>
 800b15e:	6863      	ldr	r3, [r4, #4]
 800b160:	b93b      	cbnz	r3, 800b172 <rcl_context_fini+0x1e>
 800b162:	f002 f821 	bl	800d1a8 <rcutils_allocator_is_valid>
 800b166:	b120      	cbz	r0, 800b172 <rcl_context_fini+0x1e>
 800b168:	4620      	mov	r0, r4
 800b16a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b16e:	f7ff bf91 	b.w	800b094 <__cleanup_context>
 800b172:	200b      	movs	r0, #11
 800b174:	bd10      	pop	{r4, pc}
 800b176:	200b      	movs	r0, #11
 800b178:	4770      	bx	lr
 800b17a:	bf00      	nop

0800b17c <rcl_get_zero_initialized_init_options>:
 800b17c:	2000      	movs	r0, #0
 800b17e:	4770      	bx	lr

0800b180 <rcl_init_options_init>:
 800b180:	b084      	sub	sp, #16
 800b182:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b184:	b097      	sub	sp, #92	@ 0x5c
 800b186:	ae1d      	add	r6, sp, #116	@ 0x74
 800b188:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800b18c:	2800      	cmp	r0, #0
 800b18e:	d058      	beq.n	800b242 <rcl_init_options_init+0xc2>
 800b190:	6803      	ldr	r3, [r0, #0]
 800b192:	4605      	mov	r5, r0
 800b194:	b133      	cbz	r3, 800b1a4 <rcl_init_options_init+0x24>
 800b196:	2464      	movs	r4, #100	@ 0x64
 800b198:	4620      	mov	r0, r4
 800b19a:	b017      	add	sp, #92	@ 0x5c
 800b19c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b1a0:	b004      	add	sp, #16
 800b1a2:	4770      	bx	lr
 800b1a4:	4630      	mov	r0, r6
 800b1a6:	f001 ffff 	bl	800d1a8 <rcutils_allocator_is_valid>
 800b1aa:	2800      	cmp	r0, #0
 800b1ac:	d049      	beq.n	800b242 <rcl_init_options_init+0xc2>
 800b1ae:	46b4      	mov	ip, r6
 800b1b0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b1b4:	ac11      	add	r4, sp, #68	@ 0x44
 800b1b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b1b8:	f8dc 3000 	ldr.w	r3, [ip]
 800b1bc:	6023      	str	r3, [r4, #0]
 800b1be:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800b1c0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b1c2:	2050      	movs	r0, #80	@ 0x50
 800b1c4:	4798      	blx	r3
 800b1c6:	4604      	mov	r4, r0
 800b1c8:	6028      	str	r0, [r5, #0]
 800b1ca:	2800      	cmp	r0, #0
 800b1cc:	d03b      	beq.n	800b246 <rcl_init_options_init+0xc6>
 800b1ce:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800b1d2:	4686      	mov	lr, r0
 800b1d4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b1d8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b1dc:	f8dc 3000 	ldr.w	r3, [ip]
 800b1e0:	f8ce 3000 	str.w	r3, [lr]
 800b1e4:	a802      	add	r0, sp, #8
 800b1e6:	f002 fa83 	bl	800d6f0 <rmw_get_zero_initialized_init_options>
 800b1ea:	f10d 0e08 	add.w	lr, sp, #8
 800b1ee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b1f2:	f104 0c18 	add.w	ip, r4, #24
 800b1f6:	682f      	ldr	r7, [r5, #0]
 800b1f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b1fc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b200:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b204:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b208:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b20c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800b210:	ac20      	add	r4, sp, #128	@ 0x80
 800b212:	e88c 0003 	stmia.w	ip, {r0, r1}
 800b216:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b21a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800b21e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800b222:	f107 0018 	add.w	r0, r7, #24
 800b226:	f002 fbcd 	bl	800d9c4 <rmw_init_options_init>
 800b22a:	4604      	mov	r4, r0
 800b22c:	2800      	cmp	r0, #0
 800b22e:	d0b3      	beq.n	800b198 <rcl_init_options_init+0x18>
 800b230:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800b232:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b234:	6828      	ldr	r0, [r5, #0]
 800b236:	4798      	blx	r3
 800b238:	4620      	mov	r0, r4
 800b23a:	f008 fe6f 	bl	8013f1c <rcl_convert_rmw_ret_to_rcl_ret>
 800b23e:	4604      	mov	r4, r0
 800b240:	e7aa      	b.n	800b198 <rcl_init_options_init+0x18>
 800b242:	240b      	movs	r4, #11
 800b244:	e7a8      	b.n	800b198 <rcl_init_options_init+0x18>
 800b246:	240a      	movs	r4, #10
 800b248:	e7a6      	b.n	800b198 <rcl_init_options_init+0x18>
 800b24a:	bf00      	nop

0800b24c <rcl_init_options_fini>:
 800b24c:	b530      	push	{r4, r5, lr}
 800b24e:	b087      	sub	sp, #28
 800b250:	b1f0      	cbz	r0, 800b290 <rcl_init_options_fini+0x44>
 800b252:	6803      	ldr	r3, [r0, #0]
 800b254:	4604      	mov	r4, r0
 800b256:	b1db      	cbz	r3, 800b290 <rcl_init_options_fini+0x44>
 800b258:	469c      	mov	ip, r3
 800b25a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b25e:	f10d 0e04 	add.w	lr, sp, #4
 800b262:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b266:	f8dc 3000 	ldr.w	r3, [ip]
 800b26a:	f8ce 3000 	str.w	r3, [lr]
 800b26e:	a801      	add	r0, sp, #4
 800b270:	f001 ff9a 	bl	800d1a8 <rcutils_allocator_is_valid>
 800b274:	b160      	cbz	r0, 800b290 <rcl_init_options_fini+0x44>
 800b276:	6820      	ldr	r0, [r4, #0]
 800b278:	3018      	adds	r0, #24
 800b27a:	f002 fc79 	bl	800db70 <rmw_init_options_fini>
 800b27e:	4605      	mov	r5, r0
 800b280:	b950      	cbnz	r0, 800b298 <rcl_init_options_fini+0x4c>
 800b282:	6820      	ldr	r0, [r4, #0]
 800b284:	9b02      	ldr	r3, [sp, #8]
 800b286:	9905      	ldr	r1, [sp, #20]
 800b288:	4798      	blx	r3
 800b28a:	4628      	mov	r0, r5
 800b28c:	b007      	add	sp, #28
 800b28e:	bd30      	pop	{r4, r5, pc}
 800b290:	250b      	movs	r5, #11
 800b292:	4628      	mov	r0, r5
 800b294:	b007      	add	sp, #28
 800b296:	bd30      	pop	{r4, r5, pc}
 800b298:	f008 fe40 	bl	8013f1c <rcl_convert_rmw_ret_to_rcl_ret>
 800b29c:	4605      	mov	r5, r0
 800b29e:	e7f8      	b.n	800b292 <rcl_init_options_fini+0x46>

0800b2a0 <rcl_init_options_copy>:
 800b2a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2a4:	b094      	sub	sp, #80	@ 0x50
 800b2a6:	2800      	cmp	r0, #0
 800b2a8:	d058      	beq.n	800b35c <rcl_init_options_copy+0xbc>
 800b2aa:	4604      	mov	r4, r0
 800b2ac:	6800      	ldr	r0, [r0, #0]
 800b2ae:	2800      	cmp	r0, #0
 800b2b0:	d054      	beq.n	800b35c <rcl_init_options_copy+0xbc>
 800b2b2:	460e      	mov	r6, r1
 800b2b4:	f001 ff78 	bl	800d1a8 <rcutils_allocator_is_valid>
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	d04f      	beq.n	800b35c <rcl_init_options_copy+0xbc>
 800b2bc:	2e00      	cmp	r6, #0
 800b2be:	d04d      	beq.n	800b35c <rcl_init_options_copy+0xbc>
 800b2c0:	6833      	ldr	r3, [r6, #0]
 800b2c2:	b123      	cbz	r3, 800b2ce <rcl_init_options_copy+0x2e>
 800b2c4:	2464      	movs	r4, #100	@ 0x64
 800b2c6:	4620      	mov	r0, r4
 800b2c8:	b014      	add	sp, #80	@ 0x50
 800b2ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2ce:	6827      	ldr	r7, [r4, #0]
 800b2d0:	46bc      	mov	ip, r7
 800b2d2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b2d6:	ad0f      	add	r5, sp, #60	@ 0x3c
 800b2d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b2da:	f8dc 3000 	ldr.w	r3, [ip]
 800b2de:	f8d7 8000 	ldr.w	r8, [r7]
 800b2e2:	602b      	str	r3, [r5, #0]
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	2050      	movs	r0, #80	@ 0x50
 800b2e8:	47c0      	blx	r8
 800b2ea:	4605      	mov	r5, r0
 800b2ec:	6030      	str	r0, [r6, #0]
 800b2ee:	b3d0      	cbz	r0, 800b366 <rcl_init_options_copy+0xc6>
 800b2f0:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800b2f4:	4686      	mov	lr, r0
 800b2f6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b2fa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b2fe:	f8dc 3000 	ldr.w	r3, [ip]
 800b302:	f8ce 3000 	str.w	r3, [lr]
 800b306:	4668      	mov	r0, sp
 800b308:	f002 f9f2 	bl	800d6f0 <rmw_get_zero_initialized_init_options>
 800b30c:	46ee      	mov	lr, sp
 800b30e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b312:	f105 0c18 	add.w	ip, r5, #24
 800b316:	6824      	ldr	r4, [r4, #0]
 800b318:	6835      	ldr	r5, [r6, #0]
 800b31a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b31e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b322:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b326:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b32a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b32e:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800b332:	e88c 0003 	stmia.w	ip, {r0, r1}
 800b336:	f104 0018 	add.w	r0, r4, #24
 800b33a:	f105 0118 	add.w	r1, r5, #24
 800b33e:	f002 fba3 	bl	800da88 <rmw_init_options_copy>
 800b342:	4604      	mov	r4, r0
 800b344:	2800      	cmp	r0, #0
 800b346:	d0be      	beq.n	800b2c6 <rcl_init_options_copy+0x26>
 800b348:	f001 fff8 	bl	800d33c <rcutils_get_error_string>
 800b34c:	f002 f80c 	bl	800d368 <rcutils_reset_error>
 800b350:	4630      	mov	r0, r6
 800b352:	f7ff ff7b 	bl	800b24c <rcl_init_options_fini>
 800b356:	b140      	cbz	r0, 800b36a <rcl_init_options_copy+0xca>
 800b358:	4604      	mov	r4, r0
 800b35a:	e7b4      	b.n	800b2c6 <rcl_init_options_copy+0x26>
 800b35c:	240b      	movs	r4, #11
 800b35e:	4620      	mov	r0, r4
 800b360:	b014      	add	sp, #80	@ 0x50
 800b362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b366:	240a      	movs	r4, #10
 800b368:	e7ad      	b.n	800b2c6 <rcl_init_options_copy+0x26>
 800b36a:	4620      	mov	r0, r4
 800b36c:	b014      	add	sp, #80	@ 0x50
 800b36e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b372:	f008 bdd3 	b.w	8013f1c <rcl_convert_rmw_ret_to_rcl_ret>
 800b376:	bf00      	nop

0800b378 <rcl_init_options_set_domain_id>:
 800b378:	b120      	cbz	r0, 800b384 <rcl_init_options_set_domain_id+0xc>
 800b37a:	6803      	ldr	r3, [r0, #0]
 800b37c:	b113      	cbz	r3, 800b384 <rcl_init_options_set_domain_id+0xc>
 800b37e:	6259      	str	r1, [r3, #36]	@ 0x24
 800b380:	2000      	movs	r0, #0
 800b382:	4770      	bx	lr
 800b384:	200b      	movs	r0, #11
 800b386:	4770      	bx	lr

0800b388 <rcl_get_zero_initialized_node>:
 800b388:	4a03      	ldr	r2, [pc, #12]	@ (800b398 <rcl_get_zero_initialized_node+0x10>)
 800b38a:	4603      	mov	r3, r0
 800b38c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b390:	e883 0003 	stmia.w	r3, {r0, r1}
 800b394:	4618      	mov	r0, r3
 800b396:	4770      	bx	lr
 800b398:	08019fd0 	.word	0x08019fd0

0800b39c <rcl_node_init>:
 800b39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3a0:	b0a9      	sub	sp, #164	@ 0xa4
 800b3a2:	4604      	mov	r4, r0
 800b3a4:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 800b3a8:	a823      	add	r0, sp, #140	@ 0x8c
 800b3aa:	460e      	mov	r6, r1
 800b3ac:	4615      	mov	r5, r2
 800b3ae:	461f      	mov	r7, r3
 800b3b0:	f008 fea4 	bl	80140fc <rcl_guard_condition_get_default_options>
 800b3b4:	f1b8 0f00 	cmp.w	r8, #0
 800b3b8:	f000 80e6 	beq.w	800b588 <rcl_node_init+0x1ec>
 800b3bc:	4640      	mov	r0, r8
 800b3be:	f001 fef3 	bl	800d1a8 <rcutils_allocator_is_valid>
 800b3c2:	2800      	cmp	r0, #0
 800b3c4:	f000 80e0 	beq.w	800b588 <rcl_node_init+0x1ec>
 800b3c8:	2e00      	cmp	r6, #0
 800b3ca:	f000 80dd 	beq.w	800b588 <rcl_node_init+0x1ec>
 800b3ce:	2d00      	cmp	r5, #0
 800b3d0:	f000 80da 	beq.w	800b588 <rcl_node_init+0x1ec>
 800b3d4:	2c00      	cmp	r4, #0
 800b3d6:	f000 80d7 	beq.w	800b588 <rcl_node_init+0x1ec>
 800b3da:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800b3de:	f1b9 0f00 	cmp.w	r9, #0
 800b3e2:	f040 80fd 	bne.w	800b5e0 <rcl_node_init+0x244>
 800b3e6:	2f00      	cmp	r7, #0
 800b3e8:	f000 80ce 	beq.w	800b588 <rcl_node_init+0x1ec>
 800b3ec:	4638      	mov	r0, r7
 800b3ee:	f7ff fe45 	bl	800b07c <rcl_context_is_valid>
 800b3f2:	4682      	mov	sl, r0
 800b3f4:	2800      	cmp	r0, #0
 800b3f6:	f000 80cd 	beq.w	800b594 <rcl_node_init+0x1f8>
 800b3fa:	464a      	mov	r2, r9
 800b3fc:	a922      	add	r1, sp, #136	@ 0x88
 800b3fe:	4630      	mov	r0, r6
 800b400:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 800b404:	f002 fa20 	bl	800d848 <rmw_validate_node_name>
 800b408:	4681      	mov	r9, r0
 800b40a:	2800      	cmp	r0, #0
 800b40c:	f040 80be 	bne.w	800b58c <rcl_node_init+0x1f0>
 800b410:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800b412:	2800      	cmp	r0, #0
 800b414:	f040 80f0 	bne.w	800b5f8 <rcl_node_init+0x25c>
 800b418:	4628      	mov	r0, r5
 800b41a:	f7f4 ff03 	bl	8000224 <strlen>
 800b41e:	2800      	cmp	r0, #0
 800b420:	f040 80bb 	bne.w	800b59a <rcl_node_init+0x1fe>
 800b424:	4d7c      	ldr	r5, [pc, #496]	@ (800b618 <rcl_node_init+0x27c>)
 800b426:	a922      	add	r1, sp, #136	@ 0x88
 800b428:	2200      	movs	r2, #0
 800b42a:	4628      	mov	r0, r5
 800b42c:	f002 f9ee 	bl	800d80c <rmw_validate_namespace>
 800b430:	4681      	mov	r9, r0
 800b432:	2800      	cmp	r0, #0
 800b434:	f040 80aa 	bne.w	800b58c <rcl_node_init+0x1f0>
 800b438:	4682      	mov	sl, r0
 800b43a:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800b43c:	2800      	cmp	r0, #0
 800b43e:	f040 80e0 	bne.w	800b602 <rcl_node_init+0x266>
 800b442:	f8d8 3000 	ldr.w	r3, [r8]
 800b446:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800b44a:	2078      	movs	r0, #120	@ 0x78
 800b44c:	4798      	blx	r3
 800b44e:	4681      	mov	r9, r0
 800b450:	6060      	str	r0, [r4, #4]
 800b452:	2800      	cmp	r0, #0
 800b454:	f000 80ca 	beq.w	800b5ec <rcl_node_init+0x250>
 800b458:	2200      	movs	r2, #0
 800b45a:	2300      	movs	r3, #0
 800b45c:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 800b460:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 800b464:	a808      	add	r0, sp, #32
 800b466:	f000 f939 	bl	800b6dc <rcl_node_get_default_options>
 800b46a:	a908      	add	r1, sp, #32
 800b46c:	4648      	mov	r0, r9
 800b46e:	2268      	movs	r2, #104	@ 0x68
 800b470:	f00d fba3 	bl	8018bba <memcpy>
 800b474:	6861      	ldr	r1, [r4, #4]
 800b476:	6027      	str	r7, [r4, #0]
 800b478:	4640      	mov	r0, r8
 800b47a:	f000 f93d 	bl	800b6f8 <rcl_node_options_copy>
 800b47e:	2800      	cmp	r0, #0
 800b480:	d158      	bne.n	800b534 <rcl_node_init+0x198>
 800b482:	4628      	mov	r0, r5
 800b484:	f7f4 fece 	bl	8000224 <strlen>
 800b488:	4428      	add	r0, r5
 800b48a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800b48e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800b492:	2b2f      	cmp	r3, #47	@ 0x2f
 800b494:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b498:	9300      	str	r3, [sp, #0]
 800b49a:	bf0c      	ite	eq
 800b49c:	4b5f      	ldreq	r3, [pc, #380]	@ (800b61c <rcl_node_init+0x280>)
 800b49e:	4b60      	ldrne	r3, [pc, #384]	@ (800b620 <rcl_node_init+0x284>)
 800b4a0:	9302      	str	r3, [sp, #8]
 800b4a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b4a6:	9301      	str	r3, [sp, #4]
 800b4a8:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800b4ac:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800b4b0:	f001 ff76 	bl	800d3a0 <rcutils_format_string_limit>
 800b4b4:	6823      	ldr	r3, [r4, #0]
 800b4b6:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 800b4ba:	6818      	ldr	r0, [r3, #0]
 800b4bc:	4631      	mov	r1, r6
 800b4be:	3028      	adds	r0, #40	@ 0x28
 800b4c0:	462a      	mov	r2, r5
 800b4c2:	6866      	ldr	r6, [r4, #4]
 800b4c4:	f002 fde6 	bl	800e094 <rmw_create_node>
 800b4c8:	6863      	ldr	r3, [r4, #4]
 800b4ca:	66b0      	str	r0, [r6, #104]	@ 0x68
 800b4cc:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800b4ce:	2800      	cmp	r0, #0
 800b4d0:	d032      	beq.n	800b538 <rcl_node_init+0x19c>
 800b4d2:	f002 fe73 	bl	800e1bc <rmw_node_get_graph_guard_condition>
 800b4d6:	4681      	mov	r9, r0
 800b4d8:	b360      	cbz	r0, 800b534 <rcl_node_init+0x198>
 800b4da:	f8d8 3000 	ldr.w	r3, [r8]
 800b4de:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800b4e2:	6866      	ldr	r6, [r4, #4]
 800b4e4:	2008      	movs	r0, #8
 800b4e6:	4798      	blx	r3
 800b4e8:	6863      	ldr	r3, [r4, #4]
 800b4ea:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800b4ec:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 800b4f0:	f1bb 0f00 	cmp.w	fp, #0
 800b4f4:	d020      	beq.n	800b538 <rcl_node_init+0x19c>
 800b4f6:	a806      	add	r0, sp, #24
 800b4f8:	f008 fd24 	bl	8013f44 <rcl_get_zero_initialized_guard_condition>
 800b4fc:	a806      	add	r0, sp, #24
 800b4fe:	c803      	ldmia	r0, {r0, r1}
 800b500:	6863      	ldr	r3, [r4, #4]
 800b502:	46c4      	mov	ip, r8
 800b504:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800b508:	e88b 0003 	stmia.w	fp, {r0, r1}
 800b50c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b510:	ae23      	add	r6, sp, #140	@ 0x8c
 800b512:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b514:	f8dc 3000 	ldr.w	r3, [ip]
 800b518:	6033      	str	r3, [r6, #0]
 800b51a:	ab28      	add	r3, sp, #160	@ 0xa0
 800b51c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800b520:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b524:	4649      	mov	r1, r9
 800b526:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b528:	463a      	mov	r2, r7
 800b52a:	4670      	mov	r0, lr
 800b52c:	f008 fd60 	bl	8013ff0 <rcl_guard_condition_init_from_rmw>
 800b530:	4681      	mov	r9, r0
 800b532:	b328      	cbz	r0, 800b580 <rcl_node_init+0x1e4>
 800b534:	6863      	ldr	r3, [r4, #4]
 800b536:	b1f3      	cbz	r3, 800b576 <rcl_node_init+0x1da>
 800b538:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800b53a:	b128      	cbz	r0, 800b548 <rcl_node_init+0x1ac>
 800b53c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b540:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800b544:	4798      	blx	r3
 800b546:	6863      	ldr	r3, [r4, #4]
 800b548:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800b54a:	b110      	cbz	r0, 800b552 <rcl_node_init+0x1b6>
 800b54c:	f002 fdba 	bl	800e0c4 <rmw_destroy_node>
 800b550:	6863      	ldr	r3, [r4, #4]
 800b552:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800b554:	b148      	cbz	r0, 800b56a <rcl_node_init+0x1ce>
 800b556:	f008 fdab 	bl	80140b0 <rcl_guard_condition_fini>
 800b55a:	6863      	ldr	r3, [r4, #4]
 800b55c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800b560:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800b562:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b566:	4798      	blx	r3
 800b568:	6863      	ldr	r3, [r4, #4]
 800b56a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800b56e:	4618      	mov	r0, r3
 800b570:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b574:	4798      	blx	r3
 800b576:	2300      	movs	r3, #0
 800b578:	e9c4 3300 	strd	r3, r3, [r4]
 800b57c:	f04f 0901 	mov.w	r9, #1
 800b580:	f1ba 0f00 	cmp.w	sl, #0
 800b584:	d125      	bne.n	800b5d2 <rcl_node_init+0x236>
 800b586:	e001      	b.n	800b58c <rcl_node_init+0x1f0>
 800b588:	f04f 090b 	mov.w	r9, #11
 800b58c:	4648      	mov	r0, r9
 800b58e:	b029      	add	sp, #164	@ 0xa4
 800b590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b594:	f04f 0965 	mov.w	r9, #101	@ 0x65
 800b598:	e7f8      	b.n	800b58c <rcl_node_init+0x1f0>
 800b59a:	782b      	ldrb	r3, [r5, #0]
 800b59c:	2b2f      	cmp	r3, #47	@ 0x2f
 800b59e:	f43f af42 	beq.w	800b426 <rcl_node_init+0x8a>
 800b5a2:	9503      	str	r5, [sp, #12]
 800b5a4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b5a8:	9300      	str	r3, [sp, #0]
 800b5aa:	4b1e      	ldr	r3, [pc, #120]	@ (800b624 <rcl_node_init+0x288>)
 800b5ac:	9302      	str	r3, [sp, #8]
 800b5ae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b5b2:	9301      	str	r3, [sp, #4]
 800b5b4:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800b5b8:	f001 fef2 	bl	800d3a0 <rcutils_format_string_limit>
 800b5bc:	4605      	mov	r5, r0
 800b5be:	b340      	cbz	r0, 800b612 <rcl_node_init+0x276>
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	a922      	add	r1, sp, #136	@ 0x88
 800b5c4:	9222      	str	r2, [sp, #136]	@ 0x88
 800b5c6:	f002 f921 	bl	800d80c <rmw_validate_namespace>
 800b5ca:	4681      	mov	r9, r0
 800b5cc:	2800      	cmp	r0, #0
 800b5ce:	f43f af34 	beq.w	800b43a <rcl_node_init+0x9e>
 800b5d2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b5d6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800b5da:	4628      	mov	r0, r5
 800b5dc:	4798      	blx	r3
 800b5de:	e7d5      	b.n	800b58c <rcl_node_init+0x1f0>
 800b5e0:	f04f 0964 	mov.w	r9, #100	@ 0x64
 800b5e4:	4648      	mov	r0, r9
 800b5e6:	b029      	add	sp, #164	@ 0xa4
 800b5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5ec:	f04f 090a 	mov.w	r9, #10
 800b5f0:	f1ba 0f00 	cmp.w	sl, #0
 800b5f4:	d1ed      	bne.n	800b5d2 <rcl_node_init+0x236>
 800b5f6:	e7c9      	b.n	800b58c <rcl_node_init+0x1f0>
 800b5f8:	f002 f978 	bl	800d8ec <rmw_node_name_validation_result_string>
 800b5fc:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 800b600:	e7c4      	b.n	800b58c <rcl_node_init+0x1f0>
 800b602:	f002 f915 	bl	800d830 <rmw_namespace_validation_result_string>
 800b606:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 800b60a:	f1ba 0f00 	cmp.w	sl, #0
 800b60e:	d1e0      	bne.n	800b5d2 <rcl_node_init+0x236>
 800b610:	e7bc      	b.n	800b58c <rcl_node_init+0x1f0>
 800b612:	f04f 090a 	mov.w	r9, #10
 800b616:	e7b9      	b.n	800b58c <rcl_node_init+0x1f0>
 800b618:	08019ad0 	.word	0x08019ad0
 800b61c:	08019ad8 	.word	0x08019ad8
 800b620:	08019ae0 	.word	0x08019ae0
 800b624:	08019ad4 	.word	0x08019ad4

0800b628 <rcl_node_fini>:
 800b628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b62a:	b320      	cbz	r0, 800b676 <rcl_node_fini+0x4e>
 800b62c:	6845      	ldr	r5, [r0, #4]
 800b62e:	4604      	mov	r4, r0
 800b630:	b1fd      	cbz	r5, 800b672 <rcl_node_fini+0x4a>
 800b632:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 800b634:	686f      	ldr	r7, [r5, #4]
 800b636:	692e      	ldr	r6, [r5, #16]
 800b638:	f002 fd44 	bl	800e0c4 <rmw_destroy_node>
 800b63c:	6863      	ldr	r3, [r4, #4]
 800b63e:	4605      	mov	r5, r0
 800b640:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800b642:	f008 fd35 	bl	80140b0 <rcl_guard_condition_fini>
 800b646:	ea55 0300 	orrs.w	r3, r5, r0
 800b64a:	6863      	ldr	r3, [r4, #4]
 800b64c:	4631      	mov	r1, r6
 800b64e:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800b650:	bf14      	ite	ne
 800b652:	2501      	movne	r5, #1
 800b654:	2500      	moveq	r5, #0
 800b656:	47b8      	blx	r7
 800b658:	6863      	ldr	r3, [r4, #4]
 800b65a:	4631      	mov	r1, r6
 800b65c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800b65e:	47b8      	blx	r7
 800b660:	6863      	ldr	r3, [r4, #4]
 800b662:	4631      	mov	r1, r6
 800b664:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800b666:	47b8      	blx	r7
 800b668:	6860      	ldr	r0, [r4, #4]
 800b66a:	4631      	mov	r1, r6
 800b66c:	47b8      	blx	r7
 800b66e:	2300      	movs	r3, #0
 800b670:	6063      	str	r3, [r4, #4]
 800b672:	4628      	mov	r0, r5
 800b674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b676:	25c8      	movs	r5, #200	@ 0xc8
 800b678:	4628      	mov	r0, r5
 800b67a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b67c <rcl_node_is_valid_except_context>:
 800b67c:	b128      	cbz	r0, 800b68a <rcl_node_is_valid_except_context+0xe>
 800b67e:	6840      	ldr	r0, [r0, #4]
 800b680:	b118      	cbz	r0, 800b68a <rcl_node_is_valid_except_context+0xe>
 800b682:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800b684:	3800      	subs	r0, #0
 800b686:	bf18      	it	ne
 800b688:	2001      	movne	r0, #1
 800b68a:	4770      	bx	lr

0800b68c <rcl_node_is_valid>:
 800b68c:	b130      	cbz	r0, 800b69c <rcl_node_is_valid+0x10>
 800b68e:	6843      	ldr	r3, [r0, #4]
 800b690:	b123      	cbz	r3, 800b69c <rcl_node_is_valid+0x10>
 800b692:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b694:	b113      	cbz	r3, 800b69c <rcl_node_is_valid+0x10>
 800b696:	6800      	ldr	r0, [r0, #0]
 800b698:	f7ff bcf0 	b.w	800b07c <rcl_context_is_valid>
 800b69c:	2000      	movs	r0, #0
 800b69e:	4770      	bx	lr

0800b6a0 <rcl_node_get_name>:
 800b6a0:	b120      	cbz	r0, 800b6ac <rcl_node_get_name+0xc>
 800b6a2:	6840      	ldr	r0, [r0, #4]
 800b6a4:	b110      	cbz	r0, 800b6ac <rcl_node_get_name+0xc>
 800b6a6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800b6a8:	b100      	cbz	r0, 800b6ac <rcl_node_get_name+0xc>
 800b6aa:	6880      	ldr	r0, [r0, #8]
 800b6ac:	4770      	bx	lr
 800b6ae:	bf00      	nop

0800b6b0 <rcl_node_get_namespace>:
 800b6b0:	b120      	cbz	r0, 800b6bc <rcl_node_get_namespace+0xc>
 800b6b2:	6840      	ldr	r0, [r0, #4]
 800b6b4:	b110      	cbz	r0, 800b6bc <rcl_node_get_namespace+0xc>
 800b6b6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800b6b8:	b100      	cbz	r0, 800b6bc <rcl_node_get_namespace+0xc>
 800b6ba:	68c0      	ldr	r0, [r0, #12]
 800b6bc:	4770      	bx	lr
 800b6be:	bf00      	nop

0800b6c0 <rcl_node_get_options>:
 800b6c0:	b128      	cbz	r0, 800b6ce <rcl_node_get_options+0xe>
 800b6c2:	6840      	ldr	r0, [r0, #4]
 800b6c4:	b118      	cbz	r0, 800b6ce <rcl_node_get_options+0xe>
 800b6c6:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	bf08      	it	eq
 800b6cc:	2000      	moveq	r0, #0
 800b6ce:	4770      	bx	lr

0800b6d0 <rcl_node_get_rmw_handle>:
 800b6d0:	b110      	cbz	r0, 800b6d8 <rcl_node_get_rmw_handle+0x8>
 800b6d2:	6840      	ldr	r0, [r0, #4]
 800b6d4:	b100      	cbz	r0, 800b6d8 <rcl_node_get_rmw_handle+0x8>
 800b6d6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800b6d8:	4770      	bx	lr
 800b6da:	bf00      	nop

0800b6dc <rcl_node_get_default_options>:
 800b6dc:	b510      	push	{r4, lr}
 800b6de:	2268      	movs	r2, #104	@ 0x68
 800b6e0:	4604      	mov	r4, r0
 800b6e2:	2100      	movs	r1, #0
 800b6e4:	f00d f942 	bl	801896c <memset>
 800b6e8:	4620      	mov	r0, r4
 800b6ea:	f001 fd4f 	bl	800d18c <rcutils_get_default_allocator>
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	7523      	strb	r3, [r4, #20]
 800b6f2:	4620      	mov	r0, r4
 800b6f4:	bd10      	pop	{r4, pc}
 800b6f6:	bf00      	nop

0800b6f8 <rcl_node_options_copy>:
 800b6f8:	b1d0      	cbz	r0, 800b730 <rcl_node_options_copy+0x38>
 800b6fa:	b570      	push	{r4, r5, r6, lr}
 800b6fc:	460c      	mov	r4, r1
 800b6fe:	b1a9      	cbz	r1, 800b72c <rcl_node_options_copy+0x34>
 800b700:	4288      	cmp	r0, r1
 800b702:	4684      	mov	ip, r0
 800b704:	d012      	beq.n	800b72c <rcl_node_options_copy+0x34>
 800b706:	4605      	mov	r5, r0
 800b708:	8a86      	ldrh	r6, [r0, #20]
 800b70a:	468e      	mov	lr, r1
 800b70c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b70e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b712:	682b      	ldr	r3, [r5, #0]
 800b714:	f8ce 3000 	str.w	r3, [lr]
 800b718:	f10c 0118 	add.w	r1, ip, #24
 800b71c:	2250      	movs	r2, #80	@ 0x50
 800b71e:	82a6      	strh	r6, [r4, #20]
 800b720:	f104 0018 	add.w	r0, r4, #24
 800b724:	f00d fa49 	bl	8018bba <memcpy>
 800b728:	2000      	movs	r0, #0
 800b72a:	bd70      	pop	{r4, r5, r6, pc}
 800b72c:	200b      	movs	r0, #11
 800b72e:	bd70      	pop	{r4, r5, r6, pc}
 800b730:	200b      	movs	r0, #11
 800b732:	4770      	bx	lr

0800b734 <rcl_get_zero_initialized_publisher>:
 800b734:	4b01      	ldr	r3, [pc, #4]	@ (800b73c <rcl_get_zero_initialized_publisher+0x8>)
 800b736:	6818      	ldr	r0, [r3, #0]
 800b738:	4770      	bx	lr
 800b73a:	bf00      	nop
 800b73c:	08019fd8 	.word	0x08019fd8

0800b740 <rcl_publisher_init>:
 800b740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b744:	b088      	sub	sp, #32
 800b746:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800b748:	2d00      	cmp	r5, #0
 800b74a:	d069      	beq.n	800b820 <rcl_publisher_init+0xe0>
 800b74c:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800b750:	4604      	mov	r4, r0
 800b752:	4648      	mov	r0, r9
 800b754:	460e      	mov	r6, r1
 800b756:	4690      	mov	r8, r2
 800b758:	461f      	mov	r7, r3
 800b75a:	f001 fd25 	bl	800d1a8 <rcutils_allocator_is_valid>
 800b75e:	2800      	cmp	r0, #0
 800b760:	d05e      	beq.n	800b820 <rcl_publisher_init+0xe0>
 800b762:	2c00      	cmp	r4, #0
 800b764:	d05c      	beq.n	800b820 <rcl_publisher_init+0xe0>
 800b766:	f8d4 a000 	ldr.w	sl, [r4]
 800b76a:	f1ba 0f00 	cmp.w	sl, #0
 800b76e:	d004      	beq.n	800b77a <rcl_publisher_init+0x3a>
 800b770:	2764      	movs	r7, #100	@ 0x64
 800b772:	4638      	mov	r0, r7
 800b774:	b008      	add	sp, #32
 800b776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b77a:	4630      	mov	r0, r6
 800b77c:	f7ff ff86 	bl	800b68c <rcl_node_is_valid>
 800b780:	2800      	cmp	r0, #0
 800b782:	d052      	beq.n	800b82a <rcl_publisher_init+0xea>
 800b784:	f1b8 0f00 	cmp.w	r8, #0
 800b788:	d04a      	beq.n	800b820 <rcl_publisher_init+0xe0>
 800b78a:	2f00      	cmp	r7, #0
 800b78c:	d048      	beq.n	800b820 <rcl_publisher_init+0xe0>
 800b78e:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800b792:	aa07      	add	r2, sp, #28
 800b794:	9205      	str	r2, [sp, #20]
 800b796:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800b79a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b79e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800b7a2:	f8cd a01c 	str.w	sl, [sp, #28]
 800b7a6:	4639      	mov	r1, r7
 800b7a8:	e899 000c 	ldmia.w	r9, {r2, r3}
 800b7ac:	4630      	mov	r0, r6
 800b7ae:	f008 fe05 	bl	80143bc <rcl_node_resolve_name>
 800b7b2:	4607      	mov	r7, r0
 800b7b4:	2800      	cmp	r0, #0
 800b7b6:	d14f      	bne.n	800b858 <rcl_publisher_init+0x118>
 800b7b8:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800b7ba:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800b7bc:	20c8      	movs	r0, #200	@ 0xc8
 800b7be:	4798      	blx	r3
 800b7c0:	6020      	str	r0, [r4, #0]
 800b7c2:	2800      	cmp	r0, #0
 800b7c4:	d04e      	beq.n	800b864 <rcl_publisher_init+0x124>
 800b7c6:	4630      	mov	r0, r6
 800b7c8:	f7ff ff82 	bl	800b6d0 <rcl_node_get_rmw_handle>
 800b7cc:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800b7d0:	9300      	str	r3, [sp, #0]
 800b7d2:	9a07      	ldr	r2, [sp, #28]
 800b7d4:	6827      	ldr	r7, [r4, #0]
 800b7d6:	462b      	mov	r3, r5
 800b7d8:	4641      	mov	r1, r8
 800b7da:	f002 fd59 	bl	800e290 <rmw_create_publisher>
 800b7de:	6823      	ldr	r3, [r4, #0]
 800b7e0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800b7e4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800b7e8:	b370      	cbz	r0, 800b848 <rcl_publisher_init+0x108>
 800b7ea:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800b7ee:	f002 fe2d 	bl	800e44c <rmw_publisher_get_actual_qos>
 800b7f2:	6823      	ldr	r3, [r4, #0]
 800b7f4:	4607      	mov	r7, r0
 800b7f6:	b9d0      	cbnz	r0, 800b82e <rcl_publisher_init+0xee>
 800b7f8:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800b7fc:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800b800:	4629      	mov	r1, r5
 800b802:	2270      	movs	r2, #112	@ 0x70
 800b804:	4618      	mov	r0, r3
 800b806:	f00d f9d8 	bl	8018bba <memcpy>
 800b80a:	6832      	ldr	r2, [r6, #0]
 800b80c:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800b810:	9807      	ldr	r0, [sp, #28]
 800b812:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800b814:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800b816:	4798      	blx	r3
 800b818:	4638      	mov	r0, r7
 800b81a:	b008      	add	sp, #32
 800b81c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b820:	270b      	movs	r7, #11
 800b822:	4638      	mov	r0, r7
 800b824:	b008      	add	sp, #32
 800b826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b82a:	27c8      	movs	r7, #200	@ 0xc8
 800b82c:	e7a1      	b.n	800b772 <rcl_publisher_init+0x32>
 800b82e:	b18b      	cbz	r3, 800b854 <rcl_publisher_init+0x114>
 800b830:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800b834:	b142      	cbz	r2, 800b848 <rcl_publisher_init+0x108>
 800b836:	4630      	mov	r0, r6
 800b838:	f7ff ff4a 	bl	800b6d0 <rcl_node_get_rmw_handle>
 800b83c:	6823      	ldr	r3, [r4, #0]
 800b83e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800b842:	f002 fe13 	bl	800e46c <rmw_destroy_publisher>
 800b846:	6823      	ldr	r3, [r4, #0]
 800b848:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800b84a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800b84c:	4618      	mov	r0, r3
 800b84e:	4790      	blx	r2
 800b850:	2300      	movs	r3, #0
 800b852:	6023      	str	r3, [r4, #0]
 800b854:	2701      	movs	r7, #1
 800b856:	e7db      	b.n	800b810 <rcl_publisher_init+0xd0>
 800b858:	2867      	cmp	r0, #103	@ 0x67
 800b85a:	d0d9      	beq.n	800b810 <rcl_publisher_init+0xd0>
 800b85c:	2869      	cmp	r0, #105	@ 0x69
 800b85e:	d003      	beq.n	800b868 <rcl_publisher_init+0x128>
 800b860:	280a      	cmp	r0, #10
 800b862:	d1f7      	bne.n	800b854 <rcl_publisher_init+0x114>
 800b864:	270a      	movs	r7, #10
 800b866:	e7d3      	b.n	800b810 <rcl_publisher_init+0xd0>
 800b868:	2767      	movs	r7, #103	@ 0x67
 800b86a:	e7d1      	b.n	800b810 <rcl_publisher_init+0xd0>

0800b86c <rcl_publisher_fini>:
 800b86c:	b570      	push	{r4, r5, r6, lr}
 800b86e:	b300      	cbz	r0, 800b8b2 <rcl_publisher_fini+0x46>
 800b870:	4604      	mov	r4, r0
 800b872:	4608      	mov	r0, r1
 800b874:	460d      	mov	r5, r1
 800b876:	f7ff ff01 	bl	800b67c <rcl_node_is_valid_except_context>
 800b87a:	b1f0      	cbz	r0, 800b8ba <rcl_publisher_fini+0x4e>
 800b87c:	6823      	ldr	r3, [r4, #0]
 800b87e:	b1ab      	cbz	r3, 800b8ac <rcl_publisher_fini+0x40>
 800b880:	4628      	mov	r0, r5
 800b882:	6d5e      	ldr	r6, [r3, #84]	@ 0x54
 800b884:	6e1d      	ldr	r5, [r3, #96]	@ 0x60
 800b886:	f7ff ff23 	bl	800b6d0 <rcl_node_get_rmw_handle>
 800b88a:	b1c8      	cbz	r0, 800b8c0 <rcl_publisher_fini+0x54>
 800b88c:	6823      	ldr	r3, [r4, #0]
 800b88e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800b892:	f002 fdeb 	bl	800e46c <rmw_destroy_publisher>
 800b896:	4603      	mov	r3, r0
 800b898:	4629      	mov	r1, r5
 800b89a:	6820      	ldr	r0, [r4, #0]
 800b89c:	1e1d      	subs	r5, r3, #0
 800b89e:	bf18      	it	ne
 800b8a0:	2501      	movne	r5, #1
 800b8a2:	47b0      	blx	r6
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	6023      	str	r3, [r4, #0]
 800b8a8:	4628      	mov	r0, r5
 800b8aa:	bd70      	pop	{r4, r5, r6, pc}
 800b8ac:	461d      	mov	r5, r3
 800b8ae:	4628      	mov	r0, r5
 800b8b0:	bd70      	pop	{r4, r5, r6, pc}
 800b8b2:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 800b8b6:	4628      	mov	r0, r5
 800b8b8:	bd70      	pop	{r4, r5, r6, pc}
 800b8ba:	25c8      	movs	r5, #200	@ 0xc8
 800b8bc:	4628      	mov	r0, r5
 800b8be:	bd70      	pop	{r4, r5, r6, pc}
 800b8c0:	250b      	movs	r5, #11
 800b8c2:	e7f1      	b.n	800b8a8 <rcl_publisher_fini+0x3c>

0800b8c4 <rcl_publisher_get_default_options>:
 800b8c4:	b570      	push	{r4, r5, r6, lr}
 800b8c6:	4d14      	ldr	r5, [pc, #80]	@ (800b918 <rcl_publisher_get_default_options+0x54>)
 800b8c8:	4914      	ldr	r1, [pc, #80]	@ (800b91c <rcl_publisher_get_default_options+0x58>)
 800b8ca:	b088      	sub	sp, #32
 800b8cc:	4604      	mov	r4, r0
 800b8ce:	2250      	movs	r2, #80	@ 0x50
 800b8d0:	4628      	mov	r0, r5
 800b8d2:	f00d f972 	bl	8018bba <memcpy>
 800b8d6:	a802      	add	r0, sp, #8
 800b8d8:	f001 fc58 	bl	800d18c <rcutils_get_default_allocator>
 800b8dc:	f10d 0c08 	add.w	ip, sp, #8
 800b8e0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b8e4:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800b8e8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b8ec:	466e      	mov	r6, sp
 800b8ee:	f8dc 3000 	ldr.w	r3, [ip]
 800b8f2:	f8ce 3000 	str.w	r3, [lr]
 800b8f6:	4630      	mov	r0, r6
 800b8f8:	f001 ff0a 	bl	800d710 <rmw_get_default_publisher_options>
 800b8fc:	e896 0003 	ldmia.w	r6, {r0, r1}
 800b900:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800b904:	e883 0003 	stmia.w	r3, {r0, r1}
 800b908:	2270      	movs	r2, #112	@ 0x70
 800b90a:	4629      	mov	r1, r5
 800b90c:	4620      	mov	r0, r4
 800b90e:	f00d f954 	bl	8018bba <memcpy>
 800b912:	4620      	mov	r0, r4
 800b914:	b008      	add	sp, #32
 800b916:	bd70      	pop	{r4, r5, r6, pc}
 800b918:	2000c458 	.word	0x2000c458
 800b91c:	08019fe0 	.word	0x08019fe0

0800b920 <rcl_publish>:
 800b920:	b1f8      	cbz	r0, 800b962 <rcl_publish+0x42>
 800b922:	6803      	ldr	r3, [r0, #0]
 800b924:	b570      	push	{r4, r5, r6, lr}
 800b926:	4604      	mov	r4, r0
 800b928:	b1b3      	cbz	r3, 800b958 <rcl_publish+0x38>
 800b92a:	4616      	mov	r6, r2
 800b92c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800b930:	b192      	cbz	r2, 800b958 <rcl_publish+0x38>
 800b932:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800b936:	460d      	mov	r5, r1
 800b938:	f7ff fba0 	bl	800b07c <rcl_context_is_valid>
 800b93c:	b160      	cbz	r0, 800b958 <rcl_publish+0x38>
 800b93e:	6823      	ldr	r3, [r4, #0]
 800b940:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800b944:	b140      	cbz	r0, 800b958 <rcl_publish+0x38>
 800b946:	b155      	cbz	r5, 800b95e <rcl_publish+0x3e>
 800b948:	4632      	mov	r2, r6
 800b94a:	4629      	mov	r1, r5
 800b94c:	f002 fc40 	bl	800e1d0 <rmw_publish>
 800b950:	3800      	subs	r0, #0
 800b952:	bf18      	it	ne
 800b954:	2001      	movne	r0, #1
 800b956:	bd70      	pop	{r4, r5, r6, pc}
 800b958:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800b95c:	bd70      	pop	{r4, r5, r6, pc}
 800b95e:	200b      	movs	r0, #11
 800b960:	bd70      	pop	{r4, r5, r6, pc}
 800b962:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800b966:	4770      	bx	lr

0800b968 <rcl_publisher_get_rmw_handle>:
 800b968:	b118      	cbz	r0, 800b972 <rcl_publisher_get_rmw_handle+0xa>
 800b96a:	6800      	ldr	r0, [r0, #0]
 800b96c:	b108      	cbz	r0, 800b972 <rcl_publisher_get_rmw_handle+0xa>
 800b96e:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800b972:	4770      	bx	lr

0800b974 <rcl_publisher_is_valid>:
 800b974:	b1a0      	cbz	r0, 800b9a0 <rcl_publisher_is_valid+0x2c>
 800b976:	6803      	ldr	r3, [r0, #0]
 800b978:	b510      	push	{r4, lr}
 800b97a:	4604      	mov	r4, r0
 800b97c:	b173      	cbz	r3, 800b99c <rcl_publisher_is_valid+0x28>
 800b97e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800b982:	b15a      	cbz	r2, 800b99c <rcl_publisher_is_valid+0x28>
 800b984:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800b988:	f7ff fb78 	bl	800b07c <rcl_context_is_valid>
 800b98c:	b130      	cbz	r0, 800b99c <rcl_publisher_is_valid+0x28>
 800b98e:	6823      	ldr	r3, [r4, #0]
 800b990:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800b994:	3800      	subs	r0, #0
 800b996:	bf18      	it	ne
 800b998:	2001      	movne	r0, #1
 800b99a:	bd10      	pop	{r4, pc}
 800b99c:	2000      	movs	r0, #0
 800b99e:	bd10      	pop	{r4, pc}
 800b9a0:	2000      	movs	r0, #0
 800b9a2:	4770      	bx	lr

0800b9a4 <rcl_publisher_is_valid_except_context>:
 800b9a4:	b130      	cbz	r0, 800b9b4 <rcl_publisher_is_valid_except_context+0x10>
 800b9a6:	6800      	ldr	r0, [r0, #0]
 800b9a8:	b120      	cbz	r0, 800b9b4 <rcl_publisher_is_valid_except_context+0x10>
 800b9aa:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800b9ae:	3800      	subs	r0, #0
 800b9b0:	bf18      	it	ne
 800b9b2:	2001      	movne	r0, #1
 800b9b4:	4770      	bx	lr
 800b9b6:	bf00      	nop

0800b9b8 <rcl_get_zero_initialized_subscription>:
 800b9b8:	4b01      	ldr	r3, [pc, #4]	@ (800b9c0 <rcl_get_zero_initialized_subscription+0x8>)
 800b9ba:	6818      	ldr	r0, [r3, #0]
 800b9bc:	4770      	bx	lr
 800b9be:	bf00      	nop
 800b9c0:	0801a030 	.word	0x0801a030

0800b9c4 <rcl_subscription_init>:
 800b9c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b9c8:	b089      	sub	sp, #36	@ 0x24
 800b9ca:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800b9cc:	b1d6      	cbz	r6, 800ba04 <rcl_subscription_init+0x40>
 800b9ce:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 800b9d2:	4604      	mov	r4, r0
 800b9d4:	4648      	mov	r0, r9
 800b9d6:	460d      	mov	r5, r1
 800b9d8:	4690      	mov	r8, r2
 800b9da:	461f      	mov	r7, r3
 800b9dc:	f001 fbe4 	bl	800d1a8 <rcutils_allocator_is_valid>
 800b9e0:	b180      	cbz	r0, 800ba04 <rcl_subscription_init+0x40>
 800b9e2:	b17c      	cbz	r4, 800ba04 <rcl_subscription_init+0x40>
 800b9e4:	4628      	mov	r0, r5
 800b9e6:	f7ff fe51 	bl	800b68c <rcl_node_is_valid>
 800b9ea:	2800      	cmp	r0, #0
 800b9ec:	d054      	beq.n	800ba98 <rcl_subscription_init+0xd4>
 800b9ee:	f1b8 0f00 	cmp.w	r8, #0
 800b9f2:	d007      	beq.n	800ba04 <rcl_subscription_init+0x40>
 800b9f4:	b137      	cbz	r7, 800ba04 <rcl_subscription_init+0x40>
 800b9f6:	6823      	ldr	r3, [r4, #0]
 800b9f8:	b14b      	cbz	r3, 800ba0e <rcl_subscription_init+0x4a>
 800b9fa:	2764      	movs	r7, #100	@ 0x64
 800b9fc:	4638      	mov	r0, r7
 800b9fe:	b009      	add	sp, #36	@ 0x24
 800ba00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba04:	270b      	movs	r7, #11
 800ba06:	4638      	mov	r0, r7
 800ba08:	b009      	add	sp, #36	@ 0x24
 800ba0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba0e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800ba12:	aa07      	add	r2, sp, #28
 800ba14:	9205      	str	r2, [sp, #20]
 800ba16:	9307      	str	r3, [sp, #28]
 800ba18:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 800ba1c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ba20:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ba24:	4639      	mov	r1, r7
 800ba26:	e899 000c 	ldmia.w	r9, {r2, r3}
 800ba2a:	4628      	mov	r0, r5
 800ba2c:	f008 fcc6 	bl	80143bc <rcl_node_resolve_name>
 800ba30:	4607      	mov	r7, r0
 800ba32:	2800      	cmp	r0, #0
 800ba34:	d15f      	bne.n	800baf6 <rcl_subscription_init+0x132>
 800ba36:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 800ba3a:	21c8      	movs	r1, #200	@ 0xc8
 800ba3c:	2001      	movs	r0, #1
 800ba3e:	4798      	blx	r3
 800ba40:	6020      	str	r0, [r4, #0]
 800ba42:	2800      	cmp	r0, #0
 800ba44:	d05d      	beq.n	800bb02 <rcl_subscription_init+0x13e>
 800ba46:	4628      	mov	r0, r5
 800ba48:	f7ff fe42 	bl	800b6d0 <rcl_node_get_rmw_handle>
 800ba4c:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 800ba50:	9300      	str	r3, [sp, #0]
 800ba52:	9a07      	ldr	r2, [sp, #28]
 800ba54:	6827      	ldr	r7, [r4, #0]
 800ba56:	4641      	mov	r1, r8
 800ba58:	4633      	mov	r3, r6
 800ba5a:	f002 fd9d 	bl	800e598 <rmw_create_subscription>
 800ba5e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 800ba62:	6827      	ldr	r7, [r4, #0]
 800ba64:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 800ba68:	b348      	cbz	r0, 800babe <rcl_subscription_init+0xfa>
 800ba6a:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 800ba6e:	f002 fe75 	bl	800e75c <rmw_subscription_get_actual_qos>
 800ba72:	4607      	mov	r7, r0
 800ba74:	b9a8      	cbnz	r0, 800baa2 <rcl_subscription_init+0xde>
 800ba76:	6820      	ldr	r0, [r4, #0]
 800ba78:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800ba7c:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 800ba80:	2270      	movs	r2, #112	@ 0x70
 800ba82:	4631      	mov	r1, r6
 800ba84:	f00d f899 	bl	8018bba <memcpy>
 800ba88:	9807      	ldr	r0, [sp, #28]
 800ba8a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800ba8c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800ba8e:	4798      	blx	r3
 800ba90:	4638      	mov	r0, r7
 800ba92:	b009      	add	sp, #36	@ 0x24
 800ba94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba98:	27c8      	movs	r7, #200	@ 0xc8
 800ba9a:	4638      	mov	r0, r7
 800ba9c:	b009      	add	sp, #36	@ 0x24
 800ba9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800baa2:	6827      	ldr	r7, [r4, #0]
 800baa4:	b32f      	cbz	r7, 800baf2 <rcl_subscription_init+0x12e>
 800baa6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800baaa:	b14b      	cbz	r3, 800bac0 <rcl_subscription_init+0xfc>
 800baac:	4628      	mov	r0, r5
 800baae:	f7ff fe0f 	bl	800b6d0 <rcl_node_get_rmw_handle>
 800bab2:	6823      	ldr	r3, [r4, #0]
 800bab4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800bab8:	f002 fe60 	bl	800e77c <rmw_destroy_subscription>
 800babc:	6827      	ldr	r7, [r4, #0]
 800babe:	b197      	cbz	r7, 800bae6 <rcl_subscription_init+0x122>
 800bac0:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 800bac4:	4628      	mov	r0, r5
 800bac6:	f001 fb6f 	bl	800d1a8 <rcutils_allocator_is_valid>
 800baca:	b158      	cbz	r0, 800bae4 <rcl_subscription_init+0x120>
 800bacc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bace:	b148      	cbz	r0, 800bae4 <rcl_subscription_init+0x120>
 800bad0:	4629      	mov	r1, r5
 800bad2:	f001 fe25 	bl	800d720 <rmw_subscription_content_filter_options_fini>
 800bad6:	4605      	mov	r5, r0
 800bad8:	b9b8      	cbnz	r0, 800bb0a <rcl_subscription_init+0x146>
 800bada:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800badc:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800bade:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bae0:	4798      	blx	r3
 800bae2:	66fd      	str	r5, [r7, #108]	@ 0x6c
 800bae4:	6827      	ldr	r7, [r4, #0]
 800bae6:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800bae8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800baea:	4638      	mov	r0, r7
 800baec:	4798      	blx	r3
 800baee:	2300      	movs	r3, #0
 800baf0:	6023      	str	r3, [r4, #0]
 800baf2:	2701      	movs	r7, #1
 800baf4:	e7c8      	b.n	800ba88 <rcl_subscription_init+0xc4>
 800baf6:	2867      	cmp	r0, #103	@ 0x67
 800baf8:	d0c6      	beq.n	800ba88 <rcl_subscription_init+0xc4>
 800bafa:	2869      	cmp	r0, #105	@ 0x69
 800bafc:	d003      	beq.n	800bb06 <rcl_subscription_init+0x142>
 800bafe:	280a      	cmp	r0, #10
 800bb00:	d1f7      	bne.n	800baf2 <rcl_subscription_init+0x12e>
 800bb02:	270a      	movs	r7, #10
 800bb04:	e7c0      	b.n	800ba88 <rcl_subscription_init+0xc4>
 800bb06:	2767      	movs	r7, #103	@ 0x67
 800bb08:	e7be      	b.n	800ba88 <rcl_subscription_init+0xc4>
 800bb0a:	f008 fa07 	bl	8013f1c <rcl_convert_rmw_ret_to_rcl_ret>
 800bb0e:	6827      	ldr	r7, [r4, #0]
 800bb10:	e7e9      	b.n	800bae6 <rcl_subscription_init+0x122>
 800bb12:	bf00      	nop

0800bb14 <rcl_subscription_fini>:
 800bb14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb18:	2800      	cmp	r0, #0
 800bb1a:	d039      	beq.n	800bb90 <rcl_subscription_fini+0x7c>
 800bb1c:	4604      	mov	r4, r0
 800bb1e:	4608      	mov	r0, r1
 800bb20:	460d      	mov	r5, r1
 800bb22:	f7ff fdab 	bl	800b67c <rcl_node_is_valid_except_context>
 800bb26:	2800      	cmp	r0, #0
 800bb28:	d037      	beq.n	800bb9a <rcl_subscription_fini+0x86>
 800bb2a:	6823      	ldr	r3, [r4, #0]
 800bb2c:	b363      	cbz	r3, 800bb88 <rcl_subscription_fini+0x74>
 800bb2e:	4628      	mov	r0, r5
 800bb30:	6d5f      	ldr	r7, [r3, #84]	@ 0x54
 800bb32:	f8d3 8060 	ldr.w	r8, [r3, #96]	@ 0x60
 800bb36:	f7ff fdcb 	bl	800b6d0 <rcl_node_get_rmw_handle>
 800bb3a:	b390      	cbz	r0, 800bba2 <rcl_subscription_fini+0x8e>
 800bb3c:	6823      	ldr	r3, [r4, #0]
 800bb3e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800bb42:	f002 fe1b 	bl	800e77c <rmw_destroy_subscription>
 800bb46:	6826      	ldr	r6, [r4, #0]
 800bb48:	1e05      	subs	r5, r0, #0
 800bb4a:	bf18      	it	ne
 800bb4c:	2501      	movne	r5, #1
 800bb4e:	b37e      	cbz	r6, 800bbb0 <rcl_subscription_fini+0x9c>
 800bb50:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 800bb54:	4648      	mov	r0, r9
 800bb56:	f001 fb27 	bl	800d1a8 <rcutils_allocator_is_valid>
 800bb5a:	b358      	cbz	r0, 800bbb4 <rcl_subscription_fini+0xa0>
 800bb5c:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 800bb5e:	b150      	cbz	r0, 800bb76 <rcl_subscription_fini+0x62>
 800bb60:	4649      	mov	r1, r9
 800bb62:	f001 fddd 	bl	800d720 <rmw_subscription_content_filter_options_fini>
 800bb66:	4681      	mov	r9, r0
 800bb68:	b9e8      	cbnz	r0, 800bba6 <rcl_subscription_fini+0x92>
 800bb6a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800bb6c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800bb6e:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 800bb70:	4798      	blx	r3
 800bb72:	f8c6 906c 	str.w	r9, [r6, #108]	@ 0x6c
 800bb76:	6826      	ldr	r6, [r4, #0]
 800bb78:	4630      	mov	r0, r6
 800bb7a:	4641      	mov	r1, r8
 800bb7c:	47b8      	blx	r7
 800bb7e:	2300      	movs	r3, #0
 800bb80:	6023      	str	r3, [r4, #0]
 800bb82:	4628      	mov	r0, r5
 800bb84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb88:	461d      	mov	r5, r3
 800bb8a:	4628      	mov	r0, r5
 800bb8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb90:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 800bb94:	4628      	mov	r0, r5
 800bb96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb9a:	25c8      	movs	r5, #200	@ 0xc8
 800bb9c:	4628      	mov	r0, r5
 800bb9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bba2:	250b      	movs	r5, #11
 800bba4:	e7f1      	b.n	800bb8a <rcl_subscription_fini+0x76>
 800bba6:	f008 f9b9 	bl	8013f1c <rcl_convert_rmw_ret_to_rcl_ret>
 800bbaa:	6826      	ldr	r6, [r4, #0]
 800bbac:	2800      	cmp	r0, #0
 800bbae:	d0e3      	beq.n	800bb78 <rcl_subscription_fini+0x64>
 800bbb0:	2501      	movs	r5, #1
 800bbb2:	e7e1      	b.n	800bb78 <rcl_subscription_fini+0x64>
 800bbb4:	6826      	ldr	r6, [r4, #0]
 800bbb6:	2501      	movs	r5, #1
 800bbb8:	e7de      	b.n	800bb78 <rcl_subscription_fini+0x64>
 800bbba:	bf00      	nop

0800bbbc <rcl_subscription_get_default_options>:
 800bbbc:	b570      	push	{r4, r5, r6, lr}
 800bbbe:	4d14      	ldr	r5, [pc, #80]	@ (800bc10 <rcl_subscription_get_default_options+0x54>)
 800bbc0:	4914      	ldr	r1, [pc, #80]	@ (800bc14 <rcl_subscription_get_default_options+0x58>)
 800bbc2:	b08a      	sub	sp, #40	@ 0x28
 800bbc4:	4604      	mov	r4, r0
 800bbc6:	2250      	movs	r2, #80	@ 0x50
 800bbc8:	4628      	mov	r0, r5
 800bbca:	f00c fff6 	bl	8018bba <memcpy>
 800bbce:	a804      	add	r0, sp, #16
 800bbd0:	f001 fadc 	bl	800d18c <rcutils_get_default_allocator>
 800bbd4:	f10d 0c10 	add.w	ip, sp, #16
 800bbd8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bbdc:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800bbe0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bbe4:	466e      	mov	r6, sp
 800bbe6:	f8dc 3000 	ldr.w	r3, [ip]
 800bbea:	f8ce 3000 	str.w	r3, [lr]
 800bbee:	4630      	mov	r0, r6
 800bbf0:	f001 fdb0 	bl	800d754 <rmw_get_default_subscription_options>
 800bbf4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800bbf8:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800bbfc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bc00:	2270      	movs	r2, #112	@ 0x70
 800bc02:	4629      	mov	r1, r5
 800bc04:	4620      	mov	r0, r4
 800bc06:	f00c ffd8 	bl	8018bba <memcpy>
 800bc0a:	4620      	mov	r0, r4
 800bc0c:	b00a      	add	sp, #40	@ 0x28
 800bc0e:	bd70      	pop	{r4, r5, r6, pc}
 800bc10:	2000c4c8 	.word	0x2000c4c8
 800bc14:	0801a038 	.word	0x0801a038

0800bc18 <rcl_take>:
 800bc18:	2800      	cmp	r0, #0
 800bc1a:	d04a      	beq.n	800bcb2 <rcl_take+0x9a>
 800bc1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc20:	4604      	mov	r4, r0
 800bc22:	6800      	ldr	r0, [r0, #0]
 800bc24:	b0a4      	sub	sp, #144	@ 0x90
 800bc26:	2800      	cmp	r0, #0
 800bc28:	d03b      	beq.n	800bca2 <rcl_take+0x8a>
 800bc2a:	461f      	mov	r7, r3
 800bc2c:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d036      	beq.n	800bca2 <rcl_take+0x8a>
 800bc34:	460e      	mov	r6, r1
 800bc36:	2900      	cmp	r1, #0
 800bc38:	d039      	beq.n	800bcae <rcl_take+0x96>
 800bc3a:	4615      	mov	r5, r2
 800bc3c:	2a00      	cmp	r2, #0
 800bc3e:	d03c      	beq.n	800bcba <rcl_take+0xa2>
 800bc40:	a802      	add	r0, sp, #8
 800bc42:	f001 fd8d 	bl	800d760 <rmw_get_zero_initialized_message_info>
 800bc46:	f10d 0c08 	add.w	ip, sp, #8
 800bc4a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bc4e:	46ae      	mov	lr, r5
 800bc50:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bc54:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bc58:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bc5c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bc60:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bc64:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800bc68:	f04f 0800 	mov.w	r8, #0
 800bc6c:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 800bc70:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 800bc74:	6822      	ldr	r2, [r4, #0]
 800bc76:	462b      	mov	r3, r5
 800bc78:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 800bc7c:	9700      	str	r7, [sp, #0]
 800bc7e:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 800bc82:	4631      	mov	r1, r6
 800bc84:	f002 fdda 	bl	800e83c <rmw_take_with_info>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	b9c0      	cbnz	r0, 800bcbe <rcl_take+0xa6>
 800bc8c:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 800bc90:	f240 1291 	movw	r2, #401	@ 0x191
 800bc94:	2900      	cmp	r1, #0
 800bc96:	bf08      	it	eq
 800bc98:	4613      	moveq	r3, r2
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	b024      	add	sp, #144	@ 0x90
 800bc9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bca2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800bca6:	4618      	mov	r0, r3
 800bca8:	b024      	add	sp, #144	@ 0x90
 800bcaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcae:	230b      	movs	r3, #11
 800bcb0:	e7f3      	b.n	800bc9a <rcl_take+0x82>
 800bcb2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	4770      	bx	lr
 800bcba:	ad14      	add	r5, sp, #80	@ 0x50
 800bcbc:	e7c0      	b.n	800bc40 <rcl_take+0x28>
 800bcbe:	f008 f92d 	bl	8013f1c <rcl_convert_rmw_ret_to_rcl_ret>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	e7e9      	b.n	800bc9a <rcl_take+0x82>
 800bcc6:	bf00      	nop

0800bcc8 <rcl_subscription_get_rmw_handle>:
 800bcc8:	b118      	cbz	r0, 800bcd2 <rcl_subscription_get_rmw_handle+0xa>
 800bcca:	6800      	ldr	r0, [r0, #0]
 800bccc:	b108      	cbz	r0, 800bcd2 <rcl_subscription_get_rmw_handle+0xa>
 800bcce:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800bcd2:	4770      	bx	lr

0800bcd4 <rcl_subscription_is_valid>:
 800bcd4:	b130      	cbz	r0, 800bce4 <rcl_subscription_is_valid+0x10>
 800bcd6:	6800      	ldr	r0, [r0, #0]
 800bcd8:	b120      	cbz	r0, 800bce4 <rcl_subscription_is_valid+0x10>
 800bcda:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800bcde:	3800      	subs	r0, #0
 800bce0:	bf18      	it	ne
 800bce2:	2001      	movne	r0, #1
 800bce4:	4770      	bx	lr
 800bce6:	bf00      	nop

0800bce8 <_rcl_timer_time_jump>:
 800bce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcec:	4605      	mov	r5, r0
 800bcee:	b084      	sub	sp, #16
 800bcf0:	4614      	mov	r4, r2
 800bcf2:	b131      	cbz	r1, 800bd02 <_rcl_timer_time_jump+0x1a>
 800bcf4:	7803      	ldrb	r3, [r0, #0]
 800bcf6:	3b02      	subs	r3, #2
 800bcf8:	2b01      	cmp	r3, #1
 800bcfa:	d93f      	bls.n	800bd7c <_rcl_timer_time_jump+0x94>
 800bcfc:	b004      	add	sp, #16
 800bcfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd02:	6813      	ldr	r3, [r2, #0]
 800bd04:	a902      	add	r1, sp, #8
 800bd06:	6818      	ldr	r0, [r3, #0]
 800bd08:	f008 fd2a 	bl	8014760 <rcl_clock_get_now>
 800bd0c:	2800      	cmp	r0, #0
 800bd0e:	d1f5      	bne.n	800bcfc <_rcl_timer_time_jump+0x14>
 800bd10:	6820      	ldr	r0, [r4, #0]
 800bd12:	2105      	movs	r1, #5
 800bd14:	3020      	adds	r0, #32
 800bd16:	f001 fa55 	bl	800d1c4 <__atomic_load_8>
 800bd1a:	6823      	ldr	r3, [r4, #0]
 800bd1c:	4681      	mov	r9, r0
 800bd1e:	4688      	mov	r8, r1
 800bd20:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800bd24:	2105      	movs	r1, #5
 800bd26:	f001 fa4d 	bl	800d1c4 <__atomic_load_8>
 800bd2a:	4607      	mov	r7, r0
 800bd2c:	6820      	ldr	r0, [r4, #0]
 800bd2e:	460e      	mov	r6, r1
 800bd30:	3018      	adds	r0, #24
 800bd32:	2105      	movs	r1, #5
 800bd34:	f001 fa46 	bl	800d1c4 <__atomic_load_8>
 800bd38:	782b      	ldrb	r3, [r5, #0]
 800bd3a:	9a02      	ldr	r2, [sp, #8]
 800bd3c:	3b02      	subs	r3, #2
 800bd3e:	2b01      	cmp	r3, #1
 800bd40:	460d      	mov	r5, r1
 800bd42:	9b03      	ldr	r3, [sp, #12]
 800bd44:	4682      	mov	sl, r0
 800bd46:	d937      	bls.n	800bdb8 <_rcl_timer_time_jump+0xd0>
 800bd48:	42ba      	cmp	r2, r7
 800bd4a:	eb73 0106 	sbcs.w	r1, r3, r6
 800bd4e:	da5f      	bge.n	800be10 <_rcl_timer_time_jump+0x128>
 800bd50:	454a      	cmp	r2, r9
 800bd52:	eb73 0108 	sbcs.w	r1, r3, r8
 800bd56:	dad1      	bge.n	800bcfc <_rcl_timer_time_jump+0x14>
 800bd58:	6820      	ldr	r0, [r4, #0]
 800bd5a:	eb1a 0202 	adds.w	r2, sl, r2
 800bd5e:	eb43 0305 	adc.w	r3, r3, r5
 800bd62:	2505      	movs	r5, #5
 800bd64:	3028      	adds	r0, #40	@ 0x28
 800bd66:	9500      	str	r5, [sp, #0]
 800bd68:	f001 fa62 	bl	800d230 <__atomic_store_8>
 800bd6c:	6820      	ldr	r0, [r4, #0]
 800bd6e:	9500      	str	r5, [sp, #0]
 800bd70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd74:	3020      	adds	r0, #32
 800bd76:	f001 fa5b 	bl	800d230 <__atomic_store_8>
 800bd7a:	e7bf      	b.n	800bcfc <_rcl_timer_time_jump+0x14>
 800bd7c:	6813      	ldr	r3, [r2, #0]
 800bd7e:	a902      	add	r1, sp, #8
 800bd80:	6818      	ldr	r0, [r3, #0]
 800bd82:	f008 fced 	bl	8014760 <rcl_clock_get_now>
 800bd86:	2800      	cmp	r0, #0
 800bd88:	d1b8      	bne.n	800bcfc <_rcl_timer_time_jump+0x14>
 800bd8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd8e:	4313      	orrs	r3, r2
 800bd90:	d0b4      	beq.n	800bcfc <_rcl_timer_time_jump+0x14>
 800bd92:	6820      	ldr	r0, [r4, #0]
 800bd94:	2105      	movs	r1, #5
 800bd96:	3028      	adds	r0, #40	@ 0x28
 800bd98:	f001 fa14 	bl	800d1c4 <__atomic_load_8>
 800bd9c:	9d02      	ldr	r5, [sp, #8]
 800bd9e:	9b03      	ldr	r3, [sp, #12]
 800bda0:	4602      	mov	r2, r0
 800bda2:	6820      	ldr	r0, [r4, #0]
 800bda4:	1b52      	subs	r2, r2, r5
 800bda6:	f04f 0405 	mov.w	r4, #5
 800bdaa:	9400      	str	r4, [sp, #0]
 800bdac:	eb61 0303 	sbc.w	r3, r1, r3
 800bdb0:	3030      	adds	r0, #48	@ 0x30
 800bdb2:	f001 fa3d 	bl	800d230 <__atomic_store_8>
 800bdb6:	e7a1      	b.n	800bcfc <_rcl_timer_time_jump+0x14>
 800bdb8:	4313      	orrs	r3, r2
 800bdba:	d09f      	beq.n	800bcfc <_rcl_timer_time_jump+0x14>
 800bdbc:	6820      	ldr	r0, [r4, #0]
 800bdbe:	f04f 0805 	mov.w	r8, #5
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	f8cd 8000 	str.w	r8, [sp]
 800bdc8:	3030      	adds	r0, #48	@ 0x30
 800bdca:	2200      	movs	r2, #0
 800bdcc:	f001 fa66 	bl	800d29c <__atomic_exchange_8>
 800bdd0:	ea51 0300 	orrs.w	r3, r1, r0
 800bdd4:	4606      	mov	r6, r0
 800bdd6:	460f      	mov	r7, r1
 800bdd8:	d090      	beq.n	800bcfc <_rcl_timer_time_jump+0x14>
 800bdda:	9a02      	ldr	r2, [sp, #8]
 800bddc:	9b03      	ldr	r3, [sp, #12]
 800bdde:	f8cd 8000 	str.w	r8, [sp]
 800bde2:	1a12      	subs	r2, r2, r0
 800bde4:	6820      	ldr	r0, [r4, #0]
 800bde6:	eb63 0301 	sbc.w	r3, r3, r1
 800bdea:	eb12 020a 	adds.w	r2, r2, sl
 800bdee:	eb43 0305 	adc.w	r3, r3, r5
 800bdf2:	3028      	adds	r0, #40	@ 0x28
 800bdf4:	f001 fa1c 	bl	800d230 <__atomic_store_8>
 800bdf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bdfc:	f8cd 8000 	str.w	r8, [sp]
 800be00:	6820      	ldr	r0, [r4, #0]
 800be02:	1b92      	subs	r2, r2, r6
 800be04:	eb63 0307 	sbc.w	r3, r3, r7
 800be08:	3020      	adds	r0, #32
 800be0a:	f001 fa11 	bl	800d230 <__atomic_store_8>
 800be0e:	e775      	b.n	800bcfc <_rcl_timer_time_jump+0x14>
 800be10:	6820      	ldr	r0, [r4, #0]
 800be12:	3008      	adds	r0, #8
 800be14:	f008 f98e 	bl	8014134 <rcl_trigger_guard_condition>
 800be18:	e770      	b.n	800bcfc <_rcl_timer_time_jump+0x14>
 800be1a:	bf00      	nop

0800be1c <rcl_get_zero_initialized_timer>:
 800be1c:	4b01      	ldr	r3, [pc, #4]	@ (800be24 <rcl_get_zero_initialized_timer+0x8>)
 800be1e:	6818      	ldr	r0, [r3, #0]
 800be20:	4770      	bx	lr
 800be22:	bf00      	nop
 800be24:	0801a088 	.word	0x0801a088

0800be28 <rcl_timer_init>:
 800be28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be2c:	b0aa      	sub	sp, #168	@ 0xa8
 800be2e:	4604      	mov	r4, r0
 800be30:	a835      	add	r0, sp, #212	@ 0xd4
 800be32:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 800be36:	460d      	mov	r5, r1
 800be38:	4692      	mov	sl, r2
 800be3a:	f001 f9b5 	bl	800d1a8 <rcutils_allocator_is_valid>
 800be3e:	2800      	cmp	r0, #0
 800be40:	d064      	beq.n	800bf0c <rcl_timer_init+0xe4>
 800be42:	2c00      	cmp	r4, #0
 800be44:	d062      	beq.n	800bf0c <rcl_timer_init+0xe4>
 800be46:	2d00      	cmp	r5, #0
 800be48:	d060      	beq.n	800bf0c <rcl_timer_init+0xe4>
 800be4a:	2f00      	cmp	r7, #0
 800be4c:	db5e      	blt.n	800bf0c <rcl_timer_init+0xe4>
 800be4e:	6823      	ldr	r3, [r4, #0]
 800be50:	b123      	cbz	r3, 800be5c <rcl_timer_init+0x34>
 800be52:	2664      	movs	r6, #100	@ 0x64
 800be54:	4630      	mov	r0, r6
 800be56:	b02a      	add	sp, #168	@ 0xa8
 800be58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be5c:	a908      	add	r1, sp, #32
 800be5e:	4628      	mov	r0, r5
 800be60:	f008 fc7e 	bl	8014760 <rcl_clock_get_now>
 800be64:	4606      	mov	r6, r0
 800be66:	2800      	cmp	r0, #0
 800be68:	d1f4      	bne.n	800be54 <rcl_timer_init+0x2c>
 800be6a:	ae06      	add	r6, sp, #24
 800be6c:	4630      	mov	r0, r6
 800be6e:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 800be72:	f008 f867 	bl	8013f44 <rcl_get_zero_initialized_guard_condition>
 800be76:	e896 0003 	ldmia.w	r6, {r0, r1}
 800be7a:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 800be7e:	ae0b      	add	r6, sp, #44	@ 0x2c
 800be80:	e889 0003 	stmia.w	r9, {r0, r1}
 800be84:	4630      	mov	r0, r6
 800be86:	f008 f939 	bl	80140fc <rcl_guard_condition_get_default_options>
 800be8a:	ab0d      	add	r3, sp, #52	@ 0x34
 800be8c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800be90:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800be94:	4651      	mov	r1, sl
 800be96:	e896 000c 	ldmia.w	r6, {r2, r3}
 800be9a:	4648      	mov	r0, r9
 800be9c:	f008 f85c 	bl	8013f58 <rcl_guard_condition_init>
 800bea0:	4606      	mov	r6, r0
 800bea2:	2800      	cmp	r0, #0
 800bea4:	d1d6      	bne.n	800be54 <rcl_timer_init+0x2c>
 800bea6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bea8:	781b      	ldrb	r3, [r3, #0]
 800beaa:	2b01      	cmp	r3, #1
 800beac:	d033      	beq.n	800bf16 <rcl_timer_init+0xee>
 800beae:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 800beb0:	911a      	str	r1, [sp, #104]	@ 0x68
 800beb2:	4642      	mov	r2, r8
 800beb4:	463b      	mov	r3, r7
 800beb6:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 800beba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bebe:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800bf70 <rcl_timer_init+0x148>
 800bec2:	eb12 0008 	adds.w	r0, r2, r8
 800bec6:	eb47 0103 	adc.w	r1, r7, r3
 800beca:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 800bece:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 800bed2:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 800bed6:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 800beda:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bede:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 800bee2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bee6:	f8de 3000 	ldr.w	r3, [lr]
 800beea:	f8cc 3000 	str.w	r3, [ip]
 800beee:	f04f 0a00 	mov.w	sl, #0
 800bef2:	4619      	mov	r1, r3
 800bef4:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 800bef8:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800befa:	2050      	movs	r0, #80	@ 0x50
 800befc:	4798      	blx	r3
 800befe:	6020      	str	r0, [r4, #0]
 800bf00:	b358      	cbz	r0, 800bf5a <rcl_timer_init+0x132>
 800bf02:	2250      	movs	r2, #80	@ 0x50
 800bf04:	a916      	add	r1, sp, #88	@ 0x58
 800bf06:	f00c fe58 	bl	8018bba <memcpy>
 800bf0a:	e7a3      	b.n	800be54 <rcl_timer_init+0x2c>
 800bf0c:	260b      	movs	r6, #11
 800bf0e:	4630      	mov	r0, r6
 800bf10:	b02a      	add	sp, #168	@ 0xa8
 800bf12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf16:	2001      	movs	r0, #1
 800bf18:	2100      	movs	r1, #0
 800bf1a:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 800bf1e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bf22:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800bf26:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 800bf2a:	4a13      	ldr	r2, [pc, #76]	@ (800bf78 <rcl_timer_init+0x150>)
 800bf2c:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800bf30:	9405      	str	r4, [sp, #20]
 800bf32:	9204      	str	r2, [sp, #16]
 800bf34:	ab12      	add	r3, sp, #72	@ 0x48
 800bf36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bf38:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800bf3c:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 800bf40:	e89c 000c 	ldmia.w	ip, {r2, r3}
 800bf44:	4628      	mov	r0, r5
 800bf46:	f008 fc17 	bl	8014778 <rcl_clock_add_jump_callback>
 800bf4a:	4682      	mov	sl, r0
 800bf4c:	2800      	cmp	r0, #0
 800bf4e:	d0ae      	beq.n	800beae <rcl_timer_init+0x86>
 800bf50:	4648      	mov	r0, r9
 800bf52:	f008 f8ad 	bl	80140b0 <rcl_guard_condition_fini>
 800bf56:	4656      	mov	r6, sl
 800bf58:	e77c      	b.n	800be54 <rcl_timer_init+0x2c>
 800bf5a:	4648      	mov	r0, r9
 800bf5c:	f008 f8a8 	bl	80140b0 <rcl_guard_condition_fini>
 800bf60:	4905      	ldr	r1, [pc, #20]	@ (800bf78 <rcl_timer_init+0x150>)
 800bf62:	4622      	mov	r2, r4
 800bf64:	4628      	mov	r0, r5
 800bf66:	f008 fc69 	bl	801483c <rcl_clock_remove_jump_callback>
 800bf6a:	260a      	movs	r6, #10
 800bf6c:	e772      	b.n	800be54 <rcl_timer_init+0x2c>
 800bf6e:	bf00      	nop
	...
 800bf78:	0800bce9 	.word	0x0800bce9

0800bf7c <rcl_timer_fini>:
 800bf7c:	b310      	cbz	r0, 800bfc4 <rcl_timer_fini+0x48>
 800bf7e:	6803      	ldr	r3, [r0, #0]
 800bf80:	b570      	push	{r4, r5, r6, lr}
 800bf82:	4604      	mov	r4, r0
 800bf84:	b1b3      	cbz	r3, 800bfb4 <rcl_timer_fini+0x38>
 800bf86:	f3bf 8f5b 	dmb	ish
 800bf8a:	2201      	movs	r2, #1
 800bf8c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800bf90:	f3bf 8f5b 	dmb	ish
 800bf94:	6803      	ldr	r3, [r0, #0]
 800bf96:	6818      	ldr	r0, [r3, #0]
 800bf98:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 800bf9a:	7802      	ldrb	r2, [r0, #0]
 800bf9c:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 800bf9e:	2a01      	cmp	r2, #1
 800bfa0:	d00a      	beq.n	800bfb8 <rcl_timer_fini+0x3c>
 800bfa2:	f103 0008 	add.w	r0, r3, #8
 800bfa6:	f008 f883 	bl	80140b0 <rcl_guard_condition_fini>
 800bfaa:	6820      	ldr	r0, [r4, #0]
 800bfac:	4631      	mov	r1, r6
 800bfae:	47a8      	blx	r5
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	6023      	str	r3, [r4, #0]
 800bfb4:	2000      	movs	r0, #0
 800bfb6:	bd70      	pop	{r4, r5, r6, pc}
 800bfb8:	4903      	ldr	r1, [pc, #12]	@ (800bfc8 <rcl_timer_fini+0x4c>)
 800bfba:	4622      	mov	r2, r4
 800bfbc:	f008 fc3e 	bl	801483c <rcl_clock_remove_jump_callback>
 800bfc0:	6823      	ldr	r3, [r4, #0]
 800bfc2:	e7ee      	b.n	800bfa2 <rcl_timer_fini+0x26>
 800bfc4:	2000      	movs	r0, #0
 800bfc6:	4770      	bx	lr
 800bfc8:	0800bce9 	.word	0x0800bce9

0800bfcc <rcl_timer_call>:
 800bfcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfd0:	b087      	sub	sp, #28
 800bfd2:	2800      	cmp	r0, #0
 800bfd4:	d06d      	beq.n	800c0b2 <rcl_timer_call+0xe6>
 800bfd6:	6803      	ldr	r3, [r0, #0]
 800bfd8:	4604      	mov	r4, r0
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d063      	beq.n	800c0a6 <rcl_timer_call+0xda>
 800bfde:	f3bf 8f5b 	dmb	ish
 800bfe2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800bfe6:	f3bf 8f5b 	dmb	ish
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d150      	bne.n	800c090 <rcl_timer_call+0xc4>
 800bfee:	6803      	ldr	r3, [r0, #0]
 800bff0:	a904      	add	r1, sp, #16
 800bff2:	6818      	ldr	r0, [r3, #0]
 800bff4:	f008 fbb4 	bl	8014760 <rcl_clock_get_now>
 800bff8:	4605      	mov	r5, r0
 800bffa:	2800      	cmp	r0, #0
 800bffc:	d14a      	bne.n	800c094 <rcl_timer_call+0xc8>
 800bffe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c002:	2b00      	cmp	r3, #0
 800c004:	db4a      	blt.n	800c09c <rcl_timer_call+0xd0>
 800c006:	6820      	ldr	r0, [r4, #0]
 800c008:	f04f 0a05 	mov.w	sl, #5
 800c00c:	f8cd a000 	str.w	sl, [sp]
 800c010:	3020      	adds	r0, #32
 800c012:	f001 f943 	bl	800d29c <__atomic_exchange_8>
 800c016:	6823      	ldr	r3, [r4, #0]
 800c018:	f3bf 8f5b 	dmb	ish
 800c01c:	4680      	mov	r8, r0
 800c01e:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800c022:	f3bf 8f5b 	dmb	ish
 800c026:	6820      	ldr	r0, [r4, #0]
 800c028:	4689      	mov	r9, r1
 800c02a:	3028      	adds	r0, #40	@ 0x28
 800c02c:	4651      	mov	r1, sl
 800c02e:	f001 f8c9 	bl	800d1c4 <__atomic_load_8>
 800c032:	4606      	mov	r6, r0
 800c034:	6820      	ldr	r0, [r4, #0]
 800c036:	460f      	mov	r7, r1
 800c038:	3018      	adds	r0, #24
 800c03a:	4651      	mov	r1, sl
 800c03c:	f001 f8c2 	bl	800d1c4 <__atomic_load_8>
 800c040:	1836      	adds	r6, r6, r0
 800c042:	4602      	mov	r2, r0
 800c044:	4682      	mov	sl, r0
 800c046:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 800c04a:	eb47 0701 	adc.w	r7, r7, r1
 800c04e:	4286      	cmp	r6, r0
 800c050:	460b      	mov	r3, r1
 800c052:	eb77 010c 	sbcs.w	r1, r7, ip
 800c056:	da04      	bge.n	800c062 <rcl_timer_call+0x96>
 800c058:	ea53 0102 	orrs.w	r1, r3, r2
 800c05c:	d12e      	bne.n	800c0bc <rcl_timer_call+0xf0>
 800c05e:	4606      	mov	r6, r0
 800c060:	4667      	mov	r7, ip
 800c062:	6820      	ldr	r0, [r4, #0]
 800c064:	2105      	movs	r1, #5
 800c066:	4632      	mov	r2, r6
 800c068:	463b      	mov	r3, r7
 800c06a:	3028      	adds	r0, #40	@ 0x28
 800c06c:	9100      	str	r1, [sp, #0]
 800c06e:	f001 f8df 	bl	800d230 <__atomic_store_8>
 800c072:	f1bb 0f00 	cmp.w	fp, #0
 800c076:	d00d      	beq.n	800c094 <rcl_timer_call+0xc8>
 800c078:	9a04      	ldr	r2, [sp, #16]
 800c07a:	9b05      	ldr	r3, [sp, #20]
 800c07c:	ebb2 0208 	subs.w	r2, r2, r8
 800c080:	4620      	mov	r0, r4
 800c082:	eb63 0309 	sbc.w	r3, r3, r9
 800c086:	47d8      	blx	fp
 800c088:	4628      	mov	r0, r5
 800c08a:	b007      	add	sp, #28
 800c08c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c090:	f240 3521 	movw	r5, #801	@ 0x321
 800c094:	4628      	mov	r0, r5
 800c096:	b007      	add	sp, #28
 800c098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c09c:	2501      	movs	r5, #1
 800c09e:	4628      	mov	r0, r5
 800c0a0:	b007      	add	sp, #28
 800c0a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0a6:	f44f 7548 	mov.w	r5, #800	@ 0x320
 800c0aa:	4628      	mov	r0, r5
 800c0ac:	b007      	add	sp, #28
 800c0ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0b2:	250b      	movs	r5, #11
 800c0b4:	4628      	mov	r0, r5
 800c0b6:	b007      	add	sp, #28
 800c0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0bc:	1b80      	subs	r0, r0, r6
 800c0be:	eb6c 0107 	sbc.w	r1, ip, r7
 800c0c2:	3801      	subs	r0, #1
 800c0c4:	f161 0100 	sbc.w	r1, r1, #0
 800c0c8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800c0cc:	f7f4 fd26 	bl	8000b1c <__aeabi_ldivmod>
 800c0d0:	9b02      	ldr	r3, [sp, #8]
 800c0d2:	3001      	adds	r0, #1
 800c0d4:	f141 0100 	adc.w	r1, r1, #0
 800c0d8:	fb00 f303 	mul.w	r3, r0, r3
 800c0dc:	fb01 330a 	mla	r3, r1, sl, r3
 800c0e0:	fba0 0a0a 	umull	r0, sl, r0, sl
 800c0e4:	1986      	adds	r6, r0, r6
 800c0e6:	4453      	add	r3, sl
 800c0e8:	eb43 0707 	adc.w	r7, r3, r7
 800c0ec:	e7b9      	b.n	800c062 <rcl_timer_call+0x96>
 800c0ee:	bf00      	nop

0800c0f0 <rcl_timer_is_ready>:
 800c0f0:	b570      	push	{r4, r5, r6, lr}
 800c0f2:	b082      	sub	sp, #8
 800c0f4:	b378      	cbz	r0, 800c156 <rcl_timer_is_ready+0x66>
 800c0f6:	6803      	ldr	r3, [r0, #0]
 800c0f8:	4604      	mov	r4, r0
 800c0fa:	b383      	cbz	r3, 800c15e <rcl_timer_is_ready+0x6e>
 800c0fc:	460d      	mov	r5, r1
 800c0fe:	b351      	cbz	r1, 800c156 <rcl_timer_is_ready+0x66>
 800c100:	f3bf 8f5b 	dmb	ish
 800c104:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c108:	f3bf 8f5b 	dmb	ish
 800c10c:	b953      	cbnz	r3, 800c124 <rcl_timer_is_ready+0x34>
 800c10e:	6803      	ldr	r3, [r0, #0]
 800c110:	4669      	mov	r1, sp
 800c112:	6818      	ldr	r0, [r3, #0]
 800c114:	f008 fb24 	bl	8014760 <rcl_clock_get_now>
 800c118:	4606      	mov	r6, r0
 800c11a:	b140      	cbz	r0, 800c12e <rcl_timer_is_ready+0x3e>
 800c11c:	f240 3321 	movw	r3, #801	@ 0x321
 800c120:	4298      	cmp	r0, r3
 800c122:	d101      	bne.n	800c128 <rcl_timer_is_ready+0x38>
 800c124:	2600      	movs	r6, #0
 800c126:	702e      	strb	r6, [r5, #0]
 800c128:	4630      	mov	r0, r6
 800c12a:	b002      	add	sp, #8
 800c12c:	bd70      	pop	{r4, r5, r6, pc}
 800c12e:	6820      	ldr	r0, [r4, #0]
 800c130:	2105      	movs	r1, #5
 800c132:	3028      	adds	r0, #40	@ 0x28
 800c134:	f001 f846 	bl	800d1c4 <__atomic_load_8>
 800c138:	9b00      	ldr	r3, [sp, #0]
 800c13a:	1ac0      	subs	r0, r0, r3
 800c13c:	9b01      	ldr	r3, [sp, #4]
 800c13e:	eb61 0103 	sbc.w	r1, r1, r3
 800c142:	2801      	cmp	r0, #1
 800c144:	f171 0300 	sbcs.w	r3, r1, #0
 800c148:	bfb4      	ite	lt
 800c14a:	2301      	movlt	r3, #1
 800c14c:	2300      	movge	r3, #0
 800c14e:	4630      	mov	r0, r6
 800c150:	702b      	strb	r3, [r5, #0]
 800c152:	b002      	add	sp, #8
 800c154:	bd70      	pop	{r4, r5, r6, pc}
 800c156:	260b      	movs	r6, #11
 800c158:	4630      	mov	r0, r6
 800c15a:	b002      	add	sp, #8
 800c15c:	bd70      	pop	{r4, r5, r6, pc}
 800c15e:	f44f 7648 	mov.w	r6, #800	@ 0x320
 800c162:	e7e1      	b.n	800c128 <rcl_timer_is_ready+0x38>

0800c164 <rcl_timer_get_time_until_next_call>:
 800c164:	b570      	push	{r4, r5, r6, lr}
 800c166:	b082      	sub	sp, #8
 800c168:	b330      	cbz	r0, 800c1b8 <rcl_timer_get_time_until_next_call+0x54>
 800c16a:	6803      	ldr	r3, [r0, #0]
 800c16c:	4604      	mov	r4, r0
 800c16e:	b33b      	cbz	r3, 800c1c0 <rcl_timer_get_time_until_next_call+0x5c>
 800c170:	460d      	mov	r5, r1
 800c172:	b309      	cbz	r1, 800c1b8 <rcl_timer_get_time_until_next_call+0x54>
 800c174:	f3bf 8f5b 	dmb	ish
 800c178:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c17c:	f3bf 8f5b 	dmb	ish
 800c180:	b9ab      	cbnz	r3, 800c1ae <rcl_timer_get_time_until_next_call+0x4a>
 800c182:	6803      	ldr	r3, [r0, #0]
 800c184:	4669      	mov	r1, sp
 800c186:	6818      	ldr	r0, [r3, #0]
 800c188:	f008 faea 	bl	8014760 <rcl_clock_get_now>
 800c18c:	4606      	mov	r6, r0
 800c18e:	b958      	cbnz	r0, 800c1a8 <rcl_timer_get_time_until_next_call+0x44>
 800c190:	6820      	ldr	r0, [r4, #0]
 800c192:	2105      	movs	r1, #5
 800c194:	3028      	adds	r0, #40	@ 0x28
 800c196:	f001 f815 	bl	800d1c4 <__atomic_load_8>
 800c19a:	9b00      	ldr	r3, [sp, #0]
 800c19c:	1ac0      	subs	r0, r0, r3
 800c19e:	9b01      	ldr	r3, [sp, #4]
 800c1a0:	6028      	str	r0, [r5, #0]
 800c1a2:	eb61 0103 	sbc.w	r1, r1, r3
 800c1a6:	6069      	str	r1, [r5, #4]
 800c1a8:	4630      	mov	r0, r6
 800c1aa:	b002      	add	sp, #8
 800c1ac:	bd70      	pop	{r4, r5, r6, pc}
 800c1ae:	f240 3621 	movw	r6, #801	@ 0x321
 800c1b2:	4630      	mov	r0, r6
 800c1b4:	b002      	add	sp, #8
 800c1b6:	bd70      	pop	{r4, r5, r6, pc}
 800c1b8:	260b      	movs	r6, #11
 800c1ba:	4630      	mov	r0, r6
 800c1bc:	b002      	add	sp, #8
 800c1be:	bd70      	pop	{r4, r5, r6, pc}
 800c1c0:	f44f 7648 	mov.w	r6, #800	@ 0x320
 800c1c4:	e7f0      	b.n	800c1a8 <rcl_timer_get_time_until_next_call+0x44>
 800c1c6:	bf00      	nop

0800c1c8 <rcl_timer_get_guard_condition>:
 800c1c8:	b130      	cbz	r0, 800c1d8 <rcl_timer_get_guard_condition+0x10>
 800c1ca:	6800      	ldr	r0, [r0, #0]
 800c1cc:	b120      	cbz	r0, 800c1d8 <rcl_timer_get_guard_condition+0x10>
 800c1ce:	68c3      	ldr	r3, [r0, #12]
 800c1d0:	b10b      	cbz	r3, 800c1d6 <rcl_timer_get_guard_condition+0xe>
 800c1d2:	3008      	adds	r0, #8
 800c1d4:	4770      	bx	lr
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	4770      	bx	lr
 800c1da:	bf00      	nop

0800c1dc <_rclc_check_for_new_data>:
 800c1dc:	2800      	cmp	r0, #0
 800c1de:	d046      	beq.n	800c26e <_rclc_check_for_new_data+0x92>
 800c1e0:	b510      	push	{r4, lr}
 800c1e2:	7802      	ldrb	r2, [r0, #0]
 800c1e4:	b084      	sub	sp, #16
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	2a0a      	cmp	r2, #10
 800c1ea:	d842      	bhi.n	800c272 <_rclc_check_for_new_data+0x96>
 800c1ec:	e8df f002 	tbb	[pc, r2]
 800c1f0:	14181212 	.word	0x14181212
 800c1f4:	06060614 	.word	0x06060614
 800c1f8:	2e1a      	.short	0x2e1a
 800c1fa:	16          	.byte	0x16
 800c1fb:	00          	.byte	0x00
 800c1fc:	6a0a      	ldr	r2, [r1, #32]
 800c1fe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800c200:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c204:	2000      	movs	r0, #0
 800c206:	1a12      	subs	r2, r2, r0
 800c208:	bf18      	it	ne
 800c20a:	2201      	movne	r2, #1
 800c20c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800c210:	b004      	add	sp, #16
 800c212:	bd10      	pop	{r4, pc}
 800c214:	680a      	ldr	r2, [r1, #0]
 800c216:	e7f2      	b.n	800c1fe <_rclc_check_for_new_data+0x22>
 800c218:	698a      	ldr	r2, [r1, #24]
 800c21a:	e7f0      	b.n	800c1fe <_rclc_check_for_new_data+0x22>
 800c21c:	688a      	ldr	r2, [r1, #8]
 800c21e:	e7ee      	b.n	800c1fe <_rclc_check_for_new_data+0x22>
 800c220:	690a      	ldr	r2, [r1, #16]
 800c222:	e7ec      	b.n	800c1fe <_rclc_check_for_new_data+0x22>
 800c224:	685c      	ldr	r4, [r3, #4]
 800c226:	4608      	mov	r0, r1
 800c228:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800c22c:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800c230:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800c234:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800c238:	9300      	str	r3, [sp, #0]
 800c23a:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800c23e:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800c242:	f104 0110 	add.w	r1, r4, #16
 800c246:	f009 fac7 	bl	80157d8 <rcl_action_client_wait_set_get_entities_ready>
 800c24a:	e7e1      	b.n	800c210 <_rclc_check_for_new_data+0x34>
 800c24c:	685c      	ldr	r4, [r3, #4]
 800c24e:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800c252:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800c256:	e9cd 3200 	strd	r3, r2, [sp]
 800c25a:	4608      	mov	r0, r1
 800c25c:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800c260:	f104 0220 	add.w	r2, r4, #32
 800c264:	f104 0110 	add.w	r1, r4, #16
 800c268:	f009 fcce 	bl	8015c08 <rcl_action_server_wait_set_get_entities_ready>
 800c26c:	e7d0      	b.n	800c210 <_rclc_check_for_new_data+0x34>
 800c26e:	200b      	movs	r0, #11
 800c270:	4770      	bx	lr
 800c272:	2001      	movs	r0, #1
 800c274:	e7cc      	b.n	800c210 <_rclc_check_for_new_data+0x34>
 800c276:	bf00      	nop

0800c278 <_rclc_take_new_data>:
 800c278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c27a:	b09b      	sub	sp, #108	@ 0x6c
 800c27c:	2800      	cmp	r0, #0
 800c27e:	f000 8088 	beq.w	800c392 <_rclc_take_new_data+0x11a>
 800c282:	7803      	ldrb	r3, [r0, #0]
 800c284:	4604      	mov	r4, r0
 800c286:	2b0a      	cmp	r3, #10
 800c288:	f200 8167 	bhi.w	800c55a <_rclc_take_new_data+0x2e2>
 800c28c:	e8df f003 	tbb	[pc, r3]
 800c290:	44152d2d 	.word	0x44152d2d
 800c294:	19191944 	.word	0x19191944
 800c298:	065a      	.short	0x065a
 800c29a:	15          	.byte	0x15
 800c29b:	00          	.byte	0x00
 800c29c:	6840      	ldr	r0, [r0, #4]
 800c29e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	f040 80b2 	bne.w	800c40c <_rclc_take_new_data+0x194>
 800c2a8:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	f040 80e4 	bne.w	800c47a <_rclc_take_new_data+0x202>
 800c2b2:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d16f      	bne.n	800c39a <_rclc_take_new_data+0x122>
 800c2ba:	2500      	movs	r5, #0
 800c2bc:	4628      	mov	r0, r5
 800c2be:	b01b      	add	sp, #108	@ 0x6c
 800c2c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2c2:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c2c4:	6a0b      	ldr	r3, [r1, #32]
 800c2c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d0f5      	beq.n	800c2ba <_rclc_take_new_data+0x42>
 800c2ce:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800c2d2:	f104 0110 	add.w	r1, r4, #16
 800c2d6:	f008 f91f 	bl	8014518 <rcl_take_request>
 800c2da:	4605      	mov	r5, r0
 800c2dc:	2800      	cmp	r0, #0
 800c2de:	d0ec      	beq.n	800c2ba <_rclc_take_new_data+0x42>
 800c2e0:	f240 2359 	movw	r3, #601	@ 0x259
 800c2e4:	4298      	cmp	r0, r3
 800c2e6:	d013      	beq.n	800c310 <_rclc_take_new_data+0x98>
 800c2e8:	e029      	b.n	800c33e <_rclc_take_new_data+0xc6>
 800c2ea:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c2ec:	680b      	ldr	r3, [r1, #0]
 800c2ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d0e1      	beq.n	800c2ba <_rclc_take_new_data+0x42>
 800c2f6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	aa0a      	add	r2, sp, #40	@ 0x28
 800c2fe:	f7ff fc8b 	bl	800bc18 <rcl_take>
 800c302:	4605      	mov	r5, r0
 800c304:	2800      	cmp	r0, #0
 800c306:	d0d9      	beq.n	800c2bc <_rclc_take_new_data+0x44>
 800c308:	f240 1391 	movw	r3, #401	@ 0x191
 800c30c:	4298      	cmp	r0, r3
 800c30e:	d116      	bne.n	800c33e <_rclc_take_new_data+0xc6>
 800c310:	2300      	movs	r3, #0
 800c312:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800c316:	e7d1      	b.n	800c2bc <_rclc_take_new_data+0x44>
 800c318:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c31a:	698b      	ldr	r3, [r1, #24]
 800c31c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d0ca      	beq.n	800c2ba <_rclc_take_new_data+0x42>
 800c324:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800c328:	f104 0110 	add.w	r1, r4, #16
 800c32c:	f007 fda4 	bl	8013e78 <rcl_take_response>
 800c330:	4605      	mov	r5, r0
 800c332:	2800      	cmp	r0, #0
 800c334:	d0c1      	beq.n	800c2ba <_rclc_take_new_data+0x42>
 800c336:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800c33a:	4298      	cmp	r0, r3
 800c33c:	d0be      	beq.n	800c2bc <_rclc_take_new_data+0x44>
 800c33e:	f001 f813 	bl	800d368 <rcutils_reset_error>
 800c342:	e7bb      	b.n	800c2bc <_rclc_take_new_data+0x44>
 800c344:	6840      	ldr	r0, [r0, #4]
 800c346:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d17d      	bne.n	800c44a <_rclc_take_new_data+0x1d2>
 800c34e:	69c3      	ldr	r3, [r0, #28]
 800c350:	b11b      	cbz	r3, 800c35a <_rclc_take_new_data+0xe2>
 800c352:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c356:	2b00      	cmp	r3, #0
 800c358:	d144      	bne.n	800c3e4 <_rclc_take_new_data+0x16c>
 800c35a:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c35e:	2b00      	cmp	r3, #0
 800c360:	f040 80ac 	bne.w	800c4bc <_rclc_take_new_data+0x244>
 800c364:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d0a6      	beq.n	800c2ba <_rclc_take_new_data+0x42>
 800c36c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800c36e:	a90a      	add	r1, sp, #40	@ 0x28
 800c370:	3010      	adds	r0, #16
 800c372:	f009 f909 	bl	8015588 <rcl_action_take_result_response>
 800c376:	4605      	mov	r5, r0
 800c378:	2800      	cmp	r0, #0
 800c37a:	d1e0      	bne.n	800c33e <_rclc_take_new_data+0xc6>
 800c37c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c380:	6860      	ldr	r0, [r4, #4]
 800c382:	f009 fd65 	bl	8015e50 <rclc_action_find_handle_by_result_request_sequence_number>
 800c386:	2800      	cmp	r0, #0
 800c388:	d098      	beq.n	800c2bc <_rclc_take_new_data+0x44>
 800c38a:	2301      	movs	r3, #1
 800c38c:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800c390:	e794      	b.n	800c2bc <_rclc_take_new_data+0x44>
 800c392:	250b      	movs	r5, #11
 800c394:	4628      	mov	r0, r5
 800c396:	b01b      	add	sp, #108	@ 0x6c
 800c398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c39a:	ae04      	add	r6, sp, #16
 800c39c:	aa0a      	add	r2, sp, #40	@ 0x28
 800c39e:	3010      	adds	r0, #16
 800c3a0:	4631      	mov	r1, r6
 800c3a2:	f009 fb65 	bl	8015a70 <rcl_action_take_cancel_request>
 800c3a6:	4605      	mov	r5, r0
 800c3a8:	2800      	cmp	r0, #0
 800c3aa:	d1c8      	bne.n	800c33e <_rclc_take_new_data+0xc6>
 800c3ac:	6860      	ldr	r0, [r4, #4]
 800c3ae:	a90a      	add	r1, sp, #40	@ 0x28
 800c3b0:	f009 fd0c 	bl	8015dcc <rclc_action_find_goal_handle_by_uuid>
 800c3b4:	4607      	mov	r7, r0
 800c3b6:	2800      	cmp	r0, #0
 800c3b8:	f000 80bb 	beq.w	800c532 <_rclc_take_new_data+0x2ba>
 800c3bc:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800c3c0:	2101      	movs	r1, #1
 800c3c2:	f009 fc8d 	bl	8015ce0 <rcl_action_transition_goal_state>
 800c3c6:	2803      	cmp	r0, #3
 800c3c8:	4684      	mov	ip, r0
 800c3ca:	f040 80a7 	bne.w	800c51c <_rclc_take_new_data+0x2a4>
 800c3ce:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c3d0:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800c3d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c3d6:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c3da:	e884 0003 	stmia.w	r4, {r0, r1}
 800c3de:	f887 c008 	strb.w	ip, [r7, #8]
 800c3e2:	e76b      	b.n	800c2bc <_rclc_take_new_data+0x44>
 800c3e4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c3e6:	3010      	adds	r0, #16
 800c3e8:	f009 f94e 	bl	8015688 <rcl_action_take_feedback>
 800c3ec:	4605      	mov	r5, r0
 800c3ee:	2800      	cmp	r0, #0
 800c3f0:	d1a5      	bne.n	800c33e <_rclc_take_new_data+0xc6>
 800c3f2:	6860      	ldr	r0, [r4, #4]
 800c3f4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c3f6:	f009 fce9 	bl	8015dcc <rclc_action_find_goal_handle_by_uuid>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	2800      	cmp	r0, #0
 800c3fe:	f000 80a3 	beq.w	800c548 <_rclc_take_new_data+0x2d0>
 800c402:	2201      	movs	r2, #1
 800c404:	6860      	ldr	r0, [r4, #4]
 800c406:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800c40a:	e7a6      	b.n	800c35a <_rclc_take_new_data+0xe2>
 800c40c:	f009 fcb8 	bl	8015d80 <rclc_action_take_goal_handle>
 800c410:	4606      	mov	r6, r0
 800c412:	6860      	ldr	r0, [r4, #4]
 800c414:	2e00      	cmp	r6, #0
 800c416:	f43f af47 	beq.w	800c2a8 <_rclc_take_new_data+0x30>
 800c41a:	6070      	str	r0, [r6, #4]
 800c41c:	69f2      	ldr	r2, [r6, #28]
 800c41e:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800c422:	3010      	adds	r0, #16
 800c424:	f009 fa6c 	bl	8015900 <rcl_action_take_goal_request>
 800c428:	4605      	mov	r5, r0
 800c42a:	2800      	cmp	r0, #0
 800c42c:	f040 808e 	bne.w	800c54c <_rclc_take_new_data+0x2d4>
 800c430:	69f7      	ldr	r7, [r6, #28]
 800c432:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c434:	7235      	strb	r5, [r6, #8]
 800c436:	f8c6 0009 	str.w	r0, [r6, #9]
 800c43a:	f8c6 100d 	str.w	r1, [r6, #13]
 800c43e:	6860      	ldr	r0, [r4, #4]
 800c440:	f8c6 2011 	str.w	r2, [r6, #17]
 800c444:	f8c6 3015 	str.w	r3, [r6, #21]
 800c448:	e72e      	b.n	800c2a8 <_rclc_take_new_data+0x30>
 800c44a:	aa04      	add	r2, sp, #16
 800c44c:	a90a      	add	r1, sp, #40	@ 0x28
 800c44e:	3010      	adds	r0, #16
 800c450:	f009 f822 	bl	8015498 <rcl_action_take_goal_response>
 800c454:	4605      	mov	r5, r0
 800c456:	2800      	cmp	r0, #0
 800c458:	f47f af71 	bne.w	800c33e <_rclc_take_new_data+0xc6>
 800c45c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c460:	6860      	ldr	r0, [r4, #4]
 800c462:	f009 fce3 	bl	8015e2c <rclc_action_find_handle_by_goal_request_sequence_number>
 800c466:	b130      	cbz	r0, 800c476 <_rclc_take_new_data+0x1fe>
 800c468:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800c46c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800c470:	2201      	movs	r2, #1
 800c472:	f880 2020 	strb.w	r2, [r0, #32]
 800c476:	6860      	ldr	r0, [r4, #4]
 800c478:	e769      	b.n	800c34e <_rclc_take_new_data+0xd6>
 800c47a:	aa04      	add	r2, sp, #16
 800c47c:	3010      	adds	r0, #16
 800c47e:	a90a      	add	r1, sp, #40	@ 0x28
 800c480:	f009 fab6 	bl	80159f0 <rcl_action_take_result_request>
 800c484:	4605      	mov	r5, r0
 800c486:	2800      	cmp	r0, #0
 800c488:	f47f af59 	bne.w	800c33e <_rclc_take_new_data+0xc6>
 800c48c:	6860      	ldr	r0, [r4, #4]
 800c48e:	a904      	add	r1, sp, #16
 800c490:	f009 fc9c 	bl	8015dcc <rclc_action_find_goal_handle_by_uuid>
 800c494:	4607      	mov	r7, r0
 800c496:	b160      	cbz	r0, 800c4b2 <_rclc_take_new_data+0x23a>
 800c498:	ad0a      	add	r5, sp, #40	@ 0x28
 800c49a:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800c49e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c4a0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c4a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c4a6:	f04f 0c02 	mov.w	ip, #2
 800c4aa:	e886 0003 	stmia.w	r6, {r0, r1}
 800c4ae:	f887 c008 	strb.w	ip, [r7, #8]
 800c4b2:	6860      	ldr	r0, [r4, #4]
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800c4ba:	e6fa      	b.n	800c2b2 <_rclc_take_new_data+0x3a>
 800c4bc:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800c4c0:	a90a      	add	r1, sp, #40	@ 0x28
 800c4c2:	3010      	adds	r0, #16
 800c4c4:	f009 f8a0 	bl	8015608 <rcl_action_take_cancel_response>
 800c4c8:	4605      	mov	r5, r0
 800c4ca:	2800      	cmp	r0, #0
 800c4cc:	f47f af37 	bne.w	800c33e <_rclc_take_new_data+0xc6>
 800c4d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c4d4:	6860      	ldr	r0, [r4, #4]
 800c4d6:	f009 fccd 	bl	8015e74 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800c4da:	4606      	mov	r6, r0
 800c4dc:	6860      	ldr	r0, [r4, #4]
 800c4de:	2e00      	cmp	r6, #0
 800c4e0:	f43f af40 	beq.w	800c364 <_rclc_take_new_data+0xec>
 800c4e4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c4e6:	2701      	movs	r7, #1
 800c4e8:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	f43f af3a 	beq.w	800c364 <_rclc_take_new_data+0xec>
 800c4f0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800c4f2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800c4f6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c4fa:	f009 fc67 	bl	8015dcc <rclc_action_find_goal_handle_by_uuid>
 800c4fe:	b138      	cbz	r0, 800c510 <_rclc_take_new_data+0x298>
 800c500:	6860      	ldr	r0, [r4, #4]
 800c502:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c504:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800c508:	3501      	adds	r5, #1
 800c50a:	42ab      	cmp	r3, r5
 800c50c:	d8f0      	bhi.n	800c4f0 <_rclc_take_new_data+0x278>
 800c50e:	e729      	b.n	800c364 <_rclc_take_new_data+0xec>
 800c510:	6860      	ldr	r0, [r4, #4]
 800c512:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c514:	3501      	adds	r5, #1
 800c516:	42ab      	cmp	r3, r5
 800c518:	d8ea      	bhi.n	800c4f0 <_rclc_take_new_data+0x278>
 800c51a:	e723      	b.n	800c364 <_rclc_take_new_data+0xec>
 800c51c:	ab06      	add	r3, sp, #24
 800c51e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c520:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c524:	2103      	movs	r1, #3
 800c526:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c52a:	6860      	ldr	r0, [r4, #4]
 800c52c:	f009 fd18 	bl	8015f60 <rclc_action_server_goal_cancel_reject>
 800c530:	e6c4      	b.n	800c2bc <_rclc_take_new_data+0x44>
 800c532:	ab06      	add	r3, sp, #24
 800c534:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c536:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c53a:	2102      	movs	r1, #2
 800c53c:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c540:	6860      	ldr	r0, [r4, #4]
 800c542:	f009 fd0d 	bl	8015f60 <rclc_action_server_goal_cancel_reject>
 800c546:	e6b9      	b.n	800c2bc <_rclc_take_new_data+0x44>
 800c548:	6860      	ldr	r0, [r4, #4]
 800c54a:	e706      	b.n	800c35a <_rclc_take_new_data+0xe2>
 800c54c:	6860      	ldr	r0, [r4, #4]
 800c54e:	4631      	mov	r1, r6
 800c550:	f009 fc26 	bl	8015da0 <rclc_action_remove_used_goal_handle>
 800c554:	f000 ff08 	bl	800d368 <rcutils_reset_error>
 800c558:	e6b0      	b.n	800c2bc <_rclc_take_new_data+0x44>
 800c55a:	2501      	movs	r5, #1
 800c55c:	e6ae      	b.n	800c2bc <_rclc_take_new_data+0x44>
 800c55e:	bf00      	nop

0800c560 <_rclc_execute.part.0>:
 800c560:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c562:	7803      	ldrb	r3, [r0, #0]
 800c564:	b087      	sub	sp, #28
 800c566:	4604      	mov	r4, r0
 800c568:	2b0a      	cmp	r3, #10
 800c56a:	f200 8136 	bhi.w	800c7da <_rclc_execute.part.0+0x27a>
 800c56e:	e8df f003 	tbb	[pc, r3]
 800c572:	435e      	.short	0x435e
 800c574:	06a1664f 	.word	0x06a1664f
 800c578:	6c1e0606 	.word	0x6c1e0606
 800c57c:	59          	.byte	0x59
 800c57d:	00          	.byte	0x00
 800c57e:	2b06      	cmp	r3, #6
 800c580:	f000 8122 	beq.w	800c7c8 <_rclc_execute.part.0+0x268>
 800c584:	2b07      	cmp	r3, #7
 800c586:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c588:	f040 8118 	bne.w	800c7bc <_rclc_execute.part.0+0x25c>
 800c58c:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800c590:	6880      	ldr	r0, [r0, #8]
 800c592:	4798      	blx	r3
 800c594:	f104 0110 	add.w	r1, r4, #16
 800c598:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800c59a:	6860      	ldr	r0, [r4, #4]
 800c59c:	f007 fffc 	bl	8014598 <rcl_send_response>
 800c5a0:	2800      	cmp	r0, #0
 800c5a2:	d033      	beq.n	800c60c <_rclc_execute.part.0+0xac>
 800c5a4:	9005      	str	r0, [sp, #20]
 800c5a6:	f000 fedf 	bl	800d368 <rcutils_reset_error>
 800c5aa:	9805      	ldr	r0, [sp, #20]
 800c5ac:	e02e      	b.n	800c60c <_rclc_execute.part.0+0xac>
 800c5ae:	6840      	ldr	r0, [r0, #4]
 800c5b0:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	f000 8086 	beq.w	800c6c6 <_rclc_execute.part.0+0x166>
 800c5ba:	2600      	movs	r6, #0
 800c5bc:	2701      	movs	r7, #1
 800c5be:	e004      	b.n	800c5ca <_rclc_execute.part.0+0x6a>
 800c5c0:	f009 fbb8 	bl	8015d34 <rclc_action_send_result_request>
 800c5c4:	b998      	cbnz	r0, 800c5ee <_rclc_execute.part.0+0x8e>
 800c5c6:	722f      	strb	r7, [r5, #8]
 800c5c8:	6860      	ldr	r0, [r4, #4]
 800c5ca:	f009 fc65 	bl	8015e98 <rclc_action_find_first_handle_with_goal_response>
 800c5ce:	4605      	mov	r5, r0
 800c5d0:	2800      	cmp	r0, #0
 800c5d2:	d077      	beq.n	800c6c4 <_rclc_execute.part.0+0x164>
 800c5d4:	6863      	ldr	r3, [r4, #4]
 800c5d6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c5d8:	699b      	ldr	r3, [r3, #24]
 800c5da:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800c5de:	f885 6020 	strb.w	r6, [r5, #32]
 800c5e2:	4798      	blx	r3
 800c5e4:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800c5e8:	4628      	mov	r0, r5
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d1e8      	bne.n	800c5c0 <_rclc_execute.part.0+0x60>
 800c5ee:	6860      	ldr	r0, [r4, #4]
 800c5f0:	4629      	mov	r1, r5
 800c5f2:	f009 fbd5 	bl	8015da0 <rclc_action_remove_used_goal_handle>
 800c5f6:	e7e7      	b.n	800c5c8 <_rclc_execute.part.0+0x68>
 800c5f8:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800c5fc:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800c600:	2d00      	cmp	r5, #0
 800c602:	f000 80c9 	beq.w	800c798 <_rclc_execute.part.0+0x238>
 800c606:	6880      	ldr	r0, [r0, #8]
 800c608:	4798      	blx	r3
 800c60a:	2000      	movs	r0, #0
 800c60c:	b007      	add	sp, #28
 800c60e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c610:	6840      	ldr	r0, [r0, #4]
 800c612:	f7ff fcdb 	bl	800bfcc <rcl_timer_call>
 800c616:	f240 3321 	movw	r3, #801	@ 0x321
 800c61a:	4298      	cmp	r0, r3
 800c61c:	d004      	beq.n	800c628 <_rclc_execute.part.0+0xc8>
 800c61e:	2800      	cmp	r0, #0
 800c620:	d0f4      	beq.n	800c60c <_rclc_execute.part.0+0xac>
 800c622:	e7bf      	b.n	800c5a4 <_rclc_execute.part.0+0x44>
 800c624:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c626:	4798      	blx	r3
 800c628:	2000      	movs	r0, #0
 800c62a:	b007      	add	sp, #28
 800c62c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c62e:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800c632:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c634:	b925      	cbnz	r5, 800c640 <_rclc_execute.part.0+0xe0>
 800c636:	4628      	mov	r0, r5
 800c638:	4798      	blx	r3
 800c63a:	4628      	mov	r0, r5
 800c63c:	e7e6      	b.n	800c60c <_rclc_execute.part.0+0xac>
 800c63e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c640:	68a0      	ldr	r0, [r4, #8]
 800c642:	4798      	blx	r3
 800c644:	2000      	movs	r0, #0
 800c646:	b007      	add	sp, #28
 800c648:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c64a:	6840      	ldr	r0, [r0, #4]
 800c64c:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800c650:	bb3b      	cbnz	r3, 800c6a2 <_rclc_execute.part.0+0x142>
 800c652:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d07b      	beq.n	800c752 <_rclc_execute.part.0+0x1f2>
 800c65a:	f640 0634 	movw	r6, #2100	@ 0x834
 800c65e:	2701      	movs	r7, #1
 800c660:	e007      	b.n	800c672 <_rclc_execute.part.0+0x112>
 800c662:	4628      	mov	r0, r5
 800c664:	f009 fc30 	bl	8015ec8 <rclc_action_server_response_goal_request>
 800c668:	6860      	ldr	r0, [r4, #4]
 800c66a:	4629      	mov	r1, r5
 800c66c:	f009 fb98 	bl	8015da0 <rclc_action_remove_used_goal_handle>
 800c670:	6860      	ldr	r0, [r4, #4]
 800c672:	2100      	movs	r1, #0
 800c674:	f009 fbc2 	bl	8015dfc <rclc_action_find_first_handle_by_status>
 800c678:	4605      	mov	r5, r0
 800c67a:	2800      	cmp	r0, #0
 800c67c:	d066      	beq.n	800c74c <_rclc_execute.part.0+0x1ec>
 800c67e:	6863      	ldr	r3, [r4, #4]
 800c680:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c682:	699b      	ldr	r3, [r3, #24]
 800c684:	4798      	blx	r3
 800c686:	42b0      	cmp	r0, r6
 800c688:	f04f 0100 	mov.w	r1, #0
 800c68c:	d1e9      	bne.n	800c662 <_rclc_execute.part.0+0x102>
 800c68e:	2101      	movs	r1, #1
 800c690:	4628      	mov	r0, r5
 800c692:	f009 fc19 	bl	8015ec8 <rclc_action_server_response_goal_request>
 800c696:	722f      	strb	r7, [r5, #8]
 800c698:	e7ea      	b.n	800c670 <_rclc_execute.part.0+0x110>
 800c69a:	6848      	ldr	r0, [r1, #4]
 800c69c:	f009 fb80 	bl	8015da0 <rclc_action_remove_used_goal_handle>
 800c6a0:	6860      	ldr	r0, [r4, #4]
 800c6a2:	f009 fbb7 	bl	8015e14 <rclc_action_find_first_terminated_handle>
 800c6a6:	4601      	mov	r1, r0
 800c6a8:	2800      	cmp	r0, #0
 800c6aa:	d1f6      	bne.n	800c69a <_rclc_execute.part.0+0x13a>
 800c6ac:	6860      	ldr	r0, [r4, #4]
 800c6ae:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800c6b2:	e7ce      	b.n	800c652 <_rclc_execute.part.0+0xf2>
 800c6b4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c6b6:	6880      	ldr	r0, [r0, #8]
 800c6b8:	f104 0110 	add.w	r1, r4, #16
 800c6bc:	4798      	blx	r3
 800c6be:	2000      	movs	r0, #0
 800c6c0:	b007      	add	sp, #28
 800c6c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6c4:	6860      	ldr	r0, [r4, #4]
 800c6c6:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c6ca:	b18b      	cbz	r3, 800c6f0 <_rclc_execute.part.0+0x190>
 800c6cc:	68c5      	ldr	r5, [r0, #12]
 800c6ce:	b32d      	cbz	r5, 800c71c <_rclc_execute.part.0+0x1bc>
 800c6d0:	2600      	movs	r6, #0
 800c6d2:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800c6d6:	b143      	cbz	r3, 800c6ea <_rclc_execute.part.0+0x18a>
 800c6d8:	69c3      	ldr	r3, [r0, #28]
 800c6da:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800c6de:	b123      	cbz	r3, 800c6ea <_rclc_execute.part.0+0x18a>
 800c6e0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c6e2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c6e4:	4628      	mov	r0, r5
 800c6e6:	4798      	blx	r3
 800c6e8:	6860      	ldr	r0, [r4, #4]
 800c6ea:	682d      	ldr	r5, [r5, #0]
 800c6ec:	2d00      	cmp	r5, #0
 800c6ee:	d1f0      	bne.n	800c6d2 <_rclc_execute.part.0+0x172>
 800c6f0:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c6f4:	b193      	cbz	r3, 800c71c <_rclc_execute.part.0+0x1bc>
 800c6f6:	68c5      	ldr	r5, [r0, #12]
 800c6f8:	b185      	cbz	r5, 800c71c <_rclc_execute.part.0+0x1bc>
 800c6fa:	2600      	movs	r6, #0
 800c6fc:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800c700:	b14b      	cbz	r3, 800c716 <_rclc_execute.part.0+0x1b6>
 800c702:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800c704:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800c708:	b12b      	cbz	r3, 800c716 <_rclc_execute.part.0+0x1b6>
 800c70a:	4628      	mov	r0, r5
 800c70c:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800c710:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c712:	4798      	blx	r3
 800c714:	6860      	ldr	r0, [r4, #4]
 800c716:	682d      	ldr	r5, [r5, #0]
 800c718:	2d00      	cmp	r5, #0
 800c71a:	d1ef      	bne.n	800c6fc <_rclc_execute.part.0+0x19c>
 800c71c:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800c720:	2b00      	cmp	r3, #0
 800c722:	d081      	beq.n	800c628 <_rclc_execute.part.0+0xc8>
 800c724:	2700      	movs	r7, #0
 800c726:	e00b      	b.n	800c740 <_rclc_execute.part.0+0x1e0>
 800c728:	6863      	ldr	r3, [r4, #4]
 800c72a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c72c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800c72e:	6a1e      	ldr	r6, [r3, #32]
 800c730:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800c734:	47b0      	blx	r6
 800c736:	6860      	ldr	r0, [r4, #4]
 800c738:	4629      	mov	r1, r5
 800c73a:	f009 fb31 	bl	8015da0 <rclc_action_remove_used_goal_handle>
 800c73e:	6860      	ldr	r0, [r4, #4]
 800c740:	f009 fbb6 	bl	8015eb0 <rclc_action_find_first_handle_with_result_response>
 800c744:	4605      	mov	r5, r0
 800c746:	2800      	cmp	r0, #0
 800c748:	d1ee      	bne.n	800c728 <_rclc_execute.part.0+0x1c8>
 800c74a:	e76d      	b.n	800c628 <_rclc_execute.part.0+0xc8>
 800c74c:	6860      	ldr	r0, [r4, #4]
 800c74e:	f880 5020 	strb.w	r5, [r0, #32]
 800c752:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800c756:	2b00      	cmp	r3, #0
 800c758:	f43f af66 	beq.w	800c628 <_rclc_execute.part.0+0xc8>
 800c75c:	68c5      	ldr	r5, [r0, #12]
 800c75e:	b1b5      	cbz	r5, 800c78e <_rclc_execute.part.0+0x22e>
 800c760:	2602      	movs	r6, #2
 800c762:	e001      	b.n	800c768 <_rclc_execute.part.0+0x208>
 800c764:	682d      	ldr	r5, [r5, #0]
 800c766:	b195      	cbz	r5, 800c78e <_rclc_execute.part.0+0x22e>
 800c768:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800c76c:	2b03      	cmp	r3, #3
 800c76e:	d1f9      	bne.n	800c764 <_rclc_execute.part.0+0x204>
 800c770:	69c3      	ldr	r3, [r0, #28]
 800c772:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c774:	4628      	mov	r0, r5
 800c776:	4798      	blx	r3
 800c778:	4603      	mov	r3, r0
 800c77a:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800c77e:	4628      	mov	r0, r5
 800c780:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800c784:	b163      	cbz	r3, 800c7a0 <_rclc_execute.part.0+0x240>
 800c786:	f009 fbbf 	bl	8015f08 <rclc_action_server_goal_cancel_accept>
 800c78a:	6860      	ldr	r0, [r4, #4]
 800c78c:	e7ea      	b.n	800c764 <_rclc_execute.part.0+0x204>
 800c78e:	2300      	movs	r3, #0
 800c790:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800c794:	4618      	mov	r0, r3
 800c796:	e739      	b.n	800c60c <_rclc_execute.part.0+0xac>
 800c798:	4628      	mov	r0, r5
 800c79a:	4798      	blx	r3
 800c79c:	4628      	mov	r0, r5
 800c79e:	e735      	b.n	800c60c <_rclc_execute.part.0+0xac>
 800c7a0:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800c7a2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c7a6:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800c7aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7ae:	6860      	ldr	r0, [r4, #4]
 800c7b0:	2101      	movs	r1, #1
 800c7b2:	f009 fbd5 	bl	8015f60 <rclc_action_server_goal_cancel_reject>
 800c7b6:	722e      	strb	r6, [r5, #8]
 800c7b8:	6860      	ldr	r0, [r4, #4]
 800c7ba:	e7d3      	b.n	800c764 <_rclc_execute.part.0+0x204>
 800c7bc:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c7be:	6880      	ldr	r0, [r0, #8]
 800c7c0:	4798      	blx	r3
 800c7c2:	f104 0110 	add.w	r1, r4, #16
 800c7c6:	e6e7      	b.n	800c598 <_rclc_execute.part.0+0x38>
 800c7c8:	f100 0110 	add.w	r1, r0, #16
 800c7cc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c7ce:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800c7d0:	6880      	ldr	r0, [r0, #8]
 800c7d2:	9105      	str	r1, [sp, #20]
 800c7d4:	4798      	blx	r3
 800c7d6:	9905      	ldr	r1, [sp, #20]
 800c7d8:	e6de      	b.n	800c598 <_rclc_execute.part.0+0x38>
 800c7da:	2001      	movs	r0, #1
 800c7dc:	e716      	b.n	800c60c <_rclc_execute.part.0+0xac>
 800c7de:	bf00      	nop

0800c7e0 <rclc_executor_trigger_any>:
 800c7e0:	2800      	cmp	r0, #0
 800c7e2:	d03f      	beq.n	800c864 <rclc_executor_trigger_any+0x84>
 800c7e4:	2900      	cmp	r1, #0
 800c7e6:	d03e      	beq.n	800c866 <rclc_executor_trigger_any+0x86>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	2800      	cmp	r0, #0
 800c7f2:	d037      	beq.n	800c864 <rclc_executor_trigger_any+0x84>
 800c7f4:	b430      	push	{r4, r5}
 800c7f6:	f893 c000 	ldrb.w	ip, [r3]
 800c7fa:	f1bc 0f08 	cmp.w	ip, #8
 800c7fe:	d11e      	bne.n	800c83e <rclc_executor_trigger_any+0x5e>
 800c800:	685c      	ldr	r4, [r3, #4]
 800c802:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800c804:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800c808:	d105      	bne.n	800c816 <rclc_executor_trigger_any+0x36>
 800c80a:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800c80e:	b910      	cbnz	r0, 800c816 <rclc_executor_trigger_any+0x36>
 800c810:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800c814:	b128      	cbz	r0, 800c822 <rclc_executor_trigger_any+0x42>
 800c816:	bc30      	pop	{r4, r5}
 800c818:	4770      	bx	lr
 800c81a:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800c81e:	2800      	cmp	r0, #0
 800c820:	d1f9      	bne.n	800c816 <rclc_executor_trigger_any+0x36>
 800c822:	3201      	adds	r2, #1
 800c824:	4291      	cmp	r1, r2
 800c826:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800c82a:	d018      	beq.n	800c85e <rclc_executor_trigger_any+0x7e>
 800c82c:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800c830:	2800      	cmp	r0, #0
 800c832:	d0f0      	beq.n	800c816 <rclc_executor_trigger_any+0x36>
 800c834:	f893 c000 	ldrb.w	ip, [r3]
 800c838:	f1bc 0f08 	cmp.w	ip, #8
 800c83c:	d0e0      	beq.n	800c800 <rclc_executor_trigger_any+0x20>
 800c83e:	f1bc 0f09 	cmp.w	ip, #9
 800c842:	d1ea      	bne.n	800c81a <rclc_executor_trigger_any+0x3a>
 800c844:	685c      	ldr	r4, [r3, #4]
 800c846:	6a25      	ldr	r5, [r4, #32]
 800c848:	2d00      	cmp	r5, #0
 800c84a:	d1e4      	bne.n	800c816 <rclc_executor_trigger_any+0x36>
 800c84c:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800c850:	2800      	cmp	r0, #0
 800c852:	d1e0      	bne.n	800c816 <rclc_executor_trigger_any+0x36>
 800c854:	3201      	adds	r2, #1
 800c856:	4291      	cmp	r1, r2
 800c858:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800c85c:	d1e6      	bne.n	800c82c <rclc_executor_trigger_any+0x4c>
 800c85e:	2000      	movs	r0, #0
 800c860:	bc30      	pop	{r4, r5}
 800c862:	4770      	bx	lr
 800c864:	4770      	bx	lr
 800c866:	4608      	mov	r0, r1
 800c868:	4770      	bx	lr
 800c86a:	bf00      	nop
 800c86c:	0000      	movs	r0, r0
	...

0800c870 <rclc_executor_init>:
 800c870:	2800      	cmp	r0, #0
 800c872:	d05f      	beq.n	800c934 <rclc_executor_init+0xc4>
 800c874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c878:	460c      	mov	r4, r1
 800c87a:	b0b0      	sub	sp, #192	@ 0xc0
 800c87c:	2900      	cmp	r1, #0
 800c87e:	d051      	beq.n	800c924 <rclc_executor_init+0xb4>
 800c880:	4605      	mov	r5, r0
 800c882:	4618      	mov	r0, r3
 800c884:	4616      	mov	r6, r2
 800c886:	461f      	mov	r7, r3
 800c888:	f000 fc8e 	bl	800d1a8 <rcutils_allocator_is_valid>
 800c88c:	2800      	cmp	r0, #0
 800c88e:	d049      	beq.n	800c924 <rclc_executor_init+0xb4>
 800c890:	2e00      	cmp	r6, #0
 800c892:	d047      	beq.n	800c924 <rclc_executor_init+0xb4>
 800c894:	492c      	ldr	r1, [pc, #176]	@ (800c948 <rclc_executor_init+0xd8>)
 800c896:	2288      	movs	r2, #136	@ 0x88
 800c898:	a80e      	add	r0, sp, #56	@ 0x38
 800c89a:	f00c f98e 	bl	8018bba <memcpy>
 800c89e:	a90e      	add	r1, sp, #56	@ 0x38
 800c8a0:	2288      	movs	r2, #136	@ 0x88
 800c8a2:	4628      	mov	r0, r5
 800c8a4:	f00c f989 	bl	8018bba <memcpy>
 800c8a8:	602c      	str	r4, [r5, #0]
 800c8aa:	4668      	mov	r0, sp
 800c8ac:	60ae      	str	r6, [r5, #8]
 800c8ae:	466c      	mov	r4, sp
 800c8b0:	f008 f822 	bl	80148f8 <rcl_get_zero_initialized_wait_set>
 800c8b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c8b6:	f105 0c14 	add.w	ip, r5, #20
 800c8ba:	f8d7 8000 	ldr.w	r8, [r7]
 800c8be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c8c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c8c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c8c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c8ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c8ce:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800c940 <rclc_executor_init+0xd0>
 800c8d2:	6823      	ldr	r3, [r4, #0]
 800c8d4:	f8cc 3000 	str.w	r3, [ip]
 800c8d8:	6939      	ldr	r1, [r7, #16]
 800c8da:	612f      	str	r7, [r5, #16]
 800c8dc:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800c8e0:	01b0      	lsls	r0, r6, #6
 800c8e2:	47c0      	blx	r8
 800c8e4:	6068      	str	r0, [r5, #4]
 800c8e6:	b338      	cbz	r0, 800c938 <rclc_executor_init+0xc8>
 800c8e8:	2400      	movs	r4, #0
 800c8ea:	e000      	b.n	800c8ee <rclc_executor_init+0x7e>
 800c8ec:	6868      	ldr	r0, [r5, #4]
 800c8ee:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800c8f2:	4631      	mov	r1, r6
 800c8f4:	3401      	adds	r4, #1
 800c8f6:	f000 facb 	bl	800ce90 <rclc_executor_handle_init>
 800c8fa:	42a6      	cmp	r6, r4
 800c8fc:	d1f6      	bne.n	800c8ec <rclc_executor_init+0x7c>
 800c8fe:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800c902:	f000 fab9 	bl	800ce78 <rclc_executor_handle_counters_zero_init>
 800c906:	4a11      	ldr	r2, [pc, #68]	@ (800c94c <rclc_executor_init+0xdc>)
 800c908:	686b      	ldr	r3, [r5, #4]
 800c90a:	2000      	movs	r0, #0
 800c90c:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800c910:	b163      	cbz	r3, 800c92c <rclc_executor_init+0xbc>
 800c912:	692b      	ldr	r3, [r5, #16]
 800c914:	b153      	cbz	r3, 800c92c <rclc_executor_init+0xbc>
 800c916:	68ab      	ldr	r3, [r5, #8]
 800c918:	b143      	cbz	r3, 800c92c <rclc_executor_init+0xbc>
 800c91a:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800c91e:	b030      	add	sp, #192	@ 0xc0
 800c920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c924:	200b      	movs	r0, #11
 800c926:	b030      	add	sp, #192	@ 0xc0
 800c928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c92c:	4618      	mov	r0, r3
 800c92e:	b030      	add	sp, #192	@ 0xc0
 800c930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c934:	200b      	movs	r0, #11
 800c936:	4770      	bx	lr
 800c938:	200a      	movs	r0, #10
 800c93a:	e7f4      	b.n	800c926 <rclc_executor_init+0xb6>
 800c93c:	f3af 8000 	nop.w
 800c940:	3b9aca00 	.word	0x3b9aca00
 800c944:	00000000 	.word	0x00000000
 800c948:	0801a090 	.word	0x0801a090
 800c94c:	0800c7e1 	.word	0x0800c7e1

0800c950 <rclc_executor_fini>:
 800c950:	b308      	cbz	r0, 800c996 <rclc_executor_fini+0x46>
 800c952:	b538      	push	{r3, r4, r5, lr}
 800c954:	4604      	mov	r4, r0
 800c956:	6840      	ldr	r0, [r0, #4]
 800c958:	b1d8      	cbz	r0, 800c992 <rclc_executor_fini+0x42>
 800c95a:	6923      	ldr	r3, [r4, #16]
 800c95c:	b1cb      	cbz	r3, 800c992 <rclc_executor_fini+0x42>
 800c95e:	68a2      	ldr	r2, [r4, #8]
 800c960:	b1ba      	cbz	r2, 800c992 <rclc_executor_fini+0x42>
 800c962:	6919      	ldr	r1, [r3, #16]
 800c964:	685b      	ldr	r3, [r3, #4]
 800c966:	4798      	blx	r3
 800c968:	2300      	movs	r3, #0
 800c96a:	2000      	movs	r0, #0
 800c96c:	2100      	movs	r1, #0
 800c96e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c972:	6063      	str	r3, [r4, #4]
 800c974:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 800c978:	f104 0514 	add.w	r5, r4, #20
 800c97c:	f000 fa7c 	bl	800ce78 <rclc_executor_handle_counters_zero_init>
 800c980:	4628      	mov	r0, r5
 800c982:	f007 ffcd 	bl	8014920 <rcl_wait_set_is_valid>
 800c986:	b940      	cbnz	r0, 800c99a <rclc_executor_fini+0x4a>
 800c988:	a309      	add	r3, pc, #36	@ (adr r3, 800c9b0 <rclc_executor_fini+0x60>)
 800c98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c98e:	e9c4 231a 	strd	r2, r3, [r4, #104]	@ 0x68
 800c992:	2000      	movs	r0, #0
 800c994:	bd38      	pop	{r3, r4, r5, pc}
 800c996:	2000      	movs	r0, #0
 800c998:	4770      	bx	lr
 800c99a:	4628      	mov	r0, r5
 800c99c:	f007 ffc6 	bl	801492c <rcl_wait_set_fini>
 800c9a0:	2800      	cmp	r0, #0
 800c9a2:	d0f1      	beq.n	800c988 <rclc_executor_fini+0x38>
 800c9a4:	f000 fce0 	bl	800d368 <rcutils_reset_error>
 800c9a8:	e7ee      	b.n	800c988 <rclc_executor_fini+0x38>
 800c9aa:	bf00      	nop
 800c9ac:	f3af 8000 	nop.w
 800c9b0:	3b9aca00 	.word	0x3b9aca00
 800c9b4:	00000000 	.word	0x00000000

0800c9b8 <rclc_executor_add_subscription>:
 800c9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ba:	f89d e018 	ldrb.w	lr, [sp, #24]
 800c9be:	b338      	cbz	r0, 800ca10 <rclc_executor_add_subscription+0x58>
 800c9c0:	b331      	cbz	r1, 800ca10 <rclc_executor_add_subscription+0x58>
 800c9c2:	b32a      	cbz	r2, 800ca10 <rclc_executor_add_subscription+0x58>
 800c9c4:	b323      	cbz	r3, 800ca10 <rclc_executor_add_subscription+0x58>
 800c9c6:	4604      	mov	r4, r0
 800c9c8:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800c9cc:	42a8      	cmp	r0, r5
 800c9ce:	d301      	bcc.n	800c9d4 <rclc_executor_add_subscription+0x1c>
 800c9d0:	2001      	movs	r0, #1
 800c9d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9d4:	6866      	ldr	r6, [r4, #4]
 800c9d6:	0187      	lsls	r7, r0, #6
 800c9d8:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800c9dc:	2500      	movs	r5, #0
 800c9de:	55f5      	strb	r5, [r6, r7]
 800c9e0:	3001      	adds	r0, #1
 800c9e2:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800c9e6:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800c9ea:	2301      	movs	r3, #1
 800c9ec:	f104 0514 	add.w	r5, r4, #20
 800c9f0:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800c9f4:	f88c e001 	strb.w	lr, [ip, #1]
 800c9f8:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800c9fc:	60e0      	str	r0, [r4, #12]
 800c9fe:	4628      	mov	r0, r5
 800ca00:	f007 ff8e 	bl	8014920 <rcl_wait_set_is_valid>
 800ca04:	b930      	cbnz	r0, 800ca14 <rclc_executor_add_subscription+0x5c>
 800ca06:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800ca08:	3301      	adds	r3, #1
 800ca0a:	2000      	movs	r0, #0
 800ca0c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800ca0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca10:	200b      	movs	r0, #11
 800ca12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca14:	4628      	mov	r0, r5
 800ca16:	f007 ff89 	bl	801492c <rcl_wait_set_fini>
 800ca1a:	2800      	cmp	r0, #0
 800ca1c:	d0f3      	beq.n	800ca06 <rclc_executor_add_subscription+0x4e>
 800ca1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ca20 <rclc_executor_add_timer>:
 800ca20:	b300      	cbz	r0, 800ca64 <rclc_executor_add_timer+0x44>
 800ca22:	b1f9      	cbz	r1, 800ca64 <rclc_executor_add_timer+0x44>
 800ca24:	b538      	push	{r3, r4, r5, lr}
 800ca26:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	4604      	mov	r4, r0
 800ca2e:	d301      	bcc.n	800ca34 <rclc_executor_add_timer+0x14>
 800ca30:	2001      	movs	r0, #1
 800ca32:	bd38      	pop	{r3, r4, r5, pc}
 800ca34:	6840      	ldr	r0, [r0, #4]
 800ca36:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800ca3a:	019d      	lsls	r5, r3, #6
 800ca3c:	6051      	str	r1, [r2, #4]
 800ca3e:	2102      	movs	r1, #2
 800ca40:	5341      	strh	r1, [r0, r5]
 800ca42:	3301      	adds	r3, #1
 800ca44:	2000      	movs	r0, #0
 800ca46:	2101      	movs	r1, #1
 800ca48:	f104 0514 	add.w	r5, r4, #20
 800ca4c:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800ca4e:	8711      	strh	r1, [r2, #56]	@ 0x38
 800ca50:	4628      	mov	r0, r5
 800ca52:	60e3      	str	r3, [r4, #12]
 800ca54:	f007 ff64 	bl	8014920 <rcl_wait_set_is_valid>
 800ca58:	b930      	cbnz	r0, 800ca68 <rclc_executor_add_timer+0x48>
 800ca5a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800ca5c:	3301      	adds	r3, #1
 800ca5e:	2000      	movs	r0, #0
 800ca60:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800ca62:	bd38      	pop	{r3, r4, r5, pc}
 800ca64:	200b      	movs	r0, #11
 800ca66:	4770      	bx	lr
 800ca68:	4628      	mov	r0, r5
 800ca6a:	f007 ff5f 	bl	801492c <rcl_wait_set_fini>
 800ca6e:	2800      	cmp	r0, #0
 800ca70:	d0f3      	beq.n	800ca5a <rclc_executor_add_timer+0x3a>
 800ca72:	bd38      	pop	{r3, r4, r5, pc}

0800ca74 <rclc_executor_prepare>:
 800ca74:	2800      	cmp	r0, #0
 800ca76:	d044      	beq.n	800cb02 <rclc_executor_prepare+0x8e>
 800ca78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca7a:	f100 0514 	add.w	r5, r0, #20
 800ca7e:	b09b      	sub	sp, #108	@ 0x6c
 800ca80:	4604      	mov	r4, r0
 800ca82:	4628      	mov	r0, r5
 800ca84:	f007 ff4c 	bl	8014920 <rcl_wait_set_is_valid>
 800ca88:	b110      	cbz	r0, 800ca90 <rclc_executor_prepare+0x1c>
 800ca8a:	2000      	movs	r0, #0
 800ca8c:	b01b      	add	sp, #108	@ 0x6c
 800ca8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca90:	4628      	mov	r0, r5
 800ca92:	f007 ff4b 	bl	801492c <rcl_wait_set_fini>
 800ca96:	2800      	cmp	r0, #0
 800ca98:	d130      	bne.n	800cafc <rclc_executor_prepare+0x88>
 800ca9a:	a80c      	add	r0, sp, #48	@ 0x30
 800ca9c:	f007 ff2c 	bl	80148f8 <rcl_get_zero_initialized_wait_set>
 800caa0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800caa4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800caa8:	46ae      	mov	lr, r5
 800caaa:	6927      	ldr	r7, [r4, #16]
 800caac:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cab0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cab4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cab8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cabc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cac0:	f8dc 3000 	ldr.w	r3, [ip]
 800cac4:	f8ce 3000 	str.w	r3, [lr]
 800cac8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800caca:	ae04      	add	r6, sp, #16
 800cacc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	6822      	ldr	r2, [r4, #0]
 800cad2:	6033      	str	r3, [r6, #0]
 800cad4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cad6:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800cad8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800cadc:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800cae0:	e9cd 2100 	strd	r2, r1, [sp]
 800cae4:	4628      	mov	r0, r5
 800cae6:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800cae8:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800caea:	f008 fa1d 	bl	8014f28 <rcl_wait_set_init>
 800caee:	2800      	cmp	r0, #0
 800caf0:	d0cc      	beq.n	800ca8c <rclc_executor_prepare+0x18>
 800caf2:	900b      	str	r0, [sp, #44]	@ 0x2c
 800caf4:	f000 fc38 	bl	800d368 <rcutils_reset_error>
 800caf8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800cafa:	e7c7      	b.n	800ca8c <rclc_executor_prepare+0x18>
 800cafc:	f000 fc34 	bl	800d368 <rcutils_reset_error>
 800cb00:	e7cb      	b.n	800ca9a <rclc_executor_prepare+0x26>
 800cb02:	200b      	movs	r0, #11
 800cb04:	4770      	bx	lr
 800cb06:	bf00      	nop

0800cb08 <rclc_executor_spin_some.part.0>:
 800cb08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb0c:	f100 0614 	add.w	r6, r0, #20
 800cb10:	b083      	sub	sp, #12
 800cb12:	4691      	mov	r9, r2
 800cb14:	4698      	mov	r8, r3
 800cb16:	4605      	mov	r5, r0
 800cb18:	f7ff ffac 	bl	800ca74 <rclc_executor_prepare>
 800cb1c:	4630      	mov	r0, r6
 800cb1e:	f007 ffd1 	bl	8014ac4 <rcl_wait_set_clear>
 800cb22:	4607      	mov	r7, r0
 800cb24:	2800      	cmp	r0, #0
 800cb26:	f040 80ed 	bne.w	800cd04 <rclc_executor_spin_some.part.0+0x1fc>
 800cb2a:	68ab      	ldr	r3, [r5, #8]
 800cb2c:	4604      	mov	r4, r0
 800cb2e:	b303      	cbz	r3, 800cb72 <rclc_executor_spin_some.part.0+0x6a>
 800cb30:	6869      	ldr	r1, [r5, #4]
 800cb32:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800cb36:	01a2      	lsls	r2, r4, #6
 800cb38:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800cb3c:	b1cb      	cbz	r3, 800cb72 <rclc_executor_spin_some.part.0+0x6a>
 800cb3e:	5c8b      	ldrb	r3, [r1, r2]
 800cb40:	2b0a      	cmp	r3, #10
 800cb42:	f200 80d8 	bhi.w	800ccf6 <rclc_executor_spin_some.part.0+0x1ee>
 800cb46:	e8df f003 	tbb	[pc, r3]
 800cb4a:	9c9c      	.short	0x9c9c
 800cb4c:	068c8ca7 	.word	0x068c8ca7
 800cb50:	bdc90606 	.word	0xbdc90606
 800cb54:	b2          	.byte	0xb2
 800cb55:	00          	.byte	0x00
 800cb56:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cb5a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cb5e:	4630      	mov	r0, r6
 800cb60:	f008 faf8 	bl	8015154 <rcl_wait_set_add_service>
 800cb64:	2800      	cmp	r0, #0
 800cb66:	f040 8086 	bne.w	800cc76 <rclc_executor_spin_some.part.0+0x16e>
 800cb6a:	68ab      	ldr	r3, [r5, #8]
 800cb6c:	3401      	adds	r4, #1
 800cb6e:	429c      	cmp	r4, r3
 800cb70:	d3de      	bcc.n	800cb30 <rclc_executor_spin_some.part.0+0x28>
 800cb72:	4643      	mov	r3, r8
 800cb74:	464a      	mov	r2, r9
 800cb76:	4630      	mov	r0, r6
 800cb78:	f008 fb1a 	bl	80151b0 <rcl_wait>
 800cb7c:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	f000 80c7 	beq.w	800cd14 <rclc_executor_spin_some.part.0+0x20c>
 800cb86:	2b01      	cmp	r3, #1
 800cb88:	f040 80b5 	bne.w	800ccf6 <rclc_executor_spin_some.part.0+0x1ee>
 800cb8c:	68ab      	ldr	r3, [r5, #8]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	f000 8159 	beq.w	800ce46 <rclc_executor_spin_some.part.0+0x33e>
 800cb94:	2400      	movs	r4, #0
 800cb96:	46a0      	mov	r8, r4
 800cb98:	f240 1991 	movw	r9, #401	@ 0x191
 800cb9c:	e00a      	b.n	800cbb4 <rclc_executor_spin_some.part.0+0xac>
 800cb9e:	f7ff fb1d 	bl	800c1dc <_rclc_check_for_new_data>
 800cba2:	4604      	mov	r4, r0
 800cba4:	b110      	cbz	r0, 800cbac <rclc_executor_spin_some.part.0+0xa4>
 800cba6:	4548      	cmp	r0, r9
 800cba8:	f040 80b2 	bne.w	800cd10 <rclc_executor_spin_some.part.0+0x208>
 800cbac:	68ab      	ldr	r3, [r5, #8]
 800cbae:	4598      	cmp	r8, r3
 800cbb0:	f080 8126 	bcs.w	800ce00 <rclc_executor_spin_some.part.0+0x2f8>
 800cbb4:	686a      	ldr	r2, [r5, #4]
 800cbb6:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800cbba:	4631      	mov	r1, r6
 800cbbc:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800cbc0:	f108 0801 	add.w	r8, r8, #1
 800cbc4:	f1bc 0f00 	cmp.w	ip, #0
 800cbc8:	d1e9      	bne.n	800cb9e <rclc_executor_spin_some.part.0+0x96>
 800cbca:	4619      	mov	r1, r3
 800cbcc:	4610      	mov	r0, r2
 800cbce:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800cbd2:	4798      	blx	r3
 800cbd4:	2800      	cmp	r0, #0
 800cbd6:	f000 809b 	beq.w	800cd10 <rclc_executor_spin_some.part.0+0x208>
 800cbda:	68ab      	ldr	r3, [r5, #8]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	f000 8097 	beq.w	800cd10 <rclc_executor_spin_some.part.0+0x208>
 800cbe2:	f04f 0800 	mov.w	r8, #0
 800cbe6:	f240 1991 	movw	r9, #401	@ 0x191
 800cbea:	e009      	b.n	800cc00 <rclc_executor_spin_some.part.0+0xf8>
 800cbec:	f7ff fb44 	bl	800c278 <_rclc_take_new_data>
 800cbf0:	4604      	mov	r4, r0
 800cbf2:	b110      	cbz	r0, 800cbfa <rclc_executor_spin_some.part.0+0xf2>
 800cbf4:	4548      	cmp	r0, r9
 800cbf6:	f040 808b 	bne.w	800cd10 <rclc_executor_spin_some.part.0+0x208>
 800cbfa:	68ab      	ldr	r3, [r5, #8]
 800cbfc:	4598      	cmp	r8, r3
 800cbfe:	d209      	bcs.n	800cc14 <rclc_executor_spin_some.part.0+0x10c>
 800cc00:	6868      	ldr	r0, [r5, #4]
 800cc02:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800cc06:	4631      	mov	r1, r6
 800cc08:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800cc0c:	f108 0801 	add.w	r8, r8, #1
 800cc10:	2a00      	cmp	r2, #0
 800cc12:	d1eb      	bne.n	800cbec <rclc_executor_spin_some.part.0+0xe4>
 800cc14:	2600      	movs	r6, #0
 800cc16:	b97b      	cbnz	r3, 800cc38 <rclc_executor_spin_some.part.0+0x130>
 800cc18:	e07a      	b.n	800cd10 <rclc_executor_spin_some.part.0+0x208>
 800cc1a:	f812 200c 	ldrb.w	r2, [r2, ip]
 800cc1e:	2a08      	cmp	r2, #8
 800cc20:	f000 80fd 	beq.w	800ce1e <rclc_executor_spin_some.part.0+0x316>
 800cc24:	2a09      	cmp	r2, #9
 800cc26:	f000 80ef 	beq.w	800ce08 <rclc_executor_spin_some.part.0+0x300>
 800cc2a:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800cc2e:	b98a      	cbnz	r2, 800cc54 <rclc_executor_spin_some.part.0+0x14c>
 800cc30:	3601      	adds	r6, #1
 800cc32:	429e      	cmp	r6, r3
 800cc34:	d262      	bcs.n	800ccfc <rclc_executor_spin_some.part.0+0x1f4>
 800cc36:	2400      	movs	r4, #0
 800cc38:	686a      	ldr	r2, [r5, #4]
 800cc3a:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800cc3e:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800cc42:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800cc46:	2900      	cmp	r1, #0
 800cc48:	d062      	beq.n	800cd10 <rclc_executor_spin_some.part.0+0x208>
 800cc4a:	7841      	ldrb	r1, [r0, #1]
 800cc4c:	2900      	cmp	r1, #0
 800cc4e:	d0e4      	beq.n	800cc1a <rclc_executor_spin_some.part.0+0x112>
 800cc50:	2901      	cmp	r1, #1
 800cc52:	d1ed      	bne.n	800cc30 <rclc_executor_spin_some.part.0+0x128>
 800cc54:	f7ff fc84 	bl	800c560 <_rclc_execute.part.0>
 800cc58:	2800      	cmp	r0, #0
 800cc5a:	f040 80b6 	bne.w	800cdca <rclc_executor_spin_some.part.0+0x2c2>
 800cc5e:	68ab      	ldr	r3, [r5, #8]
 800cc60:	e7e6      	b.n	800cc30 <rclc_executor_spin_some.part.0+0x128>
 800cc62:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cc66:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cc6a:	4630      	mov	r0, r6
 800cc6c:	f008 fa46 	bl	80150fc <rcl_wait_set_add_client>
 800cc70:	2800      	cmp	r0, #0
 800cc72:	f43f af7a 	beq.w	800cb6a <rclc_executor_spin_some.part.0+0x62>
 800cc76:	9001      	str	r0, [sp, #4]
 800cc78:	f000 fb76 	bl	800d368 <rcutils_reset_error>
 800cc7c:	9801      	ldr	r0, [sp, #4]
 800cc7e:	4607      	mov	r7, r0
 800cc80:	e03c      	b.n	800ccfc <rclc_executor_spin_some.part.0+0x1f4>
 800cc82:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cc86:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cc8a:	4630      	mov	r0, r6
 800cc8c:	f007 feee 	bl	8014a6c <rcl_wait_set_add_subscription>
 800cc90:	2800      	cmp	r0, #0
 800cc92:	f43f af6a 	beq.w	800cb6a <rclc_executor_spin_some.part.0+0x62>
 800cc96:	e7ee      	b.n	800cc76 <rclc_executor_spin_some.part.0+0x16e>
 800cc98:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cc9c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cca0:	4630      	mov	r0, r6
 800cca2:	f008 f9fb 	bl	801509c <rcl_wait_set_add_timer>
 800cca6:	2800      	cmp	r0, #0
 800cca8:	f43f af5f 	beq.w	800cb6a <rclc_executor_spin_some.part.0+0x62>
 800ccac:	e7e3      	b.n	800cc76 <rclc_executor_spin_some.part.0+0x16e>
 800ccae:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ccb2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ccb6:	4630      	mov	r0, r6
 800ccb8:	f008 f9c4 	bl	8015044 <rcl_wait_set_add_guard_condition>
 800ccbc:	2800      	cmp	r0, #0
 800ccbe:	f43f af54 	beq.w	800cb6a <rclc_executor_spin_some.part.0+0x62>
 800ccc2:	e7d8      	b.n	800cc76 <rclc_executor_spin_some.part.0+0x16e>
 800ccc4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ccc8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cccc:	3110      	adds	r1, #16
 800ccce:	4630      	mov	r0, r6
 800ccd0:	f008 ff46 	bl	8015b60 <rcl_action_wait_set_add_action_server>
 800ccd4:	2800      	cmp	r0, #0
 800ccd6:	f43f af48 	beq.w	800cb6a <rclc_executor_spin_some.part.0+0x62>
 800ccda:	e7cc      	b.n	800cc76 <rclc_executor_spin_some.part.0+0x16e>
 800ccdc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cce0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cce4:	3110      	adds	r1, #16
 800cce6:	2300      	movs	r3, #0
 800cce8:	4630      	mov	r0, r6
 800ccea:	f008 fd11 	bl	8015710 <rcl_action_wait_set_add_action_client>
 800ccee:	2800      	cmp	r0, #0
 800ccf0:	f43f af3b 	beq.w	800cb6a <rclc_executor_spin_some.part.0+0x62>
 800ccf4:	e7bf      	b.n	800cc76 <rclc_executor_spin_some.part.0+0x16e>
 800ccf6:	f000 fb37 	bl	800d368 <rcutils_reset_error>
 800ccfa:	2701      	movs	r7, #1
 800ccfc:	4638      	mov	r0, r7
 800ccfe:	b003      	add	sp, #12
 800cd00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd04:	f000 fb30 	bl	800d368 <rcutils_reset_error>
 800cd08:	4638      	mov	r0, r7
 800cd0a:	b003      	add	sp, #12
 800cd0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd10:	4627      	mov	r7, r4
 800cd12:	e7f3      	b.n	800ccfc <rclc_executor_spin_some.part.0+0x1f4>
 800cd14:	68ab      	ldr	r3, [r5, #8]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	f000 8092 	beq.w	800ce40 <rclc_executor_spin_some.part.0+0x338>
 800cd1c:	2400      	movs	r4, #0
 800cd1e:	46a0      	mov	r8, r4
 800cd20:	f240 1991 	movw	r9, #401	@ 0x191
 800cd24:	e008      	b.n	800cd38 <rclc_executor_spin_some.part.0+0x230>
 800cd26:	f7ff fa59 	bl	800c1dc <_rclc_check_for_new_data>
 800cd2a:	4604      	mov	r4, r0
 800cd2c:	b108      	cbz	r0, 800cd32 <rclc_executor_spin_some.part.0+0x22a>
 800cd2e:	4548      	cmp	r0, r9
 800cd30:	d1ee      	bne.n	800cd10 <rclc_executor_spin_some.part.0+0x208>
 800cd32:	68ab      	ldr	r3, [r5, #8]
 800cd34:	4598      	cmp	r8, r3
 800cd36:	d265      	bcs.n	800ce04 <rclc_executor_spin_some.part.0+0x2fc>
 800cd38:	686a      	ldr	r2, [r5, #4]
 800cd3a:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800cd3e:	4631      	mov	r1, r6
 800cd40:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800cd44:	f108 0801 	add.w	r8, r8, #1
 800cd48:	f1bc 0f00 	cmp.w	ip, #0
 800cd4c:	d1eb      	bne.n	800cd26 <rclc_executor_spin_some.part.0+0x21e>
 800cd4e:	4619      	mov	r1, r3
 800cd50:	4610      	mov	r0, r2
 800cd52:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800cd56:	4798      	blx	r3
 800cd58:	2800      	cmp	r0, #0
 800cd5a:	d0d9      	beq.n	800cd10 <rclc_executor_spin_some.part.0+0x208>
 800cd5c:	68ab      	ldr	r3, [r5, #8]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d0d6      	beq.n	800cd10 <rclc_executor_spin_some.part.0+0x208>
 800cd62:	f04f 0800 	mov.w	r8, #0
 800cd66:	f240 1991 	movw	r9, #401	@ 0x191
 800cd6a:	f240 2a59 	movw	sl, #601	@ 0x259
 800cd6e:	e00e      	b.n	800cd8e <rclc_executor_spin_some.part.0+0x286>
 800cd70:	f813 300b 	ldrb.w	r3, [r3, fp]
 800cd74:	2b08      	cmp	r3, #8
 800cd76:	d033      	beq.n	800cde0 <rclc_executor_spin_some.part.0+0x2d8>
 800cd78:	2b09      	cmp	r3, #9
 800cd7a:	d028      	beq.n	800cdce <rclc_executor_spin_some.part.0+0x2c6>
 800cd7c:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800cd80:	b9fb      	cbnz	r3, 800cdc2 <rclc_executor_spin_some.part.0+0x2ba>
 800cd82:	68ab      	ldr	r3, [r5, #8]
 800cd84:	f108 0801 	add.w	r8, r8, #1
 800cd88:	4598      	cmp	r8, r3
 800cd8a:	d2b7      	bcs.n	800ccfc <rclc_executor_spin_some.part.0+0x1f4>
 800cd8c:	2400      	movs	r4, #0
 800cd8e:	6868      	ldr	r0, [r5, #4]
 800cd90:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800cd94:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800cd98:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d0b7      	beq.n	800cd10 <rclc_executor_spin_some.part.0+0x208>
 800cda0:	4631      	mov	r1, r6
 800cda2:	f7ff fa69 	bl	800c278 <_rclc_take_new_data>
 800cda6:	b118      	cbz	r0, 800cdb0 <rclc_executor_spin_some.part.0+0x2a8>
 800cda8:	4548      	cmp	r0, r9
 800cdaa:	d001      	beq.n	800cdb0 <rclc_executor_spin_some.part.0+0x2a8>
 800cdac:	4550      	cmp	r0, sl
 800cdae:	d10c      	bne.n	800cdca <rclc_executor_spin_some.part.0+0x2c2>
 800cdb0:	686b      	ldr	r3, [r5, #4]
 800cdb2:	eb13 000b 	adds.w	r0, r3, fp
 800cdb6:	d021      	beq.n	800cdfc <rclc_executor_spin_some.part.0+0x2f4>
 800cdb8:	7842      	ldrb	r2, [r0, #1]
 800cdba:	2a00      	cmp	r2, #0
 800cdbc:	d0d8      	beq.n	800cd70 <rclc_executor_spin_some.part.0+0x268>
 800cdbe:	2a01      	cmp	r2, #1
 800cdc0:	d1df      	bne.n	800cd82 <rclc_executor_spin_some.part.0+0x27a>
 800cdc2:	f7ff fbcd 	bl	800c560 <_rclc_execute.part.0>
 800cdc6:	2800      	cmp	r0, #0
 800cdc8:	d0db      	beq.n	800cd82 <rclc_executor_spin_some.part.0+0x27a>
 800cdca:	4607      	mov	r7, r0
 800cdcc:	e796      	b.n	800ccfc <rclc_executor_spin_some.part.0+0x1f4>
 800cdce:	6843      	ldr	r3, [r0, #4]
 800cdd0:	6a1a      	ldr	r2, [r3, #32]
 800cdd2:	2a00      	cmp	r2, #0
 800cdd4:	d1f5      	bne.n	800cdc2 <rclc_executor_spin_some.part.0+0x2ba>
 800cdd6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d0d1      	beq.n	800cd82 <rclc_executor_spin_some.part.0+0x27a>
 800cdde:	e7f0      	b.n	800cdc2 <rclc_executor_spin_some.part.0+0x2ba>
 800cde0:	6843      	ldr	r3, [r0, #4]
 800cde2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cde4:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800cde8:	d1eb      	bne.n	800cdc2 <rclc_executor_spin_some.part.0+0x2ba>
 800cdea:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800cdee:	2a00      	cmp	r2, #0
 800cdf0:	d1e7      	bne.n	800cdc2 <rclc_executor_spin_some.part.0+0x2ba>
 800cdf2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d0c3      	beq.n	800cd82 <rclc_executor_spin_some.part.0+0x27a>
 800cdfa:	e7e2      	b.n	800cdc2 <rclc_executor_spin_some.part.0+0x2ba>
 800cdfc:	270b      	movs	r7, #11
 800cdfe:	e77d      	b.n	800ccfc <rclc_executor_spin_some.part.0+0x1f4>
 800ce00:	686a      	ldr	r2, [r5, #4]
 800ce02:	e6e2      	b.n	800cbca <rclc_executor_spin_some.part.0+0xc2>
 800ce04:	686a      	ldr	r2, [r5, #4]
 800ce06:	e7a2      	b.n	800cd4e <rclc_executor_spin_some.part.0+0x246>
 800ce08:	6842      	ldr	r2, [r0, #4]
 800ce0a:	6a11      	ldr	r1, [r2, #32]
 800ce0c:	2900      	cmp	r1, #0
 800ce0e:	f47f af21 	bne.w	800cc54 <rclc_executor_spin_some.part.0+0x14c>
 800ce12:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800ce16:	2a00      	cmp	r2, #0
 800ce18:	f43f af0a 	beq.w	800cc30 <rclc_executor_spin_some.part.0+0x128>
 800ce1c:	e71a      	b.n	800cc54 <rclc_executor_spin_some.part.0+0x14c>
 800ce1e:	6842      	ldr	r2, [r0, #4]
 800ce20:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800ce22:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800ce26:	f47f af15 	bne.w	800cc54 <rclc_executor_spin_some.part.0+0x14c>
 800ce2a:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800ce2e:	2900      	cmp	r1, #0
 800ce30:	f47f af10 	bne.w	800cc54 <rclc_executor_spin_some.part.0+0x14c>
 800ce34:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800ce38:	2a00      	cmp	r2, #0
 800ce3a:	f43f aef9 	beq.w	800cc30 <rclc_executor_spin_some.part.0+0x128>
 800ce3e:	e709      	b.n	800cc54 <rclc_executor_spin_some.part.0+0x14c>
 800ce40:	686a      	ldr	r2, [r5, #4]
 800ce42:	461c      	mov	r4, r3
 800ce44:	e783      	b.n	800cd4e <rclc_executor_spin_some.part.0+0x246>
 800ce46:	686a      	ldr	r2, [r5, #4]
 800ce48:	461c      	mov	r4, r3
 800ce4a:	e6be      	b.n	800cbca <rclc_executor_spin_some.part.0+0xc2>

0800ce4c <rclc_executor_spin_some>:
 800ce4c:	b190      	cbz	r0, 800ce74 <rclc_executor_spin_some+0x28>
 800ce4e:	b570      	push	{r4, r5, r6, lr}
 800ce50:	4604      	mov	r4, r0
 800ce52:	6800      	ldr	r0, [r0, #0]
 800ce54:	4616      	mov	r6, r2
 800ce56:	461d      	mov	r5, r3
 800ce58:	f7fe f910 	bl	800b07c <rcl_context_is_valid>
 800ce5c:	b130      	cbz	r0, 800ce6c <rclc_executor_spin_some+0x20>
 800ce5e:	4632      	mov	r2, r6
 800ce60:	462b      	mov	r3, r5
 800ce62:	4620      	mov	r0, r4
 800ce64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ce68:	f7ff be4e 	b.w	800cb08 <rclc_executor_spin_some.part.0>
 800ce6c:	f000 fa7c 	bl	800d368 <rcutils_reset_error>
 800ce70:	2001      	movs	r0, #1
 800ce72:	bd70      	pop	{r4, r5, r6, pc}
 800ce74:	200b      	movs	r0, #11
 800ce76:	4770      	bx	lr

0800ce78 <rclc_executor_handle_counters_zero_init>:
 800ce78:	b130      	cbz	r0, 800ce88 <rclc_executor_handle_counters_zero_init+0x10>
 800ce7a:	b508      	push	{r3, lr}
 800ce7c:	2220      	movs	r2, #32
 800ce7e:	2100      	movs	r1, #0
 800ce80:	f00b fd74 	bl	801896c <memset>
 800ce84:	2000      	movs	r0, #0
 800ce86:	bd08      	pop	{r3, pc}
 800ce88:	200b      	movs	r0, #11
 800ce8a:	4770      	bx	lr
 800ce8c:	0000      	movs	r0, r0
	...

0800ce90 <rclc_executor_handle_init>:
 800ce90:	b168      	cbz	r0, 800ceae <rclc_executor_handle_init+0x1e>
 800ce92:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800ceb8 <rclc_executor_handle_init+0x28>
 800ce96:	2300      	movs	r3, #0
 800ce98:	220b      	movs	r2, #11
 800ce9a:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800ce9e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800cea2:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800cea6:	8002      	strh	r2, [r0, #0]
 800cea8:	8703      	strh	r3, [r0, #56]	@ 0x38
 800ceaa:	4618      	mov	r0, r3
 800ceac:	4770      	bx	lr
 800ceae:	200b      	movs	r0, #11
 800ceb0:	4770      	bx	lr
 800ceb2:	bf00      	nop
 800ceb4:	f3af 8000 	nop.w
	...

0800cec0 <rclc_support_init_with_options>:
 800cec0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cec4:	b083      	sub	sp, #12
 800cec6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800cec8:	b340      	cbz	r0, 800cf1c <rclc_support_init_with_options+0x5c>
 800ceca:	461d      	mov	r5, r3
 800cecc:	b333      	cbz	r3, 800cf1c <rclc_support_init_with_options+0x5c>
 800cece:	b32e      	cbz	r6, 800cf1c <rclc_support_init_with_options+0x5c>
 800ced0:	46e9      	mov	r9, sp
 800ced2:	4604      	mov	r4, r0
 800ced4:	4648      	mov	r0, r9
 800ced6:	460f      	mov	r7, r1
 800ced8:	4690      	mov	r8, r2
 800ceda:	f7fe f8c5 	bl	800b068 <rcl_get_zero_initialized_context>
 800cede:	e899 0003 	ldmia.w	r9, {r0, r1}
 800cee2:	462a      	mov	r2, r5
 800cee4:	e884 0003 	stmia.w	r4, {r0, r1}
 800cee8:	4623      	mov	r3, r4
 800ceea:	4641      	mov	r1, r8
 800ceec:	4638      	mov	r0, r7
 800ceee:	f007 f937 	bl	8014160 <rcl_init>
 800cef2:	4605      	mov	r5, r0
 800cef4:	b960      	cbnz	r0, 800cf10 <rclc_support_init_with_options+0x50>
 800cef6:	60a6      	str	r6, [r4, #8]
 800cef8:	4632      	mov	r2, r6
 800cefa:	f104 010c 	add.w	r1, r4, #12
 800cefe:	2003      	movs	r0, #3
 800cf00:	f007 fb84 	bl	801460c <rcl_clock_init>
 800cf04:	4605      	mov	r5, r0
 800cf06:	b918      	cbnz	r0, 800cf10 <rclc_support_init_with_options+0x50>
 800cf08:	4628      	mov	r0, r5
 800cf0a:	b003      	add	sp, #12
 800cf0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf10:	f000 fa2a 	bl	800d368 <rcutils_reset_error>
 800cf14:	4628      	mov	r0, r5
 800cf16:	b003      	add	sp, #12
 800cf18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf1c:	250b      	movs	r5, #11
 800cf1e:	4628      	mov	r0, r5
 800cf20:	b003      	add	sp, #12
 800cf22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf26:	bf00      	nop

0800cf28 <rclc_support_fini>:
 800cf28:	b538      	push	{r3, r4, r5, lr}
 800cf2a:	b320      	cbz	r0, 800cf76 <rclc_support_fini+0x4e>
 800cf2c:	4604      	mov	r4, r0
 800cf2e:	300c      	adds	r0, #12
 800cf30:	f007 fbe4 	bl	80146fc <rcl_clock_fini>
 800cf34:	4605      	mov	r5, r0
 800cf36:	b948      	cbnz	r0, 800cf4c <rclc_support_fini+0x24>
 800cf38:	4620      	mov	r0, r4
 800cf3a:	f007 f9ff 	bl	801433c <rcl_shutdown>
 800cf3e:	b968      	cbnz	r0, 800cf5c <rclc_support_fini+0x34>
 800cf40:	4620      	mov	r0, r4
 800cf42:	f7fe f907 	bl	800b154 <rcl_context_fini>
 800cf46:	b988      	cbnz	r0, 800cf6c <rclc_support_fini+0x44>
 800cf48:	4628      	mov	r0, r5
 800cf4a:	bd38      	pop	{r3, r4, r5, pc}
 800cf4c:	f000 fa0c 	bl	800d368 <rcutils_reset_error>
 800cf50:	4620      	mov	r0, r4
 800cf52:	2501      	movs	r5, #1
 800cf54:	f007 f9f2 	bl	801433c <rcl_shutdown>
 800cf58:	2800      	cmp	r0, #0
 800cf5a:	d0f1      	beq.n	800cf40 <rclc_support_fini+0x18>
 800cf5c:	f000 fa04 	bl	800d368 <rcutils_reset_error>
 800cf60:	4620      	mov	r0, r4
 800cf62:	2501      	movs	r5, #1
 800cf64:	f7fe f8f6 	bl	800b154 <rcl_context_fini>
 800cf68:	2800      	cmp	r0, #0
 800cf6a:	d0ed      	beq.n	800cf48 <rclc_support_fini+0x20>
 800cf6c:	2501      	movs	r5, #1
 800cf6e:	f000 f9fb 	bl	800d368 <rcutils_reset_error>
 800cf72:	4628      	mov	r0, r5
 800cf74:	bd38      	pop	{r3, r4, r5, pc}
 800cf76:	250b      	movs	r5, #11
 800cf78:	4628      	mov	r0, r5
 800cf7a:	bd38      	pop	{r3, r4, r5, pc}

0800cf7c <rclc_node_init_default>:
 800cf7c:	b3b8      	cbz	r0, 800cfee <rclc_node_init_default+0x72>
 800cf7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf82:	460d      	mov	r5, r1
 800cf84:	b0a1      	sub	sp, #132	@ 0x84
 800cf86:	b329      	cbz	r1, 800cfd4 <rclc_node_init_default+0x58>
 800cf88:	4616      	mov	r6, r2
 800cf8a:	b31a      	cbz	r2, 800cfd4 <rclc_node_init_default+0x58>
 800cf8c:	461f      	mov	r7, r3
 800cf8e:	b30b      	cbz	r3, 800cfd4 <rclc_node_init_default+0x58>
 800cf90:	f10d 0810 	add.w	r8, sp, #16
 800cf94:	4604      	mov	r4, r0
 800cf96:	4640      	mov	r0, r8
 800cf98:	f7fe f9f6 	bl	800b388 <rcl_get_zero_initialized_node>
 800cf9c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800cfa0:	f10d 0918 	add.w	r9, sp, #24
 800cfa4:	e884 0003 	stmia.w	r4, {r0, r1}
 800cfa8:	4648      	mov	r0, r9
 800cfaa:	f7fe fb97 	bl	800b6dc <rcl_node_get_default_options>
 800cfae:	4640      	mov	r0, r8
 800cfb0:	f7fe f9ea 	bl	800b388 <rcl_get_zero_initialized_node>
 800cfb4:	f8cd 9000 	str.w	r9, [sp]
 800cfb8:	e898 0003 	ldmia.w	r8, {r0, r1}
 800cfbc:	463b      	mov	r3, r7
 800cfbe:	e884 0003 	stmia.w	r4, {r0, r1}
 800cfc2:	4632      	mov	r2, r6
 800cfc4:	4629      	mov	r1, r5
 800cfc6:	4620      	mov	r0, r4
 800cfc8:	f7fe f9e8 	bl	800b39c <rcl_node_init>
 800cfcc:	b930      	cbnz	r0, 800cfdc <rclc_node_init_default+0x60>
 800cfce:	b021      	add	sp, #132	@ 0x84
 800cfd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cfd4:	200b      	movs	r0, #11
 800cfd6:	b021      	add	sp, #132	@ 0x84
 800cfd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cfdc:	9003      	str	r0, [sp, #12]
 800cfde:	f000 f9c3 	bl	800d368 <rcutils_reset_error>
 800cfe2:	f000 f9c1 	bl	800d368 <rcutils_reset_error>
 800cfe6:	9803      	ldr	r0, [sp, #12]
 800cfe8:	b021      	add	sp, #132	@ 0x84
 800cfea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cfee:	200b      	movs	r0, #11
 800cff0:	4770      	bx	lr
 800cff2:	bf00      	nop

0800cff4 <rclc_publisher_init_default>:
 800cff4:	b368      	cbz	r0, 800d052 <rclc_publisher_init_default+0x5e>
 800cff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cffa:	460d      	mov	r5, r1
 800cffc:	b0a0      	sub	sp, #128	@ 0x80
 800cffe:	b321      	cbz	r1, 800d04a <rclc_publisher_init_default+0x56>
 800d000:	4616      	mov	r6, r2
 800d002:	b312      	cbz	r2, 800d04a <rclc_publisher_init_default+0x56>
 800d004:	461f      	mov	r7, r3
 800d006:	b303      	cbz	r3, 800d04a <rclc_publisher_init_default+0x56>
 800d008:	4604      	mov	r4, r0
 800d00a:	f7fe fb93 	bl	800b734 <rcl_get_zero_initialized_publisher>
 800d00e:	f10d 0810 	add.w	r8, sp, #16
 800d012:	6020      	str	r0, [r4, #0]
 800d014:	4640      	mov	r0, r8
 800d016:	f7fe fc55 	bl	800b8c4 <rcl_publisher_get_default_options>
 800d01a:	490f      	ldr	r1, [pc, #60]	@ (800d058 <rclc_publisher_init_default+0x64>)
 800d01c:	2250      	movs	r2, #80	@ 0x50
 800d01e:	4640      	mov	r0, r8
 800d020:	f00b fdcb 	bl	8018bba <memcpy>
 800d024:	f8cd 8000 	str.w	r8, [sp]
 800d028:	463b      	mov	r3, r7
 800d02a:	4632      	mov	r2, r6
 800d02c:	4629      	mov	r1, r5
 800d02e:	4620      	mov	r0, r4
 800d030:	f7fe fb86 	bl	800b740 <rcl_publisher_init>
 800d034:	b910      	cbnz	r0, 800d03c <rclc_publisher_init_default+0x48>
 800d036:	b020      	add	sp, #128	@ 0x80
 800d038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d03c:	9003      	str	r0, [sp, #12]
 800d03e:	f000 f993 	bl	800d368 <rcutils_reset_error>
 800d042:	9803      	ldr	r0, [sp, #12]
 800d044:	b020      	add	sp, #128	@ 0x80
 800d046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d04a:	200b      	movs	r0, #11
 800d04c:	b020      	add	sp, #128	@ 0x80
 800d04e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d052:	200b      	movs	r0, #11
 800d054:	4770      	bx	lr
 800d056:	bf00      	nop
 800d058:	0801a118 	.word	0x0801a118

0800d05c <rclc_subscription_init_default>:
 800d05c:	b368      	cbz	r0, 800d0ba <rclc_subscription_init_default+0x5e>
 800d05e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d062:	460d      	mov	r5, r1
 800d064:	b0a0      	sub	sp, #128	@ 0x80
 800d066:	b321      	cbz	r1, 800d0b2 <rclc_subscription_init_default+0x56>
 800d068:	4616      	mov	r6, r2
 800d06a:	b312      	cbz	r2, 800d0b2 <rclc_subscription_init_default+0x56>
 800d06c:	461f      	mov	r7, r3
 800d06e:	b303      	cbz	r3, 800d0b2 <rclc_subscription_init_default+0x56>
 800d070:	4604      	mov	r4, r0
 800d072:	f7fe fca1 	bl	800b9b8 <rcl_get_zero_initialized_subscription>
 800d076:	f10d 0810 	add.w	r8, sp, #16
 800d07a:	6020      	str	r0, [r4, #0]
 800d07c:	4640      	mov	r0, r8
 800d07e:	f7fe fd9d 	bl	800bbbc <rcl_subscription_get_default_options>
 800d082:	490f      	ldr	r1, [pc, #60]	@ (800d0c0 <rclc_subscription_init_default+0x64>)
 800d084:	2250      	movs	r2, #80	@ 0x50
 800d086:	4640      	mov	r0, r8
 800d088:	f00b fd97 	bl	8018bba <memcpy>
 800d08c:	f8cd 8000 	str.w	r8, [sp]
 800d090:	463b      	mov	r3, r7
 800d092:	4632      	mov	r2, r6
 800d094:	4629      	mov	r1, r5
 800d096:	4620      	mov	r0, r4
 800d098:	f7fe fc94 	bl	800b9c4 <rcl_subscription_init>
 800d09c:	b910      	cbnz	r0, 800d0a4 <rclc_subscription_init_default+0x48>
 800d09e:	b020      	add	sp, #128	@ 0x80
 800d0a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0a4:	9003      	str	r0, [sp, #12]
 800d0a6:	f000 f95f 	bl	800d368 <rcutils_reset_error>
 800d0aa:	9803      	ldr	r0, [sp, #12]
 800d0ac:	b020      	add	sp, #128	@ 0x80
 800d0ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0b2:	200b      	movs	r0, #11
 800d0b4:	b020      	add	sp, #128	@ 0x80
 800d0b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0ba:	200b      	movs	r0, #11
 800d0bc:	4770      	bx	lr
 800d0be:	bf00      	nop
 800d0c0:	0801a168 	.word	0x0801a168

0800d0c4 <rclc_timer_init_default>:
 800d0c4:	b360      	cbz	r0, 800d120 <rclc_timer_init_default+0x5c>
 800d0c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0ca:	460e      	mov	r6, r1
 800d0cc:	b08a      	sub	sp, #40	@ 0x28
 800d0ce:	b319      	cbz	r1, 800d118 <rclc_timer_init_default+0x54>
 800d0d0:	4690      	mov	r8, r2
 800d0d2:	461f      	mov	r7, r3
 800d0d4:	4605      	mov	r5, r0
 800d0d6:	f7fe fea1 	bl	800be1c <rcl_get_zero_initialized_timer>
 800d0da:	68b4      	ldr	r4, [r6, #8]
 800d0dc:	6028      	str	r0, [r5, #0]
 800d0de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d0e0:	f10d 0c0c 	add.w	ip, sp, #12
 800d0e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d0e8:	6823      	ldr	r3, [r4, #0]
 800d0ea:	f8cc 3000 	str.w	r3, [ip]
 800d0ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d0f0:	9302      	str	r3, [sp, #8]
 800d0f2:	e9cd 8700 	strd	r8, r7, [sp]
 800d0f6:	4628      	mov	r0, r5
 800d0f8:	4632      	mov	r2, r6
 800d0fa:	f106 010c 	add.w	r1, r6, #12
 800d0fe:	f7fe fe93 	bl	800be28 <rcl_timer_init>
 800d102:	b910      	cbnz	r0, 800d10a <rclc_timer_init_default+0x46>
 800d104:	b00a      	add	sp, #40	@ 0x28
 800d106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d10a:	9009      	str	r0, [sp, #36]	@ 0x24
 800d10c:	f000 f92c 	bl	800d368 <rcutils_reset_error>
 800d110:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d112:	b00a      	add	sp, #40	@ 0x28
 800d114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d118:	200b      	movs	r0, #11
 800d11a:	b00a      	add	sp, #40	@ 0x28
 800d11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d120:	200b      	movs	r0, #11
 800d122:	4770      	bx	lr

0800d124 <__default_zero_allocate>:
 800d124:	f00b b832 	b.w	801818c <calloc>

0800d128 <__default_reallocate>:
 800d128:	f00b b9be 	b.w	80184a8 <realloc>

0800d12c <__default_deallocate>:
 800d12c:	f00b b89a 	b.w	8018264 <free>

0800d130 <__default_allocate>:
 800d130:	f00b b890 	b.w	8018254 <malloc>

0800d134 <rcutils_get_zero_initialized_allocator>:
 800d134:	b510      	push	{r4, lr}
 800d136:	4c05      	ldr	r4, [pc, #20]	@ (800d14c <rcutils_get_zero_initialized_allocator+0x18>)
 800d138:	4686      	mov	lr, r0
 800d13a:	4684      	mov	ip, r0
 800d13c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d13e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d142:	6823      	ldr	r3, [r4, #0]
 800d144:	f8cc 3000 	str.w	r3, [ip]
 800d148:	4670      	mov	r0, lr
 800d14a:	bd10      	pop	{r4, pc}
 800d14c:	0801a1b8 	.word	0x0801a1b8

0800d150 <rcutils_set_default_allocator>:
 800d150:	b1a8      	cbz	r0, 800d17e <rcutils_set_default_allocator+0x2e>
 800d152:	6802      	ldr	r2, [r0, #0]
 800d154:	b1a2      	cbz	r2, 800d180 <rcutils_set_default_allocator+0x30>
 800d156:	6841      	ldr	r1, [r0, #4]
 800d158:	b1a1      	cbz	r1, 800d184 <rcutils_set_default_allocator+0x34>
 800d15a:	b410      	push	{r4}
 800d15c:	68c4      	ldr	r4, [r0, #12]
 800d15e:	b164      	cbz	r4, 800d17a <rcutils_set_default_allocator+0x2a>
 800d160:	6880      	ldr	r0, [r0, #8]
 800d162:	b138      	cbz	r0, 800d174 <rcutils_set_default_allocator+0x24>
 800d164:	4b08      	ldr	r3, [pc, #32]	@ (800d188 <rcutils_set_default_allocator+0x38>)
 800d166:	601a      	str	r2, [r3, #0]
 800d168:	2200      	movs	r2, #0
 800d16a:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800d16e:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800d172:	2001      	movs	r0, #1
 800d174:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d178:	4770      	bx	lr
 800d17a:	4620      	mov	r0, r4
 800d17c:	e7fa      	b.n	800d174 <rcutils_set_default_allocator+0x24>
 800d17e:	4770      	bx	lr
 800d180:	4610      	mov	r0, r2
 800d182:	4770      	bx	lr
 800d184:	4608      	mov	r0, r1
 800d186:	4770      	bx	lr
 800d188:	20000048 	.word	0x20000048

0800d18c <rcutils_get_default_allocator>:
 800d18c:	b510      	push	{r4, lr}
 800d18e:	4c05      	ldr	r4, [pc, #20]	@ (800d1a4 <rcutils_get_default_allocator+0x18>)
 800d190:	4686      	mov	lr, r0
 800d192:	4684      	mov	ip, r0
 800d194:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d196:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d19a:	6823      	ldr	r3, [r4, #0]
 800d19c:	f8cc 3000 	str.w	r3, [ip]
 800d1a0:	4670      	mov	r0, lr
 800d1a2:	bd10      	pop	{r4, pc}
 800d1a4:	20000048 	.word	0x20000048

0800d1a8 <rcutils_allocator_is_valid>:
 800d1a8:	b158      	cbz	r0, 800d1c2 <rcutils_allocator_is_valid+0x1a>
 800d1aa:	6803      	ldr	r3, [r0, #0]
 800d1ac:	b143      	cbz	r3, 800d1c0 <rcutils_allocator_is_valid+0x18>
 800d1ae:	6843      	ldr	r3, [r0, #4]
 800d1b0:	b133      	cbz	r3, 800d1c0 <rcutils_allocator_is_valid+0x18>
 800d1b2:	68c3      	ldr	r3, [r0, #12]
 800d1b4:	b123      	cbz	r3, 800d1c0 <rcutils_allocator_is_valid+0x18>
 800d1b6:	6880      	ldr	r0, [r0, #8]
 800d1b8:	3800      	subs	r0, #0
 800d1ba:	bf18      	it	ne
 800d1bc:	2001      	movne	r0, #1
 800d1be:	4770      	bx	lr
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	4770      	bx	lr

0800d1c4 <__atomic_load_8>:
 800d1c4:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800d1c8:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800d1cc:	4a15      	ldr	r2, [pc, #84]	@ (800d224 <__atomic_load_8+0x60>)
 800d1ce:	4b16      	ldr	r3, [pc, #88]	@ (800d228 <__atomic_load_8+0x64>)
 800d1d0:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800d1d4:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800d1d8:	fb02 f101 	mul.w	r1, r2, r1
 800d1dc:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800d1e0:	fba3 2301 	umull	r2, r3, r3, r1
 800d1e4:	091b      	lsrs	r3, r3, #4
 800d1e6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800d1ea:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 800d1ee:	b4d0      	push	{r4, r6, r7}
 800d1f0:	4c0e      	ldr	r4, [pc, #56]	@ (800d22c <__atomic_load_8+0x68>)
 800d1f2:	1ac9      	subs	r1, r1, r3
 800d1f4:	1862      	adds	r2, r4, r1
 800d1f6:	f04f 0c01 	mov.w	ip, #1
 800d1fa:	e8d2 3f4f 	ldrexb	r3, [r2]
 800d1fe:	e8c2 cf46 	strexb	r6, ip, [r2]
 800d202:	2e00      	cmp	r6, #0
 800d204:	d1f9      	bne.n	800d1fa <__atomic_load_8+0x36>
 800d206:	f3bf 8f5b 	dmb	ish
 800d20a:	b2db      	uxtb	r3, r3
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d1f4      	bne.n	800d1fa <__atomic_load_8+0x36>
 800d210:	e9d0 6700 	ldrd	r6, r7, [r0]
 800d214:	f3bf 8f5b 	dmb	ish
 800d218:	5463      	strb	r3, [r4, r1]
 800d21a:	4630      	mov	r0, r6
 800d21c:	4639      	mov	r1, r7
 800d21e:	bcd0      	pop	{r4, r6, r7}
 800d220:	4770      	bx	lr
 800d222:	bf00      	nop
 800d224:	27d4eb2d 	.word	0x27d4eb2d
 800d228:	b21642c9 	.word	0xb21642c9
 800d22c:	2000c538 	.word	0x2000c538

0800d230 <__atomic_store_8>:
 800d230:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800d234:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800d238:	b570      	push	{r4, r5, r6, lr}
 800d23a:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800d23e:	4c14      	ldr	r4, [pc, #80]	@ (800d290 <__atomic_store_8+0x60>)
 800d240:	4d14      	ldr	r5, [pc, #80]	@ (800d294 <__atomic_store_8+0x64>)
 800d242:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800d246:	fb04 f101 	mul.w	r1, r4, r1
 800d24a:	4c13      	ldr	r4, [pc, #76]	@ (800d298 <__atomic_store_8+0x68>)
 800d24c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800d250:	fba4 4e01 	umull	r4, lr, r4, r1
 800d254:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 800d258:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 800d25c:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 800d260:	eba1 0e0e 	sub.w	lr, r1, lr
 800d264:	eb05 0c0e 	add.w	ip, r5, lr
 800d268:	f04f 0401 	mov.w	r4, #1
 800d26c:	e8dc 1f4f 	ldrexb	r1, [ip]
 800d270:	e8cc 4f46 	strexb	r6, r4, [ip]
 800d274:	2e00      	cmp	r6, #0
 800d276:	d1f9      	bne.n	800d26c <__atomic_store_8+0x3c>
 800d278:	f3bf 8f5b 	dmb	ish
 800d27c:	b2c9      	uxtb	r1, r1
 800d27e:	2900      	cmp	r1, #0
 800d280:	d1f4      	bne.n	800d26c <__atomic_store_8+0x3c>
 800d282:	e9c0 2300 	strd	r2, r3, [r0]
 800d286:	f3bf 8f5b 	dmb	ish
 800d28a:	f805 100e 	strb.w	r1, [r5, lr]
 800d28e:	bd70      	pop	{r4, r5, r6, pc}
 800d290:	27d4eb2d 	.word	0x27d4eb2d
 800d294:	2000c538 	.word	0x2000c538
 800d298:	b21642c9 	.word	0xb21642c9

0800d29c <__atomic_exchange_8>:
 800d29c:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 800d2a0:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 800d2a4:	4916      	ldr	r1, [pc, #88]	@ (800d300 <__atomic_exchange_8+0x64>)
 800d2a6:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 800d2aa:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 800d2ae:	fb01 fc0c 	mul.w	ip, r1, ip
 800d2b2:	4914      	ldr	r1, [pc, #80]	@ (800d304 <__atomic_exchange_8+0x68>)
 800d2b4:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 800d2b8:	b570      	push	{r4, r5, r6, lr}
 800d2ba:	4605      	mov	r5, r0
 800d2bc:	fba1 010c 	umull	r0, r1, r1, ip
 800d2c0:	0909      	lsrs	r1, r1, #4
 800d2c2:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 800d2c6:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 800d2ca:	4e0f      	ldr	r6, [pc, #60]	@ (800d308 <__atomic_exchange_8+0x6c>)
 800d2cc:	ebac 0c01 	sub.w	ip, ip, r1
 800d2d0:	eb06 010c 	add.w	r1, r6, ip
 800d2d4:	f04f 0e01 	mov.w	lr, #1
 800d2d8:	e8d1 4f4f 	ldrexb	r4, [r1]
 800d2dc:	e8c1 ef40 	strexb	r0, lr, [r1]
 800d2e0:	2800      	cmp	r0, #0
 800d2e2:	d1f9      	bne.n	800d2d8 <__atomic_exchange_8+0x3c>
 800d2e4:	f3bf 8f5b 	dmb	ish
 800d2e8:	b2e4      	uxtb	r4, r4
 800d2ea:	2c00      	cmp	r4, #0
 800d2ec:	d1f4      	bne.n	800d2d8 <__atomic_exchange_8+0x3c>
 800d2ee:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d2f2:	e9c5 2300 	strd	r2, r3, [r5]
 800d2f6:	f3bf 8f5b 	dmb	ish
 800d2fa:	f806 400c 	strb.w	r4, [r6, ip]
 800d2fe:	bd70      	pop	{r4, r5, r6, pc}
 800d300:	27d4eb2d 	.word	0x27d4eb2d
 800d304:	b21642c9 	.word	0xb21642c9
 800d308:	2000c538 	.word	0x2000c538

0800d30c <rcutils_get_env>:
 800d30c:	b168      	cbz	r0, 800d32a <rcutils_get_env+0x1e>
 800d30e:	b510      	push	{r4, lr}
 800d310:	460c      	mov	r4, r1
 800d312:	b129      	cbz	r1, 800d320 <rcutils_get_env+0x14>
 800d314:	f00a ff56 	bl	80181c4 <getenv>
 800d318:	b120      	cbz	r0, 800d324 <rcutils_get_env+0x18>
 800d31a:	6020      	str	r0, [r4, #0]
 800d31c:	2000      	movs	r0, #0
 800d31e:	bd10      	pop	{r4, pc}
 800d320:	4803      	ldr	r0, [pc, #12]	@ (800d330 <rcutils_get_env+0x24>)
 800d322:	bd10      	pop	{r4, pc}
 800d324:	4b03      	ldr	r3, [pc, #12]	@ (800d334 <rcutils_get_env+0x28>)
 800d326:	6023      	str	r3, [r4, #0]
 800d328:	bd10      	pop	{r4, pc}
 800d32a:	4803      	ldr	r0, [pc, #12]	@ (800d338 <rcutils_get_env+0x2c>)
 800d32c:	4770      	bx	lr
 800d32e:	bf00      	nop
 800d330:	08019b04 	.word	0x08019b04
 800d334:	08019c2c 	.word	0x08019c2c
 800d338:	08019ae8 	.word	0x08019ae8

0800d33c <rcutils_get_error_string>:
 800d33c:	4b06      	ldr	r3, [pc, #24]	@ (800d358 <rcutils_get_error_string+0x1c>)
 800d33e:	781b      	ldrb	r3, [r3, #0]
 800d340:	b13b      	cbz	r3, 800d352 <rcutils_get_error_string+0x16>
 800d342:	4b06      	ldr	r3, [pc, #24]	@ (800d35c <rcutils_get_error_string+0x20>)
 800d344:	781a      	ldrb	r2, [r3, #0]
 800d346:	b90a      	cbnz	r2, 800d34c <rcutils_get_error_string+0x10>
 800d348:	2201      	movs	r2, #1
 800d34a:	701a      	strb	r2, [r3, #0]
 800d34c:	4b04      	ldr	r3, [pc, #16]	@ (800d360 <rcutils_get_error_string+0x24>)
 800d34e:	7818      	ldrb	r0, [r3, #0]
 800d350:	4770      	bx	lr
 800d352:	4b04      	ldr	r3, [pc, #16]	@ (800d364 <rcutils_get_error_string+0x28>)
 800d354:	7818      	ldrb	r0, [r3, #0]
 800d356:	4770      	bx	lr
 800d358:	2000c54f 	.word	0x2000c54f
 800d35c:	2000c561 	.word	0x2000c561
 800d360:	2000c560 	.word	0x2000c560
 800d364:	08019b20 	.word	0x08019b20

0800d368 <rcutils_reset_error>:
 800d368:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800d388 <rcutils_reset_error+0x20>
 800d36c:	4a08      	ldr	r2, [pc, #32]	@ (800d390 <rcutils_reset_error+0x28>)
 800d36e:	4809      	ldr	r0, [pc, #36]	@ (800d394 <rcutils_reset_error+0x2c>)
 800d370:	4909      	ldr	r1, [pc, #36]	@ (800d398 <rcutils_reset_error+0x30>)
 800d372:	2300      	movs	r3, #0
 800d374:	8013      	strh	r3, [r2, #0]
 800d376:	ed82 7b02 	vstr	d7, [r2, #8]
 800d37a:	4a08      	ldr	r2, [pc, #32]	@ (800d39c <rcutils_reset_error+0x34>)
 800d37c:	7003      	strb	r3, [r0, #0]
 800d37e:	700b      	strb	r3, [r1, #0]
 800d380:	7013      	strb	r3, [r2, #0]
 800d382:	4770      	bx	lr
 800d384:	f3af 8000 	nop.w
	...
 800d390:	2000c550 	.word	0x2000c550
 800d394:	2000c561 	.word	0x2000c561
 800d398:	2000c560 	.word	0x2000c560
 800d39c:	2000c54f 	.word	0x2000c54f

0800d3a0 <rcutils_format_string_limit>:
 800d3a0:	b40f      	push	{r0, r1, r2, r3}
 800d3a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3a4:	b083      	sub	sp, #12
 800d3a6:	ac08      	add	r4, sp, #32
 800d3a8:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800d3aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d3ae:	b34e      	cbz	r6, 800d404 <rcutils_format_string_limit+0x64>
 800d3b0:	a808      	add	r0, sp, #32
 800d3b2:	f7ff fef9 	bl	800d1a8 <rcutils_allocator_is_valid>
 800d3b6:	b328      	cbz	r0, 800d404 <rcutils_format_string_limit+0x64>
 800d3b8:	2100      	movs	r1, #0
 800d3ba:	ab0f      	add	r3, sp, #60	@ 0x3c
 800d3bc:	4632      	mov	r2, r6
 800d3be:	4608      	mov	r0, r1
 800d3c0:	e9cd 3300 	strd	r3, r3, [sp]
 800d3c4:	f000 f8f4 	bl	800d5b0 <rcutils_vsnprintf>
 800d3c8:	1c43      	adds	r3, r0, #1
 800d3ca:	4605      	mov	r5, r0
 800d3cc:	d01a      	beq.n	800d404 <rcutils_format_string_limit+0x64>
 800d3ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d3d0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d3d2:	1c47      	adds	r7, r0, #1
 800d3d4:	429f      	cmp	r7, r3
 800d3d6:	bf84      	itt	hi
 800d3d8:	461f      	movhi	r7, r3
 800d3da:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 800d3de:	4638      	mov	r0, r7
 800d3e0:	9b08      	ldr	r3, [sp, #32]
 800d3e2:	4798      	blx	r3
 800d3e4:	4604      	mov	r4, r0
 800d3e6:	b168      	cbz	r0, 800d404 <rcutils_format_string_limit+0x64>
 800d3e8:	9b01      	ldr	r3, [sp, #4]
 800d3ea:	4632      	mov	r2, r6
 800d3ec:	4639      	mov	r1, r7
 800d3ee:	f000 f8df 	bl	800d5b0 <rcutils_vsnprintf>
 800d3f2:	2800      	cmp	r0, #0
 800d3f4:	db02      	blt.n	800d3fc <rcutils_format_string_limit+0x5c>
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	5563      	strb	r3, [r4, r5]
 800d3fa:	e004      	b.n	800d406 <rcutils_format_string_limit+0x66>
 800d3fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3fe:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d400:	4620      	mov	r0, r4
 800d402:	4798      	blx	r3
 800d404:	2400      	movs	r4, #0
 800d406:	4620      	mov	r0, r4
 800d408:	b003      	add	sp, #12
 800d40a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d40e:	b004      	add	sp, #16
 800d410:	4770      	bx	lr
 800d412:	bf00      	nop

0800d414 <rcutils_repl_str>:
 800d414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d418:	ed2d 8b02 	vpush	{d8}
 800d41c:	b087      	sub	sp, #28
 800d41e:	4680      	mov	r8, r0
 800d420:	4608      	mov	r0, r1
 800d422:	f8cd 8004 	str.w	r8, [sp, #4]
 800d426:	ee08 2a10 	vmov	s16, r2
 800d42a:	468a      	mov	sl, r1
 800d42c:	4699      	mov	r9, r3
 800d42e:	f7f2 fef9 	bl	8000224 <strlen>
 800d432:	2600      	movs	r6, #0
 800d434:	4647      	mov	r7, r8
 800d436:	9002      	str	r0, [sp, #8]
 800d438:	46b3      	mov	fp, r6
 800d43a:	2510      	movs	r5, #16
 800d43c:	46b0      	mov	r8, r6
 800d43e:	e01d      	b.n	800d47c <rcutils_repl_str+0x68>
 800d440:	f10b 0b01 	add.w	fp, fp, #1
 800d444:	455e      	cmp	r6, fp
 800d446:	d211      	bcs.n	800d46c <rcutils_repl_str+0x58>
 800d448:	442e      	add	r6, r5
 800d44a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800d44e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800d452:	00b1      	lsls	r1, r6, #2
 800d454:	4798      	blx	r3
 800d456:	2800      	cmp	r0, #0
 800d458:	f000 8088 	beq.w	800d56c <rcutils_repl_str+0x158>
 800d45c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d460:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800d464:	4680      	mov	r8, r0
 800d466:	bf28      	it	cs
 800d468:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 800d46c:	9a01      	ldr	r2, [sp, #4]
 800d46e:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800d472:	1aa2      	subs	r2, r4, r2
 800d474:	f843 2c04 	str.w	r2, [r3, #-4]
 800d478:	9b02      	ldr	r3, [sp, #8]
 800d47a:	18e7      	adds	r7, r4, r3
 800d47c:	4651      	mov	r1, sl
 800d47e:	4638      	mov	r0, r7
 800d480:	f00b fa9b 	bl	80189ba <strstr>
 800d484:	4604      	mov	r4, r0
 800d486:	4640      	mov	r0, r8
 800d488:	2c00      	cmp	r4, #0
 800d48a:	d1d9      	bne.n	800d440 <rcutils_repl_str+0x2c>
 800d48c:	46b8      	mov	r8, r7
 800d48e:	4607      	mov	r7, r0
 800d490:	4640      	mov	r0, r8
 800d492:	f7f2 fec7 	bl	8000224 <strlen>
 800d496:	9b01      	ldr	r3, [sp, #4]
 800d498:	eba8 0303 	sub.w	r3, r8, r3
 800d49c:	181c      	adds	r4, r3, r0
 800d49e:	9404      	str	r4, [sp, #16]
 800d4a0:	f1bb 0f00 	cmp.w	fp, #0
 800d4a4:	d04a      	beq.n	800d53c <rcutils_repl_str+0x128>
 800d4a6:	ee18 0a10 	vmov	r0, s16
 800d4aa:	f7f2 febb 	bl	8000224 <strlen>
 800d4ae:	9b02      	ldr	r3, [sp, #8]
 800d4b0:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800d4b4:	1ac3      	subs	r3, r0, r3
 800d4b6:	fb0b 4303 	mla	r3, fp, r3, r4
 800d4ba:	461a      	mov	r2, r3
 800d4bc:	9305      	str	r3, [sp, #20]
 800d4be:	4606      	mov	r6, r0
 800d4c0:	f8d9 3000 	ldr.w	r3, [r9]
 800d4c4:	1c50      	adds	r0, r2, #1
 800d4c6:	4798      	blx	r3
 800d4c8:	9003      	str	r0, [sp, #12]
 800d4ca:	2800      	cmp	r0, #0
 800d4cc:	d04f      	beq.n	800d56e <rcutils_repl_str+0x15a>
 800d4ce:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d4d2:	683a      	ldr	r2, [r7, #0]
 800d4d4:	4641      	mov	r1, r8
 800d4d6:	f00b fb70 	bl	8018bba <memcpy>
 800d4da:	683d      	ldr	r5, [r7, #0]
 800d4dc:	9b03      	ldr	r3, [sp, #12]
 800d4de:	9701      	str	r7, [sp, #4]
 800d4e0:	46ba      	mov	sl, r7
 800d4e2:	441d      	add	r5, r3
 800d4e4:	9f02      	ldr	r7, [sp, #8]
 800d4e6:	f8cd 9008 	str.w	r9, [sp, #8]
 800d4ea:	2401      	movs	r4, #1
 800d4ec:	46d1      	mov	r9, sl
 800d4ee:	ee18 aa10 	vmov	sl, s16
 800d4f2:	e00a      	b.n	800d50a <rcutils_repl_str+0xf6>
 800d4f4:	f8d9 5000 	ldr.w	r5, [r9]
 800d4f8:	1aaa      	subs	r2, r5, r2
 800d4fa:	1885      	adds	r5, r0, r2
 800d4fc:	f00b fb5d 	bl	8018bba <memcpy>
 800d500:	45a3      	cmp	fp, r4
 800d502:	f104 0201 	add.w	r2, r4, #1
 800d506:	d935      	bls.n	800d574 <rcutils_repl_str+0x160>
 800d508:	4614      	mov	r4, r2
 800d50a:	4632      	mov	r2, r6
 800d50c:	4651      	mov	r1, sl
 800d50e:	4628      	mov	r0, r5
 800d510:	f00b fb53 	bl	8018bba <memcpy>
 800d514:	f859 2b04 	ldr.w	r2, [r9], #4
 800d518:	45a3      	cmp	fp, r4
 800d51a:	443a      	add	r2, r7
 800d51c:	eb05 0006 	add.w	r0, r5, r6
 800d520:	eb08 0102 	add.w	r1, r8, r2
 800d524:	d1e6      	bne.n	800d4f4 <rcutils_repl_str+0xe0>
 800d526:	9b04      	ldr	r3, [sp, #16]
 800d528:	1a9a      	subs	r2, r3, r2
 800d52a:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800d52e:	f00b fb44 	bl	8018bba <memcpy>
 800d532:	9a03      	ldr	r2, [sp, #12]
 800d534:	9905      	ldr	r1, [sp, #20]
 800d536:	2300      	movs	r3, #0
 800d538:	5453      	strb	r3, [r2, r1]
 800d53a:	e00b      	b.n	800d554 <rcutils_repl_str+0x140>
 800d53c:	4620      	mov	r0, r4
 800d53e:	f8d9 3000 	ldr.w	r3, [r9]
 800d542:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800d546:	3001      	adds	r0, #1
 800d548:	4798      	blx	r3
 800d54a:	9003      	str	r0, [sp, #12]
 800d54c:	b110      	cbz	r0, 800d554 <rcutils_repl_str+0x140>
 800d54e:	9901      	ldr	r1, [sp, #4]
 800d550:	f00b fb2b 	bl	8018baa <strcpy>
 800d554:	4638      	mov	r0, r7
 800d556:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800d55a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800d55e:	4798      	blx	r3
 800d560:	9803      	ldr	r0, [sp, #12]
 800d562:	b007      	add	sp, #28
 800d564:	ecbd 8b02 	vpop	{d8}
 800d568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d56c:	4647      	mov	r7, r8
 800d56e:	2300      	movs	r3, #0
 800d570:	9303      	str	r3, [sp, #12]
 800d572:	e7ef      	b.n	800d554 <rcutils_repl_str+0x140>
 800d574:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800d578:	e7db      	b.n	800d532 <rcutils_repl_str+0x11e>
 800d57a:	bf00      	nop

0800d57c <rcutils_snprintf>:
 800d57c:	b40c      	push	{r2, r3}
 800d57e:	b530      	push	{r4, r5, lr}
 800d580:	b083      	sub	sp, #12
 800d582:	ab06      	add	r3, sp, #24
 800d584:	f853 2b04 	ldr.w	r2, [r3], #4
 800d588:	9301      	str	r3, [sp, #4]
 800d58a:	b152      	cbz	r2, 800d5a2 <rcutils_snprintf+0x26>
 800d58c:	b138      	cbz	r0, 800d59e <rcutils_snprintf+0x22>
 800d58e:	b141      	cbz	r1, 800d5a2 <rcutils_snprintf+0x26>
 800d590:	f00b f9b4 	bl	80188fc <vsniprintf>
 800d594:	b003      	add	sp, #12
 800d596:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d59a:	b002      	add	sp, #8
 800d59c:	4770      	bx	lr
 800d59e:	2900      	cmp	r1, #0
 800d5a0:	d0f6      	beq.n	800d590 <rcutils_snprintf+0x14>
 800d5a2:	f00b fad5 	bl	8018b50 <__errno>
 800d5a6:	2316      	movs	r3, #22
 800d5a8:	6003      	str	r3, [r0, #0]
 800d5aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d5ae:	e7f1      	b.n	800d594 <rcutils_snprintf+0x18>

0800d5b0 <rcutils_vsnprintf>:
 800d5b0:	b570      	push	{r4, r5, r6, lr}
 800d5b2:	b13a      	cbz	r2, 800d5c4 <rcutils_vsnprintf+0x14>
 800d5b4:	b120      	cbz	r0, 800d5c0 <rcutils_vsnprintf+0x10>
 800d5b6:	b129      	cbz	r1, 800d5c4 <rcutils_vsnprintf+0x14>
 800d5b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d5bc:	f00b b99e 	b.w	80188fc <vsniprintf>
 800d5c0:	2900      	cmp	r1, #0
 800d5c2:	d0f9      	beq.n	800d5b8 <rcutils_vsnprintf+0x8>
 800d5c4:	f00b fac4 	bl	8018b50 <__errno>
 800d5c8:	2316      	movs	r3, #22
 800d5ca:	6003      	str	r3, [r0, #0]
 800d5cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d5d0:	bd70      	pop	{r4, r5, r6, pc}
 800d5d2:	bf00      	nop

0800d5d4 <rcutils_strdup>:
 800d5d4:	b084      	sub	sp, #16
 800d5d6:	b570      	push	{r4, r5, r6, lr}
 800d5d8:	b082      	sub	sp, #8
 800d5da:	ac07      	add	r4, sp, #28
 800d5dc:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800d5e0:	4605      	mov	r5, r0
 800d5e2:	b1b0      	cbz	r0, 800d612 <rcutils_strdup+0x3e>
 800d5e4:	f7f2 fe1e 	bl	8000224 <strlen>
 800d5e8:	1c42      	adds	r2, r0, #1
 800d5ea:	9b07      	ldr	r3, [sp, #28]
 800d5ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d5ee:	9201      	str	r2, [sp, #4]
 800d5f0:	4606      	mov	r6, r0
 800d5f2:	4610      	mov	r0, r2
 800d5f4:	4798      	blx	r3
 800d5f6:	4604      	mov	r4, r0
 800d5f8:	b128      	cbz	r0, 800d606 <rcutils_strdup+0x32>
 800d5fa:	9a01      	ldr	r2, [sp, #4]
 800d5fc:	4629      	mov	r1, r5
 800d5fe:	f00b fadc 	bl	8018bba <memcpy>
 800d602:	2300      	movs	r3, #0
 800d604:	55a3      	strb	r3, [r4, r6]
 800d606:	4620      	mov	r0, r4
 800d608:	b002      	add	sp, #8
 800d60a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d60e:	b004      	add	sp, #16
 800d610:	4770      	bx	lr
 800d612:	4604      	mov	r4, r0
 800d614:	e7f7      	b.n	800d606 <rcutils_strdup+0x32>
 800d616:	bf00      	nop

0800d618 <rcutils_strndup>:
 800d618:	b082      	sub	sp, #8
 800d61a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d61c:	ac06      	add	r4, sp, #24
 800d61e:	e884 000c 	stmia.w	r4, {r2, r3}
 800d622:	4605      	mov	r5, r0
 800d624:	b188      	cbz	r0, 800d64a <rcutils_strndup+0x32>
 800d626:	1c4f      	adds	r7, r1, #1
 800d628:	460e      	mov	r6, r1
 800d62a:	4638      	mov	r0, r7
 800d62c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d62e:	4790      	blx	r2
 800d630:	4604      	mov	r4, r0
 800d632:	b128      	cbz	r0, 800d640 <rcutils_strndup+0x28>
 800d634:	463a      	mov	r2, r7
 800d636:	4629      	mov	r1, r5
 800d638:	f00b fabf 	bl	8018bba <memcpy>
 800d63c:	2300      	movs	r3, #0
 800d63e:	55a3      	strb	r3, [r4, r6]
 800d640:	4620      	mov	r0, r4
 800d642:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d646:	b002      	add	sp, #8
 800d648:	4770      	bx	lr
 800d64a:	4604      	mov	r4, r0
 800d64c:	e7f8      	b.n	800d640 <rcutils_strndup+0x28>
 800d64e:	bf00      	nop

0800d650 <rcutils_system_time_now>:
 800d650:	b308      	cbz	r0, 800d696 <rcutils_system_time_now+0x46>
 800d652:	b570      	push	{r4, r5, r6, lr}
 800d654:	b084      	sub	sp, #16
 800d656:	4604      	mov	r4, r0
 800d658:	4669      	mov	r1, sp
 800d65a:	2001      	movs	r0, #1
 800d65c:	f7f5 fe4c 	bl	80032f8 <clock_gettime>
 800d660:	e9dd 3500 	ldrd	r3, r5, [sp]
 800d664:	2d00      	cmp	r5, #0
 800d666:	db13      	blt.n	800d690 <rcutils_system_time_now+0x40>
 800d668:	9902      	ldr	r1, [sp, #8]
 800d66a:	2900      	cmp	r1, #0
 800d66c:	db0d      	blt.n	800d68a <rcutils_system_time_now+0x3a>
 800d66e:	4e0b      	ldr	r6, [pc, #44]	@ (800d69c <rcutils_system_time_now+0x4c>)
 800d670:	fba3 3206 	umull	r3, r2, r3, r6
 800d674:	185b      	adds	r3, r3, r1
 800d676:	fb06 2205 	mla	r2, r6, r5, r2
 800d67a:	f04f 0000 	mov.w	r0, #0
 800d67e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800d682:	e9c4 3200 	strd	r3, r2, [r4]
 800d686:	b004      	add	sp, #16
 800d688:	bd70      	pop	{r4, r5, r6, pc}
 800d68a:	ea53 0205 	orrs.w	r2, r3, r5
 800d68e:	d1ee      	bne.n	800d66e <rcutils_system_time_now+0x1e>
 800d690:	2002      	movs	r0, #2
 800d692:	b004      	add	sp, #16
 800d694:	bd70      	pop	{r4, r5, r6, pc}
 800d696:	200b      	movs	r0, #11
 800d698:	4770      	bx	lr
 800d69a:	bf00      	nop
 800d69c:	3b9aca00 	.word	0x3b9aca00

0800d6a0 <rcutils_steady_time_now>:
 800d6a0:	b308      	cbz	r0, 800d6e6 <rcutils_steady_time_now+0x46>
 800d6a2:	b570      	push	{r4, r5, r6, lr}
 800d6a4:	b084      	sub	sp, #16
 800d6a6:	4604      	mov	r4, r0
 800d6a8:	4669      	mov	r1, sp
 800d6aa:	2000      	movs	r0, #0
 800d6ac:	f7f5 fe24 	bl	80032f8 <clock_gettime>
 800d6b0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800d6b4:	2d00      	cmp	r5, #0
 800d6b6:	db13      	blt.n	800d6e0 <rcutils_steady_time_now+0x40>
 800d6b8:	9902      	ldr	r1, [sp, #8]
 800d6ba:	2900      	cmp	r1, #0
 800d6bc:	db0d      	blt.n	800d6da <rcutils_steady_time_now+0x3a>
 800d6be:	4e0b      	ldr	r6, [pc, #44]	@ (800d6ec <rcutils_steady_time_now+0x4c>)
 800d6c0:	fba3 3206 	umull	r3, r2, r3, r6
 800d6c4:	185b      	adds	r3, r3, r1
 800d6c6:	fb06 2205 	mla	r2, r6, r5, r2
 800d6ca:	f04f 0000 	mov.w	r0, #0
 800d6ce:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800d6d2:	e9c4 3200 	strd	r3, r2, [r4]
 800d6d6:	b004      	add	sp, #16
 800d6d8:	bd70      	pop	{r4, r5, r6, pc}
 800d6da:	ea53 0205 	orrs.w	r2, r3, r5
 800d6de:	d1ee      	bne.n	800d6be <rcutils_steady_time_now+0x1e>
 800d6e0:	2002      	movs	r0, #2
 800d6e2:	b004      	add	sp, #16
 800d6e4:	bd70      	pop	{r4, r5, r6, pc}
 800d6e6:	200b      	movs	r0, #11
 800d6e8:	4770      	bx	lr
 800d6ea:	bf00      	nop
 800d6ec:	3b9aca00 	.word	0x3b9aca00

0800d6f0 <rmw_get_zero_initialized_init_options>:
 800d6f0:	b510      	push	{r4, lr}
 800d6f2:	2238      	movs	r2, #56	@ 0x38
 800d6f4:	4604      	mov	r4, r0
 800d6f6:	2100      	movs	r1, #0
 800d6f8:	f00b f938 	bl	801896c <memset>
 800d6fc:	f104 0010 	add.w	r0, r4, #16
 800d700:	f000 f80a 	bl	800d718 <rmw_get_default_security_options>
 800d704:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d708:	60e3      	str	r3, [r4, #12]
 800d70a:	4620      	mov	r0, r4
 800d70c:	bd10      	pop	{r4, pc}
 800d70e:	bf00      	nop

0800d710 <rmw_get_default_publisher_options>:
 800d710:	2200      	movs	r2, #0
 800d712:	6002      	str	r2, [r0, #0]
 800d714:	7102      	strb	r2, [r0, #4]
 800d716:	4770      	bx	lr

0800d718 <rmw_get_default_security_options>:
 800d718:	2200      	movs	r2, #0
 800d71a:	7002      	strb	r2, [r0, #0]
 800d71c:	6042      	str	r2, [r0, #4]
 800d71e:	4770      	bx	lr

0800d720 <rmw_subscription_content_filter_options_fini>:
 800d720:	b1b0      	cbz	r0, 800d750 <rmw_subscription_content_filter_options_fini+0x30>
 800d722:	b538      	push	{r3, r4, r5, lr}
 800d724:	4604      	mov	r4, r0
 800d726:	4608      	mov	r0, r1
 800d728:	460d      	mov	r5, r1
 800d72a:	f7ff fd3d 	bl	800d1a8 <rcutils_allocator_is_valid>
 800d72e:	b168      	cbz	r0, 800d74c <rmw_subscription_content_filter_options_fini+0x2c>
 800d730:	6820      	ldr	r0, [r4, #0]
 800d732:	b120      	cbz	r0, 800d73e <rmw_subscription_content_filter_options_fini+0x1e>
 800d734:	686b      	ldr	r3, [r5, #4]
 800d736:	6929      	ldr	r1, [r5, #16]
 800d738:	4798      	blx	r3
 800d73a:	2300      	movs	r3, #0
 800d73c:	6023      	str	r3, [r4, #0]
 800d73e:	1d20      	adds	r0, r4, #4
 800d740:	f008 fc2e 	bl	8015fa0 <rcutils_string_array_fini>
 800d744:	3800      	subs	r0, #0
 800d746:	bf18      	it	ne
 800d748:	2001      	movne	r0, #1
 800d74a:	bd38      	pop	{r3, r4, r5, pc}
 800d74c:	200b      	movs	r0, #11
 800d74e:	bd38      	pop	{r3, r4, r5, pc}
 800d750:	200b      	movs	r0, #11
 800d752:	4770      	bx	lr

0800d754 <rmw_get_default_subscription_options>:
 800d754:	2200      	movs	r2, #0
 800d756:	e9c0 2200 	strd	r2, r2, [r0]
 800d75a:	6082      	str	r2, [r0, #8]
 800d75c:	4770      	bx	lr
 800d75e:	bf00      	nop

0800d760 <rmw_get_zero_initialized_message_info>:
 800d760:	b510      	push	{r4, lr}
 800d762:	2240      	movs	r2, #64	@ 0x40
 800d764:	4604      	mov	r4, r0
 800d766:	2100      	movs	r1, #0
 800d768:	f00b f900 	bl	801896c <memset>
 800d76c:	4620      	mov	r0, r4
 800d76e:	bd10      	pop	{r4, pc}

0800d770 <rmw_validate_namespace_with_size>:
 800d770:	b340      	cbz	r0, 800d7c4 <rmw_validate_namespace_with_size+0x54>
 800d772:	b570      	push	{r4, r5, r6, lr}
 800d774:	4614      	mov	r4, r2
 800d776:	b0c2      	sub	sp, #264	@ 0x108
 800d778:	b332      	cbz	r2, 800d7c8 <rmw_validate_namespace_with_size+0x58>
 800d77a:	2901      	cmp	r1, #1
 800d77c:	460d      	mov	r5, r1
 800d77e:	461e      	mov	r6, r3
 800d780:	d102      	bne.n	800d788 <rmw_validate_namespace_with_size+0x18>
 800d782:	7803      	ldrb	r3, [r0, #0]
 800d784:	2b2f      	cmp	r3, #47	@ 0x2f
 800d786:	d012      	beq.n	800d7ae <rmw_validate_namespace_with_size+0x3e>
 800d788:	aa01      	add	r2, sp, #4
 800d78a:	4669      	mov	r1, sp
 800d78c:	f008 fdf0 	bl	8016370 <rmw_validate_full_topic_name>
 800d790:	b978      	cbnz	r0, 800d7b2 <rmw_validate_namespace_with_size+0x42>
 800d792:	9b00      	ldr	r3, [sp, #0]
 800d794:	b14b      	cbz	r3, 800d7aa <rmw_validate_namespace_with_size+0x3a>
 800d796:	2b07      	cmp	r3, #7
 800d798:	d007      	beq.n	800d7aa <rmw_validate_namespace_with_size+0x3a>
 800d79a:	1e5a      	subs	r2, r3, #1
 800d79c:	2a05      	cmp	r2, #5
 800d79e:	d82b      	bhi.n	800d7f8 <rmw_validate_namespace_with_size+0x88>
 800d7a0:	e8df f002 	tbb	[pc, r2]
 800d7a4:	1e212427 	.word	0x1e212427
 800d7a8:	141b      	.short	0x141b
 800d7aa:	2df5      	cmp	r5, #245	@ 0xf5
 800d7ac:	d803      	bhi.n	800d7b6 <rmw_validate_namespace_with_size+0x46>
 800d7ae:	2000      	movs	r0, #0
 800d7b0:	6020      	str	r0, [r4, #0]
 800d7b2:	b042      	add	sp, #264	@ 0x108
 800d7b4:	bd70      	pop	{r4, r5, r6, pc}
 800d7b6:	2307      	movs	r3, #7
 800d7b8:	6023      	str	r3, [r4, #0]
 800d7ba:	2e00      	cmp	r6, #0
 800d7bc:	d0f9      	beq.n	800d7b2 <rmw_validate_namespace_with_size+0x42>
 800d7be:	23f4      	movs	r3, #244	@ 0xf4
 800d7c0:	6033      	str	r3, [r6, #0]
 800d7c2:	e7f6      	b.n	800d7b2 <rmw_validate_namespace_with_size+0x42>
 800d7c4:	200b      	movs	r0, #11
 800d7c6:	4770      	bx	lr
 800d7c8:	200b      	movs	r0, #11
 800d7ca:	e7f2      	b.n	800d7b2 <rmw_validate_namespace_with_size+0x42>
 800d7cc:	2306      	movs	r3, #6
 800d7ce:	6023      	str	r3, [r4, #0]
 800d7d0:	2e00      	cmp	r6, #0
 800d7d2:	d0ee      	beq.n	800d7b2 <rmw_validate_namespace_with_size+0x42>
 800d7d4:	9b01      	ldr	r3, [sp, #4]
 800d7d6:	6033      	str	r3, [r6, #0]
 800d7d8:	e7eb      	b.n	800d7b2 <rmw_validate_namespace_with_size+0x42>
 800d7da:	2305      	movs	r3, #5
 800d7dc:	6023      	str	r3, [r4, #0]
 800d7de:	e7f7      	b.n	800d7d0 <rmw_validate_namespace_with_size+0x60>
 800d7e0:	2304      	movs	r3, #4
 800d7e2:	6023      	str	r3, [r4, #0]
 800d7e4:	e7f4      	b.n	800d7d0 <rmw_validate_namespace_with_size+0x60>
 800d7e6:	2303      	movs	r3, #3
 800d7e8:	6023      	str	r3, [r4, #0]
 800d7ea:	e7f1      	b.n	800d7d0 <rmw_validate_namespace_with_size+0x60>
 800d7ec:	2302      	movs	r3, #2
 800d7ee:	6023      	str	r3, [r4, #0]
 800d7f0:	e7ee      	b.n	800d7d0 <rmw_validate_namespace_with_size+0x60>
 800d7f2:	2301      	movs	r3, #1
 800d7f4:	6023      	str	r3, [r4, #0]
 800d7f6:	e7eb      	b.n	800d7d0 <rmw_validate_namespace_with_size+0x60>
 800d7f8:	4a03      	ldr	r2, [pc, #12]	@ (800d808 <rmw_validate_namespace_with_size+0x98>)
 800d7fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800d7fe:	a802      	add	r0, sp, #8
 800d800:	f7ff febc 	bl	800d57c <rcutils_snprintf>
 800d804:	2001      	movs	r0, #1
 800d806:	e7d4      	b.n	800d7b2 <rmw_validate_namespace_with_size+0x42>
 800d808:	08019b24 	.word	0x08019b24

0800d80c <rmw_validate_namespace>:
 800d80c:	b168      	cbz	r0, 800d82a <rmw_validate_namespace+0x1e>
 800d80e:	b570      	push	{r4, r5, r6, lr}
 800d810:	460d      	mov	r5, r1
 800d812:	4616      	mov	r6, r2
 800d814:	4604      	mov	r4, r0
 800d816:	f7f2 fd05 	bl	8000224 <strlen>
 800d81a:	4633      	mov	r3, r6
 800d81c:	4601      	mov	r1, r0
 800d81e:	462a      	mov	r2, r5
 800d820:	4620      	mov	r0, r4
 800d822:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d826:	f7ff bfa3 	b.w	800d770 <rmw_validate_namespace_with_size>
 800d82a:	200b      	movs	r0, #11
 800d82c:	4770      	bx	lr
 800d82e:	bf00      	nop

0800d830 <rmw_namespace_validation_result_string>:
 800d830:	2807      	cmp	r0, #7
 800d832:	bf9a      	itte	ls
 800d834:	4b02      	ldrls	r3, [pc, #8]	@ (800d840 <rmw_namespace_validation_result_string+0x10>)
 800d836:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800d83a:	4802      	ldrhi	r0, [pc, #8]	@ (800d844 <rmw_namespace_validation_result_string+0x14>)
 800d83c:	4770      	bx	lr
 800d83e:	bf00      	nop
 800d840:	0801a1cc 	.word	0x0801a1cc
 800d844:	08019b74 	.word	0x08019b74

0800d848 <rmw_validate_node_name>:
 800d848:	2800      	cmp	r0, #0
 800d84a:	d03b      	beq.n	800d8c4 <rmw_validate_node_name+0x7c>
 800d84c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d850:	460d      	mov	r5, r1
 800d852:	2900      	cmp	r1, #0
 800d854:	d038      	beq.n	800d8c8 <rmw_validate_node_name+0x80>
 800d856:	4616      	mov	r6, r2
 800d858:	4604      	mov	r4, r0
 800d85a:	f7f2 fce3 	bl	8000224 <strlen>
 800d85e:	b1e0      	cbz	r0, 800d89a <rmw_validate_node_name+0x52>
 800d860:	1e63      	subs	r3, r4, #1
 800d862:	eb03 0800 	add.w	r8, r3, r0
 800d866:	f1c4 0101 	rsb	r1, r4, #1
 800d86a:	18cf      	adds	r7, r1, r3
 800d86c:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800d870:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 800d874:	f02e 0c20 	bic.w	ip, lr, #32
 800d878:	2a09      	cmp	r2, #9
 800d87a:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 800d87e:	d914      	bls.n	800d8aa <rmw_validate_node_name+0x62>
 800d880:	f1bc 0f19 	cmp.w	ip, #25
 800d884:	d911      	bls.n	800d8aa <rmw_validate_node_name+0x62>
 800d886:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800d88a:	d00e      	beq.n	800d8aa <rmw_validate_node_name+0x62>
 800d88c:	2302      	movs	r3, #2
 800d88e:	602b      	str	r3, [r5, #0]
 800d890:	b106      	cbz	r6, 800d894 <rmw_validate_node_name+0x4c>
 800d892:	6037      	str	r7, [r6, #0]
 800d894:	2000      	movs	r0, #0
 800d896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d89a:	2301      	movs	r3, #1
 800d89c:	602b      	str	r3, [r5, #0]
 800d89e:	2e00      	cmp	r6, #0
 800d8a0:	d0f8      	beq.n	800d894 <rmw_validate_node_name+0x4c>
 800d8a2:	2000      	movs	r0, #0
 800d8a4:	6030      	str	r0, [r6, #0]
 800d8a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8aa:	4543      	cmp	r3, r8
 800d8ac:	d1dd      	bne.n	800d86a <rmw_validate_node_name+0x22>
 800d8ae:	7822      	ldrb	r2, [r4, #0]
 800d8b0:	4b0d      	ldr	r3, [pc, #52]	@ (800d8e8 <rmw_validate_node_name+0xa0>)
 800d8b2:	5cd3      	ldrb	r3, [r2, r3]
 800d8b4:	f013 0304 	ands.w	r3, r3, #4
 800d8b8:	d110      	bne.n	800d8dc <rmw_validate_node_name+0x94>
 800d8ba:	28ff      	cmp	r0, #255	@ 0xff
 800d8bc:	d806      	bhi.n	800d8cc <rmw_validate_node_name+0x84>
 800d8be:	602b      	str	r3, [r5, #0]
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	e7e8      	b.n	800d896 <rmw_validate_node_name+0x4e>
 800d8c4:	200b      	movs	r0, #11
 800d8c6:	4770      	bx	lr
 800d8c8:	200b      	movs	r0, #11
 800d8ca:	e7e4      	b.n	800d896 <rmw_validate_node_name+0x4e>
 800d8cc:	2204      	movs	r2, #4
 800d8ce:	602a      	str	r2, [r5, #0]
 800d8d0:	2e00      	cmp	r6, #0
 800d8d2:	d0df      	beq.n	800d894 <rmw_validate_node_name+0x4c>
 800d8d4:	22fe      	movs	r2, #254	@ 0xfe
 800d8d6:	6032      	str	r2, [r6, #0]
 800d8d8:	4618      	mov	r0, r3
 800d8da:	e7dc      	b.n	800d896 <rmw_validate_node_name+0x4e>
 800d8dc:	2303      	movs	r3, #3
 800d8de:	602b      	str	r3, [r5, #0]
 800d8e0:	2e00      	cmp	r6, #0
 800d8e2:	d1de      	bne.n	800d8a2 <rmw_validate_node_name+0x5a>
 800d8e4:	e7d6      	b.n	800d894 <rmw_validate_node_name+0x4c>
 800d8e6:	bf00      	nop
 800d8e8:	0801a613 	.word	0x0801a613

0800d8ec <rmw_node_name_validation_result_string>:
 800d8ec:	2804      	cmp	r0, #4
 800d8ee:	bf9a      	itte	ls
 800d8f0:	4b02      	ldrls	r3, [pc, #8]	@ (800d8fc <rmw_node_name_validation_result_string+0x10>)
 800d8f2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800d8f6:	4802      	ldrhi	r0, [pc, #8]	@ (800d900 <rmw_node_name_validation_result_string+0x14>)
 800d8f8:	4770      	bx	lr
 800d8fa:	bf00      	nop
 800d8fc:	0801a1ec 	.word	0x0801a1ec
 800d900:	08019d1c 	.word	0x08019d1c

0800d904 <rmw_uros_set_custom_transport>:
 800d904:	b470      	push	{r4, r5, r6}
 800d906:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800d90a:	b162      	cbz	r2, 800d926 <rmw_uros_set_custom_transport+0x22>
 800d90c:	b15b      	cbz	r3, 800d926 <rmw_uros_set_custom_transport+0x22>
 800d90e:	b155      	cbz	r5, 800d926 <rmw_uros_set_custom_transport+0x22>
 800d910:	b14e      	cbz	r6, 800d926 <rmw_uros_set_custom_transport+0x22>
 800d912:	4c06      	ldr	r4, [pc, #24]	@ (800d92c <rmw_uros_set_custom_transport+0x28>)
 800d914:	7020      	strb	r0, [r4, #0]
 800d916:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800d91a:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d91e:	6166      	str	r6, [r4, #20]
 800d920:	2000      	movs	r0, #0
 800d922:	bc70      	pop	{r4, r5, r6}
 800d924:	4770      	bx	lr
 800d926:	200b      	movs	r0, #11
 800d928:	bc70      	pop	{r4, r5, r6}
 800d92a:	4770      	bx	lr
 800d92c:	2000c564 	.word	0x2000c564

0800d930 <rmw_uros_ping_agent>:
 800d930:	b570      	push	{r4, r5, r6, lr}
 800d932:	4b22      	ldr	r3, [pc, #136]	@ (800d9bc <rmw_uros_ping_agent+0x8c>)
 800d934:	7b1a      	ldrb	r2, [r3, #12]
 800d936:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800d93a:	4605      	mov	r5, r0
 800d93c:	460e      	mov	r6, r1
 800d93e:	b10a      	cbz	r2, 800d944 <rmw_uros_ping_agent+0x14>
 800d940:	681c      	ldr	r4, [r3, #0]
 800d942:	b9bc      	cbnz	r4, 800d974 <rmw_uros_ping_agent+0x44>
 800d944:	4b1e      	ldr	r3, [pc, #120]	@ (800d9c0 <rmw_uros_ping_agent+0x90>)
 800d946:	781a      	ldrb	r2, [r3, #0]
 800d948:	6918      	ldr	r0, [r3, #16]
 800d94a:	f88d 2200 	strb.w	r2, [sp, #512]	@ 0x200
 800d94e:	685a      	ldr	r2, [r3, #4]
 800d950:	92a3      	str	r2, [sp, #652]	@ 0x28c
 800d952:	2100      	movs	r1, #0
 800d954:	68da      	ldr	r2, [r3, #12]
 800d956:	909c      	str	r0, [sp, #624]	@ 0x270
 800d958:	6958      	ldr	r0, [r3, #20]
 800d95a:	929b      	str	r2, [sp, #620]	@ 0x26c
 800d95c:	689b      	ldr	r3, [r3, #8]
 800d95e:	909d      	str	r0, [sp, #628]	@ 0x274
 800d960:	466a      	mov	r2, sp
 800d962:	4608      	mov	r0, r1
 800d964:	939a      	str	r3, [sp, #616]	@ 0x268
 800d966:	f000 ffbd 	bl	800e8e4 <rmw_uxrce_transport_init>
 800d96a:	b198      	cbz	r0, 800d994 <rmw_uros_ping_agent+0x64>
 800d96c:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800d970:	bd70      	pop	{r4, r5, r6, pc}
 800d972:	b9f0      	cbnz	r0, 800d9b2 <rmw_uros_ping_agent+0x82>
 800d974:	68a0      	ldr	r0, [r4, #8]
 800d976:	4632      	mov	r2, r6
 800d978:	4629      	mov	r1, r5
 800d97a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d97e:	f002 fee9 	bl	8010754 <uxr_ping_agent_session>
 800d982:	6864      	ldr	r4, [r4, #4]
 800d984:	2c00      	cmp	r4, #0
 800d986:	d1f4      	bne.n	800d972 <rmw_uros_ping_agent+0x42>
 800d988:	f080 0001 	eor.w	r0, r0, #1
 800d98c:	b2c0      	uxtb	r0, r0
 800d98e:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800d992:	bd70      	pop	{r4, r5, r6, pc}
 800d994:	4632      	mov	r2, r6
 800d996:	4629      	mov	r1, r5
 800d998:	a89e      	add	r0, sp, #632	@ 0x278
 800d99a:	f002 ff27 	bl	80107ec <uxr_ping_agent_attempts>
 800d99e:	4604      	mov	r4, r0
 800d9a0:	4668      	mov	r0, sp
 800d9a2:	f002 fea3 	bl	80106ec <uxr_close_custom_transport>
 800d9a6:	f084 0001 	eor.w	r0, r4, #1
 800d9aa:	b2c0      	uxtb	r0, r0
 800d9ac:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800d9b0:	bd70      	pop	{r4, r5, r6, pc}
 800d9b2:	2000      	movs	r0, #0
 800d9b4:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800d9b8:	bd70      	pop	{r4, r5, r6, pc}
 800d9ba:	bf00      	nop
 800d9bc:	20010ebc 	.word	0x20010ebc
 800d9c0:	2000c564 	.word	0x2000c564

0800d9c4 <rmw_init_options_init>:
 800d9c4:	b084      	sub	sp, #16
 800d9c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9c8:	b083      	sub	sp, #12
 800d9ca:	ad09      	add	r5, sp, #36	@ 0x24
 800d9cc:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800d9d0:	b130      	cbz	r0, 800d9e0 <rmw_init_options_init+0x1c>
 800d9d2:	4604      	mov	r4, r0
 800d9d4:	4628      	mov	r0, r5
 800d9d6:	f7ff fbe7 	bl	800d1a8 <rcutils_allocator_is_valid>
 800d9da:	b108      	cbz	r0, 800d9e0 <rmw_init_options_init+0x1c>
 800d9dc:	68a6      	ldr	r6, [r4, #8]
 800d9de:	b12e      	cbz	r6, 800d9ec <rmw_init_options_init+0x28>
 800d9e0:	200b      	movs	r0, #11
 800d9e2:	b003      	add	sp, #12
 800d9e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d9e8:	b004      	add	sp, #16
 800d9ea:	4770      	bx	lr
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	e9c4 2300 	strd	r2, r3, [r4]
 800d9f4:	4b20      	ldr	r3, [pc, #128]	@ (800da78 <rmw_init_options_init+0xb4>)
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	60a3      	str	r3, [r4, #8]
 800d9fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d9fc:	f104 0c20 	add.w	ip, r4, #32
 800da00:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800da04:	466f      	mov	r7, sp
 800da06:	682b      	ldr	r3, [r5, #0]
 800da08:	f8cc 3000 	str.w	r3, [ip]
 800da0c:	4638      	mov	r0, r7
 800da0e:	61e6      	str	r6, [r4, #28]
 800da10:	60e6      	str	r6, [r4, #12]
 800da12:	f7ff fe81 	bl	800d718 <rmw_get_default_security_options>
 800da16:	e897 0003 	ldmia.w	r7, {r0, r1}
 800da1a:	f104 0310 	add.w	r3, r4, #16
 800da1e:	e883 0003 	stmia.w	r3, {r0, r1}
 800da22:	2203      	movs	r2, #3
 800da24:	4815      	ldr	r0, [pc, #84]	@ (800da7c <rmw_init_options_init+0xb8>)
 800da26:	4916      	ldr	r1, [pc, #88]	@ (800da80 <rmw_init_options_init+0xbc>)
 800da28:	7626      	strb	r6, [r4, #24]
 800da2a:	f001 f88b 	bl	800eb44 <rmw_uxrce_init_init_options_impl_memory>
 800da2e:	4813      	ldr	r0, [pc, #76]	@ (800da7c <rmw_init_options_init+0xb8>)
 800da30:	f008 fdfc 	bl	801662c <get_memory>
 800da34:	b1f0      	cbz	r0, 800da74 <rmw_init_options_init+0xb0>
 800da36:	4a13      	ldr	r2, [pc, #76]	@ (800da84 <rmw_init_options_init+0xc0>)
 800da38:	6883      	ldr	r3, [r0, #8]
 800da3a:	6851      	ldr	r1, [r2, #4]
 800da3c:	7810      	ldrb	r0, [r2, #0]
 800da3e:	6363      	str	r3, [r4, #52]	@ 0x34
 800da40:	7418      	strb	r0, [r3, #16]
 800da42:	6159      	str	r1, [r3, #20]
 800da44:	68d1      	ldr	r1, [r2, #12]
 800da46:	61d9      	str	r1, [r3, #28]
 800da48:	6911      	ldr	r1, [r2, #16]
 800da4a:	6219      	str	r1, [r3, #32]
 800da4c:	6951      	ldr	r1, [r2, #20]
 800da4e:	6892      	ldr	r2, [r2, #8]
 800da50:	619a      	str	r2, [r3, #24]
 800da52:	6259      	str	r1, [r3, #36]	@ 0x24
 800da54:	f004 ff98 	bl	8012988 <uxr_nanos>
 800da58:	f00a fcba 	bl	80183d0 <srand>
 800da5c:	f00a fce6 	bl	801842c <rand>
 800da60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800da62:	6298      	str	r0, [r3, #40]	@ 0x28
 800da64:	2800      	cmp	r0, #0
 800da66:	d0f9      	beq.n	800da5c <rmw_init_options_init+0x98>
 800da68:	2000      	movs	r0, #0
 800da6a:	b003      	add	sp, #12
 800da6c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800da70:	b004      	add	sp, #16
 800da72:	4770      	bx	lr
 800da74:	2001      	movs	r0, #1
 800da76:	e7b4      	b.n	800d9e2 <rmw_init_options_init+0x1e>
 800da78:	0801a530 	.word	0x0801a530
 800da7c:	20010e7c 	.word	0x20010e7c
 800da80:	2000c718 	.word	0x2000c718
 800da84:	2000c564 	.word	0x2000c564

0800da88 <rmw_init_options_copy>:
 800da88:	b570      	push	{r4, r5, r6, lr}
 800da8a:	b088      	sub	sp, #32
 800da8c:	b160      	cbz	r0, 800daa8 <rmw_init_options_copy+0x20>
 800da8e:	460d      	mov	r5, r1
 800da90:	b151      	cbz	r1, 800daa8 <rmw_init_options_copy+0x20>
 800da92:	4604      	mov	r4, r0
 800da94:	6880      	ldr	r0, [r0, #8]
 800da96:	b128      	cbz	r0, 800daa4 <rmw_init_options_copy+0x1c>
 800da98:	4b33      	ldr	r3, [pc, #204]	@ (800db68 <rmw_init_options_copy+0xe0>)
 800da9a:	6819      	ldr	r1, [r3, #0]
 800da9c:	f7f2 fbb8 	bl	8000210 <strcmp>
 800daa0:	2800      	cmp	r0, #0
 800daa2:	d154      	bne.n	800db4e <rmw_init_options_copy+0xc6>
 800daa4:	68ab      	ldr	r3, [r5, #8]
 800daa6:	b11b      	cbz	r3, 800dab0 <rmw_init_options_copy+0x28>
 800daa8:	240b      	movs	r4, #11
 800daaa:	4620      	mov	r0, r4
 800daac:	b008      	add	sp, #32
 800daae:	bd70      	pop	{r4, r5, r6, pc}
 800dab0:	4623      	mov	r3, r4
 800dab2:	462a      	mov	r2, r5
 800dab4:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800dab8:	f8d3 c000 	ldr.w	ip, [r3]
 800dabc:	6858      	ldr	r0, [r3, #4]
 800dabe:	6899      	ldr	r1, [r3, #8]
 800dac0:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800dac4:	f8c2 e00c 	str.w	lr, [r2, #12]
 800dac8:	3310      	adds	r3, #16
 800daca:	42b3      	cmp	r3, r6
 800dacc:	f8c2 c000 	str.w	ip, [r2]
 800dad0:	6050      	str	r0, [r2, #4]
 800dad2:	6091      	str	r1, [r2, #8]
 800dad4:	f102 0210 	add.w	r2, r2, #16
 800dad8:	d1ee      	bne.n	800dab8 <rmw_init_options_copy+0x30>
 800dada:	6819      	ldr	r1, [r3, #0]
 800dadc:	685b      	ldr	r3, [r3, #4]
 800dade:	6053      	str	r3, [r2, #4]
 800dae0:	6011      	str	r1, [r2, #0]
 800dae2:	f104 0e20 	add.w	lr, r4, #32
 800dae6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800daea:	f10d 0c0c 	add.w	ip, sp, #12
 800daee:	4666      	mov	r6, ip
 800daf0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800daf4:	f8de 3000 	ldr.w	r3, [lr]
 800daf8:	f8cc 3000 	str.w	r3, [ip]
 800dafc:	4630      	mov	r0, r6
 800dafe:	f7ff fb53 	bl	800d1a8 <rcutils_allocator_is_valid>
 800db02:	2800      	cmp	r0, #0
 800db04:	d0d0      	beq.n	800daa8 <rmw_init_options_copy+0x20>
 800db06:	ab08      	add	r3, sp, #32
 800db08:	e913 0003 	ldmdb	r3, {r0, r1}
 800db0c:	e88d 0003 	stmia.w	sp, {r0, r1}
 800db10:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800db14:	69e0      	ldr	r0, [r4, #28]
 800db16:	f7ff fd5d 	bl	800d5d4 <rcutils_strdup>
 800db1a:	61e8      	str	r0, [r5, #28]
 800db1c:	69e3      	ldr	r3, [r4, #28]
 800db1e:	b103      	cbz	r3, 800db22 <rmw_init_options_copy+0x9a>
 800db20:	b1f8      	cbz	r0, 800db62 <rmw_init_options_copy+0xda>
 800db22:	4812      	ldr	r0, [pc, #72]	@ (800db6c <rmw_init_options_copy+0xe4>)
 800db24:	f008 fd82 	bl	801662c <get_memory>
 800db28:	b1a8      	cbz	r0, 800db56 <rmw_init_options_copy+0xce>
 800db2a:	6883      	ldr	r3, [r0, #8]
 800db2c:	636b      	str	r3, [r5, #52]	@ 0x34
 800db2e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800db30:	f102 0c10 	add.w	ip, r2, #16
 800db34:	f103 0510 	add.w	r5, r3, #16
 800db38:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800db3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800db3e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800db42:	2400      	movs	r4, #0
 800db44:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800db48:	4620      	mov	r0, r4
 800db4a:	b008      	add	sp, #32
 800db4c:	bd70      	pop	{r4, r5, r6, pc}
 800db4e:	240c      	movs	r4, #12
 800db50:	4620      	mov	r0, r4
 800db52:	b008      	add	sp, #32
 800db54:	bd70      	pop	{r4, r5, r6, pc}
 800db56:	9b04      	ldr	r3, [sp, #16]
 800db58:	9907      	ldr	r1, [sp, #28]
 800db5a:	69e8      	ldr	r0, [r5, #28]
 800db5c:	4798      	blx	r3
 800db5e:	2401      	movs	r4, #1
 800db60:	e7a3      	b.n	800daaa <rmw_init_options_copy+0x22>
 800db62:	240a      	movs	r4, #10
 800db64:	e7a1      	b.n	800daaa <rmw_init_options_copy+0x22>
 800db66:	bf00      	nop
 800db68:	0801a530 	.word	0x0801a530
 800db6c:	20010e7c 	.word	0x20010e7c

0800db70 <rmw_init_options_fini>:
 800db70:	2800      	cmp	r0, #0
 800db72:	d041      	beq.n	800dbf8 <rmw_init_options_fini+0x88>
 800db74:	b510      	push	{r4, lr}
 800db76:	4604      	mov	r4, r0
 800db78:	b08e      	sub	sp, #56	@ 0x38
 800db7a:	3020      	adds	r0, #32
 800db7c:	f7ff fb14 	bl	800d1a8 <rcutils_allocator_is_valid>
 800db80:	b380      	cbz	r0, 800dbe4 <rmw_init_options_fini+0x74>
 800db82:	68a0      	ldr	r0, [r4, #8]
 800db84:	b120      	cbz	r0, 800db90 <rmw_init_options_fini+0x20>
 800db86:	4b1e      	ldr	r3, [pc, #120]	@ (800dc00 <rmw_init_options_fini+0x90>)
 800db88:	6819      	ldr	r1, [r3, #0]
 800db8a:	f7f2 fb41 	bl	8000210 <strcmp>
 800db8e:	bb88      	cbnz	r0, 800dbf4 <rmw_init_options_fini+0x84>
 800db90:	4b1c      	ldr	r3, [pc, #112]	@ (800dc04 <rmw_init_options_fini+0x94>)
 800db92:	6819      	ldr	r1, [r3, #0]
 800db94:	b351      	cbz	r1, 800dbec <rmw_init_options_fini+0x7c>
 800db96:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800db98:	e001      	b.n	800db9e <rmw_init_options_fini+0x2e>
 800db9a:	6849      	ldr	r1, [r1, #4]
 800db9c:	b331      	cbz	r1, 800dbec <rmw_init_options_fini+0x7c>
 800db9e:	688b      	ldr	r3, [r1, #8]
 800dba0:	429a      	cmp	r2, r3
 800dba2:	d1fa      	bne.n	800db9a <rmw_init_options_fini+0x2a>
 800dba4:	4817      	ldr	r0, [pc, #92]	@ (800dc04 <rmw_init_options_fini+0x94>)
 800dba6:	f008 fd51 	bl	801664c <put_memory>
 800dbaa:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800dbac:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800dbae:	69e0      	ldr	r0, [r4, #28]
 800dbb0:	4798      	blx	r3
 800dbb2:	4668      	mov	r0, sp
 800dbb4:	f7ff fd9c 	bl	800d6f0 <rmw_get_zero_initialized_init_options>
 800dbb8:	46ee      	mov	lr, sp
 800dbba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dbbe:	46a4      	mov	ip, r4
 800dbc0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dbc4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dbc8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dbcc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dbd0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dbd4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800dbd8:	e88c 0003 	stmia.w	ip, {r0, r1}
 800dbdc:	2300      	movs	r3, #0
 800dbde:	4618      	mov	r0, r3
 800dbe0:	b00e      	add	sp, #56	@ 0x38
 800dbe2:	bd10      	pop	{r4, pc}
 800dbe4:	230b      	movs	r3, #11
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	b00e      	add	sp, #56	@ 0x38
 800dbea:	bd10      	pop	{r4, pc}
 800dbec:	2301      	movs	r3, #1
 800dbee:	4618      	mov	r0, r3
 800dbf0:	b00e      	add	sp, #56	@ 0x38
 800dbf2:	bd10      	pop	{r4, pc}
 800dbf4:	230c      	movs	r3, #12
 800dbf6:	e7f2      	b.n	800dbde <rmw_init_options_fini+0x6e>
 800dbf8:	230b      	movs	r3, #11
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	4770      	bx	lr
 800dbfe:	bf00      	nop
 800dc00:	0801a530 	.word	0x0801a530
 800dc04:	20010e7c 	.word	0x20010e7c

0800dc08 <rmw_init>:
 800dc08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc0c:	b083      	sub	sp, #12
 800dc0e:	2800      	cmp	r0, #0
 800dc10:	f000 80d3 	beq.w	800ddba <rmw_init+0x1b2>
 800dc14:	460e      	mov	r6, r1
 800dc16:	2900      	cmp	r1, #0
 800dc18:	f000 80cf 	beq.w	800ddba <rmw_init+0x1b2>
 800dc1c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800dc1e:	4605      	mov	r5, r0
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	f000 80ca 	beq.w	800ddba <rmw_init+0x1b2>
 800dc26:	4b78      	ldr	r3, [pc, #480]	@ (800de08 <rmw_init+0x200>)
 800dc28:	6880      	ldr	r0, [r0, #8]
 800dc2a:	681f      	ldr	r7, [r3, #0]
 800dc2c:	b128      	cbz	r0, 800dc3a <rmw_init+0x32>
 800dc2e:	4639      	mov	r1, r7
 800dc30:	f7f2 faee 	bl	8000210 <strcmp>
 800dc34:	2800      	cmp	r0, #0
 800dc36:	f040 80ca 	bne.w	800ddce <rmw_init+0x1c6>
 800dc3a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dc3e:	4c73      	ldr	r4, [pc, #460]	@ (800de0c <rmw_init+0x204>)
 800dc40:	4973      	ldr	r1, [pc, #460]	@ (800de10 <rmw_init+0x208>)
 800dc42:	4874      	ldr	r0, [pc, #464]	@ (800de14 <rmw_init+0x20c>)
 800dc44:	60b7      	str	r7, [r6, #8]
 800dc46:	e9c6 2300 	strd	r2, r3, [r6]
 800dc4a:	68eb      	ldr	r3, [r5, #12]
 800dc4c:	64b3      	str	r3, [r6, #72]	@ 0x48
 800dc4e:	2201      	movs	r2, #1
 800dc50:	f000 ff18 	bl	800ea84 <rmw_uxrce_init_session_memory>
 800dc54:	4620      	mov	r0, r4
 800dc56:	4970      	ldr	r1, [pc, #448]	@ (800de18 <rmw_init+0x210>)
 800dc58:	2204      	movs	r2, #4
 800dc5a:	f000 ff53 	bl	800eb04 <rmw_uxrce_init_static_input_buffer_memory>
 800dc5e:	f04f 0800 	mov.w	r8, #0
 800dc62:	486c      	ldr	r0, [pc, #432]	@ (800de14 <rmw_init+0x20c>)
 800dc64:	f884 800d 	strb.w	r8, [r4, #13]
 800dc68:	f008 fce0 	bl	801662c <get_memory>
 800dc6c:	2800      	cmp	r0, #0
 800dc6e:	f000 80a9 	beq.w	800ddc4 <rmw_init+0x1bc>
 800dc72:	6884      	ldr	r4, [r0, #8]
 800dc74:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800dc76:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800dc78:	f890 c010 	ldrb.w	ip, [r0, #16]
 800dc7c:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800dc80:	9101      	str	r1, [sp, #4]
 800dc82:	6a00      	ldr	r0, [r0, #32]
 800dc84:	9000      	str	r0, [sp, #0]
 800dc86:	f104 0910 	add.w	r9, r4, #16
 800dc8a:	4661      	mov	r1, ip
 800dc8c:	4648      	mov	r0, r9
 800dc8e:	f002 fceb 	bl	8010668 <uxr_set_custom_transport_callbacks>
 800dc92:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800dc96:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800dc9a:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800dc9e:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800dca2:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800dca6:	495d      	ldr	r1, [pc, #372]	@ (800de1c <rmw_init+0x214>)
 800dca8:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800dcac:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800dcb0:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800dcb4:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800dcb8:	4859      	ldr	r0, [pc, #356]	@ (800de20 <rmw_init+0x218>)
 800dcba:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800dcbe:	2201      	movs	r2, #1
 800dcc0:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800dcc2:	f000 febf 	bl	800ea44 <rmw_uxrce_init_node_memory>
 800dcc6:	4957      	ldr	r1, [pc, #348]	@ (800de24 <rmw_init+0x21c>)
 800dcc8:	4857      	ldr	r0, [pc, #348]	@ (800de28 <rmw_init+0x220>)
 800dcca:	2205      	movs	r2, #5
 800dccc:	f000 fe9a 	bl	800ea04 <rmw_uxrce_init_subscription_memory>
 800dcd0:	4956      	ldr	r1, [pc, #344]	@ (800de2c <rmw_init+0x224>)
 800dcd2:	4857      	ldr	r0, [pc, #348]	@ (800de30 <rmw_init+0x228>)
 800dcd4:	220a      	movs	r2, #10
 800dcd6:	f000 fe75 	bl	800e9c4 <rmw_uxrce_init_publisher_memory>
 800dcda:	4956      	ldr	r1, [pc, #344]	@ (800de34 <rmw_init+0x22c>)
 800dcdc:	4856      	ldr	r0, [pc, #344]	@ (800de38 <rmw_init+0x230>)
 800dcde:	2201      	movs	r2, #1
 800dce0:	f000 fe30 	bl	800e944 <rmw_uxrce_init_service_memory>
 800dce4:	4955      	ldr	r1, [pc, #340]	@ (800de3c <rmw_init+0x234>)
 800dce6:	4856      	ldr	r0, [pc, #344]	@ (800de40 <rmw_init+0x238>)
 800dce8:	2201      	movs	r2, #1
 800dcea:	f000 fe4b 	bl	800e984 <rmw_uxrce_init_client_memory>
 800dcee:	4955      	ldr	r1, [pc, #340]	@ (800de44 <rmw_init+0x23c>)
 800dcf0:	4855      	ldr	r0, [pc, #340]	@ (800de48 <rmw_init+0x240>)
 800dcf2:	220f      	movs	r2, #15
 800dcf4:	f000 fee6 	bl	800eac4 <rmw_uxrce_init_topic_memory>
 800dcf8:	4954      	ldr	r1, [pc, #336]	@ (800de4c <rmw_init+0x244>)
 800dcfa:	4855      	ldr	r0, [pc, #340]	@ (800de50 <rmw_init+0x248>)
 800dcfc:	2203      	movs	r2, #3
 800dcfe:	f000 ff21 	bl	800eb44 <rmw_uxrce_init_init_options_impl_memory>
 800dd02:	4954      	ldr	r1, [pc, #336]	@ (800de54 <rmw_init+0x24c>)
 800dd04:	4854      	ldr	r0, [pc, #336]	@ (800de58 <rmw_init+0x250>)
 800dd06:	2204      	movs	r2, #4
 800dd08:	f000 ff3c 	bl	800eb84 <rmw_uxrce_init_wait_set_memory>
 800dd0c:	4953      	ldr	r1, [pc, #332]	@ (800de5c <rmw_init+0x254>)
 800dd0e:	4854      	ldr	r0, [pc, #336]	@ (800de60 <rmw_init+0x258>)
 800dd10:	2204      	movs	r2, #4
 800dd12:	f000 ff57 	bl	800ebc4 <rmw_uxrce_init_guard_condition_memory>
 800dd16:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800dd18:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800dd1a:	4642      	mov	r2, r8
 800dd1c:	f000 fde2 	bl	800e8e4 <rmw_uxrce_transport_init>
 800dd20:	4607      	mov	r7, r0
 800dd22:	2800      	cmp	r0, #0
 800dd24:	d158      	bne.n	800ddd8 <rmw_init+0x1d0>
 800dd26:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800dd28:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800dd2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800dd2e:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800dd32:	4628      	mov	r0, r5
 800dd34:	f002 ffd0 	bl	8010cd8 <uxr_init_session>
 800dd38:	494a      	ldr	r1, [pc, #296]	@ (800de64 <rmw_init+0x25c>)
 800dd3a:	4622      	mov	r2, r4
 800dd3c:	4628      	mov	r0, r5
 800dd3e:	f002 ffef 	bl	8010d20 <uxr_set_topic_callback>
 800dd42:	4949      	ldr	r1, [pc, #292]	@ (800de68 <rmw_init+0x260>)
 800dd44:	463a      	mov	r2, r7
 800dd46:	4628      	mov	r0, r5
 800dd48:	f002 ffe6 	bl	8010d18 <uxr_set_status_callback>
 800dd4c:	4947      	ldr	r1, [pc, #284]	@ (800de6c <rmw_init+0x264>)
 800dd4e:	463a      	mov	r2, r7
 800dd50:	4628      	mov	r0, r5
 800dd52:	f002 ffe9 	bl	8010d28 <uxr_set_request_callback>
 800dd56:	4946      	ldr	r1, [pc, #280]	@ (800de70 <rmw_init+0x268>)
 800dd58:	463a      	mov	r2, r7
 800dd5a:	4628      	mov	r0, r5
 800dd5c:	f002 ffe8 	bl	8010d30 <uxr_set_reply_callback>
 800dd60:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800dd64:	2304      	movs	r3, #4
 800dd66:	0092      	lsls	r2, r2, #2
 800dd68:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800dd6c:	4628      	mov	r0, r5
 800dd6e:	f003 f81d 	bl	8010dac <uxr_create_input_reliable_stream>
 800dd72:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800dd76:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800dd7a:	0092      	lsls	r2, r2, #2
 800dd7c:	2304      	movs	r3, #4
 800dd7e:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800dd82:	4628      	mov	r0, r5
 800dd84:	f002 ffea 	bl	8010d5c <uxr_create_output_reliable_stream>
 800dd88:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800dd8c:	4628      	mov	r0, r5
 800dd8e:	f003 f807 	bl	8010da0 <uxr_create_input_best_effort_stream>
 800dd92:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800dd96:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800dd9a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800dd9e:	3114      	adds	r1, #20
 800dda0:	4628      	mov	r0, r5
 800dda2:	f002 ffc9 	bl	8010d38 <uxr_create_output_best_effort_stream>
 800dda6:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800ddaa:	4628      	mov	r0, r5
 800ddac:	f003 fd7e 	bl	80118ac <uxr_create_session>
 800ddb0:	b1f8      	cbz	r0, 800ddf2 <rmw_init+0x1ea>
 800ddb2:	4638      	mov	r0, r7
 800ddb4:	b003      	add	sp, #12
 800ddb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddba:	270b      	movs	r7, #11
 800ddbc:	4638      	mov	r0, r7
 800ddbe:	b003      	add	sp, #12
 800ddc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddc4:	2701      	movs	r7, #1
 800ddc6:	4638      	mov	r0, r7
 800ddc8:	b003      	add	sp, #12
 800ddca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddce:	270c      	movs	r7, #12
 800ddd0:	4638      	mov	r0, r7
 800ddd2:	b003      	add	sp, #12
 800ddd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddd8:	4648      	mov	r0, r9
 800ddda:	f002 fc87 	bl	80106ec <uxr_close_custom_transport>
 800ddde:	480d      	ldr	r0, [pc, #52]	@ (800de14 <rmw_init+0x20c>)
 800dde0:	4621      	mov	r1, r4
 800dde2:	f008 fc33 	bl	801664c <put_memory>
 800dde6:	4638      	mov	r0, r7
 800dde8:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800ddec:	b003      	add	sp, #12
 800ddee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddf2:	4648      	mov	r0, r9
 800ddf4:	f002 fc7a 	bl	80106ec <uxr_close_custom_transport>
 800ddf8:	4806      	ldr	r0, [pc, #24]	@ (800de14 <rmw_init+0x20c>)
 800ddfa:	4621      	mov	r1, r4
 800ddfc:	f008 fc26 	bl	801664c <put_memory>
 800de00:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800de02:	2701      	movs	r7, #1
 800de04:	e7d5      	b.n	800ddb2 <rmw_init+0x1aa>
 800de06:	bf00      	nop
 800de08:	0801a530 	.word	0x0801a530
 800de0c:	20010ecc 	.word	0x20010ecc
 800de10:	2000d178 	.word	0x2000d178
 800de14:	20010ebc 	.word	0x20010ebc
 800de18:	2000e720 	.word	0x2000e720
 800de1c:	2000c79c 	.word	0x2000c79c
 800de20:	20010e8c 	.word	0x20010e8c
 800de24:	20010820 	.word	0x20010820
 800de28:	20010edc 	.word	0x20010edc
 800de2c:	2000c840 	.word	0x2000c840
 800de30:	20010e9c 	.word	0x20010e9c
 800de34:	2000d0b0 	.word	0x2000d0b0
 800de38:	20010eac 	.word	0x20010eac
 800de3c:	2000c5d0 	.word	0x2000c5d0
 800de40:	2000c5bc 	.word	0x2000c5bc
 800de44:	20010c58 	.word	0x20010c58
 800de48:	20010eec 	.word	0x20010eec
 800de4c:	2000c718 	.word	0x2000c718
 800de50:	20010e7c 	.word	0x20010e7c
 800de54:	20010dfc 	.word	0x20010dfc
 800de58:	20010efc 	.word	0x20010efc
 800de5c:	2000c698 	.word	0x2000c698
 800de60:	20010e6c 	.word	0x20010e6c
 800de64:	08016465 	.word	0x08016465
 800de68:	0801645d 	.word	0x0801645d
 800de6c:	080164fd 	.word	0x080164fd
 800de70:	08016599 	.word	0x08016599

0800de74 <rmw_shutdown>:
 800de74:	b570      	push	{r4, r5, r6, lr}
 800de76:	b094      	sub	sp, #80	@ 0x50
 800de78:	2800      	cmp	r0, #0
 800de7a:	d050      	beq.n	800df1e <rmw_shutdown+0xaa>
 800de7c:	4605      	mov	r5, r0
 800de7e:	6880      	ldr	r0, [r0, #8]
 800de80:	b128      	cbz	r0, 800de8e <rmw_shutdown+0x1a>
 800de82:	4b2b      	ldr	r3, [pc, #172]	@ (800df30 <rmw_shutdown+0xbc>)
 800de84:	6819      	ldr	r1, [r3, #0]
 800de86:	f7f2 f9c3 	bl	8000210 <strcmp>
 800de8a:	2800      	cmp	r0, #0
 800de8c:	d143      	bne.n	800df16 <rmw_shutdown+0xa2>
 800de8e:	4b29      	ldr	r3, [pc, #164]	@ (800df34 <rmw_shutdown+0xc0>)
 800de90:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800de92:	681c      	ldr	r4, [r3, #0]
 800de94:	2c00      	cmp	r4, #0
 800de96:	d046      	beq.n	800df26 <rmw_shutdown+0xb2>
 800de98:	2600      	movs	r6, #0
 800de9a:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800de9e:	6902      	ldr	r2, [r0, #16]
 800dea0:	428a      	cmp	r2, r1
 800dea2:	d024      	beq.n	800deee <rmw_shutdown+0x7a>
 800dea4:	2c00      	cmp	r4, #0
 800dea6:	d1f8      	bne.n	800de9a <rmw_shutdown+0x26>
 800dea8:	b189      	cbz	r1, 800dece <rmw_shutdown+0x5a>
 800deaa:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800deae:	789b      	ldrb	r3, [r3, #2]
 800deb0:	2b01      	cmp	r3, #1
 800deb2:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800deb6:	bf14      	ite	ne
 800deb8:	210a      	movne	r1, #10
 800deba:	2100      	moveq	r1, #0
 800debc:	f003 fcce 	bl	801185c <uxr_delete_session_retries>
 800dec0:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800dec2:	f000 fe9f 	bl	800ec04 <rmw_uxrce_fini_session_memory>
 800dec6:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800dec8:	3010      	adds	r0, #16
 800deca:	f002 fc0f 	bl	80106ec <uxr_close_custom_transport>
 800dece:	2300      	movs	r3, #0
 800ded0:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800ded2:	b1b6      	cbz	r6, 800df02 <rmw_shutdown+0x8e>
 800ded4:	4d18      	ldr	r5, [pc, #96]	@ (800df38 <rmw_shutdown+0xc4>)
 800ded6:	682c      	ldr	r4, [r5, #0]
 800ded8:	b134      	cbz	r4, 800dee8 <rmw_shutdown+0x74>
 800deda:	4621      	mov	r1, r4
 800dedc:	6864      	ldr	r4, [r4, #4]
 800dede:	4628      	mov	r0, r5
 800dee0:	f008 fbb4 	bl	801664c <put_memory>
 800dee4:	2c00      	cmp	r4, #0
 800dee6:	d1f8      	bne.n	800deda <rmw_shutdown+0x66>
 800dee8:	4630      	mov	r0, r6
 800deea:	b014      	add	sp, #80	@ 0x50
 800deec:	bd70      	pop	{r4, r5, r6, pc}
 800deee:	3018      	adds	r0, #24
 800def0:	f000 f8e8 	bl	800e0c4 <rmw_destroy_node>
 800def4:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800def6:	4606      	mov	r6, r0
 800def8:	2c00      	cmp	r4, #0
 800defa:	d1ce      	bne.n	800de9a <rmw_shutdown+0x26>
 800defc:	2900      	cmp	r1, #0
 800defe:	d1d4      	bne.n	800deaa <rmw_shutdown+0x36>
 800df00:	e7e5      	b.n	800dece <rmw_shutdown+0x5a>
 800df02:	4668      	mov	r0, sp
 800df04:	f008 f9a0 	bl	8016248 <rmw_get_zero_initialized_context>
 800df08:	2250      	movs	r2, #80	@ 0x50
 800df0a:	4669      	mov	r1, sp
 800df0c:	4628      	mov	r0, r5
 800df0e:	f00a fe54 	bl	8018bba <memcpy>
 800df12:	2600      	movs	r6, #0
 800df14:	e7de      	b.n	800ded4 <rmw_shutdown+0x60>
 800df16:	260c      	movs	r6, #12
 800df18:	4630      	mov	r0, r6
 800df1a:	b014      	add	sp, #80	@ 0x50
 800df1c:	bd70      	pop	{r4, r5, r6, pc}
 800df1e:	260b      	movs	r6, #11
 800df20:	4630      	mov	r0, r6
 800df22:	b014      	add	sp, #80	@ 0x50
 800df24:	bd70      	pop	{r4, r5, r6, pc}
 800df26:	2900      	cmp	r1, #0
 800df28:	d0eb      	beq.n	800df02 <rmw_shutdown+0x8e>
 800df2a:	4626      	mov	r6, r4
 800df2c:	e7bd      	b.n	800deaa <rmw_shutdown+0x36>
 800df2e:	bf00      	nop
 800df30:	0801a530 	.word	0x0801a530
 800df34:	20010e8c 	.word	0x20010e8c
 800df38:	20010ecc 	.word	0x20010ecc

0800df3c <rmw_context_fini>:
 800df3c:	4b17      	ldr	r3, [pc, #92]	@ (800df9c <rmw_context_fini+0x60>)
 800df3e:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800df40:	b570      	push	{r4, r5, r6, lr}
 800df42:	681c      	ldr	r4, [r3, #0]
 800df44:	4605      	mov	r5, r0
 800df46:	b334      	cbz	r4, 800df96 <rmw_context_fini+0x5a>
 800df48:	2600      	movs	r6, #0
 800df4a:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800df4e:	6902      	ldr	r2, [r0, #16]
 800df50:	428a      	cmp	r2, r1
 800df52:	d018      	beq.n	800df86 <rmw_context_fini+0x4a>
 800df54:	2c00      	cmp	r4, #0
 800df56:	d1f8      	bne.n	800df4a <rmw_context_fini+0xe>
 800df58:	b189      	cbz	r1, 800df7e <rmw_context_fini+0x42>
 800df5a:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800df5e:	789b      	ldrb	r3, [r3, #2]
 800df60:	2b01      	cmp	r3, #1
 800df62:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800df66:	bf14      	ite	ne
 800df68:	210a      	movne	r1, #10
 800df6a:	2100      	moveq	r1, #0
 800df6c:	f003 fc76 	bl	801185c <uxr_delete_session_retries>
 800df70:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800df72:	f000 fe47 	bl	800ec04 <rmw_uxrce_fini_session_memory>
 800df76:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800df78:	3010      	adds	r0, #16
 800df7a:	f002 fbb7 	bl	80106ec <uxr_close_custom_transport>
 800df7e:	2300      	movs	r3, #0
 800df80:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800df82:	4630      	mov	r0, r6
 800df84:	bd70      	pop	{r4, r5, r6, pc}
 800df86:	3018      	adds	r0, #24
 800df88:	f000 f89c 	bl	800e0c4 <rmw_destroy_node>
 800df8c:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800df8e:	4606      	mov	r6, r0
 800df90:	2c00      	cmp	r4, #0
 800df92:	d1da      	bne.n	800df4a <rmw_context_fini+0xe>
 800df94:	e7e0      	b.n	800df58 <rmw_context_fini+0x1c>
 800df96:	4626      	mov	r6, r4
 800df98:	e7de      	b.n	800df58 <rmw_context_fini+0x1c>
 800df9a:	bf00      	nop
 800df9c:	20010e8c 	.word	0x20010e8c

0800dfa0 <create_node>:
 800dfa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dfa4:	b083      	sub	sp, #12
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d05f      	beq.n	800e06a <create_node+0xca>
 800dfaa:	4606      	mov	r6, r0
 800dfac:	4835      	ldr	r0, [pc, #212]	@ (800e084 <create_node+0xe4>)
 800dfae:	460f      	mov	r7, r1
 800dfb0:	4690      	mov	r8, r2
 800dfb2:	461d      	mov	r5, r3
 800dfb4:	f008 fb3a 	bl	801662c <get_memory>
 800dfb8:	2800      	cmp	r0, #0
 800dfba:	d056      	beq.n	800e06a <create_node+0xca>
 800dfbc:	6884      	ldr	r4, [r0, #8]
 800dfbe:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800dfc0:	6123      	str	r3, [r4, #16]
 800dfc2:	f008 fb9b 	bl	80166fc <rmw_get_implementation_identifier>
 800dfc6:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800dfca:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800dfce:	f8c4 9020 	str.w	r9, [r4, #32]
 800dfd2:	4630      	mov	r0, r6
 800dfd4:	f7f2 f926 	bl	8000224 <strlen>
 800dfd8:	1c42      	adds	r2, r0, #1
 800dfda:	2a3c      	cmp	r2, #60	@ 0x3c
 800dfdc:	f104 0518 	add.w	r5, r4, #24
 800dfe0:	d840      	bhi.n	800e064 <create_node+0xc4>
 800dfe2:	4648      	mov	r0, r9
 800dfe4:	4631      	mov	r1, r6
 800dfe6:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800dfea:	f00a fde6 	bl	8018bba <memcpy>
 800dfee:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800dff2:	4638      	mov	r0, r7
 800dff4:	f7f2 f916 	bl	8000224 <strlen>
 800dff8:	1c42      	adds	r2, r0, #1
 800dffa:	2a3c      	cmp	r2, #60	@ 0x3c
 800dffc:	d832      	bhi.n	800e064 <create_node+0xc4>
 800dffe:	4639      	mov	r1, r7
 800e000:	4648      	mov	r0, r9
 800e002:	f00a fdda 	bl	8018bba <memcpy>
 800e006:	6923      	ldr	r3, [r4, #16]
 800e008:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e00c:	2101      	movs	r1, #1
 800e00e:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800e012:	1842      	adds	r2, r0, r1
 800e014:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800e018:	f002 fb6c 	bl	80106f4 <uxr_object_id>
 800e01c:	6160      	str	r0, [r4, #20]
 800e01e:	783b      	ldrb	r3, [r7, #0]
 800e020:	2b2f      	cmp	r3, #47	@ 0x2f
 800e022:	d127      	bne.n	800e074 <create_node+0xd4>
 800e024:	787b      	ldrb	r3, [r7, #1]
 800e026:	bb2b      	cbnz	r3, 800e074 <create_node+0xd4>
 800e028:	4a17      	ldr	r2, [pc, #92]	@ (800e088 <create_node+0xe8>)
 800e02a:	4818      	ldr	r0, [pc, #96]	@ (800e08c <create_node+0xec>)
 800e02c:	4633      	mov	r3, r6
 800e02e:	213c      	movs	r1, #60	@ 0x3c
 800e030:	f00a fbbc 	bl	80187ac <sniprintf>
 800e034:	6920      	ldr	r0, [r4, #16]
 800e036:	4915      	ldr	r1, [pc, #84]	@ (800e08c <create_node+0xec>)
 800e038:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800e03c:	9100      	str	r1, [sp, #0]
 800e03e:	2106      	movs	r1, #6
 800e040:	9101      	str	r1, [sp, #4]
 800e042:	6811      	ldr	r1, [r2, #0]
 800e044:	6962      	ldr	r2, [r4, #20]
 800e046:	fa1f f388 	uxth.w	r3, r8
 800e04a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e04e:	f002 f8d9 	bl	8010204 <uxr_buffer_create_participant_bin>
 800e052:	4602      	mov	r2, r0
 800e054:	6920      	ldr	r0, [r4, #16]
 800e056:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e05a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e05e:	f000 ff49 	bl	800eef4 <run_xrce_session>
 800e062:	b918      	cbnz	r0, 800e06c <create_node+0xcc>
 800e064:	4628      	mov	r0, r5
 800e066:	f000 fdd3 	bl	800ec10 <rmw_uxrce_fini_node_memory>
 800e06a:	2500      	movs	r5, #0
 800e06c:	4628      	mov	r0, r5
 800e06e:	b003      	add	sp, #12
 800e070:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e074:	4a06      	ldr	r2, [pc, #24]	@ (800e090 <create_node+0xf0>)
 800e076:	9600      	str	r6, [sp, #0]
 800e078:	463b      	mov	r3, r7
 800e07a:	213c      	movs	r1, #60	@ 0x3c
 800e07c:	4803      	ldr	r0, [pc, #12]	@ (800e08c <create_node+0xec>)
 800e07e:	f00a fb95 	bl	80187ac <sniprintf>
 800e082:	e7d7      	b.n	800e034 <create_node+0x94>
 800e084:	20010e8c 	.word	0x20010e8c
 800e088:	08019e3c 	.word	0x08019e3c
 800e08c:	2000c580 	.word	0x2000c580
 800e090:	08019ae0 	.word	0x08019ae0

0800e094 <rmw_create_node>:
 800e094:	b199      	cbz	r1, 800e0be <rmw_create_node+0x2a>
 800e096:	780b      	ldrb	r3, [r1, #0]
 800e098:	468c      	mov	ip, r1
 800e09a:	b183      	cbz	r3, 800e0be <rmw_create_node+0x2a>
 800e09c:	b410      	push	{r4}
 800e09e:	4614      	mov	r4, r2
 800e0a0:	b14a      	cbz	r2, 800e0b6 <rmw_create_node+0x22>
 800e0a2:	7813      	ldrb	r3, [r2, #0]
 800e0a4:	b13b      	cbz	r3, 800e0b6 <rmw_create_node+0x22>
 800e0a6:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	4621      	mov	r1, r4
 800e0ac:	4660      	mov	r0, ip
 800e0ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0b2:	f7ff bf75 	b.w	800dfa0 <create_node>
 800e0b6:	2000      	movs	r0, #0
 800e0b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0bc:	4770      	bx	lr
 800e0be:	2000      	movs	r0, #0
 800e0c0:	4770      	bx	lr
 800e0c2:	bf00      	nop

0800e0c4 <rmw_destroy_node>:
 800e0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0c6:	b328      	cbz	r0, 800e114 <rmw_destroy_node+0x50>
 800e0c8:	4607      	mov	r7, r0
 800e0ca:	6800      	ldr	r0, [r0, #0]
 800e0cc:	b120      	cbz	r0, 800e0d8 <rmw_destroy_node+0x14>
 800e0ce:	4b36      	ldr	r3, [pc, #216]	@ (800e1a8 <rmw_destroy_node+0xe4>)
 800e0d0:	6819      	ldr	r1, [r3, #0]
 800e0d2:	f7f2 f89d 	bl	8000210 <strcmp>
 800e0d6:	b9e8      	cbnz	r0, 800e114 <rmw_destroy_node+0x50>
 800e0d8:	687d      	ldr	r5, [r7, #4]
 800e0da:	b1dd      	cbz	r5, 800e114 <rmw_destroy_node+0x50>
 800e0dc:	4b33      	ldr	r3, [pc, #204]	@ (800e1ac <rmw_destroy_node+0xe8>)
 800e0de:	681c      	ldr	r4, [r3, #0]
 800e0e0:	2c00      	cmp	r4, #0
 800e0e2:	d05f      	beq.n	800e1a4 <rmw_destroy_node+0xe0>
 800e0e4:	2600      	movs	r6, #0
 800e0e6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e0ea:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800e0ee:	429d      	cmp	r5, r3
 800e0f0:	d013      	beq.n	800e11a <rmw_destroy_node+0x56>
 800e0f2:	2c00      	cmp	r4, #0
 800e0f4:	d1f7      	bne.n	800e0e6 <rmw_destroy_node+0x22>
 800e0f6:	4b2e      	ldr	r3, [pc, #184]	@ (800e1b0 <rmw_destroy_node+0xec>)
 800e0f8:	681c      	ldr	r4, [r3, #0]
 800e0fa:	b1c4      	cbz	r4, 800e12e <rmw_destroy_node+0x6a>
 800e0fc:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e100:	6a0b      	ldr	r3, [r1, #32]
 800e102:	429d      	cmp	r5, r3
 800e104:	d1f9      	bne.n	800e0fa <rmw_destroy_node+0x36>
 800e106:	317c      	adds	r1, #124	@ 0x7c
 800e108:	4638      	mov	r0, r7
 800e10a:	f000 fb37 	bl	800e77c <rmw_destroy_subscription>
 800e10e:	2801      	cmp	r0, #1
 800e110:	4606      	mov	r6, r0
 800e112:	d1f2      	bne.n	800e0fa <rmw_destroy_node+0x36>
 800e114:	2601      	movs	r6, #1
 800e116:	4630      	mov	r0, r6
 800e118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e11a:	3184      	adds	r1, #132	@ 0x84
 800e11c:	4638      	mov	r0, r7
 800e11e:	f000 f9a5 	bl	800e46c <rmw_destroy_publisher>
 800e122:	2801      	cmp	r0, #1
 800e124:	4606      	mov	r6, r0
 800e126:	d0f5      	beq.n	800e114 <rmw_destroy_node+0x50>
 800e128:	2c00      	cmp	r4, #0
 800e12a:	d1dc      	bne.n	800e0e6 <rmw_destroy_node+0x22>
 800e12c:	e7e3      	b.n	800e0f6 <rmw_destroy_node+0x32>
 800e12e:	4b21      	ldr	r3, [pc, #132]	@ (800e1b4 <rmw_destroy_node+0xf0>)
 800e130:	681c      	ldr	r4, [r3, #0]
 800e132:	b16c      	cbz	r4, 800e150 <rmw_destroy_node+0x8c>
 800e134:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e138:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800e13a:	429d      	cmp	r5, r3
 800e13c:	d1f9      	bne.n	800e132 <rmw_destroy_node+0x6e>
 800e13e:	317c      	adds	r1, #124	@ 0x7c
 800e140:	4638      	mov	r0, r7
 800e142:	f000 f9e5 	bl	800e510 <rmw_destroy_service>
 800e146:	2801      	cmp	r0, #1
 800e148:	4606      	mov	r6, r0
 800e14a:	d0e3      	beq.n	800e114 <rmw_destroy_node+0x50>
 800e14c:	2c00      	cmp	r4, #0
 800e14e:	d1f1      	bne.n	800e134 <rmw_destroy_node+0x70>
 800e150:	4b19      	ldr	r3, [pc, #100]	@ (800e1b8 <rmw_destroy_node+0xf4>)
 800e152:	681c      	ldr	r4, [r3, #0]
 800e154:	b16c      	cbz	r4, 800e172 <rmw_destroy_node+0xae>
 800e156:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e15a:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800e15c:	429d      	cmp	r5, r3
 800e15e:	d1f9      	bne.n	800e154 <rmw_destroy_node+0x90>
 800e160:	317c      	adds	r1, #124	@ 0x7c
 800e162:	4638      	mov	r0, r7
 800e164:	f008 fa86 	bl	8016674 <rmw_destroy_client>
 800e168:	2801      	cmp	r0, #1
 800e16a:	4606      	mov	r6, r0
 800e16c:	d0d2      	beq.n	800e114 <rmw_destroy_node+0x50>
 800e16e:	2c00      	cmp	r4, #0
 800e170:	d1f1      	bne.n	800e156 <rmw_destroy_node+0x92>
 800e172:	6928      	ldr	r0, [r5, #16]
 800e174:	696a      	ldr	r2, [r5, #20]
 800e176:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e17a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e17e:	6819      	ldr	r1, [r3, #0]
 800e180:	f001 fff4 	bl	801016c <uxr_buffer_delete_entity>
 800e184:	4602      	mov	r2, r0
 800e186:	6928      	ldr	r0, [r5, #16]
 800e188:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e18c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e190:	f000 feb0 	bl	800eef4 <run_xrce_session>
 800e194:	2800      	cmp	r0, #0
 800e196:	bf08      	it	eq
 800e198:	2602      	moveq	r6, #2
 800e19a:	4638      	mov	r0, r7
 800e19c:	f000 fd38 	bl	800ec10 <rmw_uxrce_fini_node_memory>
 800e1a0:	4630      	mov	r0, r6
 800e1a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1a4:	4626      	mov	r6, r4
 800e1a6:	e7a6      	b.n	800e0f6 <rmw_destroy_node+0x32>
 800e1a8:	0801a530 	.word	0x0801a530
 800e1ac:	20010e9c 	.word	0x20010e9c
 800e1b0:	20010edc 	.word	0x20010edc
 800e1b4:	20010eac 	.word	0x20010eac
 800e1b8:	2000c5bc 	.word	0x2000c5bc

0800e1bc <rmw_node_get_graph_guard_condition>:
 800e1bc:	6843      	ldr	r3, [r0, #4]
 800e1be:	6918      	ldr	r0, [r3, #16]
 800e1c0:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800e1c4:	4770      	bx	lr
 800e1c6:	bf00      	nop

0800e1c8 <flush_session>:
 800e1c8:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800e1ca:	f003 b9d5 	b.w	8011578 <uxr_run_session_until_confirm_delivery>
 800e1ce:	bf00      	nop

0800e1d0 <rmw_publish>:
 800e1d0:	2800      	cmp	r0, #0
 800e1d2:	d053      	beq.n	800e27c <rmw_publish+0xac>
 800e1d4:	b570      	push	{r4, r5, r6, lr}
 800e1d6:	460d      	mov	r5, r1
 800e1d8:	b08e      	sub	sp, #56	@ 0x38
 800e1da:	2900      	cmp	r1, #0
 800e1dc:	d04b      	beq.n	800e276 <rmw_publish+0xa6>
 800e1de:	4604      	mov	r4, r0
 800e1e0:	6800      	ldr	r0, [r0, #0]
 800e1e2:	f000 ff07 	bl	800eff4 <is_uxrce_rmw_identifier_valid>
 800e1e6:	2800      	cmp	r0, #0
 800e1e8:	d045      	beq.n	800e276 <rmw_publish+0xa6>
 800e1ea:	6866      	ldr	r6, [r4, #4]
 800e1ec:	2e00      	cmp	r6, #0
 800e1ee:	d042      	beq.n	800e276 <rmw_publish+0xa6>
 800e1f0:	69b4      	ldr	r4, [r6, #24]
 800e1f2:	4628      	mov	r0, r5
 800e1f4:	6923      	ldr	r3, [r4, #16]
 800e1f6:	4798      	blx	r3
 800e1f8:	69f3      	ldr	r3, [r6, #28]
 800e1fa:	9005      	str	r0, [sp, #20]
 800e1fc:	b113      	cbz	r3, 800e204 <rmw_publish+0x34>
 800e1fe:	a805      	add	r0, sp, #20
 800e200:	4798      	blx	r3
 800e202:	9805      	ldr	r0, [sp, #20]
 800e204:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e208:	691b      	ldr	r3, [r3, #16]
 800e20a:	9000      	str	r0, [sp, #0]
 800e20c:	6972      	ldr	r2, [r6, #20]
 800e20e:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800e210:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e214:	ab06      	add	r3, sp, #24
 800e216:	f004 fc57 	bl	8012ac8 <uxr_prepare_output_stream>
 800e21a:	b1d8      	cbz	r0, 800e254 <rmw_publish+0x84>
 800e21c:	68a3      	ldr	r3, [r4, #8]
 800e21e:	a906      	add	r1, sp, #24
 800e220:	4628      	mov	r0, r5
 800e222:	4798      	blx	r3
 800e224:	6a33      	ldr	r3, [r6, #32]
 800e226:	4604      	mov	r4, r0
 800e228:	b10b      	cbz	r3, 800e22e <rmw_publish+0x5e>
 800e22a:	a806      	add	r0, sp, #24
 800e22c:	4798      	blx	r3
 800e22e:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800e232:	2b01      	cmp	r3, #1
 800e234:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e238:	d022      	beq.n	800e280 <rmw_publish+0xb0>
 800e23a:	6918      	ldr	r0, [r3, #16]
 800e23c:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800e23e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e242:	f003 f999 	bl	8011578 <uxr_run_session_until_confirm_delivery>
 800e246:	4020      	ands	r0, r4
 800e248:	b2c4      	uxtb	r4, r0
 800e24a:	f084 0001 	eor.w	r0, r4, #1
 800e24e:	b2c0      	uxtb	r0, r0
 800e250:	b00e      	add	sp, #56	@ 0x38
 800e252:	bd70      	pop	{r4, r5, r6, pc}
 800e254:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e258:	6918      	ldr	r0, [r3, #16]
 800e25a:	9b05      	ldr	r3, [sp, #20]
 800e25c:	9300      	str	r3, [sp, #0]
 800e25e:	4b0b      	ldr	r3, [pc, #44]	@ (800e28c <rmw_publish+0xbc>)
 800e260:	9301      	str	r3, [sp, #4]
 800e262:	9602      	str	r6, [sp, #8]
 800e264:	6972      	ldr	r2, [r6, #20]
 800e266:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800e268:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e26c:	ab06      	add	r3, sp, #24
 800e26e:	f004 fc5b 	bl	8012b28 <uxr_prepare_output_stream_fragmented>
 800e272:	2800      	cmp	r0, #0
 800e274:	d1d2      	bne.n	800e21c <rmw_publish+0x4c>
 800e276:	2001      	movs	r0, #1
 800e278:	b00e      	add	sp, #56	@ 0x38
 800e27a:	bd70      	pop	{r4, r5, r6, pc}
 800e27c:	2001      	movs	r0, #1
 800e27e:	4770      	bx	lr
 800e280:	6918      	ldr	r0, [r3, #16]
 800e282:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e286:	f002 fdb7 	bl	8010df8 <uxr_flash_output_streams>
 800e28a:	e7de      	b.n	800e24a <rmw_publish+0x7a>
 800e28c:	0800e1c9 	.word	0x0800e1c9

0800e290 <rmw_create_publisher>:
 800e290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e294:	b087      	sub	sp, #28
 800e296:	2800      	cmp	r0, #0
 800e298:	f000 80cc 	beq.w	800e434 <rmw_create_publisher+0x1a4>
 800e29c:	460e      	mov	r6, r1
 800e29e:	2900      	cmp	r1, #0
 800e2a0:	f000 80c8 	beq.w	800e434 <rmw_create_publisher+0x1a4>
 800e2a4:	4604      	mov	r4, r0
 800e2a6:	6800      	ldr	r0, [r0, #0]
 800e2a8:	4615      	mov	r5, r2
 800e2aa:	4698      	mov	r8, r3
 800e2ac:	f000 fea2 	bl	800eff4 <is_uxrce_rmw_identifier_valid>
 800e2b0:	2800      	cmp	r0, #0
 800e2b2:	f000 80bf 	beq.w	800e434 <rmw_create_publisher+0x1a4>
 800e2b6:	2d00      	cmp	r5, #0
 800e2b8:	f000 80bc 	beq.w	800e434 <rmw_create_publisher+0x1a4>
 800e2bc:	782b      	ldrb	r3, [r5, #0]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	f000 80b8 	beq.w	800e434 <rmw_create_publisher+0x1a4>
 800e2c4:	f1b8 0f00 	cmp.w	r8, #0
 800e2c8:	f000 80b4 	beq.w	800e434 <rmw_create_publisher+0x1a4>
 800e2cc:	485c      	ldr	r0, [pc, #368]	@ (800e440 <rmw_create_publisher+0x1b0>)
 800e2ce:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e2d2:	f008 f9ab 	bl	801662c <get_memory>
 800e2d6:	2800      	cmp	r0, #0
 800e2d8:	f000 80ac 	beq.w	800e434 <rmw_create_publisher+0x1a4>
 800e2dc:	6884      	ldr	r4, [r0, #8]
 800e2de:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800e2e2:	f008 fa0b 	bl	80166fc <rmw_get_implementation_identifier>
 800e2e6:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800e2ea:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800e2ee:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800e2f2:	4628      	mov	r0, r5
 800e2f4:	f7f1 ff96 	bl	8000224 <strlen>
 800e2f8:	3001      	adds	r0, #1
 800e2fa:	283c      	cmp	r0, #60	@ 0x3c
 800e2fc:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800e300:	f200 8091 	bhi.w	800e426 <rmw_create_publisher+0x196>
 800e304:	4a4f      	ldr	r2, [pc, #316]	@ (800e444 <rmw_create_publisher+0x1b4>)
 800e306:	462b      	mov	r3, r5
 800e308:	213c      	movs	r1, #60	@ 0x3c
 800e30a:	4650      	mov	r0, sl
 800e30c:	f00a fa4e 	bl	80187ac <sniprintf>
 800e310:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e314:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800e316:	4641      	mov	r1, r8
 800e318:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800e31c:	2250      	movs	r2, #80	@ 0x50
 800e31e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800e322:	f00a fc4a 	bl	8018bba <memcpy>
 800e326:	f898 3008 	ldrb.w	r3, [r8, #8]
 800e32a:	4947      	ldr	r1, [pc, #284]	@ (800e448 <rmw_create_publisher+0x1b8>)
 800e32c:	2b02      	cmp	r3, #2
 800e32e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e332:	bf0c      	ite	eq
 800e334:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800e338:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800e33c:	67a3      	str	r3, [r4, #120]	@ 0x78
 800e33e:	2300      	movs	r3, #0
 800e340:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800e344:	4630      	mov	r0, r6
 800e346:	f000 fe63 	bl	800f010 <get_message_typesupport_handle>
 800e34a:	2800      	cmp	r0, #0
 800e34c:	d06b      	beq.n	800e426 <rmw_create_publisher+0x196>
 800e34e:	6842      	ldr	r2, [r0, #4]
 800e350:	61a2      	str	r2, [r4, #24]
 800e352:	2a00      	cmp	r2, #0
 800e354:	d067      	beq.n	800e426 <rmw_create_publisher+0x196>
 800e356:	4629      	mov	r1, r5
 800e358:	4643      	mov	r3, r8
 800e35a:	4648      	mov	r0, r9
 800e35c:	f008 f9fc 	bl	8016758 <create_topic>
 800e360:	6260      	str	r0, [r4, #36]	@ 0x24
 800e362:	2800      	cmp	r0, #0
 800e364:	d063      	beq.n	800e42e <rmw_create_publisher+0x19e>
 800e366:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e36a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e36e:	2103      	movs	r1, #3
 800e370:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800e374:	1c42      	adds	r2, r0, #1
 800e376:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800e37a:	f002 f9bb 	bl	80106f4 <uxr_object_id>
 800e37e:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800e382:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e386:	6120      	str	r0, [r4, #16]
 800e388:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800e38c:	6910      	ldr	r0, [r2, #16]
 800e38e:	2506      	movs	r5, #6
 800e390:	9500      	str	r5, [sp, #0]
 800e392:	6819      	ldr	r1, [r3, #0]
 800e394:	6922      	ldr	r2, [r4, #16]
 800e396:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800e39a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e39e:	f001 ff99 	bl	80102d4 <uxr_buffer_create_publisher_bin>
 800e3a2:	4602      	mov	r2, r0
 800e3a4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e3a8:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e3ac:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e3b0:	f000 fda0 	bl	800eef4 <run_xrce_session>
 800e3b4:	b3b8      	cbz	r0, 800e426 <rmw_create_publisher+0x196>
 800e3b6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e3ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e3be:	2105      	movs	r1, #5
 800e3c0:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800e3c4:	1c42      	adds	r2, r0, #1
 800e3c6:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800e3ca:	f002 f993 	bl	80106f4 <uxr_object_id>
 800e3ce:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e3d2:	6160      	str	r0, [r4, #20]
 800e3d4:	691e      	ldr	r6, [r3, #16]
 800e3d6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e3da:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800e3de:	f10d 0a10 	add.w	sl, sp, #16
 800e3e2:	4641      	mov	r1, r8
 800e3e4:	4650      	mov	r0, sl
 800e3e6:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800e3ea:	f000 fd9f 	bl	800ef2c <convert_qos_profile>
 800e3ee:	9503      	str	r5, [sp, #12]
 800e3f0:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800e3f4:	9001      	str	r0, [sp, #4]
 800e3f6:	f8ad 1008 	strh.w	r1, [sp, #8]
 800e3fa:	f8db 3010 	ldr.w	r3, [fp, #16]
 800e3fe:	9300      	str	r3, [sp, #0]
 800e400:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800e404:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800e408:	f8d8 1000 	ldr.w	r1, [r8]
 800e40c:	4630      	mov	r0, r6
 800e40e:	f001 ffc1 	bl	8010394 <uxr_buffer_create_datawriter_bin>
 800e412:	4602      	mov	r2, r0
 800e414:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e418:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e41c:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e420:	f000 fd68 	bl	800eef4 <run_xrce_session>
 800e424:	b938      	cbnz	r0, 800e436 <rmw_create_publisher+0x1a6>
 800e426:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e428:	b108      	cbz	r0, 800e42e <rmw_create_publisher+0x19e>
 800e42a:	f000 fc61 	bl	800ecf0 <rmw_uxrce_fini_topic_memory>
 800e42e:	4638      	mov	r0, r7
 800e430:	f000 fc06 	bl	800ec40 <rmw_uxrce_fini_publisher_memory>
 800e434:	2700      	movs	r7, #0
 800e436:	4638      	mov	r0, r7
 800e438:	b007      	add	sp, #28
 800e43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e43e:	bf00      	nop
 800e440:	20010e9c 	.word	0x20010e9c
 800e444:	08019e3c 	.word	0x08019e3c
 800e448:	08019e08 	.word	0x08019e08

0800e44c <rmw_publisher_get_actual_qos>:
 800e44c:	b150      	cbz	r0, 800e464 <rmw_publisher_get_actual_qos+0x18>
 800e44e:	b508      	push	{r3, lr}
 800e450:	460b      	mov	r3, r1
 800e452:	b149      	cbz	r1, 800e468 <rmw_publisher_get_actual_qos+0x1c>
 800e454:	6841      	ldr	r1, [r0, #4]
 800e456:	2250      	movs	r2, #80	@ 0x50
 800e458:	3128      	adds	r1, #40	@ 0x28
 800e45a:	4618      	mov	r0, r3
 800e45c:	f00a fbad 	bl	8018bba <memcpy>
 800e460:	2000      	movs	r0, #0
 800e462:	bd08      	pop	{r3, pc}
 800e464:	200b      	movs	r0, #11
 800e466:	4770      	bx	lr
 800e468:	200b      	movs	r0, #11
 800e46a:	bd08      	pop	{r3, pc}

0800e46c <rmw_destroy_publisher>:
 800e46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e46e:	b128      	cbz	r0, 800e47c <rmw_destroy_publisher+0x10>
 800e470:	4604      	mov	r4, r0
 800e472:	6800      	ldr	r0, [r0, #0]
 800e474:	460d      	mov	r5, r1
 800e476:	f000 fdbd 	bl	800eff4 <is_uxrce_rmw_identifier_valid>
 800e47a:	b910      	cbnz	r0, 800e482 <rmw_destroy_publisher+0x16>
 800e47c:	2401      	movs	r4, #1
 800e47e:	4620      	mov	r0, r4
 800e480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e482:	6863      	ldr	r3, [r4, #4]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d0f9      	beq.n	800e47c <rmw_destroy_publisher+0x10>
 800e488:	2d00      	cmp	r5, #0
 800e48a:	d0f7      	beq.n	800e47c <rmw_destroy_publisher+0x10>
 800e48c:	6828      	ldr	r0, [r5, #0]
 800e48e:	f000 fdb1 	bl	800eff4 <is_uxrce_rmw_identifier_valid>
 800e492:	2800      	cmp	r0, #0
 800e494:	d0f2      	beq.n	800e47c <rmw_destroy_publisher+0x10>
 800e496:	686c      	ldr	r4, [r5, #4]
 800e498:	2c00      	cmp	r4, #0
 800e49a:	d0ef      	beq.n	800e47c <rmw_destroy_publisher+0x10>
 800e49c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e49e:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800e4a2:	f008 f9a9 	bl	80167f8 <destroy_topic>
 800e4a6:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e4aa:	6962      	ldr	r2, [r4, #20]
 800e4ac:	6918      	ldr	r0, [r3, #16]
 800e4ae:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e4b2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e4b6:	6819      	ldr	r1, [r3, #0]
 800e4b8:	f001 fe58 	bl	801016c <uxr_buffer_delete_entity>
 800e4bc:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e4c0:	6922      	ldr	r2, [r4, #16]
 800e4c2:	691b      	ldr	r3, [r3, #16]
 800e4c4:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800e4c8:	4604      	mov	r4, r0
 800e4ca:	6809      	ldr	r1, [r1, #0]
 800e4cc:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e4d0:	f001 fe4c 	bl	801016c <uxr_buffer_delete_entity>
 800e4d4:	693e      	ldr	r6, [r7, #16]
 800e4d6:	4622      	mov	r2, r4
 800e4d8:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800e4dc:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800e4e0:	4604      	mov	r4, r0
 800e4e2:	4630      	mov	r0, r6
 800e4e4:	f000 fd06 	bl	800eef4 <run_xrce_session>
 800e4e8:	693e      	ldr	r6, [r7, #16]
 800e4ea:	4622      	mov	r2, r4
 800e4ec:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800e4f0:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800e4f4:	4604      	mov	r4, r0
 800e4f6:	4630      	mov	r0, r6
 800e4f8:	f000 fcfc 	bl	800eef4 <run_xrce_session>
 800e4fc:	b12c      	cbz	r4, 800e50a <rmw_destroy_publisher+0x9e>
 800e4fe:	b120      	cbz	r0, 800e50a <rmw_destroy_publisher+0x9e>
 800e500:	2400      	movs	r4, #0
 800e502:	4628      	mov	r0, r5
 800e504:	f000 fb9c 	bl	800ec40 <rmw_uxrce_fini_publisher_memory>
 800e508:	e7b9      	b.n	800e47e <rmw_destroy_publisher+0x12>
 800e50a:	2402      	movs	r4, #2
 800e50c:	e7f9      	b.n	800e502 <rmw_destroy_publisher+0x96>
 800e50e:	bf00      	nop

0800e510 <rmw_destroy_service>:
 800e510:	b570      	push	{r4, r5, r6, lr}
 800e512:	b128      	cbz	r0, 800e520 <rmw_destroy_service+0x10>
 800e514:	4604      	mov	r4, r0
 800e516:	6800      	ldr	r0, [r0, #0]
 800e518:	460d      	mov	r5, r1
 800e51a:	f000 fd6b 	bl	800eff4 <is_uxrce_rmw_identifier_valid>
 800e51e:	b910      	cbnz	r0, 800e526 <rmw_destroy_service+0x16>
 800e520:	2401      	movs	r4, #1
 800e522:	4620      	mov	r0, r4
 800e524:	bd70      	pop	{r4, r5, r6, pc}
 800e526:	6863      	ldr	r3, [r4, #4]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d0f9      	beq.n	800e520 <rmw_destroy_service+0x10>
 800e52c:	2d00      	cmp	r5, #0
 800e52e:	d0f7      	beq.n	800e520 <rmw_destroy_service+0x10>
 800e530:	6828      	ldr	r0, [r5, #0]
 800e532:	f000 fd5f 	bl	800eff4 <is_uxrce_rmw_identifier_valid>
 800e536:	2800      	cmp	r0, #0
 800e538:	d0f2      	beq.n	800e520 <rmw_destroy_service+0x10>
 800e53a:	686e      	ldr	r6, [r5, #4]
 800e53c:	2e00      	cmp	r6, #0
 800e53e:	d0ef      	beq.n	800e520 <rmw_destroy_service+0x10>
 800e540:	6864      	ldr	r4, [r4, #4]
 800e542:	6932      	ldr	r2, [r6, #16]
 800e544:	6920      	ldr	r0, [r4, #16]
 800e546:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e54a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e54e:	6819      	ldr	r1, [r3, #0]
 800e550:	f002 fa3e 	bl	80109d0 <uxr_buffer_cancel_data>
 800e554:	4602      	mov	r2, r0
 800e556:	6920      	ldr	r0, [r4, #16]
 800e558:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e55c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e560:	f000 fcc8 	bl	800eef4 <run_xrce_session>
 800e564:	6920      	ldr	r0, [r4, #16]
 800e566:	6932      	ldr	r2, [r6, #16]
 800e568:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e56c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e570:	6819      	ldr	r1, [r3, #0]
 800e572:	f001 fdfb 	bl	801016c <uxr_buffer_delete_entity>
 800e576:	4602      	mov	r2, r0
 800e578:	6920      	ldr	r0, [r4, #16]
 800e57a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e57e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e582:	f000 fcb7 	bl	800eef4 <run_xrce_session>
 800e586:	2800      	cmp	r0, #0
 800e588:	4628      	mov	r0, r5
 800e58a:	bf14      	ite	ne
 800e58c:	2400      	movne	r4, #0
 800e58e:	2402      	moveq	r4, #2
 800e590:	f000 fb82 	bl	800ec98 <rmw_uxrce_fini_service_memory>
 800e594:	e7c5      	b.n	800e522 <rmw_destroy_service+0x12>
 800e596:	bf00      	nop

0800e598 <rmw_create_subscription>:
 800e598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e59c:	b08d      	sub	sp, #52	@ 0x34
 800e59e:	2800      	cmp	r0, #0
 800e5a0:	f000 80d1 	beq.w	800e746 <rmw_create_subscription+0x1ae>
 800e5a4:	460e      	mov	r6, r1
 800e5a6:	2900      	cmp	r1, #0
 800e5a8:	f000 80cd 	beq.w	800e746 <rmw_create_subscription+0x1ae>
 800e5ac:	4604      	mov	r4, r0
 800e5ae:	6800      	ldr	r0, [r0, #0]
 800e5b0:	4615      	mov	r5, r2
 800e5b2:	4698      	mov	r8, r3
 800e5b4:	f000 fd1e 	bl	800eff4 <is_uxrce_rmw_identifier_valid>
 800e5b8:	2800      	cmp	r0, #0
 800e5ba:	f000 80c4 	beq.w	800e746 <rmw_create_subscription+0x1ae>
 800e5be:	2d00      	cmp	r5, #0
 800e5c0:	f000 80c1 	beq.w	800e746 <rmw_create_subscription+0x1ae>
 800e5c4:	782b      	ldrb	r3, [r5, #0]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	f000 80bd 	beq.w	800e746 <rmw_create_subscription+0x1ae>
 800e5cc:	f1b8 0f00 	cmp.w	r8, #0
 800e5d0:	f000 80b9 	beq.w	800e746 <rmw_create_subscription+0x1ae>
 800e5d4:	485e      	ldr	r0, [pc, #376]	@ (800e750 <rmw_create_subscription+0x1b8>)
 800e5d6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e5da:	f008 f827 	bl	801662c <get_memory>
 800e5de:	4604      	mov	r4, r0
 800e5e0:	2800      	cmp	r0, #0
 800e5e2:	f000 80b1 	beq.w	800e748 <rmw_create_subscription+0x1b0>
 800e5e6:	6887      	ldr	r7, [r0, #8]
 800e5e8:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800e5ec:	f008 f886 	bl	80166fc <rmw_get_implementation_identifier>
 800e5f0:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 800e5f4:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800e5f6:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800e5fa:	4628      	mov	r0, r5
 800e5fc:	f7f1 fe12 	bl	8000224 <strlen>
 800e600:	3001      	adds	r0, #1
 800e602:	283c      	cmp	r0, #60	@ 0x3c
 800e604:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 800e608:	f200 8096 	bhi.w	800e738 <rmw_create_subscription+0x1a0>
 800e60c:	4a51      	ldr	r2, [pc, #324]	@ (800e754 <rmw_create_subscription+0x1bc>)
 800e60e:	462b      	mov	r3, r5
 800e610:	213c      	movs	r1, #60	@ 0x3c
 800e612:	4650      	mov	r0, sl
 800e614:	f00a f8ca 	bl	80187ac <sniprintf>
 800e618:	4641      	mov	r1, r8
 800e61a:	f8c7 9020 	str.w	r9, [r7, #32]
 800e61e:	2250      	movs	r2, #80	@ 0x50
 800e620:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800e624:	f00a fac9 	bl	8018bba <memcpy>
 800e628:	494b      	ldr	r1, [pc, #300]	@ (800e758 <rmw_create_subscription+0x1c0>)
 800e62a:	4630      	mov	r0, r6
 800e62c:	f000 fcf0 	bl	800f010 <get_message_typesupport_handle>
 800e630:	2800      	cmp	r0, #0
 800e632:	f000 8081 	beq.w	800e738 <rmw_create_subscription+0x1a0>
 800e636:	6842      	ldr	r2, [r0, #4]
 800e638:	61ba      	str	r2, [r7, #24]
 800e63a:	2a00      	cmp	r2, #0
 800e63c:	d07c      	beq.n	800e738 <rmw_create_subscription+0x1a0>
 800e63e:	4629      	mov	r1, r5
 800e640:	4643      	mov	r3, r8
 800e642:	4648      	mov	r0, r9
 800e644:	f008 f888 	bl	8016758 <create_topic>
 800e648:	61f8      	str	r0, [r7, #28]
 800e64a:	2800      	cmp	r0, #0
 800e64c:	d078      	beq.n	800e740 <rmw_create_subscription+0x1a8>
 800e64e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e652:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e656:	2104      	movs	r1, #4
 800e658:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 800e65c:	1c42      	adds	r2, r0, #1
 800e65e:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 800e662:	f002 f847 	bl	80106f4 <uxr_object_id>
 800e666:	6138      	str	r0, [r7, #16]
 800e668:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e66c:	2506      	movs	r5, #6
 800e66e:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 800e672:	9500      	str	r5, [sp, #0]
 800e674:	6819      	ldr	r1, [r3, #0]
 800e676:	693a      	ldr	r2, [r7, #16]
 800e678:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800e67c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e680:	f001 fe58 	bl	8010334 <uxr_buffer_create_subscriber_bin>
 800e684:	4602      	mov	r2, r0
 800e686:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e68a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e68e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e692:	f000 fc2f 	bl	800eef4 <run_xrce_session>
 800e696:	2800      	cmp	r0, #0
 800e698:	d04e      	beq.n	800e738 <rmw_create_subscription+0x1a0>
 800e69a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e69e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e6a2:	4629      	mov	r1, r5
 800e6a4:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 800e6a8:	1c42      	adds	r2, r0, #1
 800e6aa:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 800e6ae:	f002 f821 	bl	80106f4 <uxr_object_id>
 800e6b2:	ae08      	add	r6, sp, #32
 800e6b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e6b8:	69fb      	ldr	r3, [r7, #28]
 800e6ba:	6178      	str	r0, [r7, #20]
 800e6bc:	4641      	mov	r1, r8
 800e6be:	4630      	mov	r0, r6
 800e6c0:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 800e6c4:	9305      	str	r3, [sp, #20]
 800e6c6:	f000 fc31 	bl	800ef2c <convert_qos_profile>
 800e6ca:	9503      	str	r5, [sp, #12]
 800e6cc:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e6d0:	9b05      	ldr	r3, [sp, #20]
 800e6d2:	9001      	str	r0, [sp, #4]
 800e6d4:	f8ad 1008 	strh.w	r1, [sp, #8]
 800e6d8:	691b      	ldr	r3, [r3, #16]
 800e6da:	9300      	str	r3, [sp, #0]
 800e6dc:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800e6e0:	f8db 1000 	ldr.w	r1, [fp]
 800e6e4:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 800e6e8:	f001 feca 	bl	8010480 <uxr_buffer_create_datareader_bin>
 800e6ec:	4602      	mov	r2, r0
 800e6ee:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e6f2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e6f6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e6fa:	f000 fbfb 	bl	800eef4 <run_xrce_session>
 800e6fe:	b1d8      	cbz	r0, 800e738 <rmw_create_subscription+0x1a0>
 800e700:	f898 3008 	ldrb.w	r3, [r8, #8]
 800e704:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e708:	2b02      	cmp	r3, #2
 800e70a:	bf0c      	ite	eq
 800e70c:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 800e710:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 800e714:	9307      	str	r3, [sp, #28]
 800e716:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800e71a:	2200      	movs	r2, #0
 800e71c:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 800e720:	ab0a      	add	r3, sp, #40	@ 0x28
 800e722:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e726:	9300      	str	r3, [sp, #0]
 800e728:	697a      	ldr	r2, [r7, #20]
 800e72a:	9b07      	ldr	r3, [sp, #28]
 800e72c:	6809      	ldr	r1, [r1, #0]
 800e72e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e732:	f002 f913 	bl	801095c <uxr_buffer_request_data>
 800e736:	e007      	b.n	800e748 <rmw_create_subscription+0x1b0>
 800e738:	69f8      	ldr	r0, [r7, #28]
 800e73a:	b108      	cbz	r0, 800e740 <rmw_create_subscription+0x1a8>
 800e73c:	f000 fad8 	bl	800ecf0 <rmw_uxrce_fini_topic_memory>
 800e740:	4620      	mov	r0, r4
 800e742:	f000 fa93 	bl	800ec6c <rmw_uxrce_fini_subscription_memory>
 800e746:	2400      	movs	r4, #0
 800e748:	4620      	mov	r0, r4
 800e74a:	b00d      	add	sp, #52	@ 0x34
 800e74c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e750:	20010edc 	.word	0x20010edc
 800e754:	08019e3c 	.word	0x08019e3c
 800e758:	08019e08 	.word	0x08019e08

0800e75c <rmw_subscription_get_actual_qos>:
 800e75c:	b150      	cbz	r0, 800e774 <rmw_subscription_get_actual_qos+0x18>
 800e75e:	b508      	push	{r3, lr}
 800e760:	460b      	mov	r3, r1
 800e762:	b149      	cbz	r1, 800e778 <rmw_subscription_get_actual_qos+0x1c>
 800e764:	6841      	ldr	r1, [r0, #4]
 800e766:	2250      	movs	r2, #80	@ 0x50
 800e768:	3128      	adds	r1, #40	@ 0x28
 800e76a:	4618      	mov	r0, r3
 800e76c:	f00a fa25 	bl	8018bba <memcpy>
 800e770:	2000      	movs	r0, #0
 800e772:	bd08      	pop	{r3, pc}
 800e774:	200b      	movs	r0, #11
 800e776:	4770      	bx	lr
 800e778:	200b      	movs	r0, #11
 800e77a:	bd08      	pop	{r3, pc}

0800e77c <rmw_destroy_subscription>:
 800e77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e77e:	b128      	cbz	r0, 800e78c <rmw_destroy_subscription+0x10>
 800e780:	4604      	mov	r4, r0
 800e782:	6800      	ldr	r0, [r0, #0]
 800e784:	460d      	mov	r5, r1
 800e786:	f000 fc35 	bl	800eff4 <is_uxrce_rmw_identifier_valid>
 800e78a:	b910      	cbnz	r0, 800e792 <rmw_destroy_subscription+0x16>
 800e78c:	2401      	movs	r4, #1
 800e78e:	4620      	mov	r0, r4
 800e790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e792:	6863      	ldr	r3, [r4, #4]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d0f9      	beq.n	800e78c <rmw_destroy_subscription+0x10>
 800e798:	2d00      	cmp	r5, #0
 800e79a:	d0f7      	beq.n	800e78c <rmw_destroy_subscription+0x10>
 800e79c:	6828      	ldr	r0, [r5, #0]
 800e79e:	f000 fc29 	bl	800eff4 <is_uxrce_rmw_identifier_valid>
 800e7a2:	2800      	cmp	r0, #0
 800e7a4:	d0f2      	beq.n	800e78c <rmw_destroy_subscription+0x10>
 800e7a6:	686c      	ldr	r4, [r5, #4]
 800e7a8:	2c00      	cmp	r4, #0
 800e7aa:	d0ef      	beq.n	800e78c <rmw_destroy_subscription+0x10>
 800e7ac:	6a26      	ldr	r6, [r4, #32]
 800e7ae:	6962      	ldr	r2, [r4, #20]
 800e7b0:	6930      	ldr	r0, [r6, #16]
 800e7b2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e7b6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e7ba:	6819      	ldr	r1, [r3, #0]
 800e7bc:	f002 f908 	bl	80109d0 <uxr_buffer_cancel_data>
 800e7c0:	4602      	mov	r2, r0
 800e7c2:	6930      	ldr	r0, [r6, #16]
 800e7c4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e7c8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e7cc:	f000 fb92 	bl	800eef4 <run_xrce_session>
 800e7d0:	69e0      	ldr	r0, [r4, #28]
 800e7d2:	f008 f811 	bl	80167f8 <destroy_topic>
 800e7d6:	6a23      	ldr	r3, [r4, #32]
 800e7d8:	6962      	ldr	r2, [r4, #20]
 800e7da:	6918      	ldr	r0, [r3, #16]
 800e7dc:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e7e0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e7e4:	6819      	ldr	r1, [r3, #0]
 800e7e6:	f001 fcc1 	bl	801016c <uxr_buffer_delete_entity>
 800e7ea:	6a23      	ldr	r3, [r4, #32]
 800e7ec:	6922      	ldr	r2, [r4, #16]
 800e7ee:	691b      	ldr	r3, [r3, #16]
 800e7f0:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800e7f4:	4604      	mov	r4, r0
 800e7f6:	6809      	ldr	r1, [r1, #0]
 800e7f8:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e7fc:	f001 fcb6 	bl	801016c <uxr_buffer_delete_entity>
 800e800:	6937      	ldr	r7, [r6, #16]
 800e802:	4622      	mov	r2, r4
 800e804:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800e808:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800e80c:	4604      	mov	r4, r0
 800e80e:	4638      	mov	r0, r7
 800e810:	f000 fb70 	bl	800eef4 <run_xrce_session>
 800e814:	6936      	ldr	r6, [r6, #16]
 800e816:	4622      	mov	r2, r4
 800e818:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800e81c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800e820:	4604      	mov	r4, r0
 800e822:	4630      	mov	r0, r6
 800e824:	f000 fb66 	bl	800eef4 <run_xrce_session>
 800e828:	b12c      	cbz	r4, 800e836 <rmw_destroy_subscription+0xba>
 800e82a:	b120      	cbz	r0, 800e836 <rmw_destroy_subscription+0xba>
 800e82c:	2400      	movs	r4, #0
 800e82e:	4628      	mov	r0, r5
 800e830:	f000 fa1c 	bl	800ec6c <rmw_uxrce_fini_subscription_memory>
 800e834:	e7ab      	b.n	800e78e <rmw_destroy_subscription+0x12>
 800e836:	2402      	movs	r4, #2
 800e838:	e7f9      	b.n	800e82e <rmw_destroy_subscription+0xb2>
 800e83a:	bf00      	nop

0800e83c <rmw_take_with_info>:
 800e83c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e83e:	4604      	mov	r4, r0
 800e840:	6800      	ldr	r0, [r0, #0]
 800e842:	b089      	sub	sp, #36	@ 0x24
 800e844:	460f      	mov	r7, r1
 800e846:	4615      	mov	r5, r2
 800e848:	b128      	cbz	r0, 800e856 <rmw_take_with_info+0x1a>
 800e84a:	4b24      	ldr	r3, [pc, #144]	@ (800e8dc <rmw_take_with_info+0xa0>)
 800e84c:	6819      	ldr	r1, [r3, #0]
 800e84e:	f7f1 fcdf 	bl	8000210 <strcmp>
 800e852:	2800      	cmp	r0, #0
 800e854:	d13e      	bne.n	800e8d4 <rmw_take_with_info+0x98>
 800e856:	b305      	cbz	r5, 800e89a <rmw_take_with_info+0x5e>
 800e858:	6864      	ldr	r4, [r4, #4]
 800e85a:	2300      	movs	r3, #0
 800e85c:	702b      	strb	r3, [r5, #0]
 800e85e:	f000 facb 	bl	800edf8 <rmw_uxrce_clean_expired_static_input_buffer>
 800e862:	4620      	mov	r0, r4
 800e864:	f000 faa0 	bl	800eda8 <rmw_uxrce_find_static_input_buffer_by_owner>
 800e868:	4606      	mov	r6, r0
 800e86a:	b1f0      	cbz	r0, 800e8aa <rmw_take_with_info+0x6e>
 800e86c:	6881      	ldr	r1, [r0, #8]
 800e86e:	4668      	mov	r0, sp
 800e870:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 800e874:	3110      	adds	r1, #16
 800e876:	f001 fc09 	bl	801008c <ucdr_init_buffer>
 800e87a:	69a3      	ldr	r3, [r4, #24]
 800e87c:	4639      	mov	r1, r7
 800e87e:	68db      	ldr	r3, [r3, #12]
 800e880:	4668      	mov	r0, sp
 800e882:	4798      	blx	r3
 800e884:	4631      	mov	r1, r6
 800e886:	4604      	mov	r4, r0
 800e888:	4815      	ldr	r0, [pc, #84]	@ (800e8e0 <rmw_take_with_info+0xa4>)
 800e88a:	f007 fedf 	bl	801664c <put_memory>
 800e88e:	702c      	strb	r4, [r5, #0]
 800e890:	f084 0001 	eor.w	r0, r4, #1
 800e894:	b2c0      	uxtb	r0, r0
 800e896:	b009      	add	sp, #36	@ 0x24
 800e898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e89a:	6864      	ldr	r4, [r4, #4]
 800e89c:	f000 faac 	bl	800edf8 <rmw_uxrce_clean_expired_static_input_buffer>
 800e8a0:	4620      	mov	r0, r4
 800e8a2:	f000 fa81 	bl	800eda8 <rmw_uxrce_find_static_input_buffer_by_owner>
 800e8a6:	4605      	mov	r5, r0
 800e8a8:	b910      	cbnz	r0, 800e8b0 <rmw_take_with_info+0x74>
 800e8aa:	2001      	movs	r0, #1
 800e8ac:	b009      	add	sp, #36	@ 0x24
 800e8ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8b0:	68a9      	ldr	r1, [r5, #8]
 800e8b2:	4668      	mov	r0, sp
 800e8b4:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 800e8b8:	3110      	adds	r1, #16
 800e8ba:	f001 fbe7 	bl	801008c <ucdr_init_buffer>
 800e8be:	69a3      	ldr	r3, [r4, #24]
 800e8c0:	4639      	mov	r1, r7
 800e8c2:	68db      	ldr	r3, [r3, #12]
 800e8c4:	4668      	mov	r0, sp
 800e8c6:	4798      	blx	r3
 800e8c8:	4629      	mov	r1, r5
 800e8ca:	4604      	mov	r4, r0
 800e8cc:	4804      	ldr	r0, [pc, #16]	@ (800e8e0 <rmw_take_with_info+0xa4>)
 800e8ce:	f007 febd 	bl	801664c <put_memory>
 800e8d2:	e7dd      	b.n	800e890 <rmw_take_with_info+0x54>
 800e8d4:	200c      	movs	r0, #12
 800e8d6:	b009      	add	sp, #36	@ 0x24
 800e8d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8da:	bf00      	nop
 800e8dc:	0801a530 	.word	0x0801a530
 800e8e0:	20010ecc 	.word	0x20010ecc

0800e8e4 <rmw_uxrce_transport_init>:
 800e8e4:	b508      	push	{r3, lr}
 800e8e6:	b108      	cbz	r0, 800e8ec <rmw_uxrce_transport_init+0x8>
 800e8e8:	f100 0210 	add.w	r2, r0, #16
 800e8ec:	b139      	cbz	r1, 800e8fe <rmw_uxrce_transport_init+0x1a>
 800e8ee:	6949      	ldr	r1, [r1, #20]
 800e8f0:	4610      	mov	r0, r2
 800e8f2:	f001 fec7 	bl	8010684 <uxr_init_custom_transport>
 800e8f6:	f080 0001 	eor.w	r0, r0, #1
 800e8fa:	b2c0      	uxtb	r0, r0
 800e8fc:	bd08      	pop	{r3, pc}
 800e8fe:	4b04      	ldr	r3, [pc, #16]	@ (800e910 <rmw_uxrce_transport_init+0x2c>)
 800e900:	4610      	mov	r0, r2
 800e902:	6859      	ldr	r1, [r3, #4]
 800e904:	f001 febe 	bl	8010684 <uxr_init_custom_transport>
 800e908:	f080 0001 	eor.w	r0, r0, #1
 800e90c:	b2c0      	uxtb	r0, r0
 800e90e:	bd08      	pop	{r3, pc}
 800e910:	2000c564 	.word	0x2000c564

0800e914 <rmw_uros_set_publisher_session_timeout>:
 800e914:	b118      	cbz	r0, 800e91e <rmw_uros_set_publisher_session_timeout+0xa>
 800e916:	6843      	ldr	r3, [r0, #4]
 800e918:	2000      	movs	r0, #0
 800e91a:	67d9      	str	r1, [r3, #124]	@ 0x7c
 800e91c:	4770      	bx	lr
 800e91e:	200b      	movs	r0, #11
 800e920:	4770      	bx	lr
 800e922:	bf00      	nop

0800e924 <rmw_uros_set_context_entity_destroy_session_timeout>:
 800e924:	b160      	cbz	r0, 800e940 <rmw_uros_set_context_entity_destroy_session_timeout+0x1c>
 800e926:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800e928:	2900      	cmp	r1, #0
 800e92a:	bfd4      	ite	le
 800e92c:	f503 725f 	addle.w	r2, r3, #892	@ 0x37c
 800e930:	f503 725e 	addgt.w	r2, r3, #888	@ 0x378
 800e934:	f8c3 2388 	str.w	r2, [r3, #904]	@ 0x388
 800e938:	f8c3 1390 	str.w	r1, [r3, #912]	@ 0x390
 800e93c:	2000      	movs	r0, #0
 800e93e:	4770      	bx	lr
 800e940:	200b      	movs	r0, #11
 800e942:	4770      	bx	lr

0800e944 <rmw_uxrce_init_service_memory>:
 800e944:	b1e2      	cbz	r2, 800e980 <rmw_uxrce_init_service_memory+0x3c>
 800e946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e94a:	7b05      	ldrb	r5, [r0, #12]
 800e94c:	4606      	mov	r6, r0
 800e94e:	b9ad      	cbnz	r5, 800e97c <rmw_uxrce_init_service_memory+0x38>
 800e950:	23c8      	movs	r3, #200	@ 0xc8
 800e952:	e9c0 5500 	strd	r5, r5, [r0]
 800e956:	6083      	str	r3, [r0, #8]
 800e958:	f240 1301 	movw	r3, #257	@ 0x101
 800e95c:	4617      	mov	r7, r2
 800e95e:	8183      	strh	r3, [r0, #12]
 800e960:	460c      	mov	r4, r1
 800e962:	46a8      	mov	r8, r5
 800e964:	4621      	mov	r1, r4
 800e966:	4630      	mov	r0, r6
 800e968:	3501      	adds	r5, #1
 800e96a:	f007 fe6f 	bl	801664c <put_memory>
 800e96e:	42af      	cmp	r7, r5
 800e970:	60a4      	str	r4, [r4, #8]
 800e972:	f884 800c 	strb.w	r8, [r4, #12]
 800e976:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800e97a:	d1f3      	bne.n	800e964 <rmw_uxrce_init_service_memory+0x20>
 800e97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e980:	4770      	bx	lr
 800e982:	bf00      	nop

0800e984 <rmw_uxrce_init_client_memory>:
 800e984:	b1e2      	cbz	r2, 800e9c0 <rmw_uxrce_init_client_memory+0x3c>
 800e986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e98a:	7b05      	ldrb	r5, [r0, #12]
 800e98c:	4606      	mov	r6, r0
 800e98e:	b9ad      	cbnz	r5, 800e9bc <rmw_uxrce_init_client_memory+0x38>
 800e990:	23c8      	movs	r3, #200	@ 0xc8
 800e992:	e9c0 5500 	strd	r5, r5, [r0]
 800e996:	6083      	str	r3, [r0, #8]
 800e998:	f240 1301 	movw	r3, #257	@ 0x101
 800e99c:	4617      	mov	r7, r2
 800e99e:	8183      	strh	r3, [r0, #12]
 800e9a0:	460c      	mov	r4, r1
 800e9a2:	46a8      	mov	r8, r5
 800e9a4:	4621      	mov	r1, r4
 800e9a6:	4630      	mov	r0, r6
 800e9a8:	3501      	adds	r5, #1
 800e9aa:	f007 fe4f 	bl	801664c <put_memory>
 800e9ae:	42af      	cmp	r7, r5
 800e9b0:	60a4      	str	r4, [r4, #8]
 800e9b2:	f884 800c 	strb.w	r8, [r4, #12]
 800e9b6:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800e9ba:	d1f3      	bne.n	800e9a4 <rmw_uxrce_init_client_memory+0x20>
 800e9bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9c0:	4770      	bx	lr
 800e9c2:	bf00      	nop

0800e9c4 <rmw_uxrce_init_publisher_memory>:
 800e9c4:	b1e2      	cbz	r2, 800ea00 <rmw_uxrce_init_publisher_memory+0x3c>
 800e9c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9ca:	7b05      	ldrb	r5, [r0, #12]
 800e9cc:	4606      	mov	r6, r0
 800e9ce:	b9ad      	cbnz	r5, 800e9fc <rmw_uxrce_init_publisher_memory+0x38>
 800e9d0:	23d8      	movs	r3, #216	@ 0xd8
 800e9d2:	e9c0 5500 	strd	r5, r5, [r0]
 800e9d6:	6083      	str	r3, [r0, #8]
 800e9d8:	f240 1301 	movw	r3, #257	@ 0x101
 800e9dc:	4617      	mov	r7, r2
 800e9de:	8183      	strh	r3, [r0, #12]
 800e9e0:	460c      	mov	r4, r1
 800e9e2:	46a8      	mov	r8, r5
 800e9e4:	4621      	mov	r1, r4
 800e9e6:	4630      	mov	r0, r6
 800e9e8:	3501      	adds	r5, #1
 800e9ea:	f007 fe2f 	bl	801664c <put_memory>
 800e9ee:	42af      	cmp	r7, r5
 800e9f0:	60a4      	str	r4, [r4, #8]
 800e9f2:	f884 800c 	strb.w	r8, [r4, #12]
 800e9f6:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800e9fa:	d1f3      	bne.n	800e9e4 <rmw_uxrce_init_publisher_memory+0x20>
 800e9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea00:	4770      	bx	lr
 800ea02:	bf00      	nop

0800ea04 <rmw_uxrce_init_subscription_memory>:
 800ea04:	b1e2      	cbz	r2, 800ea40 <rmw_uxrce_init_subscription_memory+0x3c>
 800ea06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea0a:	7b05      	ldrb	r5, [r0, #12]
 800ea0c:	4606      	mov	r6, r0
 800ea0e:	b9ad      	cbnz	r5, 800ea3c <rmw_uxrce_init_subscription_memory+0x38>
 800ea10:	23d8      	movs	r3, #216	@ 0xd8
 800ea12:	e9c0 5500 	strd	r5, r5, [r0]
 800ea16:	6083      	str	r3, [r0, #8]
 800ea18:	f240 1301 	movw	r3, #257	@ 0x101
 800ea1c:	4617      	mov	r7, r2
 800ea1e:	8183      	strh	r3, [r0, #12]
 800ea20:	460c      	mov	r4, r1
 800ea22:	46a8      	mov	r8, r5
 800ea24:	4621      	mov	r1, r4
 800ea26:	4630      	mov	r0, r6
 800ea28:	3501      	adds	r5, #1
 800ea2a:	f007 fe0f 	bl	801664c <put_memory>
 800ea2e:	42af      	cmp	r7, r5
 800ea30:	60a4      	str	r4, [r4, #8]
 800ea32:	f884 800c 	strb.w	r8, [r4, #12]
 800ea36:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800ea3a:	d1f3      	bne.n	800ea24 <rmw_uxrce_init_subscription_memory+0x20>
 800ea3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea40:	4770      	bx	lr
 800ea42:	bf00      	nop

0800ea44 <rmw_uxrce_init_node_memory>:
 800ea44:	b1e2      	cbz	r2, 800ea80 <rmw_uxrce_init_node_memory+0x3c>
 800ea46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea4a:	7b05      	ldrb	r5, [r0, #12]
 800ea4c:	4606      	mov	r6, r0
 800ea4e:	b9ad      	cbnz	r5, 800ea7c <rmw_uxrce_init_node_memory+0x38>
 800ea50:	23a4      	movs	r3, #164	@ 0xa4
 800ea52:	e9c0 5500 	strd	r5, r5, [r0]
 800ea56:	6083      	str	r3, [r0, #8]
 800ea58:	f240 1301 	movw	r3, #257	@ 0x101
 800ea5c:	4617      	mov	r7, r2
 800ea5e:	8183      	strh	r3, [r0, #12]
 800ea60:	460c      	mov	r4, r1
 800ea62:	46a8      	mov	r8, r5
 800ea64:	4621      	mov	r1, r4
 800ea66:	4630      	mov	r0, r6
 800ea68:	3501      	adds	r5, #1
 800ea6a:	f007 fdef 	bl	801664c <put_memory>
 800ea6e:	42af      	cmp	r7, r5
 800ea70:	60a4      	str	r4, [r4, #8]
 800ea72:	f884 800c 	strb.w	r8, [r4, #12]
 800ea76:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800ea7a:	d1f3      	bne.n	800ea64 <rmw_uxrce_init_node_memory+0x20>
 800ea7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea80:	4770      	bx	lr
 800ea82:	bf00      	nop

0800ea84 <rmw_uxrce_init_session_memory>:
 800ea84:	b1ea      	cbz	r2, 800eac2 <rmw_uxrce_init_session_memory+0x3e>
 800ea86:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea8a:	7b05      	ldrb	r5, [r0, #12]
 800ea8c:	4606      	mov	r6, r0
 800ea8e:	b9b5      	cbnz	r5, 800eabe <rmw_uxrce_init_session_memory+0x3a>
 800ea90:	e9c0 5500 	strd	r5, r5, [r0]
 800ea94:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800ea98:	f240 1301 	movw	r3, #257	@ 0x101
 800ea9c:	4617      	mov	r7, r2
 800ea9e:	f8c0 8008 	str.w	r8, [r0, #8]
 800eaa2:	460c      	mov	r4, r1
 800eaa4:	8183      	strh	r3, [r0, #12]
 800eaa6:	46a9      	mov	r9, r5
 800eaa8:	4621      	mov	r1, r4
 800eaaa:	4630      	mov	r0, r6
 800eaac:	3501      	adds	r5, #1
 800eaae:	f007 fdcd 	bl	801664c <put_memory>
 800eab2:	42af      	cmp	r7, r5
 800eab4:	60a4      	str	r4, [r4, #8]
 800eab6:	f884 900c 	strb.w	r9, [r4, #12]
 800eaba:	4444      	add	r4, r8
 800eabc:	d1f4      	bne.n	800eaa8 <rmw_uxrce_init_session_memory+0x24>
 800eabe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eac2:	4770      	bx	lr

0800eac4 <rmw_uxrce_init_topic_memory>:
 800eac4:	b1e2      	cbz	r2, 800eb00 <rmw_uxrce_init_topic_memory+0x3c>
 800eac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eaca:	7b05      	ldrb	r5, [r0, #12]
 800eacc:	4606      	mov	r6, r0
 800eace:	b9ad      	cbnz	r5, 800eafc <rmw_uxrce_init_topic_memory+0x38>
 800ead0:	231c      	movs	r3, #28
 800ead2:	e9c0 5500 	strd	r5, r5, [r0]
 800ead6:	6083      	str	r3, [r0, #8]
 800ead8:	f240 1301 	movw	r3, #257	@ 0x101
 800eadc:	4617      	mov	r7, r2
 800eade:	8183      	strh	r3, [r0, #12]
 800eae0:	460c      	mov	r4, r1
 800eae2:	46a8      	mov	r8, r5
 800eae4:	4621      	mov	r1, r4
 800eae6:	4630      	mov	r0, r6
 800eae8:	3501      	adds	r5, #1
 800eaea:	f007 fdaf 	bl	801664c <put_memory>
 800eaee:	42af      	cmp	r7, r5
 800eaf0:	60a4      	str	r4, [r4, #8]
 800eaf2:	f884 800c 	strb.w	r8, [r4, #12]
 800eaf6:	f104 041c 	add.w	r4, r4, #28
 800eafa:	d1f3      	bne.n	800eae4 <rmw_uxrce_init_topic_memory+0x20>
 800eafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb00:	4770      	bx	lr
 800eb02:	bf00      	nop

0800eb04 <rmw_uxrce_init_static_input_buffer_memory>:
 800eb04:	b1ea      	cbz	r2, 800eb42 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800eb06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb0a:	7b05      	ldrb	r5, [r0, #12]
 800eb0c:	4606      	mov	r6, r0
 800eb0e:	b9b5      	cbnz	r5, 800eb3e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800eb10:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800eb14:	e9c0 5500 	strd	r5, r5, [r0]
 800eb18:	6083      	str	r3, [r0, #8]
 800eb1a:	f240 1301 	movw	r3, #257	@ 0x101
 800eb1e:	4617      	mov	r7, r2
 800eb20:	8183      	strh	r3, [r0, #12]
 800eb22:	460c      	mov	r4, r1
 800eb24:	46a8      	mov	r8, r5
 800eb26:	4621      	mov	r1, r4
 800eb28:	4630      	mov	r0, r6
 800eb2a:	3501      	adds	r5, #1
 800eb2c:	f007 fd8e 	bl	801664c <put_memory>
 800eb30:	42af      	cmp	r7, r5
 800eb32:	60a4      	str	r4, [r4, #8]
 800eb34:	f884 800c 	strb.w	r8, [r4, #12]
 800eb38:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800eb3c:	d1f3      	bne.n	800eb26 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800eb3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb42:	4770      	bx	lr

0800eb44 <rmw_uxrce_init_init_options_impl_memory>:
 800eb44:	b1e2      	cbz	r2, 800eb80 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800eb46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb4a:	7b05      	ldrb	r5, [r0, #12]
 800eb4c:	4606      	mov	r6, r0
 800eb4e:	b9ad      	cbnz	r5, 800eb7c <rmw_uxrce_init_init_options_impl_memory+0x38>
 800eb50:	232c      	movs	r3, #44	@ 0x2c
 800eb52:	e9c0 5500 	strd	r5, r5, [r0]
 800eb56:	6083      	str	r3, [r0, #8]
 800eb58:	f240 1301 	movw	r3, #257	@ 0x101
 800eb5c:	4617      	mov	r7, r2
 800eb5e:	8183      	strh	r3, [r0, #12]
 800eb60:	460c      	mov	r4, r1
 800eb62:	46a8      	mov	r8, r5
 800eb64:	4621      	mov	r1, r4
 800eb66:	4630      	mov	r0, r6
 800eb68:	3501      	adds	r5, #1
 800eb6a:	f007 fd6f 	bl	801664c <put_memory>
 800eb6e:	42af      	cmp	r7, r5
 800eb70:	60a4      	str	r4, [r4, #8]
 800eb72:	f884 800c 	strb.w	r8, [r4, #12]
 800eb76:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800eb7a:	d1f3      	bne.n	800eb64 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800eb7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb80:	4770      	bx	lr
 800eb82:	bf00      	nop

0800eb84 <rmw_uxrce_init_wait_set_memory>:
 800eb84:	b1e2      	cbz	r2, 800ebc0 <rmw_uxrce_init_wait_set_memory+0x3c>
 800eb86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb8a:	7b05      	ldrb	r5, [r0, #12]
 800eb8c:	4606      	mov	r6, r0
 800eb8e:	b9ad      	cbnz	r5, 800ebbc <rmw_uxrce_init_wait_set_memory+0x38>
 800eb90:	231c      	movs	r3, #28
 800eb92:	e9c0 5500 	strd	r5, r5, [r0]
 800eb96:	6083      	str	r3, [r0, #8]
 800eb98:	f240 1301 	movw	r3, #257	@ 0x101
 800eb9c:	4617      	mov	r7, r2
 800eb9e:	8183      	strh	r3, [r0, #12]
 800eba0:	460c      	mov	r4, r1
 800eba2:	46a8      	mov	r8, r5
 800eba4:	4621      	mov	r1, r4
 800eba6:	4630      	mov	r0, r6
 800eba8:	3501      	adds	r5, #1
 800ebaa:	f007 fd4f 	bl	801664c <put_memory>
 800ebae:	42af      	cmp	r7, r5
 800ebb0:	60a4      	str	r4, [r4, #8]
 800ebb2:	f884 800c 	strb.w	r8, [r4, #12]
 800ebb6:	f104 041c 	add.w	r4, r4, #28
 800ebba:	d1f3      	bne.n	800eba4 <rmw_uxrce_init_wait_set_memory+0x20>
 800ebbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebc0:	4770      	bx	lr
 800ebc2:	bf00      	nop

0800ebc4 <rmw_uxrce_init_guard_condition_memory>:
 800ebc4:	b1e2      	cbz	r2, 800ec00 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800ebc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebca:	7b05      	ldrb	r5, [r0, #12]
 800ebcc:	4606      	mov	r6, r0
 800ebce:	b9ad      	cbnz	r5, 800ebfc <rmw_uxrce_init_guard_condition_memory+0x38>
 800ebd0:	2320      	movs	r3, #32
 800ebd2:	e9c0 5500 	strd	r5, r5, [r0]
 800ebd6:	6083      	str	r3, [r0, #8]
 800ebd8:	f240 1301 	movw	r3, #257	@ 0x101
 800ebdc:	4617      	mov	r7, r2
 800ebde:	8183      	strh	r3, [r0, #12]
 800ebe0:	460c      	mov	r4, r1
 800ebe2:	46a8      	mov	r8, r5
 800ebe4:	4621      	mov	r1, r4
 800ebe6:	4630      	mov	r0, r6
 800ebe8:	3501      	adds	r5, #1
 800ebea:	f007 fd2f 	bl	801664c <put_memory>
 800ebee:	42af      	cmp	r7, r5
 800ebf0:	60a4      	str	r4, [r4, #8]
 800ebf2:	f884 800c 	strb.w	r8, [r4, #12]
 800ebf6:	f104 0420 	add.w	r4, r4, #32
 800ebfa:	d1f3      	bne.n	800ebe4 <rmw_uxrce_init_guard_condition_memory+0x20>
 800ebfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec00:	4770      	bx	lr
 800ec02:	bf00      	nop

0800ec04 <rmw_uxrce_fini_session_memory>:
 800ec04:	4601      	mov	r1, r0
 800ec06:	4801      	ldr	r0, [pc, #4]	@ (800ec0c <rmw_uxrce_fini_session_memory+0x8>)
 800ec08:	f007 bd20 	b.w	801664c <put_memory>
 800ec0c:	20010ebc 	.word	0x20010ebc

0800ec10 <rmw_uxrce_fini_node_memory>:
 800ec10:	b538      	push	{r3, r4, r5, lr}
 800ec12:	4604      	mov	r4, r0
 800ec14:	6800      	ldr	r0, [r0, #0]
 800ec16:	b128      	cbz	r0, 800ec24 <rmw_uxrce_fini_node_memory+0x14>
 800ec18:	4b07      	ldr	r3, [pc, #28]	@ (800ec38 <rmw_uxrce_fini_node_memory+0x28>)
 800ec1a:	6819      	ldr	r1, [r3, #0]
 800ec1c:	f7f1 faf8 	bl	8000210 <strcmp>
 800ec20:	b940      	cbnz	r0, 800ec34 <rmw_uxrce_fini_node_memory+0x24>
 800ec22:	6020      	str	r0, [r4, #0]
 800ec24:	6861      	ldr	r1, [r4, #4]
 800ec26:	b129      	cbz	r1, 800ec34 <rmw_uxrce_fini_node_memory+0x24>
 800ec28:	2500      	movs	r5, #0
 800ec2a:	4804      	ldr	r0, [pc, #16]	@ (800ec3c <rmw_uxrce_fini_node_memory+0x2c>)
 800ec2c:	610d      	str	r5, [r1, #16]
 800ec2e:	f007 fd0d 	bl	801664c <put_memory>
 800ec32:	6065      	str	r5, [r4, #4]
 800ec34:	bd38      	pop	{r3, r4, r5, pc}
 800ec36:	bf00      	nop
 800ec38:	0801a530 	.word	0x0801a530
 800ec3c:	20010e8c 	.word	0x20010e8c

0800ec40 <rmw_uxrce_fini_publisher_memory>:
 800ec40:	b510      	push	{r4, lr}
 800ec42:	4604      	mov	r4, r0
 800ec44:	6800      	ldr	r0, [r0, #0]
 800ec46:	b128      	cbz	r0, 800ec54 <rmw_uxrce_fini_publisher_memory+0x14>
 800ec48:	4b06      	ldr	r3, [pc, #24]	@ (800ec64 <rmw_uxrce_fini_publisher_memory+0x24>)
 800ec4a:	6819      	ldr	r1, [r3, #0]
 800ec4c:	f7f1 fae0 	bl	8000210 <strcmp>
 800ec50:	b938      	cbnz	r0, 800ec62 <rmw_uxrce_fini_publisher_memory+0x22>
 800ec52:	6020      	str	r0, [r4, #0]
 800ec54:	6861      	ldr	r1, [r4, #4]
 800ec56:	b121      	cbz	r1, 800ec62 <rmw_uxrce_fini_publisher_memory+0x22>
 800ec58:	4803      	ldr	r0, [pc, #12]	@ (800ec68 <rmw_uxrce_fini_publisher_memory+0x28>)
 800ec5a:	f007 fcf7 	bl	801664c <put_memory>
 800ec5e:	2300      	movs	r3, #0
 800ec60:	6063      	str	r3, [r4, #4]
 800ec62:	bd10      	pop	{r4, pc}
 800ec64:	0801a530 	.word	0x0801a530
 800ec68:	20010e9c 	.word	0x20010e9c

0800ec6c <rmw_uxrce_fini_subscription_memory>:
 800ec6c:	b510      	push	{r4, lr}
 800ec6e:	4604      	mov	r4, r0
 800ec70:	6800      	ldr	r0, [r0, #0]
 800ec72:	b128      	cbz	r0, 800ec80 <rmw_uxrce_fini_subscription_memory+0x14>
 800ec74:	4b06      	ldr	r3, [pc, #24]	@ (800ec90 <rmw_uxrce_fini_subscription_memory+0x24>)
 800ec76:	6819      	ldr	r1, [r3, #0]
 800ec78:	f7f1 faca 	bl	8000210 <strcmp>
 800ec7c:	b938      	cbnz	r0, 800ec8e <rmw_uxrce_fini_subscription_memory+0x22>
 800ec7e:	6020      	str	r0, [r4, #0]
 800ec80:	6861      	ldr	r1, [r4, #4]
 800ec82:	b121      	cbz	r1, 800ec8e <rmw_uxrce_fini_subscription_memory+0x22>
 800ec84:	4803      	ldr	r0, [pc, #12]	@ (800ec94 <rmw_uxrce_fini_subscription_memory+0x28>)
 800ec86:	f007 fce1 	bl	801664c <put_memory>
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	6063      	str	r3, [r4, #4]
 800ec8e:	bd10      	pop	{r4, pc}
 800ec90:	0801a530 	.word	0x0801a530
 800ec94:	20010edc 	.word	0x20010edc

0800ec98 <rmw_uxrce_fini_service_memory>:
 800ec98:	b510      	push	{r4, lr}
 800ec9a:	4604      	mov	r4, r0
 800ec9c:	6800      	ldr	r0, [r0, #0]
 800ec9e:	b128      	cbz	r0, 800ecac <rmw_uxrce_fini_service_memory+0x14>
 800eca0:	4b06      	ldr	r3, [pc, #24]	@ (800ecbc <rmw_uxrce_fini_service_memory+0x24>)
 800eca2:	6819      	ldr	r1, [r3, #0]
 800eca4:	f7f1 fab4 	bl	8000210 <strcmp>
 800eca8:	b938      	cbnz	r0, 800ecba <rmw_uxrce_fini_service_memory+0x22>
 800ecaa:	6020      	str	r0, [r4, #0]
 800ecac:	6861      	ldr	r1, [r4, #4]
 800ecae:	b121      	cbz	r1, 800ecba <rmw_uxrce_fini_service_memory+0x22>
 800ecb0:	4803      	ldr	r0, [pc, #12]	@ (800ecc0 <rmw_uxrce_fini_service_memory+0x28>)
 800ecb2:	f007 fccb 	bl	801664c <put_memory>
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	6063      	str	r3, [r4, #4]
 800ecba:	bd10      	pop	{r4, pc}
 800ecbc:	0801a530 	.word	0x0801a530
 800ecc0:	20010eac 	.word	0x20010eac

0800ecc4 <rmw_uxrce_fini_client_memory>:
 800ecc4:	b510      	push	{r4, lr}
 800ecc6:	4604      	mov	r4, r0
 800ecc8:	6800      	ldr	r0, [r0, #0]
 800ecca:	b128      	cbz	r0, 800ecd8 <rmw_uxrce_fini_client_memory+0x14>
 800eccc:	4b06      	ldr	r3, [pc, #24]	@ (800ece8 <rmw_uxrce_fini_client_memory+0x24>)
 800ecce:	6819      	ldr	r1, [r3, #0]
 800ecd0:	f7f1 fa9e 	bl	8000210 <strcmp>
 800ecd4:	b938      	cbnz	r0, 800ece6 <rmw_uxrce_fini_client_memory+0x22>
 800ecd6:	6020      	str	r0, [r4, #0]
 800ecd8:	6861      	ldr	r1, [r4, #4]
 800ecda:	b121      	cbz	r1, 800ece6 <rmw_uxrce_fini_client_memory+0x22>
 800ecdc:	4803      	ldr	r0, [pc, #12]	@ (800ecec <rmw_uxrce_fini_client_memory+0x28>)
 800ecde:	f007 fcb5 	bl	801664c <put_memory>
 800ece2:	2300      	movs	r3, #0
 800ece4:	6063      	str	r3, [r4, #4]
 800ece6:	bd10      	pop	{r4, pc}
 800ece8:	0801a530 	.word	0x0801a530
 800ecec:	2000c5bc 	.word	0x2000c5bc

0800ecf0 <rmw_uxrce_fini_topic_memory>:
 800ecf0:	b510      	push	{r4, lr}
 800ecf2:	4604      	mov	r4, r0
 800ecf4:	4621      	mov	r1, r4
 800ecf6:	4803      	ldr	r0, [pc, #12]	@ (800ed04 <rmw_uxrce_fini_topic_memory+0x14>)
 800ecf8:	f007 fca8 	bl	801664c <put_memory>
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	61a3      	str	r3, [r4, #24]
 800ed00:	bd10      	pop	{r4, pc}
 800ed02:	bf00      	nop
 800ed04:	20010eec 	.word	0x20010eec

0800ed08 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800ed08:	b082      	sub	sp, #8
 800ed0a:	b530      	push	{r4, r5, lr}
 800ed0c:	4925      	ldr	r1, [pc, #148]	@ (800eda4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800ed0e:	680d      	ldr	r5, [r1, #0]
 800ed10:	ac03      	add	r4, sp, #12
 800ed12:	e884 000c 	stmia.w	r4, {r2, r3}
 800ed16:	461c      	mov	r4, r3
 800ed18:	2d00      	cmp	r5, #0
 800ed1a:	d041      	beq.n	800eda0 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800ed1c:	462b      	mov	r3, r5
 800ed1e:	2100      	movs	r1, #0
 800ed20:	689a      	ldr	r2, [r3, #8]
 800ed22:	685b      	ldr	r3, [r3, #4]
 800ed24:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800ed28:	4290      	cmp	r0, r2
 800ed2a:	bf08      	it	eq
 800ed2c:	3101      	addeq	r1, #1
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d1f6      	bne.n	800ed20 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800ed32:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800ed36:	2b02      	cmp	r3, #2
 800ed38:	d029      	beq.n	800ed8e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800ed3a:	d907      	bls.n	800ed4c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800ed3c:	2b03      	cmp	r3, #3
 800ed3e:	d005      	beq.n	800ed4c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800ed40:	2100      	movs	r1, #0
 800ed42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ed46:	4608      	mov	r0, r1
 800ed48:	b002      	add	sp, #8
 800ed4a:	4770      	bx	lr
 800ed4c:	b314      	cbz	r4, 800ed94 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800ed4e:	428c      	cmp	r4, r1
 800ed50:	d820      	bhi.n	800ed94 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800ed52:	2d00      	cmp	r5, #0
 800ed54:	d0f4      	beq.n	800ed40 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800ed56:	2100      	movs	r1, #0
 800ed58:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800ed5c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800ed60:	e002      	b.n	800ed68 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800ed62:	686d      	ldr	r5, [r5, #4]
 800ed64:	2d00      	cmp	r5, #0
 800ed66:	d0ec      	beq.n	800ed42 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800ed68:	68ab      	ldr	r3, [r5, #8]
 800ed6a:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800ed6e:	4290      	cmp	r0, r2
 800ed70:	d1f7      	bne.n	800ed62 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ed72:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800ed76:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800ed7a:	4562      	cmp	r2, ip
 800ed7c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800ed80:	eb73 0e04 	sbcs.w	lr, r3, r4
 800ed84:	daed      	bge.n	800ed62 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ed86:	4694      	mov	ip, r2
 800ed88:	461c      	mov	r4, r3
 800ed8a:	4629      	mov	r1, r5
 800ed8c:	e7e9      	b.n	800ed62 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ed8e:	b10c      	cbz	r4, 800ed94 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800ed90:	428c      	cmp	r4, r1
 800ed92:	d9d5      	bls.n	800ed40 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800ed94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ed98:	4802      	ldr	r0, [pc, #8]	@ (800eda4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800ed9a:	b002      	add	sp, #8
 800ed9c:	f007 bc46 	b.w	801662c <get_memory>
 800eda0:	4629      	mov	r1, r5
 800eda2:	e7c6      	b.n	800ed32 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800eda4:	20010ecc 	.word	0x20010ecc

0800eda8 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800eda8:	4b11      	ldr	r3, [pc, #68]	@ (800edf0 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	b530      	push	{r4, r5, lr}
 800edae:	b1e3      	cbz	r3, 800edea <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800edb0:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800edb4:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800edb8:	2400      	movs	r4, #0
 800edba:	e001      	b.n	800edc0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800edbc:	685b      	ldr	r3, [r3, #4]
 800edbe:	b193      	cbz	r3, 800ede6 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800edc0:	689a      	ldr	r2, [r3, #8]
 800edc2:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800edc6:	4288      	cmp	r0, r1
 800edc8:	d1f8      	bne.n	800edbc <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800edca:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800edce:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800edd2:	4571      	cmp	r1, lr
 800edd4:	eb72 050c 	sbcs.w	r5, r2, ip
 800edd8:	daf0      	bge.n	800edbc <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800edda:	461c      	mov	r4, r3
 800eddc:	685b      	ldr	r3, [r3, #4]
 800edde:	468e      	mov	lr, r1
 800ede0:	4694      	mov	ip, r2
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d1ec      	bne.n	800edc0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800ede6:	4620      	mov	r0, r4
 800ede8:	bd30      	pop	{r4, r5, pc}
 800edea:	461c      	mov	r4, r3
 800edec:	4620      	mov	r0, r4
 800edee:	bd30      	pop	{r4, r5, pc}
 800edf0:	20010ecc 	.word	0x20010ecc
 800edf4:	00000000 	.word	0x00000000

0800edf8 <rmw_uxrce_clean_expired_static_input_buffer>:
 800edf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edfc:	4b3c      	ldr	r3, [pc, #240]	@ (800eef0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800edfe:	ed2d 8b06 	vpush	{d8-d10}
 800ee02:	681f      	ldr	r7, [r3, #0]
 800ee04:	b08d      	sub	sp, #52	@ 0x34
 800ee06:	f008 f811 	bl	8016e2c <rmw_uros_epoch_nanos>
 800ee0a:	2f00      	cmp	r7, #0
 800ee0c:	d05d      	beq.n	800eeca <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800ee0e:	46b8      	mov	r8, r7
 800ee10:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800eed8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800ee14:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800ee18:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800ee1c:	2b04      	cmp	r3, #4
 800ee1e:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800eee0 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800ee22:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800eee8 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800ee26:	4681      	mov	r9, r0
 800ee28:	468a      	mov	sl, r1
 800ee2a:	ac04      	add	r4, sp, #16
 800ee2c:	d03f      	beq.n	800eeae <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800ee2e:	2b05      	cmp	r3, #5
 800ee30:	d044      	beq.n	800eebc <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800ee32:	2b03      	cmp	r3, #3
 800ee34:	d03b      	beq.n	800eeae <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800ee36:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ee3a:	ed8d ab06 	vstr	d10, [sp, #24]
 800ee3e:	ed8d 8b08 	vstr	d8, [sp, #32]
 800ee42:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800ee46:	ab08      	add	r3, sp, #32
 800ee48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ee4a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ee4e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ee52:	f007 fa09 	bl	8016268 <rmw_time_equal>
 800ee56:	b118      	cbz	r0, 800ee60 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800ee58:	ed8d 9b04 	vstr	d9, [sp, #16]
 800ee5c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800ee60:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ee64:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800ee68:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800ee6c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800ee70:	f007 fa4e 	bl	8016310 <rmw_time_total_nsec>
 800ee74:	1830      	adds	r0, r6, r0
 800ee76:	eb47 0101 	adc.w	r1, r7, r1
 800ee7a:	4548      	cmp	r0, r9
 800ee7c:	eb71 030a 	sbcs.w	r3, r1, sl
 800ee80:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800ee84:	db05      	blt.n	800ee92 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800ee86:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800ee8a:	4591      	cmp	r9, r2
 800ee8c:	eb7a 0303 	sbcs.w	r3, sl, r3
 800ee90:	da03      	bge.n	800ee9a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800ee92:	4817      	ldr	r0, [pc, #92]	@ (800eef0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800ee94:	4641      	mov	r1, r8
 800ee96:	f007 fbd9 	bl	801664c <put_memory>
 800ee9a:	f1bb 0f00 	cmp.w	fp, #0
 800ee9e:	d014      	beq.n	800eeca <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800eea0:	46d8      	mov	r8, fp
 800eea2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800eea6:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800eeaa:	2b04      	cmp	r3, #4
 800eeac:	d1bf      	bne.n	800ee2e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800eeae:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800eeb2:	3340      	adds	r3, #64	@ 0x40
 800eeb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800eeb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800eeba:	e7c0      	b.n	800ee3e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800eebc:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800eec0:	3348      	adds	r3, #72	@ 0x48
 800eec2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800eec4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800eec8:	e7b9      	b.n	800ee3e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800eeca:	b00d      	add	sp, #52	@ 0x34
 800eecc:	ecbd 8b06 	vpop	{d8-d10}
 800eed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eed4:	f3af 8000 	nop.w
	...
 800eee0:	00000001 	.word	0x00000001
 800eee4:	00000000 	.word	0x00000000
 800eee8:	0000001e 	.word	0x0000001e
 800eeec:	00000000 	.word	0x00000000
 800eef0:	20010ecc 	.word	0x20010ecc

0800eef4 <run_xrce_session>:
 800eef4:	b510      	push	{r4, lr}
 800eef6:	788c      	ldrb	r4, [r1, #2]
 800eef8:	b086      	sub	sp, #24
 800eefa:	2c01      	cmp	r4, #1
 800eefc:	f8ad 200e 	strh.w	r2, [sp, #14]
 800ef00:	d00c      	beq.n	800ef1c <run_xrce_session+0x28>
 800ef02:	4619      	mov	r1, r3
 800ef04:	2301      	movs	r3, #1
 800ef06:	9300      	str	r3, [sp, #0]
 800ef08:	f10d 020e 	add.w	r2, sp, #14
 800ef0c:	f10d 0317 	add.w	r3, sp, #23
 800ef10:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ef14:	f002 fb56 	bl	80115c4 <uxr_run_session_until_all_status>
 800ef18:	b006      	add	sp, #24
 800ef1a:	bd10      	pop	{r4, pc}
 800ef1c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ef20:	f001 ff6a 	bl	8010df8 <uxr_flash_output_streams>
 800ef24:	4620      	mov	r0, r4
 800ef26:	b006      	add	sp, #24
 800ef28:	bd10      	pop	{r4, pc}
 800ef2a:	bf00      	nop

0800ef2c <convert_qos_profile>:
 800ef2c:	7a4a      	ldrb	r2, [r1, #9]
 800ef2e:	f891 c008 	ldrb.w	ip, [r1, #8]
 800ef32:	2a02      	cmp	r2, #2
 800ef34:	bf18      	it	ne
 800ef36:	2200      	movne	r2, #0
 800ef38:	7002      	strb	r2, [r0, #0]
 800ef3a:	780a      	ldrb	r2, [r1, #0]
 800ef3c:	8889      	ldrh	r1, [r1, #4]
 800ef3e:	8081      	strh	r1, [r0, #4]
 800ef40:	f1ac 0c02 	sub.w	ip, ip, #2
 800ef44:	f1a2 0202 	sub.w	r2, r2, #2
 800ef48:	fabc fc8c 	clz	ip, ip
 800ef4c:	fab2 f282 	clz	r2, r2
 800ef50:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800ef54:	0952      	lsrs	r2, r2, #5
 800ef56:	f880 c001 	strb.w	ip, [r0, #1]
 800ef5a:	7082      	strb	r2, [r0, #2]
 800ef5c:	4770      	bx	lr
 800ef5e:	bf00      	nop

0800ef60 <generate_type_name>:
 800ef60:	b530      	push	{r4, r5, lr}
 800ef62:	2300      	movs	r3, #0
 800ef64:	700b      	strb	r3, [r1, #0]
 800ef66:	6803      	ldr	r3, [r0, #0]
 800ef68:	b087      	sub	sp, #28
 800ef6a:	4614      	mov	r4, r2
 800ef6c:	b1d3      	cbz	r3, 800efa4 <generate_type_name+0x44>
 800ef6e:	4a0f      	ldr	r2, [pc, #60]	@ (800efac <generate_type_name+0x4c>)
 800ef70:	4615      	mov	r5, r2
 800ef72:	9203      	str	r2, [sp, #12]
 800ef74:	9500      	str	r5, [sp, #0]
 800ef76:	6842      	ldr	r2, [r0, #4]
 800ef78:	480d      	ldr	r0, [pc, #52]	@ (800efb0 <generate_type_name+0x50>)
 800ef7a:	9001      	str	r0, [sp, #4]
 800ef7c:	4608      	mov	r0, r1
 800ef7e:	490d      	ldr	r1, [pc, #52]	@ (800efb4 <generate_type_name+0x54>)
 800ef80:	9204      	str	r2, [sp, #16]
 800ef82:	9105      	str	r1, [sp, #20]
 800ef84:	9102      	str	r1, [sp, #8]
 800ef86:	4a0c      	ldr	r2, [pc, #48]	@ (800efb8 <generate_type_name+0x58>)
 800ef88:	4621      	mov	r1, r4
 800ef8a:	f009 fc0f 	bl	80187ac <sniprintf>
 800ef8e:	2800      	cmp	r0, #0
 800ef90:	db05      	blt.n	800ef9e <generate_type_name+0x3e>
 800ef92:	4284      	cmp	r4, r0
 800ef94:	bfd4      	ite	le
 800ef96:	2000      	movle	r0, #0
 800ef98:	2001      	movgt	r0, #1
 800ef9a:	b007      	add	sp, #28
 800ef9c:	bd30      	pop	{r4, r5, pc}
 800ef9e:	2000      	movs	r0, #0
 800efa0:	b007      	add	sp, #28
 800efa2:	bd30      	pop	{r4, r5, pc}
 800efa4:	4b05      	ldr	r3, [pc, #20]	@ (800efbc <generate_type_name+0x5c>)
 800efa6:	4a01      	ldr	r2, [pc, #4]	@ (800efac <generate_type_name+0x4c>)
 800efa8:	461d      	mov	r5, r3
 800efaa:	e7e2      	b.n	800ef72 <generate_type_name+0x12>
 800efac:	08019e2c 	.word	0x08019e2c
 800efb0:	08019e44 	.word	0x08019e44
 800efb4:	08019e40 	.word	0x08019e40
 800efb8:	08019e30 	.word	0x08019e30
 800efbc:	08019c2c 	.word	0x08019c2c

0800efc0 <generate_topic_name>:
 800efc0:	b510      	push	{r4, lr}
 800efc2:	b082      	sub	sp, #8
 800efc4:	4614      	mov	r4, r2
 800efc6:	9000      	str	r0, [sp, #0]
 800efc8:	4b08      	ldr	r3, [pc, #32]	@ (800efec <generate_topic_name+0x2c>)
 800efca:	4a09      	ldr	r2, [pc, #36]	@ (800eff0 <generate_topic_name+0x30>)
 800efcc:	4608      	mov	r0, r1
 800efce:	4621      	mov	r1, r4
 800efd0:	f009 fbec 	bl	80187ac <sniprintf>
 800efd4:	2800      	cmp	r0, #0
 800efd6:	db05      	blt.n	800efe4 <generate_topic_name+0x24>
 800efd8:	4284      	cmp	r4, r0
 800efda:	bfd4      	ite	le
 800efdc:	2000      	movle	r0, #0
 800efde:	2001      	movgt	r0, #1
 800efe0:	b002      	add	sp, #8
 800efe2:	bd10      	pop	{r4, pc}
 800efe4:	2000      	movs	r0, #0
 800efe6:	b002      	add	sp, #8
 800efe8:	bd10      	pop	{r4, pc}
 800efea:	bf00      	nop
 800efec:	0801a200 	.word	0x0801a200
 800eff0:	08019ad8 	.word	0x08019ad8

0800eff4 <is_uxrce_rmw_identifier_valid>:
 800eff4:	b510      	push	{r4, lr}
 800eff6:	4604      	mov	r4, r0
 800eff8:	b140      	cbz	r0, 800f00c <is_uxrce_rmw_identifier_valid+0x18>
 800effa:	f007 fb7f 	bl	80166fc <rmw_get_implementation_identifier>
 800effe:	4601      	mov	r1, r0
 800f000:	4620      	mov	r0, r4
 800f002:	f7f1 f905 	bl	8000210 <strcmp>
 800f006:	fab0 f080 	clz	r0, r0
 800f00a:	0940      	lsrs	r0, r0, #5
 800f00c:	bd10      	pop	{r4, pc}
 800f00e:	bf00      	nop

0800f010 <get_message_typesupport_handle>:
 800f010:	6883      	ldr	r3, [r0, #8]
 800f012:	4718      	bx	r3

0800f014 <get_message_typesupport_handle_function>:
 800f014:	b510      	push	{r4, lr}
 800f016:	4604      	mov	r4, r0
 800f018:	6800      	ldr	r0, [r0, #0]
 800f01a:	f7f1 f8f9 	bl	8000210 <strcmp>
 800f01e:	2800      	cmp	r0, #0
 800f020:	bf0c      	ite	eq
 800f022:	4620      	moveq	r0, r4
 800f024:	2000      	movne	r0, #0
 800f026:	bd10      	pop	{r4, pc}

0800f028 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800f028:	4b04      	ldr	r3, [pc, #16]	@ (800f03c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f02a:	681a      	ldr	r2, [r3, #0]
 800f02c:	b10a      	cbz	r2, 800f032 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800f02e:	4803      	ldr	r0, [pc, #12]	@ (800f03c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f030:	4770      	bx	lr
 800f032:	4a03      	ldr	r2, [pc, #12]	@ (800f040 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800f034:	4801      	ldr	r0, [pc, #4]	@ (800f03c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f036:	6812      	ldr	r2, [r2, #0]
 800f038:	601a      	str	r2, [r3, #0]
 800f03a:	4770      	bx	lr
 800f03c:	20000064 	.word	0x20000064
 800f040:	200000e0 	.word	0x200000e0

0800f044 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800f044:	4a02      	ldr	r2, [pc, #8]	@ (800f050 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 800f046:	4b03      	ldr	r3, [pc, #12]	@ (800f054 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 800f048:	6812      	ldr	r2, [r2, #0]
 800f04a:	601a      	str	r2, [r3, #0]
 800f04c:	4770      	bx	lr
 800f04e:	bf00      	nop
 800f050:	200000e0 	.word	0x200000e0
 800f054:	20000064 	.word	0x20000064

0800f058 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 800f058:	f007 bf24 	b.w	8016ea4 <std_msgs__msg__Int32__init>

0800f05c <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 800f05c:	f007 bf26 	b.w	8016eac <std_msgs__msg__Int32__fini>

0800f060 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800f060:	4b04      	ldr	r3, [pc, #16]	@ (800f074 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f062:	681a      	ldr	r2, [r3, #0]
 800f064:	b10a      	cbz	r2, 800f06a <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800f066:	4803      	ldr	r0, [pc, #12]	@ (800f074 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f068:	4770      	bx	lr
 800f06a:	4a03      	ldr	r2, [pc, #12]	@ (800f078 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800f06c:	4801      	ldr	r0, [pc, #4]	@ (800f074 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f06e:	6812      	ldr	r2, [r2, #0]
 800f070:	601a      	str	r2, [r3, #0]
 800f072:	4770      	bx	lr
 800f074:	200000ac 	.word	0x200000ac
 800f078:	200000e4 	.word	0x200000e4

0800f07c <_Int32__max_serialized_size>:
 800f07c:	b508      	push	{r3, lr}
 800f07e:	2104      	movs	r1, #4
 800f080:	2000      	movs	r0, #0
 800f082:	f001 f807 	bl	8010094 <ucdr_alignment>
 800f086:	3004      	adds	r0, #4
 800f088:	bd08      	pop	{r3, pc}
 800f08a:	bf00      	nop

0800f08c <_Int32__cdr_deserialize>:
 800f08c:	b109      	cbz	r1, 800f092 <_Int32__cdr_deserialize+0x6>
 800f08e:	f000 bf19 	b.w	800fec4 <ucdr_deserialize_int32_t>
 800f092:	4608      	mov	r0, r1
 800f094:	4770      	bx	lr
 800f096:	bf00      	nop

0800f098 <get_serialized_size_std_msgs__msg__Int32>:
 800f098:	b138      	cbz	r0, 800f0aa <get_serialized_size_std_msgs__msg__Int32+0x12>
 800f09a:	b508      	push	{r3, lr}
 800f09c:	460b      	mov	r3, r1
 800f09e:	4618      	mov	r0, r3
 800f0a0:	2104      	movs	r1, #4
 800f0a2:	f000 fff7 	bl	8010094 <ucdr_alignment>
 800f0a6:	3004      	adds	r0, #4
 800f0a8:	bd08      	pop	{r3, pc}
 800f0aa:	4770      	bx	lr

0800f0ac <_Int32__cdr_serialize>:
 800f0ac:	460a      	mov	r2, r1
 800f0ae:	b118      	cbz	r0, 800f0b8 <_Int32__cdr_serialize+0xc>
 800f0b0:	6801      	ldr	r1, [r0, #0]
 800f0b2:	4610      	mov	r0, r2
 800f0b4:	f000 be6e 	b.w	800fd94 <ucdr_serialize_int32_t>
 800f0b8:	4770      	bx	lr
 800f0ba:	bf00      	nop

0800f0bc <_Int32__get_serialized_size>:
 800f0bc:	b130      	cbz	r0, 800f0cc <_Int32__get_serialized_size+0x10>
 800f0be:	b508      	push	{r3, lr}
 800f0c0:	2104      	movs	r1, #4
 800f0c2:	2000      	movs	r0, #0
 800f0c4:	f000 ffe6 	bl	8010094 <ucdr_alignment>
 800f0c8:	3004      	adds	r0, #4
 800f0ca:	bd08      	pop	{r3, pc}
 800f0cc:	4770      	bx	lr
 800f0ce:	bf00      	nop

0800f0d0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800f0d0:	4800      	ldr	r0, [pc, #0]	@ (800f0d4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 800f0d2:	4770      	bx	lr
 800f0d4:	200000b8 	.word	0x200000b8

0800f0d8 <ucdr_serialize_bool>:
 800f0d8:	b538      	push	{r3, r4, r5, lr}
 800f0da:	460d      	mov	r5, r1
 800f0dc:	2101      	movs	r1, #1
 800f0de:	4604      	mov	r4, r0
 800f0e0:	f000 ff8c 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800f0e4:	b148      	cbz	r0, 800f0fa <ucdr_serialize_bool+0x22>
 800f0e6:	68a3      	ldr	r3, [r4, #8]
 800f0e8:	701d      	strb	r5, [r3, #0]
 800f0ea:	68a2      	ldr	r2, [r4, #8]
 800f0ec:	6923      	ldr	r3, [r4, #16]
 800f0ee:	2101      	movs	r1, #1
 800f0f0:	440a      	add	r2, r1
 800f0f2:	440b      	add	r3, r1
 800f0f4:	60a2      	str	r2, [r4, #8]
 800f0f6:	6123      	str	r3, [r4, #16]
 800f0f8:	7561      	strb	r1, [r4, #21]
 800f0fa:	7da0      	ldrb	r0, [r4, #22]
 800f0fc:	f080 0001 	eor.w	r0, r0, #1
 800f100:	bd38      	pop	{r3, r4, r5, pc}
 800f102:	bf00      	nop

0800f104 <ucdr_deserialize_bool>:
 800f104:	b538      	push	{r3, r4, r5, lr}
 800f106:	460d      	mov	r5, r1
 800f108:	2101      	movs	r1, #1
 800f10a:	4604      	mov	r4, r0
 800f10c:	f000 ff76 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800f110:	b160      	cbz	r0, 800f12c <ucdr_deserialize_bool+0x28>
 800f112:	68a2      	ldr	r2, [r4, #8]
 800f114:	6923      	ldr	r3, [r4, #16]
 800f116:	f812 1b01 	ldrb.w	r1, [r2], #1
 800f11a:	3900      	subs	r1, #0
 800f11c:	bf18      	it	ne
 800f11e:	2101      	movne	r1, #1
 800f120:	7029      	strb	r1, [r5, #0]
 800f122:	3301      	adds	r3, #1
 800f124:	2101      	movs	r1, #1
 800f126:	60a2      	str	r2, [r4, #8]
 800f128:	6123      	str	r3, [r4, #16]
 800f12a:	7561      	strb	r1, [r4, #21]
 800f12c:	7da0      	ldrb	r0, [r4, #22]
 800f12e:	f080 0001 	eor.w	r0, r0, #1
 800f132:	bd38      	pop	{r3, r4, r5, pc}

0800f134 <ucdr_serialize_uint8_t>:
 800f134:	b538      	push	{r3, r4, r5, lr}
 800f136:	460d      	mov	r5, r1
 800f138:	2101      	movs	r1, #1
 800f13a:	4604      	mov	r4, r0
 800f13c:	f000 ff5e 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800f140:	b148      	cbz	r0, 800f156 <ucdr_serialize_uint8_t+0x22>
 800f142:	68a3      	ldr	r3, [r4, #8]
 800f144:	701d      	strb	r5, [r3, #0]
 800f146:	68a2      	ldr	r2, [r4, #8]
 800f148:	6923      	ldr	r3, [r4, #16]
 800f14a:	2101      	movs	r1, #1
 800f14c:	440a      	add	r2, r1
 800f14e:	440b      	add	r3, r1
 800f150:	60a2      	str	r2, [r4, #8]
 800f152:	6123      	str	r3, [r4, #16]
 800f154:	7561      	strb	r1, [r4, #21]
 800f156:	7da0      	ldrb	r0, [r4, #22]
 800f158:	f080 0001 	eor.w	r0, r0, #1
 800f15c:	bd38      	pop	{r3, r4, r5, pc}
 800f15e:	bf00      	nop

0800f160 <ucdr_deserialize_uint8_t>:
 800f160:	b538      	push	{r3, r4, r5, lr}
 800f162:	460d      	mov	r5, r1
 800f164:	2101      	movs	r1, #1
 800f166:	4604      	mov	r4, r0
 800f168:	f000 ff48 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800f16c:	b150      	cbz	r0, 800f184 <ucdr_deserialize_uint8_t+0x24>
 800f16e:	68a3      	ldr	r3, [r4, #8]
 800f170:	781b      	ldrb	r3, [r3, #0]
 800f172:	702b      	strb	r3, [r5, #0]
 800f174:	68a2      	ldr	r2, [r4, #8]
 800f176:	6923      	ldr	r3, [r4, #16]
 800f178:	2101      	movs	r1, #1
 800f17a:	440a      	add	r2, r1
 800f17c:	440b      	add	r3, r1
 800f17e:	60a2      	str	r2, [r4, #8]
 800f180:	6123      	str	r3, [r4, #16]
 800f182:	7561      	strb	r1, [r4, #21]
 800f184:	7da0      	ldrb	r0, [r4, #22]
 800f186:	f080 0001 	eor.w	r0, r0, #1
 800f18a:	bd38      	pop	{r3, r4, r5, pc}

0800f18c <ucdr_serialize_uint16_t>:
 800f18c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f190:	b082      	sub	sp, #8
 800f192:	460b      	mov	r3, r1
 800f194:	2102      	movs	r1, #2
 800f196:	4604      	mov	r4, r0
 800f198:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f19c:	f000 ff82 	bl	80100a4 <ucdr_buffer_alignment>
 800f1a0:	4601      	mov	r1, r0
 800f1a2:	4620      	mov	r0, r4
 800f1a4:	7d67      	ldrb	r7, [r4, #21]
 800f1a6:	f000 ffc1 	bl	801012c <ucdr_advance_buffer>
 800f1aa:	2102      	movs	r1, #2
 800f1ac:	4620      	mov	r0, r4
 800f1ae:	f000 ff19 	bl	800ffe4 <ucdr_check_buffer_available_for>
 800f1b2:	bb78      	cbnz	r0, 800f214 <ucdr_serialize_uint16_t+0x88>
 800f1b4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f1b8:	42ab      	cmp	r3, r5
 800f1ba:	d926      	bls.n	800f20a <ucdr_serialize_uint16_t+0x7e>
 800f1bc:	1b5e      	subs	r6, r3, r5
 800f1be:	60a3      	str	r3, [r4, #8]
 800f1c0:	6923      	ldr	r3, [r4, #16]
 800f1c2:	f1c6 0802 	rsb	r8, r6, #2
 800f1c6:	4433      	add	r3, r6
 800f1c8:	6123      	str	r3, [r4, #16]
 800f1ca:	4641      	mov	r1, r8
 800f1cc:	4620      	mov	r0, r4
 800f1ce:	f000 ff15 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800f1d2:	2800      	cmp	r0, #0
 800f1d4:	d03b      	beq.n	800f24e <ucdr_serialize_uint16_t+0xc2>
 800f1d6:	7d23      	ldrb	r3, [r4, #20]
 800f1d8:	2b01      	cmp	r3, #1
 800f1da:	d04a      	beq.n	800f272 <ucdr_serialize_uint16_t+0xe6>
 800f1dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f1e0:	702b      	strb	r3, [r5, #0]
 800f1e2:	2e00      	cmp	r6, #0
 800f1e4:	d040      	beq.n	800f268 <ucdr_serialize_uint16_t+0xdc>
 800f1e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f1ea:	706b      	strb	r3, [r5, #1]
 800f1ec:	6923      	ldr	r3, [r4, #16]
 800f1ee:	68a2      	ldr	r2, [r4, #8]
 800f1f0:	7da0      	ldrb	r0, [r4, #22]
 800f1f2:	3302      	adds	r3, #2
 800f1f4:	1b9e      	subs	r6, r3, r6
 800f1f6:	4442      	add	r2, r8
 800f1f8:	2302      	movs	r3, #2
 800f1fa:	f080 0001 	eor.w	r0, r0, #1
 800f1fe:	60a2      	str	r2, [r4, #8]
 800f200:	6126      	str	r6, [r4, #16]
 800f202:	7563      	strb	r3, [r4, #21]
 800f204:	b002      	add	sp, #8
 800f206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f20a:	2102      	movs	r1, #2
 800f20c:	4620      	mov	r0, r4
 800f20e:	f000 fef5 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800f212:	b190      	cbz	r0, 800f23a <ucdr_serialize_uint16_t+0xae>
 800f214:	7d23      	ldrb	r3, [r4, #20]
 800f216:	2b01      	cmp	r3, #1
 800f218:	68a3      	ldr	r3, [r4, #8]
 800f21a:	d014      	beq.n	800f246 <ucdr_serialize_uint16_t+0xba>
 800f21c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f220:	701a      	strb	r2, [r3, #0]
 800f222:	68a3      	ldr	r3, [r4, #8]
 800f224:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f228:	705a      	strb	r2, [r3, #1]
 800f22a:	68a2      	ldr	r2, [r4, #8]
 800f22c:	6923      	ldr	r3, [r4, #16]
 800f22e:	3202      	adds	r2, #2
 800f230:	3302      	adds	r3, #2
 800f232:	2102      	movs	r1, #2
 800f234:	60a2      	str	r2, [r4, #8]
 800f236:	6123      	str	r3, [r4, #16]
 800f238:	7561      	strb	r1, [r4, #21]
 800f23a:	7da0      	ldrb	r0, [r4, #22]
 800f23c:	f080 0001 	eor.w	r0, r0, #1
 800f240:	b002      	add	sp, #8
 800f242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f246:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f24a:	801a      	strh	r2, [r3, #0]
 800f24c:	e7ed      	b.n	800f22a <ucdr_serialize_uint16_t+0x9e>
 800f24e:	68a2      	ldr	r2, [r4, #8]
 800f250:	6923      	ldr	r3, [r4, #16]
 800f252:	7da0      	ldrb	r0, [r4, #22]
 800f254:	7567      	strb	r7, [r4, #21]
 800f256:	1b92      	subs	r2, r2, r6
 800f258:	1b9b      	subs	r3, r3, r6
 800f25a:	f080 0001 	eor.w	r0, r0, #1
 800f25e:	60a2      	str	r2, [r4, #8]
 800f260:	6123      	str	r3, [r4, #16]
 800f262:	b002      	add	sp, #8
 800f264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f268:	68a3      	ldr	r3, [r4, #8]
 800f26a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f26e:	701a      	strb	r2, [r3, #0]
 800f270:	e7bc      	b.n	800f1ec <ucdr_serialize_uint16_t+0x60>
 800f272:	4628      	mov	r0, r5
 800f274:	f10d 0506 	add.w	r5, sp, #6
 800f278:	4629      	mov	r1, r5
 800f27a:	4632      	mov	r2, r6
 800f27c:	f009 fc9d 	bl	8018bba <memcpy>
 800f280:	68a0      	ldr	r0, [r4, #8]
 800f282:	4642      	mov	r2, r8
 800f284:	19a9      	adds	r1, r5, r6
 800f286:	f009 fc98 	bl	8018bba <memcpy>
 800f28a:	e7af      	b.n	800f1ec <ucdr_serialize_uint16_t+0x60>

0800f28c <ucdr_serialize_endian_uint16_t>:
 800f28c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f290:	b083      	sub	sp, #12
 800f292:	460d      	mov	r5, r1
 800f294:	2102      	movs	r1, #2
 800f296:	4604      	mov	r4, r0
 800f298:	f8ad 2006 	strh.w	r2, [sp, #6]
 800f29c:	f000 ff02 	bl	80100a4 <ucdr_buffer_alignment>
 800f2a0:	4601      	mov	r1, r0
 800f2a2:	4620      	mov	r0, r4
 800f2a4:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f2a8:	f000 ff40 	bl	801012c <ucdr_advance_buffer>
 800f2ac:	2102      	movs	r1, #2
 800f2ae:	4620      	mov	r0, r4
 800f2b0:	f000 fe98 	bl	800ffe4 <ucdr_check_buffer_available_for>
 800f2b4:	bb70      	cbnz	r0, 800f314 <ucdr_serialize_endian_uint16_t+0x88>
 800f2b6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f2ba:	42be      	cmp	r6, r7
 800f2bc:	d925      	bls.n	800f30a <ucdr_serialize_endian_uint16_t+0x7e>
 800f2be:	6923      	ldr	r3, [r4, #16]
 800f2c0:	60a6      	str	r6, [r4, #8]
 800f2c2:	1bf6      	subs	r6, r6, r7
 800f2c4:	4433      	add	r3, r6
 800f2c6:	f1c6 0902 	rsb	r9, r6, #2
 800f2ca:	6123      	str	r3, [r4, #16]
 800f2cc:	4649      	mov	r1, r9
 800f2ce:	4620      	mov	r0, r4
 800f2d0:	f000 fe94 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800f2d4:	2800      	cmp	r0, #0
 800f2d6:	d039      	beq.n	800f34c <ucdr_serialize_endian_uint16_t+0xc0>
 800f2d8:	2d01      	cmp	r5, #1
 800f2da:	d04a      	beq.n	800f372 <ucdr_serialize_endian_uint16_t+0xe6>
 800f2dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f2e0:	703b      	strb	r3, [r7, #0]
 800f2e2:	2e00      	cmp	r6, #0
 800f2e4:	d040      	beq.n	800f368 <ucdr_serialize_endian_uint16_t+0xdc>
 800f2e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f2ea:	707b      	strb	r3, [r7, #1]
 800f2ec:	6923      	ldr	r3, [r4, #16]
 800f2ee:	68a2      	ldr	r2, [r4, #8]
 800f2f0:	7da0      	ldrb	r0, [r4, #22]
 800f2f2:	3302      	adds	r3, #2
 800f2f4:	444a      	add	r2, r9
 800f2f6:	1b9b      	subs	r3, r3, r6
 800f2f8:	2102      	movs	r1, #2
 800f2fa:	f080 0001 	eor.w	r0, r0, #1
 800f2fe:	60a2      	str	r2, [r4, #8]
 800f300:	6123      	str	r3, [r4, #16]
 800f302:	7561      	strb	r1, [r4, #21]
 800f304:	b003      	add	sp, #12
 800f306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f30a:	2102      	movs	r1, #2
 800f30c:	4620      	mov	r0, r4
 800f30e:	f000 fe75 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800f312:	b188      	cbz	r0, 800f338 <ucdr_serialize_endian_uint16_t+0xac>
 800f314:	2d01      	cmp	r5, #1
 800f316:	68a3      	ldr	r3, [r4, #8]
 800f318:	d014      	beq.n	800f344 <ucdr_serialize_endian_uint16_t+0xb8>
 800f31a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f31e:	701a      	strb	r2, [r3, #0]
 800f320:	68a3      	ldr	r3, [r4, #8]
 800f322:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f326:	705a      	strb	r2, [r3, #1]
 800f328:	68a2      	ldr	r2, [r4, #8]
 800f32a:	6923      	ldr	r3, [r4, #16]
 800f32c:	3202      	adds	r2, #2
 800f32e:	3302      	adds	r3, #2
 800f330:	2102      	movs	r1, #2
 800f332:	60a2      	str	r2, [r4, #8]
 800f334:	6123      	str	r3, [r4, #16]
 800f336:	7561      	strb	r1, [r4, #21]
 800f338:	7da0      	ldrb	r0, [r4, #22]
 800f33a:	f080 0001 	eor.w	r0, r0, #1
 800f33e:	b003      	add	sp, #12
 800f340:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f344:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f348:	801a      	strh	r2, [r3, #0]
 800f34a:	e7ed      	b.n	800f328 <ucdr_serialize_endian_uint16_t+0x9c>
 800f34c:	68a2      	ldr	r2, [r4, #8]
 800f34e:	6923      	ldr	r3, [r4, #16]
 800f350:	7da0      	ldrb	r0, [r4, #22]
 800f352:	f884 8015 	strb.w	r8, [r4, #21]
 800f356:	1b92      	subs	r2, r2, r6
 800f358:	1b9b      	subs	r3, r3, r6
 800f35a:	f080 0001 	eor.w	r0, r0, #1
 800f35e:	60a2      	str	r2, [r4, #8]
 800f360:	6123      	str	r3, [r4, #16]
 800f362:	b003      	add	sp, #12
 800f364:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f368:	68a3      	ldr	r3, [r4, #8]
 800f36a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f36e:	701a      	strb	r2, [r3, #0]
 800f370:	e7bc      	b.n	800f2ec <ucdr_serialize_endian_uint16_t+0x60>
 800f372:	f10d 0506 	add.w	r5, sp, #6
 800f376:	4629      	mov	r1, r5
 800f378:	4632      	mov	r2, r6
 800f37a:	4638      	mov	r0, r7
 800f37c:	f009 fc1d 	bl	8018bba <memcpy>
 800f380:	68a0      	ldr	r0, [r4, #8]
 800f382:	464a      	mov	r2, r9
 800f384:	19a9      	adds	r1, r5, r6
 800f386:	f009 fc18 	bl	8018bba <memcpy>
 800f38a:	e7af      	b.n	800f2ec <ucdr_serialize_endian_uint16_t+0x60>

0800f38c <ucdr_deserialize_uint16_t>:
 800f38c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f390:	460d      	mov	r5, r1
 800f392:	2102      	movs	r1, #2
 800f394:	4604      	mov	r4, r0
 800f396:	f000 fe85 	bl	80100a4 <ucdr_buffer_alignment>
 800f39a:	4601      	mov	r1, r0
 800f39c:	4620      	mov	r0, r4
 800f39e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f3a2:	f000 fec3 	bl	801012c <ucdr_advance_buffer>
 800f3a6:	2102      	movs	r1, #2
 800f3a8:	4620      	mov	r0, r4
 800f3aa:	f000 fe1b 	bl	800ffe4 <ucdr_check_buffer_available_for>
 800f3ae:	bb60      	cbnz	r0, 800f40a <ucdr_deserialize_uint16_t+0x7e>
 800f3b0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f3b4:	42be      	cmp	r6, r7
 800f3b6:	d923      	bls.n	800f400 <ucdr_deserialize_uint16_t+0x74>
 800f3b8:	6923      	ldr	r3, [r4, #16]
 800f3ba:	60a6      	str	r6, [r4, #8]
 800f3bc:	1bf6      	subs	r6, r6, r7
 800f3be:	4433      	add	r3, r6
 800f3c0:	f1c6 0902 	rsb	r9, r6, #2
 800f3c4:	6123      	str	r3, [r4, #16]
 800f3c6:	4649      	mov	r1, r9
 800f3c8:	4620      	mov	r0, r4
 800f3ca:	f000 fe17 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800f3ce:	2800      	cmp	r0, #0
 800f3d0:	d034      	beq.n	800f43c <ucdr_deserialize_uint16_t+0xb0>
 800f3d2:	7d23      	ldrb	r3, [r4, #20]
 800f3d4:	2b01      	cmp	r3, #1
 800f3d6:	d042      	beq.n	800f45e <ucdr_deserialize_uint16_t+0xd2>
 800f3d8:	787b      	ldrb	r3, [r7, #1]
 800f3da:	702b      	strb	r3, [r5, #0]
 800f3dc:	2e00      	cmp	r6, #0
 800f3de:	d03a      	beq.n	800f456 <ucdr_deserialize_uint16_t+0xca>
 800f3e0:	783b      	ldrb	r3, [r7, #0]
 800f3e2:	706b      	strb	r3, [r5, #1]
 800f3e4:	6923      	ldr	r3, [r4, #16]
 800f3e6:	68a2      	ldr	r2, [r4, #8]
 800f3e8:	7da0      	ldrb	r0, [r4, #22]
 800f3ea:	2102      	movs	r1, #2
 800f3ec:	3302      	adds	r3, #2
 800f3ee:	444a      	add	r2, r9
 800f3f0:	1b9b      	subs	r3, r3, r6
 800f3f2:	7561      	strb	r1, [r4, #21]
 800f3f4:	60a2      	str	r2, [r4, #8]
 800f3f6:	6123      	str	r3, [r4, #16]
 800f3f8:	f080 0001 	eor.w	r0, r0, #1
 800f3fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f400:	2102      	movs	r1, #2
 800f402:	4620      	mov	r0, r4
 800f404:	f000 fdfa 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800f408:	b180      	cbz	r0, 800f42c <ucdr_deserialize_uint16_t+0xa0>
 800f40a:	7d23      	ldrb	r3, [r4, #20]
 800f40c:	2b01      	cmp	r3, #1
 800f40e:	68a3      	ldr	r3, [r4, #8]
 800f410:	d011      	beq.n	800f436 <ucdr_deserialize_uint16_t+0xaa>
 800f412:	785b      	ldrb	r3, [r3, #1]
 800f414:	702b      	strb	r3, [r5, #0]
 800f416:	68a3      	ldr	r3, [r4, #8]
 800f418:	781b      	ldrb	r3, [r3, #0]
 800f41a:	706b      	strb	r3, [r5, #1]
 800f41c:	68a2      	ldr	r2, [r4, #8]
 800f41e:	6923      	ldr	r3, [r4, #16]
 800f420:	3202      	adds	r2, #2
 800f422:	3302      	adds	r3, #2
 800f424:	2102      	movs	r1, #2
 800f426:	60a2      	str	r2, [r4, #8]
 800f428:	6123      	str	r3, [r4, #16]
 800f42a:	7561      	strb	r1, [r4, #21]
 800f42c:	7da0      	ldrb	r0, [r4, #22]
 800f42e:	f080 0001 	eor.w	r0, r0, #1
 800f432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f436:	881b      	ldrh	r3, [r3, #0]
 800f438:	802b      	strh	r3, [r5, #0]
 800f43a:	e7ef      	b.n	800f41c <ucdr_deserialize_uint16_t+0x90>
 800f43c:	68a2      	ldr	r2, [r4, #8]
 800f43e:	6923      	ldr	r3, [r4, #16]
 800f440:	7da0      	ldrb	r0, [r4, #22]
 800f442:	f884 8015 	strb.w	r8, [r4, #21]
 800f446:	1b92      	subs	r2, r2, r6
 800f448:	1b9b      	subs	r3, r3, r6
 800f44a:	60a2      	str	r2, [r4, #8]
 800f44c:	6123      	str	r3, [r4, #16]
 800f44e:	f080 0001 	eor.w	r0, r0, #1
 800f452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f456:	68a3      	ldr	r3, [r4, #8]
 800f458:	781b      	ldrb	r3, [r3, #0]
 800f45a:	706b      	strb	r3, [r5, #1]
 800f45c:	e7c2      	b.n	800f3e4 <ucdr_deserialize_uint16_t+0x58>
 800f45e:	4639      	mov	r1, r7
 800f460:	4632      	mov	r2, r6
 800f462:	4628      	mov	r0, r5
 800f464:	f009 fba9 	bl	8018bba <memcpy>
 800f468:	68a1      	ldr	r1, [r4, #8]
 800f46a:	464a      	mov	r2, r9
 800f46c:	19a8      	adds	r0, r5, r6
 800f46e:	f009 fba4 	bl	8018bba <memcpy>
 800f472:	e7b7      	b.n	800f3e4 <ucdr_deserialize_uint16_t+0x58>

0800f474 <ucdr_deserialize_endian_uint16_t>:
 800f474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f478:	460e      	mov	r6, r1
 800f47a:	2102      	movs	r1, #2
 800f47c:	4604      	mov	r4, r0
 800f47e:	4615      	mov	r5, r2
 800f480:	f000 fe10 	bl	80100a4 <ucdr_buffer_alignment>
 800f484:	4601      	mov	r1, r0
 800f486:	4620      	mov	r0, r4
 800f488:	f894 9015 	ldrb.w	r9, [r4, #21]
 800f48c:	f000 fe4e 	bl	801012c <ucdr_advance_buffer>
 800f490:	2102      	movs	r1, #2
 800f492:	4620      	mov	r0, r4
 800f494:	f000 fda6 	bl	800ffe4 <ucdr_check_buffer_available_for>
 800f498:	bb70      	cbnz	r0, 800f4f8 <ucdr_deserialize_endian_uint16_t+0x84>
 800f49a:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800f49e:	4547      	cmp	r7, r8
 800f4a0:	d925      	bls.n	800f4ee <ucdr_deserialize_endian_uint16_t+0x7a>
 800f4a2:	6923      	ldr	r3, [r4, #16]
 800f4a4:	60a7      	str	r7, [r4, #8]
 800f4a6:	eba7 0708 	sub.w	r7, r7, r8
 800f4aa:	443b      	add	r3, r7
 800f4ac:	f1c7 0a02 	rsb	sl, r7, #2
 800f4b0:	6123      	str	r3, [r4, #16]
 800f4b2:	4651      	mov	r1, sl
 800f4b4:	4620      	mov	r0, r4
 800f4b6:	f000 fda1 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800f4ba:	2800      	cmp	r0, #0
 800f4bc:	d034      	beq.n	800f528 <ucdr_deserialize_endian_uint16_t+0xb4>
 800f4be:	2e01      	cmp	r6, #1
 800f4c0:	d043      	beq.n	800f54a <ucdr_deserialize_endian_uint16_t+0xd6>
 800f4c2:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f4c6:	702b      	strb	r3, [r5, #0]
 800f4c8:	2f00      	cmp	r7, #0
 800f4ca:	d03a      	beq.n	800f542 <ucdr_deserialize_endian_uint16_t+0xce>
 800f4cc:	f898 3000 	ldrb.w	r3, [r8]
 800f4d0:	706b      	strb	r3, [r5, #1]
 800f4d2:	6923      	ldr	r3, [r4, #16]
 800f4d4:	68a2      	ldr	r2, [r4, #8]
 800f4d6:	7da0      	ldrb	r0, [r4, #22]
 800f4d8:	2102      	movs	r1, #2
 800f4da:	3302      	adds	r3, #2
 800f4dc:	4452      	add	r2, sl
 800f4de:	1bdb      	subs	r3, r3, r7
 800f4e0:	7561      	strb	r1, [r4, #21]
 800f4e2:	60a2      	str	r2, [r4, #8]
 800f4e4:	6123      	str	r3, [r4, #16]
 800f4e6:	f080 0001 	eor.w	r0, r0, #1
 800f4ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4ee:	2102      	movs	r1, #2
 800f4f0:	4620      	mov	r0, r4
 800f4f2:	f000 fd83 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800f4f6:	b178      	cbz	r0, 800f518 <ucdr_deserialize_endian_uint16_t+0xa4>
 800f4f8:	2e01      	cmp	r6, #1
 800f4fa:	68a3      	ldr	r3, [r4, #8]
 800f4fc:	d011      	beq.n	800f522 <ucdr_deserialize_endian_uint16_t+0xae>
 800f4fe:	785b      	ldrb	r3, [r3, #1]
 800f500:	702b      	strb	r3, [r5, #0]
 800f502:	68a3      	ldr	r3, [r4, #8]
 800f504:	781b      	ldrb	r3, [r3, #0]
 800f506:	706b      	strb	r3, [r5, #1]
 800f508:	68a2      	ldr	r2, [r4, #8]
 800f50a:	6923      	ldr	r3, [r4, #16]
 800f50c:	3202      	adds	r2, #2
 800f50e:	3302      	adds	r3, #2
 800f510:	2102      	movs	r1, #2
 800f512:	60a2      	str	r2, [r4, #8]
 800f514:	6123      	str	r3, [r4, #16]
 800f516:	7561      	strb	r1, [r4, #21]
 800f518:	7da0      	ldrb	r0, [r4, #22]
 800f51a:	f080 0001 	eor.w	r0, r0, #1
 800f51e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f522:	881b      	ldrh	r3, [r3, #0]
 800f524:	802b      	strh	r3, [r5, #0]
 800f526:	e7ef      	b.n	800f508 <ucdr_deserialize_endian_uint16_t+0x94>
 800f528:	68a2      	ldr	r2, [r4, #8]
 800f52a:	6923      	ldr	r3, [r4, #16]
 800f52c:	7da0      	ldrb	r0, [r4, #22]
 800f52e:	f884 9015 	strb.w	r9, [r4, #21]
 800f532:	1bd2      	subs	r2, r2, r7
 800f534:	1bdb      	subs	r3, r3, r7
 800f536:	60a2      	str	r2, [r4, #8]
 800f538:	6123      	str	r3, [r4, #16]
 800f53a:	f080 0001 	eor.w	r0, r0, #1
 800f53e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f542:	68a3      	ldr	r3, [r4, #8]
 800f544:	781b      	ldrb	r3, [r3, #0]
 800f546:	706b      	strb	r3, [r5, #1]
 800f548:	e7c3      	b.n	800f4d2 <ucdr_deserialize_endian_uint16_t+0x5e>
 800f54a:	4641      	mov	r1, r8
 800f54c:	463a      	mov	r2, r7
 800f54e:	4628      	mov	r0, r5
 800f550:	f009 fb33 	bl	8018bba <memcpy>
 800f554:	68a1      	ldr	r1, [r4, #8]
 800f556:	4652      	mov	r2, sl
 800f558:	19e8      	adds	r0, r5, r7
 800f55a:	f009 fb2e 	bl	8018bba <memcpy>
 800f55e:	e7b8      	b.n	800f4d2 <ucdr_deserialize_endian_uint16_t+0x5e>

0800f560 <ucdr_serialize_uint32_t>:
 800f560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f564:	b082      	sub	sp, #8
 800f566:	4604      	mov	r4, r0
 800f568:	9101      	str	r1, [sp, #4]
 800f56a:	2104      	movs	r1, #4
 800f56c:	f000 fd9a 	bl	80100a4 <ucdr_buffer_alignment>
 800f570:	4601      	mov	r1, r0
 800f572:	4620      	mov	r0, r4
 800f574:	7d67      	ldrb	r7, [r4, #21]
 800f576:	f000 fdd9 	bl	801012c <ucdr_advance_buffer>
 800f57a:	2104      	movs	r1, #4
 800f57c:	4620      	mov	r0, r4
 800f57e:	f000 fd31 	bl	800ffe4 <ucdr_check_buffer_available_for>
 800f582:	2800      	cmp	r0, #0
 800f584:	d139      	bne.n	800f5fa <ucdr_serialize_uint32_t+0x9a>
 800f586:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f58a:	42ab      	cmp	r3, r5
 800f58c:	d930      	bls.n	800f5f0 <ucdr_serialize_uint32_t+0x90>
 800f58e:	1b5e      	subs	r6, r3, r5
 800f590:	60a3      	str	r3, [r4, #8]
 800f592:	6923      	ldr	r3, [r4, #16]
 800f594:	f1c6 0804 	rsb	r8, r6, #4
 800f598:	4433      	add	r3, r6
 800f59a:	6123      	str	r3, [r4, #16]
 800f59c:	4641      	mov	r1, r8
 800f59e:	4620      	mov	r0, r4
 800f5a0:	f000 fd2c 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800f5a4:	2800      	cmp	r0, #0
 800f5a6:	d04c      	beq.n	800f642 <ucdr_serialize_uint32_t+0xe2>
 800f5a8:	7d23      	ldrb	r3, [r4, #20]
 800f5aa:	2b01      	cmp	r3, #1
 800f5ac:	d063      	beq.n	800f676 <ucdr_serialize_uint32_t+0x116>
 800f5ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f5b2:	702b      	strb	r3, [r5, #0]
 800f5b4:	2e00      	cmp	r6, #0
 800f5b6:	d051      	beq.n	800f65c <ucdr_serialize_uint32_t+0xfc>
 800f5b8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f5bc:	706b      	strb	r3, [r5, #1]
 800f5be:	2e01      	cmp	r6, #1
 800f5c0:	d050      	beq.n	800f664 <ucdr_serialize_uint32_t+0x104>
 800f5c2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f5c6:	70ab      	strb	r3, [r5, #2]
 800f5c8:	2e02      	cmp	r6, #2
 800f5ca:	d04f      	beq.n	800f66c <ucdr_serialize_uint32_t+0x10c>
 800f5cc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f5d0:	70eb      	strb	r3, [r5, #3]
 800f5d2:	6923      	ldr	r3, [r4, #16]
 800f5d4:	68a2      	ldr	r2, [r4, #8]
 800f5d6:	7da0      	ldrb	r0, [r4, #22]
 800f5d8:	3304      	adds	r3, #4
 800f5da:	1b9e      	subs	r6, r3, r6
 800f5dc:	4442      	add	r2, r8
 800f5de:	2304      	movs	r3, #4
 800f5e0:	f080 0001 	eor.w	r0, r0, #1
 800f5e4:	60a2      	str	r2, [r4, #8]
 800f5e6:	6126      	str	r6, [r4, #16]
 800f5e8:	7563      	strb	r3, [r4, #21]
 800f5ea:	b002      	add	sp, #8
 800f5ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5f0:	2104      	movs	r1, #4
 800f5f2:	4620      	mov	r0, r4
 800f5f4:	f000 fd02 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800f5f8:	b1d0      	cbz	r0, 800f630 <ucdr_serialize_uint32_t+0xd0>
 800f5fa:	7d23      	ldrb	r3, [r4, #20]
 800f5fc:	2b01      	cmp	r3, #1
 800f5fe:	68a3      	ldr	r3, [r4, #8]
 800f600:	d01c      	beq.n	800f63c <ucdr_serialize_uint32_t+0xdc>
 800f602:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f606:	701a      	strb	r2, [r3, #0]
 800f608:	68a3      	ldr	r3, [r4, #8]
 800f60a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f60e:	705a      	strb	r2, [r3, #1]
 800f610:	68a3      	ldr	r3, [r4, #8]
 800f612:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f616:	709a      	strb	r2, [r3, #2]
 800f618:	68a3      	ldr	r3, [r4, #8]
 800f61a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f61e:	70da      	strb	r2, [r3, #3]
 800f620:	68a2      	ldr	r2, [r4, #8]
 800f622:	6923      	ldr	r3, [r4, #16]
 800f624:	3204      	adds	r2, #4
 800f626:	3304      	adds	r3, #4
 800f628:	2104      	movs	r1, #4
 800f62a:	60a2      	str	r2, [r4, #8]
 800f62c:	6123      	str	r3, [r4, #16]
 800f62e:	7561      	strb	r1, [r4, #21]
 800f630:	7da0      	ldrb	r0, [r4, #22]
 800f632:	f080 0001 	eor.w	r0, r0, #1
 800f636:	b002      	add	sp, #8
 800f638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f63c:	9a01      	ldr	r2, [sp, #4]
 800f63e:	601a      	str	r2, [r3, #0]
 800f640:	e7ee      	b.n	800f620 <ucdr_serialize_uint32_t+0xc0>
 800f642:	68a2      	ldr	r2, [r4, #8]
 800f644:	6923      	ldr	r3, [r4, #16]
 800f646:	7da0      	ldrb	r0, [r4, #22]
 800f648:	7567      	strb	r7, [r4, #21]
 800f64a:	1b92      	subs	r2, r2, r6
 800f64c:	1b9b      	subs	r3, r3, r6
 800f64e:	f080 0001 	eor.w	r0, r0, #1
 800f652:	60a2      	str	r2, [r4, #8]
 800f654:	6123      	str	r3, [r4, #16]
 800f656:	b002      	add	sp, #8
 800f658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f65c:	68a3      	ldr	r3, [r4, #8]
 800f65e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f662:	701a      	strb	r2, [r3, #0]
 800f664:	68a3      	ldr	r3, [r4, #8]
 800f666:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f66a:	701a      	strb	r2, [r3, #0]
 800f66c:	68a3      	ldr	r3, [r4, #8]
 800f66e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f672:	701a      	strb	r2, [r3, #0]
 800f674:	e7ad      	b.n	800f5d2 <ucdr_serialize_uint32_t+0x72>
 800f676:	4628      	mov	r0, r5
 800f678:	ad01      	add	r5, sp, #4
 800f67a:	4629      	mov	r1, r5
 800f67c:	4632      	mov	r2, r6
 800f67e:	f009 fa9c 	bl	8018bba <memcpy>
 800f682:	68a0      	ldr	r0, [r4, #8]
 800f684:	4642      	mov	r2, r8
 800f686:	19a9      	adds	r1, r5, r6
 800f688:	f009 fa97 	bl	8018bba <memcpy>
 800f68c:	e7a1      	b.n	800f5d2 <ucdr_serialize_uint32_t+0x72>
 800f68e:	bf00      	nop

0800f690 <ucdr_serialize_endian_uint32_t>:
 800f690:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f694:	b083      	sub	sp, #12
 800f696:	460d      	mov	r5, r1
 800f698:	2104      	movs	r1, #4
 800f69a:	4604      	mov	r4, r0
 800f69c:	9201      	str	r2, [sp, #4]
 800f69e:	f000 fd01 	bl	80100a4 <ucdr_buffer_alignment>
 800f6a2:	4601      	mov	r1, r0
 800f6a4:	4620      	mov	r0, r4
 800f6a6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f6aa:	f000 fd3f 	bl	801012c <ucdr_advance_buffer>
 800f6ae:	2104      	movs	r1, #4
 800f6b0:	4620      	mov	r0, r4
 800f6b2:	f000 fc97 	bl	800ffe4 <ucdr_check_buffer_available_for>
 800f6b6:	2800      	cmp	r0, #0
 800f6b8:	d138      	bne.n	800f72c <ucdr_serialize_endian_uint32_t+0x9c>
 800f6ba:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f6be:	42b7      	cmp	r7, r6
 800f6c0:	d92f      	bls.n	800f722 <ucdr_serialize_endian_uint32_t+0x92>
 800f6c2:	6923      	ldr	r3, [r4, #16]
 800f6c4:	60a7      	str	r7, [r4, #8]
 800f6c6:	1bbf      	subs	r7, r7, r6
 800f6c8:	443b      	add	r3, r7
 800f6ca:	f1c7 0904 	rsb	r9, r7, #4
 800f6ce:	6123      	str	r3, [r4, #16]
 800f6d0:	4649      	mov	r1, r9
 800f6d2:	4620      	mov	r0, r4
 800f6d4:	f000 fc92 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800f6d8:	2800      	cmp	r0, #0
 800f6da:	d04a      	beq.n	800f772 <ucdr_serialize_endian_uint32_t+0xe2>
 800f6dc:	2d01      	cmp	r5, #1
 800f6de:	d063      	beq.n	800f7a8 <ucdr_serialize_endian_uint32_t+0x118>
 800f6e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f6e4:	7033      	strb	r3, [r6, #0]
 800f6e6:	2f00      	cmp	r7, #0
 800f6e8:	d051      	beq.n	800f78e <ucdr_serialize_endian_uint32_t+0xfe>
 800f6ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f6ee:	7073      	strb	r3, [r6, #1]
 800f6f0:	2f01      	cmp	r7, #1
 800f6f2:	d050      	beq.n	800f796 <ucdr_serialize_endian_uint32_t+0x106>
 800f6f4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f6f8:	70b3      	strb	r3, [r6, #2]
 800f6fa:	2f02      	cmp	r7, #2
 800f6fc:	d04f      	beq.n	800f79e <ucdr_serialize_endian_uint32_t+0x10e>
 800f6fe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f702:	70f3      	strb	r3, [r6, #3]
 800f704:	6923      	ldr	r3, [r4, #16]
 800f706:	68a2      	ldr	r2, [r4, #8]
 800f708:	7da0      	ldrb	r0, [r4, #22]
 800f70a:	3304      	adds	r3, #4
 800f70c:	444a      	add	r2, r9
 800f70e:	1bdb      	subs	r3, r3, r7
 800f710:	2104      	movs	r1, #4
 800f712:	f080 0001 	eor.w	r0, r0, #1
 800f716:	60a2      	str	r2, [r4, #8]
 800f718:	6123      	str	r3, [r4, #16]
 800f71a:	7561      	strb	r1, [r4, #21]
 800f71c:	b003      	add	sp, #12
 800f71e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f722:	2104      	movs	r1, #4
 800f724:	4620      	mov	r0, r4
 800f726:	f000 fc69 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800f72a:	b1c8      	cbz	r0, 800f760 <ucdr_serialize_endian_uint32_t+0xd0>
 800f72c:	2d01      	cmp	r5, #1
 800f72e:	68a3      	ldr	r3, [r4, #8]
 800f730:	d01c      	beq.n	800f76c <ucdr_serialize_endian_uint32_t+0xdc>
 800f732:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f736:	701a      	strb	r2, [r3, #0]
 800f738:	68a3      	ldr	r3, [r4, #8]
 800f73a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f73e:	705a      	strb	r2, [r3, #1]
 800f740:	68a3      	ldr	r3, [r4, #8]
 800f742:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f746:	709a      	strb	r2, [r3, #2]
 800f748:	68a3      	ldr	r3, [r4, #8]
 800f74a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f74e:	70da      	strb	r2, [r3, #3]
 800f750:	68a2      	ldr	r2, [r4, #8]
 800f752:	6923      	ldr	r3, [r4, #16]
 800f754:	3204      	adds	r2, #4
 800f756:	3304      	adds	r3, #4
 800f758:	2104      	movs	r1, #4
 800f75a:	60a2      	str	r2, [r4, #8]
 800f75c:	6123      	str	r3, [r4, #16]
 800f75e:	7561      	strb	r1, [r4, #21]
 800f760:	7da0      	ldrb	r0, [r4, #22]
 800f762:	f080 0001 	eor.w	r0, r0, #1
 800f766:	b003      	add	sp, #12
 800f768:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f76c:	9a01      	ldr	r2, [sp, #4]
 800f76e:	601a      	str	r2, [r3, #0]
 800f770:	e7ee      	b.n	800f750 <ucdr_serialize_endian_uint32_t+0xc0>
 800f772:	68a2      	ldr	r2, [r4, #8]
 800f774:	6923      	ldr	r3, [r4, #16]
 800f776:	7da0      	ldrb	r0, [r4, #22]
 800f778:	f884 8015 	strb.w	r8, [r4, #21]
 800f77c:	1bd2      	subs	r2, r2, r7
 800f77e:	1bdb      	subs	r3, r3, r7
 800f780:	f080 0001 	eor.w	r0, r0, #1
 800f784:	60a2      	str	r2, [r4, #8]
 800f786:	6123      	str	r3, [r4, #16]
 800f788:	b003      	add	sp, #12
 800f78a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f78e:	68a3      	ldr	r3, [r4, #8]
 800f790:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f794:	701a      	strb	r2, [r3, #0]
 800f796:	68a3      	ldr	r3, [r4, #8]
 800f798:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f79c:	701a      	strb	r2, [r3, #0]
 800f79e:	68a3      	ldr	r3, [r4, #8]
 800f7a0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f7a4:	701a      	strb	r2, [r3, #0]
 800f7a6:	e7ad      	b.n	800f704 <ucdr_serialize_endian_uint32_t+0x74>
 800f7a8:	ad01      	add	r5, sp, #4
 800f7aa:	4629      	mov	r1, r5
 800f7ac:	463a      	mov	r2, r7
 800f7ae:	4630      	mov	r0, r6
 800f7b0:	f009 fa03 	bl	8018bba <memcpy>
 800f7b4:	68a0      	ldr	r0, [r4, #8]
 800f7b6:	464a      	mov	r2, r9
 800f7b8:	19e9      	adds	r1, r5, r7
 800f7ba:	f009 f9fe 	bl	8018bba <memcpy>
 800f7be:	e7a1      	b.n	800f704 <ucdr_serialize_endian_uint32_t+0x74>

0800f7c0 <ucdr_deserialize_uint32_t>:
 800f7c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7c4:	460d      	mov	r5, r1
 800f7c6:	2104      	movs	r1, #4
 800f7c8:	4604      	mov	r4, r0
 800f7ca:	f000 fc6b 	bl	80100a4 <ucdr_buffer_alignment>
 800f7ce:	4601      	mov	r1, r0
 800f7d0:	4620      	mov	r0, r4
 800f7d2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f7d6:	f000 fca9 	bl	801012c <ucdr_advance_buffer>
 800f7da:	2104      	movs	r1, #4
 800f7dc:	4620      	mov	r0, r4
 800f7de:	f000 fc01 	bl	800ffe4 <ucdr_check_buffer_available_for>
 800f7e2:	2800      	cmp	r0, #0
 800f7e4:	d138      	bne.n	800f858 <ucdr_deserialize_uint32_t+0x98>
 800f7e6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f7ea:	42b7      	cmp	r7, r6
 800f7ec:	d92f      	bls.n	800f84e <ucdr_deserialize_uint32_t+0x8e>
 800f7ee:	6923      	ldr	r3, [r4, #16]
 800f7f0:	60a7      	str	r7, [r4, #8]
 800f7f2:	1bbf      	subs	r7, r7, r6
 800f7f4:	443b      	add	r3, r7
 800f7f6:	f1c7 0904 	rsb	r9, r7, #4
 800f7fa:	6123      	str	r3, [r4, #16]
 800f7fc:	4649      	mov	r1, r9
 800f7fe:	4620      	mov	r0, r4
 800f800:	f000 fbfc 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800f804:	2800      	cmp	r0, #0
 800f806:	d046      	beq.n	800f896 <ucdr_deserialize_uint32_t+0xd6>
 800f808:	7d23      	ldrb	r3, [r4, #20]
 800f80a:	2b01      	cmp	r3, #1
 800f80c:	d05c      	beq.n	800f8c8 <ucdr_deserialize_uint32_t+0x108>
 800f80e:	78f3      	ldrb	r3, [r6, #3]
 800f810:	702b      	strb	r3, [r5, #0]
 800f812:	2f00      	cmp	r7, #0
 800f814:	d04c      	beq.n	800f8b0 <ucdr_deserialize_uint32_t+0xf0>
 800f816:	78b3      	ldrb	r3, [r6, #2]
 800f818:	706b      	strb	r3, [r5, #1]
 800f81a:	2f01      	cmp	r7, #1
 800f81c:	f105 0302 	add.w	r3, r5, #2
 800f820:	d04a      	beq.n	800f8b8 <ucdr_deserialize_uint32_t+0xf8>
 800f822:	7873      	ldrb	r3, [r6, #1]
 800f824:	70ab      	strb	r3, [r5, #2]
 800f826:	2f02      	cmp	r7, #2
 800f828:	f105 0303 	add.w	r3, r5, #3
 800f82c:	d048      	beq.n	800f8c0 <ucdr_deserialize_uint32_t+0x100>
 800f82e:	7833      	ldrb	r3, [r6, #0]
 800f830:	70eb      	strb	r3, [r5, #3]
 800f832:	6923      	ldr	r3, [r4, #16]
 800f834:	68a2      	ldr	r2, [r4, #8]
 800f836:	7da0      	ldrb	r0, [r4, #22]
 800f838:	2104      	movs	r1, #4
 800f83a:	3304      	adds	r3, #4
 800f83c:	444a      	add	r2, r9
 800f83e:	1bdb      	subs	r3, r3, r7
 800f840:	7561      	strb	r1, [r4, #21]
 800f842:	60a2      	str	r2, [r4, #8]
 800f844:	6123      	str	r3, [r4, #16]
 800f846:	f080 0001 	eor.w	r0, r0, #1
 800f84a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f84e:	2104      	movs	r1, #4
 800f850:	4620      	mov	r0, r4
 800f852:	f000 fbd3 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800f856:	b1b0      	cbz	r0, 800f886 <ucdr_deserialize_uint32_t+0xc6>
 800f858:	7d23      	ldrb	r3, [r4, #20]
 800f85a:	2b01      	cmp	r3, #1
 800f85c:	68a3      	ldr	r3, [r4, #8]
 800f85e:	d017      	beq.n	800f890 <ucdr_deserialize_uint32_t+0xd0>
 800f860:	78db      	ldrb	r3, [r3, #3]
 800f862:	702b      	strb	r3, [r5, #0]
 800f864:	68a3      	ldr	r3, [r4, #8]
 800f866:	789b      	ldrb	r3, [r3, #2]
 800f868:	706b      	strb	r3, [r5, #1]
 800f86a:	68a3      	ldr	r3, [r4, #8]
 800f86c:	785b      	ldrb	r3, [r3, #1]
 800f86e:	70ab      	strb	r3, [r5, #2]
 800f870:	68a3      	ldr	r3, [r4, #8]
 800f872:	781b      	ldrb	r3, [r3, #0]
 800f874:	70eb      	strb	r3, [r5, #3]
 800f876:	68a2      	ldr	r2, [r4, #8]
 800f878:	6923      	ldr	r3, [r4, #16]
 800f87a:	3204      	adds	r2, #4
 800f87c:	3304      	adds	r3, #4
 800f87e:	2104      	movs	r1, #4
 800f880:	60a2      	str	r2, [r4, #8]
 800f882:	6123      	str	r3, [r4, #16]
 800f884:	7561      	strb	r1, [r4, #21]
 800f886:	7da0      	ldrb	r0, [r4, #22]
 800f888:	f080 0001 	eor.w	r0, r0, #1
 800f88c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	602b      	str	r3, [r5, #0]
 800f894:	e7ef      	b.n	800f876 <ucdr_deserialize_uint32_t+0xb6>
 800f896:	68a2      	ldr	r2, [r4, #8]
 800f898:	6923      	ldr	r3, [r4, #16]
 800f89a:	7da0      	ldrb	r0, [r4, #22]
 800f89c:	f884 8015 	strb.w	r8, [r4, #21]
 800f8a0:	1bd2      	subs	r2, r2, r7
 800f8a2:	1bdb      	subs	r3, r3, r7
 800f8a4:	60a2      	str	r2, [r4, #8]
 800f8a6:	6123      	str	r3, [r4, #16]
 800f8a8:	f080 0001 	eor.w	r0, r0, #1
 800f8ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8b0:	68a3      	ldr	r3, [r4, #8]
 800f8b2:	789b      	ldrb	r3, [r3, #2]
 800f8b4:	706b      	strb	r3, [r5, #1]
 800f8b6:	1cab      	adds	r3, r5, #2
 800f8b8:	68a2      	ldr	r2, [r4, #8]
 800f8ba:	7852      	ldrb	r2, [r2, #1]
 800f8bc:	f803 2b01 	strb.w	r2, [r3], #1
 800f8c0:	68a2      	ldr	r2, [r4, #8]
 800f8c2:	7812      	ldrb	r2, [r2, #0]
 800f8c4:	701a      	strb	r2, [r3, #0]
 800f8c6:	e7b4      	b.n	800f832 <ucdr_deserialize_uint32_t+0x72>
 800f8c8:	4631      	mov	r1, r6
 800f8ca:	463a      	mov	r2, r7
 800f8cc:	4628      	mov	r0, r5
 800f8ce:	f009 f974 	bl	8018bba <memcpy>
 800f8d2:	68a1      	ldr	r1, [r4, #8]
 800f8d4:	464a      	mov	r2, r9
 800f8d6:	19e8      	adds	r0, r5, r7
 800f8d8:	f009 f96f 	bl	8018bba <memcpy>
 800f8dc:	e7a9      	b.n	800f832 <ucdr_deserialize_uint32_t+0x72>
 800f8de:	bf00      	nop

0800f8e0 <ucdr_deserialize_endian_uint32_t>:
 800f8e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8e4:	460e      	mov	r6, r1
 800f8e6:	2104      	movs	r1, #4
 800f8e8:	4604      	mov	r4, r0
 800f8ea:	4615      	mov	r5, r2
 800f8ec:	f000 fbda 	bl	80100a4 <ucdr_buffer_alignment>
 800f8f0:	4601      	mov	r1, r0
 800f8f2:	4620      	mov	r0, r4
 800f8f4:	f894 9015 	ldrb.w	r9, [r4, #21]
 800f8f8:	f000 fc18 	bl	801012c <ucdr_advance_buffer>
 800f8fc:	2104      	movs	r1, #4
 800f8fe:	4620      	mov	r0, r4
 800f900:	f000 fb70 	bl	800ffe4 <ucdr_check_buffer_available_for>
 800f904:	2800      	cmp	r0, #0
 800f906:	d13c      	bne.n	800f982 <ucdr_deserialize_endian_uint32_t+0xa2>
 800f908:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800f90c:	42bb      	cmp	r3, r7
 800f90e:	d933      	bls.n	800f978 <ucdr_deserialize_endian_uint32_t+0x98>
 800f910:	eba3 0807 	sub.w	r8, r3, r7
 800f914:	60a3      	str	r3, [r4, #8]
 800f916:	6923      	ldr	r3, [r4, #16]
 800f918:	f1c8 0a04 	rsb	sl, r8, #4
 800f91c:	4443      	add	r3, r8
 800f91e:	6123      	str	r3, [r4, #16]
 800f920:	4651      	mov	r1, sl
 800f922:	4620      	mov	r0, r4
 800f924:	f000 fb6a 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800f928:	2800      	cmp	r0, #0
 800f92a:	d048      	beq.n	800f9be <ucdr_deserialize_endian_uint32_t+0xde>
 800f92c:	2e01      	cmp	r6, #1
 800f92e:	d061      	beq.n	800f9f4 <ucdr_deserialize_endian_uint32_t+0x114>
 800f930:	78fb      	ldrb	r3, [r7, #3]
 800f932:	702b      	strb	r3, [r5, #0]
 800f934:	f1b8 0f00 	cmp.w	r8, #0
 800f938:	d050      	beq.n	800f9dc <ucdr_deserialize_endian_uint32_t+0xfc>
 800f93a:	78bb      	ldrb	r3, [r7, #2]
 800f93c:	706b      	strb	r3, [r5, #1]
 800f93e:	f1b8 0f01 	cmp.w	r8, #1
 800f942:	f105 0302 	add.w	r3, r5, #2
 800f946:	d04d      	beq.n	800f9e4 <ucdr_deserialize_endian_uint32_t+0x104>
 800f948:	787b      	ldrb	r3, [r7, #1]
 800f94a:	70ab      	strb	r3, [r5, #2]
 800f94c:	f1b8 0f02 	cmp.w	r8, #2
 800f950:	f105 0303 	add.w	r3, r5, #3
 800f954:	d04a      	beq.n	800f9ec <ucdr_deserialize_endian_uint32_t+0x10c>
 800f956:	783b      	ldrb	r3, [r7, #0]
 800f958:	70eb      	strb	r3, [r5, #3]
 800f95a:	6923      	ldr	r3, [r4, #16]
 800f95c:	68a2      	ldr	r2, [r4, #8]
 800f95e:	7da0      	ldrb	r0, [r4, #22]
 800f960:	2104      	movs	r1, #4
 800f962:	3304      	adds	r3, #4
 800f964:	4452      	add	r2, sl
 800f966:	eba3 0308 	sub.w	r3, r3, r8
 800f96a:	7561      	strb	r1, [r4, #21]
 800f96c:	60a2      	str	r2, [r4, #8]
 800f96e:	6123      	str	r3, [r4, #16]
 800f970:	f080 0001 	eor.w	r0, r0, #1
 800f974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f978:	2104      	movs	r1, #4
 800f97a:	4620      	mov	r0, r4
 800f97c:	f000 fb3e 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800f980:	b1a8      	cbz	r0, 800f9ae <ucdr_deserialize_endian_uint32_t+0xce>
 800f982:	2e01      	cmp	r6, #1
 800f984:	68a3      	ldr	r3, [r4, #8]
 800f986:	d017      	beq.n	800f9b8 <ucdr_deserialize_endian_uint32_t+0xd8>
 800f988:	78db      	ldrb	r3, [r3, #3]
 800f98a:	702b      	strb	r3, [r5, #0]
 800f98c:	68a3      	ldr	r3, [r4, #8]
 800f98e:	789b      	ldrb	r3, [r3, #2]
 800f990:	706b      	strb	r3, [r5, #1]
 800f992:	68a3      	ldr	r3, [r4, #8]
 800f994:	785b      	ldrb	r3, [r3, #1]
 800f996:	70ab      	strb	r3, [r5, #2]
 800f998:	68a3      	ldr	r3, [r4, #8]
 800f99a:	781b      	ldrb	r3, [r3, #0]
 800f99c:	70eb      	strb	r3, [r5, #3]
 800f99e:	68a2      	ldr	r2, [r4, #8]
 800f9a0:	6923      	ldr	r3, [r4, #16]
 800f9a2:	3204      	adds	r2, #4
 800f9a4:	3304      	adds	r3, #4
 800f9a6:	2104      	movs	r1, #4
 800f9a8:	60a2      	str	r2, [r4, #8]
 800f9aa:	6123      	str	r3, [r4, #16]
 800f9ac:	7561      	strb	r1, [r4, #21]
 800f9ae:	7da0      	ldrb	r0, [r4, #22]
 800f9b0:	f080 0001 	eor.w	r0, r0, #1
 800f9b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	602b      	str	r3, [r5, #0]
 800f9bc:	e7ef      	b.n	800f99e <ucdr_deserialize_endian_uint32_t+0xbe>
 800f9be:	68a2      	ldr	r2, [r4, #8]
 800f9c0:	6923      	ldr	r3, [r4, #16]
 800f9c2:	7da0      	ldrb	r0, [r4, #22]
 800f9c4:	f884 9015 	strb.w	r9, [r4, #21]
 800f9c8:	eba2 0208 	sub.w	r2, r2, r8
 800f9cc:	eba3 0308 	sub.w	r3, r3, r8
 800f9d0:	60a2      	str	r2, [r4, #8]
 800f9d2:	6123      	str	r3, [r4, #16]
 800f9d4:	f080 0001 	eor.w	r0, r0, #1
 800f9d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9dc:	68a3      	ldr	r3, [r4, #8]
 800f9de:	789b      	ldrb	r3, [r3, #2]
 800f9e0:	706b      	strb	r3, [r5, #1]
 800f9e2:	1cab      	adds	r3, r5, #2
 800f9e4:	68a2      	ldr	r2, [r4, #8]
 800f9e6:	7852      	ldrb	r2, [r2, #1]
 800f9e8:	f803 2b01 	strb.w	r2, [r3], #1
 800f9ec:	68a2      	ldr	r2, [r4, #8]
 800f9ee:	7812      	ldrb	r2, [r2, #0]
 800f9f0:	701a      	strb	r2, [r3, #0]
 800f9f2:	e7b2      	b.n	800f95a <ucdr_deserialize_endian_uint32_t+0x7a>
 800f9f4:	4639      	mov	r1, r7
 800f9f6:	4642      	mov	r2, r8
 800f9f8:	4628      	mov	r0, r5
 800f9fa:	f009 f8de 	bl	8018bba <memcpy>
 800f9fe:	68a1      	ldr	r1, [r4, #8]
 800fa00:	4652      	mov	r2, sl
 800fa02:	eb05 0008 	add.w	r0, r5, r8
 800fa06:	f009 f8d8 	bl	8018bba <memcpy>
 800fa0a:	e7a6      	b.n	800f95a <ucdr_deserialize_endian_uint32_t+0x7a>

0800fa0c <ucdr_serialize_uint64_t>:
 800fa0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa10:	2108      	movs	r1, #8
 800fa12:	b082      	sub	sp, #8
 800fa14:	4604      	mov	r4, r0
 800fa16:	e9cd 2300 	strd	r2, r3, [sp]
 800fa1a:	f000 fb43 	bl	80100a4 <ucdr_buffer_alignment>
 800fa1e:	4601      	mov	r1, r0
 800fa20:	4620      	mov	r0, r4
 800fa22:	7d67      	ldrb	r7, [r4, #21]
 800fa24:	f000 fb82 	bl	801012c <ucdr_advance_buffer>
 800fa28:	2108      	movs	r1, #8
 800fa2a:	4620      	mov	r0, r4
 800fa2c:	f000 fada 	bl	800ffe4 <ucdr_check_buffer_available_for>
 800fa30:	2800      	cmp	r0, #0
 800fa32:	d14e      	bne.n	800fad2 <ucdr_serialize_uint64_t+0xc6>
 800fa34:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800fa38:	42ab      	cmp	r3, r5
 800fa3a:	d945      	bls.n	800fac8 <ucdr_serialize_uint64_t+0xbc>
 800fa3c:	1b5e      	subs	r6, r3, r5
 800fa3e:	60a3      	str	r3, [r4, #8]
 800fa40:	6923      	ldr	r3, [r4, #16]
 800fa42:	f1c6 0808 	rsb	r8, r6, #8
 800fa46:	4433      	add	r3, r6
 800fa48:	6123      	str	r3, [r4, #16]
 800fa4a:	4641      	mov	r1, r8
 800fa4c:	4620      	mov	r0, r4
 800fa4e:	f000 fad5 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800fa52:	2800      	cmp	r0, #0
 800fa54:	d074      	beq.n	800fb40 <ucdr_serialize_uint64_t+0x134>
 800fa56:	7d23      	ldrb	r3, [r4, #20]
 800fa58:	2b01      	cmp	r3, #1
 800fa5a:	f000 809b 	beq.w	800fb94 <ucdr_serialize_uint64_t+0x188>
 800fa5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fa62:	702b      	strb	r3, [r5, #0]
 800fa64:	2e00      	cmp	r6, #0
 800fa66:	d078      	beq.n	800fb5a <ucdr_serialize_uint64_t+0x14e>
 800fa68:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fa6c:	706b      	strb	r3, [r5, #1]
 800fa6e:	2e01      	cmp	r6, #1
 800fa70:	d077      	beq.n	800fb62 <ucdr_serialize_uint64_t+0x156>
 800fa72:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fa76:	70ab      	strb	r3, [r5, #2]
 800fa78:	2e02      	cmp	r6, #2
 800fa7a:	d076      	beq.n	800fb6a <ucdr_serialize_uint64_t+0x15e>
 800fa7c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fa80:	70eb      	strb	r3, [r5, #3]
 800fa82:	2e03      	cmp	r6, #3
 800fa84:	d075      	beq.n	800fb72 <ucdr_serialize_uint64_t+0x166>
 800fa86:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800fa8a:	712b      	strb	r3, [r5, #4]
 800fa8c:	2e04      	cmp	r6, #4
 800fa8e:	d074      	beq.n	800fb7a <ucdr_serialize_uint64_t+0x16e>
 800fa90:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800fa94:	716b      	strb	r3, [r5, #5]
 800fa96:	2e05      	cmp	r6, #5
 800fa98:	d073      	beq.n	800fb82 <ucdr_serialize_uint64_t+0x176>
 800fa9a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800fa9e:	71ab      	strb	r3, [r5, #6]
 800faa0:	2e06      	cmp	r6, #6
 800faa2:	d072      	beq.n	800fb8a <ucdr_serialize_uint64_t+0x17e>
 800faa4:	f89d 3000 	ldrb.w	r3, [sp]
 800faa8:	71eb      	strb	r3, [r5, #7]
 800faaa:	6923      	ldr	r3, [r4, #16]
 800faac:	68a2      	ldr	r2, [r4, #8]
 800faae:	7da0      	ldrb	r0, [r4, #22]
 800fab0:	3308      	adds	r3, #8
 800fab2:	1b9e      	subs	r6, r3, r6
 800fab4:	4442      	add	r2, r8
 800fab6:	2308      	movs	r3, #8
 800fab8:	f080 0001 	eor.w	r0, r0, #1
 800fabc:	60a2      	str	r2, [r4, #8]
 800fabe:	6126      	str	r6, [r4, #16]
 800fac0:	7563      	strb	r3, [r4, #21]
 800fac2:	b002      	add	sp, #8
 800fac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fac8:	2108      	movs	r1, #8
 800faca:	4620      	mov	r0, r4
 800facc:	f000 fa96 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800fad0:	b350      	cbz	r0, 800fb28 <ucdr_serialize_uint64_t+0x11c>
 800fad2:	7d23      	ldrb	r3, [r4, #20]
 800fad4:	2b01      	cmp	r3, #1
 800fad6:	d02d      	beq.n	800fb34 <ucdr_serialize_uint64_t+0x128>
 800fad8:	68a3      	ldr	r3, [r4, #8]
 800fada:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fade:	701a      	strb	r2, [r3, #0]
 800fae0:	68a3      	ldr	r3, [r4, #8]
 800fae2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fae6:	705a      	strb	r2, [r3, #1]
 800fae8:	68a3      	ldr	r3, [r4, #8]
 800faea:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800faee:	709a      	strb	r2, [r3, #2]
 800faf0:	68a3      	ldr	r3, [r4, #8]
 800faf2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800faf6:	70da      	strb	r2, [r3, #3]
 800faf8:	68a3      	ldr	r3, [r4, #8]
 800fafa:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800fafe:	711a      	strb	r2, [r3, #4]
 800fb00:	68a3      	ldr	r3, [r4, #8]
 800fb02:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800fb06:	715a      	strb	r2, [r3, #5]
 800fb08:	68a3      	ldr	r3, [r4, #8]
 800fb0a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800fb0e:	719a      	strb	r2, [r3, #6]
 800fb10:	68a3      	ldr	r3, [r4, #8]
 800fb12:	f89d 2000 	ldrb.w	r2, [sp]
 800fb16:	71da      	strb	r2, [r3, #7]
 800fb18:	68a2      	ldr	r2, [r4, #8]
 800fb1a:	6923      	ldr	r3, [r4, #16]
 800fb1c:	3208      	adds	r2, #8
 800fb1e:	3308      	adds	r3, #8
 800fb20:	2108      	movs	r1, #8
 800fb22:	60a2      	str	r2, [r4, #8]
 800fb24:	6123      	str	r3, [r4, #16]
 800fb26:	7561      	strb	r1, [r4, #21]
 800fb28:	7da0      	ldrb	r0, [r4, #22]
 800fb2a:	f080 0001 	eor.w	r0, r0, #1
 800fb2e:	b002      	add	sp, #8
 800fb30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb34:	466b      	mov	r3, sp
 800fb36:	cb03      	ldmia	r3!, {r0, r1}
 800fb38:	68a3      	ldr	r3, [r4, #8]
 800fb3a:	6018      	str	r0, [r3, #0]
 800fb3c:	6059      	str	r1, [r3, #4]
 800fb3e:	e7eb      	b.n	800fb18 <ucdr_serialize_uint64_t+0x10c>
 800fb40:	68a2      	ldr	r2, [r4, #8]
 800fb42:	6923      	ldr	r3, [r4, #16]
 800fb44:	7da0      	ldrb	r0, [r4, #22]
 800fb46:	7567      	strb	r7, [r4, #21]
 800fb48:	1b92      	subs	r2, r2, r6
 800fb4a:	1b9b      	subs	r3, r3, r6
 800fb4c:	f080 0001 	eor.w	r0, r0, #1
 800fb50:	60a2      	str	r2, [r4, #8]
 800fb52:	6123      	str	r3, [r4, #16]
 800fb54:	b002      	add	sp, #8
 800fb56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb5a:	68a3      	ldr	r3, [r4, #8]
 800fb5c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fb60:	701a      	strb	r2, [r3, #0]
 800fb62:	68a3      	ldr	r3, [r4, #8]
 800fb64:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fb68:	701a      	strb	r2, [r3, #0]
 800fb6a:	68a3      	ldr	r3, [r4, #8]
 800fb6c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fb70:	701a      	strb	r2, [r3, #0]
 800fb72:	68a3      	ldr	r3, [r4, #8]
 800fb74:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800fb78:	701a      	strb	r2, [r3, #0]
 800fb7a:	68a3      	ldr	r3, [r4, #8]
 800fb7c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800fb80:	701a      	strb	r2, [r3, #0]
 800fb82:	68a3      	ldr	r3, [r4, #8]
 800fb84:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800fb88:	701a      	strb	r2, [r3, #0]
 800fb8a:	68a3      	ldr	r3, [r4, #8]
 800fb8c:	f89d 2000 	ldrb.w	r2, [sp]
 800fb90:	701a      	strb	r2, [r3, #0]
 800fb92:	e78a      	b.n	800faaa <ucdr_serialize_uint64_t+0x9e>
 800fb94:	4628      	mov	r0, r5
 800fb96:	466d      	mov	r5, sp
 800fb98:	4629      	mov	r1, r5
 800fb9a:	4632      	mov	r2, r6
 800fb9c:	f009 f80d 	bl	8018bba <memcpy>
 800fba0:	68a0      	ldr	r0, [r4, #8]
 800fba2:	4642      	mov	r2, r8
 800fba4:	19a9      	adds	r1, r5, r6
 800fba6:	f009 f808 	bl	8018bba <memcpy>
 800fbaa:	e77e      	b.n	800faaa <ucdr_serialize_uint64_t+0x9e>

0800fbac <ucdr_serialize_int16_t>:
 800fbac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbb0:	b082      	sub	sp, #8
 800fbb2:	460b      	mov	r3, r1
 800fbb4:	2102      	movs	r1, #2
 800fbb6:	4604      	mov	r4, r0
 800fbb8:	f8ad 3006 	strh.w	r3, [sp, #6]
 800fbbc:	f000 fa72 	bl	80100a4 <ucdr_buffer_alignment>
 800fbc0:	4601      	mov	r1, r0
 800fbc2:	4620      	mov	r0, r4
 800fbc4:	7d67      	ldrb	r7, [r4, #21]
 800fbc6:	f000 fab1 	bl	801012c <ucdr_advance_buffer>
 800fbca:	2102      	movs	r1, #2
 800fbcc:	4620      	mov	r0, r4
 800fbce:	f000 fa09 	bl	800ffe4 <ucdr_check_buffer_available_for>
 800fbd2:	bb78      	cbnz	r0, 800fc34 <ucdr_serialize_int16_t+0x88>
 800fbd4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800fbd8:	42ab      	cmp	r3, r5
 800fbda:	d926      	bls.n	800fc2a <ucdr_serialize_int16_t+0x7e>
 800fbdc:	1b5e      	subs	r6, r3, r5
 800fbde:	60a3      	str	r3, [r4, #8]
 800fbe0:	6923      	ldr	r3, [r4, #16]
 800fbe2:	f1c6 0802 	rsb	r8, r6, #2
 800fbe6:	4433      	add	r3, r6
 800fbe8:	6123      	str	r3, [r4, #16]
 800fbea:	4641      	mov	r1, r8
 800fbec:	4620      	mov	r0, r4
 800fbee:	f000 fa05 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800fbf2:	2800      	cmp	r0, #0
 800fbf4:	d03b      	beq.n	800fc6e <ucdr_serialize_int16_t+0xc2>
 800fbf6:	7d23      	ldrb	r3, [r4, #20]
 800fbf8:	2b01      	cmp	r3, #1
 800fbfa:	d04a      	beq.n	800fc92 <ucdr_serialize_int16_t+0xe6>
 800fbfc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fc00:	702b      	strb	r3, [r5, #0]
 800fc02:	2e00      	cmp	r6, #0
 800fc04:	d040      	beq.n	800fc88 <ucdr_serialize_int16_t+0xdc>
 800fc06:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fc0a:	706b      	strb	r3, [r5, #1]
 800fc0c:	6923      	ldr	r3, [r4, #16]
 800fc0e:	68a2      	ldr	r2, [r4, #8]
 800fc10:	7da0      	ldrb	r0, [r4, #22]
 800fc12:	3302      	adds	r3, #2
 800fc14:	1b9e      	subs	r6, r3, r6
 800fc16:	4442      	add	r2, r8
 800fc18:	2302      	movs	r3, #2
 800fc1a:	f080 0001 	eor.w	r0, r0, #1
 800fc1e:	60a2      	str	r2, [r4, #8]
 800fc20:	6126      	str	r6, [r4, #16]
 800fc22:	7563      	strb	r3, [r4, #21]
 800fc24:	b002      	add	sp, #8
 800fc26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc2a:	2102      	movs	r1, #2
 800fc2c:	4620      	mov	r0, r4
 800fc2e:	f000 f9e5 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800fc32:	b190      	cbz	r0, 800fc5a <ucdr_serialize_int16_t+0xae>
 800fc34:	7d23      	ldrb	r3, [r4, #20]
 800fc36:	2b01      	cmp	r3, #1
 800fc38:	68a3      	ldr	r3, [r4, #8]
 800fc3a:	d014      	beq.n	800fc66 <ucdr_serialize_int16_t+0xba>
 800fc3c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fc40:	701a      	strb	r2, [r3, #0]
 800fc42:	68a3      	ldr	r3, [r4, #8]
 800fc44:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fc48:	705a      	strb	r2, [r3, #1]
 800fc4a:	68a2      	ldr	r2, [r4, #8]
 800fc4c:	6923      	ldr	r3, [r4, #16]
 800fc4e:	3202      	adds	r2, #2
 800fc50:	3302      	adds	r3, #2
 800fc52:	2102      	movs	r1, #2
 800fc54:	60a2      	str	r2, [r4, #8]
 800fc56:	6123      	str	r3, [r4, #16]
 800fc58:	7561      	strb	r1, [r4, #21]
 800fc5a:	7da0      	ldrb	r0, [r4, #22]
 800fc5c:	f080 0001 	eor.w	r0, r0, #1
 800fc60:	b002      	add	sp, #8
 800fc62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc66:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800fc6a:	801a      	strh	r2, [r3, #0]
 800fc6c:	e7ed      	b.n	800fc4a <ucdr_serialize_int16_t+0x9e>
 800fc6e:	68a2      	ldr	r2, [r4, #8]
 800fc70:	6923      	ldr	r3, [r4, #16]
 800fc72:	7da0      	ldrb	r0, [r4, #22]
 800fc74:	7567      	strb	r7, [r4, #21]
 800fc76:	1b92      	subs	r2, r2, r6
 800fc78:	1b9b      	subs	r3, r3, r6
 800fc7a:	f080 0001 	eor.w	r0, r0, #1
 800fc7e:	60a2      	str	r2, [r4, #8]
 800fc80:	6123      	str	r3, [r4, #16]
 800fc82:	b002      	add	sp, #8
 800fc84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc88:	68a3      	ldr	r3, [r4, #8]
 800fc8a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fc8e:	701a      	strb	r2, [r3, #0]
 800fc90:	e7bc      	b.n	800fc0c <ucdr_serialize_int16_t+0x60>
 800fc92:	4628      	mov	r0, r5
 800fc94:	f10d 0506 	add.w	r5, sp, #6
 800fc98:	4629      	mov	r1, r5
 800fc9a:	4632      	mov	r2, r6
 800fc9c:	f008 ff8d 	bl	8018bba <memcpy>
 800fca0:	68a0      	ldr	r0, [r4, #8]
 800fca2:	4642      	mov	r2, r8
 800fca4:	19a9      	adds	r1, r5, r6
 800fca6:	f008 ff88 	bl	8018bba <memcpy>
 800fcaa:	e7af      	b.n	800fc0c <ucdr_serialize_int16_t+0x60>

0800fcac <ucdr_deserialize_int16_t>:
 800fcac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fcb0:	460d      	mov	r5, r1
 800fcb2:	2102      	movs	r1, #2
 800fcb4:	4604      	mov	r4, r0
 800fcb6:	f000 f9f5 	bl	80100a4 <ucdr_buffer_alignment>
 800fcba:	4601      	mov	r1, r0
 800fcbc:	4620      	mov	r0, r4
 800fcbe:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fcc2:	f000 fa33 	bl	801012c <ucdr_advance_buffer>
 800fcc6:	2102      	movs	r1, #2
 800fcc8:	4620      	mov	r0, r4
 800fcca:	f000 f98b 	bl	800ffe4 <ucdr_check_buffer_available_for>
 800fcce:	bb60      	cbnz	r0, 800fd2a <ucdr_deserialize_int16_t+0x7e>
 800fcd0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800fcd4:	42be      	cmp	r6, r7
 800fcd6:	d923      	bls.n	800fd20 <ucdr_deserialize_int16_t+0x74>
 800fcd8:	6923      	ldr	r3, [r4, #16]
 800fcda:	60a6      	str	r6, [r4, #8]
 800fcdc:	1bf6      	subs	r6, r6, r7
 800fcde:	4433      	add	r3, r6
 800fce0:	f1c6 0902 	rsb	r9, r6, #2
 800fce4:	6123      	str	r3, [r4, #16]
 800fce6:	4649      	mov	r1, r9
 800fce8:	4620      	mov	r0, r4
 800fcea:	f000 f987 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800fcee:	2800      	cmp	r0, #0
 800fcf0:	d034      	beq.n	800fd5c <ucdr_deserialize_int16_t+0xb0>
 800fcf2:	7d23      	ldrb	r3, [r4, #20]
 800fcf4:	2b01      	cmp	r3, #1
 800fcf6:	d042      	beq.n	800fd7e <ucdr_deserialize_int16_t+0xd2>
 800fcf8:	787b      	ldrb	r3, [r7, #1]
 800fcfa:	702b      	strb	r3, [r5, #0]
 800fcfc:	2e00      	cmp	r6, #0
 800fcfe:	d03a      	beq.n	800fd76 <ucdr_deserialize_int16_t+0xca>
 800fd00:	783b      	ldrb	r3, [r7, #0]
 800fd02:	706b      	strb	r3, [r5, #1]
 800fd04:	6923      	ldr	r3, [r4, #16]
 800fd06:	68a2      	ldr	r2, [r4, #8]
 800fd08:	7da0      	ldrb	r0, [r4, #22]
 800fd0a:	2102      	movs	r1, #2
 800fd0c:	3302      	adds	r3, #2
 800fd0e:	444a      	add	r2, r9
 800fd10:	1b9b      	subs	r3, r3, r6
 800fd12:	7561      	strb	r1, [r4, #21]
 800fd14:	60a2      	str	r2, [r4, #8]
 800fd16:	6123      	str	r3, [r4, #16]
 800fd18:	f080 0001 	eor.w	r0, r0, #1
 800fd1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd20:	2102      	movs	r1, #2
 800fd22:	4620      	mov	r0, r4
 800fd24:	f000 f96a 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800fd28:	b180      	cbz	r0, 800fd4c <ucdr_deserialize_int16_t+0xa0>
 800fd2a:	7d23      	ldrb	r3, [r4, #20]
 800fd2c:	2b01      	cmp	r3, #1
 800fd2e:	68a3      	ldr	r3, [r4, #8]
 800fd30:	d011      	beq.n	800fd56 <ucdr_deserialize_int16_t+0xaa>
 800fd32:	785b      	ldrb	r3, [r3, #1]
 800fd34:	702b      	strb	r3, [r5, #0]
 800fd36:	68a3      	ldr	r3, [r4, #8]
 800fd38:	781b      	ldrb	r3, [r3, #0]
 800fd3a:	706b      	strb	r3, [r5, #1]
 800fd3c:	68a2      	ldr	r2, [r4, #8]
 800fd3e:	6923      	ldr	r3, [r4, #16]
 800fd40:	3202      	adds	r2, #2
 800fd42:	3302      	adds	r3, #2
 800fd44:	2102      	movs	r1, #2
 800fd46:	60a2      	str	r2, [r4, #8]
 800fd48:	6123      	str	r3, [r4, #16]
 800fd4a:	7561      	strb	r1, [r4, #21]
 800fd4c:	7da0      	ldrb	r0, [r4, #22]
 800fd4e:	f080 0001 	eor.w	r0, r0, #1
 800fd52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd56:	881b      	ldrh	r3, [r3, #0]
 800fd58:	802b      	strh	r3, [r5, #0]
 800fd5a:	e7ef      	b.n	800fd3c <ucdr_deserialize_int16_t+0x90>
 800fd5c:	68a2      	ldr	r2, [r4, #8]
 800fd5e:	6923      	ldr	r3, [r4, #16]
 800fd60:	7da0      	ldrb	r0, [r4, #22]
 800fd62:	f884 8015 	strb.w	r8, [r4, #21]
 800fd66:	1b92      	subs	r2, r2, r6
 800fd68:	1b9b      	subs	r3, r3, r6
 800fd6a:	60a2      	str	r2, [r4, #8]
 800fd6c:	6123      	str	r3, [r4, #16]
 800fd6e:	f080 0001 	eor.w	r0, r0, #1
 800fd72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd76:	68a3      	ldr	r3, [r4, #8]
 800fd78:	781b      	ldrb	r3, [r3, #0]
 800fd7a:	706b      	strb	r3, [r5, #1]
 800fd7c:	e7c2      	b.n	800fd04 <ucdr_deserialize_int16_t+0x58>
 800fd7e:	4639      	mov	r1, r7
 800fd80:	4632      	mov	r2, r6
 800fd82:	4628      	mov	r0, r5
 800fd84:	f008 ff19 	bl	8018bba <memcpy>
 800fd88:	68a1      	ldr	r1, [r4, #8]
 800fd8a:	464a      	mov	r2, r9
 800fd8c:	19a8      	adds	r0, r5, r6
 800fd8e:	f008 ff14 	bl	8018bba <memcpy>
 800fd92:	e7b7      	b.n	800fd04 <ucdr_deserialize_int16_t+0x58>

0800fd94 <ucdr_serialize_int32_t>:
 800fd94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd98:	b082      	sub	sp, #8
 800fd9a:	4604      	mov	r4, r0
 800fd9c:	9101      	str	r1, [sp, #4]
 800fd9e:	2104      	movs	r1, #4
 800fda0:	f000 f980 	bl	80100a4 <ucdr_buffer_alignment>
 800fda4:	4601      	mov	r1, r0
 800fda6:	4620      	mov	r0, r4
 800fda8:	7d67      	ldrb	r7, [r4, #21]
 800fdaa:	f000 f9bf 	bl	801012c <ucdr_advance_buffer>
 800fdae:	2104      	movs	r1, #4
 800fdb0:	4620      	mov	r0, r4
 800fdb2:	f000 f917 	bl	800ffe4 <ucdr_check_buffer_available_for>
 800fdb6:	2800      	cmp	r0, #0
 800fdb8:	d139      	bne.n	800fe2e <ucdr_serialize_int32_t+0x9a>
 800fdba:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800fdbe:	42ab      	cmp	r3, r5
 800fdc0:	d930      	bls.n	800fe24 <ucdr_serialize_int32_t+0x90>
 800fdc2:	1b5e      	subs	r6, r3, r5
 800fdc4:	60a3      	str	r3, [r4, #8]
 800fdc6:	6923      	ldr	r3, [r4, #16]
 800fdc8:	f1c6 0804 	rsb	r8, r6, #4
 800fdcc:	4433      	add	r3, r6
 800fdce:	6123      	str	r3, [r4, #16]
 800fdd0:	4641      	mov	r1, r8
 800fdd2:	4620      	mov	r0, r4
 800fdd4:	f000 f912 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800fdd8:	2800      	cmp	r0, #0
 800fdda:	d04c      	beq.n	800fe76 <ucdr_serialize_int32_t+0xe2>
 800fddc:	7d23      	ldrb	r3, [r4, #20]
 800fdde:	2b01      	cmp	r3, #1
 800fde0:	d063      	beq.n	800feaa <ucdr_serialize_int32_t+0x116>
 800fde2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fde6:	702b      	strb	r3, [r5, #0]
 800fde8:	2e00      	cmp	r6, #0
 800fdea:	d051      	beq.n	800fe90 <ucdr_serialize_int32_t+0xfc>
 800fdec:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fdf0:	706b      	strb	r3, [r5, #1]
 800fdf2:	2e01      	cmp	r6, #1
 800fdf4:	d050      	beq.n	800fe98 <ucdr_serialize_int32_t+0x104>
 800fdf6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fdfa:	70ab      	strb	r3, [r5, #2]
 800fdfc:	2e02      	cmp	r6, #2
 800fdfe:	d04f      	beq.n	800fea0 <ucdr_serialize_int32_t+0x10c>
 800fe00:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fe04:	70eb      	strb	r3, [r5, #3]
 800fe06:	6923      	ldr	r3, [r4, #16]
 800fe08:	68a2      	ldr	r2, [r4, #8]
 800fe0a:	7da0      	ldrb	r0, [r4, #22]
 800fe0c:	3304      	adds	r3, #4
 800fe0e:	1b9e      	subs	r6, r3, r6
 800fe10:	4442      	add	r2, r8
 800fe12:	2304      	movs	r3, #4
 800fe14:	f080 0001 	eor.w	r0, r0, #1
 800fe18:	60a2      	str	r2, [r4, #8]
 800fe1a:	6126      	str	r6, [r4, #16]
 800fe1c:	7563      	strb	r3, [r4, #21]
 800fe1e:	b002      	add	sp, #8
 800fe20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe24:	2104      	movs	r1, #4
 800fe26:	4620      	mov	r0, r4
 800fe28:	f000 f8e8 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800fe2c:	b1d0      	cbz	r0, 800fe64 <ucdr_serialize_int32_t+0xd0>
 800fe2e:	7d23      	ldrb	r3, [r4, #20]
 800fe30:	2b01      	cmp	r3, #1
 800fe32:	68a3      	ldr	r3, [r4, #8]
 800fe34:	d01c      	beq.n	800fe70 <ucdr_serialize_int32_t+0xdc>
 800fe36:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fe3a:	701a      	strb	r2, [r3, #0]
 800fe3c:	68a3      	ldr	r3, [r4, #8]
 800fe3e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fe42:	705a      	strb	r2, [r3, #1]
 800fe44:	68a3      	ldr	r3, [r4, #8]
 800fe46:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fe4a:	709a      	strb	r2, [r3, #2]
 800fe4c:	68a3      	ldr	r3, [r4, #8]
 800fe4e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fe52:	70da      	strb	r2, [r3, #3]
 800fe54:	68a2      	ldr	r2, [r4, #8]
 800fe56:	6923      	ldr	r3, [r4, #16]
 800fe58:	3204      	adds	r2, #4
 800fe5a:	3304      	adds	r3, #4
 800fe5c:	2104      	movs	r1, #4
 800fe5e:	60a2      	str	r2, [r4, #8]
 800fe60:	6123      	str	r3, [r4, #16]
 800fe62:	7561      	strb	r1, [r4, #21]
 800fe64:	7da0      	ldrb	r0, [r4, #22]
 800fe66:	f080 0001 	eor.w	r0, r0, #1
 800fe6a:	b002      	add	sp, #8
 800fe6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe70:	9a01      	ldr	r2, [sp, #4]
 800fe72:	601a      	str	r2, [r3, #0]
 800fe74:	e7ee      	b.n	800fe54 <ucdr_serialize_int32_t+0xc0>
 800fe76:	68a2      	ldr	r2, [r4, #8]
 800fe78:	6923      	ldr	r3, [r4, #16]
 800fe7a:	7da0      	ldrb	r0, [r4, #22]
 800fe7c:	7567      	strb	r7, [r4, #21]
 800fe7e:	1b92      	subs	r2, r2, r6
 800fe80:	1b9b      	subs	r3, r3, r6
 800fe82:	f080 0001 	eor.w	r0, r0, #1
 800fe86:	60a2      	str	r2, [r4, #8]
 800fe88:	6123      	str	r3, [r4, #16]
 800fe8a:	b002      	add	sp, #8
 800fe8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe90:	68a3      	ldr	r3, [r4, #8]
 800fe92:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fe96:	701a      	strb	r2, [r3, #0]
 800fe98:	68a3      	ldr	r3, [r4, #8]
 800fe9a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fe9e:	701a      	strb	r2, [r3, #0]
 800fea0:	68a3      	ldr	r3, [r4, #8]
 800fea2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fea6:	701a      	strb	r2, [r3, #0]
 800fea8:	e7ad      	b.n	800fe06 <ucdr_serialize_int32_t+0x72>
 800feaa:	4628      	mov	r0, r5
 800feac:	ad01      	add	r5, sp, #4
 800feae:	4629      	mov	r1, r5
 800feb0:	4632      	mov	r2, r6
 800feb2:	f008 fe82 	bl	8018bba <memcpy>
 800feb6:	68a0      	ldr	r0, [r4, #8]
 800feb8:	4642      	mov	r2, r8
 800feba:	19a9      	adds	r1, r5, r6
 800febc:	f008 fe7d 	bl	8018bba <memcpy>
 800fec0:	e7a1      	b.n	800fe06 <ucdr_serialize_int32_t+0x72>
 800fec2:	bf00      	nop

0800fec4 <ucdr_deserialize_int32_t>:
 800fec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fec8:	460d      	mov	r5, r1
 800feca:	2104      	movs	r1, #4
 800fecc:	4604      	mov	r4, r0
 800fece:	f000 f8e9 	bl	80100a4 <ucdr_buffer_alignment>
 800fed2:	4601      	mov	r1, r0
 800fed4:	4620      	mov	r0, r4
 800fed6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800feda:	f000 f927 	bl	801012c <ucdr_advance_buffer>
 800fede:	2104      	movs	r1, #4
 800fee0:	4620      	mov	r0, r4
 800fee2:	f000 f87f 	bl	800ffe4 <ucdr_check_buffer_available_for>
 800fee6:	2800      	cmp	r0, #0
 800fee8:	d138      	bne.n	800ff5c <ucdr_deserialize_int32_t+0x98>
 800feea:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800feee:	42b7      	cmp	r7, r6
 800fef0:	d92f      	bls.n	800ff52 <ucdr_deserialize_int32_t+0x8e>
 800fef2:	6923      	ldr	r3, [r4, #16]
 800fef4:	60a7      	str	r7, [r4, #8]
 800fef6:	1bbf      	subs	r7, r7, r6
 800fef8:	443b      	add	r3, r7
 800fefa:	f1c7 0904 	rsb	r9, r7, #4
 800fefe:	6123      	str	r3, [r4, #16]
 800ff00:	4649      	mov	r1, r9
 800ff02:	4620      	mov	r0, r4
 800ff04:	f000 f87a 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800ff08:	2800      	cmp	r0, #0
 800ff0a:	d046      	beq.n	800ff9a <ucdr_deserialize_int32_t+0xd6>
 800ff0c:	7d23      	ldrb	r3, [r4, #20]
 800ff0e:	2b01      	cmp	r3, #1
 800ff10:	d05c      	beq.n	800ffcc <ucdr_deserialize_int32_t+0x108>
 800ff12:	78f3      	ldrb	r3, [r6, #3]
 800ff14:	702b      	strb	r3, [r5, #0]
 800ff16:	2f00      	cmp	r7, #0
 800ff18:	d04c      	beq.n	800ffb4 <ucdr_deserialize_int32_t+0xf0>
 800ff1a:	78b3      	ldrb	r3, [r6, #2]
 800ff1c:	706b      	strb	r3, [r5, #1]
 800ff1e:	2f01      	cmp	r7, #1
 800ff20:	f105 0302 	add.w	r3, r5, #2
 800ff24:	d04a      	beq.n	800ffbc <ucdr_deserialize_int32_t+0xf8>
 800ff26:	7873      	ldrb	r3, [r6, #1]
 800ff28:	70ab      	strb	r3, [r5, #2]
 800ff2a:	2f02      	cmp	r7, #2
 800ff2c:	f105 0303 	add.w	r3, r5, #3
 800ff30:	d048      	beq.n	800ffc4 <ucdr_deserialize_int32_t+0x100>
 800ff32:	7833      	ldrb	r3, [r6, #0]
 800ff34:	70eb      	strb	r3, [r5, #3]
 800ff36:	6923      	ldr	r3, [r4, #16]
 800ff38:	68a2      	ldr	r2, [r4, #8]
 800ff3a:	7da0      	ldrb	r0, [r4, #22]
 800ff3c:	2104      	movs	r1, #4
 800ff3e:	3304      	adds	r3, #4
 800ff40:	444a      	add	r2, r9
 800ff42:	1bdb      	subs	r3, r3, r7
 800ff44:	7561      	strb	r1, [r4, #21]
 800ff46:	60a2      	str	r2, [r4, #8]
 800ff48:	6123      	str	r3, [r4, #16]
 800ff4a:	f080 0001 	eor.w	r0, r0, #1
 800ff4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff52:	2104      	movs	r1, #4
 800ff54:	4620      	mov	r0, r4
 800ff56:	f000 f851 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800ff5a:	b1b0      	cbz	r0, 800ff8a <ucdr_deserialize_int32_t+0xc6>
 800ff5c:	7d23      	ldrb	r3, [r4, #20]
 800ff5e:	2b01      	cmp	r3, #1
 800ff60:	68a3      	ldr	r3, [r4, #8]
 800ff62:	d017      	beq.n	800ff94 <ucdr_deserialize_int32_t+0xd0>
 800ff64:	78db      	ldrb	r3, [r3, #3]
 800ff66:	702b      	strb	r3, [r5, #0]
 800ff68:	68a3      	ldr	r3, [r4, #8]
 800ff6a:	789b      	ldrb	r3, [r3, #2]
 800ff6c:	706b      	strb	r3, [r5, #1]
 800ff6e:	68a3      	ldr	r3, [r4, #8]
 800ff70:	785b      	ldrb	r3, [r3, #1]
 800ff72:	70ab      	strb	r3, [r5, #2]
 800ff74:	68a3      	ldr	r3, [r4, #8]
 800ff76:	781b      	ldrb	r3, [r3, #0]
 800ff78:	70eb      	strb	r3, [r5, #3]
 800ff7a:	68a2      	ldr	r2, [r4, #8]
 800ff7c:	6923      	ldr	r3, [r4, #16]
 800ff7e:	3204      	adds	r2, #4
 800ff80:	3304      	adds	r3, #4
 800ff82:	2104      	movs	r1, #4
 800ff84:	60a2      	str	r2, [r4, #8]
 800ff86:	6123      	str	r3, [r4, #16]
 800ff88:	7561      	strb	r1, [r4, #21]
 800ff8a:	7da0      	ldrb	r0, [r4, #22]
 800ff8c:	f080 0001 	eor.w	r0, r0, #1
 800ff90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	602b      	str	r3, [r5, #0]
 800ff98:	e7ef      	b.n	800ff7a <ucdr_deserialize_int32_t+0xb6>
 800ff9a:	68a2      	ldr	r2, [r4, #8]
 800ff9c:	6923      	ldr	r3, [r4, #16]
 800ff9e:	7da0      	ldrb	r0, [r4, #22]
 800ffa0:	f884 8015 	strb.w	r8, [r4, #21]
 800ffa4:	1bd2      	subs	r2, r2, r7
 800ffa6:	1bdb      	subs	r3, r3, r7
 800ffa8:	60a2      	str	r2, [r4, #8]
 800ffaa:	6123      	str	r3, [r4, #16]
 800ffac:	f080 0001 	eor.w	r0, r0, #1
 800ffb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffb4:	68a3      	ldr	r3, [r4, #8]
 800ffb6:	789b      	ldrb	r3, [r3, #2]
 800ffb8:	706b      	strb	r3, [r5, #1]
 800ffba:	1cab      	adds	r3, r5, #2
 800ffbc:	68a2      	ldr	r2, [r4, #8]
 800ffbe:	7852      	ldrb	r2, [r2, #1]
 800ffc0:	f803 2b01 	strb.w	r2, [r3], #1
 800ffc4:	68a2      	ldr	r2, [r4, #8]
 800ffc6:	7812      	ldrb	r2, [r2, #0]
 800ffc8:	701a      	strb	r2, [r3, #0]
 800ffca:	e7b4      	b.n	800ff36 <ucdr_deserialize_int32_t+0x72>
 800ffcc:	4631      	mov	r1, r6
 800ffce:	463a      	mov	r2, r7
 800ffd0:	4628      	mov	r0, r5
 800ffd2:	f008 fdf2 	bl	8018bba <memcpy>
 800ffd6:	68a1      	ldr	r1, [r4, #8]
 800ffd8:	464a      	mov	r2, r9
 800ffda:	19e8      	adds	r0, r5, r7
 800ffdc:	f008 fded 	bl	8018bba <memcpy>
 800ffe0:	e7a9      	b.n	800ff36 <ucdr_deserialize_int32_t+0x72>
 800ffe2:	bf00      	nop

0800ffe4 <ucdr_check_buffer_available_for>:
 800ffe4:	7d83      	ldrb	r3, [r0, #22]
 800ffe6:	b93b      	cbnz	r3, 800fff8 <ucdr_check_buffer_available_for+0x14>
 800ffe8:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800ffec:	4419      	add	r1, r3
 800ffee:	4288      	cmp	r0, r1
 800fff0:	bf34      	ite	cc
 800fff2:	2000      	movcc	r0, #0
 800fff4:	2001      	movcs	r0, #1
 800fff6:	4770      	bx	lr
 800fff8:	2000      	movs	r0, #0
 800fffa:	4770      	bx	lr

0800fffc <ucdr_check_final_buffer_behavior>:
 800fffc:	7d83      	ldrb	r3, [r0, #22]
 800fffe:	b943      	cbnz	r3, 8010012 <ucdr_check_final_buffer_behavior+0x16>
 8010000:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8010004:	4291      	cmp	r1, r2
 8010006:	b510      	push	{r4, lr}
 8010008:	4604      	mov	r4, r0
 801000a:	d205      	bcs.n	8010018 <ucdr_check_final_buffer_behavior+0x1c>
 801000c:	2301      	movs	r3, #1
 801000e:	4618      	mov	r0, r3
 8010010:	bd10      	pop	{r4, pc}
 8010012:	2300      	movs	r3, #0
 8010014:	4618      	mov	r0, r3
 8010016:	4770      	bx	lr
 8010018:	6982      	ldr	r2, [r0, #24]
 801001a:	b13a      	cbz	r2, 801002c <ucdr_check_final_buffer_behavior+0x30>
 801001c:	69c1      	ldr	r1, [r0, #28]
 801001e:	4790      	blx	r2
 8010020:	f080 0301 	eor.w	r3, r0, #1
 8010024:	b2db      	uxtb	r3, r3
 8010026:	75a0      	strb	r0, [r4, #22]
 8010028:	4618      	mov	r0, r3
 801002a:	bd10      	pop	{r4, pc}
 801002c:	2001      	movs	r0, #1
 801002e:	75a0      	strb	r0, [r4, #22]
 8010030:	e7fa      	b.n	8010028 <ucdr_check_final_buffer_behavior+0x2c>
 8010032:	bf00      	nop

08010034 <ucdr_set_on_full_buffer_callback>:
 8010034:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8010038:	4770      	bx	lr
 801003a:	bf00      	nop

0801003c <ucdr_init_buffer_origin_offset_endian>:
 801003c:	b410      	push	{r4}
 801003e:	9c01      	ldr	r4, [sp, #4]
 8010040:	6001      	str	r1, [r0, #0]
 8010042:	440a      	add	r2, r1
 8010044:	6042      	str	r2, [r0, #4]
 8010046:	190a      	adds	r2, r1, r4
 8010048:	441c      	add	r4, r3
 801004a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 801004e:	6082      	str	r2, [r0, #8]
 8010050:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010054:	7503      	strb	r3, [r0, #20]
 8010056:	2200      	movs	r2, #0
 8010058:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801005c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010060:	7542      	strb	r2, [r0, #21]
 8010062:	7582      	strb	r2, [r0, #22]
 8010064:	4770      	bx	lr
 8010066:	bf00      	nop

08010068 <ucdr_init_buffer_origin_offset>:
 8010068:	b510      	push	{r4, lr}
 801006a:	b082      	sub	sp, #8
 801006c:	9c04      	ldr	r4, [sp, #16]
 801006e:	9400      	str	r4, [sp, #0]
 8010070:	2401      	movs	r4, #1
 8010072:	9401      	str	r4, [sp, #4]
 8010074:	f7ff ffe2 	bl	801003c <ucdr_init_buffer_origin_offset_endian>
 8010078:	b002      	add	sp, #8
 801007a:	bd10      	pop	{r4, pc}

0801007c <ucdr_init_buffer_origin>:
 801007c:	b510      	push	{r4, lr}
 801007e:	b082      	sub	sp, #8
 8010080:	2400      	movs	r4, #0
 8010082:	9400      	str	r4, [sp, #0]
 8010084:	f7ff fff0 	bl	8010068 <ucdr_init_buffer_origin_offset>
 8010088:	b002      	add	sp, #8
 801008a:	bd10      	pop	{r4, pc}

0801008c <ucdr_init_buffer>:
 801008c:	2300      	movs	r3, #0
 801008e:	f7ff bff5 	b.w	801007c <ucdr_init_buffer_origin>
 8010092:	bf00      	nop

08010094 <ucdr_alignment>:
 8010094:	fbb0 f3f1 	udiv	r3, r0, r1
 8010098:	fb03 0011 	mls	r0, r3, r1, r0
 801009c:	1a08      	subs	r0, r1, r0
 801009e:	3901      	subs	r1, #1
 80100a0:	4008      	ands	r0, r1
 80100a2:	4770      	bx	lr

080100a4 <ucdr_buffer_alignment>:
 80100a4:	7d43      	ldrb	r3, [r0, #21]
 80100a6:	428b      	cmp	r3, r1
 80100a8:	d208      	bcs.n	80100bc <ucdr_buffer_alignment+0x18>
 80100aa:	6900      	ldr	r0, [r0, #16]
 80100ac:	fbb0 f3f1 	udiv	r3, r0, r1
 80100b0:	fb01 0013 	mls	r0, r1, r3, r0
 80100b4:	1a08      	subs	r0, r1, r0
 80100b6:	3901      	subs	r1, #1
 80100b8:	4008      	ands	r0, r1
 80100ba:	4770      	bx	lr
 80100bc:	2000      	movs	r0, #0
 80100be:	4770      	bx	lr

080100c0 <ucdr_align_to>:
 80100c0:	b538      	push	{r3, r4, r5, lr}
 80100c2:	4604      	mov	r4, r0
 80100c4:	460d      	mov	r5, r1
 80100c6:	f7ff ffed 	bl	80100a4 <ucdr_buffer_alignment>
 80100ca:	68a3      	ldr	r3, [r4, #8]
 80100cc:	6921      	ldr	r1, [r4, #16]
 80100ce:	7565      	strb	r5, [r4, #21]
 80100d0:	181a      	adds	r2, r3, r0
 80100d2:	6863      	ldr	r3, [r4, #4]
 80100d4:	4293      	cmp	r3, r2
 80100d6:	4408      	add	r0, r1
 80100d8:	bf28      	it	cs
 80100da:	4613      	movcs	r3, r2
 80100dc:	6120      	str	r0, [r4, #16]
 80100de:	60a3      	str	r3, [r4, #8]
 80100e0:	bd38      	pop	{r3, r4, r5, pc}
 80100e2:	bf00      	nop

080100e4 <ucdr_buffer_length>:
 80100e4:	6882      	ldr	r2, [r0, #8]
 80100e6:	6800      	ldr	r0, [r0, #0]
 80100e8:	1a10      	subs	r0, r2, r0
 80100ea:	4770      	bx	lr

080100ec <ucdr_buffer_remaining>:
 80100ec:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 80100f0:	1a10      	subs	r0, r2, r0
 80100f2:	4770      	bx	lr

080100f4 <ucdr_check_final_buffer_behavior_array>:
 80100f4:	b538      	push	{r3, r4, r5, lr}
 80100f6:	7d83      	ldrb	r3, [r0, #22]
 80100f8:	b963      	cbnz	r3, 8010114 <ucdr_check_final_buffer_behavior_array+0x20>
 80100fa:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80100fe:	429a      	cmp	r2, r3
 8010100:	4604      	mov	r4, r0
 8010102:	460d      	mov	r5, r1
 8010104:	d308      	bcc.n	8010118 <ucdr_check_final_buffer_behavior_array+0x24>
 8010106:	b139      	cbz	r1, 8010118 <ucdr_check_final_buffer_behavior_array+0x24>
 8010108:	6983      	ldr	r3, [r0, #24]
 801010a:	b163      	cbz	r3, 8010126 <ucdr_check_final_buffer_behavior_array+0x32>
 801010c:	69c1      	ldr	r1, [r0, #28]
 801010e:	4798      	blx	r3
 8010110:	75a0      	strb	r0, [r4, #22]
 8010112:	b108      	cbz	r0, 8010118 <ucdr_check_final_buffer_behavior_array+0x24>
 8010114:	2000      	movs	r0, #0
 8010116:	bd38      	pop	{r3, r4, r5, pc}
 8010118:	4620      	mov	r0, r4
 801011a:	f7ff ffe7 	bl	80100ec <ucdr_buffer_remaining>
 801011e:	42a8      	cmp	r0, r5
 8010120:	bf28      	it	cs
 8010122:	4628      	movcs	r0, r5
 8010124:	bd38      	pop	{r3, r4, r5, pc}
 8010126:	2301      	movs	r3, #1
 8010128:	7583      	strb	r3, [r0, #22]
 801012a:	e7f3      	b.n	8010114 <ucdr_check_final_buffer_behavior_array+0x20>

0801012c <ucdr_advance_buffer>:
 801012c:	b538      	push	{r3, r4, r5, lr}
 801012e:	4604      	mov	r4, r0
 8010130:	460d      	mov	r5, r1
 8010132:	f7ff ff57 	bl	800ffe4 <ucdr_check_buffer_available_for>
 8010136:	b178      	cbz	r0, 8010158 <ucdr_advance_buffer+0x2c>
 8010138:	6923      	ldr	r3, [r4, #16]
 801013a:	68a2      	ldr	r2, [r4, #8]
 801013c:	442b      	add	r3, r5
 801013e:	6123      	str	r3, [r4, #16]
 8010140:	2301      	movs	r3, #1
 8010142:	442a      	add	r2, r5
 8010144:	7563      	strb	r3, [r4, #21]
 8010146:	60a2      	str	r2, [r4, #8]
 8010148:	bd38      	pop	{r3, r4, r5, pc}
 801014a:	68a2      	ldr	r2, [r4, #8]
 801014c:	6923      	ldr	r3, [r4, #16]
 801014e:	4402      	add	r2, r0
 8010150:	4403      	add	r3, r0
 8010152:	1a2d      	subs	r5, r5, r0
 8010154:	60a2      	str	r2, [r4, #8]
 8010156:	6123      	str	r3, [r4, #16]
 8010158:	4629      	mov	r1, r5
 801015a:	2201      	movs	r2, #1
 801015c:	4620      	mov	r0, r4
 801015e:	f7ff ffc9 	bl	80100f4 <ucdr_check_final_buffer_behavior_array>
 8010162:	2800      	cmp	r0, #0
 8010164:	d1f1      	bne.n	801014a <ucdr_advance_buffer+0x1e>
 8010166:	2301      	movs	r3, #1
 8010168:	7563      	strb	r3, [r4, #21]
 801016a:	bd38      	pop	{r3, r4, r5, pc}

0801016c <uxr_buffer_delete_entity>:
 801016c:	b510      	push	{r4, lr}
 801016e:	2300      	movs	r3, #0
 8010170:	b08e      	sub	sp, #56	@ 0x38
 8010172:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8010176:	2303      	movs	r3, #3
 8010178:	9300      	str	r3, [sp, #0]
 801017a:	2204      	movs	r2, #4
 801017c:	ab06      	add	r3, sp, #24
 801017e:	4604      	mov	r4, r0
 8010180:	9103      	str	r1, [sp, #12]
 8010182:	f001 fc71 	bl	8011a68 <uxr_prepare_stream_to_write_submessage>
 8010186:	b918      	cbnz	r0, 8010190 <uxr_buffer_delete_entity+0x24>
 8010188:	4604      	mov	r4, r0
 801018a:	4620      	mov	r0, r4
 801018c:	b00e      	add	sp, #56	@ 0x38
 801018e:	bd10      	pop	{r4, pc}
 8010190:	9902      	ldr	r1, [sp, #8]
 8010192:	aa05      	add	r2, sp, #20
 8010194:	4620      	mov	r0, r4
 8010196:	f001 fd9d 	bl	8011cd4 <uxr_init_base_object_request>
 801019a:	a905      	add	r1, sp, #20
 801019c:	4604      	mov	r4, r0
 801019e:	a806      	add	r0, sp, #24
 80101a0:	f003 fc94 	bl	8013acc <uxr_serialize_DELETE_Payload>
 80101a4:	4620      	mov	r0, r4
 80101a6:	b00e      	add	sp, #56	@ 0x38
 80101a8:	bd10      	pop	{r4, pc}
 80101aa:	bf00      	nop

080101ac <uxr_common_create_entity>:
 80101ac:	b510      	push	{r4, lr}
 80101ae:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80101b2:	b08c      	sub	sp, #48	@ 0x30
 80101b4:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80101b8:	f1bc 0f01 	cmp.w	ip, #1
 80101bc:	bf0c      	ite	eq
 80101be:	f003 0201 	andeq.w	r2, r3, #1
 80101c2:	2200      	movne	r2, #0
 80101c4:	330e      	adds	r3, #14
 80101c6:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 80101ca:	9101      	str	r1, [sp, #4]
 80101cc:	441a      	add	r2, r3
 80101ce:	2301      	movs	r3, #1
 80101d0:	9300      	str	r3, [sp, #0]
 80101d2:	9903      	ldr	r1, [sp, #12]
 80101d4:	ab04      	add	r3, sp, #16
 80101d6:	b292      	uxth	r2, r2
 80101d8:	4604      	mov	r4, r0
 80101da:	f001 fc45 	bl	8011a68 <uxr_prepare_stream_to_write_submessage>
 80101de:	b918      	cbnz	r0, 80101e8 <uxr_common_create_entity+0x3c>
 80101e0:	4604      	mov	r4, r0
 80101e2:	4620      	mov	r0, r4
 80101e4:	b00c      	add	sp, #48	@ 0x30
 80101e6:	bd10      	pop	{r4, pc}
 80101e8:	9902      	ldr	r1, [sp, #8]
 80101ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80101ec:	4620      	mov	r0, r4
 80101ee:	f001 fd71 	bl	8011cd4 <uxr_init_base_object_request>
 80101f2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80101f4:	4604      	mov	r4, r0
 80101f6:	a804      	add	r0, sp, #16
 80101f8:	f003 fbb0 	bl	801395c <uxr_serialize_CREATE_Payload>
 80101fc:	4620      	mov	r0, r4
 80101fe:	b00c      	add	sp, #48	@ 0x30
 8010200:	bd10      	pop	{r4, pc}
 8010202:	bf00      	nop

08010204 <uxr_buffer_create_participant_bin>:
 8010204:	b570      	push	{r4, r5, r6, lr}
 8010206:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 801020a:	ac11      	add	r4, sp, #68	@ 0x44
 801020c:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8010210:	2303      	movs	r3, #3
 8010212:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8010216:	7223      	strb	r3, [r4, #8]
 8010218:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 801021a:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 801021e:	2201      	movs	r2, #1
 8010220:	2100      	movs	r1, #0
 8010222:	4605      	mov	r5, r0
 8010224:	7122      	strb	r2, [r4, #4]
 8010226:	f88d 1014 	strb.w	r1, [sp, #20]
 801022a:	b1cb      	cbz	r3, 8010260 <uxr_buffer_create_participant_bin+0x5c>
 801022c:	f88d 201c 	strb.w	r2, [sp, #28]
 8010230:	9308      	str	r3, [sp, #32]
 8010232:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010236:	a915      	add	r1, sp, #84	@ 0x54
 8010238:	a809      	add	r0, sp, #36	@ 0x24
 801023a:	f7ff ff27 	bl	801008c <ucdr_init_buffer>
 801023e:	a905      	add	r1, sp, #20
 8010240:	a809      	add	r0, sp, #36	@ 0x24
 8010242:	f002 ff6d 	bl	8013120 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8010246:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010248:	9600      	str	r6, [sp, #0]
 801024a:	9401      	str	r4, [sp, #4]
 801024c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010250:	60e3      	str	r3, [r4, #12]
 8010252:	4628      	mov	r0, r5
 8010254:	b29b      	uxth	r3, r3
 8010256:	f7ff ffa9 	bl	80101ac <uxr_common_create_entity>
 801025a:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 801025e:	bd70      	pop	{r4, r5, r6, pc}
 8010260:	f88d 301c 	strb.w	r3, [sp, #28]
 8010264:	e7e5      	b.n	8010232 <uxr_buffer_create_participant_bin+0x2e>
 8010266:	bf00      	nop

08010268 <uxr_buffer_create_topic_bin>:
 8010268:	b570      	push	{r4, r5, r6, lr}
 801026a:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 801026e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010272:	9105      	str	r1, [sp, #20]
 8010274:	4605      	mov	r5, r0
 8010276:	a997      	add	r1, sp, #604	@ 0x25c
 8010278:	4618      	mov	r0, r3
 801027a:	2302      	movs	r3, #2
 801027c:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8010280:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8010284:	f000 fa58 	bl	8010738 <uxr_object_id_to_raw>
 8010288:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 801028a:	9306      	str	r3, [sp, #24]
 801028c:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 801028e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010290:	2303      	movs	r3, #3
 8010292:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8010296:	2301      	movs	r3, #1
 8010298:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801029c:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80102a0:	a917      	add	r1, sp, #92	@ 0x5c
 80102a2:	2300      	movs	r3, #0
 80102a4:	a80b      	add	r0, sp, #44	@ 0x2c
 80102a6:	f88d 301c 	strb.w	r3, [sp, #28]
 80102aa:	f7ff feef 	bl	801008c <ucdr_init_buffer>
 80102ae:	a906      	add	r1, sp, #24
 80102b0:	a80b      	add	r0, sp, #44	@ 0x2c
 80102b2:	f002 ff57 	bl	8013164 <uxr_serialize_OBJK_Topic_Binary>
 80102b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80102b8:	9316      	str	r3, [sp, #88]	@ 0x58
 80102ba:	ac13      	add	r4, sp, #76	@ 0x4c
 80102bc:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80102c0:	9600      	str	r6, [sp, #0]
 80102c2:	9401      	str	r4, [sp, #4]
 80102c4:	b29b      	uxth	r3, r3
 80102c6:	4628      	mov	r0, r5
 80102c8:	f7ff ff70 	bl	80101ac <uxr_common_create_entity>
 80102cc:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 80102d0:	bd70      	pop	{r4, r5, r6, pc}
 80102d2:	bf00      	nop

080102d4 <uxr_buffer_create_publisher_bin>:
 80102d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102d6:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 80102da:	4605      	mov	r5, r0
 80102dc:	9105      	str	r1, [sp, #20]
 80102de:	4618      	mov	r0, r3
 80102e0:	2603      	movs	r6, #3
 80102e2:	a992      	add	r1, sp, #584	@ 0x248
 80102e4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80102e8:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 80102ec:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 80102f0:	f000 fa22 	bl	8010738 <uxr_object_id_to_raw>
 80102f4:	2300      	movs	r3, #0
 80102f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80102fa:	a912      	add	r1, sp, #72	@ 0x48
 80102fc:	a806      	add	r0, sp, #24
 80102fe:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8010302:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8010306:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 801030a:	f7ff febf 	bl	801008c <ucdr_init_buffer>
 801030e:	a993      	add	r1, sp, #588	@ 0x24c
 8010310:	a806      	add	r0, sp, #24
 8010312:	f002 ffdb 	bl	80132cc <uxr_serialize_OBJK_Publisher_Binary>
 8010316:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010318:	9311      	str	r3, [sp, #68]	@ 0x44
 801031a:	ac0e      	add	r4, sp, #56	@ 0x38
 801031c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010320:	9700      	str	r7, [sp, #0]
 8010322:	9401      	str	r4, [sp, #4]
 8010324:	b29b      	uxth	r3, r3
 8010326:	4628      	mov	r0, r5
 8010328:	f7ff ff40 	bl	80101ac <uxr_common_create_entity>
 801032c:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8010330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010332:	bf00      	nop

08010334 <uxr_buffer_create_subscriber_bin>:
 8010334:	b570      	push	{r4, r5, r6, lr}
 8010336:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 801033a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801033e:	9105      	str	r1, [sp, #20]
 8010340:	4605      	mov	r5, r0
 8010342:	a992      	add	r1, sp, #584	@ 0x248
 8010344:	4618      	mov	r0, r3
 8010346:	2304      	movs	r3, #4
 8010348:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 801034c:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 8010350:	f000 f9f2 	bl	8010738 <uxr_object_id_to_raw>
 8010354:	2300      	movs	r3, #0
 8010356:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801035a:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 801035e:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8010362:	a912      	add	r1, sp, #72	@ 0x48
 8010364:	2303      	movs	r3, #3
 8010366:	a806      	add	r0, sp, #24
 8010368:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 801036c:	f7ff fe8e 	bl	801008c <ucdr_init_buffer>
 8010370:	a993      	add	r1, sp, #588	@ 0x24c
 8010372:	a806      	add	r0, sp, #24
 8010374:	f003 f85a 	bl	801342c <uxr_serialize_OBJK_Subscriber_Binary>
 8010378:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801037a:	9311      	str	r3, [sp, #68]	@ 0x44
 801037c:	ac0e      	add	r4, sp, #56	@ 0x38
 801037e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010382:	9600      	str	r6, [sp, #0]
 8010384:	9401      	str	r4, [sp, #4]
 8010386:	b29b      	uxth	r3, r3
 8010388:	4628      	mov	r0, r5
 801038a:	f7ff ff0f 	bl	80101ac <uxr_common_create_entity>
 801038e:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 8010392:	bd70      	pop	{r4, r5, r6, pc}

08010394 <uxr_buffer_create_datawriter_bin>:
 8010394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010398:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 801039c:	ac1d      	add	r4, sp, #116	@ 0x74
 801039e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80103a2:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 80103a6:	9105      	str	r1, [sp, #20]
 80103a8:	4606      	mov	r6, r0
 80103aa:	a9a1      	add	r1, sp, #644	@ 0x284
 80103ac:	4618      	mov	r0, r3
 80103ae:	2305      	movs	r3, #5
 80103b0:	7123      	strb	r3, [r4, #4]
 80103b2:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 80103b6:	2703      	movs	r7, #3
 80103b8:	f000 f9be 	bl	8010738 <uxr_object_id_to_raw>
 80103bc:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 80103be:	7227      	strb	r7, [r4, #8]
 80103c0:	a90e      	add	r1, sp, #56	@ 0x38
 80103c2:	f000 f9b9 	bl	8010738 <uxr_object_id_to_raw>
 80103c6:	2300      	movs	r3, #0
 80103c8:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 80103cc:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 80103d0:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 80103d4:	3d00      	subs	r5, #0
 80103d6:	bf18      	it	ne
 80103d8:	2501      	movne	r5, #1
 80103da:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 80103de:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 80103e2:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 80103e6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80103ea:	2301      	movs	r3, #1
 80103ec:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 80103f0:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 80103f4:	bb8a      	cbnz	r2, 801045a <uxr_buffer_create_datawriter_bin+0xc6>
 80103f6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80103fa:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 80103fe:	f04f 0c13 	mov.w	ip, #19
 8010402:	250b      	movs	r5, #11
 8010404:	2221      	movs	r2, #33	@ 0x21
 8010406:	2111      	movs	r1, #17
 8010408:	2009      	movs	r0, #9
 801040a:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 801040e:	b923      	cbnz	r3, 801041a <uxr_buffer_create_datawriter_bin+0x86>
 8010410:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8010414:	4672      	mov	r2, lr
 8010416:	4661      	mov	r1, ip
 8010418:	4628      	mov	r0, r5
 801041a:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 801041e:	2b01      	cmp	r3, #1
 8010420:	d025      	beq.n	801046e <uxr_buffer_create_datawriter_bin+0xda>
 8010422:	2b03      	cmp	r3, #3
 8010424:	d029      	beq.n	801047a <uxr_buffer_create_datawriter_bin+0xe6>
 8010426:	b32b      	cbz	r3, 8010474 <uxr_buffer_create_datawriter_bin+0xe0>
 8010428:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801042c:	a921      	add	r1, sp, #132	@ 0x84
 801042e:	a806      	add	r0, sp, #24
 8010430:	f7ff fe2c 	bl	801008c <ucdr_init_buffer>
 8010434:	a90e      	add	r1, sp, #56	@ 0x38
 8010436:	a806      	add	r0, sp, #24
 8010438:	f003 f8aa 	bl	8013590 <uxr_serialize_OBJK_DataWriter_Binary>
 801043c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801043e:	f8cd 8000 	str.w	r8, [sp]
 8010442:	9401      	str	r4, [sp, #4]
 8010444:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010448:	60e3      	str	r3, [r4, #12]
 801044a:	4630      	mov	r0, r6
 801044c:	b29b      	uxth	r3, r3
 801044e:	f7ff fead 	bl	80101ac <uxr_common_create_entity>
 8010452:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8010456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801045a:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 801045e:	f04f 0c12 	mov.w	ip, #18
 8010462:	250a      	movs	r5, #10
 8010464:	2220      	movs	r2, #32
 8010466:	2110      	movs	r1, #16
 8010468:	2008      	movs	r0, #8
 801046a:	2702      	movs	r7, #2
 801046c:	e7cd      	b.n	801040a <uxr_buffer_create_datawriter_bin+0x76>
 801046e:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8010472:	e7d9      	b.n	8010428 <uxr_buffer_create_datawriter_bin+0x94>
 8010474:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8010478:	e7d6      	b.n	8010428 <uxr_buffer_create_datawriter_bin+0x94>
 801047a:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801047e:	e7d3      	b.n	8010428 <uxr_buffer_create_datawriter_bin+0x94>

08010480 <uxr_buffer_create_datareader_bin>:
 8010480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010484:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8010488:	ac1f      	add	r4, sp, #124	@ 0x7c
 801048a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801048e:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 8010492:	9105      	str	r1, [sp, #20]
 8010494:	4606      	mov	r6, r0
 8010496:	a9a3      	add	r1, sp, #652	@ 0x28c
 8010498:	4618      	mov	r0, r3
 801049a:	2306      	movs	r3, #6
 801049c:	7123      	strb	r3, [r4, #4]
 801049e:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 80104a2:	2703      	movs	r7, #3
 80104a4:	f000 f948 	bl	8010738 <uxr_object_id_to_raw>
 80104a8:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 80104aa:	7227      	strb	r7, [r4, #8]
 80104ac:	a90e      	add	r1, sp, #56	@ 0x38
 80104ae:	f000 f943 	bl	8010738 <uxr_object_id_to_raw>
 80104b2:	2300      	movs	r3, #0
 80104b4:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 80104b8:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 80104bc:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 80104c0:	3d00      	subs	r5, #0
 80104c2:	bf18      	it	ne
 80104c4:	2501      	movne	r5, #1
 80104c6:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 80104ca:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 80104ce:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 80104d2:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 80104d6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80104da:	2301      	movs	r3, #1
 80104dc:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 80104e0:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 80104e4:	bb8a      	cbnz	r2, 801054a <uxr_buffer_create_datareader_bin+0xca>
 80104e6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80104ea:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 80104ee:	f04f 0c13 	mov.w	ip, #19
 80104f2:	250b      	movs	r5, #11
 80104f4:	2221      	movs	r2, #33	@ 0x21
 80104f6:	2111      	movs	r1, #17
 80104f8:	2009      	movs	r0, #9
 80104fa:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 80104fe:	b923      	cbnz	r3, 801050a <uxr_buffer_create_datareader_bin+0x8a>
 8010500:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8010504:	4672      	mov	r2, lr
 8010506:	4661      	mov	r1, ip
 8010508:	4628      	mov	r0, r5
 801050a:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 801050e:	2b01      	cmp	r3, #1
 8010510:	d025      	beq.n	801055e <uxr_buffer_create_datareader_bin+0xde>
 8010512:	2b03      	cmp	r3, #3
 8010514:	d029      	beq.n	801056a <uxr_buffer_create_datareader_bin+0xea>
 8010516:	b32b      	cbz	r3, 8010564 <uxr_buffer_create_datareader_bin+0xe4>
 8010518:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801051c:	a923      	add	r1, sp, #140	@ 0x8c
 801051e:	a806      	add	r0, sp, #24
 8010520:	f7ff fdb4 	bl	801008c <ucdr_init_buffer>
 8010524:	a90e      	add	r1, sp, #56	@ 0x38
 8010526:	a806      	add	r0, sp, #24
 8010528:	f002 fff6 	bl	8013518 <uxr_serialize_OBJK_DataReader_Binary>
 801052c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801052e:	f8cd 8000 	str.w	r8, [sp]
 8010532:	9401      	str	r4, [sp, #4]
 8010534:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010538:	60e3      	str	r3, [r4, #12]
 801053a:	4630      	mov	r0, r6
 801053c:	b29b      	uxth	r3, r3
 801053e:	f7ff fe35 	bl	80101ac <uxr_common_create_entity>
 8010542:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8010546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801054a:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 801054e:	f04f 0c12 	mov.w	ip, #18
 8010552:	250a      	movs	r5, #10
 8010554:	2220      	movs	r2, #32
 8010556:	2110      	movs	r1, #16
 8010558:	2008      	movs	r0, #8
 801055a:	2702      	movs	r7, #2
 801055c:	e7cd      	b.n	80104fa <uxr_buffer_create_datareader_bin+0x7a>
 801055e:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8010562:	e7d9      	b.n	8010518 <uxr_buffer_create_datareader_bin+0x98>
 8010564:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8010568:	e7d6      	b.n	8010518 <uxr_buffer_create_datareader_bin+0x98>
 801056a:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801056e:	e7d3      	b.n	8010518 <uxr_buffer_create_datareader_bin+0x98>

08010570 <get_custom_error>:
 8010570:	4b01      	ldr	r3, [pc, #4]	@ (8010578 <get_custom_error+0x8>)
 8010572:	7818      	ldrb	r0, [r3, #0]
 8010574:	4770      	bx	lr
 8010576:	bf00      	nop
 8010578:	20010f0c 	.word	0x20010f0c

0801057c <recv_custom_msg>:
 801057c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010580:	4693      	mov	fp, r2
 8010582:	b089      	sub	sp, #36	@ 0x24
 8010584:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8010588:	9305      	str	r3, [sp, #20]
 801058a:	468a      	mov	sl, r1
 801058c:	2100      	movs	r1, #0
 801058e:	4604      	mov	r4, r0
 8010590:	f88d 101e 	strb.w	r1, [sp, #30]
 8010594:	b322      	cbz	r2, 80105e0 <recv_custom_msg+0x64>
 8010596:	f200 2902 	addw	r9, r0, #514	@ 0x202
 801059a:	f10d 081f 	add.w	r8, sp, #31
 801059e:	af05      	add	r7, sp, #20
 80105a0:	f10d 061e 	add.w	r6, sp, #30
 80105a4:	f44f 7500 	mov.w	r5, #512	@ 0x200
 80105a8:	e002      	b.n	80105b0 <recv_custom_msg+0x34>
 80105aa:	9b05      	ldr	r3, [sp, #20]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	dd0f      	ble.n	80105d0 <recv_custom_msg+0x54>
 80105b0:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 80105b4:	4623      	mov	r3, r4
 80105b6:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80105ba:	e9cd 5600 	strd	r5, r6, [sp]
 80105be:	4622      	mov	r2, r4
 80105c0:	4648      	mov	r0, r9
 80105c2:	f001 fdb5 	bl	8012130 <uxr_read_framed_msg>
 80105c6:	2800      	cmp	r0, #0
 80105c8:	d0ef      	beq.n	80105aa <recv_custom_msg+0x2e>
 80105ca:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80105ce:	b1b3      	cbz	r3, 80105fe <recv_custom_msg+0x82>
 80105d0:	4b0f      	ldr	r3, [pc, #60]	@ (8010610 <recv_custom_msg+0x94>)
 80105d2:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80105d6:	701a      	strb	r2, [r3, #0]
 80105d8:	2000      	movs	r0, #0
 80105da:	b009      	add	sp, #36	@ 0x24
 80105dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105e0:	f10d 021f 	add.w	r2, sp, #31
 80105e4:	9200      	str	r2, [sp, #0]
 80105e6:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 80105ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80105ee:	4601      	mov	r1, r0
 80105f0:	47a8      	blx	r5
 80105f2:	2800      	cmp	r0, #0
 80105f4:	d0ec      	beq.n	80105d0 <recv_custom_msg+0x54>
 80105f6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d1e8      	bne.n	80105d0 <recv_custom_msg+0x54>
 80105fe:	f8cb 0000 	str.w	r0, [fp]
 8010602:	2001      	movs	r0, #1
 8010604:	f8ca 4000 	str.w	r4, [sl]
 8010608:	b009      	add	sp, #36	@ 0x24
 801060a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801060e:	bf00      	nop
 8010610:	20010f0c 	.word	0x20010f0c

08010614 <send_custom_msg>:
 8010614:	b530      	push	{r4, r5, lr}
 8010616:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 801061a:	b087      	sub	sp, #28
 801061c:	4615      	mov	r5, r2
 801061e:	b974      	cbnz	r4, 801063e <send_custom_msg+0x2a>
 8010620:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8010624:	f10d 0317 	add.w	r3, sp, #23
 8010628:	47a0      	blx	r4
 801062a:	b108      	cbz	r0, 8010630 <send_custom_msg+0x1c>
 801062c:	42a8      	cmp	r0, r5
 801062e:	d015      	beq.n	801065c <send_custom_msg+0x48>
 8010630:	4b0c      	ldr	r3, [pc, #48]	@ (8010664 <send_custom_msg+0x50>)
 8010632:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8010636:	701a      	strb	r2, [r3, #0]
 8010638:	2000      	movs	r0, #0
 801063a:	b007      	add	sp, #28
 801063c:	bd30      	pop	{r4, r5, pc}
 801063e:	460b      	mov	r3, r1
 8010640:	2200      	movs	r2, #0
 8010642:	f10d 0117 	add.w	r1, sp, #23
 8010646:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801064a:	4602      	mov	r2, r0
 801064c:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8010650:	9500      	str	r5, [sp, #0]
 8010652:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8010656:	f001 fb73 	bl	8011d40 <uxr_write_framed_msg>
 801065a:	e7e6      	b.n	801062a <send_custom_msg+0x16>
 801065c:	2001      	movs	r0, #1
 801065e:	b007      	add	sp, #28
 8010660:	bd30      	pop	{r4, r5, pc}
 8010662:	bf00      	nop
 8010664:	20010f0c 	.word	0x20010f0c

08010668 <uxr_set_custom_transport_callbacks>:
 8010668:	b410      	push	{r4}
 801066a:	9c01      	ldr	r4, [sp, #4]
 801066c:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8010670:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8010674:	9b02      	ldr	r3, [sp, #8]
 8010676:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 801067a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801067e:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8010682:	4770      	bx	lr

08010684 <uxr_init_custom_transport>:
 8010684:	b538      	push	{r3, r4, r5, lr}
 8010686:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 801068a:	b303      	cbz	r3, 80106ce <uxr_init_custom_transport+0x4a>
 801068c:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8010690:	4604      	mov	r4, r0
 8010692:	b1e2      	cbz	r2, 80106ce <uxr_init_custom_transport+0x4a>
 8010694:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8010698:	b1ca      	cbz	r2, 80106ce <uxr_init_custom_transport+0x4a>
 801069a:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 801069e:	b1b2      	cbz	r2, 80106ce <uxr_init_custom_transport+0x4a>
 80106a0:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 80106a4:	4798      	blx	r3
 80106a6:	4605      	mov	r5, r0
 80106a8:	b188      	cbz	r0, 80106ce <uxr_init_custom_transport+0x4a>
 80106aa:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 80106ae:	b98b      	cbnz	r3, 80106d4 <uxr_init_custom_transport+0x50>
 80106b0:	490b      	ldr	r1, [pc, #44]	@ (80106e0 <uxr_init_custom_transport+0x5c>)
 80106b2:	4b0c      	ldr	r3, [pc, #48]	@ (80106e4 <uxr_init_custom_transport+0x60>)
 80106b4:	4a0c      	ldr	r2, [pc, #48]	@ (80106e8 <uxr_init_custom_transport+0x64>)
 80106b6:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 80106ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80106be:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 80106c2:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 80106c6:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 80106ca:	4628      	mov	r0, r5
 80106cc:	bd38      	pop	{r3, r4, r5, pc}
 80106ce:	2500      	movs	r5, #0
 80106d0:	4628      	mov	r0, r5
 80106d2:	bd38      	pop	{r3, r4, r5, pc}
 80106d4:	2100      	movs	r1, #0
 80106d6:	f204 2002 	addw	r0, r4, #514	@ 0x202
 80106da:	f001 fb2b 	bl	8011d34 <uxr_init_framing_io>
 80106de:	e7e7      	b.n	80106b0 <uxr_init_custom_transport+0x2c>
 80106e0:	08010615 	.word	0x08010615
 80106e4:	0801057d 	.word	0x0801057d
 80106e8:	08010571 	.word	0x08010571

080106ec <uxr_close_custom_transport>:
 80106ec:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 80106f0:	4718      	bx	r3
 80106f2:	bf00      	nop

080106f4 <uxr_object_id>:
 80106f4:	b082      	sub	sp, #8
 80106f6:	2300      	movs	r3, #0
 80106f8:	f88d 1006 	strb.w	r1, [sp, #6]
 80106fc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010700:	f360 030f 	bfi	r3, r0, #0, #16
 8010704:	f362 431f 	bfi	r3, r2, #16, #16
 8010708:	4618      	mov	r0, r3
 801070a:	b002      	add	sp, #8
 801070c:	4770      	bx	lr
 801070e:	bf00      	nop

08010710 <uxr_object_id_from_raw>:
 8010710:	7843      	ldrb	r3, [r0, #1]
 8010712:	7801      	ldrb	r1, [r0, #0]
 8010714:	b082      	sub	sp, #8
 8010716:	f003 020f 	and.w	r2, r3, #15
 801071a:	f88d 2006 	strb.w	r2, [sp, #6]
 801071e:	091b      	lsrs	r3, r3, #4
 8010720:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010724:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8010728:	2000      	movs	r0, #0
 801072a:	f363 000f 	bfi	r0, r3, #0, #16
 801072e:	f362 401f 	bfi	r0, r2, #16, #16
 8010732:	b002      	add	sp, #8
 8010734:	4770      	bx	lr
 8010736:	bf00      	nop

08010738 <uxr_object_id_to_raw>:
 8010738:	4602      	mov	r2, r0
 801073a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 801073e:	b082      	sub	sp, #8
 8010740:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8010744:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8010748:	f881 c000 	strb.w	ip, [r1]
 801074c:	7048      	strb	r0, [r1, #1]
 801074e:	b002      	add	sp, #8
 8010750:	4770      	bx	lr
 8010752:	bf00      	nop

08010754 <uxr_ping_agent_session>:
 8010754:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010758:	4617      	mov	r7, r2
 801075a:	b091      	sub	sp, #68	@ 0x44
 801075c:	2210      	movs	r2, #16
 801075e:	4606      	mov	r6, r0
 8010760:	4688      	mov	r8, r1
 8010762:	a808      	add	r0, sp, #32
 8010764:	eb0d 0102 	add.w	r1, sp, r2
 8010768:	f7ff fc90 	bl	801008c <ucdr_init_buffer>
 801076c:	4b1e      	ldr	r3, [pc, #120]	@ (80107e8 <uxr_ping_agent_session+0x94>)
 801076e:	2500      	movs	r5, #0
 8010770:	881b      	ldrh	r3, [r3, #0]
 8010772:	f8ad 300a 	strh.w	r3, [sp, #10]
 8010776:	9500      	str	r5, [sp, #0]
 8010778:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 801077c:	2402      	movs	r4, #2
 801077e:	7831      	ldrb	r1, [r6, #0]
 8010780:	f8ad 3008 	strh.w	r3, [sp, #8]
 8010784:	462a      	mov	r2, r5
 8010786:	a808      	add	r0, sp, #32
 8010788:	462b      	mov	r3, r5
 801078a:	9403      	str	r4, [sp, #12]
 801078c:	f002 fa96 	bl	8012cbc <uxr_serialize_message_header>
 8010790:	4621      	mov	r1, r4
 8010792:	462b      	mov	r3, r5
 8010794:	2208      	movs	r2, #8
 8010796:	a808      	add	r0, sp, #32
 8010798:	f002 f896 	bl	80128c8 <uxr_buffer_submessage_header>
 801079c:	a902      	add	r1, sp, #8
 801079e:	4604      	mov	r4, r0
 80107a0:	a808      	add	r0, sp, #32
 80107a2:	f003 f96b 	bl	8013a7c <uxr_serialize_GET_INFO_Payload>
 80107a6:	b104      	cbz	r4, 80107aa <uxr_ping_agent_session+0x56>
 80107a8:	b918      	cbnz	r0, 80107b2 <uxr_ping_agent_session+0x5e>
 80107aa:	2000      	movs	r0, #0
 80107ac:	b011      	add	sp, #68	@ 0x44
 80107ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80107b2:	a808      	add	r0, sp, #32
 80107b4:	f7ff fc96 	bl	80100e4 <ucdr_buffer_length>
 80107b8:	4681      	mov	r9, r0
 80107ba:	e00d      	b.n	80107d8 <uxr_ping_agent_session+0x84>
 80107bc:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80107be:	e9d3 0400 	ldrd	r0, r4, [r3]
 80107c2:	47a0      	blx	r4
 80107c4:	4641      	mov	r1, r8
 80107c6:	4604      	mov	r4, r0
 80107c8:	4630      	mov	r0, r6
 80107ca:	f000 ff4d 	bl	8011668 <uxr_run_session_until_pong>
 80107ce:	ea04 0c00 	and.w	ip, r4, r0
 80107d2:	f01c 00ff 	ands.w	r0, ip, #255	@ 0xff
 80107d6:	d1e9      	bne.n	80107ac <uxr_ping_agent_session+0x58>
 80107d8:	42af      	cmp	r7, r5
 80107da:	464a      	mov	r2, r9
 80107dc:	a904      	add	r1, sp, #16
 80107de:	f105 0501 	add.w	r5, r5, #1
 80107e2:	d1eb      	bne.n	80107bc <uxr_ping_agent_session+0x68>
 80107e4:	e7e1      	b.n	80107aa <uxr_ping_agent_session+0x56>
 80107e6:	bf00      	nop
 80107e8:	08019a5c 	.word	0x08019a5c

080107ec <uxr_ping_agent_attempts>:
 80107ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107f0:	ed2d 8b02 	vpush	{d8}
 80107f4:	b0d1      	sub	sp, #324	@ 0x144
 80107f6:	4606      	mov	r6, r0
 80107f8:	4688      	mov	r8, r1
 80107fa:	a80e      	add	r0, sp, #56	@ 0x38
 80107fc:	a90a      	add	r1, sp, #40	@ 0x28
 80107fe:	4615      	mov	r5, r2
 8010800:	2210      	movs	r2, #16
 8010802:	f7ff fc43 	bl	801008c <ucdr_init_buffer>
 8010806:	4b54      	ldr	r3, [pc, #336]	@ (8010958 <uxr_ping_agent_attempts+0x16c>)
 8010808:	881b      	ldrh	r3, [r3, #0]
 801080a:	f8ad 307a 	strh.w	r3, [sp, #122]	@ 0x7a
 801080e:	2300      	movs	r3, #0
 8010810:	2402      	movs	r4, #2
 8010812:	461a      	mov	r2, r3
 8010814:	9300      	str	r3, [sp, #0]
 8010816:	2180      	movs	r1, #128	@ 0x80
 8010818:	a80e      	add	r0, sp, #56	@ 0x38
 801081a:	f44f 6720 	mov.w	r7, #2560	@ 0xa00
 801081e:	941f      	str	r4, [sp, #124]	@ 0x7c
 8010820:	f8ad 7078 	strh.w	r7, [sp, #120]	@ 0x78
 8010824:	f002 fa4a 	bl	8012cbc <uxr_serialize_message_header>
 8010828:	4621      	mov	r1, r4
 801082a:	2300      	movs	r3, #0
 801082c:	2208      	movs	r2, #8
 801082e:	a80e      	add	r0, sp, #56	@ 0x38
 8010830:	f002 f84a 	bl	80128c8 <uxr_buffer_submessage_header>
 8010834:	a91e      	add	r1, sp, #120	@ 0x78
 8010836:	4604      	mov	r4, r0
 8010838:	a80e      	add	r0, sp, #56	@ 0x38
 801083a:	f003 f91f 	bl	8013a7c <uxr_serialize_GET_INFO_Payload>
 801083e:	b104      	cbz	r4, 8010842 <uxr_ping_agent_attempts+0x56>
 8010840:	b938      	cbnz	r0, 8010852 <uxr_ping_agent_attempts+0x66>
 8010842:	f04f 0b00 	mov.w	fp, #0
 8010846:	4658      	mov	r0, fp
 8010848:	b051      	add	sp, #324	@ 0x144
 801084a:	ecbd 8b02 	vpop	{d8}
 801084e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010852:	a80e      	add	r0, sp, #56	@ 0x38
 8010854:	f7ff fc46 	bl	80100e4 <ucdr_buffer_length>
 8010858:	1c6b      	adds	r3, r5, #1
 801085a:	ee08 0a10 	vmov	s16, r0
 801085e:	9303      	str	r3, [sp, #12]
 8010860:	f04f 0901 	mov.w	r9, #1
 8010864:	9b03      	ldr	r3, [sp, #12]
 8010866:	454b      	cmp	r3, r9
 8010868:	d0eb      	beq.n	8010842 <uxr_ping_agent_attempts+0x56>
 801086a:	e9d6 0300 	ldrd	r0, r3, [r6]
 801086e:	ee18 2a10 	vmov	r2, s16
 8010872:	a90a      	add	r1, sp, #40	@ 0x28
 8010874:	4798      	blx	r3
 8010876:	f002 f86d 	bl	8012954 <uxr_millis>
 801087a:	4645      	mov	r5, r8
 801087c:	4604      	mov	r4, r0
 801087e:	f04f 0a00 	mov.w	sl, #0
 8010882:	68b7      	ldr	r7, [r6, #8]
 8010884:	6830      	ldr	r0, [r6, #0]
 8010886:	f8cd a018 	str.w	sl, [sp, #24]
 801088a:	4643      	mov	r3, r8
 801088c:	aa07      	add	r2, sp, #28
 801088e:	a906      	add	r1, sp, #24
 8010890:	47b8      	blx	r7
 8010892:	4607      	mov	r7, r0
 8010894:	b958      	cbnz	r0, 80108ae <uxr_ping_agent_attempts+0xc2>
 8010896:	f002 f85d 	bl	8012954 <uxr_millis>
 801089a:	1b00      	subs	r0, r0, r4
 801089c:	1a2d      	subs	r5, r5, r0
 801089e:	f002 f859 	bl	8012954 <uxr_millis>
 80108a2:	2d00      	cmp	r5, #0
 80108a4:	4604      	mov	r4, r0
 80108a6:	dcec      	bgt.n	8010882 <uxr_ping_agent_attempts+0x96>
 80108a8:	f109 0901 	add.w	r9, r9, #1
 80108ac:	e7da      	b.n	8010864 <uxr_ping_agent_attempts+0x78>
 80108ae:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80108b2:	a816      	add	r0, sp, #88	@ 0x58
 80108b4:	f7ff fbea 	bl	801008c <ucdr_init_buffer>
 80108b8:	ab05      	add	r3, sp, #20
 80108ba:	f10d 0211 	add.w	r2, sp, #17
 80108be:	a916      	add	r1, sp, #88	@ 0x58
 80108c0:	a808      	add	r0, sp, #32
 80108c2:	e9cd aa08 	strd	sl, sl, [sp, #32]
 80108c6:	f001 f9bb 	bl	8011c40 <uxr_read_session_header>
 80108ca:	22c8      	movs	r2, #200	@ 0xc8
 80108cc:	2100      	movs	r1, #0
 80108ce:	a81e      	add	r0, sp, #120	@ 0x78
 80108d0:	f008 f84c 	bl	801896c <memset>
 80108d4:	a816      	add	r0, sp, #88	@ 0x58
 80108d6:	f7ff fc09 	bl	80100ec <ucdr_buffer_remaining>
 80108da:	2804      	cmp	r0, #4
 80108dc:	d814      	bhi.n	8010908 <uxr_ping_agent_attempts+0x11c>
 80108de:	f89d b12d 	ldrb.w	fp, [sp, #301]	@ 0x12d
 80108e2:	f002 f837 	bl	8012954 <uxr_millis>
 80108e6:	1b00      	subs	r0, r0, r4
 80108e8:	1a2d      	subs	r5, r5, r0
 80108ea:	f002 f833 	bl	8012954 <uxr_millis>
 80108ee:	2d00      	cmp	r5, #0
 80108f0:	4604      	mov	r4, r0
 80108f2:	dd2a      	ble.n	801094a <uxr_ping_agent_attempts+0x15e>
 80108f4:	f1bb 0f00 	cmp.w	fp, #0
 80108f8:	d0c3      	beq.n	8010882 <uxr_ping_agent_attempts+0x96>
 80108fa:	46bb      	mov	fp, r7
 80108fc:	4658      	mov	r0, fp
 80108fe:	b051      	add	sp, #324	@ 0x144
 8010900:	ecbd 8b02 	vpop	{d8}
 8010904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010908:	f10d 0316 	add.w	r3, sp, #22
 801090c:	f10d 0213 	add.w	r2, sp, #19
 8010910:	f10d 0112 	add.w	r1, sp, #18
 8010914:	a816      	add	r0, sp, #88	@ 0x58
 8010916:	f88d a012 	strb.w	sl, [sp, #18]
 801091a:	f8ad a016 	strh.w	sl, [sp, #22]
 801091e:	f88d a013 	strb.w	sl, [sp, #19]
 8010922:	f002 fa1d 	bl	8012d60 <uxr_deserialize_submessage_header>
 8010926:	a816      	add	r0, sp, #88	@ 0x58
 8010928:	f7ff fbe0 	bl	80100ec <ucdr_buffer_remaining>
 801092c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8010930:	4298      	cmp	r0, r3
 8010932:	d3d4      	bcc.n	80108de <uxr_ping_agent_attempts+0xf2>
 8010934:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8010938:	2b06      	cmp	r3, #6
 801093a:	d1d0      	bne.n	80108de <uxr_ping_agent_attempts+0xf2>
 801093c:	a916      	add	r1, sp, #88	@ 0x58
 801093e:	a81e      	add	r0, sp, #120	@ 0x78
 8010940:	f88d a12d 	strb.w	sl, [sp, #301]	@ 0x12d
 8010944:	f000 face 	bl	8010ee4 <read_submessage_info>
 8010948:	e7c9      	b.n	80108de <uxr_ping_agent_attempts+0xf2>
 801094a:	f1bb 0f00 	cmp.w	fp, #0
 801094e:	d1d4      	bne.n	80108fa <uxr_ping_agent_attempts+0x10e>
 8010950:	f109 0901 	add.w	r9, r9, #1
 8010954:	e786      	b.n	8010864 <uxr_ping_agent_attempts+0x78>
 8010956:	bf00      	nop
 8010958:	08019a5c 	.word	0x08019a5c

0801095c <uxr_buffer_request_data>:
 801095c:	b530      	push	{r4, r5, lr}
 801095e:	b095      	sub	sp, #84	@ 0x54
 8010960:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8010964:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8010966:	9303      	str	r3, [sp, #12]
 8010968:	2200      	movs	r2, #0
 801096a:	2d00      	cmp	r5, #0
 801096c:	bf14      	ite	ne
 801096e:	2101      	movne	r1, #1
 8010970:	4611      	moveq	r1, r2
 8010972:	4604      	mov	r4, r0
 8010974:	f88d 301c 	strb.w	r3, [sp, #28]
 8010978:	f88d 201d 	strb.w	r2, [sp, #29]
 801097c:	f88d 201e 	strb.w	r2, [sp, #30]
 8010980:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8010984:	d021      	beq.n	80109ca <uxr_buffer_request_data+0x6e>
 8010986:	682a      	ldr	r2, [r5, #0]
 8010988:	686b      	ldr	r3, [r5, #4]
 801098a:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 801098e:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8010992:	2210      	movs	r2, #16
 8010994:	2308      	movs	r3, #8
 8010996:	2100      	movs	r1, #0
 8010998:	e9cd 3100 	strd	r3, r1, [sp]
 801099c:	4620      	mov	r0, r4
 801099e:	9905      	ldr	r1, [sp, #20]
 80109a0:	ab0c      	add	r3, sp, #48	@ 0x30
 80109a2:	f001 f861 	bl	8011a68 <uxr_prepare_stream_to_write_submessage>
 80109a6:	b918      	cbnz	r0, 80109b0 <uxr_buffer_request_data+0x54>
 80109a8:	4604      	mov	r4, r0
 80109aa:	4620      	mov	r0, r4
 80109ac:	b015      	add	sp, #84	@ 0x54
 80109ae:	bd30      	pop	{r4, r5, pc}
 80109b0:	9904      	ldr	r1, [sp, #16]
 80109b2:	aa06      	add	r2, sp, #24
 80109b4:	4620      	mov	r0, r4
 80109b6:	f001 f98d 	bl	8011cd4 <uxr_init_base_object_request>
 80109ba:	a906      	add	r1, sp, #24
 80109bc:	4604      	mov	r4, r0
 80109be:	a80c      	add	r0, sp, #48	@ 0x30
 80109c0:	f003 f92e 	bl	8013c20 <uxr_serialize_READ_DATA_Payload>
 80109c4:	4620      	mov	r0, r4
 80109c6:	b015      	add	sp, #84	@ 0x54
 80109c8:	bd30      	pop	{r4, r5, pc}
 80109ca:	2208      	movs	r2, #8
 80109cc:	e7e2      	b.n	8010994 <uxr_buffer_request_data+0x38>
 80109ce:	bf00      	nop

080109d0 <uxr_buffer_cancel_data>:
 80109d0:	b510      	push	{r4, lr}
 80109d2:	b094      	sub	sp, #80	@ 0x50
 80109d4:	2300      	movs	r3, #0
 80109d6:	9202      	str	r2, [sp, #8]
 80109d8:	9205      	str	r2, [sp, #20]
 80109da:	9301      	str	r3, [sp, #4]
 80109dc:	2201      	movs	r2, #1
 80109de:	f8ad 301c 	strh.w	r3, [sp, #28]
 80109e2:	f88d 301e 	strb.w	r3, [sp, #30]
 80109e6:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 80109ea:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 80109ee:	2308      	movs	r3, #8
 80109f0:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 80109f4:	9300      	str	r3, [sp, #0]
 80109f6:	2210      	movs	r2, #16
 80109f8:	ab0c      	add	r3, sp, #48	@ 0x30
 80109fa:	4604      	mov	r4, r0
 80109fc:	9103      	str	r1, [sp, #12]
 80109fe:	f001 f833 	bl	8011a68 <uxr_prepare_stream_to_write_submessage>
 8010a02:	b918      	cbnz	r0, 8010a0c <uxr_buffer_cancel_data+0x3c>
 8010a04:	4604      	mov	r4, r0
 8010a06:	4620      	mov	r0, r4
 8010a08:	b014      	add	sp, #80	@ 0x50
 8010a0a:	bd10      	pop	{r4, pc}
 8010a0c:	9905      	ldr	r1, [sp, #20]
 8010a0e:	aa06      	add	r2, sp, #24
 8010a10:	4620      	mov	r0, r4
 8010a12:	f001 f95f 	bl	8011cd4 <uxr_init_base_object_request>
 8010a16:	a906      	add	r1, sp, #24
 8010a18:	4604      	mov	r4, r0
 8010a1a:	a80c      	add	r0, sp, #48	@ 0x30
 8010a1c:	f003 f900 	bl	8013c20 <uxr_serialize_READ_DATA_Payload>
 8010a20:	4620      	mov	r0, r4
 8010a22:	b014      	add	sp, #80	@ 0x50
 8010a24:	bd10      	pop	{r4, pc}
 8010a26:	bf00      	nop

08010a28 <read_submessage_format>:
 8010a28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010a2c:	b095      	sub	sp, #84	@ 0x54
 8010a2e:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 8010a32:	b113      	cbz	r3, 8010a3a <read_submessage_format+0x12>
 8010a34:	b015      	add	sp, #84	@ 0x54
 8010a36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a3a:	460c      	mov	r4, r1
 8010a3c:	4615      	mov	r5, r2
 8010a3e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8010a42:	4607      	mov	r7, r0
 8010a44:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8010a46:	9004      	str	r0, [sp, #16]
 8010a48:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8010a4a:	9005      	str	r0, [sp, #20]
 8010a4c:	1a52      	subs	r2, r2, r1
 8010a4e:	a80c      	add	r0, sp, #48	@ 0x30
 8010a50:	4699      	mov	r9, r3
 8010a52:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8010a56:	f7ff fb19 	bl	801008c <ucdr_init_buffer>
 8010a5a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010a5e:	a80c      	add	r0, sp, #48	@ 0x30
 8010a60:	f7ff fae8 	bl	8010034 <ucdr_set_on_full_buffer_callback>
 8010a64:	69e2      	ldr	r2, [r4, #28]
 8010a66:	b19a      	cbz	r2, 8010a90 <read_submessage_format+0x68>
 8010a68:	f1b8 0f07 	cmp.w	r8, #7
 8010a6c:	f882 9014 	strb.w	r9, [r2, #20]
 8010a70:	d040      	beq.n	8010af4 <read_submessage_format+0xcc>
 8010a72:	f1b8 0f08 	cmp.w	r8, #8
 8010a76:	d02e      	beq.n	8010ad6 <read_submessage_format+0xae>
 8010a78:	f1b8 0f06 	cmp.w	r8, #6
 8010a7c:	d011      	beq.n	8010aa2 <read_submessage_format+0x7a>
 8010a7e:	2301      	movs	r3, #1
 8010a80:	7513      	strb	r3, [r2, #20]
 8010a82:	4629      	mov	r1, r5
 8010a84:	4620      	mov	r0, r4
 8010a86:	f7ff fb51 	bl	801012c <ucdr_advance_buffer>
 8010a8a:	b015      	add	sp, #84	@ 0x54
 8010a8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a90:	f1b8 0f07 	cmp.w	r8, #7
 8010a94:	d02e      	beq.n	8010af4 <read_submessage_format+0xcc>
 8010a96:	f1b8 0f08 	cmp.w	r8, #8
 8010a9a:	d01c      	beq.n	8010ad6 <read_submessage_format+0xae>
 8010a9c:	f1b8 0f06 	cmp.w	r8, #6
 8010aa0:	d1ef      	bne.n	8010a82 <read_submessage_format+0x5a>
 8010aa2:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 8010aa6:	f1b8 0f00 	cmp.w	r8, #0
 8010aaa:	d011      	beq.n	8010ad0 <read_submessage_format+0xa8>
 8010aac:	ab0c      	add	r3, sp, #48	@ 0x30
 8010aae:	e9cd 3500 	strd	r3, r5, [sp]
 8010ab2:	2306      	movs	r3, #6
 8010ab4:	f88d 3016 	strb.w	r3, [sp, #22]
 8010ab8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010abc:	9302      	str	r3, [sp, #8]
 8010abe:	4632      	mov	r2, r6
 8010ac0:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8010ac4:	4638      	mov	r0, r7
 8010ac6:	47c0      	blx	r8
 8010ac8:	2301      	movs	r3, #1
 8010aca:	69e2      	ldr	r2, [r4, #28]
 8010acc:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8010ad0:	2a00      	cmp	r2, #0
 8010ad2:	d1d4      	bne.n	8010a7e <read_submessage_format+0x56>
 8010ad4:	e7d5      	b.n	8010a82 <read_submessage_format+0x5a>
 8010ad6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d0f8      	beq.n	8010ad0 <read_submessage_format+0xa8>
 8010ade:	a906      	add	r1, sp, #24
 8010ae0:	a80c      	add	r0, sp, #48	@ 0x30
 8010ae2:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8010ae6:	f003 f961 	bl	8013dac <uxr_deserialize_SampleIdentity>
 8010aea:	b9a0      	cbnz	r0, 8010b16 <read_submessage_format+0xee>
 8010aec:	69e2      	ldr	r2, [r4, #28]
 8010aee:	2a00      	cmp	r2, #0
 8010af0:	d1c5      	bne.n	8010a7e <read_submessage_format+0x56>
 8010af2:	e7c6      	b.n	8010a82 <read_submessage_format+0x5a>
 8010af4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010af8:	b13b      	cbz	r3, 8010b0a <read_submessage_format+0xe2>
 8010afa:	a906      	add	r1, sp, #24
 8010afc:	a80c      	add	r0, sp, #48	@ 0x30
 8010afe:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8010b02:	f002 fe13 	bl	801372c <uxr_deserialize_BaseObjectRequest>
 8010b06:	bb60      	cbnz	r0, 8010b62 <read_submessage_format+0x13a>
 8010b08:	69e2      	ldr	r2, [r4, #28]
 8010b0a:	68a3      	ldr	r3, [r4, #8]
 8010b0c:	442b      	add	r3, r5
 8010b0e:	60a3      	str	r3, [r4, #8]
 8010b10:	2a00      	cmp	r2, #0
 8010b12:	d1b4      	bne.n	8010a7e <read_submessage_format+0x56>
 8010b14:	e7b5      	b.n	8010a82 <read_submessage_format+0x5a>
 8010b16:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8010b1a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010b1c:	1a52      	subs	r2, r2, r1
 8010b1e:	eba8 0803 	sub.w	r8, r8, r3
 8010b22:	a80c      	add	r0, sp, #48	@ 0x30
 8010b24:	f7ff fab2 	bl	801008c <ucdr_init_buffer>
 8010b28:	44a8      	add	r8, r5
 8010b2a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010b2e:	a80c      	add	r0, sp, #48	@ 0x30
 8010b30:	f7ff fa80 	bl	8010034 <ucdr_set_on_full_buffer_callback>
 8010b34:	fa1f f888 	uxth.w	r8, r8
 8010b38:	ab0c      	add	r3, sp, #48	@ 0x30
 8010b3a:	9300      	str	r3, [sp, #0]
 8010b3c:	f8cd 8004 	str.w	r8, [sp, #4]
 8010b40:	2108      	movs	r1, #8
 8010b42:	f88d 1016 	strb.w	r1, [sp, #22]
 8010b46:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8010b4a:	9102      	str	r1, [sp, #8]
 8010b4c:	ab06      	add	r3, sp, #24
 8010b4e:	4632      	mov	r2, r6
 8010b50:	9905      	ldr	r1, [sp, #20]
 8010b52:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 8010b56:	4638      	mov	r0, r7
 8010b58:	47b0      	blx	r6
 8010b5a:	2301      	movs	r3, #1
 8010b5c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8010b60:	e7c4      	b.n	8010aec <read_submessage_format+0xc4>
 8010b62:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8010b66:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010b68:	1a52      	subs	r2, r2, r1
 8010b6a:	a80c      	add	r0, sp, #48	@ 0x30
 8010b6c:	eba8 0803 	sub.w	r8, r8, r3
 8010b70:	f7ff fa8c 	bl	801008c <ucdr_init_buffer>
 8010b74:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010b78:	a80c      	add	r0, sp, #48	@ 0x30
 8010b7a:	f7ff fa5b 	bl	8010034 <ucdr_set_on_full_buffer_callback>
 8010b7e:	ab0c      	add	r3, sp, #48	@ 0x30
 8010b80:	9300      	str	r3, [sp, #0]
 8010b82:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8010b86:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8010b8a:	44a8      	add	r8, r5
 8010b8c:	fa1f f888 	uxth.w	r8, r8
 8010b90:	f8cd 8004 	str.w	r8, [sp, #4]
 8010b94:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8010b98:	2107      	movs	r1, #7
 8010b9a:	f88d 1016 	strb.w	r1, [sp, #22]
 8010b9e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8010ba2:	9102      	str	r1, [sp, #8]
 8010ba4:	4632      	mov	r2, r6
 8010ba6:	b29b      	uxth	r3, r3
 8010ba8:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 8010bac:	9905      	ldr	r1, [sp, #20]
 8010bae:	4638      	mov	r0, r7
 8010bb0:	47b0      	blx	r6
 8010bb2:	2301      	movs	r3, #1
 8010bb4:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8010bb8:	e7a6      	b.n	8010b08 <read_submessage_format+0xe0>
 8010bba:	bf00      	nop

08010bbc <on_get_fragmentation_info>:
 8010bbc:	b500      	push	{lr}
 8010bbe:	b08b      	sub	sp, #44	@ 0x2c
 8010bc0:	4601      	mov	r1, r0
 8010bc2:	2204      	movs	r2, #4
 8010bc4:	a802      	add	r0, sp, #8
 8010bc6:	f7ff fa61 	bl	801008c <ucdr_init_buffer>
 8010bca:	f10d 0305 	add.w	r3, sp, #5
 8010bce:	f10d 0206 	add.w	r2, sp, #6
 8010bd2:	a901      	add	r1, sp, #4
 8010bd4:	a802      	add	r0, sp, #8
 8010bd6:	f001 fe91 	bl	80128fc <uxr_read_submessage_header>
 8010bda:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010bde:	2b0d      	cmp	r3, #13
 8010be0:	d003      	beq.n	8010bea <on_get_fragmentation_info+0x2e>
 8010be2:	2000      	movs	r0, #0
 8010be4:	b00b      	add	sp, #44	@ 0x2c
 8010be6:	f85d fb04 	ldr.w	pc, [sp], #4
 8010bea:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010bee:	f013 0f02 	tst.w	r3, #2
 8010bf2:	bf14      	ite	ne
 8010bf4:	2002      	movne	r0, #2
 8010bf6:	2001      	moveq	r0, #1
 8010bf8:	b00b      	add	sp, #44	@ 0x2c
 8010bfa:	f85d fb04 	ldr.w	pc, [sp], #4
 8010bfe:	bf00      	nop

08010c00 <read_submessage_get_info>:
 8010c00:	b570      	push	{r4, r5, r6, lr}
 8010c02:	2500      	movs	r5, #0
 8010c04:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8010c08:	4604      	mov	r4, r0
 8010c0a:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8010c0e:	460e      	mov	r6, r1
 8010c10:	a810      	add	r0, sp, #64	@ 0x40
 8010c12:	4629      	mov	r1, r5
 8010c14:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8010c18:	f007 fea8 	bl	801896c <memset>
 8010c1c:	a903      	add	r1, sp, #12
 8010c1e:	4630      	mov	r0, r6
 8010c20:	f002 ff40 	bl	8013aa4 <uxr_deserialize_GET_INFO_Payload>
 8010c24:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8010c28:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010c2c:	4620      	mov	r0, r4
 8010c2e:	f001 f849 	bl	8011cc4 <uxr_session_header_offset>
 8010c32:	462b      	mov	r3, r5
 8010c34:	9000      	str	r0, [sp, #0]
 8010c36:	220c      	movs	r2, #12
 8010c38:	a905      	add	r1, sp, #20
 8010c3a:	a808      	add	r0, sp, #32
 8010c3c:	f7ff fa14 	bl	8010068 <ucdr_init_buffer_origin_offset>
 8010c40:	a910      	add	r1, sp, #64	@ 0x40
 8010c42:	a808      	add	r0, sp, #32
 8010c44:	f002 ffa0 	bl	8013b88 <uxr_serialize_INFO_Payload>
 8010c48:	9b08      	ldr	r3, [sp, #32]
 8010c4a:	462a      	mov	r2, r5
 8010c4c:	4629      	mov	r1, r5
 8010c4e:	4620      	mov	r0, r4
 8010c50:	f000 ffe2 	bl	8011c18 <uxr_stamp_session_header>
 8010c54:	a808      	add	r0, sp, #32
 8010c56:	f7ff fa45 	bl	80100e4 <ucdr_buffer_length>
 8010c5a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010c5c:	4602      	mov	r2, r0
 8010c5e:	a905      	add	r1, sp, #20
 8010c60:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010c64:	47a0      	blx	r4
 8010c66:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8010c6a:	bd70      	pop	{r4, r5, r6, pc}

08010c6c <write_submessage_acknack.isra.0>:
 8010c6c:	b570      	push	{r4, r5, r6, lr}
 8010c6e:	b092      	sub	sp, #72	@ 0x48
 8010c70:	4605      	mov	r5, r0
 8010c72:	460e      	mov	r6, r1
 8010c74:	4614      	mov	r4, r2
 8010c76:	f001 f825 	bl	8011cc4 <uxr_session_header_offset>
 8010c7a:	a905      	add	r1, sp, #20
 8010c7c:	9000      	str	r0, [sp, #0]
 8010c7e:	2300      	movs	r3, #0
 8010c80:	a80a      	add	r0, sp, #40	@ 0x28
 8010c82:	2211      	movs	r2, #17
 8010c84:	f7ff f9f0 	bl	8010068 <ucdr_init_buffer_origin_offset>
 8010c88:	2218      	movs	r2, #24
 8010c8a:	fb02 5404 	mla	r4, r2, r4, r5
 8010c8e:	2300      	movs	r3, #0
 8010c90:	2205      	movs	r2, #5
 8010c92:	3450      	adds	r4, #80	@ 0x50
 8010c94:	210a      	movs	r1, #10
 8010c96:	a80a      	add	r0, sp, #40	@ 0x28
 8010c98:	f001 fe16 	bl	80128c8 <uxr_buffer_submessage_header>
 8010c9c:	a903      	add	r1, sp, #12
 8010c9e:	4620      	mov	r0, r4
 8010ca0:	f006 fc44 	bl	801752c <uxr_compute_acknack>
 8010ca4:	ba40      	rev16	r0, r0
 8010ca6:	f8ad 000e 	strh.w	r0, [sp, #14]
 8010caa:	a903      	add	r1, sp, #12
 8010cac:	a80a      	add	r0, sp, #40	@ 0x28
 8010cae:	f88d 6010 	strb.w	r6, [sp, #16]
 8010cb2:	f002 ffd9 	bl	8013c68 <uxr_serialize_ACKNACK_Payload>
 8010cb6:	2200      	movs	r2, #0
 8010cb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010cba:	4611      	mov	r1, r2
 8010cbc:	4628      	mov	r0, r5
 8010cbe:	f000 ffab 	bl	8011c18 <uxr_stamp_session_header>
 8010cc2:	a80a      	add	r0, sp, #40	@ 0x28
 8010cc4:	f7ff fa0e 	bl	80100e4 <ucdr_buffer_length>
 8010cc8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8010cca:	4602      	mov	r2, r0
 8010ccc:	a905      	add	r1, sp, #20
 8010cce:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010cd2:	47a0      	blx	r4
 8010cd4:	b012      	add	sp, #72	@ 0x48
 8010cd6:	bd70      	pop	{r4, r5, r6, pc}

08010cd8 <uxr_init_session>:
 8010cd8:	b510      	push	{r4, lr}
 8010cda:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8010d10 <uxr_init_session+0x38>
 8010cde:	2300      	movs	r3, #0
 8010ce0:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8010ce4:	4604      	mov	r4, r0
 8010ce6:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 8010cea:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 8010cee:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8010cf2:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8010cf6:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 8010cfa:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8010cfe:	2181      	movs	r1, #129	@ 0x81
 8010d00:	f000 fef6 	bl	8011af0 <uxr_init_session_info>
 8010d04:	f104 0008 	add.w	r0, r4, #8
 8010d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d0c:	f001 bcf8 	b.w	8012700 <uxr_init_stream_storage>
	...

08010d18 <uxr_set_status_callback>:
 8010d18:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8010d1c:	4770      	bx	lr
 8010d1e:	bf00      	nop

08010d20 <uxr_set_topic_callback>:
 8010d20:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8010d24:	4770      	bx	lr
 8010d26:	bf00      	nop

08010d28 <uxr_set_request_callback>:
 8010d28:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8010d2c:	4770      	bx	lr
 8010d2e:	bf00      	nop

08010d30 <uxr_set_reply_callback>:
 8010d30:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8010d34:	4770      	bx	lr
 8010d36:	bf00      	nop

08010d38 <uxr_create_output_best_effort_stream>:
 8010d38:	b510      	push	{r4, lr}
 8010d3a:	b084      	sub	sp, #16
 8010d3c:	e9cd 2100 	strd	r2, r1, [sp]
 8010d40:	4604      	mov	r4, r0
 8010d42:	f000 ffbf 	bl	8011cc4 <uxr_session_header_offset>
 8010d46:	e9dd 2100 	ldrd	r2, r1, [sp]
 8010d4a:	4603      	mov	r3, r0
 8010d4c:	f104 0008 	add.w	r0, r4, #8
 8010d50:	b004      	add	sp, #16
 8010d52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d56:	f001 bd1d 	b.w	8012794 <uxr_add_output_best_effort_buffer>
 8010d5a:	bf00      	nop

08010d5c <uxr_create_output_reliable_stream>:
 8010d5c:	b510      	push	{r4, lr}
 8010d5e:	b088      	sub	sp, #32
 8010d60:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8010d64:	4604      	mov	r4, r0
 8010d66:	9303      	str	r3, [sp, #12]
 8010d68:	f000 ffac 	bl	8011cc4 <uxr_session_header_offset>
 8010d6c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8010d70:	9000      	str	r0, [sp, #0]
 8010d72:	9905      	ldr	r1, [sp, #20]
 8010d74:	f104 0008 	add.w	r0, r4, #8
 8010d78:	f001 fd20 	bl	80127bc <uxr_add_output_reliable_buffer>
 8010d7c:	2200      	movs	r2, #0
 8010d7e:	b2c3      	uxtb	r3, r0
 8010d80:	f363 0207 	bfi	r2, r3, #0, #8
 8010d84:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010d88:	f363 220f 	bfi	r2, r3, #8, #8
 8010d8c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010d90:	f363 4217 	bfi	r2, r3, #16, #8
 8010d94:	0e03      	lsrs	r3, r0, #24
 8010d96:	f363 621f 	bfi	r2, r3, #24, #8
 8010d9a:	4610      	mov	r0, r2
 8010d9c:	b008      	add	sp, #32
 8010d9e:	bd10      	pop	{r4, pc}

08010da0 <uxr_create_input_best_effort_stream>:
 8010da0:	b082      	sub	sp, #8
 8010da2:	3008      	adds	r0, #8
 8010da4:	b002      	add	sp, #8
 8010da6:	f001 bd23 	b.w	80127f0 <uxr_add_input_best_effort_buffer>
 8010daa:	bf00      	nop

08010dac <uxr_create_input_reliable_stream>:
 8010dac:	b510      	push	{r4, lr}
 8010dae:	b084      	sub	sp, #16
 8010db0:	4c0b      	ldr	r4, [pc, #44]	@ (8010de0 <uxr_create_input_reliable_stream+0x34>)
 8010db2:	9400      	str	r4, [sp, #0]
 8010db4:	3008      	adds	r0, #8
 8010db6:	f001 fd31 	bl	801281c <uxr_add_input_reliable_buffer>
 8010dba:	2200      	movs	r2, #0
 8010dbc:	b2c3      	uxtb	r3, r0
 8010dbe:	f363 0207 	bfi	r2, r3, #0, #8
 8010dc2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010dc6:	f363 220f 	bfi	r2, r3, #8, #8
 8010dca:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010dce:	f363 4217 	bfi	r2, r3, #16, #8
 8010dd2:	0e03      	lsrs	r3, r0, #24
 8010dd4:	f363 621f 	bfi	r2, r3, #24, #8
 8010dd8:	4610      	mov	r0, r2
 8010dda:	b004      	add	sp, #16
 8010ddc:	bd10      	pop	{r4, pc}
 8010dde:	bf00      	nop
 8010de0:	08010bbd 	.word	0x08010bbd

08010de4 <uxr_epoch_nanos>:
 8010de4:	b510      	push	{r4, lr}
 8010de6:	4604      	mov	r4, r0
 8010de8:	f001 fdce 	bl	8012988 <uxr_nanos>
 8010dec:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8010df0:	1ac0      	subs	r0, r0, r3
 8010df2:	eb61 0102 	sbc.w	r1, r1, r2
 8010df6:	bd10      	pop	{r4, pc}

08010df8 <uxr_flash_output_streams>:
 8010df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010dfc:	7e03      	ldrb	r3, [r0, #24]
 8010dfe:	b084      	sub	sp, #16
 8010e00:	4604      	mov	r4, r0
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d035      	beq.n	8010e72 <uxr_flash_output_streams+0x7a>
 8010e06:	f04f 0900 	mov.w	r9, #0
 8010e0a:	4648      	mov	r0, r9
 8010e0c:	f10d 0802 	add.w	r8, sp, #2
 8010e10:	af03      	add	r7, sp, #12
 8010e12:	ae02      	add	r6, sp, #8
 8010e14:	e006      	b.n	8010e24 <uxr_flash_output_streams+0x2c>
 8010e16:	7e23      	ldrb	r3, [r4, #24]
 8010e18:	f109 0901 	add.w	r9, r9, #1
 8010e1c:	fa5f f089 	uxtb.w	r0, r9
 8010e20:	4283      	cmp	r3, r0
 8010e22:	d926      	bls.n	8010e72 <uxr_flash_output_streams+0x7a>
 8010e24:	2201      	movs	r2, #1
 8010e26:	4611      	mov	r1, r2
 8010e28:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8010e2c:	f001 fc14 	bl	8012658 <uxr_stream_id>
 8010e30:	3508      	adds	r5, #8
 8010e32:	4684      	mov	ip, r0
 8010e34:	4643      	mov	r3, r8
 8010e36:	463a      	mov	r2, r7
 8010e38:	4631      	mov	r1, r6
 8010e3a:	4628      	mov	r0, r5
 8010e3c:	f8cd c004 	str.w	ip, [sp, #4]
 8010e40:	f006 fbfa 	bl	8017638 <uxr_prepare_best_effort_buffer_to_send>
 8010e44:	2800      	cmp	r0, #0
 8010e46:	d0e6      	beq.n	8010e16 <uxr_flash_output_streams+0x1e>
 8010e48:	9b02      	ldr	r3, [sp, #8]
 8010e4a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010e4e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010e52:	4620      	mov	r0, r4
 8010e54:	f000 fee0 	bl	8011c18 <uxr_stamp_session_header>
 8010e58:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010e5a:	9a03      	ldr	r2, [sp, #12]
 8010e5c:	685d      	ldr	r5, [r3, #4]
 8010e5e:	6818      	ldr	r0, [r3, #0]
 8010e60:	9902      	ldr	r1, [sp, #8]
 8010e62:	47a8      	blx	r5
 8010e64:	f109 0901 	add.w	r9, r9, #1
 8010e68:	7e23      	ldrb	r3, [r4, #24]
 8010e6a:	fa5f f089 	uxtb.w	r0, r9
 8010e6e:	4283      	cmp	r3, r0
 8010e70:	d8d8      	bhi.n	8010e24 <uxr_flash_output_streams+0x2c>
 8010e72:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8010e76:	b38b      	cbz	r3, 8010edc <uxr_flash_output_streams+0xe4>
 8010e78:	f04f 0900 	mov.w	r9, #0
 8010e7c:	f10d 0802 	add.w	r8, sp, #2
 8010e80:	af03      	add	r7, sp, #12
 8010e82:	ae02      	add	r6, sp, #8
 8010e84:	4648      	mov	r0, r9
 8010e86:	2201      	movs	r2, #1
 8010e88:	2102      	movs	r1, #2
 8010e8a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8010e8e:	f001 fbe3 	bl	8012658 <uxr_stream_id>
 8010e92:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8010e96:	3520      	adds	r5, #32
 8010e98:	9001      	str	r0, [sp, #4]
 8010e9a:	e00d      	b.n	8010eb8 <uxr_flash_output_streams+0xc0>
 8010e9c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010ea0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010ea4:	9b02      	ldr	r3, [sp, #8]
 8010ea6:	f000 feb7 	bl	8011c18 <uxr_stamp_session_header>
 8010eaa:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010eac:	9a03      	ldr	r2, [sp, #12]
 8010eae:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8010eb2:	9902      	ldr	r1, [sp, #8]
 8010eb4:	6818      	ldr	r0, [r3, #0]
 8010eb6:	47d0      	blx	sl
 8010eb8:	4643      	mov	r3, r8
 8010eba:	463a      	mov	r2, r7
 8010ebc:	4631      	mov	r1, r6
 8010ebe:	4628      	mov	r0, r5
 8010ec0:	f006 fdd8 	bl	8017a74 <uxr_prepare_next_reliable_buffer_to_send>
 8010ec4:	4603      	mov	r3, r0
 8010ec6:	4620      	mov	r0, r4
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d1e7      	bne.n	8010e9c <uxr_flash_output_streams+0xa4>
 8010ecc:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8010ed0:	f109 0901 	add.w	r9, r9, #1
 8010ed4:	fa5f f089 	uxtb.w	r0, r9
 8010ed8:	4283      	cmp	r3, r0
 8010eda:	d8d4      	bhi.n	8010e86 <uxr_flash_output_streams+0x8e>
 8010edc:	b004      	add	sp, #16
 8010ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ee2:	bf00      	nop

08010ee4 <read_submessage_info>:
 8010ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ee8:	460d      	mov	r5, r1
 8010eea:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8010eee:	4669      	mov	r1, sp
 8010ef0:	4607      	mov	r7, r0
 8010ef2:	4628      	mov	r0, r5
 8010ef4:	f002 fcd0 	bl	8013898 <uxr_deserialize_BaseObjectReply>
 8010ef8:	a902      	add	r1, sp, #8
 8010efa:	4604      	mov	r4, r0
 8010efc:	4628      	mov	r0, r5
 8010efe:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8010f02:	f7fe f8ff 	bl	800f104 <ucdr_deserialize_bool>
 8010f06:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010f0a:	4004      	ands	r4, r0
 8010f0c:	b2e4      	uxtb	r4, r4
 8010f0e:	b95b      	cbnz	r3, 8010f28 <read_submessage_info+0x44>
 8010f10:	a987      	add	r1, sp, #540	@ 0x21c
 8010f12:	4628      	mov	r0, r5
 8010f14:	f7fe f8f6 	bl	800f104 <ucdr_deserialize_bool>
 8010f18:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8010f1c:	4606      	mov	r6, r0
 8010f1e:	b94b      	cbnz	r3, 8010f34 <read_submessage_info+0x50>
 8010f20:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8010f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f28:	a903      	add	r1, sp, #12
 8010f2a:	4628      	mov	r0, r5
 8010f2c:	f002 fb5c 	bl	80135e8 <uxr_deserialize_ObjectVariant>
 8010f30:	4004      	ands	r4, r0
 8010f32:	e7ed      	b.n	8010f10 <read_submessage_info+0x2c>
 8010f34:	a988      	add	r1, sp, #544	@ 0x220
 8010f36:	4628      	mov	r0, r5
 8010f38:	f7fe f912 	bl	800f160 <ucdr_deserialize_uint8_t>
 8010f3c:	4234      	tst	r4, r6
 8010f3e:	d0ef      	beq.n	8010f20 <read_submessage_info+0x3c>
 8010f40:	2800      	cmp	r0, #0
 8010f42:	d0ed      	beq.n	8010f20 <read_submessage_info+0x3c>
 8010f44:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8010f48:	2b0d      	cmp	r3, #13
 8010f4a:	d1e9      	bne.n	8010f20 <read_submessage_info+0x3c>
 8010f4c:	a98a      	add	r1, sp, #552	@ 0x228
 8010f4e:	4628      	mov	r0, r5
 8010f50:	f7fe feac 	bl	800fcac <ucdr_deserialize_int16_t>
 8010f54:	b140      	cbz	r0, 8010f68 <read_submessage_info+0x84>
 8010f56:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	dd07      	ble.n	8010f6e <read_submessage_info+0x8a>
 8010f5e:	f1b8 0f00 	cmp.w	r8, #0
 8010f62:	bf14      	ite	ne
 8010f64:	2001      	movne	r0, #1
 8010f66:	2002      	moveq	r0, #2
 8010f68:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 8010f6c:	e7d8      	b.n	8010f20 <read_submessage_info+0x3c>
 8010f6e:	2000      	movs	r0, #0
 8010f70:	e7fa      	b.n	8010f68 <read_submessage_info+0x84>
 8010f72:	bf00      	nop

08010f74 <read_submessage_list>:
 8010f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f78:	b097      	sub	sp, #92	@ 0x5c
 8010f7a:	4ec1      	ldr	r6, [pc, #772]	@ (8011280 <read_submessage_list+0x30c>)
 8010f7c:	9209      	str	r2, [sp, #36]	@ 0x24
 8010f7e:	4604      	mov	r4, r0
 8010f80:	460d      	mov	r5, r1
 8010f82:	f04f 0801 	mov.w	r8, #1
 8010f86:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8010f8a:	aa0c      	add	r2, sp, #48	@ 0x30
 8010f8c:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8010f90:	4628      	mov	r0, r5
 8010f92:	f001 fcb3 	bl	80128fc <uxr_read_submessage_header>
 8010f96:	2800      	cmp	r0, #0
 8010f98:	f000 813e 	beq.w	8011218 <read_submessage_list+0x2a4>
 8010f9c:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8010fa0:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8010fa4:	3b02      	subs	r3, #2
 8010fa6:	2b0d      	cmp	r3, #13
 8010fa8:	d8ed      	bhi.n	8010f86 <read_submessage_list+0x12>
 8010faa:	a101      	add	r1, pc, #4	@ (adr r1, 8010fb0 <read_submessage_list+0x3c>)
 8010fac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010fb0:	0801120f 	.word	0x0801120f
 8010fb4:	08010f87 	.word	0x08010f87
 8010fb8:	080111ff 	.word	0x080111ff
 8010fbc:	0801119d 	.word	0x0801119d
 8010fc0:	08011193 	.word	0x08011193
 8010fc4:	08010f87 	.word	0x08010f87
 8010fc8:	08010f87 	.word	0x08010f87
 8010fcc:	080110f3 	.word	0x080110f3
 8010fd0:	08011083 	.word	0x08011083
 8010fd4:	08011043 	.word	0x08011043
 8010fd8:	08010f87 	.word	0x08010f87
 8010fdc:	08010f87 	.word	0x08010f87
 8010fe0:	08010f87 	.word	0x08010f87
 8010fe4:	08010fe9 	.word	0x08010fe9
 8010fe8:	a910      	add	r1, sp, #64	@ 0x40
 8010fea:	4628      	mov	r0, r5
 8010fec:	f002 fe8c 	bl	8013d08 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8010ff0:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 8010ff4:	f1b9 0f00 	cmp.w	r9, #0
 8010ff8:	f000 8116 	beq.w	8011228 <read_submessage_list+0x2b4>
 8010ffc:	f001 fcc4 	bl	8012988 <uxr_nanos>
 8011000:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8011002:	4602      	mov	r2, r0
 8011004:	460b      	mov	r3, r1
 8011006:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8011008:	2100      	movs	r1, #0
 801100a:	468c      	mov	ip, r1
 801100c:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8011010:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8011014:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8011016:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8011018:	468c      	mov	ip, r1
 801101a:	fbc0 7c06 	smlal	r7, ip, r0, r6
 801101e:	46e2      	mov	sl, ip
 8011020:	46bc      	mov	ip, r7
 8011022:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 8011026:	fbc0 7106 	smlal	r7, r1, r0, r6
 801102a:	e9cd ca02 	strd	ip, sl, [sp, #8]
 801102e:	e9cd 7100 	strd	r7, r1, [sp]
 8011032:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8011036:	9106      	str	r1, [sp, #24]
 8011038:	4620      	mov	r0, r4
 801103a:	47c8      	blx	r9
 801103c:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 8011040:	e7a1      	b.n	8010f86 <read_submessage_list+0x12>
 8011042:	a910      	add	r1, sp, #64	@ 0x40
 8011044:	4628      	mov	r0, r5
 8011046:	f002 fe4d 	bl	8013ce4 <uxr_deserialize_HEARTBEAT_Payload>
 801104a:	2100      	movs	r1, #0
 801104c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8011050:	f001 fb2c 	bl	80126ac <uxr_stream_id_from_raw>
 8011054:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8011058:	900f      	str	r0, [sp, #60]	@ 0x3c
 801105a:	4639      	mov	r1, r7
 801105c:	f104 0008 	add.w	r0, r4, #8
 8011060:	f001 fc12 	bl	8012888 <uxr_get_input_reliable_stream>
 8011064:	2800      	cmp	r0, #0
 8011066:	d08e      	beq.n	8010f86 <read_submessage_list+0x12>
 8011068:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 801106c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8011070:	f006 fa50 	bl	8017514 <uxr_process_heartbeat>
 8011074:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8011078:	463a      	mov	r2, r7
 801107a:	4620      	mov	r0, r4
 801107c:	f7ff fdf6 	bl	8010c6c <write_submessage_acknack.isra.0>
 8011080:	e781      	b.n	8010f86 <read_submessage_list+0x12>
 8011082:	a910      	add	r1, sp, #64	@ 0x40
 8011084:	4628      	mov	r0, r5
 8011086:	f002 fe05 	bl	8013c94 <uxr_deserialize_ACKNACK_Payload>
 801108a:	2100      	movs	r1, #0
 801108c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8011090:	f001 fb0c 	bl	80126ac <uxr_stream_id_from_raw>
 8011094:	900d      	str	r0, [sp, #52]	@ 0x34
 8011096:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801109a:	f104 0008 	add.w	r0, r4, #8
 801109e:	f001 fbdf 	bl	8012860 <uxr_get_output_reliable_stream>
 80110a2:	4607      	mov	r7, r0
 80110a4:	2800      	cmp	r0, #0
 80110a6:	f43f af6e 	beq.w	8010f86 <read_submessage_list+0x12>
 80110aa:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 80110ae:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 80110b2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 80110b6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80110ba:	b289      	uxth	r1, r1
 80110bc:	f006 fd84 	bl	8017bc8 <uxr_process_acknack>
 80110c0:	4638      	mov	r0, r7
 80110c2:	f006 fd41 	bl	8017b48 <uxr_begin_output_nack_buffer_it>
 80110c6:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 80110ca:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 80110ce:	e006      	b.n	80110de <read_submessage_list+0x16a>
 80110d0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80110d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80110d4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80110d8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80110da:	6818      	ldr	r0, [r3, #0]
 80110dc:	47c8      	blx	r9
 80110de:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 80110e2:	aa0f      	add	r2, sp, #60	@ 0x3c
 80110e4:	4651      	mov	r1, sl
 80110e6:	4638      	mov	r0, r7
 80110e8:	f006 fd30 	bl	8017b4c <uxr_next_reliable_nack_buffer_to_send>
 80110ec:	2800      	cmp	r0, #0
 80110ee:	d1ef      	bne.n	80110d0 <read_submessage_list+0x15c>
 80110f0:	e749      	b.n	8010f86 <read_submessage_list+0x12>
 80110f2:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 80110f6:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 80110fa:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 80110fe:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8011102:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8011106:	4651      	mov	r1, sl
 8011108:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801110c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 8011110:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8011114:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8011118:	4628      	mov	r0, r5
 801111a:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 801111e:	f002 fb05 	bl	801372c <uxr_deserialize_BaseObjectRequest>
 8011122:	4650      	mov	r0, sl
 8011124:	a90f      	add	r1, sp, #60	@ 0x3c
 8011126:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 801112a:	f000 fdf1 	bl	8011d10 <uxr_parse_base_object_request>
 801112e:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8011132:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011134:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8011138:	9110      	str	r1, [sp, #64]	@ 0x40
 801113a:	3f04      	subs	r7, #4
 801113c:	f009 090e 	and.w	r9, r9, #14
 8011140:	b2bf      	uxth	r7, r7
 8011142:	f1bb 0f00 	cmp.w	fp, #0
 8011146:	d006      	beq.n	8011156 <read_submessage_list+0x1e2>
 8011148:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 801114c:	9300      	str	r3, [sp, #0]
 801114e:	4652      	mov	r2, sl
 8011150:	2300      	movs	r3, #0
 8011152:	4620      	mov	r0, r4
 8011154:	47d8      	blx	fp
 8011156:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8011158:	b16a      	cbz	r2, 8011176 <read_submessage_list+0x202>
 801115a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 801115c:	2100      	movs	r1, #0
 801115e:	3802      	subs	r0, #2
 8011160:	e002      	b.n	8011168 <read_submessage_list+0x1f4>
 8011162:	3101      	adds	r1, #1
 8011164:	4291      	cmp	r1, r2
 8011166:	d006      	beq.n	8011176 <read_submessage_list+0x202>
 8011168:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 801116c:	4553      	cmp	r3, sl
 801116e:	d1f8      	bne.n	8011162 <read_submessage_list+0x1ee>
 8011170:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8011172:	2200      	movs	r2, #0
 8011174:	545a      	strb	r2, [r3, r1]
 8011176:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801117a:	9102      	str	r1, [sp, #8]
 801117c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801117e:	9101      	str	r1, [sp, #4]
 8011180:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8011182:	9100      	str	r1, [sp, #0]
 8011184:	464b      	mov	r3, r9
 8011186:	463a      	mov	r2, r7
 8011188:	4629      	mov	r1, r5
 801118a:	4620      	mov	r0, r4
 801118c:	f7ff fc4c 	bl	8010a28 <read_submessage_format>
 8011190:	e6f9      	b.n	8010f86 <read_submessage_list+0x12>
 8011192:	4629      	mov	r1, r5
 8011194:	4620      	mov	r0, r4
 8011196:	f7ff fea5 	bl	8010ee4 <read_submessage_info>
 801119a:	e6f4      	b.n	8010f86 <read_submessage_list+0x12>
 801119c:	2a00      	cmp	r2, #0
 801119e:	d03e      	beq.n	801121e <read_submessage_list+0x2aa>
 80111a0:	a910      	add	r1, sp, #64	@ 0x40
 80111a2:	4628      	mov	r0, r5
 80111a4:	f002 fcd2 	bl	8013b4c <uxr_deserialize_STATUS_Payload>
 80111a8:	a90e      	add	r1, sp, #56	@ 0x38
 80111aa:	aa0d      	add	r2, sp, #52	@ 0x34
 80111ac:	a810      	add	r0, sp, #64	@ 0x40
 80111ae:	f000 fdaf 	bl	8011d10 <uxr_parse_base_object_request>
 80111b2:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 80111b6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80111b8:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 80111bc:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 80111c0:	910f      	str	r1, [sp, #60]	@ 0x3c
 80111c2:	f1ba 0f00 	cmp.w	sl, #0
 80111c6:	d006      	beq.n	80111d6 <read_submessage_list+0x262>
 80111c8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80111cc:	9300      	str	r3, [sp, #0]
 80111ce:	463a      	mov	r2, r7
 80111d0:	464b      	mov	r3, r9
 80111d2:	4620      	mov	r0, r4
 80111d4:	47d0      	blx	sl
 80111d6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80111d8:	2a00      	cmp	r2, #0
 80111da:	f43f aed4 	beq.w	8010f86 <read_submessage_list+0x12>
 80111de:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80111e0:	2100      	movs	r1, #0
 80111e2:	3802      	subs	r0, #2
 80111e4:	e003      	b.n	80111ee <read_submessage_list+0x27a>
 80111e6:	3101      	adds	r1, #1
 80111e8:	4291      	cmp	r1, r2
 80111ea:	f43f aecc 	beq.w	8010f86 <read_submessage_list+0x12>
 80111ee:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80111f2:	42bb      	cmp	r3, r7
 80111f4:	d1f7      	bne.n	80111e6 <read_submessage_list+0x272>
 80111f6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80111f8:	f803 9001 	strb.w	r9, [r3, r1]
 80111fc:	e6c3      	b.n	8010f86 <read_submessage_list+0x12>
 80111fe:	2a00      	cmp	r2, #0
 8011200:	f47f aec1 	bne.w	8010f86 <read_submessage_list+0x12>
 8011204:	4629      	mov	r1, r5
 8011206:	4620      	mov	r0, r4
 8011208:	f000 fcc8 	bl	8011b9c <uxr_read_create_session_status>
 801120c:	e6bb      	b.n	8010f86 <read_submessage_list+0x12>
 801120e:	4629      	mov	r1, r5
 8011210:	4620      	mov	r0, r4
 8011212:	f7ff fcf5 	bl	8010c00 <read_submessage_get_info>
 8011216:	e6b6      	b.n	8010f86 <read_submessage_list+0x12>
 8011218:	b017      	add	sp, #92	@ 0x5c
 801121a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801121e:	4629      	mov	r1, r5
 8011220:	4620      	mov	r0, r4
 8011222:	f000 fcc7 	bl	8011bb4 <uxr_read_delete_session_status>
 8011226:	e6ae      	b.n	8010f86 <read_submessage_list+0x12>
 8011228:	f001 fbae 	bl	8012988 <uxr_nanos>
 801122c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801122e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8011230:	464f      	mov	r7, r9
 8011232:	fbc3 2706 	smlal	r2, r7, r3, r6
 8011236:	1812      	adds	r2, r2, r0
 8011238:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801123a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801123c:	eb47 0101 	adc.w	r1, r7, r1
 8011240:	464f      	mov	r7, r9
 8011242:	fbc3 0706 	smlal	r0, r7, r3, r6
 8011246:	463b      	mov	r3, r7
 8011248:	4684      	mov	ip, r0
 801124a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 801124e:	fbc7 0906 	smlal	r0, r9, r7, r6
 8011252:	eb1c 0c00 	adds.w	ip, ip, r0
 8011256:	464f      	mov	r7, r9
 8011258:	eb43 0307 	adc.w	r3, r3, r7
 801125c:	ebb2 0c0c 	subs.w	ip, r2, ip
 8011260:	eb61 0303 	sbc.w	r3, r1, r3
 8011264:	0fda      	lsrs	r2, r3, #31
 8011266:	eb12 020c 	adds.w	r2, r2, ip
 801126a:	f143 0300 	adc.w	r3, r3, #0
 801126e:	0852      	lsrs	r2, r2, #1
 8011270:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8011274:	105b      	asrs	r3, r3, #1
 8011276:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 801127a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 801127e:	e6dd      	b.n	801103c <read_submessage_list+0xc8>
 8011280:	3b9aca00 	.word	0x3b9aca00

08011284 <listen_message_reliably>:
 8011284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011288:	1e0b      	subs	r3, r1, #0
 801128a:	b09d      	sub	sp, #116	@ 0x74
 801128c:	bfb8      	it	lt
 801128e:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8011292:	4680      	mov	r8, r0
 8011294:	9305      	str	r3, [sp, #20]
 8011296:	f001 fb5d 	bl	8012954 <uxr_millis>
 801129a:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 801129e:	4681      	mov	r9, r0
 80112a0:	2a00      	cmp	r2, #0
 80112a2:	f000 80a1 	beq.w	80113e8 <listen_message_reliably+0x164>
 80112a6:	2600      	movs	r6, #0
 80112a8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80112ac:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80112b0:	9303      	str	r3, [sp, #12]
 80112b2:	4630      	mov	r0, r6
 80112b4:	460f      	mov	r7, r1
 80112b6:	e00f      	b.n	80112d8 <listen_message_reliably+0x54>
 80112b8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80112bc:	9903      	ldr	r1, [sp, #12]
 80112be:	455a      	cmp	r2, fp
 80112c0:	f106 0601 	add.w	r6, r6, #1
 80112c4:	eb73 0101 	sbcs.w	r1, r3, r1
 80112c8:	b2f0      	uxtb	r0, r6
 80112ca:	da01      	bge.n	80112d0 <listen_message_reliably+0x4c>
 80112cc:	4693      	mov	fp, r2
 80112ce:	9303      	str	r3, [sp, #12]
 80112d0:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 80112d4:	4283      	cmp	r3, r0
 80112d6:	d960      	bls.n	801139a <listen_message_reliably+0x116>
 80112d8:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 80112dc:	2102      	movs	r1, #2
 80112de:	2201      	movs	r2, #1
 80112e0:	f001 f9ba 	bl	8012658 <uxr_stream_id>
 80112e4:	00e4      	lsls	r4, r4, #3
 80112e6:	f104 0520 	add.w	r5, r4, #32
 80112ea:	4445      	add	r5, r8
 80112ec:	4601      	mov	r1, r0
 80112ee:	463b      	mov	r3, r7
 80112f0:	464a      	mov	r2, r9
 80112f2:	4628      	mov	r0, r5
 80112f4:	9109      	str	r1, [sp, #36]	@ 0x24
 80112f6:	f006 fbfd 	bl	8017af4 <uxr_update_output_stream_heartbeat_timestamp>
 80112fa:	eb08 0304 	add.w	r3, r8, r4
 80112fe:	2800      	cmp	r0, #0
 8011300:	d0da      	beq.n	80112b8 <listen_message_reliably+0x34>
 8011302:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8011306:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 801130a:	9304      	str	r3, [sp, #16]
 801130c:	4640      	mov	r0, r8
 801130e:	f000 fcd9 	bl	8011cc4 <uxr_session_header_offset>
 8011312:	3501      	adds	r5, #1
 8011314:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8011318:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 801131c:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8011320:	2300      	movs	r3, #0
 8011322:	2211      	movs	r2, #17
 8011324:	9000      	str	r0, [sp, #0]
 8011326:	a90c      	add	r1, sp, #48	@ 0x30
 8011328:	4650      	mov	r0, sl
 801132a:	f7fe fe9d 	bl	8010068 <ucdr_init_buffer_origin_offset>
 801132e:	2300      	movs	r3, #0
 8011330:	2205      	movs	r2, #5
 8011332:	210b      	movs	r1, #11
 8011334:	4650      	mov	r0, sl
 8011336:	f001 fac7 	bl	80128c8 <uxr_buffer_submessage_header>
 801133a:	8968      	ldrh	r0, [r5, #10]
 801133c:	2101      	movs	r1, #1
 801133e:	f006 fc9b 	bl	8017c78 <uxr_seq_num_add>
 8011342:	892b      	ldrh	r3, [r5, #8]
 8011344:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8011348:	4602      	mov	r2, r0
 801134a:	9b04      	ldr	r3, [sp, #16]
 801134c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8011350:	a90a      	add	r1, sp, #40	@ 0x28
 8011352:	4650      	mov	r0, sl
 8011354:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8011358:	f002 fcb0 	bl	8013cbc <uxr_serialize_HEARTBEAT_Payload>
 801135c:	2200      	movs	r2, #0
 801135e:	4611      	mov	r1, r2
 8011360:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011362:	4640      	mov	r0, r8
 8011364:	f000 fc58 	bl	8011c18 <uxr_stamp_session_header>
 8011368:	4650      	mov	r0, sl
 801136a:	f7fe febb 	bl	80100e4 <ucdr_buffer_length>
 801136e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8011372:	4602      	mov	r2, r0
 8011374:	a90c      	add	r1, sp, #48	@ 0x30
 8011376:	e9d3 0500 	ldrd	r0, r5, [r3]
 801137a:	4444      	add	r4, r8
 801137c:	47a8      	blx	r5
 801137e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8011382:	9903      	ldr	r1, [sp, #12]
 8011384:	455a      	cmp	r2, fp
 8011386:	f106 0601 	add.w	r6, r6, #1
 801138a:	eb73 0101 	sbcs.w	r1, r3, r1
 801138e:	b2f0      	uxtb	r0, r6
 8011390:	db9c      	blt.n	80112cc <listen_message_reliably+0x48>
 8011392:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8011396:	4283      	cmp	r3, r0
 8011398:	d89e      	bhi.n	80112d8 <listen_message_reliably+0x54>
 801139a:	9a03      	ldr	r2, [sp, #12]
 801139c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80113a0:	429a      	cmp	r2, r3
 80113a2:	bf08      	it	eq
 80113a4:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 80113a8:	d01e      	beq.n	80113e8 <listen_message_reliably+0x164>
 80113aa:	ebab 0309 	sub.w	r3, fp, r9
 80113ae:	9905      	ldr	r1, [sp, #20]
 80113b0:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	bf08      	it	eq
 80113b8:	2301      	moveq	r3, #1
 80113ba:	4299      	cmp	r1, r3
 80113bc:	bfa8      	it	ge
 80113be:	4619      	movge	r1, r3
 80113c0:	6894      	ldr	r4, [r2, #8]
 80113c2:	6810      	ldr	r0, [r2, #0]
 80113c4:	4689      	mov	r9, r1
 80113c6:	460b      	mov	r3, r1
 80113c8:	aa08      	add	r2, sp, #32
 80113ca:	a907      	add	r1, sp, #28
 80113cc:	47a0      	blx	r4
 80113ce:	b968      	cbnz	r0, 80113ec <listen_message_reliably+0x168>
 80113d0:	9b05      	ldr	r3, [sp, #20]
 80113d2:	eba3 0309 	sub.w	r3, r3, r9
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	9305      	str	r3, [sp, #20]
 80113da:	f73f af5c 	bgt.w	8011296 <listen_message_reliably+0x12>
 80113de:	4604      	mov	r4, r0
 80113e0:	4620      	mov	r0, r4
 80113e2:	b01d      	add	sp, #116	@ 0x74
 80113e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113e8:	9b05      	ldr	r3, [sp, #20]
 80113ea:	e7e0      	b.n	80113ae <listen_message_reliably+0x12a>
 80113ec:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80113f0:	4604      	mov	r4, r0
 80113f2:	a80c      	add	r0, sp, #48	@ 0x30
 80113f4:	f7fe fe4a 	bl	801008c <ucdr_init_buffer>
 80113f8:	2500      	movs	r5, #0
 80113fa:	f10d 031a 	add.w	r3, sp, #26
 80113fe:	aa06      	add	r2, sp, #24
 8011400:	a90c      	add	r1, sp, #48	@ 0x30
 8011402:	4640      	mov	r0, r8
 8011404:	f88d 5018 	strb.w	r5, [sp, #24]
 8011408:	f000 fc1a 	bl	8011c40 <uxr_read_session_header>
 801140c:	b918      	cbnz	r0, 8011416 <listen_message_reliably+0x192>
 801140e:	4620      	mov	r0, r4
 8011410:	b01d      	add	sp, #116	@ 0x74
 8011412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011416:	4629      	mov	r1, r5
 8011418:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801141c:	f001 f946 	bl	80126ac <uxr_stream_id_from_raw>
 8011420:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8011424:	2d01      	cmp	r5, #1
 8011426:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 801142a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 801142e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8011432:	d04b      	beq.n	80114cc <listen_message_reliably+0x248>
 8011434:	2d02      	cmp	r5, #2
 8011436:	d00f      	beq.n	8011458 <listen_message_reliably+0x1d4>
 8011438:	2d00      	cmp	r5, #0
 801143a:	d1e8      	bne.n	801140e <listen_message_reliably+0x18a>
 801143c:	4629      	mov	r1, r5
 801143e:	4628      	mov	r0, r5
 8011440:	f001 f934 	bl	80126ac <uxr_stream_id_from_raw>
 8011444:	a90c      	add	r1, sp, #48	@ 0x30
 8011446:	4602      	mov	r2, r0
 8011448:	4640      	mov	r0, r8
 801144a:	920a      	str	r2, [sp, #40]	@ 0x28
 801144c:	f7ff fd92 	bl	8010f74 <read_submessage_list>
 8011450:	4620      	mov	r0, r4
 8011452:	b01d      	add	sp, #116	@ 0x74
 8011454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011458:	4631      	mov	r1, r6
 801145a:	f108 0008 	add.w	r0, r8, #8
 801145e:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8011462:	f001 fa11 	bl	8012888 <uxr_get_input_reliable_stream>
 8011466:	4607      	mov	r7, r0
 8011468:	b338      	cbz	r0, 80114ba <listen_message_reliably+0x236>
 801146a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801146c:	9203      	str	r2, [sp, #12]
 801146e:	a80c      	add	r0, sp, #48	@ 0x30
 8011470:	f7fe fe3c 	bl	80100ec <ucdr_buffer_remaining>
 8011474:	4603      	mov	r3, r0
 8011476:	f10d 0019 	add.w	r0, sp, #25
 801147a:	9000      	str	r0, [sp, #0]
 801147c:	9a03      	ldr	r2, [sp, #12]
 801147e:	4651      	mov	r1, sl
 8011480:	4638      	mov	r0, r7
 8011482:	f005 ff4d 	bl	8017320 <uxr_receive_reliable_message>
 8011486:	b1c0      	cbz	r0, 80114ba <listen_message_reliably+0x236>
 8011488:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801148c:	b393      	cbz	r3, 80114f4 <listen_message_reliably+0x270>
 801148e:	ad14      	add	r5, sp, #80	@ 0x50
 8011490:	f04f 0a02 	mov.w	sl, #2
 8011494:	e00a      	b.n	80114ac <listen_message_reliably+0x228>
 8011496:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 801149a:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 801149e:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 80114a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80114a4:	4629      	mov	r1, r5
 80114a6:	4640      	mov	r0, r8
 80114a8:	f7ff fd64 	bl	8010f74 <read_submessage_list>
 80114ac:	2204      	movs	r2, #4
 80114ae:	4629      	mov	r1, r5
 80114b0:	4638      	mov	r0, r7
 80114b2:	f005 ffb5 	bl	8017420 <uxr_next_input_reliable_buffer_available>
 80114b6:	2800      	cmp	r0, #0
 80114b8:	d1ed      	bne.n	8011496 <listen_message_reliably+0x212>
 80114ba:	4640      	mov	r0, r8
 80114bc:	4632      	mov	r2, r6
 80114be:	4649      	mov	r1, r9
 80114c0:	f7ff fbd4 	bl	8010c6c <write_submessage_acknack.isra.0>
 80114c4:	4620      	mov	r0, r4
 80114c6:	b01d      	add	sp, #116	@ 0x74
 80114c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114cc:	4631      	mov	r1, r6
 80114ce:	f108 0008 	add.w	r0, r8, #8
 80114d2:	f001 f9cf 	bl	8012874 <uxr_get_input_best_effort_stream>
 80114d6:	2800      	cmp	r0, #0
 80114d8:	d099      	beq.n	801140e <listen_message_reliably+0x18a>
 80114da:	4651      	mov	r1, sl
 80114dc:	f005 fe8c 	bl	80171f8 <uxr_receive_best_effort_message>
 80114e0:	2800      	cmp	r0, #0
 80114e2:	d094      	beq.n	801140e <listen_message_reliably+0x18a>
 80114e4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 80114e8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80114ea:	a90c      	add	r1, sp, #48	@ 0x30
 80114ec:	4640      	mov	r0, r8
 80114ee:	f7ff fd41 	bl	8010f74 <read_submessage_list>
 80114f2:	e78c      	b.n	801140e <listen_message_reliably+0x18a>
 80114f4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 80114f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80114fa:	a90c      	add	r1, sp, #48	@ 0x30
 80114fc:	4640      	mov	r0, r8
 80114fe:	f7ff fd39 	bl	8010f74 <read_submessage_list>
 8011502:	e7c4      	b.n	801148e <listen_message_reliably+0x20a>

08011504 <uxr_run_session_timeout>:
 8011504:	b570      	push	{r4, r5, r6, lr}
 8011506:	4604      	mov	r4, r0
 8011508:	460d      	mov	r5, r1
 801150a:	f001 fa23 	bl	8012954 <uxr_millis>
 801150e:	4606      	mov	r6, r0
 8011510:	4620      	mov	r0, r4
 8011512:	f7ff fc71 	bl	8010df8 <uxr_flash_output_streams>
 8011516:	4629      	mov	r1, r5
 8011518:	4620      	mov	r0, r4
 801151a:	f7ff feb3 	bl	8011284 <listen_message_reliably>
 801151e:	f001 fa19 	bl	8012954 <uxr_millis>
 8011522:	1b83      	subs	r3, r0, r6
 8011524:	1ae9      	subs	r1, r5, r3
 8011526:	2900      	cmp	r1, #0
 8011528:	dcf6      	bgt.n	8011518 <uxr_run_session_timeout+0x14>
 801152a:	f104 0008 	add.w	r0, r4, #8
 801152e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011532:	f001 b9b3 	b.w	801289c <uxr_output_streams_confirmed>
 8011536:	bf00      	nop

08011538 <uxr_run_session_until_data>:
 8011538:	b570      	push	{r4, r5, r6, lr}
 801153a:	4604      	mov	r4, r0
 801153c:	460d      	mov	r5, r1
 801153e:	f001 fa09 	bl	8012954 <uxr_millis>
 8011542:	4606      	mov	r6, r0
 8011544:	4620      	mov	r0, r4
 8011546:	f7ff fc57 	bl	8010df8 <uxr_flash_output_streams>
 801154a:	2300      	movs	r3, #0
 801154c:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8011550:	4629      	mov	r1, r5
 8011552:	e005      	b.n	8011560 <uxr_run_session_until_data+0x28>
 8011554:	f001 f9fe 	bl	8012954 <uxr_millis>
 8011558:	1b83      	subs	r3, r0, r6
 801155a:	1ae9      	subs	r1, r5, r3
 801155c:	2900      	cmp	r1, #0
 801155e:	dd07      	ble.n	8011570 <uxr_run_session_until_data+0x38>
 8011560:	4620      	mov	r0, r4
 8011562:	f7ff fe8f 	bl	8011284 <listen_message_reliably>
 8011566:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 801156a:	2800      	cmp	r0, #0
 801156c:	d0f2      	beq.n	8011554 <uxr_run_session_until_data+0x1c>
 801156e:	bd70      	pop	{r4, r5, r6, pc}
 8011570:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8011574:	bd70      	pop	{r4, r5, r6, pc}
 8011576:	bf00      	nop

08011578 <uxr_run_session_until_confirm_delivery>:
 8011578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801157c:	4606      	mov	r6, r0
 801157e:	460d      	mov	r5, r1
 8011580:	f001 f9e8 	bl	8012954 <uxr_millis>
 8011584:	4607      	mov	r7, r0
 8011586:	4630      	mov	r0, r6
 8011588:	f7ff fc36 	bl	8010df8 <uxr_flash_output_streams>
 801158c:	2d00      	cmp	r5, #0
 801158e:	f106 0808 	add.w	r8, r6, #8
 8011592:	bfa8      	it	ge
 8011594:	462c      	movge	r4, r5
 8011596:	da07      	bge.n	80115a8 <uxr_run_session_until_confirm_delivery+0x30>
 8011598:	e00e      	b.n	80115b8 <uxr_run_session_until_confirm_delivery+0x40>
 801159a:	f7ff fe73 	bl	8011284 <listen_message_reliably>
 801159e:	f001 f9d9 	bl	8012954 <uxr_millis>
 80115a2:	1bc3      	subs	r3, r0, r7
 80115a4:	1aec      	subs	r4, r5, r3
 80115a6:	d407      	bmi.n	80115b8 <uxr_run_session_until_confirm_delivery+0x40>
 80115a8:	4640      	mov	r0, r8
 80115aa:	f001 f977 	bl	801289c <uxr_output_streams_confirmed>
 80115ae:	4603      	mov	r3, r0
 80115b0:	4621      	mov	r1, r4
 80115b2:	4630      	mov	r0, r6
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d0f0      	beq.n	801159a <uxr_run_session_until_confirm_delivery+0x22>
 80115b8:	4640      	mov	r0, r8
 80115ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80115be:	f001 b96d 	b.w	801289c <uxr_output_streams_confirmed>
 80115c2:	bf00      	nop

080115c4 <uxr_run_session_until_all_status>:
 80115c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115c8:	9c08      	ldr	r4, [sp, #32]
 80115ca:	4606      	mov	r6, r0
 80115cc:	460f      	mov	r7, r1
 80115ce:	4691      	mov	r9, r2
 80115d0:	461d      	mov	r5, r3
 80115d2:	f7ff fc11 	bl	8010df8 <uxr_flash_output_streams>
 80115d6:	b124      	cbz	r4, 80115e2 <uxr_run_session_until_all_status+0x1e>
 80115d8:	4622      	mov	r2, r4
 80115da:	21ff      	movs	r1, #255	@ 0xff
 80115dc:	4628      	mov	r0, r5
 80115de:	f007 f9c5 	bl	801896c <memset>
 80115e2:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 80115e6:	67f4      	str	r4, [r6, #124]	@ 0x7c
 80115e8:	f001 f9b4 	bl	8012954 <uxr_millis>
 80115ec:	3d01      	subs	r5, #1
 80115ee:	f1a9 0902 	sub.w	r9, r9, #2
 80115f2:	4680      	mov	r8, r0
 80115f4:	4639      	mov	r1, r7
 80115f6:	4630      	mov	r0, r6
 80115f8:	f7ff fe44 	bl	8011284 <listen_message_reliably>
 80115fc:	f001 f9aa 	bl	8012954 <uxr_millis>
 8011600:	eba0 0008 	sub.w	r0, r0, r8
 8011604:	1a39      	subs	r1, r7, r0
 8011606:	b344      	cbz	r4, 801165a <uxr_run_session_until_all_status+0x96>
 8011608:	4628      	mov	r0, r5
 801160a:	46ac      	mov	ip, r5
 801160c:	2301      	movs	r3, #1
 801160e:	e002      	b.n	8011616 <uxr_run_session_until_all_status+0x52>
 8011610:	42a3      	cmp	r3, r4
 8011612:	d20d      	bcs.n	8011630 <uxr_run_session_until_all_status+0x6c>
 8011614:	3301      	adds	r3, #1
 8011616:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 801161a:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801161e:	d1f7      	bne.n	8011610 <uxr_run_session_until_all_status+0x4c>
 8011620:	42a3      	cmp	r3, r4
 8011622:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 8011626:	d213      	bcs.n	8011650 <uxr_run_session_until_all_status+0x8c>
 8011628:	2a00      	cmp	r2, #0
 801162a:	d0f3      	beq.n	8011614 <uxr_run_session_until_all_status+0x50>
 801162c:	2900      	cmp	r1, #0
 801162e:	dce2      	bgt.n	80115f6 <uxr_run_session_until_all_status+0x32>
 8011630:	2300      	movs	r3, #0
 8011632:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8011634:	442c      	add	r4, r5
 8011636:	e001      	b.n	801163c <uxr_run_session_until_all_status+0x78>
 8011638:	2b01      	cmp	r3, #1
 801163a:	d812      	bhi.n	8011662 <uxr_run_session_until_all_status+0x9e>
 801163c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8011640:	4284      	cmp	r4, r0
 8011642:	d1f9      	bne.n	8011638 <uxr_run_session_until_all_status+0x74>
 8011644:	2b01      	cmp	r3, #1
 8011646:	bf8c      	ite	hi
 8011648:	2000      	movhi	r0, #0
 801164a:	2001      	movls	r0, #1
 801164c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011650:	2900      	cmp	r1, #0
 8011652:	dded      	ble.n	8011630 <uxr_run_session_until_all_status+0x6c>
 8011654:	2a00      	cmp	r2, #0
 8011656:	d1ce      	bne.n	80115f6 <uxr_run_session_until_all_status+0x32>
 8011658:	e7ea      	b.n	8011630 <uxr_run_session_until_all_status+0x6c>
 801165a:	67f4      	str	r4, [r6, #124]	@ 0x7c
 801165c:	2001      	movs	r0, #1
 801165e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011662:	2000      	movs	r0, #0
 8011664:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08011668 <uxr_run_session_until_pong>:
 8011668:	b570      	push	{r4, r5, r6, lr}
 801166a:	4604      	mov	r4, r0
 801166c:	460d      	mov	r5, r1
 801166e:	f001 f971 	bl	8012954 <uxr_millis>
 8011672:	4606      	mov	r6, r0
 8011674:	4620      	mov	r0, r4
 8011676:	f7ff fbbf 	bl	8010df8 <uxr_flash_output_streams>
 801167a:	2300      	movs	r3, #0
 801167c:	f884 30b5 	strb.w	r3, [r4, #181]	@ 0xb5
 8011680:	4629      	mov	r1, r5
 8011682:	e005      	b.n	8011690 <uxr_run_session_until_pong+0x28>
 8011684:	f001 f966 	bl	8012954 <uxr_millis>
 8011688:	1b83      	subs	r3, r0, r6
 801168a:	1ae9      	subs	r1, r5, r3
 801168c:	2900      	cmp	r1, #0
 801168e:	dd0c      	ble.n	80116aa <uxr_run_session_until_pong+0x42>
 8011690:	4620      	mov	r0, r4
 8011692:	f7ff fdf7 	bl	8011284 <listen_message_reliably>
 8011696:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 801169a:	2800      	cmp	r0, #0
 801169c:	d0f2      	beq.n	8011684 <uxr_run_session_until_pong+0x1c>
 801169e:	f1a0 0001 	sub.w	r0, r0, #1
 80116a2:	fab0 f080 	clz	r0, r0
 80116a6:	0940      	lsrs	r0, r0, #5
 80116a8:	bd70      	pop	{r4, r5, r6, pc}
 80116aa:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 80116ae:	f1a0 0001 	sub.w	r0, r0, #1
 80116b2:	fab0 f080 	clz	r0, r0
 80116b6:	0940      	lsrs	r0, r0, #5
 80116b8:	bd70      	pop	{r4, r5, r6, pc}
 80116ba:	bf00      	nop

080116bc <wait_session_status>:
 80116bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116c0:	4604      	mov	r4, r0
 80116c2:	b09d      	sub	sp, #116	@ 0x74
 80116c4:	20ff      	movs	r0, #255	@ 0xff
 80116c6:	7160      	strb	r0, [r4, #5]
 80116c8:	9303      	str	r3, [sp, #12]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	f000 80b6 	beq.w	801183c <wait_session_status+0x180>
 80116d0:	468a      	mov	sl, r1
 80116d2:	4691      	mov	r9, r2
 80116d4:	f04f 0b00 	mov.w	fp, #0
 80116d8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80116da:	464a      	mov	r2, r9
 80116dc:	e9d3 0500 	ldrd	r0, r5, [r3]
 80116e0:	4651      	mov	r1, sl
 80116e2:	47a8      	blx	r5
 80116e4:	f001 f936 	bl	8012954 <uxr_millis>
 80116e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80116ec:	4605      	mov	r5, r0
 80116ee:	e009      	b.n	8011704 <wait_session_status+0x48>
 80116f0:	f001 f930 	bl	8012954 <uxr_millis>
 80116f4:	1b40      	subs	r0, r0, r5
 80116f6:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	dd40      	ble.n	8011780 <wait_session_status+0xc4>
 80116fe:	7960      	ldrb	r0, [r4, #5]
 8011700:	28ff      	cmp	r0, #255	@ 0xff
 8011702:	d145      	bne.n	8011790 <wait_session_status+0xd4>
 8011704:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8011706:	a908      	add	r1, sp, #32
 8011708:	6896      	ldr	r6, [r2, #8]
 801170a:	6810      	ldr	r0, [r2, #0]
 801170c:	aa09      	add	r2, sp, #36	@ 0x24
 801170e:	47b0      	blx	r6
 8011710:	2800      	cmp	r0, #0
 8011712:	d0ed      	beq.n	80116f0 <wait_session_status+0x34>
 8011714:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8011718:	a80c      	add	r0, sp, #48	@ 0x30
 801171a:	f7fe fcb7 	bl	801008c <ucdr_init_buffer>
 801171e:	2600      	movs	r6, #0
 8011720:	f10d 031e 	add.w	r3, sp, #30
 8011724:	aa07      	add	r2, sp, #28
 8011726:	a90c      	add	r1, sp, #48	@ 0x30
 8011728:	4620      	mov	r0, r4
 801172a:	f88d 601c 	strb.w	r6, [sp, #28]
 801172e:	f000 fa87 	bl	8011c40 <uxr_read_session_header>
 8011732:	2800      	cmp	r0, #0
 8011734:	d0dc      	beq.n	80116f0 <wait_session_status+0x34>
 8011736:	4631      	mov	r1, r6
 8011738:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801173c:	f000 ffb6 	bl	80126ac <uxr_stream_id_from_raw>
 8011740:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8011744:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8011748:	9302      	str	r3, [sp, #8]
 801174a:	2f01      	cmp	r7, #1
 801174c:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8011750:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8011754:	d05c      	beq.n	8011810 <wait_session_status+0x154>
 8011756:	2f02      	cmp	r7, #2
 8011758:	d020      	beq.n	801179c <wait_session_status+0xe0>
 801175a:	2f00      	cmp	r7, #0
 801175c:	d1c8      	bne.n	80116f0 <wait_session_status+0x34>
 801175e:	4639      	mov	r1, r7
 8011760:	4638      	mov	r0, r7
 8011762:	f000 ffa3 	bl	80126ac <uxr_stream_id_from_raw>
 8011766:	a90c      	add	r1, sp, #48	@ 0x30
 8011768:	4602      	mov	r2, r0
 801176a:	900b      	str	r0, [sp, #44]	@ 0x2c
 801176c:	4620      	mov	r0, r4
 801176e:	f7ff fc01 	bl	8010f74 <read_submessage_list>
 8011772:	f001 f8ef 	bl	8012954 <uxr_millis>
 8011776:	1b40      	subs	r0, r0, r5
 8011778:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801177c:	2b00      	cmp	r3, #0
 801177e:	dcbe      	bgt.n	80116fe <wait_session_status+0x42>
 8011780:	9b03      	ldr	r3, [sp, #12]
 8011782:	7960      	ldrb	r0, [r4, #5]
 8011784:	f10b 0b01 	add.w	fp, fp, #1
 8011788:	455b      	cmp	r3, fp
 801178a:	d001      	beq.n	8011790 <wait_session_status+0xd4>
 801178c:	28ff      	cmp	r0, #255	@ 0xff
 801178e:	d0a3      	beq.n	80116d8 <wait_session_status+0x1c>
 8011790:	38ff      	subs	r0, #255	@ 0xff
 8011792:	bf18      	it	ne
 8011794:	2001      	movne	r0, #1
 8011796:	b01d      	add	sp, #116	@ 0x74
 8011798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801179c:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 80117a0:	9304      	str	r3, [sp, #16]
 80117a2:	4631      	mov	r1, r6
 80117a4:	f104 0008 	add.w	r0, r4, #8
 80117a8:	f001 f86e 	bl	8012888 <uxr_get_input_reliable_stream>
 80117ac:	4680      	mov	r8, r0
 80117ae:	b348      	cbz	r0, 8011804 <wait_session_status+0x148>
 80117b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80117b2:	9205      	str	r2, [sp, #20]
 80117b4:	a80c      	add	r0, sp, #48	@ 0x30
 80117b6:	f7fe fc99 	bl	80100ec <ucdr_buffer_remaining>
 80117ba:	4603      	mov	r3, r0
 80117bc:	f10d 001d 	add.w	r0, sp, #29
 80117c0:	9000      	str	r0, [sp, #0]
 80117c2:	9a05      	ldr	r2, [sp, #20]
 80117c4:	9902      	ldr	r1, [sp, #8]
 80117c6:	4640      	mov	r0, r8
 80117c8:	f005 fdaa 	bl	8017320 <uxr_receive_reliable_message>
 80117cc:	b1d0      	cbz	r0, 8011804 <wait_session_status+0x148>
 80117ce:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d03a      	beq.n	801184c <wait_session_status+0x190>
 80117d6:	9f04      	ldr	r7, [sp, #16]
 80117d8:	e00a      	b.n	80117f0 <wait_session_status+0x134>
 80117da:	f04f 0302 	mov.w	r3, #2
 80117de:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 80117e2:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 80117e6:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 80117ea:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80117ec:	f7ff fbc2 	bl	8010f74 <read_submessage_list>
 80117f0:	a914      	add	r1, sp, #80	@ 0x50
 80117f2:	2204      	movs	r2, #4
 80117f4:	4640      	mov	r0, r8
 80117f6:	f005 fe13 	bl	8017420 <uxr_next_input_reliable_buffer_available>
 80117fa:	4603      	mov	r3, r0
 80117fc:	a914      	add	r1, sp, #80	@ 0x50
 80117fe:	4620      	mov	r0, r4
 8011800:	2b00      	cmp	r3, #0
 8011802:	d1ea      	bne.n	80117da <wait_session_status+0x11e>
 8011804:	9904      	ldr	r1, [sp, #16]
 8011806:	4632      	mov	r2, r6
 8011808:	4620      	mov	r0, r4
 801180a:	f7ff fa2f 	bl	8010c6c <write_submessage_acknack.isra.0>
 801180e:	e76f      	b.n	80116f0 <wait_session_status+0x34>
 8011810:	4631      	mov	r1, r6
 8011812:	f104 0008 	add.w	r0, r4, #8
 8011816:	f001 f82d 	bl	8012874 <uxr_get_input_best_effort_stream>
 801181a:	2800      	cmp	r0, #0
 801181c:	f43f af68 	beq.w	80116f0 <wait_session_status+0x34>
 8011820:	9902      	ldr	r1, [sp, #8]
 8011822:	f005 fce9 	bl	80171f8 <uxr_receive_best_effort_message>
 8011826:	2800      	cmp	r0, #0
 8011828:	f43f af62 	beq.w	80116f0 <wait_session_status+0x34>
 801182c:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8011830:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011832:	a90c      	add	r1, sp, #48	@ 0x30
 8011834:	4620      	mov	r0, r4
 8011836:	f7ff fb9d 	bl	8010f74 <read_submessage_list>
 801183a:	e759      	b.n	80116f0 <wait_session_status+0x34>
 801183c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801183e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011842:	47a0      	blx	r4
 8011844:	2001      	movs	r0, #1
 8011846:	b01d      	add	sp, #116	@ 0x74
 8011848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801184c:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8011850:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011852:	a90c      	add	r1, sp, #48	@ 0x30
 8011854:	4620      	mov	r0, r4
 8011856:	f7ff fb8d 	bl	8010f74 <read_submessage_list>
 801185a:	e7bc      	b.n	80117d6 <wait_session_status+0x11a>

0801185c <uxr_delete_session_retries>:
 801185c:	b530      	push	{r4, r5, lr}
 801185e:	b08f      	sub	sp, #60	@ 0x3c
 8011860:	4604      	mov	r4, r0
 8011862:	460d      	mov	r5, r1
 8011864:	f000 fa2e 	bl	8011cc4 <uxr_session_header_offset>
 8011868:	2300      	movs	r3, #0
 801186a:	2210      	movs	r2, #16
 801186c:	9000      	str	r0, [sp, #0]
 801186e:	a902      	add	r1, sp, #8
 8011870:	a806      	add	r0, sp, #24
 8011872:	f7fe fbf9 	bl	8010068 <ucdr_init_buffer_origin_offset>
 8011876:	a906      	add	r1, sp, #24
 8011878:	4620      	mov	r0, r4
 801187a:	f000 f973 	bl	8011b64 <uxr_buffer_delete_session>
 801187e:	2200      	movs	r2, #0
 8011880:	4611      	mov	r1, r2
 8011882:	9b06      	ldr	r3, [sp, #24]
 8011884:	4620      	mov	r0, r4
 8011886:	f000 f9c7 	bl	8011c18 <uxr_stamp_session_header>
 801188a:	a806      	add	r0, sp, #24
 801188c:	f7fe fc2a 	bl	80100e4 <ucdr_buffer_length>
 8011890:	462b      	mov	r3, r5
 8011892:	4602      	mov	r2, r0
 8011894:	a902      	add	r1, sp, #8
 8011896:	4620      	mov	r0, r4
 8011898:	f7ff ff10 	bl	80116bc <wait_session_status>
 801189c:	b118      	cbz	r0, 80118a6 <uxr_delete_session_retries+0x4a>
 801189e:	7960      	ldrb	r0, [r4, #5]
 80118a0:	fab0 f080 	clz	r0, r0
 80118a4:	0940      	lsrs	r0, r0, #5
 80118a6:	b00f      	add	sp, #60	@ 0x3c
 80118a8:	bd30      	pop	{r4, r5, pc}
 80118aa:	bf00      	nop

080118ac <uxr_create_session>:
 80118ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118b0:	f100 0b08 	add.w	fp, r0, #8
 80118b4:	b0ab      	sub	sp, #172	@ 0xac
 80118b6:	4604      	mov	r4, r0
 80118b8:	4658      	mov	r0, fp
 80118ba:	f000 ff2b 	bl	8012714 <uxr_reset_stream_storage>
 80118be:	4620      	mov	r0, r4
 80118c0:	f000 fa00 	bl	8011cc4 <uxr_session_header_offset>
 80118c4:	2300      	movs	r3, #0
 80118c6:	9000      	str	r0, [sp, #0]
 80118c8:	221c      	movs	r2, #28
 80118ca:	a90b      	add	r1, sp, #44	@ 0x2c
 80118cc:	a812      	add	r0, sp, #72	@ 0x48
 80118ce:	f7fe fbcb 	bl	8010068 <ucdr_init_buffer_origin_offset>
 80118d2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80118d4:	8a1a      	ldrh	r2, [r3, #16]
 80118d6:	3a04      	subs	r2, #4
 80118d8:	b292      	uxth	r2, r2
 80118da:	a912      	add	r1, sp, #72	@ 0x48
 80118dc:	4620      	mov	r0, r4
 80118de:	f000 f917 	bl	8011b10 <uxr_buffer_create_session>
 80118e2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80118e4:	4620      	mov	r0, r4
 80118e6:	f000 f983 	bl	8011bf0 <uxr_stamp_create_session_header>
 80118ea:	a812      	add	r0, sp, #72	@ 0x48
 80118ec:	f7fe fbfa 	bl	80100e4 <ucdr_buffer_length>
 80118f0:	23ff      	movs	r3, #255	@ 0xff
 80118f2:	7163      	strb	r3, [r4, #5]
 80118f4:	230a      	movs	r3, #10
 80118f6:	46da      	mov	sl, fp
 80118f8:	9303      	str	r3, [sp, #12]
 80118fa:	4683      	mov	fp, r0
 80118fc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80118fe:	465a      	mov	r2, fp
 8011900:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011904:	a90b      	add	r1, sp, #44	@ 0x2c
 8011906:	47a8      	blx	r5
 8011908:	f001 f824 	bl	8012954 <uxr_millis>
 801190c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011910:	4605      	mov	r5, r0
 8011912:	e009      	b.n	8011928 <uxr_create_session+0x7c>
 8011914:	f001 f81e 	bl	8012954 <uxr_millis>
 8011918:	1b40      	subs	r0, r0, r5
 801191a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801191e:	2b00      	cmp	r3, #0
 8011920:	7962      	ldrb	r2, [r4, #5]
 8011922:	dd38      	ble.n	8011996 <uxr_create_session+0xea>
 8011924:	2aff      	cmp	r2, #255	@ 0xff
 8011926:	d13c      	bne.n	80119a2 <uxr_create_session+0xf6>
 8011928:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801192a:	a907      	add	r1, sp, #28
 801192c:	6896      	ldr	r6, [r2, #8]
 801192e:	6810      	ldr	r0, [r2, #0]
 8011930:	aa08      	add	r2, sp, #32
 8011932:	47b0      	blx	r6
 8011934:	2800      	cmp	r0, #0
 8011936:	d0ed      	beq.n	8011914 <uxr_create_session+0x68>
 8011938:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801193c:	a81a      	add	r0, sp, #104	@ 0x68
 801193e:	f7fe fba5 	bl	801008c <ucdr_init_buffer>
 8011942:	2600      	movs	r6, #0
 8011944:	f10d 031a 	add.w	r3, sp, #26
 8011948:	aa06      	add	r2, sp, #24
 801194a:	a91a      	add	r1, sp, #104	@ 0x68
 801194c:	4620      	mov	r0, r4
 801194e:	f88d 6018 	strb.w	r6, [sp, #24]
 8011952:	f000 f975 	bl	8011c40 <uxr_read_session_header>
 8011956:	2800      	cmp	r0, #0
 8011958:	d0dc      	beq.n	8011914 <uxr_create_session+0x68>
 801195a:	4631      	mov	r1, r6
 801195c:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011960:	f000 fea4 	bl	80126ac <uxr_stream_id_from_raw>
 8011964:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8011968:	2e01      	cmp	r6, #1
 801196a:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 801196e:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 8011972:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8011976:	d053      	beq.n	8011a20 <uxr_create_session+0x174>
 8011978:	2e02      	cmp	r6, #2
 801197a:	d018      	beq.n	80119ae <uxr_create_session+0x102>
 801197c:	2e00      	cmp	r6, #0
 801197e:	d1c9      	bne.n	8011914 <uxr_create_session+0x68>
 8011980:	4631      	mov	r1, r6
 8011982:	4630      	mov	r0, r6
 8011984:	f000 fe92 	bl	80126ac <uxr_stream_id_from_raw>
 8011988:	a91a      	add	r1, sp, #104	@ 0x68
 801198a:	4602      	mov	r2, r0
 801198c:	900a      	str	r0, [sp, #40]	@ 0x28
 801198e:	4620      	mov	r0, r4
 8011990:	f7ff faf0 	bl	8010f74 <read_submessage_list>
 8011994:	e7be      	b.n	8011914 <uxr_create_session+0x68>
 8011996:	9b03      	ldr	r3, [sp, #12]
 8011998:	3b01      	subs	r3, #1
 801199a:	9303      	str	r3, [sp, #12]
 801199c:	d001      	beq.n	80119a2 <uxr_create_session+0xf6>
 801199e:	2aff      	cmp	r2, #255	@ 0xff
 80119a0:	d0ac      	beq.n	80118fc <uxr_create_session+0x50>
 80119a2:	2a00      	cmp	r2, #0
 80119a4:	d051      	beq.n	8011a4a <uxr_create_session+0x19e>
 80119a6:	2000      	movs	r0, #0
 80119a8:	b02b      	add	sp, #172	@ 0xac
 80119aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119ae:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80119b2:	9304      	str	r3, [sp, #16]
 80119b4:	4639      	mov	r1, r7
 80119b6:	4650      	mov	r0, sl
 80119b8:	f000 ff66 	bl	8012888 <uxr_get_input_reliable_stream>
 80119bc:	4680      	mov	r8, r0
 80119be:	b348      	cbz	r0, 8011a14 <uxr_create_session+0x168>
 80119c0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80119c2:	9205      	str	r2, [sp, #20]
 80119c4:	a81a      	add	r0, sp, #104	@ 0x68
 80119c6:	f7fe fb91 	bl	80100ec <ucdr_buffer_remaining>
 80119ca:	4603      	mov	r3, r0
 80119cc:	f10d 0019 	add.w	r0, sp, #25
 80119d0:	9000      	str	r0, [sp, #0]
 80119d2:	9a05      	ldr	r2, [sp, #20]
 80119d4:	4649      	mov	r1, r9
 80119d6:	4640      	mov	r0, r8
 80119d8:	f005 fca2 	bl	8017320 <uxr_receive_reliable_message>
 80119dc:	b1d0      	cbz	r0, 8011a14 <uxr_create_session+0x168>
 80119de:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d038      	beq.n	8011a58 <uxr_create_session+0x1ac>
 80119e6:	9e04      	ldr	r6, [sp, #16]
 80119e8:	e00a      	b.n	8011a00 <uxr_create_session+0x154>
 80119ea:	f04f 0302 	mov.w	r3, #2
 80119ee:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 80119f2:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 80119f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80119fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80119fc:	f7ff faba 	bl	8010f74 <read_submessage_list>
 8011a00:	a922      	add	r1, sp, #136	@ 0x88
 8011a02:	2204      	movs	r2, #4
 8011a04:	4640      	mov	r0, r8
 8011a06:	f005 fd0b 	bl	8017420 <uxr_next_input_reliable_buffer_available>
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	a922      	add	r1, sp, #136	@ 0x88
 8011a0e:	4620      	mov	r0, r4
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d1ea      	bne.n	80119ea <uxr_create_session+0x13e>
 8011a14:	9904      	ldr	r1, [sp, #16]
 8011a16:	463a      	mov	r2, r7
 8011a18:	4620      	mov	r0, r4
 8011a1a:	f7ff f927 	bl	8010c6c <write_submessage_acknack.isra.0>
 8011a1e:	e779      	b.n	8011914 <uxr_create_session+0x68>
 8011a20:	4639      	mov	r1, r7
 8011a22:	4650      	mov	r0, sl
 8011a24:	f000 ff26 	bl	8012874 <uxr_get_input_best_effort_stream>
 8011a28:	2800      	cmp	r0, #0
 8011a2a:	f43f af73 	beq.w	8011914 <uxr_create_session+0x68>
 8011a2e:	4649      	mov	r1, r9
 8011a30:	f005 fbe2 	bl	80171f8 <uxr_receive_best_effort_message>
 8011a34:	2800      	cmp	r0, #0
 8011a36:	f43f af6d 	beq.w	8011914 <uxr_create_session+0x68>
 8011a3a:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8011a3e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011a40:	a91a      	add	r1, sp, #104	@ 0x68
 8011a42:	4620      	mov	r0, r4
 8011a44:	f7ff fa96 	bl	8010f74 <read_submessage_list>
 8011a48:	e764      	b.n	8011914 <uxr_create_session+0x68>
 8011a4a:	4650      	mov	r0, sl
 8011a4c:	f000 fe62 	bl	8012714 <uxr_reset_stream_storage>
 8011a50:	2001      	movs	r0, #1
 8011a52:	b02b      	add	sp, #172	@ 0xac
 8011a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a58:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8011a5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011a5e:	a91a      	add	r1, sp, #104	@ 0x68
 8011a60:	4620      	mov	r0, r4
 8011a62:	f7ff fa87 	bl	8010f74 <read_submessage_list>
 8011a66:	e7be      	b.n	80119e6 <uxr_create_session+0x13a>

08011a68 <uxr_prepare_stream_to_write_submessage>:
 8011a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a6c:	b082      	sub	sp, #8
 8011a6e:	4682      	mov	sl, r0
 8011a70:	4610      	mov	r0, r2
 8011a72:	4615      	mov	r5, r2
 8011a74:	461e      	mov	r6, r3
 8011a76:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8011a7a:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8011a7e:	9101      	str	r1, [sp, #4]
 8011a80:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8011a84:	f000 ff60 	bl	8012948 <uxr_submessage_padding>
 8011a88:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011a8c:	f105 0904 	add.w	r9, r5, #4
 8011a90:	2b01      	cmp	r3, #1
 8011a92:	4481      	add	r9, r0
 8011a94:	d01d      	beq.n	8011ad2 <uxr_prepare_stream_to_write_submessage+0x6a>
 8011a96:	2b02      	cmp	r3, #2
 8011a98:	d116      	bne.n	8011ac8 <uxr_prepare_stream_to_write_submessage+0x60>
 8011a9a:	4621      	mov	r1, r4
 8011a9c:	f10a 0008 	add.w	r0, sl, #8
 8011aa0:	f000 fede 	bl	8012860 <uxr_get_output_reliable_stream>
 8011aa4:	4604      	mov	r4, r0
 8011aa6:	b158      	cbz	r0, 8011ac0 <uxr_prepare_stream_to_write_submessage+0x58>
 8011aa8:	4649      	mov	r1, r9
 8011aaa:	4632      	mov	r2, r6
 8011aac:	f005 fe74 	bl	8017798 <uxr_prepare_reliable_buffer_to_write>
 8011ab0:	4604      	mov	r4, r0
 8011ab2:	b12c      	cbz	r4, 8011ac0 <uxr_prepare_stream_to_write_submessage+0x58>
 8011ab4:	4643      	mov	r3, r8
 8011ab6:	b2aa      	uxth	r2, r5
 8011ab8:	4639      	mov	r1, r7
 8011aba:	4630      	mov	r0, r6
 8011abc:	f000 ff04 	bl	80128c8 <uxr_buffer_submessage_header>
 8011ac0:	4620      	mov	r0, r4
 8011ac2:	b002      	add	sp, #8
 8011ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ac8:	2400      	movs	r4, #0
 8011aca:	4620      	mov	r0, r4
 8011acc:	b002      	add	sp, #8
 8011ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ad2:	4621      	mov	r1, r4
 8011ad4:	f10a 0008 	add.w	r0, sl, #8
 8011ad8:	f000 feba 	bl	8012850 <uxr_get_output_best_effort_stream>
 8011adc:	4604      	mov	r4, r0
 8011ade:	2800      	cmp	r0, #0
 8011ae0:	d0ee      	beq.n	8011ac0 <uxr_prepare_stream_to_write_submessage+0x58>
 8011ae2:	4649      	mov	r1, r9
 8011ae4:	4632      	mov	r2, r6
 8011ae6:	f005 fd87 	bl	80175f8 <uxr_prepare_best_effort_buffer_to_write>
 8011aea:	4604      	mov	r4, r0
 8011aec:	e7e1      	b.n	8011ab2 <uxr_prepare_stream_to_write_submessage+0x4a>
 8011aee:	bf00      	nop

08011af0 <uxr_init_session_info>:
 8011af0:	0e13      	lsrs	r3, r2, #24
 8011af2:	7043      	strb	r3, [r0, #1]
 8011af4:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8011af8:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8011afc:	7001      	strb	r1, [r0, #0]
 8011afe:	70c3      	strb	r3, [r0, #3]
 8011b00:	2109      	movs	r1, #9
 8011b02:	23ff      	movs	r3, #255	@ 0xff
 8011b04:	f880 c002 	strb.w	ip, [r0, #2]
 8011b08:	7102      	strb	r2, [r0, #4]
 8011b0a:	80c1      	strh	r1, [r0, #6]
 8011b0c:	7143      	strb	r3, [r0, #5]
 8011b0e:	4770      	bx	lr

08011b10 <uxr_buffer_create_session>:
 8011b10:	b530      	push	{r4, r5, lr}
 8011b12:	b089      	sub	sp, #36	@ 0x24
 8011b14:	2300      	movs	r3, #0
 8011b16:	4d12      	ldr	r5, [pc, #72]	@ (8011b60 <uxr_buffer_create_session+0x50>)
 8011b18:	9307      	str	r3, [sp, #28]
 8011b1a:	f8ad 201c 	strh.w	r2, [sp, #28]
 8011b1e:	2201      	movs	r2, #1
 8011b20:	9301      	str	r3, [sp, #4]
 8011b22:	80c2      	strh	r2, [r0, #6]
 8011b24:	f88d 2004 	strb.w	r2, [sp, #4]
 8011b28:	682a      	ldr	r2, [r5, #0]
 8011b2a:	9200      	str	r2, [sp, #0]
 8011b2c:	88aa      	ldrh	r2, [r5, #4]
 8011b2e:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011b32:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8011b36:	9202      	str	r2, [sp, #8]
 8011b38:	460c      	mov	r4, r1
 8011b3a:	7802      	ldrb	r2, [r0, #0]
 8011b3c:	9303      	str	r3, [sp, #12]
 8011b3e:	4619      	mov	r1, r3
 8011b40:	f88d 200c 	strb.w	r2, [sp, #12]
 8011b44:	4620      	mov	r0, r4
 8011b46:	2210      	movs	r2, #16
 8011b48:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8011b4c:	9306      	str	r3, [sp, #24]
 8011b4e:	f000 febb 	bl	80128c8 <uxr_buffer_submessage_header>
 8011b52:	4669      	mov	r1, sp
 8011b54:	4620      	mov	r0, r4
 8011b56:	f001 feff 	bl	8013958 <uxr_serialize_CREATE_CLIENT_Payload>
 8011b5a:	b009      	add	sp, #36	@ 0x24
 8011b5c:	bd30      	pop	{r4, r5, pc}
 8011b5e:	bf00      	nop
 8011b60:	08019a60 	.word	0x08019a60

08011b64 <uxr_buffer_delete_session>:
 8011b64:	b510      	push	{r4, lr}
 8011b66:	4b0c      	ldr	r3, [pc, #48]	@ (8011b98 <uxr_buffer_delete_session+0x34>)
 8011b68:	b082      	sub	sp, #8
 8011b6a:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 8011b6e:	f8ad c006 	strh.w	ip, [sp, #6]
 8011b72:	460c      	mov	r4, r1
 8011b74:	2202      	movs	r2, #2
 8011b76:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011b7a:	80c2      	strh	r2, [r0, #6]
 8011b7c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011b80:	2204      	movs	r2, #4
 8011b82:	2300      	movs	r3, #0
 8011b84:	2103      	movs	r1, #3
 8011b86:	4620      	mov	r0, r4
 8011b88:	f000 fe9e 	bl	80128c8 <uxr_buffer_submessage_header>
 8011b8c:	a901      	add	r1, sp, #4
 8011b8e:	4620      	mov	r0, r4
 8011b90:	f001 ff9c 	bl	8013acc <uxr_serialize_DELETE_Payload>
 8011b94:	b002      	add	sp, #8
 8011b96:	bd10      	pop	{r4, pc}
 8011b98:	08019a60 	.word	0x08019a60

08011b9c <uxr_read_create_session_status>:
 8011b9c:	b510      	push	{r4, lr}
 8011b9e:	b088      	sub	sp, #32
 8011ba0:	4604      	mov	r4, r0
 8011ba2:	4608      	mov	r0, r1
 8011ba4:	a901      	add	r1, sp, #4
 8011ba6:	f001 ffa1 	bl	8013aec <uxr_deserialize_STATUS_AGENT_Payload>
 8011baa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011bae:	7163      	strb	r3, [r4, #5]
 8011bb0:	b008      	add	sp, #32
 8011bb2:	bd10      	pop	{r4, pc}

08011bb4 <uxr_read_delete_session_status>:
 8011bb4:	b510      	push	{r4, lr}
 8011bb6:	4604      	mov	r4, r0
 8011bb8:	b084      	sub	sp, #16
 8011bba:	4608      	mov	r0, r1
 8011bbc:	a902      	add	r1, sp, #8
 8011bbe:	f001 ffc5 	bl	8013b4c <uxr_deserialize_STATUS_Payload>
 8011bc2:	88e3      	ldrh	r3, [r4, #6]
 8011bc4:	2b02      	cmp	r3, #2
 8011bc6:	d001      	beq.n	8011bcc <uxr_read_delete_session_status+0x18>
 8011bc8:	b004      	add	sp, #16
 8011bca:	bd10      	pop	{r4, pc}
 8011bcc:	f10d 000a 	add.w	r0, sp, #10
 8011bd0:	f7fe fd9e 	bl	8010710 <uxr_object_id_from_raw>
 8011bd4:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8011bd8:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8011bdc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011be0:	b29b      	uxth	r3, r3
 8011be2:	2b02      	cmp	r3, #2
 8011be4:	bf04      	itt	eq
 8011be6:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8011bea:	7163      	strbeq	r3, [r4, #5]
 8011bec:	b004      	add	sp, #16
 8011bee:	bd10      	pop	{r4, pc}

08011bf0 <uxr_stamp_create_session_header>:
 8011bf0:	b510      	push	{r4, lr}
 8011bf2:	2208      	movs	r2, #8
 8011bf4:	b08a      	sub	sp, #40	@ 0x28
 8011bf6:	4604      	mov	r4, r0
 8011bf8:	eb0d 0002 	add.w	r0, sp, r2
 8011bfc:	f7fe fa46 	bl	801008c <ucdr_init_buffer>
 8011c00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c04:	9400      	str	r4, [sp, #0]
 8011c06:	2300      	movs	r3, #0
 8011c08:	461a      	mov	r2, r3
 8011c0a:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8011c0e:	a802      	add	r0, sp, #8
 8011c10:	f001 f854 	bl	8012cbc <uxr_serialize_message_header>
 8011c14:	b00a      	add	sp, #40	@ 0x28
 8011c16:	bd10      	pop	{r4, pc}

08011c18 <uxr_stamp_session_header>:
 8011c18:	b530      	push	{r4, r5, lr}
 8011c1a:	b08d      	sub	sp, #52	@ 0x34
 8011c1c:	4604      	mov	r4, r0
 8011c1e:	460d      	mov	r5, r1
 8011c20:	9203      	str	r2, [sp, #12]
 8011c22:	4619      	mov	r1, r3
 8011c24:	a804      	add	r0, sp, #16
 8011c26:	2208      	movs	r2, #8
 8011c28:	f7fe fa30 	bl	801008c <ucdr_init_buffer>
 8011c2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c30:	9b03      	ldr	r3, [sp, #12]
 8011c32:	9400      	str	r4, [sp, #0]
 8011c34:	462a      	mov	r2, r5
 8011c36:	a804      	add	r0, sp, #16
 8011c38:	f001 f840 	bl	8012cbc <uxr_serialize_message_header>
 8011c3c:	b00d      	add	sp, #52	@ 0x34
 8011c3e:	bd30      	pop	{r4, r5, pc}

08011c40 <uxr_read_session_header>:
 8011c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c44:	4607      	mov	r7, r0
 8011c46:	b084      	sub	sp, #16
 8011c48:	4608      	mov	r0, r1
 8011c4a:	460c      	mov	r4, r1
 8011c4c:	4615      	mov	r5, r2
 8011c4e:	461e      	mov	r6, r3
 8011c50:	f7fe fa4c 	bl	80100ec <ucdr_buffer_remaining>
 8011c54:	2808      	cmp	r0, #8
 8011c56:	d803      	bhi.n	8011c60 <uxr_read_session_header+0x20>
 8011c58:	2000      	movs	r0, #0
 8011c5a:	b004      	add	sp, #16
 8011c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c60:	f10d 080c 	add.w	r8, sp, #12
 8011c64:	4633      	mov	r3, r6
 8011c66:	462a      	mov	r2, r5
 8011c68:	f8cd 8000 	str.w	r8, [sp]
 8011c6c:	4620      	mov	r0, r4
 8011c6e:	f10d 010b 	add.w	r1, sp, #11
 8011c72:	f001 f841 	bl	8012cf8 <uxr_deserialize_message_header>
 8011c76:	783a      	ldrb	r2, [r7, #0]
 8011c78:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8011c7c:	4293      	cmp	r3, r2
 8011c7e:	d1eb      	bne.n	8011c58 <uxr_read_session_header+0x18>
 8011c80:	061b      	lsls	r3, r3, #24
 8011c82:	d41c      	bmi.n	8011cbe <uxr_read_session_header+0x7e>
 8011c84:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8011c88:	787b      	ldrb	r3, [r7, #1]
 8011c8a:	429a      	cmp	r2, r3
 8011c8c:	d003      	beq.n	8011c96 <uxr_read_session_header+0x56>
 8011c8e:	2001      	movs	r0, #1
 8011c90:	f080 0001 	eor.w	r0, r0, #1
 8011c94:	e7e1      	b.n	8011c5a <uxr_read_session_header+0x1a>
 8011c96:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8011c9a:	78bb      	ldrb	r3, [r7, #2]
 8011c9c:	429a      	cmp	r2, r3
 8011c9e:	f107 0102 	add.w	r1, r7, #2
 8011ca2:	d1f4      	bne.n	8011c8e <uxr_read_session_header+0x4e>
 8011ca4:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8011ca8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011cac:	429a      	cmp	r2, r3
 8011cae:	d1ee      	bne.n	8011c8e <uxr_read_session_header+0x4e>
 8011cb0:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8011cb4:	784b      	ldrb	r3, [r1, #1]
 8011cb6:	429a      	cmp	r2, r3
 8011cb8:	d1e9      	bne.n	8011c8e <uxr_read_session_header+0x4e>
 8011cba:	2000      	movs	r0, #0
 8011cbc:	e7e8      	b.n	8011c90 <uxr_read_session_header+0x50>
 8011cbe:	2001      	movs	r0, #1
 8011cc0:	e7cb      	b.n	8011c5a <uxr_read_session_header+0x1a>
 8011cc2:	bf00      	nop

08011cc4 <uxr_session_header_offset>:
 8011cc4:	f990 3000 	ldrsb.w	r3, [r0]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	bfac      	ite	ge
 8011ccc:	2008      	movge	r0, #8
 8011cce:	2004      	movlt	r0, #4
 8011cd0:	4770      	bx	lr
 8011cd2:	bf00      	nop

08011cd4 <uxr_init_base_object_request>:
 8011cd4:	b510      	push	{r4, lr}
 8011cd6:	88c3      	ldrh	r3, [r0, #6]
 8011cd8:	b082      	sub	sp, #8
 8011cda:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8011cde:	9101      	str	r1, [sp, #4]
 8011ce0:	f1a3 010a 	sub.w	r1, r3, #10
 8011ce4:	b289      	uxth	r1, r1
 8011ce6:	42a1      	cmp	r1, r4
 8011ce8:	d80e      	bhi.n	8011d08 <uxr_init_base_object_request+0x34>
 8011cea:	3301      	adds	r3, #1
 8011cec:	b29c      	uxth	r4, r3
 8011cee:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011cf2:	b2db      	uxtb	r3, r3
 8011cf4:	80c4      	strh	r4, [r0, #6]
 8011cf6:	9801      	ldr	r0, [sp, #4]
 8011cf8:	7011      	strb	r1, [r2, #0]
 8011cfa:	7053      	strb	r3, [r2, #1]
 8011cfc:	1c91      	adds	r1, r2, #2
 8011cfe:	f7fe fd1b 	bl	8010738 <uxr_object_id_to_raw>
 8011d02:	4620      	mov	r0, r4
 8011d04:	b002      	add	sp, #8
 8011d06:	bd10      	pop	{r4, pc}
 8011d08:	230a      	movs	r3, #10
 8011d0a:	2100      	movs	r1, #0
 8011d0c:	461c      	mov	r4, r3
 8011d0e:	e7f1      	b.n	8011cf4 <uxr_init_base_object_request+0x20>

08011d10 <uxr_parse_base_object_request>:
 8011d10:	b570      	push	{r4, r5, r6, lr}
 8011d12:	4604      	mov	r4, r0
 8011d14:	3002      	adds	r0, #2
 8011d16:	460d      	mov	r5, r1
 8011d18:	4616      	mov	r6, r2
 8011d1a:	f7fe fcf9 	bl	8010710 <uxr_object_id_from_raw>
 8011d1e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8011d22:	8028      	strh	r0, [r5, #0]
 8011d24:	806b      	strh	r3, [r5, #2]
 8011d26:	7822      	ldrb	r2, [r4, #0]
 8011d28:	7863      	ldrb	r3, [r4, #1]
 8011d2a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011d2e:	8033      	strh	r3, [r6, #0]
 8011d30:	bd70      	pop	{r4, r5, r6, pc}
 8011d32:	bf00      	nop

08011d34 <uxr_init_framing_io>:
 8011d34:	2300      	movs	r3, #0
 8011d36:	7041      	strb	r1, [r0, #1]
 8011d38:	7003      	strb	r3, [r0, #0]
 8011d3a:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8011d3c:	4770      	bx	lr
 8011d3e:	bf00      	nop

08011d40 <uxr_write_framed_msg>:
 8011d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d44:	4617      	mov	r7, r2
 8011d46:	7842      	ldrb	r2, [r0, #1]
 8011d48:	b083      	sub	sp, #12
 8011d4a:	460e      	mov	r6, r1
 8011d4c:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8011d50:	469a      	mov	sl, r3
 8011d52:	2901      	cmp	r1, #1
 8011d54:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8011d58:	4604      	mov	r4, r0
 8011d5a:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8011d5e:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8011d62:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8011d66:	f240 8137 	bls.w	8011fd8 <uxr_write_framed_msg+0x298>
 8011d6a:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8011d6e:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8011d72:	2901      	cmp	r1, #1
 8011d74:	f04f 0202 	mov.w	r2, #2
 8011d78:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011d7c:	f240 808f 	bls.w	8011e9e <uxr_write_framed_msg+0x15e>
 8011d80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011d82:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8011d86:	b2dd      	uxtb	r5, r3
 8011d88:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8011d8c:	2203      	movs	r2, #3
 8011d8e:	2901      	cmp	r1, #1
 8011d90:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011d94:	f240 809a 	bls.w	8011ecc <uxr_write_framed_msg+0x18c>
 8011d98:	18a1      	adds	r1, r4, r2
 8011d9a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011d9c:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8011da0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011da4:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8011da8:	3201      	adds	r2, #1
 8011daa:	2801      	cmp	r0, #1
 8011dac:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011db0:	f240 80a0 	bls.w	8011ef4 <uxr_write_framed_msg+0x1b4>
 8011db4:	18a0      	adds	r0, r4, r2
 8011db6:	3201      	adds	r2, #1
 8011db8:	b2d2      	uxtb	r2, r2
 8011dba:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8011dbe:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	f000 80a9 	beq.w	8011f1a <uxr_write_framed_msg+0x1da>
 8011dc8:	f04f 0900 	mov.w	r9, #0
 8011dcc:	46c8      	mov	r8, r9
 8011dce:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8011dd2:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8011dd6:	2901      	cmp	r1, #1
 8011dd8:	f240 80c3 	bls.w	8011f62 <uxr_write_framed_msg+0x222>
 8011ddc:	2a29      	cmp	r2, #41	@ 0x29
 8011dde:	f200 809f 	bhi.w	8011f20 <uxr_write_framed_msg+0x1e0>
 8011de2:	18a1      	adds	r1, r4, r2
 8011de4:	3201      	adds	r2, #1
 8011de6:	b2d2      	uxtb	r2, r2
 8011de8:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8011dec:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011df0:	ea89 0303 	eor.w	r3, r9, r3
 8011df4:	498c      	ldr	r1, [pc, #560]	@ (8012028 <uxr_write_framed_msg+0x2e8>)
 8011df6:	b2db      	uxtb	r3, r3
 8011df8:	f108 0801 	add.w	r8, r8, #1
 8011dfc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011e00:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8011e04:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011e06:	4543      	cmp	r3, r8
 8011e08:	d8e1      	bhi.n	8011dce <uxr_write_framed_msg+0x8e>
 8011e0a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8011e0e:	fa5f f889 	uxtb.w	r8, r9
 8011e12:	9301      	str	r3, [sp, #4]
 8011e14:	f04f 0900 	mov.w	r9, #0
 8011e18:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8011e1c:	fa5f f18a 	uxtb.w	r1, sl
 8011e20:	2901      	cmp	r1, #1
 8011e22:	d921      	bls.n	8011e68 <uxr_write_framed_msg+0x128>
 8011e24:	2a29      	cmp	r2, #41	@ 0x29
 8011e26:	f240 80af 	bls.w	8011f88 <uxr_write_framed_msg+0x248>
 8011e2a:	2500      	movs	r5, #0
 8011e2c:	e000      	b.n	8011e30 <uxr_write_framed_msg+0xf0>
 8011e2e:	b160      	cbz	r0, 8011e4a <uxr_write_framed_msg+0x10a>
 8011e30:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011e34:	1b52      	subs	r2, r2, r5
 8011e36:	465b      	mov	r3, fp
 8011e38:	4421      	add	r1, r4
 8011e3a:	4638      	mov	r0, r7
 8011e3c:	47b0      	blx	r6
 8011e3e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8011e42:	4405      	add	r5, r0
 8011e44:	4295      	cmp	r5, r2
 8011e46:	d3f2      	bcc.n	8011e2e <uxr_write_framed_msg+0xee>
 8011e48:	d003      	beq.n	8011e52 <uxr_write_framed_msg+0x112>
 8011e4a:	2000      	movs	r0, #0
 8011e4c:	b003      	add	sp, #12
 8011e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e52:	fa5f f18a 	uxtb.w	r1, sl
 8011e56:	f04f 0300 	mov.w	r3, #0
 8011e5a:	2901      	cmp	r1, #1
 8011e5c:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8011e60:	f04f 0200 	mov.w	r2, #0
 8011e64:	f200 8090 	bhi.w	8011f88 <uxr_write_framed_msg+0x248>
 8011e68:	1c51      	adds	r1, r2, #1
 8011e6a:	b2c9      	uxtb	r1, r1
 8011e6c:	2929      	cmp	r1, #41	@ 0x29
 8011e6e:	d8dc      	bhi.n	8011e2a <uxr_write_framed_msg+0xea>
 8011e70:	18a5      	adds	r5, r4, r2
 8011e72:	4421      	add	r1, r4
 8011e74:	3202      	adds	r2, #2
 8011e76:	f088 0820 	eor.w	r8, r8, #32
 8011e7a:	4648      	mov	r0, r9
 8011e7c:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8011e80:	b2d2      	uxtb	r2, r2
 8011e82:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8011e86:	f04f 0901 	mov.w	r9, #1
 8011e8a:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8011e8e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011e92:	2800      	cmp	r0, #0
 8011e94:	f040 8085 	bne.w	8011fa2 <uxr_write_framed_msg+0x262>
 8011e98:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011e9c:	e7bc      	b.n	8011e18 <uxr_write_framed_msg+0xd8>
 8011e9e:	4611      	mov	r1, r2
 8011ea0:	f04f 0c03 	mov.w	ip, #3
 8011ea4:	2204      	movs	r2, #4
 8011ea6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011ea8:	4421      	add	r1, r4
 8011eaa:	b2dd      	uxtb	r5, r3
 8011eac:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8011eb0:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8011eb4:	44a4      	add	ip, r4
 8011eb6:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8011eba:	f080 0020 	eor.w	r0, r0, #32
 8011ebe:	2901      	cmp	r1, #1
 8011ec0:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8011ec4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011ec8:	f63f af66 	bhi.w	8011d98 <uxr_write_framed_msg+0x58>
 8011ecc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011ece:	18a0      	adds	r0, r4, r2
 8011ed0:	f085 0520 	eor.w	r5, r5, #32
 8011ed4:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8011ed8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011edc:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8011ee0:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8011ee4:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8011ee8:	3202      	adds	r2, #2
 8011eea:	2801      	cmp	r0, #1
 8011eec:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011ef0:	f63f af60 	bhi.w	8011db4 <uxr_write_framed_msg+0x74>
 8011ef4:	1c50      	adds	r0, r2, #1
 8011ef6:	18a5      	adds	r5, r4, r2
 8011ef8:	fa54 f080 	uxtab	r0, r4, r0
 8011efc:	3202      	adds	r2, #2
 8011efe:	f081 0120 	eor.w	r1, r1, #32
 8011f02:	b2d2      	uxtb	r2, r2
 8011f04:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8011f08:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8011f0c:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8011f10:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	f47f af57 	bne.w	8011dc8 <uxr_write_framed_msg+0x88>
 8011f1a:	9301      	str	r3, [sp, #4]
 8011f1c:	4698      	mov	r8, r3
 8011f1e:	e779      	b.n	8011e14 <uxr_write_framed_msg+0xd4>
 8011f20:	2500      	movs	r5, #0
 8011f22:	e001      	b.n	8011f28 <uxr_write_framed_msg+0x1e8>
 8011f24:	2800      	cmp	r0, #0
 8011f26:	d090      	beq.n	8011e4a <uxr_write_framed_msg+0x10a>
 8011f28:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011f2c:	1b52      	subs	r2, r2, r5
 8011f2e:	465b      	mov	r3, fp
 8011f30:	4421      	add	r1, r4
 8011f32:	4638      	mov	r0, r7
 8011f34:	47b0      	blx	r6
 8011f36:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8011f3a:	4405      	add	r5, r0
 8011f3c:	4295      	cmp	r5, r2
 8011f3e:	d3f1      	bcc.n	8011f24 <uxr_write_framed_msg+0x1e4>
 8011f40:	d183      	bne.n	8011e4a <uxr_write_framed_msg+0x10a>
 8011f42:	f04f 0300 	mov.w	r3, #0
 8011f46:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8011f4a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011f4c:	4543      	cmp	r3, r8
 8011f4e:	d964      	bls.n	801201a <uxr_write_framed_msg+0x2da>
 8011f50:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8011f54:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8011f58:	2901      	cmp	r1, #1
 8011f5a:	f04f 0200 	mov.w	r2, #0
 8011f5e:	f63f af3d 	bhi.w	8011ddc <uxr_write_framed_msg+0x9c>
 8011f62:	1c51      	adds	r1, r2, #1
 8011f64:	b2c9      	uxtb	r1, r1
 8011f66:	2929      	cmp	r1, #41	@ 0x29
 8011f68:	d8da      	bhi.n	8011f20 <uxr_write_framed_msg+0x1e0>
 8011f6a:	18a0      	adds	r0, r4, r2
 8011f6c:	4421      	add	r1, r4
 8011f6e:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8011f72:	3202      	adds	r2, #2
 8011f74:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8011f78:	b2d2      	uxtb	r2, r2
 8011f7a:	f083 0020 	eor.w	r0, r3, #32
 8011f7e:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8011f82:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011f86:	e733      	b.n	8011df0 <uxr_write_framed_msg+0xb0>
 8011f88:	18a1      	adds	r1, r4, r2
 8011f8a:	3201      	adds	r2, #1
 8011f8c:	4648      	mov	r0, r9
 8011f8e:	b2d2      	uxtb	r2, r2
 8011f90:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8011f94:	f04f 0901 	mov.w	r9, #1
 8011f98:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011f9c:	2800      	cmp	r0, #0
 8011f9e:	f43f af7b 	beq.w	8011e98 <uxr_write_framed_msg+0x158>
 8011fa2:	2500      	movs	r5, #0
 8011fa4:	e002      	b.n	8011fac <uxr_write_framed_msg+0x26c>
 8011fa6:	2800      	cmp	r0, #0
 8011fa8:	f43f af4f 	beq.w	8011e4a <uxr_write_framed_msg+0x10a>
 8011fac:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011fb0:	1b52      	subs	r2, r2, r5
 8011fb2:	465b      	mov	r3, fp
 8011fb4:	4421      	add	r1, r4
 8011fb6:	4638      	mov	r0, r7
 8011fb8:	47b0      	blx	r6
 8011fba:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8011fbe:	4405      	add	r5, r0
 8011fc0:	4295      	cmp	r5, r2
 8011fc2:	d3f0      	bcc.n	8011fa6 <uxr_write_framed_msg+0x266>
 8011fc4:	f47f af41 	bne.w	8011e4a <uxr_write_framed_msg+0x10a>
 8011fc8:	2300      	movs	r3, #0
 8011fca:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8011fce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011fd0:	b298      	uxth	r0, r3
 8011fd2:	b003      	add	sp, #12
 8011fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fd8:	217d      	movs	r1, #125	@ 0x7d
 8011fda:	f082 0220 	eor.w	r2, r2, #32
 8011fde:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8011fe2:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8011fe6:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8011fea:	2901      	cmp	r1, #1
 8011fec:	f04f 0203 	mov.w	r2, #3
 8011ff0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011ff4:	d804      	bhi.n	8012000 <uxr_write_framed_msg+0x2c0>
 8011ff6:	4611      	mov	r1, r2
 8011ff8:	f04f 0c04 	mov.w	ip, #4
 8011ffc:	2205      	movs	r2, #5
 8011ffe:	e752      	b.n	8011ea6 <uxr_write_framed_msg+0x166>
 8012000:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012002:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8012006:	b2dd      	uxtb	r5, r3
 8012008:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801200c:	2204      	movs	r2, #4
 801200e:	2901      	cmp	r1, #1
 8012010:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012014:	f63f aec0 	bhi.w	8011d98 <uxr_write_framed_msg+0x58>
 8012018:	e758      	b.n	8011ecc <uxr_write_framed_msg+0x18c>
 801201a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801201e:	fa5f f889 	uxtb.w	r8, r9
 8012022:	9301      	str	r3, [sp, #4]
 8012024:	2200      	movs	r2, #0
 8012026:	e6f5      	b.n	8011e14 <uxr_write_framed_msg+0xd4>
 8012028:	0801a244 	.word	0x0801a244

0801202c <uxr_framing_read_transport>:
 801202c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012030:	4604      	mov	r4, r0
 8012032:	b083      	sub	sp, #12
 8012034:	461f      	mov	r7, r3
 8012036:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 801203a:	4689      	mov	r9, r1
 801203c:	4692      	mov	sl, r2
 801203e:	f000 fc89 	bl	8012954 <uxr_millis>
 8012042:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012046:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 801204a:	42b3      	cmp	r3, r6
 801204c:	4680      	mov	r8, r0
 801204e:	d061      	beq.n	8012114 <uxr_framing_read_transport+0xe8>
 8012050:	d81c      	bhi.n	801208c <uxr_framing_read_transport+0x60>
 8012052:	1e75      	subs	r5, r6, #1
 8012054:	1aed      	subs	r5, r5, r3
 8012056:	b2ed      	uxtb	r5, r5
 8012058:	2600      	movs	r6, #0
 801205a:	455d      	cmp	r5, fp
 801205c:	d81f      	bhi.n	801209e <uxr_framing_read_transport+0x72>
 801205e:	19ab      	adds	r3, r5, r6
 8012060:	455b      	cmp	r3, fp
 8012062:	bf84      	itt	hi
 8012064:	ebab 0605 	subhi.w	r6, fp, r5
 8012068:	b2f6      	uxtbhi	r6, r6
 801206a:	b9ed      	cbnz	r5, 80120a8 <uxr_framing_read_transport+0x7c>
 801206c:	f04f 0b00 	mov.w	fp, #0
 8012070:	f000 fc70 	bl	8012954 <uxr_millis>
 8012074:	683b      	ldr	r3, [r7, #0]
 8012076:	eba0 0808 	sub.w	r8, r0, r8
 801207a:	eba3 0308 	sub.w	r3, r3, r8
 801207e:	4658      	mov	r0, fp
 8012080:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012084:	603b      	str	r3, [r7, #0]
 8012086:	b003      	add	sp, #12
 8012088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801208c:	2e00      	cmp	r6, #0
 801208e:	d049      	beq.n	8012124 <uxr_framing_read_transport+0xf8>
 8012090:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8012094:	b2ed      	uxtb	r5, r5
 8012096:	3e01      	subs	r6, #1
 8012098:	455d      	cmp	r5, fp
 801209a:	b2f6      	uxtb	r6, r6
 801209c:	d9df      	bls.n	801205e <uxr_framing_read_transport+0x32>
 801209e:	fa5f f58b 	uxtb.w	r5, fp
 80120a2:	2600      	movs	r6, #0
 80120a4:	2d00      	cmp	r5, #0
 80120a6:	d0e1      	beq.n	801206c <uxr_framing_read_transport+0x40>
 80120a8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80120ac:	3102      	adds	r1, #2
 80120ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80120b0:	9300      	str	r3, [sp, #0]
 80120b2:	683b      	ldr	r3, [r7, #0]
 80120b4:	4421      	add	r1, r4
 80120b6:	462a      	mov	r2, r5
 80120b8:	4650      	mov	r0, sl
 80120ba:	47c8      	blx	r9
 80120bc:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80120c0:	4a1a      	ldr	r2, [pc, #104]	@ (801212c <uxr_framing_read_transport+0x100>)
 80120c2:	4403      	add	r3, r0
 80120c4:	0859      	lsrs	r1, r3, #1
 80120c6:	fba2 2101 	umull	r2, r1, r2, r1
 80120ca:	0889      	lsrs	r1, r1, #2
 80120cc:	222a      	movs	r2, #42	@ 0x2a
 80120ce:	fb02 3111 	mls	r1, r2, r1, r3
 80120d2:	4683      	mov	fp, r0
 80120d4:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 80120d8:	2800      	cmp	r0, #0
 80120da:	d0c7      	beq.n	801206c <uxr_framing_read_transport+0x40>
 80120dc:	42a8      	cmp	r0, r5
 80120de:	d1c7      	bne.n	8012070 <uxr_framing_read_transport+0x44>
 80120e0:	2e00      	cmp	r6, #0
 80120e2:	d0c5      	beq.n	8012070 <uxr_framing_read_transport+0x44>
 80120e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80120e6:	9300      	str	r3, [sp, #0]
 80120e8:	3102      	adds	r1, #2
 80120ea:	4632      	mov	r2, r6
 80120ec:	4421      	add	r1, r4
 80120ee:	2300      	movs	r3, #0
 80120f0:	4650      	mov	r0, sl
 80120f2:	47c8      	blx	r9
 80120f4:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80120f8:	4a0c      	ldr	r2, [pc, #48]	@ (801212c <uxr_framing_read_transport+0x100>)
 80120fa:	180b      	adds	r3, r1, r0
 80120fc:	0859      	lsrs	r1, r3, #1
 80120fe:	fba2 1201 	umull	r1, r2, r2, r1
 8012102:	0892      	lsrs	r2, r2, #2
 8012104:	212a      	movs	r1, #42	@ 0x2a
 8012106:	fb01 3312 	mls	r3, r1, r2, r3
 801210a:	eb00 0b05 	add.w	fp, r0, r5
 801210e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8012112:	e7ad      	b.n	8012070 <uxr_framing_read_transport+0x44>
 8012114:	2600      	movs	r6, #0
 8012116:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 801211a:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 801211c:	d9bf      	bls.n	801209e <uxr_framing_read_transport+0x72>
 801211e:	2102      	movs	r1, #2
 8012120:	2529      	movs	r5, #41	@ 0x29
 8012122:	e7c4      	b.n	80120ae <uxr_framing_read_transport+0x82>
 8012124:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8012128:	b2ed      	uxtb	r5, r5
 801212a:	e796      	b.n	801205a <uxr_framing_read_transport+0x2e>
 801212c:	30c30c31 	.word	0x30c30c31

08012130 <uxr_read_framed_msg>:
 8012130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012134:	461e      	mov	r6, r3
 8012136:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 801213a:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 801213e:	429d      	cmp	r5, r3
 8012140:	b083      	sub	sp, #12
 8012142:	4604      	mov	r4, r0
 8012144:	4688      	mov	r8, r1
 8012146:	4691      	mov	r9, r2
 8012148:	f000 8188 	beq.w	801245c <uxr_read_framed_msg+0x32c>
 801214c:	7823      	ldrb	r3, [r4, #0]
 801214e:	4dc1      	ldr	r5, [pc, #772]	@ (8012454 <uxr_read_framed_msg+0x324>)
 8012150:	4fc1      	ldr	r7, [pc, #772]	@ (8012458 <uxr_read_framed_msg+0x328>)
 8012152:	2b07      	cmp	r3, #7
 8012154:	d8fd      	bhi.n	8012152 <uxr_read_framed_msg+0x22>
 8012156:	e8df f013 	tbh	[pc, r3, lsl #1]
 801215a:	0115      	.short	0x0115
 801215c:	00d600f6 	.word	0x00d600f6
 8012160:	009000b9 	.word	0x009000b9
 8012164:	0030004d 	.word	0x0030004d
 8012168:	0008      	.short	0x0008
 801216a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801216e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012172:	4299      	cmp	r1, r3
 8012174:	f000 814a 	beq.w	801240c <uxr_read_framed_msg+0x2dc>
 8012178:	18e2      	adds	r2, r4, r3
 801217a:	7892      	ldrb	r2, [r2, #2]
 801217c:	2a7d      	cmp	r2, #125	@ 0x7d
 801217e:	f000 8199 	beq.w	80124b4 <uxr_read_framed_msg+0x384>
 8012182:	3301      	adds	r3, #1
 8012184:	0858      	lsrs	r0, r3, #1
 8012186:	fba5 1000 	umull	r1, r0, r5, r0
 801218a:	0880      	lsrs	r0, r0, #2
 801218c:	212a      	movs	r1, #42	@ 0x2a
 801218e:	fb01 3310 	mls	r3, r1, r0, r3
 8012192:	2a7e      	cmp	r2, #126	@ 0x7e
 8012194:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012198:	f000 8252 	beq.w	8012640 <uxr_read_framed_msg+0x510>
 801219c:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801219e:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 80121a0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80121a4:	b29b      	uxth	r3, r3
 80121a6:	2200      	movs	r2, #0
 80121a8:	4299      	cmp	r1, r3
 80121aa:	86a3      	strh	r3, [r4, #52]	@ 0x34
 80121ac:	7022      	strb	r2, [r4, #0]
 80121ae:	f000 8179 	beq.w	80124a4 <uxr_read_framed_msg+0x374>
 80121b2:	2000      	movs	r0, #0
 80121b4:	b003      	add	sp, #12
 80121b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121ba:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80121be:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80121c2:	4299      	cmp	r1, r3
 80121c4:	f000 8131 	beq.w	801242a <uxr_read_framed_msg+0x2fa>
 80121c8:	18e2      	adds	r2, r4, r3
 80121ca:	7890      	ldrb	r0, [r2, #2]
 80121cc:	287d      	cmp	r0, #125	@ 0x7d
 80121ce:	f000 8190 	beq.w	80124f2 <uxr_read_framed_msg+0x3c2>
 80121d2:	3301      	adds	r3, #1
 80121d4:	085a      	lsrs	r2, r3, #1
 80121d6:	fba5 1202 	umull	r1, r2, r5, r2
 80121da:	0892      	lsrs	r2, r2, #2
 80121dc:	212a      	movs	r1, #42	@ 0x2a
 80121de:	fb01 3312 	mls	r3, r1, r2, r3
 80121e2:	287e      	cmp	r0, #126	@ 0x7e
 80121e4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80121e8:	f000 821a 	beq.w	8012620 <uxr_read_framed_msg+0x4f0>
 80121ec:	2307      	movs	r3, #7
 80121ee:	86a0      	strh	r0, [r4, #52]	@ 0x34
 80121f0:	7023      	strb	r3, [r4, #0]
 80121f2:	e7ae      	b.n	8012152 <uxr_read_framed_msg+0x22>
 80121f4:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80121f6:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 80121fa:	459e      	cmp	lr, r3
 80121fc:	d938      	bls.n	8012270 <uxr_read_framed_msg+0x140>
 80121fe:	ee07 8a90 	vmov	s15, r8
 8012202:	212a      	movs	r1, #42	@ 0x2a
 8012204:	e020      	b.n	8012248 <uxr_read_framed_msg+0x118>
 8012206:	f89b c002 	ldrb.w	ip, [fp, #2]
 801220a:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801220e:	f000 80d4 	beq.w	80123ba <uxr_read_framed_msg+0x28a>
 8012212:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8012216:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801221a:	f000 8219 	beq.w	8012650 <uxr_read_framed_msg+0x520>
 801221e:	f806 c003 	strb.w	ip, [r6, r3]
 8012222:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8012226:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8012228:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801222c:	ea8a 000c 	eor.w	r0, sl, ip
 8012230:	b2c0      	uxtb	r0, r0
 8012232:	3301      	adds	r3, #1
 8012234:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8012238:	b29b      	uxth	r3, r3
 801223a:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 801223e:	4573      	cmp	r3, lr
 8012240:	8663      	strh	r3, [r4, #50]	@ 0x32
 8012242:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8012244:	f080 8120 	bcs.w	8012488 <uxr_read_framed_msg+0x358>
 8012248:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 801224c:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8012250:	f100 0c01 	add.w	ip, r0, #1
 8012254:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012258:	fba5 8202 	umull	r8, r2, r5, r2
 801225c:	0892      	lsrs	r2, r2, #2
 801225e:	4582      	cmp	sl, r0
 8012260:	eb04 0b00 	add.w	fp, r4, r0
 8012264:	fb01 c212 	mls	r2, r1, r2, ip
 8012268:	d1cd      	bne.n	8012206 <uxr_read_framed_msg+0xd6>
 801226a:	ee17 8a90 	vmov	r8, s15
 801226e:	459e      	cmp	lr, r3
 8012270:	f040 8111 	bne.w	8012496 <uxr_read_framed_msg+0x366>
 8012274:	2306      	movs	r3, #6
 8012276:	7023      	strb	r3, [r4, #0]
 8012278:	e76b      	b.n	8012152 <uxr_read_framed_msg+0x22>
 801227a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801227e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012282:	4298      	cmp	r0, r3
 8012284:	f000 80c2 	beq.w	801240c <uxr_read_framed_msg+0x2dc>
 8012288:	18e2      	adds	r2, r4, r3
 801228a:	7891      	ldrb	r1, [r2, #2]
 801228c:	297d      	cmp	r1, #125	@ 0x7d
 801228e:	f000 814c 	beq.w	801252a <uxr_read_framed_msg+0x3fa>
 8012292:	3301      	adds	r3, #1
 8012294:	085a      	lsrs	r2, r3, #1
 8012296:	fba5 0202 	umull	r0, r2, r5, r2
 801229a:	0892      	lsrs	r2, r2, #2
 801229c:	202a      	movs	r0, #42	@ 0x2a
 801229e:	fb00 3312 	mls	r3, r0, r2, r3
 80122a2:	297e      	cmp	r1, #126	@ 0x7e
 80122a4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80122a8:	f000 81ca 	beq.w	8012640 <uxr_read_framed_msg+0x510>
 80122ac:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 80122ae:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80122b2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80122b4:	b29b      	uxth	r3, r3
 80122b6:	2000      	movs	r0, #0
 80122b8:	428b      	cmp	r3, r1
 80122ba:	8623      	strh	r3, [r4, #48]	@ 0x30
 80122bc:	8660      	strh	r0, [r4, #50]	@ 0x32
 80122be:	86e0      	strh	r0, [r4, #54]	@ 0x36
 80122c0:	f240 80df 	bls.w	8012482 <uxr_read_framed_msg+0x352>
 80122c4:	7020      	strb	r0, [r4, #0]
 80122c6:	b003      	add	sp, #12
 80122c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122cc:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80122d0:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80122d4:	4299      	cmp	r1, r3
 80122d6:	f000 80a8 	beq.w	801242a <uxr_read_framed_msg+0x2fa>
 80122da:	18e2      	adds	r2, r4, r3
 80122dc:	7890      	ldrb	r0, [r2, #2]
 80122de:	287d      	cmp	r0, #125	@ 0x7d
 80122e0:	f000 8164 	beq.w	80125ac <uxr_read_framed_msg+0x47c>
 80122e4:	3301      	adds	r3, #1
 80122e6:	085a      	lsrs	r2, r3, #1
 80122e8:	fba5 1202 	umull	r1, r2, r5, r2
 80122ec:	0892      	lsrs	r2, r2, #2
 80122ee:	212a      	movs	r1, #42	@ 0x2a
 80122f0:	fb01 3312 	mls	r3, r1, r2, r3
 80122f4:	287e      	cmp	r0, #126	@ 0x7e
 80122f6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80122fa:	f000 8191 	beq.w	8012620 <uxr_read_framed_msg+0x4f0>
 80122fe:	2304      	movs	r3, #4
 8012300:	8620      	strh	r0, [r4, #48]	@ 0x30
 8012302:	7023      	strb	r3, [r4, #0]
 8012304:	e725      	b.n	8012152 <uxr_read_framed_msg+0x22>
 8012306:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801230a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801230e:	4290      	cmp	r0, r2
 8012310:	f000 80b3 	beq.w	801247a <uxr_read_framed_msg+0x34a>
 8012314:	18a3      	adds	r3, r4, r2
 8012316:	7899      	ldrb	r1, [r3, #2]
 8012318:	297d      	cmp	r1, #125	@ 0x7d
 801231a:	f000 8164 	beq.w	80125e6 <uxr_read_framed_msg+0x4b6>
 801231e:	3201      	adds	r2, #1
 8012320:	0850      	lsrs	r0, r2, #1
 8012322:	fba5 3000 	umull	r3, r0, r5, r0
 8012326:	0880      	lsrs	r0, r0, #2
 8012328:	232a      	movs	r3, #42	@ 0x2a
 801232a:	fb03 2210 	mls	r2, r3, r0, r2
 801232e:	297e      	cmp	r1, #126	@ 0x7e
 8012330:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012334:	f000 8188 	beq.w	8012648 <uxr_read_framed_msg+0x518>
 8012338:	7863      	ldrb	r3, [r4, #1]
 801233a:	428b      	cmp	r3, r1
 801233c:	bf0c      	ite	eq
 801233e:	2303      	moveq	r3, #3
 8012340:	2300      	movne	r3, #0
 8012342:	7023      	strb	r3, [r4, #0]
 8012344:	e705      	b.n	8012152 <uxr_read_framed_msg+0x22>
 8012346:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801234a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801234e:	2200      	movs	r2, #0
 8012350:	4299      	cmp	r1, r3
 8012352:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8012356:	d06c      	beq.n	8012432 <uxr_read_framed_msg+0x302>
 8012358:	18e2      	adds	r2, r4, r3
 801235a:	7890      	ldrb	r0, [r2, #2]
 801235c:	287d      	cmp	r0, #125	@ 0x7d
 801235e:	f000 8101 	beq.w	8012564 <uxr_read_framed_msg+0x434>
 8012362:	3301      	adds	r3, #1
 8012364:	085a      	lsrs	r2, r3, #1
 8012366:	fba5 1202 	umull	r1, r2, r5, r2
 801236a:	0892      	lsrs	r2, r2, #2
 801236c:	212a      	movs	r1, #42	@ 0x2a
 801236e:	fb01 3312 	mls	r3, r1, r2, r3
 8012372:	287e      	cmp	r0, #126	@ 0x7e
 8012374:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8012378:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801237c:	d059      	beq.n	8012432 <uxr_read_framed_msg+0x302>
 801237e:	2302      	movs	r3, #2
 8012380:	7023      	strb	r3, [r4, #0]
 8012382:	e6e6      	b.n	8012152 <uxr_read_framed_msg+0x22>
 8012384:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8012388:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801238c:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8012390:	1c51      	adds	r1, r2, #1
 8012392:	084b      	lsrs	r3, r1, #1
 8012394:	fba5 c303 	umull	ip, r3, r5, r3
 8012398:	089b      	lsrs	r3, r3, #2
 801239a:	fb0e 1313 	mls	r3, lr, r3, r1
 801239e:	4592      	cmp	sl, r2
 80123a0:	eb04 0002 	add.w	r0, r4, r2
 80123a4:	b2da      	uxtb	r2, r3
 80123a6:	f43f af04 	beq.w	80121b2 <uxr_read_framed_msg+0x82>
 80123aa:	7883      	ldrb	r3, [r0, #2]
 80123ac:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80123b0:	2b7e      	cmp	r3, #126	@ 0x7e
 80123b2:	d1ed      	bne.n	8012390 <uxr_read_framed_msg+0x260>
 80123b4:	2301      	movs	r3, #1
 80123b6:	7023      	strb	r3, [r4, #0]
 80123b8:	e6cb      	b.n	8012152 <uxr_read_framed_msg+0x22>
 80123ba:	f100 0c01 	add.w	ip, r0, #1
 80123be:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80123c2:	fba5 8202 	umull	r8, r2, r5, r2
 80123c6:	0892      	lsrs	r2, r2, #2
 80123c8:	fb01 c212 	mls	r2, r1, r2, ip
 80123cc:	eb04 0c02 	add.w	ip, r4, r2
 80123d0:	b2d2      	uxtb	r2, r2
 80123d2:	4592      	cmp	sl, r2
 80123d4:	f100 0002 	add.w	r0, r0, #2
 80123d8:	f43f af47 	beq.w	801226a <uxr_read_framed_msg+0x13a>
 80123dc:	0842      	lsrs	r2, r0, #1
 80123de:	f89c a002 	ldrb.w	sl, [ip, #2]
 80123e2:	fba5 8202 	umull	r8, r2, r5, r2
 80123e6:	0892      	lsrs	r2, r2, #2
 80123e8:	fb01 0012 	mls	r0, r1, r2, r0
 80123ec:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 80123f0:	f08a 0c20 	eor.w	ip, sl, #32
 80123f4:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 80123f8:	f47f af11 	bne.w	801221e <uxr_read_framed_msg+0xee>
 80123fc:	459e      	cmp	lr, r3
 80123fe:	ee17 8a90 	vmov	r8, s15
 8012402:	f43f af37 	beq.w	8012274 <uxr_read_framed_msg+0x144>
 8012406:	2301      	movs	r3, #1
 8012408:	7023      	strb	r3, [r4, #0]
 801240a:	e6a2      	b.n	8012152 <uxr_read_framed_msg+0x22>
 801240c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801240e:	9300      	str	r3, [sp, #0]
 8012410:	2301      	movs	r3, #1
 8012412:	9301      	str	r3, [sp, #4]
 8012414:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012416:	464a      	mov	r2, r9
 8012418:	4641      	mov	r1, r8
 801241a:	4620      	mov	r0, r4
 801241c:	f7ff fe06 	bl	801202c <uxr_framing_read_transport>
 8012420:	2800      	cmp	r0, #0
 8012422:	f43f aec6 	beq.w	80121b2 <uxr_read_framed_msg+0x82>
 8012426:	7823      	ldrb	r3, [r4, #0]
 8012428:	e693      	b.n	8012152 <uxr_read_framed_msg+0x22>
 801242a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801242c:	9300      	str	r3, [sp, #0]
 801242e:	2302      	movs	r3, #2
 8012430:	e7ef      	b.n	8012412 <uxr_read_framed_msg+0x2e2>
 8012432:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012434:	9300      	str	r3, [sp, #0]
 8012436:	2304      	movs	r3, #4
 8012438:	9301      	str	r3, [sp, #4]
 801243a:	464a      	mov	r2, r9
 801243c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801243e:	4641      	mov	r1, r8
 8012440:	4620      	mov	r0, r4
 8012442:	f7ff fdf3 	bl	801202c <uxr_framing_read_transport>
 8012446:	2800      	cmp	r0, #0
 8012448:	d1ed      	bne.n	8012426 <uxr_read_framed_msg+0x2f6>
 801244a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801244e:	2b7e      	cmp	r3, #126	@ 0x7e
 8012450:	d0e9      	beq.n	8012426 <uxr_read_framed_msg+0x2f6>
 8012452:	e6ae      	b.n	80121b2 <uxr_read_framed_msg+0x82>
 8012454:	30c30c31 	.word	0x30c30c31
 8012458:	0801a244 	.word	0x0801a244
 801245c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801245e:	9300      	str	r3, [sp, #0]
 8012460:	2305      	movs	r3, #5
 8012462:	9301      	str	r3, [sp, #4]
 8012464:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012466:	f7ff fde1 	bl	801202c <uxr_framing_read_transport>
 801246a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801246e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012472:	429a      	cmp	r2, r3
 8012474:	f43f ae9d 	beq.w	80121b2 <uxr_read_framed_msg+0x82>
 8012478:	e668      	b.n	801214c <uxr_read_framed_msg+0x1c>
 801247a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801247c:	9300      	str	r3, [sp, #0]
 801247e:	2303      	movs	r3, #3
 8012480:	e7c7      	b.n	8012412 <uxr_read_framed_msg+0x2e2>
 8012482:	2305      	movs	r3, #5
 8012484:	7023      	strb	r3, [r4, #0]
 8012486:	e664      	b.n	8012152 <uxr_read_framed_msg+0x22>
 8012488:	ee17 8a90 	vmov	r8, s15
 801248c:	f43f aef2 	beq.w	8012274 <uxr_read_framed_msg+0x144>
 8012490:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8012494:	d08e      	beq.n	80123b4 <uxr_read_framed_msg+0x284>
 8012496:	ebae 0303 	sub.w	r3, lr, r3
 801249a:	3302      	adds	r3, #2
 801249c:	9301      	str	r3, [sp, #4]
 801249e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80124a0:	9300      	str	r3, [sp, #0]
 80124a2:	e7b7      	b.n	8012414 <uxr_read_framed_msg+0x2e4>
 80124a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80124a6:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80124aa:	7013      	strb	r3, [r2, #0]
 80124ac:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 80124ae:	b003      	add	sp, #12
 80124b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124b4:	f103 0c01 	add.w	ip, r3, #1
 80124b8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80124bc:	fba5 0202 	umull	r0, r2, r5, r2
 80124c0:	0892      	lsrs	r2, r2, #2
 80124c2:	202a      	movs	r0, #42	@ 0x2a
 80124c4:	fb00 c212 	mls	r2, r0, r2, ip
 80124c8:	fa5f fc82 	uxtb.w	ip, r2
 80124cc:	4561      	cmp	r1, ip
 80124ce:	d09d      	beq.n	801240c <uxr_read_framed_msg+0x2dc>
 80124d0:	3302      	adds	r3, #2
 80124d2:	4422      	add	r2, r4
 80124d4:	0859      	lsrs	r1, r3, #1
 80124d6:	7892      	ldrb	r2, [r2, #2]
 80124d8:	fba5 c101 	umull	ip, r1, r5, r1
 80124dc:	0889      	lsrs	r1, r1, #2
 80124de:	fb00 3311 	mls	r3, r0, r1, r3
 80124e2:	2a7e      	cmp	r2, #126	@ 0x7e
 80124e4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80124e8:	f000 80aa 	beq.w	8012640 <uxr_read_framed_msg+0x510>
 80124ec:	f082 0220 	eor.w	r2, r2, #32
 80124f0:	e654      	b.n	801219c <uxr_read_framed_msg+0x6c>
 80124f2:	1c58      	adds	r0, r3, #1
 80124f4:	0842      	lsrs	r2, r0, #1
 80124f6:	fba5 c202 	umull	ip, r2, r5, r2
 80124fa:	0892      	lsrs	r2, r2, #2
 80124fc:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012500:	fb0c 0212 	mls	r2, ip, r2, r0
 8012504:	b2d0      	uxtb	r0, r2
 8012506:	4281      	cmp	r1, r0
 8012508:	d08f      	beq.n	801242a <uxr_read_framed_msg+0x2fa>
 801250a:	4422      	add	r2, r4
 801250c:	3302      	adds	r3, #2
 801250e:	7890      	ldrb	r0, [r2, #2]
 8012510:	085a      	lsrs	r2, r3, #1
 8012512:	fba5 1202 	umull	r1, r2, r5, r2
 8012516:	0892      	lsrs	r2, r2, #2
 8012518:	fb0c 3312 	mls	r3, ip, r2, r3
 801251c:	287e      	cmp	r0, #126	@ 0x7e
 801251e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012522:	d07d      	beq.n	8012620 <uxr_read_framed_msg+0x4f0>
 8012524:	f080 0020 	eor.w	r0, r0, #32
 8012528:	e660      	b.n	80121ec <uxr_read_framed_msg+0xbc>
 801252a:	1c59      	adds	r1, r3, #1
 801252c:	084a      	lsrs	r2, r1, #1
 801252e:	fba5 c202 	umull	ip, r2, r5, r2
 8012532:	0892      	lsrs	r2, r2, #2
 8012534:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012538:	fb0c 1212 	mls	r2, ip, r2, r1
 801253c:	b2d1      	uxtb	r1, r2
 801253e:	4288      	cmp	r0, r1
 8012540:	f43f af64 	beq.w	801240c <uxr_read_framed_msg+0x2dc>
 8012544:	4422      	add	r2, r4
 8012546:	3302      	adds	r3, #2
 8012548:	7891      	ldrb	r1, [r2, #2]
 801254a:	085a      	lsrs	r2, r3, #1
 801254c:	fba5 0202 	umull	r0, r2, r5, r2
 8012550:	0892      	lsrs	r2, r2, #2
 8012552:	fb0c 3312 	mls	r3, ip, r2, r3
 8012556:	297e      	cmp	r1, #126	@ 0x7e
 8012558:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801255c:	d070      	beq.n	8012640 <uxr_read_framed_msg+0x510>
 801255e:	f081 0120 	eor.w	r1, r1, #32
 8012562:	e6a3      	b.n	80122ac <uxr_read_framed_msg+0x17c>
 8012564:	f103 0c01 	add.w	ip, r3, #1
 8012568:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801256c:	fba5 0202 	umull	r0, r2, r5, r2
 8012570:	0892      	lsrs	r2, r2, #2
 8012572:	202a      	movs	r0, #42	@ 0x2a
 8012574:	fb00 c212 	mls	r2, r0, r2, ip
 8012578:	fa5f fc82 	uxtb.w	ip, r2
 801257c:	4561      	cmp	r1, ip
 801257e:	f43f af58 	beq.w	8012432 <uxr_read_framed_msg+0x302>
 8012582:	4422      	add	r2, r4
 8012584:	3302      	adds	r3, #2
 8012586:	7891      	ldrb	r1, [r2, #2]
 8012588:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801258c:	085a      	lsrs	r2, r3, #1
 801258e:	fba5 c202 	umull	ip, r2, r5, r2
 8012592:	0892      	lsrs	r2, r2, #2
 8012594:	fb00 3312 	mls	r3, r0, r2, r3
 8012598:	297e      	cmp	r1, #126	@ 0x7e
 801259a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801259e:	f43f af48 	beq.w	8012432 <uxr_read_framed_msg+0x302>
 80125a2:	f081 0120 	eor.w	r1, r1, #32
 80125a6:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80125aa:	e6e8      	b.n	801237e <uxr_read_framed_msg+0x24e>
 80125ac:	1c58      	adds	r0, r3, #1
 80125ae:	0842      	lsrs	r2, r0, #1
 80125b0:	fba5 c202 	umull	ip, r2, r5, r2
 80125b4:	0892      	lsrs	r2, r2, #2
 80125b6:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80125ba:	fb0c 0212 	mls	r2, ip, r2, r0
 80125be:	b2d0      	uxtb	r0, r2
 80125c0:	4281      	cmp	r1, r0
 80125c2:	f43f af32 	beq.w	801242a <uxr_read_framed_msg+0x2fa>
 80125c6:	4422      	add	r2, r4
 80125c8:	3302      	adds	r3, #2
 80125ca:	7890      	ldrb	r0, [r2, #2]
 80125cc:	085a      	lsrs	r2, r3, #1
 80125ce:	fba5 1202 	umull	r1, r2, r5, r2
 80125d2:	0892      	lsrs	r2, r2, #2
 80125d4:	fb0c 3312 	mls	r3, ip, r2, r3
 80125d8:	287e      	cmp	r0, #126	@ 0x7e
 80125da:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80125de:	d01f      	beq.n	8012620 <uxr_read_framed_msg+0x4f0>
 80125e0:	f080 0020 	eor.w	r0, r0, #32
 80125e4:	e68b      	b.n	80122fe <uxr_read_framed_msg+0x1ce>
 80125e6:	1c51      	adds	r1, r2, #1
 80125e8:	084b      	lsrs	r3, r1, #1
 80125ea:	fba5 c303 	umull	ip, r3, r5, r3
 80125ee:	089b      	lsrs	r3, r3, #2
 80125f0:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80125f4:	fb0c 1313 	mls	r3, ip, r3, r1
 80125f8:	b2d9      	uxtb	r1, r3
 80125fa:	4288      	cmp	r0, r1
 80125fc:	f43f af3d 	beq.w	801247a <uxr_read_framed_msg+0x34a>
 8012600:	3202      	adds	r2, #2
 8012602:	4423      	add	r3, r4
 8012604:	0850      	lsrs	r0, r2, #1
 8012606:	789b      	ldrb	r3, [r3, #2]
 8012608:	fba5 1000 	umull	r1, r0, r5, r0
 801260c:	0880      	lsrs	r0, r0, #2
 801260e:	fb0c 2210 	mls	r2, ip, r0, r2
 8012612:	2b7e      	cmp	r3, #126	@ 0x7e
 8012614:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012618:	d016      	beq.n	8012648 <uxr_read_framed_msg+0x518>
 801261a:	f083 0120 	eor.w	r1, r3, #32
 801261e:	e68b      	b.n	8012338 <uxr_read_framed_msg+0x208>
 8012620:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012622:	9300      	str	r3, [sp, #0]
 8012624:	2302      	movs	r3, #2
 8012626:	9301      	str	r3, [sp, #4]
 8012628:	464a      	mov	r2, r9
 801262a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801262c:	4641      	mov	r1, r8
 801262e:	4620      	mov	r0, r4
 8012630:	f7ff fcfc 	bl	801202c <uxr_framing_read_transport>
 8012634:	2800      	cmp	r0, #0
 8012636:	f47f aef6 	bne.w	8012426 <uxr_read_framed_msg+0x2f6>
 801263a:	2301      	movs	r3, #1
 801263c:	7023      	strb	r3, [r4, #0]
 801263e:	e588      	b.n	8012152 <uxr_read_framed_msg+0x22>
 8012640:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012642:	9300      	str	r3, [sp, #0]
 8012644:	2301      	movs	r3, #1
 8012646:	e7ee      	b.n	8012626 <uxr_read_framed_msg+0x4f6>
 8012648:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801264a:	9300      	str	r3, [sp, #0]
 801264c:	2303      	movs	r3, #3
 801264e:	e7ea      	b.n	8012626 <uxr_read_framed_msg+0x4f6>
 8012650:	ee17 8a90 	vmov	r8, s15
 8012654:	e6ae      	b.n	80123b4 <uxr_read_framed_msg+0x284>
 8012656:	bf00      	nop

08012658 <uxr_stream_id>:
 8012658:	2901      	cmp	r1, #1
 801265a:	b082      	sub	sp, #8
 801265c:	d01d      	beq.n	801269a <uxr_stream_id+0x42>
 801265e:	2902      	cmp	r1, #2
 8012660:	f04f 0c00 	mov.w	ip, #0
 8012664:	d01e      	beq.n	80126a4 <uxr_stream_id+0x4c>
 8012666:	2300      	movs	r3, #0
 8012668:	f36c 0307 	bfi	r3, ip, #0, #8
 801266c:	f360 230f 	bfi	r3, r0, #8, #8
 8012670:	f361 4317 	bfi	r3, r1, #16, #8
 8012674:	f362 631f 	bfi	r3, r2, #24, #8
 8012678:	b2da      	uxtb	r2, r3
 801267a:	2000      	movs	r0, #0
 801267c:	f362 0007 	bfi	r0, r2, #0, #8
 8012680:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8012684:	f362 200f 	bfi	r0, r2, #8, #8
 8012688:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801268c:	f362 4017 	bfi	r0, r2, #16, #8
 8012690:	0e1b      	lsrs	r3, r3, #24
 8012692:	f363 601f 	bfi	r0, r3, #24, #8
 8012696:	b002      	add	sp, #8
 8012698:	4770      	bx	lr
 801269a:	f100 0c01 	add.w	ip, r0, #1
 801269e:	fa5f fc8c 	uxtb.w	ip, ip
 80126a2:	e7e0      	b.n	8012666 <uxr_stream_id+0xe>
 80126a4:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 80126a8:	e7dd      	b.n	8012666 <uxr_stream_id+0xe>
 80126aa:	bf00      	nop

080126ac <uxr_stream_id_from_raw>:
 80126ac:	b082      	sub	sp, #8
 80126ae:	b130      	cbz	r0, 80126be <uxr_stream_id_from_raw+0x12>
 80126b0:	0603      	lsls	r3, r0, #24
 80126b2:	d420      	bmi.n	80126f6 <uxr_stream_id_from_raw+0x4a>
 80126b4:	1e42      	subs	r2, r0, #1
 80126b6:	b2d2      	uxtb	r2, r2
 80126b8:	f04f 0c01 	mov.w	ip, #1
 80126bc:	e001      	b.n	80126c2 <uxr_stream_id_from_raw+0x16>
 80126be:	4684      	mov	ip, r0
 80126c0:	4602      	mov	r2, r0
 80126c2:	2300      	movs	r3, #0
 80126c4:	f360 0307 	bfi	r3, r0, #0, #8
 80126c8:	f362 230f 	bfi	r3, r2, #8, #8
 80126cc:	f36c 4317 	bfi	r3, ip, #16, #8
 80126d0:	f361 631f 	bfi	r3, r1, #24, #8
 80126d4:	b2da      	uxtb	r2, r3
 80126d6:	2000      	movs	r0, #0
 80126d8:	f362 0007 	bfi	r0, r2, #0, #8
 80126dc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80126e0:	f362 200f 	bfi	r0, r2, #8, #8
 80126e4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80126e8:	f362 4017 	bfi	r0, r2, #16, #8
 80126ec:	0e1b      	lsrs	r3, r3, #24
 80126ee:	f363 601f 	bfi	r0, r3, #24, #8
 80126f2:	b002      	add	sp, #8
 80126f4:	4770      	bx	lr
 80126f6:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 80126fa:	f04f 0c02 	mov.w	ip, #2
 80126fe:	e7e0      	b.n	80126c2 <uxr_stream_id_from_raw+0x16>

08012700 <uxr_init_stream_storage>:
 8012700:	2300      	movs	r3, #0
 8012702:	7403      	strb	r3, [r0, #16]
 8012704:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8012708:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 801270c:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8012710:	4770      	bx	lr
 8012712:	bf00      	nop

08012714 <uxr_reset_stream_storage>:
 8012714:	b570      	push	{r4, r5, r6, lr}
 8012716:	7c03      	ldrb	r3, [r0, #16]
 8012718:	4604      	mov	r4, r0
 801271a:	b153      	cbz	r3, 8012732 <uxr_reset_stream_storage+0x1e>
 801271c:	4606      	mov	r6, r0
 801271e:	2500      	movs	r5, #0
 8012720:	4630      	mov	r0, r6
 8012722:	f004 ff63 	bl	80175ec <uxr_reset_output_best_effort_stream>
 8012726:	7c23      	ldrb	r3, [r4, #16]
 8012728:	3501      	adds	r5, #1
 801272a:	42ab      	cmp	r3, r5
 801272c:	f106 0610 	add.w	r6, r6, #16
 8012730:	d8f6      	bhi.n	8012720 <uxr_reset_stream_storage+0xc>
 8012732:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012736:	b163      	cbz	r3, 8012752 <uxr_reset_stream_storage+0x3e>
 8012738:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801273c:	2500      	movs	r5, #0
 801273e:	4630      	mov	r0, r6
 8012740:	f004 fd56 	bl	80171f0 <uxr_reset_input_best_effort_stream>
 8012744:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012748:	3501      	adds	r5, #1
 801274a:	42ab      	cmp	r3, r5
 801274c:	f106 0602 	add.w	r6, r6, #2
 8012750:	d8f5      	bhi.n	801273e <uxr_reset_stream_storage+0x2a>
 8012752:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8012756:	b163      	cbz	r3, 8012772 <uxr_reset_stream_storage+0x5e>
 8012758:	f104 0618 	add.w	r6, r4, #24
 801275c:	2500      	movs	r5, #0
 801275e:	4630      	mov	r0, r6
 8012760:	f004 fff0 	bl	8017744 <uxr_reset_output_reliable_stream>
 8012764:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8012768:	3501      	adds	r5, #1
 801276a:	42ab      	cmp	r3, r5
 801276c:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8012770:	d8f5      	bhi.n	801275e <uxr_reset_stream_storage+0x4a>
 8012772:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8012776:	b163      	cbz	r3, 8012792 <uxr_reset_stream_storage+0x7e>
 8012778:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 801277c:	2500      	movs	r5, #0
 801277e:	4630      	mov	r0, r6
 8012780:	f004 fdaa 	bl	80172d8 <uxr_reset_input_reliable_stream>
 8012784:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8012788:	3501      	adds	r5, #1
 801278a:	42ab      	cmp	r3, r5
 801278c:	f106 0618 	add.w	r6, r6, #24
 8012790:	d8f5      	bhi.n	801277e <uxr_reset_stream_storage+0x6a>
 8012792:	bd70      	pop	{r4, r5, r6, pc}

08012794 <uxr_add_output_best_effort_buffer>:
 8012794:	b510      	push	{r4, lr}
 8012796:	7c04      	ldrb	r4, [r0, #16]
 8012798:	f104 0c01 	add.w	ip, r4, #1
 801279c:	b082      	sub	sp, #8
 801279e:	f880 c010 	strb.w	ip, [r0, #16]
 80127a2:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80127a6:	f004 ff17 	bl	80175d8 <uxr_init_output_best_effort_stream>
 80127aa:	2201      	movs	r2, #1
 80127ac:	4611      	mov	r1, r2
 80127ae:	4620      	mov	r0, r4
 80127b0:	b002      	add	sp, #8
 80127b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80127b6:	f7ff bf4f 	b.w	8012658 <uxr_stream_id>
 80127ba:	bf00      	nop

080127bc <uxr_add_output_reliable_buffer>:
 80127bc:	b510      	push	{r4, lr}
 80127be:	b084      	sub	sp, #16
 80127c0:	4684      	mov	ip, r0
 80127c2:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80127c6:	9000      	str	r0, [sp, #0]
 80127c8:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 80127cc:	2028      	movs	r0, #40	@ 0x28
 80127ce:	fb00 c004 	mla	r0, r0, r4, ip
 80127d2:	f104 0e01 	add.w	lr, r4, #1
 80127d6:	3018      	adds	r0, #24
 80127d8:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 80127dc:	f004 ff7a 	bl	80176d4 <uxr_init_output_reliable_stream>
 80127e0:	2201      	movs	r2, #1
 80127e2:	2102      	movs	r1, #2
 80127e4:	4620      	mov	r0, r4
 80127e6:	b004      	add	sp, #16
 80127e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80127ec:	f7ff bf34 	b.w	8012658 <uxr_stream_id>

080127f0 <uxr_add_input_best_effort_buffer>:
 80127f0:	b510      	push	{r4, lr}
 80127f2:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 80127f6:	4603      	mov	r3, r0
 80127f8:	1c62      	adds	r2, r4, #1
 80127fa:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 80127fe:	b082      	sub	sp, #8
 8012800:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8012804:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012808:	f004 fcee 	bl	80171e8 <uxr_init_input_best_effort_stream>
 801280c:	2200      	movs	r2, #0
 801280e:	2101      	movs	r1, #1
 8012810:	4620      	mov	r0, r4
 8012812:	b002      	add	sp, #8
 8012814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012818:	f7ff bf1e 	b.w	8012658 <uxr_stream_id>

0801281c <uxr_add_input_reliable_buffer>:
 801281c:	b510      	push	{r4, lr}
 801281e:	b084      	sub	sp, #16
 8012820:	4684      	mov	ip, r0
 8012822:	9806      	ldr	r0, [sp, #24]
 8012824:	9000      	str	r0, [sp, #0]
 8012826:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 801282a:	2018      	movs	r0, #24
 801282c:	fb00 c004 	mla	r0, r0, r4, ip
 8012830:	f104 0e01 	add.w	lr, r4, #1
 8012834:	3048      	adds	r0, #72	@ 0x48
 8012836:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 801283a:	f004 fd21 	bl	8017280 <uxr_init_input_reliable_stream>
 801283e:	2200      	movs	r2, #0
 8012840:	2102      	movs	r1, #2
 8012842:	4620      	mov	r0, r4
 8012844:	b004      	add	sp, #16
 8012846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801284a:	f7ff bf05 	b.w	8012658 <uxr_stream_id>
 801284e:	bf00      	nop

08012850 <uxr_get_output_best_effort_stream>:
 8012850:	7c03      	ldrb	r3, [r0, #16]
 8012852:	428b      	cmp	r3, r1
 8012854:	bf8c      	ite	hi
 8012856:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801285a:	2000      	movls	r0, #0
 801285c:	4770      	bx	lr
 801285e:	bf00      	nop

08012860 <uxr_get_output_reliable_stream>:
 8012860:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8012864:	428b      	cmp	r3, r1
 8012866:	bf83      	ittte	hi
 8012868:	2328      	movhi	r3, #40	@ 0x28
 801286a:	fb03 0001 	mlahi	r0, r3, r1, r0
 801286e:	3018      	addhi	r0, #24
 8012870:	2000      	movls	r0, #0
 8012872:	4770      	bx	lr

08012874 <uxr_get_input_best_effort_stream>:
 8012874:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8012878:	428b      	cmp	r3, r1
 801287a:	bf86      	itte	hi
 801287c:	3121      	addhi	r1, #33	@ 0x21
 801287e:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8012882:	2000      	movls	r0, #0
 8012884:	4770      	bx	lr
 8012886:	bf00      	nop

08012888 <uxr_get_input_reliable_stream>:
 8012888:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 801288c:	428b      	cmp	r3, r1
 801288e:	bf83      	ittte	hi
 8012890:	2318      	movhi	r3, #24
 8012892:	fb03 0001 	mlahi	r0, r3, r1, r0
 8012896:	3048      	addhi	r0, #72	@ 0x48
 8012898:	2000      	movls	r0, #0
 801289a:	4770      	bx	lr

0801289c <uxr_output_streams_confirmed>:
 801289c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80128a0:	b183      	cbz	r3, 80128c4 <uxr_output_streams_confirmed+0x28>
 80128a2:	b570      	push	{r4, r5, r6, lr}
 80128a4:	4606      	mov	r6, r0
 80128a6:	f100 0518 	add.w	r5, r0, #24
 80128aa:	2400      	movs	r4, #0
 80128ac:	e001      	b.n	80128b2 <uxr_output_streams_confirmed+0x16>
 80128ae:	3528      	adds	r5, #40	@ 0x28
 80128b0:	b138      	cbz	r0, 80128c2 <uxr_output_streams_confirmed+0x26>
 80128b2:	4628      	mov	r0, r5
 80128b4:	f005 f9b6 	bl	8017c24 <uxr_is_output_up_to_date>
 80128b8:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 80128bc:	3401      	adds	r4, #1
 80128be:	42a3      	cmp	r3, r4
 80128c0:	d8f5      	bhi.n	80128ae <uxr_output_streams_confirmed+0x12>
 80128c2:	bd70      	pop	{r4, r5, r6, pc}
 80128c4:	2001      	movs	r0, #1
 80128c6:	4770      	bx	lr

080128c8 <uxr_buffer_submessage_header>:
 80128c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128ca:	4604      	mov	r4, r0
 80128cc:	460e      	mov	r6, r1
 80128ce:	2104      	movs	r1, #4
 80128d0:	4615      	mov	r5, r2
 80128d2:	461f      	mov	r7, r3
 80128d4:	f7fd fbf4 	bl	80100c0 <ucdr_align_to>
 80128d8:	2301      	movs	r3, #1
 80128da:	ea47 0203 	orr.w	r2, r7, r3
 80128de:	4631      	mov	r1, r6
 80128e0:	7523      	strb	r3, [r4, #20]
 80128e2:	4620      	mov	r0, r4
 80128e4:	462b      	mov	r3, r5
 80128e6:	f000 fa27 	bl	8012d38 <uxr_serialize_submessage_header>
 80128ea:	4620      	mov	r0, r4
 80128ec:	f7fd fbfe 	bl	80100ec <ucdr_buffer_remaining>
 80128f0:	42a8      	cmp	r0, r5
 80128f2:	bf34      	ite	cc
 80128f4:	2000      	movcc	r0, #0
 80128f6:	2001      	movcs	r0, #1
 80128f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80128fa:	bf00      	nop

080128fc <uxr_read_submessage_header>:
 80128fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012900:	4604      	mov	r4, r0
 8012902:	460d      	mov	r5, r1
 8012904:	2104      	movs	r1, #4
 8012906:	4616      	mov	r6, r2
 8012908:	4698      	mov	r8, r3
 801290a:	f7fd fbd9 	bl	80100c0 <ucdr_align_to>
 801290e:	4620      	mov	r0, r4
 8012910:	f7fd fbec 	bl	80100ec <ucdr_buffer_remaining>
 8012914:	2803      	cmp	r0, #3
 8012916:	bf8c      	ite	hi
 8012918:	2701      	movhi	r7, #1
 801291a:	2700      	movls	r7, #0
 801291c:	d802      	bhi.n	8012924 <uxr_read_submessage_header+0x28>
 801291e:	4638      	mov	r0, r7
 8012920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012924:	4633      	mov	r3, r6
 8012926:	4642      	mov	r2, r8
 8012928:	4620      	mov	r0, r4
 801292a:	4629      	mov	r1, r5
 801292c:	f000 fa18 	bl	8012d60 <uxr_deserialize_submessage_header>
 8012930:	f898 3000 	ldrb.w	r3, [r8]
 8012934:	f003 0201 	and.w	r2, r3, #1
 8012938:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 801293c:	f888 3000 	strb.w	r3, [r8]
 8012940:	7522      	strb	r2, [r4, #20]
 8012942:	4638      	mov	r0, r7
 8012944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012948 <uxr_submessage_padding>:
 8012948:	f010 0003 	ands.w	r0, r0, #3
 801294c:	bf18      	it	ne
 801294e:	f1c0 0004 	rsbne	r0, r0, #4
 8012952:	4770      	bx	lr

08012954 <uxr_millis>:
 8012954:	b510      	push	{r4, lr}
 8012956:	b084      	sub	sp, #16
 8012958:	4669      	mov	r1, sp
 801295a:	2001      	movs	r0, #1
 801295c:	f7f0 fccc 	bl	80032f8 <clock_gettime>
 8012960:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8012964:	4906      	ldr	r1, [pc, #24]	@ (8012980 <uxr_millis+0x2c>)
 8012966:	fba0 0301 	umull	r0, r3, r0, r1
 801296a:	1900      	adds	r0, r0, r4
 801296c:	fb01 3102 	mla	r1, r1, r2, r3
 8012970:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8012974:	4a03      	ldr	r2, [pc, #12]	@ (8012984 <uxr_millis+0x30>)
 8012976:	2300      	movs	r3, #0
 8012978:	f7ee f8d0 	bl	8000b1c <__aeabi_ldivmod>
 801297c:	b004      	add	sp, #16
 801297e:	bd10      	pop	{r4, pc}
 8012980:	3b9aca00 	.word	0x3b9aca00
 8012984:	000f4240 	.word	0x000f4240

08012988 <uxr_nanos>:
 8012988:	b510      	push	{r4, lr}
 801298a:	b084      	sub	sp, #16
 801298c:	4669      	mov	r1, sp
 801298e:	2001      	movs	r0, #1
 8012990:	f7f0 fcb2 	bl	80032f8 <clock_gettime>
 8012994:	4a06      	ldr	r2, [pc, #24]	@ (80129b0 <uxr_nanos+0x28>)
 8012996:	9800      	ldr	r0, [sp, #0]
 8012998:	9902      	ldr	r1, [sp, #8]
 801299a:	9c01      	ldr	r4, [sp, #4]
 801299c:	fba0 0302 	umull	r0, r3, r0, r2
 80129a0:	1840      	adds	r0, r0, r1
 80129a2:	fb02 3304 	mla	r3, r2, r4, r3
 80129a6:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 80129aa:	b004      	add	sp, #16
 80129ac:	bd10      	pop	{r4, pc}
 80129ae:	bf00      	nop
 80129b0:	3b9aca00 	.word	0x3b9aca00

080129b4 <on_full_output_buffer_fragmented>:
 80129b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129b8:	460c      	mov	r4, r1
 80129ba:	b08a      	sub	sp, #40	@ 0x28
 80129bc:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 80129c0:	4606      	mov	r6, r0
 80129c2:	f104 0008 	add.w	r0, r4, #8
 80129c6:	f7ff ff4b 	bl	8012860 <uxr_get_output_reliable_stream>
 80129ca:	4605      	mov	r5, r0
 80129cc:	f005 f934 	bl	8017c38 <get_available_free_slots>
 80129d0:	b968      	cbnz	r0, 80129ee <on_full_output_buffer_fragmented+0x3a>
 80129d2:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 80129d6:	4620      	mov	r0, r4
 80129d8:	4798      	blx	r3
 80129da:	b918      	cbnz	r0, 80129e4 <on_full_output_buffer_fragmented+0x30>
 80129dc:	2001      	movs	r0, #1
 80129de:	b00a      	add	sp, #40	@ 0x28
 80129e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129e4:	4628      	mov	r0, r5
 80129e6:	f005 f927 	bl	8017c38 <get_available_free_slots>
 80129ea:	2800      	cmp	r0, #0
 80129ec:	d0f6      	beq.n	80129dc <on_full_output_buffer_fragmented+0x28>
 80129ee:	8929      	ldrh	r1, [r5, #8]
 80129f0:	89eb      	ldrh	r3, [r5, #14]
 80129f2:	7b28      	ldrb	r0, [r5, #12]
 80129f4:	686a      	ldr	r2, [r5, #4]
 80129f6:	fbb2 f8f1 	udiv	r8, r2, r1
 80129fa:	fbb3 f2f1 	udiv	r2, r3, r1
 80129fe:	fb01 3112 	mls	r1, r1, r2, r3
 8012a02:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 8012a06:	b289      	uxth	r1, r1
 8012a08:	fb08 f101 	mul.w	r1, r8, r1
 8012a0c:	30fc      	adds	r0, #252	@ 0xfc
 8012a0e:	f1a8 0804 	sub.w	r8, r8, #4
 8012a12:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8012a16:	4440      	add	r0, r8
 8012a18:	b287      	uxth	r7, r0
 8012a1a:	1bdb      	subs	r3, r3, r7
 8012a1c:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8012a20:	682b      	ldr	r3, [r5, #0]
 8012a22:	3104      	adds	r1, #4
 8012a24:	4419      	add	r1, r3
 8012a26:	4642      	mov	r2, r8
 8012a28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012a2c:	9300      	str	r3, [sp, #0]
 8012a2e:	a802      	add	r0, sp, #8
 8012a30:	2300      	movs	r3, #0
 8012a32:	f7fd fb19 	bl	8010068 <ucdr_init_buffer_origin_offset>
 8012a36:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8012a3a:	f102 0308 	add.w	r3, r2, #8
 8012a3e:	4543      	cmp	r3, r8
 8012a40:	d928      	bls.n	8012a94 <on_full_output_buffer_fragmented+0xe0>
 8012a42:	463a      	mov	r2, r7
 8012a44:	2300      	movs	r3, #0
 8012a46:	210d      	movs	r1, #13
 8012a48:	a802      	add	r0, sp, #8
 8012a4a:	f7ff ff3d 	bl	80128c8 <uxr_buffer_submessage_header>
 8012a4e:	8929      	ldrh	r1, [r5, #8]
 8012a50:	89eb      	ldrh	r3, [r5, #14]
 8012a52:	fbb3 f2f1 	udiv	r2, r3, r1
 8012a56:	fb01 3312 	mls	r3, r1, r2, r3
 8012a5a:	b29b      	uxth	r3, r3
 8012a5c:	686a      	ldr	r2, [r5, #4]
 8012a5e:	fbb2 f2f1 	udiv	r2, r2, r1
 8012a62:	fb02 f303 	mul.w	r3, r2, r3
 8012a66:	682a      	ldr	r2, [r5, #0]
 8012a68:	f842 8003 	str.w	r8, [r2, r3]
 8012a6c:	89e8      	ldrh	r0, [r5, #14]
 8012a6e:	2101      	movs	r1, #1
 8012a70:	f005 f902 	bl	8017c78 <uxr_seq_num_add>
 8012a74:	9904      	ldr	r1, [sp, #16]
 8012a76:	9a03      	ldr	r2, [sp, #12]
 8012a78:	81e8      	strh	r0, [r5, #14]
 8012a7a:	1a52      	subs	r2, r2, r1
 8012a7c:	4630      	mov	r0, r6
 8012a7e:	f7fd fb05 	bl	801008c <ucdr_init_buffer>
 8012a82:	4630      	mov	r0, r6
 8012a84:	490f      	ldr	r1, [pc, #60]	@ (8012ac4 <on_full_output_buffer_fragmented+0x110>)
 8012a86:	4622      	mov	r2, r4
 8012a88:	f7fd fad4 	bl	8010034 <ucdr_set_on_full_buffer_callback>
 8012a8c:	2000      	movs	r0, #0
 8012a8e:	b00a      	add	sp, #40	@ 0x28
 8012a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a94:	b292      	uxth	r2, r2
 8012a96:	2302      	movs	r3, #2
 8012a98:	210d      	movs	r1, #13
 8012a9a:	a802      	add	r0, sp, #8
 8012a9c:	f7ff ff14 	bl	80128c8 <uxr_buffer_submessage_header>
 8012aa0:	8928      	ldrh	r0, [r5, #8]
 8012aa2:	89eb      	ldrh	r3, [r5, #14]
 8012aa4:	fbb3 f1f0 	udiv	r1, r3, r0
 8012aa8:	fb00 3311 	mls	r3, r0, r1, r3
 8012aac:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8012ab0:	6869      	ldr	r1, [r5, #4]
 8012ab2:	fbb1 f1f0 	udiv	r1, r1, r0
 8012ab6:	b29b      	uxth	r3, r3
 8012ab8:	fb01 f303 	mul.w	r3, r1, r3
 8012abc:	6829      	ldr	r1, [r5, #0]
 8012abe:	3208      	adds	r2, #8
 8012ac0:	50ca      	str	r2, [r1, r3]
 8012ac2:	e7d3      	b.n	8012a6c <on_full_output_buffer_fragmented+0xb8>
 8012ac4:	080129b5 	.word	0x080129b5

08012ac8 <uxr_prepare_output_stream>:
 8012ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012aca:	b087      	sub	sp, #28
 8012acc:	2707      	movs	r7, #7
 8012ace:	9202      	str	r2, [sp, #8]
 8012ad0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8012ad2:	9103      	str	r1, [sp, #12]
 8012ad4:	2500      	movs	r5, #0
 8012ad6:	3204      	adds	r2, #4
 8012ad8:	e9cd 7500 	strd	r7, r5, [sp]
 8012adc:	461c      	mov	r4, r3
 8012ade:	4606      	mov	r6, r0
 8012ae0:	f7fe ffc2 	bl	8011a68 <uxr_prepare_stream_to_write_submessage>
 8012ae4:	f080 0201 	eor.w	r2, r0, #1
 8012ae8:	b2d2      	uxtb	r2, r2
 8012aea:	75a2      	strb	r2, [r4, #22]
 8012aec:	b112      	cbz	r2, 8012af4 <uxr_prepare_output_stream+0x2c>
 8012aee:	4628      	mov	r0, r5
 8012af0:	b007      	add	sp, #28
 8012af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012af4:	aa05      	add	r2, sp, #20
 8012af6:	9902      	ldr	r1, [sp, #8]
 8012af8:	4630      	mov	r0, r6
 8012afa:	f7ff f8eb 	bl	8011cd4 <uxr_init_base_object_request>
 8012afe:	a905      	add	r1, sp, #20
 8012b00:	4605      	mov	r5, r0
 8012b02:	4620      	mov	r0, r4
 8012b04:	f001 f8a0 	bl	8013c48 <uxr_serialize_WRITE_DATA_Payload_Data>
 8012b08:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8012b0c:	69a6      	ldr	r6, [r4, #24]
 8012b0e:	69e7      	ldr	r7, [r4, #28]
 8012b10:	1a52      	subs	r2, r2, r1
 8012b12:	4620      	mov	r0, r4
 8012b14:	f7fd faba 	bl	801008c <ucdr_init_buffer>
 8012b18:	4620      	mov	r0, r4
 8012b1a:	463a      	mov	r2, r7
 8012b1c:	4631      	mov	r1, r6
 8012b1e:	f7fd fa89 	bl	8010034 <ucdr_set_on_full_buffer_callback>
 8012b22:	4628      	mov	r0, r5
 8012b24:	b007      	add	sp, #28
 8012b26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012b28 <uxr_prepare_output_stream_fragmented>:
 8012b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b2c:	b091      	sub	sp, #68	@ 0x44
 8012b2e:	4605      	mov	r5, r0
 8012b30:	9105      	str	r1, [sp, #20]
 8012b32:	3008      	adds	r0, #8
 8012b34:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8012b38:	461e      	mov	r6, r3
 8012b3a:	9204      	str	r2, [sp, #16]
 8012b3c:	f7ff fe90 	bl	8012860 <uxr_get_output_reliable_stream>
 8012b40:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8012b44:	2b01      	cmp	r3, #1
 8012b46:	f000 8091 	beq.w	8012c6c <uxr_prepare_output_stream_fragmented+0x144>
 8012b4a:	4604      	mov	r4, r0
 8012b4c:	2800      	cmp	r0, #0
 8012b4e:	f000 808d 	beq.w	8012c6c <uxr_prepare_output_stream_fragmented+0x144>
 8012b52:	f005 f871 	bl	8017c38 <get_available_free_slots>
 8012b56:	2800      	cmp	r0, #0
 8012b58:	f000 8083 	beq.w	8012c62 <uxr_prepare_output_stream_fragmented+0x13a>
 8012b5c:	8922      	ldrh	r2, [r4, #8]
 8012b5e:	89e7      	ldrh	r7, [r4, #14]
 8012b60:	fbb7 f9f2 	udiv	r9, r7, r2
 8012b64:	fb02 7919 	mls	r9, r2, r9, r7
 8012b68:	fa1f f989 	uxth.w	r9, r9
 8012b6c:	6863      	ldr	r3, [r4, #4]
 8012b6e:	fbb3 f2f2 	udiv	r2, r3, r2
 8012b72:	6823      	ldr	r3, [r4, #0]
 8012b74:	9203      	str	r2, [sp, #12]
 8012b76:	fb02 f909 	mul.w	r9, r2, r9
 8012b7a:	f109 0904 	add.w	r9, r9, #4
 8012b7e:	4499      	add	r9, r3
 8012b80:	7b23      	ldrb	r3, [r4, #12]
 8012b82:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8012b86:	4543      	cmp	r3, r8
 8012b88:	f1a2 0b04 	sub.w	fp, r2, #4
 8012b8c:	d37a      	bcc.n	8012c84 <uxr_prepare_output_stream_fragmented+0x15c>
 8012b8e:	f1ab 0a04 	sub.w	sl, fp, #4
 8012b92:	ebaa 0a03 	sub.w	sl, sl, r3
 8012b96:	465a      	mov	r2, fp
 8012b98:	2300      	movs	r3, #0
 8012b9a:	4649      	mov	r1, r9
 8012b9c:	a808      	add	r0, sp, #32
 8012b9e:	f8cd 8000 	str.w	r8, [sp]
 8012ba2:	f7fd fa61 	bl	8010068 <ucdr_init_buffer_origin_offset>
 8012ba6:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8012ba8:	fa1f fa8a 	uxth.w	sl, sl
 8012bac:	4652      	mov	r2, sl
 8012bae:	f103 0a08 	add.w	sl, r3, #8
 8012bb2:	45da      	cmp	sl, fp
 8012bb4:	bf34      	ite	cc
 8012bb6:	2302      	movcc	r3, #2
 8012bb8:	2300      	movcs	r3, #0
 8012bba:	210d      	movs	r1, #13
 8012bbc:	a808      	add	r0, sp, #32
 8012bbe:	f7ff fe83 	bl	80128c8 <uxr_buffer_submessage_header>
 8012bc2:	8921      	ldrh	r1, [r4, #8]
 8012bc4:	fbb7 f2f1 	udiv	r2, r7, r1
 8012bc8:	fb01 7212 	mls	r2, r1, r2, r7
 8012bcc:	b292      	uxth	r2, r2
 8012bce:	6863      	ldr	r3, [r4, #4]
 8012bd0:	fbb3 f3f1 	udiv	r3, r3, r1
 8012bd4:	fb02 f303 	mul.w	r3, r2, r3
 8012bd8:	6822      	ldr	r2, [r4, #0]
 8012bda:	4638      	mov	r0, r7
 8012bdc:	f842 b003 	str.w	fp, [r2, r3]
 8012be0:	2101      	movs	r1, #1
 8012be2:	f005 f849 	bl	8017c78 <uxr_seq_num_add>
 8012be6:	9b03      	ldr	r3, [sp, #12]
 8012be8:	f108 0104 	add.w	r1, r8, #4
 8012bec:	f1a3 0208 	sub.w	r2, r3, #8
 8012bf0:	eba2 0208 	sub.w	r2, r2, r8
 8012bf4:	4449      	add	r1, r9
 8012bf6:	4607      	mov	r7, r0
 8012bf8:	4630      	mov	r0, r6
 8012bfa:	f7fd fa47 	bl	801008c <ucdr_init_buffer>
 8012bfe:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8012c00:	81e7      	strh	r7, [r4, #14]
 8012c02:	1d1a      	adds	r2, r3, #4
 8012c04:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8012c08:	bf28      	it	cs
 8012c0a:	2200      	movcs	r2, #0
 8012c0c:	2300      	movs	r3, #0
 8012c0e:	b292      	uxth	r2, r2
 8012c10:	2107      	movs	r1, #7
 8012c12:	4630      	mov	r0, r6
 8012c14:	f7ff fe58 	bl	80128c8 <uxr_buffer_submessage_header>
 8012c18:	9904      	ldr	r1, [sp, #16]
 8012c1a:	aa07      	add	r2, sp, #28
 8012c1c:	4628      	mov	r0, r5
 8012c1e:	f7ff f859 	bl	8011cd4 <uxr_init_base_object_request>
 8012c22:	4604      	mov	r4, r0
 8012c24:	b318      	cbz	r0, 8012c6e <uxr_prepare_output_stream_fragmented+0x146>
 8012c26:	a907      	add	r1, sp, #28
 8012c28:	4630      	mov	r0, r6
 8012c2a:	f001 f80d 	bl	8013c48 <uxr_serialize_WRITE_DATA_Payload_Data>
 8012c2e:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8012c32:	4630      	mov	r0, r6
 8012c34:	1a52      	subs	r2, r2, r1
 8012c36:	f7fd fa29 	bl	801008c <ucdr_init_buffer>
 8012c3a:	9b05      	ldr	r3, [sp, #20]
 8012c3c:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8012c40:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8012c42:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8012c46:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8012c48:	491b      	ldr	r1, [pc, #108]	@ (8012cb8 <uxr_prepare_output_stream_fragmented+0x190>)
 8012c4a:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8012c4e:	4630      	mov	r0, r6
 8012c50:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8012c54:	462a      	mov	r2, r5
 8012c56:	f7fd f9ed 	bl	8010034 <ucdr_set_on_full_buffer_callback>
 8012c5a:	4620      	mov	r0, r4
 8012c5c:	b011      	add	sp, #68	@ 0x44
 8012c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c62:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8012c64:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8012c66:	4628      	mov	r0, r5
 8012c68:	4798      	blx	r3
 8012c6a:	b920      	cbnz	r0, 8012c76 <uxr_prepare_output_stream_fragmented+0x14e>
 8012c6c:	2400      	movs	r4, #0
 8012c6e:	4620      	mov	r0, r4
 8012c70:	b011      	add	sp, #68	@ 0x44
 8012c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c76:	4620      	mov	r0, r4
 8012c78:	f004 ffde 	bl	8017c38 <get_available_free_slots>
 8012c7c:	2800      	cmp	r0, #0
 8012c7e:	f47f af6d 	bne.w	8012b5c <uxr_prepare_output_stream_fragmented+0x34>
 8012c82:	e7f3      	b.n	8012c6c <uxr_prepare_output_stream_fragmented+0x144>
 8012c84:	4638      	mov	r0, r7
 8012c86:	2101      	movs	r1, #1
 8012c88:	f004 fff6 	bl	8017c78 <uxr_seq_num_add>
 8012c8c:	8921      	ldrh	r1, [r4, #8]
 8012c8e:	fbb0 f2f1 	udiv	r2, r0, r1
 8012c92:	fb01 0912 	mls	r9, r1, r2, r0
 8012c96:	fa1f f289 	uxth.w	r2, r9
 8012c9a:	6863      	ldr	r3, [r4, #4]
 8012c9c:	fbb3 f9f1 	udiv	r9, r3, r1
 8012ca0:	6823      	ldr	r3, [r4, #0]
 8012ca2:	fb02 f909 	mul.w	r9, r2, r9
 8012ca6:	f109 0904 	add.w	r9, r9, #4
 8012caa:	4499      	add	r9, r3
 8012cac:	4607      	mov	r7, r0
 8012cae:	7b23      	ldrb	r3, [r4, #12]
 8012cb0:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8012cb4:	e76b      	b.n	8012b8e <uxr_prepare_output_stream_fragmented+0x66>
 8012cb6:	bf00      	nop
 8012cb8:	080129b5 	.word	0x080129b5

08012cbc <uxr_serialize_message_header>:
 8012cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012cbe:	b083      	sub	sp, #12
 8012cc0:	4616      	mov	r6, r2
 8012cc2:	4604      	mov	r4, r0
 8012cc4:	9301      	str	r3, [sp, #4]
 8012cc6:	460d      	mov	r5, r1
 8012cc8:	9f08      	ldr	r7, [sp, #32]
 8012cca:	f7fc fa33 	bl	800f134 <ucdr_serialize_uint8_t>
 8012cce:	4631      	mov	r1, r6
 8012cd0:	4620      	mov	r0, r4
 8012cd2:	f7fc fa2f 	bl	800f134 <ucdr_serialize_uint8_t>
 8012cd6:	9a01      	ldr	r2, [sp, #4]
 8012cd8:	2101      	movs	r1, #1
 8012cda:	4620      	mov	r0, r4
 8012cdc:	f7fc fad6 	bl	800f28c <ucdr_serialize_endian_uint16_t>
 8012ce0:	062b      	lsls	r3, r5, #24
 8012ce2:	d501      	bpl.n	8012ce8 <uxr_serialize_message_header+0x2c>
 8012ce4:	b003      	add	sp, #12
 8012ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ce8:	2204      	movs	r2, #4
 8012cea:	4639      	mov	r1, r7
 8012cec:	4620      	mov	r0, r4
 8012cee:	b003      	add	sp, #12
 8012cf0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012cf4:	f004 b940 	b.w	8016f78 <ucdr_serialize_array_uint8_t>

08012cf8 <uxr_deserialize_message_header>:
 8012cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012cfa:	b083      	sub	sp, #12
 8012cfc:	4616      	mov	r6, r2
 8012cfe:	4604      	mov	r4, r0
 8012d00:	9301      	str	r3, [sp, #4]
 8012d02:	460d      	mov	r5, r1
 8012d04:	9f08      	ldr	r7, [sp, #32]
 8012d06:	f7fc fa2b 	bl	800f160 <ucdr_deserialize_uint8_t>
 8012d0a:	4631      	mov	r1, r6
 8012d0c:	4620      	mov	r0, r4
 8012d0e:	f7fc fa27 	bl	800f160 <ucdr_deserialize_uint8_t>
 8012d12:	9a01      	ldr	r2, [sp, #4]
 8012d14:	2101      	movs	r1, #1
 8012d16:	4620      	mov	r0, r4
 8012d18:	f7fc fbac 	bl	800f474 <ucdr_deserialize_endian_uint16_t>
 8012d1c:	f995 3000 	ldrsb.w	r3, [r5]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	da01      	bge.n	8012d28 <uxr_deserialize_message_header+0x30>
 8012d24:	b003      	add	sp, #12
 8012d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d28:	2204      	movs	r2, #4
 8012d2a:	4639      	mov	r1, r7
 8012d2c:	4620      	mov	r0, r4
 8012d2e:	b003      	add	sp, #12
 8012d30:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012d34:	f004 b984 	b.w	8017040 <ucdr_deserialize_array_uint8_t>

08012d38 <uxr_serialize_submessage_header>:
 8012d38:	b530      	push	{r4, r5, lr}
 8012d3a:	b083      	sub	sp, #12
 8012d3c:	4615      	mov	r5, r2
 8012d3e:	4604      	mov	r4, r0
 8012d40:	9301      	str	r3, [sp, #4]
 8012d42:	f7fc f9f7 	bl	800f134 <ucdr_serialize_uint8_t>
 8012d46:	4629      	mov	r1, r5
 8012d48:	4620      	mov	r0, r4
 8012d4a:	f7fc f9f3 	bl	800f134 <ucdr_serialize_uint8_t>
 8012d4e:	9a01      	ldr	r2, [sp, #4]
 8012d50:	2101      	movs	r1, #1
 8012d52:	4620      	mov	r0, r4
 8012d54:	b003      	add	sp, #12
 8012d56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012d5a:	f7fc ba97 	b.w	800f28c <ucdr_serialize_endian_uint16_t>
 8012d5e:	bf00      	nop

08012d60 <uxr_deserialize_submessage_header>:
 8012d60:	b530      	push	{r4, r5, lr}
 8012d62:	b083      	sub	sp, #12
 8012d64:	4615      	mov	r5, r2
 8012d66:	4604      	mov	r4, r0
 8012d68:	9301      	str	r3, [sp, #4]
 8012d6a:	f7fc f9f9 	bl	800f160 <ucdr_deserialize_uint8_t>
 8012d6e:	4629      	mov	r1, r5
 8012d70:	4620      	mov	r0, r4
 8012d72:	f7fc f9f5 	bl	800f160 <ucdr_deserialize_uint8_t>
 8012d76:	9a01      	ldr	r2, [sp, #4]
 8012d78:	2101      	movs	r1, #1
 8012d7a:	4620      	mov	r0, r4
 8012d7c:	b003      	add	sp, #12
 8012d7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012d82:	f7fc bb77 	b.w	800f474 <ucdr_deserialize_endian_uint16_t>
 8012d86:	bf00      	nop

08012d88 <uxr_serialize_CLIENT_Representation>:
 8012d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d8c:	2204      	movs	r2, #4
 8012d8e:	460e      	mov	r6, r1
 8012d90:	4605      	mov	r5, r0
 8012d92:	f004 f8f1 	bl	8016f78 <ucdr_serialize_array_uint8_t>
 8012d96:	2202      	movs	r2, #2
 8012d98:	4607      	mov	r7, r0
 8012d9a:	1d31      	adds	r1, r6, #4
 8012d9c:	4628      	mov	r0, r5
 8012d9e:	f004 f8eb 	bl	8016f78 <ucdr_serialize_array_uint8_t>
 8012da2:	4038      	ands	r0, r7
 8012da4:	2202      	movs	r2, #2
 8012da6:	1db1      	adds	r1, r6, #6
 8012da8:	b2c7      	uxtb	r7, r0
 8012daa:	4628      	mov	r0, r5
 8012dac:	f004 f8e4 	bl	8016f78 <ucdr_serialize_array_uint8_t>
 8012db0:	2204      	movs	r2, #4
 8012db2:	4007      	ands	r7, r0
 8012db4:	f106 0108 	add.w	r1, r6, #8
 8012db8:	4628      	mov	r0, r5
 8012dba:	f004 f8dd 	bl	8016f78 <ucdr_serialize_array_uint8_t>
 8012dbe:	7b31      	ldrb	r1, [r6, #12]
 8012dc0:	4007      	ands	r7, r0
 8012dc2:	4628      	mov	r0, r5
 8012dc4:	f7fc f9b6 	bl	800f134 <ucdr_serialize_uint8_t>
 8012dc8:	7b71      	ldrb	r1, [r6, #13]
 8012dca:	4007      	ands	r7, r0
 8012dcc:	4628      	mov	r0, r5
 8012dce:	f7fc f983 	bl	800f0d8 <ucdr_serialize_bool>
 8012dd2:	7b73      	ldrb	r3, [r6, #13]
 8012dd4:	ea07 0800 	and.w	r8, r7, r0
 8012dd8:	b93b      	cbnz	r3, 8012dea <uxr_serialize_CLIENT_Representation+0x62>
 8012dda:	8bb1      	ldrh	r1, [r6, #28]
 8012ddc:	4628      	mov	r0, r5
 8012dde:	f7fc f9d5 	bl	800f18c <ucdr_serialize_uint16_t>
 8012de2:	ea08 0000 	and.w	r0, r8, r0
 8012de6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012dea:	6931      	ldr	r1, [r6, #16]
 8012dec:	4628      	mov	r0, r5
 8012dee:	f7fc fbb7 	bl	800f560 <ucdr_serialize_uint32_t>
 8012df2:	6933      	ldr	r3, [r6, #16]
 8012df4:	b1e3      	cbz	r3, 8012e30 <uxr_serialize_CLIENT_Representation+0xa8>
 8012df6:	b1c0      	cbz	r0, 8012e2a <uxr_serialize_CLIENT_Representation+0xa2>
 8012df8:	4637      	mov	r7, r6
 8012dfa:	f04f 0900 	mov.w	r9, #0
 8012dfe:	e001      	b.n	8012e04 <uxr_serialize_CLIENT_Representation+0x7c>
 8012e00:	3708      	adds	r7, #8
 8012e02:	b194      	cbz	r4, 8012e2a <uxr_serialize_CLIENT_Representation+0xa2>
 8012e04:	6979      	ldr	r1, [r7, #20]
 8012e06:	4628      	mov	r0, r5
 8012e08:	f004 f9d6 	bl	80171b8 <ucdr_serialize_string>
 8012e0c:	69b9      	ldr	r1, [r7, #24]
 8012e0e:	4604      	mov	r4, r0
 8012e10:	4628      	mov	r0, r5
 8012e12:	f004 f9d1 	bl	80171b8 <ucdr_serialize_string>
 8012e16:	6933      	ldr	r3, [r6, #16]
 8012e18:	f109 0901 	add.w	r9, r9, #1
 8012e1c:	4004      	ands	r4, r0
 8012e1e:	4599      	cmp	r9, r3
 8012e20:	b2e4      	uxtb	r4, r4
 8012e22:	d3ed      	bcc.n	8012e00 <uxr_serialize_CLIENT_Representation+0x78>
 8012e24:	ea08 0804 	and.w	r8, r8, r4
 8012e28:	e7d7      	b.n	8012dda <uxr_serialize_CLIENT_Representation+0x52>
 8012e2a:	f04f 0800 	mov.w	r8, #0
 8012e2e:	e7d4      	b.n	8012dda <uxr_serialize_CLIENT_Representation+0x52>
 8012e30:	ea08 0800 	and.w	r8, r8, r0
 8012e34:	e7d1      	b.n	8012dda <uxr_serialize_CLIENT_Representation+0x52>
 8012e36:	bf00      	nop

08012e38 <uxr_deserialize_CLIENT_Representation>:
 8012e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e3c:	2204      	movs	r2, #4
 8012e3e:	460c      	mov	r4, r1
 8012e40:	4605      	mov	r5, r0
 8012e42:	f004 f8fd 	bl	8017040 <ucdr_deserialize_array_uint8_t>
 8012e46:	2202      	movs	r2, #2
 8012e48:	4607      	mov	r7, r0
 8012e4a:	1d21      	adds	r1, r4, #4
 8012e4c:	4628      	mov	r0, r5
 8012e4e:	f004 f8f7 	bl	8017040 <ucdr_deserialize_array_uint8_t>
 8012e52:	4038      	ands	r0, r7
 8012e54:	2202      	movs	r2, #2
 8012e56:	1da1      	adds	r1, r4, #6
 8012e58:	b2c6      	uxtb	r6, r0
 8012e5a:	4628      	mov	r0, r5
 8012e5c:	f004 f8f0 	bl	8017040 <ucdr_deserialize_array_uint8_t>
 8012e60:	2204      	movs	r2, #4
 8012e62:	4006      	ands	r6, r0
 8012e64:	f104 0108 	add.w	r1, r4, #8
 8012e68:	4628      	mov	r0, r5
 8012e6a:	f004 f8e9 	bl	8017040 <ucdr_deserialize_array_uint8_t>
 8012e6e:	f104 010c 	add.w	r1, r4, #12
 8012e72:	4006      	ands	r6, r0
 8012e74:	4628      	mov	r0, r5
 8012e76:	f7fc f973 	bl	800f160 <ucdr_deserialize_uint8_t>
 8012e7a:	f104 010d 	add.w	r1, r4, #13
 8012e7e:	ea06 0700 	and.w	r7, r6, r0
 8012e82:	4628      	mov	r0, r5
 8012e84:	f7fc f93e 	bl	800f104 <ucdr_deserialize_bool>
 8012e88:	7b63      	ldrb	r3, [r4, #13]
 8012e8a:	4007      	ands	r7, r0
 8012e8c:	b93b      	cbnz	r3, 8012e9e <uxr_deserialize_CLIENT_Representation+0x66>
 8012e8e:	f104 011c 	add.w	r1, r4, #28
 8012e92:	4628      	mov	r0, r5
 8012e94:	f7fc fa7a 	bl	800f38c <ucdr_deserialize_uint16_t>
 8012e98:	4038      	ands	r0, r7
 8012e9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e9e:	f104 0110 	add.w	r1, r4, #16
 8012ea2:	4628      	mov	r0, r5
 8012ea4:	f7fc fc8c 	bl	800f7c0 <ucdr_deserialize_uint32_t>
 8012ea8:	6923      	ldr	r3, [r4, #16]
 8012eaa:	2b01      	cmp	r3, #1
 8012eac:	d903      	bls.n	8012eb6 <uxr_deserialize_CLIENT_Representation+0x7e>
 8012eae:	2301      	movs	r3, #1
 8012eb0:	75ab      	strb	r3, [r5, #22]
 8012eb2:	2700      	movs	r7, #0
 8012eb4:	e7eb      	b.n	8012e8e <uxr_deserialize_CLIENT_Representation+0x56>
 8012eb6:	b30b      	cbz	r3, 8012efc <uxr_deserialize_CLIENT_Representation+0xc4>
 8012eb8:	2800      	cmp	r0, #0
 8012eba:	d0fa      	beq.n	8012eb2 <uxr_deserialize_CLIENT_Representation+0x7a>
 8012ebc:	46a0      	mov	r8, r4
 8012ebe:	f04f 0900 	mov.w	r9, #0
 8012ec2:	e001      	b.n	8012ec8 <uxr_deserialize_CLIENT_Representation+0x90>
 8012ec4:	2e00      	cmp	r6, #0
 8012ec6:	d0f4      	beq.n	8012eb2 <uxr_deserialize_CLIENT_Representation+0x7a>
 8012ec8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8012ecc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012ed0:	4628      	mov	r0, r5
 8012ed2:	f004 f981 	bl	80171d8 <ucdr_deserialize_string>
 8012ed6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012eda:	4606      	mov	r6, r0
 8012edc:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8012ee0:	4628      	mov	r0, r5
 8012ee2:	f004 f979 	bl	80171d8 <ucdr_deserialize_string>
 8012ee6:	6923      	ldr	r3, [r4, #16]
 8012ee8:	f109 0901 	add.w	r9, r9, #1
 8012eec:	4006      	ands	r6, r0
 8012eee:	4599      	cmp	r9, r3
 8012ef0:	f108 0808 	add.w	r8, r8, #8
 8012ef4:	b2f6      	uxtb	r6, r6
 8012ef6:	d3e5      	bcc.n	8012ec4 <uxr_deserialize_CLIENT_Representation+0x8c>
 8012ef8:	4037      	ands	r7, r6
 8012efa:	e7c8      	b.n	8012e8e <uxr_deserialize_CLIENT_Representation+0x56>
 8012efc:	4007      	ands	r7, r0
 8012efe:	e7c6      	b.n	8012e8e <uxr_deserialize_CLIENT_Representation+0x56>

08012f00 <uxr_serialize_AGENT_Representation>:
 8012f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f04:	2204      	movs	r2, #4
 8012f06:	460f      	mov	r7, r1
 8012f08:	4605      	mov	r5, r0
 8012f0a:	f004 f835 	bl	8016f78 <ucdr_serialize_array_uint8_t>
 8012f0e:	2202      	movs	r2, #2
 8012f10:	4604      	mov	r4, r0
 8012f12:	1d39      	adds	r1, r7, #4
 8012f14:	4628      	mov	r0, r5
 8012f16:	f004 f82f 	bl	8016f78 <ucdr_serialize_array_uint8_t>
 8012f1a:	4020      	ands	r0, r4
 8012f1c:	2202      	movs	r2, #2
 8012f1e:	1db9      	adds	r1, r7, #6
 8012f20:	b2c4      	uxtb	r4, r0
 8012f22:	4628      	mov	r0, r5
 8012f24:	f004 f828 	bl	8016f78 <ucdr_serialize_array_uint8_t>
 8012f28:	7a39      	ldrb	r1, [r7, #8]
 8012f2a:	4004      	ands	r4, r0
 8012f2c:	4628      	mov	r0, r5
 8012f2e:	f7fc f8d3 	bl	800f0d8 <ucdr_serialize_bool>
 8012f32:	7a3b      	ldrb	r3, [r7, #8]
 8012f34:	ea00 0804 	and.w	r8, r0, r4
 8012f38:	b913      	cbnz	r3, 8012f40 <uxr_serialize_AGENT_Representation+0x40>
 8012f3a:	4640      	mov	r0, r8
 8012f3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f40:	68f9      	ldr	r1, [r7, #12]
 8012f42:	4628      	mov	r0, r5
 8012f44:	f7fc fb0c 	bl	800f560 <ucdr_serialize_uint32_t>
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	b303      	cbz	r3, 8012f8e <uxr_serialize_AGENT_Representation+0x8e>
 8012f4c:	b1d0      	cbz	r0, 8012f84 <uxr_serialize_AGENT_Representation+0x84>
 8012f4e:	463e      	mov	r6, r7
 8012f50:	f04f 0900 	mov.w	r9, #0
 8012f54:	e001      	b.n	8012f5a <uxr_serialize_AGENT_Representation+0x5a>
 8012f56:	3608      	adds	r6, #8
 8012f58:	b1a4      	cbz	r4, 8012f84 <uxr_serialize_AGENT_Representation+0x84>
 8012f5a:	6931      	ldr	r1, [r6, #16]
 8012f5c:	4628      	mov	r0, r5
 8012f5e:	f004 f92b 	bl	80171b8 <ucdr_serialize_string>
 8012f62:	6971      	ldr	r1, [r6, #20]
 8012f64:	4604      	mov	r4, r0
 8012f66:	4628      	mov	r0, r5
 8012f68:	f004 f926 	bl	80171b8 <ucdr_serialize_string>
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	f109 0901 	add.w	r9, r9, #1
 8012f72:	4004      	ands	r4, r0
 8012f74:	4599      	cmp	r9, r3
 8012f76:	b2e4      	uxtb	r4, r4
 8012f78:	d3ed      	bcc.n	8012f56 <uxr_serialize_AGENT_Representation+0x56>
 8012f7a:	ea08 0804 	and.w	r8, r8, r4
 8012f7e:	4640      	mov	r0, r8
 8012f80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f84:	f04f 0800 	mov.w	r8, #0
 8012f88:	4640      	mov	r0, r8
 8012f8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f8e:	ea08 0800 	and.w	r8, r8, r0
 8012f92:	e7d2      	b.n	8012f3a <uxr_serialize_AGENT_Representation+0x3a>

08012f94 <uxr_serialize_DATAWRITER_Representation>:
 8012f94:	b570      	push	{r4, r5, r6, lr}
 8012f96:	460d      	mov	r5, r1
 8012f98:	7809      	ldrb	r1, [r1, #0]
 8012f9a:	4606      	mov	r6, r0
 8012f9c:	f7fc f8ca 	bl	800f134 <ucdr_serialize_uint8_t>
 8012fa0:	4604      	mov	r4, r0
 8012fa2:	b130      	cbz	r0, 8012fb2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012fa4:	782b      	ldrb	r3, [r5, #0]
 8012fa6:	2b02      	cmp	r3, #2
 8012fa8:	d00c      	beq.n	8012fc4 <uxr_serialize_DATAWRITER_Representation+0x30>
 8012faa:	2b03      	cmp	r3, #3
 8012fac:	d010      	beq.n	8012fd0 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8012fae:	2b01      	cmp	r3, #1
 8012fb0:	d008      	beq.n	8012fc4 <uxr_serialize_DATAWRITER_Representation+0x30>
 8012fb2:	2202      	movs	r2, #2
 8012fb4:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8012fb8:	4630      	mov	r0, r6
 8012fba:	f003 ffdd 	bl	8016f78 <ucdr_serialize_array_uint8_t>
 8012fbe:	4020      	ands	r0, r4
 8012fc0:	b2c0      	uxtb	r0, r0
 8012fc2:	bd70      	pop	{r4, r5, r6, pc}
 8012fc4:	6869      	ldr	r1, [r5, #4]
 8012fc6:	4630      	mov	r0, r6
 8012fc8:	f004 f8f6 	bl	80171b8 <ucdr_serialize_string>
 8012fcc:	4604      	mov	r4, r0
 8012fce:	e7f0      	b.n	8012fb2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012fd0:	4629      	mov	r1, r5
 8012fd2:	4630      	mov	r0, r6
 8012fd4:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8012fd8:	3104      	adds	r1, #4
 8012fda:	f004 f8c1 	bl	8017160 <ucdr_serialize_sequence_uint8_t>
 8012fde:	4604      	mov	r4, r0
 8012fe0:	e7e7      	b.n	8012fb2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012fe2:	bf00      	nop

08012fe4 <uxr_serialize_ObjectVariant.part.0>:
 8012fe4:	b570      	push	{r4, r5, r6, lr}
 8012fe6:	780b      	ldrb	r3, [r1, #0]
 8012fe8:	3b01      	subs	r3, #1
 8012fea:	460c      	mov	r4, r1
 8012fec:	4605      	mov	r5, r0
 8012fee:	2b0d      	cmp	r3, #13
 8012ff0:	d854      	bhi.n	801309c <uxr_serialize_ObjectVariant.part.0+0xb8>
 8012ff2:	e8df f003 	tbb	[pc, r3]
 8012ff6:	0730      	.short	0x0730
 8012ff8:	07071b1b 	.word	0x07071b1b
 8012ffc:	0c530707 	.word	0x0c530707
 8013000:	494e0c0c 	.word	0x494e0c0c
 8013004:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013008:	3104      	adds	r1, #4
 801300a:	f7ff bfc3 	b.w	8012f94 <uxr_serialize_DATAWRITER_Representation>
 801300e:	7909      	ldrb	r1, [r1, #4]
 8013010:	f7fc f890 	bl	800f134 <ucdr_serialize_uint8_t>
 8013014:	b1e8      	cbz	r0, 8013052 <uxr_serialize_ObjectVariant.part.0+0x6e>
 8013016:	7923      	ldrb	r3, [r4, #4]
 8013018:	2b01      	cmp	r3, #1
 801301a:	d001      	beq.n	8013020 <uxr_serialize_ObjectVariant.part.0+0x3c>
 801301c:	2b02      	cmp	r3, #2
 801301e:	d13d      	bne.n	801309c <uxr_serialize_ObjectVariant.part.0+0xb8>
 8013020:	68a1      	ldr	r1, [r4, #8]
 8013022:	4628      	mov	r0, r5
 8013024:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013028:	f004 b8c6 	b.w	80171b8 <ucdr_serialize_string>
 801302c:	7909      	ldrb	r1, [r1, #4]
 801302e:	f7fc f881 	bl	800f134 <ucdr_serialize_uint8_t>
 8013032:	4606      	mov	r6, r0
 8013034:	b120      	cbz	r0, 8013040 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8013036:	7923      	ldrb	r3, [r4, #4]
 8013038:	2b02      	cmp	r3, #2
 801303a:	d039      	beq.n	80130b0 <uxr_serialize_ObjectVariant.part.0+0xcc>
 801303c:	2b03      	cmp	r3, #3
 801303e:	d02f      	beq.n	80130a0 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8013040:	2202      	movs	r2, #2
 8013042:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8013046:	4628      	mov	r0, r5
 8013048:	f003 ff96 	bl	8016f78 <ucdr_serialize_array_uint8_t>
 801304c:	4030      	ands	r0, r6
 801304e:	b2c0      	uxtb	r0, r0
 8013050:	bd70      	pop	{r4, r5, r6, pc}
 8013052:	2000      	movs	r0, #0
 8013054:	bd70      	pop	{r4, r5, r6, pc}
 8013056:	7909      	ldrb	r1, [r1, #4]
 8013058:	f7fc f86c 	bl	800f134 <ucdr_serialize_uint8_t>
 801305c:	4606      	mov	r6, r0
 801305e:	b158      	cbz	r0, 8013078 <uxr_serialize_ObjectVariant.part.0+0x94>
 8013060:	7923      	ldrb	r3, [r4, #4]
 8013062:	2b02      	cmp	r3, #2
 8013064:	d003      	beq.n	801306e <uxr_serialize_ObjectVariant.part.0+0x8a>
 8013066:	2b03      	cmp	r3, #3
 8013068:	d028      	beq.n	80130bc <uxr_serialize_ObjectVariant.part.0+0xd8>
 801306a:	2b01      	cmp	r3, #1
 801306c:	d104      	bne.n	8013078 <uxr_serialize_ObjectVariant.part.0+0x94>
 801306e:	68a1      	ldr	r1, [r4, #8]
 8013070:	4628      	mov	r0, r5
 8013072:	f004 f8a1 	bl	80171b8 <ucdr_serialize_string>
 8013076:	4606      	mov	r6, r0
 8013078:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 801307c:	4628      	mov	r0, r5
 801307e:	f7fc fd95 	bl	800fbac <ucdr_serialize_int16_t>
 8013082:	4030      	ands	r0, r6
 8013084:	b2c0      	uxtb	r0, r0
 8013086:	bd70      	pop	{r4, r5, r6, pc}
 8013088:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801308c:	3104      	adds	r1, #4
 801308e:	f7ff be7b 	b.w	8012d88 <uxr_serialize_CLIENT_Representation>
 8013092:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013096:	3104      	adds	r1, #4
 8013098:	f7ff bf32 	b.w	8012f00 <uxr_serialize_AGENT_Representation>
 801309c:	2001      	movs	r0, #1
 801309e:	bd70      	pop	{r4, r5, r6, pc}
 80130a0:	68a2      	ldr	r2, [r4, #8]
 80130a2:	f104 010c 	add.w	r1, r4, #12
 80130a6:	4628      	mov	r0, r5
 80130a8:	f004 f85a 	bl	8017160 <ucdr_serialize_sequence_uint8_t>
 80130ac:	4606      	mov	r6, r0
 80130ae:	e7c7      	b.n	8013040 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80130b0:	68a1      	ldr	r1, [r4, #8]
 80130b2:	4628      	mov	r0, r5
 80130b4:	f004 f880 	bl	80171b8 <ucdr_serialize_string>
 80130b8:	4606      	mov	r6, r0
 80130ba:	e7c1      	b.n	8013040 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80130bc:	68a2      	ldr	r2, [r4, #8]
 80130be:	f104 010c 	add.w	r1, r4, #12
 80130c2:	4628      	mov	r0, r5
 80130c4:	f004 f84c 	bl	8017160 <ucdr_serialize_sequence_uint8_t>
 80130c8:	4606      	mov	r6, r0
 80130ca:	e7d5      	b.n	8013078 <uxr_serialize_ObjectVariant.part.0+0x94>

080130cc <uxr_deserialize_DATAWRITER_Representation>:
 80130cc:	b570      	push	{r4, r5, r6, lr}
 80130ce:	4606      	mov	r6, r0
 80130d0:	460d      	mov	r5, r1
 80130d2:	f7fc f845 	bl	800f160 <ucdr_deserialize_uint8_t>
 80130d6:	4604      	mov	r4, r0
 80130d8:	b130      	cbz	r0, 80130e8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80130da:	782b      	ldrb	r3, [r5, #0]
 80130dc:	2b02      	cmp	r3, #2
 80130de:	d00c      	beq.n	80130fa <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80130e0:	2b03      	cmp	r3, #3
 80130e2:	d012      	beq.n	801310a <uxr_deserialize_DATAWRITER_Representation+0x3e>
 80130e4:	2b01      	cmp	r3, #1
 80130e6:	d008      	beq.n	80130fa <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80130e8:	2202      	movs	r2, #2
 80130ea:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80130ee:	4630      	mov	r0, r6
 80130f0:	f003 ffa6 	bl	8017040 <ucdr_deserialize_array_uint8_t>
 80130f4:	4020      	ands	r0, r4
 80130f6:	b2c0      	uxtb	r0, r0
 80130f8:	bd70      	pop	{r4, r5, r6, pc}
 80130fa:	6869      	ldr	r1, [r5, #4]
 80130fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013100:	4630      	mov	r0, r6
 8013102:	f004 f869 	bl	80171d8 <ucdr_deserialize_string>
 8013106:	4604      	mov	r4, r0
 8013108:	e7ee      	b.n	80130e8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801310a:	1d2b      	adds	r3, r5, #4
 801310c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013110:	f105 0108 	add.w	r1, r5, #8
 8013114:	4630      	mov	r0, r6
 8013116:	f004 f835 	bl	8017184 <ucdr_deserialize_sequence_uint8_t>
 801311a:	4604      	mov	r4, r0
 801311c:	e7e4      	b.n	80130e8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801311e:	bf00      	nop

08013120 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8013120:	b570      	push	{r4, r5, r6, lr}
 8013122:	460d      	mov	r5, r1
 8013124:	7809      	ldrb	r1, [r1, #0]
 8013126:	4606      	mov	r6, r0
 8013128:	f7fb ffd6 	bl	800f0d8 <ucdr_serialize_bool>
 801312c:	782b      	ldrb	r3, [r5, #0]
 801312e:	4604      	mov	r4, r0
 8013130:	b94b      	cbnz	r3, 8013146 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8013132:	7a29      	ldrb	r1, [r5, #8]
 8013134:	4630      	mov	r0, r6
 8013136:	f7fb ffcf 	bl	800f0d8 <ucdr_serialize_bool>
 801313a:	7a2b      	ldrb	r3, [r5, #8]
 801313c:	4004      	ands	r4, r0
 801313e:	b2e4      	uxtb	r4, r4
 8013140:	b943      	cbnz	r3, 8013154 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8013142:	4620      	mov	r0, r4
 8013144:	bd70      	pop	{r4, r5, r6, pc}
 8013146:	6869      	ldr	r1, [r5, #4]
 8013148:	4630      	mov	r0, r6
 801314a:	f004 f835 	bl	80171b8 <ucdr_serialize_string>
 801314e:	4004      	ands	r4, r0
 8013150:	b2e4      	uxtb	r4, r4
 8013152:	e7ee      	b.n	8013132 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8013154:	68e9      	ldr	r1, [r5, #12]
 8013156:	4630      	mov	r0, r6
 8013158:	f004 f82e 	bl	80171b8 <ucdr_serialize_string>
 801315c:	4004      	ands	r4, r0
 801315e:	4620      	mov	r0, r4
 8013160:	bd70      	pop	{r4, r5, r6, pc}
 8013162:	bf00      	nop

08013164 <uxr_serialize_OBJK_Topic_Binary>:
 8013164:	b570      	push	{r4, r5, r6, lr}
 8013166:	460d      	mov	r5, r1
 8013168:	6809      	ldr	r1, [r1, #0]
 801316a:	4606      	mov	r6, r0
 801316c:	f004 f824 	bl	80171b8 <ucdr_serialize_string>
 8013170:	7929      	ldrb	r1, [r5, #4]
 8013172:	4604      	mov	r4, r0
 8013174:	4630      	mov	r0, r6
 8013176:	f7fb ffaf 	bl	800f0d8 <ucdr_serialize_bool>
 801317a:	792b      	ldrb	r3, [r5, #4]
 801317c:	4004      	ands	r4, r0
 801317e:	b2e4      	uxtb	r4, r4
 8013180:	b943      	cbnz	r3, 8013194 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8013182:	7b29      	ldrb	r1, [r5, #12]
 8013184:	4630      	mov	r0, r6
 8013186:	f7fb ffa7 	bl	800f0d8 <ucdr_serialize_bool>
 801318a:	7b2b      	ldrb	r3, [r5, #12]
 801318c:	4004      	ands	r4, r0
 801318e:	b93b      	cbnz	r3, 80131a0 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8013190:	4620      	mov	r0, r4
 8013192:	bd70      	pop	{r4, r5, r6, pc}
 8013194:	68a9      	ldr	r1, [r5, #8]
 8013196:	4630      	mov	r0, r6
 8013198:	f004 f80e 	bl	80171b8 <ucdr_serialize_string>
 801319c:	4004      	ands	r4, r0
 801319e:	e7f0      	b.n	8013182 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 80131a0:	6929      	ldr	r1, [r5, #16]
 80131a2:	4630      	mov	r0, r6
 80131a4:	f004 f808 	bl	80171b8 <ucdr_serialize_string>
 80131a8:	4004      	ands	r4, r0
 80131aa:	b2e4      	uxtb	r4, r4
 80131ac:	4620      	mov	r0, r4
 80131ae:	bd70      	pop	{r4, r5, r6, pc}

080131b0 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 80131b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131b4:	460c      	mov	r4, r1
 80131b6:	7809      	ldrb	r1, [r1, #0]
 80131b8:	4606      	mov	r6, r0
 80131ba:	f7fb ff8d 	bl	800f0d8 <ucdr_serialize_bool>
 80131be:	7823      	ldrb	r3, [r4, #0]
 80131c0:	4605      	mov	r5, r0
 80131c2:	b96b      	cbnz	r3, 80131e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 80131c4:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 80131c8:	4630      	mov	r0, r6
 80131ca:	f7fb ff85 	bl	800f0d8 <ucdr_serialize_bool>
 80131ce:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80131d2:	4005      	ands	r5, r0
 80131d4:	b2ed      	uxtb	r5, r5
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d169      	bne.n	80132ae <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 80131da:	4628      	mov	r0, r5
 80131dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131e0:	6861      	ldr	r1, [r4, #4]
 80131e2:	4630      	mov	r0, r6
 80131e4:	f7fc f9bc 	bl	800f560 <ucdr_serialize_uint32_t>
 80131e8:	6863      	ldr	r3, [r4, #4]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d06b      	beq.n	80132c6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 80131ee:	2800      	cmp	r0, #0
 80131f0:	d067      	beq.n	80132c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80131f2:	68a1      	ldr	r1, [r4, #8]
 80131f4:	4630      	mov	r0, r6
 80131f6:	f003 ffdf 	bl	80171b8 <ucdr_serialize_string>
 80131fa:	6863      	ldr	r3, [r4, #4]
 80131fc:	2b01      	cmp	r3, #1
 80131fe:	d953      	bls.n	80132a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013200:	2800      	cmp	r0, #0
 8013202:	d05e      	beq.n	80132c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013204:	68e1      	ldr	r1, [r4, #12]
 8013206:	4630      	mov	r0, r6
 8013208:	f003 ffd6 	bl	80171b8 <ucdr_serialize_string>
 801320c:	6863      	ldr	r3, [r4, #4]
 801320e:	2b02      	cmp	r3, #2
 8013210:	d94a      	bls.n	80132a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013212:	2800      	cmp	r0, #0
 8013214:	d055      	beq.n	80132c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013216:	6921      	ldr	r1, [r4, #16]
 8013218:	4630      	mov	r0, r6
 801321a:	f003 ffcd 	bl	80171b8 <ucdr_serialize_string>
 801321e:	6863      	ldr	r3, [r4, #4]
 8013220:	2b03      	cmp	r3, #3
 8013222:	d941      	bls.n	80132a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013224:	2800      	cmp	r0, #0
 8013226:	d04c      	beq.n	80132c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013228:	6961      	ldr	r1, [r4, #20]
 801322a:	4630      	mov	r0, r6
 801322c:	f003 ffc4 	bl	80171b8 <ucdr_serialize_string>
 8013230:	6863      	ldr	r3, [r4, #4]
 8013232:	2b04      	cmp	r3, #4
 8013234:	d938      	bls.n	80132a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013236:	2800      	cmp	r0, #0
 8013238:	d043      	beq.n	80132c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801323a:	69a1      	ldr	r1, [r4, #24]
 801323c:	4630      	mov	r0, r6
 801323e:	f003 ffbb 	bl	80171b8 <ucdr_serialize_string>
 8013242:	6863      	ldr	r3, [r4, #4]
 8013244:	2b05      	cmp	r3, #5
 8013246:	d92f      	bls.n	80132a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013248:	2800      	cmp	r0, #0
 801324a:	d03a      	beq.n	80132c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801324c:	69e1      	ldr	r1, [r4, #28]
 801324e:	4630      	mov	r0, r6
 8013250:	f003 ffb2 	bl	80171b8 <ucdr_serialize_string>
 8013254:	6863      	ldr	r3, [r4, #4]
 8013256:	2b06      	cmp	r3, #6
 8013258:	d926      	bls.n	80132a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801325a:	b390      	cbz	r0, 80132c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801325c:	6a21      	ldr	r1, [r4, #32]
 801325e:	4630      	mov	r0, r6
 8013260:	f003 ffaa 	bl	80171b8 <ucdr_serialize_string>
 8013264:	6863      	ldr	r3, [r4, #4]
 8013266:	2b07      	cmp	r3, #7
 8013268:	d91e      	bls.n	80132a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801326a:	b350      	cbz	r0, 80132c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801326c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801326e:	4630      	mov	r0, r6
 8013270:	f003 ffa2 	bl	80171b8 <ucdr_serialize_string>
 8013274:	6863      	ldr	r3, [r4, #4]
 8013276:	2b08      	cmp	r3, #8
 8013278:	d916      	bls.n	80132a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801327a:	b310      	cbz	r0, 80132c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801327c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801327e:	4630      	mov	r0, r6
 8013280:	f003 ff9a 	bl	80171b8 <ucdr_serialize_string>
 8013284:	6863      	ldr	r3, [r4, #4]
 8013286:	2b09      	cmp	r3, #9
 8013288:	d90e      	bls.n	80132a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801328a:	b1d0      	cbz	r0, 80132c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801328c:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8013290:	2709      	movs	r7, #9
 8013292:	e000      	b.n	8013296 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8013294:	b1a8      	cbz	r0, 80132c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013296:	f858 1b04 	ldr.w	r1, [r8], #4
 801329a:	4630      	mov	r0, r6
 801329c:	f003 ff8c 	bl	80171b8 <ucdr_serialize_string>
 80132a0:	6862      	ldr	r2, [r4, #4]
 80132a2:	3701      	adds	r7, #1
 80132a4:	4297      	cmp	r7, r2
 80132a6:	d3f5      	bcc.n	8013294 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 80132a8:	4005      	ands	r5, r0
 80132aa:	b2ed      	uxtb	r5, r5
 80132ac:	e78a      	b.n	80131c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80132ae:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80132b0:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80132b4:	4630      	mov	r0, r6
 80132b6:	f003 ff53 	bl	8017160 <ucdr_serialize_sequence_uint8_t>
 80132ba:	4005      	ands	r5, r0
 80132bc:	4628      	mov	r0, r5
 80132be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132c2:	2500      	movs	r5, #0
 80132c4:	e77e      	b.n	80131c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80132c6:	4028      	ands	r0, r5
 80132c8:	b2c5      	uxtb	r5, r0
 80132ca:	e77b      	b.n	80131c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

080132cc <uxr_serialize_OBJK_Publisher_Binary>:
 80132cc:	b570      	push	{r4, r5, r6, lr}
 80132ce:	460d      	mov	r5, r1
 80132d0:	7809      	ldrb	r1, [r1, #0]
 80132d2:	4606      	mov	r6, r0
 80132d4:	f7fb ff00 	bl	800f0d8 <ucdr_serialize_bool>
 80132d8:	782b      	ldrb	r3, [r5, #0]
 80132da:	4604      	mov	r4, r0
 80132dc:	b94b      	cbnz	r3, 80132f2 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 80132de:	7a29      	ldrb	r1, [r5, #8]
 80132e0:	4630      	mov	r0, r6
 80132e2:	f7fb fef9 	bl	800f0d8 <ucdr_serialize_bool>
 80132e6:	7a2b      	ldrb	r3, [r5, #8]
 80132e8:	4004      	ands	r4, r0
 80132ea:	b2e4      	uxtb	r4, r4
 80132ec:	b943      	cbnz	r3, 8013300 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 80132ee:	4620      	mov	r0, r4
 80132f0:	bd70      	pop	{r4, r5, r6, pc}
 80132f2:	6869      	ldr	r1, [r5, #4]
 80132f4:	4630      	mov	r0, r6
 80132f6:	f003 ff5f 	bl	80171b8 <ucdr_serialize_string>
 80132fa:	4004      	ands	r4, r0
 80132fc:	b2e4      	uxtb	r4, r4
 80132fe:	e7ee      	b.n	80132de <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8013300:	f105 010c 	add.w	r1, r5, #12
 8013304:	4630      	mov	r0, r6
 8013306:	f7ff ff53 	bl	80131b0 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801330a:	4004      	ands	r4, r0
 801330c:	4620      	mov	r0, r4
 801330e:	bd70      	pop	{r4, r5, r6, pc}

08013310 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8013310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013314:	460c      	mov	r4, r1
 8013316:	7809      	ldrb	r1, [r1, #0]
 8013318:	4606      	mov	r6, r0
 801331a:	f7fb fedd 	bl	800f0d8 <ucdr_serialize_bool>
 801331e:	7823      	ldrb	r3, [r4, #0]
 8013320:	4605      	mov	r5, r0
 8013322:	b96b      	cbnz	r3, 8013340 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8013324:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8013328:	4630      	mov	r0, r6
 801332a:	f7fb fed5 	bl	800f0d8 <ucdr_serialize_bool>
 801332e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8013332:	4005      	ands	r5, r0
 8013334:	b2ed      	uxtb	r5, r5
 8013336:	2b00      	cmp	r3, #0
 8013338:	d169      	bne.n	801340e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 801333a:	4628      	mov	r0, r5
 801333c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013340:	6861      	ldr	r1, [r4, #4]
 8013342:	4630      	mov	r0, r6
 8013344:	f7fc f90c 	bl	800f560 <ucdr_serialize_uint32_t>
 8013348:	6863      	ldr	r3, [r4, #4]
 801334a:	2b00      	cmp	r3, #0
 801334c:	d06b      	beq.n	8013426 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 801334e:	2800      	cmp	r0, #0
 8013350:	d067      	beq.n	8013422 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013352:	68a1      	ldr	r1, [r4, #8]
 8013354:	4630      	mov	r0, r6
 8013356:	f003 ff2f 	bl	80171b8 <ucdr_serialize_string>
 801335a:	6863      	ldr	r3, [r4, #4]
 801335c:	2b01      	cmp	r3, #1
 801335e:	d953      	bls.n	8013408 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013360:	2800      	cmp	r0, #0
 8013362:	d05e      	beq.n	8013422 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013364:	68e1      	ldr	r1, [r4, #12]
 8013366:	4630      	mov	r0, r6
 8013368:	f003 ff26 	bl	80171b8 <ucdr_serialize_string>
 801336c:	6863      	ldr	r3, [r4, #4]
 801336e:	2b02      	cmp	r3, #2
 8013370:	d94a      	bls.n	8013408 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013372:	2800      	cmp	r0, #0
 8013374:	d055      	beq.n	8013422 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013376:	6921      	ldr	r1, [r4, #16]
 8013378:	4630      	mov	r0, r6
 801337a:	f003 ff1d 	bl	80171b8 <ucdr_serialize_string>
 801337e:	6863      	ldr	r3, [r4, #4]
 8013380:	2b03      	cmp	r3, #3
 8013382:	d941      	bls.n	8013408 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013384:	2800      	cmp	r0, #0
 8013386:	d04c      	beq.n	8013422 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013388:	6961      	ldr	r1, [r4, #20]
 801338a:	4630      	mov	r0, r6
 801338c:	f003 ff14 	bl	80171b8 <ucdr_serialize_string>
 8013390:	6863      	ldr	r3, [r4, #4]
 8013392:	2b04      	cmp	r3, #4
 8013394:	d938      	bls.n	8013408 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013396:	2800      	cmp	r0, #0
 8013398:	d043      	beq.n	8013422 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801339a:	69a1      	ldr	r1, [r4, #24]
 801339c:	4630      	mov	r0, r6
 801339e:	f003 ff0b 	bl	80171b8 <ucdr_serialize_string>
 80133a2:	6863      	ldr	r3, [r4, #4]
 80133a4:	2b05      	cmp	r3, #5
 80133a6:	d92f      	bls.n	8013408 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80133a8:	2800      	cmp	r0, #0
 80133aa:	d03a      	beq.n	8013422 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80133ac:	69e1      	ldr	r1, [r4, #28]
 80133ae:	4630      	mov	r0, r6
 80133b0:	f003 ff02 	bl	80171b8 <ucdr_serialize_string>
 80133b4:	6863      	ldr	r3, [r4, #4]
 80133b6:	2b06      	cmp	r3, #6
 80133b8:	d926      	bls.n	8013408 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80133ba:	b390      	cbz	r0, 8013422 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80133bc:	6a21      	ldr	r1, [r4, #32]
 80133be:	4630      	mov	r0, r6
 80133c0:	f003 fefa 	bl	80171b8 <ucdr_serialize_string>
 80133c4:	6863      	ldr	r3, [r4, #4]
 80133c6:	2b07      	cmp	r3, #7
 80133c8:	d91e      	bls.n	8013408 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80133ca:	b350      	cbz	r0, 8013422 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80133cc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80133ce:	4630      	mov	r0, r6
 80133d0:	f003 fef2 	bl	80171b8 <ucdr_serialize_string>
 80133d4:	6863      	ldr	r3, [r4, #4]
 80133d6:	2b08      	cmp	r3, #8
 80133d8:	d916      	bls.n	8013408 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80133da:	b310      	cbz	r0, 8013422 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80133dc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80133de:	4630      	mov	r0, r6
 80133e0:	f003 feea 	bl	80171b8 <ucdr_serialize_string>
 80133e4:	6863      	ldr	r3, [r4, #4]
 80133e6:	2b09      	cmp	r3, #9
 80133e8:	d90e      	bls.n	8013408 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80133ea:	b1d0      	cbz	r0, 8013422 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80133ec:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 80133f0:	2709      	movs	r7, #9
 80133f2:	e000      	b.n	80133f6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 80133f4:	b1a8      	cbz	r0, 8013422 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80133f6:	f858 1b04 	ldr.w	r1, [r8], #4
 80133fa:	4630      	mov	r0, r6
 80133fc:	f003 fedc 	bl	80171b8 <ucdr_serialize_string>
 8013400:	6862      	ldr	r2, [r4, #4]
 8013402:	3701      	adds	r7, #1
 8013404:	4297      	cmp	r7, r2
 8013406:	d3f5      	bcc.n	80133f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8013408:	4005      	ands	r5, r0
 801340a:	b2ed      	uxtb	r5, r5
 801340c:	e78a      	b.n	8013324 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801340e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013410:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8013414:	4630      	mov	r0, r6
 8013416:	f003 fea3 	bl	8017160 <ucdr_serialize_sequence_uint8_t>
 801341a:	4005      	ands	r5, r0
 801341c:	4628      	mov	r0, r5
 801341e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013422:	2500      	movs	r5, #0
 8013424:	e77e      	b.n	8013324 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8013426:	4028      	ands	r0, r5
 8013428:	b2c5      	uxtb	r5, r0
 801342a:	e77b      	b.n	8013324 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0801342c <uxr_serialize_OBJK_Subscriber_Binary>:
 801342c:	b570      	push	{r4, r5, r6, lr}
 801342e:	460d      	mov	r5, r1
 8013430:	7809      	ldrb	r1, [r1, #0]
 8013432:	4606      	mov	r6, r0
 8013434:	f7fb fe50 	bl	800f0d8 <ucdr_serialize_bool>
 8013438:	782b      	ldrb	r3, [r5, #0]
 801343a:	4604      	mov	r4, r0
 801343c:	b94b      	cbnz	r3, 8013452 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 801343e:	7a29      	ldrb	r1, [r5, #8]
 8013440:	4630      	mov	r0, r6
 8013442:	f7fb fe49 	bl	800f0d8 <ucdr_serialize_bool>
 8013446:	7a2b      	ldrb	r3, [r5, #8]
 8013448:	4004      	ands	r4, r0
 801344a:	b2e4      	uxtb	r4, r4
 801344c:	b943      	cbnz	r3, 8013460 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 801344e:	4620      	mov	r0, r4
 8013450:	bd70      	pop	{r4, r5, r6, pc}
 8013452:	6869      	ldr	r1, [r5, #4]
 8013454:	4630      	mov	r0, r6
 8013456:	f003 feaf 	bl	80171b8 <ucdr_serialize_string>
 801345a:	4004      	ands	r4, r0
 801345c:	b2e4      	uxtb	r4, r4
 801345e:	e7ee      	b.n	801343e <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8013460:	f105 010c 	add.w	r1, r5, #12
 8013464:	4630      	mov	r0, r6
 8013466:	f7ff ff53 	bl	8013310 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 801346a:	4004      	ands	r4, r0
 801346c:	4620      	mov	r0, r4
 801346e:	bd70      	pop	{r4, r5, r6, pc}

08013470 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8013470:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8013474:	4688      	mov	r8, r1
 8013476:	8809      	ldrh	r1, [r1, #0]
 8013478:	4681      	mov	r9, r0
 801347a:	f7fb fe87 	bl	800f18c <ucdr_serialize_uint16_t>
 801347e:	f898 1002 	ldrb.w	r1, [r8, #2]
 8013482:	4606      	mov	r6, r0
 8013484:	4648      	mov	r0, r9
 8013486:	f7fb fe27 	bl	800f0d8 <ucdr_serialize_bool>
 801348a:	f898 3002 	ldrb.w	r3, [r8, #2]
 801348e:	4006      	ands	r6, r0
 8013490:	b2f5      	uxtb	r5, r6
 8013492:	b9eb      	cbnz	r3, 80134d0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8013494:	f898 1006 	ldrb.w	r1, [r8, #6]
 8013498:	4648      	mov	r0, r9
 801349a:	f7fb fe1d 	bl	800f0d8 <ucdr_serialize_bool>
 801349e:	f898 3006 	ldrb.w	r3, [r8, #6]
 80134a2:	4005      	ands	r5, r0
 80134a4:	bb7b      	cbnz	r3, 8013506 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 80134a6:	f898 100c 	ldrb.w	r1, [r8, #12]
 80134aa:	4648      	mov	r0, r9
 80134ac:	f7fb fe14 	bl	800f0d8 <ucdr_serialize_bool>
 80134b0:	f898 300c 	ldrb.w	r3, [r8, #12]
 80134b4:	4005      	ands	r5, r0
 80134b6:	b9f3      	cbnz	r3, 80134f6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 80134b8:	f898 1014 	ldrb.w	r1, [r8, #20]
 80134bc:	4648      	mov	r0, r9
 80134be:	f7fb fe0b 	bl	800f0d8 <ucdr_serialize_bool>
 80134c2:	f898 3014 	ldrb.w	r3, [r8, #20]
 80134c6:	4005      	ands	r5, r0
 80134c8:	b94b      	cbnz	r3, 80134de <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 80134ca:	4628      	mov	r0, r5
 80134cc:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80134d0:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80134d4:	4648      	mov	r0, r9
 80134d6:	f7fb fe59 	bl	800f18c <ucdr_serialize_uint16_t>
 80134da:	4005      	ands	r5, r0
 80134dc:	e7da      	b.n	8013494 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 80134de:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80134e2:	f108 011c 	add.w	r1, r8, #28
 80134e6:	4648      	mov	r0, r9
 80134e8:	f003 fe3a 	bl	8017160 <ucdr_serialize_sequence_uint8_t>
 80134ec:	4028      	ands	r0, r5
 80134ee:	b2c5      	uxtb	r5, r0
 80134f0:	4628      	mov	r0, r5
 80134f2:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80134f6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80134fa:	4648      	mov	r0, r9
 80134fc:	f7fc f830 	bl	800f560 <ucdr_serialize_uint32_t>
 8013500:	4028      	ands	r0, r5
 8013502:	b2c5      	uxtb	r5, r0
 8013504:	e7d8      	b.n	80134b8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8013506:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801350a:	4648      	mov	r0, r9
 801350c:	f7fc f828 	bl	800f560 <ucdr_serialize_uint32_t>
 8013510:	4028      	ands	r0, r5
 8013512:	b2c5      	uxtb	r5, r0
 8013514:	e7c7      	b.n	80134a6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8013516:	bf00      	nop

08013518 <uxr_serialize_OBJK_DataReader_Binary>:
 8013518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801351a:	2202      	movs	r2, #2
 801351c:	460c      	mov	r4, r1
 801351e:	4606      	mov	r6, r0
 8013520:	f003 fd2a 	bl	8016f78 <ucdr_serialize_array_uint8_t>
 8013524:	78a1      	ldrb	r1, [r4, #2]
 8013526:	4605      	mov	r5, r0
 8013528:	4630      	mov	r0, r6
 801352a:	f7fb fdd5 	bl	800f0d8 <ucdr_serialize_bool>
 801352e:	78a3      	ldrb	r3, [r4, #2]
 8013530:	4005      	ands	r5, r0
 8013532:	b2ed      	uxtb	r5, r5
 8013534:	b90b      	cbnz	r3, 801353a <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8013536:	4628      	mov	r0, r5
 8013538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801353a:	f104 0108 	add.w	r1, r4, #8
 801353e:	4630      	mov	r0, r6
 8013540:	f7ff ff96 	bl	8013470 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8013544:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8013548:	4607      	mov	r7, r0
 801354a:	4630      	mov	r0, r6
 801354c:	f7fb fdc4 	bl	800f0d8 <ucdr_serialize_bool>
 8013550:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8013554:	4038      	ands	r0, r7
 8013556:	b2c7      	uxtb	r7, r0
 8013558:	b95b      	cbnz	r3, 8013572 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 801355a:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 801355e:	4630      	mov	r0, r6
 8013560:	f7fb fdba 	bl	800f0d8 <ucdr_serialize_bool>
 8013564:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8013568:	4007      	ands	r7, r0
 801356a:	b94b      	cbnz	r3, 8013580 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 801356c:	403d      	ands	r5, r7
 801356e:	4628      	mov	r0, r5
 8013570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013572:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 8013576:	4630      	mov	r0, r6
 8013578:	f7fc fa48 	bl	800fa0c <ucdr_serialize_uint64_t>
 801357c:	4007      	ands	r7, r0
 801357e:	e7ec      	b.n	801355a <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8013580:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8013582:	4630      	mov	r0, r6
 8013584:	f003 fe18 	bl	80171b8 <ucdr_serialize_string>
 8013588:	4007      	ands	r7, r0
 801358a:	b2ff      	uxtb	r7, r7
 801358c:	e7ee      	b.n	801356c <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801358e:	bf00      	nop

08013590 <uxr_serialize_OBJK_DataWriter_Binary>:
 8013590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013592:	2202      	movs	r2, #2
 8013594:	460d      	mov	r5, r1
 8013596:	4606      	mov	r6, r0
 8013598:	f003 fcee 	bl	8016f78 <ucdr_serialize_array_uint8_t>
 801359c:	78a9      	ldrb	r1, [r5, #2]
 801359e:	4604      	mov	r4, r0
 80135a0:	4630      	mov	r0, r6
 80135a2:	f7fb fd99 	bl	800f0d8 <ucdr_serialize_bool>
 80135a6:	78ab      	ldrb	r3, [r5, #2]
 80135a8:	4004      	ands	r4, r0
 80135aa:	b2e4      	uxtb	r4, r4
 80135ac:	b90b      	cbnz	r3, 80135b2 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 80135ae:	4620      	mov	r0, r4
 80135b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80135b2:	f105 0108 	add.w	r1, r5, #8
 80135b6:	4630      	mov	r0, r6
 80135b8:	f7ff ff5a 	bl	8013470 <uxr_serialize_OBJK_Endpoint_QosBinary>
 80135bc:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 80135c0:	4607      	mov	r7, r0
 80135c2:	4630      	mov	r0, r6
 80135c4:	f7fb fd88 	bl	800f0d8 <ucdr_serialize_bool>
 80135c8:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 80135cc:	4038      	ands	r0, r7
 80135ce:	b2c7      	uxtb	r7, r0
 80135d0:	b913      	cbnz	r3, 80135d8 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 80135d2:	403c      	ands	r4, r7
 80135d4:	4620      	mov	r0, r4
 80135d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80135d8:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 80135dc:	4630      	mov	r0, r6
 80135de:	f7fc fa15 	bl	800fa0c <ucdr_serialize_uint64_t>
 80135e2:	4007      	ands	r7, r0
 80135e4:	e7f5      	b.n	80135d2 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 80135e6:	bf00      	nop

080135e8 <uxr_deserialize_ObjectVariant>:
 80135e8:	b570      	push	{r4, r5, r6, lr}
 80135ea:	4605      	mov	r5, r0
 80135ec:	460e      	mov	r6, r1
 80135ee:	f7fb fdb7 	bl	800f160 <ucdr_deserialize_uint8_t>
 80135f2:	b168      	cbz	r0, 8013610 <uxr_deserialize_ObjectVariant+0x28>
 80135f4:	7833      	ldrb	r3, [r6, #0]
 80135f6:	3b01      	subs	r3, #1
 80135f8:	4604      	mov	r4, r0
 80135fa:	2b0d      	cmp	r3, #13
 80135fc:	d809      	bhi.n	8013612 <uxr_deserialize_ObjectVariant+0x2a>
 80135fe:	e8df f003 	tbb	[pc, r3]
 8013602:	0a41      	.short	0x0a41
 8013604:	0a0a2323 	.word	0x0a0a2323
 8013608:	10080a0a 	.word	0x10080a0a
 801360c:	565c1010 	.word	0x565c1010
 8013610:	2400      	movs	r4, #0
 8013612:	4620      	mov	r0, r4
 8013614:	bd70      	pop	{r4, r5, r6, pc}
 8013616:	1d31      	adds	r1, r6, #4
 8013618:	4628      	mov	r0, r5
 801361a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801361e:	f7ff bd55 	b.w	80130cc <uxr_deserialize_DATAWRITER_Representation>
 8013622:	1d31      	adds	r1, r6, #4
 8013624:	4628      	mov	r0, r5
 8013626:	f7fb fd9b 	bl	800f160 <ucdr_deserialize_uint8_t>
 801362a:	2800      	cmp	r0, #0
 801362c:	d0f0      	beq.n	8013610 <uxr_deserialize_ObjectVariant+0x28>
 801362e:	7933      	ldrb	r3, [r6, #4]
 8013630:	2b01      	cmp	r3, #1
 8013632:	d001      	beq.n	8013638 <uxr_deserialize_ObjectVariant+0x50>
 8013634:	2b02      	cmp	r3, #2
 8013636:	d1ec      	bne.n	8013612 <uxr_deserialize_ObjectVariant+0x2a>
 8013638:	68b1      	ldr	r1, [r6, #8]
 801363a:	4628      	mov	r0, r5
 801363c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013640:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013644:	f003 bdc8 	b.w	80171d8 <ucdr_deserialize_string>
 8013648:	1d31      	adds	r1, r6, #4
 801364a:	4628      	mov	r0, r5
 801364c:	f7fb fd88 	bl	800f160 <ucdr_deserialize_uint8_t>
 8013650:	4604      	mov	r4, r0
 8013652:	b170      	cbz	r0, 8013672 <uxr_deserialize_ObjectVariant+0x8a>
 8013654:	7933      	ldrb	r3, [r6, #4]
 8013656:	2b02      	cmp	r3, #2
 8013658:	d04c      	beq.n	80136f4 <uxr_deserialize_ObjectVariant+0x10c>
 801365a:	2b03      	cmp	r3, #3
 801365c:	d109      	bne.n	8013672 <uxr_deserialize_ObjectVariant+0x8a>
 801365e:	f106 0308 	add.w	r3, r6, #8
 8013662:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013666:	f106 010c 	add.w	r1, r6, #12
 801366a:	4628      	mov	r0, r5
 801366c:	f003 fd8a 	bl	8017184 <ucdr_deserialize_sequence_uint8_t>
 8013670:	4604      	mov	r4, r0
 8013672:	2202      	movs	r2, #2
 8013674:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8013678:	4628      	mov	r0, r5
 801367a:	f003 fce1 	bl	8017040 <ucdr_deserialize_array_uint8_t>
 801367e:	4020      	ands	r0, r4
 8013680:	b2c4      	uxtb	r4, r0
 8013682:	e7c6      	b.n	8013612 <uxr_deserialize_ObjectVariant+0x2a>
 8013684:	1d31      	adds	r1, r6, #4
 8013686:	4628      	mov	r0, r5
 8013688:	f7fb fd6a 	bl	800f160 <ucdr_deserialize_uint8_t>
 801368c:	4604      	mov	r4, r0
 801368e:	b130      	cbz	r0, 801369e <uxr_deserialize_ObjectVariant+0xb6>
 8013690:	7933      	ldrb	r3, [r6, #4]
 8013692:	2b02      	cmp	r3, #2
 8013694:	d036      	beq.n	8013704 <uxr_deserialize_ObjectVariant+0x11c>
 8013696:	2b03      	cmp	r3, #3
 8013698:	d03c      	beq.n	8013714 <uxr_deserialize_ObjectVariant+0x12c>
 801369a:	2b01      	cmp	r3, #1
 801369c:	d032      	beq.n	8013704 <uxr_deserialize_ObjectVariant+0x11c>
 801369e:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80136a2:	4628      	mov	r0, r5
 80136a4:	f7fc fb02 	bl	800fcac <ucdr_deserialize_int16_t>
 80136a8:	4020      	ands	r0, r4
 80136aa:	b2c4      	uxtb	r4, r0
 80136ac:	e7b1      	b.n	8013612 <uxr_deserialize_ObjectVariant+0x2a>
 80136ae:	1d31      	adds	r1, r6, #4
 80136b0:	4628      	mov	r0, r5
 80136b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80136b6:	f7ff bbbf 	b.w	8012e38 <uxr_deserialize_CLIENT_Representation>
 80136ba:	2204      	movs	r2, #4
 80136bc:	18b1      	adds	r1, r6, r2
 80136be:	4628      	mov	r0, r5
 80136c0:	f003 fcbe 	bl	8017040 <ucdr_deserialize_array_uint8_t>
 80136c4:	2202      	movs	r2, #2
 80136c6:	f106 0108 	add.w	r1, r6, #8
 80136ca:	4604      	mov	r4, r0
 80136cc:	4628      	mov	r0, r5
 80136ce:	f003 fcb7 	bl	8017040 <ucdr_deserialize_array_uint8_t>
 80136d2:	2202      	movs	r2, #2
 80136d4:	4004      	ands	r4, r0
 80136d6:	f106 010a 	add.w	r1, r6, #10
 80136da:	4628      	mov	r0, r5
 80136dc:	f003 fcb0 	bl	8017040 <ucdr_deserialize_array_uint8_t>
 80136e0:	b2e4      	uxtb	r4, r4
 80136e2:	4603      	mov	r3, r0
 80136e4:	f106 010c 	add.w	r1, r6, #12
 80136e8:	4628      	mov	r0, r5
 80136ea:	401c      	ands	r4, r3
 80136ec:	f7fb fd0a 	bl	800f104 <ucdr_deserialize_bool>
 80136f0:	4004      	ands	r4, r0
 80136f2:	e78e      	b.n	8013612 <uxr_deserialize_ObjectVariant+0x2a>
 80136f4:	68b1      	ldr	r1, [r6, #8]
 80136f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80136fa:	4628      	mov	r0, r5
 80136fc:	f003 fd6c 	bl	80171d8 <ucdr_deserialize_string>
 8013700:	4604      	mov	r4, r0
 8013702:	e7b6      	b.n	8013672 <uxr_deserialize_ObjectVariant+0x8a>
 8013704:	68b1      	ldr	r1, [r6, #8]
 8013706:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801370a:	4628      	mov	r0, r5
 801370c:	f003 fd64 	bl	80171d8 <ucdr_deserialize_string>
 8013710:	4604      	mov	r4, r0
 8013712:	e7c4      	b.n	801369e <uxr_deserialize_ObjectVariant+0xb6>
 8013714:	f106 0308 	add.w	r3, r6, #8
 8013718:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801371c:	f106 010c 	add.w	r1, r6, #12
 8013720:	4628      	mov	r0, r5
 8013722:	f003 fd2f 	bl	8017184 <ucdr_deserialize_sequence_uint8_t>
 8013726:	4604      	mov	r4, r0
 8013728:	e7b9      	b.n	801369e <uxr_deserialize_ObjectVariant+0xb6>
 801372a:	bf00      	nop

0801372c <uxr_deserialize_BaseObjectRequest>:
 801372c:	b570      	push	{r4, r5, r6, lr}
 801372e:	2202      	movs	r2, #2
 8013730:	4605      	mov	r5, r0
 8013732:	460e      	mov	r6, r1
 8013734:	f003 fc84 	bl	8017040 <ucdr_deserialize_array_uint8_t>
 8013738:	2202      	movs	r2, #2
 801373a:	4604      	mov	r4, r0
 801373c:	18b1      	adds	r1, r6, r2
 801373e:	4628      	mov	r0, r5
 8013740:	f003 fc7e 	bl	8017040 <ucdr_deserialize_array_uint8_t>
 8013744:	4020      	ands	r0, r4
 8013746:	b2c0      	uxtb	r0, r0
 8013748:	bd70      	pop	{r4, r5, r6, pc}
 801374a:	bf00      	nop

0801374c <uxr_serialize_ActivityInfoVariant>:
 801374c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013750:	460d      	mov	r5, r1
 8013752:	7809      	ldrb	r1, [r1, #0]
 8013754:	4607      	mov	r7, r0
 8013756:	f7fb fced 	bl	800f134 <ucdr_serialize_uint8_t>
 801375a:	4681      	mov	r9, r0
 801375c:	b138      	cbz	r0, 801376e <uxr_serialize_ActivityInfoVariant+0x22>
 801375e:	782b      	ldrb	r3, [r5, #0]
 8013760:	2b06      	cmp	r3, #6
 8013762:	f000 8082 	beq.w	801386a <uxr_serialize_ActivityInfoVariant+0x11e>
 8013766:	2b0d      	cmp	r3, #13
 8013768:	d016      	beq.n	8013798 <uxr_serialize_ActivityInfoVariant+0x4c>
 801376a:	2b05      	cmp	r3, #5
 801376c:	d002      	beq.n	8013774 <uxr_serialize_ActivityInfoVariant+0x28>
 801376e:	4648      	mov	r0, r9
 8013770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013774:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8013778:	4638      	mov	r0, r7
 801377a:	f7fc fa17 	bl	800fbac <ucdr_serialize_int16_t>
 801377e:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8013782:	4681      	mov	r9, r0
 8013784:	4638      	mov	r0, r7
 8013786:	f7fc f941 	bl	800fa0c <ucdr_serialize_uint64_t>
 801378a:	ea09 0000 	and.w	r0, r9, r0
 801378e:	fa5f f980 	uxtb.w	r9, r0
 8013792:	4648      	mov	r0, r9
 8013794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013798:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801379c:	4638      	mov	r0, r7
 801379e:	f7fc fa05 	bl	800fbac <ucdr_serialize_int16_t>
 80137a2:	68e9      	ldr	r1, [r5, #12]
 80137a4:	4681      	mov	r9, r0
 80137a6:	4638      	mov	r0, r7
 80137a8:	f7fb feda 	bl	800f560 <ucdr_serialize_uint32_t>
 80137ac:	68eb      	ldr	r3, [r5, #12]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d0eb      	beq.n	801378a <uxr_serialize_ActivityInfoVariant+0x3e>
 80137b2:	b320      	cbz	r0, 80137fe <uxr_serialize_ActivityInfoVariant+0xb2>
 80137b4:	f105 080c 	add.w	r8, r5, #12
 80137b8:	2600      	movs	r6, #0
 80137ba:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 80137be:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 80137c2:	f89a 1010 	ldrb.w	r1, [sl, #16]
 80137c6:	4638      	mov	r0, r7
 80137c8:	f7fb fcb4 	bl	800f134 <ucdr_serialize_uint8_t>
 80137cc:	2800      	cmp	r0, #0
 80137ce:	d053      	beq.n	8013878 <uxr_serialize_ActivityInfoVariant+0x12c>
 80137d0:	f89a 3010 	ldrb.w	r3, [sl, #16]
 80137d4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80137d8:	0074      	lsls	r4, r6, #1
 80137da:	00c9      	lsls	r1, r1, #3
 80137dc:	2b03      	cmp	r3, #3
 80137de:	d854      	bhi.n	801388a <uxr_serialize_ActivityInfoVariant+0x13e>
 80137e0:	e8df f003 	tbb	[pc, r3]
 80137e4:	02102132 	.word	0x02102132
 80137e8:	4441      	add	r1, r8
 80137ea:	4638      	mov	r0, r7
 80137ec:	6889      	ldr	r1, [r1, #8]
 80137ee:	f003 fce3 	bl	80171b8 <ucdr_serialize_string>
 80137f2:	68ea      	ldr	r2, [r5, #12]
 80137f4:	3601      	adds	r6, #1
 80137f6:	4296      	cmp	r6, r2
 80137f8:	d242      	bcs.n	8013880 <uxr_serialize_ActivityInfoVariant+0x134>
 80137fa:	2800      	cmp	r0, #0
 80137fc:	d1dd      	bne.n	80137ba <uxr_serialize_ActivityInfoVariant+0x6e>
 80137fe:	f04f 0900 	mov.w	r9, #0
 8013802:	e7b4      	b.n	801376e <uxr_serialize_ActivityInfoVariant+0x22>
 8013804:	3108      	adds	r1, #8
 8013806:	4441      	add	r1, r8
 8013808:	2210      	movs	r2, #16
 801380a:	4638      	mov	r0, r7
 801380c:	f003 fbb4 	bl	8016f78 <ucdr_serialize_array_uint8_t>
 8013810:	4434      	add	r4, r6
 8013812:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8013816:	4604      	mov	r4, r0
 8013818:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801381a:	4638      	mov	r0, r7
 801381c:	f7fb fea0 	bl	800f560 <ucdr_serialize_uint32_t>
 8013820:	4020      	ands	r0, r4
 8013822:	b2c0      	uxtb	r0, r0
 8013824:	e7e5      	b.n	80137f2 <uxr_serialize_ActivityInfoVariant+0xa6>
 8013826:	3108      	adds	r1, #8
 8013828:	4441      	add	r1, r8
 801382a:	2204      	movs	r2, #4
 801382c:	4638      	mov	r0, r7
 801382e:	f003 fba3 	bl	8016f78 <ucdr_serialize_array_uint8_t>
 8013832:	4434      	add	r4, r6
 8013834:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8013838:	4604      	mov	r4, r0
 801383a:	8b19      	ldrh	r1, [r3, #24]
 801383c:	4638      	mov	r0, r7
 801383e:	f7fb fca5 	bl	800f18c <ucdr_serialize_uint16_t>
 8013842:	4020      	ands	r0, r4
 8013844:	b2c0      	uxtb	r0, r0
 8013846:	e7d4      	b.n	80137f2 <uxr_serialize_ActivityInfoVariant+0xa6>
 8013848:	3108      	adds	r1, #8
 801384a:	4441      	add	r1, r8
 801384c:	2202      	movs	r2, #2
 801384e:	4638      	mov	r0, r7
 8013850:	f003 fb92 	bl	8016f78 <ucdr_serialize_array_uint8_t>
 8013854:	4434      	add	r4, r6
 8013856:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801385a:	4604      	mov	r4, r0
 801385c:	7d99      	ldrb	r1, [r3, #22]
 801385e:	4638      	mov	r0, r7
 8013860:	f7fb fc68 	bl	800f134 <ucdr_serialize_uint8_t>
 8013864:	4020      	ands	r0, r4
 8013866:	b2c0      	uxtb	r0, r0
 8013868:	e7c3      	b.n	80137f2 <uxr_serialize_ActivityInfoVariant+0xa6>
 801386a:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801386e:	4638      	mov	r0, r7
 8013870:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013874:	f7fc b99a 	b.w	800fbac <ucdr_serialize_int16_t>
 8013878:	68ea      	ldr	r2, [r5, #12]
 801387a:	3601      	adds	r6, #1
 801387c:	42b2      	cmp	r2, r6
 801387e:	d8be      	bhi.n	80137fe <uxr_serialize_ActivityInfoVariant+0xb2>
 8013880:	ea09 0900 	and.w	r9, r9, r0
 8013884:	fa5f f989 	uxtb.w	r9, r9
 8013888:	e771      	b.n	801376e <uxr_serialize_ActivityInfoVariant+0x22>
 801388a:	68eb      	ldr	r3, [r5, #12]
 801388c:	3601      	adds	r6, #1
 801388e:	429e      	cmp	r6, r3
 8013890:	f10a 0a18 	add.w	sl, sl, #24
 8013894:	d395      	bcc.n	80137c2 <uxr_serialize_ActivityInfoVariant+0x76>
 8013896:	e76a      	b.n	801376e <uxr_serialize_ActivityInfoVariant+0x22>

08013898 <uxr_deserialize_BaseObjectReply>:
 8013898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801389c:	2202      	movs	r2, #2
 801389e:	4606      	mov	r6, r0
 80138a0:	460f      	mov	r7, r1
 80138a2:	f003 fbcd 	bl	8017040 <ucdr_deserialize_array_uint8_t>
 80138a6:	2202      	movs	r2, #2
 80138a8:	18b9      	adds	r1, r7, r2
 80138aa:	4605      	mov	r5, r0
 80138ac:	4630      	mov	r0, r6
 80138ae:	f003 fbc7 	bl	8017040 <ucdr_deserialize_array_uint8_t>
 80138b2:	1d39      	adds	r1, r7, #4
 80138b4:	4680      	mov	r8, r0
 80138b6:	4630      	mov	r0, r6
 80138b8:	f7fb fc52 	bl	800f160 <ucdr_deserialize_uint8_t>
 80138bc:	1d79      	adds	r1, r7, #5
 80138be:	4604      	mov	r4, r0
 80138c0:	4630      	mov	r0, r6
 80138c2:	f7fb fc4d 	bl	800f160 <ucdr_deserialize_uint8_t>
 80138c6:	ea05 0508 	and.w	r5, r5, r8
 80138ca:	402c      	ands	r4, r5
 80138cc:	4020      	ands	r0, r4
 80138ce:	b2c0      	uxtb	r0, r0
 80138d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080138d4 <uxr_serialize_ReadSpecification>:
 80138d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138d8:	460e      	mov	r6, r1
 80138da:	7809      	ldrb	r1, [r1, #0]
 80138dc:	4607      	mov	r7, r0
 80138de:	f7fb fc29 	bl	800f134 <ucdr_serialize_uint8_t>
 80138e2:	7871      	ldrb	r1, [r6, #1]
 80138e4:	4604      	mov	r4, r0
 80138e6:	4638      	mov	r0, r7
 80138e8:	f7fb fc24 	bl	800f134 <ucdr_serialize_uint8_t>
 80138ec:	78b1      	ldrb	r1, [r6, #2]
 80138ee:	4004      	ands	r4, r0
 80138f0:	4638      	mov	r0, r7
 80138f2:	f7fb fbf1 	bl	800f0d8 <ucdr_serialize_bool>
 80138f6:	78b3      	ldrb	r3, [r6, #2]
 80138f8:	b2e4      	uxtb	r4, r4
 80138fa:	4004      	ands	r4, r0
 80138fc:	b94b      	cbnz	r3, 8013912 <uxr_serialize_ReadSpecification+0x3e>
 80138fe:	7a31      	ldrb	r1, [r6, #8]
 8013900:	4638      	mov	r0, r7
 8013902:	f7fb fbe9 	bl	800f0d8 <ucdr_serialize_bool>
 8013906:	7a33      	ldrb	r3, [r6, #8]
 8013908:	4004      	ands	r4, r0
 801390a:	b943      	cbnz	r3, 801391e <uxr_serialize_ReadSpecification+0x4a>
 801390c:	4620      	mov	r0, r4
 801390e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013912:	6871      	ldr	r1, [r6, #4]
 8013914:	4638      	mov	r0, r7
 8013916:	f003 fc4f 	bl	80171b8 <ucdr_serialize_string>
 801391a:	4004      	ands	r4, r0
 801391c:	e7ef      	b.n	80138fe <uxr_serialize_ReadSpecification+0x2a>
 801391e:	8971      	ldrh	r1, [r6, #10]
 8013920:	4638      	mov	r0, r7
 8013922:	f7fb fc33 	bl	800f18c <ucdr_serialize_uint16_t>
 8013926:	89b1      	ldrh	r1, [r6, #12]
 8013928:	4605      	mov	r5, r0
 801392a:	4638      	mov	r0, r7
 801392c:	f7fb fc2e 	bl	800f18c <ucdr_serialize_uint16_t>
 8013930:	89f1      	ldrh	r1, [r6, #14]
 8013932:	4005      	ands	r5, r0
 8013934:	4638      	mov	r0, r7
 8013936:	f7fb fc29 	bl	800f18c <ucdr_serialize_uint16_t>
 801393a:	8a31      	ldrh	r1, [r6, #16]
 801393c:	4680      	mov	r8, r0
 801393e:	4638      	mov	r0, r7
 8013940:	f7fb fc24 	bl	800f18c <ucdr_serialize_uint16_t>
 8013944:	b2ed      	uxtb	r5, r5
 8013946:	4025      	ands	r5, r4
 8013948:	ea08 0505 	and.w	r5, r8, r5
 801394c:	ea00 0405 	and.w	r4, r0, r5
 8013950:	4620      	mov	r0, r4
 8013952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013956:	bf00      	nop

08013958 <uxr_serialize_CREATE_CLIENT_Payload>:
 8013958:	f7ff ba16 	b.w	8012d88 <uxr_serialize_CLIENT_Representation>

0801395c <uxr_serialize_CREATE_Payload>:
 801395c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801395e:	2202      	movs	r2, #2
 8013960:	4607      	mov	r7, r0
 8013962:	460e      	mov	r6, r1
 8013964:	f003 fb08 	bl	8016f78 <ucdr_serialize_array_uint8_t>
 8013968:	2202      	movs	r2, #2
 801396a:	18b1      	adds	r1, r6, r2
 801396c:	4605      	mov	r5, r0
 801396e:	4638      	mov	r0, r7
 8013970:	f003 fb02 	bl	8016f78 <ucdr_serialize_array_uint8_t>
 8013974:	7931      	ldrb	r1, [r6, #4]
 8013976:	4604      	mov	r4, r0
 8013978:	4638      	mov	r0, r7
 801397a:	f7fb fbdb 	bl	800f134 <ucdr_serialize_uint8_t>
 801397e:	b170      	cbz	r0, 801399e <uxr_serialize_CREATE_Payload+0x42>
 8013980:	7933      	ldrb	r3, [r6, #4]
 8013982:	402c      	ands	r4, r5
 8013984:	3b01      	subs	r3, #1
 8013986:	b2e4      	uxtb	r4, r4
 8013988:	2b0d      	cmp	r3, #13
 801398a:	d809      	bhi.n	80139a0 <uxr_serialize_CREATE_Payload+0x44>
 801398c:	e8df f003 	tbb	[pc, r3]
 8013990:	23230a4c 	.word	0x23230a4c
 8013994:	0a0a0a0a 	.word	0x0a0a0a0a
 8013998:	12121208 	.word	0x12121208
 801399c:	3e45      	.short	0x3e45
 801399e:	2400      	movs	r4, #0
 80139a0:	4620      	mov	r0, r4
 80139a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80139a4:	f106 0108 	add.w	r1, r6, #8
 80139a8:	4638      	mov	r0, r7
 80139aa:	f7ff faf3 	bl	8012f94 <uxr_serialize_DATAWRITER_Representation>
 80139ae:	4004      	ands	r4, r0
 80139b0:	4620      	mov	r0, r4
 80139b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80139b4:	7a31      	ldrb	r1, [r6, #8]
 80139b6:	4638      	mov	r0, r7
 80139b8:	f7fb fbbc 	bl	800f134 <ucdr_serialize_uint8_t>
 80139bc:	2800      	cmp	r0, #0
 80139be:	d0ee      	beq.n	801399e <uxr_serialize_CREATE_Payload+0x42>
 80139c0:	7a33      	ldrb	r3, [r6, #8]
 80139c2:	2b01      	cmp	r3, #1
 80139c4:	d001      	beq.n	80139ca <uxr_serialize_CREATE_Payload+0x6e>
 80139c6:	2b02      	cmp	r3, #2
 80139c8:	d1ea      	bne.n	80139a0 <uxr_serialize_CREATE_Payload+0x44>
 80139ca:	68f1      	ldr	r1, [r6, #12]
 80139cc:	4638      	mov	r0, r7
 80139ce:	f003 fbf3 	bl	80171b8 <ucdr_serialize_string>
 80139d2:	4004      	ands	r4, r0
 80139d4:	e7e4      	b.n	80139a0 <uxr_serialize_CREATE_Payload+0x44>
 80139d6:	7a31      	ldrb	r1, [r6, #8]
 80139d8:	4638      	mov	r0, r7
 80139da:	f7fb fbab 	bl	800f134 <ucdr_serialize_uint8_t>
 80139de:	4605      	mov	r5, r0
 80139e0:	b158      	cbz	r0, 80139fa <uxr_serialize_CREATE_Payload+0x9e>
 80139e2:	7a33      	ldrb	r3, [r6, #8]
 80139e4:	2b02      	cmp	r3, #2
 80139e6:	d034      	beq.n	8013a52 <uxr_serialize_CREATE_Payload+0xf6>
 80139e8:	2b03      	cmp	r3, #3
 80139ea:	d106      	bne.n	80139fa <uxr_serialize_CREATE_Payload+0x9e>
 80139ec:	68f2      	ldr	r2, [r6, #12]
 80139ee:	f106 0110 	add.w	r1, r6, #16
 80139f2:	4638      	mov	r0, r7
 80139f4:	f003 fbb4 	bl	8017160 <ucdr_serialize_sequence_uint8_t>
 80139f8:	4605      	mov	r5, r0
 80139fa:	2202      	movs	r2, #2
 80139fc:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8013a00:	4638      	mov	r0, r7
 8013a02:	f003 fab9 	bl	8016f78 <ucdr_serialize_array_uint8_t>
 8013a06:	4028      	ands	r0, r5
 8013a08:	4004      	ands	r4, r0
 8013a0a:	e7c9      	b.n	80139a0 <uxr_serialize_CREATE_Payload+0x44>
 8013a0c:	f106 0108 	add.w	r1, r6, #8
 8013a10:	4638      	mov	r0, r7
 8013a12:	f7ff f9b9 	bl	8012d88 <uxr_serialize_CLIENT_Representation>
 8013a16:	4004      	ands	r4, r0
 8013a18:	e7c2      	b.n	80139a0 <uxr_serialize_CREATE_Payload+0x44>
 8013a1a:	f106 0108 	add.w	r1, r6, #8
 8013a1e:	4638      	mov	r0, r7
 8013a20:	f7ff fa6e 	bl	8012f00 <uxr_serialize_AGENT_Representation>
 8013a24:	4004      	ands	r4, r0
 8013a26:	e7bb      	b.n	80139a0 <uxr_serialize_CREATE_Payload+0x44>
 8013a28:	7a31      	ldrb	r1, [r6, #8]
 8013a2a:	4638      	mov	r0, r7
 8013a2c:	f7fb fb82 	bl	800f134 <ucdr_serialize_uint8_t>
 8013a30:	4605      	mov	r5, r0
 8013a32:	b130      	cbz	r0, 8013a42 <uxr_serialize_CREATE_Payload+0xe6>
 8013a34:	7a33      	ldrb	r3, [r6, #8]
 8013a36:	2b02      	cmp	r3, #2
 8013a38:	d011      	beq.n	8013a5e <uxr_serialize_CREATE_Payload+0x102>
 8013a3a:	2b03      	cmp	r3, #3
 8013a3c:	d015      	beq.n	8013a6a <uxr_serialize_CREATE_Payload+0x10e>
 8013a3e:	2b01      	cmp	r3, #1
 8013a40:	d00d      	beq.n	8013a5e <uxr_serialize_CREATE_Payload+0x102>
 8013a42:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8013a46:	4638      	mov	r0, r7
 8013a48:	f7fc f8b0 	bl	800fbac <ucdr_serialize_int16_t>
 8013a4c:	4028      	ands	r0, r5
 8013a4e:	4004      	ands	r4, r0
 8013a50:	e7a6      	b.n	80139a0 <uxr_serialize_CREATE_Payload+0x44>
 8013a52:	68f1      	ldr	r1, [r6, #12]
 8013a54:	4638      	mov	r0, r7
 8013a56:	f003 fbaf 	bl	80171b8 <ucdr_serialize_string>
 8013a5a:	4605      	mov	r5, r0
 8013a5c:	e7cd      	b.n	80139fa <uxr_serialize_CREATE_Payload+0x9e>
 8013a5e:	68f1      	ldr	r1, [r6, #12]
 8013a60:	4638      	mov	r0, r7
 8013a62:	f003 fba9 	bl	80171b8 <ucdr_serialize_string>
 8013a66:	4605      	mov	r5, r0
 8013a68:	e7eb      	b.n	8013a42 <uxr_serialize_CREATE_Payload+0xe6>
 8013a6a:	68f2      	ldr	r2, [r6, #12]
 8013a6c:	f106 0110 	add.w	r1, r6, #16
 8013a70:	4638      	mov	r0, r7
 8013a72:	f003 fb75 	bl	8017160 <ucdr_serialize_sequence_uint8_t>
 8013a76:	4605      	mov	r5, r0
 8013a78:	e7e3      	b.n	8013a42 <uxr_serialize_CREATE_Payload+0xe6>
 8013a7a:	bf00      	nop

08013a7c <uxr_serialize_GET_INFO_Payload>:
 8013a7c:	b570      	push	{r4, r5, r6, lr}
 8013a7e:	2202      	movs	r2, #2
 8013a80:	4605      	mov	r5, r0
 8013a82:	460e      	mov	r6, r1
 8013a84:	f003 fa78 	bl	8016f78 <ucdr_serialize_array_uint8_t>
 8013a88:	2202      	movs	r2, #2
 8013a8a:	18b1      	adds	r1, r6, r2
 8013a8c:	4604      	mov	r4, r0
 8013a8e:	4628      	mov	r0, r5
 8013a90:	f003 fa72 	bl	8016f78 <ucdr_serialize_array_uint8_t>
 8013a94:	6871      	ldr	r1, [r6, #4]
 8013a96:	4004      	ands	r4, r0
 8013a98:	4628      	mov	r0, r5
 8013a9a:	f7fb fd61 	bl	800f560 <ucdr_serialize_uint32_t>
 8013a9e:	b2e4      	uxtb	r4, r4
 8013aa0:	4020      	ands	r0, r4
 8013aa2:	bd70      	pop	{r4, r5, r6, pc}

08013aa4 <uxr_deserialize_GET_INFO_Payload>:
 8013aa4:	b570      	push	{r4, r5, r6, lr}
 8013aa6:	2202      	movs	r2, #2
 8013aa8:	4605      	mov	r5, r0
 8013aaa:	460e      	mov	r6, r1
 8013aac:	f003 fac8 	bl	8017040 <ucdr_deserialize_array_uint8_t>
 8013ab0:	2202      	movs	r2, #2
 8013ab2:	18b1      	adds	r1, r6, r2
 8013ab4:	4604      	mov	r4, r0
 8013ab6:	4628      	mov	r0, r5
 8013ab8:	f003 fac2 	bl	8017040 <ucdr_deserialize_array_uint8_t>
 8013abc:	1d31      	adds	r1, r6, #4
 8013abe:	4004      	ands	r4, r0
 8013ac0:	4628      	mov	r0, r5
 8013ac2:	f7fb fe7d 	bl	800f7c0 <ucdr_deserialize_uint32_t>
 8013ac6:	b2e4      	uxtb	r4, r4
 8013ac8:	4020      	ands	r0, r4
 8013aca:	bd70      	pop	{r4, r5, r6, pc}

08013acc <uxr_serialize_DELETE_Payload>:
 8013acc:	b570      	push	{r4, r5, r6, lr}
 8013ace:	2202      	movs	r2, #2
 8013ad0:	4605      	mov	r5, r0
 8013ad2:	460e      	mov	r6, r1
 8013ad4:	f003 fa50 	bl	8016f78 <ucdr_serialize_array_uint8_t>
 8013ad8:	2202      	movs	r2, #2
 8013ada:	4604      	mov	r4, r0
 8013adc:	18b1      	adds	r1, r6, r2
 8013ade:	4628      	mov	r0, r5
 8013ae0:	f003 fa4a 	bl	8016f78 <ucdr_serialize_array_uint8_t>
 8013ae4:	4020      	ands	r0, r4
 8013ae6:	b2c0      	uxtb	r0, r0
 8013ae8:	bd70      	pop	{r4, r5, r6, pc}
 8013aea:	bf00      	nop

08013aec <uxr_deserialize_STATUS_AGENT_Payload>:
 8013aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013af0:	4605      	mov	r5, r0
 8013af2:	460e      	mov	r6, r1
 8013af4:	f7fb fb34 	bl	800f160 <ucdr_deserialize_uint8_t>
 8013af8:	1c71      	adds	r1, r6, #1
 8013afa:	4604      	mov	r4, r0
 8013afc:	4628      	mov	r0, r5
 8013afe:	f7fb fb2f 	bl	800f160 <ucdr_deserialize_uint8_t>
 8013b02:	2204      	movs	r2, #4
 8013b04:	18b1      	adds	r1, r6, r2
 8013b06:	4680      	mov	r8, r0
 8013b08:	4628      	mov	r0, r5
 8013b0a:	f003 fa99 	bl	8017040 <ucdr_deserialize_array_uint8_t>
 8013b0e:	f106 0108 	add.w	r1, r6, #8
 8013b12:	4607      	mov	r7, r0
 8013b14:	2202      	movs	r2, #2
 8013b16:	4628      	mov	r0, r5
 8013b18:	f003 fa92 	bl	8017040 <ucdr_deserialize_array_uint8_t>
 8013b1c:	ea04 0308 	and.w	r3, r4, r8
 8013b20:	b2db      	uxtb	r3, r3
 8013b22:	ea03 0407 	and.w	r4, r3, r7
 8013b26:	2202      	movs	r2, #2
 8013b28:	4607      	mov	r7, r0
 8013b2a:	f106 010a 	add.w	r1, r6, #10
 8013b2e:	4628      	mov	r0, r5
 8013b30:	f003 fa86 	bl	8017040 <ucdr_deserialize_array_uint8_t>
 8013b34:	f106 010c 	add.w	r1, r6, #12
 8013b38:	4603      	mov	r3, r0
 8013b3a:	4628      	mov	r0, r5
 8013b3c:	461d      	mov	r5, r3
 8013b3e:	f7fb fae1 	bl	800f104 <ucdr_deserialize_bool>
 8013b42:	403c      	ands	r4, r7
 8013b44:	4025      	ands	r5, r4
 8013b46:	4028      	ands	r0, r5
 8013b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013b4c <uxr_deserialize_STATUS_Payload>:
 8013b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b50:	2202      	movs	r2, #2
 8013b52:	4606      	mov	r6, r0
 8013b54:	460f      	mov	r7, r1
 8013b56:	f003 fa73 	bl	8017040 <ucdr_deserialize_array_uint8_t>
 8013b5a:	2202      	movs	r2, #2
 8013b5c:	18b9      	adds	r1, r7, r2
 8013b5e:	4605      	mov	r5, r0
 8013b60:	4630      	mov	r0, r6
 8013b62:	f003 fa6d 	bl	8017040 <ucdr_deserialize_array_uint8_t>
 8013b66:	1d39      	adds	r1, r7, #4
 8013b68:	4680      	mov	r8, r0
 8013b6a:	4630      	mov	r0, r6
 8013b6c:	f7fb faf8 	bl	800f160 <ucdr_deserialize_uint8_t>
 8013b70:	1d79      	adds	r1, r7, #5
 8013b72:	4604      	mov	r4, r0
 8013b74:	4630      	mov	r0, r6
 8013b76:	f7fb faf3 	bl	800f160 <ucdr_deserialize_uint8_t>
 8013b7a:	ea05 0508 	and.w	r5, r5, r8
 8013b7e:	402c      	ands	r4, r5
 8013b80:	4020      	ands	r0, r4
 8013b82:	b2c0      	uxtb	r0, r0
 8013b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013b88 <uxr_serialize_INFO_Payload>:
 8013b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b8c:	2202      	movs	r2, #2
 8013b8e:	460c      	mov	r4, r1
 8013b90:	4605      	mov	r5, r0
 8013b92:	f003 f9f1 	bl	8016f78 <ucdr_serialize_array_uint8_t>
 8013b96:	2202      	movs	r2, #2
 8013b98:	18a1      	adds	r1, r4, r2
 8013b9a:	4680      	mov	r8, r0
 8013b9c:	4628      	mov	r0, r5
 8013b9e:	f003 f9eb 	bl	8016f78 <ucdr_serialize_array_uint8_t>
 8013ba2:	7921      	ldrb	r1, [r4, #4]
 8013ba4:	4607      	mov	r7, r0
 8013ba6:	4628      	mov	r0, r5
 8013ba8:	f7fb fac4 	bl	800f134 <ucdr_serialize_uint8_t>
 8013bac:	7961      	ldrb	r1, [r4, #5]
 8013bae:	4606      	mov	r6, r0
 8013bb0:	4628      	mov	r0, r5
 8013bb2:	f7fb fabf 	bl	800f134 <ucdr_serialize_uint8_t>
 8013bb6:	ea08 0807 	and.w	r8, r8, r7
 8013bba:	ea06 0608 	and.w	r6, r6, r8
 8013bbe:	4006      	ands	r6, r0
 8013bc0:	7a21      	ldrb	r1, [r4, #8]
 8013bc2:	4628      	mov	r0, r5
 8013bc4:	f7fb fa88 	bl	800f0d8 <ucdr_serialize_bool>
 8013bc8:	7a23      	ldrb	r3, [r4, #8]
 8013bca:	b2f7      	uxtb	r7, r6
 8013bcc:	4606      	mov	r6, r0
 8013bce:	b96b      	cbnz	r3, 8013bec <uxr_serialize_INFO_Payload+0x64>
 8013bd0:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8013bd4:	4628      	mov	r0, r5
 8013bd6:	f7fb fa7f 	bl	800f0d8 <ucdr_serialize_bool>
 8013bda:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8013bde:	4030      	ands	r0, r6
 8013be0:	b2c6      	uxtb	r6, r0
 8013be2:	b983      	cbnz	r3, 8013c06 <uxr_serialize_INFO_Payload+0x7e>
 8013be4:	ea06 0007 	and.w	r0, r6, r7
 8013be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bec:	7b21      	ldrb	r1, [r4, #12]
 8013bee:	4628      	mov	r0, r5
 8013bf0:	f7fb faa0 	bl	800f134 <ucdr_serialize_uint8_t>
 8013bf4:	b188      	cbz	r0, 8013c1a <uxr_serialize_INFO_Payload+0x92>
 8013bf6:	f104 010c 	add.w	r1, r4, #12
 8013bfa:	4628      	mov	r0, r5
 8013bfc:	f7ff f9f2 	bl	8012fe4 <uxr_serialize_ObjectVariant.part.0>
 8013c00:	4030      	ands	r0, r6
 8013c02:	b2c6      	uxtb	r6, r0
 8013c04:	e7e4      	b.n	8013bd0 <uxr_serialize_INFO_Payload+0x48>
 8013c06:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8013c0a:	4628      	mov	r0, r5
 8013c0c:	f7ff fd9e 	bl	801374c <uxr_serialize_ActivityInfoVariant>
 8013c10:	4006      	ands	r6, r0
 8013c12:	ea06 0007 	and.w	r0, r6, r7
 8013c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c1a:	4606      	mov	r6, r0
 8013c1c:	e7d8      	b.n	8013bd0 <uxr_serialize_INFO_Payload+0x48>
 8013c1e:	bf00      	nop

08013c20 <uxr_serialize_READ_DATA_Payload>:
 8013c20:	b570      	push	{r4, r5, r6, lr}
 8013c22:	2202      	movs	r2, #2
 8013c24:	4605      	mov	r5, r0
 8013c26:	460e      	mov	r6, r1
 8013c28:	f003 f9a6 	bl	8016f78 <ucdr_serialize_array_uint8_t>
 8013c2c:	2202      	movs	r2, #2
 8013c2e:	18b1      	adds	r1, r6, r2
 8013c30:	4604      	mov	r4, r0
 8013c32:	4628      	mov	r0, r5
 8013c34:	f003 f9a0 	bl	8016f78 <ucdr_serialize_array_uint8_t>
 8013c38:	1d31      	adds	r1, r6, #4
 8013c3a:	4004      	ands	r4, r0
 8013c3c:	4628      	mov	r0, r5
 8013c3e:	f7ff fe49 	bl	80138d4 <uxr_serialize_ReadSpecification>
 8013c42:	b2e4      	uxtb	r4, r4
 8013c44:	4020      	ands	r0, r4
 8013c46:	bd70      	pop	{r4, r5, r6, pc}

08013c48 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8013c48:	b570      	push	{r4, r5, r6, lr}
 8013c4a:	2202      	movs	r2, #2
 8013c4c:	4605      	mov	r5, r0
 8013c4e:	460e      	mov	r6, r1
 8013c50:	f003 f992 	bl	8016f78 <ucdr_serialize_array_uint8_t>
 8013c54:	2202      	movs	r2, #2
 8013c56:	4604      	mov	r4, r0
 8013c58:	18b1      	adds	r1, r6, r2
 8013c5a:	4628      	mov	r0, r5
 8013c5c:	f003 f98c 	bl	8016f78 <ucdr_serialize_array_uint8_t>
 8013c60:	4020      	ands	r0, r4
 8013c62:	b2c0      	uxtb	r0, r0
 8013c64:	bd70      	pop	{r4, r5, r6, pc}
 8013c66:	bf00      	nop

08013c68 <uxr_serialize_ACKNACK_Payload>:
 8013c68:	b570      	push	{r4, r5, r6, lr}
 8013c6a:	460c      	mov	r4, r1
 8013c6c:	460e      	mov	r6, r1
 8013c6e:	f834 1b02 	ldrh.w	r1, [r4], #2
 8013c72:	4605      	mov	r5, r0
 8013c74:	f7fb fa8a 	bl	800f18c <ucdr_serialize_uint16_t>
 8013c78:	2202      	movs	r2, #2
 8013c7a:	4621      	mov	r1, r4
 8013c7c:	4604      	mov	r4, r0
 8013c7e:	4628      	mov	r0, r5
 8013c80:	f003 f97a 	bl	8016f78 <ucdr_serialize_array_uint8_t>
 8013c84:	7931      	ldrb	r1, [r6, #4]
 8013c86:	4004      	ands	r4, r0
 8013c88:	4628      	mov	r0, r5
 8013c8a:	f7fb fa53 	bl	800f134 <ucdr_serialize_uint8_t>
 8013c8e:	b2e4      	uxtb	r4, r4
 8013c90:	4020      	ands	r0, r4
 8013c92:	bd70      	pop	{r4, r5, r6, pc}

08013c94 <uxr_deserialize_ACKNACK_Payload>:
 8013c94:	b570      	push	{r4, r5, r6, lr}
 8013c96:	4605      	mov	r5, r0
 8013c98:	460e      	mov	r6, r1
 8013c9a:	f7fb fb77 	bl	800f38c <ucdr_deserialize_uint16_t>
 8013c9e:	2202      	movs	r2, #2
 8013ca0:	18b1      	adds	r1, r6, r2
 8013ca2:	4604      	mov	r4, r0
 8013ca4:	4628      	mov	r0, r5
 8013ca6:	f003 f9cb 	bl	8017040 <ucdr_deserialize_array_uint8_t>
 8013caa:	1d31      	adds	r1, r6, #4
 8013cac:	4004      	ands	r4, r0
 8013cae:	4628      	mov	r0, r5
 8013cb0:	f7fb fa56 	bl	800f160 <ucdr_deserialize_uint8_t>
 8013cb4:	b2e4      	uxtb	r4, r4
 8013cb6:	4020      	ands	r0, r4
 8013cb8:	bd70      	pop	{r4, r5, r6, pc}
 8013cba:	bf00      	nop

08013cbc <uxr_serialize_HEARTBEAT_Payload>:
 8013cbc:	b570      	push	{r4, r5, r6, lr}
 8013cbe:	460d      	mov	r5, r1
 8013cc0:	8809      	ldrh	r1, [r1, #0]
 8013cc2:	4606      	mov	r6, r0
 8013cc4:	f7fb fa62 	bl	800f18c <ucdr_serialize_uint16_t>
 8013cc8:	8869      	ldrh	r1, [r5, #2]
 8013cca:	4604      	mov	r4, r0
 8013ccc:	4630      	mov	r0, r6
 8013cce:	f7fb fa5d 	bl	800f18c <ucdr_serialize_uint16_t>
 8013cd2:	7929      	ldrb	r1, [r5, #4]
 8013cd4:	4004      	ands	r4, r0
 8013cd6:	4630      	mov	r0, r6
 8013cd8:	f7fb fa2c 	bl	800f134 <ucdr_serialize_uint8_t>
 8013cdc:	b2e4      	uxtb	r4, r4
 8013cde:	4020      	ands	r0, r4
 8013ce0:	bd70      	pop	{r4, r5, r6, pc}
 8013ce2:	bf00      	nop

08013ce4 <uxr_deserialize_HEARTBEAT_Payload>:
 8013ce4:	b570      	push	{r4, r5, r6, lr}
 8013ce6:	4605      	mov	r5, r0
 8013ce8:	460e      	mov	r6, r1
 8013cea:	f7fb fb4f 	bl	800f38c <ucdr_deserialize_uint16_t>
 8013cee:	1cb1      	adds	r1, r6, #2
 8013cf0:	4604      	mov	r4, r0
 8013cf2:	4628      	mov	r0, r5
 8013cf4:	f7fb fb4a 	bl	800f38c <ucdr_deserialize_uint16_t>
 8013cf8:	1d31      	adds	r1, r6, #4
 8013cfa:	4004      	ands	r4, r0
 8013cfc:	4628      	mov	r0, r5
 8013cfe:	f7fb fa2f 	bl	800f160 <ucdr_deserialize_uint8_t>
 8013d02:	b2e4      	uxtb	r4, r4
 8013d04:	4020      	ands	r0, r4
 8013d06:	bd70      	pop	{r4, r5, r6, pc}

08013d08 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8013d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d0c:	4605      	mov	r5, r0
 8013d0e:	460e      	mov	r6, r1
 8013d10:	f7fc f8d8 	bl	800fec4 <ucdr_deserialize_int32_t>
 8013d14:	1d31      	adds	r1, r6, #4
 8013d16:	4607      	mov	r7, r0
 8013d18:	4628      	mov	r0, r5
 8013d1a:	f7fb fd51 	bl	800f7c0 <ucdr_deserialize_uint32_t>
 8013d1e:	f106 0108 	add.w	r1, r6, #8
 8013d22:	4680      	mov	r8, r0
 8013d24:	4628      	mov	r0, r5
 8013d26:	f7fc f8cd 	bl	800fec4 <ucdr_deserialize_int32_t>
 8013d2a:	f106 010c 	add.w	r1, r6, #12
 8013d2e:	4604      	mov	r4, r0
 8013d30:	4628      	mov	r0, r5
 8013d32:	f7fb fd45 	bl	800f7c0 <ucdr_deserialize_uint32_t>
 8013d36:	ea07 0708 	and.w	r7, r7, r8
 8013d3a:	403c      	ands	r4, r7
 8013d3c:	f106 0110 	add.w	r1, r6, #16
 8013d40:	4004      	ands	r4, r0
 8013d42:	4628      	mov	r0, r5
 8013d44:	f7fc f8be 	bl	800fec4 <ucdr_deserialize_int32_t>
 8013d48:	f106 0114 	add.w	r1, r6, #20
 8013d4c:	4607      	mov	r7, r0
 8013d4e:	4628      	mov	r0, r5
 8013d50:	f7fb fd36 	bl	800f7c0 <ucdr_deserialize_uint32_t>
 8013d54:	b2e4      	uxtb	r4, r4
 8013d56:	403c      	ands	r4, r7
 8013d58:	4020      	ands	r0, r4
 8013d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d5e:	bf00      	nop

08013d60 <uxr_serialize_SampleIdentity>:
 8013d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d64:	220c      	movs	r2, #12
 8013d66:	4604      	mov	r4, r0
 8013d68:	460d      	mov	r5, r1
 8013d6a:	f003 f905 	bl	8016f78 <ucdr_serialize_array_uint8_t>
 8013d6e:	2203      	movs	r2, #3
 8013d70:	f105 010c 	add.w	r1, r5, #12
 8013d74:	4607      	mov	r7, r0
 8013d76:	4620      	mov	r0, r4
 8013d78:	f003 f8fe 	bl	8016f78 <ucdr_serialize_array_uint8_t>
 8013d7c:	7be9      	ldrb	r1, [r5, #15]
 8013d7e:	4680      	mov	r8, r0
 8013d80:	4620      	mov	r0, r4
 8013d82:	f7fb f9d7 	bl	800f134 <ucdr_serialize_uint8_t>
 8013d86:	6929      	ldr	r1, [r5, #16]
 8013d88:	4606      	mov	r6, r0
 8013d8a:	4620      	mov	r0, r4
 8013d8c:	f7fc f802 	bl	800fd94 <ucdr_serialize_int32_t>
 8013d90:	6969      	ldr	r1, [r5, #20]
 8013d92:	4603      	mov	r3, r0
 8013d94:	4620      	mov	r0, r4
 8013d96:	ea07 0708 	and.w	r7, r7, r8
 8013d9a:	461c      	mov	r4, r3
 8013d9c:	f7fb fbe0 	bl	800f560 <ucdr_serialize_uint32_t>
 8013da0:	403e      	ands	r6, r7
 8013da2:	4034      	ands	r4, r6
 8013da4:	4020      	ands	r0, r4
 8013da6:	b2c0      	uxtb	r0, r0
 8013da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013dac <uxr_deserialize_SampleIdentity>:
 8013dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013db0:	220c      	movs	r2, #12
 8013db2:	4604      	mov	r4, r0
 8013db4:	460d      	mov	r5, r1
 8013db6:	f003 f943 	bl	8017040 <ucdr_deserialize_array_uint8_t>
 8013dba:	2203      	movs	r2, #3
 8013dbc:	f105 010c 	add.w	r1, r5, #12
 8013dc0:	4607      	mov	r7, r0
 8013dc2:	4620      	mov	r0, r4
 8013dc4:	f003 f93c 	bl	8017040 <ucdr_deserialize_array_uint8_t>
 8013dc8:	f105 010f 	add.w	r1, r5, #15
 8013dcc:	4680      	mov	r8, r0
 8013dce:	4620      	mov	r0, r4
 8013dd0:	f7fb f9c6 	bl	800f160 <ucdr_deserialize_uint8_t>
 8013dd4:	f105 0110 	add.w	r1, r5, #16
 8013dd8:	4606      	mov	r6, r0
 8013dda:	4620      	mov	r0, r4
 8013ddc:	f7fc f872 	bl	800fec4 <ucdr_deserialize_int32_t>
 8013de0:	f105 0114 	add.w	r1, r5, #20
 8013de4:	4603      	mov	r3, r0
 8013de6:	4620      	mov	r0, r4
 8013de8:	ea07 0708 	and.w	r7, r7, r8
 8013dec:	461c      	mov	r4, r3
 8013dee:	f7fb fce7 	bl	800f7c0 <ucdr_deserialize_uint32_t>
 8013df2:	403e      	ands	r6, r7
 8013df4:	4034      	ands	r4, r6
 8013df6:	4020      	ands	r0, r4
 8013df8:	b2c0      	uxtb	r0, r0
 8013dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dfe:	bf00      	nop

08013e00 <rcl_client_get_rmw_handle>:
 8013e00:	b118      	cbz	r0, 8013e0a <rcl_client_get_rmw_handle+0xa>
 8013e02:	6800      	ldr	r0, [r0, #0]
 8013e04:	b108      	cbz	r0, 8013e0a <rcl_client_get_rmw_handle+0xa>
 8013e06:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8013e0a:	4770      	bx	lr

08013e0c <rcl_send_request>:
 8013e0c:	b570      	push	{r4, r5, r6, lr}
 8013e0e:	b082      	sub	sp, #8
 8013e10:	b1e8      	cbz	r0, 8013e4e <rcl_send_request+0x42>
 8013e12:	4604      	mov	r4, r0
 8013e14:	6800      	ldr	r0, [r0, #0]
 8013e16:	b1d0      	cbz	r0, 8013e4e <rcl_send_request+0x42>
 8013e18:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8013e1c:	b1bb      	cbz	r3, 8013e4e <rcl_send_request+0x42>
 8013e1e:	460e      	mov	r6, r1
 8013e20:	b1d1      	cbz	r1, 8013e58 <rcl_send_request+0x4c>
 8013e22:	4615      	mov	r5, r2
 8013e24:	b1c2      	cbz	r2, 8013e58 <rcl_send_request+0x4c>
 8013e26:	2105      	movs	r1, #5
 8013e28:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8013e2c:	f7f9 f9ca 	bl	800d1c4 <__atomic_load_8>
 8013e30:	6823      	ldr	r3, [r4, #0]
 8013e32:	e9c5 0100 	strd	r0, r1, [r5]
 8013e36:	462a      	mov	r2, r5
 8013e38:	4631      	mov	r1, r6
 8013e3a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8013e3e:	f002 fcfd 	bl	801683c <rmw_send_request>
 8013e42:	4606      	mov	r6, r0
 8013e44:	b160      	cbz	r0, 8013e60 <rcl_send_request+0x54>
 8013e46:	2601      	movs	r6, #1
 8013e48:	4630      	mov	r0, r6
 8013e4a:	b002      	add	sp, #8
 8013e4c:	bd70      	pop	{r4, r5, r6, pc}
 8013e4e:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8013e52:	4630      	mov	r0, r6
 8013e54:	b002      	add	sp, #8
 8013e56:	bd70      	pop	{r4, r5, r6, pc}
 8013e58:	260b      	movs	r6, #11
 8013e5a:	4630      	mov	r0, r6
 8013e5c:	b002      	add	sp, #8
 8013e5e:	bd70      	pop	{r4, r5, r6, pc}
 8013e60:	6820      	ldr	r0, [r4, #0]
 8013e62:	2105      	movs	r1, #5
 8013e64:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013e68:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8013e6c:	9100      	str	r1, [sp, #0]
 8013e6e:	f7f9 fa15 	bl	800d29c <__atomic_exchange_8>
 8013e72:	4630      	mov	r0, r6
 8013e74:	b002      	add	sp, #8
 8013e76:	bd70      	pop	{r4, r5, r6, pc}

08013e78 <rcl_take_response>:
 8013e78:	b570      	push	{r4, r5, r6, lr}
 8013e7a:	468e      	mov	lr, r1
 8013e7c:	460c      	mov	r4, r1
 8013e7e:	4616      	mov	r6, r2
 8013e80:	4605      	mov	r5, r0
 8013e82:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013e86:	b08c      	sub	sp, #48	@ 0x30
 8013e88:	f10d 0c18 	add.w	ip, sp, #24
 8013e8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013e90:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013e94:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013e98:	b35d      	cbz	r5, 8013ef2 <rcl_take_response+0x7a>
 8013e9a:	682b      	ldr	r3, [r5, #0]
 8013e9c:	b34b      	cbz	r3, 8013ef2 <rcl_take_response+0x7a>
 8013e9e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8013ea2:	b330      	cbz	r0, 8013ef2 <rcl_take_response+0x7a>
 8013ea4:	b346      	cbz	r6, 8013ef8 <rcl_take_response+0x80>
 8013ea6:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8013f00 <rcl_take_response+0x88>
 8013eaa:	2300      	movs	r3, #0
 8013eac:	f88d 3007 	strb.w	r3, [sp, #7]
 8013eb0:	4632      	mov	r2, r6
 8013eb2:	f10d 0307 	add.w	r3, sp, #7
 8013eb6:	a902      	add	r1, sp, #8
 8013eb8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013ebc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013ec0:	f002 fdc4 	bl	8016a4c <rmw_take_response>
 8013ec4:	4605      	mov	r5, r0
 8013ec6:	b9c8      	cbnz	r0, 8013efc <rcl_take_response+0x84>
 8013ec8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013ecc:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8013ed0:	2a00      	cmp	r2, #0
 8013ed2:	bf08      	it	eq
 8013ed4:	461d      	moveq	r5, r3
 8013ed6:	f10d 0e18 	add.w	lr, sp, #24
 8013eda:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013ede:	46a4      	mov	ip, r4
 8013ee0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013ee4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013ee8:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013eec:	4628      	mov	r0, r5
 8013eee:	b00c      	add	sp, #48	@ 0x30
 8013ef0:	bd70      	pop	{r4, r5, r6, pc}
 8013ef2:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8013ef6:	e7ee      	b.n	8013ed6 <rcl_take_response+0x5e>
 8013ef8:	250b      	movs	r5, #11
 8013efa:	e7ec      	b.n	8013ed6 <rcl_take_response+0x5e>
 8013efc:	2501      	movs	r5, #1
 8013efe:	e7ea      	b.n	8013ed6 <rcl_take_response+0x5e>
	...

08013f08 <rcl_client_is_valid>:
 8013f08:	b130      	cbz	r0, 8013f18 <rcl_client_is_valid+0x10>
 8013f0a:	6800      	ldr	r0, [r0, #0]
 8013f0c:	b120      	cbz	r0, 8013f18 <rcl_client_is_valid+0x10>
 8013f0e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8013f12:	3800      	subs	r0, #0
 8013f14:	bf18      	it	ne
 8013f16:	2001      	movne	r0, #1
 8013f18:	4770      	bx	lr
 8013f1a:	bf00      	nop

08013f1c <rcl_convert_rmw_ret_to_rcl_ret>:
 8013f1c:	280b      	cmp	r0, #11
 8013f1e:	dc0d      	bgt.n	8013f3c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8013f20:	2800      	cmp	r0, #0
 8013f22:	db09      	blt.n	8013f38 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8013f24:	280b      	cmp	r0, #11
 8013f26:	d807      	bhi.n	8013f38 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8013f28:	e8df f000 	tbb	[pc, r0]
 8013f2c:	07060607 	.word	0x07060607
 8013f30:	06060606 	.word	0x06060606
 8013f34:	07070606 	.word	0x07070606
 8013f38:	2001      	movs	r0, #1
 8013f3a:	4770      	bx	lr
 8013f3c:	28cb      	cmp	r0, #203	@ 0xcb
 8013f3e:	bf18      	it	ne
 8013f40:	2001      	movne	r0, #1
 8013f42:	4770      	bx	lr

08013f44 <rcl_get_zero_initialized_guard_condition>:
 8013f44:	4a03      	ldr	r2, [pc, #12]	@ (8013f54 <rcl_get_zero_initialized_guard_condition+0x10>)
 8013f46:	4603      	mov	r3, r0
 8013f48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013f4c:	e883 0003 	stmia.w	r3, {r0, r1}
 8013f50:	4618      	mov	r0, r3
 8013f52:	4770      	bx	lr
 8013f54:	0801a444 	.word	0x0801a444

08013f58 <rcl_guard_condition_init>:
 8013f58:	b082      	sub	sp, #8
 8013f5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f5c:	b087      	sub	sp, #28
 8013f5e:	ac0c      	add	r4, sp, #48	@ 0x30
 8013f60:	e884 000c 	stmia.w	r4, {r2, r3}
 8013f64:	46a6      	mov	lr, r4
 8013f66:	460d      	mov	r5, r1
 8013f68:	4604      	mov	r4, r0
 8013f6a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013f6e:	f10d 0c04 	add.w	ip, sp, #4
 8013f72:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013f76:	f8de 3000 	ldr.w	r3, [lr]
 8013f7a:	f8cc 3000 	str.w	r3, [ip]
 8013f7e:	a801      	add	r0, sp, #4
 8013f80:	f7f9 f912 	bl	800d1a8 <rcutils_allocator_is_valid>
 8013f84:	b338      	cbz	r0, 8013fd6 <rcl_guard_condition_init+0x7e>
 8013f86:	b334      	cbz	r4, 8013fd6 <rcl_guard_condition_init+0x7e>
 8013f88:	6866      	ldr	r6, [r4, #4]
 8013f8a:	b9ee      	cbnz	r6, 8013fc8 <rcl_guard_condition_init+0x70>
 8013f8c:	b31d      	cbz	r5, 8013fd6 <rcl_guard_condition_init+0x7e>
 8013f8e:	4628      	mov	r0, r5
 8013f90:	f7f7 f874 	bl	800b07c <rcl_context_is_valid>
 8013f94:	b308      	cbz	r0, 8013fda <rcl_guard_condition_init+0x82>
 8013f96:	9b01      	ldr	r3, [sp, #4]
 8013f98:	9905      	ldr	r1, [sp, #20]
 8013f9a:	201c      	movs	r0, #28
 8013f9c:	4798      	blx	r3
 8013f9e:	4607      	mov	r7, r0
 8013fa0:	6060      	str	r0, [r4, #4]
 8013fa2:	b310      	cbz	r0, 8013fea <rcl_guard_condition_init+0x92>
 8013fa4:	6828      	ldr	r0, [r5, #0]
 8013fa6:	3028      	adds	r0, #40	@ 0x28
 8013fa8:	f002 fbae 	bl	8016708 <rmw_create_guard_condition>
 8013fac:	6038      	str	r0, [r7, #0]
 8013fae:	6860      	ldr	r0, [r4, #4]
 8013fb0:	6805      	ldr	r5, [r0, #0]
 8013fb2:	b1a5      	cbz	r5, 8013fde <rcl_guard_condition_init+0x86>
 8013fb4:	2301      	movs	r3, #1
 8013fb6:	ac01      	add	r4, sp, #4
 8013fb8:	7103      	strb	r3, [r0, #4]
 8013fba:	f100 0708 	add.w	r7, r0, #8
 8013fbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013fc0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013fc2:	6823      	ldr	r3, [r4, #0]
 8013fc4:	603b      	str	r3, [r7, #0]
 8013fc6:	e000      	b.n	8013fca <rcl_guard_condition_init+0x72>
 8013fc8:	2664      	movs	r6, #100	@ 0x64
 8013fca:	4630      	mov	r0, r6
 8013fcc:	b007      	add	sp, #28
 8013fce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013fd2:	b002      	add	sp, #8
 8013fd4:	4770      	bx	lr
 8013fd6:	260b      	movs	r6, #11
 8013fd8:	e7f7      	b.n	8013fca <rcl_guard_condition_init+0x72>
 8013fda:	2665      	movs	r6, #101	@ 0x65
 8013fdc:	e7f5      	b.n	8013fca <rcl_guard_condition_init+0x72>
 8013fde:	9b02      	ldr	r3, [sp, #8]
 8013fe0:	9905      	ldr	r1, [sp, #20]
 8013fe2:	4798      	blx	r3
 8013fe4:	2601      	movs	r6, #1
 8013fe6:	6065      	str	r5, [r4, #4]
 8013fe8:	e7ef      	b.n	8013fca <rcl_guard_condition_init+0x72>
 8013fea:	260a      	movs	r6, #10
 8013fec:	e7ed      	b.n	8013fca <rcl_guard_condition_init+0x72>
 8013fee:	bf00      	nop

08013ff0 <rcl_guard_condition_init_from_rmw>:
 8013ff0:	b082      	sub	sp, #8
 8013ff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ff6:	b086      	sub	sp, #24
 8013ff8:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8013ffc:	4604      	mov	r4, r0
 8013ffe:	f84c 3f04 	str.w	r3, [ip, #4]!
 8014002:	460e      	mov	r6, r1
 8014004:	4617      	mov	r7, r2
 8014006:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801400a:	f10d 0e04 	add.w	lr, sp, #4
 801400e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014012:	f8dc 3000 	ldr.w	r3, [ip]
 8014016:	f8ce 3000 	str.w	r3, [lr]
 801401a:	a801      	add	r0, sp, #4
 801401c:	f7f9 f8c4 	bl	800d1a8 <rcutils_allocator_is_valid>
 8014020:	b350      	cbz	r0, 8014078 <rcl_guard_condition_init_from_rmw+0x88>
 8014022:	b34c      	cbz	r4, 8014078 <rcl_guard_condition_init_from_rmw+0x88>
 8014024:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8014028:	f1b8 0f00 	cmp.w	r8, #0
 801402c:	d11e      	bne.n	801406c <rcl_guard_condition_init_from_rmw+0x7c>
 801402e:	b31f      	cbz	r7, 8014078 <rcl_guard_condition_init_from_rmw+0x88>
 8014030:	4638      	mov	r0, r7
 8014032:	f7f7 f823 	bl	800b07c <rcl_context_is_valid>
 8014036:	b328      	cbz	r0, 8014084 <rcl_guard_condition_init_from_rmw+0x94>
 8014038:	9b01      	ldr	r3, [sp, #4]
 801403a:	9905      	ldr	r1, [sp, #20]
 801403c:	201c      	movs	r0, #28
 801403e:	4798      	blx	r3
 8014040:	4605      	mov	r5, r0
 8014042:	6060      	str	r0, [r4, #4]
 8014044:	b358      	cbz	r0, 801409e <rcl_guard_condition_init_from_rmw+0xae>
 8014046:	b1fe      	cbz	r6, 8014088 <rcl_guard_condition_init_from_rmw+0x98>
 8014048:	6006      	str	r6, [r0, #0]
 801404a:	f880 8004 	strb.w	r8, [r0, #4]
 801404e:	ac01      	add	r4, sp, #4
 8014050:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014052:	f105 0c08 	add.w	ip, r5, #8
 8014056:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801405a:	6823      	ldr	r3, [r4, #0]
 801405c:	f8cc 3000 	str.w	r3, [ip]
 8014060:	2000      	movs	r0, #0
 8014062:	b006      	add	sp, #24
 8014064:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014068:	b002      	add	sp, #8
 801406a:	4770      	bx	lr
 801406c:	2064      	movs	r0, #100	@ 0x64
 801406e:	b006      	add	sp, #24
 8014070:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014074:	b002      	add	sp, #8
 8014076:	4770      	bx	lr
 8014078:	200b      	movs	r0, #11
 801407a:	b006      	add	sp, #24
 801407c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014080:	b002      	add	sp, #8
 8014082:	4770      	bx	lr
 8014084:	2065      	movs	r0, #101	@ 0x65
 8014086:	e7f2      	b.n	801406e <rcl_guard_condition_init_from_rmw+0x7e>
 8014088:	6838      	ldr	r0, [r7, #0]
 801408a:	3028      	adds	r0, #40	@ 0x28
 801408c:	f002 fb3c 	bl	8016708 <rmw_create_guard_condition>
 8014090:	6028      	str	r0, [r5, #0]
 8014092:	6865      	ldr	r5, [r4, #4]
 8014094:	682e      	ldr	r6, [r5, #0]
 8014096:	b126      	cbz	r6, 80140a2 <rcl_guard_condition_init_from_rmw+0xb2>
 8014098:	2301      	movs	r3, #1
 801409a:	712b      	strb	r3, [r5, #4]
 801409c:	e7d7      	b.n	801404e <rcl_guard_condition_init_from_rmw+0x5e>
 801409e:	200a      	movs	r0, #10
 80140a0:	e7e5      	b.n	801406e <rcl_guard_condition_init_from_rmw+0x7e>
 80140a2:	4628      	mov	r0, r5
 80140a4:	9b02      	ldr	r3, [sp, #8]
 80140a6:	9905      	ldr	r1, [sp, #20]
 80140a8:	4798      	blx	r3
 80140aa:	6066      	str	r6, [r4, #4]
 80140ac:	2001      	movs	r0, #1
 80140ae:	e7de      	b.n	801406e <rcl_guard_condition_init_from_rmw+0x7e>

080140b0 <rcl_guard_condition_fini>:
 80140b0:	b570      	push	{r4, r5, r6, lr}
 80140b2:	b082      	sub	sp, #8
 80140b4:	b1f0      	cbz	r0, 80140f4 <rcl_guard_condition_fini+0x44>
 80140b6:	6843      	ldr	r3, [r0, #4]
 80140b8:	4604      	mov	r4, r0
 80140ba:	b163      	cbz	r3, 80140d6 <rcl_guard_condition_fini+0x26>
 80140bc:	6818      	ldr	r0, [r3, #0]
 80140be:	68de      	ldr	r6, [r3, #12]
 80140c0:	6999      	ldr	r1, [r3, #24]
 80140c2:	b160      	cbz	r0, 80140de <rcl_guard_condition_fini+0x2e>
 80140c4:	791d      	ldrb	r5, [r3, #4]
 80140c6:	b965      	cbnz	r5, 80140e2 <rcl_guard_condition_fini+0x32>
 80140c8:	4618      	mov	r0, r3
 80140ca:	47b0      	blx	r6
 80140cc:	2300      	movs	r3, #0
 80140ce:	4628      	mov	r0, r5
 80140d0:	6063      	str	r3, [r4, #4]
 80140d2:	b002      	add	sp, #8
 80140d4:	bd70      	pop	{r4, r5, r6, pc}
 80140d6:	461d      	mov	r5, r3
 80140d8:	4628      	mov	r0, r5
 80140da:	b002      	add	sp, #8
 80140dc:	bd70      	pop	{r4, r5, r6, pc}
 80140de:	4605      	mov	r5, r0
 80140e0:	e7f2      	b.n	80140c8 <rcl_guard_condition_fini+0x18>
 80140e2:	9101      	str	r1, [sp, #4]
 80140e4:	f002 fb24 	bl	8016730 <rmw_destroy_guard_condition>
 80140e8:	1e05      	subs	r5, r0, #0
 80140ea:	6863      	ldr	r3, [r4, #4]
 80140ec:	9901      	ldr	r1, [sp, #4]
 80140ee:	bf18      	it	ne
 80140f0:	2501      	movne	r5, #1
 80140f2:	e7e9      	b.n	80140c8 <rcl_guard_condition_fini+0x18>
 80140f4:	250b      	movs	r5, #11
 80140f6:	4628      	mov	r0, r5
 80140f8:	b002      	add	sp, #8
 80140fa:	bd70      	pop	{r4, r5, r6, pc}

080140fc <rcl_guard_condition_get_default_options>:
 80140fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80140fe:	b087      	sub	sp, #28
 8014100:	4606      	mov	r6, r0
 8014102:	4668      	mov	r0, sp
 8014104:	f7f9 f842 	bl	800d18c <rcutils_get_default_allocator>
 8014108:	4b09      	ldr	r3, [pc, #36]	@ (8014130 <rcl_guard_condition_get_default_options+0x34>)
 801410a:	46ee      	mov	lr, sp
 801410c:	469c      	mov	ip, r3
 801410e:	461d      	mov	r5, r3
 8014110:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014114:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014118:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801411a:	4634      	mov	r4, r6
 801411c:	f8de 7000 	ldr.w	r7, [lr]
 8014120:	f8cc 7000 	str.w	r7, [ip]
 8014124:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014126:	4630      	mov	r0, r6
 8014128:	6027      	str	r7, [r4, #0]
 801412a:	b007      	add	sp, #28
 801412c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801412e:	bf00      	nop
 8014130:	20010f10 	.word	0x20010f10

08014134 <rcl_trigger_guard_condition>:
 8014134:	b148      	cbz	r0, 801414a <rcl_trigger_guard_condition+0x16>
 8014136:	b508      	push	{r3, lr}
 8014138:	6843      	ldr	r3, [r0, #4]
 801413a:	b143      	cbz	r3, 801414e <rcl_trigger_guard_condition+0x1a>
 801413c:	6818      	ldr	r0, [r3, #0]
 801413e:	f002 fccf 	bl	8016ae0 <rmw_trigger_guard_condition>
 8014142:	3800      	subs	r0, #0
 8014144:	bf18      	it	ne
 8014146:	2001      	movne	r0, #1
 8014148:	bd08      	pop	{r3, pc}
 801414a:	200b      	movs	r0, #11
 801414c:	4770      	bx	lr
 801414e:	200b      	movs	r0, #11
 8014150:	bd08      	pop	{r3, pc}
 8014152:	bf00      	nop

08014154 <rcl_guard_condition_get_rmw_handle>:
 8014154:	b110      	cbz	r0, 801415c <rcl_guard_condition_get_rmw_handle+0x8>
 8014156:	6840      	ldr	r0, [r0, #4]
 8014158:	b100      	cbz	r0, 801415c <rcl_guard_condition_get_rmw_handle+0x8>
 801415a:	6800      	ldr	r0, [r0, #0]
 801415c:	4770      	bx	lr
 801415e:	bf00      	nop

08014160 <rcl_init>:
 8014160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014164:	1e05      	subs	r5, r0, #0
 8014166:	b09c      	sub	sp, #112	@ 0x70
 8014168:	460e      	mov	r6, r1
 801416a:	4690      	mov	r8, r2
 801416c:	461f      	mov	r7, r3
 801416e:	f340 8099 	ble.w	80142a4 <rcl_init+0x144>
 8014172:	2900      	cmp	r1, #0
 8014174:	f000 8099 	beq.w	80142aa <rcl_init+0x14a>
 8014178:	f1a1 0e04 	sub.w	lr, r1, #4
 801417c:	f04f 0c00 	mov.w	ip, #0
 8014180:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8014184:	f10c 0c01 	add.w	ip, ip, #1
 8014188:	2c00      	cmp	r4, #0
 801418a:	f000 808e 	beq.w	80142aa <rcl_init+0x14a>
 801418e:	4565      	cmp	r5, ip
 8014190:	d1f6      	bne.n	8014180 <rcl_init+0x20>
 8014192:	f1b8 0f00 	cmp.w	r8, #0
 8014196:	f000 8088 	beq.w	80142aa <rcl_init+0x14a>
 801419a:	f8d8 4000 	ldr.w	r4, [r8]
 801419e:	2c00      	cmp	r4, #0
 80141a0:	f000 8083 	beq.w	80142aa <rcl_init+0x14a>
 80141a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80141a6:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 80141aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80141ae:	6823      	ldr	r3, [r4, #0]
 80141b0:	f8cc 3000 	str.w	r3, [ip]
 80141b4:	a817      	add	r0, sp, #92	@ 0x5c
 80141b6:	f7f8 fff7 	bl	800d1a8 <rcutils_allocator_is_valid>
 80141ba:	2800      	cmp	r0, #0
 80141bc:	d075      	beq.n	80142aa <rcl_init+0x14a>
 80141be:	2f00      	cmp	r7, #0
 80141c0:	d073      	beq.n	80142aa <rcl_init+0x14a>
 80141c2:	683b      	ldr	r3, [r7, #0]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d175      	bne.n	80142b4 <rcl_init+0x154>
 80141c8:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 80141cc:	2178      	movs	r1, #120	@ 0x78
 80141ce:	2001      	movs	r0, #1
 80141d0:	4798      	blx	r3
 80141d2:	4604      	mov	r4, r0
 80141d4:	6038      	str	r0, [r7, #0]
 80141d6:	2800      	cmp	r0, #0
 80141d8:	f000 80a0 	beq.w	801431c <rcl_init+0x1bc>
 80141dc:	a802      	add	r0, sp, #8
 80141de:	f002 f833 	bl	8016248 <rmw_get_zero_initialized_context>
 80141e2:	a902      	add	r1, sp, #8
 80141e4:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80141e8:	2250      	movs	r2, #80	@ 0x50
 80141ea:	ac17      	add	r4, sp, #92	@ 0x5c
 80141ec:	f004 fce5 	bl	8018bba <memcpy>
 80141f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80141f2:	f8d7 e000 	ldr.w	lr, [r7]
 80141f6:	46f4      	mov	ip, lr
 80141f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80141fc:	6823      	ldr	r3, [r4, #0]
 80141fe:	f8cc 3000 	str.w	r3, [ip]
 8014202:	f10e 0114 	add.w	r1, lr, #20
 8014206:	4640      	mov	r0, r8
 8014208:	f7f7 f84a 	bl	800b2a0 <rcl_init_options_copy>
 801420c:	4604      	mov	r4, r0
 801420e:	2800      	cmp	r0, #0
 8014210:	d144      	bne.n	801429c <rcl_init+0x13c>
 8014212:	f8d7 9000 	ldr.w	r9, [r7]
 8014216:	ea4f 78e5 	mov.w	r8, r5, asr #31
 801421a:	f8c9 0020 	str.w	r0, [r9, #32]
 801421e:	f8c9 5018 	str.w	r5, [r9, #24]
 8014222:	f8c9 801c 	str.w	r8, [r9, #28]
 8014226:	2d00      	cmp	r5, #0
 8014228:	d04b      	beq.n	80142c2 <rcl_init+0x162>
 801422a:	2e00      	cmp	r6, #0
 801422c:	d049      	beq.n	80142c2 <rcl_init+0x162>
 801422e:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 8014232:	2104      	movs	r1, #4
 8014234:	4628      	mov	r0, r5
 8014236:	4798      	blx	r3
 8014238:	f8c9 0020 	str.w	r0, [r9, #32]
 801423c:	f8d7 9000 	ldr.w	r9, [r7]
 8014240:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8014244:	46ca      	mov	sl, r9
 8014246:	b343      	cbz	r3, 801429a <rcl_init+0x13a>
 8014248:	2d01      	cmp	r5, #1
 801424a:	f178 0300 	sbcs.w	r3, r8, #0
 801424e:	db38      	blt.n	80142c2 <rcl_init+0x162>
 8014250:	2400      	movs	r4, #0
 8014252:	3e04      	subs	r6, #4
 8014254:	46a1      	mov	r9, r4
 8014256:	e00b      	b.n	8014270 <rcl_init+0x110>
 8014258:	6831      	ldr	r1, [r6, #0]
 801425a:	f004 fcae 	bl	8018bba <memcpy>
 801425e:	3401      	adds	r4, #1
 8014260:	f149 0900 	adc.w	r9, r9, #0
 8014264:	45c8      	cmp	r8, r9
 8014266:	bf08      	it	eq
 8014268:	42a5      	cmpeq	r5, r4
 801426a:	d028      	beq.n	80142be <rcl_init+0x15e>
 801426c:	f8d7 a000 	ldr.w	sl, [r7]
 8014270:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8014274:	f7eb ffd6 	bl	8000224 <strlen>
 8014278:	1c42      	adds	r2, r0, #1
 801427a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801427c:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801427e:	f8da a020 	ldr.w	sl, [sl, #32]
 8014282:	9201      	str	r2, [sp, #4]
 8014284:	4610      	mov	r0, r2
 8014286:	4798      	blx	r3
 8014288:	683b      	ldr	r3, [r7, #0]
 801428a:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 801428e:	6a1b      	ldr	r3, [r3, #32]
 8014290:	9a01      	ldr	r2, [sp, #4]
 8014292:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014296:	2800      	cmp	r0, #0
 8014298:	d1de      	bne.n	8014258 <rcl_init+0xf8>
 801429a:	240a      	movs	r4, #10
 801429c:	4638      	mov	r0, r7
 801429e:	f7f6 fef9 	bl	800b094 <__cleanup_context>
 80142a2:	e003      	b.n	80142ac <rcl_init+0x14c>
 80142a4:	2900      	cmp	r1, #0
 80142a6:	f43f af74 	beq.w	8014192 <rcl_init+0x32>
 80142aa:	240b      	movs	r4, #11
 80142ac:	4620      	mov	r0, r4
 80142ae:	b01c      	add	sp, #112	@ 0x70
 80142b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142b4:	2464      	movs	r4, #100	@ 0x64
 80142b6:	4620      	mov	r0, r4
 80142b8:	b01c      	add	sp, #112	@ 0x70
 80142ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142be:	f8d7 9000 	ldr.w	r9, [r7]
 80142c2:	491d      	ldr	r1, [pc, #116]	@ (8014338 <rcl_init+0x1d8>)
 80142c4:	680b      	ldr	r3, [r1, #0]
 80142c6:	3301      	adds	r3, #1
 80142c8:	d023      	beq.n	8014312 <rcl_init+0x1b2>
 80142ca:	600b      	str	r3, [r1, #0]
 80142cc:	461a      	mov	r2, r3
 80142ce:	2400      	movs	r4, #0
 80142d0:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80142d4:	607b      	str	r3, [r7, #4]
 80142d6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80142d8:	6182      	str	r2, [r0, #24]
 80142da:	3301      	adds	r3, #1
 80142dc:	61c4      	str	r4, [r0, #28]
 80142de:	d01f      	beq.n	8014320 <rcl_init+0x1c0>
 80142e0:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 80142e4:	b94b      	cbnz	r3, 80142fa <rcl_init+0x19a>
 80142e6:	3030      	adds	r0, #48	@ 0x30
 80142e8:	f000 f846 	bl	8014378 <rcl_get_localhost_only>
 80142ec:	4604      	mov	r4, r0
 80142ee:	2800      	cmp	r0, #0
 80142f0:	d1d4      	bne.n	801429c <rcl_init+0x13c>
 80142f2:	f8d7 9000 	ldr.w	r9, [r7]
 80142f6:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80142fa:	f109 0128 	add.w	r1, r9, #40	@ 0x28
 80142fe:	3018      	adds	r0, #24
 8014300:	f7f9 fc82 	bl	800dc08 <rmw_init>
 8014304:	4604      	mov	r4, r0
 8014306:	2800      	cmp	r0, #0
 8014308:	d0d0      	beq.n	80142ac <rcl_init+0x14c>
 801430a:	f7ff fe07 	bl	8013f1c <rcl_convert_rmw_ret_to_rcl_ret>
 801430e:	4604      	mov	r4, r0
 8014310:	e7c4      	b.n	801429c <rcl_init+0x13c>
 8014312:	2201      	movs	r2, #1
 8014314:	461c      	mov	r4, r3
 8014316:	600a      	str	r2, [r1, #0]
 8014318:	4613      	mov	r3, r2
 801431a:	e7d9      	b.n	80142d0 <rcl_init+0x170>
 801431c:	240a      	movs	r4, #10
 801431e:	e7c5      	b.n	80142ac <rcl_init+0x14c>
 8014320:	3024      	adds	r0, #36	@ 0x24
 8014322:	f003 fcc9 	bl	8017cb8 <rcl_get_default_domain_id>
 8014326:	4604      	mov	r4, r0
 8014328:	2800      	cmp	r0, #0
 801432a:	d1b7      	bne.n	801429c <rcl_init+0x13c>
 801432c:	f8d7 9000 	ldr.w	r9, [r7]
 8014330:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8014334:	e7d4      	b.n	80142e0 <rcl_init+0x180>
 8014336:	bf00      	nop
 8014338:	20010f24 	.word	0x20010f24

0801433c <rcl_shutdown>:
 801433c:	b1a8      	cbz	r0, 801436a <rcl_shutdown+0x2e>
 801433e:	6803      	ldr	r3, [r0, #0]
 8014340:	b510      	push	{r4, lr}
 8014342:	4604      	mov	r4, r0
 8014344:	b173      	cbz	r3, 8014364 <rcl_shutdown+0x28>
 8014346:	f7f6 fe99 	bl	800b07c <rcl_context_is_valid>
 801434a:	b140      	cbz	r0, 801435e <rcl_shutdown+0x22>
 801434c:	6820      	ldr	r0, [r4, #0]
 801434e:	3028      	adds	r0, #40	@ 0x28
 8014350:	f7f9 fd90 	bl	800de74 <rmw_shutdown>
 8014354:	4603      	mov	r3, r0
 8014356:	b958      	cbnz	r0, 8014370 <rcl_shutdown+0x34>
 8014358:	6060      	str	r0, [r4, #4]
 801435a:	4618      	mov	r0, r3
 801435c:	bd10      	pop	{r4, pc}
 801435e:	236a      	movs	r3, #106	@ 0x6a
 8014360:	4618      	mov	r0, r3
 8014362:	bd10      	pop	{r4, pc}
 8014364:	230b      	movs	r3, #11
 8014366:	4618      	mov	r0, r3
 8014368:	bd10      	pop	{r4, pc}
 801436a:	230b      	movs	r3, #11
 801436c:	4618      	mov	r0, r3
 801436e:	4770      	bx	lr
 8014370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014374:	f7ff bdd2 	b.w	8013f1c <rcl_convert_rmw_ret_to_rcl_ret>

08014378 <rcl_get_localhost_only>:
 8014378:	b510      	push	{r4, lr}
 801437a:	b082      	sub	sp, #8
 801437c:	2300      	movs	r3, #0
 801437e:	9301      	str	r3, [sp, #4]
 8014380:	b1b8      	cbz	r0, 80143b2 <rcl_get_localhost_only+0x3a>
 8014382:	4604      	mov	r4, r0
 8014384:	a901      	add	r1, sp, #4
 8014386:	480c      	ldr	r0, [pc, #48]	@ (80143b8 <rcl_get_localhost_only+0x40>)
 8014388:	f7f8 ffc0 	bl	800d30c <rcutils_get_env>
 801438c:	b110      	cbz	r0, 8014394 <rcl_get_localhost_only+0x1c>
 801438e:	2001      	movs	r0, #1
 8014390:	b002      	add	sp, #8
 8014392:	bd10      	pop	{r4, pc}
 8014394:	9b01      	ldr	r3, [sp, #4]
 8014396:	b113      	cbz	r3, 801439e <rcl_get_localhost_only+0x26>
 8014398:	781a      	ldrb	r2, [r3, #0]
 801439a:	2a31      	cmp	r2, #49	@ 0x31
 801439c:	d004      	beq.n	80143a8 <rcl_get_localhost_only+0x30>
 801439e:	2302      	movs	r3, #2
 80143a0:	2000      	movs	r0, #0
 80143a2:	7023      	strb	r3, [r4, #0]
 80143a4:	b002      	add	sp, #8
 80143a6:	bd10      	pop	{r4, pc}
 80143a8:	785b      	ldrb	r3, [r3, #1]
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d1f7      	bne.n	801439e <rcl_get_localhost_only+0x26>
 80143ae:	2301      	movs	r3, #1
 80143b0:	e7f6      	b.n	80143a0 <rcl_get_localhost_only+0x28>
 80143b2:	200b      	movs	r0, #11
 80143b4:	b002      	add	sp, #8
 80143b6:	bd10      	pop	{r4, pc}
 80143b8:	08019f58 	.word	0x08019f58

080143bc <rcl_node_resolve_name>:
 80143bc:	b082      	sub	sp, #8
 80143be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143c2:	b091      	sub	sp, #68	@ 0x44
 80143c4:	ac1a      	add	r4, sp, #104	@ 0x68
 80143c6:	e884 000c 	stmia.w	r4, {r2, r3}
 80143ca:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 80143ce:	2800      	cmp	r0, #0
 80143d0:	d03b      	beq.n	801444a <rcl_node_resolve_name+0x8e>
 80143d2:	460c      	mov	r4, r1
 80143d4:	4605      	mov	r5, r0
 80143d6:	f7f7 f973 	bl	800b6c0 <rcl_node_get_options>
 80143da:	2800      	cmp	r0, #0
 80143dc:	d037      	beq.n	801444e <rcl_node_resolve_name+0x92>
 80143de:	4628      	mov	r0, r5
 80143e0:	f7f7 f95e 	bl	800b6a0 <rcl_node_get_name>
 80143e4:	4606      	mov	r6, r0
 80143e6:	4628      	mov	r0, r5
 80143e8:	f7f7 f962 	bl	800b6b0 <rcl_node_get_namespace>
 80143ec:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 80143f0:	4681      	mov	r9, r0
 80143f2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80143f6:	ad0b      	add	r5, sp, #44	@ 0x2c
 80143f8:	46ac      	mov	ip, r5
 80143fa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80143fe:	f8de 3000 	ldr.w	r3, [lr]
 8014402:	f8cc 3000 	str.w	r3, [ip]
 8014406:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014408:	b1fb      	cbz	r3, 801444a <rcl_node_resolve_name+0x8e>
 801440a:	468a      	mov	sl, r1
 801440c:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8014410:	f001 fdee 	bl	8015ff0 <rcutils_get_zero_initialized_string_map>
 8014414:	ab10      	add	r3, sp, #64	@ 0x40
 8014416:	9008      	str	r0, [sp, #32]
 8014418:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 801441c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014420:	2100      	movs	r1, #0
 8014422:	e895 000c 	ldmia.w	r5, {r2, r3}
 8014426:	a808      	add	r0, sp, #32
 8014428:	f001 fe5a 	bl	80160e0 <rcutils_string_map_init>
 801442c:	4607      	mov	r7, r0
 801442e:	b180      	cbz	r0, 8014452 <rcl_node_resolve_name+0x96>
 8014430:	f7f8 ff84 	bl	800d33c <rcutils_get_error_string>
 8014434:	f7f8 ff98 	bl	800d368 <rcutils_reset_error>
 8014438:	2f0a      	cmp	r7, #10
 801443a:	bf18      	it	ne
 801443c:	2701      	movne	r7, #1
 801443e:	4638      	mov	r0, r7
 8014440:	b011      	add	sp, #68	@ 0x44
 8014442:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014446:	b002      	add	sp, #8
 8014448:	4770      	bx	lr
 801444a:	270b      	movs	r7, #11
 801444c:	e7f7      	b.n	801443e <rcl_node_resolve_name+0x82>
 801444e:	2701      	movs	r7, #1
 8014450:	e7f5      	b.n	801443e <rcl_node_resolve_name+0x82>
 8014452:	9009      	str	r0, [sp, #36]	@ 0x24
 8014454:	9007      	str	r0, [sp, #28]
 8014456:	a808      	add	r0, sp, #32
 8014458:	f003 fdc0 	bl	8017fdc <rcl_get_default_topic_name_substitutions>
 801445c:	4607      	mov	r7, r0
 801445e:	b1a8      	cbz	r0, 801448c <rcl_node_resolve_name+0xd0>
 8014460:	280a      	cmp	r0, #10
 8014462:	9c07      	ldr	r4, [sp, #28]
 8014464:	d000      	beq.n	8014468 <rcl_node_resolve_name+0xac>
 8014466:	2701      	movs	r7, #1
 8014468:	a808      	add	r0, sp, #32
 801446a:	f001 fe79 	bl	8016160 <rcutils_string_map_fini>
 801446e:	2800      	cmp	r0, #0
 8014470:	d13d      	bne.n	80144ee <rcl_node_resolve_name+0x132>
 8014472:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014474:	4659      	mov	r1, fp
 8014476:	47d0      	blx	sl
 8014478:	4659      	mov	r1, fp
 801447a:	4620      	mov	r0, r4
 801447c:	47d0      	blx	sl
 801447e:	f1b8 0f00 	cmp.w	r8, #0
 8014482:	d0dc      	beq.n	801443e <rcl_node_resolve_name+0x82>
 8014484:	2f67      	cmp	r7, #103	@ 0x67
 8014486:	bf08      	it	eq
 8014488:	2768      	moveq	r7, #104	@ 0x68
 801448a:	e7d8      	b.n	801443e <rcl_node_resolve_name+0x82>
 801448c:	ab09      	add	r3, sp, #36	@ 0x24
 801448e:	9305      	str	r3, [sp, #20]
 8014490:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014492:	46ec      	mov	ip, sp
 8014494:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014498:	682b      	ldr	r3, [r5, #0]
 801449a:	f8cc 3000 	str.w	r3, [ip]
 801449e:	464a      	mov	r2, r9
 80144a0:	4631      	mov	r1, r6
 80144a2:	4620      	mov	r0, r4
 80144a4:	ab08      	add	r3, sp, #32
 80144a6:	f003 fc3b 	bl	8017d20 <rcl_expand_topic_name>
 80144aa:	4607      	mov	r7, r0
 80144ac:	b9b8      	cbnz	r0, 80144de <rcl_node_resolve_name+0x122>
 80144ae:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80144b0:	9009      	str	r0, [sp, #36]	@ 0x24
 80144b2:	4602      	mov	r2, r0
 80144b4:	a90a      	add	r1, sp, #40	@ 0x28
 80144b6:	4620      	mov	r0, r4
 80144b8:	f001 ff5a 	bl	8016370 <rmw_validate_full_topic_name>
 80144bc:	b988      	cbnz	r0, 80144e2 <rcl_node_resolve_name+0x126>
 80144be:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80144c0:	b9d5      	cbnz	r5, 80144f8 <rcl_node_resolve_name+0x13c>
 80144c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80144c4:	a808      	add	r0, sp, #32
 80144c6:	601c      	str	r4, [r3, #0]
 80144c8:	f001 fe4a 	bl	8016160 <rcutils_string_map_fini>
 80144cc:	4607      	mov	r7, r0
 80144ce:	b1a8      	cbz	r0, 80144fc <rcl_node_resolve_name+0x140>
 80144d0:	f7f8 ff34 	bl	800d33c <rcutils_get_error_string>
 80144d4:	462c      	mov	r4, r5
 80144d6:	f7f8 ff47 	bl	800d368 <rcutils_reset_error>
 80144da:	2701      	movs	r7, #1
 80144dc:	e7c9      	b.n	8014472 <rcl_node_resolve_name+0xb6>
 80144de:	9c07      	ldr	r4, [sp, #28]
 80144e0:	e7c2      	b.n	8014468 <rcl_node_resolve_name+0xac>
 80144e2:	f7f8 ff2b 	bl	800d33c <rcutils_get_error_string>
 80144e6:	2701      	movs	r7, #1
 80144e8:	f7f8 ff3e 	bl	800d368 <rcutils_reset_error>
 80144ec:	e7bc      	b.n	8014468 <rcl_node_resolve_name+0xac>
 80144ee:	f7f8 ff25 	bl	800d33c <rcutils_get_error_string>
 80144f2:	f7f8 ff39 	bl	800d368 <rcutils_reset_error>
 80144f6:	e7bc      	b.n	8014472 <rcl_node_resolve_name+0xb6>
 80144f8:	2767      	movs	r7, #103	@ 0x67
 80144fa:	e7b5      	b.n	8014468 <rcl_node_resolve_name+0xac>
 80144fc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80144fe:	4659      	mov	r1, fp
 8014500:	47d0      	blx	sl
 8014502:	4659      	mov	r1, fp
 8014504:	4638      	mov	r0, r7
 8014506:	47d0      	blx	sl
 8014508:	e799      	b.n	801443e <rcl_node_resolve_name+0x82>
 801450a:	bf00      	nop

0801450c <rcl_service_get_rmw_handle>:
 801450c:	b118      	cbz	r0, 8014516 <rcl_service_get_rmw_handle+0xa>
 801450e:	6800      	ldr	r0, [r0, #0]
 8014510:	b108      	cbz	r0, 8014516 <rcl_service_get_rmw_handle+0xa>
 8014512:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8014516:	4770      	bx	lr

08014518 <rcl_take_request>:
 8014518:	b570      	push	{r4, r5, r6, lr}
 801451a:	468e      	mov	lr, r1
 801451c:	460c      	mov	r4, r1
 801451e:	4616      	mov	r6, r2
 8014520:	4605      	mov	r5, r0
 8014522:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014526:	b08c      	sub	sp, #48	@ 0x30
 8014528:	f10d 0c18 	add.w	ip, sp, #24
 801452c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014530:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014534:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014538:	b30d      	cbz	r5, 801457e <rcl_take_request+0x66>
 801453a:	682b      	ldr	r3, [r5, #0]
 801453c:	b1fb      	cbz	r3, 801457e <rcl_take_request+0x66>
 801453e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8014542:	b1e0      	cbz	r0, 801457e <rcl_take_request+0x66>
 8014544:	b336      	cbz	r6, 8014594 <rcl_take_request+0x7c>
 8014546:	2300      	movs	r3, #0
 8014548:	f88d 3007 	strb.w	r3, [sp, #7]
 801454c:	4632      	mov	r2, r6
 801454e:	f10d 0307 	add.w	r3, sp, #7
 8014552:	a902      	add	r1, sp, #8
 8014554:	f002 f9c0 	bl	80168d8 <rmw_take_request>
 8014558:	4605      	mov	r5, r0
 801455a:	b198      	cbz	r0, 8014584 <rcl_take_request+0x6c>
 801455c:	280a      	cmp	r0, #10
 801455e:	bf18      	it	ne
 8014560:	2501      	movne	r5, #1
 8014562:	f10d 0e18 	add.w	lr, sp, #24
 8014566:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801456a:	46a4      	mov	ip, r4
 801456c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014570:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014574:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014578:	4628      	mov	r0, r5
 801457a:	b00c      	add	sp, #48	@ 0x30
 801457c:	bd70      	pop	{r4, r5, r6, pc}
 801457e:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8014582:	e7ee      	b.n	8014562 <rcl_take_request+0x4a>
 8014584:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014588:	f240 2359 	movw	r3, #601	@ 0x259
 801458c:	2a00      	cmp	r2, #0
 801458e:	bf08      	it	eq
 8014590:	461d      	moveq	r5, r3
 8014592:	e7e6      	b.n	8014562 <rcl_take_request+0x4a>
 8014594:	250b      	movs	r5, #11
 8014596:	e7e4      	b.n	8014562 <rcl_take_request+0x4a>

08014598 <rcl_send_response>:
 8014598:	b170      	cbz	r0, 80145b8 <rcl_send_response+0x20>
 801459a:	6800      	ldr	r0, [r0, #0]
 801459c:	b160      	cbz	r0, 80145b8 <rcl_send_response+0x20>
 801459e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80145a2:	b148      	cbz	r0, 80145b8 <rcl_send_response+0x20>
 80145a4:	b159      	cbz	r1, 80145be <rcl_send_response+0x26>
 80145a6:	b510      	push	{r4, lr}
 80145a8:	b15a      	cbz	r2, 80145c2 <rcl_send_response+0x2a>
 80145aa:	f002 f9f3 	bl	8016994 <rmw_send_response>
 80145ae:	b110      	cbz	r0, 80145b6 <rcl_send_response+0x1e>
 80145b0:	2802      	cmp	r0, #2
 80145b2:	bf18      	it	ne
 80145b4:	2001      	movne	r0, #1
 80145b6:	bd10      	pop	{r4, pc}
 80145b8:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80145bc:	4770      	bx	lr
 80145be:	200b      	movs	r0, #11
 80145c0:	4770      	bx	lr
 80145c2:	200b      	movs	r0, #11
 80145c4:	bd10      	pop	{r4, pc}
 80145c6:	bf00      	nop

080145c8 <rcl_service_is_valid>:
 80145c8:	b130      	cbz	r0, 80145d8 <rcl_service_is_valid+0x10>
 80145ca:	6800      	ldr	r0, [r0, #0]
 80145cc:	b120      	cbz	r0, 80145d8 <rcl_service_is_valid+0x10>
 80145ce:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80145d2:	3800      	subs	r0, #0
 80145d4:	bf18      	it	ne
 80145d6:	2001      	movne	r0, #1
 80145d8:	4770      	bx	lr
 80145da:	bf00      	nop

080145dc <rcl_get_system_time>:
 80145dc:	4608      	mov	r0, r1
 80145de:	f7f9 b837 	b.w	800d650 <rcutils_system_time_now>
 80145e2:	bf00      	nop

080145e4 <rcl_get_steady_time>:
 80145e4:	4608      	mov	r0, r1
 80145e6:	f7f9 b85b 	b.w	800d6a0 <rcutils_steady_time_now>
 80145ea:	bf00      	nop

080145ec <rcl_get_ros_time>:
 80145ec:	7a03      	ldrb	r3, [r0, #8]
 80145ee:	b510      	push	{r4, lr}
 80145f0:	460c      	mov	r4, r1
 80145f2:	b133      	cbz	r3, 8014602 <rcl_get_ros_time+0x16>
 80145f4:	2105      	movs	r1, #5
 80145f6:	f7f8 fde5 	bl	800d1c4 <__atomic_load_8>
 80145fa:	e9c4 0100 	strd	r0, r1, [r4]
 80145fe:	2000      	movs	r0, #0
 8014600:	bd10      	pop	{r4, pc}
 8014602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014606:	4608      	mov	r0, r1
 8014608:	f7f9 b822 	b.w	800d650 <rcutils_system_time_now>

0801460c <rcl_clock_init>:
 801460c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801460e:	4605      	mov	r5, r0
 8014610:	4610      	mov	r0, r2
 8014612:	4614      	mov	r4, r2
 8014614:	460e      	mov	r6, r1
 8014616:	f7f8 fdc7 	bl	800d1a8 <rcutils_allocator_is_valid>
 801461a:	b128      	cbz	r0, 8014628 <rcl_clock_init+0x1c>
 801461c:	2d03      	cmp	r5, #3
 801461e:	d803      	bhi.n	8014628 <rcl_clock_init+0x1c>
 8014620:	e8df f005 	tbb	[pc, r5]
 8014624:	06532e1d 	.word	0x06532e1d
 8014628:	f04f 0c0b 	mov.w	ip, #11
 801462c:	4660      	mov	r0, ip
 801462e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014630:	2e00      	cmp	r6, #0
 8014632:	d0f9      	beq.n	8014628 <rcl_clock_init+0x1c>
 8014634:	2c00      	cmp	r4, #0
 8014636:	d0f7      	beq.n	8014628 <rcl_clock_init+0x1c>
 8014638:	2300      	movs	r3, #0
 801463a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801463e:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 80146f4 <rcl_clock_init+0xe8>
 8014642:	6133      	str	r3, [r6, #16]
 8014644:	f106 0514 	add.w	r5, r6, #20
 8014648:	469c      	mov	ip, r3
 801464a:	2703      	movs	r7, #3
 801464c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801464e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014650:	6823      	ldr	r3, [r4, #0]
 8014652:	602b      	str	r3, [r5, #0]
 8014654:	7037      	strb	r7, [r6, #0]
 8014656:	f8c6 e00c 	str.w	lr, [r6, #12]
 801465a:	4660      	mov	r0, ip
 801465c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801465e:	2e00      	cmp	r6, #0
 8014660:	d0e2      	beq.n	8014628 <rcl_clock_init+0x1c>
 8014662:	2300      	movs	r3, #0
 8014664:	7033      	strb	r3, [r6, #0]
 8014666:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801466a:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801466e:	469c      	mov	ip, r3
 8014670:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014672:	f106 0514 	add.w	r5, r6, #20
 8014676:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014678:	6823      	ldr	r3, [r4, #0]
 801467a:	602b      	str	r3, [r5, #0]
 801467c:	4660      	mov	r0, ip
 801467e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014680:	2e00      	cmp	r6, #0
 8014682:	d0d1      	beq.n	8014628 <rcl_clock_init+0x1c>
 8014684:	2c00      	cmp	r4, #0
 8014686:	d0cf      	beq.n	8014628 <rcl_clock_init+0x1c>
 8014688:	2700      	movs	r7, #0
 801468a:	7037      	strb	r7, [r6, #0]
 801468c:	46a4      	mov	ip, r4
 801468e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014692:	f106 0514 	add.w	r5, r6, #20
 8014696:	e9c6 7701 	strd	r7, r7, [r6, #4]
 801469a:	e9c6 7703 	strd	r7, r7, [r6, #12]
 801469e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80146a0:	f8dc 3000 	ldr.w	r3, [ip]
 80146a4:	602b      	str	r3, [r5, #0]
 80146a6:	6921      	ldr	r1, [r4, #16]
 80146a8:	6823      	ldr	r3, [r4, #0]
 80146aa:	2010      	movs	r0, #16
 80146ac:	4798      	blx	r3
 80146ae:	6130      	str	r0, [r6, #16]
 80146b0:	b1d0      	cbz	r0, 80146e8 <rcl_clock_init+0xdc>
 80146b2:	2200      	movs	r2, #0
 80146b4:	2300      	movs	r3, #0
 80146b6:	e9c0 2300 	strd	r2, r3, [r0]
 80146ba:	2301      	movs	r3, #1
 80146bc:	7207      	strb	r7, [r0, #8]
 80146be:	4a0c      	ldr	r2, [pc, #48]	@ (80146f0 <rcl_clock_init+0xe4>)
 80146c0:	7033      	strb	r3, [r6, #0]
 80146c2:	46bc      	mov	ip, r7
 80146c4:	60f2      	str	r2, [r6, #12]
 80146c6:	4660      	mov	r0, ip
 80146c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80146ca:	2e00      	cmp	r6, #0
 80146cc:	d0ac      	beq.n	8014628 <rcl_clock_init+0x1c>
 80146ce:	2c00      	cmp	r4, #0
 80146d0:	d0aa      	beq.n	8014628 <rcl_clock_init+0x1c>
 80146d2:	2300      	movs	r3, #0
 80146d4:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80146d8:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 80146f8 <rcl_clock_init+0xec>
 80146dc:	6133      	str	r3, [r6, #16]
 80146de:	f106 0514 	add.w	r5, r6, #20
 80146e2:	469c      	mov	ip, r3
 80146e4:	2702      	movs	r7, #2
 80146e6:	e7b1      	b.n	801464c <rcl_clock_init+0x40>
 80146e8:	f04f 0c0a 	mov.w	ip, #10
 80146ec:	e79e      	b.n	801462c <rcl_clock_init+0x20>
 80146ee:	bf00      	nop
 80146f0:	080145ed 	.word	0x080145ed
 80146f4:	080145e5 	.word	0x080145e5
 80146f8:	080145dd 	.word	0x080145dd

080146fc <rcl_clock_fini>:
 80146fc:	2800      	cmp	r0, #0
 80146fe:	d02c      	beq.n	801475a <rcl_clock_fini+0x5e>
 8014700:	b538      	push	{r3, r4, r5, lr}
 8014702:	4604      	mov	r4, r0
 8014704:	3014      	adds	r0, #20
 8014706:	f7f8 fd4f 	bl	800d1a8 <rcutils_allocator_is_valid>
 801470a:	b140      	cbz	r0, 801471e <rcl_clock_fini+0x22>
 801470c:	7823      	ldrb	r3, [r4, #0]
 801470e:	2b02      	cmp	r3, #2
 8014710:	d007      	beq.n	8014722 <rcl_clock_fini+0x26>
 8014712:	2b03      	cmp	r3, #3
 8014714:	d005      	beq.n	8014722 <rcl_clock_fini+0x26>
 8014716:	2b01      	cmp	r3, #1
 8014718:	d00f      	beq.n	801473a <rcl_clock_fini+0x3e>
 801471a:	200b      	movs	r0, #11
 801471c:	bd38      	pop	{r3, r4, r5, pc}
 801471e:	2001      	movs	r0, #1
 8014720:	bd38      	pop	{r3, r4, r5, pc}
 8014722:	68a0      	ldr	r0, [r4, #8]
 8014724:	2800      	cmp	r0, #0
 8014726:	d0f9      	beq.n	801471c <rcl_clock_fini+0x20>
 8014728:	2500      	movs	r5, #0
 801472a:	6860      	ldr	r0, [r4, #4]
 801472c:	69a3      	ldr	r3, [r4, #24]
 801472e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8014730:	60a5      	str	r5, [r4, #8]
 8014732:	4798      	blx	r3
 8014734:	6065      	str	r5, [r4, #4]
 8014736:	4628      	mov	r0, r5
 8014738:	bd38      	pop	{r3, r4, r5, pc}
 801473a:	68a3      	ldr	r3, [r4, #8]
 801473c:	b133      	cbz	r3, 801474c <rcl_clock_fini+0x50>
 801473e:	2500      	movs	r5, #0
 8014740:	69a3      	ldr	r3, [r4, #24]
 8014742:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8014744:	6860      	ldr	r0, [r4, #4]
 8014746:	60a5      	str	r5, [r4, #8]
 8014748:	4798      	blx	r3
 801474a:	6065      	str	r5, [r4, #4]
 801474c:	6920      	ldr	r0, [r4, #16]
 801474e:	69a3      	ldr	r3, [r4, #24]
 8014750:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8014752:	4798      	blx	r3
 8014754:	2000      	movs	r0, #0
 8014756:	6120      	str	r0, [r4, #16]
 8014758:	bd38      	pop	{r3, r4, r5, pc}
 801475a:	200b      	movs	r0, #11
 801475c:	4770      	bx	lr
 801475e:	bf00      	nop

08014760 <rcl_clock_get_now>:
 8014760:	b140      	cbz	r0, 8014774 <rcl_clock_get_now+0x14>
 8014762:	b139      	cbz	r1, 8014774 <rcl_clock_get_now+0x14>
 8014764:	7803      	ldrb	r3, [r0, #0]
 8014766:	b11b      	cbz	r3, 8014770 <rcl_clock_get_now+0x10>
 8014768:	68c3      	ldr	r3, [r0, #12]
 801476a:	b10b      	cbz	r3, 8014770 <rcl_clock_get_now+0x10>
 801476c:	6900      	ldr	r0, [r0, #16]
 801476e:	4718      	bx	r3
 8014770:	2001      	movs	r0, #1
 8014772:	4770      	bx	lr
 8014774:	200b      	movs	r0, #11
 8014776:	4770      	bx	lr

08014778 <rcl_clock_add_jump_callback>:
 8014778:	b082      	sub	sp, #8
 801477a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801477e:	a906      	add	r1, sp, #24
 8014780:	e881 000c 	stmia.w	r1, {r2, r3}
 8014784:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 8014788:	b320      	cbz	r0, 80147d4 <rcl_clock_add_jump_callback+0x5c>
 801478a:	4604      	mov	r4, r0
 801478c:	3014      	adds	r0, #20
 801478e:	f7f8 fd0b 	bl	800d1a8 <rcutils_allocator_is_valid>
 8014792:	b1f8      	cbz	r0, 80147d4 <rcl_clock_add_jump_callback+0x5c>
 8014794:	b1f6      	cbz	r6, 80147d4 <rcl_clock_add_jump_callback+0x5c>
 8014796:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014798:	2b00      	cmp	r3, #0
 801479a:	db1b      	blt.n	80147d4 <rcl_clock_add_jump_callback+0x5c>
 801479c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80147a0:	2a01      	cmp	r2, #1
 80147a2:	f173 0300 	sbcs.w	r3, r3, #0
 80147a6:	da15      	bge.n	80147d4 <rcl_clock_add_jump_callback+0x5c>
 80147a8:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 80147ac:	2f00      	cmp	r7, #0
 80147ae:	d042      	beq.n	8014836 <rcl_clock_add_jump_callback+0xbe>
 80147b0:	2300      	movs	r3, #0
 80147b2:	4602      	mov	r2, r0
 80147b4:	e003      	b.n	80147be <rcl_clock_add_jump_callback+0x46>
 80147b6:	42bb      	cmp	r3, r7
 80147b8:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80147bc:	d011      	beq.n	80147e2 <rcl_clock_add_jump_callback+0x6a>
 80147be:	6811      	ldr	r1, [r2, #0]
 80147c0:	42b1      	cmp	r1, r6
 80147c2:	f103 0301 	add.w	r3, r3, #1
 80147c6:	d1f6      	bne.n	80147b6 <rcl_clock_add_jump_callback+0x3e>
 80147c8:	6a11      	ldr	r1, [r2, #32]
 80147ca:	42a9      	cmp	r1, r5
 80147cc:	d1f3      	bne.n	80147b6 <rcl_clock_add_jump_callback+0x3e>
 80147ce:	f04f 0e01 	mov.w	lr, #1
 80147d2:	e001      	b.n	80147d8 <rcl_clock_add_jump_callback+0x60>
 80147d4:	f04f 0e0b 	mov.w	lr, #11
 80147d8:	4670      	mov	r0, lr
 80147da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80147de:	b002      	add	sp, #8
 80147e0:	4770      	bx	lr
 80147e2:	3301      	adds	r3, #1
 80147e4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80147e8:	00d9      	lsls	r1, r3, #3
 80147ea:	69e3      	ldr	r3, [r4, #28]
 80147ec:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80147ee:	4798      	blx	r3
 80147f0:	b1f0      	cbz	r0, 8014830 <rcl_clock_add_jump_callback+0xb8>
 80147f2:	68a3      	ldr	r3, [r4, #8]
 80147f4:	6060      	str	r0, [r4, #4]
 80147f6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80147fa:	f10d 0c18 	add.w	ip, sp, #24
 80147fe:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 8014802:	f103 0801 	add.w	r8, r3, #1
 8014806:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 801480a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801480e:	f106 0708 	add.w	r7, r6, #8
 8014812:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8014814:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8014818:	f04f 0e00 	mov.w	lr, #0
 801481c:	e887 0003 	stmia.w	r7, {r0, r1}
 8014820:	6235      	str	r5, [r6, #32]
 8014822:	4670      	mov	r0, lr
 8014824:	f8c4 8008 	str.w	r8, [r4, #8]
 8014828:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801482c:	b002      	add	sp, #8
 801482e:	4770      	bx	lr
 8014830:	f04f 0e0a 	mov.w	lr, #10
 8014834:	e7d0      	b.n	80147d8 <rcl_clock_add_jump_callback+0x60>
 8014836:	2128      	movs	r1, #40	@ 0x28
 8014838:	e7d7      	b.n	80147ea <rcl_clock_add_jump_callback+0x72>
 801483a:	bf00      	nop

0801483c <rcl_clock_remove_jump_callback>:
 801483c:	2800      	cmp	r0, #0
 801483e:	d057      	beq.n	80148f0 <rcl_clock_remove_jump_callback+0xb4>
 8014840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014844:	4605      	mov	r5, r0
 8014846:	3014      	adds	r0, #20
 8014848:	4688      	mov	r8, r1
 801484a:	4692      	mov	sl, r2
 801484c:	f7f8 fcac 	bl	800d1a8 <rcutils_allocator_is_valid>
 8014850:	2800      	cmp	r0, #0
 8014852:	d03b      	beq.n	80148cc <rcl_clock_remove_jump_callback+0x90>
 8014854:	f1b8 0f00 	cmp.w	r8, #0
 8014858:	d038      	beq.n	80148cc <rcl_clock_remove_jump_callback+0x90>
 801485a:	68ae      	ldr	r6, [r5, #8]
 801485c:	b166      	cbz	r6, 8014878 <rcl_clock_remove_jump_callback+0x3c>
 801485e:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8014862:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 8014866:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 801486a:	464c      	mov	r4, r9
 801486c:	6823      	ldr	r3, [r4, #0]
 801486e:	4543      	cmp	r3, r8
 8014870:	d005      	beq.n	801487e <rcl_clock_remove_jump_callback+0x42>
 8014872:	3428      	adds	r4, #40	@ 0x28
 8014874:	42a7      	cmp	r7, r4
 8014876:	d1f9      	bne.n	801486c <rcl_clock_remove_jump_callback+0x30>
 8014878:	2001      	movs	r0, #1
 801487a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801487e:	6a23      	ldr	r3, [r4, #32]
 8014880:	3428      	adds	r4, #40	@ 0x28
 8014882:	42bc      	cmp	r4, r7
 8014884:	d02d      	beq.n	80148e2 <rcl_clock_remove_jump_callback+0xa6>
 8014886:	4553      	cmp	r3, sl
 8014888:	d1f0      	bne.n	801486c <rcl_clock_remove_jump_callback+0x30>
 801488a:	46a6      	mov	lr, r4
 801488c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014890:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8014894:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014898:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801489c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80148a0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80148a4:	3428      	adds	r4, #40	@ 0x28
 80148a6:	42a7      	cmp	r7, r4
 80148a8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80148ac:	d1ed      	bne.n	801488a <rcl_clock_remove_jump_callback+0x4e>
 80148ae:	3e01      	subs	r6, #1
 80148b0:	60ae      	str	r6, [r5, #8]
 80148b2:	b176      	cbz	r6, 80148d2 <rcl_clock_remove_jump_callback+0x96>
 80148b4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80148b8:	69eb      	ldr	r3, [r5, #28]
 80148ba:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 80148bc:	00f1      	lsls	r1, r6, #3
 80148be:	4648      	mov	r0, r9
 80148c0:	4798      	blx	r3
 80148c2:	b1b8      	cbz	r0, 80148f4 <rcl_clock_remove_jump_callback+0xb8>
 80148c4:	6068      	str	r0, [r5, #4]
 80148c6:	2000      	movs	r0, #0
 80148c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80148cc:	200b      	movs	r0, #11
 80148ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80148d2:	4648      	mov	r0, r9
 80148d4:	69ab      	ldr	r3, [r5, #24]
 80148d6:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 80148d8:	4798      	blx	r3
 80148da:	606e      	str	r6, [r5, #4]
 80148dc:	4630      	mov	r0, r6
 80148de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80148e2:	4553      	cmp	r3, sl
 80148e4:	d1c8      	bne.n	8014878 <rcl_clock_remove_jump_callback+0x3c>
 80148e6:	3e01      	subs	r6, #1
 80148e8:	60ae      	str	r6, [r5, #8]
 80148ea:	2e00      	cmp	r6, #0
 80148ec:	d1e2      	bne.n	80148b4 <rcl_clock_remove_jump_callback+0x78>
 80148ee:	e7f0      	b.n	80148d2 <rcl_clock_remove_jump_callback+0x96>
 80148f0:	200b      	movs	r0, #11
 80148f2:	4770      	bx	lr
 80148f4:	200a      	movs	r0, #10
 80148f6:	e7ea      	b.n	80148ce <rcl_clock_remove_jump_callback+0x92>

080148f8 <rcl_get_zero_initialized_wait_set>:
 80148f8:	b510      	push	{r4, lr}
 80148fa:	4c08      	ldr	r4, [pc, #32]	@ (801491c <rcl_get_zero_initialized_wait_set+0x24>)
 80148fc:	4686      	mov	lr, r0
 80148fe:	4684      	mov	ip, r0
 8014900:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014902:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014906:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014908:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801490c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801490e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014912:	6823      	ldr	r3, [r4, #0]
 8014914:	f8cc 3000 	str.w	r3, [ip]
 8014918:	4670      	mov	r0, lr
 801491a:	bd10      	pop	{r4, pc}
 801491c:	0801a44c 	.word	0x0801a44c

08014920 <rcl_wait_set_is_valid>:
 8014920:	b118      	cbz	r0, 801492a <rcl_wait_set_is_valid+0xa>
 8014922:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8014924:	3800      	subs	r0, #0
 8014926:	bf18      	it	ne
 8014928:	2001      	movne	r0, #1
 801492a:	4770      	bx	lr

0801492c <rcl_wait_set_fini>:
 801492c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014930:	b082      	sub	sp, #8
 8014932:	2800      	cmp	r0, #0
 8014934:	f000 8095 	beq.w	8014a62 <rcl_wait_set_fini+0x136>
 8014938:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801493a:	4604      	mov	r4, r0
 801493c:	2e00      	cmp	r6, #0
 801493e:	f000 808c 	beq.w	8014a5a <rcl_wait_set_fini+0x12e>
 8014942:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8014944:	f002 fa5e 	bl	8016e04 <rmw_destroy_wait_set>
 8014948:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801494a:	1e06      	subs	r6, r0, #0
 801494c:	bf18      	it	ne
 801494e:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8014952:	2d00      	cmp	r5, #0
 8014954:	f000 8081 	beq.w	8014a5a <rcl_wait_set_fini+0x12e>
 8014958:	6820      	ldr	r0, [r4, #0]
 801495a:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801495e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014960:	2700      	movs	r7, #0
 8014962:	6067      	str	r7, [r4, #4]
 8014964:	602f      	str	r7, [r5, #0]
 8014966:	b120      	cbz	r0, 8014972 <rcl_wait_set_fini+0x46>
 8014968:	9101      	str	r1, [sp, #4]
 801496a:	47c0      	blx	r8
 801496c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801496e:	9901      	ldr	r1, [sp, #4]
 8014970:	6027      	str	r7, [r4, #0]
 8014972:	68a8      	ldr	r0, [r5, #8]
 8014974:	b120      	cbz	r0, 8014980 <rcl_wait_set_fini+0x54>
 8014976:	47c0      	blx	r8
 8014978:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801497a:	2300      	movs	r3, #0
 801497c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8014980:	68a0      	ldr	r0, [r4, #8]
 8014982:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8014984:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014986:	f04f 0800 	mov.w	r8, #0
 801498a:	f8c4 800c 	str.w	r8, [r4, #12]
 801498e:	f8c5 800c 	str.w	r8, [r5, #12]
 8014992:	b128      	cbz	r0, 80149a0 <rcl_wait_set_fini+0x74>
 8014994:	47b8      	blx	r7
 8014996:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014998:	f8c4 8008 	str.w	r8, [r4, #8]
 801499c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801499e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80149a0:	6968      	ldr	r0, [r5, #20]
 80149a2:	f04f 0800 	mov.w	r8, #0
 80149a6:	f8c5 8010 	str.w	r8, [r5, #16]
 80149aa:	b128      	cbz	r0, 80149b8 <rcl_wait_set_fini+0x8c>
 80149ac:	47b8      	blx	r7
 80149ae:	f8c5 8014 	str.w	r8, [r5, #20]
 80149b2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80149b4:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80149b6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80149b8:	6920      	ldr	r0, [r4, #16]
 80149ba:	f04f 0800 	mov.w	r8, #0
 80149be:	f8c4 8014 	str.w	r8, [r4, #20]
 80149c2:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 80149c6:	b128      	cbz	r0, 80149d4 <rcl_wait_set_fini+0xa8>
 80149c8:	47b8      	blx	r7
 80149ca:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80149cc:	f8c4 8010 	str.w	r8, [r4, #16]
 80149d0:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80149d2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80149d4:	69a0      	ldr	r0, [r4, #24]
 80149d6:	f04f 0800 	mov.w	r8, #0
 80149da:	f8c4 801c 	str.w	r8, [r4, #28]
 80149de:	f8c5 8018 	str.w	r8, [r5, #24]
 80149e2:	b128      	cbz	r0, 80149f0 <rcl_wait_set_fini+0xc4>
 80149e4:	9101      	str	r1, [sp, #4]
 80149e6:	47b8      	blx	r7
 80149e8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80149ea:	9901      	ldr	r1, [sp, #4]
 80149ec:	f8c4 8018 	str.w	r8, [r4, #24]
 80149f0:	6a28      	ldr	r0, [r5, #32]
 80149f2:	b120      	cbz	r0, 80149fe <rcl_wait_set_fini+0xd2>
 80149f4:	47b8      	blx	r7
 80149f6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80149f8:	2300      	movs	r3, #0
 80149fa:	e9c5 3307 	strd	r3, r3, [r5, #28]
 80149fe:	6a20      	ldr	r0, [r4, #32]
 8014a00:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8014a04:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014a06:	2700      	movs	r7, #0
 8014a08:	6267      	str	r7, [r4, #36]	@ 0x24
 8014a0a:	626f      	str	r7, [r5, #36]	@ 0x24
 8014a0c:	b120      	cbz	r0, 8014a18 <rcl_wait_set_fini+0xec>
 8014a0e:	9101      	str	r1, [sp, #4]
 8014a10:	47c0      	blx	r8
 8014a12:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014a14:	9901      	ldr	r1, [sp, #4]
 8014a16:	6227      	str	r7, [r4, #32]
 8014a18:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8014a1a:	b120      	cbz	r0, 8014a26 <rcl_wait_set_fini+0xfa>
 8014a1c:	47c0      	blx	r8
 8014a1e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014a20:	2300      	movs	r3, #0
 8014a22:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8014a26:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8014a28:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8014a2c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014a2e:	2700      	movs	r7, #0
 8014a30:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8014a32:	632f      	str	r7, [r5, #48]	@ 0x30
 8014a34:	b120      	cbz	r0, 8014a40 <rcl_wait_set_fini+0x114>
 8014a36:	9101      	str	r1, [sp, #4]
 8014a38:	47c0      	blx	r8
 8014a3a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014a3c:	9901      	ldr	r1, [sp, #4]
 8014a3e:	62a7      	str	r7, [r4, #40]	@ 0x28
 8014a40:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8014a42:	b120      	cbz	r0, 8014a4e <rcl_wait_set_fini+0x122>
 8014a44:	47c0      	blx	r8
 8014a46:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014a48:	2300      	movs	r3, #0
 8014a4a:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8014a4e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8014a50:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014a52:	4628      	mov	r0, r5
 8014a54:	4798      	blx	r3
 8014a56:	2300      	movs	r3, #0
 8014a58:	6323      	str	r3, [r4, #48]	@ 0x30
 8014a5a:	4630      	mov	r0, r6
 8014a5c:	b002      	add	sp, #8
 8014a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a62:	260b      	movs	r6, #11
 8014a64:	4630      	mov	r0, r6
 8014a66:	b002      	add	sp, #8
 8014a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014a6c <rcl_wait_set_add_subscription>:
 8014a6c:	b318      	cbz	r0, 8014ab6 <rcl_wait_set_add_subscription+0x4a>
 8014a6e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014a70:	b570      	push	{r4, r5, r6, lr}
 8014a72:	4604      	mov	r4, r0
 8014a74:	b30b      	cbz	r3, 8014aba <rcl_wait_set_add_subscription+0x4e>
 8014a76:	b319      	cbz	r1, 8014ac0 <rcl_wait_set_add_subscription+0x54>
 8014a78:	681d      	ldr	r5, [r3, #0]
 8014a7a:	6840      	ldr	r0, [r0, #4]
 8014a7c:	4285      	cmp	r5, r0
 8014a7e:	d217      	bcs.n	8014ab0 <rcl_wait_set_add_subscription+0x44>
 8014a80:	6820      	ldr	r0, [r4, #0]
 8014a82:	1c6e      	adds	r6, r5, #1
 8014a84:	601e      	str	r6, [r3, #0]
 8014a86:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8014a8a:	b102      	cbz	r2, 8014a8e <rcl_wait_set_add_subscription+0x22>
 8014a8c:	6015      	str	r5, [r2, #0]
 8014a8e:	4608      	mov	r0, r1
 8014a90:	f7f7 f91a 	bl	800bcc8 <rcl_subscription_get_rmw_handle>
 8014a94:	b150      	cbz	r0, 8014aac <rcl_wait_set_add_subscription+0x40>
 8014a96:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014a98:	6842      	ldr	r2, [r0, #4]
 8014a9a:	689b      	ldr	r3, [r3, #8]
 8014a9c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014aa0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014aa2:	6853      	ldr	r3, [r2, #4]
 8014aa4:	3301      	adds	r3, #1
 8014aa6:	2000      	movs	r0, #0
 8014aa8:	6053      	str	r3, [r2, #4]
 8014aaa:	bd70      	pop	{r4, r5, r6, pc}
 8014aac:	2001      	movs	r0, #1
 8014aae:	bd70      	pop	{r4, r5, r6, pc}
 8014ab0:	f240 3086 	movw	r0, #902	@ 0x386
 8014ab4:	bd70      	pop	{r4, r5, r6, pc}
 8014ab6:	200b      	movs	r0, #11
 8014ab8:	4770      	bx	lr
 8014aba:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014abe:	bd70      	pop	{r4, r5, r6, pc}
 8014ac0:	200b      	movs	r0, #11
 8014ac2:	bd70      	pop	{r4, r5, r6, pc}

08014ac4 <rcl_wait_set_clear>:
 8014ac4:	2800      	cmp	r0, #0
 8014ac6:	d073      	beq.n	8014bb0 <rcl_wait_set_clear+0xec>
 8014ac8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014aca:	b510      	push	{r4, lr}
 8014acc:	4604      	mov	r4, r0
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d070      	beq.n	8014bb4 <rcl_wait_set_clear+0xf0>
 8014ad2:	6800      	ldr	r0, [r0, #0]
 8014ad4:	b138      	cbz	r0, 8014ae6 <rcl_wait_set_clear+0x22>
 8014ad6:	6862      	ldr	r2, [r4, #4]
 8014ad8:	2100      	movs	r1, #0
 8014ada:	0092      	lsls	r2, r2, #2
 8014adc:	f003 ff46 	bl	801896c <memset>
 8014ae0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014ae2:	2200      	movs	r2, #0
 8014ae4:	601a      	str	r2, [r3, #0]
 8014ae6:	68a0      	ldr	r0, [r4, #8]
 8014ae8:	b138      	cbz	r0, 8014afa <rcl_wait_set_clear+0x36>
 8014aea:	68e2      	ldr	r2, [r4, #12]
 8014aec:	2100      	movs	r1, #0
 8014aee:	0092      	lsls	r2, r2, #2
 8014af0:	f003 ff3c 	bl	801896c <memset>
 8014af4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014af6:	2200      	movs	r2, #0
 8014af8:	60da      	str	r2, [r3, #12]
 8014afa:	69a0      	ldr	r0, [r4, #24]
 8014afc:	b138      	cbz	r0, 8014b0e <rcl_wait_set_clear+0x4a>
 8014afe:	69e2      	ldr	r2, [r4, #28]
 8014b00:	2100      	movs	r1, #0
 8014b02:	0092      	lsls	r2, r2, #2
 8014b04:	f003 ff32 	bl	801896c <memset>
 8014b08:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014b0a:	2200      	movs	r2, #0
 8014b0c:	619a      	str	r2, [r3, #24]
 8014b0e:	6a20      	ldr	r0, [r4, #32]
 8014b10:	b138      	cbz	r0, 8014b22 <rcl_wait_set_clear+0x5e>
 8014b12:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8014b14:	2100      	movs	r1, #0
 8014b16:	0092      	lsls	r2, r2, #2
 8014b18:	f003 ff28 	bl	801896c <memset>
 8014b1c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014b1e:	2200      	movs	r2, #0
 8014b20:	625a      	str	r2, [r3, #36]	@ 0x24
 8014b22:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8014b24:	b138      	cbz	r0, 8014b36 <rcl_wait_set_clear+0x72>
 8014b26:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8014b28:	2100      	movs	r1, #0
 8014b2a:	0092      	lsls	r2, r2, #2
 8014b2c:	f003 ff1e 	bl	801896c <memset>
 8014b30:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014b32:	2200      	movs	r2, #0
 8014b34:	631a      	str	r2, [r3, #48]	@ 0x30
 8014b36:	6920      	ldr	r0, [r4, #16]
 8014b38:	b138      	cbz	r0, 8014b4a <rcl_wait_set_clear+0x86>
 8014b3a:	6962      	ldr	r2, [r4, #20]
 8014b3c:	2100      	movs	r1, #0
 8014b3e:	0092      	lsls	r2, r2, #2
 8014b40:	f003 ff14 	bl	801896c <memset>
 8014b44:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014b46:	2200      	movs	r2, #0
 8014b48:	641a      	str	r2, [r3, #64]	@ 0x40
 8014b4a:	6898      	ldr	r0, [r3, #8]
 8014b4c:	b138      	cbz	r0, 8014b5e <rcl_wait_set_clear+0x9a>
 8014b4e:	685a      	ldr	r2, [r3, #4]
 8014b50:	2100      	movs	r1, #0
 8014b52:	0092      	lsls	r2, r2, #2
 8014b54:	f003 ff0a 	bl	801896c <memset>
 8014b58:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014b5a:	2200      	movs	r2, #0
 8014b5c:	605a      	str	r2, [r3, #4]
 8014b5e:	6958      	ldr	r0, [r3, #20]
 8014b60:	b138      	cbz	r0, 8014b72 <rcl_wait_set_clear+0xae>
 8014b62:	691a      	ldr	r2, [r3, #16]
 8014b64:	2100      	movs	r1, #0
 8014b66:	0092      	lsls	r2, r2, #2
 8014b68:	f003 ff00 	bl	801896c <memset>
 8014b6c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014b6e:	2200      	movs	r2, #0
 8014b70:	611a      	str	r2, [r3, #16]
 8014b72:	6a18      	ldr	r0, [r3, #32]
 8014b74:	b138      	cbz	r0, 8014b86 <rcl_wait_set_clear+0xc2>
 8014b76:	69da      	ldr	r2, [r3, #28]
 8014b78:	2100      	movs	r1, #0
 8014b7a:	0092      	lsls	r2, r2, #2
 8014b7c:	f003 fef6 	bl	801896c <memset>
 8014b80:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014b82:	2200      	movs	r2, #0
 8014b84:	61da      	str	r2, [r3, #28]
 8014b86:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8014b88:	b138      	cbz	r0, 8014b9a <rcl_wait_set_clear+0xd6>
 8014b8a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014b8c:	2100      	movs	r1, #0
 8014b8e:	0092      	lsls	r2, r2, #2
 8014b90:	f003 feec 	bl	801896c <memset>
 8014b94:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014b96:	2200      	movs	r2, #0
 8014b98:	629a      	str	r2, [r3, #40]	@ 0x28
 8014b9a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8014b9c:	b138      	cbz	r0, 8014bae <rcl_wait_set_clear+0xea>
 8014b9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014ba0:	2100      	movs	r1, #0
 8014ba2:	0092      	lsls	r2, r2, #2
 8014ba4:	f003 fee2 	bl	801896c <memset>
 8014ba8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014baa:	2000      	movs	r0, #0
 8014bac:	6358      	str	r0, [r3, #52]	@ 0x34
 8014bae:	bd10      	pop	{r4, pc}
 8014bb0:	200b      	movs	r0, #11
 8014bb2:	4770      	bx	lr
 8014bb4:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014bb8:	bd10      	pop	{r4, pc}
 8014bba:	bf00      	nop

08014bbc <rcl_wait_set_resize>:
 8014bbc:	2800      	cmp	r0, #0
 8014bbe:	f000 8185 	beq.w	8014ecc <rcl_wait_set_resize+0x310>
 8014bc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bc6:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8014bc8:	b083      	sub	sp, #12
 8014bca:	4605      	mov	r5, r0
 8014bcc:	2c00      	cmp	r4, #0
 8014bce:	f000 817f 	beq.w	8014ed0 <rcl_wait_set_resize+0x314>
 8014bd2:	f04f 0900 	mov.w	r9, #0
 8014bd6:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8014bda:	461f      	mov	r7, r3
 8014bdc:	4688      	mov	r8, r1
 8014bde:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8014be2:	4616      	mov	r6, r2
 8014be4:	f8c0 9004 	str.w	r9, [r0, #4]
 8014be8:	f8c4 9000 	str.w	r9, [r4]
 8014bec:	2900      	cmp	r1, #0
 8014bee:	f000 80bd 	beq.w	8014d6c <rcl_wait_set_resize+0x1b0>
 8014bf2:	008c      	lsls	r4, r1, #2
 8014bf4:	6800      	ldr	r0, [r0, #0]
 8014bf6:	9301      	str	r3, [sp, #4]
 8014bf8:	4652      	mov	r2, sl
 8014bfa:	4621      	mov	r1, r4
 8014bfc:	4798      	blx	r3
 8014bfe:	9b01      	ldr	r3, [sp, #4]
 8014c00:	6028      	str	r0, [r5, #0]
 8014c02:	2800      	cmp	r0, #0
 8014c04:	f000 80cb 	beq.w	8014d9e <rcl_wait_set_resize+0x1e2>
 8014c08:	4622      	mov	r2, r4
 8014c0a:	4649      	mov	r1, r9
 8014c0c:	9301      	str	r3, [sp, #4]
 8014c0e:	f003 fead 	bl	801896c <memset>
 8014c12:	f8c5 8004 	str.w	r8, [r5, #4]
 8014c16:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8014c1a:	9b01      	ldr	r3, [sp, #4]
 8014c1c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8014c20:	f8c8 9004 	str.w	r9, [r8, #4]
 8014c24:	4652      	mov	r2, sl
 8014c26:	4621      	mov	r1, r4
 8014c28:	4798      	blx	r3
 8014c2a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014c2c:	f8c8 0008 	str.w	r0, [r8, #8]
 8014c30:	689b      	ldr	r3, [r3, #8]
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	f000 80ac 	beq.w	8014d90 <rcl_wait_set_resize+0x1d4>
 8014c38:	4622      	mov	r2, r4
 8014c3a:	4649      	mov	r1, r9
 8014c3c:	4618      	mov	r0, r3
 8014c3e:	f003 fe95 	bl	801896c <memset>
 8014c42:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014c44:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014c48:	f04f 0800 	mov.w	r8, #0
 8014c4c:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8014c50:	f8c5 800c 	str.w	r8, [r5, #12]
 8014c54:	f8c4 800c 	str.w	r8, [r4, #12]
 8014c58:	2e00      	cmp	r6, #0
 8014c5a:	f040 80a4 	bne.w	8014da6 <rcl_wait_set_resize+0x1ea>
 8014c5e:	68a8      	ldr	r0, [r5, #8]
 8014c60:	b128      	cbz	r0, 8014c6e <rcl_wait_set_resize+0xb2>
 8014c62:	4649      	mov	r1, r9
 8014c64:	4790      	blx	r2
 8014c66:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014c68:	60ae      	str	r6, [r5, #8]
 8014c6a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014c6e:	f04f 0800 	mov.w	r8, #0
 8014c72:	19f6      	adds	r6, r6, r7
 8014c74:	f8c4 8010 	str.w	r8, [r4, #16]
 8014c78:	f040 80ac 	bne.w	8014dd4 <rcl_wait_set_resize+0x218>
 8014c7c:	6960      	ldr	r0, [r4, #20]
 8014c7e:	b130      	cbz	r0, 8014c8e <rcl_wait_set_resize+0xd2>
 8014c80:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8014c82:	4649      	mov	r1, r9
 8014c84:	4798      	blx	r3
 8014c86:	6166      	str	r6, [r4, #20]
 8014c88:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014c8a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014c8e:	2600      	movs	r6, #0
 8014c90:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8014c94:	616e      	str	r6, [r5, #20]
 8014c96:	6426      	str	r6, [r4, #64]	@ 0x40
 8014c98:	2f00      	cmp	r7, #0
 8014c9a:	f040 80ad 	bne.w	8014df8 <rcl_wait_set_resize+0x23c>
 8014c9e:	6928      	ldr	r0, [r5, #16]
 8014ca0:	b138      	cbz	r0, 8014cb2 <rcl_wait_set_resize+0xf6>
 8014ca2:	4649      	mov	r1, r9
 8014ca4:	47d0      	blx	sl
 8014ca6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014ca8:	612f      	str	r7, [r5, #16]
 8014caa:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8014cae:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014cb2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014cb4:	2600      	movs	r6, #0
 8014cb6:	61ee      	str	r6, [r5, #28]
 8014cb8:	61a6      	str	r6, [r4, #24]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	f040 80af 	bne.w	8014e1e <rcl_wait_set_resize+0x262>
 8014cc0:	69a8      	ldr	r0, [r5, #24]
 8014cc2:	b120      	cbz	r0, 8014cce <rcl_wait_set_resize+0x112>
 8014cc4:	4649      	mov	r1, r9
 8014cc6:	47d0      	blx	sl
 8014cc8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014cca:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014ccc:	61ab      	str	r3, [r5, #24]
 8014cce:	6a20      	ldr	r0, [r4, #32]
 8014cd0:	b128      	cbz	r0, 8014cde <rcl_wait_set_resize+0x122>
 8014cd2:	4649      	mov	r1, r9
 8014cd4:	47d0      	blx	sl
 8014cd6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014cd8:	2300      	movs	r3, #0
 8014cda:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8014cde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014ce0:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8014ce2:	2600      	movs	r6, #0
 8014ce4:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8014ce8:	626e      	str	r6, [r5, #36]	@ 0x24
 8014cea:	6266      	str	r6, [r4, #36]	@ 0x24
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	f000 80b6 	beq.w	8014e5e <rcl_wait_set_resize+0x2a2>
 8014cf2:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8014cf6:	6a28      	ldr	r0, [r5, #32]
 8014cf8:	463a      	mov	r2, r7
 8014cfa:	4651      	mov	r1, sl
 8014cfc:	47c8      	blx	r9
 8014cfe:	6228      	str	r0, [r5, #32]
 8014d00:	2800      	cmp	r0, #0
 8014d02:	d04c      	beq.n	8014d9e <rcl_wait_set_resize+0x1e2>
 8014d04:	4652      	mov	r2, sl
 8014d06:	4631      	mov	r1, r6
 8014d08:	f003 fe30 	bl	801896c <memset>
 8014d0c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014d0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014d10:	626b      	str	r3, [r5, #36]	@ 0x24
 8014d12:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8014d14:	62a6      	str	r6, [r4, #40]	@ 0x28
 8014d16:	463a      	mov	r2, r7
 8014d18:	4651      	mov	r1, sl
 8014d1a:	47c8      	blx	r9
 8014d1c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014d1e:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8014d20:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8014d22:	2c00      	cmp	r4, #0
 8014d24:	f000 80f0 	beq.w	8014f08 <rcl_wait_set_resize+0x34c>
 8014d28:	4620      	mov	r0, r4
 8014d2a:	4652      	mov	r2, sl
 8014d2c:	4631      	mov	r1, r6
 8014d2e:	f003 fe1d 	bl	801896c <memset>
 8014d32:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014d34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014d36:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8014d38:	2600      	movs	r6, #0
 8014d3a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8014d3e:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8014d40:	6326      	str	r6, [r4, #48]	@ 0x30
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	f040 809d 	bne.w	8014e82 <rcl_wait_set_resize+0x2c6>
 8014d48:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8014d4a:	b120      	cbz	r0, 8014d56 <rcl_wait_set_resize+0x19a>
 8014d4c:	4639      	mov	r1, r7
 8014d4e:	47c0      	blx	r8
 8014d50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014d52:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014d54:	62ab      	str	r3, [r5, #40]	@ 0x28
 8014d56:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014d58:	b310      	cbz	r0, 8014da0 <rcl_wait_set_resize+0x1e4>
 8014d5a:	4639      	mov	r1, r7
 8014d5c:	47c0      	blx	r8
 8014d5e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014d60:	2000      	movs	r0, #0
 8014d62:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8014d66:	b003      	add	sp, #12
 8014d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d6c:	6800      	ldr	r0, [r0, #0]
 8014d6e:	b120      	cbz	r0, 8014d7a <rcl_wait_set_resize+0x1be>
 8014d70:	4651      	mov	r1, sl
 8014d72:	47d8      	blx	fp
 8014d74:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014d76:	f8c5 8000 	str.w	r8, [r5]
 8014d7a:	68a0      	ldr	r0, [r4, #8]
 8014d7c:	2800      	cmp	r0, #0
 8014d7e:	f43f af61 	beq.w	8014c44 <rcl_wait_set_resize+0x88>
 8014d82:	4651      	mov	r1, sl
 8014d84:	47d8      	blx	fp
 8014d86:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014d88:	2300      	movs	r3, #0
 8014d8a:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8014d8e:	e759      	b.n	8014c44 <rcl_wait_set_resize+0x88>
 8014d90:	6828      	ldr	r0, [r5, #0]
 8014d92:	9301      	str	r3, [sp, #4]
 8014d94:	4651      	mov	r1, sl
 8014d96:	47d8      	blx	fp
 8014d98:	9b01      	ldr	r3, [sp, #4]
 8014d9a:	e9c5 3300 	strd	r3, r3, [r5]
 8014d9e:	200a      	movs	r0, #10
 8014da0:	b003      	add	sp, #12
 8014da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014da6:	00b4      	lsls	r4, r6, #2
 8014da8:	68a8      	ldr	r0, [r5, #8]
 8014daa:	464a      	mov	r2, r9
 8014dac:	4621      	mov	r1, r4
 8014dae:	4798      	blx	r3
 8014db0:	60a8      	str	r0, [r5, #8]
 8014db2:	2800      	cmp	r0, #0
 8014db4:	d0f3      	beq.n	8014d9e <rcl_wait_set_resize+0x1e2>
 8014db6:	4622      	mov	r2, r4
 8014db8:	4641      	mov	r1, r8
 8014dba:	f003 fdd7 	bl	801896c <memset>
 8014dbe:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014dc0:	60ee      	str	r6, [r5, #12]
 8014dc2:	f04f 0800 	mov.w	r8, #0
 8014dc6:	19f6      	adds	r6, r6, r7
 8014dc8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014dcc:	f8c4 8010 	str.w	r8, [r4, #16]
 8014dd0:	f43f af54 	beq.w	8014c7c <rcl_wait_set_resize+0xc0>
 8014dd4:	00b6      	lsls	r6, r6, #2
 8014dd6:	464a      	mov	r2, r9
 8014dd8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8014dda:	6960      	ldr	r0, [r4, #20]
 8014ddc:	4631      	mov	r1, r6
 8014dde:	4798      	blx	r3
 8014de0:	4681      	mov	r9, r0
 8014de2:	6160      	str	r0, [r4, #20]
 8014de4:	2800      	cmp	r0, #0
 8014de6:	d076      	beq.n	8014ed6 <rcl_wait_set_resize+0x31a>
 8014de8:	4632      	mov	r2, r6
 8014dea:	4641      	mov	r1, r8
 8014dec:	f003 fdbe 	bl	801896c <memset>
 8014df0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014df2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014df6:	e74a      	b.n	8014c8e <rcl_wait_set_resize+0xd2>
 8014df8:	00bc      	lsls	r4, r7, #2
 8014dfa:	6928      	ldr	r0, [r5, #16]
 8014dfc:	464a      	mov	r2, r9
 8014dfe:	4621      	mov	r1, r4
 8014e00:	47c0      	blx	r8
 8014e02:	6128      	str	r0, [r5, #16]
 8014e04:	2800      	cmp	r0, #0
 8014e06:	d0ca      	beq.n	8014d9e <rcl_wait_set_resize+0x1e2>
 8014e08:	4622      	mov	r2, r4
 8014e0a:	4631      	mov	r1, r6
 8014e0c:	f003 fdae 	bl	801896c <memset>
 8014e10:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014e12:	616f      	str	r7, [r5, #20]
 8014e14:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8014e18:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014e1c:	e749      	b.n	8014cb2 <rcl_wait_set_resize+0xf6>
 8014e1e:	009c      	lsls	r4, r3, #2
 8014e20:	69a8      	ldr	r0, [r5, #24]
 8014e22:	464a      	mov	r2, r9
 8014e24:	4621      	mov	r1, r4
 8014e26:	47c0      	blx	r8
 8014e28:	61a8      	str	r0, [r5, #24]
 8014e2a:	2800      	cmp	r0, #0
 8014e2c:	d0b7      	beq.n	8014d9e <rcl_wait_set_resize+0x1e2>
 8014e2e:	4622      	mov	r2, r4
 8014e30:	4631      	mov	r1, r6
 8014e32:	f003 fd9b 	bl	801896c <memset>
 8014e36:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8014e38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014e3a:	61eb      	str	r3, [r5, #28]
 8014e3c:	6a38      	ldr	r0, [r7, #32]
 8014e3e:	61fe      	str	r6, [r7, #28]
 8014e40:	464a      	mov	r2, r9
 8014e42:	4621      	mov	r1, r4
 8014e44:	47c0      	blx	r8
 8014e46:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014e48:	6238      	str	r0, [r7, #32]
 8014e4a:	6a1f      	ldr	r7, [r3, #32]
 8014e4c:	2f00      	cmp	r7, #0
 8014e4e:	d054      	beq.n	8014efa <rcl_wait_set_resize+0x33e>
 8014e50:	4622      	mov	r2, r4
 8014e52:	4631      	mov	r1, r6
 8014e54:	4638      	mov	r0, r7
 8014e56:	f003 fd89 	bl	801896c <memset>
 8014e5a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014e5c:	e73f      	b.n	8014cde <rcl_wait_set_resize+0x122>
 8014e5e:	6a28      	ldr	r0, [r5, #32]
 8014e60:	b120      	cbz	r0, 8014e6c <rcl_wait_set_resize+0x2b0>
 8014e62:	4639      	mov	r1, r7
 8014e64:	47c0      	blx	r8
 8014e66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014e68:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014e6a:	622b      	str	r3, [r5, #32]
 8014e6c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8014e6e:	2800      	cmp	r0, #0
 8014e70:	f43f af60 	beq.w	8014d34 <rcl_wait_set_resize+0x178>
 8014e74:	4639      	mov	r1, r7
 8014e76:	47c0      	blx	r8
 8014e78:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014e7a:	2300      	movs	r3, #0
 8014e7c:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8014e80:	e758      	b.n	8014d34 <rcl_wait_set_resize+0x178>
 8014e82:	009c      	lsls	r4, r3, #2
 8014e84:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8014e86:	463a      	mov	r2, r7
 8014e88:	4621      	mov	r1, r4
 8014e8a:	47c8      	blx	r9
 8014e8c:	62a8      	str	r0, [r5, #40]	@ 0x28
 8014e8e:	2800      	cmp	r0, #0
 8014e90:	d085      	beq.n	8014d9e <rcl_wait_set_resize+0x1e2>
 8014e92:	4622      	mov	r2, r4
 8014e94:	4631      	mov	r1, r6
 8014e96:	f003 fd69 	bl	801896c <memset>
 8014e9a:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8014e9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014ea0:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8014ea2:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8014ea6:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8014eaa:	463a      	mov	r2, r7
 8014eac:	4621      	mov	r1, r4
 8014eae:	47c8      	blx	r9
 8014eb0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014eb2:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8014eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014eb8:	b36b      	cbz	r3, 8014f16 <rcl_wait_set_resize+0x35a>
 8014eba:	4622      	mov	r2, r4
 8014ebc:	4631      	mov	r1, r6
 8014ebe:	4618      	mov	r0, r3
 8014ec0:	f003 fd54 	bl	801896c <memset>
 8014ec4:	4630      	mov	r0, r6
 8014ec6:	b003      	add	sp, #12
 8014ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ecc:	200b      	movs	r0, #11
 8014ece:	4770      	bx	lr
 8014ed0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014ed4:	e764      	b.n	8014da0 <rcl_wait_set_resize+0x1e4>
 8014ed6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014ed8:	68a8      	ldr	r0, [r5, #8]
 8014eda:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8014edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014ede:	4798      	blx	r3
 8014ee0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014ee2:	6928      	ldr	r0, [r5, #16]
 8014ee4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014ee6:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8014ee8:	f8c5 900c 	str.w	r9, [r5, #12]
 8014eec:	f8c5 9008 	str.w	r9, [r5, #8]
 8014ef0:	4790      	blx	r2
 8014ef2:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8014ef6:	200a      	movs	r0, #10
 8014ef8:	e752      	b.n	8014da0 <rcl_wait_set_resize+0x1e4>
 8014efa:	69a8      	ldr	r0, [r5, #24]
 8014efc:	4649      	mov	r1, r9
 8014efe:	47d0      	blx	sl
 8014f00:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8014f04:	200a      	movs	r0, #10
 8014f06:	e74b      	b.n	8014da0 <rcl_wait_set_resize+0x1e4>
 8014f08:	6a28      	ldr	r0, [r5, #32]
 8014f0a:	4639      	mov	r1, r7
 8014f0c:	47c0      	blx	r8
 8014f0e:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8014f12:	200a      	movs	r0, #10
 8014f14:	e744      	b.n	8014da0 <rcl_wait_set_resize+0x1e4>
 8014f16:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8014f18:	9301      	str	r3, [sp, #4]
 8014f1a:	4639      	mov	r1, r7
 8014f1c:	47c0      	blx	r8
 8014f1e:	9b01      	ldr	r3, [sp, #4]
 8014f20:	200a      	movs	r0, #10
 8014f22:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8014f26:	e73b      	b.n	8014da0 <rcl_wait_set_resize+0x1e4>

08014f28 <rcl_wait_set_init>:
 8014f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f2c:	b084      	sub	sp, #16
 8014f2e:	4604      	mov	r4, r0
 8014f30:	a810      	add	r0, sp, #64	@ 0x40
 8014f32:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8014f36:	460f      	mov	r7, r1
 8014f38:	4690      	mov	r8, r2
 8014f3a:	4699      	mov	r9, r3
 8014f3c:	f7f8 f934 	bl	800d1a8 <rcutils_allocator_is_valid>
 8014f40:	2800      	cmp	r0, #0
 8014f42:	d06b      	beq.n	801501c <rcl_wait_set_init+0xf4>
 8014f44:	2c00      	cmp	r4, #0
 8014f46:	d069      	beq.n	801501c <rcl_wait_set_init+0xf4>
 8014f48:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014f4a:	b125      	cbz	r5, 8014f56 <rcl_wait_set_init+0x2e>
 8014f4c:	2564      	movs	r5, #100	@ 0x64
 8014f4e:	4628      	mov	r0, r5
 8014f50:	b004      	add	sp, #16
 8014f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f56:	f1ba 0f00 	cmp.w	sl, #0
 8014f5a:	d05f      	beq.n	801501c <rcl_wait_set_init+0xf4>
 8014f5c:	4650      	mov	r0, sl
 8014f5e:	f7f6 f88d 	bl	800b07c <rcl_context_is_valid>
 8014f62:	2800      	cmp	r0, #0
 8014f64:	d067      	beq.n	8015036 <rcl_wait_set_init+0x10e>
 8014f66:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014f68:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8014f6a:	205c      	movs	r0, #92	@ 0x5c
 8014f6c:	4798      	blx	r3
 8014f6e:	6320      	str	r0, [r4, #48]	@ 0x30
 8014f70:	2800      	cmp	r0, #0
 8014f72:	d062      	beq.n	801503a <rcl_wait_set_init+0x112>
 8014f74:	4629      	mov	r1, r5
 8014f76:	225c      	movs	r2, #92	@ 0x5c
 8014f78:	f003 fcf8 	bl	801896c <memset>
 8014f7c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8014f80:	eb03 0e02 	add.w	lr, r3, r2
 8014f84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014f86:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8014f88:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8014f8c:	449e      	add	lr, r3
 8014f8e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014f92:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8014f96:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8014f9a:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8014f9e:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8014fa2:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8014fa6:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8014faa:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8014fae:	f8da a000 	ldr.w	sl, [sl]
 8014fb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014fb4:	44c6      	add	lr, r8
 8014fb6:	f8dc 3000 	ldr.w	r3, [ip]
 8014fba:	602b      	str	r3, [r5, #0]
 8014fbc:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8014fc0:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8014fc4:	f001 ff14 	bl	8016df0 <rmw_create_wait_set>
 8014fc8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014fca:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8014fcc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8014fce:	b350      	cbz	r0, 8015026 <rcl_wait_set_init+0xfe>
 8014fd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014fd2:	9302      	str	r3, [sp, #8]
 8014fd4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014fd6:	9301      	str	r3, [sp, #4]
 8014fd8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014fda:	9300      	str	r3, [sp, #0]
 8014fdc:	4642      	mov	r2, r8
 8014fde:	464b      	mov	r3, r9
 8014fe0:	4639      	mov	r1, r7
 8014fe2:	4620      	mov	r0, r4
 8014fe4:	f7ff fdea 	bl	8014bbc <rcl_wait_set_resize>
 8014fe8:	4605      	mov	r5, r0
 8014fea:	2800      	cmp	r0, #0
 8014fec:	d0af      	beq.n	8014f4e <rcl_wait_set_init+0x26>
 8014fee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014ff0:	bb2b      	cbnz	r3, 801503e <rcl_wait_set_init+0x116>
 8014ff2:	2600      	movs	r6, #0
 8014ff4:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8014ff8:	9600      	str	r6, [sp, #0]
 8014ffa:	4633      	mov	r3, r6
 8014ffc:	4632      	mov	r2, r6
 8014ffe:	4631      	mov	r1, r6
 8015000:	4620      	mov	r0, r4
 8015002:	f7ff fddb 	bl	8014bbc <rcl_wait_set_resize>
 8015006:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8015008:	2800      	cmp	r0, #0
 801500a:	d0a0      	beq.n	8014f4e <rcl_wait_set_init+0x26>
 801500c:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801500e:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8015010:	4798      	blx	r3
 8015012:	4628      	mov	r0, r5
 8015014:	6326      	str	r6, [r4, #48]	@ 0x30
 8015016:	b004      	add	sp, #16
 8015018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801501c:	250b      	movs	r5, #11
 801501e:	4628      	mov	r0, r5
 8015020:	b004      	add	sp, #16
 8015022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015026:	2501      	movs	r5, #1
 8015028:	f001 feec 	bl	8016e04 <rmw_destroy_wait_set>
 801502c:	2800      	cmp	r0, #0
 801502e:	bf18      	it	ne
 8015030:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8015034:	e7dd      	b.n	8014ff2 <rcl_wait_set_init+0xca>
 8015036:	2565      	movs	r5, #101	@ 0x65
 8015038:	e789      	b.n	8014f4e <rcl_wait_set_init+0x26>
 801503a:	250a      	movs	r5, #10
 801503c:	e787      	b.n	8014f4e <rcl_wait_set_init+0x26>
 801503e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8015040:	e7f2      	b.n	8015028 <rcl_wait_set_init+0x100>
 8015042:	bf00      	nop

08015044 <rcl_wait_set_add_guard_condition>:
 8015044:	b318      	cbz	r0, 801508e <rcl_wait_set_add_guard_condition+0x4a>
 8015046:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015048:	b570      	push	{r4, r5, r6, lr}
 801504a:	4604      	mov	r4, r0
 801504c:	b30b      	cbz	r3, 8015092 <rcl_wait_set_add_guard_condition+0x4e>
 801504e:	b319      	cbz	r1, 8015098 <rcl_wait_set_add_guard_condition+0x54>
 8015050:	68dd      	ldr	r5, [r3, #12]
 8015052:	68c0      	ldr	r0, [r0, #12]
 8015054:	4285      	cmp	r5, r0
 8015056:	d217      	bcs.n	8015088 <rcl_wait_set_add_guard_condition+0x44>
 8015058:	68a0      	ldr	r0, [r4, #8]
 801505a:	1c6e      	adds	r6, r5, #1
 801505c:	60de      	str	r6, [r3, #12]
 801505e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015062:	b102      	cbz	r2, 8015066 <rcl_wait_set_add_guard_condition+0x22>
 8015064:	6015      	str	r5, [r2, #0]
 8015066:	4608      	mov	r0, r1
 8015068:	f7ff f874 	bl	8014154 <rcl_guard_condition_get_rmw_handle>
 801506c:	b150      	cbz	r0, 8015084 <rcl_wait_set_add_guard_condition+0x40>
 801506e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015070:	6842      	ldr	r2, [r0, #4]
 8015072:	695b      	ldr	r3, [r3, #20]
 8015074:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015078:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801507a:	6913      	ldr	r3, [r2, #16]
 801507c:	3301      	adds	r3, #1
 801507e:	2000      	movs	r0, #0
 8015080:	6113      	str	r3, [r2, #16]
 8015082:	bd70      	pop	{r4, r5, r6, pc}
 8015084:	2001      	movs	r0, #1
 8015086:	bd70      	pop	{r4, r5, r6, pc}
 8015088:	f240 3086 	movw	r0, #902	@ 0x386
 801508c:	bd70      	pop	{r4, r5, r6, pc}
 801508e:	200b      	movs	r0, #11
 8015090:	4770      	bx	lr
 8015092:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015096:	bd70      	pop	{r4, r5, r6, pc}
 8015098:	200b      	movs	r0, #11
 801509a:	bd70      	pop	{r4, r5, r6, pc}

0801509c <rcl_wait_set_add_timer>:
 801509c:	b328      	cbz	r0, 80150ea <rcl_wait_set_add_timer+0x4e>
 801509e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80150a0:	b570      	push	{r4, r5, r6, lr}
 80150a2:	4604      	mov	r4, r0
 80150a4:	b31b      	cbz	r3, 80150ee <rcl_wait_set_add_timer+0x52>
 80150a6:	b329      	cbz	r1, 80150f4 <rcl_wait_set_add_timer+0x58>
 80150a8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80150aa:	6965      	ldr	r5, [r4, #20]
 80150ac:	42a8      	cmp	r0, r5
 80150ae:	d219      	bcs.n	80150e4 <rcl_wait_set_add_timer+0x48>
 80150b0:	6925      	ldr	r5, [r4, #16]
 80150b2:	1c46      	adds	r6, r0, #1
 80150b4:	641e      	str	r6, [r3, #64]	@ 0x40
 80150b6:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 80150ba:	b102      	cbz	r2, 80150be <rcl_wait_set_add_timer+0x22>
 80150bc:	6010      	str	r0, [r2, #0]
 80150be:	4608      	mov	r0, r1
 80150c0:	f7f7 f882 	bl	800c1c8 <rcl_timer_get_guard_condition>
 80150c4:	b168      	cbz	r0, 80150e2 <rcl_wait_set_add_timer+0x46>
 80150c6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80150c8:	68e3      	ldr	r3, [r4, #12]
 80150ca:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 80150cc:	3b01      	subs	r3, #1
 80150ce:	441d      	add	r5, r3
 80150d0:	f7ff f840 	bl	8014154 <rcl_guard_condition_get_rmw_handle>
 80150d4:	b180      	cbz	r0, 80150f8 <rcl_wait_set_add_timer+0x5c>
 80150d6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80150d8:	6842      	ldr	r2, [r0, #4]
 80150da:	695b      	ldr	r3, [r3, #20]
 80150dc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80150e0:	2000      	movs	r0, #0
 80150e2:	bd70      	pop	{r4, r5, r6, pc}
 80150e4:	f240 3086 	movw	r0, #902	@ 0x386
 80150e8:	bd70      	pop	{r4, r5, r6, pc}
 80150ea:	200b      	movs	r0, #11
 80150ec:	4770      	bx	lr
 80150ee:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80150f2:	bd70      	pop	{r4, r5, r6, pc}
 80150f4:	200b      	movs	r0, #11
 80150f6:	bd70      	pop	{r4, r5, r6, pc}
 80150f8:	2001      	movs	r0, #1
 80150fa:	bd70      	pop	{r4, r5, r6, pc}

080150fc <rcl_wait_set_add_client>:
 80150fc:	b318      	cbz	r0, 8015146 <rcl_wait_set_add_client+0x4a>
 80150fe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015100:	b570      	push	{r4, r5, r6, lr}
 8015102:	4604      	mov	r4, r0
 8015104:	b30b      	cbz	r3, 801514a <rcl_wait_set_add_client+0x4e>
 8015106:	b319      	cbz	r1, 8015150 <rcl_wait_set_add_client+0x54>
 8015108:	699d      	ldr	r5, [r3, #24]
 801510a:	69c0      	ldr	r0, [r0, #28]
 801510c:	4285      	cmp	r5, r0
 801510e:	d217      	bcs.n	8015140 <rcl_wait_set_add_client+0x44>
 8015110:	69a0      	ldr	r0, [r4, #24]
 8015112:	1c6e      	adds	r6, r5, #1
 8015114:	619e      	str	r6, [r3, #24]
 8015116:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801511a:	b102      	cbz	r2, 801511e <rcl_wait_set_add_client+0x22>
 801511c:	6015      	str	r5, [r2, #0]
 801511e:	4608      	mov	r0, r1
 8015120:	f7fe fe6e 	bl	8013e00 <rcl_client_get_rmw_handle>
 8015124:	b150      	cbz	r0, 801513c <rcl_wait_set_add_client+0x40>
 8015126:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015128:	6842      	ldr	r2, [r0, #4]
 801512a:	6a1b      	ldr	r3, [r3, #32]
 801512c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015130:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015132:	69d3      	ldr	r3, [r2, #28]
 8015134:	3301      	adds	r3, #1
 8015136:	2000      	movs	r0, #0
 8015138:	61d3      	str	r3, [r2, #28]
 801513a:	bd70      	pop	{r4, r5, r6, pc}
 801513c:	2001      	movs	r0, #1
 801513e:	bd70      	pop	{r4, r5, r6, pc}
 8015140:	f240 3086 	movw	r0, #902	@ 0x386
 8015144:	bd70      	pop	{r4, r5, r6, pc}
 8015146:	200b      	movs	r0, #11
 8015148:	4770      	bx	lr
 801514a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801514e:	bd70      	pop	{r4, r5, r6, pc}
 8015150:	200b      	movs	r0, #11
 8015152:	bd70      	pop	{r4, r5, r6, pc}

08015154 <rcl_wait_set_add_service>:
 8015154:	b318      	cbz	r0, 801519e <rcl_wait_set_add_service+0x4a>
 8015156:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015158:	b570      	push	{r4, r5, r6, lr}
 801515a:	4604      	mov	r4, r0
 801515c:	b30b      	cbz	r3, 80151a2 <rcl_wait_set_add_service+0x4e>
 801515e:	b319      	cbz	r1, 80151a8 <rcl_wait_set_add_service+0x54>
 8015160:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8015162:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8015164:	4285      	cmp	r5, r0
 8015166:	d217      	bcs.n	8015198 <rcl_wait_set_add_service+0x44>
 8015168:	6a20      	ldr	r0, [r4, #32]
 801516a:	1c6e      	adds	r6, r5, #1
 801516c:	625e      	str	r6, [r3, #36]	@ 0x24
 801516e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015172:	b102      	cbz	r2, 8015176 <rcl_wait_set_add_service+0x22>
 8015174:	6015      	str	r5, [r2, #0]
 8015176:	4608      	mov	r0, r1
 8015178:	f7ff f9c8 	bl	801450c <rcl_service_get_rmw_handle>
 801517c:	b150      	cbz	r0, 8015194 <rcl_wait_set_add_service+0x40>
 801517e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015180:	6842      	ldr	r2, [r0, #4]
 8015182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015184:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015188:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801518a:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 801518c:	3301      	adds	r3, #1
 801518e:	2000      	movs	r0, #0
 8015190:	6293      	str	r3, [r2, #40]	@ 0x28
 8015192:	bd70      	pop	{r4, r5, r6, pc}
 8015194:	2001      	movs	r0, #1
 8015196:	bd70      	pop	{r4, r5, r6, pc}
 8015198:	f240 3086 	movw	r0, #902	@ 0x386
 801519c:	bd70      	pop	{r4, r5, r6, pc}
 801519e:	200b      	movs	r0, #11
 80151a0:	4770      	bx	lr
 80151a2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80151a6:	bd70      	pop	{r4, r5, r6, pc}
 80151a8:	200b      	movs	r0, #11
 80151aa:	bd70      	pop	{r4, r5, r6, pc}
 80151ac:	0000      	movs	r0, r0
	...

080151b0 <rcl_wait>:
 80151b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151b4:	ed2d 8b02 	vpush	{d8}
 80151b8:	b08d      	sub	sp, #52	@ 0x34
 80151ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80151be:	2800      	cmp	r0, #0
 80151c0:	f000 8143 	beq.w	801544a <rcl_wait+0x29a>
 80151c4:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80151c6:	4605      	mov	r5, r0
 80151c8:	2e00      	cmp	r6, #0
 80151ca:	f000 8112 	beq.w	80153f2 <rcl_wait+0x242>
 80151ce:	6843      	ldr	r3, [r0, #4]
 80151d0:	b983      	cbnz	r3, 80151f4 <rcl_wait+0x44>
 80151d2:	68eb      	ldr	r3, [r5, #12]
 80151d4:	b973      	cbnz	r3, 80151f4 <rcl_wait+0x44>
 80151d6:	696b      	ldr	r3, [r5, #20]
 80151d8:	b963      	cbnz	r3, 80151f4 <rcl_wait+0x44>
 80151da:	69eb      	ldr	r3, [r5, #28]
 80151dc:	b953      	cbnz	r3, 80151f4 <rcl_wait+0x44>
 80151de:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80151e0:	b943      	cbnz	r3, 80151f4 <rcl_wait+0x44>
 80151e2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80151e4:	b933      	cbnz	r3, 80151f4 <rcl_wait+0x44>
 80151e6:	f240 3085 	movw	r0, #901	@ 0x385
 80151ea:	b00d      	add	sp, #52	@ 0x34
 80151ec:	ecbd 8b02 	vpop	{d8}
 80151f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151f4:	9b04      	ldr	r3, [sp, #16]
 80151f6:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 80151f8:	2b01      	cmp	r3, #1
 80151fa:	9b05      	ldr	r3, [sp, #20]
 80151fc:	f173 0300 	sbcs.w	r3, r3, #0
 8015200:	f2c0 80f0 	blt.w	80153e4 <rcl_wait+0x234>
 8015204:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8015208:	4643      	mov	r3, r8
 801520a:	2a00      	cmp	r2, #0
 801520c:	f000 8133 	beq.w	8015476 <rcl_wait+0x2c6>
 8015210:	2400      	movs	r4, #0
 8015212:	4613      	mov	r3, r2
 8015214:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8015488 <rcl_wait+0x2d8>
 8015218:	46a2      	mov	sl, r4
 801521a:	46a3      	mov	fp, r4
 801521c:	f240 3921 	movw	r9, #801	@ 0x321
 8015220:	4632      	mov	r2, r6
 8015222:	e014      	b.n	801524e <rcl_wait+0x9e>
 8015224:	2800      	cmp	r0, #0
 8015226:	d1e0      	bne.n	80151ea <rcl_wait+0x3a>
 8015228:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801522c:	4542      	cmp	r2, r8
 801522e:	eb73 0107 	sbcs.w	r1, r3, r7
 8015232:	da03      	bge.n	801523c <rcl_wait+0x8c>
 8015234:	4690      	mov	r8, r2
 8015236:	461f      	mov	r7, r3
 8015238:	f04f 0b01 	mov.w	fp, #1
 801523c:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801523e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8015240:	3401      	adds	r4, #1
 8015242:	f14a 0a00 	adc.w	sl, sl, #0
 8015246:	429c      	cmp	r4, r3
 8015248:	f17a 0100 	sbcs.w	r1, sl, #0
 801524c:	d228      	bcs.n	80152a0 <rcl_wait+0xf0>
 801524e:	6928      	ldr	r0, [r5, #16]
 8015250:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8015254:	a908      	add	r1, sp, #32
 8015256:	00a6      	lsls	r6, r4, #2
 8015258:	2800      	cmp	r0, #0
 801525a:	d0f1      	beq.n	8015240 <rcl_wait+0x90>
 801525c:	68eb      	ldr	r3, [r5, #12]
 801525e:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8015262:	4423      	add	r3, r4
 8015264:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8015268:	f1be 0f00 	cmp.w	lr, #0
 801526c:	d006      	beq.n	801527c <rcl_wait+0xcc>
 801526e:	6913      	ldr	r3, [r2, #16]
 8015270:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8015274:	3301      	adds	r3, #1
 8015276:	6113      	str	r3, [r2, #16]
 8015278:	692b      	ldr	r3, [r5, #16]
 801527a:	5998      	ldr	r0, [r3, r6]
 801527c:	ed8d 8b08 	vstr	d8, [sp, #32]
 8015280:	f7f6 ff70 	bl	800c164 <rcl_timer_get_time_until_next_call>
 8015284:	4548      	cmp	r0, r9
 8015286:	d1cd      	bne.n	8015224 <rcl_wait+0x74>
 8015288:	692b      	ldr	r3, [r5, #16]
 801528a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801528c:	2100      	movs	r1, #0
 801528e:	5199      	str	r1, [r3, r6]
 8015290:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8015292:	3401      	adds	r4, #1
 8015294:	f14a 0a00 	adc.w	sl, sl, #0
 8015298:	429c      	cmp	r4, r3
 801529a:	f17a 0100 	sbcs.w	r1, sl, #0
 801529e:	d3d6      	bcc.n	801524e <rcl_wait+0x9e>
 80152a0:	4616      	mov	r6, r2
 80152a2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80152a6:	4313      	orrs	r3, r2
 80152a8:	46d9      	mov	r9, fp
 80152aa:	f040 80a9 	bne.w	8015400 <rcl_wait+0x250>
 80152ae:	2300      	movs	r3, #0
 80152b0:	2200      	movs	r2, #0
 80152b2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80152b6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80152ba:	ab08      	add	r3, sp, #32
 80152bc:	9302      	str	r3, [sp, #8]
 80152be:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 80152c0:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 80152c4:	e9cd 3200 	strd	r3, r2, [sp]
 80152c8:	f106 0110 	add.w	r1, r6, #16
 80152cc:	f106 031c 	add.w	r3, r6, #28
 80152d0:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 80152d4:	1d30      	adds	r0, r6, #4
 80152d6:	f001 fc13 	bl	8016b00 <rmw_wait>
 80152da:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80152dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80152de:	4680      	mov	r8, r0
 80152e0:	b1ca      	cbz	r2, 8015316 <rcl_wait+0x166>
 80152e2:	2400      	movs	r4, #0
 80152e4:	4627      	mov	r7, r4
 80152e6:	692a      	ldr	r2, [r5, #16]
 80152e8:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 80152ec:	f10d 011f 	add.w	r1, sp, #31
 80152f0:	00a6      	lsls	r6, r4, #2
 80152f2:	b160      	cbz	r0, 801530e <rcl_wait+0x15e>
 80152f4:	f88d 701f 	strb.w	r7, [sp, #31]
 80152f8:	f7f6 fefa 	bl	800c0f0 <rcl_timer_is_ready>
 80152fc:	2800      	cmp	r0, #0
 80152fe:	f47f af74 	bne.w	80151ea <rcl_wait+0x3a>
 8015302:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8015306:	b90b      	cbnz	r3, 801530c <rcl_wait+0x15c>
 8015308:	692a      	ldr	r2, [r5, #16]
 801530a:	5193      	str	r3, [r2, r6]
 801530c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801530e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015310:	3401      	adds	r4, #1
 8015312:	42a2      	cmp	r2, r4
 8015314:	d8e7      	bhi.n	80152e6 <rcl_wait+0x136>
 8015316:	f038 0002 	bics.w	r0, r8, #2
 801531a:	f040 8090 	bne.w	801543e <rcl_wait+0x28e>
 801531e:	686e      	ldr	r6, [r5, #4]
 8015320:	4602      	mov	r2, r0
 8015322:	b91e      	cbnz	r6, 801532c <rcl_wait+0x17c>
 8015324:	e00d      	b.n	8015342 <rcl_wait+0x192>
 8015326:	3201      	adds	r2, #1
 8015328:	42b2      	cmp	r2, r6
 801532a:	d00a      	beq.n	8015342 <rcl_wait+0x192>
 801532c:	6899      	ldr	r1, [r3, #8]
 801532e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015332:	2900      	cmp	r1, #0
 8015334:	d1f7      	bne.n	8015326 <rcl_wait+0x176>
 8015336:	682c      	ldr	r4, [r5, #0]
 8015338:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801533c:	3201      	adds	r2, #1
 801533e:	42b2      	cmp	r2, r6
 8015340:	d1f4      	bne.n	801532c <rcl_wait+0x17c>
 8015342:	68ee      	ldr	r6, [r5, #12]
 8015344:	2200      	movs	r2, #0
 8015346:	b91e      	cbnz	r6, 8015350 <rcl_wait+0x1a0>
 8015348:	e00d      	b.n	8015366 <rcl_wait+0x1b6>
 801534a:	3201      	adds	r2, #1
 801534c:	42b2      	cmp	r2, r6
 801534e:	d00a      	beq.n	8015366 <rcl_wait+0x1b6>
 8015350:	6959      	ldr	r1, [r3, #20]
 8015352:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015356:	2900      	cmp	r1, #0
 8015358:	d1f7      	bne.n	801534a <rcl_wait+0x19a>
 801535a:	68ac      	ldr	r4, [r5, #8]
 801535c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015360:	3201      	adds	r2, #1
 8015362:	42b2      	cmp	r2, r6
 8015364:	d1f4      	bne.n	8015350 <rcl_wait+0x1a0>
 8015366:	69ee      	ldr	r6, [r5, #28]
 8015368:	2200      	movs	r2, #0
 801536a:	b91e      	cbnz	r6, 8015374 <rcl_wait+0x1c4>
 801536c:	e00d      	b.n	801538a <rcl_wait+0x1da>
 801536e:	3201      	adds	r2, #1
 8015370:	42b2      	cmp	r2, r6
 8015372:	d00a      	beq.n	801538a <rcl_wait+0x1da>
 8015374:	6a19      	ldr	r1, [r3, #32]
 8015376:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801537a:	2900      	cmp	r1, #0
 801537c:	d1f7      	bne.n	801536e <rcl_wait+0x1be>
 801537e:	69ac      	ldr	r4, [r5, #24]
 8015380:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015384:	3201      	adds	r2, #1
 8015386:	42b2      	cmp	r2, r6
 8015388:	d1f4      	bne.n	8015374 <rcl_wait+0x1c4>
 801538a:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 801538c:	2200      	movs	r2, #0
 801538e:	b91e      	cbnz	r6, 8015398 <rcl_wait+0x1e8>
 8015390:	e00d      	b.n	80153ae <rcl_wait+0x1fe>
 8015392:	3201      	adds	r2, #1
 8015394:	4296      	cmp	r6, r2
 8015396:	d00a      	beq.n	80153ae <rcl_wait+0x1fe>
 8015398:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801539a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801539e:	2900      	cmp	r1, #0
 80153a0:	d1f7      	bne.n	8015392 <rcl_wait+0x1e2>
 80153a2:	6a2c      	ldr	r4, [r5, #32]
 80153a4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80153a8:	3201      	adds	r2, #1
 80153aa:	4296      	cmp	r6, r2
 80153ac:	d1f4      	bne.n	8015398 <rcl_wait+0x1e8>
 80153ae:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 80153b0:	2200      	movs	r2, #0
 80153b2:	b91e      	cbnz	r6, 80153bc <rcl_wait+0x20c>
 80153b4:	e00d      	b.n	80153d2 <rcl_wait+0x222>
 80153b6:	3201      	adds	r2, #1
 80153b8:	42b2      	cmp	r2, r6
 80153ba:	d00a      	beq.n	80153d2 <rcl_wait+0x222>
 80153bc:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80153be:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80153c2:	2900      	cmp	r1, #0
 80153c4:	d1f7      	bne.n	80153b6 <rcl_wait+0x206>
 80153c6:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 80153c8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80153cc:	3201      	adds	r2, #1
 80153ce:	42b2      	cmp	r2, r6
 80153d0:	d1f4      	bne.n	80153bc <rcl_wait+0x20c>
 80153d2:	f1b8 0f02 	cmp.w	r8, #2
 80153d6:	f47f af08 	bne.w	80151ea <rcl_wait+0x3a>
 80153da:	464b      	mov	r3, r9
 80153dc:	2b00      	cmp	r3, #0
 80153de:	bf08      	it	eq
 80153e0:	2002      	moveq	r0, #2
 80153e2:	e702      	b.n	80151ea <rcl_wait+0x3a>
 80153e4:	2a00      	cmp	r2, #0
 80153e6:	d03a      	beq.n	801545e <rcl_wait+0x2ae>
 80153e8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80153ec:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80153f0:	e70e      	b.n	8015210 <rcl_wait+0x60>
 80153f2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80153f6:	b00d      	add	sp, #52	@ 0x34
 80153f8:	ecbd 8b02 	vpop	{d8}
 80153fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015400:	9b04      	ldr	r3, [sp, #16]
 8015402:	2b01      	cmp	r3, #1
 8015404:	9b05      	ldr	r3, [sp, #20]
 8015406:	f173 0300 	sbcs.w	r3, r3, #0
 801540a:	db24      	blt.n	8015456 <rcl_wait+0x2a6>
 801540c:	2f00      	cmp	r7, #0
 801540e:	bfbc      	itt	lt
 8015410:	f04f 0800 	movlt.w	r8, #0
 8015414:	4647      	movlt	r7, r8
 8015416:	a31e      	add	r3, pc, #120	@ (adr r3, 8015490 <rcl_wait+0x2e0>)
 8015418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801541c:	4640      	mov	r0, r8
 801541e:	4639      	mov	r1, r7
 8015420:	f7eb fb7c 	bl	8000b1c <__aeabi_ldivmod>
 8015424:	a31a      	add	r3, pc, #104	@ (adr r3, 8015490 <rcl_wait+0x2e0>)
 8015426:	e9d3 2300 	ldrd	r2, r3, [r3]
 801542a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801542e:	4640      	mov	r0, r8
 8015430:	4639      	mov	r1, r7
 8015432:	f7eb fb73 	bl	8000b1c <__aeabi_ldivmod>
 8015436:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801543a:	ab08      	add	r3, sp, #32
 801543c:	e73e      	b.n	80152bc <rcl_wait+0x10c>
 801543e:	2001      	movs	r0, #1
 8015440:	b00d      	add	sp, #52	@ 0x34
 8015442:	ecbd 8b02 	vpop	{d8}
 8015446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801544a:	200b      	movs	r0, #11
 801544c:	b00d      	add	sp, #52	@ 0x34
 801544e:	ecbd 8b02 	vpop	{d8}
 8015452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015456:	465b      	mov	r3, fp
 8015458:	2b00      	cmp	r3, #0
 801545a:	d1d7      	bne.n	801540c <rcl_wait+0x25c>
 801545c:	e72e      	b.n	80152bc <rcl_wait+0x10c>
 801545e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8015462:	430b      	orrs	r3, r1
 8015464:	bf08      	it	eq
 8015466:	4691      	moveq	r9, r2
 8015468:	f43f af21 	beq.w	80152ae <rcl_wait+0xfe>
 801546c:	9b04      	ldr	r3, [sp, #16]
 801546e:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8015472:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8015476:	2b01      	cmp	r3, #1
 8015478:	9b05      	ldr	r3, [sp, #20]
 801547a:	f173 0300 	sbcs.w	r3, r3, #0
 801547e:	f04f 0300 	mov.w	r3, #0
 8015482:	4699      	mov	r9, r3
 8015484:	dac2      	bge.n	801540c <rcl_wait+0x25c>
 8015486:	e719      	b.n	80152bc <rcl_wait+0x10c>
 8015488:	ffffffff 	.word	0xffffffff
 801548c:	7fffffff 	.word	0x7fffffff
 8015490:	3b9aca00 	.word	0x3b9aca00
 8015494:	00000000 	.word	0x00000000

08015498 <rcl_action_take_goal_response>:
 8015498:	2800      	cmp	r0, #0
 801549a:	d039      	beq.n	8015510 <rcl_action_take_goal_response+0x78>
 801549c:	b570      	push	{r4, r5, r6, lr}
 801549e:	4604      	mov	r4, r0
 80154a0:	6800      	ldr	r0, [r0, #0]
 80154a2:	b380      	cbz	r0, 8015506 <rcl_action_take_goal_response+0x6e>
 80154a4:	460d      	mov	r5, r1
 80154a6:	4616      	mov	r6, r2
 80154a8:	f7fe fd2e 	bl	8013f08 <rcl_client_is_valid>
 80154ac:	b330      	cbz	r0, 80154fc <rcl_action_take_goal_response+0x64>
 80154ae:	6820      	ldr	r0, [r4, #0]
 80154b0:	3004      	adds	r0, #4
 80154b2:	f7fe fd29 	bl	8013f08 <rcl_client_is_valid>
 80154b6:	b308      	cbz	r0, 80154fc <rcl_action_take_goal_response+0x64>
 80154b8:	6820      	ldr	r0, [r4, #0]
 80154ba:	3008      	adds	r0, #8
 80154bc:	f7fe fd24 	bl	8013f08 <rcl_client_is_valid>
 80154c0:	b1e0      	cbz	r0, 80154fc <rcl_action_take_goal_response+0x64>
 80154c2:	6820      	ldr	r0, [r4, #0]
 80154c4:	300c      	adds	r0, #12
 80154c6:	f7f6 fc05 	bl	800bcd4 <rcl_subscription_is_valid>
 80154ca:	b1b8      	cbz	r0, 80154fc <rcl_action_take_goal_response+0x64>
 80154cc:	6820      	ldr	r0, [r4, #0]
 80154ce:	3010      	adds	r0, #16
 80154d0:	f7f6 fc00 	bl	800bcd4 <rcl_subscription_is_valid>
 80154d4:	b190      	cbz	r0, 80154fc <rcl_action_take_goal_response+0x64>
 80154d6:	b1cd      	cbz	r5, 801550c <rcl_action_take_goal_response+0x74>
 80154d8:	b1c6      	cbz	r6, 801550c <rcl_action_take_goal_response+0x74>
 80154da:	6820      	ldr	r0, [r4, #0]
 80154dc:	4632      	mov	r2, r6
 80154de:	4629      	mov	r1, r5
 80154e0:	f7fe fcca 	bl	8013e78 <rcl_take_response>
 80154e4:	b148      	cbz	r0, 80154fa <rcl_action_take_goal_response+0x62>
 80154e6:	280a      	cmp	r0, #10
 80154e8:	d007      	beq.n	80154fa <rcl_action_take_goal_response+0x62>
 80154ea:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80154ee:	f640 0337 	movw	r3, #2103	@ 0x837
 80154f2:	4290      	cmp	r0, r2
 80154f4:	bf0c      	ite	eq
 80154f6:	4618      	moveq	r0, r3
 80154f8:	2001      	movne	r0, #1
 80154fa:	bd70      	pop	{r4, r5, r6, pc}
 80154fc:	f7f7 ff34 	bl	800d368 <rcutils_reset_error>
 8015500:	f640 0036 	movw	r0, #2102	@ 0x836
 8015504:	bd70      	pop	{r4, r5, r6, pc}
 8015506:	f640 0036 	movw	r0, #2102	@ 0x836
 801550a:	bd70      	pop	{r4, r5, r6, pc}
 801550c:	200b      	movs	r0, #11
 801550e:	bd70      	pop	{r4, r5, r6, pc}
 8015510:	f640 0036 	movw	r0, #2102	@ 0x836
 8015514:	4770      	bx	lr
 8015516:	bf00      	nop

08015518 <rcl_action_send_result_request>:
 8015518:	b390      	cbz	r0, 8015580 <rcl_action_send_result_request+0x68>
 801551a:	b570      	push	{r4, r5, r6, lr}
 801551c:	4604      	mov	r4, r0
 801551e:	6800      	ldr	r0, [r0, #0]
 8015520:	b348      	cbz	r0, 8015576 <rcl_action_send_result_request+0x5e>
 8015522:	460d      	mov	r5, r1
 8015524:	4616      	mov	r6, r2
 8015526:	f7fe fcef 	bl	8013f08 <rcl_client_is_valid>
 801552a:	b1f8      	cbz	r0, 801556c <rcl_action_send_result_request+0x54>
 801552c:	6820      	ldr	r0, [r4, #0]
 801552e:	3004      	adds	r0, #4
 8015530:	f7fe fcea 	bl	8013f08 <rcl_client_is_valid>
 8015534:	b1d0      	cbz	r0, 801556c <rcl_action_send_result_request+0x54>
 8015536:	6820      	ldr	r0, [r4, #0]
 8015538:	3008      	adds	r0, #8
 801553a:	f7fe fce5 	bl	8013f08 <rcl_client_is_valid>
 801553e:	b1a8      	cbz	r0, 801556c <rcl_action_send_result_request+0x54>
 8015540:	6820      	ldr	r0, [r4, #0]
 8015542:	300c      	adds	r0, #12
 8015544:	f7f6 fbc6 	bl	800bcd4 <rcl_subscription_is_valid>
 8015548:	b180      	cbz	r0, 801556c <rcl_action_send_result_request+0x54>
 801554a:	6820      	ldr	r0, [r4, #0]
 801554c:	3010      	adds	r0, #16
 801554e:	f7f6 fbc1 	bl	800bcd4 <rcl_subscription_is_valid>
 8015552:	b158      	cbz	r0, 801556c <rcl_action_send_result_request+0x54>
 8015554:	b195      	cbz	r5, 801557c <rcl_action_send_result_request+0x64>
 8015556:	b18e      	cbz	r6, 801557c <rcl_action_send_result_request+0x64>
 8015558:	6820      	ldr	r0, [r4, #0]
 801555a:	4632      	mov	r2, r6
 801555c:	4629      	mov	r1, r5
 801555e:	3008      	adds	r0, #8
 8015560:	f7fe fc54 	bl	8013e0c <rcl_send_request>
 8015564:	3800      	subs	r0, #0
 8015566:	bf18      	it	ne
 8015568:	2001      	movne	r0, #1
 801556a:	bd70      	pop	{r4, r5, r6, pc}
 801556c:	f7f7 fefc 	bl	800d368 <rcutils_reset_error>
 8015570:	f640 0036 	movw	r0, #2102	@ 0x836
 8015574:	bd70      	pop	{r4, r5, r6, pc}
 8015576:	f640 0036 	movw	r0, #2102	@ 0x836
 801557a:	bd70      	pop	{r4, r5, r6, pc}
 801557c:	200b      	movs	r0, #11
 801557e:	bd70      	pop	{r4, r5, r6, pc}
 8015580:	f640 0036 	movw	r0, #2102	@ 0x836
 8015584:	4770      	bx	lr
 8015586:	bf00      	nop

08015588 <rcl_action_take_result_response>:
 8015588:	2800      	cmp	r0, #0
 801558a:	d03a      	beq.n	8015602 <rcl_action_take_result_response+0x7a>
 801558c:	b570      	push	{r4, r5, r6, lr}
 801558e:	4604      	mov	r4, r0
 8015590:	6800      	ldr	r0, [r0, #0]
 8015592:	b388      	cbz	r0, 80155f8 <rcl_action_take_result_response+0x70>
 8015594:	460d      	mov	r5, r1
 8015596:	4616      	mov	r6, r2
 8015598:	f7fe fcb6 	bl	8013f08 <rcl_client_is_valid>
 801559c:	b338      	cbz	r0, 80155ee <rcl_action_take_result_response+0x66>
 801559e:	6820      	ldr	r0, [r4, #0]
 80155a0:	3004      	adds	r0, #4
 80155a2:	f7fe fcb1 	bl	8013f08 <rcl_client_is_valid>
 80155a6:	b310      	cbz	r0, 80155ee <rcl_action_take_result_response+0x66>
 80155a8:	6820      	ldr	r0, [r4, #0]
 80155aa:	3008      	adds	r0, #8
 80155ac:	f7fe fcac 	bl	8013f08 <rcl_client_is_valid>
 80155b0:	b1e8      	cbz	r0, 80155ee <rcl_action_take_result_response+0x66>
 80155b2:	6820      	ldr	r0, [r4, #0]
 80155b4:	300c      	adds	r0, #12
 80155b6:	f7f6 fb8d 	bl	800bcd4 <rcl_subscription_is_valid>
 80155ba:	b1c0      	cbz	r0, 80155ee <rcl_action_take_result_response+0x66>
 80155bc:	6820      	ldr	r0, [r4, #0]
 80155be:	3010      	adds	r0, #16
 80155c0:	f7f6 fb88 	bl	800bcd4 <rcl_subscription_is_valid>
 80155c4:	b198      	cbz	r0, 80155ee <rcl_action_take_result_response+0x66>
 80155c6:	b1d5      	cbz	r5, 80155fe <rcl_action_take_result_response+0x76>
 80155c8:	b1ce      	cbz	r6, 80155fe <rcl_action_take_result_response+0x76>
 80155ca:	6820      	ldr	r0, [r4, #0]
 80155cc:	4632      	mov	r2, r6
 80155ce:	4629      	mov	r1, r5
 80155d0:	3008      	adds	r0, #8
 80155d2:	f7fe fc51 	bl	8013e78 <rcl_take_response>
 80155d6:	b148      	cbz	r0, 80155ec <rcl_action_take_result_response+0x64>
 80155d8:	280a      	cmp	r0, #10
 80155da:	d007      	beq.n	80155ec <rcl_action_take_result_response+0x64>
 80155dc:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80155e0:	f640 0337 	movw	r3, #2103	@ 0x837
 80155e4:	4290      	cmp	r0, r2
 80155e6:	bf0c      	ite	eq
 80155e8:	4618      	moveq	r0, r3
 80155ea:	2001      	movne	r0, #1
 80155ec:	bd70      	pop	{r4, r5, r6, pc}
 80155ee:	f7f7 febb 	bl	800d368 <rcutils_reset_error>
 80155f2:	f640 0036 	movw	r0, #2102	@ 0x836
 80155f6:	bd70      	pop	{r4, r5, r6, pc}
 80155f8:	f640 0036 	movw	r0, #2102	@ 0x836
 80155fc:	bd70      	pop	{r4, r5, r6, pc}
 80155fe:	200b      	movs	r0, #11
 8015600:	bd70      	pop	{r4, r5, r6, pc}
 8015602:	f640 0036 	movw	r0, #2102	@ 0x836
 8015606:	4770      	bx	lr

08015608 <rcl_action_take_cancel_response>:
 8015608:	2800      	cmp	r0, #0
 801560a:	d03a      	beq.n	8015682 <rcl_action_take_cancel_response+0x7a>
 801560c:	b570      	push	{r4, r5, r6, lr}
 801560e:	4604      	mov	r4, r0
 8015610:	6800      	ldr	r0, [r0, #0]
 8015612:	b388      	cbz	r0, 8015678 <rcl_action_take_cancel_response+0x70>
 8015614:	460d      	mov	r5, r1
 8015616:	4616      	mov	r6, r2
 8015618:	f7fe fc76 	bl	8013f08 <rcl_client_is_valid>
 801561c:	b338      	cbz	r0, 801566e <rcl_action_take_cancel_response+0x66>
 801561e:	6820      	ldr	r0, [r4, #0]
 8015620:	3004      	adds	r0, #4
 8015622:	f7fe fc71 	bl	8013f08 <rcl_client_is_valid>
 8015626:	b310      	cbz	r0, 801566e <rcl_action_take_cancel_response+0x66>
 8015628:	6820      	ldr	r0, [r4, #0]
 801562a:	3008      	adds	r0, #8
 801562c:	f7fe fc6c 	bl	8013f08 <rcl_client_is_valid>
 8015630:	b1e8      	cbz	r0, 801566e <rcl_action_take_cancel_response+0x66>
 8015632:	6820      	ldr	r0, [r4, #0]
 8015634:	300c      	adds	r0, #12
 8015636:	f7f6 fb4d 	bl	800bcd4 <rcl_subscription_is_valid>
 801563a:	b1c0      	cbz	r0, 801566e <rcl_action_take_cancel_response+0x66>
 801563c:	6820      	ldr	r0, [r4, #0]
 801563e:	3010      	adds	r0, #16
 8015640:	f7f6 fb48 	bl	800bcd4 <rcl_subscription_is_valid>
 8015644:	b198      	cbz	r0, 801566e <rcl_action_take_cancel_response+0x66>
 8015646:	b1d5      	cbz	r5, 801567e <rcl_action_take_cancel_response+0x76>
 8015648:	b1ce      	cbz	r6, 801567e <rcl_action_take_cancel_response+0x76>
 801564a:	6820      	ldr	r0, [r4, #0]
 801564c:	4632      	mov	r2, r6
 801564e:	4629      	mov	r1, r5
 8015650:	3004      	adds	r0, #4
 8015652:	f7fe fc11 	bl	8013e78 <rcl_take_response>
 8015656:	b148      	cbz	r0, 801566c <rcl_action_take_cancel_response+0x64>
 8015658:	280a      	cmp	r0, #10
 801565a:	d007      	beq.n	801566c <rcl_action_take_cancel_response+0x64>
 801565c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8015660:	f640 0337 	movw	r3, #2103	@ 0x837
 8015664:	4290      	cmp	r0, r2
 8015666:	bf0c      	ite	eq
 8015668:	4618      	moveq	r0, r3
 801566a:	2001      	movne	r0, #1
 801566c:	bd70      	pop	{r4, r5, r6, pc}
 801566e:	f7f7 fe7b 	bl	800d368 <rcutils_reset_error>
 8015672:	f640 0036 	movw	r0, #2102	@ 0x836
 8015676:	bd70      	pop	{r4, r5, r6, pc}
 8015678:	f640 0036 	movw	r0, #2102	@ 0x836
 801567c:	bd70      	pop	{r4, r5, r6, pc}
 801567e:	200b      	movs	r0, #11
 8015680:	bd70      	pop	{r4, r5, r6, pc}
 8015682:	f640 0036 	movw	r0, #2102	@ 0x836
 8015686:	4770      	bx	lr

08015688 <rcl_action_take_feedback>:
 8015688:	2800      	cmp	r0, #0
 801568a:	d038      	beq.n	80156fe <rcl_action_take_feedback+0x76>
 801568c:	b530      	push	{r4, r5, lr}
 801568e:	4604      	mov	r4, r0
 8015690:	6800      	ldr	r0, [r0, #0]
 8015692:	b091      	sub	sp, #68	@ 0x44
 8015694:	b378      	cbz	r0, 80156f6 <rcl_action_take_feedback+0x6e>
 8015696:	460d      	mov	r5, r1
 8015698:	f7fe fc36 	bl	8013f08 <rcl_client_is_valid>
 801569c:	b328      	cbz	r0, 80156ea <rcl_action_take_feedback+0x62>
 801569e:	6820      	ldr	r0, [r4, #0]
 80156a0:	3004      	adds	r0, #4
 80156a2:	f7fe fc31 	bl	8013f08 <rcl_client_is_valid>
 80156a6:	b300      	cbz	r0, 80156ea <rcl_action_take_feedback+0x62>
 80156a8:	6820      	ldr	r0, [r4, #0]
 80156aa:	3008      	adds	r0, #8
 80156ac:	f7fe fc2c 	bl	8013f08 <rcl_client_is_valid>
 80156b0:	b1d8      	cbz	r0, 80156ea <rcl_action_take_feedback+0x62>
 80156b2:	6820      	ldr	r0, [r4, #0]
 80156b4:	300c      	adds	r0, #12
 80156b6:	f7f6 fb0d 	bl	800bcd4 <rcl_subscription_is_valid>
 80156ba:	b1b0      	cbz	r0, 80156ea <rcl_action_take_feedback+0x62>
 80156bc:	6820      	ldr	r0, [r4, #0]
 80156be:	3010      	adds	r0, #16
 80156c0:	f7f6 fb08 	bl	800bcd4 <rcl_subscription_is_valid>
 80156c4:	b188      	cbz	r0, 80156ea <rcl_action_take_feedback+0x62>
 80156c6:	b1ed      	cbz	r5, 8015704 <rcl_action_take_feedback+0x7c>
 80156c8:	6820      	ldr	r0, [r4, #0]
 80156ca:	2300      	movs	r3, #0
 80156cc:	466a      	mov	r2, sp
 80156ce:	4629      	mov	r1, r5
 80156d0:	300c      	adds	r0, #12
 80156d2:	f7f6 faa1 	bl	800bc18 <rcl_take>
 80156d6:	b160      	cbz	r0, 80156f2 <rcl_action_take_feedback+0x6a>
 80156d8:	f240 1391 	movw	r3, #401	@ 0x191
 80156dc:	4298      	cmp	r0, r3
 80156de:	d014      	beq.n	801570a <rcl_action_take_feedback+0x82>
 80156e0:	280a      	cmp	r0, #10
 80156e2:	bf18      	it	ne
 80156e4:	2001      	movne	r0, #1
 80156e6:	b011      	add	sp, #68	@ 0x44
 80156e8:	bd30      	pop	{r4, r5, pc}
 80156ea:	f7f7 fe3d 	bl	800d368 <rcutils_reset_error>
 80156ee:	f640 0036 	movw	r0, #2102	@ 0x836
 80156f2:	b011      	add	sp, #68	@ 0x44
 80156f4:	bd30      	pop	{r4, r5, pc}
 80156f6:	f640 0036 	movw	r0, #2102	@ 0x836
 80156fa:	b011      	add	sp, #68	@ 0x44
 80156fc:	bd30      	pop	{r4, r5, pc}
 80156fe:	f640 0036 	movw	r0, #2102	@ 0x836
 8015702:	4770      	bx	lr
 8015704:	200b      	movs	r0, #11
 8015706:	b011      	add	sp, #68	@ 0x44
 8015708:	bd30      	pop	{r4, r5, pc}
 801570a:	f640 0037 	movw	r0, #2103	@ 0x837
 801570e:	e7f0      	b.n	80156f2 <rcl_action_take_feedback+0x6a>

08015710 <rcl_action_wait_set_add_action_client>:
 8015710:	2800      	cmp	r0, #0
 8015712:	d048      	beq.n	80157a6 <rcl_action_wait_set_add_action_client+0x96>
 8015714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015716:	460c      	mov	r4, r1
 8015718:	2900      	cmp	r1, #0
 801571a:	d03c      	beq.n	8015796 <rcl_action_wait_set_add_action_client+0x86>
 801571c:	4605      	mov	r5, r0
 801571e:	6808      	ldr	r0, [r1, #0]
 8015720:	2800      	cmp	r0, #0
 8015722:	d038      	beq.n	8015796 <rcl_action_wait_set_add_action_client+0x86>
 8015724:	4617      	mov	r7, r2
 8015726:	461e      	mov	r6, r3
 8015728:	f7fe fbee 	bl	8013f08 <rcl_client_is_valid>
 801572c:	b3b0      	cbz	r0, 801579c <rcl_action_wait_set_add_action_client+0x8c>
 801572e:	6820      	ldr	r0, [r4, #0]
 8015730:	3004      	adds	r0, #4
 8015732:	f7fe fbe9 	bl	8013f08 <rcl_client_is_valid>
 8015736:	b388      	cbz	r0, 801579c <rcl_action_wait_set_add_action_client+0x8c>
 8015738:	6820      	ldr	r0, [r4, #0]
 801573a:	3008      	adds	r0, #8
 801573c:	f7fe fbe4 	bl	8013f08 <rcl_client_is_valid>
 8015740:	b360      	cbz	r0, 801579c <rcl_action_wait_set_add_action_client+0x8c>
 8015742:	6820      	ldr	r0, [r4, #0]
 8015744:	300c      	adds	r0, #12
 8015746:	f7f6 fac5 	bl	800bcd4 <rcl_subscription_is_valid>
 801574a:	b338      	cbz	r0, 801579c <rcl_action_wait_set_add_action_client+0x8c>
 801574c:	6820      	ldr	r0, [r4, #0]
 801574e:	3010      	adds	r0, #16
 8015750:	f7f6 fac0 	bl	800bcd4 <rcl_subscription_is_valid>
 8015754:	b310      	cbz	r0, 801579c <rcl_action_wait_set_add_action_client+0x8c>
 8015756:	6821      	ldr	r1, [r4, #0]
 8015758:	4628      	mov	r0, r5
 801575a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 801575e:	f7ff fccd 	bl	80150fc <rcl_wait_set_add_client>
 8015762:	b9b8      	cbnz	r0, 8015794 <rcl_action_wait_set_add_action_client+0x84>
 8015764:	6821      	ldr	r1, [r4, #0]
 8015766:	4628      	mov	r0, r5
 8015768:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 801576c:	3104      	adds	r1, #4
 801576e:	f7ff fcc5 	bl	80150fc <rcl_wait_set_add_client>
 8015772:	b978      	cbnz	r0, 8015794 <rcl_action_wait_set_add_action_client+0x84>
 8015774:	6821      	ldr	r1, [r4, #0]
 8015776:	4628      	mov	r0, r5
 8015778:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 801577c:	3108      	adds	r1, #8
 801577e:	f7ff fcbd 	bl	80150fc <rcl_wait_set_add_client>
 8015782:	b938      	cbnz	r0, 8015794 <rcl_action_wait_set_add_action_client+0x84>
 8015784:	6821      	ldr	r1, [r4, #0]
 8015786:	4628      	mov	r0, r5
 8015788:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 801578c:	310c      	adds	r1, #12
 801578e:	f7ff f96d 	bl	8014a6c <rcl_wait_set_add_subscription>
 8015792:	b158      	cbz	r0, 80157ac <rcl_action_wait_set_add_action_client+0x9c>
 8015794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015796:	f640 0036 	movw	r0, #2102	@ 0x836
 801579a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801579c:	f7f7 fde4 	bl	800d368 <rcutils_reset_error>
 80157a0:	f640 0036 	movw	r0, #2102	@ 0x836
 80157a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80157a6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80157aa:	4770      	bx	lr
 80157ac:	6821      	ldr	r1, [r4, #0]
 80157ae:	4628      	mov	r0, r5
 80157b0:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 80157b4:	3110      	adds	r1, #16
 80157b6:	f7ff f959 	bl	8014a6c <rcl_wait_set_add_subscription>
 80157ba:	2800      	cmp	r0, #0
 80157bc:	d1ea      	bne.n	8015794 <rcl_action_wait_set_add_action_client+0x84>
 80157be:	b11f      	cbz	r7, 80157c8 <rcl_action_wait_set_add_action_client+0xb8>
 80157c0:	6823      	ldr	r3, [r4, #0]
 80157c2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80157c6:	603b      	str	r3, [r7, #0]
 80157c8:	2e00      	cmp	r6, #0
 80157ca:	d0e3      	beq.n	8015794 <rcl_action_wait_set_add_action_client+0x84>
 80157cc:	6823      	ldr	r3, [r4, #0]
 80157ce:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 80157d2:	6033      	str	r3, [r6, #0]
 80157d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80157d6:	bf00      	nop

080157d8 <rcl_action_client_wait_set_get_entities_ready>:
 80157d8:	2800      	cmp	r0, #0
 80157da:	f000 808d 	beq.w	80158f8 <rcl_action_client_wait_set_get_entities_ready+0x120>
 80157de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157e2:	460c      	mov	r4, r1
 80157e4:	2900      	cmp	r1, #0
 80157e6:	d077      	beq.n	80158d8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80157e8:	4605      	mov	r5, r0
 80157ea:	6808      	ldr	r0, [r1, #0]
 80157ec:	2800      	cmp	r0, #0
 80157ee:	d073      	beq.n	80158d8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80157f0:	4616      	mov	r6, r2
 80157f2:	461f      	mov	r7, r3
 80157f4:	f7fe fb88 	bl	8013f08 <rcl_client_is_valid>
 80157f8:	2800      	cmp	r0, #0
 80157fa:	d071      	beq.n	80158e0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80157fc:	6820      	ldr	r0, [r4, #0]
 80157fe:	3004      	adds	r0, #4
 8015800:	f7fe fb82 	bl	8013f08 <rcl_client_is_valid>
 8015804:	2800      	cmp	r0, #0
 8015806:	d06b      	beq.n	80158e0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8015808:	6820      	ldr	r0, [r4, #0]
 801580a:	3008      	adds	r0, #8
 801580c:	f7fe fb7c 	bl	8013f08 <rcl_client_is_valid>
 8015810:	2800      	cmp	r0, #0
 8015812:	d065      	beq.n	80158e0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8015814:	6820      	ldr	r0, [r4, #0]
 8015816:	300c      	adds	r0, #12
 8015818:	f7f6 fa5c 	bl	800bcd4 <rcl_subscription_is_valid>
 801581c:	2800      	cmp	r0, #0
 801581e:	d05f      	beq.n	80158e0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8015820:	6820      	ldr	r0, [r4, #0]
 8015822:	3010      	adds	r0, #16
 8015824:	f7f6 fa56 	bl	800bcd4 <rcl_subscription_is_valid>
 8015828:	2800      	cmp	r0, #0
 801582a:	d059      	beq.n	80158e0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801582c:	2e00      	cmp	r6, #0
 801582e:	d060      	beq.n	80158f2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8015830:	2f00      	cmp	r7, #0
 8015832:	d05e      	beq.n	80158f2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8015834:	9b06      	ldr	r3, [sp, #24]
 8015836:	2b00      	cmp	r3, #0
 8015838:	d05b      	beq.n	80158f2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801583a:	9b07      	ldr	r3, [sp, #28]
 801583c:	2b00      	cmp	r3, #0
 801583e:	d058      	beq.n	80158f2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8015840:	9b08      	ldr	r3, [sp, #32]
 8015842:	2b00      	cmp	r3, #0
 8015844:	d055      	beq.n	80158f2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8015846:	6823      	ldr	r3, [r4, #0]
 8015848:	686a      	ldr	r2, [r5, #4]
 801584a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 801584e:	428a      	cmp	r2, r1
 8015850:	d94c      	bls.n	80158ec <rcl_action_client_wait_set_get_entities_ready+0x114>
 8015852:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8015856:	4282      	cmp	r2, r0
 8015858:	d948      	bls.n	80158ec <rcl_action_client_wait_set_get_entities_ready+0x114>
 801585a:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 801585e:	69ea      	ldr	r2, [r5, #28]
 8015860:	42a2      	cmp	r2, r4
 8015862:	d943      	bls.n	80158ec <rcl_action_client_wait_set_get_entities_ready+0x114>
 8015864:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8015868:	4562      	cmp	r2, ip
 801586a:	d93f      	bls.n	80158ec <rcl_action_client_wait_set_get_entities_ready+0x114>
 801586c:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8015870:	4572      	cmp	r2, lr
 8015872:	d93b      	bls.n	80158ec <rcl_action_client_wait_set_get_entities_ready+0x114>
 8015874:	69aa      	ldr	r2, [r5, #24]
 8015876:	682d      	ldr	r5, [r5, #0]
 8015878:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 801587c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8015880:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8015884:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8015888:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 801588c:	f103 0c0c 	add.w	ip, r3, #12
 8015890:	eba5 050c 	sub.w	r5, r5, ip
 8015894:	fab5 f585 	clz	r5, r5
 8015898:	096d      	lsrs	r5, r5, #5
 801589a:	7035      	strb	r5, [r6, #0]
 801589c:	f103 0510 	add.w	r5, r3, #16
 80158a0:	1b64      	subs	r4, r4, r5
 80158a2:	fab4 f484 	clz	r4, r4
 80158a6:	0964      	lsrs	r4, r4, #5
 80158a8:	703c      	strb	r4, [r7, #0]
 80158aa:	eba3 0008 	sub.w	r0, r3, r8
 80158ae:	1d1c      	adds	r4, r3, #4
 80158b0:	3308      	adds	r3, #8
 80158b2:	1ad3      	subs	r3, r2, r3
 80158b4:	fab0 f080 	clz	r0, r0
 80158b8:	9a06      	ldr	r2, [sp, #24]
 80158ba:	0940      	lsrs	r0, r0, #5
 80158bc:	1b09      	subs	r1, r1, r4
 80158be:	7010      	strb	r0, [r2, #0]
 80158c0:	fab1 f181 	clz	r1, r1
 80158c4:	9a07      	ldr	r2, [sp, #28]
 80158c6:	0949      	lsrs	r1, r1, #5
 80158c8:	7011      	strb	r1, [r2, #0]
 80158ca:	fab3 f383 	clz	r3, r3
 80158ce:	9a08      	ldr	r2, [sp, #32]
 80158d0:	095b      	lsrs	r3, r3, #5
 80158d2:	2000      	movs	r0, #0
 80158d4:	7013      	strb	r3, [r2, #0]
 80158d6:	e001      	b.n	80158dc <rcl_action_client_wait_set_get_entities_ready+0x104>
 80158d8:	f640 0036 	movw	r0, #2102	@ 0x836
 80158dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158e0:	f7f7 fd42 	bl	800d368 <rcutils_reset_error>
 80158e4:	f640 0036 	movw	r0, #2102	@ 0x836
 80158e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158ec:	2001      	movs	r0, #1
 80158ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158f2:	200b      	movs	r0, #11
 80158f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158f8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80158fc:	4770      	bx	lr
 80158fe:	bf00      	nop

08015900 <rcl_action_take_goal_request>:
 8015900:	2800      	cmp	r0, #0
 8015902:	d039      	beq.n	8015978 <rcl_action_take_goal_request+0x78>
 8015904:	b570      	push	{r4, r5, r6, lr}
 8015906:	4604      	mov	r4, r0
 8015908:	6800      	ldr	r0, [r0, #0]
 801590a:	b380      	cbz	r0, 801596e <rcl_action_take_goal_request+0x6e>
 801590c:	460d      	mov	r5, r1
 801590e:	4616      	mov	r6, r2
 8015910:	f7fe fe5a 	bl	80145c8 <rcl_service_is_valid>
 8015914:	b330      	cbz	r0, 8015964 <rcl_action_take_goal_request+0x64>
 8015916:	6820      	ldr	r0, [r4, #0]
 8015918:	3004      	adds	r0, #4
 801591a:	f7fe fe55 	bl	80145c8 <rcl_service_is_valid>
 801591e:	b308      	cbz	r0, 8015964 <rcl_action_take_goal_request+0x64>
 8015920:	6820      	ldr	r0, [r4, #0]
 8015922:	3008      	adds	r0, #8
 8015924:	f7fe fe50 	bl	80145c8 <rcl_service_is_valid>
 8015928:	b1e0      	cbz	r0, 8015964 <rcl_action_take_goal_request+0x64>
 801592a:	6820      	ldr	r0, [r4, #0]
 801592c:	300c      	adds	r0, #12
 801592e:	f7f6 f821 	bl	800b974 <rcl_publisher_is_valid>
 8015932:	b1b8      	cbz	r0, 8015964 <rcl_action_take_goal_request+0x64>
 8015934:	6820      	ldr	r0, [r4, #0]
 8015936:	3010      	adds	r0, #16
 8015938:	f7f6 f81c 	bl	800b974 <rcl_publisher_is_valid>
 801593c:	b190      	cbz	r0, 8015964 <rcl_action_take_goal_request+0x64>
 801593e:	b1cd      	cbz	r5, 8015974 <rcl_action_take_goal_request+0x74>
 8015940:	b1c6      	cbz	r6, 8015974 <rcl_action_take_goal_request+0x74>
 8015942:	6820      	ldr	r0, [r4, #0]
 8015944:	4632      	mov	r2, r6
 8015946:	4629      	mov	r1, r5
 8015948:	f7fe fde6 	bl	8014518 <rcl_take_request>
 801594c:	b148      	cbz	r0, 8015962 <rcl_action_take_goal_request+0x62>
 801594e:	280a      	cmp	r0, #10
 8015950:	d007      	beq.n	8015962 <rcl_action_take_goal_request+0x62>
 8015952:	f240 2259 	movw	r2, #601	@ 0x259
 8015956:	f640 0399 	movw	r3, #2201	@ 0x899
 801595a:	4290      	cmp	r0, r2
 801595c:	bf0c      	ite	eq
 801595e:	4618      	moveq	r0, r3
 8015960:	2001      	movne	r0, #1
 8015962:	bd70      	pop	{r4, r5, r6, pc}
 8015964:	f7f7 fd00 	bl	800d368 <rcutils_reset_error>
 8015968:	f640 0098 	movw	r0, #2200	@ 0x898
 801596c:	bd70      	pop	{r4, r5, r6, pc}
 801596e:	f640 0098 	movw	r0, #2200	@ 0x898
 8015972:	bd70      	pop	{r4, r5, r6, pc}
 8015974:	200b      	movs	r0, #11
 8015976:	bd70      	pop	{r4, r5, r6, pc}
 8015978:	f640 0098 	movw	r0, #2200	@ 0x898
 801597c:	4770      	bx	lr
 801597e:	bf00      	nop

08015980 <rcl_action_send_goal_response>:
 8015980:	b390      	cbz	r0, 80159e8 <rcl_action_send_goal_response+0x68>
 8015982:	b570      	push	{r4, r5, r6, lr}
 8015984:	4604      	mov	r4, r0
 8015986:	6800      	ldr	r0, [r0, #0]
 8015988:	b348      	cbz	r0, 80159de <rcl_action_send_goal_response+0x5e>
 801598a:	460d      	mov	r5, r1
 801598c:	4616      	mov	r6, r2
 801598e:	f7fe fe1b 	bl	80145c8 <rcl_service_is_valid>
 8015992:	b1f8      	cbz	r0, 80159d4 <rcl_action_send_goal_response+0x54>
 8015994:	6820      	ldr	r0, [r4, #0]
 8015996:	3004      	adds	r0, #4
 8015998:	f7fe fe16 	bl	80145c8 <rcl_service_is_valid>
 801599c:	b1d0      	cbz	r0, 80159d4 <rcl_action_send_goal_response+0x54>
 801599e:	6820      	ldr	r0, [r4, #0]
 80159a0:	3008      	adds	r0, #8
 80159a2:	f7fe fe11 	bl	80145c8 <rcl_service_is_valid>
 80159a6:	b1a8      	cbz	r0, 80159d4 <rcl_action_send_goal_response+0x54>
 80159a8:	6820      	ldr	r0, [r4, #0]
 80159aa:	300c      	adds	r0, #12
 80159ac:	f7f5 ffe2 	bl	800b974 <rcl_publisher_is_valid>
 80159b0:	b180      	cbz	r0, 80159d4 <rcl_action_send_goal_response+0x54>
 80159b2:	6820      	ldr	r0, [r4, #0]
 80159b4:	3010      	adds	r0, #16
 80159b6:	f7f5 ffdd 	bl	800b974 <rcl_publisher_is_valid>
 80159ba:	b158      	cbz	r0, 80159d4 <rcl_action_send_goal_response+0x54>
 80159bc:	b195      	cbz	r5, 80159e4 <rcl_action_send_goal_response+0x64>
 80159be:	b18e      	cbz	r6, 80159e4 <rcl_action_send_goal_response+0x64>
 80159c0:	6820      	ldr	r0, [r4, #0]
 80159c2:	4632      	mov	r2, r6
 80159c4:	4629      	mov	r1, r5
 80159c6:	f7fe fde7 	bl	8014598 <rcl_send_response>
 80159ca:	b110      	cbz	r0, 80159d2 <rcl_action_send_goal_response+0x52>
 80159cc:	2802      	cmp	r0, #2
 80159ce:	bf18      	it	ne
 80159d0:	2001      	movne	r0, #1
 80159d2:	bd70      	pop	{r4, r5, r6, pc}
 80159d4:	f7f7 fcc8 	bl	800d368 <rcutils_reset_error>
 80159d8:	f640 0098 	movw	r0, #2200	@ 0x898
 80159dc:	bd70      	pop	{r4, r5, r6, pc}
 80159de:	f640 0098 	movw	r0, #2200	@ 0x898
 80159e2:	bd70      	pop	{r4, r5, r6, pc}
 80159e4:	200b      	movs	r0, #11
 80159e6:	bd70      	pop	{r4, r5, r6, pc}
 80159e8:	f640 0098 	movw	r0, #2200	@ 0x898
 80159ec:	4770      	bx	lr
 80159ee:	bf00      	nop

080159f0 <rcl_action_take_result_request>:
 80159f0:	2800      	cmp	r0, #0
 80159f2:	d03a      	beq.n	8015a6a <rcl_action_take_result_request+0x7a>
 80159f4:	b570      	push	{r4, r5, r6, lr}
 80159f6:	4604      	mov	r4, r0
 80159f8:	6800      	ldr	r0, [r0, #0]
 80159fa:	b388      	cbz	r0, 8015a60 <rcl_action_take_result_request+0x70>
 80159fc:	460d      	mov	r5, r1
 80159fe:	4616      	mov	r6, r2
 8015a00:	f7fe fde2 	bl	80145c8 <rcl_service_is_valid>
 8015a04:	b338      	cbz	r0, 8015a56 <rcl_action_take_result_request+0x66>
 8015a06:	6820      	ldr	r0, [r4, #0]
 8015a08:	3004      	adds	r0, #4
 8015a0a:	f7fe fddd 	bl	80145c8 <rcl_service_is_valid>
 8015a0e:	b310      	cbz	r0, 8015a56 <rcl_action_take_result_request+0x66>
 8015a10:	6820      	ldr	r0, [r4, #0]
 8015a12:	3008      	adds	r0, #8
 8015a14:	f7fe fdd8 	bl	80145c8 <rcl_service_is_valid>
 8015a18:	b1e8      	cbz	r0, 8015a56 <rcl_action_take_result_request+0x66>
 8015a1a:	6820      	ldr	r0, [r4, #0]
 8015a1c:	300c      	adds	r0, #12
 8015a1e:	f7f5 ffa9 	bl	800b974 <rcl_publisher_is_valid>
 8015a22:	b1c0      	cbz	r0, 8015a56 <rcl_action_take_result_request+0x66>
 8015a24:	6820      	ldr	r0, [r4, #0]
 8015a26:	3010      	adds	r0, #16
 8015a28:	f7f5 ffa4 	bl	800b974 <rcl_publisher_is_valid>
 8015a2c:	b198      	cbz	r0, 8015a56 <rcl_action_take_result_request+0x66>
 8015a2e:	b1d5      	cbz	r5, 8015a66 <rcl_action_take_result_request+0x76>
 8015a30:	b1ce      	cbz	r6, 8015a66 <rcl_action_take_result_request+0x76>
 8015a32:	6820      	ldr	r0, [r4, #0]
 8015a34:	4632      	mov	r2, r6
 8015a36:	4629      	mov	r1, r5
 8015a38:	3008      	adds	r0, #8
 8015a3a:	f7fe fd6d 	bl	8014518 <rcl_take_request>
 8015a3e:	b148      	cbz	r0, 8015a54 <rcl_action_take_result_request+0x64>
 8015a40:	280a      	cmp	r0, #10
 8015a42:	d007      	beq.n	8015a54 <rcl_action_take_result_request+0x64>
 8015a44:	f240 2259 	movw	r2, #601	@ 0x259
 8015a48:	f640 0399 	movw	r3, #2201	@ 0x899
 8015a4c:	4290      	cmp	r0, r2
 8015a4e:	bf0c      	ite	eq
 8015a50:	4618      	moveq	r0, r3
 8015a52:	2001      	movne	r0, #1
 8015a54:	bd70      	pop	{r4, r5, r6, pc}
 8015a56:	f7f7 fc87 	bl	800d368 <rcutils_reset_error>
 8015a5a:	f640 0098 	movw	r0, #2200	@ 0x898
 8015a5e:	bd70      	pop	{r4, r5, r6, pc}
 8015a60:	f640 0098 	movw	r0, #2200	@ 0x898
 8015a64:	bd70      	pop	{r4, r5, r6, pc}
 8015a66:	200b      	movs	r0, #11
 8015a68:	bd70      	pop	{r4, r5, r6, pc}
 8015a6a:	f640 0098 	movw	r0, #2200	@ 0x898
 8015a6e:	4770      	bx	lr

08015a70 <rcl_action_take_cancel_request>:
 8015a70:	2800      	cmp	r0, #0
 8015a72:	d03a      	beq.n	8015aea <rcl_action_take_cancel_request+0x7a>
 8015a74:	b570      	push	{r4, r5, r6, lr}
 8015a76:	4604      	mov	r4, r0
 8015a78:	6800      	ldr	r0, [r0, #0]
 8015a7a:	b388      	cbz	r0, 8015ae0 <rcl_action_take_cancel_request+0x70>
 8015a7c:	460d      	mov	r5, r1
 8015a7e:	4616      	mov	r6, r2
 8015a80:	f7fe fda2 	bl	80145c8 <rcl_service_is_valid>
 8015a84:	b338      	cbz	r0, 8015ad6 <rcl_action_take_cancel_request+0x66>
 8015a86:	6820      	ldr	r0, [r4, #0]
 8015a88:	3004      	adds	r0, #4
 8015a8a:	f7fe fd9d 	bl	80145c8 <rcl_service_is_valid>
 8015a8e:	b310      	cbz	r0, 8015ad6 <rcl_action_take_cancel_request+0x66>
 8015a90:	6820      	ldr	r0, [r4, #0]
 8015a92:	3008      	adds	r0, #8
 8015a94:	f7fe fd98 	bl	80145c8 <rcl_service_is_valid>
 8015a98:	b1e8      	cbz	r0, 8015ad6 <rcl_action_take_cancel_request+0x66>
 8015a9a:	6820      	ldr	r0, [r4, #0]
 8015a9c:	300c      	adds	r0, #12
 8015a9e:	f7f5 ff69 	bl	800b974 <rcl_publisher_is_valid>
 8015aa2:	b1c0      	cbz	r0, 8015ad6 <rcl_action_take_cancel_request+0x66>
 8015aa4:	6820      	ldr	r0, [r4, #0]
 8015aa6:	3010      	adds	r0, #16
 8015aa8:	f7f5 ff64 	bl	800b974 <rcl_publisher_is_valid>
 8015aac:	b198      	cbz	r0, 8015ad6 <rcl_action_take_cancel_request+0x66>
 8015aae:	b1d5      	cbz	r5, 8015ae6 <rcl_action_take_cancel_request+0x76>
 8015ab0:	b1ce      	cbz	r6, 8015ae6 <rcl_action_take_cancel_request+0x76>
 8015ab2:	6820      	ldr	r0, [r4, #0]
 8015ab4:	4632      	mov	r2, r6
 8015ab6:	4629      	mov	r1, r5
 8015ab8:	3004      	adds	r0, #4
 8015aba:	f7fe fd2d 	bl	8014518 <rcl_take_request>
 8015abe:	b148      	cbz	r0, 8015ad4 <rcl_action_take_cancel_request+0x64>
 8015ac0:	280a      	cmp	r0, #10
 8015ac2:	d007      	beq.n	8015ad4 <rcl_action_take_cancel_request+0x64>
 8015ac4:	f240 2259 	movw	r2, #601	@ 0x259
 8015ac8:	f640 0399 	movw	r3, #2201	@ 0x899
 8015acc:	4290      	cmp	r0, r2
 8015ace:	bf0c      	ite	eq
 8015ad0:	4618      	moveq	r0, r3
 8015ad2:	2001      	movne	r0, #1
 8015ad4:	bd70      	pop	{r4, r5, r6, pc}
 8015ad6:	f7f7 fc47 	bl	800d368 <rcutils_reset_error>
 8015ada:	f640 0098 	movw	r0, #2200	@ 0x898
 8015ade:	bd70      	pop	{r4, r5, r6, pc}
 8015ae0:	f640 0098 	movw	r0, #2200	@ 0x898
 8015ae4:	bd70      	pop	{r4, r5, r6, pc}
 8015ae6:	200b      	movs	r0, #11
 8015ae8:	bd70      	pop	{r4, r5, r6, pc}
 8015aea:	f640 0098 	movw	r0, #2200	@ 0x898
 8015aee:	4770      	bx	lr

08015af0 <rcl_action_send_cancel_response>:
 8015af0:	b398      	cbz	r0, 8015b5a <rcl_action_send_cancel_response+0x6a>
 8015af2:	b570      	push	{r4, r5, r6, lr}
 8015af4:	4604      	mov	r4, r0
 8015af6:	6800      	ldr	r0, [r0, #0]
 8015af8:	b350      	cbz	r0, 8015b50 <rcl_action_send_cancel_response+0x60>
 8015afa:	460d      	mov	r5, r1
 8015afc:	4616      	mov	r6, r2
 8015afe:	f7fe fd63 	bl	80145c8 <rcl_service_is_valid>
 8015b02:	b300      	cbz	r0, 8015b46 <rcl_action_send_cancel_response+0x56>
 8015b04:	6820      	ldr	r0, [r4, #0]
 8015b06:	3004      	adds	r0, #4
 8015b08:	f7fe fd5e 	bl	80145c8 <rcl_service_is_valid>
 8015b0c:	b1d8      	cbz	r0, 8015b46 <rcl_action_send_cancel_response+0x56>
 8015b0e:	6820      	ldr	r0, [r4, #0]
 8015b10:	3008      	adds	r0, #8
 8015b12:	f7fe fd59 	bl	80145c8 <rcl_service_is_valid>
 8015b16:	b1b0      	cbz	r0, 8015b46 <rcl_action_send_cancel_response+0x56>
 8015b18:	6820      	ldr	r0, [r4, #0]
 8015b1a:	300c      	adds	r0, #12
 8015b1c:	f7f5 ff2a 	bl	800b974 <rcl_publisher_is_valid>
 8015b20:	b188      	cbz	r0, 8015b46 <rcl_action_send_cancel_response+0x56>
 8015b22:	6820      	ldr	r0, [r4, #0]
 8015b24:	3010      	adds	r0, #16
 8015b26:	f7f5 ff25 	bl	800b974 <rcl_publisher_is_valid>
 8015b2a:	b160      	cbz	r0, 8015b46 <rcl_action_send_cancel_response+0x56>
 8015b2c:	b19d      	cbz	r5, 8015b56 <rcl_action_send_cancel_response+0x66>
 8015b2e:	b196      	cbz	r6, 8015b56 <rcl_action_send_cancel_response+0x66>
 8015b30:	6820      	ldr	r0, [r4, #0]
 8015b32:	4632      	mov	r2, r6
 8015b34:	4629      	mov	r1, r5
 8015b36:	3004      	adds	r0, #4
 8015b38:	f7fe fd2e 	bl	8014598 <rcl_send_response>
 8015b3c:	b110      	cbz	r0, 8015b44 <rcl_action_send_cancel_response+0x54>
 8015b3e:	2802      	cmp	r0, #2
 8015b40:	bf18      	it	ne
 8015b42:	2001      	movne	r0, #1
 8015b44:	bd70      	pop	{r4, r5, r6, pc}
 8015b46:	f7f7 fc0f 	bl	800d368 <rcutils_reset_error>
 8015b4a:	f640 0098 	movw	r0, #2200	@ 0x898
 8015b4e:	bd70      	pop	{r4, r5, r6, pc}
 8015b50:	f640 0098 	movw	r0, #2200	@ 0x898
 8015b54:	bd70      	pop	{r4, r5, r6, pc}
 8015b56:	200b      	movs	r0, #11
 8015b58:	bd70      	pop	{r4, r5, r6, pc}
 8015b5a:	f640 0098 	movw	r0, #2200	@ 0x898
 8015b5e:	4770      	bx	lr

08015b60 <rcl_action_wait_set_add_action_server>:
 8015b60:	2800      	cmp	r0, #0
 8015b62:	d04d      	beq.n	8015c00 <rcl_action_wait_set_add_action_server+0xa0>
 8015b64:	b570      	push	{r4, r5, r6, lr}
 8015b66:	460c      	mov	r4, r1
 8015b68:	b159      	cbz	r1, 8015b82 <rcl_action_wait_set_add_action_server+0x22>
 8015b6a:	4605      	mov	r5, r0
 8015b6c:	6808      	ldr	r0, [r1, #0]
 8015b6e:	b140      	cbz	r0, 8015b82 <rcl_action_wait_set_add_action_server+0x22>
 8015b70:	4616      	mov	r6, r2
 8015b72:	f7fe fd29 	bl	80145c8 <rcl_service_is_valid>
 8015b76:	b120      	cbz	r0, 8015b82 <rcl_action_wait_set_add_action_server+0x22>
 8015b78:	6820      	ldr	r0, [r4, #0]
 8015b7a:	3004      	adds	r0, #4
 8015b7c:	f7fe fd24 	bl	80145c8 <rcl_service_is_valid>
 8015b80:	b910      	cbnz	r0, 8015b88 <rcl_action_wait_set_add_action_server+0x28>
 8015b82:	f640 0098 	movw	r0, #2200	@ 0x898
 8015b86:	bd70      	pop	{r4, r5, r6, pc}
 8015b88:	6820      	ldr	r0, [r4, #0]
 8015b8a:	3008      	adds	r0, #8
 8015b8c:	f7fe fd1c 	bl	80145c8 <rcl_service_is_valid>
 8015b90:	2800      	cmp	r0, #0
 8015b92:	d0f6      	beq.n	8015b82 <rcl_action_wait_set_add_action_server+0x22>
 8015b94:	6820      	ldr	r0, [r4, #0]
 8015b96:	300c      	adds	r0, #12
 8015b98:	f7f5 ff04 	bl	800b9a4 <rcl_publisher_is_valid_except_context>
 8015b9c:	2800      	cmp	r0, #0
 8015b9e:	d0f0      	beq.n	8015b82 <rcl_action_wait_set_add_action_server+0x22>
 8015ba0:	6820      	ldr	r0, [r4, #0]
 8015ba2:	3010      	adds	r0, #16
 8015ba4:	f7f5 fefe 	bl	800b9a4 <rcl_publisher_is_valid_except_context>
 8015ba8:	2800      	cmp	r0, #0
 8015baa:	d0ea      	beq.n	8015b82 <rcl_action_wait_set_add_action_server+0x22>
 8015bac:	6821      	ldr	r1, [r4, #0]
 8015bae:	4628      	mov	r0, r5
 8015bb0:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8015bb4:	f7ff face 	bl	8015154 <rcl_wait_set_add_service>
 8015bb8:	2800      	cmp	r0, #0
 8015bba:	d1e4      	bne.n	8015b86 <rcl_action_wait_set_add_action_server+0x26>
 8015bbc:	6821      	ldr	r1, [r4, #0]
 8015bbe:	4628      	mov	r0, r5
 8015bc0:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8015bc4:	3104      	adds	r1, #4
 8015bc6:	f7ff fac5 	bl	8015154 <rcl_wait_set_add_service>
 8015bca:	2800      	cmp	r0, #0
 8015bcc:	d1db      	bne.n	8015b86 <rcl_action_wait_set_add_action_server+0x26>
 8015bce:	6821      	ldr	r1, [r4, #0]
 8015bd0:	4628      	mov	r0, r5
 8015bd2:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8015bd6:	3108      	adds	r1, #8
 8015bd8:	f7ff fabc 	bl	8015154 <rcl_wait_set_add_service>
 8015bdc:	2800      	cmp	r0, #0
 8015bde:	d1d2      	bne.n	8015b86 <rcl_action_wait_set_add_action_server+0x26>
 8015be0:	6821      	ldr	r1, [r4, #0]
 8015be2:	4628      	mov	r0, r5
 8015be4:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8015be8:	3114      	adds	r1, #20
 8015bea:	f7ff fa57 	bl	801509c <rcl_wait_set_add_timer>
 8015bee:	2800      	cmp	r0, #0
 8015bf0:	d1c9      	bne.n	8015b86 <rcl_action_wait_set_add_action_server+0x26>
 8015bf2:	2e00      	cmp	r6, #0
 8015bf4:	d0c7      	beq.n	8015b86 <rcl_action_wait_set_add_action_server+0x26>
 8015bf6:	6823      	ldr	r3, [r4, #0]
 8015bf8:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8015bfc:	6033      	str	r3, [r6, #0]
 8015bfe:	bd70      	pop	{r4, r5, r6, pc}
 8015c00:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015c04:	4770      	bx	lr
 8015c06:	bf00      	nop

08015c08 <rcl_action_server_wait_set_get_entities_ready>:
 8015c08:	2800      	cmp	r0, #0
 8015c0a:	d05a      	beq.n	8015cc2 <rcl_action_server_wait_set_get_entities_ready+0xba>
 8015c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c0e:	460c      	mov	r4, r1
 8015c10:	b161      	cbz	r1, 8015c2c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015c12:	4605      	mov	r5, r0
 8015c14:	6808      	ldr	r0, [r1, #0]
 8015c16:	b148      	cbz	r0, 8015c2c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015c18:	4616      	mov	r6, r2
 8015c1a:	461f      	mov	r7, r3
 8015c1c:	f7fe fcd4 	bl	80145c8 <rcl_service_is_valid>
 8015c20:	b120      	cbz	r0, 8015c2c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015c22:	6820      	ldr	r0, [r4, #0]
 8015c24:	3004      	adds	r0, #4
 8015c26:	f7fe fccf 	bl	80145c8 <rcl_service_is_valid>
 8015c2a:	b910      	cbnz	r0, 8015c32 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8015c2c:	f640 0098 	movw	r0, #2200	@ 0x898
 8015c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c32:	6820      	ldr	r0, [r4, #0]
 8015c34:	3008      	adds	r0, #8
 8015c36:	f7fe fcc7 	bl	80145c8 <rcl_service_is_valid>
 8015c3a:	2800      	cmp	r0, #0
 8015c3c:	d0f6      	beq.n	8015c2c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015c3e:	6820      	ldr	r0, [r4, #0]
 8015c40:	300c      	adds	r0, #12
 8015c42:	f7f5 feaf 	bl	800b9a4 <rcl_publisher_is_valid_except_context>
 8015c46:	2800      	cmp	r0, #0
 8015c48:	d0f0      	beq.n	8015c2c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015c4a:	6820      	ldr	r0, [r4, #0]
 8015c4c:	3010      	adds	r0, #16
 8015c4e:	f7f5 fea9 	bl	800b9a4 <rcl_publisher_is_valid_except_context>
 8015c52:	2800      	cmp	r0, #0
 8015c54:	d0ea      	beq.n	8015c2c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015c56:	b3be      	cbz	r6, 8015cc8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8015c58:	b3b7      	cbz	r7, 8015cc8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8015c5a:	9b06      	ldr	r3, [sp, #24]
 8015c5c:	b3a3      	cbz	r3, 8015cc8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8015c5e:	9b07      	ldr	r3, [sp, #28]
 8015c60:	b393      	cbz	r3, 8015cc8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8015c62:	6821      	ldr	r1, [r4, #0]
 8015c64:	692a      	ldr	r2, [r5, #16]
 8015c66:	6a2c      	ldr	r4, [r5, #32]
 8015c68:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8015c6c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8015c70:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8015c74:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8015c78:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8015c7c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8015c80:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8015c84:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8015c88:	1a64      	subs	r4, r4, r1
 8015c8a:	fab4 f484 	clz	r4, r4
 8015c8e:	0964      	lsrs	r4, r4, #5
 8015c90:	7034      	strb	r4, [r6, #0]
 8015c92:	1d0c      	adds	r4, r1, #4
 8015c94:	1b1b      	subs	r3, r3, r4
 8015c96:	fab3 f383 	clz	r3, r3
 8015c9a:	095b      	lsrs	r3, r3, #5
 8015c9c:	f101 0408 	add.w	r4, r1, #8
 8015ca0:	703b      	strb	r3, [r7, #0]
 8015ca2:	f101 0314 	add.w	r3, r1, #20
 8015ca6:	1b01      	subs	r1, r0, r4
 8015ca8:	1ad3      	subs	r3, r2, r3
 8015caa:	fab1 f181 	clz	r1, r1
 8015cae:	9a06      	ldr	r2, [sp, #24]
 8015cb0:	0949      	lsrs	r1, r1, #5
 8015cb2:	7011      	strb	r1, [r2, #0]
 8015cb4:	fab3 f383 	clz	r3, r3
 8015cb8:	9a07      	ldr	r2, [sp, #28]
 8015cba:	095b      	lsrs	r3, r3, #5
 8015cbc:	2000      	movs	r0, #0
 8015cbe:	7013      	strb	r3, [r2, #0]
 8015cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015cc2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015cc6:	4770      	bx	lr
 8015cc8:	200b      	movs	r0, #11
 8015cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015ccc <_execute_event_handler>:
 8015ccc:	2002      	movs	r0, #2
 8015cce:	4770      	bx	lr

08015cd0 <_cancel_goal_event_handler>:
 8015cd0:	2003      	movs	r0, #3
 8015cd2:	4770      	bx	lr

08015cd4 <_succeed_event_handler>:
 8015cd4:	2004      	movs	r0, #4
 8015cd6:	4770      	bx	lr

08015cd8 <_abort_event_handler>:
 8015cd8:	2006      	movs	r0, #6
 8015cda:	4770      	bx	lr

08015cdc <_canceled_event_handler>:
 8015cdc:	2005      	movs	r0, #5
 8015cde:	4770      	bx	lr

08015ce0 <rcl_action_transition_goal_state>:
 8015ce0:	b2c2      	uxtb	r2, r0
 8015ce2:	2a06      	cmp	r2, #6
 8015ce4:	d80c      	bhi.n	8015d00 <rcl_action_transition_goal_state+0x20>
 8015ce6:	2904      	cmp	r1, #4
 8015ce8:	d80a      	bhi.n	8015d00 <rcl_action_transition_goal_state+0x20>
 8015cea:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8015cee:	b410      	push	{r4}
 8015cf0:	1853      	adds	r3, r2, r1
 8015cf2:	4c06      	ldr	r4, [pc, #24]	@ (8015d0c <rcl_action_transition_goal_state+0x2c>)
 8015cf4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8015cf8:	b123      	cbz	r3, 8015d04 <rcl_action_transition_goal_state+0x24>
 8015cfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015cfe:	4718      	bx	r3
 8015d00:	2000      	movs	r0, #0
 8015d02:	4770      	bx	lr
 8015d04:	2000      	movs	r0, #0
 8015d06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015d0a:	4770      	bx	lr
 8015d0c:	0801a480 	.word	0x0801a480

08015d10 <rcl_action_get_zero_initialized_cancel_response>:
 8015d10:	b510      	push	{r4, lr}
 8015d12:	4c07      	ldr	r4, [pc, #28]	@ (8015d30 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8015d14:	4686      	mov	lr, r0
 8015d16:	4684      	mov	ip, r0
 8015d18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015d1a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015d1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015d20:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015d24:	6823      	ldr	r3, [r4, #0]
 8015d26:	f8cc 3000 	str.w	r3, [ip]
 8015d2a:	4670      	mov	r0, lr
 8015d2c:	bd10      	pop	{r4, pc}
 8015d2e:	bf00      	nop
 8015d30:	0801a50c 	.word	0x0801a50c

08015d34 <rclc_action_send_result_request>:
 8015d34:	b1d0      	cbz	r0, 8015d6c <rclc_action_send_result_request+0x38>
 8015d36:	b500      	push	{lr}
 8015d38:	4684      	mov	ip, r0
 8015d3a:	b087      	sub	sp, #28
 8015d3c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8015d40:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8015d44:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8015d48:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8015d4c:	f10d 0e08 	add.w	lr, sp, #8
 8015d50:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015d54:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8015d58:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8015d5c:	a902      	add	r1, sp, #8
 8015d5e:	3010      	adds	r0, #16
 8015d60:	f7ff fbda 	bl	8015518 <rcl_action_send_result_request>
 8015d64:	b920      	cbnz	r0, 8015d70 <rclc_action_send_result_request+0x3c>
 8015d66:	b007      	add	sp, #28
 8015d68:	f85d fb04 	ldr.w	pc, [sp], #4
 8015d6c:	200b      	movs	r0, #11
 8015d6e:	4770      	bx	lr
 8015d70:	9001      	str	r0, [sp, #4]
 8015d72:	f7f7 faf9 	bl	800d368 <rcutils_reset_error>
 8015d76:	9801      	ldr	r0, [sp, #4]
 8015d78:	b007      	add	sp, #28
 8015d7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8015d7e:	bf00      	nop

08015d80 <rclc_action_take_goal_handle>:
 8015d80:	b160      	cbz	r0, 8015d9c <rclc_action_take_goal_handle+0x1c>
 8015d82:	6883      	ldr	r3, [r0, #8]
 8015d84:	b143      	cbz	r3, 8015d98 <rclc_action_take_goal_handle+0x18>
 8015d86:	6819      	ldr	r1, [r3, #0]
 8015d88:	6081      	str	r1, [r0, #8]
 8015d8a:	2200      	movs	r2, #0
 8015d8c:	721a      	strb	r2, [r3, #8]
 8015d8e:	68c1      	ldr	r1, [r0, #12]
 8015d90:	6019      	str	r1, [r3, #0]
 8015d92:	621a      	str	r2, [r3, #32]
 8015d94:	849a      	strh	r2, [r3, #36]	@ 0x24
 8015d96:	60c3      	str	r3, [r0, #12]
 8015d98:	4618      	mov	r0, r3
 8015d9a:	4770      	bx	lr
 8015d9c:	4603      	mov	r3, r0
 8015d9e:	e7fb      	b.n	8015d98 <rclc_action_take_goal_handle+0x18>

08015da0 <rclc_action_remove_used_goal_handle>:
 8015da0:	b180      	cbz	r0, 8015dc4 <rclc_action_remove_used_goal_handle+0x24>
 8015da2:	b179      	cbz	r1, 8015dc4 <rclc_action_remove_used_goal_handle+0x24>
 8015da4:	68c3      	ldr	r3, [r0, #12]
 8015da6:	4299      	cmp	r1, r3
 8015da8:	d00d      	beq.n	8015dc6 <rclc_action_remove_used_goal_handle+0x26>
 8015daa:	b12b      	cbz	r3, 8015db8 <rclc_action_remove_used_goal_handle+0x18>
 8015dac:	681a      	ldr	r2, [r3, #0]
 8015dae:	4291      	cmp	r1, r2
 8015db0:	d003      	beq.n	8015dba <rclc_action_remove_used_goal_handle+0x1a>
 8015db2:	4613      	mov	r3, r2
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d1f9      	bne.n	8015dac <rclc_action_remove_used_goal_handle+0xc>
 8015db8:	4770      	bx	lr
 8015dba:	680a      	ldr	r2, [r1, #0]
 8015dbc:	601a      	str	r2, [r3, #0]
 8015dbe:	6883      	ldr	r3, [r0, #8]
 8015dc0:	600b      	str	r3, [r1, #0]
 8015dc2:	6081      	str	r1, [r0, #8]
 8015dc4:	4770      	bx	lr
 8015dc6:	680b      	ldr	r3, [r1, #0]
 8015dc8:	60c3      	str	r3, [r0, #12]
 8015dca:	e7f8      	b.n	8015dbe <rclc_action_remove_used_goal_handle+0x1e>

08015dcc <rclc_action_find_goal_handle_by_uuid>:
 8015dcc:	b538      	push	{r3, r4, r5, lr}
 8015dce:	b180      	cbz	r0, 8015df2 <rclc_action_find_goal_handle_by_uuid+0x26>
 8015dd0:	460d      	mov	r5, r1
 8015dd2:	b181      	cbz	r1, 8015df6 <rclc_action_find_goal_handle_by_uuid+0x2a>
 8015dd4:	68c4      	ldr	r4, [r0, #12]
 8015dd6:	b914      	cbnz	r4, 8015dde <rclc_action_find_goal_handle_by_uuid+0x12>
 8015dd8:	e009      	b.n	8015dee <rclc_action_find_goal_handle_by_uuid+0x22>
 8015dda:	6824      	ldr	r4, [r4, #0]
 8015ddc:	b13c      	cbz	r4, 8015dee <rclc_action_find_goal_handle_by_uuid+0x22>
 8015dde:	f104 0009 	add.w	r0, r4, #9
 8015de2:	2210      	movs	r2, #16
 8015de4:	4629      	mov	r1, r5
 8015de6:	f002 fd97 	bl	8018918 <memcmp>
 8015dea:	2800      	cmp	r0, #0
 8015dec:	d1f5      	bne.n	8015dda <rclc_action_find_goal_handle_by_uuid+0xe>
 8015dee:	4620      	mov	r0, r4
 8015df0:	bd38      	pop	{r3, r4, r5, pc}
 8015df2:	4604      	mov	r4, r0
 8015df4:	e7fb      	b.n	8015dee <rclc_action_find_goal_handle_by_uuid+0x22>
 8015df6:	460c      	mov	r4, r1
 8015df8:	e7f9      	b.n	8015dee <rclc_action_find_goal_handle_by_uuid+0x22>
 8015dfa:	bf00      	nop

08015dfc <rclc_action_find_first_handle_by_status>:
 8015dfc:	b140      	cbz	r0, 8015e10 <rclc_action_find_first_handle_by_status+0x14>
 8015dfe:	68c0      	ldr	r0, [r0, #12]
 8015e00:	b910      	cbnz	r0, 8015e08 <rclc_action_find_first_handle_by_status+0xc>
 8015e02:	e005      	b.n	8015e10 <rclc_action_find_first_handle_by_status+0x14>
 8015e04:	6800      	ldr	r0, [r0, #0]
 8015e06:	b118      	cbz	r0, 8015e10 <rclc_action_find_first_handle_by_status+0x14>
 8015e08:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8015e0c:	428b      	cmp	r3, r1
 8015e0e:	d1f9      	bne.n	8015e04 <rclc_action_find_first_handle_by_status+0x8>
 8015e10:	4770      	bx	lr
 8015e12:	bf00      	nop

08015e14 <rclc_action_find_first_terminated_handle>:
 8015e14:	b140      	cbz	r0, 8015e28 <rclc_action_find_first_terminated_handle+0x14>
 8015e16:	68c0      	ldr	r0, [r0, #12]
 8015e18:	b910      	cbnz	r0, 8015e20 <rclc_action_find_first_terminated_handle+0xc>
 8015e1a:	e005      	b.n	8015e28 <rclc_action_find_first_terminated_handle+0x14>
 8015e1c:	6800      	ldr	r0, [r0, #0]
 8015e1e:	b118      	cbz	r0, 8015e28 <rclc_action_find_first_terminated_handle+0x14>
 8015e20:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8015e24:	2b03      	cmp	r3, #3
 8015e26:	ddf9      	ble.n	8015e1c <rclc_action_find_first_terminated_handle+0x8>
 8015e28:	4770      	bx	lr
 8015e2a:	bf00      	nop

08015e2c <rclc_action_find_handle_by_goal_request_sequence_number>:
 8015e2c:	b170      	cbz	r0, 8015e4c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8015e2e:	68c0      	ldr	r0, [r0, #12]
 8015e30:	b160      	cbz	r0, 8015e4c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8015e32:	b410      	push	{r4}
 8015e34:	e001      	b.n	8015e3a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8015e36:	6800      	ldr	r0, [r0, #0]
 8015e38:	b128      	cbz	r0, 8015e46 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8015e3a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8015e3e:	4299      	cmp	r1, r3
 8015e40:	bf08      	it	eq
 8015e42:	4294      	cmpeq	r4, r2
 8015e44:	d1f7      	bne.n	8015e36 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8015e46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015e4a:	4770      	bx	lr
 8015e4c:	4770      	bx	lr
 8015e4e:	bf00      	nop

08015e50 <rclc_action_find_handle_by_result_request_sequence_number>:
 8015e50:	b170      	cbz	r0, 8015e70 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8015e52:	68c0      	ldr	r0, [r0, #12]
 8015e54:	b160      	cbz	r0, 8015e70 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8015e56:	b410      	push	{r4}
 8015e58:	e001      	b.n	8015e5e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8015e5a:	6800      	ldr	r0, [r0, #0]
 8015e5c:	b128      	cbz	r0, 8015e6a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8015e5e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8015e62:	4299      	cmp	r1, r3
 8015e64:	bf08      	it	eq
 8015e66:	4294      	cmpeq	r4, r2
 8015e68:	d1f7      	bne.n	8015e5a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8015e6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015e6e:	4770      	bx	lr
 8015e70:	4770      	bx	lr
 8015e72:	bf00      	nop

08015e74 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8015e74:	b170      	cbz	r0, 8015e94 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8015e76:	68c0      	ldr	r0, [r0, #12]
 8015e78:	b160      	cbz	r0, 8015e94 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8015e7a:	b410      	push	{r4}
 8015e7c:	e001      	b.n	8015e82 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8015e7e:	6800      	ldr	r0, [r0, #0]
 8015e80:	b128      	cbz	r0, 8015e8e <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8015e82:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8015e86:	4299      	cmp	r1, r3
 8015e88:	bf08      	it	eq
 8015e8a:	4294      	cmpeq	r4, r2
 8015e8c:	d1f7      	bne.n	8015e7e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8015e8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015e92:	4770      	bx	lr
 8015e94:	4770      	bx	lr
 8015e96:	bf00      	nop

08015e98 <rclc_action_find_first_handle_with_goal_response>:
 8015e98:	b140      	cbz	r0, 8015eac <rclc_action_find_first_handle_with_goal_response+0x14>
 8015e9a:	68c0      	ldr	r0, [r0, #12]
 8015e9c:	b910      	cbnz	r0, 8015ea4 <rclc_action_find_first_handle_with_goal_response+0xc>
 8015e9e:	e005      	b.n	8015eac <rclc_action_find_first_handle_with_goal_response+0x14>
 8015ea0:	6800      	ldr	r0, [r0, #0]
 8015ea2:	b118      	cbz	r0, 8015eac <rclc_action_find_first_handle_with_goal_response+0x14>
 8015ea4:	f890 3020 	ldrb.w	r3, [r0, #32]
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d0f9      	beq.n	8015ea0 <rclc_action_find_first_handle_with_goal_response+0x8>
 8015eac:	4770      	bx	lr
 8015eae:	bf00      	nop

08015eb0 <rclc_action_find_first_handle_with_result_response>:
 8015eb0:	b140      	cbz	r0, 8015ec4 <rclc_action_find_first_handle_with_result_response+0x14>
 8015eb2:	68c0      	ldr	r0, [r0, #12]
 8015eb4:	b910      	cbnz	r0, 8015ebc <rclc_action_find_first_handle_with_result_response+0xc>
 8015eb6:	e005      	b.n	8015ec4 <rclc_action_find_first_handle_with_result_response+0x14>
 8015eb8:	6800      	ldr	r0, [r0, #0]
 8015eba:	b118      	cbz	r0, 8015ec4 <rclc_action_find_first_handle_with_result_response+0x14>
 8015ebc:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d0f9      	beq.n	8015eb8 <rclc_action_find_first_handle_with_result_response+0x8>
 8015ec4:	4770      	bx	lr
 8015ec6:	bf00      	nop

08015ec8 <rclc_action_server_response_goal_request>:
 8015ec8:	b198      	cbz	r0, 8015ef2 <rclc_action_server_response_goal_request+0x2a>
 8015eca:	b510      	push	{r4, lr}
 8015ecc:	6844      	ldr	r4, [r0, #4]
 8015ece:	b086      	sub	sp, #24
 8015ed0:	2200      	movs	r2, #0
 8015ed2:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8015ed6:	460b      	mov	r3, r1
 8015ed8:	9205      	str	r2, [sp, #20]
 8015eda:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8015ede:	aa03      	add	r2, sp, #12
 8015ee0:	f104 0010 	add.w	r0, r4, #16
 8015ee4:	f88d 300c 	strb.w	r3, [sp, #12]
 8015ee8:	f7ff fd4a 	bl	8015980 <rcl_action_send_goal_response>
 8015eec:	b918      	cbnz	r0, 8015ef6 <rclc_action_server_response_goal_request+0x2e>
 8015eee:	b006      	add	sp, #24
 8015ef0:	bd10      	pop	{r4, pc}
 8015ef2:	200b      	movs	r0, #11
 8015ef4:	4770      	bx	lr
 8015ef6:	9001      	str	r0, [sp, #4]
 8015ef8:	f7f7 fa36 	bl	800d368 <rcutils_reset_error>
 8015efc:	9801      	ldr	r0, [sp, #4]
 8015efe:	b006      	add	sp, #24
 8015f00:	bd10      	pop	{r4, pc}
 8015f02:	bf00      	nop
 8015f04:	0000      	movs	r0, r0
	...

08015f08 <rclc_action_server_goal_cancel_accept>:
 8015f08:	b310      	cbz	r0, 8015f50 <rclc_action_server_goal_cancel_accept+0x48>
 8015f0a:	b510      	push	{r4, lr}
 8015f0c:	b090      	sub	sp, #64	@ 0x40
 8015f0e:	4604      	mov	r4, r0
 8015f10:	a806      	add	r0, sp, #24
 8015f12:	f7ff fefd 	bl	8015d10 <rcl_action_get_zero_initialized_cancel_response>
 8015f16:	2300      	movs	r3, #0
 8015f18:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8015f1c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8015f20:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8015f24:	f88d 3018 	strb.w	r3, [sp, #24]
 8015f28:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8015f2c:	f8cd d01c 	str.w	sp, [sp, #28]
 8015f30:	46ec      	mov	ip, sp
 8015f32:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015f36:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8015f58 <rclc_action_server_goal_cancel_accept+0x50>
 8015f3a:	6860      	ldr	r0, [r4, #4]
 8015f3c:	aa06      	add	r2, sp, #24
 8015f3e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8015f42:	3010      	adds	r0, #16
 8015f44:	ed8d 7b08 	vstr	d7, [sp, #32]
 8015f48:	f7ff fdd2 	bl	8015af0 <rcl_action_send_cancel_response>
 8015f4c:	b010      	add	sp, #64	@ 0x40
 8015f4e:	bd10      	pop	{r4, pc}
 8015f50:	200b      	movs	r0, #11
 8015f52:	4770      	bx	lr
 8015f54:	f3af 8000 	nop.w
 8015f58:	00000001 	.word	0x00000001
 8015f5c:	00000001 	.word	0x00000001

08015f60 <rclc_action_server_goal_cancel_reject>:
 8015f60:	b082      	sub	sp, #8
 8015f62:	b530      	push	{r4, r5, lr}
 8015f64:	b08b      	sub	sp, #44	@ 0x2c
 8015f66:	ac0e      	add	r4, sp, #56	@ 0x38
 8015f68:	e884 000c 	stmia.w	r4, {r2, r3}
 8015f6c:	b188      	cbz	r0, 8015f92 <rclc_action_server_goal_cancel_reject+0x32>
 8015f6e:	4604      	mov	r4, r0
 8015f70:	a801      	add	r0, sp, #4
 8015f72:	460d      	mov	r5, r1
 8015f74:	f7ff fecc 	bl	8015d10 <rcl_action_get_zero_initialized_cancel_response>
 8015f78:	aa01      	add	r2, sp, #4
 8015f7a:	a90e      	add	r1, sp, #56	@ 0x38
 8015f7c:	f104 0010 	add.w	r0, r4, #16
 8015f80:	f88d 5004 	strb.w	r5, [sp, #4]
 8015f84:	f7ff fdb4 	bl	8015af0 <rcl_action_send_cancel_response>
 8015f88:	b00b      	add	sp, #44	@ 0x2c
 8015f8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015f8e:	b002      	add	sp, #8
 8015f90:	4770      	bx	lr
 8015f92:	200b      	movs	r0, #11
 8015f94:	b00b      	add	sp, #44	@ 0x2c
 8015f96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015f9a:	b002      	add	sp, #8
 8015f9c:	4770      	bx	lr
 8015f9e:	bf00      	nop

08015fa0 <rcutils_string_array_fini>:
 8015fa0:	b320      	cbz	r0, 8015fec <rcutils_string_array_fini+0x4c>
 8015fa2:	b570      	push	{r4, r5, r6, lr}
 8015fa4:	4604      	mov	r4, r0
 8015fa6:	6840      	ldr	r0, [r0, #4]
 8015fa8:	b1d8      	cbz	r0, 8015fe2 <rcutils_string_array_fini+0x42>
 8015faa:	f104 0008 	add.w	r0, r4, #8
 8015fae:	f7f7 f8fb 	bl	800d1a8 <rcutils_allocator_is_valid>
 8015fb2:	b1b8      	cbz	r0, 8015fe4 <rcutils_string_array_fini+0x44>
 8015fb4:	6823      	ldr	r3, [r4, #0]
 8015fb6:	b1bb      	cbz	r3, 8015fe8 <rcutils_string_array_fini+0x48>
 8015fb8:	2500      	movs	r5, #0
 8015fba:	6860      	ldr	r0, [r4, #4]
 8015fbc:	462e      	mov	r6, r5
 8015fbe:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8015fc2:	68e3      	ldr	r3, [r4, #12]
 8015fc4:	69a1      	ldr	r1, [r4, #24]
 8015fc6:	4798      	blx	r3
 8015fc8:	e9d4 3000 	ldrd	r3, r0, [r4]
 8015fcc:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8015fd0:	3501      	adds	r5, #1
 8015fd2:	429d      	cmp	r5, r3
 8015fd4:	d3f3      	bcc.n	8015fbe <rcutils_string_array_fini+0x1e>
 8015fd6:	68e3      	ldr	r3, [r4, #12]
 8015fd8:	69a1      	ldr	r1, [r4, #24]
 8015fda:	4798      	blx	r3
 8015fdc:	2000      	movs	r0, #0
 8015fde:	e9c4 0000 	strd	r0, r0, [r4]
 8015fe2:	bd70      	pop	{r4, r5, r6, pc}
 8015fe4:	200b      	movs	r0, #11
 8015fe6:	bd70      	pop	{r4, r5, r6, pc}
 8015fe8:	6860      	ldr	r0, [r4, #4]
 8015fea:	e7f4      	b.n	8015fd6 <rcutils_string_array_fini+0x36>
 8015fec:	200b      	movs	r0, #11
 8015fee:	4770      	bx	lr

08015ff0 <rcutils_get_zero_initialized_string_map>:
 8015ff0:	4b01      	ldr	r3, [pc, #4]	@ (8015ff8 <rcutils_get_zero_initialized_string_map+0x8>)
 8015ff2:	2000      	movs	r0, #0
 8015ff4:	6018      	str	r0, [r3, #0]
 8015ff6:	4770      	bx	lr
 8015ff8:	20010f28 	.word	0x20010f28

08015ffc <rcutils_string_map_reserve>:
 8015ffc:	2800      	cmp	r0, #0
 8015ffe:	d05f      	beq.n	80160c0 <rcutils_string_map_reserve+0xc4>
 8016000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016004:	460c      	mov	r4, r1
 8016006:	6801      	ldr	r1, [r0, #0]
 8016008:	b082      	sub	sp, #8
 801600a:	4605      	mov	r5, r0
 801600c:	b129      	cbz	r1, 801601a <rcutils_string_map_reserve+0x1e>
 801600e:	68cb      	ldr	r3, [r1, #12]
 8016010:	42a3      	cmp	r3, r4
 8016012:	d906      	bls.n	8016022 <rcutils_string_map_reserve+0x26>
 8016014:	461c      	mov	r4, r3
 8016016:	2900      	cmp	r1, #0
 8016018:	d1f9      	bne.n	801600e <rcutils_string_map_reserve+0x12>
 801601a:	201f      	movs	r0, #31
 801601c:	b002      	add	sp, #8
 801601e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016022:	688b      	ldr	r3, [r1, #8]
 8016024:	42a3      	cmp	r3, r4
 8016026:	d047      	beq.n	80160b8 <rcutils_string_map_reserve+0xbc>
 8016028:	6a0e      	ldr	r6, [r1, #32]
 801602a:	2c00      	cmp	r4, #0
 801602c:	d034      	beq.n	8016098 <rcutils_string_map_reserve+0x9c>
 801602e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8016032:	d243      	bcs.n	80160bc <rcutils_string_map_reserve+0xc0>
 8016034:	00a7      	lsls	r7, r4, #2
 8016036:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801603a:	6808      	ldr	r0, [r1, #0]
 801603c:	4632      	mov	r2, r6
 801603e:	4639      	mov	r1, r7
 8016040:	47c0      	blx	r8
 8016042:	2800      	cmp	r0, #0
 8016044:	d03a      	beq.n	80160bc <rcutils_string_map_reserve+0xc0>
 8016046:	682b      	ldr	r3, [r5, #0]
 8016048:	4632      	mov	r2, r6
 801604a:	6018      	str	r0, [r3, #0]
 801604c:	4639      	mov	r1, r7
 801604e:	6858      	ldr	r0, [r3, #4]
 8016050:	47c0      	blx	r8
 8016052:	2800      	cmp	r0, #0
 8016054:	d032      	beq.n	80160bc <rcutils_string_map_reserve+0xc0>
 8016056:	682d      	ldr	r5, [r5, #0]
 8016058:	68ab      	ldr	r3, [r5, #8]
 801605a:	6068      	str	r0, [r5, #4]
 801605c:	42a3      	cmp	r3, r4
 801605e:	d226      	bcs.n	80160ae <rcutils_string_map_reserve+0xb2>
 8016060:	682a      	ldr	r2, [r5, #0]
 8016062:	eb00 0c07 	add.w	ip, r0, r7
 8016066:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 801606a:	45e6      	cmp	lr, ip
 801606c:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8016070:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8016074:	d203      	bcs.n	801607e <rcutils_string_map_reserve+0x82>
 8016076:	eb02 0c07 	add.w	ip, r2, r7
 801607a:	4566      	cmp	r6, ip
 801607c:	d322      	bcc.n	80160c4 <rcutils_string_map_reserve+0xc8>
 801607e:	1ae3      	subs	r3, r4, r3
 8016080:	009a      	lsls	r2, r3, #2
 8016082:	4670      	mov	r0, lr
 8016084:	2100      	movs	r1, #0
 8016086:	9201      	str	r2, [sp, #4]
 8016088:	f002 fc70 	bl	801896c <memset>
 801608c:	9a01      	ldr	r2, [sp, #4]
 801608e:	2100      	movs	r1, #0
 8016090:	4630      	mov	r0, r6
 8016092:	f002 fc6b 	bl	801896c <memset>
 8016096:	e00a      	b.n	80160ae <rcutils_string_map_reserve+0xb2>
 8016098:	694f      	ldr	r7, [r1, #20]
 801609a:	6808      	ldr	r0, [r1, #0]
 801609c:	4631      	mov	r1, r6
 801609e:	47b8      	blx	r7
 80160a0:	682b      	ldr	r3, [r5, #0]
 80160a2:	4631      	mov	r1, r6
 80160a4:	6858      	ldr	r0, [r3, #4]
 80160a6:	601c      	str	r4, [r3, #0]
 80160a8:	47b8      	blx	r7
 80160aa:	682d      	ldr	r5, [r5, #0]
 80160ac:	606c      	str	r4, [r5, #4]
 80160ae:	2000      	movs	r0, #0
 80160b0:	60ac      	str	r4, [r5, #8]
 80160b2:	b002      	add	sp, #8
 80160b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160b8:	2000      	movs	r0, #0
 80160ba:	e7af      	b.n	801601c <rcutils_string_map_reserve+0x20>
 80160bc:	200a      	movs	r0, #10
 80160be:	e7ad      	b.n	801601c <rcutils_string_map_reserve+0x20>
 80160c0:	200b      	movs	r0, #11
 80160c2:	4770      	bx	lr
 80160c4:	1f0b      	subs	r3, r1, #4
 80160c6:	4418      	add	r0, r3
 80160c8:	4413      	add	r3, r2
 80160ca:	3a04      	subs	r2, #4
 80160cc:	4417      	add	r7, r2
 80160ce:	2200      	movs	r2, #0
 80160d0:	f843 2f04 	str.w	r2, [r3, #4]!
 80160d4:	42bb      	cmp	r3, r7
 80160d6:	f840 2f04 	str.w	r2, [r0, #4]!
 80160da:	d1f9      	bne.n	80160d0 <rcutils_string_map_reserve+0xd4>
 80160dc:	e7e7      	b.n	80160ae <rcutils_string_map_reserve+0xb2>
 80160de:	bf00      	nop

080160e0 <rcutils_string_map_init>:
 80160e0:	b082      	sub	sp, #8
 80160e2:	b570      	push	{r4, r5, r6, lr}
 80160e4:	ac04      	add	r4, sp, #16
 80160e6:	e884 000c 	stmia.w	r4, {r2, r3}
 80160ea:	b380      	cbz	r0, 801614e <rcutils_string_map_init+0x6e>
 80160ec:	6806      	ldr	r6, [r0, #0]
 80160ee:	4604      	mov	r4, r0
 80160f0:	b12e      	cbz	r6, 80160fe <rcutils_string_map_init+0x1e>
 80160f2:	251e      	movs	r5, #30
 80160f4:	4628      	mov	r0, r5
 80160f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80160fa:	b002      	add	sp, #8
 80160fc:	4770      	bx	lr
 80160fe:	a804      	add	r0, sp, #16
 8016100:	460d      	mov	r5, r1
 8016102:	f7f7 f851 	bl	800d1a8 <rcutils_allocator_is_valid>
 8016106:	b310      	cbz	r0, 801614e <rcutils_string_map_init+0x6e>
 8016108:	9b04      	ldr	r3, [sp, #16]
 801610a:	9908      	ldr	r1, [sp, #32]
 801610c:	2024      	movs	r0, #36	@ 0x24
 801610e:	4798      	blx	r3
 8016110:	6020      	str	r0, [r4, #0]
 8016112:	b310      	cbz	r0, 801615a <rcutils_string_map_init+0x7a>
 8016114:	f10d 0e10 	add.w	lr, sp, #16
 8016118:	e9c0 6600 	strd	r6, r6, [r0]
 801611c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8016120:	f100 0c10 	add.w	ip, r0, #16
 8016124:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016128:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801612c:	f8de 3000 	ldr.w	r3, [lr]
 8016130:	f8cc 3000 	str.w	r3, [ip]
 8016134:	4629      	mov	r1, r5
 8016136:	4620      	mov	r0, r4
 8016138:	f7ff ff60 	bl	8015ffc <rcutils_string_map_reserve>
 801613c:	4605      	mov	r5, r0
 801613e:	2800      	cmp	r0, #0
 8016140:	d0d8      	beq.n	80160f4 <rcutils_string_map_init+0x14>
 8016142:	9b05      	ldr	r3, [sp, #20]
 8016144:	9908      	ldr	r1, [sp, #32]
 8016146:	6820      	ldr	r0, [r4, #0]
 8016148:	4798      	blx	r3
 801614a:	6026      	str	r6, [r4, #0]
 801614c:	e7d2      	b.n	80160f4 <rcutils_string_map_init+0x14>
 801614e:	250b      	movs	r5, #11
 8016150:	4628      	mov	r0, r5
 8016152:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016156:	b002      	add	sp, #8
 8016158:	4770      	bx	lr
 801615a:	250a      	movs	r5, #10
 801615c:	e7ca      	b.n	80160f4 <rcutils_string_map_init+0x14>
 801615e:	bf00      	nop

08016160 <rcutils_string_map_fini>:
 8016160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016164:	b082      	sub	sp, #8
 8016166:	2800      	cmp	r0, #0
 8016168:	d03a      	beq.n	80161e0 <rcutils_string_map_fini+0x80>
 801616a:	6804      	ldr	r4, [r0, #0]
 801616c:	4606      	mov	r6, r0
 801616e:	2c00      	cmp	r4, #0
 8016170:	d032      	beq.n	80161d8 <rcutils_string_map_fini+0x78>
 8016172:	68a3      	ldr	r3, [r4, #8]
 8016174:	b32b      	cbz	r3, 80161c2 <rcutils_string_map_fini+0x62>
 8016176:	2500      	movs	r5, #0
 8016178:	6822      	ldr	r2, [r4, #0]
 801617a:	462f      	mov	r7, r5
 801617c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8016180:	b1e0      	cbz	r0, 80161bc <rcutils_string_map_fini+0x5c>
 8016182:	6a21      	ldr	r1, [r4, #32]
 8016184:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8016188:	9101      	str	r1, [sp, #4]
 801618a:	47c0      	blx	r8
 801618c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016190:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8016194:	9901      	ldr	r1, [sp, #4]
 8016196:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801619a:	47c0      	blx	r8
 801619c:	68e3      	ldr	r3, [r4, #12]
 801619e:	6862      	ldr	r2, [r4, #4]
 80161a0:	3b01      	subs	r3, #1
 80161a2:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80161a6:	60e3      	str	r3, [r4, #12]
 80161a8:	6834      	ldr	r4, [r6, #0]
 80161aa:	68a3      	ldr	r3, [r4, #8]
 80161ac:	3501      	adds	r5, #1
 80161ae:	429d      	cmp	r5, r3
 80161b0:	d207      	bcs.n	80161c2 <rcutils_string_map_fini+0x62>
 80161b2:	6822      	ldr	r2, [r4, #0]
 80161b4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80161b8:	2800      	cmp	r0, #0
 80161ba:	d1e2      	bne.n	8016182 <rcutils_string_map_fini+0x22>
 80161bc:	3501      	adds	r5, #1
 80161be:	429d      	cmp	r5, r3
 80161c0:	d3dc      	bcc.n	801617c <rcutils_string_map_fini+0x1c>
 80161c2:	2100      	movs	r1, #0
 80161c4:	4630      	mov	r0, r6
 80161c6:	f7ff ff19 	bl	8015ffc <rcutils_string_map_reserve>
 80161ca:	4604      	mov	r4, r0
 80161cc:	b920      	cbnz	r0, 80161d8 <rcutils_string_map_fini+0x78>
 80161ce:	6830      	ldr	r0, [r6, #0]
 80161d0:	6943      	ldr	r3, [r0, #20]
 80161d2:	6a01      	ldr	r1, [r0, #32]
 80161d4:	4798      	blx	r3
 80161d6:	6034      	str	r4, [r6, #0]
 80161d8:	4620      	mov	r0, r4
 80161da:	b002      	add	sp, #8
 80161dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161e0:	240b      	movs	r4, #11
 80161e2:	4620      	mov	r0, r4
 80161e4:	b002      	add	sp, #8
 80161e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161ea:	bf00      	nop

080161ec <rcutils_string_map_getn>:
 80161ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161f0:	b300      	cbz	r0, 8016234 <rcutils_string_map_getn+0x48>
 80161f2:	6807      	ldr	r7, [r0, #0]
 80161f4:	b1ff      	cbz	r7, 8016236 <rcutils_string_map_getn+0x4a>
 80161f6:	4688      	mov	r8, r1
 80161f8:	b1e1      	cbz	r1, 8016234 <rcutils_string_map_getn+0x48>
 80161fa:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80161fe:	683e      	ldr	r6, [r7, #0]
 8016200:	f1ba 0f00 	cmp.w	sl, #0
 8016204:	d016      	beq.n	8016234 <rcutils_string_map_getn+0x48>
 8016206:	4691      	mov	r9, r2
 8016208:	3e04      	subs	r6, #4
 801620a:	2400      	movs	r4, #0
 801620c:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8016210:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8016214:	4628      	mov	r0, r5
 8016216:	3401      	adds	r4, #1
 8016218:	b155      	cbz	r5, 8016230 <rcutils_string_map_getn+0x44>
 801621a:	f7ea f803 	bl	8000224 <strlen>
 801621e:	4548      	cmp	r0, r9
 8016220:	4602      	mov	r2, r0
 8016222:	4629      	mov	r1, r5
 8016224:	bf38      	it	cc
 8016226:	464a      	movcc	r2, r9
 8016228:	4640      	mov	r0, r8
 801622a:	f002 fbb4 	bl	8018996 <strncmp>
 801622e:	b128      	cbz	r0, 801623c <rcutils_string_map_getn+0x50>
 8016230:	45a2      	cmp	sl, r4
 8016232:	d1eb      	bne.n	801620c <rcutils_string_map_getn+0x20>
 8016234:	2700      	movs	r7, #0
 8016236:	4638      	mov	r0, r7
 8016238:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	f853 700b 	ldr.w	r7, [r3, fp]
 8016242:	4638      	mov	r0, r7
 8016244:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016248 <rmw_get_zero_initialized_context>:
 8016248:	b510      	push	{r4, lr}
 801624a:	4604      	mov	r4, r0
 801624c:	3010      	adds	r0, #16
 801624e:	f7f7 fa4f 	bl	800d6f0 <rmw_get_zero_initialized_init_options>
 8016252:	2300      	movs	r3, #0
 8016254:	2000      	movs	r0, #0
 8016256:	2100      	movs	r1, #0
 8016258:	e9c4 0100 	strd	r0, r1, [r4]
 801625c:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8016260:	60a3      	str	r3, [r4, #8]
 8016262:	4620      	mov	r0, r4
 8016264:	bd10      	pop	{r4, pc}
 8016266:	bf00      	nop

08016268 <rmw_time_equal>:
 8016268:	b4f0      	push	{r4, r5, r6, r7}
 801626a:	b084      	sub	sp, #16
 801626c:	ac04      	add	r4, sp, #16
 801626e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8016272:	4603      	mov	r3, r0
 8016274:	4924      	ldr	r1, [pc, #144]	@ (8016308 <rmw_time_equal+0xa0>)
 8016276:	9e03      	ldr	r6, [sp, #12]
 8016278:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801627c:	2202      	movs	r2, #2
 801627e:	4299      	cmp	r1, r3
 8016280:	41aa      	sbcs	r2, r5
 8016282:	d330      	bcc.n	80162e6 <rmw_time_equal+0x7e>
 8016284:	4c21      	ldr	r4, [pc, #132]	@ (801630c <rmw_time_equal+0xa4>)
 8016286:	fba3 3204 	umull	r3, r2, r3, r4
 801628a:	fb04 2205 	mla	r2, r4, r5, r2
 801628e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016292:	43dd      	mvns	r5, r3
 8016294:	1a8c      	subs	r4, r1, r2
 8016296:	4285      	cmp	r5, r0
 8016298:	41b4      	sbcs	r4, r6
 801629a:	d332      	bcc.n	8016302 <rmw_time_equal+0x9a>
 801629c:	eb10 0c03 	adds.w	ip, r0, r3
 80162a0:	eb42 0106 	adc.w	r1, r2, r6
 80162a4:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 80162a8:	4817      	ldr	r0, [pc, #92]	@ (8016308 <rmw_time_equal+0xa0>)
 80162aa:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80162ac:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80162ae:	2202      	movs	r2, #2
 80162b0:	4298      	cmp	r0, r3
 80162b2:	41b2      	sbcs	r2, r6
 80162b4:	d31c      	bcc.n	80162f0 <rmw_time_equal+0x88>
 80162b6:	4c15      	ldr	r4, [pc, #84]	@ (801630c <rmw_time_equal+0xa4>)
 80162b8:	fba3 3204 	umull	r3, r2, r3, r4
 80162bc:	fb04 2206 	mla	r2, r4, r6, r2
 80162c0:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80162c4:	43de      	mvns	r6, r3
 80162c6:	1a84      	subs	r4, r0, r2
 80162c8:	42ae      	cmp	r6, r5
 80162ca:	41bc      	sbcs	r4, r7
 80162cc:	d315      	bcc.n	80162fa <rmw_time_equal+0x92>
 80162ce:	195b      	adds	r3, r3, r5
 80162d0:	eb42 0207 	adc.w	r2, r2, r7
 80162d4:	428a      	cmp	r2, r1
 80162d6:	bf08      	it	eq
 80162d8:	4563      	cmpeq	r3, ip
 80162da:	bf0c      	ite	eq
 80162dc:	2001      	moveq	r0, #1
 80162de:	2000      	movne	r0, #0
 80162e0:	b004      	add	sp, #16
 80162e2:	bcf0      	pop	{r4, r5, r6, r7}
 80162e4:	4770      	bx	lr
 80162e6:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80162ea:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80162ee:	e7d9      	b.n	80162a4 <rmw_time_equal+0x3c>
 80162f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80162f4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80162f8:	e7ec      	b.n	80162d4 <rmw_time_equal+0x6c>
 80162fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80162fe:	4602      	mov	r2, r0
 8016300:	e7e8      	b.n	80162d4 <rmw_time_equal+0x6c>
 8016302:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8016306:	e7cd      	b.n	80162a4 <rmw_time_equal+0x3c>
 8016308:	25c17d04 	.word	0x25c17d04
 801630c:	3b9aca00 	.word	0x3b9aca00

08016310 <rmw_time_total_nsec>:
 8016310:	b470      	push	{r4, r5, r6}
 8016312:	b085      	sub	sp, #20
 8016314:	ac04      	add	r4, sp, #16
 8016316:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801631a:	4603      	mov	r3, r0
 801631c:	4912      	ldr	r1, [pc, #72]	@ (8016368 <rmw_time_total_nsec+0x58>)
 801631e:	9e03      	ldr	r6, [sp, #12]
 8016320:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8016324:	2202      	movs	r2, #2
 8016326:	4299      	cmp	r1, r3
 8016328:	41aa      	sbcs	r2, r5
 801632a:	d311      	bcc.n	8016350 <rmw_time_total_nsec+0x40>
 801632c:	4c0f      	ldr	r4, [pc, #60]	@ (801636c <rmw_time_total_nsec+0x5c>)
 801632e:	fba3 3204 	umull	r3, r2, r3, r4
 8016332:	fb04 2205 	mla	r2, r4, r5, r2
 8016336:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801633a:	43dd      	mvns	r5, r3
 801633c:	1a8c      	subs	r4, r1, r2
 801633e:	4285      	cmp	r5, r0
 8016340:	41b4      	sbcs	r4, r6
 8016342:	d30c      	bcc.n	801635e <rmw_time_total_nsec+0x4e>
 8016344:	1818      	adds	r0, r3, r0
 8016346:	eb42 0106 	adc.w	r1, r2, r6
 801634a:	b005      	add	sp, #20
 801634c:	bc70      	pop	{r4, r5, r6}
 801634e:	4770      	bx	lr
 8016350:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016354:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016358:	b005      	add	sp, #20
 801635a:	bc70      	pop	{r4, r5, r6}
 801635c:	4770      	bx	lr
 801635e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016362:	b005      	add	sp, #20
 8016364:	bc70      	pop	{r4, r5, r6}
 8016366:	4770      	bx	lr
 8016368:	25c17d04 	.word	0x25c17d04
 801636c:	3b9aca00 	.word	0x3b9aca00

08016370 <rmw_validate_full_topic_name>:
 8016370:	2800      	cmp	r0, #0
 8016372:	d057      	beq.n	8016424 <rmw_validate_full_topic_name+0xb4>
 8016374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016378:	460d      	mov	r5, r1
 801637a:	2900      	cmp	r1, #0
 801637c:	d054      	beq.n	8016428 <rmw_validate_full_topic_name+0xb8>
 801637e:	4616      	mov	r6, r2
 8016380:	4604      	mov	r4, r0
 8016382:	f7e9 ff4f 	bl	8000224 <strlen>
 8016386:	b148      	cbz	r0, 801639c <rmw_validate_full_topic_name+0x2c>
 8016388:	7823      	ldrb	r3, [r4, #0]
 801638a:	2b2f      	cmp	r3, #47	@ 0x2f
 801638c:	d00d      	beq.n	80163aa <rmw_validate_full_topic_name+0x3a>
 801638e:	2302      	movs	r3, #2
 8016390:	602b      	str	r3, [r5, #0]
 8016392:	b13e      	cbz	r6, 80163a4 <rmw_validate_full_topic_name+0x34>
 8016394:	2000      	movs	r0, #0
 8016396:	6030      	str	r0, [r6, #0]
 8016398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801639c:	2301      	movs	r3, #1
 801639e:	602b      	str	r3, [r5, #0]
 80163a0:	2e00      	cmp	r6, #0
 80163a2:	d1f7      	bne.n	8016394 <rmw_validate_full_topic_name+0x24>
 80163a4:	2000      	movs	r0, #0
 80163a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163aa:	1e43      	subs	r3, r0, #1
 80163ac:	5ce2      	ldrb	r2, [r4, r3]
 80163ae:	2a2f      	cmp	r2, #47	@ 0x2f
 80163b0:	d03c      	beq.n	801642c <rmw_validate_full_topic_name+0xbc>
 80163b2:	1e63      	subs	r3, r4, #1
 80163b4:	eb03 0800 	add.w	r8, r3, r0
 80163b8:	f1c4 0e01 	rsb	lr, r4, #1
 80163bc:	eb0e 0703 	add.w	r7, lr, r3
 80163c0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80163c4:	f021 0220 	bic.w	r2, r1, #32
 80163c8:	3a41      	subs	r2, #65	@ 0x41
 80163ca:	2a19      	cmp	r2, #25
 80163cc:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 80163d0:	d90b      	bls.n	80163ea <rmw_validate_full_topic_name+0x7a>
 80163d2:	295f      	cmp	r1, #95	@ 0x5f
 80163d4:	d009      	beq.n	80163ea <rmw_validate_full_topic_name+0x7a>
 80163d6:	f1bc 0f0a 	cmp.w	ip, #10
 80163da:	d906      	bls.n	80163ea <rmw_validate_full_topic_name+0x7a>
 80163dc:	2304      	movs	r3, #4
 80163de:	602b      	str	r3, [r5, #0]
 80163e0:	2e00      	cmp	r6, #0
 80163e2:	d0df      	beq.n	80163a4 <rmw_validate_full_topic_name+0x34>
 80163e4:	6037      	str	r7, [r6, #0]
 80163e6:	2000      	movs	r0, #0
 80163e8:	e7d6      	b.n	8016398 <rmw_validate_full_topic_name+0x28>
 80163ea:	4543      	cmp	r3, r8
 80163ec:	d1e6      	bne.n	80163bc <rmw_validate_full_topic_name+0x4c>
 80163ee:	4f1a      	ldr	r7, [pc, #104]	@ (8016458 <rmw_validate_full_topic_name+0xe8>)
 80163f0:	2301      	movs	r3, #1
 80163f2:	e004      	b.n	80163fe <rmw_validate_full_topic_name+0x8e>
 80163f4:	4298      	cmp	r0, r3
 80163f6:	f104 0401 	add.w	r4, r4, #1
 80163fa:	d91c      	bls.n	8016436 <rmw_validate_full_topic_name+0xc6>
 80163fc:	4613      	mov	r3, r2
 80163fe:	4298      	cmp	r0, r3
 8016400:	f103 0201 	add.w	r2, r3, #1
 8016404:	d0f6      	beq.n	80163f4 <rmw_validate_full_topic_name+0x84>
 8016406:	7821      	ldrb	r1, [r4, #0]
 8016408:	292f      	cmp	r1, #47	@ 0x2f
 801640a:	d1f3      	bne.n	80163f4 <rmw_validate_full_topic_name+0x84>
 801640c:	7861      	ldrb	r1, [r4, #1]
 801640e:	292f      	cmp	r1, #47	@ 0x2f
 8016410:	d01c      	beq.n	801644c <rmw_validate_full_topic_name+0xdc>
 8016412:	5dc9      	ldrb	r1, [r1, r7]
 8016414:	0749      	lsls	r1, r1, #29
 8016416:	d5ed      	bpl.n	80163f4 <rmw_validate_full_topic_name+0x84>
 8016418:	2206      	movs	r2, #6
 801641a:	602a      	str	r2, [r5, #0]
 801641c:	2e00      	cmp	r6, #0
 801641e:	d0c1      	beq.n	80163a4 <rmw_validate_full_topic_name+0x34>
 8016420:	6033      	str	r3, [r6, #0]
 8016422:	e7bf      	b.n	80163a4 <rmw_validate_full_topic_name+0x34>
 8016424:	200b      	movs	r0, #11
 8016426:	4770      	bx	lr
 8016428:	200b      	movs	r0, #11
 801642a:	e7b5      	b.n	8016398 <rmw_validate_full_topic_name+0x28>
 801642c:	2203      	movs	r2, #3
 801642e:	602a      	str	r2, [r5, #0]
 8016430:	2e00      	cmp	r6, #0
 8016432:	d1f5      	bne.n	8016420 <rmw_validate_full_topic_name+0xb0>
 8016434:	e7b6      	b.n	80163a4 <rmw_validate_full_topic_name+0x34>
 8016436:	28f7      	cmp	r0, #247	@ 0xf7
 8016438:	d802      	bhi.n	8016440 <rmw_validate_full_topic_name+0xd0>
 801643a:	2000      	movs	r0, #0
 801643c:	6028      	str	r0, [r5, #0]
 801643e:	e7ab      	b.n	8016398 <rmw_validate_full_topic_name+0x28>
 8016440:	2307      	movs	r3, #7
 8016442:	602b      	str	r3, [r5, #0]
 8016444:	2e00      	cmp	r6, #0
 8016446:	d0ad      	beq.n	80163a4 <rmw_validate_full_topic_name+0x34>
 8016448:	23f6      	movs	r3, #246	@ 0xf6
 801644a:	e7e9      	b.n	8016420 <rmw_validate_full_topic_name+0xb0>
 801644c:	2205      	movs	r2, #5
 801644e:	602a      	str	r2, [r5, #0]
 8016450:	2e00      	cmp	r6, #0
 8016452:	d1e5      	bne.n	8016420 <rmw_validate_full_topic_name+0xb0>
 8016454:	e7a6      	b.n	80163a4 <rmw_validate_full_topic_name+0x34>
 8016456:	bf00      	nop
 8016458:	0801a613 	.word	0x0801a613

0801645c <on_status>:
 801645c:	b082      	sub	sp, #8
 801645e:	b002      	add	sp, #8
 8016460:	4770      	bx	lr
 8016462:	bf00      	nop

08016464 <on_topic>:
 8016464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016468:	4a22      	ldr	r2, [pc, #136]	@ (80164f4 <on_topic+0x90>)
 801646a:	b094      	sub	sp, #80	@ 0x50
 801646c:	6812      	ldr	r2, [r2, #0]
 801646e:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8016470:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8016474:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8016478:	b3c2      	cbz	r2, 80164ec <on_topic+0x88>
 801647a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801647e:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8016482:	e001      	b.n	8016488 <on_topic+0x24>
 8016484:	6852      	ldr	r2, [r2, #4]
 8016486:	b38a      	cbz	r2, 80164ec <on_topic+0x88>
 8016488:	6894      	ldr	r4, [r2, #8]
 801648a:	8aa3      	ldrh	r3, [r4, #20]
 801648c:	428b      	cmp	r3, r1
 801648e:	d1f9      	bne.n	8016484 <on_topic+0x20>
 8016490:	7da3      	ldrb	r3, [r4, #22]
 8016492:	4283      	cmp	r3, r0
 8016494:	d1f6      	bne.n	8016484 <on_topic+0x20>
 8016496:	2248      	movs	r2, #72	@ 0x48
 8016498:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801649c:	4668      	mov	r0, sp
 801649e:	f002 fb8c 	bl	8018bba <memcpy>
 80164a2:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80164a6:	cb0c      	ldmia	r3, {r2, r3}
 80164a8:	4620      	mov	r0, r4
 80164aa:	f7f8 fc2d 	bl	800ed08 <rmw_uxrce_get_static_input_buffer_for_entity>
 80164ae:	4607      	mov	r7, r0
 80164b0:	b1e0      	cbz	r0, 80164ec <on_topic+0x88>
 80164b2:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80164b6:	4632      	mov	r2, r6
 80164b8:	4628      	mov	r0, r5
 80164ba:	f108 0110 	add.w	r1, r8, #16
 80164be:	f000 fdbf 	bl	8017040 <ucdr_deserialize_array_uint8_t>
 80164c2:	b930      	cbnz	r0, 80164d2 <on_topic+0x6e>
 80164c4:	480c      	ldr	r0, [pc, #48]	@ (80164f8 <on_topic+0x94>)
 80164c6:	4639      	mov	r1, r7
 80164c8:	b014      	add	sp, #80	@ 0x50
 80164ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80164ce:	f000 b8bd 	b.w	801664c <put_memory>
 80164d2:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 80164d6:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 80164da:	f000 fca7 	bl	8016e2c <rmw_uros_epoch_nanos>
 80164de:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 80164e2:	2305      	movs	r3, #5
 80164e4:	e942 0102 	strd	r0, r1, [r2, #-8]
 80164e8:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 80164ec:	b014      	add	sp, #80	@ 0x50
 80164ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164f2:	bf00      	nop
 80164f4:	20010edc 	.word	0x20010edc
 80164f8:	20010ecc 	.word	0x20010ecc

080164fc <on_request>:
 80164fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016500:	4823      	ldr	r0, [pc, #140]	@ (8016590 <on_request+0x94>)
 8016502:	b094      	sub	sp, #80	@ 0x50
 8016504:	6800      	ldr	r0, [r0, #0]
 8016506:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8016508:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801650c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801650e:	2800      	cmp	r0, #0
 8016510:	d03b      	beq.n	801658a <on_request+0x8e>
 8016512:	461d      	mov	r5, r3
 8016514:	e001      	b.n	801651a <on_request+0x1e>
 8016516:	6840      	ldr	r0, [r0, #4]
 8016518:	b3b8      	cbz	r0, 801658a <on_request+0x8e>
 801651a:	6884      	ldr	r4, [r0, #8]
 801651c:	8b21      	ldrh	r1, [r4, #24]
 801651e:	4291      	cmp	r1, r2
 8016520:	d1f9      	bne.n	8016516 <on_request+0x1a>
 8016522:	2248      	movs	r2, #72	@ 0x48
 8016524:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8016528:	4668      	mov	r0, sp
 801652a:	f002 fb46 	bl	8018bba <memcpy>
 801652e:	f104 0320 	add.w	r3, r4, #32
 8016532:	cb0c      	ldmia	r3, {r2, r3}
 8016534:	4620      	mov	r0, r4
 8016536:	f7f8 fbe7 	bl	800ed08 <rmw_uxrce_get_static_input_buffer_for_entity>
 801653a:	4680      	mov	r8, r0
 801653c:	b328      	cbz	r0, 801658a <on_request+0x8e>
 801653e:	4638      	mov	r0, r7
 8016540:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8016544:	4632      	mov	r2, r6
 8016546:	f107 0110 	add.w	r1, r7, #16
 801654a:	f000 fd79 	bl	8017040 <ucdr_deserialize_array_uint8_t>
 801654e:	b930      	cbnz	r0, 801655e <on_request+0x62>
 8016550:	4810      	ldr	r0, [pc, #64]	@ (8016594 <on_request+0x98>)
 8016552:	4641      	mov	r1, r8
 8016554:	b014      	add	sp, #80	@ 0x50
 8016556:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801655a:	f000 b877 	b.w	801664c <put_memory>
 801655e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016560:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8016564:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8016568:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801656c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016570:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016574:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016578:	f000 fc58 	bl	8016e2c <rmw_uros_epoch_nanos>
 801657c:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8016580:	2303      	movs	r3, #3
 8016582:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016586:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801658a:	b014      	add	sp, #80	@ 0x50
 801658c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016590:	20010eac 	.word	0x20010eac
 8016594:	20010ecc 	.word	0x20010ecc

08016598 <on_reply>:
 8016598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801659c:	4821      	ldr	r0, [pc, #132]	@ (8016624 <on_reply+0x8c>)
 801659e:	b094      	sub	sp, #80	@ 0x50
 80165a0:	6800      	ldr	r0, [r0, #0]
 80165a2:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80165a4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80165a8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80165aa:	b3b8      	cbz	r0, 801661c <on_reply+0x84>
 80165ac:	461d      	mov	r5, r3
 80165ae:	e001      	b.n	80165b4 <on_reply+0x1c>
 80165b0:	6840      	ldr	r0, [r0, #4]
 80165b2:	b398      	cbz	r0, 801661c <on_reply+0x84>
 80165b4:	6884      	ldr	r4, [r0, #8]
 80165b6:	8b21      	ldrh	r1, [r4, #24]
 80165b8:	4291      	cmp	r1, r2
 80165ba:	d1f9      	bne.n	80165b0 <on_reply+0x18>
 80165bc:	2248      	movs	r2, #72	@ 0x48
 80165be:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80165c2:	4668      	mov	r0, sp
 80165c4:	f002 faf9 	bl	8018bba <memcpy>
 80165c8:	f104 0320 	add.w	r3, r4, #32
 80165cc:	cb0c      	ldmia	r3, {r2, r3}
 80165ce:	4620      	mov	r0, r4
 80165d0:	f7f8 fb9a 	bl	800ed08 <rmw_uxrce_get_static_input_buffer_for_entity>
 80165d4:	4680      	mov	r8, r0
 80165d6:	b308      	cbz	r0, 801661c <on_reply+0x84>
 80165d8:	4638      	mov	r0, r7
 80165da:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80165de:	4632      	mov	r2, r6
 80165e0:	f107 0110 	add.w	r1, r7, #16
 80165e4:	f000 fd2c 	bl	8017040 <ucdr_deserialize_array_uint8_t>
 80165e8:	b930      	cbnz	r0, 80165f8 <on_reply+0x60>
 80165ea:	480f      	ldr	r0, [pc, #60]	@ (8016628 <on_reply+0x90>)
 80165ec:	4641      	mov	r1, r8
 80165ee:	b014      	add	sp, #80	@ 0x50
 80165f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80165f4:	f000 b82a 	b.w	801664c <put_memory>
 80165f8:	2200      	movs	r2, #0
 80165fa:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 80165fe:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8016602:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8016606:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 801660a:	f000 fc0f 	bl	8016e2c <rmw_uros_epoch_nanos>
 801660e:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8016612:	2304      	movs	r3, #4
 8016614:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016618:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801661c:	b014      	add	sp, #80	@ 0x50
 801661e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016622:	bf00      	nop
 8016624:	2000c5bc 	.word	0x2000c5bc
 8016628:	20010ecc 	.word	0x20010ecc

0801662c <get_memory>:
 801662c:	4603      	mov	r3, r0
 801662e:	6840      	ldr	r0, [r0, #4]
 8016630:	b158      	cbz	r0, 801664a <get_memory+0x1e>
 8016632:	6842      	ldr	r2, [r0, #4]
 8016634:	605a      	str	r2, [r3, #4]
 8016636:	b10a      	cbz	r2, 801663c <get_memory+0x10>
 8016638:	2100      	movs	r1, #0
 801663a:	6011      	str	r1, [r2, #0]
 801663c:	681a      	ldr	r2, [r3, #0]
 801663e:	6042      	str	r2, [r0, #4]
 8016640:	b102      	cbz	r2, 8016644 <get_memory+0x18>
 8016642:	6010      	str	r0, [r2, #0]
 8016644:	2200      	movs	r2, #0
 8016646:	6002      	str	r2, [r0, #0]
 8016648:	6018      	str	r0, [r3, #0]
 801664a:	4770      	bx	lr

0801664c <put_memory>:
 801664c:	680b      	ldr	r3, [r1, #0]
 801664e:	b10b      	cbz	r3, 8016654 <put_memory+0x8>
 8016650:	684a      	ldr	r2, [r1, #4]
 8016652:	605a      	str	r2, [r3, #4]
 8016654:	684a      	ldr	r2, [r1, #4]
 8016656:	b102      	cbz	r2, 801665a <put_memory+0xe>
 8016658:	6013      	str	r3, [r2, #0]
 801665a:	6803      	ldr	r3, [r0, #0]
 801665c:	428b      	cmp	r3, r1
 801665e:	6843      	ldr	r3, [r0, #4]
 8016660:	bf08      	it	eq
 8016662:	6002      	streq	r2, [r0, #0]
 8016664:	604b      	str	r3, [r1, #4]
 8016666:	b103      	cbz	r3, 801666a <put_memory+0x1e>
 8016668:	6019      	str	r1, [r3, #0]
 801666a:	2300      	movs	r3, #0
 801666c:	600b      	str	r3, [r1, #0]
 801666e:	6041      	str	r1, [r0, #4]
 8016670:	4770      	bx	lr
 8016672:	bf00      	nop

08016674 <rmw_destroy_client>:
 8016674:	b570      	push	{r4, r5, r6, lr}
 8016676:	b128      	cbz	r0, 8016684 <rmw_destroy_client+0x10>
 8016678:	4604      	mov	r4, r0
 801667a:	6800      	ldr	r0, [r0, #0]
 801667c:	460d      	mov	r5, r1
 801667e:	f7f8 fcb9 	bl	800eff4 <is_uxrce_rmw_identifier_valid>
 8016682:	b910      	cbnz	r0, 801668a <rmw_destroy_client+0x16>
 8016684:	2401      	movs	r4, #1
 8016686:	4620      	mov	r0, r4
 8016688:	bd70      	pop	{r4, r5, r6, pc}
 801668a:	6863      	ldr	r3, [r4, #4]
 801668c:	2b00      	cmp	r3, #0
 801668e:	d0f9      	beq.n	8016684 <rmw_destroy_client+0x10>
 8016690:	2d00      	cmp	r5, #0
 8016692:	d0f7      	beq.n	8016684 <rmw_destroy_client+0x10>
 8016694:	6828      	ldr	r0, [r5, #0]
 8016696:	f7f8 fcad 	bl	800eff4 <is_uxrce_rmw_identifier_valid>
 801669a:	2800      	cmp	r0, #0
 801669c:	d0f2      	beq.n	8016684 <rmw_destroy_client+0x10>
 801669e:	686e      	ldr	r6, [r5, #4]
 80166a0:	2e00      	cmp	r6, #0
 80166a2:	d0ef      	beq.n	8016684 <rmw_destroy_client+0x10>
 80166a4:	6864      	ldr	r4, [r4, #4]
 80166a6:	6932      	ldr	r2, [r6, #16]
 80166a8:	6920      	ldr	r0, [r4, #16]
 80166aa:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80166ae:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80166b2:	6819      	ldr	r1, [r3, #0]
 80166b4:	f7fa f98c 	bl	80109d0 <uxr_buffer_cancel_data>
 80166b8:	4602      	mov	r2, r0
 80166ba:	6920      	ldr	r0, [r4, #16]
 80166bc:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80166c0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80166c4:	f7f8 fc16 	bl	800eef4 <run_xrce_session>
 80166c8:	6920      	ldr	r0, [r4, #16]
 80166ca:	6932      	ldr	r2, [r6, #16]
 80166cc:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80166d0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80166d4:	6819      	ldr	r1, [r3, #0]
 80166d6:	f7f9 fd49 	bl	801016c <uxr_buffer_delete_entity>
 80166da:	4602      	mov	r2, r0
 80166dc:	6920      	ldr	r0, [r4, #16]
 80166de:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80166e2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80166e6:	f7f8 fc05 	bl	800eef4 <run_xrce_session>
 80166ea:	2800      	cmp	r0, #0
 80166ec:	4628      	mov	r0, r5
 80166ee:	bf14      	ite	ne
 80166f0:	2400      	movne	r4, #0
 80166f2:	2402      	moveq	r4, #2
 80166f4:	f7f8 fae6 	bl	800ecc4 <rmw_uxrce_fini_client_memory>
 80166f8:	e7c5      	b.n	8016686 <rmw_destroy_client+0x12>
 80166fa:	bf00      	nop

080166fc <rmw_get_implementation_identifier>:
 80166fc:	4b01      	ldr	r3, [pc, #4]	@ (8016704 <rmw_get_implementation_identifier+0x8>)
 80166fe:	6818      	ldr	r0, [r3, #0]
 8016700:	4770      	bx	lr
 8016702:	bf00      	nop
 8016704:	0801a530 	.word	0x0801a530

08016708 <rmw_create_guard_condition>:
 8016708:	b538      	push	{r3, r4, r5, lr}
 801670a:	4605      	mov	r5, r0
 801670c:	4807      	ldr	r0, [pc, #28]	@ (801672c <rmw_create_guard_condition+0x24>)
 801670e:	f7ff ff8d 	bl	801662c <get_memory>
 8016712:	b148      	cbz	r0, 8016728 <rmw_create_guard_condition+0x20>
 8016714:	6884      	ldr	r4, [r0, #8]
 8016716:	2300      	movs	r3, #0
 8016718:	7423      	strb	r3, [r4, #16]
 801671a:	61e5      	str	r5, [r4, #28]
 801671c:	f7ff ffee 	bl	80166fc <rmw_get_implementation_identifier>
 8016720:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8016724:	f104 0014 	add.w	r0, r4, #20
 8016728:	bd38      	pop	{r3, r4, r5, pc}
 801672a:	bf00      	nop
 801672c:	20010e6c 	.word	0x20010e6c

08016730 <rmw_destroy_guard_condition>:
 8016730:	b508      	push	{r3, lr}
 8016732:	4b08      	ldr	r3, [pc, #32]	@ (8016754 <rmw_destroy_guard_condition+0x24>)
 8016734:	6819      	ldr	r1, [r3, #0]
 8016736:	b911      	cbnz	r1, 801673e <rmw_destroy_guard_condition+0xe>
 8016738:	e00a      	b.n	8016750 <rmw_destroy_guard_condition+0x20>
 801673a:	6849      	ldr	r1, [r1, #4]
 801673c:	b141      	cbz	r1, 8016750 <rmw_destroy_guard_condition+0x20>
 801673e:	688b      	ldr	r3, [r1, #8]
 8016740:	3314      	adds	r3, #20
 8016742:	4298      	cmp	r0, r3
 8016744:	d1f9      	bne.n	801673a <rmw_destroy_guard_condition+0xa>
 8016746:	4803      	ldr	r0, [pc, #12]	@ (8016754 <rmw_destroy_guard_condition+0x24>)
 8016748:	f7ff ff80 	bl	801664c <put_memory>
 801674c:	2000      	movs	r0, #0
 801674e:	bd08      	pop	{r3, pc}
 8016750:	2001      	movs	r0, #1
 8016752:	bd08      	pop	{r3, pc}
 8016754:	20010e6c 	.word	0x20010e6c

08016758 <create_topic>:
 8016758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801675c:	4605      	mov	r5, r0
 801675e:	b084      	sub	sp, #16
 8016760:	4822      	ldr	r0, [pc, #136]	@ (80167ec <create_topic+0x94>)
 8016762:	460f      	mov	r7, r1
 8016764:	4616      	mov	r6, r2
 8016766:	f7ff ff61 	bl	801662c <get_memory>
 801676a:	4604      	mov	r4, r0
 801676c:	2800      	cmp	r0, #0
 801676e:	d039      	beq.n	80167e4 <create_topic+0x8c>
 8016770:	692b      	ldr	r3, [r5, #16]
 8016772:	6884      	ldr	r4, [r0, #8]
 8016774:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 80167f4 <create_topic+0x9c>
 8016778:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801677c:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8016780:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8016784:	1c42      	adds	r2, r0, #1
 8016786:	2102      	movs	r1, #2
 8016788:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 801678c:	f7f9 ffb2 	bl	80106f4 <uxr_object_id>
 8016790:	223c      	movs	r2, #60	@ 0x3c
 8016792:	6120      	str	r0, [r4, #16]
 8016794:	4641      	mov	r1, r8
 8016796:	4638      	mov	r0, r7
 8016798:	f7f8 fc12 	bl	800efc0 <generate_topic_name>
 801679c:	b1f0      	cbz	r0, 80167dc <create_topic+0x84>
 801679e:	4f14      	ldr	r7, [pc, #80]	@ (80167f0 <create_topic+0x98>)
 80167a0:	4630      	mov	r0, r6
 80167a2:	2264      	movs	r2, #100	@ 0x64
 80167a4:	4639      	mov	r1, r7
 80167a6:	f7f8 fbdb 	bl	800ef60 <generate_type_name>
 80167aa:	b1b8      	cbz	r0, 80167dc <create_topic+0x84>
 80167ac:	6928      	ldr	r0, [r5, #16]
 80167ae:	2306      	movs	r3, #6
 80167b0:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80167b4:	f8cd 8000 	str.w	r8, [sp]
 80167b8:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80167bc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80167c0:	6811      	ldr	r1, [r2, #0]
 80167c2:	696b      	ldr	r3, [r5, #20]
 80167c4:	6922      	ldr	r2, [r4, #16]
 80167c6:	f7f9 fd4f 	bl	8010268 <uxr_buffer_create_topic_bin>
 80167ca:	4602      	mov	r2, r0
 80167cc:	6928      	ldr	r0, [r5, #16]
 80167ce:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80167d2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80167d6:	f7f8 fb8d 	bl	800eef4 <run_xrce_session>
 80167da:	b918      	cbnz	r0, 80167e4 <create_topic+0x8c>
 80167dc:	4620      	mov	r0, r4
 80167de:	f7f8 fa87 	bl	800ecf0 <rmw_uxrce_fini_topic_memory>
 80167e2:	2400      	movs	r4, #0
 80167e4:	4620      	mov	r0, r4
 80167e6:	b004      	add	sp, #16
 80167e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167ec:	20010eec 	.word	0x20010eec
 80167f0:	20010f68 	.word	0x20010f68
 80167f4:	20010f2c 	.word	0x20010f2c

080167f8 <destroy_topic>:
 80167f8:	b538      	push	{r3, r4, r5, lr}
 80167fa:	6985      	ldr	r5, [r0, #24]
 80167fc:	b1d5      	cbz	r5, 8016834 <destroy_topic+0x3c>
 80167fe:	4604      	mov	r4, r0
 8016800:	6928      	ldr	r0, [r5, #16]
 8016802:	6922      	ldr	r2, [r4, #16]
 8016804:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016808:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801680c:	6819      	ldr	r1, [r3, #0]
 801680e:	f7f9 fcad 	bl	801016c <uxr_buffer_delete_entity>
 8016812:	4602      	mov	r2, r0
 8016814:	6928      	ldr	r0, [r5, #16]
 8016816:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801681a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801681e:	f7f8 fb69 	bl	800eef4 <run_xrce_session>
 8016822:	2800      	cmp	r0, #0
 8016824:	4620      	mov	r0, r4
 8016826:	bf14      	ite	ne
 8016828:	2400      	movne	r4, #0
 801682a:	2402      	moveq	r4, #2
 801682c:	f7f8 fa60 	bl	800ecf0 <rmw_uxrce_fini_topic_memory>
 8016830:	4620      	mov	r0, r4
 8016832:	bd38      	pop	{r3, r4, r5, pc}
 8016834:	2401      	movs	r4, #1
 8016836:	4620      	mov	r0, r4
 8016838:	bd38      	pop	{r3, r4, r5, pc}
 801683a:	bf00      	nop

0801683c <rmw_send_request>:
 801683c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016840:	4604      	mov	r4, r0
 8016842:	6800      	ldr	r0, [r0, #0]
 8016844:	b08b      	sub	sp, #44	@ 0x2c
 8016846:	460e      	mov	r6, r1
 8016848:	4615      	mov	r5, r2
 801684a:	b128      	cbz	r0, 8016858 <rmw_send_request+0x1c>
 801684c:	4b21      	ldr	r3, [pc, #132]	@ (80168d4 <rmw_send_request+0x98>)
 801684e:	6819      	ldr	r1, [r3, #0]
 8016850:	f7e9 fcde 	bl	8000210 <strcmp>
 8016854:	2800      	cmp	r0, #0
 8016856:	d139      	bne.n	80168cc <rmw_send_request+0x90>
 8016858:	6864      	ldr	r4, [r4, #4]
 801685a:	6963      	ldr	r3, [r4, #20]
 801685c:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8016860:	689b      	ldr	r3, [r3, #8]
 8016862:	4798      	blx	r3
 8016864:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8016868:	4630      	mov	r0, r6
 801686a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801686e:	4798      	blx	r3
 8016870:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016874:	9000      	str	r0, [sp, #0]
 8016876:	6922      	ldr	r2, [r4, #16]
 8016878:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801687a:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801687e:	ab02      	add	r3, sp, #8
 8016880:	f7fc f922 	bl	8012ac8 <uxr_prepare_output_stream>
 8016884:	2700      	movs	r7, #0
 8016886:	6028      	str	r0, [r5, #0]
 8016888:	606f      	str	r7, [r5, #4]
 801688a:	b198      	cbz	r0, 80168b4 <rmw_send_request+0x78>
 801688c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016890:	a902      	add	r1, sp, #8
 8016892:	4630      	mov	r0, r6
 8016894:	4798      	blx	r3
 8016896:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 801689a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801689e:	2b01      	cmp	r3, #1
 80168a0:	d00c      	beq.n	80168bc <rmw_send_request+0x80>
 80168a2:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80168a4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80168a8:	f7fa fe66 	bl	8011578 <uxr_run_session_until_confirm_delivery>
 80168ac:	4638      	mov	r0, r7
 80168ae:	b00b      	add	sp, #44	@ 0x2c
 80168b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80168b4:	2001      	movs	r0, #1
 80168b6:	b00b      	add	sp, #44	@ 0x2c
 80168b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80168bc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80168c0:	f7fa fa9a 	bl	8010df8 <uxr_flash_output_streams>
 80168c4:	4638      	mov	r0, r7
 80168c6:	b00b      	add	sp, #44	@ 0x2c
 80168c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80168cc:	200c      	movs	r0, #12
 80168ce:	b00b      	add	sp, #44	@ 0x2c
 80168d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80168d4:	0801a530 	.word	0x0801a530

080168d8 <rmw_take_request>:
 80168d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80168dc:	4605      	mov	r5, r0
 80168de:	6800      	ldr	r0, [r0, #0]
 80168e0:	b089      	sub	sp, #36	@ 0x24
 80168e2:	460c      	mov	r4, r1
 80168e4:	4690      	mov	r8, r2
 80168e6:	461e      	mov	r6, r3
 80168e8:	b128      	cbz	r0, 80168f6 <rmw_take_request+0x1e>
 80168ea:	4b28      	ldr	r3, [pc, #160]	@ (801698c <rmw_take_request+0xb4>)
 80168ec:	6819      	ldr	r1, [r3, #0]
 80168ee:	f7e9 fc8f 	bl	8000210 <strcmp>
 80168f2:	2800      	cmp	r0, #0
 80168f4:	d146      	bne.n	8016984 <rmw_take_request+0xac>
 80168f6:	b10e      	cbz	r6, 80168fc <rmw_take_request+0x24>
 80168f8:	2300      	movs	r3, #0
 80168fa:	7033      	strb	r3, [r6, #0]
 80168fc:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8016900:	f7f8 fa7a 	bl	800edf8 <rmw_uxrce_clean_expired_static_input_buffer>
 8016904:	4648      	mov	r0, r9
 8016906:	f7f8 fa4f 	bl	800eda8 <rmw_uxrce_find_static_input_buffer_by_owner>
 801690a:	4607      	mov	r7, r0
 801690c:	b3b0      	cbz	r0, 801697c <rmw_take_request+0xa4>
 801690e:	6885      	ldr	r5, [r0, #8]
 8016910:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8016914:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8016918:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801691c:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8016920:	7423      	strb	r3, [r4, #16]
 8016922:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8016926:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 801692a:	74e2      	strb	r2, [r4, #19]
 801692c:	f8a4 3011 	strh.w	r3, [r4, #17]
 8016930:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8016934:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8016938:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 801693c:	61e1      	str	r1, [r4, #28]
 801693e:	6162      	str	r2, [r4, #20]
 8016940:	61a3      	str	r3, [r4, #24]
 8016942:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8016946:	689b      	ldr	r3, [r3, #8]
 8016948:	4798      	blx	r3
 801694a:	6844      	ldr	r4, [r0, #4]
 801694c:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8016950:	f105 0110 	add.w	r1, r5, #16
 8016954:	4668      	mov	r0, sp
 8016956:	f7f9 fb99 	bl	801008c <ucdr_init_buffer>
 801695a:	68e3      	ldr	r3, [r4, #12]
 801695c:	4641      	mov	r1, r8
 801695e:	4668      	mov	r0, sp
 8016960:	4798      	blx	r3
 8016962:	4639      	mov	r1, r7
 8016964:	4604      	mov	r4, r0
 8016966:	480a      	ldr	r0, [pc, #40]	@ (8016990 <rmw_take_request+0xb8>)
 8016968:	f7ff fe70 	bl	801664c <put_memory>
 801696c:	b106      	cbz	r6, 8016970 <rmw_take_request+0x98>
 801696e:	7034      	strb	r4, [r6, #0]
 8016970:	f084 0001 	eor.w	r0, r4, #1
 8016974:	b2c0      	uxtb	r0, r0
 8016976:	b009      	add	sp, #36	@ 0x24
 8016978:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801697c:	2001      	movs	r0, #1
 801697e:	b009      	add	sp, #36	@ 0x24
 8016980:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016984:	200c      	movs	r0, #12
 8016986:	b009      	add	sp, #36	@ 0x24
 8016988:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801698c:	0801a530 	.word	0x0801a530
 8016990:	20010ecc 	.word	0x20010ecc

08016994 <rmw_send_response>:
 8016994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016996:	4605      	mov	r5, r0
 8016998:	6800      	ldr	r0, [r0, #0]
 801699a:	b091      	sub	sp, #68	@ 0x44
 801699c:	460c      	mov	r4, r1
 801699e:	4616      	mov	r6, r2
 80169a0:	b128      	cbz	r0, 80169ae <rmw_send_response+0x1a>
 80169a2:	4b29      	ldr	r3, [pc, #164]	@ (8016a48 <rmw_send_response+0xb4>)
 80169a4:	6819      	ldr	r1, [r3, #0]
 80169a6:	f7e9 fc33 	bl	8000210 <strcmp>
 80169aa:	2800      	cmp	r0, #0
 80169ac:	d141      	bne.n	8016a32 <rmw_send_response+0x9e>
 80169ae:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80169b2:	9306      	str	r3, [sp, #24]
 80169b4:	4623      	mov	r3, r4
 80169b6:	9207      	str	r2, [sp, #28]
 80169b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80169bc:	686d      	ldr	r5, [r5, #4]
 80169be:	789b      	ldrb	r3, [r3, #2]
 80169c0:	68a1      	ldr	r1, [r4, #8]
 80169c2:	f88d 2017 	strb.w	r2, [sp, #23]
 80169c6:	f88d 3016 	strb.w	r3, [sp, #22]
 80169ca:	68e2      	ldr	r2, [r4, #12]
 80169cc:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 80169d0:	6860      	ldr	r0, [r4, #4]
 80169d2:	f8ad 3014 	strh.w	r3, [sp, #20]
 80169d6:	ab02      	add	r3, sp, #8
 80169d8:	c307      	stmia	r3!, {r0, r1, r2}
 80169da:	696b      	ldr	r3, [r5, #20]
 80169dc:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 80169de:	68db      	ldr	r3, [r3, #12]
 80169e0:	4798      	blx	r3
 80169e2:	6844      	ldr	r4, [r0, #4]
 80169e4:	4630      	mov	r0, r6
 80169e6:	6923      	ldr	r3, [r4, #16]
 80169e8:	4798      	blx	r3
 80169ea:	f100 0318 	add.w	r3, r0, #24
 80169ee:	6938      	ldr	r0, [r7, #16]
 80169f0:	9300      	str	r3, [sp, #0]
 80169f2:	692a      	ldr	r2, [r5, #16]
 80169f4:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 80169f6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80169fa:	ab08      	add	r3, sp, #32
 80169fc:	f7fc f864 	bl	8012ac8 <uxr_prepare_output_stream>
 8016a00:	b910      	cbnz	r0, 8016a08 <rmw_send_response+0x74>
 8016a02:	2001      	movs	r0, #1
 8016a04:	b011      	add	sp, #68	@ 0x44
 8016a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016a08:	a902      	add	r1, sp, #8
 8016a0a:	a808      	add	r0, sp, #32
 8016a0c:	f7fd f9a8 	bl	8013d60 <uxr_serialize_SampleIdentity>
 8016a10:	68a3      	ldr	r3, [r4, #8]
 8016a12:	a908      	add	r1, sp, #32
 8016a14:	4630      	mov	r0, r6
 8016a16:	4798      	blx	r3
 8016a18:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8016a1c:	6938      	ldr	r0, [r7, #16]
 8016a1e:	2b01      	cmp	r3, #1
 8016a20:	d00a      	beq.n	8016a38 <rmw_send_response+0xa4>
 8016a22:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8016a24:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016a28:	f7fa fda6 	bl	8011578 <uxr_run_session_until_confirm_delivery>
 8016a2c:	2000      	movs	r0, #0
 8016a2e:	b011      	add	sp, #68	@ 0x44
 8016a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016a32:	200c      	movs	r0, #12
 8016a34:	b011      	add	sp, #68	@ 0x44
 8016a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016a38:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016a3c:	f7fa f9dc 	bl	8010df8 <uxr_flash_output_streams>
 8016a40:	2000      	movs	r0, #0
 8016a42:	b011      	add	sp, #68	@ 0x44
 8016a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016a46:	bf00      	nop
 8016a48:	0801a530 	.word	0x0801a530

08016a4c <rmw_take_response>:
 8016a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a50:	4604      	mov	r4, r0
 8016a52:	6800      	ldr	r0, [r0, #0]
 8016a54:	b088      	sub	sp, #32
 8016a56:	4688      	mov	r8, r1
 8016a58:	4617      	mov	r7, r2
 8016a5a:	461d      	mov	r5, r3
 8016a5c:	b120      	cbz	r0, 8016a68 <rmw_take_response+0x1c>
 8016a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8016ad8 <rmw_take_response+0x8c>)
 8016a60:	6819      	ldr	r1, [r3, #0]
 8016a62:	f7e9 fbd5 	bl	8000210 <strcmp>
 8016a66:	bb78      	cbnz	r0, 8016ac8 <rmw_take_response+0x7c>
 8016a68:	b10d      	cbz	r5, 8016a6e <rmw_take_response+0x22>
 8016a6a:	2300      	movs	r3, #0
 8016a6c:	702b      	strb	r3, [r5, #0]
 8016a6e:	6864      	ldr	r4, [r4, #4]
 8016a70:	f7f8 f9c2 	bl	800edf8 <rmw_uxrce_clean_expired_static_input_buffer>
 8016a74:	4620      	mov	r0, r4
 8016a76:	f7f8 f997 	bl	800eda8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016a7a:	4606      	mov	r6, r0
 8016a7c:	b340      	cbz	r0, 8016ad0 <rmw_take_response+0x84>
 8016a7e:	6963      	ldr	r3, [r4, #20]
 8016a80:	6884      	ldr	r4, [r0, #8]
 8016a82:	68db      	ldr	r3, [r3, #12]
 8016a84:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8016a88:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8016a8c:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8016a90:	4798      	blx	r3
 8016a92:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8016a96:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8016a9a:	f104 0110 	add.w	r1, r4, #16
 8016a9e:	4668      	mov	r0, sp
 8016aa0:	f7f9 faf4 	bl	801008c <ucdr_init_buffer>
 8016aa4:	4639      	mov	r1, r7
 8016aa6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016aaa:	4668      	mov	r0, sp
 8016aac:	4798      	blx	r3
 8016aae:	4631      	mov	r1, r6
 8016ab0:	4604      	mov	r4, r0
 8016ab2:	480a      	ldr	r0, [pc, #40]	@ (8016adc <rmw_take_response+0x90>)
 8016ab4:	f7ff fdca 	bl	801664c <put_memory>
 8016ab8:	b105      	cbz	r5, 8016abc <rmw_take_response+0x70>
 8016aba:	702c      	strb	r4, [r5, #0]
 8016abc:	f084 0001 	eor.w	r0, r4, #1
 8016ac0:	b2c0      	uxtb	r0, r0
 8016ac2:	b008      	add	sp, #32
 8016ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ac8:	200c      	movs	r0, #12
 8016aca:	b008      	add	sp, #32
 8016acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ad0:	2001      	movs	r0, #1
 8016ad2:	b008      	add	sp, #32
 8016ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ad8:	0801a530 	.word	0x0801a530
 8016adc:	20010ecc 	.word	0x20010ecc

08016ae0 <rmw_trigger_guard_condition>:
 8016ae0:	b160      	cbz	r0, 8016afc <rmw_trigger_guard_condition+0x1c>
 8016ae2:	b510      	push	{r4, lr}
 8016ae4:	4604      	mov	r4, r0
 8016ae6:	6800      	ldr	r0, [r0, #0]
 8016ae8:	f7f8 fa84 	bl	800eff4 <is_uxrce_rmw_identifier_valid>
 8016aec:	b908      	cbnz	r0, 8016af2 <rmw_trigger_guard_condition+0x12>
 8016aee:	2001      	movs	r0, #1
 8016af0:	bd10      	pop	{r4, pc}
 8016af2:	6863      	ldr	r3, [r4, #4]
 8016af4:	2201      	movs	r2, #1
 8016af6:	741a      	strb	r2, [r3, #16]
 8016af8:	2000      	movs	r0, #0
 8016afa:	bd10      	pop	{r4, pc}
 8016afc:	2001      	movs	r0, #1
 8016afe:	4770      	bx	lr

08016b00 <rmw_wait>:
 8016b00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016b04:	b089      	sub	sp, #36	@ 0x24
 8016b06:	4605      	mov	r5, r0
 8016b08:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8016b0a:	460e      	mov	r6, r1
 8016b0c:	4698      	mov	r8, r3
 8016b0e:	4691      	mov	r9, r2
 8016b10:	2a00      	cmp	r2, #0
 8016b12:	f000 810a 	beq.w	8016d2a <rmw_wait+0x22a>
 8016b16:	b16c      	cbz	r4, 8016b34 <rmw_wait+0x34>
 8016b18:	4bae      	ldr	r3, [pc, #696]	@ (8016dd4 <rmw_wait+0x2d4>)
 8016b1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016b1c:	af04      	add	r7, sp, #16
 8016b1e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8016b22:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8016b26:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016b2a:	f7ff fb9d 	bl	8016268 <rmw_time_equal>
 8016b2e:	2800      	cmp	r0, #0
 8016b30:	f000 8127 	beq.w	8016d82 <rmw_wait+0x282>
 8016b34:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8016b38:	f7f8 f95e 	bl	800edf8 <rmw_uxrce_clean_expired_static_input_buffer>
 8016b3c:	4ba6      	ldr	r3, [pc, #664]	@ (8016dd8 <rmw_wait+0x2d8>)
 8016b3e:	681c      	ldr	r4, [r3, #0]
 8016b40:	b14c      	cbz	r4, 8016b56 <rmw_wait+0x56>
 8016b42:	4623      	mov	r3, r4
 8016b44:	2100      	movs	r1, #0
 8016b46:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8016b4a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016b4e:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d1f7      	bne.n	8016b46 <rmw_wait+0x46>
 8016b56:	f1b9 0f00 	cmp.w	r9, #0
 8016b5a:	d011      	beq.n	8016b80 <rmw_wait+0x80>
 8016b5c:	f8d9 1000 	ldr.w	r1, [r9]
 8016b60:	b171      	cbz	r1, 8016b80 <rmw_wait+0x80>
 8016b62:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8016b66:	2300      	movs	r3, #0
 8016b68:	2001      	movs	r0, #1
 8016b6a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8016b6e:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8016b70:	6912      	ldr	r2, [r2, #16]
 8016b72:	3301      	adds	r3, #1
 8016b74:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016b78:	4299      	cmp	r1, r3
 8016b7a:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8016b7e:	d1f4      	bne.n	8016b6a <rmw_wait+0x6a>
 8016b80:	f1b8 0f00 	cmp.w	r8, #0
 8016b84:	d011      	beq.n	8016baa <rmw_wait+0xaa>
 8016b86:	f8d8 1000 	ldr.w	r1, [r8]
 8016b8a:	b171      	cbz	r1, 8016baa <rmw_wait+0xaa>
 8016b8c:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8016b90:	2300      	movs	r3, #0
 8016b92:	2001      	movs	r0, #1
 8016b94:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8016b98:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8016b9a:	6912      	ldr	r2, [r2, #16]
 8016b9c:	3301      	adds	r3, #1
 8016b9e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016ba2:	4299      	cmp	r1, r3
 8016ba4:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8016ba8:	d1f4      	bne.n	8016b94 <rmw_wait+0x94>
 8016baa:	b185      	cbz	r5, 8016bce <rmw_wait+0xce>
 8016bac:	6829      	ldr	r1, [r5, #0]
 8016bae:	b171      	cbz	r1, 8016bce <rmw_wait+0xce>
 8016bb0:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8016bb4:	2300      	movs	r3, #0
 8016bb6:	2001      	movs	r0, #1
 8016bb8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8016bbc:	6a12      	ldr	r2, [r2, #32]
 8016bbe:	6912      	ldr	r2, [r2, #16]
 8016bc0:	3301      	adds	r3, #1
 8016bc2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016bc6:	4299      	cmp	r1, r3
 8016bc8:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8016bcc:	d1f4      	bne.n	8016bb8 <rmw_wait+0xb8>
 8016bce:	b34c      	cbz	r4, 8016c24 <rmw_wait+0x124>
 8016bd0:	4622      	mov	r2, r4
 8016bd2:	2300      	movs	r3, #0
 8016bd4:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8016bd8:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8016bdc:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8016be0:	440b      	add	r3, r1
 8016be2:	b2db      	uxtb	r3, r3
 8016be4:	2a00      	cmp	r2, #0
 8016be6:	d1f5      	bne.n	8016bd4 <rmw_wait+0xd4>
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	f000 8084 	beq.w	8016cf6 <rmw_wait+0x1f6>
 8016bee:	1c7a      	adds	r2, r7, #1
 8016bf0:	d00d      	beq.n	8016c0e <rmw_wait+0x10e>
 8016bf2:	ee07 7a90 	vmov	s15, r7
 8016bf6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8016bfa:	ee07 3a90 	vmov	s15, r3
 8016bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016c06:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8016c0a:	ee17 7a90 	vmov	r7, s15
 8016c0e:	68a0      	ldr	r0, [r4, #8]
 8016c10:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8016c14:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	f040 8090 	bne.w	8016d3e <rmw_wait+0x23e>
 8016c1e:	6864      	ldr	r4, [r4, #4]
 8016c20:	2c00      	cmp	r4, #0
 8016c22:	d1f4      	bne.n	8016c0e <rmw_wait+0x10e>
 8016c24:	f1b9 0f00 	cmp.w	r9, #0
 8016c28:	f000 80bc 	beq.w	8016da4 <rmw_wait+0x2a4>
 8016c2c:	f8d9 7000 	ldr.w	r7, [r9]
 8016c30:	2f00      	cmp	r7, #0
 8016c32:	f000 808e 	beq.w	8016d52 <rmw_wait+0x252>
 8016c36:	2400      	movs	r4, #0
 8016c38:	4627      	mov	r7, r4
 8016c3a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8016c3e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016c42:	f7f8 f8b1 	bl	800eda8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016c46:	2800      	cmp	r0, #0
 8016c48:	d05f      	beq.n	8016d0a <rmw_wait+0x20a>
 8016c4a:	f8d9 3000 	ldr.w	r3, [r9]
 8016c4e:	3401      	adds	r4, #1
 8016c50:	42a3      	cmp	r3, r4
 8016c52:	f04f 0701 	mov.w	r7, #1
 8016c56:	d8f0      	bhi.n	8016c3a <rmw_wait+0x13a>
 8016c58:	f1b8 0f00 	cmp.w	r8, #0
 8016c5c:	d012      	beq.n	8016c84 <rmw_wait+0x184>
 8016c5e:	f8d8 3000 	ldr.w	r3, [r8]
 8016c62:	b17b      	cbz	r3, 8016c84 <rmw_wait+0x184>
 8016c64:	2400      	movs	r4, #0
 8016c66:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016c6a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016c6e:	f7f8 f89b 	bl	800eda8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016c72:	2800      	cmp	r0, #0
 8016c74:	d051      	beq.n	8016d1a <rmw_wait+0x21a>
 8016c76:	f8d8 3000 	ldr.w	r3, [r8]
 8016c7a:	3401      	adds	r4, #1
 8016c7c:	42a3      	cmp	r3, r4
 8016c7e:	f04f 0701 	mov.w	r7, #1
 8016c82:	d8f0      	bhi.n	8016c66 <rmw_wait+0x166>
 8016c84:	b1dd      	cbz	r5, 8016cbe <rmw_wait+0x1be>
 8016c86:	682b      	ldr	r3, [r5, #0]
 8016c88:	b1cb      	cbz	r3, 8016cbe <rmw_wait+0x1be>
 8016c8a:	2400      	movs	r4, #0
 8016c8c:	686b      	ldr	r3, [r5, #4]
 8016c8e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016c92:	f7f8 f889 	bl	800eda8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016c96:	b158      	cbz	r0, 8016cb0 <rmw_wait+0x1b0>
 8016c98:	682b      	ldr	r3, [r5, #0]
 8016c9a:	3401      	adds	r4, #1
 8016c9c:	42a3      	cmp	r3, r4
 8016c9e:	d969      	bls.n	8016d74 <rmw_wait+0x274>
 8016ca0:	686b      	ldr	r3, [r5, #4]
 8016ca2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016ca6:	2701      	movs	r7, #1
 8016ca8:	f7f8 f87e 	bl	800eda8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016cac:	2800      	cmp	r0, #0
 8016cae:	d1f3      	bne.n	8016c98 <rmw_wait+0x198>
 8016cb0:	e9d5 3200 	ldrd	r3, r2, [r5]
 8016cb4:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8016cb8:	3401      	adds	r4, #1
 8016cba:	42a3      	cmp	r3, r4
 8016cbc:	d8e6      	bhi.n	8016c8c <rmw_wait+0x18c>
 8016cbe:	b1a6      	cbz	r6, 8016cea <rmw_wait+0x1ea>
 8016cc0:	6834      	ldr	r4, [r6, #0]
 8016cc2:	b194      	cbz	r4, 8016cea <rmw_wait+0x1ea>
 8016cc4:	2300      	movs	r3, #0
 8016cc6:	461d      	mov	r5, r3
 8016cc8:	e004      	b.n	8016cd4 <rmw_wait+0x1d4>
 8016cca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8016cce:	3301      	adds	r3, #1
 8016cd0:	42a3      	cmp	r3, r4
 8016cd2:	d00a      	beq.n	8016cea <rmw_wait+0x1ea>
 8016cd4:	6870      	ldr	r0, [r6, #4]
 8016cd6:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8016cda:	7c0a      	ldrb	r2, [r1, #16]
 8016cdc:	2a00      	cmp	r2, #0
 8016cde:	d0f4      	beq.n	8016cca <rmw_wait+0x1ca>
 8016ce0:	3301      	adds	r3, #1
 8016ce2:	42a3      	cmp	r3, r4
 8016ce4:	740d      	strb	r5, [r1, #16]
 8016ce6:	4617      	mov	r7, r2
 8016ce8:	d1f4      	bne.n	8016cd4 <rmw_wait+0x1d4>
 8016cea:	2f00      	cmp	r7, #0
 8016cec:	d03e      	beq.n	8016d6c <rmw_wait+0x26c>
 8016cee:	2000      	movs	r0, #0
 8016cf0:	b009      	add	sp, #36	@ 0x24
 8016cf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016cf6:	68a0      	ldr	r0, [r4, #8]
 8016cf8:	2100      	movs	r1, #0
 8016cfa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016cfe:	f7fa fc01 	bl	8011504 <uxr_run_session_timeout>
 8016d02:	6864      	ldr	r4, [r4, #4]
 8016d04:	2c00      	cmp	r4, #0
 8016d06:	d1f6      	bne.n	8016cf6 <rmw_wait+0x1f6>
 8016d08:	e78c      	b.n	8016c24 <rmw_wait+0x124>
 8016d0a:	e9d9 3200 	ldrd	r3, r2, [r9]
 8016d0e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8016d12:	3401      	adds	r4, #1
 8016d14:	42a3      	cmp	r3, r4
 8016d16:	d890      	bhi.n	8016c3a <rmw_wait+0x13a>
 8016d18:	e79e      	b.n	8016c58 <rmw_wait+0x158>
 8016d1a:	e9d8 3200 	ldrd	r3, r2, [r8]
 8016d1e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8016d22:	3401      	adds	r4, #1
 8016d24:	429c      	cmp	r4, r3
 8016d26:	d39e      	bcc.n	8016c66 <rmw_wait+0x166>
 8016d28:	e7ac      	b.n	8016c84 <rmw_wait+0x184>
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	f47f aef3 	bne.w	8016b16 <rmw_wait+0x16>
 8016d30:	2800      	cmp	r0, #0
 8016d32:	f47f aef0 	bne.w	8016b16 <rmw_wait+0x16>
 8016d36:	2900      	cmp	r1, #0
 8016d38:	f47f aeed 	bne.w	8016b16 <rmw_wait+0x16>
 8016d3c:	e7d7      	b.n	8016cee <rmw_wait+0x1ee>
 8016d3e:	4639      	mov	r1, r7
 8016d40:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016d44:	f7fa fbf8 	bl	8011538 <uxr_run_session_until_data>
 8016d48:	6864      	ldr	r4, [r4, #4]
 8016d4a:	2c00      	cmp	r4, #0
 8016d4c:	f47f af5f 	bne.w	8016c0e <rmw_wait+0x10e>
 8016d50:	e768      	b.n	8016c24 <rmw_wait+0x124>
 8016d52:	f1b8 0f00 	cmp.w	r8, #0
 8016d56:	d032      	beq.n	8016dbe <rmw_wait+0x2be>
 8016d58:	f8d8 3000 	ldr.w	r3, [r8]
 8016d5c:	2b00      	cmp	r3, #0
 8016d5e:	d181      	bne.n	8016c64 <rmw_wait+0x164>
 8016d60:	461f      	mov	r7, r3
 8016d62:	2d00      	cmp	r5, #0
 8016d64:	d18f      	bne.n	8016c86 <rmw_wait+0x186>
 8016d66:	462f      	mov	r7, r5
 8016d68:	2e00      	cmp	r6, #0
 8016d6a:	d1a9      	bne.n	8016cc0 <rmw_wait+0x1c0>
 8016d6c:	2002      	movs	r0, #2
 8016d6e:	b009      	add	sp, #36	@ 0x24
 8016d70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016d74:	2e00      	cmp	r6, #0
 8016d76:	d0ba      	beq.n	8016cee <rmw_wait+0x1ee>
 8016d78:	6834      	ldr	r4, [r6, #0]
 8016d7a:	2701      	movs	r7, #1
 8016d7c:	2c00      	cmp	r4, #0
 8016d7e:	d1a1      	bne.n	8016cc4 <rmw_wait+0x1c4>
 8016d80:	e7b5      	b.n	8016cee <rmw_wait+0x1ee>
 8016d82:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016d86:	f7ff fac3 	bl	8016310 <rmw_time_total_nsec>
 8016d8a:	2300      	movs	r3, #0
 8016d8c:	4a13      	ldr	r2, [pc, #76]	@ (8016ddc <rmw_wait+0x2dc>)
 8016d8e:	f7e9 ff15 	bl	8000bbc <__aeabi_uldivmod>
 8016d92:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8016d96:	f171 0300 	sbcs.w	r3, r1, #0
 8016d9a:	4607      	mov	r7, r0
 8016d9c:	bfa8      	it	ge
 8016d9e:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8016da2:	e6c9      	b.n	8016b38 <rmw_wait+0x38>
 8016da4:	f1b8 0f00 	cmp.w	r8, #0
 8016da8:	d009      	beq.n	8016dbe <rmw_wait+0x2be>
 8016daa:	f8d8 3000 	ldr.w	r3, [r8]
 8016dae:	464f      	mov	r7, r9
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	f47f af57 	bne.w	8016c64 <rmw_wait+0x164>
 8016db6:	2d00      	cmp	r5, #0
 8016db8:	f47f af65 	bne.w	8016c86 <rmw_wait+0x186>
 8016dbc:	e7d3      	b.n	8016d66 <rmw_wait+0x266>
 8016dbe:	b17d      	cbz	r5, 8016de0 <rmw_wait+0x2e0>
 8016dc0:	682b      	ldr	r3, [r5, #0]
 8016dc2:	4647      	mov	r7, r8
 8016dc4:	2b00      	cmp	r3, #0
 8016dc6:	f47f af60 	bne.w	8016c8a <rmw_wait+0x18a>
 8016dca:	2e00      	cmp	r6, #0
 8016dcc:	f47f af78 	bne.w	8016cc0 <rmw_wait+0x1c0>
 8016dd0:	e7cc      	b.n	8016d6c <rmw_wait+0x26c>
 8016dd2:	bf00      	nop
 8016dd4:	08019a70 	.word	0x08019a70
 8016dd8:	20010ebc 	.word	0x20010ebc
 8016ddc:	000f4240 	.word	0x000f4240
 8016de0:	2e00      	cmp	r6, #0
 8016de2:	d0c3      	beq.n	8016d6c <rmw_wait+0x26c>
 8016de4:	6834      	ldr	r4, [r6, #0]
 8016de6:	462f      	mov	r7, r5
 8016de8:	2c00      	cmp	r4, #0
 8016dea:	f47f af6b 	bne.w	8016cc4 <rmw_wait+0x1c4>
 8016dee:	e7bd      	b.n	8016d6c <rmw_wait+0x26c>

08016df0 <rmw_create_wait_set>:
 8016df0:	b508      	push	{r3, lr}
 8016df2:	4803      	ldr	r0, [pc, #12]	@ (8016e00 <rmw_create_wait_set+0x10>)
 8016df4:	f7ff fc1a 	bl	801662c <get_memory>
 8016df8:	b108      	cbz	r0, 8016dfe <rmw_create_wait_set+0xe>
 8016dfa:	6880      	ldr	r0, [r0, #8]
 8016dfc:	3010      	adds	r0, #16
 8016dfe:	bd08      	pop	{r3, pc}
 8016e00:	20010efc 	.word	0x20010efc

08016e04 <rmw_destroy_wait_set>:
 8016e04:	b508      	push	{r3, lr}
 8016e06:	4b08      	ldr	r3, [pc, #32]	@ (8016e28 <rmw_destroy_wait_set+0x24>)
 8016e08:	6819      	ldr	r1, [r3, #0]
 8016e0a:	b911      	cbnz	r1, 8016e12 <rmw_destroy_wait_set+0xe>
 8016e0c:	e00a      	b.n	8016e24 <rmw_destroy_wait_set+0x20>
 8016e0e:	6849      	ldr	r1, [r1, #4]
 8016e10:	b141      	cbz	r1, 8016e24 <rmw_destroy_wait_set+0x20>
 8016e12:	688b      	ldr	r3, [r1, #8]
 8016e14:	3310      	adds	r3, #16
 8016e16:	4298      	cmp	r0, r3
 8016e18:	d1f9      	bne.n	8016e0e <rmw_destroy_wait_set+0xa>
 8016e1a:	4803      	ldr	r0, [pc, #12]	@ (8016e28 <rmw_destroy_wait_set+0x24>)
 8016e1c:	f7ff fc16 	bl	801664c <put_memory>
 8016e20:	2000      	movs	r0, #0
 8016e22:	bd08      	pop	{r3, pc}
 8016e24:	2001      	movs	r0, #1
 8016e26:	bd08      	pop	{r3, pc}
 8016e28:	20010efc 	.word	0x20010efc

08016e2c <rmw_uros_epoch_nanos>:
 8016e2c:	4b05      	ldr	r3, [pc, #20]	@ (8016e44 <rmw_uros_epoch_nanos+0x18>)
 8016e2e:	681b      	ldr	r3, [r3, #0]
 8016e30:	b123      	cbz	r3, 8016e3c <rmw_uros_epoch_nanos+0x10>
 8016e32:	6898      	ldr	r0, [r3, #8]
 8016e34:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016e38:	f7f9 bfd4 	b.w	8010de4 <uxr_epoch_nanos>
 8016e3c:	2000      	movs	r0, #0
 8016e3e:	2100      	movs	r1, #0
 8016e40:	4770      	bx	lr
 8016e42:	bf00      	nop
 8016e44:	20010ebc 	.word	0x20010ebc

08016e48 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8016e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e4c:	6805      	ldr	r5, [r0, #0]
 8016e4e:	4604      	mov	r4, r0
 8016e50:	4628      	mov	r0, r5
 8016e52:	460e      	mov	r6, r1
 8016e54:	f7e9 f9dc 	bl	8000210 <strcmp>
 8016e58:	b1c8      	cbz	r0, 8016e8e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8016e5a:	4b11      	ldr	r3, [pc, #68]	@ (8016ea0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8016e5c:	681b      	ldr	r3, [r3, #0]
 8016e5e:	429d      	cmp	r5, r3
 8016e60:	d112      	bne.n	8016e88 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8016e62:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8016e66:	f8d8 4000 	ldr.w	r4, [r8]
 8016e6a:	b16c      	cbz	r4, 8016e88 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8016e6c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8016e70:	2700      	movs	r7, #0
 8016e72:	3d04      	subs	r5, #4
 8016e74:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8016e78:	4631      	mov	r1, r6
 8016e7a:	f7e9 f9c9 	bl	8000210 <strcmp>
 8016e7e:	00bb      	lsls	r3, r7, #2
 8016e80:	b140      	cbz	r0, 8016e94 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8016e82:	3701      	adds	r7, #1
 8016e84:	42bc      	cmp	r4, r7
 8016e86:	d1f5      	bne.n	8016e74 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8016e88:	2000      	movs	r0, #0
 8016e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e8e:	4620      	mov	r0, r4
 8016e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e94:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016e98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016e9c:	58d3      	ldr	r3, [r2, r3]
 8016e9e:	4718      	bx	r3
 8016ea0:	200000e0 	.word	0x200000e0

08016ea4 <std_msgs__msg__Int32__init>:
 8016ea4:	3800      	subs	r0, #0
 8016ea6:	bf18      	it	ne
 8016ea8:	2001      	movne	r0, #1
 8016eaa:	4770      	bx	lr

08016eac <std_msgs__msg__Int32__fini>:
 8016eac:	4770      	bx	lr
 8016eae:	bf00      	nop

08016eb0 <ucdr_serialize_endian_array_char>:
 8016eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016eb4:	4619      	mov	r1, r3
 8016eb6:	461f      	mov	r7, r3
 8016eb8:	4605      	mov	r5, r0
 8016eba:	4690      	mov	r8, r2
 8016ebc:	f7f9 f892 	bl	800ffe4 <ucdr_check_buffer_available_for>
 8016ec0:	b9e0      	cbnz	r0, 8016efc <ucdr_serialize_endian_array_char+0x4c>
 8016ec2:	463e      	mov	r6, r7
 8016ec4:	e009      	b.n	8016eda <ucdr_serialize_endian_array_char+0x2a>
 8016ec6:	68a8      	ldr	r0, [r5, #8]
 8016ec8:	f001 fe77 	bl	8018bba <memcpy>
 8016ecc:	68ab      	ldr	r3, [r5, #8]
 8016ece:	6928      	ldr	r0, [r5, #16]
 8016ed0:	4423      	add	r3, r4
 8016ed2:	4420      	add	r0, r4
 8016ed4:	1b36      	subs	r6, r6, r4
 8016ed6:	60ab      	str	r3, [r5, #8]
 8016ed8:	6128      	str	r0, [r5, #16]
 8016eda:	4631      	mov	r1, r6
 8016edc:	2201      	movs	r2, #1
 8016ede:	4628      	mov	r0, r5
 8016ee0:	f7f9 f908 	bl	80100f4 <ucdr_check_final_buffer_behavior_array>
 8016ee4:	1bb9      	subs	r1, r7, r6
 8016ee6:	4441      	add	r1, r8
 8016ee8:	4604      	mov	r4, r0
 8016eea:	4602      	mov	r2, r0
 8016eec:	2800      	cmp	r0, #0
 8016eee:	d1ea      	bne.n	8016ec6 <ucdr_serialize_endian_array_char+0x16>
 8016ef0:	2301      	movs	r3, #1
 8016ef2:	7da8      	ldrb	r0, [r5, #22]
 8016ef4:	756b      	strb	r3, [r5, #21]
 8016ef6:	4058      	eors	r0, r3
 8016ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016efc:	463a      	mov	r2, r7
 8016efe:	68a8      	ldr	r0, [r5, #8]
 8016f00:	4641      	mov	r1, r8
 8016f02:	f001 fe5a 	bl	8018bba <memcpy>
 8016f06:	68aa      	ldr	r2, [r5, #8]
 8016f08:	692b      	ldr	r3, [r5, #16]
 8016f0a:	443a      	add	r2, r7
 8016f0c:	443b      	add	r3, r7
 8016f0e:	60aa      	str	r2, [r5, #8]
 8016f10:	612b      	str	r3, [r5, #16]
 8016f12:	e7ed      	b.n	8016ef0 <ucdr_serialize_endian_array_char+0x40>

08016f14 <ucdr_deserialize_endian_array_char>:
 8016f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f18:	4619      	mov	r1, r3
 8016f1a:	461f      	mov	r7, r3
 8016f1c:	4605      	mov	r5, r0
 8016f1e:	4690      	mov	r8, r2
 8016f20:	f7f9 f860 	bl	800ffe4 <ucdr_check_buffer_available_for>
 8016f24:	b9e0      	cbnz	r0, 8016f60 <ucdr_deserialize_endian_array_char+0x4c>
 8016f26:	463e      	mov	r6, r7
 8016f28:	e009      	b.n	8016f3e <ucdr_deserialize_endian_array_char+0x2a>
 8016f2a:	68a9      	ldr	r1, [r5, #8]
 8016f2c:	f001 fe45 	bl	8018bba <memcpy>
 8016f30:	68ab      	ldr	r3, [r5, #8]
 8016f32:	6928      	ldr	r0, [r5, #16]
 8016f34:	4423      	add	r3, r4
 8016f36:	4420      	add	r0, r4
 8016f38:	1b36      	subs	r6, r6, r4
 8016f3a:	60ab      	str	r3, [r5, #8]
 8016f3c:	6128      	str	r0, [r5, #16]
 8016f3e:	2201      	movs	r2, #1
 8016f40:	4631      	mov	r1, r6
 8016f42:	4628      	mov	r0, r5
 8016f44:	f7f9 f8d6 	bl	80100f4 <ucdr_check_final_buffer_behavior_array>
 8016f48:	4604      	mov	r4, r0
 8016f4a:	1bb8      	subs	r0, r7, r6
 8016f4c:	4440      	add	r0, r8
 8016f4e:	4622      	mov	r2, r4
 8016f50:	2c00      	cmp	r4, #0
 8016f52:	d1ea      	bne.n	8016f2a <ucdr_deserialize_endian_array_char+0x16>
 8016f54:	2301      	movs	r3, #1
 8016f56:	7da8      	ldrb	r0, [r5, #22]
 8016f58:	756b      	strb	r3, [r5, #21]
 8016f5a:	4058      	eors	r0, r3
 8016f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f60:	463a      	mov	r2, r7
 8016f62:	68a9      	ldr	r1, [r5, #8]
 8016f64:	4640      	mov	r0, r8
 8016f66:	f001 fe28 	bl	8018bba <memcpy>
 8016f6a:	68aa      	ldr	r2, [r5, #8]
 8016f6c:	692b      	ldr	r3, [r5, #16]
 8016f6e:	443a      	add	r2, r7
 8016f70:	443b      	add	r3, r7
 8016f72:	60aa      	str	r2, [r5, #8]
 8016f74:	612b      	str	r3, [r5, #16]
 8016f76:	e7ed      	b.n	8016f54 <ucdr_deserialize_endian_array_char+0x40>

08016f78 <ucdr_serialize_array_uint8_t>:
 8016f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f7c:	4688      	mov	r8, r1
 8016f7e:	4611      	mov	r1, r2
 8016f80:	4617      	mov	r7, r2
 8016f82:	4605      	mov	r5, r0
 8016f84:	f7f9 f82e 	bl	800ffe4 <ucdr_check_buffer_available_for>
 8016f88:	b9e0      	cbnz	r0, 8016fc4 <ucdr_serialize_array_uint8_t+0x4c>
 8016f8a:	463e      	mov	r6, r7
 8016f8c:	e009      	b.n	8016fa2 <ucdr_serialize_array_uint8_t+0x2a>
 8016f8e:	68a8      	ldr	r0, [r5, #8]
 8016f90:	f001 fe13 	bl	8018bba <memcpy>
 8016f94:	68aa      	ldr	r2, [r5, #8]
 8016f96:	692b      	ldr	r3, [r5, #16]
 8016f98:	4422      	add	r2, r4
 8016f9a:	4423      	add	r3, r4
 8016f9c:	1b36      	subs	r6, r6, r4
 8016f9e:	60aa      	str	r2, [r5, #8]
 8016fa0:	612b      	str	r3, [r5, #16]
 8016fa2:	4631      	mov	r1, r6
 8016fa4:	2201      	movs	r2, #1
 8016fa6:	4628      	mov	r0, r5
 8016fa8:	f7f9 f8a4 	bl	80100f4 <ucdr_check_final_buffer_behavior_array>
 8016fac:	1bb9      	subs	r1, r7, r6
 8016fae:	4441      	add	r1, r8
 8016fb0:	4604      	mov	r4, r0
 8016fb2:	4602      	mov	r2, r0
 8016fb4:	2800      	cmp	r0, #0
 8016fb6:	d1ea      	bne.n	8016f8e <ucdr_serialize_array_uint8_t+0x16>
 8016fb8:	2301      	movs	r3, #1
 8016fba:	7da8      	ldrb	r0, [r5, #22]
 8016fbc:	756b      	strb	r3, [r5, #21]
 8016fbe:	4058      	eors	r0, r3
 8016fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016fc4:	463a      	mov	r2, r7
 8016fc6:	68a8      	ldr	r0, [r5, #8]
 8016fc8:	4641      	mov	r1, r8
 8016fca:	f001 fdf6 	bl	8018bba <memcpy>
 8016fce:	68aa      	ldr	r2, [r5, #8]
 8016fd0:	692b      	ldr	r3, [r5, #16]
 8016fd2:	443a      	add	r2, r7
 8016fd4:	443b      	add	r3, r7
 8016fd6:	60aa      	str	r2, [r5, #8]
 8016fd8:	612b      	str	r3, [r5, #16]
 8016fda:	e7ed      	b.n	8016fb8 <ucdr_serialize_array_uint8_t+0x40>

08016fdc <ucdr_serialize_endian_array_uint8_t>:
 8016fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016fe0:	4619      	mov	r1, r3
 8016fe2:	461f      	mov	r7, r3
 8016fe4:	4605      	mov	r5, r0
 8016fe6:	4690      	mov	r8, r2
 8016fe8:	f7f8 fffc 	bl	800ffe4 <ucdr_check_buffer_available_for>
 8016fec:	b9e0      	cbnz	r0, 8017028 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8016fee:	463e      	mov	r6, r7
 8016ff0:	e009      	b.n	8017006 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8016ff2:	68a8      	ldr	r0, [r5, #8]
 8016ff4:	f001 fde1 	bl	8018bba <memcpy>
 8016ff8:	68ab      	ldr	r3, [r5, #8]
 8016ffa:	6928      	ldr	r0, [r5, #16]
 8016ffc:	4423      	add	r3, r4
 8016ffe:	4420      	add	r0, r4
 8017000:	1b36      	subs	r6, r6, r4
 8017002:	60ab      	str	r3, [r5, #8]
 8017004:	6128      	str	r0, [r5, #16]
 8017006:	4631      	mov	r1, r6
 8017008:	2201      	movs	r2, #1
 801700a:	4628      	mov	r0, r5
 801700c:	f7f9 f872 	bl	80100f4 <ucdr_check_final_buffer_behavior_array>
 8017010:	1bb9      	subs	r1, r7, r6
 8017012:	4441      	add	r1, r8
 8017014:	4604      	mov	r4, r0
 8017016:	4602      	mov	r2, r0
 8017018:	2800      	cmp	r0, #0
 801701a:	d1ea      	bne.n	8016ff2 <ucdr_serialize_endian_array_uint8_t+0x16>
 801701c:	2301      	movs	r3, #1
 801701e:	7da8      	ldrb	r0, [r5, #22]
 8017020:	756b      	strb	r3, [r5, #21]
 8017022:	4058      	eors	r0, r3
 8017024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017028:	463a      	mov	r2, r7
 801702a:	68a8      	ldr	r0, [r5, #8]
 801702c:	4641      	mov	r1, r8
 801702e:	f001 fdc4 	bl	8018bba <memcpy>
 8017032:	68aa      	ldr	r2, [r5, #8]
 8017034:	692b      	ldr	r3, [r5, #16]
 8017036:	443a      	add	r2, r7
 8017038:	443b      	add	r3, r7
 801703a:	60aa      	str	r2, [r5, #8]
 801703c:	612b      	str	r3, [r5, #16]
 801703e:	e7ed      	b.n	801701c <ucdr_serialize_endian_array_uint8_t+0x40>

08017040 <ucdr_deserialize_array_uint8_t>:
 8017040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017044:	4688      	mov	r8, r1
 8017046:	4611      	mov	r1, r2
 8017048:	4617      	mov	r7, r2
 801704a:	4605      	mov	r5, r0
 801704c:	f7f8 ffca 	bl	800ffe4 <ucdr_check_buffer_available_for>
 8017050:	b9e0      	cbnz	r0, 801708c <ucdr_deserialize_array_uint8_t+0x4c>
 8017052:	463e      	mov	r6, r7
 8017054:	e009      	b.n	801706a <ucdr_deserialize_array_uint8_t+0x2a>
 8017056:	68a9      	ldr	r1, [r5, #8]
 8017058:	f001 fdaf 	bl	8018bba <memcpy>
 801705c:	68aa      	ldr	r2, [r5, #8]
 801705e:	692b      	ldr	r3, [r5, #16]
 8017060:	4422      	add	r2, r4
 8017062:	4423      	add	r3, r4
 8017064:	1b36      	subs	r6, r6, r4
 8017066:	60aa      	str	r2, [r5, #8]
 8017068:	612b      	str	r3, [r5, #16]
 801706a:	2201      	movs	r2, #1
 801706c:	4631      	mov	r1, r6
 801706e:	4628      	mov	r0, r5
 8017070:	f7f9 f840 	bl	80100f4 <ucdr_check_final_buffer_behavior_array>
 8017074:	4604      	mov	r4, r0
 8017076:	1bb8      	subs	r0, r7, r6
 8017078:	4440      	add	r0, r8
 801707a:	4622      	mov	r2, r4
 801707c:	2c00      	cmp	r4, #0
 801707e:	d1ea      	bne.n	8017056 <ucdr_deserialize_array_uint8_t+0x16>
 8017080:	2301      	movs	r3, #1
 8017082:	7da8      	ldrb	r0, [r5, #22]
 8017084:	756b      	strb	r3, [r5, #21]
 8017086:	4058      	eors	r0, r3
 8017088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801708c:	463a      	mov	r2, r7
 801708e:	68a9      	ldr	r1, [r5, #8]
 8017090:	4640      	mov	r0, r8
 8017092:	f001 fd92 	bl	8018bba <memcpy>
 8017096:	68aa      	ldr	r2, [r5, #8]
 8017098:	692b      	ldr	r3, [r5, #16]
 801709a:	443a      	add	r2, r7
 801709c:	443b      	add	r3, r7
 801709e:	60aa      	str	r2, [r5, #8]
 80170a0:	612b      	str	r3, [r5, #16]
 80170a2:	e7ed      	b.n	8017080 <ucdr_deserialize_array_uint8_t+0x40>

080170a4 <ucdr_deserialize_endian_array_uint8_t>:
 80170a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170a8:	4619      	mov	r1, r3
 80170aa:	461f      	mov	r7, r3
 80170ac:	4605      	mov	r5, r0
 80170ae:	4690      	mov	r8, r2
 80170b0:	f7f8 ff98 	bl	800ffe4 <ucdr_check_buffer_available_for>
 80170b4:	b9e0      	cbnz	r0, 80170f0 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 80170b6:	463e      	mov	r6, r7
 80170b8:	e009      	b.n	80170ce <ucdr_deserialize_endian_array_uint8_t+0x2a>
 80170ba:	68a9      	ldr	r1, [r5, #8]
 80170bc:	f001 fd7d 	bl	8018bba <memcpy>
 80170c0:	68ab      	ldr	r3, [r5, #8]
 80170c2:	6928      	ldr	r0, [r5, #16]
 80170c4:	4423      	add	r3, r4
 80170c6:	4420      	add	r0, r4
 80170c8:	1b36      	subs	r6, r6, r4
 80170ca:	60ab      	str	r3, [r5, #8]
 80170cc:	6128      	str	r0, [r5, #16]
 80170ce:	2201      	movs	r2, #1
 80170d0:	4631      	mov	r1, r6
 80170d2:	4628      	mov	r0, r5
 80170d4:	f7f9 f80e 	bl	80100f4 <ucdr_check_final_buffer_behavior_array>
 80170d8:	4604      	mov	r4, r0
 80170da:	1bb8      	subs	r0, r7, r6
 80170dc:	4440      	add	r0, r8
 80170de:	4622      	mov	r2, r4
 80170e0:	2c00      	cmp	r4, #0
 80170e2:	d1ea      	bne.n	80170ba <ucdr_deserialize_endian_array_uint8_t+0x16>
 80170e4:	2301      	movs	r3, #1
 80170e6:	7da8      	ldrb	r0, [r5, #22]
 80170e8:	756b      	strb	r3, [r5, #21]
 80170ea:	4058      	eors	r0, r3
 80170ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170f0:	463a      	mov	r2, r7
 80170f2:	68a9      	ldr	r1, [r5, #8]
 80170f4:	4640      	mov	r0, r8
 80170f6:	f001 fd60 	bl	8018bba <memcpy>
 80170fa:	68aa      	ldr	r2, [r5, #8]
 80170fc:	692b      	ldr	r3, [r5, #16]
 80170fe:	443a      	add	r2, r7
 8017100:	443b      	add	r3, r7
 8017102:	60aa      	str	r2, [r5, #8]
 8017104:	612b      	str	r3, [r5, #16]
 8017106:	e7ed      	b.n	80170e4 <ucdr_deserialize_endian_array_uint8_t+0x40>

08017108 <ucdr_serialize_sequence_char>:
 8017108:	b570      	push	{r4, r5, r6, lr}
 801710a:	4615      	mov	r5, r2
 801710c:	460e      	mov	r6, r1
 801710e:	7d01      	ldrb	r1, [r0, #20]
 8017110:	4604      	mov	r4, r0
 8017112:	f7f8 fabd 	bl	800f690 <ucdr_serialize_endian_uint32_t>
 8017116:	b90d      	cbnz	r5, 801711c <ucdr_serialize_sequence_char+0x14>
 8017118:	2001      	movs	r0, #1
 801711a:	bd70      	pop	{r4, r5, r6, pc}
 801711c:	7d21      	ldrb	r1, [r4, #20]
 801711e:	462b      	mov	r3, r5
 8017120:	4632      	mov	r2, r6
 8017122:	4620      	mov	r0, r4
 8017124:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017128:	f7ff bec2 	b.w	8016eb0 <ucdr_serialize_endian_array_char>

0801712c <ucdr_deserialize_sequence_char>:
 801712c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017130:	461d      	mov	r5, r3
 8017132:	4616      	mov	r6, r2
 8017134:	460f      	mov	r7, r1
 8017136:	461a      	mov	r2, r3
 8017138:	7d01      	ldrb	r1, [r0, #20]
 801713a:	4604      	mov	r4, r0
 801713c:	f7f8 fbd0 	bl	800f8e0 <ucdr_deserialize_endian_uint32_t>
 8017140:	682b      	ldr	r3, [r5, #0]
 8017142:	429e      	cmp	r6, r3
 8017144:	bf3c      	itt	cc
 8017146:	2201      	movcc	r2, #1
 8017148:	75a2      	strbcc	r2, [r4, #22]
 801714a:	b913      	cbnz	r3, 8017152 <ucdr_deserialize_sequence_char+0x26>
 801714c:	2001      	movs	r0, #1
 801714e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017152:	7d21      	ldrb	r1, [r4, #20]
 8017154:	463a      	mov	r2, r7
 8017156:	4620      	mov	r0, r4
 8017158:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801715c:	f7ff beda 	b.w	8016f14 <ucdr_deserialize_endian_array_char>

08017160 <ucdr_serialize_sequence_uint8_t>:
 8017160:	b570      	push	{r4, r5, r6, lr}
 8017162:	4615      	mov	r5, r2
 8017164:	460e      	mov	r6, r1
 8017166:	7d01      	ldrb	r1, [r0, #20]
 8017168:	4604      	mov	r4, r0
 801716a:	f7f8 fa91 	bl	800f690 <ucdr_serialize_endian_uint32_t>
 801716e:	b90d      	cbnz	r5, 8017174 <ucdr_serialize_sequence_uint8_t+0x14>
 8017170:	2001      	movs	r0, #1
 8017172:	bd70      	pop	{r4, r5, r6, pc}
 8017174:	7d21      	ldrb	r1, [r4, #20]
 8017176:	462b      	mov	r3, r5
 8017178:	4632      	mov	r2, r6
 801717a:	4620      	mov	r0, r4
 801717c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017180:	f7ff bf2c 	b.w	8016fdc <ucdr_serialize_endian_array_uint8_t>

08017184 <ucdr_deserialize_sequence_uint8_t>:
 8017184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017188:	461d      	mov	r5, r3
 801718a:	4616      	mov	r6, r2
 801718c:	460f      	mov	r7, r1
 801718e:	461a      	mov	r2, r3
 8017190:	7d01      	ldrb	r1, [r0, #20]
 8017192:	4604      	mov	r4, r0
 8017194:	f7f8 fba4 	bl	800f8e0 <ucdr_deserialize_endian_uint32_t>
 8017198:	682b      	ldr	r3, [r5, #0]
 801719a:	429e      	cmp	r6, r3
 801719c:	bf3c      	itt	cc
 801719e:	2201      	movcc	r2, #1
 80171a0:	75a2      	strbcc	r2, [r4, #22]
 80171a2:	b913      	cbnz	r3, 80171aa <ucdr_deserialize_sequence_uint8_t+0x26>
 80171a4:	2001      	movs	r0, #1
 80171a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80171aa:	7d21      	ldrb	r1, [r4, #20]
 80171ac:	463a      	mov	r2, r7
 80171ae:	4620      	mov	r0, r4
 80171b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80171b4:	f7ff bf76 	b.w	80170a4 <ucdr_deserialize_endian_array_uint8_t>

080171b8 <ucdr_serialize_string>:
 80171b8:	b510      	push	{r4, lr}
 80171ba:	b082      	sub	sp, #8
 80171bc:	4604      	mov	r4, r0
 80171be:	4608      	mov	r0, r1
 80171c0:	9101      	str	r1, [sp, #4]
 80171c2:	f7e9 f82f 	bl	8000224 <strlen>
 80171c6:	9901      	ldr	r1, [sp, #4]
 80171c8:	1c42      	adds	r2, r0, #1
 80171ca:	4620      	mov	r0, r4
 80171cc:	b002      	add	sp, #8
 80171ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80171d2:	f7ff bf99 	b.w	8017108 <ucdr_serialize_sequence_char>
 80171d6:	bf00      	nop

080171d8 <ucdr_deserialize_string>:
 80171d8:	b500      	push	{lr}
 80171da:	b083      	sub	sp, #12
 80171dc:	ab01      	add	r3, sp, #4
 80171de:	f7ff ffa5 	bl	801712c <ucdr_deserialize_sequence_char>
 80171e2:	b003      	add	sp, #12
 80171e4:	f85d fb04 	ldr.w	pc, [sp], #4

080171e8 <uxr_init_input_best_effort_stream>:
 80171e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80171ec:	8003      	strh	r3, [r0, #0]
 80171ee:	4770      	bx	lr

080171f0 <uxr_reset_input_best_effort_stream>:
 80171f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80171f4:	8003      	strh	r3, [r0, #0]
 80171f6:	4770      	bx	lr

080171f8 <uxr_receive_best_effort_message>:
 80171f8:	b538      	push	{r3, r4, r5, lr}
 80171fa:	4604      	mov	r4, r0
 80171fc:	8800      	ldrh	r0, [r0, #0]
 80171fe:	460d      	mov	r5, r1
 8017200:	f000 fd42 	bl	8017c88 <uxr_seq_num_cmp>
 8017204:	4603      	mov	r3, r0
 8017206:	2b00      	cmp	r3, #0
 8017208:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 801720c:	bfb8      	it	lt
 801720e:	8025      	strhlt	r5, [r4, #0]
 8017210:	bd38      	pop	{r3, r4, r5, pc}
 8017212:	bf00      	nop

08017214 <on_full_input_buffer>:
 8017214:	b570      	push	{r4, r5, r6, lr}
 8017216:	4605      	mov	r5, r0
 8017218:	460c      	mov	r4, r1
 801721a:	682b      	ldr	r3, [r5, #0]
 801721c:	6809      	ldr	r1, [r1, #0]
 801721e:	8920      	ldrh	r0, [r4, #8]
 8017220:	6862      	ldr	r2, [r4, #4]
 8017222:	fbb2 f2f0 	udiv	r2, r2, r0
 8017226:	eba3 0c01 	sub.w	ip, r3, r1
 801722a:	fbbc fcf2 	udiv	ip, ip, r2
 801722e:	f10c 0c01 	add.w	ip, ip, #1
 8017232:	fa1f f38c 	uxth.w	r3, ip
 8017236:	fbb3 f6f0 	udiv	r6, r3, r0
 801723a:	fb00 3316 	mls	r3, r0, r6, r3
 801723e:	b29b      	uxth	r3, r3
 8017240:	fb02 f303 	mul.w	r3, r2, r3
 8017244:	1d18      	adds	r0, r3, #4
 8017246:	4408      	add	r0, r1
 8017248:	7d26      	ldrb	r6, [r4, #20]
 801724a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801724e:	b116      	cbz	r6, 8017256 <on_full_input_buffer+0x42>
 8017250:	2600      	movs	r6, #0
 8017252:	f840 6c04 	str.w	r6, [r0, #-4]
 8017256:	2a03      	cmp	r2, #3
 8017258:	d801      	bhi.n	801725e <on_full_input_buffer+0x4a>
 801725a:	2001      	movs	r0, #1
 801725c:	bd70      	pop	{r4, r5, r6, pc}
 801725e:	3308      	adds	r3, #8
 8017260:	4419      	add	r1, r3
 8017262:	4628      	mov	r0, r5
 8017264:	692b      	ldr	r3, [r5, #16]
 8017266:	3a04      	subs	r2, #4
 8017268:	f7f8 ff08 	bl	801007c <ucdr_init_buffer_origin>
 801726c:	4628      	mov	r0, r5
 801726e:	4903      	ldr	r1, [pc, #12]	@ (801727c <on_full_input_buffer+0x68>)
 8017270:	4622      	mov	r2, r4
 8017272:	f7f8 fedf 	bl	8010034 <ucdr_set_on_full_buffer_callback>
 8017276:	2000      	movs	r0, #0
 8017278:	bd70      	pop	{r4, r5, r6, pc}
 801727a:	bf00      	nop
 801727c:	08017215 	.word	0x08017215

08017280 <uxr_init_input_reliable_stream>:
 8017280:	b500      	push	{lr}
 8017282:	e9c0 1200 	strd	r1, r2, [r0]
 8017286:	f04f 0e00 	mov.w	lr, #0
 801728a:	9a01      	ldr	r2, [sp, #4]
 801728c:	8103      	strh	r3, [r0, #8]
 801728e:	6102      	str	r2, [r0, #16]
 8017290:	f880 e014 	strb.w	lr, [r0, #20]
 8017294:	b1d3      	cbz	r3, 80172cc <uxr_init_input_reliable_stream+0x4c>
 8017296:	f8c1 e000 	str.w	lr, [r1]
 801729a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801729e:	f1bc 0f01 	cmp.w	ip, #1
 80172a2:	d913      	bls.n	80172cc <uxr_init_input_reliable_stream+0x4c>
 80172a4:	2301      	movs	r3, #1
 80172a6:	fbb3 f1fc 	udiv	r1, r3, ip
 80172aa:	fb0c 3111 	mls	r1, ip, r1, r3
 80172ae:	b289      	uxth	r1, r1
 80172b0:	6842      	ldr	r2, [r0, #4]
 80172b2:	fbb2 f2fc 	udiv	r2, r2, ip
 80172b6:	fb01 f202 	mul.w	r2, r1, r2
 80172ba:	6801      	ldr	r1, [r0, #0]
 80172bc:	f841 e002 	str.w	lr, [r1, r2]
 80172c0:	3301      	adds	r3, #1
 80172c2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80172c6:	b29b      	uxth	r3, r3
 80172c8:	459c      	cmp	ip, r3
 80172ca:	d8ec      	bhi.n	80172a6 <uxr_init_input_reliable_stream+0x26>
 80172cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80172d0:	60c3      	str	r3, [r0, #12]
 80172d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80172d6:	bf00      	nop

080172d8 <uxr_reset_input_reliable_stream>:
 80172d8:	8901      	ldrh	r1, [r0, #8]
 80172da:	b1e9      	cbz	r1, 8017318 <uxr_reset_input_reliable_stream+0x40>
 80172dc:	f04f 0c00 	mov.w	ip, #0
 80172e0:	b500      	push	{lr}
 80172e2:	4663      	mov	r3, ip
 80172e4:	46e6      	mov	lr, ip
 80172e6:	fbb3 f2f1 	udiv	r2, r3, r1
 80172ea:	fb01 3312 	mls	r3, r1, r2, r3
 80172ee:	b29b      	uxth	r3, r3
 80172f0:	6842      	ldr	r2, [r0, #4]
 80172f2:	fbb2 f2f1 	udiv	r2, r2, r1
 80172f6:	fb02 f303 	mul.w	r3, r2, r3
 80172fa:	6802      	ldr	r2, [r0, #0]
 80172fc:	f842 e003 	str.w	lr, [r2, r3]
 8017300:	f10c 0c01 	add.w	ip, ip, #1
 8017304:	8901      	ldrh	r1, [r0, #8]
 8017306:	fa1f f38c 	uxth.w	r3, ip
 801730a:	4299      	cmp	r1, r3
 801730c:	d8eb      	bhi.n	80172e6 <uxr_reset_input_reliable_stream+0xe>
 801730e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017312:	60c3      	str	r3, [r0, #12]
 8017314:	f85d fb04 	ldr.w	pc, [sp], #4
 8017318:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801731c:	60c3      	str	r3, [r0, #12]
 801731e:	4770      	bx	lr

08017320 <uxr_receive_reliable_message>:
 8017320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017324:	4604      	mov	r4, r0
 8017326:	460d      	mov	r5, r1
 8017328:	8901      	ldrh	r1, [r0, #8]
 801732a:	8980      	ldrh	r0, [r0, #12]
 801732c:	4690      	mov	r8, r2
 801732e:	461f      	mov	r7, r3
 8017330:	f000 fca2 	bl	8017c78 <uxr_seq_num_add>
 8017334:	4629      	mov	r1, r5
 8017336:	4606      	mov	r6, r0
 8017338:	89a0      	ldrh	r0, [r4, #12]
 801733a:	f000 fca5 	bl	8017c88 <uxr_seq_num_cmp>
 801733e:	2800      	cmp	r0, #0
 8017340:	db0a      	blt.n	8017358 <uxr_receive_reliable_message+0x38>
 8017342:	2600      	movs	r6, #0
 8017344:	89e0      	ldrh	r0, [r4, #14]
 8017346:	4629      	mov	r1, r5
 8017348:	f000 fc9e 	bl	8017c88 <uxr_seq_num_cmp>
 801734c:	2800      	cmp	r0, #0
 801734e:	da00      	bge.n	8017352 <uxr_receive_reliable_message+0x32>
 8017350:	81e5      	strh	r5, [r4, #14]
 8017352:	4630      	mov	r0, r6
 8017354:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017358:	4630      	mov	r0, r6
 801735a:	4629      	mov	r1, r5
 801735c:	f000 fc94 	bl	8017c88 <uxr_seq_num_cmp>
 8017360:	2800      	cmp	r0, #0
 8017362:	dbee      	blt.n	8017342 <uxr_receive_reliable_message+0x22>
 8017364:	6923      	ldr	r3, [r4, #16]
 8017366:	4640      	mov	r0, r8
 8017368:	4798      	blx	r3
 801736a:	2101      	movs	r1, #1
 801736c:	4681      	mov	r9, r0
 801736e:	89a0      	ldrh	r0, [r4, #12]
 8017370:	f000 fc82 	bl	8017c78 <uxr_seq_num_add>
 8017374:	f1b9 0f00 	cmp.w	r9, #0
 8017378:	d101      	bne.n	801737e <uxr_receive_reliable_message+0x5e>
 801737a:	4285      	cmp	r5, r0
 801737c:	d047      	beq.n	801740e <uxr_receive_reliable_message+0xee>
 801737e:	8922      	ldrh	r2, [r4, #8]
 8017380:	fbb5 f0f2 	udiv	r0, r5, r2
 8017384:	fb02 5010 	mls	r0, r2, r0, r5
 8017388:	b280      	uxth	r0, r0
 801738a:	6863      	ldr	r3, [r4, #4]
 801738c:	fbb3 f3f2 	udiv	r3, r3, r2
 8017390:	fb00 f303 	mul.w	r3, r0, r3
 8017394:	6820      	ldr	r0, [r4, #0]
 8017396:	3304      	adds	r3, #4
 8017398:	4418      	add	r0, r3
 801739a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801739e:	2b00      	cmp	r3, #0
 80173a0:	d1cf      	bne.n	8017342 <uxr_receive_reliable_message+0x22>
 80173a2:	4641      	mov	r1, r8
 80173a4:	463a      	mov	r2, r7
 80173a6:	f001 fc08 	bl	8018bba <memcpy>
 80173aa:	8921      	ldrh	r1, [r4, #8]
 80173ac:	fbb5 f2f1 	udiv	r2, r5, r1
 80173b0:	fb01 5212 	mls	r2, r1, r2, r5
 80173b4:	b292      	uxth	r2, r2
 80173b6:	6863      	ldr	r3, [r4, #4]
 80173b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80173bc:	fb02 f303 	mul.w	r3, r2, r3
 80173c0:	6822      	ldr	r2, [r4, #0]
 80173c2:	50d7      	str	r7, [r2, r3]
 80173c4:	9a08      	ldr	r2, [sp, #32]
 80173c6:	2301      	movs	r3, #1
 80173c8:	7013      	strb	r3, [r2, #0]
 80173ca:	f1b9 0f00 	cmp.w	r9, #0
 80173ce:	d0b8      	beq.n	8017342 <uxr_receive_reliable_message+0x22>
 80173d0:	89a6      	ldrh	r6, [r4, #12]
 80173d2:	4630      	mov	r0, r6
 80173d4:	2101      	movs	r1, #1
 80173d6:	f000 fc4f 	bl	8017c78 <uxr_seq_num_add>
 80173da:	8922      	ldrh	r2, [r4, #8]
 80173dc:	6863      	ldr	r3, [r4, #4]
 80173de:	fbb3 f3f2 	udiv	r3, r3, r2
 80173e2:	4606      	mov	r6, r0
 80173e4:	fbb0 f0f2 	udiv	r0, r0, r2
 80173e8:	fb02 6010 	mls	r0, r2, r0, r6
 80173ec:	b280      	uxth	r0, r0
 80173ee:	fb00 f303 	mul.w	r3, r0, r3
 80173f2:	6820      	ldr	r0, [r4, #0]
 80173f4:	3304      	adds	r3, #4
 80173f6:	4418      	add	r0, r3
 80173f8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d0a0      	beq.n	8017342 <uxr_receive_reliable_message+0x22>
 8017400:	6923      	ldr	r3, [r4, #16]
 8017402:	4798      	blx	r3
 8017404:	2802      	cmp	r0, #2
 8017406:	d008      	beq.n	801741a <uxr_receive_reliable_message+0xfa>
 8017408:	2801      	cmp	r0, #1
 801740a:	d0e2      	beq.n	80173d2 <uxr_receive_reliable_message+0xb2>
 801740c:	e799      	b.n	8017342 <uxr_receive_reliable_message+0x22>
 801740e:	9b08      	ldr	r3, [sp, #32]
 8017410:	81a5      	strh	r5, [r4, #12]
 8017412:	2601      	movs	r6, #1
 8017414:	f883 9000 	strb.w	r9, [r3]
 8017418:	e794      	b.n	8017344 <uxr_receive_reliable_message+0x24>
 801741a:	2601      	movs	r6, #1
 801741c:	e792      	b.n	8017344 <uxr_receive_reliable_message+0x24>
 801741e:	bf00      	nop

08017420 <uxr_next_input_reliable_buffer_available>:
 8017420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017424:	4604      	mov	r4, r0
 8017426:	460f      	mov	r7, r1
 8017428:	8980      	ldrh	r0, [r0, #12]
 801742a:	2101      	movs	r1, #1
 801742c:	4690      	mov	r8, r2
 801742e:	f000 fc23 	bl	8017c78 <uxr_seq_num_add>
 8017432:	8922      	ldrh	r2, [r4, #8]
 8017434:	fbb0 f6f2 	udiv	r6, r0, r2
 8017438:	fb02 0616 	mls	r6, r2, r6, r0
 801743c:	b2b6      	uxth	r6, r6
 801743e:	6863      	ldr	r3, [r4, #4]
 8017440:	fbb3 f3f2 	udiv	r3, r3, r2
 8017444:	fb06 f303 	mul.w	r3, r6, r3
 8017448:	6826      	ldr	r6, [r4, #0]
 801744a:	3304      	adds	r3, #4
 801744c:	441e      	add	r6, r3
 801744e:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8017452:	f1b9 0f00 	cmp.w	r9, #0
 8017456:	d023      	beq.n	80174a0 <uxr_next_input_reliable_buffer_available+0x80>
 8017458:	6923      	ldr	r3, [r4, #16]
 801745a:	4605      	mov	r5, r0
 801745c:	4630      	mov	r0, r6
 801745e:	4798      	blx	r3
 8017460:	4682      	mov	sl, r0
 8017462:	b300      	cbz	r0, 80174a6 <uxr_next_input_reliable_buffer_available+0x86>
 8017464:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8017468:	2101      	movs	r1, #1
 801746a:	4650      	mov	r0, sl
 801746c:	f000 fc04 	bl	8017c78 <uxr_seq_num_add>
 8017470:	8921      	ldrh	r1, [r4, #8]
 8017472:	fbb0 f2f1 	udiv	r2, r0, r1
 8017476:	4682      	mov	sl, r0
 8017478:	fb01 0212 	mls	r2, r1, r2, r0
 801747c:	e9d4 0300 	ldrd	r0, r3, [r4]
 8017480:	b292      	uxth	r2, r2
 8017482:	fbb3 f3f1 	udiv	r3, r3, r1
 8017486:	fb02 f303 	mul.w	r3, r2, r3
 801748a:	3304      	adds	r3, #4
 801748c:	4418      	add	r0, r3
 801748e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017492:	b12b      	cbz	r3, 80174a0 <uxr_next_input_reliable_buffer_available+0x80>
 8017494:	6923      	ldr	r3, [r4, #16]
 8017496:	4798      	blx	r3
 8017498:	2802      	cmp	r0, #2
 801749a:	d01b      	beq.n	80174d4 <uxr_next_input_reliable_buffer_available+0xb4>
 801749c:	2801      	cmp	r0, #1
 801749e:	d0e3      	beq.n	8017468 <uxr_next_input_reliable_buffer_available+0x48>
 80174a0:	2000      	movs	r0, #0
 80174a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80174a6:	464a      	mov	r2, r9
 80174a8:	4631      	mov	r1, r6
 80174aa:	4638      	mov	r0, r7
 80174ac:	f7f8 fdee 	bl	801008c <ucdr_init_buffer>
 80174b0:	8921      	ldrh	r1, [r4, #8]
 80174b2:	fbb5 f2f1 	udiv	r2, r5, r1
 80174b6:	fb01 5212 	mls	r2, r1, r2, r5
 80174ba:	b292      	uxth	r2, r2
 80174bc:	6863      	ldr	r3, [r4, #4]
 80174be:	fbb3 f3f1 	udiv	r3, r3, r1
 80174c2:	fb02 f303 	mul.w	r3, r2, r3
 80174c6:	6822      	ldr	r2, [r4, #0]
 80174c8:	f842 a003 	str.w	sl, [r2, r3]
 80174cc:	2001      	movs	r0, #1
 80174ce:	81a5      	strh	r5, [r4, #12]
 80174d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80174d4:	8920      	ldrh	r0, [r4, #8]
 80174d6:	fbb5 f3f0 	udiv	r3, r5, r0
 80174da:	fb00 5513 	mls	r5, r0, r3, r5
 80174de:	b2ad      	uxth	r5, r5
 80174e0:	6863      	ldr	r3, [r4, #4]
 80174e2:	fbb3 f3f0 	udiv	r3, r3, r0
 80174e6:	fb03 f505 	mul.w	r5, r3, r5
 80174ea:	6823      	ldr	r3, [r4, #0]
 80174ec:	2000      	movs	r0, #0
 80174ee:	5158      	str	r0, [r3, r5]
 80174f0:	eb06 0108 	add.w	r1, r6, r8
 80174f4:	eba9 0208 	sub.w	r2, r9, r8
 80174f8:	4638      	mov	r0, r7
 80174fa:	f7f8 fdc7 	bl	801008c <ucdr_init_buffer>
 80174fe:	4638      	mov	r0, r7
 8017500:	4903      	ldr	r1, [pc, #12]	@ (8017510 <uxr_next_input_reliable_buffer_available+0xf0>)
 8017502:	4622      	mov	r2, r4
 8017504:	f7f8 fd96 	bl	8010034 <ucdr_set_on_full_buffer_callback>
 8017508:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801750c:	2001      	movs	r0, #1
 801750e:	e7c8      	b.n	80174a2 <uxr_next_input_reliable_buffer_available+0x82>
 8017510:	08017215 	.word	0x08017215

08017514 <uxr_process_heartbeat>:
 8017514:	b538      	push	{r3, r4, r5, lr}
 8017516:	4611      	mov	r1, r2
 8017518:	4604      	mov	r4, r0
 801751a:	89c0      	ldrh	r0, [r0, #14]
 801751c:	4615      	mov	r5, r2
 801751e:	f000 fbb3 	bl	8017c88 <uxr_seq_num_cmp>
 8017522:	2800      	cmp	r0, #0
 8017524:	bfb8      	it	lt
 8017526:	81e5      	strhlt	r5, [r4, #14]
 8017528:	bd38      	pop	{r3, r4, r5, pc}
 801752a:	bf00      	nop

0801752c <uxr_compute_acknack>:
 801752c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017530:	8903      	ldrh	r3, [r0, #8]
 8017532:	8985      	ldrh	r5, [r0, #12]
 8017534:	4604      	mov	r4, r0
 8017536:	460e      	mov	r6, r1
 8017538:	b1d3      	cbz	r3, 8017570 <uxr_compute_acknack+0x44>
 801753a:	4628      	mov	r0, r5
 801753c:	2701      	movs	r7, #1
 801753e:	e003      	b.n	8017548 <uxr_compute_acknack+0x1c>
 8017540:	4567      	cmp	r7, ip
 8017542:	d215      	bcs.n	8017570 <uxr_compute_acknack+0x44>
 8017544:	89a0      	ldrh	r0, [r4, #12]
 8017546:	3701      	adds	r7, #1
 8017548:	b2b9      	uxth	r1, r7
 801754a:	f000 fb95 	bl	8017c78 <uxr_seq_num_add>
 801754e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8017552:	fbb0 f3fc 	udiv	r3, r0, ip
 8017556:	fb0c 0313 	mls	r3, ip, r3, r0
 801755a:	b29a      	uxth	r2, r3
 801755c:	e9d4 1300 	ldrd	r1, r3, [r4]
 8017560:	fbb3 f3fc 	udiv	r3, r3, ip
 8017564:	fb02 f303 	mul.w	r3, r2, r3
 8017568:	58cb      	ldr	r3, [r1, r3]
 801756a:	2b00      	cmp	r3, #0
 801756c:	d1e8      	bne.n	8017540 <uxr_compute_acknack+0x14>
 801756e:	4605      	mov	r5, r0
 8017570:	8035      	strh	r5, [r6, #0]
 8017572:	2101      	movs	r1, #1
 8017574:	4628      	mov	r0, r5
 8017576:	89e7      	ldrh	r7, [r4, #14]
 8017578:	f000 fb82 	bl	8017c80 <uxr_seq_num_sub>
 801757c:	4601      	mov	r1, r0
 801757e:	4638      	mov	r0, r7
 8017580:	f000 fb7e 	bl	8017c80 <uxr_seq_num_sub>
 8017584:	4605      	mov	r5, r0
 8017586:	b318      	cbz	r0, 80175d0 <uxr_compute_acknack+0xa4>
 8017588:	f04f 0900 	mov.w	r9, #0
 801758c:	464f      	mov	r7, r9
 801758e:	f04f 0801 	mov.w	r8, #1
 8017592:	fa1f f189 	uxth.w	r1, r9
 8017596:	8830      	ldrh	r0, [r6, #0]
 8017598:	f000 fb6e 	bl	8017c78 <uxr_seq_num_add>
 801759c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80175a0:	fbb0 f3fc 	udiv	r3, r0, ip
 80175a4:	e9d4 1200 	ldrd	r1, r2, [r4]
 80175a8:	fb03 001c 	mls	r0, r3, ip, r0
 80175ac:	b283      	uxth	r3, r0
 80175ae:	fbb2 f2fc 	udiv	r2, r2, ip
 80175b2:	fb02 f303 	mul.w	r3, r2, r3
 80175b6:	fa08 f209 	lsl.w	r2, r8, r9
 80175ba:	58cb      	ldr	r3, [r1, r3]
 80175bc:	f109 0901 	add.w	r9, r9, #1
 80175c0:	b90b      	cbnz	r3, 80175c6 <uxr_compute_acknack+0x9a>
 80175c2:	4317      	orrs	r7, r2
 80175c4:	b2bf      	uxth	r7, r7
 80175c6:	454d      	cmp	r5, r9
 80175c8:	d1e3      	bne.n	8017592 <uxr_compute_acknack+0x66>
 80175ca:	4638      	mov	r0, r7
 80175cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80175d0:	4607      	mov	r7, r0
 80175d2:	4638      	mov	r0, r7
 80175d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080175d8 <uxr_init_output_best_effort_stream>:
 80175d8:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 80175dc:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80175e0:	6001      	str	r1, [r0, #0]
 80175e2:	7303      	strb	r3, [r0, #12]
 80175e4:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80175e8:	4770      	bx	lr
 80175ea:	bf00      	nop

080175ec <uxr_reset_output_best_effort_stream>:
 80175ec:	7b02      	ldrb	r2, [r0, #12]
 80175ee:	6042      	str	r2, [r0, #4]
 80175f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80175f4:	81c3      	strh	r3, [r0, #14]
 80175f6:	4770      	bx	lr

080175f8 <uxr_prepare_best_effort_buffer_to_write>:
 80175f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80175fa:	4604      	mov	r4, r0
 80175fc:	b083      	sub	sp, #12
 80175fe:	6840      	ldr	r0, [r0, #4]
 8017600:	460d      	mov	r5, r1
 8017602:	4616      	mov	r6, r2
 8017604:	f7fb f9a0 	bl	8012948 <uxr_submessage_padding>
 8017608:	6863      	ldr	r3, [r4, #4]
 801760a:	4418      	add	r0, r3
 801760c:	68a3      	ldr	r3, [r4, #8]
 801760e:	1942      	adds	r2, r0, r5
 8017610:	4293      	cmp	r3, r2
 8017612:	bf2c      	ite	cs
 8017614:	2701      	movcs	r7, #1
 8017616:	2700      	movcc	r7, #0
 8017618:	d202      	bcs.n	8017620 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801761a:	4638      	mov	r0, r7
 801761c:	b003      	add	sp, #12
 801761e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017620:	9000      	str	r0, [sp, #0]
 8017622:	6821      	ldr	r1, [r4, #0]
 8017624:	4630      	mov	r0, r6
 8017626:	2300      	movs	r3, #0
 8017628:	f7f8 fd1e 	bl	8010068 <ucdr_init_buffer_origin_offset>
 801762c:	6861      	ldr	r1, [r4, #4]
 801762e:	4638      	mov	r0, r7
 8017630:	4429      	add	r1, r5
 8017632:	6061      	str	r1, [r4, #4]
 8017634:	b003      	add	sp, #12
 8017636:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017638 <uxr_prepare_best_effort_buffer_to_send>:
 8017638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801763c:	4604      	mov	r4, r0
 801763e:	461d      	mov	r5, r3
 8017640:	6840      	ldr	r0, [r0, #4]
 8017642:	7b23      	ldrb	r3, [r4, #12]
 8017644:	4298      	cmp	r0, r3
 8017646:	bf8c      	ite	hi
 8017648:	2601      	movhi	r6, #1
 801764a:	2600      	movls	r6, #0
 801764c:	d802      	bhi.n	8017654 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801764e:	4630      	mov	r0, r6
 8017650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017654:	4688      	mov	r8, r1
 8017656:	89e0      	ldrh	r0, [r4, #14]
 8017658:	2101      	movs	r1, #1
 801765a:	4617      	mov	r7, r2
 801765c:	f000 fb0c 	bl	8017c78 <uxr_seq_num_add>
 8017660:	6823      	ldr	r3, [r4, #0]
 8017662:	81e0      	strh	r0, [r4, #14]
 8017664:	8028      	strh	r0, [r5, #0]
 8017666:	f8c8 3000 	str.w	r3, [r8]
 801766a:	6863      	ldr	r3, [r4, #4]
 801766c:	603b      	str	r3, [r7, #0]
 801766e:	7b23      	ldrb	r3, [r4, #12]
 8017670:	6063      	str	r3, [r4, #4]
 8017672:	4630      	mov	r0, r6
 8017674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017678 <on_full_output_buffer>:
 8017678:	b538      	push	{r3, r4, r5, lr}
 801767a:	6802      	ldr	r2, [r0, #0]
 801767c:	460c      	mov	r4, r1
 801767e:	6809      	ldr	r1, [r1, #0]
 8017680:	8923      	ldrh	r3, [r4, #8]
 8017682:	eba2 0c01 	sub.w	ip, r2, r1
 8017686:	6862      	ldr	r2, [r4, #4]
 8017688:	fbb2 f2f3 	udiv	r2, r2, r3
 801768c:	fbbc fcf2 	udiv	ip, ip, r2
 8017690:	f10c 0c01 	add.w	ip, ip, #1
 8017694:	fa1f fc8c 	uxth.w	ip, ip
 8017698:	fbbc fef3 	udiv	lr, ip, r3
 801769c:	fb03 c31e 	mls	r3, r3, lr, ip
 80176a0:	b29b      	uxth	r3, r3
 80176a2:	fb02 f303 	mul.w	r3, r2, r3
 80176a6:	f894 c00c 	ldrb.w	ip, [r4, #12]
 80176aa:	58ca      	ldr	r2, [r1, r3]
 80176ac:	4463      	add	r3, ip
 80176ae:	eba2 020c 	sub.w	r2, r2, ip
 80176b2:	3308      	adds	r3, #8
 80176b4:	4605      	mov	r5, r0
 80176b6:	4419      	add	r1, r3
 80176b8:	3a04      	subs	r2, #4
 80176ba:	6903      	ldr	r3, [r0, #16]
 80176bc:	f7f8 fcde 	bl	801007c <ucdr_init_buffer_origin>
 80176c0:	4628      	mov	r0, r5
 80176c2:	4903      	ldr	r1, [pc, #12]	@ (80176d0 <on_full_output_buffer+0x58>)
 80176c4:	4622      	mov	r2, r4
 80176c6:	f7f8 fcb5 	bl	8010034 <ucdr_set_on_full_buffer_callback>
 80176ca:	2000      	movs	r0, #0
 80176cc:	bd38      	pop	{r3, r4, r5, pc}
 80176ce:	bf00      	nop
 80176d0:	08017679 	.word	0x08017679

080176d4 <uxr_init_output_reliable_stream>:
 80176d4:	b410      	push	{r4}
 80176d6:	f89d c004 	ldrb.w	ip, [sp, #4]
 80176da:	8103      	strh	r3, [r0, #8]
 80176dc:	e9c0 1200 	strd	r1, r2, [r0]
 80176e0:	f880 c00c 	strb.w	ip, [r0, #12]
 80176e4:	b1d3      	cbz	r3, 801771c <uxr_init_output_reliable_stream+0x48>
 80176e6:	f8c1 c000 	str.w	ip, [r1]
 80176ea:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80176ee:	f1bc 0f01 	cmp.w	ip, #1
 80176f2:	d913      	bls.n	801771c <uxr_init_output_reliable_stream+0x48>
 80176f4:	2301      	movs	r3, #1
 80176f6:	fbb3 f1fc 	udiv	r1, r3, ip
 80176fa:	fb0c 3111 	mls	r1, ip, r1, r3
 80176fe:	b289      	uxth	r1, r1
 8017700:	6842      	ldr	r2, [r0, #4]
 8017702:	6804      	ldr	r4, [r0, #0]
 8017704:	fbb2 f2fc 	udiv	r2, r2, ip
 8017708:	fb01 f202 	mul.w	r2, r1, r2
 801770c:	7b01      	ldrb	r1, [r0, #12]
 801770e:	50a1      	str	r1, [r4, r2]
 8017710:	3301      	adds	r3, #1
 8017712:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8017716:	b29b      	uxth	r3, r3
 8017718:	459c      	cmp	ip, r3
 801771a:	d8ec      	bhi.n	80176f6 <uxr_init_output_reliable_stream+0x22>
 801771c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017720:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017724:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8017728:	4905      	ldr	r1, [pc, #20]	@ (8017740 <uxr_init_output_reliable_stream+0x6c>)
 801772a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801772e:	f8c0 100e 	str.w	r1, [r0, #14]
 8017732:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017736:	2300      	movs	r3, #0
 8017738:	8242      	strh	r2, [r0, #18]
 801773a:	8403      	strh	r3, [r0, #32]
 801773c:	4770      	bx	lr
 801773e:	bf00      	nop
 8017740:	ffff0000 	.word	0xffff0000

08017744 <uxr_reset_output_reliable_stream>:
 8017744:	8901      	ldrh	r1, [r0, #8]
 8017746:	b1b1      	cbz	r1, 8017776 <uxr_reset_output_reliable_stream+0x32>
 8017748:	f04f 0c00 	mov.w	ip, #0
 801774c:	4663      	mov	r3, ip
 801774e:	fbb3 f2f1 	udiv	r2, r3, r1
 8017752:	fb01 3312 	mls	r3, r1, r2, r3
 8017756:	b29b      	uxth	r3, r3
 8017758:	6842      	ldr	r2, [r0, #4]
 801775a:	fbb2 f2f1 	udiv	r2, r2, r1
 801775e:	6801      	ldr	r1, [r0, #0]
 8017760:	fb02 f303 	mul.w	r3, r2, r3
 8017764:	7b02      	ldrb	r2, [r0, #12]
 8017766:	50ca      	str	r2, [r1, r3]
 8017768:	f10c 0c01 	add.w	ip, ip, #1
 801776c:	8901      	ldrh	r1, [r0, #8]
 801776e:	fa1f f38c 	uxth.w	r3, ip
 8017772:	4299      	cmp	r1, r3
 8017774:	d8eb      	bhi.n	801774e <uxr_reset_output_reliable_stream+0xa>
 8017776:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801777a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801777e:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8017782:	4904      	ldr	r1, [pc, #16]	@ (8017794 <uxr_reset_output_reliable_stream+0x50>)
 8017784:	f8c0 100e 	str.w	r1, [r0, #14]
 8017788:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801778c:	2300      	movs	r3, #0
 801778e:	8242      	strh	r2, [r0, #18]
 8017790:	8403      	strh	r3, [r0, #32]
 8017792:	4770      	bx	lr
 8017794:	ffff0000 	.word	0xffff0000

08017798 <uxr_prepare_reliable_buffer_to_write>:
 8017798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801779c:	4604      	mov	r4, r0
 801779e:	b091      	sub	sp, #68	@ 0x44
 80177a0:	8900      	ldrh	r0, [r0, #8]
 80177a2:	89e6      	ldrh	r6, [r4, #14]
 80177a4:	6823      	ldr	r3, [r4, #0]
 80177a6:	9204      	str	r2, [sp, #16]
 80177a8:	fbb6 f2f0 	udiv	r2, r6, r0
 80177ac:	fb00 6212 	mls	r2, r0, r2, r6
 80177b0:	b292      	uxth	r2, r2
 80177b2:	6865      	ldr	r5, [r4, #4]
 80177b4:	fbb5 f5f0 	udiv	r5, r5, r0
 80177b8:	fb05 3202 	mla	r2, r5, r2, r3
 80177bc:	3204      	adds	r2, #4
 80177be:	f852 8c04 	ldr.w	r8, [r2, #-4]
 80177c2:	f894 900c 	ldrb.w	r9, [r4, #12]
 80177c6:	9203      	str	r2, [sp, #12]
 80177c8:	468b      	mov	fp, r1
 80177ca:	1f2f      	subs	r7, r5, #4
 80177cc:	2800      	cmp	r0, #0
 80177ce:	f000 814c 	beq.w	8017a6a <uxr_prepare_reliable_buffer_to_write+0x2d2>
 80177d2:	f04f 0c00 	mov.w	ip, #0
 80177d6:	46e2      	mov	sl, ip
 80177d8:	4661      	mov	r1, ip
 80177da:	fbb1 f2f0 	udiv	r2, r1, r0
 80177de:	fb00 1212 	mls	r2, r0, r2, r1
 80177e2:	b292      	uxth	r2, r2
 80177e4:	fb05 f202 	mul.w	r2, r5, r2
 80177e8:	f10c 0c01 	add.w	ip, ip, #1
 80177ec:	589a      	ldr	r2, [r3, r2]
 80177ee:	454a      	cmp	r2, r9
 80177f0:	bf08      	it	eq
 80177f2:	f10a 0a01 	addeq.w	sl, sl, #1
 80177f6:	fa1f f18c 	uxth.w	r1, ip
 80177fa:	bf08      	it	eq
 80177fc:	fa1f fa8a 	uxtheq.w	sl, sl
 8017800:	4281      	cmp	r1, r0
 8017802:	d3ea      	bcc.n	80177da <uxr_prepare_reliable_buffer_to_write+0x42>
 8017804:	4640      	mov	r0, r8
 8017806:	2104      	movs	r1, #4
 8017808:	f8cd a014 	str.w	sl, [sp, #20]
 801780c:	f7f8 fc42 	bl	8010094 <ucdr_alignment>
 8017810:	4480      	add	r8, r0
 8017812:	eb08 020b 	add.w	r2, r8, fp
 8017816:	42ba      	cmp	r2, r7
 8017818:	f240 80cd 	bls.w	80179b6 <uxr_prepare_reliable_buffer_to_write+0x21e>
 801781c:	7b22      	ldrb	r2, [r4, #12]
 801781e:	445a      	add	r2, fp
 8017820:	42ba      	cmp	r2, r7
 8017822:	f240 80b5 	bls.w	8017990 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8017826:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 801782a:	33fc      	adds	r3, #252	@ 0xfc
 801782c:	b2ba      	uxth	r2, r7
 801782e:	4413      	add	r3, r2
 8017830:	b29b      	uxth	r3, r3
 8017832:	fb0a f903 	mul.w	r9, sl, r3
 8017836:	45d9      	cmp	r9, fp
 8017838:	9305      	str	r3, [sp, #20]
 801783a:	9306      	str	r3, [sp, #24]
 801783c:	f0c0 80b7 	bcc.w	80179ae <uxr_prepare_reliable_buffer_to_write+0x216>
 8017840:	f108 0304 	add.w	r3, r8, #4
 8017844:	42bb      	cmp	r3, r7
 8017846:	f080 80db 	bcs.w	8017a00 <uxr_prepare_reliable_buffer_to_write+0x268>
 801784a:	f1a2 0904 	sub.w	r9, r2, #4
 801784e:	eba9 0908 	sub.w	r9, r9, r8
 8017852:	9b05      	ldr	r3, [sp, #20]
 8017854:	fa1f f989 	uxth.w	r9, r9
 8017858:	ebab 0b09 	sub.w	fp, fp, r9
 801785c:	fbbb f2f3 	udiv	r2, fp, r3
 8017860:	fb03 b312 	mls	r3, r3, r2, fp
 8017864:	2b00      	cmp	r3, #0
 8017866:	f000 80c8 	beq.w	80179fa <uxr_prepare_reliable_buffer_to_write+0x262>
 801786a:	3201      	adds	r2, #1
 801786c:	b292      	uxth	r2, r2
 801786e:	9306      	str	r3, [sp, #24]
 8017870:	4552      	cmp	r2, sl
 8017872:	f200 809c 	bhi.w	80179ae <uxr_prepare_reliable_buffer_to_write+0x216>
 8017876:	f10d 0b20 	add.w	fp, sp, #32
 801787a:	2a00      	cmp	r2, #0
 801787c:	d042      	beq.n	8017904 <uxr_prepare_reliable_buffer_to_write+0x16c>
 801787e:	f8cd 801c 	str.w	r8, [sp, #28]
 8017882:	f04f 0a00 	mov.w	sl, #0
 8017886:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801788a:	9505      	str	r5, [sp, #20]
 801788c:	f10d 0b20 	add.w	fp, sp, #32
 8017890:	4615      	mov	r5, r2
 8017892:	e000      	b.n	8017896 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8017894:	46c1      	mov	r9, r8
 8017896:	8920      	ldrh	r0, [r4, #8]
 8017898:	fbb6 f2f0 	udiv	r2, r6, r0
 801789c:	fb00 6112 	mls	r1, r0, r2, r6
 80178a0:	b28a      	uxth	r2, r1
 80178a2:	6863      	ldr	r3, [r4, #4]
 80178a4:	fbb3 f1f0 	udiv	r1, r3, r0
 80178a8:	6823      	ldr	r3, [r4, #0]
 80178aa:	fb02 f101 	mul.w	r1, r2, r1
 80178ae:	3104      	adds	r1, #4
 80178b0:	4419      	add	r1, r3
 80178b2:	4658      	mov	r0, fp
 80178b4:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80178b8:	9200      	str	r2, [sp, #0]
 80178ba:	2300      	movs	r3, #0
 80178bc:	463a      	mov	r2, r7
 80178be:	f7f8 fbd3 	bl	8010068 <ucdr_init_buffer_origin_offset>
 80178c2:	464a      	mov	r2, r9
 80178c4:	2300      	movs	r3, #0
 80178c6:	210d      	movs	r1, #13
 80178c8:	4658      	mov	r0, fp
 80178ca:	f7fa fffd 	bl	80128c8 <uxr_buffer_submessage_header>
 80178ce:	8921      	ldrh	r1, [r4, #8]
 80178d0:	fbb6 f2f1 	udiv	r2, r6, r1
 80178d4:	fb01 6212 	mls	r2, r1, r2, r6
 80178d8:	b292      	uxth	r2, r2
 80178da:	6863      	ldr	r3, [r4, #4]
 80178dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80178e0:	fb02 f303 	mul.w	r3, r2, r3
 80178e4:	6822      	ldr	r2, [r4, #0]
 80178e6:	4630      	mov	r0, r6
 80178e8:	50d7      	str	r7, [r2, r3]
 80178ea:	2101      	movs	r1, #1
 80178ec:	f000 f9c4 	bl	8017c78 <uxr_seq_num_add>
 80178f0:	f10a 0a01 	add.w	sl, sl, #1
 80178f4:	fa1f f38a 	uxth.w	r3, sl
 80178f8:	429d      	cmp	r5, r3
 80178fa:	4606      	mov	r6, r0
 80178fc:	d8ca      	bhi.n	8017894 <uxr_prepare_reliable_buffer_to_write+0xfc>
 80178fe:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8017902:	9d05      	ldr	r5, [sp, #20]
 8017904:	8920      	ldrh	r0, [r4, #8]
 8017906:	fbb6 f3f0 	udiv	r3, r6, r0
 801790a:	fb00 6313 	mls	r3, r0, r3, r6
 801790e:	b299      	uxth	r1, r3
 8017910:	6863      	ldr	r3, [r4, #4]
 8017912:	fbb3 f3f0 	udiv	r3, r3, r0
 8017916:	fb01 f303 	mul.w	r3, r1, r3
 801791a:	6821      	ldr	r1, [r4, #0]
 801791c:	3304      	adds	r3, #4
 801791e:	4419      	add	r1, r3
 8017920:	463a      	mov	r2, r7
 8017922:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8017926:	9000      	str	r0, [sp, #0]
 8017928:	2300      	movs	r3, #0
 801792a:	4658      	mov	r0, fp
 801792c:	f7f8 fb9c 	bl	8010068 <ucdr_init_buffer_origin_offset>
 8017930:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8017934:	4658      	mov	r0, fp
 8017936:	fa1f f289 	uxth.w	r2, r9
 801793a:	2302      	movs	r3, #2
 801793c:	210d      	movs	r1, #13
 801793e:	f7fa ffc3 	bl	80128c8 <uxr_buffer_submessage_header>
 8017942:	9b03      	ldr	r3, [sp, #12]
 8017944:	8927      	ldrh	r7, [r4, #8]
 8017946:	7b20      	ldrb	r0, [r4, #12]
 8017948:	f108 0104 	add.w	r1, r8, #4
 801794c:	440b      	add	r3, r1
 801794e:	4619      	mov	r1, r3
 8017950:	fbb6 f3f7 	udiv	r3, r6, r7
 8017954:	fb07 6313 	mls	r3, r7, r3, r6
 8017958:	f1a5 0208 	sub.w	r2, r5, #8
 801795c:	b29d      	uxth	r5, r3
 801795e:	3004      	adds	r0, #4
 8017960:	6863      	ldr	r3, [r4, #4]
 8017962:	fbb3 f3f7 	udiv	r3, r3, r7
 8017966:	fb05 f303 	mul.w	r3, r5, r3
 801796a:	6825      	ldr	r5, [r4, #0]
 801796c:	4448      	add	r0, r9
 801796e:	50e8      	str	r0, [r5, r3]
 8017970:	9d04      	ldr	r5, [sp, #16]
 8017972:	eba2 0208 	sub.w	r2, r2, r8
 8017976:	4628      	mov	r0, r5
 8017978:	f7f8 fb88 	bl	801008c <ucdr_init_buffer>
 801797c:	4628      	mov	r0, r5
 801797e:	493c      	ldr	r1, [pc, #240]	@ (8017a70 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8017980:	4622      	mov	r2, r4
 8017982:	f7f8 fb57 	bl	8010034 <ucdr_set_on_full_buffer_callback>
 8017986:	2001      	movs	r0, #1
 8017988:	81e6      	strh	r6, [r4, #14]
 801798a:	b011      	add	sp, #68	@ 0x44
 801798c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017990:	2101      	movs	r1, #1
 8017992:	89e0      	ldrh	r0, [r4, #14]
 8017994:	f000 f970 	bl	8017c78 <uxr_seq_num_add>
 8017998:	8921      	ldrh	r1, [r4, #8]
 801799a:	4605      	mov	r5, r0
 801799c:	8a60      	ldrh	r0, [r4, #18]
 801799e:	f000 f96b 	bl	8017c78 <uxr_seq_num_add>
 80179a2:	4601      	mov	r1, r0
 80179a4:	4628      	mov	r0, r5
 80179a6:	f000 f96f 	bl	8017c88 <uxr_seq_num_cmp>
 80179aa:	2800      	cmp	r0, #0
 80179ac:	dd42      	ble.n	8017a34 <uxr_prepare_reliable_buffer_to_write+0x29c>
 80179ae:	2000      	movs	r0, #0
 80179b0:	b011      	add	sp, #68	@ 0x44
 80179b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179b6:	8921      	ldrh	r1, [r4, #8]
 80179b8:	8a60      	ldrh	r0, [r4, #18]
 80179ba:	9205      	str	r2, [sp, #20]
 80179bc:	f000 f95c 	bl	8017c78 <uxr_seq_num_add>
 80179c0:	4601      	mov	r1, r0
 80179c2:	4630      	mov	r0, r6
 80179c4:	f000 f960 	bl	8017c88 <uxr_seq_num_cmp>
 80179c8:	2800      	cmp	r0, #0
 80179ca:	9a05      	ldr	r2, [sp, #20]
 80179cc:	dcef      	bgt.n	80179ae <uxr_prepare_reliable_buffer_to_write+0x216>
 80179ce:	8927      	ldrh	r7, [r4, #8]
 80179d0:	fbb6 f3f7 	udiv	r3, r6, r7
 80179d4:	fb07 6313 	mls	r3, r7, r3, r6
 80179d8:	b29d      	uxth	r5, r3
 80179da:	6863      	ldr	r3, [r4, #4]
 80179dc:	6824      	ldr	r4, [r4, #0]
 80179de:	fbb3 f3f7 	udiv	r3, r3, r7
 80179e2:	fb05 f303 	mul.w	r3, r5, r3
 80179e6:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80179ea:	50e2      	str	r2, [r4, r3]
 80179ec:	2300      	movs	r3, #0
 80179ee:	f8cd 8000 	str.w	r8, [sp]
 80179f2:	f7f8 fb39 	bl	8010068 <ucdr_init_buffer_origin_offset>
 80179f6:	2001      	movs	r0, #1
 80179f8:	e7da      	b.n	80179b0 <uxr_prepare_reliable_buffer_to_write+0x218>
 80179fa:	b293      	uxth	r3, r2
 80179fc:	461a      	mov	r2, r3
 80179fe:	e737      	b.n	8017870 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8017a00:	4630      	mov	r0, r6
 8017a02:	2101      	movs	r1, #1
 8017a04:	9207      	str	r2, [sp, #28]
 8017a06:	f000 f937 	bl	8017c78 <uxr_seq_num_add>
 8017a0a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8017a0e:	fbb0 f1fc 	udiv	r1, r0, ip
 8017a12:	fb0c 0111 	mls	r1, ip, r1, r0
 8017a16:	4606      	mov	r6, r0
 8017a18:	b288      	uxth	r0, r1
 8017a1a:	6863      	ldr	r3, [r4, #4]
 8017a1c:	fbb3 f1fc 	udiv	r1, r3, ip
 8017a20:	6823      	ldr	r3, [r4, #0]
 8017a22:	9a07      	ldr	r2, [sp, #28]
 8017a24:	fb00 f101 	mul.w	r1, r0, r1
 8017a28:	3104      	adds	r1, #4
 8017a2a:	440b      	add	r3, r1
 8017a2c:	9303      	str	r3, [sp, #12]
 8017a2e:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8017a32:	e70a      	b.n	801784a <uxr_prepare_reliable_buffer_to_write+0xb2>
 8017a34:	8921      	ldrh	r1, [r4, #8]
 8017a36:	fbb5 f3f1 	udiv	r3, r5, r1
 8017a3a:	fb01 5313 	mls	r3, r1, r3, r5
 8017a3e:	b29a      	uxth	r2, r3
 8017a40:	6863      	ldr	r3, [r4, #4]
 8017a42:	fbb3 f3f1 	udiv	r3, r3, r1
 8017a46:	6821      	ldr	r1, [r4, #0]
 8017a48:	9804      	ldr	r0, [sp, #16]
 8017a4a:	fb02 f303 	mul.w	r3, r2, r3
 8017a4e:	3304      	adds	r3, #4
 8017a50:	7b22      	ldrb	r2, [r4, #12]
 8017a52:	4419      	add	r1, r3
 8017a54:	445a      	add	r2, fp
 8017a56:	f841 2c04 	str.w	r2, [r1, #-4]
 8017a5a:	7b23      	ldrb	r3, [r4, #12]
 8017a5c:	9300      	str	r3, [sp, #0]
 8017a5e:	2300      	movs	r3, #0
 8017a60:	f7f8 fb02 	bl	8010068 <ucdr_init_buffer_origin_offset>
 8017a64:	81e5      	strh	r5, [r4, #14]
 8017a66:	2001      	movs	r0, #1
 8017a68:	e7a2      	b.n	80179b0 <uxr_prepare_reliable_buffer_to_write+0x218>
 8017a6a:	4682      	mov	sl, r0
 8017a6c:	e6ca      	b.n	8017804 <uxr_prepare_reliable_buffer_to_write+0x6c>
 8017a6e:	bf00      	nop
 8017a70:	08017679 	.word	0x08017679

08017a74 <uxr_prepare_next_reliable_buffer_to_send>:
 8017a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a76:	4604      	mov	r4, r0
 8017a78:	460f      	mov	r7, r1
 8017a7a:	8a00      	ldrh	r0, [r0, #16]
 8017a7c:	2101      	movs	r1, #1
 8017a7e:	4616      	mov	r6, r2
 8017a80:	461d      	mov	r5, r3
 8017a82:	f000 f8f9 	bl	8017c78 <uxr_seq_num_add>
 8017a86:	8028      	strh	r0, [r5, #0]
 8017a88:	8922      	ldrh	r2, [r4, #8]
 8017a8a:	fbb0 f3f2 	udiv	r3, r0, r2
 8017a8e:	fb02 0c13 	mls	ip, r2, r3, r0
 8017a92:	fa1f fc8c 	uxth.w	ip, ip
 8017a96:	6863      	ldr	r3, [r4, #4]
 8017a98:	fbb3 f3f2 	udiv	r3, r3, r2
 8017a9c:	fb0c fc03 	mul.w	ip, ip, r3
 8017aa0:	6823      	ldr	r3, [r4, #0]
 8017aa2:	89e1      	ldrh	r1, [r4, #14]
 8017aa4:	f10c 0c04 	add.w	ip, ip, #4
 8017aa8:	4463      	add	r3, ip
 8017aaa:	603b      	str	r3, [r7, #0]
 8017aac:	6823      	ldr	r3, [r4, #0]
 8017aae:	449c      	add	ip, r3
 8017ab0:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8017ab4:	6033      	str	r3, [r6, #0]
 8017ab6:	f000 f8e7 	bl	8017c88 <uxr_seq_num_cmp>
 8017aba:	2800      	cmp	r0, #0
 8017abc:	dd01      	ble.n	8017ac2 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8017abe:	2000      	movs	r0, #0
 8017ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017ac2:	7b23      	ldrb	r3, [r4, #12]
 8017ac4:	6832      	ldr	r2, [r6, #0]
 8017ac6:	429a      	cmp	r2, r3
 8017ac8:	d9f9      	bls.n	8017abe <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8017aca:	8a61      	ldrh	r1, [r4, #18]
 8017acc:	8a20      	ldrh	r0, [r4, #16]
 8017ace:	f000 f8d7 	bl	8017c80 <uxr_seq_num_sub>
 8017ad2:	8923      	ldrh	r3, [r4, #8]
 8017ad4:	4283      	cmp	r3, r0
 8017ad6:	d0f2      	beq.n	8017abe <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8017ad8:	8828      	ldrh	r0, [r5, #0]
 8017ada:	89e3      	ldrh	r3, [r4, #14]
 8017adc:	8220      	strh	r0, [r4, #16]
 8017ade:	4298      	cmp	r0, r3
 8017ae0:	d001      	beq.n	8017ae6 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8017ae2:	2001      	movs	r0, #1
 8017ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017ae6:	2101      	movs	r1, #1
 8017ae8:	f000 f8c6 	bl	8017c78 <uxr_seq_num_add>
 8017aec:	81e0      	strh	r0, [r4, #14]
 8017aee:	2001      	movs	r0, #1
 8017af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017af2:	bf00      	nop

08017af4 <uxr_update_output_stream_heartbeat_timestamp>:
 8017af4:	b570      	push	{r4, r5, r6, lr}
 8017af6:	8a01      	ldrh	r1, [r0, #16]
 8017af8:	4604      	mov	r4, r0
 8017afa:	8a40      	ldrh	r0, [r0, #18]
 8017afc:	4615      	mov	r5, r2
 8017afe:	461e      	mov	r6, r3
 8017b00:	f000 f8c2 	bl	8017c88 <uxr_seq_num_cmp>
 8017b04:	2800      	cmp	r0, #0
 8017b06:	db07      	blt.n	8017b18 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8017b08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017b0c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017b10:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8017b14:	2000      	movs	r0, #0
 8017b16:	bd70      	pop	{r4, r5, r6, pc}
 8017b18:	f894 0020 	ldrb.w	r0, [r4, #32]
 8017b1c:	b940      	cbnz	r0, 8017b30 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8017b1e:	2301      	movs	r3, #1
 8017b20:	f884 3020 	strb.w	r3, [r4, #32]
 8017b24:	3564      	adds	r5, #100	@ 0x64
 8017b26:	f146 0600 	adc.w	r6, r6, #0
 8017b2a:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8017b2e:	bd70      	pop	{r4, r5, r6, pc}
 8017b30:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8017b34:	4295      	cmp	r5, r2
 8017b36:	eb76 0303 	sbcs.w	r3, r6, r3
 8017b3a:	bfa5      	ittet	ge
 8017b3c:	3001      	addge	r0, #1
 8017b3e:	f884 0020 	strbge.w	r0, [r4, #32]
 8017b42:	2000      	movlt	r0, #0
 8017b44:	2001      	movge	r0, #1
 8017b46:	e7ed      	b.n	8017b24 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08017b48 <uxr_begin_output_nack_buffer_it>:
 8017b48:	8a40      	ldrh	r0, [r0, #18]
 8017b4a:	4770      	bx	lr

08017b4c <uxr_next_reliable_nack_buffer_to_send>:
 8017b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b50:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8017b54:	b082      	sub	sp, #8
 8017b56:	f1b8 0f00 	cmp.w	r8, #0
 8017b5a:	d011      	beq.n	8017b80 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8017b5c:	4604      	mov	r4, r0
 8017b5e:	8818      	ldrh	r0, [r3, #0]
 8017b60:	460e      	mov	r6, r1
 8017b62:	4617      	mov	r7, r2
 8017b64:	461d      	mov	r5, r3
 8017b66:	2101      	movs	r1, #1
 8017b68:	f000 f886 	bl	8017c78 <uxr_seq_num_add>
 8017b6c:	8028      	strh	r0, [r5, #0]
 8017b6e:	8a21      	ldrh	r1, [r4, #16]
 8017b70:	f000 f88a 	bl	8017c88 <uxr_seq_num_cmp>
 8017b74:	2800      	cmp	r0, #0
 8017b76:	dd07      	ble.n	8017b88 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8017b78:	f04f 0800 	mov.w	r8, #0
 8017b7c:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8017b80:	4640      	mov	r0, r8
 8017b82:	b002      	add	sp, #8
 8017b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b88:	8921      	ldrh	r1, [r4, #8]
 8017b8a:	8828      	ldrh	r0, [r5, #0]
 8017b8c:	6823      	ldr	r3, [r4, #0]
 8017b8e:	fbb0 f2f1 	udiv	r2, r0, r1
 8017b92:	fb01 0c12 	mls	ip, r1, r2, r0
 8017b96:	fa1f f28c 	uxth.w	r2, ip
 8017b9a:	9301      	str	r3, [sp, #4]
 8017b9c:	6863      	ldr	r3, [r4, #4]
 8017b9e:	fbb3 fcf1 	udiv	ip, r3, r1
 8017ba2:	9b01      	ldr	r3, [sp, #4]
 8017ba4:	fb02 fc0c 	mul.w	ip, r2, ip
 8017ba8:	f10c 0c04 	add.w	ip, ip, #4
 8017bac:	4463      	add	r3, ip
 8017bae:	6033      	str	r3, [r6, #0]
 8017bb0:	6823      	ldr	r3, [r4, #0]
 8017bb2:	4463      	add	r3, ip
 8017bb4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8017bb8:	603b      	str	r3, [r7, #0]
 8017bba:	7b22      	ldrb	r2, [r4, #12]
 8017bbc:	429a      	cmp	r2, r3
 8017bbe:	d0d2      	beq.n	8017b66 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8017bc0:	4640      	mov	r0, r8
 8017bc2:	b002      	add	sp, #8
 8017bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017bc8 <uxr_process_acknack>:
 8017bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017bca:	4604      	mov	r4, r0
 8017bcc:	460e      	mov	r6, r1
 8017bce:	4610      	mov	r0, r2
 8017bd0:	2101      	movs	r1, #1
 8017bd2:	f000 f855 	bl	8017c80 <uxr_seq_num_sub>
 8017bd6:	8a61      	ldrh	r1, [r4, #18]
 8017bd8:	f000 f852 	bl	8017c80 <uxr_seq_num_sub>
 8017bdc:	b1c0      	cbz	r0, 8017c10 <uxr_process_acknack+0x48>
 8017bde:	4605      	mov	r5, r0
 8017be0:	2700      	movs	r7, #0
 8017be2:	2101      	movs	r1, #1
 8017be4:	8a60      	ldrh	r0, [r4, #18]
 8017be6:	f000 f847 	bl	8017c78 <uxr_seq_num_add>
 8017bea:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8017bee:	fbb0 f1fc 	udiv	r1, r0, ip
 8017bf2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017bf6:	fb0c 0111 	mls	r1, ip, r1, r0
 8017bfa:	b289      	uxth	r1, r1
 8017bfc:	3701      	adds	r7, #1
 8017bfe:	fbb3 f3fc 	udiv	r3, r3, ip
 8017c02:	fb01 f303 	mul.w	r3, r1, r3
 8017c06:	42bd      	cmp	r5, r7
 8017c08:	7b21      	ldrb	r1, [r4, #12]
 8017c0a:	8260      	strh	r0, [r4, #18]
 8017c0c:	50d1      	str	r1, [r2, r3]
 8017c0e:	d1e8      	bne.n	8017be2 <uxr_process_acknack+0x1a>
 8017c10:	3e00      	subs	r6, #0
 8017c12:	f04f 0300 	mov.w	r3, #0
 8017c16:	bf18      	it	ne
 8017c18:	2601      	movne	r6, #1
 8017c1a:	f884 3020 	strb.w	r3, [r4, #32]
 8017c1e:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8017c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017c24 <uxr_is_output_up_to_date>:
 8017c24:	8a01      	ldrh	r1, [r0, #16]
 8017c26:	8a40      	ldrh	r0, [r0, #18]
 8017c28:	b508      	push	{r3, lr}
 8017c2a:	f000 f82d 	bl	8017c88 <uxr_seq_num_cmp>
 8017c2e:	fab0 f080 	clz	r0, r0
 8017c32:	0940      	lsrs	r0, r0, #5
 8017c34:	bd08      	pop	{r3, pc}
 8017c36:	bf00      	nop

08017c38 <get_available_free_slots>:
 8017c38:	8902      	ldrh	r2, [r0, #8]
 8017c3a:	b1da      	cbz	r2, 8017c74 <get_available_free_slots+0x3c>
 8017c3c:	b530      	push	{r4, r5, lr}
 8017c3e:	2100      	movs	r1, #0
 8017c40:	6843      	ldr	r3, [r0, #4]
 8017c42:	6805      	ldr	r5, [r0, #0]
 8017c44:	7b04      	ldrb	r4, [r0, #12]
 8017c46:	fbb3 fef2 	udiv	lr, r3, r2
 8017c4a:	4608      	mov	r0, r1
 8017c4c:	460b      	mov	r3, r1
 8017c4e:	fbb3 fcf2 	udiv	ip, r3, r2
 8017c52:	fb02 331c 	mls	r3, r2, ip, r3
 8017c56:	b29b      	uxth	r3, r3
 8017c58:	fb0e f303 	mul.w	r3, lr, r3
 8017c5c:	3101      	adds	r1, #1
 8017c5e:	f855 c003 	ldr.w	ip, [r5, r3]
 8017c62:	4564      	cmp	r4, ip
 8017c64:	bf08      	it	eq
 8017c66:	3001      	addeq	r0, #1
 8017c68:	b28b      	uxth	r3, r1
 8017c6a:	bf08      	it	eq
 8017c6c:	b280      	uxtheq	r0, r0
 8017c6e:	4293      	cmp	r3, r2
 8017c70:	d3ed      	bcc.n	8017c4e <get_available_free_slots+0x16>
 8017c72:	bd30      	pop	{r4, r5, pc}
 8017c74:	4610      	mov	r0, r2
 8017c76:	4770      	bx	lr

08017c78 <uxr_seq_num_add>:
 8017c78:	4408      	add	r0, r1
 8017c7a:	b280      	uxth	r0, r0
 8017c7c:	4770      	bx	lr
 8017c7e:	bf00      	nop

08017c80 <uxr_seq_num_sub>:
 8017c80:	1a40      	subs	r0, r0, r1
 8017c82:	b280      	uxth	r0, r0
 8017c84:	4770      	bx	lr
 8017c86:	bf00      	nop

08017c88 <uxr_seq_num_cmp>:
 8017c88:	4288      	cmp	r0, r1
 8017c8a:	d011      	beq.n	8017cb0 <uxr_seq_num_cmp+0x28>
 8017c8c:	d309      	bcc.n	8017ca2 <uxr_seq_num_cmp+0x1a>
 8017c8e:	4288      	cmp	r0, r1
 8017c90:	d910      	bls.n	8017cb4 <uxr_seq_num_cmp+0x2c>
 8017c92:	1a40      	subs	r0, r0, r1
 8017c94:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8017c98:	bfd4      	ite	le
 8017c9a:	2001      	movle	r0, #1
 8017c9c:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8017ca0:	4770      	bx	lr
 8017ca2:	1a0b      	subs	r3, r1, r0
 8017ca4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8017ca8:	daf1      	bge.n	8017c8e <uxr_seq_num_cmp+0x6>
 8017caa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017cae:	4770      	bx	lr
 8017cb0:	2000      	movs	r0, #0
 8017cb2:	4770      	bx	lr
 8017cb4:	2001      	movs	r0, #1
 8017cb6:	4770      	bx	lr

08017cb8 <rcl_get_default_domain_id>:
 8017cb8:	b530      	push	{r4, r5, lr}
 8017cba:	b083      	sub	sp, #12
 8017cbc:	2300      	movs	r3, #0
 8017cbe:	9300      	str	r3, [sp, #0]
 8017cc0:	b1d0      	cbz	r0, 8017cf8 <rcl_get_default_domain_id+0x40>
 8017cc2:	4604      	mov	r4, r0
 8017cc4:	4669      	mov	r1, sp
 8017cc6:	4815      	ldr	r0, [pc, #84]	@ (8017d1c <rcl_get_default_domain_id+0x64>)
 8017cc8:	f7f5 fb20 	bl	800d30c <rcutils_get_env>
 8017ccc:	4602      	mov	r2, r0
 8017cce:	b110      	cbz	r0, 8017cd6 <rcl_get_default_domain_id+0x1e>
 8017cd0:	2001      	movs	r0, #1
 8017cd2:	b003      	add	sp, #12
 8017cd4:	bd30      	pop	{r4, r5, pc}
 8017cd6:	9b00      	ldr	r3, [sp, #0]
 8017cd8:	b18b      	cbz	r3, 8017cfe <rcl_get_default_domain_id+0x46>
 8017cda:	7818      	ldrb	r0, [r3, #0]
 8017cdc:	2800      	cmp	r0, #0
 8017cde:	d0f8      	beq.n	8017cd2 <rcl_get_default_domain_id+0x1a>
 8017ce0:	a901      	add	r1, sp, #4
 8017ce2:	4618      	mov	r0, r3
 8017ce4:	9201      	str	r2, [sp, #4]
 8017ce6:	f000 fc83 	bl	80185f0 <strtoul>
 8017cea:	4605      	mov	r5, r0
 8017cec:	b150      	cbz	r0, 8017d04 <rcl_get_default_domain_id+0x4c>
 8017cee:	1c43      	adds	r3, r0, #1
 8017cf0:	d00d      	beq.n	8017d0e <rcl_get_default_domain_id+0x56>
 8017cf2:	6025      	str	r5, [r4, #0]
 8017cf4:	2000      	movs	r0, #0
 8017cf6:	e7ec      	b.n	8017cd2 <rcl_get_default_domain_id+0x1a>
 8017cf8:	200b      	movs	r0, #11
 8017cfa:	b003      	add	sp, #12
 8017cfc:	bd30      	pop	{r4, r5, pc}
 8017cfe:	4618      	mov	r0, r3
 8017d00:	b003      	add	sp, #12
 8017d02:	bd30      	pop	{r4, r5, pc}
 8017d04:	9b01      	ldr	r3, [sp, #4]
 8017d06:	781b      	ldrb	r3, [r3, #0]
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d0f2      	beq.n	8017cf2 <rcl_get_default_domain_id+0x3a>
 8017d0c:	e7e0      	b.n	8017cd0 <rcl_get_default_domain_id+0x18>
 8017d0e:	f000 ff1f 	bl	8018b50 <__errno>
 8017d12:	6803      	ldr	r3, [r0, #0]
 8017d14:	2b22      	cmp	r3, #34	@ 0x22
 8017d16:	d1ec      	bne.n	8017cf2 <rcl_get_default_domain_id+0x3a>
 8017d18:	e7da      	b.n	8017cd0 <rcl_get_default_domain_id+0x18>
 8017d1a:	bf00      	nop
 8017d1c:	08019f9c 	.word	0x08019f9c

08017d20 <rcl_expand_topic_name>:
 8017d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d24:	b08b      	sub	sp, #44	@ 0x2c
 8017d26:	9306      	str	r3, [sp, #24]
 8017d28:	2800      	cmp	r0, #0
 8017d2a:	f000 80ad 	beq.w	8017e88 <rcl_expand_topic_name+0x168>
 8017d2e:	460e      	mov	r6, r1
 8017d30:	2900      	cmp	r1, #0
 8017d32:	f000 80a9 	beq.w	8017e88 <rcl_expand_topic_name+0x168>
 8017d36:	4617      	mov	r7, r2
 8017d38:	2a00      	cmp	r2, #0
 8017d3a:	f000 80a5 	beq.w	8017e88 <rcl_expand_topic_name+0x168>
 8017d3e:	2b00      	cmp	r3, #0
 8017d40:	f000 80a2 	beq.w	8017e88 <rcl_expand_topic_name+0x168>
 8017d44:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	f000 809e 	beq.w	8017e88 <rcl_expand_topic_name+0x168>
 8017d4c:	2200      	movs	r2, #0
 8017d4e:	a909      	add	r1, sp, #36	@ 0x24
 8017d50:	4680      	mov	r8, r0
 8017d52:	f000 f949 	bl	8017fe8 <rcl_validate_topic_name>
 8017d56:	4604      	mov	r4, r0
 8017d58:	2800      	cmp	r0, #0
 8017d5a:	f040 8096 	bne.w	8017e8a <rcl_expand_topic_name+0x16a>
 8017d5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	f040 809a 	bne.w	8017e9a <rcl_expand_topic_name+0x17a>
 8017d66:	4602      	mov	r2, r0
 8017d68:	a909      	add	r1, sp, #36	@ 0x24
 8017d6a:	4630      	mov	r0, r6
 8017d6c:	f7f5 fd6c 	bl	800d848 <rmw_validate_node_name>
 8017d70:	2800      	cmp	r0, #0
 8017d72:	f040 808e 	bne.w	8017e92 <rcl_expand_topic_name+0x172>
 8017d76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017d78:	2a00      	cmp	r2, #0
 8017d7a:	f040 8093 	bne.w	8017ea4 <rcl_expand_topic_name+0x184>
 8017d7e:	a909      	add	r1, sp, #36	@ 0x24
 8017d80:	4638      	mov	r0, r7
 8017d82:	f7f5 fd43 	bl	800d80c <rmw_validate_namespace>
 8017d86:	2800      	cmp	r0, #0
 8017d88:	f040 8083 	bne.w	8017e92 <rcl_expand_topic_name+0x172>
 8017d8c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8017d8e:	2c00      	cmp	r4, #0
 8017d90:	f040 80ed 	bne.w	8017f6e <rcl_expand_topic_name+0x24e>
 8017d94:	217b      	movs	r1, #123	@ 0x7b
 8017d96:	4640      	mov	r0, r8
 8017d98:	f000 fdf0 	bl	801897c <strchr>
 8017d9c:	f898 3000 	ldrb.w	r3, [r8]
 8017da0:	2b2f      	cmp	r3, #47	@ 0x2f
 8017da2:	4605      	mov	r5, r0
 8017da4:	f000 809e 	beq.w	8017ee4 <rcl_expand_topic_name+0x1c4>
 8017da8:	2b7e      	cmp	r3, #126	@ 0x7e
 8017daa:	f040 80a2 	bne.w	8017ef2 <rcl_expand_topic_name+0x1d2>
 8017dae:	4638      	mov	r0, r7
 8017db0:	f7e8 fa38 	bl	8000224 <strlen>
 8017db4:	4a82      	ldr	r2, [pc, #520]	@ (8017fc0 <rcl_expand_topic_name+0x2a0>)
 8017db6:	4b83      	ldr	r3, [pc, #524]	@ (8017fc4 <rcl_expand_topic_name+0x2a4>)
 8017db8:	2801      	cmp	r0, #1
 8017dba:	bf18      	it	ne
 8017dbc:	4613      	movne	r3, r2
 8017dbe:	9302      	str	r3, [sp, #8]
 8017dc0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8017dc2:	9300      	str	r3, [sp, #0]
 8017dc4:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8017dc8:	f108 0301 	add.w	r3, r8, #1
 8017dcc:	9305      	str	r3, [sp, #20]
 8017dce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8017dd2:	9301      	str	r3, [sp, #4]
 8017dd4:	ab14      	add	r3, sp, #80	@ 0x50
 8017dd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017dd8:	f7f5 fae2 	bl	800d3a0 <rcutils_format_string_limit>
 8017ddc:	4682      	mov	sl, r0
 8017dde:	2800      	cmp	r0, #0
 8017de0:	f000 80c7 	beq.w	8017f72 <rcl_expand_topic_name+0x252>
 8017de4:	2d00      	cmp	r5, #0
 8017de6:	f000 80a2 	beq.w	8017f2e <rcl_expand_topic_name+0x20e>
 8017dea:	217b      	movs	r1, #123	@ 0x7b
 8017dec:	f000 fdc6 	bl	801897c <strchr>
 8017df0:	46d1      	mov	r9, sl
 8017df2:	4605      	mov	r5, r0
 8017df4:	9407      	str	r4, [sp, #28]
 8017df6:	46d3      	mov	fp, sl
 8017df8:	464c      	mov	r4, r9
 8017dfa:	2d00      	cmp	r5, #0
 8017dfc:	f000 80be 	beq.w	8017f7c <rcl_expand_topic_name+0x25c>
 8017e00:	217d      	movs	r1, #125	@ 0x7d
 8017e02:	4620      	mov	r0, r4
 8017e04:	f000 fdba 	bl	801897c <strchr>
 8017e08:	eba0 0905 	sub.w	r9, r0, r5
 8017e0c:	f109 0a01 	add.w	sl, r9, #1
 8017e10:	486d      	ldr	r0, [pc, #436]	@ (8017fc8 <rcl_expand_topic_name+0x2a8>)
 8017e12:	4652      	mov	r2, sl
 8017e14:	4629      	mov	r1, r5
 8017e16:	f000 fdbe 	bl	8018996 <strncmp>
 8017e1a:	2800      	cmp	r0, #0
 8017e1c:	d067      	beq.n	8017eee <rcl_expand_topic_name+0x1ce>
 8017e1e:	486b      	ldr	r0, [pc, #428]	@ (8017fcc <rcl_expand_topic_name+0x2ac>)
 8017e20:	4652      	mov	r2, sl
 8017e22:	4629      	mov	r1, r5
 8017e24:	f000 fdb7 	bl	8018996 <strncmp>
 8017e28:	b130      	cbz	r0, 8017e38 <rcl_expand_topic_name+0x118>
 8017e2a:	4869      	ldr	r0, [pc, #420]	@ (8017fd0 <rcl_expand_topic_name+0x2b0>)
 8017e2c:	4652      	mov	r2, sl
 8017e2e:	4629      	mov	r1, r5
 8017e30:	f000 fdb1 	bl	8018996 <strncmp>
 8017e34:	2800      	cmp	r0, #0
 8017e36:	d137      	bne.n	8017ea8 <rcl_expand_topic_name+0x188>
 8017e38:	46b9      	mov	r9, r7
 8017e3a:	ab16      	add	r3, sp, #88	@ 0x58
 8017e3c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017e40:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017e44:	ab14      	add	r3, sp, #80	@ 0x50
 8017e46:	4628      	mov	r0, r5
 8017e48:	cb0c      	ldmia	r3, {r2, r3}
 8017e4a:	4651      	mov	r1, sl
 8017e4c:	f7f5 fbe4 	bl	800d618 <rcutils_strndup>
 8017e50:	4605      	mov	r5, r0
 8017e52:	2800      	cmp	r0, #0
 8017e54:	f000 809c 	beq.w	8017f90 <rcl_expand_topic_name+0x270>
 8017e58:	464a      	mov	r2, r9
 8017e5a:	4620      	mov	r0, r4
 8017e5c:	ab14      	add	r3, sp, #80	@ 0x50
 8017e5e:	4629      	mov	r1, r5
 8017e60:	f7f5 fad8 	bl	800d414 <rcutils_repl_str>
 8017e64:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8017e66:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017e68:	4604      	mov	r4, r0
 8017e6a:	4628      	mov	r0, r5
 8017e6c:	4798      	blx	r3
 8017e6e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017e70:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8017e72:	4658      	mov	r0, fp
 8017e74:	4798      	blx	r3
 8017e76:	2c00      	cmp	r4, #0
 8017e78:	d07b      	beq.n	8017f72 <rcl_expand_topic_name+0x252>
 8017e7a:	217b      	movs	r1, #123	@ 0x7b
 8017e7c:	4620      	mov	r0, r4
 8017e7e:	f000 fd7d 	bl	801897c <strchr>
 8017e82:	46a3      	mov	fp, r4
 8017e84:	4605      	mov	r5, r0
 8017e86:	e7b8      	b.n	8017dfa <rcl_expand_topic_name+0xda>
 8017e88:	240b      	movs	r4, #11
 8017e8a:	4620      	mov	r0, r4
 8017e8c:	b00b      	add	sp, #44	@ 0x2c
 8017e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e92:	f7fc f843 	bl	8013f1c <rcl_convert_rmw_ret_to_rcl_ret>
 8017e96:	4604      	mov	r4, r0
 8017e98:	e7f7      	b.n	8017e8a <rcl_expand_topic_name+0x16a>
 8017e9a:	2467      	movs	r4, #103	@ 0x67
 8017e9c:	4620      	mov	r0, r4
 8017e9e:	b00b      	add	sp, #44	@ 0x2c
 8017ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ea4:	24c9      	movs	r4, #201	@ 0xc9
 8017ea6:	e7f0      	b.n	8017e8a <rcl_expand_topic_name+0x16a>
 8017ea8:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8017eac:	9806      	ldr	r0, [sp, #24]
 8017eae:	1c69      	adds	r1, r5, #1
 8017eb0:	f7fe f99c 	bl	80161ec <rcutils_string_map_getn>
 8017eb4:	4681      	mov	r9, r0
 8017eb6:	2800      	cmp	r0, #0
 8017eb8:	d1bf      	bne.n	8017e3a <rcl_expand_topic_name+0x11a>
 8017eba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017ebc:	aa16      	add	r2, sp, #88	@ 0x58
 8017ebe:	6018      	str	r0, [r3, #0]
 8017ec0:	ca07      	ldmia	r2, {r0, r1, r2}
 8017ec2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017ec6:	ab14      	add	r3, sp, #80	@ 0x50
 8017ec8:	cb0c      	ldmia	r3, {r2, r3}
 8017eca:	4651      	mov	r1, sl
 8017ecc:	4628      	mov	r0, r5
 8017ece:	f7f5 fba3 	bl	800d618 <rcutils_strndup>
 8017ed2:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8017ed4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017ed6:	4798      	blx	r3
 8017ed8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017eda:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8017edc:	4658      	mov	r0, fp
 8017ede:	2469      	movs	r4, #105	@ 0x69
 8017ee0:	4798      	blx	r3
 8017ee2:	e7d2      	b.n	8017e8a <rcl_expand_topic_name+0x16a>
 8017ee4:	2800      	cmp	r0, #0
 8017ee6:	d05b      	beq.n	8017fa0 <rcl_expand_topic_name+0x280>
 8017ee8:	46c1      	mov	r9, r8
 8017eea:	46a2      	mov	sl, r4
 8017eec:	e782      	b.n	8017df4 <rcl_expand_topic_name+0xd4>
 8017eee:	46b1      	mov	r9, r6
 8017ef0:	e7a3      	b.n	8017e3a <rcl_expand_topic_name+0x11a>
 8017ef2:	2800      	cmp	r0, #0
 8017ef4:	d1f8      	bne.n	8017ee8 <rcl_expand_topic_name+0x1c8>
 8017ef6:	4638      	mov	r0, r7
 8017ef8:	f7e8 f994 	bl	8000224 <strlen>
 8017efc:	4a35      	ldr	r2, [pc, #212]	@ (8017fd4 <rcl_expand_topic_name+0x2b4>)
 8017efe:	4b36      	ldr	r3, [pc, #216]	@ (8017fd8 <rcl_expand_topic_name+0x2b8>)
 8017f00:	f8cd 8010 	str.w	r8, [sp, #16]
 8017f04:	2801      	cmp	r0, #1
 8017f06:	bf18      	it	ne
 8017f08:	4613      	movne	r3, r2
 8017f0a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8017f0e:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8017f12:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8017f14:	9703      	str	r7, [sp, #12]
 8017f16:	9200      	str	r2, [sp, #0]
 8017f18:	ab14      	add	r3, sp, #80	@ 0x50
 8017f1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017f1c:	f7f5 fa40 	bl	800d3a0 <rcutils_format_string_limit>
 8017f20:	4682      	mov	sl, r0
 8017f22:	4653      	mov	r3, sl
 8017f24:	b32b      	cbz	r3, 8017f72 <rcl_expand_topic_name+0x252>
 8017f26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017f28:	f8c3 a000 	str.w	sl, [r3]
 8017f2c:	e7ad      	b.n	8017e8a <rcl_expand_topic_name+0x16a>
 8017f2e:	f89a 3000 	ldrb.w	r3, [sl]
 8017f32:	2b2f      	cmp	r3, #47	@ 0x2f
 8017f34:	d0f7      	beq.n	8017f26 <rcl_expand_topic_name+0x206>
 8017f36:	4638      	mov	r0, r7
 8017f38:	f7e8 f974 	bl	8000224 <strlen>
 8017f3c:	4a25      	ldr	r2, [pc, #148]	@ (8017fd4 <rcl_expand_topic_name+0x2b4>)
 8017f3e:	4b26      	ldr	r3, [pc, #152]	@ (8017fd8 <rcl_expand_topic_name+0x2b8>)
 8017f40:	f8cd a010 	str.w	sl, [sp, #16]
 8017f44:	2801      	cmp	r0, #1
 8017f46:	bf18      	it	ne
 8017f48:	4613      	movne	r3, r2
 8017f4a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8017f4e:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8017f52:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8017f54:	9703      	str	r7, [sp, #12]
 8017f56:	9200      	str	r2, [sp, #0]
 8017f58:	ab14      	add	r3, sp, #80	@ 0x50
 8017f5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017f5c:	f7f5 fa20 	bl	800d3a0 <rcutils_format_string_limit>
 8017f60:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017f62:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8017f64:	4605      	mov	r5, r0
 8017f66:	4650      	mov	r0, sl
 8017f68:	4798      	blx	r3
 8017f6a:	46aa      	mov	sl, r5
 8017f6c:	e7d9      	b.n	8017f22 <rcl_expand_topic_name+0x202>
 8017f6e:	24ca      	movs	r4, #202	@ 0xca
 8017f70:	e78b      	b.n	8017e8a <rcl_expand_topic_name+0x16a>
 8017f72:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8017f74:	2300      	movs	r3, #0
 8017f76:	6013      	str	r3, [r2, #0]
 8017f78:	240a      	movs	r4, #10
 8017f7a:	e786      	b.n	8017e8a <rcl_expand_topic_name+0x16a>
 8017f7c:	465b      	mov	r3, fp
 8017f7e:	9c07      	ldr	r4, [sp, #28]
 8017f80:	46da      	mov	sl, fp
 8017f82:	2b00      	cmp	r3, #0
 8017f84:	d1d3      	bne.n	8017f2e <rcl_expand_topic_name+0x20e>
 8017f86:	f898 3000 	ldrb.w	r3, [r8]
 8017f8a:	2b2f      	cmp	r3, #47	@ 0x2f
 8017f8c:	d0cb      	beq.n	8017f26 <rcl_expand_topic_name+0x206>
 8017f8e:	e7b2      	b.n	8017ef6 <rcl_expand_topic_name+0x1d6>
 8017f90:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8017f94:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017f96:	6015      	str	r5, [r2, #0]
 8017f98:	4658      	mov	r0, fp
 8017f9a:	4798      	blx	r3
 8017f9c:	240a      	movs	r4, #10
 8017f9e:	e774      	b.n	8017e8a <rcl_expand_topic_name+0x16a>
 8017fa0:	ab17      	add	r3, sp, #92	@ 0x5c
 8017fa2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017fa6:	e88d 0003 	stmia.w	sp, {r0, r1}
 8017faa:	ab14      	add	r3, sp, #80	@ 0x50
 8017fac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8017fae:	4640      	mov	r0, r8
 8017fb0:	f7f5 fb10 	bl	800d5d4 <rcutils_strdup>
 8017fb4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017fb6:	2800      	cmp	r0, #0
 8017fb8:	6018      	str	r0, [r3, #0]
 8017fba:	bf08      	it	eq
 8017fbc:	240a      	moveq	r4, #10
 8017fbe:	e764      	b.n	8017e8a <rcl_expand_topic_name+0x16a>
 8017fc0:	08019fac 	.word	0x08019fac
 8017fc4:	08019e38 	.word	0x08019e38
 8017fc8:	08019fb4 	.word	0x08019fb4
 8017fcc:	08019fbc 	.word	0x08019fbc
 8017fd0:	08019fc4 	.word	0x08019fc4
 8017fd4:	08019ae0 	.word	0x08019ae0
 8017fd8:	08019ad8 	.word	0x08019ad8

08017fdc <rcl_get_default_topic_name_substitutions>:
 8017fdc:	2800      	cmp	r0, #0
 8017fde:	bf0c      	ite	eq
 8017fe0:	200b      	moveq	r0, #11
 8017fe2:	2000      	movne	r0, #0
 8017fe4:	4770      	bx	lr
 8017fe6:	bf00      	nop

08017fe8 <rcl_validate_topic_name>:
 8017fe8:	2800      	cmp	r0, #0
 8017fea:	d07a      	beq.n	80180e2 <rcl_validate_topic_name+0xfa>
 8017fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017ff0:	460e      	mov	r6, r1
 8017ff2:	2900      	cmp	r1, #0
 8017ff4:	d07c      	beq.n	80180f0 <rcl_validate_topic_name+0x108>
 8017ff6:	4617      	mov	r7, r2
 8017ff8:	4605      	mov	r5, r0
 8017ffa:	f7e8 f913 	bl	8000224 <strlen>
 8017ffe:	b1b0      	cbz	r0, 801802e <rcl_validate_topic_name+0x46>
 8018000:	f895 9000 	ldrb.w	r9, [r5]
 8018004:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8018188 <rcl_validate_topic_name+0x1a0>
 8018008:	f81c 3009 	ldrb.w	r3, [ip, r9]
 801800c:	f013 0304 	ands.w	r3, r3, #4
 8018010:	d169      	bne.n	80180e6 <rcl_validate_topic_name+0xfe>
 8018012:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8018016:	f815 2008 	ldrb.w	r2, [r5, r8]
 801801a:	2a2f      	cmp	r2, #47	@ 0x2f
 801801c:	d10e      	bne.n	801803c <rcl_validate_topic_name+0x54>
 801801e:	2202      	movs	r2, #2
 8018020:	6032      	str	r2, [r6, #0]
 8018022:	b36f      	cbz	r7, 8018080 <rcl_validate_topic_name+0x98>
 8018024:	f8c7 8000 	str.w	r8, [r7]
 8018028:	4618      	mov	r0, r3
 801802a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801802e:	2301      	movs	r3, #1
 8018030:	6033      	str	r3, [r6, #0]
 8018032:	b32f      	cbz	r7, 8018080 <rcl_validate_topic_name+0x98>
 8018034:	2000      	movs	r0, #0
 8018036:	6038      	str	r0, [r7, #0]
 8018038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801803c:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8018040:	461c      	mov	r4, r3
 8018042:	4619      	mov	r1, r3
 8018044:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8018048:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801804c:	f1be 0f09 	cmp.w	lr, #9
 8018050:	d919      	bls.n	8018086 <rcl_validate_topic_name+0x9e>
 8018052:	f022 0e20 	bic.w	lr, r2, #32
 8018056:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 801805a:	f1be 0f19 	cmp.w	lr, #25
 801805e:	d912      	bls.n	8018086 <rcl_validate_topic_name+0x9e>
 8018060:	2a5f      	cmp	r2, #95	@ 0x5f
 8018062:	d019      	beq.n	8018098 <rcl_validate_topic_name+0xb0>
 8018064:	2a2f      	cmp	r2, #47	@ 0x2f
 8018066:	d051      	beq.n	801810c <rcl_validate_topic_name+0x124>
 8018068:	2a7e      	cmp	r2, #126	@ 0x7e
 801806a:	d048      	beq.n	80180fe <rcl_validate_topic_name+0x116>
 801806c:	2a7b      	cmp	r2, #123	@ 0x7b
 801806e:	d054      	beq.n	801811a <rcl_validate_topic_name+0x132>
 8018070:	2a7d      	cmp	r2, #125	@ 0x7d
 8018072:	d161      	bne.n	8018138 <rcl_validate_topic_name+0x150>
 8018074:	2c00      	cmp	r4, #0
 8018076:	d155      	bne.n	8018124 <rcl_validate_topic_name+0x13c>
 8018078:	2305      	movs	r3, #5
 801807a:	6033      	str	r3, [r6, #0]
 801807c:	b107      	cbz	r7, 8018080 <rcl_validate_topic_name+0x98>
 801807e:	6039      	str	r1, [r7, #0]
 8018080:	2000      	movs	r0, #0
 8018082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018086:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801808a:	0752      	lsls	r2, r2, #29
 801808c:	d504      	bpl.n	8018098 <rcl_validate_topic_name+0xb0>
 801808e:	b11c      	cbz	r4, 8018098 <rcl_validate_topic_name+0xb0>
 8018090:	b111      	cbz	r1, 8018098 <rcl_validate_topic_name+0xb0>
 8018092:	1e4a      	subs	r2, r1, #1
 8018094:	429a      	cmp	r2, r3
 8018096:	d02d      	beq.n	80180f4 <rcl_validate_topic_name+0x10c>
 8018098:	3101      	adds	r1, #1
 801809a:	4288      	cmp	r0, r1
 801809c:	d1d2      	bne.n	8018044 <rcl_validate_topic_name+0x5c>
 801809e:	2c00      	cmp	r4, #0
 80180a0:	d145      	bne.n	801812e <rcl_validate_topic_name+0x146>
 80180a2:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 80180a6:	d04f      	beq.n	8018148 <rcl_validate_topic_name+0x160>
 80180a8:	4620      	mov	r0, r4
 80180aa:	2301      	movs	r3, #1
 80180ac:	e006      	b.n	80180bc <rcl_validate_topic_name+0xd4>
 80180ae:	428b      	cmp	r3, r1
 80180b0:	f105 0501 	add.w	r5, r5, #1
 80180b4:	f103 0201 	add.w	r2, r3, #1
 80180b8:	d236      	bcs.n	8018128 <rcl_validate_topic_name+0x140>
 80180ba:	4613      	mov	r3, r2
 80180bc:	4580      	cmp	r8, r0
 80180be:	f100 0001 	add.w	r0, r0, #1
 80180c2:	d0f4      	beq.n	80180ae <rcl_validate_topic_name+0xc6>
 80180c4:	782a      	ldrb	r2, [r5, #0]
 80180c6:	2a2f      	cmp	r2, #47	@ 0x2f
 80180c8:	d1f1      	bne.n	80180ae <rcl_validate_topic_name+0xc6>
 80180ca:	786a      	ldrb	r2, [r5, #1]
 80180cc:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80180d0:	0754      	lsls	r4, r2, #29
 80180d2:	d5ec      	bpl.n	80180ae <rcl_validate_topic_name+0xc6>
 80180d4:	2204      	movs	r2, #4
 80180d6:	6032      	str	r2, [r6, #0]
 80180d8:	2f00      	cmp	r7, #0
 80180da:	d0d1      	beq.n	8018080 <rcl_validate_topic_name+0x98>
 80180dc:	603b      	str	r3, [r7, #0]
 80180de:	2000      	movs	r0, #0
 80180e0:	e7aa      	b.n	8018038 <rcl_validate_topic_name+0x50>
 80180e2:	200b      	movs	r0, #11
 80180e4:	4770      	bx	lr
 80180e6:	2304      	movs	r3, #4
 80180e8:	6033      	str	r3, [r6, #0]
 80180ea:	2f00      	cmp	r7, #0
 80180ec:	d1a2      	bne.n	8018034 <rcl_validate_topic_name+0x4c>
 80180ee:	e7c7      	b.n	8018080 <rcl_validate_topic_name+0x98>
 80180f0:	200b      	movs	r0, #11
 80180f2:	e7a1      	b.n	8018038 <rcl_validate_topic_name+0x50>
 80180f4:	2309      	movs	r3, #9
 80180f6:	6033      	str	r3, [r6, #0]
 80180f8:	2f00      	cmp	r7, #0
 80180fa:	d1c0      	bne.n	801807e <rcl_validate_topic_name+0x96>
 80180fc:	e7c0      	b.n	8018080 <rcl_validate_topic_name+0x98>
 80180fe:	2900      	cmp	r1, #0
 8018100:	d0ca      	beq.n	8018098 <rcl_validate_topic_name+0xb0>
 8018102:	2306      	movs	r3, #6
 8018104:	6033      	str	r3, [r6, #0]
 8018106:	2f00      	cmp	r7, #0
 8018108:	d1b9      	bne.n	801807e <rcl_validate_topic_name+0x96>
 801810a:	e7b9      	b.n	8018080 <rcl_validate_topic_name+0x98>
 801810c:	2c00      	cmp	r4, #0
 801810e:	d0c3      	beq.n	8018098 <rcl_validate_topic_name+0xb0>
 8018110:	2308      	movs	r3, #8
 8018112:	6033      	str	r3, [r6, #0]
 8018114:	2f00      	cmp	r7, #0
 8018116:	d1b2      	bne.n	801807e <rcl_validate_topic_name+0x96>
 8018118:	e7b2      	b.n	8018080 <rcl_validate_topic_name+0x98>
 801811a:	2c00      	cmp	r4, #0
 801811c:	d1f8      	bne.n	8018110 <rcl_validate_topic_name+0x128>
 801811e:	460b      	mov	r3, r1
 8018120:	2401      	movs	r4, #1
 8018122:	e7b9      	b.n	8018098 <rcl_validate_topic_name+0xb0>
 8018124:	2400      	movs	r4, #0
 8018126:	e7b7      	b.n	8018098 <rcl_validate_topic_name+0xb0>
 8018128:	2000      	movs	r0, #0
 801812a:	6030      	str	r0, [r6, #0]
 801812c:	e784      	b.n	8018038 <rcl_validate_topic_name+0x50>
 801812e:	2205      	movs	r2, #5
 8018130:	6032      	str	r2, [r6, #0]
 8018132:	2f00      	cmp	r7, #0
 8018134:	d1d2      	bne.n	80180dc <rcl_validate_topic_name+0xf4>
 8018136:	e7a3      	b.n	8018080 <rcl_validate_topic_name+0x98>
 8018138:	2c00      	cmp	r4, #0
 801813a:	bf14      	ite	ne
 801813c:	2308      	movne	r3, #8
 801813e:	2303      	moveq	r3, #3
 8018140:	6033      	str	r3, [r6, #0]
 8018142:	2f00      	cmp	r7, #0
 8018144:	d19b      	bne.n	801807e <rcl_validate_topic_name+0x96>
 8018146:	e79b      	b.n	8018080 <rcl_validate_topic_name+0x98>
 8018148:	2301      	movs	r3, #1
 801814a:	e00a      	b.n	8018162 <rcl_validate_topic_name+0x17a>
 801814c:	2c01      	cmp	r4, #1
 801814e:	d013      	beq.n	8018178 <rcl_validate_topic_name+0x190>
 8018150:	4299      	cmp	r1, r3
 8018152:	f104 0401 	add.w	r4, r4, #1
 8018156:	f105 0501 	add.w	r5, r5, #1
 801815a:	f103 0201 	add.w	r2, r3, #1
 801815e:	d9e3      	bls.n	8018128 <rcl_validate_topic_name+0x140>
 8018160:	4613      	mov	r3, r2
 8018162:	45a0      	cmp	r8, r4
 8018164:	d0f4      	beq.n	8018150 <rcl_validate_topic_name+0x168>
 8018166:	782a      	ldrb	r2, [r5, #0]
 8018168:	2a2f      	cmp	r2, #47	@ 0x2f
 801816a:	d1ef      	bne.n	801814c <rcl_validate_topic_name+0x164>
 801816c:	786a      	ldrb	r2, [r5, #1]
 801816e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8018172:	0752      	lsls	r2, r2, #29
 8018174:	d5ec      	bpl.n	8018150 <rcl_validate_topic_name+0x168>
 8018176:	e7ad      	b.n	80180d4 <rcl_validate_topic_name+0xec>
 8018178:	2307      	movs	r3, #7
 801817a:	6033      	str	r3, [r6, #0]
 801817c:	2f00      	cmp	r7, #0
 801817e:	f43f af7f 	beq.w	8018080 <rcl_validate_topic_name+0x98>
 8018182:	603c      	str	r4, [r7, #0]
 8018184:	2000      	movs	r0, #0
 8018186:	e757      	b.n	8018038 <rcl_validate_topic_name+0x50>
 8018188:	0801a613 	.word	0x0801a613

0801818c <calloc>:
 801818c:	4b02      	ldr	r3, [pc, #8]	@ (8018198 <calloc+0xc>)
 801818e:	460a      	mov	r2, r1
 8018190:	4601      	mov	r1, r0
 8018192:	6818      	ldr	r0, [r3, #0]
 8018194:	f000 b802 	b.w	801819c <_calloc_r>
 8018198:	200000f4 	.word	0x200000f4

0801819c <_calloc_r>:
 801819c:	b570      	push	{r4, r5, r6, lr}
 801819e:	fba1 5402 	umull	r5, r4, r1, r2
 80181a2:	b934      	cbnz	r4, 80181b2 <_calloc_r+0x16>
 80181a4:	4629      	mov	r1, r5
 80181a6:	f000 f887 	bl	80182b8 <_malloc_r>
 80181aa:	4606      	mov	r6, r0
 80181ac:	b928      	cbnz	r0, 80181ba <_calloc_r+0x1e>
 80181ae:	4630      	mov	r0, r6
 80181b0:	bd70      	pop	{r4, r5, r6, pc}
 80181b2:	220c      	movs	r2, #12
 80181b4:	6002      	str	r2, [r0, #0]
 80181b6:	2600      	movs	r6, #0
 80181b8:	e7f9      	b.n	80181ae <_calloc_r+0x12>
 80181ba:	462a      	mov	r2, r5
 80181bc:	4621      	mov	r1, r4
 80181be:	f000 fbd5 	bl	801896c <memset>
 80181c2:	e7f4      	b.n	80181ae <_calloc_r+0x12>

080181c4 <getenv>:
 80181c4:	b507      	push	{r0, r1, r2, lr}
 80181c6:	4b04      	ldr	r3, [pc, #16]	@ (80181d8 <getenv+0x14>)
 80181c8:	4601      	mov	r1, r0
 80181ca:	aa01      	add	r2, sp, #4
 80181cc:	6818      	ldr	r0, [r3, #0]
 80181ce:	f000 f805 	bl	80181dc <_findenv_r>
 80181d2:	b003      	add	sp, #12
 80181d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80181d8:	200000f4 	.word	0x200000f4

080181dc <_findenv_r>:
 80181dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181e0:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8018250 <_findenv_r+0x74>
 80181e4:	4606      	mov	r6, r0
 80181e6:	4689      	mov	r9, r1
 80181e8:	4617      	mov	r7, r2
 80181ea:	f000 fd13 	bl	8018c14 <__env_lock>
 80181ee:	f8da 4000 	ldr.w	r4, [sl]
 80181f2:	b134      	cbz	r4, 8018202 <_findenv_r+0x26>
 80181f4:	464b      	mov	r3, r9
 80181f6:	4698      	mov	r8, r3
 80181f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80181fc:	b13a      	cbz	r2, 801820e <_findenv_r+0x32>
 80181fe:	2a3d      	cmp	r2, #61	@ 0x3d
 8018200:	d1f9      	bne.n	80181f6 <_findenv_r+0x1a>
 8018202:	4630      	mov	r0, r6
 8018204:	f000 fd0c 	bl	8018c20 <__env_unlock>
 8018208:	2000      	movs	r0, #0
 801820a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801820e:	eba8 0809 	sub.w	r8, r8, r9
 8018212:	46a3      	mov	fp, r4
 8018214:	f854 0b04 	ldr.w	r0, [r4], #4
 8018218:	2800      	cmp	r0, #0
 801821a:	d0f2      	beq.n	8018202 <_findenv_r+0x26>
 801821c:	4642      	mov	r2, r8
 801821e:	4649      	mov	r1, r9
 8018220:	f000 fbb9 	bl	8018996 <strncmp>
 8018224:	2800      	cmp	r0, #0
 8018226:	d1f4      	bne.n	8018212 <_findenv_r+0x36>
 8018228:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801822c:	eb03 0508 	add.w	r5, r3, r8
 8018230:	f813 3008 	ldrb.w	r3, [r3, r8]
 8018234:	2b3d      	cmp	r3, #61	@ 0x3d
 8018236:	d1ec      	bne.n	8018212 <_findenv_r+0x36>
 8018238:	f8da 3000 	ldr.w	r3, [sl]
 801823c:	ebab 0303 	sub.w	r3, fp, r3
 8018240:	109b      	asrs	r3, r3, #2
 8018242:	4630      	mov	r0, r6
 8018244:	603b      	str	r3, [r7, #0]
 8018246:	f000 fceb 	bl	8018c20 <__env_unlock>
 801824a:	1c68      	adds	r0, r5, #1
 801824c:	e7dd      	b.n	801820a <_findenv_r+0x2e>
 801824e:	bf00      	nop
 8018250:	20000034 	.word	0x20000034

08018254 <malloc>:
 8018254:	4b02      	ldr	r3, [pc, #8]	@ (8018260 <malloc+0xc>)
 8018256:	4601      	mov	r1, r0
 8018258:	6818      	ldr	r0, [r3, #0]
 801825a:	f000 b82d 	b.w	80182b8 <_malloc_r>
 801825e:	bf00      	nop
 8018260:	200000f4 	.word	0x200000f4

08018264 <free>:
 8018264:	4b02      	ldr	r3, [pc, #8]	@ (8018270 <free+0xc>)
 8018266:	4601      	mov	r1, r0
 8018268:	6818      	ldr	r0, [r3, #0]
 801826a:	f000 bcdf 	b.w	8018c2c <_free_r>
 801826e:	bf00      	nop
 8018270:	200000f4 	.word	0x200000f4

08018274 <sbrk_aligned>:
 8018274:	b570      	push	{r4, r5, r6, lr}
 8018276:	4e0f      	ldr	r6, [pc, #60]	@ (80182b4 <sbrk_aligned+0x40>)
 8018278:	460c      	mov	r4, r1
 801827a:	6831      	ldr	r1, [r6, #0]
 801827c:	4605      	mov	r5, r0
 801827e:	b911      	cbnz	r1, 8018286 <sbrk_aligned+0x12>
 8018280:	f000 fc44 	bl	8018b0c <_sbrk_r>
 8018284:	6030      	str	r0, [r6, #0]
 8018286:	4621      	mov	r1, r4
 8018288:	4628      	mov	r0, r5
 801828a:	f000 fc3f 	bl	8018b0c <_sbrk_r>
 801828e:	1c43      	adds	r3, r0, #1
 8018290:	d103      	bne.n	801829a <sbrk_aligned+0x26>
 8018292:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8018296:	4620      	mov	r0, r4
 8018298:	bd70      	pop	{r4, r5, r6, pc}
 801829a:	1cc4      	adds	r4, r0, #3
 801829c:	f024 0403 	bic.w	r4, r4, #3
 80182a0:	42a0      	cmp	r0, r4
 80182a2:	d0f8      	beq.n	8018296 <sbrk_aligned+0x22>
 80182a4:	1a21      	subs	r1, r4, r0
 80182a6:	4628      	mov	r0, r5
 80182a8:	f000 fc30 	bl	8018b0c <_sbrk_r>
 80182ac:	3001      	adds	r0, #1
 80182ae:	d1f2      	bne.n	8018296 <sbrk_aligned+0x22>
 80182b0:	e7ef      	b.n	8018292 <sbrk_aligned+0x1e>
 80182b2:	bf00      	nop
 80182b4:	20010fcc 	.word	0x20010fcc

080182b8 <_malloc_r>:
 80182b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80182bc:	1ccd      	adds	r5, r1, #3
 80182be:	f025 0503 	bic.w	r5, r5, #3
 80182c2:	3508      	adds	r5, #8
 80182c4:	2d0c      	cmp	r5, #12
 80182c6:	bf38      	it	cc
 80182c8:	250c      	movcc	r5, #12
 80182ca:	2d00      	cmp	r5, #0
 80182cc:	4606      	mov	r6, r0
 80182ce:	db01      	blt.n	80182d4 <_malloc_r+0x1c>
 80182d0:	42a9      	cmp	r1, r5
 80182d2:	d904      	bls.n	80182de <_malloc_r+0x26>
 80182d4:	230c      	movs	r3, #12
 80182d6:	6033      	str	r3, [r6, #0]
 80182d8:	2000      	movs	r0, #0
 80182da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80182de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80183b4 <_malloc_r+0xfc>
 80182e2:	f000 f869 	bl	80183b8 <__malloc_lock>
 80182e6:	f8d8 3000 	ldr.w	r3, [r8]
 80182ea:	461c      	mov	r4, r3
 80182ec:	bb44      	cbnz	r4, 8018340 <_malloc_r+0x88>
 80182ee:	4629      	mov	r1, r5
 80182f0:	4630      	mov	r0, r6
 80182f2:	f7ff ffbf 	bl	8018274 <sbrk_aligned>
 80182f6:	1c43      	adds	r3, r0, #1
 80182f8:	4604      	mov	r4, r0
 80182fa:	d158      	bne.n	80183ae <_malloc_r+0xf6>
 80182fc:	f8d8 4000 	ldr.w	r4, [r8]
 8018300:	4627      	mov	r7, r4
 8018302:	2f00      	cmp	r7, #0
 8018304:	d143      	bne.n	801838e <_malloc_r+0xd6>
 8018306:	2c00      	cmp	r4, #0
 8018308:	d04b      	beq.n	80183a2 <_malloc_r+0xea>
 801830a:	6823      	ldr	r3, [r4, #0]
 801830c:	4639      	mov	r1, r7
 801830e:	4630      	mov	r0, r6
 8018310:	eb04 0903 	add.w	r9, r4, r3
 8018314:	f000 fbfa 	bl	8018b0c <_sbrk_r>
 8018318:	4581      	cmp	r9, r0
 801831a:	d142      	bne.n	80183a2 <_malloc_r+0xea>
 801831c:	6821      	ldr	r1, [r4, #0]
 801831e:	1a6d      	subs	r5, r5, r1
 8018320:	4629      	mov	r1, r5
 8018322:	4630      	mov	r0, r6
 8018324:	f7ff ffa6 	bl	8018274 <sbrk_aligned>
 8018328:	3001      	adds	r0, #1
 801832a:	d03a      	beq.n	80183a2 <_malloc_r+0xea>
 801832c:	6823      	ldr	r3, [r4, #0]
 801832e:	442b      	add	r3, r5
 8018330:	6023      	str	r3, [r4, #0]
 8018332:	f8d8 3000 	ldr.w	r3, [r8]
 8018336:	685a      	ldr	r2, [r3, #4]
 8018338:	bb62      	cbnz	r2, 8018394 <_malloc_r+0xdc>
 801833a:	f8c8 7000 	str.w	r7, [r8]
 801833e:	e00f      	b.n	8018360 <_malloc_r+0xa8>
 8018340:	6822      	ldr	r2, [r4, #0]
 8018342:	1b52      	subs	r2, r2, r5
 8018344:	d420      	bmi.n	8018388 <_malloc_r+0xd0>
 8018346:	2a0b      	cmp	r2, #11
 8018348:	d917      	bls.n	801837a <_malloc_r+0xc2>
 801834a:	1961      	adds	r1, r4, r5
 801834c:	42a3      	cmp	r3, r4
 801834e:	6025      	str	r5, [r4, #0]
 8018350:	bf18      	it	ne
 8018352:	6059      	strne	r1, [r3, #4]
 8018354:	6863      	ldr	r3, [r4, #4]
 8018356:	bf08      	it	eq
 8018358:	f8c8 1000 	streq.w	r1, [r8]
 801835c:	5162      	str	r2, [r4, r5]
 801835e:	604b      	str	r3, [r1, #4]
 8018360:	4630      	mov	r0, r6
 8018362:	f000 f82f 	bl	80183c4 <__malloc_unlock>
 8018366:	f104 000b 	add.w	r0, r4, #11
 801836a:	1d23      	adds	r3, r4, #4
 801836c:	f020 0007 	bic.w	r0, r0, #7
 8018370:	1ac2      	subs	r2, r0, r3
 8018372:	bf1c      	itt	ne
 8018374:	1a1b      	subne	r3, r3, r0
 8018376:	50a3      	strne	r3, [r4, r2]
 8018378:	e7af      	b.n	80182da <_malloc_r+0x22>
 801837a:	6862      	ldr	r2, [r4, #4]
 801837c:	42a3      	cmp	r3, r4
 801837e:	bf0c      	ite	eq
 8018380:	f8c8 2000 	streq.w	r2, [r8]
 8018384:	605a      	strne	r2, [r3, #4]
 8018386:	e7eb      	b.n	8018360 <_malloc_r+0xa8>
 8018388:	4623      	mov	r3, r4
 801838a:	6864      	ldr	r4, [r4, #4]
 801838c:	e7ae      	b.n	80182ec <_malloc_r+0x34>
 801838e:	463c      	mov	r4, r7
 8018390:	687f      	ldr	r7, [r7, #4]
 8018392:	e7b6      	b.n	8018302 <_malloc_r+0x4a>
 8018394:	461a      	mov	r2, r3
 8018396:	685b      	ldr	r3, [r3, #4]
 8018398:	42a3      	cmp	r3, r4
 801839a:	d1fb      	bne.n	8018394 <_malloc_r+0xdc>
 801839c:	2300      	movs	r3, #0
 801839e:	6053      	str	r3, [r2, #4]
 80183a0:	e7de      	b.n	8018360 <_malloc_r+0xa8>
 80183a2:	230c      	movs	r3, #12
 80183a4:	6033      	str	r3, [r6, #0]
 80183a6:	4630      	mov	r0, r6
 80183a8:	f000 f80c 	bl	80183c4 <__malloc_unlock>
 80183ac:	e794      	b.n	80182d8 <_malloc_r+0x20>
 80183ae:	6005      	str	r5, [r0, #0]
 80183b0:	e7d6      	b.n	8018360 <_malloc_r+0xa8>
 80183b2:	bf00      	nop
 80183b4:	20010fd0 	.word	0x20010fd0

080183b8 <__malloc_lock>:
 80183b8:	4801      	ldr	r0, [pc, #4]	@ (80183c0 <__malloc_lock+0x8>)
 80183ba:	f000 bbf4 	b.w	8018ba6 <__retarget_lock_acquire_recursive>
 80183be:	bf00      	nop
 80183c0:	20011115 	.word	0x20011115

080183c4 <__malloc_unlock>:
 80183c4:	4801      	ldr	r0, [pc, #4]	@ (80183cc <__malloc_unlock+0x8>)
 80183c6:	f000 bbef 	b.w	8018ba8 <__retarget_lock_release_recursive>
 80183ca:	bf00      	nop
 80183cc:	20011115 	.word	0x20011115

080183d0 <srand>:
 80183d0:	b538      	push	{r3, r4, r5, lr}
 80183d2:	4b10      	ldr	r3, [pc, #64]	@ (8018414 <srand+0x44>)
 80183d4:	681d      	ldr	r5, [r3, #0]
 80183d6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80183d8:	4604      	mov	r4, r0
 80183da:	b9b3      	cbnz	r3, 801840a <srand+0x3a>
 80183dc:	2018      	movs	r0, #24
 80183de:	f7ff ff39 	bl	8018254 <malloc>
 80183e2:	4602      	mov	r2, r0
 80183e4:	6328      	str	r0, [r5, #48]	@ 0x30
 80183e6:	b920      	cbnz	r0, 80183f2 <srand+0x22>
 80183e8:	4b0b      	ldr	r3, [pc, #44]	@ (8018418 <srand+0x48>)
 80183ea:	480c      	ldr	r0, [pc, #48]	@ (801841c <srand+0x4c>)
 80183ec:	2146      	movs	r1, #70	@ 0x46
 80183ee:	f000 fbf3 	bl	8018bd8 <__assert_func>
 80183f2:	490b      	ldr	r1, [pc, #44]	@ (8018420 <srand+0x50>)
 80183f4:	4b0b      	ldr	r3, [pc, #44]	@ (8018424 <srand+0x54>)
 80183f6:	e9c0 1300 	strd	r1, r3, [r0]
 80183fa:	4b0b      	ldr	r3, [pc, #44]	@ (8018428 <srand+0x58>)
 80183fc:	6083      	str	r3, [r0, #8]
 80183fe:	230b      	movs	r3, #11
 8018400:	8183      	strh	r3, [r0, #12]
 8018402:	2100      	movs	r1, #0
 8018404:	2001      	movs	r0, #1
 8018406:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801840a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801840c:	2200      	movs	r2, #0
 801840e:	611c      	str	r4, [r3, #16]
 8018410:	615a      	str	r2, [r3, #20]
 8018412:	bd38      	pop	{r3, r4, r5, pc}
 8018414:	200000f4 	.word	0x200000f4
 8018418:	0801a534 	.word	0x0801a534
 801841c:	0801a54b 	.word	0x0801a54b
 8018420:	abcd330e 	.word	0xabcd330e
 8018424:	e66d1234 	.word	0xe66d1234
 8018428:	0005deec 	.word	0x0005deec

0801842c <rand>:
 801842c:	4b16      	ldr	r3, [pc, #88]	@ (8018488 <rand+0x5c>)
 801842e:	b510      	push	{r4, lr}
 8018430:	681c      	ldr	r4, [r3, #0]
 8018432:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018434:	b9b3      	cbnz	r3, 8018464 <rand+0x38>
 8018436:	2018      	movs	r0, #24
 8018438:	f7ff ff0c 	bl	8018254 <malloc>
 801843c:	4602      	mov	r2, r0
 801843e:	6320      	str	r0, [r4, #48]	@ 0x30
 8018440:	b920      	cbnz	r0, 801844c <rand+0x20>
 8018442:	4b12      	ldr	r3, [pc, #72]	@ (801848c <rand+0x60>)
 8018444:	4812      	ldr	r0, [pc, #72]	@ (8018490 <rand+0x64>)
 8018446:	2152      	movs	r1, #82	@ 0x52
 8018448:	f000 fbc6 	bl	8018bd8 <__assert_func>
 801844c:	4911      	ldr	r1, [pc, #68]	@ (8018494 <rand+0x68>)
 801844e:	4b12      	ldr	r3, [pc, #72]	@ (8018498 <rand+0x6c>)
 8018450:	e9c0 1300 	strd	r1, r3, [r0]
 8018454:	4b11      	ldr	r3, [pc, #68]	@ (801849c <rand+0x70>)
 8018456:	6083      	str	r3, [r0, #8]
 8018458:	230b      	movs	r3, #11
 801845a:	8183      	strh	r3, [r0, #12]
 801845c:	2100      	movs	r1, #0
 801845e:	2001      	movs	r0, #1
 8018460:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018464:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8018466:	480e      	ldr	r0, [pc, #56]	@ (80184a0 <rand+0x74>)
 8018468:	690b      	ldr	r3, [r1, #16]
 801846a:	694c      	ldr	r4, [r1, #20]
 801846c:	4a0d      	ldr	r2, [pc, #52]	@ (80184a4 <rand+0x78>)
 801846e:	4358      	muls	r0, r3
 8018470:	fb02 0004 	mla	r0, r2, r4, r0
 8018474:	fba3 3202 	umull	r3, r2, r3, r2
 8018478:	3301      	adds	r3, #1
 801847a:	eb40 0002 	adc.w	r0, r0, r2
 801847e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8018482:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8018486:	bd10      	pop	{r4, pc}
 8018488:	200000f4 	.word	0x200000f4
 801848c:	0801a534 	.word	0x0801a534
 8018490:	0801a54b 	.word	0x0801a54b
 8018494:	abcd330e 	.word	0xabcd330e
 8018498:	e66d1234 	.word	0xe66d1234
 801849c:	0005deec 	.word	0x0005deec
 80184a0:	5851f42d 	.word	0x5851f42d
 80184a4:	4c957f2d 	.word	0x4c957f2d

080184a8 <realloc>:
 80184a8:	4b02      	ldr	r3, [pc, #8]	@ (80184b4 <realloc+0xc>)
 80184aa:	460a      	mov	r2, r1
 80184ac:	4601      	mov	r1, r0
 80184ae:	6818      	ldr	r0, [r3, #0]
 80184b0:	f000 b802 	b.w	80184b8 <_realloc_r>
 80184b4:	200000f4 	.word	0x200000f4

080184b8 <_realloc_r>:
 80184b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80184bc:	4607      	mov	r7, r0
 80184be:	4614      	mov	r4, r2
 80184c0:	460d      	mov	r5, r1
 80184c2:	b921      	cbnz	r1, 80184ce <_realloc_r+0x16>
 80184c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80184c8:	4611      	mov	r1, r2
 80184ca:	f7ff bef5 	b.w	80182b8 <_malloc_r>
 80184ce:	b92a      	cbnz	r2, 80184dc <_realloc_r+0x24>
 80184d0:	f000 fbac 	bl	8018c2c <_free_r>
 80184d4:	4625      	mov	r5, r4
 80184d6:	4628      	mov	r0, r5
 80184d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80184dc:	f000 fbf0 	bl	8018cc0 <_malloc_usable_size_r>
 80184e0:	4284      	cmp	r4, r0
 80184e2:	4606      	mov	r6, r0
 80184e4:	d802      	bhi.n	80184ec <_realloc_r+0x34>
 80184e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80184ea:	d8f4      	bhi.n	80184d6 <_realloc_r+0x1e>
 80184ec:	4621      	mov	r1, r4
 80184ee:	4638      	mov	r0, r7
 80184f0:	f7ff fee2 	bl	80182b8 <_malloc_r>
 80184f4:	4680      	mov	r8, r0
 80184f6:	b908      	cbnz	r0, 80184fc <_realloc_r+0x44>
 80184f8:	4645      	mov	r5, r8
 80184fa:	e7ec      	b.n	80184d6 <_realloc_r+0x1e>
 80184fc:	42b4      	cmp	r4, r6
 80184fe:	4622      	mov	r2, r4
 8018500:	4629      	mov	r1, r5
 8018502:	bf28      	it	cs
 8018504:	4632      	movcs	r2, r6
 8018506:	f000 fb58 	bl	8018bba <memcpy>
 801850a:	4629      	mov	r1, r5
 801850c:	4638      	mov	r0, r7
 801850e:	f000 fb8d 	bl	8018c2c <_free_r>
 8018512:	e7f1      	b.n	80184f8 <_realloc_r+0x40>

08018514 <_strtoul_l.isra.0>:
 8018514:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018518:	4e34      	ldr	r6, [pc, #208]	@ (80185ec <_strtoul_l.isra.0+0xd8>)
 801851a:	4686      	mov	lr, r0
 801851c:	460d      	mov	r5, r1
 801851e:	4628      	mov	r0, r5
 8018520:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018524:	5d37      	ldrb	r7, [r6, r4]
 8018526:	f017 0708 	ands.w	r7, r7, #8
 801852a:	d1f8      	bne.n	801851e <_strtoul_l.isra.0+0xa>
 801852c:	2c2d      	cmp	r4, #45	@ 0x2d
 801852e:	d110      	bne.n	8018552 <_strtoul_l.isra.0+0x3e>
 8018530:	782c      	ldrb	r4, [r5, #0]
 8018532:	2701      	movs	r7, #1
 8018534:	1c85      	adds	r5, r0, #2
 8018536:	f033 0010 	bics.w	r0, r3, #16
 801853a:	d115      	bne.n	8018568 <_strtoul_l.isra.0+0x54>
 801853c:	2c30      	cmp	r4, #48	@ 0x30
 801853e:	d10d      	bne.n	801855c <_strtoul_l.isra.0+0x48>
 8018540:	7828      	ldrb	r0, [r5, #0]
 8018542:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8018546:	2858      	cmp	r0, #88	@ 0x58
 8018548:	d108      	bne.n	801855c <_strtoul_l.isra.0+0x48>
 801854a:	786c      	ldrb	r4, [r5, #1]
 801854c:	3502      	adds	r5, #2
 801854e:	2310      	movs	r3, #16
 8018550:	e00a      	b.n	8018568 <_strtoul_l.isra.0+0x54>
 8018552:	2c2b      	cmp	r4, #43	@ 0x2b
 8018554:	bf04      	itt	eq
 8018556:	782c      	ldrbeq	r4, [r5, #0]
 8018558:	1c85      	addeq	r5, r0, #2
 801855a:	e7ec      	b.n	8018536 <_strtoul_l.isra.0+0x22>
 801855c:	2b00      	cmp	r3, #0
 801855e:	d1f6      	bne.n	801854e <_strtoul_l.isra.0+0x3a>
 8018560:	2c30      	cmp	r4, #48	@ 0x30
 8018562:	bf14      	ite	ne
 8018564:	230a      	movne	r3, #10
 8018566:	2308      	moveq	r3, #8
 8018568:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801856c:	2600      	movs	r6, #0
 801856e:	fbb8 f8f3 	udiv	r8, r8, r3
 8018572:	fb03 f908 	mul.w	r9, r3, r8
 8018576:	ea6f 0909 	mvn.w	r9, r9
 801857a:	4630      	mov	r0, r6
 801857c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8018580:	f1bc 0f09 	cmp.w	ip, #9
 8018584:	d810      	bhi.n	80185a8 <_strtoul_l.isra.0+0x94>
 8018586:	4664      	mov	r4, ip
 8018588:	42a3      	cmp	r3, r4
 801858a:	dd1e      	ble.n	80185ca <_strtoul_l.isra.0+0xb6>
 801858c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8018590:	d007      	beq.n	80185a2 <_strtoul_l.isra.0+0x8e>
 8018592:	4580      	cmp	r8, r0
 8018594:	d316      	bcc.n	80185c4 <_strtoul_l.isra.0+0xb0>
 8018596:	d101      	bne.n	801859c <_strtoul_l.isra.0+0x88>
 8018598:	45a1      	cmp	r9, r4
 801859a:	db13      	blt.n	80185c4 <_strtoul_l.isra.0+0xb0>
 801859c:	fb00 4003 	mla	r0, r0, r3, r4
 80185a0:	2601      	movs	r6, #1
 80185a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80185a6:	e7e9      	b.n	801857c <_strtoul_l.isra.0+0x68>
 80185a8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80185ac:	f1bc 0f19 	cmp.w	ip, #25
 80185b0:	d801      	bhi.n	80185b6 <_strtoul_l.isra.0+0xa2>
 80185b2:	3c37      	subs	r4, #55	@ 0x37
 80185b4:	e7e8      	b.n	8018588 <_strtoul_l.isra.0+0x74>
 80185b6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80185ba:	f1bc 0f19 	cmp.w	ip, #25
 80185be:	d804      	bhi.n	80185ca <_strtoul_l.isra.0+0xb6>
 80185c0:	3c57      	subs	r4, #87	@ 0x57
 80185c2:	e7e1      	b.n	8018588 <_strtoul_l.isra.0+0x74>
 80185c4:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80185c8:	e7eb      	b.n	80185a2 <_strtoul_l.isra.0+0x8e>
 80185ca:	1c73      	adds	r3, r6, #1
 80185cc:	d106      	bne.n	80185dc <_strtoul_l.isra.0+0xc8>
 80185ce:	2322      	movs	r3, #34	@ 0x22
 80185d0:	f8ce 3000 	str.w	r3, [lr]
 80185d4:	4630      	mov	r0, r6
 80185d6:	b932      	cbnz	r2, 80185e6 <_strtoul_l.isra.0+0xd2>
 80185d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80185dc:	b107      	cbz	r7, 80185e0 <_strtoul_l.isra.0+0xcc>
 80185de:	4240      	negs	r0, r0
 80185e0:	2a00      	cmp	r2, #0
 80185e2:	d0f9      	beq.n	80185d8 <_strtoul_l.isra.0+0xc4>
 80185e4:	b106      	cbz	r6, 80185e8 <_strtoul_l.isra.0+0xd4>
 80185e6:	1e69      	subs	r1, r5, #1
 80185e8:	6011      	str	r1, [r2, #0]
 80185ea:	e7f5      	b.n	80185d8 <_strtoul_l.isra.0+0xc4>
 80185ec:	0801a613 	.word	0x0801a613

080185f0 <strtoul>:
 80185f0:	4613      	mov	r3, r2
 80185f2:	460a      	mov	r2, r1
 80185f4:	4601      	mov	r1, r0
 80185f6:	4802      	ldr	r0, [pc, #8]	@ (8018600 <strtoul+0x10>)
 80185f8:	6800      	ldr	r0, [r0, #0]
 80185fa:	f7ff bf8b 	b.w	8018514 <_strtoul_l.isra.0>
 80185fe:	bf00      	nop
 8018600:	200000f4 	.word	0x200000f4

08018604 <std>:
 8018604:	2300      	movs	r3, #0
 8018606:	b510      	push	{r4, lr}
 8018608:	4604      	mov	r4, r0
 801860a:	e9c0 3300 	strd	r3, r3, [r0]
 801860e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018612:	6083      	str	r3, [r0, #8]
 8018614:	8181      	strh	r1, [r0, #12]
 8018616:	6643      	str	r3, [r0, #100]	@ 0x64
 8018618:	81c2      	strh	r2, [r0, #14]
 801861a:	6183      	str	r3, [r0, #24]
 801861c:	4619      	mov	r1, r3
 801861e:	2208      	movs	r2, #8
 8018620:	305c      	adds	r0, #92	@ 0x5c
 8018622:	f000 f9a3 	bl	801896c <memset>
 8018626:	4b0d      	ldr	r3, [pc, #52]	@ (801865c <std+0x58>)
 8018628:	6263      	str	r3, [r4, #36]	@ 0x24
 801862a:	4b0d      	ldr	r3, [pc, #52]	@ (8018660 <std+0x5c>)
 801862c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801862e:	4b0d      	ldr	r3, [pc, #52]	@ (8018664 <std+0x60>)
 8018630:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8018632:	4b0d      	ldr	r3, [pc, #52]	@ (8018668 <std+0x64>)
 8018634:	6323      	str	r3, [r4, #48]	@ 0x30
 8018636:	4b0d      	ldr	r3, [pc, #52]	@ (801866c <std+0x68>)
 8018638:	6224      	str	r4, [r4, #32]
 801863a:	429c      	cmp	r4, r3
 801863c:	d006      	beq.n	801864c <std+0x48>
 801863e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8018642:	4294      	cmp	r4, r2
 8018644:	d002      	beq.n	801864c <std+0x48>
 8018646:	33d0      	adds	r3, #208	@ 0xd0
 8018648:	429c      	cmp	r4, r3
 801864a:	d105      	bne.n	8018658 <std+0x54>
 801864c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8018650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018654:	f000 baa6 	b.w	8018ba4 <__retarget_lock_init_recursive>
 8018658:	bd10      	pop	{r4, pc}
 801865a:	bf00      	nop
 801865c:	08018819 	.word	0x08018819
 8018660:	0801883b 	.word	0x0801883b
 8018664:	08018873 	.word	0x08018873
 8018668:	08018897 	.word	0x08018897
 801866c:	20010fd4 	.word	0x20010fd4

08018670 <stdio_exit_handler>:
 8018670:	4a02      	ldr	r2, [pc, #8]	@ (801867c <stdio_exit_handler+0xc>)
 8018672:	4903      	ldr	r1, [pc, #12]	@ (8018680 <stdio_exit_handler+0x10>)
 8018674:	4803      	ldr	r0, [pc, #12]	@ (8018684 <stdio_exit_handler+0x14>)
 8018676:	f000 b869 	b.w	801874c <_fwalk_sglue>
 801867a:	bf00      	nop
 801867c:	200000e8 	.word	0x200000e8
 8018680:	08019625 	.word	0x08019625
 8018684:	200000f8 	.word	0x200000f8

08018688 <cleanup_stdio>:
 8018688:	6841      	ldr	r1, [r0, #4]
 801868a:	4b0c      	ldr	r3, [pc, #48]	@ (80186bc <cleanup_stdio+0x34>)
 801868c:	4299      	cmp	r1, r3
 801868e:	b510      	push	{r4, lr}
 8018690:	4604      	mov	r4, r0
 8018692:	d001      	beq.n	8018698 <cleanup_stdio+0x10>
 8018694:	f000 ffc6 	bl	8019624 <_fflush_r>
 8018698:	68a1      	ldr	r1, [r4, #8]
 801869a:	4b09      	ldr	r3, [pc, #36]	@ (80186c0 <cleanup_stdio+0x38>)
 801869c:	4299      	cmp	r1, r3
 801869e:	d002      	beq.n	80186a6 <cleanup_stdio+0x1e>
 80186a0:	4620      	mov	r0, r4
 80186a2:	f000 ffbf 	bl	8019624 <_fflush_r>
 80186a6:	68e1      	ldr	r1, [r4, #12]
 80186a8:	4b06      	ldr	r3, [pc, #24]	@ (80186c4 <cleanup_stdio+0x3c>)
 80186aa:	4299      	cmp	r1, r3
 80186ac:	d004      	beq.n	80186b8 <cleanup_stdio+0x30>
 80186ae:	4620      	mov	r0, r4
 80186b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80186b4:	f000 bfb6 	b.w	8019624 <_fflush_r>
 80186b8:	bd10      	pop	{r4, pc}
 80186ba:	bf00      	nop
 80186bc:	20010fd4 	.word	0x20010fd4
 80186c0:	2001103c 	.word	0x2001103c
 80186c4:	200110a4 	.word	0x200110a4

080186c8 <global_stdio_init.part.0>:
 80186c8:	b510      	push	{r4, lr}
 80186ca:	4b0b      	ldr	r3, [pc, #44]	@ (80186f8 <global_stdio_init.part.0+0x30>)
 80186cc:	4c0b      	ldr	r4, [pc, #44]	@ (80186fc <global_stdio_init.part.0+0x34>)
 80186ce:	4a0c      	ldr	r2, [pc, #48]	@ (8018700 <global_stdio_init.part.0+0x38>)
 80186d0:	601a      	str	r2, [r3, #0]
 80186d2:	4620      	mov	r0, r4
 80186d4:	2200      	movs	r2, #0
 80186d6:	2104      	movs	r1, #4
 80186d8:	f7ff ff94 	bl	8018604 <std>
 80186dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80186e0:	2201      	movs	r2, #1
 80186e2:	2109      	movs	r1, #9
 80186e4:	f7ff ff8e 	bl	8018604 <std>
 80186e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80186ec:	2202      	movs	r2, #2
 80186ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80186f2:	2112      	movs	r1, #18
 80186f4:	f7ff bf86 	b.w	8018604 <std>
 80186f8:	2001110c 	.word	0x2001110c
 80186fc:	20010fd4 	.word	0x20010fd4
 8018700:	08018671 	.word	0x08018671

08018704 <__sfp_lock_acquire>:
 8018704:	4801      	ldr	r0, [pc, #4]	@ (801870c <__sfp_lock_acquire+0x8>)
 8018706:	f000 ba4e 	b.w	8018ba6 <__retarget_lock_acquire_recursive>
 801870a:	bf00      	nop
 801870c:	20011116 	.word	0x20011116

08018710 <__sfp_lock_release>:
 8018710:	4801      	ldr	r0, [pc, #4]	@ (8018718 <__sfp_lock_release+0x8>)
 8018712:	f000 ba49 	b.w	8018ba8 <__retarget_lock_release_recursive>
 8018716:	bf00      	nop
 8018718:	20011116 	.word	0x20011116

0801871c <__sinit>:
 801871c:	b510      	push	{r4, lr}
 801871e:	4604      	mov	r4, r0
 8018720:	f7ff fff0 	bl	8018704 <__sfp_lock_acquire>
 8018724:	6a23      	ldr	r3, [r4, #32]
 8018726:	b11b      	cbz	r3, 8018730 <__sinit+0x14>
 8018728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801872c:	f7ff bff0 	b.w	8018710 <__sfp_lock_release>
 8018730:	4b04      	ldr	r3, [pc, #16]	@ (8018744 <__sinit+0x28>)
 8018732:	6223      	str	r3, [r4, #32]
 8018734:	4b04      	ldr	r3, [pc, #16]	@ (8018748 <__sinit+0x2c>)
 8018736:	681b      	ldr	r3, [r3, #0]
 8018738:	2b00      	cmp	r3, #0
 801873a:	d1f5      	bne.n	8018728 <__sinit+0xc>
 801873c:	f7ff ffc4 	bl	80186c8 <global_stdio_init.part.0>
 8018740:	e7f2      	b.n	8018728 <__sinit+0xc>
 8018742:	bf00      	nop
 8018744:	08018689 	.word	0x08018689
 8018748:	2001110c 	.word	0x2001110c

0801874c <_fwalk_sglue>:
 801874c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018750:	4607      	mov	r7, r0
 8018752:	4688      	mov	r8, r1
 8018754:	4614      	mov	r4, r2
 8018756:	2600      	movs	r6, #0
 8018758:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801875c:	f1b9 0901 	subs.w	r9, r9, #1
 8018760:	d505      	bpl.n	801876e <_fwalk_sglue+0x22>
 8018762:	6824      	ldr	r4, [r4, #0]
 8018764:	2c00      	cmp	r4, #0
 8018766:	d1f7      	bne.n	8018758 <_fwalk_sglue+0xc>
 8018768:	4630      	mov	r0, r6
 801876a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801876e:	89ab      	ldrh	r3, [r5, #12]
 8018770:	2b01      	cmp	r3, #1
 8018772:	d907      	bls.n	8018784 <_fwalk_sglue+0x38>
 8018774:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018778:	3301      	adds	r3, #1
 801877a:	d003      	beq.n	8018784 <_fwalk_sglue+0x38>
 801877c:	4629      	mov	r1, r5
 801877e:	4638      	mov	r0, r7
 8018780:	47c0      	blx	r8
 8018782:	4306      	orrs	r6, r0
 8018784:	3568      	adds	r5, #104	@ 0x68
 8018786:	e7e9      	b.n	801875c <_fwalk_sglue+0x10>

08018788 <iprintf>:
 8018788:	b40f      	push	{r0, r1, r2, r3}
 801878a:	b507      	push	{r0, r1, r2, lr}
 801878c:	4906      	ldr	r1, [pc, #24]	@ (80187a8 <iprintf+0x20>)
 801878e:	ab04      	add	r3, sp, #16
 8018790:	6808      	ldr	r0, [r1, #0]
 8018792:	f853 2b04 	ldr.w	r2, [r3], #4
 8018796:	6881      	ldr	r1, [r0, #8]
 8018798:	9301      	str	r3, [sp, #4]
 801879a:	f000 fc1b 	bl	8018fd4 <_vfiprintf_r>
 801879e:	b003      	add	sp, #12
 80187a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80187a4:	b004      	add	sp, #16
 80187a6:	4770      	bx	lr
 80187a8:	200000f4 	.word	0x200000f4

080187ac <sniprintf>:
 80187ac:	b40c      	push	{r2, r3}
 80187ae:	b530      	push	{r4, r5, lr}
 80187b0:	4b18      	ldr	r3, [pc, #96]	@ (8018814 <sniprintf+0x68>)
 80187b2:	1e0c      	subs	r4, r1, #0
 80187b4:	681d      	ldr	r5, [r3, #0]
 80187b6:	b09d      	sub	sp, #116	@ 0x74
 80187b8:	da08      	bge.n	80187cc <sniprintf+0x20>
 80187ba:	238b      	movs	r3, #139	@ 0x8b
 80187bc:	602b      	str	r3, [r5, #0]
 80187be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80187c2:	b01d      	add	sp, #116	@ 0x74
 80187c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80187c8:	b002      	add	sp, #8
 80187ca:	4770      	bx	lr
 80187cc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80187d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80187d4:	f04f 0300 	mov.w	r3, #0
 80187d8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80187da:	bf14      	ite	ne
 80187dc:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80187e0:	4623      	moveq	r3, r4
 80187e2:	9304      	str	r3, [sp, #16]
 80187e4:	9307      	str	r3, [sp, #28]
 80187e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80187ea:	9002      	str	r0, [sp, #8]
 80187ec:	9006      	str	r0, [sp, #24]
 80187ee:	f8ad 3016 	strh.w	r3, [sp, #22]
 80187f2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80187f4:	ab21      	add	r3, sp, #132	@ 0x84
 80187f6:	a902      	add	r1, sp, #8
 80187f8:	4628      	mov	r0, r5
 80187fa:	9301      	str	r3, [sp, #4]
 80187fc:	f000 fac4 	bl	8018d88 <_svfiprintf_r>
 8018800:	1c43      	adds	r3, r0, #1
 8018802:	bfbc      	itt	lt
 8018804:	238b      	movlt	r3, #139	@ 0x8b
 8018806:	602b      	strlt	r3, [r5, #0]
 8018808:	2c00      	cmp	r4, #0
 801880a:	d0da      	beq.n	80187c2 <sniprintf+0x16>
 801880c:	9b02      	ldr	r3, [sp, #8]
 801880e:	2200      	movs	r2, #0
 8018810:	701a      	strb	r2, [r3, #0]
 8018812:	e7d6      	b.n	80187c2 <sniprintf+0x16>
 8018814:	200000f4 	.word	0x200000f4

08018818 <__sread>:
 8018818:	b510      	push	{r4, lr}
 801881a:	460c      	mov	r4, r1
 801881c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018820:	f000 f962 	bl	8018ae8 <_read_r>
 8018824:	2800      	cmp	r0, #0
 8018826:	bfab      	itete	ge
 8018828:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801882a:	89a3      	ldrhlt	r3, [r4, #12]
 801882c:	181b      	addge	r3, r3, r0
 801882e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8018832:	bfac      	ite	ge
 8018834:	6563      	strge	r3, [r4, #84]	@ 0x54
 8018836:	81a3      	strhlt	r3, [r4, #12]
 8018838:	bd10      	pop	{r4, pc}

0801883a <__swrite>:
 801883a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801883e:	461f      	mov	r7, r3
 8018840:	898b      	ldrh	r3, [r1, #12]
 8018842:	05db      	lsls	r3, r3, #23
 8018844:	4605      	mov	r5, r0
 8018846:	460c      	mov	r4, r1
 8018848:	4616      	mov	r6, r2
 801884a:	d505      	bpl.n	8018858 <__swrite+0x1e>
 801884c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018850:	2302      	movs	r3, #2
 8018852:	2200      	movs	r2, #0
 8018854:	f000 f936 	bl	8018ac4 <_lseek_r>
 8018858:	89a3      	ldrh	r3, [r4, #12]
 801885a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801885e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8018862:	81a3      	strh	r3, [r4, #12]
 8018864:	4632      	mov	r2, r6
 8018866:	463b      	mov	r3, r7
 8018868:	4628      	mov	r0, r5
 801886a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801886e:	f000 b95d 	b.w	8018b2c <_write_r>

08018872 <__sseek>:
 8018872:	b510      	push	{r4, lr}
 8018874:	460c      	mov	r4, r1
 8018876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801887a:	f000 f923 	bl	8018ac4 <_lseek_r>
 801887e:	1c43      	adds	r3, r0, #1
 8018880:	89a3      	ldrh	r3, [r4, #12]
 8018882:	bf15      	itete	ne
 8018884:	6560      	strne	r0, [r4, #84]	@ 0x54
 8018886:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801888a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801888e:	81a3      	strheq	r3, [r4, #12]
 8018890:	bf18      	it	ne
 8018892:	81a3      	strhne	r3, [r4, #12]
 8018894:	bd10      	pop	{r4, pc}

08018896 <__sclose>:
 8018896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801889a:	f000 b8a5 	b.w	80189e8 <_close_r>

0801889e <_vsniprintf_r>:
 801889e:	b530      	push	{r4, r5, lr}
 80188a0:	4614      	mov	r4, r2
 80188a2:	2c00      	cmp	r4, #0
 80188a4:	b09b      	sub	sp, #108	@ 0x6c
 80188a6:	4605      	mov	r5, r0
 80188a8:	461a      	mov	r2, r3
 80188aa:	da05      	bge.n	80188b8 <_vsniprintf_r+0x1a>
 80188ac:	238b      	movs	r3, #139	@ 0x8b
 80188ae:	6003      	str	r3, [r0, #0]
 80188b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80188b4:	b01b      	add	sp, #108	@ 0x6c
 80188b6:	bd30      	pop	{r4, r5, pc}
 80188b8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80188bc:	f8ad 300c 	strh.w	r3, [sp, #12]
 80188c0:	f04f 0300 	mov.w	r3, #0
 80188c4:	9319      	str	r3, [sp, #100]	@ 0x64
 80188c6:	bf14      	ite	ne
 80188c8:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80188cc:	4623      	moveq	r3, r4
 80188ce:	9302      	str	r3, [sp, #8]
 80188d0:	9305      	str	r3, [sp, #20]
 80188d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80188d6:	9100      	str	r1, [sp, #0]
 80188d8:	9104      	str	r1, [sp, #16]
 80188da:	f8ad 300e 	strh.w	r3, [sp, #14]
 80188de:	4669      	mov	r1, sp
 80188e0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80188e2:	f000 fa51 	bl	8018d88 <_svfiprintf_r>
 80188e6:	1c43      	adds	r3, r0, #1
 80188e8:	bfbc      	itt	lt
 80188ea:	238b      	movlt	r3, #139	@ 0x8b
 80188ec:	602b      	strlt	r3, [r5, #0]
 80188ee:	2c00      	cmp	r4, #0
 80188f0:	d0e0      	beq.n	80188b4 <_vsniprintf_r+0x16>
 80188f2:	9b00      	ldr	r3, [sp, #0]
 80188f4:	2200      	movs	r2, #0
 80188f6:	701a      	strb	r2, [r3, #0]
 80188f8:	e7dc      	b.n	80188b4 <_vsniprintf_r+0x16>
	...

080188fc <vsniprintf>:
 80188fc:	b507      	push	{r0, r1, r2, lr}
 80188fe:	9300      	str	r3, [sp, #0]
 8018900:	4613      	mov	r3, r2
 8018902:	460a      	mov	r2, r1
 8018904:	4601      	mov	r1, r0
 8018906:	4803      	ldr	r0, [pc, #12]	@ (8018914 <vsniprintf+0x18>)
 8018908:	6800      	ldr	r0, [r0, #0]
 801890a:	f7ff ffc8 	bl	801889e <_vsniprintf_r>
 801890e:	b003      	add	sp, #12
 8018910:	f85d fb04 	ldr.w	pc, [sp], #4
 8018914:	200000f4 	.word	0x200000f4

08018918 <memcmp>:
 8018918:	b510      	push	{r4, lr}
 801891a:	3901      	subs	r1, #1
 801891c:	4402      	add	r2, r0
 801891e:	4290      	cmp	r0, r2
 8018920:	d101      	bne.n	8018926 <memcmp+0xe>
 8018922:	2000      	movs	r0, #0
 8018924:	e005      	b.n	8018932 <memcmp+0x1a>
 8018926:	7803      	ldrb	r3, [r0, #0]
 8018928:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801892c:	42a3      	cmp	r3, r4
 801892e:	d001      	beq.n	8018934 <memcmp+0x1c>
 8018930:	1b18      	subs	r0, r3, r4
 8018932:	bd10      	pop	{r4, pc}
 8018934:	3001      	adds	r0, #1
 8018936:	e7f2      	b.n	801891e <memcmp+0x6>

08018938 <memmove>:
 8018938:	4288      	cmp	r0, r1
 801893a:	b510      	push	{r4, lr}
 801893c:	eb01 0402 	add.w	r4, r1, r2
 8018940:	d902      	bls.n	8018948 <memmove+0x10>
 8018942:	4284      	cmp	r4, r0
 8018944:	4623      	mov	r3, r4
 8018946:	d807      	bhi.n	8018958 <memmove+0x20>
 8018948:	1e43      	subs	r3, r0, #1
 801894a:	42a1      	cmp	r1, r4
 801894c:	d008      	beq.n	8018960 <memmove+0x28>
 801894e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018952:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018956:	e7f8      	b.n	801894a <memmove+0x12>
 8018958:	4402      	add	r2, r0
 801895a:	4601      	mov	r1, r0
 801895c:	428a      	cmp	r2, r1
 801895e:	d100      	bne.n	8018962 <memmove+0x2a>
 8018960:	bd10      	pop	{r4, pc}
 8018962:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018966:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801896a:	e7f7      	b.n	801895c <memmove+0x24>

0801896c <memset>:
 801896c:	4402      	add	r2, r0
 801896e:	4603      	mov	r3, r0
 8018970:	4293      	cmp	r3, r2
 8018972:	d100      	bne.n	8018976 <memset+0xa>
 8018974:	4770      	bx	lr
 8018976:	f803 1b01 	strb.w	r1, [r3], #1
 801897a:	e7f9      	b.n	8018970 <memset+0x4>

0801897c <strchr>:
 801897c:	b2c9      	uxtb	r1, r1
 801897e:	4603      	mov	r3, r0
 8018980:	4618      	mov	r0, r3
 8018982:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018986:	b112      	cbz	r2, 801898e <strchr+0x12>
 8018988:	428a      	cmp	r2, r1
 801898a:	d1f9      	bne.n	8018980 <strchr+0x4>
 801898c:	4770      	bx	lr
 801898e:	2900      	cmp	r1, #0
 8018990:	bf18      	it	ne
 8018992:	2000      	movne	r0, #0
 8018994:	4770      	bx	lr

08018996 <strncmp>:
 8018996:	b510      	push	{r4, lr}
 8018998:	b16a      	cbz	r2, 80189b6 <strncmp+0x20>
 801899a:	3901      	subs	r1, #1
 801899c:	1884      	adds	r4, r0, r2
 801899e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80189a2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80189a6:	429a      	cmp	r2, r3
 80189a8:	d103      	bne.n	80189b2 <strncmp+0x1c>
 80189aa:	42a0      	cmp	r0, r4
 80189ac:	d001      	beq.n	80189b2 <strncmp+0x1c>
 80189ae:	2a00      	cmp	r2, #0
 80189b0:	d1f5      	bne.n	801899e <strncmp+0x8>
 80189b2:	1ad0      	subs	r0, r2, r3
 80189b4:	bd10      	pop	{r4, pc}
 80189b6:	4610      	mov	r0, r2
 80189b8:	e7fc      	b.n	80189b4 <strncmp+0x1e>

080189ba <strstr>:
 80189ba:	780a      	ldrb	r2, [r1, #0]
 80189bc:	b570      	push	{r4, r5, r6, lr}
 80189be:	b96a      	cbnz	r2, 80189dc <strstr+0x22>
 80189c0:	bd70      	pop	{r4, r5, r6, pc}
 80189c2:	429a      	cmp	r2, r3
 80189c4:	d109      	bne.n	80189da <strstr+0x20>
 80189c6:	460c      	mov	r4, r1
 80189c8:	4605      	mov	r5, r0
 80189ca:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80189ce:	2b00      	cmp	r3, #0
 80189d0:	d0f6      	beq.n	80189c0 <strstr+0x6>
 80189d2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80189d6:	429e      	cmp	r6, r3
 80189d8:	d0f7      	beq.n	80189ca <strstr+0x10>
 80189da:	3001      	adds	r0, #1
 80189dc:	7803      	ldrb	r3, [r0, #0]
 80189de:	2b00      	cmp	r3, #0
 80189e0:	d1ef      	bne.n	80189c2 <strstr+0x8>
 80189e2:	4618      	mov	r0, r3
 80189e4:	e7ec      	b.n	80189c0 <strstr+0x6>
	...

080189e8 <_close_r>:
 80189e8:	b538      	push	{r3, r4, r5, lr}
 80189ea:	4d06      	ldr	r5, [pc, #24]	@ (8018a04 <_close_r+0x1c>)
 80189ec:	2300      	movs	r3, #0
 80189ee:	4604      	mov	r4, r0
 80189f0:	4608      	mov	r0, r1
 80189f2:	602b      	str	r3, [r5, #0]
 80189f4:	f7eb f8ec 	bl	8003bd0 <_close>
 80189f8:	1c43      	adds	r3, r0, #1
 80189fa:	d102      	bne.n	8018a02 <_close_r+0x1a>
 80189fc:	682b      	ldr	r3, [r5, #0]
 80189fe:	b103      	cbz	r3, 8018a02 <_close_r+0x1a>
 8018a00:	6023      	str	r3, [r4, #0]
 8018a02:	bd38      	pop	{r3, r4, r5, pc}
 8018a04:	20011110 	.word	0x20011110

08018a08 <_reclaim_reent>:
 8018a08:	4b2d      	ldr	r3, [pc, #180]	@ (8018ac0 <_reclaim_reent+0xb8>)
 8018a0a:	681b      	ldr	r3, [r3, #0]
 8018a0c:	4283      	cmp	r3, r0
 8018a0e:	b570      	push	{r4, r5, r6, lr}
 8018a10:	4604      	mov	r4, r0
 8018a12:	d053      	beq.n	8018abc <_reclaim_reent+0xb4>
 8018a14:	69c3      	ldr	r3, [r0, #28]
 8018a16:	b31b      	cbz	r3, 8018a60 <_reclaim_reent+0x58>
 8018a18:	68db      	ldr	r3, [r3, #12]
 8018a1a:	b163      	cbz	r3, 8018a36 <_reclaim_reent+0x2e>
 8018a1c:	2500      	movs	r5, #0
 8018a1e:	69e3      	ldr	r3, [r4, #28]
 8018a20:	68db      	ldr	r3, [r3, #12]
 8018a22:	5959      	ldr	r1, [r3, r5]
 8018a24:	b9b1      	cbnz	r1, 8018a54 <_reclaim_reent+0x4c>
 8018a26:	3504      	adds	r5, #4
 8018a28:	2d80      	cmp	r5, #128	@ 0x80
 8018a2a:	d1f8      	bne.n	8018a1e <_reclaim_reent+0x16>
 8018a2c:	69e3      	ldr	r3, [r4, #28]
 8018a2e:	4620      	mov	r0, r4
 8018a30:	68d9      	ldr	r1, [r3, #12]
 8018a32:	f000 f8fb 	bl	8018c2c <_free_r>
 8018a36:	69e3      	ldr	r3, [r4, #28]
 8018a38:	6819      	ldr	r1, [r3, #0]
 8018a3a:	b111      	cbz	r1, 8018a42 <_reclaim_reent+0x3a>
 8018a3c:	4620      	mov	r0, r4
 8018a3e:	f000 f8f5 	bl	8018c2c <_free_r>
 8018a42:	69e3      	ldr	r3, [r4, #28]
 8018a44:	689d      	ldr	r5, [r3, #8]
 8018a46:	b15d      	cbz	r5, 8018a60 <_reclaim_reent+0x58>
 8018a48:	4629      	mov	r1, r5
 8018a4a:	4620      	mov	r0, r4
 8018a4c:	682d      	ldr	r5, [r5, #0]
 8018a4e:	f000 f8ed 	bl	8018c2c <_free_r>
 8018a52:	e7f8      	b.n	8018a46 <_reclaim_reent+0x3e>
 8018a54:	680e      	ldr	r6, [r1, #0]
 8018a56:	4620      	mov	r0, r4
 8018a58:	f000 f8e8 	bl	8018c2c <_free_r>
 8018a5c:	4631      	mov	r1, r6
 8018a5e:	e7e1      	b.n	8018a24 <_reclaim_reent+0x1c>
 8018a60:	6961      	ldr	r1, [r4, #20]
 8018a62:	b111      	cbz	r1, 8018a6a <_reclaim_reent+0x62>
 8018a64:	4620      	mov	r0, r4
 8018a66:	f000 f8e1 	bl	8018c2c <_free_r>
 8018a6a:	69e1      	ldr	r1, [r4, #28]
 8018a6c:	b111      	cbz	r1, 8018a74 <_reclaim_reent+0x6c>
 8018a6e:	4620      	mov	r0, r4
 8018a70:	f000 f8dc 	bl	8018c2c <_free_r>
 8018a74:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8018a76:	b111      	cbz	r1, 8018a7e <_reclaim_reent+0x76>
 8018a78:	4620      	mov	r0, r4
 8018a7a:	f000 f8d7 	bl	8018c2c <_free_r>
 8018a7e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018a80:	b111      	cbz	r1, 8018a88 <_reclaim_reent+0x80>
 8018a82:	4620      	mov	r0, r4
 8018a84:	f000 f8d2 	bl	8018c2c <_free_r>
 8018a88:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8018a8a:	b111      	cbz	r1, 8018a92 <_reclaim_reent+0x8a>
 8018a8c:	4620      	mov	r0, r4
 8018a8e:	f000 f8cd 	bl	8018c2c <_free_r>
 8018a92:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8018a94:	b111      	cbz	r1, 8018a9c <_reclaim_reent+0x94>
 8018a96:	4620      	mov	r0, r4
 8018a98:	f000 f8c8 	bl	8018c2c <_free_r>
 8018a9c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8018a9e:	b111      	cbz	r1, 8018aa6 <_reclaim_reent+0x9e>
 8018aa0:	4620      	mov	r0, r4
 8018aa2:	f000 f8c3 	bl	8018c2c <_free_r>
 8018aa6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8018aa8:	b111      	cbz	r1, 8018ab0 <_reclaim_reent+0xa8>
 8018aaa:	4620      	mov	r0, r4
 8018aac:	f000 f8be 	bl	8018c2c <_free_r>
 8018ab0:	6a23      	ldr	r3, [r4, #32]
 8018ab2:	b11b      	cbz	r3, 8018abc <_reclaim_reent+0xb4>
 8018ab4:	4620      	mov	r0, r4
 8018ab6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018aba:	4718      	bx	r3
 8018abc:	bd70      	pop	{r4, r5, r6, pc}
 8018abe:	bf00      	nop
 8018ac0:	200000f4 	.word	0x200000f4

08018ac4 <_lseek_r>:
 8018ac4:	b538      	push	{r3, r4, r5, lr}
 8018ac6:	4d07      	ldr	r5, [pc, #28]	@ (8018ae4 <_lseek_r+0x20>)
 8018ac8:	4604      	mov	r4, r0
 8018aca:	4608      	mov	r0, r1
 8018acc:	4611      	mov	r1, r2
 8018ace:	2200      	movs	r2, #0
 8018ad0:	602a      	str	r2, [r5, #0]
 8018ad2:	461a      	mov	r2, r3
 8018ad4:	f7eb f8a3 	bl	8003c1e <_lseek>
 8018ad8:	1c43      	adds	r3, r0, #1
 8018ada:	d102      	bne.n	8018ae2 <_lseek_r+0x1e>
 8018adc:	682b      	ldr	r3, [r5, #0]
 8018ade:	b103      	cbz	r3, 8018ae2 <_lseek_r+0x1e>
 8018ae0:	6023      	str	r3, [r4, #0]
 8018ae2:	bd38      	pop	{r3, r4, r5, pc}
 8018ae4:	20011110 	.word	0x20011110

08018ae8 <_read_r>:
 8018ae8:	b538      	push	{r3, r4, r5, lr}
 8018aea:	4d07      	ldr	r5, [pc, #28]	@ (8018b08 <_read_r+0x20>)
 8018aec:	4604      	mov	r4, r0
 8018aee:	4608      	mov	r0, r1
 8018af0:	4611      	mov	r1, r2
 8018af2:	2200      	movs	r2, #0
 8018af4:	602a      	str	r2, [r5, #0]
 8018af6:	461a      	mov	r2, r3
 8018af8:	f7eb f831 	bl	8003b5e <_read>
 8018afc:	1c43      	adds	r3, r0, #1
 8018afe:	d102      	bne.n	8018b06 <_read_r+0x1e>
 8018b00:	682b      	ldr	r3, [r5, #0]
 8018b02:	b103      	cbz	r3, 8018b06 <_read_r+0x1e>
 8018b04:	6023      	str	r3, [r4, #0]
 8018b06:	bd38      	pop	{r3, r4, r5, pc}
 8018b08:	20011110 	.word	0x20011110

08018b0c <_sbrk_r>:
 8018b0c:	b538      	push	{r3, r4, r5, lr}
 8018b0e:	4d06      	ldr	r5, [pc, #24]	@ (8018b28 <_sbrk_r+0x1c>)
 8018b10:	2300      	movs	r3, #0
 8018b12:	4604      	mov	r4, r0
 8018b14:	4608      	mov	r0, r1
 8018b16:	602b      	str	r3, [r5, #0]
 8018b18:	f7eb f88e 	bl	8003c38 <_sbrk>
 8018b1c:	1c43      	adds	r3, r0, #1
 8018b1e:	d102      	bne.n	8018b26 <_sbrk_r+0x1a>
 8018b20:	682b      	ldr	r3, [r5, #0]
 8018b22:	b103      	cbz	r3, 8018b26 <_sbrk_r+0x1a>
 8018b24:	6023      	str	r3, [r4, #0]
 8018b26:	bd38      	pop	{r3, r4, r5, pc}
 8018b28:	20011110 	.word	0x20011110

08018b2c <_write_r>:
 8018b2c:	b538      	push	{r3, r4, r5, lr}
 8018b2e:	4d07      	ldr	r5, [pc, #28]	@ (8018b4c <_write_r+0x20>)
 8018b30:	4604      	mov	r4, r0
 8018b32:	4608      	mov	r0, r1
 8018b34:	4611      	mov	r1, r2
 8018b36:	2200      	movs	r2, #0
 8018b38:	602a      	str	r2, [r5, #0]
 8018b3a:	461a      	mov	r2, r3
 8018b3c:	f7eb f82c 	bl	8003b98 <_write>
 8018b40:	1c43      	adds	r3, r0, #1
 8018b42:	d102      	bne.n	8018b4a <_write_r+0x1e>
 8018b44:	682b      	ldr	r3, [r5, #0]
 8018b46:	b103      	cbz	r3, 8018b4a <_write_r+0x1e>
 8018b48:	6023      	str	r3, [r4, #0]
 8018b4a:	bd38      	pop	{r3, r4, r5, pc}
 8018b4c:	20011110 	.word	0x20011110

08018b50 <__errno>:
 8018b50:	4b01      	ldr	r3, [pc, #4]	@ (8018b58 <__errno+0x8>)
 8018b52:	6818      	ldr	r0, [r3, #0]
 8018b54:	4770      	bx	lr
 8018b56:	bf00      	nop
 8018b58:	200000f4 	.word	0x200000f4

08018b5c <__libc_init_array>:
 8018b5c:	b570      	push	{r4, r5, r6, lr}
 8018b5e:	4d0d      	ldr	r5, [pc, #52]	@ (8018b94 <__libc_init_array+0x38>)
 8018b60:	4c0d      	ldr	r4, [pc, #52]	@ (8018b98 <__libc_init_array+0x3c>)
 8018b62:	1b64      	subs	r4, r4, r5
 8018b64:	10a4      	asrs	r4, r4, #2
 8018b66:	2600      	movs	r6, #0
 8018b68:	42a6      	cmp	r6, r4
 8018b6a:	d109      	bne.n	8018b80 <__libc_init_array+0x24>
 8018b6c:	4d0b      	ldr	r5, [pc, #44]	@ (8018b9c <__libc_init_array+0x40>)
 8018b6e:	4c0c      	ldr	r4, [pc, #48]	@ (8018ba0 <__libc_init_array+0x44>)
 8018b70:	f000 fef6 	bl	8019960 <_init>
 8018b74:	1b64      	subs	r4, r4, r5
 8018b76:	10a4      	asrs	r4, r4, #2
 8018b78:	2600      	movs	r6, #0
 8018b7a:	42a6      	cmp	r6, r4
 8018b7c:	d105      	bne.n	8018b8a <__libc_init_array+0x2e>
 8018b7e:	bd70      	pop	{r4, r5, r6, pc}
 8018b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8018b84:	4798      	blx	r3
 8018b86:	3601      	adds	r6, #1
 8018b88:	e7ee      	b.n	8018b68 <__libc_init_array+0xc>
 8018b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8018b8e:	4798      	blx	r3
 8018b90:	3601      	adds	r6, #1
 8018b92:	e7f2      	b.n	8018b7a <__libc_init_array+0x1e>
 8018b94:	0801a71c 	.word	0x0801a71c
 8018b98:	0801a71c 	.word	0x0801a71c
 8018b9c:	0801a71c 	.word	0x0801a71c
 8018ba0:	0801a728 	.word	0x0801a728

08018ba4 <__retarget_lock_init_recursive>:
 8018ba4:	4770      	bx	lr

08018ba6 <__retarget_lock_acquire_recursive>:
 8018ba6:	4770      	bx	lr

08018ba8 <__retarget_lock_release_recursive>:
 8018ba8:	4770      	bx	lr

08018baa <strcpy>:
 8018baa:	4603      	mov	r3, r0
 8018bac:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018bb0:	f803 2b01 	strb.w	r2, [r3], #1
 8018bb4:	2a00      	cmp	r2, #0
 8018bb6:	d1f9      	bne.n	8018bac <strcpy+0x2>
 8018bb8:	4770      	bx	lr

08018bba <memcpy>:
 8018bba:	440a      	add	r2, r1
 8018bbc:	4291      	cmp	r1, r2
 8018bbe:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8018bc2:	d100      	bne.n	8018bc6 <memcpy+0xc>
 8018bc4:	4770      	bx	lr
 8018bc6:	b510      	push	{r4, lr}
 8018bc8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018bcc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018bd0:	4291      	cmp	r1, r2
 8018bd2:	d1f9      	bne.n	8018bc8 <memcpy+0xe>
 8018bd4:	bd10      	pop	{r4, pc}
	...

08018bd8 <__assert_func>:
 8018bd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018bda:	4614      	mov	r4, r2
 8018bdc:	461a      	mov	r2, r3
 8018bde:	4b09      	ldr	r3, [pc, #36]	@ (8018c04 <__assert_func+0x2c>)
 8018be0:	681b      	ldr	r3, [r3, #0]
 8018be2:	4605      	mov	r5, r0
 8018be4:	68d8      	ldr	r0, [r3, #12]
 8018be6:	b14c      	cbz	r4, 8018bfc <__assert_func+0x24>
 8018be8:	4b07      	ldr	r3, [pc, #28]	@ (8018c08 <__assert_func+0x30>)
 8018bea:	9100      	str	r1, [sp, #0]
 8018bec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018bf0:	4906      	ldr	r1, [pc, #24]	@ (8018c0c <__assert_func+0x34>)
 8018bf2:	462b      	mov	r3, r5
 8018bf4:	f000 fd3e 	bl	8019674 <fiprintf>
 8018bf8:	f000 fde2 	bl	80197c0 <abort>
 8018bfc:	4b04      	ldr	r3, [pc, #16]	@ (8018c10 <__assert_func+0x38>)
 8018bfe:	461c      	mov	r4, r3
 8018c00:	e7f3      	b.n	8018bea <__assert_func+0x12>
 8018c02:	bf00      	nop
 8018c04:	200000f4 	.word	0x200000f4
 8018c08:	0801a5a3 	.word	0x0801a5a3
 8018c0c:	0801a5b0 	.word	0x0801a5b0
 8018c10:	0801a5de 	.word	0x0801a5de

08018c14 <__env_lock>:
 8018c14:	4801      	ldr	r0, [pc, #4]	@ (8018c1c <__env_lock+0x8>)
 8018c16:	f7ff bfc6 	b.w	8018ba6 <__retarget_lock_acquire_recursive>
 8018c1a:	bf00      	nop
 8018c1c:	20011114 	.word	0x20011114

08018c20 <__env_unlock>:
 8018c20:	4801      	ldr	r0, [pc, #4]	@ (8018c28 <__env_unlock+0x8>)
 8018c22:	f7ff bfc1 	b.w	8018ba8 <__retarget_lock_release_recursive>
 8018c26:	bf00      	nop
 8018c28:	20011114 	.word	0x20011114

08018c2c <_free_r>:
 8018c2c:	b538      	push	{r3, r4, r5, lr}
 8018c2e:	4605      	mov	r5, r0
 8018c30:	2900      	cmp	r1, #0
 8018c32:	d041      	beq.n	8018cb8 <_free_r+0x8c>
 8018c34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018c38:	1f0c      	subs	r4, r1, #4
 8018c3a:	2b00      	cmp	r3, #0
 8018c3c:	bfb8      	it	lt
 8018c3e:	18e4      	addlt	r4, r4, r3
 8018c40:	f7ff fbba 	bl	80183b8 <__malloc_lock>
 8018c44:	4a1d      	ldr	r2, [pc, #116]	@ (8018cbc <_free_r+0x90>)
 8018c46:	6813      	ldr	r3, [r2, #0]
 8018c48:	b933      	cbnz	r3, 8018c58 <_free_r+0x2c>
 8018c4a:	6063      	str	r3, [r4, #4]
 8018c4c:	6014      	str	r4, [r2, #0]
 8018c4e:	4628      	mov	r0, r5
 8018c50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018c54:	f7ff bbb6 	b.w	80183c4 <__malloc_unlock>
 8018c58:	42a3      	cmp	r3, r4
 8018c5a:	d908      	bls.n	8018c6e <_free_r+0x42>
 8018c5c:	6820      	ldr	r0, [r4, #0]
 8018c5e:	1821      	adds	r1, r4, r0
 8018c60:	428b      	cmp	r3, r1
 8018c62:	bf01      	itttt	eq
 8018c64:	6819      	ldreq	r1, [r3, #0]
 8018c66:	685b      	ldreq	r3, [r3, #4]
 8018c68:	1809      	addeq	r1, r1, r0
 8018c6a:	6021      	streq	r1, [r4, #0]
 8018c6c:	e7ed      	b.n	8018c4a <_free_r+0x1e>
 8018c6e:	461a      	mov	r2, r3
 8018c70:	685b      	ldr	r3, [r3, #4]
 8018c72:	b10b      	cbz	r3, 8018c78 <_free_r+0x4c>
 8018c74:	42a3      	cmp	r3, r4
 8018c76:	d9fa      	bls.n	8018c6e <_free_r+0x42>
 8018c78:	6811      	ldr	r1, [r2, #0]
 8018c7a:	1850      	adds	r0, r2, r1
 8018c7c:	42a0      	cmp	r0, r4
 8018c7e:	d10b      	bne.n	8018c98 <_free_r+0x6c>
 8018c80:	6820      	ldr	r0, [r4, #0]
 8018c82:	4401      	add	r1, r0
 8018c84:	1850      	adds	r0, r2, r1
 8018c86:	4283      	cmp	r3, r0
 8018c88:	6011      	str	r1, [r2, #0]
 8018c8a:	d1e0      	bne.n	8018c4e <_free_r+0x22>
 8018c8c:	6818      	ldr	r0, [r3, #0]
 8018c8e:	685b      	ldr	r3, [r3, #4]
 8018c90:	6053      	str	r3, [r2, #4]
 8018c92:	4408      	add	r0, r1
 8018c94:	6010      	str	r0, [r2, #0]
 8018c96:	e7da      	b.n	8018c4e <_free_r+0x22>
 8018c98:	d902      	bls.n	8018ca0 <_free_r+0x74>
 8018c9a:	230c      	movs	r3, #12
 8018c9c:	602b      	str	r3, [r5, #0]
 8018c9e:	e7d6      	b.n	8018c4e <_free_r+0x22>
 8018ca0:	6820      	ldr	r0, [r4, #0]
 8018ca2:	1821      	adds	r1, r4, r0
 8018ca4:	428b      	cmp	r3, r1
 8018ca6:	bf04      	itt	eq
 8018ca8:	6819      	ldreq	r1, [r3, #0]
 8018caa:	685b      	ldreq	r3, [r3, #4]
 8018cac:	6063      	str	r3, [r4, #4]
 8018cae:	bf04      	itt	eq
 8018cb0:	1809      	addeq	r1, r1, r0
 8018cb2:	6021      	streq	r1, [r4, #0]
 8018cb4:	6054      	str	r4, [r2, #4]
 8018cb6:	e7ca      	b.n	8018c4e <_free_r+0x22>
 8018cb8:	bd38      	pop	{r3, r4, r5, pc}
 8018cba:	bf00      	nop
 8018cbc:	20010fd0 	.word	0x20010fd0

08018cc0 <_malloc_usable_size_r>:
 8018cc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018cc4:	1f18      	subs	r0, r3, #4
 8018cc6:	2b00      	cmp	r3, #0
 8018cc8:	bfbc      	itt	lt
 8018cca:	580b      	ldrlt	r3, [r1, r0]
 8018ccc:	18c0      	addlt	r0, r0, r3
 8018cce:	4770      	bx	lr

08018cd0 <__ssputs_r>:
 8018cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018cd4:	688e      	ldr	r6, [r1, #8]
 8018cd6:	461f      	mov	r7, r3
 8018cd8:	42be      	cmp	r6, r7
 8018cda:	680b      	ldr	r3, [r1, #0]
 8018cdc:	4682      	mov	sl, r0
 8018cde:	460c      	mov	r4, r1
 8018ce0:	4690      	mov	r8, r2
 8018ce2:	d82d      	bhi.n	8018d40 <__ssputs_r+0x70>
 8018ce4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018ce8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8018cec:	d026      	beq.n	8018d3c <__ssputs_r+0x6c>
 8018cee:	6965      	ldr	r5, [r4, #20]
 8018cf0:	6909      	ldr	r1, [r1, #16]
 8018cf2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018cf6:	eba3 0901 	sub.w	r9, r3, r1
 8018cfa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018cfe:	1c7b      	adds	r3, r7, #1
 8018d00:	444b      	add	r3, r9
 8018d02:	106d      	asrs	r5, r5, #1
 8018d04:	429d      	cmp	r5, r3
 8018d06:	bf38      	it	cc
 8018d08:	461d      	movcc	r5, r3
 8018d0a:	0553      	lsls	r3, r2, #21
 8018d0c:	d527      	bpl.n	8018d5e <__ssputs_r+0x8e>
 8018d0e:	4629      	mov	r1, r5
 8018d10:	f7ff fad2 	bl	80182b8 <_malloc_r>
 8018d14:	4606      	mov	r6, r0
 8018d16:	b360      	cbz	r0, 8018d72 <__ssputs_r+0xa2>
 8018d18:	6921      	ldr	r1, [r4, #16]
 8018d1a:	464a      	mov	r2, r9
 8018d1c:	f7ff ff4d 	bl	8018bba <memcpy>
 8018d20:	89a3      	ldrh	r3, [r4, #12]
 8018d22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8018d26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018d2a:	81a3      	strh	r3, [r4, #12]
 8018d2c:	6126      	str	r6, [r4, #16]
 8018d2e:	6165      	str	r5, [r4, #20]
 8018d30:	444e      	add	r6, r9
 8018d32:	eba5 0509 	sub.w	r5, r5, r9
 8018d36:	6026      	str	r6, [r4, #0]
 8018d38:	60a5      	str	r5, [r4, #8]
 8018d3a:	463e      	mov	r6, r7
 8018d3c:	42be      	cmp	r6, r7
 8018d3e:	d900      	bls.n	8018d42 <__ssputs_r+0x72>
 8018d40:	463e      	mov	r6, r7
 8018d42:	6820      	ldr	r0, [r4, #0]
 8018d44:	4632      	mov	r2, r6
 8018d46:	4641      	mov	r1, r8
 8018d48:	f7ff fdf6 	bl	8018938 <memmove>
 8018d4c:	68a3      	ldr	r3, [r4, #8]
 8018d4e:	1b9b      	subs	r3, r3, r6
 8018d50:	60a3      	str	r3, [r4, #8]
 8018d52:	6823      	ldr	r3, [r4, #0]
 8018d54:	4433      	add	r3, r6
 8018d56:	6023      	str	r3, [r4, #0]
 8018d58:	2000      	movs	r0, #0
 8018d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d5e:	462a      	mov	r2, r5
 8018d60:	f7ff fbaa 	bl	80184b8 <_realloc_r>
 8018d64:	4606      	mov	r6, r0
 8018d66:	2800      	cmp	r0, #0
 8018d68:	d1e0      	bne.n	8018d2c <__ssputs_r+0x5c>
 8018d6a:	6921      	ldr	r1, [r4, #16]
 8018d6c:	4650      	mov	r0, sl
 8018d6e:	f7ff ff5d 	bl	8018c2c <_free_r>
 8018d72:	230c      	movs	r3, #12
 8018d74:	f8ca 3000 	str.w	r3, [sl]
 8018d78:	89a3      	ldrh	r3, [r4, #12]
 8018d7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018d7e:	81a3      	strh	r3, [r4, #12]
 8018d80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018d84:	e7e9      	b.n	8018d5a <__ssputs_r+0x8a>
	...

08018d88 <_svfiprintf_r>:
 8018d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d8c:	4698      	mov	r8, r3
 8018d8e:	898b      	ldrh	r3, [r1, #12]
 8018d90:	061b      	lsls	r3, r3, #24
 8018d92:	b09d      	sub	sp, #116	@ 0x74
 8018d94:	4607      	mov	r7, r0
 8018d96:	460d      	mov	r5, r1
 8018d98:	4614      	mov	r4, r2
 8018d9a:	d510      	bpl.n	8018dbe <_svfiprintf_r+0x36>
 8018d9c:	690b      	ldr	r3, [r1, #16]
 8018d9e:	b973      	cbnz	r3, 8018dbe <_svfiprintf_r+0x36>
 8018da0:	2140      	movs	r1, #64	@ 0x40
 8018da2:	f7ff fa89 	bl	80182b8 <_malloc_r>
 8018da6:	6028      	str	r0, [r5, #0]
 8018da8:	6128      	str	r0, [r5, #16]
 8018daa:	b930      	cbnz	r0, 8018dba <_svfiprintf_r+0x32>
 8018dac:	230c      	movs	r3, #12
 8018dae:	603b      	str	r3, [r7, #0]
 8018db0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018db4:	b01d      	add	sp, #116	@ 0x74
 8018db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018dba:	2340      	movs	r3, #64	@ 0x40
 8018dbc:	616b      	str	r3, [r5, #20]
 8018dbe:	2300      	movs	r3, #0
 8018dc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8018dc2:	2320      	movs	r3, #32
 8018dc4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018dc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8018dcc:	2330      	movs	r3, #48	@ 0x30
 8018dce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8018f6c <_svfiprintf_r+0x1e4>
 8018dd2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018dd6:	f04f 0901 	mov.w	r9, #1
 8018dda:	4623      	mov	r3, r4
 8018ddc:	469a      	mov	sl, r3
 8018dde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018de2:	b10a      	cbz	r2, 8018de8 <_svfiprintf_r+0x60>
 8018de4:	2a25      	cmp	r2, #37	@ 0x25
 8018de6:	d1f9      	bne.n	8018ddc <_svfiprintf_r+0x54>
 8018de8:	ebba 0b04 	subs.w	fp, sl, r4
 8018dec:	d00b      	beq.n	8018e06 <_svfiprintf_r+0x7e>
 8018dee:	465b      	mov	r3, fp
 8018df0:	4622      	mov	r2, r4
 8018df2:	4629      	mov	r1, r5
 8018df4:	4638      	mov	r0, r7
 8018df6:	f7ff ff6b 	bl	8018cd0 <__ssputs_r>
 8018dfa:	3001      	adds	r0, #1
 8018dfc:	f000 80a7 	beq.w	8018f4e <_svfiprintf_r+0x1c6>
 8018e00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018e02:	445a      	add	r2, fp
 8018e04:	9209      	str	r2, [sp, #36]	@ 0x24
 8018e06:	f89a 3000 	ldrb.w	r3, [sl]
 8018e0a:	2b00      	cmp	r3, #0
 8018e0c:	f000 809f 	beq.w	8018f4e <_svfiprintf_r+0x1c6>
 8018e10:	2300      	movs	r3, #0
 8018e12:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018e16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018e1a:	f10a 0a01 	add.w	sl, sl, #1
 8018e1e:	9304      	str	r3, [sp, #16]
 8018e20:	9307      	str	r3, [sp, #28]
 8018e22:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018e26:	931a      	str	r3, [sp, #104]	@ 0x68
 8018e28:	4654      	mov	r4, sl
 8018e2a:	2205      	movs	r2, #5
 8018e2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018e30:	484e      	ldr	r0, [pc, #312]	@ (8018f6c <_svfiprintf_r+0x1e4>)
 8018e32:	f7e7 fa05 	bl	8000240 <memchr>
 8018e36:	9a04      	ldr	r2, [sp, #16]
 8018e38:	b9d8      	cbnz	r0, 8018e72 <_svfiprintf_r+0xea>
 8018e3a:	06d0      	lsls	r0, r2, #27
 8018e3c:	bf44      	itt	mi
 8018e3e:	2320      	movmi	r3, #32
 8018e40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018e44:	0711      	lsls	r1, r2, #28
 8018e46:	bf44      	itt	mi
 8018e48:	232b      	movmi	r3, #43	@ 0x2b
 8018e4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018e4e:	f89a 3000 	ldrb.w	r3, [sl]
 8018e52:	2b2a      	cmp	r3, #42	@ 0x2a
 8018e54:	d015      	beq.n	8018e82 <_svfiprintf_r+0xfa>
 8018e56:	9a07      	ldr	r2, [sp, #28]
 8018e58:	4654      	mov	r4, sl
 8018e5a:	2000      	movs	r0, #0
 8018e5c:	f04f 0c0a 	mov.w	ip, #10
 8018e60:	4621      	mov	r1, r4
 8018e62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018e66:	3b30      	subs	r3, #48	@ 0x30
 8018e68:	2b09      	cmp	r3, #9
 8018e6a:	d94b      	bls.n	8018f04 <_svfiprintf_r+0x17c>
 8018e6c:	b1b0      	cbz	r0, 8018e9c <_svfiprintf_r+0x114>
 8018e6e:	9207      	str	r2, [sp, #28]
 8018e70:	e014      	b.n	8018e9c <_svfiprintf_r+0x114>
 8018e72:	eba0 0308 	sub.w	r3, r0, r8
 8018e76:	fa09 f303 	lsl.w	r3, r9, r3
 8018e7a:	4313      	orrs	r3, r2
 8018e7c:	9304      	str	r3, [sp, #16]
 8018e7e:	46a2      	mov	sl, r4
 8018e80:	e7d2      	b.n	8018e28 <_svfiprintf_r+0xa0>
 8018e82:	9b03      	ldr	r3, [sp, #12]
 8018e84:	1d19      	adds	r1, r3, #4
 8018e86:	681b      	ldr	r3, [r3, #0]
 8018e88:	9103      	str	r1, [sp, #12]
 8018e8a:	2b00      	cmp	r3, #0
 8018e8c:	bfbb      	ittet	lt
 8018e8e:	425b      	neglt	r3, r3
 8018e90:	f042 0202 	orrlt.w	r2, r2, #2
 8018e94:	9307      	strge	r3, [sp, #28]
 8018e96:	9307      	strlt	r3, [sp, #28]
 8018e98:	bfb8      	it	lt
 8018e9a:	9204      	strlt	r2, [sp, #16]
 8018e9c:	7823      	ldrb	r3, [r4, #0]
 8018e9e:	2b2e      	cmp	r3, #46	@ 0x2e
 8018ea0:	d10a      	bne.n	8018eb8 <_svfiprintf_r+0x130>
 8018ea2:	7863      	ldrb	r3, [r4, #1]
 8018ea4:	2b2a      	cmp	r3, #42	@ 0x2a
 8018ea6:	d132      	bne.n	8018f0e <_svfiprintf_r+0x186>
 8018ea8:	9b03      	ldr	r3, [sp, #12]
 8018eaa:	1d1a      	adds	r2, r3, #4
 8018eac:	681b      	ldr	r3, [r3, #0]
 8018eae:	9203      	str	r2, [sp, #12]
 8018eb0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018eb4:	3402      	adds	r4, #2
 8018eb6:	9305      	str	r3, [sp, #20]
 8018eb8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8018f7c <_svfiprintf_r+0x1f4>
 8018ebc:	7821      	ldrb	r1, [r4, #0]
 8018ebe:	2203      	movs	r2, #3
 8018ec0:	4650      	mov	r0, sl
 8018ec2:	f7e7 f9bd 	bl	8000240 <memchr>
 8018ec6:	b138      	cbz	r0, 8018ed8 <_svfiprintf_r+0x150>
 8018ec8:	9b04      	ldr	r3, [sp, #16]
 8018eca:	eba0 000a 	sub.w	r0, r0, sl
 8018ece:	2240      	movs	r2, #64	@ 0x40
 8018ed0:	4082      	lsls	r2, r0
 8018ed2:	4313      	orrs	r3, r2
 8018ed4:	3401      	adds	r4, #1
 8018ed6:	9304      	str	r3, [sp, #16]
 8018ed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018edc:	4824      	ldr	r0, [pc, #144]	@ (8018f70 <_svfiprintf_r+0x1e8>)
 8018ede:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018ee2:	2206      	movs	r2, #6
 8018ee4:	f7e7 f9ac 	bl	8000240 <memchr>
 8018ee8:	2800      	cmp	r0, #0
 8018eea:	d036      	beq.n	8018f5a <_svfiprintf_r+0x1d2>
 8018eec:	4b21      	ldr	r3, [pc, #132]	@ (8018f74 <_svfiprintf_r+0x1ec>)
 8018eee:	bb1b      	cbnz	r3, 8018f38 <_svfiprintf_r+0x1b0>
 8018ef0:	9b03      	ldr	r3, [sp, #12]
 8018ef2:	3307      	adds	r3, #7
 8018ef4:	f023 0307 	bic.w	r3, r3, #7
 8018ef8:	3308      	adds	r3, #8
 8018efa:	9303      	str	r3, [sp, #12]
 8018efc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018efe:	4433      	add	r3, r6
 8018f00:	9309      	str	r3, [sp, #36]	@ 0x24
 8018f02:	e76a      	b.n	8018dda <_svfiprintf_r+0x52>
 8018f04:	fb0c 3202 	mla	r2, ip, r2, r3
 8018f08:	460c      	mov	r4, r1
 8018f0a:	2001      	movs	r0, #1
 8018f0c:	e7a8      	b.n	8018e60 <_svfiprintf_r+0xd8>
 8018f0e:	2300      	movs	r3, #0
 8018f10:	3401      	adds	r4, #1
 8018f12:	9305      	str	r3, [sp, #20]
 8018f14:	4619      	mov	r1, r3
 8018f16:	f04f 0c0a 	mov.w	ip, #10
 8018f1a:	4620      	mov	r0, r4
 8018f1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018f20:	3a30      	subs	r2, #48	@ 0x30
 8018f22:	2a09      	cmp	r2, #9
 8018f24:	d903      	bls.n	8018f2e <_svfiprintf_r+0x1a6>
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	d0c6      	beq.n	8018eb8 <_svfiprintf_r+0x130>
 8018f2a:	9105      	str	r1, [sp, #20]
 8018f2c:	e7c4      	b.n	8018eb8 <_svfiprintf_r+0x130>
 8018f2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8018f32:	4604      	mov	r4, r0
 8018f34:	2301      	movs	r3, #1
 8018f36:	e7f0      	b.n	8018f1a <_svfiprintf_r+0x192>
 8018f38:	ab03      	add	r3, sp, #12
 8018f3a:	9300      	str	r3, [sp, #0]
 8018f3c:	462a      	mov	r2, r5
 8018f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8018f78 <_svfiprintf_r+0x1f0>)
 8018f40:	a904      	add	r1, sp, #16
 8018f42:	4638      	mov	r0, r7
 8018f44:	f3af 8000 	nop.w
 8018f48:	1c42      	adds	r2, r0, #1
 8018f4a:	4606      	mov	r6, r0
 8018f4c:	d1d6      	bne.n	8018efc <_svfiprintf_r+0x174>
 8018f4e:	89ab      	ldrh	r3, [r5, #12]
 8018f50:	065b      	lsls	r3, r3, #25
 8018f52:	f53f af2d 	bmi.w	8018db0 <_svfiprintf_r+0x28>
 8018f56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018f58:	e72c      	b.n	8018db4 <_svfiprintf_r+0x2c>
 8018f5a:	ab03      	add	r3, sp, #12
 8018f5c:	9300      	str	r3, [sp, #0]
 8018f5e:	462a      	mov	r2, r5
 8018f60:	4b05      	ldr	r3, [pc, #20]	@ (8018f78 <_svfiprintf_r+0x1f0>)
 8018f62:	a904      	add	r1, sp, #16
 8018f64:	4638      	mov	r0, r7
 8018f66:	f000 f9bb 	bl	80192e0 <_printf_i>
 8018f6a:	e7ed      	b.n	8018f48 <_svfiprintf_r+0x1c0>
 8018f6c:	0801a5df 	.word	0x0801a5df
 8018f70:	0801a5e9 	.word	0x0801a5e9
 8018f74:	00000000 	.word	0x00000000
 8018f78:	08018cd1 	.word	0x08018cd1
 8018f7c:	0801a5e5 	.word	0x0801a5e5

08018f80 <__sfputc_r>:
 8018f80:	6893      	ldr	r3, [r2, #8]
 8018f82:	3b01      	subs	r3, #1
 8018f84:	2b00      	cmp	r3, #0
 8018f86:	b410      	push	{r4}
 8018f88:	6093      	str	r3, [r2, #8]
 8018f8a:	da08      	bge.n	8018f9e <__sfputc_r+0x1e>
 8018f8c:	6994      	ldr	r4, [r2, #24]
 8018f8e:	42a3      	cmp	r3, r4
 8018f90:	db01      	blt.n	8018f96 <__sfputc_r+0x16>
 8018f92:	290a      	cmp	r1, #10
 8018f94:	d103      	bne.n	8018f9e <__sfputc_r+0x1e>
 8018f96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018f9a:	f000 bb7d 	b.w	8019698 <__swbuf_r>
 8018f9e:	6813      	ldr	r3, [r2, #0]
 8018fa0:	1c58      	adds	r0, r3, #1
 8018fa2:	6010      	str	r0, [r2, #0]
 8018fa4:	7019      	strb	r1, [r3, #0]
 8018fa6:	4608      	mov	r0, r1
 8018fa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018fac:	4770      	bx	lr

08018fae <__sfputs_r>:
 8018fae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018fb0:	4606      	mov	r6, r0
 8018fb2:	460f      	mov	r7, r1
 8018fb4:	4614      	mov	r4, r2
 8018fb6:	18d5      	adds	r5, r2, r3
 8018fb8:	42ac      	cmp	r4, r5
 8018fba:	d101      	bne.n	8018fc0 <__sfputs_r+0x12>
 8018fbc:	2000      	movs	r0, #0
 8018fbe:	e007      	b.n	8018fd0 <__sfputs_r+0x22>
 8018fc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018fc4:	463a      	mov	r2, r7
 8018fc6:	4630      	mov	r0, r6
 8018fc8:	f7ff ffda 	bl	8018f80 <__sfputc_r>
 8018fcc:	1c43      	adds	r3, r0, #1
 8018fce:	d1f3      	bne.n	8018fb8 <__sfputs_r+0xa>
 8018fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018fd4 <_vfiprintf_r>:
 8018fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fd8:	460d      	mov	r5, r1
 8018fda:	b09d      	sub	sp, #116	@ 0x74
 8018fdc:	4614      	mov	r4, r2
 8018fde:	4698      	mov	r8, r3
 8018fe0:	4606      	mov	r6, r0
 8018fe2:	b118      	cbz	r0, 8018fec <_vfiprintf_r+0x18>
 8018fe4:	6a03      	ldr	r3, [r0, #32]
 8018fe6:	b90b      	cbnz	r3, 8018fec <_vfiprintf_r+0x18>
 8018fe8:	f7ff fb98 	bl	801871c <__sinit>
 8018fec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018fee:	07d9      	lsls	r1, r3, #31
 8018ff0:	d405      	bmi.n	8018ffe <_vfiprintf_r+0x2a>
 8018ff2:	89ab      	ldrh	r3, [r5, #12]
 8018ff4:	059a      	lsls	r2, r3, #22
 8018ff6:	d402      	bmi.n	8018ffe <_vfiprintf_r+0x2a>
 8018ff8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018ffa:	f7ff fdd4 	bl	8018ba6 <__retarget_lock_acquire_recursive>
 8018ffe:	89ab      	ldrh	r3, [r5, #12]
 8019000:	071b      	lsls	r3, r3, #28
 8019002:	d501      	bpl.n	8019008 <_vfiprintf_r+0x34>
 8019004:	692b      	ldr	r3, [r5, #16]
 8019006:	b99b      	cbnz	r3, 8019030 <_vfiprintf_r+0x5c>
 8019008:	4629      	mov	r1, r5
 801900a:	4630      	mov	r0, r6
 801900c:	f000 fb82 	bl	8019714 <__swsetup_r>
 8019010:	b170      	cbz	r0, 8019030 <_vfiprintf_r+0x5c>
 8019012:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019014:	07dc      	lsls	r4, r3, #31
 8019016:	d504      	bpl.n	8019022 <_vfiprintf_r+0x4e>
 8019018:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801901c:	b01d      	add	sp, #116	@ 0x74
 801901e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019022:	89ab      	ldrh	r3, [r5, #12]
 8019024:	0598      	lsls	r0, r3, #22
 8019026:	d4f7      	bmi.n	8019018 <_vfiprintf_r+0x44>
 8019028:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801902a:	f7ff fdbd 	bl	8018ba8 <__retarget_lock_release_recursive>
 801902e:	e7f3      	b.n	8019018 <_vfiprintf_r+0x44>
 8019030:	2300      	movs	r3, #0
 8019032:	9309      	str	r3, [sp, #36]	@ 0x24
 8019034:	2320      	movs	r3, #32
 8019036:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801903a:	f8cd 800c 	str.w	r8, [sp, #12]
 801903e:	2330      	movs	r3, #48	@ 0x30
 8019040:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80191f0 <_vfiprintf_r+0x21c>
 8019044:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019048:	f04f 0901 	mov.w	r9, #1
 801904c:	4623      	mov	r3, r4
 801904e:	469a      	mov	sl, r3
 8019050:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019054:	b10a      	cbz	r2, 801905a <_vfiprintf_r+0x86>
 8019056:	2a25      	cmp	r2, #37	@ 0x25
 8019058:	d1f9      	bne.n	801904e <_vfiprintf_r+0x7a>
 801905a:	ebba 0b04 	subs.w	fp, sl, r4
 801905e:	d00b      	beq.n	8019078 <_vfiprintf_r+0xa4>
 8019060:	465b      	mov	r3, fp
 8019062:	4622      	mov	r2, r4
 8019064:	4629      	mov	r1, r5
 8019066:	4630      	mov	r0, r6
 8019068:	f7ff ffa1 	bl	8018fae <__sfputs_r>
 801906c:	3001      	adds	r0, #1
 801906e:	f000 80a7 	beq.w	80191c0 <_vfiprintf_r+0x1ec>
 8019072:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019074:	445a      	add	r2, fp
 8019076:	9209      	str	r2, [sp, #36]	@ 0x24
 8019078:	f89a 3000 	ldrb.w	r3, [sl]
 801907c:	2b00      	cmp	r3, #0
 801907e:	f000 809f 	beq.w	80191c0 <_vfiprintf_r+0x1ec>
 8019082:	2300      	movs	r3, #0
 8019084:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019088:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801908c:	f10a 0a01 	add.w	sl, sl, #1
 8019090:	9304      	str	r3, [sp, #16]
 8019092:	9307      	str	r3, [sp, #28]
 8019094:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019098:	931a      	str	r3, [sp, #104]	@ 0x68
 801909a:	4654      	mov	r4, sl
 801909c:	2205      	movs	r2, #5
 801909e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80190a2:	4853      	ldr	r0, [pc, #332]	@ (80191f0 <_vfiprintf_r+0x21c>)
 80190a4:	f7e7 f8cc 	bl	8000240 <memchr>
 80190a8:	9a04      	ldr	r2, [sp, #16]
 80190aa:	b9d8      	cbnz	r0, 80190e4 <_vfiprintf_r+0x110>
 80190ac:	06d1      	lsls	r1, r2, #27
 80190ae:	bf44      	itt	mi
 80190b0:	2320      	movmi	r3, #32
 80190b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80190b6:	0713      	lsls	r3, r2, #28
 80190b8:	bf44      	itt	mi
 80190ba:	232b      	movmi	r3, #43	@ 0x2b
 80190bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80190c0:	f89a 3000 	ldrb.w	r3, [sl]
 80190c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80190c6:	d015      	beq.n	80190f4 <_vfiprintf_r+0x120>
 80190c8:	9a07      	ldr	r2, [sp, #28]
 80190ca:	4654      	mov	r4, sl
 80190cc:	2000      	movs	r0, #0
 80190ce:	f04f 0c0a 	mov.w	ip, #10
 80190d2:	4621      	mov	r1, r4
 80190d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80190d8:	3b30      	subs	r3, #48	@ 0x30
 80190da:	2b09      	cmp	r3, #9
 80190dc:	d94b      	bls.n	8019176 <_vfiprintf_r+0x1a2>
 80190de:	b1b0      	cbz	r0, 801910e <_vfiprintf_r+0x13a>
 80190e0:	9207      	str	r2, [sp, #28]
 80190e2:	e014      	b.n	801910e <_vfiprintf_r+0x13a>
 80190e4:	eba0 0308 	sub.w	r3, r0, r8
 80190e8:	fa09 f303 	lsl.w	r3, r9, r3
 80190ec:	4313      	orrs	r3, r2
 80190ee:	9304      	str	r3, [sp, #16]
 80190f0:	46a2      	mov	sl, r4
 80190f2:	e7d2      	b.n	801909a <_vfiprintf_r+0xc6>
 80190f4:	9b03      	ldr	r3, [sp, #12]
 80190f6:	1d19      	adds	r1, r3, #4
 80190f8:	681b      	ldr	r3, [r3, #0]
 80190fa:	9103      	str	r1, [sp, #12]
 80190fc:	2b00      	cmp	r3, #0
 80190fe:	bfbb      	ittet	lt
 8019100:	425b      	neglt	r3, r3
 8019102:	f042 0202 	orrlt.w	r2, r2, #2
 8019106:	9307      	strge	r3, [sp, #28]
 8019108:	9307      	strlt	r3, [sp, #28]
 801910a:	bfb8      	it	lt
 801910c:	9204      	strlt	r2, [sp, #16]
 801910e:	7823      	ldrb	r3, [r4, #0]
 8019110:	2b2e      	cmp	r3, #46	@ 0x2e
 8019112:	d10a      	bne.n	801912a <_vfiprintf_r+0x156>
 8019114:	7863      	ldrb	r3, [r4, #1]
 8019116:	2b2a      	cmp	r3, #42	@ 0x2a
 8019118:	d132      	bne.n	8019180 <_vfiprintf_r+0x1ac>
 801911a:	9b03      	ldr	r3, [sp, #12]
 801911c:	1d1a      	adds	r2, r3, #4
 801911e:	681b      	ldr	r3, [r3, #0]
 8019120:	9203      	str	r2, [sp, #12]
 8019122:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019126:	3402      	adds	r4, #2
 8019128:	9305      	str	r3, [sp, #20]
 801912a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8019200 <_vfiprintf_r+0x22c>
 801912e:	7821      	ldrb	r1, [r4, #0]
 8019130:	2203      	movs	r2, #3
 8019132:	4650      	mov	r0, sl
 8019134:	f7e7 f884 	bl	8000240 <memchr>
 8019138:	b138      	cbz	r0, 801914a <_vfiprintf_r+0x176>
 801913a:	9b04      	ldr	r3, [sp, #16]
 801913c:	eba0 000a 	sub.w	r0, r0, sl
 8019140:	2240      	movs	r2, #64	@ 0x40
 8019142:	4082      	lsls	r2, r0
 8019144:	4313      	orrs	r3, r2
 8019146:	3401      	adds	r4, #1
 8019148:	9304      	str	r3, [sp, #16]
 801914a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801914e:	4829      	ldr	r0, [pc, #164]	@ (80191f4 <_vfiprintf_r+0x220>)
 8019150:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019154:	2206      	movs	r2, #6
 8019156:	f7e7 f873 	bl	8000240 <memchr>
 801915a:	2800      	cmp	r0, #0
 801915c:	d03f      	beq.n	80191de <_vfiprintf_r+0x20a>
 801915e:	4b26      	ldr	r3, [pc, #152]	@ (80191f8 <_vfiprintf_r+0x224>)
 8019160:	bb1b      	cbnz	r3, 80191aa <_vfiprintf_r+0x1d6>
 8019162:	9b03      	ldr	r3, [sp, #12]
 8019164:	3307      	adds	r3, #7
 8019166:	f023 0307 	bic.w	r3, r3, #7
 801916a:	3308      	adds	r3, #8
 801916c:	9303      	str	r3, [sp, #12]
 801916e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019170:	443b      	add	r3, r7
 8019172:	9309      	str	r3, [sp, #36]	@ 0x24
 8019174:	e76a      	b.n	801904c <_vfiprintf_r+0x78>
 8019176:	fb0c 3202 	mla	r2, ip, r2, r3
 801917a:	460c      	mov	r4, r1
 801917c:	2001      	movs	r0, #1
 801917e:	e7a8      	b.n	80190d2 <_vfiprintf_r+0xfe>
 8019180:	2300      	movs	r3, #0
 8019182:	3401      	adds	r4, #1
 8019184:	9305      	str	r3, [sp, #20]
 8019186:	4619      	mov	r1, r3
 8019188:	f04f 0c0a 	mov.w	ip, #10
 801918c:	4620      	mov	r0, r4
 801918e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019192:	3a30      	subs	r2, #48	@ 0x30
 8019194:	2a09      	cmp	r2, #9
 8019196:	d903      	bls.n	80191a0 <_vfiprintf_r+0x1cc>
 8019198:	2b00      	cmp	r3, #0
 801919a:	d0c6      	beq.n	801912a <_vfiprintf_r+0x156>
 801919c:	9105      	str	r1, [sp, #20]
 801919e:	e7c4      	b.n	801912a <_vfiprintf_r+0x156>
 80191a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80191a4:	4604      	mov	r4, r0
 80191a6:	2301      	movs	r3, #1
 80191a8:	e7f0      	b.n	801918c <_vfiprintf_r+0x1b8>
 80191aa:	ab03      	add	r3, sp, #12
 80191ac:	9300      	str	r3, [sp, #0]
 80191ae:	462a      	mov	r2, r5
 80191b0:	4b12      	ldr	r3, [pc, #72]	@ (80191fc <_vfiprintf_r+0x228>)
 80191b2:	a904      	add	r1, sp, #16
 80191b4:	4630      	mov	r0, r6
 80191b6:	f3af 8000 	nop.w
 80191ba:	4607      	mov	r7, r0
 80191bc:	1c78      	adds	r0, r7, #1
 80191be:	d1d6      	bne.n	801916e <_vfiprintf_r+0x19a>
 80191c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80191c2:	07d9      	lsls	r1, r3, #31
 80191c4:	d405      	bmi.n	80191d2 <_vfiprintf_r+0x1fe>
 80191c6:	89ab      	ldrh	r3, [r5, #12]
 80191c8:	059a      	lsls	r2, r3, #22
 80191ca:	d402      	bmi.n	80191d2 <_vfiprintf_r+0x1fe>
 80191cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80191ce:	f7ff fceb 	bl	8018ba8 <__retarget_lock_release_recursive>
 80191d2:	89ab      	ldrh	r3, [r5, #12]
 80191d4:	065b      	lsls	r3, r3, #25
 80191d6:	f53f af1f 	bmi.w	8019018 <_vfiprintf_r+0x44>
 80191da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80191dc:	e71e      	b.n	801901c <_vfiprintf_r+0x48>
 80191de:	ab03      	add	r3, sp, #12
 80191e0:	9300      	str	r3, [sp, #0]
 80191e2:	462a      	mov	r2, r5
 80191e4:	4b05      	ldr	r3, [pc, #20]	@ (80191fc <_vfiprintf_r+0x228>)
 80191e6:	a904      	add	r1, sp, #16
 80191e8:	4630      	mov	r0, r6
 80191ea:	f000 f879 	bl	80192e0 <_printf_i>
 80191ee:	e7e4      	b.n	80191ba <_vfiprintf_r+0x1e6>
 80191f0:	0801a5df 	.word	0x0801a5df
 80191f4:	0801a5e9 	.word	0x0801a5e9
 80191f8:	00000000 	.word	0x00000000
 80191fc:	08018faf 	.word	0x08018faf
 8019200:	0801a5e5 	.word	0x0801a5e5

08019204 <_printf_common>:
 8019204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019208:	4616      	mov	r6, r2
 801920a:	4698      	mov	r8, r3
 801920c:	688a      	ldr	r2, [r1, #8]
 801920e:	690b      	ldr	r3, [r1, #16]
 8019210:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019214:	4293      	cmp	r3, r2
 8019216:	bfb8      	it	lt
 8019218:	4613      	movlt	r3, r2
 801921a:	6033      	str	r3, [r6, #0]
 801921c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019220:	4607      	mov	r7, r0
 8019222:	460c      	mov	r4, r1
 8019224:	b10a      	cbz	r2, 801922a <_printf_common+0x26>
 8019226:	3301      	adds	r3, #1
 8019228:	6033      	str	r3, [r6, #0]
 801922a:	6823      	ldr	r3, [r4, #0]
 801922c:	0699      	lsls	r1, r3, #26
 801922e:	bf42      	ittt	mi
 8019230:	6833      	ldrmi	r3, [r6, #0]
 8019232:	3302      	addmi	r3, #2
 8019234:	6033      	strmi	r3, [r6, #0]
 8019236:	6825      	ldr	r5, [r4, #0]
 8019238:	f015 0506 	ands.w	r5, r5, #6
 801923c:	d106      	bne.n	801924c <_printf_common+0x48>
 801923e:	f104 0a19 	add.w	sl, r4, #25
 8019242:	68e3      	ldr	r3, [r4, #12]
 8019244:	6832      	ldr	r2, [r6, #0]
 8019246:	1a9b      	subs	r3, r3, r2
 8019248:	42ab      	cmp	r3, r5
 801924a:	dc26      	bgt.n	801929a <_printf_common+0x96>
 801924c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019250:	6822      	ldr	r2, [r4, #0]
 8019252:	3b00      	subs	r3, #0
 8019254:	bf18      	it	ne
 8019256:	2301      	movne	r3, #1
 8019258:	0692      	lsls	r2, r2, #26
 801925a:	d42b      	bmi.n	80192b4 <_printf_common+0xb0>
 801925c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019260:	4641      	mov	r1, r8
 8019262:	4638      	mov	r0, r7
 8019264:	47c8      	blx	r9
 8019266:	3001      	adds	r0, #1
 8019268:	d01e      	beq.n	80192a8 <_printf_common+0xa4>
 801926a:	6823      	ldr	r3, [r4, #0]
 801926c:	6922      	ldr	r2, [r4, #16]
 801926e:	f003 0306 	and.w	r3, r3, #6
 8019272:	2b04      	cmp	r3, #4
 8019274:	bf02      	ittt	eq
 8019276:	68e5      	ldreq	r5, [r4, #12]
 8019278:	6833      	ldreq	r3, [r6, #0]
 801927a:	1aed      	subeq	r5, r5, r3
 801927c:	68a3      	ldr	r3, [r4, #8]
 801927e:	bf0c      	ite	eq
 8019280:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019284:	2500      	movne	r5, #0
 8019286:	4293      	cmp	r3, r2
 8019288:	bfc4      	itt	gt
 801928a:	1a9b      	subgt	r3, r3, r2
 801928c:	18ed      	addgt	r5, r5, r3
 801928e:	2600      	movs	r6, #0
 8019290:	341a      	adds	r4, #26
 8019292:	42b5      	cmp	r5, r6
 8019294:	d11a      	bne.n	80192cc <_printf_common+0xc8>
 8019296:	2000      	movs	r0, #0
 8019298:	e008      	b.n	80192ac <_printf_common+0xa8>
 801929a:	2301      	movs	r3, #1
 801929c:	4652      	mov	r2, sl
 801929e:	4641      	mov	r1, r8
 80192a0:	4638      	mov	r0, r7
 80192a2:	47c8      	blx	r9
 80192a4:	3001      	adds	r0, #1
 80192a6:	d103      	bne.n	80192b0 <_printf_common+0xac>
 80192a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80192ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80192b0:	3501      	adds	r5, #1
 80192b2:	e7c6      	b.n	8019242 <_printf_common+0x3e>
 80192b4:	18e1      	adds	r1, r4, r3
 80192b6:	1c5a      	adds	r2, r3, #1
 80192b8:	2030      	movs	r0, #48	@ 0x30
 80192ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80192be:	4422      	add	r2, r4
 80192c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80192c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80192c8:	3302      	adds	r3, #2
 80192ca:	e7c7      	b.n	801925c <_printf_common+0x58>
 80192cc:	2301      	movs	r3, #1
 80192ce:	4622      	mov	r2, r4
 80192d0:	4641      	mov	r1, r8
 80192d2:	4638      	mov	r0, r7
 80192d4:	47c8      	blx	r9
 80192d6:	3001      	adds	r0, #1
 80192d8:	d0e6      	beq.n	80192a8 <_printf_common+0xa4>
 80192da:	3601      	adds	r6, #1
 80192dc:	e7d9      	b.n	8019292 <_printf_common+0x8e>
	...

080192e0 <_printf_i>:
 80192e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80192e4:	7e0f      	ldrb	r7, [r1, #24]
 80192e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80192e8:	2f78      	cmp	r7, #120	@ 0x78
 80192ea:	4691      	mov	r9, r2
 80192ec:	4680      	mov	r8, r0
 80192ee:	460c      	mov	r4, r1
 80192f0:	469a      	mov	sl, r3
 80192f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80192f6:	d807      	bhi.n	8019308 <_printf_i+0x28>
 80192f8:	2f62      	cmp	r7, #98	@ 0x62
 80192fa:	d80a      	bhi.n	8019312 <_printf_i+0x32>
 80192fc:	2f00      	cmp	r7, #0
 80192fe:	f000 80d1 	beq.w	80194a4 <_printf_i+0x1c4>
 8019302:	2f58      	cmp	r7, #88	@ 0x58
 8019304:	f000 80b8 	beq.w	8019478 <_printf_i+0x198>
 8019308:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801930c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019310:	e03a      	b.n	8019388 <_printf_i+0xa8>
 8019312:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8019316:	2b15      	cmp	r3, #21
 8019318:	d8f6      	bhi.n	8019308 <_printf_i+0x28>
 801931a:	a101      	add	r1, pc, #4	@ (adr r1, 8019320 <_printf_i+0x40>)
 801931c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019320:	08019379 	.word	0x08019379
 8019324:	0801938d 	.word	0x0801938d
 8019328:	08019309 	.word	0x08019309
 801932c:	08019309 	.word	0x08019309
 8019330:	08019309 	.word	0x08019309
 8019334:	08019309 	.word	0x08019309
 8019338:	0801938d 	.word	0x0801938d
 801933c:	08019309 	.word	0x08019309
 8019340:	08019309 	.word	0x08019309
 8019344:	08019309 	.word	0x08019309
 8019348:	08019309 	.word	0x08019309
 801934c:	0801948b 	.word	0x0801948b
 8019350:	080193b7 	.word	0x080193b7
 8019354:	08019445 	.word	0x08019445
 8019358:	08019309 	.word	0x08019309
 801935c:	08019309 	.word	0x08019309
 8019360:	080194ad 	.word	0x080194ad
 8019364:	08019309 	.word	0x08019309
 8019368:	080193b7 	.word	0x080193b7
 801936c:	08019309 	.word	0x08019309
 8019370:	08019309 	.word	0x08019309
 8019374:	0801944d 	.word	0x0801944d
 8019378:	6833      	ldr	r3, [r6, #0]
 801937a:	1d1a      	adds	r2, r3, #4
 801937c:	681b      	ldr	r3, [r3, #0]
 801937e:	6032      	str	r2, [r6, #0]
 8019380:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019384:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8019388:	2301      	movs	r3, #1
 801938a:	e09c      	b.n	80194c6 <_printf_i+0x1e6>
 801938c:	6833      	ldr	r3, [r6, #0]
 801938e:	6820      	ldr	r0, [r4, #0]
 8019390:	1d19      	adds	r1, r3, #4
 8019392:	6031      	str	r1, [r6, #0]
 8019394:	0606      	lsls	r6, r0, #24
 8019396:	d501      	bpl.n	801939c <_printf_i+0xbc>
 8019398:	681d      	ldr	r5, [r3, #0]
 801939a:	e003      	b.n	80193a4 <_printf_i+0xc4>
 801939c:	0645      	lsls	r5, r0, #25
 801939e:	d5fb      	bpl.n	8019398 <_printf_i+0xb8>
 80193a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80193a4:	2d00      	cmp	r5, #0
 80193a6:	da03      	bge.n	80193b0 <_printf_i+0xd0>
 80193a8:	232d      	movs	r3, #45	@ 0x2d
 80193aa:	426d      	negs	r5, r5
 80193ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80193b0:	4858      	ldr	r0, [pc, #352]	@ (8019514 <_printf_i+0x234>)
 80193b2:	230a      	movs	r3, #10
 80193b4:	e011      	b.n	80193da <_printf_i+0xfa>
 80193b6:	6821      	ldr	r1, [r4, #0]
 80193b8:	6833      	ldr	r3, [r6, #0]
 80193ba:	0608      	lsls	r0, r1, #24
 80193bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80193c0:	d402      	bmi.n	80193c8 <_printf_i+0xe8>
 80193c2:	0649      	lsls	r1, r1, #25
 80193c4:	bf48      	it	mi
 80193c6:	b2ad      	uxthmi	r5, r5
 80193c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80193ca:	4852      	ldr	r0, [pc, #328]	@ (8019514 <_printf_i+0x234>)
 80193cc:	6033      	str	r3, [r6, #0]
 80193ce:	bf14      	ite	ne
 80193d0:	230a      	movne	r3, #10
 80193d2:	2308      	moveq	r3, #8
 80193d4:	2100      	movs	r1, #0
 80193d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80193da:	6866      	ldr	r6, [r4, #4]
 80193dc:	60a6      	str	r6, [r4, #8]
 80193de:	2e00      	cmp	r6, #0
 80193e0:	db05      	blt.n	80193ee <_printf_i+0x10e>
 80193e2:	6821      	ldr	r1, [r4, #0]
 80193e4:	432e      	orrs	r6, r5
 80193e6:	f021 0104 	bic.w	r1, r1, #4
 80193ea:	6021      	str	r1, [r4, #0]
 80193ec:	d04b      	beq.n	8019486 <_printf_i+0x1a6>
 80193ee:	4616      	mov	r6, r2
 80193f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80193f4:	fb03 5711 	mls	r7, r3, r1, r5
 80193f8:	5dc7      	ldrb	r7, [r0, r7]
 80193fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80193fe:	462f      	mov	r7, r5
 8019400:	42bb      	cmp	r3, r7
 8019402:	460d      	mov	r5, r1
 8019404:	d9f4      	bls.n	80193f0 <_printf_i+0x110>
 8019406:	2b08      	cmp	r3, #8
 8019408:	d10b      	bne.n	8019422 <_printf_i+0x142>
 801940a:	6823      	ldr	r3, [r4, #0]
 801940c:	07df      	lsls	r7, r3, #31
 801940e:	d508      	bpl.n	8019422 <_printf_i+0x142>
 8019410:	6923      	ldr	r3, [r4, #16]
 8019412:	6861      	ldr	r1, [r4, #4]
 8019414:	4299      	cmp	r1, r3
 8019416:	bfde      	ittt	le
 8019418:	2330      	movle	r3, #48	@ 0x30
 801941a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801941e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8019422:	1b92      	subs	r2, r2, r6
 8019424:	6122      	str	r2, [r4, #16]
 8019426:	f8cd a000 	str.w	sl, [sp]
 801942a:	464b      	mov	r3, r9
 801942c:	aa03      	add	r2, sp, #12
 801942e:	4621      	mov	r1, r4
 8019430:	4640      	mov	r0, r8
 8019432:	f7ff fee7 	bl	8019204 <_printf_common>
 8019436:	3001      	adds	r0, #1
 8019438:	d14a      	bne.n	80194d0 <_printf_i+0x1f0>
 801943a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801943e:	b004      	add	sp, #16
 8019440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019444:	6823      	ldr	r3, [r4, #0]
 8019446:	f043 0320 	orr.w	r3, r3, #32
 801944a:	6023      	str	r3, [r4, #0]
 801944c:	4832      	ldr	r0, [pc, #200]	@ (8019518 <_printf_i+0x238>)
 801944e:	2778      	movs	r7, #120	@ 0x78
 8019450:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8019454:	6823      	ldr	r3, [r4, #0]
 8019456:	6831      	ldr	r1, [r6, #0]
 8019458:	061f      	lsls	r7, r3, #24
 801945a:	f851 5b04 	ldr.w	r5, [r1], #4
 801945e:	d402      	bmi.n	8019466 <_printf_i+0x186>
 8019460:	065f      	lsls	r7, r3, #25
 8019462:	bf48      	it	mi
 8019464:	b2ad      	uxthmi	r5, r5
 8019466:	6031      	str	r1, [r6, #0]
 8019468:	07d9      	lsls	r1, r3, #31
 801946a:	bf44      	itt	mi
 801946c:	f043 0320 	orrmi.w	r3, r3, #32
 8019470:	6023      	strmi	r3, [r4, #0]
 8019472:	b11d      	cbz	r5, 801947c <_printf_i+0x19c>
 8019474:	2310      	movs	r3, #16
 8019476:	e7ad      	b.n	80193d4 <_printf_i+0xf4>
 8019478:	4826      	ldr	r0, [pc, #152]	@ (8019514 <_printf_i+0x234>)
 801947a:	e7e9      	b.n	8019450 <_printf_i+0x170>
 801947c:	6823      	ldr	r3, [r4, #0]
 801947e:	f023 0320 	bic.w	r3, r3, #32
 8019482:	6023      	str	r3, [r4, #0]
 8019484:	e7f6      	b.n	8019474 <_printf_i+0x194>
 8019486:	4616      	mov	r6, r2
 8019488:	e7bd      	b.n	8019406 <_printf_i+0x126>
 801948a:	6833      	ldr	r3, [r6, #0]
 801948c:	6825      	ldr	r5, [r4, #0]
 801948e:	6961      	ldr	r1, [r4, #20]
 8019490:	1d18      	adds	r0, r3, #4
 8019492:	6030      	str	r0, [r6, #0]
 8019494:	062e      	lsls	r6, r5, #24
 8019496:	681b      	ldr	r3, [r3, #0]
 8019498:	d501      	bpl.n	801949e <_printf_i+0x1be>
 801949a:	6019      	str	r1, [r3, #0]
 801949c:	e002      	b.n	80194a4 <_printf_i+0x1c4>
 801949e:	0668      	lsls	r0, r5, #25
 80194a0:	d5fb      	bpl.n	801949a <_printf_i+0x1ba>
 80194a2:	8019      	strh	r1, [r3, #0]
 80194a4:	2300      	movs	r3, #0
 80194a6:	6123      	str	r3, [r4, #16]
 80194a8:	4616      	mov	r6, r2
 80194aa:	e7bc      	b.n	8019426 <_printf_i+0x146>
 80194ac:	6833      	ldr	r3, [r6, #0]
 80194ae:	1d1a      	adds	r2, r3, #4
 80194b0:	6032      	str	r2, [r6, #0]
 80194b2:	681e      	ldr	r6, [r3, #0]
 80194b4:	6862      	ldr	r2, [r4, #4]
 80194b6:	2100      	movs	r1, #0
 80194b8:	4630      	mov	r0, r6
 80194ba:	f7e6 fec1 	bl	8000240 <memchr>
 80194be:	b108      	cbz	r0, 80194c4 <_printf_i+0x1e4>
 80194c0:	1b80      	subs	r0, r0, r6
 80194c2:	6060      	str	r0, [r4, #4]
 80194c4:	6863      	ldr	r3, [r4, #4]
 80194c6:	6123      	str	r3, [r4, #16]
 80194c8:	2300      	movs	r3, #0
 80194ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80194ce:	e7aa      	b.n	8019426 <_printf_i+0x146>
 80194d0:	6923      	ldr	r3, [r4, #16]
 80194d2:	4632      	mov	r2, r6
 80194d4:	4649      	mov	r1, r9
 80194d6:	4640      	mov	r0, r8
 80194d8:	47d0      	blx	sl
 80194da:	3001      	adds	r0, #1
 80194dc:	d0ad      	beq.n	801943a <_printf_i+0x15a>
 80194de:	6823      	ldr	r3, [r4, #0]
 80194e0:	079b      	lsls	r3, r3, #30
 80194e2:	d413      	bmi.n	801950c <_printf_i+0x22c>
 80194e4:	68e0      	ldr	r0, [r4, #12]
 80194e6:	9b03      	ldr	r3, [sp, #12]
 80194e8:	4298      	cmp	r0, r3
 80194ea:	bfb8      	it	lt
 80194ec:	4618      	movlt	r0, r3
 80194ee:	e7a6      	b.n	801943e <_printf_i+0x15e>
 80194f0:	2301      	movs	r3, #1
 80194f2:	4632      	mov	r2, r6
 80194f4:	4649      	mov	r1, r9
 80194f6:	4640      	mov	r0, r8
 80194f8:	47d0      	blx	sl
 80194fa:	3001      	adds	r0, #1
 80194fc:	d09d      	beq.n	801943a <_printf_i+0x15a>
 80194fe:	3501      	adds	r5, #1
 8019500:	68e3      	ldr	r3, [r4, #12]
 8019502:	9903      	ldr	r1, [sp, #12]
 8019504:	1a5b      	subs	r3, r3, r1
 8019506:	42ab      	cmp	r3, r5
 8019508:	dcf2      	bgt.n	80194f0 <_printf_i+0x210>
 801950a:	e7eb      	b.n	80194e4 <_printf_i+0x204>
 801950c:	2500      	movs	r5, #0
 801950e:	f104 0619 	add.w	r6, r4, #25
 8019512:	e7f5      	b.n	8019500 <_printf_i+0x220>
 8019514:	0801a5f0 	.word	0x0801a5f0
 8019518:	0801a601 	.word	0x0801a601

0801951c <__sflush_r>:
 801951c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019524:	0716      	lsls	r6, r2, #28
 8019526:	4605      	mov	r5, r0
 8019528:	460c      	mov	r4, r1
 801952a:	d454      	bmi.n	80195d6 <__sflush_r+0xba>
 801952c:	684b      	ldr	r3, [r1, #4]
 801952e:	2b00      	cmp	r3, #0
 8019530:	dc02      	bgt.n	8019538 <__sflush_r+0x1c>
 8019532:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8019534:	2b00      	cmp	r3, #0
 8019536:	dd48      	ble.n	80195ca <__sflush_r+0xae>
 8019538:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801953a:	2e00      	cmp	r6, #0
 801953c:	d045      	beq.n	80195ca <__sflush_r+0xae>
 801953e:	2300      	movs	r3, #0
 8019540:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8019544:	682f      	ldr	r7, [r5, #0]
 8019546:	6a21      	ldr	r1, [r4, #32]
 8019548:	602b      	str	r3, [r5, #0]
 801954a:	d030      	beq.n	80195ae <__sflush_r+0x92>
 801954c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801954e:	89a3      	ldrh	r3, [r4, #12]
 8019550:	0759      	lsls	r1, r3, #29
 8019552:	d505      	bpl.n	8019560 <__sflush_r+0x44>
 8019554:	6863      	ldr	r3, [r4, #4]
 8019556:	1ad2      	subs	r2, r2, r3
 8019558:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801955a:	b10b      	cbz	r3, 8019560 <__sflush_r+0x44>
 801955c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801955e:	1ad2      	subs	r2, r2, r3
 8019560:	2300      	movs	r3, #0
 8019562:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019564:	6a21      	ldr	r1, [r4, #32]
 8019566:	4628      	mov	r0, r5
 8019568:	47b0      	blx	r6
 801956a:	1c43      	adds	r3, r0, #1
 801956c:	89a3      	ldrh	r3, [r4, #12]
 801956e:	d106      	bne.n	801957e <__sflush_r+0x62>
 8019570:	6829      	ldr	r1, [r5, #0]
 8019572:	291d      	cmp	r1, #29
 8019574:	d82b      	bhi.n	80195ce <__sflush_r+0xb2>
 8019576:	4a2a      	ldr	r2, [pc, #168]	@ (8019620 <__sflush_r+0x104>)
 8019578:	40ca      	lsrs	r2, r1
 801957a:	07d6      	lsls	r6, r2, #31
 801957c:	d527      	bpl.n	80195ce <__sflush_r+0xb2>
 801957e:	2200      	movs	r2, #0
 8019580:	6062      	str	r2, [r4, #4]
 8019582:	04d9      	lsls	r1, r3, #19
 8019584:	6922      	ldr	r2, [r4, #16]
 8019586:	6022      	str	r2, [r4, #0]
 8019588:	d504      	bpl.n	8019594 <__sflush_r+0x78>
 801958a:	1c42      	adds	r2, r0, #1
 801958c:	d101      	bne.n	8019592 <__sflush_r+0x76>
 801958e:	682b      	ldr	r3, [r5, #0]
 8019590:	b903      	cbnz	r3, 8019594 <__sflush_r+0x78>
 8019592:	6560      	str	r0, [r4, #84]	@ 0x54
 8019594:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019596:	602f      	str	r7, [r5, #0]
 8019598:	b1b9      	cbz	r1, 80195ca <__sflush_r+0xae>
 801959a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801959e:	4299      	cmp	r1, r3
 80195a0:	d002      	beq.n	80195a8 <__sflush_r+0x8c>
 80195a2:	4628      	mov	r0, r5
 80195a4:	f7ff fb42 	bl	8018c2c <_free_r>
 80195a8:	2300      	movs	r3, #0
 80195aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80195ac:	e00d      	b.n	80195ca <__sflush_r+0xae>
 80195ae:	2301      	movs	r3, #1
 80195b0:	4628      	mov	r0, r5
 80195b2:	47b0      	blx	r6
 80195b4:	4602      	mov	r2, r0
 80195b6:	1c50      	adds	r0, r2, #1
 80195b8:	d1c9      	bne.n	801954e <__sflush_r+0x32>
 80195ba:	682b      	ldr	r3, [r5, #0]
 80195bc:	2b00      	cmp	r3, #0
 80195be:	d0c6      	beq.n	801954e <__sflush_r+0x32>
 80195c0:	2b1d      	cmp	r3, #29
 80195c2:	d001      	beq.n	80195c8 <__sflush_r+0xac>
 80195c4:	2b16      	cmp	r3, #22
 80195c6:	d11e      	bne.n	8019606 <__sflush_r+0xea>
 80195c8:	602f      	str	r7, [r5, #0]
 80195ca:	2000      	movs	r0, #0
 80195cc:	e022      	b.n	8019614 <__sflush_r+0xf8>
 80195ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80195d2:	b21b      	sxth	r3, r3
 80195d4:	e01b      	b.n	801960e <__sflush_r+0xf2>
 80195d6:	690f      	ldr	r7, [r1, #16]
 80195d8:	2f00      	cmp	r7, #0
 80195da:	d0f6      	beq.n	80195ca <__sflush_r+0xae>
 80195dc:	0793      	lsls	r3, r2, #30
 80195de:	680e      	ldr	r6, [r1, #0]
 80195e0:	bf08      	it	eq
 80195e2:	694b      	ldreq	r3, [r1, #20]
 80195e4:	600f      	str	r7, [r1, #0]
 80195e6:	bf18      	it	ne
 80195e8:	2300      	movne	r3, #0
 80195ea:	eba6 0807 	sub.w	r8, r6, r7
 80195ee:	608b      	str	r3, [r1, #8]
 80195f0:	f1b8 0f00 	cmp.w	r8, #0
 80195f4:	dde9      	ble.n	80195ca <__sflush_r+0xae>
 80195f6:	6a21      	ldr	r1, [r4, #32]
 80195f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80195fa:	4643      	mov	r3, r8
 80195fc:	463a      	mov	r2, r7
 80195fe:	4628      	mov	r0, r5
 8019600:	47b0      	blx	r6
 8019602:	2800      	cmp	r0, #0
 8019604:	dc08      	bgt.n	8019618 <__sflush_r+0xfc>
 8019606:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801960a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801960e:	81a3      	strh	r3, [r4, #12]
 8019610:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019618:	4407      	add	r7, r0
 801961a:	eba8 0800 	sub.w	r8, r8, r0
 801961e:	e7e7      	b.n	80195f0 <__sflush_r+0xd4>
 8019620:	20400001 	.word	0x20400001

08019624 <_fflush_r>:
 8019624:	b538      	push	{r3, r4, r5, lr}
 8019626:	690b      	ldr	r3, [r1, #16]
 8019628:	4605      	mov	r5, r0
 801962a:	460c      	mov	r4, r1
 801962c:	b913      	cbnz	r3, 8019634 <_fflush_r+0x10>
 801962e:	2500      	movs	r5, #0
 8019630:	4628      	mov	r0, r5
 8019632:	bd38      	pop	{r3, r4, r5, pc}
 8019634:	b118      	cbz	r0, 801963e <_fflush_r+0x1a>
 8019636:	6a03      	ldr	r3, [r0, #32]
 8019638:	b90b      	cbnz	r3, 801963e <_fflush_r+0x1a>
 801963a:	f7ff f86f 	bl	801871c <__sinit>
 801963e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019642:	2b00      	cmp	r3, #0
 8019644:	d0f3      	beq.n	801962e <_fflush_r+0xa>
 8019646:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019648:	07d0      	lsls	r0, r2, #31
 801964a:	d404      	bmi.n	8019656 <_fflush_r+0x32>
 801964c:	0599      	lsls	r1, r3, #22
 801964e:	d402      	bmi.n	8019656 <_fflush_r+0x32>
 8019650:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019652:	f7ff faa8 	bl	8018ba6 <__retarget_lock_acquire_recursive>
 8019656:	4628      	mov	r0, r5
 8019658:	4621      	mov	r1, r4
 801965a:	f7ff ff5f 	bl	801951c <__sflush_r>
 801965e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019660:	07da      	lsls	r2, r3, #31
 8019662:	4605      	mov	r5, r0
 8019664:	d4e4      	bmi.n	8019630 <_fflush_r+0xc>
 8019666:	89a3      	ldrh	r3, [r4, #12]
 8019668:	059b      	lsls	r3, r3, #22
 801966a:	d4e1      	bmi.n	8019630 <_fflush_r+0xc>
 801966c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801966e:	f7ff fa9b 	bl	8018ba8 <__retarget_lock_release_recursive>
 8019672:	e7dd      	b.n	8019630 <_fflush_r+0xc>

08019674 <fiprintf>:
 8019674:	b40e      	push	{r1, r2, r3}
 8019676:	b503      	push	{r0, r1, lr}
 8019678:	4601      	mov	r1, r0
 801967a:	ab03      	add	r3, sp, #12
 801967c:	4805      	ldr	r0, [pc, #20]	@ (8019694 <fiprintf+0x20>)
 801967e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019682:	6800      	ldr	r0, [r0, #0]
 8019684:	9301      	str	r3, [sp, #4]
 8019686:	f7ff fca5 	bl	8018fd4 <_vfiprintf_r>
 801968a:	b002      	add	sp, #8
 801968c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019690:	b003      	add	sp, #12
 8019692:	4770      	bx	lr
 8019694:	200000f4 	.word	0x200000f4

08019698 <__swbuf_r>:
 8019698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801969a:	460e      	mov	r6, r1
 801969c:	4614      	mov	r4, r2
 801969e:	4605      	mov	r5, r0
 80196a0:	b118      	cbz	r0, 80196aa <__swbuf_r+0x12>
 80196a2:	6a03      	ldr	r3, [r0, #32]
 80196a4:	b90b      	cbnz	r3, 80196aa <__swbuf_r+0x12>
 80196a6:	f7ff f839 	bl	801871c <__sinit>
 80196aa:	69a3      	ldr	r3, [r4, #24]
 80196ac:	60a3      	str	r3, [r4, #8]
 80196ae:	89a3      	ldrh	r3, [r4, #12]
 80196b0:	071a      	lsls	r2, r3, #28
 80196b2:	d501      	bpl.n	80196b8 <__swbuf_r+0x20>
 80196b4:	6923      	ldr	r3, [r4, #16]
 80196b6:	b943      	cbnz	r3, 80196ca <__swbuf_r+0x32>
 80196b8:	4621      	mov	r1, r4
 80196ba:	4628      	mov	r0, r5
 80196bc:	f000 f82a 	bl	8019714 <__swsetup_r>
 80196c0:	b118      	cbz	r0, 80196ca <__swbuf_r+0x32>
 80196c2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80196c6:	4638      	mov	r0, r7
 80196c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80196ca:	6823      	ldr	r3, [r4, #0]
 80196cc:	6922      	ldr	r2, [r4, #16]
 80196ce:	1a98      	subs	r0, r3, r2
 80196d0:	6963      	ldr	r3, [r4, #20]
 80196d2:	b2f6      	uxtb	r6, r6
 80196d4:	4283      	cmp	r3, r0
 80196d6:	4637      	mov	r7, r6
 80196d8:	dc05      	bgt.n	80196e6 <__swbuf_r+0x4e>
 80196da:	4621      	mov	r1, r4
 80196dc:	4628      	mov	r0, r5
 80196de:	f7ff ffa1 	bl	8019624 <_fflush_r>
 80196e2:	2800      	cmp	r0, #0
 80196e4:	d1ed      	bne.n	80196c2 <__swbuf_r+0x2a>
 80196e6:	68a3      	ldr	r3, [r4, #8]
 80196e8:	3b01      	subs	r3, #1
 80196ea:	60a3      	str	r3, [r4, #8]
 80196ec:	6823      	ldr	r3, [r4, #0]
 80196ee:	1c5a      	adds	r2, r3, #1
 80196f0:	6022      	str	r2, [r4, #0]
 80196f2:	701e      	strb	r6, [r3, #0]
 80196f4:	6962      	ldr	r2, [r4, #20]
 80196f6:	1c43      	adds	r3, r0, #1
 80196f8:	429a      	cmp	r2, r3
 80196fa:	d004      	beq.n	8019706 <__swbuf_r+0x6e>
 80196fc:	89a3      	ldrh	r3, [r4, #12]
 80196fe:	07db      	lsls	r3, r3, #31
 8019700:	d5e1      	bpl.n	80196c6 <__swbuf_r+0x2e>
 8019702:	2e0a      	cmp	r6, #10
 8019704:	d1df      	bne.n	80196c6 <__swbuf_r+0x2e>
 8019706:	4621      	mov	r1, r4
 8019708:	4628      	mov	r0, r5
 801970a:	f7ff ff8b 	bl	8019624 <_fflush_r>
 801970e:	2800      	cmp	r0, #0
 8019710:	d0d9      	beq.n	80196c6 <__swbuf_r+0x2e>
 8019712:	e7d6      	b.n	80196c2 <__swbuf_r+0x2a>

08019714 <__swsetup_r>:
 8019714:	b538      	push	{r3, r4, r5, lr}
 8019716:	4b29      	ldr	r3, [pc, #164]	@ (80197bc <__swsetup_r+0xa8>)
 8019718:	4605      	mov	r5, r0
 801971a:	6818      	ldr	r0, [r3, #0]
 801971c:	460c      	mov	r4, r1
 801971e:	b118      	cbz	r0, 8019728 <__swsetup_r+0x14>
 8019720:	6a03      	ldr	r3, [r0, #32]
 8019722:	b90b      	cbnz	r3, 8019728 <__swsetup_r+0x14>
 8019724:	f7fe fffa 	bl	801871c <__sinit>
 8019728:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801972c:	0719      	lsls	r1, r3, #28
 801972e:	d422      	bmi.n	8019776 <__swsetup_r+0x62>
 8019730:	06da      	lsls	r2, r3, #27
 8019732:	d407      	bmi.n	8019744 <__swsetup_r+0x30>
 8019734:	2209      	movs	r2, #9
 8019736:	602a      	str	r2, [r5, #0]
 8019738:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801973c:	81a3      	strh	r3, [r4, #12]
 801973e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019742:	e033      	b.n	80197ac <__swsetup_r+0x98>
 8019744:	0758      	lsls	r0, r3, #29
 8019746:	d512      	bpl.n	801976e <__swsetup_r+0x5a>
 8019748:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801974a:	b141      	cbz	r1, 801975e <__swsetup_r+0x4a>
 801974c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019750:	4299      	cmp	r1, r3
 8019752:	d002      	beq.n	801975a <__swsetup_r+0x46>
 8019754:	4628      	mov	r0, r5
 8019756:	f7ff fa69 	bl	8018c2c <_free_r>
 801975a:	2300      	movs	r3, #0
 801975c:	6363      	str	r3, [r4, #52]	@ 0x34
 801975e:	89a3      	ldrh	r3, [r4, #12]
 8019760:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8019764:	81a3      	strh	r3, [r4, #12]
 8019766:	2300      	movs	r3, #0
 8019768:	6063      	str	r3, [r4, #4]
 801976a:	6923      	ldr	r3, [r4, #16]
 801976c:	6023      	str	r3, [r4, #0]
 801976e:	89a3      	ldrh	r3, [r4, #12]
 8019770:	f043 0308 	orr.w	r3, r3, #8
 8019774:	81a3      	strh	r3, [r4, #12]
 8019776:	6923      	ldr	r3, [r4, #16]
 8019778:	b94b      	cbnz	r3, 801978e <__swsetup_r+0x7a>
 801977a:	89a3      	ldrh	r3, [r4, #12]
 801977c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8019780:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019784:	d003      	beq.n	801978e <__swsetup_r+0x7a>
 8019786:	4621      	mov	r1, r4
 8019788:	4628      	mov	r0, r5
 801978a:	f000 f846 	bl	801981a <__smakebuf_r>
 801978e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019792:	f013 0201 	ands.w	r2, r3, #1
 8019796:	d00a      	beq.n	80197ae <__swsetup_r+0x9a>
 8019798:	2200      	movs	r2, #0
 801979a:	60a2      	str	r2, [r4, #8]
 801979c:	6962      	ldr	r2, [r4, #20]
 801979e:	4252      	negs	r2, r2
 80197a0:	61a2      	str	r2, [r4, #24]
 80197a2:	6922      	ldr	r2, [r4, #16]
 80197a4:	b942      	cbnz	r2, 80197b8 <__swsetup_r+0xa4>
 80197a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80197aa:	d1c5      	bne.n	8019738 <__swsetup_r+0x24>
 80197ac:	bd38      	pop	{r3, r4, r5, pc}
 80197ae:	0799      	lsls	r1, r3, #30
 80197b0:	bf58      	it	pl
 80197b2:	6962      	ldrpl	r2, [r4, #20]
 80197b4:	60a2      	str	r2, [r4, #8]
 80197b6:	e7f4      	b.n	80197a2 <__swsetup_r+0x8e>
 80197b8:	2000      	movs	r0, #0
 80197ba:	e7f7      	b.n	80197ac <__swsetup_r+0x98>
 80197bc:	200000f4 	.word	0x200000f4

080197c0 <abort>:
 80197c0:	b508      	push	{r3, lr}
 80197c2:	2006      	movs	r0, #6
 80197c4:	f000 f88e 	bl	80198e4 <raise>
 80197c8:	2001      	movs	r0, #1
 80197ca:	f7ea f9bd 	bl	8003b48 <_exit>

080197ce <__swhatbuf_r>:
 80197ce:	b570      	push	{r4, r5, r6, lr}
 80197d0:	460c      	mov	r4, r1
 80197d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80197d6:	2900      	cmp	r1, #0
 80197d8:	b096      	sub	sp, #88	@ 0x58
 80197da:	4615      	mov	r5, r2
 80197dc:	461e      	mov	r6, r3
 80197de:	da0d      	bge.n	80197fc <__swhatbuf_r+0x2e>
 80197e0:	89a3      	ldrh	r3, [r4, #12]
 80197e2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80197e6:	f04f 0100 	mov.w	r1, #0
 80197ea:	bf14      	ite	ne
 80197ec:	2340      	movne	r3, #64	@ 0x40
 80197ee:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80197f2:	2000      	movs	r0, #0
 80197f4:	6031      	str	r1, [r6, #0]
 80197f6:	602b      	str	r3, [r5, #0]
 80197f8:	b016      	add	sp, #88	@ 0x58
 80197fa:	bd70      	pop	{r4, r5, r6, pc}
 80197fc:	466a      	mov	r2, sp
 80197fe:	f000 f879 	bl	80198f4 <_fstat_r>
 8019802:	2800      	cmp	r0, #0
 8019804:	dbec      	blt.n	80197e0 <__swhatbuf_r+0x12>
 8019806:	9901      	ldr	r1, [sp, #4]
 8019808:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801980c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8019810:	4259      	negs	r1, r3
 8019812:	4159      	adcs	r1, r3
 8019814:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019818:	e7eb      	b.n	80197f2 <__swhatbuf_r+0x24>

0801981a <__smakebuf_r>:
 801981a:	898b      	ldrh	r3, [r1, #12]
 801981c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801981e:	079d      	lsls	r5, r3, #30
 8019820:	4606      	mov	r6, r0
 8019822:	460c      	mov	r4, r1
 8019824:	d507      	bpl.n	8019836 <__smakebuf_r+0x1c>
 8019826:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801982a:	6023      	str	r3, [r4, #0]
 801982c:	6123      	str	r3, [r4, #16]
 801982e:	2301      	movs	r3, #1
 8019830:	6163      	str	r3, [r4, #20]
 8019832:	b003      	add	sp, #12
 8019834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019836:	ab01      	add	r3, sp, #4
 8019838:	466a      	mov	r2, sp
 801983a:	f7ff ffc8 	bl	80197ce <__swhatbuf_r>
 801983e:	9f00      	ldr	r7, [sp, #0]
 8019840:	4605      	mov	r5, r0
 8019842:	4639      	mov	r1, r7
 8019844:	4630      	mov	r0, r6
 8019846:	f7fe fd37 	bl	80182b8 <_malloc_r>
 801984a:	b948      	cbnz	r0, 8019860 <__smakebuf_r+0x46>
 801984c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019850:	059a      	lsls	r2, r3, #22
 8019852:	d4ee      	bmi.n	8019832 <__smakebuf_r+0x18>
 8019854:	f023 0303 	bic.w	r3, r3, #3
 8019858:	f043 0302 	orr.w	r3, r3, #2
 801985c:	81a3      	strh	r3, [r4, #12]
 801985e:	e7e2      	b.n	8019826 <__smakebuf_r+0xc>
 8019860:	89a3      	ldrh	r3, [r4, #12]
 8019862:	6020      	str	r0, [r4, #0]
 8019864:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019868:	81a3      	strh	r3, [r4, #12]
 801986a:	9b01      	ldr	r3, [sp, #4]
 801986c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8019870:	b15b      	cbz	r3, 801988a <__smakebuf_r+0x70>
 8019872:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019876:	4630      	mov	r0, r6
 8019878:	f000 f84e 	bl	8019918 <_isatty_r>
 801987c:	b128      	cbz	r0, 801988a <__smakebuf_r+0x70>
 801987e:	89a3      	ldrh	r3, [r4, #12]
 8019880:	f023 0303 	bic.w	r3, r3, #3
 8019884:	f043 0301 	orr.w	r3, r3, #1
 8019888:	81a3      	strh	r3, [r4, #12]
 801988a:	89a3      	ldrh	r3, [r4, #12]
 801988c:	431d      	orrs	r5, r3
 801988e:	81a5      	strh	r5, [r4, #12]
 8019890:	e7cf      	b.n	8019832 <__smakebuf_r+0x18>

08019892 <_raise_r>:
 8019892:	291f      	cmp	r1, #31
 8019894:	b538      	push	{r3, r4, r5, lr}
 8019896:	4605      	mov	r5, r0
 8019898:	460c      	mov	r4, r1
 801989a:	d904      	bls.n	80198a6 <_raise_r+0x14>
 801989c:	2316      	movs	r3, #22
 801989e:	6003      	str	r3, [r0, #0]
 80198a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80198a4:	bd38      	pop	{r3, r4, r5, pc}
 80198a6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80198a8:	b112      	cbz	r2, 80198b0 <_raise_r+0x1e>
 80198aa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80198ae:	b94b      	cbnz	r3, 80198c4 <_raise_r+0x32>
 80198b0:	4628      	mov	r0, r5
 80198b2:	f000 f853 	bl	801995c <_getpid_r>
 80198b6:	4622      	mov	r2, r4
 80198b8:	4601      	mov	r1, r0
 80198ba:	4628      	mov	r0, r5
 80198bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80198c0:	f000 b83a 	b.w	8019938 <_kill_r>
 80198c4:	2b01      	cmp	r3, #1
 80198c6:	d00a      	beq.n	80198de <_raise_r+0x4c>
 80198c8:	1c59      	adds	r1, r3, #1
 80198ca:	d103      	bne.n	80198d4 <_raise_r+0x42>
 80198cc:	2316      	movs	r3, #22
 80198ce:	6003      	str	r3, [r0, #0]
 80198d0:	2001      	movs	r0, #1
 80198d2:	e7e7      	b.n	80198a4 <_raise_r+0x12>
 80198d4:	2100      	movs	r1, #0
 80198d6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80198da:	4620      	mov	r0, r4
 80198dc:	4798      	blx	r3
 80198de:	2000      	movs	r0, #0
 80198e0:	e7e0      	b.n	80198a4 <_raise_r+0x12>
	...

080198e4 <raise>:
 80198e4:	4b02      	ldr	r3, [pc, #8]	@ (80198f0 <raise+0xc>)
 80198e6:	4601      	mov	r1, r0
 80198e8:	6818      	ldr	r0, [r3, #0]
 80198ea:	f7ff bfd2 	b.w	8019892 <_raise_r>
 80198ee:	bf00      	nop
 80198f0:	200000f4 	.word	0x200000f4

080198f4 <_fstat_r>:
 80198f4:	b538      	push	{r3, r4, r5, lr}
 80198f6:	4d07      	ldr	r5, [pc, #28]	@ (8019914 <_fstat_r+0x20>)
 80198f8:	2300      	movs	r3, #0
 80198fa:	4604      	mov	r4, r0
 80198fc:	4608      	mov	r0, r1
 80198fe:	4611      	mov	r1, r2
 8019900:	602b      	str	r3, [r5, #0]
 8019902:	f7ea f971 	bl	8003be8 <_fstat>
 8019906:	1c43      	adds	r3, r0, #1
 8019908:	d102      	bne.n	8019910 <_fstat_r+0x1c>
 801990a:	682b      	ldr	r3, [r5, #0]
 801990c:	b103      	cbz	r3, 8019910 <_fstat_r+0x1c>
 801990e:	6023      	str	r3, [r4, #0]
 8019910:	bd38      	pop	{r3, r4, r5, pc}
 8019912:	bf00      	nop
 8019914:	20011110 	.word	0x20011110

08019918 <_isatty_r>:
 8019918:	b538      	push	{r3, r4, r5, lr}
 801991a:	4d06      	ldr	r5, [pc, #24]	@ (8019934 <_isatty_r+0x1c>)
 801991c:	2300      	movs	r3, #0
 801991e:	4604      	mov	r4, r0
 8019920:	4608      	mov	r0, r1
 8019922:	602b      	str	r3, [r5, #0]
 8019924:	f7ea f970 	bl	8003c08 <_isatty>
 8019928:	1c43      	adds	r3, r0, #1
 801992a:	d102      	bne.n	8019932 <_isatty_r+0x1a>
 801992c:	682b      	ldr	r3, [r5, #0]
 801992e:	b103      	cbz	r3, 8019932 <_isatty_r+0x1a>
 8019930:	6023      	str	r3, [r4, #0]
 8019932:	bd38      	pop	{r3, r4, r5, pc}
 8019934:	20011110 	.word	0x20011110

08019938 <_kill_r>:
 8019938:	b538      	push	{r3, r4, r5, lr}
 801993a:	4d07      	ldr	r5, [pc, #28]	@ (8019958 <_kill_r+0x20>)
 801993c:	2300      	movs	r3, #0
 801993e:	4604      	mov	r4, r0
 8019940:	4608      	mov	r0, r1
 8019942:	4611      	mov	r1, r2
 8019944:	602b      	str	r3, [r5, #0]
 8019946:	f7ea f8ef 	bl	8003b28 <_kill>
 801994a:	1c43      	adds	r3, r0, #1
 801994c:	d102      	bne.n	8019954 <_kill_r+0x1c>
 801994e:	682b      	ldr	r3, [r5, #0]
 8019950:	b103      	cbz	r3, 8019954 <_kill_r+0x1c>
 8019952:	6023      	str	r3, [r4, #0]
 8019954:	bd38      	pop	{r3, r4, r5, pc}
 8019956:	bf00      	nop
 8019958:	20011110 	.word	0x20011110

0801995c <_getpid_r>:
 801995c:	f7ea b8dc 	b.w	8003b18 <_getpid>

08019960 <_init>:
 8019960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019962:	bf00      	nop
 8019964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019966:	bc08      	pop	{r3}
 8019968:	469e      	mov	lr, r3
 801996a:	4770      	bx	lr

0801996c <_fini>:
 801996c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801996e:	bf00      	nop
 8019970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019972:	bc08      	pop	{r3}
 8019974:	469e      	mov	lr, r3
 8019976:	4770      	bx	lr
